00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic033.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 33
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 C0 23 A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 45 8B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 44 89 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 45 89 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 8A 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 88 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 44 89 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 45 8B 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 68 0D 04 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 68 0A 04 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 70 84 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 48 FD 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 A0 F8 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 B0 65 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 88 04 04 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 18 97 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 C8 BE 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 80 BC 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 58 CE 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 3C 29 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     70 34 B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     04 49 B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D0 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10192
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D0 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10192
00840     52 00 00 FF 
00844     8C E4 05 F1 | 	add	objptr, ##42124
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     52 00 00 FF 
00850     8C E4 85 F1 | 	sub	objptr, ##42124
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     3C E5 05 F1 | 	add	objptr, ##41276
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     3C E5 85 F1 | 	sub	objptr, ##41276
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     44 4C B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     98 53 B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     90 4D B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     3C E5 05 F1 | 	add	objptr, ##41276
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     3C E5 85 F1 | 	sub	objptr, ##41276
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     52 00 00 FF 
00980     50 E4 05 F1 | 	add	objptr, ##42064
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     80 E5 85 F1 | 	sub	objptr, ##36224
009c0     54 4B B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     48 19 B2 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     52 00 00 FF 
009dc     8C E4 05 F1 | 	add	objptr, ##42124
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     52 00 00 FF 
009e8     8C E4 85 F1 | 	sub	objptr, ##42124
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     52 00 00 FF 
00a64     74 E4 05 F1 | 	add	objptr, ##42100
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     52 00 00 FF 
00a70     74 E4 85 F1 | 	sub	objptr, ##42100
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     40 17 B2 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     E0 16 B2 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     52 00 00 FF 
00afc     94 E4 05 F1 | 	add	objptr, ##42132
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     52 00 00 FF 
00b08     56 E4 85 F1 | 	sub	objptr, ##42070
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     52 00 00 FF 
00b74     58 E4 05 F1 | 	add	objptr, ##42072
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     52 00 00 FF 
00b88     56 E4 85 F1 | 	sub	objptr, ##42070
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     70 16 B2 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     B8 2E B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     52 00 00 FF 
00bdc     94 E4 05 F1 | 	add	objptr, ##42132
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     52 00 00 FF 
00bf0     94 E4 85 F1 | 	sub	objptr, ##42132
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     D4 31 B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     3C E5 05 A1 |  if_e	add	objptr, ##41276
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     3C E5 85 A1 |  if_e	sub	objptr, ##41276
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     80 48 B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     D4 4F B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     D0 49 B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     AA 01 00 FF 
00ccc     26 51 06 F6 | 	mov	local22, ##@LR__5387
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     04 15 B2 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     B0 6E B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     C0 4C B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     52 00 00 FF 
00d34     74 E4 05 F1 | 	add	objptr, ##42100
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     52 00 00 FF 
00d40     74 E4 85 F1 | 	sub	objptr, ##42100
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     24 36 B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     54 38 B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     3C E5 05 F1 | 	add	objptr, ##41276
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     3C E5 85 F1 | 	sub	objptr, ##41276
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     0C 47 B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     60 4E B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     5C 48 B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     A0 13 B2 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     94 2D B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     88 2D B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     18 2D B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     E4 2C B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     04 2D B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     F4 2C B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     44 12 B2 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     F0 11 B2 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     C0 11 B2 FD | 	call	#_pspoke
0100c     52 00 00 FF 
01010     94 E4 05 F1 | 	add	objptr, ##42132
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     52 00 00 FF 
0101c     56 E4 85 F1 | 	sub	objptr, ##42070
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     52 00 00 FF 
0108c     58 E4 05 F1 | 	add	objptr, ##42072
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     52 00 00 FF 
010a0     56 E4 85 F1 | 	sub	objptr, ##42070
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     58 11 B2 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     A0 29 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     52 00 00 FF 
010f4     94 E4 05 F1 | 	add	objptr, ##42132
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     52 00 00 FF 
01108     94 E4 85 F1 | 	sub	objptr, ##42132
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     7C 2A B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     40 10 B2 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     EC 0F B2 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     BC 0F B2 FD | 	call	#_pspoke
01210     52 00 00 FF 
01214     94 E4 05 F1 | 	add	objptr, ##42132
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     52 00 00 FF 
01220     56 E4 85 F1 | 	sub	objptr, ##42070
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     52 00 00 FF 
01290     58 E4 05 F1 | 	add	objptr, ##42072
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     52 00 00 FF 
012a4     56 E4 85 F1 | 	sub	objptr, ##42070
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     54 0F B2 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     9C 27 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     52 00 00 FF 
012f8     94 E4 05 F1 | 	add	objptr, ##42132
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     52 00 00 FF 
0130c     94 E4 85 F1 | 	sub	objptr, ##42132
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     AA 01 00 FF 
01328     27 51 06 F6 | 	mov	local22, ##@LR__5388
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     52 00 00 FF 
01354     3A E4 05 F1 | 	add	objptr, ##42042
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     52 00 00 FF 
01360     78 E4 85 F1 | 	sub	objptr, ##42104
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     52 00 00 CF 
0136c     78 E4 05 C1 |  if_b	add	objptr, ##42104
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     52 00 00 CF 
01378     78 E4 85 C1 |  if_b	sub	objptr, ##42104
0137c     52 00 00 FF 
01380     78 E4 05 F1 | 	add	objptr, ##42104
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     52 00 00 FF 
0138c     78 E4 85 F1 | 	sub	objptr, ##42104
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     C4 28 B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     52 00 00 FF 
013b4     3A E4 05 F1 | 	add	objptr, ##42042
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     52 00 00 FF 
013c0     78 E4 85 F1 | 	sub	objptr, ##42104
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     52 00 00 3F 
013cc     78 E4 05 31 |  if_ae	add	objptr, ##42104
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     52 00 00 3F 
013d8     78 E4 85 31 |  if_ae	sub	objptr, ##42104
013dc     52 00 00 FF 
013e0     78 E4 05 F1 | 	add	objptr, ##42104
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     52 00 00 FF 
013ec     78 E4 85 F1 | 	sub	objptr, ##42104
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     64 28 B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     52 00 00 FF 
01414     40 E4 05 F1 | 	add	objptr, ##42048
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1B 00 00 FF 
01420     48 E4 85 F1 | 	sub	objptr, ##13896
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1B 00 00 CF 
01448     48 E4 05 C1 |  if_b	add	objptr, ##13896
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     52 00 00 CF 
01454     7C E4 85 C1 |  if_b	sub	objptr, ##42108
01458     52 00 00 FF 
0145c     7C E4 05 F1 | 	add	objptr, ##42108
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     52 00 00 FF 
01468     7C E4 85 F1 | 	sub	objptr, ##42108
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     B8 27 B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     52 00 00 FF 
01490     40 E4 05 F1 | 	add	objptr, ##42048
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     52 00 00 FF 
0149c     7C E4 85 F1 | 	sub	objptr, ##42108
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     52 00 00 3F 
014a8     7C E4 05 31 |  if_ae	add	objptr, ##42108
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     52 00 00 3F 
014b4     7C E4 85 31 |  if_ae	sub	objptr, ##42108
014b8     52 00 00 FF 
014bc     7C E4 05 F1 | 	add	objptr, ##42108
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     52 00 00 FF 
014c8     7C E4 85 F1 | 	sub	objptr, ##42108
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     5C 27 B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     52 00 00 FF 
014e0     74 E4 05 F1 | 	add	objptr, ##42100
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     52 00 00 FF 
014f4     74 E4 85 F1 | 	sub	objptr, ##42100
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     A8 15 B2 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     98 15 B2 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     51 00 00 FF 
01544     F7 E5 05 F1 | 	add	objptr, ##41975
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     52 00 00 FF 
01558     40 E4 85 F1 | 	sub	objptr, ##42048
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     14 47 B2 FD | 	call	#__system___waitms
01568     52 00 00 FF 
0156c     40 E4 05 F1 | 	add	objptr, ##42048
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     52 00 00 FF 
01580     40 E4 85 F1 | 	sub	objptr, ##42048
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     EC 46 B2 FD | 	call	#__system___waitms
01590     52 00 00 FF 
01594     40 E4 05 F1 | 	add	objptr, ##42048
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     52 00 00 FF 
015a8     40 E4 85 F1 | 	sub	objptr, ##42048
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     C4 46 B2 FD | 	call	#__system___waitms
015b8     52 00 00 FF 
015bc     40 E4 05 F1 | 	add	objptr, ##42048
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     52 00 00 FF 
015d0     40 E4 85 F1 | 	sub	objptr, ##42048
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     05 4A 05 F6 | 	mov	COUNT_, #5
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     48 E5 05 F1 | 	add	objptr, ##41800
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     AD F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10413
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     50 E5 85 F1 | 	sub	objptr, ##41808
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650     D4 3B B2 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     00 01 90 CD |  if_b	jmp	#LR__0061
0165c     14 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     24 3C B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 2A 02 F6 | 	mov	local03, result1
0166c     14 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     14 3C B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     FD 2C 02 F6 | 	mov	local04, result1
0167c     14 13 02 F6 | 	mov	arg01, local02
01680     05 14 06 F6 | 	mov	arg02, #5
01684     04 3C B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01688     FD 2E 02 F6 | 	mov	local05, result1
0168c     14 13 02 F6 | 	mov	arg01, local02
01690     00 14 06 F6 | 	mov	arg02, #0
01694     44 3C B2 FD | 	call	#_usbnew_spin2_hidpad_hat
01698     FD 14 02 F6 | 	mov	arg02, result1
0169c     13 FB 01 F6 | 	mov	result1, local01
016a0     02 FA 65 F0 | 	shl	result1, #2
016a4     51 00 00 FF 
016a8     58 E5 05 F1 | 	add	objptr, ##41816
016ac     F2 FA 01 F1 | 	add	result1, objptr
016b0     FD 2A 62 FC | 	wrlong	local03, result1
016b4     13 FB 01 F6 | 	mov	result1, local01
016b8     02 FA 65 F0 | 	shl	result1, #2
016bc     1C E4 05 F1 | 	add	objptr, #28
016c0     F2 FA 01 F1 | 	add	result1, objptr
016c4     FD 2C 62 FC | 	wrlong	local04, result1
016c8     13 FB 01 F6 | 	mov	result1, local01
016cc     02 FA 65 F0 | 	shl	result1, #2
016d0     1C E4 05 F1 | 	add	objptr, #28
016d4     F2 FA 01 F1 | 	add	result1, objptr
016d8     FD 2E 62 FC | 	wrlong	local05, result1
016dc     13 2F 02 F6 | 	mov	local05, local01
016e0     02 2E 66 F0 | 	shl	local05, #2
016e4     1C E4 05 F1 | 	add	objptr, #28
016e8     F2 2E 02 F1 | 	add	local05, objptr
016ec     17 15 62 FC | 	wrlong	arg02, local05
016f0     60 00 00 FF 
016f4     00 2A 06 F1 | 	add	local03, ##49152
016f8     0F 2A 46 F0 | 	shr	local03, #15
016fc     01 2E 06 F6 | 	mov	local05, #1
01700     15 2F 02 F1 | 	add	local05, local03
01704     60 00 00 FF 
01708     00 2C 06 F1 | 	add	local04, ##49152
0170c     0F 2C 46 F0 | 	shr	local04, #15
01710     01 2A 06 F6 | 	mov	local03, #1
01714     16 2B 02 F1 | 	add	local03, local04
01718     13 2D 02 F6 | 	mov	local04, local01
0171c     02 2C 66 F0 | 	shl	local04, #2
01720     1C E4 05 F1 | 	add	objptr, #28
01724     F2 2C 02 F1 | 	add	local04, objptr
01728     02 2A 66 F0 | 	shl	local03, #2
0172c     15 2F 02 F1 | 	add	local05, local03
01730     16 2F 62 FC | 	wrlong	local05, local04
01734     13 2F 02 F6 | 	mov	local05, local01
01738     02 2E 66 F0 | 	shl	local05, #2
0173c     1C E4 05 F1 | 	add	objptr, #28
01740     F2 2E 02 F1 | 	add	local05, objptr
01744     14 13 02 F6 | 	mov	arg01, local02
01748     51 00 00 FF 
0174c     E4 E5 85 F1 | 	sub	objptr, ##41956
01750     04 3B B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
01754     17 FB 61 FC | 	wrlong	result1, local05
01758     01 26 06 F1 | 	add	local01, #1
0175c                 | LR__0061
0175c     01 28 06 F1 | 	add	local02, #1
01760     07 28 16 F2 | 	cmp	local02, #7 wc
01764     E4 FE 9F CD |  if_b	jmp	#LR__0060
01768     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
0176c                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
0176c                 | LR__0062
0176c     07 26 16 F2 | 	cmp	local01, #7 wc
01770     3C 00 90 3D |  if_ae	jmp	#LR__0064
01774     13 2F 02 F6 | 	mov	local05, local01
01778     02 2E 66 F0 | 	shl	local05, #2
0177c     51 00 00 FF 
01780     C8 E5 05 F1 | 	add	objptr, ##41928
01784     F2 2E 02 F1 | 	add	local05, objptr
01788     17 01 68 FC | 	wrlong	#0, local05
0178c     13 2F 02 F6 | 	mov	local05, local01
01790     02 2E 66 F0 | 	shl	local05, #2
01794     1C E4 05 F1 | 	add	objptr, #28
01798     F2 2E 02 F1 | 	add	local05, objptr
0179c     17 01 68 FC | 	wrlong	#0, local05
017a0     01 26 06 F1 | 	add	local01, #1
017a4     51 00 00 FF 
017a8     E4 E5 85 F1 | 	sub	objptr, ##41956
017ac     BC FF 9F FD | 	jmp	#LR__0062
017b0                 | LR__0063
017b0                 | LR__0064
017b0     A7 F0 03 F6 | 	mov	ptra, fp
017b4     B2 00 A0 FD | 	call	#popregs_
017b8                 | _gethdi_ret
017b8     2D 00 64 FD | 	ret
017bc                 | 
017bc                 | ' 
017bc                 | ' '-------------------------------------------------------------------------------------------------------------
017bc                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
017bc                 | ' '-------------------------------------------------------------------------------------------------------------
017bc                 | ' 
017bc                 | ' '-------------------------------------------------------------------------------------------------------------
017bc                 | ' '
017bc                 | ' '                                     LINE INTERPRETER/TOKENIZER
017bc                 | ' '
017bc                 | ' '-------------------------------------------------------------------------------------------------------------
017bc                 | ' 
017bc                 | ' 
017bc                 | ' sub interpret
017bc                 | _interpret
017bc     31 4A 05 F6 | 	mov	COUNT_, #49
017c0     A8 00 A0 FD | 	call	#pushregs_
017c4     01 00 00 FF 
017c8     84 F0 07 F1 | 	add	ptra, ##644
017cc     37 00 00 FF 
017d0     1C E4 05 F1 | 	add	objptr, ##28188
017d4     F2 12 02 FB | 	rdlong	arg01, objptr
017d8     37 00 00 FF 
017dc     1C E4 85 F1 | 	sub	objptr, ##28188
017e0     B0 66 B2 FD | 	call	#__system__RTrim_S
017e4     FD 12 02 F6 | 	mov	arg01, result1
017e8     E8 65 B2 FD | 	call	#__system__LTrim_S
017ec     37 00 00 FF 
017f0     20 E4 05 F1 | 	add	objptr, ##28192
017f4     F2 FA 61 FC | 	wrlong	result1, objptr
017f8     04 E4 05 F1 | 	add	objptr, #4
017fc     FF FF FF FF 
01800     F2 FE 6B FC | 	wrlong	##-1, objptr
01804     1B 00 00 FF 
01808     38 E4 05 F1 | 	add	objptr, ##13880
0180c     F2 00 68 FC | 	wrlong	#0, objptr
01810     07 00 00 FF 
01814     E0 E5 85 F1 | 	sub	objptr, ##4064
01818     F2 00 68 FC | 	wrlong	#0, objptr
0181c     4A 00 00 FF 
01820     7C E4 85 F1 | 	sub	objptr, ##38012
01824     00 26 06 F6 | 	mov	local01, #0
01828                 | LR__0070
01828                 | ' 
01828                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
01828                 | ' 
01828                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
01828                 | ' 
01828                 | ' 108 
01828                 | ' for i=0 to 125: separators(i)=0 :next i
01828     00 28 06 F6 | 	mov	local02, #0
0182c     38 4E 05 F1 | 	add	fp, #56
01830     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01834                 | LR__0071
01834     14 2B 02 F6 | 	mov	local03, local02
01838     02 2A 66 F0 | 	shl	local03, #2
0183c     A7 2A 02 F1 | 	add	local03, fp
01840     15 01 68 FC | 	wrlong	#0, local03
01844     01 28 06 F1 | 	add	local02, #1
01848     7E 28 56 F2 | 	cmps	local02, #126 wc
0184c     E4 FF 9F CD |  if_b	jmp	#LR__0071
01850                 | LR__0072
01850     38 4E 85 F1 | 	sub	fp, #56
01854                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
01854     00 28 06 F6 | 	mov	local02, #0
01858     35 00 00 FF 
0185c     0C E4 05 F1 | 	add	objptr, ##27148
01860     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
01864                 | LR__0073
01864     14 2D 02 F6 | 	mov	local04, local02
01868     03 2C 66 F0 | 	shl	local04, #3
0186c     F2 2C 02 F1 | 	add	local04, objptr
01870     AA 01 00 FF 
01874     28 17 06 F6 | 	mov	arg03, ##@LR__5389
01878     16 17 62 FC | 	wrlong	arg03, local04
0187c     14 2D 02 F6 | 	mov	local04, local02
01880     03 2C 66 F0 | 	shl	local04, #3
01884     F2 2E 02 F6 | 	mov	local05, objptr
01888     F2 2C 02 F1 | 	add	local04, objptr
0188c     00 30 06 F6 | 	mov	local06, #0
01890     04 2C 06 F1 | 	add	local04, #4
01894     16 01 68 FC | 	wrlong	#0, local04
01898     01 28 06 F1 | 	add	local02, #1
0189c     7E 28 56 F2 | 	cmps	local02, #126 wc
018a0     C0 FF 9F CD |  if_b	jmp	#LR__0073
018a4                 | LR__0074
018a4     02 00 00 FF 
018a8     10 E4 05 F1 | 	add	objptr, ##1040
018ac     F2 12 02 FB | 	rdlong	arg01, objptr
018b0     37 00 00 FF 
018b4     1C E4 85 F1 | 	sub	objptr, ##28188
018b8     D8 65 B2 FD | 	call	#__system__RTrim_S
018bc     FD 12 02 F6 | 	mov	arg01, result1
018c0     10 65 B2 FD | 	call	#__system__LTrim_S
018c4     37 00 00 FF 
018c8     1C E4 05 F1 | 	add	objptr, ##28188
018cc     F2 FA 61 FC | 	wrlong	result1, objptr
018d0     AA 01 00 FF 
018d4     29 2D 06 F6 | 	mov	local04, ##@LR__5390
018d8     1B 00 00 FF 
018dc     7C E4 05 F1 | 	add	objptr, ##13948
018e0     F2 2C 62 FC | 	wrlong	local04, objptr
018e4     1B 00 00 FF 
018e8     7C E4 85 F1 | 	sub	objptr, ##13948
018ec     F2 12 02 FB | 	rdlong	arg01, objptr
018f0     37 00 00 FF 
018f4     1C E4 85 F1 | 	sub	objptr, ##28188
018f8     09 33 02 F6 | 	mov	local07, arg01
018fc     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
01900                 | LR__0075
01900     19 FB C9 FA | 	rdbyte	result1, local07 wz
01904     01 32 06 51 |  if_ne	add	local07, #1
01908     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
0190c                 | LR__0076
0190c     09 33 8A F1 | 	sub	local07, arg01 wz
01910     52 00 00 FF 
01914     9C E4 05 F1 | 	add	objptr, ##42140
01918     F2 32 62 FC | 	wrlong	local07, objptr
0191c                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
0191c     52 00 00 FF 
01920     9C E4 85 F1 | 	sub	objptr, ##42140
01924     78 27 90 AD |  if_e	jmp	#LR__0206
01928     00 34 06 F6 | 	mov	local08, #0
0192c                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
0192c                 | ' for i=1 to len(line$)
0192c     01 28 06 F6 | 	mov	local02, #1
01930     37 00 00 FF 
01934     1C E4 05 F1 | 	add	objptr, ##28188
01938     F2 12 02 FB | 	rdlong	arg01, objptr
0193c     37 00 00 FF 
01940     1C E4 85 F1 | 	sub	objptr, ##28188
01944     09 33 02 F6 | 	mov	local07, arg01
01948     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
0194c                 | LR__0077
0194c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01950     01 32 06 51 |  if_ne	add	local07, #1
01954     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
01958                 | LR__0078
01958     09 33 82 F1 | 	sub	local07, arg01
0195c     19 37 02 F6 | 	mov	local09, local07
01960     01 36 06 F1 | 	add	local09, #1
01964                 | LR__0079
01964     1B 29 52 F2 | 	cmps	local02, local09 wc
01968     AC 00 90 3D |  if_ae	jmp	#LR__0081
0196c                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
0196c     37 00 00 FF 
01970     1C E4 05 F1 | 	add	objptr, ##28188
01974     F2 12 02 FB | 	rdlong	arg01, objptr
01978     37 00 00 FF 
0197c     1C E4 85 F1 | 	sub	objptr, ##28188
01980     14 15 02 F6 | 	mov	arg02, local02
01984     01 16 06 F6 | 	mov	arg03, #1
01988     90 61 B2 FD | 	call	#__system__Mid_S
0198c     FD 12 02 F6 | 	mov	arg01, result1
01990     AA 01 00 FF 
01994     2A 15 06 F6 | 	mov	arg02, ##@LR__5391
01998     14 40 B2 FD | 	call	#__system___string_cmp
0199c     00 FA 0D F2 | 	cmp	result1, #0 wz
019a0     00 34 0E A2 |  if_e	cmp	local08, #0 wz
019a4     01 34 06 A6 |  if_e	mov	local08, #1
019a8     3C 00 90 AD |  if_e	jmp	#LR__0080
019ac     37 00 00 FF 
019b0     1C E4 05 F1 | 	add	objptr, ##28188
019b4     F2 12 02 FB | 	rdlong	arg01, objptr
019b8     37 00 00 FF 
019bc     1C E4 85 F1 | 	sub	objptr, ##28188
019c0     14 15 02 F6 | 	mov	arg02, local02
019c4     01 16 06 F6 | 	mov	arg03, #1
019c8     50 61 B2 FD | 	call	#__system__Mid_S
019cc     FD 12 02 F6 | 	mov	arg01, result1
019d0     AA 01 00 FF 
019d4     2C 15 06 F6 | 	mov	arg02, ##@LR__5392
019d8     D4 3F B2 FD | 	call	#__system___string_cmp
019dc     00 FA 0D F2 | 	cmp	result1, #0 wz
019e0     01 34 0E A2 |  if_e	cmp	local08, #1 wz
019e4     00 34 06 A6 |  if_e	mov	local08, #0
019e8                 | LR__0080
019e8     14 2D 02 F6 | 	mov	local04, local02
019ec     03 2C 66 F0 | 	shl	local04, #3
019f0     35 00 00 FF 
019f4     0C E4 05 F1 | 	add	objptr, ##27148
019f8     F2 2E 02 F6 | 	mov	local05, objptr
019fc     F2 2C 02 F1 | 	add	local04, objptr
01a00     04 2C 06 F1 | 	add	local04, #4
01a04     16 35 62 FC | 	wrlong	local08, local04
01a08     01 28 06 F1 | 	add	local02, #1
01a0c     35 00 00 FF 
01a10     0C E4 85 F1 | 	sub	objptr, ##27148
01a14     4C FF 9F FD | 	jmp	#LR__0079
01a18                 | LR__0081
01a18     01 28 06 F6 | 	mov	local02, #1
01a1c                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01a1c                 | LR__0082
01a1c     37 00 00 FF 
01a20     1C E4 05 F1 | 	add	objptr, ##28188
01a24     F2 12 02 FB | 	rdlong	arg01, objptr
01a28     37 00 00 FF 
01a2c     1C E4 85 F1 | 	sub	objptr, ##28188
01a30     14 15 02 F6 | 	mov	arg02, local02
01a34     01 16 06 F6 | 	mov	arg03, #1
01a38     E0 60 B2 FD | 	call	#__system__Mid_S
01a3c     FD 12 02 F6 | 	mov	arg01, result1
01a40     AA 01 00 FF 
01a44     2E 39 06 F6 | 	mov	local10, ##@LR__5393
01a48     1C 15 02 F6 | 	mov	arg02, local10
01a4c     60 3F B2 FD | 	call	#__system___string_cmp
01a50     00 FA 0D F2 | 	cmp	result1, #0 wz
01a54     34 00 90 5D |  if_ne	jmp	#LR__0083
01a58     14 2F 02 F6 | 	mov	local05, local02
01a5c     03 2E 66 F0 | 	shl	local05, #3
01a60     35 00 00 FF 
01a64     0C E4 05 F1 | 	add	objptr, ##27148
01a68     F2 30 02 F6 | 	mov	local06, objptr
01a6c     F2 2E 02 F1 | 	add	local05, objptr
01a70     04 2E 06 F1 | 	add	local05, #4
01a74     17 3B 02 FB | 	rdlong	local11, local05
01a78     04 2E 86 F1 | 	sub	local05, #4
01a7c     1D 3D 0A F6 | 	mov	local12, local11 wz
01a80     35 00 00 FF 
01a84     0C E4 85 F1 | 	sub	objptr, ##27148
01a88     24 00 90 AD |  if_e	jmp	#LR__0084
01a8c                 | LR__0083
01a8c     52 00 00 FF 
01a90     9C E4 05 F1 | 	add	objptr, ##42140
01a94     F2 3E 02 FB | 	rdlong	local13, objptr
01a98     52 00 00 FF 
01a9c     9C E4 85 F1 | 	sub	objptr, ##42140
01aa0     1F 41 02 F6 | 	mov	local14, local13
01aa4     20 29 52 F2 | 	cmps	local02, local14 wc
01aa8     01 28 06 C1 |  if_b	add	local02, #1
01aac     6C FF 9F CD |  if_b	jmp	#LR__0082
01ab0                 | LR__0084
01ab0                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01ab0     52 00 00 FF 
01ab4     9C E4 05 F1 | 	add	objptr, ##42140
01ab8     F2 2C 02 FB | 	rdlong	local04, objptr
01abc     52 00 00 FF 
01ac0     9C E4 85 F1 | 	sub	objptr, ##42140
01ac4     16 29 52 F2 | 	cmps	local02, local04 wc
01ac8     A8 00 90 3D |  if_ae	jmp	#LR__0087
01acc     37 00 00 FF 
01ad0     1C E4 05 F1 | 	add	objptr, ##28188
01ad4     F2 30 02 FB | 	rdlong	local06, objptr
01ad8     37 00 00 FF 
01adc     1C E4 85 F1 | 	sub	objptr, ##28188
01ae0     18 13 02 F6 | 	mov	arg01, local06
01ae4     09 33 02 F6 | 	mov	local07, arg01
01ae8     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01aec                 | LR__0085
01aec     19 FB C9 FA | 	rdbyte	result1, local07 wz
01af0     01 32 06 51 |  if_ne	add	local07, #1
01af4     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01af8                 | LR__0086
01af8     09 33 82 F1 | 	sub	local07, arg01
01afc     19 2F 02 F6 | 	mov	local05, local07
01b00     17 15 02 F6 | 	mov	arg02, local05
01b04     14 15 82 F1 | 	sub	arg02, local02
01b08     18 13 02 F6 | 	mov	arg01, local06
01b0c     7C 5F B2 FD | 	call	#__system__Right_S
01b10     FD 12 02 F6 | 	mov	arg01, result1
01b14     7C 63 B2 FD | 	call	#__system__RTrim_S
01b18     FD 12 02 F6 | 	mov	arg01, result1
01b1c     B4 62 B2 FD | 	call	#__system__LTrim_S
01b20     52 00 00 FF 
01b24     A0 E4 05 F1 | 	add	objptr, ##42144
01b28     F2 FA 61 FC | 	wrlong	result1, objptr
01b2c     1B 00 00 FF 
01b30     84 E4 85 F1 | 	sub	objptr, ##13956
01b34     F2 12 02 FB | 	rdlong	arg01, objptr
01b38     37 00 00 FF 
01b3c     1C E4 85 F1 | 	sub	objptr, ##28188
01b40     01 28 86 F1 | 	sub	local02, #1
01b44     14 15 02 F6 | 	mov	arg02, local02
01b48     B8 5E B2 FD | 	call	#__system__Left_S
01b4c     FD 12 02 F6 | 	mov	arg01, result1
01b50     40 63 B2 FD | 	call	#__system__RTrim_S
01b54     FD 12 02 F6 | 	mov	arg01, result1
01b58     78 62 B2 FD | 	call	#__system__LTrim_S
01b5c     37 00 00 FF 
01b60     1C E4 05 F1 | 	add	objptr, ##28188
01b64     F2 FA 61 FC | 	wrlong	result1, objptr
01b68     37 00 00 FF 
01b6c     1C E4 85 F1 | 	sub	objptr, ##28188
01b70     1C 00 90 FD | 	jmp	#LR__0088
01b74                 | LR__0087
01b74     AA 01 00 FF 
01b78     30 2D 06 F6 | 	mov	local04, ##@LR__5394
01b7c     52 00 00 FF 
01b80     A0 E4 05 F1 | 	add	objptr, ##42144
01b84     F2 2C 62 FC | 	wrlong	local04, objptr
01b88     52 00 00 FF 
01b8c     A0 E4 85 F1 | 	sub	objptr, ##42144
01b90                 | LR__0088
01b90                 | ' 
01b90                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01b90     37 00 00 FF 
01b94     24 E4 05 F1 | 	add	objptr, ##28196
01b98     F2 2C 02 FB | 	rdlong	local04, objptr
01b9c     37 00 00 FF 
01ba0     24 E4 85 F1 | 	sub	objptr, ##28196
01ba4     FF FF 7F FF 
01ba8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01bac     40 00 90 5D |  if_ne	jmp	#LR__0089
01bb0     52 00 00 FF 
01bb4     A0 E4 05 F1 | 	add	objptr, ##42144
01bb8     F2 12 02 FB | 	rdlong	arg01, objptr
01bbc     52 00 00 FF 
01bc0     A0 E4 85 F1 | 	sub	objptr, ##42144
01bc4     AA 01 00 FF 
01bc8     31 31 06 F6 | 	mov	local06, ##@LR__5395
01bcc     18 15 02 F6 | 	mov	arg02, local06
01bd0     DC 3D B2 FD | 	call	#__system___string_cmp
01bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
01bd8     37 00 00 5F 
01bdc     24 E4 05 51 |  if_ne	add	objptr, ##28196
01be0     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01be4     37 00 00 5F 
01be8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01bec     08 01 90 5D |  if_ne	jmp	#LR__0093
01bf0                 | LR__0089
01bf0                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01bf0     37 00 00 FF 
01bf4     24 E4 05 F1 | 	add	objptr, ##28196
01bf8     F2 2C 02 FB | 	rdlong	local04, objptr
01bfc     37 00 00 FF 
01c00     24 E4 85 F1 | 	sub	objptr, ##28196
01c04     FF FF 7F FF 
01c08     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c0c     3C 00 90 5D |  if_ne	jmp	#LR__0090
01c10     52 00 00 FF 
01c14     A0 E4 05 F1 | 	add	objptr, ##42144
01c18     F2 12 02 FB | 	rdlong	arg01, objptr
01c1c     52 00 00 FF 
01c20     A0 E4 85 F1 | 	sub	objptr, ##42144
01c24     AA 01 00 FF 
01c28     32 15 06 F6 | 	mov	arg02, ##@LR__5396
01c2c     80 3D B2 FD | 	call	#__system___string_cmp
01c30     00 FA 0D F2 | 	cmp	result1, #0 wz
01c34     37 00 00 AF 
01c38     24 E4 05 A1 |  if_e	add	objptr, ##28196
01c3c     F2 06 68 AC |  if_e	wrlong	#3, objptr
01c40     37 00 00 AF 
01c44     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01c48     AC 00 90 AD |  if_e	jmp	#LR__0093
01c4c                 | LR__0090
01c4c                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01c4c     37 00 00 FF 
01c50     24 E4 05 F1 | 	add	objptr, ##28196
01c54     F2 2C 02 FB | 	rdlong	local04, objptr
01c58     37 00 00 FF 
01c5c     24 E4 85 F1 | 	sub	objptr, ##28196
01c60     04 2C 0E F2 | 	cmp	local04, #4 wz
01c64     3C 00 90 5D |  if_ne	jmp	#LR__0091
01c68     52 00 00 FF 
01c6c     A0 E4 05 F1 | 	add	objptr, ##42144
01c70     F2 12 02 FB | 	rdlong	arg01, objptr
01c74     52 00 00 FF 
01c78     A0 E4 85 F1 | 	sub	objptr, ##42144
01c7c     AA 01 00 FF 
01c80     33 15 06 F6 | 	mov	arg02, ##@LR__5397
01c84     28 3D B2 FD | 	call	#__system___string_cmp
01c88     00 FA 0D F2 | 	cmp	result1, #0 wz
01c8c     37 00 00 5F 
01c90     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c94     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01c98     37 00 00 5F 
01c9c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01ca0     54 00 90 5D |  if_ne	jmp	#LR__0093
01ca4                 | LR__0091
01ca4                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01ca4     37 00 00 FF 
01ca8     24 E4 05 F1 | 	add	objptr, ##28196
01cac     F2 2C 02 FB | 	rdlong	local04, objptr
01cb0     37 00 00 FF 
01cb4     24 E4 85 F1 | 	sub	objptr, ##28196
01cb8     04 2C 0E F2 | 	cmp	local04, #4 wz
01cbc     38 00 90 5D |  if_ne	jmp	#LR__0092
01cc0     52 00 00 FF 
01cc4     A0 E4 05 F1 | 	add	objptr, ##42144
01cc8     F2 12 02 FB | 	rdlong	arg01, objptr
01ccc     52 00 00 FF 
01cd0     A0 E4 85 F1 | 	sub	objptr, ##42144
01cd4     AA 01 00 FF 
01cd8     34 15 06 F6 | 	mov	arg02, ##@LR__5398
01cdc     D0 3C B2 FD | 	call	#__system___string_cmp
01ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ce4     37 00 00 AF 
01ce8     24 E4 05 A1 |  if_e	add	objptr, ##28196
01cec     F2 04 68 AC |  if_e	wrlong	#2, objptr
01cf0     37 00 00 AF 
01cf4     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01cf8                 | LR__0092
01cf8                 | LR__0093
01cf8     38 4E 05 F1 | 	add	fp, #56
01cfc     A7 00 68 FC | 	wrlong	#0, fp
01d00     38 4E 85 F1 | 	sub	fp, #56
01d04     00 28 06 F6 | 	mov	local02, #0
01d08     01 42 06 F6 | 	mov	local15, #1
01d0c                 | ' 
01d0c                 | ' ' 1b: find separators
01d0c                 | ' 
01d0c                 | ' 107
01d0c                 | ' separators(0)=0
01d0c                 | ' i=0: j=1
01d0c                 | ' do: 
01d0c                 | LR__0094
01d0c     01 28 06 F1 | 	add	local02, #1
01d10     37 00 00 FF 
01d14     1C E4 05 F1 | 	add	objptr, ##28188
01d18     F2 12 02 FB | 	rdlong	arg01, objptr
01d1c     37 00 00 FF 
01d20     1C E4 85 F1 | 	sub	objptr, ##28188
01d24     14 15 02 F6 | 	mov	arg02, local02
01d28     01 16 06 F6 | 	mov	arg03, #1
01d2c     EC 5D B2 FD | 	call	#__system__Mid_S
01d30     FD 44 02 F6 | 	mov	local16, result1
01d34                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01d34     22 13 02 F6 | 	mov	arg01, local16
01d38     CC 2B B0 FD | 	call	#_isseparator
01d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
01d40     1C 00 90 AD |  if_e	jmp	#LR__0095
01d44     21 2B 02 F6 | 	mov	local03, local15
01d48     02 2A 66 F0 | 	shl	local03, #2
01d4c     38 4E 05 F1 | 	add	fp, #56
01d50     A7 2A 02 F1 | 	add	local03, fp
01d54     15 29 62 FC | 	wrlong	local02, local03
01d58     01 42 06 F1 | 	add	local15, #1
01d5c     38 4E 85 F1 | 	sub	fp, #56
01d60                 | LR__0095
01d60     52 00 00 FF 
01d64     9C E4 05 F1 | 	add	objptr, ##42140
01d68     F2 2C 02 FB | 	rdlong	local04, objptr
01d6c     52 00 00 FF 
01d70     9C E4 85 F1 | 	sub	objptr, ##42140
01d74     16 29 5A F2 | 	cmps	local02, local04 wcz
01d78     90 FF 9F ED |  if_be	jmp	#LR__0094
01d7c     21 2B 02 F6 | 	mov	local03, local15
01d80     02 2A 66 F0 | 	shl	local03, #2
01d84     38 4E 05 F1 | 	add	fp, #56
01d88     A7 38 02 F6 | 	mov	local10, fp
01d8c     A7 2A 02 F1 | 	add	local03, fp
01d90     15 29 62 FC | 	wrlong	local02, local03
01d94     00 46 06 F6 | 	mov	local17, #0
01d98                 | ' for i=0 to j-1 
01d98     00 28 06 F6 | 	mov	local02, #0
01d9c     21 49 02 F6 | 	mov	local18, local15
01da0     38 4E 85 F1 | 	sub	fp, #56
01da4                 | LR__0096
01da4     24 29 52 F2 | 	cmps	local02, local18 wc
01da8     50 01 90 3D |  if_ae	jmp	#LR__0100
01dac     14 2B 02 F6 | 	mov	local03, local02
01db0     02 2A 66 F0 | 	shl	local03, #2
01db4     38 4E 05 F1 | 	add	fp, #56
01db8     A7 2A 02 F1 | 	add	local03, fp
01dbc     15 2F 02 FB | 	rdlong	local05, local03
01dc0     52 00 00 FF 
01dc4     A8 E4 05 F1 | 	add	objptr, ##42152
01dc8     F2 2E 62 FC | 	wrlong	local05, objptr
01dcc     14 2B 02 F6 | 	mov	local03, local02
01dd0     01 2A 06 F1 | 	add	local03, #1
01dd4     02 2A 66 F0 | 	shl	local03, #2
01dd8     A7 38 02 F6 | 	mov	local10, fp
01ddc     A7 2A 02 F1 | 	add	local03, fp
01de0     15 2F 02 FB | 	rdlong	local05, local03
01de4     04 E4 05 F1 | 	add	objptr, #4
01de8     F2 2E 62 FC | 	wrlong	local05, objptr
01dec                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01dec     04 E4 85 F1 | 	sub	objptr, #4
01df0     F2 2C 02 FB | 	rdlong	local04, objptr
01df4     52 00 00 FF 
01df8     A8 E4 85 F1 | 	sub	objptr, ##42152
01dfc     01 2C 56 F2 | 	cmps	local04, #1 wc
01e00     38 4E 85 F1 | 	sub	fp, #56
01e04     68 00 90 CD |  if_b	jmp	#LR__0098
01e08     37 00 00 FF 
01e0c     1C E4 05 F1 | 	add	objptr, ##28188
01e10     F2 12 02 FB | 	rdlong	arg01, objptr
01e14     1B 00 00 FF 
01e18     8C E4 05 F1 | 	add	objptr, ##13964
01e1c     F2 14 02 FB | 	rdlong	arg02, objptr
01e20     52 00 00 FF 
01e24     A8 E4 85 F1 | 	sub	objptr, ##42152
01e28     01 16 06 F6 | 	mov	arg03, #1
01e2c     EC 5C B2 FD | 	call	#__system__Mid_S
01e30     FD 4A 02 F6 | 	mov	local19, result1
01e34     AA 01 00 FF 
01e38     35 15 06 F6 | 	mov	arg02, ##@LR__5399
01e3c     25 13 02 F6 | 	mov	arg01, local19
01e40     6C 3B B2 FD | 	call	#__system___string_cmp
01e44     00 FA 0D F2 | 	cmp	result1, #0 wz
01e48     24 00 90 AD |  if_e	jmp	#LR__0097
01e4c     23 39 02 F6 | 	mov	local10, local17
01e50     03 38 66 F0 | 	shl	local10, #3
01e54     35 00 00 FF 
01e58     0C E4 05 F1 | 	add	objptr, ##27148
01e5c     F2 38 02 F1 | 	add	local10, objptr
01e60     1C 4B 62 FC | 	wrlong	local19, local10
01e64     01 46 06 F1 | 	add	local17, #1
01e68     35 00 00 FF 
01e6c     0C E4 85 F1 | 	sub	objptr, ##27148
01e70                 | LR__0097
01e70                 | LR__0098
01e70     37 00 00 FF 
01e74     1C E4 05 F1 | 	add	objptr, ##28188
01e78     F2 12 02 FB | 	rdlong	arg01, objptr
01e7c     1B 00 00 FF 
01e80     8C E4 05 F1 | 	add	objptr, ##13964
01e84     F2 14 02 FB | 	rdlong	arg02, objptr
01e88     01 14 06 F1 | 	add	arg02, #1
01e8c     04 E4 05 F1 | 	add	objptr, #4
01e90     F2 16 02 FB | 	rdlong	arg03, objptr
01e94     04 E4 85 F1 | 	sub	objptr, #4
01e98     F2 3A 02 FB | 	rdlong	local11, objptr
01e9c     52 00 00 FF 
01ea0     A8 E4 85 F1 | 	sub	objptr, ##42152
01ea4     1D 3D 02 F6 | 	mov	local12, local11
01ea8     1E 17 82 F1 | 	sub	arg03, local12
01eac     01 16 86 F1 | 	sub	arg03, #1
01eb0     68 5C B2 FD | 	call	#__system__Mid_S
01eb4     FD 4A 02 F6 | 	mov	local19, result1
01eb8                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01eb8     AA 01 00 FF 
01ebc     36 15 06 F6 | 	mov	arg02, ##@LR__5400
01ec0     25 13 02 F6 | 	mov	arg01, local19
01ec4     E8 3A B2 FD | 	call	#__system___string_cmp
01ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
01ecc     24 00 90 AD |  if_e	jmp	#LR__0099
01ed0     23 39 02 F6 | 	mov	local10, local17
01ed4     03 38 66 F0 | 	shl	local10, #3
01ed8     35 00 00 FF 
01edc     0C E4 05 F1 | 	add	objptr, ##27148
01ee0     F2 38 02 F1 | 	add	local10, objptr
01ee4     1C 4B 62 FC | 	wrlong	local19, local10
01ee8     01 46 06 F1 | 	add	local17, #1
01eec     35 00 00 FF 
01ef0     0C E4 85 F1 | 	sub	objptr, ##27148
01ef4                 | LR__0099
01ef4     01 28 06 F1 | 	add	local02, #1
01ef8     A8 FE 9F FD | 	jmp	#LR__0096
01efc                 | LR__0100
01efc                 | ' 
01efc                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01efc                 | ' 
01efc                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01efc     37 00 00 FF 
01f00     24 E4 05 F1 | 	add	objptr, ##28196
01f04     F2 2C 0A FB | 	rdlong	local04, objptr wz
01f08     37 00 00 FF 
01f0c     24 E4 85 F1 | 	sub	objptr, ##28196
01f10     37 00 00 5F 
01f14     24 E4 05 51 |  if_ne	add	objptr, ##28196
01f18     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01f1c     37 00 00 5F 
01f20     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01f24     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01f28     B8 00 90 5D |  if_ne	jmp	#LR__0103
01f2c     35 00 00 FF 
01f30     0C E4 05 F1 | 	add	objptr, ##27148
01f34     F2 3A 02 FB | 	rdlong	local11, objptr
01f38     35 00 00 FF 
01f3c     0C E4 85 F1 | 	sub	objptr, ##27148
01f40     1D 13 02 F6 | 	mov	arg01, local11
01f44     E4 4B B0 FD | 	call	#_isdec
01f48     FD 3C 02 F6 | 	mov	local12, result1
01f4c     1E 31 22 F6 | 	not	local06, local12
01f50     00 30 0E F2 | 	cmp	local06, #0 wz
01f54     8C 00 90 AD |  if_e	jmp	#LR__0103
01f58     23 29 02 F6 | 	mov	local02, local17
01f5c     35 00 00 FF 
01f60     0C E4 05 F1 | 	add	objptr, ##27148
01f64     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01f68                 | LR__0101
01f68     14 2F 02 F6 | 	mov	local05, local02
01f6c     01 2E 86 F1 | 	sub	local05, #1
01f70     03 2E 66 F0 | 	shl	local05, #3
01f74     F2 2E 02 F1 | 	add	local05, objptr
01f78     17 2D 02 FB | 	rdlong	local04, local05
01f7c     14 31 02 F6 | 	mov	local06, local02
01f80     01 30 86 F1 | 	sub	local06, #1
01f84     03 30 66 F0 | 	shl	local06, #3
01f88     F2 30 02 F1 | 	add	local06, objptr
01f8c     04 30 06 F1 | 	add	local06, #4
01f90     18 2B 02 FB | 	rdlong	local03, local06
01f94     14 31 02 F6 | 	mov	local06, local02
01f98     03 30 66 F0 | 	shl	local06, #3
01f9c     F2 3C 02 F6 | 	mov	local12, objptr
01fa0     F2 30 02 F1 | 	add	local06, objptr
01fa4     18 2D 62 FC | 	wrlong	local04, local06
01fa8     14 3B 02 F6 | 	mov	local11, local02
01fac     1D 3F 02 F6 | 	mov	local13, local11
01fb0     03 3E 66 F0 | 	shl	local13, #3
01fb4     F2 3E 02 F1 | 	add	local13, objptr
01fb8     04 3E 06 F1 | 	add	local13, #4
01fbc     1F 2B 62 FC | 	wrlong	local03, local13
01fc0     01 28 86 F1 | 	sub	local02, #1
01fc4     01 28 56 F2 | 	cmps	local02, #1 wc
01fc8     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01fcc                 | LR__0102
01fcc     AA 01 00 FF 
01fd0     37 2D 06 F6 | 	mov	local04, ##@LR__5401
01fd4     F2 2C 62 FC | 	wrlong	local04, objptr
01fd8     35 00 00 FF 
01fdc     0C E4 85 F1 | 	sub	objptr, ##27148
01fe0     01 46 06 F1 | 	add	local17, #1
01fe4                 | LR__0103
01fe4     00 28 06 F6 | 	mov	local02, #0
01fe8                 | ' 
01fe8                 | ' ' 1e : find strings
01fe8                 | ' 
01fe8                 | ' i=0
01fe8                 | ' do
01fe8                 | LR__0104
01fe8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01fe8     14 2F 02 F6 | 	mov	local05, local02
01fec     03 2E 66 F0 | 	shl	local05, #3
01ff0     35 00 00 FF 
01ff4     0C E4 05 F1 | 	add	objptr, ##27148
01ff8     F2 2E 02 F1 | 	add	local05, objptr
01ffc     17 13 02 FB | 	rdlong	arg01, local05
02000     AA 01 00 FF 
02004     39 15 06 F6 | 	mov	arg02, ##@LR__5402
02008     35 00 00 FF 
0200c     0C E4 85 F1 | 	sub	objptr, ##27148
02010     9C 39 B2 FD | 	call	#__system___string_cmp
02014     00 FA 0D F2 | 	cmp	result1, #0 wz
02018     01 28 06 51 |  if_ne	add	local02, #1
0201c     20 01 90 5D |  if_ne	jmp	#LR__0109
02020     14 4D 02 F6 | 	mov	local20, local02
02024                 | LR__0105
02024     14 39 02 F6 | 	mov	local10, local02
02028     01 38 06 F1 | 	add	local10, #1
0202c     03 38 66 F0 | 	shl	local10, #3
02030     35 00 00 FF 
02034     0C E4 05 F1 | 	add	objptr, ##27148
02038     F2 38 02 F1 | 	add	local10, objptr
0203c     1C 4B 02 FB | 	rdlong	local19, local10
02040     26 39 02 F6 | 	mov	local10, local20
02044     03 38 66 F0 | 	shl	local10, #3
02048     F2 38 02 F1 | 	add	local10, objptr
0204c     26 3B 02 F6 | 	mov	local11, local20
02050     1D 41 02 F6 | 	mov	local14, local11
02054     03 40 66 F0 | 	shl	local14, #3
02058     F2 40 02 F1 | 	add	local14, objptr
0205c     20 13 02 FB | 	rdlong	arg01, local14
02060     25 3D 02 F6 | 	mov	local12, local19
02064     1E 15 02 F6 | 	mov	arg02, local12
02068     35 00 00 FF 
0206c     0C E4 85 F1 | 	sub	objptr, ##27148
02070     70 39 B2 FD | 	call	#__system___string_concat
02074     1C FB 61 FC | 	wrlong	result1, local10
02078     14 43 02 F6 | 	mov	local15, local02
0207c     01 42 06 F1 | 	add	local15, #1
02080     23 4F 02 F6 | 	mov	local21, local17
02084     01 4E 06 F1 | 	add	local21, #1
02088     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
0208c                 | LR__0106
0208c     27 43 52 F2 | 	cmps	local15, local21 wc
02090     70 00 90 3D |  if_ae	jmp	#LR__0108
02094     21 2F 02 F6 | 	mov	local05, local15
02098     01 2E 06 F1 | 	add	local05, #1
0209c     03 2E 66 F0 | 	shl	local05, #3
020a0     35 00 00 FF 
020a4     0C E4 05 F1 | 	add	objptr, ##27148
020a8     F2 2E 02 F1 | 	add	local05, objptr
020ac     17 2D 02 FB | 	rdlong	local04, local05
020b0     21 31 02 F6 | 	mov	local06, local15
020b4     01 30 06 F1 | 	add	local06, #1
020b8     03 30 66 F0 | 	shl	local06, #3
020bc     F2 30 02 F1 | 	add	local06, objptr
020c0     04 30 06 F1 | 	add	local06, #4
020c4     18 2B 02 FB | 	rdlong	local03, local06
020c8     21 31 02 F6 | 	mov	local06, local15
020cc     03 30 66 F0 | 	shl	local06, #3
020d0     F2 3C 02 F6 | 	mov	local12, objptr
020d4     F2 30 02 F1 | 	add	local06, objptr
020d8     18 2D 62 FC | 	wrlong	local04, local06
020dc     21 3B 02 F6 | 	mov	local11, local15
020e0     1D 3F 02 F6 | 	mov	local13, local11
020e4     03 3E 66 F0 | 	shl	local13, #3
020e8     F2 3E 02 F1 | 	add	local13, objptr
020ec     04 3E 06 F1 | 	add	local13, #4
020f0     1F 2B 62 FC | 	wrlong	local03, local13
020f4     01 42 06 F1 | 	add	local15, #1
020f8     35 00 00 FF 
020fc     0C E4 85 F1 | 	sub	objptr, ##27148
02100     88 FF 9F FD | 	jmp	#LR__0106
02104                 | LR__0107
02104                 | LR__0108
02104     01 46 86 F1 | 	sub	local17, #1
02108     AA 01 00 FF 
0210c     3B 15 06 F6 | 	mov	arg02, ##@LR__5403
02110     25 13 02 F6 | 	mov	arg01, local19
02114     98 38 B2 FD | 	call	#__system___string_cmp
02118     00 FA 0D F2 | 	cmp	result1, #0 wz
0211c     23 29 52 52 |  if_ne	cmps	local02, local17 wc
02120     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
02124                 | '   if p$<>"""" then k+=1:i+=1
02124     AA 01 00 FF 
02128     3D 15 06 F6 | 	mov	arg02, ##@LR__5404
0212c     25 13 02 F6 | 	mov	arg01, local19
02130     7C 38 B2 FD | 	call	#__system___string_cmp
02134     00 FA 0D F2 | 	cmp	result1, #0 wz
02138     01 46 06 51 |  if_ne	add	local17, #1
0213c     01 28 06 51 |  if_ne	add	local02, #1
02140                 | LR__0109
02140     23 29 52 F2 | 	cmps	local02, local17 wc
02144     A0 FE 9F CD |  if_b	jmp	#LR__0104
02148     00 28 06 F6 | 	mov	local02, #0
0214c                 | ' 
0214c                 | ' ' 1f : concatenate strings if "" detected between
0214c                 | '  
0214c                 | ' i=0
0214c                 | ' do
0214c                 | LR__0110
0214c                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0214c     14 2F 02 F6 | 	mov	local05, local02
02150     03 2E 66 F0 | 	shl	local05, #3
02154     35 00 00 FF 
02158     0C E4 05 F1 | 	add	objptr, ##27148
0215c     F2 30 02 F6 | 	mov	local06, objptr
02160     F2 2E 02 F1 | 	add	local05, objptr
02164     17 13 02 FB | 	rdlong	arg01, local05
02168     01 14 06 F6 | 	mov	arg02, #1
0216c     35 00 00 FF 
02170     0C E4 85 F1 | 	sub	objptr, ##27148
02174     14 59 B2 FD | 	call	#__system__Right_S
02178     FD 12 02 F6 | 	mov	arg01, result1
0217c     AA 01 00 FF 
02180     3F 15 06 F6 | 	mov	arg02, ##@LR__5405
02184     28 38 B2 FD | 	call	#__system___string_cmp
02188     00 FA 0D F2 | 	cmp	result1, #0 wz
0218c     7C 01 90 5D |  if_ne	jmp	#LR__0116
02190     14 31 02 F6 | 	mov	local06, local02
02194     01 30 06 F1 | 	add	local06, #1
02198     03 30 66 F0 | 	shl	local06, #3
0219c     35 00 00 FF 
021a0     0C E4 05 F1 | 	add	objptr, ##27148
021a4     F2 3C 02 F6 | 	mov	local12, objptr
021a8     F2 30 02 F1 | 	add	local06, objptr
021ac     18 13 02 FB | 	rdlong	arg01, local06
021b0     01 14 06 F6 | 	mov	arg02, #1
021b4     35 00 00 FF 
021b8     0C E4 85 F1 | 	sub	objptr, ##27148
021bc     44 58 B2 FD | 	call	#__system__Left_S
021c0     FD 12 02 F6 | 	mov	arg01, result1
021c4     AA 01 00 FF 
021c8     41 15 06 F6 | 	mov	arg02, ##@LR__5406
021cc     E0 37 B2 FD | 	call	#__system___string_cmp
021d0     00 FA 0D F2 | 	cmp	result1, #0 wz
021d4     34 01 90 5D |  if_ne	jmp	#LR__0116
021d8     14 39 02 F6 | 	mov	local10, local02
021dc     03 38 66 F0 | 	shl	local10, #3
021e0     35 00 00 FF 
021e4     0C E4 05 F1 | 	add	objptr, ##27148
021e8     F2 38 02 F1 | 	add	local10, objptr
021ec     14 41 02 F6 | 	mov	local14, local02
021f0     03 40 66 F0 | 	shl	local14, #3
021f4     F2 40 02 F1 | 	add	local14, objptr
021f8     20 31 02 FB | 	rdlong	local06, local14
021fc     14 3F 02 F6 | 	mov	local13, local02
02200     01 3E 06 F1 | 	add	local13, #1
02204     03 3E 66 F0 | 	shl	local13, #3
02208     F2 3E 02 F1 | 	add	local13, objptr
0220c     1F 3D 02 FB | 	rdlong	local12, local13
02210     14 51 02 F6 | 	mov	local22, local02
02214     01 50 06 F1 | 	add	local22, #1
02218     28 53 02 F6 | 	mov	local23, local22
0221c     03 52 66 F0 | 	shl	local23, #3
02220     F2 54 02 F6 | 	mov	local24, objptr
02224     F2 52 02 F1 | 	add	local23, objptr
02228     29 13 02 FB | 	rdlong	arg01, local23
0222c     35 00 00 FF 
02230     0C E4 85 F1 | 	sub	objptr, ##27148
02234     09 33 02 F6 | 	mov	local07, arg01
02238     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
0223c                 | LR__0111
0223c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02240     01 32 06 51 |  if_ne	add	local07, #1
02244     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
02248                 | LR__0112
02248     09 33 82 F1 | 	sub	local07, arg01
0224c     19 3B 02 F6 | 	mov	local11, local07
02250     01 3A 86 F1 | 	sub	local11, #1
02254     1E 13 02 F6 | 	mov	arg01, local12
02258     1D 15 02 F6 | 	mov	arg02, local11
0225c     2C 58 B2 FD | 	call	#__system__Right_S
02260     FD 3C 02 F6 | 	mov	local12, result1
02264     18 13 02 F6 | 	mov	arg01, local06
02268     1E 15 02 F6 | 	mov	arg02, local12
0226c     74 37 B2 FD | 	call	#__system___string_concat
02270     FD 30 02 F6 | 	mov	local06, result1
02274     1C 31 62 FC | 	wrlong	local06, local10
02278                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02278     14 43 02 F6 | 	mov	local15, local02
0227c     01 42 06 F1 | 	add	local15, #1
02280     23 57 02 F6 | 	mov	local25, local17
02284     01 56 06 F1 | 	add	local25, #1
02288     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
0228c                 | LR__0113
0228c     2B 43 52 F2 | 	cmps	local15, local25 wc
02290     70 00 90 3D |  if_ae	jmp	#LR__0115
02294     21 2F 02 F6 | 	mov	local05, local15
02298     01 2E 06 F1 | 	add	local05, #1
0229c     03 2E 66 F0 | 	shl	local05, #3
022a0     35 00 00 FF 
022a4     0C E4 05 F1 | 	add	objptr, ##27148
022a8     F2 2E 02 F1 | 	add	local05, objptr
022ac     17 2D 02 FB | 	rdlong	local04, local05
022b0     21 31 02 F6 | 	mov	local06, local15
022b4     01 30 06 F1 | 	add	local06, #1
022b8     03 30 66 F0 | 	shl	local06, #3
022bc     F2 30 02 F1 | 	add	local06, objptr
022c0     04 30 06 F1 | 	add	local06, #4
022c4     18 2B 02 FB | 	rdlong	local03, local06
022c8     21 31 02 F6 | 	mov	local06, local15
022cc     03 30 66 F0 | 	shl	local06, #3
022d0     F2 3C 02 F6 | 	mov	local12, objptr
022d4     F2 30 02 F1 | 	add	local06, objptr
022d8     18 2D 62 FC | 	wrlong	local04, local06
022dc     21 3B 02 F6 | 	mov	local11, local15
022e0     1D 3F 02 F6 | 	mov	local13, local11
022e4     03 3E 66 F0 | 	shl	local13, #3
022e8     F2 3E 02 F1 | 	add	local13, objptr
022ec     04 3E 06 F1 | 	add	local13, #4
022f0     1F 2B 62 FC | 	wrlong	local03, local13
022f4     01 42 06 F1 | 	add	local15, #1
022f8     35 00 00 FF 
022fc     0C E4 85 F1 | 	sub	objptr, ##27148
02300     88 FF 9F FD | 	jmp	#LR__0113
02304                 | LR__0114
02304                 | LR__0115
02304     01 28 86 F1 | 	sub	local02, #1
02308     01 46 86 F1 | 	sub	local17, #1
0230c                 | LR__0116
0230c     01 28 06 F1 | 	add	local02, #1
02310     23 29 52 F2 | 	cmps	local02, local17 wc
02314     34 FE 9F CD |  if_b	jmp	#LR__0110
02318     00 28 06 F6 | 	mov	local02, #0
0231c                 | '  
0231c                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
0231c                 | '  
0231c                 | ' i=0 
0231c                 | ' do
0231c                 | LR__0117
0231c     14 39 02 F6 | 	mov	local10, local02
02320     03 38 66 F0 | 	shl	local10, #3
02324     35 00 00 FF 
02328     0C E4 05 F1 | 	add	objptr, ##27148
0232c     F2 38 02 F1 | 	add	local10, objptr
02330     1C 59 02 FB | 	rdlong	local26, local10
02334     14 39 02 F6 | 	mov	local10, local02
02338     01 38 06 F1 | 	add	local10, #1
0233c     03 38 66 F0 | 	shl	local10, #3
02340     F2 38 02 F1 | 	add	local10, objptr
02344     1C 5B 02 FB | 	rdlong	local27, local10
02348                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
02348                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
02348     AA 01 00 FF 
0234c     43 15 06 F6 | 	mov	arg02, ##@LR__5407
02350     2C 13 02 F6 | 	mov	arg01, local26
02354     35 00 00 FF 
02358     0C E4 85 F1 | 	sub	objptr, ##27148
0235c     50 36 B2 FD | 	call	#__system___string_cmp
02360     00 FA 0D F2 | 	cmp	result1, #0 wz
02364     A8 00 90 AD |  if_e	jmp	#LR__0118
02368     AA 01 00 FF 
0236c     45 15 06 F6 | 	mov	arg02, ##@LR__5408
02370     2C 13 02 F6 | 	mov	arg01, local26
02374     38 36 B2 FD | 	call	#__system___string_cmp
02378     FD 2A 0A F6 | 	mov	local03, result1 wz
0237c     90 00 90 AD |  if_e	jmp	#LR__0118
02380     AA 01 00 FF 
02384     47 31 06 F6 | 	mov	local06, ##@LR__5409
02388     2C 13 02 F6 | 	mov	arg01, local26
0238c     18 15 02 F6 | 	mov	arg02, local06
02390     1C 36 B2 FD | 	call	#__system___string_cmp
02394     00 FA 0D F2 | 	cmp	result1, #0 wz
02398     74 00 90 AD |  if_e	jmp	#LR__0118
0239c     AA 01 00 FF 
023a0     49 3D 06 F6 | 	mov	local12, ##@LR__5410
023a4     2C 13 02 F6 | 	mov	arg01, local26
023a8     1E 15 02 F6 | 	mov	arg02, local12
023ac     00 36 B2 FD | 	call	#__system___string_cmp
023b0     00 FA 0D F2 | 	cmp	result1, #0 wz
023b4     58 00 90 AD |  if_e	jmp	#LR__0118
023b8     AA 01 00 FF 
023bc     4B 3B 06 F6 | 	mov	local11, ##@LR__5411
023c0     1D 3D 02 F6 | 	mov	local12, local11
023c4     2C 13 02 F6 | 	mov	arg01, local26
023c8     1E 15 02 F6 | 	mov	arg02, local12
023cc     E0 35 B2 FD | 	call	#__system___string_cmp
023d0     FD 30 0A F6 | 	mov	local06, result1 wz
023d4     38 00 90 AD |  if_e	jmp	#LR__0118
023d8     AA 01 00 FF 
023dc     4D 3B 06 F6 | 	mov	local11, ##@LR__5412
023e0     2C 13 02 F6 | 	mov	arg01, local26
023e4     1D 15 02 F6 | 	mov	arg02, local11
023e8     C4 35 B2 FD | 	call	#__system___string_cmp
023ec     FD 3C 0A F6 | 	mov	local12, result1 wz
023f0     1C 00 90 AD |  if_e	jmp	#LR__0118
023f4     AA 01 00 FF 
023f8     4F 41 06 F6 | 	mov	local14, ##@LR__5413
023fc     2C 13 02 F6 | 	mov	arg01, local26
02400     20 15 02 F6 | 	mov	arg02, local14
02404     A8 35 B2 FD | 	call	#__system___string_cmp
02408     FD 3A 0A F6 | 	mov	local11, result1 wz
0240c     20 00 90 5D |  if_ne	jmp	#LR__0119
02410                 | LR__0118
02410     AA 01 00 FF 
02414     51 5D 06 F6 | 	mov	local28, ##@LR__5414
02418     2E 3F 02 F6 | 	mov	local13, local28
0241c     2D 13 02 F6 | 	mov	arg01, local27
02420     1F 15 02 F6 | 	mov	arg02, local13
02424     88 35 B2 FD | 	call	#__system___string_cmp
02428     FD 40 0A F6 | 	mov	local14, result1 wz
0242c     B8 00 90 AD |  if_e	jmp	#LR__0122
02430                 | LR__0119
02430     AA 01 00 FF 
02434     53 5D 06 F6 | 	mov	local28, ##@LR__5415
02438     2C 13 02 F6 | 	mov	arg01, local26
0243c     2E 15 02 F6 | 	mov	arg02, local28
02440     6C 35 B2 FD | 	call	#__system___string_cmp
02444     FD 3E 0A F6 | 	mov	local13, result1 wz
02448     20 00 90 5D |  if_ne	jmp	#LR__0120
0244c     AA 01 00 FF 
02450     55 53 06 F6 | 	mov	local23, ##@LR__5416
02454     29 51 02 F6 | 	mov	local22, local23
02458     2D 13 02 F6 | 	mov	arg01, local27
0245c     28 15 02 F6 | 	mov	arg02, local22
02460     4C 35 B2 FD | 	call	#__system___string_cmp
02464     FD 5C 0A F6 | 	mov	local28, result1 wz
02468     7C 00 90 AD |  if_e	jmp	#LR__0122
0246c                 | LR__0120
0246c     AA 01 00 FF 
02470     57 53 06 F6 | 	mov	local23, ##@LR__5417
02474     2C 13 02 F6 | 	mov	arg01, local26
02478     29 15 02 F6 | 	mov	arg02, local23
0247c     30 35 B2 FD | 	call	#__system___string_cmp
02480     FD 50 0A F6 | 	mov	local22, result1 wz
02484     20 00 90 5D |  if_ne	jmp	#LR__0121
02488     AA 01 00 FF 
0248c     59 5F 06 F6 | 	mov	local29, ##@LR__5418
02490     2F 55 02 F6 | 	mov	local24, local29
02494     2D 13 02 F6 | 	mov	arg01, local27
02498     2A 15 02 F6 | 	mov	arg02, local24
0249c     10 35 B2 FD | 	call	#__system___string_cmp
024a0     FD 52 0A F6 | 	mov	local23, result1 wz
024a4     40 00 90 AD |  if_e	jmp	#LR__0122
024a8                 | LR__0121
024a8     AA 01 00 FF 
024ac     5B 61 06 F6 | 	mov	local30, ##@LR__5419
024b0     30 5F 02 F6 | 	mov	local29, local30
024b4     2C 13 02 F6 | 	mov	arg01, local26
024b8     2F 15 02 F6 | 	mov	arg02, local29
024bc     F0 34 B2 FD | 	call	#__system___string_cmp
024c0     FD 54 0A F6 | 	mov	local24, result1 wz
024c4     F0 00 90 5D |  if_ne	jmp	#LR__0126
024c8     AA 01 00 FF 
024cc     5D 63 06 F6 | 	mov	local31, ##@LR__5420
024d0     31 61 02 F6 | 	mov	local30, local31
024d4     2D 13 02 F6 | 	mov	arg01, local27
024d8     30 15 02 F6 | 	mov	arg02, local30
024dc     D0 34 B2 FD | 	call	#__system___string_cmp
024e0     FD 5E 0A F6 | 	mov	local29, result1 wz
024e4     D0 00 90 5D |  if_ne	jmp	#LR__0126
024e8                 | LR__0122
024e8     14 39 02 F6 | 	mov	local10, local02
024ec     03 38 66 F0 | 	shl	local10, #3
024f0     35 00 00 FF 
024f4     0C E4 05 F1 | 	add	objptr, ##27148
024f8     F2 38 02 F1 | 	add	local10, objptr
024fc     2D 3D 02 F6 | 	mov	local12, local27
02500     2C 13 02 F6 | 	mov	arg01, local26
02504     1E 15 02 F6 | 	mov	arg02, local12
02508     35 00 00 FF 
0250c     0C E4 85 F1 | 	sub	objptr, ##27148
02510     D0 34 B2 FD | 	call	#__system___string_concat
02514     1C FB 61 FC | 	wrlong	result1, local10
02518                 | '     lparts(i).part$=s1$+s2$
02518                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02518     14 43 02 F6 | 	mov	local15, local02
0251c     01 42 06 F1 | 	add	local15, #1
02520     23 65 02 F6 | 	mov	local32, local17
02524     01 64 06 F1 | 	add	local32, #1
02528     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
0252c                 | LR__0123
0252c     32 43 52 F2 | 	cmps	local15, local32 wc
02530     7C 00 90 3D |  if_ae	jmp	#LR__0125
02534     21 2F 02 F6 | 	mov	local05, local15
02538     01 2E 06 F1 | 	add	local05, #1
0253c     03 2E 66 F0 | 	shl	local05, #3
02540     35 00 00 FF 
02544     0C E4 05 F1 | 	add	objptr, ##27148
02548     F2 2E 02 F1 | 	add	local05, objptr
0254c     17 2D 02 FB | 	rdlong	local04, local05
02550     21 31 02 F6 | 	mov	local06, local15
02554     01 30 06 F1 | 	add	local06, #1
02558     03 30 66 F0 | 	shl	local06, #3
0255c     F2 30 02 F1 | 	add	local06, objptr
02560     04 30 06 F1 | 	add	local06, #4
02564     18 2B 02 FB | 	rdlong	local03, local06
02568     21 31 02 F6 | 	mov	local06, local15
0256c     03 30 66 F0 | 	shl	local06, #3
02570     F2 3C 02 F6 | 	mov	local12, objptr
02574     F2 30 02 F1 | 	add	local06, objptr
02578     18 2D 62 FC | 	wrlong	local04, local06
0257c     21 3B 02 F6 | 	mov	local11, local15
02580     1D 41 02 F6 | 	mov	local14, local11
02584     20 3F 02 F6 | 	mov	local13, local14
02588     03 3E 66 F0 | 	shl	local13, #3
0258c     F2 5C 02 F6 | 	mov	local28, objptr
02590     F2 3E 02 F1 | 	add	local13, objptr
02594     04 3E 06 F1 | 	add	local13, #4
02598     1F 2B 62 FC | 	wrlong	local03, local13
0259c     04 3E 86 F1 | 	sub	local13, #4
025a0     01 42 06 F1 | 	add	local15, #1
025a4     35 00 00 FF 
025a8     0C E4 85 F1 | 	sub	objptr, ##27148
025ac     7C FF 9F FD | 	jmp	#LR__0123
025b0                 | LR__0124
025b0                 | LR__0125
025b0     01 28 86 F1 | 	sub	local02, #1
025b4     01 46 86 F1 | 	sub	local17, #1
025b8                 | LR__0126
025b8     01 28 06 F1 | 	add	local02, #1
025bc     23 29 52 F2 | 	cmps	local02, local17 wc
025c0     58 FD 9F CD |  if_b	jmp	#LR__0117
025c4                 | '  
025c4                 | ' ' 1h : now remove parts that are spaces
025c4                 | ' 
025c4                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
025c4     00 28 06 F6 | 	mov	local02, #0
025c8     23 67 02 F6 | 	mov	local33, local17
025cc     01 66 06 F1 | 	add	local33, #1
025d0                 | LR__0127
025d0     33 29 52 F2 | 	cmps	local02, local33 wc
025d4     50 00 90 3D |  if_ae	jmp	#LR__0128
025d8     14 39 02 F6 | 	mov	local10, local02
025dc     03 38 66 F0 | 	shl	local10, #3
025e0     35 00 00 FF 
025e4     0C E4 05 F1 | 	add	objptr, ##27148
025e8     F2 38 02 F1 | 	add	local10, objptr
025ec     14 3D 02 F6 | 	mov	local12, local02
025f0     1E 3B 02 F6 | 	mov	local11, local12
025f4     1D 41 02 F6 | 	mov	local14, local11
025f8     03 40 66 F0 | 	shl	local14, #3
025fc     F2 3E 02 F6 | 	mov	local13, objptr
02600     F2 40 02 F1 | 	add	local14, objptr
02604     20 13 02 FB | 	rdlong	arg01, local14
02608     35 00 00 FF 
0260c     0C E4 85 F1 | 	sub	objptr, ##27148
02610     80 58 B2 FD | 	call	#__system__RTrim_S
02614     FD 12 02 F6 | 	mov	arg01, result1
02618     B8 57 B2 FD | 	call	#__system__LTrim_S
0261c     1C FB 61 FC | 	wrlong	result1, local10
02620     01 28 06 F1 | 	add	local02, #1
02624     A8 FF 9F FD | 	jmp	#LR__0127
02628                 | LR__0128
02628     00 28 06 F6 | 	mov	local02, #0
0262c     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
02630                 | ' i=0
02630                 | ' do 
02630                 | LR__0129
02630                 | '   if len(lparts(i).part$)=0 then 
02630     14 2F 02 F6 | 	mov	local05, local02
02634     03 2E 66 F0 | 	shl	local05, #3
02638     35 00 00 FF 
0263c     0C E4 05 F1 | 	add	objptr, ##27148
02640     F2 2E 02 F1 | 	add	local05, objptr
02644     17 13 02 FB | 	rdlong	arg01, local05
02648     35 00 00 FF 
0264c     0C E4 85 F1 | 	sub	objptr, ##27148
02650     09 33 02 F6 | 	mov	local07, arg01
02654                 | LR__0130
02654     19 FB C9 FA | 	rdbyte	result1, local07 wz
02658     01 32 06 51 |  if_ne	add	local07, #1
0265c     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
02660     09 33 8A F1 | 	sub	local07, arg01 wz
02664     C4 00 90 5D |  if_ne	jmp	#LR__0134
02668                 | '     if i=k-1 then k-=1  :  exit
02668     23 2D 02 F6 | 	mov	local04, local17
0266c     01 2C 86 F1 | 	sub	local04, #1
02670     16 29 0A F2 | 	cmp	local02, local04 wz
02674     01 46 86 A1 |  if_e	sub	local17, #1
02678     C4 00 90 AD |  if_e	jmp	#LR__0136
0267c                 | '     if i<k-1 then 
0267c     23 2D 02 F6 | 	mov	local04, local17
02680     01 2C 86 F1 | 	sub	local04, #1
02684     16 29 52 F2 | 	cmps	local02, local04 wc
02688     A0 00 90 3D |  if_ae	jmp	#LR__0133
0268c                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
0268c     14 43 02 F6 | 	mov	local15, local02
02690     23 69 02 F6 | 	mov	local34, local17
02694     01 68 86 F1 | 	sub	local34, #1
02698                 | LR__0131
02698     34 43 52 F2 | 	cmps	local15, local34 wc
0269c     80 00 90 3D |  if_ae	jmp	#LR__0132
026a0     21 2F 02 F6 | 	mov	local05, local15
026a4     01 2E 06 F1 | 	add	local05, #1
026a8     03 2E 66 F0 | 	shl	local05, #3
026ac     35 00 00 FF 
026b0     0C E4 05 F1 | 	add	objptr, ##27148
026b4     F2 2E 02 F1 | 	add	local05, objptr
026b8     17 2D 02 FB | 	rdlong	local04, local05
026bc     21 31 02 F6 | 	mov	local06, local15
026c0     01 30 06 F1 | 	add	local06, #1
026c4     03 30 66 F0 | 	shl	local06, #3
026c8     F2 30 02 F1 | 	add	local06, objptr
026cc     04 30 06 F1 | 	add	local06, #4
026d0     18 2B 02 FB | 	rdlong	local03, local06
026d4     21 39 02 F6 | 	mov	local10, local15
026d8     1C 31 02 F6 | 	mov	local06, local10
026dc     03 30 66 F0 | 	shl	local06, #3
026e0     F2 3C 02 F6 | 	mov	local12, objptr
026e4     F2 30 02 F1 | 	add	local06, objptr
026e8     18 2D 62 FC | 	wrlong	local04, local06
026ec     21 3B 02 F6 | 	mov	local11, local15
026f0     1D 41 02 F6 | 	mov	local14, local11
026f4     20 3F 02 F6 | 	mov	local13, local14
026f8     03 3E 66 F0 | 	shl	local13, #3
026fc     F2 5C 02 F6 | 	mov	local28, objptr
02700     F2 3E 02 F1 | 	add	local13, objptr
02704     04 3E 06 F1 | 	add	local13, #4
02708     1F 2B 62 FC | 	wrlong	local03, local13
0270c     04 3E 86 F1 | 	sub	local13, #4
02710     01 42 06 F1 | 	add	local15, #1
02714     35 00 00 FF 
02718     0C E4 85 F1 | 	sub	objptr, ##27148
0271c     78 FF 9F FD | 	jmp	#LR__0131
02720                 | LR__0132
02720     01 46 86 F1 | 	sub	local17, #1
02724                 | '       if i>0 then i-=1 
02724     01 28 56 F2 | 	cmps	local02, #1 wc
02728     01 28 86 31 |  if_ae	sub	local02, #1
0272c                 | LR__0133
0272c                 | LR__0134
0272c     01 28 06 F1 | 	add	local02, #1
02730     23 2D 02 F6 | 	mov	local04, local17
02734     01 2C 86 F1 | 	sub	local04, #1
02738     16 29 5A F2 | 	cmps	local02, local04 wcz
0273c     F0 FE 9F ED |  if_be	jmp	#LR__0129
02740                 | LR__0135
02740                 | LR__0136
02740                 | ' 
02740                 | ' ' 1i: lowercase all that is not a string
02740                 | ' 
02740                 | ' for j=0 to k-1
02740     00 42 06 F6 | 	mov	local15, #0
02744     23 6B 02 F6 | 	mov	local35, local17
02748                 | LR__0137
02748     35 43 52 F2 | 	cmps	local15, local35 wc
0274c     C8 00 90 3D |  if_ae	jmp	#LR__0140
02750                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
02750     21 2F 02 F6 | 	mov	local05, local15
02754     03 2E 66 F0 | 	shl	local05, #3
02758     35 00 00 FF 
0275c     0C E4 05 F1 | 	add	objptr, ##27148
02760     F2 2E 02 F1 | 	add	local05, objptr
02764     17 13 02 FB | 	rdlong	arg01, local05
02768     01 14 06 F6 | 	mov	arg02, #1
0276c     35 00 00 FF 
02770     0C E4 85 F1 | 	sub	objptr, ##27148
02774     8C 52 B2 FD | 	call	#__system__Left_S
02778     FD 12 02 F6 | 	mov	arg01, result1
0277c     AA 01 00 FF 
02780     5F 15 06 F6 | 	mov	arg02, ##@LR__5421
02784     28 32 B2 FD | 	call	#__system___string_cmp
02788     00 FA 0D F2 | 	cmp	result1, #0 wz
0278c     44 00 90 5D |  if_ne	jmp	#LR__0138
02790     21 31 02 F6 | 	mov	local06, local15
02794     03 30 66 F0 | 	shl	local06, #3
02798     35 00 00 FF 
0279c     0C E4 05 F1 | 	add	objptr, ##27148
027a0     F2 3C 02 F6 | 	mov	local12, objptr
027a4     F2 30 02 F1 | 	add	local06, objptr
027a8     18 13 02 FB | 	rdlong	arg01, local06
027ac     01 14 06 F6 | 	mov	arg02, #1
027b0     35 00 00 FF 
027b4     0C E4 85 F1 | 	sub	objptr, ##27148
027b8     D0 52 B2 FD | 	call	#__system__Right_S
027bc     FD 12 02 F6 | 	mov	arg01, result1
027c0     AA 01 00 FF 
027c4     61 15 06 F6 | 	mov	arg02, ##@LR__5422
027c8     E4 31 B2 FD | 	call	#__system___string_cmp
027cc     00 FA 0D F2 | 	cmp	result1, #0 wz
027d0     3C 00 90 AD |  if_e	jmp	#LR__0139
027d4                 | LR__0138
027d4     21 39 02 F6 | 	mov	local10, local15
027d8     03 38 66 F0 | 	shl	local10, #3
027dc     35 00 00 FF 
027e0     0C E4 05 F1 | 	add	objptr, ##27148
027e4     F2 38 02 F1 | 	add	local10, objptr
027e8     21 3B 02 F6 | 	mov	local11, local15
027ec     1D 41 02 F6 | 	mov	local14, local11
027f0     03 40 66 F0 | 	shl	local14, #3
027f4     F2 3E 02 F6 | 	mov	local13, objptr
027f8     F2 40 02 F1 | 	add	local14, objptr
027fc     20 13 02 FB | 	rdlong	arg01, local14
02800     35 00 00 FF 
02804     0C E4 85 F1 | 	sub	objptr, ##27148
02808     08 55 B2 FD | 	call	#__system__LCase_S
0280c     1C FB 61 FC | 	wrlong	result1, local10
02810                 | LR__0139
02810     01 42 06 F1 | 	add	local15, #1
02814     30 FF 9F FD | 	jmp	#LR__0137
02818                 | LR__0140
02818                 | ' 
02818                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
02818                 | ' 
02818                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
02818     00 28 06 F6 | 	mov	local02, #0
0281c     23 6D 02 F6 | 	mov	local36, local17
02820     01 6C 06 F1 | 	add	local36, #1
02824     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
02828                 | LR__0141
02828     36 29 52 F2 | 	cmps	local02, local36 wc
0282c     30 00 90 3D |  if_ae	jmp	#LR__0143
02830     14 39 02 F6 | 	mov	local10, local02
02834     03 38 66 F0 | 	shl	local10, #3
02838     35 00 00 FF 
0283c     0C E4 05 F1 | 	add	objptr, ##27148
02840     F2 38 02 F1 | 	add	local10, objptr
02844     04 38 06 F1 | 	add	local10, #4
02848     FF FF FF FF 
0284c     1C FF 6B FC | 	wrlong	##-1, local10
02850     01 28 06 F1 | 	add	local02, #1
02854     35 00 00 FF 
02858     0C E4 85 F1 | 	sub	objptr, ##27148
0285c     C8 FF 9F FD | 	jmp	#LR__0141
02860                 | LR__0142
02860                 | LR__0143
02860                 | ' 
02860                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
02860     35 00 00 FF 
02864     0C E4 05 F1 | 	add	objptr, ##27148
02868     F2 12 02 FB | 	rdlong	arg01, objptr
0286c     35 00 00 FF 
02870     0C E4 85 F1 | 	sub	objptr, ##27148
02874     B4 42 B0 FD | 	call	#_isdec
02878     00 FA 0D F2 | 	cmp	result1, #0 wz
0287c     01 6E 06 56 |  if_ne	mov	local37, #1
02880     00 6E 06 A6 |  if_e	mov	local37, #0
02884                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02884     35 00 00 FF 
02888     0C E4 05 F1 | 	add	objptr, ##27148
0288c     F2 12 02 FB | 	rdlong	arg01, objptr
02890     35 00 00 FF 
02894     0C E4 85 F1 | 	sub	objptr, ##27148
02898     AA 01 00 FF 
0289c     63 15 06 F6 | 	mov	arg02, ##@LR__5423
028a0     0C 31 B2 FD | 	call	#__system___string_cmp
028a4     00 FA 0D F2 | 	cmp	result1, #0 wz
028a8     01 6E 06 A6 |  if_e	mov	local37, #1
028ac     00 28 06 F6 | 	mov	local02, #0
028b0                 | ' i=0 : do 
028b0                 | LR__0144
028b0                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
028b0     14 2F 02 F6 | 	mov	local05, local02
028b4     03 2E 66 F0 | 	shl	local05, #3
028b8     35 00 00 FF 
028bc     0C E4 05 F1 | 	add	objptr, ##27148
028c0     F2 2E 02 F1 | 	add	local05, objptr
028c4     17 13 02 FB | 	rdlong	arg01, local05
028c8     AA 01 00 FF 
028cc     68 15 06 F6 | 	mov	arg02, ##@LR__5424
028d0     35 00 00 FF 
028d4     0C E4 85 F1 | 	sub	objptr, ##27148
028d8     D4 30 B2 FD | 	call	#__system___string_cmp
028dc     00 FA 0D F2 | 	cmp	result1, #0 wz
028e0     0C 00 90 AD |  if_e	jmp	#LR__0145
028e4     01 28 06 F1 | 	add	local02, #1
028e8     23 29 5A F2 | 	cmps	local02, local17 wcz
028ec     C0 FF 9F ED |  if_be	jmp	#LR__0144
028f0                 | LR__0145
028f0                 | ' if i<k then addptr=i+1	 							' then found
028f0     23 29 52 F2 | 	cmps	local02, local17 wc
028f4     14 6F 02 C6 |  if_b	mov	local37, local02
028f8     01 6E 06 C1 |  if_b	add	local37, #1
028fc     35 00 00 FF 
02900     0C E4 05 F1 | 	add	objptr, ##27148
02904     37 31 02 F6 | 	mov	local06, local37
02908     03 30 66 F0 | 	shl	local06, #3
0290c     F2 3C 02 F6 | 	mov	local12, objptr
02910     F2 30 02 F1 | 	add	local06, objptr
02914     18 15 02 FB | 	rdlong	arg02, local06
02918     AA 01 00 FF 
0291c     6D 17 06 F6 | 	mov	arg03, ##@LR__5425
02920     01 12 06 F6 | 	mov	arg01, #1
02924     35 00 00 FF 
02928     0C E4 85 F1 | 	sub	objptr, ##27148
0292c     1C 56 B2 FD | 	call	#__system__Instr
02930     FD 70 02 F6 | 	mov	local38, result1
02934                 | ' lp$=lparts(addptr).part$ 
02934                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02934                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02934     01 70 56 F2 | 	cmps	local38, #1 wc
02938     68 01 90 CD |  if_b	jmp	#LR__0152
0293c     37 2F 02 F6 | 	mov	local05, local37
02940     03 2E 66 F0 | 	shl	local05, #3
02944     35 00 00 FF 
02948     0C E4 05 F1 | 	add	objptr, ##27148
0294c     F2 2E 02 F1 | 	add	local05, objptr
02950     17 13 02 FB | 	rdlong	arg01, local05
02954     35 00 00 FF 
02958     0C E4 85 F1 | 	sub	objptr, ##27148
0295c     09 33 02 F6 | 	mov	local07, arg01
02960     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
02964                 | LR__0146
02964     19 FB C9 FA | 	rdbyte	result1, local07 wz
02968     01 32 06 51 |  if_ne	add	local07, #1
0296c     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
02970                 | LR__0147
02970     09 33 82 F1 | 	sub	local07, arg01
02974     19 71 52 F2 | 	cmps	local38, local07 wc
02978     28 01 90 3D |  if_ae	jmp	#LR__0152
0297c     01 46 06 F1 | 	add	local17, #1
02980                 | '   k+=1
02980                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02980     23 29 02 F6 | 	mov	local02, local17
02984     37 73 02 F6 | 	mov	local39, local37
02988     01 72 06 F1 | 	add	local39, #1
0298c     35 00 00 FF 
02990     0C E4 05 F1 | 	add	objptr, ##27148
02994     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02998                 | LR__0148
02998     14 2F 02 F6 | 	mov	local05, local02
0299c     01 2E 86 F1 | 	sub	local05, #1
029a0     03 2E 66 F0 | 	shl	local05, #3
029a4     F2 2E 02 F1 | 	add	local05, objptr
029a8     17 2D 02 FB | 	rdlong	local04, local05
029ac     14 31 02 F6 | 	mov	local06, local02
029b0     01 30 86 F1 | 	sub	local06, #1
029b4     03 30 66 F0 | 	shl	local06, #3
029b8     F2 30 02 F1 | 	add	local06, objptr
029bc     04 30 06 F1 | 	add	local06, #4
029c0     18 2B 02 FB | 	rdlong	local03, local06
029c4     14 31 02 F6 | 	mov	local06, local02
029c8     03 30 66 F0 | 	shl	local06, #3
029cc     F2 30 02 F1 | 	add	local06, objptr
029d0     18 2D 62 FC | 	wrlong	local04, local06
029d4     14 3F 02 F6 | 	mov	local13, local02
029d8     03 3E 66 F0 | 	shl	local13, #3
029dc     F2 3E 02 F1 | 	add	local13, objptr
029e0     04 3E 06 F1 | 	add	local13, #4
029e4     1F 2B 62 FC | 	wrlong	local03, local13
029e8     01 28 86 F1 | 	sub	local02, #1
029ec     39 29 52 F2 | 	cmps	local02, local39 wc
029f0     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
029f4                 | LR__0149
029f4     37 39 02 F6 | 	mov	local10, local37
029f8     01 38 06 F1 | 	add	local10, #1
029fc     03 38 66 F0 | 	shl	local10, #3
02a00     F2 38 02 F1 | 	add	local10, objptr
02a04     37 41 02 F6 | 	mov	local14, local37
02a08     03 40 66 F0 | 	shl	local14, #3
02a0c     F2 40 02 F1 | 	add	local14, objptr
02a10     20 31 02 FB | 	rdlong	local06, local14
02a14     37 5D 02 F6 | 	mov	local28, local37
02a18     2E 51 02 F6 | 	mov	local22, local28
02a1c     03 50 66 F0 | 	shl	local22, #3
02a20     F2 52 02 F6 | 	mov	local23, objptr
02a24     F2 50 02 F1 | 	add	local22, objptr
02a28     28 13 02 FB | 	rdlong	arg01, local22
02a2c     35 00 00 FF 
02a30     0C E4 85 F1 | 	sub	objptr, ##27148
02a34     09 33 02 F6 | 	mov	local07, arg01
02a38     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02a3c                 | LR__0150
02a3c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02a40     01 32 06 51 |  if_ne	add	local07, #1
02a44     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02a48                 | LR__0151
02a48     09 33 82 F1 | 	sub	local07, arg01
02a4c     19 15 02 F6 | 	mov	arg02, local07
02a50     38 15 82 F1 | 	sub	arg02, local38
02a54     18 13 02 F6 | 	mov	arg01, local06
02a58     30 50 B2 FD | 	call	#__system__Right_S
02a5c     1C FB 61 FC | 	wrlong	result1, local10
02a60     37 39 02 F6 | 	mov	local10, local37
02a64     03 38 66 F0 | 	shl	local10, #3
02a68     35 00 00 FF 
02a6c     0C E4 05 F1 | 	add	objptr, ##27148
02a70     F2 38 02 F1 | 	add	local10, objptr
02a74     37 3B 02 F6 | 	mov	local11, local37
02a78     1D 41 02 F6 | 	mov	local14, local11
02a7c     03 40 66 F0 | 	shl	local14, #3
02a80     F2 3E 02 F6 | 	mov	local13, objptr
02a84     F2 40 02 F1 | 	add	local14, objptr
02a88     20 13 02 FB | 	rdlong	arg01, local14
02a8c     38 3D 02 F6 | 	mov	local12, local38
02a90     1E 15 02 F6 | 	mov	arg02, local12
02a94     35 00 00 FF 
02a98     0C E4 85 F1 | 	sub	objptr, ##27148
02a9c     64 4F B2 FD | 	call	#__system__Left_S
02aa0     1C FB 61 FC | 	wrlong	result1, local10
02aa4                 | LR__0152
02aa4                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02aa4     37 2F 02 F6 | 	mov	local05, local37
02aa8     03 2E 66 F0 | 	shl	local05, #3
02aac     35 00 00 FF 
02ab0     0C E4 05 F1 | 	add	objptr, ##27148
02ab4     F2 2E 02 F1 | 	add	local05, objptr
02ab8     17 13 02 FB | 	rdlong	arg01, local05
02abc     01 14 06 F6 | 	mov	arg02, #1
02ac0     35 00 00 FF 
02ac4     0C E4 85 F1 | 	sub	objptr, ##27148
02ac8     38 4F B2 FD | 	call	#__system__Left_S
02acc     FD 12 02 F6 | 	mov	arg01, result1
02ad0     AA 01 00 FF 
02ad4     6F 15 06 F6 | 	mov	arg02, ##@LR__5426
02ad8     D4 2E B2 FD | 	call	#__system___string_cmp
02adc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ae0     60 01 90 5D |  if_ne	jmp	#LR__0159
02ae4     37 31 02 F6 | 	mov	local06, local37
02ae8     03 30 66 F0 | 	shl	local06, #3
02aec     35 00 00 FF 
02af0     0C E4 05 F1 | 	add	objptr, ##27148
02af4     F2 3C 02 F6 | 	mov	local12, objptr
02af8     F2 30 02 F1 | 	add	local06, objptr
02afc     18 13 02 FB | 	rdlong	arg01, local06
02b00     35 00 00 FF 
02b04     0C E4 85 F1 | 	sub	objptr, ##27148
02b08     09 33 02 F6 | 	mov	local07, arg01
02b0c     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02b10                 | LR__0153
02b10     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b14     01 32 06 51 |  if_ne	add	local07, #1
02b18     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02b1c                 | LR__0154
02b1c     09 33 82 F1 | 	sub	local07, arg01
02b20     02 32 56 F2 | 	cmps	local07, #2 wc
02b24     1C 01 90 CD |  if_b	jmp	#LR__0159
02b28     01 46 06 F1 | 	add	local17, #1
02b2c                 | '   k+=1
02b2c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02b2c     23 29 02 F6 | 	mov	local02, local17
02b30     37 75 02 F6 | 	mov	local40, local37
02b34     01 74 06 F1 | 	add	local40, #1
02b38     35 00 00 FF 
02b3c     0C E4 05 F1 | 	add	objptr, ##27148
02b40     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02b44                 | LR__0155
02b44     14 2F 02 F6 | 	mov	local05, local02
02b48     01 2E 86 F1 | 	sub	local05, #1
02b4c     03 2E 66 F0 | 	shl	local05, #3
02b50     F2 2E 02 F1 | 	add	local05, objptr
02b54     17 2D 02 FB | 	rdlong	local04, local05
02b58     14 31 02 F6 | 	mov	local06, local02
02b5c     01 30 86 F1 | 	sub	local06, #1
02b60     03 30 66 F0 | 	shl	local06, #3
02b64     F2 30 02 F1 | 	add	local06, objptr
02b68     04 30 06 F1 | 	add	local06, #4
02b6c     18 2B 02 FB | 	rdlong	local03, local06
02b70     14 31 02 F6 | 	mov	local06, local02
02b74     03 30 66 F0 | 	shl	local06, #3
02b78     F2 30 02 F1 | 	add	local06, objptr
02b7c     18 2D 62 FC | 	wrlong	local04, local06
02b80     14 3F 02 F6 | 	mov	local13, local02
02b84     03 3E 66 F0 | 	shl	local13, #3
02b88     F2 3E 02 F1 | 	add	local13, objptr
02b8c     04 3E 06 F1 | 	add	local13, #4
02b90     1F 2B 62 FC | 	wrlong	local03, local13
02b94     01 28 86 F1 | 	sub	local02, #1
02b98     3A 29 52 F2 | 	cmps	local02, local40 wc
02b9c     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02ba0                 | LR__0156
02ba0     37 39 02 F6 | 	mov	local10, local37
02ba4     01 38 06 F1 | 	add	local10, #1
02ba8     03 38 66 F0 | 	shl	local10, #3
02bac     F2 38 02 F1 | 	add	local10, objptr
02bb0     37 41 02 F6 | 	mov	local14, local37
02bb4     03 40 66 F0 | 	shl	local14, #3
02bb8     F2 40 02 F1 | 	add	local14, objptr
02bbc     20 31 02 FB | 	rdlong	local06, local14
02bc0     37 3F 02 F6 | 	mov	local13, local37
02bc4     1F 5D 02 F6 | 	mov	local28, local13
02bc8     2E 51 02 F6 | 	mov	local22, local28
02bcc     03 50 66 F0 | 	shl	local22, #3
02bd0     F2 52 02 F6 | 	mov	local23, objptr
02bd4     F2 50 02 F1 | 	add	local22, objptr
02bd8     28 13 02 FB | 	rdlong	arg01, local22
02bdc     35 00 00 FF 
02be0     0C E4 85 F1 | 	sub	objptr, ##27148
02be4     09 33 02 F6 | 	mov	local07, arg01
02be8     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02bec                 | LR__0157
02bec     19 FB C9 FA | 	rdbyte	result1, local07 wz
02bf0     01 32 06 51 |  if_ne	add	local07, #1
02bf4     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02bf8                 | LR__0158
02bf8     09 33 82 F1 | 	sub	local07, arg01
02bfc     19 41 02 F6 | 	mov	local14, local07
02c00     20 3B 02 F6 | 	mov	local11, local14
02c04     01 3A 86 F1 | 	sub	local11, #1
02c08     1D 3D 02 F6 | 	mov	local12, local11
02c0c     18 13 02 F6 | 	mov	arg01, local06
02c10     1E 15 02 F6 | 	mov	arg02, local12
02c14     74 4E B2 FD | 	call	#__system__Right_S
02c18     1C FB 61 FC | 	wrlong	result1, local10
02c1c     37 39 02 F6 | 	mov	local10, local37
02c20     03 38 66 F0 | 	shl	local10, #3
02c24     35 00 00 FF 
02c28     0C E4 05 F1 | 	add	objptr, ##27148
02c2c     F2 38 02 F1 | 	add	local10, objptr
02c30     AA 01 00 FF 
02c34     71 31 06 F6 | 	mov	local06, ##@LR__5427
02c38     1C 31 62 FC | 	wrlong	local06, local10
02c3c     35 00 00 FF 
02c40     0C E4 85 F1 | 	sub	objptr, ##27148
02c44                 | LR__0159
02c44     37 39 02 F6 | 	mov	local10, local37
02c48     03 38 66 F0 | 	shl	local10, #3
02c4c     35 00 00 FF 
02c50     0C E4 05 F1 | 	add	objptr, ##27148
02c54     F2 38 02 F1 | 	add	local10, objptr
02c58     1C 77 02 FB | 	rdlong	local41, local10
02c5c                 | ' 
02c5c                 | ' lp$=lparts(addptr).part$ 
02c5c                 | ' 
02c5c                 | ' ' process mouse/cursor/click on/off
02c5c                 | ' 
02c5c                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02c5c     AA 01 00 FF 
02c60     73 15 06 F6 | 	mov	arg02, ##@LR__5428
02c64     3B 13 02 F6 | 	mov	arg01, local41
02c68     35 00 00 FF 
02c6c     0C E4 85 F1 | 	sub	objptr, ##27148
02c70     3C 2D B2 FD | 	call	#__system___string_cmp
02c74     00 FA 0D F2 | 	cmp	result1, #0 wz
02c78     30 00 90 AD |  if_e	jmp	#LR__0160
02c7c     AA 01 00 FF 
02c80     79 15 06 F6 | 	mov	arg02, ##@LR__5429
02c84     3B 13 02 F6 | 	mov	arg01, local41
02c88     24 2D B2 FD | 	call	#__system___string_cmp
02c8c     00 FA 0D F2 | 	cmp	result1, #0 wz
02c90     18 00 90 AD |  if_e	jmp	#LR__0160
02c94     AA 01 00 FF 
02c98     80 15 06 F6 | 	mov	arg02, ##@LR__5430
02c9c     3B 13 02 F6 | 	mov	arg01, local41
02ca0     0C 2D B2 FD | 	call	#__system___string_cmp
02ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ca8     E0 00 90 5D |  if_ne	jmp	#LR__0163
02cac                 | LR__0160
02cac                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02cac     37 2F 02 F6 | 	mov	local05, local37
02cb0     01 2E 06 F1 | 	add	local05, #1
02cb4     03 2E 66 F0 | 	shl	local05, #3
02cb8     35 00 00 FF 
02cbc     0C E4 05 F1 | 	add	objptr, ##27148
02cc0     F2 2E 02 F1 | 	add	local05, objptr
02cc4     17 13 02 FB | 	rdlong	arg01, local05
02cc8     AA 01 00 FF 
02ccc     86 15 06 F6 | 	mov	arg02, ##@LR__5431
02cd0     35 00 00 FF 
02cd4     0C E4 85 F1 | 	sub	objptr, ##27148
02cd8     D4 2C B2 FD | 	call	#__system___string_cmp
02cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce0     38 00 90 5D |  if_ne	jmp	#LR__0161
02ce4     37 39 02 F6 | 	mov	local10, local37
02ce8     01 38 06 F1 | 	add	local10, #1
02cec     03 38 66 F0 | 	shl	local10, #3
02cf0     35 00 00 FF 
02cf4     0C E4 05 F1 | 	add	objptr, ##27148
02cf8     F2 38 02 F1 | 	add	local10, objptr
02cfc     AA 01 00 FF 
02d00     89 31 06 F6 | 	mov	local06, ##@LR__5432
02d04     1C 31 62 FC | 	wrlong	local06, local10
02d08     14 E4 05 F1 | 	add	objptr, #20
02d0c     01 00 80 FF 
02d10     F2 00 68 FC | 	wrlong	##512, objptr
02d14     35 00 00 FF 
02d18     20 E4 85 F1 | 	sub	objptr, ##27168
02d1c                 | LR__0161
02d1c                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02d1c     37 2F 02 F6 | 	mov	local05, local37
02d20     01 2E 06 F1 | 	add	local05, #1
02d24     03 2E 66 F0 | 	shl	local05, #3
02d28     35 00 00 FF 
02d2c     0C E4 05 F1 | 	add	objptr, ##27148
02d30     F2 2E 02 F1 | 	add	local05, objptr
02d34     17 13 02 FB | 	rdlong	arg01, local05
02d38     AA 01 00 FF 
02d3c     8B 15 06 F6 | 	mov	arg02, ##@LR__5433
02d40     35 00 00 FF 
02d44     0C E4 85 F1 | 	sub	objptr, ##27148
02d48     64 2C B2 FD | 	call	#__system___string_cmp
02d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d50     38 00 90 5D |  if_ne	jmp	#LR__0162
02d54     37 39 02 F6 | 	mov	local10, local37
02d58     01 38 06 F1 | 	add	local10, #1
02d5c     03 38 66 F0 | 	shl	local10, #3
02d60     35 00 00 FF 
02d64     0C E4 05 F1 | 	add	objptr, ##27148
02d68     F2 38 02 F1 | 	add	local10, objptr
02d6c     AA 01 00 FF 
02d70     8F 31 06 F6 | 	mov	local06, ##@LR__5434
02d74     1C 31 62 FC | 	wrlong	local06, local10
02d78     14 E4 05 F1 | 	add	objptr, #20
02d7c     01 00 80 FF 
02d80     F2 00 68 FC | 	wrlong	##512, objptr
02d84     35 00 00 FF 
02d88     20 E4 85 F1 | 	sub	objptr, ##27168
02d8c                 | LR__0162
02d8c                 | LR__0163
02d8c                 | ' 		
02d8c                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02d8c                 | ' 
02d8c                 | ' if (lp$="mode" orelse lp$="m.") then 
02d8c     AA 01 00 FF 
02d90     91 15 06 F6 | 	mov	arg02, ##@LR__5435
02d94     3B 13 02 F6 | 	mov	arg01, local41
02d98     14 2C B2 FD | 	call	#__system___string_cmp
02d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02da0     18 00 90 AD |  if_e	jmp	#LR__0164
02da4     AA 01 00 FF 
02da8     96 15 06 F6 | 	mov	arg02, ##@LR__5436
02dac     3B 13 02 F6 | 	mov	arg01, local41
02db0     FC 2B B2 FD | 	call	#__system___string_cmp
02db4     00 FA 0D F2 | 	cmp	result1, #0 wz
02db8     F4 01 90 5D |  if_ne	jmp	#LR__0170
02dbc                 | LR__0164
02dbc                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02dbc     37 2F 02 F6 | 	mov	local05, local37
02dc0     01 2E 06 F1 | 	add	local05, #1
02dc4     03 2E 66 F0 | 	shl	local05, #3
02dc8     35 00 00 FF 
02dcc     0C E4 05 F1 | 	add	objptr, ##27148
02dd0     F2 2E 02 F1 | 	add	local05, objptr
02dd4     17 13 02 FB | 	rdlong	arg01, local05
02dd8     AA 01 00 FF 
02ddc     99 15 06 F6 | 	mov	arg02, ##@LR__5437
02de0     35 00 00 FF 
02de4     0C E4 85 F1 | 	sub	objptr, ##27148
02de8     C4 2B B2 FD | 	call	#__system___string_cmp
02dec     00 FA 0D F2 | 	cmp	result1, #0 wz
02df0     2C 00 90 5D |  if_ne	jmp	#LR__0165
02df4     37 39 02 F6 | 	mov	local10, local37
02df8     01 38 06 F1 | 	add	local10, #1
02dfc     03 38 66 F0 | 	shl	local10, #3
02e00     35 00 00 FF 
02e04     0C E4 05 F1 | 	add	objptr, ##27148
02e08     F2 38 02 F1 | 	add	local10, objptr
02e0c     AA 01 00 FF 
02e10     9F 31 06 F6 | 	mov	local06, ##@LR__5438
02e14     1C 31 62 FC | 	wrlong	local06, local10
02e18     35 00 00 FF 
02e1c     0C E4 85 F1 | 	sub	objptr, ##27148
02e20                 | LR__0165
02e20                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02e20     37 2F 02 F6 | 	mov	local05, local37
02e24     01 2E 06 F1 | 	add	local05, #1
02e28     03 2E 66 F0 | 	shl	local05, #3
02e2c     35 00 00 FF 
02e30     0C E4 05 F1 | 	add	objptr, ##27148
02e34     F2 2E 02 F1 | 	add	local05, objptr
02e38     17 13 02 FB | 	rdlong	arg01, local05
02e3c     AA 01 00 FF 
02e40     A1 15 06 F6 | 	mov	arg02, ##@LR__5439
02e44     35 00 00 FF 
02e48     0C E4 85 F1 | 	sub	objptr, ##27148
02e4c     60 2B B2 FD | 	call	#__system___string_cmp
02e50     00 FA 0D F2 | 	cmp	result1, #0 wz
02e54     2C 00 90 5D |  if_ne	jmp	#LR__0166
02e58     37 39 02 F6 | 	mov	local10, local37
02e5c     01 38 06 F1 | 	add	local10, #1
02e60     03 38 66 F0 | 	shl	local10, #3
02e64     35 00 00 FF 
02e68     0C E4 05 F1 | 	add	objptr, ##27148
02e6c     F2 38 02 F1 | 	add	local10, objptr
02e70     AA 01 00 FF 
02e74     AA 31 06 F6 | 	mov	local06, ##@LR__5440
02e78     1C 31 62 FC | 	wrlong	local06, local10
02e7c     35 00 00 FF 
02e80     0C E4 85 F1 | 	sub	objptr, ##27148
02e84                 | LR__0166
02e84                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02e84     37 2F 02 F6 | 	mov	local05, local37
02e88     01 2E 06 F1 | 	add	local05, #1
02e8c     03 2E 66 F0 | 	shl	local05, #3
02e90     35 00 00 FF 
02e94     0C E4 05 F1 | 	add	objptr, ##27148
02e98     F2 2E 02 F1 | 	add	local05, objptr
02e9c     17 13 02 FB | 	rdlong	arg01, local05
02ea0     AA 01 00 FF 
02ea4     AC 15 06 F6 | 	mov	arg02, ##@LR__5441
02ea8     35 00 00 FF 
02eac     0C E4 85 F1 | 	sub	objptr, ##27148
02eb0     FC 2A B2 FD | 	call	#__system___string_cmp
02eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
02eb8     2C 00 90 5D |  if_ne	jmp	#LR__0167
02ebc     37 39 02 F6 | 	mov	local10, local37
02ec0     01 38 06 F1 | 	add	local10, #1
02ec4     03 38 66 F0 | 	shl	local10, #3
02ec8     35 00 00 FF 
02ecc     0C E4 05 F1 | 	add	objptr, ##27148
02ed0     F2 38 02 F1 | 	add	local10, objptr
02ed4     AA 01 00 FF 
02ed8     B5 31 06 F6 | 	mov	local06, ##@LR__5442
02edc     1C 31 62 FC | 	wrlong	local06, local10
02ee0     35 00 00 FF 
02ee4     0C E4 85 F1 | 	sub	objptr, ##27148
02ee8                 | LR__0167
02ee8                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02ee8     37 2F 02 F6 | 	mov	local05, local37
02eec     01 2E 06 F1 | 	add	local05, #1
02ef0     03 2E 66 F0 | 	shl	local05, #3
02ef4     35 00 00 FF 
02ef8     0C E4 05 F1 | 	add	objptr, ##27148
02efc     F2 2E 02 F1 | 	add	local05, objptr
02f00     17 13 02 FB | 	rdlong	arg01, local05
02f04     AA 01 00 FF 
02f08     B7 15 06 F6 | 	mov	arg02, ##@LR__5443
02f0c     35 00 00 FF 
02f10     0C E4 85 F1 | 	sub	objptr, ##27148
02f14     98 2A B2 FD | 	call	#__system___string_cmp
02f18     00 FA 0D F2 | 	cmp	result1, #0 wz
02f1c     2C 00 90 5D |  if_ne	jmp	#LR__0168
02f20     37 39 02 F6 | 	mov	local10, local37
02f24     01 38 06 F1 | 	add	local10, #1
02f28     03 38 66 F0 | 	shl	local10, #3
02f2c     35 00 00 FF 
02f30     0C E4 05 F1 | 	add	objptr, ##27148
02f34     F2 38 02 F1 | 	add	local10, objptr
02f38     AA 01 00 FF 
02f3c     C0 31 06 F6 | 	mov	local06, ##@LR__5444
02f40     1C 31 62 FC | 	wrlong	local06, local10
02f44     35 00 00 FF 
02f48     0C E4 85 F1 | 	sub	objptr, ##27148
02f4c                 | LR__0168
02f4c                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02f4c     37 2F 02 F6 | 	mov	local05, local37
02f50     01 2E 06 F1 | 	add	local05, #1
02f54     03 2E 66 F0 | 	shl	local05, #3
02f58     35 00 00 FF 
02f5c     0C E4 05 F1 | 	add	objptr, ##27148
02f60     F2 2E 02 F1 | 	add	local05, objptr
02f64     17 13 02 FB | 	rdlong	arg01, local05
02f68     AA 01 00 FF 
02f6c     C2 15 06 F6 | 	mov	arg02, ##@LR__5445
02f70     35 00 00 FF 
02f74     0C E4 85 F1 | 	sub	objptr, ##27148
02f78     34 2A B2 FD | 	call	#__system___string_cmp
02f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f80     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f84     37 39 02 F6 | 	mov	local10, local37
02f88     01 38 06 F1 | 	add	local10, #1
02f8c     03 38 66 F0 | 	shl	local10, #3
02f90     35 00 00 FF 
02f94     0C E4 05 F1 | 	add	objptr, ##27148
02f98     F2 38 02 F1 | 	add	local10, objptr
02f9c     AA 01 00 FF 
02fa0     C5 31 06 F6 | 	mov	local06, ##@LR__5446
02fa4     1C 31 62 FC | 	wrlong	local06, local10
02fa8     35 00 00 FF 
02fac     0C E4 85 F1 | 	sub	objptr, ##27148
02fb0                 | LR__0169
02fb0                 | LR__0170
02fb0                 | ' 
02fb0                 | ' ' find part types 
02fb0                 | ' 
02fb0                 | ' for i=0 to k-1
02fb0     00 28 06 F6 | 	mov	local02, #0
02fb4     23 79 02 F6 | 	mov	local42, local17
02fb8                 | LR__0171
02fb8     3C 29 52 F2 | 	cmps	local02, local42 wc
02fbc     A4 07 90 3D |  if_ae	jmp	#LR__0183
02fc0     14 39 02 F6 | 	mov	local10, local02
02fc4     03 38 66 F0 | 	shl	local10, #3
02fc8     35 00 00 FF 
02fcc     0C E4 05 F1 | 	add	objptr, ##27148
02fd0     F2 38 02 F1 | 	add	local10, objptr
02fd4     14 3B 02 F6 | 	mov	local11, local02
02fd8     1D 41 02 F6 | 	mov	local14, local11
02fdc     20 3F 02 F6 | 	mov	local13, local14
02fe0     03 3E 66 F0 | 	shl	local13, #3
02fe4     F2 3E 02 F1 | 	add	local13, objptr
02fe8     1F 13 02 FB | 	rdlong	arg01, local13
02fec     35 00 00 FF 
02ff0     0C E4 85 F1 | 	sub	objptr, ##27148
02ff4     10 19 B0 FD | 	call	#_isseparator
02ff8     FD FA E1 F8 | 	getbyte	result1, result1, #0
02ffc     04 38 06 F1 | 	add	local10, #4
03000     1C FB 61 FC | 	wrlong	result1, local10
03004                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03004     14 39 02 F6 | 	mov	local10, local02
03008     03 38 66 F0 | 	shl	local10, #3
0300c     35 00 00 FF 
03010     0C E4 05 F1 | 	add	objptr, ##27148
03014     F2 38 02 F1 | 	add	local10, objptr
03018     04 38 06 F1 | 	add	local10, #4
0301c     1C 3D 02 FB | 	rdlong	local12, local10
03020     01 3C 56 F2 | 	cmps	local12, #1 wc
03024     35 00 00 FF 
03028     0C E4 85 F1 | 	sub	objptr, ##27148
0302c     2C 07 90 3D |  if_ae	jmp	#LR__0182
03030     14 39 02 F6 | 	mov	local10, local02
03034     03 38 66 F0 | 	shl	local10, #3
03038     35 00 00 FF 
0303c     0C E4 05 F1 | 	add	objptr, ##27148
03040     F2 38 02 F1 | 	add	local10, objptr
03044     14 3B 02 F6 | 	mov	local11, local02
03048     1D 41 02 F6 | 	mov	local14, local11
0304c     20 3F 02 F6 | 	mov	local13, local14
03050     03 3E 66 F0 | 	shl	local13, #3
03054     F2 3E 02 F1 | 	add	local13, objptr
03058     1F 13 02 FB | 	rdlong	arg01, local13
0305c     35 00 00 FF 
03060     0C E4 85 F1 | 	sub	objptr, ##27148
03064     EC 10 B0 FD | 	call	#_isoperator
03068     FD FA E1 F8 | 	getbyte	result1, result1, #0
0306c     04 38 06 F1 | 	add	local10, #4
03070     1C FB 61 FC | 	wrlong	result1, local10
03074                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03074     14 39 02 F6 | 	mov	local10, local02
03078     03 38 66 F0 | 	shl	local10, #3
0307c     35 00 00 FF 
03080     0C E4 05 F1 | 	add	objptr, ##27148
03084     F2 38 02 F1 | 	add	local10, objptr
03088     04 38 06 F1 | 	add	local10, #4
0308c     1C 3D 02 FB | 	rdlong	local12, local10
03090     01 3C 56 F2 | 	cmps	local12, #1 wc
03094     35 00 00 FF 
03098     0C E4 85 F1 | 	sub	objptr, ##27148
0309c     BC 06 90 3D |  if_ae	jmp	#LR__0182
030a0     14 39 02 F6 | 	mov	local10, local02
030a4     03 38 66 F0 | 	shl	local10, #3
030a8     35 00 00 FF 
030ac     0C E4 05 F1 | 	add	objptr, ##27148
030b0     F2 38 02 F1 | 	add	local10, objptr
030b4     14 3B 02 F6 | 	mov	local11, local02
030b8     1D 41 02 F6 | 	mov	local14, local11
030bc     20 3F 02 F6 | 	mov	local13, local14
030c0     03 3E 66 F0 | 	shl	local13, #3
030c4     F2 3E 02 F1 | 	add	local13, objptr
030c8     1F 13 02 FB | 	rdlong	arg01, local13
030cc     35 00 00 FF 
030d0     0C E4 85 F1 | 	sub	objptr, ##27148
030d4                 | ' 
030d4                 | ' select case s
030d4     AB 01 00 FF 
030d8     B8 14 06 F6 | 	mov	arg02, ##@LR__5531
030dc     D0 28 B2 FD | 	call	#__system___string_cmp
030e0     00 FA 0D F2 | 	cmp	result1, #0 wz
030e4     1B FA 05 A6 |  if_e	mov	result1, #27
030e8     00 FA 05 56 |  if_ne	mov	result1, #0
030ec     FD FA E1 F8 | 	getbyte	result1, result1, #0
030f0     04 38 06 F1 | 	add	local10, #4
030f4     1C FB 61 FC | 	wrlong	result1, local10
030f8                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
030f8     14 39 02 F6 | 	mov	local10, local02
030fc     03 38 66 F0 | 	shl	local10, #3
03100     35 00 00 FF 
03104     0C E4 05 F1 | 	add	objptr, ##27148
03108     F2 38 02 F1 | 	add	local10, objptr
0310c     04 38 06 F1 | 	add	local10, #4
03110     1C 3D 02 FB | 	rdlong	local12, local10
03114     01 3C 56 F2 | 	cmps	local12, #1 wc
03118     35 00 00 FF 
0311c     0C E4 85 F1 | 	sub	objptr, ##27148
03120     38 06 90 3D |  if_ae	jmp	#LR__0182
03124     14 39 02 F6 | 	mov	local10, local02
03128     03 38 66 F0 | 	shl	local10, #3
0312c     35 00 00 FF 
03130     0C E4 05 F1 | 	add	objptr, ##27148
03134     F2 38 02 F1 | 	add	local10, objptr
03138     14 3B 02 F6 | 	mov	local11, local02
0313c     1D 41 02 F6 | 	mov	local14, local11
03140     20 3F 02 F6 | 	mov	local13, local14
03144     03 3E 66 F0 | 	shl	local13, #3
03148     F2 3E 02 F1 | 	add	local13, objptr
0314c     1F 13 02 FB | 	rdlong	arg01, local13
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     AC 19 B0 FD | 	call	#_iscommand
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 38 06 F1 | 	add	local10, #4
03164     1C FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     04 38 06 F1 | 	add	local10, #4
03180     1C 3D 02 FB | 	rdlong	local12, local10
03184     01 3C 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     C8 05 90 3D |  if_ae	jmp	#LR__0182
03194     14 39 02 F6 | 	mov	local10, local02
03198     03 38 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 38 02 F1 | 	add	local10, objptr
031a8     14 3B 02 F6 | 	mov	local11, local02
031ac     1D 41 02 F6 | 	mov	local14, local11
031b0     20 3F 02 F6 | 	mov	local13, local14
031b4     03 3E 66 F0 | 	shl	local13, #3
031b8     F2 5C 02 F6 | 	mov	local28, objptr
031bc     F2 3E 02 F1 | 	add	local13, objptr
031c0     1F 13 02 FB | 	rdlong	arg01, local13
031c4     35 00 00 FF 
031c8     0C E4 85 F1 | 	sub	objptr, ##27148
031cc     F8 29 B0 FD | 	call	#_isfunction
031d0     FD FA E1 F8 | 	getbyte	result1, result1, #0
031d4     04 38 06 F1 | 	add	local10, #4
031d8     1C FB 61 FC | 	wrlong	result1, local10
031dc                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031dc     14 39 02 F6 | 	mov	local10, local02
031e0     03 38 66 F0 | 	shl	local10, #3
031e4     35 00 00 FF 
031e8     0C E4 05 F1 | 	add	objptr, ##27148
031ec     F2 38 02 F1 | 	add	local10, objptr
031f0     04 38 06 F1 | 	add	local10, #4
031f4     1C 3D 02 FB | 	rdlong	local12, local10
031f8     01 3C 56 F2 | 	cmps	local12, #1 wc
031fc     35 00 00 FF 
03200     0C E4 85 F1 | 	sub	objptr, ##27148
03204     54 05 90 3D |  if_ae	jmp	#LR__0182
03208     14 39 02 F6 | 	mov	local10, local02
0320c     03 38 66 F0 | 	shl	local10, #3
03210     35 00 00 FF 
03214     0C E4 05 F1 | 	add	objptr, ##27148
03218     F2 38 02 F1 | 	add	local10, objptr
0321c     14 3B 02 F6 | 	mov	local11, local02
03220     1D 41 02 F6 | 	mov	local14, local11
03224     03 40 66 F0 | 	shl	local14, #3
03228     F2 3E 02 F6 | 	mov	local13, objptr
0322c     F2 40 02 F1 | 	add	local14, objptr
03230     20 13 02 FB | 	rdlong	arg01, local14
03234     35 00 00 FF 
03238     0C E4 85 F1 | 	sub	objptr, ##27148
0323c     5C 13 B0 FD | 	call	#_isnotename
03240     04 38 06 F1 | 	add	local10, #4
03244     1C FB 61 FC | 	wrlong	result1, local10
03248                 | ' lparts(i).token=isnotename(lparts(i).part$) 
03248                 | ' if lparts(i).token>0 then 
03248     14 39 02 F6 | 	mov	local10, local02
0324c     03 38 66 F0 | 	shl	local10, #3
03250     35 00 00 FF 
03254     0C E4 05 F1 | 	add	objptr, ##27148
03258     F2 38 02 F1 | 	add	local10, objptr
0325c     04 38 06 F1 | 	add	local10, #4
03260     1C 31 02 FB | 	rdlong	local06, local10
03264     01 30 56 F2 | 	cmps	local06, #1 wc
03268     35 00 00 FF 
0326c     0C E4 85 F1 | 	sub	objptr, ##27148
03270     8C 00 90 CD |  if_b	jmp	#LR__0172
03274     14 2F 02 F6 | 	mov	local05, local02
03278     03 2E 66 F0 | 	shl	local05, #3
0327c     35 00 00 FF 
03280     0C E4 05 F1 | 	add	objptr, ##27148
03284     F2 2E 02 F1 | 	add	local05, objptr
03288     04 2E 06 F1 | 	add	local05, #4
0328c     17 3D 02 FB | 	rdlong	local12, local05
03290     1E 13 02 F6 | 	mov	arg01, local12
03294     35 00 00 FF 
03298     0C E4 85 F1 | 	sub	objptr, ##27148
0329c     B0 39 B0 FD | 	call	#_getnoteval
032a0     FD 7A 02 F6 | 	mov	local43, result1
032a4     14 39 02 F6 | 	mov	local10, local02
032a8     03 38 66 F0 | 	shl	local10, #3
032ac     35 00 00 FF 
032b0     0C E4 05 F1 | 	add	objptr, ##27148
032b4     F2 38 02 F1 | 	add	local10, objptr
032b8     3D 13 02 F6 | 	mov	arg01, local43
032bc     35 00 00 FF 
032c0     0C E4 85 F1 | 	sub	objptr, ##27148
032c4     34 49 B2 FD | 	call	#__system__str_S
032c8     1C FB 61 FC | 	wrlong	result1, local10
032cc     14 2D 02 F6 | 	mov	local04, local02
032d0     16 2B 02 F6 | 	mov	local03, local04
032d4     15 39 02 F6 | 	mov	local10, local03
032d8     03 38 66 F0 | 	shl	local10, #3
032dc     35 00 00 FF 
032e0     0C E4 05 F1 | 	add	objptr, ##27148
032e4     F2 38 02 F1 | 	add	local10, objptr
032e8     04 38 06 F1 | 	add	local10, #4
032ec     01 00 80 FF 
032f0     1C 05 68 FC | 	wrlong	##514, local10
032f4     35 00 00 FF 
032f8     0C E4 85 F1 | 	sub	objptr, ##27148
032fc     5C 04 90 FD | 	jmp	#LR__0182
03300                 | LR__0172
03300     14 39 02 F6 | 	mov	local10, local02
03304     03 38 66 F0 | 	shl	local10, #3
03308     35 00 00 FF 
0330c     0C E4 05 F1 | 	add	objptr, ##27148
03310     F2 38 02 F1 | 	add	local10, objptr
03314     14 41 02 F6 | 	mov	local14, local02
03318     03 40 66 F0 | 	shl	local14, #3
0331c     F2 40 02 F1 | 	add	local14, objptr
03320     20 13 02 FB | 	rdlong	arg01, local14
03324     35 00 00 FF 
03328     0C E4 85 F1 | 	sub	objptr, ##27148
0332c     04 11 B0 FD | 	call	#_ischannel
03330     04 38 06 F1 | 	add	local10, #4
03334     1C FB 61 FC | 	wrlong	result1, local10
03338                 | ' 
03338                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
03338                 | ' 
03338                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
03338     14 39 02 F6 | 	mov	local10, local02
0333c     03 38 66 F0 | 	shl	local10, #3
03340     35 00 00 FF 
03344     0C E4 05 F1 | 	add	objptr, ##27148
03348     F2 38 02 F1 | 	add	local10, objptr
0334c     04 38 06 F1 | 	add	local10, #4
03350     1C 31 02 FB | 	rdlong	local06, local10
03354     01 30 56 F2 | 	cmps	local06, #1 wc
03358     35 00 00 FF 
0335c     0C E4 85 F1 | 	sub	objptr, ##27148
03360     74 00 90 CD |  if_b	jmp	#LR__0173
03364     14 39 02 F6 | 	mov	local10, local02
03368     03 38 66 F0 | 	shl	local10, #3
0336c     35 00 00 FF 
03370     0C E4 05 F1 | 	add	objptr, ##27148
03374     F2 38 02 F1 | 	add	local10, objptr
03378     14 3B 02 F6 | 	mov	local11, local02
0337c     1D 41 02 F6 | 	mov	local14, local11
03380     03 40 66 F0 | 	shl	local14, #3
03384     F2 3E 02 F6 | 	mov	local13, objptr
03388     F2 40 02 F1 | 	add	local14, objptr
0338c     20 13 02 FB | 	rdlong	arg01, local14
03390     01 3C 06 F6 | 	mov	local12, #1
03394     01 14 06 F6 | 	mov	arg02, #1
03398     35 00 00 FF 
0339c     0C E4 85 F1 | 	sub	objptr, ##27148
033a0     E8 46 B2 FD | 	call	#__system__Right_S
033a4     1C FB 61 FC | 	wrlong	result1, local10
033a8     14 2D 02 F6 | 	mov	local04, local02
033ac     16 2B 02 F6 | 	mov	local03, local04
033b0     15 39 02 F6 | 	mov	local10, local03
033b4     03 38 66 F0 | 	shl	local10, #3
033b8     35 00 00 FF 
033bc     0C E4 05 F1 | 	add	objptr, ##27148
033c0     F2 38 02 F1 | 	add	local10, objptr
033c4     04 38 06 F1 | 	add	local10, #4
033c8     1C 59 68 FC | 	wrlong	#44, local10
033cc     35 00 00 FF 
033d0     0C E4 85 F1 | 	sub	objptr, ##27148
033d4     84 03 90 FD | 	jmp	#LR__0182
033d8                 | LR__0173
033d8     14 39 02 F6 | 	mov	local10, local02
033dc     03 38 66 F0 | 	shl	local10, #3
033e0     35 00 00 FF 
033e4     0C E4 05 F1 | 	add	objptr, ##27148
033e8     F2 38 02 F1 | 	add	local10, objptr
033ec     14 3B 02 F6 | 	mov	local11, local02
033f0     1D 41 02 F6 | 	mov	local14, local11
033f4     03 40 66 F0 | 	shl	local14, #3
033f8     F2 3E 02 F6 | 	mov	local13, objptr
033fc     F2 40 02 F1 | 	add	local14, objptr
03400     20 13 02 FB | 	rdlong	arg01, local14
03404     35 00 00 FF 
03408     0C E4 85 F1 | 	sub	objptr, ##27148
0340c     0C 11 B0 FD | 	call	#_isconstant
03410     04 38 06 F1 | 	add	local10, #4
03414     1C FB 61 FC | 	wrlong	result1, local10
03418                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
03418     14 39 02 F6 | 	mov	local10, local02
0341c     03 38 66 F0 | 	shl	local10, #3
03420     35 00 00 FF 
03424     0C E4 05 F1 | 	add	objptr, ##27148
03428     F2 38 02 F1 | 	add	local10, objptr
0342c     04 38 06 F1 | 	add	local10, #4
03430     1C 3D 02 FB | 	rdlong	local12, local10
03434     01 3C 56 F2 | 	cmps	local12, #1 wc
03438     35 00 00 FF 
0343c     0C E4 85 F1 | 	sub	objptr, ##27148
03440     94 00 90 CD |  if_b	jmp	#LR__0174
03444     14 39 02 F6 | 	mov	local10, local02
03448     03 38 66 F0 | 	shl	local10, #3
0344c     35 00 00 FF 
03450     0C E4 05 F1 | 	add	objptr, ##27148
03454     F2 38 02 F1 | 	add	local10, objptr
03458     14 3D 02 F6 | 	mov	local12, local02
0345c     1E 3B 02 F6 | 	mov	local11, local12
03460     1D 41 02 F6 | 	mov	local14, local11
03464     03 40 66 F0 | 	shl	local14, #3
03468     F2 3E 02 F6 | 	mov	local13, objptr
0346c     F2 40 02 F1 | 	add	local14, objptr
03470     04 40 06 F1 | 	add	local14, #4
03474     20 13 02 FB | 	rdlong	arg01, local14
03478     04 40 86 F1 | 	sub	local14, #4
0347c     35 00 00 FF 
03480     0C E4 85 F1 | 	sub	objptr, ##27148
03484     09 13 52 F6 | 	abs	arg01, arg01 wc
03488     1F 7C C6 C9 |  if_b	decod	local44, #31
0348c     00 7C 06 36 |  if_ae	mov	local44, #0
03490     68 4F B2 FD | 	call	#__system___float_fromuns
03494     3E FB 61 F5 | 	xor	result1, local44
03498     FD 12 02 F6 | 	mov	arg01, result1
0349c     5C 47 B2 FD | 	call	#__system__str_S
034a0     1C FB 61 FC | 	wrlong	result1, local10
034a4     14 2D 02 F6 | 	mov	local04, local02
034a8     16 2B 02 F6 | 	mov	local03, local04
034ac     15 39 02 F6 | 	mov	local10, local03
034b0     03 38 66 F0 | 	shl	local10, #3
034b4     35 00 00 FF 
034b8     0C E4 05 F1 | 	add	objptr, ##27148
034bc     F2 38 02 F1 | 	add	local10, objptr
034c0     04 38 06 F1 | 	add	local10, #4
034c4     01 00 80 FF 
034c8     1C 03 68 FC | 	wrlong	##513, local10
034cc     35 00 00 FF 
034d0     0C E4 85 F1 | 	sub	objptr, ##27148
034d4     84 02 90 FD | 	jmp	#LR__0182
034d8                 | LR__0174
034d8     14 2F 02 F6 | 	mov	local05, local02
034dc     03 2E 66 F0 | 	shl	local05, #3
034e0     35 00 00 FF 
034e4     0C E4 05 F1 | 	add	objptr, ##27148
034e8     F2 2E 02 F1 | 	add	local05, objptr
034ec     17 13 02 FB | 	rdlong	arg01, local05
034f0     35 00 00 FF 
034f4     0C E4 85 F1 | 	sub	objptr, ##27148
034f8     A0 2F B0 FD | 	call	#_isnum
034fc     FD 7E 02 F6 | 	mov	local45, result1
03500     14 2F 02 F6 | 	mov	local05, local02
03504     03 2E 66 F0 | 	shl	local05, #3
03508     35 00 00 FF 
0350c     0C E4 05 F1 | 	add	objptr, ##27148
03510     F2 2E 02 F1 | 	add	local05, objptr
03514     17 13 02 FB | 	rdlong	arg01, local05
03518     35 00 00 FF 
0351c     0C E4 85 F1 | 	sub	objptr, ##27148
03520     64 33 B0 FD | 	call	#_isint
03524     FD 80 02 F6 | 	mov	local46, result1
03528     14 2F 02 F6 | 	mov	local05, local02
0352c     03 2E 66 F0 | 	shl	local05, #3
03530     35 00 00 FF 
03534     0C E4 05 F1 | 	add	objptr, ##27148
03538     F2 2E 02 F1 | 	add	local05, objptr
0353c     17 13 02 FB | 	rdlong	arg01, local05
03540     35 00 00 FF 
03544     0C E4 85 F1 | 	sub	objptr, ##27148
03548     E0 35 B0 FD | 	call	#_isdec
0354c     FD 82 02 F6 | 	mov	local47, result1
03550                 | ' 
03550                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
03550                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
03550     00 7E 0E F2 | 	cmp	local45, #0 wz
03554     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
03558     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
0355c     34 00 90 AD |  if_e	jmp	#LR__0175
03560     14 2D 02 F6 | 	mov	local04, local02
03564     16 2B 02 F6 | 	mov	local03, local04
03568     15 39 02 F6 | 	mov	local10, local03
0356c     03 38 66 F0 | 	shl	local10, #3
03570     35 00 00 FF 
03574     0C E4 05 F1 | 	add	objptr, ##27148
03578     F2 38 02 F1 | 	add	local10, objptr
0357c     04 38 06 F1 | 	add	local10, #4
03580     01 00 80 FF 
03584     1C 01 68 FC | 	wrlong	##512, local10
03588     35 00 00 FF 
0358c     0C E4 85 F1 | 	sub	objptr, ##27148
03590     C8 01 90 FD | 	jmp	#LR__0182
03594                 | LR__0175
03594                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03594     00 7E 0E F2 | 	cmp	local45, #0 wz
03598     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
0359c     41 2D 22 56 |  if_ne	not	local04, local47
035a0     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
035a4     34 00 90 AD |  if_e	jmp	#LR__0176
035a8     14 2D 02 F6 | 	mov	local04, local02
035ac     16 2B 02 F6 | 	mov	local03, local04
035b0     15 39 02 F6 | 	mov	local10, local03
035b4     03 38 66 F0 | 	shl	local10, #3
035b8     35 00 00 FF 
035bc     0C E4 05 F1 | 	add	objptr, ##27148
035c0     F2 38 02 F1 | 	add	local10, objptr
035c4     04 38 06 F1 | 	add	local10, #4
035c8     01 00 80 FF 
035cc     1C 03 68 FC | 	wrlong	##513, local10
035d0     35 00 00 FF 
035d4     0C E4 85 F1 | 	sub	objptr, ##27148
035d8     80 01 90 FD | 	jmp	#LR__0182
035dc                 | LR__0176
035dc                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
035dc     00 7E 0E F2 | 	cmp	local45, #0 wz
035e0     40 2D 22 56 |  if_ne	not	local04, local46
035e4     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
035e8     41 2B 22 56 |  if_ne	not	local03, local47
035ec     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
035f0     34 00 90 AD |  if_e	jmp	#LR__0177
035f4     14 2D 02 F6 | 	mov	local04, local02
035f8     16 2B 02 F6 | 	mov	local03, local04
035fc     15 39 02 F6 | 	mov	local10, local03
03600     03 38 66 F0 | 	shl	local10, #3
03604     35 00 00 FF 
03608     0C E4 05 F1 | 	add	objptr, ##27148
0360c     F2 38 02 F1 | 	add	local10, objptr
03610     04 38 06 F1 | 	add	local10, #4
03614     01 00 80 FF 
03618     1C 05 68 FC | 	wrlong	##514, local10
0361c     35 00 00 FF 
03620     0C E4 85 F1 | 	sub	objptr, ##27148
03624     34 01 90 FD | 	jmp	#LR__0182
03628                 | LR__0177
03628                 | ' 
03628                 | ' if isstring(lparts(i).part$) then 
03628     14 2F 02 F6 | 	mov	local05, local02
0362c     03 2E 66 F0 | 	shl	local05, #3
03630     35 00 00 FF 
03634     0C E4 05 F1 | 	add	objptr, ##27148
03638     F2 2E 02 F1 | 	add	local05, objptr
0363c     17 13 02 FB | 	rdlong	arg01, local05
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     A0 35 B0 FD | 	call	#_isstring
0364c     00 FA 0D F2 | 	cmp	result1, #0 wz
03650     A8 00 90 AD |  if_e	jmp	#LR__0180
03654     14 39 02 F6 | 	mov	local10, local02
03658     03 38 66 F0 | 	shl	local10, #3
0365c     35 00 00 FF 
03660     0C E4 05 F1 | 	add	objptr, ##27148
03664     F2 38 02 F1 | 	add	local10, objptr
03668     04 38 06 F1 | 	add	local10, #4
0366c     01 00 80 FF 
03670     1C 07 68 FC | 	wrlong	##515, local10
03674     14 2D 02 F6 | 	mov	local04, local02
03678     16 2B 02 F6 | 	mov	local03, local04
0367c     15 39 02 F6 | 	mov	local10, local03
03680     03 38 66 F0 | 	shl	local10, #3
03684     F2 38 02 F1 | 	add	local10, objptr
03688     14 41 02 F6 | 	mov	local14, local02
0368c     03 40 66 F0 | 	shl	local14, #3
03690     F2 40 02 F1 | 	add	local14, objptr
03694     20 31 02 FB | 	rdlong	local06, local14
03698     02 3C 06 F6 | 	mov	local12, #2
0369c     14 51 02 F6 | 	mov	local22, local02
036a0     28 53 02 F6 | 	mov	local23, local22
036a4     03 52 66 F0 | 	shl	local23, #3
036a8     F2 54 02 F6 | 	mov	local24, objptr
036ac     F2 52 02 F1 | 	add	local23, objptr
036b0     29 13 02 FB | 	rdlong	arg01, local23
036b4     35 00 00 FF 
036b8     0C E4 85 F1 | 	sub	objptr, ##27148
036bc     09 33 02 F6 | 	mov	local07, arg01
036c0     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
036c4                 | LR__0178
036c4     19 FB C9 FA | 	rdbyte	result1, local07 wz
036c8     01 32 06 51 |  if_ne	add	local07, #1
036cc     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
036d0                 | LR__0179
036d0     09 33 82 F1 | 	sub	local07, arg01
036d4     19 3F 02 F6 | 	mov	local13, local07
036d8     1F 41 02 F6 | 	mov	local14, local13
036dc     02 40 86 F1 | 	sub	local14, #2
036e0     20 3B 02 F6 | 	mov	local11, local14
036e4     18 13 02 F6 | 	mov	arg01, local06
036e8     1E 15 02 F6 | 	mov	arg02, local12
036ec     1D 17 02 F6 | 	mov	arg03, local11
036f0     28 44 B2 FD | 	call	#__system__Mid_S
036f4     1C FB 61 FC | 	wrlong	result1, local10
036f8     60 00 90 FD | 	jmp	#LR__0182
036fc                 | LR__0180
036fc                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
036fc     14 2B 02 F6 | 	mov	local03, local02
03700     15 2F 02 F6 | 	mov	local05, local03
03704     03 2E 66 F0 | 	shl	local05, #3
03708     35 00 00 FF 
0370c     0C E4 05 F1 | 	add	objptr, ##27148
03710     F2 2E 02 F1 | 	add	local05, objptr
03714     17 13 02 FB | 	rdlong	arg01, local05
03718     35 00 00 FF 
0371c     0C E4 85 F1 | 	sub	objptr, ##27148
03720     04 2B B0 FD | 	call	#_isname
03724     FD 2C 0A F6 | 	mov	local04, result1 wz
03728     30 00 90 AD |  if_e	jmp	#LR__0181
0372c     14 2D 02 F6 | 	mov	local04, local02
03730     16 2B 02 F6 | 	mov	local03, local04
03734     15 39 02 F6 | 	mov	local10, local03
03738     03 38 66 F0 | 	shl	local10, #3
0373c     35 00 00 FF 
03740     0C E4 05 F1 | 	add	objptr, ##27148
03744     F2 38 02 F1 | 	add	local10, objptr
03748     04 38 06 F1 | 	add	local10, #4
0374c     01 00 80 FF 
03750     1C 09 68 FC | 	wrlong	##516, local10
03754     35 00 00 FF 
03758     0C E4 85 F1 | 	sub	objptr, ##27148
0375c                 | LR__0181
0375c                 | LR__0182
0375c     01 28 06 F1 | 	add	local02, #1
03760     54 F8 9F FD | 	jmp	#LR__0171
03764                 | LR__0183
03764     23 39 02 F6 | 	mov	local10, local17
03768     03 38 66 F0 | 	shl	local10, #3
0376c     35 00 00 FF 
03770     0C E4 05 F1 | 	add	objptr, ##27148
03774     F2 38 02 F1 | 	add	local10, objptr
03778     04 38 06 F1 | 	add	local10, #4
0377c     1C FD 6B FC | 	wrlong	#510, local10
03780     23 39 02 F6 | 	mov	local10, local17
03784     03 38 66 F0 | 	shl	local10, #3
03788     F2 38 02 F1 | 	add	local10, objptr
0378c     AA 01 00 FF 
03790     C7 31 06 F6 | 	mov	local06, ##@LR__5447
03794     1C 31 62 FC | 	wrlong	local06, local10
03798     10 00 00 FF 
0379c     54 E4 05 F1 | 	add	objptr, ##8276
037a0     F2 46 62 FC | 	wrlong	local17, objptr
037a4     45 00 00 FF 
037a8     60 E4 85 F1 | 	sub	objptr, ##35424
037ac                 | ' 
037ac                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
037ac                 | ' 
037ac                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
037ac                 | '  
037ac                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
037ac     AA 01 00 FF 
037b0     C8 15 06 F6 | 	mov	arg02, ##@LR__5448
037b4     3B 13 02 F6 | 	mov	arg01, local41
037b8     F4 21 B2 FD | 	call	#__system___string_cmp
037bc     00 FA 0D F2 | 	cmp	result1, #0 wz
037c0     F0 00 90 AD |  if_e	jmp	#LR__0184
037c4     AA 01 00 FF 
037c8     CD 15 06 F6 | 	mov	arg02, ##@LR__5449
037cc     3B 13 02 F6 | 	mov	arg01, local41
037d0     DC 21 B2 FD | 	call	#__system___string_cmp
037d4     00 FA 0D F2 | 	cmp	result1, #0 wz
037d8     D8 00 90 AD |  if_e	jmp	#LR__0184
037dc     AA 01 00 FF 
037e0     D2 31 06 F6 | 	mov	local06, ##@LR__5450
037e4     3B 13 02 F6 | 	mov	arg01, local41
037e8     18 15 02 F6 | 	mov	arg02, local06
037ec     C0 21 B2 FD | 	call	#__system___string_cmp
037f0     00 FA 0D F2 | 	cmp	result1, #0 wz
037f4     BC 00 90 AD |  if_e	jmp	#LR__0184
037f8     AA 01 00 FF 
037fc     D7 3D 06 F6 | 	mov	local12, ##@LR__5451
03800     1E 31 02 F6 | 	mov	local06, local12
03804     3B 13 02 F6 | 	mov	arg01, local41
03808     18 15 02 F6 | 	mov	arg02, local06
0380c     A0 21 B2 FD | 	call	#__system___string_cmp
03810     00 FA 0D F2 | 	cmp	result1, #0 wz
03814     9C 00 90 AD |  if_e	jmp	#LR__0184
03818     AA 01 00 FF 
0381c     DB 3B 06 F6 | 	mov	local11, ##@LR__5452
03820     1D 3D 02 F6 | 	mov	local12, local11
03824     3B 13 02 F6 | 	mov	arg01, local41
03828     1E 15 02 F6 | 	mov	arg02, local12
0382c     80 21 B2 FD | 	call	#__system___string_cmp
03830     FD 30 0A F6 | 	mov	local06, result1 wz
03834     7C 00 90 AD |  if_e	jmp	#LR__0184
03838     AA 01 00 FF 
0383c     DF 41 06 F6 | 	mov	local14, ##@LR__5453
03840     20 3B 02 F6 | 	mov	local11, local14
03844     3B 13 02 F6 | 	mov	arg01, local41
03848     1D 15 02 F6 | 	mov	arg02, local11
0384c     60 21 B2 FD | 	call	#__system___string_cmp
03850     FD 3C 0A F6 | 	mov	local12, result1 wz
03854     5C 00 90 AD |  if_e	jmp	#LR__0184
03858     AA 01 00 FF 
0385c     E2 3F 06 F6 | 	mov	local13, ##@LR__5454
03860     1F 41 02 F6 | 	mov	local14, local13
03864     3B 13 02 F6 | 	mov	arg01, local41
03868     20 15 02 F6 | 	mov	arg02, local14
0386c     40 21 B2 FD | 	call	#__system___string_cmp
03870     FD 3A 0A F6 | 	mov	local11, result1 wz
03874     3C 00 90 AD |  if_e	jmp	#LR__0184
03878     AA 01 00 FF 
0387c     E6 3F 06 F6 | 	mov	local13, ##@LR__5455
03880     3B 13 02 F6 | 	mov	arg01, local41
03884     1F 15 02 F6 | 	mov	arg02, local13
03888     24 21 B2 FD | 	call	#__system___string_cmp
0388c     FD 40 0A F6 | 	mov	local14, result1 wz
03890     20 00 90 AD |  if_e	jmp	#LR__0184
03894     AA 01 00 FF 
03898     EC 51 06 F6 | 	mov	local22, ##@LR__5456
0389c     28 5D 02 F6 | 	mov	local28, local22
038a0     3B 13 02 F6 | 	mov	arg01, local41
038a4     2E 15 02 F6 | 	mov	arg02, local28
038a8     04 21 B2 FD | 	call	#__system___string_cmp
038ac     FD 3E 0A F6 | 	mov	local13, result1 wz
038b0     7C 00 90 5D |  if_ne	jmp	#LR__0185
038b4                 | LR__0184
038b4     37 5D 02 F6 | 	mov	local28, local37
038b8     01 5C 06 F1 | 	add	local28, #1
038bc     2E 51 02 F6 | 	mov	local22, local28
038c0     28 53 02 F6 | 	mov	local23, local22
038c4     03 52 66 F0 | 	shl	local23, #3
038c8     35 00 00 FF 
038cc     0C E4 05 F1 | 	add	objptr, ##27148
038d0     F2 54 02 F6 | 	mov	local24, objptr
038d4     F2 52 02 F1 | 	add	local23, objptr
038d8     04 52 06 F1 | 	add	local23, #4
038dc     29 61 02 FB | 	rdlong	local30, local23
038e0     04 52 86 F1 | 	sub	local23, #4
038e4     30 5F 02 F6 | 	mov	local29, local30
038e8     01 00 00 FF 
038ec     04 5E 0E F2 | 	cmp	local29, ##516 wz
038f0     35 00 00 FF 
038f4     0C E4 85 F1 | 	sub	objptr, ##27148
038f8     34 00 90 5D |  if_ne	jmp	#LR__0185
038fc     37 39 02 F6 | 	mov	local10, local37
03900     01 38 06 F1 | 	add	local10, #1
03904     03 38 66 F0 | 	shl	local10, #3
03908     35 00 00 FF 
0390c     0C E4 05 F1 | 	add	objptr, ##27148
03910     F2 38 02 F1 | 	add	local10, objptr
03914     01 00 00 FF 
03918     03 30 06 F6 | 	mov	local06, ##515
0391c     04 38 06 F1 | 	add	local10, #4
03920     01 00 80 FF 
03924     1C 07 68 FC | 	wrlong	##515, local10
03928     35 00 00 FF 
0392c     0C E4 85 F1 | 	sub	objptr, ##27148
03930                 | LR__0185
03930                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
03930     AA 01 00 FF 
03934     EF 15 06 F6 | 	mov	arg02, ##@LR__5457
03938     3B 13 02 F6 | 	mov	arg01, local41
0393c     70 20 B2 FD | 	call	#__system___string_cmp
03940     00 FA 0D F2 | 	cmp	result1, #0 wz
03944     1C 00 90 AD |  if_e	jmp	#LR__0186
03948     AA 01 00 FF 
0394c     F6 2F 06 F6 | 	mov	local05, ##@LR__5458
03950     3B 13 02 F6 | 	mov	arg01, local41
03954     17 15 02 F6 | 	mov	arg02, local05
03958     54 20 B2 FD | 	call	#__system___string_cmp
0395c     00 FA 0D F2 | 	cmp	result1, #0 wz
03960     7C 00 90 5D |  if_ne	jmp	#LR__0187
03964                 | LR__0186
03964     37 2F 02 F6 | 	mov	local05, local37
03968     01 2E 06 F1 | 	add	local05, #1
0396c     17 31 02 F6 | 	mov	local06, local05
03970     03 30 66 F0 | 	shl	local06, #3
03974     35 00 00 FF 
03978     0C E4 05 F1 | 	add	objptr, ##27148
0397c     F2 3C 02 F6 | 	mov	local12, objptr
03980     F2 30 02 F1 | 	add	local06, objptr
03984     04 30 06 F1 | 	add	local06, #4
03988     18 41 02 FB | 	rdlong	local14, local06
0398c     04 30 86 F1 | 	sub	local06, #4
03990     20 3B 02 F6 | 	mov	local11, local14
03994     01 00 00 FF 
03998     04 3A 0E F2 | 	cmp	local11, ##516 wz
0399c     35 00 00 FF 
039a0     0C E4 85 F1 | 	sub	objptr, ##27148
039a4     38 00 90 5D |  if_ne	jmp	#LR__0187
039a8     37 39 02 F6 | 	mov	local10, local37
039ac     01 38 06 F1 | 	add	local10, #1
039b0     03 38 66 F0 | 	shl	local10, #3
039b4     35 00 00 FF 
039b8     0C E4 05 F1 | 	add	objptr, ##27148
039bc     F2 2E 02 F6 | 	mov	local05, objptr
039c0     F2 38 02 F1 | 	add	local10, objptr
039c4     01 00 00 FF 
039c8     03 30 06 F6 | 	mov	local06, ##515
039cc     04 38 06 F1 | 	add	local10, #4
039d0     01 00 80 FF 
039d4     1C 07 68 FC | 	wrlong	##515, local10
039d8     35 00 00 FF 
039dc     0C E4 85 F1 | 	sub	objptr, ##27148
039e0                 | LR__0187
039e0                 | ' 
039e0                 | ' ' cd needs special treatment..
039e0                 | ' 
039e0                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
039e0     AA 01 00 FF 
039e4     FC 15 06 F6 | 	mov	arg02, ##@LR__5459
039e8     3B 13 02 F6 | 	mov	arg01, local41
039ec     C0 1F B2 FD | 	call	#__system___string_cmp
039f0     00 FA 0D F2 | 	cmp	result1, #0 wz
039f4     38 00 90 5D |  if_ne	jmp	#LR__0188
039f8     37 39 02 F6 | 	mov	local10, local37
039fc     01 38 06 F1 | 	add	local10, #1
03a00     03 38 66 F0 | 	shl	local10, #3
03a04     35 00 00 FF 
03a08     0C E4 05 F1 | 	add	objptr, ##27148
03a0c     F2 2E 02 F6 | 	mov	local05, objptr
03a10     F2 38 02 F1 | 	add	local10, objptr
03a14     01 00 00 FF 
03a18     03 30 06 F6 | 	mov	local06, ##515
03a1c     04 38 06 F1 | 	add	local10, #4
03a20     01 00 80 FF 
03a24     1C 07 68 FC | 	wrlong	##515, local10
03a28     35 00 00 FF 
03a2c     0C E4 85 F1 | 	sub	objptr, ##27148
03a30                 | LR__0188
03a30                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03a30     AA 01 00 FF 
03a34     FF 15 06 F6 | 	mov	arg02, ##@LR__5460
03a38     3B 13 02 F6 | 	mov	arg01, local41
03a3c     70 1F B2 FD | 	call	#__system___string_cmp
03a40     00 FA 0D F2 | 	cmp	result1, #0 wz
03a44     A4 00 90 5D |  if_ne	jmp	#LR__0189
03a48     37 31 02 F6 | 	mov	local06, local37
03a4c     01 30 06 F1 | 	add	local06, #1
03a50     03 30 66 F0 | 	shl	local06, #3
03a54     35 00 00 FF 
03a58     0C E4 05 F1 | 	add	objptr, ##27148
03a5c     F2 3C 02 F6 | 	mov	local12, objptr
03a60     F2 30 02 F1 | 	add	local06, objptr
03a64     18 13 02 FB | 	rdlong	arg01, local06
03a68     AB 01 00 FF 
03a6c     03 2E 06 F6 | 	mov	local05, ##@LR__5461
03a70     17 15 02 F6 | 	mov	arg02, local05
03a74     35 00 00 FF 
03a78     0C E4 85 F1 | 	sub	objptr, ##27148
03a7c     30 1F B2 FD | 	call	#__system___string_cmp
03a80     00 FA 0D F2 | 	cmp	result1, #0 wz
03a84     64 00 90 5D |  if_ne	jmp	#LR__0189
03a88     37 39 02 F6 | 	mov	local10, local37
03a8c     01 38 06 F1 | 	add	local10, #1
03a90     03 38 66 F0 | 	shl	local10, #3
03a94     35 00 00 FF 
03a98     0C E4 05 F1 | 	add	objptr, ##27148
03a9c     F2 38 02 F1 | 	add	local10, objptr
03aa0     04 38 06 F1 | 	add	local10, #4
03aa4     01 00 80 FF 
03aa8     1C 07 68 FC | 	wrlong	##515, local10
03aac     37 39 02 F6 | 	mov	local10, local37
03ab0     01 38 06 F1 | 	add	local10, #1
03ab4     03 38 66 F0 | 	shl	local10, #3
03ab8     F2 38 02 F1 | 	add	local10, objptr
03abc     AB 01 00 FF 
03ac0     05 30 06 F6 | 	mov	local06, ##@LR__5462
03ac4     1C 31 62 FC | 	wrlong	local06, local10
03ac8     37 39 02 F6 | 	mov	local10, local37
03acc     03 38 66 F0 | 	shl	local10, #3
03ad0     F2 2E 02 F6 | 	mov	local05, objptr
03ad4     F2 38 02 F1 | 	add	local10, objptr
03ad8     C3 30 06 F6 | 	mov	local06, #195
03adc     04 38 06 F1 | 	add	local10, #4
03ae0     1C 87 69 FC | 	wrlong	#195, local10
03ae4     35 00 00 FF 
03ae8     0C E4 85 F1 | 	sub	objptr, ##27148
03aec                 | LR__0189
03aec                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03aec     AB 01 00 FF 
03af0     08 38 06 F6 | 	mov	local10, ##@LR__5463
03af4     3B 13 02 F6 | 	mov	arg01, local41
03af8     1C 15 02 F6 | 	mov	arg02, local10
03afc     B0 1E B2 FD | 	call	#__system___string_cmp
03b00     00 FA 0D F2 | 	cmp	result1, #0 wz
03b04     04 01 90 5D |  if_ne	jmp	#LR__0192
03b08     37 31 02 F6 | 	mov	local06, local37
03b0c     01 30 06 F1 | 	add	local06, #1
03b10     03 30 66 F0 | 	shl	local06, #3
03b14     35 00 00 FF 
03b18     0C E4 05 F1 | 	add	objptr, ##27148
03b1c     F2 3C 02 F6 | 	mov	local12, objptr
03b20     F2 30 02 F1 | 	add	local06, objptr
03b24     18 13 02 FB | 	rdlong	arg01, local06
03b28     AB 01 00 FF 
03b2c     0B 2E 06 F6 | 	mov	local05, ##@LR__5464
03b30     17 39 02 F6 | 	mov	local10, local05
03b34     1C 15 02 F6 | 	mov	arg02, local10
03b38     35 00 00 FF 
03b3c     0C E4 85 F1 | 	sub	objptr, ##27148
03b40     6C 1E B2 FD | 	call	#__system___string_cmp
03b44     00 FA 0D F2 | 	cmp	result1, #0 wz
03b48     C0 00 90 5D |  if_ne	jmp	#LR__0192
03b4c     37 39 02 F6 | 	mov	local10, local37
03b50     01 38 06 F1 | 	add	local10, #1
03b54     03 38 66 F0 | 	shl	local10, #3
03b58     35 00 00 FF 
03b5c     0C E4 05 F1 | 	add	objptr, ##27148
03b60     F2 2E 02 F6 | 	mov	local05, objptr
03b64     F2 38 02 F1 | 	add	local10, objptr
03b68     01 00 00 FF 
03b6c     03 30 06 F6 | 	mov	local06, ##515
03b70     04 38 06 F1 | 	add	local10, #4
03b74     01 00 80 FF 
03b78     1C 07 68 FC | 	wrlong	##515, local10
03b7c     04 38 86 F1 | 	sub	local10, #4
03b80     37 29 02 F6 | 	mov	local02, local37
03b84     02 28 06 F1 | 	add	local02, #2
03b88     23 85 02 F6 | 	mov	local48, local17
03b8c     01 84 06 F1 | 	add	local48, #1
03b90     35 00 00 FF 
03b94     0C E4 85 F1 | 	sub	objptr, ##27148
03b98                 | LR__0190
03b98     42 29 52 F2 | 	cmps	local02, local48 wc
03b9c     6C 00 90 3D |  if_ae	jmp	#LR__0191
03ba0     14 39 02 F6 | 	mov	local10, local02
03ba4     03 38 66 F0 | 	shl	local10, #3
03ba8     35 00 00 FF 
03bac     0C E4 05 F1 | 	add	objptr, ##27148
03bb0     F2 38 02 F1 | 	add	local10, objptr
03bb4     1C 87 02 FB | 	rdlong	local49, local10
03bb8     37 39 02 F6 | 	mov	local10, local37
03bbc     01 38 06 F1 | 	add	local10, #1
03bc0     03 38 66 F0 | 	shl	local10, #3
03bc4     F2 2E 02 F6 | 	mov	local05, objptr
03bc8     F2 38 02 F1 | 	add	local10, objptr
03bcc     37 3B 02 F6 | 	mov	local11, local37
03bd0     01 3A 06 F1 | 	add	local11, #1
03bd4     1D 41 02 F6 | 	mov	local14, local11
03bd8     03 40 66 F0 | 	shl	local14, #3
03bdc     F2 3E 02 F6 | 	mov	local13, objptr
03be0     F2 40 02 F1 | 	add	local14, objptr
03be4     20 13 02 FB | 	rdlong	arg01, local14
03be8     43 3D 02 F6 | 	mov	local12, local49
03bec     1E 15 02 F6 | 	mov	arg02, local12
03bf0     35 00 00 FF 
03bf4     0C E4 85 F1 | 	sub	objptr, ##27148
03bf8     E8 1D B2 FD | 	call	#__system___string_concat
03bfc     FD 30 02 F6 | 	mov	local06, result1
03c00     1C 31 62 FC | 	wrlong	local06, local10
03c04     01 28 06 F1 | 	add	local02, #1
03c08     8C FF 9F FD | 	jmp	#LR__0190
03c0c                 | LR__0191
03c0c                 | LR__0192
03c0c                 | ' 
03c0c                 | ' ' determine a type of the line and compile it
03c0c                 | ' 
03c0c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03c0c     35 00 00 FF 
03c10     0C E4 05 F1 | 	add	objptr, ##27148
03c14     F2 12 02 FB | 	rdlong	arg01, objptr
03c18     35 00 00 FF 
03c1c     0C E4 85 F1 | 	sub	objptr, ##27148
03c20     08 2F B0 FD | 	call	#_isdec
03c24     00 FA 0D F2 | 	cmp	result1, #0 wz
03c28     30 00 90 AD |  if_e	jmp	#LR__0193
03c2c     35 00 00 FF 
03c30     0C E4 05 F1 | 	add	objptr, ##27148
03c34     F2 12 02 FB | 	rdlong	arg01, objptr
03c38     35 00 00 FF 
03c3c     0C E4 85 F1 | 	sub	objptr, ##27148
03c40     00 14 06 F6 | 	mov	arg02, #0
03c44     30 52 B2 FD | 	call	#__system____builtin_atoi
03c48     52 00 00 FF 
03c4c     5C E4 05 F1 | 	add	objptr, ##42076
03c50     F2 FA 61 FC | 	wrlong	result1, objptr
03c54     52 00 00 FF 
03c58     5C E4 85 F1 | 	sub	objptr, ##42076
03c5c                 | LR__0193
03c5c                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03c5c     52 00 00 FF 
03c60     5C E4 05 F1 | 	add	objptr, ##42076
03c64     F2 2C 02 FB | 	rdlong	local04, objptr
03c68     52 00 00 FF 
03c6c     5C E4 85 F1 | 	sub	objptr, ##42076
03c70     01 2C 16 F2 | 	cmp	local04, #1 wc
03c74     40 00 90 CD |  if_b	jmp	#LR__0194
03c78     01 46 0E F2 | 	cmp	local17, #1 wz
03c7c     37 00 00 AF 
03c80     24 E4 05 A1 |  if_e	add	objptr, ##28196
03c84     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03c88     37 00 00 AF 
03c8c     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03c90     17 39 02 A6 |  if_e	mov	local10, local05
03c94     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03c98     1C 00 90 5D |  if_ne	jmp	#LR__0194
03c9c     52 00 00 FF 
03ca0     5C E4 05 F1 | 	add	objptr, ##42076
03ca4     F2 12 02 FB | 	rdlong	arg01, objptr
03ca8     52 00 00 FF 
03cac     5C E4 85 F1 | 	sub	objptr, ##42076
03cb0     24 30 B0 FD | 	call	#_deleteline
03cb4     C8 03 90 FD | 	jmp	#LR__0205
03cb8                 | LR__0194
03cb8                 | ' 
03cb8                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03cb8     37 00 00 FF 
03cbc     24 E4 05 F1 | 	add	objptr, ##28196
03cc0     F2 2C 0A FB | 	rdlong	local04, objptr wz
03cc4     37 00 00 FF 
03cc8     24 E4 85 F1 | 	sub	objptr, ##28196
03ccc     20 00 90 AD |  if_e	jmp	#LR__0195
03cd0     37 00 00 FF 
03cd4     24 E4 05 F1 | 	add	objptr, ##28196
03cd8     F2 2E 02 FB | 	rdlong	local05, objptr
03cdc     37 00 00 FF 
03ce0     24 E4 85 F1 | 	sub	objptr, ##28196
03ce4     17 39 02 F6 | 	mov	local10, local05
03ce8     03 38 0E F2 | 	cmp	local10, #3 wz
03cec     C0 00 90 5D |  if_ne	jmp	#LR__0197
03cf0                 | LR__0195
03cf0     35 00 00 FF 
03cf4     20 E4 05 F1 | 	add	objptr, ##27168
03cf8     F2 3C 02 FB | 	rdlong	local12, objptr
03cfc     35 00 00 FF 
03d00     20 E4 85 F1 | 	sub	objptr, ##27168
03d04     1B 3C 0E F2 | 	cmp	local12, #27 wz
03d08     A4 00 90 AD |  if_e	jmp	#LR__0197
03d0c     52 00 00 FF 
03d10     5C E4 05 F1 | 	add	objptr, ##42076
03d14     F2 12 02 FB | 	rdlong	arg01, objptr
03d18     1B 00 00 FF 
03d1c     38 E4 85 F1 | 	sub	objptr, ##13880
03d20     F2 16 02 FB | 	rdlong	arg03, objptr
03d24     37 00 00 FF 
03d28     24 E4 85 F1 | 	sub	objptr, ##28196
03d2c     00 14 06 F6 | 	mov	arg02, #0
03d30     F4 43 B0 FD | 	call	#_compile
03d34     FD 26 0A F6 | 	mov	local01, result1 wz
03d38                 | '   err=compile(linenum,0,cont) 
03d38                 | '   if err<>0 then printerror(err,linenum): goto 101
03d38     20 00 90 AD |  if_e	jmp	#LR__0196
03d3c     52 00 00 FF 
03d40     5C E4 05 F1 | 	add	objptr, ##42076
03d44     F2 14 02 FB | 	rdlong	arg02, objptr
03d48     52 00 00 FF 
03d4c     5C E4 85 F1 | 	sub	objptr, ##42076
03d50     13 13 02 F6 | 	mov	arg01, local01
03d54     44 E2 B1 FD | 	call	#_printerror
03d58     44 03 90 FD | 	jmp	#LR__0206
03d5c                 | LR__0196
03d5c                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03d5c     52 00 00 FF 
03d60     A0 E4 05 F1 | 	add	objptr, ##42144
03d64     F2 12 02 FB | 	rdlong	arg01, objptr
03d68     52 00 00 FF 
03d6c     A0 E4 85 F1 | 	sub	objptr, ##42144
03d70     AB 01 00 FF 
03d74     0D 14 06 F6 | 	mov	arg02, ##@LR__5465
03d78     34 1C B2 FD | 	call	#__system___string_cmp
03d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d80     FC 02 90 AD |  if_e	jmp	#LR__0205
03d84     52 00 00 FF 
03d88     A0 E4 05 F1 | 	add	objptr, ##42144
03d8c     F2 2C 02 FB | 	rdlong	local04, objptr
03d90     1B 00 00 FF 
03d94     84 E4 85 F1 | 	sub	objptr, ##13956
03d98     F2 2C 62 FC | 	wrlong	local04, objptr
03d9c     08 E4 05 F1 | 	add	objptr, #8
03da0     F2 08 68 FC | 	wrlong	#4, objptr
03da4     37 00 00 FF 
03da8     24 E4 85 F1 | 	sub	objptr, ##28196
03dac     78 DA 9F FD | 	jmp	#LR__0070
03db0                 | LR__0197
03db0                 | '       							
03db0                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03db0     37 00 00 FF 
03db4     24 E4 05 F1 | 	add	objptr, ##28196
03db8     F2 2C 02 FB | 	rdlong	local04, objptr
03dbc     37 00 00 FF 
03dc0     24 E4 85 F1 | 	sub	objptr, ##28196
03dc4     01 2C 0E F2 | 	cmp	local04, #1 wz
03dc8     37 00 00 5F 
03dcc     24 E4 05 51 |  if_ne	add	objptr, ##28196
03dd0     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03dd4     37 00 00 5F 
03dd8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03ddc     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03de0     C0 00 90 5D |  if_ne	jmp	#LR__0199
03de4     35 00 00 FF 
03de8     18 E4 05 F1 | 	add	objptr, ##27160
03dec     F2 3C 02 FB | 	rdlong	local12, objptr
03df0     35 00 00 FF 
03df4     18 E4 85 F1 | 	sub	objptr, ##27160
03df8     1B 3C 0E F2 | 	cmp	local12, #27 wz
03dfc     A4 00 90 AD |  if_e	jmp	#LR__0199
03e00     52 00 00 FF 
03e04     5C E4 05 F1 | 	add	objptr, ##42076
03e08     F2 12 02 FB | 	rdlong	arg01, objptr
03e0c     1B 00 00 FF 
03e10     38 E4 85 F1 | 	sub	objptr, ##13880
03e14     F2 16 02 FB | 	rdlong	arg03, objptr
03e18     37 00 00 FF 
03e1c     24 E4 85 F1 | 	sub	objptr, ##28196
03e20     00 14 06 F6 | 	mov	arg02, #0
03e24     00 43 B0 FD | 	call	#_compile
03e28     FD 26 0A F6 | 	mov	local01, result1 wz
03e2c                 | '   err=compile(linenum,0,cont) 
03e2c                 | '   if err<>0 then printerror(err,linenum): goto 101
03e2c     20 00 90 AD |  if_e	jmp	#LR__0198
03e30     52 00 00 FF 
03e34     5C E4 05 F1 | 	add	objptr, ##42076
03e38     F2 14 02 FB | 	rdlong	arg02, objptr
03e3c     52 00 00 FF 
03e40     5C E4 85 F1 | 	sub	objptr, ##42076
03e44     13 13 02 F6 | 	mov	arg01, local01
03e48     50 E1 B1 FD | 	call	#_printerror
03e4c     50 02 90 FD | 	jmp	#LR__0206
03e50                 | LR__0198
03e50                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03e50     52 00 00 FF 
03e54     A0 E4 05 F1 | 	add	objptr, ##42144
03e58     F2 12 02 FB | 	rdlong	arg01, objptr
03e5c     52 00 00 FF 
03e60     A0 E4 85 F1 | 	sub	objptr, ##42144
03e64     AB 01 00 FF 
03e68     0E 14 06 F6 | 	mov	arg02, ##@LR__5466
03e6c     40 1B B2 FD | 	call	#__system___string_cmp
03e70     00 FA 0D F2 | 	cmp	result1, #0 wz
03e74     08 02 90 AD |  if_e	jmp	#LR__0205
03e78     52 00 00 FF 
03e7c     A0 E4 05 F1 | 	add	objptr, ##42144
03e80     F2 2C 02 FB | 	rdlong	local04, objptr
03e84     1B 00 00 FF 
03e88     84 E4 85 F1 | 	sub	objptr, ##13956
03e8c     F2 2C 62 FC | 	wrlong	local04, objptr
03e90     08 E4 05 F1 | 	add	objptr, #8
03e94     F2 08 68 FC | 	wrlong	#4, objptr
03e98     37 00 00 FF 
03e9c     24 E4 85 F1 | 	sub	objptr, ##28196
03ea0     84 D9 9F FD | 	jmp	#LR__0070
03ea4                 | LR__0199
03ea4                 | ' 							 
03ea4                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03ea4     37 00 00 FF 
03ea8     24 E4 05 F1 | 	add	objptr, ##28196
03eac     F2 2C 0A FB | 	rdlong	local04, objptr wz
03eb0     37 00 00 FF 
03eb4     24 E4 85 F1 | 	sub	objptr, ##28196
03eb8     37 00 00 5F 
03ebc     24 E4 05 51 |  if_ne	add	objptr, ##28196
03ec0     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03ec4     37 00 00 5F 
03ec8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03ecc     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
03ed0     35 00 00 AF 
03ed4     20 E4 05 A1 |  if_e	add	objptr, ##27168
03ed8     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03edc     35 00 00 AF 
03ee0     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03ee4     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03ee8     A4 00 90 5D |  if_ne	jmp	#LR__0201
03eec     52 00 00 FF 
03ef0     5C E4 05 F1 | 	add	objptr, ##42076
03ef4     F2 12 02 FB | 	rdlong	arg01, objptr
03ef8     1B 00 00 FF 
03efc     38 E4 85 F1 | 	sub	objptr, ##13880
03f00     F2 16 02 FB | 	rdlong	arg03, objptr
03f04     37 00 00 FF 
03f08     24 E4 85 F1 | 	sub	objptr, ##28196
03f0c     00 14 06 F6 | 	mov	arg02, #0
03f10     DC 42 B0 FD | 	call	#_compile_assign
03f14     FD 26 0A F6 | 	mov	local01, result1 wz
03f18                 | '   err=compile_assign(linenum,0,cont)
03f18                 | '   if err<>0 then printerror(err,linenum): goto 101
03f18     20 00 90 AD |  if_e	jmp	#LR__0200
03f1c     52 00 00 FF 
03f20     5C E4 05 F1 | 	add	objptr, ##42076
03f24     F2 14 02 FB | 	rdlong	arg02, objptr
03f28     52 00 00 FF 
03f2c     5C E4 85 F1 | 	sub	objptr, ##42076
03f30     13 13 02 F6 | 	mov	arg01, local01
03f34     64 E0 B1 FD | 	call	#_printerror
03f38     64 01 90 FD | 	jmp	#LR__0206
03f3c                 | LR__0200
03f3c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03f3c     52 00 00 FF 
03f40     A0 E4 05 F1 | 	add	objptr, ##42144
03f44     F2 12 02 FB | 	rdlong	arg01, objptr
03f48     52 00 00 FF 
03f4c     A0 E4 85 F1 | 	sub	objptr, ##42144
03f50     AB 01 00 FF 
03f54     0F 14 06 F6 | 	mov	arg02, ##@LR__5467
03f58     54 1A B2 FD | 	call	#__system___string_cmp
03f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f60     1C 01 90 AD |  if_e	jmp	#LR__0205
03f64     52 00 00 FF 
03f68     A0 E4 05 F1 | 	add	objptr, ##42144
03f6c     F2 2C 02 FB | 	rdlong	local04, objptr
03f70     1B 00 00 FF 
03f74     84 E4 85 F1 | 	sub	objptr, ##13956
03f78     F2 2C 62 FC | 	wrlong	local04, objptr
03f7c     08 E4 05 F1 | 	add	objptr, #8
03f80     F2 08 68 FC | 	wrlong	#4, objptr
03f84     37 00 00 FF 
03f88     24 E4 85 F1 | 	sub	objptr, ##28196
03f8c     98 D8 9F FD | 	jmp	#LR__0070
03f90                 | LR__0201
03f90                 | '     							 
03f90                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03f90     37 00 00 FF 
03f94     24 E4 05 F1 | 	add	objptr, ##28196
03f98     F2 2C 02 FB | 	rdlong	local04, objptr
03f9c     37 00 00 FF 
03fa0     24 E4 85 F1 | 	sub	objptr, ##28196
03fa4     01 2C 0E F2 | 	cmp	local04, #1 wz
03fa8     37 00 00 5F 
03fac     24 E4 05 51 |  if_ne	add	objptr, ##28196
03fb0     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03fb4     37 00 00 5F 
03fb8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03fbc     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03fc0     35 00 00 AF 
03fc4     18 E4 05 A1 |  if_e	add	objptr, ##27160
03fc8     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03fcc     35 00 00 AF 
03fd0     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03fd4     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03fd8     A4 00 90 5D |  if_ne	jmp	#LR__0204
03fdc     52 00 00 FF 
03fe0     5C E4 05 F1 | 	add	objptr, ##42076
03fe4     F2 12 02 FB | 	rdlong	arg01, objptr
03fe8     1B 00 00 FF 
03fec     38 E4 85 F1 | 	sub	objptr, ##13880
03ff0     F2 16 02 FB | 	rdlong	arg03, objptr
03ff4     37 00 00 FF 
03ff8     24 E4 85 F1 | 	sub	objptr, ##28196
03ffc     00 14 06 F6 | 	mov	arg02, #0
04000     EC 41 B0 FD | 	call	#_compile_assign
04004     FD 26 0A F6 | 	mov	local01, result1 wz
04008                 | '   err=compile_assign(linenum,0,cont) 
04008                 | '   if err<>0 then printerror(err,linenum): goto 101
04008     20 00 90 AD |  if_e	jmp	#LR__0202
0400c     52 00 00 FF 
04010     5C E4 05 F1 | 	add	objptr, ##42076
04014     F2 14 02 FB | 	rdlong	arg02, objptr
04018     52 00 00 FF 
0401c     5C E4 85 F1 | 	sub	objptr, ##42076
04020     13 13 02 F6 | 	mov	arg01, local01
04024     74 DF B1 FD | 	call	#_printerror
04028     74 00 90 FD | 	jmp	#LR__0206
0402c                 | LR__0202
0402c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
0402c     52 00 00 FF 
04030     A0 E4 05 F1 | 	add	objptr, ##42144
04034     F2 12 02 FB | 	rdlong	arg01, objptr
04038     52 00 00 FF 
0403c     A0 E4 85 F1 | 	sub	objptr, ##42144
04040     AB 01 00 FF 
04044     10 14 06 F6 | 	mov	arg02, ##@LR__5468
04048     64 19 B2 FD | 	call	#__system___string_cmp
0404c     00 FA 4D F2 | 	cmps	result1, #0 wz
04050     2C 00 90 AD |  if_e	jmp	#LR__0203
04054     52 00 00 FF 
04058     A0 E4 05 F1 | 	add	objptr, ##42144
0405c     F2 2C 02 FB | 	rdlong	local04, objptr
04060     1B 00 00 FF 
04064     84 E4 85 F1 | 	sub	objptr, ##13956
04068     F2 2C 62 FC | 	wrlong	local04, objptr
0406c     08 E4 05 F1 | 	add	objptr, #8
04070     F2 08 68 FC | 	wrlong	#4, objptr
04074     37 00 00 FF 
04078     24 E4 85 F1 | 	sub	objptr, ##28196
0407c     A8 D7 9F FD | 	jmp	#LR__0070
04080                 | LR__0203
04080                 | LR__0204
04080                 | LR__0205
04080                 | ' 
04080                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
04080     52 00 00 FF 
04084     5C E4 05 F1 | 	add	objptr, ##42076
04088     F2 2C 0A FB | 	rdlong	local04, objptr wz
0408c     52 00 00 FF 
04090     5C E4 85 F1 | 	sub	objptr, ##42076
04094     B0 00 90 5D |  if_ne	jmp	#LR__0209
04098     02 12 06 F6 | 	mov	arg01, #2
0409c     DC 8A B0 FD | 	call	#_execute_line
040a0                 | LR__0206
040a0                 | '   execute_line(2)
040a0                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
040a0     52 00 00 FF 
040a4     80 E4 05 F1 | 	add	objptr, ##42112
040a8     F2 2C 0A FB | 	rdlong	local04, objptr wz
040ac     52 00 00 FF 
040b0     80 E4 85 F1 | 	sub	objptr, ##42112
040b4     20 00 90 5D |  if_ne	jmp	#LR__0207
040b8     AB 01 00 FF 
040bc     11 12 06 F6 | 	mov	arg01, ##@LR__5469
040c0                 | ' 
040c0                 | ' write(text)
040c0     00 00 B2 FD | 	call	#_hg010b_spin2_write
040c4                 | ' crlf
040c4     FC 04 B2 FD | 	call	#_hg010b_spin2_crlf
040c8     AB 01 00 FF 
040cc     12 12 06 F6 | 	mov	arg01, ##@LR__5470
040d0                 | ' 
040d0                 | ' write(text)
040d0     F0 FF B1 FD | 	call	#_hg010b_spin2_write
040d4                 | ' crlf
040d4     EC 04 B2 FD | 	call	#_hg010b_spin2_crlf
040d8                 | LR__0207
040d8                 | '     if inload=1 andalso err>0 then print fullline$
040d8     52 00 00 FF 
040dc     80 E4 05 F1 | 	add	objptr, ##42112
040e0     F2 2C 02 FB | 	rdlong	local04, objptr
040e4     52 00 00 FF 
040e8     80 E4 85 F1 | 	sub	objptr, ##42112
040ec     01 2C 0E F2 | 	cmp	local04, #1 wz
040f0     54 00 90 5D |  if_ne	jmp	#LR__0208
040f4     01 26 56 F2 | 	cmps	local01, #1 wc
040f8     4C 00 90 CD |  if_b	jmp	#LR__0208
040fc     00 12 06 F6 | 	mov	arg01, #0
04100     AC 75 B2 FD | 	call	#__system___getiolock_0599
04104     FD 12 02 F6 | 	mov	arg01, result1
04108     7C 18 B2 FD | 	call	#__system___lockmem
0410c     37 00 00 FF 
04110     20 E4 05 F1 | 	add	objptr, ##28192
04114     F2 14 02 FB | 	rdlong	arg02, objptr
04118     37 00 00 FF 
0411c     20 E4 85 F1 | 	sub	objptr, ##28192
04120     00 12 06 F6 | 	mov	arg01, #0
04124     00 16 06 F6 | 	mov	arg03, #0
04128     50 25 B2 FD | 	call	#__system___basic_print_string
0412c     00 12 06 F6 | 	mov	arg01, #0
04130     0A 14 06 F6 | 	mov	arg02, #10
04134     00 16 06 F6 | 	mov	arg03, #0
04138     E8 24 B2 FD | 	call	#__system___basic_print_char
0413c     00 12 06 F6 | 	mov	arg01, #0
04140     6C 75 B2 FD | 	call	#__system___getiolock_0599
04144     FD 00 68 FC | 	wrlong	#0, result1
04148                 | LR__0208
04148                 | LR__0209
04148     A7 F0 03 F6 | 	mov	ptra, fp
0414c     B2 00 A0 FD | 	call	#popregs_
04150                 | _interpret_ret
04150     2D 00 64 FD | 	ret
04154                 | 
04154                 | ' 
04154                 | ' '---------------------------------------------------------------------------------------------------------------------
04154                 | ' '
04154                 | ' '                          END OF TOKENIZER MAIN CODE
04154                 | ' '
04154                 | ' '---------------------------------------------------------------------------------------------------------------------
04154                 | ' 
04154                 | ' '---------------------------------------------------------------------------------------------------------------------
04154                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
04154                 | ' '---------------------------------------------------------------------------------------------------------------------
04154                 | ' 
04154                 | ' ' Check if the part is an operator, return a token or 0 if not found
04154                 | ' 
04154                 | ' function isoperator(s as string) as ubyte
04154                 | _isoperator
04154     01 4A 05 F6 | 	mov	COUNT_, #1
04158     A8 00 A0 FD | 	call	#pushregs_
0415c                 | ' 
0415c                 | ' select case s
0415c     09 27 02 F6 | 	mov	local01, arg01
04160     AB 01 00 FF 
04164     18 14 06 F6 | 	mov	arg02, ##@LR__5471
04168     13 13 02 F6 | 	mov	arg01, local01
0416c     40 18 B2 FD | 	call	#__system___string_cmp
04170     00 FA 0D F2 | 	cmp	result1, #0 wz
04174     FC 01 90 AD |  if_e	jmp	#LR__0210
04178     AB 01 00 FF 
0417c     1A 14 06 F6 | 	mov	arg02, ##@LR__5472
04180     13 13 02 F6 | 	mov	arg01, local01
04184     28 18 B2 FD | 	call	#__system___string_cmp
04188     00 FA 0D F2 | 	cmp	result1, #0 wz
0418c     EC 01 90 AD |  if_e	jmp	#LR__0211
04190     AB 01 00 FF 
04194     1C 14 06 F6 | 	mov	arg02, ##@LR__5473
04198     13 13 02 F6 | 	mov	arg01, local01
0419c     10 18 B2 FD | 	call	#__system___string_cmp
041a0     00 FA 0D F2 | 	cmp	result1, #0 wz
041a4     DC 01 90 AD |  if_e	jmp	#LR__0212
041a8     AB 01 00 FF 
041ac     1F 14 06 F6 | 	mov	arg02, ##@LR__5474
041b0     13 13 02 F6 | 	mov	arg01, local01
041b4     F8 17 B2 FD | 	call	#__system___string_cmp
041b8     00 FA 0D F2 | 	cmp	result1, #0 wz
041bc     CC 01 90 AD |  if_e	jmp	#LR__0213
041c0     AB 01 00 FF 
041c4     23 14 06 F6 | 	mov	arg02, ##@LR__5475
041c8     13 13 02 F6 | 	mov	arg01, local01
041cc     E0 17 B2 FD | 	call	#__system___string_cmp
041d0     00 FA 0D F2 | 	cmp	result1, #0 wz
041d4     BC 01 90 AD |  if_e	jmp	#LR__0214
041d8     AB 01 00 FF 
041dc     25 14 06 F6 | 	mov	arg02, ##@LR__5476
041e0     13 13 02 F6 | 	mov	arg01, local01
041e4     C8 17 B2 FD | 	call	#__system___string_cmp
041e8     00 FA 0D F2 | 	cmp	result1, #0 wz
041ec     AC 01 90 AD |  if_e	jmp	#LR__0215
041f0     AB 01 00 FF 
041f4     27 14 06 F6 | 	mov	arg02, ##@LR__5477
041f8     13 13 02 F6 | 	mov	arg01, local01
041fc     B0 17 B2 FD | 	call	#__system___string_cmp
04200     00 FA 0D F2 | 	cmp	result1, #0 wz
04204     9C 01 90 AD |  if_e	jmp	#LR__0216
04208     AB 01 00 FF 
0420c     2B 14 06 F6 | 	mov	arg02, ##@LR__5478
04210     13 13 02 F6 | 	mov	arg01, local01
04214     98 17 B2 FD | 	call	#__system___string_cmp
04218     00 FA 0D F2 | 	cmp	result1, #0 wz
0421c     8C 01 90 AD |  if_e	jmp	#LR__0217
04220     AB 01 00 FF 
04224     2F 14 06 F6 | 	mov	arg02, ##@LR__5479
04228     13 13 02 F6 | 	mov	arg01, local01
0422c     80 17 B2 FD | 	call	#__system___string_cmp
04230     00 FA 0D F2 | 	cmp	result1, #0 wz
04234     7C 01 90 AD |  if_e	jmp	#LR__0218
04238     AB 01 00 FF 
0423c     33 14 06 F6 | 	mov	arg02, ##@LR__5480
04240     13 13 02 F6 | 	mov	arg01, local01
04244     68 17 B2 FD | 	call	#__system___string_cmp
04248     00 FA 0D F2 | 	cmp	result1, #0 wz
0424c     6C 01 90 AD |  if_e	jmp	#LR__0219
04250     AB 01 00 FF 
04254     37 14 06 F6 | 	mov	arg02, ##@LR__5481
04258     13 13 02 F6 | 	mov	arg01, local01
0425c     50 17 B2 FD | 	call	#__system___string_cmp
04260     00 FA 0D F2 | 	cmp	result1, #0 wz
04264     5C 01 90 AD |  if_e	jmp	#LR__0220
04268     AB 01 00 FF 
0426c     3B 14 06 F6 | 	mov	arg02, ##@LR__5482
04270     13 13 02 F6 | 	mov	arg01, local01
04274     38 17 B2 FD | 	call	#__system___string_cmp
04278     00 FA 0D F2 | 	cmp	result1, #0 wz
0427c     4C 01 90 AD |  if_e	jmp	#LR__0221
04280     AB 01 00 FF 
04284     3D 14 06 F6 | 	mov	arg02, ##@LR__5483
04288     13 13 02 F6 | 	mov	arg01, local01
0428c     20 17 B2 FD | 	call	#__system___string_cmp
04290     00 FA 0D F2 | 	cmp	result1, #0 wz
04294     3C 01 90 AD |  if_e	jmp	#LR__0222
04298     AB 01 00 FF 
0429c     41 14 06 F6 | 	mov	arg02, ##@LR__5484
042a0     13 13 02 F6 | 	mov	arg01, local01
042a4     08 17 B2 FD | 	call	#__system___string_cmp
042a8     00 FA 0D F2 | 	cmp	result1, #0 wz
042ac     2C 01 90 AD |  if_e	jmp	#LR__0223
042b0     AB 01 00 FF 
042b4     43 14 06 F6 | 	mov	arg02, ##@LR__5485
042b8     13 13 02 F6 | 	mov	arg01, local01
042bc     F0 16 B2 FD | 	call	#__system___string_cmp
042c0     00 FA 0D F2 | 	cmp	result1, #0 wz
042c4     1C 01 90 AD |  if_e	jmp	#LR__0224
042c8     AB 01 00 FF 
042cc     45 14 06 F6 | 	mov	arg02, ##@LR__5486
042d0     13 13 02 F6 | 	mov	arg01, local01
042d4     D8 16 B2 FD | 	call	#__system___string_cmp
042d8     00 FA 0D F2 | 	cmp	result1, #0 wz
042dc     0C 01 90 AD |  if_e	jmp	#LR__0225
042e0     AB 01 00 FF 
042e4     48 14 06 F6 | 	mov	arg02, ##@LR__5487
042e8     13 13 02 F6 | 	mov	arg01, local01
042ec     C0 16 B2 FD | 	call	#__system___string_cmp
042f0     00 FA 0D F2 | 	cmp	result1, #0 wz
042f4     FC 00 90 AD |  if_e	jmp	#LR__0226
042f8     AB 01 00 FF 
042fc     4B 14 06 F6 | 	mov	arg02, ##@LR__5488
04300     13 13 02 F6 | 	mov	arg01, local01
04304     A8 16 B2 FD | 	call	#__system___string_cmp
04308     00 FA 0D F2 | 	cmp	result1, #0 wz
0430c     EC 00 90 AD |  if_e	jmp	#LR__0227
04310     AB 01 00 FF 
04314     4D 14 06 F6 | 	mov	arg02, ##@LR__5489
04318     13 13 02 F6 | 	mov	arg01, local01
0431c     90 16 B2 FD | 	call	#__system___string_cmp
04320     00 FA 0D F2 | 	cmp	result1, #0 wz
04324     DC 00 90 AD |  if_e	jmp	#LR__0228
04328     AB 01 00 FF 
0432c     4F 14 06 F6 | 	mov	arg02, ##@LR__5490
04330     13 13 02 F6 | 	mov	arg01, local01
04334     78 16 B2 FD | 	call	#__system___string_cmp
04338     00 FA 0D F2 | 	cmp	result1, #0 wz
0433c     CC 00 90 AD |  if_e	jmp	#LR__0229
04340     AB 01 00 FF 
04344     52 14 06 F6 | 	mov	arg02, ##@LR__5491
04348     13 13 02 F6 | 	mov	arg01, local01
0434c     60 16 B2 FD | 	call	#__system___string_cmp
04350     00 FA 0D F2 | 	cmp	result1, #0 wz
04354     BC 00 90 AD |  if_e	jmp	#LR__0230
04358     AB 01 00 FF 
0435c     55 14 06 F6 | 	mov	arg02, ##@LR__5492
04360     13 13 02 F6 | 	mov	arg01, local01
04364     48 16 B2 FD | 	call	#__system___string_cmp
04368     00 FA 0D F2 | 	cmp	result1, #0 wz
0436c     AC 00 90 AD |  if_e	jmp	#LR__0231
04370     B0 00 90 FD | 	jmp	#LR__0232
04374                 | LR__0210
04374     01 FA 05 F6 | 	mov	result1, #1
04378     AC 00 90 FD | 	jmp	#LR__0233
0437c                 | LR__0211
0437c     02 FA 05 F6 | 	mov	result1, #2
04380     A4 00 90 FD | 	jmp	#LR__0233
04384                 | LR__0212
04384     03 FA 05 F6 | 	mov	result1, #3
04388     9C 00 90 FD | 	jmp	#LR__0233
0438c                 | LR__0213
0438c     04 FA 05 F6 | 	mov	result1, #4
04390     94 00 90 FD | 	jmp	#LR__0233
04394                 | LR__0214
04394     05 FA 05 F6 | 	mov	result1, #5
04398     8C 00 90 FD | 	jmp	#LR__0233
0439c                 | LR__0215
0439c     06 FA 05 F6 | 	mov	result1, #6
043a0     84 00 90 FD | 	jmp	#LR__0233
043a4                 | LR__0216
043a4     07 FA 05 F6 | 	mov	result1, #7
043a8     7C 00 90 FD | 	jmp	#LR__0233
043ac                 | LR__0217
043ac     08 FA 05 F6 | 	mov	result1, #8
043b0     74 00 90 FD | 	jmp	#LR__0233
043b4                 | LR__0218
043b4     09 FA 05 F6 | 	mov	result1, #9
043b8     6C 00 90 FD | 	jmp	#LR__0233
043bc                 | LR__0219
043bc     0A FA 05 F6 | 	mov	result1, #10
043c0     64 00 90 FD | 	jmp	#LR__0233
043c4                 | LR__0220
043c4     0B FA 05 F6 | 	mov	result1, #11
043c8     5C 00 90 FD | 	jmp	#LR__0233
043cc                 | LR__0221
043cc     0C FA 05 F6 | 	mov	result1, #12
043d0     54 00 90 FD | 	jmp	#LR__0233
043d4                 | LR__0222
043d4     0D FA 05 F6 | 	mov	result1, #13
043d8     4C 00 90 FD | 	jmp	#LR__0233
043dc                 | LR__0223
043dc     0E FA 05 F6 | 	mov	result1, #14
043e0     44 00 90 FD | 	jmp	#LR__0233
043e4                 | LR__0224
043e4     1B FA 05 F6 | 	mov	result1, #27
043e8     3C 00 90 FD | 	jmp	#LR__0233
043ec                 | LR__0225
043ec     27 FA 05 F6 | 	mov	result1, #39
043f0     34 00 90 FD | 	jmp	#LR__0233
043f4                 | LR__0226
043f4     26 FA 05 F6 | 	mov	result1, #38
043f8     2C 00 90 FD | 	jmp	#LR__0233
043fc                 | LR__0227
043fc     10 FA 05 F6 | 	mov	result1, #16
04400     24 00 90 FD | 	jmp	#LR__0233
04404                 | LR__0228
04404     0F FA 05 F6 | 	mov	result1, #15
04408     1C 00 90 FD | 	jmp	#LR__0233
0440c                 | LR__0229
0440c     2A FA 05 F6 | 	mov	result1, #42
04410     14 00 90 FD | 	jmp	#LR__0233
04414                 | LR__0230
04414     28 FA 05 F6 | 	mov	result1, #40
04418     0C 00 90 FD | 	jmp	#LR__0233
0441c                 | LR__0231
0441c     29 FA 05 F6 | 	mov	result1, #41
04420     04 00 90 FD | 	jmp	#LR__0233
04424                 | LR__0232
04424     00 FA 05 F6 | 	mov	result1, #0
04428                 | LR__0233
04428     A7 F0 03 F6 | 	mov	ptra, fp
0442c     B2 00 A0 FD | 	call	#popregs_
04430                 | _isoperator_ret
04430     2D 00 64 FD | 	ret
04434                 | 
04434                 | ' 
04434                 | ' ' Check if the part is a channel#, return a token or 0 if not found
04434                 | ' 
04434                 | ' function ischannel(s as string) as ulong
04434                 | _ischannel
04434     02 4A 05 F6 | 	mov	COUNT_, #2
04438     A8 00 A0 FD | 	call	#pushregs_
0443c                 | ' if left$(s,1)<>"#" then return 0
0443c     09 27 02 F6 | 	mov	local01, arg01
04440     01 14 06 F6 | 	mov	arg02, #1
04444     BC 35 B2 FD | 	call	#__system__Left_S
04448     FD 12 02 F6 | 	mov	arg01, result1
0444c     AB 01 00 FF 
04450     58 14 06 F6 | 	mov	arg02, ##@LR__5493
04454     58 15 B2 FD | 	call	#__system___string_cmp
04458     00 FA 0D F2 | 	cmp	result1, #0 wz
0445c     00 FA 05 56 |  if_ne	mov	result1, #0
04460     AC 00 90 5D |  if_ne	jmp	#LR__0244
04464                 | ' if len(s)<>2 then return 0
04464     13 13 02 F6 | 	mov	arg01, local01
04468     09 29 02 F6 | 	mov	local02, arg01
0446c     97 06 48 FB | 	callpa	#(@LR__0241-@LR__0240)>>2,fcache_load_ptr_
04470                 | LR__0240
04470     14 FB C9 FA | 	rdbyte	result1, local02 wz
04474     01 28 06 51 |  if_ne	add	local02, #1
04478     F4 FF 9F 5D |  if_ne	jmp	#LR__0240
0447c                 | LR__0241
0447c     09 29 82 F1 | 	sub	local02, arg01
04480     14 FB 01 F6 | 	mov	result1, local02
04484     02 FA 0D F2 | 	cmp	result1, #2 wz
04488     00 FA 05 56 |  if_ne	mov	result1, #0
0448c     80 00 90 5D |  if_ne	jmp	#LR__0244
04490                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04490     13 13 02 F6 | 	mov	arg01, local01
04494     01 14 06 F6 | 	mov	arg02, #1
04498     F0 35 B2 FD | 	call	#__system__Right_S
0449c     FD 12 02 F6 | 	mov	arg01, result1
044a0     AB 01 00 FF 
044a4     5A 14 06 F6 | 	mov	arg02, ##@LR__5494
044a8     04 15 B2 FD | 	call	#__system___string_cmp
044ac     00 FA 55 F2 | 	cmps	result1, #0 wc
044b0     24 00 90 CD |  if_b	jmp	#LR__0242
044b4     13 13 02 F6 | 	mov	arg01, local01
044b8     01 14 06 F6 | 	mov	arg02, #1
044bc     CC 35 B2 FD | 	call	#__system__Right_S
044c0     FD 12 02 F6 | 	mov	arg01, result1
044c4     AB 01 00 FF 
044c8     5C 14 06 F6 | 	mov	arg02, ##@LR__5495
044cc     E0 14 B2 FD | 	call	#__system___string_cmp
044d0     01 FA 55 F2 | 	cmps	result1, #1 wc
044d4     08 00 90 CD |  if_b	jmp	#LR__0243
044d8                 | LR__0242
044d8     00 FA 05 F6 | 	mov	result1, #0
044dc     30 00 90 FD | 	jmp	#LR__0244
044e0                 | LR__0243
044e0                 | ' return token_channel+val(right$(s,1))
044e0     13 13 02 F6 | 	mov	arg01, local01
044e4     01 14 06 F6 | 	mov	arg02, #1
044e8     A0 35 B2 FD | 	call	#__system__Right_S
044ec     FD 12 02 F6 | 	mov	arg01, result1
044f0     18 4B B2 FD | 	call	#__system____builtin_atof
044f4     FD 14 02 F6 | 	mov	arg02, result1
044f8     00 18 21 FF 
044fc     00 12 06 F6 | 	mov	arg01, ##1110441984
04500     2C 3F B2 FD | 	call	#__system___float_add
04504     FD 12 02 F6 | 	mov	arg01, result1
04508     00 14 06 F6 | 	mov	arg02, #0
0450c     B8 47 B2 FD | 	call	#__system___float_tointeger
04510                 | LR__0244
04510     A7 F0 03 F6 | 	mov	ptra, fp
04514     B2 00 A0 FD | 	call	#popregs_
04518                 | _ischannel_ret
04518     2D 00 64 FD | 	ret
0451c                 | 
0451c                 | ' 
0451c                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
0451c                 | ' ' todo: add spin2/pasm constants for pin control
0451c                 | ' 
0451c                 | ' function isconstant(s as string) as integer
0451c                 | _isconstant
0451c     01 4A 05 F6 | 	mov	COUNT_, #1
04520     A8 00 A0 FD | 	call	#pushregs_
04524                 | ' 
04524                 | ' select case s
04524     09 27 02 F6 | 	mov	local01, arg01
04528     AB 01 00 FF 
0452c     5E 14 06 F6 | 	mov	arg02, ##@LR__5496
04530     13 13 02 F6 | 	mov	arg01, local01
04534     78 14 B2 FD | 	call	#__system___string_cmp
04538     00 FA 0D F2 | 	cmp	result1, #0 wz
0453c     34 00 90 AD |  if_e	jmp	#LR__0250
04540     AB 01 00 FF 
04544     64 14 06 F6 | 	mov	arg02, ##@LR__5497
04548     13 13 02 F6 | 	mov	arg01, local01
0454c     60 14 B2 FD | 	call	#__system___string_cmp
04550     00 FA 0D F2 | 	cmp	result1, #0 wz
04554     24 00 90 AD |  if_e	jmp	#LR__0251
04558     AB 01 00 FF 
0455c     6B 14 06 F6 | 	mov	arg02, ##@LR__5498
04560     13 13 02 F6 | 	mov	arg01, local01
04564     48 14 B2 FD | 	call	#__system___string_cmp
04568     00 FA 0D F2 | 	cmp	result1, #0 wz
0456c     14 00 90 AD |  if_e	jmp	#LR__0252
04570     18 00 90 FD | 	jmp	#LR__0253
04574                 | LR__0250
04574     01 FA 05 F6 | 	mov	result1, #1
04578     14 00 90 FD | 	jmp	#LR__0254
0457c                 | LR__0251
0457c     02 FA 05 F6 | 	mov	result1, #2
04580     0C 00 90 FD | 	jmp	#LR__0254
04584                 | LR__0252
04584     04 FA 05 F6 | 	mov	result1, #4
04588     04 00 90 FD | 	jmp	#LR__0254
0458c                 | LR__0253
0458c     00 FA 05 F6 | 	mov	result1, #0
04590                 | LR__0254
04590     A7 F0 03 F6 | 	mov	ptra, fp
04594     B2 00 A0 FD | 	call	#popregs_
04598                 | _isconstant_ret
04598     2D 00 64 FD | 	ret
0459c                 | 
0459c                 | ' 
0459c                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
0459c                 | ' 
0459c                 | ' function isnotename(s as string) as ulong
0459c                 | _isnotename
0459c     07 4A 05 F6 | 	mov	COUNT_, #7
045a0     A8 00 A0 FD | 	call	#pushregs_
045a4                 | ' if left$(s,1)<>"#" then return 0
045a4     09 27 02 F6 | 	mov	local01, arg01
045a8     01 14 06 F6 | 	mov	arg02, #1
045ac     54 34 B2 FD | 	call	#__system__Left_S
045b0     FD 12 02 F6 | 	mov	arg01, result1
045b4     AB 01 00 FF 
045b8     73 14 06 F6 | 	mov	arg02, ##@LR__5499
045bc     F0 13 B2 FD | 	call	#__system___string_cmp
045c0     00 FA 0D F2 | 	cmp	result1, #0 wz
045c4     00 FA 05 56 |  if_ne	mov	result1, #0
045c8     30 03 90 5D |  if_ne	jmp	#LR__0283
045cc                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
045cc     13 13 02 F6 | 	mov	arg01, local01
045d0     03 14 06 F6 | 	mov	arg02, #3
045d4     01 16 06 F6 | 	mov	arg03, #1
045d8     40 35 B2 FD | 	call	#__system__Mid_S
045dc     FD 12 02 F6 | 	mov	arg01, result1
045e0     AB 01 00 FF 
045e4     75 14 06 F6 | 	mov	arg02, ##@LR__5500
045e8     C4 13 B2 FD | 	call	#__system___string_cmp
045ec     00 FA 0D F2 | 	cmp	result1, #0 wz
045f0     18 00 90 5D |  if_ne	jmp	#LR__0260
045f4     13 13 02 F6 | 	mov	arg01, local01
045f8     02 14 06 F6 | 	mov	arg02, #2
045fc     02 16 06 F6 | 	mov	arg03, #2
04600     18 35 B2 FD | 	call	#__system__Mid_S
04604     FD 28 02 F6 | 	mov	local02, result1
04608     14 00 90 FD | 	jmp	#LR__0261
0460c                 | LR__0260
0460c     13 13 02 F6 | 	mov	arg01, local01
04610     02 14 06 F6 | 	mov	arg02, #2
04614     01 16 06 F6 | 	mov	arg03, #1
04618     00 35 B2 FD | 	call	#__system__Mid_S
0461c     FD 28 02 F6 | 	mov	local02, result1
04620                 | LR__0261
04620                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
04620     13 13 02 F6 | 	mov	arg01, local01
04624     09 2B 02 F6 | 	mov	local03, arg01
04628     97 06 48 FB | 	callpa	#(@LR__0263-@LR__0262)>>2,fcache_load_ptr_
0462c                 | LR__0262
0462c     15 FB C9 FA | 	rdbyte	result1, local03 wz
04630     01 2A 06 51 |  if_ne	add	local03, #1
04634     F4 FF 9F 5D |  if_ne	jmp	#LR__0262
04638                 | LR__0263
04638     09 2B 82 F1 | 	sub	local03, arg01
0463c     15 15 02 F6 | 	mov	arg02, local03
04640     01 14 86 F1 | 	sub	arg02, #1
04644     13 13 02 F6 | 	mov	arg01, local01
04648     01 16 06 F6 | 	mov	arg03, #1
0464c     CC 34 B2 FD | 	call	#__system__Mid_S
04650     FD 12 02 F6 | 	mov	arg01, result1
04654     AB 01 00 FF 
04658     77 14 06 F6 | 	mov	arg02, ##@LR__5501
0465c     50 13 B2 FD | 	call	#__system___string_cmp
04660     00 FA 0D F2 | 	cmp	result1, #0 wz
04664     28 00 90 AD |  if_e	jmp	#LR__0264
04668     13 13 02 F6 | 	mov	arg01, local01
0466c     01 14 06 F6 | 	mov	arg02, #1
04670     18 34 B2 FD | 	call	#__system__Right_S
04674     FD 12 02 F6 | 	mov	arg01, result1
04678     90 49 B2 FD | 	call	#__system____builtin_atof
0467c     FD 12 02 F6 | 	mov	arg01, result1
04680     00 14 06 F6 | 	mov	arg02, #0
04684     40 46 B2 FD | 	call	#__system___float_tointeger
04688     FD 2C 02 F6 | 	mov	local04, result1
0468c     34 00 90 FD | 	jmp	#LR__0265
04690                 | LR__0264
04690     13 13 02 F6 | 	mov	arg01, local01
04694     01 14 06 F6 | 	mov	arg02, #1
04698     F0 33 B2 FD | 	call	#__system__Right_S
0469c     FD 12 02 F6 | 	mov	arg01, result1
046a0     68 49 B2 FD | 	call	#__system____builtin_atof
046a4     FD 14 02 F6 | 	mov	arg02, result1
046a8     00 C0 5F FF 
046ac     00 12 06 F6 | 	mov	arg01, ##-1082130432
046b0     4C 41 B2 FD | 	call	#__system___float_mul
046b4     FD 12 02 F6 | 	mov	arg01, result1
046b8     00 14 06 F6 | 	mov	arg02, #0
046bc     08 46 B2 FD | 	call	#__system___float_tointeger
046c0     FD 2C 02 F6 | 	mov	local04, result1
046c4                 | LR__0265
046c4                 | ' 
046c4                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
046c4     00 2C 0E F2 | 	cmp	local04, #0 wz
046c8     24 00 90 5D |  if_ne	jmp	#LR__0266
046cc     13 13 02 F6 | 	mov	arg01, local01
046d0     01 14 06 F6 | 	mov	arg02, #1
046d4     B4 33 B2 FD | 	call	#__system__Right_S
046d8     FD 12 02 F6 | 	mov	arg01, result1
046dc     AB 01 00 FF 
046e0     79 14 06 F6 | 	mov	arg02, ##@LR__5502
046e4     C8 12 B2 FD | 	call	#__system___string_cmp
046e8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ec     04 2C 06 56 |  if_ne	mov	local04, #4
046f0                 | LR__0266
046f0                 | ' 
046f0                 | ' select case s1
046f0     14 2F 02 F6 | 	mov	local05, local02
046f4     AB 01 00 FF 
046f8     7B 14 06 F6 | 	mov	arg02, ##@LR__5503
046fc     17 13 02 F6 | 	mov	arg01, local05
04700     AC 12 B2 FD | 	call	#__system___string_cmp
04704     00 FA 0D F2 | 	cmp	result1, #0 wz
04708     24 01 90 AD |  if_e	jmp	#LR__0267
0470c     AB 01 00 FF 
04710     7D 14 06 F6 | 	mov	arg02, ##@LR__5504
04714     17 13 02 F6 | 	mov	arg01, local05
04718     94 12 B2 FD | 	call	#__system___string_cmp
0471c     00 FA 0D F2 | 	cmp	result1, #0 wz
04720     18 01 90 AD |  if_e	jmp	#LR__0268
04724     AB 01 00 FF 
04728     80 14 06 F6 | 	mov	arg02, ##@LR__5505
0472c     17 13 02 F6 | 	mov	arg01, local05
04730     7C 12 B2 FD | 	call	#__system___string_cmp
04734     00 FA 0D F2 | 	cmp	result1, #0 wz
04738     0C 01 90 AD |  if_e	jmp	#LR__0269
0473c     AB 01 00 FF 
04740     82 14 06 F6 | 	mov	arg02, ##@LR__5506
04744     17 13 02 F6 | 	mov	arg01, local05
04748     64 12 B2 FD | 	call	#__system___string_cmp
0474c     00 FA 0D F2 | 	cmp	result1, #0 wz
04750     00 01 90 AD |  if_e	jmp	#LR__0270
04754     AB 01 00 FF 
04758     85 14 06 F6 | 	mov	arg02, ##@LR__5507
0475c     17 13 02 F6 | 	mov	arg01, local05
04760     4C 12 B2 FD | 	call	#__system___string_cmp
04764     00 FA 0D F2 | 	cmp	result1, #0 wz
04768     F4 00 90 AD |  if_e	jmp	#LR__0271
0476c     AB 01 00 FF 
04770     87 14 06 F6 | 	mov	arg02, ##@LR__5508
04774     17 13 02 F6 | 	mov	arg01, local05
04778     34 12 B2 FD | 	call	#__system___string_cmp
0477c     00 FA 0D F2 | 	cmp	result1, #0 wz
04780     E8 00 90 AD |  if_e	jmp	#LR__0272
04784     AB 01 00 FF 
04788     89 14 06 F6 | 	mov	arg02, ##@LR__5509
0478c     17 13 02 F6 | 	mov	arg01, local05
04790     1C 12 B2 FD | 	call	#__system___string_cmp
04794     00 FA 0D F2 | 	cmp	result1, #0 wz
04798     DC 00 90 AD |  if_e	jmp	#LR__0273
0479c     AB 01 00 FF 
047a0     8C 14 06 F6 | 	mov	arg02, ##@LR__5510
047a4     17 13 02 F6 | 	mov	arg01, local05
047a8     04 12 B2 FD | 	call	#__system___string_cmp
047ac     00 FA 0D F2 | 	cmp	result1, #0 wz
047b0     D0 00 90 AD |  if_e	jmp	#LR__0274
047b4     AB 01 00 FF 
047b8     8E 14 06 F6 | 	mov	arg02, ##@LR__5511
047bc     17 13 02 F6 | 	mov	arg01, local05
047c0     EC 11 B2 FD | 	call	#__system___string_cmp
047c4     00 FA 0D F2 | 	cmp	result1, #0 wz
047c8     C4 00 90 AD |  if_e	jmp	#LR__0275
047cc     AB 01 00 FF 
047d0     91 14 06 F6 | 	mov	arg02, ##@LR__5512
047d4     17 13 02 F6 | 	mov	arg01, local05
047d8     D4 11 B2 FD | 	call	#__system___string_cmp
047dc     00 FA 0D F2 | 	cmp	result1, #0 wz
047e0     B8 00 90 AD |  if_e	jmp	#LR__0276
047e4     AB 01 00 FF 
047e8     93 14 06 F6 | 	mov	arg02, ##@LR__5513
047ec     17 13 02 F6 | 	mov	arg01, local05
047f0     BC 11 B2 FD | 	call	#__system___string_cmp
047f4     00 FA 0D F2 | 	cmp	result1, #0 wz
047f8     AC 00 90 AD |  if_e	jmp	#LR__0277
047fc     AB 01 00 FF 
04800     96 14 06 F6 | 	mov	arg02, ##@LR__5514
04804     17 13 02 F6 | 	mov	arg01, local05
04808     A4 11 B2 FD | 	call	#__system___string_cmp
0480c     00 FA 0D F2 | 	cmp	result1, #0 wz
04810     A0 00 90 AD |  if_e	jmp	#LR__0278
04814     AB 01 00 FF 
04818     98 14 06 F6 | 	mov	arg02, ##@LR__5515
0481c     17 13 02 F6 | 	mov	arg01, local05
04820     8C 11 B2 FD | 	call	#__system___string_cmp
04824     00 FA 0D F2 | 	cmp	result1, #0 wz
04828     94 00 90 AD |  if_e	jmp	#LR__0279
0482c     9C 00 90 FD | 	jmp	#LR__0280
04830                 | LR__0267
04830     01 00 00 FF 
04834     00 31 06 F6 | 	mov	local06, ##768
04838     98 00 90 FD | 	jmp	#LR__0281
0483c                 | LR__0268
0483c     01 00 00 FF 
04840     01 31 06 F6 | 	mov	local06, ##769
04844     8C 00 90 FD | 	jmp	#LR__0281
04848                 | LR__0269
04848     01 00 00 FF 
0484c     02 31 06 F6 | 	mov	local06, ##770
04850     80 00 90 FD | 	jmp	#LR__0281
04854                 | LR__0270
04854     01 00 00 FF 
04858     03 31 06 F6 | 	mov	local06, ##771
0485c     74 00 90 FD | 	jmp	#LR__0281
04860                 | LR__0271
04860     01 00 00 FF 
04864     04 31 06 F6 | 	mov	local06, ##772
04868     68 00 90 FD | 	jmp	#LR__0281
0486c                 | LR__0272
0486c     01 00 00 FF 
04870     05 31 06 F6 | 	mov	local06, ##773
04874     5C 00 90 FD | 	jmp	#LR__0281
04878                 | LR__0273
04878     01 00 00 FF 
0487c     06 31 06 F6 | 	mov	local06, ##774
04880     50 00 90 FD | 	jmp	#LR__0281
04884                 | LR__0274
04884     01 00 00 FF 
04888     07 31 06 F6 | 	mov	local06, ##775
0488c     44 00 90 FD | 	jmp	#LR__0281
04890                 | LR__0275
04890     01 00 00 FF 
04894     08 31 06 F6 | 	mov	local06, ##776
04898     38 00 90 FD | 	jmp	#LR__0281
0489c                 | LR__0276
0489c     01 00 00 FF 
048a0     09 31 06 F6 | 	mov	local06, ##777
048a4     2C 00 90 FD | 	jmp	#LR__0281
048a8                 | LR__0277
048a8     01 00 00 FF 
048ac     0A 31 06 F6 | 	mov	local06, ##778
048b0     20 00 90 FD | 	jmp	#LR__0281
048b4                 | LR__0278
048b4     01 00 00 FF 
048b8     0B 31 06 F6 | 	mov	local06, ##779
048bc     14 00 90 FD | 	jmp	#LR__0281
048c0                 | LR__0279
048c0     01 00 00 FF 
048c4     0B 31 06 F6 | 	mov	local06, ##779
048c8     08 00 90 FD | 	jmp	#LR__0281
048cc                 | LR__0280
048cc     00 FA 05 F6 | 	mov	result1, #0
048d0     28 00 90 FD | 	jmp	#LR__0283
048d4                 | LR__0281
048d4                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
048d4     FF FF 7F FF 
048d8     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
048dc     18 00 90 CD |  if_b	jmp	#LR__0282
048e0     0A 2C 56 F2 | 	cmps	local04, #10 wc
048e4     16 33 02 C6 |  if_b	mov	local07, local04
048e8     01 32 66 C0 |  if_b	shl	local07, #1
048ec     16 33 02 C1 |  if_b	add	local07, local04
048f0     02 32 66 C0 |  if_b	shl	local07, #2
048f4     19 31 02 C1 |  if_b	add	local06, local07
048f8                 | LR__0282
048f8                 | ' return token
048f8     18 FB 01 F6 | 	mov	result1, local06
048fc                 | LR__0283
048fc     A7 F0 03 F6 | 	mov	ptra, fp
04900     B2 00 A0 FD | 	call	#popregs_
04904                 | _isnotename_ret
04904     2D 00 64 FD | 	ret
04908                 | 
04908                 | ' 
04908                 | ' ' Check if the part is a separator, return a token or 0 if not found
04908                 | ' 
04908                 | ' function isseparator(s as string) as ubyte
04908                 | _isseparator
04908     01 4A 05 F6 | 	mov	COUNT_, #1
0490c     A8 00 A0 FD | 	call	#pushregs_
04910                 | ' 
04910                 | ' select case s
04910     09 27 02 F6 | 	mov	local01, arg01
04914     AB 01 00 FF 
04918     9A 14 06 F6 | 	mov	arg02, ##@LR__5516
0491c     13 13 02 F6 | 	mov	arg01, local01
04920     8C 10 B2 FD | 	call	#__system___string_cmp
04924     00 FA 0D F2 | 	cmp	result1, #0 wz
04928     54 01 90 AD |  if_e	jmp	#LR__0290
0492c     AB 01 00 FF 
04930     9C 14 06 F6 | 	mov	arg02, ##@LR__5517
04934     13 13 02 F6 | 	mov	arg01, local01
04938     74 10 B2 FD | 	call	#__system___string_cmp
0493c     00 FA 0D F2 | 	cmp	result1, #0 wz
04940     44 01 90 AD |  if_e	jmp	#LR__0291
04944     AB 01 00 FF 
04948     9E 14 06 F6 | 	mov	arg02, ##@LR__5518
0494c     13 13 02 F6 | 	mov	arg01, local01
04950     5C 10 B2 FD | 	call	#__system___string_cmp
04954     00 FA 0D F2 | 	cmp	result1, #0 wz
04958     34 01 90 AD |  if_e	jmp	#LR__0292
0495c     AB 01 00 FF 
04960     A0 14 06 F6 | 	mov	arg02, ##@LR__5519
04964     13 13 02 F6 | 	mov	arg01, local01
04968     44 10 B2 FD | 	call	#__system___string_cmp
0496c     00 FA 0D F2 | 	cmp	result1, #0 wz
04970     24 01 90 AD |  if_e	jmp	#LR__0293
04974     AB 01 00 FF 
04978     A2 14 06 F6 | 	mov	arg02, ##@LR__5520
0497c     13 13 02 F6 | 	mov	arg01, local01
04980     2C 10 B2 FD | 	call	#__system___string_cmp
04984     00 FA 0D F2 | 	cmp	result1, #0 wz
04988     14 01 90 AD |  if_e	jmp	#LR__0294
0498c     AB 01 00 FF 
04990     A4 14 06 F6 | 	mov	arg02, ##@LR__5521
04994     13 13 02 F6 | 	mov	arg01, local01
04998     14 10 B2 FD | 	call	#__system___string_cmp
0499c     00 FA 0D F2 | 	cmp	result1, #0 wz
049a0     04 01 90 AD |  if_e	jmp	#LR__0295
049a4     AB 01 00 FF 
049a8     A6 14 06 F6 | 	mov	arg02, ##@LR__5522
049ac     13 13 02 F6 | 	mov	arg01, local01
049b0     FC 0F B2 FD | 	call	#__system___string_cmp
049b4     00 FA 0D F2 | 	cmp	result1, #0 wz
049b8     F4 00 90 AD |  if_e	jmp	#LR__0296
049bc     AB 01 00 FF 
049c0     A8 14 06 F6 | 	mov	arg02, ##@LR__5523
049c4     13 13 02 F6 | 	mov	arg01, local01
049c8     E4 0F B2 FD | 	call	#__system___string_cmp
049cc     00 FA 0D F2 | 	cmp	result1, #0 wz
049d0     E4 00 90 AD |  if_e	jmp	#LR__0297
049d4     AB 01 00 FF 
049d8     AA 14 06 F6 | 	mov	arg02, ##@LR__5524
049dc     13 13 02 F6 | 	mov	arg01, local01
049e0     CC 0F B2 FD | 	call	#__system___string_cmp
049e4     00 FA 0D F2 | 	cmp	result1, #0 wz
049e8     D4 00 90 AD |  if_e	jmp	#LR__0298
049ec     AB 01 00 FF 
049f0     AC 14 06 F6 | 	mov	arg02, ##@LR__5525
049f4     13 13 02 F6 | 	mov	arg01, local01
049f8     B4 0F B2 FD | 	call	#__system___string_cmp
049fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04a00     C4 00 90 AD |  if_e	jmp	#LR__0299
04a04     AB 01 00 FF 
04a08     AE 14 06 F6 | 	mov	arg02, ##@LR__5526
04a0c     13 13 02 F6 | 	mov	arg01, local01
04a10     9C 0F B2 FD | 	call	#__system___string_cmp
04a14     00 FA 0D F2 | 	cmp	result1, #0 wz
04a18     B4 00 90 AD |  if_e	jmp	#LR__0300
04a1c     AB 01 00 FF 
04a20     B0 14 06 F6 | 	mov	arg02, ##@LR__5527
04a24     13 13 02 F6 | 	mov	arg01, local01
04a28     84 0F B2 FD | 	call	#__system___string_cmp
04a2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a30     A4 00 90 AD |  if_e	jmp	#LR__0301
04a34     AB 01 00 FF 
04a38     B2 14 06 F6 | 	mov	arg02, ##@LR__5528
04a3c     13 13 02 F6 | 	mov	arg01, local01
04a40     6C 0F B2 FD | 	call	#__system___string_cmp
04a44     00 FA 0D F2 | 	cmp	result1, #0 wz
04a48     94 00 90 AD |  if_e	jmp	#LR__0302
04a4c     AB 01 00 FF 
04a50     B4 14 06 F6 | 	mov	arg02, ##@LR__5529
04a54     13 13 02 F6 | 	mov	arg01, local01
04a58     54 0F B2 FD | 	call	#__system___string_cmp
04a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a60     84 00 90 AD |  if_e	jmp	#LR__0303
04a64     AB 01 00 FF 
04a68     B6 14 06 F6 | 	mov	arg02, ##@LR__5530
04a6c     13 13 02 F6 | 	mov	arg01, local01
04a70     3C 0F B2 FD | 	call	#__system___string_cmp
04a74     00 FA 0D F2 | 	cmp	result1, #0 wz
04a78     74 00 90 AD |  if_e	jmp	#LR__0304
04a7c     78 00 90 FD | 	jmp	#LR__0305
04a80                 | LR__0290
04a80     01 FA 05 F6 | 	mov	result1, #1
04a84     74 00 90 FD | 	jmp	#LR__0306
04a88                 | LR__0291
04a88     02 FA 05 F6 | 	mov	result1, #2
04a8c     6C 00 90 FD | 	jmp	#LR__0306
04a90                 | LR__0292
04a90     1B FA 05 F6 | 	mov	result1, #27
04a94     64 00 90 FD | 	jmp	#LR__0306
04a98                 | LR__0293
04a98     11 FA 05 F6 | 	mov	result1, #17
04a9c     5C 00 90 FD | 	jmp	#LR__0306
04aa0                 | LR__0294
04aa0     05 FA 05 F6 | 	mov	result1, #5
04aa4     54 00 90 FD | 	jmp	#LR__0306
04aa8                 | LR__0295
04aa8     06 FA 05 F6 | 	mov	result1, #6
04aac     4C 00 90 FD | 	jmp	#LR__0306
04ab0                 | LR__0296
04ab0     12 FA 05 F6 | 	mov	result1, #18
04ab4     44 00 90 FD | 	jmp	#LR__0306
04ab8                 | LR__0297
04ab8     13 FA 05 F6 | 	mov	result1, #19
04abc     3C 00 90 FD | 	jmp	#LR__0306
04ac0                 | LR__0298
04ac0     0C FA 05 F6 | 	mov	result1, #12
04ac4     34 00 90 FD | 	jmp	#LR__0306
04ac8                 | LR__0299
04ac8     14 FA 05 F6 | 	mov	result1, #20
04acc     2C 00 90 FD | 	jmp	#LR__0306
04ad0                 | LR__0300
04ad0     15 FA 05 F6 | 	mov	result1, #21
04ad4     24 00 90 FD | 	jmp	#LR__0306
04ad8                 | LR__0301
04ad8     16 FA 05 F6 | 	mov	result1, #22
04adc     1C 00 90 FD | 	jmp	#LR__0306
04ae0                 | LR__0302
04ae0     FF FB 05 F6 | 	mov	result1, #511
04ae4     14 00 90 FD | 	jmp	#LR__0306
04ae8                 | LR__0303
04ae8     0F FA 05 F6 | 	mov	result1, #15
04aec     0C 00 90 FD | 	jmp	#LR__0306
04af0                 | LR__0304
04af0     10 FA 05 F6 | 	mov	result1, #16
04af4     04 00 90 FD | 	jmp	#LR__0306
04af8                 | LR__0305
04af8     00 FA 05 F6 | 	mov	result1, #0
04afc                 | LR__0306
04afc     A7 F0 03 F6 | 	mov	ptra, fp
04b00     B2 00 A0 FD | 	call	#popregs_
04b04                 | _isseparator_ret
04b04     2D 00 64 FD | 	ret
04b08                 | 
04b08                 | ' 
04b08                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04b08                 | ' 
04b08                 | ' function iscommand(s as string) as ubyte
04b08                 | _iscommand
04b08     01 4A 05 F6 | 	mov	COUNT_, #1
04b0c     A8 00 A0 FD | 	call	#pushregs_
04b10                 | ' 
04b10                 | ' select case s
04b10     09 27 02 F6 | 	mov	local01, arg01
04b14     AB 01 00 FF 
04b18     BA 14 06 F6 | 	mov	arg02, ##@LR__5532
04b1c     13 13 02 F6 | 	mov	arg01, local01
04b20     8C 0E B2 FD | 	call	#__system___string_cmp
04b24     00 FA 0D F2 | 	cmp	result1, #0 wz
04b28     64 0C 90 AD |  if_e	jmp	#LR__0310
04b2c     AB 01 00 FF 
04b30     BF 14 06 F6 | 	mov	arg02, ##@LR__5533
04b34     13 13 02 F6 | 	mov	arg01, local01
04b38     74 0E B2 FD | 	call	#__system___string_cmp
04b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b40     54 0C 90 AD |  if_e	jmp	#LR__0311
04b44     AB 01 00 FF 
04b48     C2 14 06 F6 | 	mov	arg02, ##@LR__5534
04b4c     13 13 02 F6 | 	mov	arg01, local01
04b50     5C 0E B2 FD | 	call	#__system___string_cmp
04b54     00 FA 0D F2 | 	cmp	result1, #0 wz
04b58     44 0C 90 AD |  if_e	jmp	#LR__0312
04b5c     AB 01 00 FF 
04b60     C7 14 06 F6 | 	mov	arg02, ##@LR__5535
04b64     13 13 02 F6 | 	mov	arg01, local01
04b68     44 0E B2 FD | 	call	#__system___string_cmp
04b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b70     34 0C 90 AD |  if_e	jmp	#LR__0313
04b74     AB 01 00 FF 
04b78     CB 14 06 F6 | 	mov	arg02, ##@LR__5536
04b7c     13 13 02 F6 | 	mov	arg01, local01
04b80     2C 0E B2 FD | 	call	#__system___string_cmp
04b84     00 FA 0D F2 | 	cmp	result1, #0 wz
04b88     24 0C 90 AD |  if_e	jmp	#LR__0314
04b8c     AB 01 00 FF 
04b90     D0 14 06 F6 | 	mov	arg02, ##@LR__5537
04b94     13 13 02 F6 | 	mov	arg01, local01
04b98     14 0E B2 FD | 	call	#__system___string_cmp
04b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba0     14 0C 90 AD |  if_e	jmp	#LR__0315
04ba4     AB 01 00 FF 
04ba8     D4 14 06 F6 | 	mov	arg02, ##@LR__5538
04bac     13 13 02 F6 | 	mov	arg01, local01
04bb0     FC 0D B2 FD | 	call	#__system___string_cmp
04bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb8     04 0C 90 AD |  if_e	jmp	#LR__0316
04bbc     AB 01 00 FF 
04bc0     D7 14 06 F6 | 	mov	arg02, ##@LR__5539
04bc4     13 13 02 F6 | 	mov	arg01, local01
04bc8     E4 0D B2 FD | 	call	#__system___string_cmp
04bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
04bd0     F4 0B 90 AD |  if_e	jmp	#LR__0317
04bd4     AB 01 00 FF 
04bd8     E2 14 06 F6 | 	mov	arg02, ##@LR__5540
04bdc     13 13 02 F6 | 	mov	arg01, local01
04be0     CC 0D B2 FD | 	call	#__system___string_cmp
04be4     00 FA 0D F2 | 	cmp	result1, #0 wz
04be8     E4 0B 90 AD |  if_e	jmp	#LR__0318
04bec     AB 01 00 FF 
04bf0     E6 14 06 F6 | 	mov	arg02, ##@LR__5541
04bf4     13 13 02 F6 | 	mov	arg01, local01
04bf8     B4 0D B2 FD | 	call	#__system___string_cmp
04bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
04c00     D4 0B 90 AD |  if_e	jmp	#LR__0319
04c04     AB 01 00 FF 
04c08     F0 14 06 F6 | 	mov	arg02, ##@LR__5542
04c0c     13 13 02 F6 | 	mov	arg01, local01
04c10     9C 0D B2 FD | 	call	#__system___string_cmp
04c14     00 FA 0D F2 | 	cmp	result1, #0 wz
04c18     C4 0B 90 AD |  if_e	jmp	#LR__0320
04c1c     AB 01 00 FF 
04c20     F4 14 06 F6 | 	mov	arg02, ##@LR__5543
04c24     13 13 02 F6 | 	mov	arg01, local01
04c28     84 0D B2 FD | 	call	#__system___string_cmp
04c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c30     B4 0B 90 AD |  if_e	jmp	#LR__0321
04c34     AB 01 00 FF 
04c38     FE 14 06 F6 | 	mov	arg02, ##@LR__5544
04c3c     13 13 02 F6 | 	mov	arg01, local01
04c40     6C 0D B2 FD | 	call	#__system___string_cmp
04c44     00 FA 0D F2 | 	cmp	result1, #0 wz
04c48     A4 0B 90 AD |  if_e	jmp	#LR__0322
04c4c     AB 01 00 FF 
04c50     02 15 06 F6 | 	mov	arg02, ##@LR__5545
04c54     13 13 02 F6 | 	mov	arg01, local01
04c58     54 0D B2 FD | 	call	#__system___string_cmp
04c5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c60     94 0B 90 AD |  if_e	jmp	#LR__0323
04c64     AB 01 00 FF 
04c68     0D 15 06 F6 | 	mov	arg02, ##@LR__5546
04c6c     13 13 02 F6 | 	mov	arg01, local01
04c70     3C 0D B2 FD | 	call	#__system___string_cmp
04c74     00 FA 0D F2 | 	cmp	result1, #0 wz
04c78     84 0B 90 AD |  if_e	jmp	#LR__0324
04c7c     AB 01 00 FF 
04c80     11 15 06 F6 | 	mov	arg02, ##@LR__5547
04c84     13 13 02 F6 | 	mov	arg01, local01
04c88     24 0D B2 FD | 	call	#__system___string_cmp
04c8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c90     74 0B 90 AD |  if_e	jmp	#LR__0325
04c94     AB 01 00 FF 
04c98     18 15 06 F6 | 	mov	arg02, ##@LR__5548
04c9c     13 13 02 F6 | 	mov	arg01, local01
04ca0     0C 0D B2 FD | 	call	#__system___string_cmp
04ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ca8     64 0B 90 AD |  if_e	jmp	#LR__0326
04cac     AB 01 00 FF 
04cb0     1C 15 06 F6 | 	mov	arg02, ##@LR__5549
04cb4     13 13 02 F6 | 	mov	arg01, local01
04cb8     F4 0C B2 FD | 	call	#__system___string_cmp
04cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc0     54 0B 90 AD |  if_e	jmp	#LR__0327
04cc4     AB 01 00 FF 
04cc8     22 15 06 F6 | 	mov	arg02, ##@LR__5550
04ccc     13 13 02 F6 | 	mov	arg01, local01
04cd0     DC 0C B2 FD | 	call	#__system___string_cmp
04cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd8     44 0B 90 AD |  if_e	jmp	#LR__0328
04cdc     AB 01 00 FF 
04ce0     28 15 06 F6 | 	mov	arg02, ##@LR__5551
04ce4     13 13 02 F6 | 	mov	arg01, local01
04ce8     C4 0C B2 FD | 	call	#__system___string_cmp
04cec     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf0     34 0B 90 AD |  if_e	jmp	#LR__0329
04cf4     AB 01 00 FF 
04cf8     2C 15 06 F6 | 	mov	arg02, ##@LR__5552
04cfc     13 13 02 F6 | 	mov	arg01, local01
04d00     AC 0C B2 FD | 	call	#__system___string_cmp
04d04     00 FA 0D F2 | 	cmp	result1, #0 wz
04d08     24 0B 90 AD |  if_e	jmp	#LR__0330
04d0c     AB 01 00 FF 
04d10     32 15 06 F6 | 	mov	arg02, ##@LR__5553
04d14     13 13 02 F6 | 	mov	arg01, local01
04d18     94 0C B2 FD | 	call	#__system___string_cmp
04d1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d20     14 0B 90 AD |  if_e	jmp	#LR__0331
04d24     AB 01 00 FF 
04d28     35 15 06 F6 | 	mov	arg02, ##@LR__5554
04d2c     13 13 02 F6 | 	mov	arg01, local01
04d30     7C 0C B2 FD | 	call	#__system___string_cmp
04d34     00 FA 0D F2 | 	cmp	result1, #0 wz
04d38     04 0B 90 AD |  if_e	jmp	#LR__0332
04d3c     AB 01 00 FF 
04d40     3B 15 06 F6 | 	mov	arg02, ##@LR__5555
04d44     13 13 02 F6 | 	mov	arg01, local01
04d48     64 0C B2 FD | 	call	#__system___string_cmp
04d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d50     F4 0A 90 AD |  if_e	jmp	#LR__0333
04d54     AB 01 00 FF 
04d58     3F 15 06 F6 | 	mov	arg02, ##@LR__5556
04d5c     13 13 02 F6 | 	mov	arg01, local01
04d60     4C 0C B2 FD | 	call	#__system___string_cmp
04d64     00 FA 0D F2 | 	cmp	result1, #0 wz
04d68     E4 0A 90 AD |  if_e	jmp	#LR__0334
04d6c     AB 01 00 FF 
04d70     46 15 06 F6 | 	mov	arg02, ##@LR__5557
04d74     13 13 02 F6 | 	mov	arg01, local01
04d78     34 0C B2 FD | 	call	#__system___string_cmp
04d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d80     D4 0A 90 AD |  if_e	jmp	#LR__0335
04d84     AB 01 00 FF 
04d88     4B 15 06 F6 | 	mov	arg02, ##@LR__5558
04d8c     13 13 02 F6 | 	mov	arg01, local01
04d90     1C 0C B2 FD | 	call	#__system___string_cmp
04d94     00 FA 0D F2 | 	cmp	result1, #0 wz
04d98     C4 0A 90 AD |  if_e	jmp	#LR__0336
04d9c     AB 01 00 FF 
04da0     52 15 06 F6 | 	mov	arg02, ##@LR__5559
04da4     13 13 02 F6 | 	mov	arg01, local01
04da8     04 0C B2 FD | 	call	#__system___string_cmp
04dac     00 FA 0D F2 | 	cmp	result1, #0 wz
04db0     B4 0A 90 AD |  if_e	jmp	#LR__0337
04db4     AB 01 00 FF 
04db8     59 15 06 F6 | 	mov	arg02, ##@LR__5560
04dbc     13 13 02 F6 | 	mov	arg01, local01
04dc0     EC 0B B2 FD | 	call	#__system___string_cmp
04dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
04dc8     A4 0A 90 AD |  if_e	jmp	#LR__0338
04dcc     AB 01 00 FF 
04dd0     63 15 06 F6 | 	mov	arg02, ##@LR__5561
04dd4     13 13 02 F6 | 	mov	arg01, local01
04dd8     D4 0B B2 FD | 	call	#__system___string_cmp
04ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
04de0     94 0A 90 AD |  if_e	jmp	#LR__0339
04de4     AB 01 00 FF 
04de8     67 15 06 F6 | 	mov	arg02, ##@LR__5562
04dec     13 13 02 F6 | 	mov	arg01, local01
04df0     BC 0B B2 FD | 	call	#__system___string_cmp
04df4     00 FA 0D F2 | 	cmp	result1, #0 wz
04df8     84 0A 90 AD |  if_e	jmp	#LR__0340
04dfc     AB 01 00 FF 
04e00     6B 15 06 F6 | 	mov	arg02, ##@LR__5563
04e04     13 13 02 F6 | 	mov	arg01, local01
04e08     A4 0B B2 FD | 	call	#__system___string_cmp
04e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e10     74 0A 90 AD |  if_e	jmp	#LR__0341
04e14     AB 01 00 FF 
04e18     72 15 06 F6 | 	mov	arg02, ##@LR__5564
04e1c     13 13 02 F6 | 	mov	arg01, local01
04e20     8C 0B B2 FD | 	call	#__system___string_cmp
04e24     00 FA 0D F2 | 	cmp	result1, #0 wz
04e28     64 0A 90 AD |  if_e	jmp	#LR__0342
04e2c     AB 01 00 FF 
04e30     76 15 06 F6 | 	mov	arg02, ##@LR__5565
04e34     13 13 02 F6 | 	mov	arg01, local01
04e38     74 0B B2 FD | 	call	#__system___string_cmp
04e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e40     54 0A 90 AD |  if_e	jmp	#LR__0343
04e44     AB 01 00 FF 
04e48     7A 15 06 F6 | 	mov	arg02, ##@LR__5566
04e4c     13 13 02 F6 | 	mov	arg01, local01
04e50     5C 0B B2 FD | 	call	#__system___string_cmp
04e54     00 FA 0D F2 | 	cmp	result1, #0 wz
04e58     44 0A 90 AD |  if_e	jmp	#LR__0344
04e5c     AB 01 00 FF 
04e60     80 15 06 F6 | 	mov	arg02, ##@LR__5567
04e64     13 13 02 F6 | 	mov	arg01, local01
04e68     44 0B B2 FD | 	call	#__system___string_cmp
04e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e70     34 0A 90 AD |  if_e	jmp	#LR__0345
04e74     AB 01 00 FF 
04e78     85 15 06 F6 | 	mov	arg02, ##@LR__5568
04e7c     13 13 02 F6 | 	mov	arg01, local01
04e80     2C 0B B2 FD | 	call	#__system___string_cmp
04e84     00 FA 0D F2 | 	cmp	result1, #0 wz
04e88     24 0A 90 AD |  if_e	jmp	#LR__0346
04e8c     AB 01 00 FF 
04e90     8C 15 06 F6 | 	mov	arg02, ##@LR__5569
04e94     13 13 02 F6 | 	mov	arg01, local01
04e98     14 0B B2 FD | 	call	#__system___string_cmp
04e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea0     14 0A 90 AD |  if_e	jmp	#LR__0347
04ea4     AB 01 00 FF 
04ea8     90 15 06 F6 | 	mov	arg02, ##@LR__5570
04eac     13 13 02 F6 | 	mov	arg01, local01
04eb0     FC 0A B2 FD | 	call	#__system___string_cmp
04eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04eb8     04 0A 90 AD |  if_e	jmp	#LR__0348
04ebc     AB 01 00 FF 
04ec0     95 15 06 F6 | 	mov	arg02, ##@LR__5571
04ec4     13 13 02 F6 | 	mov	arg01, local01
04ec8     E4 0A B2 FD | 	call	#__system___string_cmp
04ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed0     F4 09 90 AD |  if_e	jmp	#LR__0349
04ed4     AB 01 00 FF 
04ed8     99 15 06 F6 | 	mov	arg02, ##@LR__5572
04edc     13 13 02 F6 | 	mov	arg01, local01
04ee0     CC 0A B2 FD | 	call	#__system___string_cmp
04ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ee8     E4 09 90 AD |  if_e	jmp	#LR__0350
04eec     AB 01 00 FF 
04ef0     9F 15 06 F6 | 	mov	arg02, ##@LR__5573
04ef4     13 13 02 F6 | 	mov	arg01, local01
04ef8     B4 0A B2 FD | 	call	#__system___string_cmp
04efc     00 FA 0D F2 | 	cmp	result1, #0 wz
04f00     D4 09 90 AD |  if_e	jmp	#LR__0351
04f04     AB 01 00 FF 
04f08     A2 15 06 F6 | 	mov	arg02, ##@LR__5574
04f0c     13 13 02 F6 | 	mov	arg01, local01
04f10     9C 0A B2 FD | 	call	#__system___string_cmp
04f14     00 FA 0D F2 | 	cmp	result1, #0 wz
04f18     C4 09 90 AD |  if_e	jmp	#LR__0352
04f1c     AB 01 00 FF 
04f20     AA 15 06 F6 | 	mov	arg02, ##@LR__5575
04f24     13 13 02 F6 | 	mov	arg01, local01
04f28     84 0A B2 FD | 	call	#__system___string_cmp
04f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f30     B4 09 90 AD |  if_e	jmp	#LR__0353
04f34     AB 01 00 FF 
04f38     AE 15 06 F6 | 	mov	arg02, ##@LR__5576
04f3c     13 13 02 F6 | 	mov	arg01, local01
04f40     6C 0A B2 FD | 	call	#__system___string_cmp
04f44     00 FA 0D F2 | 	cmp	result1, #0 wz
04f48     A4 09 90 AD |  if_e	jmp	#LR__0354
04f4c     AB 01 00 FF 
04f50     B3 15 06 F6 | 	mov	arg02, ##@LR__5577
04f54     13 13 02 F6 | 	mov	arg01, local01
04f58     54 0A B2 FD | 	call	#__system___string_cmp
04f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f60     94 09 90 AD |  if_e	jmp	#LR__0355
04f64     AB 01 00 FF 
04f68     B7 15 06 F6 | 	mov	arg02, ##@LR__5578
04f6c     13 13 02 F6 | 	mov	arg01, local01
04f70     3C 0A B2 FD | 	call	#__system___string_cmp
04f74     00 FA 0D F2 | 	cmp	result1, #0 wz
04f78     84 09 90 AD |  if_e	jmp	#LR__0356
04f7c     AB 01 00 FF 
04f80     BC 15 06 F6 | 	mov	arg02, ##@LR__5579
04f84     13 13 02 F6 | 	mov	arg01, local01
04f88     24 0A B2 FD | 	call	#__system___string_cmp
04f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f90     74 09 90 AD |  if_e	jmp	#LR__0357
04f94     AB 01 00 FF 
04f98     C0 15 06 F6 | 	mov	arg02, ##@LR__5580
04f9c     13 13 02 F6 | 	mov	arg01, local01
04fa0     0C 0A B2 FD | 	call	#__system___string_cmp
04fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fa8     64 09 90 AD |  if_e	jmp	#LR__0358
04fac     AB 01 00 FF 
04fb0     C3 15 06 F6 | 	mov	arg02, ##@LR__5581
04fb4     13 13 02 F6 | 	mov	arg01, local01
04fb8     F4 09 B2 FD | 	call	#__system___string_cmp
04fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc0     54 09 90 AD |  if_e	jmp	#LR__0359
04fc4     AB 01 00 FF 
04fc8     C9 15 06 F6 | 	mov	arg02, ##@LR__5582
04fcc     13 13 02 F6 | 	mov	arg01, local01
04fd0     DC 09 B2 FD | 	call	#__system___string_cmp
04fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fd8     44 09 90 AD |  if_e	jmp	#LR__0360
04fdc     AB 01 00 FF 
04fe0     CD 15 06 F6 | 	mov	arg02, ##@LR__5583
04fe4     13 13 02 F6 | 	mov	arg01, local01
04fe8     C4 09 B2 FD | 	call	#__system___string_cmp
04fec     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff0     34 09 90 AD |  if_e	jmp	#LR__0361
04ff4     AB 01 00 FF 
04ff8     D1 15 06 F6 | 	mov	arg02, ##@LR__5584
04ffc     13 13 02 F6 | 	mov	arg01, local01
05000     AC 09 B2 FD | 	call	#__system___string_cmp
05004     00 FA 0D F2 | 	cmp	result1, #0 wz
05008     24 09 90 AD |  if_e	jmp	#LR__0362
0500c     AB 01 00 FF 
05010     D7 15 06 F6 | 	mov	arg02, ##@LR__5585
05014     13 13 02 F6 | 	mov	arg01, local01
05018     94 09 B2 FD | 	call	#__system___string_cmp
0501c     00 FA 0D F2 | 	cmp	result1, #0 wz
05020     14 09 90 AD |  if_e	jmp	#LR__0363
05024     AB 01 00 FF 
05028     DC 15 06 F6 | 	mov	arg02, ##@LR__5586
0502c     13 13 02 F6 | 	mov	arg01, local01
05030     7C 09 B2 FD | 	call	#__system___string_cmp
05034     00 FA 0D F2 | 	cmp	result1, #0 wz
05038     04 09 90 AD |  if_e	jmp	#LR__0364
0503c     AB 01 00 FF 
05040     DF 15 06 F6 | 	mov	arg02, ##@LR__5587
05044     13 13 02 F6 | 	mov	arg01, local01
05048     64 09 B2 FD | 	call	#__system___string_cmp
0504c     00 FA 0D F2 | 	cmp	result1, #0 wz
05050     F4 08 90 AD |  if_e	jmp	#LR__0365
05054     AB 01 00 FF 
05058     E2 15 06 F6 | 	mov	arg02, ##@LR__5588
0505c     13 13 02 F6 | 	mov	arg01, local01
05060     4C 09 B2 FD | 	call	#__system___string_cmp
05064     00 FA 0D F2 | 	cmp	result1, #0 wz
05068     E4 08 90 AD |  if_e	jmp	#LR__0366
0506c     AB 01 00 FF 
05070     E6 15 06 F6 | 	mov	arg02, ##@LR__5589
05074     13 13 02 F6 | 	mov	arg01, local01
05078     34 09 B2 FD | 	call	#__system___string_cmp
0507c     00 FA 0D F2 | 	cmp	result1, #0 wz
05080     D4 08 90 AD |  if_e	jmp	#LR__0367
05084     AB 01 00 FF 
05088     E9 15 06 F6 | 	mov	arg02, ##@LR__5590
0508c     13 13 02 F6 | 	mov	arg01, local01
05090     1C 09 B2 FD | 	call	#__system___string_cmp
05094     00 FA 0D F2 | 	cmp	result1, #0 wz
05098     C4 08 90 AD |  if_e	jmp	#LR__0368
0509c     AB 01 00 FF 
050a0     EF 15 06 F6 | 	mov	arg02, ##@LR__5591
050a4     13 13 02 F6 | 	mov	arg01, local01
050a8     04 09 B2 FD | 	call	#__system___string_cmp
050ac     00 FA 0D F2 | 	cmp	result1, #0 wz
050b0     B4 08 90 AD |  if_e	jmp	#LR__0369
050b4     AB 01 00 FF 
050b8     F4 15 06 F6 | 	mov	arg02, ##@LR__5592
050bc     13 13 02 F6 | 	mov	arg01, local01
050c0     EC 08 B2 FD | 	call	#__system___string_cmp
050c4     00 FA 0D F2 | 	cmp	result1, #0 wz
050c8     A4 08 90 AD |  if_e	jmp	#LR__0370
050cc     AB 01 00 FF 
050d0     F7 15 06 F6 | 	mov	arg02, ##@LR__5593
050d4     13 13 02 F6 | 	mov	arg01, local01
050d8     D4 08 B2 FD | 	call	#__system___string_cmp
050dc     00 FA 0D F2 | 	cmp	result1, #0 wz
050e0     94 08 90 AD |  if_e	jmp	#LR__0371
050e4     AB 01 00 FF 
050e8     FC 15 06 F6 | 	mov	arg02, ##@LR__5594
050ec     13 13 02 F6 | 	mov	arg01, local01
050f0     BC 08 B2 FD | 	call	#__system___string_cmp
050f4     00 FA 0D F2 | 	cmp	result1, #0 wz
050f8     84 08 90 AD |  if_e	jmp	#LR__0372
050fc     AC 01 00 FF 
05100     00 14 06 F6 | 	mov	arg02, ##@LR__5595
05104     13 13 02 F6 | 	mov	arg01, local01
05108     A4 08 B2 FD | 	call	#__system___string_cmp
0510c     00 FA 0D F2 | 	cmp	result1, #0 wz
05110     74 08 90 AD |  if_e	jmp	#LR__0373
05114     AC 01 00 FF 
05118     06 14 06 F6 | 	mov	arg02, ##@LR__5596
0511c     13 13 02 F6 | 	mov	arg01, local01
05120     8C 08 B2 FD | 	call	#__system___string_cmp
05124     00 FA 0D F2 | 	cmp	result1, #0 wz
05128     64 08 90 AD |  if_e	jmp	#LR__0374
0512c     AC 01 00 FF 
05130     0C 14 06 F6 | 	mov	arg02, ##@LR__5597
05134     13 13 02 F6 | 	mov	arg01, local01
05138     74 08 B2 FD | 	call	#__system___string_cmp
0513c     00 FA 0D F2 | 	cmp	result1, #0 wz
05140     54 08 90 AD |  if_e	jmp	#LR__0375
05144     AC 01 00 FF 
05148     11 14 06 F6 | 	mov	arg02, ##@LR__5598
0514c     13 13 02 F6 | 	mov	arg01, local01
05150     5C 08 B2 FD | 	call	#__system___string_cmp
05154     00 FA 0D F2 | 	cmp	result1, #0 wz
05158     44 08 90 AD |  if_e	jmp	#LR__0376
0515c     AC 01 00 FF 
05160     14 14 06 F6 | 	mov	arg02, ##@LR__5599
05164     13 13 02 F6 | 	mov	arg01, local01
05168     44 08 B2 FD | 	call	#__system___string_cmp
0516c     00 FA 0D F2 | 	cmp	result1, #0 wz
05170     34 08 90 AD |  if_e	jmp	#LR__0377
05174     AC 01 00 FF 
05178     1A 14 06 F6 | 	mov	arg02, ##@LR__5600
0517c     13 13 02 F6 | 	mov	arg01, local01
05180     2C 08 B2 FD | 	call	#__system___string_cmp
05184     00 FA 0D F2 | 	cmp	result1, #0 wz
05188     24 08 90 AD |  if_e	jmp	#LR__0378
0518c     AC 01 00 FF 
05190     1E 14 06 F6 | 	mov	arg02, ##@LR__5601
05194     13 13 02 F6 | 	mov	arg01, local01
05198     14 08 B2 FD | 	call	#__system___string_cmp
0519c     00 FA 0D F2 | 	cmp	result1, #0 wz
051a0     14 08 90 AD |  if_e	jmp	#LR__0379
051a4     AC 01 00 FF 
051a8     23 14 06 F6 | 	mov	arg02, ##@LR__5602
051ac     13 13 02 F6 | 	mov	arg01, local01
051b0     FC 07 B2 FD | 	call	#__system___string_cmp
051b4     00 FA 0D F2 | 	cmp	result1, #0 wz
051b8     04 08 90 AD |  if_e	jmp	#LR__0380
051bc     AC 01 00 FF 
051c0     26 14 06 F6 | 	mov	arg02, ##@LR__5603
051c4     13 13 02 F6 | 	mov	arg01, local01
051c8     E4 07 B2 FD | 	call	#__system___string_cmp
051cc     00 FA 0D F2 | 	cmp	result1, #0 wz
051d0     F4 07 90 AD |  if_e	jmp	#LR__0381
051d4     AC 01 00 FF 
051d8     29 14 06 F6 | 	mov	arg02, ##@LR__5604
051dc     13 13 02 F6 | 	mov	arg01, local01
051e0     CC 07 B2 FD | 	call	#__system___string_cmp
051e4     00 FA 0D F2 | 	cmp	result1, #0 wz
051e8     E4 07 90 AD |  if_e	jmp	#LR__0382
051ec     AC 01 00 FF 
051f0     2E 14 06 F6 | 	mov	arg02, ##@LR__5605
051f4     13 13 02 F6 | 	mov	arg01, local01
051f8     B4 07 B2 FD | 	call	#__system___string_cmp
051fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05200     D4 07 90 AD |  if_e	jmp	#LR__0383
05204     AC 01 00 FF 
05208     34 14 06 F6 | 	mov	arg02, ##@LR__5606
0520c     13 13 02 F6 | 	mov	arg01, local01
05210     9C 07 B2 FD | 	call	#__system___string_cmp
05214     00 FA 0D F2 | 	cmp	result1, #0 wz
05218     C4 07 90 AD |  if_e	jmp	#LR__0384
0521c     AC 01 00 FF 
05220     38 14 06 F6 | 	mov	arg02, ##@LR__5607
05224     13 13 02 F6 | 	mov	arg01, local01
05228     84 07 B2 FD | 	call	#__system___string_cmp
0522c     00 FA 0D F2 | 	cmp	result1, #0 wz
05230     B4 07 90 AD |  if_e	jmp	#LR__0385
05234     AC 01 00 FF 
05238     41 14 06 F6 | 	mov	arg02, ##@LR__5608
0523c     13 13 02 F6 | 	mov	arg01, local01
05240     6C 07 B2 FD | 	call	#__system___string_cmp
05244     00 FA 0D F2 | 	cmp	result1, #0 wz
05248     A4 07 90 AD |  if_e	jmp	#LR__0386
0524c     AC 01 00 FF 
05250     47 14 06 F6 | 	mov	arg02, ##@LR__5609
05254     13 13 02 F6 | 	mov	arg01, local01
05258     54 07 B2 FD | 	call	#__system___string_cmp
0525c     00 FA 0D F2 | 	cmp	result1, #0 wz
05260     94 07 90 AD |  if_e	jmp	#LR__0387
05264     AC 01 00 FF 
05268     4D 14 06 F6 | 	mov	arg02, ##@LR__5610
0526c     13 13 02 F6 | 	mov	arg01, local01
05270     3C 07 B2 FD | 	call	#__system___string_cmp
05274     00 FA 0D F2 | 	cmp	result1, #0 wz
05278     84 07 90 AD |  if_e	jmp	#LR__0388
0527c     AC 01 00 FF 
05280     56 14 06 F6 | 	mov	arg02, ##@LR__5611
05284     13 13 02 F6 | 	mov	arg01, local01
05288     24 07 B2 FD | 	call	#__system___string_cmp
0528c     00 FA 0D F2 | 	cmp	result1, #0 wz
05290     74 07 90 AD |  if_e	jmp	#LR__0389
05294     AC 01 00 FF 
05298     60 14 06 F6 | 	mov	arg02, ##@LR__5612
0529c     13 13 02 F6 | 	mov	arg01, local01
052a0     0C 07 B2 FD | 	call	#__system___string_cmp
052a4     00 FA 0D F2 | 	cmp	result1, #0 wz
052a8     64 07 90 AD |  if_e	jmp	#LR__0390
052ac     AC 01 00 FF 
052b0     69 14 06 F6 | 	mov	arg02, ##@LR__5613
052b4     13 13 02 F6 | 	mov	arg01, local01
052b8     F4 06 B2 FD | 	call	#__system___string_cmp
052bc     00 FA 0D F2 | 	cmp	result1, #0 wz
052c0     54 07 90 AD |  if_e	jmp	#LR__0391
052c4     AC 01 00 FF 
052c8     6E 14 06 F6 | 	mov	arg02, ##@LR__5614
052cc     13 13 02 F6 | 	mov	arg01, local01
052d0     DC 06 B2 FD | 	call	#__system___string_cmp
052d4     00 FA 0D F2 | 	cmp	result1, #0 wz
052d8     44 07 90 AD |  if_e	jmp	#LR__0392
052dc     AC 01 00 FF 
052e0     71 14 06 F6 | 	mov	arg02, ##@LR__5615
052e4     13 13 02 F6 | 	mov	arg01, local01
052e8     C4 06 B2 FD | 	call	#__system___string_cmp
052ec     00 FA 0D F2 | 	cmp	result1, #0 wz
052f0     34 07 90 AD |  if_e	jmp	#LR__0393
052f4     AC 01 00 FF 
052f8     76 14 06 F6 | 	mov	arg02, ##@LR__5616
052fc     13 13 02 F6 | 	mov	arg01, local01
05300     AC 06 B2 FD | 	call	#__system___string_cmp
05304     00 FA 0D F2 | 	cmp	result1, #0 wz
05308     24 07 90 AD |  if_e	jmp	#LR__0394
0530c     AC 01 00 FF 
05310     7A 14 06 F6 | 	mov	arg02, ##@LR__5617
05314     13 13 02 F6 | 	mov	arg01, local01
05318     94 06 B2 FD | 	call	#__system___string_cmp
0531c     00 FA 0D F2 | 	cmp	result1, #0 wz
05320     14 07 90 AD |  if_e	jmp	#LR__0395
05324     AC 01 00 FF 
05328     7F 14 06 F6 | 	mov	arg02, ##@LR__5618
0532c     13 13 02 F6 | 	mov	arg01, local01
05330     7C 06 B2 FD | 	call	#__system___string_cmp
05334     00 FA 0D F2 | 	cmp	result1, #0 wz
05338     04 07 90 AD |  if_e	jmp	#LR__0396
0533c     AC 01 00 FF 
05340     83 14 06 F6 | 	mov	arg02, ##@LR__5619
05344     13 13 02 F6 | 	mov	arg01, local01
05348     64 06 B2 FD | 	call	#__system___string_cmp
0534c     00 FA 0D F2 | 	cmp	result1, #0 wz
05350     F4 06 90 AD |  if_e	jmp	#LR__0397
05354     AC 01 00 FF 
05358     8C 14 06 F6 | 	mov	arg02, ##@LR__5620
0535c     13 13 02 F6 | 	mov	arg01, local01
05360     4C 06 B2 FD | 	call	#__system___string_cmp
05364     00 FA 0D F2 | 	cmp	result1, #0 wz
05368     E4 06 90 AD |  if_e	jmp	#LR__0398
0536c     AC 01 00 FF 
05370     91 14 06 F6 | 	mov	arg02, ##@LR__5621
05374     13 13 02 F6 | 	mov	arg01, local01
05378     34 06 B2 FD | 	call	#__system___string_cmp
0537c     00 FA 0D F2 | 	cmp	result1, #0 wz
05380     D4 06 90 AD |  if_e	jmp	#LR__0399
05384     AC 01 00 FF 
05388     97 14 06 F6 | 	mov	arg02, ##@LR__5622
0538c     13 13 02 F6 | 	mov	arg01, local01
05390     1C 06 B2 FD | 	call	#__system___string_cmp
05394     00 FA 0D F2 | 	cmp	result1, #0 wz
05398     C4 06 90 AD |  if_e	jmp	#LR__0400
0539c     AC 01 00 FF 
053a0     99 14 06 F6 | 	mov	arg02, ##@LR__5623
053a4     13 13 02 F6 | 	mov	arg01, local01
053a8     04 06 B2 FD | 	call	#__system___string_cmp
053ac     00 FA 0D F2 | 	cmp	result1, #0 wz
053b0     B4 06 90 AD |  if_e	jmp	#LR__0401
053b4     AC 01 00 FF 
053b8     9D 14 06 F6 | 	mov	arg02, ##@LR__5624
053bc     13 13 02 F6 | 	mov	arg01, local01
053c0     EC 05 B2 FD | 	call	#__system___string_cmp
053c4     00 FA 0D F2 | 	cmp	result1, #0 wz
053c8     A4 06 90 AD |  if_e	jmp	#LR__0402
053cc     AC 01 00 FF 
053d0     A1 14 06 F6 | 	mov	arg02, ##@LR__5625
053d4     13 13 02 F6 | 	mov	arg01, local01
053d8     D4 05 B2 FD | 	call	#__system___string_cmp
053dc     00 FA 0D F2 | 	cmp	result1, #0 wz
053e0     94 06 90 AD |  if_e	jmp	#LR__0403
053e4     AC 01 00 FF 
053e8     A6 14 06 F6 | 	mov	arg02, ##@LR__5626
053ec     13 13 02 F6 | 	mov	arg01, local01
053f0     BC 05 B2 FD | 	call	#__system___string_cmp
053f4     00 FA 0D F2 | 	cmp	result1, #0 wz
053f8     84 06 90 AD |  if_e	jmp	#LR__0404
053fc     AC 01 00 FF 
05400     AE 14 06 F6 | 	mov	arg02, ##@LR__5627
05404     13 13 02 F6 | 	mov	arg01, local01
05408     A4 05 B2 FD | 	call	#__system___string_cmp
0540c     00 FA 0D F2 | 	cmp	result1, #0 wz
05410     74 06 90 AD |  if_e	jmp	#LR__0405
05414     AC 01 00 FF 
05418     B2 14 06 F6 | 	mov	arg02, ##@LR__5628
0541c     13 13 02 F6 | 	mov	arg01, local01
05420     8C 05 B2 FD | 	call	#__system___string_cmp
05424     00 FA 0D F2 | 	cmp	result1, #0 wz
05428     64 06 90 AD |  if_e	jmp	#LR__0406
0542c     AC 01 00 FF 
05430     B4 14 06 F6 | 	mov	arg02, ##@LR__5629
05434     13 13 02 F6 | 	mov	arg01, local01
05438     74 05 B2 FD | 	call	#__system___string_cmp
0543c     00 FA 0D F2 | 	cmp	result1, #0 wz
05440     54 06 90 AD |  if_e	jmp	#LR__0407
05444     AC 01 00 FF 
05448     BC 14 06 F6 | 	mov	arg02, ##@LR__5630
0544c     13 13 02 F6 | 	mov	arg01, local01
05450     5C 05 B2 FD | 	call	#__system___string_cmp
05454     00 FA 0D F2 | 	cmp	result1, #0 wz
05458     44 06 90 AD |  if_e	jmp	#LR__0408
0545c     AC 01 00 FF 
05460     C3 14 06 F6 | 	mov	arg02, ##@LR__5631
05464     13 13 02 F6 | 	mov	arg01, local01
05468     44 05 B2 FD | 	call	#__system___string_cmp
0546c     00 FA 0D F2 | 	cmp	result1, #0 wz
05470     34 06 90 AD |  if_e	jmp	#LR__0409
05474     AC 01 00 FF 
05478     C7 14 06 F6 | 	mov	arg02, ##@LR__5632
0547c     13 13 02 F6 | 	mov	arg01, local01
05480     2C 05 B2 FD | 	call	#__system___string_cmp
05484     00 FA 0D F2 | 	cmp	result1, #0 wz
05488     24 06 90 AD |  if_e	jmp	#LR__0410
0548c     AC 01 00 FF 
05490     CC 14 06 F6 | 	mov	arg02, ##@LR__5633
05494     13 13 02 F6 | 	mov	arg01, local01
05498     14 05 B2 FD | 	call	#__system___string_cmp
0549c     00 FA 0D F2 | 	cmp	result1, #0 wz
054a0     14 06 90 AD |  if_e	jmp	#LR__0411
054a4     AC 01 00 FF 
054a8     CF 14 06 F6 | 	mov	arg02, ##@LR__5634
054ac     13 13 02 F6 | 	mov	arg01, local01
054b0     FC 04 B2 FD | 	call	#__system___string_cmp
054b4     00 FA 0D F2 | 	cmp	result1, #0 wz
054b8     04 06 90 AD |  if_e	jmp	#LR__0412
054bc     AC 01 00 FF 
054c0     D8 14 06 F6 | 	mov	arg02, ##@LR__5635
054c4     13 13 02 F6 | 	mov	arg01, local01
054c8     E4 04 B2 FD | 	call	#__system___string_cmp
054cc     00 FA 0D F2 | 	cmp	result1, #0 wz
054d0     F4 05 90 AD |  if_e	jmp	#LR__0413
054d4     AC 01 00 FF 
054d8     DC 14 06 F6 | 	mov	arg02, ##@LR__5636
054dc     13 13 02 F6 | 	mov	arg01, local01
054e0     CC 04 B2 FD | 	call	#__system___string_cmp
054e4     00 FA 0D F2 | 	cmp	result1, #0 wz
054e8     E4 05 90 AD |  if_e	jmp	#LR__0414
054ec     AC 01 00 FF 
054f0     E3 14 06 F6 | 	mov	arg02, ##@LR__5637
054f4     13 13 02 F6 | 	mov	arg01, local01
054f8     B4 04 B2 FD | 	call	#__system___string_cmp
054fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05500     D4 05 90 AD |  if_e	jmp	#LR__0415
05504     AC 01 00 FF 
05508     E7 14 06 F6 | 	mov	arg02, ##@LR__5638
0550c     13 13 02 F6 | 	mov	arg01, local01
05510     9C 04 B2 FD | 	call	#__system___string_cmp
05514     00 FA 0D F2 | 	cmp	result1, #0 wz
05518     C4 05 90 AD |  if_e	jmp	#LR__0416
0551c     AC 01 00 FF 
05520     EE 14 06 F6 | 	mov	arg02, ##@LR__5639
05524     13 13 02 F6 | 	mov	arg01, local01
05528     84 04 B2 FD | 	call	#__system___string_cmp
0552c     00 FA 0D F2 | 	cmp	result1, #0 wz
05530     B4 05 90 AD |  if_e	jmp	#LR__0417
05534     AC 01 00 FF 
05538     F2 14 06 F6 | 	mov	arg02, ##@LR__5640
0553c     13 13 02 F6 | 	mov	arg01, local01
05540     6C 04 B2 FD | 	call	#__system___string_cmp
05544     00 FA 0D F2 | 	cmp	result1, #0 wz
05548     A4 05 90 AD |  if_e	jmp	#LR__0418
0554c     AC 01 00 FF 
05550     F9 14 06 F6 | 	mov	arg02, ##@LR__5641
05554     13 13 02 F6 | 	mov	arg01, local01
05558     54 04 B2 FD | 	call	#__system___string_cmp
0555c     00 FA 0D F2 | 	cmp	result1, #0 wz
05560     94 05 90 AD |  if_e	jmp	#LR__0419
05564     AC 01 00 FF 
05568     FD 14 06 F6 | 	mov	arg02, ##@LR__5642
0556c     13 13 02 F6 | 	mov	arg01, local01
05570     3C 04 B2 FD | 	call	#__system___string_cmp
05574     00 FA 0D F2 | 	cmp	result1, #0 wz
05578     84 05 90 AD |  if_e	jmp	#LR__0420
0557c     AC 01 00 FF 
05580     08 15 06 F6 | 	mov	arg02, ##@LR__5643
05584     13 13 02 F6 | 	mov	arg01, local01
05588     24 04 B2 FD | 	call	#__system___string_cmp
0558c     00 FA 0D F2 | 	cmp	result1, #0 wz
05590     74 05 90 AD |  if_e	jmp	#LR__0421
05594     AC 01 00 FF 
05598     0C 15 06 F6 | 	mov	arg02, ##@LR__5644
0559c     13 13 02 F6 | 	mov	arg01, local01
055a0     0C 04 B2 FD | 	call	#__system___string_cmp
055a4     00 FA 0D F2 | 	cmp	result1, #0 wz
055a8     64 05 90 AD |  if_e	jmp	#LR__0422
055ac     AC 01 00 FF 
055b0     13 15 06 F6 | 	mov	arg02, ##@LR__5645
055b4     13 13 02 F6 | 	mov	arg01, local01
055b8     F4 03 B2 FD | 	call	#__system___string_cmp
055bc     00 FA 0D F2 | 	cmp	result1, #0 wz
055c0     54 05 90 AD |  if_e	jmp	#LR__0423
055c4     AC 01 00 FF 
055c8     17 15 06 F6 | 	mov	arg02, ##@LR__5646
055cc     13 13 02 F6 | 	mov	arg01, local01
055d0     DC 03 B2 FD | 	call	#__system___string_cmp
055d4     00 FA 0D F2 | 	cmp	result1, #0 wz
055d8     44 05 90 AD |  if_e	jmp	#LR__0424
055dc     AC 01 00 FF 
055e0     1F 15 06 F6 | 	mov	arg02, ##@LR__5647
055e4     13 13 02 F6 | 	mov	arg01, local01
055e8     C4 03 B2 FD | 	call	#__system___string_cmp
055ec     00 FA 0D F2 | 	cmp	result1, #0 wz
055f0     34 05 90 AD |  if_e	jmp	#LR__0425
055f4     AC 01 00 FF 
055f8     23 15 06 F6 | 	mov	arg02, ##@LR__5648
055fc     13 13 02 F6 | 	mov	arg01, local01
05600     AC 03 B2 FD | 	call	#__system___string_cmp
05604     00 FA 0D F2 | 	cmp	result1, #0 wz
05608     24 05 90 AD |  if_e	jmp	#LR__0426
0560c     AC 01 00 FF 
05610     2A 15 06 F6 | 	mov	arg02, ##@LR__5649
05614     13 13 02 F6 | 	mov	arg01, local01
05618     94 03 B2 FD | 	call	#__system___string_cmp
0561c     00 FA 0D F2 | 	cmp	result1, #0 wz
05620     14 05 90 AD |  if_e	jmp	#LR__0427
05624     AC 01 00 FF 
05628     31 15 06 F6 | 	mov	arg02, ##@LR__5650
0562c     13 13 02 F6 | 	mov	arg01, local01
05630     7C 03 B2 FD | 	call	#__system___string_cmp
05634     00 FA 0D F2 | 	cmp	result1, #0 wz
05638     04 05 90 AD |  if_e	jmp	#LR__0428
0563c     AC 01 00 FF 
05640     35 15 06 F6 | 	mov	arg02, ##@LR__5651
05644     13 13 02 F6 | 	mov	arg01, local01
05648     64 03 B2 FD | 	call	#__system___string_cmp
0564c     00 FA 0D F2 | 	cmp	result1, #0 wz
05650     F4 04 90 AD |  if_e	jmp	#LR__0429
05654     AC 01 00 FF 
05658     3B 15 06 F6 | 	mov	arg02, ##@LR__5652
0565c     13 13 02 F6 | 	mov	arg01, local01
05660     4C 03 B2 FD | 	call	#__system___string_cmp
05664     00 FA 0D F2 | 	cmp	result1, #0 wz
05668     E4 04 90 AD |  if_e	jmp	#LR__0430
0566c     AC 01 00 FF 
05670     3F 15 06 F6 | 	mov	arg02, ##@LR__5653
05674     13 13 02 F6 | 	mov	arg01, local01
05678     34 03 B2 FD | 	call	#__system___string_cmp
0567c     00 FA 0D F2 | 	cmp	result1, #0 wz
05680     D4 04 90 AD |  if_e	jmp	#LR__0431
05684     AC 01 00 FF 
05688     46 15 06 F6 | 	mov	arg02, ##@LR__5654
0568c     13 13 02 F6 | 	mov	arg01, local01
05690     1C 03 B2 FD | 	call	#__system___string_cmp
05694     00 FA 0D F2 | 	cmp	result1, #0 wz
05698     C4 04 90 AD |  if_e	jmp	#LR__0432
0569c     AC 01 00 FF 
056a0     4B 15 06 F6 | 	mov	arg02, ##@LR__5655
056a4     13 13 02 F6 | 	mov	arg01, local01
056a8     04 03 B2 FD | 	call	#__system___string_cmp
056ac     00 FA 0D F2 | 	cmp	result1, #0 wz
056b0     B4 04 90 AD |  if_e	jmp	#LR__0433
056b4     AC 01 00 FF 
056b8     50 15 06 F6 | 	mov	arg02, ##@LR__5656
056bc     13 13 02 F6 | 	mov	arg01, local01
056c0     EC 02 B2 FD | 	call	#__system___string_cmp
056c4     00 FA 0D F2 | 	cmp	result1, #0 wz
056c8     A4 04 90 AD |  if_e	jmp	#LR__0434
056cc     AC 01 00 FF 
056d0     57 15 06 F6 | 	mov	arg02, ##@LR__5657
056d4     13 13 02 F6 | 	mov	arg01, local01
056d8     D4 02 B2 FD | 	call	#__system___string_cmp
056dc     00 FA 0D F2 | 	cmp	result1, #0 wz
056e0     94 04 90 AD |  if_e	jmp	#LR__0435
056e4     AC 01 00 FF 
056e8     5A 15 06 F6 | 	mov	arg02, ##@LR__5658
056ec     13 13 02 F6 | 	mov	arg01, local01
056f0     BC 02 B2 FD | 	call	#__system___string_cmp
056f4     00 FA 0D F2 | 	cmp	result1, #0 wz
056f8     84 04 90 AD |  if_e	jmp	#LR__0436
056fc     AC 01 00 FF 
05700     64 15 06 F6 | 	mov	arg02, ##@LR__5659
05704     13 13 02 F6 | 	mov	arg01, local01
05708     A4 02 B2 FD | 	call	#__system___string_cmp
0570c     00 FA 0D F2 | 	cmp	result1, #0 wz
05710     74 04 90 AD |  if_e	jmp	#LR__0437
05714     AC 01 00 FF 
05718     68 15 06 F6 | 	mov	arg02, ##@LR__5660
0571c     13 13 02 F6 | 	mov	arg01, local01
05720     8C 02 B2 FD | 	call	#__system___string_cmp
05724     00 FA 0D F2 | 	cmp	result1, #0 wz
05728     64 04 90 AD |  if_e	jmp	#LR__0438
0572c     AC 01 00 FF 
05730     70 15 06 F6 | 	mov	arg02, ##@LR__5661
05734     13 13 02 F6 | 	mov	arg01, local01
05738     74 02 B2 FD | 	call	#__system___string_cmp
0573c     00 FA 0D F2 | 	cmp	result1, #0 wz
05740     54 04 90 AD |  if_e	jmp	#LR__0439
05744     AC 01 00 FF 
05748     74 15 06 F6 | 	mov	arg02, ##@LR__5662
0574c     13 13 02 F6 | 	mov	arg01, local01
05750     5C 02 B2 FD | 	call	#__system___string_cmp
05754     00 FA 0D F2 | 	cmp	result1, #0 wz
05758     44 04 90 AD |  if_e	jmp	#LR__0440
0575c     AC 01 00 FF 
05760     7A 15 06 F6 | 	mov	arg02, ##@LR__5663
05764     13 13 02 F6 | 	mov	arg01, local01
05768     44 02 B2 FD | 	call	#__system___string_cmp
0576c     00 FA 0D F2 | 	cmp	result1, #0 wz
05770     34 04 90 AD |  if_e	jmp	#LR__0441
05774     AC 01 00 FF 
05778     80 15 06 F6 | 	mov	arg02, ##@LR__5664
0577c     13 13 02 F6 | 	mov	arg01, local01
05780     2C 02 B2 FD | 	call	#__system___string_cmp
05784     00 FA 0D F2 | 	cmp	result1, #0 wz
05788     24 04 90 AD |  if_e	jmp	#LR__0442
0578c     28 04 90 FD | 	jmp	#LR__0443
05790                 | LR__0310
05790     5C FA 05 F6 | 	mov	result1, #92
05794     24 04 90 FD | 	jmp	#LR__0444
05798                 | LR__0311
05798     5C FA 05 F6 | 	mov	result1, #92
0579c     1C 04 90 FD | 	jmp	#LR__0444
057a0                 | LR__0312
057a0     B9 FA 05 F6 | 	mov	result1, #185
057a4     14 04 90 FD | 	jmp	#LR__0444
057a8                 | LR__0313
057a8     47 FA 05 F6 | 	mov	result1, #71
057ac     0C 04 90 FD | 	jmp	#LR__0444
057b0                 | LR__0314
057b0     59 FA 05 F6 | 	mov	result1, #89
057b4     04 04 90 FD | 	jmp	#LR__0444
057b8                 | LR__0315
057b8     59 FA 05 F6 | 	mov	result1, #89
057bc     FC 03 90 FD | 	jmp	#LR__0444
057c0                 | LR__0316
057c0     C3 FA 05 F6 | 	mov	result1, #195
057c4     F4 03 90 FD | 	jmp	#LR__0444
057c8                 | LR__0317
057c8     AE FA 05 F6 | 	mov	result1, #174
057cc     EC 03 90 FD | 	jmp	#LR__0444
057d0                 | LR__0318
057d0     AE FA 05 F6 | 	mov	result1, #174
057d4     E4 03 90 FD | 	jmp	#LR__0444
057d8                 | LR__0319
057d8     B1 FA 05 F6 | 	mov	result1, #177
057dc     DC 03 90 FD | 	jmp	#LR__0444
057e0                 | LR__0320
057e0     B1 FA 05 F6 | 	mov	result1, #177
057e4     D4 03 90 FD | 	jmp	#LR__0444
057e8                 | LR__0321
057e8     AF FA 05 F6 | 	mov	result1, #175
057ec     CC 03 90 FD | 	jmp	#LR__0444
057f0                 | LR__0322
057f0     AF FA 05 F6 | 	mov	result1, #175
057f4     C4 03 90 FD | 	jmp	#LR__0444
057f8                 | LR__0323
057f8     B0 FA 05 F6 | 	mov	result1, #176
057fc     BC 03 90 FD | 	jmp	#LR__0444
05800                 | LR__0324
05800     B0 FA 05 F6 | 	mov	result1, #176
05804     B4 03 90 FD | 	jmp	#LR__0444
05808                 | LR__0325
05808     45 FA 05 F6 | 	mov	result1, #69
0580c     AC 03 90 FD | 	jmp	#LR__0444
05810                 | LR__0326
05810     45 FA 05 F6 | 	mov	result1, #69
05814     A4 03 90 FD | 	jmp	#LR__0444
05818                 | LR__0327
05818     69 FA 05 F6 | 	mov	result1, #105
0581c     9C 03 90 FD | 	jmp	#LR__0444
05820                 | LR__0328
05820     B4 FA 05 F6 | 	mov	result1, #180
05824     94 03 90 FD | 	jmp	#LR__0444
05828                 | LR__0329
05828     40 FA 05 F6 | 	mov	result1, #64
0582c     8C 03 90 FD | 	jmp	#LR__0444
05830                 | LR__0330
05830     49 FA 05 F6 | 	mov	result1, #73
05834     84 03 90 FD | 	jmp	#LR__0444
05838                 | LR__0331
05838     49 FA 05 F6 | 	mov	result1, #73
0583c     7C 03 90 FD | 	jmp	#LR__0444
05840                 | LR__0332
05840     50 FA 05 F6 | 	mov	result1, #80
05844     74 03 90 FD | 	jmp	#LR__0444
05848                 | LR__0333
05848     50 FA 05 F6 | 	mov	result1, #80
0584c     6C 03 90 FD | 	jmp	#LR__0444
05850                 | LR__0334
05850     68 FA 05 F6 | 	mov	result1, #104
05854     64 03 90 FD | 	jmp	#LR__0444
05858                 | LR__0335
05858     B7 FA 05 F6 | 	mov	result1, #183
0585c     5C 03 90 FD | 	jmp	#LR__0444
05860                 | LR__0336
05860     73 FA 05 F6 | 	mov	result1, #115
05864     54 03 90 FD | 	jmp	#LR__0444
05868                 | LR__0337
05868     74 FA 05 F6 | 	mov	result1, #116
0586c     4C 03 90 FD | 	jmp	#LR__0444
05870                 | LR__0338
05870     6C FA 05 F6 | 	mov	result1, #108
05874     44 03 90 FD | 	jmp	#LR__0444
05878                 | LR__0339
05878     6C FA 05 F6 | 	mov	result1, #108
0587c     3C 03 90 FD | 	jmp	#LR__0444
05880                 | LR__0340
05880     89 FA 05 F6 | 	mov	result1, #137
05884     34 03 90 FD | 	jmp	#LR__0444
05888                 | LR__0341
05888     C2 FA 05 F6 | 	mov	result1, #194
0588c     2C 03 90 FD | 	jmp	#LR__0444
05890                 | LR__0342
05890     72 FA 05 F6 | 	mov	result1, #114
05894     24 03 90 FD | 	jmp	#LR__0444
05898                 | LR__0343
05898     5D FA 05 F6 | 	mov	result1, #93
0589c     1C 03 90 FD | 	jmp	#LR__0444
058a0                 | LR__0344
058a0     96 FA 05 F6 | 	mov	result1, #150
058a4     14 03 90 FD | 	jmp	#LR__0444
058a8                 | LR__0345
058a8     43 FA 05 F6 | 	mov	result1, #67
058ac     0C 03 90 FD | 	jmp	#LR__0444
058b0                 | LR__0346
058b0     43 FA 05 F6 | 	mov	result1, #67
058b4     04 03 90 FD | 	jmp	#LR__0444
058b8                 | LR__0347
058b8     43 FA 05 F6 | 	mov	result1, #67
058bc     FC 02 90 FD | 	jmp	#LR__0444
058c0                 | LR__0348
058c0     5A FA 05 F6 | 	mov	result1, #90
058c4     F4 02 90 FD | 	jmp	#LR__0444
058c8                 | LR__0349
058c8     AB FA 05 F6 | 	mov	result1, #171
058cc     EC 02 90 FD | 	jmp	#LR__0444
058d0                 | LR__0350
058d0     BD FA 05 F6 | 	mov	result1, #189
058d4     E4 02 90 FD | 	jmp	#LR__0444
058d8                 | LR__0351
058d8     BD FA 05 F6 | 	mov	result1, #189
058dc     DC 02 90 FD | 	jmp	#LR__0444
058e0                 | LR__0352
058e0     46 FA 05 F6 | 	mov	result1, #70
058e4     D4 02 90 FD | 	jmp	#LR__0444
058e8                 | LR__0353
058e8     46 FA 05 F6 | 	mov	result1, #70
058ec     CC 02 90 FD | 	jmp	#LR__0444
058f0                 | LR__0354
058f0     71 FA 05 F6 | 	mov	result1, #113
058f4     C4 02 90 FD | 	jmp	#LR__0444
058f8                 | LR__0355
058f8     71 FA 05 F6 | 	mov	result1, #113
058fc     BC 02 90 FD | 	jmp	#LR__0444
05900                 | LR__0356
05900     60 FA 05 F6 | 	mov	result1, #96
05904     B4 02 90 FD | 	jmp	#LR__0444
05908                 | LR__0357
05908     4A FA 05 F6 | 	mov	result1, #74
0590c     AC 02 90 FD | 	jmp	#LR__0444
05910                 | LR__0358
05910     4A FA 05 F6 | 	mov	result1, #74
05914     A4 02 90 FD | 	jmp	#LR__0444
05918                 | LR__0359
05918     48 FA 05 F6 | 	mov	result1, #72
0591c     9C 02 90 FD | 	jmp	#LR__0444
05920                 | LR__0360
05920     48 FA 05 F6 | 	mov	result1, #72
05924     94 02 90 FD | 	jmp	#LR__0444
05928                 | LR__0361
05928     BB FA 05 F6 | 	mov	result1, #187
0592c     8C 02 90 FD | 	jmp	#LR__0444
05930                 | LR__0362
05930     A9 FA 05 F6 | 	mov	result1, #169
05934     84 02 90 FD | 	jmp	#LR__0444
05938                 | LR__0363
05938     4E FA 05 F6 | 	mov	result1, #78
0593c     7C 02 90 FD | 	jmp	#LR__0444
05940                 | LR__0364
05940     4E FA 05 F6 | 	mov	result1, #78
05944     74 02 90 FD | 	jmp	#LR__0444
05948                 | LR__0365
05948     58 FA 05 F6 | 	mov	result1, #88
0594c     6C 02 90 FD | 	jmp	#LR__0444
05950                 | LR__0366
05950     5F FA 05 F6 | 	mov	result1, #95
05954     64 02 90 FD | 	jmp	#LR__0444
05958                 | LR__0367
05958     5F FA 05 F6 | 	mov	result1, #95
0595c     5C 02 90 FD | 	jmp	#LR__0444
05960                 | LR__0368
05960     B5 FA 05 F6 | 	mov	result1, #181
05964     54 02 90 FD | 	jmp	#LR__0444
05968                 | LR__0369
05968     4C FA 05 F6 | 	mov	result1, #76
0596c     4C 02 90 FD | 	jmp	#LR__0444
05970                 | LR__0370
05970     4C FA 05 F6 | 	mov	result1, #76
05974     44 02 90 FD | 	jmp	#LR__0444
05978                 | LR__0371
05978     52 FA 05 F6 | 	mov	result1, #82
0597c     3C 02 90 FD | 	jmp	#LR__0444
05980                 | LR__0372
05980     52 FA 05 F6 | 	mov	result1, #82
05984     34 02 90 FD | 	jmp	#LR__0444
05988                 | LR__0373
05988     97 FA 05 F6 | 	mov	result1, #151
0598c     2C 02 90 FD | 	jmp	#LR__0444
05990                 | LR__0374
05990     C6 FA 05 F6 | 	mov	result1, #198
05994     24 02 90 FD | 	jmp	#LR__0444
05998                 | LR__0375
05998     61 FA 05 F6 | 	mov	result1, #97
0599c     1C 02 90 FD | 	jmp	#LR__0444
059a0                 | LR__0376
059a0     61 FA 05 F6 | 	mov	result1, #97
059a4     14 02 90 FD | 	jmp	#LR__0444
059a8                 | LR__0377
059a8     63 FA 05 F6 | 	mov	result1, #99
059ac     0C 02 90 FD | 	jmp	#LR__0444
059b0                 | LR__0378
059b0     41 FA 05 F6 | 	mov	result1, #65
059b4     04 02 90 FD | 	jmp	#LR__0444
059b8                 | LR__0379
059b8     4B FA 05 F6 | 	mov	result1, #75
059bc     FC 01 90 FD | 	jmp	#LR__0444
059c0                 | LR__0380
059c0     4B FA 05 F6 | 	mov	result1, #75
059c4     F4 01 90 FD | 	jmp	#LR__0444
059c8                 | LR__0381
059c8     C1 FA 05 F6 | 	mov	result1, #193
059cc     EC 01 90 FD | 	jmp	#LR__0444
059d0                 | LR__0382
059d0     B3 FA 05 F6 | 	mov	result1, #179
059d4     E4 01 90 FD | 	jmp	#LR__0444
059d8                 | LR__0383
059d8     5E FA 05 F6 | 	mov	result1, #94
059dc     DC 01 90 FD | 	jmp	#LR__0444
059e0                 | LR__0384
059e0     5E FA 05 F6 | 	mov	result1, #94
059e4     D4 01 90 FD | 	jmp	#LR__0444
059e8                 | LR__0385
059e8     7C FA 05 F6 | 	mov	result1, #124
059ec     CC 01 90 FD | 	jmp	#LR__0444
059f0                 | LR__0386
059f0     7E FA 05 F6 | 	mov	result1, #126
059f4     C4 01 90 FD | 	jmp	#LR__0444
059f8                 | LR__0387
059f8     7D FA 05 F6 | 	mov	result1, #125
059fc     BC 01 90 FD | 	jmp	#LR__0444
05a00                 | LR__0388
05a00     7F FA 05 F6 | 	mov	result1, #127
05a04     B4 01 90 FD | 	jmp	#LR__0444
05a08                 | LR__0389
05a08     80 FA 05 F6 | 	mov	result1, #128
05a0c     AC 01 90 FD | 	jmp	#LR__0444
05a10                 | LR__0390
05a10     55 FA 05 F6 | 	mov	result1, #85
05a14     A4 01 90 FD | 	jmp	#LR__0444
05a18                 | LR__0391
05a18     75 FA 05 F6 | 	mov	result1, #117
05a1c     9C 01 90 FD | 	jmp	#LR__0444
05a20                 | LR__0392
05a20     75 FA 05 F6 | 	mov	result1, #117
05a24     94 01 90 FD | 	jmp	#LR__0444
05a28                 | LR__0393
05a28     42 FA 05 F6 | 	mov	result1, #66
05a2c     8C 01 90 FD | 	jmp	#LR__0444
05a30                 | LR__0394
05a30     42 FA 05 F6 | 	mov	result1, #66
05a34     84 01 90 FD | 	jmp	#LR__0444
05a38                 | LR__0395
05a38     95 FA 05 F6 | 	mov	result1, #149
05a3c     7C 01 90 FD | 	jmp	#LR__0444
05a40                 | LR__0396
05a40     AC FA 05 F6 | 	mov	result1, #172
05a44     74 01 90 FD | 	jmp	#LR__0444
05a48                 | LR__0397
05a48     81 FA 05 F6 | 	mov	result1, #129
05a4c     6C 01 90 FD | 	jmp	#LR__0444
05a50                 | LR__0398
05a50     81 FA 05 F6 | 	mov	result1, #129
05a54     64 01 90 FD | 	jmp	#LR__0444
05a58                 | LR__0399
05a58     44 FA 05 F6 | 	mov	result1, #68
05a5c     5C 01 90 FD | 	jmp	#LR__0444
05a60                 | LR__0400
05a60     44 FA 05 F6 | 	mov	result1, #68
05a64     54 01 90 FD | 	jmp	#LR__0444
05a68                 | LR__0401
05a68     BC FA 05 F6 | 	mov	result1, #188
05a6c     4C 01 90 FD | 	jmp	#LR__0444
05a70                 | LR__0402
05a70     88 FA 05 F6 | 	mov	result1, #136
05a74     44 01 90 FD | 	jmp	#LR__0444
05a78                 | LR__0403
05a78     B6 FA 05 F6 | 	mov	result1, #182
05a7c     3C 01 90 FD | 	jmp	#LR__0444
05a80                 | LR__0404
05a80     92 FA 05 F6 | 	mov	result1, #146
05a84     34 01 90 FD | 	jmp	#LR__0444
05a88                 | LR__0405
05a88     BE FA 05 F6 | 	mov	result1, #190
05a8c     2C 01 90 FD | 	jmp	#LR__0444
05a90                 | LR__0406
05a90     BE FA 05 F6 | 	mov	result1, #190
05a94     24 01 90 FD | 	jmp	#LR__0444
05a98                 | LR__0407
05a98     C7 FA 05 F6 | 	mov	result1, #199
05a9c     1C 01 90 FD | 	jmp	#LR__0444
05aa0                 | LR__0408
05aa0     AA FA 05 F6 | 	mov	result1, #170
05aa4     14 01 90 FD | 	jmp	#LR__0444
05aa8                 | LR__0409
05aa8     4D FA 05 F6 | 	mov	result1, #77
05aac     0C 01 90 FD | 	jmp	#LR__0444
05ab0                 | LR__0410
05ab0     51 FA 05 F6 | 	mov	result1, #81
05ab4     04 01 90 FD | 	jmp	#LR__0444
05ab8                 | LR__0411
05ab8     51 FA 05 F6 | 	mov	result1, #81
05abc     FC 00 90 FD | 	jmp	#LR__0444
05ac0                 | LR__0412
05ac0     8E FA 05 F6 | 	mov	result1, #142
05ac4     F4 00 90 FD | 	jmp	#LR__0444
05ac8                 | LR__0413
05ac8     8E FA 05 F6 | 	mov	result1, #142
05acc     EC 00 90 FD | 	jmp	#LR__0444
05ad0                 | LR__0414
05ad0     90 FA 05 F6 | 	mov	result1, #144
05ad4     E4 00 90 FD | 	jmp	#LR__0444
05ad8                 | LR__0415
05ad8     90 FA 05 F6 | 	mov	result1, #144
05adc     DC 00 90 FD | 	jmp	#LR__0444
05ae0                 | LR__0416
05ae0     8D FA 05 F6 | 	mov	result1, #141
05ae4     D4 00 90 FD | 	jmp	#LR__0444
05ae8                 | LR__0417
05ae8     8D FA 05 F6 | 	mov	result1, #141
05aec     CC 00 90 FD | 	jmp	#LR__0444
05af0                 | LR__0418
05af0     8C FA 05 F6 | 	mov	result1, #140
05af4     C4 00 90 FD | 	jmp	#LR__0444
05af8                 | LR__0419
05af8     8C FA 05 F6 | 	mov	result1, #140
05afc     BC 00 90 FD | 	jmp	#LR__0444
05b00                 | LR__0420
05b00     91 FA 05 F6 | 	mov	result1, #145
05b04     B4 00 90 FD | 	jmp	#LR__0444
05b08                 | LR__0421
05b08     91 FA 05 F6 | 	mov	result1, #145
05b0c     AC 00 90 FD | 	jmp	#LR__0444
05b10                 | LR__0422
05b10     8B FA 05 F6 | 	mov	result1, #139
05b14     A4 00 90 FD | 	jmp	#LR__0444
05b18                 | LR__0423
05b18     8B FA 05 F6 | 	mov	result1, #139
05b1c     9C 00 90 FD | 	jmp	#LR__0444
05b20                 | LR__0424
05b20     8F FA 05 F6 | 	mov	result1, #143
05b24     94 00 90 FD | 	jmp	#LR__0444
05b28                 | LR__0425
05b28     8F FA 05 F6 | 	mov	result1, #143
05b2c     8C 00 90 FD | 	jmp	#LR__0444
05b30                 | LR__0426
05b30     8F FA 05 F6 | 	mov	result1, #143
05b34     84 00 90 FD | 	jmp	#LR__0444
05b38                 | LR__0427
05b38     B2 FA 05 F6 | 	mov	result1, #178
05b3c     7C 00 90 FD | 	jmp	#LR__0444
05b40                 | LR__0428
05b40     B2 FA 05 F6 | 	mov	result1, #178
05b44     74 00 90 FD | 	jmp	#LR__0444
05b48                 | LR__0429
05b48     75 FA 05 F6 | 	mov	result1, #117
05b4c     6C 00 90 FD | 	jmp	#LR__0444
05b50                 | LR__0430
05b50     75 FA 05 F6 | 	mov	result1, #117
05b54     64 00 90 FD | 	jmp	#LR__0444
05b58                 | LR__0431
05b58     6D FA 05 F6 | 	mov	result1, #109
05b5c     5C 00 90 FD | 	jmp	#LR__0444
05b60                 | LR__0432
05b60     6D FA 05 F6 | 	mov	result1, #109
05b64     54 00 90 FD | 	jmp	#LR__0444
05b68                 | LR__0433
05b68     5B FA 05 F6 | 	mov	result1, #91
05b6c     4C 00 90 FD | 	jmp	#LR__0444
05b70                 | LR__0434
05b70     56 FA 05 F6 | 	mov	result1, #86
05b74     44 00 90 FD | 	jmp	#LR__0444
05b78                 | LR__0435
05b78     56 FA 05 F6 | 	mov	result1, #86
05b7c     3C 00 90 FD | 	jmp	#LR__0444
05b80                 | LR__0436
05b80     70 FA 05 F6 | 	mov	result1, #112
05b84     34 00 90 FD | 	jmp	#LR__0444
05b88                 | LR__0437
05b88     70 FA 05 F6 | 	mov	result1, #112
05b8c     2C 00 90 FD | 	jmp	#LR__0444
05b90                 | LR__0438
05b90     57 FA 05 F6 | 	mov	result1, #87
05b94     24 00 90 FD | 	jmp	#LR__0444
05b98                 | LR__0439
05b98     57 FA 05 F6 | 	mov	result1, #87
05b9c     1C 00 90 FD | 	jmp	#LR__0444
05ba0                 | LR__0440
05ba0     79 FA 05 F6 | 	mov	result1, #121
05ba4     14 00 90 FD | 	jmp	#LR__0444
05ba8                 | LR__0441
05ba8     77 FA 05 F6 | 	mov	result1, #119
05bac     0C 00 90 FD | 	jmp	#LR__0444
05bb0                 | LR__0442
05bb0     78 FA 05 F6 | 	mov	result1, #120
05bb4     04 00 90 FD | 	jmp	#LR__0444
05bb8                 | LR__0443
05bb8     00 FA 05 F6 | 	mov	result1, #0
05bbc                 | LR__0444
05bbc     A7 F0 03 F6 | 	mov	ptra, fp
05bc0     B2 00 A0 FD | 	call	#popregs_
05bc4                 | _iscommand_ret
05bc4     2D 00 64 FD | 	ret
05bc8                 | 
05bc8                 | ' 
05bc8                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05bc8                 | ' 
05bc8                 | ' function isfunction(s as string) as ubyte
05bc8                 | _isfunction
05bc8     01 4A 05 F6 | 	mov	COUNT_, #1
05bcc     A8 00 A0 FD | 	call	#pushregs_
05bd0                 | ' 
05bd0                 | ' select case s
05bd0     09 27 02 F6 | 	mov	local01, arg01
05bd4     AC 01 00 FF 
05bd8     86 15 06 F6 | 	mov	arg02, ##@LR__5665
05bdc     13 13 02 F6 | 	mov	arg01, local01
05be0     CC FD B1 FD | 	call	#__system___string_cmp
05be4     00 FA 0D F2 | 	cmp	result1, #0 wz
05be8     9C 04 90 AD |  if_e	jmp	#LR__0450
05bec     AC 01 00 FF 
05bf0     8A 15 06 F6 | 	mov	arg02, ##@LR__5666
05bf4     13 13 02 F6 | 	mov	arg01, local01
05bf8     B4 FD B1 FD | 	call	#__system___string_cmp
05bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
05c00     8C 04 90 AD |  if_e	jmp	#LR__0451
05c04     AC 01 00 FF 
05c08     8F 15 06 F6 | 	mov	arg02, ##@LR__5667
05c0c     13 13 02 F6 | 	mov	arg01, local01
05c10     9C FD B1 FD | 	call	#__system___string_cmp
05c14     00 FA 0D F2 | 	cmp	result1, #0 wz
05c18     7C 04 90 AD |  if_e	jmp	#LR__0452
05c1c     AC 01 00 FF 
05c20     93 15 06 F6 | 	mov	arg02, ##@LR__5668
05c24     13 13 02 F6 | 	mov	arg01, local01
05c28     84 FD B1 FD | 	call	#__system___string_cmp
05c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
05c30     6C 04 90 AD |  if_e	jmp	#LR__0453
05c34     AC 01 00 FF 
05c38     98 15 06 F6 | 	mov	arg02, ##@LR__5669
05c3c     13 13 02 F6 | 	mov	arg01, local01
05c40     6C FD B1 FD | 	call	#__system___string_cmp
05c44     00 FA 0D F2 | 	cmp	result1, #0 wz
05c48     5C 04 90 AD |  if_e	jmp	#LR__0454
05c4c     AC 01 00 FF 
05c50     9C 15 06 F6 | 	mov	arg02, ##@LR__5670
05c54     13 13 02 F6 | 	mov	arg01, local01
05c58     54 FD B1 FD | 	call	#__system___string_cmp
05c5c     00 FA 0D F2 | 	cmp	result1, #0 wz
05c60     4C 04 90 AD |  if_e	jmp	#LR__0455
05c64     AC 01 00 FF 
05c68     A1 15 06 F6 | 	mov	arg02, ##@LR__5671
05c6c     13 13 02 F6 | 	mov	arg01, local01
05c70     3C FD B1 FD | 	call	#__system___string_cmp
05c74     00 FA 0D F2 | 	cmp	result1, #0 wz
05c78     3C 04 90 AD |  if_e	jmp	#LR__0456
05c7c     AC 01 00 FF 
05c80     A5 15 06 F6 | 	mov	arg02, ##@LR__5672
05c84     13 13 02 F6 | 	mov	arg01, local01
05c88     24 FD B1 FD | 	call	#__system___string_cmp
05c8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05c90     2C 04 90 AD |  if_e	jmp	#LR__0457
05c94     AC 01 00 FF 
05c98     AA 15 06 F6 | 	mov	arg02, ##@LR__5673
05c9c     13 13 02 F6 | 	mov	arg01, local01
05ca0     0C FD B1 FD | 	call	#__system___string_cmp
05ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ca8     1C 04 90 AD |  if_e	jmp	#LR__0458
05cac     AC 01 00 FF 
05cb0     AF 15 06 F6 | 	mov	arg02, ##@LR__5674
05cb4     13 13 02 F6 | 	mov	arg01, local01
05cb8     F4 FC B1 FD | 	call	#__system___string_cmp
05cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
05cc0     0C 04 90 AD |  if_e	jmp	#LR__0459
05cc4     AC 01 00 FF 
05cc8     B3 15 06 F6 | 	mov	arg02, ##@LR__5675
05ccc     13 13 02 F6 | 	mov	arg01, local01
05cd0     DC FC B1 FD | 	call	#__system___string_cmp
05cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
05cd8     FC 03 90 AD |  if_e	jmp	#LR__0460
05cdc     AC 01 00 FF 
05ce0     B9 15 06 F6 | 	mov	arg02, ##@LR__5676
05ce4     13 13 02 F6 | 	mov	arg01, local01
05ce8     C4 FC B1 FD | 	call	#__system___string_cmp
05cec     00 FA 0D F2 | 	cmp	result1, #0 wz
05cf0     EC 03 90 AD |  if_e	jmp	#LR__0461
05cf4     AC 01 00 FF 
05cf8     C2 15 06 F6 | 	mov	arg02, ##@LR__5677
05cfc     13 13 02 F6 | 	mov	arg01, local01
05d00     AC FC B1 FD | 	call	#__system___string_cmp
05d04     00 FA 0D F2 | 	cmp	result1, #0 wz
05d08     DC 03 90 AD |  if_e	jmp	#LR__0462
05d0c     AC 01 00 FF 
05d10     C6 15 06 F6 | 	mov	arg02, ##@LR__5678
05d14     13 13 02 F6 | 	mov	arg01, local01
05d18     94 FC B1 FD | 	call	#__system___string_cmp
05d1c     00 FA 0D F2 | 	cmp	result1, #0 wz
05d20     CC 03 90 AD |  if_e	jmp	#LR__0463
05d24     AC 01 00 FF 
05d28     CA 15 06 F6 | 	mov	arg02, ##@LR__5679
05d2c     13 13 02 F6 | 	mov	arg01, local01
05d30     7C FC B1 FD | 	call	#__system___string_cmp
05d34     00 FA 0D F2 | 	cmp	result1, #0 wz
05d38     BC 03 90 AD |  if_e	jmp	#LR__0464
05d3c     AC 01 00 FF 
05d40     D3 15 06 F6 | 	mov	arg02, ##@LR__5680
05d44     13 13 02 F6 | 	mov	arg01, local01
05d48     64 FC B1 FD | 	call	#__system___string_cmp
05d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
05d50     AC 03 90 AD |  if_e	jmp	#LR__0465
05d54     AC 01 00 FF 
05d58     D7 15 06 F6 | 	mov	arg02, ##@LR__5681
05d5c     13 13 02 F6 | 	mov	arg01, local01
05d60     4C FC B1 FD | 	call	#__system___string_cmp
05d64     00 FA 0D F2 | 	cmp	result1, #0 wz
05d68     9C 03 90 AD |  if_e	jmp	#LR__0466
05d6c     AC 01 00 FF 
05d70     E5 15 06 F6 | 	mov	arg02, ##@LR__5682
05d74     13 13 02 F6 | 	mov	arg01, local01
05d78     34 FC B1 FD | 	call	#__system___string_cmp
05d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
05d80     8C 03 90 AD |  if_e	jmp	#LR__0467
05d84     AC 01 00 FF 
05d88     F2 15 06 F6 | 	mov	arg02, ##@LR__5683
05d8c     13 13 02 F6 | 	mov	arg01, local01
05d90     1C FC B1 FD | 	call	#__system___string_cmp
05d94     00 FA 0D F2 | 	cmp	result1, #0 wz
05d98     7C 03 90 AD |  if_e	jmp	#LR__0468
05d9c     AC 01 00 FF 
05da0     FA 15 06 F6 | 	mov	arg02, ##@LR__5684
05da4     13 13 02 F6 | 	mov	arg01, local01
05da8     04 FC B1 FD | 	call	#__system___string_cmp
05dac     00 FA 0D F2 | 	cmp	result1, #0 wz
05db0     6C 03 90 AD |  if_e	jmp	#LR__0469
05db4     AC 01 00 FF 
05db8     FF 15 06 F6 | 	mov	arg02, ##@LR__5685
05dbc     13 13 02 F6 | 	mov	arg01, local01
05dc0     EC FB B1 FD | 	call	#__system___string_cmp
05dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
05dc8     5C 03 90 AD |  if_e	jmp	#LR__0470
05dcc     AD 01 00 FF 
05dd0     06 14 06 F6 | 	mov	arg02, ##@LR__5686
05dd4     13 13 02 F6 | 	mov	arg01, local01
05dd8     D4 FB B1 FD | 	call	#__system___string_cmp
05ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
05de0     4C 03 90 AD |  if_e	jmp	#LR__0471
05de4     AD 01 00 FF 
05de8     0A 14 06 F6 | 	mov	arg02, ##@LR__5687
05dec     13 13 02 F6 | 	mov	arg01, local01
05df0     BC FB B1 FD | 	call	#__system___string_cmp
05df4     00 FA 0D F2 | 	cmp	result1, #0 wz
05df8     3C 03 90 AD |  if_e	jmp	#LR__0472
05dfc     AD 01 00 FF 
05e00     10 14 06 F6 | 	mov	arg02, ##@LR__5688
05e04     13 13 02 F6 | 	mov	arg01, local01
05e08     A4 FB B1 FD | 	call	#__system___string_cmp
05e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
05e10     2C 03 90 AD |  if_e	jmp	#LR__0473
05e14     AD 01 00 FF 
05e18     14 14 06 F6 | 	mov	arg02, ##@LR__5689
05e1c     13 13 02 F6 | 	mov	arg01, local01
05e20     8C FB B1 FD | 	call	#__system___string_cmp
05e24     00 FA 0D F2 | 	cmp	result1, #0 wz
05e28     1C 03 90 AD |  if_e	jmp	#LR__0474
05e2c     AD 01 00 FF 
05e30     18 14 06 F6 | 	mov	arg02, ##@LR__5690
05e34     13 13 02 F6 | 	mov	arg01, local01
05e38     74 FB B1 FD | 	call	#__system___string_cmp
05e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
05e40     0C 03 90 AD |  if_e	jmp	#LR__0475
05e44     AD 01 00 FF 
05e48     1E 14 06 F6 | 	mov	arg02, ##@LR__5691
05e4c     13 13 02 F6 | 	mov	arg01, local01
05e50     5C FB B1 FD | 	call	#__system___string_cmp
05e54     00 FA 0D F2 | 	cmp	result1, #0 wz
05e58     FC 02 90 AD |  if_e	jmp	#LR__0476
05e5c     AD 01 00 FF 
05e60     23 14 06 F6 | 	mov	arg02, ##@LR__5692
05e64     13 13 02 F6 | 	mov	arg01, local01
05e68     44 FB B1 FD | 	call	#__system___string_cmp
05e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
05e70     EC 02 90 AD |  if_e	jmp	#LR__0477
05e74     AD 01 00 FF 
05e78     2A 14 06 F6 | 	mov	arg02, ##@LR__5693
05e7c     13 13 02 F6 | 	mov	arg01, local01
05e80     2C FB B1 FD | 	call	#__system___string_cmp
05e84     00 FA 0D F2 | 	cmp	result1, #0 wz
05e88     DC 02 90 AD |  if_e	jmp	#LR__0478
05e8c     AD 01 00 FF 
05e90     31 14 06 F6 | 	mov	arg02, ##@LR__5694
05e94     13 13 02 F6 | 	mov	arg01, local01
05e98     14 FB B1 FD | 	call	#__system___string_cmp
05e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
05ea0     CC 02 90 AD |  if_e	jmp	#LR__0479
05ea4     AD 01 00 FF 
05ea8     38 14 06 F6 | 	mov	arg02, ##@LR__5695
05eac     13 13 02 F6 | 	mov	arg01, local01
05eb0     FC FA B1 FD | 	call	#__system___string_cmp
05eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
05eb8     BC 02 90 AD |  if_e	jmp	#LR__0480
05ebc     AD 01 00 FF 
05ec0     3F 14 06 F6 | 	mov	arg02, ##@LR__5696
05ec4     13 13 02 F6 | 	mov	arg01, local01
05ec8     E4 FA B1 FD | 	call	#__system___string_cmp
05ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
05ed0     AC 02 90 AD |  if_e	jmp	#LR__0481
05ed4     AD 01 00 FF 
05ed8     44 14 06 F6 | 	mov	arg02, ##@LR__5697
05edc     13 13 02 F6 | 	mov	arg01, local01
05ee0     CC FA B1 FD | 	call	#__system___string_cmp
05ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ee8     9C 02 90 AD |  if_e	jmp	#LR__0482
05eec     AD 01 00 FF 
05ef0     49 14 06 F6 | 	mov	arg02, ##@LR__5698
05ef4     13 13 02 F6 | 	mov	arg01, local01
05ef8     B4 FA B1 FD | 	call	#__system___string_cmp
05efc     00 FA 0D F2 | 	cmp	result1, #0 wz
05f00     8C 02 90 AD |  if_e	jmp	#LR__0483
05f04     AD 01 00 FF 
05f08     4E 14 06 F6 | 	mov	arg02, ##@LR__5699
05f0c     13 13 02 F6 | 	mov	arg01, local01
05f10     9C FA B1 FD | 	call	#__system___string_cmp
05f14     00 FA 0D F2 | 	cmp	result1, #0 wz
05f18     7C 02 90 AD |  if_e	jmp	#LR__0484
05f1c     AD 01 00 FF 
05f20     53 14 06 F6 | 	mov	arg02, ##@LR__5700
05f24     13 13 02 F6 | 	mov	arg01, local01
05f28     84 FA B1 FD | 	call	#__system___string_cmp
05f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f30     6C 02 90 AD |  if_e	jmp	#LR__0485
05f34     AD 01 00 FF 
05f38     58 14 06 F6 | 	mov	arg02, ##@LR__5701
05f3c     13 13 02 F6 | 	mov	arg01, local01
05f40     6C FA B1 FD | 	call	#__system___string_cmp
05f44     00 FA 0D F2 | 	cmp	result1, #0 wz
05f48     5C 02 90 AD |  if_e	jmp	#LR__0486
05f4c     AD 01 00 FF 
05f50     60 14 06 F6 | 	mov	arg02, ##@LR__5702
05f54     13 13 02 F6 | 	mov	arg01, local01
05f58     54 FA B1 FD | 	call	#__system___string_cmp
05f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f60     4C 02 90 AD |  if_e	jmp	#LR__0487
05f64     AD 01 00 FF 
05f68     66 14 06 F6 | 	mov	arg02, ##@LR__5703
05f6c     13 13 02 F6 | 	mov	arg01, local01
05f70     3C FA B1 FD | 	call	#__system___string_cmp
05f74     00 FA 0D F2 | 	cmp	result1, #0 wz
05f78     3C 02 90 AD |  if_e	jmp	#LR__0488
05f7c     AD 01 00 FF 
05f80     6D 14 06 F6 | 	mov	arg02, ##@LR__5704
05f84     13 13 02 F6 | 	mov	arg01, local01
05f88     24 FA B1 FD | 	call	#__system___string_cmp
05f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f90     2C 02 90 AD |  if_e	jmp	#LR__0489
05f94     AD 01 00 FF 
05f98     73 14 06 F6 | 	mov	arg02, ##@LR__5705
05f9c     13 13 02 F6 | 	mov	arg01, local01
05fa0     0C FA B1 FD | 	call	#__system___string_cmp
05fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
05fa8     1C 02 90 AD |  if_e	jmp	#LR__0490
05fac     AD 01 00 FF 
05fb0     79 14 06 F6 | 	mov	arg02, ##@LR__5706
05fb4     13 13 02 F6 | 	mov	arg01, local01
05fb8     F4 F9 B1 FD | 	call	#__system___string_cmp
05fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
05fc0     0C 02 90 AD |  if_e	jmp	#LR__0491
05fc4     AD 01 00 FF 
05fc8     7D 14 06 F6 | 	mov	arg02, ##@LR__5707
05fcc     13 13 02 F6 | 	mov	arg01, local01
05fd0     DC F9 B1 FD | 	call	#__system___string_cmp
05fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
05fd8     FC 01 90 AD |  if_e	jmp	#LR__0492
05fdc     AD 01 00 FF 
05fe0     81 14 06 F6 | 	mov	arg02, ##@LR__5708
05fe4     13 13 02 F6 | 	mov	arg01, local01
05fe8     C4 F9 B1 FD | 	call	#__system___string_cmp
05fec     00 FA 0D F2 | 	cmp	result1, #0 wz
05ff0     EC 01 90 AD |  if_e	jmp	#LR__0493
05ff4     AD 01 00 FF 
05ff8     85 14 06 F6 | 	mov	arg02, ##@LR__5709
05ffc     13 13 02 F6 | 	mov	arg01, local01
06000     AC F9 B1 FD | 	call	#__system___string_cmp
06004     00 FA 0D F2 | 	cmp	result1, #0 wz
06008     DC 01 90 AD |  if_e	jmp	#LR__0494
0600c     AD 01 00 FF 
06010     8B 14 06 F6 | 	mov	arg02, ##@LR__5710
06014     13 13 02 F6 | 	mov	arg01, local01
06018     94 F9 B1 FD | 	call	#__system___string_cmp
0601c     00 FA 0D F2 | 	cmp	result1, #0 wz
06020     CC 01 90 AD |  if_e	jmp	#LR__0495
06024     AD 01 00 FF 
06028     91 14 06 F6 | 	mov	arg02, ##@LR__5711
0602c     13 13 02 F6 | 	mov	arg01, local01
06030     7C F9 B1 FD | 	call	#__system___string_cmp
06034     00 FA 0D F2 | 	cmp	result1, #0 wz
06038     BC 01 90 AD |  if_e	jmp	#LR__0496
0603c     AD 01 00 FF 
06040     96 14 06 F6 | 	mov	arg02, ##@LR__5712
06044     13 13 02 F6 | 	mov	arg01, local01
06048     64 F9 B1 FD | 	call	#__system___string_cmp
0604c     00 FA 0D F2 | 	cmp	result1, #0 wz
06050     AC 01 90 AD |  if_e	jmp	#LR__0497
06054     AD 01 00 FF 
06058     9A 14 06 F6 | 	mov	arg02, ##@LR__5713
0605c     13 13 02 F6 | 	mov	arg01, local01
06060     4C F9 B1 FD | 	call	#__system___string_cmp
06064     00 FA 0D F2 | 	cmp	result1, #0 wz
06068     9C 01 90 AD |  if_e	jmp	#LR__0498
0606c     AD 01 00 FF 
06070     9E 14 06 F6 | 	mov	arg02, ##@LR__5714
06074     13 13 02 F6 | 	mov	arg01, local01
06078     34 F9 B1 FD | 	call	#__system___string_cmp
0607c     00 FA 0D F2 | 	cmp	result1, #0 wz
06080     8C 01 90 AD |  if_e	jmp	#LR__0499
06084     90 01 90 FD | 	jmp	#LR__0500
06088                 | LR__0450
06088     9E FA 05 F6 | 	mov	result1, #158
0608c     8C 01 90 FD | 	jmp	#LR__0501
06090                 | LR__0451
06090     85 FA 05 F6 | 	mov	result1, #133
06094     84 01 90 FD | 	jmp	#LR__0501
06098                 | LR__0452
06098     9B FA 05 F6 | 	mov	result1, #155
0609c     7C 01 90 FD | 	jmp	#LR__0501
060a0                 | LR__0453
060a0     9B FA 05 F6 | 	mov	result1, #155
060a4     74 01 90 FD | 	jmp	#LR__0501
060a8                 | LR__0454
060a8     A7 FA 05 F6 | 	mov	result1, #167
060ac     6C 01 90 FD | 	jmp	#LR__0501
060b0                 | LR__0455
060b0     84 FA 05 F6 | 	mov	result1, #132
060b4     64 01 90 FD | 	jmp	#LR__0501
060b8                 | LR__0456
060b8     86 FA 05 F6 | 	mov	result1, #134
060bc     5C 01 90 FD | 	jmp	#LR__0501
060c0                 | LR__0457
060c0     A2 FA 05 F6 | 	mov	result1, #162
060c4     54 01 90 FD | 	jmp	#LR__0501
060c8                 | LR__0458
060c8     9F FA 05 F6 | 	mov	result1, #159
060cc     4C 01 90 FD | 	jmp	#LR__0501
060d0                 | LR__0459
060d0     82 FA 05 F6 | 	mov	result1, #130
060d4     44 01 90 FD | 	jmp	#LR__0501
060d8                 | LR__0460
060d8     99 FA 05 F6 | 	mov	result1, #153
060dc     3C 01 90 FD | 	jmp	#LR__0501
060e0                 | LR__0461
060e0     C5 FA 05 F6 | 	mov	result1, #197
060e4     34 01 90 FD | 	jmp	#LR__0501
060e8                 | LR__0462
060e8     C5 FA 05 F6 | 	mov	result1, #197
060ec     2C 01 90 FD | 	jmp	#LR__0501
060f0                 | LR__0463
060f0     9C FA 05 F6 | 	mov	result1, #156
060f4     24 01 90 FD | 	jmp	#LR__0501
060f8                 | LR__0464
060f8     6F FA 05 F6 | 	mov	result1, #111
060fc     1C 01 90 FD | 	jmp	#LR__0501
06100                 | LR__0465
06100     6F FA 05 F6 | 	mov	result1, #111
06104     14 01 90 FD | 	jmp	#LR__0501
06108                 | LR__0466
06108     93 FA 05 F6 | 	mov	result1, #147
0610c     0C 01 90 FD | 	jmp	#LR__0501
06110                 | LR__0467
06110     94 FA 05 F6 | 	mov	result1, #148
06114     04 01 90 FD | 	jmp	#LR__0501
06118                 | LR__0468
06118     62 FA 05 F6 | 	mov	result1, #98
0611c     FC 00 90 FD | 	jmp	#LR__0501
06120                 | LR__0469
06120     A3 FA 05 F6 | 	mov	result1, #163
06124     F4 00 90 FD | 	jmp	#LR__0501
06128                 | LR__0470
06128     9D FA 05 F6 | 	mov	result1, #157
0612c     EC 00 90 FD | 	jmp	#LR__0501
06130                 | LR__0471
06130     8A FA 05 F6 | 	mov	result1, #138
06134     E4 00 90 FD | 	jmp	#LR__0501
06138                 | LR__0472
06138     A4 FA 05 F6 | 	mov	result1, #164
0613c     DC 00 90 FD | 	jmp	#LR__0501
06140                 | LR__0473
06140     A8 FA 05 F6 | 	mov	result1, #168
06144     D4 00 90 FD | 	jmp	#LR__0501
06148                 | LR__0474
06148     AD FA 05 F6 | 	mov	result1, #173
0614c     CC 00 90 FD | 	jmp	#LR__0501
06150                 | LR__0475
06150     9A FA 05 F6 | 	mov	result1, #154
06154     C4 00 90 FD | 	jmp	#LR__0501
06158                 | LR__0476
06158     A6 FA 05 F6 | 	mov	result1, #166
0615c     BC 00 90 FD | 	jmp	#LR__0501
06160                 | LR__0477
06160     66 FA 05 F6 | 	mov	result1, #102
06164     B4 00 90 FD | 	jmp	#LR__0501
06168                 | LR__0478
06168     67 FA 05 F6 | 	mov	result1, #103
0616c     AC 00 90 FD | 	jmp	#LR__0501
06170                 | LR__0479
06170     64 FA 05 F6 | 	mov	result1, #100
06174     A4 00 90 FD | 	jmp	#LR__0501
06178                 | LR__0480
06178     65 FA 05 F6 | 	mov	result1, #101
0617c     9C 00 90 FD | 	jmp	#LR__0501
06180                 | LR__0481
06180     C8 FA 05 F6 | 	mov	result1, #200
06184     94 00 90 FD | 	jmp	#LR__0501
06188                 | LR__0482
06188     C9 FA 05 F6 | 	mov	result1, #201
0618c     8C 00 90 FD | 	jmp	#LR__0501
06190                 | LR__0483
06190     CA FA 05 F6 | 	mov	result1, #202
06194     84 00 90 FD | 	jmp	#LR__0501
06198                 | LR__0484
06198     CB FA 05 F6 | 	mov	result1, #203
0619c     7C 00 90 FD | 	jmp	#LR__0501
061a0                 | LR__0485
061a0     98 FA 05 F6 | 	mov	result1, #152
061a4     74 00 90 FD | 	jmp	#LR__0501
061a8                 | LR__0486
061a8     7B FA 05 F6 | 	mov	result1, #123
061ac     6C 00 90 FD | 	jmp	#LR__0501
061b0                 | LR__0487
061b0     76 FA 05 F6 | 	mov	result1, #118
061b4     64 00 90 FD | 	jmp	#LR__0501
061b8                 | LR__0488
061b8     A5 FA 05 F6 | 	mov	result1, #165
061bc     5C 00 90 FD | 	jmp	#LR__0501
061c0                 | LR__0489
061c0     7A FA 05 F6 | 	mov	result1, #122
061c4     54 00 90 FD | 	jmp	#LR__0501
061c8                 | LR__0490
061c8     BF FA 05 F6 | 	mov	result1, #191
061cc     4C 00 90 FD | 	jmp	#LR__0501
061d0                 | LR__0491
061d0     54 FA 05 F6 | 	mov	result1, #84
061d4     44 00 90 FD | 	jmp	#LR__0501
061d8                 | LR__0492
061d8     6B FA 05 F6 | 	mov	result1, #107
061dc     3C 00 90 FD | 	jmp	#LR__0501
061e0                 | LR__0493
061e0     87 FA 05 F6 | 	mov	result1, #135
061e4     34 00 90 FD | 	jmp	#LR__0501
061e8                 | LR__0494
061e8     6A FA 05 F6 | 	mov	result1, #106
061ec     2C 00 90 FD | 	jmp	#LR__0501
061f0                 | LR__0495
061f0     6E FA 05 F6 | 	mov	result1, #110
061f4     24 00 90 FD | 	jmp	#LR__0501
061f8                 | LR__0496
061f8     A1 FA 05 F6 | 	mov	result1, #161
061fc     1C 00 90 FD | 	jmp	#LR__0501
06200                 | LR__0497
06200     83 FA 05 F6 | 	mov	result1, #131
06204     14 00 90 FD | 	jmp	#LR__0501
06208                 | LR__0498
06208     A0 FA 05 F6 | 	mov	result1, #160
0620c     0C 00 90 FD | 	jmp	#LR__0501
06210                 | LR__0499
06210     9B FA 05 F6 | 	mov	result1, #155
06214     04 00 90 FD | 	jmp	#LR__0501
06218                 | LR__0500
06218     00 FA 05 F6 | 	mov	result1, #0
0621c                 | LR__0501
0621c     A7 F0 03 F6 | 	mov	ptra, fp
06220     B2 00 A0 FD | 	call	#popregs_
06224                 | _isfunction_ret
06224     2D 00 64 FD | 	ret
06228                 | 
06228                 | ' 
06228                 | ' ' Check if the part is a name
06228                 | ' 
06228                 | ' function isname(s as string) as boolean
06228                 | _isname
06228     0D 4A 05 F6 | 	mov	COUNT_, #13
0622c     A8 00 A0 FD | 	call	#pushregs_
06230     09 27 02 F6 | 	mov	local01, arg01
06234     09 29 02 F6 | 	mov	local02, arg01
06238     97 06 48 FB | 	callpa	#(@LR__0511-@LR__0510)>>2,fcache_load_ptr_
0623c                 | LR__0510
0623c     14 FB C9 FA | 	rdbyte	result1, local02 wz
06240     01 28 06 51 |  if_ne	add	local02, #1
06244     F4 FF 9F 5D |  if_ne	jmp	#LR__0510
06248                 | LR__0511
06248     09 29 82 F1 | 	sub	local02, arg01
0624c     14 FB 01 F6 | 	mov	result1, local02
06250     FD 2A 0A F6 | 	mov	local03, result1 wz
06254     00 FA 05 A6 |  if_e	mov	result1, #0
06258     34 02 90 AD |  if_e	jmp	#LR__0523
0625c     13 13 02 F6 | 	mov	arg01, local01
06260     01 14 06 F6 | 	mov	arg02, #1
06264     01 16 06 F6 | 	mov	arg03, #1
06268     B0 18 B2 FD | 	call	#__system__Mid_S
0626c     FD 2C 02 F6 | 	mov	local04, result1
06270                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
06270     AD 01 00 FF 
06274     A5 14 06 F6 | 	mov	arg02, ##@LR__5715
06278     16 13 02 F6 | 	mov	arg01, local04
0627c     30 F7 B1 FD | 	call	#__system___string_cmp
06280     00 FA 55 F2 | 	cmps	result1, #0 wc
06284     18 00 90 CD |  if_b	jmp	#LR__0512
06288     AD 01 00 FF 
0628c     A7 14 06 F6 | 	mov	arg02, ##@LR__5716
06290     16 13 02 F6 | 	mov	arg01, local04
06294     18 F7 B1 FD | 	call	#__system___string_cmp
06298     01 FA 55 F2 | 	cmps	result1, #1 wc
0629c     1C 00 90 CD |  if_b	jmp	#LR__0513
062a0                 | LR__0512
062a0     AD 01 00 FF 
062a4     A9 14 06 F6 | 	mov	arg02, ##@LR__5717
062a8     16 13 02 F6 | 	mov	arg01, local04
062ac     00 F7 B1 FD | 	call	#__system___string_cmp
062b0     00 FA 0D F2 | 	cmp	result1, #0 wz
062b4     00 FA 05 56 |  if_ne	mov	result1, #0
062b8     D4 01 90 5D |  if_ne	jmp	#LR__0523
062bc                 | LR__0513
062bc                 | ' if l>2 then 
062bc     03 2A 56 F2 | 	cmps	local03, #3 wc
062c0     C8 01 90 CD |  if_b	jmp	#LR__0522
062c4                 | '   for i=2 to l
062c4     02 2E 06 F6 | 	mov	local05, #2
062c8     15 31 02 F6 | 	mov	local06, local03
062cc     01 30 06 F1 | 	add	local06, #1
062d0                 | LR__0514
062d0     18 2F 52 F2 | 	cmps	local05, local06 wc
062d4     B4 01 90 3D |  if_ae	jmp	#LR__0521
062d8     13 13 02 F6 | 	mov	arg01, local01
062dc     17 15 02 F6 | 	mov	arg02, local05
062e0     01 16 06 F6 | 	mov	arg03, #1
062e4     34 18 B2 FD | 	call	#__system__Mid_S
062e8     FD 2C 02 F6 | 	mov	local04, result1
062ec                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
062ec     15 2F 52 F2 | 	cmps	local05, local03 wc
062f0     9C 00 90 3D |  if_ae	jmp	#LR__0517
062f4     AD 01 00 FF 
062f8     AB 14 06 F6 | 	mov	arg02, ##@LR__5718
062fc     16 13 02 F6 | 	mov	arg01, local04
06300     AC F6 B1 FD | 	call	#__system___string_cmp
06304     00 FA 55 F2 | 	cmps	result1, #0 wc
06308     18 00 90 CD |  if_b	jmp	#LR__0515
0630c     AD 01 00 FF 
06310     AD 14 06 F6 | 	mov	arg02, ##@LR__5719
06314     16 13 02 F6 | 	mov	arg01, local04
06318     94 F6 B1 FD | 	call	#__system___string_cmp
0631c     01 FA 55 F2 | 	cmps	result1, #1 wc
06320     6C 00 90 CD |  if_b	jmp	#LR__0517
06324                 | LR__0515
06324     AD 01 00 FF 
06328     AF 14 06 F6 | 	mov	arg02, ##@LR__5720
0632c     16 13 02 F6 | 	mov	arg01, local04
06330     7C F6 B1 FD | 	call	#__system___string_cmp
06334     00 FA 55 F2 | 	cmps	result1, #0 wc
06338     18 00 90 CD |  if_b	jmp	#LR__0516
0633c     AD 01 00 FF 
06340     B1 14 06 F6 | 	mov	arg02, ##@LR__5721
06344     16 13 02 F6 | 	mov	arg01, local04
06348     64 F6 B1 FD | 	call	#__system___string_cmp
0634c     01 FA 55 F2 | 	cmps	result1, #1 wc
06350     3C 00 90 CD |  if_b	jmp	#LR__0517
06354                 | LR__0516
06354     AD 01 00 FF 
06358     B3 32 06 F6 | 	mov	local07, ##@LR__5722
0635c     16 13 02 F6 | 	mov	arg01, local04
06360     19 15 02 F6 | 	mov	arg02, local07
06364     48 F6 B1 FD | 	call	#__system___string_cmp
06368     00 FA 0D F2 | 	cmp	result1, #0 wz
0636c     20 00 90 AD |  if_e	jmp	#LR__0517
06370     AD 01 00 FF 
06374     B5 34 06 F6 | 	mov	local08, ##@LR__5723
06378     16 13 02 F6 | 	mov	arg01, local04
0637c     1A 15 02 F6 | 	mov	arg02, local08
06380     2C F6 B1 FD | 	call	#__system___string_cmp
06384     FD 36 0A F6 | 	mov	local09, result1 wz
06388     00 FA 05 56 |  if_ne	mov	result1, #0
0638c     00 01 90 5D |  if_ne	jmp	#LR__0523
06390                 | LR__0517
06390                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06390     15 2F 0A F2 | 	cmp	local05, local03 wz
06394     EC 00 90 5D |  if_ne	jmp	#LR__0520
06398     AD 01 00 FF 
0639c     B7 38 06 F6 | 	mov	local10, ##@LR__5724
063a0     16 13 02 F6 | 	mov	arg01, local04
063a4     1C 15 02 F6 | 	mov	arg02, local10
063a8     04 F6 B1 FD | 	call	#__system___string_cmp
063ac     FD 3A 02 F6 | 	mov	local11, result1
063b0     00 3A 56 F2 | 	cmps	local11, #0 wc
063b4     1C 00 90 CD |  if_b	jmp	#LR__0518
063b8     AD 01 00 FF 
063bc     B9 14 06 F6 | 	mov	arg02, ##@LR__5725
063c0     16 13 02 F6 | 	mov	arg01, local04
063c4     E8 F5 B1 FD | 	call	#__system___string_cmp
063c8     FD 38 02 F6 | 	mov	local10, result1
063cc     01 38 56 F2 | 	cmps	local10, #1 wc
063d0     B0 00 90 CD |  if_b	jmp	#LR__0520
063d4                 | LR__0518
063d4     AD 01 00 FF 
063d8     BB 14 06 F6 | 	mov	arg02, ##@LR__5726
063dc     16 13 02 F6 | 	mov	arg01, local04
063e0     CC F5 B1 FD | 	call	#__system___string_cmp
063e4     00 FA 55 F2 | 	cmps	result1, #0 wc
063e8     1C 00 90 CD |  if_b	jmp	#LR__0519
063ec     AD 01 00 FF 
063f0     BD 36 06 F6 | 	mov	local09, ##@LR__5727
063f4     16 13 02 F6 | 	mov	arg01, local04
063f8     1B 15 02 F6 | 	mov	arg02, local09
063fc     B0 F5 B1 FD | 	call	#__system___string_cmp
06400     01 FA 55 F2 | 	cmps	result1, #1 wc
06404     7C 00 90 CD |  if_b	jmp	#LR__0520
06408                 | LR__0519
06408     AD 01 00 FF 
0640c     BF 36 06 F6 | 	mov	local09, ##@LR__5728
06410     16 13 02 F6 | 	mov	arg01, local04
06414     1B 15 02 F6 | 	mov	arg02, local09
06418     94 F5 B1 FD | 	call	#__system___string_cmp
0641c     00 FA 4D F2 | 	cmps	result1, #0 wz
06420     60 00 90 AD |  if_e	jmp	#LR__0520
06424     AD 01 00 FF 
06428     C1 34 06 F6 | 	mov	local08, ##@LR__5729
0642c     16 13 02 F6 | 	mov	arg01, local04
06430     1A 15 02 F6 | 	mov	arg02, local08
06434     78 F5 B1 FD | 	call	#__system___string_cmp
06438     FD 36 0A F6 | 	mov	local09, result1 wz
0643c     44 00 90 AD |  if_e	jmp	#LR__0520
06440     AD 01 00 FF 
06444     C3 3C 06 F6 | 	mov	local12, ##@LR__5730
06448     1E 35 02 F6 | 	mov	local08, local12
0644c     16 13 02 F6 | 	mov	arg01, local04
06450     1A 15 02 F6 | 	mov	arg02, local08
06454     58 F5 B1 FD | 	call	#__system___string_cmp
06458     FD 32 0A F6 | 	mov	local07, result1 wz
0645c     24 00 90 AD |  if_e	jmp	#LR__0520
06460     AD 01 00 FF 
06464     C5 3E 06 F6 | 	mov	local13, ##@LR__5731
06468     1F 3D 02 F6 | 	mov	local12, local13
0646c     16 13 02 F6 | 	mov	arg01, local04
06470     1E 15 02 F6 | 	mov	arg02, local12
06474     38 F5 B1 FD | 	call	#__system___string_cmp
06478     FD 34 0A F6 | 	mov	local08, result1 wz
0647c     00 FA 05 56 |  if_ne	mov	result1, #0
06480     0C 00 90 5D |  if_ne	jmp	#LR__0523
06484                 | LR__0520
06484     01 2E 06 F1 | 	add	local05, #1
06488     44 FE 9F FD | 	jmp	#LR__0514
0648c                 | LR__0521
0648c                 | LR__0522
0648c                 | ' return true
0648c     01 FA 65 F6 | 	neg	result1, #1
06490                 | LR__0523
06490     A7 F0 03 F6 | 	mov	ptra, fp
06494     B2 00 A0 FD | 	call	#popregs_
06498                 | _isname_ret
06498     2D 00 64 FD | 	ret
0649c                 | 
0649c                 | ' 
0649c                 | ' ' Check if the part is a number.  
0649c                 | ' 
0649c                 | ' function isnum(s as string) as boolean 
0649c                 | _isnum
0649c     13 4A 05 F6 | 	mov	COUNT_, #19
064a0     A8 00 A0 FD | 	call	#pushregs_
064a4     09 27 02 F6 | 	mov	local01, arg01
064a8     00 28 06 F6 | 	mov	local02, #0
064ac     00 2A 06 F6 | 	mov	local03, #0
064b0     13 13 02 F6 | 	mov	arg01, local01
064b4     09 2D 02 F6 | 	mov	local04, arg01
064b8     97 06 48 FB | 	callpa	#(@LR__0531-@LR__0530)>>2,fcache_load_ptr_
064bc                 | LR__0530
064bc     16 FB C9 FA | 	rdbyte	result1, local04 wz
064c0     01 2C 06 51 |  if_ne	add	local04, #1
064c4     F4 FF 9F 5D |  if_ne	jmp	#LR__0530
064c8                 | LR__0531
064c8     09 2D 82 F1 | 	sub	local04, arg01
064cc     16 FB 01 F6 | 	mov	result1, local04
064d0     FD 2E 0A F6 | 	mov	local05, result1 wz
064d4     00 FA 05 A6 |  if_e	mov	result1, #0
064d8     A0 03 90 AD |  if_e	jmp	#LR__0546
064dc     13 13 02 F6 | 	mov	arg01, local01
064e0     01 14 06 F6 | 	mov	arg02, #1
064e4     01 16 06 F6 | 	mov	arg03, #1
064e8     30 16 B2 FD | 	call	#__system__Mid_S
064ec     FD 30 02 F6 | 	mov	local06, result1
064f0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
064f0     AD 01 00 FF 
064f4     C7 14 06 F6 | 	mov	arg02, ##@LR__5732
064f8     18 13 02 F6 | 	mov	arg01, local06
064fc     B0 F4 B1 FD | 	call	#__system___string_cmp
06500     00 FA 55 F2 | 	cmps	result1, #0 wc
06504     1C 00 90 CD |  if_b	jmp	#LR__0532
06508     AD 01 00 FF 
0650c     C9 32 06 F6 | 	mov	local07, ##@LR__5733
06510     18 13 02 F6 | 	mov	arg01, local06
06514     19 15 02 F6 | 	mov	arg02, local07
06518     94 F4 B1 FD | 	call	#__system___string_cmp
0651c     01 FA 55 F2 | 	cmps	result1, #1 wc
06520     84 00 90 CD |  if_b	jmp	#LR__0533
06524                 | LR__0532
06524     AD 01 00 FF 
06528     CB 34 06 F6 | 	mov	local08, ##@LR__5734
0652c     1A 33 02 F6 | 	mov	local07, local08
06530     18 13 02 F6 | 	mov	arg01, local06
06534     19 15 02 F6 | 	mov	arg02, local07
06538     74 F4 B1 FD | 	call	#__system___string_cmp
0653c     00 FA 0D F2 | 	cmp	result1, #0 wz
06540     64 00 90 AD |  if_e	jmp	#LR__0533
06544     AD 01 00 FF 
06548     CD 36 06 F6 | 	mov	local09, ##@LR__5735
0654c     1B 35 02 F6 | 	mov	local08, local09
06550     18 13 02 F6 | 	mov	arg01, local06
06554     1A 15 02 F6 | 	mov	arg02, local08
06558     54 F4 B1 FD | 	call	#__system___string_cmp
0655c     FD 32 0A F6 | 	mov	local07, result1 wz
06560     44 00 90 AD |  if_e	jmp	#LR__0533
06564     AD 01 00 FF 
06568     CF 38 06 F6 | 	mov	local10, ##@LR__5736
0656c     1C 37 02 F6 | 	mov	local09, local10
06570     18 13 02 F6 | 	mov	arg01, local06
06574     1B 15 02 F6 | 	mov	arg02, local09
06578     34 F4 B1 FD | 	call	#__system___string_cmp
0657c     FD 34 0A F6 | 	mov	local08, result1 wz
06580     24 00 90 AD |  if_e	jmp	#LR__0533
06584     AD 01 00 FF 
06588     D1 3A 06 F6 | 	mov	local11, ##@LR__5737
0658c     1D 39 02 F6 | 	mov	local10, local11
06590     18 13 02 F6 | 	mov	arg01, local06
06594     1C 15 02 F6 | 	mov	arg02, local10
06598     14 F4 B1 FD | 	call	#__system___string_cmp
0659c     FD 36 0A F6 | 	mov	local09, result1 wz
065a0     00 FA 05 56 |  if_ne	mov	result1, #0
065a4     D4 02 90 5D |  if_ne	jmp	#LR__0546
065a8                 | LR__0533
065a8                 | ' if m$="." then ds=1
065a8     AD 01 00 FF 
065ac     D3 14 06 F6 | 	mov	arg02, ##@LR__5738
065b0     18 13 02 F6 | 	mov	arg01, local06
065b4     F8 F3 B1 FD | 	call	#__system___string_cmp
065b8     00 FA 0D F2 | 	cmp	result1, #0 wz
065bc     01 28 06 A6 |  if_e	mov	local02, #1
065c0                 | ' if m$="$" then hex=1 else hex=0
065c0     AD 01 00 FF 
065c4     D5 14 06 F6 | 	mov	arg02, ##@LR__5739
065c8     18 13 02 F6 | 	mov	arg01, local06
065cc     E0 F3 B1 FD | 	call	#__system___string_cmp
065d0     00 FA 0D F2 | 	cmp	result1, #0 wz
065d4     01 3C 06 A6 |  if_e	mov	local12, #1
065d8     00 3C 06 56 |  if_ne	mov	local12, #0
065dc                 | ' if m$="%" then bin=1 else bin=0
065dc     AD 01 00 FF 
065e0     D7 14 06 F6 | 	mov	arg02, ##@LR__5740
065e4     18 13 02 F6 | 	mov	arg01, local06
065e8     C4 F3 B1 FD | 	call	#__system___string_cmp
065ec     00 FA 0D F2 | 	cmp	result1, #0 wz
065f0     01 3E 06 A6 |  if_e	mov	local13, #1
065f4     00 3E 06 56 |  if_ne	mov	local13, #0
065f8                 | ' if l>1 then 
065f8     02 2E 56 F2 | 	cmps	local05, #2 wc
065fc     78 02 90 CD |  if_b	jmp	#LR__0545
06600                 | '   for i=2 to l
06600     02 40 06 F6 | 	mov	local14, #2
06604     17 43 02 F6 | 	mov	local15, local05
06608     01 42 06 F1 | 	add	local15, #1
0660c                 | LR__0534
0660c     21 41 52 F2 | 	cmps	local14, local15 wc
06610     64 02 90 3D |  if_ae	jmp	#LR__0544
06614     13 13 02 F6 | 	mov	arg01, local01
06618     20 15 02 F6 | 	mov	arg02, local14
0661c     01 16 06 F6 | 	mov	arg03, #1
06620     F8 14 B2 FD | 	call	#__system__Mid_S
06624     FD 30 02 F6 | 	mov	local06, result1
06628     00 44 06 F6 | 	mov	local16, #0
0662c                 | '     m$=mid$(s,i,1) : b=false
0662c                 | '     if m$>="0" andalso m$<="9" then b=true  
0662c     AD 01 00 FF 
06630     D9 14 06 F6 | 	mov	arg02, ##@LR__5741
06634     18 13 02 F6 | 	mov	arg01, local06
06638     74 F3 B1 FD | 	call	#__system___string_cmp
0663c     00 FA 55 F2 | 	cmps	result1, #0 wc
06640     1C 00 90 CD |  if_b	jmp	#LR__0535
06644     AD 01 00 FF 
06648     DB 32 06 F6 | 	mov	local07, ##@LR__5742
0664c     18 13 02 F6 | 	mov	arg01, local06
06650     19 15 02 F6 | 	mov	arg02, local07
06654     58 F3 B1 FD | 	call	#__system___string_cmp
06658     01 FA 55 F2 | 	cmps	result1, #1 wc
0665c     01 44 66 C6 |  if_b	neg	local16, #1
06660                 | LR__0535
06660                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06660     AD 01 00 FF 
06664     DD 14 06 F6 | 	mov	arg02, ##@LR__5743
06668     18 13 02 F6 | 	mov	arg01, local06
0666c     40 F3 B1 FD | 	call	#__system___string_cmp
06670     00 FA 0D F2 | 	cmp	result1, #0 wz
06674     7C 00 90 AD |  if_e	jmp	#LR__0536
06678     AD 01 00 FF 
0667c     DF 32 06 F6 | 	mov	local07, ##@LR__5744
06680     18 13 02 F6 | 	mov	arg01, local06
06684     19 15 02 F6 | 	mov	arg02, local07
06688     24 F3 B1 FD | 	call	#__system___string_cmp
0668c     00 FA 0D F2 | 	cmp	result1, #0 wz
06690     60 00 90 AD |  if_e	jmp	#LR__0536
06694     AD 01 00 FF 
06698     E1 34 06 F6 | 	mov	local08, ##@LR__5745
0669c     1A 33 02 F6 | 	mov	local07, local08
066a0     18 13 02 F6 | 	mov	arg01, local06
066a4     19 15 02 F6 | 	mov	arg02, local07
066a8     04 F3 B1 FD | 	call	#__system___string_cmp
066ac     00 FA 0D F2 | 	cmp	result1, #0 wz
066b0     40 00 90 AD |  if_e	jmp	#LR__0536
066b4     AD 01 00 FF 
066b8     E3 36 06 F6 | 	mov	local09, ##@LR__5746
066bc     1B 35 02 F6 | 	mov	local08, local09
066c0     18 13 02 F6 | 	mov	arg01, local06
066c4     1A 15 02 F6 | 	mov	arg02, local08
066c8     E4 F2 B1 FD | 	call	#__system___string_cmp
066cc     FD 32 0A F6 | 	mov	local07, result1 wz
066d0     20 00 90 AD |  if_e	jmp	#LR__0536
066d4     AD 01 00 FF 
066d8     E5 38 06 F6 | 	mov	local10, ##@LR__5747
066dc     1C 37 02 F6 | 	mov	local09, local10
066e0     18 13 02 F6 | 	mov	arg01, local06
066e4     1B 15 02 F6 | 	mov	arg02, local09
066e8     C4 F2 B1 FD | 	call	#__system___string_cmp
066ec     FD 34 0A F6 | 	mov	local08, result1 wz
066f0     04 00 90 5D |  if_ne	jmp	#LR__0537
066f4                 | LR__0536
066f4     01 44 66 F6 | 	neg	local16, #1
066f8                 | LR__0537
066f8                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
066f8     01 3C 0E F2 | 	cmp	local12, #1 wz
066fc     34 00 90 5D |  if_ne	jmp	#LR__0538
06700     AD 01 00 FF 
06704     E7 14 06 F6 | 	mov	arg02, ##@LR__5748
06708     18 13 02 F6 | 	mov	arg01, local06
0670c     A0 F2 B1 FD | 	call	#__system___string_cmp
06710     00 FA 55 F2 | 	cmps	result1, #0 wc
06714     1C 00 90 CD |  if_b	jmp	#LR__0538
06718     AD 01 00 FF 
0671c     E9 32 06 F6 | 	mov	local07, ##@LR__5749
06720     18 13 02 F6 | 	mov	arg01, local06
06724     19 15 02 F6 | 	mov	arg02, local07
06728     84 F2 B1 FD | 	call	#__system___string_cmp
0672c     01 FA 55 F2 | 	cmps	result1, #1 wc
06730     01 44 66 C6 |  if_b	neg	local16, #1
06734                 | LR__0538
06734                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06734     01 3E 0E F2 | 	cmp	local13, #1 wz
06738     58 00 90 5D |  if_ne	jmp	#LR__0540
0673c     AD 01 00 FF 
06740     EB 14 06 F6 | 	mov	arg02, ##@LR__5750
06744     18 13 02 F6 | 	mov	arg01, local06
06748     64 F2 B1 FD | 	call	#__system___string_cmp
0674c     00 FA 55 F2 | 	cmps	result1, #0 wc
06750     1C 00 90 CD |  if_b	jmp	#LR__0539
06754     AD 01 00 FF 
06758     ED 32 06 F6 | 	mov	local07, ##@LR__5751
0675c     18 13 02 F6 | 	mov	arg01, local06
06760     19 15 02 F6 | 	mov	arg02, local07
06764     48 F2 B1 FD | 	call	#__system___string_cmp
06768     01 FA 55 F2 | 	cmps	result1, #1 wc
0676c     24 00 90 CD |  if_b	jmp	#LR__0540
06770                 | LR__0539
06770     AD 01 00 FF 
06774     EF 34 06 F6 | 	mov	local08, ##@LR__5752
06778     1A 33 02 F6 | 	mov	local07, local08
0677c     18 13 02 F6 | 	mov	arg01, local06
06780     19 15 02 F6 | 	mov	arg02, local07
06784     28 F2 B1 FD | 	call	#__system___string_cmp
06788     00 FA 0D F2 | 	cmp	result1, #0 wz
0678c     00 FA 05 56 |  if_ne	mov	result1, #0
06790     E8 00 90 5D |  if_ne	jmp	#LR__0546
06794                 | LR__0540
06794                 | '     if not b then return false
06794     22 45 22 F6 | 	not	local16, local16
06798     00 44 0E F2 | 	cmp	local16, #0 wz
0679c     00 FA 05 56 |  if_ne	mov	result1, #0
067a0     D8 00 90 5D |  if_ne	jmp	#LR__0546
067a4                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
067a4     AD 01 00 FF 
067a8     F1 14 06 F6 | 	mov	arg02, ##@LR__5753
067ac     18 13 02 F6 | 	mov	arg01, local06
067b0     FC F1 B1 FD | 	call	#__system___string_cmp
067b4     00 FA 0D F2 | 	cmp	result1, #0 wz
067b8     3C 00 90 5D |  if_ne	jmp	#LR__0541
067bc     20 15 02 F6 | 	mov	arg02, local14
067c0     01 14 86 F1 | 	sub	arg02, #1
067c4     13 13 02 F6 | 	mov	arg01, local01
067c8     01 16 06 F6 | 	mov	arg03, #1
067cc     4C 13 B2 FD | 	call	#__system__Mid_S
067d0     FD 12 02 F6 | 	mov	arg01, result1
067d4     3C 15 B2 FD | 	call	#__system__LCase_S
067d8     FD 12 02 F6 | 	mov	arg01, result1
067dc     AD 01 00 FF 
067e0     F3 32 06 F6 | 	mov	local07, ##@LR__5754
067e4     19 15 02 F6 | 	mov	arg02, local07
067e8     C4 F1 B1 FD | 	call	#__system___string_cmp
067ec     00 FA 0D F2 | 	cmp	result1, #0 wz
067f0     00 FA 05 56 |  if_ne	mov	result1, #0
067f4     84 00 90 5D |  if_ne	jmp	#LR__0546
067f8                 | LR__0541
067f8                 | '     if m$="." then ds+=1: if ds>1 then return false
067f8     AD 01 00 FF 
067fc     F5 14 06 F6 | 	mov	arg02, ##@LR__5755
06800     18 13 02 F6 | 	mov	arg01, local06
06804     A8 F1 B1 FD | 	call	#__system___string_cmp
06808     00 FA 0D F2 | 	cmp	result1, #0 wz
0680c     01 28 06 A1 |  if_e	add	local02, #1
06810     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06814     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06818     60 00 90 2D |  if_nc_and_z	jmp	#LR__0546
0681c                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
0681c     AD 01 00 FF 
06820     F7 46 06 F6 | 	mov	local17, ##@LR__5756
06824     23 49 02 F6 | 	mov	local18, local17
06828     18 13 02 F6 | 	mov	arg01, local06
0682c     24 15 02 F6 | 	mov	arg02, local18
06830     7C F1 B1 FD | 	call	#__system___string_cmp
06834     FD 4A 0A F6 | 	mov	local19, result1 wz
06838     20 00 90 AD |  if_e	jmp	#LR__0542
0683c     AD 01 00 FF 
06840     F9 32 06 F6 | 	mov	local07, ##@LR__5757
06844     19 47 02 F6 | 	mov	local17, local07
06848     18 13 02 F6 | 	mov	arg01, local06
0684c     23 15 02 F6 | 	mov	arg02, local17
06850     5C F1 B1 FD | 	call	#__system___string_cmp
06854     FD 48 0A F6 | 	mov	local18, result1 wz
06858     14 00 90 5D |  if_ne	jmp	#LR__0543
0685c                 | LR__0542
0685c     01 2A 06 F1 | 	add	local03, #1
06860     00 3C 0E F2 | 	cmp	local12, #0 wz
06864     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06868     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
0686c     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0546
06870                 | LR__0543
06870     01 40 06 F1 | 	add	local14, #1
06874     94 FD 9F FD | 	jmp	#LR__0534
06878                 | LR__0544
06878                 | LR__0545
06878                 | ' return true
06878     01 FA 65 F6 | 	neg	result1, #1
0687c                 | LR__0546
0687c     A7 F0 03 F6 | 	mov	ptra, fp
06880     B2 00 A0 FD | 	call	#popregs_
06884                 | _isnum_ret
06884     2D 00 64 FD | 	ret
06888                 | 
06888                 | '   
06888                 | ' ' Check if the part is an integer number.    
06888                 | '   
06888                 | ' function isint(s as string) as boolean
06888                 | _isint
06888     0E 4A 05 F6 | 	mov	COUNT_, #14
0688c     A8 00 A0 FD | 	call	#pushregs_
06890     09 27 02 F6 | 	mov	local01, arg01
06894     09 29 02 F6 | 	mov	local02, arg01
06898     97 06 48 FB | 	callpa	#(@LR__0551-@LR__0550)>>2,fcache_load_ptr_
0689c                 | LR__0550
0689c     14 FB C9 FA | 	rdbyte	result1, local02 wz
068a0     01 28 06 51 |  if_ne	add	local02, #1
068a4     F4 FF 9F 5D |  if_ne	jmp	#LR__0550
068a8                 | LR__0551
068a8     09 29 82 F1 | 	sub	local02, arg01
068ac     14 FB 01 F6 | 	mov	result1, local02
068b0     FD 2A 0A F6 | 	mov	local03, result1 wz
068b4     00 FA 05 A6 |  if_e	mov	result1, #0
068b8     64 02 90 AD |  if_e	jmp	#LR__0564
068bc     13 13 02 F6 | 	mov	arg01, local01
068c0     01 14 06 F6 | 	mov	arg02, #1
068c4     01 16 06 F6 | 	mov	arg03, #1
068c8     50 12 B2 FD | 	call	#__system__Mid_S
068cc     FD 2C 02 F6 | 	mov	local04, result1
068d0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
068d0     AD 01 00 FF 
068d4     FB 14 06 F6 | 	mov	arg02, ##@LR__5758
068d8     16 13 02 F6 | 	mov	arg01, local04
068dc     D0 F0 B1 FD | 	call	#__system___string_cmp
068e0     00 FA 55 F2 | 	cmps	result1, #0 wc
068e4     1C 00 90 CD |  if_b	jmp	#LR__0552
068e8     AD 01 00 FF 
068ec     FD 2E 06 F6 | 	mov	local05, ##@LR__5759
068f0     16 13 02 F6 | 	mov	arg01, local04
068f4     17 15 02 F6 | 	mov	arg02, local05
068f8     B4 F0 B1 FD | 	call	#__system___string_cmp
068fc     01 FA 55 F2 | 	cmps	result1, #1 wc
06900     64 00 90 CD |  if_b	jmp	#LR__0553
06904                 | LR__0552
06904     AD 01 00 FF 
06908     FF 30 06 F6 | 	mov	local06, ##@LR__5760
0690c     18 2F 02 F6 | 	mov	local05, local06
06910     16 13 02 F6 | 	mov	arg01, local04
06914     17 15 02 F6 | 	mov	arg02, local05
06918     94 F0 B1 FD | 	call	#__system___string_cmp
0691c     00 FA 0D F2 | 	cmp	result1, #0 wz
06920     44 00 90 AD |  if_e	jmp	#LR__0553
06924     AD 01 00 FF 
06928     01 33 06 F6 | 	mov	local07, ##@LR__5761
0692c     19 31 02 F6 | 	mov	local06, local07
06930     16 13 02 F6 | 	mov	arg01, local04
06934     18 15 02 F6 | 	mov	arg02, local06
06938     74 F0 B1 FD | 	call	#__system___string_cmp
0693c     FD 2E 0A F6 | 	mov	local05, result1 wz
06940     24 00 90 AD |  if_e	jmp	#LR__0553
06944     AD 01 00 FF 
06948     03 35 06 F6 | 	mov	local08, ##@LR__5762
0694c     1A 33 02 F6 | 	mov	local07, local08
06950     16 13 02 F6 | 	mov	arg01, local04
06954     19 15 02 F6 | 	mov	arg02, local07
06958     54 F0 B1 FD | 	call	#__system___string_cmp
0695c     FD 30 0A F6 | 	mov	local06, result1 wz
06960     00 FA 05 56 |  if_ne	mov	result1, #0
06964     B8 01 90 5D |  if_ne	jmp	#LR__0564
06968                 | LR__0553
06968                 | ' if m$="$" then hex=1 else hex=0
06968     AD 01 00 FF 
0696c     05 15 06 F6 | 	mov	arg02, ##@LR__5763
06970     16 13 02 F6 | 	mov	arg01, local04
06974     38 F0 B1 FD | 	call	#__system___string_cmp
06978     00 FA 0D F2 | 	cmp	result1, #0 wz
0697c     01 36 06 A6 |  if_e	mov	local09, #1
06980     00 36 06 56 |  if_ne	mov	local09, #0
06984                 | ' if m$="%" then bin=1 else bin=0
06984     AD 01 00 FF 
06988     07 15 06 F6 | 	mov	arg02, ##@LR__5764
0698c     16 13 02 F6 | 	mov	arg01, local04
06990     1C F0 B1 FD | 	call	#__system___string_cmp
06994     00 FA 0D F2 | 	cmp	result1, #0 wz
06998     01 38 06 A6 |  if_e	mov	local10, #1
0699c     00 38 06 56 |  if_ne	mov	local10, #0
069a0                 | ' if l>1 then 
069a0     02 2A 56 F2 | 	cmps	local03, #2 wc
069a4     74 01 90 CD |  if_b	jmp	#LR__0563
069a8                 | '   for i=2 to l
069a8     02 3A 06 F6 | 	mov	local11, #2
069ac     15 3D 02 F6 | 	mov	local12, local03
069b0     01 3C 06 F1 | 	add	local12, #1
069b4                 | LR__0554
069b4     1E 3B 52 F2 | 	cmps	local11, local12 wc
069b8     60 01 90 3D |  if_ae	jmp	#LR__0562
069bc     13 13 02 F6 | 	mov	arg01, local01
069c0     1D 15 02 F6 | 	mov	arg02, local11
069c4     01 16 06 F6 | 	mov	arg03, #1
069c8     50 11 B2 FD | 	call	#__system__Mid_S
069cc     FD 2C 02 F6 | 	mov	local04, result1
069d0                 | '     m$=mid$(s,i,1) 
069d0                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
069d0     00 36 0E F2 | 	cmp	local09, #0 wz
069d4     50 00 90 5D |  if_ne	jmp	#LR__0556
069d8     AD 01 00 FF 
069dc     09 15 06 F6 | 	mov	arg02, ##@LR__5765
069e0     16 13 02 F6 | 	mov	arg01, local04
069e4     C8 EF B1 FD | 	call	#__system___string_cmp
069e8     00 FA 55 F2 | 	cmps	result1, #0 wc
069ec     18 00 90 CD |  if_b	jmp	#LR__0555
069f0     AD 01 00 FF 
069f4     0B 15 06 F6 | 	mov	arg02, ##@LR__5766
069f8     16 13 02 F6 | 	mov	arg01, local04
069fc     B0 EF B1 FD | 	call	#__system___string_cmp
06a00     01 FA 55 F2 | 	cmps	result1, #1 wc
06a04     20 00 90 CD |  if_b	jmp	#LR__0556
06a08                 | LR__0555
06a08     AD 01 00 FF 
06a0c     0D 31 06 F6 | 	mov	local06, ##@LR__5767
06a10     16 13 02 F6 | 	mov	arg01, local04
06a14     18 15 02 F6 | 	mov	arg02, local06
06a18     94 EF B1 FD | 	call	#__system___string_cmp
06a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
06a20     00 FA 05 56 |  if_ne	mov	result1, #0
06a24     F8 00 90 5D |  if_ne	jmp	#LR__0564
06a28                 | LR__0556
06a28                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06a28     01 36 0E F2 | 	cmp	local09, #1 wz
06a2c     90 00 90 5D |  if_ne	jmp	#LR__0559
06a30     AD 01 00 FF 
06a34     0F 15 06 F6 | 	mov	arg02, ##@LR__5768
06a38     16 13 02 F6 | 	mov	arg01, local04
06a3c     70 EF B1 FD | 	call	#__system___string_cmp
06a40     00 FA 55 F2 | 	cmps	result1, #0 wc
06a44     1C 00 90 CD |  if_b	jmp	#LR__0557
06a48     AD 01 00 FF 
06a4c     11 15 06 F6 | 	mov	arg02, ##@LR__5769
06a50     16 13 02 F6 | 	mov	arg01, local04
06a54     58 EF B1 FD | 	call	#__system___string_cmp
06a58     FD 3E 02 F6 | 	mov	local13, result1
06a5c     01 3E 56 F2 | 	cmps	local13, #1 wc
06a60     5C 00 90 CD |  if_b	jmp	#LR__0559
06a64                 | LR__0557
06a64     AD 01 00 FF 
06a68     13 2F 06 F6 | 	mov	local05, ##@LR__5770
06a6c     16 13 02 F6 | 	mov	arg01, local04
06a70     17 15 02 F6 | 	mov	arg02, local05
06a74     38 EF B1 FD | 	call	#__system___string_cmp
06a78     FD 40 02 F6 | 	mov	local14, result1
06a7c     00 40 56 F2 | 	cmps	local14, #0 wc
06a80     1C 00 90 CD |  if_b	jmp	#LR__0558
06a84     AD 01 00 FF 
06a88     15 33 06 F6 | 	mov	local07, ##@LR__5771
06a8c     16 13 02 F6 | 	mov	arg01, local04
06a90     19 15 02 F6 | 	mov	arg02, local07
06a94     18 EF B1 FD | 	call	#__system___string_cmp
06a98     01 FA 55 F2 | 	cmps	result1, #1 wc
06a9c     20 00 90 CD |  if_b	jmp	#LR__0559
06aa0                 | LR__0558
06aa0     AD 01 00 FF 
06aa4     17 35 06 F6 | 	mov	local08, ##@LR__5772
06aa8     16 13 02 F6 | 	mov	arg01, local04
06aac     1A 15 02 F6 | 	mov	arg02, local08
06ab0     FC EE B1 FD | 	call	#__system___string_cmp
06ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ab8     00 FA 05 56 |  if_ne	mov	result1, #0
06abc     60 00 90 5D |  if_ne	jmp	#LR__0564
06ac0                 | LR__0559
06ac0                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
06ac0     01 38 0E F2 | 	cmp	local10, #1 wz
06ac4     4C 00 90 5D |  if_ne	jmp	#LR__0561
06ac8     AD 01 00 FF 
06acc     19 15 06 F6 | 	mov	arg02, ##@LR__5773
06ad0     16 13 02 F6 | 	mov	arg01, local04
06ad4     D8 EE B1 FD | 	call	#__system___string_cmp
06ad8     00 FA 55 F2 | 	cmps	result1, #0 wc
06adc     18 00 90 CD |  if_b	jmp	#LR__0560
06ae0     AD 01 00 FF 
06ae4     1B 15 06 F6 | 	mov	arg02, ##@LR__5774
06ae8     16 13 02 F6 | 	mov	arg01, local04
06aec     C0 EE B1 FD | 	call	#__system___string_cmp
06af0     01 FA 55 F2 | 	cmps	result1, #1 wc
06af4     1C 00 90 CD |  if_b	jmp	#LR__0561
06af8                 | LR__0560
06af8     AD 01 00 FF 
06afc     1D 15 06 F6 | 	mov	arg02, ##@LR__5775
06b00     16 13 02 F6 | 	mov	arg01, local04
06b04     A8 EE B1 FD | 	call	#__system___string_cmp
06b08     00 FA 0D F2 | 	cmp	result1, #0 wz
06b0c     00 FA 05 56 |  if_ne	mov	result1, #0
06b10     0C 00 90 5D |  if_ne	jmp	#LR__0564
06b14                 | LR__0561
06b14     01 3A 06 F1 | 	add	local11, #1
06b18     98 FE 9F FD | 	jmp	#LR__0554
06b1c                 | LR__0562
06b1c                 | LR__0563
06b1c                 | ' return true
06b1c     01 FA 65 F6 | 	neg	result1, #1
06b20                 | LR__0564
06b20     A7 F0 03 F6 | 	mov	ptra, fp
06b24     B2 00 A0 FD | 	call	#popregs_
06b28                 | _isint_ret
06b28     2D 00 64 FD | 	ret
06b2c                 | 
06b2c                 | ' 
06b2c                 | ' ' Check if the part is a positive decimal number.  
06b2c                 | ' 
06b2c                 | ' function isdec(s as string) as boolean
06b2c                 | _isdec
06b2c     05 4A 05 F6 | 	mov	COUNT_, #5
06b30     A8 00 A0 FD | 	call	#pushregs_
06b34     09 27 02 F6 | 	mov	local01, arg01
06b38     09 29 02 F6 | 	mov	local02, arg01
06b3c     97 06 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
06b40                 | LR__0570
06b40     14 FB C9 FA | 	rdbyte	result1, local02 wz
06b44     01 28 06 51 |  if_ne	add	local02, #1
06b48     F4 FF 9F 5D |  if_ne	jmp	#LR__0570
06b4c                 | LR__0571
06b4c     09 29 82 F1 | 	sub	local02, arg01
06b50     14 FB 01 F6 | 	mov	result1, local02
06b54     FD 28 0A F6 | 	mov	local02, result1 wz
06b58     00 FA 05 A6 |  if_e	mov	result1, #0
06b5c     80 00 90 AD |  if_e	jmp	#LR__0576
06b60                 | ' for i=1 to l
06b60     01 2A 06 F6 | 	mov	local03, #1
06b64     14 2D 02 F6 | 	mov	local04, local02
06b68     01 2C 06 F1 | 	add	local04, #1
06b6c                 | LR__0572
06b6c     16 2B 52 F2 | 	cmps	local03, local04 wc
06b70     68 00 90 3D |  if_ae	jmp	#LR__0575
06b74     13 13 02 F6 | 	mov	arg01, local01
06b78     15 15 02 F6 | 	mov	arg02, local03
06b7c     01 16 06 F6 | 	mov	arg03, #1
06b80     98 0F B2 FD | 	call	#__system__Mid_S
06b84     FD 2E 02 F6 | 	mov	local05, result1
06b88                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06b88     AD 01 00 FF 
06b8c     1F 15 06 F6 | 	mov	arg02, ##@LR__5776
06b90     17 13 02 F6 | 	mov	arg01, local05
06b94     18 EE B1 FD | 	call	#__system___string_cmp
06b98     00 FA 55 F2 | 	cmps	result1, #0 wc
06b9c     18 00 90 CD |  if_b	jmp	#LR__0573
06ba0     AD 01 00 FF 
06ba4     21 15 06 F6 | 	mov	arg02, ##@LR__5777
06ba8     17 13 02 F6 | 	mov	arg01, local05
06bac     00 EE B1 FD | 	call	#__system___string_cmp
06bb0     01 FA 55 F2 | 	cmps	result1, #1 wc
06bb4     1C 00 90 CD |  if_b	jmp	#LR__0574
06bb8                 | LR__0573
06bb8     AD 01 00 FF 
06bbc     23 15 06 F6 | 	mov	arg02, ##@LR__5778
06bc0     17 13 02 F6 | 	mov	arg01, local05
06bc4     E8 ED B1 FD | 	call	#__system___string_cmp
06bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
06bcc     00 FA 05 56 |  if_ne	mov	result1, #0
06bd0     0C 00 90 5D |  if_ne	jmp	#LR__0576
06bd4                 | LR__0574
06bd4     01 2A 06 F1 | 	add	local03, #1
06bd8     90 FF 9F FD | 	jmp	#LR__0572
06bdc                 | LR__0575
06bdc                 | ' return true
06bdc     01 FA 65 F6 | 	neg	result1, #1
06be0                 | LR__0576
06be0     A7 F0 03 F6 | 	mov	ptra, fp
06be4     B2 00 A0 FD | 	call	#popregs_
06be8                 | _isdec_ret
06be8     2D 00 64 FD | 	ret
06bec                 | 
06bec                 | ' 
06bec                 | ' ' Check if the part is a string.  
06bec                 | ' 
06bec                 | ' function isstring(s as string) as boolean
06bec                 | _isstring
06bec     01 4A 05 F6 | 	mov	COUNT_, #1
06bf0     A8 00 A0 FD | 	call	#pushregs_
06bf4                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
06bf4     09 27 02 F6 | 	mov	local01, arg01
06bf8     01 14 06 F6 | 	mov	arg02, #1
06bfc     04 0E B2 FD | 	call	#__system__Left_S
06c00     FD 12 02 F6 | 	mov	arg01, result1
06c04     AD 01 00 FF 
06c08     25 15 06 F6 | 	mov	arg02, ##@LR__5779
06c0c     A0 ED B1 FD | 	call	#__system___string_cmp
06c10     00 FA 4D F2 | 	cmps	result1, #0 wz
06c14     28 00 90 5D |  if_ne	jmp	#LR__0580
06c18     13 13 02 F6 | 	mov	arg01, local01
06c1c     01 14 06 F6 | 	mov	arg02, #1
06c20     68 0E B2 FD | 	call	#__system__Right_S
06c24     FD 12 02 F6 | 	mov	arg01, result1
06c28     AD 01 00 FF 
06c2c     27 15 06 F6 | 	mov	arg02, ##@LR__5780
06c30     7C ED B1 FD | 	call	#__system___string_cmp
06c34     00 FA 4D F2 | 	cmps	result1, #0 wz
06c38     01 FA 65 A6 |  if_e	neg	result1, #1
06c3c     04 00 90 AD |  if_e	jmp	#LR__0581
06c40                 | LR__0580
06c40     00 FA 05 F6 | 	mov	result1, #0
06c44                 | LR__0581
06c44     A7 F0 03 F6 | 	mov	ptra, fp
06c48     B2 00 A0 FD | 	call	#popregs_
06c4c                 | _isstring_ret
06c4c     2D 00 64 FD | 	ret
06c50                 | 
06c50                 | ' 
06c50                 | ' ' getnoteval. Returns the frequency of note token
06c50                 | ' 
06c50                 | ' function getnoteval(token) as single
06c50                 | _getnoteval
06c50     02 4A 05 F6 | 	mov	COUNT_, #2
06c54     A8 00 A0 FD | 	call	#pushregs_
06c58     01 00 00 FF 
06c5c     00 13 86 F1 | 	sub	arg01, ##768
06c60     09 15 52 F6 | 	abs	arg02, arg01 wc
06c64     0C 14 16 FD | 	qdiv	arg02, #12
06c68     14 00 00 FF 
06c6c     D8 E4 05 F1 | 	add	objptr, ##10456
06c70     19 14 62 FD | 	getqy	arg02
06c74     0A 15 82 F6 | 	negc	arg02, arg02
06c78     02 14 66 F0 | 	shl	arg02, #2
06c7c     F2 14 02 F1 | 	add	arg02, objptr
06c80     0A 27 02 FB | 	rdlong	local01, arg02
06c84     09 15 52 F6 | 	abs	arg02, arg01 wc
06c88     0C 14 16 FD | 	qdiv	arg02, #12
06c8c     14 00 00 FF 
06c90     D8 E4 85 F1 | 	sub	objptr, ##10456
06c94     01 12 06 F6 | 	mov	arg01, #1
06c98                 | ' noteexp=1+(note/12) 
06c98                 | ' return (2.0^noteexp)*notebase
06c98     18 14 62 FD | 	getqx	arg02
06c9c     0A 13 82 F3 | 	sumc	arg01, arg02
06ca0     09 13 52 F6 | 	abs	arg01, arg01 wc
06ca4     1F 28 C6 C9 |  if_b	decod	local02, #31
06ca8     00 28 06 36 |  if_ae	mov	local02, #0
06cac     4C 17 B2 FD | 	call	#__system___float_fromuns
06cb0     14 FB 61 F5 | 	xor	result1, local02
06cb4     FD 14 02 F6 | 	mov	arg02, result1
06cb8     1E 12 C6 F9 | 	decod	arg01, #30
06cbc     48 2A B2 FD | 	call	#__system____builtin_powf
06cc0     FD 12 02 F6 | 	mov	arg01, result1
06cc4     13 15 02 F6 | 	mov	arg02, local01
06cc8     34 1B B2 FD | 	call	#__system___float_mul
06ccc     A7 F0 03 F6 | 	mov	ptra, fp
06cd0     B2 00 A0 FD | 	call	#popregs_
06cd4                 | _getnoteval_ret
06cd4     2D 00 64 FD | 	ret
06cd8                 | 
06cd8                 | ' 
06cd8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06cd8                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
06cd8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06cd8                 | ' 
06cd8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06cd8                 | ' '
06cd8                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
06cd8                 | ' '
06cd8                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
06cd8                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
06cd8                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
06cd8                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
06cd8                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
06cd8                 | ' ' 
06cd8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06cd8                 | ' 
06cd8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06cd8                 | ' ' Helper functions to manage program lines
06cd8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06cd8                 | ' 
06cd8                 | ' '----- delete a line from a program
06cd8                 | ' 
06cd8                 | ' function deleteline(aline as ulong) as integer
06cd8                 | _deleteline
06cd8     02 4A 05 F6 | 	mov	COUNT_, #2
06cdc     A8 00 A0 FD | 	call	#pushregs_
06ce0     2C F0 07 F1 | 	add	ptra, #44
06ce4     04 4E 05 F1 | 	add	fp, #4
06ce8     A7 12 62 FC | 	wrlong	arg01, fp
06cec     4A 00 00 FF 
06cf0     88 E4 05 F1 | 	add	objptr, ##38024
06cf4     F2 26 02 FB | 	rdlong	local01, objptr
06cf8     0C 4E 05 F1 | 	add	fp, #12
06cfc     A7 26 62 FC | 	wrlong	local01, fp
06d00     10 4E 85 F1 | 	sub	fp, #16
06d04                 | ' 
06d04                 | ' searchptr=programstart
06d04                 | ' do
06d04     3E 00 00 FF 
06d08     BC E5 85 F1 | 	sub	objptr, ##32188
06d0c                 | LR__0590
06d0c     14 4E 05 F1 | 	add	fp, #20
06d10     A7 12 02 F6 | 	mov	arg01, fp
06d14     04 4E 85 F1 | 	sub	fp, #4
06d18     A7 14 02 FB | 	rdlong	arg02, fp
06d1c     10 4E 85 F1 | 	sub	fp, #16
06d20     18 16 06 F6 | 	mov	arg03, #24
06d24     D8 DF B1 FD | 	call	#_psram_spin2_read1
06d28     10 4E 05 F1 | 	add	fp, #16
06d2c     A7 26 02 FB | 	rdlong	local01, fp
06d30     08 4E 85 F1 | 	sub	fp, #8
06d34     A7 26 62 FC | 	wrlong	local01, fp
06d38     20 4E 05 F1 | 	add	fp, #32
06d3c     A7 26 02 FB | 	rdlong	local01, fp
06d40     18 4E 85 F1 | 	sub	fp, #24
06d44     A7 26 62 FC | 	wrlong	local01, fp
06d48     04 4E 05 F1 | 	add	fp, #4
06d4c     A7 26 02 FB | 	rdlong	local01, fp
06d50     10 4E 85 F1 | 	sub	fp, #16
06d54     A7 16 02 FB | 	rdlong	arg03, fp
06d58     04 4E 85 F1 | 	sub	fp, #4
06d5c     0B 27 12 F2 | 	cmp	local01, arg03 wc
06d60     28 4E 05 C1 |  if_b	add	fp, #40
06d64     A7 28 02 CB |  if_b	rdlong	local02, fp
06d68     28 4E 85 C1 |  if_b	sub	fp, #40
06d6c     FF FF 3F CF 
06d70     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06d74     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0590
06d78     0B 00 00 FF 
06d7c     CC E4 85 F1 | 	sub	objptr, ##5836
06d80                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
06d80     14 4E 05 F1 | 	add	fp, #20
06d84     A7 26 02 FB | 	rdlong	local01, fp
06d88     10 4E 85 F1 | 	sub	fp, #16
06d8c     A7 28 02 FB | 	rdlong	local02, fp
06d90     04 4E 85 F1 | 	sub	fp, #4
06d94     14 27 0A F2 | 	cmp	local01, local02 wz
06d98     01 FA 65 56 |  if_ne	neg	result1, #1
06d9c     34 02 90 5D |  if_ne	jmp	#LR__0595
06da0     08 4E 05 F1 | 	add	fp, #8
06da4     A7 12 02 FB | 	rdlong	arg01, fp
06da8     08 4E 85 F1 | 	sub	fp, #8
06dac     01 14 66 F6 | 	neg	arg02, #1
06db0     88 B3 B1 FD | 	call	#_pslpoke
06db4                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
06db4                 | ' 
06db4                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
06db4     28 4E 05 F1 | 	add	fp, #40
06db8     A7 26 02 FB | 	rdlong	local01, fp
06dbc     28 4E 85 F1 | 	sub	fp, #40
06dc0     FF FF 3F FF 
06dc4     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06dc8     24 4E 05 A1 |  if_e	add	fp, #36
06dcc     A7 28 02 AB |  if_e	rdlong	local02, fp
06dd0     24 4E 85 A1 |  if_e	sub	fp, #36
06dd4     FF FF 7F AF 
06dd8     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
06ddc     88 00 90 5D |  if_ne	jmp	#LR__0591
06de0     4A 00 00 FF 
06de4     88 E4 05 F1 | 	add	objptr, ##38024
06de8     00 04 80 FF 
06dec     F2 00 68 FC | 	wrlong	##524288, objptr
06df0     07 00 00 FF 
06df4     2C E4 85 F1 | 	sub	objptr, ##3628
06df8     00 04 80 FF 
06dfc     F2 00 68 FC | 	wrlong	##524288, objptr
06e00     07 00 00 FF 
06e04     30 E4 05 F1 | 	add	objptr, ##3632
06e08     F2 00 68 FC | 	wrlong	#0, objptr
06e0c     04 E4 05 F1 | 	add	objptr, #4
06e10     FF FF FF FF 
06e14     F2 FE 6B FC | 	wrlong	##-1, objptr
06e18     4A 00 00 FF 
06e1c     90 E4 85 F1 | 	sub	objptr, ##38032
06e20     00 12 06 F6 | 	mov	arg01, #0
06e24     01 14 66 F6 | 	neg	arg02, #1
06e28     10 B3 B1 FD | 	call	#_pslpoke
06e2c     10 12 06 F6 | 	mov	arg01, #16
06e30     01 14 66 F6 | 	neg	arg02, #1
06e34     04 B3 B1 FD | 	call	#_pslpoke
06e38     14 12 06 F6 | 	mov	arg01, #20
06e3c     1E 14 CE F9 | 	bmask	arg02, #30
06e40     F8 B2 B1 FD | 	call	#_pslpoke
06e44     50 00 00 FF 
06e48     B8 E4 05 F1 | 	add	objptr, ##41144
06e4c     00 04 80 FF 
06e50     F2 00 68 FC | 	wrlong	##524288, objptr
06e54     04 E4 05 F1 | 	add	objptr, #4
06e58     00 04 80 FF 
06e5c     F2 00 68 FC | 	wrlong	##524288, objptr
06e60     50 00 00 FF 
06e64     BC E4 85 F1 | 	sub	objptr, ##41148
06e68                 | LR__0591
06e68                 | ' 
06e68                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06e68     28 4E 05 F1 | 	add	fp, #40
06e6c     A7 26 02 FB | 	rdlong	local01, fp
06e70     28 4E 85 F1 | 	sub	fp, #40
06e74     FF FF 3F FF 
06e78     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06e7c     74 00 90 5D |  if_ne	jmp	#LR__0592
06e80     24 4E 05 F1 | 	add	fp, #36
06e84     A7 28 02 FB | 	rdlong	local02, fp
06e88     24 4E 85 F1 | 	sub	fp, #36
06e8c     FF FF 7F FF 
06e90     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06e94     5C 00 90 AD |  if_e	jmp	#LR__0592
06e98     24 4E 05 F1 | 	add	fp, #36
06e9c     A7 12 02 FB | 	rdlong	arg01, fp
06ea0     24 4E 85 F1 | 	sub	fp, #36
06ea4     14 12 06 F1 | 	add	arg01, #20
06ea8     1E 14 CE F9 | 	bmask	arg02, #30
06eac     8C B2 B1 FD | 	call	#_pslpoke
06eb0     24 4E 05 F1 | 	add	fp, #36
06eb4     A7 26 02 FB | 	rdlong	local01, fp
06eb8     4A 00 00 FF 
06ebc     90 E4 05 F1 | 	add	objptr, ##38032
06ec0     F2 26 62 FC | 	wrlong	local01, objptr
06ec4     4A 00 00 FF 
06ec8     90 E4 85 F1 | 	sub	objptr, ##38032
06ecc     A7 12 02 FB | 	rdlong	arg01, fp
06ed0     24 4E 85 F1 | 	sub	fp, #36
06ed4     94 B3 B1 FD | 	call	#_pslpeek
06ed8     4A 00 00 FF 
06edc     8C E4 05 F1 | 	add	objptr, ##38028
06ee0     F2 FA 61 FC | 	wrlong	result1, objptr
06ee4     4A 00 00 FF 
06ee8     8C E4 85 F1 | 	sub	objptr, ##38028
06eec                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
06eec                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
06eec                 | '   lastline=pslpeek(header(4))
06eec                 | '   return 0
06eec     00 FA 05 F6 | 	mov	result1, #0
06ef0     E0 00 90 FD | 	jmp	#LR__0595
06ef4                 | LR__0592
06ef4                 | ' 
06ef4                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
06ef4     28 4E 05 F1 | 	add	fp, #40
06ef8     A7 26 02 FB | 	rdlong	local01, fp
06efc     28 4E 85 F1 | 	sub	fp, #40
06f00     FF FF 3F FF 
06f04     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06f08     58 00 90 AD |  if_e	jmp	#LR__0593
06f0c     24 4E 05 F1 | 	add	fp, #36
06f10     A7 28 02 FB | 	rdlong	local02, fp
06f14     24 4E 85 F1 | 	sub	fp, #36
06f18     FF FF 7F FF 
06f1c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06f20     40 00 90 5D |  if_ne	jmp	#LR__0593
06f24     28 4E 05 F1 | 	add	fp, #40
06f28     A7 12 02 FB | 	rdlong	arg01, fp
06f2c     28 4E 85 F1 | 	sub	fp, #40
06f30     10 12 06 F1 | 	add	arg01, #16
06f34     01 14 66 F6 | 	neg	arg02, #1
06f38     00 B2 B1 FD | 	call	#_pslpoke
06f3c     28 4E 05 F1 | 	add	fp, #40
06f40     A7 26 02 FB | 	rdlong	local01, fp
06f44     28 4E 85 F1 | 	sub	fp, #40
06f48     4A 00 00 FF 
06f4c     88 E4 05 F1 | 	add	objptr, ##38024
06f50     F2 26 62 FC | 	wrlong	local01, objptr
06f54     4A 00 00 FF 
06f58     88 E4 85 F1 | 	sub	objptr, ##38024
06f5c                 | ' '   print "deleted first line"
06f5c                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06f5c                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
06f5c                 | '   return 0
06f5c     00 FA 05 F6 | 	mov	result1, #0
06f60     70 00 90 FD | 	jmp	#LR__0595
06f64                 | LR__0593
06f64                 | ' 
06f64                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
06f64     28 4E 05 F1 | 	add	fp, #40
06f68     A7 26 02 FB | 	rdlong	local01, fp
06f6c     28 4E 85 F1 | 	sub	fp, #40
06f70     FF FF 3F FF 
06f74     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06f78     24 4E 05 51 |  if_ne	add	fp, #36
06f7c     A7 28 02 5B |  if_ne	rdlong	local02, fp
06f80     24 4E 85 51 |  if_ne	sub	fp, #36
06f84     FF FF 7F 5F 
06f88     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
06f8c     40 00 90 AD |  if_e	jmp	#LR__0594
06f90     28 4E 05 F1 | 	add	fp, #40
06f94     A7 12 02 FB | 	rdlong	arg01, fp
06f98     10 12 06 F1 | 	add	arg01, #16
06f9c     04 4E 85 F1 | 	sub	fp, #4
06fa0     A7 14 02 FB | 	rdlong	arg02, fp
06fa4     24 4E 85 F1 | 	sub	fp, #36
06fa8     90 B1 B1 FD | 	call	#_pslpoke
06fac     24 4E 05 F1 | 	add	fp, #36
06fb0     A7 12 02 FB | 	rdlong	arg01, fp
06fb4     14 12 06 F1 | 	add	arg01, #20
06fb8     04 4E 05 F1 | 	add	fp, #4
06fbc     A7 14 02 FB | 	rdlong	arg02, fp
06fc0     28 4E 85 F1 | 	sub	fp, #40
06fc4     74 B1 B1 FD | 	call	#_pslpoke
06fc8                 | '    pslpoke(header(5)+16,header(4))  
06fc8                 | '    pslpoke(header(4)+20, header(5))
06fc8                 | '    return 0
06fc8     00 FA 05 F6 | 	mov	result1, #0
06fcc     04 00 90 FD | 	jmp	#LR__0595
06fd0                 | LR__0594
06fd0     00 FA 05 F6 | 	mov	result1, #0
06fd4                 | LR__0595
06fd4     A7 F0 03 F6 | 	mov	ptra, fp
06fd8     B2 00 A0 FD | 	call	#popregs_
06fdc                 | _deleteline_ret
06fdc     2D 00 64 FD | 	ret
06fe0                 | 
06fe0                 | ' 
06fe0                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
06fe0                 | ' 
06fe0                 | ' sub save_line
06fe0                 | _save_line
06fe0     03 4A 05 F6 | 	mov	COUNT_, #3
06fe4     A8 00 A0 FD | 	call	#pushregs_
06fe8     4A 00 00 FF 
06fec     7C E4 05 F1 | 	add	objptr, ##38012
06ff0     F2 16 02 FB | 	rdlong	arg03, objptr
06ff4     01 16 06 F1 | 	add	arg03, #1
06ff8     05 00 00 FF 
06ffc     18 E4 85 F1 | 	sub	objptr, ##2584
07000     F2 14 02 FB | 	rdlong	arg02, objptr
07004     0B 15 02 FD | 	qmul	arg02, arg03
07008     0E 00 00 FF 
0700c     44 E4 85 F1 | 	sub	objptr, ##7236
07010     F2 12 02 FB | 	rdlong	arg01, objptr
07014     37 00 00 FF 
07018     20 E4 85 F1 | 	sub	objptr, ##28192
0701c     09 27 02 F6 | 	mov	local01, arg01
07020     18 28 62 FD | 	getqx	local02
07024     97 06 48 FB | 	callpa	#(@LR__0601-@LR__0600)>>2,fcache_load_ptr_
07028                 | LR__0600
07028     13 FB C9 FA | 	rdbyte	result1, local01 wz
0702c     01 26 06 51 |  if_ne	add	local01, #1
07030     F4 FF 9F 5D |  if_ne	jmp	#LR__0600
07034                 | LR__0601
07034     09 27 82 F1 | 	sub	local01, arg01
07038     03 26 CE F7 | 	test	local01, #3 wz
0703c     02 26 46 50 |  if_ne	shr	local01, #2
07040     01 26 06 51 |  if_ne	add	local01, #1
07044     02 26 66 50 |  if_ne	shl	local01, #2
07048     14 2B 02 F6 | 	mov	local03, local02
0704c     13 2B 02 F1 | 	add	local03, local01
07050     43 00 00 FF 
07054     5C E4 05 F1 | 	add	objptr, ##34396
07058     F2 16 02 FB | 	rdlong	arg03, objptr
0705c     14 17 02 F1 | 	add	arg03, local02
07060     04 00 00 FF 
07064     28 E4 05 F1 | 	add	objptr, ##2088
07068     F2 16 62 FC | 	wrlong	arg03, objptr
0706c     04 E4 05 F1 | 	add	objptr, #4
07070     F2 26 62 FC | 	wrlong	local01, objptr
07074     0C E4 85 F1 | 	sub	objptr, #12
07078     F2 12 02 F6 | 	mov	arg01, objptr
0707c     04 00 00 FF 
07080     20 E4 85 F1 | 	sub	objptr, ##2080
07084     F2 14 02 FB | 	rdlong	arg02, objptr
07088     14 17 02 F6 | 	mov	arg03, local02
0708c     37 00 00 FF 
07090     90 E5 85 F1 | 	sub	objptr, ##28560
07094     04 DD B1 FD | 	call	#_psram_spin2_write
07098     2B 00 00 FF 
0709c     54 E5 05 F1 | 	add	objptr, ##22356
070a0     F2 12 02 FB | 	rdlong	arg01, objptr
070a4     0C 00 00 FF 
070a8     3C E4 05 F1 | 	add	objptr, ##6204
070ac     F2 14 02 FB | 	rdlong	arg02, objptr
070b0     14 15 02 F1 | 	add	arg02, local02
070b4     13 17 02 F6 | 	mov	arg03, local01
070b8     37 00 00 FF 
070bc     90 E5 85 F1 | 	sub	objptr, ##28560
070c0     D8 DC B1 FD | 	call	#_psram_spin2_write
070c4     37 00 00 FF 
070c8     90 E5 05 F1 | 	add	objptr, ##28560
070cc     F2 26 02 FB | 	rdlong	local01, objptr
070d0     15 27 02 F1 | 	add	local01, local03
070d4     F2 26 62 FC | 	wrlong	local01, objptr
070d8     43 00 00 FF 
070dc     5C E4 85 F1 | 	sub	objptr, ##34396
070e0     A7 F0 03 F6 | 	mov	ptra, fp
070e4     B2 00 A0 FD | 	call	#popregs_
070e8                 | _save_line_ret
070e8     2D 00 64 FD | 	ret
070ec                 | 
070ec                 | ' 
070ec                 | ' '----- Insert a new line into the middle of the program
070ec                 | ' 
070ec                 | ' function insertline(aline as ulong) as integer
070ec                 | _insertline
070ec     02 4A 05 F6 | 	mov	COUNT_, #2
070f0     A8 00 A0 FD | 	call	#pushregs_
070f4     28 F0 07 F1 | 	add	ptra, #40
070f8     04 4E 05 F1 | 	add	fp, #4
070fc     A7 12 62 FC | 	wrlong	arg01, fp
07100     4A 00 00 FF 
07104     88 E4 05 F1 | 	add	objptr, ##38024
07108     F2 26 02 FB | 	rdlong	local01, objptr
0710c     04 4E 05 F1 | 	add	fp, #4
07110     A7 26 62 FC | 	wrlong	local01, fp
07114     08 4E 85 F1 | 	sub	fp, #8
07118                 | ' 
07118                 | ' do
07118     3E 00 00 FF 
0711c     BC E5 85 F1 | 	sub	objptr, ##32188
07120                 | LR__0610
07120     10 4E 05 F1 | 	add	fp, #16
07124     A7 12 02 F6 | 	mov	arg01, fp
07128     08 4E 85 F1 | 	sub	fp, #8
0712c     A7 14 02 FB | 	rdlong	arg02, fp
07130     08 4E 85 F1 | 	sub	fp, #8
07134     18 16 06 F6 | 	mov	arg03, #24
07138     C4 DB B1 FD | 	call	#_psram_spin2_read1
0713c     08 4E 05 F1 | 	add	fp, #8
07140     A7 26 02 FB | 	rdlong	local01, fp
07144     04 4E 05 F1 | 	add	fp, #4
07148     A7 26 62 FC | 	wrlong	local01, fp
0714c     18 4E 05 F1 | 	add	fp, #24
07150     A7 26 02 FB | 	rdlong	local01, fp
07154     1C 4E 85 F1 | 	sub	fp, #28
07158     A7 26 62 FC | 	wrlong	local01, fp
0715c     08 4E 05 F1 | 	add	fp, #8
07160     A7 26 02 FB | 	rdlong	local01, fp
07164     0C 4E 85 F1 | 	sub	fp, #12
07168     A7 16 02 FB | 	rdlong	arg03, fp
0716c     04 4E 85 F1 | 	sub	fp, #4
07170     0B 27 12 F2 | 	cmp	local01, arg03 wc
07174     24 4E 05 C1 |  if_b	add	fp, #36
07178     A7 28 02 CB |  if_b	rdlong	local02, fp
0717c     24 4E 85 C1 |  if_b	sub	fp, #36
07180     FF FF 3F CF 
07184     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07188     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0610
0718c     0B 00 00 FF 
07190     CC E4 85 F1 | 	sub	objptr, ##5836
07194                 | ' 
07194                 | ' if header(0)=aline then return -1 				' delete it first
07194     10 4E 05 F1 | 	add	fp, #16
07198     A7 26 02 FB | 	rdlong	local01, fp
0719c     0C 4E 85 F1 | 	sub	fp, #12
071a0     A7 28 02 FB | 	rdlong	local02, fp
071a4     04 4E 85 F1 | 	sub	fp, #4
071a8     14 27 0A F2 | 	cmp	local01, local02 wz
071ac     01 FA 65 A6 |  if_e	neg	result1, #1
071b0     48 01 90 AD |  if_e	jmp	#LR__0613
071b4                 | ' if header(0)<aline then return -2 				' end of program reached
071b4     10 4E 05 F1 | 	add	fp, #16
071b8     A7 26 02 FB | 	rdlong	local01, fp
071bc     0C 4E 85 F1 | 	sub	fp, #12
071c0     A7 16 02 FB | 	rdlong	arg03, fp
071c4     04 4E 85 F1 | 	sub	fp, #4
071c8     0B 27 12 F2 | 	cmp	local01, arg03 wc
071cc     02 FA 65 C6 |  if_b	neg	result1, #2
071d0     28 01 90 CD |  if_b	jmp	#LR__0613
071d4                 | ' 
071d4                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
071d4     20 4E 05 F1 | 	add	fp, #32
071d8     A7 26 02 FB | 	rdlong	local01, fp
071dc     20 4E 85 F1 | 	sub	fp, #32
071e0     FF FF 7F FF 
071e4     FF 27 0E F2 | 	cmp	local01, ##-1 wz
071e8     78 00 90 5D |  if_ne	jmp	#LR__0611
071ec     43 00 00 FF 
071f0     5C E4 05 F1 | 	add	objptr, ##34396
071f4     F2 26 02 FB | 	rdlong	local01, objptr
071f8     07 00 00 FF 
071fc     2C E4 05 F1 | 	add	objptr, ##3628
07200     F2 26 62 FC | 	wrlong	local01, objptr
07204     0C 4E 05 F1 | 	add	fp, #12
07208     A7 12 02 FB | 	rdlong	arg01, fp
0720c     0C 4E 85 F1 | 	sub	fp, #12
07210     10 12 06 F1 | 	add	arg01, #16
07214     07 00 00 FF 
07218     2C E4 85 F1 | 	sub	objptr, ##3628
0721c     F2 14 02 FB | 	rdlong	arg02, objptr
07220     43 00 00 FF 
07224     5C E4 85 F1 | 	sub	objptr, ##34396
07228     10 AF B1 FD | 	call	#_pslpoke
0722c     47 00 00 FF 
07230     8C E4 05 F1 | 	add	objptr, ##36492
07234     FF FF FF FF 
07238     F2 FE 6B FC | 	wrlong	##-1, objptr
0723c     0C 4E 05 F1 | 	add	fp, #12
07240     A7 26 02 FB | 	rdlong	local01, fp
07244     0C 4E 85 F1 | 	sub	fp, #12
07248     04 E4 05 F1 | 	add	objptr, #4
0724c     F2 26 62 FC | 	wrlong	local01, objptr
07250     47 00 00 FF 
07254     90 E4 85 F1 | 	sub	objptr, ##36496
07258     84 FD BF FD | 	call	#_save_line
0725c                 | '   programstart=programptr
0725c                 | '   pslpoke(lineptr2+16,programptr)
0725c                 | '   ucompiledline(4)=$FFFF_FFFF
0725c                 | '   ucompiledline(5)=lineptr2
0725c                 | '   save_line
0725c                 | '   return 0
0725c     00 FA 05 F6 | 	mov	result1, #0
07260     98 00 90 FD | 	jmp	#LR__0613
07264                 | LR__0611
07264                 | ' 
07264                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
07264     20 4E 05 F1 | 	add	fp, #32
07268     A7 26 02 FB | 	rdlong	local01, fp
0726c     20 4E 85 F1 | 	sub	fp, #32
07270     FF FF 7F FF 
07274     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07278     7C 00 90 AD |  if_e	jmp	#LR__0612
0727c     20 4E 05 F1 | 	add	fp, #32
07280     A7 26 02 FB | 	rdlong	local01, fp
07284     47 00 00 FF 
07288     8C E4 05 F1 | 	add	objptr, ##36492
0728c     F2 26 62 FC | 	wrlong	local01, objptr
07290     14 4E 85 F1 | 	sub	fp, #20
07294     A7 26 02 FB | 	rdlong	local01, fp
07298     04 E4 05 F1 | 	add	objptr, #4
0729c     F2 26 62 FC | 	wrlong	local01, objptr
072a0     A7 12 02 FB | 	rdlong	arg01, fp
072a4     0C 4E 85 F1 | 	sub	fp, #12
072a8     10 12 06 F1 | 	add	arg01, #16
072ac     04 00 00 FF 
072b0     34 E4 85 F1 | 	sub	objptr, ##2100
072b4     F2 14 02 FB | 	rdlong	arg02, objptr
072b8     43 00 00 FF 
072bc     5C E4 85 F1 | 	sub	objptr, ##34396
072c0     78 AE B1 FD | 	call	#_pslpoke
072c4     20 4E 05 F1 | 	add	fp, #32
072c8     A7 12 02 FB | 	rdlong	arg01, fp
072cc     20 4E 85 F1 | 	sub	fp, #32
072d0     14 12 06 F1 | 	add	arg01, #20
072d4     43 00 00 FF 
072d8     5C E4 05 F1 | 	add	objptr, ##34396
072dc     F2 14 02 FB | 	rdlong	arg02, objptr
072e0     43 00 00 FF 
072e4     5C E4 85 F1 | 	sub	objptr, ##34396
072e8     50 AE B1 FD | 	call	#_pslpoke
072ec     F0 FC BF FD | 	call	#_save_line
072f0                 | '   ucompiledline(4)=header(4)
072f0                 | '   ucompiledline(5)=lineptr2
072f0                 | '   pslpoke(lineptr2+16,programptr)
072f0                 | '   pslpoke(header(4)+20,programptr)
072f0                 | '   save_line
072f0                 | '   return 0
072f0     00 FA 05 F6 | 	mov	result1, #0
072f4     04 00 90 FD | 	jmp	#LR__0613
072f8                 | LR__0612
072f8     00 FA 05 F6 | 	mov	result1, #0
072fc                 | LR__0613
072fc     A7 F0 03 F6 | 	mov	ptra, fp
07300     B2 00 A0 FD | 	call	#popregs_
07304                 | _insertline_ret
07304     2D 00 64 FD | 	ret
07308                 | 
07308                 | ' 
07308                 | ' '----- Adds a new line at the end of the program
07308                 | ' 
07308                 | ' sub add_line_at_end(aline) 
07308                 | _add_line_at_end
07308     4A 00 00 FF 
0730c     8C E4 05 F1 | 	add	objptr, ##38028
07310     F2 12 62 FC | 	wrlong	arg01, objptr
07314     04 E4 05 F1 | 	add	objptr, #4
07318     F2 14 02 FB | 	rdlong	arg02, objptr
0731c     03 00 00 FF 
07320     04 E4 85 F1 | 	sub	objptr, ##1540
07324     F2 14 62 FC | 	wrlong	arg02, objptr
07328     03 00 00 FF 
0732c     04 E4 05 F1 | 	add	objptr, ##1540
07330     F2 12 02 FB | 	rdlong	arg01, objptr
07334     14 12 06 F1 | 	add	arg01, #20
07338     07 00 00 FF 
0733c     34 E4 85 F1 | 	sub	objptr, ##3636
07340     F2 14 02 FB | 	rdlong	arg02, objptr
07344     43 00 00 FF 
07348     5C E4 85 F1 | 	sub	objptr, ##34396
0734c     EC AD B1 FD | 	call	#_pslpoke
07350     43 00 00 FF 
07354     5C E4 05 F1 | 	add	objptr, ##34396
07358     F2 14 02 FB | 	rdlong	arg02, objptr
0735c     07 00 00 FF 
07360     34 E4 05 F1 | 	add	objptr, ##3636
07364     F2 14 62 FC | 	wrlong	arg02, objptr
07368     03 00 00 FF 
0736c     00 E4 85 F1 | 	sub	objptr, ##1536
07370     FF FF BF FF 
07374     F2 FE 6B FC | 	wrlong	##2147483647, objptr
07378                 | ' 
07378                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07378                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07378     04 00 00 FF 
0737c     34 E4 85 F1 | 	sub	objptr, ##2100
07380     F2 14 02 FB | 	rdlong	arg02, objptr
07384     43 00 00 FF 
07388     5C E4 85 F1 | 	sub	objptr, ##34396
0738c     00 04 00 FF 
07390     00 14 0E F2 | 	cmp	arg02, ##524288 wz
07394     47 00 00 AF 
07398     8C E4 05 A1 |  if_e	add	objptr, ##36492
0739c     FF FF FF AF 
073a0     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
073a4     47 00 00 AF 
073a8     8C E4 85 A1 |  if_e	sub	objptr, ##36492
073ac     30 FC BF FD | 	call	#_save_line
073b0     43 00 00 FF 
073b4     5C E4 05 F1 | 	add	objptr, ##34396
073b8     F2 12 02 FB | 	rdlong	arg01, objptr
073bc     43 00 00 FF 
073c0     5C E4 85 F1 | 	sub	objptr, ##34396
073c4     01 14 66 F6 | 	neg	arg02, #1
073c8     70 AD B1 FD | 	call	#_pslpoke
073cc                 | _add_line_at_end_ret
073cc     2D 00 64 FD | 	ret
073d0                 | 
073d0                 | ' 
073d0                 | ' '--------------------------------------------------------------------------------------------------------------------------
073d0                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
073d0                 | ' '--------------------------------------------------------------------------------------------------------------------------
073d0                 | ' 
073d0                 | ' '--------------------------------------------------------------------------------------------------------------------------
073d0                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
073d0                 | ' '--------------------------------------------------------------------------------------------------------------------------
073d0                 | ' 
073d0                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
073d0                 | ' 
073d0                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
073d0                 | _compile_immediate
073d0     0A 4A 05 F6 | 	mov	COUNT_, #10
073d4     A8 00 A0 FD | 	call	#pushregs_
073d8                 | _compile_immediate_enter
073d8     09 2D 02 F6 | 	mov	local04, arg01
073dc     0A 2F 02 F6 | 	mov	local05, arg02
073e0     00 30 06 F6 | 	mov	local06, #0
073e4     00 32 06 F6 | 	mov	local07, #0
073e8     00 34 06 F6 | 	mov	local08, #0
073ec                 | ' 
073ec                 | ' ' linetype=cont+1
073ec                 | ' ' 1 : this is the first part of the line that will continue
073ec                 | ' ' 2 - this is the continuation of the line
073ec                 | ' ' 3 - this is the last continued line
073ec                 | ' ' 4 - this is the one and only part
073ec                 | ' ' 5 - continued after if/else
073ec                 | ' 
073ec                 | ' err=0
073ec                 | ' cmd=0
073ec                 | ' vars=0
073ec                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
073ec     02 2C 0E F2 | 	cmp	local04, #2 wz
073f0     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
073f4     24 00 90 5D |  if_ne	jmp	#LR__0620
073f8     35 00 00 FF 
073fc     10 E4 05 F1 | 	add	objptr, ##27152
07400     F2 32 02 FB | 	rdlong	local07, objptr
07404     01 36 06 F6 | 	mov	local09, #1
07408     02 00 00 FF 
0740c     34 E4 05 F1 | 	add	objptr, ##1076
07410     F2 02 68 FC | 	wrlong	#1, objptr
07414     37 00 00 FF 
07418     44 E4 85 F1 | 	sub	objptr, ##28228
0741c                 | LR__0620
0741c                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
0741c     04 2C 0E F2 | 	cmp	local04, #4 wz
07420     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07424     30 00 90 5D |  if_ne	jmp	#LR__0621
07428     35 00 00 FF 
0742c     18 E4 05 F1 | 	add	objptr, ##27160
07430     F2 32 02 FB | 	rdlong	local07, objptr
07434     02 36 06 F6 | 	mov	local09, #2
07438     02 00 00 FF 
0743c     2C E4 05 F1 | 	add	objptr, ##1068
07440     F2 04 68 FC | 	wrlong	#2, objptr
07444     13 00 00 FF 
07448     38 E4 05 F1 | 	add	objptr, ##9784
0744c     F2 04 68 FC | 	wrlong	#2, objptr
07450     4A 00 00 FF 
07454     7C E4 85 F1 | 	sub	objptr, ##38012
07458                 | LR__0621
07458                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07458     05 2C 0E F2 | 	cmp	local04, #5 wz
0745c     40 00 90 5D |  if_ne	jmp	#LR__0622
07460     37 00 00 FF 
07464     44 E4 05 F1 | 	add	objptr, ##28228
07468     F2 FC 01 FB | 	rdlong	result2, objptr
0746c     FE 36 02 F6 | 	mov	local09, result2
07470     03 36 66 F0 | 	shl	local09, #3
07474     02 00 00 FF 
07478     38 E4 85 F1 | 	sub	objptr, ##1080
0747c     F2 36 02 F1 | 	add	local09, objptr
07480     04 36 06 F1 | 	add	local09, #4
07484     1B 33 02 FB | 	rdlong	local07, local09
07488     01 FC 05 F1 | 	add	result2, #1
0748c     02 00 00 FF 
07490     38 E4 05 F1 | 	add	objptr, ##1080
07494     F2 FC 61 FC | 	wrlong	result2, objptr
07498     37 00 00 FF 
0749c     44 E4 85 F1 | 	sub	objptr, ##28228
074a0                 | LR__0622
074a0                 | ' 
074a0                 | ' 'print  "In compile_immediate cmd=:", cmd
074a0                 | ' 451 select case cmd
074a0     5C 32 0E F2 | 	cmp	local07, #92 wz
074a4     C4 02 90 AD |  if_e	jmp	#LR__0623
074a8     B9 32 0E F2 | 	cmp	local07, #185 wz
074ac     C8 02 90 AD |  if_e	jmp	#LR__0624
074b0     47 32 0E F2 | 	cmp	local07, #71 wz
074b4     D0 02 90 AD |  if_e	jmp	#LR__0625
074b8     59 32 0E F2 | 	cmp	local07, #89 wz
074bc     D8 02 90 AD |  if_e	jmp	#LR__0626
074c0     C3 32 0E F2 | 	cmp	local07, #195 wz
074c4     E0 02 90 AD |  if_e	jmp	#LR__0627
074c8     45 32 0E F2 | 	cmp	local07, #69 wz
074cc     E4 02 90 AD |  if_e	jmp	#LR__0628
074d0     69 32 0E F2 | 	cmp	local07, #105 wz
074d4     EC 02 90 AD |  if_e	jmp	#LR__0629
074d8     40 32 0E F2 | 	cmp	local07, #64 wz
074dc     C4 06 90 AD |  if_e	jmp	#LR__0702
074e0     B4 32 0E F2 | 	cmp	local07, #180 wz
074e4     E8 02 90 AD |  if_e	jmp	#LR__0630
074e8     49 32 0E F2 | 	cmp	local07, #73 wz
074ec     EC 02 90 AD |  if_e	jmp	#LR__0631
074f0     50 32 0E F2 | 	cmp	local07, #80 wz
074f4     F0 02 90 AD |  if_e	jmp	#LR__0632
074f8     AE 32 0E F2 | 	cmp	local07, #174 wz
074fc     F8 02 90 AD |  if_e	jmp	#LR__0633
07500     B0 32 0E F2 | 	cmp	local07, #176 wz
07504     FC 02 90 AD |  if_e	jmp	#LR__0634
07508     AF 32 0E F2 | 	cmp	local07, #175 wz
0750c     00 03 90 AD |  if_e	jmp	#LR__0635
07510     B1 32 0E F2 | 	cmp	local07, #177 wz
07514     04 03 90 AD |  if_e	jmp	#LR__0636
07518     68 32 0E F2 | 	cmp	local07, #104 wz
0751c     08 03 90 AD |  if_e	jmp	#LR__0637
07520     B7 32 0E F2 | 	cmp	local07, #183 wz
07524     7C 06 90 AD |  if_e	jmp	#LR__0702
07528     74 32 0E F2 | 	cmp	local07, #116 wz
0752c     04 03 90 AD |  if_e	jmp	#LR__0638
07530     73 32 0E F2 | 	cmp	local07, #115 wz
07534     0C 03 90 AD |  if_e	jmp	#LR__0639
07538     6C 32 0E F2 | 	cmp	local07, #108 wz
0753c     14 03 90 AD |  if_e	jmp	#LR__0640
07540     89 32 0E F2 | 	cmp	local07, #137 wz
07544     5C 06 90 AD |  if_e	jmp	#LR__0702
07548     C2 32 0E F2 | 	cmp	local07, #194 wz
0754c     14 03 90 AD |  if_e	jmp	#LR__0641
07550     72 32 0E F2 | 	cmp	local07, #114 wz
07554     18 03 90 AD |  if_e	jmp	#LR__0642
07558     5D 32 0E F2 | 	cmp	local07, #93 wz
0755c     1C 03 90 AD |  if_e	jmp	#LR__0643
07560     96 32 0E F2 | 	cmp	local07, #150 wz
07564     24 03 90 AD |  if_e	jmp	#LR__0644
07568     43 32 0E F2 | 	cmp	local07, #67 wz
0756c     28 03 90 AD |  if_e	jmp	#LR__0645
07570     5A 32 0E F2 | 	cmp	local07, #90 wz
07574     30 03 90 AD |  if_e	jmp	#LR__0646
07578     AB 32 0E F2 | 	cmp	local07, #171 wz
0757c     24 06 90 AD |  if_e	jmp	#LR__0702
07580     BD 32 0E F2 | 	cmp	local07, #189 wz
07584     30 03 90 AD |  if_e	jmp	#LR__0647
07588     BB 32 0E F2 | 	cmp	local07, #187 wz
0758c     38 03 90 AD |  if_e	jmp	#LR__0648
07590     4E 32 0E F2 | 	cmp	local07, #78 wz
07594     40 03 90 AD |  if_e	jmp	#LR__0649
07598     A9 32 0E F2 | 	cmp	local07, #169 wz
0759c     58 03 90 AD |  if_e	jmp	#LR__0651
075a0     46 32 0E F2 | 	cmp	local07, #70 wz
075a4     70 03 90 AD |  if_e	jmp	#LR__0653
075a8     71 32 0E F2 | 	cmp	local07, #113 wz
075ac     78 03 90 AD |  if_e	jmp	#LR__0654
075b0     60 32 0E F2 | 	cmp	local07, #96 wz
075b4     7C 03 90 AD |  if_e	jmp	#LR__0655
075b8     4A 32 0E F2 | 	cmp	local07, #74 wz
075bc     80 03 90 AD |  if_e	jmp	#LR__0656
075c0     48 32 0E F2 | 	cmp	local07, #72 wz
075c4     84 03 90 AD |  if_e	jmp	#LR__0657
075c8     58 32 0E F2 | 	cmp	local07, #88 wz
075cc     8C 03 90 AD |  if_e	jmp	#LR__0658
075d0     5F 32 0E F2 | 	cmp	local07, #95 wz
075d4     94 03 90 AD |  if_e	jmp	#LR__0659
075d8     B5 32 0E F2 | 	cmp	local07, #181 wz
075dc     98 03 90 AD |  if_e	jmp	#LR__0660
075e0     8A 32 0E F2 | 	cmp	local07, #138 wz
075e4     A0 03 90 AD |  if_e	jmp	#LR__0661
075e8     4C 32 0E F2 | 	cmp	local07, #76 wz
075ec     A4 03 90 AD |  if_e	jmp	#LR__0662
075f0     52 32 0E F2 | 	cmp	local07, #82 wz
075f4     AC 03 90 AD |  if_e	jmp	#LR__0663
075f8     97 32 0E F2 | 	cmp	local07, #151 wz
075fc     B4 03 90 AD |  if_e	jmp	#LR__0664
07600     C6 32 0E F2 | 	cmp	local07, #198 wz
07604     B8 03 90 AD |  if_e	jmp	#LR__0665
07608     61 32 0E F2 | 	cmp	local07, #97 wz
0760c     BC 03 90 AD |  if_e	jmp	#LR__0666
07610     63 32 0E F2 | 	cmp	local07, #99 wz
07614     C0 03 90 AD |  if_e	jmp	#LR__0667
07618     41 32 0E F2 | 	cmp	local07, #65 wz
0761c     84 05 90 AD |  if_e	jmp	#LR__0702
07620     4B 32 0E F2 | 	cmp	local07, #75 wz
07624     BC 03 90 AD |  if_e	jmp	#LR__0668
07628     C1 32 0E F2 | 	cmp	local07, #193 wz
0762c     C0 03 90 AD |  if_e	jmp	#LR__0669
07630     B3 32 0E F2 | 	cmp	local07, #179 wz
07634     C4 03 90 AD |  if_e	jmp	#LR__0670
07638     5E 32 0E F2 | 	cmp	local07, #94 wz
0763c     C8 03 90 AD |  if_e	jmp	#LR__0671
07640     7C 32 0E F2 | 	cmp	local07, #124 wz
07644     CC 03 90 AD |  if_e	jmp	#LR__0672
07648     7D 32 0E F2 | 	cmp	local07, #125 wz
0764c     D0 03 90 AD |  if_e	jmp	#LR__0673
07650     7E 32 0E F2 | 	cmp	local07, #126 wz
07654     D4 03 90 AD |  if_e	jmp	#LR__0674
07658     7F 32 0E F2 | 	cmp	local07, #127 wz
0765c     D8 03 90 AD |  if_e	jmp	#LR__0675
07660     80 32 0E F2 | 	cmp	local07, #128 wz
07664     DC 03 90 AD |  if_e	jmp	#LR__0676
07668     55 32 0E F2 | 	cmp	local07, #85 wz
0766c     E0 03 90 AD |  if_e	jmp	#LR__0677
07670     75 32 0E F2 | 	cmp	local07, #117 wz
07674     E4 03 90 AD |  if_e	jmp	#LR__0678
07678     42 32 0E F2 | 	cmp	local07, #66 wz
0767c     EC 03 90 AD |  if_e	jmp	#LR__0679
07680     95 32 0E F2 | 	cmp	local07, #149 wz
07684     F4 03 90 AD |  if_e	jmp	#LR__0680
07688     AC 32 0E F2 | 	cmp	local07, #172 wz
0768c     14 05 90 AD |  if_e	jmp	#LR__0702
07690     81 32 0E F2 | 	cmp	local07, #129 wz
07694     F0 03 90 AD |  if_e	jmp	#LR__0681
07698     44 32 0E F2 | 	cmp	local07, #68 wz
0769c     F4 03 90 AD |  if_e	jmp	#LR__0682
076a0     BC 32 0E F2 | 	cmp	local07, #188 wz
076a4     F8 03 90 AD |  if_e	jmp	#LR__0683
076a8     88 32 0E F2 | 	cmp	local07, #136 wz
076ac     F4 04 90 AD |  if_e	jmp	#LR__0702
076b0     B6 32 0E F2 | 	cmp	local07, #182 wz
076b4     F8 03 90 AD |  if_e	jmp	#LR__0684
076b8     92 32 0E F2 | 	cmp	local07, #146 wz
076bc     00 04 90 AD |  if_e	jmp	#LR__0685
076c0     BE 32 0E F2 | 	cmp	local07, #190 wz
076c4     98 05 90 AD |  if_e	jmp	#LR__0703
076c8     C7 32 0E F2 | 	cmp	local07, #199 wz
076cc     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
076d0     D0 04 90 AD |  if_e	jmp	#LR__0702
076d4     4D 32 0E F2 | 	cmp	local07, #77 wz
076d8     F0 03 90 AD |  if_e	jmp	#LR__0686
076dc     51 32 0E F2 | 	cmp	local07, #81 wz
076e0     F8 03 90 AD |  if_e	jmp	#LR__0687
076e4     8E 32 0E F2 | 	cmp	local07, #142 wz
076e8     00 04 90 AD |  if_e	jmp	#LR__0688
076ec     90 32 0E F2 | 	cmp	local07, #144 wz
076f0     04 04 90 AD |  if_e	jmp	#LR__0689
076f4     8D 32 0E F2 | 	cmp	local07, #141 wz
076f8     08 04 90 AD |  if_e	jmp	#LR__0690
076fc     8C 32 0E F2 | 	cmp	local07, #140 wz
07700     0C 04 90 AD |  if_e	jmp	#LR__0691
07704     91 32 0E F2 | 	cmp	local07, #145 wz
07708     10 04 90 AD |  if_e	jmp	#LR__0692
0770c     8B 32 0E F2 | 	cmp	local07, #139 wz
07710     14 04 90 AD |  if_e	jmp	#LR__0693
07714     8F 32 0E F2 | 	cmp	local07, #143 wz
07718     18 04 90 AD |  if_e	jmp	#LR__0694
0771c     B2 32 0E F2 | 	cmp	local07, #178 wz
07720     1C 04 90 AD |  if_e	jmp	#LR__0695
07724     6D 32 0E F2 | 	cmp	local07, #109 wz
07728     24 04 90 AD |  if_e	jmp	#LR__0696
0772c     70 32 0E F2 | 	cmp	local07, #112 wz
07730     70 04 90 AD |  if_e	jmp	#LR__0702
07734     56 32 0E F2 | 	cmp	local07, #86 wz
07738     20 04 90 AD |  if_e	jmp	#LR__0697
0773c     57 32 0E F2 | 	cmp	local07, #87 wz
07740     60 04 90 AD |  if_e	jmp	#LR__0702
07744     79 32 0E F2 | 	cmp	local07, #121 wz
07748     1C 04 90 AD |  if_e	jmp	#LR__0698
0774c     77 32 0E F2 | 	cmp	local07, #119 wz
07750     20 04 90 AD |  if_e	jmp	#LR__0699
07754     78 32 0E F2 | 	cmp	local07, #120 wz
07758     24 04 90 AD |  if_e	jmp	#LR__0700
0775c     01 00 00 FF 
07760     04 32 0E F2 | 	cmp	local07, ##516 wz
07764     24 04 90 AD |  if_e	jmp	#LR__0701
07768     F4 04 90 FD | 	jmp	#LR__0703
0776c                 | LR__0623
0776c     40 0B B0 FD | 	call	#_compile_fun_2p
07770     FD 30 02 F6 | 	mov	local06, result1
07774     2C 04 90 FD | 	jmp	#LR__0702
07778                 | LR__0624
07778     04 0E B0 FD | 	call	#_compile_fun_varp
0777c     FD 34 02 F6 | 	mov	local08, result1
07780     FE 30 02 F6 | 	mov	local06, result2
07784     1C 04 90 FD | 	jmp	#LR__0702
07788                 | LR__0625
07788     F4 0D B0 FD | 	call	#_compile_fun_varp
0778c     FD 34 02 F6 | 	mov	local08, result1
07790     FE 30 02 F6 | 	mov	local06, result2
07794     0C 04 90 FD | 	jmp	#LR__0702
07798                 | LR__0626
07798     E4 0D B0 FD | 	call	#_compile_fun_varp
0779c     FD 34 02 F6 | 	mov	local08, result1
077a0     FE 30 02 F6 | 	mov	local06, result2
077a4     FC 03 90 FD | 	jmp	#LR__0702
077a8                 | LR__0627
077a8                 | ' return expr()
077a8     B8 3C B0 FD | 	call	#_expr
077ac     FD 30 02 F6 | 	mov	local06, result1
077b0     F0 03 90 FD | 	jmp	#LR__0702
077b4                 | LR__0628
077b4     C8 0D B0 FD | 	call	#_compile_fun_varp
077b8     FD 34 02 F6 | 	mov	local08, result1
077bc     FE 30 02 F6 | 	mov	local06, result2
077c0     E0 03 90 FD | 	jmp	#LR__0702
077c4                 | LR__0629
077c4                 | ' return expr()
077c4     9C 3C B0 FD | 	call	#_expr
077c8     FD 30 02 F6 | 	mov	local06, result1
077cc     D4 03 90 FD | 	jmp	#LR__0702
077d0                 | LR__0630
077d0                 | ' return expr()
077d0     90 3C B0 FD | 	call	#_expr
077d4     FD 30 02 F6 | 	mov	local06, result1
077d8     C8 03 90 FD | 	jmp	#LR__0702
077dc                 | LR__0631
077dc                 | ' return expr()
077dc     84 3C B0 FD | 	call	#_expr
077e0     FD 30 02 F6 | 	mov	local06, result1
077e4     BC 03 90 FD | 	jmp	#LR__0702
077e8                 | LR__0632
077e8     94 0D B0 FD | 	call	#_compile_fun_varp
077ec     FD 34 02 F6 | 	mov	local08, result1
077f0     FE 30 02 F6 | 	mov	local06, result2
077f4     AC 03 90 FD | 	jmp	#LR__0702
077f8                 | LR__0633
077f8     B4 0A B0 FD | 	call	#_compile_fun_2p
077fc     FD 30 02 F6 | 	mov	local06, result1
07800     A0 03 90 FD | 	jmp	#LR__0702
07804                 | LR__0634
07804     A8 0A B0 FD | 	call	#_compile_fun_2p
07808     FD 30 02 F6 | 	mov	local06, result1
0780c     94 03 90 FD | 	jmp	#LR__0702
07810                 | LR__0635
07810     9C 0A B0 FD | 	call	#_compile_fun_2p
07814     FD 30 02 F6 | 	mov	local06, result1
07818     88 03 90 FD | 	jmp	#LR__0702
0781c                 | LR__0636
0781c     90 0A B0 FD | 	call	#_compile_fun_2p
07820     FD 30 02 F6 | 	mov	local06, result1
07824     7C 03 90 FD | 	jmp	#LR__0702
07828                 | LR__0637
07828                 | ' return expr()
07828     38 3C B0 FD | 	call	#_expr
0782c     FD 30 02 F6 | 	mov	local06, result1
07830     70 03 90 FD | 	jmp	#LR__0702
07834                 | LR__0638
07834     48 0D B0 FD | 	call	#_compile_fun_varp
07838     FD 34 02 F6 | 	mov	local08, result1
0783c     FE 30 02 F6 | 	mov	local06, result2
07840     60 03 90 FD | 	jmp	#LR__0702
07844                 | LR__0639
07844     38 0D B0 FD | 	call	#_compile_fun_varp
07848     FD 34 02 F6 | 	mov	local08, result1
0784c     FE 30 02 F6 | 	mov	local06, result2
07850     50 03 90 FD | 	jmp	#LR__0702
07854                 | LR__0640
07854     28 0D B0 FD | 	call	#_compile_fun_varp
07858     FD 34 02 F6 | 	mov	local08, result1
0785c     FE 30 02 F6 | 	mov	local06, result2
07860     40 03 90 FD | 	jmp	#LR__0702
07864                 | LR__0641
07864                 | ' return expr()
07864     FC 3B B0 FD | 	call	#_expr
07868     FD 30 02 F6 | 	mov	local06, result1
0786c     34 03 90 FD | 	jmp	#LR__0702
07870                 | LR__0642
07870     30 22 B0 FD | 	call	#_compile_dim
07874     FD 30 02 F6 | 	mov	local06, result1
07878     E4 03 90 FD | 	jmp	#LR__0703
0787c                 | LR__0643
0787c     00 0D B0 FD | 	call	#_compile_fun_varp
07880     FD 34 02 F6 | 	mov	local08, result1
07884     FE 30 02 F6 | 	mov	local06, result2
07888     18 03 90 FD | 	jmp	#LR__0702
0788c                 | LR__0644
0788c     20 0A B0 FD | 	call	#_compile_fun_2p
07890     FD 30 02 F6 | 	mov	local06, result1
07894     0C 03 90 FD | 	jmp	#LR__0702
07898                 | LR__0645
07898     E4 0C B0 FD | 	call	#_compile_fun_varp
0789c     FD 34 02 F6 | 	mov	local08, result1
078a0     FE 30 02 F6 | 	mov	local06, result2
078a4     FC 02 90 FD | 	jmp	#LR__0702
078a8                 | LR__0646
078a8     17 13 02 F6 | 	mov	arg01, local05
078ac     BC 20 B0 FD | 	call	#_compile_else
078b0     FD 30 02 F6 | 	mov	local06, result1
078b4     A8 03 90 FD | 	jmp	#LR__0703
078b8                 | LR__0647
078b8     C4 0C B0 FD | 	call	#_compile_fun_varp
078bc     FD 34 02 F6 | 	mov	local08, result1
078c0     FE 30 02 F6 | 	mov	local06, result2
078c4     DC 02 90 FD | 	jmp	#LR__0702
078c8                 | LR__0648
078c8     B4 0C B0 FD | 	call	#_compile_fun_varp
078cc     FD 34 02 F6 | 	mov	local08, result1
078d0     FE 30 02 F6 | 	mov	local06, result2
078d4     CC 02 90 FD | 	jmp	#LR__0702
078d8                 | LR__0649
078d8     01 2E 16 F2 | 	cmp	local05, #1 wc
078dc     08 00 90 CD |  if_b	jmp	#LR__0650
078e0     D4 2D B0 FD | 	call	#_compile_goto
078e4     78 03 90 FD | 	jmp	#LR__0703
078e8                 | LR__0650
078e8     19 12 06 F6 | 	mov	arg01, #25
078ec     00 14 06 F6 | 	mov	arg02, #0
078f0     A8 A6 B1 FD | 	call	#_printerror
078f4     68 03 90 FD | 	jmp	#LR__0703
078f8                 | LR__0651
078f8     01 2E 16 F2 | 	cmp	local05, #1 wc
078fc     08 00 90 CD |  if_b	jmp	#LR__0652
07900     50 2D B0 FD | 	call	#_compile_gosub
07904     58 03 90 FD | 	jmp	#LR__0703
07908                 | LR__0652
07908     19 12 06 F6 | 	mov	arg01, #25
0790c     00 14 06 F6 | 	mov	arg02, #0
07910     88 A6 B1 FD | 	call	#_printerror
07914     48 03 90 FD | 	jmp	#LR__0703
07918                 | LR__0653
07918     64 0C B0 FD | 	call	#_compile_fun_varp
0791c     FD 34 02 F6 | 	mov	local08, result1
07920     FE 30 02 F6 | 	mov	local06, result2
07924     7C 02 90 FD | 	jmp	#LR__0702
07928                 | LR__0654
07928     FC 0A B0 FD | 	call	#_compile_fun_4p
0792c     FD 30 02 F6 | 	mov	local06, result1
07930     70 02 90 FD | 	jmp	#LR__0702
07934                 | LR__0655
07934                 | ' return expr()
07934     2C 3B B0 FD | 	call	#_expr
07938     FD 30 02 F6 | 	mov	local06, result1
0793c     64 02 90 FD | 	jmp	#LR__0702
07940                 | LR__0656
07940     34 28 B0 FD | 	call	#_compile_for
07944     FD 30 02 F6 | 	mov	local06, result1
07948     14 03 90 FD | 	jmp	#LR__0703
0794c                 | LR__0657
0794c     30 0C B0 FD | 	call	#_compile_fun_varp
07950     FD 34 02 F6 | 	mov	local08, result1
07954     FE 30 02 F6 | 	mov	local06, result2
07958     48 02 90 FD | 	jmp	#LR__0702
0795c                 | LR__0658
0795c     17 13 02 F6 | 	mov	arg01, local05
07960     80 1E B0 FD | 	call	#_compile_if
07964     FD 30 02 F6 | 	mov	local06, result1
07968     F4 02 90 FD | 	jmp	#LR__0703
0796c                 | LR__0659
0796c                 | ' return expr()
0796c     F4 3A B0 FD | 	call	#_expr
07970     FD 30 02 F6 | 	mov	local06, result1
07974     2C 02 90 FD | 	jmp	#LR__0702
07978                 | LR__0660
07978     D0 0D B0 FD | 	call	#_compile_input
0797c     FD 34 02 F6 | 	mov	local08, result1
07980     FE 30 02 F6 | 	mov	local06, result2
07984     1C 02 90 FD | 	jmp	#LR__0702
07988                 | LR__0661
07988                 | ' return expr()
07988     D8 3A B0 FD | 	call	#_expr
0798c     FD 30 02 F6 | 	mov	local06, result1
07990     10 02 90 FD | 	jmp	#LR__0702
07994                 | LR__0662
07994     E8 0B B0 FD | 	call	#_compile_fun_varp
07998     FD 34 02 F6 | 	mov	local08, result1
0799c     FE 30 02 F6 | 	mov	local06, result2
079a0     00 02 90 FD | 	jmp	#LR__0702
079a4                 | LR__0663
079a4     D8 0B B0 FD | 	call	#_compile_fun_varp
079a8     FD 34 02 F6 | 	mov	local08, result1
079ac     FE 30 02 F6 | 	mov	local06, result2
079b0     F0 01 90 FD | 	jmp	#LR__0702
079b4                 | LR__0664
079b4     F8 08 B0 FD | 	call	#_compile_fun_2p
079b8     FD 30 02 F6 | 	mov	local06, result1
079bc     E4 01 90 FD | 	jmp	#LR__0702
079c0                 | LR__0665
079c0                 | ' return expr()
079c0     A0 3A B0 FD | 	call	#_expr
079c4     FD 30 02 F6 | 	mov	local06, result1
079c8     D8 01 90 FD | 	jmp	#LR__0702
079cc                 | LR__0666
079cc                 | ' return expr()
079cc     94 3A B0 FD | 	call	#_expr
079d0     FD 30 02 F6 | 	mov	local06, result1
079d4     CC 01 90 FD | 	jmp	#LR__0702
079d8                 | LR__0667
079d8                 | ' return expr()
079d8     88 3A B0 FD | 	call	#_expr
079dc     FD 30 02 F6 | 	mov	local06, result1
079e0     C0 01 90 FD | 	jmp	#LR__0702
079e4                 | LR__0668
079e4     D4 2A B0 FD | 	call	#_compile_next
079e8     FD 30 02 F6 | 	mov	local06, result1
079ec     70 02 90 FD | 	jmp	#LR__0703
079f0                 | LR__0669
079f0     B4 30 B0 FD | 	call	#_compile_on
079f4     FD 30 02 F6 | 	mov	local06, result1
079f8     64 02 90 FD | 	jmp	#LR__0703
079fc                 | LR__0670
079fc     38 09 B0 FD | 	call	#_compile_fun_3p
07a00     FD 30 02 F6 | 	mov	local06, result1
07a04     9C 01 90 FD | 	jmp	#LR__0702
07a08                 | LR__0671
07a08                 | ' return expr()
07a08     58 3A B0 FD | 	call	#_expr
07a0c     FD 30 02 F6 | 	mov	local06, result1
07a10     90 01 90 FD | 	jmp	#LR__0702
07a14                 | LR__0672
07a14                 | ' return expr()
07a14     4C 3A B0 FD | 	call	#_expr
07a18     FD 30 02 F6 | 	mov	local06, result1
07a1c     84 01 90 FD | 	jmp	#LR__0702
07a20                 | LR__0673
07a20                 | ' return expr()
07a20     40 3A B0 FD | 	call	#_expr
07a24     FD 30 02 F6 | 	mov	local06, result1
07a28     78 01 90 FD | 	jmp	#LR__0702
07a2c                 | LR__0674
07a2c                 | ' return expr()
07a2c     34 3A B0 FD | 	call	#_expr
07a30     FD 30 02 F6 | 	mov	local06, result1
07a34     6C 01 90 FD | 	jmp	#LR__0702
07a38                 | LR__0675
07a38     EC 09 B0 FD | 	call	#_compile_fun_4p
07a3c     FD 30 02 F6 | 	mov	local06, result1
07a40     60 01 90 FD | 	jmp	#LR__0702
07a44                 | LR__0676
07a44                 | ' return expr()
07a44     1C 3A B0 FD | 	call	#_expr
07a48     FD 30 02 F6 | 	mov	local06, result1
07a4c     54 01 90 FD | 	jmp	#LR__0702
07a50                 | LR__0677
07a50     5C 08 B0 FD | 	call	#_compile_fun_2p
07a54     FD 30 02 F6 | 	mov	local06, result1
07a58     48 01 90 FD | 	jmp	#LR__0702
07a5c                 | LR__0678
07a5c     20 0B B0 FD | 	call	#_compile_fun_varp
07a60     FD 34 02 F6 | 	mov	local08, result1
07a64     FE 30 02 F6 | 	mov	local06, result2
07a68     38 01 90 FD | 	jmp	#LR__0702
07a6c                 | LR__0679
07a6c     10 0B B0 FD | 	call	#_compile_fun_varp
07a70     FD 34 02 F6 | 	mov	local08, result1
07a74     FE 30 02 F6 | 	mov	local06, result2
07a78     28 01 90 FD | 	jmp	#LR__0702
07a7c                 | LR__0680
07a7c     30 08 B0 FD | 	call	#_compile_fun_2p
07a80     FD 30 02 F6 | 	mov	local06, result1
07a84     1C 01 90 FD | 	jmp	#LR__0702
07a88                 | LR__0681
07a88     24 08 B0 FD | 	call	#_compile_fun_2p
07a8c     FD 30 02 F6 | 	mov	local06, result1
07a90     10 01 90 FD | 	jmp	#LR__0702
07a94                 | LR__0682
07a94     74 16 B0 FD | 	call	#_compile_print
07a98     FD 30 02 F6 | 	mov	local06, result1
07a9c     C0 01 90 FD | 	jmp	#LR__0703
07aa0                 | LR__0683
07aa0     DC 0A B0 FD | 	call	#_compile_fun_varp
07aa4     FD 34 02 F6 | 	mov	local08, result1
07aa8     FE 30 02 F6 | 	mov	local06, result2
07aac     F4 00 90 FD | 	jmp	#LR__0702
07ab0                 | LR__0684
07ab0     A8 0B B0 FD | 	call	#_compile_read
07ab4     FD 34 02 F6 | 	mov	local08, result1
07ab8     FE 30 02 F6 | 	mov	local06, result2
07abc     E4 00 90 FD | 	jmp	#LR__0702
07ac0                 | LR__0685
07ac0                 | ' return expr()
07ac0     A0 39 B0 FD | 	call	#_expr
07ac4     FD 30 02 F6 | 	mov	local06, result1
07ac8     D8 00 90 FD | 	jmp	#LR__0702
07acc                 | LR__0686
07acc     B0 0A B0 FD | 	call	#_compile_fun_varp
07ad0     FD 34 02 F6 | 	mov	local08, result1
07ad4     FE 30 02 F6 | 	mov	local06, result2
07ad8     C8 00 90 FD | 	jmp	#LR__0702
07adc                 | LR__0687
07adc     A0 0A B0 FD | 	call	#_compile_fun_varp
07ae0     FD 34 02 F6 | 	mov	local08, result1
07ae4     FE 30 02 F6 | 	mov	local06, result2
07ae8     B8 00 90 FD | 	jmp	#LR__0702
07aec                 | LR__0688
07aec     C0 07 B0 FD | 	call	#_compile_fun_2p
07af0     FD 30 02 F6 | 	mov	local06, result1
07af4     AC 00 90 FD | 	jmp	#LR__0702
07af8                 | LR__0689
07af8     B4 07 B0 FD | 	call	#_compile_fun_2p
07afc     FD 30 02 F6 | 	mov	local06, result1
07b00     A0 00 90 FD | 	jmp	#LR__0702
07b04                 | LR__0690
07b04     A8 07 B0 FD | 	call	#_compile_fun_2p
07b08     FD 30 02 F6 | 	mov	local06, result1
07b0c     94 00 90 FD | 	jmp	#LR__0702
07b10                 | LR__0691
07b10     9C 07 B0 FD | 	call	#_compile_fun_2p
07b14     FD 30 02 F6 | 	mov	local06, result1
07b18     88 00 90 FD | 	jmp	#LR__0702
07b1c                 | LR__0692
07b1c     90 07 B0 FD | 	call	#_compile_fun_2p
07b20     FD 30 02 F6 | 	mov	local06, result1
07b24     7C 00 90 FD | 	jmp	#LR__0702
07b28                 | LR__0693
07b28     84 07 B0 FD | 	call	#_compile_fun_2p
07b2c     FD 30 02 F6 | 	mov	local06, result1
07b30     70 00 90 FD | 	jmp	#LR__0702
07b34                 | LR__0694
07b34     78 07 B0 FD | 	call	#_compile_fun_2p
07b38     FD 30 02 F6 | 	mov	local06, result1
07b3c     64 00 90 FD | 	jmp	#LR__0702
07b40                 | LR__0695
07b40     3C 0A B0 FD | 	call	#_compile_fun_varp
07b44     FD 34 02 F6 | 	mov	local08, result1
07b48     FE 30 02 F6 | 	mov	local06, result2
07b4c     54 00 90 FD | 	jmp	#LR__0702
07b50                 | LR__0696
07b50     E4 07 B0 FD | 	call	#_compile_fun_3p
07b54     FD 30 02 F6 | 	mov	local06, result1
07b58     48 00 90 FD | 	jmp	#LR__0702
07b5c                 | LR__0697
07b5c                 | ' return expr()
07b5c     04 39 B0 FD | 	call	#_expr
07b60     FD 30 02 F6 | 	mov	local06, result1
07b64     3C 00 90 FD | 	jmp	#LR__0702
07b68                 | LR__0698
07b68     44 07 B0 FD | 	call	#_compile_fun_2p
07b6c     FD 30 02 F6 | 	mov	local06, result1
07b70     30 00 90 FD | 	jmp	#LR__0702
07b74                 | LR__0699
07b74     38 07 B0 FD | 	call	#_compile_fun_2p
07b78     FD 30 02 F6 | 	mov	local06, result1
07b7c     24 00 90 FD | 	jmp	#LR__0702
07b80                 | LR__0700
07b80     2C 07 B0 FD | 	call	#_compile_fun_2p
07b84     FD 30 02 F6 | 	mov	local06, result1
07b88     18 00 90 FD | 	jmp	#LR__0702
07b8c                 | LR__0701
07b8c     1C 13 B0 FD | 	call	#_compile_array_assign
07b90     FD 30 02 F6 | 	mov	local06, result1
07b94     0E 30 0E F2 | 	cmp	local06, #14 wz
07b98     C4 00 90 5D |  if_ne	jmp	#LR__0703
07b9c                 | ' return 23
07b9c     17 30 06 F6 | 	mov	local06, #23
07ba0     BC 00 90 FD | 	jmp	#LR__0703
07ba4                 | ' return 23
07ba4                 | LR__0702
07ba4     19 2B 02 F6 | 	mov	local03, local07
07ba8     1A 27 02 F6 | 	mov	local01, local08
07bac     13 37 02 F6 | 	mov	local09, local01
07bb0     14 39 02 F6 | 	mov	local10, local02
07bb4     15 33 02 F6 | 	mov	local07, local03
07bb8     4A 00 00 FF 
07bbc     7C E4 05 F1 | 	add	objptr, ##38012
07bc0     F2 26 02 FB | 	rdlong	local01, objptr
07bc4     13 35 02 F6 | 	mov	local08, local01
07bc8     01 34 66 F0 | 	shl	local08, #1
07bcc     13 35 02 F1 | 	add	local08, local01
07bd0     02 34 66 F0 | 	shl	local08, #2
07bd4     03 00 00 FF 
07bd8     00 E4 85 F1 | 	sub	objptr, ##1536
07bdc     F2 34 02 F1 | 	add	local08, objptr
07be0     1A 37 62 FC | 	wrlong	local09, local08
07be4     03 00 00 FF 
07be8     00 E4 05 F1 | 	add	objptr, ##1536
07bec     F2 26 02 FB | 	rdlong	local01, objptr
07bf0     13 37 02 F6 | 	mov	local09, local01
07bf4     01 36 66 F0 | 	shl	local09, #1
07bf8     13 37 02 F1 | 	add	local09, local01
07bfc     02 36 66 F0 | 	shl	local09, #2
07c00     03 00 00 FF 
07c04     00 E4 85 F1 | 	sub	objptr, ##1536
07c08     F2 36 02 F1 | 	add	local09, objptr
07c0c     04 36 06 F1 | 	add	local09, #4
07c10     1B 39 62 FC | 	wrlong	local10, local09
07c14     03 00 00 FF 
07c18     00 E4 05 F1 | 	add	objptr, ##1536
07c1c     F2 26 02 FB | 	rdlong	local01, objptr
07c20     13 39 02 F6 | 	mov	local10, local01
07c24     01 38 66 F0 | 	shl	local10, #1
07c28     13 39 02 F1 | 	add	local10, local01
07c2c     02 38 66 F0 | 	shl	local10, #2
07c30     03 00 00 FF 
07c34     00 E4 85 F1 | 	sub	objptr, ##1536
07c38     F2 38 02 F1 | 	add	local10, objptr
07c3c     08 38 06 F1 | 	add	local10, #8
07c40     1C 33 62 FC | 	wrlong	local07, local10
07c44     03 00 00 FF 
07c48     00 E4 05 F1 | 	add	objptr, ##1536
07c4c     F2 36 02 FB | 	rdlong	local09, objptr
07c50     01 36 06 F1 | 	add	local09, #1
07c54     F2 36 62 FC | 	wrlong	local09, objptr
07c58     4A 00 00 FF 
07c5c     7C E4 85 F1 | 	sub	objptr, ##38012
07c60                 | LR__0703
07c60                 | ' 
07c60                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07c60                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07c60     03 2C 0E F2 | 	cmp	local04, #3 wz
07c64     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07c68     38 00 90 5D |  if_ne	jmp	#LR__0704
07c6c     4A 00 00 FF 
07c70     7C E4 05 F1 | 	add	objptr, ##38012
07c74     F2 38 02 FB | 	rdlong	local10, objptr
07c78     1C 27 02 F6 | 	mov	local01, local10
07c7c     01 26 66 F0 | 	shl	local01, #1
07c80     1C 27 02 F1 | 	add	local01, local10
07c84     02 26 66 F0 | 	shl	local01, #2
07c88     03 00 00 FF 
07c8c     00 E4 85 F1 | 	sub	objptr, ##1536
07c90     F2 26 02 F1 | 	add	local01, objptr
07c94     08 26 06 F1 | 	add	local01, #8
07c98     13 FD 6B FC | 	wrlong	#510, local01
07c9c     47 00 00 FF 
07ca0     7C E4 85 F1 | 	sub	objptr, ##36476
07ca4                 | LR__0704
07ca4                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
07ca4                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07ca4     4A 00 00 FF 
07ca8     7C E4 05 F1 | 	add	objptr, ##38012
07cac     F2 26 02 FB | 	rdlong	local01, objptr
07cb0     4A 00 00 FF 
07cb4     7C E4 85 F1 | 	sub	objptr, ##38012
07cb8     97 58 48 FB | 	callpa	#(@LR__0707-@LR__0705)>>2,fcache_load_ptr_
07cbc                 | LR__0705
07cbc     13 39 02 F6 | 	mov	local10, local01
07cc0     01 38 66 F0 | 	shl	local10, #1
07cc4     13 39 02 F1 | 	add	local10, local01
07cc8     02 38 66 F0 | 	shl	local10, #2
07ccc     47 00 00 FF 
07cd0     7C E4 05 F1 | 	add	objptr, ##36476
07cd4     F2 38 02 F1 | 	add	local10, objptr
07cd8     08 38 06 F1 | 	add	local10, #8
07cdc     1C 39 02 FB | 	rdlong	local10, local10
07ce0     9B 38 0E F2 | 	cmp	local10, #155 wz
07ce4     47 00 00 FF 
07ce8     7C E4 85 F1 | 	sub	objptr, ##36476
07cec     70 00 90 5D |  if_ne	jmp	#LR__0706
07cf0     13 37 02 F6 | 	mov	local09, local01
07cf4     01 36 86 F1 | 	sub	local09, #1
07cf8     1B 39 02 F6 | 	mov	local10, local09
07cfc     01 38 66 F0 | 	shl	local10, #1
07d00     1B 39 02 F1 | 	add	local10, local09
07d04     02 38 66 F0 | 	shl	local10, #2
07d08     47 00 00 FF 
07d0c     7C E4 05 F1 | 	add	objptr, ##36476
07d10     F2 38 02 F1 | 	add	local10, objptr
07d14     08 38 06 F1 | 	add	local10, #8
07d18     1C 39 02 FB | 	rdlong	local10, local10
07d1c     11 38 0E F2 | 	cmp	local10, #17 wz
07d20     47 00 00 FF 
07d24     7C E4 85 F1 | 	sub	objptr, ##36476
07d28     34 00 90 5D |  if_ne	jmp	#LR__0706
07d2c     13 37 02 F6 | 	mov	local09, local01
07d30     01 36 86 F1 | 	sub	local09, #1
07d34     1B 39 02 F6 | 	mov	local10, local09
07d38     01 38 66 F0 | 	shl	local10, #1
07d3c     1B 39 02 F1 | 	add	local10, local09
07d40     02 38 66 F0 | 	shl	local10, #2
07d44     47 00 00 FF 
07d48     7C E4 05 F1 | 	add	objptr, ##36476
07d4c     F2 38 02 F1 | 	add	local10, objptr
07d50     08 38 06 F1 | 	add	local10, #8
07d54     1C 25 68 FC | 	wrlong	#18, local10
07d58     47 00 00 FF 
07d5c     7C E4 85 F1 | 	sub	objptr, ##36476
07d60                 | LR__0706
07d60     01 26 86 F1 | 	sub	local01, #1
07d64     01 26 56 F2 | 	cmps	local01, #1 wc
07d68     50 FF 9F 3D |  if_ae	jmp	#LR__0705
07d6c                 | LR__0707
07d6c                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
07d6c                 | ' return err
07d6c     18 FB 01 F6 | 	mov	result1, local06
07d70     A7 F0 03 F6 | 	mov	ptra, fp
07d74     B2 00 A0 FD | 	call	#popregs_
07d78                 | _compile_immediate_ret
07d78     2D 00 64 FD | 	ret
07d7c                 | 
07d7c                 | ' 
07d7c                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
07d7c                 | ' 
07d7c                 | ' function compile_immediate_assign(linetype as ulong) as ulong
07d7c                 | _compile_immediate_assign
07d7c     0C 4A 05 F6 | 	mov	COUNT_, #12
07d80     A8 00 A0 FD | 	call	#pushregs_
07d84     09 2D 02 F6 | 	mov	local04, arg01
07d88     FF 2A 06 F6 | 	mov	local03, #255
07d8c     01 2E 66 F6 | 	neg	local05, #1
07d90     00 30 06 F6 | 	mov	local06, #0
07d94                 | ' 
07d94                 | ' t1.result_type=result_error : t1.result.uresult=0
07d94                 | ' i=-1: j=-1 : err=0
07d94                 | ' 
07d94                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
07d94     02 2C 0E F2 | 	cmp	local04, #2 wz
07d98     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07d9c     35 00 00 AF 
07da0     0C E4 05 A1 |  if_e	add	objptr, ##27148
07da4     F2 32 02 AB |  if_e	rdlong	local07, objptr
07da8     02 00 00 AF 
07dac     38 E4 05 A1 |  if_e	add	objptr, ##1080
07db0     F2 04 68 AC |  if_e	wrlong	#2, objptr
07db4     37 00 00 AF 
07db8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07dbc                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
07dbc     04 2C 0E F2 | 	cmp	local04, #4 wz
07dc0     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07dc4     2C 00 90 5D |  if_ne	jmp	#LR__0710
07dc8     35 00 00 FF 
07dcc     14 E4 05 F1 | 	add	objptr, ##27156
07dd0     F2 32 02 FB | 	rdlong	local07, objptr
07dd4     02 00 00 FF 
07dd8     30 E4 05 F1 | 	add	objptr, ##1072
07ddc     F2 06 68 FC | 	wrlong	#3, objptr
07de0     13 00 00 FF 
07de4     38 E4 05 F1 | 	add	objptr, ##9784
07de8     F2 04 68 FC | 	wrlong	#2, objptr
07dec     4A 00 00 FF 
07df0     7C E4 85 F1 | 	sub	objptr, ##38012
07df4                 | LR__0710
07df4                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07df4     05 2C 0E F2 | 	cmp	local04, #5 wz
07df8     3C 00 90 5D |  if_ne	jmp	#LR__0711
07dfc     37 00 00 FF 
07e00     44 E4 05 F1 | 	add	objptr, ##28228
07e04     F2 FA 01 FB | 	rdlong	result1, objptr
07e08     FD 32 02 F6 | 	mov	local07, result1
07e0c     03 32 66 F0 | 	shl	local07, #3
07e10     02 00 00 FF 
07e14     38 E4 85 F1 | 	sub	objptr, ##1080
07e18     F2 32 02 F1 | 	add	local07, objptr
07e1c     19 33 02 FB | 	rdlong	local07, local07
07e20     02 FA 05 F1 | 	add	result1, #2
07e24     02 00 00 FF 
07e28     38 E4 05 F1 | 	add	objptr, ##1080
07e2c     F2 FA 61 FC | 	wrlong	result1, objptr
07e30     37 00 00 FF 
07e34     44 E4 85 F1 | 	sub	objptr, ##28228
07e38                 | LR__0711
07e38     19 13 02 F6 | 	mov	arg01, local07
07e3c     01 14 06 F6 | 	mov	arg02, #1
07e40     48 FC B1 FD | 	call	#__system__Right_S
07e44     FD 34 02 F6 | 	mov	local08, result1
07e48     18 36 B0 FD | 	call	#_expr
07e4c                 | ' 
07e4c                 | ' suffix2$=right$(varname2$,1)
07e4c                 | ' expr()
07e4c                 | ' if varnum>0 then					' try to find a variable
07e4c     35 00 00 FF 
07e50     08 E4 05 F1 | 	add	objptr, ##27144
07e54     F2 36 02 FB | 	rdlong	local09, objptr
07e58     35 00 00 FF 
07e5c     08 E4 85 F1 | 	sub	objptr, ##27144
07e60     01 36 56 F2 | 	cmps	local09, #1 wc
07e64     58 00 90 CD |  if_b	jmp	#LR__0714
07e68                 | '   for i=0 to varnum-1
07e68     00 38 06 F6 | 	mov	local10, #0
07e6c     35 00 00 FF 
07e70     08 E4 05 F1 | 	add	objptr, ##27144
07e74     F2 3A 02 FB | 	rdlong	local11, objptr
07e78     35 00 00 FF 
07e7c     08 E4 85 F1 | 	sub	objptr, ##27144
07e80                 | LR__0712
07e80     1D 39 52 F2 | 	cmps	local10, local11 wc
07e84     38 00 90 3D |  if_ae	jmp	#LR__0713
07e88                 | '     if variables(i).name=varname2$ then j=i : exit
07e88     1C 37 02 F6 | 	mov	local09, local10
07e8c     04 36 66 F0 | 	shl	local09, #4
07e90     14 00 00 FF 
07e94     F8 E5 05 F1 | 	add	objptr, ##10744
07e98     F2 36 02 F1 | 	add	local09, objptr
07e9c     1B 13 02 FB | 	rdlong	arg01, local09
07ea0     19 15 02 F6 | 	mov	arg02, local07
07ea4     14 00 00 FF 
07ea8     F8 E5 85 F1 | 	sub	objptr, ##10744
07eac     00 DB B1 FD | 	call	#__system___string_cmp
07eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
07eb4     1C 2F 02 A6 |  if_e	mov	local05, local10
07eb8     01 38 06 51 |  if_ne	add	local10, #1
07ebc     C0 FF 9F 5D |  if_ne	jmp	#LR__0712
07ec0                 | LR__0713
07ec0                 | LR__0714
07ec0                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
07ec0     FF FF 7F FF 
07ec4     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
07ec8     60 00 90 5D |  if_ne	jmp	#LR__0715
07ecc     35 00 00 FF 
07ed0     08 E4 05 F1 | 	add	objptr, ##27144
07ed4     F2 36 02 FB | 	rdlong	local09, objptr
07ed8     35 00 00 FF 
07edc     08 E4 85 F1 | 	sub	objptr, ##27144
07ee0     02 00 00 FF 
07ee4     00 36 56 F2 | 	cmps	local09, ##1024 wc
07ee8     40 00 90 3D |  if_ae	jmp	#LR__0715
07eec     35 00 00 FF 
07ef0     08 E4 05 F1 | 	add	objptr, ##27144
07ef4     F2 3A 02 FB | 	rdlong	local11, objptr
07ef8     04 3A 66 F0 | 	shl	local11, #4
07efc     20 00 00 FF 
07f00     10 E4 85 F1 | 	sub	objptr, ##16400
07f04     F2 3A 02 F1 | 	add	local11, objptr
07f08     1D 33 62 FC | 	wrlong	local07, local11
07f0c     20 00 00 FF 
07f10     10 E4 05 F1 | 	add	objptr, ##16400
07f14     F2 36 02 FB | 	rdlong	local09, objptr
07f18     1B 2F 02 F6 | 	mov	local05, local09
07f1c     01 36 06 F1 | 	add	local09, #1
07f20     F2 36 62 FC | 	wrlong	local09, objptr
07f24     35 00 00 FF 
07f28     08 E4 85 F1 | 	sub	objptr, ##27144
07f2c                 | LR__0715
07f2c                 | ' if varnum>=maxvars then
07f2c     35 00 00 FF 
07f30     08 E4 05 F1 | 	add	objptr, ##27144
07f34     F2 36 02 FB | 	rdlong	local09, objptr
07f38     35 00 00 FF 
07f3c     08 E4 85 F1 | 	sub	objptr, ##27144
07f40     02 00 00 FF 
07f44     00 36 56 F2 | 	cmps	local09, ##1024 wc
07f48     2D 30 06 36 |  if_ae	mov	local06, #45
07f4c     C8 01 90 3D |  if_ae	jmp	#LR__0720
07f50     17 27 02 F6 | 	mov	local01, local05
07f54     17 2A 06 F6 | 	mov	local03, #23
07f58     13 37 02 F6 | 	mov	local09, local01
07f5c     14 3D 02 F6 | 	mov	local12, local02
07f60     15 27 02 F6 | 	mov	local01, local03
07f64     4A 00 00 FF 
07f68     7C E4 05 F1 | 	add	objptr, ##38012
07f6c     F2 3A 02 FB | 	rdlong	local11, objptr
07f70     1D 39 02 F6 | 	mov	local10, local11
07f74     01 38 66 F0 | 	shl	local10, #1
07f78     1D 39 02 F1 | 	add	local10, local11
07f7c     02 38 66 F0 | 	shl	local10, #2
07f80     03 00 00 FF 
07f84     00 E4 85 F1 | 	sub	objptr, ##1536
07f88     F2 38 02 F1 | 	add	local10, objptr
07f8c     1C 37 62 FC | 	wrlong	local09, local10
07f90     03 00 00 FF 
07f94     00 E4 05 F1 | 	add	objptr, ##1536
07f98     F2 36 02 FB | 	rdlong	local09, objptr
07f9c     1B 3B 02 F6 | 	mov	local11, local09
07fa0     01 3A 66 F0 | 	shl	local11, #1
07fa4     1B 3B 02 F1 | 	add	local11, local09
07fa8     02 3A 66 F0 | 	shl	local11, #2
07fac     03 00 00 FF 
07fb0     00 E4 85 F1 | 	sub	objptr, ##1536
07fb4     F2 3A 02 F1 | 	add	local11, objptr
07fb8     04 3A 06 F1 | 	add	local11, #4
07fbc     1D 3D 62 FC | 	wrlong	local12, local11
07fc0     03 00 00 FF 
07fc4     00 E4 05 F1 | 	add	objptr, ##1536
07fc8     F2 36 02 FB | 	rdlong	local09, objptr
07fcc     1B 3D 02 F6 | 	mov	local12, local09
07fd0     01 3C 66 F0 | 	shl	local12, #1
07fd4     1B 3D 02 F1 | 	add	local12, local09
07fd8     02 3C 66 F0 | 	shl	local12, #2
07fdc     03 00 00 FF 
07fe0     00 E4 85 F1 | 	sub	objptr, ##1536
07fe4     F2 3C 02 F1 | 	add	local12, objptr
07fe8     08 3C 06 F1 | 	add	local12, #8
07fec     1E 27 62 FC | 	wrlong	local01, local12
07ff0     03 00 00 FF 
07ff4     00 E4 05 F1 | 	add	objptr, ##1536
07ff8     F2 36 02 FB | 	rdlong	local09, objptr
07ffc     01 36 06 F1 | 	add	local09, #1
08000     F2 36 62 FC | 	wrlong	local09, objptr
08004     4A 00 00 FF 
08008     7C E4 85 F1 | 	sub	objptr, ##38012
0800c                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
0800c                 | '   compiledline(lineptr)=t1:  lineptr+=1 
0800c                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
0800c     03 2C 0E F2 | 	cmp	local04, #3 wz
08010     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
08014     38 00 90 5D |  if_ne	jmp	#LR__0716
08018     4A 00 00 FF 
0801c     7C E4 05 F1 | 	add	objptr, ##38012
08020     F2 3C 02 FB | 	rdlong	local12, objptr
08024     1E 27 02 F6 | 	mov	local01, local12
08028     01 26 66 F0 | 	shl	local01, #1
0802c     1E 27 02 F1 | 	add	local01, local12
08030     02 26 66 F0 | 	shl	local01, #2
08034     03 00 00 FF 
08038     00 E4 85 F1 | 	sub	objptr, ##1536
0803c     F2 26 02 F1 | 	add	local01, objptr
08040     08 26 06 F1 | 	add	local01, #8
08044     13 FD 6B FC | 	wrlong	#510, local01
08048     47 00 00 FF 
0804c     7C E4 85 F1 | 	sub	objptr, ##36476
08050                 | LR__0716
08050                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08050     4A 00 00 FF 
08054     7C E4 05 F1 | 	add	objptr, ##38012
08058     F2 38 02 FB | 	rdlong	local10, objptr
0805c     4A 00 00 FF 
08060     7C E4 85 F1 | 	sub	objptr, ##38012
08064     97 58 48 FB | 	callpa	#(@LR__0719-@LR__0717)>>2,fcache_load_ptr_
08068                 | LR__0717
08068     1C 3D 02 F6 | 	mov	local12, local10
0806c     01 3C 66 F0 | 	shl	local12, #1
08070     1C 3D 02 F1 | 	add	local12, local10
08074     02 3C 66 F0 | 	shl	local12, #2
08078     47 00 00 FF 
0807c     7C E4 05 F1 | 	add	objptr, ##36476
08080     F2 3C 02 F1 | 	add	local12, objptr
08084     08 3C 06 F1 | 	add	local12, #8
08088     1E 3D 02 FB | 	rdlong	local12, local12
0808c     9B 3C 0E F2 | 	cmp	local12, #155 wz
08090     47 00 00 FF 
08094     7C E4 85 F1 | 	sub	objptr, ##36476
08098     70 00 90 5D |  if_ne	jmp	#LR__0718
0809c     1C 3D 02 F6 | 	mov	local12, local10
080a0     01 3C 86 F1 | 	sub	local12, #1
080a4     1E 27 02 F6 | 	mov	local01, local12
080a8     01 26 66 F0 | 	shl	local01, #1
080ac     1E 27 02 F1 | 	add	local01, local12
080b0     02 26 66 F0 | 	shl	local01, #2
080b4     47 00 00 FF 
080b8     7C E4 05 F1 | 	add	objptr, ##36476
080bc     F2 26 02 F1 | 	add	local01, objptr
080c0     08 26 06 F1 | 	add	local01, #8
080c4     13 27 02 FB | 	rdlong	local01, local01
080c8     11 26 0E F2 | 	cmp	local01, #17 wz
080cc     47 00 00 FF 
080d0     7C E4 85 F1 | 	sub	objptr, ##36476
080d4     34 00 90 5D |  if_ne	jmp	#LR__0718
080d8     1C 3D 02 F6 | 	mov	local12, local10
080dc     01 3C 86 F1 | 	sub	local12, #1
080e0     1E 27 02 F6 | 	mov	local01, local12
080e4     01 26 66 F0 | 	shl	local01, #1
080e8     1E 27 02 F1 | 	add	local01, local12
080ec     02 26 66 F0 | 	shl	local01, #2
080f0     47 00 00 FF 
080f4     7C E4 05 F1 | 	add	objptr, ##36476
080f8     F2 26 02 F1 | 	add	local01, objptr
080fc     08 26 06 F1 | 	add	local01, #8
08100     13 25 68 FC | 	wrlong	#18, local01
08104     47 00 00 FF 
08108     7C E4 85 F1 | 	sub	objptr, ##36476
0810c                 | LR__0718
0810c     01 38 86 F1 | 	sub	local10, #1
08110     01 38 56 F2 | 	cmps	local10, #1 wc
08114     50 FF 9F 3D |  if_ae	jmp	#LR__0717
08118                 | LR__0719
08118                 | LR__0720
08118                 | ' return err
08118     18 FB 01 F6 | 	mov	result1, local06
0811c     A7 F0 03 F6 | 	mov	ptra, fp
08120     B2 00 A0 FD | 	call	#popregs_
08124                 | _compile_immediate_assign_ret
08124     2D 00 64 FD | 	ret
08128                 | 
08128                 | ' 
08128                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
08128                 | ' 
08128                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
08128                 | _compile
08128     03 4A 05 F6 | 	mov	COUNT_, #3
0812c     A8 00 A0 FD | 	call	#pushregs_
08130     09 27 02 F6 | 	mov	local01, arg01
08134     0B 29 02 F6 | 	mov	local02, arg03
08138     47 00 00 FF 
0813c     7C E4 05 F1 | 	add	objptr, ##36476
08140     F2 26 62 FC | 	wrlong	local01, objptr
08144     04 E4 05 F1 | 	add	objptr, #4
08148     F2 14 62 FC | 	wrlong	arg02, objptr
0814c     47 00 00 FF 
08150     80 E4 85 F1 | 	sub	objptr, ##36480
08154     14 13 02 F6 | 	mov	arg01, local02
08158     01 12 06 F1 | 	add	arg01, #1
0815c     13 15 02 F6 | 	mov	arg02, local01
08160     6C F2 BF FD | 	call	#_compile_immediate
08164     FD 2A 0A F6 | 	mov	local03, result1 wz
08168                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
08168                 | ' ucompiledline(0)=alinemajor
08168                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
08168                 | ' 
08168                 | ' ' cont: 
08168                 | ' ' 0 - this is the first part of the line that will continue
08168                 | ' ' 1 - this is the continuation of the line
08168                 | ' ' 2 - this is the last continued line
08168                 | ' ' 3 - this is the one and only part
08168                 | ' 
08168                 | ' err=compile_immediate(cont+1,alinemajor) 
08168                 | ' if err=0 andalso alinemajor>0 then
08168     74 00 90 5D |  if_ne	jmp	#LR__0735
0816c     01 26 16 F2 | 	cmp	local01, #1 wc
08170     6C 00 90 CD |  if_b	jmp	#LR__0735
08174                 | '   if cont=3 orelse cont=2 then 
08174     03 28 0E F2 | 	cmp	local02, #3 wz
08178     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
0817c     60 00 90 5D |  if_ne	jmp	#LR__0734
08180                 | '     if alinemajor >lastline then 
08180     4A 00 00 FF 
08184     8C E4 05 F1 | 	add	objptr, ##38028
08188     F2 14 02 FB | 	rdlong	arg02, objptr
0818c     4A 00 00 FF 
08190     8C E4 85 F1 | 	sub	objptr, ##38028
08194     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08198     0C 00 90 ED |  if_be	jmp	#LR__0730
0819c     13 13 02 F6 | 	mov	arg01, local01
081a0     64 F1 BF FD | 	call	#_add_line_at_end
081a4     38 00 90 FD | 	jmp	#LR__0733
081a8                 | LR__0730
081a8     13 13 02 F6 | 	mov	arg01, local01
081ac     28 EB BF FD | 	call	#_deleteline
081b0                 | '       deleteline(alinemajor)  
081b0                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
081b0     4A 00 00 FF 
081b4     8C E4 05 F1 | 	add	objptr, ##38028
081b8     F2 14 02 FB | 	rdlong	arg02, objptr
081bc     4A 00 00 FF 
081c0     8C E4 85 F1 | 	sub	objptr, ##38028
081c4     0A 27 1A F2 | 	cmp	local01, arg02 wcz
081c8     0C 00 90 ED |  if_be	jmp	#LR__0731
081cc     13 13 02 F6 | 	mov	arg01, local01
081d0     34 F1 BF FD | 	call	#_add_line_at_end
081d4     08 00 90 FD | 	jmp	#LR__0732
081d8                 | LR__0731
081d8     13 13 02 F6 | 	mov	arg01, local01
081dc     0C EF BF FD | 	call	#_insertline
081e0                 | LR__0732
081e0                 | LR__0733
081e0                 | LR__0734
081e0                 | LR__0735
081e0                 | ' return err
081e0     15 FB 01 F6 | 	mov	result1, local03
081e4     A7 F0 03 F6 | 	mov	ptra, fp
081e8     B2 00 A0 FD | 	call	#popregs_
081ec                 | _compile_ret
081ec     2D 00 64 FD | 	ret
081f0                 | 
081f0                 | ' 
081f0                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
081f0                 | ' 
081f0                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
081f0                 | _compile_assign
081f0     03 4A 05 F6 | 	mov	COUNT_, #3
081f4     A8 00 A0 FD | 	call	#pushregs_
081f8     09 27 02 F6 | 	mov	local01, arg01
081fc     0B 29 02 F6 | 	mov	local02, arg03
08200     47 00 00 FF 
08204     7C E4 05 F1 | 	add	objptr, ##36476
08208     F2 26 62 FC | 	wrlong	local01, objptr
0820c     04 E4 05 F1 | 	add	objptr, #4
08210     F2 14 62 FC | 	wrlong	arg02, objptr
08214     47 00 00 FF 
08218     80 E4 85 F1 | 	sub	objptr, ##36480
0821c     14 13 02 F6 | 	mov	arg01, local02
08220     01 12 06 F1 | 	add	arg01, #1
08224     54 FB BF FD | 	call	#_compile_immediate_assign
08228     FD 2A 02 F6 | 	mov	local03, result1
0822c                 | ' 
0822c                 | ' ucompiledline(0)=alinemajor
0822c                 | ' ucompiledline(1)=alineminor
0822c                 | ' 
0822c                 | ' err=compile_immediate_assign(cont+1) 
0822c                 | ' if alinemajor>0 then
0822c     01 26 16 F2 | 	cmp	local01, #1 wc
08230     6C 00 90 CD |  if_b	jmp	#LR__0745
08234                 | '   if cont=3 orelse cont=2 then 
08234     03 28 0E F2 | 	cmp	local02, #3 wz
08238     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
0823c     60 00 90 5D |  if_ne	jmp	#LR__0744
08240                 | '     if alinemajor >lastline then 
08240     4A 00 00 FF 
08244     8C E4 05 F1 | 	add	objptr, ##38028
08248     F2 14 02 FB | 	rdlong	arg02, objptr
0824c     4A 00 00 FF 
08250     8C E4 85 F1 | 	sub	objptr, ##38028
08254     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08258     0C 00 90 ED |  if_be	jmp	#LR__0740
0825c     13 13 02 F6 | 	mov	arg01, local01
08260     A4 F0 BF FD | 	call	#_add_line_at_end
08264     38 00 90 FD | 	jmp	#LR__0743
08268                 | LR__0740
08268     13 13 02 F6 | 	mov	arg01, local01
0826c     68 EA BF FD | 	call	#_deleteline
08270                 | '       deleteline(alinemajor)  
08270                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
08270     4A 00 00 FF 
08274     8C E4 05 F1 | 	add	objptr, ##38028
08278     F2 14 02 FB | 	rdlong	arg02, objptr
0827c     4A 00 00 FF 
08280     8C E4 85 F1 | 	sub	objptr, ##38028
08284     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08288     0C 00 90 ED |  if_be	jmp	#LR__0741
0828c     13 13 02 F6 | 	mov	arg01, local01
08290     74 F0 BF FD | 	call	#_add_line_at_end
08294     08 00 90 FD | 	jmp	#LR__0742
08298                 | LR__0741
08298     13 13 02 F6 | 	mov	arg01, local01
0829c     4C EE BF FD | 	call	#_insertline
082a0                 | LR__0742
082a0                 | LR__0743
082a0                 | LR__0744
082a0                 | LR__0745
082a0                 | ' return err
082a0     15 FB 01 F6 | 	mov	result1, local03
082a4     A7 F0 03 F6 | 	mov	ptra, fp
082a8     B2 00 A0 FD | 	call	#popregs_
082ac                 | _compile_assign_ret
082ac     2D 00 64 FD | 	ret
082b0                 | 
082b0                 | ' 
082b0                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
082b0                 | ' 
082b0                 | ' function compile_fun_2p() as ulong
082b0                 | _compile_fun_2p
082b0     01 4A 05 F6 | 	mov	COUNT_, #1
082b4     A8 00 A0 FD | 	call	#pushregs_
082b8     A8 31 B0 FD | 	call	#_expr
082bc     FD 26 02 F6 | 	mov	local01, result1
082c0                 | ' err=expr() : if err>0 then return err
082c0     01 26 16 F2 | 	cmp	local01, #1 wc
082c4     13 FB 01 36 |  if_ae	mov	result1, local01
082c8     60 00 90 3D |  if_ae	jmp	#LR__0750
082cc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
082cc     37 00 00 FF 
082d0     44 E4 05 F1 | 	add	objptr, ##28228
082d4     F2 26 02 FB | 	rdlong	local01, objptr
082d8     03 26 66 F0 | 	shl	local01, #3
082dc     02 00 00 FF 
082e0     38 E4 85 F1 | 	sub	objptr, ##1080
082e4     F2 26 02 F1 | 	add	local01, objptr
082e8     04 26 06 F1 | 	add	local01, #4
082ec     13 27 02 FB | 	rdlong	local01, local01
082f0     11 26 0E F2 | 	cmp	local01, #17 wz
082f4     35 00 00 FF 
082f8     0C E4 85 F1 | 	sub	objptr, ##27148
082fc     15 FA 05 56 |  if_ne	mov	result1, #21
08300     28 00 90 5D |  if_ne	jmp	#LR__0750
08304     37 00 00 FF 
08308     44 E4 05 F1 | 	add	objptr, ##28228
0830c     F2 26 02 FB | 	rdlong	local01, objptr
08310     01 26 06 F1 | 	add	local01, #1
08314     F2 26 62 FC | 	wrlong	local01, objptr
08318     37 00 00 FF 
0831c     44 E4 85 F1 | 	sub	objptr, ##28228
08320     40 31 B0 FD | 	call	#_expr
08324                 | ' err=expr() : if err>0 then return err
08324     01 FA 15 F2 | 	cmp	result1, #1 wc
08328                 | ' return 0
08328     00 FA 05 C6 |  if_b	mov	result1, #0
0832c                 | LR__0750
0832c     A7 F0 03 F6 | 	mov	ptra, fp
08330     B2 00 A0 FD | 	call	#popregs_
08334                 | _compile_fun_2p_ret
08334     2D 00 64 FD | 	ret
08338                 | 
08338                 | ' 
08338                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08338                 | ' 
08338                 | ' function compile_fun_3p() as ulong
08338                 | _compile_fun_3p
08338     01 4A 05 F6 | 	mov	COUNT_, #1
0833c     A8 00 A0 FD | 	call	#pushregs_
08340     20 31 B0 FD | 	call	#_expr
08344     FD 26 02 F6 | 	mov	local01, result1
08348                 | ' err=expr() : if err>0 then return err
08348     01 26 16 F2 | 	cmp	local01, #1 wc
0834c     13 FB 01 36 |  if_ae	mov	result1, local01
08350     C8 00 90 3D |  if_ae	jmp	#LR__0760
08354                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08354     37 00 00 FF 
08358     44 E4 05 F1 | 	add	objptr, ##28228
0835c     F2 26 02 FB | 	rdlong	local01, objptr
08360     03 26 66 F0 | 	shl	local01, #3
08364     02 00 00 FF 
08368     38 E4 85 F1 | 	sub	objptr, ##1080
0836c     F2 26 02 F1 | 	add	local01, objptr
08370     04 26 06 F1 | 	add	local01, #4
08374     13 27 02 FB | 	rdlong	local01, local01
08378     11 26 0E F2 | 	cmp	local01, #17 wz
0837c     35 00 00 FF 
08380     0C E4 85 F1 | 	sub	objptr, ##27148
08384     15 FA 05 56 |  if_ne	mov	result1, #21
08388     90 00 90 5D |  if_ne	jmp	#LR__0760
0838c     37 00 00 FF 
08390     44 E4 05 F1 | 	add	objptr, ##28228
08394     F2 26 02 FB | 	rdlong	local01, objptr
08398     01 26 06 F1 | 	add	local01, #1
0839c     F2 26 62 FC | 	wrlong	local01, objptr
083a0     37 00 00 FF 
083a4     44 E4 85 F1 | 	sub	objptr, ##28228
083a8     B8 30 B0 FD | 	call	#_expr
083ac     FD 26 02 F6 | 	mov	local01, result1
083b0                 | ' err=expr() : if err>0 then return err
083b0     01 26 16 F2 | 	cmp	local01, #1 wc
083b4     13 FB 01 36 |  if_ae	mov	result1, local01
083b8     60 00 90 3D |  if_ae	jmp	#LR__0760
083bc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
083bc     37 00 00 FF 
083c0     44 E4 05 F1 | 	add	objptr, ##28228
083c4     F2 26 02 FB | 	rdlong	local01, objptr
083c8     03 26 66 F0 | 	shl	local01, #3
083cc     02 00 00 FF 
083d0     38 E4 85 F1 | 	sub	objptr, ##1080
083d4     F2 26 02 F1 | 	add	local01, objptr
083d8     04 26 06 F1 | 	add	local01, #4
083dc     13 27 02 FB | 	rdlong	local01, local01
083e0     11 26 0E F2 | 	cmp	local01, #17 wz
083e4     35 00 00 FF 
083e8     0C E4 85 F1 | 	sub	objptr, ##27148
083ec     15 FA 05 56 |  if_ne	mov	result1, #21
083f0     28 00 90 5D |  if_ne	jmp	#LR__0760
083f4     37 00 00 FF 
083f8     44 E4 05 F1 | 	add	objptr, ##28228
083fc     F2 26 02 FB | 	rdlong	local01, objptr
08400     01 26 06 F1 | 	add	local01, #1
08404     F2 26 62 FC | 	wrlong	local01, objptr
08408     37 00 00 FF 
0840c     44 E4 85 F1 | 	sub	objptr, ##28228
08410     50 30 B0 FD | 	call	#_expr
08414                 | ' err=expr() : if err>0 then return err
08414     01 FA 15 F2 | 	cmp	result1, #1 wc
08418                 | ' return 0
08418     00 FA 05 C6 |  if_b	mov	result1, #0
0841c                 | LR__0760
0841c     A7 F0 03 F6 | 	mov	ptra, fp
08420     B2 00 A0 FD | 	call	#popregs_
08424                 | _compile_fun_3p_ret
08424     2D 00 64 FD | 	ret
08428                 | 
08428                 | ' 
08428                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08428                 | ' 
08428                 | ' function compile_fun_4p() as ulong
08428                 | _compile_fun_4p
08428     01 4A 05 F6 | 	mov	COUNT_, #1
0842c     A8 00 A0 FD | 	call	#pushregs_
08430     30 30 B0 FD | 	call	#_expr
08434     FD 26 02 F6 | 	mov	local01, result1
08438                 | ' err=expr() : if err>0 then return err
08438     01 26 16 F2 | 	cmp	local01, #1 wc
0843c     13 FB 01 36 |  if_ae	mov	result1, local01
08440     30 01 90 3D |  if_ae	jmp	#LR__0770
08444                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08444     37 00 00 FF 
08448     44 E4 05 F1 | 	add	objptr, ##28228
0844c     F2 26 02 FB | 	rdlong	local01, objptr
08450     03 26 66 F0 | 	shl	local01, #3
08454     02 00 00 FF 
08458     38 E4 85 F1 | 	sub	objptr, ##1080
0845c     F2 26 02 F1 | 	add	local01, objptr
08460     04 26 06 F1 | 	add	local01, #4
08464     13 27 02 FB | 	rdlong	local01, local01
08468     11 26 0E F2 | 	cmp	local01, #17 wz
0846c     35 00 00 FF 
08470     0C E4 85 F1 | 	sub	objptr, ##27148
08474     15 FA 05 56 |  if_ne	mov	result1, #21
08478     F8 00 90 5D |  if_ne	jmp	#LR__0770
0847c     37 00 00 FF 
08480     44 E4 05 F1 | 	add	objptr, ##28228
08484     F2 26 02 FB | 	rdlong	local01, objptr
08488     01 26 06 F1 | 	add	local01, #1
0848c     F2 26 62 FC | 	wrlong	local01, objptr
08490     37 00 00 FF 
08494     44 E4 85 F1 | 	sub	objptr, ##28228
08498     C8 2F B0 FD | 	call	#_expr
0849c     FD 26 02 F6 | 	mov	local01, result1
084a0                 | ' err=expr() : if err>0 then return err
084a0     01 26 16 F2 | 	cmp	local01, #1 wc
084a4     13 FB 01 36 |  if_ae	mov	result1, local01
084a8     C8 00 90 3D |  if_ae	jmp	#LR__0770
084ac                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
084ac     37 00 00 FF 
084b0     44 E4 05 F1 | 	add	objptr, ##28228
084b4     F2 26 02 FB | 	rdlong	local01, objptr
084b8     03 26 66 F0 | 	shl	local01, #3
084bc     02 00 00 FF 
084c0     38 E4 85 F1 | 	sub	objptr, ##1080
084c4     F2 26 02 F1 | 	add	local01, objptr
084c8     04 26 06 F1 | 	add	local01, #4
084cc     13 27 02 FB | 	rdlong	local01, local01
084d0     11 26 0E F2 | 	cmp	local01, #17 wz
084d4     35 00 00 FF 
084d8     0C E4 85 F1 | 	sub	objptr, ##27148
084dc     15 FA 05 56 |  if_ne	mov	result1, #21
084e0     90 00 90 5D |  if_ne	jmp	#LR__0770
084e4     37 00 00 FF 
084e8     44 E4 05 F1 | 	add	objptr, ##28228
084ec     F2 26 02 FB | 	rdlong	local01, objptr
084f0     01 26 06 F1 | 	add	local01, #1
084f4     F2 26 62 FC | 	wrlong	local01, objptr
084f8     37 00 00 FF 
084fc     44 E4 85 F1 | 	sub	objptr, ##28228
08500     60 2F B0 FD | 	call	#_expr
08504     FD 26 02 F6 | 	mov	local01, result1
08508                 | ' err=expr() : if err>0 then return err
08508     01 26 16 F2 | 	cmp	local01, #1 wc
0850c     13 FB 01 36 |  if_ae	mov	result1, local01
08510     60 00 90 3D |  if_ae	jmp	#LR__0770
08514                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08514     37 00 00 FF 
08518     44 E4 05 F1 | 	add	objptr, ##28228
0851c     F2 26 02 FB | 	rdlong	local01, objptr
08520     03 26 66 F0 | 	shl	local01, #3
08524     02 00 00 FF 
08528     38 E4 85 F1 | 	sub	objptr, ##1080
0852c     F2 26 02 F1 | 	add	local01, objptr
08530     04 26 06 F1 | 	add	local01, #4
08534     13 27 02 FB | 	rdlong	local01, local01
08538     11 26 0E F2 | 	cmp	local01, #17 wz
0853c     35 00 00 FF 
08540     0C E4 85 F1 | 	sub	objptr, ##27148
08544     15 FA 05 56 |  if_ne	mov	result1, #21
08548     28 00 90 5D |  if_ne	jmp	#LR__0770
0854c     37 00 00 FF 
08550     44 E4 05 F1 | 	add	objptr, ##28228
08554     F2 26 02 FB | 	rdlong	local01, objptr
08558     01 26 06 F1 | 	add	local01, #1
0855c     F2 26 62 FC | 	wrlong	local01, objptr
08560     37 00 00 FF 
08564     44 E4 85 F1 | 	sub	objptr, ##28228
08568     F8 2E B0 FD | 	call	#_expr
0856c                 | ' err=expr() : if err>0 then return err
0856c     01 FA 15 F2 | 	cmp	result1, #1 wc
08570                 | ' return 0
08570     00 FA 05 C6 |  if_b	mov	result1, #0
08574                 | LR__0770
08574     A7 F0 03 F6 | 	mov	ptra, fp
08578     B2 00 A0 FD | 	call	#popregs_
0857c                 | _compile_fun_4p_ret
0857c     2D 00 64 FD | 	ret
08580                 | 
08580                 | ' 
08580                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08580                 | ' 
08580                 | ' function compile_fun_varp() as ulong,ulong 
08580                 | _compile_fun_varp
08580     03 4A 05 F6 | 	mov	COUNT_, #3
08584     A8 00 A0 FD | 	call	#pushregs_
08588     00 26 06 F6 | 	mov	local01, #0
0858c                 | ' 
0858c                 | ' i=0 : err=0
0858c                 | ' if lparts(ct).token<>token_end then
0858c     37 00 00 FF 
08590     44 E4 05 F1 | 	add	objptr, ##28228
08594     F2 28 02 FB | 	rdlong	local02, objptr
08598     03 28 66 F0 | 	shl	local02, #3
0859c     02 00 00 FF 
085a0     38 E4 85 F1 | 	sub	objptr, ##1080
085a4     F2 28 02 F1 | 	add	local02, objptr
085a8     04 28 06 F1 | 	add	local02, #4
085ac     14 29 02 FB | 	rdlong	local02, local02
085b0     FE 29 0E F2 | 	cmp	local02, #510 wz
085b4     35 00 00 FF 
085b8     0C E4 85 F1 | 	sub	objptr, ##27148
085bc     88 00 90 AD |  if_e	jmp	#LR__0781
085c0                 | '   do
085c0                 | LR__0780
085c0     A0 2E B0 FD | 	call	#_expr
085c4     01 26 06 F1 | 	add	local01, #1
085c8                 | '     expr()
085c8                 | '     i+=1
085c8                 | '     if lparts(ct).token=token_comma then ct+=1
085c8     37 00 00 FF 
085cc     44 E4 05 F1 | 	add	objptr, ##28228
085d0     F2 28 02 FB | 	rdlong	local02, objptr
085d4     03 28 66 F0 | 	shl	local02, #3
085d8     02 00 00 FF 
085dc     38 E4 85 F1 | 	sub	objptr, ##1080
085e0     F2 28 02 F1 | 	add	local02, objptr
085e4     04 28 06 F1 | 	add	local02, #4
085e8     14 29 02 FB | 	rdlong	local02, local02
085ec     11 28 0E F2 | 	cmp	local02, #17 wz
085f0     35 00 00 FF 
085f4     0C E4 85 F1 | 	sub	objptr, ##27148
085f8     37 00 00 AF 
085fc     44 E4 05 A1 |  if_e	add	objptr, ##28228
08600     F2 2A 02 AB |  if_e	rdlong	local03, objptr
08604     01 2A 06 A1 |  if_e	add	local03, #1
08608     F2 2A 62 AC |  if_e	wrlong	local03, objptr
0860c     37 00 00 AF 
08610     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08614                 | '     if lparts(ct).token=token_end then exit loop
08614     37 00 00 FF 
08618     44 E4 05 F1 | 	add	objptr, ##28228
0861c     F2 28 02 FB | 	rdlong	local02, objptr
08620     03 28 66 F0 | 	shl	local02, #3
08624     02 00 00 FF 
08628     38 E4 85 F1 | 	sub	objptr, ##1080
0862c     F2 28 02 F1 | 	add	local02, objptr
08630     04 28 06 F1 | 	add	local02, #4
08634     14 29 02 FB | 	rdlong	local02, local02
08638     FE 29 0E F2 | 	cmp	local02, #510 wz
0863c     35 00 00 FF 
08640     0C E4 85 F1 | 	sub	objptr, ##27148
08644     78 FF 9F 5D |  if_ne	jmp	#LR__0780
08648                 | LR__0781
08648                 | ' return i,err
08648     13 FB 01 F6 | 	mov	result1, local01
0864c     00 FC 05 F6 | 	mov	result2, #0
08650     A7 F0 03 F6 | 	mov	ptra, fp
08654     B2 00 A0 FD | 	call	#popregs_
08658                 | _compile_fun_varp_ret
08658     2D 00 64 FD | 	ret
0865c                 | 
0865c                 | ' 
0865c                 | ' '----  Compile read. The same as compile_input() except printing a prompt
0865c                 | ' 
0865c                 | ' function compile_read() as ulong,ulong 
0865c                 | _compile_read
0865c     04 4A 05 F6 | 	mov	COUNT_, #4
08660     A8 00 A0 FD | 	call	#pushregs_
08664     00 26 06 F6 | 	mov	local01, #0
08668                 | ' 
08668                 | ' i=0 : err=0
08668                 | ' if lparts(ct).token<>token_end then
08668     37 00 00 FF 
0866c     44 E4 05 F1 | 	add	objptr, ##28228
08670     F2 28 02 FB | 	rdlong	local02, objptr
08674     03 28 66 F0 | 	shl	local02, #3
08678     02 00 00 FF 
0867c     38 E4 85 F1 | 	sub	objptr, ##1080
08680     F2 28 02 F1 | 	add	local02, objptr
08684     04 28 06 F1 | 	add	local02, #4
08688     14 29 02 FB | 	rdlong	local02, local02
0868c     FE 29 0E F2 | 	cmp	local02, #510 wz
08690     35 00 00 FF 
08694     0C E4 85 F1 | 	sub	objptr, ##27148
08698     98 00 90 AD |  if_e	jmp	#LR__0791
0869c                 | '   do
0869c                 | LR__0790
0869c     30 2A B0 FD | 	call	#_getaddr
086a0     FD 2A 02 F6 | 	mov	local03, result1
086a4     37 00 00 FF 
086a8     44 E4 05 F1 | 	add	objptr, ##28228
086ac     F2 28 02 FB | 	rdlong	local02, objptr
086b0     01 28 06 F1 | 	add	local02, #1
086b4     F2 28 62 FC | 	wrlong	local02, objptr
086b8     01 26 06 F1 | 	add	local01, #1
086bc                 | '     err=getaddr() :ct+=1
086bc                 | '     i+=1 
086bc                 | '     if lparts(ct).token=token_comma then ct+=1 
086bc     03 28 66 F0 | 	shl	local02, #3
086c0     02 00 00 FF 
086c4     38 E4 85 F1 | 	sub	objptr, ##1080
086c8     F2 28 02 F1 | 	add	local02, objptr
086cc     04 28 06 F1 | 	add	local02, #4
086d0     14 29 02 FB | 	rdlong	local02, local02
086d4     11 28 0E F2 | 	cmp	local02, #17 wz
086d8     35 00 00 FF 
086dc     0C E4 85 F1 | 	sub	objptr, ##27148
086e0     37 00 00 AF 
086e4     44 E4 05 A1 |  if_e	add	objptr, ##28228
086e8     F2 2C 02 AB |  if_e	rdlong	local04, objptr
086ec     01 2C 06 A1 |  if_e	add	local04, #1
086f0     F2 2C 62 AC |  if_e	wrlong	local04, objptr
086f4     37 00 00 AF 
086f8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
086fc                 | '     if lparts(ct).token=token_end then exit loop
086fc     37 00 00 FF 
08700     44 E4 05 F1 | 	add	objptr, ##28228
08704     F2 28 02 FB | 	rdlong	local02, objptr
08708     03 28 66 F0 | 	shl	local02, #3
0870c     02 00 00 FF 
08710     38 E4 85 F1 | 	sub	objptr, ##1080
08714     F2 28 02 F1 | 	add	local02, objptr
08718     04 28 06 F1 | 	add	local02, #4
0871c     14 29 02 FB | 	rdlong	local02, local02
08720     FE 29 0E F2 | 	cmp	local02, #510 wz
08724     35 00 00 FF 
08728     0C E4 85 F1 | 	sub	objptr, ##27148
0872c     08 00 90 AD |  if_e	jmp	#LR__0792
08730     68 FF 9F FD | 	jmp	#LR__0790
08734                 | LR__0791
08734     36 2A 06 F6 | 	mov	local03, #54
08738                 | LR__0792
08738                 | ' return i,err
08738     13 FB 01 F6 | 	mov	result1, local01
0873c     15 FD 01 F6 | 	mov	result2, local03
08740     A7 F0 03 F6 | 	mov	ptra, fp
08744     B2 00 A0 FD | 	call	#popregs_
08748                 | _compile_read_ret
08748     2D 00 64 FD | 	ret
0874c                 | 
0874c                 | ' 
0874c                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
0874c                 | ' 
0874c                 | ' function compile_input() as ulong,ulong 
0874c                 | _compile_input
0874c     0F 4A 05 F6 | 	mov	COUNT_, #15
08750     A8 00 A0 FD | 	call	#pushregs_
08754                 | ' 
08754                 | ' if lparts(ct).token=token_string then
08754     37 00 00 FF 
08758     44 E4 05 F1 | 	add	objptr, ##28228
0875c     F2 16 02 FB | 	rdlong	arg03, objptr
08760     03 16 66 F0 | 	shl	arg03, #3
08764     02 00 00 FF 
08768     38 E4 85 F1 | 	sub	objptr, ##1080
0876c     F2 16 02 F1 | 	add	arg03, objptr
08770     04 16 06 F1 | 	add	arg03, #4
08774     0B FD 01 FB | 	rdlong	result2, arg03
08778     01 00 00 FF 
0877c     03 FC 0D F2 | 	cmp	result2, ##515 wz
08780     35 00 00 FF 
08784     0C E4 85 F1 | 	sub	objptr, ##27148
08788     38 06 90 5D |  if_ne	jmp	#LR__0807
0878c     37 00 00 FF 
08790     44 E4 05 F1 | 	add	objptr, ##28228
08794     F2 14 02 FB | 	rdlong	arg02, objptr
08798     03 14 66 F0 | 	shl	arg02, #3
0879c     02 00 00 FF 
087a0     38 E4 85 F1 | 	sub	objptr, ##1080
087a4     F2 14 02 F1 | 	add	arg02, objptr
087a8     0A 13 02 FB | 	rdlong	arg01, arg02
087ac     35 00 00 FF 
087b0     0C E4 85 F1 | 	sub	objptr, ##27148
087b4     09 2D 02 F6 | 	mov	local04, arg01
087b8     97 06 48 FB | 	callpa	#(@LR__0801-@LR__0800)>>2,fcache_load_ptr_
087bc                 | LR__0800
087bc     16 FB C9 FA | 	rdbyte	result1, local04 wz
087c0     01 2C 06 51 |  if_ne	add	local04, #1
087c4     F4 FF 9F 5D |  if_ne	jmp	#LR__0800
087c8                 | LR__0801
087c8     09 2D 82 F1 | 	sub	local04, arg01
087cc     16 FB 01 F6 | 	mov	result1, local04
087d0     52 00 00 FF 
087d4     9C E4 05 F1 | 	add	objptr, ##42140
087d8     F2 FA 61 FC | 	wrlong	result1, objptr
087dc     58 E4 85 F1 | 	sub	objptr, #88
087e0     F2 12 02 FB | 	rdlong	arg01, objptr
087e4     FD 12 82 F1 | 	sub	arg01, result1
087e8     04 12 86 F1 | 	sub	arg01, #4
087ec     03 12 26 F5 | 	andn	arg01, #3
087f0     F2 12 62 FC | 	wrlong	arg01, objptr
087f4     58 E4 05 F1 | 	add	objptr, #88
087f8     F2 14 02 FB | 	rdlong	arg02, objptr
087fc     52 00 00 FF 
08800     9C E4 85 F1 | 	sub	objptr, ##42140
08804     34 99 B1 FD | 	call	#_pslpoke
08808                 | '   pslpoke memtop,l
08808                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08808     01 2E 06 F6 | 	mov	local05, #1
0880c     52 00 00 FF 
08810     9C E4 05 F1 | 	add	objptr, ##42140
08814     F2 30 02 FB | 	rdlong	local06, objptr
08818     52 00 00 FF 
0881c     9C E4 85 F1 | 	sub	objptr, ##42140
08820     01 30 06 F1 | 	add	local06, #1
08824                 | LR__0802
08824     18 2F 52 F2 | 	cmps	local05, local06 wc
08828     5C 00 90 3D |  if_ae	jmp	#LR__0803
0882c     52 00 00 FF 
08830     44 E4 05 F1 | 	add	objptr, ##42052
08834     F2 32 02 FB | 	rdlong	local07, objptr
08838     03 32 06 F1 | 	add	local07, #3
0883c     17 33 02 F1 | 	add	local07, local05
08840     1B 00 00 FF 
08844     00 E4 85 F1 | 	sub	objptr, ##13824
08848     F2 14 02 FB | 	rdlong	arg02, objptr
0884c     03 14 66 F0 | 	shl	arg02, #3
08850     02 00 00 FF 
08854     38 E4 85 F1 | 	sub	objptr, ##1080
08858     F2 14 02 F1 | 	add	arg02, objptr
0885c     0A 13 02 FB | 	rdlong	arg01, arg02
08860     17 15 02 F6 | 	mov	arg02, local05
08864     01 16 06 F6 | 	mov	arg03, #1
08868     35 00 00 FF 
0886c     0C E4 85 F1 | 	sub	objptr, ##27148
08870     A8 F2 B1 FD | 	call	#__system__Mid_S
08874     FD 14 C2 FA | 	rdbyte	arg02, result1
08878     19 13 02 F6 | 	mov	arg01, local07
0887c     4C 99 B1 FD | 	call	#_pspoke
08880     01 2E 06 F1 | 	add	local05, #1
08884     9C FF 9F FD | 	jmp	#LR__0802
08888                 | LR__0803
08888     52 00 00 FF 
0888c     44 E4 05 F1 | 	add	objptr, ##42052
08890     F2 26 02 FB | 	rdlong	local01, objptr
08894     2B 2A 06 F6 | 	mov	local03, #43
08898     13 35 02 F6 | 	mov	local08, local01
0889c     14 33 02 F6 | 	mov	local07, local02
088a0     15 37 02 F6 | 	mov	local09, local03
088a4     07 00 00 FF 
088a8     C8 E5 85 F1 | 	sub	objptr, ##4040
088ac     F2 30 02 FB | 	rdlong	local06, objptr
088b0     18 2F 02 F6 | 	mov	local05, local06
088b4     01 2E 66 F0 | 	shl	local05, #1
088b8     18 2F 02 F1 | 	add	local05, local06
088bc     02 2E 66 F0 | 	shl	local05, #2
088c0     03 00 00 FF 
088c4     00 E4 85 F1 | 	sub	objptr, ##1536
088c8     F2 2E 02 F1 | 	add	local05, objptr
088cc     17 35 62 FC | 	wrlong	local08, local05
088d0     03 00 00 FF 
088d4     00 E4 05 F1 | 	add	objptr, ##1536
088d8     F2 34 02 FB | 	rdlong	local08, objptr
088dc     1A 31 02 F6 | 	mov	local06, local08
088e0     01 30 66 F0 | 	shl	local06, #1
088e4     1A 31 02 F1 | 	add	local06, local08
088e8     02 30 66 F0 | 	shl	local06, #2
088ec     03 00 00 FF 
088f0     00 E4 85 F1 | 	sub	objptr, ##1536
088f4     F2 30 02 F1 | 	add	local06, objptr
088f8     04 30 06 F1 | 	add	local06, #4
088fc     18 33 62 FC | 	wrlong	local07, local06
08900     03 00 00 FF 
08904     00 E4 05 F1 | 	add	objptr, ##1536
08908     F2 34 02 FB | 	rdlong	local08, objptr
0890c     1A 33 02 F6 | 	mov	local07, local08
08910     01 32 66 F0 | 	shl	local07, #1
08914     1A 33 02 F1 | 	add	local07, local08
08918     02 32 66 F0 | 	shl	local07, #2
0891c     03 00 00 FF 
08920     00 E4 85 F1 | 	sub	objptr, ##1536
08924     F2 32 02 F1 | 	add	local07, objptr
08928     08 32 06 F1 | 	add	local07, #8
0892c     19 37 62 FC | 	wrlong	local09, local07
08930     03 00 00 FF 
08934     00 E4 05 F1 | 	add	objptr, ##1536
08938     F2 34 02 FB | 	rdlong	local08, objptr
0893c     01 34 06 F1 | 	add	local08, #1
08940     F2 34 62 FC | 	wrlong	local08, objptr
08944     13 00 00 FF 
08948     38 E4 85 F1 | 	sub	objptr, ##9784
0894c     F2 34 02 FB | 	rdlong	local08, objptr
08950     01 34 06 F1 | 	add	local08, #1
08954     F2 34 62 FC | 	wrlong	local08, objptr
08958                 | '   t1.result.uresult=memtop
08958                 | '   t1.result_type=result_string2  
08958                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08958                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08958     03 34 66 F0 | 	shl	local08, #3
0895c     02 00 00 FF 
08960     38 E4 85 F1 | 	sub	objptr, ##1080
08964     F2 34 02 F1 | 	add	local08, objptr
08968     04 34 06 F1 | 	add	local08, #4
0896c     1A 35 02 FB | 	rdlong	local08, local08
08970     11 34 0E F2 | 	cmp	local08, #17 wz
08974     35 00 00 FF 
08978     0C E4 85 F1 | 	sub	objptr, ##27148
0897c     60 01 90 5D |  if_ne	jmp	#LR__0804
08980     21 2A 06 F6 | 	mov	local03, #33
08984     13 35 02 F6 | 	mov	local08, local01
08988     14 33 02 F6 | 	mov	local07, local02
0898c     15 39 02 F6 | 	mov	local10, local03
08990     4A 00 00 FF 
08994     7C E4 05 F1 | 	add	objptr, ##38012
08998     F2 3A 02 FB | 	rdlong	local11, objptr
0899c     1D 3D 02 F6 | 	mov	local12, local11
089a0     01 3C 66 F0 | 	shl	local12, #1
089a4     1D 3D 02 F1 | 	add	local12, local11
089a8     02 3C 66 F0 | 	shl	local12, #2
089ac     03 00 00 FF 
089b0     00 E4 85 F1 | 	sub	objptr, ##1536
089b4     F2 3C 02 F1 | 	add	local12, objptr
089b8     1E 35 62 FC | 	wrlong	local08, local12
089bc     03 00 00 FF 
089c0     00 E4 05 F1 | 	add	objptr, ##1536
089c4     F2 3E 02 FB | 	rdlong	local13, objptr
089c8     1F 35 02 F6 | 	mov	local08, local13
089cc     01 34 66 F0 | 	shl	local08, #1
089d0     1F 35 02 F1 | 	add	local08, local13
089d4     02 34 66 F0 | 	shl	local08, #2
089d8     03 00 00 FF 
089dc     00 E4 85 F1 | 	sub	objptr, ##1536
089e0     F2 34 02 F1 | 	add	local08, objptr
089e4     04 34 06 F1 | 	add	local08, #4
089e8     1A 33 62 FC | 	wrlong	local07, local08
089ec     03 00 00 FF 
089f0     00 E4 05 F1 | 	add	objptr, ##1536
089f4     F2 34 02 FB | 	rdlong	local08, objptr
089f8     1A 41 02 F6 | 	mov	local14, local08
089fc     01 40 66 F0 | 	shl	local14, #1
08a00     1A 41 02 F1 | 	add	local14, local08
08a04     02 40 66 F0 | 	shl	local14, #2
08a08     03 00 00 FF 
08a0c     00 E4 85 F1 | 	sub	objptr, ##1536
08a10     F2 40 02 F1 | 	add	local14, objptr
08a14     08 40 06 F1 | 	add	local14, #8
08a18     20 39 62 FC | 	wrlong	local10, local14
08a1c     03 00 00 FF 
08a20     00 E4 05 F1 | 	add	objptr, ##1536
08a24     F2 34 02 FB | 	rdlong	local08, objptr
08a28     01 34 06 F1 | 	add	local08, #1
08a2c     F2 34 62 FC | 	wrlong	local08, objptr
08a30     44 2A 06 F6 | 	mov	local03, #68
08a34     13 35 02 F6 | 	mov	local08, local01
08a38     14 33 02 F6 | 	mov	local07, local02
08a3c     15 39 02 F6 | 	mov	local10, local03
08a40     F2 40 02 FB | 	rdlong	local14, objptr
08a44     20 3F 02 F6 | 	mov	local13, local14
08a48     01 3E 66 F0 | 	shl	local13, #1
08a4c     20 3F 02 F1 | 	add	local13, local14
08a50     02 3E 66 F0 | 	shl	local13, #2
08a54     03 00 00 FF 
08a58     00 E4 85 F1 | 	sub	objptr, ##1536
08a5c     F2 3E 02 F1 | 	add	local13, objptr
08a60     1F 35 62 FC | 	wrlong	local08, local13
08a64     03 00 00 FF 
08a68     00 E4 05 F1 | 	add	objptr, ##1536
08a6c     F2 40 02 FB | 	rdlong	local14, objptr
08a70     20 3F 02 F6 | 	mov	local13, local14
08a74     01 3E 66 F0 | 	shl	local13, #1
08a78     20 3F 02 F1 | 	add	local13, local14
08a7c     02 3E 66 F0 | 	shl	local13, #2
08a80     03 00 00 FF 
08a84     00 E4 85 F1 | 	sub	objptr, ##1536
08a88     F2 3E 02 F1 | 	add	local13, objptr
08a8c     04 3E 06 F1 | 	add	local13, #4
08a90     1F 33 62 FC | 	wrlong	local07, local13
08a94     03 00 00 FF 
08a98     00 E4 05 F1 | 	add	objptr, ##1536
08a9c     F2 3E 02 FB | 	rdlong	local13, objptr
08aa0     1F 41 02 F6 | 	mov	local14, local13
08aa4     01 40 66 F0 | 	shl	local14, #1
08aa8     1F 41 02 F1 | 	add	local14, local13
08aac     02 40 66 F0 | 	shl	local14, #2
08ab0     03 00 00 FF 
08ab4     00 E4 85 F1 | 	sub	objptr, ##1536
08ab8     F2 40 02 F1 | 	add	local14, objptr
08abc     08 40 06 F1 | 	add	local14, #8
08ac0     20 39 62 FC | 	wrlong	local10, local14
08ac4     03 00 00 FF 
08ac8     00 E4 05 F1 | 	add	objptr, ##1536
08acc     F2 34 02 FB | 	rdlong	local08, objptr
08ad0     01 34 06 F1 | 	add	local08, #1
08ad4     F2 34 62 FC | 	wrlong	local08, objptr
08ad8     4A 00 00 FF 
08adc     7C E4 85 F1 | 	sub	objptr, ##38012
08ae0                 | LR__0804
08ae0                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08ae0     37 00 00 FF 
08ae4     44 E4 05 F1 | 	add	objptr, ##28228
08ae8     F2 34 02 FB | 	rdlong	local08, objptr
08aec     03 34 66 F0 | 	shl	local08, #3
08af0     02 00 00 FF 
08af4     38 E4 85 F1 | 	sub	objptr, ##1080
08af8     F2 34 02 F1 | 	add	local08, objptr
08afc     04 34 06 F1 | 	add	local08, #4
08b00     1A 41 02 FB | 	rdlong	local14, local08
08b04     12 40 0E F2 | 	cmp	local14, #18 wz
08b08     35 00 00 FF 
08b0c     0C E4 85 F1 | 	sub	objptr, ##27148
08b10     60 01 90 5D |  if_ne	jmp	#LR__0805
08b14     22 2A 06 F6 | 	mov	local03, #34
08b18     13 35 02 F6 | 	mov	local08, local01
08b1c     14 33 02 F6 | 	mov	local07, local02
08b20     15 39 02 F6 | 	mov	local10, local03
08b24     4A 00 00 FF 
08b28     7C E4 05 F1 | 	add	objptr, ##38012
08b2c     F2 40 02 FB | 	rdlong	local14, objptr
08b30     20 3F 02 F6 | 	mov	local13, local14
08b34     01 3E 66 F0 | 	shl	local13, #1
08b38     20 3F 02 F1 | 	add	local13, local14
08b3c     02 3E 66 F0 | 	shl	local13, #2
08b40     03 00 00 FF 
08b44     00 E4 85 F1 | 	sub	objptr, ##1536
08b48     F2 3E 02 F1 | 	add	local13, objptr
08b4c     1F 35 62 FC | 	wrlong	local08, local13
08b50     03 00 00 FF 
08b54     00 E4 05 F1 | 	add	objptr, ##1536
08b58     F2 40 02 FB | 	rdlong	local14, objptr
08b5c     20 35 02 F6 | 	mov	local08, local14
08b60     01 34 66 F0 | 	shl	local08, #1
08b64     20 35 02 F1 | 	add	local08, local14
08b68     02 34 66 F0 | 	shl	local08, #2
08b6c     03 00 00 FF 
08b70     00 E4 85 F1 | 	sub	objptr, ##1536
08b74     F2 34 02 F1 | 	add	local08, objptr
08b78     04 34 06 F1 | 	add	local08, #4
08b7c     1A 33 62 FC | 	wrlong	local07, local08
08b80     03 00 00 FF 
08b84     00 E4 05 F1 | 	add	objptr, ##1536
08b88     F2 34 02 FB | 	rdlong	local08, objptr
08b8c     1A 41 02 F6 | 	mov	local14, local08
08b90     01 40 66 F0 | 	shl	local14, #1
08b94     1A 41 02 F1 | 	add	local14, local08
08b98     02 40 66 F0 | 	shl	local14, #2
08b9c     03 00 00 FF 
08ba0     00 E4 85 F1 | 	sub	objptr, ##1536
08ba4     F2 40 02 F1 | 	add	local14, objptr
08ba8     08 40 06 F1 | 	add	local14, #8
08bac     20 39 62 FC | 	wrlong	local10, local14
08bb0     03 00 00 FF 
08bb4     00 E4 05 F1 | 	add	objptr, ##1536
08bb8     F2 34 02 FB | 	rdlong	local08, objptr
08bbc     01 34 06 F1 | 	add	local08, #1
08bc0     F2 34 62 FC | 	wrlong	local08, objptr
08bc4     44 2A 06 F6 | 	mov	local03, #68
08bc8     13 35 02 F6 | 	mov	local08, local01
08bcc     14 33 02 F6 | 	mov	local07, local02
08bd0     15 39 02 F6 | 	mov	local10, local03
08bd4     F2 40 02 FB | 	rdlong	local14, objptr
08bd8     20 3F 02 F6 | 	mov	local13, local14
08bdc     01 3E 66 F0 | 	shl	local13, #1
08be0     20 3F 02 F1 | 	add	local13, local14
08be4     02 3E 66 F0 | 	shl	local13, #2
08be8     03 00 00 FF 
08bec     00 E4 85 F1 | 	sub	objptr, ##1536
08bf0     F2 3E 02 F1 | 	add	local13, objptr
08bf4     1F 35 62 FC | 	wrlong	local08, local13
08bf8     03 00 00 FF 
08bfc     00 E4 05 F1 | 	add	objptr, ##1536
08c00     F2 40 02 FB | 	rdlong	local14, objptr
08c04     20 3F 02 F6 | 	mov	local13, local14
08c08     01 3E 66 F0 | 	shl	local13, #1
08c0c     20 3F 02 F1 | 	add	local13, local14
08c10     02 3E 66 F0 | 	shl	local13, #2
08c14     03 00 00 FF 
08c18     00 E4 85 F1 | 	sub	objptr, ##1536
08c1c     F2 3E 02 F1 | 	add	local13, objptr
08c20     04 3E 06 F1 | 	add	local13, #4
08c24     1F 33 62 FC | 	wrlong	local07, local13
08c28     03 00 00 FF 
08c2c     00 E4 05 F1 | 	add	objptr, ##1536
08c30     F2 3E 02 FB | 	rdlong	local13, objptr
08c34     1F 41 02 F6 | 	mov	local14, local13
08c38     01 40 66 F0 | 	shl	local14, #1
08c3c     1F 41 02 F1 | 	add	local14, local13
08c40     02 40 66 F0 | 	shl	local14, #2
08c44     03 00 00 FF 
08c48     00 E4 85 F1 | 	sub	objptr, ##1536
08c4c     F2 40 02 F1 | 	add	local14, objptr
08c50     08 40 06 F1 | 	add	local14, #8
08c54     20 39 62 FC | 	wrlong	local10, local14
08c58     03 00 00 FF 
08c5c     00 E4 05 F1 | 	add	objptr, ##1536
08c60     F2 34 02 FB | 	rdlong	local08, objptr
08c64     01 34 06 F1 | 	add	local08, #1
08c68     F2 34 62 FC | 	wrlong	local08, objptr
08c6c     4A 00 00 FF 
08c70     7C E4 85 F1 | 	sub	objptr, ##38012
08c74                 | LR__0805
08c74                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
08c74     37 00 00 FF 
08c78     44 E4 05 F1 | 	add	objptr, ##28228
08c7c     F2 34 02 FB | 	rdlong	local08, objptr
08c80     03 34 66 F0 | 	shl	local08, #3
08c84     02 00 00 FF 
08c88     38 E4 85 F1 | 	sub	objptr, ##1080
08c8c     F2 34 02 F1 | 	add	local08, objptr
08c90     04 34 06 F1 | 	add	local08, #4
08c94     1A 41 02 FB | 	rdlong	local14, local08
08c98     12 40 0E F2 | 	cmp	local14, #18 wz
08c9c     35 00 00 FF 
08ca0     0C E4 85 F1 | 	sub	objptr, ##27148
08ca4     00 01 90 AD |  if_e	jmp	#LR__0806
08ca8     37 00 00 FF 
08cac     44 E4 05 F1 | 	add	objptr, ##28228
08cb0     F2 34 02 FB | 	rdlong	local08, objptr
08cb4     03 34 66 F0 | 	shl	local08, #3
08cb8     02 00 00 FF 
08cbc     38 E4 85 F1 | 	sub	objptr, ##1080
08cc0     F2 34 02 F1 | 	add	local08, objptr
08cc4     04 34 06 F1 | 	add	local08, #4
08cc8     1A 41 02 FB | 	rdlong	local14, local08
08ccc     11 40 0E F2 | 	cmp	local14, #17 wz
08cd0     35 00 00 FF 
08cd4     0C E4 85 F1 | 	sub	objptr, ##27148
08cd8     CC 00 90 AD |  if_e	jmp	#LR__0806
08cdc     44 2A 06 F6 | 	mov	local03, #68
08ce0     13 35 02 F6 | 	mov	local08, local01
08ce4     14 33 02 F6 | 	mov	local07, local02
08ce8     15 39 02 F6 | 	mov	local10, local03
08cec     4A 00 00 FF 
08cf0     7C E4 05 F1 | 	add	objptr, ##38012
08cf4     F2 40 02 FB | 	rdlong	local14, objptr
08cf8     20 3F 02 F6 | 	mov	local13, local14
08cfc     01 3E 66 F0 | 	shl	local13, #1
08d00     20 3F 02 F1 | 	add	local13, local14
08d04     02 3E 66 F0 | 	shl	local13, #2
08d08     03 00 00 FF 
08d0c     00 E4 85 F1 | 	sub	objptr, ##1536
08d10     F2 3E 02 F1 | 	add	local13, objptr
08d14     1F 35 62 FC | 	wrlong	local08, local13
08d18     03 00 00 FF 
08d1c     00 E4 05 F1 | 	add	objptr, ##1536
08d20     F2 40 02 FB | 	rdlong	local14, objptr
08d24     20 3F 02 F6 | 	mov	local13, local14
08d28     01 3E 66 F0 | 	shl	local13, #1
08d2c     20 3F 02 F1 | 	add	local13, local14
08d30     02 3E 66 F0 | 	shl	local13, #2
08d34     03 00 00 FF 
08d38     00 E4 85 F1 | 	sub	objptr, ##1536
08d3c     F2 3E 02 F1 | 	add	local13, objptr
08d40     04 3E 06 F1 | 	add	local13, #4
08d44     1F 33 62 FC | 	wrlong	local07, local13
08d48     03 00 00 FF 
08d4c     00 E4 05 F1 | 	add	objptr, ##1536
08d50     F2 3E 02 FB | 	rdlong	local13, objptr
08d54     1F 41 02 F6 | 	mov	local14, local13
08d58     01 40 66 F0 | 	shl	local14, #1
08d5c     1F 41 02 F1 | 	add	local14, local13
08d60     02 40 66 F0 | 	shl	local14, #2
08d64     03 00 00 FF 
08d68     00 E4 85 F1 | 	sub	objptr, ##1536
08d6c     F2 40 02 F1 | 	add	local14, objptr
08d70     08 40 06 F1 | 	add	local14, #8
08d74     20 39 62 FC | 	wrlong	local10, local14
08d78     03 00 00 FF 
08d7c     00 E4 05 F1 | 	add	objptr, ##1536
08d80     F2 34 02 FB | 	rdlong	local08, objptr
08d84     01 34 06 F1 | 	add	local08, #1
08d88     F2 34 62 FC | 	wrlong	local08, objptr
08d8c     13 00 00 FF 
08d90     38 E4 85 F1 | 	sub	objptr, ##9784
08d94     F2 34 02 FB | 	rdlong	local08, objptr
08d98     01 34 86 F1 | 	sub	local08, #1
08d9c     F2 34 62 FC | 	wrlong	local08, objptr
08da0     37 00 00 FF 
08da4     44 E4 85 F1 | 	sub	objptr, ##28228
08da8                 | LR__0806
08da8     37 00 00 FF 
08dac     44 E4 05 F1 | 	add	objptr, ##28228
08db0     F2 34 02 FB | 	rdlong	local08, objptr
08db4     01 34 06 F1 | 	add	local08, #1
08db8     F2 34 62 FC | 	wrlong	local08, objptr
08dbc     37 00 00 FF 
08dc0     44 E4 85 F1 | 	sub	objptr, ##28228
08dc4                 | LR__0807
08dc4     00 2E 06 F6 | 	mov	local05, #0
08dc8                 | ' i=0 : err=0
08dc8                 | ' if lparts(ct).token<>token_end then
08dc8     37 00 00 FF 
08dcc     44 E4 05 F1 | 	add	objptr, ##28228
08dd0     F2 40 02 FB | 	rdlong	local14, objptr
08dd4     03 40 66 F0 | 	shl	local14, #3
08dd8     02 00 00 FF 
08ddc     38 E4 85 F1 | 	sub	objptr, ##1080
08de0     F2 40 02 F1 | 	add	local14, objptr
08de4     04 40 06 F1 | 	add	local14, #4
08de8     20 41 02 FB | 	rdlong	local14, local14
08dec     FE 41 0E F2 | 	cmp	local14, #510 wz
08df0     35 00 00 FF 
08df4     0C E4 85 F1 | 	sub	objptr, ##27148
08df8     98 00 90 AD |  if_e	jmp	#LR__0809
08dfc                 | '   do
08dfc                 | LR__0808
08dfc     D0 22 B0 FD | 	call	#_getaddr
08e00     FD 42 02 F6 | 	mov	local15, result1
08e04     37 00 00 FF 
08e08     44 E4 05 F1 | 	add	objptr, ##28228
08e0c     F2 40 02 FB | 	rdlong	local14, objptr
08e10     01 40 06 F1 | 	add	local14, #1
08e14     F2 40 62 FC | 	wrlong	local14, objptr
08e18     01 2E 06 F1 | 	add	local05, #1
08e1c                 | '     err=getaddr() :ct+=1
08e1c                 | '     i+=1 
08e1c                 | '     if lparts(ct).token=token_comma then ct+=1 
08e1c     03 40 66 F0 | 	shl	local14, #3
08e20     02 00 00 FF 
08e24     38 E4 85 F1 | 	sub	objptr, ##1080
08e28     F2 40 02 F1 | 	add	local14, objptr
08e2c     04 40 06 F1 | 	add	local14, #4
08e30     20 41 02 FB | 	rdlong	local14, local14
08e34     11 40 0E F2 | 	cmp	local14, #17 wz
08e38     35 00 00 FF 
08e3c     0C E4 85 F1 | 	sub	objptr, ##27148
08e40     37 00 00 AF 
08e44     44 E4 05 A1 |  if_e	add	objptr, ##28228
08e48     F2 34 02 AB |  if_e	rdlong	local08, objptr
08e4c     01 34 06 A1 |  if_e	add	local08, #1
08e50     F2 34 62 AC |  if_e	wrlong	local08, objptr
08e54     37 00 00 AF 
08e58     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08e5c                 | '     if lparts(ct).token=token_end then exit loop
08e5c     37 00 00 FF 
08e60     44 E4 05 F1 | 	add	objptr, ##28228
08e64     F2 40 02 FB | 	rdlong	local14, objptr
08e68     03 40 66 F0 | 	shl	local14, #3
08e6c     02 00 00 FF 
08e70     38 E4 85 F1 | 	sub	objptr, ##1080
08e74     F2 40 02 F1 | 	add	local14, objptr
08e78     04 40 06 F1 | 	add	local14, #4
08e7c     20 41 02 FB | 	rdlong	local14, local14
08e80     FE 41 0E F2 | 	cmp	local14, #510 wz
08e84     35 00 00 FF 
08e88     0C E4 85 F1 | 	sub	objptr, ##27148
08e8c     08 00 90 AD |  if_e	jmp	#LR__0810
08e90     68 FF 9F FD | 	jmp	#LR__0808
08e94                 | LR__0809
08e94     36 42 06 F6 | 	mov	local15, #54
08e98                 | LR__0810
08e98                 | ' return i,err
08e98     17 FB 01 F6 | 	mov	result1, local05
08e9c     21 FD 01 F6 | 	mov	result2, local15
08ea0     A7 F0 03 F6 | 	mov	ptra, fp
08ea4     B2 00 A0 FD | 	call	#popregs_
08ea8                 | _compile_input_ret
08ea8     2D 00 64 FD | 	ret
08eac                 | 
08eac                 | ' 
08eac                 | ' '----- compile assign to an array element
08eac                 | ' 
08eac                 | ' function compile_array_assign() as ulong 
08eac                 | _compile_array_assign
08eac     0B 4A 05 F6 | 	mov	COUNT_, #11
08eb0     A8 00 A0 FD | 	call	#pushregs_
08eb4     00 2C 06 F6 | 	mov	local04, #0
08eb8     00 2E 06 F6 | 	mov	local05, #0
08ebc     37 00 00 FF 
08ec0     44 E4 05 F1 | 	add	objptr, ##28228
08ec4     F2 30 02 FB | 	rdlong	local06, objptr
08ec8     18 FB 01 F6 | 	mov	result1, local06
08ecc     01 FA 85 F1 | 	sub	result1, #1
08ed0     03 FA 65 F0 | 	shl	result1, #3
08ed4     02 00 00 FF 
08ed8     38 E4 85 F1 | 	sub	objptr, ##1080
08edc     F2 FA 01 F1 | 	add	result1, objptr
08ee0     FD 32 02 FB | 	rdlong	local07, result1
08ee4                 | ' numpar=0 : err=0
08ee4                 | ' varname$=lparts(ct-1).part$
08ee4                 | ' if lparts(ct).token=token_lpar then
08ee4     03 30 66 F0 | 	shl	local06, #3
08ee8     F2 30 02 F1 | 	add	local06, objptr
08eec     04 30 06 F1 | 	add	local06, #4
08ef0     18 31 02 FB | 	rdlong	local06, local06
08ef4     15 30 0E F2 | 	cmp	local06, #21 wz
08ef8     35 00 00 FF 
08efc     0C E4 85 F1 | 	sub	objptr, ##27148
08f00     F4 01 90 5D |  if_ne	jmp	#LR__0824
08f04     37 00 00 FF 
08f08     44 E4 05 F1 | 	add	objptr, ##28228
08f0c     F2 34 02 FB | 	rdlong	local08, objptr
08f10     01 34 06 F1 | 	add	local08, #1
08f14     F2 34 62 FC | 	wrlong	local08, objptr
08f18     37 00 00 FF 
08f1c     44 E4 85 F1 | 	sub	objptr, ##28228
08f20                 | '   ct+=1 											' omit this lpar, this is for expr list
08f20                 | '   do
08f20                 | LR__0820
08f20     40 25 B0 FD | 	call	#_expr
08f24     37 00 00 FF 
08f28     44 E4 05 F1 | 	add	objptr, ##28228
08f2c     F2 30 02 FB | 	rdlong	local06, objptr
08f30     01 30 06 F1 | 	add	local06, #1
08f34     F2 30 62 FC | 	wrlong	local06, objptr
08f38     01 2C 06 F1 | 	add	local04, #1
08f3c     01 30 86 F1 | 	sub	local06, #1
08f40     03 30 66 F0 | 	shl	local06, #3
08f44     02 00 00 FF 
08f48     38 E4 85 F1 | 	sub	objptr, ##1080
08f4c     F2 30 02 F1 | 	add	local06, objptr
08f50     04 30 06 F1 | 	add	local06, #4
08f54     18 35 02 FB | 	rdlong	local08, local06
08f58     14 34 0E F2 | 	cmp	local08, #20 wz
08f5c     35 00 00 FF 
08f60     0C E4 85 F1 | 	sub	objptr, ##27148
08f64     34 00 90 AD |  if_e	jmp	#LR__0821
08f68     37 00 00 FF 
08f6c     44 E4 05 F1 | 	add	objptr, ##28228
08f70     F2 34 02 FB | 	rdlong	local08, objptr
08f74     03 34 66 F0 | 	shl	local08, #3
08f78     02 00 00 FF 
08f7c     38 E4 85 F1 | 	sub	objptr, ##1080
08f80     F2 34 02 F1 | 	add	local08, objptr
08f84     04 34 06 F1 | 	add	local08, #4
08f88     1A 35 02 FB | 	rdlong	local08, local08
08f8c     FE 35 0E F2 | 	cmp	local08, #510 wz
08f90     35 00 00 FF 
08f94     0C E4 85 F1 | 	sub	objptr, ##27148
08f98     84 FF 9F 5D |  if_ne	jmp	#LR__0820
08f9c                 | LR__0821
08f9c     37 00 00 FF 
08fa0     44 E4 05 F1 | 	add	objptr, ##28228
08fa4     F2 34 02 FB | 	rdlong	local08, objptr
08fa8     01 34 06 F1 | 	add	local08, #1
08fac     F2 34 62 FC | 	wrlong	local08, objptr
08fb0     37 00 00 FF 
08fb4     44 E4 85 F1 | 	sub	objptr, ##28228
08fb8     A8 24 B0 FD | 	call	#_expr
08fbc     01 36 66 F6 | 	neg	local09, #1
08fc0     00 38 06 F6 | 	mov	local10, #0
08fc4                 | '   ct+=1 : expr()
08fc4                 | '   j=-1 : i=0 
08fc4                 | '   do 
08fc4                 | LR__0822
08fc4                 | '     if variables(i).name=varname$ then j=i: exit loop
08fc4     1C 31 02 F6 | 	mov	local06, local10
08fc8     04 30 66 F0 | 	shl	local06, #4
08fcc     14 00 00 FF 
08fd0     F8 E5 05 F1 | 	add	objptr, ##10744
08fd4     F2 30 02 F1 | 	add	local06, objptr
08fd8     18 13 02 FB | 	rdlong	arg01, local06
08fdc     19 15 02 F6 | 	mov	arg02, local07
08fe0     14 00 00 FF 
08fe4     F8 E5 85 F1 | 	sub	objptr, ##10744
08fe8     C4 C9 B1 FD | 	call	#__system___string_cmp
08fec     00 FA 0D F2 | 	cmp	result1, #0 wz
08ff0     1C 37 02 A6 |  if_e	mov	local09, local10
08ff4     20 00 90 AD |  if_e	jmp	#LR__0823
08ff8     01 38 06 F1 | 	add	local10, #1
08ffc     35 00 00 FF 
09000     08 E4 05 F1 | 	add	objptr, ##27144
09004     F2 34 02 FB | 	rdlong	local08, objptr
09008     35 00 00 FF 
0900c     08 E4 85 F1 | 	sub	objptr, ##27144
09010     1A 39 5A F2 | 	cmps	local10, local08 wcz
09014     AC FF 9F ED |  if_be	jmp	#LR__0822
09018                 | LR__0823
09018     1B 27 02 F6 | 	mov	local01, local09
0901c     16 29 02 F6 | 	mov	local02, local04
09020     17 2A 06 F6 | 	mov	local03, #23
09024     13 35 02 F6 | 	mov	local08, local01
09028     14 3B 02 F6 | 	mov	local11, local02
0902c     15 33 02 F6 | 	mov	local07, local03
09030     4A 00 00 FF 
09034     7C E4 05 F1 | 	add	objptr, ##38012
09038     F2 26 02 FB | 	rdlong	local01, objptr
0903c     13 37 02 F6 | 	mov	local09, local01
09040     01 36 66 F0 | 	shl	local09, #1
09044     13 37 02 F1 | 	add	local09, local01
09048     02 36 66 F0 | 	shl	local09, #2
0904c     03 00 00 FF 
09050     00 E4 85 F1 | 	sub	objptr, ##1536
09054     F2 36 02 F1 | 	add	local09, objptr
09058     1B 35 62 FC | 	wrlong	local08, local09
0905c     03 00 00 FF 
09060     00 E4 05 F1 | 	add	objptr, ##1536
09064     F2 26 02 FB | 	rdlong	local01, objptr
09068     13 37 02 F6 | 	mov	local09, local01
0906c     01 36 66 F0 | 	shl	local09, #1
09070     13 37 02 F1 | 	add	local09, local01
09074     02 36 66 F0 | 	shl	local09, #2
09078     03 00 00 FF 
0907c     00 E4 85 F1 | 	sub	objptr, ##1536
09080     F2 36 02 F1 | 	add	local09, objptr
09084     04 36 06 F1 | 	add	local09, #4
09088     1B 3B 62 FC | 	wrlong	local11, local09
0908c     03 00 00 FF 
09090     00 E4 05 F1 | 	add	objptr, ##1536
09094     F2 3A 02 FB | 	rdlong	local11, objptr
09098     1D 27 02 F6 | 	mov	local01, local11
0909c     01 26 66 F0 | 	shl	local01, #1
090a0     1D 27 02 F1 | 	add	local01, local11
090a4     02 26 66 F0 | 	shl	local01, #2
090a8     03 00 00 FF 
090ac     00 E4 85 F1 | 	sub	objptr, ##1536
090b0     F2 26 02 F1 | 	add	local01, objptr
090b4     08 26 06 F1 | 	add	local01, #8
090b8     13 33 62 FC | 	wrlong	local07, local01
090bc     03 00 00 FF 
090c0     00 E4 05 F1 | 	add	objptr, ##1536
090c4     F2 34 02 FB | 	rdlong	local08, objptr
090c8     01 34 06 F1 | 	add	local08, #1
090cc     F2 34 62 FC | 	wrlong	local08, objptr
090d0                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
090d0                 | '   if numpar>3 then err=45
090d0     04 2C 16 F2 | 	cmp	local04, #4 wc
090d4     2D 2E 06 36 |  if_ae	mov	local05, #45
090d8                 | '   if i>varnum then err=20
090d8     15 00 00 FF 
090dc     74 E4 85 F1 | 	sub	objptr, ##10868
090e0     F2 34 02 FB | 	rdlong	local08, objptr
090e4     35 00 00 FF 
090e8     08 E4 85 F1 | 	sub	objptr, ##27144
090ec     1A 39 5A F2 | 	cmps	local10, local08 wcz
090f0     14 2E 06 16 |  if_a	mov	local05, #20
090f4     04 00 90 FD | 	jmp	#LR__0825
090f8                 | LR__0824
090f8     0E 2E 06 F6 | 	mov	local05, #14
090fc                 | LR__0825
090fc                 | ' return err
090fc     17 FB 01 F6 | 	mov	result1, local05
09100     A7 F0 03 F6 | 	mov	ptra, fp
09104     B2 00 A0 FD | 	call	#popregs_
09108                 | _compile_array_assign_ret
09108     2D 00 64 FD | 	ret
0910c                 | 
0910c                 | ' 
0910c                 | ' '----- compile print command with its ";" and "," modifiers
0910c                 | ' 
0910c                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
0910c                 | _compile_print
0910c     0B 4A 05 F6 | 	mov	COUNT_, #11
09110     A8 00 A0 FD | 	call	#pushregs_
09114     00 26 06 F6 | 	mov	local01, #0
09118     1D 2A 06 F6 | 	mov	local03, #29
0911c                 | ' t1.result.uresult=0 : t1.result_type=result_uint
0911c                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
0911c     37 00 00 FF 
09120     44 E4 05 F1 | 	add	objptr, ##28228
09124     F2 2C 02 FB | 	rdlong	local04, objptr
09128     03 2C 66 F0 | 	shl	local04, #3
0912c     02 00 00 FF 
09130     38 E4 85 F1 | 	sub	objptr, ##1080
09134     F2 2C 02 F1 | 	add	local04, objptr
09138     04 2C 06 F1 | 	add	local04, #4
0913c     16 2D 02 FB | 	rdlong	local04, local04
09140     FE 2D 0E F2 | 	cmp	local04, #510 wz
09144     35 00 00 FF 
09148     0C E4 85 F1 | 	sub	objptr, ##27148
0914c     68 01 90 5D |  if_ne	jmp	#LR__0830
09150     20 2A 06 F6 | 	mov	local03, #32
09154     13 2F 02 F6 | 	mov	local05, local01
09158     14 31 02 F6 | 	mov	local06, local02
0915c     15 33 02 F6 | 	mov	local07, local03
09160     4A 00 00 FF 
09164     7C E4 05 F1 | 	add	objptr, ##38012
09168     F2 34 02 FB | 	rdlong	local08, objptr
0916c     1A 37 02 F6 | 	mov	local09, local08
09170     01 36 66 F0 | 	shl	local09, #1
09174     1A 37 02 F1 | 	add	local09, local08
09178     02 36 66 F0 | 	shl	local09, #2
0917c     03 00 00 FF 
09180     00 E4 85 F1 | 	sub	objptr, ##1536
09184     F2 36 02 F1 | 	add	local09, objptr
09188     1B 2F 62 FC | 	wrlong	local05, local09
0918c     03 00 00 FF 
09190     00 E4 05 F1 | 	add	objptr, ##1536
09194     F2 2E 02 FB | 	rdlong	local05, objptr
09198     17 39 02 F6 | 	mov	local10, local05
0919c     01 38 66 F0 | 	shl	local10, #1
091a0     17 39 02 F1 | 	add	local10, local05
091a4     02 38 66 F0 | 	shl	local10, #2
091a8     03 00 00 FF 
091ac     00 E4 85 F1 | 	sub	objptr, ##1536
091b0     F2 38 02 F1 | 	add	local10, objptr
091b4     04 38 06 F1 | 	add	local10, #4
091b8     1C 31 62 FC | 	wrlong	local06, local10
091bc     03 00 00 FF 
091c0     00 E4 05 F1 | 	add	objptr, ##1536
091c4     F2 2E 02 FB | 	rdlong	local05, objptr
091c8     17 3B 02 F6 | 	mov	local11, local05
091cc     01 3A 66 F0 | 	shl	local11, #1
091d0     17 3B 02 F1 | 	add	local11, local05
091d4     02 3A 66 F0 | 	shl	local11, #2
091d8     03 00 00 FF 
091dc     00 E4 85 F1 | 	sub	objptr, ##1536
091e0     F2 3A 02 F1 | 	add	local11, objptr
091e4     08 3A 06 F1 | 	add	local11, #8
091e8     1D 33 62 FC | 	wrlong	local07, local11
091ec     03 00 00 FF 
091f0     00 E4 05 F1 | 	add	objptr, ##1536
091f4     F2 2E 02 FB | 	rdlong	local05, objptr
091f8     01 2E 06 F1 | 	add	local05, #1
091fc     F2 2E 62 FC | 	wrlong	local05, objptr
09200     44 2A 06 F6 | 	mov	local03, #68
09204     13 2F 02 F6 | 	mov	local05, local01
09208     14 31 02 F6 | 	mov	local06, local02
0920c     15 33 02 F6 | 	mov	local07, local03
09210     F2 34 02 FB | 	rdlong	local08, objptr
09214     1A 37 02 F6 | 	mov	local09, local08
09218     01 36 66 F0 | 	shl	local09, #1
0921c     1A 37 02 F1 | 	add	local09, local08
09220     02 36 66 F0 | 	shl	local09, #2
09224     03 00 00 FF 
09228     00 E4 85 F1 | 	sub	objptr, ##1536
0922c     F2 36 02 F1 | 	add	local09, objptr
09230     1B 2F 62 FC | 	wrlong	local05, local09
09234     03 00 00 FF 
09238     00 E4 05 F1 | 	add	objptr, ##1536
0923c     F2 3A 02 FB | 	rdlong	local11, objptr
09240     1D 39 02 F6 | 	mov	local10, local11
09244     01 38 66 F0 | 	shl	local10, #1
09248     1D 39 02 F1 | 	add	local10, local11
0924c     02 38 66 F0 | 	shl	local10, #2
09250     03 00 00 FF 
09254     00 E4 85 F1 | 	sub	objptr, ##1536
09258     F2 38 02 F1 | 	add	local10, objptr
0925c     04 38 06 F1 | 	add	local10, #4
09260     1C 31 62 FC | 	wrlong	local06, local10
09264     03 00 00 FF 
09268     00 E4 05 F1 | 	add	objptr, ##1536
0926c     F2 38 02 FB | 	rdlong	local10, objptr
09270     1C 3B 02 F6 | 	mov	local11, local10
09274     01 3A 66 F0 | 	shl	local11, #1
09278     1C 3B 02 F1 | 	add	local11, local10
0927c     02 3A 66 F0 | 	shl	local11, #2
09280     03 00 00 FF 
09284     00 E4 85 F1 | 	sub	objptr, ##1536
09288     F2 3A 02 F1 | 	add	local11, objptr
0928c     08 3A 06 F1 | 	add	local11, #8
09290     1D 33 62 FC | 	wrlong	local07, local11
09294     03 00 00 FF 
09298     00 E4 05 F1 | 	add	objptr, ##1536
0929c     F2 2E 02 FB | 	rdlong	local05, objptr
092a0     01 2E 06 F1 | 	add	local05, #1
092a4     F2 2E 62 FC | 	wrlong	local05, objptr
092a8     4A 00 00 FF 
092ac     7C E4 85 F1 | 	sub	objptr, ##38012
092b0     00 FA 05 F6 | 	mov	result1, #0
092b4     20 05 90 FD | 	jmp	#LR__0837
092b8                 | LR__0830
092b8                 | ' do
092b8                 | LR__0831
092b8     A8 21 B0 FD | 	call	#_expr
092bc                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
092bc                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
092bc     37 00 00 FF 
092c0     44 E4 05 F1 | 	add	objptr, ##28228
092c4     F2 2C 02 FB | 	rdlong	local04, objptr
092c8     03 2C 66 F0 | 	shl	local04, #3
092cc     02 00 00 FF 
092d0     38 E4 85 F1 | 	sub	objptr, ##1080
092d4     F2 2C 02 F1 | 	add	local04, objptr
092d8     04 2C 06 F1 | 	add	local04, #4
092dc     16 35 02 FB | 	rdlong	local08, local04
092e0     11 34 0E F2 | 	cmp	local08, #17 wz
092e4     35 00 00 FF 
092e8     0C E4 85 F1 | 	sub	objptr, ##27148
092ec     60 01 90 5D |  if_ne	jmp	#LR__0832
092f0     21 2A 06 F6 | 	mov	local03, #33
092f4     13 2F 02 F6 | 	mov	local05, local01
092f8     14 31 02 F6 | 	mov	local06, local02
092fc     15 33 02 F6 | 	mov	local07, local03
09300     4A 00 00 FF 
09304     7C E4 05 F1 | 	add	objptr, ##38012
09308     F2 34 02 FB | 	rdlong	local08, objptr
0930c     1A 37 02 F6 | 	mov	local09, local08
09310     01 36 66 F0 | 	shl	local09, #1
09314     1A 37 02 F1 | 	add	local09, local08
09318     02 36 66 F0 | 	shl	local09, #2
0931c     03 00 00 FF 
09320     00 E4 85 F1 | 	sub	objptr, ##1536
09324     F2 36 02 F1 | 	add	local09, objptr
09328     1B 2F 62 FC | 	wrlong	local05, local09
0932c     03 00 00 FF 
09330     00 E4 05 F1 | 	add	objptr, ##1536
09334     F2 3A 02 FB | 	rdlong	local11, objptr
09338     1D 39 02 F6 | 	mov	local10, local11
0933c     01 38 66 F0 | 	shl	local10, #1
09340     1D 39 02 F1 | 	add	local10, local11
09344     02 38 66 F0 | 	shl	local10, #2
09348     03 00 00 FF 
0934c     00 E4 85 F1 | 	sub	objptr, ##1536
09350     F2 38 02 F1 | 	add	local10, objptr
09354     04 38 06 F1 | 	add	local10, #4
09358     1C 31 62 FC | 	wrlong	local06, local10
0935c     03 00 00 FF 
09360     00 E4 05 F1 | 	add	objptr, ##1536
09364     F2 2E 02 FB | 	rdlong	local05, objptr
09368     17 3B 02 F6 | 	mov	local11, local05
0936c     01 3A 66 F0 | 	shl	local11, #1
09370     17 3B 02 F1 | 	add	local11, local05
09374     02 3A 66 F0 | 	shl	local11, #2
09378     03 00 00 FF 
0937c     00 E4 85 F1 | 	sub	objptr, ##1536
09380     F2 3A 02 F1 | 	add	local11, objptr
09384     08 3A 06 F1 | 	add	local11, #8
09388     1D 33 62 FC | 	wrlong	local07, local11
0938c     03 00 00 FF 
09390     00 E4 05 F1 | 	add	objptr, ##1536
09394     F2 2E 02 FB | 	rdlong	local05, objptr
09398     01 2E 06 F1 | 	add	local05, #1
0939c     F2 2E 62 FC | 	wrlong	local05, objptr
093a0     44 2A 06 F6 | 	mov	local03, #68
093a4     13 2F 02 F6 | 	mov	local05, local01
093a8     14 31 02 F6 | 	mov	local06, local02
093ac     15 33 02 F6 | 	mov	local07, local03
093b0     F2 34 02 FB | 	rdlong	local08, objptr
093b4     1A 37 02 F6 | 	mov	local09, local08
093b8     01 36 66 F0 | 	shl	local09, #1
093bc     1A 37 02 F1 | 	add	local09, local08
093c0     02 36 66 F0 | 	shl	local09, #2
093c4     03 00 00 FF 
093c8     00 E4 85 F1 | 	sub	objptr, ##1536
093cc     F2 36 02 F1 | 	add	local09, objptr
093d0     1B 2F 62 FC | 	wrlong	local05, local09
093d4     03 00 00 FF 
093d8     00 E4 05 F1 | 	add	objptr, ##1536
093dc     F2 3A 02 FB | 	rdlong	local11, objptr
093e0     1D 39 02 F6 | 	mov	local10, local11
093e4     01 38 66 F0 | 	shl	local10, #1
093e8     1D 39 02 F1 | 	add	local10, local11
093ec     02 38 66 F0 | 	shl	local10, #2
093f0     03 00 00 FF 
093f4     00 E4 85 F1 | 	sub	objptr, ##1536
093f8     F2 38 02 F1 | 	add	local10, objptr
093fc     04 38 06 F1 | 	add	local10, #4
09400     1C 31 62 FC | 	wrlong	local06, local10
09404     03 00 00 FF 
09408     00 E4 05 F1 | 	add	objptr, ##1536
0940c     F2 38 02 FB | 	rdlong	local10, objptr
09410     1C 3B 02 F6 | 	mov	local11, local10
09414     01 3A 66 F0 | 	shl	local11, #1
09418     1C 3B 02 F1 | 	add	local11, local10
0941c     02 3A 66 F0 | 	shl	local11, #2
09420     03 00 00 FF 
09424     00 E4 85 F1 | 	sub	objptr, ##1536
09428     F2 3A 02 F1 | 	add	local11, objptr
0942c     08 3A 06 F1 | 	add	local11, #8
09430     1D 33 62 FC | 	wrlong	local07, local11
09434     03 00 00 FF 
09438     00 E4 05 F1 | 	add	objptr, ##1536
0943c     F2 2E 02 FB | 	rdlong	local05, objptr
09440     01 2E 06 F1 | 	add	local05, #1
09444     F2 2E 62 FC | 	wrlong	local05, objptr
09448     4A 00 00 FF 
0944c     7C E4 85 F1 | 	sub	objptr, ##38012
09450                 | LR__0832
09450                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09450     37 00 00 FF 
09454     44 E4 05 F1 | 	add	objptr, ##28228
09458     F2 2C 02 FB | 	rdlong	local04, objptr
0945c     03 2C 66 F0 | 	shl	local04, #3
09460     02 00 00 FF 
09464     38 E4 85 F1 | 	sub	objptr, ##1080
09468     F2 2C 02 F1 | 	add	local04, objptr
0946c     04 2C 06 F1 | 	add	local04, #4
09470     16 35 02 FB | 	rdlong	local08, local04
09474     12 34 0E F2 | 	cmp	local08, #18 wz
09478     35 00 00 FF 
0947c     0C E4 85 F1 | 	sub	objptr, ##27148
09480     60 01 90 5D |  if_ne	jmp	#LR__0833
09484     22 2A 06 F6 | 	mov	local03, #34
09488     13 2F 02 F6 | 	mov	local05, local01
0948c     14 31 02 F6 | 	mov	local06, local02
09490     15 33 02 F6 | 	mov	local07, local03
09494     4A 00 00 FF 
09498     7C E4 05 F1 | 	add	objptr, ##38012
0949c     F2 34 02 FB | 	rdlong	local08, objptr
094a0     1A 37 02 F6 | 	mov	local09, local08
094a4     01 36 66 F0 | 	shl	local09, #1
094a8     1A 37 02 F1 | 	add	local09, local08
094ac     02 36 66 F0 | 	shl	local09, #2
094b0     03 00 00 FF 
094b4     00 E4 85 F1 | 	sub	objptr, ##1536
094b8     F2 36 02 F1 | 	add	local09, objptr
094bc     1B 2F 62 FC | 	wrlong	local05, local09
094c0     03 00 00 FF 
094c4     00 E4 05 F1 | 	add	objptr, ##1536
094c8     F2 3A 02 FB | 	rdlong	local11, objptr
094cc     1D 39 02 F6 | 	mov	local10, local11
094d0     01 38 66 F0 | 	shl	local10, #1
094d4     1D 39 02 F1 | 	add	local10, local11
094d8     02 38 66 F0 | 	shl	local10, #2
094dc     03 00 00 FF 
094e0     00 E4 85 F1 | 	sub	objptr, ##1536
094e4     F2 38 02 F1 | 	add	local10, objptr
094e8     04 38 06 F1 | 	add	local10, #4
094ec     1C 31 62 FC | 	wrlong	local06, local10
094f0     03 00 00 FF 
094f4     00 E4 05 F1 | 	add	objptr, ##1536
094f8     F2 2E 02 FB | 	rdlong	local05, objptr
094fc     17 3B 02 F6 | 	mov	local11, local05
09500     01 3A 66 F0 | 	shl	local11, #1
09504     17 3B 02 F1 | 	add	local11, local05
09508     02 3A 66 F0 | 	shl	local11, #2
0950c     03 00 00 FF 
09510     00 E4 85 F1 | 	sub	objptr, ##1536
09514     F2 3A 02 F1 | 	add	local11, objptr
09518     08 3A 06 F1 | 	add	local11, #8
0951c     1D 33 62 FC | 	wrlong	local07, local11
09520     03 00 00 FF 
09524     00 E4 05 F1 | 	add	objptr, ##1536
09528     F2 2E 02 FB | 	rdlong	local05, objptr
0952c     01 2E 06 F1 | 	add	local05, #1
09530     F2 2E 62 FC | 	wrlong	local05, objptr
09534     44 2A 06 F6 | 	mov	local03, #68
09538     13 2F 02 F6 | 	mov	local05, local01
0953c     14 31 02 F6 | 	mov	local06, local02
09540     15 33 02 F6 | 	mov	local07, local03
09544     F2 34 02 FB | 	rdlong	local08, objptr
09548     1A 37 02 F6 | 	mov	local09, local08
0954c     01 36 66 F0 | 	shl	local09, #1
09550     1A 37 02 F1 | 	add	local09, local08
09554     02 36 66 F0 | 	shl	local09, #2
09558     03 00 00 FF 
0955c     00 E4 85 F1 | 	sub	objptr, ##1536
09560     F2 36 02 F1 | 	add	local09, objptr
09564     1B 2F 62 FC | 	wrlong	local05, local09
09568     03 00 00 FF 
0956c     00 E4 05 F1 | 	add	objptr, ##1536
09570     F2 3A 02 FB | 	rdlong	local11, objptr
09574     1D 39 02 F6 | 	mov	local10, local11
09578     01 38 66 F0 | 	shl	local10, #1
0957c     1D 39 02 F1 | 	add	local10, local11
09580     02 38 66 F0 | 	shl	local10, #2
09584     03 00 00 FF 
09588     00 E4 85 F1 | 	sub	objptr, ##1536
0958c     F2 38 02 F1 | 	add	local10, objptr
09590     04 38 06 F1 | 	add	local10, #4
09594     1C 31 62 FC | 	wrlong	local06, local10
09598     03 00 00 FF 
0959c     00 E4 05 F1 | 	add	objptr, ##1536
095a0     F2 38 02 FB | 	rdlong	local10, objptr
095a4     1C 3B 02 F6 | 	mov	local11, local10
095a8     01 3A 66 F0 | 	shl	local11, #1
095ac     1C 3B 02 F1 | 	add	local11, local10
095b0     02 3A 66 F0 | 	shl	local11, #2
095b4     03 00 00 FF 
095b8     00 E4 85 F1 | 	sub	objptr, ##1536
095bc     F2 3A 02 F1 | 	add	local11, objptr
095c0     08 3A 06 F1 | 	add	local11, #8
095c4     1D 33 62 FC | 	wrlong	local07, local11
095c8     03 00 00 FF 
095cc     00 E4 05 F1 | 	add	objptr, ##1536
095d0     F2 2E 02 FB | 	rdlong	local05, objptr
095d4     01 2E 06 F1 | 	add	local05, #1
095d8     F2 2E 62 FC | 	wrlong	local05, objptr
095dc     4A 00 00 FF 
095e0     7C E4 85 F1 | 	sub	objptr, ##38012
095e4                 | LR__0833
095e4                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
095e4     37 00 00 FF 
095e8     44 E4 05 F1 | 	add	objptr, ##28228
095ec     F2 2C 02 FB | 	rdlong	local04, objptr
095f0     03 2C 66 F0 | 	shl	local04, #3
095f4     02 00 00 FF 
095f8     38 E4 85 F1 | 	sub	objptr, ##1080
095fc     F2 2C 02 F1 | 	add	local04, objptr
09600     04 2C 06 F1 | 	add	local04, #4
09604     16 35 02 FB | 	rdlong	local08, local04
09608     FE 35 0E F2 | 	cmp	local08, #510 wz
0960c     35 00 00 FF 
09610     0C E4 85 F1 | 	sub	objptr, ##27148
09614     B8 00 90 5D |  if_ne	jmp	#LR__0834
09618     44 2A 06 F6 | 	mov	local03, #68
0961c     13 2F 02 F6 | 	mov	local05, local01
09620     14 31 02 F6 | 	mov	local06, local02
09624     15 33 02 F6 | 	mov	local07, local03
09628     4A 00 00 FF 
0962c     7C E4 05 F1 | 	add	objptr, ##38012
09630     F2 34 02 FB | 	rdlong	local08, objptr
09634     1A 37 02 F6 | 	mov	local09, local08
09638     01 36 66 F0 | 	shl	local09, #1
0963c     1A 37 02 F1 | 	add	local09, local08
09640     02 36 66 F0 | 	shl	local09, #2
09644     03 00 00 FF 
09648     00 E4 85 F1 | 	sub	objptr, ##1536
0964c     F2 36 02 F1 | 	add	local09, objptr
09650     1B 2F 62 FC | 	wrlong	local05, local09
09654     03 00 00 FF 
09658     00 E4 05 F1 | 	add	objptr, ##1536
0965c     F2 3A 02 FB | 	rdlong	local11, objptr
09660     1D 39 02 F6 | 	mov	local10, local11
09664     01 38 66 F0 | 	shl	local10, #1
09668     1D 39 02 F1 | 	add	local10, local11
0966c     02 38 66 F0 | 	shl	local10, #2
09670     03 00 00 FF 
09674     00 E4 85 F1 | 	sub	objptr, ##1536
09678     F2 38 02 F1 | 	add	local10, objptr
0967c     04 38 06 F1 | 	add	local10, #4
09680     1C 31 62 FC | 	wrlong	local06, local10
09684     03 00 00 FF 
09688     00 E4 05 F1 | 	add	objptr, ##1536
0968c     F2 38 02 FB | 	rdlong	local10, objptr
09690     1C 3B 02 F6 | 	mov	local11, local10
09694     01 3A 66 F0 | 	shl	local11, #1
09698     1C 3B 02 F1 | 	add	local11, local10
0969c     02 3A 66 F0 | 	shl	local11, #2
096a0     03 00 00 FF 
096a4     00 E4 85 F1 | 	sub	objptr, ##1536
096a8     F2 3A 02 F1 | 	add	local11, objptr
096ac     08 3A 06 F1 | 	add	local11, #8
096b0     1D 33 62 FC | 	wrlong	local07, local11
096b4     03 00 00 FF 
096b8     00 E4 05 F1 | 	add	objptr, ##1536
096bc     F2 2E 02 FB | 	rdlong	local05, objptr
096c0     01 2E 06 F1 | 	add	local05, #1
096c4     F2 2E 62 FC | 	wrlong	local05, objptr
096c8     4A 00 00 FF 
096cc     7C E4 85 F1 | 	sub	objptr, ##38012
096d0                 | LR__0834
096d0                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
096d0     37 00 00 FF 
096d4     44 E4 05 F1 | 	add	objptr, ##28228
096d8     F2 2C 02 FB | 	rdlong	local04, objptr
096dc     03 2C 66 F0 | 	shl	local04, #3
096e0     02 00 00 FF 
096e4     38 E4 85 F1 | 	sub	objptr, ##1080
096e8     F2 2C 02 F1 | 	add	local04, objptr
096ec     04 2C 06 F1 | 	add	local04, #4
096f0     16 35 02 FB | 	rdlong	local08, local04
096f4     11 34 0E F2 | 	cmp	local08, #17 wz
096f8     35 00 00 FF 
096fc     0C E4 85 F1 | 	sub	objptr, ##27148
09700     6C 00 90 AD |  if_e	jmp	#LR__0835
09704     37 00 00 FF 
09708     44 E4 05 F1 | 	add	objptr, ##28228
0970c     F2 34 02 FB | 	rdlong	local08, objptr
09710     03 34 66 F0 | 	shl	local08, #3
09714     02 00 00 FF 
09718     38 E4 85 F1 | 	sub	objptr, ##1080
0971c     F2 34 02 F1 | 	add	local08, objptr
09720     04 34 06 F1 | 	add	local08, #4
09724     1A 35 02 FB | 	rdlong	local08, local08
09728     12 34 0E F2 | 	cmp	local08, #18 wz
0972c     35 00 00 FF 
09730     0C E4 85 F1 | 	sub	objptr, ##27148
09734     38 00 90 AD |  if_e	jmp	#LR__0835
09738     37 00 00 FF 
0973c     44 E4 05 F1 | 	add	objptr, ##28228
09740     F2 3A 02 FB | 	rdlong	local11, objptr
09744     03 3A 66 F0 | 	shl	local11, #3
09748     02 00 00 FF 
0974c     38 E4 85 F1 | 	sub	objptr, ##1080
09750     F2 3A 02 F1 | 	add	local11, objptr
09754     04 3A 06 F1 | 	add	local11, #4
09758     1D 3B 02 FB | 	rdlong	local11, local11
0975c     FE 3B 0E F2 | 	cmp	local11, #510 wz
09760     35 00 00 FF 
09764     0C E4 85 F1 | 	sub	objptr, ##27148
09768     16 FA 05 56 |  if_ne	mov	result1, #22
0976c     68 00 90 5D |  if_ne	jmp	#LR__0837
09770                 | LR__0835
09770     37 00 00 FF 
09774     44 E4 05 F1 | 	add	objptr, ##28228
09778     F2 2C 02 FB | 	rdlong	local04, objptr
0977c     01 2C 06 F1 | 	add	local04, #1
09780     F2 2C 62 FC | 	wrlong	local04, objptr
09784     03 2C 66 F0 | 	shl	local04, #3
09788     02 00 00 FF 
0978c     38 E4 85 F1 | 	sub	objptr, ##1080
09790     F2 2C 02 F1 | 	add	local04, objptr
09794     04 2C 06 F1 | 	add	local04, #4
09798     16 35 02 FB | 	rdlong	local08, local04
0979c     FE 35 0E F2 | 	cmp	local08, #510 wz
097a0     35 00 00 FF 
097a4     0C E4 85 F1 | 	sub	objptr, ##27148
097a8     28 00 90 AD |  if_e	jmp	#LR__0836
097ac     37 00 00 FF 
097b0     44 E4 05 F1 | 	add	objptr, ##28228
097b4     F2 3A 02 FB | 	rdlong	local11, objptr
097b8     0E 00 00 FF 
097bc     1C E4 05 F1 | 	add	objptr, ##7196
097c0     F2 38 02 FB | 	rdlong	local10, objptr
097c4     45 00 00 FF 
097c8     60 E4 85 F1 | 	sub	objptr, ##35424
097cc     1C 3B 52 F2 | 	cmps	local11, local10 wc
097d0     E4 FA 9F CD |  if_b	jmp	#LR__0831
097d4                 | LR__0836
097d4                 | ' return 0
097d4     00 FA 05 F6 | 	mov	result1, #0
097d8                 | LR__0837
097d8     A7 F0 03 F6 | 	mov	ptra, fp
097dc     B2 00 A0 FD | 	call	#popregs_
097e0                 | _compile_print_ret
097e0     2D 00 64 FD | 	ret
097e4                 | 
097e4                 | ' 
097e4                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
097e4                 | ' 
097e4                 | ' function compile_if(aline as ulong) as ulong  
097e4                 | _compile_if
097e4     09 4A 05 F6 | 	mov	COUNT_, #9
097e8     A8 00 A0 FD | 	call	#pushregs_
097ec                 | _compile_if_enter
097ec     09 2D 02 F6 | 	mov	local04, arg01
097f0                 | ' return expr()
097f0     70 1C B0 FD | 	call	#_expr
097f4     37 00 00 FF 
097f8     44 E4 05 F1 | 	add	objptr, ##28228
097fc     F2 14 02 FB | 	rdlong	arg02, objptr
09800     0A 2F 02 F6 | 	mov	local05, arg02
09804     03 2E 66 F0 | 	shl	local05, #3
09808     02 00 00 FF 
0980c     38 E4 85 F1 | 	sub	objptr, ##1080
09810     F2 2E 02 F1 | 	add	local05, objptr
09814     04 2E 06 F1 | 	add	local05, #4
09818     17 2F 02 FB | 	rdlong	local05, local05
0981c     01 14 06 F1 | 	add	arg02, #1
09820     02 00 00 FF 
09824     38 E4 05 F1 | 	add	objptr, ##1080
09828     F2 14 62 FC | 	wrlong	arg02, objptr
0982c     37 00 00 FF 
09830     44 E4 85 F1 | 	sub	objptr, ##28228
09834                 | ' 
09834                 | ' err=compile_fun_1p()
09834                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09834     5B 2E 0E F2 | 	cmp	local05, #91 wz
09838     34 FA 05 56 |  if_ne	mov	result1, #52
0983c     20 01 90 5D |  if_ne	jmp	#LR__0842
09840     58 2A 06 F6 | 	mov	local03, #88
09844     13 31 02 F6 | 	mov	local06, local01
09848     14 33 02 F6 | 	mov	local07, local02
0984c     15 15 02 F6 | 	mov	arg02, local03
09850     4A 00 00 FF 
09854     7C E4 05 F1 | 	add	objptr, ##38012
09858     F2 12 02 FB | 	rdlong	arg01, objptr
0985c     09 35 02 F6 | 	mov	local08, arg01
09860     01 34 66 F0 | 	shl	local08, #1
09864     09 35 02 F1 | 	add	local08, arg01
09868     02 34 66 F0 | 	shl	local08, #2
0986c     03 00 00 FF 
09870     00 E4 85 F1 | 	sub	objptr, ##1536
09874     F2 34 02 F1 | 	add	local08, objptr
09878     1A 31 62 FC | 	wrlong	local06, local08
0987c     03 00 00 FF 
09880     00 E4 05 F1 | 	add	objptr, ##1536
09884     F2 30 02 FB | 	rdlong	local06, objptr
09888     18 13 02 F6 | 	mov	arg01, local06
0988c     01 12 66 F0 | 	shl	arg01, #1
09890     18 13 02 F1 | 	add	arg01, local06
09894     02 12 66 F0 | 	shl	arg01, #2
09898     03 00 00 FF 
0989c     00 E4 85 F1 | 	sub	objptr, ##1536
098a0     F2 12 02 F1 | 	add	arg01, objptr
098a4     04 12 06 F1 | 	add	arg01, #4
098a8     09 33 62 FC | 	wrlong	local07, arg01
098ac     03 00 00 FF 
098b0     00 E4 05 F1 | 	add	objptr, ##1536
098b4     F2 30 02 FB | 	rdlong	local06, objptr
098b8     18 13 02 F6 | 	mov	arg01, local06
098bc     01 12 66 F0 | 	shl	arg01, #1
098c0     18 13 02 F1 | 	add	arg01, local06
098c4     02 12 66 F0 | 	shl	arg01, #2
098c8     03 00 00 FF 
098cc     00 E4 85 F1 | 	sub	objptr, ##1536
098d0     F2 12 02 F1 | 	add	arg01, objptr
098d4     08 12 06 F1 | 	add	arg01, #8
098d8     09 15 62 FC | 	wrlong	arg02, arg01
098dc     03 00 00 FF 
098e0     00 E4 05 F1 | 	add	objptr, ##1536
098e4     F2 30 02 FB | 	rdlong	local06, objptr
098e8     01 30 06 F1 | 	add	local06, #1
098ec     F2 30 62 FC | 	wrlong	local06, objptr
098f0                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
098f0                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
098f0     13 00 00 FF 
098f4     38 E4 85 F1 | 	sub	objptr, ##9784
098f8     F2 14 02 FB | 	rdlong	arg02, objptr
098fc     01 14 06 F1 | 	add	arg02, #1
09900     03 14 66 F0 | 	shl	arg02, #3
09904     02 00 00 FF 
09908     38 E4 85 F1 | 	sub	objptr, ##1080
0990c     F2 14 02 F1 | 	add	arg02, objptr
09910     0A 13 02 FB | 	rdlong	arg01, arg02
09914     35 00 00 FF 
09918     0C E4 85 F1 | 	sub	objptr, ##27148
0991c                 | ' 
0991c                 | ' select case s
0991c     AB 01 00 FF 
09920     B8 14 06 F6 | 	mov	arg02, ##@LR__5531
09924     88 C0 B1 FD | 	call	#__system___string_cmp
09928     00 FA 0D F2 | 	cmp	result1, #0 wz
0992c     1B FA 05 A6 |  if_e	mov	result1, #27
09930     00 FA 05 56 |  if_ne	mov	result1, #0
09934     00 FA 0D F2 | 	cmp	result1, #0 wz
09938     10 00 90 AD |  if_e	jmp	#LR__0840
0993c     05 12 06 F6 | 	mov	arg01, #5
09940     38 E4 BF FD | 	call	#_compile_immediate_assign
09944     FD 36 02 F6 | 	mov	local09, result1
09948     10 00 90 FD | 	jmp	#LR__0841
0994c                 | LR__0840
0994c     05 12 06 F6 | 	mov	arg01, #5
09950     16 15 02 F6 | 	mov	arg02, local04
09954     78 DA BF FD | 	call	#_compile_immediate
09958     FD 36 02 F6 | 	mov	local09, result1
0995c                 | LR__0841
0995c                 | ' return err
0995c     1B FB 01 F6 | 	mov	result1, local09
09960                 | LR__0842
09960     A7 F0 03 F6 | 	mov	ptra, fp
09964     B2 00 A0 FD | 	call	#popregs_
09968                 | _compile_if_ret
09968     2D 00 64 FD | 	ret
0996c                 | 
0996c                 | ' 
0996c                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
0996c                 | ' 
0996c                 | ' function compile_else(aline as ulong) as ulong  
0996c                 | _compile_else
0996c     07 4A 05 F6 | 	mov	COUNT_, #7
09970     A8 00 A0 FD | 	call	#pushregs_
09974                 | _compile_else_enter
09974     09 2D 02 F6 | 	mov	local04, arg01
09978     5A 2A 06 F6 | 	mov	local03, #90
0997c     13 2F 02 F6 | 	mov	local05, local01
09980     14 31 02 F6 | 	mov	local06, local02
09984     15 27 02 F6 | 	mov	local01, local03
09988     4A 00 00 FF 
0998c     7C E4 05 F1 | 	add	objptr, ##38012
09990     F2 14 02 FB | 	rdlong	arg02, objptr
09994     0A 13 02 F6 | 	mov	arg01, arg02
09998     01 12 66 F0 | 	shl	arg01, #1
0999c     0A 13 02 F1 | 	add	arg01, arg02
099a0     02 12 66 F0 | 	shl	arg01, #2
099a4     03 00 00 FF 
099a8     00 E4 85 F1 | 	sub	objptr, ##1536
099ac     F2 12 02 F1 | 	add	arg01, objptr
099b0     09 2F 62 FC | 	wrlong	local05, arg01
099b4     03 00 00 FF 
099b8     00 E4 05 F1 | 	add	objptr, ##1536
099bc     F2 2E 02 FB | 	rdlong	local05, objptr
099c0     17 15 02 F6 | 	mov	arg02, local05
099c4     01 14 66 F0 | 	shl	arg02, #1
099c8     17 15 02 F1 | 	add	arg02, local05
099cc     02 14 66 F0 | 	shl	arg02, #2
099d0     03 00 00 FF 
099d4     00 E4 85 F1 | 	sub	objptr, ##1536
099d8     F2 14 02 F1 | 	add	arg02, objptr
099dc     04 14 06 F1 | 	add	arg02, #4
099e0     0A 31 62 FC | 	wrlong	local06, arg02
099e4     03 00 00 FF 
099e8     00 E4 05 F1 | 	add	objptr, ##1536
099ec     F2 30 02 FB | 	rdlong	local06, objptr
099f0     18 2F 02 F6 | 	mov	local05, local06
099f4     01 2E 66 F0 | 	shl	local05, #1
099f8     18 2F 02 F1 | 	add	local05, local06
099fc     02 2E 66 F0 | 	shl	local05, #2
09a00     03 00 00 FF 
09a04     00 E4 85 F1 | 	sub	objptr, ##1536
09a08     F2 2E 02 F1 | 	add	local05, objptr
09a0c     08 2E 06 F1 | 	add	local05, #8
09a10     17 27 62 FC | 	wrlong	local01, local05
09a14     03 00 00 FF 
09a18     00 E4 05 F1 | 	add	objptr, ##1536
09a1c     F2 2E 02 FB | 	rdlong	local05, objptr
09a20     01 2E 06 F1 | 	add	local05, #1
09a24     F2 2E 62 FC | 	wrlong	local05, objptr
09a28                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09a28                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09a28     13 00 00 FF 
09a2c     38 E4 85 F1 | 	sub	objptr, ##9784
09a30     F2 30 02 FB | 	rdlong	local06, objptr
09a34     01 30 06 F1 | 	add	local06, #1
09a38     03 30 66 F0 | 	shl	local06, #3
09a3c     02 00 00 FF 
09a40     38 E4 85 F1 | 	sub	objptr, ##1080
09a44     F2 30 02 F1 | 	add	local06, objptr
09a48     18 13 02 FB | 	rdlong	arg01, local06
09a4c     35 00 00 FF 
09a50     0C E4 85 F1 | 	sub	objptr, ##27148
09a54                 | ' 
09a54                 | ' select case s
09a54     AB 01 00 FF 
09a58     B8 14 06 F6 | 	mov	arg02, ##@LR__5531
09a5c     50 BF B1 FD | 	call	#__system___string_cmp
09a60     00 FA 0D F2 | 	cmp	result1, #0 wz
09a64     1B FA 05 A6 |  if_e	mov	result1, #27
09a68     00 FA 05 56 |  if_ne	mov	result1, #0
09a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
09a70     10 00 90 AD |  if_e	jmp	#LR__0850
09a74     05 12 06 F6 | 	mov	arg01, #5
09a78     00 E3 BF FD | 	call	#_compile_immediate_assign
09a7c     FD 32 02 F6 | 	mov	local07, result1
09a80     10 00 90 FD | 	jmp	#LR__0851
09a84                 | LR__0850
09a84     05 12 06 F6 | 	mov	arg01, #5
09a88     16 15 02 F6 | 	mov	arg02, local04
09a8c     40 D9 BF FD | 	call	#_compile_immediate
09a90     FD 32 02 F6 | 	mov	local07, result1
09a94                 | LR__0851
09a94                 | ' return err
09a94     19 FB 01 F6 | 	mov	result1, local07
09a98     A7 F0 03 F6 | 	mov	ptra, fp
09a9c     B2 00 A0 FD | 	call	#popregs_
09aa0                 | _compile_else_ret
09aa0     2D 00 64 FD | 	ret
09aa4                 | 
09aa4                 | ' 
09aa4                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09aa4                 | ' 
09aa4                 | ' function compile_dim() as ulong  
09aa4                 | _compile_dim
09aa4     11 4A 05 F6 | 	mov	COUNT_, #17
09aa8     A8 00 A0 FD | 	call	#pushregs_
09aac     01 26 06 F6 | 	mov	local01, #1
09ab0     01 28 06 F6 | 	mov	local02, #1
09ab4     01 2A 06 F6 | 	mov	local03, #1
09ab8                 | ' 
09ab8                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09ab8                 | ' if isname(lparts(ct).part$) then 
09ab8     37 00 00 FF 
09abc     44 E4 05 F1 | 	add	objptr, ##28228
09ac0     F2 18 02 FB | 	rdlong	arg04, objptr
09ac4     03 18 66 F0 | 	shl	arg04, #3
09ac8     02 00 00 FF 
09acc     38 E4 85 F1 | 	sub	objptr, ##1080
09ad0     F2 18 02 F1 | 	add	arg04, objptr
09ad4     0C 13 02 FB | 	rdlong	arg01, arg04
09ad8     35 00 00 FF 
09adc     0C E4 85 F1 | 	sub	objptr, ##27148
09ae0     44 C7 BF FD | 	call	#_isname
09ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
09ae8     78 05 90 AD |  if_e	jmp	#LR__0883
09aec     37 00 00 FF 
09af0     44 E4 05 F1 | 	add	objptr, ##28228
09af4     F2 2C 02 FB | 	rdlong	local04, objptr
09af8     03 2C 66 F0 | 	shl	local04, #3
09afc     02 00 00 FF 
09b00     38 E4 85 F1 | 	sub	objptr, ##1080
09b04     F2 2C 02 F1 | 	add	local04, objptr
09b08     16 2F 02 FB | 	rdlong	local05, local04
09b0c     01 30 66 F6 | 	neg	local06, #1
09b10                 | '   varname2$=lparts(ct).part$ 
09b10                 | '   j=-1
09b10                 | '   if varnum>0 then
09b10     04 E4 85 F1 | 	sub	objptr, #4
09b14     F2 32 02 FB | 	rdlong	local07, objptr
09b18     35 00 00 FF 
09b1c     08 E4 85 F1 | 	sub	objptr, ##27144
09b20     01 32 56 F2 | 	cmps	local07, #1 wc
09b24     58 00 90 CD |  if_b	jmp	#LR__0862
09b28                 | '     for i=0 to varnum-1
09b28     00 34 06 F6 | 	mov	local08, #0
09b2c     35 00 00 FF 
09b30     08 E4 05 F1 | 	add	objptr, ##27144
09b34     F2 36 02 FB | 	rdlong	local09, objptr
09b38     35 00 00 FF 
09b3c     08 E4 85 F1 | 	sub	objptr, ##27144
09b40                 | LR__0860
09b40     1B 35 52 F2 | 	cmps	local08, local09 wc
09b44     38 00 90 3D |  if_ae	jmp	#LR__0861
09b48                 | '       if variables(i).name=varname2$ then j=i : exit
09b48     1A 2D 02 F6 | 	mov	local04, local08
09b4c     04 2C 66 F0 | 	shl	local04, #4
09b50     14 00 00 FF 
09b54     F8 E5 05 F1 | 	add	objptr, ##10744
09b58     F2 2C 02 F1 | 	add	local04, objptr
09b5c     16 13 02 FB | 	rdlong	arg01, local04
09b60     17 15 02 F6 | 	mov	arg02, local05
09b64     14 00 00 FF 
09b68     F8 E5 85 F1 | 	sub	objptr, ##10744
09b6c     40 BE B1 FD | 	call	#__system___string_cmp
09b70     00 FA 0D F2 | 	cmp	result1, #0 wz
09b74     1A 31 02 A6 |  if_e	mov	local06, local08
09b78     01 34 06 51 |  if_ne	add	local08, #1
09b7c     C0 FF 9F 5D |  if_ne	jmp	#LR__0860
09b80                 | LR__0861
09b80                 | LR__0862
09b80                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
09b80     FF FF 7F FF 
09b84     FF 31 0E F2 | 	cmp	local06, ##-1 wz
09b88     35 00 00 AF 
09b8c     08 E4 05 A1 |  if_e	add	objptr, ##27144
09b90     F2 30 02 AB |  if_e	rdlong	local06, objptr
09b94     35 00 00 AF 
09b98     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09b9c     78 00 90 AD |  if_e	jmp	#LR__0863
09ba0     00 12 06 F6 | 	mov	arg01, #0
09ba4     08 1B B2 FD | 	call	#__system___getiolock_0599
09ba8     FD 12 02 F6 | 	mov	arg01, result1
09bac     D8 BD B1 FD | 	call	#__system___lockmem
09bb0     AD 01 00 FF 
09bb4     29 15 06 F6 | 	mov	arg02, ##@LR__5781
09bb8     00 12 06 F6 | 	mov	arg01, #0
09bbc     00 16 06 F6 | 	mov	arg03, #0
09bc0     B8 CA B1 FD | 	call	#__system___basic_print_string
09bc4     52 00 00 FF 
09bc8     5C E4 05 F1 | 	add	objptr, ##42076
09bcc     F2 14 02 FB | 	rdlong	arg02, objptr
09bd0     52 00 00 FF 
09bd4     5C E4 85 F1 | 	sub	objptr, ##42076
09bd8     00 12 06 F6 | 	mov	arg01, #0
09bdc     00 16 06 F6 | 	mov	arg03, #0
09be0     0A 18 06 F6 | 	mov	arg04, #10
09be4     18 CB B1 FD | 	call	#__system___basic_print_unsigned
09be8     AD 01 00 FF 
09bec     37 15 06 F6 | 	mov	arg02, ##@LR__5782
09bf0     00 12 06 F6 | 	mov	arg01, #0
09bf4     00 16 06 F6 | 	mov	arg03, #0
09bf8     80 CA B1 FD | 	call	#__system___basic_print_string
09bfc     00 12 06 F6 | 	mov	arg01, #0
09c00     0A 14 06 F6 | 	mov	arg02, #10
09c04     00 16 06 F6 | 	mov	arg03, #0
09c08     18 CA B1 FD | 	call	#__system___basic_print_char
09c0c     00 12 06 F6 | 	mov	arg01, #0
09c10     9C 1A B2 FD | 	call	#__system___getiolock_0599
09c14     FD 00 68 FC | 	wrlong	#0, result1
09c18                 | LR__0863
09c18                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
09c18     37 00 00 FF 
09c1c     44 E4 05 F1 | 	add	objptr, ##28228
09c20     F2 14 02 FB | 	rdlong	arg02, objptr
09c24     01 14 06 F1 | 	add	arg02, #1
09c28     03 14 66 F0 | 	shl	arg02, #3
09c2c     02 00 00 FF 
09c30     38 E4 85 F1 | 	sub	objptr, ##1080
09c34     F2 14 02 F1 | 	add	arg02, objptr
09c38     0A 13 02 FB | 	rdlong	arg01, arg02
09c3c     AD 01 00 FF 
09c40     58 15 06 F6 | 	mov	arg02, ##@LR__5783
09c44     35 00 00 FF 
09c48     0C E4 85 F1 | 	sub	objptr, ##27148
09c4c     60 BD B1 FD | 	call	#__system___string_cmp
09c50     00 FA 0D F2 | 	cmp	result1, #0 wz
09c54     44 00 90 AD |  if_e	jmp	#LR__0864
09c58     37 00 00 FF 
09c5c     44 E4 05 F1 | 	add	objptr, ##28228
09c60     F2 36 02 FB | 	rdlong	local09, objptr
09c64     01 36 06 F1 | 	add	local09, #1
09c68     03 36 66 F0 | 	shl	local09, #3
09c6c     02 00 00 FF 
09c70     38 E4 85 F1 | 	sub	objptr, ##1080
09c74     F2 36 02 F1 | 	add	local09, objptr
09c78     1B 13 02 FB | 	rdlong	arg01, local09
09c7c     AD 01 00 FF 
09c80     5A 15 06 F6 | 	mov	arg02, ##@LR__5784
09c84     35 00 00 FF 
09c88     0C E4 85 F1 | 	sub	objptr, ##27148
09c8c     20 BD B1 FD | 	call	#__system___string_cmp
09c90     00 FA 0D F2 | 	cmp	result1, #0 wz
09c94     2B FA 05 56 |  if_ne	mov	result1, #43
09c98     D0 04 90 5D |  if_ne	jmp	#LR__0885
09c9c                 | LR__0864
09c9c                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
09c9c     37 00 00 FF 
09ca0     44 E4 05 F1 | 	add	objptr, ##28228
09ca4     F2 14 02 FB | 	rdlong	arg02, objptr
09ca8     01 14 06 F1 | 	add	arg02, #1
09cac     03 14 66 F0 | 	shl	arg02, #3
09cb0     02 00 00 FF 
09cb4     38 E4 85 F1 | 	sub	objptr, ##1080
09cb8     F2 14 02 F1 | 	add	arg02, objptr
09cbc     0A 13 02 FB | 	rdlong	arg01, arg02
09cc0     AD 01 00 FF 
09cc4     5D 15 06 F6 | 	mov	arg02, ##@LR__5785
09cc8     35 00 00 FF 
09ccc     0C E4 85 F1 | 	sub	objptr, ##27148
09cd0     DC BC B1 FD | 	call	#__system___string_cmp
09cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
09cd8     37 00 00 AF 
09cdc     44 E4 05 A1 |  if_e	add	objptr, ##28228
09ce0     F2 38 02 AB |  if_e	rdlong	local10, objptr
09ce4     37 00 00 AF 
09ce8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
09cec     01 38 06 A1 |  if_e	add	local10, #1
09cf0     5C 01 90 AD |  if_e	jmp	#LR__0869
09cf4     37 00 00 FF 
09cf8     44 E4 05 F1 | 	add	objptr, ##28228
09cfc     F2 38 02 FB | 	rdlong	local10, objptr
09d00     37 00 00 FF 
09d04     44 E4 85 F1 | 	sub	objptr, ##28228
09d08     02 38 06 F1 | 	add	local10, #2
09d0c     00 3A 06 F6 | 	mov	local11, #0
09d10                 | '   l=ct+2 : m=0 : do
09d10                 | LR__0865
09d10                 | '   if isdec(lparts(l).part$) then 
09d10     1C 2D 02 F6 | 	mov	local04, local10
09d14     03 2C 66 F0 | 	shl	local04, #3
09d18     35 00 00 FF 
09d1c     0C E4 05 F1 | 	add	objptr, ##27148
09d20     F2 2C 02 F1 | 	add	local04, objptr
09d24     16 13 02 FB | 	rdlong	arg01, local04
09d28     35 00 00 FF 
09d2c     0C E4 85 F1 | 	sub	objptr, ##27148
09d30     F8 CD BF FD | 	call	#_isdec
09d34     00 FA 0D F2 | 	cmp	result1, #0 wz
09d38     44 00 90 AD |  if_e	jmp	#LR__0866
09d3c     1D 3D 02 F6 | 	mov	local12, local11
09d40     13 3D 06 F1 | 	add	local12, #local01
09d44     1C 37 02 F6 | 	mov	local09, local10
09d48     03 36 66 F0 | 	shl	local09, #3
09d4c     35 00 00 FF 
09d50     0C E4 05 F1 | 	add	objptr, ##27148
09d54     F2 36 02 F1 | 	add	local09, objptr
09d58     1B 13 02 FB | 	rdlong	arg01, local09
09d5c     00 14 06 F6 | 	mov	arg02, #0
09d60     35 00 00 FF 
09d64     0C E4 85 F1 | 	sub	objptr, ##27148
09d68     0C F1 B1 FD | 	call	#__system____builtin_atoi
09d6c     FD 3E 02 F6 | 	mov	local13, result1
09d70                 | 	'.live	local13
09d70                 | 	'.live	local12
09d70     00 3C 8E F9 | 	altd	local12, #0
09d74     1F 3D 02 F6 | 	mov	local12, local13
09d78     01 3A 06 F1 | 	add	local11, #1
09d7c     08 00 90 FD | 	jmp	#LR__0867
09d80                 | LR__0866
09d80                 | '     return(17)
09d80     11 FA 05 F6 | 	mov	result1, #17
09d84     E4 03 90 FD | 	jmp	#LR__0885
09d88                 | LR__0867
09d88                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
09d88     1C 2D 02 F6 | 	mov	local04, local10
09d8c     01 2C 06 F1 | 	add	local04, #1
09d90     03 2C 66 F0 | 	shl	local04, #3
09d94     35 00 00 FF 
09d98     0C E4 05 F1 | 	add	objptr, ##27148
09d9c     F2 2C 02 F1 | 	add	local04, objptr
09da0     16 13 02 FB | 	rdlong	arg01, local04
09da4     AD 01 00 FF 
09da8     60 15 06 F6 | 	mov	arg02, ##@LR__5786
09dac     35 00 00 FF 
09db0     0C E4 85 F1 | 	sub	objptr, ##27148
09db4     F8 BB B1 FD | 	call	#__system___string_cmp
09db8     00 FA 0D F2 | 	cmp	result1, #0 wz
09dbc     3C 00 90 AD |  if_e	jmp	#LR__0868
09dc0     1C 3F 02 F6 | 	mov	local13, local10
09dc4     01 3E 06 F1 | 	add	local13, #1
09dc8     03 3E 66 F0 | 	shl	local13, #3
09dcc     35 00 00 FF 
09dd0     0C E4 05 F1 | 	add	objptr, ##27148
09dd4     F2 3E 02 F1 | 	add	local13, objptr
09dd8     1F 13 02 FB | 	rdlong	arg01, local13
09ddc     AD 01 00 FF 
09de0     62 15 06 F6 | 	mov	arg02, ##@LR__5787
09de4     35 00 00 FF 
09de8     0C E4 85 F1 | 	sub	objptr, ##27148
09dec     C0 BB B1 FD | 	call	#__system___string_cmp
09df0     00 FA 0D F2 | 	cmp	result1, #0 wz
09df4     2C FA 05 56 |  if_ne	mov	result1, #44
09df8     70 03 90 5D |  if_ne	jmp	#LR__0885
09dfc                 | LR__0868
09dfc     02 38 06 F1 | 	add	local10, #2
09e00     1C 2D 02 F6 | 	mov	local04, local10
09e04     01 2C 86 F1 | 	sub	local04, #1
09e08     03 2C 66 F0 | 	shl	local04, #3
09e0c     35 00 00 FF 
09e10     0C E4 05 F1 | 	add	objptr, ##27148
09e14     F2 2C 02 F1 | 	add	local04, objptr
09e18     16 13 02 FB | 	rdlong	arg01, local04
09e1c     AD 01 00 FF 
09e20     64 15 06 F6 | 	mov	arg02, ##@LR__5788
09e24     35 00 00 FF 
09e28     0C E4 85 F1 | 	sub	objptr, ##27148
09e2c     80 BB B1 FD | 	call	#__system___string_cmp
09e30     00 FA 0D F2 | 	cmp	result1, #0 wz
09e34     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
09e38     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0865
09e3c                 | '   if m>3 then return 45
09e3c     04 3A 56 F2 | 	cmps	local11, #4 wc
09e40     2D FA 05 36 |  if_ae	mov	result1, #45
09e44     24 03 90 3D |  if_ae	jmp	#LR__0885
09e48     00 41 06 F6 | 	mov	local14, #256
09e4c     0C 42 06 F6 | 	mov	local15, #12
09e50                 | LR__0869
09e50                 | '   arraytype=array_no_type : esize=12
09e50                 | ' 1350 
09e50                 | '   if lparts(l).part$="as" then
09e50     1C 2D 02 F6 | 	mov	local04, local10
09e54     03 2C 66 F0 | 	shl	local04, #3
09e58     35 00 00 FF 
09e5c     0C E4 05 F1 | 	add	objptr, ##27148
09e60     F2 2C 02 F1 | 	add	local04, objptr
09e64     16 13 02 FB | 	rdlong	arg01, local04
09e68     AD 01 00 FF 
09e6c     66 15 06 F6 | 	mov	arg02, ##@LR__5789
09e70     35 00 00 FF 
09e74     0C E4 85 F1 | 	sub	objptr, ##27148
09e78     34 BB B1 FD | 	call	#__system___string_cmp
09e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
09e80     E8 01 90 5D |  if_ne	jmp	#LR__0884
09e84                 | '     select case lparts(l+1).part$
09e84     1C 3D 02 F6 | 	mov	local12, local10
09e88     01 3C 06 F1 | 	add	local12, #1
09e8c     03 3C 66 F0 | 	shl	local12, #3
09e90     35 00 00 FF 
09e94     0C E4 05 F1 | 	add	objptr, ##27148
09e98     F2 3C 02 F1 | 	add	local12, objptr
09e9c     1E 45 02 FB | 	rdlong	local16, local12
09ea0     AD 01 00 FF 
09ea4     69 15 06 F6 | 	mov	arg02, ##@LR__5790
09ea8     22 13 02 F6 | 	mov	arg01, local16
09eac     35 00 00 FF 
09eb0     0C E4 85 F1 | 	sub	objptr, ##27148
09eb4     F8 BA B1 FD | 	call	#__system___string_cmp
09eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
09ebc     0C 01 90 AD |  if_e	jmp	#LR__0870
09ec0     AD 01 00 FF 
09ec4     6E 15 06 F6 | 	mov	arg02, ##@LR__5791
09ec8     22 13 02 F6 | 	mov	arg01, local16
09ecc     E0 BA B1 FD | 	call	#__system___string_cmp
09ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
09ed4     00 01 90 AD |  if_e	jmp	#LR__0871
09ed8     AD 01 00 FF 
09edc     74 15 06 F6 | 	mov	arg02, ##@LR__5792
09ee0     22 13 02 F6 | 	mov	arg01, local16
09ee4     C8 BA B1 FD | 	call	#__system___string_cmp
09ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
09eec     F4 00 90 AD |  if_e	jmp	#LR__0872
09ef0     AD 01 00 FF 
09ef4     7A 15 06 F6 | 	mov	arg02, ##@LR__5793
09ef8     22 13 02 F6 | 	mov	arg01, local16
09efc     B0 BA B1 FD | 	call	#__system___string_cmp
09f00     00 FA 0D F2 | 	cmp	result1, #0 wz
09f04     E8 00 90 AD |  if_e	jmp	#LR__0873
09f08     AD 01 00 FF 
09f0c     81 15 06 F6 | 	mov	arg02, ##@LR__5794
09f10     22 13 02 F6 | 	mov	arg01, local16
09f14     98 BA B1 FD | 	call	#__system___string_cmp
09f18     00 FA 0D F2 | 	cmp	result1, #0 wz
09f1c     DC 00 90 AD |  if_e	jmp	#LR__0874
09f20     AD 01 00 FF 
09f24     86 15 06 F6 | 	mov	arg02, ##@LR__5795
09f28     22 13 02 F6 | 	mov	arg01, local16
09f2c     80 BA B1 FD | 	call	#__system___string_cmp
09f30     00 FA 0D F2 | 	cmp	result1, #0 wz
09f34     D0 00 90 AD |  if_e	jmp	#LR__0875
09f38     AD 01 00 FF 
09f3c     8E 15 06 F6 | 	mov	arg02, ##@LR__5796
09f40     22 13 02 F6 | 	mov	arg01, local16
09f44     68 BA B1 FD | 	call	#__system___string_cmp
09f48     00 FA 0D F2 | 	cmp	result1, #0 wz
09f4c     C4 00 90 AD |  if_e	jmp	#LR__0876
09f50     AD 01 00 FF 
09f54     94 15 06 F6 | 	mov	arg02, ##@LR__5797
09f58     22 13 02 F6 | 	mov	arg01, local16
09f5c     50 BA B1 FD | 	call	#__system___string_cmp
09f60     00 FA 0D F2 | 	cmp	result1, #0 wz
09f64     B8 00 90 AD |  if_e	jmp	#LR__0877
09f68     AD 01 00 FF 
09f6c     9A 15 06 F6 | 	mov	arg02, ##@LR__5798
09f70     22 13 02 F6 | 	mov	arg01, local16
09f74     38 BA B1 FD | 	call	#__system___string_cmp
09f78     00 FA 0D F2 | 	cmp	result1, #0 wz
09f7c     AC 00 90 AD |  if_e	jmp	#LR__0878
09f80     AD 01 00 FF 
09f84     A1 15 06 F6 | 	mov	arg02, ##@LR__5799
09f88     22 13 02 F6 | 	mov	arg01, local16
09f8c     20 BA B1 FD | 	call	#__system___string_cmp
09f90     00 FA 0D F2 | 	cmp	result1, #0 wz
09f94     A0 00 90 AD |  if_e	jmp	#LR__0879
09f98     AD 01 00 FF 
09f9c     A8 15 06 F6 | 	mov	arg02, ##@LR__5800
09fa0     22 13 02 F6 | 	mov	arg01, local16
09fa4     08 BA B1 FD | 	call	#__system___string_cmp
09fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
09fac     94 00 90 AD |  if_e	jmp	#LR__0880
09fb0     AD 01 00 FF 
09fb4     AF 15 06 F6 | 	mov	arg02, ##@LR__5801
09fb8     22 13 02 F6 | 	mov	arg01, local16
09fbc     F0 B9 B1 FD | 	call	#__system___string_cmp
09fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
09fc4     88 00 90 AD |  if_e	jmp	#LR__0881
09fc8     90 00 90 FD | 	jmp	#LR__0882
09fcc                 | LR__0870
09fcc     01 41 06 F6 | 	mov	local14, #257
09fd0     01 42 06 F6 | 	mov	local15, #1
09fd4     94 00 90 FD | 	jmp	#LR__0884
09fd8                 | LR__0871
09fd8     02 41 06 F6 | 	mov	local14, #258
09fdc     01 42 06 F6 | 	mov	local15, #1
09fe0     88 00 90 FD | 	jmp	#LR__0884
09fe4                 | LR__0872
09fe4     03 41 06 F6 | 	mov	local14, #259
09fe8     02 42 06 F6 | 	mov	local15, #2
09fec     7C 00 90 FD | 	jmp	#LR__0884
09ff0                 | LR__0873
09ff0     04 41 06 F6 | 	mov	local14, #260
09ff4     02 42 06 F6 | 	mov	local15, #2
09ff8     70 00 90 FD | 	jmp	#LR__0884
09ffc                 | LR__0874
09ffc     05 41 06 F6 | 	mov	local14, #261
0a000     04 42 06 F6 | 	mov	local15, #4
0a004     64 00 90 FD | 	jmp	#LR__0884
0a008                 | LR__0875
0a008     05 41 06 F6 | 	mov	local14, #261
0a00c     04 42 06 F6 | 	mov	local15, #4
0a010     58 00 90 FD | 	jmp	#LR__0884
0a014                 | LR__0876
0a014     06 41 06 F6 | 	mov	local14, #262
0a018     04 42 06 F6 | 	mov	local15, #4
0a01c     4C 00 90 FD | 	jmp	#LR__0884
0a020                 | LR__0877
0a020     07 41 06 F6 | 	mov	local14, #263
0a024     08 42 06 F6 | 	mov	local15, #8
0a028     40 00 90 FD | 	jmp	#LR__0884
0a02c                 | LR__0878
0a02c     08 41 06 F6 | 	mov	local14, #264
0a030     08 42 06 F6 | 	mov	local15, #8
0a034     34 00 90 FD | 	jmp	#LR__0884
0a038                 | LR__0879
0a038     09 41 06 F6 | 	mov	local14, #265
0a03c     04 42 06 F6 | 	mov	local15, #4
0a040     28 00 90 FD | 	jmp	#LR__0884
0a044                 | LR__0880
0a044     0A 41 06 F6 | 	mov	local14, #266
0a048     08 42 06 F6 | 	mov	local15, #8
0a04c     1C 00 90 FD | 	jmp	#LR__0884
0a050                 | LR__0881
0a050     0B 41 06 F6 | 	mov	local14, #267
0a054     04 42 06 F6 | 	mov	local15, #4
0a058     10 00 90 FD | 	jmp	#LR__0884
0a05c                 | LR__0882
0a05c     2F FA 05 F6 | 	mov	result1, #47
0a060     08 01 90 FD | 	jmp	#LR__0885
0a064                 | LR__0883
0a064                 | '   return 46
0a064     2E FA 05 F6 | 	mov	result1, #46
0a068     00 01 90 FD | 	jmp	#LR__0885
0a06c                 | LR__0884
0a06c     13 43 02 FD | 	qmul	local15, local01
0a070     18 32 62 FD | 	getqx	local07
0a074     14 33 02 FD | 	qmul	local07, local02
0a078     18 44 62 FD | 	getqx	local16
0a07c     15 45 02 FD | 	qmul	local16, local03
0a080     52 00 00 FF 
0a084     44 E4 05 F1 | 	add	objptr, ##42052
0a088     F2 46 02 FB | 	rdlong	local17, objptr
0a08c     20 15 02 F6 | 	mov	arg02, local14
0a090     18 44 62 FD | 	getqx	local16
0a094     22 47 82 F1 | 	sub	local17, local16
0a098     10 46 86 F1 | 	sub	local17, #16
0a09c     0F 46 26 F5 | 	andn	local17, #15
0a0a0     F2 46 62 FC | 	wrlong	local17, objptr
0a0a4     52 00 00 FF 
0a0a8     44 E4 85 F1 | 	sub	objptr, ##42052
0a0ac     23 13 02 F6 | 	mov	arg01, local17
0a0b0     D0 80 B1 FD | 	call	#_psdpoke
0a0b4     23 13 02 F6 | 	mov	arg01, local17
0a0b8     02 12 06 F1 | 	add	arg01, #2
0a0bc     21 15 02 F6 | 	mov	arg02, local15
0a0c0     C0 80 B1 FD | 	call	#_psdpoke
0a0c4     23 13 02 F6 | 	mov	arg01, local17
0a0c8     04 12 06 F1 | 	add	arg01, #4
0a0cc     13 15 02 F6 | 	mov	arg02, local01
0a0d0     68 80 B1 FD | 	call	#_pslpoke
0a0d4     23 13 02 F6 | 	mov	arg01, local17
0a0d8     08 12 06 F1 | 	add	arg01, #8
0a0dc     14 15 02 F6 | 	mov	arg02, local02
0a0e0     58 80 B1 FD | 	call	#_pslpoke
0a0e4     23 13 02 F6 | 	mov	arg01, local17
0a0e8     0C 12 06 F1 | 	add	arg01, #12
0a0ec     15 15 02 F6 | 	mov	arg02, local03
0a0f0     48 80 B1 FD | 	call	#_pslpoke
0a0f4     18 3D 02 F6 | 	mov	local12, local06
0a0f8     04 3C 66 F0 | 	shl	local12, #4
0a0fc     14 00 00 FF 
0a100     F8 E5 05 F1 | 	add	objptr, ##10744
0a104     F2 3C 02 F1 | 	add	local12, objptr
0a108     1E 2F 62 FC | 	wrlong	local05, local12
0a10c     18 3D 02 F6 | 	mov	local12, local06
0a110     04 3C 66 F0 | 	shl	local12, #4
0a114     F2 3C 02 F1 | 	add	local12, objptr
0a118     04 3C 06 F1 | 	add	local12, #4
0a11c     1E 47 62 FC | 	wrlong	local17, local12
0a120     18 3D 02 F6 | 	mov	local12, local06
0a124     04 3C 66 F0 | 	shl	local12, #4
0a128     F2 3C 02 F1 | 	add	local12, objptr
0a12c     0C 3C 06 F1 | 	add	local12, #12
0a130     1E 41 62 FC | 	wrlong	local14, local12
0a134                 | ' memtop=arrayptr
0a134                 | ' psdpoke arrayptr,arraytype 
0a134                 | ' psdpoke arrayptr+2,esize 
0a134                 | ' pslpoke arrayptr+4,dims(0)
0a134                 | ' pslpoke arrayptr+8,dims(1)
0a134                 | ' pslpoke arrayptr+12,dims(2)
0a134                 | ' variables(j).name=varname2$
0a134                 | ' variables(j).value.uresult=arrayptr
0a134                 | ' variables(j).vartype=arraytype
0a134                 | ' if j=varnum then varnum+=1
0a134     20 00 00 FF 
0a138     10 E4 05 F1 | 	add	objptr, ##16400
0a13c     F2 32 02 FB | 	rdlong	local07, objptr
0a140     35 00 00 FF 
0a144     08 E4 85 F1 | 	sub	objptr, ##27144
0a148     19 31 0A F2 | 	cmp	local06, local07 wz
0a14c     35 00 00 AF 
0a150     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a154     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a158     01 32 06 A1 |  if_e	add	local07, #1
0a15c     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a160     35 00 00 AF 
0a164     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a168                 | ' return 0
0a168     00 FA 05 F6 | 	mov	result1, #0
0a16c                 | LR__0885
0a16c     A7 F0 03 F6 | 	mov	ptra, fp
0a170     B2 00 A0 FD | 	call	#popregs_
0a174                 | _compile_dim_ret
0a174     2D 00 64 FD | 	ret
0a178                 | 
0a178                 | ' 
0a178                 | ' '----- compile 'for' command. 
0a178                 | ' 
0a178                 | ' function compile_for() as ulong  
0a178                 | _compile_for
0a178     05 4A 05 F6 | 	mov	COUNT_, #5
0a17c     A8 00 A0 FD | 	call	#pushregs_
0a180                 | ' 
0a180                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a180     37 00 00 FF 
0a184     44 E4 05 F1 | 	add	objptr, ##28228
0a188     F2 14 02 FB | 	rdlong	arg02, objptr
0a18c     01 14 06 F1 | 	add	arg02, #1
0a190     03 14 66 F0 | 	shl	arg02, #3
0a194     02 00 00 FF 
0a198     38 E4 85 F1 | 	sub	objptr, ##1080
0a19c     F2 14 02 F1 | 	add	arg02, objptr
0a1a0     0A 13 02 FB | 	rdlong	arg01, arg02
0a1a4     35 00 00 FF 
0a1a8     0C E4 85 F1 | 	sub	objptr, ##27148
0a1ac                 | ' 
0a1ac                 | ' select case s
0a1ac     AB 01 00 FF 
0a1b0     B8 14 06 F6 | 	mov	arg02, ##@LR__5531
0a1b4     F8 B7 B1 FD | 	call	#__system___string_cmp
0a1b8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1bc     1B FA 05 A6 |  if_e	mov	result1, #27
0a1c0     00 FA 05 56 |  if_ne	mov	result1, #0
0a1c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1c8     0C 00 90 AD |  if_e	jmp	#LR__0890
0a1cc     05 12 06 F6 | 	mov	arg01, #5
0a1d0     A8 DB BF FD | 	call	#_compile_immediate_assign
0a1d4     08 00 90 FD | 	jmp	#LR__0891
0a1d8                 | LR__0890
0a1d8     20 FA 05 F6 | 	mov	result1, #32
0a1dc     D0 02 90 FD | 	jmp	#LR__0895
0a1e0                 | LR__0891
0a1e0     4A 00 00 FF 
0a1e4     7C E4 05 F1 | 	add	objptr, ##38012
0a1e8     F2 14 02 FB | 	rdlong	arg02, objptr
0a1ec     0A 13 02 F6 | 	mov	arg01, arg02
0a1f0     01 12 86 F1 | 	sub	arg01, #1
0a1f4     09 2D 02 F6 | 	mov	local04, arg01
0a1f8     01 2C 66 F0 | 	shl	local04, #1
0a1fc     09 2D 02 F1 | 	add	local04, arg01
0a200     02 2C 66 F0 | 	shl	local04, #2
0a204     03 00 00 FF 
0a208     00 E4 85 F1 | 	sub	objptr, ##1536
0a20c     F2 2C 02 F1 | 	add	local04, objptr
0a210     16 27 02 FB | 	rdlong	local01, local04
0a214     04 2C 06 F1 | 	add	local04, #4
0a218     16 2D 02 FB | 	rdlong	local04, local04
0a21c     01 14 86 F1 | 	sub	arg02, #1
0a220     0A 13 02 F6 | 	mov	arg01, arg02
0a224     01 12 66 F0 | 	shl	arg01, #1
0a228     0A 13 02 F1 | 	add	arg01, arg02
0a22c     02 12 66 F0 | 	shl	arg01, #2
0a230     F2 12 02 F1 | 	add	arg01, objptr
0a234     08 12 06 F1 | 	add	arg01, #8
0a238     09 15 02 FB | 	rdlong	arg02, arg01
0a23c     16 29 02 F6 | 	mov	local02, local04
0a240     0A 2B 02 F6 | 	mov	local03, arg02
0a244                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a244     17 2A 0E F2 | 	cmp	local03, #23 wz
0a248     47 00 00 FF 
0a24c     7C E4 85 F1 | 	sub	objptr, ##36476
0a250     22 FA 05 56 |  if_ne	mov	result1, #34
0a254     58 02 90 5D |  if_ne	jmp	#LR__0895
0a258     13 2F 02 F6 | 	mov	local05, local01
0a25c                 | ' varnum=t1.result.uresult
0a25c                 | ' if lparts(ct).part$<>"to" then return 33
0a25c     37 00 00 FF 
0a260     44 E4 05 F1 | 	add	objptr, ##28228
0a264     F2 26 02 FB | 	rdlong	local01, objptr
0a268     03 26 66 F0 | 	shl	local01, #3
0a26c     02 00 00 FF 
0a270     38 E4 85 F1 | 	sub	objptr, ##1080
0a274     F2 26 02 F1 | 	add	local01, objptr
0a278     13 13 02 FB | 	rdlong	arg01, local01
0a27c     AD 01 00 FF 
0a280     B6 15 06 F6 | 	mov	arg02, ##@LR__5802
0a284     35 00 00 FF 
0a288     0C E4 85 F1 | 	sub	objptr, ##27148
0a28c     20 B7 B1 FD | 	call	#__system___string_cmp
0a290     00 FA 0D F2 | 	cmp	result1, #0 wz
0a294     21 FA 05 56 |  if_ne	mov	result1, #33
0a298     14 02 90 5D |  if_ne	jmp	#LR__0895
0a29c     37 00 00 FF 
0a2a0     44 E4 05 F1 | 	add	objptr, ##28228
0a2a4     F2 2C 02 FB | 	rdlong	local04, objptr
0a2a8     01 2C 06 F1 | 	add	local04, #1
0a2ac     F2 2C 62 FC | 	wrlong	local04, objptr
0a2b0     37 00 00 FF 
0a2b4     44 E4 85 F1 | 	sub	objptr, ##28228
0a2b8     A8 11 B0 FD | 	call	#_expr
0a2bc                 | ' ct+=1
0a2bc                 | ' expr()  										' there is "to" value pushed on the stack
0a2bc                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
0a2bc     37 00 00 FF 
0a2c0     44 E4 05 F1 | 	add	objptr, ##28228
0a2c4     F2 2C 02 FB | 	rdlong	local04, objptr
0a2c8     03 2C 66 F0 | 	shl	local04, #3
0a2cc     02 00 00 FF 
0a2d0     38 E4 85 F1 | 	sub	objptr, ##1080
0a2d4     F2 2C 02 F1 | 	add	local04, objptr
0a2d8     16 13 02 FB | 	rdlong	arg01, local04
0a2dc     AD 01 00 FF 
0a2e0     B9 15 06 F6 | 	mov	arg02, ##@LR__5803
0a2e4     35 00 00 FF 
0a2e8     0C E4 85 F1 | 	sub	objptr, ##27148
0a2ec     C0 B6 B1 FD | 	call	#__system___string_cmp
0a2f0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2f4     3C 00 90 AD |  if_e	jmp	#LR__0892
0a2f8     37 00 00 FF 
0a2fc     44 E4 05 F1 | 	add	objptr, ##28228
0a300     F2 2C 02 FB | 	rdlong	local04, objptr
0a304     03 2C 66 F0 | 	shl	local04, #3
0a308     02 00 00 FF 
0a30c     38 E4 85 F1 | 	sub	objptr, ##1080
0a310     F2 2C 02 F1 | 	add	local04, objptr
0a314     16 13 02 FB | 	rdlong	arg01, local04
0a318     AD 01 00 FF 
0a31c     BE 15 06 F6 | 	mov	arg02, ##@LR__5804
0a320     35 00 00 FF 
0a324     0C E4 85 F1 | 	sub	objptr, ##27148
0a328     84 B6 B1 FD | 	call	#__system___string_cmp
0a32c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a330     24 00 90 5D |  if_ne	jmp	#LR__0893
0a334                 | LR__0892
0a334     37 00 00 FF 
0a338     44 E4 05 F1 | 	add	objptr, ##28228
0a33c     F2 26 02 FB | 	rdlong	local01, objptr
0a340     01 26 06 F1 | 	add	local01, #1
0a344     F2 26 62 FC | 	wrlong	local01, objptr
0a348     37 00 00 FF 
0a34c     44 E4 85 F1 | 	sub	objptr, ##28228
0a350     10 11 B0 FD | 	call	#_expr
0a354     78 00 90 FD | 	jmp	#LR__0894
0a358                 | LR__0893
0a358     4A 00 00 FF 
0a35c     7C E4 05 F1 | 	add	objptr, ##38012
0a360     F2 26 02 FB | 	rdlong	local01, objptr
0a364     13 2D 02 F6 | 	mov	local04, local01
0a368     01 2C 66 F0 | 	shl	local04, #1
0a36c     13 2D 02 F1 | 	add	local04, local01
0a370     02 2C 66 F0 | 	shl	local04, #2
0a374     03 00 00 FF 
0a378     00 E4 85 F1 | 	sub	objptr, ##1536
0a37c     F2 2C 02 F1 | 	add	local04, objptr
0a380     08 2C 06 F1 | 	add	local04, #8
0a384     16 39 68 FC | 	wrlong	#28, local04
0a388     03 00 00 FF 
0a38c     00 E4 05 F1 | 	add	objptr, ##1536
0a390     F2 26 02 FB | 	rdlong	local01, objptr
0a394     13 2D 02 F6 | 	mov	local04, local01
0a398     01 2C 66 F0 | 	shl	local04, #1
0a39c     13 2D 02 F1 | 	add	local04, local01
0a3a0     02 2C 66 F0 | 	shl	local04, #2
0a3a4     03 00 00 FF 
0a3a8     00 E4 85 F1 | 	sub	objptr, ##1536
0a3ac     F2 2C 02 F1 | 	add	local04, objptr
0a3b0     16 03 68 FC | 	wrlong	#1, local04
0a3b4     03 00 00 FF 
0a3b8     00 E4 05 F1 | 	add	objptr, ##1536
0a3bc     F2 26 02 FB | 	rdlong	local01, objptr
0a3c0     01 26 06 F1 | 	add	local01, #1
0a3c4     F2 26 62 FC | 	wrlong	local01, objptr
0a3c8     4A 00 00 FF 
0a3cc     7C E4 85 F1 | 	sub	objptr, ##38012
0a3d0                 | LR__0894
0a3d0     4A 00 00 FF 
0a3d4     7C E4 05 F1 | 	add	objptr, ##38012
0a3d8     F2 26 02 FB | 	rdlong	local01, objptr
0a3dc     13 2D 02 F6 | 	mov	local04, local01
0a3e0     01 2C 66 F0 | 	shl	local04, #1
0a3e4     13 2D 02 F1 | 	add	local04, local01
0a3e8     02 2C 66 F0 | 	shl	local04, #2
0a3ec     03 00 00 FF 
0a3f0     00 E4 85 F1 | 	sub	objptr, ##1536
0a3f4     F2 2C 02 F1 | 	add	local04, objptr
0a3f8     08 2C 06 F1 | 	add	local04, #8
0a3fc     16 39 68 FC | 	wrlong	#28, local04
0a400     03 00 00 FF 
0a404     00 E4 05 F1 | 	add	objptr, ##1536
0a408     F2 26 02 FB | 	rdlong	local01, objptr
0a40c     13 2D 02 F6 | 	mov	local04, local01
0a410     01 2C 66 F0 | 	shl	local04, #1
0a414     13 2D 02 F1 | 	add	local04, local01
0a418     02 2C 66 F0 | 	shl	local04, #2
0a41c     03 00 00 FF 
0a420     00 E4 85 F1 | 	sub	objptr, ##1536
0a424     F2 2C 02 F1 | 	add	local04, objptr
0a428     16 2F 62 FC | 	wrlong	local05, local04
0a42c     03 00 00 FF 
0a430     00 E4 05 F1 | 	add	objptr, ##1536
0a434     F2 2E 02 FB | 	rdlong	local05, objptr
0a438     01 2E 06 F1 | 	add	local05, #1
0a43c     F2 2E 62 FC | 	wrlong	local05, objptr
0a440     17 27 02 F6 | 	mov	local01, local05
0a444     01 26 66 F0 | 	shl	local01, #1
0a448     17 27 02 F1 | 	add	local01, local05
0a44c     02 26 66 F0 | 	shl	local01, #2
0a450     03 00 00 FF 
0a454     00 E4 85 F1 | 	sub	objptr, ##1536
0a458     F2 26 02 F1 | 	add	local01, objptr
0a45c     08 26 06 F1 | 	add	local01, #8
0a460     13 95 68 FC | 	wrlong	#74, local01
0a464     03 00 00 FF 
0a468     00 E4 05 F1 | 	add	objptr, ##1536
0a46c     F2 2E 02 FB | 	rdlong	local05, objptr
0a470     17 27 02 F6 | 	mov	local01, local05
0a474     01 26 66 F0 | 	shl	local01, #1
0a478     17 27 02 F1 | 	add	local01, local05
0a47c     02 26 66 F0 | 	shl	local01, #2
0a480     03 00 00 FF 
0a484     00 E4 85 F1 | 	sub	objptr, ##1536
0a488     F2 26 02 F1 | 	add	local01, objptr
0a48c     13 01 68 FC | 	wrlong	#0, local01
0a490     03 00 00 FF 
0a494     00 E4 05 F1 | 	add	objptr, ##1536
0a498     F2 2E 02 FB | 	rdlong	local05, objptr
0a49c     01 2E 06 F1 | 	add	local05, #1
0a4a0     F2 2E 62 FC | 	wrlong	local05, objptr
0a4a4     4A 00 00 FF 
0a4a8     7C E4 85 F1 | 	sub	objptr, ##38012
0a4ac                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0a4ac                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0a4ac                 | ' return 0
0a4ac     00 FA 05 F6 | 	mov	result1, #0
0a4b0                 | LR__0895
0a4b0     A7 F0 03 F6 | 	mov	ptra, fp
0a4b4     B2 00 A0 FD | 	call	#popregs_
0a4b8                 | _compile_for_ret
0a4b8     2D 00 64 FD | 	ret
0a4bc                 | 
0a4bc                 | ' 
0a4bc                 | ' '----- compile 'next' command. 
0a4bc                 | ' 
0a4bc                 | ' function compile_next() as ulong
0a4bc                 | _compile_next
0a4bc     04 4A 05 F6 | 	mov	COUNT_, #4
0a4c0     A8 00 A0 FD | 	call	#pushregs_
0a4c4     37 00 00 FF 
0a4c8     44 E4 05 F1 | 	add	objptr, ##28228
0a4cc     F2 14 02 FB | 	rdlong	arg02, objptr
0a4d0     03 14 66 F0 | 	shl	arg02, #3
0a4d4     02 00 00 FF 
0a4d8     38 E4 85 F1 | 	sub	objptr, ##1080
0a4dc     F2 14 02 F1 | 	add	arg02, objptr
0a4e0     0A 27 02 FB | 	rdlong	local01, arg02
0a4e4                 | ' 
0a4e4                 | ' varname$=lparts(ct).part$ 
0a4e4                 | ' if varnum=0 then return 35
0a4e4     04 E4 85 F1 | 	sub	objptr, #4
0a4e8     F2 14 0A FB | 	rdlong	arg02, objptr wz
0a4ec     35 00 00 FF 
0a4f0     08 E4 85 F1 | 	sub	objptr, ##27144
0a4f4     23 FA 05 A6 |  if_e	mov	result1, #35
0a4f8     4C 01 90 AD |  if_e	jmp	#LR__0902
0a4fc     01 28 66 F6 | 	neg	local02, #1
0a500                 | ' j=-1
0a500                 | ' for i=0 to varnum-1
0a500     00 2A 06 F6 | 	mov	local03, #0
0a504     35 00 00 FF 
0a508     08 E4 05 F1 | 	add	objptr, ##27144
0a50c     F2 2C 02 FB | 	rdlong	local04, objptr
0a510     35 00 00 FF 
0a514     08 E4 85 F1 | 	sub	objptr, ##27144
0a518                 | LR__0900
0a518     16 2B 12 F2 | 	cmp	local03, local04 wc
0a51c     38 00 90 3D |  if_ae	jmp	#LR__0901
0a520                 | '   if variables(i).name=varname$ then j=i : exit
0a520     15 15 02 F6 | 	mov	arg02, local03
0a524     04 14 66 F0 | 	shl	arg02, #4
0a528     14 00 00 FF 
0a52c     F8 E5 05 F1 | 	add	objptr, ##10744
0a530     F2 14 02 F1 | 	add	arg02, objptr
0a534     0A 13 02 FB | 	rdlong	arg01, arg02
0a538     13 15 02 F6 | 	mov	arg02, local01
0a53c     14 00 00 FF 
0a540     F8 E5 85 F1 | 	sub	objptr, ##10744
0a544     68 B4 B1 FD | 	call	#__system___string_cmp
0a548     00 FA 0D F2 | 	cmp	result1, #0 wz
0a54c     15 29 02 A6 |  if_e	mov	local02, local03
0a550     01 2A 06 51 |  if_ne	add	local03, #1
0a554     C0 FF 9F 5D |  if_ne	jmp	#LR__0900
0a558                 | LR__0901
0a558                 | ' if j=-1 then return 35
0a558     FF FF 7F FF 
0a55c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0a560     23 FA 05 A6 |  if_e	mov	result1, #35
0a564     E0 00 90 AD |  if_e	jmp	#LR__0902
0a568     4A 00 00 FF 
0a56c     7C E4 05 F1 | 	add	objptr, ##38012
0a570     F2 2C 02 FB | 	rdlong	local04, objptr
0a574     16 2B 02 F6 | 	mov	local03, local04
0a578     01 2A 66 F0 | 	shl	local03, #1
0a57c     16 2B 02 F1 | 	add	local03, local04
0a580     02 2A 66 F0 | 	shl	local03, #2
0a584     03 00 00 FF 
0a588     00 E4 85 F1 | 	sub	objptr, ##1536
0a58c     F2 2A 02 F1 | 	add	local03, objptr
0a590     08 2A 06 F1 | 	add	local03, #8
0a594     15 39 68 FC | 	wrlong	#28, local03
0a598     03 00 00 FF 
0a59c     00 E4 05 F1 | 	add	objptr, ##1536
0a5a0     F2 2C 02 FB | 	rdlong	local04, objptr
0a5a4     16 2B 02 F6 | 	mov	local03, local04
0a5a8     01 2A 66 F0 | 	shl	local03, #1
0a5ac     16 2B 02 F1 | 	add	local03, local04
0a5b0     02 2A 66 F0 | 	shl	local03, #2
0a5b4     03 00 00 FF 
0a5b8     00 E4 85 F1 | 	sub	objptr, ##1536
0a5bc     F2 2A 02 F1 | 	add	local03, objptr
0a5c0     15 29 62 FC | 	wrlong	local02, local03
0a5c4     03 00 00 FF 
0a5c8     00 E4 05 F1 | 	add	objptr, ##1536
0a5cc     F2 2C 02 FB | 	rdlong	local04, objptr
0a5d0     01 2C 06 F1 | 	add	local04, #1
0a5d4     F2 2C 62 FC | 	wrlong	local04, objptr
0a5d8     16 2B 02 F6 | 	mov	local03, local04
0a5dc     01 2A 66 F0 | 	shl	local03, #1
0a5e0     16 2B 02 F1 | 	add	local03, local04
0a5e4     02 2A 66 F0 | 	shl	local03, #2
0a5e8     03 00 00 FF 
0a5ec     00 E4 85 F1 | 	sub	objptr, ##1536
0a5f0     F2 2A 02 F1 | 	add	local03, objptr
0a5f4     08 2A 06 F1 | 	add	local03, #8
0a5f8     15 97 68 FC | 	wrlong	#75, local03
0a5fc     03 00 00 FF 
0a600     00 E4 05 F1 | 	add	objptr, ##1536
0a604     F2 2C 02 FB | 	rdlong	local04, objptr
0a608     16 2B 02 F6 | 	mov	local03, local04
0a60c     01 2A 66 F0 | 	shl	local03, #1
0a610     16 2B 02 F1 | 	add	local03, local04
0a614     02 2A 66 F0 | 	shl	local03, #2
0a618     03 00 00 FF 
0a61c     00 E4 85 F1 | 	sub	objptr, ##1536
0a620     F2 2A 02 F1 | 	add	local03, objptr
0a624     15 01 68 FC | 	wrlong	#0, local03
0a628     03 00 00 FF 
0a62c     00 E4 05 F1 | 	add	objptr, ##1536
0a630     F2 2C 02 FB | 	rdlong	local04, objptr
0a634     01 2C 06 F1 | 	add	local04, #1
0a638     F2 2C 62 FC | 	wrlong	local04, objptr
0a63c     4A 00 00 FF 
0a640     7C E4 85 F1 | 	sub	objptr, ##38012
0a644                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0a644                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0a644                 | ' return 0
0a644     00 FA 05 F6 | 	mov	result1, #0
0a648                 | LR__0902
0a648     A7 F0 03 F6 | 	mov	ptra, fp
0a64c     B2 00 A0 FD | 	call	#popregs_
0a650                 | _compile_next_ret
0a650     2D 00 64 FD | 	ret
0a654                 | 
0a654                 | ' 
0a654                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0a654                 | ' 
0a654                 | ' function compile_gosub() as ulong
0a654                 | _compile_gosub
0a654     02 4A 05 F6 | 	mov	COUNT_, #2
0a658     A8 00 A0 FD | 	call	#pushregs_
0a65c     4A 00 00 FF 
0a660     7C E4 05 F1 | 	add	objptr, ##38012
0a664     F2 26 02 FB | 	rdlong	local01, objptr
0a668     13 29 02 F6 | 	mov	local02, local01
0a66c     01 28 66 F0 | 	shl	local02, #1
0a670     13 29 02 F1 | 	add	local02, local01
0a674     02 28 66 F0 | 	shl	local02, #2
0a678     03 00 00 FF 
0a67c     00 E4 85 F1 | 	sub	objptr, ##1536
0a680     F2 28 02 F1 | 	add	local02, objptr
0a684     08 28 06 F1 | 	add	local02, #8
0a688     14 53 69 FC | 	wrlong	#169, local02
0a68c     03 00 00 FF 
0a690     00 E4 05 F1 | 	add	objptr, ##1536
0a694     F2 28 02 FB | 	rdlong	local02, objptr
0a698     01 28 06 F1 | 	add	local02, #1
0a69c     F2 28 62 FC | 	wrlong	local02, objptr
0a6a0     4A 00 00 FF 
0a6a4     7C E4 85 F1 | 	sub	objptr, ##38012
0a6a8     0C 00 B0 FD | 	call	#_compile_goto
0a6ac                 | ' compiledline(lineptr).result_type=token_gosub
0a6ac                 | ' lineptr+=1
0a6ac                 | ' err=compile_goto()
0a6ac                 | ' return err
0a6ac     A7 F0 03 F6 | 	mov	ptra, fp
0a6b0     B2 00 A0 FD | 	call	#popregs_
0a6b4                 | _compile_gosub_ret
0a6b4     2D 00 64 FD | 	ret
0a6b8                 | 
0a6b8                 | ' 
0a6b8                 | ' '----- compile 'goto' 
0a6b8                 | ' 
0a6b8                 | ' function compile_goto() as ulong
0a6b8                 | _compile_goto
0a6b8     03 4A 05 F6 | 	mov	COUNT_, #3
0a6bc     A8 00 A0 FD | 	call	#pushregs_
0a6c0     34 F0 07 F1 | 	add	ptra, #52
0a6c4                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0a6c4     37 00 00 FF 
0a6c8     44 E4 05 F1 | 	add	objptr, ##28228
0a6cc     F2 16 02 FB | 	rdlong	arg03, objptr
0a6d0     03 16 66 F0 | 	shl	arg03, #3
0a6d4     02 00 00 FF 
0a6d8     38 E4 85 F1 | 	sub	objptr, ##1080
0a6dc     F2 16 02 F1 | 	add	arg03, objptr
0a6e0     04 16 06 F1 | 	add	arg03, #4
0a6e4     0B 17 02 FB | 	rdlong	arg03, arg03
0a6e8     01 00 00 FF 
0a6ec     00 16 0E F2 | 	cmp	arg03, ##512 wz
0a6f0     35 00 00 FF 
0a6f4     0C E4 85 F1 | 	sub	objptr, ##27148
0a6f8     CC 02 90 5D |  if_ne	jmp	#LR__0915
0a6fc     37 00 00 FF 
0a700     44 E4 05 F1 | 	add	objptr, ##28228
0a704     F2 16 02 FB | 	rdlong	arg03, objptr
0a708     01 16 06 F1 | 	add	arg03, #1
0a70c     03 16 66 F0 | 	shl	arg03, #3
0a710     02 00 00 FF 
0a714     38 E4 85 F1 | 	sub	objptr, ##1080
0a718     F2 16 02 F1 | 	add	arg03, objptr
0a71c     04 16 06 F1 | 	add	arg03, #4
0a720     0B 17 02 FB | 	rdlong	arg03, arg03
0a724     FE 17 0E F2 | 	cmp	arg03, #510 wz
0a728     35 00 00 FF 
0a72c     0C E4 85 F1 | 	sub	objptr, ##27148
0a730     94 02 90 5D |  if_ne	jmp	#LR__0915
0a734     37 00 00 FF 
0a738     44 E4 05 F1 | 	add	objptr, ##28228
0a73c     F2 16 02 FB | 	rdlong	arg03, objptr
0a740     03 16 66 F0 | 	shl	arg03, #3
0a744     02 00 00 FF 
0a748     38 E4 85 F1 | 	sub	objptr, ##1080
0a74c     F2 16 02 F1 | 	add	arg03, objptr
0a750     0B 13 02 FB | 	rdlong	arg01, arg03
0a754     00 14 06 F6 | 	mov	arg02, #0
0a758     35 00 00 FF 
0a75c     0C E4 85 F1 | 	sub	objptr, ##27148
0a760     14 E7 B1 FD | 	call	#__system____builtin_atoi
0a764     04 4E 05 F1 | 	add	fp, #4
0a768     A7 FA 61 FC | 	wrlong	result1, fp
0a76c     4A 00 00 FF 
0a770     7C E4 05 F1 | 	add	objptr, ##38012
0a774     F2 26 02 FB | 	rdlong	local01, objptr
0a778     13 29 02 F6 | 	mov	local02, local01
0a77c     01 28 66 F0 | 	shl	local02, #1
0a780     13 29 02 F1 | 	add	local02, local01
0a784     02 28 66 F0 | 	shl	local02, #2
0a788     03 00 00 FF 
0a78c     00 E4 85 F1 | 	sub	objptr, ##1536
0a790     F2 28 02 F1 | 	add	local02, objptr
0a794     08 28 06 F1 | 	add	local02, #8
0a798     14 9D 68 FC | 	wrlong	#78, local02
0a79c     03 00 00 FF 
0a7a0     0C E4 05 F1 | 	add	objptr, ##1548
0a7a4     F2 2A 02 FB | 	rdlong	local03, objptr
0a7a8     4A 00 00 FF 
0a7ac     88 E4 85 F1 | 	sub	objptr, ##38024
0a7b0     04 4E 05 F1 | 	add	fp, #4
0a7b4     A7 2A 62 FC | 	wrlong	local03, fp
0a7b8     08 4E 85 F1 | 	sub	fp, #8
0a7bc                 | '   gotoline=val%(lparts(ct).part$) 
0a7bc                 | '   compiledline(lineptr).result_type=token_fast_goto
0a7bc                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0a7bc                 | '   do
0a7bc                 | LR__0910
0a7bc     10 4E 05 F1 | 	add	fp, #16
0a7c0     A7 12 02 F6 | 	mov	arg01, fp
0a7c4     08 4E 85 F1 | 	sub	fp, #8
0a7c8     A7 14 02 FB | 	rdlong	arg02, fp
0a7cc     08 4E 85 F1 | 	sub	fp, #8
0a7d0     18 16 06 F6 | 	mov	arg03, #24
0a7d4     0B 00 00 FF 
0a7d8     CC E4 05 F1 | 	add	objptr, ##5836
0a7dc     20 A5 B1 FD | 	call	#_psram_spin2_read1
0a7e0     0B 00 00 FF 
0a7e4     CC E4 85 F1 | 	sub	objptr, ##5836
0a7e8                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0a7e8                 | '     if gotoheader(0)<>$FFFFFFFF then
0a7e8     10 4E 05 F1 | 	add	fp, #16
0a7ec     A7 2A 02 FB | 	rdlong	local03, fp
0a7f0     10 4E 85 F1 | 	sub	fp, #16
0a7f4     FF FF 7F FF 
0a7f8     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0a7fc     24 00 90 AD |  if_e	jmp	#LR__0911
0a800     08 4E 05 F1 | 	add	fp, #8
0a804     A7 2A 02 FB | 	rdlong	local03, fp
0a808     04 4E 05 F1 | 	add	fp, #4
0a80c     A7 2A 62 FC | 	wrlong	local03, fp
0a810     18 4E 05 F1 | 	add	fp, #24
0a814     A7 2A 02 FB | 	rdlong	local03, fp
0a818     1C 4E 85 F1 | 	sub	fp, #28
0a81c     A7 2A 62 FC | 	wrlong	local03, fp
0a820     08 4E 85 F1 | 	sub	fp, #8
0a824                 | LR__0911
0a824     24 4E 05 F1 | 	add	fp, #36
0a828     A7 2A 02 FB | 	rdlong	local03, fp
0a82c     24 4E 85 F1 | 	sub	fp, #36
0a830     FF FF 3F FF 
0a834     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0a838     10 4E 05 51 |  if_ne	add	fp, #16
0a83c     A7 26 02 5B |  if_ne	rdlong	local01, fp
0a840     10 4E 85 51 |  if_ne	sub	fp, #16
0a844     FF FF 7F 5F 
0a848     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a84c     1C 00 90 AD |  if_e	jmp	#LR__0912
0a850     10 4E 05 F1 | 	add	fp, #16
0a854     A7 2A 02 FB | 	rdlong	local03, fp
0a858     0C 4E 85 F1 | 	sub	fp, #12
0a85c     A7 28 02 FB | 	rdlong	local02, fp
0a860     04 4E 85 F1 | 	sub	fp, #4
0a864     14 2B 0A F2 | 	cmp	local03, local02 wz
0a868     50 FF 9F 5D |  if_ne	jmp	#LR__0910
0a86c                 | LR__0912
0a86c                 | '   if gotoheader(0)=gotoline then
0a86c     10 4E 05 F1 | 	add	fp, #16
0a870     A7 2A 02 FB | 	rdlong	local03, fp
0a874     0C 4E 85 F1 | 	sub	fp, #12
0a878     A7 26 02 FB | 	rdlong	local01, fp
0a87c     04 4E 85 F1 | 	sub	fp, #4
0a880     13 2B 0A F2 | 	cmp	local03, local01 wz
0a884     7C 00 90 5D |  if_ne	jmp	#LR__0913
0a888     4A 00 00 FF 
0a88c     7C E4 05 F1 | 	add	objptr, ##38012
0a890     F2 26 02 FB | 	rdlong	local01, objptr
0a894     13 29 02 F6 | 	mov	local02, local01
0a898     01 28 66 F0 | 	shl	local02, #1
0a89c     13 29 02 F1 | 	add	local02, local01
0a8a0     02 28 66 F0 | 	shl	local02, #2
0a8a4     03 00 00 FF 
0a8a8     00 E4 85 F1 | 	sub	objptr, ##1536
0a8ac     F2 28 02 F1 | 	add	local02, objptr
0a8b0     0C 4E 05 F1 | 	add	fp, #12
0a8b4     A7 2A 02 FB | 	rdlong	local03, fp
0a8b8     14 2B 62 FC | 	wrlong	local03, local02
0a8bc     03 00 00 FF 
0a8c0     00 E4 05 F1 | 	add	objptr, ##1536
0a8c4     F2 26 02 FB | 	rdlong	local01, objptr
0a8c8     13 29 02 F6 | 	mov	local02, local01
0a8cc     01 28 66 F0 | 	shl	local02, #1
0a8d0     13 29 02 F1 | 	add	local02, local01
0a8d4     02 28 66 F0 | 	shl	local02, #2
0a8d8     03 00 00 FF 
0a8dc     00 E4 85 F1 | 	sub	objptr, ##1536
0a8e0     F2 28 02 F1 | 	add	local02, objptr
0a8e4     08 4E 85 F1 | 	sub	fp, #8
0a8e8     A7 2A 02 FB | 	rdlong	local03, fp
0a8ec     04 4E 85 F1 | 	sub	fp, #4
0a8f0     04 28 06 F1 | 	add	local02, #4
0a8f4     14 2B 62 FC | 	wrlong	local03, local02
0a8f8     47 00 00 FF 
0a8fc     7C E4 85 F1 | 	sub	objptr, ##36476
0a900     A4 00 90 FD | 	jmp	#LR__0914
0a904                 | LR__0913
0a904     4A 00 00 FF 
0a908     7C E4 05 F1 | 	add	objptr, ##38012
0a90c     F2 26 02 FB | 	rdlong	local01, objptr
0a910     13 29 02 F6 | 	mov	local02, local01
0a914     01 28 66 F0 | 	shl	local02, #1
0a918     13 29 02 F1 | 	add	local02, local01
0a91c     02 28 66 F0 | 	shl	local02, #2
0a920     03 00 00 FF 
0a924     00 E4 85 F1 | 	sub	objptr, ##1536
0a928     F2 28 02 F1 | 	add	local02, objptr
0a92c     00 00 C0 FF 
0a930     14 01 68 FC | 	wrlong	##-2147483648, local02
0a934     03 00 00 FF 
0a938     00 E4 05 F1 | 	add	objptr, ##1536
0a93c     F2 26 02 FB | 	rdlong	local01, objptr
0a940     13 29 02 F6 | 	mov	local02, local01
0a944     01 28 66 F0 | 	shl	local02, #1
0a948     13 29 02 F1 | 	add	local02, local01
0a94c     02 28 66 F0 | 	shl	local02, #2
0a950     03 00 00 FF 
0a954     00 E4 85 F1 | 	sub	objptr, ##1536
0a958     F2 28 02 F1 | 	add	local02, objptr
0a95c     04 4E 05 F1 | 	add	fp, #4
0a960     A7 2A 02 FB | 	rdlong	local03, fp
0a964     04 4E 85 F1 | 	sub	fp, #4
0a968     04 28 06 F1 | 	add	local02, #4
0a96c     14 2B 62 FC | 	wrlong	local03, local02
0a970     03 00 00 FF 
0a974     00 E4 05 F1 | 	add	objptr, ##1536
0a978     F2 26 02 FB | 	rdlong	local01, objptr
0a97c     13 29 02 F6 | 	mov	local02, local01
0a980     01 28 66 F0 | 	shl	local02, #1
0a984     13 29 02 F1 | 	add	local02, local01
0a988     02 28 66 F0 | 	shl	local02, #2
0a98c     03 00 00 FF 
0a990     00 E4 85 F1 | 	sub	objptr, ##1536
0a994     F2 28 02 F1 | 	add	local02, objptr
0a998     08 28 06 F1 | 	add	local02, #8
0a99c     14 A7 68 FC | 	wrlong	#83, local02
0a9a0     47 00 00 FF 
0a9a4     7C E4 85 F1 | 	sub	objptr, ##36476
0a9a8                 | LR__0914
0a9a8     4A 00 00 FF 
0a9ac     7C E4 05 F1 | 	add	objptr, ##38012
0a9b0     F2 2A 02 FB | 	rdlong	local03, objptr
0a9b4     01 2A 06 F1 | 	add	local03, #1
0a9b8     F2 2A 62 FC | 	wrlong	local03, objptr
0a9bc     4A 00 00 FF 
0a9c0     7C E4 85 F1 | 	sub	objptr, ##38012
0a9c4     D0 00 90 FD | 	jmp	#LR__0916
0a9c8                 | LR__0915
0a9c8     98 0A B0 FD | 	call	#_expr
0a9cc     30 4E 05 F1 | 	add	fp, #48
0a9d0     A7 9E 68 FC | 	wrlong	#79, fp
0a9d4     08 4E 85 F1 | 	sub	fp, #8
0a9d8     A7 00 68 FC | 	wrlong	#0, fp
0a9dc     04 4E 05 F1 | 	add	fp, #4
0a9e0     A7 2A 02 FB | 	rdlong	local03, fp
0a9e4     04 4E 05 F1 | 	add	fp, #4
0a9e8     A7 26 02 FB | 	rdlong	local01, fp
0a9ec     30 4E 85 F1 | 	sub	fp, #48
0a9f0     4A 00 00 FF 
0a9f4     7C E4 05 F1 | 	add	objptr, ##38012
0a9f8     F2 28 02 FB | 	rdlong	local02, objptr
0a9fc     14 17 02 F6 | 	mov	arg03, local02
0aa00     01 16 66 F0 | 	shl	arg03, #1
0aa04     14 17 02 F1 | 	add	arg03, local02
0aa08     02 16 66 F0 | 	shl	arg03, #2
0aa0c     03 00 00 FF 
0aa10     00 E4 85 F1 | 	sub	objptr, ##1536
0aa14     F2 16 02 F1 | 	add	arg03, objptr
0aa18     0B 01 68 FC | 	wrlong	#0, arg03
0aa1c     03 00 00 FF 
0aa20     00 E4 05 F1 | 	add	objptr, ##1536
0aa24     F2 28 02 FB | 	rdlong	local02, objptr
0aa28     14 17 02 F6 | 	mov	arg03, local02
0aa2c     01 16 66 F0 | 	shl	arg03, #1
0aa30     14 17 02 F1 | 	add	arg03, local02
0aa34     02 16 66 F0 | 	shl	arg03, #2
0aa38     03 00 00 FF 
0aa3c     00 E4 85 F1 | 	sub	objptr, ##1536
0aa40     F2 16 02 F1 | 	add	arg03, objptr
0aa44     04 16 06 F1 | 	add	arg03, #4
0aa48     0B 2B 62 FC | 	wrlong	local03, arg03
0aa4c     03 00 00 FF 
0aa50     00 E4 05 F1 | 	add	objptr, ##1536
0aa54     F2 2A 02 FB | 	rdlong	local03, objptr
0aa58     15 29 02 F6 | 	mov	local02, local03
0aa5c     01 28 66 F0 | 	shl	local02, #1
0aa60     15 29 02 F1 | 	add	local02, local03
0aa64     02 28 66 F0 | 	shl	local02, #2
0aa68     03 00 00 FF 
0aa6c     00 E4 85 F1 | 	sub	objptr, ##1536
0aa70     F2 28 02 F1 | 	add	local02, objptr
0aa74     08 28 06 F1 | 	add	local02, #8
0aa78     14 27 62 FC | 	wrlong	local01, local02
0aa7c     03 00 00 FF 
0aa80     00 E4 05 F1 | 	add	objptr, ##1536
0aa84     F2 2A 02 FB | 	rdlong	local03, objptr
0aa88     01 2A 06 F1 | 	add	local03, #1
0aa8c     F2 2A 62 FC | 	wrlong	local03, objptr
0aa90     4A 00 00 FF 
0aa94     7C E4 85 F1 | 	sub	objptr, ##38012
0aa98                 | LR__0916
0aa98                 | ' return 0
0aa98     00 FA 05 F6 | 	mov	result1, #0
0aa9c     A7 F0 03 F6 | 	mov	ptra, fp
0aaa0     B2 00 A0 FD | 	call	#popregs_
0aaa4                 | _compile_goto_ret
0aaa4     2D 00 64 FD | 	ret
0aaa8                 | 
0aaa8                 | ' 
0aaa8                 | ' '----- compile 'on' (on..goto, on..gosub) 
0aaa8                 | ' 
0aaa8                 | ' function compile_on() as ulong
0aaa8                 | _compile_on
0aaa8     04 4A 05 F6 | 	mov	COUNT_, #4
0aaac     A8 00 A0 FD | 	call	#pushregs_
0aab0     B0 09 B0 FD | 	call	#_expr
0aab4     00 26 06 F6 | 	mov	local01, #0
0aab8     4A 00 00 FF 
0aabc     7C E4 05 F1 | 	add	objptr, ##38012
0aac0     F2 14 02 FB | 	rdlong	arg02, objptr
0aac4     0A 13 02 F6 | 	mov	arg01, arg02
0aac8     01 12 66 F0 | 	shl	arg01, #1
0aacc     0A 13 02 F1 | 	add	arg01, arg02
0aad0     02 12 66 F0 | 	shl	arg01, #2
0aad4     03 00 00 FF 
0aad8     00 E4 85 F1 | 	sub	objptr, ##1536
0aadc     F2 12 02 F1 | 	add	arg01, objptr
0aae0     08 12 06 F1 | 	add	arg01, #8
0aae4     09 83 69 FC | 	wrlong	#193, arg01
0aae8     03 00 00 FF 
0aaec     00 E4 05 F1 | 	add	objptr, ##1536
0aaf0     F2 14 02 FB | 	rdlong	arg02, objptr
0aaf4     0A 29 02 F6 | 	mov	local02, arg02
0aaf8     01 14 06 F1 | 	add	arg02, #1
0aafc     F2 14 62 FC | 	wrlong	arg02, objptr
0ab00                 | ' expr()
0ab00                 | ' 'print lparts(ct).part$ 'ok
0ab00                 | ' numpar=0
0ab00                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0ab00                 | ' if lparts(ct).part$="goto" then
0ab00     13 00 00 FF 
0ab04     38 E4 85 F1 | 	sub	objptr, ##9784
0ab08     F2 14 02 FB | 	rdlong	arg02, objptr
0ab0c     03 14 66 F0 | 	shl	arg02, #3
0ab10     02 00 00 FF 
0ab14     38 E4 85 F1 | 	sub	objptr, ##1080
0ab18     F2 14 02 F1 | 	add	arg02, objptr
0ab1c     0A 13 02 FB | 	rdlong	arg01, arg02
0ab20     AD 01 00 FF 
0ab24     C1 15 06 F6 | 	mov	arg02, ##@LR__5805
0ab28     35 00 00 FF 
0ab2c     0C E4 85 F1 | 	sub	objptr, ##27148
0ab30     7C AE B1 FD | 	call	#__system___string_cmp
0ab34     00 FA 0D F2 | 	cmp	result1, #0 wz
0ab38     14 02 90 5D |  if_ne	jmp	#LR__0925
0ab3c     37 00 00 FF 
0ab40     44 E4 05 F1 | 	add	objptr, ##28228
0ab44     F2 2A 02 FB | 	rdlong	local03, objptr
0ab48     37 00 00 FF 
0ab4c     44 E4 85 F1 | 	sub	objptr, ##28228
0ab50     01 2A 06 F1 | 	add	local03, #1
0ab54                 | '   i=ct+1
0ab54                 | '   do
0ab54                 | LR__0920
0ab54                 | '     if lparts(i).token=token_decimal then
0ab54     15 FB 01 F6 | 	mov	result1, local03
0ab58     03 FA 65 F0 | 	shl	result1, #3
0ab5c     35 00 00 FF 
0ab60     0C E4 05 F1 | 	add	objptr, ##27148
0ab64     F2 FA 01 F1 | 	add	result1, objptr
0ab68     04 FA 05 F1 | 	add	result1, #4
0ab6c     FD FA 01 FB | 	rdlong	result1, result1
0ab70     01 00 00 FF 
0ab74     00 FA 0D F2 | 	cmp	result1, ##512 wz
0ab78     35 00 00 FF 
0ab7c     0C E4 85 F1 | 	sub	objptr, ##27148
0ab80     DC 00 90 5D |  if_ne	jmp	#LR__0921
0ab84     4A 00 00 FF 
0ab88     7C E4 05 F1 | 	add	objptr, ##38012
0ab8c     F2 FA 01 FB | 	rdlong	result1, objptr
0ab90     FD 14 02 F6 | 	mov	arg02, result1
0ab94     01 14 66 F0 | 	shl	arg02, #1
0ab98     FD 14 02 F1 | 	add	arg02, result1
0ab9c     02 14 66 F0 | 	shl	arg02, #2
0aba0     03 00 00 FF 
0aba4     00 E4 85 F1 | 	sub	objptr, ##1536
0aba8     F2 14 02 F1 | 	add	arg02, objptr
0abac     00 00 C0 FF 
0abb0     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0abb4     03 00 00 FF 
0abb8     00 E4 05 F1 | 	add	objptr, ##1536
0abbc     F2 14 02 FB | 	rdlong	arg02, objptr
0abc0     0A 2D 02 F6 | 	mov	local04, arg02
0abc4     01 2C 66 F0 | 	shl	local04, #1
0abc8     0A 2D 02 F1 | 	add	local04, arg02
0abcc     02 2C 66 F0 | 	shl	local04, #2
0abd0     03 00 00 FF 
0abd4     00 E4 85 F1 | 	sub	objptr, ##1536
0abd8     F2 2C 02 F1 | 	add	local04, objptr
0abdc     15 15 02 F6 | 	mov	arg02, local03
0abe0     03 14 66 F0 | 	shl	arg02, #3
0abe4     12 00 00 FF 
0abe8     70 E4 85 F1 | 	sub	objptr, ##9328
0abec     F2 14 02 F1 | 	add	arg02, objptr
0abf0     0A 13 02 FB | 	rdlong	arg01, arg02
0abf4     00 14 06 F6 | 	mov	arg02, #0
0abf8     35 00 00 FF 
0abfc     0C E4 85 F1 | 	sub	objptr, ##27148
0ac00     74 E2 B1 FD | 	call	#__system____builtin_atoi
0ac04     04 2C 06 F1 | 	add	local04, #4
0ac08     16 FB 61 FC | 	wrlong	result1, local04
0ac0c     4A 00 00 FF 
0ac10     7C E4 05 F1 | 	add	objptr, ##38012
0ac14     F2 14 02 FB | 	rdlong	arg02, objptr
0ac18     0A 2D 02 F6 | 	mov	local04, arg02
0ac1c     01 2C 66 F0 | 	shl	local04, #1
0ac20     0A 2D 02 F1 | 	add	local04, arg02
0ac24     02 2C 66 F0 | 	shl	local04, #2
0ac28     03 00 00 FF 
0ac2c     00 E4 85 F1 | 	sub	objptr, ##1536
0ac30     F2 2C 02 F1 | 	add	local04, objptr
0ac34     08 2C 06 F1 | 	add	local04, #8
0ac38     16 A7 68 FC | 	wrlong	#83, local04
0ac3c     03 00 00 FF 
0ac40     00 E4 05 F1 | 	add	objptr, ##1536
0ac44     F2 2C 02 FB | 	rdlong	local04, objptr
0ac48     01 2C 06 F1 | 	add	local04, #1
0ac4c     F2 2C 62 FC | 	wrlong	local04, objptr
0ac50     4A 00 00 FF 
0ac54     7C E4 85 F1 | 	sub	objptr, ##38012
0ac58     01 26 06 F1 | 	add	local01, #1
0ac5c     08 00 90 FD | 	jmp	#LR__0922
0ac60                 | LR__0921
0ac60                 | '       return 17
0ac60     11 FA 05 F6 | 	mov	result1, #17
0ac64     5C 04 90 FD | 	jmp	#LR__0935
0ac68                 | LR__0922
0ac68     01 2A 06 F1 | 	add	local03, #1
0ac6c                 | '     i+=1
0ac6c                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0ac6c     15 2D 02 F6 | 	mov	local04, local03
0ac70     03 2C 66 F0 | 	shl	local04, #3
0ac74     35 00 00 FF 
0ac78     0C E4 05 F1 | 	add	objptr, ##27148
0ac7c     F2 2C 02 F1 | 	add	local04, objptr
0ac80     04 2C 06 F1 | 	add	local04, #4
0ac84     16 2D 02 FB | 	rdlong	local04, local04
0ac88     11 2C 0E F2 | 	cmp	local04, #17 wz
0ac8c     35 00 00 FF 
0ac90     0C E4 85 F1 | 	sub	objptr, ##27148
0ac94     30 00 90 AD |  if_e	jmp	#LR__0923
0ac98     15 2D 02 F6 | 	mov	local04, local03
0ac9c     03 2C 66 F0 | 	shl	local04, #3
0aca0     35 00 00 FF 
0aca4     0C E4 05 F1 | 	add	objptr, ##27148
0aca8     F2 2C 02 F1 | 	add	local04, objptr
0acac     04 2C 06 F1 | 	add	local04, #4
0acb0     16 2D 02 FB | 	rdlong	local04, local04
0acb4     FE 2D 0E F2 | 	cmp	local04, #510 wz
0acb8     35 00 00 FF 
0acbc     0C E4 85 F1 | 	sub	objptr, ##27148
0acc0     15 FA 05 56 |  if_ne	mov	result1, #21
0acc4     FC 03 90 5D |  if_ne	jmp	#LR__0935
0acc8                 | LR__0923
0acc8                 | '     if lparts(i).token=token_end then exit loop
0acc8     15 2D 02 F6 | 	mov	local04, local03
0accc     03 2C 66 F0 | 	shl	local04, #3
0acd0     35 00 00 FF 
0acd4     0C E4 05 F1 | 	add	objptr, ##27148
0acd8     F2 2C 02 F1 | 	add	local04, objptr
0acdc     04 2C 06 F1 | 	add	local04, #4
0ace0     16 2D 02 FB | 	rdlong	local04, local04
0ace4     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ace8     35 00 00 FF 
0acec     0C E4 85 F1 | 	sub	objptr, ##27148
0acf0     30 00 90 AD |  if_e	jmp	#LR__0924
0acf4     01 2A 06 F1 | 	add	local03, #1
0acf8     15 2D 02 F6 | 	mov	local04, local03
0acfc     03 2C 66 F0 | 	shl	local04, #3
0ad00     35 00 00 FF 
0ad04     0C E4 05 F1 | 	add	objptr, ##27148
0ad08     F2 2C 02 F1 | 	add	local04, objptr
0ad0c     04 2C 06 F1 | 	add	local04, #4
0ad10     16 2D 02 FB | 	rdlong	local04, local04
0ad14     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ad18     35 00 00 FF 
0ad1c     0C E4 85 F1 | 	sub	objptr, ##27148
0ad20     30 FE 9F 5D |  if_ne	jmp	#LR__0920
0ad24                 | LR__0924
0ad24     14 2D 02 F6 | 	mov	local04, local02
0ad28     01 2C 66 F0 | 	shl	local04, #1
0ad2c     14 2D 02 F1 | 	add	local04, local02
0ad30     02 2C 66 F0 | 	shl	local04, #2
0ad34     47 00 00 FF 
0ad38     7C E4 05 F1 | 	add	objptr, ##36476
0ad3c     F2 2C 02 F1 | 	add	local04, objptr
0ad40     04 2C 06 F1 | 	add	local04, #4
0ad44     16 03 68 FC | 	wrlong	#1, local04
0ad48     47 00 00 FF 
0ad4c     7C E4 85 F1 | 	sub	objptr, ##36476
0ad50                 | LR__0925
0ad50                 | ' 
0ad50                 | ' if lparts(ct).part$="gosub" then
0ad50     37 00 00 FF 
0ad54     44 E4 05 F1 | 	add	objptr, ##28228
0ad58     F2 2A 02 FB | 	rdlong	local03, objptr
0ad5c     03 2A 66 F0 | 	shl	local03, #3
0ad60     02 00 00 FF 
0ad64     38 E4 85 F1 | 	sub	objptr, ##1080
0ad68     F2 2A 02 F1 | 	add	local03, objptr
0ad6c     15 13 02 FB | 	rdlong	arg01, local03
0ad70     AD 01 00 FF 
0ad74     C6 15 06 F6 | 	mov	arg02, ##@LR__5806
0ad78     35 00 00 FF 
0ad7c     0C E4 85 F1 | 	sub	objptr, ##27148
0ad80     2C AC B1 FD | 	call	#__system___string_cmp
0ad84     00 FA 0D F2 | 	cmp	result1, #0 wz
0ad88     84 02 90 5D |  if_ne	jmp	#LR__0931
0ad8c     37 00 00 FF 
0ad90     44 E4 05 F1 | 	add	objptr, ##28228
0ad94     F2 2A 02 FB | 	rdlong	local03, objptr
0ad98     37 00 00 FF 
0ad9c     44 E4 85 F1 | 	sub	objptr, ##28228
0ada0     01 2A 06 F1 | 	add	local03, #1
0ada4                 | '   i=ct+1
0ada4                 | '   do
0ada4                 | LR__0926
0ada4                 | '     if lparts(i).token=token_decimal then
0ada4     15 2D 02 F6 | 	mov	local04, local03
0ada8     03 2C 66 F0 | 	shl	local04, #3
0adac     35 00 00 FF 
0adb0     0C E4 05 F1 | 	add	objptr, ##27148
0adb4     F2 2C 02 F1 | 	add	local04, objptr
0adb8     04 2C 06 F1 | 	add	local04, #4
0adbc     16 2D 02 FB | 	rdlong	local04, local04
0adc0     01 00 00 FF 
0adc4     00 2C 0E F2 | 	cmp	local04, ##512 wz
0adc8     35 00 00 FF 
0adcc     0C E4 85 F1 | 	sub	objptr, ##27148
0add0     4C 01 90 5D |  if_ne	jmp	#LR__0927
0add4     4A 00 00 FF 
0add8     7C E4 05 F1 | 	add	objptr, ##38012
0addc     F2 FA 01 FB | 	rdlong	result1, objptr
0ade0     FD 2C 02 F6 | 	mov	local04, result1
0ade4     01 2C 66 F0 | 	shl	local04, #1
0ade8     FD 2C 02 F1 | 	add	local04, result1
0adec     02 2C 66 F0 | 	shl	local04, #2
0adf0     03 00 00 FF 
0adf4     00 E4 85 F1 | 	sub	objptr, ##1536
0adf8     F2 2C 02 F1 | 	add	local04, objptr
0adfc     08 2C 06 F1 | 	add	local04, #8
0ae00     16 53 69 FC | 	wrlong	#169, local04
0ae04     03 00 00 FF 
0ae08     00 E4 05 F1 | 	add	objptr, ##1536
0ae0c     F2 FA 01 FB | 	rdlong	result1, objptr
0ae10     01 FA 05 F1 | 	add	result1, #1
0ae14     F2 FA 61 FC | 	wrlong	result1, objptr
0ae18     FD 2C 02 F6 | 	mov	local04, result1
0ae1c     01 2C 66 F0 | 	shl	local04, #1
0ae20     FD 2C 02 F1 | 	add	local04, result1
0ae24     02 2C 66 F0 | 	shl	local04, #2
0ae28     03 00 00 FF 
0ae2c     00 E4 85 F1 | 	sub	objptr, ##1536
0ae30     F2 2C 02 F1 | 	add	local04, objptr
0ae34     00 00 C0 FF 
0ae38     16 01 68 FC | 	wrlong	##-2147483648, local04
0ae3c     03 00 00 FF 
0ae40     00 E4 05 F1 | 	add	objptr, ##1536
0ae44     F2 FA 01 FB | 	rdlong	result1, objptr
0ae48     FD 2C 02 F6 | 	mov	local04, result1
0ae4c     01 2C 66 F0 | 	shl	local04, #1
0ae50     FD 2C 02 F1 | 	add	local04, result1
0ae54     02 2C 66 F0 | 	shl	local04, #2
0ae58     03 00 00 FF 
0ae5c     00 E4 85 F1 | 	sub	objptr, ##1536
0ae60     F2 2C 02 F1 | 	add	local04, objptr
0ae64     15 13 02 F6 | 	mov	arg01, local03
0ae68     03 12 66 F0 | 	shl	arg01, #3
0ae6c     12 00 00 FF 
0ae70     70 E4 85 F1 | 	sub	objptr, ##9328
0ae74     F2 12 02 F1 | 	add	arg01, objptr
0ae78     09 13 02 FB | 	rdlong	arg01, arg01
0ae7c     00 14 06 F6 | 	mov	arg02, #0
0ae80     35 00 00 FF 
0ae84     0C E4 85 F1 | 	sub	objptr, ##27148
0ae88     EC DF B1 FD | 	call	#__system____builtin_atoi
0ae8c     04 2C 06 F1 | 	add	local04, #4
0ae90     16 FB 61 FC | 	wrlong	result1, local04
0ae94     4A 00 00 FF 
0ae98     7C E4 05 F1 | 	add	objptr, ##38012
0ae9c     F2 12 02 FB | 	rdlong	arg01, objptr
0aea0     09 2D 02 F6 | 	mov	local04, arg01
0aea4     01 2C 66 F0 | 	shl	local04, #1
0aea8     09 2D 02 F1 | 	add	local04, arg01
0aeac     02 2C 66 F0 | 	shl	local04, #2
0aeb0     03 00 00 FF 
0aeb4     00 E4 85 F1 | 	sub	objptr, ##1536
0aeb8     F2 2C 02 F1 | 	add	local04, objptr
0aebc     08 2C 06 F1 | 	add	local04, #8
0aec0     16 A7 68 FC | 	wrlong	#83, local04
0aec4     03 00 00 FF 
0aec8     00 E4 05 F1 | 	add	objptr, ##1536
0aecc     F2 12 02 FB | 	rdlong	arg01, objptr
0aed0     01 12 06 F1 | 	add	arg01, #1
0aed4     F2 12 62 FC | 	wrlong	arg01, objptr
0aed8     01 26 06 F1 | 	add	local01, #1
0aedc     09 2D 02 F6 | 	mov	local04, arg01
0aee0     01 2C 66 F0 | 	shl	local04, #1
0aee4     09 2D 02 F1 | 	add	local04, arg01
0aee8     02 2C 66 F0 | 	shl	local04, #2
0aeec     03 00 00 FF 
0aef0     00 E4 85 F1 | 	sub	objptr, ##1536
0aef4     F2 2C 02 F1 | 	add	local04, objptr
0aef8     08 2C 06 F1 | 	add	local04, #8
0aefc     16 5B 68 FC | 	wrlong	#45, local04
0af00     03 00 00 FF 
0af04     00 E4 05 F1 | 	add	objptr, ##1536
0af08     F2 2C 02 FB | 	rdlong	local04, objptr
0af0c     01 2C 06 F1 | 	add	local04, #1
0af10     F2 2C 62 FC | 	wrlong	local04, objptr
0af14     4A 00 00 FF 
0af18     7C E4 85 F1 | 	sub	objptr, ##38012
0af1c     08 00 90 FD | 	jmp	#LR__0928
0af20                 | LR__0927
0af20                 | '       return 17
0af20     11 FA 05 F6 | 	mov	result1, #17
0af24     9C 01 90 FD | 	jmp	#LR__0935
0af28                 | LR__0928
0af28     01 2A 06 F1 | 	add	local03, #1
0af2c                 | '     i+=1
0af2c                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0af2c     15 2D 02 F6 | 	mov	local04, local03
0af30     03 2C 66 F0 | 	shl	local04, #3
0af34     35 00 00 FF 
0af38     0C E4 05 F1 | 	add	objptr, ##27148
0af3c     F2 2C 02 F1 | 	add	local04, objptr
0af40     04 2C 06 F1 | 	add	local04, #4
0af44     16 2D 02 FB | 	rdlong	local04, local04
0af48     11 2C 0E F2 | 	cmp	local04, #17 wz
0af4c     35 00 00 FF 
0af50     0C E4 85 F1 | 	sub	objptr, ##27148
0af54     30 00 90 AD |  if_e	jmp	#LR__0929
0af58     15 2D 02 F6 | 	mov	local04, local03
0af5c     03 2C 66 F0 | 	shl	local04, #3
0af60     35 00 00 FF 
0af64     0C E4 05 F1 | 	add	objptr, ##27148
0af68     F2 2C 02 F1 | 	add	local04, objptr
0af6c     04 2C 06 F1 | 	add	local04, #4
0af70     16 2D 02 FB | 	rdlong	local04, local04
0af74     FE 2D 0E F2 | 	cmp	local04, #510 wz
0af78     35 00 00 FF 
0af7c     0C E4 85 F1 | 	sub	objptr, ##27148
0af80     15 FA 05 56 |  if_ne	mov	result1, #21
0af84     3C 01 90 5D |  if_ne	jmp	#LR__0935
0af88                 | LR__0929
0af88                 | '     if lparts(i).token=token_end then exit loop
0af88     15 2D 02 F6 | 	mov	local04, local03
0af8c     03 2C 66 F0 | 	shl	local04, #3
0af90     35 00 00 FF 
0af94     0C E4 05 F1 | 	add	objptr, ##27148
0af98     F2 2C 02 F1 | 	add	local04, objptr
0af9c     04 2C 06 F1 | 	add	local04, #4
0afa0     16 2D 02 FB | 	rdlong	local04, local04
0afa4     FE 2D 0E F2 | 	cmp	local04, #510 wz
0afa8     35 00 00 FF 
0afac     0C E4 85 F1 | 	sub	objptr, ##27148
0afb0     30 00 90 AD |  if_e	jmp	#LR__0930
0afb4     01 2A 06 F1 | 	add	local03, #1
0afb8     15 2D 02 F6 | 	mov	local04, local03
0afbc     03 2C 66 F0 | 	shl	local04, #3
0afc0     35 00 00 FF 
0afc4     0C E4 05 F1 | 	add	objptr, ##27148
0afc8     F2 2C 02 F1 | 	add	local04, objptr
0afcc     04 2C 06 F1 | 	add	local04, #4
0afd0     16 2D 02 FB | 	rdlong	local04, local04
0afd4     FE 2D 0E F2 | 	cmp	local04, #510 wz
0afd8     35 00 00 FF 
0afdc     0C E4 85 F1 | 	sub	objptr, ##27148
0afe0     C0 FD 9F 5D |  if_ne	jmp	#LR__0926
0afe4                 | LR__0930
0afe4     14 2D 02 F6 | 	mov	local04, local02
0afe8     01 2C 66 F0 | 	shl	local04, #1
0afec     14 2D 02 F1 | 	add	local04, local02
0aff0     02 2C 66 F0 | 	shl	local04, #2
0aff4     47 00 00 FF 
0aff8     7C E4 05 F1 | 	add	objptr, ##36476
0affc     F2 2C 02 F1 | 	add	local04, objptr
0b000     04 2C 06 F1 | 	add	local04, #4
0b004     16 07 68 FC | 	wrlong	#3, local04
0b008     47 00 00 FF 
0b00c     7C E4 85 F1 | 	sub	objptr, ##36476
0b010                 | LR__0931
0b010     14 2B 02 F6 | 	mov	local03, local02
0b014     01 2A 66 F0 | 	shl	local03, #1
0b018     14 2B 02 F1 | 	add	local03, local02
0b01c     02 2A 66 F0 | 	shl	local03, #2
0b020     47 00 00 FF 
0b024     7C E4 05 F1 | 	add	objptr, ##36476
0b028     F2 2A 02 F1 | 	add	local03, objptr
0b02c     15 27 62 FC | 	wrlong	local01, local03
0b030                 | ' compiledline(onlineptr).result.uresult=numpar
0b030                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0b030     03 00 00 FF 
0b034     00 E4 05 F1 | 	add	objptr, ##1536
0b038     F2 2A 02 FB | 	rdlong	local03, objptr
0b03c     4A 00 00 FF 
0b040     7C E4 85 F1 | 	sub	objptr, ##38012
0b044     97 3C 48 FB | 	callpa	#(@LR__0934-@LR__0932)>>2,fcache_load_ptr_
0b048                 | LR__0932
0b048     15 2D 02 F6 | 	mov	local04, local03
0b04c     01 2C 66 F0 | 	shl	local04, #1
0b050     15 2D 02 F1 | 	add	local04, local03
0b054     02 2C 66 F0 | 	shl	local04, #2
0b058     47 00 00 FF 
0b05c     7C E4 05 F1 | 	add	objptr, ##36476
0b060     F2 2C 02 F1 | 	add	local04, objptr
0b064     08 2C 06 F1 | 	add	local04, #8
0b068     16 2D 02 FB | 	rdlong	local04, local04
0b06c     2D 2C 0E F2 | 	cmp	local04, #45 wz
0b070     47 00 00 FF 
0b074     7C E4 85 F1 | 	sub	objptr, ##36476
0b078     38 00 90 5D |  if_ne	jmp	#LR__0933
0b07c     15 2D 02 F6 | 	mov	local04, local03
0b080     01 2C 66 F0 | 	shl	local04, #1
0b084     15 2D 02 F1 | 	add	local04, local03
0b088     02 2C 66 F0 | 	shl	local04, #2
0b08c     47 00 00 FF 
0b090     7C E4 05 F1 | 	add	objptr, ##36476
0b094     F2 2C 02 F1 | 	add	local04, objptr
0b098     03 00 00 FF 
0b09c     00 E4 05 F1 | 	add	objptr, ##1536
0b0a0     F2 26 02 FB | 	rdlong	local01, objptr
0b0a4     4A 00 00 FF 
0b0a8     7C E4 85 F1 | 	sub	objptr, ##38012
0b0ac     02 26 86 F1 | 	sub	local01, #2
0b0b0     16 27 62 FC | 	wrlong	local01, local04
0b0b4                 | LR__0933
0b0b4     01 2A 86 F1 | 	sub	local03, #1
0b0b8     14 2B 52 F2 | 	cmps	local03, local02 wc
0b0bc     88 FF 9F 3D |  if_ae	jmp	#LR__0932
0b0c0                 | LR__0934
0b0c0                 | ' return 0
0b0c0     00 FA 05 F6 | 	mov	result1, #0
0b0c4                 | LR__0935
0b0c4     A7 F0 03 F6 | 	mov	ptra, fp
0b0c8     B2 00 A0 FD | 	call	#popregs_
0b0cc                 | _compile_on_ret
0b0cc     2D 00 64 FD | 	ret
0b0d0                 | 
0b0d0                 | ' 
0b0d0                 | ' '----- A helper for compile_input and compile_read
0b0d0                 | '  
0b0d0                 | ' function getaddr() as ulong
0b0d0                 | _getaddr
0b0d0     0B 4A 05 F6 | 	mov	COUNT_, #11
0b0d4     A8 00 A0 FD | 	call	#pushregs_
0b0d8     37 00 00 FF 
0b0dc     44 E4 05 F1 | 	add	objptr, ##28228
0b0e0     F2 2C 02 FB | 	rdlong	local04, objptr
0b0e4     03 2C 66 F0 | 	shl	local04, #3
0b0e8     02 00 00 FF 
0b0ec     38 E4 85 F1 | 	sub	objptr, ##1080
0b0f0     F2 2C 02 F1 | 	add	local04, objptr
0b0f4     16 2F 02 FB | 	rdlong	local05, local04
0b0f8     01 30 66 F6 | 	neg	local06, #1
0b0fc                 | ' 
0b0fc                 | ' varname$=lparts(ct).part$
0b0fc                 | ' j=-1
0b0fc                 | ' 
0b0fc                 | ' for i=0 to varnum-1
0b0fc     00 32 06 F6 | 	mov	local07, #0
0b100     04 E4 85 F1 | 	sub	objptr, #4
0b104     F2 34 02 FB | 	rdlong	local08, objptr
0b108     35 00 00 FF 
0b10c     08 E4 85 F1 | 	sub	objptr, ##27144
0b110                 | LR__0940
0b110     1A 33 52 F2 | 	cmps	local07, local08 wc
0b114     38 00 90 3D |  if_ae	jmp	#LR__0941
0b118                 | '   if variables(i).name=varname$ then j=i : exit
0b118     19 2D 02 F6 | 	mov	local04, local07
0b11c     04 2C 66 F0 | 	shl	local04, #4
0b120     14 00 00 FF 
0b124     F8 E5 05 F1 | 	add	objptr, ##10744
0b128     F2 2C 02 F1 | 	add	local04, objptr
0b12c     16 13 02 FB | 	rdlong	arg01, local04
0b130     17 15 02 F6 | 	mov	arg02, local05
0b134     14 00 00 FF 
0b138     F8 E5 85 F1 | 	sub	objptr, ##10744
0b13c     70 A8 B1 FD | 	call	#__system___string_cmp
0b140     00 FA 0D F2 | 	cmp	result1, #0 wz
0b144     19 31 02 A6 |  if_e	mov	local06, local07
0b148     01 32 06 51 |  if_ne	add	local07, #1
0b14c     C0 FF 9F 5D |  if_ne	jmp	#LR__0940
0b150                 | LR__0941
0b150                 | ' if  j=-1 andalso varnum<maxvars then   
0b150     FF FF 7F FF 
0b154     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0b158     A8 00 90 5D |  if_ne	jmp	#LR__0942
0b15c     35 00 00 FF 
0b160     08 E4 05 F1 | 	add	objptr, ##27144
0b164     F2 34 02 FB | 	rdlong	local08, objptr
0b168     35 00 00 FF 
0b16c     08 E4 85 F1 | 	sub	objptr, ##27144
0b170     02 00 00 FF 
0b174     00 34 56 F2 | 	cmps	local08, ##1024 wc
0b178     88 00 90 3D |  if_ae	jmp	#LR__0942
0b17c     35 00 00 FF 
0b180     08 E4 05 F1 | 	add	objptr, ##27144
0b184     F2 2C 02 FB | 	rdlong	local04, objptr
0b188     04 2C 66 F0 | 	shl	local04, #4
0b18c     20 00 00 FF 
0b190     10 E4 85 F1 | 	sub	objptr, ##16400
0b194     F2 2C 02 F1 | 	add	local04, objptr
0b198     16 2F 62 FC | 	wrlong	local05, local04
0b19c     20 00 00 FF 
0b1a0     10 E4 05 F1 | 	add	objptr, ##16400
0b1a4     F2 2C 02 FB | 	rdlong	local04, objptr
0b1a8     04 2C 66 F0 | 	shl	local04, #4
0b1ac     20 00 00 FF 
0b1b0     10 E4 85 F1 | 	sub	objptr, ##16400
0b1b4     F2 2C 02 F1 | 	add	local04, objptr
0b1b8     04 2C 06 F1 | 	add	local04, #4
0b1bc     16 01 68 FC | 	wrlong	#0, local04
0b1c0     20 00 00 FF 
0b1c4     10 E4 05 F1 | 	add	objptr, ##16400
0b1c8     F2 2C 02 FB | 	rdlong	local04, objptr
0b1cc     04 2C 66 F0 | 	shl	local04, #4
0b1d0     20 00 00 FF 
0b1d4     10 E4 85 F1 | 	sub	objptr, ##16400
0b1d8     F2 2C 02 F1 | 	add	local04, objptr
0b1dc     0C 2C 06 F1 | 	add	local04, #12
0b1e0     16 39 68 FC | 	wrlong	#28, local04
0b1e4     20 00 00 FF 
0b1e8     10 E4 05 F1 | 	add	objptr, ##16400
0b1ec     F2 34 02 FB | 	rdlong	local08, objptr
0b1f0     1A 31 02 F6 | 	mov	local06, local08
0b1f4     01 34 06 F1 | 	add	local08, #1
0b1f8     F2 34 62 FC | 	wrlong	local08, objptr
0b1fc     35 00 00 FF 
0b200     08 E4 85 F1 | 	sub	objptr, ##27144
0b204                 | LR__0942
0b204     00 34 06 F6 | 	mov	local08, #0
0b208                 | ' numpar=0
0b208                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0b208     37 00 00 FF 
0b20c     44 E4 05 F1 | 	add	objptr, ##28228
0b210     F2 2C 02 FB | 	rdlong	local04, objptr
0b214     01 2C 06 F1 | 	add	local04, #1
0b218     03 2C 66 F0 | 	shl	local04, #3
0b21c     02 00 00 FF 
0b220     38 E4 85 F1 | 	sub	objptr, ##1080
0b224     F2 2C 02 F1 | 	add	local04, objptr
0b228     04 2C 06 F1 | 	add	local04, #4
0b22c     16 33 02 FB | 	rdlong	local07, local04
0b230     15 32 0E F2 | 	cmp	local07, #21 wz
0b234     35 00 00 FF 
0b238     0C E4 85 F1 | 	sub	objptr, ##27148
0b23c     54 01 90 5D |  if_ne	jmp	#LR__0947
0b240     37 00 00 FF 
0b244     44 E4 05 F1 | 	add	objptr, ##28228
0b248     F2 36 02 FB | 	rdlong	local09, objptr
0b24c     01 36 06 F1 | 	add	local09, #1
0b250     F2 36 62 FC | 	wrlong	local09, objptr
0b254     37 00 00 FF 
0b258     44 E4 85 F1 | 	sub	objptr, ##28228
0b25c                 | '   ct+=1 											' omit this lpar, this is for expr list
0b25c                 | '   do
0b25c                 | LR__0943
0b25c     37 00 00 FF 
0b260     44 E4 05 F1 | 	add	objptr, ##28228
0b264     F2 2C 02 FB | 	rdlong	local04, objptr
0b268     01 2C 06 F1 | 	add	local04, #1
0b26c     F2 2C 62 FC | 	wrlong	local04, objptr
0b270                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b270                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0b270     03 2C 66 F0 | 	shl	local04, #3
0b274     02 00 00 FF 
0b278     38 E4 85 F1 | 	sub	objptr, ##1080
0b27c     F2 2C 02 F1 | 	add	local04, objptr
0b280     04 2C 06 F1 | 	add	local04, #4
0b284     16 37 02 FB | 	rdlong	local09, local04
0b288     15 36 0E F2 | 	cmp	local09, #21 wz
0b28c     35 00 00 FF 
0b290     0C E4 85 F1 | 	sub	objptr, ##27148
0b294     44 00 90 5D |  if_ne	jmp	#LR__0944
0b298     37 00 00 FF 
0b29c     44 E4 05 F1 | 	add	objptr, ##28228
0b2a0     F2 36 02 FB | 	rdlong	local09, objptr
0b2a4     01 36 06 F1 | 	add	local09, #1
0b2a8     F2 36 62 FC | 	wrlong	local09, objptr
0b2ac     37 00 00 FF 
0b2b0     44 E4 85 F1 | 	sub	objptr, ##28228
0b2b4     AC 01 B0 FD | 	call	#_expr
0b2b8     FD 38 02 F6 | 	mov	local10, result1
0b2bc     37 00 00 FF 
0b2c0     44 E4 05 F1 | 	add	objptr, ##28228
0b2c4     F2 36 02 FB | 	rdlong	local09, objptr
0b2c8     01 36 06 F1 | 	add	local09, #1
0b2cc     F2 36 62 FC | 	wrlong	local09, objptr
0b2d0     37 00 00 FF 
0b2d4     44 E4 85 F1 | 	sub	objptr, ##28228
0b2d8     08 00 90 FD | 	jmp	#LR__0945
0b2dc                 | LR__0944
0b2dc     84 01 B0 FD | 	call	#_expr
0b2e0     FD 38 02 F6 | 	mov	local10, result1
0b2e4                 | LR__0945
0b2e4                 | '     if err>0 then return err
0b2e4     01 38 56 F2 | 	cmps	local10, #1 wc
0b2e8     1C FB 01 36 |  if_ae	mov	result1, local10
0b2ec     68 01 90 3D |  if_ae	jmp	#LR__0948
0b2f0     01 34 06 F1 | 	add	local08, #1
0b2f4     37 00 00 FF 
0b2f8     44 E4 05 F1 | 	add	objptr, ##28228
0b2fc     F2 2C 02 FB | 	rdlong	local04, objptr
0b300     03 2C 66 F0 | 	shl	local04, #3
0b304     02 00 00 FF 
0b308     38 E4 85 F1 | 	sub	objptr, ##1080
0b30c     F2 2C 02 F1 | 	add	local04, objptr
0b310     04 2C 06 F1 | 	add	local04, #4
0b314     16 39 02 FB | 	rdlong	local10, local04
0b318     14 38 0E F2 | 	cmp	local10, #20 wz
0b31c     35 00 00 FF 
0b320     0C E4 85 F1 | 	sub	objptr, ##27148
0b324     34 00 90 AD |  if_e	jmp	#LR__0946
0b328     37 00 00 FF 
0b32c     44 E4 05 F1 | 	add	objptr, ##28228
0b330     F2 38 02 FB | 	rdlong	local10, objptr
0b334     03 38 66 F0 | 	shl	local10, #3
0b338     02 00 00 FF 
0b33c     38 E4 85 F1 | 	sub	objptr, ##1080
0b340     F2 38 02 F1 | 	add	local10, objptr
0b344     04 38 06 F1 | 	add	local10, #4
0b348     1C 39 02 FB | 	rdlong	local10, local10
0b34c     FE 39 0E F2 | 	cmp	local10, #510 wz
0b350     35 00 00 FF 
0b354     0C E4 85 F1 | 	sub	objptr, ##27148
0b358     00 FF 9F 5D |  if_ne	jmp	#LR__0943
0b35c                 | LR__0946
0b35c                 | '     if lparts(ct).token=token_end then return 14
0b35c     37 00 00 FF 
0b360     44 E4 05 F1 | 	add	objptr, ##28228
0b364     F2 2C 02 FB | 	rdlong	local04, objptr
0b368     03 2C 66 F0 | 	shl	local04, #3
0b36c     02 00 00 FF 
0b370     38 E4 85 F1 | 	sub	objptr, ##1080
0b374     F2 2C 02 F1 | 	add	local04, objptr
0b378     04 2C 06 F1 | 	add	local04, #4
0b37c     16 39 02 FB | 	rdlong	local10, local04
0b380     FE 39 0E F2 | 	cmp	local10, #510 wz
0b384     35 00 00 FF 
0b388     0C E4 85 F1 | 	sub	objptr, ##27148
0b38c     0E FA 05 A6 |  if_e	mov	result1, #14
0b390     C4 00 90 AD |  if_e	jmp	#LR__0948
0b394                 | LR__0947
0b394     1A 29 02 F6 | 	mov	local02, local08
0b398     12 2A 06 F6 | 	mov	local03, #18
0b39c     18 27 02 F6 | 	mov	local01, local06
0b3a0     13 37 02 F6 | 	mov	local09, local01
0b3a4     14 3B 02 F6 | 	mov	local11, local02
0b3a8     15 27 02 F6 | 	mov	local01, local03
0b3ac     4A 00 00 FF 
0b3b0     7C E4 05 F1 | 	add	objptr, ##38012
0b3b4     F2 38 02 FB | 	rdlong	local10, objptr
0b3b8     1C 35 02 F6 | 	mov	local08, local10
0b3bc     01 34 66 F0 | 	shl	local08, #1
0b3c0     1C 35 02 F1 | 	add	local08, local10
0b3c4     02 34 66 F0 | 	shl	local08, #2
0b3c8     03 00 00 FF 
0b3cc     00 E4 85 F1 | 	sub	objptr, ##1536
0b3d0     F2 34 02 F1 | 	add	local08, objptr
0b3d4     1A 37 62 FC | 	wrlong	local09, local08
0b3d8     03 00 00 FF 
0b3dc     00 E4 05 F1 | 	add	objptr, ##1536
0b3e0     F2 38 02 FB | 	rdlong	local10, objptr
0b3e4     1C 37 02 F6 | 	mov	local09, local10
0b3e8     01 36 66 F0 | 	shl	local09, #1
0b3ec     1C 37 02 F1 | 	add	local09, local10
0b3f0     02 36 66 F0 | 	shl	local09, #2
0b3f4     03 00 00 FF 
0b3f8     00 E4 85 F1 | 	sub	objptr, ##1536
0b3fc     F2 36 02 F1 | 	add	local09, objptr
0b400     04 36 06 F1 | 	add	local09, #4
0b404     1B 3B 62 FC | 	wrlong	local11, local09
0b408     03 00 00 FF 
0b40c     00 E4 05 F1 | 	add	objptr, ##1536
0b410     F2 3A 02 FB | 	rdlong	local11, objptr
0b414     1D 39 02 F6 | 	mov	local10, local11
0b418     01 38 66 F0 | 	shl	local10, #1
0b41c     1D 39 02 F1 | 	add	local10, local11
0b420     02 38 66 F0 | 	shl	local10, #2
0b424     03 00 00 FF 
0b428     00 E4 85 F1 | 	sub	objptr, ##1536
0b42c     F2 38 02 F1 | 	add	local10, objptr
0b430     08 38 06 F1 | 	add	local10, #8
0b434     1C 27 62 FC | 	wrlong	local01, local10
0b438     03 00 00 FF 
0b43c     00 E4 05 F1 | 	add	objptr, ##1536
0b440     F2 36 02 FB | 	rdlong	local09, objptr
0b444     01 36 06 F1 | 	add	local09, #1
0b448     F2 36 62 FC | 	wrlong	local09, objptr
0b44c     4A 00 00 FF 
0b450     7C E4 85 F1 | 	sub	objptr, ##38012
0b454                 | ' t2.result.twowords(1)=numpar
0b454                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0b454                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b454                 | ' return 0
0b454     00 FA 05 F6 | 	mov	result1, #0
0b458                 | LR__0948
0b458     A7 F0 03 F6 | 	mov	ptra, fp
0b45c     B2 00 A0 FD | 	call	#popregs_
0b460                 | _getaddr_ret
0b460     2D 00 64 FD | 	ret
0b464                 | 
0b464                 | ' 
0b464                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b464                 | ' '--------------------------------------------- 
0b464                 | ' 
0b464                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b464                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0b464                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b464                 | ' 
0b464                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b464                 | ' '
0b464                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0b464                 | ' '
0b464                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b464                 | ' 
0b464                 | ' function expr() as ulong 
0b464                 | _expr
0b464     07 4A 05 F6 | 	mov	COUNT_, #7
0b468     A8 00 A0 FD | 	call	#pushregs_
0b46c                 | _expr_enter
0b46c     37 00 00 FF 
0b470     44 E4 05 F1 | 	add	objptr, ##28228
0b474     F2 2C 02 FB | 	rdlong	local04, objptr
0b478     03 2C 66 F0 | 	shl	local04, #3
0b47c     02 00 00 FF 
0b480     38 E4 85 F1 | 	sub	objptr, ##1080
0b484     F2 2C 02 F1 | 	add	local04, objptr
0b488     04 2C 06 F1 | 	add	local04, #4
0b48c     16 2F 02 FB | 	rdlong	local05, local04
0b490                 | ' 
0b490                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0b490     FE 2F 0E F2 | 	cmp	local05, #510 wz
0b494     35 00 00 FF 
0b498     0C E4 85 F1 | 	sub	objptr, ##27148
0b49c     C4 00 90 5D |  if_ne	jmp	#LR__0950
0b4a0     1D 26 06 F6 | 	mov	local01, #29
0b4a4     FF 2A 06 F6 | 	mov	local03, #255
0b4a8     13 31 02 F6 | 	mov	local06, local01
0b4ac     14 33 02 F6 | 	mov	local07, local02
0b4b0     15 27 02 F6 | 	mov	local01, local03
0b4b4     4A 00 00 FF 
0b4b8     7C E4 05 F1 | 	add	objptr, ##38012
0b4bc     F2 2E 02 FB | 	rdlong	local05, objptr
0b4c0     17 2D 02 F6 | 	mov	local04, local05
0b4c4     01 2C 66 F0 | 	shl	local04, #1
0b4c8     17 2D 02 F1 | 	add	local04, local05
0b4cc     02 2C 66 F0 | 	shl	local04, #2
0b4d0     03 00 00 FF 
0b4d4     00 E4 85 F1 | 	sub	objptr, ##1536
0b4d8     F2 2C 02 F1 | 	add	local04, objptr
0b4dc     16 31 62 FC | 	wrlong	local06, local04
0b4e0     03 00 00 FF 
0b4e4     00 E4 05 F1 | 	add	objptr, ##1536
0b4e8     F2 30 02 FB | 	rdlong	local06, objptr
0b4ec     18 2F 02 F6 | 	mov	local05, local06
0b4f0     01 2E 66 F0 | 	shl	local05, #1
0b4f4     18 2F 02 F1 | 	add	local05, local06
0b4f8     02 2E 66 F0 | 	shl	local05, #2
0b4fc     03 00 00 FF 
0b500     00 E4 85 F1 | 	sub	objptr, ##1536
0b504     F2 2E 02 F1 | 	add	local05, objptr
0b508     04 2E 06 F1 | 	add	local05, #4
0b50c     17 33 62 FC | 	wrlong	local07, local05
0b510     03 00 00 FF 
0b514     00 E4 05 F1 | 	add	objptr, ##1536
0b518     F2 32 02 FB | 	rdlong	local07, objptr
0b51c     19 31 02 F6 | 	mov	local06, local07
0b520     01 30 66 F0 | 	shl	local06, #1
0b524     19 31 02 F1 | 	add	local06, local07
0b528     02 30 66 F0 | 	shl	local06, #2
0b52c     03 00 00 FF 
0b530     00 E4 85 F1 | 	sub	objptr, ##1536
0b534     F2 30 02 F1 | 	add	local06, objptr
0b538     08 30 06 F1 | 	add	local06, #8
0b53c     18 27 62 FC | 	wrlong	local01, local06
0b540     03 00 00 FF 
0b544     00 E4 05 F1 | 	add	objptr, ##1536
0b548     F2 30 02 FB | 	rdlong	local06, objptr
0b54c     01 30 06 F1 | 	add	local06, #1
0b550     F2 30 62 FC | 	wrlong	local06, objptr
0b554     4A 00 00 FF 
0b558     7C E4 85 F1 | 	sub	objptr, ##38012
0b55c     1D FA 05 F6 | 	mov	result1, #29
0b560     64 01 90 FD | 	jmp	#LR__0953
0b564                 | LR__0950
0b564     00 26 06 F6 | 	mov	local01, #0
0b568     68 01 B0 FD | 	call	#_addsub
0b56c                 | ' t3.result.uresult=0
0b56c                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0b56c                 | ' if err>0 then return err
0b56c     01 FA 15 F2 | 	cmp	result1, #1 wc
0b570     54 01 90 3D |  if_ae	jmp	#LR__0953
0b574     37 00 00 FF 
0b578     44 E4 05 F1 | 	add	objptr, ##28228
0b57c     F2 2C 02 FB | 	rdlong	local04, objptr
0b580     03 2C 66 F0 | 	shl	local04, #3
0b584     02 00 00 FF 
0b588     38 E4 85 F1 | 	sub	objptr, ##1080
0b58c     F2 2C 02 F1 | 	add	local04, objptr
0b590     04 2C 06 F1 | 	add	local04, #4
0b594     16 2F 02 FB | 	rdlong	local05, local04
0b598                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0b598                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0b598     35 00 00 FF 
0b59c     0C E4 85 F1 | 	sub	objptr, ##27148
0b5a0                 | LR__0951
0b5a0     1B 2E 0E F2 | 	cmp	local05, #27 wz
0b5a4     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0b5a8     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0b5ac     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0b5b0     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0b5b4     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0b5b8     08 01 90 5D |  if_ne	jmp	#LR__0952
0b5bc     37 00 00 FF 
0b5c0     44 E4 05 F1 | 	add	objptr, ##28228
0b5c4     F2 30 02 FB | 	rdlong	local06, objptr
0b5c8     01 30 06 F1 | 	add	local06, #1
0b5cc     F2 30 62 FC | 	wrlong	local06, objptr
0b5d0     37 00 00 FF 
0b5d4     44 E4 85 F1 | 	sub	objptr, ##28228
0b5d8     F8 00 B0 FD | 	call	#_addsub
0b5dc                 | '   ct+=1
0b5dc                 | '   err=addsub() : if err>0 then return err
0b5dc     01 FA 15 F2 | 	cmp	result1, #1 wc
0b5e0     E4 00 90 3D |  if_ae	jmp	#LR__0953
0b5e4     17 2B 02 F6 | 	mov	local03, local05
0b5e8     13 31 02 F6 | 	mov	local06, local01
0b5ec     14 33 02 F6 | 	mov	local07, local02
0b5f0     15 2F 02 F6 | 	mov	local05, local03
0b5f4     4A 00 00 FF 
0b5f8     7C E4 05 F1 | 	add	objptr, ##38012
0b5fc     F2 2C 02 FB | 	rdlong	local04, objptr
0b600     16 FB 01 F6 | 	mov	result1, local04
0b604     01 FA 65 F0 | 	shl	result1, #1
0b608     16 FB 01 F1 | 	add	result1, local04
0b60c     02 FA 65 F0 | 	shl	result1, #2
0b610     03 00 00 FF 
0b614     00 E4 85 F1 | 	sub	objptr, ##1536
0b618     F2 FA 01 F1 | 	add	result1, objptr
0b61c     FD 30 62 FC | 	wrlong	local06, result1
0b620     03 00 00 FF 
0b624     00 E4 05 F1 | 	add	objptr, ##1536
0b628     F2 30 02 FB | 	rdlong	local06, objptr
0b62c     18 2D 02 F6 | 	mov	local04, local06
0b630     01 2C 66 F0 | 	shl	local04, #1
0b634     18 2D 02 F1 | 	add	local04, local06
0b638     02 2C 66 F0 | 	shl	local04, #2
0b63c     03 00 00 FF 
0b640     00 E4 85 F1 | 	sub	objptr, ##1536
0b644     F2 2C 02 F1 | 	add	local04, objptr
0b648     04 2C 06 F1 | 	add	local04, #4
0b64c     16 33 62 FC | 	wrlong	local07, local04
0b650     03 00 00 FF 
0b654     00 E4 05 F1 | 	add	objptr, ##1536
0b658     F2 32 02 FB | 	rdlong	local07, objptr
0b65c     19 31 02 F6 | 	mov	local06, local07
0b660     01 30 66 F0 | 	shl	local06, #1
0b664     19 31 02 F1 | 	add	local06, local07
0b668     02 30 66 F0 | 	shl	local06, #2
0b66c     03 00 00 FF 
0b670     00 E4 85 F1 | 	sub	objptr, ##1536
0b674     F2 30 02 F1 | 	add	local06, objptr
0b678     08 30 06 F1 | 	add	local06, #8
0b67c     18 2F 62 FC | 	wrlong	local05, local06
0b680     03 00 00 FF 
0b684     00 E4 05 F1 | 	add	objptr, ##1536
0b688     F2 30 02 FB | 	rdlong	local06, objptr
0b68c     01 30 06 F1 | 	add	local06, #1
0b690     F2 30 62 FC | 	wrlong	local06, objptr
0b694     13 00 00 FF 
0b698     38 E4 85 F1 | 	sub	objptr, ##9784
0b69c     F2 2C 02 FB | 	rdlong	local04, objptr
0b6a0     03 2C 66 F0 | 	shl	local04, #3
0b6a4     02 00 00 FF 
0b6a8     38 E4 85 F1 | 	sub	objptr, ##1080
0b6ac     F2 2C 02 F1 | 	add	local04, objptr
0b6b0     04 2C 06 F1 | 	add	local04, #4
0b6b4     16 2F 02 FB | 	rdlong	local05, local04
0b6b8     35 00 00 FF 
0b6bc     0C E4 85 F1 | 	sub	objptr, ##27148
0b6c0     DC FE 9F FD | 	jmp	#LR__0951
0b6c4                 | LR__0952
0b6c4                 | ' return 0  
0b6c4     00 FA 05 F6 | 	mov	result1, #0
0b6c8                 | LR__0953
0b6c8     A7 F0 03 F6 | 	mov	ptra, fp
0b6cc     B2 00 A0 FD | 	call	#popregs_
0b6d0                 | _expr_ret
0b6d0     2D 00 64 FD | 	ret
0b6d4                 | 
0b6d4                 | ' 
0b6d4                 | ' ' Second level operators : add, sub, logic
0b6d4                 | ' 
0b6d4                 | ' function addsub() as ulong
0b6d4                 | _addsub
0b6d4     07 4A 05 F6 | 	mov	COUNT_, #7
0b6d8     A8 00 A0 FD | 	call	#pushregs_
0b6dc                 | _addsub_enter
0b6dc     00 26 06 F6 | 	mov	local01, #0
0b6e0     60 01 B0 FD | 	call	#_muldiv
0b6e4                 | ' 
0b6e4                 | ' t3.result.uresult=0
0b6e4                 | ' err=muldiv() : if err>0 then return err           			 
0b6e4     01 FA 15 F2 | 	cmp	result1, #1 wc
0b6e8     4C 01 90 3D |  if_ae	jmp	#LR__0962
0b6ec     37 00 00 FF 
0b6f0     44 E4 05 F1 | 	add	objptr, ##28228
0b6f4     F2 2C 02 FB | 	rdlong	local04, objptr
0b6f8     03 2C 66 F0 | 	shl	local04, #3
0b6fc     02 00 00 FF 
0b700     38 E4 85 F1 | 	sub	objptr, ##1080
0b704     F2 2C 02 F1 | 	add	local04, objptr
0b708     04 2C 06 F1 | 	add	local04, #4
0b70c     16 2F 02 FB | 	rdlong	local05, local04
0b710                 | ' op = lparts(ct).token				 
0b710                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0b710     35 00 00 FF 
0b714     0C E4 85 F1 | 	sub	objptr, ##27148
0b718                 | LR__0960
0b718     01 2E 0E F2 | 	cmp	local05, #1 wz
0b71c     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0b720     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0b724     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0b728     08 01 90 5D |  if_ne	jmp	#LR__0961
0b72c     37 00 00 FF 
0b730     44 E4 05 F1 | 	add	objptr, ##28228
0b734     F2 2C 02 FB | 	rdlong	local04, objptr
0b738     01 2C 06 F1 | 	add	local04, #1
0b73c     F2 2C 62 FC | 	wrlong	local04, objptr
0b740     37 00 00 FF 
0b744     44 E4 85 F1 | 	sub	objptr, ##28228
0b748     F8 00 B0 FD | 	call	#_muldiv
0b74c                 | '   ct+=1
0b74c                 | '   err=muldiv() : if err>0 then return err   
0b74c     01 FA 15 F2 | 	cmp	result1, #1 wc
0b750     E4 00 90 3D |  if_ae	jmp	#LR__0962
0b754     17 2B 02 F6 | 	mov	local03, local05
0b758     13 31 02 F6 | 	mov	local06, local01
0b75c     14 33 02 F6 | 	mov	local07, local02
0b760     15 2F 02 F6 | 	mov	local05, local03
0b764     4A 00 00 FF 
0b768     7C E4 05 F1 | 	add	objptr, ##38012
0b76c     F2 2C 02 FB | 	rdlong	local04, objptr
0b770     16 FB 01 F6 | 	mov	result1, local04
0b774     01 FA 65 F0 | 	shl	result1, #1
0b778     16 FB 01 F1 | 	add	result1, local04
0b77c     02 FA 65 F0 | 	shl	result1, #2
0b780     03 00 00 FF 
0b784     00 E4 85 F1 | 	sub	objptr, ##1536
0b788     F2 FA 01 F1 | 	add	result1, objptr
0b78c     FD 30 62 FC | 	wrlong	local06, result1
0b790     03 00 00 FF 
0b794     00 E4 05 F1 | 	add	objptr, ##1536
0b798     F2 30 02 FB | 	rdlong	local06, objptr
0b79c     18 2D 02 F6 | 	mov	local04, local06
0b7a0     01 2C 66 F0 | 	shl	local04, #1
0b7a4     18 2D 02 F1 | 	add	local04, local06
0b7a8     02 2C 66 F0 | 	shl	local04, #2
0b7ac     03 00 00 FF 
0b7b0     00 E4 85 F1 | 	sub	objptr, ##1536
0b7b4     F2 2C 02 F1 | 	add	local04, objptr
0b7b8     04 2C 06 F1 | 	add	local04, #4
0b7bc     16 33 62 FC | 	wrlong	local07, local04
0b7c0     03 00 00 FF 
0b7c4     00 E4 05 F1 | 	add	objptr, ##1536
0b7c8     F2 32 02 FB | 	rdlong	local07, objptr
0b7cc     19 31 02 F6 | 	mov	local06, local07
0b7d0     01 30 66 F0 | 	shl	local06, #1
0b7d4     19 31 02 F1 | 	add	local06, local07
0b7d8     02 30 66 F0 | 	shl	local06, #2
0b7dc     03 00 00 FF 
0b7e0     00 E4 85 F1 | 	sub	objptr, ##1536
0b7e4     F2 30 02 F1 | 	add	local06, objptr
0b7e8     08 30 06 F1 | 	add	local06, #8
0b7ec     18 2F 62 FC | 	wrlong	local05, local06
0b7f0     03 00 00 FF 
0b7f4     00 E4 05 F1 | 	add	objptr, ##1536
0b7f8     F2 30 02 FB | 	rdlong	local06, objptr
0b7fc     01 30 06 F1 | 	add	local06, #1
0b800     F2 30 62 FC | 	wrlong	local06, objptr
0b804     13 00 00 FF 
0b808     38 E4 85 F1 | 	sub	objptr, ##9784
0b80c     F2 2C 02 FB | 	rdlong	local04, objptr
0b810     03 2C 66 F0 | 	shl	local04, #3
0b814     02 00 00 FF 
0b818     38 E4 85 F1 | 	sub	objptr, ##1080
0b81c     F2 2C 02 F1 | 	add	local04, objptr
0b820     04 2C 06 F1 | 	add	local04, #4
0b824     16 2F 02 FB | 	rdlong	local05, local04
0b828     35 00 00 FF 
0b82c     0C E4 85 F1 | 	sub	objptr, ##27148
0b830     E4 FE 9F FD | 	jmp	#LR__0960
0b834                 | LR__0961
0b834                 | ' return 0
0b834     00 FA 05 F6 | 	mov	result1, #0
0b838                 | LR__0962
0b838     A7 F0 03 F6 | 	mov	ptra, fp
0b83c     B2 00 A0 FD | 	call	#popregs_
0b840                 | _addsub_ret
0b840     2D 00 64 FD | 	ret
0b844                 | 
0b844                 | ' 
0b844                 | ' ' Third level operators : mul,div,shift,power
0b844                 | ' 
0b844                 | ' function muldiv() as ulong
0b844                 | _muldiv
0b844     07 4A 05 F6 | 	mov	COUNT_, #7
0b848     A8 00 A0 FD | 	call	#pushregs_
0b84c                 | _muldiv_enter
0b84c     00 26 06 F6 | 	mov	local01, #0
0b850     6C 01 B0 FD | 	call	#_getvalue
0b854                 | ' 
0b854                 | ' t3.result.uresult=0
0b854                 | ' err=getvalue() : if err>0 then return err     
0b854     01 FA 15 F2 | 	cmp	result1, #1 wc
0b858     58 01 90 3D |  if_ae	jmp	#LR__0972
0b85c     37 00 00 FF 
0b860     44 E4 05 F1 | 	add	objptr, ##28228
0b864     F2 2C 02 FB | 	rdlong	local04, objptr
0b868     03 2C 66 F0 | 	shl	local04, #3
0b86c     02 00 00 FF 
0b870     38 E4 85 F1 | 	sub	objptr, ##1080
0b874     F2 2C 02 F1 | 	add	local04, objptr
0b878     04 2C 06 F1 | 	add	local04, #4
0b87c     16 2F 02 FB | 	rdlong	local05, local04
0b880                 | ' op = lparts(ct).token
0b880                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0b880     35 00 00 FF 
0b884     0C E4 85 F1 | 	sub	objptr, ##27148
0b888                 | LR__0970
0b888     05 2E 0E F2 | 	cmp	local05, #5 wz
0b88c     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0b890     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0b894     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0b898     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0b89c     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0b8a0     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0b8a4     08 01 90 5D |  if_ne	jmp	#LR__0971
0b8a8     37 00 00 FF 
0b8ac     44 E4 05 F1 | 	add	objptr, ##28228
0b8b0     F2 2C 02 FB | 	rdlong	local04, objptr
0b8b4     01 2C 06 F1 | 	add	local04, #1
0b8b8     F2 2C 62 FC | 	wrlong	local04, objptr
0b8bc     37 00 00 FF 
0b8c0     44 E4 85 F1 | 	sub	objptr, ##28228
0b8c4     F8 00 B0 FD | 	call	#_getvalue
0b8c8                 | '   ct+=1
0b8c8                 | '   err=getvalue() :if err>0 then return err   
0b8c8     01 FA 15 F2 | 	cmp	result1, #1 wc
0b8cc     E4 00 90 3D |  if_ae	jmp	#LR__0972
0b8d0     17 2B 02 F6 | 	mov	local03, local05
0b8d4     13 31 02 F6 | 	mov	local06, local01
0b8d8     14 33 02 F6 | 	mov	local07, local02
0b8dc     15 2F 02 F6 | 	mov	local05, local03
0b8e0     4A 00 00 FF 
0b8e4     7C E4 05 F1 | 	add	objptr, ##38012
0b8e8     F2 2C 02 FB | 	rdlong	local04, objptr
0b8ec     16 FB 01 F6 | 	mov	result1, local04
0b8f0     01 FA 65 F0 | 	shl	result1, #1
0b8f4     16 FB 01 F1 | 	add	result1, local04
0b8f8     02 FA 65 F0 | 	shl	result1, #2
0b8fc     03 00 00 FF 
0b900     00 E4 85 F1 | 	sub	objptr, ##1536
0b904     F2 FA 01 F1 | 	add	result1, objptr
0b908     FD 30 62 FC | 	wrlong	local06, result1
0b90c     03 00 00 FF 
0b910     00 E4 05 F1 | 	add	objptr, ##1536
0b914     F2 30 02 FB | 	rdlong	local06, objptr
0b918     18 2D 02 F6 | 	mov	local04, local06
0b91c     01 2C 66 F0 | 	shl	local04, #1
0b920     18 2D 02 F1 | 	add	local04, local06
0b924     02 2C 66 F0 | 	shl	local04, #2
0b928     03 00 00 FF 
0b92c     00 E4 85 F1 | 	sub	objptr, ##1536
0b930     F2 2C 02 F1 | 	add	local04, objptr
0b934     04 2C 06 F1 | 	add	local04, #4
0b938     16 33 62 FC | 	wrlong	local07, local04
0b93c     03 00 00 FF 
0b940     00 E4 05 F1 | 	add	objptr, ##1536
0b944     F2 32 02 FB | 	rdlong	local07, objptr
0b948     19 31 02 F6 | 	mov	local06, local07
0b94c     01 30 66 F0 | 	shl	local06, #1
0b950     19 31 02 F1 | 	add	local06, local07
0b954     02 30 66 F0 | 	shl	local06, #2
0b958     03 00 00 FF 
0b95c     00 E4 85 F1 | 	sub	objptr, ##1536
0b960     F2 30 02 F1 | 	add	local06, objptr
0b964     08 30 06 F1 | 	add	local06, #8
0b968     18 2F 62 FC | 	wrlong	local05, local06
0b96c     03 00 00 FF 
0b970     00 E4 05 F1 | 	add	objptr, ##1536
0b974     F2 30 02 FB | 	rdlong	local06, objptr
0b978     01 30 06 F1 | 	add	local06, #1
0b97c     F2 30 62 FC | 	wrlong	local06, objptr
0b980     13 00 00 FF 
0b984     38 E4 85 F1 | 	sub	objptr, ##9784
0b988     F2 2C 02 FB | 	rdlong	local04, objptr
0b98c     03 2C 66 F0 | 	shl	local04, #3
0b990     02 00 00 FF 
0b994     38 E4 85 F1 | 	sub	objptr, ##1080
0b998     F2 2C 02 F1 | 	add	local04, objptr
0b99c     04 2C 06 F1 | 	add	local04, #4
0b9a0     16 2F 02 FB | 	rdlong	local05, local04
0b9a4     35 00 00 FF 
0b9a8     0C E4 85 F1 | 	sub	objptr, ##27148
0b9ac     D8 FE 9F FD | 	jmp	#LR__0970
0b9b0                 | LR__0971
0b9b0                 | ' return 0
0b9b0     00 FA 05 F6 | 	mov	result1, #0
0b9b4                 | LR__0972
0b9b4     A7 F0 03 F6 | 	mov	ptra, fp
0b9b8     B2 00 A0 FD | 	call	#popregs_
0b9bc                 | _muldiv_ret
0b9bc     2D 00 64 FD | 	ret
0b9c0                 | 
0b9c0                 | ' 
0b9c0                 | ' ' Get a value for operations
0b9c0                 | ' 
0b9c0                 | ' function getvalue()  as ulong
0b9c0                 | _getvalue
0b9c0     0B 4A 05 F6 | 	mov	COUNT_, #11
0b9c4     A8 00 A0 FD | 	call	#pushregs_
0b9c8                 | _getvalue_enter
0b9c8     01 2C 06 F6 | 	mov	local04, #1
0b9cc     00 26 06 F6 | 	mov	local01, #0
0b9d0     1D 2A 06 F6 | 	mov	local03, #29
0b9d4     37 00 00 FF 
0b9d8     44 E4 05 F1 | 	add	objptr, ##28228
0b9dc     F2 16 02 FB | 	rdlong	arg03, objptr
0b9e0     03 16 66 F0 | 	shl	arg03, #3
0b9e4     02 00 00 FF 
0b9e8     38 E4 85 F1 | 	sub	objptr, ##1080
0b9ec     F2 16 02 F1 | 	add	arg03, objptr
0b9f0     04 16 06 F1 | 	add	arg03, #4
0b9f4     0B 2F 02 FB | 	rdlong	local05, arg03
0b9f8                 | ' 
0b9f8                 | ' m=1											' for negative numbers
0b9f8                 | ' t1.result.uresult=0: t1.result_type=result_uint
0b9f8                 | ' op=lparts(ct).token
0b9f8                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0b9f8     02 2E 0E F2 | 	cmp	local05, #2 wz
0b9fc     35 00 00 FF 
0ba00     0C E4 85 F1 | 	sub	objptr, ##27148
0ba04     38 00 90 5D |  if_ne	jmp	#LR__0980
0ba08     01 2C 66 F6 | 	neg	local04, #1
0ba0c     37 00 00 FF 
0ba10     44 E4 05 F1 | 	add	objptr, ##28228
0ba14     F2 2E 02 FB | 	rdlong	local05, objptr
0ba18     01 2E 06 F1 | 	add	local05, #1
0ba1c     F2 2E 62 FC | 	wrlong	local05, objptr
0ba20     03 2E 66 F0 | 	shl	local05, #3
0ba24     02 00 00 FF 
0ba28     38 E4 85 F1 | 	sub	objptr, ##1080
0ba2c     F2 2E 02 F1 | 	add	local05, objptr
0ba30     04 2E 06 F1 | 	add	local05, #4
0ba34     17 2F 02 FB | 	rdlong	local05, local05
0ba38     35 00 00 FF 
0ba3c     0C E4 85 F1 | 	sub	objptr, ##27148
0ba40                 | LR__0980
0ba40                 | ' select case op
0ba40     01 00 00 FF 
0ba44     00 2E 0E F2 | 	cmp	local05, ##512 wz
0ba48     44 00 90 AD |  if_e	jmp	#LR__0981
0ba4c     01 00 00 FF 
0ba50     01 2E 0E F2 | 	cmp	local05, ##513 wz
0ba54     90 01 90 AD |  if_e	jmp	#LR__0984
0ba58     01 00 00 FF 
0ba5c     02 2E 0E F2 | 	cmp	local05, ##514 wz
0ba60     44 04 90 AD |  if_e	jmp	#LR__0991
0ba64     01 00 00 FF 
0ba68     03 2E 0E F2 | 	cmp	local05, ##515 wz
0ba6c     A8 05 90 AD |  if_e	jmp	#LR__0994
0ba70     2C 2E 0E F2 | 	cmp	local05, #44 wz
0ba74     78 07 90 AD |  if_e	jmp	#LR__0999
0ba78     01 00 00 FF 
0ba7c     04 2E 0E F2 | 	cmp	local05, ##516 wz
0ba80     70 08 90 AD |  if_e	jmp	#LR__1000
0ba84     15 2E 0E F2 | 	cmp	local05, #21 wz
0ba88     98 08 90 AD |  if_e	jmp	#LR__1001
0ba8c     10 09 90 FD | 	jmp	#LR__1002
0ba90                 | LR__0981
0ba90                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0ba90     01 2C 0E F2 | 	cmp	local04, #1 wz
0ba94     3C 00 90 5D |  if_ne	jmp	#LR__0982
0ba98     37 00 00 FF 
0ba9c     44 E4 05 F1 | 	add	objptr, ##28228
0baa0     F2 2E 02 FB | 	rdlong	local05, objptr
0baa4     03 2E 66 F0 | 	shl	local05, #3
0baa8     02 00 00 FF 
0baac     38 E4 85 F1 | 	sub	objptr, ##1080
0bab0     F2 2E 02 F1 | 	add	local05, objptr
0bab4     17 13 02 FB | 	rdlong	arg01, local05
0bab8     00 14 06 F6 | 	mov	arg02, #0
0babc     35 00 00 FF 
0bac0     0C E4 85 F1 | 	sub	objptr, ##27148
0bac4     B0 D3 B1 FD | 	call	#__system____builtin_atoi
0bac8     FD 2C 02 FD | 	qmul	local04, result1
0bacc     18 26 62 FD | 	getqx	local01
0bad0     1C 2A 06 F6 | 	mov	local03, #28
0bad4                 | LR__0982
0bad4                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0bad4     FF FF 7F FF 
0bad8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0badc     3C 00 90 5D |  if_ne	jmp	#LR__0983
0bae0     37 00 00 FF 
0bae4     44 E4 05 F1 | 	add	objptr, ##28228
0bae8     F2 2E 02 FB | 	rdlong	local05, objptr
0baec     03 2E 66 F0 | 	shl	local05, #3
0baf0     02 00 00 FF 
0baf4     38 E4 85 F1 | 	sub	objptr, ##1080
0baf8     F2 2E 02 F1 | 	add	local05, objptr
0bafc     17 13 02 FB | 	rdlong	arg01, local05
0bb00     00 14 06 F6 | 	mov	arg02, #0
0bb04     35 00 00 FF 
0bb08     0C E4 85 F1 | 	sub	objptr, ##27148
0bb0c     68 D3 B1 FD | 	call	#__system____builtin_atoi
0bb10     FD 2C 02 FD | 	qmul	local04, result1
0bb14     18 26 62 FD | 	getqx	local01
0bb18     1C 2A 06 F6 | 	mov	local03, #28
0bb1c                 | LR__0983
0bb1c     13 31 02 F6 | 	mov	local06, local01
0bb20     14 33 02 F6 | 	mov	local07, local02
0bb24     15 2F 02 F6 | 	mov	local05, local03
0bb28     4A 00 00 FF 
0bb2c     7C E4 05 F1 | 	add	objptr, ##38012
0bb30     F2 26 02 FB | 	rdlong	local01, objptr
0bb34     13 2D 02 F6 | 	mov	local04, local01
0bb38     01 2C 66 F0 | 	shl	local04, #1
0bb3c     13 2D 02 F1 | 	add	local04, local01
0bb40     02 2C 66 F0 | 	shl	local04, #2
0bb44     03 00 00 FF 
0bb48     00 E4 85 F1 | 	sub	objptr, ##1536
0bb4c     F2 2C 02 F1 | 	add	local04, objptr
0bb50     16 31 62 FC | 	wrlong	local06, local04
0bb54     03 00 00 FF 
0bb58     00 E4 05 F1 | 	add	objptr, ##1536
0bb5c     F2 30 02 FB | 	rdlong	local06, objptr
0bb60     18 27 02 F6 | 	mov	local01, local06
0bb64     01 26 66 F0 | 	shl	local01, #1
0bb68     18 27 02 F1 | 	add	local01, local06
0bb6c     02 26 66 F0 | 	shl	local01, #2
0bb70     03 00 00 FF 
0bb74     00 E4 85 F1 | 	sub	objptr, ##1536
0bb78     F2 26 02 F1 | 	add	local01, objptr
0bb7c     04 26 06 F1 | 	add	local01, #4
0bb80     13 33 62 FC | 	wrlong	local07, local01
0bb84     03 00 00 FF 
0bb88     00 E4 05 F1 | 	add	objptr, ##1536
0bb8c     F2 32 02 FB | 	rdlong	local07, objptr
0bb90     19 31 02 F6 | 	mov	local06, local07
0bb94     01 30 66 F0 | 	shl	local06, #1
0bb98     19 31 02 F1 | 	add	local06, local07
0bb9c     02 30 66 F0 | 	shl	local06, #2
0bba0     03 00 00 FF 
0bba4     00 E4 85 F1 | 	sub	objptr, ##1536
0bba8     F2 30 02 F1 | 	add	local06, objptr
0bbac     08 30 06 F1 | 	add	local06, #8
0bbb0     18 2F 62 FC | 	wrlong	local05, local06
0bbb4     03 00 00 FF 
0bbb8     00 E4 05 F1 | 	add	objptr, ##1536
0bbbc     F2 30 02 FB | 	rdlong	local06, objptr
0bbc0     01 30 06 F1 | 	add	local06, #1
0bbc4     F2 30 62 FC | 	wrlong	local06, objptr
0bbc8     13 00 00 FF 
0bbcc     38 E4 85 F1 | 	sub	objptr, ##9784
0bbd0     F2 30 02 FB | 	rdlong	local06, objptr
0bbd4     01 30 06 F1 | 	add	local06, #1
0bbd8     F2 30 62 FC | 	wrlong	local06, objptr
0bbdc     37 00 00 FF 
0bbe0     44 E4 85 F1 | 	sub	objptr, ##28228
0bbe4     E4 07 90 FD | 	jmp	#LR__1003
0bbe8                 | LR__0984
0bbe8                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0bbe8     37 00 00 FF 
0bbec     44 E4 05 F1 | 	add	objptr, ##28228
0bbf0     F2 16 02 FB | 	rdlong	arg03, objptr
0bbf4     03 16 66 F0 | 	shl	arg03, #3
0bbf8     02 00 00 FF 
0bbfc     38 E4 85 F1 | 	sub	objptr, ##1080
0bc00     F2 16 02 F1 | 	add	arg03, objptr
0bc04     0B 13 02 FB | 	rdlong	arg01, arg03
0bc08     01 14 06 F6 | 	mov	arg02, #1
0bc0c     35 00 00 FF 
0bc10     0C E4 85 F1 | 	sub	objptr, ##27148
0bc14     EC BD B1 FD | 	call	#__system__Left_S
0bc18     FD 12 02 F6 | 	mov	arg01, result1
0bc1c     AD 01 00 FF 
0bc20     CC 15 06 F6 | 	mov	arg02, ##@LR__5807
0bc24     88 9D B1 FD | 	call	#__system___string_cmp
0bc28     00 FA 0D F2 | 	cmp	result1, #0 wz
0bc2c     94 00 90 5D |  if_ne	jmp	#LR__0987
0bc30     37 00 00 FF 
0bc34     44 E4 05 F1 | 	add	objptr, ##28228
0bc38     F2 32 02 FB | 	rdlong	local07, objptr
0bc3c     19 31 02 F6 | 	mov	local06, local07
0bc40     03 30 66 F0 | 	shl	local06, #3
0bc44     02 00 00 FF 
0bc48     38 E4 85 F1 | 	sub	objptr, ##1080
0bc4c     F2 30 02 F1 | 	add	local06, objptr
0bc50     AD 01 00 FF 
0bc54     CE 2F 06 F6 | 	mov	local05, ##@LR__5808
0bc58     03 32 66 F0 | 	shl	local07, #3
0bc5c     F2 32 02 F1 | 	add	local07, objptr
0bc60     19 33 02 FB | 	rdlong	local07, local07
0bc64     02 00 00 FF 
0bc68     38 E4 05 F1 | 	add	objptr, ##1080
0bc6c     F2 26 02 FB | 	rdlong	local01, objptr
0bc70     03 26 66 F0 | 	shl	local01, #3
0bc74     02 00 00 FF 
0bc78     38 E4 85 F1 | 	sub	objptr, ##1080
0bc7c     F2 26 02 F1 | 	add	local01, objptr
0bc80     13 13 02 FB | 	rdlong	arg01, local01
0bc84     35 00 00 FF 
0bc88     0C E4 85 F1 | 	sub	objptr, ##27148
0bc8c     09 35 02 F6 | 	mov	local08, arg01
0bc90     97 06 48 FB | 	callpa	#(@LR__0986-@LR__0985)>>2,fcache_load_ptr_
0bc94                 | LR__0985
0bc94     1A FB C9 FA | 	rdbyte	result1, local08 wz
0bc98     01 34 06 51 |  if_ne	add	local08, #1
0bc9c     F4 FF 9F 5D |  if_ne	jmp	#LR__0985
0bca0                 | LR__0986
0bca0     09 35 82 F1 | 	sub	local08, arg01
0bca4     1A 15 02 F6 | 	mov	arg02, local08
0bca8     01 14 86 F1 | 	sub	arg02, #1
0bcac     19 13 02 F6 | 	mov	arg01, local07
0bcb0     D8 BD B1 FD | 	call	#__system__Right_S
0bcb4     FD 14 02 F6 | 	mov	arg02, result1
0bcb8     17 13 02 F6 | 	mov	arg01, local05
0bcbc     24 9D B1 FD | 	call	#__system___string_concat
0bcc0     18 FB 61 FC | 	wrlong	result1, local06
0bcc4                 | LR__0987
0bcc4                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0bcc4     37 00 00 FF 
0bcc8     44 E4 05 F1 | 	add	objptr, ##28228
0bccc     F2 16 02 FB | 	rdlong	arg03, objptr
0bcd0     03 16 66 F0 | 	shl	arg03, #3
0bcd4     02 00 00 FF 
0bcd8     38 E4 85 F1 | 	sub	objptr, ##1080
0bcdc     F2 16 02 F1 | 	add	arg03, objptr
0bce0     0B 13 02 FB | 	rdlong	arg01, arg03
0bce4     01 14 06 F6 | 	mov	arg02, #1
0bce8     35 00 00 FF 
0bcec     0C E4 85 F1 | 	sub	objptr, ##27148
0bcf0     10 BD B1 FD | 	call	#__system__Left_S
0bcf4     FD 12 02 F6 | 	mov	arg01, result1
0bcf8     AD 01 00 FF 
0bcfc     D1 15 06 F6 | 	mov	arg02, ##@LR__5809
0bd00     AC 9C B1 FD | 	call	#__system___string_cmp
0bd04     00 FA 0D F2 | 	cmp	result1, #0 wz
0bd08     94 00 90 5D |  if_ne	jmp	#LR__0990
0bd0c     37 00 00 FF 
0bd10     44 E4 05 F1 | 	add	objptr, ##28228
0bd14     F2 32 02 FB | 	rdlong	local07, objptr
0bd18     19 31 02 F6 | 	mov	local06, local07
0bd1c     03 30 66 F0 | 	shl	local06, #3
0bd20     02 00 00 FF 
0bd24     38 E4 85 F1 | 	sub	objptr, ##1080
0bd28     F2 30 02 F1 | 	add	local06, objptr
0bd2c     AD 01 00 FF 
0bd30     D3 2F 06 F6 | 	mov	local05, ##@LR__5810
0bd34     03 32 66 F0 | 	shl	local07, #3
0bd38     F2 32 02 F1 | 	add	local07, objptr
0bd3c     19 33 02 FB | 	rdlong	local07, local07
0bd40     02 00 00 FF 
0bd44     38 E4 05 F1 | 	add	objptr, ##1080
0bd48     F2 26 02 FB | 	rdlong	local01, objptr
0bd4c     03 26 66 F0 | 	shl	local01, #3
0bd50     02 00 00 FF 
0bd54     38 E4 85 F1 | 	sub	objptr, ##1080
0bd58     F2 26 02 F1 | 	add	local01, objptr
0bd5c     13 13 02 FB | 	rdlong	arg01, local01
0bd60     35 00 00 FF 
0bd64     0C E4 85 F1 | 	sub	objptr, ##27148
0bd68     09 35 02 F6 | 	mov	local08, arg01
0bd6c     97 06 48 FB | 	callpa	#(@LR__0989-@LR__0988)>>2,fcache_load_ptr_
0bd70                 | LR__0988
0bd70     1A FB C9 FA | 	rdbyte	result1, local08 wz
0bd74     01 34 06 51 |  if_ne	add	local08, #1
0bd78     F4 FF 9F 5D |  if_ne	jmp	#LR__0988
0bd7c                 | LR__0989
0bd7c     09 35 82 F1 | 	sub	local08, arg01
0bd80     1A 15 02 F6 | 	mov	arg02, local08
0bd84     01 14 86 F1 | 	sub	arg02, #1
0bd88     19 13 02 F6 | 	mov	arg01, local07
0bd8c     FC BC B1 FD | 	call	#__system__Right_S
0bd90     FD 14 02 F6 | 	mov	arg02, result1
0bd94     17 13 02 F6 | 	mov	arg01, local05
0bd98     48 9C B1 FD | 	call	#__system___string_concat
0bd9c     18 FB 61 FC | 	wrlong	result1, local06
0bda0                 | LR__0990
0bda0     37 00 00 FF 
0bda4     44 E4 05 F1 | 	add	objptr, ##28228
0bda8     F2 30 02 FB | 	rdlong	local06, objptr
0bdac     03 30 66 F0 | 	shl	local06, #3
0bdb0     02 00 00 FF 
0bdb4     38 E4 85 F1 | 	sub	objptr, ##1080
0bdb8     F2 30 02 F1 | 	add	local06, objptr
0bdbc     18 13 02 FB | 	rdlong	arg01, local06
0bdc0     00 14 06 F6 | 	mov	arg02, #0
0bdc4     35 00 00 FF 
0bdc8     0C E4 85 F1 | 	sub	objptr, ##27148
0bdcc     A8 D0 B1 FD | 	call	#__system____builtin_atoi
0bdd0     FD 2C 02 FD | 	qmul	local04, result1
0bdd4     4A 00 00 FF 
0bdd8     7C E4 05 F1 | 	add	objptr, ##38012
0bddc     F2 30 02 FB | 	rdlong	local06, objptr
0bde0     18 37 02 F6 | 	mov	local09, local06
0bde4     01 36 66 F0 | 	shl	local09, #1
0bde8     18 37 02 F1 | 	add	local09, local06
0bdec     02 36 66 F0 | 	shl	local09, #2
0bdf0     03 00 00 FF 
0bdf4     00 E4 85 F1 | 	sub	objptr, ##1536
0bdf8     F2 36 02 F1 | 	add	local09, objptr
0bdfc     03 00 00 FF 
0be00     00 E4 05 F1 | 	add	objptr, ##1536
0be04     18 26 62 FD | 	getqx	local01
0be08     1C 2A 06 F6 | 	mov	local03, #28
0be0c     13 31 02 F6 | 	mov	local06, local01
0be10     14 33 02 F6 | 	mov	local07, local02
0be14     1B 31 62 FC | 	wrlong	local06, local09
0be18     15 37 02 F6 | 	mov	local09, local03
0be1c     F2 30 02 FB | 	rdlong	local06, objptr
0be20     18 2F 02 F6 | 	mov	local05, local06
0be24     01 2E 66 F0 | 	shl	local05, #1
0be28     18 2F 02 F1 | 	add	local05, local06
0be2c     02 2E 66 F0 | 	shl	local05, #2
0be30     03 00 00 FF 
0be34     00 E4 85 F1 | 	sub	objptr, ##1536
0be38     F2 2E 02 F1 | 	add	local05, objptr
0be3c     04 2E 06 F1 | 	add	local05, #4
0be40     17 33 62 FC | 	wrlong	local07, local05
0be44     03 00 00 FF 
0be48     00 E4 05 F1 | 	add	objptr, ##1536
0be4c     F2 32 02 FB | 	rdlong	local07, objptr
0be50     19 31 02 F6 | 	mov	local06, local07
0be54     01 30 66 F0 | 	shl	local06, #1
0be58     19 31 02 F1 | 	add	local06, local07
0be5c     02 30 66 F0 | 	shl	local06, #2
0be60     03 00 00 FF 
0be64     00 E4 85 F1 | 	sub	objptr, ##1536
0be68     F2 30 02 F1 | 	add	local06, objptr
0be6c     08 30 06 F1 | 	add	local06, #8
0be70     18 37 62 FC | 	wrlong	local09, local06
0be74     03 00 00 FF 
0be78     00 E4 05 F1 | 	add	objptr, ##1536
0be7c     F2 30 02 FB | 	rdlong	local06, objptr
0be80     01 30 06 F1 | 	add	local06, #1
0be84     F2 30 62 FC | 	wrlong	local06, objptr
0be88     13 00 00 FF 
0be8c     38 E4 85 F1 | 	sub	objptr, ##9784
0be90     F2 30 02 FB | 	rdlong	local06, objptr
0be94     01 30 06 F1 | 	add	local06, #1
0be98     F2 30 62 FC | 	wrlong	local06, objptr
0be9c     37 00 00 FF 
0bea0     44 E4 85 F1 | 	sub	objptr, ##28228
0bea4     24 05 90 FD | 	jmp	#LR__1003
0bea8                 | LR__0991
0bea8                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0bea8     01 2C 0E F2 | 	cmp	local04, #1 wz
0beac     48 00 90 5D |  if_ne	jmp	#LR__0992
0beb0     00 C0 1F FF 
0beb4     00 30 06 F6 | 	mov	local06, ##1065353216
0beb8     37 00 00 FF 
0bebc     44 E4 05 F1 | 	add	objptr, ##28228
0bec0     F2 36 02 FB | 	rdlong	local09, objptr
0bec4     03 36 66 F0 | 	shl	local09, #3
0bec8     02 00 00 FF 
0becc     38 E4 85 F1 | 	sub	objptr, ##1080
0bed0     F2 36 02 F1 | 	add	local09, objptr
0bed4     1B 13 02 FB | 	rdlong	arg01, local09
0bed8     35 00 00 FF 
0bedc     0C E4 85 F1 | 	sub	objptr, ##27148
0bee0     28 D1 B1 FD | 	call	#__system____builtin_atof
0bee4     FD 14 02 F6 | 	mov	arg02, result1
0bee8     18 13 02 F6 | 	mov	arg01, local06
0beec     10 C9 B1 FD | 	call	#__system___float_mul
0bef0     FD 26 02 F6 | 	mov	local01, result1
0bef4     1E 2A 06 F6 | 	mov	local03, #30
0bef8                 | LR__0992
0bef8                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0bef8     FF FF 7F FF 
0befc     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0bf00     48 00 90 5D |  if_ne	jmp	#LR__0993
0bf04     00 C0 5F FF 
0bf08     00 30 06 F6 | 	mov	local06, ##-1082130432
0bf0c     37 00 00 FF 
0bf10     44 E4 05 F1 | 	add	objptr, ##28228
0bf14     F2 36 02 FB | 	rdlong	local09, objptr
0bf18     03 36 66 F0 | 	shl	local09, #3
0bf1c     02 00 00 FF 
0bf20     38 E4 85 F1 | 	sub	objptr, ##1080
0bf24     F2 36 02 F1 | 	add	local09, objptr
0bf28     1B 13 02 FB | 	rdlong	arg01, local09
0bf2c     35 00 00 FF 
0bf30     0C E4 85 F1 | 	sub	objptr, ##27148
0bf34     D4 D0 B1 FD | 	call	#__system____builtin_atof
0bf38     FD 14 02 F6 | 	mov	arg02, result1
0bf3c     18 13 02 F6 | 	mov	arg01, local06
0bf40     BC C8 B1 FD | 	call	#__system___float_mul
0bf44     FD 26 02 F6 | 	mov	local01, result1
0bf48     1E 2A 06 F6 | 	mov	local03, #30
0bf4c                 | LR__0993
0bf4c     13 31 02 F6 | 	mov	local06, local01
0bf50     14 33 02 F6 | 	mov	local07, local02
0bf54     15 2F 02 F6 | 	mov	local05, local03
0bf58     4A 00 00 FF 
0bf5c     7C E4 05 F1 | 	add	objptr, ##38012
0bf60     F2 26 02 FB | 	rdlong	local01, objptr
0bf64     13 37 02 F6 | 	mov	local09, local01
0bf68     01 36 66 F0 | 	shl	local09, #1
0bf6c     13 37 02 F1 | 	add	local09, local01
0bf70     02 36 66 F0 | 	shl	local09, #2
0bf74     03 00 00 FF 
0bf78     00 E4 85 F1 | 	sub	objptr, ##1536
0bf7c     F2 36 02 F1 | 	add	local09, objptr
0bf80     1B 31 62 FC | 	wrlong	local06, local09
0bf84     03 00 00 FF 
0bf88     00 E4 05 F1 | 	add	objptr, ##1536
0bf8c     F2 36 02 FB | 	rdlong	local09, objptr
0bf90     1B 31 02 F6 | 	mov	local06, local09
0bf94     01 30 66 F0 | 	shl	local06, #1
0bf98     1B 31 02 F1 | 	add	local06, local09
0bf9c     02 30 66 F0 | 	shl	local06, #2
0bfa0     03 00 00 FF 
0bfa4     00 E4 85 F1 | 	sub	objptr, ##1536
0bfa8     F2 30 02 F1 | 	add	local06, objptr
0bfac     04 30 06 F1 | 	add	local06, #4
0bfb0     18 33 62 FC | 	wrlong	local07, local06
0bfb4     03 00 00 FF 
0bfb8     00 E4 05 F1 | 	add	objptr, ##1536
0bfbc     F2 36 02 FB | 	rdlong	local09, objptr
0bfc0     1B 33 02 F6 | 	mov	local07, local09
0bfc4     01 32 66 F0 | 	shl	local07, #1
0bfc8     1B 33 02 F1 | 	add	local07, local09
0bfcc     02 32 66 F0 | 	shl	local07, #2
0bfd0     03 00 00 FF 
0bfd4     00 E4 85 F1 | 	sub	objptr, ##1536
0bfd8     F2 32 02 F1 | 	add	local07, objptr
0bfdc     08 32 06 F1 | 	add	local07, #8
0bfe0     19 2F 62 FC | 	wrlong	local05, local07
0bfe4     03 00 00 FF 
0bfe8     00 E4 05 F1 | 	add	objptr, ##1536
0bfec     F2 30 02 FB | 	rdlong	local06, objptr
0bff0     01 30 06 F1 | 	add	local06, #1
0bff4     F2 30 62 FC | 	wrlong	local06, objptr
0bff8     13 00 00 FF 
0bffc     38 E4 85 F1 | 	sub	objptr, ##9784
0c000     F2 30 02 FB | 	rdlong	local06, objptr
0c004     01 30 06 F1 | 	add	local06, #1
0c008     F2 30 62 FC | 	wrlong	local06, objptr
0c00c     37 00 00 FF 
0c010     44 E4 85 F1 | 	sub	objptr, ##28228
0c014     B4 03 90 FD | 	jmp	#LR__1003
0c018                 | LR__0994
0c018     37 00 00 FF 
0c01c     44 E4 05 F1 | 	add	objptr, ##28228
0c020     F2 16 02 FB | 	rdlong	arg03, objptr
0c024     03 16 66 F0 | 	shl	arg03, #3
0c028     02 00 00 FF 
0c02c     38 E4 85 F1 | 	sub	objptr, ##1080
0c030     F2 16 02 F1 | 	add	arg03, objptr
0c034     0B 13 02 FB | 	rdlong	arg01, arg03
0c038     35 00 00 FF 
0c03c     0C E4 85 F1 | 	sub	objptr, ##27148
0c040     09 35 02 F6 | 	mov	local08, arg01
0c044     97 06 48 FB | 	callpa	#(@LR__0996-@LR__0995)>>2,fcache_load_ptr_
0c048                 | LR__0995
0c048     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c04c     01 34 06 51 |  if_ne	add	local08, #1
0c050     F4 FF 9F 5D |  if_ne	jmp	#LR__0995
0c054                 | LR__0996
0c054     09 35 82 F1 | 	sub	local08, arg01
0c058     1A FB 01 F6 | 	mov	result1, local08
0c05c     52 00 00 FF 
0c060     9C E4 05 F1 | 	add	objptr, ##42140
0c064     F2 FA 61 FC | 	wrlong	result1, objptr
0c068     58 E4 85 F1 | 	sub	objptr, #88
0c06c     F2 12 02 FB | 	rdlong	arg01, objptr
0c070     FD 12 82 F1 | 	sub	arg01, result1
0c074     04 12 86 F1 | 	sub	arg01, #4
0c078     03 12 26 F5 | 	andn	arg01, #3
0c07c     F2 12 62 FC | 	wrlong	arg01, objptr
0c080     58 E4 05 F1 | 	add	objptr, #88
0c084     F2 14 02 FB | 	rdlong	arg02, objptr
0c088     52 00 00 FF 
0c08c     9C E4 85 F1 | 	sub	objptr, ##42140
0c090     A8 60 B1 FD | 	call	#_pslpoke
0c094                 | '     pslpoke memtop,l
0c094                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0c094     01 38 06 F6 | 	mov	local10, #1
0c098     52 00 00 FF 
0c09c     9C E4 05 F1 | 	add	objptr, ##42140
0c0a0     F2 3A 02 FB | 	rdlong	local11, objptr
0c0a4     52 00 00 FF 
0c0a8     9C E4 85 F1 | 	sub	objptr, ##42140
0c0ac     01 3A 06 F1 | 	add	local11, #1
0c0b0                 | LR__0997
0c0b0     1D 39 52 F2 | 	cmps	local10, local11 wc
0c0b4     5C 00 90 3D |  if_ae	jmp	#LR__0998
0c0b8     52 00 00 FF 
0c0bc     44 E4 05 F1 | 	add	objptr, ##42052
0c0c0     F2 32 02 FB | 	rdlong	local07, objptr
0c0c4     03 32 06 F1 | 	add	local07, #3
0c0c8     1C 33 02 F1 | 	add	local07, local10
0c0cc     1B 00 00 FF 
0c0d0     00 E4 85 F1 | 	sub	objptr, ##13824
0c0d4     F2 36 02 FB | 	rdlong	local09, objptr
0c0d8     03 36 66 F0 | 	shl	local09, #3
0c0dc     02 00 00 FF 
0c0e0     38 E4 85 F1 | 	sub	objptr, ##1080
0c0e4     F2 36 02 F1 | 	add	local09, objptr
0c0e8     1B 13 02 FB | 	rdlong	arg01, local09
0c0ec     1C 15 02 F6 | 	mov	arg02, local10
0c0f0     01 16 06 F6 | 	mov	arg03, #1
0c0f4     35 00 00 FF 
0c0f8     0C E4 85 F1 | 	sub	objptr, ##27148
0c0fc     1C BA B1 FD | 	call	#__system__Mid_S
0c100     FD 14 C2 FA | 	rdbyte	arg02, result1
0c104     19 13 02 F6 | 	mov	arg01, local07
0c108     C0 60 B1 FD | 	call	#_pspoke
0c10c     01 38 06 F1 | 	add	local10, #1
0c110     9C FF 9F FD | 	jmp	#LR__0997
0c114                 | LR__0998
0c114     52 00 00 FF 
0c118     44 E4 05 F1 | 	add	objptr, ##42052
0c11c     F2 26 02 FB | 	rdlong	local01, objptr
0c120     2B 2A 06 F6 | 	mov	local03, #43
0c124     13 31 02 F6 | 	mov	local06, local01
0c128     14 33 02 F6 | 	mov	local07, local02
0c12c     15 3B 02 F6 | 	mov	local11, local03
0c130     07 00 00 FF 
0c134     C8 E5 85 F1 | 	sub	objptr, ##4040
0c138     F2 38 02 FB | 	rdlong	local10, objptr
0c13c     1C 37 02 F6 | 	mov	local09, local10
0c140     01 36 66 F0 | 	shl	local09, #1
0c144     1C 37 02 F1 | 	add	local09, local10
0c148     02 36 66 F0 | 	shl	local09, #2
0c14c     03 00 00 FF 
0c150     00 E4 85 F1 | 	sub	objptr, ##1536
0c154     F2 36 02 F1 | 	add	local09, objptr
0c158     1B 31 62 FC | 	wrlong	local06, local09
0c15c     03 00 00 FF 
0c160     00 E4 05 F1 | 	add	objptr, ##1536
0c164     F2 38 02 FB | 	rdlong	local10, objptr
0c168     1C 37 02 F6 | 	mov	local09, local10
0c16c     01 36 66 F0 | 	shl	local09, #1
0c170     1C 37 02 F1 | 	add	local09, local10
0c174     02 36 66 F0 | 	shl	local09, #2
0c178     03 00 00 FF 
0c17c     00 E4 85 F1 | 	sub	objptr, ##1536
0c180     F2 36 02 F1 | 	add	local09, objptr
0c184     04 36 06 F1 | 	add	local09, #4
0c188     1B 33 62 FC | 	wrlong	local07, local09
0c18c     03 00 00 FF 
0c190     00 E4 05 F1 | 	add	objptr, ##1536
0c194     F2 38 02 FB | 	rdlong	local10, objptr
0c198     1C 37 02 F6 | 	mov	local09, local10
0c19c     01 36 66 F0 | 	shl	local09, #1
0c1a0     1C 37 02 F1 | 	add	local09, local10
0c1a4     02 36 66 F0 | 	shl	local09, #2
0c1a8     03 00 00 FF 
0c1ac     00 E4 85 F1 | 	sub	objptr, ##1536
0c1b0     F2 36 02 F1 | 	add	local09, objptr
0c1b4     08 36 06 F1 | 	add	local09, #8
0c1b8     1B 3B 62 FC | 	wrlong	local11, local09
0c1bc     03 00 00 FF 
0c1c0     00 E4 05 F1 | 	add	objptr, ##1536
0c1c4     F2 30 02 FB | 	rdlong	local06, objptr
0c1c8     01 30 06 F1 | 	add	local06, #1
0c1cc     F2 30 62 FC | 	wrlong	local06, objptr
0c1d0     13 00 00 FF 
0c1d4     38 E4 85 F1 | 	sub	objptr, ##9784
0c1d8     F2 30 02 FB | 	rdlong	local06, objptr
0c1dc     01 30 06 F1 | 	add	local06, #1
0c1e0     F2 30 62 FC | 	wrlong	local06, objptr
0c1e4     37 00 00 FF 
0c1e8     44 E4 85 F1 | 	sub	objptr, ##28228
0c1ec     DC 01 90 FD | 	jmp	#LR__1003
0c1f0                 | LR__0999
0c1f0     2C 2A 06 F6 | 	mov	local03, #44
0c1f4     37 00 00 FF 
0c1f8     44 E4 05 F1 | 	add	objptr, ##28228
0c1fc     F2 30 02 FB | 	rdlong	local06, objptr
0c200     03 30 66 F0 | 	shl	local06, #3
0c204     02 00 00 FF 
0c208     38 E4 85 F1 | 	sub	objptr, ##1080
0c20c     F2 30 02 F1 | 	add	local06, objptr
0c210     18 13 02 FB | 	rdlong	arg01, local06
0c214     00 14 06 F6 | 	mov	arg02, #0
0c218     35 00 00 FF 
0c21c     0C E4 85 F1 | 	sub	objptr, ##27148
0c220     54 CC B1 FD | 	call	#__system____builtin_atoi
0c224     FD 26 02 F6 | 	mov	local01, result1
0c228     13 31 02 F6 | 	mov	local06, local01
0c22c     14 33 02 F6 | 	mov	local07, local02
0c230     15 3B 02 F6 | 	mov	local11, local03
0c234     4A 00 00 FF 
0c238     7C E4 05 F1 | 	add	objptr, ##38012
0c23c     F2 38 02 FB | 	rdlong	local10, objptr
0c240     1C 37 02 F6 | 	mov	local09, local10
0c244     01 36 66 F0 | 	shl	local09, #1
0c248     1C 37 02 F1 | 	add	local09, local10
0c24c     02 36 66 F0 | 	shl	local09, #2
0c250     03 00 00 FF 
0c254     00 E4 85 F1 | 	sub	objptr, ##1536
0c258     F2 36 02 F1 | 	add	local09, objptr
0c25c     1B 31 62 FC | 	wrlong	local06, local09
0c260     03 00 00 FF 
0c264     00 E4 05 F1 | 	add	objptr, ##1536
0c268     F2 38 02 FB | 	rdlong	local10, objptr
0c26c     1C 37 02 F6 | 	mov	local09, local10
0c270     01 36 66 F0 | 	shl	local09, #1
0c274     1C 37 02 F1 | 	add	local09, local10
0c278     02 36 66 F0 | 	shl	local09, #2
0c27c     03 00 00 FF 
0c280     00 E4 85 F1 | 	sub	objptr, ##1536
0c284     F2 36 02 F1 | 	add	local09, objptr
0c288     04 36 06 F1 | 	add	local09, #4
0c28c     1B 33 62 FC | 	wrlong	local07, local09
0c290     03 00 00 FF 
0c294     00 E4 05 F1 | 	add	objptr, ##1536
0c298     F2 38 02 FB | 	rdlong	local10, objptr
0c29c     1C 37 02 F6 | 	mov	local09, local10
0c2a0     01 36 66 F0 | 	shl	local09, #1
0c2a4     1C 37 02 F1 | 	add	local09, local10
0c2a8     02 36 66 F0 | 	shl	local09, #2
0c2ac     03 00 00 FF 
0c2b0     00 E4 85 F1 | 	sub	objptr, ##1536
0c2b4     F2 36 02 F1 | 	add	local09, objptr
0c2b8     08 36 06 F1 | 	add	local09, #8
0c2bc     1B 3B 62 FC | 	wrlong	local11, local09
0c2c0     03 00 00 FF 
0c2c4     00 E4 05 F1 | 	add	objptr, ##1536
0c2c8     F2 30 02 FB | 	rdlong	local06, objptr
0c2cc     01 30 06 F1 | 	add	local06, #1
0c2d0     F2 30 62 FC | 	wrlong	local06, objptr
0c2d4     13 00 00 FF 
0c2d8     38 E4 85 F1 | 	sub	objptr, ##9784
0c2dc     F2 30 02 FB | 	rdlong	local06, objptr
0c2e0     01 30 06 F1 | 	add	local06, #1
0c2e4     F2 30 62 FC | 	wrlong	local06, objptr
0c2e8     37 00 00 FF 
0c2ec     44 E4 85 F1 | 	sub	objptr, ##28228
0c2f0     D8 00 90 FD | 	jmp	#LR__1003
0c2f4                 | LR__1000
0c2f4     16 13 02 F6 | 	mov	arg01, local04
0c2f8     24 04 B0 FD | 	call	#_getvar
0c2fc     37 00 00 FF 
0c300     44 E4 05 F1 | 	add	objptr, ##28228
0c304     F2 30 02 FB | 	rdlong	local06, objptr
0c308     01 30 06 F1 | 	add	local06, #1
0c30c     F2 30 62 FC | 	wrlong	local06, objptr
0c310     37 00 00 FF 
0c314     44 E4 85 F1 | 	sub	objptr, ##28228
0c318                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0c318     01 FA 55 F2 | 	cmps	result1, #1 wc
0c31c     B0 00 90 3D |  if_ae	jmp	#LR__1004
0c320     A8 00 90 FD | 	jmp	#LR__1003
0c324                 | LR__1001
0c324     37 00 00 FF 
0c328     44 E4 05 F1 | 	add	objptr, ##28228
0c32c     F2 30 02 FB | 	rdlong	local06, objptr
0c330     01 30 06 F1 | 	add	local06, #1
0c334     F2 30 62 FC | 	wrlong	local06, objptr
0c338     37 00 00 FF 
0c33c     44 E4 85 F1 | 	sub	objptr, ##28228
0c340     20 F1 BF FD | 	call	#_expr
0c344                 | '     ct+=1
0c344                 | '     err=expr() : if err>0 then return err 
0c344     01 FA 55 F2 | 	cmps	result1, #1 wc
0c348     84 00 90 3D |  if_ae	jmp	#LR__1004
0c34c                 | '     if lparts(ct).token=token_rpar then ct+=1
0c34c     37 00 00 FF 
0c350     44 E4 05 F1 | 	add	objptr, ##28228
0c354     F2 3A 02 FB | 	rdlong	local11, objptr
0c358     03 3A 66 F0 | 	shl	local11, #3
0c35c     02 00 00 FF 
0c360     38 E4 85 F1 | 	sub	objptr, ##1080
0c364     F2 3A 02 F1 | 	add	local11, objptr
0c368     04 3A 06 F1 | 	add	local11, #4
0c36c     1D 3B 02 FB | 	rdlong	local11, local11
0c370     14 3A 0E F2 | 	cmp	local11, #20 wz
0c374     35 00 00 FF 
0c378     0C E4 85 F1 | 	sub	objptr, ##27148
0c37c     4C 00 90 5D |  if_ne	jmp	#LR__1003
0c380     37 00 00 FF 
0c384     44 E4 05 F1 | 	add	objptr, ##28228
0c388     F2 30 02 FB | 	rdlong	local06, objptr
0c38c     01 30 06 F1 | 	add	local06, #1
0c390     F2 30 62 FC | 	wrlong	local06, objptr
0c394     37 00 00 FF 
0c398     44 E4 85 F1 | 	sub	objptr, ##28228
0c39c     2C 00 90 FD | 	jmp	#LR__1003
0c3a0                 | LR__1002
0c3a0     16 13 02 F6 | 	mov	arg01, local04
0c3a4     34 00 B0 FD | 	call	#_getfun
0c3a8     37 00 00 FF 
0c3ac     44 E4 05 F1 | 	add	objptr, ##28228
0c3b0     F2 30 02 FB | 	rdlong	local06, objptr
0c3b4     01 30 06 F1 | 	add	local06, #1
0c3b8     F2 30 62 FC | 	wrlong	local06, objptr
0c3bc     37 00 00 FF 
0c3c0     44 E4 85 F1 | 	sub	objptr, ##28228
0c3c4                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0c3c4     01 FA 55 F2 | 	cmps	result1, #1 wc
0c3c8     04 00 90 3D |  if_ae	jmp	#LR__1004
0c3cc                 | LR__1003
0c3cc                 | ' return 0  
0c3cc     00 FA 05 F6 | 	mov	result1, #0
0c3d0                 | LR__1004
0c3d0     A7 F0 03 F6 | 	mov	ptra, fp
0c3d4     B2 00 A0 FD | 	call	#popregs_
0c3d8                 | _getvalue_ret
0c3d8     2D 00 64 FD | 	ret
0c3dc                 | 
0c3dc                 | ' 
0c3dc                 | ' ' Get a function result 
0c3dc                 | ' 
0c3dc                 | ' function getfun(m as integer) as ulong
0c3dc                 | _getfun
0c3dc     0F 4A 05 F6 | 	mov	COUNT_, #15
0c3e0     A8 00 A0 FD | 	call	#pushregs_
0c3e4                 | _getfun_enter
0c3e4     09 2D 02 F6 | 	mov	local04, arg01
0c3e8     37 00 00 FF 
0c3ec     44 E4 05 F1 | 	add	objptr, ##28228
0c3f0     F2 2E 02 FB | 	rdlong	local05, objptr
0c3f4     17 31 02 F6 | 	mov	local06, local05
0c3f8     00 32 06 F6 | 	mov	local07, #0
0c3fc                 | ' oldct=ct
0c3fc                 | ' numpar=0
0c3fc                 | ' if lparts(ct+1).token=token_lpar then
0c3fc     01 2E 06 F1 | 	add	local05, #1
0c400     03 2E 66 F0 | 	shl	local05, #3
0c404     02 00 00 FF 
0c408     38 E4 85 F1 | 	sub	objptr, ##1080
0c40c     F2 2E 02 F1 | 	add	local05, objptr
0c410     04 2E 06 F1 | 	add	local05, #4
0c414     17 2F 02 FB | 	rdlong	local05, local05
0c418     15 2E 0E F2 | 	cmp	local05, #21 wz
0c41c     35 00 00 FF 
0c420     0C E4 85 F1 | 	sub	objptr, ##27148
0c424     54 01 90 5D |  if_ne	jmp	#LR__1014
0c428     37 00 00 FF 
0c42c     44 E4 05 F1 | 	add	objptr, ##28228
0c430     F2 34 02 FB | 	rdlong	local08, objptr
0c434     01 34 06 F1 | 	add	local08, #1
0c438     F2 34 62 FC | 	wrlong	local08, objptr
0c43c     37 00 00 FF 
0c440     44 E4 85 F1 | 	sub	objptr, ##28228
0c444                 | '   ct+=1 											' omit this lpar, this is for expr list
0c444                 | '   do
0c444                 | LR__1010
0c444     37 00 00 FF 
0c448     44 E4 05 F1 | 	add	objptr, ##28228
0c44c     F2 2E 02 FB | 	rdlong	local05, objptr
0c450     01 2E 06 F1 | 	add	local05, #1
0c454     F2 2E 62 FC | 	wrlong	local05, objptr
0c458                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0c458                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0c458     03 2E 66 F0 | 	shl	local05, #3
0c45c     02 00 00 FF 
0c460     38 E4 85 F1 | 	sub	objptr, ##1080
0c464     F2 2E 02 F1 | 	add	local05, objptr
0c468     04 2E 06 F1 | 	add	local05, #4
0c46c     17 35 02 FB | 	rdlong	local08, local05
0c470     15 34 0E F2 | 	cmp	local08, #21 wz
0c474     35 00 00 FF 
0c478     0C E4 85 F1 | 	sub	objptr, ##27148
0c47c     44 00 90 5D |  if_ne	jmp	#LR__1011
0c480     37 00 00 FF 
0c484     44 E4 05 F1 | 	add	objptr, ##28228
0c488     F2 34 02 FB | 	rdlong	local08, objptr
0c48c     01 34 06 F1 | 	add	local08, #1
0c490     F2 34 62 FC | 	wrlong	local08, objptr
0c494     37 00 00 FF 
0c498     44 E4 85 F1 | 	sub	objptr, ##28228
0c49c     C4 EF BF FD | 	call	#_expr
0c4a0     FD 36 02 F6 | 	mov	local09, result1
0c4a4     37 00 00 FF 
0c4a8     44 E4 05 F1 | 	add	objptr, ##28228
0c4ac     F2 34 02 FB | 	rdlong	local08, objptr
0c4b0     01 34 06 F1 | 	add	local08, #1
0c4b4     F2 34 62 FC | 	wrlong	local08, objptr
0c4b8     37 00 00 FF 
0c4bc     44 E4 85 F1 | 	sub	objptr, ##28228
0c4c0     08 00 90 FD | 	jmp	#LR__1012
0c4c4                 | LR__1011
0c4c4     9C EF BF FD | 	call	#_expr
0c4c8     FD 36 02 F6 | 	mov	local09, result1
0c4cc                 | LR__1012
0c4cc                 | '     if err>0 then return err
0c4cc     01 36 16 F2 | 	cmp	local09, #1 wc
0c4d0     1B FB 01 36 |  if_ae	mov	result1, local09
0c4d4     3C 02 90 3D |  if_ae	jmp	#LR__1016
0c4d8     01 32 06 F1 | 	add	local07, #1
0c4dc     37 00 00 FF 
0c4e0     44 E4 05 F1 | 	add	objptr, ##28228
0c4e4     F2 2E 02 FB | 	rdlong	local05, objptr
0c4e8     03 2E 66 F0 | 	shl	local05, #3
0c4ec     02 00 00 FF 
0c4f0     38 E4 85 F1 | 	sub	objptr, ##1080
0c4f4     F2 2E 02 F1 | 	add	local05, objptr
0c4f8     04 2E 06 F1 | 	add	local05, #4
0c4fc     17 37 02 FB | 	rdlong	local09, local05
0c500     14 36 0E F2 | 	cmp	local09, #20 wz
0c504     35 00 00 FF 
0c508     0C E4 85 F1 | 	sub	objptr, ##27148
0c50c     34 00 90 AD |  if_e	jmp	#LR__1013
0c510     37 00 00 FF 
0c514     44 E4 05 F1 | 	add	objptr, ##28228
0c518     F2 36 02 FB | 	rdlong	local09, objptr
0c51c     03 36 66 F0 | 	shl	local09, #3
0c520     02 00 00 FF 
0c524     38 E4 85 F1 | 	sub	objptr, ##1080
0c528     F2 36 02 F1 | 	add	local09, objptr
0c52c     04 36 06 F1 | 	add	local09, #4
0c530     1B 37 02 FB | 	rdlong	local09, local09
0c534     FE 37 0E F2 | 	cmp	local09, #510 wz
0c538     35 00 00 FF 
0c53c     0C E4 85 F1 | 	sub	objptr, ##27148
0c540     00 FF 9F 5D |  if_ne	jmp	#LR__1010
0c544                 | LR__1013
0c544                 | '   if lparts(ct).token=token_end then return 14
0c544     37 00 00 FF 
0c548     44 E4 05 F1 | 	add	objptr, ##28228
0c54c     F2 2E 02 FB | 	rdlong	local05, objptr
0c550     03 2E 66 F0 | 	shl	local05, #3
0c554     02 00 00 FF 
0c558     38 E4 85 F1 | 	sub	objptr, ##1080
0c55c     F2 2E 02 F1 | 	add	local05, objptr
0c560     04 2E 06 F1 | 	add	local05, #4
0c564     17 37 02 FB | 	rdlong	local09, local05
0c568     FE 37 0E F2 | 	cmp	local09, #510 wz
0c56c     35 00 00 FF 
0c570     0C E4 85 F1 | 	sub	objptr, ##27148
0c574     0E FA 05 A6 |  if_e	mov	result1, #14
0c578     98 01 90 AD |  if_e	jmp	#LR__1016
0c57c                 | LR__1014
0c57c     19 27 02 F6 | 	mov	local01, local07
0c580     03 30 66 F0 | 	shl	local06, #3
0c584     35 00 00 FF 
0c588     0C E4 05 F1 | 	add	objptr, ##27148
0c58c     F2 30 02 F1 | 	add	local06, objptr
0c590     04 30 06 F1 | 	add	local06, #4
0c594     18 2B 02 FB | 	rdlong	local03, local06
0c598     13 35 02 F6 | 	mov	local08, local01
0c59c     14 39 02 F6 | 	mov	local10, local02
0c5a0     15 3B 02 F6 | 	mov	local11, local03
0c5a4     15 00 00 FF 
0c5a8     70 E4 05 F1 | 	add	objptr, ##10864
0c5ac     F2 3C 02 FB | 	rdlong	local12, objptr
0c5b0     1E 3F 02 F6 | 	mov	local13, local12
0c5b4     01 3E 66 F0 | 	shl	local13, #1
0c5b8     1E 3F 02 F1 | 	add	local13, local12
0c5bc     02 3E 66 F0 | 	shl	local13, #2
0c5c0     03 00 00 FF 
0c5c4     00 E4 85 F1 | 	sub	objptr, ##1536
0c5c8     F2 3E 02 F1 | 	add	local13, objptr
0c5cc     1F 35 62 FC | 	wrlong	local08, local13
0c5d0     03 00 00 FF 
0c5d4     00 E4 05 F1 | 	add	objptr, ##1536
0c5d8     F2 34 02 FB | 	rdlong	local08, objptr
0c5dc     1A 41 02 F6 | 	mov	local14, local08
0c5e0     01 40 66 F0 | 	shl	local14, #1
0c5e4     1A 41 02 F1 | 	add	local14, local08
0c5e8     02 40 66 F0 | 	shl	local14, #2
0c5ec     03 00 00 FF 
0c5f0     00 E4 85 F1 | 	sub	objptr, ##1536
0c5f4     F2 40 02 F1 | 	add	local14, objptr
0c5f8     04 40 06 F1 | 	add	local14, #4
0c5fc     20 39 62 FC | 	wrlong	local10, local14
0c600     03 00 00 FF 
0c604     00 E4 05 F1 | 	add	objptr, ##1536
0c608     F2 34 02 FB | 	rdlong	local08, objptr
0c60c     1A 43 02 F6 | 	mov	local15, local08
0c610     01 42 66 F0 | 	shl	local15, #1
0c614     1A 43 02 F1 | 	add	local15, local08
0c618     02 42 66 F0 | 	shl	local15, #2
0c61c     03 00 00 FF 
0c620     00 E4 85 F1 | 	sub	objptr, ##1536
0c624     F2 42 02 F1 | 	add	local15, objptr
0c628     08 42 06 F1 | 	add	local15, #8
0c62c     21 3B 62 FC | 	wrlong	local11, local15
0c630     03 00 00 FF 
0c634     00 E4 05 F1 | 	add	objptr, ##1536
0c638     F2 34 02 FB | 	rdlong	local08, objptr
0c63c     01 34 06 F1 | 	add	local08, #1
0c640     F2 34 62 FC | 	wrlong	local08, objptr
0c644     4A 00 00 FF 
0c648     7C E4 85 F1 | 	sub	objptr, ##38012
0c64c                 | ' t2.result.uresult=numpar
0c64c                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0c64c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0c64c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0c64c     FF FF 7F FF 
0c650     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c654     B8 00 90 5D |  if_ne	jmp	#LR__1015
0c658     15 2A 06 F6 | 	mov	local03, #21
0c65c     13 35 02 F6 | 	mov	local08, local01
0c660     14 39 02 F6 | 	mov	local10, local02
0c664     15 3B 02 F6 | 	mov	local11, local03
0c668     4A 00 00 FF 
0c66c     7C E4 05 F1 | 	add	objptr, ##38012
0c670     F2 3C 02 FB | 	rdlong	local12, objptr
0c674     1E 3F 02 F6 | 	mov	local13, local12
0c678     01 3E 66 F0 | 	shl	local13, #1
0c67c     1E 3F 02 F1 | 	add	local13, local12
0c680     02 3E 66 F0 | 	shl	local13, #2
0c684     03 00 00 FF 
0c688     00 E4 85 F1 | 	sub	objptr, ##1536
0c68c     F2 3E 02 F1 | 	add	local13, objptr
0c690     1F 35 62 FC | 	wrlong	local08, local13
0c694     03 00 00 FF 
0c698     00 E4 05 F1 | 	add	objptr, ##1536
0c69c     F2 42 02 FB | 	rdlong	local15, objptr
0c6a0     21 41 02 F6 | 	mov	local14, local15
0c6a4     01 40 66 F0 | 	shl	local14, #1
0c6a8     21 41 02 F1 | 	add	local14, local15
0c6ac     02 40 66 F0 | 	shl	local14, #2
0c6b0     03 00 00 FF 
0c6b4     00 E4 85 F1 | 	sub	objptr, ##1536
0c6b8     F2 40 02 F1 | 	add	local14, objptr
0c6bc     04 40 06 F1 | 	add	local14, #4
0c6c0     20 39 62 FC | 	wrlong	local10, local14
0c6c4     03 00 00 FF 
0c6c8     00 E4 05 F1 | 	add	objptr, ##1536
0c6cc     F2 40 02 FB | 	rdlong	local14, objptr
0c6d0     20 43 02 F6 | 	mov	local15, local14
0c6d4     01 42 66 F0 | 	shl	local15, #1
0c6d8     20 43 02 F1 | 	add	local15, local14
0c6dc     02 42 66 F0 | 	shl	local15, #2
0c6e0     03 00 00 FF 
0c6e4     00 E4 85 F1 | 	sub	objptr, ##1536
0c6e8     F2 42 02 F1 | 	add	local15, objptr
0c6ec     08 42 06 F1 | 	add	local15, #8
0c6f0     21 3B 62 FC | 	wrlong	local11, local15
0c6f4     03 00 00 FF 
0c6f8     00 E4 05 F1 | 	add	objptr, ##1536
0c6fc     F2 34 02 FB | 	rdlong	local08, objptr
0c700     01 34 06 F1 | 	add	local08, #1
0c704     F2 34 62 FC | 	wrlong	local08, objptr
0c708     4A 00 00 FF 
0c70c     7C E4 85 F1 | 	sub	objptr, ##38012
0c710                 | LR__1015
0c710                 | ' return 0
0c710     00 FA 05 F6 | 	mov	result1, #0
0c714                 | LR__1016
0c714     A7 F0 03 F6 | 	mov	ptra, fp
0c718     B2 00 A0 FD | 	call	#popregs_
0c71c                 | _getfun_ret
0c71c     2D 00 64 FD | 	ret
0c720                 | 
0c720                 | '   
0c720                 | '   
0c720                 | ' function getvar(m as integer) as ulong
0c720                 | _getvar
0c720     11 4A 05 F6 | 	mov	COUNT_, #17
0c724     A8 00 A0 FD | 	call	#pushregs_
0c728                 | _getvar_enter
0c728     09 2D 02 F6 | 	mov	local04, arg01
0c72c     37 00 00 FF 
0c730     44 E4 05 F1 | 	add	objptr, ##28228
0c734     F2 2E 02 FB | 	rdlong	local05, objptr
0c738     03 2E 66 F0 | 	shl	local05, #3
0c73c     02 00 00 FF 
0c740     38 E4 85 F1 | 	sub	objptr, ##1080
0c744     F2 2E 02 F1 | 	add	local05, objptr
0c748     17 31 02 FB | 	rdlong	local06, local05
0c74c     01 32 66 F6 | 	neg	local07, #1
0c750                 | ' 
0c750                 | ' varname$=lparts(ct).part$
0c750                 | ' j=-1
0c750                 | ' 
0c750                 | ' for i=0 to varnum-1
0c750     00 34 06 F6 | 	mov	local08, #0
0c754     04 E4 85 F1 | 	sub	objptr, #4
0c758     F2 36 02 FB | 	rdlong	local09, objptr
0c75c     35 00 00 FF 
0c760     08 E4 85 F1 | 	sub	objptr, ##27144
0c764                 | LR__1020
0c764     1B 35 52 F2 | 	cmps	local08, local09 wc
0c768     38 00 90 3D |  if_ae	jmp	#LR__1021
0c76c                 | '   if variables(i).name=varname$ then j=i : exit
0c76c     1A 2F 02 F6 | 	mov	local05, local08
0c770     04 2E 66 F0 | 	shl	local05, #4
0c774     14 00 00 FF 
0c778     F8 E5 05 F1 | 	add	objptr, ##10744
0c77c     F2 2E 02 F1 | 	add	local05, objptr
0c780     17 13 02 FB | 	rdlong	arg01, local05
0c784     18 15 02 F6 | 	mov	arg02, local06
0c788     14 00 00 FF 
0c78c     F8 E5 85 F1 | 	sub	objptr, ##10744
0c790     1C 92 B1 FD | 	call	#__system___string_cmp
0c794     00 FA 0D F2 | 	cmp	result1, #0 wz
0c798     1A 33 02 A6 |  if_e	mov	local07, local08
0c79c     01 34 06 51 |  if_ne	add	local08, #1
0c7a0     C0 FF 9F 5D |  if_ne	jmp	#LR__1020
0c7a4                 | LR__1021
0c7a4                 | ' if  j=-1 andalso varnum<maxvars then   
0c7a4     FF FF 7F FF 
0c7a8     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0c7ac     A8 00 90 5D |  if_ne	jmp	#LR__1022
0c7b0     35 00 00 FF 
0c7b4     08 E4 05 F1 | 	add	objptr, ##27144
0c7b8     F2 36 02 FB | 	rdlong	local09, objptr
0c7bc     35 00 00 FF 
0c7c0     08 E4 85 F1 | 	sub	objptr, ##27144
0c7c4     02 00 00 FF 
0c7c8     00 36 56 F2 | 	cmps	local09, ##1024 wc
0c7cc     88 00 90 3D |  if_ae	jmp	#LR__1022
0c7d0     35 00 00 FF 
0c7d4     08 E4 05 F1 | 	add	objptr, ##27144
0c7d8     F2 2E 02 FB | 	rdlong	local05, objptr
0c7dc     04 2E 66 F0 | 	shl	local05, #4
0c7e0     20 00 00 FF 
0c7e4     10 E4 85 F1 | 	sub	objptr, ##16400
0c7e8     F2 2E 02 F1 | 	add	local05, objptr
0c7ec     17 31 62 FC | 	wrlong	local06, local05
0c7f0     20 00 00 FF 
0c7f4     10 E4 05 F1 | 	add	objptr, ##16400
0c7f8     F2 2E 02 FB | 	rdlong	local05, objptr
0c7fc     04 2E 66 F0 | 	shl	local05, #4
0c800     20 00 00 FF 
0c804     10 E4 85 F1 | 	sub	objptr, ##16400
0c808     F2 2E 02 F1 | 	add	local05, objptr
0c80c     04 2E 06 F1 | 	add	local05, #4
0c810     17 01 68 FC | 	wrlong	#0, local05
0c814     20 00 00 FF 
0c818     10 E4 05 F1 | 	add	objptr, ##16400
0c81c     F2 2E 02 FB | 	rdlong	local05, objptr
0c820     04 2E 66 F0 | 	shl	local05, #4
0c824     20 00 00 FF 
0c828     10 E4 85 F1 | 	sub	objptr, ##16400
0c82c     F2 2E 02 F1 | 	add	local05, objptr
0c830     0C 2E 06 F1 | 	add	local05, #12
0c834     17 39 68 FC | 	wrlong	#28, local05
0c838     20 00 00 FF 
0c83c     10 E4 05 F1 | 	add	objptr, ##16400
0c840     F2 36 02 FB | 	rdlong	local09, objptr
0c844     1B 33 02 F6 | 	mov	local07, local09
0c848     01 36 06 F1 | 	add	local09, #1
0c84c     F2 36 62 FC | 	wrlong	local09, objptr
0c850     35 00 00 FF 
0c854     08 E4 85 F1 | 	sub	objptr, ##27144
0c858                 | LR__1022
0c858     00 36 06 F6 | 	mov	local09, #0
0c85c                 | ' numpar=0
0c85c                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0c85c     37 00 00 FF 
0c860     44 E4 05 F1 | 	add	objptr, ##28228
0c864     F2 2E 02 FB | 	rdlong	local05, objptr
0c868     01 2E 06 F1 | 	add	local05, #1
0c86c     03 2E 66 F0 | 	shl	local05, #3
0c870     02 00 00 FF 
0c874     38 E4 85 F1 | 	sub	objptr, ##1080
0c878     F2 2E 02 F1 | 	add	local05, objptr
0c87c     04 2E 06 F1 | 	add	local05, #4
0c880     17 35 02 FB | 	rdlong	local08, local05
0c884     15 34 0E F2 | 	cmp	local08, #21 wz
0c888     35 00 00 FF 
0c88c     0C E4 85 F1 | 	sub	objptr, ##27148
0c890     54 01 90 5D |  if_ne	jmp	#LR__1027
0c894     37 00 00 FF 
0c898     44 E4 05 F1 | 	add	objptr, ##28228
0c89c     F2 38 02 FB | 	rdlong	local10, objptr
0c8a0     01 38 06 F1 | 	add	local10, #1
0c8a4     F2 38 62 FC | 	wrlong	local10, objptr
0c8a8     37 00 00 FF 
0c8ac     44 E4 85 F1 | 	sub	objptr, ##28228
0c8b0                 | '   ct+=1 											' omit this lpar, this is for expr list
0c8b0                 | '   do
0c8b0                 | LR__1023
0c8b0     37 00 00 FF 
0c8b4     44 E4 05 F1 | 	add	objptr, ##28228
0c8b8     F2 2E 02 FB | 	rdlong	local05, objptr
0c8bc     01 2E 06 F1 | 	add	local05, #1
0c8c0     F2 2E 62 FC | 	wrlong	local05, objptr
0c8c4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0c8c4                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0c8c4     03 2E 66 F0 | 	shl	local05, #3
0c8c8     02 00 00 FF 
0c8cc     38 E4 85 F1 | 	sub	objptr, ##1080
0c8d0     F2 2E 02 F1 | 	add	local05, objptr
0c8d4     04 2E 06 F1 | 	add	local05, #4
0c8d8     17 39 02 FB | 	rdlong	local10, local05
0c8dc     15 38 0E F2 | 	cmp	local10, #21 wz
0c8e0     35 00 00 FF 
0c8e4     0C E4 85 F1 | 	sub	objptr, ##27148
0c8e8     44 00 90 5D |  if_ne	jmp	#LR__1024
0c8ec     37 00 00 FF 
0c8f0     44 E4 05 F1 | 	add	objptr, ##28228
0c8f4     F2 38 02 FB | 	rdlong	local10, objptr
0c8f8     01 38 06 F1 | 	add	local10, #1
0c8fc     F2 38 62 FC | 	wrlong	local10, objptr
0c900     37 00 00 FF 
0c904     44 E4 85 F1 | 	sub	objptr, ##28228
0c908     58 EB BF FD | 	call	#_expr
0c90c     FD 3A 02 F6 | 	mov	local11, result1
0c910     37 00 00 FF 
0c914     44 E4 05 F1 | 	add	objptr, ##28228
0c918     F2 38 02 FB | 	rdlong	local10, objptr
0c91c     01 38 06 F1 | 	add	local10, #1
0c920     F2 38 62 FC | 	wrlong	local10, objptr
0c924     37 00 00 FF 
0c928     44 E4 85 F1 | 	sub	objptr, ##28228
0c92c     08 00 90 FD | 	jmp	#LR__1025
0c930                 | LR__1024
0c930     30 EB BF FD | 	call	#_expr
0c934     FD 3A 02 F6 | 	mov	local11, result1
0c938                 | LR__1025
0c938                 | '     if err>0 then return err
0c938     01 3A 56 F2 | 	cmps	local11, #1 wc
0c93c     1D FB 01 36 |  if_ae	mov	result1, local11
0c940     2C 02 90 3D |  if_ae	jmp	#LR__1029
0c944     01 36 06 F1 | 	add	local09, #1
0c948     37 00 00 FF 
0c94c     44 E4 05 F1 | 	add	objptr, ##28228
0c950     F2 2E 02 FB | 	rdlong	local05, objptr
0c954     03 2E 66 F0 | 	shl	local05, #3
0c958     02 00 00 FF 
0c95c     38 E4 85 F1 | 	sub	objptr, ##1080
0c960     F2 2E 02 F1 | 	add	local05, objptr
0c964     04 2E 06 F1 | 	add	local05, #4
0c968     17 3B 02 FB | 	rdlong	local11, local05
0c96c     14 3A 0E F2 | 	cmp	local11, #20 wz
0c970     35 00 00 FF 
0c974     0C E4 85 F1 | 	sub	objptr, ##27148
0c978     34 00 90 AD |  if_e	jmp	#LR__1026
0c97c     37 00 00 FF 
0c980     44 E4 05 F1 | 	add	objptr, ##28228
0c984     F2 3A 02 FB | 	rdlong	local11, objptr
0c988     03 3A 66 F0 | 	shl	local11, #3
0c98c     02 00 00 FF 
0c990     38 E4 85 F1 | 	sub	objptr, ##1080
0c994     F2 3A 02 F1 | 	add	local11, objptr
0c998     04 3A 06 F1 | 	add	local11, #4
0c99c     1D 3B 02 FB | 	rdlong	local11, local11
0c9a0     FE 3B 0E F2 | 	cmp	local11, #510 wz
0c9a4     35 00 00 FF 
0c9a8     0C E4 85 F1 | 	sub	objptr, ##27148
0c9ac     00 FF 9F 5D |  if_ne	jmp	#LR__1023
0c9b0                 | LR__1026
0c9b0                 | '     if lparts(ct).token=token_end then return 14
0c9b0     37 00 00 FF 
0c9b4     44 E4 05 F1 | 	add	objptr, ##28228
0c9b8     F2 2E 02 FB | 	rdlong	local05, objptr
0c9bc     03 2E 66 F0 | 	shl	local05, #3
0c9c0     02 00 00 FF 
0c9c4     38 E4 85 F1 | 	sub	objptr, ##1080
0c9c8     F2 2E 02 F1 | 	add	local05, objptr
0c9cc     04 2E 06 F1 | 	add	local05, #4
0c9d0     17 3B 02 FB | 	rdlong	local11, local05
0c9d4     FE 3B 0E F2 | 	cmp	local11, #510 wz
0c9d8     35 00 00 FF 
0c9dc     0C E4 85 F1 | 	sub	objptr, ##27148
0c9e0     0E FA 05 A6 |  if_e	mov	result1, #14
0c9e4     88 01 90 AD |  if_e	jmp	#LR__1029
0c9e8                 | LR__1027
0c9e8     1B 29 02 F6 | 	mov	local02, local09
0c9ec     11 2A 06 F6 | 	mov	local03, #17
0c9f0     19 27 02 F6 | 	mov	local01, local07
0c9f4     13 39 02 F6 | 	mov	local10, local01
0c9f8     14 3D 02 F6 | 	mov	local12, local02
0c9fc     15 3F 02 F6 | 	mov	local13, local03
0ca00     4A 00 00 FF 
0ca04     7C E4 05 F1 | 	add	objptr, ##38012
0ca08     F2 40 02 FB | 	rdlong	local14, objptr
0ca0c     20 43 02 F6 | 	mov	local15, local14
0ca10     01 42 66 F0 | 	shl	local15, #1
0ca14     20 43 02 F1 | 	add	local15, local14
0ca18     02 42 66 F0 | 	shl	local15, #2
0ca1c     03 00 00 FF 
0ca20     00 E4 85 F1 | 	sub	objptr, ##1536
0ca24     F2 42 02 F1 | 	add	local15, objptr
0ca28     21 39 62 FC | 	wrlong	local10, local15
0ca2c     03 00 00 FF 
0ca30     00 E4 05 F1 | 	add	objptr, ##1536
0ca34     F2 38 02 FB | 	rdlong	local10, objptr
0ca38     1C 45 02 F6 | 	mov	local16, local10
0ca3c     01 44 66 F0 | 	shl	local16, #1
0ca40     1C 45 02 F1 | 	add	local16, local10
0ca44     02 44 66 F0 | 	shl	local16, #2
0ca48     03 00 00 FF 
0ca4c     00 E4 85 F1 | 	sub	objptr, ##1536
0ca50     F2 44 02 F1 | 	add	local16, objptr
0ca54     04 44 06 F1 | 	add	local16, #4
0ca58     22 3D 62 FC | 	wrlong	local12, local16
0ca5c     03 00 00 FF 
0ca60     00 E4 05 F1 | 	add	objptr, ##1536
0ca64     F2 38 02 FB | 	rdlong	local10, objptr
0ca68     1C 47 02 F6 | 	mov	local17, local10
0ca6c     01 46 66 F0 | 	shl	local17, #1
0ca70     1C 47 02 F1 | 	add	local17, local10
0ca74     02 46 66 F0 | 	shl	local17, #2
0ca78     03 00 00 FF 
0ca7c     00 E4 85 F1 | 	sub	objptr, ##1536
0ca80     F2 46 02 F1 | 	add	local17, objptr
0ca84     08 46 06 F1 | 	add	local17, #8
0ca88     23 3F 62 FC | 	wrlong	local13, local17
0ca8c     03 00 00 FF 
0ca90     00 E4 05 F1 | 	add	objptr, ##1536
0ca94     F2 38 02 FB | 	rdlong	local10, objptr
0ca98     01 38 06 F1 | 	add	local10, #1
0ca9c     F2 38 62 FC | 	wrlong	local10, objptr
0caa0     4A 00 00 FF 
0caa4     7C E4 85 F1 | 	sub	objptr, ##38012
0caa8                 | ' t2.result.twowords(1)=numpar
0caa8                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0caa8                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0caa8                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0caa8     FF FF 7F FF 
0caac     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0cab0     B8 00 90 5D |  if_ne	jmp	#LR__1028
0cab4     15 2A 06 F6 | 	mov	local03, #21
0cab8     13 39 02 F6 | 	mov	local10, local01
0cabc     14 3D 02 F6 | 	mov	local12, local02
0cac0     15 3F 02 F6 | 	mov	local13, local03
0cac4     4A 00 00 FF 
0cac8     7C E4 05 F1 | 	add	objptr, ##38012
0cacc     F2 40 02 FB | 	rdlong	local14, objptr
0cad0     20 43 02 F6 | 	mov	local15, local14
0cad4     01 42 66 F0 | 	shl	local15, #1
0cad8     20 43 02 F1 | 	add	local15, local14
0cadc     02 42 66 F0 | 	shl	local15, #2
0cae0     03 00 00 FF 
0cae4     00 E4 85 F1 | 	sub	objptr, ##1536
0cae8     F2 42 02 F1 | 	add	local15, objptr
0caec     21 39 62 FC | 	wrlong	local10, local15
0caf0     03 00 00 FF 
0caf4     00 E4 05 F1 | 	add	objptr, ##1536
0caf8     F2 46 02 FB | 	rdlong	local17, objptr
0cafc     23 45 02 F6 | 	mov	local16, local17
0cb00     01 44 66 F0 | 	shl	local16, #1
0cb04     23 45 02 F1 | 	add	local16, local17
0cb08     02 44 66 F0 | 	shl	local16, #2
0cb0c     03 00 00 FF 
0cb10     00 E4 85 F1 | 	sub	objptr, ##1536
0cb14     F2 44 02 F1 | 	add	local16, objptr
0cb18     04 44 06 F1 | 	add	local16, #4
0cb1c     22 3D 62 FC | 	wrlong	local12, local16
0cb20     03 00 00 FF 
0cb24     00 E4 05 F1 | 	add	objptr, ##1536
0cb28     F2 44 02 FB | 	rdlong	local16, objptr
0cb2c     22 47 02 F6 | 	mov	local17, local16
0cb30     01 46 66 F0 | 	shl	local17, #1
0cb34     22 47 02 F1 | 	add	local17, local16
0cb38     02 46 66 F0 | 	shl	local17, #2
0cb3c     03 00 00 FF 
0cb40     00 E4 85 F1 | 	sub	objptr, ##1536
0cb44     F2 46 02 F1 | 	add	local17, objptr
0cb48     08 46 06 F1 | 	add	local17, #8
0cb4c     23 3F 62 FC | 	wrlong	local13, local17
0cb50     03 00 00 FF 
0cb54     00 E4 05 F1 | 	add	objptr, ##1536
0cb58     F2 38 02 FB | 	rdlong	local10, objptr
0cb5c     01 38 06 F1 | 	add	local10, #1
0cb60     F2 38 62 FC | 	wrlong	local10, objptr
0cb64     4A 00 00 FF 
0cb68     7C E4 85 F1 | 	sub	objptr, ##38012
0cb6c                 | LR__1028
0cb6c                 | ' return 0
0cb6c     00 FA 05 F6 | 	mov	result1, #0
0cb70                 | LR__1029
0cb70     A7 F0 03 F6 | 	mov	ptra, fp
0cb74     B2 00 A0 FD | 	call	#popregs_
0cb78                 | _getvar_ret
0cb78     2D 00 64 FD | 	ret
0cb7c                 | 
0cb7c                 | ' 
0cb7c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cb7c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0cb7c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cb7c                 | ' 
0cb7c                 | ' 
0cb7c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cb7c                 | ' '                                                                                                                                       -
0cb7c                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0cb7c                 | ' '                                                                                                                                       -
0cb7c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cb7c                 | ' 
0cb7c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0cb7c                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0cb7c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0cb7c                 | ' 
0cb7c                 | ' function execute_line (astart=0 as integer) as integer
0cb7c                 | _execute_line
0cb7c     04 4A 05 F6 | 	mov	COUNT_, #4
0cb80     A8 00 A0 FD | 	call	#pushregs_
0cb84     50 00 00 FF 
0cb88     BC E4 05 F1 | 	add	objptr, ##41148
0cb8c     F2 00 68 FC | 	wrlong	#0, objptr
0cb90                 | ' 
0cb90                 | ' runptr2=0
0cb90                 | ' for lineptr_e=astart to lineptr-1
0cb90     06 00 00 FF 
0cb94     3C E4 85 F1 | 	sub	objptr, ##3132
0cb98     F2 12 62 FC | 	wrlong	arg01, objptr
0cb9c     04 E4 85 F1 | 	sub	objptr, #4
0cba0     F2 26 02 FB | 	rdlong	local01, objptr
0cba4     4A 00 00 FF 
0cba8     7C E4 85 F1 | 	sub	objptr, ##38012
0cbac                 | LR__1030
0cbac     4A 00 00 FF 
0cbb0     80 E4 05 F1 | 	add	objptr, ##38016
0cbb4     F2 FA 01 FB | 	rdlong	result1, objptr
0cbb8     4A 00 00 FF 
0cbbc     80 E4 85 F1 | 	sub	objptr, ##38016
0cbc0     13 FB 51 F2 | 	cmps	result1, local01 wc
0cbc4     98 00 90 3D |  if_ae	jmp	#LR__1031
0cbc8     4A 00 00 FF 
0cbcc     80 E4 05 F1 | 	add	objptr, ##38016
0cbd0     F2 FA 01 FB | 	rdlong	result1, objptr
0cbd4     FD 28 02 F6 | 	mov	local02, result1
0cbd8     01 28 66 F0 | 	shl	local02, #1
0cbdc     FD 28 02 F1 | 	add	local02, result1
0cbe0     02 28 66 F0 | 	shl	local02, #2
0cbe4     03 00 00 FF 
0cbe8     04 E4 85 F1 | 	sub	objptr, ##1540
0cbec     F2 28 02 F1 | 	add	local02, objptr
0cbf0     08 28 06 F1 | 	add	local02, #8
0cbf4     14 29 02 FB | 	rdlong	local02, local02
0cbf8     14 29 E2 F8 | 	getbyte	local02, local02, #0
0cbfc     02 28 66 F0 | 	shl	local02, #2
0cc00     04 00 00 FF 
0cc04     1C E4 85 F1 | 	sub	objptr, ##2076
0cc08     F2 28 02 F1 | 	add	local02, objptr
0cc0c     14 29 02 FB | 	rdlong	local02, local02
0cc10     14 2B 02 F6 | 	mov	local03, local02
0cc14     13 28 46 F7 | 	zerox	local02, #19
0cc18     14 2A 46 F0 | 	shr	local03, #20
0cc1c     02 2A 66 F0 | 	shl	local03, #2
0cc20     ED 2A 02 F1 | 	add	local03, __methods__
0cc24     15 2B 02 FB | 	rdlong	local03, local03
0cc28     43 00 00 FF 
0cc2c     60 E4 85 F1 | 	sub	objptr, ##34400
0cc30     F2 2C 02 F6 | 	mov	local04, objptr
0cc34     14 E5 01 F6 | 	mov	objptr, local02
0cc38     2D 2A 62 FD | 	call	local03
0cc3c     16 E5 01 F6 | 	mov	objptr, local04
0cc40     4A 00 00 FF 
0cc44     80 E4 05 F1 | 	add	objptr, ##38016
0cc48     F2 2C 02 FB | 	rdlong	local04, objptr
0cc4c     01 2C 06 F1 | 	add	local04, #1
0cc50     F2 2C 62 FC | 	wrlong	local04, objptr
0cc54     4A 00 00 FF 
0cc58     80 E4 85 F1 | 	sub	objptr, ##38016
0cc5c     4C FF 9F FD | 	jmp	#LR__1030
0cc60                 | LR__1031
0cc60                 | ' return runptr2
0cc60     50 00 00 FF 
0cc64     BC E4 05 F1 | 	add	objptr, ##41148
0cc68     F2 FA 01 FB | 	rdlong	result1, objptr
0cc6c     50 00 00 FF 
0cc70     BC E4 85 F1 | 	sub	objptr, ##41148
0cc74     A7 F0 03 F6 | 	mov	ptra, fp
0cc78     B2 00 A0 FD | 	call	#popregs_
0cc7c                 | _execute_line_ret
0cc7c     2D 00 64 FD | 	ret
0cc80                 | 
0cc80                 | ' 
0cc80                 | ' 
0cc80                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cc80                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0cc80                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cc80                 | ' 
0cc80                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0cc80                 | ' 
0cc80                 | ' function pop() as expr_result
0cc80                 | _pop
0cc80                 | ' if stackpointer=0 then
0cc80     43 00 00 FF 
0cc84     58 E4 05 F1 | 	add	objptr, ##34392
0cc88     F2 FA 09 FB | 	rdlong	result1, objptr wz
0cc8c     43 00 00 FF 
0cc90     58 E4 85 F1 | 	sub	objptr, ##34392
0cc94     FF 04 06 A6 |  if_e	mov	_var03, #255
0cc98     18 00 06 A6 |  if_e	mov	_var01, #24
0cc9c     68 00 90 AD |  if_e	jmp	#LR__1040
0cca0     43 00 00 FF 
0cca4     58 E4 05 F1 | 	add	objptr, ##34392
0cca8     F2 FA 01 FB | 	rdlong	result1, objptr
0ccac     01 FA 85 F1 | 	sub	result1, #1
0ccb0     F2 FA 61 FC | 	wrlong	result1, objptr
0ccb4     FD FE 01 F6 | 	mov	result3, result1
0ccb8     01 FE 65 F0 | 	shl	result3, #1
0ccbc     FD FE 01 F1 | 	add	result3, result1
0ccc0     02 FE 65 F0 | 	shl	result3, #2
0ccc4     0C 00 00 FF 
0ccc8     0C E4 85 F1 | 	sub	objptr, ##6156
0cccc     F2 FE 01 F1 | 	add	result3, objptr
0ccd0     FF 00 02 FB | 	rdlong	_var01, result3
0ccd4     04 FE 05 F1 | 	add	result3, #4
0ccd8     FF FE 01 FB | 	rdlong	result3, result3
0ccdc     FD FC 01 F6 | 	mov	result2, result1
0cce0     01 FC 65 F0 | 	shl	result2, #1
0cce4     FD FC 01 F1 | 	add	result2, result1
0cce8     02 FC 65 F0 | 	shl	result2, #2
0ccec     F2 FC 01 F1 | 	add	result2, objptr
0ccf0     08 FC 05 F1 | 	add	result2, #8
0ccf4     FE FA 01 FB | 	rdlong	result1, result2
0ccf8     FF 02 02 F6 | 	mov	_var02, result3
0ccfc     FD 04 02 F6 | 	mov	_var03, result1
0cd00     37 00 00 FF 
0cd04     4C E4 85 F1 | 	sub	objptr, ##28236
0cd08                 | LR__1040
0cd08                 | ' return t1
0cd08     01 FD 01 F6 | 	mov	result2, _var02
0cd0c     02 FF 01 F6 | 	mov	result3, _var03
0cd10     00 FB 01 F6 | 	mov	result1, _var01
0cd14                 | _pop_ret
0cd14     2D 00 64 FD | 	ret
0cd18                 | 
0cd18                 | ' 
0cd18                 | ' sub push(t1 as expr_result )
0cd18                 | _push
0cd18                 | ' if stackpointer<maxstack then 
0cd18     43 00 00 FF 
0cd1c     58 E4 05 F1 | 	add	objptr, ##34392
0cd20     F2 00 02 FB | 	rdlong	_var01, objptr
0cd24     43 00 00 FF 
0cd28     58 E4 85 F1 | 	sub	objptr, ##34392
0cd2c     01 00 00 FF 
0cd30     00 00 56 F2 | 	cmps	_var01, ##512 wc
0cd34     BC 00 90 3D |  if_ae	jmp	#LR__1050
0cd38     09 01 02 FB | 	rdlong	_var01, arg01
0cd3c     04 12 06 F1 | 	add	arg01, #4
0cd40     09 03 02 FB | 	rdlong	_var02, arg01
0cd44     04 12 06 F1 | 	add	arg01, #4
0cd48     09 13 02 FB | 	rdlong	arg01, arg01
0cd4c     43 00 00 FF 
0cd50     58 E4 05 F1 | 	add	objptr, ##34392
0cd54     F2 04 02 FB | 	rdlong	_var03, objptr
0cd58     02 07 02 F6 | 	mov	_var04, _var03
0cd5c     01 06 66 F0 | 	shl	_var04, #1
0cd60     02 07 02 F1 | 	add	_var04, _var03
0cd64     02 06 66 F0 | 	shl	_var04, #2
0cd68     0C 00 00 FF 
0cd6c     0C E4 85 F1 | 	sub	objptr, ##6156
0cd70     F2 06 02 F1 | 	add	_var04, objptr
0cd74     03 01 62 FC | 	wrlong	_var01, _var04
0cd78     0C 00 00 FF 
0cd7c     0C E4 05 F1 | 	add	objptr, ##6156
0cd80     F2 06 02 FB | 	rdlong	_var04, objptr
0cd84     03 05 02 F6 | 	mov	_var03, _var04
0cd88     01 04 66 F0 | 	shl	_var03, #1
0cd8c     03 05 02 F1 | 	add	_var03, _var04
0cd90     02 04 66 F0 | 	shl	_var03, #2
0cd94     0C 00 00 FF 
0cd98     0C E4 85 F1 | 	sub	objptr, ##6156
0cd9c     F2 04 02 F1 | 	add	_var03, objptr
0cda0     04 04 06 F1 | 	add	_var03, #4
0cda4     02 03 62 FC | 	wrlong	_var02, _var03
0cda8     0C 00 00 FF 
0cdac     0C E4 05 F1 | 	add	objptr, ##6156
0cdb0     F2 06 02 FB | 	rdlong	_var04, objptr
0cdb4     03 05 02 F6 | 	mov	_var03, _var04
0cdb8     01 04 66 F0 | 	shl	_var03, #1
0cdbc     03 05 02 F1 | 	add	_var03, _var04
0cdc0     02 04 66 F0 | 	shl	_var03, #2
0cdc4     0C 00 00 FF 
0cdc8     0C E4 85 F1 | 	sub	objptr, ##6156
0cdcc     F2 04 02 F1 | 	add	_var03, objptr
0cdd0     08 04 06 F1 | 	add	_var03, #8
0cdd4     02 13 62 FC | 	wrlong	arg01, _var03
0cdd8     0C 00 00 FF 
0cddc     0C E4 05 F1 | 	add	objptr, ##6156
0cde0     F2 00 02 FB | 	rdlong	_var01, objptr
0cde4     01 00 06 F1 | 	add	_var01, #1
0cde8     F2 00 62 FC | 	wrlong	_var01, objptr
0cdec     43 00 00 FF 
0cdf0     58 E4 85 F1 | 	sub	objptr, ##34392
0cdf4                 | LR__1050
0cdf4                 | _push_ret
0cdf4     2D 00 64 FD | 	ret
0cdf8                 | 
0cdf8                 | ' 
0cdf8                 | ' ' -------------------------------- Runtime converting functions
0cdf8                 | ' 
0cdf8                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0cdf8                 | ' 
0cdf8                 | ' function  convertstring(psaddr as ulong) as string
0cdf8                 | _convertstring
0cdf8     04 4A 05 F6 | 	mov	COUNT_, #4
0cdfc     A8 00 A0 FD | 	call	#pushregs_
0ce00     09 27 02 F6 | 	mov	local01, arg01
0ce04     64 54 B1 FD | 	call	#_pslpeek
0ce08     FD 28 02 F6 | 	mov	local02, result1
0ce0c     AD 01 00 FF 
0ce10     D6 2B 06 F6 | 	mov	local03, ##@LR__5811
0ce14                 | ' l=pslpeek(psaddr) 
0ce14                 | ' s="" 
0ce14                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0ce14     01 2C 06 F6 | 	mov	local04, #1
0ce18     01 28 06 F1 | 	add	local02, #1
0ce1c                 | LR__1060
0ce1c     14 2D 52 F2 | 	cmps	local04, local02 wc
0ce20     30 00 90 3D |  if_ae	jmp	#LR__1061
0ce24     13 13 02 F6 | 	mov	arg01, local01
0ce28     03 12 06 F1 | 	add	arg01, #3
0ce2c     16 13 02 F1 | 	add	arg01, local04
0ce30     E0 53 B1 FD | 	call	#_pspeek
0ce34     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0ce38     8C AD B1 FD | 	call	#__system__Chr_S
0ce3c     FD 14 02 F6 | 	mov	arg02, result1
0ce40     15 13 02 F6 | 	mov	arg01, local03
0ce44     9C 8B B1 FD | 	call	#__system___string_concat
0ce48     FD 2A 02 F6 | 	mov	local03, result1
0ce4c     01 2C 06 F1 | 	add	local04, #1
0ce50     C8 FF 9F FD | 	jmp	#LR__1060
0ce54                 | LR__1061
0ce54                 | ' return s
0ce54     15 FB 01 F6 | 	mov	result1, local03
0ce58     A7 F0 03 F6 | 	mov	ptra, fp
0ce5c     B2 00 A0 FD | 	call	#popregs_
0ce60                 | _convertstring_ret
0ce60     2D 00 64 FD | 	ret
0ce64                 | 
0ce64                 | ' 
0ce64                 | ' ' converts a variable to an integer
0ce64                 | ' 
0ce64                 | ' function converttoint (t1 as expr_result) as integer 
0ce64                 | _converttoint
0ce64     02 4A 05 F6 | 	mov	COUNT_, #2
0ce68     A8 00 A0 FD | 	call	#pushregs_
0ce6c     09 27 02 F6 | 	mov	local01, arg01
0ce70                 | ' 
0ce70                 | ' select case t1.result_type
0ce70     08 26 06 F1 | 	add	local01, #8
0ce74     13 29 02 FB | 	rdlong	local02, local01
0ce78     08 26 86 F1 | 	sub	local01, #8
0ce7c     1C 28 0E F2 | 	cmp	local02, #28 wz
0ce80     2C 00 90 AD |  if_e	jmp	#LR__1070
0ce84     1D 28 0E F2 | 	cmp	local02, #29 wz
0ce88     2C 00 90 AD |  if_e	jmp	#LR__1071
0ce8c     1E 28 0E F2 | 	cmp	local02, #30 wz
0ce90     2C 00 90 AD |  if_e	jmp	#LR__1072
0ce94     1F 28 0E F2 | 	cmp	local02, #31 wz
0ce98     34 00 90 AD |  if_e	jmp	#LR__1073
0ce9c     2B 28 0E F2 | 	cmp	local02, #43 wz
0cea0     44 00 90 AD |  if_e	jmp	#LR__1074
0cea4     2C 28 0E F2 | 	cmp	local02, #44 wz
0cea8     5C 00 90 AD |  if_e	jmp	#LR__1075
0ceac     60 00 90 FD | 	jmp	#LR__1076
0ceb0                 | LR__1070
0ceb0     13 FB 01 FB | 	rdlong	result1, local01
0ceb4     5C 00 90 FD | 	jmp	#LR__1077
0ceb8                 | LR__1071
0ceb8     13 FB 01 FB | 	rdlong	result1, local01
0cebc     54 00 90 FD | 	jmp	#LR__1077
0cec0                 | LR__1072
0cec0     13 13 02 FB | 	rdlong	arg01, local01
0cec4     01 14 06 F6 | 	mov	arg02, #1
0cec8     FC BD B1 FD | 	call	#__system___float_tointeger
0cecc     44 00 90 FD | 	jmp	#LR__1077
0ced0                 | LR__1073
0ced0     13 13 02 FB | 	rdlong	arg01, local01
0ced4     34 C1 B1 FD | 	call	#__system____builtin_atof
0ced8     FD 12 02 F6 | 	mov	arg01, result1
0cedc     01 14 06 F6 | 	mov	arg02, #1
0cee0     E4 BD B1 FD | 	call	#__system___float_tointeger
0cee4     2C 00 90 FD | 	jmp	#LR__1077
0cee8                 | LR__1074
0cee8     13 13 02 FB | 	rdlong	arg01, local01
0ceec     08 FF BF FD | 	call	#_convertstring
0cef0     FD 12 02 F6 | 	mov	arg01, result1
0cef4     14 C1 B1 FD | 	call	#__system____builtin_atof
0cef8     FD 12 02 F6 | 	mov	arg01, result1
0cefc     01 14 06 F6 | 	mov	arg02, #1
0cf00     C4 BD B1 FD | 	call	#__system___float_tointeger
0cf04     0C 00 90 FD | 	jmp	#LR__1077
0cf08                 | LR__1075
0cf08     13 FB 01 FB | 	rdlong	result1, local01
0cf0c     04 00 90 FD | 	jmp	#LR__1077
0cf10                 | LR__1076
0cf10     00 FA 05 F6 | 	mov	result1, #0
0cf14                 | LR__1077
0cf14     A7 F0 03 F6 | 	mov	ptra, fp
0cf18     B2 00 A0 FD | 	call	#popregs_
0cf1c                 | _converttoint_ret
0cf1c     2D 00 64 FD | 	ret
0cf20                 | 
0cf20                 | ' 
0cf20                 | ' ' converts a variable to float
0cf20                 | ' 
0cf20                 | ' function converttofloat (t1 as expr_result) as single
0cf20                 | _converttofloat
0cf20     03 4A 05 F6 | 	mov	COUNT_, #3
0cf24     A8 00 A0 FD | 	call	#pushregs_
0cf28     09 27 02 F6 | 	mov	local01, arg01
0cf2c                 | ' 
0cf2c                 | ' select case t1.result_type
0cf2c     08 26 06 F1 | 	add	local01, #8
0cf30     13 29 02 FB | 	rdlong	local02, local01
0cf34     08 26 86 F1 | 	sub	local01, #8
0cf38     1C 28 0E F2 | 	cmp	local02, #28 wz
0cf3c     24 00 90 AD |  if_e	jmp	#LR__1080
0cf40     1D 28 0E F2 | 	cmp	local02, #29 wz
0cf44     38 00 90 AD |  if_e	jmp	#LR__1081
0cf48     1E 28 0E F2 | 	cmp	local02, #30 wz
0cf4c     3C 00 90 AD |  if_e	jmp	#LR__1082
0cf50     1F 28 0E F2 | 	cmp	local02, #31 wz
0cf54     3C 00 90 AD |  if_e	jmp	#LR__1083
0cf58     2B 28 0E F2 | 	cmp	local02, #43 wz
0cf5c     40 00 90 AD |  if_e	jmp	#LR__1084
0cf60     50 00 90 FD | 	jmp	#LR__1085
0cf64                 | LR__1080
0cf64     13 13 02 FB | 	rdlong	arg01, local01
0cf68     09 13 52 F6 | 	abs	arg01, arg01 wc
0cf6c     1F 2A C6 C9 |  if_b	decod	local03, #31
0cf70     00 2A 06 36 |  if_ae	mov	local03, #0
0cf74     84 B4 B1 FD | 	call	#__system___float_fromuns
0cf78     15 FB 61 F5 | 	xor	result1, local03
0cf7c     38 00 90 FD | 	jmp	#LR__1086
0cf80                 | LR__1081
0cf80     13 13 02 FB | 	rdlong	arg01, local01
0cf84     74 B4 B1 FD | 	call	#__system___float_fromuns
0cf88     2C 00 90 FD | 	jmp	#LR__1086
0cf8c                 | LR__1082
0cf8c     13 FB 01 FB | 	rdlong	result1, local01
0cf90     24 00 90 FD | 	jmp	#LR__1086
0cf94                 | LR__1083
0cf94     13 13 02 FB | 	rdlong	arg01, local01
0cf98     70 C0 B1 FD | 	call	#__system____builtin_atof
0cf9c     18 00 90 FD | 	jmp	#LR__1086
0cfa0                 | LR__1084
0cfa0     13 13 02 FB | 	rdlong	arg01, local01
0cfa4     50 FE BF FD | 	call	#_convertstring
0cfa8     FD 12 02 F6 | 	mov	arg01, result1
0cfac     5C C0 B1 FD | 	call	#__system____builtin_atof
0cfb0     04 00 90 FD | 	jmp	#LR__1086
0cfb4                 | LR__1085
0cfb4     00 FA 05 F6 | 	mov	result1, #0
0cfb8                 | LR__1086
0cfb8     A7 F0 03 F6 | 	mov	ptra, fp
0cfbc     B2 00 A0 FD | 	call	#popregs_
0cfc0                 | _converttofloat_ret
0cfc0     2D 00 64 FD | 	ret
0cfc4                 | 
0cfc4                 | ' 
0cfc4                 | ' '----------------- End of converting 
0cfc4                 | ' 
0cfc4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cfc4                 | ' '----- A nostalgic experiment with saving the program on a cassette tape ----------------------------------------------------------------
0cfc4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cfc4                 | ' 
0cfc4                 | ' sub csave_block(address as ulong)
0cfc4                 | _csave_block
0cfc4     09 01 02 F6 | 	mov	_var01, arg01
0cfc8                 | ' 
0cfc8                 | ' for i=0 to 63 step 2
0cfc8     00 02 06 F6 | 	mov	_var02, #0
0cfcc                 | LR__1090
0cfcc                 | '   do: loop until lpeek(base+64*7)>32768
0cfcc     37 00 00 FF 
0cfd0     10 E4 05 F1 | 	add	objptr, ##28176
0cfd4     97 0C 48 FB | 	callpa	#(@LR__1092-@LR__1091)>>2,fcache_load_ptr_
0cfd8                 | LR__1091
0cfd8     F2 12 02 FB | 	rdlong	arg01, objptr
0cfdc     C0 13 06 F1 | 	add	arg01, #448
0cfe0     09 FB 01 FB | 	rdlong	result1, arg01
0cfe4     40 00 00 FF 
0cfe8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0cfec     E8 FF 9F CD |  if_b	jmp	#LR__1091
0cff0                 | LR__1092
0cff0     00 13 02 F6 | 	mov	arg01, _var01
0cff4     01 05 02 F6 | 	mov	_var03, _var02
0cff8     02 04 66 F0 | 	shl	_var03, #2
0cffc     02 13 02 F1 | 	add	arg01, _var03
0d000     09 07 02 FB | 	rdlong	_var04, arg01
0d004     1B 00 00 FF 
0d008     A4 E4 05 F1 | 	add	objptr, ##13988
0d00c     F2 06 62 FC | 	wrlong	_var04, objptr
0d010     52 00 00 FF 
0d014     B4 E4 85 F1 | 	sub	objptr, ##42164
0d018                 | '   q=lpeek(address+4*i)
0d018                 | '      for bit=0 to 31
0d018     00 08 06 F6 | 	mov	_var05, #0
0d01c     97 84 48 FB | 	callpa	#(@LR__1097-@LR__1093)>>2,fcache_load_ptr_
0d020                 | LR__1093
0d020                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0d020     52 00 00 FF 
0d024     B4 E4 05 F1 | 	add	objptr, ##42164
0d028     F2 06 02 FB | 	rdlong	_var04, objptr
0d02c     52 00 00 FF 
0d030     B4 E4 85 F1 | 	sub	objptr, ##42164
0d034     04 05 C2 F9 | 	decod	_var03, _var05
0d038     02 07 CA F7 | 	test	_var04, _var03 wz
0d03c     60 00 90 AD |  if_e	jmp	#LR__1094
0d040     04 05 02 F6 | 	mov	_var03, _var05
0d044     02 04 66 F0 | 	shl	_var03, #2
0d048     4D 00 00 FF 
0d04c     B4 E5 05 F1 | 	add	objptr, ##39860
0d050     F2 04 02 F1 | 	add	_var03, objptr
0d054     02 FF 48 FC | 	wrbyte	#127, _var03
0d058     04 05 02 F6 | 	mov	_var03, _var05
0d05c     02 04 66 F0 | 	shl	_var03, #2
0d060     01 04 06 F1 | 	add	_var03, #1
0d064     F2 04 02 F1 | 	add	_var03, objptr
0d068     02 01 49 FC | 	wrbyte	#128, _var03
0d06c     04 05 02 F6 | 	mov	_var03, _var05
0d070     02 04 66 F0 | 	shl	_var03, #2
0d074     02 04 06 F1 | 	add	_var03, #2
0d078     F2 04 02 F1 | 	add	_var03, objptr
0d07c     02 FF 48 FC | 	wrbyte	#127, _var03
0d080     04 05 02 F6 | 	mov	_var03, _var05
0d084     02 04 66 F0 | 	shl	_var03, #2
0d088     03 04 06 F1 | 	add	_var03, #3
0d08c     F2 04 02 F1 | 	add	_var03, objptr
0d090     02 01 49 FC | 	wrbyte	#128, _var03
0d094     4D 00 00 FF 
0d098     B4 E5 85 F1 | 	sub	objptr, ##39860
0d09c     5C 00 90 FD | 	jmp	#LR__1095
0d0a0                 | LR__1094
0d0a0     04 05 02 F6 | 	mov	_var03, _var05
0d0a4     02 04 66 F0 | 	shl	_var03, #2
0d0a8     4D 00 00 FF 
0d0ac     B4 E5 05 F1 | 	add	objptr, ##39860
0d0b0     F2 04 02 F1 | 	add	_var03, objptr
0d0b4     02 01 49 FC | 	wrbyte	#128, _var03
0d0b8     04 05 02 F6 | 	mov	_var03, _var05
0d0bc     02 04 66 F0 | 	shl	_var03, #2
0d0c0     01 04 06 F1 | 	add	_var03, #1
0d0c4     F2 04 02 F1 | 	add	_var03, objptr
0d0c8     02 01 49 FC | 	wrbyte	#128, _var03
0d0cc     04 05 02 F6 | 	mov	_var03, _var05
0d0d0     02 04 66 F0 | 	shl	_var03, #2
0d0d4     02 04 06 F1 | 	add	_var03, #2
0d0d8     F2 04 02 F1 | 	add	_var03, objptr
0d0dc     02 FF 48 FC | 	wrbyte	#127, _var03
0d0e0     04 05 02 F6 | 	mov	_var03, _var05
0d0e4     02 04 66 F0 | 	shl	_var03, #2
0d0e8     03 04 06 F1 | 	add	_var03, #3
0d0ec     F2 04 02 F1 | 	add	_var03, objptr
0d0f0     02 FF 48 FC | 	wrbyte	#127, _var03
0d0f4     4D 00 00 FF 
0d0f8     B4 E5 85 F1 | 	sub	objptr, ##39860
0d0fc                 | LR__1095
0d0fc     01 08 06 F1 | 	add	_var05, #1
0d100     20 08 56 F2 | 	cmps	_var05, #32 wc
0d104     18 FF 9F CD |  if_b	jmp	#LR__1093
0d108                 | '   do: loop until lpeek(base+64*7)<32768
0d108     37 00 00 FF 
0d10c     10 E4 05 F1 | 	add	objptr, ##28176
0d110                 | LR__1096
0d110     F2 12 02 FB | 	rdlong	arg01, objptr
0d114     C0 13 06 F1 | 	add	arg01, #448
0d118     09 FB 01 FB | 	rdlong	result1, arg01
0d11c     40 00 00 FF 
0d120     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0d124     E8 FF 9F 3D |  if_ae	jmp	#LR__1096
0d128                 | LR__1097
0d128     00 13 02 F6 | 	mov	arg01, _var01
0d12c     04 12 06 F1 | 	add	arg01, #4
0d130     01 05 02 F6 | 	mov	_var03, _var02
0d134     02 04 66 F0 | 	shl	_var03, #2
0d138     02 13 02 F1 | 	add	arg01, _var03
0d13c     09 07 02 FB | 	rdlong	_var04, arg01
0d140     1B 00 00 FF 
0d144     A4 E4 05 F1 | 	add	objptr, ##13988
0d148     F2 06 62 FC | 	wrlong	_var04, objptr
0d14c     52 00 00 FF 
0d150     B4 E4 85 F1 | 	sub	objptr, ##42164
0d154                 | '   q=lpeek(address+4+4*i)
0d154                 | '      for bit=0 to 31
0d154     00 08 06 F6 | 	mov	_var05, #0
0d158     97 94 48 FB | 	callpa	#(@LR__1101-@LR__1098)>>2,fcache_load_ptr_
0d15c                 | LR__1098
0d15c                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0d15c     52 00 00 FF 
0d160     B4 E4 05 F1 | 	add	objptr, ##42164
0d164     F2 06 02 FB | 	rdlong	_var04, objptr
0d168     52 00 00 FF 
0d16c     B4 E4 85 F1 | 	sub	objptr, ##42164
0d170     04 05 C2 F9 | 	decod	_var03, _var05
0d174     02 07 CA F7 | 	test	_var04, _var03 wz
0d178     80 00 90 AD |  if_e	jmp	#LR__1099
0d17c     04 0B 02 F6 | 	mov	_var06, _var05
0d180     02 0A 66 F0 | 	shl	_var06, #2
0d184     80 04 06 F6 | 	mov	_var03, #128
0d188     05 05 02 F1 | 	add	_var03, _var06
0d18c     4D 00 00 FF 
0d190     B4 E5 05 F1 | 	add	objptr, ##39860
0d194     F2 04 02 F1 | 	add	_var03, objptr
0d198     02 FF 48 FC | 	wrbyte	#127, _var03
0d19c     04 0B 02 F6 | 	mov	_var06, _var05
0d1a0     02 0A 66 F0 | 	shl	_var06, #2
0d1a4     80 04 06 F6 | 	mov	_var03, #128
0d1a8     05 05 02 F1 | 	add	_var03, _var06
0d1ac     01 04 06 F1 | 	add	_var03, #1
0d1b0     F2 04 02 F1 | 	add	_var03, objptr
0d1b4     02 01 49 FC | 	wrbyte	#128, _var03
0d1b8     04 0B 02 F6 | 	mov	_var06, _var05
0d1bc     02 0A 66 F0 | 	shl	_var06, #2
0d1c0     80 04 06 F6 | 	mov	_var03, #128
0d1c4     05 05 02 F1 | 	add	_var03, _var06
0d1c8     02 04 06 F1 | 	add	_var03, #2
0d1cc     F2 04 02 F1 | 	add	_var03, objptr
0d1d0     02 FF 48 FC | 	wrbyte	#127, _var03
0d1d4     04 0B 02 F6 | 	mov	_var06, _var05
0d1d8     02 0A 66 F0 | 	shl	_var06, #2
0d1dc     80 04 06 F6 | 	mov	_var03, #128
0d1e0     05 05 02 F1 | 	add	_var03, _var06
0d1e4     03 04 06 F1 | 	add	_var03, #3
0d1e8     F2 04 02 F1 | 	add	_var03, objptr
0d1ec     02 01 49 FC | 	wrbyte	#128, _var03
0d1f0     4D 00 00 FF 
0d1f4     B4 E5 85 F1 | 	sub	objptr, ##39860
0d1f8     7C 00 90 FD | 	jmp	#LR__1100
0d1fc                 | LR__1099
0d1fc     04 0B 02 F6 | 	mov	_var06, _var05
0d200     02 0A 66 F0 | 	shl	_var06, #2
0d204     80 04 06 F6 | 	mov	_var03, #128
0d208     05 05 02 F1 | 	add	_var03, _var06
0d20c     4D 00 00 FF 
0d210     B4 E5 05 F1 | 	add	objptr, ##39860
0d214     F2 04 02 F1 | 	add	_var03, objptr
0d218     02 01 49 FC | 	wrbyte	#128, _var03
0d21c     04 0B 02 F6 | 	mov	_var06, _var05
0d220     02 0A 66 F0 | 	shl	_var06, #2
0d224     80 04 06 F6 | 	mov	_var03, #128
0d228     05 05 02 F1 | 	add	_var03, _var06
0d22c     01 04 06 F1 | 	add	_var03, #1
0d230     F2 04 02 F1 | 	add	_var03, objptr
0d234     02 01 49 FC | 	wrbyte	#128, _var03
0d238     04 0B 02 F6 | 	mov	_var06, _var05
0d23c     02 0A 66 F0 | 	shl	_var06, #2
0d240     80 04 06 F6 | 	mov	_var03, #128
0d244     05 05 02 F1 | 	add	_var03, _var06
0d248     02 04 06 F1 | 	add	_var03, #2
0d24c     F2 04 02 F1 | 	add	_var03, objptr
0d250     02 FF 48 FC | 	wrbyte	#127, _var03
0d254     04 0B 02 F6 | 	mov	_var06, _var05
0d258     02 0A 66 F0 | 	shl	_var06, #2
0d25c     80 04 06 F6 | 	mov	_var03, #128
0d260     05 05 02 F1 | 	add	_var03, _var06
0d264     03 04 06 F1 | 	add	_var03, #3
0d268     F2 04 02 F1 | 	add	_var03, objptr
0d26c     02 FF 48 FC | 	wrbyte	#127, _var03
0d270     4D 00 00 FF 
0d274     B4 E5 85 F1 | 	sub	objptr, ##39860
0d278                 | LR__1100
0d278     01 08 06 F1 | 	add	_var05, #1
0d27c     20 08 56 F2 | 	cmps	_var05, #32 wc
0d280     D8 FE 9F CD |  if_b	jmp	#LR__1098
0d284                 | LR__1101
0d284     02 02 06 F1 | 	add	_var02, #2
0d288     40 02 56 F2 | 	cmps	_var02, #64 wc
0d28c     3C FD 9F CD |  if_b	jmp	#LR__1090
0d290                 | ' do: loop until lpeek(base+64*7)>32768
0d290     37 00 00 FF 
0d294     10 E4 05 F1 | 	add	objptr, ##28176
0d298     97 84 48 FB | 	callpa	#(@LR__1110-@LR__1102)>>2,fcache_load_ptr_
0d29c                 | LR__1102
0d29c     F2 12 02 FB | 	rdlong	arg01, objptr
0d2a0     C0 13 06 F1 | 	add	arg01, #448
0d2a4     09 FB 01 FB | 	rdlong	result1, arg01
0d2a8     40 00 00 FF 
0d2ac     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0d2b0     E8 FF 9F CD |  if_b	jmp	#LR__1102
0d2b4     37 00 00 FF 
0d2b8     10 E4 85 F1 | 	sub	objptr, ##28176
0d2bc                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0d2bc     00 02 06 F6 | 	mov	_var02, #0
0d2c0                 | LR__1103
0d2c0     01 07 52 F6 | 	abs	_var04, _var02 wc
0d2c4     07 06 06 F5 | 	and	_var04, #7
0d2c8     03 07 82 F6 | 	negc	_var04, _var04
0d2cc     04 06 56 F2 | 	cmps	_var04, #4 wc
0d2d0     20 00 90 3D |  if_ae	jmp	#LR__1104
0d2d4     01 0B 02 F6 | 	mov	_var06, _var02
0d2d8     4D 00 00 FF 
0d2dc     B4 E5 05 F1 | 	add	objptr, ##39860
0d2e0     F2 0A 02 F1 | 	add	_var06, objptr
0d2e4     05 FF 48 FC | 	wrbyte	#127, _var06
0d2e8     4D 00 00 FF 
0d2ec     B4 E5 85 F1 | 	sub	objptr, ##39860
0d2f0     1C 00 90 FD | 	jmp	#LR__1105
0d2f4                 | LR__1104
0d2f4     01 0B 02 F6 | 	mov	_var06, _var02
0d2f8     4D 00 00 FF 
0d2fc     B4 E5 05 F1 | 	add	objptr, ##39860
0d300     F2 0A 02 F1 | 	add	_var06, objptr
0d304     05 01 49 FC | 	wrbyte	#128, _var06
0d308     4D 00 00 FF 
0d30c     B4 E5 85 F1 | 	sub	objptr, ##39860
0d310                 | LR__1105
0d310     01 02 06 F1 | 	add	_var02, #1
0d314     80 02 56 F2 | 	cmps	_var02, #128 wc
0d318     A4 FF 9F CD |  if_b	jmp	#LR__1103
0d31c                 | ' 
0d31c                 | ' do: loop until lpeek(base+64*7)<32768
0d31c     37 00 00 FF 
0d320     10 E4 05 F1 | 	add	objptr, ##28176
0d324                 | LR__1106
0d324     F2 12 02 FB | 	rdlong	arg01, objptr
0d328     C0 13 06 F1 | 	add	arg01, #448
0d32c     09 FB 01 FB | 	rdlong	result1, arg01
0d330     40 00 00 FF 
0d334     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0d338     E8 FF 9F 3D |  if_ae	jmp	#LR__1106
0d33c     37 00 00 FF 
0d340     10 E4 85 F1 | 	sub	objptr, ##28176
0d344                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0d344     80 02 06 F6 | 	mov	_var02, #128
0d348                 | LR__1107
0d348     01 07 52 F6 | 	abs	_var04, _var02 wc
0d34c     07 06 06 F5 | 	and	_var04, #7
0d350     03 07 82 F6 | 	negc	_var04, _var04
0d354     04 06 56 F2 | 	cmps	_var04, #4 wc
0d358     20 00 90 3D |  if_ae	jmp	#LR__1108
0d35c     01 0B 02 F6 | 	mov	_var06, _var02
0d360     4D 00 00 FF 
0d364     B4 E5 05 F1 | 	add	objptr, ##39860
0d368     F2 0A 02 F1 | 	add	_var06, objptr
0d36c     05 FF 48 FC | 	wrbyte	#127, _var06
0d370     4D 00 00 FF 
0d374     B4 E5 85 F1 | 	sub	objptr, ##39860
0d378     1C 00 90 FD | 	jmp	#LR__1109
0d37c                 | LR__1108
0d37c     01 0B 02 F6 | 	mov	_var06, _var02
0d380     4D 00 00 FF 
0d384     B4 E5 05 F1 | 	add	objptr, ##39860
0d388     F2 0A 02 F1 | 	add	_var06, objptr
0d38c     05 01 49 FC | 	wrbyte	#128, _var06
0d390     4D 00 00 FF 
0d394     B4 E5 85 F1 | 	sub	objptr, ##39860
0d398                 | LR__1109
0d398     01 02 06 F1 | 	add	_var02, #1
0d39c     00 03 16 F2 | 	cmp	_var02, #256 wc
0d3a0     A4 FF 9F CD |  if_b	jmp	#LR__1107
0d3a4                 | LR__1110
0d3a4                 | _csave_block_ret
0d3a4     2D 00 64 FD | 	ret
0d3a8                 | 
0d3a8                 | ' 
0d3a8                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0d3a8                 | _csave_addtoblock
0d3a8     04 4A 05 F6 | 	mov	COUNT_, #4
0d3ac     A8 00 A0 FD | 	call	#pushregs_
0d3b0     09 27 02 F6 | 	mov	local01, arg01
0d3b4                 | ' 
0d3b4                 | ' if force=0 then
0d3b4     07 14 4E F7 | 	zerox	arg02, #7 wz
0d3b8     78 00 90 5D |  if_ne	jmp	#LR__1120
0d3bc     50 00 00 FF 
0d3c0     B4 E4 05 F1 | 	add	objptr, ##41140
0d3c4     F2 14 02 FB | 	rdlong	arg02, objptr
0d3c8     02 00 00 FF 
0d3cc     00 E4 85 F1 | 	sub	objptr, ##1024
0d3d0     F2 14 02 F1 | 	add	arg02, objptr
0d3d4     0A 27 42 FC | 	wrbyte	local01, arg02
0d3d8     02 00 00 FF 
0d3dc     00 E4 05 F1 | 	add	objptr, ##1024
0d3e0     F2 26 02 FB | 	rdlong	local01, objptr
0d3e4     01 26 06 F1 | 	add	local01, #1
0d3e8     F2 26 62 FC | 	wrlong	local01, objptr
0d3ec                 | '   block(blockptr)=d
0d3ec                 | '   blockptr+=1
0d3ec                 | '   if blockptr>=255 then
0d3ec     50 00 00 FF 
0d3f0     B4 E4 85 F1 | 	sub	objptr, ##41140
0d3f4     FF 26 16 F2 | 	cmp	local01, #255 wc
0d3f8     E4 00 90 CD |  if_b	jmp	#LR__1124
0d3fc     4E 00 00 FF 
0d400     B4 E4 05 F1 | 	add	objptr, ##40116
0d404     F2 12 02 F6 | 	mov	arg01, objptr
0d408     4E 00 00 FF 
0d40c     B4 E4 85 F1 | 	sub	objptr, ##40116
0d410     B0 FB BF FD | 	call	#_csave_block
0d414     50 00 00 FF 
0d418     B4 E4 05 F1 | 	add	objptr, ##41140
0d41c     F2 00 68 FC | 	wrlong	#0, objptr
0d420     50 00 00 FF 
0d424     B4 E4 85 F1 | 	sub	objptr, ##41140
0d428     2C 13 06 F6 | 	mov	arg01, #300
0d42c     4C 88 B1 FD | 	call	#__system___waitms
0d430     AC 00 90 FD | 	jmp	#LR__1124
0d434                 | LR__1120
0d434     50 00 00 FF 
0d438     B4 E4 05 F1 | 	add	objptr, ##41140
0d43c     F2 28 02 FB | 	rdlong	local02, objptr
0d440     02 00 00 FF 
0d444     00 E4 85 F1 | 	sub	objptr, ##1024
0d448     F2 28 02 F1 | 	add	local02, objptr
0d44c     14 27 42 FC | 	wrbyte	local01, local02
0d450                 | '   block(blockptr)=d
0d450                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0d450     02 00 00 FF 
0d454     00 E4 05 F1 | 	add	objptr, ##1024
0d458     F2 2A 02 FB | 	rdlong	local03, objptr
0d45c     50 00 00 FF 
0d460     B4 E4 85 F1 | 	sub	objptr, ##41140
0d464     FF 2A 16 F2 | 	cmp	local03, #255 wc
0d468     40 00 90 3D |  if_ae	jmp	#LR__1123
0d46c     50 00 00 FF 
0d470     B4 E4 05 F1 | 	add	objptr, ##41140
0d474     F2 2C 02 FB | 	rdlong	local04, objptr
0d478     50 00 00 FF 
0d47c     B4 E4 85 F1 | 	sub	objptr, ##41140
0d480                 | LR__1121
0d480     00 2D 56 F2 | 	cmps	local04, #256 wc
0d484     24 00 90 3D |  if_ae	jmp	#LR__1122
0d488     16 29 02 F6 | 	mov	local02, local04
0d48c     4E 00 00 FF 
0d490     B4 E4 05 F1 | 	add	objptr, ##40116
0d494     F2 28 02 F1 | 	add	local02, objptr
0d498     14 01 48 FC | 	wrbyte	#0, local02
0d49c     01 2C 06 F1 | 	add	local04, #1
0d4a0     4E 00 00 FF 
0d4a4     B4 E4 85 F1 | 	sub	objptr, ##40116
0d4a8     D4 FF 9F FD | 	jmp	#LR__1121
0d4ac                 | LR__1122
0d4ac                 | LR__1123
0d4ac     4E 00 00 FF 
0d4b0     B4 E4 05 F1 | 	add	objptr, ##40116
0d4b4     F2 12 02 F6 | 	mov	arg01, objptr
0d4b8     4E 00 00 FF 
0d4bc     B4 E4 85 F1 | 	sub	objptr, ##40116
0d4c0     00 FB BF FD | 	call	#_csave_block
0d4c4     50 00 00 FF 
0d4c8     B4 E4 05 F1 | 	add	objptr, ##41140
0d4cc     F2 00 68 FC | 	wrlong	#0, objptr
0d4d0     50 00 00 FF 
0d4d4     B4 E4 85 F1 | 	sub	objptr, ##41140
0d4d8     2C 13 06 F6 | 	mov	arg01, #300
0d4dc     9C 87 B1 FD | 	call	#__system___waitms
0d4e0                 | LR__1124
0d4e0     A7 F0 03 F6 | 	mov	ptra, fp
0d4e4     B2 00 A0 FD | 	call	#popregs_
0d4e8                 | _csave_addtoblock_ret
0d4e8     2D 00 64 FD | 	ret
0d4ec                 | 
0d4ec                 | ' 
0d4ec                 | ' '----------------------- csave
0d4ec                 | ' 
0d4ec                 | ' sub test_csave
0d4ec                 | _test_csave
0d4ec     04 4A 05 F6 | 	mov	COUNT_, #4
0d4f0     A8 00 A0 FD | 	call	#pushregs_
0d4f4     C0 F0 07 F1 | 	add	ptra, #192
0d4f8                 | ' 'dim fileheader,savestart, saveptr as ulong
0d4f8                 | ' 
0d4f8                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0d4f8     4A 00 00 FF 
0d4fc     88 E4 05 F1 | 	add	objptr, ##38024
0d500     F2 12 02 FB | 	rdlong	arg01, objptr
0d504     4A 00 00 FF 
0d508     88 E4 85 F1 | 	sub	objptr, ##38024
0d50c     5C 4D B1 FD | 	call	#_pslpeek
0d510     FF FF 7F FF 
0d514     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0d518     10 00 90 5D |  if_ne	jmp	#LR__1130
0d51c     1B 12 06 F6 | 	mov	arg01, #27
0d520     00 14 06 F6 | 	mov	arg02, #0
0d524     74 4A B1 FD | 	call	#_printerror
0d528     1C 03 90 FD | 	jmp	#LR__1144
0d52c                 | LR__1130
0d52c     50 F7 BF FD | 	call	#_pop
0d530     90 4E 05 F1 | 	add	fp, #144
0d534     A7 FA 61 FC | 	wrlong	result1, fp
0d538     04 4E 05 F1 | 	add	fp, #4
0d53c     A7 FC 61 FC | 	wrlong	result2, fp
0d540     04 4E 05 F1 | 	add	fp, #4
0d544     A7 FE 61 FC | 	wrlong	result3, fp
0d548                 | ' t1=pop()
0d548                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0d548     98 4E 85 F1 | 	sub	fp, #152
0d54c     1F FE 0D F2 | 	cmp	result3, #31 wz
0d550     24 00 90 AD |  if_e	jmp	#LR__1131
0d554     52 00 00 FF 
0d558     70 E4 05 F1 | 	add	objptr, ##42096
0d55c     F2 1C 02 FB | 	rdlong	arg06, objptr
0d560     52 00 00 FF 
0d564     70 E4 85 F1 | 	sub	objptr, ##42096
0d568     8C 4E 05 F1 | 	add	fp, #140
0d56c     A7 1C 62 FC | 	wrlong	arg06, fp
0d570     8C 4E 85 F1 | 	sub	fp, #140
0d574     14 00 90 FD | 	jmp	#LR__1132
0d578                 | LR__1131
0d578     90 4E 05 F1 | 	add	fp, #144
0d57c     A7 1C 02 FB | 	rdlong	arg06, fp
0d580     04 4E 85 F1 | 	sub	fp, #4
0d584     A7 1C 62 FC | 	wrlong	arg06, fp
0d588     8C 4E 85 F1 | 	sub	fp, #140
0d58c                 | LR__1132
0d58c                 | ' 
0d58c                 | ' ' prepare 1 kHz header wave
0d58c                 | ' 
0d58c                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0d58c     A7 00 68 FC | 	wrlong	#0, fp
0d590     97 34 48 FB | 	callpa	#(@LR__1136-@LR__1133)>>2,fcache_load_ptr_
0d594                 | LR__1133
0d594     A7 1C 02 FB | 	rdlong	arg06, fp
0d598     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0d59c     07 1A 06 F5 | 	and	arg05, #7
0d5a0     0D 1B 82 F6 | 	negc	arg05, arg05
0d5a4     04 1A 56 F2 | 	cmps	arg05, #4 wc
0d5a8     20 00 90 3D |  if_ae	jmp	#LR__1134
0d5ac     A7 1A 02 FB | 	rdlong	arg05, fp
0d5b0     4D 00 00 FF 
0d5b4     B4 E5 05 F1 | 	add	objptr, ##39860
0d5b8     F2 1A 02 F1 | 	add	arg05, objptr
0d5bc     0D FF 48 FC | 	wrbyte	#127, arg05
0d5c0     4D 00 00 FF 
0d5c4     B4 E5 85 F1 | 	sub	objptr, ##39860
0d5c8     1C 00 90 FD | 	jmp	#LR__1135
0d5cc                 | LR__1134
0d5cc     A7 1A 02 FB | 	rdlong	arg05, fp
0d5d0     4D 00 00 FF 
0d5d4     B4 E5 05 F1 | 	add	objptr, ##39860
0d5d8     F2 1A 02 F1 | 	add	arg05, objptr
0d5dc     0D 01 49 FC | 	wrbyte	#128, arg05
0d5e0     4D 00 00 FF 
0d5e4     B4 E5 85 F1 | 	sub	objptr, ##39860
0d5e8                 | LR__1135
0d5e8     A7 1A 02 FB | 	rdlong	arg05, fp
0d5ec     01 1A 06 F1 | 	add	arg05, #1
0d5f0     A7 1A 62 FC | 	wrlong	arg05, fp
0d5f4     00 1B 56 F2 | 	cmps	arg05, #256 wc
0d5f8     98 FF 9F CD |  if_b	jmp	#LR__1133
0d5fc                 | LR__1136
0d5fc     4D 00 00 FF 
0d600     B4 E5 05 F1 | 	add	objptr, ##39860
0d604     F2 14 02 F6 | 	mov	arg02, objptr
0d608     07 12 06 F6 | 	mov	arg01, #7
0d60c     0F 00 00 FF 
0d610     40 17 06 F6 | 	mov	arg03, ##8000
0d614     0E 18 C6 F9 | 	decod	arg04, #14
0d618     00 1B 06 F6 | 	mov	arg05, #256
0d61c     00 1C 06 F6 | 	mov	arg06, #0
0d620     42 00 00 FF 
0d624     E8 E4 85 F1 | 	sub	objptr, ##34024
0d628     B8 7F B1 FD | 	call	#_audio096_spin2_play8
0d62c     0B 00 00 FF 
0d630     CC E4 85 F1 | 	sub	objptr, ##5836
0d634     05 00 00 FF 
0d638     B8 13 06 F6 | 	mov	arg01, ##3000
0d63c     3C 86 B1 FD | 	call	#__system___waitms
0d640     50 00 00 FF 
0d644     B4 E4 05 F1 | 	add	objptr, ##41140
0d648     F2 00 68 FC | 	wrlong	#0, objptr
0d64c     50 00 00 FF 
0d650     B4 E4 85 F1 | 	sub	objptr, ##41140
0d654     72 12 06 F6 | 	mov	arg01, #114
0d658     00 14 06 F6 | 	mov	arg02, #0
0d65c     48 FD BF FD | 	call	#_csave_addtoblock
0d660     62 12 06 F6 | 	mov	arg01, #98
0d664     00 14 06 F6 | 	mov	arg02, #0
0d668     3C FD BF FD | 	call	#_csave_addtoblock
0d66c     61 12 06 F6 | 	mov	arg01, #97
0d670     00 14 06 F6 | 	mov	arg02, #0
0d674     30 FD BF FD | 	call	#_csave_addtoblock
0d678     0D 12 06 F6 | 	mov	arg01, #13
0d67c     00 14 06 F6 | 	mov	arg02, #0
0d680     24 FD BF FD | 	call	#_csave_addtoblock
0d684                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0d684                 | ' waitms 3000 
0d684                 | ' 
0d684                 | ' blockptr=0
0d684                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0d684                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0d684     A7 02 68 FC | 	wrlong	#1, fp
0d688     8C 4E 05 F1 | 	add	fp, #140
0d68c     A7 12 02 FB | 	rdlong	arg01, fp
0d690     8C 4E 85 F1 | 	sub	fp, #140
0d694     09 27 02 F6 | 	mov	local01, arg01
0d698     97 06 48 FB | 	callpa	#(@LR__1138-@LR__1137)>>2,fcache_load_ptr_
0d69c                 | LR__1137
0d69c     13 FB C9 FA | 	rdbyte	result1, local01 wz
0d6a0     01 26 06 51 |  if_ne	add	local01, #1
0d6a4     F4 FF 9F 5D |  if_ne	jmp	#LR__1137
0d6a8                 | LR__1138
0d6a8     09 27 82 F1 | 	sub	local01, arg01
0d6ac     13 29 02 F6 | 	mov	local02, local01
0d6b0     01 28 06 F1 | 	add	local02, #1
0d6b4                 | LR__1139
0d6b4     A7 1A 02 FB | 	rdlong	arg05, fp
0d6b8     14 1B 52 F2 | 	cmps	arg05, local02 wc
0d6bc     34 00 90 3D |  if_ae	jmp	#LR__1140
0d6c0     8C 4E 05 F1 | 	add	fp, #140
0d6c4     A7 12 02 FB | 	rdlong	arg01, fp
0d6c8     8C 4E 85 F1 | 	sub	fp, #140
0d6cc     A7 14 02 FB | 	rdlong	arg02, fp
0d6d0     01 16 06 F6 | 	mov	arg03, #1
0d6d4     44 A4 B1 FD | 	call	#__system__Mid_S
0d6d8     FD 12 C2 FA | 	rdbyte	arg01, result1
0d6dc     00 14 06 F6 | 	mov	arg02, #0
0d6e0     C4 FC BF FD | 	call	#_csave_addtoblock
0d6e4     A7 1A 02 FB | 	rdlong	arg05, fp
0d6e8     01 1A 06 F1 | 	add	arg05, #1
0d6ec     A7 1A 62 FC | 	wrlong	arg05, fp
0d6f0     C0 FF 9F FD | 	jmp	#LR__1139
0d6f4                 | LR__1140
0d6f4     00 12 06 F6 | 	mov	arg01, #0
0d6f8     00 14 06 F6 | 	mov	arg02, #0
0d6fc     A8 FC BF FD | 	call	#_csave_addtoblock
0d700     72 12 06 F6 | 	mov	arg01, #114
0d704     00 14 06 F6 | 	mov	arg02, #0
0d708     9C FC BF FD | 	call	#_csave_addtoblock
0d70c     62 12 06 F6 | 	mov	arg01, #98
0d710     00 14 06 F6 | 	mov	arg02, #0
0d714     90 FC BF FD | 	call	#_csave_addtoblock
0d718     73 12 06 F6 | 	mov	arg01, #115
0d71c     00 14 06 F6 | 	mov	arg02, #0
0d720     84 FC BF FD | 	call	#_csave_addtoblock
0d724     0D 12 06 F6 | 	mov	arg01, #13
0d728     00 14 06 F6 | 	mov	arg02, #0
0d72c     78 FC BF FD | 	call	#_csave_addtoblock
0d730     4A 00 00 FF 
0d734     88 E4 05 F1 | 	add	objptr, ##38024
0d738     F2 2A 02 FB | 	rdlong	local03, objptr
0d73c     4A 00 00 FF 
0d740     88 E4 85 F1 | 	sub	objptr, ##38024
0d744     9C 4E 05 F1 | 	add	fp, #156
0d748     A7 2A 62 FC | 	wrlong	local03, fp
0d74c     9C 4E 85 F1 | 	sub	fp, #156
0d750                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0d750                 | ' 
0d750                 | ' saveptr=programstart
0d750                 | ' do
0d750                 | LR__1141
0d750     A0 4E 05 F1 | 	add	fp, #160
0d754     A7 12 02 F6 | 	mov	arg01, fp
0d758     04 4E 85 F1 | 	sub	fp, #4
0d75c     A7 14 02 FB | 	rdlong	arg02, fp
0d760     9C 4E 85 F1 | 	sub	fp, #156
0d764     18 16 06 F6 | 	mov	arg03, #24
0d768     0B 00 00 FF 
0d76c     CC E4 05 F1 | 	add	objptr, ##5836
0d770     8C 75 B1 FD | 	call	#_psram_spin2_read1
0d774     0C 4E 05 F1 | 	add	fp, #12
0d778     A7 12 02 F6 | 	mov	arg01, fp
0d77c     9C 4E 05 F1 | 	add	fp, #156
0d780     A7 14 02 FB | 	rdlong	arg02, fp
0d784     04 4E 05 F1 | 	add	fp, #4
0d788     A7 16 02 FB | 	rdlong	arg03, fp
0d78c     AC 4E 85 F1 | 	sub	fp, #172
0d790     6C 75 B1 FD | 	call	#_psram_spin2_read1
0d794     0B 00 00 FF 
0d798     CC E4 85 F1 | 	sub	objptr, ##5836
0d79c     AC 4E 05 F1 | 	add	fp, #172
0d7a0     A7 12 02 FB | 	rdlong	arg01, fp
0d7a4     AC 4E 85 F1 | 	sub	fp, #172
0d7a8     00 14 06 F6 | 	mov	arg02, #0
0d7ac     F8 FB BF FD | 	call	#_csave_addtoblock
0d7b0                 | ' 
0d7b0                 | '   psram.read1(varptr(header(0)),saveptr,24)
0d7b0                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0d7b0                 | '   csave_addtoblock(header(3),0) ' that's always <255
0d7b0                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0d7b0     A7 00 68 FC | 	wrlong	#0, fp
0d7b4     AC 4E 05 F1 | 	add	fp, #172
0d7b8     A7 2C 02 FB | 	rdlong	local04, fp
0d7bc     AC 4E 85 F1 | 	sub	fp, #172
0d7c0                 | LR__1142
0d7c0     A7 2A 02 FB | 	rdlong	local03, fp
0d7c4     16 2B 52 F2 | 	cmps	local03, local04 wc
0d7c8     2C 00 90 3D |  if_ae	jmp	#LR__1143
0d7cc     A7 2A 02 FB | 	rdlong	local03, fp
0d7d0     0C 4E 05 F1 | 	add	fp, #12
0d7d4     A7 2A 02 F1 | 	add	local03, fp
0d7d8     15 13 C2 FA | 	rdbyte	arg01, local03
0d7dc     00 14 06 F6 | 	mov	arg02, #0
0d7e0     0C 4E 85 F1 | 	sub	fp, #12
0d7e4     C0 FB BF FD | 	call	#_csave_addtoblock
0d7e8     A7 2A 02 FB | 	rdlong	local03, fp
0d7ec     01 2A 06 F1 | 	add	local03, #1
0d7f0     A7 2A 62 FC | 	wrlong	local03, fp
0d7f4     C8 FF 9F FD | 	jmp	#LR__1142
0d7f8                 | LR__1143
0d7f8     B4 4E 05 F1 | 	add	fp, #180
0d7fc     A7 2A 02 FB | 	rdlong	local03, fp
0d800     18 4E 85 F1 | 	sub	fp, #24
0d804     A7 2A 62 FC | 	wrlong	local03, fp
0d808     18 4E 05 F1 | 	add	fp, #24
0d80c     A7 2A 02 FB | 	rdlong	local03, fp
0d810     B4 4E 85 F1 | 	sub	fp, #180
0d814     FF FF 3F FF 
0d818     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0d81c     30 FF 9F 5D |  if_ne	jmp	#LR__1141
0d820     00 12 06 F6 | 	mov	arg01, #0
0d824     01 14 06 F6 | 	mov	arg02, #1
0d828     7C FB BF FD | 	call	#_csave_addtoblock
0d82c     37 00 00 FF 
0d830     10 E4 05 F1 | 	add	objptr, ##28176
0d834     F2 12 02 FB | 	rdlong	arg01, objptr
0d838     37 00 00 FF 
0d83c     10 E4 85 F1 | 	sub	objptr, ##28176
0d840     D4 13 06 F1 | 	add	arg01, #468
0d844     09 01 58 FC | 	wrword	#0, arg01
0d848                 | LR__1144
0d848     A7 F0 03 F6 | 	mov	ptra, fp
0d84c     B2 00 A0 FD | 	call	#popregs_
0d850                 | _test_csave_ret
0d850     2D 00 64 FD | 	ret
0d854                 | 
0d854                 | ' 
0d854                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d854                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d854                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d854                 | ' 
0d854                 | ' 
0d854                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d854                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d854                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d854                 | ' 
0d854                 | ' '-------------------- abs
0d854                 | ' 
0d854                 | ' sub do_abs
0d854                 | _do_abs
0d854     01 4A 05 F6 | 	mov	COUNT_, #1
0d858     A8 00 A0 FD | 	call	#pushregs_
0d85c     0C F0 07 F1 | 	add	ptra, #12
0d860     1C F4 BF FD | 	call	#_pop
0d864     FF 26 02 F6 | 	mov	local01, result3
0d868     A7 FA 61 FC | 	wrlong	result1, fp
0d86c     04 4E 05 F1 | 	add	fp, #4
0d870     A7 FC 61 FC | 	wrlong	result2, fp
0d874     04 4E 05 F1 | 	add	fp, #4
0d878     A7 26 62 FC | 	wrlong	local01, fp
0d87c                 | ' 
0d87c                 | ' t1=pop()
0d87c                 | ' if t1.result_type=result_int then 
0d87c     08 4E 85 F1 | 	sub	fp, #8
0d880     1C 26 0E F2 | 	cmp	local01, #28 wz
0d884     A7 12 02 AB |  if_e	rdlong	arg01, fp
0d888     09 27 42 A6 |  if_e	abs	local01, arg01
0d88c     A7 26 62 AC |  if_e	wrlong	local01, fp
0d890     2C 00 90 AD |  if_e	jmp	#LR__1150
0d894     08 4E 05 F1 | 	add	fp, #8
0d898     A7 26 02 FB | 	rdlong	local01, fp
0d89c     08 4E 85 F1 | 	sub	fp, #8
0d8a0     1E 26 0E F2 | 	cmp	local01, #30 wz
0d8a4     A7 FA 01 AB |  if_e	rdlong	result1, fp
0d8a8     1F FA 05 A4 |  if_e	bitl	result1, #31
0d8ac     A7 FA 61 AC |  if_e	wrlong	result1, fp
0d8b0     08 4E 05 51 |  if_ne	add	fp, #8
0d8b4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d8b8     08 4E 85 51 |  if_ne	sub	fp, #8
0d8bc     A7 50 68 5C |  if_ne	wrlong	#40, fp
0d8c0                 | LR__1150
0d8c0     A7 12 02 F6 | 	mov	arg01, fp
0d8c4     50 F4 BF FD | 	call	#_push
0d8c8     A7 F0 03 F6 | 	mov	ptra, fp
0d8cc     B2 00 A0 FD | 	call	#popregs_
0d8d0                 | _do_abs_ret
0d8d0     2D 00 64 FD | 	ret
0d8d4                 | 
0d8d4                 | ' 
0d8d4                 | ' '-------------------- acos
0d8d4                 | ' 
0d8d4                 | ' sub do_acos
0d8d4                 | _do_acos
0d8d4     01 4A 05 F6 | 	mov	COUNT_, #1
0d8d8     A8 00 A0 FD | 	call	#pushregs_
0d8dc     10 F0 07 F1 | 	add	ptra, #16
0d8e0     4A 00 00 FF 
0d8e4     80 E4 05 F1 | 	add	objptr, ##38016
0d8e8     F2 26 02 FB | 	rdlong	local01, objptr
0d8ec     13 17 02 F6 | 	mov	arg03, local01
0d8f0     01 16 66 F0 | 	shl	arg03, #1
0d8f4     13 17 02 F1 | 	add	arg03, local01
0d8f8     02 16 66 F0 | 	shl	arg03, #2
0d8fc     03 00 00 FF 
0d900     04 E4 85 F1 | 	sub	objptr, ##1540
0d904     F2 16 02 F1 | 	add	arg03, objptr
0d908     0B 17 02 FB | 	rdlong	arg03, arg03
0d90c     0C 4E 05 F1 | 	add	fp, #12
0d910     A7 16 62 FC | 	wrlong	arg03, fp
0d914                 | ' 
0d914                 | ' numpar=compiledline(lineptr_e).result.uresult
0d914                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0d914     0C 4E 85 F1 | 	sub	fp, #12
0d918     02 16 16 F2 | 	cmp	arg03, #2 wc
0d91c     47 00 00 FF 
0d920     7C E4 85 F1 | 	sub	objptr, ##36476
0d924     0C 4E 05 C1 |  if_b	add	fp, #12
0d928     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d92c     0C 4E 85 C1 |  if_b	sub	fp, #12
0d930     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0d934     00 12 06 F6 | 	mov	arg01, #0
0d938     74 DD B1 FD | 	call	#__system___getiolock_0599
0d93c     FD 12 02 F6 | 	mov	arg01, result1
0d940     44 80 B1 FD | 	call	#__system___lockmem
0d944     AD 01 00 FF 
0d948     D7 15 06 F6 | 	mov	arg02, ##@LR__5812
0d94c     00 12 06 F6 | 	mov	arg01, #0
0d950     00 16 06 F6 | 	mov	arg03, #0
0d954     24 8D B1 FD | 	call	#__system___basic_print_string
0d958     00 12 06 F6 | 	mov	arg01, #0
0d95c     50 DD B1 FD | 	call	#__system___getiolock_0599
0d960     FD 00 68 FC | 	wrlong	#0, result1
0d964     27 12 06 F6 | 	mov	arg01, #39
0d968     00 14 06 F6 | 	mov	arg02, #0
0d96c     2C 46 B1 FD | 	call	#_printerror
0d970     64 00 90 FD | 	jmp	#LR__1161
0d974                 | LR__1160
0d974     08 F3 BF FD | 	call	#_pop
0d978     FF 26 02 F6 | 	mov	local01, result3
0d97c     A7 FA 61 FC | 	wrlong	result1, fp
0d980     04 4E 05 F1 | 	add	fp, #4
0d984     A7 FC 61 FC | 	wrlong	result2, fp
0d988     04 4E 05 F1 | 	add	fp, #4
0d98c     A7 26 62 FC | 	wrlong	local01, fp
0d990     08 4E 85 F1 | 	sub	fp, #8
0d994     A7 12 02 F6 | 	mov	arg01, fp
0d998     84 F5 BF FD | 	call	#_converttofloat
0d99c     FD 12 02 F6 | 	mov	arg01, result1
0d9a0     9C B9 B1 FD | 	call	#__system____builtin_acosf
0d9a4     FD 12 02 F6 | 	mov	arg01, result1
0d9a8     52 00 00 FF 
0d9ac     58 E4 05 F1 | 	add	objptr, ##42072
0d9b0     F2 14 02 FB | 	rdlong	arg02, objptr
0d9b4     52 00 00 FF 
0d9b8     58 E4 85 F1 | 	sub	objptr, ##42072
0d9bc     40 AE B1 FD | 	call	#__system___float_mul
0d9c0     A7 FA 61 FC | 	wrlong	result1, fp
0d9c4     08 4E 05 F1 | 	add	fp, #8
0d9c8     A7 3C 68 FC | 	wrlong	#30, fp
0d9cc     08 4E 85 F1 | 	sub	fp, #8
0d9d0     A7 12 02 F6 | 	mov	arg01, fp
0d9d4     40 F3 BF FD | 	call	#_push
0d9d8                 | LR__1161
0d9d8     A7 F0 03 F6 | 	mov	ptra, fp
0d9dc     B2 00 A0 FD | 	call	#popregs_
0d9e0                 | _do_acos_ret
0d9e0     2D 00 64 FD | 	ret
0d9e4                 | 
0d9e4                 | ' 
0d9e4                 | ' '-------------------- asc
0d9e4                 | ' 
0d9e4                 | ' sub do_asc
0d9e4                 | _do_asc
0d9e4     01 4A 05 F6 | 	mov	COUNT_, #1
0d9e8     A8 00 A0 FD | 	call	#pushregs_
0d9ec     14 F0 07 F1 | 	add	ptra, #20
0d9f0     4A 00 00 FF 
0d9f4     80 E4 05 F1 | 	add	objptr, ##38016
0d9f8     F2 26 02 FB | 	rdlong	local01, objptr
0d9fc     13 17 02 F6 | 	mov	arg03, local01
0da00     01 16 66 F0 | 	shl	arg03, #1
0da04     13 17 02 F1 | 	add	arg03, local01
0da08     02 16 66 F0 | 	shl	arg03, #2
0da0c     03 00 00 FF 
0da10     04 E4 85 F1 | 	sub	objptr, ##1540
0da14     F2 16 02 F1 | 	add	arg03, objptr
0da18     0B 17 02 FB | 	rdlong	arg03, arg03
0da1c     0C 4E 05 F1 | 	add	fp, #12
0da20     A7 16 62 FC | 	wrlong	arg03, fp
0da24                 | ' 
0da24                 | ' numpar=compiledline(lineptr_e).result.uresult
0da24                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0da24     0C 4E 85 F1 | 	sub	fp, #12
0da28     02 16 16 F2 | 	cmp	arg03, #2 wc
0da2c     47 00 00 FF 
0da30     7C E4 85 F1 | 	sub	objptr, ##36476
0da34     0C 4E 05 C1 |  if_b	add	fp, #12
0da38     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0da3c     0C 4E 85 C1 |  if_b	sub	fp, #12
0da40     40 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0da44     00 12 06 F6 | 	mov	arg01, #0
0da48     64 DC B1 FD | 	call	#__system___getiolock_0599
0da4c     FD 12 02 F6 | 	mov	arg01, result1
0da50     34 7F B1 FD | 	call	#__system___lockmem
0da54     AD 01 00 FF 
0da58     DE 15 06 F6 | 	mov	arg02, ##@LR__5813
0da5c     00 12 06 F6 | 	mov	arg01, #0
0da60     00 16 06 F6 | 	mov	arg03, #0
0da64     14 8C B1 FD | 	call	#__system___basic_print_string
0da68     00 12 06 F6 | 	mov	arg01, #0
0da6c     40 DC B1 FD | 	call	#__system___getiolock_0599
0da70     FD 00 68 FC | 	wrlong	#0, result1
0da74     27 12 06 F6 | 	mov	arg01, #39
0da78     00 14 06 F6 | 	mov	arg02, #0
0da7c     1C 45 B1 FD | 	call	#_printerror
0da80     B4 00 90 FD | 	jmp	#LR__1173
0da84                 | LR__1170
0da84     F8 F1 BF FD | 	call	#_pop
0da88     FF 16 02 F6 | 	mov	arg03, result3
0da8c     A7 FA 61 FC | 	wrlong	result1, fp
0da90     04 4E 05 F1 | 	add	fp, #4
0da94     A7 FC 61 FC | 	wrlong	result2, fp
0da98     04 4E 05 F1 | 	add	fp, #4
0da9c     A7 16 62 FC | 	wrlong	arg03, fp
0daa0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0daa0     08 4E 85 F1 | 	sub	fp, #8
0daa4     2B 16 0E F2 | 	cmp	arg03, #43 wz
0daa8     18 00 90 5D |  if_ne	jmp	#LR__1171
0daac     A7 12 02 FB | 	rdlong	arg01, fp
0dab0     44 F3 BF FD | 	call	#_convertstring
0dab4     A7 FA 61 FC | 	wrlong	result1, fp
0dab8     08 4E 05 F1 | 	add	fp, #8
0dabc     A7 3E 68 FC | 	wrlong	#31, fp
0dac0     08 4E 85 F1 | 	sub	fp, #8
0dac4                 | LR__1171
0dac4                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0dac4     08 4E 05 F1 | 	add	fp, #8
0dac8     A7 16 02 FB | 	rdlong	arg03, fp
0dacc     08 4E 85 F1 | 	sub	fp, #8
0dad0     1F 16 0E F2 | 	cmp	arg03, #31 wz
0dad4     40 00 90 AD |  if_e	jmp	#LR__1172
0dad8     00 12 06 F6 | 	mov	arg01, #0
0dadc     D0 DB B1 FD | 	call	#__system___getiolock_0599
0dae0     FD 12 02 F6 | 	mov	arg01, result1
0dae4     A0 7E B1 FD | 	call	#__system___lockmem
0dae8     AD 01 00 FF 
0daec     E4 15 06 F6 | 	mov	arg02, ##@LR__5814
0daf0     00 12 06 F6 | 	mov	arg01, #0
0daf4     00 16 06 F6 | 	mov	arg03, #0
0daf8     80 8B B1 FD | 	call	#__system___basic_print_string
0dafc     00 12 06 F6 | 	mov	arg01, #0
0db00     AC DB B1 FD | 	call	#__system___getiolock_0599
0db04     FD 00 68 FC | 	wrlong	#0, result1
0db08     0F 12 06 F6 | 	mov	arg01, #15
0db0c     00 14 06 F6 | 	mov	arg02, #0
0db10     88 44 B1 FD | 	call	#_printerror
0db14     20 00 90 FD | 	jmp	#LR__1173
0db18                 | LR__1172
0db18     A7 26 02 FB | 	rdlong	local01, fp
0db1c     13 27 C2 FA | 	rdbyte	local01, local01
0db20     A7 26 62 FC | 	wrlong	local01, fp
0db24     08 4E 05 F1 | 	add	fp, #8
0db28     A7 38 68 FC | 	wrlong	#28, fp
0db2c     08 4E 85 F1 | 	sub	fp, #8
0db30     A7 12 02 F6 | 	mov	arg01, fp
0db34     E0 F1 BF FD | 	call	#_push
0db38                 | LR__1173
0db38     A7 F0 03 F6 | 	mov	ptra, fp
0db3c     B2 00 A0 FD | 	call	#popregs_
0db40                 | _do_asc_ret
0db40     2D 00 64 FD | 	ret
0db44                 | 
0db44                 | ' 
0db44                 | ' '-------------------- asin
0db44                 | ' 
0db44                 | ' sub do_asin
0db44                 | _do_asin
0db44     01 4A 05 F6 | 	mov	COUNT_, #1
0db48     A8 00 A0 FD | 	call	#pushregs_
0db4c     10 F0 07 F1 | 	add	ptra, #16
0db50     4A 00 00 FF 
0db54     80 E4 05 F1 | 	add	objptr, ##38016
0db58     F2 26 02 FB | 	rdlong	local01, objptr
0db5c     13 17 02 F6 | 	mov	arg03, local01
0db60     01 16 66 F0 | 	shl	arg03, #1
0db64     13 17 02 F1 | 	add	arg03, local01
0db68     02 16 66 F0 | 	shl	arg03, #2
0db6c     03 00 00 FF 
0db70     04 E4 85 F1 | 	sub	objptr, ##1540
0db74     F2 16 02 F1 | 	add	arg03, objptr
0db78     0B 17 02 FB | 	rdlong	arg03, arg03
0db7c     0C 4E 05 F1 | 	add	fp, #12
0db80     A7 16 62 FC | 	wrlong	arg03, fp
0db84                 | ' 
0db84                 | ' numpar=compiledline(lineptr_e).result.uresult
0db84                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0db84     0C 4E 85 F1 | 	sub	fp, #12
0db88     02 16 16 F2 | 	cmp	arg03, #2 wc
0db8c     47 00 00 FF 
0db90     7C E4 85 F1 | 	sub	objptr, ##36476
0db94     0C 4E 05 C1 |  if_b	add	fp, #12
0db98     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0db9c     0C 4E 85 C1 |  if_b	sub	fp, #12
0dba0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1180
0dba4     00 12 06 F6 | 	mov	arg01, #0
0dba8     04 DB B1 FD | 	call	#__system___getiolock_0599
0dbac     FD 12 02 F6 | 	mov	arg01, result1
0dbb0     D4 7D B1 FD | 	call	#__system___lockmem
0dbb4     AD 01 00 FF 
0dbb8     EA 15 06 F6 | 	mov	arg02, ##@LR__5815
0dbbc     00 12 06 F6 | 	mov	arg01, #0
0dbc0     00 16 06 F6 | 	mov	arg03, #0
0dbc4     B4 8A B1 FD | 	call	#__system___basic_print_string
0dbc8     00 12 06 F6 | 	mov	arg01, #0
0dbcc     E0 DA B1 FD | 	call	#__system___getiolock_0599
0dbd0     FD 00 68 FC | 	wrlong	#0, result1
0dbd4     27 12 06 F6 | 	mov	arg01, #39
0dbd8     00 14 06 F6 | 	mov	arg02, #0
0dbdc     BC 43 B1 FD | 	call	#_printerror
0dbe0     64 00 90 FD | 	jmp	#LR__1181
0dbe4                 | LR__1180
0dbe4     98 F0 BF FD | 	call	#_pop
0dbe8     FF 26 02 F6 | 	mov	local01, result3
0dbec     A7 FA 61 FC | 	wrlong	result1, fp
0dbf0     04 4E 05 F1 | 	add	fp, #4
0dbf4     A7 FC 61 FC | 	wrlong	result2, fp
0dbf8     04 4E 05 F1 | 	add	fp, #4
0dbfc     A7 26 62 FC | 	wrlong	local01, fp
0dc00     08 4E 85 F1 | 	sub	fp, #8
0dc04     A7 12 02 F6 | 	mov	arg01, fp
0dc08     14 F3 BF FD | 	call	#_converttofloat
0dc0c     FD 12 02 F6 | 	mov	arg01, result1
0dc10     E0 B6 B1 FD | 	call	#__system____builtin_asinf
0dc14     FD 12 02 F6 | 	mov	arg01, result1
0dc18     52 00 00 FF 
0dc1c     58 E4 05 F1 | 	add	objptr, ##42072
0dc20     F2 14 02 FB | 	rdlong	arg02, objptr
0dc24     52 00 00 FF 
0dc28     58 E4 85 F1 | 	sub	objptr, ##42072
0dc2c     D0 AB B1 FD | 	call	#__system___float_mul
0dc30     A7 FA 61 FC | 	wrlong	result1, fp
0dc34     08 4E 05 F1 | 	add	fp, #8
0dc38     A7 3C 68 FC | 	wrlong	#30, fp
0dc3c     08 4E 85 F1 | 	sub	fp, #8
0dc40     A7 12 02 F6 | 	mov	arg01, fp
0dc44     D0 F0 BF FD | 	call	#_push
0dc48                 | LR__1181
0dc48     A7 F0 03 F6 | 	mov	ptra, fp
0dc4c     B2 00 A0 FD | 	call	#popregs_
0dc50                 | _do_asin_ret
0dc50     2D 00 64 FD | 	ret
0dc54                 | 
0dc54                 | ' 
0dc54                 | ' '-------------------- atn
0dc54                 | ' 
0dc54                 | ' sub do_atn
0dc54                 | _do_atn
0dc54     01 4A 05 F6 | 	mov	COUNT_, #1
0dc58     A8 00 A0 FD | 	call	#pushregs_
0dc5c     10 F0 07 F1 | 	add	ptra, #16
0dc60     4A 00 00 FF 
0dc64     80 E4 05 F1 | 	add	objptr, ##38016
0dc68     F2 26 02 FB | 	rdlong	local01, objptr
0dc6c     13 17 02 F6 | 	mov	arg03, local01
0dc70     01 16 66 F0 | 	shl	arg03, #1
0dc74     13 17 02 F1 | 	add	arg03, local01
0dc78     02 16 66 F0 | 	shl	arg03, #2
0dc7c     03 00 00 FF 
0dc80     04 E4 85 F1 | 	sub	objptr, ##1540
0dc84     F2 16 02 F1 | 	add	arg03, objptr
0dc88     0B 17 02 FB | 	rdlong	arg03, arg03
0dc8c     0C 4E 05 F1 | 	add	fp, #12
0dc90     A7 16 62 FC | 	wrlong	arg03, fp
0dc94                 | ' 
0dc94                 | ' numpar=compiledline(lineptr_e).result.uresult
0dc94                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0dc94     0C 4E 85 F1 | 	sub	fp, #12
0dc98     02 16 16 F2 | 	cmp	arg03, #2 wc
0dc9c     47 00 00 FF 
0dca0     7C E4 85 F1 | 	sub	objptr, ##36476
0dca4     0C 4E 05 C1 |  if_b	add	fp, #12
0dca8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dcac     0C 4E 85 C1 |  if_b	sub	fp, #12
0dcb0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1190
0dcb4     00 12 06 F6 | 	mov	arg01, #0
0dcb8     F4 D9 B1 FD | 	call	#__system___getiolock_0599
0dcbc     FD 12 02 F6 | 	mov	arg01, result1
0dcc0     C4 7C B1 FD | 	call	#__system___lockmem
0dcc4     AD 01 00 FF 
0dcc8     F1 15 06 F6 | 	mov	arg02, ##@LR__5816
0dccc     00 12 06 F6 | 	mov	arg01, #0
0dcd0     00 16 06 F6 | 	mov	arg03, #0
0dcd4     A4 89 B1 FD | 	call	#__system___basic_print_string
0dcd8     00 12 06 F6 | 	mov	arg01, #0
0dcdc     D0 D9 B1 FD | 	call	#__system___getiolock_0599
0dce0     FD 00 68 FC | 	wrlong	#0, result1
0dce4     27 12 06 F6 | 	mov	arg01, #39
0dce8     00 14 06 F6 | 	mov	arg02, #0
0dcec     AC 42 B1 FD | 	call	#_printerror
0dcf0     6C 00 90 FD | 	jmp	#LR__1191
0dcf4                 | LR__1190
0dcf4     88 EF BF FD | 	call	#_pop
0dcf8     FF 26 02 F6 | 	mov	local01, result3
0dcfc     A7 FA 61 FC | 	wrlong	result1, fp
0dd00     04 4E 05 F1 | 	add	fp, #4
0dd04     A7 FC 61 FC | 	wrlong	result2, fp
0dd08     04 4E 05 F1 | 	add	fp, #4
0dd0c     A7 26 62 FC | 	wrlong	local01, fp
0dd10     08 4E 85 F1 | 	sub	fp, #8
0dd14     A7 12 02 F6 | 	mov	arg01, fp
0dd18     04 F2 BF FD | 	call	#_converttofloat
0dd1c     FD 12 02 F6 | 	mov	arg01, result1
0dd20     00 C0 1F FF 
0dd24     00 14 06 F6 | 	mov	arg02, ##1065353216
0dd28     60 B6 B1 FD | 	call	#__system____builtin_atan2f
0dd2c     FD 12 02 F6 | 	mov	arg01, result1
0dd30     52 00 00 FF 
0dd34     58 E4 05 F1 | 	add	objptr, ##42072
0dd38     F2 14 02 FB | 	rdlong	arg02, objptr
0dd3c     52 00 00 FF 
0dd40     58 E4 85 F1 | 	sub	objptr, ##42072
0dd44     B8 AA B1 FD | 	call	#__system___float_mul
0dd48     A7 FA 61 FC | 	wrlong	result1, fp
0dd4c     08 4E 05 F1 | 	add	fp, #8
0dd50     A7 3C 68 FC | 	wrlong	#30, fp
0dd54     08 4E 85 F1 | 	sub	fp, #8
0dd58     A7 12 02 F6 | 	mov	arg01, fp
0dd5c     B8 EF BF FD | 	call	#_push
0dd60                 | LR__1191
0dd60     A7 F0 03 F6 | 	mov	ptra, fp
0dd64     B2 00 A0 FD | 	call	#popregs_
0dd68                 | _do_atn_ret
0dd68     2D 00 64 FD | 	ret
0dd6c                 | 
0dd6c                 | ' 
0dd6c                 | ' '-------------------- beep
0dd6c                 | ' 
0dd6c                 | ' sub do_beep
0dd6c                 | _do_beep
0dd6c     02 4A 05 F6 | 	mov	COUNT_, #2
0dd70     A8 00 A0 FD | 	call	#pushregs_
0dd74     20 F0 07 F1 | 	add	ptra, #32
0dd78     04 EF BF FD | 	call	#_pop
0dd7c     FD 26 02 F6 | 	mov	local01, result1
0dd80     FE 1C 02 F6 | 	mov	arg06, result2
0dd84     FF 28 02 F6 | 	mov	local02, result3
0dd88     0C 4E 05 F1 | 	add	fp, #12
0dd8c     A7 26 62 FC | 	wrlong	local01, fp
0dd90     04 4E 05 F1 | 	add	fp, #4
0dd94     A7 1C 62 FC | 	wrlong	arg06, fp
0dd98     04 4E 05 F1 | 	add	fp, #4
0dd9c     A7 28 62 FC | 	wrlong	local02, fp
0dda0     14 4E 85 F1 | 	sub	fp, #20
0dda4     D8 EE BF FD | 	call	#_pop
0dda8     A7 FA 61 FC | 	wrlong	result1, fp
0ddac     04 4E 05 F1 | 	add	fp, #4
0ddb0     A7 FC 61 FC | 	wrlong	result2, fp
0ddb4     04 4E 05 F1 | 	add	fp, #4
0ddb8     A7 FE 61 FC | 	wrlong	result3, fp
0ddbc                 | ' 
0ddbc                 | ' t2=pop()
0ddbc                 | ' t1=pop()
0ddbc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0ddbc     08 4E 85 F1 | 	sub	fp, #8
0ddc0     1C FE 0D F2 | 	cmp	result3, #28 wz
0ddc4     08 4E 05 51 |  if_ne	add	fp, #8
0ddc8     A7 28 02 5B |  if_ne	rdlong	local02, fp
0ddcc     08 4E 85 51 |  if_ne	sub	fp, #8
0ddd0     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0ddd4     A7 26 02 AB |  if_e	rdlong	local01, fp
0ddd8     18 4E 05 A1 |  if_e	add	fp, #24
0dddc     A7 26 62 AC |  if_e	wrlong	local01, fp
0dde0     18 4E 85 A1 |  if_e	sub	fp, #24
0dde4     14 00 90 AD |  if_e	jmp	#LR__1200
0dde8     A7 12 02 F6 | 	mov	arg01, fp
0ddec     74 F0 BF FD | 	call	#_converttoint
0ddf0     18 4E 05 F1 | 	add	fp, #24
0ddf4     A7 FA 61 FC | 	wrlong	result1, fp
0ddf8     18 4E 85 F1 | 	sub	fp, #24
0ddfc                 | LR__1200
0ddfc     1C 4E 05 F1 | 	add	fp, #28
0de00     A7 FE 48 FC | 	wrbyte	#127, fp
0de04     01 4E 05 F1 | 	add	fp, #1
0de08     A7 00 49 FC | 	wrbyte	#128, fp
0de0c     01 4E 85 F1 | 	sub	fp, #1
0de10     A7 14 02 F6 | 	mov	arg02, fp
0de14     04 4E 85 F1 | 	sub	fp, #4
0de18     A7 16 02 FB | 	rdlong	arg03, fp
0de1c     18 4E 85 F1 | 	sub	fp, #24
0de20     01 16 66 F0 | 	shl	arg03, #1
0de24     07 12 06 F6 | 	mov	arg01, #7
0de28     0E 18 C6 F9 | 	decod	arg04, #14
0de2c     02 1A 06 F6 | 	mov	arg05, #2
0de30     00 1C 06 F6 | 	mov	arg06, #0
0de34     0B 00 00 FF 
0de38     CC E4 05 F1 | 	add	objptr, ##5836
0de3c     A4 77 B1 FD | 	call	#_audio096_spin2_play8
0de40     0B 00 00 FF 
0de44     CC E4 85 F1 | 	sub	objptr, ##5836
0de48     0C 4E 05 F1 | 	add	fp, #12
0de4c     A7 12 02 F6 | 	mov	arg01, fp
0de50     0C 4E 85 F1 | 	sub	fp, #12
0de54     C0 EE BF FD | 	call	#_push
0de58     74 D7 B0 FD | 	call	#_do_waitms
0de5c     07 12 06 F6 | 	mov	arg01, #7
0de60     0B 00 00 FF 
0de64     CC E4 05 F1 | 	add	objptr, ##5836
0de68     1C 78 B1 FD | 	call	#_audio096_spin2_stop
0de6c     0B 00 00 FF 
0de70     CC E4 85 F1 | 	sub	objptr, ##5836
0de74     A7 F0 03 F6 | 	mov	ptra, fp
0de78     B2 00 A0 FD | 	call	#popregs_
0de7c                 | _do_beep_ret
0de7c     2D 00 64 FD | 	ret
0de80                 | 
0de80                 | ' 
0de80                 | ' '-------------------- blit
0de80                 | ' 
0de80                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0de80                 | ' sub do_blit
0de80                 | _do_blit
0de80     02 4A 05 F6 | 	mov	COUNT_, #2
0de84     A8 00 A0 FD | 	call	#pushregs_
0de88     3C F0 07 F1 | 	add	ptra, #60
0de8c     4A 00 00 FF 
0de90     80 E4 05 F1 | 	add	objptr, ##38016
0de94     F2 26 02 FB | 	rdlong	local01, objptr
0de98     13 25 02 F6 | 	mov	arg10, local01
0de9c     01 24 66 F0 | 	shl	arg10, #1
0dea0     13 25 02 F1 | 	add	arg10, local01
0dea4     02 24 66 F0 | 	shl	arg10, #2
0dea8     03 00 00 FF 
0deac     04 E4 85 F1 | 	sub	objptr, ##1540
0deb0     F2 24 02 F1 | 	add	arg10, objptr
0deb4     12 25 02 FB | 	rdlong	arg10, arg10
0deb8     38 4E 05 F1 | 	add	fp, #56
0debc     A7 24 62 FC | 	wrlong	arg10, fp
0dec0                 | ' 
0dec0                 | ' numpar=compiledline(lineptr_e).result.uresult
0dec0                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0dec0     38 4E 85 F1 | 	sub	fp, #56
0dec4     0A 24 0E F2 | 	cmp	arg10, #10 wz
0dec8     47 00 00 FF 
0decc     7C E4 85 F1 | 	sub	objptr, ##36476
0ded0     38 4E 05 51 |  if_ne	add	fp, #56
0ded4     A7 26 02 5B |  if_ne	rdlong	local01, fp
0ded8     38 4E 85 51 |  if_ne	sub	fp, #56
0dedc     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0dee0     50 00 90 AD |  if_e	jmp	#LR__1210
0dee4     00 12 06 F6 | 	mov	arg01, #0
0dee8     C4 D7 B1 FD | 	call	#__system___getiolock_0599
0deec     FD 12 02 F6 | 	mov	arg01, result1
0def0     94 7A B1 FD | 	call	#__system___lockmem
0def4     AD 01 00 FF 
0def8     F7 15 06 F6 | 	mov	arg02, ##@LR__5817
0defc     00 12 06 F6 | 	mov	arg01, #0
0df00     00 16 06 F6 | 	mov	arg03, #0
0df04     74 87 B1 FD | 	call	#__system___basic_print_string
0df08     00 12 06 F6 | 	mov	arg01, #0
0df0c     A0 D7 B1 FD | 	call	#__system___getiolock_0599
0df10     FD 00 68 FC | 	wrlong	#0, result1
0df14     50 00 00 FF 
0df18     F0 E4 05 F1 | 	add	objptr, ##41200
0df1c     F2 14 02 FB | 	rdlong	arg02, objptr
0df20     50 00 00 FF 
0df24     F0 E4 85 F1 | 	sub	objptr, ##41200
0df28     27 12 06 F6 | 	mov	arg01, #39
0df2c     6C 40 B1 FD | 	call	#_printerror
0df30     44 01 90 FD | 	jmp	#LR__1215
0df34                 | LR__1210
0df34                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0df34     38 4E 05 F1 | 	add	fp, #56
0df38     A7 28 02 FB | 	rdlong	local02, fp
0df3c     01 28 86 F1 | 	sub	local02, #1
0df40     04 4E 85 F1 | 	sub	fp, #4
0df44     A7 28 62 FC | 	wrlong	local02, fp
0df48     34 4E 85 F1 | 	sub	fp, #52
0df4c                 | LR__1211
0df4c     38 4E 05 F1 | 	add	fp, #56
0df50     A7 26 02 FB | 	rdlong	local01, fp
0df54     01 26 86 F1 | 	sub	local01, #1
0df58     04 4E 85 F1 | 	sub	fp, #4
0df5c     A7 24 02 FB | 	rdlong	arg10, fp
0df60     34 4E 85 F1 | 	sub	fp, #52
0df64     13 25 1A F2 | 	cmp	arg10, local01 wcz
0df68     54 00 90 1D |  if_a	jmp	#LR__1212
0df6c     10 ED BF FD | 	call	#_pop
0df70     A7 FA 61 FC | 	wrlong	result1, fp
0df74     04 4E 05 F1 | 	add	fp, #4
0df78     A7 FC 61 FC | 	wrlong	result2, fp
0df7c     04 4E 05 F1 | 	add	fp, #4
0df80     A7 FE 61 FC | 	wrlong	result3, fp
0df84     2C 4E 05 F1 | 	add	fp, #44
0df88     A7 28 02 FB | 	rdlong	local02, fp
0df8c     02 28 66 F0 | 	shl	local02, #2
0df90     28 4E 85 F1 | 	sub	fp, #40
0df94     A7 28 02 F1 | 	add	local02, fp
0df98     0C 4E 85 F1 | 	sub	fp, #12
0df9c     A7 12 02 F6 | 	mov	arg01, fp
0dfa0     C0 EE BF FD | 	call	#_converttoint
0dfa4     14 FB 61 FC | 	wrlong	result1, local02
0dfa8     34 4E 05 F1 | 	add	fp, #52
0dfac     A7 28 02 FB | 	rdlong	local02, fp
0dfb0     01 28 86 F1 | 	sub	local02, #1
0dfb4     A7 28 62 FC | 	wrlong	local02, fp
0dfb8     34 4E 85 F1 | 	sub	fp, #52
0dfbc     8C FF 9F FD | 	jmp	#LR__1211
0dfc0                 | LR__1212
0dfc0                 | ' if numpar=10 then 
0dfc0     38 4E 05 F1 | 	add	fp, #56
0dfc4     A7 28 02 FB | 	rdlong	local02, fp
0dfc8     38 4E 85 F1 | 	sub	fp, #56
0dfcc     0A 28 0E F2 | 	cmp	local02, #10 wz
0dfd0     5C 00 90 5D |  if_ne	jmp	#LR__1213
0dfd4     0C 4E 05 F1 | 	add	fp, #12
0dfd8     A7 12 02 FB | 	rdlong	arg01, fp
0dfdc     04 4E 05 F1 | 	add	fp, #4
0dfe0     A7 14 02 FB | 	rdlong	arg02, fp
0dfe4     04 4E 05 F1 | 	add	fp, #4
0dfe8     A7 16 02 FB | 	rdlong	arg03, fp
0dfec     04 4E 05 F1 | 	add	fp, #4
0dff0     A7 18 02 FB | 	rdlong	arg04, fp
0dff4     04 4E 05 F1 | 	add	fp, #4
0dff8     A7 1A 02 FB | 	rdlong	arg05, fp
0dffc     04 4E 05 F1 | 	add	fp, #4
0e000     A7 1C 02 FB | 	rdlong	arg06, fp
0e004     04 4E 05 F1 | 	add	fp, #4
0e008     A7 1E 02 FB | 	rdlong	arg07, fp
0e00c     04 4E 05 F1 | 	add	fp, #4
0e010     A7 20 02 FB | 	rdlong	arg08, fp
0e014     04 4E 05 F1 | 	add	fp, #4
0e018     A7 22 02 FB | 	rdlong	arg09, fp
0e01c     04 4E 05 F1 | 	add	fp, #4
0e020     A7 24 02 FB | 	rdlong	arg10, fp
0e024     30 4E 85 F1 | 	sub	fp, #48
0e028     48 67 B1 FD | 	call	#_hg010b_spin2_blit
0e02c     48 00 90 FD | 	jmp	#LR__1214
0e030                 | LR__1213
0e030     F2 1E 02 FB | 	rdlong	arg07, objptr
0e034     0C 4E 05 F1 | 	add	fp, #12
0e038     A7 14 02 FB | 	rdlong	arg02, fp
0e03c     04 4E 05 F1 | 	add	fp, #4
0e040     A7 16 02 FB | 	rdlong	arg03, fp
0e044     04 4E 05 F1 | 	add	fp, #4
0e048     A7 18 02 FB | 	rdlong	arg04, fp
0e04c     04 4E 05 F1 | 	add	fp, #4
0e050     A7 1A 02 FB | 	rdlong	arg05, fp
0e054     04 4E 05 F1 | 	add	fp, #4
0e058     A7 20 02 FB | 	rdlong	arg08, fp
0e05c     04 4E 05 F1 | 	add	fp, #4
0e060     A7 22 02 FB | 	rdlong	arg09, fp
0e064     20 4E 85 F1 | 	sub	fp, #32
0e068     0F 13 02 F6 | 	mov	arg01, arg07
0e06c     0A 1C C6 F9 | 	decod	arg06, #10
0e070     0A 24 C6 F9 | 	decod	arg10, #10
0e074     FC 66 B1 FD | 	call	#_hg010b_spin2_blit
0e078                 | LR__1214
0e078                 | LR__1215
0e078     A7 F0 03 F6 | 	mov	ptra, fp
0e07c     B2 00 A0 FD | 	call	#popregs_
0e080                 | _do_blit_ret
0e080     2D 00 64 FD | 	ret
0e084                 | 
0e084                 | ' 
0e084                 | ' 
0e084                 | ' '-------------------- bin$
0e084                 | ' 
0e084                 | ' sub do_bin
0e084                 | _do_bin
0e084     01 4A 05 F6 | 	mov	COUNT_, #1
0e088     A8 00 A0 FD | 	call	#pushregs_
0e08c     18 F0 07 F1 | 	add	ptra, #24
0e090     4A 00 00 FF 
0e094     80 E4 05 F1 | 	add	objptr, ##38016
0e098     F2 26 02 FB | 	rdlong	local01, objptr
0e09c     13 17 02 F6 | 	mov	arg03, local01
0e0a0     01 16 66 F0 | 	shl	arg03, #1
0e0a4     13 17 02 F1 | 	add	arg03, local01
0e0a8     02 16 66 F0 | 	shl	arg03, #2
0e0ac     03 00 00 FF 
0e0b0     04 E4 85 F1 | 	sub	objptr, ##1540
0e0b4     F2 16 02 F1 | 	add	arg03, objptr
0e0b8     0B 17 02 FB | 	rdlong	arg03, arg03
0e0bc     0C 4E 05 F1 | 	add	fp, #12
0e0c0     A7 16 62 FC | 	wrlong	arg03, fp
0e0c4                 | ' 
0e0c4                 | ' numpar=compiledline(lineptr_e).result.uresult
0e0c4                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e0c4     0C 4E 85 F1 | 	sub	fp, #12
0e0c8     03 16 16 F2 | 	cmp	arg03, #3 wc
0e0cc     47 00 00 FF 
0e0d0     7C E4 85 F1 | 	sub	objptr, ##36476
0e0d4     0C 4E 05 C1 |  if_b	add	fp, #12
0e0d8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0e0dc     0C 4E 85 C1 |  if_b	sub	fp, #12
0e0e0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1220
0e0e4     00 12 06 F6 | 	mov	arg01, #0
0e0e8     C4 D5 B1 FD | 	call	#__system___getiolock_0599
0e0ec     FD 12 02 F6 | 	mov	arg01, result1
0e0f0     94 78 B1 FD | 	call	#__system___lockmem
0e0f4     AD 01 00 FF 
0e0f8     FE 15 06 F6 | 	mov	arg02, ##@LR__5818
0e0fc     00 12 06 F6 | 	mov	arg01, #0
0e100     00 16 06 F6 | 	mov	arg03, #0
0e104     74 85 B1 FD | 	call	#__system___basic_print_string
0e108     00 12 06 F6 | 	mov	arg01, #0
0e10c     A0 D5 B1 FD | 	call	#__system___getiolock_0599
0e110     FD 00 68 FC | 	wrlong	#0, result1
0e114     27 12 06 F6 | 	mov	arg01, #39
0e118     00 14 06 F6 | 	mov	arg02, #0
0e11c     7C 3E B1 FD | 	call	#_printerror
0e120     B8 00 90 FD | 	jmp	#LR__1223
0e124                 | LR__1220
0e124                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e124     0C 4E 05 F1 | 	add	fp, #12
0e128     A7 26 02 FB | 	rdlong	local01, fp
0e12c     0C 4E 85 F1 | 	sub	fp, #12
0e130     02 26 0E F2 | 	cmp	local01, #2 wz
0e134     38 00 90 5D |  if_ne	jmp	#LR__1221
0e138     44 EB BF FD | 	call	#_pop
0e13c     FF 26 02 F6 | 	mov	local01, result3
0e140     A7 FA 61 FC | 	wrlong	result1, fp
0e144     04 4E 05 F1 | 	add	fp, #4
0e148     A7 FC 61 FC | 	wrlong	result2, fp
0e14c     04 4E 05 F1 | 	add	fp, #4
0e150     A7 26 62 FC | 	wrlong	local01, fp
0e154     08 4E 85 F1 | 	sub	fp, #8
0e158     A7 12 02 F6 | 	mov	arg01, fp
0e15c     04 ED BF FD | 	call	#_converttoint
0e160     14 4E 05 F1 | 	add	fp, #20
0e164     A7 FA 61 FC | 	wrlong	result1, fp
0e168     14 4E 85 F1 | 	sub	fp, #20
0e16c     0C 00 90 FD | 	jmp	#LR__1222
0e170                 | LR__1221
0e170     14 4E 05 F1 | 	add	fp, #20
0e174     A7 00 68 FC | 	wrlong	#0, fp
0e178     14 4E 85 F1 | 	sub	fp, #20
0e17c                 | LR__1222
0e17c     00 EB BF FD | 	call	#_pop
0e180     FF 26 02 F6 | 	mov	local01, result3
0e184     A7 FA 61 FC | 	wrlong	result1, fp
0e188     04 4E 05 F1 | 	add	fp, #4
0e18c     A7 FC 61 FC | 	wrlong	result2, fp
0e190     04 4E 05 F1 | 	add	fp, #4
0e194     A7 26 62 FC | 	wrlong	local01, fp
0e198     08 4E 85 F1 | 	sub	fp, #8
0e19c     A7 12 02 F6 | 	mov	arg01, fp
0e1a0     C0 EC BF FD | 	call	#_converttoint
0e1a4     10 4E 05 F1 | 	add	fp, #16
0e1a8     A7 FA 61 FC | 	wrlong	result1, fp
0e1ac     FD 12 02 F6 | 	mov	arg01, result1
0e1b0     04 4E 05 F1 | 	add	fp, #4
0e1b4     A7 14 02 FB | 	rdlong	arg02, fp
0e1b8     14 4E 85 F1 | 	sub	fp, #20
0e1bc     02 16 06 F6 | 	mov	arg03, #2
0e1c0     94 9A B1 FD | 	call	#__system__Number_S
0e1c4     A7 FA 61 FC | 	wrlong	result1, fp
0e1c8     08 4E 05 F1 | 	add	fp, #8
0e1cc     A7 3E 68 FC | 	wrlong	#31, fp
0e1d0     08 4E 85 F1 | 	sub	fp, #8
0e1d4     A7 12 02 F6 | 	mov	arg01, fp
0e1d8     3C EB BF FD | 	call	#_push
0e1dc                 | LR__1223
0e1dc     A7 F0 03 F6 | 	mov	ptra, fp
0e1e0     B2 00 A0 FD | 	call	#popregs_
0e1e4                 | _do_bin_ret
0e1e4     2D 00 64 FD | 	ret
0e1e8                 | 
0e1e8                 | ' 
0e1e8                 | ' '-------------------- box
0e1e8                 | ' 
0e1e8                 | ' sub do_box
0e1e8                 | _do_box
0e1e8     03 4A 05 F6 | 	mov	COUNT_, #3
0e1ec     A8 00 A0 FD | 	call	#pushregs_
0e1f0     30 F0 07 F1 | 	add	ptra, #48
0e1f4     88 EA BF FD | 	call	#_pop
0e1f8     FD 1A 02 F6 | 	mov	arg05, result1
0e1fc     FE 18 02 F6 | 	mov	arg04, result2
0e200     FF 16 02 F6 | 	mov	arg03, result3
0e204     24 4E 05 F1 | 	add	fp, #36
0e208     A7 1A 62 FC | 	wrlong	arg05, fp
0e20c     04 4E 05 F1 | 	add	fp, #4
0e210     A7 18 62 FC | 	wrlong	arg04, fp
0e214     04 4E 05 F1 | 	add	fp, #4
0e218     A7 16 62 FC | 	wrlong	arg03, fp
0e21c     2C 4E 85 F1 | 	sub	fp, #44
0e220     5C EA BF FD | 	call	#_pop
0e224     FD 1A 02 F6 | 	mov	arg05, result1
0e228     FE 18 02 F6 | 	mov	arg04, result2
0e22c     FF 16 02 F6 | 	mov	arg03, result3
0e230     18 4E 05 F1 | 	add	fp, #24
0e234     A7 1A 62 FC | 	wrlong	arg05, fp
0e238     04 4E 05 F1 | 	add	fp, #4
0e23c     A7 18 62 FC | 	wrlong	arg04, fp
0e240     04 4E 05 F1 | 	add	fp, #4
0e244     A7 16 62 FC | 	wrlong	arg03, fp
0e248     20 4E 85 F1 | 	sub	fp, #32
0e24c     30 EA BF FD | 	call	#_pop
0e250     FD 1A 02 F6 | 	mov	arg05, result1
0e254     FE 18 02 F6 | 	mov	arg04, result2
0e258     FF 26 02 F6 | 	mov	local01, result3
0e25c     0C 4E 05 F1 | 	add	fp, #12
0e260     A7 1A 62 FC | 	wrlong	arg05, fp
0e264     04 4E 05 F1 | 	add	fp, #4
0e268     A7 18 62 FC | 	wrlong	arg04, fp
0e26c     04 4E 05 F1 | 	add	fp, #4
0e270     A7 26 62 FC | 	wrlong	local01, fp
0e274     14 4E 85 F1 | 	sub	fp, #20
0e278     04 EA BF FD | 	call	#_pop
0e27c     A7 FA 61 FC | 	wrlong	result1, fp
0e280     04 4E 05 F1 | 	add	fp, #4
0e284     A7 FC 61 FC | 	wrlong	result2, fp
0e288     04 4E 05 F1 | 	add	fp, #4
0e28c     A7 FE 61 FC | 	wrlong	result3, fp
0e290                 | ' 
0e290                 | ' t4=pop()
0e290                 | ' t3=pop()
0e290                 | ' t2=pop()
0e290                 | ' t1=pop()
0e290                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e290     FF 1A 02 F6 | 	mov	arg05, result3
0e294     08 4E 85 F1 | 	sub	fp, #8
0e298     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e29c     08 4E 05 51 |  if_ne	add	fp, #8
0e2a0     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e2a4     08 4E 85 51 |  if_ne	sub	fp, #8
0e2a8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e2ac     A8 00 90 5D |  if_ne	jmp	#LR__1230
0e2b0     14 4E 05 F1 | 	add	fp, #20
0e2b4     A7 26 02 FB | 	rdlong	local01, fp
0e2b8     14 4E 85 F1 | 	sub	fp, #20
0e2bc     1C 26 0E F2 | 	cmp	local01, #28 wz
0e2c0     14 4E 05 51 |  if_ne	add	fp, #20
0e2c4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e2c8     14 4E 85 51 |  if_ne	sub	fp, #20
0e2cc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e2d0     84 00 90 5D |  if_ne	jmp	#LR__1230
0e2d4     20 4E 05 F1 | 	add	fp, #32
0e2d8     A7 26 02 FB | 	rdlong	local01, fp
0e2dc     20 4E 85 F1 | 	sub	fp, #32
0e2e0     1C 26 0E F2 | 	cmp	local01, #28 wz
0e2e4     20 4E 05 51 |  if_ne	add	fp, #32
0e2e8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e2ec     20 4E 85 51 |  if_ne	sub	fp, #32
0e2f0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e2f4     60 00 90 5D |  if_ne	jmp	#LR__1230
0e2f8     2C 4E 05 F1 | 	add	fp, #44
0e2fc     A7 26 02 FB | 	rdlong	local01, fp
0e300     2C 4E 85 F1 | 	sub	fp, #44
0e304     1C 26 0E F2 | 	cmp	local01, #28 wz
0e308     2C 4E 05 51 |  if_ne	add	fp, #44
0e30c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e310     2C 4E 85 51 |  if_ne	sub	fp, #44
0e314     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e318     3C 00 90 5D |  if_ne	jmp	#LR__1230
0e31c     A7 12 02 FB | 	rdlong	arg01, fp
0e320     0C 4E 05 F1 | 	add	fp, #12
0e324     A7 14 02 FB | 	rdlong	arg02, fp
0e328     0C 4E 05 F1 | 	add	fp, #12
0e32c     A7 16 02 FB | 	rdlong	arg03, fp
0e330     0C 4E 05 F1 | 	add	fp, #12
0e334     A7 18 02 FB | 	rdlong	arg04, fp
0e338     24 4E 85 F1 | 	sub	fp, #36
0e33c     37 00 00 FF 
0e340     28 E4 05 F1 | 	add	objptr, ##28200
0e344     F2 1A 02 FB | 	rdlong	arg05, objptr
0e348     37 00 00 FF 
0e34c     28 E4 85 F1 | 	sub	objptr, ##28200
0e350     E8 56 B1 FD | 	call	#_hg010b_spin2_box
0e354                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e354     6C 00 90 FD | 	jmp	#LR__1231
0e358                 | LR__1230
0e358     A7 12 02 F6 | 	mov	arg01, fp
0e35c     04 EB BF FD | 	call	#_converttoint
0e360     FD 28 02 F6 | 	mov	local02, result1
0e364     0C 4E 05 F1 | 	add	fp, #12
0e368     A7 12 02 F6 | 	mov	arg01, fp
0e36c     0C 4E 85 F1 | 	sub	fp, #12
0e370     F0 EA BF FD | 	call	#_converttoint
0e374     FD 2A 02 F6 | 	mov	local03, result1
0e378     18 4E 05 F1 | 	add	fp, #24
0e37c     A7 12 02 F6 | 	mov	arg01, fp
0e380     18 4E 85 F1 | 	sub	fp, #24
0e384     DC EA BF FD | 	call	#_converttoint
0e388     FD 26 02 F6 | 	mov	local01, result1
0e38c     24 4E 05 F1 | 	add	fp, #36
0e390     A7 12 02 F6 | 	mov	arg01, fp
0e394     24 4E 85 F1 | 	sub	fp, #36
0e398     C8 EA BF FD | 	call	#_converttoint
0e39c     FD 18 02 F6 | 	mov	arg04, result1
0e3a0     37 00 00 FF 
0e3a4     28 E4 05 F1 | 	add	objptr, ##28200
0e3a8     F2 1A 02 FB | 	rdlong	arg05, objptr
0e3ac     37 00 00 FF 
0e3b0     28 E4 85 F1 | 	sub	objptr, ##28200
0e3b4     14 13 02 F6 | 	mov	arg01, local02
0e3b8     15 15 02 F6 | 	mov	arg02, local03
0e3bc     13 17 02 F6 | 	mov	arg03, local01
0e3c0     78 56 B1 FD | 	call	#_hg010b_spin2_box
0e3c4                 | LR__1231
0e3c4     A7 F0 03 F6 | 	mov	ptra, fp
0e3c8     B2 00 A0 FD | 	call	#popregs_
0e3cc                 | _do_box_ret
0e3cc     2D 00 64 FD | 	ret
0e3d0                 | 
0e3d0                 | ' 
0e3d0                 | ' '-------------------- brun
0e3d0                 | ' 
0e3d0                 | ' sub do_brun
0e3d0                 | _do_brun
0e3d0     08 4A 05 F6 | 	mov	COUNT_, #8
0e3d4     A8 00 A0 FD | 	call	#pushregs_
0e3d8     A4 E8 BF FD | 	call	#_pop
0e3dc     FE 1A 02 F6 | 	mov	arg05, result2
0e3e0     FF 18 02 F6 | 	mov	arg04, result3
0e3e4     FD 26 02 F6 | 	mov	local01, result1
0e3e8     0D 29 02 F6 | 	mov	local02, arg05
0e3ec     0C 2B 02 F6 | 	mov	local03, arg04
0e3f0                 | ' 
0e3f0                 | ' t1=pop() 
0e3f0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e3f0     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e3f4     10 00 90 5D |  if_ne	jmp	#LR__1240
0e3f8     13 13 02 F6 | 	mov	arg01, local01
0e3fc     F8 E9 BF FD | 	call	#_convertstring
0e400     FD 26 02 F6 | 	mov	local01, result1
0e404     1F 2A 06 F6 | 	mov	local03, #31
0e408                 | LR__1240
0e408                 | ' if t1.result_type=result_string then
0e408     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e40c     EC 01 90 5D |  if_ne	jmp	#LR__1244
0e410     13 2D 02 F6 | 	mov	local04, local01
0e414                 | '   filename=t1.result.sresult
0e414                 | '   if left$(filename,1)="/" then 
0e414     16 13 02 F6 | 	mov	arg01, local04
0e418     01 14 06 F6 | 	mov	arg02, #1
0e41c     E4 95 B1 FD | 	call	#__system__Left_S
0e420     FD 12 02 F6 | 	mov	arg01, result1
0e424     AE 01 00 FF 
0e428     05 14 06 F6 | 	mov	arg02, ##@LR__5819
0e42c     80 75 B1 FD | 	call	#__system___string_cmp
0e430     00 FA 0D F2 | 	cmp	result1, #0 wz
0e434     16 2F 02 A6 |  if_e	mov	local05, local04
0e438     14 00 90 AD |  if_e	jmp	#LR__1241
0e43c     AE 01 00 FF 
0e440     07 12 06 F6 | 	mov	arg01, ##@LR__5820
0e444     16 15 02 F6 | 	mov	arg02, local04
0e448     98 75 B1 FD | 	call	#__system___string_concat
0e44c     FD 2E 02 F6 | 	mov	local05, result1
0e450                 | LR__1241
0e450                 | '   open fullfilename for input as #9
0e450     09 12 06 F6 | 	mov	arg01, #9
0e454     17 15 02 F6 | 	mov	arg02, local05
0e458     00 16 06 F6 | 	mov	arg03, #0
0e45c     2C 81 B1 FD | 	call	#__system___basic_open_string
0e460     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e464     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e468     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e46c     FD 30 0A F6 | 	mov	local06, result1 wz
0e470                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e470     8C 00 90 AD |  if_e	jmp	#LR__1242
0e474     00 12 06 F6 | 	mov	arg01, #0
0e478     34 D2 B1 FD | 	call	#__system___getiolock_0599
0e47c     FD 12 02 F6 | 	mov	arg01, result1
0e480     04 75 B1 FD | 	call	#__system___lockmem
0e484     AE 01 00 FF 
0e488     10 14 06 F6 | 	mov	arg02, ##@LR__5821
0e48c     00 12 06 F6 | 	mov	arg01, #0
0e490     00 16 06 F6 | 	mov	arg03, #0
0e494     E4 81 B1 FD | 	call	#__system___basic_print_string
0e498     00 12 06 F6 | 	mov	arg01, #0
0e49c     18 15 02 F6 | 	mov	arg02, local06
0e4a0     00 16 06 F6 | 	mov	arg03, #0
0e4a4     0A 18 06 F6 | 	mov	arg04, #10
0e4a8     14 82 B1 FD | 	call	#__system___basic_print_integer
0e4ac     AE 01 00 FF 
0e4b0     1E 14 06 F6 | 	mov	arg02, ##@LR__5822
0e4b4     00 12 06 F6 | 	mov	arg01, #0
0e4b8     00 16 06 F6 | 	mov	arg03, #0
0e4bc     BC 81 B1 FD | 	call	#__system___basic_print_string
0e4c0     18 13 02 F6 | 	mov	arg01, local06
0e4c4     4C 9E B1 FD | 	call	#__system___strerror
0e4c8     FD 14 02 F6 | 	mov	arg02, result1
0e4cc     00 12 06 F6 | 	mov	arg01, #0
0e4d0     00 16 06 F6 | 	mov	arg03, #0
0e4d4     A4 81 B1 FD | 	call	#__system___basic_print_string
0e4d8     00 12 06 F6 | 	mov	arg01, #0
0e4dc     0A 14 06 F6 | 	mov	arg02, #10
0e4e0     00 16 06 F6 | 	mov	arg03, #0
0e4e4     3C 81 B1 FD | 	call	#__system___basic_print_char
0e4e8     00 12 06 F6 | 	mov	arg01, #0
0e4ec     C0 D1 B1 FD | 	call	#__system___getiolock_0599
0e4f0     FD 00 68 FC | 	wrlong	#0, result1
0e4f4     09 12 06 F6 | 	mov	arg01, #9
0e4f8     E4 C7 B1 FD | 	call	#__system__close
0e4fc     FC 00 90 FD | 	jmp	#LR__1245
0e500                 | LR__1242
0e500     01 32 06 F6 | 	mov	local07, #1
0e504     00 34 06 F6 | 	mov	local08, #0
0e508                 | '   do
0e508                 | LR__1243
0e508                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e508     4E 00 00 FF 
0e50c     B4 E4 05 F1 | 	add	objptr, ##40116
0e510     F2 16 02 F6 | 	mov	arg03, objptr
0e514     4E 00 00 FF 
0e518     B4 E4 85 F1 | 	sub	objptr, ##40116
0e51c     09 12 06 F6 | 	mov	arg01, #9
0e520     19 15 02 F6 | 	mov	arg02, local07
0e524     0A 18 C6 F9 | 	decod	arg04, #10
0e528     01 1A 06 F6 | 	mov	arg05, #1
0e52c     C8 82 B1 FD | 	call	#__system___basic_get
0e530     FD 30 02 F6 | 	mov	local06, result1
0e534     FD 32 02 F1 | 	add	local07, result1
0e538     4E 00 00 FF 
0e53c     B4 E4 05 F1 | 	add	objptr, ##40116
0e540     F2 12 02 F6 | 	mov	arg01, objptr
0e544     1A 15 02 F6 | 	mov	arg02, local08
0e548     0A 16 C6 F9 | 	decod	arg03, #10
0e54c     42 00 00 FF 
0e550     E8 E5 85 F1 | 	sub	objptr, ##34280
0e554     44 68 B1 FD | 	call	#_psram_spin2_write
0e558     0B 00 00 FF 
0e55c     CC E4 85 F1 | 	sub	objptr, ##5836
0e560     18 35 02 F1 | 	add	local08, local06
0e564     02 00 00 FF 
0e568     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e56c     E0 03 00 AF 
0e570     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e574     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1243
0e578     36 00 00 FF 
0e57c     FC E5 05 F1 | 	add	objptr, ##28156
0e580     F2 12 02 FB | 	rdlong	arg01, objptr
0e584     03 12 62 FD | 	cogstop	arg01
0e588     04 E4 05 F1 | 	add	objptr, #4
0e58c     F2 12 02 FB | 	rdlong	arg01, objptr
0e590     03 12 62 FD | 	cogstop	arg01
0e594     04 E4 05 F1 | 	add	objptr, #4
0e598     F2 12 02 FB | 	rdlong	arg01, objptr
0e59c     03 12 62 FD | 	cogstop	arg01
0e5a0     19 00 00 FF 
0e5a4     3C E5 05 F1 | 	add	objptr, ##13116
0e5a8     F2 12 02 FB | 	rdlong	arg01, objptr
0e5ac     03 12 62 FD | 	cogstop	arg01
0e5b0     18 00 00 FF 
0e5b4     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e5b8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e5bc     18 00 00 FF 
0e5c0     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e5c4     19 00 00 FF 
0e5c8     34 E5 85 F1 | 	sub	objptr, ##13108
0e5cc     1E 34 06 F6 | 	mov	local08, #30
0e5d0     28 E4 61 FD | 	setq	objptr
0e5d4     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e5d8     01 34 66 C6 |  if_b	neg	local08, #1
0e5dc     1B 00 00 FF 
0e5e0     B8 E4 05 F1 | 	add	objptr, ##14008
0e5e4     F2 34 62 FC | 	wrlong	local08, objptr
0e5e8     52 00 00 FF 
0e5ec     C4 E4 85 F1 | 	sub	objptr, ##42180
0e5f0     00 12 06 F6 | 	mov	arg01, #0
0e5f4     01 12 62 FD | 	cogid	arg01
0e5f8     03 12 62 FD | 	cogstop	arg01
0e5fc                 | LR__1244
0e5fc                 | LR__1245
0e5fc     A7 F0 03 F6 | 	mov	ptra, fp
0e600     B2 00 A0 FD | 	call	#popregs_
0e604                 | _do_brun_ret
0e604     2D 00 64 FD | 	ret
0e608                 | 
0e608                 | ' 
0e608                 | ' '-------------------- cd
0e608                 | ' 
0e608                 | ' sub do_cd
0e608                 | _do_cd
0e608     06 4A 05 F6 | 	mov	COUNT_, #6
0e60c     A8 00 A0 FD | 	call	#pushregs_
0e610     AE 01 00 FF 
0e614     21 12 06 F6 | 	mov	arg01, ##@LR__5823
0e618     31 14 06 F6 | 	mov	arg02, #49
0e61c     C8 D1 B1 FD | 	call	#__system___basic_dir
0e620     5C E6 BF FD | 	call	#_pop
0e624     FE 18 02 F6 | 	mov	arg04, result2
0e628     FF 16 02 F6 | 	mov	arg03, result3
0e62c     FD 26 02 F6 | 	mov	local01, result1
0e630     0C 29 02 F6 | 	mov	local02, arg04
0e634     0B 2B 02 F6 | 	mov	local03, arg03
0e638                 | ' t1=pop()
0e638                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e638     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e63c     10 00 90 5D |  if_ne	jmp	#LR__1250
0e640     13 13 02 F6 | 	mov	arg01, local01
0e644     B0 E7 BF FD | 	call	#_convertstring
0e648     FD 26 02 F6 | 	mov	local01, result1
0e64c     1F 2A 06 F6 | 	mov	local03, #31
0e650                 | LR__1250
0e650                 | ' if t1.result_type<>result_string then printerror(15): return
0e650     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e654     10 00 90 AD |  if_e	jmp	#LR__1251
0e658     0F 12 06 F6 | 	mov	arg01, #15
0e65c     00 14 06 F6 | 	mov	arg02, #0
0e660     38 39 B1 FD | 	call	#_printerror
0e664     48 05 90 FD | 	jmp	#LR__1269
0e668                 | LR__1251
0e668     13 2D 02 F6 | 	mov	local04, local01
0e66c                 | ' newdir$=t1.result.sresult
0e66c                 | ' if newdir$=".." then 
0e66c     AE 01 00 FF 
0e670     23 14 06 F6 | 	mov	arg02, ##@LR__5824
0e674     16 13 02 F6 | 	mov	arg01, local04
0e678     34 73 B1 FD | 	call	#__system___string_cmp
0e67c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e680     C4 01 90 5D |  if_ne	jmp	#LR__1258
0e684     4A 00 00 FF 
0e688     94 E4 05 F1 | 	add	objptr, ##38036
0e68c     F2 12 02 FB | 	rdlong	arg01, objptr
0e690     4A 00 00 FF 
0e694     94 E4 85 F1 | 	sub	objptr, ##38036
0e698     09 2F 02 F6 | 	mov	local05, arg01
0e69c     97 06 48 FB | 	callpa	#(@LR__1253-@LR__1252)>>2,fcache_load_ptr_
0e6a0                 | LR__1252
0e6a0     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e6a4     01 2E 06 51 |  if_ne	add	local05, #1
0e6a8     F4 FF 9F 5D |  if_ne	jmp	#LR__1252
0e6ac                 | LR__1253
0e6ac     17 13 C2 F2 | 	subr	arg01, local05
0e6b0     4A 00 00 FF 
0e6b4     94 E4 05 F1 | 	add	objptr, ##38036
0e6b8     F2 14 02 FB | 	rdlong	arg02, objptr
0e6bc     4A 00 00 FF 
0e6c0     94 E4 85 F1 | 	sub	objptr, ##38036
0e6c4     AE 01 00 FF 
0e6c8     26 16 06 F6 | 	mov	arg03, ##@LR__5825
0e6cc     80 99 B1 FD | 	call	#__system__InstrRev
0e6d0     FD 2C 02 F6 | 	mov	local04, result1
0e6d4                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e6d4     02 2C 56 F2 | 	cmps	local04, #2 wc
0e6d8     28 00 90 CD |  if_b	jmp	#LR__1254
0e6dc     4A 00 00 FF 
0e6e0     94 E4 05 F1 | 	add	objptr, ##38036
0e6e4     F2 12 02 FB | 	rdlong	arg01, objptr
0e6e8     4A 00 00 FF 
0e6ec     94 E4 85 F1 | 	sub	objptr, ##38036
0e6f0     01 2C 86 F1 | 	sub	local04, #1
0e6f4     16 15 02 F6 | 	mov	arg02, local04
0e6f8     08 93 B1 FD | 	call	#__system__Left_S
0e6fc     FD 2C 02 F6 | 	mov	local04, result1
0e700     08 00 90 FD | 	jmp	#LR__1255
0e704                 | LR__1254
0e704     AE 01 00 FF 
0e708     28 2C 06 F6 | 	mov	local04, ##@LR__5826
0e70c                 | LR__1255
0e70c     16 13 02 F6 | 	mov	arg01, local04
0e710     00 79 B1 FD | 	call	#__system___chdir
0e714     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e718     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e71c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e720     FD 30 0A F6 | 	mov	local06, result1 wz
0e724                 | '   chdir newdir$
0e724                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e724     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e728     A4 00 90 AD |  if_e	jmp	#LR__1256
0e72c     00 12 06 F6 | 	mov	arg01, #0
0e730     7C CF B1 FD | 	call	#__system___getiolock_0599
0e734     FD 12 02 F6 | 	mov	arg01, result1
0e738     4C 72 B1 FD | 	call	#__system___lockmem
0e73c     AE 01 00 FF 
0e740     2A 14 06 F6 | 	mov	arg02, ##@LR__5827
0e744     00 12 06 F6 | 	mov	arg01, #0
0e748     00 16 06 F6 | 	mov	arg03, #0
0e74c     2C 7F B1 FD | 	call	#__system___basic_print_string
0e750     00 12 06 F6 | 	mov	arg01, #0
0e754     18 15 02 F6 | 	mov	arg02, local06
0e758     00 16 06 F6 | 	mov	arg03, #0
0e75c     0A 18 06 F6 | 	mov	arg04, #10
0e760     5C 7F B1 FD | 	call	#__system___basic_print_integer
0e764     AE 01 00 FF 
0e768     38 14 06 F6 | 	mov	arg02, ##@LR__5828
0e76c     00 12 06 F6 | 	mov	arg01, #0
0e770     00 16 06 F6 | 	mov	arg03, #0
0e774     04 7F B1 FD | 	call	#__system___basic_print_string
0e778     45 00 00 FF 
0e77c     50 E5 05 F1 | 	add	objptr, ##35664
0e780     F2 14 02 FB | 	rdlong	arg02, objptr
0e784     45 00 00 FF 
0e788     50 E5 85 F1 | 	sub	objptr, ##35664
0e78c     00 12 06 F6 | 	mov	arg01, #0
0e790     00 16 06 F6 | 	mov	arg03, #0
0e794     E4 7E B1 FD | 	call	#__system___basic_print_string
0e798     00 12 06 F6 | 	mov	arg01, #0
0e79c     0A 14 06 F6 | 	mov	arg02, #10
0e7a0     00 16 06 F6 | 	mov	arg03, #0
0e7a4     7C 7E B1 FD | 	call	#__system___basic_print_char
0e7a8     00 12 06 F6 | 	mov	arg01, #0
0e7ac     00 CF B1 FD | 	call	#__system___getiolock_0599
0e7b0     FD 00 68 FC | 	wrlong	#0, result1
0e7b4     4A 00 00 FF 
0e7b8     94 E4 05 F1 | 	add	objptr, ##38036
0e7bc     F2 12 02 FB | 	rdlong	arg01, objptr
0e7c0     4A 00 00 FF 
0e7c4     94 E4 85 F1 | 	sub	objptr, ##38036
0e7c8     48 78 B1 FD | 	call	#__system___chdir
0e7cc     14 00 90 FD | 	jmp	#LR__1257
0e7d0                 | LR__1256
0e7d0     4A 00 00 FF 
0e7d4     94 E4 05 F1 | 	add	objptr, ##38036
0e7d8     F2 2C 62 FC | 	wrlong	local04, objptr
0e7dc     4A 00 00 FF 
0e7e0     94 E4 85 F1 | 	sub	objptr, ##38036
0e7e4                 | LR__1257
0e7e4                 | '   print "Current directory: ";currentdir$
0e7e4     00 12 06 F6 | 	mov	arg01, #0
0e7e8     C4 CE B1 FD | 	call	#__system___getiolock_0599
0e7ec     FD 12 02 F6 | 	mov	arg01, result1
0e7f0     94 71 B1 FD | 	call	#__system___lockmem
0e7f4     AE 01 00 FF 
0e7f8     3B 14 06 F6 | 	mov	arg02, ##@LR__5829
0e7fc     00 12 06 F6 | 	mov	arg01, #0
0e800     00 16 06 F6 | 	mov	arg03, #0
0e804     74 7E B1 FD | 	call	#__system___basic_print_string
0e808     4A 00 00 FF 
0e80c     94 E4 05 F1 | 	add	objptr, ##38036
0e810     F2 14 02 FB | 	rdlong	arg02, objptr
0e814     4A 00 00 FF 
0e818     94 E4 85 F1 | 	sub	objptr, ##38036
0e81c     00 12 06 F6 | 	mov	arg01, #0
0e820     00 16 06 F6 | 	mov	arg03, #0
0e824     54 7E B1 FD | 	call	#__system___basic_print_string
0e828     00 12 06 F6 | 	mov	arg01, #0
0e82c     0A 14 06 F6 | 	mov	arg02, #10
0e830     00 16 06 F6 | 	mov	arg03, #0
0e834     EC 7D B1 FD | 	call	#__system___basic_print_char
0e838     00 12 06 F6 | 	mov	arg01, #0
0e83c     70 CE B1 FD | 	call	#__system___getiolock_0599
0e840     FD 00 68 FC | 	wrlong	#0, result1
0e844                 | '   return
0e844     68 03 90 FD | 	jmp	#LR__1269
0e848                 | LR__1258
0e848                 | ' if left$(newdir$,1)="/" then 
0e848     16 13 02 F6 | 	mov	arg01, local04
0e84c     01 14 06 F6 | 	mov	arg02, #1
0e850     B0 91 B1 FD | 	call	#__system__Left_S
0e854     FD 12 02 F6 | 	mov	arg01, result1
0e858     AE 01 00 FF 
0e85c     4F 14 06 F6 | 	mov	arg02, ##@LR__5830
0e860     4C 71 B1 FD | 	call	#__system___string_cmp
0e864     00 FA 0D F2 | 	cmp	result1, #0 wz
0e868     3C 01 90 5D |  if_ne	jmp	#LR__1261
0e86c     16 13 02 F6 | 	mov	arg01, local04
0e870     A0 77 B1 FD | 	call	#__system___chdir
0e874     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e878     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e87c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e880     FD 30 0A F6 | 	mov	local06, result1 wz
0e884                 | '   chdir(newdir$)
0e884                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e884     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e888     A4 00 90 AD |  if_e	jmp	#LR__1259
0e88c     00 12 06 F6 | 	mov	arg01, #0
0e890     1C CE B1 FD | 	call	#__system___getiolock_0599
0e894     FD 12 02 F6 | 	mov	arg01, result1
0e898     EC 70 B1 FD | 	call	#__system___lockmem
0e89c     AE 01 00 FF 
0e8a0     51 14 06 F6 | 	mov	arg02, ##@LR__5831
0e8a4     00 12 06 F6 | 	mov	arg01, #0
0e8a8     00 16 06 F6 | 	mov	arg03, #0
0e8ac     CC 7D B1 FD | 	call	#__system___basic_print_string
0e8b0     00 12 06 F6 | 	mov	arg01, #0
0e8b4     18 15 02 F6 | 	mov	arg02, local06
0e8b8     00 16 06 F6 | 	mov	arg03, #0
0e8bc     0A 18 06 F6 | 	mov	arg04, #10
0e8c0     FC 7D B1 FD | 	call	#__system___basic_print_integer
0e8c4     AE 01 00 FF 
0e8c8     5F 14 06 F6 | 	mov	arg02, ##@LR__5832
0e8cc     00 12 06 F6 | 	mov	arg01, #0
0e8d0     00 16 06 F6 | 	mov	arg03, #0
0e8d4     A4 7D B1 FD | 	call	#__system___basic_print_string
0e8d8     45 00 00 FF 
0e8dc     50 E5 05 F1 | 	add	objptr, ##35664
0e8e0     F2 14 02 FB | 	rdlong	arg02, objptr
0e8e4     45 00 00 FF 
0e8e8     50 E5 85 F1 | 	sub	objptr, ##35664
0e8ec     00 12 06 F6 | 	mov	arg01, #0
0e8f0     00 16 06 F6 | 	mov	arg03, #0
0e8f4     84 7D B1 FD | 	call	#__system___basic_print_string
0e8f8     00 12 06 F6 | 	mov	arg01, #0
0e8fc     0A 14 06 F6 | 	mov	arg02, #10
0e900     00 16 06 F6 | 	mov	arg03, #0
0e904     1C 7D B1 FD | 	call	#__system___basic_print_char
0e908     00 12 06 F6 | 	mov	arg01, #0
0e90c     A0 CD B1 FD | 	call	#__system___getiolock_0599
0e910     FD 00 68 FC | 	wrlong	#0, result1
0e914     4A 00 00 FF 
0e918     94 E4 05 F1 | 	add	objptr, ##38036
0e91c     F2 12 02 FB | 	rdlong	arg01, objptr
0e920     4A 00 00 FF 
0e924     94 E4 85 F1 | 	sub	objptr, ##38036
0e928     E8 76 B1 FD | 	call	#__system___chdir
0e92c     14 00 90 FD | 	jmp	#LR__1260
0e930                 | LR__1259
0e930     4A 00 00 FF 
0e934     94 E4 05 F1 | 	add	objptr, ##38036
0e938     F2 2C 62 FC | 	wrlong	local04, objptr
0e93c     4A 00 00 FF 
0e940     94 E4 85 F1 | 	sub	objptr, ##38036
0e944                 | LR__1260
0e944                 | '   print "Current directory: ";currentdir$
0e944     00 12 06 F6 | 	mov	arg01, #0
0e948     64 CD B1 FD | 	call	#__system___getiolock_0599
0e94c     FD 12 02 F6 | 	mov	arg01, result1
0e950     34 70 B1 FD | 	call	#__system___lockmem
0e954     AE 01 00 FF 
0e958     62 14 06 F6 | 	mov	arg02, ##@LR__5833
0e95c     00 12 06 F6 | 	mov	arg01, #0
0e960     00 16 06 F6 | 	mov	arg03, #0
0e964     14 7D B1 FD | 	call	#__system___basic_print_string
0e968     4A 00 00 FF 
0e96c     94 E4 05 F1 | 	add	objptr, ##38036
0e970     F2 14 02 FB | 	rdlong	arg02, objptr
0e974     4A 00 00 FF 
0e978     94 E4 85 F1 | 	sub	objptr, ##38036
0e97c     00 12 06 F6 | 	mov	arg01, #0
0e980     00 16 06 F6 | 	mov	arg03, #0
0e984     F4 7C B1 FD | 	call	#__system___basic_print_string
0e988     00 12 06 F6 | 	mov	arg01, #0
0e98c     0A 14 06 F6 | 	mov	arg02, #10
0e990     00 16 06 F6 | 	mov	arg03, #0
0e994     8C 7C B1 FD | 	call	#__system___basic_print_char
0e998     00 12 06 F6 | 	mov	arg01, #0
0e99c     10 CD B1 FD | 	call	#__system___getiolock_0599
0e9a0     FD 00 68 FC | 	wrlong	#0, result1
0e9a4                 | '   return
0e9a4     08 02 90 FD | 	jmp	#LR__1269
0e9a8                 | LR__1261
0e9a8                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0e9a8     4A 00 00 FF 
0e9ac     94 E4 05 F1 | 	add	objptr, ##38036
0e9b0     F2 12 02 FB | 	rdlong	arg01, objptr
0e9b4     4A 00 00 FF 
0e9b8     94 E4 85 F1 | 	sub	objptr, ##38036
0e9bc     AE 01 00 FF 
0e9c0     76 14 06 F6 | 	mov	arg02, ##@LR__5834
0e9c4     E8 6F B1 FD | 	call	#__system___string_cmp
0e9c8     00 FA 0D F2 | 	cmp	result1, #0 wz
0e9cc     34 00 90 AD |  if_e	jmp	#LR__1262
0e9d0     4A 00 00 FF 
0e9d4     94 E4 05 F1 | 	add	objptr, ##38036
0e9d8     F2 12 02 FB | 	rdlong	arg01, objptr
0e9dc     4A 00 00 FF 
0e9e0     94 E4 85 F1 | 	sub	objptr, ##38036
0e9e4     AE 01 00 FF 
0e9e8     78 14 06 F6 | 	mov	arg02, ##@LR__5835
0e9ec     F4 6F B1 FD | 	call	#__system___string_concat
0e9f0     FD 12 02 F6 | 	mov	arg01, result1
0e9f4     16 15 02 F6 | 	mov	arg02, local04
0e9f8     E8 6F B1 FD | 	call	#__system___string_concat
0e9fc     FD 2C 02 F6 | 	mov	local04, result1
0ea00     20 00 90 FD | 	jmp	#LR__1263
0ea04                 | LR__1262
0ea04     4A 00 00 FF 
0ea08     94 E4 05 F1 | 	add	objptr, ##38036
0ea0c     F2 12 02 FB | 	rdlong	arg01, objptr
0ea10     4A 00 00 FF 
0ea14     94 E4 85 F1 | 	sub	objptr, ##38036
0ea18     16 15 02 F6 | 	mov	arg02, local04
0ea1c     C4 6F B1 FD | 	call	#__system___string_concat
0ea20     FD 2C 02 F6 | 	mov	local04, result1
0ea24                 | LR__1263
0ea24                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0ea24     16 13 02 F6 | 	mov	arg01, local04
0ea28     01 14 06 F6 | 	mov	arg02, #1
0ea2c     5C 90 B1 FD | 	call	#__system__Right_S
0ea30     FD 12 02 F6 | 	mov	arg01, result1
0ea34     AE 01 00 FF 
0ea38     7A 14 06 F6 | 	mov	arg02, ##@LR__5836
0ea3c     70 6F B1 FD | 	call	#__system___string_cmp
0ea40     00 FA 0D F2 | 	cmp	result1, #0 wz
0ea44     30 00 90 5D |  if_ne	jmp	#LR__1266
0ea48     16 13 02 F6 | 	mov	arg01, local04
0ea4c     09 2F 02 F6 | 	mov	local05, arg01
0ea50     97 06 48 FB | 	callpa	#(@LR__1265-@LR__1264)>>2,fcache_load_ptr_
0ea54                 | LR__1264
0ea54     17 FB C9 FA | 	rdbyte	result1, local05 wz
0ea58     01 2E 06 51 |  if_ne	add	local05, #1
0ea5c     F4 FF 9F 5D |  if_ne	jmp	#LR__1264
0ea60                 | LR__1265
0ea60     09 2F 82 F1 | 	sub	local05, arg01
0ea64     17 15 02 F6 | 	mov	arg02, local05
0ea68     01 14 86 F1 | 	sub	arg02, #1
0ea6c     16 13 02 F6 | 	mov	arg01, local04
0ea70     90 8F B1 FD | 	call	#__system__Left_S
0ea74     FD 2C 02 F6 | 	mov	local04, result1
0ea78                 | LR__1266
0ea78     16 13 02 F6 | 	mov	arg01, local04
0ea7c     94 75 B1 FD | 	call	#__system___chdir
0ea80     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ea84     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0ea88     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ea8c     FD 30 0A F6 | 	mov	local06, result1 wz
0ea90                 | '   chdir(newdir$)
0ea90                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0ea90     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0ea94     A4 00 90 AD |  if_e	jmp	#LR__1267
0ea98     00 12 06 F6 | 	mov	arg01, #0
0ea9c     10 CC B1 FD | 	call	#__system___getiolock_0599
0eaa0     FD 12 02 F6 | 	mov	arg01, result1
0eaa4     E0 6E B1 FD | 	call	#__system___lockmem
0eaa8     AE 01 00 FF 
0eaac     7C 14 06 F6 | 	mov	arg02, ##@LR__5837
0eab0     00 12 06 F6 | 	mov	arg01, #0
0eab4     00 16 06 F6 | 	mov	arg03, #0
0eab8     C0 7B B1 FD | 	call	#__system___basic_print_string
0eabc     00 12 06 F6 | 	mov	arg01, #0
0eac0     18 15 02 F6 | 	mov	arg02, local06
0eac4     00 16 06 F6 | 	mov	arg03, #0
0eac8     0A 18 06 F6 | 	mov	arg04, #10
0eacc     F0 7B B1 FD | 	call	#__system___basic_print_integer
0ead0     AE 01 00 FF 
0ead4     8A 14 06 F6 | 	mov	arg02, ##@LR__5838
0ead8     00 12 06 F6 | 	mov	arg01, #0
0eadc     00 16 06 F6 | 	mov	arg03, #0
0eae0     98 7B B1 FD | 	call	#__system___basic_print_string
0eae4     45 00 00 FF 
0eae8     50 E5 05 F1 | 	add	objptr, ##35664
0eaec     F2 14 02 FB | 	rdlong	arg02, objptr
0eaf0     45 00 00 FF 
0eaf4     50 E5 85 F1 | 	sub	objptr, ##35664
0eaf8     00 12 06 F6 | 	mov	arg01, #0
0eafc     00 16 06 F6 | 	mov	arg03, #0
0eb00     78 7B B1 FD | 	call	#__system___basic_print_string
0eb04     00 12 06 F6 | 	mov	arg01, #0
0eb08     0A 14 06 F6 | 	mov	arg02, #10
0eb0c     00 16 06 F6 | 	mov	arg03, #0
0eb10     10 7B B1 FD | 	call	#__system___basic_print_char
0eb14     00 12 06 F6 | 	mov	arg01, #0
0eb18     94 CB B1 FD | 	call	#__system___getiolock_0599
0eb1c     FD 00 68 FC | 	wrlong	#0, result1
0eb20     4A 00 00 FF 
0eb24     94 E4 05 F1 | 	add	objptr, ##38036
0eb28     F2 12 02 FB | 	rdlong	arg01, objptr
0eb2c     4A 00 00 FF 
0eb30     94 E4 85 F1 | 	sub	objptr, ##38036
0eb34     DC 74 B1 FD | 	call	#__system___chdir
0eb38     14 00 90 FD | 	jmp	#LR__1268
0eb3c                 | LR__1267
0eb3c     4A 00 00 FF 
0eb40     94 E4 05 F1 | 	add	objptr, ##38036
0eb44     F2 2C 62 FC | 	wrlong	local04, objptr
0eb48     4A 00 00 FF 
0eb4c     94 E4 85 F1 | 	sub	objptr, ##38036
0eb50                 | LR__1268
0eb50                 | '   print "Current directory: ";currentdir$
0eb50     00 12 06 F6 | 	mov	arg01, #0
0eb54     58 CB B1 FD | 	call	#__system___getiolock_0599
0eb58     FD 12 02 F6 | 	mov	arg01, result1
0eb5c     28 6E B1 FD | 	call	#__system___lockmem
0eb60     AE 01 00 FF 
0eb64     8D 14 06 F6 | 	mov	arg02, ##@LR__5839
0eb68     00 12 06 F6 | 	mov	arg01, #0
0eb6c     00 16 06 F6 | 	mov	arg03, #0
0eb70     08 7B B1 FD | 	call	#__system___basic_print_string
0eb74     4A 00 00 FF 
0eb78     94 E4 05 F1 | 	add	objptr, ##38036
0eb7c     F2 14 02 FB | 	rdlong	arg02, objptr
0eb80     4A 00 00 FF 
0eb84     94 E4 85 F1 | 	sub	objptr, ##38036
0eb88     00 12 06 F6 | 	mov	arg01, #0
0eb8c     00 16 06 F6 | 	mov	arg03, #0
0eb90     E8 7A B1 FD | 	call	#__system___basic_print_string
0eb94     00 12 06 F6 | 	mov	arg01, #0
0eb98     0A 14 06 F6 | 	mov	arg02, #10
0eb9c     00 16 06 F6 | 	mov	arg03, #0
0eba0     80 7A B1 FD | 	call	#__system___basic_print_char
0eba4     00 12 06 F6 | 	mov	arg01, #0
0eba8     04 CB B1 FD | 	call	#__system___getiolock_0599
0ebac     FD 00 68 FC | 	wrlong	#0, result1
0ebb0                 | LR__1269
0ebb0     A7 F0 03 F6 | 	mov	ptra, fp
0ebb4     B2 00 A0 FD | 	call	#popregs_
0ebb8                 | _do_cd_ret
0ebb8     2D 00 64 FD | 	ret
0ebbc                 | 
0ebbc                 | ' 
0ebbc                 | ' '-------------------- changefreq
0ebbc                 | ' 
0ebbc                 | ' sub do_changefreq
0ebbc                 | _do_changefreq
0ebbc     04 4A 05 F6 | 	mov	COUNT_, #4
0ebc0     A8 00 A0 FD | 	call	#pushregs_
0ebc4     28 F0 07 F1 | 	add	ptra, #40
0ebc8     B4 E0 BF FD | 	call	#_pop
0ebcc     FF 14 02 F6 | 	mov	arg02, result3
0ebd0     A7 FA 61 FC | 	wrlong	result1, fp
0ebd4     04 4E 05 F1 | 	add	fp, #4
0ebd8     A7 FC 61 FC | 	wrlong	result2, fp
0ebdc     04 4E 05 F1 | 	add	fp, #4
0ebe0     A7 14 62 FC | 	wrlong	arg02, fp
0ebe4     08 4E 85 F1 | 	sub	fp, #8
0ebe8     A7 12 02 F6 | 	mov	arg01, fp
0ebec     30 E3 BF FD | 	call	#_converttofloat
0ebf0     24 4E 05 F1 | 	add	fp, #36
0ebf4     A7 FA 61 FC | 	wrlong	result1, fp
0ebf8     24 4E 85 F1 | 	sub	fp, #36
0ebfc     FD 14 02 F6 | 	mov	arg02, result1
0ec00     FC 16 20 FF 
0ec04     54 12 06 F6 | 	mov	arg01, ##1076754516
0ec08     C4 AB B1 FD | 	call	#__system____builtin_logbase
0ec0c     FD 26 02 F6 | 	mov	local01, result1
0ec10     1E 14 C6 F9 | 	decod	arg02, #30
0ec14     FC 16 20 FF 
0ec18     54 12 06 F6 | 	mov	arg01, ##1076754516
0ec1c     B0 AB B1 FD | 	call	#__system____builtin_logbase
0ec20     FD 14 02 F6 | 	mov	arg02, result1
0ec24     13 13 02 F6 | 	mov	arg01, local01
0ec28     D8 9D B1 FD | 	call	#__system___float_div
0ec2c     FD 12 02 F6 | 	mov	arg01, result1
0ec30     00 14 06 F6 | 	mov	arg02, #0
0ec34     90 A0 B1 FD | 	call	#__system___float_tointeger
0ec38     10 4E 05 F1 | 	add	fp, #16
0ec3c     A7 FA 61 FC | 	wrlong	result1, fp
0ec40     1E 26 C6 F9 | 	decod	local01, #30
0ec44     FD 12 02 F6 | 	mov	arg01, result1
0ec48     10 4E 85 F1 | 	sub	fp, #16
0ec4c     05 12 06 F1 | 	add	arg01, #5
0ec50     09 13 52 F6 | 	abs	arg01, arg01 wc
0ec54     1F 28 C6 C9 |  if_b	decod	local02, #31
0ec58     00 28 06 36 |  if_ae	mov	local02, #0
0ec5c     9C 97 B1 FD | 	call	#__system___float_fromuns
0ec60     14 FB 61 F5 | 	xor	result1, local02
0ec64     FD 14 02 F6 | 	mov	arg02, result1
0ec68     13 13 02 F6 | 	mov	arg01, local01
0ec6c     98 AA B1 FD | 	call	#__system____builtin_powf
0ec70     FD 12 02 F6 | 	mov	arg01, result1
0ec74     01 14 06 F6 | 	mov	arg02, #1
0ec78     4C A0 B1 FD | 	call	#__system___float_tointeger
0ec7c     14 4E 05 F1 | 	add	fp, #20
0ec80     A7 FA 61 FC | 	wrlong	result1, fp
0ec84                 | ' skip=round(2^(lfreq+5))
0ec84                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0ec84     14 4E 85 F1 | 	sub	fp, #20
0ec88     40 00 00 FF 
0ec8c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ec90     30 00 90 CD |  if_b	jmp	#LR__1270
0ec94     14 4E 05 F1 | 	add	fp, #20
0ec98     A7 26 02 FB | 	rdlong	local01, fp
0ec9c     13 27 52 F6 | 	abs	local01, local01 wc
0eca0     0F 26 46 F0 | 	shr	local01, #15
0eca4     13 27 82 F6 | 	negc	local01, local01
0eca8     04 4E 05 F1 | 	add	fp, #4
0ecac     A7 26 62 FC | 	wrlong	local01, fp
0ecb0     04 4E 85 F1 | 	sub	fp, #4
0ecb4     40 00 80 FF 
0ecb8     A7 00 68 FC | 	wrlong	##32768, fp
0ecbc     14 4E 85 F1 | 	sub	fp, #20
0ecc0     0C 00 90 FD | 	jmp	#LR__1271
0ecc4                 | LR__1270
0ecc4     18 4E 05 F1 | 	add	fp, #24
0ecc8     A7 02 68 FC | 	wrlong	#1, fp
0eccc     18 4E 85 F1 | 	sub	fp, #24
0ecd0                 | LR__1271
0ecd0     24 4E 05 F1 | 	add	fp, #36
0ecd4     A7 14 02 FB | 	rdlong	arg02, fp
0ecd8     24 4E 85 F1 | 	sub	fp, #36
0ecdc     3E 2C 25 FF 
0ece0     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ece4     1C 9D B1 FD | 	call	#__system___float_div
0ece8     FD 26 02 F6 | 	mov	local01, result1
0ecec     18 4E 05 F1 | 	add	fp, #24
0ecf0     A7 12 02 FB | 	rdlong	arg01, fp
0ecf4     18 4E 85 F1 | 	sub	fp, #24
0ecf8     09 13 52 F6 | 	abs	arg01, arg01 wc
0ecfc     1F 28 C6 C9 |  if_b	decod	local02, #31
0ed00     00 28 06 36 |  if_ae	mov	local02, #0
0ed04     F4 96 B1 FD | 	call	#__system___float_fromuns
0ed08     14 FB 61 F5 | 	xor	result1, local02
0ed0c     FD 2A 02 F6 | 	mov	local03, result1
0ed10     1E 2C C6 F9 | 	decod	local04, #30
0ed14     0D 12 06 F6 | 	mov	arg01, #13
0ed18     10 4E 05 F1 | 	add	fp, #16
0ed1c     A7 14 02 FB | 	rdlong	arg02, fp
0ed20     10 4E 85 F1 | 	sub	fp, #16
0ed24     0A 13 82 F1 | 	sub	arg01, arg02
0ed28     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed2c     1F 28 C6 C9 |  if_b	decod	local02, #31
0ed30     00 28 06 36 |  if_ae	mov	local02, #0
0ed34     C4 96 B1 FD | 	call	#__system___float_fromuns
0ed38     14 FB 61 F5 | 	xor	result1, local02
0ed3c     FD 14 02 F6 | 	mov	arg02, result1
0ed40     16 13 02 F6 | 	mov	arg01, local04
0ed44     C0 A9 B1 FD | 	call	#__system____builtin_powf
0ed48     FD 14 02 F6 | 	mov	arg02, result1
0ed4c     15 13 02 F6 | 	mov	arg01, local03
0ed50     AC 9A B1 FD | 	call	#__system___float_mul
0ed54     FD 14 02 F6 | 	mov	arg02, result1
0ed58     13 13 02 F6 | 	mov	arg01, local01
0ed5c     A4 9C B1 FD | 	call	#__system___float_div
0ed60     FD 12 02 F6 | 	mov	arg01, result1
0ed64     01 14 06 F6 | 	mov	arg02, #1
0ed68     5C 9F B1 FD | 	call	#__system___float_tointeger
0ed6c     FD 26 02 F6 | 	mov	local01, result1
0ed70     1C 4E 05 F1 | 	add	fp, #28
0ed74     A7 26 62 FC | 	wrlong	local01, fp
0ed78     1C 4E 85 F1 | 	sub	fp, #28
0ed7c     00 DF BF FD | 	call	#_pop
0ed80     FF 2C 02 F6 | 	mov	local04, result3
0ed84     A7 FA 61 FC | 	wrlong	result1, fp
0ed88     04 4E 05 F1 | 	add	fp, #4
0ed8c     A7 FC 61 FC | 	wrlong	result2, fp
0ed90     04 4E 05 F1 | 	add	fp, #4
0ed94     A7 2C 62 FC | 	wrlong	local04, fp
0ed98     08 4E 85 F1 | 	sub	fp, #8
0ed9c     A7 12 02 F6 | 	mov	arg01, fp
0eda0     C0 E0 BF FD | 	call	#_converttoint
0eda4     FD 2A 52 F6 | 	abs	local03, result1 wc
0eda8     07 2A 06 F5 | 	and	local03, #7
0edac     15 2B 82 F6 | 	negc	local03, local03
0edb0     0C 4E 05 F1 | 	add	fp, #12
0edb4     A7 2A 62 FC | 	wrlong	local03, fp
0edb8     08 4E 05 F1 | 	add	fp, #8
0edbc     A7 26 02 FB | 	rdlong	local01, fp
0edc0     10 26 66 F0 | 	shl	local01, #16
0edc4     08 4E 05 F1 | 	add	fp, #8
0edc8     A7 2C 02 FB | 	rdlong	local04, fp
0edcc     16 27 02 F1 | 	add	local01, local04
0edd0     04 4E 05 F1 | 	add	fp, #4
0edd4     A7 26 62 FC | 	wrlong	local01, fp
0edd8                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0edd8     37 00 00 FF 
0eddc     10 E4 05 F1 | 	add	objptr, ##28176
0ede0     F2 12 02 FB | 	rdlong	arg01, objptr
0ede4     37 00 00 FF 
0ede8     10 E4 85 F1 | 	sub	objptr, ##28176
0edec     14 4E 85 F1 | 	sub	fp, #20
0edf0     A7 2C 02 FB | 	rdlong	local04, fp
0edf4     0C 4E 85 F1 | 	sub	fp, #12
0edf8     06 2C 66 F0 | 	shl	local04, #6
0edfc     16 13 02 F1 | 	add	arg01, local04
0ee00     08 12 06 F1 | 	add	arg01, #8
0ee04     09 FB 01 FB | 	rdlong	result1, arg01
0ee08     1B FA 2D F4 | 	testbn	result1, #27 wz
0ee0c     3C 00 90 5D |  if_ne	jmp	#LR__1272
0ee10     37 00 00 FF 
0ee14     10 E4 05 F1 | 	add	objptr, ##28176
0ee18     F2 12 02 FB | 	rdlong	arg01, objptr
0ee1c     37 00 00 FF 
0ee20     10 E4 85 F1 | 	sub	objptr, ##28176
0ee24     0C 4E 05 F1 | 	add	fp, #12
0ee28     A7 2C 02 FB | 	rdlong	local04, fp
0ee2c     06 2C 66 F0 | 	shl	local04, #6
0ee30     16 13 02 F1 | 	add	arg01, local04
0ee34     18 12 06 F1 | 	add	arg01, #24
0ee38     14 4E 05 F1 | 	add	fp, #20
0ee3c     A7 14 02 FB | 	rdlong	arg02, fp
0ee40     20 4E 85 F1 | 	sub	fp, #32
0ee44     09 15 62 FC | 	wrlong	arg02, arg01
0ee48     80 00 90 FD | 	jmp	#LR__1273
0ee4c                 | LR__1272
0ee4c     37 00 00 FF 
0ee50     10 E4 05 F1 | 	add	objptr, ##28176
0ee54     F2 26 02 FB | 	rdlong	local01, objptr
0ee58     37 00 00 FF 
0ee5c     10 E4 85 F1 | 	sub	objptr, ##28176
0ee60     0C 4E 05 F1 | 	add	fp, #12
0ee64     A7 2C 02 FB | 	rdlong	local04, fp
0ee68     06 2C 66 F0 | 	shl	local04, #6
0ee6c     16 27 02 F1 | 	add	local01, local04
0ee70     18 26 06 F1 | 	add	local01, #24
0ee74     18 4E 05 F1 | 	add	fp, #24
0ee78     A7 14 02 FB | 	rdlong	arg02, fp
0ee7c     24 4E 85 F1 | 	sub	fp, #36
0ee80     3E 2C 25 FF 
0ee84     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ee88     78 9B B1 FD | 	call	#__system___float_div
0ee8c     FD 12 02 F6 | 	mov	arg01, result1
0ee90     01 14 06 F6 | 	mov	arg02, #1
0ee94     30 9E B1 FD | 	call	#__system___float_tointeger
0ee98     13 FB 51 FC | 	wrword	result1, local01
0ee9c     37 00 00 FF 
0eea0     10 E4 05 F1 | 	add	objptr, ##28176
0eea4     F2 12 02 FB | 	rdlong	arg01, objptr
0eea8     37 00 00 FF 
0eeac     10 E4 85 F1 | 	sub	objptr, ##28176
0eeb0     0C 4E 05 F1 | 	add	fp, #12
0eeb4     A7 2C 02 FB | 	rdlong	local04, fp
0eeb8     0C 4E 85 F1 | 	sub	fp, #12
0eebc     06 2C 66 F0 | 	shl	local04, #6
0eec0     16 13 02 F1 | 	add	arg01, local04
0eec4     1A 12 06 F1 | 	add	arg01, #26
0eec8     09 01 5A FC | 	wrword	#256, arg01
0eecc                 | LR__1273
0eecc     A7 F0 03 F6 | 	mov	ptra, fp
0eed0     B2 00 A0 FD | 	call	#popregs_
0eed4                 | _do_changefreq_ret
0eed4     2D 00 64 FD | 	ret
0eed8                 | 
0eed8                 | ' 
0eed8                 | ' '-------------------- changepan
0eed8                 | ' 
0eed8                 | ' sub do_changepan
0eed8                 | _do_changepan
0eed8     01 4A 05 F6 | 	mov	COUNT_, #1
0eedc     A8 00 A0 FD | 	call	#pushregs_
0eee0     14 F0 07 F1 | 	add	ptra, #20
0eee4     98 DD BF FD | 	call	#_pop
0eee8     A7 FA 61 FC | 	wrlong	result1, fp
0eeec     04 4E 05 F1 | 	add	fp, #4
0eef0     A7 FC 61 FC | 	wrlong	result2, fp
0eef4     04 4E 05 F1 | 	add	fp, #4
0eef8     A7 FE 61 FC | 	wrlong	result3, fp
0eefc     08 4E 85 F1 | 	sub	fp, #8
0ef00     00 00 23 FF 
0ef04     00 26 06 F6 | 	mov	local01, ##1174405120
0ef08     A7 12 02 F6 | 	mov	arg01, fp
0ef0c     10 E0 BF FD | 	call	#_converttofloat
0ef10     FD 14 02 F6 | 	mov	arg02, result1
0ef14     13 13 02 F6 | 	mov	arg01, local01
0ef18     E4 98 B1 FD | 	call	#__system___float_mul
0ef1c     FD 12 02 F6 | 	mov	arg01, result1
0ef20     01 14 06 F6 | 	mov	arg02, #1
0ef24     A0 9D B1 FD | 	call	#__system___float_tointeger
0ef28     0D 26 C6 F9 | 	decod	local01, #13
0ef2c     FD 26 02 F1 | 	add	local01, result1
0ef30     10 4E 05 F1 | 	add	fp, #16
0ef34     A7 26 62 FC | 	wrlong	local01, fp
0ef38                 | ' 
0ef38                 | ' t1=pop()
0ef38                 | ' pan=8192+round(8192*converttofloat(t1)) 
0ef38                 | ' if pan<0 then pan=0
0ef38     10 4E 85 F1 | 	sub	fp, #16
0ef3c     00 26 56 F2 | 	cmps	local01, #0 wc
0ef40     10 4E 05 C1 |  if_b	add	fp, #16
0ef44     A7 00 68 CC |  if_b	wrlong	#0, fp
0ef48     10 4E 85 C1 |  if_b	sub	fp, #16
0ef4c                 | ' if pan>16384 then pan=16384
0ef4c     10 4E 05 F1 | 	add	fp, #16
0ef50     A7 26 02 FB | 	rdlong	local01, fp
0ef54     10 4E 85 F1 | 	sub	fp, #16
0ef58     20 00 00 FF 
0ef5c     01 26 56 F2 | 	cmps	local01, ##16385 wc
0ef60     10 4E 05 31 |  if_ae	add	fp, #16
0ef64     20 00 80 3F 
0ef68     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0ef6c     10 4E 85 31 |  if_ae	sub	fp, #16
0ef70     0C DD BF FD | 	call	#_pop
0ef74     FF 26 02 F6 | 	mov	local01, result3
0ef78     A7 FA 61 FC | 	wrlong	result1, fp
0ef7c     04 4E 05 F1 | 	add	fp, #4
0ef80     A7 FC 61 FC | 	wrlong	result2, fp
0ef84     04 4E 05 F1 | 	add	fp, #4
0ef88     A7 26 62 FC | 	wrlong	local01, fp
0ef8c     08 4E 85 F1 | 	sub	fp, #8
0ef90     A7 12 02 F6 | 	mov	arg01, fp
0ef94     CC DE BF FD | 	call	#_converttoint
0ef98     FD 26 52 F6 | 	abs	local01, result1 wc
0ef9c     07 26 06 F5 | 	and	local01, #7
0efa0     13 27 82 F6 | 	negc	local01, local01
0efa4     0C 4E 05 F1 | 	add	fp, #12
0efa8     A7 26 62 FC | 	wrlong	local01, fp
0efac     37 00 00 FF 
0efb0     10 E4 05 F1 | 	add	objptr, ##28176
0efb4     F2 12 02 FB | 	rdlong	arg01, objptr
0efb8     37 00 00 FF 
0efbc     10 E4 85 F1 | 	sub	objptr, ##28176
0efc0     06 26 66 F0 | 	shl	local01, #6
0efc4     13 13 02 F1 | 	add	arg01, local01
0efc8     16 12 06 F1 | 	add	arg01, #22
0efcc     04 4E 05 F1 | 	add	fp, #4
0efd0     A7 14 02 FB | 	rdlong	arg02, fp
0efd4     10 4E 85 F1 | 	sub	fp, #16
0efd8     09 15 52 FC | 	wrword	arg02, arg01
0efdc     A7 F0 03 F6 | 	mov	ptra, fp
0efe0     B2 00 A0 FD | 	call	#popregs_
0efe4                 | _do_changepan_ret
0efe4     2D 00 64 FD | 	ret
0efe8                 | 
0efe8                 | ' 
0efe8                 | ' '-------------------- changevol
0efe8                 | ' 
0efe8                 | ' sub do_changevol
0efe8                 | _do_changevol
0efe8     00 4A 05 F6 | 	mov	COUNT_, #0
0efec     A8 00 A0 FD | 	call	#pushregs_
0eff0     14 F0 07 F1 | 	add	ptra, #20
0eff4     88 DC BF FD | 	call	#_pop
0eff8     FF 14 02 F6 | 	mov	arg02, result3
0effc     A7 FA 61 FC | 	wrlong	result1, fp
0f000     04 4E 05 F1 | 	add	fp, #4
0f004     A7 FC 61 FC | 	wrlong	result2, fp
0f008     04 4E 05 F1 | 	add	fp, #4
0f00c     A7 14 62 FC | 	wrlong	arg02, fp
0f010     08 4E 85 F1 | 	sub	fp, #8
0f014     A7 12 02 F6 | 	mov	arg01, fp
0f018     04 DF BF FD | 	call	#_converttofloat
0f01c     FD 12 02 F6 | 	mov	arg01, result1
0f020     00 3D 22 FF 
0f024     00 14 06 F6 | 	mov	arg02, ##1148846080
0f028     D4 97 B1 FD | 	call	#__system___float_mul
0f02c     FD 12 02 F6 | 	mov	arg01, result1
0f030     01 14 06 F6 | 	mov	arg02, #1
0f034     90 9C B1 FD | 	call	#__system___float_tointeger
0f038     FD 14 52 F6 | 	abs	arg02, result1 wc
0f03c     0D 14 46 F7 | 	zerox	arg02, #13
0f040     0A 15 82 F6 | 	negc	arg02, arg02
0f044     10 4E 05 F1 | 	add	fp, #16
0f048     A7 14 62 FC | 	wrlong	arg02, fp
0f04c     10 4E 85 F1 | 	sub	fp, #16
0f050     2C DC BF FD | 	call	#_pop
0f054     FF 14 02 F6 | 	mov	arg02, result3
0f058     A7 FA 61 FC | 	wrlong	result1, fp
0f05c     04 4E 05 F1 | 	add	fp, #4
0f060     A7 FC 61 FC | 	wrlong	result2, fp
0f064     04 4E 05 F1 | 	add	fp, #4
0f068     A7 14 62 FC | 	wrlong	arg02, fp
0f06c     08 4E 85 F1 | 	sub	fp, #8
0f070     A7 12 02 F6 | 	mov	arg01, fp
0f074     EC DD BF FD | 	call	#_converttoint
0f078     FD 14 52 F6 | 	abs	arg02, result1 wc
0f07c     07 14 06 F5 | 	and	arg02, #7
0f080     0A 15 82 F6 | 	negc	arg02, arg02
0f084     0C 4E 05 F1 | 	add	fp, #12
0f088     A7 14 62 FC | 	wrlong	arg02, fp
0f08c     37 00 00 FF 
0f090     10 E4 05 F1 | 	add	objptr, ##28176
0f094     F2 12 02 FB | 	rdlong	arg01, objptr
0f098     37 00 00 FF 
0f09c     10 E4 85 F1 | 	sub	objptr, ##28176
0f0a0     06 14 66 F0 | 	shl	arg02, #6
0f0a4     0A 13 02 F1 | 	add	arg01, arg02
0f0a8     14 12 06 F1 | 	add	arg01, #20
0f0ac     04 4E 05 F1 | 	add	fp, #4
0f0b0     A7 14 02 FB | 	rdlong	arg02, fp
0f0b4     10 4E 85 F1 | 	sub	fp, #16
0f0b8     09 15 52 FC | 	wrword	arg02, arg01
0f0bc     A7 F0 03 F6 | 	mov	ptra, fp
0f0c0     B2 00 A0 FD | 	call	#popregs_
0f0c4                 | _do_changevol_ret
0f0c4     2D 00 64 FD | 	ret
0f0c8                 | 
0f0c8                 | ' 
0f0c8                 | ' '-------------------- changewav
0f0c8                 | ' 
0f0c8                 | ' sub do_changewav
0f0c8                 | _do_changewav
0f0c8     00 4A 05 F6 | 	mov	COUNT_, #0
0f0cc     A8 00 A0 FD | 	call	#pushregs_
0f0d0     14 F0 07 F1 | 	add	ptra, #20
0f0d4     A8 DB BF FD | 	call	#_pop
0f0d8     FF 14 02 F6 | 	mov	arg02, result3
0f0dc     A7 FA 61 FC | 	wrlong	result1, fp
0f0e0     04 4E 05 F1 | 	add	fp, #4
0f0e4     A7 FC 61 FC | 	wrlong	result2, fp
0f0e8     04 4E 05 F1 | 	add	fp, #4
0f0ec     A7 14 62 FC | 	wrlong	arg02, fp
0f0f0     08 4E 85 F1 | 	sub	fp, #8
0f0f4     A7 12 02 F6 | 	mov	arg01, fp
0f0f8     68 DD BF FD | 	call	#_converttoint
0f0fc     10 4E 05 F1 | 	add	fp, #16
0f100     A7 FA 61 FC | 	wrlong	result1, fp
0f104                 | ' 
0f104                 | ' t1=pop()
0f104                 | ' wave=converttoint(t1)
0f104                 | ' if wave<0 then wave=0
0f104     FD 14 02 F6 | 	mov	arg02, result1
0f108     10 4E 85 F1 | 	sub	fp, #16
0f10c     00 14 56 F2 | 	cmps	arg02, #0 wc
0f110     10 4E 05 C1 |  if_b	add	fp, #16
0f114     A7 00 68 CC |  if_b	wrlong	#0, fp
0f118     10 4E 85 C1 |  if_b	sub	fp, #16
0f11c     60 DB BF FD | 	call	#_pop
0f120     FF 14 02 F6 | 	mov	arg02, result3
0f124     A7 FA 61 FC | 	wrlong	result1, fp
0f128     04 4E 05 F1 | 	add	fp, #4
0f12c     A7 FC 61 FC | 	wrlong	result2, fp
0f130     04 4E 05 F1 | 	add	fp, #4
0f134     A7 14 62 FC | 	wrlong	arg02, fp
0f138     08 4E 85 F1 | 	sub	fp, #8
0f13c     A7 12 02 F6 | 	mov	arg01, fp
0f140     20 DD BF FD | 	call	#_converttoint
0f144     FD 14 52 F6 | 	abs	arg02, result1 wc
0f148     07 14 06 F5 | 	and	arg02, #7
0f14c     0A 15 82 F6 | 	negc	arg02, arg02
0f150     0C 4E 05 F1 | 	add	fp, #12
0f154     A7 14 62 FC | 	wrlong	arg02, fp
0f158                 | ' if wave <32 then 
0f158     04 4E 05 F1 | 	add	fp, #4
0f15c     A7 14 02 FB | 	rdlong	arg02, fp
0f160     10 4E 85 F1 | 	sub	fp, #16
0f164     20 14 56 F2 | 	cmps	arg02, #32 wc
0f168     48 00 90 3D |  if_ae	jmp	#LR__1280
0f16c     37 00 00 FF 
0f170     10 E4 05 F1 | 	add	objptr, ##28176
0f174     F2 12 02 FB | 	rdlong	arg01, objptr
0f178     37 00 00 FF 
0f17c     10 E4 85 F1 | 	sub	objptr, ##28176
0f180     0C 4E 05 F1 | 	add	fp, #12
0f184     A7 14 02 FB | 	rdlong	arg02, fp
0f188     06 14 66 F0 | 	shl	arg02, #6
0f18c     0A 13 02 F1 | 	add	arg01, arg02
0f190     08 12 06 F1 | 	add	arg01, #8
0f194     04 4E 05 F1 | 	add	fp, #4
0f198     A7 14 02 FB | 	rdlong	arg02, fp
0f19c     10 4E 85 F1 | 	sub	fp, #16
0f1a0     0B 14 66 F0 | 	shl	arg02, #11
0f1a4     00 00 40 FF 
0f1a8     00 14 06 F1 | 	add	arg02, ##-2147483648
0f1ac     09 15 62 FC | 	wrlong	arg02, arg01
0f1b0     34 00 90 FD | 	jmp	#LR__1281
0f1b4                 | LR__1280
0f1b4     37 00 00 FF 
0f1b8     10 E4 05 F1 | 	add	objptr, ##28176
0f1bc     F2 12 02 FB | 	rdlong	arg01, objptr
0f1c0     37 00 00 FF 
0f1c4     10 E4 85 F1 | 	sub	objptr, ##28176
0f1c8     0C 4E 05 F1 | 	add	fp, #12
0f1cc     A7 14 02 FB | 	rdlong	arg02, fp
0f1d0     0C 4E 85 F1 | 	sub	fp, #12
0f1d4     06 14 66 F0 | 	shl	arg02, #6
0f1d8     0A 13 02 F1 | 	add	arg01, arg02
0f1dc     08 12 06 F1 | 	add	arg01, #8
0f1e0     00 00 C4 FF 
0f1e4     09 01 68 FC | 	wrlong	##-2013265920, arg01
0f1e8                 | LR__1281
0f1e8     A7 F0 03 F6 | 	mov	ptra, fp
0f1ec     B2 00 A0 FD | 	call	#popregs_
0f1f0                 | _do_changewav_ret
0f1f0     2D 00 64 FD | 	ret
0f1f4                 | 
0f1f4                 | ' 
0f1f4                 | ' '-------------------- chr$
0f1f4                 | ' 
0f1f4                 | ' sub do_chr
0f1f4                 | _do_chr
0f1f4     01 4A 05 F6 | 	mov	COUNT_, #1
0f1f8     A8 00 A0 FD | 	call	#pushregs_
0f1fc     14 F0 07 F1 | 	add	ptra, #20
0f200     4A 00 00 FF 
0f204     80 E4 05 F1 | 	add	objptr, ##38016
0f208     F2 26 02 FB | 	rdlong	local01, objptr
0f20c     13 17 02 F6 | 	mov	arg03, local01
0f210     01 16 66 F0 | 	shl	arg03, #1
0f214     13 17 02 F1 | 	add	arg03, local01
0f218     02 16 66 F0 | 	shl	arg03, #2
0f21c     03 00 00 FF 
0f220     04 E4 85 F1 | 	sub	objptr, ##1540
0f224     F2 16 02 F1 | 	add	arg03, objptr
0f228     0B 17 02 FB | 	rdlong	arg03, arg03
0f22c     0C 4E 05 F1 | 	add	fp, #12
0f230     A7 16 62 FC | 	wrlong	arg03, fp
0f234                 | ' 
0f234                 | ' numpar=compiledline(lineptr_e).result.uresult
0f234                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f234     0C 4E 85 F1 | 	sub	fp, #12
0f238     02 16 16 F2 | 	cmp	arg03, #2 wc
0f23c     47 00 00 FF 
0f240     7C E4 85 F1 | 	sub	objptr, ##36476
0f244     0C 4E 05 C1 |  if_b	add	fp, #12
0f248     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f24c     0C 4E 85 C1 |  if_b	sub	fp, #12
0f250     40 00 90 4D |  if_c_and_nz	jmp	#LR__1290
0f254     00 12 06 F6 | 	mov	arg01, #0
0f258     54 C4 B1 FD | 	call	#__system___getiolock_0599
0f25c     FD 12 02 F6 | 	mov	arg01, result1
0f260     24 67 B1 FD | 	call	#__system___lockmem
0f264     AE 01 00 FF 
0f268     A1 14 06 F6 | 	mov	arg02, ##@LR__5840
0f26c     00 12 06 F6 | 	mov	arg01, #0
0f270     00 16 06 F6 | 	mov	arg03, #0
0f274     04 74 B1 FD | 	call	#__system___basic_print_string
0f278     00 12 06 F6 | 	mov	arg01, #0
0f27c     30 C4 B1 FD | 	call	#__system___getiolock_0599
0f280     FD 00 68 FC | 	wrlong	#0, result1
0f284     27 12 06 F6 | 	mov	arg01, #39
0f288     00 14 06 F6 | 	mov	arg02, #0
0f28c     0C 2D B1 FD | 	call	#_printerror
0f290     54 00 90 FD | 	jmp	#LR__1291
0f294                 | LR__1290
0f294     E8 D9 BF FD | 	call	#_pop
0f298     FF 26 02 F6 | 	mov	local01, result3
0f29c     A7 FA 61 FC | 	wrlong	result1, fp
0f2a0     04 4E 05 F1 | 	add	fp, #4
0f2a4     A7 FC 61 FC | 	wrlong	result2, fp
0f2a8     04 4E 05 F1 | 	add	fp, #4
0f2ac     A7 26 62 FC | 	wrlong	local01, fp
0f2b0     08 4E 85 F1 | 	sub	fp, #8
0f2b4     A7 12 02 F6 | 	mov	arg01, fp
0f2b8     A8 DB BF FD | 	call	#_converttoint
0f2bc     10 4E 05 F1 | 	add	fp, #16
0f2c0     A7 FA 61 FC | 	wrlong	result1, fp
0f2c4     FD 12 02 F6 | 	mov	arg01, result1
0f2c8     10 4E 85 F1 | 	sub	fp, #16
0f2cc     F8 88 B1 FD | 	call	#__system__Chr_S
0f2d0     A7 FA 61 FC | 	wrlong	result1, fp
0f2d4     08 4E 05 F1 | 	add	fp, #8
0f2d8     A7 3E 68 FC | 	wrlong	#31, fp
0f2dc     08 4E 85 F1 | 	sub	fp, #8
0f2e0     A7 12 02 F6 | 	mov	arg01, fp
0f2e4     30 DA BF FD | 	call	#_push
0f2e8                 | LR__1291
0f2e8     A7 F0 03 F6 | 	mov	ptra, fp
0f2ec     B2 00 A0 FD | 	call	#popregs_
0f2f0                 | _do_chr_ret
0f2f0     2D 00 64 FD | 	ret
0f2f4                 | 
0f2f4                 | ' 
0f2f4                 | ' '-------------------- circle
0f2f4                 | ' 
0f2f4                 | ' sub do_circle
0f2f4                 | _do_circle
0f2f4     02 4A 05 F6 | 	mov	COUNT_, #2
0f2f8     A8 00 A0 FD | 	call	#pushregs_
0f2fc     24 F0 07 F1 | 	add	ptra, #36
0f300     7C D9 BF FD | 	call	#_pop
0f304     FD 18 02 F6 | 	mov	arg04, result1
0f308     FE 16 02 F6 | 	mov	arg03, result2
0f30c     FF 14 02 F6 | 	mov	arg02, result3
0f310     18 4E 05 F1 | 	add	fp, #24
0f314     A7 18 62 FC | 	wrlong	arg04, fp
0f318     04 4E 05 F1 | 	add	fp, #4
0f31c     A7 16 62 FC | 	wrlong	arg03, fp
0f320     04 4E 05 F1 | 	add	fp, #4
0f324     A7 14 62 FC | 	wrlong	arg02, fp
0f328     20 4E 85 F1 | 	sub	fp, #32
0f32c     50 D9 BF FD | 	call	#_pop
0f330     FD 18 02 F6 | 	mov	arg04, result1
0f334     FE 16 02 F6 | 	mov	arg03, result2
0f338     FF 26 02 F6 | 	mov	local01, result3
0f33c     0C 4E 05 F1 | 	add	fp, #12
0f340     A7 18 62 FC | 	wrlong	arg04, fp
0f344     04 4E 05 F1 | 	add	fp, #4
0f348     A7 16 62 FC | 	wrlong	arg03, fp
0f34c     04 4E 05 F1 | 	add	fp, #4
0f350     A7 26 62 FC | 	wrlong	local01, fp
0f354     14 4E 85 F1 | 	sub	fp, #20
0f358     24 D9 BF FD | 	call	#_pop
0f35c     A7 FA 61 FC | 	wrlong	result1, fp
0f360     04 4E 05 F1 | 	add	fp, #4
0f364     A7 FC 61 FC | 	wrlong	result2, fp
0f368     04 4E 05 F1 | 	add	fp, #4
0f36c     A7 FE 61 FC | 	wrlong	result3, fp
0f370                 | ' 
0f370                 | ' t3=pop()
0f370                 | ' t2=pop()
0f370                 | ' t1=pop()
0f370                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f370     FF 18 02 F6 | 	mov	arg04, result3
0f374     08 4E 85 F1 | 	sub	fp, #8
0f378     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f37c     08 4E 05 51 |  if_ne	add	fp, #8
0f380     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f384     08 4E 85 51 |  if_ne	sub	fp, #8
0f388     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f38c     7C 00 90 5D |  if_ne	jmp	#LR__1300
0f390     14 4E 05 F1 | 	add	fp, #20
0f394     A7 26 02 FB | 	rdlong	local01, fp
0f398     14 4E 85 F1 | 	sub	fp, #20
0f39c     1C 26 0E F2 | 	cmp	local01, #28 wz
0f3a0     14 4E 05 51 |  if_ne	add	fp, #20
0f3a4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f3a8     14 4E 85 51 |  if_ne	sub	fp, #20
0f3ac     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f3b0     58 00 90 5D |  if_ne	jmp	#LR__1300
0f3b4     20 4E 05 F1 | 	add	fp, #32
0f3b8     A7 26 02 FB | 	rdlong	local01, fp
0f3bc     20 4E 85 F1 | 	sub	fp, #32
0f3c0     1C 26 0E F2 | 	cmp	local01, #28 wz
0f3c4     20 4E 05 51 |  if_ne	add	fp, #32
0f3c8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f3cc     20 4E 85 51 |  if_ne	sub	fp, #32
0f3d0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f3d4     34 00 90 5D |  if_ne	jmp	#LR__1300
0f3d8     A7 12 02 FB | 	rdlong	arg01, fp
0f3dc     0C 4E 05 F1 | 	add	fp, #12
0f3e0     A7 14 02 FB | 	rdlong	arg02, fp
0f3e4     0C 4E 05 F1 | 	add	fp, #12
0f3e8     A7 16 02 FB | 	rdlong	arg03, fp
0f3ec     18 4E 85 F1 | 	sub	fp, #24
0f3f0     37 00 00 FF 
0f3f4     28 E4 05 F1 | 	add	objptr, ##28200
0f3f8     F2 18 02 FB | 	rdlong	arg04, objptr
0f3fc     37 00 00 FF 
0f400     28 E4 85 F1 | 	sub	objptr, ##28200
0f404     68 44 B1 FD | 	call	#_hg010b_spin2_circle
0f408                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f408     54 00 90 FD | 	jmp	#LR__1301
0f40c                 | LR__1300
0f40c     A7 12 02 F6 | 	mov	arg01, fp
0f410     50 DA BF FD | 	call	#_converttoint
0f414     FD 26 02 F6 | 	mov	local01, result1
0f418     0C 4E 05 F1 | 	add	fp, #12
0f41c     A7 12 02 F6 | 	mov	arg01, fp
0f420     0C 4E 85 F1 | 	sub	fp, #12
0f424     3C DA BF FD | 	call	#_converttoint
0f428     FD 28 02 F6 | 	mov	local02, result1
0f42c     18 4E 05 F1 | 	add	fp, #24
0f430     A7 12 02 F6 | 	mov	arg01, fp
0f434     18 4E 85 F1 | 	sub	fp, #24
0f438     28 DA BF FD | 	call	#_converttoint
0f43c     FD 16 02 F6 | 	mov	arg03, result1
0f440     37 00 00 FF 
0f444     28 E4 05 F1 | 	add	objptr, ##28200
0f448     F2 18 02 FB | 	rdlong	arg04, objptr
0f44c     37 00 00 FF 
0f450     28 E4 85 F1 | 	sub	objptr, ##28200
0f454     13 13 02 F6 | 	mov	arg01, local01
0f458     14 15 02 F6 | 	mov	arg02, local02
0f45c     10 44 B1 FD | 	call	#_hg010b_spin2_circle
0f460                 | LR__1301
0f460     A7 F0 03 F6 | 	mov	ptra, fp
0f464     B2 00 A0 FD | 	call	#popregs_
0f468                 | _do_circle_ret
0f468     2D 00 64 FD | 	ret
0f46c                 | 
0f46c                 | ' 
0f46c                 | ' '-------------------- click
0f46c                 | ' 
0f46c                 | ' sub do_click
0f46c                 | _do_click
0f46c     10 D8 BF FD | 	call	#_pop
0f470     00 FA 4D F2 | 	cmps	result1, #0 wz
0f474                 | ' 
0f474                 | ' t1=pop()
0f474                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f474     50 00 00 AF 
0f478     3C E5 05 A1 |  if_e	add	objptr, ##41276
0f47c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f480     50 00 00 FF 
0f484     3C E5 C5 F3 | 	sumz	objptr, ##41276
0f488     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f48c     50 00 00 5F 
0f490     3C E5 85 51 |  if_ne	sub	objptr, ##41276
0f494                 | _do_click_ret
0f494     2D 00 64 FD | 	ret
0f498                 | 
0f498                 | ' 
0f498                 | ' '-------------------- close
0f498                 | ' 
0f498                 | ' sub do_close
0f498                 | _do_close
0f498     03 4A 05 F6 | 	mov	COUNT_, #3
0f49c     A8 00 A0 FD | 	call	#pushregs_
0f4a0     DC D7 BF FD | 	call	#_pop
0f4a4     FD 26 02 F6 | 	mov	local01, result1
0f4a8     FF 16 02 F6 | 	mov	arg03, result3
0f4ac     FE 28 02 F6 | 	mov	local02, result2
0f4b0     0B 2B 02 F6 | 	mov	local03, arg03
0f4b4                 | ' 
0f4b4                 | ' numpar=compiledline(lineptr_e).result.uresult
0f4b4                 | ' t1=pop()
0f4b4                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f4b4     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f4b8     44 00 90 AD |  if_e	jmp	#LR__1310
0f4bc     00 12 06 F6 | 	mov	arg01, #0
0f4c0     EC C1 B1 FD | 	call	#__system___getiolock_0599
0f4c4     FD 12 02 F6 | 	mov	arg01, result1
0f4c8     BC 64 B1 FD | 	call	#__system___lockmem
0f4cc     AE 01 00 FF 
0f4d0     A8 14 06 F6 | 	mov	arg02, ##@LR__5841
0f4d4     00 12 06 F6 | 	mov	arg01, #0
0f4d8     00 16 06 F6 | 	mov	arg03, #0
0f4dc     9C 71 B1 FD | 	call	#__system___basic_print_string
0f4e0     00 12 06 F6 | 	mov	arg01, #0
0f4e4     0A 14 06 F6 | 	mov	arg02, #10
0f4e8     00 16 06 F6 | 	mov	arg03, #0
0f4ec     34 71 B1 FD | 	call	#__system___basic_print_char
0f4f0     00 12 06 F6 | 	mov	arg01, #0
0f4f4     B8 C1 B1 FD | 	call	#__system___getiolock_0599
0f4f8     FD 00 68 FC | 	wrlong	#0, result1
0f4fc     08 00 90 FD | 	jmp	#LR__1311
0f500                 | LR__1310
0f500                 | ' channel  = t1.result.iresult
0f500                 | ' close #channel
0f500     13 13 02 F6 | 	mov	arg01, local01
0f504     D8 B7 B1 FD | 	call	#__system__close
0f508                 | LR__1311
0f508     A7 F0 03 F6 | 	mov	ptra, fp
0f50c     B2 00 A0 FD | 	call	#popregs_
0f510                 | _do_close_ret
0f510     2D 00 64 FD | 	ret
0f514                 | 
0f514                 | ' 
0f514                 | ' '-------------------- cls
0f514                 | ' 
0f514                 | ' sub do_cls
0f514                 | _do_cls
0f514     37 00 00 FF 
0f518     3C E4 05 F1 | 	add	objptr, ##28220
0f51c     F2 12 02 FB | 	rdlong	arg01, objptr
0f520     04 E4 85 F1 | 	sub	objptr, #4
0f524     F2 14 02 FB | 	rdlong	arg02, objptr
0f528     37 00 00 FF 
0f52c     38 E4 85 F1 | 	sub	objptr, ##28216
0f530     D0 47 B1 FD | 	call	#_hg010b_spin2_cls
0f534     37 00 00 FF 
0f538     3C E4 05 F1 | 	add	objptr, ##28220
0f53c     F2 14 02 FB | 	rdlong	arg02, objptr
0f540     14 E4 85 F1 | 	sub	objptr, #20
0f544     F2 14 62 FC | 	wrlong	arg02, objptr
0f548     37 00 00 FF 
0f54c     28 E4 85 F1 | 	sub	objptr, ##28200
0f550                 | _do_cls_ret
0f550     2D 00 64 FD | 	ret
0f554                 | 
0f554                 | ' 
0f554                 | ' '-------------------- color
0f554                 | ' 
0f554                 | ' sub do_color
0f554                 | _do_color
0f554     03 4A 05 F6 | 	mov	COUNT_, #3
0f558     A8 00 A0 FD | 	call	#pushregs_
0f55c     20 D7 BF FD | 	call	#_pop
0f560     FD 26 02 F6 | 	mov	local01, result1
0f564     FE 28 02 F6 | 	mov	local02, result2
0f568     FF 2A 02 F6 | 	mov	local03, result3
0f56c     37 00 00 FF 
0f570     28 E4 05 F1 | 	add	objptr, ##28200
0f574     F2 26 62 FC | 	wrlong	local01, objptr
0f578     37 00 00 FF 
0f57c     28 E4 85 F1 | 	sub	objptr, ##28200
0f580     A7 F0 03 F6 | 	mov	ptra, fp
0f584     B2 00 A0 FD | 	call	#popregs_
0f588                 | _do_color_ret
0f588     2D 00 64 FD | 	ret
0f58c                 | 
0f58c                 | ' 
0f58c                 | ' '-------------------- cos
0f58c                 | ' 
0f58c                 | ' sub do_cos
0f58c                 | _do_cos
0f58c     01 4A 05 F6 | 	mov	COUNT_, #1
0f590     A8 00 A0 FD | 	call	#pushregs_
0f594     10 F0 07 F1 | 	add	ptra, #16
0f598     4A 00 00 FF 
0f59c     80 E4 05 F1 | 	add	objptr, ##38016
0f5a0     F2 26 02 FB | 	rdlong	local01, objptr
0f5a4     13 17 02 F6 | 	mov	arg03, local01
0f5a8     01 16 66 F0 | 	shl	arg03, #1
0f5ac     13 17 02 F1 | 	add	arg03, local01
0f5b0     02 16 66 F0 | 	shl	arg03, #2
0f5b4     03 00 00 FF 
0f5b8     04 E4 85 F1 | 	sub	objptr, ##1540
0f5bc     F2 16 02 F1 | 	add	arg03, objptr
0f5c0     0B 17 02 FB | 	rdlong	arg03, arg03
0f5c4     0C 4E 05 F1 | 	add	fp, #12
0f5c8     A7 16 62 FC | 	wrlong	arg03, fp
0f5cc                 | ' 
0f5cc                 | ' numpar=compiledline(lineptr_e).result.uresult
0f5cc                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0f5cc     0C 4E 85 F1 | 	sub	fp, #12
0f5d0     02 16 16 F2 | 	cmp	arg03, #2 wc
0f5d4     47 00 00 FF 
0f5d8     7C E4 85 F1 | 	sub	objptr, ##36476
0f5dc     0C 4E 05 C1 |  if_b	add	fp, #12
0f5e0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f5e4     0C 4E 85 C1 |  if_b	sub	fp, #12
0f5e8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1320
0f5ec     00 12 06 F6 | 	mov	arg01, #0
0f5f0     BC C0 B1 FD | 	call	#__system___getiolock_0599
0f5f4     FD 12 02 F6 | 	mov	arg01, result1
0f5f8     8C 63 B1 FD | 	call	#__system___lockmem
0f5fc     AE 01 00 FF 
0f600     BA 14 06 F6 | 	mov	arg02, ##@LR__5842
0f604     00 12 06 F6 | 	mov	arg01, #0
0f608     00 16 06 F6 | 	mov	arg03, #0
0f60c     6C 70 B1 FD | 	call	#__system___basic_print_string
0f610     00 12 06 F6 | 	mov	arg01, #0
0f614     98 C0 B1 FD | 	call	#__system___getiolock_0599
0f618     FD 00 68 FC | 	wrlong	#0, result1
0f61c     27 12 06 F6 | 	mov	arg01, #39
0f620     00 14 06 F6 | 	mov	arg02, #0
0f624     74 29 B1 FD | 	call	#_printerror
0f628     78 00 90 FD | 	jmp	#LR__1321
0f62c                 | LR__1320
0f62c     50 D6 BF FD | 	call	#_pop
0f630     A7 FA 61 FC | 	wrlong	result1, fp
0f634     04 4E 05 F1 | 	add	fp, #4
0f638     A7 FC 61 FC | 	wrlong	result2, fp
0f63c     04 4E 05 F1 | 	add	fp, #4
0f640     A7 FE 61 FC | 	wrlong	result3, fp
0f644     08 4E 85 F1 | 	sub	fp, #8
0f648     52 00 00 FF 
0f64c     54 E4 05 F1 | 	add	objptr, ##42068
0f650     F2 26 02 FB | 	rdlong	local01, objptr
0f654     52 00 00 FF 
0f658     54 E4 85 F1 | 	sub	objptr, ##42068
0f65c     A7 12 02 F6 | 	mov	arg01, fp
0f660     BC D8 BF FD | 	call	#_converttofloat
0f664     FD 14 02 F6 | 	mov	arg02, result1
0f668     13 13 02 F6 | 	mov	arg01, local01
0f66c     90 91 B1 FD | 	call	#__system___float_mul
0f670     FD 14 02 F6 | 	mov	arg02, result1
0f674     87 E4 1F FF 
0f678     DB 13 06 F6 | 	mov	arg01, ##1070141403
0f67c     1F 14 E6 F4 | 	bitnot	arg02, #31
0f680     AC 8D B1 FD | 	call	#__system___float_add
0f684     FD 12 02 F6 | 	mov	arg01, result1
0f688     D4 9A B1 FD | 	call	#__system____builtin_sinf
0f68c     A7 FA 61 FC | 	wrlong	result1, fp
0f690     08 4E 05 F1 | 	add	fp, #8
0f694     A7 3C 68 FC | 	wrlong	#30, fp
0f698     08 4E 85 F1 | 	sub	fp, #8
0f69c     A7 12 02 F6 | 	mov	arg01, fp
0f6a0     74 D6 BF FD | 	call	#_push
0f6a4                 | LR__1321
0f6a4     A7 F0 03 F6 | 	mov	ptra, fp
0f6a8     B2 00 A0 FD | 	call	#popregs_
0f6ac                 | _do_cos_ret
0f6ac     2D 00 64 FD | 	ret
0f6b0                 | 
0f6b0                 | ' 
0f6b0                 | ' '-------------------- cursor
0f6b0                 | ' 
0f6b0                 | ' sub do_cursor
0f6b0                 | _do_cursor
0f6b0     CC D5 BF FD | 	call	#_pop
0f6b4     00 FA 4D F2 | 	cmps	result1, #0 wz
0f6b8                 | ' t1=pop()
0f6b8                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0f6b8     14 00 90 5D |  if_ne	jmp	#LR__1330
0f6bc     11 12 06 F6 | 	mov	arg01, #17
0f6c0     00 14 06 F6 | 	mov	arg02, #0
0f6c4     00 16 06 F6 | 	mov	arg03, #0
0f6c8     18 39 B1 FD | 	call	#_hg010b_spin2_setspritesize
0f6cc     10 00 90 FD | 	jmp	#LR__1331
0f6d0                 | LR__1330
0f6d0     11 12 06 F6 | 	mov	arg01, #17
0f6d4     08 14 06 F6 | 	mov	arg02, #8
0f6d8     10 16 06 F6 | 	mov	arg03, #16
0f6dc     04 39 B1 FD | 	call	#_hg010b_spin2_setspritesize
0f6e0                 | LR__1331
0f6e0                 | _do_cursor_ret
0f6e0     2D 00 64 FD | 	ret
0f6e4                 | 
0f6e4                 | ' 
0f6e4                 | ' '-------------------- defenv
0f6e4                 | ' 
0f6e4                 | ' sub do_defenv
0f6e4                 | _do_defenv
0f6e4     08 4A 05 F6 | 	mov	COUNT_, #8
0f6e8     A8 00 A0 FD | 	call	#pushregs_
0f6ec     58 F0 07 F1 | 	add	ptra, #88
0f6f0     4A 00 00 FF 
0f6f4     80 E4 05 F1 | 	add	objptr, ##38016
0f6f8     F2 26 02 FB | 	rdlong	local01, objptr
0f6fc     13 1B 02 F6 | 	mov	arg05, local01
0f700     01 1A 66 F0 | 	shl	arg05, #1
0f704     13 1B 02 F1 | 	add	arg05, local01
0f708     02 1A 66 F0 | 	shl	arg05, #2
0f70c     03 00 00 FF 
0f710     04 E4 85 F1 | 	sub	objptr, ##1540
0f714     F2 1A 02 F1 | 	add	arg05, objptr
0f718     0D 1B 02 FB | 	rdlong	arg05, arg05
0f71c     10 4E 05 F1 | 	add	fp, #16
0f720     A7 1A 62 FC | 	wrlong	arg05, fp
0f724                 | ' 
0f724                 | ' numpar=compiledline(lineptr_e).result.uresult
0f724                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0f724     10 4E 85 F1 | 	sub	fp, #16
0f728     02 1A 0E F2 | 	cmp	arg05, #2 wz
0f72c     47 00 00 FF 
0f730     7C E4 85 F1 | 	sub	objptr, ##36476
0f734     10 4E 05 51 |  if_ne	add	fp, #16
0f738     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f73c     10 4E 85 51 |  if_ne	sub	fp, #16
0f740     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0f744     8C 0A 90 5D |  if_ne	jmp	#LR__1361
0f748                 | ' 
0f748                 | ' if numpar=2 then						' env from .h2 or from a pointer
0f748     10 4E 05 F1 | 	add	fp, #16
0f74c     A7 26 02 FB | 	rdlong	local01, fp
0f750     10 4E 85 F1 | 	sub	fp, #16
0f754     02 26 0E F2 | 	cmp	local01, #2 wz
0f758     24 04 90 5D |  if_ne	jmp	#LR__1353
0f75c     20 D5 BF FD | 	call	#_pop
0f760     FF 1A 02 F6 | 	mov	arg05, result3
0f764     40 4E 05 F1 | 	add	fp, #64
0f768     A7 FA 61 FC | 	wrlong	result1, fp
0f76c     04 4E 05 F1 | 	add	fp, #4
0f770     A7 FC 61 FC | 	wrlong	result2, fp
0f774     04 4E 05 F1 | 	add	fp, #4
0f778     A7 1A 62 FC | 	wrlong	arg05, fp
0f77c                 | '   t1=pop()
0f77c                 | '   if t1.result_type=result_string2 then 
0f77c     48 4E 85 F1 | 	sub	fp, #72
0f780     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0f784     20 00 90 5D |  if_ne	jmp	#LR__1340
0f788     40 4E 05 F1 | 	add	fp, #64
0f78c     A7 12 02 FB | 	rdlong	arg01, fp
0f790     40 4E 85 F1 | 	sub	fp, #64
0f794     60 D6 BF FD | 	call	#_convertstring
0f798     4C 4E 05 F1 | 	add	fp, #76
0f79c     A7 FA 61 FC | 	wrlong	result1, fp
0f7a0     4C 4E 85 F1 | 	sub	fp, #76
0f7a4     58 00 90 FD | 	jmp	#LR__1343
0f7a8                 | LR__1340
0f7a8     48 4E 05 F1 | 	add	fp, #72
0f7ac     A7 26 02 FB | 	rdlong	local01, fp
0f7b0     48 4E 85 F1 | 	sub	fp, #72
0f7b4     1F 26 0E F2 | 	cmp	local01, #31 wz
0f7b8     18 00 90 5D |  if_ne	jmp	#LR__1341
0f7bc     40 4E 05 F1 | 	add	fp, #64
0f7c0     A7 26 02 FB | 	rdlong	local01, fp
0f7c4     0C 4E 05 F1 | 	add	fp, #12
0f7c8     A7 26 62 FC | 	wrlong	local01, fp
0f7cc     4C 4E 85 F1 | 	sub	fp, #76
0f7d0     2C 00 90 FD | 	jmp	#LR__1342
0f7d4                 | LR__1341
0f7d4     AE 01 00 FF 
0f7d8     C0 26 06 F6 | 	mov	local01, ##@LR__5843
0f7dc     4C 4E 05 F1 | 	add	fp, #76
0f7e0     A7 26 62 FC | 	wrlong	local01, fp
0f7e4     0C 4E 85 F1 | 	sub	fp, #12
0f7e8     A7 12 02 F6 | 	mov	arg01, fp
0f7ec     40 4E 85 F1 | 	sub	fp, #64
0f7f0     70 D6 BF FD | 	call	#_converttoint
0f7f4     1C 4E 05 F1 | 	add	fp, #28
0f7f8     A7 FA 61 FC | 	wrlong	result1, fp
0f7fc     1C 4E 85 F1 | 	sub	fp, #28
0f800                 | LR__1342
0f800                 | LR__1343
0f800                 | '   if s1<>"" then 
0f800     4C 4E 05 F1 | 	add	fp, #76
0f804     A7 12 02 FB | 	rdlong	arg01, fp
0f808     4C 4E 85 F1 | 	sub	fp, #76
0f80c     AE 01 00 FF 
0f810     C1 14 06 F6 | 	mov	arg02, ##@LR__5844
0f814     98 61 B1 FD | 	call	#__system___string_cmp
0f818     00 FA 0D F2 | 	cmp	result1, #0 wz
0f81c     24 02 90 AD |  if_e	jmp	#LR__1347
0f820     5C D4 BF FD | 	call	#_pop
0f824     FF 26 02 F6 | 	mov	local01, result3
0f828     40 4E 05 F1 | 	add	fp, #64
0f82c     A7 FA 61 FC | 	wrlong	result1, fp
0f830     04 4E 05 F1 | 	add	fp, #4
0f834     A7 FC 61 FC | 	wrlong	result2, fp
0f838     04 4E 05 F1 | 	add	fp, #4
0f83c     A7 26 62 FC | 	wrlong	local01, fp
0f840     08 4E 85 F1 | 	sub	fp, #8
0f844     A7 12 02 F6 | 	mov	arg01, fp
0f848     40 4E 85 F1 | 	sub	fp, #64
0f84c     14 D6 BF FD | 	call	#_converttoint
0f850     18 4E 05 F1 | 	add	fp, #24
0f854     A7 FA 61 FC | 	wrlong	result1, fp
0f858     18 4E 85 F1 | 	sub	fp, #24
0f85c                 | '     t1=pop()
0f85c                 | '     channel=converttoint(t1) 
0f85c                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0f85c     09 12 06 F6 | 	mov	arg01, #9
0f860     7C B4 B1 FD | 	call	#__system__close
0f864     09 26 06 F6 | 	mov	local01, #9
0f868     AE 01 00 FF 
0f86c     C2 12 06 F6 | 	mov	arg01, ##@LR__5845
0f870     4C 4E 05 F1 | 	add	fp, #76
0f874     A7 14 02 FB | 	rdlong	arg02, fp
0f878     4C 4E 85 F1 | 	sub	fp, #76
0f87c     64 61 B1 FD | 	call	#__system___string_concat
0f880     FD 14 02 F6 | 	mov	arg02, result1
0f884     13 13 02 F6 | 	mov	arg01, local01
0f888     00 16 06 F6 | 	mov	arg03, #0
0f88c     FC 6C B1 FD | 	call	#__system___basic_open_string
0f890     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f894     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f898     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f89c     0C 4E 05 F1 | 	add	fp, #12
0f8a0     A7 FA 61 FC | 	wrlong	result1, fp
0f8a4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0f8a4     0C 4E 85 F1 | 	sub	fp, #12
0f8a8     A0 00 90 AD |  if_e	jmp	#LR__1344
0f8ac     00 12 06 F6 | 	mov	arg01, #0
0f8b0     FC BD B1 FD | 	call	#__system___getiolock_0599
0f8b4     FD 12 02 F6 | 	mov	arg01, result1
0f8b8     CC 60 B1 FD | 	call	#__system___lockmem
0f8bc     AE 01 00 FF 
0f8c0     CF 14 06 F6 | 	mov	arg02, ##@LR__5846
0f8c4     00 12 06 F6 | 	mov	arg01, #0
0f8c8     00 16 06 F6 | 	mov	arg03, #0
0f8cc     AC 6D B1 FD | 	call	#__system___basic_print_string
0f8d0     0C 4E 05 F1 | 	add	fp, #12
0f8d4     A7 14 02 FB | 	rdlong	arg02, fp
0f8d8     0C 4E 85 F1 | 	sub	fp, #12
0f8dc     00 12 06 F6 | 	mov	arg01, #0
0f8e0     00 16 06 F6 | 	mov	arg03, #0
0f8e4     0A 18 06 F6 | 	mov	arg04, #10
0f8e8     D4 6D B1 FD | 	call	#__system___basic_print_integer
0f8ec     AE 01 00 FF 
0f8f0     DD 14 06 F6 | 	mov	arg02, ##@LR__5847
0f8f4     00 12 06 F6 | 	mov	arg01, #0
0f8f8     00 16 06 F6 | 	mov	arg03, #0
0f8fc     7C 6D B1 FD | 	call	#__system___basic_print_string
0f900     00 26 06 F6 | 	mov	local01, #0
0f904     0C 4E 05 F1 | 	add	fp, #12
0f908     A7 12 02 FB | 	rdlong	arg01, fp
0f90c     0C 4E 85 F1 | 	sub	fp, #12
0f910     00 8A B1 FD | 	call	#__system___strerror
0f914     FD 14 02 F6 | 	mov	arg02, result1
0f918     13 13 02 F6 | 	mov	arg01, local01
0f91c     00 16 06 F6 | 	mov	arg03, #0
0f920     58 6D B1 FD | 	call	#__system___basic_print_string
0f924     00 12 06 F6 | 	mov	arg01, #0
0f928     0A 14 06 F6 | 	mov	arg02, #10
0f92c     00 16 06 F6 | 	mov	arg03, #0
0f930     F0 6C B1 FD | 	call	#__system___basic_print_char
0f934     00 12 06 F6 | 	mov	arg01, #0
0f938     74 BD B1 FD | 	call	#__system___getiolock_0599
0f93c     FD 00 68 FC | 	wrlong	#0, result1
0f940     09 12 06 F6 | 	mov	arg01, #9
0f944     98 B3 B1 FD | 	call	#__system__close
0f948     88 08 90 FD | 	jmp	#LR__1361
0f94c                 | LR__1344
0f94c                 | '     get #9,17,envbuf8(channel,0),256
0f94c     18 4E 05 F1 | 	add	fp, #24
0f950     A7 1A 02 FB | 	rdlong	arg05, fp
0f954     18 4E 85 F1 | 	sub	fp, #24
0f958     0D 17 02 F6 | 	mov	arg03, arg05
0f95c     09 16 66 F0 | 	shl	arg03, #9
0f960     0D 17 02 F1 | 	add	arg03, arg05
0f964     0C 00 00 FF 
0f968     D8 E4 05 F1 | 	add	objptr, ##6360
0f96c     F2 16 02 F1 | 	add	arg03, objptr
0f970     09 12 06 F6 | 	mov	arg01, #9
0f974     11 14 06 F6 | 	mov	arg02, #17
0f978     00 19 06 F6 | 	mov	arg04, #256
0f97c     01 1A 06 F6 | 	mov	arg05, #1
0f980     0C 00 00 FF 
0f984     D8 E4 85 F1 | 	sub	objptr, ##6360
0f988     6C 6E B1 FD | 	call	#__system___basic_get
0f98c                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0f98c     14 4E 05 F1 | 	add	fp, #20
0f990     A7 FE 69 FC | 	wrlong	#255, fp
0f994     14 4E 85 F1 | 	sub	fp, #20
0f998     0C 00 00 FF 
0f99c     D8 E4 05 F1 | 	add	objptr, ##6360
0f9a0     97 30 48 FB | 	callpa	#(@LR__1346-@LR__1345)>>2,fcache_load_ptr_
0f9a4                 | LR__1345
0f9a4     18 4E 05 F1 | 	add	fp, #24
0f9a8     A7 16 02 FB | 	rdlong	arg03, fp
0f9ac     0B 27 02 F6 | 	mov	local01, arg03
0f9b0     09 26 66 F0 | 	shl	local01, #9
0f9b4     F2 26 02 F1 | 	add	local01, objptr
0f9b8     04 4E 85 F1 | 	sub	fp, #4
0f9bc     A7 1A 02 FB | 	rdlong	arg05, fp
0f9c0     0D 19 02 F6 | 	mov	arg04, arg05
0f9c4     01 18 66 F0 | 	shl	arg04, #1
0f9c8     13 19 02 F1 | 	add	arg04, local01
0f9cc     0B 27 02 F6 | 	mov	local01, arg03
0f9d0     09 26 66 F0 | 	shl	local01, #9
0f9d4     0B 27 02 F1 | 	add	local01, arg03
0f9d8     F2 26 02 F1 | 	add	local01, objptr
0f9dc     13 1B 02 F1 | 	add	arg05, local01
0f9e0     0D 27 C2 FA | 	rdbyte	local01, arg05
0f9e4     00 27 06 FA | 	mul	local01, #256
0f9e8     0C 27 52 FC | 	wrword	local01, arg04
0f9ec     A7 26 02 FB | 	rdlong	local01, fp
0f9f0     01 26 86 F1 | 	sub	local01, #1
0f9f4     A7 26 62 FC | 	wrlong	local01, fp
0f9f8     14 4E 85 F1 | 	sub	fp, #20
0f9fc     00 26 56 F2 | 	cmps	local01, #0 wc
0fa00     A0 FF 9F 3D |  if_ae	jmp	#LR__1345
0fa04                 | LR__1346
0fa04     0C 00 00 FF 
0fa08     D8 E4 85 F1 | 	sub	objptr, ##6360
0fa0c                 | '     close #9
0fa0c     09 12 06 F6 | 	mov	arg01, #9
0fa10     CC B2 B1 FD | 	call	#__system__close
0fa14     18 4E 05 F1 | 	add	fp, #24
0fa18     A7 26 02 FB | 	rdlong	local01, fp
0fa1c     18 4E 85 F1 | 	sub	fp, #24
0fa20     09 26 66 F0 | 	shl	local01, #9
0fa24     0C 00 00 FF 
0fa28     D8 E4 05 F1 | 	add	objptr, ##6360
0fa2c     F2 26 02 F1 | 	add	local01, objptr
0fa30     FE 27 06 F1 | 	add	local01, #510
0fa34     13 01 58 FC | 	wrword	#0, local01
0fa38                 | '     envbuf(channel,255)=0                                                              
0fa38                 | '     return
0fa38     0C 00 00 FF 
0fa3c     D8 E4 85 F1 | 	sub	objptr, ##6360
0fa40     90 07 90 FD | 	jmp	#LR__1361
0fa44                 | LR__1347
0fa44                 | '     if wptr < $80000 then 
0fa44     1C 4E 05 F1 | 	add	fp, #28
0fa48     A7 28 02 FB | 	rdlong	local02, fp
0fa4c     1C 4E 85 F1 | 	sub	fp, #28
0fa50     00 04 00 FF 
0fa54     00 28 56 F2 | 	cmps	local02, ##524288 wc
0fa58     7C 00 90 3D |  if_ae	jmp	#LR__1350
0fa5c                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0fa5c     14 4E 05 F1 | 	add	fp, #20
0fa60     A7 00 68 FC | 	wrlong	#0, fp
0fa64     14 4E 85 F1 | 	sub	fp, #20
0fa68     0C 00 00 FF 
0fa6c     D8 E4 05 F1 | 	add	objptr, ##6360
0fa70     97 2C 48 FB | 	callpa	#(@LR__1349-@LR__1348)>>2,fcache_load_ptr_
0fa74                 | LR__1348
0fa74     18 4E 05 F1 | 	add	fp, #24
0fa78     A7 28 02 FB | 	rdlong	local02, fp
0fa7c     09 28 66 F0 | 	shl	local02, #9
0fa80     F2 28 02 F1 | 	add	local02, objptr
0fa84     04 4E 85 F1 | 	sub	fp, #4
0fa88     A7 26 02 FB | 	rdlong	local01, fp
0fa8c     13 1B 02 F6 | 	mov	arg05, local01
0fa90     01 1A 66 F0 | 	shl	arg05, #1
0fa94     14 1B 02 F1 | 	add	arg05, local02
0fa98     08 4E 05 F1 | 	add	fp, #8
0fa9c     A7 12 02 FB | 	rdlong	arg01, fp
0faa0     01 26 66 F0 | 	shl	local01, #1
0faa4     13 13 02 F1 | 	add	arg01, local01
0faa8     09 FB E1 FA | 	rdword	result1, arg01
0faac     0D FB 51 FC | 	wrword	result1, arg05
0fab0     08 4E 85 F1 | 	sub	fp, #8
0fab4     A7 28 02 FB | 	rdlong	local02, fp
0fab8     01 28 06 F1 | 	add	local02, #1
0fabc     A7 28 62 FC | 	wrlong	local02, fp
0fac0     14 4E 85 F1 | 	sub	fp, #20
0fac4     00 29 56 F2 | 	cmps	local02, #256 wc
0fac8     A8 FF 9F CD |  if_b	jmp	#LR__1348
0facc                 | LR__1349
0facc     0C 00 00 FF 
0fad0     D8 E4 85 F1 | 	sub	objptr, ##6360
0fad4     78 00 90 FD | 	jmp	#LR__1352
0fad8                 | LR__1350
0fad8                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0fad8     14 4E 05 F1 | 	add	fp, #20
0fadc     A7 00 68 FC | 	wrlong	#0, fp
0fae0     14 4E 85 F1 | 	sub	fp, #20
0fae4                 | LR__1351
0fae4     18 4E 05 F1 | 	add	fp, #24
0fae8     A7 28 02 FB | 	rdlong	local02, fp
0faec     09 28 66 F0 | 	shl	local02, #9
0faf0     0C 00 00 FF 
0faf4     D8 E4 05 F1 | 	add	objptr, ##6360
0faf8     F2 28 02 F1 | 	add	local02, objptr
0fafc     04 4E 85 F1 | 	sub	fp, #4
0fb00     A7 26 02 FB | 	rdlong	local01, fp
0fb04     13 2B 02 F6 | 	mov	local03, local01
0fb08     01 2A 66 F0 | 	shl	local03, #1
0fb0c     14 2B 02 F1 | 	add	local03, local02
0fb10     08 4E 05 F1 | 	add	fp, #8
0fb14     A7 12 02 FB | 	rdlong	arg01, fp
0fb18     1C 4E 85 F1 | 	sub	fp, #28
0fb1c     01 26 66 F0 | 	shl	local01, #1
0fb20     13 13 02 F1 | 	add	arg01, local01
0fb24     0C 00 00 FF 
0fb28     D8 E4 85 F1 | 	sub	objptr, ##6360
0fb2c     94 27 B1 FD | 	call	#_psdpeek
0fb30     15 FB 51 FC | 	wrword	result1, local03
0fb34     14 4E 05 F1 | 	add	fp, #20
0fb38     A7 2A 02 FB | 	rdlong	local03, fp
0fb3c     01 2A 06 F1 | 	add	local03, #1
0fb40     A7 2A 62 FC | 	wrlong	local03, fp
0fb44     14 4E 85 F1 | 	sub	fp, #20
0fb48     00 2B 56 F2 | 	cmps	local03, #256 wc
0fb4c     94 FF 9F CD |  if_b	jmp	#LR__1351
0fb50                 | LR__1352
0fb50     18 4E 05 F1 | 	add	fp, #24
0fb54     A7 2A 02 FB | 	rdlong	local03, fp
0fb58     18 4E 85 F1 | 	sub	fp, #24
0fb5c     09 2A 66 F0 | 	shl	local03, #9
0fb60     0C 00 00 FF 
0fb64     D8 E4 05 F1 | 	add	objptr, ##6360
0fb68     F2 2A 02 F1 | 	add	local03, objptr
0fb6c     FE 2B 06 F1 | 	add	local03, #510
0fb70     15 01 58 FC | 	wrword	#0, local03
0fb74                 | '     envbuf(channel,255)=0
0fb74                 | '     return   
0fb74     0C 00 00 FF 
0fb78     D8 E4 85 F1 | 	sub	objptr, ##6360
0fb7c     54 06 90 FD | 	jmp	#LR__1361
0fb80                 | LR__1353
0fb80                 | ' 
0fb80                 | ' if numpar=5 then   						 'simple adsr
0fb80     10 4E 05 F1 | 	add	fp, #16
0fb84     A7 28 02 FB | 	rdlong	local02, fp
0fb88     10 4E 85 F1 | 	sub	fp, #16
0fb8c     05 28 0E F2 | 	cmp	local02, #5 wz
0fb90     14 06 90 5D |  if_ne	jmp	#LR__1360
0fb94     E8 D0 BF FD | 	call	#_pop
0fb98     FF 26 02 F6 | 	mov	local01, result3
0fb9c     40 4E 05 F1 | 	add	fp, #64
0fba0     A7 FA 61 FC | 	wrlong	result1, fp
0fba4     04 4E 05 F1 | 	add	fp, #4
0fba8     A7 FC 61 FC | 	wrlong	result2, fp
0fbac     04 4E 05 F1 | 	add	fp, #4
0fbb0     A7 26 62 FC | 	wrlong	local01, fp
0fbb4     08 4E 85 F1 | 	sub	fp, #8
0fbb8     A7 12 02 F6 | 	mov	arg01, fp
0fbbc     40 4E 85 F1 | 	sub	fp, #64
0fbc0     5C D3 BF FD | 	call	#_converttofloat
0fbc4     FD 28 02 F6 | 	mov	local02, result1
0fbc8     2C 4E 05 F1 | 	add	fp, #44
0fbcc     A7 28 62 FC | 	wrlong	local02, fp
0fbd0     2C 4E 85 F1 | 	sub	fp, #44
0fbd4     A8 D0 BF FD | 	call	#_pop
0fbd8     FF 26 02 F6 | 	mov	local01, result3
0fbdc     40 4E 05 F1 | 	add	fp, #64
0fbe0     A7 FA 61 FC | 	wrlong	result1, fp
0fbe4     04 4E 05 F1 | 	add	fp, #4
0fbe8     A7 FC 61 FC | 	wrlong	result2, fp
0fbec     04 4E 05 F1 | 	add	fp, #4
0fbf0     A7 26 62 FC | 	wrlong	local01, fp
0fbf4     08 4E 85 F1 | 	sub	fp, #8
0fbf8     A7 12 02 F6 | 	mov	arg01, fp
0fbfc     40 4E 85 F1 | 	sub	fp, #64
0fc00     1C D3 BF FD | 	call	#_converttofloat
0fc04     FD 28 02 F6 | 	mov	local02, result1
0fc08     28 4E 05 F1 | 	add	fp, #40
0fc0c     A7 28 62 FC | 	wrlong	local02, fp
0fc10     28 4E 85 F1 | 	sub	fp, #40
0fc14     68 D0 BF FD | 	call	#_pop
0fc18     FF 26 02 F6 | 	mov	local01, result3
0fc1c     40 4E 05 F1 | 	add	fp, #64
0fc20     A7 FA 61 FC | 	wrlong	result1, fp
0fc24     04 4E 05 F1 | 	add	fp, #4
0fc28     A7 FC 61 FC | 	wrlong	result2, fp
0fc2c     04 4E 05 F1 | 	add	fp, #4
0fc30     A7 26 62 FC | 	wrlong	local01, fp
0fc34     08 4E 85 F1 | 	sub	fp, #8
0fc38     A7 12 02 F6 | 	mov	arg01, fp
0fc3c     40 4E 85 F1 | 	sub	fp, #64
0fc40     DC D2 BF FD | 	call	#_converttofloat
0fc44     FD 28 02 F6 | 	mov	local02, result1
0fc48     24 4E 05 F1 | 	add	fp, #36
0fc4c     A7 28 62 FC | 	wrlong	local02, fp
0fc50     24 4E 85 F1 | 	sub	fp, #36
0fc54     28 D0 BF FD | 	call	#_pop
0fc58     FF 26 02 F6 | 	mov	local01, result3
0fc5c     40 4E 05 F1 | 	add	fp, #64
0fc60     A7 FA 61 FC | 	wrlong	result1, fp
0fc64     04 4E 05 F1 | 	add	fp, #4
0fc68     A7 FC 61 FC | 	wrlong	result2, fp
0fc6c     04 4E 05 F1 | 	add	fp, #4
0fc70     A7 26 62 FC | 	wrlong	local01, fp
0fc74     08 4E 85 F1 | 	sub	fp, #8
0fc78     A7 12 02 F6 | 	mov	arg01, fp
0fc7c     40 4E 85 F1 | 	sub	fp, #64
0fc80     9C D2 BF FD | 	call	#_converttofloat
0fc84     FD 28 02 F6 | 	mov	local02, result1
0fc88     20 4E 05 F1 | 	add	fp, #32
0fc8c     A7 28 62 FC | 	wrlong	local02, fp
0fc90     20 4E 85 F1 | 	sub	fp, #32
0fc94     E8 CF BF FD | 	call	#_pop
0fc98     FF 26 02 F6 | 	mov	local01, result3
0fc9c     40 4E 05 F1 | 	add	fp, #64
0fca0     A7 FA 61 FC | 	wrlong	result1, fp
0fca4     04 4E 05 F1 | 	add	fp, #4
0fca8     A7 FC 61 FC | 	wrlong	result2, fp
0fcac     04 4E 05 F1 | 	add	fp, #4
0fcb0     A7 26 62 FC | 	wrlong	local01, fp
0fcb4     08 4E 85 F1 | 	sub	fp, #8
0fcb8     A7 12 02 F6 | 	mov	arg01, fp
0fcbc     40 4E 85 F1 | 	sub	fp, #64
0fcc0     A0 D1 BF FD | 	call	#_converttoint
0fcc4     18 4E 05 F1 | 	add	fp, #24
0fcc8     A7 FA 61 FC | 	wrlong	result1, fp
0fccc                 | '   t1=pop() : rr=converttofloat(t1)
0fccc                 | '   t1=pop() : ss=converttofloat(t1) 
0fccc                 | '   t1=pop() : dd=converttofloat(t1)
0fccc                 | '   t1=pop() : aa=converttofloat(t1)
0fccc                 | '   t1=pop() : channel=converttoint(t1)
0fccc                 | '   if ss<0.0 then ss=0.0 
0fccc     10 4E 05 F1 | 	add	fp, #16
0fcd0     A7 12 02 FB | 	rdlong	arg01, fp
0fcd4     28 4E 85 F1 | 	sub	fp, #40
0fcd8     00 14 06 F6 | 	mov	arg02, #0
0fcdc     01 16 06 F6 | 	mov	arg03, #1
0fce0     50 8F B1 FD | 	call	#__system___float_cmp
0fce4     00 FA 55 F2 | 	cmps	result1, #0 wc
0fce8     28 4E 05 C1 |  if_b	add	fp, #40
0fcec     A7 00 68 CC |  if_b	wrlong	#0, fp
0fcf0     28 4E 85 C1 |  if_b	sub	fp, #40
0fcf4                 | '   if ss>1.0 then ss=1.0
0fcf4     28 4E 05 F1 | 	add	fp, #40
0fcf8     A7 12 02 FB | 	rdlong	arg01, fp
0fcfc     28 4E 85 F1 | 	sub	fp, #40
0fd00     00 C0 1F FF 
0fd04     00 14 06 F6 | 	mov	arg02, ##1065353216
0fd08     01 16 66 F6 | 	neg	arg03, #1
0fd0c     24 8F B1 FD | 	call	#__system___float_cmp
0fd10     01 FA 55 F2 | 	cmps	result1, #1 wc
0fd14     28 4E 05 31 |  if_ae	add	fp, #40
0fd18     00 C0 9F 3F 
0fd1c     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0fd20     28 4E 85 31 |  if_ae	sub	fp, #40
0fd24     20 4E 05 F1 | 	add	fp, #32
0fd28     A7 12 02 FB | 	rdlong	arg01, fp
0fd2c     04 4E 05 F1 | 	add	fp, #4
0fd30     A7 14 02 FB | 	rdlong	arg02, fp
0fd34     24 4E 85 F1 | 	sub	fp, #36
0fd38     F4 86 B1 FD | 	call	#__system___float_add
0fd3c     FD 12 02 F6 | 	mov	arg01, result1
0fd40     2C 4E 05 F1 | 	add	fp, #44
0fd44     A7 14 02 FB | 	rdlong	arg02, fp
0fd48     2C 4E 85 F1 | 	sub	fp, #44
0fd4c     E0 86 B1 FD | 	call	#__system___float_add
0fd50     30 4E 05 F1 | 	add	fp, #48
0fd54     A7 FA 61 FC | 	wrlong	result1, fp
0fd58     FD 14 02 F6 | 	mov	arg02, result1
0fd5c     30 4E 85 F1 | 	sub	fp, #48
0fd60     00 C0 21 FF 
0fd64     00 12 06 F6 | 	mov	arg01, ##1132462080
0fd68     98 8C B1 FD | 	call	#__system___float_div
0fd6c     34 4E 05 F1 | 	add	fp, #52
0fd70     A7 FA 61 FC | 	wrlong	result1, fp
0fd74     14 4E 85 F1 | 	sub	fp, #20
0fd78     A7 12 02 FB | 	rdlong	arg01, fp
0fd7c     FD 14 02 F6 | 	mov	arg02, result1
0fd80     20 4E 85 F1 | 	sub	fp, #32
0fd84     78 8A B1 FD | 	call	#__system___float_mul
0fd88     FD 12 02 F6 | 	mov	arg01, result1
0fd8c     01 14 06 F6 | 	mov	arg02, #1
0fd90     34 8F B1 FD | 	call	#__system___float_tointeger
0fd94     A7 FA 61 FC | 	wrlong	result1, fp
0fd98     24 4E 05 F1 | 	add	fp, #36
0fd9c     A7 12 02 FB | 	rdlong	arg01, fp
0fda0     10 4E 05 F1 | 	add	fp, #16
0fda4     A7 14 02 FB | 	rdlong	arg02, fp
0fda8     34 4E 85 F1 | 	sub	fp, #52
0fdac     50 8A B1 FD | 	call	#__system___float_mul
0fdb0     FD 12 02 F6 | 	mov	arg01, result1
0fdb4     01 14 06 F6 | 	mov	arg02, #1
0fdb8     0C 8F B1 FD | 	call	#__system___float_tointeger
0fdbc     04 4E 05 F1 | 	add	fp, #4
0fdc0     A7 FA 61 FC | 	wrlong	result1, fp
0fdc4     28 4E 05 F1 | 	add	fp, #40
0fdc8     A7 12 02 FB | 	rdlong	arg01, fp
0fdcc     08 4E 05 F1 | 	add	fp, #8
0fdd0     A7 14 02 FB | 	rdlong	arg02, fp
0fdd4     34 4E 85 F1 | 	sub	fp, #52
0fdd8     24 8A B1 FD | 	call	#__system___float_mul
0fddc     FD 12 02 F6 | 	mov	arg01, result1
0fde0     01 14 06 F6 | 	mov	arg02, #1
0fde4     E0 8E B1 FD | 	call	#__system___float_tointeger
0fde8     0C 4E 05 F1 | 	add	fp, #12
0fdec     A7 FA 61 FC | 	wrlong	result1, fp
0fdf0     0C 4E 85 F1 | 	sub	fp, #12
0fdf4     F8 BF 23 FF 
0fdf8     00 28 06 F6 | 	mov	local02, ##1199566848
0fdfc     A7 12 02 FB | 	rdlong	arg01, fp
0fe00     09 13 52 F6 | 	abs	arg01, arg01 wc
0fe04     1F 2C C6 C9 |  if_b	decod	local04, #31
0fe08     00 2C 06 36 |  if_ae	mov	local04, #0
0fe0c     EC 85 B1 FD | 	call	#__system___float_fromuns
0fe10     16 FB 61 F5 | 	xor	result1, local04
0fe14     FD 14 02 F6 | 	mov	arg02, result1
0fe18     14 13 02 F6 | 	mov	arg01, local02
0fe1c     E4 8B B1 FD | 	call	#__system___float_div
0fe20     38 4E 05 F1 | 	add	fp, #56
0fe24     A7 FA 61 FC | 	wrlong	result1, fp
0fe28     F8 BF 23 FF 
0fe2c     00 28 06 F6 | 	mov	local02, ##1199566848
0fe30     10 4E 85 F1 | 	sub	fp, #16
0fe34     A7 14 02 FB | 	rdlong	arg02, fp
0fe38     28 4E 85 F1 | 	sub	fp, #40
0fe3c     F8 BF 23 FF 
0fe40     00 12 06 F6 | 	mov	arg01, ##1199566848
0fe44     B8 89 B1 FD | 	call	#__system___float_mul
0fe48     FD 14 02 F6 | 	mov	arg02, result1
0fe4c     14 13 02 F6 | 	mov	arg01, local02
0fe50     1F 14 E6 F4 | 	bitnot	arg02, #31
0fe54     D8 85 B1 FD | 	call	#__system___float_add
0fe58     FD 28 02 F6 | 	mov	local02, result1
0fe5c     04 4E 05 F1 | 	add	fp, #4
0fe60     A7 12 02 FB | 	rdlong	arg01, fp
0fe64     04 4E 85 F1 | 	sub	fp, #4
0fe68     09 13 52 F6 | 	abs	arg01, arg01 wc
0fe6c     1F 2C C6 C9 |  if_b	decod	local04, #31
0fe70     00 2C 06 36 |  if_ae	mov	local04, #0
0fe74     84 85 B1 FD | 	call	#__system___float_fromuns
0fe78     16 FB 61 F5 | 	xor	result1, local04
0fe7c     FD 14 02 F6 | 	mov	arg02, result1
0fe80     14 13 02 F6 | 	mov	arg01, local02
0fe84     7C 8B B1 FD | 	call	#__system___float_div
0fe88     24 4E 05 F1 | 	add	fp, #36
0fe8c     A7 FA 61 FC | 	wrlong	result1, fp
0fe90     04 4E 05 F1 | 	add	fp, #4
0fe94     A7 14 02 FB | 	rdlong	arg02, fp
0fe98     28 4E 85 F1 | 	sub	fp, #40
0fe9c     F8 BF 23 FF 
0fea0     00 12 06 F6 | 	mov	arg01, ##1199566848
0fea4     58 89 B1 FD | 	call	#__system___float_mul
0fea8     FD 28 02 F6 | 	mov	local02, result1
0feac     0C 4E 05 F1 | 	add	fp, #12
0feb0     A7 12 02 FB | 	rdlong	arg01, fp
0feb4     0C 4E 85 F1 | 	sub	fp, #12
0feb8     09 13 52 F6 | 	abs	arg01, arg01 wc
0febc     1F 2C C6 C9 |  if_b	decod	local04, #31
0fec0     00 2C 06 36 |  if_ae	mov	local04, #0
0fec4     34 85 B1 FD | 	call	#__system___float_fromuns
0fec8     16 FB 61 F5 | 	xor	result1, local04
0fecc     FD 14 02 F6 | 	mov	arg02, result1
0fed0     14 13 02 F6 | 	mov	arg01, local02
0fed4     2C 8B B1 FD | 	call	#__system___float_div
0fed8     3C 4E 05 F1 | 	add	fp, #60
0fedc     A7 FA 61 FC | 	wrlong	result1, fp
0fee0     24 4E 85 F1 | 	sub	fp, #36
0fee4     A7 2E 02 FB | 	rdlong	local05, fp
0fee8     18 4E 85 F1 | 	sub	fp, #24
0feec     01 2E 66 F0 | 	shl	local05, #1
0fef0     52 00 00 FF 
0fef4     60 E4 05 F1 | 	add	objptr, ##42080
0fef8     F2 2E 02 F1 | 	add	local05, objptr
0fefc     A7 30 02 FB | 	rdlong	local06, fp
0ff00     04 4E 05 F1 | 	add	fp, #4
0ff04     A7 2A 02 FB | 	rdlong	local03, fp
0ff08     15 31 02 F1 | 	add	local06, local03
0ff0c     17 31 52 FC | 	wrword	local06, local05
0ff10     1C 4E 05 F1 | 	add	fp, #28
0ff14     A7 00 68 FC | 	wrlong	#0, fp
0ff18                 | '   fulltime=aa+dd+rr
0ff18                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
0ff18                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
0ff18                 | '   suspoints(channel)=a+d
0ff18                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0ff18     0C 4E 85 F1 | 	sub	fp, #12
0ff1c     A7 00 68 FC | 	wrlong	#0, fp
0ff20     14 4E 85 F1 | 	sub	fp, #20
0ff24     A7 32 02 FB | 	rdlong	local07, fp
0ff28     52 00 00 FF 
0ff2c     60 E4 85 F1 | 	sub	objptr, ##42080
0ff30                 | LR__1354
0ff30     14 4E 05 F1 | 	add	fp, #20
0ff34     A7 28 02 FB | 	rdlong	local02, fp
0ff38     14 4E 85 F1 | 	sub	fp, #20
0ff3c     19 29 52 F2 | 	cmps	local02, local07 wc
0ff40     80 00 90 3D |  if_ae	jmp	#LR__1355
0ff44     18 4E 05 F1 | 	add	fp, #24
0ff48     A7 30 02 FB | 	rdlong	local06, fp
0ff4c     09 30 66 F0 | 	shl	local06, #9
0ff50     0C 00 00 FF 
0ff54     D8 E4 05 F1 | 	add	objptr, ##6360
0ff58     F2 30 02 F1 | 	add	local06, objptr
0ff5c     04 4E 85 F1 | 	sub	fp, #4
0ff60     A7 2E 02 FB | 	rdlong	local05, fp
0ff64     01 2E 66 F0 | 	shl	local05, #1
0ff68     18 2F 02 F1 | 	add	local05, local06
0ff6c     0C 4E 05 F1 | 	add	fp, #12
0ff70     A7 12 02 FB | 	rdlong	arg01, fp
0ff74     20 4E 85 F1 | 	sub	fp, #32
0ff78     0C 00 00 FF 
0ff7c     D8 E4 85 F1 | 	sub	objptr, ##6360
0ff80     01 14 06 F6 | 	mov	arg02, #1
0ff84     40 8D B1 FD | 	call	#__system___float_tointeger
0ff88     17 FB 51 FC | 	wrword	result1, local05
0ff8c     20 4E 05 F1 | 	add	fp, #32
0ff90     A7 12 02 FB | 	rdlong	arg01, fp
0ff94     18 4E 05 F1 | 	add	fp, #24
0ff98     A7 14 02 FB | 	rdlong	arg02, fp
0ff9c     38 4E 85 F1 | 	sub	fp, #56
0ffa0     8C 84 B1 FD | 	call	#__system___float_add
0ffa4     20 4E 05 F1 | 	add	fp, #32
0ffa8     A7 FA 61 FC | 	wrlong	result1, fp
0ffac     0C 4E 85 F1 | 	sub	fp, #12
0ffb0     A7 30 02 FB | 	rdlong	local06, fp
0ffb4     01 30 06 F1 | 	add	local06, #1
0ffb8     A7 30 62 FC | 	wrlong	local06, fp
0ffbc     14 4E 85 F1 | 	sub	fp, #20
0ffc0     6C FF 9F FD | 	jmp	#LR__1354
0ffc4                 | LR__1355
0ffc4                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0ffc4     A7 28 02 FB | 	rdlong	local02, fp
0ffc8     14 4E 05 F1 | 	add	fp, #20
0ffcc     A7 28 62 FC | 	wrlong	local02, fp
0ffd0     14 4E 85 F1 | 	sub	fp, #20
0ffd4     A7 34 02 FB | 	rdlong	local08, fp
0ffd8     04 4E 05 F1 | 	add	fp, #4
0ffdc     A7 28 02 FB | 	rdlong	local02, fp
0ffe0     04 4E 85 F1 | 	sub	fp, #4
0ffe4     14 35 02 F1 | 	add	local08, local02
0ffe8                 | LR__1356
0ffe8     14 4E 05 F1 | 	add	fp, #20
0ffec     A7 28 02 FB | 	rdlong	local02, fp
0fff0     14 4E 85 F1 | 	sub	fp, #20
0fff4     1A 29 52 F2 | 	cmps	local02, local08 wc
0fff8     A8 00 90 3D |  if_ae	jmp	#LR__1357
0fffc     18 4E 05 F1 | 	add	fp, #24
10000     A7 32 02 FB | 	rdlong	local07, fp
10004     09 32 66 F0 | 	shl	local07, #9
10008     0C 00 00 FF 
1000c     D8 E4 05 F1 | 	add	objptr, ##6360
10010     F2 32 02 F1 | 	add	local07, objptr
10014     04 4E 85 F1 | 	sub	fp, #4
10018     A7 30 02 FB | 	rdlong	local06, fp
1001c     01 30 66 F0 | 	shl	local06, #1
10020     19 31 02 F1 | 	add	local06, local07
10024     0C 4E 05 F1 | 	add	fp, #12
10028     A7 12 02 FB | 	rdlong	arg01, fp
1002c     20 4E 85 F1 | 	sub	fp, #32
10030     0C 00 00 FF 
10034     D8 E4 85 F1 | 	sub	objptr, ##6360
10038     01 14 06 F6 | 	mov	arg02, #1
1003c     88 8C B1 FD | 	call	#__system___float_tointeger
10040     18 FB 51 FC | 	wrword	result1, local06
10044     20 4E 05 F1 | 	add	fp, #32
10048     A7 12 02 FB | 	rdlong	arg01, fp
1004c     04 4E 05 F1 | 	add	fp, #4
10050     A7 14 02 FB | 	rdlong	arg02, fp
10054     24 4E 85 F1 | 	sub	fp, #36
10058     1F 14 E6 F4 | 	bitnot	arg02, #31
1005c     D0 83 B1 FD | 	call	#__system___float_add
10060     20 4E 05 F1 | 	add	fp, #32
10064     A7 FA 61 FC | 	wrlong	result1, fp
10068     20 4E 85 F1 | 	sub	fp, #32
1006c     FD 12 02 F6 | 	mov	arg01, result1
10070     00 14 06 F6 | 	mov	arg02, #0
10074     01 16 06 F6 | 	mov	arg03, #1
10078     B8 8B B1 FD | 	call	#__system___float_cmp
1007c     00 FA 55 F2 | 	cmps	result1, #0 wc
10080     20 4E 05 C1 |  if_b	add	fp, #32
10084     A7 00 68 CC |  if_b	wrlong	#0, fp
10088     20 4E 85 C1 |  if_b	sub	fp, #32
1008c     14 4E 05 F1 | 	add	fp, #20
10090     A7 32 02 FB | 	rdlong	local07, fp
10094     01 32 06 F1 | 	add	local07, #1
10098     A7 32 62 FC | 	wrlong	local07, fp
1009c     14 4E 85 F1 | 	sub	fp, #20
100a0     44 FF 9F FD | 	jmp	#LR__1356
100a4                 | LR__1357
100a4                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
100a4     A7 28 02 FB | 	rdlong	local02, fp
100a8     04 4E 05 F1 | 	add	fp, #4
100ac     A7 34 02 FB | 	rdlong	local08, fp
100b0     1A 29 02 F1 | 	add	local02, local08
100b4     10 4E 05 F1 | 	add	fp, #16
100b8     A7 28 62 FC | 	wrlong	local02, fp
100bc     14 4E 85 F1 | 	sub	fp, #20
100c0                 | LR__1358
100c0     14 4E 05 F1 | 	add	fp, #20
100c4     A7 2E 02 FB | 	rdlong	local05, fp
100c8     14 4E 85 F1 | 	sub	fp, #20
100cc     00 2F 56 F2 | 	cmps	local05, #256 wc
100d0     A8 00 90 3D |  if_ae	jmp	#LR__1359
100d4     18 4E 05 F1 | 	add	fp, #24
100d8     A7 34 02 FB | 	rdlong	local08, fp
100dc     09 34 66 F0 | 	shl	local08, #9
100e0     0C 00 00 FF 
100e4     D8 E4 05 F1 | 	add	objptr, ##6360
100e8     F2 34 02 F1 | 	add	local08, objptr
100ec     04 4E 85 F1 | 	sub	fp, #4
100f0     A7 32 02 FB | 	rdlong	local07, fp
100f4     01 32 66 F0 | 	shl	local07, #1
100f8     1A 33 02 F1 | 	add	local07, local08
100fc     0C 4E 05 F1 | 	add	fp, #12
10100     A7 12 02 FB | 	rdlong	arg01, fp
10104     20 4E 85 F1 | 	sub	fp, #32
10108     0C 00 00 FF 
1010c     D8 E4 85 F1 | 	sub	objptr, ##6360
10110     01 14 06 F6 | 	mov	arg02, #1
10114     B0 8B B1 FD | 	call	#__system___float_tointeger
10118     19 FB 51 FC | 	wrword	result1, local07
1011c     20 4E 05 F1 | 	add	fp, #32
10120     A7 12 02 FB | 	rdlong	arg01, fp
10124     1C 4E 05 F1 | 	add	fp, #28
10128     A7 14 02 FB | 	rdlong	arg02, fp
1012c     3C 4E 85 F1 | 	sub	fp, #60
10130     1F 14 E6 F4 | 	bitnot	arg02, #31
10134     F8 82 B1 FD | 	call	#__system___float_add
10138     20 4E 05 F1 | 	add	fp, #32
1013c     A7 FA 61 FC | 	wrlong	result1, fp
10140     20 4E 85 F1 | 	sub	fp, #32
10144     FD 12 02 F6 | 	mov	arg01, result1
10148     00 14 06 F6 | 	mov	arg02, #0
1014c     01 16 06 F6 | 	mov	arg03, #1
10150     E0 8A B1 FD | 	call	#__system___float_cmp
10154     00 FA 55 F2 | 	cmps	result1, #0 wc
10158     20 4E 05 C1 |  if_b	add	fp, #32
1015c     A7 00 68 CC |  if_b	wrlong	#0, fp
10160     20 4E 85 C1 |  if_b	sub	fp, #32
10164     14 4E 05 F1 | 	add	fp, #20
10168     A7 34 02 FB | 	rdlong	local08, fp
1016c     01 34 06 F1 | 	add	local08, #1
10170     A7 34 62 FC | 	wrlong	local08, fp
10174     14 4E 85 F1 | 	sub	fp, #20
10178     44 FF 9F FD | 	jmp	#LR__1358
1017c                 | LR__1359
1017c     18 4E 05 F1 | 	add	fp, #24
10180     A7 2E 02 FB | 	rdlong	local05, fp
10184     18 4E 85 F1 | 	sub	fp, #24
10188     09 2E 66 F0 | 	shl	local05, #9
1018c     0C 00 00 FF 
10190     D8 E4 05 F1 | 	add	objptr, ##6360
10194     F2 2E 02 F1 | 	add	local05, objptr
10198     FE 2F 06 F1 | 	add	local05, #510
1019c     17 01 58 FC | 	wrword	#0, local05
101a0     0C 00 00 FF 
101a4     D8 E4 85 F1 | 	sub	objptr, ##6360
101a8                 | LR__1360
101a8     18 4E 05 F1 | 	add	fp, #24
101ac     A7 2E 02 FB | 	rdlong	local05, fp
101b0     18 4E 85 F1 | 	sub	fp, #24
101b4     09 2E 66 F0 | 	shl	local05, #9
101b8     0C 00 00 FF 
101bc     D8 E4 05 F1 | 	add	objptr, ##6360
101c0     F2 2E 02 F1 | 	add	local05, objptr
101c4     FE 2F 06 F1 | 	add	local05, #510
101c8     17 01 58 FC | 	wrword	#0, local05
101cc     0C 00 00 FF 
101d0     D8 E4 85 F1 | 	sub	objptr, ##6360
101d4                 | LR__1361
101d4     A7 F0 03 F6 | 	mov	ptra, fp
101d8     B2 00 A0 FD | 	call	#popregs_
101dc                 | _do_defenv_ret
101dc     2D 00 64 FD | 	ret
101e0                 | 
101e0                 | ' 
101e0                 | ' '-------------------- defsnd
101e0                 | ' 
101e0                 | ' sub do_defsnd
101e0                 | _do_defsnd
101e0     04 4A 05 F6 | 	mov	COUNT_, #4
101e4     A8 00 A0 FD | 	call	#pushregs_
101e8     88 F0 07 F1 | 	add	ptra, #136
101ec     4A 00 00 FF 
101f0     80 E4 05 F1 | 	add	objptr, ##38016
101f4     F2 1A 02 FB | 	rdlong	arg05, objptr
101f8     0D 19 02 F6 | 	mov	arg04, arg05
101fc     01 18 66 F0 | 	shl	arg04, #1
10200     0D 19 02 F1 | 	add	arg04, arg05
10204     02 18 66 F0 | 	shl	arg04, #2
10208     03 00 00 FF 
1020c     04 E4 85 F1 | 	sub	objptr, ##1540
10210     F2 18 02 F1 | 	add	arg04, objptr
10214     0C 1B 02 FB | 	rdlong	arg05, arg04
10218     A7 1A 62 FC | 	wrlong	arg05, fp
1021c                 | ' 
1021c                 | ' numpar=compiledline(lineptr_e).result.uresult
1021c                 | ' 
1021c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
1021c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
1021c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
1021c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
1021c                 | ' 
1021c                 | ' if numpar<2 then return
1021c     02 1A 56 F2 | 	cmps	arg05, #2 wc
10220     47 00 00 FF 
10224     7C E4 85 F1 | 	sub	objptr, ##36476
10228     94 08 90 CD |  if_b	jmp	#LR__1393
1022c                 | '  
1022c                 | ' if numpar=2 then
1022c     A7 1A 02 FB | 	rdlong	arg05, fp
10230     02 1A 0E F2 | 	cmp	arg05, #2 wz
10234     A0 03 90 5D |  if_ne	jmp	#LR__1380
10238     44 CA BF FD | 	call	#_pop
1023c     FF 1A 02 F6 | 	mov	arg05, result3
10240     2C 4E 05 F1 | 	add	fp, #44
10244     A7 FA 61 FC | 	wrlong	result1, fp
10248     04 4E 05 F1 | 	add	fp, #4
1024c     A7 FC 61 FC | 	wrlong	result2, fp
10250     04 4E 05 F1 | 	add	fp, #4
10254     A7 1A 62 FC | 	wrlong	arg05, fp
10258                 | '   t1=pop()
10258                 | '   if t1.result_type=result_string2 then 
10258     34 4E 85 F1 | 	sub	fp, #52
1025c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
10260     20 00 90 5D |  if_ne	jmp	#LR__1370
10264     2C 4E 05 F1 | 	add	fp, #44
10268     A7 12 02 FB | 	rdlong	arg01, fp
1026c     2C 4E 85 F1 | 	sub	fp, #44
10270     84 CB BF FD | 	call	#_convertstring
10274     38 4E 05 F1 | 	add	fp, #56
10278     A7 FA 61 FC | 	wrlong	result1, fp
1027c     38 4E 85 F1 | 	sub	fp, #56
10280     58 00 90 FD | 	jmp	#LR__1373
10284                 | LR__1370
10284     34 4E 05 F1 | 	add	fp, #52
10288     A7 1A 02 FB | 	rdlong	arg05, fp
1028c     34 4E 85 F1 | 	sub	fp, #52
10290     1F 1A 0E F2 | 	cmp	arg05, #31 wz
10294     18 00 90 5D |  if_ne	jmp	#LR__1371
10298     2C 4E 05 F1 | 	add	fp, #44
1029c     A7 1A 02 FB | 	rdlong	arg05, fp
102a0     0C 4E 05 F1 | 	add	fp, #12
102a4     A7 1A 62 FC | 	wrlong	arg05, fp
102a8     38 4E 85 F1 | 	sub	fp, #56
102ac     2C 00 90 FD | 	jmp	#LR__1372
102b0                 | LR__1371
102b0     AE 01 00 FF 
102b4     E0 1A 06 F6 | 	mov	arg05, ##@LR__5848
102b8     38 4E 05 F1 | 	add	fp, #56
102bc     A7 1A 62 FC | 	wrlong	arg05, fp
102c0     0C 4E 85 F1 | 	sub	fp, #12
102c4     A7 12 02 F6 | 	mov	arg01, fp
102c8     2C 4E 85 F1 | 	sub	fp, #44
102cc     94 CB BF FD | 	call	#_converttoint
102d0     14 4E 05 F1 | 	add	fp, #20
102d4     A7 FA 61 FC | 	wrlong	result1, fp
102d8     14 4E 85 F1 | 	sub	fp, #20
102dc                 | LR__1372
102dc                 | LR__1373
102dc                 | '   if s<>"" then 
102dc     38 4E 05 F1 | 	add	fp, #56
102e0     A7 12 02 FB | 	rdlong	arg01, fp
102e4     38 4E 85 F1 | 	sub	fp, #56
102e8     AE 01 00 FF 
102ec     E1 14 06 F6 | 	mov	arg02, ##@LR__5849
102f0     BC 56 B1 FD | 	call	#__system___string_cmp
102f4     00 FA 0D F2 | 	cmp	result1, #0 wz
102f8     E0 01 90 AD |  if_e	jmp	#LR__1376
102fc     80 C9 BF FD | 	call	#_pop
10300     FF 1A 02 F6 | 	mov	arg05, result3
10304     2C 4E 05 F1 | 	add	fp, #44
10308     A7 FA 61 FC | 	wrlong	result1, fp
1030c     04 4E 05 F1 | 	add	fp, #4
10310     A7 FC 61 FC | 	wrlong	result2, fp
10314     04 4E 05 F1 | 	add	fp, #4
10318     A7 1A 62 FC | 	wrlong	arg05, fp
1031c     08 4E 85 F1 | 	sub	fp, #8
10320     A7 12 02 F6 | 	mov	arg01, fp
10324     2C 4E 85 F1 | 	sub	fp, #44
10328     38 CB BF FD | 	call	#_converttoint
1032c     10 4E 05 F1 | 	add	fp, #16
10330     A7 FA 61 FC | 	wrlong	result1, fp
10334                 | '     t1=pop()
10334                 | '     channel=converttoint(t1) : if channel>31 then return
10334     FD 1A 02 F6 | 	mov	arg05, result1
10338     10 4E 85 F1 | 	sub	fp, #16
1033c     20 1A 56 F2 | 	cmps	arg05, #32 wc
10340     7C 07 90 3D |  if_ae	jmp	#LR__1393
10344                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10344     09 12 06 F6 | 	mov	arg01, #9
10348     94 A9 B1 FD | 	call	#__system__close
1034c     09 26 06 F6 | 	mov	local01, #9
10350     AE 01 00 FF 
10354     E2 12 06 F6 | 	mov	arg01, ##@LR__5850
10358     38 4E 05 F1 | 	add	fp, #56
1035c     A7 14 02 FB | 	rdlong	arg02, fp
10360     38 4E 85 F1 | 	sub	fp, #56
10364     7C 56 B1 FD | 	call	#__system___string_concat
10368     FD 14 02 F6 | 	mov	arg02, result1
1036c     13 13 02 F6 | 	mov	arg01, local01
10370     00 16 06 F6 | 	mov	arg03, #0
10374     14 62 B1 FD | 	call	#__system___basic_open_string
10378     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1037c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
10380     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10384     52 00 00 FF 
10388     BC E4 05 F1 | 	add	objptr, ##42172
1038c     F2 FA 61 FC | 	wrlong	result1, objptr
10390                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
10390     52 00 00 FF 
10394     BC E4 85 F1 | 	sub	objptr, ##42172
10398     B0 00 90 AD |  if_e	jmp	#LR__1374
1039c     00 12 06 F6 | 	mov	arg01, #0
103a0     0C B3 B1 FD | 	call	#__system___getiolock_0599
103a4     FD 12 02 F6 | 	mov	arg01, result1
103a8     DC 55 B1 FD | 	call	#__system___lockmem
103ac     AE 01 00 FF 
103b0     EF 14 06 F6 | 	mov	arg02, ##@LR__5851
103b4     00 12 06 F6 | 	mov	arg01, #0
103b8     00 16 06 F6 | 	mov	arg03, #0
103bc     BC 62 B1 FD | 	call	#__system___basic_print_string
103c0     52 00 00 FF 
103c4     BC E4 05 F1 | 	add	objptr, ##42172
103c8     F2 14 02 FB | 	rdlong	arg02, objptr
103cc     52 00 00 FF 
103d0     BC E4 85 F1 | 	sub	objptr, ##42172
103d4     00 12 06 F6 | 	mov	arg01, #0
103d8     00 16 06 F6 | 	mov	arg03, #0
103dc     0A 18 06 F6 | 	mov	arg04, #10
103e0     DC 62 B1 FD | 	call	#__system___basic_print_integer
103e4     AE 01 00 FF 
103e8     FD 14 06 F6 | 	mov	arg02, ##@LR__5852
103ec     00 12 06 F6 | 	mov	arg01, #0
103f0     00 16 06 F6 | 	mov	arg03, #0
103f4     84 62 B1 FD | 	call	#__system___basic_print_string
103f8     00 26 06 F6 | 	mov	local01, #0
103fc     52 00 00 FF 
10400     BC E4 05 F1 | 	add	objptr, ##42172
10404     F2 12 02 FB | 	rdlong	arg01, objptr
10408     52 00 00 FF 
1040c     BC E4 85 F1 | 	sub	objptr, ##42172
10410     00 7F B1 FD | 	call	#__system___strerror
10414     FD 14 02 F6 | 	mov	arg02, result1
10418     13 13 02 F6 | 	mov	arg01, local01
1041c     00 16 06 F6 | 	mov	arg03, #0
10420     58 62 B1 FD | 	call	#__system___basic_print_string
10424     00 12 06 F6 | 	mov	arg01, #0
10428     0A 14 06 F6 | 	mov	arg02, #10
1042c     00 16 06 F6 | 	mov	arg03, #0
10430     F0 61 B1 FD | 	call	#__system___basic_print_char
10434     00 12 06 F6 | 	mov	arg01, #0
10438     74 B2 B1 FD | 	call	#__system___getiolock_0599
1043c     FD 00 68 FC | 	wrlong	#0, result1
10440     09 12 06 F6 | 	mov	arg01, #9
10444     98 A8 B1 FD | 	call	#__system__close
10448     74 06 90 FD | 	jmp	#LR__1393
1044c                 | LR__1374
1044c                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
1044c     04 4E 05 F1 | 	add	fp, #4
10450     A7 00 68 FC | 	wrlong	#0, fp
10454                 | LR__1375
10454     A7 26 02 FB | 	rdlong	local01, fp
10458     01 26 66 F0 | 	shl	local01, #1
1045c     11 14 06 F6 | 	mov	arg02, #17
10460     13 15 02 F1 | 	add	arg02, local01
10464     78 4E 05 F1 | 	add	fp, #120
10468     A7 16 02 F6 | 	mov	arg03, fp
1046c     7C 4E 85 F1 | 	sub	fp, #124
10470     09 12 06 F6 | 	mov	arg01, #9
10474     01 18 06 F6 | 	mov	arg04, #1
10478     02 1A 06 F6 | 	mov	arg05, #2
1047c     78 63 B1 FD | 	call	#__system___basic_get
10480     10 4E 05 F1 | 	add	fp, #16
10484     A7 12 02 FB | 	rdlong	arg01, fp
10488     0B 12 66 F0 | 	shl	arg01, #11
1048c     0C 4E 85 F1 | 	sub	fp, #12
10490     A7 26 02 FB | 	rdlong	local01, fp
10494     01 26 66 F0 | 	shl	local01, #1
10498     13 13 02 F1 | 	add	arg01, local01
1049c     78 4E 05 F1 | 	add	fp, #120
104a0     A7 14 E2 FA | 	rdword	arg02, fp
104a4     7C 4E 85 F1 | 	sub	fp, #124
104a8     0F 14 66 F7 | 	signx	arg02, #15
104ac     D4 1C B1 FD | 	call	#_psdpoke
104b0     04 4E 05 F1 | 	add	fp, #4
104b4     A7 26 02 FB | 	rdlong	local01, fp
104b8     01 26 06 F1 | 	add	local01, #1
104bc     A7 26 62 FC | 	wrlong	local01, fp
104c0     02 00 00 FF 
104c4     01 26 56 F2 | 	cmps	local01, ##1025 wc
104c8     88 FF 9F CD |  if_b	jmp	#LR__1375
104cc     04 4E 85 F1 | 	sub	fp, #4
104d0                 | '     close #9
104d0     09 12 06 F6 | 	mov	arg01, #9
104d4     08 A8 B1 FD | 	call	#__system__close
104d8                 | '     return
104d8     E4 05 90 FD | 	jmp	#LR__1393
104dc                 | LR__1376
104dc                 | '     if wptr < ($80000 - 2048) then 
104dc     14 4E 05 F1 | 	add	fp, #20
104e0     A7 26 02 FB | 	rdlong	local01, fp
104e4     14 4E 85 F1 | 	sub	fp, #20
104e8     FC 03 00 FF 
104ec     00 26 56 F2 | 	cmps	local01, ##522240 wc
104f0     70 00 90 3D |  if_ae	jmp	#LR__1378
104f4                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
104f4     04 4E 05 F1 | 	add	fp, #4
104f8     A7 00 68 FC | 	wrlong	#0, fp
104fc     04 4E 85 F1 | 	sub	fp, #4
10500                 | LR__1377
10500     10 4E 05 F1 | 	add	fp, #16
10504     A7 26 02 FB | 	rdlong	local01, fp
10508     0B 26 66 F0 | 	shl	local01, #11
1050c     0C 4E 85 F1 | 	sub	fp, #12
10510     A7 1A 02 FB | 	rdlong	arg05, fp
10514     0D 19 02 F6 | 	mov	arg04, arg05
10518     01 18 66 F0 | 	shl	arg04, #1
1051c     0C 27 02 F1 | 	add	local01, arg04
10520     10 4E 05 F1 | 	add	fp, #16
10524     A7 12 02 FB | 	rdlong	arg01, fp
10528     14 4E 85 F1 | 	sub	fp, #20
1052c     01 1A 66 F0 | 	shl	arg05, #1
10530     0D 13 02 F1 | 	add	arg01, arg05
10534     09 15 E2 FA | 	rdword	arg02, arg01
10538     13 13 02 F6 | 	mov	arg01, local01
1053c     44 1C B1 FD | 	call	#_psdpoke
10540     04 4E 05 F1 | 	add	fp, #4
10544     A7 26 02 FB | 	rdlong	local01, fp
10548     01 26 06 F1 | 	add	local01, #1
1054c     A7 26 62 FC | 	wrlong	local01, fp
10550     04 4E 85 F1 | 	sub	fp, #4
10554     02 00 00 FF 
10558     00 26 56 F2 | 	cmps	local01, ##1024 wc
1055c     A0 FF 9F CD |  if_b	jmp	#LR__1377
10560     5C 05 90 FD | 	jmp	#LR__1393
10564                 | LR__1378
10564                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
10564     04 4E 05 F1 | 	add	fp, #4
10568     A7 00 68 FC | 	wrlong	#0, fp
1056c     04 4E 85 F1 | 	sub	fp, #4
10570                 | LR__1379
10570     10 4E 05 F1 | 	add	fp, #16
10574     A7 26 02 FB | 	rdlong	local01, fp
10578     0B 26 66 F0 | 	shl	local01, #11
1057c     0C 4E 85 F1 | 	sub	fp, #12
10580     A7 1A 02 FB | 	rdlong	arg05, fp
10584     0D 19 02 F6 | 	mov	arg04, arg05
10588     01 18 66 F0 | 	shl	arg04, #1
1058c     0C 27 02 F1 | 	add	local01, arg04
10590     10 4E 05 F1 | 	add	fp, #16
10594     A7 12 02 FB | 	rdlong	arg01, fp
10598     14 4E 85 F1 | 	sub	fp, #20
1059c     01 1A 66 F0 | 	shl	arg05, #1
105a0     0D 13 02 F1 | 	add	arg01, arg05
105a4     1C 1D B1 FD | 	call	#_psdpeek
105a8     FD 14 02 F6 | 	mov	arg02, result1
105ac     13 13 02 F6 | 	mov	arg01, local01
105b0     D0 1B B1 FD | 	call	#_psdpoke
105b4     04 4E 05 F1 | 	add	fp, #4
105b8     A7 26 02 FB | 	rdlong	local01, fp
105bc     01 26 06 F1 | 	add	local01, #1
105c0     A7 26 62 FC | 	wrlong	local01, fp
105c4     04 4E 85 F1 | 	sub	fp, #4
105c8     02 00 00 FF 
105cc     00 26 56 F2 | 	cmps	local01, ##1024 wc
105d0     9C FF 9F CD |  if_b	jmp	#LR__1379
105d4                 | '     return 
105d4     E8 04 90 FD | 	jmp	#LR__1393
105d8                 | '   return
105d8                 | LR__1380
105d8                 | ' for i=0 to 15 : harm(i)=0: next i  
105d8     04 4E 05 F1 | 	add	fp, #4
105dc     A7 00 68 FC | 	wrlong	#0, fp
105e0     97 16 48 FB | 	callpa	#(@LR__1382-@LR__1381)>>2,fcache_load_ptr_
105e4                 | LR__1381
105e4     A7 26 02 FB | 	rdlong	local01, fp
105e8     02 26 66 F0 | 	shl	local01, #2
105ec     38 4E 05 F1 | 	add	fp, #56
105f0     A7 26 02 F1 | 	add	local01, fp
105f4     13 01 68 FC | 	wrlong	#0, local01
105f8     38 4E 85 F1 | 	sub	fp, #56
105fc     A7 26 02 FB | 	rdlong	local01, fp
10600     01 26 06 F1 | 	add	local01, #1
10604     A7 26 62 FC | 	wrlong	local01, fp
10608     10 26 56 F2 | 	cmps	local01, #16 wc
1060c     D4 FF 9F CD |  if_b	jmp	#LR__1381
10610                 | LR__1382
10610     04 4E 85 F1 | 	sub	fp, #4
10614                 | ' for i=numpar to 2 step -1 
10614     A7 26 02 FB | 	rdlong	local01, fp
10618     04 4E 05 F1 | 	add	fp, #4
1061c     A7 26 62 FC | 	wrlong	local01, fp
10620     04 4E 85 F1 | 	sub	fp, #4
10624                 | LR__1383
10624     58 C6 BF FD | 	call	#_pop
10628     2C 4E 05 F1 | 	add	fp, #44
1062c     A7 FA 61 FC | 	wrlong	result1, fp
10630     04 4E 05 F1 | 	add	fp, #4
10634     A7 FC 61 FC | 	wrlong	result2, fp
10638     04 4E 05 F1 | 	add	fp, #4
1063c     A7 FE 61 FC | 	wrlong	result3, fp
10640     30 4E 85 F1 | 	sub	fp, #48
10644     A7 26 02 FB | 	rdlong	local01, fp
10648     02 26 86 F1 | 	sub	local01, #2
1064c     02 26 66 F0 | 	shl	local01, #2
10650     38 4E 05 F1 | 	add	fp, #56
10654     A7 26 02 F1 | 	add	local01, fp
10658     10 4E 85 F1 | 	sub	fp, #16
1065c     A7 12 02 F6 | 	mov	arg01, fp
10660     2C 4E 85 F1 | 	sub	fp, #44
10664     B8 C8 BF FD | 	call	#_converttofloat
10668     13 FB 61 FC | 	wrlong	result1, local01
1066c     04 4E 05 F1 | 	add	fp, #4
10670     A7 26 02 FB | 	rdlong	local01, fp
10674     01 26 86 F1 | 	sub	local01, #1
10678     A7 26 62 FC | 	wrlong	local01, fp
1067c     04 4E 85 F1 | 	sub	fp, #4
10680     02 26 56 F2 | 	cmps	local01, #2 wc
10684     9C FF 9F 3D |  if_ae	jmp	#LR__1383
10688     F4 C5 BF FD | 	call	#_pop
1068c     FF 26 02 F6 | 	mov	local01, result3
10690     2C 4E 05 F1 | 	add	fp, #44
10694     A7 FA 61 FC | 	wrlong	result1, fp
10698     04 4E 05 F1 | 	add	fp, #4
1069c     A7 FC 61 FC | 	wrlong	result2, fp
106a0     04 4E 05 F1 | 	add	fp, #4
106a4     A7 26 62 FC | 	wrlong	local01, fp
106a8     08 4E 85 F1 | 	sub	fp, #8
106ac     A7 12 02 F6 | 	mov	arg01, fp
106b0     2C 4E 85 F1 | 	sub	fp, #44
106b4     AC C7 BF FD | 	call	#_converttoint
106b8     10 4E 05 F1 | 	add	fp, #16
106bc     A7 FA 61 FC | 	wrlong	result1, fp
106c0                 | ' t1=pop()
106c0                 | ' channel=converttoint(t1) : : if channel>31 then return
106c0     FD 26 02 F6 | 	mov	local01, result1
106c4     10 4E 85 F1 | 	sub	fp, #16
106c8     20 26 56 F2 | 	cmps	local01, #32 wc
106cc     F0 03 90 3D |  if_ae	jmp	#LR__1393
106d0     20 4E 05 F1 | 	add	fp, #32
106d4     A7 00 68 FC | 	wrlong	#0, fp
106d8                 | ' max=0
106d8                 | ' if harm(0)<0 then
106d8     1C 4E 05 F1 | 	add	fp, #28
106dc     A7 12 02 FB | 	rdlong	arg01, fp
106e0     3C 4E 85 F1 | 	sub	fp, #60
106e4     00 14 06 F6 | 	mov	arg02, #0
106e8     01 16 06 F6 | 	mov	arg03, #1
106ec     44 85 B1 FD | 	call	#__system___float_cmp
106f0     00 FA 55 F2 | 	cmps	result1, #0 wc
106f4     04 01 90 3D |  if_ae	jmp	#LR__1386
106f8     3C 4E 05 F1 | 	add	fp, #60
106fc     A7 FA 01 FB | 	rdlong	result1, fp
10700     1F FA 05 F4 | 	bitl	result1, #31
10704     24 4E 85 F1 | 	sub	fp, #36
10708     A7 FA 61 FC | 	wrlong	result1, fp
1070c     28 4E 05 F1 | 	add	fp, #40
10710     A7 FA 01 FB | 	rdlong	result1, fp
10714     1F FA 05 F4 | 	bitl	result1, #31
10718     24 4E 85 F1 | 	sub	fp, #36
1071c     A7 FA 61 FC | 	wrlong	result1, fp
10720     20 4E 05 F1 | 	add	fp, #32
10724     00 C0 9F FF 
10728     A7 00 68 FC | 	wrlong	##1065353216, fp
1072c     24 4E 85 F1 | 	sub	fp, #36
10730     A7 26 02 FB | 	rdlong	local01, fp
10734     28 4E 05 F1 | 	add	fp, #40
10738     A7 26 62 FC | 	wrlong	local01, fp
1073c     24 4E 85 F1 | 	sub	fp, #36
10740     A7 26 02 FB | 	rdlong	local01, fp
10744     28 4E 05 F1 | 	add	fp, #40
10748     A7 26 62 FC | 	wrlong	local01, fp
1074c                 | '   harm(0)=1
1074c                 | '   harm(1)=even
1074c                 | '   harm(2)=odd
1074c                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
1074c     40 4E 85 F1 | 	sub	fp, #64
10750     A7 06 68 FC | 	wrlong	#3, fp
10754                 | LR__1384
10754     A7 1A 02 FB | 	rdlong	arg05, fp
10758     0D 29 02 F6 | 	mov	local02, arg05
1075c     02 28 66 F0 | 	shl	local02, #2
10760     38 4E 05 F1 | 	add	fp, #56
10764     A7 28 02 F1 | 	add	local02, fp
10768     02 1A 86 F1 | 	sub	arg05, #2
1076c     02 1A 66 F0 | 	shl	arg05, #2
10770     A7 1A 02 F1 | 	add	arg05, fp
10774     0D 13 02 FB | 	rdlong	arg01, arg05
10778     24 4E 85 F1 | 	sub	fp, #36
1077c     A7 14 02 FB | 	rdlong	arg02, fp
10780     18 4E 85 F1 | 	sub	fp, #24
10784     78 80 B1 FD | 	call	#__system___float_mul
10788     14 FB 61 FC | 	wrlong	result1, local02
1078c     04 4E 05 F1 | 	add	fp, #4
10790     A7 2A 02 FB | 	rdlong	local03, fp
10794     02 2A 06 F1 | 	add	local03, #2
10798     A7 2A 62 FC | 	wrlong	local03, fp
1079c     10 2A 56 F2 | 	cmps	local03, #16 wc
107a0     B0 FF 9F CD |  if_b	jmp	#LR__1384
107a4                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
107a4     A7 08 68 FC | 	wrlong	#4, fp
107a8                 | LR__1385
107a8     A7 2A 02 FB | 	rdlong	local03, fp
107ac     15 29 02 F6 | 	mov	local02, local03
107b0     02 28 66 F0 | 	shl	local02, #2
107b4     38 4E 05 F1 | 	add	fp, #56
107b8     A7 28 02 F1 | 	add	local02, fp
107bc     02 2A 86 F1 | 	sub	local03, #2
107c0     02 2A 66 F0 | 	shl	local03, #2
107c4     A7 2A 02 F1 | 	add	local03, fp
107c8     15 13 02 FB | 	rdlong	arg01, local03
107cc     20 4E 85 F1 | 	sub	fp, #32
107d0     A7 14 02 FB | 	rdlong	arg02, fp
107d4     1C 4E 85 F1 | 	sub	fp, #28
107d8     24 80 B1 FD | 	call	#__system___float_mul
107dc     14 FB 61 FC | 	wrlong	result1, local02
107e0     04 4E 05 F1 | 	add	fp, #4
107e4     A7 2A 02 FB | 	rdlong	local03, fp
107e8     02 2A 06 F1 | 	add	local03, #2
107ec     A7 2A 62 FC | 	wrlong	local03, fp
107f0     0F 2A 56 F2 | 	cmps	local03, #15 wc
107f4     B0 FF 9F CD |  if_b	jmp	#LR__1385
107f8     04 4E 85 F1 | 	sub	fp, #4
107fc                 | LR__1386
107fc                 | ' if harm(0)>=0 then ' synthesize with harmonics
107fc     3C 4E 05 F1 | 	add	fp, #60
10800     A7 12 02 FB | 	rdlong	arg01, fp
10804     3C 4E 85 F1 | 	sub	fp, #60
10808     00 14 06 F6 | 	mov	arg02, #0
1080c     01 16 66 F6 | 	neg	arg03, #1
10810     20 84 B1 FD | 	call	#__system___float_cmp
10814     00 FA 55 F2 | 	cmps	result1, #0 wc
10818     A4 02 90 CD |  if_b	jmp	#LR__1392
1081c                 | '   for i=0 to 1023
1081c     04 4E 05 F1 | 	add	fp, #4
10820     A7 00 68 FC | 	wrlong	#0, fp
10824     04 4E 85 F1 | 	sub	fp, #4
10828                 | LR__1387
10828     24 4E 05 F1 | 	add	fp, #36
1082c     A7 00 68 FC | 	wrlong	#0, fp
10830                 | '     spl=0
10830                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
10830     1C 4E 85 F1 | 	sub	fp, #28
10834     A7 00 68 FC | 	wrlong	#0, fp
10838                 | LR__1388
10838     A7 28 02 FB | 	rdlong	local02, fp
1083c     02 28 66 F0 | 	shl	local02, #2
10840     34 4E 05 F1 | 	add	fp, #52
10844     A7 28 02 F1 | 	add	local02, fp
10848     14 2B 02 FB | 	rdlong	local03, local02
1084c     87 E4 1D FF 
10850     DB 29 06 F6 | 	mov	local02, ##1003032539
10854     38 4E 85 F1 | 	sub	fp, #56
10858     A7 12 02 FB | 	rdlong	arg01, fp
1085c     04 4E 85 F1 | 	sub	fp, #4
10860     09 13 52 F6 | 	abs	arg01, arg01 wc
10864     1F 2C C6 C9 |  if_b	decod	local04, #31
10868     00 2C 06 36 |  if_ae	mov	local04, #0
1086c     8C 7B B1 FD | 	call	#__system___float_fromuns
10870     16 FB 61 F5 | 	xor	result1, local04
10874     FD 14 02 F6 | 	mov	arg02, result1
10878     14 13 02 F6 | 	mov	arg01, local02
1087c     80 7F B1 FD | 	call	#__system___float_mul
10880     FD 28 02 F6 | 	mov	local02, result1
10884     08 4E 05 F1 | 	add	fp, #8
10888     A7 12 02 FB | 	rdlong	arg01, fp
1088c     08 4E 85 F1 | 	sub	fp, #8
10890     01 12 06 F1 | 	add	arg01, #1
10894     09 13 52 F6 | 	abs	arg01, arg01 wc
10898     1F 2C C6 C9 |  if_b	decod	local04, #31
1089c     00 2C 06 36 |  if_ae	mov	local04, #0
108a0     58 7B B1 FD | 	call	#__system___float_fromuns
108a4     16 FB 61 F5 | 	xor	result1, local04
108a8     FD 14 02 F6 | 	mov	arg02, result1
108ac     14 13 02 F6 | 	mov	arg01, local02
108b0     4C 7F B1 FD | 	call	#__system___float_mul
108b4     FD 12 02 F6 | 	mov	arg01, result1
108b8     A4 88 B1 FD | 	call	#__system____builtin_sinf
108bc     FD 14 02 F6 | 	mov	arg02, result1
108c0     15 13 02 F6 | 	mov	arg01, local03
108c4     38 7F B1 FD | 	call	#__system___float_mul
108c8     FD 14 02 F6 | 	mov	arg02, result1
108cc     24 4E 05 F1 | 	add	fp, #36
108d0     A7 12 02 FB | 	rdlong	arg01, fp
108d4     24 4E 85 F1 | 	sub	fp, #36
108d8     54 7B B1 FD | 	call	#__system___float_add
108dc     24 4E 05 F1 | 	add	fp, #36
108e0     A7 FA 61 FC | 	wrlong	result1, fp
108e4     1C 4E 85 F1 | 	sub	fp, #28
108e8     A7 16 02 FB | 	rdlong	arg03, fp
108ec     01 16 06 F1 | 	add	arg03, #1
108f0     A7 16 62 FC | 	wrlong	arg03, fp
108f4     10 16 56 F2 | 	cmps	arg03, #16 wc
108f8     3C FF 9F CD |  if_b	jmp	#LR__1388
108fc                 | '     if abs(spl)>max then max=abs(spl)  
108fc     1C 4E 05 F1 | 	add	fp, #28
10900     A7 12 02 FB | 	rdlong	arg01, fp
10904     1F 12 06 F4 | 	bitl	arg01, #31
10908     04 4E 85 F1 | 	sub	fp, #4
1090c     A7 14 02 FB | 	rdlong	arg02, fp
10910     20 4E 85 F1 | 	sub	fp, #32
10914     01 16 66 F6 | 	neg	arg03, #1
10918     18 83 B1 FD | 	call	#__system___float_cmp
1091c     01 FA 55 F2 | 	cmps	result1, #1 wc
10920     18 00 90 CD |  if_b	jmp	#LR__1389
10924     24 4E 05 F1 | 	add	fp, #36
10928     A7 FA 01 FB | 	rdlong	result1, fp
1092c     1F FA 05 F4 | 	bitl	result1, #31
10930     04 4E 85 F1 | 	sub	fp, #4
10934     A7 FA 61 FC | 	wrlong	result1, fp
10938     20 4E 85 F1 | 	sub	fp, #32
1093c                 | LR__1389
1093c     04 4E 05 F1 | 	add	fp, #4
10940     A7 2A 02 FB | 	rdlong	local03, fp
10944     01 2A 06 F1 | 	add	local03, #1
10948     A7 2A 62 FC | 	wrlong	local03, fp
1094c     04 4E 85 F1 | 	sub	fp, #4
10950     02 00 00 FF 
10954     00 2A 56 F2 | 	cmps	local03, ##1024 wc
10958     CC FE 9F CD |  if_b	jmp	#LR__1387
1095c                 | '   for i=0 to 1023
1095c     04 4E 05 F1 | 	add	fp, #4
10960     A7 00 68 FC | 	wrlong	#0, fp
10964     04 4E 85 F1 | 	sub	fp, #4
10968                 | LR__1390
10968     24 4E 05 F1 | 	add	fp, #36
1096c     A7 00 68 FC | 	wrlong	#0, fp
10970                 | '     spl=0
10970                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
10970     1C 4E 85 F1 | 	sub	fp, #28
10974     A7 00 68 FC | 	wrlong	#0, fp
10978                 | LR__1391
10978     A7 2A 02 FB | 	rdlong	local03, fp
1097c     02 2A 66 F0 | 	shl	local03, #2
10980     34 4E 05 F1 | 	add	fp, #52
10984     A7 2A 02 F1 | 	add	local03, fp
10988     15 2B 02 FB | 	rdlong	local03, local03
1098c     1C 4E 85 F1 | 	sub	fp, #28
10990     A7 14 02 FB | 	rdlong	arg02, fp
10994     20 4E 85 F1 | 	sub	fp, #32
10998     58 7F 23 FF 
1099c     00 12 06 F6 | 	mov	arg01, ##1191096320
109a0     60 80 B1 FD | 	call	#__system___float_div
109a4     FD 14 02 F6 | 	mov	arg02, result1
109a8     15 13 02 F6 | 	mov	arg01, local03
109ac     50 7E B1 FD | 	call	#__system___float_mul
109b0     FD 2A 02 F6 | 	mov	local03, result1
109b4     87 E4 1D FF 
109b8     DB 29 06 F6 | 	mov	local02, ##1003032539
109bc     04 4E 05 F1 | 	add	fp, #4
109c0     A7 12 02 FB | 	rdlong	arg01, fp
109c4     04 4E 85 F1 | 	sub	fp, #4
109c8     09 13 52 F6 | 	abs	arg01, arg01 wc
109cc     1F 2C C6 C9 |  if_b	decod	local04, #31
109d0     00 2C 06 36 |  if_ae	mov	local04, #0
109d4     24 7A B1 FD | 	call	#__system___float_fromuns
109d8     16 FB 61 F5 | 	xor	result1, local04
109dc     FD 14 02 F6 | 	mov	arg02, result1
109e0     14 13 02 F6 | 	mov	arg01, local02
109e4     18 7E B1 FD | 	call	#__system___float_mul
109e8     FD 28 02 F6 | 	mov	local02, result1
109ec     08 4E 05 F1 | 	add	fp, #8
109f0     A7 12 02 FB | 	rdlong	arg01, fp
109f4     08 4E 85 F1 | 	sub	fp, #8
109f8     01 12 06 F1 | 	add	arg01, #1
109fc     09 13 52 F6 | 	abs	arg01, arg01 wc
10a00     1F 2C C6 C9 |  if_b	decod	local04, #31
10a04     00 2C 06 36 |  if_ae	mov	local04, #0
10a08     F0 79 B1 FD | 	call	#__system___float_fromuns
10a0c     16 FB 61 F5 | 	xor	result1, local04
10a10     FD 14 02 F6 | 	mov	arg02, result1
10a14     14 13 02 F6 | 	mov	arg01, local02
10a18     E4 7D B1 FD | 	call	#__system___float_mul
10a1c     FD 12 02 F6 | 	mov	arg01, result1
10a20     3C 87 B1 FD | 	call	#__system____builtin_sinf
10a24     FD 14 02 F6 | 	mov	arg02, result1
10a28     15 13 02 F6 | 	mov	arg01, local03
10a2c     D0 7D B1 FD | 	call	#__system___float_mul
10a30     FD 14 02 F6 | 	mov	arg02, result1
10a34     24 4E 05 F1 | 	add	fp, #36
10a38     A7 12 02 FB | 	rdlong	arg01, fp
10a3c     24 4E 85 F1 | 	sub	fp, #36
10a40     EC 79 B1 FD | 	call	#__system___float_add
10a44     24 4E 05 F1 | 	add	fp, #36
10a48     A7 FA 61 FC | 	wrlong	result1, fp
10a4c     1C 4E 85 F1 | 	sub	fp, #28
10a50     A7 2A 02 FB | 	rdlong	local03, fp
10a54     01 2A 06 F1 | 	add	local03, #1
10a58     A7 2A 62 FC | 	wrlong	local03, fp
10a5c     10 2A 56 F2 | 	cmps	local03, #16 wc
10a60     14 FF 9F CD |  if_b	jmp	#LR__1391
10a64     08 4E 05 F1 | 	add	fp, #8
10a68     A7 2A 02 FB | 	rdlong	local03, fp
10a6c     0B 2A 66 F0 | 	shl	local03, #11
10a70     0C 4E 85 F1 | 	sub	fp, #12
10a74     A7 28 02 FB | 	rdlong	local02, fp
10a78     01 28 66 F0 | 	shl	local02, #1
10a7c     14 2B 02 F1 | 	add	local03, local02
10a80     20 4E 05 F1 | 	add	fp, #32
10a84     A7 12 02 FB | 	rdlong	arg01, fp
10a88     24 4E 85 F1 | 	sub	fp, #36
10a8c     01 14 06 F6 | 	mov	arg02, #1
10a90     34 82 B1 FD | 	call	#__system___float_tointeger
10a94     FD 14 02 F6 | 	mov	arg02, result1
10a98     15 13 02 F6 | 	mov	arg01, local03
10a9c     E4 16 B1 FD | 	call	#_psdpoke
10aa0     04 4E 05 F1 | 	add	fp, #4
10aa4     A7 2A 02 FB | 	rdlong	local03, fp
10aa8     01 2A 06 F1 | 	add	local03, #1
10aac     A7 2A 62 FC | 	wrlong	local03, fp
10ab0     04 4E 85 F1 | 	sub	fp, #4
10ab4     02 00 00 FF 
10ab8     00 2A 56 F2 | 	cmps	local03, ##1024 wc
10abc     A8 FE 9F CD |  if_b	jmp	#LR__1390
10ac0                 | LR__1392
10ac0                 | LR__1393
10ac0     A7 F0 03 F6 | 	mov	ptra, fp
10ac4     B2 00 A0 FD | 	call	#popregs_
10ac8                 | _do_defsnd_ret
10ac8     2D 00 64 FD | 	ret
10acc                 | 
10acc                 | ' 
10acc                 | ' '-------------------- defsprite
10acc                 | ' 
10acc                 | ' sub do_defsprite
10acc                 | _do_defsprite
10acc     07 4A 05 F6 | 	mov	COUNT_, #7
10ad0     A8 00 A0 FD | 	call	#pushregs_
10ad4     60 F0 07 F1 | 	add	ptra, #96
10ad8     A4 C1 BF FD | 	call	#_pop
10adc     FD 16 02 F6 | 	mov	arg03, result1
10ae0     FE 14 02 F6 | 	mov	arg02, result2
10ae4     FF 12 02 F6 | 	mov	arg01, result3
10ae8     30 4E 05 F1 | 	add	fp, #48
10aec     A7 16 62 FC | 	wrlong	arg03, fp
10af0     04 4E 05 F1 | 	add	fp, #4
10af4     A7 14 62 FC | 	wrlong	arg02, fp
10af8     04 4E 05 F1 | 	add	fp, #4
10afc     A7 12 62 FC | 	wrlong	arg01, fp
10b00     38 4E 85 F1 | 	sub	fp, #56
10b04     78 C1 BF FD | 	call	#_pop
10b08     FD 16 02 F6 | 	mov	arg03, result1
10b0c     FE 14 02 F6 | 	mov	arg02, result2
10b10     FF 12 02 F6 | 	mov	arg01, result3
10b14     24 4E 05 F1 | 	add	fp, #36
10b18     A7 16 62 FC | 	wrlong	arg03, fp
10b1c     04 4E 05 F1 | 	add	fp, #4
10b20     A7 14 62 FC | 	wrlong	arg02, fp
10b24     04 4E 05 F1 | 	add	fp, #4
10b28     A7 12 62 FC | 	wrlong	arg01, fp
10b2c     2C 4E 85 F1 | 	sub	fp, #44
10b30     4C C1 BF FD | 	call	#_pop
10b34     FD 16 02 F6 | 	mov	arg03, result1
10b38     FE 14 02 F6 | 	mov	arg02, result2
10b3c     FF 12 02 F6 | 	mov	arg01, result3
10b40     18 4E 05 F1 | 	add	fp, #24
10b44     A7 16 62 FC | 	wrlong	arg03, fp
10b48     04 4E 05 F1 | 	add	fp, #4
10b4c     A7 14 62 FC | 	wrlong	arg02, fp
10b50     04 4E 05 F1 | 	add	fp, #4
10b54     A7 12 62 FC | 	wrlong	arg01, fp
10b58     20 4E 85 F1 | 	sub	fp, #32
10b5c     20 C1 BF FD | 	call	#_pop
10b60     FD 16 02 F6 | 	mov	arg03, result1
10b64     FE 14 02 F6 | 	mov	arg02, result2
10b68     FF 12 02 F6 | 	mov	arg01, result3
10b6c     0C 4E 05 F1 | 	add	fp, #12
10b70     A7 16 62 FC | 	wrlong	arg03, fp
10b74     04 4E 05 F1 | 	add	fp, #4
10b78     A7 14 62 FC | 	wrlong	arg02, fp
10b7c     04 4E 05 F1 | 	add	fp, #4
10b80     A7 12 62 FC | 	wrlong	arg01, fp
10b84     14 4E 85 F1 | 	sub	fp, #20
10b88     F4 C0 BF FD | 	call	#_pop
10b8c     FF 16 02 F6 | 	mov	arg03, result3
10b90     A7 FA 61 FC | 	wrlong	result1, fp
10b94     04 4E 05 F1 | 	add	fp, #4
10b98     A7 FC 61 FC | 	wrlong	result2, fp
10b9c     04 4E 05 F1 | 	add	fp, #4
10ba0     A7 16 62 FC | 	wrlong	arg03, fp
10ba4     08 4E 85 F1 | 	sub	fp, #8
10ba8     A7 12 02 F6 | 	mov	arg01, fp
10bac     B4 C2 BF FD | 	call	#_converttoint
10bb0     3C 4E 05 F1 | 	add	fp, #60
10bb4     A7 FA 61 FC | 	wrlong	result1, fp
10bb8     30 4E 85 F1 | 	sub	fp, #48
10bbc     A7 12 02 F6 | 	mov	arg01, fp
10bc0     0C 4E 85 F1 | 	sub	fp, #12
10bc4     9C C2 BF FD | 	call	#_converttoint
10bc8     40 4E 05 F1 | 	add	fp, #64
10bcc     A7 FA 61 FC | 	wrlong	result1, fp
10bd0     28 4E 85 F1 | 	sub	fp, #40
10bd4     A7 12 02 F6 | 	mov	arg01, fp
10bd8     18 4E 85 F1 | 	sub	fp, #24
10bdc     84 C2 BF FD | 	call	#_converttoint
10be0     44 4E 05 F1 | 	add	fp, #68
10be4     A7 FA 61 FC | 	wrlong	result1, fp
10be8     20 4E 85 F1 | 	sub	fp, #32
10bec     A7 12 02 F6 | 	mov	arg01, fp
10bf0     24 4E 85 F1 | 	sub	fp, #36
10bf4     6C C2 BF FD | 	call	#_converttoint
10bf8     48 4E 05 F1 | 	add	fp, #72
10bfc     A7 FA 61 FC | 	wrlong	result1, fp
10c00     18 4E 85 F1 | 	sub	fp, #24
10c04     A7 12 02 F6 | 	mov	arg01, fp
10c08     30 4E 85 F1 | 	sub	fp, #48
10c0c     54 C2 BF FD | 	call	#_converttoint
10c10     4C 4E 05 F1 | 	add	fp, #76
10c14     A7 FA 61 FC | 	wrlong	result1, fp
10c18                 | ' 
10c18                 | ' t5=pop()
10c18                 | ' t4=pop()
10c18                 | ' t3=pop()
10c18                 | ' t2=pop()
10c18                 | ' t1=pop()
10c18                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
10c18                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
10c18     10 4E 85 F1 | 	sub	fp, #16
10c1c     A7 16 02 FB | 	rdlong	arg03, fp
10c20     3C 4E 85 F1 | 	sub	fp, #60
10c24     02 16 66 F0 | 	shl	arg03, #2
10c28     52 00 00 FF 
10c2c     00 E4 05 F1 | 	add	objptr, ##41984
10c30     F2 16 02 F1 | 	add	arg03, objptr
10c34     0B 17 0A FB | 	rdlong	arg03, arg03 wz
10c38     52 00 00 FF 
10c3c     00 E4 85 F1 | 	sub	objptr, ##41984
10c40     2C 00 90 AD |  if_e	jmp	#LR__1400
10c44     3C 4E 05 F1 | 	add	fp, #60
10c48     A7 16 02 FB | 	rdlong	arg03, fp
10c4c     3C 4E 85 F1 | 	sub	fp, #60
10c50     02 16 66 F0 | 	shl	arg03, #2
10c54     52 00 00 FF 
10c58     00 E4 05 F1 | 	add	objptr, ##41984
10c5c     F2 16 02 F1 | 	add	arg03, objptr
10c60     0B 13 02 FB | 	rdlong	arg01, arg03
10c64     52 00 00 FF 
10c68     00 E4 85 F1 | 	sub	objptr, ##41984
10c6c     F4 8F B1 FD | 	call	#__system___gc_free
10c70                 | LR__1400
10c70     3C 4E 05 F1 | 	add	fp, #60
10c74     A7 26 02 FB | 	rdlong	local01, fp
10c78     0C 4E 05 F1 | 	add	fp, #12
10c7c     A7 16 02 FB | 	rdlong	arg03, fp
10c80     04 4E 05 F1 | 	add	fp, #4
10c84     A7 14 02 FB | 	rdlong	arg02, fp
10c88     0A 17 02 FD | 	qmul	arg03, arg02
10c8c     02 26 66 F0 | 	shl	local01, #2
10c90     52 00 00 FF 
10c94     00 E4 05 F1 | 	add	objptr, ##41984
10c98     F2 26 02 F1 | 	add	local01, objptr
10c9c     4C 4E 85 F1 | 	sub	fp, #76
10ca0     52 00 00 FF 
10ca4     00 E4 85 F1 | 	sub	objptr, ##41984
10ca8     18 12 62 FD | 	getqx	arg01
10cac     78 8E B1 FD | 	call	#__system___gc_alloc_managed
10cb0     13 FB 61 FC | 	wrlong	result1, local01
10cb4                 | ' for y=a3 to a3+a5-1
10cb4     44 4E 05 F1 | 	add	fp, #68
10cb8     A7 28 02 FB | 	rdlong	local02, fp
10cbc     0C 4E 05 F1 | 	add	fp, #12
10cc0     A7 28 62 FC | 	wrlong	local02, fp
10cc4     0C 4E 85 F1 | 	sub	fp, #12
10cc8     A7 2A 02 FB | 	rdlong	local03, fp
10ccc     08 4E 05 F1 | 	add	fp, #8
10cd0     A7 2C 02 FB | 	rdlong	local04, fp
10cd4     4C 4E 85 F1 | 	sub	fp, #76
10cd8     16 2B 02 F1 | 	add	local03, local04
10cdc                 | LR__1401
10cdc     50 4E 05 F1 | 	add	fp, #80
10ce0     A7 28 02 FB | 	rdlong	local02, fp
10ce4     50 4E 85 F1 | 	sub	fp, #80
10ce8     15 29 52 F2 | 	cmps	local02, local03 wc
10cec     F4 00 90 3D |  if_ae	jmp	#LR__1404
10cf0                 | '   for x=a2 to a4+a2-1
10cf0     40 4E 05 F1 | 	add	fp, #64
10cf4     A7 26 02 FB | 	rdlong	local01, fp
10cf8     14 4E 05 F1 | 	add	fp, #20
10cfc     A7 26 62 FC | 	wrlong	local01, fp
10d00     0C 4E 85 F1 | 	sub	fp, #12
10d04     A7 2E 02 FB | 	rdlong	local05, fp
10d08     08 4E 85 F1 | 	sub	fp, #8
10d0c     A7 30 02 FB | 	rdlong	local06, fp
10d10     40 4E 85 F1 | 	sub	fp, #64
10d14     18 2F 02 F1 | 	add	local05, local06
10d18                 | LR__1402
10d18     54 4E 05 F1 | 	add	fp, #84
10d1c     A7 26 02 FB | 	rdlong	local01, fp
10d20     54 4E 85 F1 | 	sub	fp, #84
10d24     17 27 52 F2 | 	cmps	local01, local05 wc
10d28     A0 00 90 3D |  if_ae	jmp	#LR__1403
10d2c     3C 4E 05 F1 | 	add	fp, #60
10d30     A7 30 02 FB | 	rdlong	local06, fp
10d34     18 4E 05 F1 | 	add	fp, #24
10d38     A7 2C 02 FB | 	rdlong	local04, fp
10d3c     14 4E 85 F1 | 	sub	fp, #20
10d40     A7 28 02 FB | 	rdlong	local02, fp
10d44     10 4E 05 F1 | 	add	fp, #16
10d48     A7 26 02 FB | 	rdlong	local01, fp
10d4c     13 17 02 F6 | 	mov	arg03, local01
10d50     0C 4E 85 F1 | 	sub	fp, #12
10d54     A7 14 02 FB | 	rdlong	arg02, fp
10d58     0A 17 82 F1 | 	sub	arg03, arg02
10d5c     04 4E 05 F1 | 	add	fp, #4
10d60     A7 14 02 FB | 	rdlong	arg02, fp
10d64     0A 17 02 FD | 	qmul	arg03, arg02
10d68     02 30 66 F0 | 	shl	local06, #2
10d6c     52 00 00 FF 
10d70     00 E4 05 F1 | 	add	objptr, ##41984
10d74     F2 30 02 F1 | 	add	local06, objptr
10d78     18 31 02 FB | 	rdlong	local06, local06
10d7c     16 33 02 F6 | 	mov	local07, local04
10d80     14 33 82 F1 | 	sub	local07, local02
10d84     52 00 00 FF 
10d88     00 E4 85 F1 | 	sub	objptr, ##41984
10d8c     F2 12 02 FB | 	rdlong	arg01, objptr
10d90     16 13 02 F1 | 	add	arg01, local04
10d94     48 4E 85 F1 | 	sub	fp, #72
10d98     0A 26 66 F0 | 	shl	local01, #10
10d9c     13 13 02 F1 | 	add	arg01, local01
10da0     18 2C 62 FD | 	getqx	local04
10da4     16 33 02 F1 | 	add	local07, local04
10da8     18 33 02 F1 | 	add	local07, local06
10dac     64 14 B1 FD | 	call	#_pspeek
10db0     19 FB 41 FC | 	wrbyte	result1, local07
10db4     54 4E 05 F1 | 	add	fp, #84
10db8     A7 32 02 FB | 	rdlong	local07, fp
10dbc     01 32 06 F1 | 	add	local07, #1
10dc0     A7 32 62 FC | 	wrlong	local07, fp
10dc4     54 4E 85 F1 | 	sub	fp, #84
10dc8     4C FF 9F FD | 	jmp	#LR__1402
10dcc                 | LR__1403
10dcc     50 4E 05 F1 | 	add	fp, #80
10dd0     A7 32 02 FB | 	rdlong	local07, fp
10dd4     01 32 06 F1 | 	add	local07, #1
10dd8     A7 32 62 FC | 	wrlong	local07, fp
10ddc     50 4E 85 F1 | 	sub	fp, #80
10de0     F8 FE 9F FD | 	jmp	#LR__1401
10de4                 | LR__1404
10de4     3C 4E 05 F1 | 	add	fp, #60
10de8     A7 32 02 FB | 	rdlong	local07, fp
10dec     19 13 02 F6 | 	mov	arg01, local07
10df0     3C 4E 85 F1 | 	sub	fp, #60
10df4     02 32 66 F0 | 	shl	local07, #2
10df8     52 00 00 FF 
10dfc     00 E4 05 F1 | 	add	objptr, ##41984
10e00     F2 32 02 F1 | 	add	local07, objptr
10e04     19 15 02 FB | 	rdlong	arg02, local07
10e08     52 00 00 FF 
10e0c     00 E4 85 F1 | 	sub	objptr, ##41984
10e10     40 21 B1 FD | 	call	#_hg010b_spin2_setspriteptr
10e14     3C 4E 05 F1 | 	add	fp, #60
10e18     A7 12 02 FB | 	rdlong	arg01, fp
10e1c     0C 4E 05 F1 | 	add	fp, #12
10e20     A7 14 02 FB | 	rdlong	arg02, fp
10e24     04 4E 05 F1 | 	add	fp, #4
10e28     A7 16 02 FB | 	rdlong	arg03, fp
10e2c     4C 4E 85 F1 | 	sub	fp, #76
10e30     B0 21 B1 FD | 	call	#_hg010b_spin2_setspritesize
10e34     A7 F0 03 F6 | 	mov	ptra, fp
10e38     B2 00 A0 FD | 	call	#popregs_
10e3c                 | _do_defsprite_ret
10e3c     2D 00 64 FD | 	ret
10e40                 | 
10e40                 | ' 
10e40                 | ' '-------------------- deg
10e40                 | ' 
10e40                 | ' sub do_deg
10e40                 | _do_deg
10e40     52 00 00 FF 
10e44     54 E4 05 F1 | 	add	objptr, ##42068
10e48     7D 47 9E FF 
10e4c     F2 6A 68 FC | 	wrlong	##1016003125, objptr
10e50     04 E4 05 F1 | 	add	objptr, #4
10e54     97 32 A1 FF 
10e58     F2 C2 69 FC | 	wrlong	##1113927393, objptr
10e5c     52 00 00 FF 
10e60     58 E4 85 F1 | 	sub	objptr, ##42072
10e64                 | _do_deg_ret
10e64     2D 00 64 FD | 	ret
10e68                 | 
10e68                 | ' 
10e68                 | ' '-------------------- delete
10e68                 | ' 
10e68                 | ' sub do_delete
10e68                 | _do_delete
10e68     05 4A 05 F6 | 	mov	COUNT_, #5
10e6c     A8 00 A0 FD | 	call	#pushregs_
10e70     0C BE BF FD | 	call	#_pop
10e74     FE 18 02 F6 | 	mov	arg04, result2
10e78     FF 16 02 F6 | 	mov	arg03, result3
10e7c     FD 26 02 F6 | 	mov	local01, result1
10e80     0C 29 02 F6 | 	mov	local02, arg04
10e84     0B 2B 02 F6 | 	mov	local03, arg03
10e88                 | ' 
10e88                 | ' t1=pop()
10e88                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10e88     2B 2A 0E F2 | 	cmp	local03, #43 wz
10e8c     10 00 90 5D |  if_ne	jmp	#LR__1410
10e90     13 13 02 F6 | 	mov	arg01, local01
10e94     60 BF BF FD | 	call	#_convertstring
10e98     FD 26 02 F6 | 	mov	local01, result1
10e9c     1F 2A 06 F6 | 	mov	local03, #31
10ea0                 | LR__1410
10ea0                 | ' if t1.result_type<>result_string then printerror(15): return
10ea0     1F 2A 0E F2 | 	cmp	local03, #31 wz
10ea4     10 00 90 AD |  if_e	jmp	#LR__1411
10ea8     0F 12 06 F6 | 	mov	arg01, #15
10eac     00 14 06 F6 | 	mov	arg02, #0
10eb0     E8 10 B1 FD | 	call	#_printerror
10eb4     E0 00 90 FD | 	jmp	#LR__1415
10eb8                 | LR__1411
10eb8                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
10eb8     4A 00 00 FF 
10ebc     94 E4 05 F1 | 	add	objptr, ##38036
10ec0     F2 12 02 FB | 	rdlong	arg01, objptr
10ec4     4A 00 00 FF 
10ec8     94 E4 85 F1 | 	sub	objptr, ##38036
10ecc     AE 01 00 FF 
10ed0     00 15 06 F6 | 	mov	arg02, ##@LR__5853
10ed4     D8 4A B1 FD | 	call	#__system___string_cmp
10ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
10edc     34 00 90 AD |  if_e	jmp	#LR__1412
10ee0     4A 00 00 FF 
10ee4     94 E4 05 F1 | 	add	objptr, ##38036
10ee8     F2 12 02 FB | 	rdlong	arg01, objptr
10eec     4A 00 00 FF 
10ef0     94 E4 85 F1 | 	sub	objptr, ##38036
10ef4     AE 01 00 FF 
10ef8     02 15 06 F6 | 	mov	arg02, ##@LR__5854
10efc     E4 4A B1 FD | 	call	#__system___string_concat
10f00     FD 12 02 F6 | 	mov	arg01, result1
10f04     13 15 02 F6 | 	mov	arg02, local01
10f08     D8 4A B1 FD | 	call	#__system___string_concat
10f0c     FD 2C 02 F6 | 	mov	local04, result1
10f10     14 00 90 FD | 	jmp	#LR__1413
10f14                 | LR__1412
10f14     AE 01 00 FF 
10f18     04 13 06 F6 | 	mov	arg01, ##@LR__5855
10f1c     13 15 02 F6 | 	mov	arg02, local01
10f20     C0 4A B1 FD | 	call	#__system___string_concat
10f24     FD 2C 02 F6 | 	mov	local04, result1
10f28                 | LR__1413
10f28     16 13 02 F6 | 	mov	arg01, local04
10f2c     24 72 B1 FD | 	call	#__system___remove
10f30     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10f34     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
10f38     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10f3c     FD 2E 0A F6 | 	mov	local05, result1 wz
10f40                 | ' kill filename$
10f40                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
10f40     54 00 90 AD |  if_e	jmp	#LR__1414
10f44     00 12 06 F6 | 	mov	arg01, #0
10f48     64 A7 B1 FD | 	call	#__system___getiolock_0599
10f4c     FD 12 02 F6 | 	mov	arg01, result1
10f50     34 4A B1 FD | 	call	#__system___lockmem
10f54     AE 01 00 FF 
10f58     06 15 06 F6 | 	mov	arg02, ##@LR__5856
10f5c     00 12 06 F6 | 	mov	arg01, #0
10f60     00 16 06 F6 | 	mov	arg03, #0
10f64     14 57 B1 FD | 	call	#__system___basic_print_string
10f68     00 12 06 F6 | 	mov	arg01, #0
10f6c     17 15 02 F6 | 	mov	arg02, local05
10f70     00 16 06 F6 | 	mov	arg03, #0
10f74     0A 18 06 F6 | 	mov	arg04, #10
10f78     44 57 B1 FD | 	call	#__system___basic_print_integer
10f7c     00 12 06 F6 | 	mov	arg01, #0
10f80     0A 14 06 F6 | 	mov	arg02, #10
10f84     00 16 06 F6 | 	mov	arg03, #0
10f88     98 56 B1 FD | 	call	#__system___basic_print_char
10f8c     00 12 06 F6 | 	mov	arg01, #0
10f90     1C A7 B1 FD | 	call	#__system___getiolock_0599
10f94     FD 00 68 FC | 	wrlong	#0, result1
10f98                 | LR__1414
10f98                 | LR__1415
10f98     A7 F0 03 F6 | 	mov	ptra, fp
10f9c     B2 00 A0 FD | 	call	#popregs_
10fa0                 | _do_delete_ret
10fa0     2D 00 64 FD | 	ret
10fa4                 | 
10fa4                 | ' 
10fa4                 | ' '-------------------- dir
10fa4                 | ' 
10fa4                 | ' sub do_dir
10fa4                 | _do_dir
10fa4     13 4A 05 F6 | 	mov	COUNT_, #19
10fa8     A8 00 A0 FD | 	call	#pushregs_
10fac     01 00 00 FF 
10fb0     38 F0 07 F1 | 	add	ptra, ##568
10fb4                 | ' 
10fb4                 | ' print "Current directory: "; currentdir$ 
10fb4     00 12 06 F6 | 	mov	arg01, #0
10fb8     F4 A6 B1 FD | 	call	#__system___getiolock_0599
10fbc     FD 12 02 F6 | 	mov	arg01, result1
10fc0     C4 49 B1 FD | 	call	#__system___lockmem
10fc4     AE 01 00 FF 
10fc8     3E 15 06 F6 | 	mov	arg02, ##@LR__5857
10fcc     00 12 06 F6 | 	mov	arg01, #0
10fd0     00 16 06 F6 | 	mov	arg03, #0
10fd4     A4 56 B1 FD | 	call	#__system___basic_print_string
10fd8     4A 00 00 FF 
10fdc     94 E4 05 F1 | 	add	objptr, ##38036
10fe0     F2 14 02 FB | 	rdlong	arg02, objptr
10fe4     4A 00 00 FF 
10fe8     94 E4 85 F1 | 	sub	objptr, ##38036
10fec     00 12 06 F6 | 	mov	arg01, #0
10ff0     00 16 06 F6 | 	mov	arg03, #0
10ff4     84 56 B1 FD | 	call	#__system___basic_print_string
10ff8     00 12 06 F6 | 	mov	arg01, #0
10ffc     0A 14 06 F6 | 	mov	arg02, #10
11000     00 16 06 F6 | 	mov	arg03, #0
11004     1C 56 B1 FD | 	call	#__system___basic_print_char
11008     01 26 06 F6 | 	mov	local01, #1
1100c     00 12 06 F6 | 	mov	arg01, #0
11010     9C A6 B1 FD | 	call	#__system___getiolock_0599
11014     FD 00 68 FC | 	wrlong	#0, result1
11018     00 28 06 F6 | 	mov	local02, #0
1101c     00 2A 06 F6 | 	mov	local03, #0
11020                 | ' px=0
11020                 | ' for i=0 to 127: filelist(i)="" : next i
11020     00 2C 06 F6 | 	mov	local04, #0
11024     1C 4E 05 F1 | 	add	fp, #28
11028     97 12 48 FB | 	callpa	#(@LR__1421-@LR__1420)>>2,fcache_load_ptr_
1102c                 | LR__1420
1102c     16 2F 02 F6 | 	mov	local05, local04
11030     02 2E 66 F0 | 	shl	local05, #2
11034     A7 2E 02 F1 | 	add	local05, fp
11038     AE 01 00 FF 
1103c     52 31 06 F6 | 	mov	local06, ##@LR__5858
11040     17 31 62 FC | 	wrlong	local06, local05
11044     01 2C 06 F1 | 	add	local04, #1
11048     80 2C 56 F2 | 	cmps	local04, #128 wc
1104c     DC FF 9F CD |  if_b	jmp	#LR__1420
11050                 | LR__1421
11050     1C 4E 85 F1 | 	sub	fp, #28
11054     AE 01 00 FF 
11058     53 13 06 F6 | 	mov	arg01, ##@LR__5859
1105c     10 14 06 F6 | 	mov	arg02, #16
11060     84 A7 B1 FD | 	call	#__system___basic_dir
11064     FD 32 02 F6 | 	mov	local07, result1
11068     00 34 06 F6 | 	mov	local08, #0
1106c                 | ' filename=dir$("*", fbDirectory)
1106c                 | ' n=0
1106c                 | ' while filename <> "" andalso filename <> nil andalso n<128
1106c                 | LR__1422
1106c     AE 01 00 FF 
11070     55 37 06 F6 | 	mov	local09, ##@LR__5860
11074     19 13 02 F6 | 	mov	arg01, local07
11078     1B 15 02 F6 | 	mov	arg02, local09
1107c     30 49 B1 FD | 	call	#__system___string_cmp
11080     00 FA 0D F2 | 	cmp	result1, #0 wz
11084     68 00 90 AD |  if_e	jmp	#LR__1423
11088     00 36 06 F6 | 	mov	local09, #0
1108c     19 13 02 F6 | 	mov	arg01, local07
11090     00 14 06 F6 | 	mov	arg02, #0
11094     18 49 B1 FD | 	call	#__system___string_cmp
11098     00 FA 0D F2 | 	cmp	result1, #0 wz
1109c     50 00 90 AD |  if_e	jmp	#LR__1423
110a0     80 34 56 F2 | 	cmps	local08, #128 wc
110a4     48 00 90 3D |  if_ae	jmp	#LR__1423
110a8     AE 01 00 FF 
110ac     56 13 06 F6 | 	mov	arg01, ##@LR__5861
110b0     19 15 02 F6 | 	mov	arg02, local07
110b4     2C 49 B1 FD | 	call	#__system___string_concat
110b8     FD 32 02 F6 | 	mov	local07, result1
110bc     1A 2F 02 F6 | 	mov	local05, local08
110c0     02 2E 66 F0 | 	shl	local05, #2
110c4     1C 4E 05 F1 | 	add	fp, #28
110c8     A7 2E 02 F1 | 	add	local05, fp
110cc     17 33 62 FC | 	wrlong	local07, local05
110d0     01 34 06 F1 | 	add	local08, #1
110d4     00 2E 06 F6 | 	mov	local05, #0
110d8     00 12 06 F6 | 	mov	arg01, #0
110dc     00 14 06 F6 | 	mov	arg02, #0
110e0     1C 4E 85 F1 | 	sub	fp, #28
110e4     00 A7 B1 FD | 	call	#__system___basic_dir
110e8     FD 32 02 F6 | 	mov	local07, result1
110ec     7C FF 9F FD | 	jmp	#LR__1422
110f0                 | LR__1423
110f0                 | ' for i=0 to n-1			' now sort this
110f0     00 2C 06 F6 | 	mov	local04, #0
110f4     1A 39 02 F6 | 	mov	local10, local08
110f8                 | LR__1424
110f8     1C 2D 52 F2 | 	cmps	local04, local10 wc
110fc     DC 00 90 3D |  if_ae	jmp	#LR__1428
11100     00 3A 06 F6 | 	mov	local11, #0
11104                 | '   swapped=false
11104                 | '   for j=0 to n-i-2
11104     00 3C 06 F6 | 	mov	local12, #0
11108     1A 3F 02 F6 | 	mov	local13, local08
1110c     16 3F 82 F1 | 	sub	local13, local04
11110     01 3E 86 F1 | 	sub	local13, #1
11114                 | LR__1425
11114     1F 3D 52 F2 | 	cmps	local12, local13 wc
11118     B0 00 90 3D |  if_ae	jmp	#LR__1427
1111c                 | '     if filelist(j) > filelist(j+1) then
1111c     1E 37 02 F6 | 	mov	local09, local12
11120     02 36 66 F0 | 	shl	local09, #2
11124     1C 4E 05 F1 | 	add	fp, #28
11128     A7 36 02 F1 | 	add	local09, fp
1112c     1B 13 02 FB | 	rdlong	arg01, local09
11130     1E 37 02 F6 | 	mov	local09, local12
11134     01 36 06 F1 | 	add	local09, #1
11138     1B 31 02 F6 | 	mov	local06, local09
1113c     02 30 66 F0 | 	shl	local06, #2
11140     A7 26 02 F6 | 	mov	local01, fp
11144     A7 30 02 F1 | 	add	local06, fp
11148     18 2F 02 FB | 	rdlong	local05, local06
1114c     17 15 02 F6 | 	mov	arg02, local05
11150     1C 4E 85 F1 | 	sub	fp, #28
11154     58 48 B1 FD | 	call	#__system___string_cmp
11158     01 FA 55 F2 | 	cmps	result1, #1 wc
1115c     64 00 90 CD |  if_b	jmp	#LR__1426
11160     1E 37 02 F6 | 	mov	local09, local12
11164     01 36 06 F1 | 	add	local09, #1
11168     02 36 66 F0 | 	shl	local09, #2
1116c     1C 4E 05 F1 | 	add	fp, #28
11170     A7 36 02 F1 | 	add	local09, fp
11174     1B 3B 02 FB | 	rdlong	local11, local09
11178     1E 31 02 F6 | 	mov	local06, local12
1117c     02 30 66 F0 | 	shl	local06, #2
11180     A7 30 02 F1 | 	add	local06, fp
11184     18 2F 02 FB | 	rdlong	local05, local06
11188     1E 37 02 F6 | 	mov	local09, local12
1118c     1B 31 02 F6 | 	mov	local06, local09
11190     02 30 66 F0 | 	shl	local06, #2
11194     A7 26 02 F6 | 	mov	local01, fp
11198     A7 30 02 F1 | 	add	local06, fp
1119c     18 3B 62 FC | 	wrlong	local11, local06
111a0     1E 29 02 F6 | 	mov	local02, local12
111a4     01 28 06 F1 | 	add	local02, #1
111a8     14 41 02 F6 | 	mov	local14, local02
111ac     02 40 66 F0 | 	shl	local14, #2
111b0     A7 42 02 F6 | 	mov	local15, fp
111b4     A7 40 02 F1 | 	add	local14, fp
111b8     20 2F 62 FC | 	wrlong	local05, local14
111bc     01 3A 66 F6 | 	neg	local11, #1
111c0     1C 4E 85 F1 | 	sub	fp, #28
111c4                 | LR__1426
111c4     01 3C 06 F1 | 	add	local12, #1
111c8     48 FF 9F FD | 	jmp	#LR__1425
111cc                 | LR__1427
111cc                 | ' if not swapped then exit for
111cc     1D 45 22 F6 | 	not	local16, local11
111d0     00 44 0E F2 | 	cmp	local16, #0 wz
111d4     01 2C 06 A1 |  if_e	add	local04, #1
111d8     1C FF 9F AD |  if_e	jmp	#LR__1424
111dc                 | LR__1428
111dc                 | ' for i=0 to n-1
111dc     00 2C 06 F6 | 	mov	local04, #0
111e0     1A 47 02 F6 | 	mov	local17, local08
111e4                 | LR__1429
111e4     23 2D 52 F2 | 	cmps	local04, local17 wc
111e8     94 00 90 3D |  if_ae	jmp	#LR__1431
111ec                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
111ec     00 12 06 F6 | 	mov	arg01, #0
111f0     BC A4 B1 FD | 	call	#__system___getiolock_0599
111f4     FD 12 02 F6 | 	mov	arg01, result1
111f8     8C 47 B1 FD | 	call	#__system___lockmem
111fc     16 29 02 F6 | 	mov	local02, local04
11200     02 28 66 F0 | 	shl	local02, #2
11204     1C 4E 05 F1 | 	add	fp, #28
11208     A7 40 02 F6 | 	mov	local14, fp
1120c     A7 28 02 F1 | 	add	local02, fp
11210     14 15 02 FB | 	rdlong	arg02, local02
11214     00 26 06 F6 | 	mov	local01, #0
11218     00 12 06 F6 | 	mov	arg01, #0
1121c     00 16 06 F6 | 	mov	arg03, #0
11220     1C 4E 85 F1 | 	sub	fp, #28
11224     54 54 B1 FD | 	call	#__system___basic_print_string
11228     00 12 06 F6 | 	mov	arg01, #0
1122c     80 A4 B1 FD | 	call	#__system___getiolock_0599
11230     FD 00 68 FC | 	wrlong	#0, result1
11234     40 2A 06 F1 | 	add	local03, #64
11238     15 13 02 F6 | 	mov	arg01, local03
1123c     F0 29 B1 FD | 	call	#_hg010b_spin2_setcursorx
11240     00 2B 56 F2 | 	cmps	local03, #256 wc
11244     30 00 90 CD |  if_b	jmp	#LR__1430
11248     00 2A 06 F6 | 	mov	local03, #0
1124c     00 12 06 F6 | 	mov	arg01, #0
11250     5C A4 B1 FD | 	call	#__system___getiolock_0599
11254     FD 12 02 F6 | 	mov	arg01, result1
11258     2C 47 B1 FD | 	call	#__system___lockmem
1125c     00 12 06 F6 | 	mov	arg01, #0
11260     0A 14 06 F6 | 	mov	arg02, #10
11264     00 16 06 F6 | 	mov	arg03, #0
11268     B8 53 B1 FD | 	call	#__system___basic_print_char
1126c     00 12 06 F6 | 	mov	arg01, #0
11270     3C A4 B1 FD | 	call	#__system___getiolock_0599
11274     FD 00 68 FC | 	wrlong	#0, result1
11278                 | LR__1430
11278     01 2C 06 F1 | 	add	local04, #1
1127c     64 FF 9F FD | 	jmp	#LR__1429
11280                 | LR__1431
11280                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11280     80 34 56 F2 | 	cmps	local08, #128 wc
11284     44 00 90 CD |  if_b	jmp	#LR__1432
11288     00 12 06 F6 | 	mov	arg01, #0
1128c     20 A4 B1 FD | 	call	#__system___getiolock_0599
11290     FD 12 02 F6 | 	mov	arg01, result1
11294     F0 46 B1 FD | 	call	#__system___lockmem
11298     AE 01 00 FF 
1129c     5D 15 06 F6 | 	mov	arg02, ##@LR__5862
112a0     00 12 06 F6 | 	mov	arg01, #0
112a4     00 16 06 F6 | 	mov	arg03, #0
112a8     D0 53 B1 FD | 	call	#__system___basic_print_string
112ac     00 12 06 F6 | 	mov	arg01, #0
112b0     0A 14 06 F6 | 	mov	arg02, #10
112b4     00 16 06 F6 | 	mov	arg03, #0
112b8     68 53 B1 FD | 	call	#__system___basic_print_char
112bc     00 12 06 F6 | 	mov	arg01, #0
112c0     EC A3 B1 FD | 	call	#__system___getiolock_0599
112c4     FD 00 68 FC | 	wrlong	#0, result1
112c8     00 26 06 F6 | 	mov	local01, #0
112cc                 | LR__1432
112cc                 | ' print
112cc     00 12 06 F6 | 	mov	arg01, #0
112d0     DC A3 B1 FD | 	call	#__system___getiolock_0599
112d4     FD 12 02 F6 | 	mov	arg01, result1
112d8     AC 46 B1 FD | 	call	#__system___lockmem
112dc     00 12 06 F6 | 	mov	arg01, #0
112e0     0A 14 06 F6 | 	mov	arg02, #10
112e4     00 16 06 F6 | 	mov	arg03, #0
112e8     38 53 B1 FD | 	call	#__system___basic_print_char
112ec     00 12 06 F6 | 	mov	arg01, #0
112f0     BC A3 B1 FD | 	call	#__system___getiolock_0599
112f4     FD 00 68 FC | 	wrlong	#0, result1
112f8     00 30 06 F6 | 	mov	local06, #0
112fc     00 34 06 F6 | 	mov	local08, #0
11300     00 2A 06 F6 | 	mov	local03, #0
11304                 | ' return cursor_y
11304     3E E4 05 F1 | 	add	objptr, #62
11308     F2 48 C2 FA | 	rdbyte	local18, objptr
1130c     3E E4 85 F1 | 	sub	objptr, #62
11310     AE 01 00 FF 
11314     8F 13 06 F6 | 	mov	arg01, ##@LR__5863
11318     21 14 06 F6 | 	mov	arg02, #33
1131c     C8 A4 B1 FD | 	call	#__system___basic_dir
11320     FD 32 02 F6 | 	mov	local07, result1
11324                 | ' n=0
11324                 | ' px=0: py=v.getcursory()
11324                 | ' filename = dir$("*", fbNormal )   
11324                 | ' do while filename <> "" andalso filename <> nil andalso n<128
11324                 | LR__1433
11324     AE 01 00 FF 
11328     91 37 06 F6 | 	mov	local09, ##@LR__5864
1132c     19 13 02 F6 | 	mov	arg01, local07
11330     1B 15 02 F6 | 	mov	arg02, local09
11334     78 46 B1 FD | 	call	#__system___string_cmp
11338     00 FA 0D F2 | 	cmp	result1, #0 wz
1133c     54 00 90 AD |  if_e	jmp	#LR__1434
11340     00 36 06 F6 | 	mov	local09, #0
11344     19 13 02 F6 | 	mov	arg01, local07
11348     00 14 06 F6 | 	mov	arg02, #0
1134c     60 46 B1 FD | 	call	#__system___string_cmp
11350     00 FA 0D F2 | 	cmp	result1, #0 wz
11354     3C 00 90 AD |  if_e	jmp	#LR__1434
11358     80 34 56 F2 | 	cmps	local08, #128 wc
1135c     34 00 90 3D |  if_ae	jmp	#LR__1434
11360     1A 2F 02 F6 | 	mov	local05, local08
11364     02 2E 66 F0 | 	shl	local05, #2
11368     1C 4E 05 F1 | 	add	fp, #28
1136c     A7 2E 02 F1 | 	add	local05, fp
11370     17 33 62 FC | 	wrlong	local07, local05
11374     01 34 06 F1 | 	add	local08, #1
11378     00 2E 06 F6 | 	mov	local05, #0
1137c     00 12 06 F6 | 	mov	arg01, #0
11380     00 14 06 F6 | 	mov	arg02, #0
11384     1C 4E 85 F1 | 	sub	fp, #28
11388     5C A4 B1 FD | 	call	#__system___basic_dir
1138c     FD 32 02 F6 | 	mov	local07, result1
11390     90 FF 9F FD | 	jmp	#LR__1433
11394                 | LR__1434
11394                 | ' for i =0 to n-1
11394     00 2C 06 F6 | 	mov	local04, #0
11398                 | LR__1435
11398     1A 2D 52 F2 | 	cmps	local04, local08 wc
1139c     D8 00 90 3D |  if_ae	jmp	#LR__1439
113a0     00 3A 06 F6 | 	mov	local11, #0
113a4                 | '   swapped=false
113a4                 | '   for j=0 to n-i-2
113a4     00 3C 06 F6 | 	mov	local12, #0
113a8     1A 4B 02 F6 | 	mov	local19, local08
113ac     16 4B 82 F1 | 	sub	local19, local04
113b0     01 4A 86 F1 | 	sub	local19, #1
113b4                 | LR__1436
113b4     25 3D 52 F2 | 	cmps	local12, local19 wc
113b8     AC 00 90 3D |  if_ae	jmp	#LR__1438
113bc                 | '     if filelist(j) > filelist(j+1) then
113bc     1E 37 02 F6 | 	mov	local09, local12
113c0     02 36 66 F0 | 	shl	local09, #2
113c4     1C 4E 05 F1 | 	add	fp, #28
113c8     A7 36 02 F1 | 	add	local09, fp
113cc     1B 13 02 FB | 	rdlong	arg01, local09
113d0     1E 37 02 F6 | 	mov	local09, local12
113d4     01 36 06 F1 | 	add	local09, #1
113d8     1B 31 02 F6 | 	mov	local06, local09
113dc     02 30 66 F0 | 	shl	local06, #2
113e0     A7 26 02 F6 | 	mov	local01, fp
113e4     A7 30 02 F1 | 	add	local06, fp
113e8     18 2F 02 FB | 	rdlong	local05, local06
113ec     17 15 02 F6 | 	mov	arg02, local05
113f0     1C 4E 85 F1 | 	sub	fp, #28
113f4     B8 45 B1 FD | 	call	#__system___string_cmp
113f8     01 FA 55 F2 | 	cmps	result1, #1 wc
113fc     60 00 90 CD |  if_b	jmp	#LR__1437
11400     1E 37 02 F6 | 	mov	local09, local12
11404     01 36 06 F1 | 	add	local09, #1
11408     02 36 66 F0 | 	shl	local09, #2
1140c     1C 4E 05 F1 | 	add	fp, #28
11410     A7 36 02 F1 | 	add	local09, fp
11414     1B 45 02 FB | 	rdlong	local16, local09
11418     1E 31 02 F6 | 	mov	local06, local12
1141c     02 30 66 F0 | 	shl	local06, #2
11420     A7 30 02 F1 | 	add	local06, fp
11424     18 2F 02 FB | 	rdlong	local05, local06
11428     1E 37 02 F6 | 	mov	local09, local12
1142c     1B 31 02 F6 | 	mov	local06, local09
11430     02 30 66 F0 | 	shl	local06, #2
11434     A7 26 02 F6 | 	mov	local01, fp
11438     A7 30 02 F1 | 	add	local06, fp
1143c     18 45 62 FC | 	wrlong	local16, local06
11440     1E 41 02 F6 | 	mov	local14, local12
11444     01 40 06 F1 | 	add	local14, #1
11448     02 40 66 F0 | 	shl	local14, #2
1144c     A7 42 02 F6 | 	mov	local15, fp
11450     A7 40 02 F1 | 	add	local14, fp
11454     20 2F 62 FC | 	wrlong	local05, local14
11458     01 3A 66 F6 | 	neg	local11, #1
1145c     1C 4E 85 F1 | 	sub	fp, #28
11460                 | LR__1437
11460     01 3C 06 F1 | 	add	local12, #1
11464     4C FF 9F FD | 	jmp	#LR__1436
11468                 | LR__1438
11468                 | ' if not swapped then exit for
11468     1D 45 22 F6 | 	not	local16, local11
1146c     00 44 0E F2 | 	cmp	local16, #0 wz
11470     01 2C 06 A1 |  if_e	add	local04, #1
11474     20 FF 9F AD |  if_e	jmp	#LR__1435
11478                 | LR__1439
11478                 | ' for i=0 to n-1
11478     00 2C 06 F6 | 	mov	local04, #0
1147c                 | LR__1440
1147c     1A 2D 52 F2 | 	cmps	local04, local08 wc
11480     8C 00 90 3D |  if_ae	jmp	#LR__1442
11484                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11484     00 12 06 F6 | 	mov	arg01, #0
11488     24 A2 B1 FD | 	call	#__system___getiolock_0599
1148c     FD 12 02 F6 | 	mov	arg01, result1
11490     F4 44 B1 FD | 	call	#__system___lockmem
11494     16 29 02 F6 | 	mov	local02, local04
11498     02 28 66 F0 | 	shl	local02, #2
1149c     1C 4E 05 F1 | 	add	fp, #28
114a0     A7 28 02 F1 | 	add	local02, fp
114a4     14 15 02 FB | 	rdlong	arg02, local02
114a8     00 12 06 F6 | 	mov	arg01, #0
114ac     00 16 06 F6 | 	mov	arg03, #0
114b0     1C 4E 85 F1 | 	sub	fp, #28
114b4     C4 51 B1 FD | 	call	#__system___basic_print_string
114b8     00 12 06 F6 | 	mov	arg01, #0
114bc     F0 A1 B1 FD | 	call	#__system___getiolock_0599
114c0     FD 00 68 FC | 	wrlong	#0, result1
114c4     40 2A 06 F1 | 	add	local03, #64
114c8     15 13 02 F6 | 	mov	arg01, local03
114cc     60 27 B1 FD | 	call	#_hg010b_spin2_setcursorx
114d0     00 2B 56 F2 | 	cmps	local03, #256 wc
114d4     30 00 90 CD |  if_b	jmp	#LR__1441
114d8     00 2A 06 F6 | 	mov	local03, #0
114dc     00 12 06 F6 | 	mov	arg01, #0
114e0     CC A1 B1 FD | 	call	#__system___getiolock_0599
114e4     FD 12 02 F6 | 	mov	arg01, result1
114e8     9C 44 B1 FD | 	call	#__system___lockmem
114ec     00 12 06 F6 | 	mov	arg01, #0
114f0     0A 14 06 F6 | 	mov	arg02, #10
114f4     00 16 06 F6 | 	mov	arg03, #0
114f8     28 51 B1 FD | 	call	#__system___basic_print_char
114fc     00 12 06 F6 | 	mov	arg01, #0
11500     AC A1 B1 FD | 	call	#__system___getiolock_0599
11504     FD 00 68 FC | 	wrlong	#0, result1
11508                 | LR__1441
11508     01 2C 06 F1 | 	add	local04, #1
1150c     6C FF 9F FD | 	jmp	#LR__1440
11510                 | LR__1442
11510                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11510     80 34 56 F2 | 	cmps	local08, #128 wc
11514     40 00 90 CD |  if_b	jmp	#LR__1443
11518     00 12 06 F6 | 	mov	arg01, #0
1151c     90 A1 B1 FD | 	call	#__system___getiolock_0599
11520     FD 12 02 F6 | 	mov	arg01, result1
11524     60 44 B1 FD | 	call	#__system___lockmem
11528     AE 01 00 FF 
1152c     92 15 06 F6 | 	mov	arg02, ##@LR__5865
11530     00 12 06 F6 | 	mov	arg01, #0
11534     00 16 06 F6 | 	mov	arg03, #0
11538     40 51 B1 FD | 	call	#__system___basic_print_string
1153c     00 12 06 F6 | 	mov	arg01, #0
11540     0A 14 06 F6 | 	mov	arg02, #10
11544     00 16 06 F6 | 	mov	arg03, #0
11548     D8 50 B1 FD | 	call	#__system___basic_print_char
1154c     00 12 06 F6 | 	mov	arg01, #0
11550     5C A1 B1 FD | 	call	#__system___getiolock_0599
11554     FD 00 68 FC | 	wrlong	#0, result1
11558                 | LR__1443
11558                 | ' print
11558     00 12 06 F6 | 	mov	arg01, #0
1155c     50 A1 B1 FD | 	call	#__system___getiolock_0599
11560     FD 12 02 F6 | 	mov	arg01, result1
11564     20 44 B1 FD | 	call	#__system___lockmem
11568     00 12 06 F6 | 	mov	arg01, #0
1156c     0A 14 06 F6 | 	mov	arg02, #10
11570     00 16 06 F6 | 	mov	arg03, #0
11574     AC 50 B1 FD | 	call	#__system___basic_print_char
11578     00 12 06 F6 | 	mov	arg01, #0
1157c     30 A1 B1 FD | 	call	#__system___getiolock_0599
11580     FD 00 68 FC | 	wrlong	#0, result1
11584     A7 F0 03 F6 | 	mov	ptra, fp
11588     B2 00 A0 FD | 	call	#popregs_
1158c                 | _do_dir_ret
1158c     2D 00 64 FD | 	ret
11590                 | 
11590                 | ' 
11590                 | ' '-------------------- dpeek
11590                 | ' 
11590                 | ' sub do_dpeek
11590                 | _do_dpeek
11590     00 4A 05 F6 | 	mov	COUNT_, #0
11594     A8 00 A0 FD | 	call	#pushregs_
11598     14 F0 07 F1 | 	add	ptra, #20
1159c     E0 B6 BF FD | 	call	#_pop
115a0     A7 FA 61 FC | 	wrlong	result1, fp
115a4     04 4E 05 F1 | 	add	fp, #4
115a8     A7 FC 61 FC | 	wrlong	result2, fp
115ac     04 4E 05 F1 | 	add	fp, #4
115b0     A7 FE 61 FC | 	wrlong	result3, fp
115b4     08 4E 85 F1 | 	sub	fp, #8
115b8     A7 12 02 F6 | 	mov	arg01, fp
115bc     A4 B8 BF FD | 	call	#_converttoint
115c0     0C 4E 05 F1 | 	add	fp, #12
115c4     A7 FA 61 FC | 	wrlong	result1, fp
115c8                 | ' 
115c8                 | ' t1=pop()
115c8                 | ' a=converttoint(t1)
115c8                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
115c8     0C 4E 85 F1 | 	sub	fp, #12
115cc     00 04 00 FF 
115d0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
115d4     1C 00 90 3D |  if_ae	jmp	#LR__1450
115d8     0C 4E 05 F1 | 	add	fp, #12
115dc     A7 12 02 FB | 	rdlong	arg01, fp
115e0     09 FB E1 FA | 	rdword	result1, arg01
115e4     04 4E 05 F1 | 	add	fp, #4
115e8     A7 FA 61 FC | 	wrlong	result1, fp
115ec     10 4E 85 F1 | 	sub	fp, #16
115f0     1C 00 90 FD | 	jmp	#LR__1451
115f4                 | LR__1450
115f4     0C 4E 05 F1 | 	add	fp, #12
115f8     A7 12 02 FB | 	rdlong	arg01, fp
115fc     0C 4E 85 F1 | 	sub	fp, #12
11600     C0 0C B1 FD | 	call	#_psdpeek
11604     10 4E 05 F1 | 	add	fp, #16
11608     A7 FA 61 FC | 	wrlong	result1, fp
1160c     10 4E 85 F1 | 	sub	fp, #16
11610                 | LR__1451
11610     08 4E 05 F1 | 	add	fp, #8
11614     A7 3A 68 FC | 	wrlong	#29, fp
11618     08 4E 05 F1 | 	add	fp, #8
1161c     A7 12 02 FB | 	rdlong	arg01, fp
11620     10 4E 85 F1 | 	sub	fp, #16
11624     A7 12 62 FC | 	wrlong	arg01, fp
11628     A7 12 02 F6 | 	mov	arg01, fp
1162c     E8 B6 BF FD | 	call	#_push
11630     A7 F0 03 F6 | 	mov	ptra, fp
11634     B2 00 A0 FD | 	call	#popregs_
11638                 | _do_dpeek_ret
11638     2D 00 64 FD | 	ret
1163c                 | 
1163c                 | ' 
1163c                 | ' '-------------------- dpoke
1163c                 | ' 
1163c                 | ' sub do_dpoke
1163c                 | _do_dpoke
1163c     01 4A 05 F6 | 	mov	COUNT_, #1
11640     A8 00 A0 FD | 	call	#pushregs_
11644     20 F0 07 F1 | 	add	ptra, #32
11648     34 B6 BF FD | 	call	#_pop
1164c     FD 14 02 F6 | 	mov	arg02, result1
11650     FE 12 02 F6 | 	mov	arg01, result2
11654     FF 26 02 F6 | 	mov	local01, result3
11658     A7 14 62 FC | 	wrlong	arg02, fp
1165c     04 4E 05 F1 | 	add	fp, #4
11660     A7 12 62 FC | 	wrlong	arg01, fp
11664     04 4E 05 F1 | 	add	fp, #4
11668     A7 26 62 FC | 	wrlong	local01, fp
1166c     08 4E 85 F1 | 	sub	fp, #8
11670     0C B6 BF FD | 	call	#_pop
11674     FF 26 02 F6 | 	mov	local01, result3
11678     0C 4E 05 F1 | 	add	fp, #12
1167c     A7 FA 61 FC | 	wrlong	result1, fp
11680     04 4E 05 F1 | 	add	fp, #4
11684     A7 FC 61 FC | 	wrlong	result2, fp
11688     04 4E 05 F1 | 	add	fp, #4
1168c     A7 26 62 FC | 	wrlong	local01, fp
11690     08 4E 85 F1 | 	sub	fp, #8
11694     A7 12 02 F6 | 	mov	arg01, fp
11698     0C 4E 85 F1 | 	sub	fp, #12
1169c     C4 B7 BF FD | 	call	#_converttoint
116a0     18 4E 05 F1 | 	add	fp, #24
116a4     A7 FA 61 FC | 	wrlong	result1, fp
116a8     18 4E 85 F1 | 	sub	fp, #24
116ac     A7 12 02 F6 | 	mov	arg01, fp
116b0     B0 B7 BF FD | 	call	#_converttoint
116b4     1C 4E 05 F1 | 	add	fp, #28
116b8     A7 FA 61 FC | 	wrlong	result1, fp
116bc                 | ' 
116bc                 | ' t1=pop() 'value
116bc                 | ' t2=pop() 
116bc                 | ' a=converttoint(t2) : v=converttoint(t1)
116bc                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
116bc     04 4E 85 F1 | 	sub	fp, #4
116c0     A7 26 02 FB | 	rdlong	local01, fp
116c4     18 4E 85 F1 | 	sub	fp, #24
116c8     00 04 00 FF 
116cc     00 26 16 F2 | 	cmp	local01, ##524288 wc
116d0     1C 00 90 3D |  if_ae	jmp	#LR__1460
116d4     18 4E 05 F1 | 	add	fp, #24
116d8     A7 12 02 FB | 	rdlong	arg01, fp
116dc     04 4E 05 F1 | 	add	fp, #4
116e0     A7 14 02 FB | 	rdlong	arg02, fp
116e4     1C 4E 85 F1 | 	sub	fp, #28
116e8     09 15 52 FC | 	wrword	arg02, arg01
116ec     18 00 90 FD | 	jmp	#LR__1461
116f0                 | LR__1460
116f0     18 4E 05 F1 | 	add	fp, #24
116f4     A7 12 02 FB | 	rdlong	arg01, fp
116f8     04 4E 05 F1 | 	add	fp, #4
116fc     A7 14 02 FB | 	rdlong	arg02, fp
11700     1C 4E 85 F1 | 	sub	fp, #28
11704     7C 0A B1 FD | 	call	#_psdpoke
11708                 | LR__1461
11708     A7 F0 03 F6 | 	mov	ptra, fp
1170c     B2 00 A0 FD | 	call	#popregs_
11710                 | _do_dpoke_ret
11710     2D 00 64 FD | 	ret
11714                 | 
11714                 | ' '-------------------- draw
11714                 | ' 
11714                 | ' sub do_draw
11714                 | _do_draw
11714     00 4A 05 F6 | 	mov	COUNT_, #0
11718     A8 00 A0 FD | 	call	#pushregs_
1171c     20 F0 07 F1 | 	add	ptra, #32
11720     5C B5 BF FD | 	call	#_pop
11724     FD 1A 02 F6 | 	mov	arg05, result1
11728     FE 18 02 F6 | 	mov	arg04, result2
1172c     FF 16 02 F6 | 	mov	arg03, result3
11730     0C 4E 05 F1 | 	add	fp, #12
11734     A7 1A 62 FC | 	wrlong	arg05, fp
11738     04 4E 05 F1 | 	add	fp, #4
1173c     A7 18 62 FC | 	wrlong	arg04, fp
11740     04 4E 05 F1 | 	add	fp, #4
11744     A7 16 62 FC | 	wrlong	arg03, fp
11748     14 4E 85 F1 | 	sub	fp, #20
1174c     30 B5 BF FD | 	call	#_pop
11750     FF 1A 02 F6 | 	mov	arg05, result3
11754     A7 FA 61 FC | 	wrlong	result1, fp
11758     04 4E 05 F1 | 	add	fp, #4
1175c     A7 FC 61 FC | 	wrlong	result2, fp
11760     04 4E 05 F1 | 	add	fp, #4
11764     A7 1A 62 FC | 	wrlong	arg05, fp
11768     08 4E 85 F1 | 	sub	fp, #8
1176c     A7 12 02 F6 | 	mov	arg01, fp
11770     F0 B6 BF FD | 	call	#_converttoint
11774     18 4E 05 F1 | 	add	fp, #24
11778     A7 FA 61 FC | 	wrlong	result1, fp
1177c     0C 4E 85 F1 | 	sub	fp, #12
11780     A7 12 02 F6 | 	mov	arg01, fp
11784     0C 4E 85 F1 | 	sub	fp, #12
11788     D8 B6 BF FD | 	call	#_converttoint
1178c     1C 4E 05 F1 | 	add	fp, #28
11790     A7 FA 61 FC | 	wrlong	result1, fp
11794     37 00 00 FF 
11798     2C E4 05 F1 | 	add	objptr, ##28204
1179c     F2 12 02 FB | 	rdlong	arg01, objptr
117a0     04 E4 05 F1 | 	add	objptr, #4
117a4     F2 14 02 FB | 	rdlong	arg02, objptr
117a8     04 4E 85 F1 | 	sub	fp, #4
117ac     A7 16 02 FB | 	rdlong	arg03, fp
117b0     FD 18 02 F6 | 	mov	arg04, result1
117b4     18 4E 85 F1 | 	sub	fp, #24
117b8     08 E4 85 F1 | 	sub	objptr, #8
117bc     F2 1A 02 FB | 	rdlong	arg05, objptr
117c0     37 00 00 FF 
117c4     28 E4 85 F1 | 	sub	objptr, ##28200
117c8     14 1B B1 FD | 	call	#_hg010b_spin2_draw
117cc     18 4E 05 F1 | 	add	fp, #24
117d0     A7 1A 02 FB | 	rdlong	arg05, fp
117d4     37 00 00 FF 
117d8     2C E4 05 F1 | 	add	objptr, ##28204
117dc     F2 1A 62 FC | 	wrlong	arg05, objptr
117e0     04 4E 05 F1 | 	add	fp, #4
117e4     A7 1A 02 FB | 	rdlong	arg05, fp
117e8     1C 4E 85 F1 | 	sub	fp, #28
117ec     04 E4 05 F1 | 	add	objptr, #4
117f0     F2 1A 62 FC | 	wrlong	arg05, objptr
117f4     37 00 00 FF 
117f8     30 E4 85 F1 | 	sub	objptr, ##28208
117fc     A7 F0 03 F6 | 	mov	ptra, fp
11800     B2 00 A0 FD | 	call	#popregs_
11804                 | _do_draw_ret
11804     2D 00 64 FD | 	ret
11808                 | 
11808                 | ' 
11808                 | ' '-------------------- else
11808                 | ' 
11808                 | ' sub do_else
11808                 | _do_else
11808     4A 00 00 FF 
1180c     7C E4 05 F1 | 	add	objptr, ##38012
11810     F2 00 02 FB | 	rdlong	_var01, objptr
11814     01 00 86 F1 | 	sub	_var01, #1
11818     04 E4 05 F1 | 	add	objptr, #4
1181c     F2 00 62 FC | 	wrlong	_var01, objptr
11820     4A 00 00 FF 
11824     80 E4 85 F1 | 	sub	objptr, ##38016
11828                 | _do_else_ret
11828     2D 00 64 FD | 	ret
1182c                 | 
1182c                 | ' 
1182c                 | ' '-------------------- end
1182c                 | ' 
1182c                 | ' sub do_end
1182c                 | _do_end
1182c     4A 00 00 FF 
11830     7C E4 05 F1 | 	add	objptr, ##38012
11834     F2 00 02 FB | 	rdlong	_var01, objptr
11838     01 00 86 F1 | 	sub	_var01, #1
1183c     04 E4 05 F1 | 	add	objptr, #4
11840     F2 00 62 FC | 	wrlong	_var01, objptr
11844     06 00 00 FF 
11848     38 E4 05 F1 | 	add	objptr, ##3128
1184c     FF FF BF FF 
11850     F2 FE 6B FC | 	wrlong	##2147483647, objptr
11854     50 00 00 FF 
11858     B8 E4 85 F1 | 	sub	objptr, ##41144
1185c                 | _do_end_ret
1185c     2D 00 64 FD | 	ret
11860                 | 
11860                 | ' 
11860                 | ' '-------------------- enter
11860                 | ' 
11860                 | ' sub do_enter
11860                 | _do_enter
11860     02 00 00 FF 
11864     D2 12 06 F6 | 	mov	arg01, ##1234
11868     A0 2E B0 FD | 	call	#_do_load
1186c                 | _do_enter_ret
1186c     2D 00 64 FD | 	ret
11870                 | 
11870                 | ' 
11870                 | ' '------------------- error processing
11870                 | ' 
11870                 | ' sub do_error
11870                 | _do_error
11870     01 4A 05 F6 | 	mov	COUNT_, #1
11874     A8 00 A0 FD | 	call	#pushregs_
11878     4A 00 00 FF 
1187c     80 E4 05 F1 | 	add	objptr, ##38016
11880     F2 18 02 FB | 	rdlong	arg04, objptr
11884     0C 17 02 F6 | 	mov	arg03, arg04
11888     01 16 66 F0 | 	shl	arg03, #1
1188c     0C 17 02 F1 | 	add	arg03, arg04
11890     02 16 66 F0 | 	shl	arg03, #2
11894     03 00 00 FF 
11898     04 E4 85 F1 | 	sub	objptr, ##1540
1189c     F2 16 02 F1 | 	add	arg03, objptr
118a0     0B 27 02 FB | 	rdlong	local01, arg03
118a4                 | ' r=compiledline(lineptr_e).result.uresult
118a4                 | ' print "Error ";r;": ";errors$(r)
118a4     00 12 06 F6 | 	mov	arg01, #0
118a8     47 00 00 FF 
118ac     7C E4 85 F1 | 	sub	objptr, ##36476
118b0     FC 9D B1 FD | 	call	#__system___getiolock_0599
118b4     FD 12 02 F6 | 	mov	arg01, result1
118b8     CC 40 B1 FD | 	call	#__system___lockmem
118bc     AE 01 00 FF 
118c0     C4 15 06 F6 | 	mov	arg02, ##@LR__5866
118c4     00 12 06 F6 | 	mov	arg01, #0
118c8     00 16 06 F6 | 	mov	arg03, #0
118cc     AC 4D B1 FD | 	call	#__system___basic_print_string
118d0     00 12 06 F6 | 	mov	arg01, #0
118d4     13 15 02 F6 | 	mov	arg02, local01
118d8     00 16 06 F6 | 	mov	arg03, #0
118dc     0A 18 06 F6 | 	mov	arg04, #10
118e0     1C 4E B1 FD | 	call	#__system___basic_print_unsigned
118e4     AE 01 00 FF 
118e8     CB 15 06 F6 | 	mov	arg02, ##@LR__5867
118ec     00 12 06 F6 | 	mov	arg01, #0
118f0     00 16 06 F6 | 	mov	arg03, #0
118f4     84 4D B1 FD | 	call	#__system___basic_print_string
118f8     02 26 66 F0 | 	shl	local01, #2
118fc     45 00 00 FF 
11900     7C E4 05 F1 | 	add	objptr, ##35452
11904     F2 26 02 F1 | 	add	local01, objptr
11908     13 15 02 FB | 	rdlong	arg02, local01
1190c     00 12 06 F6 | 	mov	arg01, #0
11910     00 16 06 F6 | 	mov	arg03, #0
11914     45 00 00 FF 
11918     7C E4 85 F1 | 	sub	objptr, ##35452
1191c     5C 4D B1 FD | 	call	#__system___basic_print_string
11920     00 12 06 F6 | 	mov	arg01, #0
11924     0A 14 06 F6 | 	mov	arg02, #10
11928     00 16 06 F6 | 	mov	arg03, #0
1192c     F4 4C B1 FD | 	call	#__system___basic_print_char
11930     00 12 06 F6 | 	mov	arg01, #0
11934     78 9D B1 FD | 	call	#__system___getiolock_0599
11938     FD 00 68 FC | 	wrlong	#0, result1
1193c     A7 F0 03 F6 | 	mov	ptra, fp
11940     B2 00 A0 FD | 	call	#popregs_
11944                 | _do_error_ret
11944     2D 00 64 FD | 	ret
11948                 | 
11948                 | ' 
11948                 | ' '-------------------- fcircle
11948                 | ' 
11948                 | ' sub do_fcircle
11948                 | _do_fcircle
11948     02 4A 05 F6 | 	mov	COUNT_, #2
1194c     A8 00 A0 FD | 	call	#pushregs_
11950     24 F0 07 F1 | 	add	ptra, #36
11954     28 B3 BF FD | 	call	#_pop
11958     FD 14 02 F6 | 	mov	arg02, result1
1195c     FE 18 02 F6 | 	mov	arg04, result2
11960     FF 16 02 F6 | 	mov	arg03, result3
11964     18 4E 05 F1 | 	add	fp, #24
11968     A7 14 62 FC | 	wrlong	arg02, fp
1196c     04 4E 05 F1 | 	add	fp, #4
11970     A7 18 62 FC | 	wrlong	arg04, fp
11974     04 4E 05 F1 | 	add	fp, #4
11978     A7 16 62 FC | 	wrlong	arg03, fp
1197c     20 4E 85 F1 | 	sub	fp, #32
11980     FC B2 BF FD | 	call	#_pop
11984     FD 14 02 F6 | 	mov	arg02, result1
11988     FE 18 02 F6 | 	mov	arg04, result2
1198c     FF 16 02 F6 | 	mov	arg03, result3
11990     0C 4E 05 F1 | 	add	fp, #12
11994     A7 14 62 FC | 	wrlong	arg02, fp
11998     04 4E 05 F1 | 	add	fp, #4
1199c     A7 18 62 FC | 	wrlong	arg04, fp
119a0     04 4E 05 F1 | 	add	fp, #4
119a4     A7 16 62 FC | 	wrlong	arg03, fp
119a8     14 4E 85 F1 | 	sub	fp, #20
119ac     D0 B2 BF FD | 	call	#_pop
119b0     FF 14 02 F6 | 	mov	arg02, result3
119b4     A7 FA 61 FC | 	wrlong	result1, fp
119b8     04 4E 05 F1 | 	add	fp, #4
119bc     A7 FC 61 FC | 	wrlong	result2, fp
119c0     04 4E 05 F1 | 	add	fp, #4
119c4     A7 14 62 FC | 	wrlong	arg02, fp
119c8     08 4E 85 F1 | 	sub	fp, #8
119cc     A7 12 02 F6 | 	mov	arg01, fp
119d0     90 B4 BF FD | 	call	#_converttoint
119d4     FD 26 02 F6 | 	mov	local01, result1
119d8     0C 4E 05 F1 | 	add	fp, #12
119dc     A7 12 02 F6 | 	mov	arg01, fp
119e0     0C 4E 85 F1 | 	sub	fp, #12
119e4     7C B4 BF FD | 	call	#_converttoint
119e8     FD 28 02 F6 | 	mov	local02, result1
119ec     18 4E 05 F1 | 	add	fp, #24
119f0     A7 12 02 F6 | 	mov	arg01, fp
119f4     18 4E 85 F1 | 	sub	fp, #24
119f8     68 B4 BF FD | 	call	#_converttoint
119fc     FD 16 02 F6 | 	mov	arg03, result1
11a00     37 00 00 FF 
11a04     28 E4 05 F1 | 	add	objptr, ##28200
11a08     F2 18 02 FB | 	rdlong	arg04, objptr
11a0c     37 00 00 FF 
11a10     28 E4 85 F1 | 	sub	objptr, ##28200
11a14     13 13 02 F6 | 	mov	arg01, local01
11a18     14 15 02 F6 | 	mov	arg02, local02
11a1c     44 1D B1 FD | 	call	#_hg010b_spin2_fcircle
11a20     A7 F0 03 F6 | 	mov	ptra, fp
11a24     B2 00 A0 FD | 	call	#popregs_
11a28                 | _do_fcircle_ret
11a28     2D 00 64 FD | 	ret
11a2c                 | 
11a2c                 | ' 
11a2c                 | ' '-------------------- fill
11a2c                 | ' 
11a2c                 | ' sub do_fill
11a2c                 | _do_fill
11a2c     03 4A 05 F6 | 	mov	COUNT_, #3
11a30     A8 00 A0 FD | 	call	#pushregs_
11a34     30 F0 07 F1 | 	add	ptra, #48
11a38     44 B2 BF FD | 	call	#_pop
11a3c     FD 16 02 F6 | 	mov	arg03, result1
11a40     FE 14 02 F6 | 	mov	arg02, result2
11a44     FF 18 02 F6 | 	mov	arg04, result3
11a48     24 4E 05 F1 | 	add	fp, #36
11a4c     A7 16 62 FC | 	wrlong	arg03, fp
11a50     04 4E 05 F1 | 	add	fp, #4
11a54     A7 14 62 FC | 	wrlong	arg02, fp
11a58     04 4E 05 F1 | 	add	fp, #4
11a5c     A7 18 62 FC | 	wrlong	arg04, fp
11a60     2C 4E 85 F1 | 	sub	fp, #44
11a64     18 B2 BF FD | 	call	#_pop
11a68     FD 16 02 F6 | 	mov	arg03, result1
11a6c     FE 14 02 F6 | 	mov	arg02, result2
11a70     FF 18 02 F6 | 	mov	arg04, result3
11a74     18 4E 05 F1 | 	add	fp, #24
11a78     A7 16 62 FC | 	wrlong	arg03, fp
11a7c     04 4E 05 F1 | 	add	fp, #4
11a80     A7 14 62 FC | 	wrlong	arg02, fp
11a84     04 4E 05 F1 | 	add	fp, #4
11a88     A7 18 62 FC | 	wrlong	arg04, fp
11a8c     20 4E 85 F1 | 	sub	fp, #32
11a90     EC B1 BF FD | 	call	#_pop
11a94     FD 16 02 F6 | 	mov	arg03, result1
11a98     FE 14 02 F6 | 	mov	arg02, result2
11a9c     FF 18 02 F6 | 	mov	arg04, result3
11aa0     0C 4E 05 F1 | 	add	fp, #12
11aa4     A7 16 62 FC | 	wrlong	arg03, fp
11aa8     04 4E 05 F1 | 	add	fp, #4
11aac     A7 14 62 FC | 	wrlong	arg02, fp
11ab0     04 4E 05 F1 | 	add	fp, #4
11ab4     A7 18 62 FC | 	wrlong	arg04, fp
11ab8     14 4E 85 F1 | 	sub	fp, #20
11abc     C0 B1 BF FD | 	call	#_pop
11ac0     FF 16 02 F6 | 	mov	arg03, result3
11ac4     A7 FA 61 FC | 	wrlong	result1, fp
11ac8     04 4E 05 F1 | 	add	fp, #4
11acc     A7 FC 61 FC | 	wrlong	result2, fp
11ad0     04 4E 05 F1 | 	add	fp, #4
11ad4     A7 16 62 FC | 	wrlong	arg03, fp
11ad8     08 4E 85 F1 | 	sub	fp, #8
11adc     A7 12 02 F6 | 	mov	arg01, fp
11ae0     80 B3 BF FD | 	call	#_converttoint
11ae4     FD 26 02 F6 | 	mov	local01, result1
11ae8     0C 4E 05 F1 | 	add	fp, #12
11aec     A7 12 02 F6 | 	mov	arg01, fp
11af0     0C 4E 85 F1 | 	sub	fp, #12
11af4     6C B3 BF FD | 	call	#_converttoint
11af8     FD 28 02 F6 | 	mov	local02, result1
11afc     18 4E 05 F1 | 	add	fp, #24
11b00     A7 12 02 F6 | 	mov	arg01, fp
11b04     18 4E 85 F1 | 	sub	fp, #24
11b08     58 B3 BF FD | 	call	#_converttoint
11b0c     FD 2A 02 F6 | 	mov	local03, result1
11b10     24 4E 05 F1 | 	add	fp, #36
11b14     A7 12 02 F6 | 	mov	arg01, fp
11b18     24 4E 85 F1 | 	sub	fp, #36
11b1c     44 B3 BF FD | 	call	#_converttoint
11b20     FD 18 02 F6 | 	mov	arg04, result1
11b24     13 13 02 F6 | 	mov	arg01, local01
11b28     14 15 02 F6 | 	mov	arg02, local02
11b2c     15 17 02 F6 | 	mov	arg03, local03
11b30     9C 19 B1 FD | 	call	#_hg010b_spin2_fill
11b34     A7 F0 03 F6 | 	mov	ptra, fp
11b38     B2 00 A0 FD | 	call	#popregs_
11b3c                 | _do_fill_ret
11b3c     2D 00 64 FD | 	ret
11b40                 | 
11b40                 | ' 
11b40                 | ' '-------------------- font
11b40                 | ' 
11b40                 | ' sub do_font
11b40                 | _do_font
11b40     03 4A 05 F6 | 	mov	COUNT_, #3
11b44     A8 00 A0 FD | 	call	#pushregs_
11b48     34 B1 BF FD | 	call	#_pop
11b4c     FD 26 02 F6 | 	mov	local01, result1
11b50     FE 28 02 F6 | 	mov	local02, result2
11b54     FF 2A 02 F6 | 	mov	local03, result3
11b58                 | ' 
11b58                 | ' t1=pop() 
11b58                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
11b58     1E 2A 0E F2 | 	cmp	local03, #30 wz
11b5c     10 00 90 5D |  if_ne	jmp	#LR__1470
11b60     13 13 02 F6 | 	mov	arg01, local01
11b64     00 14 06 F6 | 	mov	arg02, #0
11b68     5C 71 B1 FD | 	call	#__system___float_tointeger
11b6c     FD 26 02 F6 | 	mov	local01, result1
11b70                 | LR__1470
11b70                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
11b70     1F 2A 0E F2 | 	cmp	local03, #31 wz
11b74     18 00 90 5D |  if_ne	jmp	#LR__1471
11b78     13 13 02 F6 | 	mov	arg01, local01
11b7c     8C 74 B1 FD | 	call	#__system____builtin_atof
11b80     FD 12 02 F6 | 	mov	arg01, result1
11b84     00 14 06 F6 | 	mov	arg02, #0
11b88     3C 71 B1 FD | 	call	#__system___float_tointeger
11b8c     FD 26 02 F6 | 	mov	local01, result1
11b90                 | LR__1471
11b90     37 00 00 FF 
11b94     40 E4 05 F1 | 	add	objptr, ##28224
11b98     F2 26 62 FC | 	wrlong	local01, objptr
11b9c     37 00 00 FF 
11ba0     40 E4 85 F1 | 	sub	objptr, ##28224
11ba4     02 26 66 F0 | 	shl	local01, #2
11ba8     13 13 02 F6 | 	mov	arg01, local01
11bac     04 20 B1 FD | 	call	#_hg010b_spin2_setfontfamily
11bb0     A7 F0 03 F6 | 	mov	ptra, fp
11bb4     B2 00 A0 FD | 	call	#popregs_
11bb8                 | _do_font_ret
11bb8     2D 00 64 FD | 	ret
11bbc                 | 
11bbc                 | ' 
11bbc                 | ' '-------------------- for
11bbc                 | ' 
11bbc                 | ' sub do_for()
11bbc                 | _do_for
11bbc     01 4A 05 F6 | 	mov	COUNT_, #1
11bc0     A8 00 A0 FD | 	call	#pushregs_
11bc4     10 F0 07 F1 | 	add	ptra, #16
11bc8     50 00 00 FF 
11bcc     30 E5 05 F1 | 	add	objptr, ##41264
11bd0     F2 12 02 FB | 	rdlong	arg01, objptr
11bd4     01 12 06 F1 | 	add	arg01, #1
11bd8     F2 12 62 FC | 	wrlong	arg01, objptr
11bdc     50 00 00 FF 
11be0     30 E5 85 F1 | 	sub	objptr, ##41264
11be4     98 B0 BF FD | 	call	#_pop
11be8     A7 FA 61 FC | 	wrlong	result1, fp
11bec     04 4E 05 F1 | 	add	fp, #4
11bf0     A7 FC 61 FC | 	wrlong	result2, fp
11bf4     04 4E 05 F1 | 	add	fp, #4
11bf8     A7 FE 61 FC | 	wrlong	result3, fp
11bfc     08 4E 85 F1 | 	sub	fp, #8
11c00     50 00 00 FF 
11c04     30 E5 05 F1 | 	add	objptr, ##41264
11c08     F2 12 02 FB | 	rdlong	arg01, objptr
11c0c     09 27 02 F6 | 	mov	local01, arg01
11c10     02 26 66 F0 | 	shl	local01, #2
11c14     09 27 02 F1 | 	add	local01, arg01
11c18     02 26 66 F0 | 	shl	local01, #2
11c1c     06 00 00 FF 
11c20     98 E4 85 F1 | 	sub	objptr, ##3224
11c24     F2 26 02 F1 | 	add	local01, objptr
11c28     A7 12 02 FB | 	rdlong	arg01, fp
11c2c     08 26 06 F1 | 	add	local01, #8
11c30     13 13 62 FC | 	wrlong	arg01, local01
11c34     4A 00 00 FF 
11c38     98 E4 85 F1 | 	sub	objptr, ##38040
11c3c     40 B0 BF FD | 	call	#_pop
11c40     A7 FA 61 FC | 	wrlong	result1, fp
11c44     04 4E 05 F1 | 	add	fp, #4
11c48     A7 FC 61 FC | 	wrlong	result2, fp
11c4c     04 4E 05 F1 | 	add	fp, #4
11c50     A7 FE 61 FC | 	wrlong	result3, fp
11c54     08 4E 85 F1 | 	sub	fp, #8
11c58     50 00 00 FF 
11c5c     30 E5 05 F1 | 	add	objptr, ##41264
11c60     F2 12 02 FB | 	rdlong	arg01, objptr
11c64     09 27 02 F6 | 	mov	local01, arg01
11c68     02 26 66 F0 | 	shl	local01, #2
11c6c     09 27 02 F1 | 	add	local01, arg01
11c70     02 26 66 F0 | 	shl	local01, #2
11c74     06 00 00 FF 
11c78     98 E4 85 F1 | 	sub	objptr, ##3224
11c7c     F2 26 02 F1 | 	add	local01, objptr
11c80     A7 12 02 F6 | 	mov	arg01, fp
11c84     4A 00 00 FF 
11c88     98 E4 85 F1 | 	sub	objptr, ##38040
11c8c     D4 B1 BF FD | 	call	#_converttoint
11c90     FD 12 02 F6 | 	mov	arg01, result1
11c94     0C 26 06 F1 | 	add	local01, #12
11c98     13 13 62 FC | 	wrlong	arg01, local01
11c9c     E0 AF BF FD | 	call	#_pop
11ca0     A7 FA 61 FC | 	wrlong	result1, fp
11ca4     04 4E 05 F1 | 	add	fp, #4
11ca8     A7 FC 61 FC | 	wrlong	result2, fp
11cac     04 4E 05 F1 | 	add	fp, #4
11cb0     A7 FE 61 FC | 	wrlong	result3, fp
11cb4     08 4E 85 F1 | 	sub	fp, #8
11cb8     50 00 00 FF 
11cbc     30 E5 05 F1 | 	add	objptr, ##41264
11cc0     F2 12 02 FB | 	rdlong	arg01, objptr
11cc4     09 27 02 F6 | 	mov	local01, arg01
11cc8     02 26 66 F0 | 	shl	local01, #2
11ccc     09 27 02 F1 | 	add	local01, arg01
11cd0     02 26 66 F0 | 	shl	local01, #2
11cd4     06 00 00 FF 
11cd8     98 E4 85 F1 | 	sub	objptr, ##3224
11cdc     F2 26 02 F1 | 	add	local01, objptr
11ce0     A7 12 02 F6 | 	mov	arg01, fp
11ce4     4A 00 00 FF 
11ce8     98 E4 85 F1 | 	sub	objptr, ##38040
11cec     74 B1 BF FD | 	call	#_converttoint
11cf0     10 26 06 F1 | 	add	local01, #16
11cf4     13 FB 61 FC | 	wrlong	result1, local01
11cf8                 | ' fortop+=1
11cf8                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
11cf8                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
11cf8                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
11cf8                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
11cf8     4A 00 00 FF 
11cfc     80 E4 05 F1 | 	add	objptr, ##38016
11d00     F2 12 02 FB | 	rdlong	arg01, objptr
11d04     09 27 02 F6 | 	mov	local01, arg01
11d08     01 26 66 F0 | 	shl	local01, #1
11d0c     09 27 02 F1 | 	add	local01, arg01
11d10     02 26 66 F0 | 	shl	local01, #2
11d14     03 00 00 FF 
11d18     04 E4 85 F1 | 	sub	objptr, ##1540
11d1c     F2 26 02 F1 | 	add	local01, objptr
11d20     08 26 06 F1 | 	add	local01, #8
11d24     13 27 02 FB | 	rdlong	local01, local01
11d28     FE 27 0E F2 | 	cmp	local01, #510 wz
11d2c     47 00 00 FF 
11d30     7C E4 85 F1 | 	sub	objptr, ##36476
11d34     70 00 90 5D |  if_ne	jmp	#LR__1480
11d38     50 00 00 FF 
11d3c     30 E5 05 F1 | 	add	objptr, ##41264
11d40     F2 12 02 FB | 	rdlong	arg01, objptr
11d44     09 27 02 F6 | 	mov	local01, arg01
11d48     02 26 66 F0 | 	shl	local01, #2
11d4c     09 27 02 F1 | 	add	local01, arg01
11d50     02 26 66 F0 | 	shl	local01, #2
11d54     06 00 00 FF 
11d58     98 E4 85 F1 | 	sub	objptr, ##3224
11d5c     F2 26 02 F1 | 	add	local01, objptr
11d60     06 00 00 FF 
11d64     20 E4 05 F1 | 	add	objptr, ##3104
11d68     F2 12 02 FB | 	rdlong	arg01, objptr
11d6c     13 13 62 FC | 	wrlong	arg01, local01
11d70     78 E4 05 F1 | 	add	objptr, #120
11d74     F2 12 02 FB | 	rdlong	arg01, objptr
11d78     09 27 02 F6 | 	mov	local01, arg01
11d7c     02 26 66 F0 | 	shl	local01, #2
11d80     09 27 02 F1 | 	add	local01, arg01
11d84     02 26 66 F0 | 	shl	local01, #2
11d88     06 00 00 FF 
11d8c     98 E4 85 F1 | 	sub	objptr, ##3224
11d90     F2 26 02 F1 | 	add	local01, objptr
11d94     04 26 06 F1 | 	add	local01, #4
11d98     13 01 68 FC | 	wrlong	#0, local01
11d9c     4A 00 00 FF 
11da0     98 E4 85 F1 | 	sub	objptr, ##38040
11da4     78 00 90 FD | 	jmp	#LR__1481
11da8                 | LR__1480
11da8     50 00 00 FF 
11dac     30 E5 05 F1 | 	add	objptr, ##41264
11db0     F2 12 02 FB | 	rdlong	arg01, objptr
11db4     09 27 02 F6 | 	mov	local01, arg01
11db8     02 26 66 F0 | 	shl	local01, #2
11dbc     09 27 02 F1 | 	add	local01, arg01
11dc0     02 26 66 F0 | 	shl	local01, #2
11dc4     06 00 00 FF 
11dc8     98 E4 85 F1 | 	sub	objptr, ##3224
11dcc     F2 26 02 F1 | 	add	local01, objptr
11dd0     06 00 00 FF 
11dd4     28 E4 05 F1 | 	add	objptr, ##3112
11dd8     F2 12 02 FB | 	rdlong	arg01, objptr
11ddc     13 13 62 FC | 	wrlong	arg01, local01
11de0     70 E4 05 F1 | 	add	objptr, #112
11de4     F2 12 02 FB | 	rdlong	arg01, objptr
11de8     09 27 02 F6 | 	mov	local01, arg01
11dec     02 26 66 F0 | 	shl	local01, #2
11df0     09 27 02 F1 | 	add	local01, arg01
11df4     02 26 66 F0 | 	shl	local01, #2
11df8     06 00 00 FF 
11dfc     98 E4 85 F1 | 	sub	objptr, ##3224
11e00     F2 26 02 F1 | 	add	local01, objptr
11e04     18 E4 85 F1 | 	sub	objptr, #24
11e08     F2 12 02 FB | 	rdlong	arg01, objptr
11e0c     4A 00 00 FF 
11e10     80 E4 85 F1 | 	sub	objptr, ##38016
11e14     01 12 06 F1 | 	add	arg01, #1
11e18     04 26 06 F1 | 	add	local01, #4
11e1c     13 13 62 FC | 	wrlong	arg01, local01
11e20                 | LR__1481
11e20     A7 F0 03 F6 | 	mov	ptra, fp
11e24     B2 00 A0 FD | 	call	#popregs_
11e28                 | _do_for_ret
11e28     2D 00 64 FD | 	ret
11e2c                 | 
11e2c                 | ' 
11e2c                 | ' '-------------------- frame
11e2c                 | ' 
11e2c                 | ' sub do_frame
11e2c                 | _do_frame
11e2c     03 4A 05 F6 | 	mov	COUNT_, #3
11e30     A8 00 A0 FD | 	call	#pushregs_
11e34     30 F0 07 F1 | 	add	ptra, #48
11e38     44 AE BF FD | 	call	#_pop
11e3c     FD 16 02 F6 | 	mov	arg03, result1
11e40     FE 14 02 F6 | 	mov	arg02, result2
11e44     FF 1A 02 F6 | 	mov	arg05, result3
11e48     24 4E 05 F1 | 	add	fp, #36
11e4c     A7 16 62 FC | 	wrlong	arg03, fp
11e50     04 4E 05 F1 | 	add	fp, #4
11e54     A7 14 62 FC | 	wrlong	arg02, fp
11e58     04 4E 05 F1 | 	add	fp, #4
11e5c     A7 1A 62 FC | 	wrlong	arg05, fp
11e60     2C 4E 85 F1 | 	sub	fp, #44
11e64     18 AE BF FD | 	call	#_pop
11e68     FD 16 02 F6 | 	mov	arg03, result1
11e6c     FE 14 02 F6 | 	mov	arg02, result2
11e70     FF 1A 02 F6 | 	mov	arg05, result3
11e74     18 4E 05 F1 | 	add	fp, #24
11e78     A7 16 62 FC | 	wrlong	arg03, fp
11e7c     04 4E 05 F1 | 	add	fp, #4
11e80     A7 14 62 FC | 	wrlong	arg02, fp
11e84     04 4E 05 F1 | 	add	fp, #4
11e88     A7 1A 62 FC | 	wrlong	arg05, fp
11e8c     20 4E 85 F1 | 	sub	fp, #32
11e90     EC AD BF FD | 	call	#_pop
11e94     FD 16 02 F6 | 	mov	arg03, result1
11e98     FE 14 02 F6 | 	mov	arg02, result2
11e9c     FF 1A 02 F6 | 	mov	arg05, result3
11ea0     0C 4E 05 F1 | 	add	fp, #12
11ea4     A7 16 62 FC | 	wrlong	arg03, fp
11ea8     04 4E 05 F1 | 	add	fp, #4
11eac     A7 14 62 FC | 	wrlong	arg02, fp
11eb0     04 4E 05 F1 | 	add	fp, #4
11eb4     A7 1A 62 FC | 	wrlong	arg05, fp
11eb8     14 4E 85 F1 | 	sub	fp, #20
11ebc     C0 AD BF FD | 	call	#_pop
11ec0     FF 16 02 F6 | 	mov	arg03, result3
11ec4     A7 FA 61 FC | 	wrlong	result1, fp
11ec8     04 4E 05 F1 | 	add	fp, #4
11ecc     A7 FC 61 FC | 	wrlong	result2, fp
11ed0     04 4E 05 F1 | 	add	fp, #4
11ed4     A7 16 62 FC | 	wrlong	arg03, fp
11ed8     08 4E 85 F1 | 	sub	fp, #8
11edc     A7 12 02 F6 | 	mov	arg01, fp
11ee0     80 AF BF FD | 	call	#_converttoint
11ee4     FD 26 02 F6 | 	mov	local01, result1
11ee8     0C 4E 05 F1 | 	add	fp, #12
11eec     A7 12 02 F6 | 	mov	arg01, fp
11ef0     0C 4E 85 F1 | 	sub	fp, #12
11ef4     6C AF BF FD | 	call	#_converttoint
11ef8     FD 28 02 F6 | 	mov	local02, result1
11efc     18 4E 05 F1 | 	add	fp, #24
11f00     A7 12 02 F6 | 	mov	arg01, fp
11f04     18 4E 85 F1 | 	sub	fp, #24
11f08     58 AF BF FD | 	call	#_converttoint
11f0c     FD 2A 02 F6 | 	mov	local03, result1
11f10     24 4E 05 F1 | 	add	fp, #36
11f14     A7 12 02 F6 | 	mov	arg01, fp
11f18     24 4E 85 F1 | 	sub	fp, #36
11f1c     44 AF BF FD | 	call	#_converttoint
11f20     FD 18 02 F6 | 	mov	arg04, result1
11f24     37 00 00 FF 
11f28     28 E4 05 F1 | 	add	objptr, ##28200
11f2c     F2 1A 02 FB | 	rdlong	arg05, objptr
11f30     37 00 00 FF 
11f34     28 E4 85 F1 | 	sub	objptr, ##28200
11f38     13 13 02 F6 | 	mov	arg01, local01
11f3c     14 15 02 F6 | 	mov	arg02, local02
11f40     15 17 02 F6 | 	mov	arg03, local03
11f44     74 1A B1 FD | 	call	#_hg010b_spin2_frame
11f48     A7 F0 03 F6 | 	mov	ptra, fp
11f4c     B2 00 A0 FD | 	call	#popregs_
11f50                 | _do_frame_ret
11f50     2D 00 64 FD | 	ret
11f54                 | 
11f54                 | ' 
11f54                 | ' '-------------------- framebuf
11f54                 | ' 
11f54                 | ' sub do_framebuf
11f54                 | _do_framebuf
11f54     00 4A 05 F6 | 	mov	COUNT_, #0
11f58     A8 00 A0 FD | 	call	#pushregs_
11f5c     0C F0 07 F1 | 	add	ptra, #12
11f60     08 4E 05 F1 | 	add	fp, #8
11f64     A7 3A 68 FC | 	wrlong	#29, fp
11f68     F2 12 02 FB | 	rdlong	arg01, objptr
11f6c     08 4E 85 F1 | 	sub	fp, #8
11f70     A7 12 62 FC | 	wrlong	arg01, fp
11f74     A7 12 02 F6 | 	mov	arg01, fp
11f78     9C AD BF FD | 	call	#_push
11f7c     A7 F0 03 F6 | 	mov	ptra, fp
11f80     B2 00 A0 FD | 	call	#popregs_
11f84                 | _do_framebuf_ret
11f84     2D 00 64 FD | 	ret
11f88                 | 
11f88                 | ' '-------------------- fre
11f88                 | ' 
11f88                 | ' sub do_fre
11f88                 | _do_fre
11f88     01 4A 05 F6 | 	mov	COUNT_, #1
11f8c     A8 00 A0 FD | 	call	#pushregs_
11f90     0C F0 07 F1 | 	add	ptra, #12
11f94     52 00 00 FF 
11f98     44 E4 05 F1 | 	add	objptr, ##42052
11f9c     F2 12 02 FB | 	rdlong	arg01, objptr
11fa0     0E 00 00 FF 
11fa4     E8 E5 85 F1 | 	sub	objptr, ##7656
11fa8     F2 26 02 FB | 	rdlong	local01, objptr
11fac     13 13 82 F1 | 	sub	arg01, local01
11fb0     0F 00 00 FF 
11fb4     60 E4 05 F1 | 	add	objptr, ##7776
11fb8     F2 12 62 FC | 	wrlong	arg01, objptr
11fbc     08 4E 05 F1 | 	add	fp, #8
11fc0     A7 3A 68 FC | 	wrlong	#29, fp
11fc4     08 4E 85 F1 | 	sub	fp, #8
11fc8     F2 26 02 FB | 	rdlong	local01, objptr
11fcc     52 00 00 FF 
11fd0     BC E4 85 F1 | 	sub	objptr, ##42172
11fd4     A7 26 62 FC | 	wrlong	local01, fp
11fd8     A7 12 02 F6 | 	mov	arg01, fp
11fdc     38 AD BF FD | 	call	#_push
11fe0     A7 F0 03 F6 | 	mov	ptra, fp
11fe4     B2 00 A0 FD | 	call	#popregs_
11fe8                 | _do_fre_ret
11fe8     2D 00 64 FD | 	ret
11fec                 | 
11fec                 | ' 
11fec                 | ' '-------------------- get
11fec                 | ' 
11fec                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
11fec                 | _do_get
11fec     09 4A 05 F6 | 	mov	COUNT_, #9
11ff0     A8 00 A0 FD | 	call	#pushregs_
11ff4     40 F0 07 F1 | 	add	ptra, #64
11ff8     4A 00 00 FF 
11ffc     80 E4 05 F1 | 	add	objptr, ##38016
12000     F2 1A 02 FB | 	rdlong	arg05, objptr
12004     0D 19 02 F6 | 	mov	arg04, arg05
12008     01 18 66 F0 | 	shl	arg04, #1
1200c     0D 19 02 F1 | 	add	arg04, arg05
12010     02 18 66 F0 | 	shl	arg04, #2
12014     03 00 00 FF 
12018     04 E4 85 F1 | 	sub	objptr, ##1540
1201c     F2 18 02 F1 | 	add	arg04, objptr
12020     0C 1B 02 FB | 	rdlong	arg05, arg04
12024     A7 1A 62 FC | 	wrlong	arg05, fp
12028                 | ' 
12028                 | ' numpar=compiledline(lineptr_e).result.uresult
12028                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
12028     04 1A 0E F2 | 	cmp	arg05, #4 wz
1202c     47 00 00 FF 
12030     7C E4 85 F1 | 	sub	objptr, ##36476
12034     48 00 90 5D |  if_ne	jmp	#LR__1490
12038     44 AC BF FD | 	call	#_pop
1203c     FF 1A 02 F6 | 	mov	arg05, result3
12040     1C 4E 05 F1 | 	add	fp, #28
12044     A7 FA 61 FC | 	wrlong	result1, fp
12048     04 4E 05 F1 | 	add	fp, #4
1204c     A7 FC 61 FC | 	wrlong	result2, fp
12050     04 4E 05 F1 | 	add	fp, #4
12054     A7 1A 62 FC | 	wrlong	arg05, fp
12058     08 4E 85 F1 | 	sub	fp, #8
1205c     A7 12 02 F6 | 	mov	arg01, fp
12060     1C 4E 85 F1 | 	sub	fp, #28
12064     FC AD BF FD | 	call	#_converttoint
12068     52 00 00 FF 
1206c     B8 E4 05 F1 | 	add	objptr, ##42168
12070     F2 FA 61 FC | 	wrlong	result1, objptr
12074     52 00 00 FF 
12078     B8 E4 85 F1 | 	sub	objptr, ##42168
1207c     18 00 90 FD | 	jmp	#LR__1491
12080                 | LR__1490
12080     52 00 00 FF 
12084     B8 E4 05 F1 | 	add	objptr, ##42168
12088     FF FF FF FF 
1208c     F2 FE 6B FC | 	wrlong	##-1, objptr
12090     52 00 00 FF 
12094     B8 E4 85 F1 | 	sub	objptr, ##42168
12098                 | LR__1491
12098                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
12098     A7 16 02 FB | 	rdlong	arg03, fp
1209c     03 16 56 F2 | 	cmps	arg03, #3 wc
120a0     40 00 90 CD |  if_b	jmp	#LR__1492
120a4     D8 AB BF FD | 	call	#_pop
120a8     FF 16 02 F6 | 	mov	arg03, result3
120ac     1C 4E 05 F1 | 	add	fp, #28
120b0     A7 FA 61 FC | 	wrlong	result1, fp
120b4     04 4E 05 F1 | 	add	fp, #4
120b8     A7 FC 61 FC | 	wrlong	result2, fp
120bc     04 4E 05 F1 | 	add	fp, #4
120c0     A7 16 62 FC | 	wrlong	arg03, fp
120c4     08 4E 85 F1 | 	sub	fp, #8
120c8     A7 12 02 F6 | 	mov	arg01, fp
120cc     1C 4E 85 F1 | 	sub	fp, #28
120d0     90 AD BF FD | 	call	#_converttoint
120d4     08 4E 05 F1 | 	add	fp, #8
120d8     A7 FA 61 FC | 	wrlong	result1, fp
120dc     08 4E 85 F1 | 	sub	fp, #8
120e0     0C 00 90 FD | 	jmp	#LR__1493
120e4                 | LR__1492
120e4     08 4E 05 F1 | 	add	fp, #8
120e8     A7 02 68 FC | 	wrlong	#1, fp
120ec     08 4E 85 F1 | 	sub	fp, #8
120f0                 | LR__1493
120f0                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
120f0     A7 16 02 FB | 	rdlong	arg03, fp
120f4     02 16 56 F2 | 	cmps	arg03, #2 wc
120f8     3C 00 90 CD |  if_b	jmp	#LR__1494
120fc     80 AB BF FD | 	call	#_pop
12100     FF 16 02 F6 | 	mov	arg03, result3
12104     1C 4E 05 F1 | 	add	fp, #28
12108     A7 FA 61 FC | 	wrlong	result1, fp
1210c     04 4E 05 F1 | 	add	fp, #4
12110     A7 FC 61 FC | 	wrlong	result2, fp
12114     04 4E 05 F1 | 	add	fp, #4
12118     A7 16 62 FC | 	wrlong	arg03, fp
1211c     08 4E 85 F1 | 	sub	fp, #8
12120     A7 12 02 F6 | 	mov	arg01, fp
12124     1C 4E 85 F1 | 	sub	fp, #28
12128     38 AD BF FD | 	call	#_converttoint
1212c     0C 4E 05 F1 | 	add	fp, #12
12130     A7 FA 61 FC | 	wrlong	result1, fp
12134     0C 4E 85 F1 | 	sub	fp, #12
12138                 | LR__1494
12138     44 AB BF FD | 	call	#_pop
1213c     FF 16 02 F6 | 	mov	arg03, result3
12140     1C 4E 05 F1 | 	add	fp, #28
12144     A7 FA 61 FC | 	wrlong	result1, fp
12148     04 4E 05 F1 | 	add	fp, #4
1214c     A7 FC 61 FC | 	wrlong	result2, fp
12150     04 4E 05 F1 | 	add	fp, #4
12154     A7 16 62 FC | 	wrlong	arg03, fp
12158     08 4E 85 F1 | 	sub	fp, #8
1215c     A7 12 02 F6 | 	mov	arg01, fp
12160     1C 4E 85 F1 | 	sub	fp, #28
12164     FC AC BF FD | 	call	#_converttoint
12168     04 4E 05 F1 | 	add	fp, #4
1216c     A7 FA 61 FC | 	wrlong	result1, fp
12170     10 4E 05 F1 | 	add	fp, #16
12174     A7 16 02 FB | 	rdlong	arg03, fp
12178     14 4E 85 F1 | 	sub	fp, #20
1217c     02 16 66 F0 | 	shl	arg03, #2
12180     50 00 00 FF 
12184     C4 E4 05 F1 | 	add	objptr, ##41156
12188     F2 26 02 F6 | 	mov	local01, objptr
1218c     F2 16 02 F1 | 	add	arg03, objptr
12190     0B 01 68 FC | 	wrlong	#0, arg03
12194                 | ' t1=pop() : channel=converttoint(t1)
12194                 | ' getres(j)=0
12194                 | ' if pos>=0 then
12194     01 00 00 FF 
12198     F4 E5 05 F1 | 	add	objptr, ##1012
1219c     F2 28 02 FB | 	rdlong	local02, objptr
121a0     52 00 00 FF 
121a4     B8 E4 85 F1 | 	sub	objptr, ##42168
121a8     00 28 56 F2 | 	cmps	local02, #0 wc
121ac     F0 01 90 CD |  if_b	jmp	#LR__1501
121b0                 | '   for i=0 to  amount/1024
121b0     10 4E 05 F1 | 	add	fp, #16
121b4     A7 00 68 FC | 	wrlong	#0, fp
121b8     08 4E 85 F1 | 	sub	fp, #8
121bc     A7 2A 02 FB | 	rdlong	local03, fp
121c0     08 4E 85 F1 | 	sub	fp, #8
121c4     15 2D 52 F6 | 	abs	local04, local03 wc
121c8     0A 2C 46 F0 | 	shr	local04, #10
121cc     16 2D 82 F6 | 	negc	local04, local04
121d0     01 2C 06 F1 | 	add	local04, #1
121d4                 | LR__1495
121d4     10 4E 05 F1 | 	add	fp, #16
121d8     A7 2A 02 FB | 	rdlong	local03, fp
121dc     10 4E 85 F1 | 	sub	fp, #16
121e0     16 2B 52 F2 | 	cmps	local03, local04 wc
121e4     9C 03 90 3D |  if_ae	jmp	#LR__1509
121e8                 | '     get #channel,pos+1,block(0),amount,r
121e8     04 4E 05 F1 | 	add	fp, #4
121ec     A7 12 02 FB | 	rdlong	arg01, fp
121f0     52 00 00 FF 
121f4     B8 E4 05 F1 | 	add	objptr, ##42168
121f8     F2 14 02 FB | 	rdlong	arg02, objptr
121fc     01 14 06 F1 | 	add	arg02, #1
12200     04 00 00 FF 
12204     04 E4 85 F1 | 	sub	objptr, ##2052
12208     F2 16 02 F6 | 	mov	arg03, objptr
1220c     4E 00 00 FF 
12210     B4 E4 85 F1 | 	sub	objptr, ##40116
12214     04 4E 05 F1 | 	add	fp, #4
12218     A7 18 02 FB | 	rdlong	arg04, fp
1221c     08 4E 85 F1 | 	sub	fp, #8
12220     01 1A 06 F6 | 	mov	arg05, #1
12224     D0 45 B1 FD | 	call	#__system___basic_get
12228     18 4E 05 F1 | 	add	fp, #24
1222c     A7 FA 61 FC | 	wrlong	result1, fp
12230                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12230     0C 4E 85 F1 | 	sub	fp, #12
12234     A7 28 02 FB | 	rdlong	local02, fp
12238     0C 4E 85 F1 | 	sub	fp, #12
1223c     00 04 00 FF 
12240     00 28 56 F2 | 	cmps	local02, ##524288 wc
12244     7C 00 90 3D |  if_ae	jmp	#LR__1497
12248     14 4E 05 F1 | 	add	fp, #20
1224c     A7 00 68 FC | 	wrlong	#0, fp
12250     04 4E 05 F1 | 	add	fp, #4
12254     A7 2E 02 FB | 	rdlong	local05, fp
12258     18 4E 85 F1 | 	sub	fp, #24
1225c                 | LR__1496
1225c     14 4E 05 F1 | 	add	fp, #20
12260     A7 28 02 FB | 	rdlong	local02, fp
12264     14 4E 85 F1 | 	sub	fp, #20
12268     17 29 52 F2 | 	cmps	local02, local05 wc
1226c     D8 00 90 3D |  if_ae	jmp	#LR__1500
12270     0C 4E 05 F1 | 	add	fp, #12
12274     A7 12 02 FB | 	rdlong	arg01, fp
12278     04 4E 05 F1 | 	add	fp, #4
1227c     A7 2A 02 FB | 	rdlong	local03, fp
12280     0A 2A 66 F0 | 	shl	local03, #10
12284     15 13 02 F1 | 	add	arg01, local03
12288     04 4E 05 F1 | 	add	fp, #4
1228c     A7 2A 02 FB | 	rdlong	local03, fp
12290     15 13 02 F1 | 	add	arg01, local03
12294     4E 00 00 FF 
12298     B4 E4 05 F1 | 	add	objptr, ##40116
1229c     F2 2A 02 F1 | 	add	local03, objptr
122a0     15 15 C2 FA | 	rdbyte	arg02, local03
122a4     09 15 42 FC | 	wrbyte	arg02, arg01
122a8     4E 00 00 FF 
122ac     B4 E4 85 F1 | 	sub	objptr, ##40116
122b0     A7 2A 02 FB | 	rdlong	local03, fp
122b4     01 2A 06 F1 | 	add	local03, #1
122b8     A7 2A 62 FC | 	wrlong	local03, fp
122bc     14 4E 85 F1 | 	sub	fp, #20
122c0     98 FF 9F FD | 	jmp	#LR__1496
122c4                 | LR__1497
122c4     14 4E 05 F1 | 	add	fp, #20
122c8     A7 00 68 FC | 	wrlong	#0, fp
122cc     04 4E 05 F1 | 	add	fp, #4
122d0     A7 30 02 FB | 	rdlong	local06, fp
122d4     18 4E 85 F1 | 	sub	fp, #24
122d8                 | LR__1498
122d8     14 4E 05 F1 | 	add	fp, #20
122dc     A7 28 02 FB | 	rdlong	local02, fp
122e0     14 4E 85 F1 | 	sub	fp, #20
122e4     18 29 52 F2 | 	cmps	local02, local06 wc
122e8     5C 00 90 3D |  if_ae	jmp	#LR__1499
122ec     0C 4E 05 F1 | 	add	fp, #12
122f0     A7 12 02 FB | 	rdlong	arg01, fp
122f4     04 4E 05 F1 | 	add	fp, #4
122f8     A7 2E 02 FB | 	rdlong	local05, fp
122fc     0A 2E 66 F0 | 	shl	local05, #10
12300     17 13 02 F1 | 	add	arg01, local05
12304     04 4E 05 F1 | 	add	fp, #4
12308     A7 2E 02 FB | 	rdlong	local05, fp
1230c     17 13 02 F1 | 	add	arg01, local05
12310     14 4E 85 F1 | 	sub	fp, #20
12314     4E 00 00 FF 
12318     B4 E4 05 F1 | 	add	objptr, ##40116
1231c     F2 2E 02 F1 | 	add	local05, objptr
12320     17 15 C2 FA | 	rdbyte	arg02, local05
12324     4E 00 00 FF 
12328     B4 E4 85 F1 | 	sub	objptr, ##40116
1232c     9C FE B0 FD | 	call	#_pspoke
12330     14 4E 05 F1 | 	add	fp, #20
12334     A7 2E 02 FB | 	rdlong	local05, fp
12338     01 2E 06 F1 | 	add	local05, #1
1233c     A7 2E 62 FC | 	wrlong	local05, fp
12340     14 4E 85 F1 | 	sub	fp, #20
12344     90 FF 9F FD | 	jmp	#LR__1498
12348                 | LR__1499
12348                 | LR__1500
12348     14 4E 05 F1 | 	add	fp, #20
1234c     A7 30 02 FB | 	rdlong	local06, fp
12350     18 2B 02 F6 | 	mov	local03, local06
12354     02 2A 66 F0 | 	shl	local03, #2
12358     50 00 00 FF 
1235c     C4 E4 05 F1 | 	add	objptr, ##41156
12360     F2 2A 02 F1 | 	add	local03, objptr
12364     02 30 66 F0 | 	shl	local06, #2
12368     F2 30 02 F1 | 	add	local06, objptr
1236c     18 31 02 FB | 	rdlong	local06, local06
12370     04 4E 05 F1 | 	add	fp, #4
12374     A7 2E 02 FB | 	rdlong	local05, fp
12378     17 31 02 F1 | 	add	local06, local05
1237c     15 31 62 FC | 	wrlong	local06, local03
12380     08 4E 85 F1 | 	sub	fp, #8
12384     A7 30 02 FB | 	rdlong	local06, fp
12388     01 30 06 F1 | 	add	local06, #1
1238c     A7 30 62 FC | 	wrlong	local06, fp
12390     10 4E 85 F1 | 	sub	fp, #16
12394     50 00 00 FF 
12398     C4 E4 85 F1 | 	sub	objptr, ##41156
1239c     34 FE 9F FD | 	jmp	#LR__1495
123a0                 | LR__1501
123a0                 | '   for i=0 to  amount/1024
123a0     10 4E 05 F1 | 	add	fp, #16
123a4     A7 00 68 FC | 	wrlong	#0, fp
123a8     08 4E 85 F1 | 	sub	fp, #8
123ac     A7 2A 02 FB | 	rdlong	local03, fp
123b0     08 4E 85 F1 | 	sub	fp, #8
123b4     15 33 52 F6 | 	abs	local07, local03 wc
123b8     0A 32 46 F0 | 	shr	local07, #10
123bc     19 33 82 F6 | 	negc	local07, local07
123c0     01 32 06 F1 | 	add	local07, #1
123c4                 | LR__1502
123c4     10 4E 05 F1 | 	add	fp, #16
123c8     A7 2A 02 FB | 	rdlong	local03, fp
123cc     10 4E 85 F1 | 	sub	fp, #16
123d0     19 2B 52 F2 | 	cmps	local03, local07 wc
123d4     AC 01 90 3D |  if_ae	jmp	#LR__1508
123d8                 | '     get #channel,,block(0),amount,r
123d8     04 4E 05 F1 | 	add	fp, #4
123dc     A7 12 02 FB | 	rdlong	arg01, fp
123e0     4E 00 00 FF 
123e4     B4 E4 05 F1 | 	add	objptr, ##40116
123e8     F2 16 02 F6 | 	mov	arg03, objptr
123ec     4E 00 00 FF 
123f0     B4 E4 85 F1 | 	sub	objptr, ##40116
123f4     04 4E 05 F1 | 	add	fp, #4
123f8     A7 18 02 FB | 	rdlong	arg04, fp
123fc     08 4E 85 F1 | 	sub	fp, #8
12400     00 14 06 F6 | 	mov	arg02, #0
12404     01 1A 06 F6 | 	mov	arg05, #1
12408     EC 43 B1 FD | 	call	#__system___basic_get
1240c     18 4E 05 F1 | 	add	fp, #24
12410     A7 FA 61 FC | 	wrlong	result1, fp
12414                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12414     0C 4E 85 F1 | 	sub	fp, #12
12418     A7 28 02 FB | 	rdlong	local02, fp
1241c     0C 4E 85 F1 | 	sub	fp, #12
12420     00 04 00 FF 
12424     00 28 56 F2 | 	cmps	local02, ##524288 wc
12428     7C 00 90 3D |  if_ae	jmp	#LR__1504
1242c     14 4E 05 F1 | 	add	fp, #20
12430     A7 00 68 FC | 	wrlong	#0, fp
12434     04 4E 05 F1 | 	add	fp, #4
12438     A7 34 02 FB | 	rdlong	local08, fp
1243c     18 4E 85 F1 | 	sub	fp, #24
12440                 | LR__1503
12440     14 4E 05 F1 | 	add	fp, #20
12444     A7 28 02 FB | 	rdlong	local02, fp
12448     14 4E 85 F1 | 	sub	fp, #20
1244c     1A 29 52 F2 | 	cmps	local02, local08 wc
12450     D8 00 90 3D |  if_ae	jmp	#LR__1507
12454     0C 4E 05 F1 | 	add	fp, #12
12458     A7 12 02 FB | 	rdlong	arg01, fp
1245c     04 4E 05 F1 | 	add	fp, #4
12460     A7 30 02 FB | 	rdlong	local06, fp
12464     0A 30 66 F0 | 	shl	local06, #10
12468     18 13 02 F1 | 	add	arg01, local06
1246c     04 4E 05 F1 | 	add	fp, #4
12470     A7 30 02 FB | 	rdlong	local06, fp
12474     18 13 02 F1 | 	add	arg01, local06
12478     4E 00 00 FF 
1247c     B4 E4 05 F1 | 	add	objptr, ##40116
12480     F2 30 02 F1 | 	add	local06, objptr
12484     18 15 C2 FA | 	rdbyte	arg02, local06
12488     09 15 42 FC | 	wrbyte	arg02, arg01
1248c     4E 00 00 FF 
12490     B4 E4 85 F1 | 	sub	objptr, ##40116
12494     A7 30 02 FB | 	rdlong	local06, fp
12498     01 30 06 F1 | 	add	local06, #1
1249c     A7 30 62 FC | 	wrlong	local06, fp
124a0     14 4E 85 F1 | 	sub	fp, #20
124a4     98 FF 9F FD | 	jmp	#LR__1503
124a8                 | LR__1504
124a8     14 4E 05 F1 | 	add	fp, #20
124ac     A7 00 68 FC | 	wrlong	#0, fp
124b0     04 4E 05 F1 | 	add	fp, #4
124b4     A7 36 02 FB | 	rdlong	local09, fp
124b8     18 4E 85 F1 | 	sub	fp, #24
124bc                 | LR__1505
124bc     14 4E 05 F1 | 	add	fp, #20
124c0     A7 28 02 FB | 	rdlong	local02, fp
124c4     14 4E 85 F1 | 	sub	fp, #20
124c8     1B 29 52 F2 | 	cmps	local02, local09 wc
124cc     5C 00 90 3D |  if_ae	jmp	#LR__1506
124d0     0C 4E 05 F1 | 	add	fp, #12
124d4     A7 12 02 FB | 	rdlong	arg01, fp
124d8     04 4E 05 F1 | 	add	fp, #4
124dc     A7 34 02 FB | 	rdlong	local08, fp
124e0     0A 34 66 F0 | 	shl	local08, #10
124e4     1A 13 02 F1 | 	add	arg01, local08
124e8     04 4E 05 F1 | 	add	fp, #4
124ec     A7 34 02 FB | 	rdlong	local08, fp
124f0     1A 13 02 F1 | 	add	arg01, local08
124f4     14 4E 85 F1 | 	sub	fp, #20
124f8     4E 00 00 FF 
124fc     B4 E4 05 F1 | 	add	objptr, ##40116
12500     F2 34 02 F1 | 	add	local08, objptr
12504     1A 15 C2 FA | 	rdbyte	arg02, local08
12508     4E 00 00 FF 
1250c     B4 E4 85 F1 | 	sub	objptr, ##40116
12510     B8 FC B0 FD | 	call	#_pspoke
12514     14 4E 05 F1 | 	add	fp, #20
12518     A7 34 02 FB | 	rdlong	local08, fp
1251c     01 34 06 F1 | 	add	local08, #1
12520     A7 34 62 FC | 	wrlong	local08, fp
12524     14 4E 85 F1 | 	sub	fp, #20
12528     90 FF 9F FD | 	jmp	#LR__1505
1252c                 | LR__1506
1252c                 | LR__1507
1252c     14 4E 05 F1 | 	add	fp, #20
12530     A7 36 02 FB | 	rdlong	local09, fp
12534     1B 31 02 F6 | 	mov	local06, local09
12538     02 30 66 F0 | 	shl	local06, #2
1253c     50 00 00 FF 
12540     C4 E4 05 F1 | 	add	objptr, ##41156
12544     F2 30 02 F1 | 	add	local06, objptr
12548     02 36 66 F0 | 	shl	local09, #2
1254c     F2 36 02 F1 | 	add	local09, objptr
12550     1B 37 02 FB | 	rdlong	local09, local09
12554     04 4E 05 F1 | 	add	fp, #4
12558     A7 34 02 FB | 	rdlong	local08, fp
1255c     1A 37 02 F1 | 	add	local09, local08
12560     18 37 62 FC | 	wrlong	local09, local06
12564     08 4E 85 F1 | 	sub	fp, #8
12568     A7 36 02 FB | 	rdlong	local09, fp
1256c     01 36 06 F1 | 	add	local09, #1
12570     A7 36 62 FC | 	wrlong	local09, fp
12574     10 4E 85 F1 | 	sub	fp, #16
12578     50 00 00 FF 
1257c     C4 E4 85 F1 | 	sub	objptr, ##41156
12580     40 FE 9F FD | 	jmp	#LR__1502
12584                 | LR__1508
12584                 | LR__1509
12584     A7 F0 03 F6 | 	mov	ptra, fp
12588     B2 00 A0 FD | 	call	#popregs_
1258c                 | _do_get_ret
1258c     2D 00 64 FD | 	ret
12590                 | 
12590                 | ' 
12590                 | ' '-------------------- getenvsustain
12590                 | ' 
12590                 | ' sub do_getenvsustain
12590                 | _do_getenvsustain
12590     01 4A 05 F6 | 	mov	COUNT_, #1
12594     A8 00 A0 FD | 	call	#pushregs_
12598     10 F0 07 F1 | 	add	ptra, #16
1259c     4A 00 00 FF 
125a0     80 E4 05 F1 | 	add	objptr, ##38016
125a4     F2 26 02 FB | 	rdlong	local01, objptr
125a8     13 17 02 F6 | 	mov	arg03, local01
125ac     01 16 66 F0 | 	shl	arg03, #1
125b0     13 17 02 F1 | 	add	arg03, local01
125b4     02 16 66 F0 | 	shl	arg03, #2
125b8     03 00 00 FF 
125bc     04 E4 85 F1 | 	sub	objptr, ##1540
125c0     F2 16 02 F1 | 	add	arg03, objptr
125c4     0B 17 02 FB | 	rdlong	arg03, arg03
125c8     0C 4E 05 F1 | 	add	fp, #12
125cc     A7 16 62 FC | 	wrlong	arg03, fp
125d0                 | ' 
125d0                 | ' numpar=compiledline(lineptr_e).result.uresult
125d0                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
125d0     0C 4E 85 F1 | 	sub	fp, #12
125d4     02 16 16 F2 | 	cmp	arg03, #2 wc
125d8     47 00 00 FF 
125dc     7C E4 85 F1 | 	sub	objptr, ##36476
125e0     0C 4E 05 C1 |  if_b	add	fp, #12
125e4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
125e8     0C 4E 85 C1 |  if_b	sub	fp, #12
125ec     40 00 90 4D |  if_c_and_nz	jmp	#LR__1510
125f0     00 12 06 F6 | 	mov	arg01, #0
125f4     B8 90 B1 FD | 	call	#__system___getiolock_0599
125f8     FD 12 02 F6 | 	mov	arg01, result1
125fc     88 33 B1 FD | 	call	#__system___lockmem
12600     AE 01 00 FF 
12604     CE 15 06 F6 | 	mov	arg02, ##@LR__5868
12608     00 12 06 F6 | 	mov	arg01, #0
1260c     00 16 06 F6 | 	mov	arg03, #0
12610     68 40 B1 FD | 	call	#__system___basic_print_string
12614     00 12 06 F6 | 	mov	arg01, #0
12618     94 90 B1 FD | 	call	#__system___getiolock_0599
1261c     FD 00 68 FC | 	wrlong	#0, result1
12620     27 12 06 F6 | 	mov	arg01, #39
12624     00 14 06 F6 | 	mov	arg02, #0
12628     70 F9 B0 FD | 	call	#_printerror
1262c     64 00 90 FD | 	jmp	#LR__1511
12630                 | LR__1510
12630     4C A6 BF FD | 	call	#_pop
12634     FD 26 02 F6 | 	mov	local01, result1
12638     FE 16 02 F6 | 	mov	arg03, result2
1263c     A7 26 62 FC | 	wrlong	local01, fp
12640     04 4E 05 F1 | 	add	fp, #4
12644     A7 16 62 FC | 	wrlong	arg03, fp
12648     04 4E 05 F1 | 	add	fp, #4
1264c     A7 FE 61 FC | 	wrlong	result3, fp
12650     08 4E 85 F1 | 	sub	fp, #8
12654     A7 12 02 F6 | 	mov	arg01, fp
12658     08 A8 BF FD | 	call	#_converttoint
1265c     FD 26 02 F6 | 	mov	local01, result1
12660     01 26 66 F0 | 	shl	local01, #1
12664     52 00 00 FF 
12668     60 E4 05 F1 | 	add	objptr, ##42080
1266c     F2 26 02 F1 | 	add	local01, objptr
12670     13 27 E2 FA | 	rdword	local01, local01
12674     A7 26 62 FC | 	wrlong	local01, fp
12678     08 4E 05 F1 | 	add	fp, #8
1267c     A7 38 68 FC | 	wrlong	#28, fp
12680     08 4E 85 F1 | 	sub	fp, #8
12684     A7 12 02 F6 | 	mov	arg01, fp
12688     52 00 00 FF 
1268c     60 E4 85 F1 | 	sub	objptr, ##42080
12690     84 A6 BF FD | 	call	#_push
12694                 | LR__1511
12694     A7 F0 03 F6 | 	mov	ptra, fp
12698     B2 00 A0 FD | 	call	#popregs_
1269c                 | _do_getenvsustain_ret
1269c     2D 00 64 FD | 	ret
126a0                 | 
126a0                 | ' 
126a0                 | ' '-------------------- getnotevalue
126a0                 | ' 
126a0                 | ' sub do_getnotevalue
126a0                 | _do_getnotevalue
126a0     01 4A 05 F6 | 	mov	COUNT_, #1
126a4     A8 00 A0 FD | 	call	#pushregs_
126a8     1C F0 07 F1 | 	add	ptra, #28
126ac     D0 A5 BF FD | 	call	#_pop
126b0     FF 14 02 F6 | 	mov	arg02, result3
126b4     10 4E 05 F1 | 	add	fp, #16
126b8     A7 FA 61 FC | 	wrlong	result1, fp
126bc     04 4E 05 F1 | 	add	fp, #4
126c0     A7 FC 61 FC | 	wrlong	result2, fp
126c4     04 4E 05 F1 | 	add	fp, #4
126c8     A7 14 62 FC | 	wrlong	arg02, fp
126cc     08 4E 85 F1 | 	sub	fp, #8
126d0     A7 12 02 F6 | 	mov	arg01, fp
126d4     10 4E 85 F1 | 	sub	fp, #16
126d8     88 A7 BF FD | 	call	#_converttoint
126dc     FD 14 52 F6 | 	abs	arg02, result1 wc
126e0     0C 14 16 FD | 	qdiv	arg02, #12
126e4     0C 4E 05 F1 | 	add	fp, #12
126e8     A7 FA 61 FC | 	wrlong	result1, fp
126ec     14 00 00 FF 
126f0     D8 E4 05 F1 | 	add	objptr, ##10456
126f4     08 4E 85 F1 | 	sub	fp, #8
126f8     19 14 62 FD | 	getqy	arg02
126fc     0A 15 82 F6 | 	negc	arg02, arg02
12700     02 14 66 F0 | 	shl	arg02, #2
12704     F2 14 02 F1 | 	add	arg02, objptr
12708     0A 15 02 FB | 	rdlong	arg02, arg02
1270c     A7 14 62 FC | 	wrlong	arg02, fp
12710     08 4E 05 F1 | 	add	fp, #8
12714     A7 14 02 FB | 	rdlong	arg02, fp
12718     0A 15 52 F6 | 	abs	arg02, arg02 wc
1271c     0C 14 16 FD | 	qdiv	arg02, #12
12720     0C 4E 85 F1 | 	sub	fp, #12
12724     14 00 00 FF 
12728     D8 E4 85 F1 | 	sub	objptr, ##10456
1272c     18 14 62 FD | 	getqx	arg02
12730     0A 13 82 F6 | 	negc	arg01, arg02
12734     09 13 52 F6 | 	abs	arg01, arg01 wc
12738     1F 26 C6 C9 |  if_b	decod	local01, #31
1273c     00 26 06 36 |  if_ae	mov	local01, #0
12740     B8 5C B1 FD | 	call	#__system___float_fromuns
12744     13 FB 61 F5 | 	xor	result1, local01
12748     08 4E 05 F1 | 	add	fp, #8
1274c     A7 FA 61 FC | 	wrlong	result1, fp
12750     FD 14 02 F6 | 	mov	arg02, result1
12754     08 4E 85 F1 | 	sub	fp, #8
12758     1E 12 C6 F9 | 	decod	arg01, #30
1275c     A8 6F B1 FD | 	call	#__system____builtin_powf
12760     FD 12 02 F6 | 	mov	arg01, result1
12764     04 4E 05 F1 | 	add	fp, #4
12768     A7 14 02 FB | 	rdlong	arg02, fp
1276c     04 4E 85 F1 | 	sub	fp, #4
12770     8C 60 B1 FD | 	call	#__system___float_mul
12774     A7 FA 61 FC | 	wrlong	result1, fp
12778     10 4E 05 F1 | 	add	fp, #16
1277c     A7 FA 61 FC | 	wrlong	result1, fp
12780     08 4E 05 F1 | 	add	fp, #8
12784     A7 3C 68 FC | 	wrlong	#30, fp
12788     08 4E 85 F1 | 	sub	fp, #8
1278c     A7 12 02 F6 | 	mov	arg01, fp
12790     10 4E 85 F1 | 	sub	fp, #16
12794     80 A5 BF FD | 	call	#_push
12798     A7 F0 03 F6 | 	mov	ptra, fp
1279c     B2 00 A0 FD | 	call	#popregs_
127a0                 | _do_getnotevalue_ret
127a0     2D 00 64 FD | 	ret
127a4                 | 
127a4                 | ' 
127a4                 | ' '-------------------- getpixel
127a4                 | ' 
127a4                 | ' sub do_getpixel
127a4                 | _do_getpixel
127a4     00 4A 05 F6 | 	mov	COUNT_, #0
127a8     A8 00 A0 FD | 	call	#pushregs_
127ac     24 F0 07 F1 | 	add	ptra, #36
127b0     4A 00 00 FF 
127b4     80 E4 05 F1 | 	add	objptr, ##38016
127b8     F2 16 02 FB | 	rdlong	arg03, objptr
127bc     0B 15 02 F6 | 	mov	arg02, arg03
127c0     01 14 66 F0 | 	shl	arg02, #1
127c4     0B 15 02 F1 | 	add	arg02, arg03
127c8     02 14 66 F0 | 	shl	arg02, #2
127cc     03 00 00 FF 
127d0     04 E4 85 F1 | 	sub	objptr, ##1540
127d4     F2 14 02 F1 | 	add	arg02, objptr
127d8     0A 17 02 FB | 	rdlong	arg03, arg02
127dc     18 4E 05 F1 | 	add	fp, #24
127e0     A7 16 62 FC | 	wrlong	arg03, fp
127e4                 | ' 
127e4                 | ' numpar=compiledline(lineptr_e).result.uresult
127e4                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
127e4     18 4E 85 F1 | 	sub	fp, #24
127e8     02 16 0E F2 | 	cmp	arg03, #2 wz
127ec     47 00 00 FF 
127f0     7C E4 85 F1 | 	sub	objptr, ##36476
127f4     40 00 90 AD |  if_e	jmp	#LR__1520
127f8     00 12 06 F6 | 	mov	arg01, #0
127fc     B0 8E B1 FD | 	call	#__system___getiolock_0599
12800     FD 12 02 F6 | 	mov	arg01, result1
12804     80 31 B1 FD | 	call	#__system___lockmem
12808     AE 01 00 FF 
1280c     DE 15 06 F6 | 	mov	arg02, ##@LR__5869
12810     00 12 06 F6 | 	mov	arg01, #0
12814     00 16 06 F6 | 	mov	arg03, #0
12818     60 3E B1 FD | 	call	#__system___basic_print_string
1281c     00 12 06 F6 | 	mov	arg01, #0
12820     8C 8E B1 FD | 	call	#__system___getiolock_0599
12824     FD 00 68 FC | 	wrlong	#0, result1
12828     27 12 06 F6 | 	mov	arg01, #39
1282c     00 14 06 F6 | 	mov	arg02, #0
12830     68 F7 B0 FD | 	call	#_printerror
12834     B4 00 90 FD | 	jmp	#LR__1521
12838                 | LR__1520
12838     44 A4 BF FD | 	call	#_pop
1283c     FD 16 02 F6 | 	mov	arg03, result1
12840     FE 14 02 F6 | 	mov	arg02, result2
12844     FF 12 02 F6 | 	mov	arg01, result3
12848     0C 4E 05 F1 | 	add	fp, #12
1284c     A7 16 62 FC | 	wrlong	arg03, fp
12850     04 4E 05 F1 | 	add	fp, #4
12854     A7 14 62 FC | 	wrlong	arg02, fp
12858     04 4E 05 F1 | 	add	fp, #4
1285c     A7 12 62 FC | 	wrlong	arg01, fp
12860     14 4E 85 F1 | 	sub	fp, #20
12864     18 A4 BF FD | 	call	#_pop
12868     FF 16 02 F6 | 	mov	arg03, result3
1286c     A7 FA 61 FC | 	wrlong	result1, fp
12870     04 4E 05 F1 | 	add	fp, #4
12874     A7 FC 61 FC | 	wrlong	result2, fp
12878     04 4E 05 F1 | 	add	fp, #4
1287c     A7 16 62 FC | 	wrlong	arg03, fp
12880     08 4E 85 F1 | 	sub	fp, #8
12884     A7 12 02 F6 | 	mov	arg01, fp
12888     D8 A5 BF FD | 	call	#_converttoint
1288c     1C 4E 05 F1 | 	add	fp, #28
12890     A7 FA 61 FC | 	wrlong	result1, fp
12894     10 4E 85 F1 | 	sub	fp, #16
12898     A7 12 02 F6 | 	mov	arg01, fp
1289c     0C 4E 85 F1 | 	sub	fp, #12
128a0     C0 A5 BF FD | 	call	#_converttoint
128a4     FD 16 02 F6 | 	mov	arg03, result1
128a8     20 4E 05 F1 | 	add	fp, #32
128ac     A7 16 62 FC | 	wrlong	arg03, fp
128b0     F2 12 02 FB | 	rdlong	arg01, objptr
128b4     04 4E 85 F1 | 	sub	fp, #4
128b8     A7 FE 01 FB | 	rdlong	result3, fp
128bc     FF 12 02 F1 | 	add	arg01, result3
128c0     1C 4E 85 F1 | 	sub	fp, #28
128c4     0A 16 66 F0 | 	shl	arg03, #10
128c8     0B 13 02 F1 | 	add	arg01, arg03
128cc     44 F9 B0 FD | 	call	#_pspeek
128d0     FD FA E1 F8 | 	getbyte	result1, result1, #0
128d4     A7 FA 61 FC | 	wrlong	result1, fp
128d8     08 4E 05 F1 | 	add	fp, #8
128dc     A7 3A 68 FC | 	wrlong	#29, fp
128e0     08 4E 85 F1 | 	sub	fp, #8
128e4     A7 12 02 F6 | 	mov	arg01, fp
128e8     2C A4 BF FD | 	call	#_push
128ec                 | LR__1521
128ec     A7 F0 03 F6 | 	mov	ptra, fp
128f0     B2 00 A0 FD | 	call	#popregs_
128f4                 | _do_getpixel_ret
128f4     2D 00 64 FD | 	ret
128f8                 | 
128f8                 | ' 
128f8                 | ' '-------------------- gettime
128f8                 | ' 
128f8                 | ' sub do_gettime
128f8                 | _do_gettime
128f8     02 4A 05 F6 | 	mov	COUNT_, #2
128fc     A8 00 A0 FD | 	call	#pushregs_
12900     14 F0 07 F1 | 	add	ptra, #20
12904                 | ' 
12904                 | ' const asm 
12904     1A 26 72 FD | 	getct	local01 wc
12908     1A 28 62 FD | 	getct	local02
1290c                 | ' return hi1, lo1
1290c     14 FD 01 F6 | 	mov	result2, local02
12910     A7 26 62 FC | 	wrlong	local01, fp
12914     04 4E 05 F1 | 	add	fp, #4
12918     A7 FC 61 FC | 	wrlong	result2, fp
1291c     0C 4E 05 F1 | 	add	fp, #12
12920     A7 3A 68 FC | 	wrlong	#29, fp
12924     0C 4E 85 F1 | 	sub	fp, #12
12928     A7 12 02 FB | 	rdlong	arg01, fp
1292c     04 4E 05 F1 | 	add	fp, #4
12930     A7 12 62 FC | 	wrlong	arg01, fp
12934     08 4E 85 F1 | 	sub	fp, #8
12938     A7 12 02 FB | 	rdlong	arg01, fp
1293c     0C 4E 05 F1 | 	add	fp, #12
12940     A7 12 62 FC | 	wrlong	arg01, fp
12944     04 4E 85 F1 | 	sub	fp, #4
12948     A7 12 02 F6 | 	mov	arg01, fp
1294c     08 4E 85 F1 | 	sub	fp, #8
12950     C4 A3 BF FD | 	call	#_push
12954     A7 F0 03 F6 | 	mov	ptra, fp
12958     B2 00 A0 FD | 	call	#popregs_
1295c                 | _do_gettime_ret
1295c     2D 00 64 FD | 	ret
12960                 | 
12960                 | ' 
12960                 | ' '-------------------- gosub
12960                 | ' 
12960                 | ' sub do_gosub()
12960                 | _do_gosub
12960     50 00 00 FF 
12964     34 E5 05 F1 | 	add	objptr, ##41268
12968     F2 00 02 FB | 	rdlong	_var01, objptr
1296c     01 00 06 F1 | 	add	_var01, #1
12970     F2 00 62 FC | 	wrlong	_var01, objptr
12974                 | ' gosubtop+=1
12974                 | ' if compiledline(lineptr_e+1).result_type=token_end then
12974     06 00 00 FF 
12978     B4 E4 85 F1 | 	sub	objptr, ##3252
1297c     F2 00 02 FB | 	rdlong	_var01, objptr
12980     01 00 06 F1 | 	add	_var01, #1
12984     00 03 02 F6 | 	mov	_var02, _var01
12988     01 02 66 F0 | 	shl	_var02, #1
1298c     00 03 02 F1 | 	add	_var02, _var01
12990     02 02 66 F0 | 	shl	_var02, #2
12994     03 00 00 FF 
12998     04 E4 85 F1 | 	sub	objptr, ##1540
1299c     F2 02 02 F1 | 	add	_var02, objptr
129a0     08 02 06 F1 | 	add	_var02, #8
129a4     01 03 02 FB | 	rdlong	_var02, _var02
129a8     FE 03 0E F2 | 	cmp	_var02, #510 wz
129ac     47 00 00 FF 
129b0     7C E4 85 F1 | 	sub	objptr, ##36476
129b4     58 00 90 5D |  if_ne	jmp	#LR__1530
129b8     50 00 00 FF 
129bc     34 E5 05 F1 | 	add	objptr, ##41268
129c0     F2 02 02 FB | 	rdlong	_var02, objptr
129c4     03 02 66 F0 | 	shl	_var02, #3
129c8     03 00 00 FF 
129cc     88 E5 85 F1 | 	sub	objptr, ##1928
129d0     F2 02 02 F1 | 	add	_var02, objptr
129d4     03 00 00 FF 
129d8     0C E5 05 F1 | 	add	objptr, ##1804
129dc     F2 00 02 FB | 	rdlong	_var01, objptr
129e0     01 01 62 FC | 	wrlong	_var01, _var02
129e4     7C E4 05 F1 | 	add	objptr, #124
129e8     F2 02 02 FB | 	rdlong	_var02, objptr
129ec     03 02 66 F0 | 	shl	_var02, #3
129f0     03 00 00 FF 
129f4     88 E5 85 F1 | 	sub	objptr, ##1928
129f8     F2 02 02 F1 | 	add	_var02, objptr
129fc     04 02 06 F1 | 	add	_var02, #4
12a00     01 01 68 FC | 	wrlong	#0, _var02
12a04     4C 00 00 FF 
12a08     AC E5 85 F1 | 	sub	objptr, ##39340
12a0c     64 00 90 FD | 	jmp	#LR__1531
12a10                 | LR__1530
12a10     50 00 00 FF 
12a14     34 E5 05 F1 | 	add	objptr, ##41268
12a18     F2 02 02 FB | 	rdlong	_var02, objptr
12a1c     03 02 66 F0 | 	shl	_var02, #3
12a20     03 00 00 FF 
12a24     88 E5 85 F1 | 	sub	objptr, ##1928
12a28     F2 02 02 F1 | 	add	_var02, objptr
12a2c     03 00 00 FF 
12a30     14 E5 05 F1 | 	add	objptr, ##1812
12a34     F2 00 02 FB | 	rdlong	_var01, objptr
12a38     01 01 62 FC | 	wrlong	_var01, _var02
12a3c     74 E4 05 F1 | 	add	objptr, #116
12a40     F2 02 02 FB | 	rdlong	_var02, objptr
12a44     03 02 66 F0 | 	shl	_var02, #3
12a48     03 00 00 FF 
12a4c     88 E5 85 F1 | 	sub	objptr, ##1928
12a50     F2 02 02 F1 | 	add	_var02, objptr
12a54     02 00 00 FF 
12a58     2C E5 85 F1 | 	sub	objptr, ##1324
12a5c     F2 00 02 FB | 	rdlong	_var01, objptr
12a60     4A 00 00 FF 
12a64     80 E4 85 F1 | 	sub	objptr, ##38016
12a68     02 00 06 F1 | 	add	_var01, #2
12a6c     04 02 06 F1 | 	add	_var02, #4
12a70     01 01 62 FC | 	wrlong	_var01, _var02
12a74                 | LR__1531
12a74                 | _do_gosub_ret
12a74     2D 00 64 FD | 	ret
12a78                 | 
12a78                 | ' 
12a78                 | ' '--------------------- goto
12a78                 | ' 
12a78                 | ' '------- fast goto
12a78                 | ' 
12a78                 | ' sub do_fast_goto
12a78                 | _do_fast_goto
12a78     02 4A 05 F6 | 	mov	COUNT_, #2
12a7c     A8 00 A0 FD | 	call	#pushregs_
12a80                 | _do_fast_goto_enter
12a80     4A 00 00 FF 
12a84     80 E4 05 F1 | 	add	objptr, ##38016
12a88     F2 12 02 FB | 	rdlong	arg01, objptr
12a8c     09 27 02 F6 | 	mov	local01, arg01
12a90     01 26 66 F0 | 	shl	local01, #1
12a94     09 27 02 F1 | 	add	local01, arg01
12a98     02 26 66 F0 | 	shl	local01, #2
12a9c     03 00 00 FF 
12aa0     04 E4 85 F1 | 	sub	objptr, ##1540
12aa4     F2 26 02 F1 | 	add	local01, objptr
12aa8     13 29 02 FB | 	rdlong	local02, local01
12aac     14 13 02 F6 | 	mov	arg01, local02
12ab0     47 00 00 FF 
12ab4     7C E4 85 F1 | 	sub	objptr, ##36476
12ab8     B0 F7 B0 FD | 	call	#_pslpeek
12abc     FD 12 02 F6 | 	mov	arg01, result1
12ac0                 | ' 
12ac0                 | ' testptr=compiledline(lineptr_e).result.uresult
12ac0                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
12ac0                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
12ac0     4A 00 00 FF 
12ac4     80 E4 05 F1 | 	add	objptr, ##38016
12ac8     F2 FA 01 FB | 	rdlong	result1, objptr
12acc     FD 26 02 F6 | 	mov	local01, result1
12ad0     01 26 66 F0 | 	shl	local01, #1
12ad4     FD 26 02 F1 | 	add	local01, result1
12ad8     02 26 66 F0 | 	shl	local01, #2
12adc     03 00 00 FF 
12ae0     04 E4 85 F1 | 	sub	objptr, ##1540
12ae4     F2 26 02 F1 | 	add	local01, objptr
12ae8     04 26 06 F1 | 	add	local01, #4
12aec     13 27 02 FB | 	rdlong	local01, local01
12af0     13 13 0A F2 | 	cmp	arg01, local01 wz
12af4     47 00 00 FF 
12af8     7C E4 85 F1 | 	sub	objptr, ##36476
12afc     58 00 90 5D |  if_ne	jmp	#LR__1540
12b00     50 00 00 FF 
12b04     B8 E4 05 F1 | 	add	objptr, ##41144
12b08     F2 28 62 FC | 	wrlong	local02, objptr
12b0c     06 00 00 FF 
12b10     3C E4 85 F1 | 	sub	objptr, ##3132
12b14     F2 28 02 FB | 	rdlong	local02, objptr
12b18     01 28 86 F1 | 	sub	local02, #1
12b1c     04 E4 05 F1 | 	add	objptr, #4
12b20     F2 28 62 FC | 	wrlong	local02, objptr
12b24                 | '   runptr=testptr
12b24                 | '   lineptr_e=lineptr-1
12b24                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
12b24     06 00 00 FF 
12b28     84 E4 05 F1 | 	add	objptr, ##3204
12b2c     F2 28 02 FB | 	rdlong	local02, objptr
12b30     50 00 00 FF 
12b34     04 E5 85 F1 | 	sub	objptr, ##41220
12b38     FF FF 3F FF 
12b3c     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12b40     50 00 00 AF 
12b44     04 E5 05 A1 |  if_e	add	objptr, ##41220
12b48     F2 00 68 AC |  if_e	wrlong	#0, objptr
12b4c     50 00 00 AF 
12b50     04 E5 85 A1 |  if_e	sub	objptr, ##41220
12b54     04 00 90 FD | 	jmp	#LR__1541
12b58                 | LR__1540
12b58     0C 00 B0 FD | 	call	#_do_find_goto
12b5c                 | LR__1541
12b5c     A7 F0 03 F6 | 	mov	ptra, fp
12b60     B2 00 A0 FD | 	call	#popregs_
12b64                 | _do_fast_goto_ret
12b64     2D 00 64 FD | 	ret
12b68                 | 
12b68                 | ' 
12b68                 | ' '------- find goto  
12b68                 | ' 
12b68                 | ' sub do_find_goto
12b68                 | _do_find_goto
12b68     03 4A 05 F6 | 	mov	COUNT_, #3
12b6c     A8 00 A0 FD | 	call	#pushregs_
12b70     24 F0 07 F1 | 	add	ptra, #36
12b74                 | _do_find_goto_enter
12b74     4A 00 00 FF 
12b78     80 E4 05 F1 | 	add	objptr, ##38016
12b7c     F2 26 02 FB | 	rdlong	local01, objptr
12b80     13 29 02 F6 | 	mov	local02, local01
12b84     01 28 66 F0 | 	shl	local02, #1
12b88     13 29 02 F1 | 	add	local02, local01
12b8c     02 28 66 F0 | 	shl	local02, #2
12b90     03 00 00 FF 
12b94     04 E4 85 F1 | 	sub	objptr, ##1540
12b98     F2 28 02 F1 | 	add	local02, objptr
12b9c     04 28 06 F1 | 	add	local02, #4
12ba0     14 29 02 FB | 	rdlong	local02, local02
12ba4     A7 28 62 FC | 	wrlong	local02, fp
12ba8     03 00 00 FF 
12bac     0C E4 05 F1 | 	add	objptr, ##1548
12bb0     F2 2A 02 FB | 	rdlong	local03, objptr
12bb4     4A 00 00 FF 
12bb8     88 E4 85 F1 | 	sub	objptr, ##38024
12bbc     04 4E 05 F1 | 	add	fp, #4
12bc0     A7 2A 62 FC | 	wrlong	local03, fp
12bc4     04 4E 85 F1 | 	sub	fp, #4
12bc8                 | ' 
12bc8                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
12bc8                 | ' gotoptr=programstart
12bc8                 | ' do
12bc8                 | LR__1550
12bc8     0C 4E 05 F1 | 	add	fp, #12
12bcc     A7 12 02 F6 | 	mov	arg01, fp
12bd0     08 4E 85 F1 | 	sub	fp, #8
12bd4     A7 14 02 FB | 	rdlong	arg02, fp
12bd8     04 4E 85 F1 | 	sub	fp, #4
12bdc     18 16 06 F6 | 	mov	arg03, #24
12be0     0B 00 00 FF 
12be4     CC E4 05 F1 | 	add	objptr, ##5836
12be8     14 21 B1 FD | 	call	#_psram_spin2_read1
12bec     0B 00 00 FF 
12bf0     CC E4 85 F1 | 	sub	objptr, ##5836
12bf4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12bf4                 | '   if gotoheader(0)<>$FFFFFFFF then
12bf4     0C 4E 05 F1 | 	add	fp, #12
12bf8     A7 2A 02 FB | 	rdlong	local03, fp
12bfc     0C 4E 85 F1 | 	sub	fp, #12
12c00     FF FF 7F FF 
12c04     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
12c08     24 00 90 AD |  if_e	jmp	#LR__1551
12c0c     04 4E 05 F1 | 	add	fp, #4
12c10     A7 2A 02 FB | 	rdlong	local03, fp
12c14     04 4E 05 F1 | 	add	fp, #4
12c18     A7 2A 62 FC | 	wrlong	local03, fp
12c1c     18 4E 05 F1 | 	add	fp, #24
12c20     A7 2A 02 FB | 	rdlong	local03, fp
12c24     1C 4E 85 F1 | 	sub	fp, #28
12c28     A7 2A 62 FC | 	wrlong	local03, fp
12c2c     04 4E 85 F1 | 	sub	fp, #4
12c30                 | LR__1551
12c30     20 4E 05 F1 | 	add	fp, #32
12c34     A7 2A 02 FB | 	rdlong	local03, fp
12c38     20 4E 85 F1 | 	sub	fp, #32
12c3c     FF FF 3F FF 
12c40     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
12c44     0C 4E 05 51 |  if_ne	add	fp, #12
12c48     A7 26 02 5B |  if_ne	rdlong	local01, fp
12c4c     0C 4E 85 51 |  if_ne	sub	fp, #12
12c50     FF FF 7F 5F 
12c54     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
12c58     18 00 90 AD |  if_e	jmp	#LR__1552
12c5c     0C 4E 05 F1 | 	add	fp, #12
12c60     A7 2A 02 FB | 	rdlong	local03, fp
12c64     0C 4E 85 F1 | 	sub	fp, #12
12c68     A7 28 02 FB | 	rdlong	local02, fp
12c6c     14 2B 0A F2 | 	cmp	local03, local02 wz
12c70     54 FF 9F 5D |  if_ne	jmp	#LR__1550
12c74                 | LR__1552
12c74                 | ' 
12c74                 | ' if gotoheader(0)=gotoline then
12c74     0C 4E 05 F1 | 	add	fp, #12
12c78     A7 2A 02 FB | 	rdlong	local03, fp
12c7c     0C 4E 85 F1 | 	sub	fp, #12
12c80     A7 26 02 FB | 	rdlong	local01, fp
12c84     13 2B 0A F2 | 	cmp	local03, local01 wz
12c88     D8 00 90 5D |  if_ne	jmp	#LR__1553
12c8c     4A 00 00 FF 
12c90     80 E4 05 F1 | 	add	objptr, ##38016
12c94     F2 26 02 FB | 	rdlong	local01, objptr
12c98     13 29 02 F6 | 	mov	local02, local01
12c9c     01 28 66 F0 | 	shl	local02, #1
12ca0     13 29 02 F1 | 	add	local02, local01
12ca4     02 28 66 F0 | 	shl	local02, #2
12ca8     03 00 00 FF 
12cac     04 E4 85 F1 | 	sub	objptr, ##1540
12cb0     F2 28 02 F1 | 	add	local02, objptr
12cb4     08 4E 05 F1 | 	add	fp, #8
12cb8     A7 2A 02 FB | 	rdlong	local03, fp
12cbc     14 2B 62 FC | 	wrlong	local03, local02
12cc0     03 00 00 FF 
12cc4     04 E4 05 F1 | 	add	objptr, ##1540
12cc8     F2 26 02 FB | 	rdlong	local01, objptr
12ccc     13 29 02 F6 | 	mov	local02, local01
12cd0     01 28 66 F0 | 	shl	local02, #1
12cd4     13 29 02 F1 | 	add	local02, local01
12cd8     02 28 66 F0 | 	shl	local02, #2
12cdc     03 00 00 FF 
12ce0     04 E4 85 F1 | 	sub	objptr, ##1540
12ce4     F2 28 02 F1 | 	add	local02, objptr
12ce8     08 28 06 F1 | 	add	local02, #8
12cec     14 9D 68 FC | 	wrlong	#78, local02
12cf0     03 00 00 FF 
12cf4     04 E4 05 F1 | 	add	objptr, ##1540
12cf8     F2 28 02 FB | 	rdlong	local02, objptr
12cfc     14 13 02 F6 | 	mov	arg01, local02
12d00     01 12 66 F0 | 	shl	arg01, #1
12d04     14 13 02 F1 | 	add	arg01, local02
12d08     02 12 66 F0 | 	shl	arg01, #2
12d0c     03 00 00 FF 
12d10     04 E4 85 F1 | 	sub	objptr, ##1540
12d14     F2 12 02 F1 | 	add	arg01, objptr
12d18     09 00 00 FF 
12d1c     44 E4 05 F1 | 	add	objptr, ##4676
12d20     F2 14 02 FB | 	rdlong	arg02, objptr
12d24     02 2A 06 F6 | 	mov	local03, #2
12d28     14 2B 02 F1 | 	add	local03, local02
12d2c     0B 00 00 FF 
12d30     5C E4 85 F1 | 	sub	objptr, ##5724
12d34     F2 16 02 FB | 	rdlong	arg03, objptr
12d38     0B 2B 02 FD | 	qmul	local03, arg03
12d3c     08 4E 85 F1 | 	sub	fp, #8
12d40     39 00 00 FF 
12d44     98 E5 85 F1 | 	sub	objptr, ##29592
12d48     18 2A 62 FD | 	getqx	local03
12d4c     15 15 02 F1 | 	add	arg02, local03
12d50     48 20 B1 FD | 	call	#_psram_spin2_write
12d54     0B 00 00 FF 
12d58     CC E4 85 F1 | 	sub	objptr, ##5836
12d5c     18 FD BF FD | 	call	#_do_fast_goto
12d60     0C 00 90 FD | 	jmp	#LR__1554
12d64                 | LR__1553
12d64     26 12 06 F6 | 	mov	arg01, #38
12d68     00 14 06 F6 | 	mov	arg02, #0
12d6c     2C F2 B0 FD | 	call	#_printerror
12d70                 | LR__1554
12d70     A7 F0 03 F6 | 	mov	ptra, fp
12d74     B2 00 A0 FD | 	call	#popregs_
12d78                 | _do_find_goto_ret
12d78     2D 00 64 FD | 	ret
12d7c                 | 
12d7c                 | ' 
12d7c                 | ' '------- slow goto  
12d7c                 | ' 
12d7c                 | ' sub do_slow_goto
12d7c                 | _do_slow_goto
12d7c     02 4A 05 F6 | 	mov	COUNT_, #2
12d80     A8 00 A0 FD | 	call	#pushregs_
12d84     30 F0 07 F1 | 	add	ptra, #48
12d88     F4 9E BF FD | 	call	#_pop
12d8c     FF 26 02 F6 | 	mov	local01, result3
12d90     24 4E 05 F1 | 	add	fp, #36
12d94     A7 FA 61 FC | 	wrlong	result1, fp
12d98     04 4E 05 F1 | 	add	fp, #4
12d9c     A7 FC 61 FC | 	wrlong	result2, fp
12da0     04 4E 05 F1 | 	add	fp, #4
12da4     A7 26 62 FC | 	wrlong	local01, fp
12da8     08 4E 85 F1 | 	sub	fp, #8
12dac     A7 12 02 F6 | 	mov	arg01, fp
12db0     24 4E 85 F1 | 	sub	fp, #36
12db4     AC A0 BF FD | 	call	#_converttoint
12db8     A7 FA 61 FC | 	wrlong	result1, fp
12dbc     4A 00 00 FF 
12dc0     88 E4 05 F1 | 	add	objptr, ##38024
12dc4     F2 28 02 FB | 	rdlong	local02, objptr
12dc8     4A 00 00 FF 
12dcc     88 E4 85 F1 | 	sub	objptr, ##38024
12dd0     04 4E 05 F1 | 	add	fp, #4
12dd4     A7 28 62 FC | 	wrlong	local02, fp
12dd8     04 4E 85 F1 | 	sub	fp, #4
12ddc                 | ' 
12ddc                 | ' t1=pop() : gotoline=converttoint(t1)
12ddc                 | ' gotoptr=programstart
12ddc                 | ' do
12ddc                 | LR__1560
12ddc     0C 4E 05 F1 | 	add	fp, #12
12de0     A7 12 02 F6 | 	mov	arg01, fp
12de4     08 4E 85 F1 | 	sub	fp, #8
12de8     A7 14 02 FB | 	rdlong	arg02, fp
12dec     04 4E 85 F1 | 	sub	fp, #4
12df0     18 16 06 F6 | 	mov	arg03, #24
12df4     0B 00 00 FF 
12df8     CC E4 05 F1 | 	add	objptr, ##5836
12dfc     00 1F B1 FD | 	call	#_psram_spin2_read1
12e00     0B 00 00 FF 
12e04     CC E4 85 F1 | 	sub	objptr, ##5836
12e08                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12e08                 | '   if gotoheader(0)<>$FFFFFFFF then
12e08     0C 4E 05 F1 | 	add	fp, #12
12e0c     A7 28 02 FB | 	rdlong	local02, fp
12e10     0C 4E 85 F1 | 	sub	fp, #12
12e14     FF FF 7F FF 
12e18     FF 29 0E F2 | 	cmp	local02, ##-1 wz
12e1c     24 00 90 AD |  if_e	jmp	#LR__1561
12e20     04 4E 05 F1 | 	add	fp, #4
12e24     A7 28 02 FB | 	rdlong	local02, fp
12e28     04 4E 05 F1 | 	add	fp, #4
12e2c     A7 28 62 FC | 	wrlong	local02, fp
12e30     18 4E 05 F1 | 	add	fp, #24
12e34     A7 28 02 FB | 	rdlong	local02, fp
12e38     1C 4E 85 F1 | 	sub	fp, #28
12e3c     A7 28 62 FC | 	wrlong	local02, fp
12e40     04 4E 85 F1 | 	sub	fp, #4
12e44                 | LR__1561
12e44     20 4E 05 F1 | 	add	fp, #32
12e48     A7 28 02 FB | 	rdlong	local02, fp
12e4c     20 4E 85 F1 | 	sub	fp, #32
12e50     FF FF 3F FF 
12e54     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12e58     0C 4E 05 51 |  if_ne	add	fp, #12
12e5c     A7 26 02 5B |  if_ne	rdlong	local01, fp
12e60     0C 4E 85 51 |  if_ne	sub	fp, #12
12e64     FF FF 7F 5F 
12e68     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
12e6c     18 00 90 AD |  if_e	jmp	#LR__1562
12e70     0C 4E 05 F1 | 	add	fp, #12
12e74     A7 28 02 FB | 	rdlong	local02, fp
12e78     0C 4E 85 F1 | 	sub	fp, #12
12e7c     A7 16 02 FB | 	rdlong	arg03, fp
12e80     0B 29 0A F2 | 	cmp	local02, arg03 wz
12e84     54 FF 9F 5D |  if_ne	jmp	#LR__1560
12e88                 | LR__1562
12e88                 | ' if gotoheader(0)=gotoline then  
12e88     0C 4E 05 F1 | 	add	fp, #12
12e8c     A7 28 02 FB | 	rdlong	local02, fp
12e90     0C 4E 85 F1 | 	sub	fp, #12
12e94     A7 26 02 FB | 	rdlong	local01, fp
12e98     13 29 0A F2 | 	cmp	local02, local01 wz
12e9c     60 00 90 5D |  if_ne	jmp	#LR__1563
12ea0     08 4E 05 F1 | 	add	fp, #8
12ea4     A7 28 02 FB | 	rdlong	local02, fp
12ea8     08 4E 85 F1 | 	sub	fp, #8
12eac     50 00 00 FF 
12eb0     B8 E4 05 F1 | 	add	objptr, ##41144
12eb4     F2 28 62 FC | 	wrlong	local02, objptr
12eb8     06 00 00 FF 
12ebc     3C E4 85 F1 | 	sub	objptr, ##3132
12ec0     F2 28 02 FB | 	rdlong	local02, objptr
12ec4     01 28 86 F1 | 	sub	local02, #1
12ec8     04 E4 05 F1 | 	add	objptr, #4
12ecc     F2 28 62 FC | 	wrlong	local02, objptr
12ed0                 | '    runptr=oldgotoptr
12ed0                 | '    lineptr_e=lineptr-1
12ed0                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
12ed0     06 00 00 FF 
12ed4     84 E4 05 F1 | 	add	objptr, ##3204
12ed8     F2 28 02 FB | 	rdlong	local02, objptr
12edc     50 00 00 FF 
12ee0     04 E5 85 F1 | 	sub	objptr, ##41220
12ee4     FF FF 3F FF 
12ee8     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12eec     50 00 00 AF 
12ef0     04 E5 05 A1 |  if_e	add	objptr, ##41220
12ef4     F2 00 68 AC |  if_e	wrlong	#0, objptr
12ef8     50 00 00 AF 
12efc     04 E5 85 A1 |  if_e	sub	objptr, ##41220
12f00                 | LR__1563
12f00     A7 F0 03 F6 | 	mov	ptra, fp
12f04     B2 00 A0 FD | 	call	#popregs_
12f08                 | _do_slow_goto_ret
12f08     2D 00 64 FD | 	ret
12f0c                 | 
12f0c                 | ' 
12f0c                 | ' ' ----------------  hex$
12f0c                 | ' 
12f0c                 | ' sub do_hex
12f0c                 | _do_hex
12f0c     01 4A 05 F6 | 	mov	COUNT_, #1
12f10     A8 00 A0 FD | 	call	#pushregs_
12f14     18 F0 07 F1 | 	add	ptra, #24
12f18     4A 00 00 FF 
12f1c     80 E4 05 F1 | 	add	objptr, ##38016
12f20     F2 26 02 FB | 	rdlong	local01, objptr
12f24     13 17 02 F6 | 	mov	arg03, local01
12f28     01 16 66 F0 | 	shl	arg03, #1
12f2c     13 17 02 F1 | 	add	arg03, local01
12f30     02 16 66 F0 | 	shl	arg03, #2
12f34     03 00 00 FF 
12f38     04 E4 85 F1 | 	sub	objptr, ##1540
12f3c     F2 16 02 F1 | 	add	arg03, objptr
12f40     0B 17 02 FB | 	rdlong	arg03, arg03
12f44     0C 4E 05 F1 | 	add	fp, #12
12f48     A7 16 62 FC | 	wrlong	arg03, fp
12f4c                 | ' 
12f4c                 | ' numpar=compiledline(lineptr_e).result.uresult
12f4c                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
12f4c     0C 4E 85 F1 | 	sub	fp, #12
12f50     03 16 16 F2 | 	cmp	arg03, #3 wc
12f54     47 00 00 FF 
12f58     7C E4 85 F1 | 	sub	objptr, ##36476
12f5c     0C 4E 05 C1 |  if_b	add	fp, #12
12f60     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12f64     0C 4E 85 C1 |  if_b	sub	fp, #12
12f68     40 00 90 4D |  if_c_and_nz	jmp	#LR__1570
12f6c     00 12 06 F6 | 	mov	arg01, #0
12f70     3C 87 B1 FD | 	call	#__system___getiolock_0599
12f74     FD 12 02 F6 | 	mov	arg01, result1
12f78     0C 2A B1 FD | 	call	#__system___lockmem
12f7c     AE 01 00 FF 
12f80     E9 15 06 F6 | 	mov	arg02, ##@LR__5870
12f84     00 12 06 F6 | 	mov	arg01, #0
12f88     00 16 06 F6 | 	mov	arg03, #0
12f8c     EC 36 B1 FD | 	call	#__system___basic_print_string
12f90     00 12 06 F6 | 	mov	arg01, #0
12f94     18 87 B1 FD | 	call	#__system___getiolock_0599
12f98     FD 00 68 FC | 	wrlong	#0, result1
12f9c     27 12 06 F6 | 	mov	arg01, #39
12fa0     00 14 06 F6 | 	mov	arg02, #0
12fa4     F4 EF B0 FD | 	call	#_printerror
12fa8     B8 00 90 FD | 	jmp	#LR__1573
12fac                 | LR__1570
12fac                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
12fac     0C 4E 05 F1 | 	add	fp, #12
12fb0     A7 26 02 FB | 	rdlong	local01, fp
12fb4     0C 4E 85 F1 | 	sub	fp, #12
12fb8     02 26 0E F2 | 	cmp	local01, #2 wz
12fbc     38 00 90 5D |  if_ne	jmp	#LR__1571
12fc0     BC 9C BF FD | 	call	#_pop
12fc4     FF 26 02 F6 | 	mov	local01, result3
12fc8     A7 FA 61 FC | 	wrlong	result1, fp
12fcc     04 4E 05 F1 | 	add	fp, #4
12fd0     A7 FC 61 FC | 	wrlong	result2, fp
12fd4     04 4E 05 F1 | 	add	fp, #4
12fd8     A7 26 62 FC | 	wrlong	local01, fp
12fdc     08 4E 85 F1 | 	sub	fp, #8
12fe0     A7 12 02 F6 | 	mov	arg01, fp
12fe4     7C 9E BF FD | 	call	#_converttoint
12fe8     14 4E 05 F1 | 	add	fp, #20
12fec     A7 FA 61 FC | 	wrlong	result1, fp
12ff0     14 4E 85 F1 | 	sub	fp, #20
12ff4     0C 00 90 FD | 	jmp	#LR__1572
12ff8                 | LR__1571
12ff8     14 4E 05 F1 | 	add	fp, #20
12ffc     A7 10 68 FC | 	wrlong	#8, fp
13000     14 4E 85 F1 | 	sub	fp, #20
13004                 | LR__1572
13004     78 9C BF FD | 	call	#_pop
13008     FF 26 02 F6 | 	mov	local01, result3
1300c     A7 FA 61 FC | 	wrlong	result1, fp
13010     04 4E 05 F1 | 	add	fp, #4
13014     A7 FC 61 FC | 	wrlong	result2, fp
13018     04 4E 05 F1 | 	add	fp, #4
1301c     A7 26 62 FC | 	wrlong	local01, fp
13020     08 4E 85 F1 | 	sub	fp, #8
13024     A7 12 02 F6 | 	mov	arg01, fp
13028     38 9E BF FD | 	call	#_converttoint
1302c     10 4E 05 F1 | 	add	fp, #16
13030     A7 FA 61 FC | 	wrlong	result1, fp
13034     FD 12 02 F6 | 	mov	arg01, result1
13038     04 4E 05 F1 | 	add	fp, #4
1303c     A7 14 02 FB | 	rdlong	arg02, fp
13040     14 4E 85 F1 | 	sub	fp, #20
13044     10 16 06 F6 | 	mov	arg03, #16
13048     0C 4C B1 FD | 	call	#__system__Number_S
1304c     A7 FA 61 FC | 	wrlong	result1, fp
13050     08 4E 05 F1 | 	add	fp, #8
13054     A7 3E 68 FC | 	wrlong	#31, fp
13058     08 4E 85 F1 | 	sub	fp, #8
1305c     A7 12 02 F6 | 	mov	arg01, fp
13060     B4 9C BF FD | 	call	#_push
13064                 | LR__1573
13064     A7 F0 03 F6 | 	mov	ptra, fp
13068     B2 00 A0 FD | 	call	#popregs_
1306c                 | _do_hex_ret
1306c     2D 00 64 FD | 	ret
13070                 | 
13070                 | ' 
13070                 | ' ' ----------------  if
13070                 | ' 
13070                 | ' sub do_if
13070                 | _do_if
13070     05 4A 05 F6 | 	mov	COUNT_, #5
13074     A8 00 A0 FD | 	call	#pushregs_
13078     04 9C BF FD | 	call	#_pop
1307c     FD 26 0A F6 | 	mov	local01, result1 wz
13080     FE 28 02 F6 | 	mov	local02, result2
13084     FF 2A 02 F6 | 	mov	local03, result3
13088                 | ' t1=pop()
13088                 | ' ' if uresult=0, jump over else
13088                 | ' if t1.result.uresult = 0 then 
13088     BC 00 90 5D |  if_ne	jmp	#LR__1582
1308c                 | '   for i=lineptr_e to lineptr-1
1308c     4A 00 00 FF 
13090     80 E4 05 F1 | 	add	objptr, ##38016
13094     F2 2C 02 FB | 	rdlong	local04, objptr
13098     04 E4 85 F1 | 	sub	objptr, #4
1309c     F2 2E 02 FB | 	rdlong	local05, objptr
130a0     4A 00 00 FF 
130a4     7C E4 85 F1 | 	sub	objptr, ##38012
130a8                 | LR__1580
130a8     17 2D 52 F2 | 	cmps	local04, local05 wc
130ac     78 00 90 3D |  if_ae	jmp	#LR__1581
130b0     16 FF 01 F6 | 	mov	result3, local04
130b4     01 FE 65 F0 | 	shl	result3, #1
130b8     16 FF 01 F1 | 	add	result3, local04
130bc     02 FE 65 F0 | 	shl	result3, #2
130c0     47 00 00 FF 
130c4     7C E4 05 F1 | 	add	objptr, ##36476
130c8     F2 FE 01 F1 | 	add	result3, objptr
130cc     FF 26 02 FB | 	rdlong	local01, result3
130d0     04 FE 05 F1 | 	add	result3, #4
130d4     FF FC 01 FB | 	rdlong	result2, result3
130d8     16 FF 01 F6 | 	mov	result3, local04
130dc     01 FE 65 F0 | 	shl	result3, #1
130e0     16 FF 01 F1 | 	add	result3, local04
130e4     02 FE 65 F0 | 	shl	result3, #2
130e8     F2 FE 01 F1 | 	add	result3, objptr
130ec     08 FE 05 F1 | 	add	result3, #8
130f0     FF FE 01 FB | 	rdlong	result3, result3
130f4     FE 28 02 F6 | 	mov	local02, result2
130f8     FF 2A 02 F6 | 	mov	local03, result3
130fc                 | '     t1=compiledline(i)
130fc                 | '     if t1.result_type=token_else then lineptr_e=i : return
130fc     5A 2A 0E F2 | 	cmp	local03, #90 wz
13100     47 00 00 FF 
13104     7C E4 85 F1 | 	sub	objptr, ##36476
13108     4A 00 00 AF 
1310c     80 E4 05 A1 |  if_e	add	objptr, ##38016
13110     F2 2C 62 AC |  if_e	wrlong	local04, objptr
13114     4A 00 00 AF 
13118     80 E4 85 A1 |  if_e	sub	objptr, ##38016
1311c     28 00 90 AD |  if_e	jmp	#LR__1583
13120     01 2C 06 F1 | 	add	local04, #1
13124     80 FF 9F FD | 	jmp	#LR__1580
13128                 | LR__1581
13128     4A 00 00 FF 
1312c     7C E4 05 F1 | 	add	objptr, ##38012
13130     F2 2E 02 FB | 	rdlong	local05, objptr
13134     01 2E 86 F1 | 	sub	local05, #1
13138     04 E4 05 F1 | 	add	objptr, #4
1313c     F2 2E 62 FC | 	wrlong	local05, objptr
13140     4A 00 00 FF 
13144     80 E4 85 F1 | 	sub	objptr, ##38016
13148                 | LR__1582
13148                 | LR__1583
13148     A7 F0 03 F6 | 	mov	ptra, fp
1314c     B2 00 A0 FD | 	call	#popregs_
13150                 | _do_if_ret
13150     2D 00 64 FD | 	ret
13154                 | 
13154                 | ' 
13154                 | ' ' ----------------  inkey$
13154                 | ' 
13154                 | ' sub do_inkey
13154                 | _do_inkey
13154     02 4A 05 F6 | 	mov	COUNT_, #2
13158     A8 00 A0 FD | 	call	#pushregs_
1315c     0C F0 07 F1 | 	add	ptra, #12
13160     C8 1F B1 FD | 	call	#_usbnew_spin2_get_key
13164     45 00 00 FF 
13168     74 E4 05 F1 | 	add	objptr, ##35444
1316c     F2 FA 61 FC | 	wrlong	result1, objptr
13170                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
13170     45 00 00 FF 
13174     74 E4 85 F1 | 	sub	objptr, ##35444
13178     00 FA 0D F2 | 	cmp	result1, #0 wz
1317c     94 00 90 AD |  if_e	jmp	#LR__1591
13180     45 00 00 FF 
13184     74 E4 05 F1 | 	add	objptr, ##35444
13188     F2 1C 02 FB | 	rdlong	arg06, objptr
1318c     45 00 00 FF 
13190     74 E4 85 F1 | 	sub	objptr, ##35444
13194     00 00 40 FF 
13198     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
1319c     45 00 00 CF 
131a0     74 E4 05 C1 |  if_b	add	objptr, ##35444
131a4     F2 26 02 CB |  if_b	rdlong	local01, objptr
131a8     45 00 00 CF 
131ac     74 E4 85 C1 |  if_b	sub	objptr, ##35444
131b0     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
131b4     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
131b8     58 00 90 3D |  if_ae	jmp	#LR__1591
131bc                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
131bc     50 00 00 FF 
131c0     3C E5 05 F1 | 	add	objptr, ##41276
131c4     F2 1C 02 FB | 	rdlong	arg06, objptr
131c8     50 00 00 FF 
131cc     3C E5 85 F1 | 	sub	objptr, ##41276
131d0     01 1C 0E F2 | 	cmp	arg06, #1 wz
131d4     3C 00 90 5D |  if_ne	jmp	#LR__1590
131d8     52 00 00 FF 
131dc     50 E4 05 F1 | 	add	objptr, ##42064
131e0     F2 14 02 FB | 	rdlong	arg02, objptr
131e4     04 E4 85 F1 | 	sub	objptr, #4
131e8     F2 1A 02 FB | 	rdlong	arg05, objptr
131ec     07 12 06 F6 | 	mov	arg01, #7
131f0     56 00 00 FF 
131f4     44 16 06 F6 | 	mov	arg03, ##44100
131f8     0C 18 C6 F9 | 	decod	arg04, #12
131fc     01 1C 66 F6 | 	neg	arg06, #1
13200     46 00 00 FF 
13204     80 E5 85 F1 | 	sub	objptr, ##36224
13208     0C 23 B1 FD | 	call	#_audio096_spin2_play
1320c     0B 00 00 FF 
13210     CC E4 85 F1 | 	sub	objptr, ##5836
13214                 | LR__1590
13214                 | LR__1591
13214                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
13214     45 00 00 FF 
13218     74 E4 05 F1 | 	add	objptr, ##35444
1321c     F2 1C 0A FB | 	rdlong	arg06, objptr wz
13220     45 00 00 FF 
13224     74 E4 85 F1 | 	sub	objptr, ##35444
13228     D4 01 90 AD |  if_e	jmp	#LR__1600
1322c     45 00 00 FF 
13230     74 E4 05 F1 | 	add	objptr, ##35444
13234     F2 1C 02 FB | 	rdlong	arg06, objptr
13238     45 00 00 FF 
1323c     74 E4 85 F1 | 	sub	objptr, ##35444
13240     00 00 40 FF 
13244     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13248     45 00 00 CF 
1324c     74 E4 05 C1 |  if_b	add	objptr, ##35444
13250     F2 26 02 CB |  if_b	rdlong	local01, objptr
13254     45 00 00 CF 
13258     74 E4 85 C1 |  if_b	sub	objptr, ##35444
1325c     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
13260     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13264     98 01 90 3D |  if_ae	jmp	#LR__1600
13268                 | '   if leds and 2 = 2 then 
13268     52 00 00 FF 
1326c     8C E4 05 F1 | 	add	objptr, ##42124
13270     F2 26 0A FB | 	rdlong	local01, objptr wz
13274     52 00 00 FF 
13278     8C E4 85 F1 | 	sub	objptr, ##42124
1327c     58 01 90 AD |  if_e	jmp	#LR__1599
13280                 | '     if key>96 andalso key<123 then
13280     45 00 00 FF 
13284     74 E4 05 F1 | 	add	objptr, ##35444
13288     F2 26 02 FB | 	rdlong	local01, objptr
1328c     45 00 00 FF 
13290     74 E4 85 F1 | 	sub	objptr, ##35444
13294     61 26 16 F2 | 	cmp	local01, #97 wc
13298     3C 00 90 CD |  if_b	jmp	#LR__1592
1329c     45 00 00 FF 
132a0     74 E4 05 F1 | 	add	objptr, ##35444
132a4     F2 26 02 FB | 	rdlong	local01, objptr
132a8     45 00 00 FF 
132ac     74 E4 85 F1 | 	sub	objptr, ##35444
132b0     7B 26 16 F2 | 	cmp	local01, #123 wc
132b4     20 00 90 3D |  if_ae	jmp	#LR__1592
132b8     45 00 00 FF 
132bc     74 E4 05 F1 | 	add	objptr, ##35444
132c0     F2 26 02 FB | 	rdlong	local01, objptr
132c4     20 26 86 F1 | 	sub	local01, #32
132c8     F2 26 62 FC | 	wrlong	local01, objptr
132cc     45 00 00 FF 
132d0     74 E4 85 F1 | 	sub	objptr, ##35444
132d4     00 01 90 FD | 	jmp	#LR__1598
132d8                 | LR__1592
132d8     45 00 00 FF 
132dc     74 E4 05 F1 | 	add	objptr, ##35444
132e0     F2 26 02 FB | 	rdlong	local01, objptr
132e4     45 00 00 FF 
132e8     74 E4 85 F1 | 	sub	objptr, ##35444
132ec     41 26 16 F2 | 	cmp	local01, #65 wc
132f0     3C 00 90 CD |  if_b	jmp	#LR__1593
132f4     45 00 00 FF 
132f8     74 E4 05 F1 | 	add	objptr, ##35444
132fc     F2 26 02 FB | 	rdlong	local01, objptr
13300     45 00 00 FF 
13304     74 E4 85 F1 | 	sub	objptr, ##35444
13308     5B 26 16 F2 | 	cmp	local01, #91 wc
1330c     20 00 90 3D |  if_ae	jmp	#LR__1593
13310     45 00 00 FF 
13314     74 E4 05 F1 | 	add	objptr, ##35444
13318     F2 26 02 FB | 	rdlong	local01, objptr
1331c     20 26 06 F1 | 	add	local01, #32
13320     F2 26 62 FC | 	wrlong	local01, objptr
13324     45 00 00 FF 
13328     74 E4 85 F1 | 	sub	objptr, ##35444
1332c     A8 00 90 FD | 	jmp	#LR__1597
13330                 | LR__1593
13330     45 00 00 FF 
13334     74 E4 05 F1 | 	add	objptr, ##35444
13338     F2 26 02 FB | 	rdlong	local01, objptr
1333c     45 00 00 FF 
13340     74 E4 85 F1 | 	sub	objptr, ##35444
13344     17 26 16 F2 | 	cmp	local01, #23 wc
13348     3C 00 90 CD |  if_b	jmp	#LR__1594
1334c     45 00 00 FF 
13350     74 E4 05 F1 | 	add	objptr, ##35444
13354     F2 26 02 FB | 	rdlong	local01, objptr
13358     45 00 00 FF 
1335c     74 E4 85 F1 | 	sub	objptr, ##35444
13360     20 26 16 F2 | 	cmp	local01, #32 wc
13364     20 00 90 3D |  if_ae	jmp	#LR__1594
13368     45 00 00 FF 
1336c     74 E4 05 F1 | 	add	objptr, ##35444
13370     F2 26 02 FB | 	rdlong	local01, objptr
13374     09 26 86 F1 | 	sub	local01, #9
13378     F2 26 62 FC | 	wrlong	local01, objptr
1337c     45 00 00 FF 
13380     74 E4 85 F1 | 	sub	objptr, ##35444
13384     50 00 90 FD | 	jmp	#LR__1596
13388                 | LR__1594
13388     45 00 00 FF 
1338c     74 E4 05 F1 | 	add	objptr, ##35444
13390     F2 28 02 FB | 	rdlong	local02, objptr
13394     45 00 00 FF 
13398     74 E4 85 F1 | 	sub	objptr, ##35444
1339c     0E 28 16 F2 | 	cmp	local02, #14 wc
133a0     34 00 90 CD |  if_b	jmp	#LR__1595
133a4     45 00 00 FF 
133a8     74 E4 05 F1 | 	add	objptr, ##35444
133ac     F2 26 02 FB | 	rdlong	local01, objptr
133b0     45 00 00 FF 
133b4     74 E4 85 F1 | 	sub	objptr, ##35444
133b8     17 26 16 F2 | 	cmp	local01, #23 wc
133bc     52 00 00 CF 
133c0     90 E4 05 C1 |  if_b	add	objptr, ##42128
133c4     F2 28 02 CB |  if_b	rdlong	local02, objptr
133c8     27 28 06 C1 |  if_b	add	local02, #39
133cc     F2 28 62 CC |  if_b	wrlong	local02, objptr
133d0     52 00 00 CF 
133d4     90 E4 85 C1 |  if_b	sub	objptr, ##42128
133d8                 | LR__1595
133d8                 | LR__1596
133d8                 | LR__1597
133d8                 | LR__1598
133d8                 | LR__1599
133d8     45 00 00 FF 
133dc     74 E4 05 F1 | 	add	objptr, ##35444
133e0     F2 12 02 FB | 	rdlong	arg01, objptr
133e4     45 00 00 FF 
133e8     74 E4 85 F1 | 	sub	objptr, ##35444
133ec     2C EF B0 FD | 	call	#_scantochar
133f0     FD 12 02 F6 | 	mov	arg01, result1
133f4     D0 47 B1 FD | 	call	#__system__Chr_S
133f8     A7 FA 61 FC | 	wrlong	result1, fp
133fc     0C 00 90 FD | 	jmp	#LR__1601
13400                 | LR__1600
13400     AE 01 00 FF 
13404     F0 29 06 F6 | 	mov	local02, ##@LR__5871
13408     A7 28 62 FC | 	wrlong	local02, fp
1340c                 | LR__1601
1340c     08 4E 05 F1 | 	add	fp, #8
13410     A7 3E 68 FC | 	wrlong	#31, fp
13414     08 4E 85 F1 | 	sub	fp, #8
13418     A7 12 02 F6 | 	mov	arg01, fp
1341c     F8 98 BF FD | 	call	#_push
13420     A7 F0 03 F6 | 	mov	ptra, fp
13424     B2 00 A0 FD | 	call	#popregs_
13428                 | _do_inkey_ret
13428     2D 00 64 FD | 	ret
1342c                 | 
1342c                 | ' 
1342c                 | ' ' ----------------  ink
1342c                 | ' 
1342c                 | ' sub do_ink
1342c                 | _do_ink
1342c     00 4A 05 F6 | 	mov	COUNT_, #0
13430     A8 00 A0 FD | 	call	#pushregs_
13434     0C F0 07 F1 | 	add	ptra, #12
13438     44 98 BF FD | 	call	#_pop
1343c     FF 14 02 F6 | 	mov	arg02, result3
13440     A7 FA 61 FC | 	wrlong	result1, fp
13444     04 4E 05 F1 | 	add	fp, #4
13448     A7 FC 61 FC | 	wrlong	result2, fp
1344c     04 4E 05 F1 | 	add	fp, #4
13450     A7 14 62 FC | 	wrlong	arg02, fp
13454     08 4E 85 F1 | 	sub	fp, #8
13458     A7 12 02 F6 | 	mov	arg01, fp
1345c     04 9A BF FD | 	call	#_converttoint
13460     37 00 00 FF 
13464     3C E4 05 F1 | 	add	objptr, ##28220
13468     F2 FA 61 FC | 	wrlong	result1, objptr
1346c     04 E4 85 F1 | 	sub	objptr, #4
13470     F2 14 02 FB | 	rdlong	arg02, objptr
13474                 | ' 
13474                 | ' write_color:=ff
13474     36 00 00 FF 
13478     F7 E5 85 F1 | 	sub	objptr, ##28151
1347c     F2 FA 61 FC | 	wrlong	result1, objptr
13480                 | ' write_background:=bb
13480     04 E4 05 F1 | 	add	objptr, #4
13484     F2 14 62 FC | 	wrlong	arg02, objptr
13488     36 00 00 FF 
1348c     F7 E5 05 F1 | 	add	objptr, ##28151
13490     F2 12 02 FB | 	rdlong	arg01, objptr
13494     37 00 00 FF 
13498     3C E4 85 F1 | 	sub	objptr, ##28220
1349c     D0 F6 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
134a0     A7 F0 03 F6 | 	mov	ptra, fp
134a4     B2 00 A0 FD | 	call	#popregs_
134a8                 | _do_ink_ret
134a8     2D 00 64 FD | 	ret
134ac                 | 
134ac                 | ' 
134ac                 | ' ' ----------------  int
134ac                 | ' 
134ac                 | ' sub do_int
134ac                 | _do_int
134ac     02 4A 05 F6 | 	mov	COUNT_, #2
134b0     A8 00 A0 FD | 	call	#pushregs_
134b4     10 F0 07 F1 | 	add	ptra, #16
134b8     C4 97 BF FD | 	call	#_pop
134bc     FE 26 02 F6 | 	mov	local01, result2
134c0     FF 28 02 F6 | 	mov	local02, result3
134c4     A7 FA 61 FC | 	wrlong	result1, fp
134c8     04 4E 05 F1 | 	add	fp, #4
134cc     A7 26 62 FC | 	wrlong	local01, fp
134d0     04 4E 05 F1 | 	add	fp, #4
134d4     A7 28 62 FC | 	wrlong	local02, fp
134d8                 | ' 
134d8                 | ' t1=pop()
134d8                 | ' select case t1.result_type
134d8     08 4E 85 F1 | 	sub	fp, #8
134dc     1E 28 0E F2 | 	cmp	local02, #30 wz
134e0     14 00 90 AD |  if_e	jmp	#LR__1610
134e4     1F 28 0E F2 | 	cmp	local02, #31 wz
134e8     20 00 90 AD |  if_e	jmp	#LR__1611
134ec     2B 28 0E F2 | 	cmp	local02, #43 wz
134f0     34 00 90 AD |  if_e	jmp	#LR__1612
134f4     50 00 90 FD | 	jmp	#LR__1613
134f8                 | LR__1610
134f8     A7 12 02 FB | 	rdlong	arg01, fp
134fc     00 14 06 F6 | 	mov	arg02, #0
13500     C4 57 B1 FD | 	call	#__system___float_tointeger
13504     A7 FA 61 FC | 	wrlong	result1, fp
13508     3C 00 90 FD | 	jmp	#LR__1613
1350c                 | LR__1611
1350c     A7 12 02 FB | 	rdlong	arg01, fp
13510     F8 5A B1 FD | 	call	#__system____builtin_atof
13514     FD 12 02 F6 | 	mov	arg01, result1
13518     00 14 06 F6 | 	mov	arg02, #0
1351c     A8 57 B1 FD | 	call	#__system___float_tointeger
13520     A7 FA 61 FC | 	wrlong	result1, fp
13524     20 00 90 FD | 	jmp	#LR__1613
13528                 | LR__1612
13528     A7 12 02 FB | 	rdlong	arg01, fp
1352c     C8 98 BF FD | 	call	#_convertstring
13530     FD 12 02 F6 | 	mov	arg01, result1
13534     D4 5A B1 FD | 	call	#__system____builtin_atof
13538     FD 12 02 F6 | 	mov	arg01, result1
1353c     00 14 06 F6 | 	mov	arg02, #0
13540     84 57 B1 FD | 	call	#__system___float_tointeger
13544     A7 FA 61 FC | 	wrlong	result1, fp
13548                 | LR__1613
13548     08 4E 05 F1 | 	add	fp, #8
1354c     A7 38 68 FC | 	wrlong	#28, fp
13550     08 4E 85 F1 | 	sub	fp, #8
13554     A7 12 02 F6 | 	mov	arg01, fp
13558     BC 97 BF FD | 	call	#_push
1355c     A7 F0 03 F6 | 	mov	ptra, fp
13560     B2 00 A0 FD | 	call	#popregs_
13564                 | _do_int_ret
13564     2D 00 64 FD | 	ret
13568                 | 
13568                 | ' 
13568                 | ' ' ----------------  input
13568                 | ' 
13568                 | ' sub do_input
13568                 | _do_input
13568     11 4A 05 F6 | 	mov	COUNT_, #17
1356c     A8 00 A0 FD | 	call	#pushregs_
13570     50 F1 07 F1 | 	add	ptra, #336
13574     4A 00 00 FF 
13578     80 E4 05 F1 | 	add	objptr, ##38016
1357c     F2 FE 01 FB | 	rdlong	result3, objptr
13580     FF FC 01 F6 | 	mov	result2, result3
13584     01 FC 65 F0 | 	shl	result2, #1
13588     FF FC 01 F1 | 	add	result2, result3
1358c     02 FC 65 F0 | 	shl	result2, #2
13590     03 00 00 FF 
13594     04 E4 85 F1 | 	sub	objptr, ##1540
13598     F2 FC 01 F1 | 	add	result2, objptr
1359c     FE FC 01 FB | 	rdlong	result2, result2
135a0     08 4E 05 F1 | 	add	fp, #8
135a4     A7 FC 61 FC | 	wrlong	result2, fp
135a8                 | ' 
135a8                 | ' numpar=compiledline(lineptr_e).result.uresult
135a8                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
135a8     08 4E 85 F1 | 	sub	fp, #8
135ac     01 FC 15 F2 | 	cmp	result2, #1 wc
135b0     47 00 00 FF 
135b4     7C E4 85 F1 | 	sub	objptr, ##36476
135b8     14 00 90 CD |  if_b	jmp	#LR__1620
135bc     08 4E 05 F1 | 	add	fp, #8
135c0     A7 FC 01 FB | 	rdlong	result2, fp
135c4     08 4E 85 F1 | 	sub	fp, #8
135c8     41 FC 15 F2 | 	cmp	result2, #65 wc
135cc     50 00 90 CD |  if_b	jmp	#LR__1621
135d0                 | LR__1620
135d0     00 12 06 F6 | 	mov	arg01, #0
135d4     D8 80 B1 FD | 	call	#__system___getiolock_0599
135d8     FD 12 02 F6 | 	mov	arg01, result1
135dc     A8 23 B1 FD | 	call	#__system___lockmem
135e0     AE 01 00 FF 
135e4     F1 15 06 F6 | 	mov	arg02, ##@LR__5872
135e8     00 12 06 F6 | 	mov	arg01, #0
135ec     00 16 06 F6 | 	mov	arg03, #0
135f0     88 30 B1 FD | 	call	#__system___basic_print_string
135f4     00 12 06 F6 | 	mov	arg01, #0
135f8     B4 80 B1 FD | 	call	#__system___getiolock_0599
135fc     FD 00 68 FC | 	wrlong	#0, result1
13600     50 00 00 FF 
13604     F0 E4 05 F1 | 	add	objptr, ##41200
13608     F2 14 02 FB | 	rdlong	arg02, objptr
1360c     50 00 00 FF 
13610     F0 E4 85 F1 | 	sub	objptr, ##41200
13614     27 12 06 F6 | 	mov	arg01, #39
13618     80 E9 B0 FD | 	call	#_printerror
1361c     44 0B 90 FD | 	jmp	#LR__1670
13620                 | LR__1621
13620     08 4E 05 F1 | 	add	fp, #8
13624     A7 FC 01 FB | 	rdlong	result2, fp
13628     01 FC 85 F1 | 	sub	result2, #1
1362c     28 4F 05 F1 | 	add	fp, #296
13630     A7 FC 61 FC | 	wrlong	result2, fp
13634     3C E4 05 F1 | 	add	objptr, #60
13638     F2 FC E1 FA | 	rdword	result2, objptr
1363c     FE FC 51 F6 | 	abs	result2, result2 wc
13640     01 FC 45 F0 | 	shr	result2, #1
13644     FE FC 81 F6 | 	negc	result2, result2
13648     0C 4E 05 F1 | 	add	fp, #12
1364c     A7 FC 61 FC | 	wrlong	result2, fp
13650     02 E4 05 F1 | 	add	objptr, #2
13654     F2 26 C2 FA | 	rdbyte	local01, objptr
13658     3E E4 85 F1 | 	sub	objptr, #62
1365c     04 4E 05 F1 | 	add	fp, #4
13660     A7 26 62 FC | 	wrlong	local01, fp
13664     40 4F 85 F1 | 	sub	fp, #320
13668                 | ' i=numpar-1
13668                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13668                 | ' do
13668                 | LR__1622
13668     98 D1 BE FD | 	call	#_edit
1366c     A7 FA 61 FC | 	wrlong	result1, fp
13670                 | ' 
13670                 | '   line$=edit()
13670                 | ' 
13670                 | '   if v.cursor_y=cpy+1 then
13670     3E E4 05 F1 | 	add	objptr, #62
13674     F2 26 C2 FA | 	rdbyte	local01, objptr
13678     3E E4 85 F1 | 	sub	objptr, #62
1367c     40 4F 05 F1 | 	add	fp, #320
13680     A7 16 02 FB | 	rdlong	arg03, fp
13684     40 4F 85 F1 | 	sub	fp, #320
13688     01 16 06 F1 | 	add	arg03, #1
1368c     0B 27 0A F2 | 	cmp	local01, arg03 wz
13690     6C 00 90 5D |  if_ne	jmp	#LR__1625
13694     A7 26 02 FB | 	rdlong	local01, fp
13698     13 13 02 F6 | 	mov	arg01, local01
1369c     09 29 02 F6 | 	mov	local02, arg01
136a0     97 06 48 FB | 	callpa	#(@LR__1624-@LR__1623)>>2,fcache_load_ptr_
136a4                 | LR__1623
136a4     14 FB C9 FA | 	rdbyte	result1, local02 wz
136a8     01 28 06 51 |  if_ne	add	local02, #1
136ac     F4 FF 9F 5D |  if_ne	jmp	#LR__1623
136b0                 | LR__1624
136b0     09 29 82 F1 | 	sub	local02, arg01
136b4     14 15 02 F6 | 	mov	arg02, local02
136b8     3C 4F 05 F1 | 	add	fp, #316
136bc     A7 16 02 FB | 	rdlong	arg03, fp
136c0     3C 4F 85 F1 | 	sub	fp, #316
136c4     0B 15 82 F1 | 	sub	arg02, arg03
136c8     37 00 00 FF 
136cc     34 E4 05 F1 | 	add	objptr, ##28212
136d0     F2 16 02 FB | 	rdlong	arg03, objptr
136d4     37 00 00 FF 
136d8     34 E4 85 F1 | 	sub	objptr, ##28212
136dc     0B 15 02 F1 | 	add	arg02, arg03
136e0     13 13 02 F6 | 	mov	arg01, local01
136e4     A4 43 B1 FD | 	call	#__system__Right_S
136e8     FD 12 02 F6 | 	mov	arg01, result1
136ec     A4 47 B1 FD | 	call	#__system__RTrim_S
136f0     FD 12 02 F6 | 	mov	arg01, result1
136f4     DC 46 B1 FD | 	call	#__system__LTrim_S
136f8     A7 FA 61 FC | 	wrlong	result1, fp
136fc     14 00 90 FD | 	jmp	#LR__1626
13700                 | LR__1625
13700     A7 12 02 FB | 	rdlong	arg01, fp
13704     8C 47 B1 FD | 	call	#__system__RTrim_S
13708     FD 12 02 F6 | 	mov	arg01, result1
1370c     C4 46 B1 FD | 	call	#__system__LTrim_S
13710     A7 FA 61 FC | 	wrlong	result1, fp
13714                 | LR__1626
13714                 | '   do
13714                 | LR__1627
13714     A7 14 02 FB | 	rdlong	arg02, fp
13718     AE 01 00 FF 
1371c     FC 17 06 F6 | 	mov	arg03, ##@LR__5873
13720     01 12 06 F6 | 	mov	arg01, #1
13724     24 48 B1 FD | 	call	#__system__Instr
13728     0C 4E 05 F1 | 	add	fp, #12
1372c     A7 FA 61 FC | 	wrlong	result1, fp
13730                 | '    comma=instr(1,line$,",")  
13730                 | '    if comma>0  then 
13730     0C 4E 85 F1 | 	sub	fp, #12
13734     01 FA 15 F2 | 	cmp	result1, #1 wc
13738     68 00 90 CD |  if_b	jmp	#LR__1630
1373c     A7 12 02 FB | 	rdlong	arg01, fp
13740     0C 4E 05 F1 | 	add	fp, #12
13744     A7 14 02 FB | 	rdlong	arg02, fp
13748     0C 4E 85 F1 | 	sub	fp, #12
1374c     01 14 86 F1 | 	sub	arg02, #1
13750     B0 42 B1 FD | 	call	#__system__Left_S
13754     04 4E 05 F1 | 	add	fp, #4
13758     A7 FA 61 FC | 	wrlong	result1, fp
1375c     04 4E 85 F1 | 	sub	fp, #4
13760     A7 26 02 FB | 	rdlong	local01, fp
13764     13 13 02 F6 | 	mov	arg01, local01
13768     09 29 02 F6 | 	mov	local02, arg01
1376c     97 06 48 FB | 	callpa	#(@LR__1629-@LR__1628)>>2,fcache_load_ptr_
13770                 | LR__1628
13770     14 FB C9 FA | 	rdbyte	result1, local02 wz
13774     01 28 06 51 |  if_ne	add	local02, #1
13778     F4 FF 9F 5D |  if_ne	jmp	#LR__1628
1377c                 | LR__1629
1377c     09 29 82 F1 | 	sub	local02, arg01
13780     14 15 02 F6 | 	mov	arg02, local02
13784     0C 4E 05 F1 | 	add	fp, #12
13788     A7 16 02 FB | 	rdlong	arg03, fp
1378c     0C 4E 85 F1 | 	sub	fp, #12
13790     0B 15 82 F1 | 	sub	arg02, arg03
13794     13 13 02 F6 | 	mov	arg01, local01
13798     F0 42 B1 FD | 	call	#__system__Right_S
1379c     A7 FA 61 FC | 	wrlong	result1, fp
137a0     28 00 90 FD | 	jmp	#LR__1631
137a4                 | LR__1630
137a4     A7 12 02 FB | 	rdlong	arg01, fp
137a8     E8 46 B1 FD | 	call	#__system__RTrim_S
137ac     FD 12 02 F6 | 	mov	arg01, result1
137b0     20 46 B1 FD | 	call	#__system__LTrim_S
137b4     04 4E 05 F1 | 	add	fp, #4
137b8     A7 FA 61 FC | 	wrlong	result1, fp
137bc     04 4E 85 F1 | 	sub	fp, #4
137c0     AE 01 00 FF 
137c4     FE 27 06 F6 | 	mov	local01, ##@LR__5874
137c8     A7 26 62 FC | 	wrlong	local01, fp
137cc                 | LR__1631
137cc     30 4F 05 F1 | 	add	fp, #304
137d0     A7 26 02 FB | 	rdlong	local01, fp
137d4     02 26 66 F0 | 	shl	local01, #2
137d8     04 4F 85 F1 | 	sub	fp, #260
137dc     A7 26 02 F1 | 	add	local01, fp
137e0     28 4E 85 F1 | 	sub	fp, #40
137e4     A7 FA 01 FB | 	rdlong	result1, fp
137e8     13 FB 61 FC | 	wrlong	result1, local01
137ec     2C 4F 05 F1 | 	add	fp, #300
137f0     A7 26 02 FB | 	rdlong	local01, fp
137f4     01 26 86 F1 | 	sub	local01, #1
137f8     A7 26 62 FC | 	wrlong	local01, fp
137fc     30 4F 85 F1 | 	sub	fp, #304
13800     00 26 56 F2 | 	cmps	local01, #0 wc
13804     18 00 90 CD |  if_b	jmp	#LR__1632
13808     A7 12 02 FB | 	rdlong	arg01, fp
1380c     AE 01 00 FF 
13810     FF 15 06 F6 | 	mov	arg02, ##@LR__5875
13814     98 21 B1 FD | 	call	#__system___string_cmp
13818     00 FA 0D F2 | 	cmp	result1, #0 wz
1381c     F4 FE 9F 5D |  if_ne	jmp	#LR__1627
13820                 | LR__1632
13820     30 4F 05 F1 | 	add	fp, #304
13824     A7 26 02 FB | 	rdlong	local01, fp
13828     30 4F 85 F1 | 	sub	fp, #304
1382c     00 26 56 F2 | 	cmps	local01, #0 wc
13830     34 FE 9F 3D |  if_ae	jmp	#LR__1622
13834                 | ' 
13834                 | ' for i=0 to numpar-1
13834     30 4F 05 F1 | 	add	fp, #304
13838     A7 00 68 FC | 	wrlong	#0, fp
1383c     28 4F 85 F1 | 	sub	fp, #296
13840     A7 2A 02 FB | 	rdlong	local03, fp
13844     08 4E 85 F1 | 	sub	fp, #8
13848                 | LR__1633
13848     30 4F 05 F1 | 	add	fp, #304
1384c     A7 2C 02 FB | 	rdlong	local04, fp
13850     30 4F 85 F1 | 	sub	fp, #304
13854     16 27 02 F6 | 	mov	local01, local04
13858     15 27 52 F2 | 	cmps	local01, local03 wc
1385c     04 09 90 3D |  if_ae	jmp	#LR__1669
13860                 | ' 
13860                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
13860     30 4F 05 F1 | 	add	fp, #304
13864     A7 16 02 FB | 	rdlong	arg03, fp
13868     02 16 66 F0 | 	shl	arg03, #2
1386c     04 4F 85 F1 | 	sub	fp, #260
13870     A7 16 02 F1 | 	add	arg03, fp
13874     0B 13 02 FB | 	rdlong	arg01, arg03
13878     2C 4E 85 F1 | 	sub	fp, #44
1387c     1C 2C BF FD | 	call	#_isnum
13880     FD 2E 02 F6 | 	mov	local05, result1
13884     30 4F 05 F1 | 	add	fp, #304
13888     A7 16 02 FB | 	rdlong	arg03, fp
1388c     02 16 66 F0 | 	shl	arg03, #2
13890     04 4F 85 F1 | 	sub	fp, #260
13894     A7 30 02 F6 | 	mov	local06, fp
13898     A7 16 02 F1 | 	add	arg03, fp
1389c     0B 13 02 FB | 	rdlong	arg01, arg03
138a0     2C 4E 85 F1 | 	sub	fp, #44
138a4     E0 2F BF FD | 	call	#_isint
138a8     FD 2E 2A F5 | 	andn	local05, result1 wz
138ac     52 00 00 5F 
138b0     BC E4 05 51 |  if_ne	add	objptr, ##42172
138b4     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
138b8     52 00 00 5F 
138bc     BC E4 85 51 |  if_ne	sub	objptr, ##42172
138c0                 | '   if isint(args(i)) then r=result_int 
138c0     30 4F 05 F1 | 	add	fp, #304
138c4     A7 2E 02 FB | 	rdlong	local05, fp
138c8     02 2E 66 F0 | 	shl	local05, #2
138cc     04 4F 85 F1 | 	sub	fp, #260
138d0     A7 2E 02 F1 | 	add	local05, fp
138d4     17 13 02 FB | 	rdlong	arg01, local05
138d8     2C 4E 85 F1 | 	sub	fp, #44
138dc     A8 2F BF FD | 	call	#_isint
138e0     00 FA 0D F2 | 	cmp	result1, #0 wz
138e4     52 00 00 5F 
138e8     BC E4 05 51 |  if_ne	add	objptr, ##42172
138ec     F2 38 68 5C |  if_ne	wrlong	#28, objptr
138f0     52 00 00 5F 
138f4     BC E4 85 51 |  if_ne	sub	objptr, ##42172
138f8                 | '   if isdec(args(i)) then r=result_uint 
138f8     30 4F 05 F1 | 	add	fp, #304
138fc     A7 2E 02 FB | 	rdlong	local05, fp
13900     02 2E 66 F0 | 	shl	local05, #2
13904     04 4F 85 F1 | 	sub	fp, #260
13908     A7 2E 02 F1 | 	add	local05, fp
1390c     17 13 02 FB | 	rdlong	arg01, local05
13910     2C 4E 85 F1 | 	sub	fp, #44
13914     14 32 BF FD | 	call	#_isdec
13918     00 FA 0D F2 | 	cmp	result1, #0 wz
1391c     52 00 00 5F 
13920     BC E4 05 51 |  if_ne	add	objptr, ##42172
13924     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
13928     52 00 00 5F 
1392c     BC E4 85 51 |  if_ne	sub	objptr, ##42172
13930                 | '   if not isnum(args(i)) then 
13930     30 4F 05 F1 | 	add	fp, #304
13934     A7 32 02 FB | 	rdlong	local07, fp
13938     19 35 02 F6 | 	mov	local08, local07
1393c     02 34 66 F0 | 	shl	local08, #2
13940     04 4F 85 F1 | 	sub	fp, #260
13944     A7 36 02 F6 | 	mov	local09, fp
13948     A7 34 02 F1 | 	add	local08, fp
1394c     1A 13 02 FB | 	rdlong	arg01, local08
13950     2C 4E 85 F1 | 	sub	fp, #44
13954     44 2B BF FD | 	call	#_isnum
13958     FD 2E 22 F6 | 	not	local05, result1
1395c     00 2E 0E F2 | 	cmp	local05, #0 wz
13960     44 01 90 AD |  if_e	jmp	#LR__1638
13964     52 00 00 FF 
13968     BC E4 05 F1 | 	add	objptr, ##42172
1396c     F2 56 68 FC | 	wrlong	#43, objptr
13970     52 00 00 FF 
13974     BC E4 85 F1 | 	sub	objptr, ##42172
13978     04 4E 05 F1 | 	add	fp, #4
1397c     A7 12 02 FB | 	rdlong	arg01, fp
13980     04 4E 85 F1 | 	sub	fp, #4
13984     09 29 02 F6 | 	mov	local02, arg01
13988     97 06 48 FB | 	callpa	#(@LR__1635-@LR__1634)>>2,fcache_load_ptr_
1398c                 | LR__1634
1398c     14 FB C9 FA | 	rdbyte	result1, local02 wz
13990     01 28 06 51 |  if_ne	add	local02, #1
13994     F4 FF 9F 5D |  if_ne	jmp	#LR__1634
13998                 | LR__1635
13998     09 29 82 F1 | 	sub	local02, arg01
1399c     14 33 02 F6 | 	mov	local07, local02
139a0     38 4F 05 F1 | 	add	fp, #312
139a4     A7 32 62 FC | 	wrlong	local07, fp
139a8     52 00 00 FF 
139ac     44 E4 05 F1 | 	add	objptr, ##42052
139b0     F2 12 02 FB | 	rdlong	arg01, objptr
139b4     19 13 82 F1 | 	sub	arg01, local07
139b8     04 12 86 F1 | 	sub	arg01, #4
139bc     03 12 26 F5 | 	andn	arg01, #3
139c0     F2 12 62 FC | 	wrlong	arg01, objptr
139c4     52 00 00 FF 
139c8     44 E4 85 F1 | 	sub	objptr, ##42052
139cc     A7 14 02 FB | 	rdlong	arg02, fp
139d0     38 4F 85 F1 | 	sub	fp, #312
139d4     64 E7 B0 FD | 	call	#_pslpoke
139d8                 | '     pslpoke memtop,l
139d8                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
139d8     34 4F 05 F1 | 	add	fp, #308
139dc     A7 02 68 FC | 	wrlong	#1, fp
139e0     04 4E 05 F1 | 	add	fp, #4
139e4     A7 38 02 FB | 	rdlong	local10, fp
139e8     38 4F 85 F1 | 	sub	fp, #312
139ec     01 38 06 F1 | 	add	local10, #1
139f0                 | LR__1636
139f0     34 4F 05 F1 | 	add	fp, #308
139f4     A7 2E 02 FB | 	rdlong	local05, fp
139f8     34 4F 85 F1 | 	sub	fp, #308
139fc     1C 2F 52 F2 | 	cmps	local05, local10 wc
13a00     84 00 90 3D |  if_ae	jmp	#LR__1637
13a04     52 00 00 FF 
13a08     44 E4 05 F1 | 	add	objptr, ##42052
13a0c     F2 32 02 FB | 	rdlong	local07, objptr
13a10     52 00 00 FF 
13a14     44 E4 85 F1 | 	sub	objptr, ##42052
13a18     03 32 06 F1 | 	add	local07, #3
13a1c     34 4F 05 F1 | 	add	fp, #308
13a20     A7 3A 02 FB | 	rdlong	local11, fp
13a24     1D 33 02 F1 | 	add	local07, local11
13a28     04 4E 85 F1 | 	sub	fp, #4
13a2c     A7 3C 02 FB | 	rdlong	local12, fp
13a30     02 3C 66 F0 | 	shl	local12, #2
13a34     04 4F 85 F1 | 	sub	fp, #260
13a38     A7 3E 02 F6 | 	mov	local13, fp
13a3c     A7 3C 02 F1 | 	add	local12, fp
13a40     1E 13 02 FB | 	rdlong	arg01, local12
13a44     2C 4E 85 F1 | 	sub	fp, #44
13a48     01 40 06 F6 | 	mov	local14, #1
13a4c     1D 15 02 F6 | 	mov	arg02, local11
13a50     01 16 06 F6 | 	mov	arg03, #1
13a54     C4 40 B1 FD | 	call	#__system__Mid_S
13a58     FD 14 C2 FA | 	rdbyte	arg02, result1
13a5c     19 13 02 F6 | 	mov	arg01, local07
13a60     68 E7 B0 FD | 	call	#_pspoke
13a64     34 4F 05 F1 | 	add	fp, #308
13a68     A7 34 02 FB | 	rdlong	local08, fp
13a6c     1A 33 02 F6 | 	mov	local07, local08
13a70     1A 31 02 F6 | 	mov	local06, local08
13a74     18 37 02 F6 | 	mov	local09, local06
13a78     01 36 06 F1 | 	add	local09, #1
13a7c     A7 36 62 FC | 	wrlong	local09, fp
13a80     34 4F 85 F1 | 	sub	fp, #308
13a84     68 FF 9F FD | 	jmp	#LR__1636
13a88                 | LR__1637
13a88     52 00 00 FF 
13a8c     44 E4 05 F1 | 	add	objptr, ##42052
13a90     F2 2E 02 FB | 	rdlong	local05, objptr
13a94     52 00 00 FF 
13a98     44 E4 85 F1 | 	sub	objptr, ##42052
13a9c     10 4E 05 F1 | 	add	fp, #16
13aa0     A7 2E 62 FC | 	wrlong	local05, fp
13aa4     10 4E 85 F1 | 	sub	fp, #16
13aa8                 | LR__1638
13aa8     D4 91 BF FD | 	call	#_pop
13aac     FE 2E 02 F6 | 	mov	local05, result2
13ab0     FF 42 02 F6 | 	mov	local15, result3
13ab4     1C 4E 05 F1 | 	add	fp, #28
13ab8     A7 FA 61 FC | 	wrlong	result1, fp
13abc     04 4E 05 F1 | 	add	fp, #4
13ac0     A7 2E 62 FC | 	wrlong	local05, fp
13ac4     04 4E 05 F1 | 	add	fp, #4
13ac8     A7 42 62 FC | 	wrlong	local15, fp
13acc     04 4E 85 F1 | 	sub	fp, #4
13ad0     A7 44 02 FB | 	rdlong	local16, fp
13ad4     0C 4E 85 F1 | 	sub	fp, #12
13ad8     A7 44 62 FC | 	wrlong	local16, fp
13adc                 | '   t1=pop() : vartype=t1.result.twowords(1)
13adc                 | '   select case vartype
13adc     14 4E 85 F1 | 	sub	fp, #20
13ae0     22 47 0A F6 | 	mov	local17, local16 wz
13ae4     64 00 90 AD |  if_e	jmp	#LR__1639
13ae8     00 47 0E F2 | 	cmp	local17, #256 wz
13aec     6C 00 90 AD |  if_e	jmp	#LR__1640
13af0     01 47 0E F2 | 	cmp	local17, #257 wz
13af4     74 00 90 AD |  if_e	jmp	#LR__1641
13af8     02 47 0E F2 | 	cmp	local17, #258 wz
13afc     7C 00 90 AD |  if_e	jmp	#LR__1642
13b00     03 47 0E F2 | 	cmp	local17, #259 wz
13b04     84 00 90 AD |  if_e	jmp	#LR__1643
13b08     04 47 0E F2 | 	cmp	local17, #260 wz
13b0c     8C 00 90 AD |  if_e	jmp	#LR__1644
13b10     05 47 0E F2 | 	cmp	local17, #261 wz
13b14     94 00 90 AD |  if_e	jmp	#LR__1645
13b18     06 47 0E F2 | 	cmp	local17, #262 wz
13b1c     9C 00 90 AD |  if_e	jmp	#LR__1646
13b20     07 47 0E F2 | 	cmp	local17, #263 wz
13b24     A4 00 90 AD |  if_e	jmp	#LR__1647
13b28     08 47 0E F2 | 	cmp	local17, #264 wz
13b2c     AC 00 90 AD |  if_e	jmp	#LR__1648
13b30     09 47 0E F2 | 	cmp	local17, #265 wz
13b34     B4 00 90 AD |  if_e	jmp	#LR__1649
13b38     0A 47 0E F2 | 	cmp	local17, #266 wz
13b3c     BC 00 90 AD |  if_e	jmp	#LR__1650
13b40     0B 47 0E F2 | 	cmp	local17, #267 wz
13b44     C4 00 90 AD |  if_e	jmp	#LR__1651
13b48     D0 00 90 FD | 	jmp	#LR__1652
13b4c                 | LR__1639
13b4c     18 4E 05 F1 | 	add	fp, #24
13b50     A7 18 68 FC | 	wrlong	#12, fp
13b54     18 4E 85 F1 | 	sub	fp, #24
13b58     CC 00 90 FD | 	jmp	#LR__1653
13b5c                 | LR__1640
13b5c     18 4E 05 F1 | 	add	fp, #24
13b60     A7 18 68 FC | 	wrlong	#12, fp
13b64     18 4E 85 F1 | 	sub	fp, #24
13b68     BC 00 90 FD | 	jmp	#LR__1653
13b6c                 | LR__1641
13b6c     18 4E 05 F1 | 	add	fp, #24
13b70     A7 02 68 FC | 	wrlong	#1, fp
13b74     18 4E 85 F1 | 	sub	fp, #24
13b78     AC 00 90 FD | 	jmp	#LR__1653
13b7c                 | LR__1642
13b7c     18 4E 05 F1 | 	add	fp, #24
13b80     A7 02 68 FC | 	wrlong	#1, fp
13b84     18 4E 85 F1 | 	sub	fp, #24
13b88     9C 00 90 FD | 	jmp	#LR__1653
13b8c                 | LR__1643
13b8c     18 4E 05 F1 | 	add	fp, #24
13b90     A7 04 68 FC | 	wrlong	#2, fp
13b94     18 4E 85 F1 | 	sub	fp, #24
13b98     8C 00 90 FD | 	jmp	#LR__1653
13b9c                 | LR__1644
13b9c     18 4E 05 F1 | 	add	fp, #24
13ba0     A7 04 68 FC | 	wrlong	#2, fp
13ba4     18 4E 85 F1 | 	sub	fp, #24
13ba8     7C 00 90 FD | 	jmp	#LR__1653
13bac                 | LR__1645
13bac     18 4E 05 F1 | 	add	fp, #24
13bb0     A7 08 68 FC | 	wrlong	#4, fp
13bb4     18 4E 85 F1 | 	sub	fp, #24
13bb8     6C 00 90 FD | 	jmp	#LR__1653
13bbc                 | LR__1646
13bbc     18 4E 05 F1 | 	add	fp, #24
13bc0     A7 08 68 FC | 	wrlong	#4, fp
13bc4     18 4E 85 F1 | 	sub	fp, #24
13bc8     5C 00 90 FD | 	jmp	#LR__1653
13bcc                 | LR__1647
13bcc     18 4E 05 F1 | 	add	fp, #24
13bd0     A7 10 68 FC | 	wrlong	#8, fp
13bd4     18 4E 85 F1 | 	sub	fp, #24
13bd8     4C 00 90 FD | 	jmp	#LR__1653
13bdc                 | LR__1648
13bdc     18 4E 05 F1 | 	add	fp, #24
13be0     A7 10 68 FC | 	wrlong	#8, fp
13be4     18 4E 85 F1 | 	sub	fp, #24
13be8     3C 00 90 FD | 	jmp	#LR__1653
13bec                 | LR__1649
13bec     18 4E 05 F1 | 	add	fp, #24
13bf0     A7 0C 68 FC | 	wrlong	#6, fp
13bf4     18 4E 85 F1 | 	sub	fp, #24
13bf8     2C 00 90 FD | 	jmp	#LR__1653
13bfc                 | LR__1650
13bfc     18 4E 05 F1 | 	add	fp, #24
13c00     A7 10 68 FC | 	wrlong	#8, fp
13c04     18 4E 85 F1 | 	sub	fp, #24
13c08     1C 00 90 FD | 	jmp	#LR__1653
13c0c                 | LR__1651
13c0c     18 4E 05 F1 | 	add	fp, #24
13c10     A7 0A 68 FC | 	wrlong	#5, fp
13c14     18 4E 85 F1 | 	sub	fp, #24
13c18     0C 00 90 FD | 	jmp	#LR__1653
13c1c                 | LR__1652
13c1c     18 4E 05 F1 | 	add	fp, #24
13c20     A7 18 68 FC | 	wrlong	#12, fp
13c24     18 4E 85 F1 | 	sub	fp, #24
13c28                 | LR__1653
13c28                 | '   if esize=12 andalso t1.result.uresult<$80000 then
13c28     18 4E 05 F1 | 	add	fp, #24
13c2c     A7 44 02 FB | 	rdlong	local16, fp
13c30     18 4E 85 F1 | 	sub	fp, #24
13c34     0C 44 0E F2 | 	cmp	local16, #12 wz
13c38     74 01 90 5D |  if_ne	jmp	#LR__1658
13c3c     1C 4E 05 F1 | 	add	fp, #28
13c40     A7 32 02 FB | 	rdlong	local07, fp
13c44     1C 4E 85 F1 | 	sub	fp, #28
13c48     00 04 00 FF 
13c4c     00 32 16 F2 | 	cmp	local07, ##524288 wc
13c50     5C 01 90 3D |  if_ae	jmp	#LR__1658
13c54                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
13c54     52 00 00 FF 
13c58     BC E4 05 F1 | 	add	objptr, ##42172
13c5c     F2 44 02 FB | 	rdlong	local16, objptr
13c60     52 00 00 FF 
13c64     BC E4 85 F1 | 	sub	objptr, ##42172
13c68     1C 44 0E F2 | 	cmp	local16, #28 wz
13c6c     38 00 90 5D |  if_ne	jmp	#LR__1654
13c70     1C 4E 05 F1 | 	add	fp, #28
13c74     A7 44 02 FB | 	rdlong	local16, fp
13c78     14 4F 05 F1 | 	add	fp, #276
13c7c     A7 32 02 FB | 	rdlong	local07, fp
13c80     19 35 02 F6 | 	mov	local08, local07
13c84     02 34 66 F0 | 	shl	local08, #2
13c88     04 4F 85 F1 | 	sub	fp, #260
13c8c     A7 36 02 F6 | 	mov	local09, fp
13c90     A7 34 02 F1 | 	add	local08, fp
13c94     1A 13 02 FB | 	rdlong	arg01, local08
13c98     00 14 06 F6 | 	mov	arg02, #0
13c9c     2C 4E 85 F1 | 	sub	fp, #44
13ca0     D4 51 B1 FD | 	call	#__system____builtin_atoi
13ca4     22 FB 61 FC | 	wrlong	result1, local16
13ca8                 | LR__1654
13ca8                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
13ca8     52 00 00 FF 
13cac     BC E4 05 F1 | 	add	objptr, ##42172
13cb0     F2 44 02 FB | 	rdlong	local16, objptr
13cb4     52 00 00 FF 
13cb8     BC E4 85 F1 | 	sub	objptr, ##42172
13cbc     1D 44 0E F2 | 	cmp	local16, #29 wz
13cc0     38 00 90 5D |  if_ne	jmp	#LR__1655
13cc4     1C 4E 05 F1 | 	add	fp, #28
13cc8     A7 44 02 FB | 	rdlong	local16, fp
13ccc     14 4F 05 F1 | 	add	fp, #276
13cd0     A7 32 02 FB | 	rdlong	local07, fp
13cd4     19 35 02 F6 | 	mov	local08, local07
13cd8     02 34 66 F0 | 	shl	local08, #2
13cdc     04 4F 85 F1 | 	sub	fp, #260
13ce0     A7 36 02 F6 | 	mov	local09, fp
13ce4     A7 34 02 F1 | 	add	local08, fp
13ce8     1A 13 02 FB | 	rdlong	arg01, local08
13cec     00 14 06 F6 | 	mov	arg02, #0
13cf0     2C 4E 85 F1 | 	sub	fp, #44
13cf4     80 51 B1 FD | 	call	#__system____builtin_atoi
13cf8     22 FB 61 FC | 	wrlong	result1, local16
13cfc                 | LR__1655
13cfc                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
13cfc     52 00 00 FF 
13d00     BC E4 05 F1 | 	add	objptr, ##42172
13d04     F2 44 02 FB | 	rdlong	local16, objptr
13d08     52 00 00 FF 
13d0c     BC E4 85 F1 | 	sub	objptr, ##42172
13d10     1E 44 0E F2 | 	cmp	local16, #30 wz
13d14     3C 00 90 5D |  if_ne	jmp	#LR__1656
13d18     30 4F 05 F1 | 	add	fp, #304
13d1c     A7 32 02 FB | 	rdlong	local07, fp
13d20     02 32 66 F0 | 	shl	local07, #2
13d24     04 4F 85 F1 | 	sub	fp, #260
13d28     A7 34 02 F6 | 	mov	local08, fp
13d2c     A7 32 02 F1 | 	add	local07, fp
13d30     19 13 02 FB | 	rdlong	arg01, local07
13d34     2C 4E 85 F1 | 	sub	fp, #44
13d38     D0 52 B1 FD | 	call	#__system____builtin_atof
13d3c     28 4E 05 F1 | 	add	fp, #40
13d40     A7 FA 61 FC | 	wrlong	result1, fp
13d44     0C 4E 85 F1 | 	sub	fp, #12
13d48     A7 44 02 FB | 	rdlong	local16, fp
13d4c     1C 4E 85 F1 | 	sub	fp, #28
13d50     22 FB 61 FC | 	wrlong	result1, local16
13d54                 | LR__1656
13d54                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
13d54     52 00 00 FF 
13d58     BC E4 05 F1 | 	add	objptr, ##42172
13d5c     F2 44 02 FB | 	rdlong	local16, objptr
13d60     52 00 00 FF 
13d64     BC E4 85 F1 | 	sub	objptr, ##42172
13d68     2B 44 0E F2 | 	cmp	local16, #43 wz
13d6c     18 00 90 5D |  if_ne	jmp	#LR__1657
13d70     1C 4E 05 F1 | 	add	fp, #28
13d74     A7 12 02 FB | 	rdlong	arg01, fp
13d78     0C 4E 85 F1 | 	sub	fp, #12
13d7c     A7 14 02 FB | 	rdlong	arg02, fp
13d80     10 4E 85 F1 | 	sub	fp, #16
13d84     09 15 62 FC | 	wrlong	arg02, arg01
13d88                 | LR__1657
13d88     1C 4E 05 F1 | 	add	fp, #28
13d8c     A7 12 02 FB | 	rdlong	arg01, fp
13d90     1C 4E 85 F1 | 	sub	fp, #28
13d94     08 12 06 F1 | 	add	arg01, #8
13d98     52 00 00 FF 
13d9c     BC E4 05 F1 | 	add	objptr, ##42172
13da0     F2 14 02 FB | 	rdlong	arg02, objptr
13da4     52 00 00 FF 
13da8     BC E4 85 F1 | 	sub	objptr, ##42172
13dac     09 15 62 FC | 	wrlong	arg02, arg01
13db0                 | LR__1658
13db0                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
13db0     18 4E 05 F1 | 	add	fp, #24
13db4     A7 44 02 FB | 	rdlong	local16, fp
13db8     18 4E 85 F1 | 	sub	fp, #24
13dbc     0C 44 0E F2 | 	cmp	local16, #12 wz
13dc0     94 01 90 5D |  if_ne	jmp	#LR__1663
13dc4     1C 4E 05 F1 | 	add	fp, #28
13dc8     A7 32 02 FB | 	rdlong	local07, fp
13dcc     1C 4E 85 F1 | 	sub	fp, #28
13dd0     00 04 00 FF 
13dd4     00 32 16 F2 | 	cmp	local07, ##524288 wc
13dd8     7C 01 90 CD |  if_b	jmp	#LR__1663
13ddc                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
13ddc     52 00 00 FF 
13de0     BC E4 05 F1 | 	add	objptr, ##42172
13de4     F2 44 02 FB | 	rdlong	local16, objptr
13de8     52 00 00 FF 
13dec     BC E4 85 F1 | 	sub	objptr, ##42172
13df0     1C 44 0E F2 | 	cmp	local16, #28 wz
13df4     40 00 90 5D |  if_ne	jmp	#LR__1659
13df8     1C 4E 05 F1 | 	add	fp, #28
13dfc     A7 44 02 FB | 	rdlong	local16, fp
13e00     14 4F 05 F1 | 	add	fp, #276
13e04     A7 32 02 FB | 	rdlong	local07, fp
13e08     19 35 02 F6 | 	mov	local08, local07
13e0c     02 34 66 F0 | 	shl	local08, #2
13e10     04 4F 85 F1 | 	sub	fp, #260
13e14     A7 36 02 F6 | 	mov	local09, fp
13e18     A7 34 02 F1 | 	add	local08, fp
13e1c     1A 13 02 FB | 	rdlong	arg01, local08
13e20     00 14 06 F6 | 	mov	arg02, #0
13e24     2C 4E 85 F1 | 	sub	fp, #44
13e28     4C 50 B1 FD | 	call	#__system____builtin_atoi
13e2c     FD 14 02 F6 | 	mov	arg02, result1
13e30     22 13 02 F6 | 	mov	arg01, local16
13e34     04 E3 B0 FD | 	call	#_pslpoke
13e38                 | LR__1659
13e38                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
13e38     52 00 00 FF 
13e3c     BC E4 05 F1 | 	add	objptr, ##42172
13e40     F2 44 02 FB | 	rdlong	local16, objptr
13e44     52 00 00 FF 
13e48     BC E4 85 F1 | 	sub	objptr, ##42172
13e4c     1D 44 0E F2 | 	cmp	local16, #29 wz
13e50     40 00 90 5D |  if_ne	jmp	#LR__1660
13e54     1C 4E 05 F1 | 	add	fp, #28
13e58     A7 44 02 FB | 	rdlong	local16, fp
13e5c     14 4F 05 F1 | 	add	fp, #276
13e60     A7 32 02 FB | 	rdlong	local07, fp
13e64     19 35 02 F6 | 	mov	local08, local07
13e68     02 34 66 F0 | 	shl	local08, #2
13e6c     04 4F 85 F1 | 	sub	fp, #260
13e70     A7 36 02 F6 | 	mov	local09, fp
13e74     A7 34 02 F1 | 	add	local08, fp
13e78     1A 13 02 FB | 	rdlong	arg01, local08
13e7c     00 14 06 F6 | 	mov	arg02, #0
13e80     2C 4E 85 F1 | 	sub	fp, #44
13e84     F0 4F B1 FD | 	call	#__system____builtin_atoi
13e88     FD 14 02 F6 | 	mov	arg02, result1
13e8c     22 13 02 F6 | 	mov	arg01, local16
13e90     A8 E2 B0 FD | 	call	#_pslpoke
13e94                 | LR__1660
13e94                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13e94     52 00 00 FF 
13e98     BC E4 05 F1 | 	add	objptr, ##42172
13e9c     F2 44 02 FB | 	rdlong	local16, objptr
13ea0     52 00 00 FF 
13ea4     BC E4 85 F1 | 	sub	objptr, ##42172
13ea8     1E 44 0E F2 | 	cmp	local16, #30 wz
13eac     4C 00 90 5D |  if_ne	jmp	#LR__1661
13eb0     30 4F 05 F1 | 	add	fp, #304
13eb4     A7 32 02 FB | 	rdlong	local07, fp
13eb8     02 32 66 F0 | 	shl	local07, #2
13ebc     04 4F 85 F1 | 	sub	fp, #260
13ec0     A7 34 02 F6 | 	mov	local08, fp
13ec4     A7 32 02 F1 | 	add	local07, fp
13ec8     19 13 02 FB | 	rdlong	arg01, local07
13ecc     2C 4E 85 F1 | 	sub	fp, #44
13ed0     38 51 B1 FD | 	call	#__system____builtin_atof
13ed4     28 4E 05 F1 | 	add	fp, #40
13ed8     A7 FA 61 FC | 	wrlong	result1, fp
13edc     0C 4E 85 F1 | 	sub	fp, #12
13ee0     A7 44 02 FB | 	rdlong	local16, fp
13ee4     0C 4E 05 F1 | 	add	fp, #12
13ee8     A7 12 02 F6 | 	mov	arg01, fp
13eec     28 4E 85 F1 | 	sub	fp, #40
13ef0     09 15 02 FB | 	rdlong	arg02, arg01
13ef4     22 13 02 F6 | 	mov	arg01, local16
13ef8     40 E2 B0 FD | 	call	#_pslpoke
13efc                 | LR__1661
13efc                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
13efc     52 00 00 FF 
13f00     BC E4 05 F1 | 	add	objptr, ##42172
13f04     F2 44 02 FB | 	rdlong	local16, objptr
13f08     52 00 00 FF 
13f0c     BC E4 85 F1 | 	sub	objptr, ##42172
13f10     2B 44 0E F2 | 	cmp	local16, #43 wz
13f14     18 00 90 5D |  if_ne	jmp	#LR__1662
13f18     1C 4E 05 F1 | 	add	fp, #28
13f1c     A7 12 02 FB | 	rdlong	arg01, fp
13f20     0C 4E 85 F1 | 	sub	fp, #12
13f24     A7 14 02 FB | 	rdlong	arg02, fp
13f28     10 4E 85 F1 | 	sub	fp, #16
13f2c     0C E2 B0 FD | 	call	#_pslpoke
13f30                 | LR__1662
13f30     1C 4E 05 F1 | 	add	fp, #28
13f34     A7 12 02 FB | 	rdlong	arg01, fp
13f38     1C 4E 85 F1 | 	sub	fp, #28
13f3c     08 12 06 F1 | 	add	arg01, #8
13f40     52 00 00 FF 
13f44     BC E4 05 F1 | 	add	objptr, ##42172
13f48     F2 14 02 FB | 	rdlong	arg02, objptr
13f4c     52 00 00 FF 
13f50     BC E4 85 F1 | 	sub	objptr, ##42172
13f54     E4 E1 B0 FD | 	call	#_pslpoke
13f58                 | LR__1663
13f58                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
13f58     18 4E 05 F1 | 	add	fp, #24
13f5c     A7 44 02 FB | 	rdlong	local16, fp
13f60     18 4E 85 F1 | 	sub	fp, #24
13f64     05 44 0E F2 | 	cmp	local16, #5 wz
13f68     52 00 00 AF 
13f6c     BC E4 05 A1 |  if_e	add	objptr, ##42172
13f70     F2 42 02 AB |  if_e	rdlong	local15, objptr
13f74     52 00 00 AF 
13f78     BC E4 85 A1 |  if_e	sub	objptr, ##42172
13f7c     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
13f80     18 00 90 5D |  if_ne	jmp	#LR__1664
13f84     1C 4E 05 F1 | 	add	fp, #28
13f88     A7 12 02 FB | 	rdlong	arg01, fp
13f8c     0C 4E 85 F1 | 	sub	fp, #12
13f90     A7 14 02 FB | 	rdlong	arg02, fp
13f94     10 4E 85 F1 | 	sub	fp, #16
13f98     A0 E1 B0 FD | 	call	#_pslpoke
13f9c                 | LR__1664
13f9c                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
13f9c     18 4E 05 F1 | 	add	fp, #24
13fa0     A7 44 02 FB | 	rdlong	local16, fp
13fa4     18 4E 85 F1 | 	sub	fp, #24
13fa8     04 44 0E F2 | 	cmp	local16, #4 wz
13fac     54 00 90 5D |  if_ne	jmp	#LR__1665
13fb0     52 00 00 FF 
13fb4     BC E4 05 F1 | 	add	objptr, ##42172
13fb8     F2 42 02 FB | 	rdlong	local15, objptr
13fbc     52 00 00 FF 
13fc0     BC E4 85 F1 | 	sub	objptr, ##42172
13fc4     2B 42 0E F2 | 	cmp	local15, #43 wz
13fc8     38 00 90 AD |  if_e	jmp	#LR__1665
13fcc     1C 4E 05 F1 | 	add	fp, #28
13fd0     A7 44 02 FB | 	rdlong	local16, fp
13fd4     14 4F 05 F1 | 	add	fp, #276
13fd8     A7 34 02 FB | 	rdlong	local08, fp
13fdc     02 34 66 F0 | 	shl	local08, #2
13fe0     04 4F 85 F1 | 	sub	fp, #260
13fe4     A7 34 02 F1 | 	add	local08, fp
13fe8     1A 13 02 FB | 	rdlong	arg01, local08
13fec     00 14 06 F6 | 	mov	arg02, #0
13ff0     2C 4E 85 F1 | 	sub	fp, #44
13ff4     80 4E B1 FD | 	call	#__system____builtin_atoi
13ff8     FD 14 02 F6 | 	mov	arg02, result1
13ffc     22 13 02 F6 | 	mov	arg01, local16
14000     38 E1 B0 FD | 	call	#_pslpoke
14004                 | LR__1665
14004                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
14004     18 4E 05 F1 | 	add	fp, #24
14008     A7 44 02 FB | 	rdlong	local16, fp
1400c     18 4E 85 F1 | 	sub	fp, #24
14010     02 44 0E F2 | 	cmp	local16, #2 wz
14014     54 00 90 5D |  if_ne	jmp	#LR__1666
14018     52 00 00 FF 
1401c     BC E4 05 F1 | 	add	objptr, ##42172
14020     F2 42 02 FB | 	rdlong	local15, objptr
14024     52 00 00 FF 
14028     BC E4 85 F1 | 	sub	objptr, ##42172
1402c     2B 42 0E F2 | 	cmp	local15, #43 wz
14030     38 00 90 AD |  if_e	jmp	#LR__1666
14034     1C 4E 05 F1 | 	add	fp, #28
14038     A7 44 02 FB | 	rdlong	local16, fp
1403c     14 4F 05 F1 | 	add	fp, #276
14040     A7 34 02 FB | 	rdlong	local08, fp
14044     02 34 66 F0 | 	shl	local08, #2
14048     04 4F 85 F1 | 	sub	fp, #260
1404c     A7 34 02 F1 | 	add	local08, fp
14050     1A 13 02 FB | 	rdlong	arg01, local08
14054     00 14 06 F6 | 	mov	arg02, #0
14058     2C 4E 85 F1 | 	sub	fp, #44
1405c     18 4E B1 FD | 	call	#__system____builtin_atoi
14060     FD 14 02 F6 | 	mov	arg02, result1
14064     22 13 02 F6 | 	mov	arg01, local16
14068     18 E1 B0 FD | 	call	#_psdpoke
1406c                 | LR__1666
1406c                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
1406c     18 4E 05 F1 | 	add	fp, #24
14070     A7 44 02 FB | 	rdlong	local16, fp
14074     18 4E 85 F1 | 	sub	fp, #24
14078     01 44 0E F2 | 	cmp	local16, #1 wz
1407c     54 00 90 5D |  if_ne	jmp	#LR__1667
14080     52 00 00 FF 
14084     BC E4 05 F1 | 	add	objptr, ##42172
14088     F2 42 02 FB | 	rdlong	local15, objptr
1408c     52 00 00 FF 
14090     BC E4 85 F1 | 	sub	objptr, ##42172
14094     2B 42 0E F2 | 	cmp	local15, #43 wz
14098     38 00 90 AD |  if_e	jmp	#LR__1667
1409c     1C 4E 05 F1 | 	add	fp, #28
140a0     A7 44 02 FB | 	rdlong	local16, fp
140a4     14 4F 05 F1 | 	add	fp, #276
140a8     A7 34 02 FB | 	rdlong	local08, fp
140ac     02 34 66 F0 | 	shl	local08, #2
140b0     04 4F 85 F1 | 	sub	fp, #260
140b4     A7 34 02 F1 | 	add	local08, fp
140b8     1A 13 02 FB | 	rdlong	arg01, local08
140bc     00 14 06 F6 | 	mov	arg02, #0
140c0     2C 4E 85 F1 | 	sub	fp, #44
140c4     B0 4D B1 FD | 	call	#__system____builtin_atoi
140c8     FD 14 02 F6 | 	mov	arg02, result1
140cc     22 13 02 F6 | 	mov	arg01, local16
140d0     F8 E0 B0 FD | 	call	#_pspoke
140d4                 | LR__1667
140d4                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
140d4     18 4E 05 F1 | 	add	fp, #24
140d8     A7 44 02 FB | 	rdlong	local16, fp
140dc     18 4E 85 F1 | 	sub	fp, #24
140e0     06 44 0E F2 | 	cmp	local16, #6 wz
140e4     64 00 90 5D |  if_ne	jmp	#LR__1668
140e8     52 00 00 FF 
140ec     BC E4 05 F1 | 	add	objptr, ##42172
140f0     F2 42 02 FB | 	rdlong	local15, objptr
140f4     52 00 00 FF 
140f8     BC E4 85 F1 | 	sub	objptr, ##42172
140fc     2B 42 0E F2 | 	cmp	local15, #43 wz
14100     48 00 90 AD |  if_e	jmp	#LR__1668
14104     30 4F 05 F1 | 	add	fp, #304
14108     A7 32 02 FB | 	rdlong	local07, fp
1410c     02 32 66 F0 | 	shl	local07, #2
14110     04 4F 85 F1 | 	sub	fp, #260
14114     A7 32 02 F1 | 	add	local07, fp
14118     19 13 02 FB | 	rdlong	arg01, local07
1411c     2C 4E 85 F1 | 	sub	fp, #44
14120     E8 4E B1 FD | 	call	#__system____builtin_atof
14124     28 4E 05 F1 | 	add	fp, #40
14128     A7 FA 61 FC | 	wrlong	result1, fp
1412c     0C 4E 85 F1 | 	sub	fp, #12
14130     A7 44 02 FB | 	rdlong	local16, fp
14134     0C 4E 05 F1 | 	add	fp, #12
14138     A7 12 02 F6 | 	mov	arg01, fp
1413c     28 4E 85 F1 | 	sub	fp, #40
14140     09 15 02 FB | 	rdlong	arg02, arg01
14144     22 13 02 F6 | 	mov	arg01, local16
14148     F0 DF B0 FD | 	call	#_pslpoke
1414c                 | LR__1668
1414c     30 4F 05 F1 | 	add	fp, #304
14150     A7 42 02 FB | 	rdlong	local15, fp
14154     01 42 06 F1 | 	add	local15, #1
14158     A7 42 62 FC | 	wrlong	local15, fp
1415c     30 4F 85 F1 | 	sub	fp, #304
14160     E4 F6 9F FD | 	jmp	#LR__1633
14164                 | LR__1669
14164                 | LR__1670
14164     A7 F0 03 F6 | 	mov	ptra, fp
14168     B2 00 A0 FD | 	call	#popregs_
1416c                 | _do_input_ret
1416c     2D 00 64 FD | 	ret
14170                 | 
14170                 | ' 
14170                 | ' ' ----------------  left$
14170                 | ' 
14170                 | ' sub do_left
14170                 | _do_left
14170     00 4A 05 F6 | 	mov	COUNT_, #0
14174     A8 00 A0 FD | 	call	#pushregs_
14178     14 F0 07 F1 | 	add	ptra, #20
1417c     4A 00 00 FF 
14180     80 E4 05 F1 | 	add	objptr, ##38016
14184     F2 16 02 FB | 	rdlong	arg03, objptr
14188     0B 15 02 F6 | 	mov	arg02, arg03
1418c     01 14 66 F0 | 	shl	arg02, #1
14190     0B 15 02 F1 | 	add	arg02, arg03
14194     02 14 66 F0 | 	shl	arg02, #2
14198     03 00 00 FF 
1419c     04 E4 85 F1 | 	sub	objptr, ##1540
141a0     F2 14 02 F1 | 	add	arg02, objptr
141a4     0A 17 02 FB | 	rdlong	arg03, arg02
141a8     0C 4E 05 F1 | 	add	fp, #12
141ac     A7 16 62 FC | 	wrlong	arg03, fp
141b0                 | ' 
141b0                 | ' numpar=compiledline(lineptr_e).result.uresult
141b0                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
141b0     0C 4E 85 F1 | 	sub	fp, #12
141b4     02 16 0E F2 | 	cmp	arg03, #2 wz
141b8     47 00 00 FF 
141bc     7C E4 85 F1 | 	sub	objptr, ##36476
141c0     40 00 90 AD |  if_e	jmp	#LR__1680
141c4     00 12 06 F6 | 	mov	arg01, #0
141c8     E4 74 B1 FD | 	call	#__system___getiolock_0599
141cc     FD 12 02 F6 | 	mov	arg01, result1
141d0     B4 17 B1 FD | 	call	#__system___lockmem
141d4     AF 01 00 FF 
141d8     00 14 06 F6 | 	mov	arg02, ##@LR__5876
141dc     00 12 06 F6 | 	mov	arg01, #0
141e0     00 16 06 F6 | 	mov	arg03, #0
141e4     94 24 B1 FD | 	call	#__system___basic_print_string
141e8     00 12 06 F6 | 	mov	arg01, #0
141ec     C0 74 B1 FD | 	call	#__system___getiolock_0599
141f0     FD 00 68 FC | 	wrlong	#0, result1
141f4     27 12 06 F6 | 	mov	arg01, #39
141f8     00 14 06 F6 | 	mov	arg02, #0
141fc     9C DD B0 FD | 	call	#_printerror
14200     EC 00 90 FD | 	jmp	#LR__1683
14204                 | LR__1680
14204     78 8A BF FD | 	call	#_pop
14208     FF 16 02 F6 | 	mov	arg03, result3
1420c     A7 FA 61 FC | 	wrlong	result1, fp
14210     04 4E 05 F1 | 	add	fp, #4
14214     A7 FC 61 FC | 	wrlong	result2, fp
14218     04 4E 05 F1 | 	add	fp, #4
1421c     A7 16 62 FC | 	wrlong	arg03, fp
14220     08 4E 85 F1 | 	sub	fp, #8
14224     A7 12 02 F6 | 	mov	arg01, fp
14228     38 8C BF FD | 	call	#_converttoint
1422c     FD 16 02 F6 | 	mov	arg03, result1
14230     10 4E 05 F1 | 	add	fp, #16
14234     A7 16 62 FC | 	wrlong	arg03, fp
14238     10 4E 85 F1 | 	sub	fp, #16
1423c     40 8A BF FD | 	call	#_pop
14240     FF 16 02 F6 | 	mov	arg03, result3
14244     A7 FA 61 FC | 	wrlong	result1, fp
14248     04 4E 05 F1 | 	add	fp, #4
1424c     A7 FC 61 FC | 	wrlong	result2, fp
14250     04 4E 05 F1 | 	add	fp, #4
14254     A7 16 62 FC | 	wrlong	arg03, fp
14258                 | ' t1=pop() : arg=converttoint(t1)
14258                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14258     08 4E 85 F1 | 	sub	fp, #8
1425c     2B 16 0E F2 | 	cmp	arg03, #43 wz
14260     18 00 90 5D |  if_ne	jmp	#LR__1681
14264     A7 12 02 FB | 	rdlong	arg01, fp
14268     8C 8B BF FD | 	call	#_convertstring
1426c     A7 FA 61 FC | 	wrlong	result1, fp
14270     08 4E 05 F1 | 	add	fp, #8
14274     A7 3E 68 FC | 	wrlong	#31, fp
14278     08 4E 85 F1 | 	sub	fp, #8
1427c                 | LR__1681
1427c                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
1427c     08 4E 05 F1 | 	add	fp, #8
14280     A7 16 02 FB | 	rdlong	arg03, fp
14284     08 4E 85 F1 | 	sub	fp, #8
14288     1F 16 0E F2 | 	cmp	arg03, #31 wz
1428c     40 00 90 AD |  if_e	jmp	#LR__1682
14290     00 12 06 F6 | 	mov	arg01, #0
14294     18 74 B1 FD | 	call	#__system___getiolock_0599
14298     FD 12 02 F6 | 	mov	arg01, result1
1429c     E8 16 B1 FD | 	call	#__system___lockmem
142a0     AF 01 00 FF 
142a4     08 14 06 F6 | 	mov	arg02, ##@LR__5877
142a8     00 12 06 F6 | 	mov	arg01, #0
142ac     00 16 06 F6 | 	mov	arg03, #0
142b0     C8 23 B1 FD | 	call	#__system___basic_print_string
142b4     00 12 06 F6 | 	mov	arg01, #0
142b8     F4 73 B1 FD | 	call	#__system___getiolock_0599
142bc     FD 00 68 FC | 	wrlong	#0, result1
142c0     0F 12 06 F6 | 	mov	arg01, #15
142c4     00 14 06 F6 | 	mov	arg02, #0
142c8     D0 DC B0 FD | 	call	#_printerror
142cc     20 00 90 FD | 	jmp	#LR__1683
142d0                 | LR__1682
142d0     A7 12 02 FB | 	rdlong	arg01, fp
142d4     10 4E 05 F1 | 	add	fp, #16
142d8     A7 14 02 FB | 	rdlong	arg02, fp
142dc     10 4E 85 F1 | 	sub	fp, #16
142e0     20 37 B1 FD | 	call	#__system__Left_S
142e4     A7 FA 61 FC | 	wrlong	result1, fp
142e8     A7 12 02 F6 | 	mov	arg01, fp
142ec     28 8A BF FD | 	call	#_push
142f0                 | LR__1683
142f0     A7 F0 03 F6 | 	mov	ptra, fp
142f4     B2 00 A0 FD | 	call	#popregs_
142f8                 | _do_left_ret
142f8     2D 00 64 FD | 	ret
142fc                 | 
142fc                 | ' 
142fc                 | ' ' ----------------  len
142fc                 | ' 
142fc                 | ' sub do_len
142fc                 | _do_len
142fc     02 4A 05 F6 | 	mov	COUNT_, #2
14300     A8 00 A0 FD | 	call	#pushregs_
14304     14 F0 07 F1 | 	add	ptra, #20
14308     4A 00 00 FF 
1430c     80 E4 05 F1 | 	add	objptr, ##38016
14310     F2 26 02 FB | 	rdlong	local01, objptr
14314     13 17 02 F6 | 	mov	arg03, local01
14318     01 16 66 F0 | 	shl	arg03, #1
1431c     13 17 02 F1 | 	add	arg03, local01
14320     02 16 66 F0 | 	shl	arg03, #2
14324     03 00 00 FF 
14328     04 E4 85 F1 | 	sub	objptr, ##1540
1432c     F2 16 02 F1 | 	add	arg03, objptr
14330     0B 17 02 FB | 	rdlong	arg03, arg03
14334     0C 4E 05 F1 | 	add	fp, #12
14338     A7 16 62 FC | 	wrlong	arg03, fp
1433c                 | ' 
1433c                 | ' numpar=compiledline(lineptr_e).result.uresult
1433c                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
1433c     0C 4E 85 F1 | 	sub	fp, #12
14340     02 16 16 F2 | 	cmp	arg03, #2 wc
14344     47 00 00 FF 
14348     7C E4 85 F1 | 	sub	objptr, ##36476
1434c     0C 4E 05 C1 |  if_b	add	fp, #12
14350     A7 26 0A CB |  if_b	rdlong	local01, fp wz
14354     0C 4E 85 C1 |  if_b	sub	fp, #12
14358     40 00 90 4D |  if_c_and_nz	jmp	#LR__1690
1435c     00 12 06 F6 | 	mov	arg01, #0
14360     4C 73 B1 FD | 	call	#__system___getiolock_0599
14364     FD 12 02 F6 | 	mov	arg01, result1
14368     1C 16 B1 FD | 	call	#__system___lockmem
1436c     AF 01 00 FF 
14370     10 14 06 F6 | 	mov	arg02, ##@LR__5878
14374     00 12 06 F6 | 	mov	arg01, #0
14378     00 16 06 F6 | 	mov	arg03, #0
1437c     FC 22 B1 FD | 	call	#__system___basic_print_string
14380     00 12 06 F6 | 	mov	arg01, #0
14384     28 73 B1 FD | 	call	#__system___getiolock_0599
14388     FD 00 68 FC | 	wrlong	#0, result1
1438c     27 12 06 F6 | 	mov	arg01, #39
14390     00 14 06 F6 | 	mov	arg02, #0
14394     04 DC B0 FD | 	call	#_printerror
14398     C8 00 90 FD | 	jmp	#LR__1695
1439c                 | LR__1690
1439c     E0 88 BF FD | 	call	#_pop
143a0     FF 16 02 F6 | 	mov	arg03, result3
143a4     A7 FA 61 FC | 	wrlong	result1, fp
143a8     04 4E 05 F1 | 	add	fp, #4
143ac     A7 FC 61 FC | 	wrlong	result2, fp
143b0     04 4E 05 F1 | 	add	fp, #4
143b4     A7 16 62 FC | 	wrlong	arg03, fp
143b8                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
143b8     08 4E 85 F1 | 	sub	fp, #8
143bc     2B 16 0E F2 | 	cmp	arg03, #43 wz
143c0     18 00 90 5D |  if_ne	jmp	#LR__1691
143c4     A7 12 02 FB | 	rdlong	arg01, fp
143c8     2C 8A BF FD | 	call	#_convertstring
143cc     A7 FA 61 FC | 	wrlong	result1, fp
143d0     08 4E 05 F1 | 	add	fp, #8
143d4     A7 3E 68 FC | 	wrlong	#31, fp
143d8     08 4E 85 F1 | 	sub	fp, #8
143dc                 | LR__1691
143dc                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
143dc     08 4E 05 F1 | 	add	fp, #8
143e0     A7 16 02 FB | 	rdlong	arg03, fp
143e4     08 4E 85 F1 | 	sub	fp, #8
143e8     1F 16 0E F2 | 	cmp	arg03, #31 wz
143ec     40 00 90 AD |  if_e	jmp	#LR__1692
143f0     00 12 06 F6 | 	mov	arg01, #0
143f4     B8 72 B1 FD | 	call	#__system___getiolock_0599
143f8     FD 12 02 F6 | 	mov	arg01, result1
143fc     88 15 B1 FD | 	call	#__system___lockmem
14400     AF 01 00 FF 
14404     16 14 06 F6 | 	mov	arg02, ##@LR__5879
14408     00 12 06 F6 | 	mov	arg01, #0
1440c     00 16 06 F6 | 	mov	arg03, #0
14410     68 22 B1 FD | 	call	#__system___basic_print_string
14414     00 12 06 F6 | 	mov	arg01, #0
14418     94 72 B1 FD | 	call	#__system___getiolock_0599
1441c     FD 00 68 FC | 	wrlong	#0, result1
14420     0F 12 06 F6 | 	mov	arg01, #15
14424     00 14 06 F6 | 	mov	arg02, #0
14428     70 DB B0 FD | 	call	#_printerror
1442c     34 00 90 FD | 	jmp	#LR__1695
14430                 | LR__1692
14430     A7 12 02 FB | 	rdlong	arg01, fp
14434     09 29 02 F6 | 	mov	local02, arg01
14438     97 06 48 FB | 	callpa	#(@LR__1694-@LR__1693)>>2,fcache_load_ptr_
1443c                 | LR__1693
1443c     14 FB C9 FA | 	rdbyte	result1, local02 wz
14440     01 28 06 51 |  if_ne	add	local02, #1
14444     F4 FF 9F 5D |  if_ne	jmp	#LR__1693
14448                 | LR__1694
14448     09 29 82 F1 | 	sub	local02, arg01
1444c     A7 28 62 FC | 	wrlong	local02, fp
14450     08 4E 05 F1 | 	add	fp, #8
14454     A7 38 68 FC | 	wrlong	#28, fp
14458     08 4E 85 F1 | 	sub	fp, #8
1445c     A7 12 02 F6 | 	mov	arg01, fp
14460     B4 88 BF FD | 	call	#_push
14464                 | LR__1695
14464     A7 F0 03 F6 | 	mov	ptra, fp
14468     B2 00 A0 FD | 	call	#popregs_
1446c                 | _do_len_ret
1446c     2D 00 64 FD | 	ret
14470                 | 
14470                 | ' 
14470                 | ' ' ----------------  list
14470                 | ' 
14470                 | ' sub do_list
14470                 | _do_list
14470     02 4A 05 F6 | 	mov	COUNT_, #2
14474     A8 00 A0 FD | 	call	#pushregs_
14478     B8 F0 07 F1 | 	add	ptra, #184
1447c     04 4E 05 F1 | 	add	fp, #4
14480     A7 00 68 FC | 	wrlong	#0, fp
14484     04 4E 05 F1 | 	add	fp, #4
14488     FF FF BF FF 
1448c     A7 FE 6B FC | 	wrlong	##2147483647, fp
14490     08 4E 85 F1 | 	sub	fp, #8
14494     4A 00 00 FF 
14498     80 E4 05 F1 | 	add	objptr, ##38016
1449c     F2 26 02 FB | 	rdlong	local01, objptr
144a0     13 17 02 F6 | 	mov	arg03, local01
144a4     01 16 66 F0 | 	shl	arg03, #1
144a8     13 17 02 F1 | 	add	arg03, local01
144ac     02 16 66 F0 | 	shl	arg03, #2
144b0     03 00 00 FF 
144b4     04 E4 85 F1 | 	sub	objptr, ##1540
144b8     F2 16 02 F1 | 	add	arg03, objptr
144bc     0B 17 02 FB | 	rdlong	arg03, arg03
144c0     A7 16 62 FC | 	wrlong	arg03, fp
144c4                 | ' 
144c4                 | ' startline=0 : endline=$7FFFFFFF
144c4                 | ' numpar=compiledline(lineptr_e).result.uresult
144c4                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
144c4     01 16 0E F2 | 	cmp	arg03, #1 wz
144c8     47 00 00 FF 
144cc     7C E4 85 F1 | 	sub	objptr, ##36476
144d0     3C 00 90 5D |  if_ne	jmp	#LR__1700
144d4     A8 87 BF FD | 	call	#_pop
144d8     FF 26 02 F6 | 	mov	local01, result3
144dc     0C 4E 05 F1 | 	add	fp, #12
144e0     A7 FA 61 FC | 	wrlong	result1, fp
144e4     04 4E 05 F1 | 	add	fp, #4
144e8     A7 FC 61 FC | 	wrlong	result2, fp
144ec     04 4E 05 F1 | 	add	fp, #4
144f0     A7 26 62 FC | 	wrlong	local01, fp
144f4     08 4E 85 F1 | 	sub	fp, #8
144f8     A7 12 02 F6 | 	mov	arg01, fp
144fc     0C 4E 85 F1 | 	sub	fp, #12
14500     60 89 BF FD | 	call	#_converttoint
14504     04 4E 05 F1 | 	add	fp, #4
14508     A7 FA 61 FC | 	wrlong	result1, fp
1450c     04 4E 85 F1 | 	sub	fp, #4
14510                 | LR__1700
14510                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
14510     A7 16 02 FB | 	rdlong	arg03, fp
14514     02 16 0E F2 | 	cmp	arg03, #2 wz
14518     7C 00 90 5D |  if_ne	jmp	#LR__1701
1451c     60 87 BF FD | 	call	#_pop
14520     FF 26 02 F6 | 	mov	local01, result3
14524     0C 4E 05 F1 | 	add	fp, #12
14528     A7 FA 61 FC | 	wrlong	result1, fp
1452c     04 4E 05 F1 | 	add	fp, #4
14530     A7 FC 61 FC | 	wrlong	result2, fp
14534     04 4E 05 F1 | 	add	fp, #4
14538     A7 26 62 FC | 	wrlong	local01, fp
1453c     08 4E 85 F1 | 	sub	fp, #8
14540     A7 12 02 F6 | 	mov	arg01, fp
14544     0C 4E 85 F1 | 	sub	fp, #12
14548     18 89 BF FD | 	call	#_converttoint
1454c     FD 26 02 F6 | 	mov	local01, result1
14550     08 4E 05 F1 | 	add	fp, #8
14554     A7 26 62 FC | 	wrlong	local01, fp
14558     08 4E 85 F1 | 	sub	fp, #8
1455c     20 87 BF FD | 	call	#_pop
14560     FF 26 02 F6 | 	mov	local01, result3
14564     0C 4E 05 F1 | 	add	fp, #12
14568     A7 FA 61 FC | 	wrlong	result1, fp
1456c     04 4E 05 F1 | 	add	fp, #4
14570     A7 FC 61 FC | 	wrlong	result2, fp
14574     04 4E 05 F1 | 	add	fp, #4
14578     A7 26 62 FC | 	wrlong	local01, fp
1457c     08 4E 85 F1 | 	sub	fp, #8
14580     A7 12 02 F6 | 	mov	arg01, fp
14584     0C 4E 85 F1 | 	sub	fp, #12
14588     D8 88 BF FD | 	call	#_converttoint
1458c     04 4E 05 F1 | 	add	fp, #4
14590     A7 FA 61 FC | 	wrlong	result1, fp
14594     04 4E 85 F1 | 	sub	fp, #4
14598                 | LR__1701
14598                 | ' 
14598                 | ' 
14598                 | ' print
14598     00 12 06 F6 | 	mov	arg01, #0
1459c     10 71 B1 FD | 	call	#__system___getiolock_0599
145a0     FD 12 02 F6 | 	mov	arg01, result1
145a4     E0 13 B1 FD | 	call	#__system___lockmem
145a8     00 12 06 F6 | 	mov	arg01, #0
145ac     0A 14 06 F6 | 	mov	arg02, #10
145b0     00 16 06 F6 | 	mov	arg03, #0
145b4     6C 20 B1 FD | 	call	#__system___basic_print_char
145b8     00 12 06 F6 | 	mov	arg01, #0
145bc     F0 70 B1 FD | 	call	#__system___getiolock_0599
145c0     FD 00 68 FC | 	wrlong	#0, result1
145c4     4A 00 00 FF 
145c8     88 E4 05 F1 | 	add	objptr, ##38024
145cc     F2 28 02 FB | 	rdlong	local02, objptr
145d0     08 00 00 FF 
145d4     40 E4 05 F1 | 	add	objptr, ##4160
145d8     F2 28 62 FC | 	wrlong	local02, objptr
145dc     52 00 00 FF 
145e0     C8 E4 85 F1 | 	sub	objptr, ##42184
145e4                 | ' do 
145e4                 | LR__1702
145e4     20 4E 05 F1 | 	add	fp, #32
145e8     A7 12 02 F6 | 	mov	arg01, fp
145ec     20 4E 85 F1 | 	sub	fp, #32
145f0     52 00 00 FF 
145f4     C8 E4 05 F1 | 	add	objptr, ##42184
145f8     F2 14 02 FB | 	rdlong	arg02, objptr
145fc     18 16 06 F6 | 	mov	arg03, #24
14600     46 00 00 FF 
14604     FC E5 85 F1 | 	sub	objptr, ##36348
14608     F4 06 B1 FD | 	call	#_psram_spin2_read1
1460c     0B 00 00 FF 
14610     CC E4 85 F1 | 	sub	objptr, ##5836
14614                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
14614                 | '   
14614                 | '   if header(0)<> $FFFFFFFF then
14614     20 4E 05 F1 | 	add	fp, #32
14618     A7 28 02 FB | 	rdlong	local02, fp
1461c     20 4E 85 F1 | 	sub	fp, #32
14620     FF FF 7F FF 
14624     FF 29 0E F2 | 	cmp	local02, ##-1 wz
14628     A8 00 90 AD |  if_e	jmp	#LR__1704
1462c     38 4E 05 F1 | 	add	fp, #56
14630     3F 16 06 F6 | 	mov	arg03, #63
14634     28 16 62 FD | 	setq	arg03
14638     A7 00 68 FC | 	wrlong	#0, fp
1463c     A7 12 02 F6 | 	mov	arg01, fp
14640     10 4E 85 F1 | 	sub	fp, #16
14644     A7 14 02 FB | 	rdlong	arg02, fp
14648     04 4E 05 F1 | 	add	fp, #4
1464c     A7 16 02 FB | 	rdlong	arg03, fp
14650     2C 4E 85 F1 | 	sub	fp, #44
14654     0B 00 00 FF 
14658     CC E4 05 F1 | 	add	objptr, ##5836
1465c     A0 06 B1 FD | 	call	#_psram_spin2_read1
14660     0B 00 00 FF 
14664     CC E4 85 F1 | 	sub	objptr, ##5836
14668                 | '     longfill(linebuf,0,64)
14668                 | '     psram.read1(varptr(linebuf),header(2),header(3))
14668                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
14668     20 4E 05 F1 | 	add	fp, #32
1466c     A7 28 02 FB | 	rdlong	local02, fp
14670     1C 4E 85 F1 | 	sub	fp, #28
14674     A7 26 02 FB | 	rdlong	local01, fp
14678     04 4E 85 F1 | 	sub	fp, #4
1467c     13 29 52 F2 | 	cmps	local02, local01 wc
14680     30 00 90 CD |  if_b	jmp	#LR__1703
14684     20 4E 05 F1 | 	add	fp, #32
14688     A7 28 02 FB | 	rdlong	local02, fp
1468c     18 4E 85 F1 | 	sub	fp, #24
14690     A7 16 02 FB | 	rdlong	arg03, fp
14694     08 4E 85 F1 | 	sub	fp, #8
14698     0B 29 5A F2 | 	cmps	local02, arg03 wcz
1469c     14 00 90 1D |  if_a	jmp	#LR__1703
146a0     38 4E 05 F1 | 	add	fp, #56
146a4     A7 12 02 F6 | 	mov	arg01, fp
146a8     38 4E 85 F1 | 	sub	fp, #56
146ac                 | ' 
146ac                 | ' write(text)
146ac     14 FA B0 FD | 	call	#_hg010b_spin2_write
146b0                 | ' crlf
146b0     10 FF B0 FD | 	call	#_hg010b_spin2_crlf
146b4                 | LR__1703
146b4     34 4E 05 F1 | 	add	fp, #52
146b8     A7 28 02 FB | 	rdlong	local02, fp
146bc     34 4E 85 F1 | 	sub	fp, #52
146c0     52 00 00 FF 
146c4     C8 E4 05 F1 | 	add	objptr, ##42184
146c8     F2 28 62 FC | 	wrlong	local02, objptr
146cc     52 00 00 FF 
146d0     C8 E4 85 F1 | 	sub	objptr, ##42184
146d4                 | LR__1704
146d4     34 4E 05 F1 | 	add	fp, #52
146d8     A7 28 02 FB | 	rdlong	local02, fp
146dc     34 4E 85 F1 | 	sub	fp, #52
146e0     FF FF 3F FF 
146e4     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
146e8     20 4E 05 51 |  if_ne	add	fp, #32
146ec     A7 26 02 5B |  if_ne	rdlong	local01, fp
146f0     20 4E 85 51 |  if_ne	sub	fp, #32
146f4     FF FF 7F 5F 
146f8     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
146fc     E4 FE 9F 5D |  if_ne	jmp	#LR__1702
14700     A7 F0 03 F6 | 	mov	ptra, fp
14704     B2 00 A0 FD | 	call	#popregs_
14708                 | _do_list_ret
14708     2D 00 64 FD | 	ret
1470c                 | 
1470c                 | ' 
1470c                 | ' '-------------------- load
1470c                 | ' 
1470c                 | ' sub do_load(amode=0 as integer)  
1470c                 | _do_load
1470c     01 4A 05 F6 | 	mov	COUNT_, #1
14710     A8 00 A0 FD | 	call	#pushregs_
14714     AC F0 07 F1 | 	add	ptra, #172
14718     A7 12 62 FC | 	wrlong	arg01, fp
1471c     52 00 00 FF 
14720     80 E4 05 F1 | 	add	objptr, ##42112
14724     F2 02 68 FC | 	wrlong	#1, objptr
14728     08 00 00 FF 
1472c     00 E4 85 F1 | 	sub	objptr, ##4096
14730     F2 14 02 FB | 	rdlong	arg02, objptr
14734     0A 13 02 F6 | 	mov	arg01, arg02
14738     01 12 66 F0 | 	shl	arg01, #1
1473c     0A 13 02 F1 | 	add	arg01, arg02
14740     02 12 66 F0 | 	shl	arg01, #2
14744     03 00 00 FF 
14748     04 E4 85 F1 | 	sub	objptr, ##1540
1474c     F2 12 02 F1 | 	add	arg01, objptr
14750     09 15 02 FB | 	rdlong	arg02, arg01
14754     1C 4E 05 F1 | 	add	fp, #28
14758     A7 14 62 FC | 	wrlong	arg02, fp
1475c     8C 4E 05 F1 | 	add	fp, #140
14760     A7 12 02 F6 | 	mov	arg01, fp
14764     47 00 00 FF 
14768     7C E4 85 F1 | 	sub	objptr, ##36476
1476c     80 4E 85 F1 | 	sub	fp, #128
14770     09 4F 61 FC | 	wrlong	fp, arg01
14774                 | ' 
14774                 | ' inload=1
14774                 | ' numpar=compiledline(lineptr_e).result.uresult
14774                 | ' lpoke varptr(line2$),varptr(line2)
14774                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
14774     0C 4E 85 F1 | 	sub	fp, #12
14778     A7 26 02 FB | 	rdlong	local01, fp
1477c     1C 4E 85 F1 | 	sub	fp, #28
14780     01 26 56 F2 | 	cmps	local01, #1 wc
14784     24 00 90 CD |  if_b	jmp	#LR__1710
14788     F4 84 BF FD | 	call	#_pop
1478c     04 4E 05 F1 | 	add	fp, #4
14790     A7 FA 61 FC | 	wrlong	result1, fp
14794     04 4E 05 F1 | 	add	fp, #4
14798     A7 FC 61 FC | 	wrlong	result2, fp
1479c     04 4E 05 F1 | 	add	fp, #4
147a0     A7 FE 61 FC | 	wrlong	result3, fp
147a4     0C 4E 85 F1 | 	sub	fp, #12
147a8     28 00 90 FD | 	jmp	#LR__1711
147ac                 | LR__1710
147ac     52 00 00 FF 
147b0     70 E4 05 F1 | 	add	objptr, ##42096
147b4     F2 26 02 FB | 	rdlong	local01, objptr
147b8     52 00 00 FF 
147bc     70 E4 85 F1 | 	sub	objptr, ##42096
147c0     04 4E 05 F1 | 	add	fp, #4
147c4     A7 26 62 FC | 	wrlong	local01, fp
147c8     08 4E 05 F1 | 	add	fp, #8
147cc     A7 3E 68 FC | 	wrlong	#31, fp
147d0     0C 4E 85 F1 | 	sub	fp, #12
147d4                 | LR__1711
147d4                 | ' 'print "popped "; t1.result.uresult, t1.result_type
147d4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
147d4     0C 4E 05 F1 | 	add	fp, #12
147d8     A7 26 02 FB | 	rdlong	local01, fp
147dc     0C 4E 85 F1 | 	sub	fp, #12
147e0     2B 26 0E F2 | 	cmp	local01, #43 wz
147e4     24 00 90 5D |  if_ne	jmp	#LR__1712
147e8     04 4E 05 F1 | 	add	fp, #4
147ec     A7 12 02 FB | 	rdlong	arg01, fp
147f0     04 4E 85 F1 | 	sub	fp, #4
147f4     00 86 BF FD | 	call	#_convertstring
147f8     04 4E 05 F1 | 	add	fp, #4
147fc     A7 FA 61 FC | 	wrlong	result1, fp
14800     08 4E 05 F1 | 	add	fp, #8
14804     A7 3E 68 FC | 	wrlong	#31, fp
14808     0C 4E 85 F1 | 	sub	fp, #12
1480c                 | LR__1712
1480c                 | ' if t1.result_type=result_string then
1480c     0C 4E 05 F1 | 	add	fp, #12
14810     A7 26 02 FB | 	rdlong	local01, fp
14814     0C 4E 85 F1 | 	sub	fp, #12
14818     1F 26 0E F2 | 	cmp	local01, #31 wz
1481c     E0 02 90 5D |  if_ne	jmp	#LR__1718
14820                 | '   if amode<>1234 then do_new
14820     A7 26 02 FB | 	rdlong	local01, fp
14824     02 00 00 FF 
14828     D2 26 0E F2 | 	cmp	local01, ##1234 wz
1482c     08 0E B0 5D |  if_ne	call	#_do_new
14830                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
14830     04 4E 05 F1 | 	add	fp, #4
14834     A7 12 02 FB | 	rdlong	arg01, fp
14838     04 4E 85 F1 | 	sub	fp, #4
1483c     AF 01 00 FF 
14840     1C 14 06 F6 | 	mov	arg02, ##@LR__5880
14844     68 11 B1 FD | 	call	#__system___string_cmp
14848     00 FA 0D F2 | 	cmp	result1, #0 wz
1484c     24 00 90 5D |  if_ne	jmp	#LR__1713
14850     52 00 00 FF 
14854     70 E4 05 F1 | 	add	objptr, ##42096
14858     F2 26 02 FB | 	rdlong	local01, objptr
1485c     52 00 00 FF 
14860     70 E4 85 F1 | 	sub	objptr, ##42096
14864     04 4E 05 F1 | 	add	fp, #4
14868     A7 26 62 FC | 	wrlong	local01, fp
1486c     04 4E 85 F1 | 	sub	fp, #4
14870     20 00 90 FD | 	jmp	#LR__1714
14874                 | LR__1713
14874     04 4E 05 F1 | 	add	fp, #4
14878     A7 26 02 FB | 	rdlong	local01, fp
1487c     04 4E 85 F1 | 	sub	fp, #4
14880     52 00 00 FF 
14884     70 E4 05 F1 | 	add	objptr, ##42096
14888     F2 26 62 FC | 	wrlong	local01, objptr
1488c     52 00 00 FF 
14890     70 E4 85 F1 | 	sub	objptr, ##42096
14894                 | LR__1714
14894                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
14894     09 12 06 F6 | 	mov	arg01, #9
14898     44 64 B1 FD | 	call	#__system__close
1489c     09 26 06 F6 | 	mov	local01, #9
148a0     4A 00 00 FF 
148a4     94 E4 05 F1 | 	add	objptr, ##38036
148a8     F2 12 02 FB | 	rdlong	arg01, objptr
148ac     4A 00 00 FF 
148b0     94 E4 85 F1 | 	sub	objptr, ##38036
148b4     AF 01 00 FF 
148b8     1D 14 06 F6 | 	mov	arg02, ##@LR__5881
148bc     24 11 B1 FD | 	call	#__system___string_concat
148c0     FD 12 02 F6 | 	mov	arg01, result1
148c4     04 4E 05 F1 | 	add	fp, #4
148c8     A7 14 02 FB | 	rdlong	arg02, fp
148cc     04 4E 85 F1 | 	sub	fp, #4
148d0     10 11 B1 FD | 	call	#__system___string_concat
148d4     FD 14 02 F6 | 	mov	arg02, result1
148d8     13 13 02 F6 | 	mov	arg01, local01
148dc     00 16 06 F6 | 	mov	arg03, #0
148e0     A8 1C B1 FD | 	call	#__system___basic_open_string
148e4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
148e8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
148ec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
148f0     14 4E 05 F1 | 	add	fp, #20
148f4     A7 FA 61 FC | 	wrlong	result1, fp
148f8                 | '   r=geterr() 
148f8                 | '   if r then 
148f8     14 4E 85 F1 | 	sub	fp, #20
148fc     50 01 90 AD |  if_e	jmp	#LR__1716
14900                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
14900     09 12 06 F6 | 	mov	arg01, #9
14904     D8 63 B1 FD | 	call	#__system__close
14908     09 26 06 F6 | 	mov	local01, #9
1490c     4A 00 00 FF 
14910     94 E4 05 F1 | 	add	objptr, ##38036
14914     F2 12 02 FB | 	rdlong	arg01, objptr
14918     4A 00 00 FF 
1491c     94 E4 85 F1 | 	sub	objptr, ##38036
14920     AF 01 00 FF 
14924     1F 14 06 F6 | 	mov	arg02, ##@LR__5882
14928     B8 10 B1 FD | 	call	#__system___string_concat
1492c     FD 12 02 F6 | 	mov	arg01, result1
14930     04 4E 05 F1 | 	add	fp, #4
14934     A7 14 02 FB | 	rdlong	arg02, fp
14938     04 4E 85 F1 | 	sub	fp, #4
1493c     A4 10 B1 FD | 	call	#__system___string_concat
14940     FD 12 02 F6 | 	mov	arg01, result1
14944     AF 01 00 FF 
14948     21 14 06 F6 | 	mov	arg02, ##@LR__5883
1494c     94 10 B1 FD | 	call	#__system___string_concat
14950     FD 14 02 F6 | 	mov	arg02, result1
14954     13 13 02 F6 | 	mov	arg01, local01
14958     00 16 06 F6 | 	mov	arg03, #0
1495c     2C 1C B1 FD | 	call	#__system___basic_open_string
14960     20 E6 05 F1 | 	add	ptr___system__dat__, #32
14964     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
14968     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1496c     14 4E 05 F1 | 	add	fp, #20
14970     A7 FA 61 FC | 	wrlong	result1, fp
14974                 | '     r=geterr() 
14974                 | '     if r then 
14974     14 4E 85 F1 | 	sub	fp, #20
14978     A0 00 90 AD |  if_e	jmp	#LR__1715
1497c                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
1497c     00 12 06 F6 | 	mov	arg01, #0
14980     2C 6D B1 FD | 	call	#__system___getiolock_0599
14984     FD 12 02 F6 | 	mov	arg01, result1
14988     FC 0F B1 FD | 	call	#__system___lockmem
1498c     AF 01 00 FF 
14990     26 14 06 F6 | 	mov	arg02, ##@LR__5884
14994     00 12 06 F6 | 	mov	arg01, #0
14998     00 16 06 F6 | 	mov	arg03, #0
1499c     DC 1C B1 FD | 	call	#__system___basic_print_string
149a0     14 4E 05 F1 | 	add	fp, #20
149a4     A7 14 02 FB | 	rdlong	arg02, fp
149a8     14 4E 85 F1 | 	sub	fp, #20
149ac     00 12 06 F6 | 	mov	arg01, #0
149b0     00 16 06 F6 | 	mov	arg03, #0
149b4     0A 18 06 F6 | 	mov	arg04, #10
149b8     04 1D B1 FD | 	call	#__system___basic_print_integer
149bc     AF 01 00 FF 
149c0     34 14 06 F6 | 	mov	arg02, ##@LR__5885
149c4     00 12 06 F6 | 	mov	arg01, #0
149c8     00 16 06 F6 | 	mov	arg03, #0
149cc     AC 1C B1 FD | 	call	#__system___basic_print_string
149d0     00 26 06 F6 | 	mov	local01, #0
149d4     14 4E 05 F1 | 	add	fp, #20
149d8     A7 12 02 FB | 	rdlong	arg01, fp
149dc     14 4E 85 F1 | 	sub	fp, #20
149e0     30 39 B1 FD | 	call	#__system___strerror
149e4     FD 14 02 F6 | 	mov	arg02, result1
149e8     13 13 02 F6 | 	mov	arg01, local01
149ec     00 16 06 F6 | 	mov	arg03, #0
149f0     88 1C B1 FD | 	call	#__system___basic_print_string
149f4     00 12 06 F6 | 	mov	arg01, #0
149f8     0A 14 06 F6 | 	mov	arg02, #10
149fc     00 16 06 F6 | 	mov	arg03, #0
14a00     20 1C B1 FD | 	call	#__system___basic_print_char
14a04     00 12 06 F6 | 	mov	arg01, #0
14a08     A4 6C B1 FD | 	call	#__system___getiolock_0599
14a0c     FD 00 68 FC | 	wrlong	#0, result1
14a10     09 12 06 F6 | 	mov	arg01, #9
14a14     C8 62 B1 FD | 	call	#__system__close
14a18     94 01 90 FD | 	jmp	#LR__1720
14a1c                 | LR__1715
14a1c     52 00 00 FF 
14a20     70 E4 05 F1 | 	add	objptr, ##42096
14a24     F2 12 02 FB | 	rdlong	arg01, objptr
14a28     52 00 00 FF 
14a2c     70 E4 85 F1 | 	sub	objptr, ##42096
14a30     AF 01 00 FF 
14a34     37 14 06 F6 | 	mov	arg02, ##@LR__5886
14a38     A8 0F B1 FD | 	call	#__system___string_concat
14a3c     52 00 00 FF 
14a40     70 E4 05 F1 | 	add	objptr, ##42096
14a44     F2 FA 61 FC | 	wrlong	result1, objptr
14a48     52 00 00 FF 
14a4c     70 E4 85 F1 | 	sub	objptr, ##42096
14a50                 | LR__1716
14a50                 | '   close #9: open currentdir$+"/"+loadname for input as #9
14a50     09 12 06 F6 | 	mov	arg01, #9
14a54     88 62 B1 FD | 	call	#__system__close
14a58     09 26 06 F6 | 	mov	local01, #9
14a5c     4A 00 00 FF 
14a60     94 E4 05 F1 | 	add	objptr, ##38036
14a64     F2 12 02 FB | 	rdlong	arg01, objptr
14a68     4A 00 00 FF 
14a6c     94 E4 85 F1 | 	sub	objptr, ##38036
14a70     AF 01 00 FF 
14a74     3C 14 06 F6 | 	mov	arg02, ##@LR__5887
14a78     68 0F B1 FD | 	call	#__system___string_concat
14a7c     FD 12 02 F6 | 	mov	arg01, result1
14a80     52 00 00 FF 
14a84     70 E4 05 F1 | 	add	objptr, ##42096
14a88     F2 14 02 FB | 	rdlong	arg02, objptr
14a8c     52 00 00 FF 
14a90     70 E4 85 F1 | 	sub	objptr, ##42096
14a94     4C 0F B1 FD | 	call	#__system___string_concat
14a98     FD 14 02 F6 | 	mov	arg02, result1
14a9c     13 13 02 F6 | 	mov	arg01, local01
14aa0     00 16 06 F6 | 	mov	arg03, #0
14aa4     E4 1A B1 FD | 	call	#__system___basic_open_string
14aa8                 | '   do
14aa8                 | LR__1717
14aa8     09 12 06 F6 | 	mov	arg01, #9
14aac     E4 10 B1 FD | 	call	#__system___basic_read_line
14ab0     FD 26 02 F6 | 	mov	local01, result1
14ab4     37 00 00 FF 
14ab8     1C E4 05 F1 | 	add	objptr, ##28188
14abc     F2 26 62 FC | 	wrlong	local01, objptr
14ac0     37 00 00 FF 
14ac4     1C E4 85 F1 | 	sub	objptr, ##28188
14ac8     F0 CC BE FD | 	call	#_interpret
14acc     37 00 00 FF 
14ad0     1C E4 05 F1 | 	add	objptr, ##28188
14ad4     F2 12 02 FB | 	rdlong	arg01, objptr
14ad8     37 00 00 FF 
14adc     1C E4 85 F1 | 	sub	objptr, ##28188
14ae0     AF 01 00 FF 
14ae4     3E 14 06 F6 | 	mov	arg02, ##@LR__5888
14ae8     C4 0E B1 FD | 	call	#__system___string_cmp
14aec     00 FA 0D F2 | 	cmp	result1, #0 wz
14af0     B4 FF 9F 5D |  if_ne	jmp	#LR__1717
14af4                 | '   close #9   
14af4     09 12 06 F6 | 	mov	arg01, #9
14af8     E4 61 B1 FD | 	call	#__system__close
14afc     0C 00 90 FD | 	jmp	#LR__1719
14b00                 | LR__1718
14b00     1E 12 06 F6 | 	mov	arg01, #30
14b04     00 14 06 F6 | 	mov	arg02, #0
14b08     90 D4 B0 FD | 	call	#_printerror
14b0c                 | LR__1719
14b0c                 | ' print "Loaded ";currentdir$+"/"+loadname
14b0c     00 12 06 F6 | 	mov	arg01, #0
14b10     9C 6B B1 FD | 	call	#__system___getiolock_0599
14b14     FD 12 02 F6 | 	mov	arg01, result1
14b18     6C 0E B1 FD | 	call	#__system___lockmem
14b1c     AF 01 00 FF 
14b20     3F 14 06 F6 | 	mov	arg02, ##@LR__5889
14b24     00 12 06 F6 | 	mov	arg01, #0
14b28     00 16 06 F6 | 	mov	arg03, #0
14b2c     4C 1B B1 FD | 	call	#__system___basic_print_string
14b30     00 26 06 F6 | 	mov	local01, #0
14b34     4A 00 00 FF 
14b38     94 E4 05 F1 | 	add	objptr, ##38036
14b3c     F2 12 02 FB | 	rdlong	arg01, objptr
14b40     4A 00 00 FF 
14b44     94 E4 85 F1 | 	sub	objptr, ##38036
14b48     AF 01 00 FF 
14b4c     47 14 06 F6 | 	mov	arg02, ##@LR__5890
14b50     90 0E B1 FD | 	call	#__system___string_concat
14b54     FD 12 02 F6 | 	mov	arg01, result1
14b58     52 00 00 FF 
14b5c     70 E4 05 F1 | 	add	objptr, ##42096
14b60     F2 14 02 FB | 	rdlong	arg02, objptr
14b64     52 00 00 FF 
14b68     70 E4 85 F1 | 	sub	objptr, ##42096
14b6c     74 0E B1 FD | 	call	#__system___string_concat
14b70     FD 14 02 F6 | 	mov	arg02, result1
14b74     13 13 02 F6 | 	mov	arg01, local01
14b78     00 16 06 F6 | 	mov	arg03, #0
14b7c     FC 1A B1 FD | 	call	#__system___basic_print_string
14b80     00 12 06 F6 | 	mov	arg01, #0
14b84     0A 14 06 F6 | 	mov	arg02, #10
14b88     00 16 06 F6 | 	mov	arg03, #0
14b8c     94 1A B1 FD | 	call	#__system___basic_print_char
14b90     00 12 06 F6 | 	mov	arg01, #0
14b94     18 6B B1 FD | 	call	#__system___getiolock_0599
14b98     FD 00 68 FC | 	wrlong	#0, result1
14b9c     52 00 00 FF 
14ba0     80 E4 05 F1 | 	add	objptr, ##42112
14ba4     F2 00 68 FC | 	wrlong	#0, objptr
14ba8     52 00 00 FF 
14bac     80 E4 85 F1 | 	sub	objptr, ##42112
14bb0                 | LR__1720
14bb0     A7 F0 03 F6 | 	mov	ptra, fp
14bb4     B2 00 A0 FD | 	call	#popregs_
14bb8                 | _do_load_ret
14bb8     2D 00 64 FD | 	ret
14bbc                 | 
14bbc                 | ' 
14bbc                 | ' '-------------------- log
14bbc                 | ' 
14bbc                 | ' sub do_log
14bbc                 | _do_log
14bbc     01 4A 05 F6 | 	mov	COUNT_, #1
14bc0     A8 00 A0 FD | 	call	#pushregs_
14bc4     14 F0 07 F1 | 	add	ptra, #20
14bc8     4A 00 00 FF 
14bcc     80 E4 05 F1 | 	add	objptr, ##38016
14bd0     F2 26 02 FB | 	rdlong	local01, objptr
14bd4     13 17 02 F6 | 	mov	arg03, local01
14bd8     01 16 66 F0 | 	shl	arg03, #1
14bdc     13 17 02 F1 | 	add	arg03, local01
14be0     02 16 66 F0 | 	shl	arg03, #2
14be4     03 00 00 FF 
14be8     04 E4 85 F1 | 	sub	objptr, ##1540
14bec     F2 16 02 F1 | 	add	arg03, objptr
14bf0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
14bf4     0C 4E 05 F1 | 	add	fp, #12
14bf8     A7 16 62 FC | 	wrlong	arg03, fp
14bfc                 | ' 
14bfc                 | ' numpar=compiledline(lineptr_e).result.uresult
14bfc                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
14bfc     0C 4E 85 F1 | 	sub	fp, #12
14c00     47 00 00 FF 
14c04     7C E4 85 F1 | 	sub	objptr, ##36476
14c08     0C 4E 05 51 |  if_ne	add	fp, #12
14c0c     A7 26 02 5B |  if_ne	rdlong	local01, fp
14c10     0C 4E 85 51 |  if_ne	sub	fp, #12
14c14     03 26 16 52 |  if_ne	cmp	local01, #3 wc
14c18     40 00 90 4D |  if_c_and_nz	jmp	#LR__1730
14c1c     00 12 06 F6 | 	mov	arg01, #0
14c20     8C 6A B1 FD | 	call	#__system___getiolock_0599
14c24     FD 12 02 F6 | 	mov	arg01, result1
14c28     5C 0D B1 FD | 	call	#__system___lockmem
14c2c     AF 01 00 FF 
14c30     49 14 06 F6 | 	mov	arg02, ##@LR__5891
14c34     00 12 06 F6 | 	mov	arg01, #0
14c38     00 16 06 F6 | 	mov	arg03, #0
14c3c     3C 1A B1 FD | 	call	#__system___basic_print_string
14c40     00 12 06 F6 | 	mov	arg01, #0
14c44     68 6A B1 FD | 	call	#__system___getiolock_0599
14c48     FD 00 68 FC | 	wrlong	#0, result1
14c4c     27 12 06 F6 | 	mov	arg01, #39
14c50     00 14 06 F6 | 	mov	arg02, #0
14c54     44 D3 B0 FD | 	call	#_printerror
14c58     D0 00 90 FD | 	jmp	#LR__1733
14c5c                 | LR__1730
14c5c                 | ' if numpar=2 then 
14c5c     0C 4E 05 F1 | 	add	fp, #12
14c60     A7 26 02 FB | 	rdlong	local01, fp
14c64     0C 4E 85 F1 | 	sub	fp, #12
14c68     02 26 0E F2 | 	cmp	local01, #2 wz
14c6c     48 00 90 5D |  if_ne	jmp	#LR__1731
14c70     0C 80 BF FD | 	call	#_pop
14c74     FF 26 02 F6 | 	mov	local01, result3
14c78     A7 FA 61 FC | 	wrlong	result1, fp
14c7c     04 4E 05 F1 | 	add	fp, #4
14c80     A7 FC 61 FC | 	wrlong	result2, fp
14c84     04 4E 05 F1 | 	add	fp, #4
14c88     A7 26 62 FC | 	wrlong	local01, fp
14c8c     08 4E 85 F1 | 	sub	fp, #8
14c90     A7 12 02 F6 | 	mov	arg01, fp
14c94     88 82 BF FD | 	call	#_converttofloat
14c98     FD 14 02 F6 | 	mov	arg02, result1
14c9c     FC 16 20 FF 
14ca0     54 12 06 F6 | 	mov	arg01, ##1076754516
14ca4     28 4B B1 FD | 	call	#__system____builtin_logbase
14ca8     10 4E 05 F1 | 	add	fp, #16
14cac     A7 FA 61 FC | 	wrlong	result1, fp
14cb0     10 4E 85 F1 | 	sub	fp, #16
14cb4     10 00 90 FD | 	jmp	#LR__1732
14cb8                 | LR__1731
14cb8     10 4E 05 F1 | 	add	fp, #16
14cbc     00 C0 9F FF 
14cc0     A7 00 68 FC | 	wrlong	##1065353216, fp
14cc4     10 4E 85 F1 | 	sub	fp, #16
14cc8                 | LR__1732
14cc8     B4 7F BF FD | 	call	#_pop
14ccc     FF 26 02 F6 | 	mov	local01, result3
14cd0     A7 FA 61 FC | 	wrlong	result1, fp
14cd4     04 4E 05 F1 | 	add	fp, #4
14cd8     A7 FC 61 FC | 	wrlong	result2, fp
14cdc     04 4E 05 F1 | 	add	fp, #4
14ce0     A7 26 62 FC | 	wrlong	local01, fp
14ce4     08 4E 85 F1 | 	sub	fp, #8
14ce8     A7 12 02 F6 | 	mov	arg01, fp
14cec     30 82 BF FD | 	call	#_converttofloat
14cf0     FD 14 02 F6 | 	mov	arg02, result1
14cf4     FC 16 20 FF 
14cf8     54 12 06 F6 | 	mov	arg01, ##1076754516
14cfc     D0 4A B1 FD | 	call	#__system____builtin_logbase
14d00     FD 12 02 F6 | 	mov	arg01, result1
14d04     10 4E 05 F1 | 	add	fp, #16
14d08     A7 14 02 FB | 	rdlong	arg02, fp
14d0c     10 4E 85 F1 | 	sub	fp, #16
14d10     F0 3C B1 FD | 	call	#__system___float_div
14d14     A7 FA 61 FC | 	wrlong	result1, fp
14d18     08 4E 05 F1 | 	add	fp, #8
14d1c     A7 3C 68 FC | 	wrlong	#30, fp
14d20     08 4E 85 F1 | 	sub	fp, #8
14d24     A7 12 02 F6 | 	mov	arg01, fp
14d28     EC 7F BF FD | 	call	#_push
14d2c                 | LR__1733
14d2c     A7 F0 03 F6 | 	mov	ptra, fp
14d30     B2 00 A0 FD | 	call	#popregs_
14d34                 | _do_log_ret
14d34     2D 00 64 FD | 	ret
14d38                 | 
14d38                 | ' 
14d38                 | ' '-------------------- lpeek
14d38                 | ' 
14d38                 | ' sub do_lpeek
14d38                 | _do_lpeek
14d38     00 4A 05 F6 | 	mov	COUNT_, #0
14d3c     A8 00 A0 FD | 	call	#pushregs_
14d40     14 F0 07 F1 | 	add	ptra, #20
14d44     38 7F BF FD | 	call	#_pop
14d48     A7 FA 61 FC | 	wrlong	result1, fp
14d4c     04 4E 05 F1 | 	add	fp, #4
14d50     A7 FC 61 FC | 	wrlong	result2, fp
14d54     04 4E 05 F1 | 	add	fp, #4
14d58     A7 FE 61 FC | 	wrlong	result3, fp
14d5c     08 4E 85 F1 | 	sub	fp, #8
14d60     A7 12 02 F6 | 	mov	arg01, fp
14d64     FC 80 BF FD | 	call	#_converttoint
14d68     0C 4E 05 F1 | 	add	fp, #12
14d6c     A7 FA 61 FC | 	wrlong	result1, fp
14d70                 | ' 
14d70                 | ' t1=pop()
14d70                 | ' a=converttoint(t1)
14d70                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
14d70     0C 4E 85 F1 | 	sub	fp, #12
14d74     00 04 00 FF 
14d78     00 FA 15 F2 | 	cmp	result1, ##524288 wc
14d7c     1C 00 90 3D |  if_ae	jmp	#LR__1740
14d80     0C 4E 05 F1 | 	add	fp, #12
14d84     A7 12 02 FB | 	rdlong	arg01, fp
14d88     09 FB 01 FB | 	rdlong	result1, arg01
14d8c     04 4E 05 F1 | 	add	fp, #4
14d90     A7 FA 61 FC | 	wrlong	result1, fp
14d94     10 4E 85 F1 | 	sub	fp, #16
14d98     1C 00 90 FD | 	jmp	#LR__1741
14d9c                 | LR__1740
14d9c     0C 4E 05 F1 | 	add	fp, #12
14da0     A7 12 02 FB | 	rdlong	arg01, fp
14da4     0C 4E 85 F1 | 	sub	fp, #12
14da8     C0 D4 B0 FD | 	call	#_pslpeek
14dac     10 4E 05 F1 | 	add	fp, #16
14db0     A7 FA 61 FC | 	wrlong	result1, fp
14db4     10 4E 85 F1 | 	sub	fp, #16
14db8                 | LR__1741
14db8     08 4E 05 F1 | 	add	fp, #8
14dbc     A7 3A 68 FC | 	wrlong	#29, fp
14dc0     08 4E 05 F1 | 	add	fp, #8
14dc4     A7 12 02 FB | 	rdlong	arg01, fp
14dc8     10 4E 85 F1 | 	sub	fp, #16
14dcc     A7 12 62 FC | 	wrlong	arg01, fp
14dd0     A7 12 02 F6 | 	mov	arg01, fp
14dd4     40 7F BF FD | 	call	#_push
14dd8     A7 F0 03 F6 | 	mov	ptra, fp
14ddc     B2 00 A0 FD | 	call	#popregs_
14de0                 | _do_lpeek_ret
14de0     2D 00 64 FD | 	ret
14de4                 | 
14de4                 | ' 
14de4                 | ' '-------------------- lpoke
14de4                 | ' 
14de4                 | ' sub do_lpoke
14de4                 | _do_lpoke
14de4     01 4A 05 F6 | 	mov	COUNT_, #1
14de8     A8 00 A0 FD | 	call	#pushregs_
14dec     20 F0 07 F1 | 	add	ptra, #32
14df0     8C 7E BF FD | 	call	#_pop
14df4     FD 14 02 F6 | 	mov	arg02, result1
14df8     FE 12 02 F6 | 	mov	arg01, result2
14dfc     FF 26 02 F6 | 	mov	local01, result3
14e00     A7 14 62 FC | 	wrlong	arg02, fp
14e04     04 4E 05 F1 | 	add	fp, #4
14e08     A7 12 62 FC | 	wrlong	arg01, fp
14e0c     04 4E 05 F1 | 	add	fp, #4
14e10     A7 26 62 FC | 	wrlong	local01, fp
14e14     08 4E 85 F1 | 	sub	fp, #8
14e18     64 7E BF FD | 	call	#_pop
14e1c     FF 26 02 F6 | 	mov	local01, result3
14e20     0C 4E 05 F1 | 	add	fp, #12
14e24     A7 FA 61 FC | 	wrlong	result1, fp
14e28     04 4E 05 F1 | 	add	fp, #4
14e2c     A7 FC 61 FC | 	wrlong	result2, fp
14e30     04 4E 05 F1 | 	add	fp, #4
14e34     A7 26 62 FC | 	wrlong	local01, fp
14e38     08 4E 85 F1 | 	sub	fp, #8
14e3c     A7 12 02 F6 | 	mov	arg01, fp
14e40     0C 4E 85 F1 | 	sub	fp, #12
14e44     1C 80 BF FD | 	call	#_converttoint
14e48     18 4E 05 F1 | 	add	fp, #24
14e4c     A7 FA 61 FC | 	wrlong	result1, fp
14e50     18 4E 85 F1 | 	sub	fp, #24
14e54     A7 12 02 F6 | 	mov	arg01, fp
14e58     08 80 BF FD | 	call	#_converttoint
14e5c     1C 4E 05 F1 | 	add	fp, #28
14e60     A7 FA 61 FC | 	wrlong	result1, fp
14e64                 | ' 
14e64                 | ' t1=pop() 'value
14e64                 | ' t2=pop() 
14e64                 | ' a=converttoint(t2) : v=converttoint(t1)
14e64                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
14e64     04 4E 85 F1 | 	sub	fp, #4
14e68     A7 26 02 FB | 	rdlong	local01, fp
14e6c     18 4E 85 F1 | 	sub	fp, #24
14e70     00 04 00 FF 
14e74     00 26 16 F2 | 	cmp	local01, ##524288 wc
14e78     1C 00 90 3D |  if_ae	jmp	#LR__1750
14e7c     18 4E 05 F1 | 	add	fp, #24
14e80     A7 12 02 FB | 	rdlong	arg01, fp
14e84     04 4E 05 F1 | 	add	fp, #4
14e88     A7 14 02 FB | 	rdlong	arg02, fp
14e8c     1C 4E 85 F1 | 	sub	fp, #28
14e90     09 15 62 FC | 	wrlong	arg02, arg01
14e94     18 00 90 FD | 	jmp	#LR__1751
14e98                 | LR__1750
14e98     18 4E 05 F1 | 	add	fp, #24
14e9c     A7 12 02 FB | 	rdlong	arg01, fp
14ea0     04 4E 05 F1 | 	add	fp, #4
14ea4     A7 14 02 FB | 	rdlong	arg02, fp
14ea8     1C 4E 85 F1 | 	sub	fp, #28
14eac     8C D2 B0 FD | 	call	#_pslpoke
14eb0                 | LR__1751
14eb0     A7 F0 03 F6 | 	mov	ptra, fp
14eb4     B2 00 A0 FD | 	call	#popregs_
14eb8                 | _do_lpoke_ret
14eb8     2D 00 64 FD | 	ret
14ebc                 | 
14ebc                 | ' 
14ebc                 | ' '-------------------- mid$
14ebc                 | ' 
14ebc                 | ' sub do_mid
14ebc                 | _do_mid
14ebc     00 4A 05 F6 | 	mov	COUNT_, #0
14ec0     A8 00 A0 FD | 	call	#pushregs_
14ec4     18 F0 07 F1 | 	add	ptra, #24
14ec8     4A 00 00 FF 
14ecc     80 E4 05 F1 | 	add	objptr, ##38016
14ed0     F2 16 02 FB | 	rdlong	arg03, objptr
14ed4     0B 15 02 F6 | 	mov	arg02, arg03
14ed8     01 14 66 F0 | 	shl	arg02, #1
14edc     0B 15 02 F1 | 	add	arg02, arg03
14ee0     02 14 66 F0 | 	shl	arg02, #2
14ee4     03 00 00 FF 
14ee8     04 E4 85 F1 | 	sub	objptr, ##1540
14eec     F2 14 02 F1 | 	add	arg02, objptr
14ef0     0A 17 02 FB | 	rdlong	arg03, arg02
14ef4     0C 4E 05 F1 | 	add	fp, #12
14ef8     A7 16 62 FC | 	wrlong	arg03, fp
14efc                 | ' 
14efc                 | ' numpar=compiledline(lineptr_e).result.uresult
14efc                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
14efc     0C 4E 85 F1 | 	sub	fp, #12
14f00     03 16 0E F2 | 	cmp	arg03, #3 wz
14f04     47 00 00 FF 
14f08     7C E4 85 F1 | 	sub	objptr, ##36476
14f0c     40 00 90 AD |  if_e	jmp	#LR__1760
14f10     00 12 06 F6 | 	mov	arg01, #0
14f14     98 67 B1 FD | 	call	#__system___getiolock_0599
14f18     FD 12 02 F6 | 	mov	arg01, result1
14f1c     68 0A B1 FD | 	call	#__system___lockmem
14f20     AF 01 00 FF 
14f24     4F 14 06 F6 | 	mov	arg02, ##@LR__5892
14f28     00 12 06 F6 | 	mov	arg01, #0
14f2c     00 16 06 F6 | 	mov	arg03, #0
14f30     48 17 B1 FD | 	call	#__system___basic_print_string
14f34     00 12 06 F6 | 	mov	arg01, #0
14f38     74 67 B1 FD | 	call	#__system___getiolock_0599
14f3c     FD 00 68 FC | 	wrlong	#0, result1
14f40     27 12 06 F6 | 	mov	arg01, #39
14f44     00 14 06 F6 | 	mov	arg02, #0
14f48     50 D0 B0 FD | 	call	#_printerror
14f4c     2C 01 90 FD | 	jmp	#LR__1763
14f50                 | LR__1760
14f50     2C 7D BF FD | 	call	#_pop
14f54     FF 16 02 F6 | 	mov	arg03, result3
14f58     A7 FA 61 FC | 	wrlong	result1, fp
14f5c     04 4E 05 F1 | 	add	fp, #4
14f60     A7 FC 61 FC | 	wrlong	result2, fp
14f64     04 4E 05 F1 | 	add	fp, #4
14f68     A7 16 62 FC | 	wrlong	arg03, fp
14f6c     08 4E 85 F1 | 	sub	fp, #8
14f70     A7 12 02 F6 | 	mov	arg01, fp
14f74     EC 7E BF FD | 	call	#_converttoint
14f78     FD 16 02 F6 | 	mov	arg03, result1
14f7c     14 4E 05 F1 | 	add	fp, #20
14f80     A7 16 62 FC | 	wrlong	arg03, fp
14f84     14 4E 85 F1 | 	sub	fp, #20
14f88     F4 7C BF FD | 	call	#_pop
14f8c     FF 16 02 F6 | 	mov	arg03, result3
14f90     A7 FA 61 FC | 	wrlong	result1, fp
14f94     04 4E 05 F1 | 	add	fp, #4
14f98     A7 FC 61 FC | 	wrlong	result2, fp
14f9c     04 4E 05 F1 | 	add	fp, #4
14fa0     A7 16 62 FC | 	wrlong	arg03, fp
14fa4     08 4E 85 F1 | 	sub	fp, #8
14fa8     A7 12 02 F6 | 	mov	arg01, fp
14fac     B4 7E BF FD | 	call	#_converttoint
14fb0     FD 16 02 F6 | 	mov	arg03, result1
14fb4     10 4E 05 F1 | 	add	fp, #16
14fb8     A7 16 62 FC | 	wrlong	arg03, fp
14fbc     10 4E 85 F1 | 	sub	fp, #16
14fc0     BC 7C BF FD | 	call	#_pop
14fc4     FF 16 02 F6 | 	mov	arg03, result3
14fc8     A7 FA 61 FC | 	wrlong	result1, fp
14fcc     04 4E 05 F1 | 	add	fp, #4
14fd0     A7 FC 61 FC | 	wrlong	result2, fp
14fd4     04 4E 05 F1 | 	add	fp, #4
14fd8     A7 16 62 FC | 	wrlong	arg03, fp
14fdc                 | ' t1=pop() : arg2=converttoint(t1)
14fdc                 | ' t1=pop() : arg1=converttoint(t1)
14fdc                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14fdc     08 4E 85 F1 | 	sub	fp, #8
14fe0     2B 16 0E F2 | 	cmp	arg03, #43 wz
14fe4     18 00 90 5D |  if_ne	jmp	#LR__1761
14fe8     A7 12 02 FB | 	rdlong	arg01, fp
14fec     08 7E BF FD | 	call	#_convertstring
14ff0     A7 FA 61 FC | 	wrlong	result1, fp
14ff4     08 4E 05 F1 | 	add	fp, #8
14ff8     A7 3E 68 FC | 	wrlong	#31, fp
14ffc     08 4E 85 F1 | 	sub	fp, #8
15000                 | LR__1761
15000                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
15000     08 4E 05 F1 | 	add	fp, #8
15004     A7 16 02 FB | 	rdlong	arg03, fp
15008     08 4E 85 F1 | 	sub	fp, #8
1500c     1F 16 0E F2 | 	cmp	arg03, #31 wz
15010     40 00 90 AD |  if_e	jmp	#LR__1762
15014     00 12 06 F6 | 	mov	arg01, #0
15018     94 66 B1 FD | 	call	#__system___getiolock_0599
1501c     FD 12 02 F6 | 	mov	arg01, result1
15020     64 09 B1 FD | 	call	#__system___lockmem
15024     AF 01 00 FF 
15028     56 14 06 F6 | 	mov	arg02, ##@LR__5893
1502c     00 12 06 F6 | 	mov	arg01, #0
15030     00 16 06 F6 | 	mov	arg03, #0
15034     44 16 B1 FD | 	call	#__system___basic_print_string
15038     00 12 06 F6 | 	mov	arg01, #0
1503c     70 66 B1 FD | 	call	#__system___getiolock_0599
15040     FD 00 68 FC | 	wrlong	#0, result1
15044     0F 12 06 F6 | 	mov	arg01, #15
15048     00 14 06 F6 | 	mov	arg02, #0
1504c     4C CF B0 FD | 	call	#_printerror
15050     28 00 90 FD | 	jmp	#LR__1763
15054                 | LR__1762
15054     A7 12 02 FB | 	rdlong	arg01, fp
15058     10 4E 05 F1 | 	add	fp, #16
1505c     A7 14 02 FB | 	rdlong	arg02, fp
15060     04 4E 05 F1 | 	add	fp, #4
15064     A7 16 02 FB | 	rdlong	arg03, fp
15068     14 4E 85 F1 | 	sub	fp, #20
1506c     AC 2A B1 FD | 	call	#__system__Mid_S
15070     A7 FA 61 FC | 	wrlong	result1, fp
15074     A7 12 02 F6 | 	mov	arg01, fp
15078     9C 7C BF FD | 	call	#_push
1507c                 | LR__1763
1507c     A7 F0 03 F6 | 	mov	ptra, fp
15080     B2 00 A0 FD | 	call	#popregs_
15084                 | _do_mid_ret
15084     2D 00 64 FD | 	ret
15088                 | 
15088                 | ' 
15088                 | ' '-------------------- mkdir
15088                 | ' 
15088                 | ' sub do_mkdir
15088                 | _do_mkdir
15088     04 4A 05 F6 | 	mov	COUNT_, #4
1508c     A8 00 A0 FD | 	call	#pushregs_
15090     EC 7B BF FD | 	call	#_pop
15094     FE 18 02 F6 | 	mov	arg04, result2
15098     FF 16 02 F6 | 	mov	arg03, result3
1509c     FD 26 02 F6 | 	mov	local01, result1
150a0     0C 29 02 F6 | 	mov	local02, arg04
150a4     0B 2B 02 F6 | 	mov	local03, arg03
150a8                 | ' 
150a8                 | ' t1=pop()
150a8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
150a8     2B 2A 0E F2 | 	cmp	local03, #43 wz
150ac     10 00 90 5D |  if_ne	jmp	#LR__1770
150b0     13 13 02 F6 | 	mov	arg01, local01
150b4     40 7D BF FD | 	call	#_convertstring
150b8     FD 26 02 F6 | 	mov	local01, result1
150bc     1F 2A 06 F6 | 	mov	local03, #31
150c0                 | LR__1770
150c0                 | ' if t1.result_type<>result_string then printerror(15): return
150c0     1F 2A 0E F2 | 	cmp	local03, #31 wz
150c4     10 00 90 AD |  if_e	jmp	#LR__1771
150c8     0F 12 06 F6 | 	mov	arg01, #15
150cc     00 14 06 F6 | 	mov	arg02, #0
150d0     C8 CE B0 FD | 	call	#_printerror
150d4     64 00 90 FD | 	jmp	#LR__1773
150d8                 | LR__1771
150d8     13 13 02 F6 | 	mov	arg01, local01
150dc     78 31 B1 FD | 	call	#__system___mkdir
150e0     FD 2C 0A F6 | 	mov	local04, result1 wz
150e4                 | ' filename$=t1.result.sresult
150e4                 | ' err=mkdir(filename$)
150e4                 | ' 'err=geterr() : 
150e4                 | ' if err<>0 then print "Cannot create a directory: system error "; err
150e4     54 00 90 AD |  if_e	jmp	#LR__1772
150e8     00 12 06 F6 | 	mov	arg01, #0
150ec     C0 65 B1 FD | 	call	#__system___getiolock_0599
150f0     FD 12 02 F6 | 	mov	arg01, result1
150f4     90 08 B1 FD | 	call	#__system___lockmem
150f8     AF 01 00 FF 
150fc     5D 14 06 F6 | 	mov	arg02, ##@LR__5894
15100     00 12 06 F6 | 	mov	arg01, #0
15104     00 16 06 F6 | 	mov	arg03, #0
15108     70 15 B1 FD | 	call	#__system___basic_print_string
1510c     00 12 06 F6 | 	mov	arg01, #0
15110     16 15 02 F6 | 	mov	arg02, local04
15114     00 16 06 F6 | 	mov	arg03, #0
15118     0A 18 06 F6 | 	mov	arg04, #10
1511c     A0 15 B1 FD | 	call	#__system___basic_print_integer
15120     00 12 06 F6 | 	mov	arg01, #0
15124     0A 14 06 F6 | 	mov	arg02, #10
15128     00 16 06 F6 | 	mov	arg03, #0
1512c     F4 14 B1 FD | 	call	#__system___basic_print_char
15130     00 12 06 F6 | 	mov	arg01, #0
15134     78 65 B1 FD | 	call	#__system___getiolock_0599
15138     FD 00 68 FC | 	wrlong	#0, result1
1513c                 | LR__1772
1513c                 | LR__1773
1513c     A7 F0 03 F6 | 	mov	ptra, fp
15140     B2 00 A0 FD | 	call	#popregs_
15144                 | _do_mkdir_ret
15144     2D 00 64 FD | 	ret
15148                 | 
15148                 | ' 
15148                 | ' '-------------------- mode
15148                 | ' 
15148                 | ' sub do_mode
15148                 | _do_mode
15148     05 4A 05 F6 | 	mov	COUNT_, #5
1514c     A8 00 A0 FD | 	call	#pushregs_
15150     2C 7B BF FD | 	call	#_pop
15154     FD 26 02 F6 | 	mov	local01, result1
15158     FE 28 02 F6 | 	mov	local02, result2
1515c     FF 2A 02 F6 | 	mov	local03, result3
15160                 | ' t1=pop() 
15160                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15160     1E 2A 0E F2 | 	cmp	local03, #30 wz
15164     10 00 90 5D |  if_ne	jmp	#LR__1780
15168     13 13 02 F6 | 	mov	arg01, local01
1516c     00 14 06 F6 | 	mov	arg02, #0
15170     54 3B B1 FD | 	call	#__system___float_tointeger
15174     FD 26 02 F6 | 	mov	local01, result1
15178                 | LR__1780
15178                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15178     1F 2A 0E F2 | 	cmp	local03, #31 wz
1517c     18 00 90 5D |  if_ne	jmp	#LR__1781
15180     13 13 02 F6 | 	mov	arg01, local01
15184     84 3E B1 FD | 	call	#__system____builtin_atof
15188     FD 12 02 F6 | 	mov	arg01, result1
1518c     00 14 06 F6 | 	mov	arg02, #0
15190     34 3B B1 FD | 	call	#__system___float_tointeger
15194     FD 26 02 F6 | 	mov	local01, result1
15198                 | LR__1781
15198                 | ' select case t1.result.iresult
15198     13 2D 02 F6 | 	mov	local04, local01
1519c     05 2C 26 F3 | 	fle	local04, #5
151a0     30 2C 62 FD | 	jmprel	local04
151a4                 | LR__1782
151a4     14 00 90 FD | 	jmp	#LR__1783
151a8     A8 00 90 FD | 	jmp	#LR__1784
151ac     10 01 90 FD | 	jmp	#LR__1785
151b0     78 01 90 FD | 	jmp	#LR__1786
151b4     E0 01 90 FD | 	jmp	#LR__1787
151b8     70 02 90 FD | 	jmp	#LR__1788
151bc                 | LR__1783
151bc     37 00 00 FF 
151c0     40 E4 05 F1 | 	add	objptr, ##28224
151c4     F2 02 68 FC | 	wrlong	#1, objptr
151c8     04 E4 85 F1 | 	sub	objptr, #4
151cc     F2 34 69 FC | 	wrlong	#154, objptr
151d0     19 00 00 FF 
151d4     00 E5 05 F1 | 	add	objptr, ##13056
151d8     F2 02 68 FC | 	wrlong	#1, objptr
151dc     19 00 00 FF 
151e0     04 E5 85 F1 | 	sub	objptr, ##13060
151e4     F2 26 69 FC | 	wrlong	#147, objptr
151e8     37 00 00 FF 
151ec     38 E4 85 F1 | 	sub	objptr, ##28216
151f0     04 12 06 F6 | 	mov	arg01, #4
151f4     BC E9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
151f8     37 00 00 FF 
151fc     3C E4 05 F1 | 	add	objptr, ##28220
15200     F2 12 02 FB | 	rdlong	arg01, objptr
15204     04 E4 85 F1 | 	sub	objptr, #4
15208     F2 14 02 FB | 	rdlong	arg02, objptr
1520c                 | ' 
1520c                 | ' write_color:=ff
1520c     36 00 00 FF 
15210     F7 E5 85 F1 | 	sub	objptr, ##28151
15214     F2 12 62 FC | 	wrlong	arg01, objptr
15218                 | ' write_background:=bb
15218     04 E4 05 F1 | 	add	objptr, #4
1521c     F2 14 62 FC | 	wrlong	arg02, objptr
15220     01 00 00 FF 
15224     00 EA 05 F1 | 	add	ptr__dat__, ##512
15228     52 00 00 FF 
1522c     0B E4 05 F1 | 	add	objptr, ##41995
15230     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15234     04 E4 85 F1 | 	sub	objptr, #4
15238     03 00 80 FF 
1523c     F2 30 69 FC | 	wrlong	##1688, objptr
15240     52 00 00 FF 
15244     4C E4 85 F1 | 	sub	objptr, ##42060
15248     01 00 00 FF 
1524c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15250     D8 01 90 FD | 	jmp	#LR__1788
15254                 | LR__1784
15254     37 00 00 FF 
15258     40 E4 05 F1 | 	add	objptr, ##28224
1525c     F2 00 68 FC | 	wrlong	#0, objptr
15260     04 E4 85 F1 | 	sub	objptr, #4
15264     F2 2E 68 FC | 	wrlong	#23, objptr
15268     19 00 00 FF 
1526c     00 E5 05 F1 | 	add	objptr, ##13056
15270     F2 00 68 FC | 	wrlong	#0, objptr
15274     19 00 00 FF 
15278     04 E5 85 F1 | 	sub	objptr, ##13060
1527c     F2 00 68 FC | 	wrlong	#0, objptr
15280     37 00 00 FF 
15284     38 E4 85 F1 | 	sub	objptr, ##28216
15288     00 12 06 F6 | 	mov	arg01, #0
1528c     24 E9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15290     37 00 00 FF 
15294     3C E4 05 F1 | 	add	objptr, ##28220
15298     F2 12 02 FB | 	rdlong	arg01, objptr
1529c     04 E4 85 F1 | 	sub	objptr, #4
152a0     F2 14 02 FB | 	rdlong	arg02, objptr
152a4                 | ' 
152a4                 | ' write_color:=ff
152a4     36 00 00 FF 
152a8     F7 E5 85 F1 | 	sub	objptr, ##28151
152ac     F2 12 62 FC | 	wrlong	arg01, objptr
152b0                 | ' write_background:=bb
152b0     04 E4 05 F1 | 	add	objptr, #4
152b4     F2 14 62 FC | 	wrlong	arg02, objptr
152b8     45 E4 85 F1 | 	sub	objptr, #69
152bc     6C 01 90 FD | 	jmp	#LR__1788
152c0                 | LR__1785
152c0     37 00 00 FF 
152c4     40 E4 05 F1 | 	add	objptr, ##28224
152c8     F2 00 68 FC | 	wrlong	#0, objptr
152cc     04 E4 85 F1 | 	sub	objptr, #4
152d0     F2 6A 69 FC | 	wrlong	#181, objptr
152d4     19 00 00 FF 
152d8     00 E5 05 F1 | 	add	objptr, ##13056
152dc     F2 00 68 FC | 	wrlong	#0, objptr
152e0     19 00 00 FF 
152e4     04 E5 85 F1 | 	sub	objptr, ##13060
152e8     F2 00 68 FC | 	wrlong	#0, objptr
152ec     37 00 00 FF 
152f0     38 E4 85 F1 | 	sub	objptr, ##28216
152f4     00 12 06 F6 | 	mov	arg01, #0
152f8     B8 E8 B0 FD | 	call	#_hg010b_spin2_setfontfamily
152fc     37 00 00 FF 
15300     3C E4 05 F1 | 	add	objptr, ##28220
15304     F2 12 02 FB | 	rdlong	arg01, objptr
15308     04 E4 85 F1 | 	sub	objptr, #4
1530c     F2 14 02 FB | 	rdlong	arg02, objptr
15310                 | ' 
15310                 | ' write_color:=ff
15310     36 00 00 FF 
15314     F7 E5 85 F1 | 	sub	objptr, ##28151
15318     F2 12 62 FC | 	wrlong	arg01, objptr
1531c                 | ' write_background:=bb
1531c     04 E4 05 F1 | 	add	objptr, #4
15320     F2 14 62 FC | 	wrlong	arg02, objptr
15324     45 E4 85 F1 | 	sub	objptr, #69
15328     00 01 90 FD | 	jmp	#LR__1788
1532c                 | LR__1786
1532c     37 00 00 FF 
15330     40 E4 05 F1 | 	add	objptr, ##28224
15334     F2 00 68 FC | 	wrlong	#0, objptr
15338     04 E4 85 F1 | 	sub	objptr, #4
1533c     F2 1E 68 FC | 	wrlong	#15, objptr
15340     19 00 00 FF 
15344     00 E5 05 F1 | 	add	objptr, ##13056
15348     F2 00 68 FC | 	wrlong	#0, objptr
1534c     19 00 00 FF 
15350     04 E5 85 F1 | 	sub	objptr, ##13060
15354     F2 00 68 FC | 	wrlong	#0, objptr
15358     37 00 00 FF 
1535c     38 E4 85 F1 | 	sub	objptr, ##28216
15360     00 12 06 F6 | 	mov	arg01, #0
15364     4C E8 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15368     37 00 00 FF 
1536c     3C E4 05 F1 | 	add	objptr, ##28220
15370     F2 12 02 FB | 	rdlong	arg01, objptr
15374     04 E4 85 F1 | 	sub	objptr, #4
15378     F2 14 02 FB | 	rdlong	arg02, objptr
1537c                 | ' 
1537c                 | ' write_color:=ff
1537c     36 00 00 FF 
15380     F7 E5 85 F1 | 	sub	objptr, ##28151
15384     F2 12 62 FC | 	wrlong	arg01, objptr
15388                 | ' write_background:=bb
15388     04 E4 05 F1 | 	add	objptr, #4
1538c     F2 14 62 FC | 	wrlong	arg02, objptr
15390     45 E4 85 F1 | 	sub	objptr, #69
15394     94 00 90 FD | 	jmp	#LR__1788
15398                 | LR__1787
15398     37 00 00 FF 
1539c     40 E4 05 F1 | 	add	objptr, ##28224
153a0     F2 02 68 FC | 	wrlong	#1, objptr
153a4     04 E4 85 F1 | 	sub	objptr, #4
153a8     F2 02 68 FC | 	wrlong	#1, objptr
153ac     19 00 00 FF 
153b0     00 E5 05 F1 | 	add	objptr, ##13056
153b4     F2 02 68 FC | 	wrlong	#1, objptr
153b8     19 00 00 FF 
153bc     04 E5 85 F1 | 	sub	objptr, ##13060
153c0     F2 1C 68 FC | 	wrlong	#14, objptr
153c4     37 00 00 FF 
153c8     38 E4 85 F1 | 	sub	objptr, ##28216
153cc     04 12 06 F6 | 	mov	arg01, #4
153d0     E0 E7 B0 FD | 	call	#_hg010b_spin2_setfontfamily
153d4     37 00 00 FF 
153d8     3C E4 05 F1 | 	add	objptr, ##28220
153dc     F2 12 02 FB | 	rdlong	arg01, objptr
153e0     04 E4 85 F1 | 	sub	objptr, #4
153e4     F2 14 02 FB | 	rdlong	arg02, objptr
153e8                 | ' 
153e8                 | ' write_color:=ff
153e8     36 00 00 FF 
153ec     F7 E5 85 F1 | 	sub	objptr, ##28151
153f0     F2 12 62 FC | 	wrlong	arg01, objptr
153f4                 | ' write_background:=bb
153f4     04 E4 05 F1 | 	add	objptr, #4
153f8     F2 14 62 FC | 	wrlong	arg02, objptr
153fc     07 00 00 FF 
15400     82 EB 05 F1 | 	add	ptr__dat__, ##3970
15404     52 00 00 FF 
15408     0B E4 05 F1 | 	add	objptr, ##41995
1540c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15410     04 E4 85 F1 | 	sub	objptr, #4
15414     03 00 80 FF 
15418     F2 30 69 FC | 	wrlong	##1688, objptr
1541c     52 00 00 FF 
15420     4C E4 85 F1 | 	sub	objptr, ##42060
15424     07 00 00 FF 
15428     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
1542c                 | LR__1788
1542c     52 00 00 FF 
15430     48 E4 05 F1 | 	add	objptr, ##42056
15434     F2 26 62 FC | 	wrlong	local01, objptr
15438     04 E4 85 F1 | 	sub	objptr, #4
1543c     F2 12 02 FB | 	rdlong	arg01, objptr
15440     0E 00 00 FF 
15444     E8 E5 85 F1 | 	sub	objptr, ##7656
15448     F2 2E 02 FB | 	rdlong	local05, objptr
1544c     43 00 00 FF 
15450     5C E4 85 F1 | 	sub	objptr, ##34396
15454     17 13 82 F1 | 	sub	arg01, local05
15458     00 14 06 F6 | 	mov	arg02, #0
1545c     0A 16 06 F6 | 	mov	arg03, #10
15460     F4 27 B1 FD | 	call	#__system__Number_S
15464     FD 12 02 F6 | 	mov	arg01, result1
15468     AF 01 00 FF 
1546c     86 14 06 F6 | 	mov	arg02, ##@LR__5895
15470     70 05 B1 FD | 	call	#__system___string_concat
15474     50 00 00 FF 
15478     38 E5 05 F1 | 	add	objptr, ##41272
1547c     F2 FA 61 FC | 	wrlong	result1, objptr
15480     19 00 00 FF 
15484     FC E4 85 F1 | 	sub	objptr, ##13052
15488     F2 12 02 FB | 	rdlong	arg01, objptr
1548c     04 E4 85 F1 | 	sub	objptr, #4
15490     F2 14 02 FB | 	rdlong	arg02, objptr
15494     37 00 00 FF 
15498     38 E4 85 F1 | 	sub	objptr, ##28216
1549c     64 E8 B0 FD | 	call	#_hg010b_spin2_cls
154a0     AF 01 00 FF 
154a4     98 12 06 F6 | 	mov	arg01, ##@LR__5896
154a8                 | ' 
154a8                 | ' write(text)
154a8     18 EC B0 FD | 	call	#_hg010b_spin2_write
154ac                 | ' crlf
154ac     14 F1 B0 FD | 	call	#_hg010b_spin2_crlf
154b0     18 00 00 FF 
154b4     40 EB 05 F1 | 	add	ptr__dat__, ##12608
154b8     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
154bc     18 00 00 FF 
154c0     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
154c4                 | ' 
154c4                 | ' write(text)
154c4     FC EB B0 FD | 	call	#_hg010b_spin2_write
154c8                 | ' crlf
154c8     F8 F0 B0 FD | 	call	#_hg010b_spin2_crlf
154cc     50 00 00 FF 
154d0     38 E5 05 F1 | 	add	objptr, ##41272
154d4     F2 12 02 FB | 	rdlong	arg01, objptr
154d8     50 00 00 FF 
154dc     38 E5 85 F1 | 	sub	objptr, ##41272
154e0                 | ' 
154e0                 | ' write(text)
154e0     E0 EB B0 FD | 	call	#_hg010b_spin2_write
154e4                 | ' crlf
154e4     DC F0 B0 FD | 	call	#_hg010b_spin2_crlf
154e8     A7 F0 03 F6 | 	mov	ptra, fp
154ec     B2 00 A0 FD | 	call	#popregs_
154f0                 | _do_mode_ret
154f0     2D 00 64 FD | 	ret
154f4                 | 
154f4                 | ' 
154f4                 | ' '-------------------- mouse
154f4                 | ' 
154f4                 | ' sub do_mouse
154f4                 | _do_mouse
154f4     88 77 BF FD | 	call	#_pop
154f8     00 FA 4D F2 | 	cmps	result1, #0 wz
154fc                 | ' 
154fc                 | ' t1=pop()
154fc                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
154fc     14 00 90 5D |  if_ne	jmp	#LR__1790
15500     10 12 06 F6 | 	mov	arg01, #16
15504     00 14 06 F6 | 	mov	arg02, #0
15508     00 16 06 F6 | 	mov	arg03, #0
1550c     D4 DA B0 FD | 	call	#_hg010b_spin2_setspritesize
15510     10 00 90 FD | 	jmp	#LR__1791
15514                 | LR__1790
15514     10 12 06 F6 | 	mov	arg01, #16
15518     20 14 06 F6 | 	mov	arg02, #32
1551c     20 16 06 F6 | 	mov	arg03, #32
15520     C0 DA B0 FD | 	call	#_hg010b_spin2_setspritesize
15524                 | LR__1791
15524                 | _do_mouse_ret
15524     2D 00 64 FD | 	ret
15528                 | 
15528                 | ' 
15528                 | ' '-------------------- mousek
15528                 | ' 
15528                 | ' sub do_mousek
15528                 | _do_mousek
15528     00 4A 05 F6 | 	mov	COUNT_, #0
1552c     A8 00 A0 FD | 	call	#pushregs_
15530     0C F0 07 F1 | 	add	ptra, #12
15534     08 4E 05 F1 | 	add	fp, #8
15538     A7 3A 68 FC | 	wrlong	#29, fp
1553c     08 4E 85 F1 | 	sub	fp, #8
15540     51 00 00 FF 
15544     50 E5 05 F1 | 	add	objptr, ##41808
15548     F2 12 02 FB | 	rdlong	arg01, objptr
1554c     51 00 00 FF 
15550     50 E5 85 F1 | 	sub	objptr, ##41808
15554     A7 12 62 FC | 	wrlong	arg01, fp
15558     A7 12 02 F6 | 	mov	arg01, fp
1555c     B8 77 BF FD | 	call	#_push
15560     A7 F0 03 F6 | 	mov	ptra, fp
15564     B2 00 A0 FD | 	call	#popregs_
15568                 | _do_mousek_ret
15568     2D 00 64 FD | 	ret
1556c                 | 
1556c                 | ' 
1556c                 | ' '-------------------- mousew
1556c                 | ' 
1556c                 | ' sub do_mousew
1556c                 | _do_mousew
1556c     00 4A 05 F6 | 	mov	COUNT_, #0
15570     A8 00 A0 FD | 	call	#pushregs_
15574     0C F0 07 F1 | 	add	ptra, #12
15578     08 4E 05 F1 | 	add	fp, #8
1557c     A7 38 68 FC | 	wrlong	#28, fp
15580     08 4E 85 F1 | 	sub	fp, #8
15584     51 00 00 FF 
15588     54 E5 05 F1 | 	add	objptr, ##41812
1558c     F2 12 02 FB | 	rdlong	arg01, objptr
15590     51 00 00 FF 
15594     54 E5 85 F1 | 	sub	objptr, ##41812
15598     A7 12 62 FC | 	wrlong	arg01, fp
1559c     A7 12 02 F6 | 	mov	arg01, fp
155a0     74 77 BF FD | 	call	#_push
155a4     A7 F0 03 F6 | 	mov	ptra, fp
155a8     B2 00 A0 FD | 	call	#popregs_
155ac                 | _do_mousew_ret
155ac     2D 00 64 FD | 	ret
155b0                 | 
155b0                 | ' 
155b0                 | ' '-------------------- mousex
155b0                 | ' 
155b0                 | ' sub do_mousex
155b0                 | _do_mousex
155b0     00 4A 05 F6 | 	mov	COUNT_, #0
155b4     A8 00 A0 FD | 	call	#pushregs_
155b8     0C F0 07 F1 | 	add	ptra, #12
155bc     08 4E 05 F1 | 	add	fp, #8
155c0     A7 3A 68 FC | 	wrlong	#29, fp
155c4     08 4E 85 F1 | 	sub	fp, #8
155c8     51 00 00 FF 
155cc     48 E5 05 F1 | 	add	objptr, ##41800
155d0     F2 12 02 FB | 	rdlong	arg01, objptr
155d4     51 00 00 FF 
155d8     48 E5 85 F1 | 	sub	objptr, ##41800
155dc     A7 12 62 FC | 	wrlong	arg01, fp
155e0     A7 12 02 F6 | 	mov	arg01, fp
155e4     30 77 BF FD | 	call	#_push
155e8     A7 F0 03 F6 | 	mov	ptra, fp
155ec     B2 00 A0 FD | 	call	#popregs_
155f0                 | _do_mousex_ret
155f0     2D 00 64 FD | 	ret
155f4                 | 
155f4                 | ' 
155f4                 | ' '-------------------- mousey
155f4                 | ' 
155f4                 | ' sub do_mousey
155f4                 | _do_mousey
155f4     00 4A 05 F6 | 	mov	COUNT_, #0
155f8     A8 00 A0 FD | 	call	#pushregs_
155fc     0C F0 07 F1 | 	add	ptra, #12
15600     08 4E 05 F1 | 	add	fp, #8
15604     A7 3A 68 FC | 	wrlong	#29, fp
15608     08 4E 85 F1 | 	sub	fp, #8
1560c     51 00 00 FF 
15610     4C E5 05 F1 | 	add	objptr, ##41804
15614     F2 12 02 FB | 	rdlong	arg01, objptr
15618     51 00 00 FF 
1561c     4C E5 85 F1 | 	sub	objptr, ##41804
15620     A7 12 62 FC | 	wrlong	arg01, fp
15624     A7 12 02 F6 | 	mov	arg01, fp
15628     EC 76 BF FD | 	call	#_push
1562c     A7 F0 03 F6 | 	mov	ptra, fp
15630     B2 00 A0 FD | 	call	#popregs_
15634                 | _do_mousey_ret
15634     2D 00 64 FD | 	ret
15638                 | 
15638                 | ' 
15638                 | ' '------------------ new
15638                 | ' 
15638                 | ' sub do_new
15638                 | _do_new
15638     03 4A 05 F6 | 	mov	COUNT_, #3
1563c     A8 00 A0 FD | 	call	#pushregs_
15640                 | ' 
15640                 | ' if inrun=1 then inrun=2
15640     50 00 00 FF 
15644     EC E4 05 F1 | 	add	objptr, ##41196
15648     F2 16 02 FB | 	rdlong	arg03, objptr
1564c     50 00 00 FF 
15650     EC E4 85 F1 | 	sub	objptr, ##41196
15654     01 16 0E F2 | 	cmp	arg03, #1 wz
15658     50 00 00 AF 
1565c     EC E4 05 A1 |  if_e	add	objptr, ##41196
15660     F2 04 68 AC |  if_e	wrlong	#2, objptr
15664     50 00 00 AF 
15668     EC E4 85 A1 |  if_e	sub	objptr, ##41196
1566c     13 12 C6 F9 | 	decod	arg01, #19
15670     01 14 66 F6 | 	neg	arg02, #1
15674     C4 CA B0 FD | 	call	#_pslpoke
15678     35 00 00 FF 
1567c     08 E4 05 F1 | 	add	objptr, ##27144
15680     F2 00 68 FC | 	wrlong	#0, objptr
15684                 | ' pslpoke(memlo,$FFFFFFFF)
15684                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
15684     00 26 06 F6 | 	mov	local01, #0
15688     20 00 00 FF 
1568c     10 E4 85 F1 | 	sub	objptr, ##16400
15690     97 1E 48 FB | 	callpa	#(@LR__1801-@LR__1800)>>2,fcache_load_ptr_
15694                 | LR__1800
15694     13 17 02 F6 | 	mov	arg03, local01
15698     04 16 66 F0 | 	shl	arg03, #4
1569c     F2 16 02 F1 | 	add	arg03, objptr
156a0     AF 01 00 FF 
156a4     99 14 06 F6 | 	mov	arg02, ##@LR__5897
156a8     0B 15 62 FC | 	wrlong	arg02, arg03
156ac     13 29 02 F6 | 	mov	local02, local01
156b0     04 28 66 F0 | 	shl	local02, #4
156b4     F2 28 02 F1 | 	add	local02, objptr
156b8     0C 28 06 F1 | 	add	local02, #12
156bc     14 01 68 FC | 	wrlong	#0, local02
156c0     01 26 06 F1 | 	add	local01, #1
156c4     02 00 00 FF 
156c8     01 26 56 F2 | 	cmps	local01, ##1025 wc
156cc     C4 FF 9F CD |  if_b	jmp	#LR__1800
156d0                 | LR__1801
156d0     35 00 00 FF 
156d4     90 E4 05 F1 | 	add	objptr, ##27280
156d8     00 04 80 FF 
156dc     F2 00 68 FC | 	wrlong	##524288, objptr
156e0     06 00 00 FF 
156e4     30 E4 05 F1 | 	add	objptr, ##3120
156e8     00 04 80 FF 
156ec     F2 00 68 FC | 	wrlong	##524288, objptr
156f0     04 E4 05 F1 | 	add	objptr, #4
156f4     00 04 80 FF 
156f8     F2 00 68 FC | 	wrlong	##524288, objptr
156fc     0D 00 00 FF 
15700     64 E4 85 F1 | 	sub	objptr, ##6756
15704     F2 00 68 FC | 	wrlong	#0, objptr
15708     07 00 00 FF 
1570c     24 E4 05 F1 | 	add	objptr, ##3620
15710     F2 00 68 FC | 	wrlong	#0, objptr
15714     07 00 00 FF 
15718     20 E4 85 F1 | 	sub	objptr, ##3616
1571c     00 04 80 FF 
15720     F2 00 68 FC | 	wrlong	##524288, objptr
15724     0D 00 00 FF 
15728     D0 E4 05 F1 | 	add	objptr, ##6864
1572c     F2 00 68 FC | 	wrlong	#0, objptr
15730     AF 01 00 FF 
15734     9A 2A 06 F6 | 	mov	local03, ##@LR__5898
15738     01 00 00 FF 
1573c     5C E5 05 F1 | 	add	objptr, ##860
15740     F2 2A 62 FC | 	wrlong	local03, objptr
15744     07 00 00 FF 
15748     FC E5 85 F1 | 	sub	objptr, ##4092
1574c     F2 00 68 FC | 	wrlong	#0, objptr
15750     04 E4 05 F1 | 	add	objptr, #4
15754     FF FF FF FF 
15758     F2 FE 6B FC | 	wrlong	##-1, objptr
1575c     06 00 00 FF 
15760     A0 E4 05 F1 | 	add	objptr, ##3232
15764     F2 00 68 FC | 	wrlong	#0, objptr
15768     04 E4 05 F1 | 	add	objptr, #4
1576c     F2 00 68 FC | 	wrlong	#0, objptr
15770                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
15770                 | ' stackpointer=0
15770                 | ' lineptr=0 
15770                 | ' programptr=memlo ': stringptr=0
15770                 | ' dataptr=0 : readline=""
15770                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
15770                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
15770     00 26 06 F6 | 	mov	local01, #0
15774     06 00 00 FF 
15778     9C E4 85 F1 | 	sub	objptr, ##3228
1577c     97 16 48 FB | 	callpa	#(@LR__1803-@LR__1802)>>2,fcache_load_ptr_
15780                 | LR__1802
15780     13 29 02 F6 | 	mov	local02, local01
15784     02 28 66 F0 | 	shl	local02, #2
15788     13 29 02 F1 | 	add	local02, local01
1578c     02 28 66 F0 | 	shl	local02, #2
15790     F2 28 02 F1 | 	add	local02, objptr
15794     08 28 06 F1 | 	add	local02, #8
15798     FF FF FF FF 
1579c     14 FF 6B FC | 	wrlong	##-1, local02
157a0     01 26 06 F1 | 	add	local01, #1
157a4     41 26 56 F2 | 	cmps	local01, #65 wc
157a8     D4 FF 9F CD |  if_b	jmp	#LR__1802
157ac                 | LR__1803
157ac     4A 00 00 FF 
157b0     98 E4 85 F1 | 	sub	objptr, ##38040
157b4                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
157b4     00 26 06 F6 | 	mov	local01, #0
157b8                 | LR__1804
157b8     13 29 02 F6 | 	mov	local02, local01
157bc     02 28 66 F0 | 	shl	local02, #2
157c0     52 00 00 FF 
157c4     00 E4 05 F1 | 	add	objptr, ##41984
157c8     F2 28 02 F1 | 	add	local02, objptr
157cc     14 2B 0A FB | 	rdlong	local03, local02 wz
157d0     52 00 00 FF 
157d4     00 E4 85 F1 | 	sub	objptr, ##41984
157d8     34 00 90 AD |  if_e	jmp	#LR__1805
157dc     13 13 02 F6 | 	mov	arg01, local01
157e0     00 14 06 F6 | 	mov	arg02, #0
157e4     00 16 06 F6 | 	mov	arg03, #0
157e8     F8 D7 B0 FD | 	call	#_hg010b_spin2_setspritesize
157ec     13 29 02 F6 | 	mov	local02, local01
157f0     02 28 66 F0 | 	shl	local02, #2
157f4     52 00 00 FF 
157f8     00 E4 05 F1 | 	add	objptr, ##41984
157fc     F2 28 02 F1 | 	add	local02, objptr
15800     14 13 02 FB | 	rdlong	arg01, local02
15804     52 00 00 FF 
15808     00 E4 85 F1 | 	sub	objptr, ##41984
1580c     54 44 B1 FD | 	call	#__system___gc_free
15810                 | LR__1805
15810     01 26 06 F1 | 	add	local01, #1
15814     10 26 56 F2 | 	cmps	local01, #16 wc
15818     9C FF 9F CD |  if_b	jmp	#LR__1804
1581c     52 00 00 FF 
15820     54 E4 05 F1 | 	add	objptr, ##42068
15824     00 C0 9F FF 
15828     F2 00 68 FC | 	wrlong	##1065353216, objptr
1582c     04 E4 05 F1 | 	add	objptr, #4
15830     00 C0 9F FF 
15834     F2 00 68 FC | 	wrlong	##1065353216, objptr
15838     52 00 00 FF 
1583c     54 E4 85 F1 | 	sub	objptr, ##42068
15840     F2 2A 02 FB | 	rdlong	local03, objptr
15844     52 00 00 FF 
15848     40 E4 05 F1 | 	add	objptr, ##42048
1584c     F2 2A 62 FC | 	wrlong	local03, objptr
15850     52 00 00 FF 
15854     44 E4 85 F1 | 	sub	objptr, ##42052
15858     11 12 06 F6 | 	mov	arg01, #17
1585c     08 14 06 F6 | 	mov	arg02, #8
15860     10 16 06 F6 | 	mov	arg03, #16
15864     7C D7 B0 FD | 	call	#_hg010b_spin2_setspritesize
15868     10 12 06 F6 | 	mov	arg01, #16
1586c     20 14 06 F6 | 	mov	arg02, #32
15870     20 16 06 F6 | 	mov	arg03, #32
15874     6C D7 B0 FD | 	call	#_hg010b_spin2_setspritesize
15878     AF 01 00 FF 
1587c     9B 2A 06 F6 | 	mov	local03, ##@LR__5899
15880     52 00 00 FF 
15884     70 E4 05 F1 | 	add	objptr, ##42096
15888     F2 2A 62 FC | 	wrlong	local03, objptr
1588c     52 00 00 FF 
15890     70 E4 85 F1 | 	sub	objptr, ##42096
15894     FC BA B0 FD | 	call	#_init_audio
15898     A7 F0 03 F6 | 	mov	ptra, fp
1589c     B2 00 A0 FD | 	call	#popregs_
158a0                 | _do_new_ret
158a0     2D 00 64 FD | 	ret
158a4                 | 
158a4                 | ' 
158a4                 | ' '-------------------- next
158a4                 | ' 
158a4                 | ' sub do_next()
158a4                 | _do_next
158a4     04 4A 05 F6 | 	mov	COUNT_, #4
158a8     A8 00 A0 FD | 	call	#pushregs_
158ac     D0 73 BF FD | 	call	#_pop
158b0     FD 26 02 F6 | 	mov	local01, result1
158b4     FE 28 02 F6 | 	mov	local02, result2
158b8     FF 2A 02 F6 | 	mov	local03, result3
158bc                 | ' t1=pop() :varnum=t1.result.uresult
158bc                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
158bc     50 00 00 FF 
158c0     30 E5 05 F1 | 	add	objptr, ##41264
158c4     F2 14 02 FB | 	rdlong	arg02, objptr
158c8     0A 13 02 F6 | 	mov	arg01, arg02
158cc     02 12 66 F0 | 	shl	arg01, #2
158d0     0A 13 02 F1 | 	add	arg01, arg02
158d4     02 12 66 F0 | 	shl	arg01, #2
158d8     06 00 00 FF 
158dc     98 E4 85 F1 | 	sub	objptr, ##3224
158e0     F2 12 02 F1 | 	add	arg01, objptr
158e4     08 12 06 F1 | 	add	arg01, #8
158e8     09 15 02 FB | 	rdlong	arg02, arg01
158ec     13 15 0A F2 | 	cmp	arg02, local01 wz
158f0     4A 00 00 FF 
158f4     98 E4 85 F1 | 	sub	objptr, ##38040
158f8     10 00 90 AD |  if_e	jmp	#LR__1810
158fc     25 12 06 F6 | 	mov	arg01, #37
15900     00 14 06 F6 | 	mov	arg02, #0
15904     94 C6 B0 FD | 	call	#_printerror
15908     54 03 90 FD | 	jmp	#LR__1817
1590c                 | LR__1810
1590c                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
1590c     13 15 02 F6 | 	mov	arg02, local01
15910     04 14 66 F0 | 	shl	arg02, #4
15914     14 00 00 FF 
15918     F8 E5 05 F1 | 	add	objptr, ##10744
1591c     F2 14 02 F1 | 	add	arg02, objptr
15920     0C 14 06 F1 | 	add	arg02, #12
15924     0A 15 02 FB | 	rdlong	arg02, arg02
15928     1E 14 0E F2 | 	cmp	arg02, #30 wz
1592c     14 00 00 FF 
15930     F8 E5 85 F1 | 	sub	objptr, ##10744
15934     54 00 90 5D |  if_ne	jmp	#LR__1811
15938     13 15 02 F6 | 	mov	arg02, local01
1593c     04 14 66 F0 | 	shl	arg02, #4
15940     14 00 00 FF 
15944     F8 E5 05 F1 | 	add	objptr, ##10744
15948     F2 14 02 F1 | 	add	arg02, objptr
1594c     0C 14 06 F1 | 	add	arg02, #12
15950     0A 39 68 FC | 	wrlong	#28, arg02
15954     13 2D 02 F6 | 	mov	local04, local01
15958     04 2C 66 F0 | 	shl	local04, #4
1595c     F2 2C 02 F1 | 	add	local04, objptr
15960     13 15 02 F6 | 	mov	arg02, local01
15964     04 14 66 F0 | 	shl	arg02, #4
15968     F2 14 02 F1 | 	add	arg02, objptr
1596c     04 14 06 F1 | 	add	arg02, #4
15970     0A 13 02 FB | 	rdlong	arg01, arg02
15974     14 00 00 FF 
15978     F8 E5 85 F1 | 	sub	objptr, ##10744
1597c     01 14 06 F6 | 	mov	arg02, #1
15980     44 33 B1 FD | 	call	#__system___float_tointeger
15984     04 2C 06 F1 | 	add	local04, #4
15988     16 FB 61 FC | 	wrlong	result1, local04
1598c                 | LR__1811
1598c     50 00 00 FF 
15990     30 E5 05 F1 | 	add	objptr, ##41264
15994     F2 2C 02 FB | 	rdlong	local04, objptr
15998     16 15 02 F6 | 	mov	arg02, local04
1599c     02 14 66 F0 | 	shl	arg02, #2
159a0     16 15 02 F1 | 	add	arg02, local04
159a4     02 14 66 F0 | 	shl	arg02, #2
159a8     06 00 00 FF 
159ac     98 E4 85 F1 | 	sub	objptr, ##3224
159b0     F2 14 02 F1 | 	add	arg02, objptr
159b4     0C 14 06 F1 | 	add	arg02, #12
159b8     0A FF 01 FB | 	rdlong	result3, arg02
159bc     13 2D 02 F6 | 	mov	local04, local01
159c0     04 2C 66 F0 | 	shl	local04, #4
159c4     35 00 00 FF 
159c8     A0 E4 85 F1 | 	sub	objptr, ##27296
159cc     F2 2C 02 F1 | 	add	local04, objptr
159d0     13 15 02 F6 | 	mov	arg02, local01
159d4     04 14 66 F0 | 	shl	arg02, #4
159d8     F2 14 02 F1 | 	add	arg02, objptr
159dc     04 14 06 F1 | 	add	arg02, #4
159e0     0A 13 02 FB | 	rdlong	arg01, arg02
159e4     FF 12 02 F1 | 	add	arg01, result3
159e8     04 2C 06 F1 | 	add	local04, #4
159ec     16 13 62 FC | 	wrlong	arg01, local04
159f0                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
159f0                 | ' if fortable(fortop).stepval>=0 then
159f0     3B 00 00 FF 
159f4     38 E5 05 F1 | 	add	objptr, ##30520
159f8     F2 2C 02 FB | 	rdlong	local04, objptr
159fc     16 13 02 F6 | 	mov	arg01, local04
15a00     02 12 66 F0 | 	shl	arg01, #2
15a04     16 13 02 F1 | 	add	arg01, local04
15a08     02 12 66 F0 | 	shl	arg01, #2
15a0c     06 00 00 FF 
15a10     98 E4 85 F1 | 	sub	objptr, ##3224
15a14     F2 12 02 F1 | 	add	arg01, objptr
15a18     0C 12 06 F1 | 	add	arg01, #12
15a1c     09 13 02 FB | 	rdlong	arg01, arg01
15a20     00 12 56 F2 | 	cmps	arg01, #0 wc
15a24     4A 00 00 FF 
15a28     98 E4 85 F1 | 	sub	objptr, ##38040
15a2c     78 00 90 CD |  if_b	jmp	#LR__1812
15a30                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
15a30     04 26 66 F0 | 	shl	local01, #4
15a34     14 00 00 FF 
15a38     F8 E5 05 F1 | 	add	objptr, ##10744
15a3c     F2 26 02 F1 | 	add	local01, objptr
15a40     3B 00 00 FF 
15a44     38 E5 05 F1 | 	add	objptr, ##30520
15a48     F2 12 02 FB | 	rdlong	arg01, objptr
15a4c     09 2D 02 F6 | 	mov	local04, arg01
15a50     02 2C 66 F0 | 	shl	local04, #2
15a54     09 2D 02 F1 | 	add	local04, arg01
15a58     02 2C 66 F0 | 	shl	local04, #2
15a5c     06 00 00 FF 
15a60     98 E4 85 F1 | 	sub	objptr, ##3224
15a64     F2 2C 02 F1 | 	add	local04, objptr
15a68     04 26 06 F1 | 	add	local01, #4
15a6c     13 27 02 FB | 	rdlong	local01, local01
15a70     10 2C 06 F1 | 	add	local04, #16
15a74     16 2D 02 FB | 	rdlong	local04, local04
15a78     16 27 5A F2 | 	cmps	local01, local04 wcz
15a7c     4A 00 00 FF 
15a80     98 E4 85 F1 | 	sub	objptr, ##38040
15a84     9C 00 90 ED |  if_be	jmp	#LR__1814
15a88     50 00 00 FF 
15a8c     30 E5 05 F1 | 	add	objptr, ##41264
15a90     F2 2C 02 FB | 	rdlong	local04, objptr
15a94     01 2C 86 F1 | 	sub	local04, #1
15a98     F2 2C 62 FC | 	wrlong	local04, objptr
15a9c     50 00 00 FF 
15aa0     30 E5 85 F1 | 	sub	objptr, ##41264
15aa4     B8 01 90 FD | 	jmp	#LR__1817
15aa8                 | LR__1812
15aa8                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
15aa8     13 2D 02 F6 | 	mov	local04, local01
15aac     04 2C 66 F0 | 	shl	local04, #4
15ab0     14 00 00 FF 
15ab4     F8 E5 05 F1 | 	add	objptr, ##10744
15ab8     F2 2C 02 F1 | 	add	local04, objptr
15abc     3B 00 00 FF 
15ac0     38 E5 05 F1 | 	add	objptr, ##30520
15ac4     F2 26 02 FB | 	rdlong	local01, objptr
15ac8     13 13 02 F6 | 	mov	arg01, local01
15acc     02 12 66 F0 | 	shl	arg01, #2
15ad0     13 13 02 F1 | 	add	arg01, local01
15ad4     02 12 66 F0 | 	shl	arg01, #2
15ad8     06 00 00 FF 
15adc     98 E4 85 F1 | 	sub	objptr, ##3224
15ae0     F2 12 02 F1 | 	add	arg01, objptr
15ae4     04 2C 06 F1 | 	add	local04, #4
15ae8     16 2D 02 FB | 	rdlong	local04, local04
15aec     10 12 06 F1 | 	add	arg01, #16
15af0     09 13 02 FB | 	rdlong	arg01, arg01
15af4     09 2D 52 F2 | 	cmps	local04, arg01 wc
15af8     4A 00 00 FF 
15afc     98 E4 85 F1 | 	sub	objptr, ##38040
15b00     20 00 90 3D |  if_ae	jmp	#LR__1813
15b04     50 00 00 FF 
15b08     30 E5 05 F1 | 	add	objptr, ##41264
15b0c     F2 2C 02 FB | 	rdlong	local04, objptr
15b10     01 2C 86 F1 | 	sub	local04, #1
15b14     F2 2C 62 FC | 	wrlong	local04, objptr
15b18     50 00 00 FF 
15b1c     30 E5 85 F1 | 	sub	objptr, ##41264
15b20     3C 01 90 FD | 	jmp	#LR__1817
15b24                 | LR__1813
15b24                 | LR__1814
15b24                 | ' ' if not returned, goto pointer 
15b24                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
15b24     50 00 00 FF 
15b28     EC E4 05 F1 | 	add	objptr, ##41196
15b2c     F2 2C 02 FB | 	rdlong	local04, objptr
15b30     50 00 00 FF 
15b34     EC E4 85 F1 | 	sub	objptr, ##41196
15b38     01 2C 16 F2 | 	cmp	local04, #1 wc
15b3c     DC 00 90 CD |  if_b	jmp	#LR__1815
15b40     50 00 00 FF 
15b44     30 E5 05 F1 | 	add	objptr, ##41264
15b48     F2 2C 02 FB | 	rdlong	local04, objptr
15b4c     16 27 02 F6 | 	mov	local01, local04
15b50     02 26 66 F0 | 	shl	local01, #2
15b54     16 27 02 F1 | 	add	local01, local04
15b58     02 26 66 F0 | 	shl	local01, #2
15b5c     06 00 00 FF 
15b60     98 E4 85 F1 | 	sub	objptr, ##3224
15b64     F2 26 02 F1 | 	add	local01, objptr
15b68     06 00 00 FF 
15b6c     20 E4 05 F1 | 	add	objptr, ##3104
15b70     F2 2C 02 FB | 	rdlong	local04, objptr
15b74     50 00 00 FF 
15b78     B8 E4 85 F1 | 	sub	objptr, ##41144
15b7c     13 27 02 FB | 	rdlong	local01, local01
15b80     13 2D 0A F2 | 	cmp	local04, local01 wz
15b84     94 00 90 AD |  if_e	jmp	#LR__1815
15b88     50 00 00 FF 
15b8c     30 E5 05 F1 | 	add	objptr, ##41264
15b90     F2 2C 02 FB | 	rdlong	local04, objptr
15b94     16 27 02 F6 | 	mov	local01, local04
15b98     02 26 66 F0 | 	shl	local01, #2
15b9c     16 27 02 F1 | 	add	local01, local04
15ba0     02 26 66 F0 | 	shl	local01, #2
15ba4     06 00 00 FF 
15ba8     98 E4 85 F1 | 	sub	objptr, ##3224
15bac     F2 26 02 F1 | 	add	local01, objptr
15bb0     13 27 02 FB | 	rdlong	local01, local01
15bb4     06 00 00 FF 
15bb8     20 E4 05 F1 | 	add	objptr, ##3104
15bbc     F2 26 62 FC | 	wrlong	local01, objptr
15bc0     78 E4 05 F1 | 	add	objptr, #120
15bc4     F2 2C 02 FB | 	rdlong	local04, objptr
15bc8     16 27 02 F6 | 	mov	local01, local04
15bcc     02 26 66 F0 | 	shl	local01, #2
15bd0     16 27 02 F1 | 	add	local01, local04
15bd4     02 26 66 F0 | 	shl	local01, #2
15bd8     06 00 00 FF 
15bdc     98 E4 85 F1 | 	sub	objptr, ##3224
15be0     F2 26 02 F1 | 	add	local01, objptr
15be4     04 26 06 F1 | 	add	local01, #4
15be8     13 27 02 FB | 	rdlong	local01, local01
15bec     06 00 00 FF 
15bf0     24 E4 05 F1 | 	add	objptr, ##3108
15bf4     F2 26 62 FC | 	wrlong	local01, objptr
15bf8     06 00 00 FF 
15bfc     40 E4 85 F1 | 	sub	objptr, ##3136
15c00     F2 2C 02 FB | 	rdlong	local04, objptr
15c04     01 2C 86 F1 | 	sub	local04, #1
15c08     04 E4 05 F1 | 	add	objptr, #4
15c0c     F2 2C 62 FC | 	wrlong	local04, objptr
15c10     4A 00 00 FF 
15c14     80 E4 85 F1 | 	sub	objptr, ##38016
15c18     44 00 90 FD | 	jmp	#LR__1816
15c1c                 | LR__1815
15c1c     50 00 00 FF 
15c20     30 E5 05 F1 | 	add	objptr, ##41264
15c24     F2 2C 02 FB | 	rdlong	local04, objptr
15c28     16 27 02 F6 | 	mov	local01, local04
15c2c     02 26 66 F0 | 	shl	local01, #2
15c30     16 27 02 F1 | 	add	local01, local04
15c34     02 26 66 F0 | 	shl	local01, #2
15c38     06 00 00 FF 
15c3c     98 E4 85 F1 | 	sub	objptr, ##3224
15c40     F2 26 02 F1 | 	add	local01, objptr
15c44     04 26 06 F1 | 	add	local01, #4
15c48     13 27 02 FB | 	rdlong	local01, local01
15c4c     01 26 86 F1 | 	sub	local01, #1
15c50     18 E4 85 F1 | 	sub	objptr, #24
15c54     F2 26 62 FC | 	wrlong	local01, objptr
15c58     4A 00 00 FF 
15c5c     80 E4 85 F1 | 	sub	objptr, ##38016
15c60                 | LR__1816
15c60                 | LR__1817
15c60     A7 F0 03 F6 | 	mov	ptra, fp
15c64     B2 00 A0 FD | 	call	#popregs_
15c68                 | _do_next_ret
15c68     2D 00 64 FD | 	ret
15c6c                 | 
15c6c                 | ' 
15c6c                 | ' '-------------------- no command (print "Unknown command")
15c6c                 | ' 
15c6c                 | ' sub do_no_command
15c6c                 | _do_no_command
15c6c     50 00 00 FF 
15c70     F0 E4 05 F1 | 	add	objptr, ##41200
15c74     F2 14 02 FB | 	rdlong	arg02, objptr
15c78     50 00 00 FF 
15c7c     F0 E4 85 F1 | 	sub	objptr, ##41200
15c80     17 12 06 F6 | 	mov	arg01, #23
15c84     14 C3 B0 FD | 	call	#_printerror
15c88                 | _do_no_command_ret
15c88     2D 00 64 FD | 	ret
15c8c                 | 
15c8c                 | ' 
15c8c                 | ' '-------------------- nothing
15c8c                 | ' 
15c8c                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
15c8c                 | _do_nothing
15c8c                 | _do_nothing_ret
15c8c     2D 00 64 FD | 	ret
15c90                 | 
15c90                 | ' 
15c90                 | ' '-------------------- on
15c90                 | ' 
15c90                 | ' sub do_on
15c90                 | _do_on
15c90     01 4A 05 F6 | 	mov	COUNT_, #1
15c94     A8 00 A0 FD | 	call	#pushregs_
15c98     18 F0 07 F1 | 	add	ptra, #24
15c9c     4A 00 00 FF 
15ca0     80 E4 05 F1 | 	add	objptr, ##38016
15ca4     F2 12 02 FB | 	rdlong	arg01, objptr
15ca8     09 FD 01 F6 | 	mov	result2, arg01
15cac     01 FC 65 F0 | 	shl	result2, #1
15cb0     09 FD 01 F1 | 	add	result2, arg01
15cb4     02 FC 65 F0 | 	shl	result2, #2
15cb8     03 00 00 FF 
15cbc     04 E4 85 F1 | 	sub	objptr, ##1540
15cc0     F2 FC 01 F1 | 	add	result2, objptr
15cc4     FE 12 02 FB | 	rdlong	arg01, result2
15cc8     14 4E 05 F1 | 	add	fp, #20
15ccc     A7 12 62 FC | 	wrlong	arg01, fp
15cd0     03 00 00 FF 
15cd4     04 E4 05 F1 | 	add	objptr, ##1540
15cd8     F2 12 02 FB | 	rdlong	arg01, objptr
15cdc     09 27 02 F6 | 	mov	local01, arg01
15ce0     01 26 66 F0 | 	shl	local01, #1
15ce4     09 27 02 F1 | 	add	local01, arg01
15ce8     02 26 66 F0 | 	shl	local01, #2
15cec     03 00 00 FF 
15cf0     04 E4 85 F1 | 	sub	objptr, ##1540
15cf4     F2 26 02 F1 | 	add	local01, objptr
15cf8     04 26 06 F1 | 	add	local01, #4
15cfc     13 27 02 FB | 	rdlong	local01, local01
15d00     08 4E 85 F1 | 	sub	fp, #8
15d04     A7 26 62 FC | 	wrlong	local01, fp
15d08     0C 4E 85 F1 | 	sub	fp, #12
15d0c     47 00 00 FF 
15d10     7C E4 85 F1 | 	sub	objptr, ##36476
15d14     68 6F BF FD | 	call	#_pop
15d18     FF 26 02 F6 | 	mov	local01, result3
15d1c     A7 FA 61 FC | 	wrlong	result1, fp
15d20     04 4E 05 F1 | 	add	fp, #4
15d24     A7 FC 61 FC | 	wrlong	result2, fp
15d28     04 4E 05 F1 | 	add	fp, #4
15d2c     A7 26 62 FC | 	wrlong	local01, fp
15d30     08 4E 85 F1 | 	sub	fp, #8
15d34     A7 12 02 F6 | 	mov	arg01, fp
15d38     28 71 BF FD | 	call	#_converttoint
15d3c     10 4E 05 F1 | 	add	fp, #16
15d40     A7 FA 61 FC | 	wrlong	result1, fp
15d44                 | ' 
15d44                 | ' numpar=compiledline(lineptr_e).result.uresult
15d44                 | ' skip=compiledline(lineptr_e).result.twowords(1)
15d44                 | ' t1=pop()
15d44                 | ' t=converttoint(t1)
15d44                 | ' if t<1 orelse t>numpar then return
15d44     10 4E 85 F1 | 	sub	fp, #16
15d48     01 FA 55 F2 | 	cmps	result1, #1 wc
15d4c     58 00 90 CD |  if_b	jmp	#LR__1820
15d50     10 4E 05 F1 | 	add	fp, #16
15d54     A7 26 02 FB | 	rdlong	local01, fp
15d58     04 4E 05 F1 | 	add	fp, #4
15d5c     A7 12 02 FB | 	rdlong	arg01, fp
15d60     14 4E 85 F1 | 	sub	fp, #20
15d64     09 27 5A F2 | 	cmps	local01, arg01 wcz
15d68     3C 00 90 1D |  if_a	jmp	#LR__1820
15d6c     10 4E 05 F1 | 	add	fp, #16
15d70     A7 26 02 FB | 	rdlong	local01, fp
15d74     01 26 86 F1 | 	sub	local01, #1
15d78     04 4E 85 F1 | 	sub	fp, #4
15d7c     A7 12 02 FB | 	rdlong	arg01, fp
15d80     13 13 02 FD | 	qmul	arg01, local01
15d84     4A 00 00 FF 
15d88     80 E4 05 F1 | 	add	objptr, ##38016
15d8c     F2 26 02 FB | 	rdlong	local01, objptr
15d90     0C 4E 85 F1 | 	sub	fp, #12
15d94     18 12 62 FD | 	getqx	arg01
15d98     09 27 02 F1 | 	add	local01, arg01
15d9c     F2 26 62 FC | 	wrlong	local01, objptr
15da0     4A 00 00 FF 
15da4     80 E4 85 F1 | 	sub	objptr, ##38016
15da8                 | LR__1820
15da8     A7 F0 03 F6 | 	mov	ptra, fp
15dac     B2 00 A0 FD | 	call	#popregs_
15db0                 | _do_on_ret
15db0     2D 00 64 FD | 	ret
15db4                 | 
15db4                 | ' 
15db4                 | ' '-------------------- open
15db4                 | ' 
15db4                 | ' sub do_open
15db4                 | _do_open
15db4     02 4A 05 F6 | 	mov	COUNT_, #2
15db8     A8 00 A0 FD | 	call	#pushregs_
15dbc     20 F0 07 F1 | 	add	ptra, #32
15dc0     4A 00 00 FF 
15dc4     80 E4 05 F1 | 	add	objptr, ##38016
15dc8     F2 16 02 FB | 	rdlong	arg03, objptr
15dcc     0B 15 02 F6 | 	mov	arg02, arg03
15dd0     01 14 66 F0 | 	shl	arg02, #1
15dd4     0B 15 02 F1 | 	add	arg02, arg03
15dd8     02 14 66 F0 | 	shl	arg02, #2
15ddc     03 00 00 FF 
15de0     04 E4 85 F1 | 	sub	objptr, ##1540
15de4     F2 14 02 F1 | 	add	arg02, objptr
15de8     0A 17 02 FB | 	rdlong	arg03, arg02
15dec     10 4E 05 F1 | 	add	fp, #16
15df0     A7 16 62 FC | 	wrlong	arg03, fp
15df4     10 4E 85 F1 | 	sub	fp, #16
15df8     47 00 00 FF 
15dfc     7C E4 85 F1 | 	sub	objptr, ##36476
15e00     7C 6E BF FD | 	call	#_pop
15e04     FF 16 02 F6 | 	mov	arg03, result3
15e08     A7 FA 61 FC | 	wrlong	result1, fp
15e0c     04 4E 05 F1 | 	add	fp, #4
15e10     A7 FC 61 FC | 	wrlong	result2, fp
15e14     04 4E 05 F1 | 	add	fp, #4
15e18     A7 16 62 FC | 	wrlong	arg03, fp
15e1c                 | ' 
15e1c                 | ' numpar=compiledline(lineptr_e).result.uresult
15e1c                 | ' 
15e1c                 | ' t1=pop()
15e1c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15e1c     08 4E 85 F1 | 	sub	fp, #8
15e20     2B 16 0E F2 | 	cmp	arg03, #43 wz
15e24     18 00 90 5D |  if_ne	jmp	#LR__1830
15e28     A7 12 02 FB | 	rdlong	arg01, fp
15e2c     C8 6F BF FD | 	call	#_convertstring
15e30     A7 FA 61 FC | 	wrlong	result1, fp
15e34     08 4E 05 F1 | 	add	fp, #8
15e38     A7 3E 68 FC | 	wrlong	#31, fp
15e3c     08 4E 85 F1 | 	sub	fp, #8
15e40                 | LR__1830
15e40                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
15e40     08 4E 05 F1 | 	add	fp, #8
15e44     A7 16 02 FB | 	rdlong	arg03, fp
15e48     08 4E 85 F1 | 	sub	fp, #8
15e4c     1F 16 0E F2 | 	cmp	arg03, #31 wz
15e50     44 00 90 AD |  if_e	jmp	#LR__1831
15e54     00 12 06 F6 | 	mov	arg01, #0
15e58     54 58 B1 FD | 	call	#__system___getiolock_0599
15e5c     FD 12 02 F6 | 	mov	arg01, result1
15e60     24 FB B0 FD | 	call	#__system___lockmem
15e64     AF 01 00 FF 
15e68     A6 14 06 F6 | 	mov	arg02, ##@LR__5900
15e6c     00 12 06 F6 | 	mov	arg01, #0
15e70     00 16 06 F6 | 	mov	arg03, #0
15e74     04 08 B1 FD | 	call	#__system___basic_print_string
15e78     00 12 06 F6 | 	mov	arg01, #0
15e7c     0A 14 06 F6 | 	mov	arg02, #10
15e80     00 16 06 F6 | 	mov	arg03, #0
15e84     9C 07 B1 FD | 	call	#__system___basic_print_char
15e88     00 12 06 F6 | 	mov	arg01, #0
15e8c     20 58 B1 FD | 	call	#__system___getiolock_0599
15e90     FD 00 68 FC | 	wrlong	#0, result1
15e94     28 02 90 FD | 	jmp	#LR__1842
15e98                 | LR__1831
15e98     A7 16 02 FB | 	rdlong	arg03, fp
15e9c     0C 4E 05 F1 | 	add	fp, #12
15ea0     A7 16 62 FC | 	wrlong	arg03, fp
15ea4     0C 4E 85 F1 | 	sub	fp, #12
15ea8     D4 6D BF FD | 	call	#_pop
15eac     FF 16 02 F6 | 	mov	arg03, result3
15eb0     A7 FA 61 FC | 	wrlong	result1, fp
15eb4     04 4E 05 F1 | 	add	fp, #4
15eb8     A7 FC 61 FC | 	wrlong	result2, fp
15ebc     04 4E 05 F1 | 	add	fp, #4
15ec0     A7 16 62 FC | 	wrlong	arg03, fp
15ec4                 | ' filename=t1.result.sresult
15ec4                 | ' t1=pop()
15ec4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15ec4     08 4E 85 F1 | 	sub	fp, #8
15ec8     2B 16 0E F2 | 	cmp	arg03, #43 wz
15ecc     18 00 90 5D |  if_ne	jmp	#LR__1832
15ed0     A7 12 02 FB | 	rdlong	arg01, fp
15ed4     20 6F BF FD | 	call	#_convertstring
15ed8     A7 FA 61 FC | 	wrlong	result1, fp
15edc     08 4E 05 F1 | 	add	fp, #8
15ee0     A7 3E 68 FC | 	wrlong	#31, fp
15ee4     08 4E 85 F1 | 	sub	fp, #8
15ee8                 | LR__1832
15ee8     14 4E 05 F1 | 	add	fp, #20
15eec     A7 00 68 FC | 	wrlong	#0, fp
15ef0                 | ' mode=0
15ef0                 | ' if t1.result_type=result_string then
15ef0     0C 4E 85 F1 | 	sub	fp, #12
15ef4     A7 14 02 FB | 	rdlong	arg02, fp
15ef8     08 4E 85 F1 | 	sub	fp, #8
15efc     1F 14 0E F2 | 	cmp	arg02, #31 wz
15f00     64 00 90 5D |  if_ne	jmp	#LR__1833
15f04                 | '   if t1.result.sresult="read" then mode=1
15f04     A7 12 02 FB | 	rdlong	arg01, fp
15f08     AF 01 00 FF 
15f0c     B8 14 06 F6 | 	mov	arg02, ##@LR__5901
15f10     9C FA B0 FD | 	call	#__system___string_cmp
15f14     00 FA 0D F2 | 	cmp	result1, #0 wz
15f18     14 4E 05 A1 |  if_e	add	fp, #20
15f1c     A7 02 68 AC |  if_e	wrlong	#1, fp
15f20     14 4E 85 A1 |  if_e	sub	fp, #20
15f24                 | '   if t1.result.sresult="write" then mode=2
15f24     A7 12 02 FB | 	rdlong	arg01, fp
15f28     AF 01 00 FF 
15f2c     BD 14 06 F6 | 	mov	arg02, ##@LR__5902
15f30     7C FA B0 FD | 	call	#__system___string_cmp
15f34     00 FA 0D F2 | 	cmp	result1, #0 wz
15f38     14 4E 05 A1 |  if_e	add	fp, #20
15f3c     A7 04 68 AC |  if_e	wrlong	#2, fp
15f40     14 4E 85 A1 |  if_e	sub	fp, #20
15f44                 | '   if t1.result.sresult="append" then mode=4
15f44     A7 12 02 FB | 	rdlong	arg01, fp
15f48     AF 01 00 FF 
15f4c     C3 14 06 F6 | 	mov	arg02, ##@LR__5903
15f50     5C FA B0 FD | 	call	#__system___string_cmp
15f54     00 FA 0D F2 | 	cmp	result1, #0 wz
15f58     14 4E 05 A1 |  if_e	add	fp, #20
15f5c     A7 08 68 AC |  if_e	wrlong	#4, fp
15f60     14 4E 85 A1 |  if_e	sub	fp, #20
15f64     14 00 90 FD | 	jmp	#LR__1834
15f68                 | LR__1833
15f68     A7 12 02 F6 | 	mov	arg01, fp
15f6c     F4 6E BF FD | 	call	#_converttoint
15f70     14 4E 05 F1 | 	add	fp, #20
15f74     A7 FA 61 FC | 	wrlong	result1, fp
15f78     14 4E 85 F1 | 	sub	fp, #20
15f7c                 | LR__1834
15f7c     00 6D BF FD | 	call	#_pop
15f80     FF 16 02 F6 | 	mov	arg03, result3
15f84     A7 FA 61 FC | 	wrlong	result1, fp
15f88     04 4E 05 F1 | 	add	fp, #4
15f8c     A7 FC 61 FC | 	wrlong	result2, fp
15f90     04 4E 05 F1 | 	add	fp, #4
15f94     A7 16 62 FC | 	wrlong	arg03, fp
15f98                 | ' t1=pop()
15f98                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
15f98     08 4E 85 F1 | 	sub	fp, #8
15f9c     2C 16 0E F2 | 	cmp	arg03, #44 wz
15fa0     44 00 90 AD |  if_e	jmp	#LR__1835
15fa4     00 12 06 F6 | 	mov	arg01, #0
15fa8     04 57 B1 FD | 	call	#__system___getiolock_0599
15fac     FD 12 02 F6 | 	mov	arg01, result1
15fb0     D4 F9 B0 FD | 	call	#__system___lockmem
15fb4     AF 01 00 FF 
15fb8     CA 14 06 F6 | 	mov	arg02, ##@LR__5904
15fbc     00 12 06 F6 | 	mov	arg01, #0
15fc0     00 16 06 F6 | 	mov	arg03, #0
15fc4     B4 06 B1 FD | 	call	#__system___basic_print_string
15fc8     00 12 06 F6 | 	mov	arg01, #0
15fcc     0A 14 06 F6 | 	mov	arg02, #10
15fd0     00 16 06 F6 | 	mov	arg03, #0
15fd4     4C 06 B1 FD | 	call	#__system___basic_print_char
15fd8     00 12 06 F6 | 	mov	arg01, #0
15fdc     D0 56 B1 FD | 	call	#__system___getiolock_0599
15fe0     FD 00 68 FC | 	wrlong	#0, result1
15fe4     D8 00 90 FD | 	jmp	#LR__1842
15fe8                 | LR__1835
15fe8     A7 26 02 FB | 	rdlong	local01, fp
15fec     18 4E 05 F1 | 	add	fp, #24
15ff0     A7 26 62 FC | 	wrlong	local01, fp
15ff4                 | ' channel  = t1.result.iresult
15ff4                 | ' select case  mode
15ff4     04 4E 85 F1 | 	sub	fp, #4
15ff8     A7 28 02 FB | 	rdlong	local02, fp
15ffc     14 4E 85 F1 | 	sub	fp, #20
16000     01 28 86 F1 | 	sub	local02, #1
16004     04 28 26 F3 | 	fle	local02, #4
16008     30 28 62 FD | 	jmprel	local02
1600c                 | LR__1836
1600c     10 00 90 FD | 	jmp	#LR__1837
16010     2C 00 90 FD | 	jmp	#LR__1838
16014     68 00 90 FD | 	jmp	#LR__1840
16018     44 00 90 FD | 	jmp	#LR__1839
1601c     60 00 90 FD | 	jmp	#LR__1840
16020                 | LR__1837
16020     18 4E 05 F1 | 	add	fp, #24
16024     A7 12 02 FB | 	rdlong	arg01, fp
16028     0C 4E 85 F1 | 	sub	fp, #12
1602c     A7 14 02 FB | 	rdlong	arg02, fp
16030     0C 4E 85 F1 | 	sub	fp, #12
16034     00 16 06 F6 | 	mov	arg03, #0
16038     50 05 B1 FD | 	call	#__system___basic_open_string
1603c     80 00 90 FD | 	jmp	#LR__1841
16040                 | LR__1838
16040     18 4E 05 F1 | 	add	fp, #24
16044     A7 12 02 FB | 	rdlong	arg01, fp
16048     0C 4E 85 F1 | 	sub	fp, #12
1604c     A7 14 02 FB | 	rdlong	arg02, fp
16050     0C 4E 85 F1 | 	sub	fp, #12
16054     0D 16 06 F6 | 	mov	arg03, #13
16058     30 05 B1 FD | 	call	#__system___basic_open_string
1605c     60 00 90 FD | 	jmp	#LR__1841
16060                 | LR__1839
16060     18 4E 05 F1 | 	add	fp, #24
16064     A7 12 02 FB | 	rdlong	arg01, fp
16068     0C 4E 85 F1 | 	sub	fp, #12
1606c     A7 14 02 FB | 	rdlong	arg02, fp
16070     0C 4E 85 F1 | 	sub	fp, #12
16074     25 16 06 F6 | 	mov	arg03, #37
16078     10 05 B1 FD | 	call	#__system___basic_open_string
1607c     40 00 90 FD | 	jmp	#LR__1841
16080                 | LR__1840
16080     00 12 06 F6 | 	mov	arg01, #0
16084     28 56 B1 FD | 	call	#__system___getiolock_0599
16088     FD 12 02 F6 | 	mov	arg01, result1
1608c     F8 F8 B0 FD | 	call	#__system___lockmem
16090     AF 01 00 FF 
16094     DC 14 06 F6 | 	mov	arg02, ##@LR__5905
16098     00 12 06 F6 | 	mov	arg01, #0
1609c     00 16 06 F6 | 	mov	arg03, #0
160a0     D8 05 B1 FD | 	call	#__system___basic_print_string
160a4     00 12 06 F6 | 	mov	arg01, #0
160a8     0A 14 06 F6 | 	mov	arg02, #10
160ac     00 16 06 F6 | 	mov	arg03, #0
160b0     70 05 B1 FD | 	call	#__system___basic_print_char
160b4     00 12 06 F6 | 	mov	arg01, #0
160b8     F4 55 B1 FD | 	call	#__system___getiolock_0599
160bc     FD 00 68 FC | 	wrlong	#0, result1
160c0                 | LR__1841
160c0                 | LR__1842
160c0     A7 F0 03 F6 | 	mov	ptra, fp
160c4     B2 00 A0 FD | 	call	#popregs_
160c8                 | _do_open_ret
160c8     2D 00 64 FD | 	ret
160cc                 | 
160cc                 | ' 
160cc                 | ' ' ------------------ padx
160cc                 | ' 
160cc                 | ' sub do_padh
160cc                 | _do_padh
160cc     01 4A 05 F6 | 	mov	COUNT_, #1
160d0     A8 00 A0 FD | 	call	#pushregs_
160d4     14 F0 07 F1 | 	add	ptra, #20
160d8     4A 00 00 FF 
160dc     80 E4 05 F1 | 	add	objptr, ##38016
160e0     F2 26 02 FB | 	rdlong	local01, objptr
160e4     13 17 02 F6 | 	mov	arg03, local01
160e8     01 16 66 F0 | 	shl	arg03, #1
160ec     13 17 02 F1 | 	add	arg03, local01
160f0     02 16 66 F0 | 	shl	arg03, #2
160f4     03 00 00 FF 
160f8     04 E4 85 F1 | 	sub	objptr, ##1540
160fc     F2 16 02 F1 | 	add	arg03, objptr
16100     0B 17 02 FB | 	rdlong	arg03, arg03
16104     0C 4E 05 F1 | 	add	fp, #12
16108     A7 16 62 FC | 	wrlong	arg03, fp
1610c                 | ' 
1610c                 | ' numpar=compiledline(lineptr_e).result.uresult
1610c                 | ' if numpar>1 then print "padh: "; : printerror(39) : return
1610c     0C 4E 85 F1 | 	sub	fp, #12
16110     02 16 16 F2 | 	cmp	arg03, #2 wc
16114     47 00 00 FF 
16118     7C E4 85 F1 | 	sub	objptr, ##36476
1611c     40 00 90 CD |  if_b	jmp	#LR__1850
16120     00 12 06 F6 | 	mov	arg01, #0
16124     88 55 B1 FD | 	call	#__system___getiolock_0599
16128     FD 12 02 F6 | 	mov	arg01, result1
1612c     58 F8 B0 FD | 	call	#__system___lockmem
16130     AF 01 00 FF 
16134     EF 14 06 F6 | 	mov	arg02, ##@LR__5906
16138     00 12 06 F6 | 	mov	arg01, #0
1613c     00 16 06 F6 | 	mov	arg03, #0
16140     38 05 B1 FD | 	call	#__system___basic_print_string
16144     00 12 06 F6 | 	mov	arg01, #0
16148     64 55 B1 FD | 	call	#__system___getiolock_0599
1614c     FD 00 68 FC | 	wrlong	#0, result1
16150     27 12 06 F6 | 	mov	arg01, #39
16154     00 14 06 F6 | 	mov	arg02, #0
16158     40 BE B0 FD | 	call	#_printerror
1615c     F0 00 90 FD | 	jmp	#LR__1854
16160                 | LR__1850
16160                 | ' if numpar=0 then 
16160     0C 4E 05 F1 | 	add	fp, #12
16164     A7 FE 09 FB | 	rdlong	result3, fp wz
16168     0C 4E 85 F1 | 	sub	fp, #12
1616c     30 00 90 5D |  if_ne	jmp	#LR__1851
16170     51 00 00 FF 
16174     AC E5 05 F1 | 	add	objptr, ##41900
16178     F2 26 02 FB | 	rdlong	local01, objptr
1617c     51 00 00 FF 
16180     AC E5 85 F1 | 	sub	objptr, ##41900
16184     A7 26 62 FC | 	wrlong	local01, fp
16188     08 4E 05 F1 | 	add	fp, #8
1618c     A7 38 68 FC | 	wrlong	#28, fp
16190     08 4E 85 F1 | 	sub	fp, #8
16194     A7 12 02 F6 | 	mov	arg01, fp
16198     7C 6B BF FD | 	call	#_push
1619c                 | '   t1.result.uresult=padh(0): t1.result_type=result_int : push t1 : return
1619c     B0 00 90 FD | 	jmp	#LR__1854
161a0                 | LR__1851
161a0     DC 6A BF FD | 	call	#_pop
161a4     A7 FA 61 FC | 	wrlong	result1, fp
161a8     04 4E 05 F1 | 	add	fp, #4
161ac     A7 FC 61 FC | 	wrlong	result2, fp
161b0     04 4E 05 F1 | 	add	fp, #4
161b4     A7 FE 61 FC | 	wrlong	result3, fp
161b8                 | ' t1=pop()
161b8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
161b8     08 4E 85 F1 | 	sub	fp, #8
161bc     1C FE 0D F2 | 	cmp	result3, #28 wz
161c0     08 4E 05 51 |  if_ne	add	fp, #8
161c4     A7 26 02 5B |  if_ne	rdlong	local01, fp
161c8     08 4E 85 51 |  if_ne	sub	fp, #8
161cc     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
161d0     70 00 90 5D |  if_ne	jmp	#LR__1853
161d4     A7 26 02 FB | 	rdlong	local01, fp
161d8     52 00 00 FF 
161dc     B4 E4 05 F1 | 	add	objptr, ##42164
161e0     F2 26 62 FC | 	wrlong	local01, objptr
161e4                 | '   q=t1.result.uresult
161e4                 | '   if q<7 then 
161e4     52 00 00 FF 
161e8     B4 E4 85 F1 | 	sub	objptr, ##42164
161ec     07 26 56 F2 | 	cmps	local01, #7 wc
161f0     40 00 90 3D |  if_ae	jmp	#LR__1852
161f4     52 00 00 FF 
161f8     B4 E4 05 F1 | 	add	objptr, ##42164
161fc     F2 26 02 FB | 	rdlong	local01, objptr
16200     02 26 66 F0 | 	shl	local01, #2
16204     08 E5 85 F1 | 	sub	objptr, #264
16208     F2 26 02 F1 | 	add	local01, objptr
1620c     13 27 02 FB | 	rdlong	local01, local01
16210     A7 26 62 FC | 	wrlong	local01, fp
16214     08 4E 05 F1 | 	add	fp, #8
16218     A7 38 68 FC | 	wrlong	#28, fp
1621c     08 4E 85 F1 | 	sub	fp, #8
16220     A7 12 02 F6 | 	mov	arg01, fp
16224     51 00 00 FF 
16228     AC E5 85 F1 | 	sub	objptr, ##41900
1622c     E8 6A BF FD | 	call	#_push
16230                 | '     t1.result.uresult=padh(q): t1.result_type=result_int : push t1 : return 
16230     1C 00 90 FD | 	jmp	#LR__1854
16234                 | LR__1852
16234     29 12 06 F6 | 	mov	arg01, #41
16238     00 14 06 F6 | 	mov	arg02, #0
1623c     5C BD B0 FD | 	call	#_printerror
16240                 | '      printerror(41) : return
16240     0C 00 90 FD | 	jmp	#LR__1854
16244                 | LR__1853
16244     29 12 06 F6 | 	mov	arg01, #41
16248     00 14 06 F6 | 	mov	arg02, #0
1624c     4C BD B0 FD | 	call	#_printerror
16250                 | LR__1854
16250     A7 F0 03 F6 | 	mov	ptra, fp
16254     B2 00 A0 FD | 	call	#popregs_
16258                 | _do_padh_ret
16258     2D 00 64 FD | 	ret
1625c                 | 
1625c                 | ' 
1625c                 | ' ' ------------------ padx
1625c                 | ' 
1625c                 | ' sub do_padx
1625c                 | _do_padx
1625c     02 4A 05 F6 | 	mov	COUNT_, #2
16260     A8 00 A0 FD | 	call	#pushregs_
16264     14 F0 07 F1 | 	add	ptra, #20
16268     4A 00 00 FF 
1626c     80 E4 05 F1 | 	add	objptr, ##38016
16270     F2 26 02 FB | 	rdlong	local01, objptr
16274     13 17 02 F6 | 	mov	arg03, local01
16278     01 16 66 F0 | 	shl	arg03, #1
1627c     13 17 02 F1 | 	add	arg03, local01
16280     02 16 66 F0 | 	shl	arg03, #2
16284     03 00 00 FF 
16288     04 E4 85 F1 | 	sub	objptr, ##1540
1628c     F2 16 02 F1 | 	add	arg03, objptr
16290     0B 17 02 FB | 	rdlong	arg03, arg03
16294     0C 4E 05 F1 | 	add	fp, #12
16298     A7 16 62 FC | 	wrlong	arg03, fp
1629c                 | ' 
1629c                 | ' numpar=compiledline(lineptr_e).result.uresult
1629c                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
1629c     0C 4E 85 F1 | 	sub	fp, #12
162a0     02 16 16 F2 | 	cmp	arg03, #2 wc
162a4     47 00 00 FF 
162a8     7C E4 85 F1 | 	sub	objptr, ##36476
162ac     40 00 90 CD |  if_b	jmp	#LR__1860
162b0     00 12 06 F6 | 	mov	arg01, #0
162b4     F8 53 B1 FD | 	call	#__system___getiolock_0599
162b8     FD 12 02 F6 | 	mov	arg01, result1
162bc     C8 F6 B0 FD | 	call	#__system___lockmem
162c0     AF 01 00 FF 
162c4     F6 14 06 F6 | 	mov	arg02, ##@LR__5907
162c8     00 12 06 F6 | 	mov	arg01, #0
162cc     00 16 06 F6 | 	mov	arg03, #0
162d0     A8 03 B1 FD | 	call	#__system___basic_print_string
162d4     00 12 06 F6 | 	mov	arg01, #0
162d8     D4 53 B1 FD | 	call	#__system___getiolock_0599
162dc     FD 00 68 FC | 	wrlong	#0, result1
162e0     27 12 06 F6 | 	mov	arg01, #39
162e4     00 14 06 F6 | 	mov	arg02, #0
162e8     B0 BC B0 FD | 	call	#_printerror
162ec     E0 01 90 FD | 	jmp	#LR__1864
162f0                 | LR__1860
162f0                 | ' if numpar=0 then 
162f0     0C 4E 05 F1 | 	add	fp, #12
162f4     A7 FE 09 FB | 	rdlong	result3, fp wz
162f8     0C 4E 85 F1 | 	sub	fp, #12
162fc     A8 00 90 5D |  if_ne	jmp	#LR__1861
16300     00 C0 1B FF 
16304     00 26 06 F6 | 	mov	local01, ##931135488
16308     51 00 00 FF 
1630c     58 E5 05 F1 | 	add	objptr, ##41816
16310     F2 12 02 FB | 	rdlong	arg01, objptr
16314     51 00 00 FF 
16318     58 E5 85 F1 | 	sub	objptr, ##41816
1631c     09 13 52 F6 | 	abs	arg01, arg01 wc
16320     1F 28 C6 C9 |  if_b	decod	local02, #31
16324     00 28 06 36 |  if_ae	mov	local02, #0
16328     D0 20 B1 FD | 	call	#__system___float_fromuns
1632c     14 FB 61 F5 | 	xor	result1, local02
16330     FD 12 02 F6 | 	mov	arg01, result1
16334     FF 7F 23 FF 
16338     00 14 06 F6 | 	mov	arg02, ##1191181824
1633c     C4 26 B1 FD | 	call	#__system___float_div
16340     FD 14 02 F6 | 	mov	arg02, result1
16344     13 13 02 F6 | 	mov	arg01, local01
16348     E4 20 B1 FD | 	call	#__system___float_add
1634c     10 4E 05 F1 | 	add	fp, #16
16350     A7 FA 61 FC | 	wrlong	result1, fp
16354                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16354     10 4E 85 F1 | 	sub	fp, #16
16358     1F FA 05 F4 | 	bitl	result1, #31
1635c     FD 12 02 F6 | 	mov	arg01, result1
16360     89 41 1D FF 
16364     6F 14 06 F6 | 	mov	arg02, ##981668463
16368     01 16 06 F6 | 	mov	arg03, #1
1636c     C4 28 B1 FD | 	call	#__system___float_cmp
16370     00 FA 55 F2 | 	cmps	result1, #0 wc
16374     10 4E 05 C1 |  if_b	add	fp, #16
16378     A7 00 68 CC |  if_b	wrlong	#0, fp
1637c     10 4E 85 C1 |  if_b	sub	fp, #16
16380     10 4E 05 F1 | 	add	fp, #16
16384     A7 26 02 FB | 	rdlong	local01, fp
16388     10 4E 85 F1 | 	sub	fp, #16
1638c     A7 26 62 FC | 	wrlong	local01, fp
16390     08 4E 05 F1 | 	add	fp, #8
16394     A7 3C 68 FC | 	wrlong	#30, fp
16398     08 4E 85 F1 | 	sub	fp, #8
1639c     A7 12 02 F6 | 	mov	arg01, fp
163a0     74 69 BF FD | 	call	#_push
163a4                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
163a4     28 01 90 FD | 	jmp	#LR__1864
163a8                 | LR__1861
163a8     D4 68 BF FD | 	call	#_pop
163ac     A7 FA 61 FC | 	wrlong	result1, fp
163b0     04 4E 05 F1 | 	add	fp, #4
163b4     A7 FC 61 FC | 	wrlong	result2, fp
163b8     04 4E 05 F1 | 	add	fp, #4
163bc     A7 FE 61 FC | 	wrlong	result3, fp
163c0                 | ' t1=pop()
163c0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
163c0     08 4E 85 F1 | 	sub	fp, #8
163c4     1C FE 0D F2 | 	cmp	result3, #28 wz
163c8     08 4E 05 51 |  if_ne	add	fp, #8
163cc     A7 26 02 5B |  if_ne	rdlong	local01, fp
163d0     08 4E 85 51 |  if_ne	sub	fp, #8
163d4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
163d8     E8 00 90 5D |  if_ne	jmp	#LR__1863
163dc     A7 26 02 FB | 	rdlong	local01, fp
163e0     52 00 00 FF 
163e4     B4 E4 05 F1 | 	add	objptr, ##42164
163e8     F2 26 62 FC | 	wrlong	local01, objptr
163ec                 | '   q=t1.result.uresult
163ec                 | '   if q<7 then 
163ec     52 00 00 FF 
163f0     B4 E4 85 F1 | 	sub	objptr, ##42164
163f4     07 26 56 F2 | 	cmps	local01, #7 wc
163f8     B8 00 90 3D |  if_ae	jmp	#LR__1862
163fc     00 C0 1B FF 
16400     00 26 06 F6 | 	mov	local01, ##931135488
16404     52 00 00 FF 
16408     B4 E4 05 F1 | 	add	objptr, ##42164
1640c     F2 16 02 FB | 	rdlong	arg03, objptr
16410     02 16 66 F0 | 	shl	arg03, #2
16414     5C E5 85 F1 | 	sub	objptr, #348
16418     F2 16 02 F1 | 	add	arg03, objptr
1641c     0B 13 02 FB | 	rdlong	arg01, arg03
16420     51 00 00 FF 
16424     58 E5 85 F1 | 	sub	objptr, ##41816
16428     09 13 52 F6 | 	abs	arg01, arg01 wc
1642c     1F 28 C6 C9 |  if_b	decod	local02, #31
16430     00 28 06 36 |  if_ae	mov	local02, #0
16434     C4 1F B1 FD | 	call	#__system___float_fromuns
16438     14 FB 61 F5 | 	xor	result1, local02
1643c     FD 12 02 F6 | 	mov	arg01, result1
16440     FF 7F 23 FF 
16444     00 14 06 F6 | 	mov	arg02, ##1191181824
16448     B8 25 B1 FD | 	call	#__system___float_div
1644c     FD 14 02 F6 | 	mov	arg02, result1
16450     13 13 02 F6 | 	mov	arg01, local01
16454     D8 1F B1 FD | 	call	#__system___float_add
16458     10 4E 05 F1 | 	add	fp, #16
1645c     A7 FA 61 FC | 	wrlong	result1, fp
16460                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16460     10 4E 85 F1 | 	sub	fp, #16
16464     1F FA 05 F4 | 	bitl	result1, #31
16468     FD 12 02 F6 | 	mov	arg01, result1
1646c     89 41 1D FF 
16470     6F 14 06 F6 | 	mov	arg02, ##981668463
16474     01 16 06 F6 | 	mov	arg03, #1
16478     B8 27 B1 FD | 	call	#__system___float_cmp
1647c     00 FA 55 F2 | 	cmps	result1, #0 wc
16480     10 4E 05 C1 |  if_b	add	fp, #16
16484     A7 00 68 CC |  if_b	wrlong	#0, fp
16488     10 4E 85 C1 |  if_b	sub	fp, #16
1648c     10 4E 05 F1 | 	add	fp, #16
16490     A7 26 02 FB | 	rdlong	local01, fp
16494     10 4E 85 F1 | 	sub	fp, #16
16498     A7 26 62 FC | 	wrlong	local01, fp
1649c     08 4E 05 F1 | 	add	fp, #8
164a0     A7 3C 68 FC | 	wrlong	#30, fp
164a4     08 4E 85 F1 | 	sub	fp, #8
164a8     A7 12 02 F6 | 	mov	arg01, fp
164ac     68 68 BF FD | 	call	#_push
164b0                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
164b0     1C 00 90 FD | 	jmp	#LR__1864
164b4                 | LR__1862
164b4     29 12 06 F6 | 	mov	arg01, #41
164b8     00 14 06 F6 | 	mov	arg02, #0
164bc     DC BA B0 FD | 	call	#_printerror
164c0                 | '      printerror(41) : return
164c0     0C 00 90 FD | 	jmp	#LR__1864
164c4                 | LR__1863
164c4     29 12 06 F6 | 	mov	arg01, #41
164c8     00 14 06 F6 | 	mov	arg02, #0
164cc     CC BA B0 FD | 	call	#_printerror
164d0                 | LR__1864
164d0     A7 F0 03 F6 | 	mov	ptra, fp
164d4     B2 00 A0 FD | 	call	#popregs_
164d8                 | _do_padx_ret
164d8     2D 00 64 FD | 	ret
164dc                 | 
164dc                 | ' 
164dc                 | ' ' ------------------ pady
164dc                 | ' 
164dc                 | ' sub do_pady
164dc                 | _do_pady
164dc     02 4A 05 F6 | 	mov	COUNT_, #2
164e0     A8 00 A0 FD | 	call	#pushregs_
164e4     14 F0 07 F1 | 	add	ptra, #20
164e8     4A 00 00 FF 
164ec     80 E4 05 F1 | 	add	objptr, ##38016
164f0     F2 26 02 FB | 	rdlong	local01, objptr
164f4     13 17 02 F6 | 	mov	arg03, local01
164f8     01 16 66 F0 | 	shl	arg03, #1
164fc     13 17 02 F1 | 	add	arg03, local01
16500     02 16 66 F0 | 	shl	arg03, #2
16504     03 00 00 FF 
16508     04 E4 85 F1 | 	sub	objptr, ##1540
1650c     F2 16 02 F1 | 	add	arg03, objptr
16510     0B 17 02 FB | 	rdlong	arg03, arg03
16514     0C 4E 05 F1 | 	add	fp, #12
16518     A7 16 62 FC | 	wrlong	arg03, fp
1651c                 | ' 
1651c                 | ' numpar=compiledline(lineptr_e).result.uresult
1651c                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
1651c     0C 4E 85 F1 | 	sub	fp, #12
16520     02 16 16 F2 | 	cmp	arg03, #2 wc
16524     47 00 00 FF 
16528     7C E4 85 F1 | 	sub	objptr, ##36476
1652c     40 00 90 CD |  if_b	jmp	#LR__1870
16530     00 12 06 F6 | 	mov	arg01, #0
16534     78 51 B1 FD | 	call	#__system___getiolock_0599
16538     FD 12 02 F6 | 	mov	arg01, result1
1653c     48 F4 B0 FD | 	call	#__system___lockmem
16540     AF 01 00 FF 
16544     FD 14 06 F6 | 	mov	arg02, ##@LR__5908
16548     00 12 06 F6 | 	mov	arg01, #0
1654c     00 16 06 F6 | 	mov	arg03, #0
16550     28 01 B1 FD | 	call	#__system___basic_print_string
16554     00 12 06 F6 | 	mov	arg01, #0
16558     54 51 B1 FD | 	call	#__system___getiolock_0599
1655c     FD 00 68 FC | 	wrlong	#0, result1
16560     27 12 06 F6 | 	mov	arg01, #39
16564     00 14 06 F6 | 	mov	arg02, #0
16568     30 BA B0 FD | 	call	#_printerror
1656c     E0 01 90 FD | 	jmp	#LR__1874
16570                 | LR__1870
16570                 | ' if numpar=0 then 
16570     0C 4E 05 F1 | 	add	fp, #12
16574     A7 FE 09 FB | 	rdlong	result3, fp wz
16578     0C 4E 85 F1 | 	sub	fp, #12
1657c     A8 00 90 5D |  if_ne	jmp	#LR__1871
16580     00 C0 1B FF 
16584     00 26 06 F6 | 	mov	local01, ##931135488
16588     51 00 00 FF 
1658c     74 E5 05 F1 | 	add	objptr, ##41844
16590     F2 12 02 FB | 	rdlong	arg01, objptr
16594     51 00 00 FF 
16598     74 E5 85 F1 | 	sub	objptr, ##41844
1659c     09 13 52 F6 | 	abs	arg01, arg01 wc
165a0     1F 28 C6 C9 |  if_b	decod	local02, #31
165a4     00 28 06 36 |  if_ae	mov	local02, #0
165a8     50 1E B1 FD | 	call	#__system___float_fromuns
165ac     14 FB 61 F5 | 	xor	result1, local02
165b0     FD 12 02 F6 | 	mov	arg01, result1
165b4     FF 7F 23 FF 
165b8     00 14 06 F6 | 	mov	arg02, ##1191181824
165bc     44 24 B1 FD | 	call	#__system___float_div
165c0     FD 14 02 F6 | 	mov	arg02, result1
165c4     13 13 02 F6 | 	mov	arg01, local01
165c8     64 1E B1 FD | 	call	#__system___float_add
165cc     10 4E 05 F1 | 	add	fp, #16
165d0     A7 FA 61 FC | 	wrlong	result1, fp
165d4                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
165d4     10 4E 85 F1 | 	sub	fp, #16
165d8     1F FA 05 F4 | 	bitl	result1, #31
165dc     FD 12 02 F6 | 	mov	arg01, result1
165e0     89 41 1D FF 
165e4     6F 14 06 F6 | 	mov	arg02, ##981668463
165e8     01 16 06 F6 | 	mov	arg03, #1
165ec     44 26 B1 FD | 	call	#__system___float_cmp
165f0     00 FA 55 F2 | 	cmps	result1, #0 wc
165f4     10 4E 05 C1 |  if_b	add	fp, #16
165f8     A7 00 68 CC |  if_b	wrlong	#0, fp
165fc     10 4E 85 C1 |  if_b	sub	fp, #16
16600     10 4E 05 F1 | 	add	fp, #16
16604     A7 26 02 FB | 	rdlong	local01, fp
16608     10 4E 85 F1 | 	sub	fp, #16
1660c     A7 26 62 FC | 	wrlong	local01, fp
16610     08 4E 05 F1 | 	add	fp, #8
16614     A7 3C 68 FC | 	wrlong	#30, fp
16618     08 4E 85 F1 | 	sub	fp, #8
1661c     A7 12 02 F6 | 	mov	arg01, fp
16620     F4 66 BF FD | 	call	#_push
16624                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16624     28 01 90 FD | 	jmp	#LR__1874
16628                 | LR__1871
16628     54 66 BF FD | 	call	#_pop
1662c     A7 FA 61 FC | 	wrlong	result1, fp
16630     04 4E 05 F1 | 	add	fp, #4
16634     A7 FC 61 FC | 	wrlong	result2, fp
16638     04 4E 05 F1 | 	add	fp, #4
1663c     A7 FE 61 FC | 	wrlong	result3, fp
16640                 | ' t1=pop()
16640                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16640     08 4E 85 F1 | 	sub	fp, #8
16644     1C FE 0D F2 | 	cmp	result3, #28 wz
16648     08 4E 05 51 |  if_ne	add	fp, #8
1664c     A7 26 02 5B |  if_ne	rdlong	local01, fp
16650     08 4E 85 51 |  if_ne	sub	fp, #8
16654     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16658     E8 00 90 5D |  if_ne	jmp	#LR__1873
1665c     A7 26 02 FB | 	rdlong	local01, fp
16660     52 00 00 FF 
16664     B4 E4 05 F1 | 	add	objptr, ##42164
16668     F2 26 62 FC | 	wrlong	local01, objptr
1666c                 | '   q=t1.result.uresult
1666c                 | '   if q<7 then 
1666c     52 00 00 FF 
16670     B4 E4 85 F1 | 	sub	objptr, ##42164
16674     07 26 56 F2 | 	cmps	local01, #7 wc
16678     B8 00 90 3D |  if_ae	jmp	#LR__1872
1667c     00 C0 1B FF 
16680     00 26 06 F6 | 	mov	local01, ##931135488
16684     52 00 00 FF 
16688     B4 E4 05 F1 | 	add	objptr, ##42164
1668c     F2 16 02 FB | 	rdlong	arg03, objptr
16690     02 16 66 F0 | 	shl	arg03, #2
16694     40 E5 85 F1 | 	sub	objptr, #320
16698     F2 16 02 F1 | 	add	arg03, objptr
1669c     0B 13 02 FB | 	rdlong	arg01, arg03
166a0     51 00 00 FF 
166a4     74 E5 85 F1 | 	sub	objptr, ##41844
166a8     09 13 52 F6 | 	abs	arg01, arg01 wc
166ac     1F 28 C6 C9 |  if_b	decod	local02, #31
166b0     00 28 06 36 |  if_ae	mov	local02, #0
166b4     44 1D B1 FD | 	call	#__system___float_fromuns
166b8     14 FB 61 F5 | 	xor	result1, local02
166bc     FD 12 02 F6 | 	mov	arg01, result1
166c0     FF 7F 23 FF 
166c4     00 14 06 F6 | 	mov	arg02, ##1191181824
166c8     38 23 B1 FD | 	call	#__system___float_div
166cc     FD 14 02 F6 | 	mov	arg02, result1
166d0     13 13 02 F6 | 	mov	arg01, local01
166d4     58 1D B1 FD | 	call	#__system___float_add
166d8     10 4E 05 F1 | 	add	fp, #16
166dc     A7 FA 61 FC | 	wrlong	result1, fp
166e0                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
166e0     10 4E 85 F1 | 	sub	fp, #16
166e4     1F FA 05 F4 | 	bitl	result1, #31
166e8     FD 12 02 F6 | 	mov	arg01, result1
166ec     89 41 1D FF 
166f0     6F 14 06 F6 | 	mov	arg02, ##981668463
166f4     01 16 06 F6 | 	mov	arg03, #1
166f8     38 25 B1 FD | 	call	#__system___float_cmp
166fc     00 FA 55 F2 | 	cmps	result1, #0 wc
16700     10 4E 05 C1 |  if_b	add	fp, #16
16704     A7 00 68 CC |  if_b	wrlong	#0, fp
16708     10 4E 85 C1 |  if_b	sub	fp, #16
1670c     10 4E 05 F1 | 	add	fp, #16
16710     A7 26 02 FB | 	rdlong	local01, fp
16714     10 4E 85 F1 | 	sub	fp, #16
16718     A7 26 62 FC | 	wrlong	local01, fp
1671c     08 4E 05 F1 | 	add	fp, #8
16720     A7 3C 68 FC | 	wrlong	#30, fp
16724     08 4E 85 F1 | 	sub	fp, #8
16728     A7 12 02 F6 | 	mov	arg01, fp
1672c     E8 65 BF FD | 	call	#_push
16730                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16730     1C 00 90 FD | 	jmp	#LR__1874
16734                 | LR__1872
16734     29 12 06 F6 | 	mov	arg01, #41
16738     00 14 06 F6 | 	mov	arg02, #0
1673c     5C B8 B0 FD | 	call	#_printerror
16740                 | '      printerror(41) : return
16740     0C 00 90 FD | 	jmp	#LR__1874
16744                 | LR__1873
16744     29 12 06 F6 | 	mov	arg01, #41
16748     00 14 06 F6 | 	mov	arg02, #0
1674c     4C B8 B0 FD | 	call	#_printerror
16750                 | LR__1874
16750     A7 F0 03 F6 | 	mov	ptra, fp
16754     B2 00 A0 FD | 	call	#popregs_
16758                 | _do_pady_ret
16758     2D 00 64 FD | 	ret
1675c                 | 
1675c                 | ' 
1675c                 | ' ' ------------------ padz
1675c                 | ' 
1675c                 | ' sub do_padz
1675c                 | _do_padz
1675c     02 4A 05 F6 | 	mov	COUNT_, #2
16760     A8 00 A0 FD | 	call	#pushregs_
16764     14 F0 07 F1 | 	add	ptra, #20
16768     4A 00 00 FF 
1676c     80 E4 05 F1 | 	add	objptr, ##38016
16770     F2 26 02 FB | 	rdlong	local01, objptr
16774     13 17 02 F6 | 	mov	arg03, local01
16778     01 16 66 F0 | 	shl	arg03, #1
1677c     13 17 02 F1 | 	add	arg03, local01
16780     02 16 66 F0 | 	shl	arg03, #2
16784     03 00 00 FF 
16788     04 E4 85 F1 | 	sub	objptr, ##1540
1678c     F2 16 02 F1 | 	add	arg03, objptr
16790     0B 17 02 FB | 	rdlong	arg03, arg03
16794     0C 4E 05 F1 | 	add	fp, #12
16798     A7 16 62 FC | 	wrlong	arg03, fp
1679c                 | ' 
1679c                 | ' numpar=compiledline(lineptr_e).result.uresult
1679c                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
1679c     0C 4E 85 F1 | 	sub	fp, #12
167a0     02 16 16 F2 | 	cmp	arg03, #2 wc
167a4     47 00 00 FF 
167a8     7C E4 85 F1 | 	sub	objptr, ##36476
167ac     40 00 90 CD |  if_b	jmp	#LR__1880
167b0     00 12 06 F6 | 	mov	arg01, #0
167b4     F8 4E B1 FD | 	call	#__system___getiolock_0599
167b8     FD 12 02 F6 | 	mov	arg01, result1
167bc     C8 F1 B0 FD | 	call	#__system___lockmem
167c0     AF 01 00 FF 
167c4     04 15 06 F6 | 	mov	arg02, ##@LR__5909
167c8     00 12 06 F6 | 	mov	arg01, #0
167cc     00 16 06 F6 | 	mov	arg03, #0
167d0     A8 FE B0 FD | 	call	#__system___basic_print_string
167d4     00 12 06 F6 | 	mov	arg01, #0
167d8     D4 4E B1 FD | 	call	#__system___getiolock_0599
167dc     FD 00 68 FC | 	wrlong	#0, result1
167e0     27 12 06 F6 | 	mov	arg01, #39
167e4     00 14 06 F6 | 	mov	arg02, #0
167e8     B0 B7 B0 FD | 	call	#_printerror
167ec     E0 01 90 FD | 	jmp	#LR__1884
167f0                 | LR__1880
167f0                 | ' if numpar=0 then 
167f0     0C 4E 05 F1 | 	add	fp, #12
167f4     A7 FE 09 FB | 	rdlong	result3, fp wz
167f8     0C 4E 85 F1 | 	sub	fp, #12
167fc     A8 00 90 5D |  if_ne	jmp	#LR__1881
16800     00 C0 1B FF 
16804     00 26 06 F6 | 	mov	local01, ##931135488
16808     51 00 00 FF 
1680c     90 E5 05 F1 | 	add	objptr, ##41872
16810     F2 12 02 FB | 	rdlong	arg01, objptr
16814     51 00 00 FF 
16818     90 E5 85 F1 | 	sub	objptr, ##41872
1681c     09 13 52 F6 | 	abs	arg01, arg01 wc
16820     1F 28 C6 C9 |  if_b	decod	local02, #31
16824     00 28 06 36 |  if_ae	mov	local02, #0
16828     D0 1B B1 FD | 	call	#__system___float_fromuns
1682c     14 FB 61 F5 | 	xor	result1, local02
16830     FD 12 02 F6 | 	mov	arg01, result1
16834     FF 7F 23 FF 
16838     00 14 06 F6 | 	mov	arg02, ##1191181824
1683c     C4 21 B1 FD | 	call	#__system___float_div
16840     FD 14 02 F6 | 	mov	arg02, result1
16844     13 13 02 F6 | 	mov	arg01, local01
16848     E4 1B B1 FD | 	call	#__system___float_add
1684c     10 4E 05 F1 | 	add	fp, #16
16850     A7 FA 61 FC | 	wrlong	result1, fp
16854                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16854     10 4E 85 F1 | 	sub	fp, #16
16858     1F FA 05 F4 | 	bitl	result1, #31
1685c     FD 12 02 F6 | 	mov	arg01, result1
16860     89 41 1D FF 
16864     6F 14 06 F6 | 	mov	arg02, ##981668463
16868     01 16 06 F6 | 	mov	arg03, #1
1686c     C4 23 B1 FD | 	call	#__system___float_cmp
16870     00 FA 55 F2 | 	cmps	result1, #0 wc
16874     10 4E 05 C1 |  if_b	add	fp, #16
16878     A7 00 68 CC |  if_b	wrlong	#0, fp
1687c     10 4E 85 C1 |  if_b	sub	fp, #16
16880     10 4E 05 F1 | 	add	fp, #16
16884     A7 26 02 FB | 	rdlong	local01, fp
16888     10 4E 85 F1 | 	sub	fp, #16
1688c     A7 26 62 FC | 	wrlong	local01, fp
16890     08 4E 05 F1 | 	add	fp, #8
16894     A7 3C 68 FC | 	wrlong	#30, fp
16898     08 4E 85 F1 | 	sub	fp, #8
1689c     A7 12 02 F6 | 	mov	arg01, fp
168a0     74 64 BF FD | 	call	#_push
168a4                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
168a4     28 01 90 FD | 	jmp	#LR__1884
168a8                 | LR__1881
168a8     D4 63 BF FD | 	call	#_pop
168ac     A7 FA 61 FC | 	wrlong	result1, fp
168b0     04 4E 05 F1 | 	add	fp, #4
168b4     A7 FC 61 FC | 	wrlong	result2, fp
168b8     04 4E 05 F1 | 	add	fp, #4
168bc     A7 FE 61 FC | 	wrlong	result3, fp
168c0                 | ' t1=pop()
168c0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
168c0     08 4E 85 F1 | 	sub	fp, #8
168c4     1C FE 0D F2 | 	cmp	result3, #28 wz
168c8     08 4E 05 51 |  if_ne	add	fp, #8
168cc     A7 26 02 5B |  if_ne	rdlong	local01, fp
168d0     08 4E 85 51 |  if_ne	sub	fp, #8
168d4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
168d8     E8 00 90 5D |  if_ne	jmp	#LR__1883
168dc     A7 26 02 FB | 	rdlong	local01, fp
168e0     52 00 00 FF 
168e4     B4 E4 05 F1 | 	add	objptr, ##42164
168e8     F2 26 62 FC | 	wrlong	local01, objptr
168ec                 | '   q=t1.result.uresult
168ec                 | '   if q<7 then 
168ec     52 00 00 FF 
168f0     B4 E4 85 F1 | 	sub	objptr, ##42164
168f4     07 26 56 F2 | 	cmps	local01, #7 wc
168f8     B8 00 90 3D |  if_ae	jmp	#LR__1882
168fc     00 C0 1B FF 
16900     00 26 06 F6 | 	mov	local01, ##931135488
16904     52 00 00 FF 
16908     B4 E4 05 F1 | 	add	objptr, ##42164
1690c     F2 16 02 FB | 	rdlong	arg03, objptr
16910     02 16 66 F0 | 	shl	arg03, #2
16914     24 E5 85 F1 | 	sub	objptr, #292
16918     F2 16 02 F1 | 	add	arg03, objptr
1691c     0B 13 02 FB | 	rdlong	arg01, arg03
16920     51 00 00 FF 
16924     90 E5 85 F1 | 	sub	objptr, ##41872
16928     09 13 52 F6 | 	abs	arg01, arg01 wc
1692c     1F 28 C6 C9 |  if_b	decod	local02, #31
16930     00 28 06 36 |  if_ae	mov	local02, #0
16934     C4 1A B1 FD | 	call	#__system___float_fromuns
16938     14 FB 61 F5 | 	xor	result1, local02
1693c     FD 12 02 F6 | 	mov	arg01, result1
16940     FF 7F 23 FF 
16944     00 14 06 F6 | 	mov	arg02, ##1191181824
16948     B8 20 B1 FD | 	call	#__system___float_div
1694c     FD 14 02 F6 | 	mov	arg02, result1
16950     13 13 02 F6 | 	mov	arg01, local01
16954     D8 1A B1 FD | 	call	#__system___float_add
16958     10 4E 05 F1 | 	add	fp, #16
1695c     A7 FA 61 FC | 	wrlong	result1, fp
16960                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16960     10 4E 85 F1 | 	sub	fp, #16
16964     1F FA 05 F4 | 	bitl	result1, #31
16968     FD 12 02 F6 | 	mov	arg01, result1
1696c     89 41 1D FF 
16970     6F 14 06 F6 | 	mov	arg02, ##981668463
16974     01 16 06 F6 | 	mov	arg03, #1
16978     B8 22 B1 FD | 	call	#__system___float_cmp
1697c     00 FA 55 F2 | 	cmps	result1, #0 wc
16980     10 4E 05 C1 |  if_b	add	fp, #16
16984     A7 00 68 CC |  if_b	wrlong	#0, fp
16988     10 4E 85 C1 |  if_b	sub	fp, #16
1698c     10 4E 05 F1 | 	add	fp, #16
16990     A7 26 02 FB | 	rdlong	local01, fp
16994     10 4E 85 F1 | 	sub	fp, #16
16998     A7 26 62 FC | 	wrlong	local01, fp
1699c     08 4E 05 F1 | 	add	fp, #8
169a0     A7 3C 68 FC | 	wrlong	#30, fp
169a4     08 4E 85 F1 | 	sub	fp, #8
169a8     A7 12 02 F6 | 	mov	arg01, fp
169ac     68 63 BF FD | 	call	#_push
169b0                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
169b0     1C 00 90 FD | 	jmp	#LR__1884
169b4                 | LR__1882
169b4     29 12 06 F6 | 	mov	arg01, #41
169b8     00 14 06 F6 | 	mov	arg02, #0
169bc     DC B5 B0 FD | 	call	#_printerror
169c0                 | '      printerror(41) : return
169c0     0C 00 90 FD | 	jmp	#LR__1884
169c4                 | LR__1883
169c4     29 12 06 F6 | 	mov	arg01, #41
169c8     00 14 06 F6 | 	mov	arg02, #0
169cc     CC B5 B0 FD | 	call	#_printerror
169d0                 | LR__1884
169d0     A7 F0 03 F6 | 	mov	ptra, fp
169d4     B2 00 A0 FD | 	call	#popregs_
169d8                 | _do_padz_ret
169d8     2D 00 64 FD | 	ret
169dc                 | 
169dc                 | ' 
169dc                 | ' '-------------------- paper
169dc                 | ' 
169dc                 | ' sub do_paper
169dc                 | _do_paper
169dc     03 4A 05 F6 | 	mov	COUNT_, #3
169e0     A8 00 A0 FD | 	call	#pushregs_
169e4     98 62 BF FD | 	call	#_pop
169e8     FD 26 02 F6 | 	mov	local01, result1
169ec     FE 28 02 F6 | 	mov	local02, result2
169f0     FF 2A 02 F6 | 	mov	local03, result3
169f4                 | ' t1=pop() 
169f4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
169f4     1E 2A 0E F2 | 	cmp	local03, #30 wz
169f8     10 00 90 5D |  if_ne	jmp	#LR__1890
169fc     13 13 02 F6 | 	mov	arg01, local01
16a00     00 14 06 F6 | 	mov	arg02, #0
16a04     C0 22 B1 FD | 	call	#__system___float_tointeger
16a08     FD 26 02 F6 | 	mov	local01, result1
16a0c                 | LR__1890
16a0c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16a0c     1F 2A 0E F2 | 	cmp	local03, #31 wz
16a10     18 00 90 5D |  if_ne	jmp	#LR__1891
16a14     13 13 02 F6 | 	mov	arg01, local01
16a18     F0 25 B1 FD | 	call	#__system____builtin_atof
16a1c     FD 12 02 F6 | 	mov	arg01, result1
16a20     00 14 06 F6 | 	mov	arg02, #0
16a24     A0 22 B1 FD | 	call	#__system___float_tointeger
16a28     FD 26 02 F6 | 	mov	local01, result1
16a2c                 | LR__1891
16a2c     37 00 00 FF 
16a30     38 E4 05 F1 | 	add	objptr, ##28216
16a34     F2 26 62 FC | 	wrlong	local01, objptr
16a38     04 E4 05 F1 | 	add	objptr, #4
16a3c     F2 12 02 FB | 	rdlong	arg01, objptr
16a40                 | ' 
16a40                 | ' write_color:=ff
16a40     36 00 00 FF 
16a44     FB E5 85 F1 | 	sub	objptr, ##28155
16a48     F2 12 62 FC | 	wrlong	arg01, objptr
16a4c                 | ' write_background:=bb
16a4c     04 E4 05 F1 | 	add	objptr, #4
16a50     F2 26 62 FC | 	wrlong	local01, objptr
16a54     45 E4 85 F1 | 	sub	objptr, #69
16a58     A7 F0 03 F6 | 	mov	ptra, fp
16a5c     B2 00 A0 FD | 	call	#popregs_
16a60                 | _do_paper_ret
16a60     2D 00 64 FD | 	ret
16a64                 | 
16a64                 | ' 
16a64                 | ' '-------------------- peek
16a64                 | ' 
16a64                 | ' sub do_peek
16a64                 | _do_peek
16a64     00 4A 05 F6 | 	mov	COUNT_, #0
16a68     A8 00 A0 FD | 	call	#pushregs_
16a6c     14 F0 07 F1 | 	add	ptra, #20
16a70     0C 62 BF FD | 	call	#_pop
16a74     A7 FA 61 FC | 	wrlong	result1, fp
16a78     04 4E 05 F1 | 	add	fp, #4
16a7c     A7 FC 61 FC | 	wrlong	result2, fp
16a80     04 4E 05 F1 | 	add	fp, #4
16a84     A7 FE 61 FC | 	wrlong	result3, fp
16a88     08 4E 85 F1 | 	sub	fp, #8
16a8c     A7 12 02 F6 | 	mov	arg01, fp
16a90     D0 63 BF FD | 	call	#_converttoint
16a94     0C 4E 05 F1 | 	add	fp, #12
16a98     A7 FA 61 FC | 	wrlong	result1, fp
16a9c                 | ' 
16a9c                 | ' t1=pop()
16a9c                 | ' a=converttoint(t1)
16a9c                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
16a9c     0C 4E 85 F1 | 	sub	fp, #12
16aa0     00 04 00 FF 
16aa4     00 FA 15 F2 | 	cmp	result1, ##524288 wc
16aa8     1C 00 90 3D |  if_ae	jmp	#LR__1900
16aac     0C 4E 05 F1 | 	add	fp, #12
16ab0     A7 12 02 FB | 	rdlong	arg01, fp
16ab4     09 FB C1 FA | 	rdbyte	result1, arg01
16ab8     04 4E 05 F1 | 	add	fp, #4
16abc     A7 FA 61 FC | 	wrlong	result1, fp
16ac0     10 4E 85 F1 | 	sub	fp, #16
16ac4     20 00 90 FD | 	jmp	#LR__1901
16ac8                 | LR__1900
16ac8     0C 4E 05 F1 | 	add	fp, #12
16acc     A7 12 02 FB | 	rdlong	arg01, fp
16ad0     0C 4E 85 F1 | 	sub	fp, #12
16ad4     3C B7 B0 FD | 	call	#_pspeek
16ad8     FD FA E1 F8 | 	getbyte	result1, result1, #0
16adc     10 4E 05 F1 | 	add	fp, #16
16ae0     A7 FA 61 FC | 	wrlong	result1, fp
16ae4     10 4E 85 F1 | 	sub	fp, #16
16ae8                 | LR__1901
16ae8     08 4E 05 F1 | 	add	fp, #8
16aec     A7 3A 68 FC | 	wrlong	#29, fp
16af0     08 4E 05 F1 | 	add	fp, #8
16af4     A7 12 02 FB | 	rdlong	arg01, fp
16af8     10 4E 85 F1 | 	sub	fp, #16
16afc     A7 12 62 FC | 	wrlong	arg01, fp
16b00     A7 12 02 F6 | 	mov	arg01, fp
16b04     10 62 BF FD | 	call	#_push
16b08     A7 F0 03 F6 | 	mov	ptra, fp
16b0c     B2 00 A0 FD | 	call	#popregs_
16b10                 | _do_peek_ret
16b10     2D 00 64 FD | 	ret
16b14                 | 
16b14                 | ' 
16b14                 | ' '-------------------- pinfloat
16b14                 | ' 
16b14                 | ' sub do_pinfloat
16b14                 | _do_pinfloat
16b14     00 4A 05 F6 | 	mov	COUNT_, #0
16b18     A8 00 A0 FD | 	call	#pushregs_
16b1c     0C F0 07 F1 | 	add	ptra, #12
16b20     5C 61 BF FD | 	call	#_pop
16b24     A7 FA 61 FC | 	wrlong	result1, fp
16b28     04 4E 05 F1 | 	add	fp, #4
16b2c     A7 FC 61 FC | 	wrlong	result2, fp
16b30     04 4E 05 F1 | 	add	fp, #4
16b34     A7 FE 61 FC | 	wrlong	result3, fp
16b38     08 4E 85 F1 | 	sub	fp, #8
16b3c     A7 12 02 F6 | 	mov	arg01, fp
16b40     20 63 BF FD | 	call	#_converttoint
16b44     50 FA 61 FD | 	fltl	result1
16b48     A7 F0 03 F6 | 	mov	ptra, fp
16b4c     B2 00 A0 FD | 	call	#popregs_
16b50                 | _do_pinfloat_ret
16b50     2D 00 64 FD | 	ret
16b54                 | 
16b54                 | ' 
16b54                 | ' '-------------------- pinhi
16b54                 | ' 
16b54                 | ' sub do_pinhi
16b54                 | _do_pinhi
16b54     00 4A 05 F6 | 	mov	COUNT_, #0
16b58     A8 00 A0 FD | 	call	#pushregs_
16b5c     0C F0 07 F1 | 	add	ptra, #12
16b60     1C 61 BF FD | 	call	#_pop
16b64     A7 FA 61 FC | 	wrlong	result1, fp
16b68     04 4E 05 F1 | 	add	fp, #4
16b6c     A7 FC 61 FC | 	wrlong	result2, fp
16b70     04 4E 05 F1 | 	add	fp, #4
16b74     A7 FE 61 FC | 	wrlong	result3, fp
16b78     08 4E 85 F1 | 	sub	fp, #8
16b7c     A7 12 02 F6 | 	mov	arg01, fp
16b80     E0 62 BF FD | 	call	#_converttoint
16b84     59 FA 61 FD | 	drvh	result1
16b88     A7 F0 03 F6 | 	mov	ptra, fp
16b8c     B2 00 A0 FD | 	call	#popregs_
16b90                 | _do_pinhi_ret
16b90     2D 00 64 FD | 	ret
16b94                 | 
16b94                 | ' 
16b94                 | ' '-------------------- pinlo
16b94                 | ' 
16b94                 | ' sub do_pinlo
16b94                 | _do_pinlo
16b94     00 4A 05 F6 | 	mov	COUNT_, #0
16b98     A8 00 A0 FD | 	call	#pushregs_
16b9c     0C F0 07 F1 | 	add	ptra, #12
16ba0     DC 60 BF FD | 	call	#_pop
16ba4     A7 FA 61 FC | 	wrlong	result1, fp
16ba8     04 4E 05 F1 | 	add	fp, #4
16bac     A7 FC 61 FC | 	wrlong	result2, fp
16bb0     04 4E 05 F1 | 	add	fp, #4
16bb4     A7 FE 61 FC | 	wrlong	result3, fp
16bb8     08 4E 85 F1 | 	sub	fp, #8
16bbc     A7 12 02 F6 | 	mov	arg01, fp
16bc0     A0 62 BF FD | 	call	#_converttoint
16bc4     58 FA 61 FD | 	drvl	result1
16bc8     A7 F0 03 F6 | 	mov	ptra, fp
16bcc     B2 00 A0 FD | 	call	#popregs_
16bd0                 | _do_pinlo_ret
16bd0     2D 00 64 FD | 	ret
16bd4                 | 
16bd4                 | ' 
16bd4                 | ' '-------------------- pinread
16bd4                 | ' 
16bd4                 | ' sub do_pinread
16bd4                 | _do_pinread
16bd4     00 4A 05 F6 | 	mov	COUNT_, #0
16bd8     A8 00 A0 FD | 	call	#pushregs_
16bdc     0C F0 07 F1 | 	add	ptra, #12
16be0     9C 60 BF FD | 	call	#_pop
16be4     A7 FA 61 FC | 	wrlong	result1, fp
16be8     04 4E 05 F1 | 	add	fp, #4
16bec     A7 FC 61 FC | 	wrlong	result2, fp
16bf0     04 4E 05 F1 | 	add	fp, #4
16bf4     A7 FE 61 FC | 	wrlong	result3, fp
16bf8     08 4E 85 F1 | 	sub	fp, #8
16bfc     A7 12 02 F6 | 	mov	arg01, fp
16c00     60 62 BF FD | 	call	#_converttoint
16c04     FD 12 02 F6 | 	mov	arg01, result1
16c08     20 12 CE F7 | 	test	arg01, #32 wz
16c0c     FF FB 01 56 |  if_ne	mov	result1, inb
16c10     FE FB 01 A6 |  if_e	mov	result1, ina
16c14     09 FB 41 F0 | 	shr	result1, arg01
16c18     06 12 46 F0 | 	shr	arg01, #6
16c1c     09 FB 41 F7 | 	zerox	result1, arg01
16c20     52 00 00 FF 
16c24     BC E4 05 F1 | 	add	objptr, ##42172
16c28     F2 FA 61 FC | 	wrlong	result1, objptr
16c2c     52 00 00 FF 
16c30     BC E4 85 F1 | 	sub	objptr, ##42172
16c34     08 4E 05 F1 | 	add	fp, #8
16c38     A7 3A 68 FC | 	wrlong	#29, fp
16c3c     08 4E 85 F1 | 	sub	fp, #8
16c40     A7 08 68 FC | 	wrlong	#4, fp
16c44     A7 12 02 F6 | 	mov	arg01, fp
16c48     CC 60 BF FD | 	call	#_push
16c4c     A7 F0 03 F6 | 	mov	ptra, fp
16c50     B2 00 A0 FD | 	call	#popregs_
16c54                 | _do_pinread_ret
16c54     2D 00 64 FD | 	ret
16c58                 | 
16c58                 | ' 
16c58                 | ' '-------------------- pinstart
16c58                 | ' 
16c58                 | ' sub do_pinstart
16c58                 | _do_pinstart
16c58     03 4A 05 F6 | 	mov	COUNT_, #3
16c5c     A8 00 A0 FD | 	call	#pushregs_
16c60     30 F0 07 F1 | 	add	ptra, #48
16c64     18 60 BF FD | 	call	#_pop
16c68     FD 16 02 F6 | 	mov	arg03, result1
16c6c     FE 14 02 F6 | 	mov	arg02, result2
16c70     FF 18 02 F6 | 	mov	arg04, result3
16c74     A7 16 62 FC | 	wrlong	arg03, fp
16c78     04 4E 05 F1 | 	add	fp, #4
16c7c     A7 14 62 FC | 	wrlong	arg02, fp
16c80     04 4E 05 F1 | 	add	fp, #4
16c84     A7 18 62 FC | 	wrlong	arg04, fp
16c88     08 4E 85 F1 | 	sub	fp, #8
16c8c     F0 5F BF FD | 	call	#_pop
16c90     FD 16 02 F6 | 	mov	arg03, result1
16c94     FE 14 02 F6 | 	mov	arg02, result2
16c98     FF 18 02 F6 | 	mov	arg04, result3
16c9c     0C 4E 05 F1 | 	add	fp, #12
16ca0     A7 16 62 FC | 	wrlong	arg03, fp
16ca4     04 4E 05 F1 | 	add	fp, #4
16ca8     A7 14 62 FC | 	wrlong	arg02, fp
16cac     04 4E 05 F1 | 	add	fp, #4
16cb0     A7 18 62 FC | 	wrlong	arg04, fp
16cb4     14 4E 85 F1 | 	sub	fp, #20
16cb8     C4 5F BF FD | 	call	#_pop
16cbc     FD 16 02 F6 | 	mov	arg03, result1
16cc0     FE 14 02 F6 | 	mov	arg02, result2
16cc4     FF 18 02 F6 | 	mov	arg04, result3
16cc8     18 4E 05 F1 | 	add	fp, #24
16ccc     A7 16 62 FC | 	wrlong	arg03, fp
16cd0     04 4E 05 F1 | 	add	fp, #4
16cd4     A7 14 62 FC | 	wrlong	arg02, fp
16cd8     04 4E 05 F1 | 	add	fp, #4
16cdc     A7 18 62 FC | 	wrlong	arg04, fp
16ce0     20 4E 85 F1 | 	sub	fp, #32
16ce4     98 5F BF FD | 	call	#_pop
16ce8     FF 16 02 F6 | 	mov	arg03, result3
16cec     24 4E 05 F1 | 	add	fp, #36
16cf0     A7 FA 61 FC | 	wrlong	result1, fp
16cf4     04 4E 05 F1 | 	add	fp, #4
16cf8     A7 FC 61 FC | 	wrlong	result2, fp
16cfc     04 4E 05 F1 | 	add	fp, #4
16d00     A7 16 62 FC | 	wrlong	arg03, fp
16d04     08 4E 85 F1 | 	sub	fp, #8
16d08     A7 12 02 F6 | 	mov	arg01, fp
16d0c     24 4E 85 F1 | 	sub	fp, #36
16d10     50 61 BF FD | 	call	#_converttoint
16d14     FD 26 02 F6 | 	mov	local01, result1
16d18     18 4E 05 F1 | 	add	fp, #24
16d1c     A7 12 02 F6 | 	mov	arg01, fp
16d20     18 4E 85 F1 | 	sub	fp, #24
16d24     3C 61 BF FD | 	call	#_converttoint
16d28     FD 28 02 F6 | 	mov	local02, result1
16d2c     0C 4E 05 F1 | 	add	fp, #12
16d30     A7 12 02 F6 | 	mov	arg01, fp
16d34     0C 4E 85 F1 | 	sub	fp, #12
16d38     28 61 BF FD | 	call	#_converttoint
16d3c     FD 2A 02 F6 | 	mov	local03, result1
16d40     A7 12 02 F6 | 	mov	arg01, fp
16d44     1C 61 BF FD | 	call	#_converttoint
16d48     40 26 62 FD | 	dirl	local01
16d4c     13 29 02 FC | 	wrpin	local02, local01
16d50     13 2B 12 FC | 	wxpin	local03, local01
16d54     13 FB 21 FC | 	wypin	result1, local01
16d58     41 26 62 FD | 	dirh	local01
16d5c     A7 F0 03 F6 | 	mov	ptra, fp
16d60     B2 00 A0 FD | 	call	#popregs_
16d64                 | _do_pinstart_ret
16d64     2D 00 64 FD | 	ret
16d68                 | 
16d68                 | ' 
16d68                 | ' '-------------------- pintoggle
16d68                 | ' 
16d68                 | ' sub do_pintoggle
16d68                 | _do_pintoggle
16d68     00 4A 05 F6 | 	mov	COUNT_, #0
16d6c     A8 00 A0 FD | 	call	#pushregs_
16d70     0C F0 07 F1 | 	add	ptra, #12
16d74     08 5F BF FD | 	call	#_pop
16d78     A7 FA 61 FC | 	wrlong	result1, fp
16d7c     04 4E 05 F1 | 	add	fp, #4
16d80     A7 FC 61 FC | 	wrlong	result2, fp
16d84     04 4E 05 F1 | 	add	fp, #4
16d88     A7 FE 61 FC | 	wrlong	result3, fp
16d8c     08 4E 85 F1 | 	sub	fp, #8
16d90     A7 12 02 F6 | 	mov	arg01, fp
16d94     CC 60 BF FD | 	call	#_converttoint
16d98     5F FA 61 FD | 	drvnot	result1
16d9c     A7 F0 03 F6 | 	mov	ptra, fp
16da0     B2 00 A0 FD | 	call	#popregs_
16da4                 | _do_pintoggle_ret
16da4     2D 00 64 FD | 	ret
16da8                 | 
16da8                 | ' 
16da8                 | ' '-------------------- pinwrite
16da8                 | ' 
16da8                 | ' sub do_pinwrite
16da8                 | _do_pinwrite
16da8     01 4A 05 F6 | 	mov	COUNT_, #1
16dac     A8 00 A0 FD | 	call	#pushregs_
16db0     18 F0 07 F1 | 	add	ptra, #24
16db4     C8 5E BF FD | 	call	#_pop
16db8     FD 14 02 F6 | 	mov	arg02, result1
16dbc     FE 12 02 F6 | 	mov	arg01, result2
16dc0     FF 26 02 F6 | 	mov	local01, result3
16dc4     A7 14 62 FC | 	wrlong	arg02, fp
16dc8     04 4E 05 F1 | 	add	fp, #4
16dcc     A7 12 62 FC | 	wrlong	arg01, fp
16dd0     04 4E 05 F1 | 	add	fp, #4
16dd4     A7 26 62 FC | 	wrlong	local01, fp
16dd8     08 4E 85 F1 | 	sub	fp, #8
16ddc     A0 5E BF FD | 	call	#_pop
16de0     FF 26 02 F6 | 	mov	local01, result3
16de4     0C 4E 05 F1 | 	add	fp, #12
16de8     A7 FA 61 FC | 	wrlong	result1, fp
16dec     04 4E 05 F1 | 	add	fp, #4
16df0     A7 FC 61 FC | 	wrlong	result2, fp
16df4     04 4E 05 F1 | 	add	fp, #4
16df8     A7 26 62 FC | 	wrlong	local01, fp
16dfc     08 4E 85 F1 | 	sub	fp, #8
16e00     A7 12 02 F6 | 	mov	arg01, fp
16e04     0C 4E 85 F1 | 	sub	fp, #12
16e08     58 60 BF FD | 	call	#_converttoint
16e0c     FD 26 02 F6 | 	mov	local01, result1
16e10     A7 12 02 F6 | 	mov	arg01, fp
16e14     4C 60 BF FD | 	call	#_converttoint
16e18     FD 14 02 F6 | 	mov	arg02, result1
16e1c     13 13 02 F6 | 	mov	arg01, local01
16e20     18 ED B0 FD | 	call	#__system___pinwrite
16e24     A7 F0 03 F6 | 	mov	ptra, fp
16e28     B2 00 A0 FD | 	call	#popregs_
16e2c                 | _do_pinwrite_ret
16e2c     2D 00 64 FD | 	ret
16e30                 | 
16e30                 | ' 
16e30                 | ' '-------------------- play
16e30                 | ' 
16e30                 | ' sub do_play
16e30                 | _do_play
16e30     08 4A 05 F6 | 	mov	COUNT_, #8
16e34     A8 00 A0 FD | 	call	#pushregs_
16e38     7C F0 07 F1 | 	add	ptra, #124
16e3c     68 4E 05 F1 | 	add	fp, #104
16e40     77 CC A1 FF 
16e44     A7 7C 6B FC | 	wrlong	##1134096318, fp
16e48                 | ' speed_coeff=305.873
16e48                 | ' 
16e48                 | ' for i=0 to 8 : params(i)=-2.0 : next i
16e48     64 4E 85 F1 | 	sub	fp, #100
16e4c     A7 00 68 FC | 	wrlong	#0, fp
16e50     97 18 48 FB | 	callpa	#(@LR__1911-@LR__1910)>>2,fcache_load_ptr_
16e54                 | LR__1910
16e54     A7 16 02 FB | 	rdlong	arg03, fp
16e58     02 16 66 F0 | 	shl	arg03, #2
16e5c     34 4E 05 F1 | 	add	fp, #52
16e60     A7 16 02 F1 | 	add	arg03, fp
16e64     00 00 E0 FF 
16e68     0B 01 68 FC | 	wrlong	##-1073741824, arg03
16e6c     34 4E 85 F1 | 	sub	fp, #52
16e70     A7 26 02 FB | 	rdlong	local01, fp
16e74     01 26 06 F1 | 	add	local01, #1
16e78     A7 26 62 FC | 	wrlong	local01, fp
16e7c     09 26 56 F2 | 	cmps	local01, #9 wc
16e80     D0 FF 9F CD |  if_b	jmp	#LR__1910
16e84                 | LR__1911
16e84     04 4E 85 F1 | 	sub	fp, #4
16e88     4A 00 00 FF 
16e8c     80 E4 05 F1 | 	add	objptr, ##38016
16e90     F2 28 02 FB | 	rdlong	local02, objptr
16e94     14 2B 02 F6 | 	mov	local03, local02
16e98     01 2A 66 F0 | 	shl	local03, #1
16e9c     14 2B 02 F1 | 	add	local03, local02
16ea0     02 2A 66 F0 | 	shl	local03, #2
16ea4     03 00 00 FF 
16ea8     04 E4 85 F1 | 	sub	objptr, ##1540
16eac     F2 2A 02 F1 | 	add	local03, objptr
16eb0     15 2D 02 FB | 	rdlong	local04, local03
16eb4     A7 2C 62 FC | 	wrlong	local04, fp
16eb8                 | ' numpar=compiledline(lineptr_e).result.uresult
16eb8                 | ' for i=numpar to 1 step -1 
16eb8     04 4E 05 F1 | 	add	fp, #4
16ebc     A7 2C 62 FC | 	wrlong	local04, fp
16ec0     04 4E 85 F1 | 	sub	fp, #4
16ec4     47 00 00 FF 
16ec8     7C E4 85 F1 | 	sub	objptr, ##36476
16ecc                 | LR__1912
16ecc     B0 5D BF FD | 	call	#_pop
16ed0     5C 4E 05 F1 | 	add	fp, #92
16ed4     A7 FA 61 FC | 	wrlong	result1, fp
16ed8     04 4E 05 F1 | 	add	fp, #4
16edc     A7 FC 61 FC | 	wrlong	result2, fp
16ee0     04 4E 05 F1 | 	add	fp, #4
16ee4     A7 FE 61 FC | 	wrlong	result3, fp
16ee8     60 4E 85 F1 | 	sub	fp, #96
16eec     A7 2A 02 FB | 	rdlong	local03, fp
16ef0     01 2A 86 F1 | 	sub	local03, #1
16ef4     02 2A 66 F0 | 	shl	local03, #2
16ef8     34 4E 05 F1 | 	add	fp, #52
16efc     A7 2A 02 F1 | 	add	local03, fp
16f00     24 4E 05 F1 | 	add	fp, #36
16f04     A7 2E 02 F6 | 	mov	local05, fp
16f08     17 13 02 F6 | 	mov	arg01, local05
16f0c     5C 4E 85 F1 | 	sub	fp, #92
16f10     0C 60 BF FD | 	call	#_converttofloat
16f14     15 FB 61 FC | 	wrlong	result1, local03
16f18     04 4E 05 F1 | 	add	fp, #4
16f1c     A7 26 02 FB | 	rdlong	local01, fp
16f20     01 26 86 F1 | 	sub	local01, #1
16f24     A7 26 62 FC | 	wrlong	local01, fp
16f28     04 4E 85 F1 | 	sub	fp, #4
16f2c     01 26 56 F2 | 	cmps	local01, #1 wc
16f30     98 FF 9F 3D |  if_ae	jmp	#LR__1912
16f34                 | ' 
16f34                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
16f34     38 4E 05 F1 | 	add	fp, #56
16f38     A7 12 02 FB | 	rdlong	arg01, fp
16f3c     38 4E 85 F1 | 	sub	fp, #56
16f40     00 14 06 F6 | 	mov	arg02, #0
16f44     01 16 06 F6 | 	mov	arg03, #1
16f48     E8 1C B1 FD | 	call	#__system___float_cmp
16f4c     00 FA 55 F2 | 	cmps	result1, #0 wc
16f50     0C 4E 05 C1 |  if_b	add	fp, #12
16f54     A7 00 68 CC |  if_b	wrlong	#0, fp
16f58     0C 4E 85 C1 |  if_b	sub	fp, #12
16f5c     2C 00 90 CD |  if_b	jmp	#LR__1913
16f60     38 4E 05 F1 | 	add	fp, #56
16f64     A7 12 02 FB | 	rdlong	arg01, fp
16f68     38 4E 85 F1 | 	sub	fp, #56
16f6c     01 14 06 F6 | 	mov	arg02, #1
16f70     54 1D B1 FD | 	call	#__system___float_tointeger
16f74     FD 26 52 F6 | 	abs	local01, result1 wc
16f78     07 26 06 F5 | 	and	local01, #7
16f7c     13 27 82 F6 | 	negc	local01, local01
16f80     0C 4E 05 F1 | 	add	fp, #12
16f84     A7 26 62 FC | 	wrlong	local01, fp
16f88     0C 4E 85 F1 | 	sub	fp, #12
16f8c                 | LR__1913
16f8c                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
16f8c     3C 4E 05 F1 | 	add	fp, #60
16f90     A7 12 02 FB | 	rdlong	arg01, fp
16f94     3C 4E 85 F1 | 	sub	fp, #60
16f98     00 14 06 F6 | 	mov	arg02, #0
16f9c     01 16 06 F6 | 	mov	arg03, #1
16fa0     90 1C B1 FD | 	call	#__system___float_cmp
16fa4     00 FA 55 F2 | 	cmps	result1, #0 wc
16fa8     40 00 90 3D |  if_ae	jmp	#LR__1914
16fac     0C 4E 05 F1 | 	add	fp, #12
16fb0     A7 28 02 FB | 	rdlong	local02, fp
16fb4     14 2B 02 F6 | 	mov	local03, local02
16fb8     01 2A 66 F0 | 	shl	local03, #1
16fbc     14 2B 02 F1 | 	add	local03, local02
16fc0     03 2A 66 F0 | 	shl	local03, #3
16fc4     14 00 00 FF 
16fc8     38 E5 05 F1 | 	add	objptr, ##10552
16fcc     F2 2A 02 F1 | 	add	local03, objptr
16fd0     15 31 02 FB | 	rdlong	local06, local03
16fd4     60 4E 05 F1 | 	add	fp, #96
16fd8     A7 30 62 FC | 	wrlong	local06, fp
16fdc     6C 4E 85 F1 | 	sub	fp, #108
16fe0     14 00 00 FF 
16fe4     38 E5 85 F1 | 	sub	objptr, ##10552
16fe8     44 00 90 FD | 	jmp	#LR__1915
16fec                 | LR__1914
16fec     3C 4E 05 F1 | 	add	fp, #60
16ff0     A7 2C 02 FB | 	rdlong	local04, fp
16ff4     30 4E 05 F1 | 	add	fp, #48
16ff8     A7 2C 62 FC | 	wrlong	local04, fp
16ffc     60 4E 85 F1 | 	sub	fp, #96
17000     A7 28 02 FB | 	rdlong	local02, fp
17004     14 2B 02 F6 | 	mov	local03, local02
17008     01 2A 66 F0 | 	shl	local03, #1
1700c     14 2B 02 F1 | 	add	local03, local02
17010     03 2A 66 F0 | 	shl	local03, #3
17014     14 00 00 FF 
17018     38 E5 05 F1 | 	add	objptr, ##10552
1701c     F2 2A 02 F1 | 	add	local03, objptr
17020     0C 4E 85 F1 | 	sub	fp, #12
17024     15 2D 62 FC | 	wrlong	local04, local03
17028     14 00 00 FF 
1702c     38 E5 85 F1 | 	sub	objptr, ##10552
17030                 | LR__1915
17030                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
17030     40 4E 05 F1 | 	add	fp, #64
17034     A7 12 02 FB | 	rdlong	arg01, fp
17038     40 4E 85 F1 | 	sub	fp, #64
1703c     00 14 06 F6 | 	mov	arg02, #0
17040     01 16 06 F6 | 	mov	arg03, #1
17044     EC 1B B1 FD | 	call	#__system___float_cmp
17048     00 FA 55 F2 | 	cmps	result1, #0 wc
1704c     24 00 90 CD |  if_b	jmp	#LR__1916
17050     40 4E 05 F1 | 	add	fp, #64
17054     A7 12 02 FB | 	rdlong	arg01, fp
17058     40 4E 85 F1 | 	sub	fp, #64
1705c     20 0E 23 FF 
17060     00 14 06 F6 | 	mov	arg02, ##1176256512
17064     01 16 66 F6 | 	neg	arg03, #1
17068     C8 1B B1 FD | 	call	#__system___float_cmp
1706c     01 FA 55 F2 | 	cmps	result1, #1 wc
17070     48 00 90 CD |  if_b	jmp	#LR__1917
17074                 | LR__1916
17074     0C 4E 05 F1 | 	add	fp, #12
17078     A7 2A 02 FB | 	rdlong	local03, fp
1707c     15 33 02 F6 | 	mov	local07, local03
17080     01 32 66 F0 | 	shl	local07, #1
17084     15 33 02 F1 | 	add	local07, local03
17088     03 32 66 F0 | 	shl	local07, #3
1708c     14 00 00 FF 
17090     38 E5 05 F1 | 	add	objptr, ##10552
17094     F2 32 02 F1 | 	add	local07, objptr
17098     06 32 06 F1 | 	add	local07, #6
1709c     19 2F E2 FA | 	rdword	local05, local07
170a0     17 2D 32 F9 | 	getword	local04, local05, #0
170a4     1C 4E 05 F1 | 	add	fp, #28
170a8     A7 2C 62 FC | 	wrlong	local04, fp
170ac     28 4E 85 F1 | 	sub	fp, #40
170b0     14 00 00 FF 
170b4     38 E5 85 F1 | 	sub	objptr, ##10552
170b8     54 00 90 FD | 	jmp	#LR__1918
170bc                 | LR__1917
170bc     40 4E 05 F1 | 	add	fp, #64
170c0     A7 12 02 FB | 	rdlong	arg01, fp
170c4     40 4E 85 F1 | 	sub	fp, #64
170c8     01 14 06 F6 | 	mov	arg02, #1
170cc     F8 1B B1 FD | 	call	#__system___float_tointeger
170d0     28 4E 05 F1 | 	add	fp, #40
170d4     A7 FA 61 FC | 	wrlong	result1, fp
170d8     1C 4E 85 F1 | 	sub	fp, #28
170dc     A7 28 02 FB | 	rdlong	local02, fp
170e0     14 2B 02 F6 | 	mov	local03, local02
170e4     01 2A 66 F0 | 	shl	local03, #1
170e8     14 2B 02 F1 | 	add	local03, local02
170ec     03 2A 66 F0 | 	shl	local03, #3
170f0     14 00 00 FF 
170f4     38 E5 05 F1 | 	add	objptr, ##10552
170f8     F2 2A 02 F1 | 	add	local03, objptr
170fc     0C 4E 85 F1 | 	sub	fp, #12
17100     06 2A 06 F1 | 	add	local03, #6
17104     15 FB 51 FC | 	wrword	result1, local03
17108     14 00 00 FF 
1710c     38 E5 85 F1 | 	sub	objptr, ##10552
17110                 | LR__1918
17110                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
17110     44 4E 05 F1 | 	add	fp, #68
17114     A7 12 02 FB | 	rdlong	arg01, fp
17118     44 4E 85 F1 | 	sub	fp, #68
1711c     00 14 06 F6 | 	mov	arg02, #0
17120     01 16 06 F6 | 	mov	arg03, #1
17124     0C 1B B1 FD | 	call	#__system___float_cmp
17128     00 FA 55 F2 | 	cmps	result1, #0 wc
1712c     24 00 90 CD |  if_b	jmp	#LR__1919
17130     44 4E 05 F1 | 	add	fp, #68
17134     A7 12 02 FB | 	rdlong	arg01, fp
17138     44 4E 85 F1 | 	sub	fp, #68
1713c     89 C1 20 FF 
17140     6F 14 06 F6 | 	mov	arg02, ##1099108975
17144     01 16 66 F6 | 	neg	arg03, #1
17148     E8 1A B1 FD | 	call	#__system___float_cmp
1714c     01 FA 55 F2 | 	cmps	result1, #1 wc
17150     44 00 90 CD |  if_b	jmp	#LR__1920
17154                 | LR__1919
17154     0C 4E 05 F1 | 	add	fp, #12
17158     A7 28 02 FB | 	rdlong	local02, fp
1715c     14 2B 02 F6 | 	mov	local03, local02
17160     01 2A 66 F0 | 	shl	local03, #1
17164     14 2B 02 F1 | 	add	local03, local02
17168     03 2A 66 F0 | 	shl	local03, #3
1716c     14 00 00 FF 
17170     38 E5 05 F1 | 	add	objptr, ##10552
17174     F2 2A 02 F1 | 	add	local03, objptr
17178     0C 2A 06 F1 | 	add	local03, #12
1717c     15 31 02 FB | 	rdlong	local06, local03
17180     68 4E 05 F1 | 	add	fp, #104
17184     A7 30 62 FC | 	wrlong	local06, fp
17188     74 4E 85 F1 | 	sub	fp, #116
1718c     14 00 00 FF 
17190     38 E5 85 F1 | 	sub	objptr, ##10552
17194     48 00 90 FD | 	jmp	#LR__1921
17198                 | LR__1920
17198     44 4E 05 F1 | 	add	fp, #68
1719c     A7 2C 02 FB | 	rdlong	local04, fp
171a0     30 4E 05 F1 | 	add	fp, #48
171a4     A7 2C 62 FC | 	wrlong	local04, fp
171a8     68 4E 85 F1 | 	sub	fp, #104
171ac     A7 28 02 FB | 	rdlong	local02, fp
171b0     14 2B 02 F6 | 	mov	local03, local02
171b4     01 2A 66 F0 | 	shl	local03, #1
171b8     14 2B 02 F1 | 	add	local03, local02
171bc     03 2A 66 F0 | 	shl	local03, #3
171c0     14 00 00 FF 
171c4     38 E5 05 F1 | 	add	objptr, ##10552
171c8     F2 2A 02 F1 | 	add	local03, objptr
171cc     0C 4E 85 F1 | 	sub	fp, #12
171d0     0C 2A 06 F1 | 	add	local03, #12
171d4     15 2D 62 FC | 	wrlong	local04, local03
171d8     14 00 00 FF 
171dc     38 E5 85 F1 | 	sub	objptr, ##10552
171e0                 | LR__1921
171e0                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
171e0     48 4E 05 F1 | 	add	fp, #72
171e4     A7 12 02 FB | 	rdlong	arg01, fp
171e8     48 4E 85 F1 | 	sub	fp, #72
171ec     00 14 06 F6 | 	mov	arg02, #0
171f0     01 16 06 F6 | 	mov	arg03, #1
171f4     3C 1A B1 FD | 	call	#__system___float_cmp
171f8     00 FA 55 F2 | 	cmps	result1, #0 wc
171fc     24 00 90 CD |  if_b	jmp	#LR__1922
17200     48 4E 05 F1 | 	add	fp, #72
17204     A7 12 02 FB | 	rdlong	arg01, fp
17208     48 4E 85 F1 | 	sub	fp, #72
1720c     00 00 21 FF 
17210     00 14 06 F6 | 	mov	arg02, ##1107296256
17214     01 16 66 F6 | 	neg	arg03, #1
17218     18 1A B1 FD | 	call	#__system___float_cmp
1721c     01 FA 55 F2 | 	cmps	result1, #1 wc
17220     48 00 90 CD |  if_b	jmp	#LR__1923
17224                 | LR__1922
17224     0C 4E 05 F1 | 	add	fp, #12
17228     A7 2A 02 FB | 	rdlong	local03, fp
1722c     15 33 02 F6 | 	mov	local07, local03
17230     01 32 66 F0 | 	shl	local07, #1
17234     15 33 02 F1 | 	add	local07, local03
17238     03 32 66 F0 | 	shl	local07, #3
1723c     14 00 00 FF 
17240     38 E5 05 F1 | 	add	objptr, ##10552
17244     F2 32 02 F1 | 	add	local07, objptr
17248     04 32 06 F1 | 	add	local07, #4
1724c     19 2F C2 FA | 	rdbyte	local05, local07
17250     17 2D E2 F8 | 	getbyte	local04, local05, #0
17254     14 4E 05 F1 | 	add	fp, #20
17258     A7 2C 62 FC | 	wrlong	local04, fp
1725c     20 4E 85 F1 | 	sub	fp, #32
17260     14 00 00 FF 
17264     38 E5 85 F1 | 	sub	objptr, ##10552
17268     54 00 90 FD | 	jmp	#LR__1924
1726c                 | LR__1923
1726c     48 4E 05 F1 | 	add	fp, #72
17270     A7 12 02 FB | 	rdlong	arg01, fp
17274     48 4E 85 F1 | 	sub	fp, #72
17278     01 14 06 F6 | 	mov	arg02, #1
1727c     48 1A B1 FD | 	call	#__system___float_tointeger
17280     20 4E 05 F1 | 	add	fp, #32
17284     A7 FA 61 FC | 	wrlong	result1, fp
17288     14 4E 85 F1 | 	sub	fp, #20
1728c     A7 28 02 FB | 	rdlong	local02, fp
17290     14 2B 02 F6 | 	mov	local03, local02
17294     01 2A 66 F0 | 	shl	local03, #1
17298     14 2B 02 F1 | 	add	local03, local02
1729c     03 2A 66 F0 | 	shl	local03, #3
172a0     14 00 00 FF 
172a4     38 E5 05 F1 | 	add	objptr, ##10552
172a8     F2 2A 02 F1 | 	add	local03, objptr
172ac     0C 4E 85 F1 | 	sub	fp, #12
172b0     04 2A 06 F1 | 	add	local03, #4
172b4     15 FB 41 FC | 	wrbyte	result1, local03
172b8     14 00 00 FF 
172bc     38 E5 85 F1 | 	sub	objptr, ##10552
172c0                 | LR__1924
172c0                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
172c0     4C 4E 05 F1 | 	add	fp, #76
172c4     A7 12 02 FB | 	rdlong	arg01, fp
172c8     4C 4E 85 F1 | 	sub	fp, #76
172cc     00 14 06 F6 | 	mov	arg02, #0
172d0     01 16 06 F6 | 	mov	arg03, #1
172d4     5C 19 B1 FD | 	call	#__system___float_cmp
172d8     00 FA 55 F2 | 	cmps	result1, #0 wc
172dc     24 00 90 CD |  if_b	jmp	#LR__1925
172e0     4C 4E 05 F1 | 	add	fp, #76
172e4     A7 12 02 FB | 	rdlong	arg01, fp
172e8     4C 4E 85 F1 | 	sub	fp, #76
172ec     00 80 20 FF 
172f0     00 14 06 F6 | 	mov	arg02, ##1090519040
172f4     01 16 66 F6 | 	neg	arg03, #1
172f8     38 19 B1 FD | 	call	#__system___float_cmp
172fc     01 FA 55 F2 | 	cmps	result1, #1 wc
17300     48 00 90 CD |  if_b	jmp	#LR__1926
17304                 | LR__1925
17304     0C 4E 05 F1 | 	add	fp, #12
17308     A7 2A 02 FB | 	rdlong	local03, fp
1730c     15 33 02 F6 | 	mov	local07, local03
17310     01 32 66 F0 | 	shl	local07, #1
17314     15 33 02 F1 | 	add	local07, local03
17318     03 32 66 F0 | 	shl	local07, #3
1731c     14 00 00 FF 
17320     38 E5 05 F1 | 	add	objptr, ##10552
17324     F2 32 02 F1 | 	add	local07, objptr
17328     05 32 06 F1 | 	add	local07, #5
1732c     19 2F C2 FA | 	rdbyte	local05, local07
17330     17 2D E2 F8 | 	getbyte	local04, local05, #0
17334     18 4E 05 F1 | 	add	fp, #24
17338     A7 2C 62 FC | 	wrlong	local04, fp
1733c     24 4E 85 F1 | 	sub	fp, #36
17340     14 00 00 FF 
17344     38 E5 85 F1 | 	sub	objptr, ##10552
17348     54 00 90 FD | 	jmp	#LR__1927
1734c                 | LR__1926
1734c     4C 4E 05 F1 | 	add	fp, #76
17350     A7 12 02 FB | 	rdlong	arg01, fp
17354     4C 4E 85 F1 | 	sub	fp, #76
17358     01 14 06 F6 | 	mov	arg02, #1
1735c     68 19 B1 FD | 	call	#__system___float_tointeger
17360     24 4E 05 F1 | 	add	fp, #36
17364     A7 FA 61 FC | 	wrlong	result1, fp
17368     18 4E 85 F1 | 	sub	fp, #24
1736c     A7 28 02 FB | 	rdlong	local02, fp
17370     14 2B 02 F6 | 	mov	local03, local02
17374     01 2A 66 F0 | 	shl	local03, #1
17378     14 2B 02 F1 | 	add	local03, local02
1737c     03 2A 66 F0 | 	shl	local03, #3
17380     14 00 00 FF 
17384     38 E5 05 F1 | 	add	objptr, ##10552
17388     F2 2A 02 F1 | 	add	local03, objptr
1738c     0C 4E 85 F1 | 	sub	fp, #12
17390     05 2A 06 F1 | 	add	local03, #5
17394     15 FB 41 FC | 	wrbyte	result1, local03
17398     14 00 00 FF 
1739c     38 E5 85 F1 | 	sub	objptr, ##10552
173a0                 | LR__1927
173a0                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
173a0     50 4E 05 F1 | 	add	fp, #80
173a4     A7 12 02 FB | 	rdlong	arg01, fp
173a8     50 4E 85 F1 | 	sub	fp, #80
173ac     00 14 06 F6 | 	mov	arg02, #0
173b0     01 16 06 F6 | 	mov	arg03, #1
173b4     7C 18 B1 FD | 	call	#__system___float_cmp
173b8     00 FA 55 F2 | 	cmps	result1, #0 wc
173bc     24 00 90 CD |  if_b	jmp	#LR__1928
173c0     50 4E 05 F1 | 	add	fp, #80
173c4     A7 12 02 FB | 	rdlong	arg01, fp
173c8     50 4E 85 F1 | 	sub	fp, #80
173cc     00 3D 22 FF 
173d0     00 14 06 F6 | 	mov	arg02, ##1148846080
173d4     01 16 66 F6 | 	neg	arg03, #1
173d8     58 18 B1 FD | 	call	#__system___float_cmp
173dc     01 FA 55 F2 | 	cmps	result1, #1 wc
173e0     44 00 90 CD |  if_b	jmp	#LR__1929
173e4                 | LR__1928
173e4     0C 4E 05 F1 | 	add	fp, #12
173e8     A7 28 02 FB | 	rdlong	local02, fp
173ec     14 2B 02 F6 | 	mov	local03, local02
173f0     01 2A 66 F0 | 	shl	local03, #1
173f4     14 2B 02 F1 | 	add	local03, local02
173f8     03 2A 66 F0 | 	shl	local03, #3
173fc     14 00 00 FF 
17400     38 E5 05 F1 | 	add	objptr, ##10552
17404     F2 2A 02 F1 | 	add	local03, objptr
17408     08 2A 06 F1 | 	add	local03, #8
1740c     15 31 02 FB | 	rdlong	local06, local03
17410     6C 4E 05 F1 | 	add	fp, #108
17414     A7 30 62 FC | 	wrlong	local06, fp
17418     78 4E 85 F1 | 	sub	fp, #120
1741c     14 00 00 FF 
17420     38 E5 85 F1 | 	sub	objptr, ##10552
17424     48 00 90 FD | 	jmp	#LR__1930
17428                 | LR__1929
17428     50 4E 05 F1 | 	add	fp, #80
1742c     A7 30 02 FB | 	rdlong	local06, fp
17430     28 4E 05 F1 | 	add	fp, #40
17434     A7 30 62 FC | 	wrlong	local06, fp
17438     6C 4E 85 F1 | 	sub	fp, #108
1743c     A7 28 02 FB | 	rdlong	local02, fp
17440     14 2B 02 F6 | 	mov	local03, local02
17444     01 2A 66 F0 | 	shl	local03, #1
17448     14 2B 02 F1 | 	add	local03, local02
1744c     03 2A 66 F0 | 	shl	local03, #3
17450     14 00 00 FF 
17454     38 E5 05 F1 | 	add	objptr, ##10552
17458     F2 2A 02 F1 | 	add	local03, objptr
1745c     0C 4E 85 F1 | 	sub	fp, #12
17460     08 2A 06 F1 | 	add	local03, #8
17464     15 31 62 FC | 	wrlong	local06, local03
17468     14 00 00 FF 
1746c     38 E5 85 F1 | 	sub	objptr, ##10552
17470                 | LR__1930
17470                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
17470     54 4E 05 F1 | 	add	fp, #84
17474     A7 12 02 FB | 	rdlong	arg01, fp
17478     54 4E 85 F1 | 	sub	fp, #84
1747c     00 C0 5F FF 
17480     00 14 06 F6 | 	mov	arg02, ##-1082130432
17484     01 16 06 F6 | 	mov	arg03, #1
17488     A8 17 B1 FD | 	call	#__system___float_cmp
1748c     00 FA 55 F2 | 	cmps	result1, #0 wc
17490     24 00 90 CD |  if_b	jmp	#LR__1931
17494     54 4E 05 F1 | 	add	fp, #84
17498     A7 12 02 FB | 	rdlong	arg01, fp
1749c     54 4E 85 F1 | 	sub	fp, #84
174a0     00 C0 1F FF 
174a4     00 14 06 F6 | 	mov	arg02, ##1065353216
174a8     01 16 66 F6 | 	neg	arg03, #1
174ac     84 17 B1 FD | 	call	#__system___float_cmp
174b0     01 FA 55 F2 | 	cmps	result1, #1 wc
174b4     44 00 90 CD |  if_b	jmp	#LR__1932
174b8                 | LR__1931
174b8     0C 4E 05 F1 | 	add	fp, #12
174bc     A7 28 02 FB | 	rdlong	local02, fp
174c0     14 2B 02 F6 | 	mov	local03, local02
174c4     01 2A 66 F0 | 	shl	local03, #1
174c8     14 2B 02 F1 | 	add	local03, local02
174cc     03 2A 66 F0 | 	shl	local03, #3
174d0     14 00 00 FF 
174d4     38 E5 05 F1 | 	add	objptr, ##10552
174d8     F2 2A 02 F1 | 	add	local03, objptr
174dc     10 2A 06 F1 | 	add	local03, #16
174e0     15 31 02 FB | 	rdlong	local06, local03
174e4     64 4E 05 F1 | 	add	fp, #100
174e8     A7 30 62 FC | 	wrlong	local06, fp
174ec     70 4E 85 F1 | 	sub	fp, #112
174f0     14 00 00 FF 
174f4     38 E5 85 F1 | 	sub	objptr, ##10552
174f8     48 00 90 FD | 	jmp	#LR__1933
174fc                 | LR__1932
174fc     54 4E 05 F1 | 	add	fp, #84
17500     A7 30 02 FB | 	rdlong	local06, fp
17504     1C 4E 05 F1 | 	add	fp, #28
17508     A7 30 62 FC | 	wrlong	local06, fp
1750c     64 4E 85 F1 | 	sub	fp, #100
17510     A7 28 02 FB | 	rdlong	local02, fp
17514     14 2B 02 F6 | 	mov	local03, local02
17518     01 2A 66 F0 | 	shl	local03, #1
1751c     14 2B 02 F1 | 	add	local03, local02
17520     03 2A 66 F0 | 	shl	local03, #3
17524     14 00 00 FF 
17528     38 E5 05 F1 | 	add	objptr, ##10552
1752c     F2 2A 02 F1 | 	add	local03, objptr
17530     0C 4E 85 F1 | 	sub	fp, #12
17534     10 2A 06 F1 | 	add	local03, #16
17538     15 31 62 FC | 	wrlong	local06, local03
1753c     14 00 00 FF 
17540     38 E5 85 F1 | 	sub	objptr, ##10552
17544                 | LR__1933
17544                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
17544     58 4E 05 F1 | 	add	fp, #88
17548     A7 12 02 FB | 	rdlong	arg01, fp
1754c     58 4E 85 F1 | 	sub	fp, #88
17550     00 14 06 F6 | 	mov	arg02, #0
17554     01 16 06 F6 | 	mov	arg03, #1
17558     D8 16 B1 FD | 	call	#__system___float_cmp
1755c     00 FA 55 F2 | 	cmps	result1, #0 wc
17560     24 00 90 CD |  if_b	jmp	#LR__1934
17564     58 4E 05 F1 | 	add	fp, #88
17568     A7 12 02 FB | 	rdlong	arg01, fp
1756c     58 4E 85 F1 | 	sub	fp, #88
17570     80 BF 21 FF 
17574     00 14 06 F6 | 	mov	arg02, ##1132396544
17578     01 16 66 F6 | 	neg	arg03, #1
1757c     B4 16 B1 FD | 	call	#__system___float_cmp
17580     01 FA 55 F2 | 	cmps	result1, #1 wc
17584     44 00 90 CD |  if_b	jmp	#LR__1935
17588                 | LR__1934
17588     0C 4E 05 F1 | 	add	fp, #12
1758c     A7 2A 02 FB | 	rdlong	local03, fp
17590     15 33 02 F6 | 	mov	local07, local03
17594     01 32 66 F0 | 	shl	local07, #1
17598     15 33 02 F1 | 	add	local07, local03
1759c     03 32 66 F0 | 	shl	local07, #3
175a0     14 00 00 FF 
175a4     38 E5 05 F1 | 	add	objptr, ##10552
175a8     F2 32 02 F1 | 	add	local07, objptr
175ac     14 32 06 F1 | 	add	local07, #20
175b0     19 2D E2 FA | 	rdword	local04, local07
175b4     20 4E 05 F1 | 	add	fp, #32
175b8     A7 2C 62 FC | 	wrlong	local04, fp
175bc     2C 4E 85 F1 | 	sub	fp, #44
175c0     14 00 00 FF 
175c4     38 E5 85 F1 | 	sub	objptr, ##10552
175c8     54 00 90 FD | 	jmp	#LR__1936
175cc                 | LR__1935
175cc     58 4E 05 F1 | 	add	fp, #88
175d0     A7 12 02 FB | 	rdlong	arg01, fp
175d4     58 4E 85 F1 | 	sub	fp, #88
175d8     01 14 06 F6 | 	mov	arg02, #1
175dc     E8 16 B1 FD | 	call	#__system___float_tointeger
175e0     2C 4E 05 F1 | 	add	fp, #44
175e4     A7 FA 61 FC | 	wrlong	result1, fp
175e8     20 4E 85 F1 | 	sub	fp, #32
175ec     A7 28 02 FB | 	rdlong	local02, fp
175f0     14 2B 02 F6 | 	mov	local03, local02
175f4     01 2A 66 F0 | 	shl	local03, #1
175f8     14 2B 02 F1 | 	add	local03, local02
175fc     03 2A 66 F0 | 	shl	local03, #3
17600     14 00 00 FF 
17604     38 E5 05 F1 | 	add	objptr, ##10552
17608     F2 2A 02 F1 | 	add	local03, objptr
1760c     0C 4E 85 F1 | 	sub	fp, #12
17610     14 2A 06 F1 | 	add	local03, #20
17614     15 FB 51 FC | 	wrword	result1, local03
17618     14 00 00 FF 
1761c     38 E5 85 F1 | 	sub	objptr, ##10552
17620                 | LR__1936
17620     6C 4E 05 F1 | 	add	fp, #108
17624     A7 14 02 FB | 	rdlong	arg02, fp
17628     6C 4E 85 F1 | 	sub	fp, #108
1762c     FC 16 20 FF 
17630     54 12 06 F6 | 	mov	arg01, ##1076754516
17634     98 21 B1 FD | 	call	#__system____builtin_logbase
17638     FD 2C 02 F6 | 	mov	local04, result1
1763c     1E 14 C6 F9 | 	decod	arg02, #30
17640     FC 16 20 FF 
17644     54 12 06 F6 | 	mov	arg01, ##1076754516
17648     84 21 B1 FD | 	call	#__system____builtin_logbase
1764c     FD 14 02 F6 | 	mov	arg02, result1
17650     16 13 02 F6 | 	mov	arg01, local04
17654     AC 13 B1 FD | 	call	#__system___float_div
17658     FD 12 02 F6 | 	mov	arg01, result1
1765c     00 14 06 F6 | 	mov	arg02, #0
17660     64 16 B1 FD | 	call	#__system___float_tointeger
17664     30 4E 05 F1 | 	add	fp, #48
17668     A7 FA 61 FC | 	wrlong	result1, fp
1766c     1E 2C C6 F9 | 	decod	local04, #30
17670     FD 12 02 F6 | 	mov	arg01, result1
17674     30 4E 85 F1 | 	sub	fp, #48
17678     05 12 06 F1 | 	add	arg01, #5
1767c     09 13 52 F6 | 	abs	arg01, arg01 wc
17680     1F 34 C6 C9 |  if_b	decod	local08, #31
17684     00 34 06 36 |  if_ae	mov	local08, #0
17688     70 0D B1 FD | 	call	#__system___float_fromuns
1768c     1A FB 61 F5 | 	xor	result1, local08
17690     FD 14 02 F6 | 	mov	arg02, result1
17694     16 13 02 F6 | 	mov	arg01, local04
17698     6C 20 B1 FD | 	call	#__system____builtin_powf
1769c     FD 12 02 F6 | 	mov	arg01, result1
176a0     01 14 06 F6 | 	mov	arg02, #1
176a4     20 16 B1 FD | 	call	#__system___float_tointeger
176a8     10 4E 05 F1 | 	add	fp, #16
176ac     A7 FA 61 FC | 	wrlong	result1, fp
176b0                 | ' skip=round(2^(lfreq+5))
176b0                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
176b0     10 4E 85 F1 | 	sub	fp, #16
176b4     40 00 00 FF 
176b8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
176bc     30 00 90 CD |  if_b	jmp	#LR__1937
176c0     10 4E 05 F1 | 	add	fp, #16
176c4     A7 26 02 FB | 	rdlong	local01, fp
176c8     13 2D 52 F6 | 	abs	local04, local01 wc
176cc     0F 2C 46 F0 | 	shr	local04, #15
176d0     16 2D 82 F6 | 	negc	local04, local04
176d4     0C 4E 85 F1 | 	sub	fp, #12
176d8     A7 2C 62 FC | 	wrlong	local04, fp
176dc     0C 4E 05 F1 | 	add	fp, #12
176e0     40 00 80 FF 
176e4     A7 00 68 FC | 	wrlong	##32768, fp
176e8     10 4E 85 F1 | 	sub	fp, #16
176ec     0C 00 90 FD | 	jmp	#LR__1938
176f0                 | LR__1937
176f0     04 4E 05 F1 | 	add	fp, #4
176f4     A7 02 68 FC | 	wrlong	#1, fp
176f8     04 4E 85 F1 | 	sub	fp, #4
176fc                 | LR__1938
176fc     6C 4E 05 F1 | 	add	fp, #108
17700     A7 14 02 FB | 	rdlong	arg02, fp
17704     6C 4E 85 F1 | 	sub	fp, #108
17708     3E 2C 25 FF 
1770c     3C 12 06 F6 | 	mov	arg01, ##1247312956
17710     F0 12 B1 FD | 	call	#__system___float_div
17714     FD 2C 02 F6 | 	mov	local04, result1
17718     04 4E 05 F1 | 	add	fp, #4
1771c     A7 12 02 FB | 	rdlong	arg01, fp
17720     04 4E 85 F1 | 	sub	fp, #4
17724     09 13 52 F6 | 	abs	arg01, arg01 wc
17728     1F 34 C6 C9 |  if_b	decod	local08, #31
1772c     00 34 06 36 |  if_ae	mov	local08, #0
17730     C8 0C B1 FD | 	call	#__system___float_fromuns
17734     1A FB 61 F5 | 	xor	result1, local08
17738     FD 26 02 F6 | 	mov	local01, result1
1773c     1E 28 C6 F9 | 	decod	local02, #30
17740     0D 12 06 F6 | 	mov	arg01, #13
17744     30 4E 05 F1 | 	add	fp, #48
17748     A7 30 02 FB | 	rdlong	local06, fp
1774c     30 4E 85 F1 | 	sub	fp, #48
17750     18 13 82 F1 | 	sub	arg01, local06
17754     09 13 52 F6 | 	abs	arg01, arg01 wc
17758     1F 34 C6 C9 |  if_b	decod	local08, #31
1775c     00 34 06 36 |  if_ae	mov	local08, #0
17760     98 0C B1 FD | 	call	#__system___float_fromuns
17764     1A FB 61 F5 | 	xor	result1, local08
17768     FD 14 02 F6 | 	mov	arg02, result1
1776c     14 13 02 F6 | 	mov	arg01, local02
17770     94 1F B1 FD | 	call	#__system____builtin_powf
17774     FD 14 02 F6 | 	mov	arg02, result1
17778     13 13 02 F6 | 	mov	arg01, local01
1777c     80 10 B1 FD | 	call	#__system___float_mul
17780     FD 14 02 F6 | 	mov	arg02, result1
17784     16 13 02 F6 | 	mov	arg01, local04
17788     78 12 B1 FD | 	call	#__system___float_div
1778c     FD 12 02 F6 | 	mov	arg01, result1
17790     01 14 06 F6 | 	mov	arg02, #1
17794     30 15 B1 FD | 	call	#__system___float_tointeger
17798     34 4E 05 F1 | 	add	fp, #52
1779c     A7 FA 61 FC | 	wrlong	result1, fp
177a0     34 4E 05 F1 | 	add	fp, #52
177a4     A7 12 02 FB | 	rdlong	arg01, fp
177a8     10 4E 05 F1 | 	add	fp, #16
177ac     A7 14 02 FB | 	rdlong	arg02, fp
177b0     78 4E 85 F1 | 	sub	fp, #120
177b4     4C 12 B1 FD | 	call	#__system___float_div
177b8     FD 12 02 F6 | 	mov	arg01, result1
177bc     01 14 06 F6 | 	mov	arg02, #1
177c0     04 15 B1 FD | 	call	#__system___float_tointeger
177c4     FD 2C 02 F6 | 	mov	local04, result1
177c8     14 4E 05 F1 | 	add	fp, #20
177cc     A7 2C 62 FC | 	wrlong	local04, fp
177d0     5C 4E 05 F1 | 	add	fp, #92
177d4     A7 14 02 FB | 	rdlong	arg02, fp
177d8     70 4E 85 F1 | 	sub	fp, #112
177dc     00 00 23 FF 
177e0     00 12 06 F6 | 	mov	arg01, ##1174405120
177e4     18 10 B1 FD | 	call	#__system___float_mul
177e8     FD 12 02 F6 | 	mov	arg01, result1
177ec     01 14 06 F6 | 	mov	arg02, #1
177f0     D4 14 B1 FD | 	call	#__system___float_tointeger
177f4     0D 2C C6 F9 | 	decod	local04, #13
177f8     FD 2C 02 F1 | 	add	local04, result1
177fc     18 4E 05 F1 | 	add	fp, #24
17800     A7 2C 62 FC | 	wrlong	local04, fp
17804     5C 4E 05 F1 | 	add	fp, #92
17808     A7 14 02 FB | 	rdlong	arg02, fp
1780c     74 4E 85 F1 | 	sub	fp, #116
17810     00 3D 22 FF 
17814     00 12 06 F6 | 	mov	arg01, ##1148846080
17818     E4 0F B1 FD | 	call	#__system___float_mul
1781c     FD 12 02 F6 | 	mov	arg01, result1
17820     01 14 06 F6 | 	mov	arg02, #1
17824     A0 14 B1 FD | 	call	#__system___float_tointeger
17828     1C 4E 05 F1 | 	add	fp, #28
1782c     A7 FA 61 FC | 	wrlong	result1, fp
17830     37 00 00 FF 
17834     10 E4 05 F1 | 	add	objptr, ##28176
17838     F2 2C 02 FB | 	rdlong	local04, objptr
1783c     37 00 00 FF 
17840     10 E4 85 F1 | 	sub	objptr, ##28176
17844     10 4E 85 F1 | 	sub	fp, #16
17848     A7 28 02 FB | 	rdlong	local02, fp
1784c     06 28 66 F0 | 	shl	local02, #6
17850     14 2D 02 F1 | 	add	local04, local02
17854     04 4E 85 F1 | 	sub	fp, #4
17858     A7 2C 62 FC | 	wrlong	local04, fp
1785c                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
1785c                 | ' speed=round(speed_coeff/slen)
1785c                 | ' ipan=8192+round(8192*pan)
1785c                 | ' ivol=round(1000.0*vol)
1785c                 | ' base2=base+64*channel
1785c                 | ' if wave <32 then 
1785c     18 4E 05 F1 | 	add	fp, #24
17860     A7 2C 02 FB | 	rdlong	local04, fp
17864     20 4E 85 F1 | 	sub	fp, #32
17868     20 2C 56 F2 | 	cmps	local04, #32 wc
1786c     2C 00 90 3D |  if_ae	jmp	#LR__1939
17870     08 4E 05 F1 | 	add	fp, #8
17874     A7 12 02 FB | 	rdlong	arg01, fp
17878     08 12 06 F1 | 	add	arg01, #8
1787c     18 4E 05 F1 | 	add	fp, #24
17880     A7 14 02 FB | 	rdlong	arg02, fp
17884     20 4E 85 F1 | 	sub	fp, #32
17888     0B 14 66 F0 | 	shl	arg02, #11
1788c     00 00 60 FF 
17890     00 14 06 F1 | 	add	arg02, ##-1073741824
17894     09 15 62 FC | 	wrlong	arg02, arg01
17898     18 00 90 FD | 	jmp	#LR__1940
1789c                 | LR__1939
1789c     08 4E 05 F1 | 	add	fp, #8
178a0     A7 12 02 FB | 	rdlong	arg01, fp
178a4     08 4E 85 F1 | 	sub	fp, #8
178a8     08 12 06 F1 | 	add	arg01, #8
178ac     00 00 E4 FF 
178b0     09 01 68 FC | 	wrlong	##-939524096, arg01
178b4                 | LR__1940
178b4     08 4E 05 F1 | 	add	fp, #8
178b8     A7 12 02 FB | 	rdlong	arg01, fp
178bc     10 12 06 F1 | 	add	arg01, #16
178c0     04 00 80 FF 
178c4     09 01 68 FC | 	wrlong	##2048, arg01
178c8     A7 12 02 FB | 	rdlong	arg01, fp
178cc     0C 12 06 F1 | 	add	arg01, #12
178d0     09 01 68 FC | 	wrlong	#0, arg01
178d4     A7 12 02 FB | 	rdlong	arg01, fp
178d8     14 12 06 F1 | 	add	arg01, #20
178dc     14 4E 05 F1 | 	add	fp, #20
178e0     A7 14 02 FB | 	rdlong	arg02, fp
178e4     09 15 52 FC | 	wrword	arg02, arg01
178e8     14 4E 85 F1 | 	sub	fp, #20
178ec     A7 12 02 FB | 	rdlong	arg01, fp
178f0     16 12 06 F1 | 	add	arg01, #22
178f4     10 4E 05 F1 | 	add	fp, #16
178f8     A7 14 02 FB | 	rdlong	arg02, fp
178fc     09 15 52 FC | 	wrword	arg02, arg01
17900                 | ' lpoke base2+16,2048
17900                 | ' lpoke base2+12,0
17900                 | ' dpoke base2+20,ivol 
17900                 | ' dpoke base2+22,ipan 
17900                 | ' if wave<32 then
17900     08 4E 05 F1 | 	add	fp, #8
17904     A7 2C 02 FB | 	rdlong	local04, fp
17908     20 4E 85 F1 | 	sub	fp, #32
1790c     20 2C 56 F2 | 	cmps	local04, #32 wc
17910     38 00 90 3D |  if_ae	jmp	#LR__1941
17914     08 4E 05 F1 | 	add	fp, #8
17918     A7 12 02 FB | 	rdlong	arg01, fp
1791c     18 12 06 F1 | 	add	arg01, #24
17920     2C 4E 05 F1 | 	add	fp, #44
17924     A7 14 02 FB | 	rdlong	arg02, fp
17928     09 15 52 FC | 	wrword	arg02, arg01
1792c     2C 4E 85 F1 | 	sub	fp, #44
17930     A7 12 02 FB | 	rdlong	arg01, fp
17934     1A 12 06 F1 | 	add	arg01, #26
17938     08 4E 05 F1 | 	add	fp, #8
1793c     A7 14 02 FB | 	rdlong	arg02, fp
17940     10 4E 85 F1 | 	sub	fp, #16
17944     09 15 52 FC | 	wrword	arg02, arg01
17948     48 00 90 FD | 	jmp	#LR__1942
1794c                 | LR__1941
1794c     08 4E 05 F1 | 	add	fp, #8
17950     A7 2C 02 FB | 	rdlong	local04, fp
17954     18 2C 06 F1 | 	add	local04, #24
17958     64 4E 05 F1 | 	add	fp, #100
1795c     A7 14 02 FB | 	rdlong	arg02, fp
17960     6C 4E 85 F1 | 	sub	fp, #108
17964     3E 2C 25 FF 
17968     3C 12 06 F6 | 	mov	arg01, ##1247312956
1796c     94 10 B1 FD | 	call	#__system___float_div
17970     FD 12 02 F6 | 	mov	arg01, result1
17974     01 14 06 F6 | 	mov	arg02, #1
17978     4C 13 B1 FD | 	call	#__system___float_tointeger
1797c     16 FB 51 FC | 	wrword	result1, local04
17980     08 4E 05 F1 | 	add	fp, #8
17984     A7 12 02 FB | 	rdlong	arg01, fp
17988     08 4E 85 F1 | 	sub	fp, #8
1798c     1A 12 06 F1 | 	add	arg01, #26
17990     09 01 5A FC | 	wrword	#256, arg01
17994                 | LR__1942
17994     08 4E 05 F1 | 	add	fp, #8
17998     A7 12 02 FB | 	rdlong	arg01, fp
1799c     1C 12 06 F1 | 	add	arg01, #28
179a0     09 01 68 FC | 	wrlong	#0, arg01
179a4     A7 12 02 FB | 	rdlong	arg01, fp
179a8     20 12 06 F1 | 	add	arg01, #32
179ac     09 01 68 FC | 	wrlong	#0, arg01
179b0                 | ' lpoke base2+28,$0000_0000
179b0                 | ' lpoke base2+32,0 
179b0                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
179b0     1C 4E 05 F1 | 	add	fp, #28
179b4     A7 2C 02 FB | 	rdlong	local04, fp
179b8     24 4E 85 F1 | 	sub	fp, #36
179bc     08 2C 0E F2 | 	cmp	local04, #8 wz
179c0     18 00 90 5D |  if_ne	jmp	#LR__1943
179c4     08 4E 05 F1 | 	add	fp, #8
179c8     A7 12 02 FB | 	rdlong	arg01, fp
179cc     08 4E 85 F1 | 	sub	fp, #8
179d0     24 12 06 F1 | 	add	arg01, #36
179d4     09 01 68 FC | 	wrlong	#0, arg01
179d8     34 00 90 FD | 	jmp	#LR__1944
179dc                 | LR__1943
179dc     08 4E 05 F1 | 	add	fp, #8
179e0     A7 12 02 FB | 	rdlong	arg01, fp
179e4     24 12 06 F1 | 	add	arg01, #36
179e8     1C 4E 05 F1 | 	add	fp, #28
179ec     A7 14 02 FB | 	rdlong	arg02, fp
179f0     24 4E 85 F1 | 	sub	fp, #36
179f4     09 14 66 F0 | 	shl	arg02, #9
179f8     0C 00 00 FF 
179fc     D8 E4 05 F1 | 	add	objptr, ##6360
17a00     F2 14 02 F1 | 	add	arg02, objptr
17a04     0C 00 00 FF 
17a08     D8 E4 85 F1 | 	sub	objptr, ##6360
17a0c     09 15 62 FC | 	wrlong	arg02, arg01
17a10                 | LR__1944
17a10     08 4E 05 F1 | 	add	fp, #8
17a14     A7 12 02 FB | 	rdlong	arg01, fp
17a18     28 12 06 F1 | 	add	arg01, #40
17a1c     0C 4E 05 F1 | 	add	fp, #12
17a20     A7 14 02 FB | 	rdlong	arg02, fp
17a24     09 15 62 FC | 	wrlong	arg02, arg01
17a28     0C 4E 85 F1 | 	sub	fp, #12
17a2c     A7 12 02 FB | 	rdlong	arg01, fp
17a30     2C 12 06 F1 | 	add	arg01, #44
17a34     24 4E 05 F1 | 	add	fp, #36
17a38     A7 14 02 FB | 	rdlong	arg02, fp
17a3c     09 15 62 FC | 	wrlong	arg02, arg01
17a40                 | ' lpoke base2+40,speed 
17a40                 | ' lpoke base2+44,sus 
17a40                 | ' if delay>0 then waitms(delay) 
17a40     04 4E 85 F1 | 	sub	fp, #4
17a44     A7 2C 02 FB | 	rdlong	local04, fp
17a48     28 4E 85 F1 | 	sub	fp, #40
17a4c     01 2C 56 F2 | 	cmps	local04, #1 wc
17a50     28 4E 05 31 |  if_ae	add	fp, #40
17a54     A7 12 02 3B |  if_ae	rdlong	arg01, fp
17a58     28 4E 85 31 |  if_ae	sub	fp, #40
17a5c     1C E2 B0 3D |  if_ae	call	#__system___waitms
17a60     A7 F0 03 F6 | 	mov	ptra, fp
17a64     B2 00 A0 FD | 	call	#popregs_
17a68                 | _do_play_ret
17a68     2D 00 64 FD | 	ret
17a6c                 | 
17a6c                 | ' 
17a6c                 | ' '-------------------- plot
17a6c                 | ' 
17a6c                 | ' sub do_plot
17a6c                 | _do_plot
17a6c     00 4A 05 F6 | 	mov	COUNT_, #0
17a70     A8 00 A0 FD | 	call	#pushregs_
17a74     20 F0 07 F1 | 	add	ptra, #32
17a78     04 52 BF FD | 	call	#_pop
17a7c     FD 16 02 F6 | 	mov	arg03, result1
17a80     FE 14 02 F6 | 	mov	arg02, result2
17a84     FF 12 02 F6 | 	mov	arg01, result3
17a88     0C 4E 05 F1 | 	add	fp, #12
17a8c     A7 16 62 FC | 	wrlong	arg03, fp
17a90     04 4E 05 F1 | 	add	fp, #4
17a94     A7 14 62 FC | 	wrlong	arg02, fp
17a98     04 4E 05 F1 | 	add	fp, #4
17a9c     A7 12 62 FC | 	wrlong	arg01, fp
17aa0     14 4E 85 F1 | 	sub	fp, #20
17aa4     D8 51 BF FD | 	call	#_pop
17aa8     FF 16 02 F6 | 	mov	arg03, result3
17aac     A7 FA 61 FC | 	wrlong	result1, fp
17ab0     04 4E 05 F1 | 	add	fp, #4
17ab4     A7 FC 61 FC | 	wrlong	result2, fp
17ab8     04 4E 05 F1 | 	add	fp, #4
17abc     A7 16 62 FC | 	wrlong	arg03, fp
17ac0     08 4E 85 F1 | 	sub	fp, #8
17ac4     A7 12 02 F6 | 	mov	arg01, fp
17ac8     98 53 BF FD | 	call	#_converttoint
17acc     18 4E 05 F1 | 	add	fp, #24
17ad0     A7 FA 61 FC | 	wrlong	result1, fp
17ad4     0C 4E 85 F1 | 	sub	fp, #12
17ad8     A7 12 02 F6 | 	mov	arg01, fp
17adc     0C 4E 85 F1 | 	sub	fp, #12
17ae0     80 53 BF FD | 	call	#_converttoint
17ae4     1C 4E 05 F1 | 	add	fp, #28
17ae8     A7 FA 61 FC | 	wrlong	result1, fp
17aec     04 4E 85 F1 | 	sub	fp, #4
17af0     A7 16 02 FB | 	rdlong	arg03, fp
17af4     37 00 00 FF 
17af8     2C E4 05 F1 | 	add	objptr, ##28204
17afc     F2 16 62 FC | 	wrlong	arg03, objptr
17b00     04 4E 05 F1 | 	add	fp, #4
17b04     A7 14 02 FB | 	rdlong	arg02, fp
17b08     1C 4E 85 F1 | 	sub	fp, #28
17b0c     04 E4 05 F1 | 	add	objptr, #4
17b10     F2 14 62 FC | 	wrlong	arg02, objptr
17b14     04 E4 85 F1 | 	sub	objptr, #4
17b18     F2 12 02 FB | 	rdlong	arg01, objptr
17b1c     04 E4 85 F1 | 	sub	objptr, #4
17b20     F2 16 02 FB | 	rdlong	arg03, objptr
17b24     37 00 00 FF 
17b28     28 E4 85 F1 | 	sub	objptr, ##28200
17b2c     00 B5 B0 FD | 	call	#_hg010b_spin2_putpixel
17b30     A7 F0 03 F6 | 	mov	ptra, fp
17b34     B2 00 A0 FD | 	call	#popregs_
17b38                 | _do_plot_ret
17b38     2D 00 64 FD | 	ret
17b3c                 | 
17b3c                 | ' 
17b3c                 | ' '-------------------- poke
17b3c                 | ' 
17b3c                 | ' sub do_poke
17b3c                 | _do_poke
17b3c     01 4A 05 F6 | 	mov	COUNT_, #1
17b40     A8 00 A0 FD | 	call	#pushregs_
17b44     20 F0 07 F1 | 	add	ptra, #32
17b48     34 51 BF FD | 	call	#_pop
17b4c     FD 14 02 F6 | 	mov	arg02, result1
17b50     FE 12 02 F6 | 	mov	arg01, result2
17b54     FF 26 02 F6 | 	mov	local01, result3
17b58     A7 14 62 FC | 	wrlong	arg02, fp
17b5c     04 4E 05 F1 | 	add	fp, #4
17b60     A7 12 62 FC | 	wrlong	arg01, fp
17b64     04 4E 05 F1 | 	add	fp, #4
17b68     A7 26 62 FC | 	wrlong	local01, fp
17b6c     08 4E 85 F1 | 	sub	fp, #8
17b70     0C 51 BF FD | 	call	#_pop
17b74     FF 26 02 F6 | 	mov	local01, result3
17b78     0C 4E 05 F1 | 	add	fp, #12
17b7c     A7 FA 61 FC | 	wrlong	result1, fp
17b80     04 4E 05 F1 | 	add	fp, #4
17b84     A7 FC 61 FC | 	wrlong	result2, fp
17b88     04 4E 05 F1 | 	add	fp, #4
17b8c     A7 26 62 FC | 	wrlong	local01, fp
17b90     08 4E 85 F1 | 	sub	fp, #8
17b94     A7 12 02 F6 | 	mov	arg01, fp
17b98     0C 4E 85 F1 | 	sub	fp, #12
17b9c     C4 52 BF FD | 	call	#_converttoint
17ba0     18 4E 05 F1 | 	add	fp, #24
17ba4     A7 FA 61 FC | 	wrlong	result1, fp
17ba8     18 4E 85 F1 | 	sub	fp, #24
17bac     A7 12 02 F6 | 	mov	arg01, fp
17bb0     B0 52 BF FD | 	call	#_converttoint
17bb4     1C 4E 05 F1 | 	add	fp, #28
17bb8     A7 FA 61 FC | 	wrlong	result1, fp
17bbc                 | ' t1=pop() 'value
17bbc                 | ' t2=pop() 
17bbc                 | ' a=converttoint(t2) : v=converttoint(t1)
17bbc                 | ' if a<$80000 then poke a,v else pspoke a,v
17bbc     04 4E 85 F1 | 	sub	fp, #4
17bc0     A7 26 02 FB | 	rdlong	local01, fp
17bc4     18 4E 85 F1 | 	sub	fp, #24
17bc8     00 04 00 FF 
17bcc     00 26 16 F2 | 	cmp	local01, ##524288 wc
17bd0     1C 00 90 3D |  if_ae	jmp	#LR__1950
17bd4     18 4E 05 F1 | 	add	fp, #24
17bd8     A7 12 02 FB | 	rdlong	arg01, fp
17bdc     04 4E 05 F1 | 	add	fp, #4
17be0     A7 14 02 FB | 	rdlong	arg02, fp
17be4     1C 4E 85 F1 | 	sub	fp, #28
17be8     09 15 42 FC | 	wrbyte	arg02, arg01
17bec     18 00 90 FD | 	jmp	#LR__1951
17bf0                 | LR__1950
17bf0     18 4E 05 F1 | 	add	fp, #24
17bf4     A7 12 02 FB | 	rdlong	arg01, fp
17bf8     04 4E 05 F1 | 	add	fp, #4
17bfc     A7 14 02 FB | 	rdlong	arg02, fp
17c00     1C 4E 85 F1 | 	sub	fp, #28
17c04     C4 A5 B0 FD | 	call	#_pspoke
17c08                 | LR__1951
17c08     A7 F0 03 F6 | 	mov	ptra, fp
17c0c     B2 00 A0 FD | 	call	#popregs_
17c10                 | _do_poke_ret
17c10     2D 00 64 FD | 	ret
17c14                 | 
17c14                 | ' 
17c14                 | ' '-------------------- pop
17c14                 | ' 
17c14                 | ' sub do_pop()
17c14                 | _do_pop
17c14                 | ' if gosubtop>0 then  gosubtop -=1 
17c14     50 00 00 FF 
17c18     34 E5 05 F1 | 	add	objptr, ##41268
17c1c     F2 00 02 FB | 	rdlong	_var01, objptr
17c20     50 00 00 FF 
17c24     34 E5 85 F1 | 	sub	objptr, ##41268
17c28     01 00 56 F2 | 	cmps	_var01, #1 wc
17c2c     50 00 00 3F 
17c30     34 E5 05 31 |  if_ae	add	objptr, ##41268
17c34     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
17c38     01 00 86 31 |  if_ae	sub	_var01, #1
17c3c     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
17c40     50 00 00 3F 
17c44     34 E5 85 31 |  if_ae	sub	objptr, ##41268
17c48                 | _do_pop_ret
17c48     2D 00 64 FD | 	ret
17c4c                 | 
17c4c                 | ' 
17c4c                 | ' '-------------------- position
17c4c                 | ' 
17c4c                 | ' sub do_position
17c4c                 | _do_position
17c4c     01 4A 05 F6 | 	mov	COUNT_, #1
17c50     A8 00 A0 FD | 	call	#pushregs_
17c54     18 F0 07 F1 | 	add	ptra, #24
17c58     24 50 BF FD | 	call	#_pop
17c5c     FD 14 02 F6 | 	mov	arg02, result1
17c60     FE 12 02 F6 | 	mov	arg01, result2
17c64     FF 26 02 F6 | 	mov	local01, result3
17c68     A7 14 62 FC | 	wrlong	arg02, fp
17c6c     04 4E 05 F1 | 	add	fp, #4
17c70     A7 12 62 FC | 	wrlong	arg01, fp
17c74     04 4E 05 F1 | 	add	fp, #4
17c78     A7 26 62 FC | 	wrlong	local01, fp
17c7c     08 4E 85 F1 | 	sub	fp, #8
17c80     FC 4F BF FD | 	call	#_pop
17c84     FF 26 02 F6 | 	mov	local01, result3
17c88     0C 4E 05 F1 | 	add	fp, #12
17c8c     A7 FA 61 FC | 	wrlong	result1, fp
17c90     04 4E 05 F1 | 	add	fp, #4
17c94     A7 FC 61 FC | 	wrlong	result2, fp
17c98     04 4E 05 F1 | 	add	fp, #4
17c9c     A7 26 62 FC | 	wrlong	local01, fp
17ca0     08 4E 85 F1 | 	sub	fp, #8
17ca4     A7 12 02 F6 | 	mov	arg01, fp
17ca8     0C 4E 85 F1 | 	sub	fp, #12
17cac     B4 51 BF FD | 	call	#_converttoint
17cb0     FD 26 02 F6 | 	mov	local01, result1
17cb4     A7 12 02 F6 | 	mov	arg01, fp
17cb8     A8 51 BF FD | 	call	#_converttoint
17cbc     FD 14 02 F6 | 	mov	arg02, result1
17cc0     13 13 02 F6 | 	mov	arg01, local01
17cc4     2C BF B0 FD | 	call	#_hg010b_spin2_setcursorpos
17cc8     A7 F0 03 F6 | 	mov	ptra, fp
17ccc     B2 00 A0 FD | 	call	#popregs_
17cd0                 | _do_position_ret
17cd0     2D 00 64 FD | 	ret
17cd4                 | 
17cd4                 | ' 
17cd4                 | ' '-------------------- print
17cd4                 | ' 
17cd4                 | ' sub do_print  
17cd4                 | _do_print
17cd4     0B 4A 05 F6 | 	mov	COUNT_, #11
17cd8     A8 00 A0 FD | 	call	#pushregs_
17cdc     00 2C 06 F6 | 	mov	local04, #0
17ce0     9C 4F BF FD | 	call	#_pop
17ce4     FD 2E 02 F6 | 	mov	local05, result1
17ce8     FE 30 02 F6 | 	mov	local06, result2
17cec     FF 32 02 F6 | 	mov	local07, result3
17cf0     17 27 02 F6 | 	mov	local01, local05
17cf4     18 29 02 F6 | 	mov	local02, local06
17cf8     19 2B 02 F6 | 	mov	local03, local07
17cfc                 | '  
17cfc                 | ' r=0
17cfc                 | ' t1=pop() 
17cfc                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
17cfc     21 2A 0E F2 | 	cmp	local03, #33 wz
17d00     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
17d04     20 00 90 5D |  if_ne	jmp	#LR__1960
17d08     15 2D 02 F6 | 	mov	local04, local03
17d0c     70 4F BF FD | 	call	#_pop
17d10     FD 2E 02 F6 | 	mov	local05, result1
17d14     FE 30 02 F6 | 	mov	local06, result2
17d18     FF 32 02 F6 | 	mov	local07, result3
17d1c     17 27 02 F6 | 	mov	local01, local05
17d20     18 29 02 F6 | 	mov	local02, local06
17d24     19 2B 02 F6 | 	mov	local03, local07
17d28                 | LR__1960
17d28                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
17d28     20 2A 0E F2 | 	cmp	local03, #32 wz
17d2c     15 2D 02 A6 |  if_e	mov	local04, local03
17d30                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
17d30     FF 2A 0E F2 | 	cmp	local03, #255 wz
17d34     10 00 90 5D |  if_ne	jmp	#LR__1961
17d38     13 13 02 F6 | 	mov	arg01, local01
17d3c     00 14 06 F6 | 	mov	arg02, #0
17d40     58 A2 B0 FD | 	call	#_printerror
17d44     D4 04 90 FD | 	jmp	#LR__1980
17d48                 | LR__1961
17d48                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
17d48     2B 2A 0E F2 | 	cmp	local03, #43 wz
17d4c     14 00 90 5D |  if_ne	jmp	#LR__1962
17d50     13 13 02 F6 | 	mov	arg01, local01
17d54     A0 50 BF FD | 	call	#_convertstring
17d58     FD 2E 02 F6 | 	mov	local05, result1
17d5c     17 27 02 F6 | 	mov	local01, local05
17d60     1F 2A 06 F6 | 	mov	local03, #31
17d64                 | LR__1962
17d64                 | ' 
17d64                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
17d64     2C 2A 0E F2 | 	cmp	local03, #44 wz
17d68     80 00 90 5D |  if_ne	jmp	#LR__1963
17d6c     00 12 06 F6 | 	mov	arg01, #0
17d70     3C 39 B1 FD | 	call	#__system___getiolock_0599
17d74     FD 12 02 F6 | 	mov	arg01, result1
17d78     0C DC B0 FD | 	call	#__system___lockmem
17d7c     AF 01 00 FF 
17d80     0B 15 06 F6 | 	mov	arg02, ##@LR__5910
17d84     00 12 06 F6 | 	mov	arg01, #0
17d88     00 16 06 F6 | 	mov	arg03, #0
17d8c     EC E8 B0 FD | 	call	#__system___basic_print_string
17d90     0A 34 06 F6 | 	mov	local08, #10
17d94     00 12 06 F6 | 	mov	arg01, #0
17d98     13 15 02 F6 | 	mov	arg02, local01
17d9c     00 16 06 F6 | 	mov	arg03, #0
17da0     0A 18 06 F6 | 	mov	arg04, #10
17da4     18 E9 B0 FD | 	call	#__system___basic_print_integer
17da8     FD 36 02 F6 | 	mov	local09, result1
17dac     00 12 06 F6 | 	mov	arg01, #0
17db0     0A 14 06 F6 | 	mov	arg02, #10
17db4     00 16 06 F6 | 	mov	arg03, #0
17db8     68 E8 B0 FD | 	call	#__system___basic_print_char
17dbc     01 38 06 F6 | 	mov	local10, #1
17dc0     00 12 06 F6 | 	mov	arg01, #0
17dc4     E8 38 B1 FD | 	call	#__system___getiolock_0599
17dc8     FD 00 68 FC | 	wrlong	#0, result1
17dcc     00 3A 06 F6 | 	mov	local11, #0
17dd0     AC 4E BF FD | 	call	#_pop
17dd4     FD 2E 02 F6 | 	mov	local05, result1
17dd8     FE 30 02 F6 | 	mov	local06, result2
17ddc     FF 32 02 F6 | 	mov	local07, result3
17de0     17 27 02 F6 | 	mov	local01, local05
17de4     18 29 02 F6 | 	mov	local02, local06
17de8     19 2B 02 F6 | 	mov	local03, local07
17dec                 | LR__1963
17dec                 | ' 
17dec                 | ' if r=print_mod_comma  then
17dec     21 2C 0E F2 | 	cmp	local04, #33 wz
17df0     AC 01 90 5D |  if_ne	jmp	#LR__1968
17df4                 | '   if t1.result_type=result_int then print t1.result.iresult,
17df4     1C 2A 0E F2 | 	cmp	local03, #28 wz
17df8     64 00 90 5D |  if_ne	jmp	#LR__1964
17dfc     00 12 06 F6 | 	mov	arg01, #0
17e00     AC 38 B1 FD | 	call	#__system___getiolock_0599
17e04     FD 12 02 F6 | 	mov	arg01, result1
17e08     7C DB B0 FD | 	call	#__system___lockmem
17e0c     00 30 06 F6 | 	mov	local06, #0
17e10     00 12 06 F6 | 	mov	arg01, #0
17e14     13 15 02 F6 | 	mov	arg02, local01
17e18     00 16 06 F6 | 	mov	arg03, #0
17e1c     0A 18 06 F6 | 	mov	arg04, #10
17e20     9C E8 B0 FD | 	call	#__system___basic_print_integer
17e24     FD 32 02 F6 | 	mov	local07, result1
17e28     18 2F 02 F6 | 	mov	local05, local06
17e2c     19 2F 02 F1 | 	add	local05, local07
17e30     00 3A 06 F6 | 	mov	local11, #0
17e34     00 12 06 F6 | 	mov	arg01, #0
17e38     09 14 06 F6 | 	mov	arg02, #9
17e3c     00 16 06 F6 | 	mov	arg03, #0
17e40     E0 E7 B0 FD | 	call	#__system___basic_print_char
17e44     FD 36 02 F6 | 	mov	local09, result1
17e48     FD 2E 02 F1 | 	add	local05, result1
17e4c     00 12 06 F6 | 	mov	arg01, #0
17e50     5C 38 B1 FD | 	call	#__system___getiolock_0599
17e54     FD 00 68 FC | 	wrlong	#0, result1
17e58     00 FA 05 F6 | 	mov	result1, #0
17e5c     00 38 06 F6 | 	mov	local10, #0
17e60                 | LR__1964
17e60                 | '   if t1.result_type=result_uint then print t1.result.uresult,
17e60     1D 2A 0E F2 | 	cmp	local03, #29 wz
17e64     64 00 90 5D |  if_ne	jmp	#LR__1965
17e68     00 12 06 F6 | 	mov	arg01, #0
17e6c     40 38 B1 FD | 	call	#__system___getiolock_0599
17e70     FD 12 02 F6 | 	mov	arg01, result1
17e74     10 DB B0 FD | 	call	#__system___lockmem
17e78     00 30 06 F6 | 	mov	local06, #0
17e7c     00 12 06 F6 | 	mov	arg01, #0
17e80     13 15 02 F6 | 	mov	arg02, local01
17e84     00 16 06 F6 | 	mov	arg03, #0
17e88     0A 18 06 F6 | 	mov	arg04, #10
17e8c     70 E8 B0 FD | 	call	#__system___basic_print_unsigned
17e90     FD 32 02 F6 | 	mov	local07, result1
17e94     18 2F 02 F6 | 	mov	local05, local06
17e98     19 2F 02 F1 | 	add	local05, local07
17e9c     00 3A 06 F6 | 	mov	local11, #0
17ea0     00 12 06 F6 | 	mov	arg01, #0
17ea4     09 14 06 F6 | 	mov	arg02, #9
17ea8     00 16 06 F6 | 	mov	arg03, #0
17eac     74 E7 B0 FD | 	call	#__system___basic_print_char
17eb0     FD 36 02 F6 | 	mov	local09, result1
17eb4     FD 2E 02 F1 | 	add	local05, result1
17eb8     00 12 06 F6 | 	mov	arg01, #0
17ebc     F0 37 B1 FD | 	call	#__system___getiolock_0599
17ec0     FD 00 68 FC | 	wrlong	#0, result1
17ec4     00 FA 05 F6 | 	mov	result1, #0
17ec8     00 38 06 F6 | 	mov	local10, #0
17ecc                 | LR__1965
17ecc                 | '   if t1.result_type=result_float then print t1.result.fresult,
17ecc     1E 2A 0E F2 | 	cmp	local03, #30 wz
17ed0     64 00 90 5D |  if_ne	jmp	#LR__1966
17ed4     00 12 06 F6 | 	mov	arg01, #0
17ed8     D4 37 B1 FD | 	call	#__system___getiolock_0599
17edc     FD 12 02 F6 | 	mov	arg01, result1
17ee0     A4 DA B0 FD | 	call	#__system___lockmem
17ee4     00 30 06 F6 | 	mov	local06, #0
17ee8     00 12 06 F6 | 	mov	arg01, #0
17eec     13 15 02 F6 | 	mov	arg02, local01
17ef0     00 16 06 F6 | 	mov	arg03, #0
17ef4     23 18 06 F6 | 	mov	arg04, #35
17ef8     1C 0F B1 FD | 	call	#__system___basic_print_float
17efc     FD 32 02 F6 | 	mov	local07, result1
17f00     18 2F 02 F6 | 	mov	local05, local06
17f04     19 2F 02 F1 | 	add	local05, local07
17f08     00 3A 06 F6 | 	mov	local11, #0
17f0c     00 12 06 F6 | 	mov	arg01, #0
17f10     09 14 06 F6 | 	mov	arg02, #9
17f14     00 16 06 F6 | 	mov	arg03, #0
17f18     08 E7 B0 FD | 	call	#__system___basic_print_char
17f1c     FD 36 02 F6 | 	mov	local09, result1
17f20     FD 2E 02 F1 | 	add	local05, result1
17f24     00 12 06 F6 | 	mov	arg01, #0
17f28     84 37 B1 FD | 	call	#__system___getiolock_0599
17f2c     FD 00 68 FC | 	wrlong	#0, result1
17f30     00 FA 05 F6 | 	mov	result1, #0
17f34     00 38 06 F6 | 	mov	local10, #0
17f38                 | LR__1966
17f38                 | '   if t1.result_type=result_string then print t1.result.sresult,
17f38     1F 2A 0E F2 | 	cmp	local03, #31 wz
17f3c     60 00 90 5D |  if_ne	jmp	#LR__1967
17f40     00 12 06 F6 | 	mov	arg01, #0
17f44     68 37 B1 FD | 	call	#__system___getiolock_0599
17f48     FD 12 02 F6 | 	mov	arg01, result1
17f4c     38 DA B0 FD | 	call	#__system___lockmem
17f50     00 30 06 F6 | 	mov	local06, #0
17f54     00 12 06 F6 | 	mov	arg01, #0
17f58     13 15 02 F6 | 	mov	arg02, local01
17f5c     00 16 06 F6 | 	mov	arg03, #0
17f60     18 E7 B0 FD | 	call	#__system___basic_print_string
17f64     FD 32 02 F6 | 	mov	local07, result1
17f68     18 2F 02 F6 | 	mov	local05, local06
17f6c     19 2F 02 F1 | 	add	local05, local07
17f70     00 3A 06 F6 | 	mov	local11, #0
17f74     00 12 06 F6 | 	mov	arg01, #0
17f78     09 14 06 F6 | 	mov	arg02, #9
17f7c     00 16 06 F6 | 	mov	arg03, #0
17f80     A0 E6 B0 FD | 	call	#__system___basic_print_char
17f84     FD 36 02 F6 | 	mov	local09, result1
17f88     FD 2E 02 F1 | 	add	local05, result1
17f8c     00 12 06 F6 | 	mov	arg01, #0
17f90     1C 37 B1 FD | 	call	#__system___getiolock_0599
17f94     FD 00 68 FC | 	wrlong	#0, result1
17f98     00 FA 05 F6 | 	mov	result1, #0
17f9c     00 38 06 F6 | 	mov	local10, #0
17fa0                 | LR__1967
17fa0                 | LR__1968
17fa0                 | ' if r=print_mod_semicolon then 
17fa0     22 2C 0E F2 | 	cmp	local04, #34 wz
17fa4     1C 01 90 5D |  if_ne	jmp	#LR__1973
17fa8                 | '   if t1.result_type=result_int then print t1.result.iresult;
17fa8     1C 2A 0E F2 | 	cmp	local03, #28 wz
17fac     50 00 90 5D |  if_ne	jmp	#LR__1969
17fb0     00 12 06 F6 | 	mov	arg01, #0
17fb4     F8 36 B1 FD | 	call	#__system___getiolock_0599
17fb8     FD 12 02 F6 | 	mov	arg01, result1
17fbc     C8 D9 B0 FD | 	call	#__system___lockmem
17fc0     00 30 06 F6 | 	mov	local06, #0
17fc4     00 38 06 F6 | 	mov	local10, #0
17fc8     0A 3A 06 F6 | 	mov	local11, #10
17fcc     00 12 06 F6 | 	mov	arg01, #0
17fd0     13 15 02 F6 | 	mov	arg02, local01
17fd4     00 16 06 F6 | 	mov	arg03, #0
17fd8     0A 18 06 F6 | 	mov	arg04, #10
17fdc     E0 E6 B0 FD | 	call	#__system___basic_print_integer
17fe0     FD 32 02 F6 | 	mov	local07, result1
17fe4     18 2F 02 F6 | 	mov	local05, local06
17fe8     19 2F 02 F1 | 	add	local05, local07
17fec     00 12 06 F6 | 	mov	arg01, #0
17ff0     BC 36 B1 FD | 	call	#__system___getiolock_0599
17ff4     FD 00 68 FC | 	wrlong	#0, result1
17ff8     00 FA 05 F6 | 	mov	result1, #0
17ffc     00 36 06 F6 | 	mov	local09, #0
18000                 | LR__1969
18000                 | '   if t1.result_type=result_uint then print t1.result.uresult;
18000     1D 2A 0E F2 | 	cmp	local03, #29 wz
18004     50 00 90 5D |  if_ne	jmp	#LR__1970
18008     00 12 06 F6 | 	mov	arg01, #0
1800c     A0 36 B1 FD | 	call	#__system___getiolock_0599
18010     FD 12 02 F6 | 	mov	arg01, result1
18014     70 D9 B0 FD | 	call	#__system___lockmem
18018     00 30 06 F6 | 	mov	local06, #0
1801c     00 38 06 F6 | 	mov	local10, #0
18020     0A 3A 06 F6 | 	mov	local11, #10
18024     00 12 06 F6 | 	mov	arg01, #0
18028     13 15 02 F6 | 	mov	arg02, local01
1802c     00 16 06 F6 | 	mov	arg03, #0
18030     0A 18 06 F6 | 	mov	arg04, #10
18034     C8 E6 B0 FD | 	call	#__system___basic_print_unsigned
18038     FD 32 02 F6 | 	mov	local07, result1
1803c     18 2F 02 F6 | 	mov	local05, local06
18040     19 2F 02 F1 | 	add	local05, local07
18044     00 12 06 F6 | 	mov	arg01, #0
18048     64 36 B1 FD | 	call	#__system___getiolock_0599
1804c     FD 00 68 FC | 	wrlong	#0, result1
18050     00 FA 05 F6 | 	mov	result1, #0
18054     00 36 06 F6 | 	mov	local09, #0
18058                 | LR__1970
18058                 | '   if t1.result_type=result_float then print t1.result.fresult;
18058     1E 2A 0E F2 | 	cmp	local03, #30 wz
1805c     30 00 90 5D |  if_ne	jmp	#LR__1971
18060     00 12 06 F6 | 	mov	arg01, #0
18064     48 36 B1 FD | 	call	#__system___getiolock_0599
18068     FD 12 02 F6 | 	mov	arg01, result1
1806c     18 D9 B0 FD | 	call	#__system___lockmem
18070     00 12 06 F6 | 	mov	arg01, #0
18074     13 15 02 F6 | 	mov	arg02, local01
18078     00 16 06 F6 | 	mov	arg03, #0
1807c     23 18 06 F6 | 	mov	arg04, #35
18080     94 0D B1 FD | 	call	#__system___basic_print_float
18084     00 12 06 F6 | 	mov	arg01, #0
18088     24 36 B1 FD | 	call	#__system___getiolock_0599
1808c     FD 00 68 FC | 	wrlong	#0, result1
18090                 | LR__1971
18090                 | '   if t1.result_type=result_string then print t1.result.sresult;
18090     1F 2A 0E F2 | 	cmp	local03, #31 wz
18094     2C 00 90 5D |  if_ne	jmp	#LR__1972
18098     00 12 06 F6 | 	mov	arg01, #0
1809c     10 36 B1 FD | 	call	#__system___getiolock_0599
180a0     FD 12 02 F6 | 	mov	arg01, result1
180a4     E0 D8 B0 FD | 	call	#__system___lockmem
180a8     00 12 06 F6 | 	mov	arg01, #0
180ac     13 15 02 F6 | 	mov	arg02, local01
180b0     00 16 06 F6 | 	mov	arg03, #0
180b4     C4 E5 B0 FD | 	call	#__system___basic_print_string
180b8     00 12 06 F6 | 	mov	arg01, #0
180bc     F0 35 B1 FD | 	call	#__system___getiolock_0599
180c0     FD 00 68 FC | 	wrlong	#0, result1
180c4                 | LR__1972
180c4                 | LR__1973
180c4                 | ' if r=0 then 
180c4     00 2C 0E F2 | 	cmp	local04, #0 wz
180c8     1C 01 90 5D |  if_ne	jmp	#LR__1978
180cc                 | '   if t1.result_type=result_int then print t1.result.iresult
180cc     1C 2A 0E F2 | 	cmp	local03, #28 wz
180d0     40 00 90 5D |  if_ne	jmp	#LR__1974
180d4     00 12 06 F6 | 	mov	arg01, #0
180d8     D4 35 B1 FD | 	call	#__system___getiolock_0599
180dc     FD 12 02 F6 | 	mov	arg01, result1
180e0     A4 D8 B0 FD | 	call	#__system___lockmem
180e4     00 12 06 F6 | 	mov	arg01, #0
180e8     13 15 02 F6 | 	mov	arg02, local01
180ec     00 16 06 F6 | 	mov	arg03, #0
180f0     0A 18 06 F6 | 	mov	arg04, #10
180f4     C8 E5 B0 FD | 	call	#__system___basic_print_integer
180f8     00 12 06 F6 | 	mov	arg01, #0
180fc     0A 14 06 F6 | 	mov	arg02, #10
18100     00 16 06 F6 | 	mov	arg03, #0
18104     1C E5 B0 FD | 	call	#__system___basic_print_char
18108     00 12 06 F6 | 	mov	arg01, #0
1810c     A0 35 B1 FD | 	call	#__system___getiolock_0599
18110     FD 00 68 FC | 	wrlong	#0, result1
18114                 | LR__1974
18114                 | '   if t1.result_type=result_uint then print t1.result.uresult
18114     1D 2A 0E F2 | 	cmp	local03, #29 wz
18118     40 00 90 5D |  if_ne	jmp	#LR__1975
1811c     00 12 06 F6 | 	mov	arg01, #0
18120     8C 35 B1 FD | 	call	#__system___getiolock_0599
18124     FD 12 02 F6 | 	mov	arg01, result1
18128     5C D8 B0 FD | 	call	#__system___lockmem
1812c     00 12 06 F6 | 	mov	arg01, #0
18130     13 15 02 F6 | 	mov	arg02, local01
18134     00 16 06 F6 | 	mov	arg03, #0
18138     0A 18 06 F6 | 	mov	arg04, #10
1813c     C0 E5 B0 FD | 	call	#__system___basic_print_unsigned
18140     00 12 06 F6 | 	mov	arg01, #0
18144     0A 14 06 F6 | 	mov	arg02, #10
18148     00 16 06 F6 | 	mov	arg03, #0
1814c     D4 E4 B0 FD | 	call	#__system___basic_print_char
18150     00 12 06 F6 | 	mov	arg01, #0
18154     58 35 B1 FD | 	call	#__system___getiolock_0599
18158     FD 00 68 FC | 	wrlong	#0, result1
1815c                 | LR__1975
1815c                 | '   if t1.result_type=result_float then print t1.result.fresult
1815c     1E 2A 0E F2 | 	cmp	local03, #30 wz
18160     40 00 90 5D |  if_ne	jmp	#LR__1976
18164     00 12 06 F6 | 	mov	arg01, #0
18168     44 35 B1 FD | 	call	#__system___getiolock_0599
1816c     FD 12 02 F6 | 	mov	arg01, result1
18170     14 D8 B0 FD | 	call	#__system___lockmem
18174     00 12 06 F6 | 	mov	arg01, #0
18178     13 15 02 F6 | 	mov	arg02, local01
1817c     00 16 06 F6 | 	mov	arg03, #0
18180     23 18 06 F6 | 	mov	arg04, #35
18184     90 0C B1 FD | 	call	#__system___basic_print_float
18188     00 12 06 F6 | 	mov	arg01, #0
1818c     0A 14 06 F6 | 	mov	arg02, #10
18190     00 16 06 F6 | 	mov	arg03, #0
18194     8C E4 B0 FD | 	call	#__system___basic_print_char
18198     00 12 06 F6 | 	mov	arg01, #0
1819c     10 35 B1 FD | 	call	#__system___getiolock_0599
181a0     FD 00 68 FC | 	wrlong	#0, result1
181a4                 | LR__1976
181a4                 | '   if t1.result_type=result_string then print t1.result.sresult
181a4     1F 2A 0E F2 | 	cmp	local03, #31 wz
181a8     3C 00 90 5D |  if_ne	jmp	#LR__1977
181ac     00 12 06 F6 | 	mov	arg01, #0
181b0     FC 34 B1 FD | 	call	#__system___getiolock_0599
181b4     FD 12 02 F6 | 	mov	arg01, result1
181b8     CC D7 B0 FD | 	call	#__system___lockmem
181bc     00 12 06 F6 | 	mov	arg01, #0
181c0     13 15 02 F6 | 	mov	arg02, local01
181c4     00 16 06 F6 | 	mov	arg03, #0
181c8     B0 E4 B0 FD | 	call	#__system___basic_print_string
181cc     00 12 06 F6 | 	mov	arg01, #0
181d0     0A 14 06 F6 | 	mov	arg02, #10
181d4     00 16 06 F6 | 	mov	arg03, #0
181d8     48 E4 B0 FD | 	call	#__system___basic_print_char
181dc     00 12 06 F6 | 	mov	arg01, #0
181e0     CC 34 B1 FD | 	call	#__system___getiolock_0599
181e4     FD 00 68 FC | 	wrlong	#0, result1
181e8                 | LR__1977
181e8                 | LR__1978
181e8                 | ' if r=print_mod_empty then print
181e8     20 2C 0E F2 | 	cmp	local04, #32 wz
181ec     2C 00 90 5D |  if_ne	jmp	#LR__1979
181f0     00 12 06 F6 | 	mov	arg01, #0
181f4     B8 34 B1 FD | 	call	#__system___getiolock_0599
181f8     FD 12 02 F6 | 	mov	arg01, result1
181fc     88 D7 B0 FD | 	call	#__system___lockmem
18200     00 12 06 F6 | 	mov	arg01, #0
18204     0A 14 06 F6 | 	mov	arg02, #10
18208     00 16 06 F6 | 	mov	arg03, #0
1820c     14 E4 B0 FD | 	call	#__system___basic_print_char
18210     00 12 06 F6 | 	mov	arg01, #0
18214     98 34 B1 FD | 	call	#__system___getiolock_0599
18218     FD 00 68 FC | 	wrlong	#0, result1
1821c                 | LR__1979
1821c                 | LR__1980
1821c     A7 F0 03 F6 | 	mov	ptra, fp
18220     B2 00 A0 FD | 	call	#popregs_
18224                 | _do_print_ret
18224     2D 00 64 FD | 	ret
18228                 | 
18228                 | ' 
18228                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
18228                 | ' 
18228                 | ' sub do_push
18228                 | _do_push
18228                 | ' if stackpointer<maxstack then 
18228     43 00 00 FF 
1822c     58 E4 05 F1 | 	add	objptr, ##34392
18230     F2 00 02 FB | 	rdlong	_var01, objptr
18234     43 00 00 FF 
18238     58 E4 85 F1 | 	sub	objptr, ##34392
1823c     01 00 00 FF 
18240     00 00 56 F2 | 	cmps	_var01, ##512 wc
18244     F8 00 90 3D |  if_ae	jmp	#LR__1990
18248     4A 00 00 FF 
1824c     80 E4 05 F1 | 	add	objptr, ##38016
18250     F2 02 02 FB | 	rdlong	_var02, objptr
18254     01 05 02 F6 | 	mov	_var03, _var02
18258     01 04 66 F0 | 	shl	_var03, #1
1825c     01 05 02 F1 | 	add	_var03, _var02
18260     02 04 66 F0 | 	shl	_var03, #2
18264     03 00 00 FF 
18268     04 E4 85 F1 | 	sub	objptr, ##1540
1826c     F2 04 02 F1 | 	add	_var03, objptr
18270     02 01 02 FB | 	rdlong	_var01, _var03
18274     04 04 06 F1 | 	add	_var03, #4
18278     02 07 02 FB | 	rdlong	_var04, _var03
1827c     01 05 02 F6 | 	mov	_var03, _var02
18280     01 04 66 F0 | 	shl	_var03, #1
18284     01 05 02 F1 | 	add	_var03, _var02
18288     02 04 66 F0 | 	shl	_var03, #2
1828c     F2 04 02 F1 | 	add	_var03, objptr
18290     08 04 06 F1 | 	add	_var03, #8
18294     02 03 02 FB | 	rdlong	_var02, _var03
18298     04 00 00 FF 
1829c     24 E4 85 F1 | 	sub	objptr, ##2084
182a0     F2 04 02 FB | 	rdlong	_var03, objptr
182a4     02 09 02 F6 | 	mov	_var05, _var03
182a8     01 08 66 F0 | 	shl	_var05, #1
182ac     02 09 02 F1 | 	add	_var05, _var03
182b0     02 08 66 F0 | 	shl	_var05, #2
182b4     0C 00 00 FF 
182b8     0C E4 85 F1 | 	sub	objptr, ##6156
182bc     F2 08 02 F1 | 	add	_var05, objptr
182c0     04 01 62 FC | 	wrlong	_var01, _var05
182c4     0C 00 00 FF 
182c8     0C E4 05 F1 | 	add	objptr, ##6156
182cc     F2 08 02 FB | 	rdlong	_var05, objptr
182d0     04 05 02 F6 | 	mov	_var03, _var05
182d4     01 04 66 F0 | 	shl	_var03, #1
182d8     04 05 02 F1 | 	add	_var03, _var05
182dc     02 04 66 F0 | 	shl	_var03, #2
182e0     0C 00 00 FF 
182e4     0C E4 85 F1 | 	sub	objptr, ##6156
182e8     F2 04 02 F1 | 	add	_var03, objptr
182ec     04 04 06 F1 | 	add	_var03, #4
182f0     02 07 62 FC | 	wrlong	_var04, _var03
182f4     0C 00 00 FF 
182f8     0C E4 05 F1 | 	add	objptr, ##6156
182fc     F2 08 02 FB | 	rdlong	_var05, objptr
18300     04 07 02 F6 | 	mov	_var04, _var05
18304     01 06 66 F0 | 	shl	_var04, #1
18308     04 07 02 F1 | 	add	_var04, _var05
1830c     02 06 66 F0 | 	shl	_var04, #2
18310     0C 00 00 FF 
18314     0C E4 85 F1 | 	sub	objptr, ##6156
18318     F2 06 02 F1 | 	add	_var04, objptr
1831c     08 06 06 F1 | 	add	_var04, #8
18320     03 03 62 FC | 	wrlong	_var02, _var04
18324     0C 00 00 FF 
18328     0C E4 05 F1 | 	add	objptr, ##6156
1832c     F2 00 02 FB | 	rdlong	_var01, objptr
18330     01 00 06 F1 | 	add	_var01, #1
18334     F2 00 62 FC | 	wrlong	_var01, objptr
18338     43 00 00 FF 
1833c     58 E4 85 F1 | 	sub	objptr, ##34392
18340                 | LR__1990
18340                 | _do_push_ret
18340     2D 00 64 FD | 	ret
18344                 | 
18344                 | ' 
18344                 | ' '-------------------- put
18344                 | ' 
18344                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
18344                 | _do_put
18344     03 4A 05 F6 | 	mov	COUNT_, #3
18348     A8 00 A0 FD | 	call	#pushregs_
1834c     28 F0 07 F1 | 	add	ptra, #40
18350     4A 00 00 FF 
18354     80 E4 05 F1 | 	add	objptr, ##38016
18358     F2 1A 02 FB | 	rdlong	arg05, objptr
1835c     0D 19 02 F6 | 	mov	arg04, arg05
18360     01 18 66 F0 | 	shl	arg04, #1
18364     0D 19 02 F1 | 	add	arg04, arg05
18368     02 18 66 F0 | 	shl	arg04, #2
1836c     03 00 00 FF 
18370     04 E4 85 F1 | 	sub	objptr, ##1540
18374     F2 18 02 F1 | 	add	arg04, objptr
18378     0C 1B 02 FB | 	rdlong	arg05, arg04
1837c     A7 1A 62 FC | 	wrlong	arg05, fp
18380                 | ' 
18380                 | ' numpar=compiledline(lineptr_e).result.uresult
18380                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
18380     04 1A 0E F2 | 	cmp	arg05, #4 wz
18384     47 00 00 FF 
18388     7C E4 85 F1 | 	sub	objptr, ##36476
1838c     48 00 90 5D |  if_ne	jmp	#LR__2000
18390     EC 48 BF FD | 	call	#_pop
18394     FF 1A 02 F6 | 	mov	arg05, result3
18398     1C 4E 05 F1 | 	add	fp, #28
1839c     A7 FA 61 FC | 	wrlong	result1, fp
183a0     04 4E 05 F1 | 	add	fp, #4
183a4     A7 FC 61 FC | 	wrlong	result2, fp
183a8     04 4E 05 F1 | 	add	fp, #4
183ac     A7 1A 62 FC | 	wrlong	arg05, fp
183b0     08 4E 85 F1 | 	sub	fp, #8
183b4     A7 12 02 F6 | 	mov	arg01, fp
183b8     1C 4E 85 F1 | 	sub	fp, #28
183bc     A4 4A BF FD | 	call	#_converttoint
183c0     52 00 00 FF 
183c4     B8 E4 05 F1 | 	add	objptr, ##42168
183c8     F2 FA 61 FC | 	wrlong	result1, objptr
183cc     52 00 00 FF 
183d0     B8 E4 85 F1 | 	sub	objptr, ##42168
183d4     18 00 90 FD | 	jmp	#LR__2001
183d8                 | LR__2000
183d8     52 00 00 FF 
183dc     B8 E4 05 F1 | 	add	objptr, ##42168
183e0     FF FF FF FF 
183e4     F2 FE 6B FC | 	wrlong	##-1, objptr
183e8     52 00 00 FF 
183ec     B8 E4 85 F1 | 	sub	objptr, ##42168
183f0                 | LR__2001
183f0                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
183f0     A7 1A 02 FB | 	rdlong	arg05, fp
183f4     03 1A 56 F2 | 	cmps	arg05, #3 wc
183f8     40 00 90 CD |  if_b	jmp	#LR__2002
183fc     80 48 BF FD | 	call	#_pop
18400     FF 1A 02 F6 | 	mov	arg05, result3
18404     1C 4E 05 F1 | 	add	fp, #28
18408     A7 FA 61 FC | 	wrlong	result1, fp
1840c     04 4E 05 F1 | 	add	fp, #4
18410     A7 FC 61 FC | 	wrlong	result2, fp
18414     04 4E 05 F1 | 	add	fp, #4
18418     A7 1A 62 FC | 	wrlong	arg05, fp
1841c     08 4E 85 F1 | 	sub	fp, #8
18420     A7 12 02 F6 | 	mov	arg01, fp
18424     1C 4E 85 F1 | 	sub	fp, #28
18428     38 4A BF FD | 	call	#_converttoint
1842c     08 4E 05 F1 | 	add	fp, #8
18430     A7 FA 61 FC | 	wrlong	result1, fp
18434     08 4E 85 F1 | 	sub	fp, #8
18438     0C 00 90 FD | 	jmp	#LR__2003
1843c                 | LR__2002
1843c     08 4E 05 F1 | 	add	fp, #8
18440     A7 02 68 FC | 	wrlong	#1, fp
18444     08 4E 85 F1 | 	sub	fp, #8
18448                 | LR__2003
18448                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
18448     A7 18 02 FB | 	rdlong	arg04, fp
1844c     02 18 56 F2 | 	cmps	arg04, #2 wc
18450     3C 00 90 CD |  if_b	jmp	#LR__2004
18454     28 48 BF FD | 	call	#_pop
18458     FF 18 02 F6 | 	mov	arg04, result3
1845c     1C 4E 05 F1 | 	add	fp, #28
18460     A7 FA 61 FC | 	wrlong	result1, fp
18464     04 4E 05 F1 | 	add	fp, #4
18468     A7 FC 61 FC | 	wrlong	result2, fp
1846c     04 4E 05 F1 | 	add	fp, #4
18470     A7 18 62 FC | 	wrlong	arg04, fp
18474     08 4E 85 F1 | 	sub	fp, #8
18478     A7 12 02 F6 | 	mov	arg01, fp
1847c     1C 4E 85 F1 | 	sub	fp, #28
18480     E0 49 BF FD | 	call	#_converttoint
18484     0C 4E 05 F1 | 	add	fp, #12
18488     A7 FA 61 FC | 	wrlong	result1, fp
1848c     0C 4E 85 F1 | 	sub	fp, #12
18490                 | LR__2004
18490     EC 47 BF FD | 	call	#_pop
18494     FF 18 02 F6 | 	mov	arg04, result3
18498     1C 4E 05 F1 | 	add	fp, #28
1849c     A7 FA 61 FC | 	wrlong	result1, fp
184a0     04 4E 05 F1 | 	add	fp, #4
184a4     A7 FC 61 FC | 	wrlong	result2, fp
184a8     04 4E 05 F1 | 	add	fp, #4
184ac     A7 18 62 FC | 	wrlong	arg04, fp
184b0     08 4E 85 F1 | 	sub	fp, #8
184b4     A7 12 02 F6 | 	mov	arg01, fp
184b8     1C 4E 85 F1 | 	sub	fp, #28
184bc     A4 49 BF FD | 	call	#_converttoint
184c0     04 4E 05 F1 | 	add	fp, #4
184c4     A7 FA 61 FC | 	wrlong	result1, fp
184c8     10 4E 05 F1 | 	add	fp, #16
184cc     A7 26 02 FB | 	rdlong	local01, fp
184d0     14 4E 85 F1 | 	sub	fp, #20
184d4     02 26 66 F0 | 	shl	local01, #2
184d8     50 00 00 FF 
184dc     C4 E4 05 F1 | 	add	objptr, ##41156
184e0     F2 26 02 F1 | 	add	local01, objptr
184e4     13 01 68 FC | 	wrlong	#0, local01
184e8                 | ' t1=pop() : channel=converttoint(t1)
184e8                 | ' getres(j)=0
184e8                 | ' if pos>=0 then
184e8     01 00 00 FF 
184ec     F4 E5 05 F1 | 	add	objptr, ##1012
184f0     F2 28 02 FB | 	rdlong	local02, objptr
184f4     52 00 00 FF 
184f8     B8 E4 85 F1 | 	sub	objptr, ##42168
184fc     00 28 56 F2 | 	cmps	local02, #0 wc
18500     C0 01 90 CD |  if_b	jmp	#LR__2010
18504     10 4E 05 F1 | 	add	fp, #16
18508     A7 00 68 FC | 	wrlong	#0, fp
1850c     10 4E 85 F1 | 	sub	fp, #16
18510                 | '    i=0: do
18510                 | LR__2005
18510     14 4E 05 F1 | 	add	fp, #20
18514     A7 00 68 FC | 	wrlong	#0, fp
18518     14 4E 85 F1 | 	sub	fp, #20
1851c                 | '    j=0: do    
1851c                 | LR__2006
1851c                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
1851c     0C 4E 05 F1 | 	add	fp, #12
18520     A7 28 02 FB | 	rdlong	local02, fp
18524     0C 4E 85 F1 | 	sub	fp, #12
18528     00 04 00 FF 
1852c     00 28 56 F2 | 	cmps	local02, ##524288 wc
18530     4C 00 90 3D |  if_ae	jmp	#LR__2007
18534     14 4E 05 F1 | 	add	fp, #20
18538     A7 28 02 FB | 	rdlong	local02, fp
1853c     14 27 02 F6 | 	mov	local01, local02
18540     4E 00 00 FF 
18544     B4 E4 05 F1 | 	add	objptr, ##40116
18548     F2 26 02 F1 | 	add	local01, objptr
1854c     08 4E 85 F1 | 	sub	fp, #8
18550     A7 12 02 FB | 	rdlong	arg01, fp
18554     04 4E 05 F1 | 	add	fp, #4
18558     A7 18 02 FB | 	rdlong	arg04, fp
1855c     0A 18 66 F0 | 	shl	arg04, #10
18560     0C 13 02 F1 | 	add	arg01, arg04
18564     10 4E 85 F1 | 	sub	fp, #16
18568     14 13 02 F1 | 	add	arg01, local02
1856c     09 FB C1 FA | 	rdbyte	result1, arg01
18570     4E 00 00 FF 
18574     B4 E4 85 F1 | 	sub	objptr, ##40116
18578     13 FB 41 FC | 	wrbyte	result1, local01
1857c     48 00 90 FD | 	jmp	#LR__2008
18580                 | LR__2007
18580     14 4E 05 F1 | 	add	fp, #20
18584     A7 28 02 FB | 	rdlong	local02, fp
18588     14 27 02 F6 | 	mov	local01, local02
1858c     4E 00 00 FF 
18590     B4 E4 05 F1 | 	add	objptr, ##40116
18594     F2 26 02 F1 | 	add	local01, objptr
18598     08 4E 85 F1 | 	sub	fp, #8
1859c     A7 12 02 FB | 	rdlong	arg01, fp
185a0     04 4E 05 F1 | 	add	fp, #4
185a4     A7 18 02 FB | 	rdlong	arg04, fp
185a8     0A 18 66 F0 | 	shl	arg04, #10
185ac     0C 13 02 F1 | 	add	arg01, arg04
185b0     10 4E 85 F1 | 	sub	fp, #16
185b4     14 13 02 F1 | 	add	arg01, local02
185b8     4E 00 00 FF 
185bc     B4 E4 85 F1 | 	sub	objptr, ##40116
185c0     50 9C B0 FD | 	call	#_pspeek
185c4     13 FB 41 FC | 	wrbyte	result1, local01
185c8                 | LR__2008
185c8     14 4E 05 F1 | 	add	fp, #20
185cc     A7 28 02 FB | 	rdlong	local02, fp
185d0     01 28 06 F1 | 	add	local02, #1
185d4     A7 28 62 FC | 	wrlong	local02, fp
185d8     14 4E 85 F1 | 	sub	fp, #20
185dc     02 00 00 FF 
185e0     00 28 56 F2 | 	cmps	local02, ##1024 wc
185e4     2C 00 90 3D |  if_ae	jmp	#LR__2009
185e8     10 4E 05 F1 | 	add	fp, #16
185ec     A7 26 02 FB | 	rdlong	local01, fp
185f0     0A 26 66 F0 | 	shl	local01, #10
185f4     04 4E 05 F1 | 	add	fp, #4
185f8     A7 28 02 FB | 	rdlong	local02, fp
185fc     14 27 02 F1 | 	add	local01, local02
18600     0C 4E 85 F1 | 	sub	fp, #12
18604     A7 28 02 FB | 	rdlong	local02, fp
18608     08 4E 85 F1 | 	sub	fp, #8
1860c     14 27 5A F2 | 	cmps	local01, local02 wcz
18610     08 FF 9F ED |  if_be	jmp	#LR__2006
18614                 | LR__2009
18614                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
18614     04 4E 05 F1 | 	add	fp, #4
18618     A7 12 02 FB | 	rdlong	arg01, fp
1861c     52 00 00 FF 
18620     B8 E4 05 F1 | 	add	objptr, ##42168
18624     F2 14 02 FB | 	rdlong	arg02, objptr
18628     01 14 06 F1 | 	add	arg02, #1
1862c     04 00 00 FF 
18630     04 E4 85 F1 | 	sub	objptr, ##2052
18634     F2 16 02 F6 | 	mov	arg03, objptr
18638     4E 00 00 FF 
1863c     B4 E4 85 F1 | 	sub	objptr, ##40116
18640     04 4E 05 F1 | 	add	fp, #4
18644     A7 18 02 FB | 	rdlong	arg04, fp
18648     08 4E 85 F1 | 	sub	fp, #8
1864c     01 1A 06 F6 | 	mov	arg05, #1
18650     38 E1 B0 FD | 	call	#__system___basic_put
18654     18 4E 05 F1 | 	add	fp, #24
18658     A7 FA 61 FC | 	wrlong	result1, fp
1865c     14 4E 85 F1 | 	sub	fp, #20
18660     A7 26 02 FB | 	rdlong	local01, fp
18664     02 26 66 F0 | 	shl	local01, #2
18668     50 00 00 FF 
1866c     C4 E4 05 F1 | 	add	objptr, ##41156
18670     F2 26 02 F1 | 	add	local01, objptr
18674     13 FB 61 FC | 	wrlong	result1, local01
18678                 | '    if 1024*i+j>amount then exit loop
18678     0C 4E 05 F1 | 	add	fp, #12
1867c     A7 28 02 FB | 	rdlong	local02, fp
18680     0A 28 66 F0 | 	shl	local02, #10
18684     04 4E 05 F1 | 	add	fp, #4
18688     A7 26 02 FB | 	rdlong	local01, fp
1868c     13 29 02 F1 | 	add	local02, local01
18690     0C 4E 85 F1 | 	sub	fp, #12
18694     A7 26 02 FB | 	rdlong	local01, fp
18698     08 4E 85 F1 | 	sub	fp, #8
1869c     13 29 5A F2 | 	cmps	local02, local01 wcz
186a0     50 00 00 FF 
186a4     C4 E4 85 F1 | 	sub	objptr, ##41156
186a8     CC 01 90 1D |  if_a	jmp	#LR__2017
186ac     10 4E 05 F1 | 	add	fp, #16
186b0     A7 28 02 FB | 	rdlong	local02, fp
186b4     01 28 06 F1 | 	add	local02, #1
186b8     A7 28 62 FC | 	wrlong	local02, fp
186bc     10 4E 85 F1 | 	sub	fp, #16
186c0     4C FE 9F FD | 	jmp	#LR__2005
186c4                 | LR__2010
186c4     10 4E 05 F1 | 	add	fp, #16
186c8     A7 00 68 FC | 	wrlong	#0, fp
186cc     10 4E 85 F1 | 	sub	fp, #16
186d0                 | '    i=0: do
186d0                 | LR__2011
186d0     14 4E 05 F1 | 	add	fp, #20
186d4     A7 00 68 FC | 	wrlong	#0, fp
186d8     14 4E 85 F1 | 	sub	fp, #20
186dc                 | '    j=0: do  
186dc                 | LR__2012
186dc                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
186dc     0C 4E 05 F1 | 	add	fp, #12
186e0     A7 28 02 FB | 	rdlong	local02, fp
186e4     0C 4E 85 F1 | 	sub	fp, #12
186e8     00 04 00 FF 
186ec     00 28 56 F2 | 	cmps	local02, ##524288 wc
186f0     4C 00 90 3D |  if_ae	jmp	#LR__2013
186f4     14 4E 05 F1 | 	add	fp, #20
186f8     A7 28 02 FB | 	rdlong	local02, fp
186fc     14 27 02 F6 | 	mov	local01, local02
18700     4E 00 00 FF 
18704     B4 E4 05 F1 | 	add	objptr, ##40116
18708     F2 26 02 F1 | 	add	local01, objptr
1870c     08 4E 85 F1 | 	sub	fp, #8
18710     A7 12 02 FB | 	rdlong	arg01, fp
18714     04 4E 05 F1 | 	add	fp, #4
18718     A7 18 02 FB | 	rdlong	arg04, fp
1871c     0A 18 66 F0 | 	shl	arg04, #10
18720     0C 13 02 F1 | 	add	arg01, arg04
18724     10 4E 85 F1 | 	sub	fp, #16
18728     14 13 02 F1 | 	add	arg01, local02
1872c     09 FB C1 FA | 	rdbyte	result1, arg01
18730     4E 00 00 FF 
18734     B4 E4 85 F1 | 	sub	objptr, ##40116
18738     13 FB 41 FC | 	wrbyte	result1, local01
1873c     48 00 90 FD | 	jmp	#LR__2014
18740                 | LR__2013
18740     14 4E 05 F1 | 	add	fp, #20
18744     A7 28 02 FB | 	rdlong	local02, fp
18748     14 27 02 F6 | 	mov	local01, local02
1874c     4E 00 00 FF 
18750     B4 E4 05 F1 | 	add	objptr, ##40116
18754     F2 26 02 F1 | 	add	local01, objptr
18758     08 4E 85 F1 | 	sub	fp, #8
1875c     A7 12 02 FB | 	rdlong	arg01, fp
18760     04 4E 05 F1 | 	add	fp, #4
18764     A7 18 02 FB | 	rdlong	arg04, fp
18768     0A 18 66 F0 | 	shl	arg04, #10
1876c     0C 13 02 F1 | 	add	arg01, arg04
18770     10 4E 85 F1 | 	sub	fp, #16
18774     14 13 02 F1 | 	add	arg01, local02
18778     4E 00 00 FF 
1877c     B4 E4 85 F1 | 	sub	objptr, ##40116
18780     90 9A B0 FD | 	call	#_pspeek
18784     13 FB 41 FC | 	wrbyte	result1, local01
18788                 | LR__2014
18788     14 4E 05 F1 | 	add	fp, #20
1878c     A7 28 02 FB | 	rdlong	local02, fp
18790     01 28 06 F1 | 	add	local02, #1
18794     A7 28 62 FC | 	wrlong	local02, fp
18798     14 4E 85 F1 | 	sub	fp, #20
1879c     02 00 00 FF 
187a0     00 28 56 F2 | 	cmps	local02, ##1024 wc
187a4     2C 00 90 3D |  if_ae	jmp	#LR__2015
187a8     10 4E 05 F1 | 	add	fp, #16
187ac     A7 26 02 FB | 	rdlong	local01, fp
187b0     0A 26 66 F0 | 	shl	local01, #10
187b4     04 4E 05 F1 | 	add	fp, #4
187b8     A7 28 02 FB | 	rdlong	local02, fp
187bc     14 27 02 F1 | 	add	local01, local02
187c0     0C 4E 85 F1 | 	sub	fp, #12
187c4     A7 28 02 FB | 	rdlong	local02, fp
187c8     08 4E 85 F1 | 	sub	fp, #8
187cc     14 27 5A F2 | 	cmps	local01, local02 wcz
187d0     08 FF 9F ED |  if_be	jmp	#LR__2012
187d4                 | LR__2015
187d4                 | '    put #channel,,block(0),amount, r : getres(channel)=r
187d4     04 4E 05 F1 | 	add	fp, #4
187d8     A7 12 02 FB | 	rdlong	arg01, fp
187dc     4E 00 00 FF 
187e0     B4 E4 05 F1 | 	add	objptr, ##40116
187e4     F2 16 02 F6 | 	mov	arg03, objptr
187e8     4E 00 00 FF 
187ec     B4 E4 85 F1 | 	sub	objptr, ##40116
187f0     04 4E 05 F1 | 	add	fp, #4
187f4     A7 18 02 FB | 	rdlong	arg04, fp
187f8     08 4E 85 F1 | 	sub	fp, #8
187fc     00 14 06 F6 | 	mov	arg02, #0
18800     01 1A 06 F6 | 	mov	arg05, #1
18804     84 DF B0 FD | 	call	#__system___basic_put
18808     18 4E 05 F1 | 	add	fp, #24
1880c     A7 FA 61 FC | 	wrlong	result1, fp
18810     14 4E 85 F1 | 	sub	fp, #20
18814     A7 26 02 FB | 	rdlong	local01, fp
18818     02 26 66 F0 | 	shl	local01, #2
1881c     50 00 00 FF 
18820     C4 E4 05 F1 | 	add	objptr, ##41156
18824     F2 26 02 F1 | 	add	local01, objptr
18828     13 FB 61 FC | 	wrlong	result1, local01
1882c                 | '    if 1024*i+j>amount then exit loop
1882c     0C 4E 05 F1 | 	add	fp, #12
18830     A7 28 02 FB | 	rdlong	local02, fp
18834     0A 28 66 F0 | 	shl	local02, #10
18838     04 4E 05 F1 | 	add	fp, #4
1883c     A7 26 02 FB | 	rdlong	local01, fp
18840     13 29 02 F1 | 	add	local02, local01
18844     0C 4E 85 F1 | 	sub	fp, #12
18848     A7 2A 02 FB | 	rdlong	local03, fp
1884c     08 4E 85 F1 | 	sub	fp, #8
18850     15 29 5A F2 | 	cmps	local02, local03 wcz
18854     50 00 00 FF 
18858     C4 E4 85 F1 | 	sub	objptr, ##41156
1885c     18 00 90 1D |  if_a	jmp	#LR__2016
18860     10 4E 05 F1 | 	add	fp, #16
18864     A7 28 02 FB | 	rdlong	local02, fp
18868     01 28 06 F1 | 	add	local02, #1
1886c     A7 28 62 FC | 	wrlong	local02, fp
18870     10 4E 85 F1 | 	sub	fp, #16
18874     58 FE 9F FD | 	jmp	#LR__2011
18878                 | LR__2016
18878                 | LR__2017
18878     A7 F0 03 F6 | 	mov	ptra, fp
1887c     B2 00 A0 FD | 	call	#popregs_
18880                 | _do_put_ret
18880     2D 00 64 FD | 	ret
18884                 | 
18884                 | ' 
18884                 | ' '-------------------- rad
18884                 | ' 
18884                 | ' sub do_rad
18884                 | _do_rad
18884     52 00 00 FF 
18888     54 E4 05 F1 | 	add	objptr, ##42068
1888c     00 C0 9F FF 
18890     F2 00 68 FC | 	wrlong	##1065353216, objptr
18894     04 E4 05 F1 | 	add	objptr, #4
18898     00 C0 9F FF 
1889c     F2 00 68 FC | 	wrlong	##1065353216, objptr
188a0     52 00 00 FF 
188a4     58 E4 85 F1 | 	sub	objptr, ##42072
188a8                 | _do_rad_ret
188a8     2D 00 64 FD | 	ret
188ac                 | 
188ac                 | ' 
188ac                 | ' '-------------------- rdpin
188ac                 | ' 
188ac                 | ' sub do_rdpin
188ac                 | _do_rdpin
188ac     00 4A 05 F6 | 	mov	COUNT_, #0
188b0     A8 00 A0 FD | 	call	#pushregs_
188b4     0C F0 07 F1 | 	add	ptra, #12
188b8     C4 43 BF FD | 	call	#_pop
188bc     A7 FA 61 FC | 	wrlong	result1, fp
188c0     04 4E 05 F1 | 	add	fp, #4
188c4     A7 FC 61 FC | 	wrlong	result2, fp
188c8     04 4E 05 F1 | 	add	fp, #4
188cc     A7 FE 61 FC | 	wrlong	result3, fp
188d0     08 4E 85 F1 | 	sub	fp, #8
188d4     A7 12 02 F6 | 	mov	arg01, fp
188d8     88 45 BF FD | 	call	#_converttoint
188dc     FD FA 89 FA | 	rdpin	result1, result1
188e0     52 00 00 FF 
188e4     BC E4 05 F1 | 	add	objptr, ##42172
188e8     F2 FA 61 FC | 	wrlong	result1, objptr
188ec     52 00 00 FF 
188f0     BC E4 85 F1 | 	sub	objptr, ##42172
188f4     08 4E 05 F1 | 	add	fp, #8
188f8     A7 3A 68 FC | 	wrlong	#29, fp
188fc     08 4E 85 F1 | 	sub	fp, #8
18900     A7 08 68 FC | 	wrlong	#4, fp
18904     A7 12 02 F6 | 	mov	arg01, fp
18908     0C 44 BF FD | 	call	#_push
1890c     A7 F0 03 F6 | 	mov	ptra, fp
18910     B2 00 A0 FD | 	call	#popregs_
18914                 | _do_rdpin_ret
18914     2D 00 64 FD | 	ret
18918                 | 
18918                 | ' 
18918                 | ' ' ----------------  read
18918                 | ' 
18918                 | ' function read_next_line() as string
18918                 | _read_next_line
18918     07 4A 05 F6 | 	mov	COUNT_, #7
1891c     A8 00 A0 FD | 	call	#pushregs_
18920                 | ' if dataptr=$7FFFFFFF then return("")
18920     50 00 00 FF 
18924     2C E5 05 F1 | 	add	objptr, ##41260
18928     F2 26 02 FB | 	rdlong	local01, objptr
1892c     50 00 00 FF 
18930     2C E5 85 F1 | 	sub	objptr, ##41260
18934     FF FF 3F FF 
18938     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
1893c     AF 01 00 AF 
18940     32 FB 05 A6 |  if_e	mov	result1, ##@LR__5911
18944     BC 01 90 AD |  if_e	jmp	#LR__2027
18948                 | ' do
18948                 | LR__2020
18948     50 00 00 FF 
1894c     08 E5 05 F1 | 	add	objptr, ##41224
18950     F2 12 02 F6 | 	mov	arg01, objptr
18954     24 E4 05 F1 | 	add	objptr, #36
18958     F2 14 02 FB | 	rdlong	arg02, objptr
1895c     24 16 06 F6 | 	mov	arg03, #36
18960     45 00 00 FF 
18964     60 E4 85 F1 | 	sub	objptr, ##35424
18968     94 C3 B0 FD | 	call	#_psram_spin2_read1
1896c                 | '  ' print dataptr
1896c                 | '   psram.read1(varptr(dataheader),dataptr,36) 
1896c                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
1896c     45 00 00 FF 
18970     3C E4 05 F1 | 	add	objptr, ##35388
18974     F2 26 02 FB | 	rdlong	local01, objptr
18978     50 00 00 FF 
1897c     08 E5 85 F1 | 	sub	objptr, ##41224
18980     FF FF 7F FF 
18984     FF 27 0E F2 | 	cmp	local01, ##-1 wz
18988     50 00 00 5F 
1898c     1C E5 05 51 |  if_ne	add	objptr, ##41244
18990     F2 26 02 5B |  if_ne	rdlong	local01, objptr
18994     10 E4 05 51 |  if_ne	add	objptr, #16
18998     F2 26 62 5C |  if_ne	wrlong	local01, objptr
1899c     50 00 00 5F 
189a0     2C E5 85 51 |  if_ne	sub	objptr, ##41260
189a4     50 00 00 FF 
189a8     1C E5 05 F1 | 	add	objptr, ##41244
189ac     F2 26 02 FB | 	rdlong	local01, objptr
189b0     50 00 00 FF 
189b4     1C E5 85 F1 | 	sub	objptr, ##41244
189b8     FF FF 3F FF 
189bc     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
189c0     50 00 00 5F 
189c4     08 E5 05 51 |  if_ne	add	objptr, ##41224
189c8     F2 28 02 5B |  if_ne	rdlong	local02, objptr
189cc     50 00 00 5F 
189d0     08 E5 85 51 |  if_ne	sub	objptr, ##41224
189d4     FF FF 7F 5F 
189d8     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
189dc     50 00 00 5F 
189e0     28 E5 05 51 |  if_ne	add	objptr, ##41256
189e4     F2 2A 02 5B |  if_ne	rdlong	local03, objptr
189e8     50 00 00 5F 
189ec     28 E5 85 51 |  if_ne	sub	objptr, ##41256
189f0     B7 2A 0E 52 |  if_ne	cmp	local03, #183 wz
189f4     50 FF 9F 5D |  if_ne	jmp	#LR__2020
189f8                 | ' if dataheader(8)=token_data then 
189f8     50 00 00 FF 
189fc     28 E5 05 F1 | 	add	objptr, ##41256
18a00     F2 26 02 FB | 	rdlong	local01, objptr
18a04     50 00 00 FF 
18a08     28 E5 85 F1 | 	sub	objptr, ##41256
18a0c     B7 26 0E F2 | 	cmp	local01, #183 wz
18a10     E0 00 90 5D |  if_ne	jmp	#LR__2025
18a14     50 00 00 FF 
18a18     10 E5 05 F1 | 	add	objptr, ##41232
18a1c     F2 26 02 FB | 	rdlong	local01, objptr
18a20     01 00 00 FF 
18a24     8C E5 05 F1 | 	add	objptr, ##908
18a28     F2 26 62 FC | 	wrlong	local01, objptr
18a2c     01 00 00 FF 
18a30     88 E5 85 F1 | 	sub	objptr, ##904
18a34     F2 2C 02 FB | 	rdlong	local04, objptr
18a38     01 00 00 FF 
18a3c     80 E5 05 F1 | 	add	objptr, ##896
18a40     F2 2C 62 FC | 	wrlong	local04, objptr
18a44                 | '  'print "data found at line "; dataheader(0)
18a44                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
18a44     00 2E 06 F6 | 	mov	local05, #0
18a48     52 00 00 FF 
18a4c     94 E4 85 F1 | 	sub	objptr, ##42132
18a50                 | LR__2021
18a50     16 2F 52 F2 | 	cmps	local05, local04 wc
18a54     3C 00 90 3D |  if_ae	jmp	#LR__2022
18a58     52 00 00 FF 
18a5c     9C E4 05 F1 | 	add	objptr, ##42140
18a60     F2 12 02 FB | 	rdlong	arg01, objptr
18a64     52 00 00 FF 
18a68     9C E4 85 F1 | 	sub	objptr, ##42140
18a6c     17 13 02 F1 | 	add	arg01, local05
18a70     A0 97 B0 FD | 	call	#_pspeek
18a74     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
18a78     4C F1 B0 FD | 	call	#__system__Chr_S
18a7c     FD 14 02 F6 | 	mov	arg02, result1
18a80     18 13 02 F6 | 	mov	arg01, local06
18a84     5C CF B0 FD | 	call	#__system___string_concat
18a88     FD 30 02 F6 | 	mov	local06, result1
18a8c     01 2E 06 F1 | 	add	local05, #1
18a90     BC FF 9F FD | 	jmp	#LR__2021
18a94                 | LR__2022
18a94     AF 01 00 FF 
18a98     33 17 06 F6 | 	mov	arg03, ##@LR__5912
18a9c     01 12 06 F6 | 	mov	arg01, #1
18aa0     18 15 02 F6 | 	mov	arg02, local06
18aa4     A4 F4 B0 FD | 	call	#__system__Instr
18aa8     FD 2E 02 F6 | 	mov	local05, result1
18aac     18 13 02 F6 | 	mov	arg01, local06
18ab0     09 33 02 F6 | 	mov	local07, arg01
18ab4     97 06 48 FB | 	callpa	#(@LR__2024-@LR__2023)>>2,fcache_load_ptr_
18ab8                 | LR__2023
18ab8     19 FB C9 FA | 	rdbyte	result1, local07 wz
18abc     01 32 06 51 |  if_ne	add	local07, #1
18ac0     F4 FF 9F 5D |  if_ne	jmp	#LR__2023
18ac4                 | LR__2024
18ac4     09 33 82 F1 | 	sub	local07, arg01
18ac8     19 15 02 F6 | 	mov	arg02, local07
18acc     17 15 82 F1 | 	sub	arg02, local05
18ad0     04 14 86 F1 | 	sub	arg02, #4
18ad4     18 13 02 F6 | 	mov	arg01, local06
18ad8     B0 EF B0 FD | 	call	#__system__Right_S
18adc     FD 12 02 F6 | 	mov	arg01, result1
18ae0     B0 F3 B0 FD | 	call	#__system__RTrim_S
18ae4     FD 12 02 F6 | 	mov	arg01, result1
18ae8     E8 F2 B0 FD | 	call	#__system__LTrim_S
18aec     FD 30 02 F6 | 	mov	local06, result1
18af0     0C 00 90 FD | 	jmp	#LR__2026
18af4                 | LR__2025
18af4                 | '   return ("") 'todo proper err
18af4     AF 01 00 FF 
18af8     38 FB 05 F6 | 	mov	result1, ##@LR__5913
18afc     04 00 90 FD | 	jmp	#LR__2027
18b00                 | LR__2026
18b00                 | ' return readline
18b00     18 FB 01 F6 | 	mov	result1, local06
18b04                 | LR__2027
18b04     A7 F0 03 F6 | 	mov	ptra, fp
18b08     B2 00 A0 FD | 	call	#popregs_
18b0c                 | _read_next_line_ret
18b0c     2D 00 64 FD | 	ret
18b10                 | 
18b10                 | ' 
18b10                 | ' sub do_read
18b10                 | _do_read
18b10     11 4A 05 F6 | 	mov	COUNT_, #17
18b14     A8 00 A0 FD | 	call	#pushregs_
18b18     58 F1 07 F1 | 	add	ptra, #344
18b1c     4A 00 00 FF 
18b20     80 E4 05 F1 | 	add	objptr, ##38016
18b24     F2 FE 01 FB | 	rdlong	result3, objptr
18b28     FF FC 01 F6 | 	mov	result2, result3
18b2c     01 FC 65 F0 | 	shl	result2, #1
18b30     FF FC 01 F1 | 	add	result2, result3
18b34     02 FC 65 F0 | 	shl	result2, #2
18b38     03 00 00 FF 
18b3c     04 E4 85 F1 | 	sub	objptr, ##1540
18b40     F2 FC 01 F1 | 	add	result2, objptr
18b44     FE FC 01 FB | 	rdlong	result2, result2
18b48     08 4E 05 F1 | 	add	fp, #8
18b4c     A7 FC 61 FC | 	wrlong	result2, fp
18b50                 | ' 
18b50                 | ' 
18b50                 | ' numpar=compiledline(lineptr_e).result.uresult
18b50                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
18b50     08 4E 85 F1 | 	sub	fp, #8
18b54     01 FC 15 F2 | 	cmp	result2, #1 wc
18b58     47 00 00 FF 
18b5c     7C E4 85 F1 | 	sub	objptr, ##36476
18b60     14 00 90 CD |  if_b	jmp	#LR__2030
18b64     08 4E 05 F1 | 	add	fp, #8
18b68     A7 FC 01 FB | 	rdlong	result2, fp
18b6c     08 4E 85 F1 | 	sub	fp, #8
18b70     41 FC 15 F2 | 	cmp	result2, #65 wc
18b74     50 00 90 CD |  if_b	jmp	#LR__2031
18b78                 | LR__2030
18b78     00 12 06 F6 | 	mov	arg01, #0
18b7c     30 2B B1 FD | 	call	#__system___getiolock_0599
18b80     FD 12 02 F6 | 	mov	arg01, result1
18b84     00 CE B0 FD | 	call	#__system___lockmem
18b88     AF 01 00 FF 
18b8c     39 15 06 F6 | 	mov	arg02, ##@LR__5914
18b90     00 12 06 F6 | 	mov	arg01, #0
18b94     00 16 06 F6 | 	mov	arg03, #0
18b98     E0 DA B0 FD | 	call	#__system___basic_print_string
18b9c     00 12 06 F6 | 	mov	arg01, #0
18ba0     0C 2B B1 FD | 	call	#__system___getiolock_0599
18ba4     FD 00 68 FC | 	wrlong	#0, result1
18ba8     50 00 00 FF 
18bac     F0 E4 05 F1 | 	add	objptr, ##41200
18bb0     F2 14 02 FB | 	rdlong	arg02, objptr
18bb4     50 00 00 FF 
18bb8     F0 E4 85 F1 | 	sub	objptr, ##41200
18bbc     27 12 06 F6 | 	mov	arg01, #39
18bc0     D8 93 B0 FD | 	call	#_printerror
18bc4     5C 0C 90 FD | 	jmp	#LR__2080
18bc8                 | LR__2031
18bc8     08 4E 05 F1 | 	add	fp, #8
18bcc     A7 16 02 FB | 	rdlong	arg03, fp
18bd0     01 16 86 F1 | 	sub	arg03, #1
18bd4     28 4F 05 F1 | 	add	fp, #296
18bd8     A7 16 62 FC | 	wrlong	arg03, fp
18bdc     30 4F 85 F1 | 	sub	fp, #304
18be0                 | ' i=numpar-1
18be0                 | ' if readline="" then readline=read_next_line() ': print readline
18be0     52 00 00 FF 
18be4     88 E4 05 F1 | 	add	objptr, ##42120
18be8     F2 12 02 FB | 	rdlong	arg01, objptr
18bec     52 00 00 FF 
18bf0     88 E4 85 F1 | 	sub	objptr, ##42120
18bf4     AF 01 00 FF 
18bf8     43 15 06 F6 | 	mov	arg02, ##@LR__5915
18bfc     B0 CD B0 FD | 	call	#__system___string_cmp
18c00     00 FA 0D F2 | 	cmp	result1, #0 wz
18c04     18 00 90 5D |  if_ne	jmp	#LR__2032
18c08     0C FD BF FD | 	call	#_read_next_line
18c0c     52 00 00 FF 
18c10     88 E4 05 F1 | 	add	objptr, ##42120
18c14     F2 FA 61 FC | 	wrlong	result1, objptr
18c18     52 00 00 FF 
18c1c     88 E4 85 F1 | 	sub	objptr, ##42120
18c20                 | LR__2032
18c20                 | ' if readline="" then printerror(55,runheader(0)) :return
18c20     52 00 00 FF 
18c24     88 E4 05 F1 | 	add	objptr, ##42120
18c28     F2 12 02 FB | 	rdlong	arg01, objptr
18c2c     52 00 00 FF 
18c30     88 E4 85 F1 | 	sub	objptr, ##42120
18c34     AF 01 00 FF 
18c38     44 15 06 F6 | 	mov	arg02, ##@LR__5916
18c3c     70 CD B0 FD | 	call	#__system___string_cmp
18c40     00 FA 0D F2 | 	cmp	result1, #0 wz
18c44     20 00 90 5D |  if_ne	jmp	#LR__2033
18c48     50 00 00 FF 
18c4c     F0 E4 05 F1 | 	add	objptr, ##41200
18c50     F2 14 02 FB | 	rdlong	arg02, objptr
18c54     50 00 00 FF 
18c58     F0 E4 85 F1 | 	sub	objptr, ##41200
18c5c     37 12 06 F6 | 	mov	arg01, #55
18c60     38 93 B0 FD | 	call	#_printerror
18c64     BC 0B 90 FD | 	jmp	#LR__2080
18c68                 | LR__2033
18c68     34 4F 05 F1 | 	add	fp, #308
18c6c     A7 00 68 FC | 	wrlong	#0, fp
18c70     2C 4F 85 F1 | 	sub	fp, #300
18c74     A7 26 02 FB | 	rdlong	local01, fp
18c78     01 26 86 F1 | 	sub	local01, #1
18c7c     28 4F 05 F1 | 	add	fp, #296
18c80     A7 26 62 FC | 	wrlong	local01, fp
18c84     30 4F 85 F1 | 	sub	fp, #304
18c88                 | ' j=0
18c88                 | ' i=numpar-1
18c88                 | ' do
18c88                 | LR__2034
18c88                 | '   do
18c88                 | LR__2035
18c88     52 00 00 FF 
18c8c     88 E4 05 F1 | 	add	objptr, ##42120
18c90     F2 14 02 FB | 	rdlong	arg02, objptr
18c94     52 00 00 FF 
18c98     88 E4 85 F1 | 	sub	objptr, ##42120
18c9c     AF 01 00 FF 
18ca0     45 17 06 F6 | 	mov	arg03, ##@LR__5917
18ca4     01 12 06 F6 | 	mov	arg01, #1
18ca8     A0 F2 B0 FD | 	call	#__system__Instr
18cac     0C 4E 05 F1 | 	add	fp, #12
18cb0     A7 FA 61 FC | 	wrlong	result1, fp
18cb4                 | '     comma=instr(1,readline,",")  
18cb4                 | '       if comma>0  then 
18cb4     0C 4E 85 F1 | 	sub	fp, #12
18cb8     01 FA 15 F2 | 	cmp	result1, #1 wc
18cbc     98 00 90 CD |  if_b	jmp	#LR__2038
18cc0     52 00 00 FF 
18cc4     88 E4 05 F1 | 	add	objptr, ##42120
18cc8     F2 12 02 FB | 	rdlong	arg01, objptr
18ccc     52 00 00 FF 
18cd0     88 E4 85 F1 | 	sub	objptr, ##42120
18cd4     0C 4E 05 F1 | 	add	fp, #12
18cd8     A7 14 02 FB | 	rdlong	arg02, fp
18cdc     0C 4E 85 F1 | 	sub	fp, #12
18ce0     01 14 86 F1 | 	sub	arg02, #1
18ce4     1C ED B0 FD | 	call	#__system__Left_S
18ce8     04 4E 05 F1 | 	add	fp, #4
18cec     A7 FA 61 FC | 	wrlong	result1, fp
18cf0     04 4E 85 F1 | 	sub	fp, #4
18cf4     52 00 00 FF 
18cf8     88 E4 05 F1 | 	add	objptr, ##42120
18cfc     F2 12 02 FB | 	rdlong	arg01, objptr
18d00     09 27 02 F6 | 	mov	local01, arg01
18d04     52 00 00 FF 
18d08     88 E4 85 F1 | 	sub	objptr, ##42120
18d0c     09 29 02 F6 | 	mov	local02, arg01
18d10     97 06 48 FB | 	callpa	#(@LR__2037-@LR__2036)>>2,fcache_load_ptr_
18d14                 | LR__2036
18d14     14 FB C9 FA | 	rdbyte	result1, local02 wz
18d18     01 28 06 51 |  if_ne	add	local02, #1
18d1c     F4 FF 9F 5D |  if_ne	jmp	#LR__2036
18d20                 | LR__2037
18d20     09 29 82 F1 | 	sub	local02, arg01
18d24     14 15 02 F6 | 	mov	arg02, local02
18d28     0C 4E 05 F1 | 	add	fp, #12
18d2c     A7 16 02 FB | 	rdlong	arg03, fp
18d30     0C 4E 85 F1 | 	sub	fp, #12
18d34     0B 15 82 F1 | 	sub	arg02, arg03
18d38     13 13 02 F6 | 	mov	arg01, local01
18d3c     4C ED B0 FD | 	call	#__system__Right_S
18d40     52 00 00 FF 
18d44     88 E4 05 F1 | 	add	objptr, ##42120
18d48     F2 FA 61 FC | 	wrlong	result1, objptr
18d4c     52 00 00 FF 
18d50     88 E4 85 F1 | 	sub	objptr, ##42120
18d54     48 00 90 FD | 	jmp	#LR__2039
18d58                 | LR__2038
18d58     52 00 00 FF 
18d5c     88 E4 05 F1 | 	add	objptr, ##42120
18d60     F2 12 02 FB | 	rdlong	arg01, objptr
18d64     52 00 00 FF 
18d68     88 E4 85 F1 | 	sub	objptr, ##42120
18d6c     24 F1 B0 FD | 	call	#__system__RTrim_S
18d70     FD 12 02 F6 | 	mov	arg01, result1
18d74     5C F0 B0 FD | 	call	#__system__LTrim_S
18d78     04 4E 05 F1 | 	add	fp, #4
18d7c     A7 FA 61 FC | 	wrlong	result1, fp
18d80     04 4E 85 F1 | 	sub	fp, #4
18d84     AF 01 00 FF 
18d88     47 27 06 F6 | 	mov	local01, ##@LR__5918
18d8c     52 00 00 FF 
18d90     88 E4 05 F1 | 	add	objptr, ##42120
18d94     F2 26 62 FC | 	wrlong	local01, objptr
18d98     52 00 00 FF 
18d9c     88 E4 85 F1 | 	sub	objptr, ##42120
18da0                 | LR__2039
18da0                 | '      if part$<>"" then j=j+1
18da0     04 4E 05 F1 | 	add	fp, #4
18da4     A7 12 02 FB | 	rdlong	arg01, fp
18da8     04 4E 85 F1 | 	sub	fp, #4
18dac     AF 01 00 FF 
18db0     48 15 06 F6 | 	mov	arg02, ##@LR__5919
18db4     F8 CB B0 FD | 	call	#__system___string_cmp
18db8     00 FA 0D F2 | 	cmp	result1, #0 wz
18dbc     34 4F 05 51 |  if_ne	add	fp, #308
18dc0     A7 26 02 5B |  if_ne	rdlong	local01, fp
18dc4     01 26 06 51 |  if_ne	add	local01, #1
18dc8     A7 26 62 5C |  if_ne	wrlong	local01, fp
18dcc     34 4F 85 51 |  if_ne	sub	fp, #308
18dd0     30 4F 05 F1 | 	add	fp, #304
18dd4     A7 26 02 FB | 	rdlong	local01, fp
18dd8     02 26 66 F0 | 	shl	local01, #2
18ddc     04 4F 85 F1 | 	sub	fp, #260
18de0     A7 26 02 F1 | 	add	local01, fp
18de4     28 4E 85 F1 | 	sub	fp, #40
18de8     A7 FA 01 FB | 	rdlong	result1, fp
18dec     13 FB 61 FC | 	wrlong	result1, local01
18df0     2C 4F 05 F1 | 	add	fp, #300
18df4     A7 26 02 FB | 	rdlong	local01, fp
18df8     01 26 86 F1 | 	sub	local01, #1
18dfc     A7 26 62 FC | 	wrlong	local01, fp
18e00     30 4F 85 F1 | 	sub	fp, #304
18e04                 | '      args(i)=part$  
18e04                 | '      i=i-1
18e04                 | '     if readline="" then readline=read_next_line() 
18e04     52 00 00 FF 
18e08     88 E4 05 F1 | 	add	objptr, ##42120
18e0c     F2 12 02 FB | 	rdlong	arg01, objptr
18e10     52 00 00 FF 
18e14     88 E4 85 F1 | 	sub	objptr, ##42120
18e18     AF 01 00 FF 
18e1c     49 15 06 F6 | 	mov	arg02, ##@LR__5920
18e20     8C CB B0 FD | 	call	#__system___string_cmp
18e24     00 FA 0D F2 | 	cmp	result1, #0 wz
18e28     18 00 90 5D |  if_ne	jmp	#LR__2040
18e2c     E8 FA BF FD | 	call	#_read_next_line
18e30     52 00 00 FF 
18e34     88 E4 05 F1 | 	add	objptr, ##42120
18e38     F2 FA 61 FC | 	wrlong	result1, objptr
18e3c     52 00 00 FF 
18e40     88 E4 85 F1 | 	sub	objptr, ##42120
18e44                 | LR__2040
18e44     30 4F 05 F1 | 	add	fp, #304
18e48     A7 26 02 FB | 	rdlong	local01, fp
18e4c     30 4F 85 F1 | 	sub	fp, #304
18e50     00 26 56 F2 | 	cmps	local01, #0 wc
18e54     28 00 90 CD |  if_b	jmp	#LR__2041
18e58     52 00 00 FF 
18e5c     88 E4 05 F1 | 	add	objptr, ##42120
18e60     F2 12 02 FB | 	rdlong	arg01, objptr
18e64     52 00 00 FF 
18e68     88 E4 85 F1 | 	sub	objptr, ##42120
18e6c     AF 01 00 FF 
18e70     4A 15 06 F6 | 	mov	arg02, ##@LR__5921
18e74     38 CB B0 FD | 	call	#__system___string_cmp
18e78     00 FA 0D F2 | 	cmp	result1, #0 wz
18e7c     08 FE 9F 5D |  if_ne	jmp	#LR__2035
18e80                 | LR__2041
18e80     30 4F 05 F1 | 	add	fp, #304
18e84     A7 26 02 FB | 	rdlong	local01, fp
18e88     30 4F 85 F1 | 	sub	fp, #304
18e8c     00 26 56 F2 | 	cmps	local01, #0 wc
18e90     F4 FD 9F 3D |  if_ae	jmp	#LR__2034
18e94                 | ' if j<numpar then printerror(55,runheader(0))
18e94     34 4F 05 F1 | 	add	fp, #308
18e98     A7 26 02 FB | 	rdlong	local01, fp
18e9c     2C 4F 85 F1 | 	sub	fp, #300
18ea0     A7 16 02 FB | 	rdlong	arg03, fp
18ea4     08 4E 85 F1 | 	sub	fp, #8
18ea8     0B 27 52 F2 | 	cmps	local01, arg03 wc
18eac     50 00 00 CF 
18eb0     F0 E4 05 C1 |  if_b	add	objptr, ##41200
18eb4     F2 14 02 CB |  if_b	rdlong	arg02, objptr
18eb8     50 00 00 CF 
18ebc     F0 E4 85 C1 |  if_b	sub	objptr, ##41200
18ec0     37 12 06 C6 |  if_b	mov	arg01, #55
18ec4     D4 90 B0 CD |  if_b	call	#_printerror
18ec8                 | ' 
18ec8                 | ' for i=0 to numpar-1
18ec8     30 4F 05 F1 | 	add	fp, #304
18ecc     A7 00 68 FC | 	wrlong	#0, fp
18ed0     28 4F 85 F1 | 	sub	fp, #296
18ed4     A7 2A 02 FB | 	rdlong	local03, fp
18ed8     08 4E 85 F1 | 	sub	fp, #8
18edc                 | LR__2042
18edc     30 4F 05 F1 | 	add	fp, #304
18ee0     A7 2C 02 FB | 	rdlong	local04, fp
18ee4     30 4F 85 F1 | 	sub	fp, #304
18ee8     16 27 02 F6 | 	mov	local01, local04
18eec     15 27 52 F2 | 	cmps	local01, local03 wc
18ef0     30 09 90 3D |  if_ae	jmp	#LR__2079
18ef4                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
18ef4     30 4F 05 F1 | 	add	fp, #304
18ef8     A7 16 02 FB | 	rdlong	arg03, fp
18efc     02 16 66 F0 | 	shl	arg03, #2
18f00     04 4F 85 F1 | 	sub	fp, #260
18f04     A7 16 02 F1 | 	add	arg03, fp
18f08     0B 13 02 FB | 	rdlong	arg01, arg03
18f0c     2C 4E 85 F1 | 	sub	fp, #44
18f10     88 D5 BE FD | 	call	#_isnum
18f14     FD 2E 02 F6 | 	mov	local05, result1
18f18     30 4F 05 F1 | 	add	fp, #304
18f1c     A7 16 02 FB | 	rdlong	arg03, fp
18f20     02 16 66 F0 | 	shl	arg03, #2
18f24     04 4F 85 F1 | 	sub	fp, #260
18f28     A7 30 02 F6 | 	mov	local06, fp
18f2c     A7 16 02 F1 | 	add	arg03, fp
18f30     0B 13 02 FB | 	rdlong	arg01, arg03
18f34     2C 4E 85 F1 | 	sub	fp, #44
18f38     4C D9 BE FD | 	call	#_isint
18f3c     FD 2E 2A F5 | 	andn	local05, result1 wz
18f40     52 00 00 5F 
18f44     BC E4 05 51 |  if_ne	add	objptr, ##42172
18f48     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
18f4c     52 00 00 5F 
18f50     BC E4 85 51 |  if_ne	sub	objptr, ##42172
18f54                 | '   if isint(args(i)) then r=result_int 
18f54     30 4F 05 F1 | 	add	fp, #304
18f58     A7 2E 02 FB | 	rdlong	local05, fp
18f5c     02 2E 66 F0 | 	shl	local05, #2
18f60     04 4F 85 F1 | 	sub	fp, #260
18f64     A7 2E 02 F1 | 	add	local05, fp
18f68     17 13 02 FB | 	rdlong	arg01, local05
18f6c     2C 4E 85 F1 | 	sub	fp, #44
18f70     14 D9 BE FD | 	call	#_isint
18f74     00 FA 0D F2 | 	cmp	result1, #0 wz
18f78     52 00 00 5F 
18f7c     BC E4 05 51 |  if_ne	add	objptr, ##42172
18f80     F2 38 68 5C |  if_ne	wrlong	#28, objptr
18f84     52 00 00 5F 
18f88     BC E4 85 51 |  if_ne	sub	objptr, ##42172
18f8c                 | '   if isdec(args(i)) then r=result_uint 
18f8c     30 4F 05 F1 | 	add	fp, #304
18f90     A7 2E 02 FB | 	rdlong	local05, fp
18f94     02 2E 66 F0 | 	shl	local05, #2
18f98     04 4F 85 F1 | 	sub	fp, #260
18f9c     A7 2E 02 F1 | 	add	local05, fp
18fa0     17 13 02 FB | 	rdlong	arg01, local05
18fa4     2C 4E 85 F1 | 	sub	fp, #44
18fa8     80 DB BE FD | 	call	#_isdec
18fac     00 FA 0D F2 | 	cmp	result1, #0 wz
18fb0     52 00 00 5F 
18fb4     BC E4 05 51 |  if_ne	add	objptr, ##42172
18fb8     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
18fbc     52 00 00 5F 
18fc0     BC E4 85 51 |  if_ne	sub	objptr, ##42172
18fc4                 | '   if not isnum(args(i)) then 
18fc4     30 4F 05 F1 | 	add	fp, #304
18fc8     A7 2E 02 FB | 	rdlong	local05, fp
18fcc     02 2E 66 F0 | 	shl	local05, #2
18fd0     04 4F 85 F1 | 	sub	fp, #260
18fd4     A7 2E 02 F1 | 	add	local05, fp
18fd8     17 13 02 FB | 	rdlong	arg01, local05
18fdc     2C 4E 85 F1 | 	sub	fp, #44
18fe0     B8 D4 BE FD | 	call	#_isnum
18fe4     FD 2E 22 F6 | 	not	local05, result1
18fe8     00 2E 0E F2 | 	cmp	local05, #0 wz
18fec     4C 01 90 AD |  if_e	jmp	#LR__2047
18ff0     52 00 00 FF 
18ff4     BC E4 05 F1 | 	add	objptr, ##42172
18ff8     F2 56 68 FC | 	wrlong	#43, objptr
18ffc     52 00 00 FF 
19000     BC E4 85 F1 | 	sub	objptr, ##42172
19004     30 4F 05 F1 | 	add	fp, #304
19008     A7 16 02 FB | 	rdlong	arg03, fp
1900c     02 16 66 F0 | 	shl	arg03, #2
19010     04 4F 85 F1 | 	sub	fp, #260
19014     A7 16 02 F1 | 	add	arg03, fp
19018     0B 13 02 FB | 	rdlong	arg01, arg03
1901c     2C 4E 85 F1 | 	sub	fp, #44
19020     09 29 02 F6 | 	mov	local02, arg01
19024     97 06 48 FB | 	callpa	#(@LR__2044-@LR__2043)>>2,fcache_load_ptr_
19028                 | LR__2043
19028     14 FB C9 FA | 	rdbyte	result1, local02 wz
1902c     01 28 06 51 |  if_ne	add	local02, #1
19030     F4 FF 9F 5D |  if_ne	jmp	#LR__2043
19034                 | LR__2044
19034     09 29 82 F1 | 	sub	local02, arg01
19038     14 FB 01 F6 | 	mov	result1, local02
1903c     38 4F 05 F1 | 	add	fp, #312
19040     A7 FA 61 FC | 	wrlong	result1, fp
19044     52 00 00 FF 
19048     44 E4 05 F1 | 	add	objptr, ##42052
1904c     F2 12 02 FB | 	rdlong	arg01, objptr
19050     FD 12 82 F1 | 	sub	arg01, result1
19054     04 12 86 F1 | 	sub	arg01, #4
19058     03 12 26 F5 | 	andn	arg01, #3
1905c     F2 12 62 FC | 	wrlong	arg01, objptr
19060     52 00 00 FF 
19064     44 E4 85 F1 | 	sub	objptr, ##42052
19068     A7 14 02 FB | 	rdlong	arg02, fp
1906c     38 4F 85 F1 | 	sub	fp, #312
19070     C8 90 B0 FD | 	call	#_pslpoke
19074                 | '     pslpoke memtop,l
19074                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
19074     34 4F 05 F1 | 	add	fp, #308
19078     A7 02 68 FC | 	wrlong	#1, fp
1907c     04 4E 05 F1 | 	add	fp, #4
19080     A7 32 02 FB | 	rdlong	local07, fp
19084     38 4F 85 F1 | 	sub	fp, #312
19088     01 32 06 F1 | 	add	local07, #1
1908c                 | LR__2045
1908c     34 4F 05 F1 | 	add	fp, #308
19090     A7 2E 02 FB | 	rdlong	local05, fp
19094     34 4F 85 F1 | 	sub	fp, #308
19098     19 2F 52 F2 | 	cmps	local05, local07 wc
1909c     7C 00 90 3D |  if_ae	jmp	#LR__2046
190a0     52 00 00 FF 
190a4     44 E4 05 F1 | 	add	objptr, ##42052
190a8     F2 30 02 FB | 	rdlong	local06, objptr
190ac     52 00 00 FF 
190b0     44 E4 85 F1 | 	sub	objptr, ##42052
190b4     03 30 06 F1 | 	add	local06, #3
190b8     34 4F 05 F1 | 	add	fp, #308
190bc     A7 34 02 FB | 	rdlong	local08, fp
190c0     1A 31 02 F1 | 	add	local06, local08
190c4     04 4E 85 F1 | 	sub	fp, #4
190c8     A7 36 02 FB | 	rdlong	local09, fp
190cc     02 36 66 F0 | 	shl	local09, #2
190d0     04 4F 85 F1 | 	sub	fp, #260
190d4     A7 38 02 F6 | 	mov	local10, fp
190d8     A7 36 02 F1 | 	add	local09, fp
190dc     1B 13 02 FB | 	rdlong	arg01, local09
190e0     2C 4E 85 F1 | 	sub	fp, #44
190e4     01 3A 06 F6 | 	mov	local11, #1
190e8     1A 15 02 F6 | 	mov	arg02, local08
190ec     01 16 06 F6 | 	mov	arg03, #1
190f0     28 EA B0 FD | 	call	#__system__Mid_S
190f4     FD 14 C2 FA | 	rdbyte	arg02, result1
190f8     18 13 02 F6 | 	mov	arg01, local06
190fc     CC 90 B0 FD | 	call	#_pspoke
19100     34 4F 05 F1 | 	add	fp, #308
19104     A7 30 02 FB | 	rdlong	local06, fp
19108     18 2F 02 F6 | 	mov	local05, local06
1910c     01 2E 06 F1 | 	add	local05, #1
19110     A7 2E 62 FC | 	wrlong	local05, fp
19114     34 4F 85 F1 | 	sub	fp, #308
19118     70 FF 9F FD | 	jmp	#LR__2045
1911c                 | LR__2046
1911c     52 00 00 FF 
19120     44 E4 05 F1 | 	add	objptr, ##42052
19124     F2 2E 02 FB | 	rdlong	local05, objptr
19128     52 00 00 FF 
1912c     44 E4 85 F1 | 	sub	objptr, ##42052
19130     10 4E 05 F1 | 	add	fp, #16
19134     A7 2E 62 FC | 	wrlong	local05, fp
19138     10 4E 85 F1 | 	sub	fp, #16
1913c                 | LR__2047
1913c     40 3B BF FD | 	call	#_pop
19140     1C 4E 05 F1 | 	add	fp, #28
19144     A7 FA 61 FC | 	wrlong	result1, fp
19148     04 4E 05 F1 | 	add	fp, #4
1914c     A7 FC 61 FC | 	wrlong	result2, fp
19150     04 4E 05 F1 | 	add	fp, #4
19154     A7 FE 61 FC | 	wrlong	result3, fp
19158                 | '   t1=pop() 
19158                 | '   if i>=numpar-j then
19158     1C 4E 85 F1 | 	sub	fp, #28
1915c     A7 2E 02 FB | 	rdlong	local05, fp
19160     17 3D 02 F6 | 	mov	local12, local05
19164     2C 4F 05 F1 | 	add	fp, #300
19168     A7 3E 02 FB | 	rdlong	local13, fp
1916c     1F 41 02 F6 | 	mov	local14, local13
19170     20 3D 82 F1 | 	sub	local12, local14
19174     04 4E 85 F1 | 	sub	fp, #4
19178     A7 42 02 FB | 	rdlong	local15, fp
1917c     30 4F 85 F1 | 	sub	fp, #304
19180     21 45 02 F6 | 	mov	local16, local15
19184     1E 45 52 F2 | 	cmps	local16, local12 wc
19188     80 06 90 CD |  if_b	jmp	#LR__2078
1918c     20 4E 05 F1 | 	add	fp, #32
19190     A7 3C 02 FB | 	rdlong	local12, fp
19194     0C 4E 85 F1 | 	sub	fp, #12
19198     A7 3C 62 FC | 	wrlong	local12, fp
1919c                 | '     vartype=t1.result.twowords(1)
1919c                 | '     select case vartype
1919c     14 4E 85 F1 | 	sub	fp, #20
191a0     1E 47 0A F6 | 	mov	local17, local12 wz
191a4     64 00 90 AD |  if_e	jmp	#LR__2048
191a8     00 47 0E F2 | 	cmp	local17, #256 wz
191ac     6C 00 90 AD |  if_e	jmp	#LR__2049
191b0     01 47 0E F2 | 	cmp	local17, #257 wz
191b4     74 00 90 AD |  if_e	jmp	#LR__2050
191b8     02 47 0E F2 | 	cmp	local17, #258 wz
191bc     7C 00 90 AD |  if_e	jmp	#LR__2051
191c0     03 47 0E F2 | 	cmp	local17, #259 wz
191c4     84 00 90 AD |  if_e	jmp	#LR__2052
191c8     04 47 0E F2 | 	cmp	local17, #260 wz
191cc     8C 00 90 AD |  if_e	jmp	#LR__2053
191d0     05 47 0E F2 | 	cmp	local17, #261 wz
191d4     94 00 90 AD |  if_e	jmp	#LR__2054
191d8     06 47 0E F2 | 	cmp	local17, #262 wz
191dc     9C 00 90 AD |  if_e	jmp	#LR__2055
191e0     07 47 0E F2 | 	cmp	local17, #263 wz
191e4     A4 00 90 AD |  if_e	jmp	#LR__2056
191e8     08 47 0E F2 | 	cmp	local17, #264 wz
191ec     AC 00 90 AD |  if_e	jmp	#LR__2057
191f0     09 47 0E F2 | 	cmp	local17, #265 wz
191f4     B4 00 90 AD |  if_e	jmp	#LR__2058
191f8     0A 47 0E F2 | 	cmp	local17, #266 wz
191fc     BC 00 90 AD |  if_e	jmp	#LR__2059
19200     0B 47 0E F2 | 	cmp	local17, #267 wz
19204     C4 00 90 AD |  if_e	jmp	#LR__2060
19208     D0 00 90 FD | 	jmp	#LR__2061
1920c                 | LR__2048
1920c     18 4E 05 F1 | 	add	fp, #24
19210     A7 18 68 FC | 	wrlong	#12, fp
19214     18 4E 85 F1 | 	sub	fp, #24
19218     CC 00 90 FD | 	jmp	#LR__2062
1921c                 | LR__2049
1921c     18 4E 05 F1 | 	add	fp, #24
19220     A7 18 68 FC | 	wrlong	#12, fp
19224     18 4E 85 F1 | 	sub	fp, #24
19228     BC 00 90 FD | 	jmp	#LR__2062
1922c                 | LR__2050
1922c     18 4E 05 F1 | 	add	fp, #24
19230     A7 02 68 FC | 	wrlong	#1, fp
19234     18 4E 85 F1 | 	sub	fp, #24
19238     AC 00 90 FD | 	jmp	#LR__2062
1923c                 | LR__2051
1923c     18 4E 05 F1 | 	add	fp, #24
19240     A7 02 68 FC | 	wrlong	#1, fp
19244     18 4E 85 F1 | 	sub	fp, #24
19248     9C 00 90 FD | 	jmp	#LR__2062
1924c                 | LR__2052
1924c     18 4E 05 F1 | 	add	fp, #24
19250     A7 04 68 FC | 	wrlong	#2, fp
19254     18 4E 85 F1 | 	sub	fp, #24
19258     8C 00 90 FD | 	jmp	#LR__2062
1925c                 | LR__2053
1925c     18 4E 05 F1 | 	add	fp, #24
19260     A7 04 68 FC | 	wrlong	#2, fp
19264     18 4E 85 F1 | 	sub	fp, #24
19268     7C 00 90 FD | 	jmp	#LR__2062
1926c                 | LR__2054
1926c     18 4E 05 F1 | 	add	fp, #24
19270     A7 08 68 FC | 	wrlong	#4, fp
19274     18 4E 85 F1 | 	sub	fp, #24
19278     6C 00 90 FD | 	jmp	#LR__2062
1927c                 | LR__2055
1927c     18 4E 05 F1 | 	add	fp, #24
19280     A7 08 68 FC | 	wrlong	#4, fp
19284     18 4E 85 F1 | 	sub	fp, #24
19288     5C 00 90 FD | 	jmp	#LR__2062
1928c                 | LR__2056
1928c     18 4E 05 F1 | 	add	fp, #24
19290     A7 10 68 FC | 	wrlong	#8, fp
19294     18 4E 85 F1 | 	sub	fp, #24
19298     4C 00 90 FD | 	jmp	#LR__2062
1929c                 | LR__2057
1929c     18 4E 05 F1 | 	add	fp, #24
192a0     A7 10 68 FC | 	wrlong	#8, fp
192a4     18 4E 85 F1 | 	sub	fp, #24
192a8     3C 00 90 FD | 	jmp	#LR__2062
192ac                 | LR__2058
192ac     18 4E 05 F1 | 	add	fp, #24
192b0     A7 0C 68 FC | 	wrlong	#6, fp
192b4     18 4E 85 F1 | 	sub	fp, #24
192b8     2C 00 90 FD | 	jmp	#LR__2062
192bc                 | LR__2059
192bc     18 4E 05 F1 | 	add	fp, #24
192c0     A7 10 68 FC | 	wrlong	#8, fp
192c4     18 4E 85 F1 | 	sub	fp, #24
192c8     1C 00 90 FD | 	jmp	#LR__2062
192cc                 | LR__2060
192cc     18 4E 05 F1 | 	add	fp, #24
192d0     A7 0A 68 FC | 	wrlong	#5, fp
192d4     18 4E 85 F1 | 	sub	fp, #24
192d8     0C 00 90 FD | 	jmp	#LR__2062
192dc                 | LR__2061
192dc     18 4E 05 F1 | 	add	fp, #24
192e0     A7 18 68 FC | 	wrlong	#12, fp
192e4     18 4E 85 F1 | 	sub	fp, #24
192e8                 | LR__2062
192e8                 | '     if esize=12 andalso t1.result.uresult<$80000 then
192e8     18 4E 05 F1 | 	add	fp, #24
192ec     A7 3C 02 FB | 	rdlong	local12, fp
192f0     18 4E 85 F1 | 	sub	fp, #24
192f4     0C 3C 0E F2 | 	cmp	local12, #12 wz
192f8     74 01 90 5D |  if_ne	jmp	#LR__2067
192fc     1C 4E 05 F1 | 	add	fp, #28
19300     A7 3E 02 FB | 	rdlong	local13, fp
19304     1C 4E 85 F1 | 	sub	fp, #28
19308     00 04 00 FF 
1930c     00 3E 16 F2 | 	cmp	local13, ##524288 wc
19310     5C 01 90 3D |  if_ae	jmp	#LR__2067
19314                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
19314     52 00 00 FF 
19318     BC E4 05 F1 | 	add	objptr, ##42172
1931c     F2 3C 02 FB | 	rdlong	local12, objptr
19320     52 00 00 FF 
19324     BC E4 85 F1 | 	sub	objptr, ##42172
19328     1C 3C 0E F2 | 	cmp	local12, #28 wz
1932c     38 00 90 5D |  if_ne	jmp	#LR__2063
19330     1C 4E 05 F1 | 	add	fp, #28
19334     A7 3C 02 FB | 	rdlong	local12, fp
19338     14 4F 05 F1 | 	add	fp, #276
1933c     A7 3E 02 FB | 	rdlong	local13, fp
19340     1F 45 02 F6 | 	mov	local16, local13
19344     02 44 66 F0 | 	shl	local16, #2
19348     04 4F 85 F1 | 	sub	fp, #260
1934c     A7 42 02 F6 | 	mov	local15, fp
19350     A7 44 02 F1 | 	add	local16, fp
19354     22 13 02 FB | 	rdlong	arg01, local16
19358     00 14 06 F6 | 	mov	arg02, #0
1935c     2C 4E 85 F1 | 	sub	fp, #44
19360     14 FB B0 FD | 	call	#__system____builtin_atoi
19364     1E FB 61 FC | 	wrlong	result1, local12
19368                 | LR__2063
19368                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
19368     52 00 00 FF 
1936c     BC E4 05 F1 | 	add	objptr, ##42172
19370     F2 3C 02 FB | 	rdlong	local12, objptr
19374     52 00 00 FF 
19378     BC E4 85 F1 | 	sub	objptr, ##42172
1937c     1D 3C 0E F2 | 	cmp	local12, #29 wz
19380     38 00 90 5D |  if_ne	jmp	#LR__2064
19384     1C 4E 05 F1 | 	add	fp, #28
19388     A7 3C 02 FB | 	rdlong	local12, fp
1938c     14 4F 05 F1 | 	add	fp, #276
19390     A7 3E 02 FB | 	rdlong	local13, fp
19394     1F 45 02 F6 | 	mov	local16, local13
19398     02 44 66 F0 | 	shl	local16, #2
1939c     04 4F 85 F1 | 	sub	fp, #260
193a0     A7 42 02 F6 | 	mov	local15, fp
193a4     A7 44 02 F1 | 	add	local16, fp
193a8     22 13 02 FB | 	rdlong	arg01, local16
193ac     00 14 06 F6 | 	mov	arg02, #0
193b0     2C 4E 85 F1 | 	sub	fp, #44
193b4     C0 FA B0 FD | 	call	#__system____builtin_atoi
193b8     1E FB 61 FC | 	wrlong	result1, local12
193bc                 | LR__2064
193bc                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
193bc     52 00 00 FF 
193c0     BC E4 05 F1 | 	add	objptr, ##42172
193c4     F2 3C 02 FB | 	rdlong	local12, objptr
193c8     52 00 00 FF 
193cc     BC E4 85 F1 | 	sub	objptr, ##42172
193d0     1E 3C 0E F2 | 	cmp	local12, #30 wz
193d4     3C 00 90 5D |  if_ne	jmp	#LR__2065
193d8     30 4F 05 F1 | 	add	fp, #304
193dc     A7 3E 02 FB | 	rdlong	local13, fp
193e0     02 3E 66 F0 | 	shl	local13, #2
193e4     04 4F 85 F1 | 	sub	fp, #260
193e8     A7 44 02 F6 | 	mov	local16, fp
193ec     A7 3E 02 F1 | 	add	local13, fp
193f0     1F 13 02 FB | 	rdlong	arg01, local13
193f4     2C 4E 85 F1 | 	sub	fp, #44
193f8     10 FC B0 FD | 	call	#__system____builtin_atof
193fc     28 4E 05 F1 | 	add	fp, #40
19400     A7 FA 61 FC | 	wrlong	result1, fp
19404     0C 4E 85 F1 | 	sub	fp, #12
19408     A7 3C 02 FB | 	rdlong	local12, fp
1940c     1C 4E 85 F1 | 	sub	fp, #28
19410     1E FB 61 FC | 	wrlong	result1, local12
19414                 | LR__2065
19414                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
19414     52 00 00 FF 
19418     BC E4 05 F1 | 	add	objptr, ##42172
1941c     F2 3C 02 FB | 	rdlong	local12, objptr
19420     52 00 00 FF 
19424     BC E4 85 F1 | 	sub	objptr, ##42172
19428     2B 3C 0E F2 | 	cmp	local12, #43 wz
1942c     18 00 90 5D |  if_ne	jmp	#LR__2066
19430     1C 4E 05 F1 | 	add	fp, #28
19434     A7 12 02 FB | 	rdlong	arg01, fp
19438     0C 4E 85 F1 | 	sub	fp, #12
1943c     A7 14 02 FB | 	rdlong	arg02, fp
19440     10 4E 85 F1 | 	sub	fp, #16
19444     09 15 62 FC | 	wrlong	arg02, arg01
19448                 | LR__2066
19448     1C 4E 05 F1 | 	add	fp, #28
1944c     A7 12 02 FB | 	rdlong	arg01, fp
19450     1C 4E 85 F1 | 	sub	fp, #28
19454     08 12 06 F1 | 	add	arg01, #8
19458     52 00 00 FF 
1945c     BC E4 05 F1 | 	add	objptr, ##42172
19460     F2 14 02 FB | 	rdlong	arg02, objptr
19464     52 00 00 FF 
19468     BC E4 85 F1 | 	sub	objptr, ##42172
1946c     09 15 62 FC | 	wrlong	arg02, arg01
19470                 | LR__2067
19470                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
19470     18 4E 05 F1 | 	add	fp, #24
19474     A7 3C 02 FB | 	rdlong	local12, fp
19478     18 4E 85 F1 | 	sub	fp, #24
1947c     0C 3C 0E F2 | 	cmp	local12, #12 wz
19480     94 01 90 5D |  if_ne	jmp	#LR__2072
19484     1C 4E 05 F1 | 	add	fp, #28
19488     A7 3E 02 FB | 	rdlong	local13, fp
1948c     1C 4E 85 F1 | 	sub	fp, #28
19490     00 04 00 FF 
19494     00 3E 16 F2 | 	cmp	local13, ##524288 wc
19498     7C 01 90 CD |  if_b	jmp	#LR__2072
1949c                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
1949c     52 00 00 FF 
194a0     BC E4 05 F1 | 	add	objptr, ##42172
194a4     F2 3C 02 FB | 	rdlong	local12, objptr
194a8     52 00 00 FF 
194ac     BC E4 85 F1 | 	sub	objptr, ##42172
194b0     1C 3C 0E F2 | 	cmp	local12, #28 wz
194b4     40 00 90 5D |  if_ne	jmp	#LR__2068
194b8     1C 4E 05 F1 | 	add	fp, #28
194bc     A7 3C 02 FB | 	rdlong	local12, fp
194c0     14 4F 05 F1 | 	add	fp, #276
194c4     A7 3E 02 FB | 	rdlong	local13, fp
194c8     1F 45 02 F6 | 	mov	local16, local13
194cc     02 44 66 F0 | 	shl	local16, #2
194d0     04 4F 85 F1 | 	sub	fp, #260
194d4     A7 42 02 F6 | 	mov	local15, fp
194d8     A7 44 02 F1 | 	add	local16, fp
194dc     22 13 02 FB | 	rdlong	arg01, local16
194e0     00 14 06 F6 | 	mov	arg02, #0
194e4     2C 4E 85 F1 | 	sub	fp, #44
194e8     8C F9 B0 FD | 	call	#__system____builtin_atoi
194ec     FD 14 02 F6 | 	mov	arg02, result1
194f0     1E 13 02 F6 | 	mov	arg01, local12
194f4     44 8C B0 FD | 	call	#_pslpoke
194f8                 | LR__2068
194f8                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
194f8     52 00 00 FF 
194fc     BC E4 05 F1 | 	add	objptr, ##42172
19500     F2 3C 02 FB | 	rdlong	local12, objptr
19504     52 00 00 FF 
19508     BC E4 85 F1 | 	sub	objptr, ##42172
1950c     1D 3C 0E F2 | 	cmp	local12, #29 wz
19510     40 00 90 5D |  if_ne	jmp	#LR__2069
19514     1C 4E 05 F1 | 	add	fp, #28
19518     A7 3C 02 FB | 	rdlong	local12, fp
1951c     14 4F 05 F1 | 	add	fp, #276
19520     A7 3E 02 FB | 	rdlong	local13, fp
19524     1F 45 02 F6 | 	mov	local16, local13
19528     02 44 66 F0 | 	shl	local16, #2
1952c     04 4F 85 F1 | 	sub	fp, #260
19530     A7 42 02 F6 | 	mov	local15, fp
19534     A7 44 02 F1 | 	add	local16, fp
19538     22 13 02 FB | 	rdlong	arg01, local16
1953c     00 14 06 F6 | 	mov	arg02, #0
19540     2C 4E 85 F1 | 	sub	fp, #44
19544     30 F9 B0 FD | 	call	#__system____builtin_atoi
19548     FD 14 02 F6 | 	mov	arg02, result1
1954c     1E 13 02 F6 | 	mov	arg01, local12
19550     E8 8B B0 FD | 	call	#_pslpoke
19554                 | LR__2069
19554                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
19554     52 00 00 FF 
19558     BC E4 05 F1 | 	add	objptr, ##42172
1955c     F2 3C 02 FB | 	rdlong	local12, objptr
19560     52 00 00 FF 
19564     BC E4 85 F1 | 	sub	objptr, ##42172
19568     1E 3C 0E F2 | 	cmp	local12, #30 wz
1956c     4C 00 90 5D |  if_ne	jmp	#LR__2070
19570     30 4F 05 F1 | 	add	fp, #304
19574     A7 3E 02 FB | 	rdlong	local13, fp
19578     02 3E 66 F0 | 	shl	local13, #2
1957c     04 4F 85 F1 | 	sub	fp, #260
19580     A7 44 02 F6 | 	mov	local16, fp
19584     A7 3E 02 F1 | 	add	local13, fp
19588     1F 13 02 FB | 	rdlong	arg01, local13
1958c     2C 4E 85 F1 | 	sub	fp, #44
19590     78 FA B0 FD | 	call	#__system____builtin_atof
19594     28 4E 05 F1 | 	add	fp, #40
19598     A7 FA 61 FC | 	wrlong	result1, fp
1959c     0C 4E 85 F1 | 	sub	fp, #12
195a0     A7 3C 02 FB | 	rdlong	local12, fp
195a4     0C 4E 05 F1 | 	add	fp, #12
195a8     A7 12 02 F6 | 	mov	arg01, fp
195ac     28 4E 85 F1 | 	sub	fp, #40
195b0     09 15 02 FB | 	rdlong	arg02, arg01
195b4     1E 13 02 F6 | 	mov	arg01, local12
195b8     80 8B B0 FD | 	call	#_pslpoke
195bc                 | LR__2070
195bc                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
195bc     52 00 00 FF 
195c0     BC E4 05 F1 | 	add	objptr, ##42172
195c4     F2 3C 02 FB | 	rdlong	local12, objptr
195c8     52 00 00 FF 
195cc     BC E4 85 F1 | 	sub	objptr, ##42172
195d0     2B 3C 0E F2 | 	cmp	local12, #43 wz
195d4     18 00 90 5D |  if_ne	jmp	#LR__2071
195d8     1C 4E 05 F1 | 	add	fp, #28
195dc     A7 12 02 FB | 	rdlong	arg01, fp
195e0     0C 4E 85 F1 | 	sub	fp, #12
195e4     A7 14 02 FB | 	rdlong	arg02, fp
195e8     10 4E 85 F1 | 	sub	fp, #16
195ec     4C 8B B0 FD | 	call	#_pslpoke
195f0                 | LR__2071
195f0     1C 4E 05 F1 | 	add	fp, #28
195f4     A7 12 02 FB | 	rdlong	arg01, fp
195f8     1C 4E 85 F1 | 	sub	fp, #28
195fc     08 12 06 F1 | 	add	arg01, #8
19600     52 00 00 FF 
19604     BC E4 05 F1 | 	add	objptr, ##42172
19608     F2 14 02 FB | 	rdlong	arg02, objptr
1960c     52 00 00 FF 
19610     BC E4 85 F1 | 	sub	objptr, ##42172
19614     24 8B B0 FD | 	call	#_pslpoke
19618                 | LR__2072
19618                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
19618     18 4E 05 F1 | 	add	fp, #24
1961c     A7 3C 02 FB | 	rdlong	local12, fp
19620     18 4E 85 F1 | 	sub	fp, #24
19624     05 3C 0E F2 | 	cmp	local12, #5 wz
19628     52 00 00 AF 
1962c     BC E4 05 A1 |  if_e	add	objptr, ##42172
19630     F2 40 02 AB |  if_e	rdlong	local14, objptr
19634     52 00 00 AF 
19638     BC E4 85 A1 |  if_e	sub	objptr, ##42172
1963c     2B 40 0E A2 |  if_e	cmp	local14, #43 wz
19640     18 00 90 5D |  if_ne	jmp	#LR__2073
19644     1C 4E 05 F1 | 	add	fp, #28
19648     A7 12 02 FB | 	rdlong	arg01, fp
1964c     0C 4E 85 F1 | 	sub	fp, #12
19650     A7 14 02 FB | 	rdlong	arg02, fp
19654     10 4E 85 F1 | 	sub	fp, #16
19658     E0 8A B0 FD | 	call	#_pslpoke
1965c                 | LR__2073
1965c                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
1965c     18 4E 05 F1 | 	add	fp, #24
19660     A7 3C 02 FB | 	rdlong	local12, fp
19664     18 4E 85 F1 | 	sub	fp, #24
19668     04 3C 0E F2 | 	cmp	local12, #4 wz
1966c     54 00 90 5D |  if_ne	jmp	#LR__2074
19670     52 00 00 FF 
19674     BC E4 05 F1 | 	add	objptr, ##42172
19678     F2 40 02 FB | 	rdlong	local14, objptr
1967c     52 00 00 FF 
19680     BC E4 85 F1 | 	sub	objptr, ##42172
19684     2B 40 0E F2 | 	cmp	local14, #43 wz
19688     38 00 90 AD |  if_e	jmp	#LR__2074
1968c     1C 4E 05 F1 | 	add	fp, #28
19690     A7 3C 02 FB | 	rdlong	local12, fp
19694     14 4F 05 F1 | 	add	fp, #276
19698     A7 44 02 FB | 	rdlong	local16, fp
1969c     02 44 66 F0 | 	shl	local16, #2
196a0     04 4F 85 F1 | 	sub	fp, #260
196a4     A7 44 02 F1 | 	add	local16, fp
196a8     22 13 02 FB | 	rdlong	arg01, local16
196ac     00 14 06 F6 | 	mov	arg02, #0
196b0     2C 4E 85 F1 | 	sub	fp, #44
196b4     C0 F7 B0 FD | 	call	#__system____builtin_atoi
196b8     FD 14 02 F6 | 	mov	arg02, result1
196bc     1E 13 02 F6 | 	mov	arg01, local12
196c0     78 8A B0 FD | 	call	#_pslpoke
196c4                 | LR__2074
196c4                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
196c4     18 4E 05 F1 | 	add	fp, #24
196c8     A7 3C 02 FB | 	rdlong	local12, fp
196cc     18 4E 85 F1 | 	sub	fp, #24
196d0     02 3C 0E F2 | 	cmp	local12, #2 wz
196d4     54 00 90 5D |  if_ne	jmp	#LR__2075
196d8     52 00 00 FF 
196dc     BC E4 05 F1 | 	add	objptr, ##42172
196e0     F2 40 02 FB | 	rdlong	local14, objptr
196e4     52 00 00 FF 
196e8     BC E4 85 F1 | 	sub	objptr, ##42172
196ec     2B 40 0E F2 | 	cmp	local14, #43 wz
196f0     38 00 90 AD |  if_e	jmp	#LR__2075
196f4     1C 4E 05 F1 | 	add	fp, #28
196f8     A7 3C 02 FB | 	rdlong	local12, fp
196fc     14 4F 05 F1 | 	add	fp, #276
19700     A7 44 02 FB | 	rdlong	local16, fp
19704     02 44 66 F0 | 	shl	local16, #2
19708     04 4F 85 F1 | 	sub	fp, #260
1970c     A7 44 02 F1 | 	add	local16, fp
19710     22 13 02 FB | 	rdlong	arg01, local16
19714     00 14 06 F6 | 	mov	arg02, #0
19718     2C 4E 85 F1 | 	sub	fp, #44
1971c     58 F7 B0 FD | 	call	#__system____builtin_atoi
19720     FD 14 02 F6 | 	mov	arg02, result1
19724     1E 13 02 F6 | 	mov	arg01, local12
19728     58 8A B0 FD | 	call	#_psdpoke
1972c                 | LR__2075
1972c                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
1972c     18 4E 05 F1 | 	add	fp, #24
19730     A7 3C 02 FB | 	rdlong	local12, fp
19734     18 4E 85 F1 | 	sub	fp, #24
19738     01 3C 0E F2 | 	cmp	local12, #1 wz
1973c     54 00 90 5D |  if_ne	jmp	#LR__2076
19740     52 00 00 FF 
19744     BC E4 05 F1 | 	add	objptr, ##42172
19748     F2 40 02 FB | 	rdlong	local14, objptr
1974c     52 00 00 FF 
19750     BC E4 85 F1 | 	sub	objptr, ##42172
19754     2B 40 0E F2 | 	cmp	local14, #43 wz
19758     38 00 90 AD |  if_e	jmp	#LR__2076
1975c     1C 4E 05 F1 | 	add	fp, #28
19760     A7 3C 02 FB | 	rdlong	local12, fp
19764     14 4F 05 F1 | 	add	fp, #276
19768     A7 44 02 FB | 	rdlong	local16, fp
1976c     02 44 66 F0 | 	shl	local16, #2
19770     04 4F 85 F1 | 	sub	fp, #260
19774     A7 44 02 F1 | 	add	local16, fp
19778     22 13 02 FB | 	rdlong	arg01, local16
1977c     00 14 06 F6 | 	mov	arg02, #0
19780     2C 4E 85 F1 | 	sub	fp, #44
19784     F0 F6 B0 FD | 	call	#__system____builtin_atoi
19788     FD 14 02 F6 | 	mov	arg02, result1
1978c     1E 13 02 F6 | 	mov	arg01, local12
19790     38 8A B0 FD | 	call	#_pspoke
19794                 | LR__2076
19794                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
19794     18 4E 05 F1 | 	add	fp, #24
19798     A7 3C 02 FB | 	rdlong	local12, fp
1979c     18 4E 85 F1 | 	sub	fp, #24
197a0     06 3C 0E F2 | 	cmp	local12, #6 wz
197a4     64 00 90 5D |  if_ne	jmp	#LR__2077
197a8     52 00 00 FF 
197ac     BC E4 05 F1 | 	add	objptr, ##42172
197b0     F2 40 02 FB | 	rdlong	local14, objptr
197b4     52 00 00 FF 
197b8     BC E4 85 F1 | 	sub	objptr, ##42172
197bc     2B 40 0E F2 | 	cmp	local14, #43 wz
197c0     48 00 90 AD |  if_e	jmp	#LR__2077
197c4     30 4F 05 F1 | 	add	fp, #304
197c8     A7 3E 02 FB | 	rdlong	local13, fp
197cc     02 3E 66 F0 | 	shl	local13, #2
197d0     04 4F 85 F1 | 	sub	fp, #260
197d4     A7 3E 02 F1 | 	add	local13, fp
197d8     1F 13 02 FB | 	rdlong	arg01, local13
197dc     2C 4E 85 F1 | 	sub	fp, #44
197e0     28 F8 B0 FD | 	call	#__system____builtin_atof
197e4     28 4E 05 F1 | 	add	fp, #40
197e8     A7 FA 61 FC | 	wrlong	result1, fp
197ec     0C 4E 85 F1 | 	sub	fp, #12
197f0     A7 3C 02 FB | 	rdlong	local12, fp
197f4     0C 4E 05 F1 | 	add	fp, #12
197f8     A7 12 02 F6 | 	mov	arg01, fp
197fc     28 4E 85 F1 | 	sub	fp, #40
19800     09 15 02 FB | 	rdlong	arg02, arg01
19804     1E 13 02 F6 | 	mov	arg01, local12
19808     30 89 B0 FD | 	call	#_pslpoke
1980c                 | LR__2077
1980c                 | LR__2078
1980c     30 4F 05 F1 | 	add	fp, #304
19810     A7 40 02 FB | 	rdlong	local14, fp
19814     01 40 06 F1 | 	add	local14, #1
19818     A7 40 62 FC | 	wrlong	local14, fp
1981c     30 4F 85 F1 | 	sub	fp, #304
19820     B8 F6 9F FD | 	jmp	#LR__2042
19824                 | LR__2079
19824                 | LR__2080
19824     A7 F0 03 F6 | 	mov	ptra, fp
19828     B2 00 A0 FD | 	call	#popregs_
1982c                 | _do_read_ret
1982c     2D 00 64 FD | 	ret
19830                 | 
19830                 | ' 
19830                 | ' '------------------- release
19830                 | ' 
19830                 | ' sub do_release
19830                 | _do_release
19830     00 4A 05 F6 | 	mov	COUNT_, #0
19834     A8 00 A0 FD | 	call	#pushregs_
19838     10 F0 07 F1 | 	add	ptra, #16
1983c     40 34 BF FD | 	call	#_pop
19840     FF 14 02 F6 | 	mov	arg02, result3
19844     A7 FA 61 FC | 	wrlong	result1, fp
19848     04 4E 05 F1 | 	add	fp, #4
1984c     A7 FC 61 FC | 	wrlong	result2, fp
19850     04 4E 05 F1 | 	add	fp, #4
19854     A7 14 62 FC | 	wrlong	arg02, fp
19858     08 4E 85 F1 | 	sub	fp, #8
1985c     A7 12 02 F6 | 	mov	arg01, fp
19860     00 36 BF FD | 	call	#_converttoint
19864     0C 4E 05 F1 | 	add	fp, #12
19868     A7 FA 61 FC | 	wrlong	result1, fp
1986c                 | ' 
1986c                 | ' t1=pop()
1986c                 | ' channel=converttoint(t1)
1986c                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
1986c     0C 4E 85 F1 | 	sub	fp, #12
19870     00 FA 55 F2 | 	cmps	result1, #0 wc
19874     44 00 90 CD |  if_b	jmp	#LR__2090
19878     0C 4E 05 F1 | 	add	fp, #12
1987c     A7 14 02 FB | 	rdlong	arg02, fp
19880     0C 4E 85 F1 | 	sub	fp, #12
19884     08 14 56 F2 | 	cmps	arg02, #8 wc
19888     30 00 90 3D |  if_ae	jmp	#LR__2090
1988c     37 00 00 FF 
19890     10 E4 05 F1 | 	add	objptr, ##28176
19894     F2 12 02 FB | 	rdlong	arg01, objptr
19898     37 00 00 FF 
1989c     10 E4 85 F1 | 	sub	objptr, ##28176
198a0     0C 4E 05 F1 | 	add	fp, #12
198a4     A7 14 02 FB | 	rdlong	arg02, fp
198a8     0C 4E 85 F1 | 	sub	fp, #12
198ac     06 14 66 F0 | 	shl	arg02, #6
198b0     0A 13 02 F1 | 	add	arg01, arg02
198b4     2C 12 06 F1 | 	add	arg01, #44
198b8     09 FF 69 FC | 	wrlong	#255, arg01
198bc                 | LR__2090
198bc     A7 F0 03 F6 | 	mov	ptra, fp
198c0     B2 00 A0 FD | 	call	#popregs_
198c4                 | _do_release_ret
198c4     2D 00 64 FD | 	ret
198c8                 | 
198c8                 | ' 
198c8                 | ' '------------------- restore
198c8                 | ' 
198c8                 | ' sub do_restore()
198c8                 | _do_restore
198c8     4A 00 00 FF 
198cc     88 E4 05 F1 | 	add	objptr, ##38024
198d0     F2 00 02 FB | 	rdlong	_var01, objptr
198d4     06 00 00 FF 
198d8     A4 E4 05 F1 | 	add	objptr, ##3236
198dc     F2 00 62 FC | 	wrlong	_var01, objptr
198e0     AF 01 00 FF 
198e4     4B 01 06 F6 | 	mov	_var01, ##@LR__5922
198e8     01 00 00 FF 
198ec     5C E5 05 F1 | 	add	objptr, ##860
198f0     F2 00 62 FC | 	wrlong	_var01, objptr
198f4     52 00 00 FF 
198f8     88 E4 85 F1 | 	sub	objptr, ##42120
198fc                 | _do_restore_ret
198fc     2D 00 64 FD | 	ret
19900                 | 
19900                 | ' 
19900                 | ' '------------------- return
19900                 | ' 
19900                 | ' sub do_return()
19900                 | _do_return
19900                 | ' if gosubtop>0 then
19900     50 00 00 FF 
19904     34 E5 05 F1 | 	add	objptr, ##41268
19908     F2 00 02 FB | 	rdlong	_var01, objptr
1990c     50 00 00 FF 
19910     34 E5 85 F1 | 	sub	objptr, ##41268
19914     01 00 56 F2 | 	cmps	_var01, #1 wc
19918     8C 00 90 CD |  if_b	jmp	#LR__2100
1991c     50 00 00 FF 
19920     34 E5 05 F1 | 	add	objptr, ##41268
19924     F2 00 02 FB | 	rdlong	_var01, objptr
19928     03 00 66 F0 | 	shl	_var01, #3
1992c     03 00 00 FF 
19930     88 E5 85 F1 | 	sub	objptr, ##1928
19934     F2 00 02 F1 | 	add	_var01, objptr
19938     00 01 02 FB | 	rdlong	_var01, _var01
1993c     03 00 00 FF 
19940     0C E5 05 F1 | 	add	objptr, ##1804
19944     F2 00 62 FC | 	wrlong	_var01, objptr
19948     7C E4 05 F1 | 	add	objptr, #124
1994c     F2 00 02 FB | 	rdlong	_var01, objptr
19950     03 00 66 F0 | 	shl	_var01, #3
19954     03 00 00 FF 
19958     88 E5 85 F1 | 	sub	objptr, ##1928
1995c     F2 00 02 F1 | 	add	_var01, objptr
19960     04 00 06 F1 | 	add	_var01, #4
19964     00 01 02 FB | 	rdlong	_var01, _var01
19968     03 00 00 FF 
1996c     10 E5 05 F1 | 	add	objptr, ##1808
19970     F2 00 62 FC | 	wrlong	_var01, objptr
19974     06 00 00 FF 
19978     40 E4 85 F1 | 	sub	objptr, ##3136
1997c     F2 00 02 FB | 	rdlong	_var01, objptr
19980     01 00 86 F1 | 	sub	_var01, #1
19984     04 E4 05 F1 | 	add	objptr, #4
19988     F2 00 62 FC | 	wrlong	_var01, objptr
1998c     06 00 00 FF 
19990     B4 E4 05 F1 | 	add	objptr, ##3252
19994     F2 00 02 FB | 	rdlong	_var01, objptr
19998     01 00 86 F1 | 	sub	_var01, #1
1999c     F2 00 62 FC | 	wrlong	_var01, objptr
199a0     50 00 00 FF 
199a4     34 E5 85 F1 | 	sub	objptr, ##41268
199a8                 | LR__2100
199a8                 | _do_return_ret
199a8     2D 00 64 FD | 	ret
199ac                 | 
199ac                 | ' 
199ac                 | ' '------------------- right$
199ac                 | ' 
199ac                 | ' sub do_right
199ac                 | _do_right
199ac     00 4A 05 F6 | 	mov	COUNT_, #0
199b0     A8 00 A0 FD | 	call	#pushregs_
199b4     14 F0 07 F1 | 	add	ptra, #20
199b8     4A 00 00 FF 
199bc     80 E4 05 F1 | 	add	objptr, ##38016
199c0     F2 16 02 FB | 	rdlong	arg03, objptr
199c4     0B 15 02 F6 | 	mov	arg02, arg03
199c8     01 14 66 F0 | 	shl	arg02, #1
199cc     0B 15 02 F1 | 	add	arg02, arg03
199d0     02 14 66 F0 | 	shl	arg02, #2
199d4     03 00 00 FF 
199d8     04 E4 85 F1 | 	sub	objptr, ##1540
199dc     F2 14 02 F1 | 	add	arg02, objptr
199e0     0A 17 02 FB | 	rdlong	arg03, arg02
199e4     0C 4E 05 F1 | 	add	fp, #12
199e8     A7 16 62 FC | 	wrlong	arg03, fp
199ec                 | ' 
199ec                 | ' numpar=compiledline(lineptr_e).result.uresult
199ec                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
199ec     0C 4E 85 F1 | 	sub	fp, #12
199f0     02 16 0E F2 | 	cmp	arg03, #2 wz
199f4     47 00 00 FF 
199f8     7C E4 85 F1 | 	sub	objptr, ##36476
199fc     40 00 90 AD |  if_e	jmp	#LR__2110
19a00     00 12 06 F6 | 	mov	arg01, #0
19a04     A8 1C B1 FD | 	call	#__system___getiolock_0599
19a08     FD 12 02 F6 | 	mov	arg01, result1
19a0c     78 BF B0 FD | 	call	#__system___lockmem
19a10     AF 01 00 FF 
19a14     4C 15 06 F6 | 	mov	arg02, ##@LR__5923
19a18     00 12 06 F6 | 	mov	arg01, #0
19a1c     00 16 06 F6 | 	mov	arg03, #0
19a20     58 CC B0 FD | 	call	#__system___basic_print_string
19a24     00 12 06 F6 | 	mov	arg01, #0
19a28     84 1C B1 FD | 	call	#__system___getiolock_0599
19a2c     FD 00 68 FC | 	wrlong	#0, result1
19a30     27 12 06 F6 | 	mov	arg01, #39
19a34     00 14 06 F6 | 	mov	arg02, #0
19a38     60 85 B0 FD | 	call	#_printerror
19a3c     EC 00 90 FD | 	jmp	#LR__2113
19a40                 | LR__2110
19a40     3C 32 BF FD | 	call	#_pop
19a44     FF 16 02 F6 | 	mov	arg03, result3
19a48     A7 FA 61 FC | 	wrlong	result1, fp
19a4c     04 4E 05 F1 | 	add	fp, #4
19a50     A7 FC 61 FC | 	wrlong	result2, fp
19a54     04 4E 05 F1 | 	add	fp, #4
19a58     A7 16 62 FC | 	wrlong	arg03, fp
19a5c     08 4E 85 F1 | 	sub	fp, #8
19a60     A7 12 02 F6 | 	mov	arg01, fp
19a64     FC 33 BF FD | 	call	#_converttoint
19a68     FD 16 02 F6 | 	mov	arg03, result1
19a6c     10 4E 05 F1 | 	add	fp, #16
19a70     A7 16 62 FC | 	wrlong	arg03, fp
19a74     10 4E 85 F1 | 	sub	fp, #16
19a78     04 32 BF FD | 	call	#_pop
19a7c     FF 16 02 F6 | 	mov	arg03, result3
19a80     A7 FA 61 FC | 	wrlong	result1, fp
19a84     04 4E 05 F1 | 	add	fp, #4
19a88     A7 FC 61 FC | 	wrlong	result2, fp
19a8c     04 4E 05 F1 | 	add	fp, #4
19a90     A7 16 62 FC | 	wrlong	arg03, fp
19a94                 | ' t1=pop() : arg=converttoint(t1)
19a94                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
19a94     08 4E 85 F1 | 	sub	fp, #8
19a98     2B 16 0E F2 | 	cmp	arg03, #43 wz
19a9c     18 00 90 5D |  if_ne	jmp	#LR__2111
19aa0     A7 12 02 FB | 	rdlong	arg01, fp
19aa4     50 33 BF FD | 	call	#_convertstring
19aa8     A7 FA 61 FC | 	wrlong	result1, fp
19aac     08 4E 05 F1 | 	add	fp, #8
19ab0     A7 3E 68 FC | 	wrlong	#31, fp
19ab4     08 4E 85 F1 | 	sub	fp, #8
19ab8                 | LR__2111
19ab8                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
19ab8     08 4E 05 F1 | 	add	fp, #8
19abc     A7 16 02 FB | 	rdlong	arg03, fp
19ac0     08 4E 85 F1 | 	sub	fp, #8
19ac4     1F 16 0E F2 | 	cmp	arg03, #31 wz
19ac8     40 00 90 AD |  if_e	jmp	#LR__2112
19acc     00 12 06 F6 | 	mov	arg01, #0
19ad0     DC 1B B1 FD | 	call	#__system___getiolock_0599
19ad4     FD 12 02 F6 | 	mov	arg01, result1
19ad8     AC BE B0 FD | 	call	#__system___lockmem
19adc     AF 01 00 FF 
19ae0     55 15 06 F6 | 	mov	arg02, ##@LR__5924
19ae4     00 12 06 F6 | 	mov	arg01, #0
19ae8     00 16 06 F6 | 	mov	arg03, #0
19aec     8C CB B0 FD | 	call	#__system___basic_print_string
19af0     00 12 06 F6 | 	mov	arg01, #0
19af4     B8 1B B1 FD | 	call	#__system___getiolock_0599
19af8     FD 00 68 FC | 	wrlong	#0, result1
19afc     0F 12 06 F6 | 	mov	arg01, #15
19b00     00 14 06 F6 | 	mov	arg02, #0
19b04     94 84 B0 FD | 	call	#_printerror
19b08     20 00 90 FD | 	jmp	#LR__2113
19b0c                 | LR__2112
19b0c     A7 12 02 FB | 	rdlong	arg01, fp
19b10     10 4E 05 F1 | 	add	fp, #16
19b14     A7 14 02 FB | 	rdlong	arg02, fp
19b18     10 4E 85 F1 | 	sub	fp, #16
19b1c     6C DF B0 FD | 	call	#__system__Right_S
19b20     A7 FA 61 FC | 	wrlong	result1, fp
19b24     A7 12 02 F6 | 	mov	arg01, fp
19b28     EC 31 BF FD | 	call	#_push
19b2c                 | LR__2113
19b2c     A7 F0 03 F6 | 	mov	ptra, fp
19b30     B2 00 A0 FD | 	call	#popregs_
19b34                 | _do_right_ret
19b34     2D 00 64 FD | 	ret
19b38                 | 
19b38                 | ' 
19b38                 | ' '------------------- rnd
19b38                 | ' 
19b38                 | ' sub do_rnd
19b38                 | _do_rnd
19b38     01 4A 05 F6 | 	mov	COUNT_, #1
19b3c     A8 00 A0 FD | 	call	#pushregs_
19b40     10 F0 07 F1 | 	add	ptra, #16
19b44     4A 00 00 FF 
19b48     80 E4 05 F1 | 	add	objptr, ##38016
19b4c     F2 26 02 FB | 	rdlong	local01, objptr
19b50     13 17 02 F6 | 	mov	arg03, local01
19b54     01 16 66 F0 | 	shl	arg03, #1
19b58     13 17 02 F1 | 	add	arg03, local01
19b5c     02 16 66 F0 | 	shl	arg03, #2
19b60     03 00 00 FF 
19b64     04 E4 85 F1 | 	sub	objptr, ##1540
19b68     F2 16 02 F1 | 	add	arg03, objptr
19b6c     0B 17 02 FB | 	rdlong	arg03, arg03
19b70     0C 4E 05 F1 | 	add	fp, #12
19b74     A7 16 62 FC | 	wrlong	arg03, fp
19b78                 | ' 
19b78                 | ' numpar=compiledline(lineptr_e).result.uresult
19b78                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
19b78     0C 4E 85 F1 | 	sub	fp, #12
19b7c     02 16 16 F2 | 	cmp	arg03, #2 wc
19b80     47 00 00 FF 
19b84     7C E4 85 F1 | 	sub	objptr, ##36476
19b88     40 00 90 CD |  if_b	jmp	#LR__2120
19b8c     00 12 06 F6 | 	mov	arg01, #0
19b90     1C 1B B1 FD | 	call	#__system___getiolock_0599
19b94     FD 12 02 F6 | 	mov	arg01, result1
19b98     EC BD B0 FD | 	call	#__system___lockmem
19b9c     AF 01 00 FF 
19ba0     5E 15 06 F6 | 	mov	arg02, ##@LR__5925
19ba4     00 12 06 F6 | 	mov	arg01, #0
19ba8     00 16 06 F6 | 	mov	arg03, #0
19bac     CC CA B0 FD | 	call	#__system___basic_print_string
19bb0     00 12 06 F6 | 	mov	arg01, #0
19bb4     F8 1A B1 FD | 	call	#__system___getiolock_0599
19bb8     FD 00 68 FC | 	wrlong	#0, result1
19bbc     27 12 06 F6 | 	mov	arg01, #39
19bc0     00 14 06 F6 | 	mov	arg02, #0
19bc4     D4 83 B0 FD | 	call	#_printerror
19bc8     30 01 90 FD | 	jmp	#LR__2127
19bcc                 | LR__2120
19bcc                 | ' if numpar=0 then
19bcc     0C 4E 05 F1 | 	add	fp, #12
19bd0     A7 FE 09 FB | 	rdlong	result3, fp wz
19bd4     0C 4E 85 F1 | 	sub	fp, #12
19bd8     20 00 90 5D |  if_ne	jmp	#LR__2121
19bdc     08 4E 05 F1 | 	add	fp, #8
19be0     A7 3A 68 FC | 	wrlong	#29, fp
19be4     08 4E 85 F1 | 	sub	fp, #8
19be8     1B FA 61 FD | 	getrnd	result1
19bec     A7 FA 61 FC | 	wrlong	result1, fp
19bf0     A7 12 02 F6 | 	mov	arg01, fp
19bf4     20 31 BF FD | 	call	#_push
19bf8     00 01 90 FD | 	jmp	#LR__2126
19bfc                 | LR__2121
19bfc     80 30 BF FD | 	call	#_pop
19c00     A7 FA 61 FC | 	wrlong	result1, fp
19c04     04 4E 05 F1 | 	add	fp, #4
19c08     A7 FC 61 FC | 	wrlong	result2, fp
19c0c     04 4E 05 F1 | 	add	fp, #4
19c10     A7 FE 61 FC | 	wrlong	result3, fp
19c14                 | '   t1=pop()
19c14                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
19c14     08 4E 85 F1 | 	sub	fp, #8
19c18     1C FE 0D F2 | 	cmp	result3, #28 wz
19c1c     08 4E 05 51 |  if_ne	add	fp, #8
19c20     A7 26 02 5B |  if_ne	rdlong	local01, fp
19c24     08 4E 85 51 |  if_ne	sub	fp, #8
19c28     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
19c2c     2C 00 90 5D |  if_ne	jmp	#LR__2122
19c30     1B FA 61 FD | 	getrnd	result1
19c34     A7 26 02 FB | 	rdlong	local01, fp
19c38     13 FB 11 FD | 	qdiv	result1, local01
19c3c     A7 12 02 F6 | 	mov	arg01, fp
19c40     19 26 62 FD | 	getqy	local01
19c44     A7 26 62 FC | 	wrlong	local01, fp
19c48     08 4E 05 F1 | 	add	fp, #8
19c4c     A7 3A 68 FC | 	wrlong	#29, fp
19c50     08 4E 85 F1 | 	sub	fp, #8
19c54     C0 30 BF FD | 	call	#_push
19c58     A0 00 90 FD | 	jmp	#LR__2125
19c5c                 | LR__2122
19c5c     08 4E 05 F1 | 	add	fp, #8
19c60     A7 26 02 FB | 	rdlong	local01, fp
19c64     08 4E 85 F1 | 	sub	fp, #8
19c68     1E 26 0E F2 | 	cmp	local01, #30 wz
19c6c     48 00 90 5D |  if_ne	jmp	#LR__2123
19c70     A7 12 02 FB | 	rdlong	arg01, fp
19c74     00 C0 24 FF 
19c78     00 14 06 F6 | 	mov	arg02, ##1233125376
19c7c     84 ED B0 FD | 	call	#__system___float_div
19c80     FD 26 02 F6 | 	mov	local01, result1
19c84     1B 12 62 FD | 	getrnd	arg01
19c88     74 13 06 F4 | 	bitl	arg01, #372
19c8c     6C E7 B0 FD | 	call	#__system___float_fromuns
19c90     FD 14 02 F6 | 	mov	arg02, result1
19c94     13 13 02 F6 | 	mov	arg01, local01
19c98     64 EB B0 FD | 	call	#__system___float_mul
19c9c     A7 FA 61 FC | 	wrlong	result1, fp
19ca0     08 4E 05 F1 | 	add	fp, #8
19ca4     A7 3C 68 FC | 	wrlong	#30, fp
19ca8     08 4E 85 F1 | 	sub	fp, #8
19cac     A7 12 02 F6 | 	mov	arg01, fp
19cb0     64 30 BF FD | 	call	#_push
19cb4     44 00 90 FD | 	jmp	#LR__2124
19cb8                 | LR__2123
19cb8                 | '     print "rnd: "; : printerror(40) 
19cb8     00 12 06 F6 | 	mov	arg01, #0
19cbc     F0 19 B1 FD | 	call	#__system___getiolock_0599
19cc0     FD 12 02 F6 | 	mov	arg01, result1
19cc4     C0 BC B0 FD | 	call	#__system___lockmem
19cc8     AF 01 00 FF 
19ccc     64 15 06 F6 | 	mov	arg02, ##@LR__5926
19cd0     00 12 06 F6 | 	mov	arg01, #0
19cd4     00 16 06 F6 | 	mov	arg03, #0
19cd8     A0 C9 B0 FD | 	call	#__system___basic_print_string
19cdc     00 12 06 F6 | 	mov	arg01, #0
19ce0     CC 19 B1 FD | 	call	#__system___getiolock_0599
19ce4     FD 00 68 FC | 	wrlong	#0, result1
19ce8     28 12 06 F6 | 	mov	arg01, #40
19cec     00 14 06 F6 | 	mov	arg02, #0
19cf0     A8 82 B0 FD | 	call	#_printerror
19cf4     A7 12 02 F6 | 	mov	arg01, fp
19cf8     1C 30 BF FD | 	call	#_push
19cfc                 | LR__2124
19cfc                 | LR__2125
19cfc                 | LR__2126
19cfc                 | LR__2127
19cfc     A7 F0 03 F6 | 	mov	ptra, fp
19d00     B2 00 A0 FD | 	call	#popregs_
19d04                 | _do_rnd_ret
19d04     2D 00 64 FD | 	ret
19d08                 | 
19d08                 | ' 
19d08                 | ' '-------------------- round
19d08                 | ' 
19d08                 | ' sub do_round
19d08                 | _do_round
19d08     00 4A 05 F6 | 	mov	COUNT_, #0
19d0c     A8 00 A0 FD | 	call	#pushregs_
19d10     0C F0 07 F1 | 	add	ptra, #12
19d14     68 2F BF FD | 	call	#_pop
19d18     A7 FA 61 FC | 	wrlong	result1, fp
19d1c     04 4E 05 F1 | 	add	fp, #4
19d20     A7 FC 61 FC | 	wrlong	result2, fp
19d24     04 4E 05 F1 | 	add	fp, #4
19d28     A7 FE 61 FC | 	wrlong	result3, fp
19d2c     08 4E 85 F1 | 	sub	fp, #8
19d30     A7 12 02 F6 | 	mov	arg01, fp
19d34     2C 31 BF FD | 	call	#_converttoint
19d38     A7 FA 61 FC | 	wrlong	result1, fp
19d3c     08 4E 05 F1 | 	add	fp, #8
19d40     A7 38 68 FC | 	wrlong	#28, fp
19d44     08 4E 85 F1 | 	sub	fp, #8
19d48     A7 12 02 F6 | 	mov	arg01, fp
19d4c     C8 2F BF FD | 	call	#_push
19d50     A7 F0 03 F6 | 	mov	ptra, fp
19d54     B2 00 A0 FD | 	call	#popregs_
19d58                 | _do_round_ret
19d58     2D 00 64 FD | 	ret
19d5c                 | 
19d5c                 | ' 
19d5c                 | ' '-------------------- rqpin
19d5c                 | ' 
19d5c                 | ' sub do_rqpin
19d5c                 | _do_rqpin
19d5c     00 4A 05 F6 | 	mov	COUNT_, #0
19d60     A8 00 A0 FD | 	call	#pushregs_
19d64     0C F0 07 F1 | 	add	ptra, #12
19d68     14 2F BF FD | 	call	#_pop
19d6c     A7 FA 61 FC | 	wrlong	result1, fp
19d70     04 4E 05 F1 | 	add	fp, #4
19d74     A7 FC 61 FC | 	wrlong	result2, fp
19d78     04 4E 05 F1 | 	add	fp, #4
19d7c     A7 FE 61 FC | 	wrlong	result3, fp
19d80     08 4E 85 F1 | 	sub	fp, #8
19d84     A7 12 02 F6 | 	mov	arg01, fp
19d88     D8 30 BF FD | 	call	#_converttoint
19d8c     FD 12 02 F6 | 	mov	arg01, result1
19d90     00 FA 05 F6 | 	mov	result1, #0
19d94     09 FB 81 FA | 	rqpin	result1, arg01
19d98     52 00 00 FF 
19d9c     BC E4 05 F1 | 	add	objptr, ##42172
19da0     F2 FA 61 FC | 	wrlong	result1, objptr
19da4     52 00 00 FF 
19da8     BC E4 85 F1 | 	sub	objptr, ##42172
19dac     08 4E 05 F1 | 	add	fp, #8
19db0     A7 3A 68 FC | 	wrlong	#29, fp
19db4     08 4E 85 F1 | 	sub	fp, #8
19db8     A7 08 68 FC | 	wrlong	#4, fp
19dbc     A7 12 02 F6 | 	mov	arg01, fp
19dc0     54 2F BF FD | 	call	#_push
19dc4     A7 F0 03 F6 | 	mov	ptra, fp
19dc8     B2 00 A0 FD | 	call	#popregs_
19dcc                 | _do_rqpin_ret
19dcc     2D 00 64 FD | 	ret
19dd0                 | 
19dd0                 | ' 
19dd0                 | ' ' ------------------ run
19dd0                 | ' 
19dd0                 | ' sub do_run
19dd0                 | _do_run
19dd0     04 4A 05 F6 | 	mov	COUNT_, #4
19dd4     A8 00 A0 FD | 	call	#pushregs_
19dd8     4A 00 00 FF 
19ddc     80 E4 05 F1 | 	add	objptr, ##38016
19de0     F2 26 02 FB | 	rdlong	local01, objptr
19de4     06 00 00 FF 
19de8     38 E4 05 F1 | 	add	objptr, ##3128
19dec     F2 28 02 FB | 	rdlong	local02, objptr
19df0     04 E4 05 F1 | 	add	objptr, #4
19df4     F2 2A 02 FB | 	rdlong	local03, objptr
19df8     13 19 02 F6 | 	mov	arg04, local01
19dfc     0C 17 02 F6 | 	mov	arg03, arg04
19e00     01 16 66 F0 | 	shl	arg03, #1
19e04     0C 17 02 F1 | 	add	arg03, arg04
19e08     02 16 66 F0 | 	shl	arg03, #2
19e0c     09 00 00 FF 
19e10     40 E4 85 F1 | 	sub	objptr, ##4672
19e14     F2 16 02 F1 | 	add	arg03, objptr
19e18     0B 15 02 FB | 	rdlong	arg02, arg03
19e1c                 | ' 
19e1c                 | ' r_lineptr_e=lineptr_e
19e1c                 | ' r_runptr=runptr
19e1c                 | ' r_runptr2=runptr2
19e1c                 | ' 
19e1c                 | ' numpar=compiledline(lineptr_e).result.uresult
19e1c                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
19e1c     01 14 0E F2 | 	cmp	arg02, #1 wz
19e20     47 00 00 FF 
19e24     7C E4 85 F1 | 	sub	objptr, ##36476
19e28     00 12 06 A6 |  if_e	mov	arg01, #0
19e2c     DC A8 BF AD |  if_e	call	#_do_load
19e30     4A 00 00 FF 
19e34     88 E4 05 F1 | 	add	objptr, ##38024
19e38     F2 18 02 FB | 	rdlong	arg04, objptr
19e3c     06 00 00 FF 
19e40     30 E4 05 F1 | 	add	objptr, ##3120
19e44     F2 18 62 FC | 	wrlong	arg04, objptr
19e48     04 E4 05 F1 | 	add	objptr, #4
19e4c     F2 00 68 FC | 	wrlong	#0, objptr
19e50     04 E4 05 F1 | 	add	objptr, #4
19e54     FF FF FF FF 
19e58     F2 FE 6B FC | 	wrlong	##-1, objptr
19e5c     06 00 00 FF 
19e60     38 E4 85 F1 | 	sub	objptr, ##3128
19e64     F2 18 02 FB | 	rdlong	arg04, objptr
19e68     06 00 00 FF 
19e6c     A4 E4 05 F1 | 	add	objptr, ##3236
19e70     F2 18 62 FC | 	wrlong	arg04, objptr
19e74     AF 01 00 FF 
19e78     6A 19 06 F6 | 	mov	arg04, ##@LR__5927
19e7c     01 00 00 FF 
19e80     5C E5 05 F1 | 	add	objptr, ##860
19e84     F2 18 62 FC | 	wrlong	arg04, objptr
19e88                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
19e88                 | ' dataptr=programstart : readline="" ' reset the data pointer
19e88                 | ' if inrun>0 then 
19e88     01 00 00 FF 
19e8c     9C E5 85 F1 | 	sub	objptr, ##924
19e90     F2 18 02 FB | 	rdlong	arg04, objptr
19e94     50 00 00 FF 
19e98     EC E4 85 F1 | 	sub	objptr, ##41196
19e9c     01 18 16 F2 | 	cmp	arg04, #1 wc
19ea0     30 00 90 CD |  if_b	jmp	#LR__2130
19ea4     50 00 00 FF 
19ea8     F0 E4 05 F1 | 	add	objptr, ##41200
19eac     F2 12 02 F6 | 	mov	arg01, objptr
19eb0     38 E4 85 F1 | 	sub	objptr, #56
19eb4     F2 14 02 FB | 	rdlong	arg02, objptr
19eb8     18 16 06 F6 | 	mov	arg03, #24
19ebc     44 00 00 FF 
19ec0     EC E5 85 F1 | 	sub	objptr, ##35308
19ec4     38 AE B0 FD | 	call	#_psram_spin2_read1
19ec8     0B 00 00 FF 
19ecc     CC E4 85 F1 | 	sub	objptr, ##5836
19ed0                 | '   psram.read1(varptr(runheader),runptr,24)  
19ed0                 | '   return
19ed0     0C 03 90 FD | 	jmp	#LR__2137
19ed4                 | LR__2130
19ed4     50 00 00 FF 
19ed8     EC E4 05 F1 | 	add	objptr, ##41196
19edc     F2 02 68 FC | 	wrlong	#1, objptr
19ee0     04 E4 05 F1 | 	add	objptr, #4
19ee4     F2 12 02 F6 | 	mov	arg01, objptr
19ee8     38 E4 85 F1 | 	sub	objptr, #56
19eec     F2 14 02 FB | 	rdlong	arg02, objptr
19ef0     18 16 06 F6 | 	mov	arg03, #24
19ef4     44 00 00 FF 
19ef8     EC E5 85 F1 | 	sub	objptr, ##35308
19efc     00 AE B0 FD | 	call	#_psram_spin2_read1
19f00                 | ' inrun=1
19f00                 | ' psram.read1(varptr(runheader),runptr,24) 
19f00                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
19f00     45 00 00 FF 
19f04     24 E4 05 F1 | 	add	objptr, ##35364
19f08     F2 2C 02 FB | 	rdlong	local04, objptr
19f0c     50 00 00 FF 
19f10     F0 E4 85 F1 | 	sub	objptr, ##41200
19f14     FF FF 7F FF 
19f18     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
19f1c     50 00 00 AF 
19f20     EC E4 05 A1 |  if_e	add	objptr, ##41196
19f24     F2 00 68 AC |  if_e	wrlong	#0, objptr
19f28     50 00 00 AF 
19f2c     EC E4 85 A1 |  if_e	sub	objptr, ##41196
19f30     AC 02 90 AD |  if_e	jmp	#LR__2137
19f34                 | ' do 
19f34                 | LR__2131
19f34                 | '   if runptr<>oldrunptr then
19f34     50 00 00 FF 
19f38     B8 E4 05 F1 | 	add	objptr, ##41144
19f3c     F2 2C 02 FB | 	rdlong	local04, objptr
19f40     08 E4 05 F1 | 	add	objptr, #8
19f44     F2 18 02 FB | 	rdlong	arg04, objptr
19f48     50 00 00 FF 
19f4c     C0 E4 85 F1 | 	sub	objptr, ##41152
19f50     0C 2D 0A F2 | 	cmp	local04, arg04 wz
19f54     CC 00 90 AD |  if_e	jmp	#LR__2132
19f58     50 00 00 FF 
19f5c     F0 E4 05 F1 | 	add	objptr, ##41200
19f60     F2 12 02 F6 | 	mov	arg01, objptr
19f64     38 E4 85 F1 | 	sub	objptr, #56
19f68     F2 14 02 FB | 	rdlong	arg02, objptr
19f6c     18 16 06 F6 | 	mov	arg03, #24
19f70     44 00 00 FF 
19f74     EC E5 85 F1 | 	sub	objptr, ##35308
19f78     84 AD B0 FD | 	call	#_psram_spin2_read1
19f7c     3B 00 00 FF 
19f80     B0 E5 05 F1 | 	add	objptr, ##30640
19f84     F2 12 02 F6 | 	mov	arg01, objptr
19f88     09 00 00 FF 
19f8c     3C E4 05 F1 | 	add	objptr, ##4668
19f90     F2 14 02 FB | 	rdlong	arg02, objptr
19f94     0B 00 00 FF 
19f98     54 E4 85 F1 | 	sub	objptr, ##5716
19f9c     F2 2C 02 FB | 	rdlong	local04, objptr
19fa0     01 2C 66 F0 | 	shl	local04, #1
19fa4     16 15 02 F1 | 	add	arg02, local04
19fa8     0B 00 00 FF 
19fac     94 E4 05 F1 | 	add	objptr, ##5780
19fb0     F2 16 02 FB | 	rdlong	arg03, objptr
19fb4     40 E4 85 F1 | 	sub	objptr, #64
19fb8     F2 2C 02 FB | 	rdlong	local04, objptr
19fbc     16 17 82 F1 | 	sub	arg03, local04
19fc0     44 00 00 FF 
19fc4     EC E5 85 F1 | 	sub	objptr, ##35308
19fc8     34 AD B0 FD | 	call	#_psram_spin2_read1
19fcc     45 00 00 FF 
19fd0     2C E4 05 F1 | 	add	objptr, ##35372
19fd4     F2 2C 02 FB | 	rdlong	local04, objptr
19fd8     40 E4 85 F1 | 	sub	objptr, #64
19fdc     F2 14 02 FB | 	rdlong	arg02, objptr
19fe0     0A 2D 82 F1 | 	sub	local04, arg02
19fe4     0B 00 00 FF 
19fe8     54 E4 85 F1 | 	sub	objptr, ##5716
19fec     F2 14 02 FB | 	rdlong	arg02, objptr
19ff0     0A 2D 12 FD | 	qdiv	local04, arg02
19ff4     05 00 00 FF 
19ff8     18 E4 05 F1 | 	add	objptr, ##2584
19ffc     18 2C 62 FD | 	getqx	local04
1a000     03 2C 86 F1 | 	sub	local04, #3
1a004     F2 2C 62 FC | 	wrlong	local04, objptr
1a008     06 00 00 FF 
1a00c     3C E4 05 F1 | 	add	objptr, ##3132
1a010     F2 2C 02 FB | 	rdlong	local04, objptr
1a014     08 E4 05 F1 | 	add	objptr, #8
1a018     F2 2C 62 FC | 	wrlong	local04, objptr
1a01c     50 00 00 FF 
1a020     C0 E4 85 F1 | 	sub	objptr, ##41152
1a024                 | LR__2132
1a024     50 00 00 FF 
1a028     04 E5 05 F1 | 	add	objptr, ##41220
1a02c     F2 2C 02 FB | 	rdlong	local04, objptr
1a030     4C E4 85 F1 | 	sub	objptr, #76
1a034     F2 2C 62 FC | 	wrlong	local04, objptr
1a038     04 E4 05 F1 | 	add	objptr, #4
1a03c     F2 12 02 FB | 	rdlong	arg01, objptr
1a040     50 00 00 FF 
1a044     BC E4 85 F1 | 	sub	objptr, ##41148
1a048     30 2B BF FD | 	call	#_execute_line
1a04c     50 00 00 FF 
1a050     BC E4 05 F1 | 	add	objptr, ##41148
1a054     F2 FA 61 FC | 	wrlong	result1, objptr
1a058     04 E4 85 F1 | 	sub	objptr, #4
1a05c     F2 2C 02 FB | 	rdlong	local04, objptr
1a060     50 00 00 FF 
1a064     B8 E4 85 F1 | 	sub	objptr, ##41144
1a068     FF FF 3F FF 
1a06c     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1a070     4C 00 90 AD |  if_e	jmp	#LR__2135
1a074     E0 12 06 F6 | 	mov	arg01, #224
1a078     14 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1a07c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a080     10 00 90 5D |  if_ne	jmp	#LR__2133
1a084     E4 12 06 F6 | 	mov	arg01, #228
1a088     04 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1a08c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a090     10 00 90 AD |  if_e	jmp	#LR__2134
1a094                 | LR__2133
1a094     06 12 06 F6 | 	mov	arg01, #6
1a098     F4 AF B0 FD | 	call	#_usbnew_spin2_keystate
1a09c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a0a0     1C 00 90 5D |  if_ne	jmp	#LR__2135
1a0a4                 | LR__2134
1a0a4     50 00 00 FF 
1a0a8     EC E4 05 F1 | 	add	objptr, ##41196
1a0ac     F2 2C 02 FB | 	rdlong	local04, objptr
1a0b0     50 00 00 FF 
1a0b4     EC E4 85 F1 | 	sub	objptr, ##41196
1a0b8     02 2C 0E F2 | 	cmp	local04, #2 wz
1a0bc     74 FE 9F 5D |  if_ne	jmp	#LR__2131
1a0c0                 | LR__2135
1a0c0                 | '   ''do whatever kbm.peek_latest_key()=$106 
1a0c0                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1a0c0     50 00 00 FF 
1a0c4     B8 E4 05 F1 | 	add	objptr, ##41144
1a0c8     F2 2C 02 FB | 	rdlong	local04, objptr
1a0cc     50 00 00 FF 
1a0d0     B8 E4 85 F1 | 	sub	objptr, ##41144
1a0d4     FF FF 3F FF 
1a0d8     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1a0dc     AC 00 90 AD |  if_e	jmp	#LR__2136
1a0e0     50 00 00 FF 
1a0e4     EC E4 05 F1 | 	add	objptr, ##41196
1a0e8     F2 2C 02 FB | 	rdlong	local04, objptr
1a0ec     50 00 00 FF 
1a0f0     EC E4 85 F1 | 	sub	objptr, ##41196
1a0f4     01 2C 0E F2 | 	cmp	local04, #1 wz
1a0f8     90 00 90 5D |  if_ne	jmp	#LR__2136
1a0fc                 | '   print: print "Stopped at line ";runheader(0) 
1a0fc     00 12 06 F6 | 	mov	arg01, #0
1a100     AC 15 B1 FD | 	call	#__system___getiolock_0599
1a104     FD 12 02 F6 | 	mov	arg01, result1
1a108     7C B8 B0 FD | 	call	#__system___lockmem
1a10c     00 12 06 F6 | 	mov	arg01, #0
1a110     0A 14 06 F6 | 	mov	arg02, #10
1a114     00 16 06 F6 | 	mov	arg03, #0
1a118     08 C5 B0 FD | 	call	#__system___basic_print_char
1a11c     00 12 06 F6 | 	mov	arg01, #0
1a120     8C 15 B1 FD | 	call	#__system___getiolock_0599
1a124     FD 00 68 FC | 	wrlong	#0, result1
1a128     00 12 06 F6 | 	mov	arg01, #0
1a12c     80 15 B1 FD | 	call	#__system___getiolock_0599
1a130     FD 12 02 F6 | 	mov	arg01, result1
1a134     50 B8 B0 FD | 	call	#__system___lockmem
1a138     AF 01 00 FF 
1a13c     6B 15 06 F6 | 	mov	arg02, ##@LR__5928
1a140     00 12 06 F6 | 	mov	arg01, #0
1a144     00 16 06 F6 | 	mov	arg03, #0
1a148     30 C5 B0 FD | 	call	#__system___basic_print_string
1a14c     50 00 00 FF 
1a150     F0 E4 05 F1 | 	add	objptr, ##41200
1a154     F2 14 02 FB | 	rdlong	arg02, objptr
1a158     50 00 00 FF 
1a15c     F0 E4 85 F1 | 	sub	objptr, ##41200
1a160     00 12 06 F6 | 	mov	arg01, #0
1a164     00 16 06 F6 | 	mov	arg03, #0
1a168     0A 18 06 F6 | 	mov	arg04, #10
1a16c     90 C5 B0 FD | 	call	#__system___basic_print_unsigned
1a170     00 12 06 F6 | 	mov	arg01, #0
1a174     0A 14 06 F6 | 	mov	arg02, #10
1a178     00 16 06 F6 | 	mov	arg03, #0
1a17c     A4 C4 B0 FD | 	call	#__system___basic_print_char
1a180     00 12 06 F6 | 	mov	arg01, #0
1a184     28 15 B1 FD | 	call	#__system___getiolock_0599
1a188     FD 00 68 FC | 	wrlong	#0, result1
1a18c                 | LR__2136
1a18c     50 00 00 FF 
1a190     EC E4 05 F1 | 	add	objptr, ##41196
1a194     F2 00 68 FC | 	wrlong	#0, objptr
1a198     06 00 00 FF 
1a19c     6C E4 85 F1 | 	sub	objptr, ##3180
1a1a0     F2 26 62 FC | 	wrlong	local01, objptr
1a1a4     06 00 00 FF 
1a1a8     38 E4 05 F1 | 	add	objptr, ##3128
1a1ac     F2 28 62 FC | 	wrlong	local02, objptr
1a1b0     04 E4 05 F1 | 	add	objptr, #4
1a1b4     F2 2A 62 FC | 	wrlong	local03, objptr
1a1b8     50 00 00 FF 
1a1bc     BC E4 85 F1 | 	sub	objptr, ##41148
1a1c0     11 12 06 F6 | 	mov	arg01, #17
1a1c4     08 14 06 F6 | 	mov	arg02, #8
1a1c8     10 16 06 F6 | 	mov	arg03, #16
1a1cc     14 8E B0 FD | 	call	#_hg010b_spin2_setspritesize
1a1d0     10 12 06 F6 | 	mov	arg01, #16
1a1d4     20 14 06 F6 | 	mov	arg02, #32
1a1d8     20 16 06 F6 | 	mov	arg03, #32
1a1dc     04 8E B0 FD | 	call	#_hg010b_spin2_setspritesize
1a1e0                 | LR__2137
1a1e0     A7 F0 03 F6 | 	mov	ptra, fp
1a1e4     B2 00 A0 FD | 	call	#popregs_
1a1e8                 | _do_run_ret
1a1e8     2D 00 64 FD | 	ret
1a1ec                 | 
1a1ec                 | ' 
1a1ec                 | ' ' ------------------ save
1a1ec                 | ' 
1a1ec                 | ' sub do_save                        
1a1ec                 | _do_save
1a1ec     04 4A 05 F6 | 	mov	COUNT_, #4
1a1f0     A8 00 A0 FD | 	call	#pushregs_
1a1f4     B8 F0 07 F1 | 	add	ptra, #184
1a1f8     4A 00 00 FF 
1a1fc     80 E4 05 F1 | 	add	objptr, ##38016
1a200     F2 26 02 FB | 	rdlong	local01, objptr
1a204     13 29 02 F6 | 	mov	local02, local01
1a208     01 28 66 F0 | 	shl	local02, #1
1a20c     13 29 02 F1 | 	add	local02, local01
1a210     02 28 66 F0 | 	shl	local02, #2
1a214     03 00 00 FF 
1a218     04 E4 85 F1 | 	sub	objptr, ##1540
1a21c     F2 28 02 F1 | 	add	local02, objptr
1a220     14 2B 02 FB | 	rdlong	local03, local02
1a224     10 4E 05 F1 | 	add	fp, #16
1a228     A7 2A 62 FC | 	wrlong	local03, fp
1a22c                 | ' 
1a22c                 | ' numpar=compiledline(lineptr_e).result.uresult
1a22c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1a22c     10 4E 85 F1 | 	sub	fp, #16
1a230     01 2A 56 F2 | 	cmps	local03, #1 wc
1a234     47 00 00 FF 
1a238     7C E4 85 F1 | 	sub	objptr, ##36476
1a23c     20 00 90 CD |  if_b	jmp	#LR__2140
1a240     3C 2A BF FD | 	call	#_pop
1a244     A7 FA 61 FC | 	wrlong	result1, fp
1a248     04 4E 05 F1 | 	add	fp, #4
1a24c     A7 FC 61 FC | 	wrlong	result2, fp
1a250     04 4E 05 F1 | 	add	fp, #4
1a254     A7 FE 61 FC | 	wrlong	result3, fp
1a258     08 4E 85 F1 | 	sub	fp, #8
1a25c     24 00 90 FD | 	jmp	#LR__2141
1a260                 | LR__2140
1a260     52 00 00 FF 
1a264     70 E4 05 F1 | 	add	objptr, ##42096
1a268     F2 2A 02 FB | 	rdlong	local03, objptr
1a26c     52 00 00 FF 
1a270     70 E4 85 F1 | 	sub	objptr, ##42096
1a274     A7 2A 62 FC | 	wrlong	local03, fp
1a278     08 4E 05 F1 | 	add	fp, #8
1a27c     A7 3E 68 FC | 	wrlong	#31, fp
1a280     08 4E 85 F1 | 	sub	fp, #8
1a284                 | LR__2141
1a284                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1a284     4A 00 00 FF 
1a288     88 E4 05 F1 | 	add	objptr, ##38024
1a28c     F2 12 02 FB | 	rdlong	arg01, objptr
1a290     4A 00 00 FF 
1a294     88 E4 85 F1 | 	sub	objptr, ##38024
1a298     D0 7F B0 FD | 	call	#_pslpeek
1a29c     FF FF 7F FF 
1a2a0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1a2a4     10 00 90 5D |  if_ne	jmp	#LR__2142
1a2a8     1B 12 06 F6 | 	mov	arg01, #27
1a2ac     00 14 06 F6 | 	mov	arg02, #0
1a2b0     E8 7C B0 FD | 	call	#_printerror
1a2b4     CC 02 90 FD | 	jmp	#LR__2148
1a2b8                 | LR__2142
1a2b8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1a2b8     08 4E 05 F1 | 	add	fp, #8
1a2bc     A7 2A 02 FB | 	rdlong	local03, fp
1a2c0     08 4E 85 F1 | 	sub	fp, #8
1a2c4     2B 2A 0E F2 | 	cmp	local03, #43 wz
1a2c8     18 00 90 5D |  if_ne	jmp	#LR__2143
1a2cc     A7 12 02 FB | 	rdlong	arg01, fp
1a2d0     24 2B BF FD | 	call	#_convertstring
1a2d4     A7 FA 61 FC | 	wrlong	result1, fp
1a2d8     08 4E 05 F1 | 	add	fp, #8
1a2dc     A7 3E 68 FC | 	wrlong	#31, fp
1a2e0     08 4E 85 F1 | 	sub	fp, #8
1a2e4                 | LR__2143
1a2e4                 | ' if t1.result_type=result_string then
1a2e4     08 4E 05 F1 | 	add	fp, #8
1a2e8     A7 2A 02 FB | 	rdlong	local03, fp
1a2ec     08 4E 85 F1 | 	sub	fp, #8
1a2f0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a2f4     8C 02 90 5D |  if_ne	jmp	#LR__2147
1a2f8                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1a2f8     A7 12 02 FB | 	rdlong	arg01, fp
1a2fc     AF 01 00 FF 
1a300     7C 15 06 F6 | 	mov	arg02, ##@LR__5929
1a304     A8 B6 B0 FD | 	call	#__system___string_cmp
1a308     00 FA 0D F2 | 	cmp	result1, #0 wz
1a30c     52 00 00 AF 
1a310     70 E4 05 A1 |  if_e	add	objptr, ##42096
1a314     F2 2A 02 AB |  if_e	rdlong	local03, objptr
1a318     A7 2A 62 AC |  if_e	wrlong	local03, fp
1a31c     52 00 00 AF 
1a320     70 E4 85 A1 |  if_e	sub	objptr, ##42096
1a324     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1a328     52 00 00 5F 
1a32c     70 E4 05 51 |  if_ne	add	objptr, ##42096
1a330     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
1a334     52 00 00 5F 
1a338     70 E4 85 51 |  if_ne	sub	objptr, ##42096
1a33c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1a33c     09 12 06 F6 | 	mov	arg01, #9
1a340     9C 09 B1 FD | 	call	#__system__close
1a344     09 2A 06 F6 | 	mov	local03, #9
1a348     4A 00 00 FF 
1a34c     94 E4 05 F1 | 	add	objptr, ##38036
1a350     F2 12 02 FB | 	rdlong	arg01, objptr
1a354     4A 00 00 FF 
1a358     94 E4 85 F1 | 	sub	objptr, ##38036
1a35c     AF 01 00 FF 
1a360     7D 15 06 F6 | 	mov	arg02, ##@LR__5930
1a364     7C B6 B0 FD | 	call	#__system___string_concat
1a368     FD 12 02 F6 | 	mov	arg01, result1
1a36c     A7 14 02 FB | 	rdlong	arg02, fp
1a370     70 B6 B0 FD | 	call	#__system___string_concat
1a374     FD 14 02 F6 | 	mov	arg02, result1
1a378     15 13 02 F6 | 	mov	arg01, local03
1a37c     0D 16 06 F6 | 	mov	arg03, #13
1a380     08 C2 B0 FD | 	call	#__system___basic_open_string
1a384     4A 00 00 FF 
1a388     88 E4 05 F1 | 	add	objptr, ##38024
1a38c     F2 2A 02 FB | 	rdlong	local03, objptr
1a390     4A 00 00 FF 
1a394     88 E4 85 F1 | 	sub	objptr, ##38024
1a398     B0 4E 05 F1 | 	add	fp, #176
1a39c     A7 2A 62 FC | 	wrlong	local03, fp
1a3a0     B0 4E 85 F1 | 	sub	fp, #176
1a3a4                 | '   saveptr=programstart
1a3a4                 | '   do
1a3a4                 | LR__2144
1a3a4     14 4E 05 F1 | 	add	fp, #20
1a3a8     A7 12 02 F6 | 	mov	arg01, fp
1a3ac     9C 4E 05 F1 | 	add	fp, #156
1a3b0     A7 14 02 FB | 	rdlong	arg02, fp
1a3b4     B0 4E 85 F1 | 	sub	fp, #176
1a3b8     18 16 06 F6 | 	mov	arg03, #24
1a3bc     0B 00 00 FF 
1a3c0     CC E4 05 F1 | 	add	objptr, ##5836
1a3c4     38 A9 B0 FD | 	call	#_psram_spin2_read1
1a3c8     2C 4E 05 F1 | 	add	fp, #44
1a3cc     A7 12 02 F6 | 	mov	arg01, fp
1a3d0     10 4E 85 F1 | 	sub	fp, #16
1a3d4     A7 14 02 FB | 	rdlong	arg02, fp
1a3d8     04 4E 05 F1 | 	add	fp, #4
1a3dc     A7 16 02 FB | 	rdlong	arg03, fp
1a3e0     20 4E 85 F1 | 	sub	fp, #32
1a3e4     18 A9 B0 FD | 	call	#_psram_spin2_read1
1a3e8     0B 00 00 FF 
1a3ec     CC E4 85 F1 | 	sub	objptr, ##5836
1a3f0     AF 01 00 FF 
1a3f4     7F 2B 06 F6 | 	mov	local03, ##@LR__5931
1a3f8     AC 4E 05 F1 | 	add	fp, #172
1a3fc     A7 2A 62 FC | 	wrlong	local03, fp
1a400                 | '     psram.read1(varptr(header(0)),saveptr,24)
1a400                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1a400                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1a400     A0 4E 85 F1 | 	sub	fp, #160
1a404     A7 02 68 FC | 	wrlong	#1, fp
1a408     14 4E 05 F1 | 	add	fp, #20
1a40c     A7 2C 02 FB | 	rdlong	local04, fp
1a410     20 4E 85 F1 | 	sub	fp, #32
1a414     01 2C 06 F1 | 	add	local04, #1
1a418                 | LR__2145
1a418     0C 4E 05 F1 | 	add	fp, #12
1a41c     A7 2A 02 FB | 	rdlong	local03, fp
1a420     0C 4E 85 F1 | 	sub	fp, #12
1a424     16 2B 52 F2 | 	cmps	local03, local04 wc
1a428     54 00 90 3D |  if_ae	jmp	#LR__2146
1a42c     AC 4E 05 F1 | 	add	fp, #172
1a430     A7 26 02 FB | 	rdlong	local01, fp
1a434     A0 4E 85 F1 | 	sub	fp, #160
1a438     A7 2A 02 FB | 	rdlong	local03, fp
1a43c     01 2A 86 F1 | 	sub	local03, #1
1a440     20 4E 05 F1 | 	add	fp, #32
1a444     A7 2A 02 F1 | 	add	local03, fp
1a448     15 13 C2 FA | 	rdbyte	arg01, local03
1a44c     2C 4E 85 F1 | 	sub	fp, #44
1a450     74 D7 B0 FD | 	call	#__system__Chr_S
1a454     FD 14 02 F6 | 	mov	arg02, result1
1a458     13 13 02 F6 | 	mov	arg01, local01
1a45c     84 B5 B0 FD | 	call	#__system___string_concat
1a460     AC 4E 05 F1 | 	add	fp, #172
1a464     A7 FA 61 FC | 	wrlong	result1, fp
1a468     A0 4E 85 F1 | 	sub	fp, #160
1a46c     A7 2A 02 FB | 	rdlong	local03, fp
1a470     01 2A 06 F1 | 	add	local03, #1
1a474     A7 2A 62 FC | 	wrlong	local03, fp
1a478     0C 4E 85 F1 | 	sub	fp, #12
1a47c     98 FF 9F FD | 	jmp	#LR__2145
1a480                 | LR__2146
1a480                 | '     print #9, saveline$
1a480     09 12 06 F6 | 	mov	arg01, #9
1a484     28 12 B1 FD | 	call	#__system___getiolock_0599
1a488     FD 12 02 F6 | 	mov	arg01, result1
1a48c     F8 B4 B0 FD | 	call	#__system___lockmem
1a490     AC 4E 05 F1 | 	add	fp, #172
1a494     A7 14 02 FB | 	rdlong	arg02, fp
1a498     AC 4E 85 F1 | 	sub	fp, #172
1a49c     09 12 06 F6 | 	mov	arg01, #9
1a4a0     00 16 06 F6 | 	mov	arg03, #0
1a4a4     D4 C1 B0 FD | 	call	#__system___basic_print_string
1a4a8     09 12 06 F6 | 	mov	arg01, #9
1a4ac     0A 14 06 F6 | 	mov	arg02, #10
1a4b0     00 16 06 F6 | 	mov	arg03, #0
1a4b4     6C C1 B0 FD | 	call	#__system___basic_print_char
1a4b8     09 12 06 F6 | 	mov	arg01, #9
1a4bc     F0 11 B1 FD | 	call	#__system___getiolock_0599
1a4c0     FD 00 68 FC | 	wrlong	#0, result1
1a4c4     28 4E 05 F1 | 	add	fp, #40
1a4c8     A7 2A 02 FB | 	rdlong	local03, fp
1a4cc     88 4E 05 F1 | 	add	fp, #136
1a4d0     A7 2A 62 FC | 	wrlong	local03, fp
1a4d4     88 4E 85 F1 | 	sub	fp, #136
1a4d8     A7 2A 02 FB | 	rdlong	local03, fp
1a4dc     28 4E 85 F1 | 	sub	fp, #40
1a4e0     FF FF 3F FF 
1a4e4     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
1a4e8     B8 FE 9F 5D |  if_ne	jmp	#LR__2144
1a4ec                 | '   close #9  
1a4ec     09 12 06 F6 | 	mov	arg01, #9
1a4f0     EC 07 B1 FD | 	call	#__system__close
1a4f4                 | '   print "Saved as ";currentdir$+"/"+loadname
1a4f4     00 12 06 F6 | 	mov	arg01, #0
1a4f8     B4 11 B1 FD | 	call	#__system___getiolock_0599
1a4fc     FD 12 02 F6 | 	mov	arg01, result1
1a500     84 B4 B0 FD | 	call	#__system___lockmem
1a504     AF 01 00 FF 
1a508     80 15 06 F6 | 	mov	arg02, ##@LR__5932
1a50c     00 12 06 F6 | 	mov	arg01, #0
1a510     00 16 06 F6 | 	mov	arg03, #0
1a514     64 C1 B0 FD | 	call	#__system___basic_print_string
1a518     00 28 06 F6 | 	mov	local02, #0
1a51c     4A 00 00 FF 
1a520     94 E4 05 F1 | 	add	objptr, ##38036
1a524     F2 12 02 FB | 	rdlong	arg01, objptr
1a528     4A 00 00 FF 
1a52c     94 E4 85 F1 | 	sub	objptr, ##38036
1a530     AF 01 00 FF 
1a534     8A 15 06 F6 | 	mov	arg02, ##@LR__5933
1a538     A8 B4 B0 FD | 	call	#__system___string_concat
1a53c     FD 12 02 F6 | 	mov	arg01, result1
1a540     52 00 00 FF 
1a544     70 E4 05 F1 | 	add	objptr, ##42096
1a548     F2 14 02 FB | 	rdlong	arg02, objptr
1a54c     52 00 00 FF 
1a550     70 E4 85 F1 | 	sub	objptr, ##42096
1a554     8C B4 B0 FD | 	call	#__system___string_concat
1a558     FD 14 02 F6 | 	mov	arg02, result1
1a55c     14 13 02 F6 | 	mov	arg01, local02
1a560     00 16 06 F6 | 	mov	arg03, #0
1a564     14 C1 B0 FD | 	call	#__system___basic_print_string
1a568     00 12 06 F6 | 	mov	arg01, #0
1a56c     0A 14 06 F6 | 	mov	arg02, #10
1a570     00 16 06 F6 | 	mov	arg03, #0
1a574     AC C0 B0 FD | 	call	#__system___basic_print_char
1a578     00 12 06 F6 | 	mov	arg01, #0
1a57c     30 11 B1 FD | 	call	#__system___getiolock_0599
1a580     FD 00 68 FC | 	wrlong	#0, result1
1a584                 | LR__2147
1a584                 | LR__2148
1a584     A7 F0 03 F6 | 	mov	ptra, fp
1a588     B2 00 A0 FD | 	call	#popregs_
1a58c                 | _do_save_ret
1a58c     2D 00 64 FD | 	ret
1a590                 | 
1a590                 | ' 
1a590                 | ' ' ------------------ setdelay
1a590                 | ' 
1a590                 | ' sub do_setdelay
1a590                 | _do_setdelay
1a590     02 4A 05 F6 | 	mov	COUNT_, #2
1a594     A8 00 A0 FD | 	call	#pushregs_
1a598     18 F0 07 F1 | 	add	ptra, #24
1a59c     E0 26 BF FD | 	call	#_pop
1a5a0     FD 12 02 F6 | 	mov	arg01, result1
1a5a4     FE 26 02 F6 | 	mov	local01, result2
1a5a8     FF 28 02 F6 | 	mov	local02, result3
1a5ac     A7 12 62 FC | 	wrlong	arg01, fp
1a5b0     04 4E 05 F1 | 	add	fp, #4
1a5b4     A7 26 62 FC | 	wrlong	local01, fp
1a5b8     04 4E 05 F1 | 	add	fp, #4
1a5bc     A7 28 62 FC | 	wrlong	local02, fp
1a5c0     08 4E 85 F1 | 	sub	fp, #8
1a5c4     B8 26 BF FD | 	call	#_pop
1a5c8     FD 28 02 F6 | 	mov	local02, result1
1a5cc     0C 4E 05 F1 | 	add	fp, #12
1a5d0     A7 28 62 FC | 	wrlong	local02, fp
1a5d4     04 4E 05 F1 | 	add	fp, #4
1a5d8     A7 FC 61 FC | 	wrlong	result2, fp
1a5dc     04 4E 05 F1 | 	add	fp, #4
1a5e0     A7 FE 61 FC | 	wrlong	result3, fp
1a5e4     08 4E 85 F1 | 	sub	fp, #8
1a5e8     A7 12 02 F6 | 	mov	arg01, fp
1a5ec     0C 4E 85 F1 | 	sub	fp, #12
1a5f0     70 28 BF FD | 	call	#_converttoint
1a5f4     FD 28 02 F6 | 	mov	local02, result1
1a5f8     14 27 02 F6 | 	mov	local01, local02
1a5fc     01 26 66 F0 | 	shl	local01, #1
1a600     14 27 02 F1 | 	add	local01, local02
1a604     03 26 66 F0 | 	shl	local01, #3
1a608     14 00 00 FF 
1a60c     38 E5 05 F1 | 	add	objptr, ##10552
1a610     F2 26 02 F1 | 	add	local01, objptr
1a614     A7 12 02 F6 | 	mov	arg01, fp
1a618     14 00 00 FF 
1a61c     38 E5 85 F1 | 	sub	objptr, ##10552
1a620     40 28 BF FD | 	call	#_converttoint
1a624     06 26 06 F1 | 	add	local01, #6
1a628     13 FB 51 FC | 	wrword	result1, local01
1a62c     A7 F0 03 F6 | 	mov	ptra, fp
1a630     B2 00 A0 FD | 	call	#popregs_
1a634                 | _do_setdelay_ret
1a634     2D 00 64 FD | 	ret
1a638                 | 
1a638                 | ' 
1a638                 | ' ' ------------------ setenv
1a638                 | ' 
1a638                 | ' sub do_setenv
1a638                 | _do_setenv
1a638     02 4A 05 F6 | 	mov	COUNT_, #2
1a63c     A8 00 A0 FD | 	call	#pushregs_
1a640     18 F0 07 F1 | 	add	ptra, #24
1a644     38 26 BF FD | 	call	#_pop
1a648     FD 12 02 F6 | 	mov	arg01, result1
1a64c     FE 26 02 F6 | 	mov	local01, result2
1a650     FF 28 02 F6 | 	mov	local02, result3
1a654     A7 12 62 FC | 	wrlong	arg01, fp
1a658     04 4E 05 F1 | 	add	fp, #4
1a65c     A7 26 62 FC | 	wrlong	local01, fp
1a660     04 4E 05 F1 | 	add	fp, #4
1a664     A7 28 62 FC | 	wrlong	local02, fp
1a668     08 4E 85 F1 | 	sub	fp, #8
1a66c     10 26 BF FD | 	call	#_pop
1a670     FD 28 02 F6 | 	mov	local02, result1
1a674     0C 4E 05 F1 | 	add	fp, #12
1a678     A7 28 62 FC | 	wrlong	local02, fp
1a67c     04 4E 05 F1 | 	add	fp, #4
1a680     A7 FC 61 FC | 	wrlong	result2, fp
1a684     04 4E 05 F1 | 	add	fp, #4
1a688     A7 FE 61 FC | 	wrlong	result3, fp
1a68c     08 4E 85 F1 | 	sub	fp, #8
1a690     A7 12 02 F6 | 	mov	arg01, fp
1a694     0C 4E 85 F1 | 	sub	fp, #12
1a698     C8 27 BF FD | 	call	#_converttoint
1a69c     FD 28 02 F6 | 	mov	local02, result1
1a6a0     14 27 02 F6 | 	mov	local01, local02
1a6a4     01 26 66 F0 | 	shl	local01, #1
1a6a8     14 27 02 F1 | 	add	local01, local02
1a6ac     03 26 66 F0 | 	shl	local01, #3
1a6b0     14 00 00 FF 
1a6b4     38 E5 05 F1 | 	add	objptr, ##10552
1a6b8     F2 26 02 F1 | 	add	local01, objptr
1a6bc     A7 12 02 F6 | 	mov	arg01, fp
1a6c0     14 00 00 FF 
1a6c4     38 E5 85 F1 | 	sub	objptr, ##10552
1a6c8     98 27 BF FD | 	call	#_converttoint
1a6cc     05 26 06 F1 | 	add	local01, #5
1a6d0     13 FB 41 FC | 	wrbyte	result1, local01
1a6d4     A7 F0 03 F6 | 	mov	ptra, fp
1a6d8     B2 00 A0 FD | 	call	#popregs_
1a6dc                 | _do_setenv_ret
1a6dc     2D 00 64 FD | 	ret
1a6e0                 | 
1a6e0                 | ' 
1a6e0                 | ' ' ------------------ setlen
1a6e0                 | ' 
1a6e0                 | ' sub do_setlen
1a6e0                 | _do_setlen
1a6e0     02 4A 05 F6 | 	mov	COUNT_, #2
1a6e4     A8 00 A0 FD | 	call	#pushregs_
1a6e8     18 F0 07 F1 | 	add	ptra, #24
1a6ec     90 25 BF FD | 	call	#_pop
1a6f0     FD 12 02 F6 | 	mov	arg01, result1
1a6f4     FE 26 02 F6 | 	mov	local01, result2
1a6f8     FF 28 02 F6 | 	mov	local02, result3
1a6fc     A7 12 62 FC | 	wrlong	arg01, fp
1a700     04 4E 05 F1 | 	add	fp, #4
1a704     A7 26 62 FC | 	wrlong	local01, fp
1a708     04 4E 05 F1 | 	add	fp, #4
1a70c     A7 28 62 FC | 	wrlong	local02, fp
1a710     08 4E 85 F1 | 	sub	fp, #8
1a714     68 25 BF FD | 	call	#_pop
1a718     FD 28 02 F6 | 	mov	local02, result1
1a71c     0C 4E 05 F1 | 	add	fp, #12
1a720     A7 28 62 FC | 	wrlong	local02, fp
1a724     04 4E 05 F1 | 	add	fp, #4
1a728     A7 FC 61 FC | 	wrlong	result2, fp
1a72c     04 4E 05 F1 | 	add	fp, #4
1a730     A7 FE 61 FC | 	wrlong	result3, fp
1a734     08 4E 85 F1 | 	sub	fp, #8
1a738     A7 12 02 F6 | 	mov	arg01, fp
1a73c     0C 4E 85 F1 | 	sub	fp, #12
1a740     20 27 BF FD | 	call	#_converttoint
1a744     FD 28 02 F6 | 	mov	local02, result1
1a748     14 27 02 F6 | 	mov	local01, local02
1a74c     01 26 66 F0 | 	shl	local01, #1
1a750     14 27 02 F1 | 	add	local01, local02
1a754     03 26 66 F0 | 	shl	local01, #3
1a758     14 00 00 FF 
1a75c     38 E5 05 F1 | 	add	objptr, ##10552
1a760     F2 26 02 F1 | 	add	local01, objptr
1a764     A7 12 02 F6 | 	mov	arg01, fp
1a768     14 00 00 FF 
1a76c     38 E5 85 F1 | 	sub	objptr, ##10552
1a770     AC 27 BF FD | 	call	#_converttofloat
1a774     08 26 06 F1 | 	add	local01, #8
1a778     13 FB 61 FC | 	wrlong	result1, local01
1a77c     A7 F0 03 F6 | 	mov	ptra, fp
1a780     B2 00 A0 FD | 	call	#popregs_
1a784                 | _do_setlen_ret
1a784     2D 00 64 FD | 	ret
1a788                 | 
1a788                 | ' 
1a788                 | ' ' ------------------ setpan
1a788                 | ' 
1a788                 | ' sub do_setpan
1a788                 | _do_setpan
1a788     02 4A 05 F6 | 	mov	COUNT_, #2
1a78c     A8 00 A0 FD | 	call	#pushregs_
1a790     18 F0 07 F1 | 	add	ptra, #24
1a794     E8 24 BF FD | 	call	#_pop
1a798     FD 12 02 F6 | 	mov	arg01, result1
1a79c     FE 26 02 F6 | 	mov	local01, result2
1a7a0     FF 28 02 F6 | 	mov	local02, result3
1a7a4     A7 12 62 FC | 	wrlong	arg01, fp
1a7a8     04 4E 05 F1 | 	add	fp, #4
1a7ac     A7 26 62 FC | 	wrlong	local01, fp
1a7b0     04 4E 05 F1 | 	add	fp, #4
1a7b4     A7 28 62 FC | 	wrlong	local02, fp
1a7b8     08 4E 85 F1 | 	sub	fp, #8
1a7bc     C0 24 BF FD | 	call	#_pop
1a7c0     FD 28 02 F6 | 	mov	local02, result1
1a7c4     0C 4E 05 F1 | 	add	fp, #12
1a7c8     A7 28 62 FC | 	wrlong	local02, fp
1a7cc     04 4E 05 F1 | 	add	fp, #4
1a7d0     A7 FC 61 FC | 	wrlong	result2, fp
1a7d4     04 4E 05 F1 | 	add	fp, #4
1a7d8     A7 FE 61 FC | 	wrlong	result3, fp
1a7dc     08 4E 85 F1 | 	sub	fp, #8
1a7e0     A7 12 02 F6 | 	mov	arg01, fp
1a7e4     0C 4E 85 F1 | 	sub	fp, #12
1a7e8     78 26 BF FD | 	call	#_converttoint
1a7ec     FD 28 02 F6 | 	mov	local02, result1
1a7f0     14 27 02 F6 | 	mov	local01, local02
1a7f4     01 26 66 F0 | 	shl	local01, #1
1a7f8     14 27 02 F1 | 	add	local01, local02
1a7fc     03 26 66 F0 | 	shl	local01, #3
1a800     14 00 00 FF 
1a804     38 E5 05 F1 | 	add	objptr, ##10552
1a808     F2 26 02 F1 | 	add	local01, objptr
1a80c     A7 12 02 F6 | 	mov	arg01, fp
1a810     14 00 00 FF 
1a814     38 E5 85 F1 | 	sub	objptr, ##10552
1a818     04 27 BF FD | 	call	#_converttofloat
1a81c     10 26 06 F1 | 	add	local01, #16
1a820     13 FB 61 FC | 	wrlong	result1, local01
1a824     A7 F0 03 F6 | 	mov	ptra, fp
1a828     B2 00 A0 FD | 	call	#popregs_
1a82c                 | _do_setpan_ret
1a82c     2D 00 64 FD | 	ret
1a830                 | 
1a830                 | ' 
1a830                 | ' ' ------------------ setsustain
1a830                 | ' 
1a830                 | ' sub do_setsustain
1a830                 | _do_setsustain
1a830     02 4A 05 F6 | 	mov	COUNT_, #2
1a834     A8 00 A0 FD | 	call	#pushregs_
1a838     18 F0 07 F1 | 	add	ptra, #24
1a83c     40 24 BF FD | 	call	#_pop
1a840     FD 12 02 F6 | 	mov	arg01, result1
1a844     FE 26 02 F6 | 	mov	local01, result2
1a848     FF 28 02 F6 | 	mov	local02, result3
1a84c     A7 12 62 FC | 	wrlong	arg01, fp
1a850     04 4E 05 F1 | 	add	fp, #4
1a854     A7 26 62 FC | 	wrlong	local01, fp
1a858     04 4E 05 F1 | 	add	fp, #4
1a85c     A7 28 62 FC | 	wrlong	local02, fp
1a860     08 4E 85 F1 | 	sub	fp, #8
1a864     18 24 BF FD | 	call	#_pop
1a868     FD 28 02 F6 | 	mov	local02, result1
1a86c     0C 4E 05 F1 | 	add	fp, #12
1a870     A7 28 62 FC | 	wrlong	local02, fp
1a874     04 4E 05 F1 | 	add	fp, #4
1a878     A7 FC 61 FC | 	wrlong	result2, fp
1a87c     04 4E 05 F1 | 	add	fp, #4
1a880     A7 FE 61 FC | 	wrlong	result3, fp
1a884     08 4E 85 F1 | 	sub	fp, #8
1a888     A7 12 02 F6 | 	mov	arg01, fp
1a88c     0C 4E 85 F1 | 	sub	fp, #12
1a890     D0 25 BF FD | 	call	#_converttoint
1a894     FD 28 02 F6 | 	mov	local02, result1
1a898     14 27 02 F6 | 	mov	local01, local02
1a89c     01 26 66 F0 | 	shl	local01, #1
1a8a0     14 27 02 F1 | 	add	local01, local02
1a8a4     03 26 66 F0 | 	shl	local01, #3
1a8a8     14 00 00 FF 
1a8ac     38 E5 05 F1 | 	add	objptr, ##10552
1a8b0     F2 26 02 F1 | 	add	local01, objptr
1a8b4     A7 12 02 F6 | 	mov	arg01, fp
1a8b8     14 00 00 FF 
1a8bc     38 E5 85 F1 | 	sub	objptr, ##10552
1a8c0     A0 25 BF FD | 	call	#_converttoint
1a8c4     14 26 06 F1 | 	add	local01, #20
1a8c8     13 FB 51 FC | 	wrword	result1, local01
1a8cc     A7 F0 03 F6 | 	mov	ptra, fp
1a8d0     B2 00 A0 FD | 	call	#popregs_
1a8d4                 | _do_setsustain_ret
1a8d4     2D 00 64 FD | 	ret
1a8d8                 | 
1a8d8                 | ' 
1a8d8                 | ' ' ------------------ setvol
1a8d8                 | ' 
1a8d8                 | ' sub do_setvol
1a8d8                 | _do_setvol
1a8d8     02 4A 05 F6 | 	mov	COUNT_, #2
1a8dc     A8 00 A0 FD | 	call	#pushregs_
1a8e0     18 F0 07 F1 | 	add	ptra, #24
1a8e4     98 23 BF FD | 	call	#_pop
1a8e8     FD 12 02 F6 | 	mov	arg01, result1
1a8ec     FE 26 02 F6 | 	mov	local01, result2
1a8f0     FF 28 02 F6 | 	mov	local02, result3
1a8f4     A7 12 62 FC | 	wrlong	arg01, fp
1a8f8     04 4E 05 F1 | 	add	fp, #4
1a8fc     A7 26 62 FC | 	wrlong	local01, fp
1a900     04 4E 05 F1 | 	add	fp, #4
1a904     A7 28 62 FC | 	wrlong	local02, fp
1a908     08 4E 85 F1 | 	sub	fp, #8
1a90c     70 23 BF FD | 	call	#_pop
1a910     FD 28 02 F6 | 	mov	local02, result1
1a914     0C 4E 05 F1 | 	add	fp, #12
1a918     A7 28 62 FC | 	wrlong	local02, fp
1a91c     04 4E 05 F1 | 	add	fp, #4
1a920     A7 FC 61 FC | 	wrlong	result2, fp
1a924     04 4E 05 F1 | 	add	fp, #4
1a928     A7 FE 61 FC | 	wrlong	result3, fp
1a92c     08 4E 85 F1 | 	sub	fp, #8
1a930     A7 12 02 F6 | 	mov	arg01, fp
1a934     0C 4E 85 F1 | 	sub	fp, #12
1a938     28 25 BF FD | 	call	#_converttoint
1a93c     FD 28 02 F6 | 	mov	local02, result1
1a940     14 27 02 F6 | 	mov	local01, local02
1a944     01 26 66 F0 | 	shl	local01, #1
1a948     14 27 02 F1 | 	add	local01, local02
1a94c     03 26 66 F0 | 	shl	local01, #3
1a950     14 00 00 FF 
1a954     38 E5 05 F1 | 	add	objptr, ##10552
1a958     F2 26 02 F1 | 	add	local01, objptr
1a95c     A7 12 02 F6 | 	mov	arg01, fp
1a960     14 00 00 FF 
1a964     38 E5 85 F1 | 	sub	objptr, ##10552
1a968     B4 25 BF FD | 	call	#_converttofloat
1a96c     0C 26 06 F1 | 	add	local01, #12
1a970     13 FB 61 FC | 	wrlong	result1, local01
1a974     A7 F0 03 F6 | 	mov	ptra, fp
1a978     B2 00 A0 FD | 	call	#popregs_
1a97c                 | _do_setvol_ret
1a97c     2D 00 64 FD | 	ret
1a980                 | 
1a980                 | ' 
1a980                 | ' ' ------------------ setwave
1a980                 | ' 
1a980                 | ' sub do_setwave
1a980                 | _do_setwave
1a980     02 4A 05 F6 | 	mov	COUNT_, #2
1a984     A8 00 A0 FD | 	call	#pushregs_
1a988     18 F0 07 F1 | 	add	ptra, #24
1a98c     F0 22 BF FD | 	call	#_pop
1a990     FD 12 02 F6 | 	mov	arg01, result1
1a994     FE 26 02 F6 | 	mov	local01, result2
1a998     FF 28 02 F6 | 	mov	local02, result3
1a99c     A7 12 62 FC | 	wrlong	arg01, fp
1a9a0     04 4E 05 F1 | 	add	fp, #4
1a9a4     A7 26 62 FC | 	wrlong	local01, fp
1a9a8     04 4E 05 F1 | 	add	fp, #4
1a9ac     A7 28 62 FC | 	wrlong	local02, fp
1a9b0     08 4E 85 F1 | 	sub	fp, #8
1a9b4     C8 22 BF FD | 	call	#_pop
1a9b8     FD 28 02 F6 | 	mov	local02, result1
1a9bc     0C 4E 05 F1 | 	add	fp, #12
1a9c0     A7 28 62 FC | 	wrlong	local02, fp
1a9c4     04 4E 05 F1 | 	add	fp, #4
1a9c8     A7 FC 61 FC | 	wrlong	result2, fp
1a9cc     04 4E 05 F1 | 	add	fp, #4
1a9d0     A7 FE 61 FC | 	wrlong	result3, fp
1a9d4     08 4E 85 F1 | 	sub	fp, #8
1a9d8     A7 12 02 F6 | 	mov	arg01, fp
1a9dc     0C 4E 85 F1 | 	sub	fp, #12
1a9e0     80 24 BF FD | 	call	#_converttoint
1a9e4     FD 28 02 F6 | 	mov	local02, result1
1a9e8     14 27 02 F6 | 	mov	local01, local02
1a9ec     01 26 66 F0 | 	shl	local01, #1
1a9f0     14 27 02 F1 | 	add	local01, local02
1a9f4     03 26 66 F0 | 	shl	local01, #3
1a9f8     14 00 00 FF 
1a9fc     38 E5 05 F1 | 	add	objptr, ##10552
1aa00     F2 26 02 F1 | 	add	local01, objptr
1aa04     A7 12 02 F6 | 	mov	arg01, fp
1aa08     14 00 00 FF 
1aa0c     38 E5 85 F1 | 	sub	objptr, ##10552
1aa10     50 24 BF FD | 	call	#_converttoint
1aa14     04 26 06 F1 | 	add	local01, #4
1aa18     13 FB 41 FC | 	wrbyte	result1, local01
1aa1c     A7 F0 03 F6 | 	mov	ptra, fp
1aa20     B2 00 A0 FD | 	call	#popregs_
1aa24                 | _do_setwave_ret
1aa24     2D 00 64 FD | 	ret
1aa28                 | 
1aa28                 | ' 
1aa28                 | ' ' ------------------ shutup
1aa28                 | ' 
1aa28                 | ' sub do_shutup
1aa28                 | _do_shutup
1aa28     03 4A 05 F6 | 	mov	COUNT_, #3
1aa2c     A8 00 A0 FD | 	call	#pushregs_
1aa30     18 F0 07 F1 | 	add	ptra, #24
1aa34     4A 00 00 FF 
1aa38     80 E4 05 F1 | 	add	objptr, ##38016
1aa3c     F2 26 02 FB | 	rdlong	local01, objptr
1aa40     13 29 02 F6 | 	mov	local02, local01
1aa44     01 28 66 F0 | 	shl	local02, #1
1aa48     13 29 02 F1 | 	add	local02, local01
1aa4c     02 28 66 F0 | 	shl	local02, #2
1aa50     03 00 00 FF 
1aa54     04 E4 85 F1 | 	sub	objptr, ##1540
1aa58     F2 28 02 F1 | 	add	local02, objptr
1aa5c     14 2B 0A FB | 	rdlong	local03, local02 wz
1aa60     14 4E 05 F1 | 	add	fp, #20
1aa64     A7 2A 62 FC | 	wrlong	local03, fp
1aa68                 | ' 
1aa68                 | ' numpar=compiledline(lineptr_e).result.uresult
1aa68                 | ' if numpar=0 then
1aa68     14 4E 85 F1 | 	sub	fp, #20
1aa6c     47 00 00 FF 
1aa70     7C E4 85 F1 | 	sub	objptr, ##36476
1aa74     50 00 90 5D |  if_ne	jmp	#LR__2152
1aa78                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1aa78     10 4E 05 F1 | 	add	fp, #16
1aa7c     A7 00 68 FC | 	wrlong	#0, fp
1aa80     37 00 00 FF 
1aa84     10 E4 05 F1 | 	add	objptr, ##28176
1aa88     97 16 48 FB | 	callpa	#(@LR__2151-@LR__2150)>>2,fcache_load_ptr_
1aa8c                 | LR__2150
1aa8c     F2 12 02 FB | 	rdlong	arg01, objptr
1aa90     A7 2A 02 FB | 	rdlong	local03, fp
1aa94     06 2A 66 F0 | 	shl	local03, #6
1aa98     15 13 02 F1 | 	add	arg01, local03
1aa9c     14 12 06 F1 | 	add	arg01, #20
1aaa0     09 01 58 FC | 	wrword	#0, arg01
1aaa4     A7 2A 02 FB | 	rdlong	local03, fp
1aaa8     01 2A 06 F1 | 	add	local03, #1
1aaac     A7 2A 62 FC | 	wrlong	local03, fp
1aab0     08 2A 56 F2 | 	cmps	local03, #8 wc
1aab4     D4 FF 9F CD |  if_b	jmp	#LR__2150
1aab8                 | LR__2151
1aab8     37 00 00 FF 
1aabc     10 E4 85 F1 | 	sub	objptr, ##28176
1aac0     10 4E 85 F1 | 	sub	fp, #16
1aac4     64 00 90 FD | 	jmp	#LR__2153
1aac8                 | LR__2152
1aac8     B4 21 BF FD | 	call	#_pop
1aacc     FF 26 02 F6 | 	mov	local01, result3
1aad0     A7 FA 61 FC | 	wrlong	result1, fp
1aad4     04 4E 05 F1 | 	add	fp, #4
1aad8     A7 FC 61 FC | 	wrlong	result2, fp
1aadc     04 4E 05 F1 | 	add	fp, #4
1aae0     A7 26 62 FC | 	wrlong	local01, fp
1aae4     08 4E 85 F1 | 	sub	fp, #8
1aae8     A7 12 02 F6 | 	mov	arg01, fp
1aaec     74 23 BF FD | 	call	#_converttoint
1aaf0     FD 2A 52 F6 | 	abs	local03, result1 wc
1aaf4     07 2A 06 F5 | 	and	local03, #7
1aaf8     15 29 82 F6 | 	negc	local02, local03
1aafc     0C 4E 05 F1 | 	add	fp, #12
1ab00     A7 28 62 FC | 	wrlong	local02, fp
1ab04     37 00 00 FF 
1ab08     10 E4 05 F1 | 	add	objptr, ##28176
1ab0c     F2 12 02 FB | 	rdlong	arg01, objptr
1ab10     37 00 00 FF 
1ab14     10 E4 85 F1 | 	sub	objptr, ##28176
1ab18     0C 4E 85 F1 | 	sub	fp, #12
1ab1c     06 28 66 F0 | 	shl	local02, #6
1ab20     14 13 02 F1 | 	add	arg01, local02
1ab24     14 12 06 F1 | 	add	arg01, #20
1ab28     09 01 58 FC | 	wrword	#0, arg01
1ab2c                 | LR__2153
1ab2c     A7 F0 03 F6 | 	mov	ptra, fp
1ab30     B2 00 A0 FD | 	call	#popregs_
1ab34                 | _do_shutup_ret
1ab34     2D 00 64 FD | 	ret
1ab38                 | 
1ab38                 | ' 
1ab38                 | ' ' ------------------ sin
1ab38                 | ' 
1ab38                 | ' sub do_sin
1ab38                 | _do_sin
1ab38     01 4A 05 F6 | 	mov	COUNT_, #1
1ab3c     A8 00 A0 FD | 	call	#pushregs_
1ab40     10 F0 07 F1 | 	add	ptra, #16
1ab44     4A 00 00 FF 
1ab48     80 E4 05 F1 | 	add	objptr, ##38016
1ab4c     F2 26 02 FB | 	rdlong	local01, objptr
1ab50     13 17 02 F6 | 	mov	arg03, local01
1ab54     01 16 66 F0 | 	shl	arg03, #1
1ab58     13 17 02 F1 | 	add	arg03, local01
1ab5c     02 16 66 F0 | 	shl	arg03, #2
1ab60     03 00 00 FF 
1ab64     04 E4 85 F1 | 	sub	objptr, ##1540
1ab68     F2 16 02 F1 | 	add	arg03, objptr
1ab6c     0B 17 02 FB | 	rdlong	arg03, arg03
1ab70     0C 4E 05 F1 | 	add	fp, #12
1ab74     A7 16 62 FC | 	wrlong	arg03, fp
1ab78                 | ' 
1ab78                 | ' numpar=compiledline(lineptr_e).result.uresult
1ab78                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1ab78     0C 4E 85 F1 | 	sub	fp, #12
1ab7c     02 16 16 F2 | 	cmp	arg03, #2 wc
1ab80     47 00 00 FF 
1ab84     7C E4 85 F1 | 	sub	objptr, ##36476
1ab88     0C 4E 05 C1 |  if_b	add	fp, #12
1ab8c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1ab90     0C 4E 85 C1 |  if_b	sub	fp, #12
1ab94     40 00 90 4D |  if_c_and_nz	jmp	#LR__2160
1ab98     00 12 06 F6 | 	mov	arg01, #0
1ab9c     10 0B B1 FD | 	call	#__system___getiolock_0599
1aba0     FD 12 02 F6 | 	mov	arg01, result1
1aba4     E0 AD B0 FD | 	call	#__system___lockmem
1aba8     AF 01 00 FF 
1abac     8C 15 06 F6 | 	mov	arg02, ##@LR__5934
1abb0     00 12 06 F6 | 	mov	arg01, #0
1abb4     00 16 06 F6 | 	mov	arg03, #0
1abb8     C0 BA B0 FD | 	call	#__system___basic_print_string
1abbc     00 12 06 F6 | 	mov	arg01, #0
1abc0     EC 0A B1 FD | 	call	#__system___getiolock_0599
1abc4     FD 00 68 FC | 	wrlong	#0, result1
1abc8     27 12 06 F6 | 	mov	arg01, #39
1abcc     00 14 06 F6 | 	mov	arg02, #0
1abd0     C8 73 B0 FD | 	call	#_printerror
1abd4     64 00 90 FD | 	jmp	#LR__2161
1abd8                 | LR__2160
1abd8     A4 20 BF FD | 	call	#_pop
1abdc     A7 FA 61 FC | 	wrlong	result1, fp
1abe0     04 4E 05 F1 | 	add	fp, #4
1abe4     A7 FC 61 FC | 	wrlong	result2, fp
1abe8     04 4E 05 F1 | 	add	fp, #4
1abec     A7 FE 61 FC | 	wrlong	result3, fp
1abf0     08 4E 85 F1 | 	sub	fp, #8
1abf4     52 00 00 FF 
1abf8     54 E4 05 F1 | 	add	objptr, ##42068
1abfc     F2 26 02 FB | 	rdlong	local01, objptr
1ac00     52 00 00 FF 
1ac04     54 E4 85 F1 | 	sub	objptr, ##42068
1ac08     A7 12 02 F6 | 	mov	arg01, fp
1ac0c     10 23 BF FD | 	call	#_converttofloat
1ac10     FD 14 02 F6 | 	mov	arg02, result1
1ac14     13 13 02 F6 | 	mov	arg01, local01
1ac18     E4 DB B0 FD | 	call	#__system___float_mul
1ac1c     FD 12 02 F6 | 	mov	arg01, result1
1ac20     3C E5 B0 FD | 	call	#__system____builtin_sinf
1ac24     A7 FA 61 FC | 	wrlong	result1, fp
1ac28     08 4E 05 F1 | 	add	fp, #8
1ac2c     A7 3C 68 FC | 	wrlong	#30, fp
1ac30     08 4E 85 F1 | 	sub	fp, #8
1ac34     A7 12 02 F6 | 	mov	arg01, fp
1ac38     DC 20 BF FD | 	call	#_push
1ac3c                 | LR__2161
1ac3c     A7 F0 03 F6 | 	mov	ptra, fp
1ac40     B2 00 A0 FD | 	call	#popregs_
1ac44                 | _do_sin_ret
1ac44     2D 00 64 FD | 	ret
1ac48                 | 
1ac48                 | ' 
1ac48                 | ' ' ------------------ skip
1ac48                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1ac48                 | ' 
1ac48                 | ' sub do_skip
1ac48                 | _do_skip
1ac48     4A 00 00 FF 
1ac4c     80 E4 05 F1 | 	add	objptr, ##38016
1ac50     F2 00 02 FB | 	rdlong	_var01, objptr
1ac54     00 03 02 F6 | 	mov	_var02, _var01
1ac58     01 02 66 F0 | 	shl	_var02, #1
1ac5c     00 03 02 F1 | 	add	_var02, _var01
1ac60     02 02 66 F0 | 	shl	_var02, #2
1ac64     03 00 00 FF 
1ac68     04 E4 85 F1 | 	sub	objptr, ##1540
1ac6c     F2 02 02 F1 | 	add	_var02, objptr
1ac70     01 03 02 FB | 	rdlong	_var02, _var02
1ac74     01 02 86 F1 | 	sub	_var02, #1
1ac78     03 00 00 FF 
1ac7c     04 E4 05 F1 | 	add	objptr, ##1540
1ac80     F2 02 62 FC | 	wrlong	_var02, objptr
1ac84     4A 00 00 FF 
1ac88     80 E4 85 F1 | 	sub	objptr, ##38016
1ac8c                 | _do_skip_ret
1ac8c     2D 00 64 FD | 	ret
1ac90                 | 
1ac90                 | ' 
1ac90                 | ' ' ------------------ sprite
1ac90                 | ' 
1ac90                 | ' sub do_sprite
1ac90                 | _do_sprite
1ac90     00 4A 05 F6 | 	mov	COUNT_, #0
1ac94     A8 00 A0 FD | 	call	#pushregs_
1ac98     30 F0 07 F1 | 	add	ptra, #48
1ac9c     E0 1F BF FD | 	call	#_pop
1aca0     FD 16 02 F6 | 	mov	arg03, result1
1aca4     FE 14 02 F6 | 	mov	arg02, result2
1aca8     FF 12 02 F6 | 	mov	arg01, result3
1acac     18 4E 05 F1 | 	add	fp, #24
1acb0     A7 16 62 FC | 	wrlong	arg03, fp
1acb4     04 4E 05 F1 | 	add	fp, #4
1acb8     A7 14 62 FC | 	wrlong	arg02, fp
1acbc     04 4E 05 F1 | 	add	fp, #4
1acc0     A7 12 62 FC | 	wrlong	arg01, fp
1acc4     20 4E 85 F1 | 	sub	fp, #32
1acc8     B4 1F BF FD | 	call	#_pop
1accc     FD 16 02 F6 | 	mov	arg03, result1
1acd0     FE 14 02 F6 | 	mov	arg02, result2
1acd4     FF 12 02 F6 | 	mov	arg01, result3
1acd8     0C 4E 05 F1 | 	add	fp, #12
1acdc     A7 16 62 FC | 	wrlong	arg03, fp
1ace0     04 4E 05 F1 | 	add	fp, #4
1ace4     A7 14 62 FC | 	wrlong	arg02, fp
1ace8     04 4E 05 F1 | 	add	fp, #4
1acec     A7 12 62 FC | 	wrlong	arg01, fp
1acf0     14 4E 85 F1 | 	sub	fp, #20
1acf4     88 1F BF FD | 	call	#_pop
1acf8     FF 16 02 F6 | 	mov	arg03, result3
1acfc     A7 FA 61 FC | 	wrlong	result1, fp
1ad00     04 4E 05 F1 | 	add	fp, #4
1ad04     A7 FC 61 FC | 	wrlong	result2, fp
1ad08     04 4E 05 F1 | 	add	fp, #4
1ad0c     A7 16 62 FC | 	wrlong	arg03, fp
1ad10     08 4E 85 F1 | 	sub	fp, #8
1ad14     A7 12 02 F6 | 	mov	arg01, fp
1ad18     48 21 BF FD | 	call	#_converttoint
1ad1c     24 4E 05 F1 | 	add	fp, #36
1ad20     A7 FA 61 FC | 	wrlong	result1, fp
1ad24     18 4E 85 F1 | 	sub	fp, #24
1ad28     A7 12 02 F6 | 	mov	arg01, fp
1ad2c     0C 4E 85 F1 | 	sub	fp, #12
1ad30     30 21 BF FD | 	call	#_converttoint
1ad34     28 4E 05 F1 | 	add	fp, #40
1ad38     A7 FA 61 FC | 	wrlong	result1, fp
1ad3c     10 4E 85 F1 | 	sub	fp, #16
1ad40     A7 12 02 F6 | 	mov	arg01, fp
1ad44     18 4E 85 F1 | 	sub	fp, #24
1ad48     18 21 BF FD | 	call	#_converttoint
1ad4c     2C 4E 05 F1 | 	add	fp, #44
1ad50     A7 FA 61 FC | 	wrlong	result1, fp
1ad54     08 4E 85 F1 | 	sub	fp, #8
1ad58     A7 12 02 FB | 	rdlong	arg01, fp
1ad5c     04 4E 05 F1 | 	add	fp, #4
1ad60     A7 14 02 FB | 	rdlong	arg02, fp
1ad64     FD 16 02 F6 | 	mov	arg03, result1
1ad68     28 4E 85 F1 | 	sub	fp, #40
1ad6c     0C 82 B0 FD | 	call	#_hg010b_spin2_setspritepos
1ad70     A7 F0 03 F6 | 	mov	ptra, fp
1ad74     B2 00 A0 FD | 	call	#popregs_
1ad78                 | _do_sprite_ret
1ad78     2D 00 64 FD | 	ret
1ad7c                 | 
1ad7c                 | ' 
1ad7c                 | ' ' ------------------ sqr
1ad7c                 | ' 
1ad7c                 | ' sub do_sqr
1ad7c                 | _do_sqr
1ad7c     01 4A 05 F6 | 	mov	COUNT_, #1
1ad80     A8 00 A0 FD | 	call	#pushregs_
1ad84     10 F0 07 F1 | 	add	ptra, #16
1ad88     4A 00 00 FF 
1ad8c     80 E4 05 F1 | 	add	objptr, ##38016
1ad90     F2 26 02 FB | 	rdlong	local01, objptr
1ad94     13 17 02 F6 | 	mov	arg03, local01
1ad98     01 16 66 F0 | 	shl	arg03, #1
1ad9c     13 17 02 F1 | 	add	arg03, local01
1ada0     02 16 66 F0 | 	shl	arg03, #2
1ada4     03 00 00 FF 
1ada8     04 E4 85 F1 | 	sub	objptr, ##1540
1adac     F2 16 02 F1 | 	add	arg03, objptr
1adb0     0B 17 02 FB | 	rdlong	arg03, arg03
1adb4     0C 4E 05 F1 | 	add	fp, #12
1adb8     A7 16 62 FC | 	wrlong	arg03, fp
1adbc                 | ' 
1adbc                 | ' numpar=compiledline(lineptr_e).result.uresult
1adbc                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1adbc     0C 4E 85 F1 | 	sub	fp, #12
1adc0     02 16 16 F2 | 	cmp	arg03, #2 wc
1adc4     47 00 00 FF 
1adc8     7C E4 85 F1 | 	sub	objptr, ##36476
1adcc     0C 4E 05 C1 |  if_b	add	fp, #12
1add0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1add4     0C 4E 85 C1 |  if_b	sub	fp, #12
1add8     40 00 90 4D |  if_c_and_nz	jmp	#LR__2170
1addc     00 12 06 F6 | 	mov	arg01, #0
1ade0     CC 08 B1 FD | 	call	#__system___getiolock_0599
1ade4     FD 12 02 F6 | 	mov	arg01, result1
1ade8     9C AB B0 FD | 	call	#__system___lockmem
1adec     AF 01 00 FF 
1adf0     92 15 06 F6 | 	mov	arg02, ##@LR__5935
1adf4     00 12 06 F6 | 	mov	arg01, #0
1adf8     00 16 06 F6 | 	mov	arg03, #0
1adfc     7C B8 B0 FD | 	call	#__system___basic_print_string
1ae00     00 12 06 F6 | 	mov	arg01, #0
1ae04     A8 08 B1 FD | 	call	#__system___getiolock_0599
1ae08     FD 00 68 FC | 	wrlong	#0, result1
1ae0c     27 12 06 F6 | 	mov	arg01, #39
1ae10     00 14 06 F6 | 	mov	arg02, #0
1ae14     84 71 B0 FD | 	call	#_printerror
1ae18     48 00 90 FD | 	jmp	#LR__2171
1ae1c                 | LR__2170
1ae1c     60 1E BF FD | 	call	#_pop
1ae20     FF 26 02 F6 | 	mov	local01, result3
1ae24     A7 FA 61 FC | 	wrlong	result1, fp
1ae28     04 4E 05 F1 | 	add	fp, #4
1ae2c     A7 FC 61 FC | 	wrlong	result2, fp
1ae30     04 4E 05 F1 | 	add	fp, #4
1ae34     A7 26 62 FC | 	wrlong	local01, fp
1ae38     08 4E 85 F1 | 	sub	fp, #8
1ae3c     A7 12 02 F6 | 	mov	arg01, fp
1ae40     DC 20 BF FD | 	call	#_converttofloat
1ae44     FD 12 02 F6 | 	mov	arg01, result1
1ae48     DC D8 B0 FD | 	call	#__system___float_sqrt
1ae4c     A7 FA 61 FC | 	wrlong	result1, fp
1ae50     08 4E 05 F1 | 	add	fp, #8
1ae54     A7 3C 68 FC | 	wrlong	#30, fp
1ae58     08 4E 85 F1 | 	sub	fp, #8
1ae5c     A7 12 02 F6 | 	mov	arg01, fp
1ae60     B4 1E BF FD | 	call	#_push
1ae64                 | LR__2171
1ae64     A7 F0 03 F6 | 	mov	ptra, fp
1ae68     B2 00 A0 FD | 	call	#popregs_
1ae6c                 | _do_sqr_ret
1ae6c     2D 00 64 FD | 	ret
1ae70                 | 
1ae70                 | ' 
1ae70                 | ' ' ------------------ stick
1ae70                 | ' 
1ae70                 | ' sub do_stick
1ae70                 | _do_stick
1ae70     01 4A 05 F6 | 	mov	COUNT_, #1
1ae74     A8 00 A0 FD | 	call	#pushregs_
1ae78     10 F0 07 F1 | 	add	ptra, #16
1ae7c     4A 00 00 FF 
1ae80     80 E4 05 F1 | 	add	objptr, ##38016
1ae84     F2 26 02 FB | 	rdlong	local01, objptr
1ae88     13 17 02 F6 | 	mov	arg03, local01
1ae8c     01 16 66 F0 | 	shl	arg03, #1
1ae90     13 17 02 F1 | 	add	arg03, local01
1ae94     02 16 66 F0 | 	shl	arg03, #2
1ae98     03 00 00 FF 
1ae9c     04 E4 85 F1 | 	sub	objptr, ##1540
1aea0     F2 16 02 F1 | 	add	arg03, objptr
1aea4     0B 17 02 FB | 	rdlong	arg03, arg03
1aea8     0C 4E 05 F1 | 	add	fp, #12
1aeac     A7 16 62 FC | 	wrlong	arg03, fp
1aeb0                 | ' 
1aeb0                 | ' numpar=compiledline(lineptr_e).result.uresult
1aeb0                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1aeb0     0C 4E 85 F1 | 	sub	fp, #12
1aeb4     02 16 16 F2 | 	cmp	arg03, #2 wc
1aeb8     47 00 00 FF 
1aebc     7C E4 85 F1 | 	sub	objptr, ##36476
1aec0     40 00 90 CD |  if_b	jmp	#LR__2180
1aec4     00 12 06 F6 | 	mov	arg01, #0
1aec8     E4 07 B1 FD | 	call	#__system___getiolock_0599
1aecc     FD 12 02 F6 | 	mov	arg01, result1
1aed0     B4 AA B0 FD | 	call	#__system___lockmem
1aed4     AF 01 00 FF 
1aed8     98 15 06 F6 | 	mov	arg02, ##@LR__5936
1aedc     00 12 06 F6 | 	mov	arg01, #0
1aee0     00 16 06 F6 | 	mov	arg03, #0
1aee4     94 B7 B0 FD | 	call	#__system___basic_print_string
1aee8     00 12 06 F6 | 	mov	arg01, #0
1aeec     C0 07 B1 FD | 	call	#__system___getiolock_0599
1aef0     FD 00 68 FC | 	wrlong	#0, result1
1aef4     27 12 06 F6 | 	mov	arg01, #39
1aef8     00 14 06 F6 | 	mov	arg02, #0
1aefc     9C 70 B0 FD | 	call	#_printerror
1af00     F0 00 90 FD | 	jmp	#LR__2184
1af04                 | LR__2180
1af04                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1af04     0C 4E 05 F1 | 	add	fp, #12
1af08     A7 FE 09 FB | 	rdlong	result3, fp wz
1af0c     0C 4E 85 F1 | 	sub	fp, #12
1af10     30 00 90 5D |  if_ne	jmp	#LR__2181
1af14     51 00 00 FF 
1af18     C8 E5 05 F1 | 	add	objptr, ##41928
1af1c     F2 26 02 FB | 	rdlong	local01, objptr
1af20     51 00 00 FF 
1af24     C8 E5 85 F1 | 	sub	objptr, ##41928
1af28     A7 26 62 FC | 	wrlong	local01, fp
1af2c     08 4E 05 F1 | 	add	fp, #8
1af30     A7 3A 68 FC | 	wrlong	#29, fp
1af34     08 4E 85 F1 | 	sub	fp, #8
1af38     A7 12 02 F6 | 	mov	arg01, fp
1af3c     D8 1D BF FD | 	call	#_push
1af40     B0 00 90 FD | 	jmp	#LR__2184
1af44                 | LR__2181
1af44     38 1D BF FD | 	call	#_pop
1af48     A7 FA 61 FC | 	wrlong	result1, fp
1af4c     04 4E 05 F1 | 	add	fp, #4
1af50     A7 FC 61 FC | 	wrlong	result2, fp
1af54     04 4E 05 F1 | 	add	fp, #4
1af58     A7 FE 61 FC | 	wrlong	result3, fp
1af5c                 | ' t1=pop()
1af5c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1af5c     08 4E 85 F1 | 	sub	fp, #8
1af60     1C FE 0D F2 | 	cmp	result3, #28 wz
1af64     08 4E 05 51 |  if_ne	add	fp, #8
1af68     A7 26 02 5B |  if_ne	rdlong	local01, fp
1af6c     08 4E 85 51 |  if_ne	sub	fp, #8
1af70     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1af74     70 00 90 5D |  if_ne	jmp	#LR__2183
1af78     A7 26 02 FB | 	rdlong	local01, fp
1af7c     52 00 00 FF 
1af80     B4 E4 05 F1 | 	add	objptr, ##42164
1af84     F2 26 62 FC | 	wrlong	local01, objptr
1af88                 | '   q=t1.result.uresult
1af88                 | '   if q<7 then 
1af88     52 00 00 FF 
1af8c     B4 E4 85 F1 | 	sub	objptr, ##42164
1af90     07 26 56 F2 | 	cmps	local01, #7 wc
1af94     40 00 90 3D |  if_ae	jmp	#LR__2182
1af98     52 00 00 FF 
1af9c     B4 E4 05 F1 | 	add	objptr, ##42164
1afa0     F2 26 02 FB | 	rdlong	local01, objptr
1afa4     02 26 66 F0 | 	shl	local01, #2
1afa8     EC E4 85 F1 | 	sub	objptr, #236
1afac     F2 26 02 F1 | 	add	local01, objptr
1afb0     13 27 02 FB | 	rdlong	local01, local01
1afb4     A7 26 62 FC | 	wrlong	local01, fp
1afb8     08 4E 05 F1 | 	add	fp, #8
1afbc     A7 3A 68 FC | 	wrlong	#29, fp
1afc0     08 4E 85 F1 | 	sub	fp, #8
1afc4     A7 12 02 F6 | 	mov	arg01, fp
1afc8     51 00 00 FF 
1afcc     C8 E5 85 F1 | 	sub	objptr, ##41928
1afd0     44 1D BF FD | 	call	#_push
1afd4                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1afd4     1C 00 90 FD | 	jmp	#LR__2184
1afd8                 | LR__2182
1afd8     29 12 06 F6 | 	mov	arg01, #41
1afdc     00 14 06 F6 | 	mov	arg02, #0
1afe0     B8 6F B0 FD | 	call	#_printerror
1afe4                 | '      printerror(41) : return
1afe4     0C 00 90 FD | 	jmp	#LR__2184
1afe8                 | LR__2183
1afe8     29 12 06 F6 | 	mov	arg01, #41
1afec     00 14 06 F6 | 	mov	arg02, #0
1aff0     A8 6F B0 FD | 	call	#_printerror
1aff4                 | LR__2184
1aff4     A7 F0 03 F6 | 	mov	ptra, fp
1aff8     B2 00 A0 FD | 	call	#popregs_
1affc                 | _do_stick_ret
1affc     2D 00 64 FD | 	ret
1b000                 | 
1b000                 | ' 
1b000                 | ' ' ------------------ strig
1b000                 | ' 
1b000                 | ' sub do_strig
1b000                 | _do_strig
1b000     01 4A 05 F6 | 	mov	COUNT_, #1
1b004     A8 00 A0 FD | 	call	#pushregs_
1b008     10 F0 07 F1 | 	add	ptra, #16
1b00c     4A 00 00 FF 
1b010     80 E4 05 F1 | 	add	objptr, ##38016
1b014     F2 26 02 FB | 	rdlong	local01, objptr
1b018     13 17 02 F6 | 	mov	arg03, local01
1b01c     01 16 66 F0 | 	shl	arg03, #1
1b020     13 17 02 F1 | 	add	arg03, local01
1b024     02 16 66 F0 | 	shl	arg03, #2
1b028     03 00 00 FF 
1b02c     04 E4 85 F1 | 	sub	objptr, ##1540
1b030     F2 16 02 F1 | 	add	arg03, objptr
1b034     0B 17 02 FB | 	rdlong	arg03, arg03
1b038     0C 4E 05 F1 | 	add	fp, #12
1b03c     A7 16 62 FC | 	wrlong	arg03, fp
1b040                 | ' 
1b040                 | ' numpar=compiledline(lineptr_e).result.uresult
1b040                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1b040     0C 4E 85 F1 | 	sub	fp, #12
1b044     02 16 16 F2 | 	cmp	arg03, #2 wc
1b048     47 00 00 FF 
1b04c     7C E4 85 F1 | 	sub	objptr, ##36476
1b050     40 00 90 CD |  if_b	jmp	#LR__2190
1b054     00 12 06 F6 | 	mov	arg01, #0
1b058     54 06 B1 FD | 	call	#__system___getiolock_0599
1b05c     FD 12 02 F6 | 	mov	arg01, result1
1b060     24 A9 B0 FD | 	call	#__system___lockmem
1b064     AF 01 00 FF 
1b068     A0 15 06 F6 | 	mov	arg02, ##@LR__5937
1b06c     00 12 06 F6 | 	mov	arg01, #0
1b070     00 16 06 F6 | 	mov	arg03, #0
1b074     04 B6 B0 FD | 	call	#__system___basic_print_string
1b078     00 12 06 F6 | 	mov	arg01, #0
1b07c     30 06 B1 FD | 	call	#__system___getiolock_0599
1b080     FD 00 68 FC | 	wrlong	#0, result1
1b084     27 12 06 F6 | 	mov	arg01, #39
1b088     00 14 06 F6 | 	mov	arg02, #0
1b08c     0C 6F B0 FD | 	call	#_printerror
1b090     F0 00 90 FD | 	jmp	#LR__2194
1b094                 | LR__2190
1b094                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1b094     0C 4E 05 F1 | 	add	fp, #12
1b098     A7 FE 09 FB | 	rdlong	result3, fp wz
1b09c     0C 4E 85 F1 | 	sub	fp, #12
1b0a0     30 00 90 5D |  if_ne	jmp	#LR__2191
1b0a4     51 00 00 FF 
1b0a8     E4 E5 05 F1 | 	add	objptr, ##41956
1b0ac     F2 26 02 FB | 	rdlong	local01, objptr
1b0b0     51 00 00 FF 
1b0b4     E4 E5 85 F1 | 	sub	objptr, ##41956
1b0b8     A7 26 62 FC | 	wrlong	local01, fp
1b0bc     08 4E 05 F1 | 	add	fp, #8
1b0c0     A7 3A 68 FC | 	wrlong	#29, fp
1b0c4     08 4E 85 F1 | 	sub	fp, #8
1b0c8     A7 12 02 F6 | 	mov	arg01, fp
1b0cc     48 1C BF FD | 	call	#_push
1b0d0     B0 00 90 FD | 	jmp	#LR__2194
1b0d4                 | LR__2191
1b0d4     A8 1B BF FD | 	call	#_pop
1b0d8     A7 FA 61 FC | 	wrlong	result1, fp
1b0dc     04 4E 05 F1 | 	add	fp, #4
1b0e0     A7 FC 61 FC | 	wrlong	result2, fp
1b0e4     04 4E 05 F1 | 	add	fp, #4
1b0e8     A7 FE 61 FC | 	wrlong	result3, fp
1b0ec                 | ' t1=pop()
1b0ec                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1b0ec     08 4E 85 F1 | 	sub	fp, #8
1b0f0     1C FE 0D F2 | 	cmp	result3, #28 wz
1b0f4     08 4E 05 51 |  if_ne	add	fp, #8
1b0f8     A7 26 02 5B |  if_ne	rdlong	local01, fp
1b0fc     08 4E 85 51 |  if_ne	sub	fp, #8
1b100     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1b104     70 00 90 5D |  if_ne	jmp	#LR__2193
1b108     A7 26 02 FB | 	rdlong	local01, fp
1b10c     52 00 00 FF 
1b110     B4 E4 05 F1 | 	add	objptr, ##42164
1b114     F2 26 62 FC | 	wrlong	local01, objptr
1b118                 | '   q=t1.result.uresult
1b118                 | '   if q<7 then 
1b118     52 00 00 FF 
1b11c     B4 E4 85 F1 | 	sub	objptr, ##42164
1b120     07 26 56 F2 | 	cmps	local01, #7 wc
1b124     40 00 90 3D |  if_ae	jmp	#LR__2192
1b128     52 00 00 FF 
1b12c     B4 E4 05 F1 | 	add	objptr, ##42164
1b130     F2 26 02 FB | 	rdlong	local01, objptr
1b134     02 26 66 F0 | 	shl	local01, #2
1b138     D0 E4 85 F1 | 	sub	objptr, #208
1b13c     F2 26 02 F1 | 	add	local01, objptr
1b140     13 27 02 FB | 	rdlong	local01, local01
1b144     A7 26 62 FC | 	wrlong	local01, fp
1b148     08 4E 05 F1 | 	add	fp, #8
1b14c     A7 3A 68 FC | 	wrlong	#29, fp
1b150     08 4E 85 F1 | 	sub	fp, #8
1b154     A7 12 02 F6 | 	mov	arg01, fp
1b158     51 00 00 FF 
1b15c     E4 E5 85 F1 | 	sub	objptr, ##41956
1b160     B4 1B BF FD | 	call	#_push
1b164                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1b164     1C 00 90 FD | 	jmp	#LR__2194
1b168                 | LR__2192
1b168     29 12 06 F6 | 	mov	arg01, #41
1b16c     00 14 06 F6 | 	mov	arg02, #0
1b170     28 6E B0 FD | 	call	#_printerror
1b174                 | '      printerror(41) : return
1b174     0C 00 90 FD | 	jmp	#LR__2194
1b178                 | LR__2193
1b178     29 12 06 F6 | 	mov	arg01, #41
1b17c     00 14 06 F6 | 	mov	arg02, #0
1b180     18 6E B0 FD | 	call	#_printerror
1b184                 | LR__2194
1b184     A7 F0 03 F6 | 	mov	ptra, fp
1b188     B2 00 A0 FD | 	call	#popregs_
1b18c                 | _do_strig_ret
1b18c     2D 00 64 FD | 	ret
1b190                 | 
1b190                 | ' 
1b190                 | ' ' ------------------ tan
1b190                 | ' 
1b190                 | ' sub do_tan
1b190                 | _do_tan
1b190     01 4A 05 F6 | 	mov	COUNT_, #1
1b194     A8 00 A0 FD | 	call	#pushregs_
1b198     10 F0 07 F1 | 	add	ptra, #16
1b19c     4A 00 00 FF 
1b1a0     80 E4 05 F1 | 	add	objptr, ##38016
1b1a4     F2 26 02 FB | 	rdlong	local01, objptr
1b1a8     13 17 02 F6 | 	mov	arg03, local01
1b1ac     01 16 66 F0 | 	shl	arg03, #1
1b1b0     13 17 02 F1 | 	add	arg03, local01
1b1b4     02 16 66 F0 | 	shl	arg03, #2
1b1b8     03 00 00 FF 
1b1bc     04 E4 85 F1 | 	sub	objptr, ##1540
1b1c0     F2 16 02 F1 | 	add	arg03, objptr
1b1c4     0B 17 02 FB | 	rdlong	arg03, arg03
1b1c8     0C 4E 05 F1 | 	add	fp, #12
1b1cc     A7 16 62 FC | 	wrlong	arg03, fp
1b1d0                 | ' 
1b1d0                 | ' numpar=compiledline(lineptr_e).result.uresult
1b1d0                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1b1d0     0C 4E 85 F1 | 	sub	fp, #12
1b1d4     02 16 16 F2 | 	cmp	arg03, #2 wc
1b1d8     47 00 00 FF 
1b1dc     7C E4 85 F1 | 	sub	objptr, ##36476
1b1e0     0C 4E 05 C1 |  if_b	add	fp, #12
1b1e4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1b1e8     0C 4E 85 C1 |  if_b	sub	fp, #12
1b1ec     40 00 90 4D |  if_c_and_nz	jmp	#LR__2200
1b1f0     00 12 06 F6 | 	mov	arg01, #0
1b1f4     B8 04 B1 FD | 	call	#__system___getiolock_0599
1b1f8     FD 12 02 F6 | 	mov	arg01, result1
1b1fc     88 A7 B0 FD | 	call	#__system___lockmem
1b200     AF 01 00 FF 
1b204     A8 15 06 F6 | 	mov	arg02, ##@LR__5938
1b208     00 12 06 F6 | 	mov	arg01, #0
1b20c     00 16 06 F6 | 	mov	arg03, #0
1b210     68 B4 B0 FD | 	call	#__system___basic_print_string
1b214     00 12 06 F6 | 	mov	arg01, #0
1b218     94 04 B1 FD | 	call	#__system___getiolock_0599
1b21c     FD 00 68 FC | 	wrlong	#0, result1
1b220     27 12 06 F6 | 	mov	arg01, #39
1b224     00 14 06 F6 | 	mov	arg02, #0
1b228     70 6D B0 FD | 	call	#_printerror
1b22c     64 00 90 FD | 	jmp	#LR__2201
1b230                 | LR__2200
1b230     4C 1A BF FD | 	call	#_pop
1b234     A7 FA 61 FC | 	wrlong	result1, fp
1b238     04 4E 05 F1 | 	add	fp, #4
1b23c     A7 FC 61 FC | 	wrlong	result2, fp
1b240     04 4E 05 F1 | 	add	fp, #4
1b244     A7 FE 61 FC | 	wrlong	result3, fp
1b248     08 4E 85 F1 | 	sub	fp, #8
1b24c     52 00 00 FF 
1b250     54 E4 05 F1 | 	add	objptr, ##42068
1b254     F2 26 02 FB | 	rdlong	local01, objptr
1b258     52 00 00 FF 
1b25c     54 E4 85 F1 | 	sub	objptr, ##42068
1b260     A7 12 02 F6 | 	mov	arg01, fp
1b264     B8 1C BF FD | 	call	#_converttofloat
1b268     FD 14 02 F6 | 	mov	arg02, result1
1b26c     13 13 02 F6 | 	mov	arg01, local01
1b270     8C D5 B0 FD | 	call	#__system___float_mul
1b274     FD 12 02 F6 | 	mov	arg01, result1
1b278     30 E0 B0 FD | 	call	#__system____builtin_tanf
1b27c     A7 FA 61 FC | 	wrlong	result1, fp
1b280     08 4E 05 F1 | 	add	fp, #8
1b284     A7 3C 68 FC | 	wrlong	#30, fp
1b288     08 4E 85 F1 | 	sub	fp, #8
1b28c     A7 12 02 F6 | 	mov	arg01, fp
1b290     84 1A BF FD | 	call	#_push
1b294                 | LR__2201
1b294     A7 F0 03 F6 | 	mov	ptra, fp
1b298     B2 00 A0 FD | 	call	#popregs_
1b29c                 | _do_tan_ret
1b29c     2D 00 64 FD | 	ret
1b2a0                 | 
1b2a0                 | ' 
1b2a0                 | ' ' ------------------ val
1b2a0                 | ' 
1b2a0                 | ' sub do_val
1b2a0                 | _do_val
1b2a0     03 4A 05 F6 | 	mov	COUNT_, #3
1b2a4     A8 00 A0 FD | 	call	#pushregs_
1b2a8     20 F0 07 F1 | 	add	ptra, #32
1b2ac     4A 00 00 FF 
1b2b0     80 E4 05 F1 | 	add	objptr, ##38016
1b2b4     F2 16 02 FB | 	rdlong	arg03, objptr
1b2b8     0B 27 02 F6 | 	mov	local01, arg03
1b2bc     01 26 66 F0 | 	shl	local01, #1
1b2c0     0B 27 02 F1 | 	add	local01, arg03
1b2c4     02 26 66 F0 | 	shl	local01, #2
1b2c8     03 00 00 FF 
1b2cc     04 E4 85 F1 | 	sub	objptr, ##1540
1b2d0     F2 26 02 F1 | 	add	local01, objptr
1b2d4     13 17 02 FB | 	rdlong	arg03, local01
1b2d8     0C 4E 05 F1 | 	add	fp, #12
1b2dc     A7 16 62 FC | 	wrlong	arg03, fp
1b2e0                 | ' 
1b2e0                 | ' numpar=compiledline(lineptr_e).result.uresult
1b2e0                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1b2e0     0C 4E 85 F1 | 	sub	fp, #12
1b2e4     02 16 16 F2 | 	cmp	arg03, #2 wc
1b2e8     47 00 00 FF 
1b2ec     7C E4 85 F1 | 	sub	objptr, ##36476
1b2f0     0C 4E 05 C1 |  if_b	add	fp, #12
1b2f4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1b2f8     0C 4E 85 C1 |  if_b	sub	fp, #12
1b2fc     40 00 90 4D |  if_c_and_nz	jmp	#LR__2210
1b300     00 12 06 F6 | 	mov	arg01, #0
1b304     A8 03 B1 FD | 	call	#__system___getiolock_0599
1b308     FD 12 02 F6 | 	mov	arg01, result1
1b30c     78 A6 B0 FD | 	call	#__system___lockmem
1b310     AF 01 00 FF 
1b314     AE 15 06 F6 | 	mov	arg02, ##@LR__5939
1b318     00 12 06 F6 | 	mov	arg01, #0
1b31c     00 16 06 F6 | 	mov	arg03, #0
1b320     58 B3 B0 FD | 	call	#__system___basic_print_string
1b324     00 12 06 F6 | 	mov	arg01, #0
1b328     84 03 B1 FD | 	call	#__system___getiolock_0599
1b32c     FD 00 68 FC | 	wrlong	#0, result1
1b330     27 12 06 F6 | 	mov	arg01, #39
1b334     00 14 06 F6 | 	mov	arg02, #0
1b338     60 6C B0 FD | 	call	#_printerror
1b33c     60 02 90 FD | 	jmp	#LR__2223
1b340                 | LR__2210
1b340     3C 19 BF FD | 	call	#_pop
1b344     FF 16 02 F6 | 	mov	arg03, result3
1b348     A7 FA 61 FC | 	wrlong	result1, fp
1b34c     04 4E 05 F1 | 	add	fp, #4
1b350     A7 FC 61 FC | 	wrlong	result2, fp
1b354     04 4E 05 F1 | 	add	fp, #4
1b358     A7 16 62 FC | 	wrlong	arg03, fp
1b35c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1b35c     08 4E 85 F1 | 	sub	fp, #8
1b360     2B 16 0E F2 | 	cmp	arg03, #43 wz
1b364     18 00 90 5D |  if_ne	jmp	#LR__2211
1b368     A7 12 02 FB | 	rdlong	arg01, fp
1b36c     88 1A BF FD | 	call	#_convertstring
1b370     A7 FA 61 FC | 	wrlong	result1, fp
1b374     08 4E 05 F1 | 	add	fp, #8
1b378     A7 3E 68 FC | 	wrlong	#31, fp
1b37c     08 4E 85 F1 | 	sub	fp, #8
1b380                 | LR__2211
1b380                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1b380     08 4E 05 F1 | 	add	fp, #8
1b384     A7 16 02 FB | 	rdlong	arg03, fp
1b388     08 4E 85 F1 | 	sub	fp, #8
1b38c     1F 16 0E F2 | 	cmp	arg03, #31 wz
1b390     40 00 90 AD |  if_e	jmp	#LR__2212
1b394     00 12 06 F6 | 	mov	arg01, #0
1b398     14 03 B1 FD | 	call	#__system___getiolock_0599
1b39c     FD 12 02 F6 | 	mov	arg01, result1
1b3a0     E4 A5 B0 FD | 	call	#__system___lockmem
1b3a4     AF 01 00 FF 
1b3a8     B4 15 06 F6 | 	mov	arg02, ##@LR__5940
1b3ac     00 12 06 F6 | 	mov	arg01, #0
1b3b0     00 16 06 F6 | 	mov	arg03, #0
1b3b4     C4 B2 B0 FD | 	call	#__system___basic_print_string
1b3b8     00 12 06 F6 | 	mov	arg01, #0
1b3bc     F0 02 B1 FD | 	call	#__system___getiolock_0599
1b3c0     FD 00 68 FC | 	wrlong	#0, result1
1b3c4     0F 12 06 F6 | 	mov	arg01, #15
1b3c8     00 14 06 F6 | 	mov	arg02, #0
1b3cc     CC 6B B0 FD | 	call	#_printerror
1b3d0     CC 01 90 FD | 	jmp	#LR__2223
1b3d4                 | LR__2212
1b3d4                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1b3d4     A7 12 02 FB | 	rdlong	arg01, fp
1b3d8     01 14 06 F6 | 	mov	arg02, #1
1b3dc     24 C6 B0 FD | 	call	#__system__Left_S
1b3e0     FD 12 02 F6 | 	mov	arg01, result1
1b3e4     AF 01 00 FF 
1b3e8     BA 15 06 F6 | 	mov	arg02, ##@LR__5941
1b3ec     C0 A5 B0 FD | 	call	#__system___string_cmp
1b3f0     00 FA 0D F2 | 	cmp	result1, #0 wz
1b3f4     48 00 90 5D |  if_ne	jmp	#LR__2215
1b3f8     AF 01 00 FF 
1b3fc     BC 27 06 F6 | 	mov	local01, ##@LR__5942
1b400     A7 16 02 FB | 	rdlong	arg03, fp
1b404     0B 13 02 F6 | 	mov	arg01, arg03
1b408     09 29 02 F6 | 	mov	local02, arg01
1b40c     97 06 48 FB | 	callpa	#(@LR__2214-@LR__2213)>>2,fcache_load_ptr_
1b410                 | LR__2213
1b410     14 FB C9 FA | 	rdbyte	result1, local02 wz
1b414     01 28 06 51 |  if_ne	add	local02, #1
1b418     F4 FF 9F 5D |  if_ne	jmp	#LR__2213
1b41c                 | LR__2214
1b41c     09 29 82 F1 | 	sub	local02, arg01
1b420     14 15 02 F6 | 	mov	arg02, local02
1b424     01 14 86 F1 | 	sub	arg02, #1
1b428     0B 13 02 F6 | 	mov	arg01, arg03
1b42c     5C C6 B0 FD | 	call	#__system__Right_S
1b430     FD 14 02 F6 | 	mov	arg02, result1
1b434     13 13 02 F6 | 	mov	arg01, local01
1b438     A8 A5 B0 FD | 	call	#__system___string_concat
1b43c     A7 FA 61 FC | 	wrlong	result1, fp
1b440                 | LR__2215
1b440                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1b440     A7 12 02 FB | 	rdlong	arg01, fp
1b444     01 14 06 F6 | 	mov	arg02, #1
1b448     B8 C5 B0 FD | 	call	#__system__Left_S
1b44c     FD 12 02 F6 | 	mov	arg01, result1
1b450     AF 01 00 FF 
1b454     BF 15 06 F6 | 	mov	arg02, ##@LR__5943
1b458     54 A5 B0 FD | 	call	#__system___string_cmp
1b45c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b460     48 00 90 5D |  if_ne	jmp	#LR__2218
1b464     AF 01 00 FF 
1b468     C1 27 06 F6 | 	mov	local01, ##@LR__5944
1b46c     A7 16 02 FB | 	rdlong	arg03, fp
1b470     0B 13 02 F6 | 	mov	arg01, arg03
1b474     09 29 02 F6 | 	mov	local02, arg01
1b478     97 06 48 FB | 	callpa	#(@LR__2217-@LR__2216)>>2,fcache_load_ptr_
1b47c                 | LR__2216
1b47c     14 FB C9 FA | 	rdbyte	result1, local02 wz
1b480     01 28 06 51 |  if_ne	add	local02, #1
1b484     F4 FF 9F 5D |  if_ne	jmp	#LR__2216
1b488                 | LR__2217
1b488     09 29 82 F1 | 	sub	local02, arg01
1b48c     14 15 02 F6 | 	mov	arg02, local02
1b490     01 14 86 F1 | 	sub	arg02, #1
1b494     0B 13 02 F6 | 	mov	arg01, arg03
1b498     F0 C5 B0 FD | 	call	#__system__Right_S
1b49c     FD 14 02 F6 | 	mov	arg02, result1
1b4a0     13 13 02 F6 | 	mov	arg01, local01
1b4a4     3C A5 B0 FD | 	call	#__system___string_concat
1b4a8     A7 FA 61 FC | 	wrlong	result1, fp
1b4ac                 | LR__2218
1b4ac     A7 12 02 FB | 	rdlong	arg01, fp
1b4b0     58 DB B0 FD | 	call	#__system____builtin_atof
1b4b4     1C 4E 05 F1 | 	add	fp, #28
1b4b8     A7 FA 61 FC | 	wrlong	result1, fp
1b4bc     1C 4E 85 F1 | 	sub	fp, #28
1b4c0     A7 12 02 FB | 	rdlong	arg01, fp
1b4c4     00 14 06 F6 | 	mov	arg02, #0
1b4c8     AC D9 B0 FD | 	call	#__system____builtin_atoi
1b4cc     18 4E 05 F1 | 	add	fp, #24
1b4d0     A7 FA 61 FC | 	wrlong	result1, fp
1b4d4                 | ' fval=val(t1.result.sresult)
1b4d4                 | ' ival=val%(t1.result.sresult)
1b4d4                 | ' if fval=ival then
1b4d4     04 4E 05 F1 | 	add	fp, #4
1b4d8     A7 26 02 FB | 	rdlong	local01, fp
1b4dc     1C 4E 85 F1 | 	sub	fp, #28
1b4e0     FD 12 52 F6 | 	abs	arg01, result1 wc
1b4e4     1F 2A C6 C9 |  if_b	decod	local03, #31
1b4e8     00 2A 06 36 |  if_ae	mov	local03, #0
1b4ec     0C CF B0 FD | 	call	#__system___float_fromuns
1b4f0     15 FB 61 F5 | 	xor	result1, local03
1b4f4     FD 14 02 F6 | 	mov	arg02, result1
1b4f8     13 13 02 F6 | 	mov	arg01, local01
1b4fc     01 16 06 F6 | 	mov	arg03, #1
1b500     30 D7 B0 FD | 	call	#__system___float_cmp
1b504     00 FA 0D F2 | 	cmp	result1, #0 wz
1b508     20 00 90 5D |  if_ne	jmp	#LR__2219
1b50c     18 4E 05 F1 | 	add	fp, #24
1b510     A7 26 02 FB | 	rdlong	local01, fp
1b514     18 4E 85 F1 | 	sub	fp, #24
1b518     A7 26 62 FC | 	wrlong	local01, fp
1b51c     08 4E 05 F1 | 	add	fp, #8
1b520     A7 38 68 FC | 	wrlong	#28, fp
1b524     08 4E 85 F1 | 	sub	fp, #8
1b528     6C 00 90 FD | 	jmp	#LR__2222
1b52c                 | LR__2219
1b52c                 | '   if fval=0 andalso ival<>0 then
1b52c     1C 4E 05 F1 | 	add	fp, #28
1b530     A7 12 02 FB | 	rdlong	arg01, fp
1b534     1C 4E 85 F1 | 	sub	fp, #28
1b538     00 14 06 F6 | 	mov	arg02, #0
1b53c     01 16 06 F6 | 	mov	arg03, #1
1b540     F0 D6 B0 FD | 	call	#__system___float_cmp
1b544     00 FA 0D F2 | 	cmp	result1, #0 wz
1b548     30 00 90 5D |  if_ne	jmp	#LR__2220
1b54c     18 4E 05 F1 | 	add	fp, #24
1b550     A7 26 0A FB | 	rdlong	local01, fp wz
1b554     18 4E 85 F1 | 	sub	fp, #24
1b558     20 00 90 AD |  if_e	jmp	#LR__2220
1b55c     18 4E 05 F1 | 	add	fp, #24
1b560     A7 26 02 FB | 	rdlong	local01, fp
1b564     18 4E 85 F1 | 	sub	fp, #24
1b568     A7 26 62 FC | 	wrlong	local01, fp
1b56c     08 4E 05 F1 | 	add	fp, #8
1b570     A7 38 68 FC | 	wrlong	#28, fp
1b574     08 4E 85 F1 | 	sub	fp, #8
1b578     1C 00 90 FD | 	jmp	#LR__2221
1b57c                 | LR__2220
1b57c     1C 4E 05 F1 | 	add	fp, #28
1b580     A7 26 02 FB | 	rdlong	local01, fp
1b584     1C 4E 85 F1 | 	sub	fp, #28
1b588     A7 26 62 FC | 	wrlong	local01, fp
1b58c     08 4E 05 F1 | 	add	fp, #8
1b590     A7 3C 68 FC | 	wrlong	#30, fp
1b594     08 4E 85 F1 | 	sub	fp, #8
1b598                 | LR__2221
1b598                 | LR__2222
1b598     A7 12 02 F6 | 	mov	arg01, fp
1b59c     78 17 BF FD | 	call	#_push
1b5a0                 | LR__2223
1b5a0     A7 F0 03 F6 | 	mov	ptra, fp
1b5a4     B2 00 A0 FD | 	call	#popregs_
1b5a8                 | _do_val_ret
1b5a8     2D 00 64 FD | 	ret
1b5ac                 | 
1b5ac                 | ' 
1b5ac                 | ' ' ------------------ waitclock
1b5ac                 | ' 
1b5ac                 | ' sub do_waitclock
1b5ac                 | _do_waitclock
1b5ac     52 00 00 FF 
1b5b0     40 E4 05 F1 | 	add	objptr, ##42048
1b5b4     F2 00 02 FB | 	rdlong	_var01, objptr
1b5b8                 | ' c=hkcnt
1b5b8                 | ' do: loop until hkcnt<>c
1b5b8                 | LR__2230
1b5b8     F2 02 02 FB | 	rdlong	_var02, objptr
1b5bc     00 03 0A F2 | 	cmp	_var02, _var01 wz
1b5c0     F4 FF 9F AD |  if_e	jmp	#LR__2230
1b5c4     52 00 00 FF 
1b5c8     40 E4 85 F1 | 	sub	objptr, ##42048
1b5cc                 | _do_waitclock_ret
1b5cc     2D 00 64 FD | 	ret
1b5d0                 | 
1b5d0                 | ' 
1b5d0                 | ' ' ------------------ waitms
1b5d0                 | ' 
1b5d0                 | ' sub do_waitms
1b5d0                 | _do_waitms
1b5d0     01 4A 05 F6 | 	mov	COUNT_, #1
1b5d4     A8 00 A0 FD | 	call	#pushregs_
1b5d8     18 F0 07 F1 | 	add	ptra, #24
1b5dc     A0 16 BF FD | 	call	#_pop
1b5e0     A7 FA 61 FC | 	wrlong	result1, fp
1b5e4     04 4E 05 F1 | 	add	fp, #4
1b5e8     A7 FC 61 FC | 	wrlong	result2, fp
1b5ec     04 4E 05 F1 | 	add	fp, #4
1b5f0     A7 FE 61 FC | 	wrlong	result3, fp
1b5f4     08 4E 85 F1 | 	sub	fp, #8
1b5f8     A7 12 02 F6 | 	mov	arg01, fp
1b5fc     64 18 BF FD | 	call	#_converttoint
1b600     0C 4E 05 F1 | 	add	fp, #12
1b604     A7 FA 61 FC | 	wrlong	result1, fp
1b608                 | ' 
1b608                 | ' t1=pop()  
1b608                 | ' t=converttoint(t1)
1b608                 | ' if t<0 then return
1b608     0C 4E 85 F1 | 	sub	fp, #12
1b60c     00 FA 55 F2 | 	cmps	result1, #0 wc
1b610     E4 00 90 CD |  if_b	jmp	#LR__2246
1b614                 | ' if t < 1000 then 
1b614     0C 4E 05 F1 | 	add	fp, #12
1b618     A7 12 02 FB | 	rdlong	arg01, fp
1b61c     0C 4E 85 F1 | 	sub	fp, #12
1b620     01 00 00 FF 
1b624     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
1b628     14 00 90 3D |  if_ae	jmp	#LR__2240
1b62c     0C 4E 05 F1 | 	add	fp, #12
1b630     A7 12 02 FB | 	rdlong	arg01, fp
1b634     0C 4E 85 F1 | 	sub	fp, #12
1b638     40 A6 B0 FD | 	call	#__system___waitms
1b63c     B8 00 90 FD | 	jmp	#LR__2245
1b640                 | LR__2240
1b640     10 4E 05 F1 | 	add	fp, #16
1b644     A7 02 68 FC | 	wrlong	#1, fp
1b648     04 4E 85 F1 | 	sub	fp, #4
1b64c     A7 12 02 FB | 	rdlong	arg01, fp
1b650     09 13 52 F6 | 	abs	arg01, arg01 wc
1b654     01 00 00 FF 
1b658     E8 13 16 FD | 	qdiv	arg01, ##1000
1b65c                 | '   for i=1 to t/1000
1b65c     0C 4E 85 F1 | 	sub	fp, #12
1b660     18 26 62 FD | 	getqx	local01
1b664     13 27 82 F6 | 	negc	local01, local01
1b668     01 26 06 F1 | 	add	local01, #1
1b66c                 | LR__2241
1b66c     10 4E 05 F1 | 	add	fp, #16
1b670     A7 12 02 FB | 	rdlong	arg01, fp
1b674     10 4E 85 F1 | 	sub	fp, #16
1b678     13 13 52 F2 | 	cmps	arg01, local01 wc
1b67c     54 00 90 3D |  if_ae	jmp	#LR__2244
1b680     01 00 00 FF 
1b684     E8 13 06 F6 | 	mov	arg01, ##1000
1b688     F0 A5 B0 FD | 	call	#__system___waitms
1b68c                 | '     waitms(1000)
1b68c                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1b68c     E0 12 06 F6 | 	mov	arg01, #224
1b690     FC 99 B0 FD | 	call	#_usbnew_spin2_keystate
1b694     00 FA 0D F2 | 	cmp	result1, #0 wz
1b698     10 00 90 5D |  if_ne	jmp	#LR__2242
1b69c     E4 12 06 F6 | 	mov	arg01, #228
1b6a0     EC 99 B0 FD | 	call	#_usbnew_spin2_keystate
1b6a4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b6a8     10 00 90 AD |  if_e	jmp	#LR__2243
1b6ac                 | LR__2242
1b6ac     06 12 06 F6 | 	mov	arg01, #6
1b6b0     DC 99 B0 FD | 	call	#_usbnew_spin2_keystate
1b6b4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b6b8     3C 00 90 5D |  if_ne	jmp	#LR__2246
1b6bc                 | LR__2243
1b6bc     10 4E 05 F1 | 	add	fp, #16
1b6c0     A7 12 02 FB | 	rdlong	arg01, fp
1b6c4     01 12 06 F1 | 	add	arg01, #1
1b6c8     A7 12 62 FC | 	wrlong	arg01, fp
1b6cc     10 4E 85 F1 | 	sub	fp, #16
1b6d0     98 FF 9F FD | 	jmp	#LR__2241
1b6d4                 | LR__2244
1b6d4     0C 4E 05 F1 | 	add	fp, #12
1b6d8     A7 26 02 FB | 	rdlong	local01, fp
1b6dc     13 27 52 F6 | 	abs	local01, local01 wc
1b6e0     01 00 00 FF 
1b6e4     E8 27 16 FD | 	qdiv	local01, ##1000
1b6e8     0C 4E 85 F1 | 	sub	fp, #12
1b6ec     19 26 62 FD | 	getqy	local01
1b6f0     13 13 82 F6 | 	negc	arg01, local01
1b6f4     84 A5 B0 FD | 	call	#__system___waitms
1b6f8                 | LR__2245
1b6f8                 | LR__2246
1b6f8     A7 F0 03 F6 | 	mov	ptra, fp
1b6fc     B2 00 A0 FD | 	call	#popregs_
1b700                 | _do_waitms_ret
1b700     2D 00 64 FD | 	ret
1b704                 | 
1b704                 | ' 
1b704                 | ' ' ------------------ waitvbl
1b704                 | ' 
1b704                 | ' sub do_waitvbl
1b704                 | _do_waitvbl
1b704     01 12 06 F6 | 	mov	arg01, #1
1b708     88 85 B0 FD | 	call	#_hg010b_spin2_waitvbl
1b70c                 | _do_waitvbl_ret
1b70c     2D 00 64 FD | 	ret
1b710                 | 
1b710                 | ' 
1b710                 | ' ' ------------------ wrpin
1b710                 | ' 
1b710                 | ' sub do_wrpin
1b710                 | _do_wrpin
1b710     01 4A 05 F6 | 	mov	COUNT_, #1
1b714     A8 00 A0 FD | 	call	#pushregs_
1b718     18 F0 07 F1 | 	add	ptra, #24
1b71c     60 15 BF FD | 	call	#_pop
1b720     FD 14 02 F6 | 	mov	arg02, result1
1b724     FE 12 02 F6 | 	mov	arg01, result2
1b728     FF 26 02 F6 | 	mov	local01, result3
1b72c     A7 14 62 FC | 	wrlong	arg02, fp
1b730     04 4E 05 F1 | 	add	fp, #4
1b734     A7 12 62 FC | 	wrlong	arg01, fp
1b738     04 4E 05 F1 | 	add	fp, #4
1b73c     A7 26 62 FC | 	wrlong	local01, fp
1b740     08 4E 85 F1 | 	sub	fp, #8
1b744     38 15 BF FD | 	call	#_pop
1b748     FF 26 02 F6 | 	mov	local01, result3
1b74c     0C 4E 05 F1 | 	add	fp, #12
1b750     A7 FA 61 FC | 	wrlong	result1, fp
1b754     04 4E 05 F1 | 	add	fp, #4
1b758     A7 FC 61 FC | 	wrlong	result2, fp
1b75c     04 4E 05 F1 | 	add	fp, #4
1b760     A7 26 62 FC | 	wrlong	local01, fp
1b764     08 4E 85 F1 | 	sub	fp, #8
1b768     A7 12 02 F6 | 	mov	arg01, fp
1b76c     0C 4E 85 F1 | 	sub	fp, #12
1b770     F0 16 BF FD | 	call	#_converttoint
1b774     FD 26 02 F6 | 	mov	local01, result1
1b778     A7 12 02 F6 | 	mov	arg01, fp
1b77c     E4 16 BF FD | 	call	#_converttoint
1b780     13 FB 01 FC | 	wrpin	result1, local01
1b784     A7 F0 03 F6 | 	mov	ptra, fp
1b788     B2 00 A0 FD | 	call	#popregs_
1b78c                 | _do_wrpin_ret
1b78c     2D 00 64 FD | 	ret
1b790                 | 
1b790                 | ' 
1b790                 | ' ' ------------------ wxpin
1b790                 | ' 
1b790                 | ' sub do_wxpin
1b790                 | _do_wxpin
1b790     01 4A 05 F6 | 	mov	COUNT_, #1
1b794     A8 00 A0 FD | 	call	#pushregs_
1b798     18 F0 07 F1 | 	add	ptra, #24
1b79c     E0 14 BF FD | 	call	#_pop
1b7a0     FD 14 02 F6 | 	mov	arg02, result1
1b7a4     FE 12 02 F6 | 	mov	arg01, result2
1b7a8     FF 26 02 F6 | 	mov	local01, result3
1b7ac     A7 14 62 FC | 	wrlong	arg02, fp
1b7b0     04 4E 05 F1 | 	add	fp, #4
1b7b4     A7 12 62 FC | 	wrlong	arg01, fp
1b7b8     04 4E 05 F1 | 	add	fp, #4
1b7bc     A7 26 62 FC | 	wrlong	local01, fp
1b7c0     08 4E 85 F1 | 	sub	fp, #8
1b7c4     B8 14 BF FD | 	call	#_pop
1b7c8     FF 26 02 F6 | 	mov	local01, result3
1b7cc     0C 4E 05 F1 | 	add	fp, #12
1b7d0     A7 FA 61 FC | 	wrlong	result1, fp
1b7d4     04 4E 05 F1 | 	add	fp, #4
1b7d8     A7 FC 61 FC | 	wrlong	result2, fp
1b7dc     04 4E 05 F1 | 	add	fp, #4
1b7e0     A7 26 62 FC | 	wrlong	local01, fp
1b7e4     08 4E 85 F1 | 	sub	fp, #8
1b7e8     A7 12 02 F6 | 	mov	arg01, fp
1b7ec     0C 4E 85 F1 | 	sub	fp, #12
1b7f0     70 16 BF FD | 	call	#_converttoint
1b7f4     FD 26 02 F6 | 	mov	local01, result1
1b7f8     A7 12 02 F6 | 	mov	arg01, fp
1b7fc     64 16 BF FD | 	call	#_converttoint
1b800     13 FB 11 FC | 	wxpin	result1, local01
1b804     A7 F0 03 F6 | 	mov	ptra, fp
1b808     B2 00 A0 FD | 	call	#popregs_
1b80c                 | _do_wxpin_ret
1b80c     2D 00 64 FD | 	ret
1b810                 | 
1b810                 | ' 
1b810                 | ' ' ------------------ wypin
1b810                 | ' 
1b810                 | ' sub do_wypin
1b810                 | _do_wypin
1b810     01 4A 05 F6 | 	mov	COUNT_, #1
1b814     A8 00 A0 FD | 	call	#pushregs_
1b818     18 F0 07 F1 | 	add	ptra, #24
1b81c     60 14 BF FD | 	call	#_pop
1b820     FD 14 02 F6 | 	mov	arg02, result1
1b824     FE 12 02 F6 | 	mov	arg01, result2
1b828     FF 26 02 F6 | 	mov	local01, result3
1b82c     A7 14 62 FC | 	wrlong	arg02, fp
1b830     04 4E 05 F1 | 	add	fp, #4
1b834     A7 12 62 FC | 	wrlong	arg01, fp
1b838     04 4E 05 F1 | 	add	fp, #4
1b83c     A7 26 62 FC | 	wrlong	local01, fp
1b840     08 4E 85 F1 | 	sub	fp, #8
1b844     38 14 BF FD | 	call	#_pop
1b848     FF 26 02 F6 | 	mov	local01, result3
1b84c     0C 4E 05 F1 | 	add	fp, #12
1b850     A7 FA 61 FC | 	wrlong	result1, fp
1b854     04 4E 05 F1 | 	add	fp, #4
1b858     A7 FC 61 FC | 	wrlong	result2, fp
1b85c     04 4E 05 F1 | 	add	fp, #4
1b860     A7 26 62 FC | 	wrlong	local01, fp
1b864     08 4E 85 F1 | 	sub	fp, #8
1b868     A7 12 02 F6 | 	mov	arg01, fp
1b86c     0C 4E 85 F1 | 	sub	fp, #12
1b870     F0 15 BF FD | 	call	#_converttoint
1b874     FD 26 02 F6 | 	mov	local01, result1
1b878     A7 12 02 F6 | 	mov	arg01, fp
1b87c     E4 15 BF FD | 	call	#_converttoint
1b880     13 FB 21 FC | 	wypin	result1, local01
1b884     A7 F0 03 F6 | 	mov	ptra, fp
1b888     B2 00 A0 FD | 	call	#popregs_
1b88c                 | _do_wypin_ret
1b88c     2D 00 64 FD | 	ret
1b890                 | 
1b890                 | ' 
1b890                 | ' 
1b890                 | ' 
1b890                 | ' 
1b890                 | ' 
1b890                 | ' 
1b890                 | ' 
1b890                 | ' 
1b890                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1b890                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1b890                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1b890                 | ' 
1b890                 | ' 
1b890                 | ' '------------------ Assign
1b890                 | ' 
1b890                 | ' sub do_assign
1b890                 | _do_assign
1b890     05 4A 05 F6 | 	mov	COUNT_, #5
1b894     A8 00 A0 FD | 	call	#pushregs_
1b898     44 F0 07 F1 | 	add	ptra, #68
1b89c     4A 00 00 FF 
1b8a0     80 E4 05 F1 | 	add	objptr, ##38016
1b8a4     F2 16 02 FB | 	rdlong	arg03, objptr
1b8a8     0B 15 02 F6 | 	mov	arg02, arg03
1b8ac     01 14 66 F0 | 	shl	arg02, #1
1b8b0     0B 15 02 F1 | 	add	arg02, arg03
1b8b4     02 14 66 F0 | 	shl	arg02, #2
1b8b8     03 00 00 FF 
1b8bc     04 E4 85 F1 | 	sub	objptr, ##1540
1b8c0     F2 14 02 F1 | 	add	arg02, objptr
1b8c4     0A 15 02 FB | 	rdlong	arg02, arg02
1b8c8     18 4E 05 F1 | 	add	fp, #24
1b8cc     A7 14 62 FC | 	wrlong	arg02, fp
1b8d0                 | ' 
1b8d0                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1b8d0                 | ' if variables(varnum).vartype<array_no_type then 
1b8d0     18 4E 85 F1 | 	sub	fp, #24
1b8d4     04 14 66 F0 | 	shl	arg02, #4
1b8d8     32 00 00 FF 
1b8dc     84 E4 85 F1 | 	sub	objptr, ##25732
1b8e0     F2 14 02 F1 | 	add	arg02, objptr
1b8e4     0C 14 06 F1 | 	add	arg02, #12
1b8e8     0A 17 02 FB | 	rdlong	arg03, arg02
1b8ec     00 17 16 F2 | 	cmp	arg03, #256 wc
1b8f0     14 00 00 FF 
1b8f4     F8 E5 85 F1 | 	sub	objptr, ##10744
1b8f8     18 01 90 3D |  if_ae	jmp	#LR__2250
1b8fc     80 13 BF FD | 	call	#_pop
1b900     A7 FA 61 FC | 	wrlong	result1, fp
1b904     04 4E 05 F1 | 	add	fp, #4
1b908     A7 FC 61 FC | 	wrlong	result2, fp
1b90c     04 4E 05 F1 | 	add	fp, #4
1b910     A7 FE 61 FC | 	wrlong	result3, fp
1b914     08 4E 85 F1 | 	sub	fp, #8
1b918     A7 16 02 FB | 	rdlong	arg03, fp
1b91c     04 4E 05 F1 | 	add	fp, #4
1b920     A7 14 02 FB | 	rdlong	arg02, fp
1b924     14 4E 05 F1 | 	add	fp, #20
1b928     A7 12 02 FB | 	rdlong	arg01, fp
1b92c     04 12 66 F0 | 	shl	arg01, #4
1b930     14 00 00 FF 
1b934     F8 E5 05 F1 | 	add	objptr, ##10744
1b938     F2 12 02 F1 | 	add	arg01, objptr
1b93c     04 12 06 F1 | 	add	arg01, #4
1b940     09 17 62 FC | 	wrlong	arg03, arg01
1b944     A7 16 02 FB | 	rdlong	arg03, fp
1b948     04 16 66 F0 | 	shl	arg03, #4
1b94c     F2 16 02 F1 | 	add	arg03, objptr
1b950     08 16 06 F1 | 	add	arg03, #8
1b954     0B 15 62 FC | 	wrlong	arg02, arg03
1b958     A7 16 02 FB | 	rdlong	arg03, fp
1b95c     04 16 66 F0 | 	shl	arg03, #4
1b960     F2 16 02 F1 | 	add	arg03, objptr
1b964     10 4E 85 F1 | 	sub	fp, #16
1b968     A7 14 02 FB | 	rdlong	arg02, fp
1b96c     0C 16 06 F1 | 	add	arg03, #12
1b970     0B 15 62 FC | 	wrlong	arg02, arg03
1b974                 | '   t1=pop() 
1b974                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1b974                 | '   if variables(varnum).vartype<>result_string2 then return
1b974     10 4E 05 F1 | 	add	fp, #16
1b978     A7 16 02 FB | 	rdlong	arg03, fp
1b97c     18 4E 85 F1 | 	sub	fp, #24
1b980     04 16 66 F0 | 	shl	arg03, #4
1b984     F2 16 02 F1 | 	add	arg03, objptr
1b988     0C 16 06 F1 | 	add	arg03, #12
1b98c     0B 17 02 FB | 	rdlong	arg03, arg03
1b990     2B 16 0E F2 | 	cmp	arg03, #43 wz
1b994     14 00 00 FF 
1b998     F8 E5 85 F1 | 	sub	objptr, ##10744
1b99c     EC 04 90 5D |  if_ne	jmp	#LR__2273
1b9a0     18 4E 05 F1 | 	add	fp, #24
1b9a4     A7 16 02 FB | 	rdlong	arg03, fp
1b9a8     0B 27 02 F6 | 	mov	local01, arg03
1b9ac     04 26 66 F0 | 	shl	local01, #4
1b9b0     14 00 00 FF 
1b9b4     F8 E5 05 F1 | 	add	objptr, ##10744
1b9b8     F2 26 02 F1 | 	add	local01, objptr
1b9bc     18 4E 85 F1 | 	sub	fp, #24
1b9c0     04 16 66 F0 | 	shl	arg03, #4
1b9c4     F2 16 02 F1 | 	add	arg03, objptr
1b9c8     04 16 06 F1 | 	add	arg03, #4
1b9cc     0B 13 02 FB | 	rdlong	arg01, arg03
1b9d0     14 00 00 FF 
1b9d4     F8 E5 85 F1 | 	sub	objptr, ##10744
1b9d8     1C 14 BF FD | 	call	#_convertstring
1b9dc     04 26 06 F1 | 	add	local01, #4
1b9e0     13 FB 61 FC | 	wrlong	result1, local01
1b9e4     18 4E 05 F1 | 	add	fp, #24
1b9e8     A7 26 02 FB | 	rdlong	local01, fp
1b9ec     18 4E 85 F1 | 	sub	fp, #24
1b9f0     04 26 66 F0 | 	shl	local01, #4
1b9f4     14 00 00 FF 
1b9f8     F8 E5 05 F1 | 	add	objptr, ##10744
1b9fc     F2 26 02 F1 | 	add	local01, objptr
1ba00     0C 26 06 F1 | 	add	local01, #12
1ba04     13 3F 68 FC | 	wrlong	#31, local01
1ba08                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1ba08                 | '   variables(varnum).vartype=result_string
1ba08                 | '   return
1ba08     14 00 00 FF 
1ba0c     F8 E5 85 F1 | 	sub	objptr, ##10744
1ba10     78 04 90 FD | 	jmp	#LR__2273
1ba14                 | LR__2250
1ba14                 | ' for i=0 to 2 : arrid(i)=0 : next i
1ba14     1C 4E 05 F1 | 	add	fp, #28
1ba18     A7 00 68 FC | 	wrlong	#0, fp
1ba1c     97 16 48 FB | 	callpa	#(@LR__2252-@LR__2251)>>2,fcache_load_ptr_
1ba20                 | LR__2251
1ba20     A7 26 02 FB | 	rdlong	local01, fp
1ba24     02 26 66 F0 | 	shl	local01, #2
1ba28     18 4E 05 F1 | 	add	fp, #24
1ba2c     A7 26 02 F1 | 	add	local01, fp
1ba30     13 01 68 FC | 	wrlong	#0, local01
1ba34     18 4E 85 F1 | 	sub	fp, #24
1ba38     A7 26 02 FB | 	rdlong	local01, fp
1ba3c     01 26 06 F1 | 	add	local01, #1
1ba40     A7 26 62 FC | 	wrlong	local01, fp
1ba44     03 26 16 F2 | 	cmp	local01, #3 wc
1ba48     D4 FF 9F CD |  if_b	jmp	#LR__2251
1ba4c                 | LR__2252
1ba4c     4A 00 00 FF 
1ba50     80 E4 05 F1 | 	add	objptr, ##38016
1ba54     F2 16 02 FB | 	rdlong	arg03, objptr
1ba58     0B 27 02 F6 | 	mov	local01, arg03
1ba5c     01 26 66 F0 | 	shl	local01, #1
1ba60     0B 27 02 F1 | 	add	local01, arg03
1ba64     02 26 66 F0 | 	shl	local01, #2
1ba68     03 00 00 FF 
1ba6c     04 E4 85 F1 | 	sub	objptr, ##1540
1ba70     F2 26 02 F1 | 	add	local01, objptr
1ba74     04 26 06 F1 | 	add	local01, #4
1ba78     13 29 02 FB | 	rdlong	local02, local01
1ba7c     04 4E 05 F1 | 	add	fp, #4
1ba80     A7 28 62 FC | 	wrlong	local02, fp
1ba84     20 4E 85 F1 | 	sub	fp, #32
1ba88     47 00 00 FF 
1ba8c     7C E4 85 F1 | 	sub	objptr, ##36476
1ba90     EC 11 BF FD | 	call	#_pop
1ba94     A7 FA 61 FC | 	wrlong	result1, fp
1ba98     04 4E 05 F1 | 	add	fp, #4
1ba9c     A7 FC 61 FC | 	wrlong	result2, fp
1baa0     04 4E 05 F1 | 	add	fp, #4
1baa4     A7 FE 61 FC | 	wrlong	result3, fp
1baa8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1baa8                 | ' t1=pop() ' var value
1baa8                 | ' if numpar>0 then
1baa8     18 4E 05 F1 | 	add	fp, #24
1baac     A7 2A 02 FB | 	rdlong	local03, fp
1bab0     20 4E 85 F1 | 	sub	fp, #32
1bab4     01 2A 16 F2 | 	cmp	local03, #1 wc
1bab8     78 00 90 CD |  if_b	jmp	#LR__2255
1babc                 | '   for i=numpar to 1 step -1
1babc     20 4E 05 F1 | 	add	fp, #32
1bac0     A7 2C 0A FB | 	rdlong	local04, fp wz
1bac4     04 4E 85 F1 | 	sub	fp, #4
1bac8     A7 2C 62 FC | 	wrlong	local04, fp
1bacc     1C 4E 85 F1 | 	sub	fp, #28
1bad0     60 00 90 AD |  if_e	jmp	#LR__2254
1bad4                 | LR__2253
1bad4     A8 11 BF FD | 	call	#_pop
1bad8     0C 4E 05 F1 | 	add	fp, #12
1badc     A7 FA 61 FC | 	wrlong	result1, fp
1bae0     04 4E 05 F1 | 	add	fp, #4
1bae4     A7 FC 61 FC | 	wrlong	result2, fp
1bae8     04 4E 05 F1 | 	add	fp, #4
1baec     A7 FE 61 FC | 	wrlong	result3, fp
1baf0     08 4E 05 F1 | 	add	fp, #8
1baf4     A7 2A 02 FB | 	rdlong	local03, fp
1baf8     01 2A 86 F1 | 	sub	local03, #1
1bafc     02 2A 66 F0 | 	shl	local03, #2
1bb00     18 4E 05 F1 | 	add	fp, #24
1bb04     A7 2A 02 F1 | 	add	local03, fp
1bb08     28 4E 85 F1 | 	sub	fp, #40
1bb0c     A7 12 02 F6 | 	mov	arg01, fp
1bb10     0C 4E 85 F1 | 	sub	fp, #12
1bb14     4C 13 BF FD | 	call	#_converttoint
1bb18     15 FB 61 FC | 	wrlong	result1, local03
1bb1c     1C 4E 05 F1 | 	add	fp, #28
1bb20     A7 2C 02 FB | 	rdlong	local04, fp
1bb24     01 2C 8E F1 | 	sub	local04, #1 wz
1bb28     A7 2C 62 FC | 	wrlong	local04, fp
1bb2c     1C 4E 85 F1 | 	sub	fp, #28
1bb30     A0 FF 9F 5D |  if_ne	jmp	#LR__2253
1bb34                 | LR__2254
1bb34                 | LR__2255
1bb34     18 4E 05 F1 | 	add	fp, #24
1bb38     A7 26 02 FB | 	rdlong	local01, fp
1bb3c     04 26 66 F0 | 	shl	local01, #4
1bb40     14 00 00 FF 
1bb44     F8 E5 05 F1 | 	add	objptr, ##10744
1bb48     F2 26 02 F1 | 	add	local01, objptr
1bb4c     04 26 06 F1 | 	add	local01, #4
1bb50     13 13 02 FB | 	rdlong	arg01, local01
1bb54     0C 4E 05 F1 | 	add	fp, #12
1bb58     A7 12 62 FC | 	wrlong	arg01, fp
1bb5c     24 4E 85 F1 | 	sub	fp, #36
1bb60     14 00 00 FF 
1bb64     F8 E5 85 F1 | 	sub	objptr, ##10744
1bb68     00 67 B0 FD | 	call	#_pslpeek
1bb6c     FD 2C 32 F9 | 	getword	local04, result1, #0
1bb70     28 4E 05 F1 | 	add	fp, #40
1bb74     A7 2C 62 FC | 	wrlong	local04, fp
1bb78     04 4E 85 F1 | 	sub	fp, #4
1bb7c     A7 12 02 FB | 	rdlong	arg01, fp
1bb80     24 4E 85 F1 | 	sub	fp, #36
1bb84     02 12 06 F1 | 	add	arg01, #2
1bb88     88 66 B0 FD | 	call	#_pspeek
1bb8c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1bb90     2C 4E 05 F1 | 	add	fp, #44
1bb94     A7 FA 61 FC | 	wrlong	result1, fp
1bb98                 | ' esize=pspeek(arrptr+2)
1bb98                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1bb98     08 4E 85 F1 | 	sub	fp, #8
1bb9c     A7 12 02 FB | 	rdlong	arg01, fp
1bba0     24 4E 85 F1 | 	sub	fp, #36
1bba4     04 12 06 F1 | 	add	arg01, #4
1bba8     C0 66 B0 FD | 	call	#_pslpeek
1bbac     FD 2C 02 F6 | 	mov	local04, result1
1bbb0     34 4E 05 F1 | 	add	fp, #52
1bbb4     A7 26 02 FB | 	rdlong	local01, fp
1bbb8     34 4E 85 F1 | 	sub	fp, #52
1bbbc     16 27 12 F2 | 	cmp	local01, local04 wc
1bbc0     54 00 90 3D |  if_ae	jmp	#LR__2256
1bbc4     24 4E 05 F1 | 	add	fp, #36
1bbc8     A7 12 02 FB | 	rdlong	arg01, fp
1bbcc     24 4E 85 F1 | 	sub	fp, #36
1bbd0     08 12 06 F1 | 	add	arg01, #8
1bbd4     94 66 B0 FD | 	call	#_pslpeek
1bbd8     FD 26 02 F6 | 	mov	local01, result1
1bbdc     38 4E 05 F1 | 	add	fp, #56
1bbe0     A7 2C 02 FB | 	rdlong	local04, fp
1bbe4     38 4E 85 F1 | 	sub	fp, #56
1bbe8     13 2D 12 F2 | 	cmp	local04, local01 wc
1bbec     28 00 90 3D |  if_ae	jmp	#LR__2256
1bbf0     24 4E 05 F1 | 	add	fp, #36
1bbf4     A7 12 02 FB | 	rdlong	arg01, fp
1bbf8     24 4E 85 F1 | 	sub	fp, #36
1bbfc     0C 12 06 F1 | 	add	arg01, #12
1bc00     68 66 B0 FD | 	call	#_pslpeek
1bc04     3C 4E 05 F1 | 	add	fp, #60
1bc08     A7 2C 02 FB | 	rdlong	local04, fp
1bc0c     3C 4E 85 F1 | 	sub	fp, #60
1bc10     FD 2C 12 F2 | 	cmp	local04, result1 wc
1bc14     10 00 90 CD |  if_b	jmp	#LR__2257
1bc18                 | LR__2256
1bc18     31 12 06 F6 | 	mov	arg01, #49
1bc1c     00 14 06 F6 | 	mov	arg02, #0
1bc20     78 63 B0 FD | 	call	#_printerror
1bc24     64 02 90 FD | 	jmp	#LR__2273
1bc28                 | LR__2257
1bc28     24 4E 05 F1 | 	add	fp, #36
1bc2c     A7 12 02 FB | 	rdlong	arg01, fp
1bc30     09 2D 02 F6 | 	mov	local04, arg01
1bc34     10 2C 06 F1 | 	add	local04, #16
1bc38     24 4E 85 F1 | 	sub	fp, #36
1bc3c     04 12 06 F1 | 	add	arg01, #4
1bc40     28 66 B0 FD | 	call	#_pslpeek
1bc44     FD 26 02 F6 | 	mov	local01, result1
1bc48     38 4E 05 F1 | 	add	fp, #56
1bc4c     A7 28 02 FB | 	rdlong	local02, fp
1bc50     14 27 02 FD | 	qmul	local01, local02
1bc54     04 4E 85 F1 | 	sub	fp, #4
1bc58     A7 2A 02 FB | 	rdlong	local03, fp
1bc5c     10 4E 85 F1 | 	sub	fp, #16
1bc60     A7 12 02 FB | 	rdlong	arg01, fp
1bc64     24 4E 85 F1 | 	sub	fp, #36
1bc68     08 12 06 F1 | 	add	arg01, #8
1bc6c     18 28 62 FD | 	getqx	local02
1bc70     14 2B 02 F1 | 	add	local03, local02
1bc74     F4 65 B0 FD | 	call	#_pslpeek
1bc78     FD 28 02 F6 | 	mov	local02, result1
1bc7c     24 4E 05 F1 | 	add	fp, #36
1bc80     A7 12 02 FB | 	rdlong	arg01, fp
1bc84     24 4E 85 F1 | 	sub	fp, #36
1bc88     04 12 06 F1 | 	add	arg01, #4
1bc8c     DC 65 B0 FD | 	call	#_pslpeek
1bc90     FD 28 02 FD | 	qmul	local02, result1
1bc94     3C 4E 05 F1 | 	add	fp, #60
1bc98     A7 28 02 FB | 	rdlong	local02, fp
1bc9c     18 26 62 FD | 	getqx	local01
1bca0     14 27 02 FD | 	qmul	local01, local02
1bca4     10 4E 85 F1 | 	sub	fp, #16
1bca8     A7 28 02 FB | 	rdlong	local02, fp
1bcac     18 26 62 FD | 	getqx	local01
1bcb0     13 2B 02 F1 | 	add	local03, local01
1bcb4     15 29 02 FD | 	qmul	local02, local03
1bcb8     04 4E 05 F1 | 	add	fp, #4
1bcbc                 | ' 
1bcbc                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1bcbc                 | ' select case arrtype
1bcbc     18 2A 62 FD | 	getqx	local03
1bcc0     15 2D 02 F1 | 	add	local04, local03
1bcc4     A7 2C 62 FC | 	wrlong	local04, fp
1bcc8     08 4E 85 F1 | 	sub	fp, #8
1bccc     A7 2E 02 FB | 	rdlong	local05, fp
1bcd0     28 4E 85 F1 | 	sub	fp, #40
1bcd4     00 2F 86 F1 | 	sub	local05, #256
1bcd8     0C 2E 26 F3 | 	fle	local05, #12
1bcdc     30 2E 62 FD | 	jmprel	local05
1bce0                 | LR__2258
1bce0     30 00 90 FD | 	jmp	#LR__2259
1bce4     58 00 90 FD | 	jmp	#LR__2260
1bce8     6C 00 90 FD | 	jmp	#LR__2261
1bcec     80 00 90 FD | 	jmp	#LR__2262
1bcf0     B0 00 90 FD | 	jmp	#LR__2263
1bcf4     E0 00 90 FD | 	jmp	#LR__2264
1bcf8     F4 00 90 FD | 	jmp	#LR__2265
1bcfc     08 01 90 FD | 	jmp	#LR__2266
1bd00     1C 01 90 FD | 	jmp	#LR__2267
1bd04     30 01 90 FD | 	jmp	#LR__2268
1bd08     44 01 90 FD | 	jmp	#LR__2269
1bd0c     58 01 90 FD | 	jmp	#LR__2270
1bd10     6C 01 90 FD | 	jmp	#LR__2271
1bd14                 | LR__2259
1bd14     A7 12 02 F6 | 	mov	arg01, fp
1bd18     30 4E 05 F1 | 	add	fp, #48
1bd1c     A7 14 02 FB | 	rdlong	arg02, fp
1bd20     30 4E 85 F1 | 	sub	fp, #48
1bd24     0C 16 06 F6 | 	mov	arg03, #12
1bd28     0B 00 00 FF 
1bd2c     CC E4 05 F1 | 	add	objptr, ##5836
1bd30     68 90 B0 FD | 	call	#_psram_spin2_write
1bd34     0B 00 00 FF 
1bd38     CC E4 85 F1 | 	sub	objptr, ##5836
1bd3c     4C 01 90 FD | 	jmp	#LR__2272
1bd40                 | LR__2260
1bd40     30 4E 05 F1 | 	add	fp, #48
1bd44     A7 12 02 FB | 	rdlong	arg01, fp
1bd48     30 4E 85 F1 | 	sub	fp, #48
1bd4c     A7 14 02 FB | 	rdlong	arg02, fp
1bd50     78 64 B0 FD | 	call	#_pspoke
1bd54     34 01 90 FD | 	jmp	#LR__2272
1bd58                 | LR__2261
1bd58     30 4E 05 F1 | 	add	fp, #48
1bd5c     A7 12 02 FB | 	rdlong	arg01, fp
1bd60     30 4E 85 F1 | 	sub	fp, #48
1bd64     A7 14 02 FB | 	rdlong	arg02, fp
1bd68     60 64 B0 FD | 	call	#_pspoke
1bd6c     1C 01 90 FD | 	jmp	#LR__2272
1bd70                 | LR__2262
1bd70     30 4E 05 F1 | 	add	fp, #48
1bd74     A7 12 02 FB | 	rdlong	arg01, fp
1bd78     30 4E 85 F1 | 	sub	fp, #48
1bd7c     A7 14 02 FB | 	rdlong	arg02, fp
1bd80     48 64 B0 FD | 	call	#_pspoke
1bd84     30 4E 05 F1 | 	add	fp, #48
1bd88     A7 12 02 FB | 	rdlong	arg01, fp
1bd8c     30 4E 85 F1 | 	sub	fp, #48
1bd90     01 12 06 F1 | 	add	arg01, #1
1bd94     A7 14 02 FB | 	rdlong	arg02, fp
1bd98     08 14 46 F0 | 	shr	arg02, #8
1bd9c     2C 64 B0 FD | 	call	#_pspoke
1bda0     E8 00 90 FD | 	jmp	#LR__2272
1bda4                 | LR__2263
1bda4     30 4E 05 F1 | 	add	fp, #48
1bda8     A7 12 02 FB | 	rdlong	arg01, fp
1bdac     30 4E 85 F1 | 	sub	fp, #48
1bdb0     A7 14 02 FB | 	rdlong	arg02, fp
1bdb4     14 64 B0 FD | 	call	#_pspoke
1bdb8     30 4E 05 F1 | 	add	fp, #48
1bdbc     A7 12 02 FB | 	rdlong	arg01, fp
1bdc0     30 4E 85 F1 | 	sub	fp, #48
1bdc4     01 12 06 F1 | 	add	arg01, #1
1bdc8     A7 14 02 FB | 	rdlong	arg02, fp
1bdcc     08 14 46 F0 | 	shr	arg02, #8
1bdd0     F8 63 B0 FD | 	call	#_pspoke
1bdd4     B4 00 90 FD | 	jmp	#LR__2272
1bdd8                 | LR__2264
1bdd8     30 4E 05 F1 | 	add	fp, #48
1bddc     A7 12 02 FB | 	rdlong	arg01, fp
1bde0     30 4E 85 F1 | 	sub	fp, #48
1bde4     A7 14 02 FB | 	rdlong	arg02, fp
1bde8     50 63 B0 FD | 	call	#_pslpoke
1bdec     9C 00 90 FD | 	jmp	#LR__2272
1bdf0                 | LR__2265
1bdf0     30 4E 05 F1 | 	add	fp, #48
1bdf4     A7 12 02 FB | 	rdlong	arg01, fp
1bdf8     30 4E 85 F1 | 	sub	fp, #48
1bdfc     A7 14 02 FB | 	rdlong	arg02, fp
1be00     38 63 B0 FD | 	call	#_pslpoke
1be04     84 00 90 FD | 	jmp	#LR__2272
1be08                 | LR__2266
1be08     30 4E 05 F1 | 	add	fp, #48
1be0c     A7 12 02 FB | 	rdlong	arg01, fp
1be10     30 4E 85 F1 | 	sub	fp, #48
1be14     A7 14 02 FB | 	rdlong	arg02, fp
1be18     20 63 B0 FD | 	call	#_pslpoke
1be1c     6C 00 90 FD | 	jmp	#LR__2272
1be20                 | LR__2267
1be20     30 4E 05 F1 | 	add	fp, #48
1be24     A7 12 02 FB | 	rdlong	arg01, fp
1be28     30 4E 85 F1 | 	sub	fp, #48
1be2c     A7 14 02 FB | 	rdlong	arg02, fp
1be30     08 63 B0 FD | 	call	#_pslpoke
1be34     54 00 90 FD | 	jmp	#LR__2272
1be38                 | LR__2268
1be38     30 4E 05 F1 | 	add	fp, #48
1be3c     A7 12 02 FB | 	rdlong	arg01, fp
1be40     30 4E 85 F1 | 	sub	fp, #48
1be44     A7 14 02 FB | 	rdlong	arg02, fp
1be48     F0 62 B0 FD | 	call	#_pslpoke
1be4c     3C 00 90 FD | 	jmp	#LR__2272
1be50                 | LR__2269
1be50     30 4E 05 F1 | 	add	fp, #48
1be54     A7 12 02 FB | 	rdlong	arg01, fp
1be58     30 4E 85 F1 | 	sub	fp, #48
1be5c     A7 14 02 FB | 	rdlong	arg02, fp
1be60     D8 62 B0 FD | 	call	#_pslpoke
1be64     24 00 90 FD | 	jmp	#LR__2272
1be68                 | LR__2270
1be68     30 4E 05 F1 | 	add	fp, #48
1be6c     A7 12 02 FB | 	rdlong	arg01, fp
1be70     30 4E 85 F1 | 	sub	fp, #48
1be74     A7 14 02 FB | 	rdlong	arg02, fp
1be78     C0 62 B0 FD | 	call	#_pslpoke
1be7c     0C 00 90 FD | 	jmp	#LR__2272
1be80                 | LR__2271
1be80     32 12 06 F6 | 	mov	arg01, #50
1be84     00 14 06 F6 | 	mov	arg02, #0
1be88     10 61 B0 FD | 	call	#_printerror
1be8c                 | LR__2272
1be8c                 | LR__2273
1be8c     A7 F0 03 F6 | 	mov	ptra, fp
1be90     B2 00 A0 FD | 	call	#popregs_
1be94                 | _do_assign_ret
1be94     2D 00 64 FD | 	ret
1be98                 | 
1be98                 | ' 
1be98                 | ' 
1be98                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1be98                 | ' 
1be98                 | ' sub do_getvar
1be98                 | _do_getvar
1be98     04 4A 05 F6 | 	mov	COUNT_, #4
1be9c     A8 00 A0 FD | 	call	#pushregs_
1bea0     3C F0 07 F1 | 	add	ptra, #60
1bea4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1bea4     4A 00 00 FF 
1bea8     80 E4 05 F1 | 	add	objptr, ##38016
1beac     F2 26 02 FB | 	rdlong	local01, objptr
1beb0     13 17 02 F6 | 	mov	arg03, local01
1beb4     01 16 66 F0 | 	shl	arg03, #1
1beb8     13 17 02 F1 | 	add	arg03, local01
1bebc     02 16 66 F0 | 	shl	arg03, #2
1bec0     03 00 00 FF 
1bec4     04 E4 85 F1 | 	sub	objptr, ##1540
1bec8     F2 16 02 F1 | 	add	arg03, objptr
1becc     04 16 06 F1 | 	add	arg03, #4
1bed0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1bed4     47 00 00 FF 
1bed8     7C E4 85 F1 | 	sub	objptr, ##36476
1bedc     C4 00 90 5D |  if_ne	jmp	#LR__2281
1bee0     4A 00 00 FF 
1bee4     80 E4 05 F1 | 	add	objptr, ##38016
1bee8     F2 26 02 FB | 	rdlong	local01, objptr
1beec     13 13 02 F6 | 	mov	arg01, local01
1bef0     01 12 66 F0 | 	shl	arg01, #1
1bef4     13 13 02 F1 | 	add	arg01, local01
1bef8     02 12 66 F0 | 	shl	arg01, #2
1befc     03 00 00 FF 
1bf00     04 E4 85 F1 | 	sub	objptr, ##1540
1bf04     F2 12 02 F1 | 	add	arg01, objptr
1bf08     09 27 02 FB | 	rdlong	local01, arg01
1bf0c     04 26 66 F0 | 	shl	local01, #4
1bf10     32 00 00 FF 
1bf14     84 E4 85 F1 | 	sub	objptr, ##25732
1bf18     F2 26 02 F1 | 	add	local01, objptr
1bf1c     04 26 06 F1 | 	add	local01, #4
1bf20     13 13 02 FB | 	rdlong	arg01, local01
1bf24     04 26 06 F1 | 	add	local01, #4
1bf28     13 27 02 FB | 	rdlong	local01, local01
1bf2c     A7 12 62 FC | 	wrlong	arg01, fp
1bf30     04 4E 05 F1 | 	add	fp, #4
1bf34     A7 26 62 FC | 	wrlong	local01, fp
1bf38     35 00 00 FF 
1bf3c     88 E4 05 F1 | 	add	objptr, ##27272
1bf40     F2 26 02 FB | 	rdlong	local01, objptr
1bf44     13 13 02 F6 | 	mov	arg01, local01
1bf48     01 12 66 F0 | 	shl	arg01, #1
1bf4c     13 13 02 F1 | 	add	arg01, local01
1bf50     02 12 66 F0 | 	shl	arg01, #2
1bf54     03 00 00 FF 
1bf58     04 E4 85 F1 | 	sub	objptr, ##1540
1bf5c     F2 12 02 F1 | 	add	arg01, objptr
1bf60     09 27 02 FB | 	rdlong	local01, arg01
1bf64     04 26 66 F0 | 	shl	local01, #4
1bf68     32 00 00 FF 
1bf6c     84 E4 85 F1 | 	sub	objptr, ##25732
1bf70     F2 26 02 F1 | 	add	local01, objptr
1bf74     0C 26 06 F1 | 	add	local01, #12
1bf78     13 27 02 FB | 	rdlong	local01, local01
1bf7c     04 4E 05 F1 | 	add	fp, #4
1bf80     A7 26 62 FC | 	wrlong	local01, fp
1bf84                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1bf84                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1bf84                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1bf84     08 4E 85 F1 | 	sub	fp, #8
1bf88     00 27 16 F2 | 	cmp	local01, #256 wc
1bf8c     14 00 00 FF 
1bf90     F8 E5 85 F1 | 	sub	objptr, ##10744
1bf94     0C 00 90 3D |  if_ae	jmp	#LR__2280
1bf98     A7 12 02 F6 | 	mov	arg01, fp
1bf9c     78 0D BF FD | 	call	#_push
1bfa0     A0 04 90 FD | 	jmp	#LR__2302
1bfa4                 | LR__2280
1bfa4                 | LR__2281
1bfa4     4A 00 00 FF 
1bfa8     80 E4 05 F1 | 	add	objptr, ##38016
1bfac     F2 16 02 FB | 	rdlong	arg03, objptr
1bfb0     0B 15 02 F6 | 	mov	arg02, arg03
1bfb4     01 14 66 F0 | 	shl	arg02, #1
1bfb8     0B 15 02 F1 | 	add	arg02, arg03
1bfbc     02 14 66 F0 | 	shl	arg02, #2
1bfc0     03 00 00 FF 
1bfc4     04 E4 85 F1 | 	sub	objptr, ##1540
1bfc8     F2 14 02 F1 | 	add	arg02, objptr
1bfcc     0A 17 02 FB | 	rdlong	arg03, arg02
1bfd0     04 16 66 F0 | 	shl	arg03, #4
1bfd4     32 00 00 FF 
1bfd8     84 E4 85 F1 | 	sub	objptr, ##25732
1bfdc     F2 16 02 F1 | 	add	arg03, objptr
1bfe0     04 16 06 F1 | 	add	arg03, #4
1bfe4     0B 13 02 FB | 	rdlong	arg01, arg03
1bfe8     0C 4E 05 F1 | 	add	fp, #12
1bfec     A7 12 62 FC | 	wrlong	arg01, fp
1bff0     0C 4E 85 F1 | 	sub	fp, #12
1bff4     14 00 00 FF 
1bff8     F8 E5 85 F1 | 	sub	objptr, ##10744
1bffc     6C 62 B0 FD | 	call	#_pslpeek
1c000     FD FA 31 F9 | 	getword	result1, result1, #0
1c004     10 4E 05 F1 | 	add	fp, #16
1c008     A7 FA 61 FC | 	wrlong	result1, fp
1c00c     4A 00 00 FF 
1c010     80 E4 05 F1 | 	add	objptr, ##38016
1c014     F2 16 02 FB | 	rdlong	arg03, objptr
1c018     0B 15 02 F6 | 	mov	arg02, arg03
1c01c     01 14 66 F0 | 	shl	arg02, #1
1c020     0B 15 02 F1 | 	add	arg02, arg03
1c024     02 14 66 F0 | 	shl	arg02, #2
1c028     03 00 00 FF 
1c02c     04 E4 85 F1 | 	sub	objptr, ##1540
1c030     F2 14 02 F1 | 	add	arg02, objptr
1c034     04 14 06 F1 | 	add	arg02, #4
1c038     0A 17 02 FB | 	rdlong	arg03, arg02
1c03c     04 4E 05 F1 | 	add	fp, #4
1c040     A7 16 62 FC | 	wrlong	arg03, fp
1c044     08 4E 85 F1 | 	sub	fp, #8
1c048     A7 12 02 FB | 	rdlong	arg01, fp
1c04c     0C 4E 85 F1 | 	sub	fp, #12
1c050     02 12 06 F1 | 	add	arg01, #2
1c054     47 00 00 FF 
1c058     7C E4 85 F1 | 	sub	objptr, ##36476
1c05c     B4 61 B0 FD | 	call	#_pspeek
1c060     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c064     18 4E 05 F1 | 	add	fp, #24
1c068     A7 FA 61 FC | 	wrlong	result1, fp
1c06c     0C 4E 85 F1 | 	sub	fp, #12
1c070     A7 12 02 FB | 	rdlong	arg01, fp
1c074     0C 4E 85 F1 | 	sub	fp, #12
1c078     04 12 06 F1 | 	add	arg01, #4
1c07c     EC 61 B0 FD | 	call	#_pslpeek
1c080     1C 4E 05 F1 | 	add	fp, #28
1c084     A7 FA 61 FC | 	wrlong	result1, fp
1c088     10 4E 85 F1 | 	sub	fp, #16
1c08c     A7 12 02 FB | 	rdlong	arg01, fp
1c090     0C 4E 85 F1 | 	sub	fp, #12
1c094     08 12 06 F1 | 	add	arg01, #8
1c098     D0 61 B0 FD | 	call	#_pslpeek
1c09c     20 4E 05 F1 | 	add	fp, #32
1c0a0     A7 FA 61 FC | 	wrlong	result1, fp
1c0a4     14 4E 85 F1 | 	sub	fp, #20
1c0a8     A7 12 02 FB | 	rdlong	arg01, fp
1c0ac     0C 4E 85 F1 | 	sub	fp, #12
1c0b0     0C 12 06 F1 | 	add	arg01, #12
1c0b4     B4 61 B0 FD | 	call	#_pslpeek
1c0b8     24 4E 05 F1 | 	add	fp, #36
1c0bc     A7 FA 61 FC | 	wrlong	result1, fp
1c0c0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1c0c0                 | ' esize=pspeek(arrptr+2)
1c0c0                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1c0c0                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1c0c0                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1c0c0                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1c0c0     10 4E 85 F1 | 	sub	fp, #16
1c0c4     A7 16 02 FB | 	rdlong	arg03, fp
1c0c8     14 4E 85 F1 | 	sub	fp, #20
1c0cc     03 16 16 F2 | 	cmp	arg03, #3 wc
1c0d0     38 00 90 CD |  if_b	jmp	#LR__2282
1c0d4     A8 0B BF FD | 	call	#_pop
1c0d8     FF 16 02 F6 | 	mov	arg03, result3
1c0dc     A7 FA 61 FC | 	wrlong	result1, fp
1c0e0     04 4E 05 F1 | 	add	fp, #4
1c0e4     A7 FC 61 FC | 	wrlong	result2, fp
1c0e8     04 4E 05 F1 | 	add	fp, #4
1c0ec     A7 16 62 FC | 	wrlong	arg03, fp
1c0f0     08 4E 85 F1 | 	sub	fp, #8
1c0f4     A7 12 02 F6 | 	mov	arg01, fp
1c0f8     68 0D BF FD | 	call	#_converttoint
1c0fc     30 4E 05 F1 | 	add	fp, #48
1c100     A7 FA 61 FC | 	wrlong	result1, fp
1c104     30 4E 85 F1 | 	sub	fp, #48
1c108     0C 00 90 FD | 	jmp	#LR__2283
1c10c                 | LR__2282
1c10c     30 4E 05 F1 | 	add	fp, #48
1c110     A7 00 68 FC | 	wrlong	#0, fp
1c114     30 4E 85 F1 | 	sub	fp, #48
1c118                 | LR__2283
1c118                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1c118     14 4E 05 F1 | 	add	fp, #20
1c11c     A7 16 02 FB | 	rdlong	arg03, fp
1c120     14 4E 85 F1 | 	sub	fp, #20
1c124     02 16 16 F2 | 	cmp	arg03, #2 wc
1c128     38 00 90 CD |  if_b	jmp	#LR__2284
1c12c     50 0B BF FD | 	call	#_pop
1c130     FF 16 02 F6 | 	mov	arg03, result3
1c134     A7 FA 61 FC | 	wrlong	result1, fp
1c138     04 4E 05 F1 | 	add	fp, #4
1c13c     A7 FC 61 FC | 	wrlong	result2, fp
1c140     04 4E 05 F1 | 	add	fp, #4
1c144     A7 16 62 FC | 	wrlong	arg03, fp
1c148     08 4E 85 F1 | 	sub	fp, #8
1c14c     A7 12 02 F6 | 	mov	arg01, fp
1c150     10 0D BF FD | 	call	#_converttoint
1c154     2C 4E 05 F1 | 	add	fp, #44
1c158     A7 FA 61 FC | 	wrlong	result1, fp
1c15c     2C 4E 85 F1 | 	sub	fp, #44
1c160     0C 00 90 FD | 	jmp	#LR__2285
1c164                 | LR__2284
1c164     2C 4E 05 F1 | 	add	fp, #44
1c168     A7 00 68 FC | 	wrlong	#0, fp
1c16c     2C 4E 85 F1 | 	sub	fp, #44
1c170                 | LR__2285
1c170                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1c170     14 4E 05 F1 | 	add	fp, #20
1c174     A7 16 02 FB | 	rdlong	arg03, fp
1c178     14 4E 85 F1 | 	sub	fp, #20
1c17c     01 16 16 F2 | 	cmp	arg03, #1 wc
1c180     38 00 90 CD |  if_b	jmp	#LR__2286
1c184     F8 0A BF FD | 	call	#_pop
1c188     FF 16 02 F6 | 	mov	arg03, result3
1c18c     A7 FA 61 FC | 	wrlong	result1, fp
1c190     04 4E 05 F1 | 	add	fp, #4
1c194     A7 FC 61 FC | 	wrlong	result2, fp
1c198     04 4E 05 F1 | 	add	fp, #4
1c19c     A7 16 62 FC | 	wrlong	arg03, fp
1c1a0     08 4E 85 F1 | 	sub	fp, #8
1c1a4     A7 12 02 F6 | 	mov	arg01, fp
1c1a8     B8 0C BF FD | 	call	#_converttoint
1c1ac     28 4E 05 F1 | 	add	fp, #40
1c1b0     A7 FA 61 FC | 	wrlong	result1, fp
1c1b4     28 4E 85 F1 | 	sub	fp, #40
1c1b8     0C 00 90 FD | 	jmp	#LR__2287
1c1bc                 | LR__2286
1c1bc     28 4E 05 F1 | 	add	fp, #40
1c1c0     A7 00 68 FC | 	wrlong	#0, fp
1c1c4     28 4E 85 F1 | 	sub	fp, #40
1c1c8                 | LR__2287
1c1c8     0C 4E 05 F1 | 	add	fp, #12
1c1cc     A7 28 02 FB | 	rdlong	local02, fp
1c1d0     1C 4E 05 F1 | 	add	fp, #28
1c1d4     A7 2A 02 FB | 	rdlong	local03, fp
1c1d8     04 4E 05 F1 | 	add	fp, #4
1c1dc     A7 FC 01 FB | 	rdlong	result2, fp
1c1e0     10 4E 85 F1 | 	sub	fp, #16
1c1e4     A7 FE 01 FB | 	rdlong	result3, fp
1c1e8     FF FC 01 FD | 	qmul	result2, result3
1c1ec     10 28 06 F1 | 	add	local02, #16
1c1f0     14 4E 05 F1 | 	add	fp, #20
1c1f4     A7 FC 01 FB | 	rdlong	result2, fp
1c1f8     18 FA 61 FD | 	getqx	result1
1c1fc     FF FC 01 FD | 	qmul	result2, result3
1c200     FD 2A 02 F1 | 	add	local03, result1
1c204     10 4E 85 F1 | 	sub	fp, #16
1c208     A7 FE 01 FB | 	rdlong	result3, fp
1c20c     18 FC 61 FD | 	getqx	result2
1c210     FF FC 01 FD | 	qmul	result2, result3
1c214     08 4E 85 F1 | 	sub	fp, #8
1c218     A7 FE 01 FB | 	rdlong	result3, fp
1c21c     18 FC 61 FD | 	getqx	result2
1c220     FE 2A 02 F1 | 	add	local03, result2
1c224     FF 2A 02 FD | 	qmul	local03, result3
1c228     1C 4E 05 F1 | 	add	fp, #28
1c22c                 | ' 
1c22c                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1c22c                 | ' 
1c22c                 | ' select case vartype
1c22c     18 FC 61 FD | 	getqx	result2
1c230     FE 28 02 F1 | 	add	local02, result2
1c234     A7 28 62 FC | 	wrlong	local02, fp
1c238     24 4E 85 F1 | 	sub	fp, #36
1c23c     A7 2C 02 FB | 	rdlong	local04, fp
1c240     10 4E 85 F1 | 	sub	fp, #16
1c244     00 2D 86 F1 | 	sub	local04, #256
1c248     0C 2C 26 F3 | 	fle	local04, #12
1c24c     30 2C 62 FD | 	jmprel	local04
1c250                 | LR__2288
1c250     30 00 90 FD | 	jmp	#LR__2289
1c254     58 00 90 FD | 	jmp	#LR__2290
1c258     8C 00 90 FD | 	jmp	#LR__2291
1c25c     AC 00 90 FD | 	jmp	#LR__2292
1c260     E8 00 90 FD | 	jmp	#LR__2293
1c264     08 01 90 FD | 	jmp	#LR__2294
1c268     24 01 90 FD | 	jmp	#LR__2295
1c26c     40 01 90 FD | 	jmp	#LR__2296
1c270     50 01 90 FD | 	jmp	#LR__2297
1c274     60 01 90 FD | 	jmp	#LR__2298
1c278     7C 01 90 FD | 	jmp	#LR__2299
1c27c     8C 01 90 FD | 	jmp	#LR__2300
1c280     B8 01 90 FD | 	jmp	#LR__2301
1c284                 | LR__2289
1c284     A7 12 02 F6 | 	mov	arg01, fp
1c288     34 4E 05 F1 | 	add	fp, #52
1c28c     A7 14 02 FB | 	rdlong	arg02, fp
1c290     34 4E 85 F1 | 	sub	fp, #52
1c294     0C 16 06 F6 | 	mov	arg03, #12
1c298     0B 00 00 FF 
1c29c     CC E4 05 F1 | 	add	objptr, ##5836
1c2a0     5C 8A B0 FD | 	call	#_psram_spin2_read1
1c2a4     0B 00 00 FF 
1c2a8     CC E4 85 F1 | 	sub	objptr, ##5836
1c2ac     8C 01 90 FD | 	jmp	#LR__2301
1c2b0                 | LR__2290
1c2b0     08 4E 05 F1 | 	add	fp, #8
1c2b4     A7 38 68 FC | 	wrlong	#28, fp
1c2b8     2C 4E 05 F1 | 	add	fp, #44
1c2bc     A7 12 02 FB | 	rdlong	arg01, fp
1c2c0     34 4E 85 F1 | 	sub	fp, #52
1c2c4     4C 5F B0 FD | 	call	#_pspeek
1c2c8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c2cc     A7 FA 61 FC | 	wrlong	result1, fp
1c2d0     80 FA 15 F2 | 	cmp	result1, #128 wc
1c2d4     00 27 66 36 |  if_ae	neg	local01, #256
1c2d8     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1c2dc     15 27 42 35 |  if_ae	or	local01, local03
1c2e0     A7 26 62 3C |  if_ae	wrlong	local01, fp
1c2e4     54 01 90 FD | 	jmp	#LR__2301
1c2e8                 | LR__2291
1c2e8     08 4E 05 F1 | 	add	fp, #8
1c2ec     A7 3A 68 FC | 	wrlong	#29, fp
1c2f0     2C 4E 05 F1 | 	add	fp, #44
1c2f4     A7 12 02 FB | 	rdlong	arg01, fp
1c2f8     34 4E 85 F1 | 	sub	fp, #52
1c2fc     14 5F B0 FD | 	call	#_pspeek
1c300     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c304     A7 FA 61 FC | 	wrlong	result1, fp
1c308     30 01 90 FD | 	jmp	#LR__2301
1c30c                 | LR__2292
1c30c     08 4E 05 F1 | 	add	fp, #8
1c310     A7 38 68 FC | 	wrlong	#28, fp
1c314     2C 4E 05 F1 | 	add	fp, #44
1c318     A7 12 02 FB | 	rdlong	arg01, fp
1c31c     34 4E 85 F1 | 	sub	fp, #52
1c320     48 5F B0 FD | 	call	#_pslpeek
1c324     FD FA 31 F9 | 	getword	result1, result1, #0
1c328     A7 FA 61 FC | 	wrlong	result1, fp
1c32c     40 00 00 FF 
1c330     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1c334     FF 7F 00 3F 
1c338     00 27 06 36 |  if_ae	mov	local01, ##16776960
1c33c     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1c340     15 27 42 35 |  if_ae	or	local01, local03
1c344     A7 26 62 3C |  if_ae	wrlong	local01, fp
1c348     F0 00 90 FD | 	jmp	#LR__2301
1c34c                 | LR__2293
1c34c     08 4E 05 F1 | 	add	fp, #8
1c350     A7 3A 68 FC | 	wrlong	#29, fp
1c354     2C 4E 05 F1 | 	add	fp, #44
1c358     A7 12 02 FB | 	rdlong	arg01, fp
1c35c     34 4E 85 F1 | 	sub	fp, #52
1c360     08 5F B0 FD | 	call	#_pslpeek
1c364     FD FA 31 F9 | 	getword	result1, result1, #0
1c368     A7 FA 61 FC | 	wrlong	result1, fp
1c36c     CC 00 90 FD | 	jmp	#LR__2301
1c370                 | LR__2294
1c370     08 4E 05 F1 | 	add	fp, #8
1c374     A7 38 68 FC | 	wrlong	#28, fp
1c378     2C 4E 05 F1 | 	add	fp, #44
1c37c     A7 12 02 FB | 	rdlong	arg01, fp
1c380     34 4E 85 F1 | 	sub	fp, #52
1c384     E4 5E B0 FD | 	call	#_pslpeek
1c388     A7 FA 61 FC | 	wrlong	result1, fp
1c38c     AC 00 90 FD | 	jmp	#LR__2301
1c390                 | LR__2295
1c390     08 4E 05 F1 | 	add	fp, #8
1c394     A7 3A 68 FC | 	wrlong	#29, fp
1c398     2C 4E 05 F1 | 	add	fp, #44
1c39c     A7 12 02 FB | 	rdlong	arg01, fp
1c3a0     34 4E 85 F1 | 	sub	fp, #52
1c3a4     C4 5E B0 FD | 	call	#_pslpeek
1c3a8     A7 FA 61 FC | 	wrlong	result1, fp
1c3ac     8C 00 90 FD | 	jmp	#LR__2301
1c3b0                 | LR__2296
1c3b0     08 4E 05 F1 | 	add	fp, #8
1c3b4     A7 FE 69 FC | 	wrlong	#255, fp
1c3b8     08 4E 85 F1 | 	sub	fp, #8
1c3bc     A7 60 68 FC | 	wrlong	#48, fp
1c3c0     78 00 90 FD | 	jmp	#LR__2301
1c3c4                 | LR__2297
1c3c4     08 4E 05 F1 | 	add	fp, #8
1c3c8     A7 FE 69 FC | 	wrlong	#255, fp
1c3cc     08 4E 85 F1 | 	sub	fp, #8
1c3d0     A7 60 68 FC | 	wrlong	#48, fp
1c3d4     64 00 90 FD | 	jmp	#LR__2301
1c3d8                 | LR__2298
1c3d8     08 4E 05 F1 | 	add	fp, #8
1c3dc     A7 3C 68 FC | 	wrlong	#30, fp
1c3e0     2C 4E 05 F1 | 	add	fp, #44
1c3e4     A7 12 02 FB | 	rdlong	arg01, fp
1c3e8     34 4E 85 F1 | 	sub	fp, #52
1c3ec     7C 5E B0 FD | 	call	#_pslpeek
1c3f0     A7 FA 61 FC | 	wrlong	result1, fp
1c3f4     44 00 90 FD | 	jmp	#LR__2301
1c3f8                 | LR__2299
1c3f8     08 4E 05 F1 | 	add	fp, #8
1c3fc     A7 FE 69 FC | 	wrlong	#255, fp
1c400     08 4E 85 F1 | 	sub	fp, #8
1c404     A7 60 68 FC | 	wrlong	#48, fp
1c408     30 00 90 FD | 	jmp	#LR__2301
1c40c                 | LR__2300
1c40c     08 4E 05 F1 | 	add	fp, #8
1c410     A7 3E 68 FC | 	wrlong	#31, fp
1c414     2C 4E 05 F1 | 	add	fp, #44
1c418     A7 12 02 FB | 	rdlong	arg01, fp
1c41c     34 4E 85 F1 | 	sub	fp, #52
1c420     48 5E B0 FD | 	call	#_pslpeek
1c424     A7 FA 61 FC | 	wrlong	result1, fp
1c428     00 04 00 FF 
1c42c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1c430     08 4E 05 31 |  if_ae	add	fp, #8
1c434     A7 56 68 3C |  if_ae	wrlong	#43, fp
1c438     08 4E 85 31 |  if_ae	sub	fp, #8
1c43c                 | LR__2301
1c43c     A7 12 02 F6 | 	mov	arg01, fp
1c440     D4 08 BF FD | 	call	#_push
1c444                 | LR__2302
1c444     A7 F0 03 F6 | 	mov	ptra, fp
1c448     B2 00 A0 FD | 	call	#popregs_
1c44c                 | _do_getvar_ret
1c44c     2D 00 64 FD | 	ret
1c450                 | 
1c450                 | ' 
1c450                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1c450                 | ' 
1c450                 | ' sub do_getaddr
1c450                 | _do_getaddr
1c450     01 4A 05 F6 | 	mov	COUNT_, #1
1c454     A8 00 A0 FD | 	call	#pushregs_
1c458     38 F0 07 F1 | 	add	ptra, #56
1c45c                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1c45c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1c45c     4A 00 00 FF 
1c460     80 E4 05 F1 | 	add	objptr, ##38016
1c464     F2 12 02 FB | 	rdlong	arg01, objptr
1c468     09 FD 01 F6 | 	mov	result2, arg01
1c46c     01 FC 65 F0 | 	shl	result2, #1
1c470     09 FD 01 F1 | 	add	result2, arg01
1c474     02 FC 65 F0 | 	shl	result2, #2
1c478     03 00 00 FF 
1c47c     04 E4 85 F1 | 	sub	objptr, ##1540
1c480     F2 FC 01 F1 | 	add	result2, objptr
1c484     04 FC 05 F1 | 	add	result2, #4
1c488     FE FC 09 FB | 	rdlong	result2, result2 wz
1c48c     47 00 00 FF 
1c490     7C E4 85 F1 | 	sub	objptr, ##36476
1c494     10 01 90 5D |  if_ne	jmp	#LR__2310
1c498     4A 00 00 FF 
1c49c     80 E4 05 F1 | 	add	objptr, ##38016
1c4a0     F2 12 02 FB | 	rdlong	arg01, objptr
1c4a4     09 FD 01 F6 | 	mov	result2, arg01
1c4a8     01 FC 65 F0 | 	shl	result2, #1
1c4ac     09 FD 01 F1 | 	add	result2, arg01
1c4b0     02 FC 65 F0 | 	shl	result2, #2
1c4b4     03 00 00 FF 
1c4b8     04 E4 85 F1 | 	sub	objptr, ##1540
1c4bc     F2 FC 01 F1 | 	add	result2, objptr
1c4c0     FE 12 02 FB | 	rdlong	arg01, result2
1c4c4     04 12 66 F0 | 	shl	arg01, #4
1c4c8     32 00 00 FF 
1c4cc     84 E4 85 F1 | 	sub	objptr, ##25732
1c4d0     F2 12 02 F1 | 	add	arg01, objptr
1c4d4     0C 12 06 F1 | 	add	arg01, #12
1c4d8     09 13 02 FB | 	rdlong	arg01, arg01
1c4dc     08 4E 05 F1 | 	add	fp, #8
1c4e0     A7 12 62 FC | 	wrlong	arg01, fp
1c4e4                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1c4e4                 | '    if t1.result_type>=array_no_type then goto 2200
1c4e4     08 4E 85 F1 | 	sub	fp, #8
1c4e8     00 13 16 F2 | 	cmp	arg01, #256 wc
1c4ec     14 00 00 FF 
1c4f0     F8 E5 85 F1 | 	sub	objptr, ##10744
1c4f4     B0 00 90 3D |  if_ae	jmp	#LR__2311
1c4f8     4A 00 00 FF 
1c4fc     80 E4 05 F1 | 	add	objptr, ##38016
1c500     F2 12 02 FB | 	rdlong	arg01, objptr
1c504     09 FF 01 F6 | 	mov	result3, arg01
1c508     01 FE 65 F0 | 	shl	result3, #1
1c50c     09 FF 01 F1 | 	add	result3, arg01
1c510     02 FE 65 F0 | 	shl	result3, #2
1c514     03 00 00 FF 
1c518     04 E4 85 F1 | 	sub	objptr, ##1540
1c51c     F2 FE 01 F1 | 	add	result3, objptr
1c520     FF FA 01 FB | 	rdlong	result1, result3
1c524     04 FA 65 F0 | 	shl	result1, #4
1c528     32 00 00 FF 
1c52c     84 E4 85 F1 | 	sub	objptr, ##25732
1c530     F2 FA 01 F1 | 	add	result1, objptr
1c534     04 FA 05 F1 | 	add	result1, #4
1c538     A7 FA 61 FC | 	wrlong	result1, fp
1c53c     35 00 00 FF 
1c540     88 E4 05 F1 | 	add	objptr, ##27272
1c544     F2 FE 01 FB | 	rdlong	result3, objptr
1c548     FF 12 02 F6 | 	mov	arg01, result3
1c54c     01 12 66 F0 | 	shl	arg01, #1
1c550     FF 12 02 F1 | 	add	arg01, result3
1c554     02 12 66 F0 | 	shl	arg01, #2
1c558     03 00 00 FF 
1c55c     04 E4 85 F1 | 	sub	objptr, ##1540
1c560     F2 12 02 F1 | 	add	arg01, objptr
1c564     09 13 02 FB | 	rdlong	arg01, arg01
1c568     04 12 66 F0 | 	shl	arg01, #4
1c56c     32 00 00 FF 
1c570     84 E4 85 F1 | 	sub	objptr, ##25732
1c574     F2 12 02 F1 | 	add	arg01, objptr
1c578     0C 12 06 F1 | 	add	arg01, #12
1c57c     09 13 02 FB | 	rdlong	arg01, arg01
1c580     04 4E 05 F1 | 	add	fp, #4
1c584     A7 12 62 FC | 	wrlong	arg01, fp
1c588     04 4E 05 F1 | 	add	fp, #4
1c58c     A7 3A 68 FC | 	wrlong	#29, fp
1c590     08 4E 85 F1 | 	sub	fp, #8
1c594     A7 12 02 F6 | 	mov	arg01, fp
1c598     14 00 00 FF 
1c59c     F8 E5 85 F1 | 	sub	objptr, ##10744
1c5a0     74 07 BF FD | 	call	#_push
1c5a4                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1c5a4                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1c5a4                 | '   t1.result_type=result_uint
1c5a4                 | '   push t1 : return
1c5a4     2C 03 90 FD | 	jmp	#LR__2320
1c5a8                 | LR__2310
1c5a8                 | LR__2311
1c5a8     4A 00 00 FF 
1c5ac     80 E4 05 F1 | 	add	objptr, ##38016
1c5b0     F2 FE 01 FB | 	rdlong	result3, objptr
1c5b4     FF FC 01 F6 | 	mov	result2, result3
1c5b8     01 FC 65 F0 | 	shl	result2, #1
1c5bc     FF FC 01 F1 | 	add	result2, result3
1c5c0     02 FC 65 F0 | 	shl	result2, #2
1c5c4     03 00 00 FF 
1c5c8     04 E4 85 F1 | 	sub	objptr, ##1540
1c5cc     F2 FC 01 F1 | 	add	result2, objptr
1c5d0     FE FE 01 FB | 	rdlong	result3, result2
1c5d4     04 FE 65 F0 | 	shl	result3, #4
1c5d8     32 00 00 FF 
1c5dc     84 E4 85 F1 | 	sub	objptr, ##25732
1c5e0     F2 FE 01 F1 | 	add	result3, objptr
1c5e4     04 FE 05 F1 | 	add	result3, #4
1c5e8     FF FE 01 FB | 	rdlong	result3, result3
1c5ec     0C 4E 05 F1 | 	add	fp, #12
1c5f0     A7 FE 61 FC | 	wrlong	result3, fp
1c5f4     35 00 00 FF 
1c5f8     88 E4 05 F1 | 	add	objptr, ##27272
1c5fc     F2 FE 01 FB | 	rdlong	result3, objptr
1c600     FF 12 02 F6 | 	mov	arg01, result3
1c604     01 12 66 F0 | 	shl	arg01, #1
1c608     FF 12 02 F1 | 	add	arg01, result3
1c60c     02 12 66 F0 | 	shl	arg01, #2
1c610     03 00 00 FF 
1c614     04 E4 85 F1 | 	sub	objptr, ##1540
1c618     F2 12 02 F1 | 	add	arg01, objptr
1c61c     09 13 02 FB | 	rdlong	arg01, arg01
1c620     04 12 66 F0 | 	shl	arg01, #4
1c624     32 00 00 FF 
1c628     84 E4 85 F1 | 	sub	objptr, ##25732
1c62c     F2 12 02 F1 | 	add	arg01, objptr
1c630     0C 12 06 F1 | 	add	arg01, #12
1c634     09 13 02 FB | 	rdlong	arg01, arg01
1c638     08 4E 85 F1 | 	sub	fp, #8
1c63c     A7 12 62 FC | 	wrlong	arg01, fp
1c640     08 4E 05 F1 | 	add	fp, #8
1c644     A7 12 02 FB | 	rdlong	arg01, fp
1c648     0C 4E 85 F1 | 	sub	fp, #12
1c64c     14 00 00 FF 
1c650     F8 E5 85 F1 | 	sub	objptr, ##10744
1c654     14 5C B0 FD | 	call	#_pslpeek
1c658     FD FA 31 F9 | 	getword	result1, result1, #0
1c65c     10 4E 05 F1 | 	add	fp, #16
1c660     A7 FA 61 FC | 	wrlong	result1, fp
1c664     4A 00 00 FF 
1c668     80 E4 05 F1 | 	add	objptr, ##38016
1c66c     F2 FE 01 FB | 	rdlong	result3, objptr
1c670     FF 12 02 F6 | 	mov	arg01, result3
1c674     01 12 66 F0 | 	shl	arg01, #1
1c678     FF 12 02 F1 | 	add	arg01, result3
1c67c     02 12 66 F0 | 	shl	arg01, #2
1c680     03 00 00 FF 
1c684     04 E4 85 F1 | 	sub	objptr, ##1540
1c688     F2 12 02 F1 | 	add	arg01, objptr
1c68c     04 12 06 F1 | 	add	arg01, #4
1c690     09 13 02 FB | 	rdlong	arg01, arg01
1c694     04 4E 05 F1 | 	add	fp, #4
1c698     A7 12 62 FC | 	wrlong	arg01, fp
1c69c     08 4E 85 F1 | 	sub	fp, #8
1c6a0     A7 12 02 FB | 	rdlong	arg01, fp
1c6a4     0C 4E 85 F1 | 	sub	fp, #12
1c6a8     02 12 06 F1 | 	add	arg01, #2
1c6ac     47 00 00 FF 
1c6b0     7C E4 85 F1 | 	sub	objptr, ##36476
1c6b4     5C 5B B0 FD | 	call	#_pspeek
1c6b8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c6bc     18 4E 05 F1 | 	add	fp, #24
1c6c0     A7 FA 61 FC | 	wrlong	result1, fp
1c6c4     0C 4E 85 F1 | 	sub	fp, #12
1c6c8     A7 12 02 FB | 	rdlong	arg01, fp
1c6cc     0C 4E 85 F1 | 	sub	fp, #12
1c6d0     04 12 06 F1 | 	add	arg01, #4
1c6d4     94 5B B0 FD | 	call	#_pslpeek
1c6d8     1C 4E 05 F1 | 	add	fp, #28
1c6dc     A7 FA 61 FC | 	wrlong	result1, fp
1c6e0     10 4E 85 F1 | 	sub	fp, #16
1c6e4     A7 12 02 FB | 	rdlong	arg01, fp
1c6e8     0C 4E 85 F1 | 	sub	fp, #12
1c6ec     08 12 06 F1 | 	add	arg01, #8
1c6f0     78 5B B0 FD | 	call	#_pslpeek
1c6f4     20 4E 05 F1 | 	add	fp, #32
1c6f8     A7 FA 61 FC | 	wrlong	result1, fp
1c6fc     14 4E 85 F1 | 	sub	fp, #20
1c700     A7 12 02 FB | 	rdlong	arg01, fp
1c704     0C 4E 85 F1 | 	sub	fp, #12
1c708     0C 12 06 F1 | 	add	arg01, #12
1c70c     5C 5B B0 FD | 	call	#_pslpeek
1c710     24 4E 05 F1 | 	add	fp, #36
1c714     A7 FA 61 FC | 	wrlong	result1, fp
1c718                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1c718                 | ' esize=pspeek(arrptr+2)
1c718                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1c718                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1c718                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1c718                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1c718     10 4E 85 F1 | 	sub	fp, #16
1c71c     A7 12 02 FB | 	rdlong	arg01, fp
1c720     14 4E 85 F1 | 	sub	fp, #20
1c724     03 12 16 F2 | 	cmp	arg01, #3 wc
1c728     34 00 90 CD |  if_b	jmp	#LR__2312
1c72c     50 05 BF FD | 	call	#_pop
1c730     A7 FA 61 FC | 	wrlong	result1, fp
1c734     04 4E 05 F1 | 	add	fp, #4
1c738     A7 FC 61 FC | 	wrlong	result2, fp
1c73c     04 4E 05 F1 | 	add	fp, #4
1c740     A7 FE 61 FC | 	wrlong	result3, fp
1c744     08 4E 85 F1 | 	sub	fp, #8
1c748     A7 12 02 F6 | 	mov	arg01, fp
1c74c     14 07 BF FD | 	call	#_converttoint
1c750     30 4E 05 F1 | 	add	fp, #48
1c754     A7 FA 61 FC | 	wrlong	result1, fp
1c758     30 4E 85 F1 | 	sub	fp, #48
1c75c     0C 00 90 FD | 	jmp	#LR__2313
1c760                 | LR__2312
1c760     30 4E 05 F1 | 	add	fp, #48
1c764     A7 00 68 FC | 	wrlong	#0, fp
1c768     30 4E 85 F1 | 	sub	fp, #48
1c76c                 | LR__2313
1c76c                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1c76c     14 4E 05 F1 | 	add	fp, #20
1c770     A7 12 02 FB | 	rdlong	arg01, fp
1c774     14 4E 85 F1 | 	sub	fp, #20
1c778     02 12 16 F2 | 	cmp	arg01, #2 wc
1c77c     34 00 90 CD |  if_b	jmp	#LR__2314
1c780     FC 04 BF FD | 	call	#_pop
1c784     A7 FA 61 FC | 	wrlong	result1, fp
1c788     04 4E 05 F1 | 	add	fp, #4
1c78c     A7 FC 61 FC | 	wrlong	result2, fp
1c790     04 4E 05 F1 | 	add	fp, #4
1c794     A7 FE 61 FC | 	wrlong	result3, fp
1c798     08 4E 85 F1 | 	sub	fp, #8
1c79c     A7 12 02 F6 | 	mov	arg01, fp
1c7a0     C0 06 BF FD | 	call	#_converttoint
1c7a4     2C 4E 05 F1 | 	add	fp, #44
1c7a8     A7 FA 61 FC | 	wrlong	result1, fp
1c7ac     2C 4E 85 F1 | 	sub	fp, #44
1c7b0     0C 00 90 FD | 	jmp	#LR__2315
1c7b4                 | LR__2314
1c7b4     2C 4E 05 F1 | 	add	fp, #44
1c7b8     A7 00 68 FC | 	wrlong	#0, fp
1c7bc     2C 4E 85 F1 | 	sub	fp, #44
1c7c0                 | LR__2315
1c7c0                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1c7c0     14 4E 05 F1 | 	add	fp, #20
1c7c4     A7 12 02 FB | 	rdlong	arg01, fp
1c7c8     14 4E 85 F1 | 	sub	fp, #20
1c7cc     01 12 16 F2 | 	cmp	arg01, #1 wc
1c7d0     34 00 90 CD |  if_b	jmp	#LR__2316
1c7d4     A8 04 BF FD | 	call	#_pop
1c7d8     A7 FA 61 FC | 	wrlong	result1, fp
1c7dc     04 4E 05 F1 | 	add	fp, #4
1c7e0     A7 FC 61 FC | 	wrlong	result2, fp
1c7e4     04 4E 05 F1 | 	add	fp, #4
1c7e8     A7 FE 61 FC | 	wrlong	result3, fp
1c7ec     08 4E 85 F1 | 	sub	fp, #8
1c7f0     A7 12 02 F6 | 	mov	arg01, fp
1c7f4     6C 06 BF FD | 	call	#_converttoint
1c7f8     28 4E 05 F1 | 	add	fp, #40
1c7fc     A7 FA 61 FC | 	wrlong	result1, fp
1c800     28 4E 85 F1 | 	sub	fp, #40
1c804     0C 00 90 FD | 	jmp	#LR__2317
1c808                 | LR__2316
1c808     28 4E 05 F1 | 	add	fp, #40
1c80c     A7 00 68 FC | 	wrlong	#0, fp
1c810     28 4E 85 F1 | 	sub	fp, #40
1c814                 | LR__2317
1c814                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1c814                 | ' if numpar>0 then
1c814     14 4E 05 F1 | 	add	fp, #20
1c818     A7 FE 01 FB | 	rdlong	result3, fp
1c81c     14 4E 85 F1 | 	sub	fp, #20
1c820     01 FE 15 F2 | 	cmp	result3, #1 wc
1c824     8C 00 90 CD |  if_b	jmp	#LR__2318
1c828     0C 4E 05 F1 | 	add	fp, #12
1c82c     A7 FC 01 FB | 	rdlong	result2, fp
1c830     1C 4E 05 F1 | 	add	fp, #28
1c834     A7 FE 01 FB | 	rdlong	result3, fp
1c838     04 4E 05 F1 | 	add	fp, #4
1c83c     A7 12 02 FB | 	rdlong	arg01, fp
1c840     10 4E 85 F1 | 	sub	fp, #16
1c844     A7 FA 01 FB | 	rdlong	result1, fp
1c848     FD 12 02 FD | 	qmul	arg01, result1
1c84c     10 FC 05 F1 | 	add	result2, #16
1c850     14 4E 05 F1 | 	add	fp, #20
1c854     A7 26 02 FB | 	rdlong	local01, fp
1c858     18 12 62 FD | 	getqx	arg01
1c85c     FD 26 02 FD | 	qmul	local01, result1
1c860     09 FF 01 F1 | 	add	result3, arg01
1c864     10 4E 85 F1 | 	sub	fp, #16
1c868     A7 26 02 FB | 	rdlong	local01, fp
1c86c     18 FA 61 FD | 	getqx	result1
1c870     13 FB 01 FD | 	qmul	result1, local01
1c874     08 4E 85 F1 | 	sub	fp, #8
1c878     A7 26 02 FB | 	rdlong	local01, fp
1c87c     18 FA 61 FD | 	getqx	result1
1c880     FD FE 01 F1 | 	add	result3, result1
1c884     13 FF 01 FD | 	qmul	result3, local01
1c888     1C 4E 05 F1 | 	add	fp, #28
1c88c     18 26 62 FD | 	getqx	local01
1c890     13 FD 01 F1 | 	add	result2, local01
1c894     A7 FC 61 FC | 	wrlong	result2, fp
1c898     2C 4E 85 F1 | 	sub	fp, #44
1c89c     A7 3A 68 FC | 	wrlong	#29, fp
1c8a0     2C 4E 05 F1 | 	add	fp, #44
1c8a4     A7 26 02 FB | 	rdlong	local01, fp
1c8a8     34 4E 85 F1 | 	sub	fp, #52
1c8ac     A7 26 62 FC | 	wrlong	local01, fp
1c8b0     18 00 90 FD | 	jmp	#LR__2319
1c8b4                 | LR__2318
1c8b4     08 4E 05 F1 | 	add	fp, #8
1c8b8     A7 3A 68 FC | 	wrlong	#29, fp
1c8bc     04 4E 05 F1 | 	add	fp, #4
1c8c0     A7 26 02 FB | 	rdlong	local01, fp
1c8c4     0C 4E 85 F1 | 	sub	fp, #12
1c8c8     A7 26 62 FC | 	wrlong	local01, fp
1c8cc                 | LR__2319
1c8cc     A7 12 02 F6 | 	mov	arg01, fp
1c8d0     44 04 BF FD | 	call	#_push
1c8d4                 | LR__2320
1c8d4     A7 F0 03 F6 | 	mov	ptra, fp
1c8d8     B2 00 A0 FD | 	call	#popregs_
1c8dc                 | _do_getaddr_ret
1c8dc     2D 00 64 FD | 	ret
1c8e0                 | 
1c8e0                 | ' 
1c8e0                 | ' 
1c8e0                 | ' 
1c8e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c8e0                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1c8e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c8e0                 | ' 
1c8e0                 | ' '--------------------------------- AND 
1c8e0                 | ' 
1c8e0                 | ' sub do_and 
1c8e0                 | _do_and
1c8e0     03 4A 05 F6 | 	mov	COUNT_, #3
1c8e4     A8 00 A0 FD | 	call	#pushregs_
1c8e8     18 F0 07 F1 | 	add	ptra, #24
1c8ec     90 03 BF FD | 	call	#_pop
1c8f0     FD 12 02 F6 | 	mov	arg01, result1
1c8f4     FE 26 02 F6 | 	mov	local01, result2
1c8f8     FF 28 02 F6 | 	mov	local02, result3
1c8fc     0C 4E 05 F1 | 	add	fp, #12
1c900     A7 12 62 FC | 	wrlong	arg01, fp
1c904     04 4E 05 F1 | 	add	fp, #4
1c908     A7 26 62 FC | 	wrlong	local01, fp
1c90c     04 4E 05 F1 | 	add	fp, #4
1c910     A7 28 62 FC | 	wrlong	local02, fp
1c914     14 4E 85 F1 | 	sub	fp, #20
1c918     64 03 BF FD | 	call	#_pop
1c91c     FF 2A 02 F6 | 	mov	local03, result3
1c920     A7 FA 61 FC | 	wrlong	result1, fp
1c924     04 4E 05 F1 | 	add	fp, #4
1c928     A7 FC 61 FC | 	wrlong	result2, fp
1c92c     04 4E 05 F1 | 	add	fp, #4
1c930     A7 2A 62 FC | 	wrlong	local03, fp
1c934                 | ' 
1c934                 | ' t2=pop()
1c934                 | ' t1=pop()
1c934                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1c934     08 4E 85 F1 | 	sub	fp, #8
1c938     1C 2A 0E F2 | 	cmp	local03, #28 wz
1c93c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c940     A7 2A 62 AC |  if_e	wrlong	local03, fp
1c944     08 4E 05 A1 |  if_e	add	fp, #8
1c948     A7 3A 68 AC |  if_e	wrlong	#29, fp
1c94c     08 4E 85 A1 |  if_e	sub	fp, #8
1c950                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1c950     14 4E 05 F1 | 	add	fp, #20
1c954     A7 2A 02 FB | 	rdlong	local03, fp
1c958     14 4E 85 F1 | 	sub	fp, #20
1c95c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1c960     18 00 90 5D |  if_ne	jmp	#LR__2330
1c964     0C 4E 05 F1 | 	add	fp, #12
1c968     A7 2A 02 FB | 	rdlong	local03, fp
1c96c     A7 2A 62 FC | 	wrlong	local03, fp
1c970     08 4E 05 F1 | 	add	fp, #8
1c974     A7 3A 68 FC | 	wrlong	#29, fp
1c978     14 4E 85 F1 | 	sub	fp, #20
1c97c                 | LR__2330
1c97c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1c97c     08 4E 05 F1 | 	add	fp, #8
1c980     A7 2A 02 FB | 	rdlong	local03, fp
1c984     08 4E 85 F1 | 	sub	fp, #8
1c988     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c98c     14 4E 05 51 |  if_ne	add	fp, #20
1c990     A7 28 02 5B |  if_ne	rdlong	local02, fp
1c994     14 4E 85 51 |  if_ne	sub	fp, #20
1c998     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1c99c     08 4E 05 51 |  if_ne	add	fp, #8
1c9a0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1c9a4     08 4E 85 51 |  if_ne	sub	fp, #8
1c9a8     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1c9ac     14 4E 05 51 |  if_ne	add	fp, #20
1c9b0     14 4E 85 51 |  if_ne	sub	fp, #20
1c9b4     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1c9b8     A7 0C 68 AC |  if_e	wrlong	#6, fp
1c9bc     08 4E 05 A1 |  if_e	add	fp, #8
1c9c0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1c9c4     08 4E 85 A1 |  if_e	sub	fp, #8
1c9c8     18 00 90 AD |  if_e	jmp	#LR__2331
1c9cc     A7 2A 02 FB | 	rdlong	local03, fp
1c9d0     0C 4E 05 F1 | 	add	fp, #12
1c9d4     A7 26 02 FB | 	rdlong	local01, fp
1c9d8     0C 4E 85 F1 | 	sub	fp, #12
1c9dc     13 2B 02 F5 | 	and	local03, local01
1c9e0     A7 2A 62 FC | 	wrlong	local03, fp
1c9e4                 | LR__2331
1c9e4     A7 12 02 F6 | 	mov	arg01, fp
1c9e8     2C 03 BF FD | 	call	#_push
1c9ec     A7 F0 03 F6 | 	mov	ptra, fp
1c9f0     B2 00 A0 FD | 	call	#popregs_
1c9f4                 | _do_and_ret
1c9f4     2D 00 64 FD | 	ret
1c9f8                 | 
1c9f8                 | ' 
1c9f8                 | ' '--------------------------------- DIV (integer divide)
1c9f8                 | ' 
1c9f8                 | ' sub do_div 
1c9f8                 | _do_div
1c9f8     01 4A 05 F6 | 	mov	COUNT_, #1
1c9fc     A8 00 A0 FD | 	call	#pushregs_
1ca00     18 F0 07 F1 | 	add	ptra, #24
1ca04     78 02 BF FD | 	call	#_pop
1ca08     FD 8A 02 F6 | 	mov	muldivb_, result1
1ca0c     FE 88 02 F6 | 	mov	muldiva_, result2
1ca10     FF 26 02 F6 | 	mov	local01, result3
1ca14     0C 4E 05 F1 | 	add	fp, #12
1ca18     A7 8A 62 FC | 	wrlong	muldivb_, fp
1ca1c     04 4E 05 F1 | 	add	fp, #4
1ca20     A7 88 62 FC | 	wrlong	muldiva_, fp
1ca24     04 4E 05 F1 | 	add	fp, #4
1ca28     A7 26 62 FC | 	wrlong	local01, fp
1ca2c     14 4E 85 F1 | 	sub	fp, #20
1ca30     4C 02 BF FD | 	call	#_pop
1ca34     A7 FA 61 FC | 	wrlong	result1, fp
1ca38     04 4E 05 F1 | 	add	fp, #4
1ca3c     A7 FC 61 FC | 	wrlong	result2, fp
1ca40     04 4E 05 F1 | 	add	fp, #4
1ca44     A7 FE 61 FC | 	wrlong	result3, fp
1ca48                 | ' 
1ca48                 | ' t2=pop()
1ca48                 | ' t1=pop()
1ca48                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1ca48     08 4E 85 F1 | 	sub	fp, #8
1ca4c     1F FE 0D F2 | 	cmp	result3, #31 wz
1ca50     14 4E 05 51 |  if_ne	add	fp, #20
1ca54     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1ca58     14 4E 85 51 |  if_ne	sub	fp, #20
1ca5c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1ca60     A7 14 68 AC |  if_e	wrlong	#10, fp
1ca64     08 4E 05 A1 |  if_e	add	fp, #8
1ca68     A7 FE 69 AC |  if_e	wrlong	#255, fp
1ca6c     08 4E 85 A1 |  if_e	sub	fp, #8
1ca70     90 01 90 AD |  if_e	jmp	#LR__2346
1ca74                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1ca74     08 4E 05 F1 | 	add	fp, #8
1ca78     A7 8A 02 FB | 	rdlong	muldivb_, fp
1ca7c     08 4E 85 F1 | 	sub	fp, #8
1ca80     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1ca84     1C 00 90 5D |  if_ne	jmp	#LR__2340
1ca88     08 4E 05 F1 | 	add	fp, #8
1ca8c     A7 38 68 FC | 	wrlong	#28, fp
1ca90     08 4E 85 F1 | 	sub	fp, #8
1ca94     A7 12 02 FB | 	rdlong	arg01, fp
1ca98     00 14 06 F6 | 	mov	arg02, #0
1ca9c     28 C2 B0 FD | 	call	#__system___float_tointeger
1caa0     A7 FA 61 FC | 	wrlong	result1, fp
1caa4                 | LR__2340
1caa4                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1caa4     14 4E 05 F1 | 	add	fp, #20
1caa8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1caac     14 4E 85 F1 | 	sub	fp, #20
1cab0     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1cab4     28 00 90 5D |  if_ne	jmp	#LR__2341
1cab8     14 4E 05 F1 | 	add	fp, #20
1cabc     A7 38 68 FC | 	wrlong	#28, fp
1cac0     08 4E 85 F1 | 	sub	fp, #8
1cac4     A7 12 02 FB | 	rdlong	arg01, fp
1cac8     0C 4E 85 F1 | 	sub	fp, #12
1cacc     00 14 06 F6 | 	mov	arg02, #0
1cad0     F4 C1 B0 FD | 	call	#__system___float_tointeger
1cad4     0C 4E 05 F1 | 	add	fp, #12
1cad8     A7 FA 61 FC | 	wrlong	result1, fp
1cadc     0C 4E 85 F1 | 	sub	fp, #12
1cae0                 | LR__2341
1cae0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1cae0     08 4E 05 F1 | 	add	fp, #8
1cae4     A7 8A 02 FB | 	rdlong	muldivb_, fp
1cae8     08 4E 85 F1 | 	sub	fp, #8
1caec     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1caf0     14 4E 05 A1 |  if_e	add	fp, #20
1caf4     A7 26 02 AB |  if_e	rdlong	local01, fp
1caf8     14 4E 85 A1 |  if_e	sub	fp, #20
1cafc     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1cb00     20 00 90 5D |  if_ne	jmp	#LR__2342
1cb04     0C 4E 05 F1 | 	add	fp, #12
1cb08     A7 26 02 FB | 	rdlong	local01, fp
1cb0c     0C 4E 85 F1 | 	sub	fp, #12
1cb10     A7 8A 02 FB | 	rdlong	muldivb_, fp
1cb14     13 8B 12 FD | 	qdiv	muldivb_, local01
1cb18     18 26 62 FD | 	getqx	local01
1cb1c     A7 26 62 FC | 	wrlong	local01, fp
1cb20     E0 00 90 FD | 	jmp	#LR__2346
1cb24                 | LR__2342
1cb24                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1cb24     08 4E 05 F1 | 	add	fp, #8
1cb28     A7 8A 02 FB | 	rdlong	muldivb_, fp
1cb2c     08 4E 85 F1 | 	sub	fp, #8
1cb30     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1cb34     14 4E 05 A1 |  if_e	add	fp, #20
1cb38     A7 26 02 AB |  if_e	rdlong	local01, fp
1cb3c     14 4E 85 A1 |  if_e	sub	fp, #20
1cb40     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1cb44     2C 00 90 5D |  if_ne	jmp	#LR__2343
1cb48     0C 4E 05 F1 | 	add	fp, #12
1cb4c     A7 26 02 FB | 	rdlong	local01, fp
1cb50     0C 4E 85 F1 | 	sub	fp, #12
1cb54     A7 8A 02 FB | 	rdlong	muldivb_, fp
1cb58     13 8B 12 FD | 	qdiv	muldivb_, local01
1cb5c     18 26 62 FD | 	getqx	local01
1cb60     A7 26 62 FC | 	wrlong	local01, fp
1cb64     08 4E 05 F1 | 	add	fp, #8
1cb68     A7 38 68 FC | 	wrlong	#28, fp
1cb6c     08 4E 85 F1 | 	sub	fp, #8
1cb70     90 00 90 FD | 	jmp	#LR__2346
1cb74                 | LR__2343
1cb74                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1cb74     08 4E 05 F1 | 	add	fp, #8
1cb78     A7 8A 02 FB | 	rdlong	muldivb_, fp
1cb7c     08 4E 85 F1 | 	sub	fp, #8
1cb80     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1cb84     14 4E 05 A1 |  if_e	add	fp, #20
1cb88     A7 26 02 AB |  if_e	rdlong	local01, fp
1cb8c     14 4E 85 A1 |  if_e	sub	fp, #20
1cb90     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1cb94     1C 00 90 5D |  if_ne	jmp	#LR__2344
1cb98     A7 88 02 FB | 	rdlong	muldiva_, fp
1cb9c     0C 4E 05 F1 | 	add	fp, #12
1cba0     A7 8A 02 FB | 	rdlong	muldivb_, fp
1cba4     0C 4E 85 F1 | 	sub	fp, #12
1cba8     BA 00 A0 FD | 	call	#divide_
1cbac     A7 8A 62 FC | 	wrlong	muldivb_, fp
1cbb0     50 00 90 FD | 	jmp	#LR__2346
1cbb4                 | LR__2344
1cbb4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1cbb4     08 4E 05 F1 | 	add	fp, #8
1cbb8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1cbbc     08 4E 85 F1 | 	sub	fp, #8
1cbc0     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1cbc4     14 4E 05 A1 |  if_e	add	fp, #20
1cbc8     A7 26 02 AB |  if_e	rdlong	local01, fp
1cbcc     14 4E 85 A1 |  if_e	sub	fp, #20
1cbd0     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1cbd4     1C 00 90 5D |  if_ne	jmp	#LR__2345
1cbd8     A7 88 02 FB | 	rdlong	muldiva_, fp
1cbdc     0C 4E 05 F1 | 	add	fp, #12
1cbe0     A7 8A 02 FB | 	rdlong	muldivb_, fp
1cbe4     0C 4E 85 F1 | 	sub	fp, #12
1cbe8     BA 00 A0 FD | 	call	#divide_
1cbec     A7 8A 62 FC | 	wrlong	muldivb_, fp
1cbf0     10 00 90 FD | 	jmp	#LR__2346
1cbf4                 | LR__2345
1cbf4     A7 16 68 FC | 	wrlong	#11, fp
1cbf8     08 4E 05 F1 | 	add	fp, #8
1cbfc     A7 FE 69 FC | 	wrlong	#255, fp
1cc00     08 4E 85 F1 | 	sub	fp, #8
1cc04                 | LR__2346
1cc04     A7 12 02 F6 | 	mov	arg01, fp
1cc08     0C 01 BF FD | 	call	#_push
1cc0c     A7 F0 03 F6 | 	mov	ptra, fp
1cc10     B2 00 A0 FD | 	call	#popregs_
1cc14                 | _do_div_ret
1cc14     2D 00 64 FD | 	ret
1cc18                 | 
1cc18                 | ' 
1cc18                 | ' '--------------------------------- equal (=)
1cc18                 | ' 
1cc18                 | ' sub do_eq
1cc18                 | _do_eq
1cc18     05 4A 05 F6 | 	mov	COUNT_, #5
1cc1c     A8 00 A0 FD | 	call	#pushregs_
1cc20     18 F0 07 F1 | 	add	ptra, #24
1cc24     58 00 BF FD | 	call	#_pop
1cc28     FD 26 02 F6 | 	mov	local01, result1
1cc2c     FE 28 02 F6 | 	mov	local02, result2
1cc30     FF 2A 02 F6 | 	mov	local03, result3
1cc34     0C 4E 05 F1 | 	add	fp, #12
1cc38     A7 26 62 FC | 	wrlong	local01, fp
1cc3c     04 4E 05 F1 | 	add	fp, #4
1cc40     A7 28 62 FC | 	wrlong	local02, fp
1cc44     04 4E 05 F1 | 	add	fp, #4
1cc48     A7 2A 62 FC | 	wrlong	local03, fp
1cc4c     14 4E 85 F1 | 	sub	fp, #20
1cc50     2C 00 BF FD | 	call	#_pop
1cc54     FF 2A 02 F6 | 	mov	local03, result3
1cc58     A7 FA 61 FC | 	wrlong	result1, fp
1cc5c     04 4E 05 F1 | 	add	fp, #4
1cc60     A7 FC 61 FC | 	wrlong	result2, fp
1cc64     04 4E 05 F1 | 	add	fp, #4
1cc68     A7 2A 62 FC | 	wrlong	local03, fp
1cc6c                 | ' 
1cc6c                 | ' t2=pop()
1cc6c                 | ' t1=pop()
1cc6c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1cc6c     08 4E 85 F1 | 	sub	fp, #8
1cc70     1F 2A 0E F2 | 	cmp	local03, #31 wz
1cc74     14 4E 05 A1 |  if_e	add	fp, #20
1cc78     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cc7c     14 4E 85 A1 |  if_e	sub	fp, #20
1cc80     16 2B 02 A6 |  if_e	mov	local03, local04
1cc84     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1cc88     28 00 90 5D |  if_ne	jmp	#LR__2350
1cc8c     00 26 06 F6 | 	mov	local01, #0
1cc90     A7 12 02 FB | 	rdlong	arg01, fp
1cc94     0C 4E 05 F1 | 	add	fp, #12
1cc98     A7 14 02 FB | 	rdlong	arg02, fp
1cc9c     0C 4E 85 F1 | 	sub	fp, #12
1cca0     0C 8D B0 FD | 	call	#__system___string_cmp
1cca4     00 FA 0D F2 | 	cmp	result1, #0 wz
1cca8     00 26 26 A6 |  if_e	not	local01, #0
1ccac     A7 26 62 FC | 	wrlong	local01, fp
1ccb0     20 04 90 FD | 	jmp	#LR__2363
1ccb4                 | LR__2350
1ccb4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1ccb4     08 4E 05 F1 | 	add	fp, #8
1ccb8     A7 26 02 FB | 	rdlong	local01, fp
1ccbc     08 4E 85 F1 | 	sub	fp, #8
1ccc0     1E 26 0E F2 | 	cmp	local01, #30 wz
1ccc4     14 4E 05 A1 |  if_e	add	fp, #20
1ccc8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cccc     14 4E 85 A1 |  if_e	sub	fp, #20
1ccd0     16 2B 02 A6 |  if_e	mov	local03, local04
1ccd4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ccd8     2C 00 90 5D |  if_ne	jmp	#LR__2351
1ccdc     00 26 06 F6 | 	mov	local01, #0
1cce0     A7 12 02 FB | 	rdlong	arg01, fp
1cce4     0C 4E 05 F1 | 	add	fp, #12
1cce8     A7 14 02 FB | 	rdlong	arg02, fp
1ccec     0C 4E 85 F1 | 	sub	fp, #12
1ccf0     01 16 06 F6 | 	mov	arg03, #1
1ccf4     3C BF B0 FD | 	call	#__system___float_cmp
1ccf8     00 FA 0D F2 | 	cmp	result1, #0 wz
1ccfc     00 26 26 A6 |  if_e	not	local01, #0
1cd00     A7 26 62 FC | 	wrlong	local01, fp
1cd04     CC 03 90 FD | 	jmp	#LR__2363
1cd08                 | LR__2351
1cd08                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1cd08     08 4E 05 F1 | 	add	fp, #8
1cd0c     A7 26 02 FB | 	rdlong	local01, fp
1cd10     08 4E 85 F1 | 	sub	fp, #8
1cd14     1E 26 0E F2 | 	cmp	local01, #30 wz
1cd18     14 4E 05 A1 |  if_e	add	fp, #20
1cd1c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cd20     14 4E 85 A1 |  if_e	sub	fp, #20
1cd24     16 2B 02 A6 |  if_e	mov	local03, local04
1cd28     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1cd2c     48 00 90 5D |  if_ne	jmp	#LR__2352
1cd30     00 26 06 F6 | 	mov	local01, #0
1cd34     A7 28 02 FB | 	rdlong	local02, fp
1cd38     0C 4E 05 F1 | 	add	fp, #12
1cd3c     A7 12 02 FB | 	rdlong	arg01, fp
1cd40     0C 4E 85 F1 | 	sub	fp, #12
1cd44     09 13 52 F6 | 	abs	arg01, arg01 wc
1cd48     1F 2E C6 C9 |  if_b	decod	local05, #31
1cd4c     00 2E 06 36 |  if_ae	mov	local05, #0
1cd50     A8 B6 B0 FD | 	call	#__system___float_fromuns
1cd54     17 FB 61 F5 | 	xor	result1, local05
1cd58     FD 14 02 F6 | 	mov	arg02, result1
1cd5c     14 13 02 F6 | 	mov	arg01, local02
1cd60     01 16 06 F6 | 	mov	arg03, #1
1cd64     CC BE B0 FD | 	call	#__system___float_cmp
1cd68     00 FA 0D F2 | 	cmp	result1, #0 wz
1cd6c     00 26 26 A6 |  if_e	not	local01, #0
1cd70     A7 26 62 FC | 	wrlong	local01, fp
1cd74     5C 03 90 FD | 	jmp	#LR__2363
1cd78                 | LR__2352
1cd78                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1cd78     08 4E 05 F1 | 	add	fp, #8
1cd7c     A7 26 02 FB | 	rdlong	local01, fp
1cd80     08 4E 85 F1 | 	sub	fp, #8
1cd84     1E 26 0E F2 | 	cmp	local01, #30 wz
1cd88     14 4E 05 A1 |  if_e	add	fp, #20
1cd8c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cd90     14 4E 85 A1 |  if_e	sub	fp, #20
1cd94     16 2B 02 A6 |  if_e	mov	local03, local04
1cd98     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1cd9c     38 00 90 5D |  if_ne	jmp	#LR__2353
1cda0     00 26 06 F6 | 	mov	local01, #0
1cda4     A7 28 02 FB | 	rdlong	local02, fp
1cda8     0C 4E 05 F1 | 	add	fp, #12
1cdac     A7 12 02 FB | 	rdlong	arg01, fp
1cdb0     0C 4E 85 F1 | 	sub	fp, #12
1cdb4     44 B6 B0 FD | 	call	#__system___float_fromuns
1cdb8     FD 14 02 F6 | 	mov	arg02, result1
1cdbc     14 13 02 F6 | 	mov	arg01, local02
1cdc0     01 16 06 F6 | 	mov	arg03, #1
1cdc4     6C BE B0 FD | 	call	#__system___float_cmp
1cdc8     00 FA 0D F2 | 	cmp	result1, #0 wz
1cdcc     00 26 26 A6 |  if_e	not	local01, #0
1cdd0     A7 26 62 FC | 	wrlong	local01, fp
1cdd4     FC 02 90 FD | 	jmp	#LR__2363
1cdd8                 | LR__2353
1cdd8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1cdd8     08 4E 05 F1 | 	add	fp, #8
1cddc     A7 26 02 FB | 	rdlong	local01, fp
1cde0     08 4E 85 F1 | 	sub	fp, #8
1cde4     1C 26 0E F2 | 	cmp	local01, #28 wz
1cde8     14 4E 05 A1 |  if_e	add	fp, #20
1cdec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cdf0     14 4E 85 A1 |  if_e	sub	fp, #20
1cdf4     16 2B 02 A6 |  if_e	mov	local03, local04
1cdf8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1cdfc     44 00 90 5D |  if_ne	jmp	#LR__2354
1ce00     00 26 06 F6 | 	mov	local01, #0
1ce04     A7 12 02 FB | 	rdlong	arg01, fp
1ce08     09 13 52 F6 | 	abs	arg01, arg01 wc
1ce0c     1F 2E C6 C9 |  if_b	decod	local05, #31
1ce10     00 2E 06 36 |  if_ae	mov	local05, #0
1ce14     E4 B5 B0 FD | 	call	#__system___float_fromuns
1ce18     17 FB 61 F5 | 	xor	result1, local05
1ce1c     FD 12 02 F6 | 	mov	arg01, result1
1ce20     0C 4E 05 F1 | 	add	fp, #12
1ce24     A7 14 02 FB | 	rdlong	arg02, fp
1ce28     0C 4E 85 F1 | 	sub	fp, #12
1ce2c     01 16 06 F6 | 	mov	arg03, #1
1ce30     00 BE B0 FD | 	call	#__system___float_cmp
1ce34     00 FA 0D F2 | 	cmp	result1, #0 wz
1ce38     00 26 26 A6 |  if_e	not	local01, #0
1ce3c     A7 26 62 FC | 	wrlong	local01, fp
1ce40     90 02 90 FD | 	jmp	#LR__2363
1ce44                 | LR__2354
1ce44                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1ce44     08 4E 05 F1 | 	add	fp, #8
1ce48     A7 26 02 FB | 	rdlong	local01, fp
1ce4c     08 4E 85 F1 | 	sub	fp, #8
1ce50     1C 26 0E F2 | 	cmp	local01, #28 wz
1ce54     14 4E 05 A1 |  if_e	add	fp, #20
1ce58     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ce5c     14 4E 85 A1 |  if_e	sub	fp, #20
1ce60     16 2B 02 A6 |  if_e	mov	local03, local04
1ce64     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ce68     24 00 90 5D |  if_ne	jmp	#LR__2355
1ce6c     00 26 06 F6 | 	mov	local01, #0
1ce70     A7 28 02 FB | 	rdlong	local02, fp
1ce74     0C 4E 05 F1 | 	add	fp, #12
1ce78     A7 2A 02 FB | 	rdlong	local03, fp
1ce7c     0C 4E 85 F1 | 	sub	fp, #12
1ce80     15 29 0A F2 | 	cmp	local02, local03 wz
1ce84     01 26 66 A6 |  if_e	neg	local01, #1
1ce88     A7 26 62 FC | 	wrlong	local01, fp
1ce8c     44 02 90 FD | 	jmp	#LR__2363
1ce90                 | LR__2355
1ce90                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1ce90     08 4E 05 F1 | 	add	fp, #8
1ce94     A7 26 02 FB | 	rdlong	local01, fp
1ce98     08 4E 85 F1 | 	sub	fp, #8
1ce9c     1C 26 0E F2 | 	cmp	local01, #28 wz
1cea0     14 4E 05 A1 |  if_e	add	fp, #20
1cea4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cea8     14 4E 85 A1 |  if_e	sub	fp, #20
1ceac     16 2B 02 A6 |  if_e	mov	local03, local04
1ceb0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ceb4     24 00 90 5D |  if_ne	jmp	#LR__2356
1ceb8     00 26 06 F6 | 	mov	local01, #0
1cebc     A7 28 02 FB | 	rdlong	local02, fp
1cec0     0C 4E 05 F1 | 	add	fp, #12
1cec4     A7 2A 02 FB | 	rdlong	local03, fp
1cec8     0C 4E 85 F1 | 	sub	fp, #12
1cecc     15 29 0A F2 | 	cmp	local02, local03 wz
1ced0     01 26 66 A6 |  if_e	neg	local01, #1
1ced4     A7 26 62 FC | 	wrlong	local01, fp
1ced8     F8 01 90 FD | 	jmp	#LR__2363
1cedc                 | LR__2356
1cedc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1cedc     08 4E 05 F1 | 	add	fp, #8
1cee0     A7 26 02 FB | 	rdlong	local01, fp
1cee4     08 4E 85 F1 | 	sub	fp, #8
1cee8     1D 26 0E F2 | 	cmp	local01, #29 wz
1ceec     14 4E 05 A1 |  if_e	add	fp, #20
1cef0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cef4     14 4E 85 A1 |  if_e	sub	fp, #20
1cef8     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1cefc     34 00 90 5D |  if_ne	jmp	#LR__2357
1cf00     00 26 06 F6 | 	mov	local01, #0
1cf04     A7 12 02 FB | 	rdlong	arg01, fp
1cf08     F0 B4 B0 FD | 	call	#__system___float_fromuns
1cf0c     FD 12 02 F6 | 	mov	arg01, result1
1cf10     0C 4E 05 F1 | 	add	fp, #12
1cf14     A7 14 02 FB | 	rdlong	arg02, fp
1cf18     0C 4E 85 F1 | 	sub	fp, #12
1cf1c     01 16 06 F6 | 	mov	arg03, #1
1cf20     10 BD B0 FD | 	call	#__system___float_cmp
1cf24     00 FA 0D F2 | 	cmp	result1, #0 wz
1cf28     00 26 26 A6 |  if_e	not	local01, #0
1cf2c     A7 26 62 FC | 	wrlong	local01, fp
1cf30     A0 01 90 FD | 	jmp	#LR__2363
1cf34                 | LR__2357
1cf34                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1cf34     08 4E 05 F1 | 	add	fp, #8
1cf38     A7 26 02 FB | 	rdlong	local01, fp
1cf3c     08 4E 85 F1 | 	sub	fp, #8
1cf40     1D 26 0E F2 | 	cmp	local01, #29 wz
1cf44     14 4E 05 A1 |  if_e	add	fp, #20
1cf48     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cf4c     14 4E 85 A1 |  if_e	sub	fp, #20
1cf50     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1cf54     24 00 90 5D |  if_ne	jmp	#LR__2358
1cf58     00 26 06 F6 | 	mov	local01, #0
1cf5c     A7 28 02 FB | 	rdlong	local02, fp
1cf60     0C 4E 05 F1 | 	add	fp, #12
1cf64     A7 2A 02 FB | 	rdlong	local03, fp
1cf68     0C 4E 85 F1 | 	sub	fp, #12
1cf6c     15 29 0A F2 | 	cmp	local02, local03 wz
1cf70     01 26 66 A6 |  if_e	neg	local01, #1
1cf74     A7 26 62 FC | 	wrlong	local01, fp
1cf78     58 01 90 FD | 	jmp	#LR__2363
1cf7c                 | LR__2358
1cf7c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1cf7c     08 4E 05 F1 | 	add	fp, #8
1cf80     A7 26 02 FB | 	rdlong	local01, fp
1cf84     08 4E 85 F1 | 	sub	fp, #8
1cf88     1D 26 0E F2 | 	cmp	local01, #29 wz
1cf8c     14 4E 05 A1 |  if_e	add	fp, #20
1cf90     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cf94     14 4E 85 A1 |  if_e	sub	fp, #20
1cf98     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1cf9c     24 00 90 5D |  if_ne	jmp	#LR__2359
1cfa0     00 26 06 F6 | 	mov	local01, #0
1cfa4     A7 28 02 FB | 	rdlong	local02, fp
1cfa8     0C 4E 05 F1 | 	add	fp, #12
1cfac     A7 2A 02 FB | 	rdlong	local03, fp
1cfb0     0C 4E 85 F1 | 	sub	fp, #12
1cfb4     15 29 0A F2 | 	cmp	local02, local03 wz
1cfb8     01 26 66 A6 |  if_e	neg	local01, #1
1cfbc     A7 26 62 FC | 	wrlong	local01, fp
1cfc0     10 01 90 FD | 	jmp	#LR__2363
1cfc4                 | LR__2359
1cfc4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1cfc4     08 4E 05 F1 | 	add	fp, #8
1cfc8     A7 26 02 FB | 	rdlong	local01, fp
1cfcc     08 4E 85 F1 | 	sub	fp, #8
1cfd0     2B 26 0E F2 | 	cmp	local01, #43 wz
1cfd4     14 4E 05 A1 |  if_e	add	fp, #20
1cfd8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cfdc     14 4E 85 A1 |  if_e	sub	fp, #20
1cfe0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1cfe4     30 00 90 5D |  if_ne	jmp	#LR__2360
1cfe8     00 26 06 F6 | 	mov	local01, #0
1cfec     A7 12 02 FB | 	rdlong	arg01, fp
1cff0     04 FE BE FD | 	call	#_convertstring
1cff4     FD 12 02 F6 | 	mov	arg01, result1
1cff8     0C 4E 05 F1 | 	add	fp, #12
1cffc     A7 14 02 FB | 	rdlong	arg02, fp
1d000     0C 4E 85 F1 | 	sub	fp, #12
1d004     A8 89 B0 FD | 	call	#__system___string_cmp
1d008     00 FA 0D F2 | 	cmp	result1, #0 wz
1d00c     00 26 26 A6 |  if_e	not	local01, #0
1d010     A7 26 62 FC | 	wrlong	local01, fp
1d014     BC 00 90 FD | 	jmp	#LR__2363
1d018                 | LR__2360
1d018                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1d018     08 4E 05 F1 | 	add	fp, #8
1d01c     A7 26 02 FB | 	rdlong	local01, fp
1d020     08 4E 85 F1 | 	sub	fp, #8
1d024     1F 26 0E F2 | 	cmp	local01, #31 wz
1d028     14 4E 05 A1 |  if_e	add	fp, #20
1d02c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d030     14 4E 85 A1 |  if_e	sub	fp, #20
1d034     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d038     34 00 90 5D |  if_ne	jmp	#LR__2361
1d03c     00 26 06 F6 | 	mov	local01, #0
1d040     A7 28 02 FB | 	rdlong	local02, fp
1d044     0C 4E 05 F1 | 	add	fp, #12
1d048     A7 12 02 FB | 	rdlong	arg01, fp
1d04c     0C 4E 85 F1 | 	sub	fp, #12
1d050     A4 FD BE FD | 	call	#_convertstring
1d054     FD 14 02 F6 | 	mov	arg02, result1
1d058     14 13 02 F6 | 	mov	arg01, local02
1d05c     50 89 B0 FD | 	call	#__system___string_cmp
1d060     00 FA 0D F2 | 	cmp	result1, #0 wz
1d064     00 26 26 A6 |  if_e	not	local01, #0
1d068     A7 26 62 FC | 	wrlong	local01, fp
1d06c     64 00 90 FD | 	jmp	#LR__2363
1d070                 | LR__2361
1d070                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1d070     08 4E 05 F1 | 	add	fp, #8
1d074     A7 26 02 FB | 	rdlong	local01, fp
1d078     08 4E 85 F1 | 	sub	fp, #8
1d07c     2B 26 0E F2 | 	cmp	local01, #43 wz
1d080     14 4E 05 A1 |  if_e	add	fp, #20
1d084     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d088     14 4E 85 A1 |  if_e	sub	fp, #20
1d08c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d090     3C 00 90 5D |  if_ne	jmp	#LR__2362
1d094     00 26 06 F6 | 	mov	local01, #0
1d098     A7 12 02 FB | 	rdlong	arg01, fp
1d09c     58 FD BE FD | 	call	#_convertstring
1d0a0     FD 28 02 F6 | 	mov	local02, result1
1d0a4     0C 4E 05 F1 | 	add	fp, #12
1d0a8     A7 12 02 FB | 	rdlong	arg01, fp
1d0ac     0C 4E 85 F1 | 	sub	fp, #12
1d0b0     44 FD BE FD | 	call	#_convertstring
1d0b4     FD 14 02 F6 | 	mov	arg02, result1
1d0b8     14 13 02 F6 | 	mov	arg01, local02
1d0bc     F0 88 B0 FD | 	call	#__system___string_cmp
1d0c0     00 FA 0D F2 | 	cmp	result1, #0 wz
1d0c4     00 26 26 A6 |  if_e	not	local01, #0
1d0c8     A7 26 62 FC | 	wrlong	local01, fp
1d0cc     04 00 90 FD | 	jmp	#LR__2363
1d0d0                 | LR__2362
1d0d0     A7 00 68 FC | 	wrlong	#0, fp
1d0d4                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d0d4                 | LR__2363
1d0d4     08 4E 05 F1 | 	add	fp, #8
1d0d8     A7 38 68 FC | 	wrlong	#28, fp
1d0dc     08 4E 85 F1 | 	sub	fp, #8
1d0e0     A7 12 02 F6 | 	mov	arg01, fp
1d0e4     30 FC BE FD | 	call	#_push
1d0e8     A7 F0 03 F6 | 	mov	ptra, fp
1d0ec     B2 00 A0 FD | 	call	#popregs_
1d0f0                 | _do_eq_ret
1d0f0     2D 00 64 FD | 	ret
1d0f4                 | 
1d0f4                 | ' 
1d0f4                 | ' '--------------------------------- fdiv (/) - float divide
1d0f4                 | ' 
1d0f4                 | ' sub do_fdiv 
1d0f4                 | _do_fdiv
1d0f4     02 4A 05 F6 | 	mov	COUNT_, #2
1d0f8     A8 00 A0 FD | 	call	#pushregs_
1d0fc     18 F0 07 F1 | 	add	ptra, #24
1d100     7C FB BE FD | 	call	#_pop
1d104     FD 14 02 F6 | 	mov	arg02, result1
1d108     FE 12 02 F6 | 	mov	arg01, result2
1d10c     FF 26 02 F6 | 	mov	local01, result3
1d110     0C 4E 05 F1 | 	add	fp, #12
1d114     A7 14 62 FC | 	wrlong	arg02, fp
1d118     04 4E 05 F1 | 	add	fp, #4
1d11c     A7 12 62 FC | 	wrlong	arg01, fp
1d120     04 4E 05 F1 | 	add	fp, #4
1d124     A7 26 62 FC | 	wrlong	local01, fp
1d128     14 4E 85 F1 | 	sub	fp, #20
1d12c     50 FB BE FD | 	call	#_pop
1d130     A7 FA 61 FC | 	wrlong	result1, fp
1d134     04 4E 05 F1 | 	add	fp, #4
1d138     A7 FC 61 FC | 	wrlong	result2, fp
1d13c     04 4E 05 F1 | 	add	fp, #4
1d140     A7 FE 61 FC | 	wrlong	result3, fp
1d144                 | ' 
1d144                 | ' t2=pop()
1d144                 | ' t1=pop()
1d144                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1d144     08 4E 85 F1 | 	sub	fp, #8
1d148     1F FE 0D F2 | 	cmp	result3, #31 wz
1d14c     14 4E 05 51 |  if_ne	add	fp, #20
1d150     A7 26 02 5B |  if_ne	rdlong	local01, fp
1d154     14 4E 85 51 |  if_ne	sub	fp, #20
1d158     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1d15c     A7 14 68 AC |  if_e	wrlong	#10, fp
1d160     08 4E 05 A1 |  if_e	add	fp, #8
1d164     A7 FE 69 AC |  if_e	wrlong	#255, fp
1d168     08 4E 85 A1 |  if_e	sub	fp, #8
1d16c     38 01 90 AD |  if_e	jmp	#LR__2375
1d170                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1d170     08 4E 05 F1 | 	add	fp, #8
1d174     A7 14 02 FB | 	rdlong	arg02, fp
1d178     08 4E 85 F1 | 	sub	fp, #8
1d17c     1C 14 0E F2 | 	cmp	arg02, #28 wz
1d180     28 00 90 5D |  if_ne	jmp	#LR__2370
1d184     08 4E 05 F1 | 	add	fp, #8
1d188     A7 3C 68 FC | 	wrlong	#30, fp
1d18c     08 4E 85 F1 | 	sub	fp, #8
1d190     A7 12 02 FB | 	rdlong	arg01, fp
1d194     09 13 52 F6 | 	abs	arg01, arg01 wc
1d198     1F 28 C6 C9 |  if_b	decod	local02, #31
1d19c     00 28 06 36 |  if_ae	mov	local02, #0
1d1a0     58 B2 B0 FD | 	call	#__system___float_fromuns
1d1a4     14 FB 61 F5 | 	xor	result1, local02
1d1a8     A7 FA 61 FC | 	wrlong	result1, fp
1d1ac                 | LR__2370
1d1ac                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1d1ac     08 4E 05 F1 | 	add	fp, #8
1d1b0     A7 14 02 FB | 	rdlong	arg02, fp
1d1b4     08 4E 85 F1 | 	sub	fp, #8
1d1b8     1D 14 0E F2 | 	cmp	arg02, #29 wz
1d1bc     18 00 90 5D |  if_ne	jmp	#LR__2371
1d1c0     08 4E 05 F1 | 	add	fp, #8
1d1c4     A7 3C 68 FC | 	wrlong	#30, fp
1d1c8     08 4E 85 F1 | 	sub	fp, #8
1d1cc     A7 12 02 FB | 	rdlong	arg01, fp
1d1d0     28 B2 B0 FD | 	call	#__system___float_fromuns
1d1d4     A7 FA 61 FC | 	wrlong	result1, fp
1d1d8                 | LR__2371
1d1d8                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1d1d8     14 4E 05 F1 | 	add	fp, #20
1d1dc     A7 14 02 FB | 	rdlong	arg02, fp
1d1e0     14 4E 85 F1 | 	sub	fp, #20
1d1e4     1C 14 0E F2 | 	cmp	arg02, #28 wz
1d1e8     34 00 90 5D |  if_ne	jmp	#LR__2372
1d1ec     14 4E 05 F1 | 	add	fp, #20
1d1f0     A7 3C 68 FC | 	wrlong	#30, fp
1d1f4     08 4E 85 F1 | 	sub	fp, #8
1d1f8     A7 12 02 FB | 	rdlong	arg01, fp
1d1fc     0C 4E 85 F1 | 	sub	fp, #12
1d200     09 13 52 F6 | 	abs	arg01, arg01 wc
1d204     1F 28 C6 C9 |  if_b	decod	local02, #31
1d208     00 28 06 36 |  if_ae	mov	local02, #0
1d20c     EC B1 B0 FD | 	call	#__system___float_fromuns
1d210     14 FB 61 F5 | 	xor	result1, local02
1d214     0C 4E 05 F1 | 	add	fp, #12
1d218     A7 FA 61 FC | 	wrlong	result1, fp
1d21c     0C 4E 85 F1 | 	sub	fp, #12
1d220                 | LR__2372
1d220                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1d220     14 4E 05 F1 | 	add	fp, #20
1d224     A7 14 02 FB | 	rdlong	arg02, fp
1d228     14 4E 85 F1 | 	sub	fp, #20
1d22c     1D 14 0E F2 | 	cmp	arg02, #29 wz
1d230     24 00 90 5D |  if_ne	jmp	#LR__2373
1d234     14 4E 05 F1 | 	add	fp, #20
1d238     A7 3C 68 FC | 	wrlong	#30, fp
1d23c     08 4E 85 F1 | 	sub	fp, #8
1d240     A7 12 02 FB | 	rdlong	arg01, fp
1d244     0C 4E 85 F1 | 	sub	fp, #12
1d248     B0 B1 B0 FD | 	call	#__system___float_fromuns
1d24c     0C 4E 05 F1 | 	add	fp, #12
1d250     A7 FA 61 FC | 	wrlong	result1, fp
1d254     0C 4E 85 F1 | 	sub	fp, #12
1d258                 | LR__2373
1d258                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1d258     08 4E 05 F1 | 	add	fp, #8
1d25c     A7 14 02 FB | 	rdlong	arg02, fp
1d260     08 4E 85 F1 | 	sub	fp, #8
1d264     1E 14 0E F2 | 	cmp	arg02, #30 wz
1d268     14 4E 05 A1 |  if_e	add	fp, #20
1d26c     A7 26 02 AB |  if_e	rdlong	local01, fp
1d270     14 4E 85 A1 |  if_e	sub	fp, #20
1d274     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1d278     1C 00 90 5D |  if_ne	jmp	#LR__2374
1d27c     A7 12 02 FB | 	rdlong	arg01, fp
1d280     0C 4E 05 F1 | 	add	fp, #12
1d284     A7 14 02 FB | 	rdlong	arg02, fp
1d288     0C 4E 85 F1 | 	sub	fp, #12
1d28c     74 B7 B0 FD | 	call	#__system___float_div
1d290     A7 FA 61 FC | 	wrlong	result1, fp
1d294     10 00 90 FD | 	jmp	#LR__2375
1d298                 | LR__2374
1d298     A7 16 68 FC | 	wrlong	#11, fp
1d29c     08 4E 05 F1 | 	add	fp, #8
1d2a0     A7 FE 69 FC | 	wrlong	#255, fp
1d2a4     08 4E 85 F1 | 	sub	fp, #8
1d2a8                 | LR__2375
1d2a8     A7 12 02 F6 | 	mov	arg01, fp
1d2ac     68 FA BE FD | 	call	#_push
1d2b0     A7 F0 03 F6 | 	mov	ptra, fp
1d2b4     B2 00 A0 FD | 	call	#popregs_
1d2b8                 | _do_fdiv_ret
1d2b8     2D 00 64 FD | 	ret
1d2bc                 | 
1d2bc                 | ' 
1d2bc                 | ' '--------------------------------- greater or equal (>=)
1d2bc                 | ' 
1d2bc                 | ' sub do_ge
1d2bc                 | _do_ge
1d2bc     05 4A 05 F6 | 	mov	COUNT_, #5
1d2c0     A8 00 A0 FD | 	call	#pushregs_
1d2c4     18 F0 07 F1 | 	add	ptra, #24
1d2c8     B4 F9 BE FD | 	call	#_pop
1d2cc     FD 26 02 F6 | 	mov	local01, result1
1d2d0     FE 28 02 F6 | 	mov	local02, result2
1d2d4     FF 2A 02 F6 | 	mov	local03, result3
1d2d8     0C 4E 05 F1 | 	add	fp, #12
1d2dc     A7 26 62 FC | 	wrlong	local01, fp
1d2e0     04 4E 05 F1 | 	add	fp, #4
1d2e4     A7 28 62 FC | 	wrlong	local02, fp
1d2e8     04 4E 05 F1 | 	add	fp, #4
1d2ec     A7 2A 62 FC | 	wrlong	local03, fp
1d2f0     14 4E 85 F1 | 	sub	fp, #20
1d2f4     88 F9 BE FD | 	call	#_pop
1d2f8     FF 2A 02 F6 | 	mov	local03, result3
1d2fc     A7 FA 61 FC | 	wrlong	result1, fp
1d300     04 4E 05 F1 | 	add	fp, #4
1d304     A7 FC 61 FC | 	wrlong	result2, fp
1d308     04 4E 05 F1 | 	add	fp, #4
1d30c     A7 2A 62 FC | 	wrlong	local03, fp
1d310                 | ' 
1d310                 | ' t2=pop()
1d310                 | ' t1=pop()
1d310                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1d310     08 4E 85 F1 | 	sub	fp, #8
1d314     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d318     14 4E 05 A1 |  if_e	add	fp, #20
1d31c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d320     14 4E 85 A1 |  if_e	sub	fp, #20
1d324     16 2B 02 A6 |  if_e	mov	local03, local04
1d328     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d32c     28 00 90 5D |  if_ne	jmp	#LR__2380
1d330     00 26 06 F6 | 	mov	local01, #0
1d334     A7 12 02 FB | 	rdlong	arg01, fp
1d338     0C 4E 05 F1 | 	add	fp, #12
1d33c     A7 14 02 FB | 	rdlong	arg02, fp
1d340     0C 4E 85 F1 | 	sub	fp, #12
1d344     68 86 B0 FD | 	call	#__system___string_cmp
1d348     00 FA 55 F2 | 	cmps	result1, #0 wc
1d34c     00 26 26 36 |  if_ae	not	local01, #0
1d350     A7 26 62 FC | 	wrlong	local01, fp
1d354     24 04 90 FD | 	jmp	#LR__2393
1d358                 | LR__2380
1d358                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1d358     08 4E 05 F1 | 	add	fp, #8
1d35c     A7 26 02 FB | 	rdlong	local01, fp
1d360     08 4E 85 F1 | 	sub	fp, #8
1d364     1E 26 0E F2 | 	cmp	local01, #30 wz
1d368     14 4E 05 A1 |  if_e	add	fp, #20
1d36c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d370     14 4E 85 A1 |  if_e	sub	fp, #20
1d374     16 2B 02 A6 |  if_e	mov	local03, local04
1d378     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d37c     2C 00 90 5D |  if_ne	jmp	#LR__2381
1d380     00 26 06 F6 | 	mov	local01, #0
1d384     A7 12 02 FB | 	rdlong	arg01, fp
1d388     0C 4E 05 F1 | 	add	fp, #12
1d38c     A7 14 02 FB | 	rdlong	arg02, fp
1d390     0C 4E 85 F1 | 	sub	fp, #12
1d394     01 16 66 F6 | 	neg	arg03, #1
1d398     98 B8 B0 FD | 	call	#__system___float_cmp
1d39c     00 FA 55 F2 | 	cmps	result1, #0 wc
1d3a0     00 26 26 36 |  if_ae	not	local01, #0
1d3a4     A7 26 62 FC | 	wrlong	local01, fp
1d3a8     D0 03 90 FD | 	jmp	#LR__2393
1d3ac                 | LR__2381
1d3ac                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1d3ac     08 4E 05 F1 | 	add	fp, #8
1d3b0     A7 26 02 FB | 	rdlong	local01, fp
1d3b4     08 4E 85 F1 | 	sub	fp, #8
1d3b8     1E 26 0E F2 | 	cmp	local01, #30 wz
1d3bc     14 4E 05 A1 |  if_e	add	fp, #20
1d3c0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d3c4     14 4E 85 A1 |  if_e	sub	fp, #20
1d3c8     16 2B 02 A6 |  if_e	mov	local03, local04
1d3cc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d3d0     48 00 90 5D |  if_ne	jmp	#LR__2382
1d3d4     00 26 06 F6 | 	mov	local01, #0
1d3d8     A7 28 02 FB | 	rdlong	local02, fp
1d3dc     0C 4E 05 F1 | 	add	fp, #12
1d3e0     A7 12 02 FB | 	rdlong	arg01, fp
1d3e4     0C 4E 85 F1 | 	sub	fp, #12
1d3e8     09 13 52 F6 | 	abs	arg01, arg01 wc
1d3ec     1F 2E C6 C9 |  if_b	decod	local05, #31
1d3f0     00 2E 06 36 |  if_ae	mov	local05, #0
1d3f4     04 B0 B0 FD | 	call	#__system___float_fromuns
1d3f8     17 FB 61 F5 | 	xor	result1, local05
1d3fc     FD 14 02 F6 | 	mov	arg02, result1
1d400     14 13 02 F6 | 	mov	arg01, local02
1d404     01 16 66 F6 | 	neg	arg03, #1
1d408     28 B8 B0 FD | 	call	#__system___float_cmp
1d40c     00 FA 55 F2 | 	cmps	result1, #0 wc
1d410     00 26 26 36 |  if_ae	not	local01, #0
1d414     A7 26 62 FC | 	wrlong	local01, fp
1d418     60 03 90 FD | 	jmp	#LR__2393
1d41c                 | LR__2382
1d41c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1d41c     08 4E 05 F1 | 	add	fp, #8
1d420     A7 26 02 FB | 	rdlong	local01, fp
1d424     08 4E 85 F1 | 	sub	fp, #8
1d428     1E 26 0E F2 | 	cmp	local01, #30 wz
1d42c     14 4E 05 A1 |  if_e	add	fp, #20
1d430     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d434     14 4E 85 A1 |  if_e	sub	fp, #20
1d438     16 2B 02 A6 |  if_e	mov	local03, local04
1d43c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d440     38 00 90 5D |  if_ne	jmp	#LR__2383
1d444     00 26 06 F6 | 	mov	local01, #0
1d448     A7 28 02 FB | 	rdlong	local02, fp
1d44c     0C 4E 05 F1 | 	add	fp, #12
1d450     A7 12 02 FB | 	rdlong	arg01, fp
1d454     0C 4E 85 F1 | 	sub	fp, #12
1d458     A0 AF B0 FD | 	call	#__system___float_fromuns
1d45c     FD 14 02 F6 | 	mov	arg02, result1
1d460     14 13 02 F6 | 	mov	arg01, local02
1d464     01 16 66 F6 | 	neg	arg03, #1
1d468     C8 B7 B0 FD | 	call	#__system___float_cmp
1d46c     00 FA 55 F2 | 	cmps	result1, #0 wc
1d470     00 26 26 36 |  if_ae	not	local01, #0
1d474     A7 26 62 FC | 	wrlong	local01, fp
1d478     00 03 90 FD | 	jmp	#LR__2393
1d47c                 | LR__2383
1d47c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1d47c     08 4E 05 F1 | 	add	fp, #8
1d480     A7 26 02 FB | 	rdlong	local01, fp
1d484     08 4E 85 F1 | 	sub	fp, #8
1d488     1C 26 0E F2 | 	cmp	local01, #28 wz
1d48c     14 4E 05 A1 |  if_e	add	fp, #20
1d490     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d494     14 4E 85 A1 |  if_e	sub	fp, #20
1d498     16 2B 02 A6 |  if_e	mov	local03, local04
1d49c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d4a0     44 00 90 5D |  if_ne	jmp	#LR__2384
1d4a4     00 26 06 F6 | 	mov	local01, #0
1d4a8     A7 12 02 FB | 	rdlong	arg01, fp
1d4ac     09 13 52 F6 | 	abs	arg01, arg01 wc
1d4b0     1F 2E C6 C9 |  if_b	decod	local05, #31
1d4b4     00 2E 06 36 |  if_ae	mov	local05, #0
1d4b8     40 AF B0 FD | 	call	#__system___float_fromuns
1d4bc     17 FB 61 F5 | 	xor	result1, local05
1d4c0     FD 12 02 F6 | 	mov	arg01, result1
1d4c4     0C 4E 05 F1 | 	add	fp, #12
1d4c8     A7 14 02 FB | 	rdlong	arg02, fp
1d4cc     0C 4E 85 F1 | 	sub	fp, #12
1d4d0     01 16 66 F6 | 	neg	arg03, #1
1d4d4     5C B7 B0 FD | 	call	#__system___float_cmp
1d4d8     00 FA 55 F2 | 	cmps	result1, #0 wc
1d4dc     00 26 26 36 |  if_ae	not	local01, #0
1d4e0     A7 26 62 FC | 	wrlong	local01, fp
1d4e4     94 02 90 FD | 	jmp	#LR__2393
1d4e8                 | LR__2384
1d4e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1d4e8     08 4E 05 F1 | 	add	fp, #8
1d4ec     A7 26 02 FB | 	rdlong	local01, fp
1d4f0     08 4E 85 F1 | 	sub	fp, #8
1d4f4     1C 26 0E F2 | 	cmp	local01, #28 wz
1d4f8     14 4E 05 A1 |  if_e	add	fp, #20
1d4fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d500     14 4E 85 A1 |  if_e	sub	fp, #20
1d504     16 2B 02 A6 |  if_e	mov	local03, local04
1d508     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d50c     24 00 90 5D |  if_ne	jmp	#LR__2385
1d510     00 26 06 F6 | 	mov	local01, #0
1d514     A7 28 02 FB | 	rdlong	local02, fp
1d518     0C 4E 05 F1 | 	add	fp, #12
1d51c     A7 2A 02 FB | 	rdlong	local03, fp
1d520     0C 4E 85 F1 | 	sub	fp, #12
1d524     15 29 52 F2 | 	cmps	local02, local03 wc
1d528     01 26 66 36 |  if_ae	neg	local01, #1
1d52c     A7 26 62 FC | 	wrlong	local01, fp
1d530     48 02 90 FD | 	jmp	#LR__2393
1d534                 | LR__2385
1d534                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1d534     08 4E 05 F1 | 	add	fp, #8
1d538     A7 26 02 FB | 	rdlong	local01, fp
1d53c     08 4E 85 F1 | 	sub	fp, #8
1d540     1C 26 0E F2 | 	cmp	local01, #28 wz
1d544     14 4E 05 A1 |  if_e	add	fp, #20
1d548     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d54c     14 4E 85 A1 |  if_e	sub	fp, #20
1d550     16 2B 02 A6 |  if_e	mov	local03, local04
1d554     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d558     24 00 90 5D |  if_ne	jmp	#LR__2386
1d55c     00 26 06 F6 | 	mov	local01, #0
1d560     A7 28 02 FB | 	rdlong	local02, fp
1d564     0C 4E 05 F1 | 	add	fp, #12
1d568     A7 2A 02 FB | 	rdlong	local03, fp
1d56c     0C 4E 85 F1 | 	sub	fp, #12
1d570     15 29 52 F2 | 	cmps	local02, local03 wc
1d574     01 26 66 36 |  if_ae	neg	local01, #1
1d578     A7 26 62 FC | 	wrlong	local01, fp
1d57c     FC 01 90 FD | 	jmp	#LR__2393
1d580                 | LR__2386
1d580                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1d580     08 4E 05 F1 | 	add	fp, #8
1d584     A7 26 02 FB | 	rdlong	local01, fp
1d588     08 4E 85 F1 | 	sub	fp, #8
1d58c     1D 26 0E F2 | 	cmp	local01, #29 wz
1d590     14 4E 05 A1 |  if_e	add	fp, #20
1d594     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d598     14 4E 85 A1 |  if_e	sub	fp, #20
1d59c     16 2B 02 A6 |  if_e	mov	local03, local04
1d5a0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d5a4     34 00 90 5D |  if_ne	jmp	#LR__2387
1d5a8     00 26 06 F6 | 	mov	local01, #0
1d5ac     A7 12 02 FB | 	rdlong	arg01, fp
1d5b0     48 AE B0 FD | 	call	#__system___float_fromuns
1d5b4     FD 12 02 F6 | 	mov	arg01, result1
1d5b8     0C 4E 05 F1 | 	add	fp, #12
1d5bc     A7 14 02 FB | 	rdlong	arg02, fp
1d5c0     0C 4E 85 F1 | 	sub	fp, #12
1d5c4     01 16 66 F6 | 	neg	arg03, #1
1d5c8     68 B6 B0 FD | 	call	#__system___float_cmp
1d5cc     00 FA 55 F2 | 	cmps	result1, #0 wc
1d5d0     00 26 26 36 |  if_ae	not	local01, #0
1d5d4     A7 26 62 FC | 	wrlong	local01, fp
1d5d8     A0 01 90 FD | 	jmp	#LR__2393
1d5dc                 | LR__2387
1d5dc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1d5dc     08 4E 05 F1 | 	add	fp, #8
1d5e0     A7 26 02 FB | 	rdlong	local01, fp
1d5e4     08 4E 85 F1 | 	sub	fp, #8
1d5e8     1D 26 0E F2 | 	cmp	local01, #29 wz
1d5ec     14 4E 05 A1 |  if_e	add	fp, #20
1d5f0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d5f4     14 4E 85 A1 |  if_e	sub	fp, #20
1d5f8     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1d5fc     24 00 90 5D |  if_ne	jmp	#LR__2388
1d600     00 26 06 F6 | 	mov	local01, #0
1d604     A7 28 02 FB | 	rdlong	local02, fp
1d608     0C 4E 05 F1 | 	add	fp, #12
1d60c     A7 2A 02 FB | 	rdlong	local03, fp
1d610     0C 4E 85 F1 | 	sub	fp, #12
1d614     15 29 52 F2 | 	cmps	local02, local03 wc
1d618     01 26 66 36 |  if_ae	neg	local01, #1
1d61c     A7 26 62 FC | 	wrlong	local01, fp
1d620     58 01 90 FD | 	jmp	#LR__2393
1d624                 | LR__2388
1d624                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1d624     08 4E 05 F1 | 	add	fp, #8
1d628     A7 26 02 FB | 	rdlong	local01, fp
1d62c     08 4E 85 F1 | 	sub	fp, #8
1d630     1D 26 0E F2 | 	cmp	local01, #29 wz
1d634     14 4E 05 A1 |  if_e	add	fp, #20
1d638     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d63c     14 4E 85 A1 |  if_e	sub	fp, #20
1d640     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d644     24 00 90 5D |  if_ne	jmp	#LR__2389
1d648     00 26 06 F6 | 	mov	local01, #0
1d64c     A7 28 02 FB | 	rdlong	local02, fp
1d650     0C 4E 05 F1 | 	add	fp, #12
1d654     A7 2A 02 FB | 	rdlong	local03, fp
1d658     0C 4E 85 F1 | 	sub	fp, #12
1d65c     15 29 12 F2 | 	cmp	local02, local03 wc
1d660     01 26 66 36 |  if_ae	neg	local01, #1
1d664     A7 26 62 FC | 	wrlong	local01, fp
1d668     10 01 90 FD | 	jmp	#LR__2393
1d66c                 | LR__2389
1d66c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1d66c     08 4E 05 F1 | 	add	fp, #8
1d670     A7 26 02 FB | 	rdlong	local01, fp
1d674     08 4E 85 F1 | 	sub	fp, #8
1d678     2B 26 0E F2 | 	cmp	local01, #43 wz
1d67c     14 4E 05 A1 |  if_e	add	fp, #20
1d680     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d684     14 4E 85 A1 |  if_e	sub	fp, #20
1d688     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d68c     30 00 90 5D |  if_ne	jmp	#LR__2390
1d690     00 26 06 F6 | 	mov	local01, #0
1d694     A7 12 02 FB | 	rdlong	arg01, fp
1d698     5C F7 BE FD | 	call	#_convertstring
1d69c     FD 12 02 F6 | 	mov	arg01, result1
1d6a0     0C 4E 05 F1 | 	add	fp, #12
1d6a4     A7 14 02 FB | 	rdlong	arg02, fp
1d6a8     0C 4E 85 F1 | 	sub	fp, #12
1d6ac     00 83 B0 FD | 	call	#__system___string_cmp
1d6b0     00 FA 55 F2 | 	cmps	result1, #0 wc
1d6b4     00 26 26 36 |  if_ae	not	local01, #0
1d6b8     A7 26 62 FC | 	wrlong	local01, fp
1d6bc     BC 00 90 FD | 	jmp	#LR__2393
1d6c0                 | LR__2390
1d6c0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1d6c0     08 4E 05 F1 | 	add	fp, #8
1d6c4     A7 26 02 FB | 	rdlong	local01, fp
1d6c8     08 4E 85 F1 | 	sub	fp, #8
1d6cc     1F 26 0E F2 | 	cmp	local01, #31 wz
1d6d0     14 4E 05 A1 |  if_e	add	fp, #20
1d6d4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d6d8     14 4E 85 A1 |  if_e	sub	fp, #20
1d6dc     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d6e0     34 00 90 5D |  if_ne	jmp	#LR__2391
1d6e4     00 26 06 F6 | 	mov	local01, #0
1d6e8     A7 28 02 FB | 	rdlong	local02, fp
1d6ec     0C 4E 05 F1 | 	add	fp, #12
1d6f0     A7 12 02 FB | 	rdlong	arg01, fp
1d6f4     0C 4E 85 F1 | 	sub	fp, #12
1d6f8     FC F6 BE FD | 	call	#_convertstring
1d6fc     FD 14 02 F6 | 	mov	arg02, result1
1d700     14 13 02 F6 | 	mov	arg01, local02
1d704     A8 82 B0 FD | 	call	#__system___string_cmp
1d708     00 FA 55 F2 | 	cmps	result1, #0 wc
1d70c     00 26 26 36 |  if_ae	not	local01, #0
1d710     A7 26 62 FC | 	wrlong	local01, fp
1d714     64 00 90 FD | 	jmp	#LR__2393
1d718                 | LR__2391
1d718                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1d718     08 4E 05 F1 | 	add	fp, #8
1d71c     A7 26 02 FB | 	rdlong	local01, fp
1d720     08 4E 85 F1 | 	sub	fp, #8
1d724     2B 26 0E F2 | 	cmp	local01, #43 wz
1d728     14 4E 05 A1 |  if_e	add	fp, #20
1d72c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d730     14 4E 85 A1 |  if_e	sub	fp, #20
1d734     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d738     3C 00 90 5D |  if_ne	jmp	#LR__2392
1d73c     00 26 06 F6 | 	mov	local01, #0
1d740     A7 12 02 FB | 	rdlong	arg01, fp
1d744     B0 F6 BE FD | 	call	#_convertstring
1d748     FD 28 02 F6 | 	mov	local02, result1
1d74c     0C 4E 05 F1 | 	add	fp, #12
1d750     A7 12 02 FB | 	rdlong	arg01, fp
1d754     0C 4E 85 F1 | 	sub	fp, #12
1d758     9C F6 BE FD | 	call	#_convertstring
1d75c     FD 14 02 F6 | 	mov	arg02, result1
1d760     14 13 02 F6 | 	mov	arg01, local02
1d764     48 82 B0 FD | 	call	#__system___string_cmp
1d768     00 FA 55 F2 | 	cmps	result1, #0 wc
1d76c     00 26 26 36 |  if_ae	not	local01, #0
1d770     A7 26 62 FC | 	wrlong	local01, fp
1d774     04 00 90 FD | 	jmp	#LR__2393
1d778                 | LR__2392
1d778     A7 00 68 FC | 	wrlong	#0, fp
1d77c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d77c                 | LR__2393
1d77c     08 4E 05 F1 | 	add	fp, #8
1d780     A7 38 68 FC | 	wrlong	#28, fp
1d784     08 4E 85 F1 | 	sub	fp, #8
1d788                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d788     A7 26 0A FB | 	rdlong	local01, fp wz
1d78c     A7 02 68 5C |  if_ne	wrlong	#1, fp
1d790     A7 12 02 F6 | 	mov	arg01, fp
1d794     80 F5 BE FD | 	call	#_push
1d798     A7 F0 03 F6 | 	mov	ptra, fp
1d79c     B2 00 A0 FD | 	call	#popregs_
1d7a0                 | _do_ge_ret
1d7a0     2D 00 64 FD | 	ret
1d7a4                 | 
1d7a4                 | ' 
1d7a4                 | ' '--------------------------------- greater than (>)
1d7a4                 | ' 
1d7a4                 | ' sub do_gt
1d7a4                 | _do_gt
1d7a4     05 4A 05 F6 | 	mov	COUNT_, #5
1d7a8     A8 00 A0 FD | 	call	#pushregs_
1d7ac     18 F0 07 F1 | 	add	ptra, #24
1d7b0     CC F4 BE FD | 	call	#_pop
1d7b4     FD 26 02 F6 | 	mov	local01, result1
1d7b8     FE 28 02 F6 | 	mov	local02, result2
1d7bc     FF 2A 02 F6 | 	mov	local03, result3
1d7c0     0C 4E 05 F1 | 	add	fp, #12
1d7c4     A7 26 62 FC | 	wrlong	local01, fp
1d7c8     04 4E 05 F1 | 	add	fp, #4
1d7cc     A7 28 62 FC | 	wrlong	local02, fp
1d7d0     04 4E 05 F1 | 	add	fp, #4
1d7d4     A7 2A 62 FC | 	wrlong	local03, fp
1d7d8     14 4E 85 F1 | 	sub	fp, #20
1d7dc     A0 F4 BE FD | 	call	#_pop
1d7e0     FF 2A 02 F6 | 	mov	local03, result3
1d7e4     A7 FA 61 FC | 	wrlong	result1, fp
1d7e8     04 4E 05 F1 | 	add	fp, #4
1d7ec     A7 FC 61 FC | 	wrlong	result2, fp
1d7f0     04 4E 05 F1 | 	add	fp, #4
1d7f4     A7 2A 62 FC | 	wrlong	local03, fp
1d7f8                 | ' 
1d7f8                 | ' t2=pop()
1d7f8                 | ' t1=pop()
1d7f8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1d7f8     08 4E 85 F1 | 	sub	fp, #8
1d7fc     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d800     14 4E 05 A1 |  if_e	add	fp, #20
1d804     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d808     14 4E 85 A1 |  if_e	sub	fp, #20
1d80c     16 2B 02 A6 |  if_e	mov	local03, local04
1d810     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d814     28 00 90 5D |  if_ne	jmp	#LR__2400
1d818     00 26 06 F6 | 	mov	local01, #0
1d81c     A7 12 02 FB | 	rdlong	arg01, fp
1d820     0C 4E 05 F1 | 	add	fp, #12
1d824     A7 14 02 FB | 	rdlong	arg02, fp
1d828     0C 4E 85 F1 | 	sub	fp, #12
1d82c     80 81 B0 FD | 	call	#__system___string_cmp
1d830     01 FA 55 F2 | 	cmps	result1, #1 wc
1d834     00 26 26 36 |  if_ae	not	local01, #0
1d838     A7 26 62 FC | 	wrlong	local01, fp
1d83c     20 04 90 FD | 	jmp	#LR__2413
1d840                 | LR__2400
1d840                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1d840     08 4E 05 F1 | 	add	fp, #8
1d844     A7 26 02 FB | 	rdlong	local01, fp
1d848     08 4E 85 F1 | 	sub	fp, #8
1d84c     1E 26 0E F2 | 	cmp	local01, #30 wz
1d850     14 4E 05 A1 |  if_e	add	fp, #20
1d854     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d858     14 4E 85 A1 |  if_e	sub	fp, #20
1d85c     16 2B 02 A6 |  if_e	mov	local03, local04
1d860     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d864     2C 00 90 5D |  if_ne	jmp	#LR__2401
1d868     00 26 06 F6 | 	mov	local01, #0
1d86c     A7 12 02 FB | 	rdlong	arg01, fp
1d870     0C 4E 05 F1 | 	add	fp, #12
1d874     A7 14 02 FB | 	rdlong	arg02, fp
1d878     0C 4E 85 F1 | 	sub	fp, #12
1d87c     01 16 66 F6 | 	neg	arg03, #1
1d880     B0 B3 B0 FD | 	call	#__system___float_cmp
1d884     01 FA 55 F2 | 	cmps	result1, #1 wc
1d888     00 26 26 36 |  if_ae	not	local01, #0
1d88c     A7 26 62 FC | 	wrlong	local01, fp
1d890     CC 03 90 FD | 	jmp	#LR__2413
1d894                 | LR__2401
1d894                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1d894     08 4E 05 F1 | 	add	fp, #8
1d898     A7 26 02 FB | 	rdlong	local01, fp
1d89c     08 4E 85 F1 | 	sub	fp, #8
1d8a0     1E 26 0E F2 | 	cmp	local01, #30 wz
1d8a4     14 4E 05 A1 |  if_e	add	fp, #20
1d8a8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d8ac     14 4E 85 A1 |  if_e	sub	fp, #20
1d8b0     16 2B 02 A6 |  if_e	mov	local03, local04
1d8b4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d8b8     48 00 90 5D |  if_ne	jmp	#LR__2402
1d8bc     00 26 06 F6 | 	mov	local01, #0
1d8c0     A7 28 02 FB | 	rdlong	local02, fp
1d8c4     0C 4E 05 F1 | 	add	fp, #12
1d8c8     A7 12 02 FB | 	rdlong	arg01, fp
1d8cc     0C 4E 85 F1 | 	sub	fp, #12
1d8d0     09 13 52 F6 | 	abs	arg01, arg01 wc
1d8d4     1F 2E C6 C9 |  if_b	decod	local05, #31
1d8d8     00 2E 06 36 |  if_ae	mov	local05, #0
1d8dc     1C AB B0 FD | 	call	#__system___float_fromuns
1d8e0     17 FB 61 F5 | 	xor	result1, local05
1d8e4     FD 14 02 F6 | 	mov	arg02, result1
1d8e8     14 13 02 F6 | 	mov	arg01, local02
1d8ec     01 16 66 F6 | 	neg	arg03, #1
1d8f0     40 B3 B0 FD | 	call	#__system___float_cmp
1d8f4     01 FA 55 F2 | 	cmps	result1, #1 wc
1d8f8     00 26 26 36 |  if_ae	not	local01, #0
1d8fc     A7 26 62 FC | 	wrlong	local01, fp
1d900     5C 03 90 FD | 	jmp	#LR__2413
1d904                 | LR__2402
1d904                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1d904     08 4E 05 F1 | 	add	fp, #8
1d908     A7 26 02 FB | 	rdlong	local01, fp
1d90c     08 4E 85 F1 | 	sub	fp, #8
1d910     1E 26 0E F2 | 	cmp	local01, #30 wz
1d914     14 4E 05 A1 |  if_e	add	fp, #20
1d918     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d91c     14 4E 85 A1 |  if_e	sub	fp, #20
1d920     16 2B 02 A6 |  if_e	mov	local03, local04
1d924     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d928     38 00 90 5D |  if_ne	jmp	#LR__2403
1d92c     00 26 06 F6 | 	mov	local01, #0
1d930     A7 28 02 FB | 	rdlong	local02, fp
1d934     0C 4E 05 F1 | 	add	fp, #12
1d938     A7 12 02 FB | 	rdlong	arg01, fp
1d93c     0C 4E 85 F1 | 	sub	fp, #12
1d940     B8 AA B0 FD | 	call	#__system___float_fromuns
1d944     FD 14 02 F6 | 	mov	arg02, result1
1d948     14 13 02 F6 | 	mov	arg01, local02
1d94c     01 16 66 F6 | 	neg	arg03, #1
1d950     E0 B2 B0 FD | 	call	#__system___float_cmp
1d954     01 FA 55 F2 | 	cmps	result1, #1 wc
1d958     00 26 26 36 |  if_ae	not	local01, #0
1d95c     A7 26 62 FC | 	wrlong	local01, fp
1d960     FC 02 90 FD | 	jmp	#LR__2413
1d964                 | LR__2403
1d964                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1d964     08 4E 05 F1 | 	add	fp, #8
1d968     A7 26 02 FB | 	rdlong	local01, fp
1d96c     08 4E 85 F1 | 	sub	fp, #8
1d970     1C 26 0E F2 | 	cmp	local01, #28 wz
1d974     14 4E 05 A1 |  if_e	add	fp, #20
1d978     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d97c     14 4E 85 A1 |  if_e	sub	fp, #20
1d980     16 2B 02 A6 |  if_e	mov	local03, local04
1d984     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d988     44 00 90 5D |  if_ne	jmp	#LR__2404
1d98c     00 26 06 F6 | 	mov	local01, #0
1d990     A7 12 02 FB | 	rdlong	arg01, fp
1d994     09 13 52 F6 | 	abs	arg01, arg01 wc
1d998     1F 2E C6 C9 |  if_b	decod	local05, #31
1d99c     00 2E 06 36 |  if_ae	mov	local05, #0
1d9a0     58 AA B0 FD | 	call	#__system___float_fromuns
1d9a4     17 FB 61 F5 | 	xor	result1, local05
1d9a8     FD 12 02 F6 | 	mov	arg01, result1
1d9ac     0C 4E 05 F1 | 	add	fp, #12
1d9b0     A7 14 02 FB | 	rdlong	arg02, fp
1d9b4     0C 4E 85 F1 | 	sub	fp, #12
1d9b8     01 16 66 F6 | 	neg	arg03, #1
1d9bc     74 B2 B0 FD | 	call	#__system___float_cmp
1d9c0     01 FA 55 F2 | 	cmps	result1, #1 wc
1d9c4     00 26 26 36 |  if_ae	not	local01, #0
1d9c8     A7 26 62 FC | 	wrlong	local01, fp
1d9cc     90 02 90 FD | 	jmp	#LR__2413
1d9d0                 | LR__2404
1d9d0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1d9d0     08 4E 05 F1 | 	add	fp, #8
1d9d4     A7 26 02 FB | 	rdlong	local01, fp
1d9d8     08 4E 85 F1 | 	sub	fp, #8
1d9dc     1C 26 0E F2 | 	cmp	local01, #28 wz
1d9e0     14 4E 05 A1 |  if_e	add	fp, #20
1d9e4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d9e8     14 4E 85 A1 |  if_e	sub	fp, #20
1d9ec     16 2B 02 A6 |  if_e	mov	local03, local04
1d9f0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d9f4     24 00 90 5D |  if_ne	jmp	#LR__2405
1d9f8     00 26 06 F6 | 	mov	local01, #0
1d9fc     A7 28 02 FB | 	rdlong	local02, fp
1da00     0C 4E 05 F1 | 	add	fp, #12
1da04     A7 2A 02 FB | 	rdlong	local03, fp
1da08     0C 4E 85 F1 | 	sub	fp, #12
1da0c     15 29 5A F2 | 	cmps	local02, local03 wcz
1da10     01 26 66 16 |  if_a	neg	local01, #1
1da14     A7 26 62 FC | 	wrlong	local01, fp
1da18     44 02 90 FD | 	jmp	#LR__2413
1da1c                 | LR__2405
1da1c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1da1c     08 4E 05 F1 | 	add	fp, #8
1da20     A7 26 02 FB | 	rdlong	local01, fp
1da24     08 4E 85 F1 | 	sub	fp, #8
1da28     1C 26 0E F2 | 	cmp	local01, #28 wz
1da2c     14 4E 05 A1 |  if_e	add	fp, #20
1da30     A7 2C 02 AB |  if_e	rdlong	local04, fp
1da34     14 4E 85 A1 |  if_e	sub	fp, #20
1da38     16 2B 02 A6 |  if_e	mov	local03, local04
1da3c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1da40     24 00 90 5D |  if_ne	jmp	#LR__2406
1da44     00 26 06 F6 | 	mov	local01, #0
1da48     A7 28 02 FB | 	rdlong	local02, fp
1da4c     0C 4E 05 F1 | 	add	fp, #12
1da50     A7 2A 02 FB | 	rdlong	local03, fp
1da54     0C 4E 85 F1 | 	sub	fp, #12
1da58     15 29 5A F2 | 	cmps	local02, local03 wcz
1da5c     01 26 66 16 |  if_a	neg	local01, #1
1da60     A7 26 62 FC | 	wrlong	local01, fp
1da64     F8 01 90 FD | 	jmp	#LR__2413
1da68                 | LR__2406
1da68                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1da68     08 4E 05 F1 | 	add	fp, #8
1da6c     A7 26 02 FB | 	rdlong	local01, fp
1da70     08 4E 85 F1 | 	sub	fp, #8
1da74     1D 26 0E F2 | 	cmp	local01, #29 wz
1da78     14 4E 05 A1 |  if_e	add	fp, #20
1da7c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1da80     14 4E 85 A1 |  if_e	sub	fp, #20
1da84     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1da88     34 00 90 5D |  if_ne	jmp	#LR__2407
1da8c     00 26 06 F6 | 	mov	local01, #0
1da90     A7 12 02 FB | 	rdlong	arg01, fp
1da94     64 A9 B0 FD | 	call	#__system___float_fromuns
1da98     FD 12 02 F6 | 	mov	arg01, result1
1da9c     0C 4E 05 F1 | 	add	fp, #12
1daa0     A7 14 02 FB | 	rdlong	arg02, fp
1daa4     0C 4E 85 F1 | 	sub	fp, #12
1daa8     01 16 66 F6 | 	neg	arg03, #1
1daac     84 B1 B0 FD | 	call	#__system___float_cmp
1dab0     01 FA 55 F2 | 	cmps	result1, #1 wc
1dab4     00 26 26 36 |  if_ae	not	local01, #0
1dab8     A7 26 62 FC | 	wrlong	local01, fp
1dabc     A0 01 90 FD | 	jmp	#LR__2413
1dac0                 | LR__2407
1dac0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1dac0     08 4E 05 F1 | 	add	fp, #8
1dac4     A7 26 02 FB | 	rdlong	local01, fp
1dac8     08 4E 85 F1 | 	sub	fp, #8
1dacc     1D 26 0E F2 | 	cmp	local01, #29 wz
1dad0     14 4E 05 A1 |  if_e	add	fp, #20
1dad4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dad8     14 4E 85 A1 |  if_e	sub	fp, #20
1dadc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dae0     24 00 90 5D |  if_ne	jmp	#LR__2408
1dae4     00 26 06 F6 | 	mov	local01, #0
1dae8     A7 28 02 FB | 	rdlong	local02, fp
1daec     0C 4E 05 F1 | 	add	fp, #12
1daf0     A7 2A 02 FB | 	rdlong	local03, fp
1daf4     0C 4E 85 F1 | 	sub	fp, #12
1daf8     15 29 5A F2 | 	cmps	local02, local03 wcz
1dafc     01 26 66 16 |  if_a	neg	local01, #1
1db00     A7 26 62 FC | 	wrlong	local01, fp
1db04     58 01 90 FD | 	jmp	#LR__2413
1db08                 | LR__2408
1db08                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1db08     08 4E 05 F1 | 	add	fp, #8
1db0c     A7 26 02 FB | 	rdlong	local01, fp
1db10     08 4E 85 F1 | 	sub	fp, #8
1db14     1D 26 0E F2 | 	cmp	local01, #29 wz
1db18     14 4E 05 A1 |  if_e	add	fp, #20
1db1c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1db20     14 4E 85 A1 |  if_e	sub	fp, #20
1db24     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1db28     24 00 90 5D |  if_ne	jmp	#LR__2409
1db2c     00 26 06 F6 | 	mov	local01, #0
1db30     A7 28 02 FB | 	rdlong	local02, fp
1db34     0C 4E 05 F1 | 	add	fp, #12
1db38     A7 2A 02 FB | 	rdlong	local03, fp
1db3c     0C 4E 85 F1 | 	sub	fp, #12
1db40     15 29 1A F2 | 	cmp	local02, local03 wcz
1db44     01 26 66 16 |  if_a	neg	local01, #1
1db48     A7 26 62 FC | 	wrlong	local01, fp
1db4c     10 01 90 FD | 	jmp	#LR__2413
1db50                 | LR__2409
1db50                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1db50     08 4E 05 F1 | 	add	fp, #8
1db54     A7 26 02 FB | 	rdlong	local01, fp
1db58     08 4E 85 F1 | 	sub	fp, #8
1db5c     2B 26 0E F2 | 	cmp	local01, #43 wz
1db60     14 4E 05 A1 |  if_e	add	fp, #20
1db64     A7 2A 02 AB |  if_e	rdlong	local03, fp
1db68     14 4E 85 A1 |  if_e	sub	fp, #20
1db6c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1db70     30 00 90 5D |  if_ne	jmp	#LR__2410
1db74     00 26 06 F6 | 	mov	local01, #0
1db78     A7 12 02 FB | 	rdlong	arg01, fp
1db7c     78 F2 BE FD | 	call	#_convertstring
1db80     FD 12 02 F6 | 	mov	arg01, result1
1db84     0C 4E 05 F1 | 	add	fp, #12
1db88     A7 14 02 FB | 	rdlong	arg02, fp
1db8c     0C 4E 85 F1 | 	sub	fp, #12
1db90     1C 7E B0 FD | 	call	#__system___string_cmp
1db94     01 FA 55 F2 | 	cmps	result1, #1 wc
1db98     00 26 26 36 |  if_ae	not	local01, #0
1db9c     A7 26 62 FC | 	wrlong	local01, fp
1dba0     BC 00 90 FD | 	jmp	#LR__2413
1dba4                 | LR__2410
1dba4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1dba4     08 4E 05 F1 | 	add	fp, #8
1dba8     A7 26 02 FB | 	rdlong	local01, fp
1dbac     08 4E 85 F1 | 	sub	fp, #8
1dbb0     1F 26 0E F2 | 	cmp	local01, #31 wz
1dbb4     14 4E 05 A1 |  if_e	add	fp, #20
1dbb8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dbbc     14 4E 85 A1 |  if_e	sub	fp, #20
1dbc0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1dbc4     34 00 90 5D |  if_ne	jmp	#LR__2411
1dbc8     00 26 06 F6 | 	mov	local01, #0
1dbcc     A7 28 02 FB | 	rdlong	local02, fp
1dbd0     0C 4E 05 F1 | 	add	fp, #12
1dbd4     A7 12 02 FB | 	rdlong	arg01, fp
1dbd8     0C 4E 85 F1 | 	sub	fp, #12
1dbdc     18 F2 BE FD | 	call	#_convertstring
1dbe0     FD 14 02 F6 | 	mov	arg02, result1
1dbe4     14 13 02 F6 | 	mov	arg01, local02
1dbe8     C4 7D B0 FD | 	call	#__system___string_cmp
1dbec     01 FA 55 F2 | 	cmps	result1, #1 wc
1dbf0     00 26 26 36 |  if_ae	not	local01, #0
1dbf4     A7 26 62 FC | 	wrlong	local01, fp
1dbf8     64 00 90 FD | 	jmp	#LR__2413
1dbfc                 | LR__2411
1dbfc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1dbfc     08 4E 05 F1 | 	add	fp, #8
1dc00     A7 26 02 FB | 	rdlong	local01, fp
1dc04     08 4E 85 F1 | 	sub	fp, #8
1dc08     2B 26 0E F2 | 	cmp	local01, #43 wz
1dc0c     14 4E 05 A1 |  if_e	add	fp, #20
1dc10     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dc14     14 4E 85 A1 |  if_e	sub	fp, #20
1dc18     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1dc1c     3C 00 90 5D |  if_ne	jmp	#LR__2412
1dc20     00 26 06 F6 | 	mov	local01, #0
1dc24     A7 12 02 FB | 	rdlong	arg01, fp
1dc28     CC F1 BE FD | 	call	#_convertstring
1dc2c     FD 28 02 F6 | 	mov	local02, result1
1dc30     0C 4E 05 F1 | 	add	fp, #12
1dc34     A7 12 02 FB | 	rdlong	arg01, fp
1dc38     0C 4E 85 F1 | 	sub	fp, #12
1dc3c     B8 F1 BE FD | 	call	#_convertstring
1dc40     FD 14 02 F6 | 	mov	arg02, result1
1dc44     14 13 02 F6 | 	mov	arg01, local02
1dc48     64 7D B0 FD | 	call	#__system___string_cmp
1dc4c     01 FA 55 F2 | 	cmps	result1, #1 wc
1dc50     00 26 26 36 |  if_ae	not	local01, #0
1dc54     A7 26 62 FC | 	wrlong	local01, fp
1dc58     04 00 90 FD | 	jmp	#LR__2413
1dc5c                 | LR__2412
1dc5c     A7 00 68 FC | 	wrlong	#0, fp
1dc60                 | LR__2413
1dc60     08 4E 05 F1 | 	add	fp, #8
1dc64     A7 38 68 FC | 	wrlong	#28, fp
1dc68     08 4E 85 F1 | 	sub	fp, #8
1dc6c                 | ' t1.result.uresult=0
1dc6c                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1dc6c     A7 26 0A FB | 	rdlong	local01, fp wz
1dc70     A7 02 68 5C |  if_ne	wrlong	#1, fp
1dc74     A7 12 02 F6 | 	mov	arg01, fp
1dc78     9C F0 BE FD | 	call	#_push
1dc7c     A7 F0 03 F6 | 	mov	ptra, fp
1dc80     B2 00 A0 FD | 	call	#popregs_
1dc84                 | _do_gt_ret
1dc84     2D 00 64 FD | 	ret
1dc88                 | 
1dc88                 | ' 
1dc88                 | ' '--------------------------------- less or equal (<=)
1dc88                 | ' 
1dc88                 | ' sub do_le
1dc88                 | _do_le
1dc88     05 4A 05 F6 | 	mov	COUNT_, #5
1dc8c     A8 00 A0 FD | 	call	#pushregs_
1dc90     18 F0 07 F1 | 	add	ptra, #24
1dc94     E8 EF BE FD | 	call	#_pop
1dc98     FD 26 02 F6 | 	mov	local01, result1
1dc9c     FE 28 02 F6 | 	mov	local02, result2
1dca0     FF 2A 02 F6 | 	mov	local03, result3
1dca4     0C 4E 05 F1 | 	add	fp, #12
1dca8     A7 26 62 FC | 	wrlong	local01, fp
1dcac     04 4E 05 F1 | 	add	fp, #4
1dcb0     A7 28 62 FC | 	wrlong	local02, fp
1dcb4     04 4E 05 F1 | 	add	fp, #4
1dcb8     A7 2A 62 FC | 	wrlong	local03, fp
1dcbc     14 4E 85 F1 | 	sub	fp, #20
1dcc0     BC EF BE FD | 	call	#_pop
1dcc4     FF 2A 02 F6 | 	mov	local03, result3
1dcc8     A7 FA 61 FC | 	wrlong	result1, fp
1dccc     04 4E 05 F1 | 	add	fp, #4
1dcd0     A7 FC 61 FC | 	wrlong	result2, fp
1dcd4     04 4E 05 F1 | 	add	fp, #4
1dcd8     A7 2A 62 FC | 	wrlong	local03, fp
1dcdc                 | ' 
1dcdc                 | ' t2=pop()
1dcdc                 | ' t1=pop()
1dcdc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1dcdc     08 4E 85 F1 | 	sub	fp, #8
1dce0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1dce4     14 4E 05 A1 |  if_e	add	fp, #20
1dce8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dcec     14 4E 85 A1 |  if_e	sub	fp, #20
1dcf0     16 2B 02 A6 |  if_e	mov	local03, local04
1dcf4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1dcf8     28 00 90 5D |  if_ne	jmp	#LR__2420
1dcfc     00 26 06 F6 | 	mov	local01, #0
1dd00     A7 12 02 FB | 	rdlong	arg01, fp
1dd04     0C 4E 05 F1 | 	add	fp, #12
1dd08     A7 14 02 FB | 	rdlong	arg02, fp
1dd0c     0C 4E 85 F1 | 	sub	fp, #12
1dd10     9C 7C B0 FD | 	call	#__system___string_cmp
1dd14     01 FA 55 F2 | 	cmps	result1, #1 wc
1dd18     00 26 26 C6 |  if_b	not	local01, #0
1dd1c     A7 26 62 FC | 	wrlong	local01, fp
1dd20     20 04 90 FD | 	jmp	#LR__2433
1dd24                 | LR__2420
1dd24                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1dd24     08 4E 05 F1 | 	add	fp, #8
1dd28     A7 26 02 FB | 	rdlong	local01, fp
1dd2c     08 4E 85 F1 | 	sub	fp, #8
1dd30     1E 26 0E F2 | 	cmp	local01, #30 wz
1dd34     14 4E 05 A1 |  if_e	add	fp, #20
1dd38     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dd3c     14 4E 85 A1 |  if_e	sub	fp, #20
1dd40     16 2B 02 A6 |  if_e	mov	local03, local04
1dd44     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1dd48     2C 00 90 5D |  if_ne	jmp	#LR__2421
1dd4c     00 26 06 F6 | 	mov	local01, #0
1dd50     A7 12 02 FB | 	rdlong	arg01, fp
1dd54     0C 4E 05 F1 | 	add	fp, #12
1dd58     A7 14 02 FB | 	rdlong	arg02, fp
1dd5c     0C 4E 85 F1 | 	sub	fp, #12
1dd60     01 16 06 F6 | 	mov	arg03, #1
1dd64     CC AE B0 FD | 	call	#__system___float_cmp
1dd68     01 FA 55 F2 | 	cmps	result1, #1 wc
1dd6c     00 26 26 C6 |  if_b	not	local01, #0
1dd70     A7 26 62 FC | 	wrlong	local01, fp
1dd74     CC 03 90 FD | 	jmp	#LR__2433
1dd78                 | LR__2421
1dd78                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1dd78     08 4E 05 F1 | 	add	fp, #8
1dd7c     A7 26 02 FB | 	rdlong	local01, fp
1dd80     08 4E 85 F1 | 	sub	fp, #8
1dd84     1E 26 0E F2 | 	cmp	local01, #30 wz
1dd88     14 4E 05 A1 |  if_e	add	fp, #20
1dd8c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dd90     14 4E 85 A1 |  if_e	sub	fp, #20
1dd94     16 2B 02 A6 |  if_e	mov	local03, local04
1dd98     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dd9c     48 00 90 5D |  if_ne	jmp	#LR__2422
1dda0     00 26 06 F6 | 	mov	local01, #0
1dda4     A7 28 02 FB | 	rdlong	local02, fp
1dda8     0C 4E 05 F1 | 	add	fp, #12
1ddac     A7 12 02 FB | 	rdlong	arg01, fp
1ddb0     0C 4E 85 F1 | 	sub	fp, #12
1ddb4     09 13 52 F6 | 	abs	arg01, arg01 wc
1ddb8     1F 2E C6 C9 |  if_b	decod	local05, #31
1ddbc     00 2E 06 36 |  if_ae	mov	local05, #0
1ddc0     38 A6 B0 FD | 	call	#__system___float_fromuns
1ddc4     17 FB 61 F5 | 	xor	result1, local05
1ddc8     FD 14 02 F6 | 	mov	arg02, result1
1ddcc     14 13 02 F6 | 	mov	arg01, local02
1ddd0     01 16 06 F6 | 	mov	arg03, #1
1ddd4     5C AE B0 FD | 	call	#__system___float_cmp
1ddd8     01 FA 55 F2 | 	cmps	result1, #1 wc
1dddc     00 26 26 C6 |  if_b	not	local01, #0
1dde0     A7 26 62 FC | 	wrlong	local01, fp
1dde4     5C 03 90 FD | 	jmp	#LR__2433
1dde8                 | LR__2422
1dde8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1dde8     08 4E 05 F1 | 	add	fp, #8
1ddec     A7 26 02 FB | 	rdlong	local01, fp
1ddf0     08 4E 85 F1 | 	sub	fp, #8
1ddf4     1E 26 0E F2 | 	cmp	local01, #30 wz
1ddf8     14 4E 05 A1 |  if_e	add	fp, #20
1ddfc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1de00     14 4E 85 A1 |  if_e	sub	fp, #20
1de04     16 2B 02 A6 |  if_e	mov	local03, local04
1de08     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1de0c     38 00 90 5D |  if_ne	jmp	#LR__2423
1de10     00 26 06 F6 | 	mov	local01, #0
1de14     A7 28 02 FB | 	rdlong	local02, fp
1de18     0C 4E 05 F1 | 	add	fp, #12
1de1c     A7 12 02 FB | 	rdlong	arg01, fp
1de20     0C 4E 85 F1 | 	sub	fp, #12
1de24     D4 A5 B0 FD | 	call	#__system___float_fromuns
1de28     FD 14 02 F6 | 	mov	arg02, result1
1de2c     14 13 02 F6 | 	mov	arg01, local02
1de30     01 16 06 F6 | 	mov	arg03, #1
1de34     FC AD B0 FD | 	call	#__system___float_cmp
1de38     01 FA 55 F2 | 	cmps	result1, #1 wc
1de3c     00 26 26 C6 |  if_b	not	local01, #0
1de40     A7 26 62 FC | 	wrlong	local01, fp
1de44     FC 02 90 FD | 	jmp	#LR__2433
1de48                 | LR__2423
1de48                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1de48     08 4E 05 F1 | 	add	fp, #8
1de4c     A7 26 02 FB | 	rdlong	local01, fp
1de50     08 4E 85 F1 | 	sub	fp, #8
1de54     1C 26 0E F2 | 	cmp	local01, #28 wz
1de58     14 4E 05 A1 |  if_e	add	fp, #20
1de5c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1de60     14 4E 85 A1 |  if_e	sub	fp, #20
1de64     16 2B 02 A6 |  if_e	mov	local03, local04
1de68     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1de6c     44 00 90 5D |  if_ne	jmp	#LR__2424
1de70     00 26 06 F6 | 	mov	local01, #0
1de74     A7 12 02 FB | 	rdlong	arg01, fp
1de78     09 13 52 F6 | 	abs	arg01, arg01 wc
1de7c     1F 2E C6 C9 |  if_b	decod	local05, #31
1de80     00 2E 06 36 |  if_ae	mov	local05, #0
1de84     74 A5 B0 FD | 	call	#__system___float_fromuns
1de88     17 FB 61 F5 | 	xor	result1, local05
1de8c     FD 12 02 F6 | 	mov	arg01, result1
1de90     0C 4E 05 F1 | 	add	fp, #12
1de94     A7 14 02 FB | 	rdlong	arg02, fp
1de98     0C 4E 85 F1 | 	sub	fp, #12
1de9c     01 16 06 F6 | 	mov	arg03, #1
1dea0     90 AD B0 FD | 	call	#__system___float_cmp
1dea4     01 FA 55 F2 | 	cmps	result1, #1 wc
1dea8     00 26 26 C6 |  if_b	not	local01, #0
1deac     A7 26 62 FC | 	wrlong	local01, fp
1deb0     90 02 90 FD | 	jmp	#LR__2433
1deb4                 | LR__2424
1deb4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1deb4     08 4E 05 F1 | 	add	fp, #8
1deb8     A7 26 02 FB | 	rdlong	local01, fp
1debc     08 4E 85 F1 | 	sub	fp, #8
1dec0     1C 26 0E F2 | 	cmp	local01, #28 wz
1dec4     14 4E 05 A1 |  if_e	add	fp, #20
1dec8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1decc     14 4E 85 A1 |  if_e	sub	fp, #20
1ded0     16 2B 02 A6 |  if_e	mov	local03, local04
1ded4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ded8     24 00 90 5D |  if_ne	jmp	#LR__2425
1dedc     00 26 06 F6 | 	mov	local01, #0
1dee0     A7 28 02 FB | 	rdlong	local02, fp
1dee4     0C 4E 05 F1 | 	add	fp, #12
1dee8     A7 2A 02 FB | 	rdlong	local03, fp
1deec     0C 4E 85 F1 | 	sub	fp, #12
1def0     15 29 5A F2 | 	cmps	local02, local03 wcz
1def4     01 26 66 E6 |  if_be	neg	local01, #1
1def8     A7 26 62 FC | 	wrlong	local01, fp
1defc     44 02 90 FD | 	jmp	#LR__2433
1df00                 | LR__2425
1df00                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1df00     08 4E 05 F1 | 	add	fp, #8
1df04     A7 26 02 FB | 	rdlong	local01, fp
1df08     08 4E 85 F1 | 	sub	fp, #8
1df0c     1C 26 0E F2 | 	cmp	local01, #28 wz
1df10     14 4E 05 A1 |  if_e	add	fp, #20
1df14     A7 2C 02 AB |  if_e	rdlong	local04, fp
1df18     14 4E 85 A1 |  if_e	sub	fp, #20
1df1c     16 2B 02 A6 |  if_e	mov	local03, local04
1df20     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1df24     24 00 90 5D |  if_ne	jmp	#LR__2426
1df28     00 26 06 F6 | 	mov	local01, #0
1df2c     A7 28 02 FB | 	rdlong	local02, fp
1df30     0C 4E 05 F1 | 	add	fp, #12
1df34     A7 2A 02 FB | 	rdlong	local03, fp
1df38     0C 4E 85 F1 | 	sub	fp, #12
1df3c     15 29 5A F2 | 	cmps	local02, local03 wcz
1df40     01 26 66 E6 |  if_be	neg	local01, #1
1df44     A7 26 62 FC | 	wrlong	local01, fp
1df48     F8 01 90 FD | 	jmp	#LR__2433
1df4c                 | LR__2426
1df4c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1df4c     08 4E 05 F1 | 	add	fp, #8
1df50     A7 26 02 FB | 	rdlong	local01, fp
1df54     08 4E 85 F1 | 	sub	fp, #8
1df58     1D 26 0E F2 | 	cmp	local01, #29 wz
1df5c     14 4E 05 A1 |  if_e	add	fp, #20
1df60     A7 2C 02 AB |  if_e	rdlong	local04, fp
1df64     14 4E 85 A1 |  if_e	sub	fp, #20
1df68     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1df6c     34 00 90 5D |  if_ne	jmp	#LR__2427
1df70     00 26 06 F6 | 	mov	local01, #0
1df74     A7 12 02 FB | 	rdlong	arg01, fp
1df78     80 A4 B0 FD | 	call	#__system___float_fromuns
1df7c     FD 12 02 F6 | 	mov	arg01, result1
1df80     0C 4E 05 F1 | 	add	fp, #12
1df84     A7 14 02 FB | 	rdlong	arg02, fp
1df88     0C 4E 85 F1 | 	sub	fp, #12
1df8c     01 16 06 F6 | 	mov	arg03, #1
1df90     A0 AC B0 FD | 	call	#__system___float_cmp
1df94     01 FA 55 F2 | 	cmps	result1, #1 wc
1df98     00 26 26 C6 |  if_b	not	local01, #0
1df9c     A7 26 62 FC | 	wrlong	local01, fp
1dfa0     A0 01 90 FD | 	jmp	#LR__2433
1dfa4                 | LR__2427
1dfa4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1dfa4     08 4E 05 F1 | 	add	fp, #8
1dfa8     A7 26 02 FB | 	rdlong	local01, fp
1dfac     08 4E 85 F1 | 	sub	fp, #8
1dfb0     1D 26 0E F2 | 	cmp	local01, #29 wz
1dfb4     14 4E 05 A1 |  if_e	add	fp, #20
1dfb8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dfbc     14 4E 85 A1 |  if_e	sub	fp, #20
1dfc0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dfc4     24 00 90 5D |  if_ne	jmp	#LR__2428
1dfc8     00 26 06 F6 | 	mov	local01, #0
1dfcc     A7 28 02 FB | 	rdlong	local02, fp
1dfd0     0C 4E 05 F1 | 	add	fp, #12
1dfd4     A7 2A 02 FB | 	rdlong	local03, fp
1dfd8     0C 4E 85 F1 | 	sub	fp, #12
1dfdc     15 29 5A F2 | 	cmps	local02, local03 wcz
1dfe0     01 26 66 E6 |  if_be	neg	local01, #1
1dfe4     A7 26 62 FC | 	wrlong	local01, fp
1dfe8     58 01 90 FD | 	jmp	#LR__2433
1dfec                 | LR__2428
1dfec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1dfec     08 4E 05 F1 | 	add	fp, #8
1dff0     A7 26 02 FB | 	rdlong	local01, fp
1dff4     08 4E 85 F1 | 	sub	fp, #8
1dff8     1D 26 0E F2 | 	cmp	local01, #29 wz
1dffc     14 4E 05 A1 |  if_e	add	fp, #20
1e000     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e004     14 4E 85 A1 |  if_e	sub	fp, #20
1e008     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e00c     24 00 90 5D |  if_ne	jmp	#LR__2429
1e010     00 26 06 F6 | 	mov	local01, #0
1e014     A7 28 02 FB | 	rdlong	local02, fp
1e018     0C 4E 05 F1 | 	add	fp, #12
1e01c     A7 2A 02 FB | 	rdlong	local03, fp
1e020     0C 4E 85 F1 | 	sub	fp, #12
1e024     15 29 1A F2 | 	cmp	local02, local03 wcz
1e028     01 26 66 E6 |  if_be	neg	local01, #1
1e02c     A7 26 62 FC | 	wrlong	local01, fp
1e030     10 01 90 FD | 	jmp	#LR__2433
1e034                 | LR__2429
1e034                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1e034     08 4E 05 F1 | 	add	fp, #8
1e038     A7 26 02 FB | 	rdlong	local01, fp
1e03c     08 4E 85 F1 | 	sub	fp, #8
1e040     2B 26 0E F2 | 	cmp	local01, #43 wz
1e044     14 4E 05 A1 |  if_e	add	fp, #20
1e048     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e04c     14 4E 85 A1 |  if_e	sub	fp, #20
1e050     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e054     30 00 90 5D |  if_ne	jmp	#LR__2430
1e058     00 26 06 F6 | 	mov	local01, #0
1e05c     A7 12 02 FB | 	rdlong	arg01, fp
1e060     94 ED BE FD | 	call	#_convertstring
1e064     FD 12 02 F6 | 	mov	arg01, result1
1e068     0C 4E 05 F1 | 	add	fp, #12
1e06c     A7 14 02 FB | 	rdlong	arg02, fp
1e070     0C 4E 85 F1 | 	sub	fp, #12
1e074     38 79 B0 FD | 	call	#__system___string_cmp
1e078     01 FA 55 F2 | 	cmps	result1, #1 wc
1e07c     00 26 26 C6 |  if_b	not	local01, #0
1e080     A7 26 62 FC | 	wrlong	local01, fp
1e084     BC 00 90 FD | 	jmp	#LR__2433
1e088                 | LR__2430
1e088                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1e088     08 4E 05 F1 | 	add	fp, #8
1e08c     A7 26 02 FB | 	rdlong	local01, fp
1e090     08 4E 85 F1 | 	sub	fp, #8
1e094     1F 26 0E F2 | 	cmp	local01, #31 wz
1e098     14 4E 05 A1 |  if_e	add	fp, #20
1e09c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e0a0     14 4E 85 A1 |  if_e	sub	fp, #20
1e0a4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e0a8     34 00 90 5D |  if_ne	jmp	#LR__2431
1e0ac     00 26 06 F6 | 	mov	local01, #0
1e0b0     A7 28 02 FB | 	rdlong	local02, fp
1e0b4     0C 4E 05 F1 | 	add	fp, #12
1e0b8     A7 12 02 FB | 	rdlong	arg01, fp
1e0bc     0C 4E 85 F1 | 	sub	fp, #12
1e0c0     34 ED BE FD | 	call	#_convertstring
1e0c4     FD 14 02 F6 | 	mov	arg02, result1
1e0c8     14 13 02 F6 | 	mov	arg01, local02
1e0cc     E0 78 B0 FD | 	call	#__system___string_cmp
1e0d0     01 FA 55 F2 | 	cmps	result1, #1 wc
1e0d4     00 26 26 C6 |  if_b	not	local01, #0
1e0d8     A7 26 62 FC | 	wrlong	local01, fp
1e0dc     64 00 90 FD | 	jmp	#LR__2433
1e0e0                 | LR__2431
1e0e0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1e0e0     08 4E 05 F1 | 	add	fp, #8
1e0e4     A7 26 02 FB | 	rdlong	local01, fp
1e0e8     08 4E 85 F1 | 	sub	fp, #8
1e0ec     2B 26 0E F2 | 	cmp	local01, #43 wz
1e0f0     14 4E 05 A1 |  if_e	add	fp, #20
1e0f4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e0f8     14 4E 85 A1 |  if_e	sub	fp, #20
1e0fc     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e100     3C 00 90 5D |  if_ne	jmp	#LR__2432
1e104     00 26 06 F6 | 	mov	local01, #0
1e108     A7 12 02 FB | 	rdlong	arg01, fp
1e10c     E8 EC BE FD | 	call	#_convertstring
1e110     FD 28 02 F6 | 	mov	local02, result1
1e114     0C 4E 05 F1 | 	add	fp, #12
1e118     A7 12 02 FB | 	rdlong	arg01, fp
1e11c     0C 4E 85 F1 | 	sub	fp, #12
1e120     D4 EC BE FD | 	call	#_convertstring
1e124     FD 14 02 F6 | 	mov	arg02, result1
1e128     14 13 02 F6 | 	mov	arg01, local02
1e12c     80 78 B0 FD | 	call	#__system___string_cmp
1e130     01 FA 55 F2 | 	cmps	result1, #1 wc
1e134     00 26 26 C6 |  if_b	not	local01, #0
1e138     A7 26 62 FC | 	wrlong	local01, fp
1e13c     04 00 90 FD | 	jmp	#LR__2433
1e140                 | LR__2432
1e140     A7 00 68 FC | 	wrlong	#0, fp
1e144                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e144                 | LR__2433
1e144     08 4E 05 F1 | 	add	fp, #8
1e148     A7 38 68 FC | 	wrlong	#28, fp
1e14c     08 4E 85 F1 | 	sub	fp, #8
1e150     A7 12 02 F6 | 	mov	arg01, fp
1e154     C0 EB BE FD | 	call	#_push
1e158     A7 F0 03 F6 | 	mov	ptra, fp
1e15c     B2 00 A0 FD | 	call	#popregs_
1e160                 | _do_le_ret
1e160     2D 00 64 FD | 	ret
1e164                 | 
1e164                 | ' 
1e164                 | ' '--------------------------------- less than (<)
1e164                 | ' 
1e164                 | ' sub do_lt
1e164                 | _do_lt
1e164     05 4A 05 F6 | 	mov	COUNT_, #5
1e168     A8 00 A0 FD | 	call	#pushregs_
1e16c     18 F0 07 F1 | 	add	ptra, #24
1e170     0C EB BE FD | 	call	#_pop
1e174     FD 26 02 F6 | 	mov	local01, result1
1e178     FE 28 02 F6 | 	mov	local02, result2
1e17c     FF 2A 02 F6 | 	mov	local03, result3
1e180     0C 4E 05 F1 | 	add	fp, #12
1e184     A7 26 62 FC | 	wrlong	local01, fp
1e188     04 4E 05 F1 | 	add	fp, #4
1e18c     A7 28 62 FC | 	wrlong	local02, fp
1e190     04 4E 05 F1 | 	add	fp, #4
1e194     A7 2A 62 FC | 	wrlong	local03, fp
1e198     14 4E 85 F1 | 	sub	fp, #20
1e19c     E0 EA BE FD | 	call	#_pop
1e1a0     FF 2A 02 F6 | 	mov	local03, result3
1e1a4     A7 FA 61 FC | 	wrlong	result1, fp
1e1a8     04 4E 05 F1 | 	add	fp, #4
1e1ac     A7 FC 61 FC | 	wrlong	result2, fp
1e1b0     04 4E 05 F1 | 	add	fp, #4
1e1b4     A7 2A 62 FC | 	wrlong	local03, fp
1e1b8                 | ' 
1e1b8                 | ' t2=pop()
1e1b8                 | ' t1=pop()
1e1b8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1e1b8     08 4E 85 F1 | 	sub	fp, #8
1e1bc     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e1c0     14 4E 05 A1 |  if_e	add	fp, #20
1e1c4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e1c8     14 4E 85 A1 |  if_e	sub	fp, #20
1e1cc     16 2B 02 A6 |  if_e	mov	local03, local04
1e1d0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e1d4     28 00 90 5D |  if_ne	jmp	#LR__2440
1e1d8     00 26 06 F6 | 	mov	local01, #0
1e1dc     A7 12 02 FB | 	rdlong	arg01, fp
1e1e0     0C 4E 05 F1 | 	add	fp, #12
1e1e4     A7 14 02 FB | 	rdlong	arg02, fp
1e1e8     0C 4E 85 F1 | 	sub	fp, #12
1e1ec     C0 77 B0 FD | 	call	#__system___string_cmp
1e1f0     00 FA 55 F2 | 	cmps	result1, #0 wc
1e1f4     00 26 26 C6 |  if_b	not	local01, #0
1e1f8     A7 26 62 FC | 	wrlong	local01, fp
1e1fc     10 04 90 FD | 	jmp	#LR__2453
1e200                 | LR__2440
1e200                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1e200     08 4E 05 F1 | 	add	fp, #8
1e204     A7 26 02 FB | 	rdlong	local01, fp
1e208     08 4E 85 F1 | 	sub	fp, #8
1e20c     1E 26 0E F2 | 	cmp	local01, #30 wz
1e210     14 4E 05 A1 |  if_e	add	fp, #20
1e214     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e218     14 4E 85 A1 |  if_e	sub	fp, #20
1e21c     16 2B 02 A6 |  if_e	mov	local03, local04
1e220     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e224     2C 00 90 5D |  if_ne	jmp	#LR__2441
1e228     00 26 06 F6 | 	mov	local01, #0
1e22c     A7 12 02 FB | 	rdlong	arg01, fp
1e230     0C 4E 05 F1 | 	add	fp, #12
1e234     A7 14 02 FB | 	rdlong	arg02, fp
1e238     0C 4E 85 F1 | 	sub	fp, #12
1e23c     01 16 06 F6 | 	mov	arg03, #1
1e240     F0 A9 B0 FD | 	call	#__system___float_cmp
1e244     00 FA 55 F2 | 	cmps	result1, #0 wc
1e248     00 26 26 C6 |  if_b	not	local01, #0
1e24c     A7 26 62 FC | 	wrlong	local01, fp
1e250     BC 03 90 FD | 	jmp	#LR__2453
1e254                 | LR__2441
1e254                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1e254     08 4E 05 F1 | 	add	fp, #8
1e258     A7 26 02 FB | 	rdlong	local01, fp
1e25c     08 4E 85 F1 | 	sub	fp, #8
1e260     1E 26 0E F2 | 	cmp	local01, #30 wz
1e264     14 4E 05 A1 |  if_e	add	fp, #20
1e268     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e26c     14 4E 85 A1 |  if_e	sub	fp, #20
1e270     16 2B 02 A6 |  if_e	mov	local03, local04
1e274     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e278     48 00 90 5D |  if_ne	jmp	#LR__2442
1e27c     00 26 06 F6 | 	mov	local01, #0
1e280     A7 28 02 FB | 	rdlong	local02, fp
1e284     0C 4E 05 F1 | 	add	fp, #12
1e288     A7 12 02 FB | 	rdlong	arg01, fp
1e28c     0C 4E 85 F1 | 	sub	fp, #12
1e290     09 13 52 F6 | 	abs	arg01, arg01 wc
1e294     1F 2E C6 C9 |  if_b	decod	local05, #31
1e298     00 2E 06 36 |  if_ae	mov	local05, #0
1e29c     5C A1 B0 FD | 	call	#__system___float_fromuns
1e2a0     17 FB 61 F5 | 	xor	result1, local05
1e2a4     FD 14 02 F6 | 	mov	arg02, result1
1e2a8     14 13 02 F6 | 	mov	arg01, local02
1e2ac     01 16 06 F6 | 	mov	arg03, #1
1e2b0     80 A9 B0 FD | 	call	#__system___float_cmp
1e2b4     00 FA 55 F2 | 	cmps	result1, #0 wc
1e2b8     00 26 26 C6 |  if_b	not	local01, #0
1e2bc     A7 26 62 FC | 	wrlong	local01, fp
1e2c0     4C 03 90 FD | 	jmp	#LR__2453
1e2c4                 | LR__2442
1e2c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1e2c4     08 4E 05 F1 | 	add	fp, #8
1e2c8     A7 26 02 FB | 	rdlong	local01, fp
1e2cc     08 4E 85 F1 | 	sub	fp, #8
1e2d0     1E 26 0E F2 | 	cmp	local01, #30 wz
1e2d4     14 4E 05 A1 |  if_e	add	fp, #20
1e2d8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e2dc     14 4E 85 A1 |  if_e	sub	fp, #20
1e2e0     16 2B 02 A6 |  if_e	mov	local03, local04
1e2e4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e2e8     38 00 90 5D |  if_ne	jmp	#LR__2443
1e2ec     00 26 06 F6 | 	mov	local01, #0
1e2f0     A7 28 02 FB | 	rdlong	local02, fp
1e2f4     0C 4E 05 F1 | 	add	fp, #12
1e2f8     A7 12 02 FB | 	rdlong	arg01, fp
1e2fc     0C 4E 85 F1 | 	sub	fp, #12
1e300     F8 A0 B0 FD | 	call	#__system___float_fromuns
1e304     FD 14 02 F6 | 	mov	arg02, result1
1e308     14 13 02 F6 | 	mov	arg01, local02
1e30c     01 16 06 F6 | 	mov	arg03, #1
1e310     20 A9 B0 FD | 	call	#__system___float_cmp
1e314     00 FA 55 F2 | 	cmps	result1, #0 wc
1e318     00 26 26 C6 |  if_b	not	local01, #0
1e31c     A7 26 62 FC | 	wrlong	local01, fp
1e320     EC 02 90 FD | 	jmp	#LR__2453
1e324                 | LR__2443
1e324                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1e324     08 4E 05 F1 | 	add	fp, #8
1e328     A7 26 02 FB | 	rdlong	local01, fp
1e32c     08 4E 85 F1 | 	sub	fp, #8
1e330     1C 26 0E F2 | 	cmp	local01, #28 wz
1e334     14 4E 05 A1 |  if_e	add	fp, #20
1e338     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e33c     14 4E 85 A1 |  if_e	sub	fp, #20
1e340     16 2B 02 A6 |  if_e	mov	local03, local04
1e344     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e348     44 00 90 5D |  if_ne	jmp	#LR__2444
1e34c     00 26 06 F6 | 	mov	local01, #0
1e350     A7 12 02 FB | 	rdlong	arg01, fp
1e354     09 13 52 F6 | 	abs	arg01, arg01 wc
1e358     1F 2E C6 C9 |  if_b	decod	local05, #31
1e35c     00 2E 06 36 |  if_ae	mov	local05, #0
1e360     98 A0 B0 FD | 	call	#__system___float_fromuns
1e364     17 FB 61 F5 | 	xor	result1, local05
1e368     FD 12 02 F6 | 	mov	arg01, result1
1e36c     0C 4E 05 F1 | 	add	fp, #12
1e370     A7 14 02 FB | 	rdlong	arg02, fp
1e374     0C 4E 85 F1 | 	sub	fp, #12
1e378     01 16 06 F6 | 	mov	arg03, #1
1e37c     B4 A8 B0 FD | 	call	#__system___float_cmp
1e380     00 FA 55 F2 | 	cmps	result1, #0 wc
1e384     00 26 26 C6 |  if_b	not	local01, #0
1e388     A7 26 62 FC | 	wrlong	local01, fp
1e38c     80 02 90 FD | 	jmp	#LR__2453
1e390                 | LR__2444
1e390                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1e390     08 4E 05 F1 | 	add	fp, #8
1e394     A7 26 02 FB | 	rdlong	local01, fp
1e398     08 4E 85 F1 | 	sub	fp, #8
1e39c     1C 26 0E F2 | 	cmp	local01, #28 wz
1e3a0     14 4E 05 A1 |  if_e	add	fp, #20
1e3a4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e3a8     14 4E 85 A1 |  if_e	sub	fp, #20
1e3ac     16 2B 02 A6 |  if_e	mov	local03, local04
1e3b0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e3b4     20 00 90 5D |  if_ne	jmp	#LR__2445
1e3b8     A7 28 02 FB | 	rdlong	local02, fp
1e3bc     0C 4E 05 F1 | 	add	fp, #12
1e3c0     A7 2A 02 FB | 	rdlong	local03, fp
1e3c4     0C 4E 85 F1 | 	sub	fp, #12
1e3c8     15 29 52 F2 | 	cmps	local02, local03 wc
1e3cc     13 27 A2 F1 | 	subx	local01, local01
1e3d0     A7 26 62 FC | 	wrlong	local01, fp
1e3d4     38 02 90 FD | 	jmp	#LR__2453
1e3d8                 | LR__2445
1e3d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1e3d8     08 4E 05 F1 | 	add	fp, #8
1e3dc     A7 26 02 FB | 	rdlong	local01, fp
1e3e0     08 4E 85 F1 | 	sub	fp, #8
1e3e4     1C 26 0E F2 | 	cmp	local01, #28 wz
1e3e8     14 4E 05 A1 |  if_e	add	fp, #20
1e3ec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e3f0     14 4E 85 A1 |  if_e	sub	fp, #20
1e3f4     16 2B 02 A6 |  if_e	mov	local03, local04
1e3f8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e3fc     20 00 90 5D |  if_ne	jmp	#LR__2446
1e400     A7 28 02 FB | 	rdlong	local02, fp
1e404     0C 4E 05 F1 | 	add	fp, #12
1e408     A7 2A 02 FB | 	rdlong	local03, fp
1e40c     0C 4E 85 F1 | 	sub	fp, #12
1e410     15 29 52 F2 | 	cmps	local02, local03 wc
1e414     13 27 A2 F1 | 	subx	local01, local01
1e418     A7 26 62 FC | 	wrlong	local01, fp
1e41c     F0 01 90 FD | 	jmp	#LR__2453
1e420                 | LR__2446
1e420                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1e420     08 4E 05 F1 | 	add	fp, #8
1e424     A7 26 02 FB | 	rdlong	local01, fp
1e428     08 4E 85 F1 | 	sub	fp, #8
1e42c     1D 26 0E F2 | 	cmp	local01, #29 wz
1e430     14 4E 05 A1 |  if_e	add	fp, #20
1e434     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e438     14 4E 85 A1 |  if_e	sub	fp, #20
1e43c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1e440     34 00 90 5D |  if_ne	jmp	#LR__2447
1e444     00 26 06 F6 | 	mov	local01, #0
1e448     A7 12 02 FB | 	rdlong	arg01, fp
1e44c     AC 9F B0 FD | 	call	#__system___float_fromuns
1e450     FD 12 02 F6 | 	mov	arg01, result1
1e454     0C 4E 05 F1 | 	add	fp, #12
1e458     A7 14 02 FB | 	rdlong	arg02, fp
1e45c     0C 4E 85 F1 | 	sub	fp, #12
1e460     01 16 06 F6 | 	mov	arg03, #1
1e464     CC A7 B0 FD | 	call	#__system___float_cmp
1e468     00 FA 55 F2 | 	cmps	result1, #0 wc
1e46c     00 26 26 C6 |  if_b	not	local01, #0
1e470     A7 26 62 FC | 	wrlong	local01, fp
1e474     98 01 90 FD | 	jmp	#LR__2453
1e478                 | LR__2447
1e478                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1e478     08 4E 05 F1 | 	add	fp, #8
1e47c     A7 26 02 FB | 	rdlong	local01, fp
1e480     08 4E 85 F1 | 	sub	fp, #8
1e484     1D 26 0E F2 | 	cmp	local01, #29 wz
1e488     14 4E 05 A1 |  if_e	add	fp, #20
1e48c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e490     14 4E 85 A1 |  if_e	sub	fp, #20
1e494     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e498     20 00 90 5D |  if_ne	jmp	#LR__2448
1e49c     A7 28 02 FB | 	rdlong	local02, fp
1e4a0     0C 4E 05 F1 | 	add	fp, #12
1e4a4     A7 2A 02 FB | 	rdlong	local03, fp
1e4a8     0C 4E 85 F1 | 	sub	fp, #12
1e4ac     15 29 52 F2 | 	cmps	local02, local03 wc
1e4b0     13 27 A2 F1 | 	subx	local01, local01
1e4b4     A7 26 62 FC | 	wrlong	local01, fp
1e4b8     54 01 90 FD | 	jmp	#LR__2453
1e4bc                 | LR__2448
1e4bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1e4bc     08 4E 05 F1 | 	add	fp, #8
1e4c0     A7 26 02 FB | 	rdlong	local01, fp
1e4c4     08 4E 85 F1 | 	sub	fp, #8
1e4c8     1D 26 0E F2 | 	cmp	local01, #29 wz
1e4cc     14 4E 05 A1 |  if_e	add	fp, #20
1e4d0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e4d4     14 4E 85 A1 |  if_e	sub	fp, #20
1e4d8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e4dc     20 00 90 5D |  if_ne	jmp	#LR__2449
1e4e0     A7 28 02 FB | 	rdlong	local02, fp
1e4e4     0C 4E 05 F1 | 	add	fp, #12
1e4e8     A7 2A 02 FB | 	rdlong	local03, fp
1e4ec     0C 4E 85 F1 | 	sub	fp, #12
1e4f0     15 29 12 F2 | 	cmp	local02, local03 wc
1e4f4     13 27 A2 F1 | 	subx	local01, local01
1e4f8     A7 26 62 FC | 	wrlong	local01, fp
1e4fc     10 01 90 FD | 	jmp	#LR__2453
1e500                 | LR__2449
1e500                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1e500     08 4E 05 F1 | 	add	fp, #8
1e504     A7 26 02 FB | 	rdlong	local01, fp
1e508     08 4E 85 F1 | 	sub	fp, #8
1e50c     2B 26 0E F2 | 	cmp	local01, #43 wz
1e510     14 4E 05 A1 |  if_e	add	fp, #20
1e514     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e518     14 4E 85 A1 |  if_e	sub	fp, #20
1e51c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e520     30 00 90 5D |  if_ne	jmp	#LR__2450
1e524     00 26 06 F6 | 	mov	local01, #0
1e528     A7 12 02 FB | 	rdlong	arg01, fp
1e52c     C8 E8 BE FD | 	call	#_convertstring
1e530     FD 12 02 F6 | 	mov	arg01, result1
1e534     0C 4E 05 F1 | 	add	fp, #12
1e538     A7 14 02 FB | 	rdlong	arg02, fp
1e53c     0C 4E 85 F1 | 	sub	fp, #12
1e540     6C 74 B0 FD | 	call	#__system___string_cmp
1e544     00 FA 55 F2 | 	cmps	result1, #0 wc
1e548     00 26 26 C6 |  if_b	not	local01, #0
1e54c     A7 26 62 FC | 	wrlong	local01, fp
1e550     BC 00 90 FD | 	jmp	#LR__2453
1e554                 | LR__2450
1e554                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1e554     08 4E 05 F1 | 	add	fp, #8
1e558     A7 26 02 FB | 	rdlong	local01, fp
1e55c     08 4E 85 F1 | 	sub	fp, #8
1e560     1F 26 0E F2 | 	cmp	local01, #31 wz
1e564     14 4E 05 A1 |  if_e	add	fp, #20
1e568     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e56c     14 4E 85 A1 |  if_e	sub	fp, #20
1e570     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e574     34 00 90 5D |  if_ne	jmp	#LR__2451
1e578     00 26 06 F6 | 	mov	local01, #0
1e57c     A7 28 02 FB | 	rdlong	local02, fp
1e580     0C 4E 05 F1 | 	add	fp, #12
1e584     A7 12 02 FB | 	rdlong	arg01, fp
1e588     0C 4E 85 F1 | 	sub	fp, #12
1e58c     68 E8 BE FD | 	call	#_convertstring
1e590     FD 14 02 F6 | 	mov	arg02, result1
1e594     14 13 02 F6 | 	mov	arg01, local02
1e598     14 74 B0 FD | 	call	#__system___string_cmp
1e59c     00 FA 55 F2 | 	cmps	result1, #0 wc
1e5a0     00 26 26 C6 |  if_b	not	local01, #0
1e5a4     A7 26 62 FC | 	wrlong	local01, fp
1e5a8     64 00 90 FD | 	jmp	#LR__2453
1e5ac                 | LR__2451
1e5ac                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1e5ac     08 4E 05 F1 | 	add	fp, #8
1e5b0     A7 26 02 FB | 	rdlong	local01, fp
1e5b4     08 4E 85 F1 | 	sub	fp, #8
1e5b8     2B 26 0E F2 | 	cmp	local01, #43 wz
1e5bc     14 4E 05 A1 |  if_e	add	fp, #20
1e5c0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e5c4     14 4E 85 A1 |  if_e	sub	fp, #20
1e5c8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e5cc     3C 00 90 5D |  if_ne	jmp	#LR__2452
1e5d0     00 26 06 F6 | 	mov	local01, #0
1e5d4     A7 12 02 FB | 	rdlong	arg01, fp
1e5d8     1C E8 BE FD | 	call	#_convertstring
1e5dc     FD 28 02 F6 | 	mov	local02, result1
1e5e0     0C 4E 05 F1 | 	add	fp, #12
1e5e4     A7 12 02 FB | 	rdlong	arg01, fp
1e5e8     0C 4E 85 F1 | 	sub	fp, #12
1e5ec     08 E8 BE FD | 	call	#_convertstring
1e5f0     FD 14 02 F6 | 	mov	arg02, result1
1e5f4     14 13 02 F6 | 	mov	arg01, local02
1e5f8     B4 73 B0 FD | 	call	#__system___string_cmp
1e5fc     00 FA 55 F2 | 	cmps	result1, #0 wc
1e600     00 26 26 C6 |  if_b	not	local01, #0
1e604     A7 26 62 FC | 	wrlong	local01, fp
1e608     04 00 90 FD | 	jmp	#LR__2453
1e60c                 | LR__2452
1e60c     A7 00 68 FC | 	wrlong	#0, fp
1e610                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e610                 | LR__2453
1e610     08 4E 05 F1 | 	add	fp, #8
1e614     A7 38 68 FC | 	wrlong	#28, fp
1e618     08 4E 85 F1 | 	sub	fp, #8
1e61c     A7 12 02 F6 | 	mov	arg01, fp
1e620     F4 E6 BE FD | 	call	#_push
1e624     A7 F0 03 F6 | 	mov	ptra, fp
1e628     B2 00 A0 FD | 	call	#popregs_
1e62c                 | _do_lt_ret
1e62c     2D 00 64 FD | 	ret
1e630                 | 
1e630                 | ' 
1e630                 | ' '--------------------------------- minus (-)
1e630                 | ' 
1e630                 | ' sub do_minus
1e630                 | _do_minus
1e630     05 4A 05 F6 | 	mov	COUNT_, #5
1e634     A8 00 A0 FD | 	call	#pushregs_
1e638     18 F0 07 F1 | 	add	ptra, #24
1e63c     40 E6 BE FD | 	call	#_pop
1e640     FD 26 02 F6 | 	mov	local01, result1
1e644     FE 28 02 F6 | 	mov	local02, result2
1e648     FF 2A 02 F6 | 	mov	local03, result3
1e64c     0C 4E 05 F1 | 	add	fp, #12
1e650     A7 26 62 FC | 	wrlong	local01, fp
1e654     04 4E 05 F1 | 	add	fp, #4
1e658     A7 28 62 FC | 	wrlong	local02, fp
1e65c     04 4E 05 F1 | 	add	fp, #4
1e660     A7 2A 62 FC | 	wrlong	local03, fp
1e664     14 4E 85 F1 | 	sub	fp, #20
1e668     14 E6 BE FD | 	call	#_pop
1e66c     FF 2A 02 F6 | 	mov	local03, result3
1e670     A7 FA 61 FC | 	wrlong	result1, fp
1e674     04 4E 05 F1 | 	add	fp, #4
1e678     A7 FC 61 FC | 	wrlong	result2, fp
1e67c     04 4E 05 F1 | 	add	fp, #4
1e680     A7 2A 62 FC | 	wrlong	local03, fp
1e684                 | ' 
1e684                 | ' t2=pop()
1e684                 | ' t1=pop()
1e684                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1e684     08 4E 85 F1 | 	sub	fp, #8
1e688     1D 2A 0E F2 | 	cmp	local03, #29 wz
1e68c     14 4E 05 A1 |  if_e	add	fp, #20
1e690     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e694     14 4E 85 A1 |  if_e	sub	fp, #20
1e698     16 2B 02 A6 |  if_e	mov	local03, local04
1e69c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e6a0     5C 00 90 5D |  if_ne	jmp	#LR__2461
1e6a4                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1e6a4     0C 4E 05 F1 | 	add	fp, #12
1e6a8     A7 26 02 FB | 	rdlong	local01, fp
1e6ac     0C 4E 85 F1 | 	sub	fp, #12
1e6b0     A7 2A 02 FB | 	rdlong	local03, fp
1e6b4     15 27 12 F2 | 	cmp	local01, local03 wc
1e6b8     1C 00 90 3D |  if_ae	jmp	#LR__2460
1e6bc     A7 26 02 FB | 	rdlong	local01, fp
1e6c0     0C 4E 05 F1 | 	add	fp, #12
1e6c4     A7 28 02 FB | 	rdlong	local02, fp
1e6c8     0C 4E 85 F1 | 	sub	fp, #12
1e6cc     14 27 82 F1 | 	sub	local01, local02
1e6d0     A7 26 62 FC | 	wrlong	local01, fp
1e6d4     F4 02 90 FD | 	jmp	#LR__2470
1e6d8                 | LR__2460
1e6d8     A7 26 02 FB | 	rdlong	local01, fp
1e6dc     0C 4E 05 F1 | 	add	fp, #12
1e6e0     A7 28 02 FB | 	rdlong	local02, fp
1e6e4     0C 4E 85 F1 | 	sub	fp, #12
1e6e8     14 27 82 F1 | 	sub	local01, local02
1e6ec     A7 26 62 FC | 	wrlong	local01, fp
1e6f0     08 4E 05 F1 | 	add	fp, #8
1e6f4     A7 38 68 FC | 	wrlong	#28, fp
1e6f8     08 4E 85 F1 | 	sub	fp, #8
1e6fc     CC 02 90 FD | 	jmp	#LR__2470
1e700                 | LR__2461
1e700                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1e700     08 4E 05 F1 | 	add	fp, #8
1e704     A7 26 02 FB | 	rdlong	local01, fp
1e708     08 4E 85 F1 | 	sub	fp, #8
1e70c     1D 26 0E F2 | 	cmp	local01, #29 wz
1e710     14 4E 05 A1 |  if_e	add	fp, #20
1e714     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e718     14 4E 85 A1 |  if_e	sub	fp, #20
1e71c     16 2B 02 A6 |  if_e	mov	local03, local04
1e720     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e724     28 00 90 5D |  if_ne	jmp	#LR__2462
1e728     A7 26 02 FB | 	rdlong	local01, fp
1e72c     0C 4E 05 F1 | 	add	fp, #12
1e730     A7 28 02 FB | 	rdlong	local02, fp
1e734     0C 4E 85 F1 | 	sub	fp, #12
1e738     14 27 82 F1 | 	sub	local01, local02
1e73c     A7 26 62 FC | 	wrlong	local01, fp
1e740     08 4E 05 F1 | 	add	fp, #8
1e744     A7 38 68 FC | 	wrlong	#28, fp
1e748     08 4E 85 F1 | 	sub	fp, #8
1e74c     7C 02 90 FD | 	jmp	#LR__2470
1e750                 | LR__2462
1e750                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1e750     08 4E 05 F1 | 	add	fp, #8
1e754     A7 26 02 FB | 	rdlong	local01, fp
1e758     08 4E 85 F1 | 	sub	fp, #8
1e75c     1D 26 0E F2 | 	cmp	local01, #29 wz
1e760     14 4E 05 A1 |  if_e	add	fp, #20
1e764     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e768     14 4E 85 A1 |  if_e	sub	fp, #20
1e76c     16 2B 02 A6 |  if_e	mov	local03, local04
1e770     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e774     34 00 90 5D |  if_ne	jmp	#LR__2463
1e778     A7 12 02 FB | 	rdlong	arg01, fp
1e77c     7C 9C B0 FD | 	call	#__system___float_fromuns
1e780     FD 12 02 F6 | 	mov	arg01, result1
1e784     0C 4E 05 F1 | 	add	fp, #12
1e788     A7 14 02 FB | 	rdlong	arg02, fp
1e78c     0C 4E 85 F1 | 	sub	fp, #12
1e790     1F 14 E6 F4 | 	bitnot	arg02, #31
1e794     98 9C B0 FD | 	call	#__system___float_add
1e798     A7 FA 61 FC | 	wrlong	result1, fp
1e79c     08 4E 05 F1 | 	add	fp, #8
1e7a0     A7 3C 68 FC | 	wrlong	#30, fp
1e7a4     08 4E 85 F1 | 	sub	fp, #8
1e7a8     20 02 90 FD | 	jmp	#LR__2470
1e7ac                 | LR__2463
1e7ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1e7ac     08 4E 05 F1 | 	add	fp, #8
1e7b0     A7 26 02 FB | 	rdlong	local01, fp
1e7b4     08 4E 85 F1 | 	sub	fp, #8
1e7b8     1C 26 0E F2 | 	cmp	local01, #28 wz
1e7bc     14 4E 05 A1 |  if_e	add	fp, #20
1e7c0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e7c4     14 4E 85 A1 |  if_e	sub	fp, #20
1e7c8     16 2B 02 A6 |  if_e	mov	local03, local04
1e7cc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e7d0     1C 00 90 5D |  if_ne	jmp	#LR__2464
1e7d4     A7 26 02 FB | 	rdlong	local01, fp
1e7d8     0C 4E 05 F1 | 	add	fp, #12
1e7dc     A7 28 02 FB | 	rdlong	local02, fp
1e7e0     0C 4E 85 F1 | 	sub	fp, #12
1e7e4     14 27 82 F1 | 	sub	local01, local02
1e7e8     A7 26 62 FC | 	wrlong	local01, fp
1e7ec     DC 01 90 FD | 	jmp	#LR__2470
1e7f0                 | LR__2464
1e7f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1e7f0     08 4E 05 F1 | 	add	fp, #8
1e7f4     A7 26 02 FB | 	rdlong	local01, fp
1e7f8     08 4E 85 F1 | 	sub	fp, #8
1e7fc     1C 26 0E F2 | 	cmp	local01, #28 wz
1e800     14 4E 05 A1 |  if_e	add	fp, #20
1e804     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e808     14 4E 85 A1 |  if_e	sub	fp, #20
1e80c     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1e810     1C 00 90 5D |  if_ne	jmp	#LR__2465
1e814     A7 26 02 FB | 	rdlong	local01, fp
1e818     0C 4E 05 F1 | 	add	fp, #12
1e81c     A7 28 02 FB | 	rdlong	local02, fp
1e820     0C 4E 85 F1 | 	sub	fp, #12
1e824     14 27 82 F1 | 	sub	local01, local02
1e828     A7 26 62 FC | 	wrlong	local01, fp
1e82c     9C 01 90 FD | 	jmp	#LR__2470
1e830                 | LR__2465
1e830                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1e830     08 4E 05 F1 | 	add	fp, #8
1e834     A7 26 02 FB | 	rdlong	local01, fp
1e838     08 4E 85 F1 | 	sub	fp, #8
1e83c     1C 26 0E F2 | 	cmp	local01, #28 wz
1e840     14 4E 05 A1 |  if_e	add	fp, #20
1e844     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e848     14 4E 85 A1 |  if_e	sub	fp, #20
1e84c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e850     44 00 90 5D |  if_ne	jmp	#LR__2466
1e854     A7 12 02 FB | 	rdlong	arg01, fp
1e858     09 13 52 F6 | 	abs	arg01, arg01 wc
1e85c     1F 2E C6 C9 |  if_b	decod	local05, #31
1e860     00 2E 06 36 |  if_ae	mov	local05, #0
1e864     94 9B B0 FD | 	call	#__system___float_fromuns
1e868     17 FB 61 F5 | 	xor	result1, local05
1e86c     FD 12 02 F6 | 	mov	arg01, result1
1e870     0C 4E 05 F1 | 	add	fp, #12
1e874     A7 14 02 FB | 	rdlong	arg02, fp
1e878     0C 4E 85 F1 | 	sub	fp, #12
1e87c     1F 14 E6 F4 | 	bitnot	arg02, #31
1e880     AC 9B B0 FD | 	call	#__system___float_add
1e884     A7 FA 61 FC | 	wrlong	result1, fp
1e888     08 4E 05 F1 | 	add	fp, #8
1e88c     A7 3C 68 FC | 	wrlong	#30, fp
1e890     08 4E 85 F1 | 	sub	fp, #8
1e894     34 01 90 FD | 	jmp	#LR__2470
1e898                 | LR__2466
1e898                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1e898     08 4E 05 F1 | 	add	fp, #8
1e89c     A7 26 02 FB | 	rdlong	local01, fp
1e8a0     08 4E 85 F1 | 	sub	fp, #8
1e8a4     1E 26 0E F2 | 	cmp	local01, #30 wz
1e8a8     14 4E 05 A1 |  if_e	add	fp, #20
1e8ac     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e8b0     14 4E 85 A1 |  if_e	sub	fp, #20
1e8b4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e8b8     2C 00 90 5D |  if_ne	jmp	#LR__2467
1e8bc     A7 26 02 FB | 	rdlong	local01, fp
1e8c0     0C 4E 05 F1 | 	add	fp, #12
1e8c4     A7 12 02 FB | 	rdlong	arg01, fp
1e8c8     0C 4E 85 F1 | 	sub	fp, #12
1e8cc     2C 9B B0 FD | 	call	#__system___float_fromuns
1e8d0     FD 14 02 F6 | 	mov	arg02, result1
1e8d4     13 13 02 F6 | 	mov	arg01, local01
1e8d8     1F 14 E6 F4 | 	bitnot	arg02, #31
1e8dc     50 9B B0 FD | 	call	#__system___float_add
1e8e0     A7 FA 61 FC | 	wrlong	result1, fp
1e8e4     E4 00 90 FD | 	jmp	#LR__2470
1e8e8                 | LR__2467
1e8e8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1e8e8     08 4E 05 F1 | 	add	fp, #8
1e8ec     A7 26 02 FB | 	rdlong	local01, fp
1e8f0     08 4E 85 F1 | 	sub	fp, #8
1e8f4     1E 26 0E F2 | 	cmp	local01, #30 wz
1e8f8     14 4E 05 A1 |  if_e	add	fp, #20
1e8fc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e900     14 4E 85 A1 |  if_e	sub	fp, #20
1e904     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e908     3C 00 90 5D |  if_ne	jmp	#LR__2468
1e90c     A7 26 02 FB | 	rdlong	local01, fp
1e910     0C 4E 05 F1 | 	add	fp, #12
1e914     A7 12 02 FB | 	rdlong	arg01, fp
1e918     0C 4E 85 F1 | 	sub	fp, #12
1e91c     09 13 52 F6 | 	abs	arg01, arg01 wc
1e920     1F 2E C6 C9 |  if_b	decod	local05, #31
1e924     00 2E 06 36 |  if_ae	mov	local05, #0
1e928     D0 9A B0 FD | 	call	#__system___float_fromuns
1e92c     17 FB 61 F5 | 	xor	result1, local05
1e930     FD 14 02 F6 | 	mov	arg02, result1
1e934     13 13 02 F6 | 	mov	arg01, local01
1e938     1F 14 E6 F4 | 	bitnot	arg02, #31
1e93c     F0 9A B0 FD | 	call	#__system___float_add
1e940     A7 FA 61 FC | 	wrlong	result1, fp
1e944     84 00 90 FD | 	jmp	#LR__2470
1e948                 | LR__2468
1e948                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1e948     08 4E 05 F1 | 	add	fp, #8
1e94c     A7 26 02 FB | 	rdlong	local01, fp
1e950     08 4E 85 F1 | 	sub	fp, #8
1e954     1E 26 0E F2 | 	cmp	local01, #30 wz
1e958     14 4E 05 A1 |  if_e	add	fp, #20
1e95c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e960     14 4E 85 A1 |  if_e	sub	fp, #20
1e964     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e968     20 00 90 5D |  if_ne	jmp	#LR__2469
1e96c     A7 12 02 FB | 	rdlong	arg01, fp
1e970     0C 4E 05 F1 | 	add	fp, #12
1e974     A7 14 02 FB | 	rdlong	arg02, fp
1e978     0C 4E 85 F1 | 	sub	fp, #12
1e97c     1F 14 E6 F4 | 	bitnot	arg02, #31
1e980     AC 9A B0 FD | 	call	#__system___float_add
1e984     A7 FA 61 FC | 	wrlong	result1, fp
1e988     40 00 90 FD | 	jmp	#LR__2470
1e98c                 | LR__2469
1e98c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1e98c     08 4E 05 F1 | 	add	fp, #8
1e990     A7 26 02 FB | 	rdlong	local01, fp
1e994     08 4E 85 F1 | 	sub	fp, #8
1e998     1F 26 0E F2 | 	cmp	local01, #31 wz
1e99c     14 4E 05 51 |  if_ne	add	fp, #20
1e9a0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1e9a4     14 4E 85 51 |  if_ne	sub	fp, #20
1e9a8     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1e9ac     A7 06 68 AC |  if_e	wrlong	#3, fp
1e9b0     08 4E 05 A1 |  if_e	add	fp, #8
1e9b4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e9b8     08 4E 85 A1 |  if_e	sub	fp, #8
1e9bc     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1e9c0     08 4E 05 51 |  if_ne	add	fp, #8
1e9c4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1e9c8     08 4E 85 51 |  if_ne	sub	fp, #8
1e9cc                 | LR__2470
1e9cc     A7 12 02 F6 | 	mov	arg01, fp
1e9d0     44 E3 BE FD | 	call	#_push
1e9d4     A7 F0 03 F6 | 	mov	ptra, fp
1e9d8     B2 00 A0 FD | 	call	#popregs_
1e9dc                 | _do_minus_ret
1e9dc     2D 00 64 FD | 	ret
1e9e0                 | 
1e9e0                 | ' 
1e9e0                 | ' '--------------------------------- negative (-), one argument negative
1e9e0                 | ' 
1e9e0                 | ' sub do_negative
1e9e0                 | _do_negative
1e9e0     02 4A 05 F6 | 	mov	COUNT_, #2
1e9e4     A8 00 A0 FD | 	call	#pushregs_
1e9e8     0C F0 07 F1 | 	add	ptra, #12
1e9ec     90 E2 BE FD | 	call	#_pop
1e9f0     FF 26 02 F6 | 	mov	local01, result3
1e9f4     A7 FA 61 FC | 	wrlong	result1, fp
1e9f8     04 4E 05 F1 | 	add	fp, #4
1e9fc     A7 FC 61 FC | 	wrlong	result2, fp
1ea00     04 4E 05 F1 | 	add	fp, #4
1ea04     A7 26 62 FC | 	wrlong	local01, fp
1ea08                 | ' 
1ea08                 | ' t1=pop()
1ea08                 | ' if t1.result_type=result_int then 
1ea08     08 4E 85 F1 | 	sub	fp, #8
1ea0c     1C 26 0E F2 | 	cmp	local01, #28 wz
1ea10     A7 28 02 AB |  if_e	rdlong	local02, fp
1ea14     14 27 62 A6 |  if_e	neg	local01, local02
1ea18     A7 26 62 AC |  if_e	wrlong	local01, fp
1ea1c     5C 00 90 AD |  if_e	jmp	#LR__2482
1ea20     08 4E 05 F1 | 	add	fp, #8
1ea24     A7 26 02 FB | 	rdlong	local01, fp
1ea28     08 4E 85 F1 | 	sub	fp, #8
1ea2c     1D 26 0E F2 | 	cmp	local01, #29 wz
1ea30     1C 00 90 5D |  if_ne	jmp	#LR__2480
1ea34     A7 28 02 FB | 	rdlong	local02, fp
1ea38     14 27 62 F6 | 	neg	local01, local02
1ea3c     A7 26 62 FC | 	wrlong	local01, fp
1ea40     08 4E 05 F1 | 	add	fp, #8
1ea44     A7 38 68 FC | 	wrlong	#28, fp
1ea48     08 4E 85 F1 | 	sub	fp, #8
1ea4c     2C 00 90 FD | 	jmp	#LR__2481
1ea50                 | LR__2480
1ea50     08 4E 05 F1 | 	add	fp, #8
1ea54     A7 26 02 FB | 	rdlong	local01, fp
1ea58     08 4E 85 F1 | 	sub	fp, #8
1ea5c     1E 26 0E F2 | 	cmp	local01, #30 wz
1ea60     A7 FA 01 AB |  if_e	rdlong	result1, fp
1ea64     1F FA E5 A4 |  if_e	bitnot	result1, #31
1ea68     A7 FA 61 AC |  if_e	wrlong	result1, fp
1ea6c     08 4E 05 51 |  if_ne	add	fp, #8
1ea70     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1ea74     08 4E 85 51 |  if_ne	sub	fp, #8
1ea78     A7 50 68 5C |  if_ne	wrlong	#40, fp
1ea7c                 | LR__2481
1ea7c                 | LR__2482
1ea7c     A7 12 02 F6 | 	mov	arg01, fp
1ea80     94 E2 BE FD | 	call	#_push
1ea84     A7 F0 03 F6 | 	mov	ptra, fp
1ea88     B2 00 A0 FD | 	call	#popregs_
1ea8c                 | _do_negative_ret
1ea8c     2D 00 64 FD | 	ret
1ea90                 | 
1ea90                 | ' 
1ea90                 | ' '--------------------------------- MOD (modulo)
1ea90                 | ' 
1ea90                 | ' sub do_mod 
1ea90                 | _do_mod
1ea90     01 4A 05 F6 | 	mov	COUNT_, #1
1ea94     A8 00 A0 FD | 	call	#pushregs_
1ea98     18 F0 07 F1 | 	add	ptra, #24
1ea9c     E0 E1 BE FD | 	call	#_pop
1eaa0     FD 8A 02 F6 | 	mov	muldivb_, result1
1eaa4     FE 88 02 F6 | 	mov	muldiva_, result2
1eaa8     FF 26 02 F6 | 	mov	local01, result3
1eaac     0C 4E 05 F1 | 	add	fp, #12
1eab0     A7 8A 62 FC | 	wrlong	muldivb_, fp
1eab4     04 4E 05 F1 | 	add	fp, #4
1eab8     A7 88 62 FC | 	wrlong	muldiva_, fp
1eabc     04 4E 05 F1 | 	add	fp, #4
1eac0     A7 26 62 FC | 	wrlong	local01, fp
1eac4     14 4E 85 F1 | 	sub	fp, #20
1eac8     B4 E1 BE FD | 	call	#_pop
1eacc     A7 FA 61 FC | 	wrlong	result1, fp
1ead0     04 4E 05 F1 | 	add	fp, #4
1ead4     A7 FC 61 FC | 	wrlong	result2, fp
1ead8     04 4E 05 F1 | 	add	fp, #4
1eadc     A7 FE 61 FC | 	wrlong	result3, fp
1eae0                 | ' 
1eae0                 | ' t2=pop()
1eae0                 | ' t1=pop()
1eae0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1eae0     08 4E 85 F1 | 	sub	fp, #8
1eae4     1F FE 0D F2 | 	cmp	result3, #31 wz
1eae8     14 4E 05 51 |  if_ne	add	fp, #20
1eaec     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1eaf0     14 4E 85 51 |  if_ne	sub	fp, #20
1eaf4     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1eaf8     A7 14 68 AC |  if_e	wrlong	#10, fp
1eafc     08 4E 05 A1 |  if_e	add	fp, #8
1eb00     A7 FE 69 AC |  if_e	wrlong	#255, fp
1eb04     08 4E 85 A1 |  if_e	sub	fp, #8
1eb08     90 01 90 AD |  if_e	jmp	#LR__2496
1eb0c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1eb0c     08 4E 05 F1 | 	add	fp, #8
1eb10     A7 8A 02 FB | 	rdlong	muldivb_, fp
1eb14     08 4E 85 F1 | 	sub	fp, #8
1eb18     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1eb1c     1C 00 90 5D |  if_ne	jmp	#LR__2490
1eb20     08 4E 05 F1 | 	add	fp, #8
1eb24     A7 38 68 FC | 	wrlong	#28, fp
1eb28     08 4E 85 F1 | 	sub	fp, #8
1eb2c     A7 12 02 FB | 	rdlong	arg01, fp
1eb30     00 14 06 F6 | 	mov	arg02, #0
1eb34     90 A1 B0 FD | 	call	#__system___float_tointeger
1eb38     A7 FA 61 FC | 	wrlong	result1, fp
1eb3c                 | LR__2490
1eb3c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1eb3c     14 4E 05 F1 | 	add	fp, #20
1eb40     A7 8A 02 FB | 	rdlong	muldivb_, fp
1eb44     14 4E 85 F1 | 	sub	fp, #20
1eb48     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1eb4c     28 00 90 5D |  if_ne	jmp	#LR__2491
1eb50     14 4E 05 F1 | 	add	fp, #20
1eb54     A7 38 68 FC | 	wrlong	#28, fp
1eb58     08 4E 85 F1 | 	sub	fp, #8
1eb5c     A7 12 02 FB | 	rdlong	arg01, fp
1eb60     0C 4E 85 F1 | 	sub	fp, #12
1eb64     00 14 06 F6 | 	mov	arg02, #0
1eb68     5C A1 B0 FD | 	call	#__system___float_tointeger
1eb6c     0C 4E 05 F1 | 	add	fp, #12
1eb70     A7 FA 61 FC | 	wrlong	result1, fp
1eb74     0C 4E 85 F1 | 	sub	fp, #12
1eb78                 | LR__2491
1eb78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1eb78     08 4E 05 F1 | 	add	fp, #8
1eb7c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1eb80     08 4E 85 F1 | 	sub	fp, #8
1eb84     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1eb88     14 4E 05 A1 |  if_e	add	fp, #20
1eb8c     A7 26 02 AB |  if_e	rdlong	local01, fp
1eb90     14 4E 85 A1 |  if_e	sub	fp, #20
1eb94     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1eb98     20 00 90 5D |  if_ne	jmp	#LR__2492
1eb9c     0C 4E 05 F1 | 	add	fp, #12
1eba0     A7 26 02 FB | 	rdlong	local01, fp
1eba4     0C 4E 85 F1 | 	sub	fp, #12
1eba8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1ebac     13 8B 12 FD | 	qdiv	muldivb_, local01
1ebb0     19 26 62 FD | 	getqy	local01
1ebb4     A7 26 62 FC | 	wrlong	local01, fp
1ebb8     E0 00 90 FD | 	jmp	#LR__2496
1ebbc                 | LR__2492
1ebbc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1ebbc     08 4E 05 F1 | 	add	fp, #8
1ebc0     A7 8A 02 FB | 	rdlong	muldivb_, fp
1ebc4     08 4E 85 F1 | 	sub	fp, #8
1ebc8     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1ebcc     14 4E 05 A1 |  if_e	add	fp, #20
1ebd0     A7 26 02 AB |  if_e	rdlong	local01, fp
1ebd4     14 4E 85 A1 |  if_e	sub	fp, #20
1ebd8     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1ebdc     2C 00 90 5D |  if_ne	jmp	#LR__2493
1ebe0     0C 4E 05 F1 | 	add	fp, #12
1ebe4     A7 26 02 FB | 	rdlong	local01, fp
1ebe8     0C 4E 85 F1 | 	sub	fp, #12
1ebec     A7 8A 02 FB | 	rdlong	muldivb_, fp
1ebf0     13 8B 12 FD | 	qdiv	muldivb_, local01
1ebf4     19 26 62 FD | 	getqy	local01
1ebf8     A7 26 62 FC | 	wrlong	local01, fp
1ebfc     08 4E 05 F1 | 	add	fp, #8
1ec00     A7 38 68 FC | 	wrlong	#28, fp
1ec04     08 4E 85 F1 | 	sub	fp, #8
1ec08     90 00 90 FD | 	jmp	#LR__2496
1ec0c                 | LR__2493
1ec0c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1ec0c     08 4E 05 F1 | 	add	fp, #8
1ec10     A7 8A 02 FB | 	rdlong	muldivb_, fp
1ec14     08 4E 85 F1 | 	sub	fp, #8
1ec18     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1ec1c     14 4E 05 A1 |  if_e	add	fp, #20
1ec20     A7 26 02 AB |  if_e	rdlong	local01, fp
1ec24     14 4E 85 A1 |  if_e	sub	fp, #20
1ec28     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1ec2c     1C 00 90 5D |  if_ne	jmp	#LR__2494
1ec30     A7 88 02 FB | 	rdlong	muldiva_, fp
1ec34     0C 4E 05 F1 | 	add	fp, #12
1ec38     A7 8A 02 FB | 	rdlong	muldivb_, fp
1ec3c     0C 4E 85 F1 | 	sub	fp, #12
1ec40     BA 00 A0 FD | 	call	#divide_
1ec44     A7 88 62 FC | 	wrlong	muldiva_, fp
1ec48     50 00 90 FD | 	jmp	#LR__2496
1ec4c                 | LR__2494
1ec4c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1ec4c     08 4E 05 F1 | 	add	fp, #8
1ec50     A7 8A 02 FB | 	rdlong	muldivb_, fp
1ec54     08 4E 85 F1 | 	sub	fp, #8
1ec58     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1ec5c     14 4E 05 A1 |  if_e	add	fp, #20
1ec60     A7 26 02 AB |  if_e	rdlong	local01, fp
1ec64     14 4E 85 A1 |  if_e	sub	fp, #20
1ec68     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1ec6c     1C 00 90 5D |  if_ne	jmp	#LR__2495
1ec70     A7 88 02 FB | 	rdlong	muldiva_, fp
1ec74     0C 4E 05 F1 | 	add	fp, #12
1ec78     A7 8A 02 FB | 	rdlong	muldivb_, fp
1ec7c     0C 4E 85 F1 | 	sub	fp, #12
1ec80     BA 00 A0 FD | 	call	#divide_
1ec84     A7 88 62 FC | 	wrlong	muldiva_, fp
1ec88     10 00 90 FD | 	jmp	#LR__2496
1ec8c                 | LR__2495
1ec8c     A7 16 68 FC | 	wrlong	#11, fp
1ec90     08 4E 05 F1 | 	add	fp, #8
1ec94     A7 FE 69 FC | 	wrlong	#255, fp
1ec98     08 4E 85 F1 | 	sub	fp, #8
1ec9c                 | LR__2496
1ec9c     A7 12 02 F6 | 	mov	arg01, fp
1eca0     74 E0 BE FD | 	call	#_push
1eca4     A7 F0 03 F6 | 	mov	ptra, fp
1eca8     B2 00 A0 FD | 	call	#popregs_
1ecac                 | _do_mod_ret
1ecac     2D 00 64 FD | 	ret
1ecb0                 | 
1ecb0                 | ' 
1ecb0                 | ' '--------------------------------- mul (*)
1ecb0                 | ' 
1ecb0                 | ' sub do_mul
1ecb0                 | _do_mul
1ecb0     05 4A 05 F6 | 	mov	COUNT_, #5
1ecb4     A8 00 A0 FD | 	call	#pushregs_
1ecb8     18 F0 07 F1 | 	add	ptra, #24
1ecbc     C0 DF BE FD | 	call	#_pop
1ecc0     FD 26 02 F6 | 	mov	local01, result1
1ecc4     FE 28 02 F6 | 	mov	local02, result2
1ecc8     FF 2A 02 F6 | 	mov	local03, result3
1eccc     0C 4E 05 F1 | 	add	fp, #12
1ecd0     A7 26 62 FC | 	wrlong	local01, fp
1ecd4     04 4E 05 F1 | 	add	fp, #4
1ecd8     A7 28 62 FC | 	wrlong	local02, fp
1ecdc     04 4E 05 F1 | 	add	fp, #4
1ece0     A7 2A 62 FC | 	wrlong	local03, fp
1ece4     14 4E 85 F1 | 	sub	fp, #20
1ece8     94 DF BE FD | 	call	#_pop
1ecec     FF 2A 02 F6 | 	mov	local03, result3
1ecf0     A7 FA 61 FC | 	wrlong	result1, fp
1ecf4     04 4E 05 F1 | 	add	fp, #4
1ecf8     A7 FC 61 FC | 	wrlong	result2, fp
1ecfc     04 4E 05 F1 | 	add	fp, #4
1ed00     A7 2A 62 FC | 	wrlong	local03, fp
1ed04                 | ' 
1ed04                 | ' t2=pop()
1ed04                 | ' t1=pop()
1ed04                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1ed04     08 4E 85 F1 | 	sub	fp, #8
1ed08     1D 2A 0E F2 | 	cmp	local03, #29 wz
1ed0c     14 4E 05 A1 |  if_e	add	fp, #20
1ed10     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed14     14 4E 85 A1 |  if_e	sub	fp, #20
1ed18     16 2B 02 A6 |  if_e	mov	local03, local04
1ed1c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ed20     20 00 90 5D |  if_ne	jmp	#LR__2500
1ed24     A7 28 02 FB | 	rdlong	local02, fp
1ed28     0C 4E 05 F1 | 	add	fp, #12
1ed2c     A7 2A 02 FB | 	rdlong	local03, fp
1ed30     15 29 02 FD | 	qmul	local02, local03
1ed34     0C 4E 85 F1 | 	sub	fp, #12
1ed38     18 26 62 FD | 	getqx	local01
1ed3c     A7 26 62 FC | 	wrlong	local01, fp
1ed40     C4 02 90 FD | 	jmp	#LR__2509
1ed44                 | LR__2500
1ed44                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1ed44     08 4E 05 F1 | 	add	fp, #8
1ed48     A7 26 02 FB | 	rdlong	local01, fp
1ed4c     08 4E 85 F1 | 	sub	fp, #8
1ed50     1D 26 0E F2 | 	cmp	local01, #29 wz
1ed54     14 4E 05 A1 |  if_e	add	fp, #20
1ed58     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed5c     14 4E 85 A1 |  if_e	sub	fp, #20
1ed60     16 2B 02 A6 |  if_e	mov	local03, local04
1ed64     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ed68     2C 00 90 5D |  if_ne	jmp	#LR__2501
1ed6c     A7 28 02 FB | 	rdlong	local02, fp
1ed70     0C 4E 05 F1 | 	add	fp, #12
1ed74     A7 2A 02 FB | 	rdlong	local03, fp
1ed78     15 29 02 FD | 	qmul	local02, local03
1ed7c     0C 4E 85 F1 | 	sub	fp, #12
1ed80     18 26 62 FD | 	getqx	local01
1ed84     A7 26 62 FC | 	wrlong	local01, fp
1ed88     08 4E 05 F1 | 	add	fp, #8
1ed8c     A7 38 68 FC | 	wrlong	#28, fp
1ed90     08 4E 85 F1 | 	sub	fp, #8
1ed94     70 02 90 FD | 	jmp	#LR__2509
1ed98                 | LR__2501
1ed98                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1ed98     08 4E 05 F1 | 	add	fp, #8
1ed9c     A7 26 02 FB | 	rdlong	local01, fp
1eda0     08 4E 85 F1 | 	sub	fp, #8
1eda4     1D 26 0E F2 | 	cmp	local01, #29 wz
1eda8     14 4E 05 A1 |  if_e	add	fp, #20
1edac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1edb0     14 4E 85 A1 |  if_e	sub	fp, #20
1edb4     16 2B 02 A6 |  if_e	mov	local03, local04
1edb8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1edbc     30 00 90 5D |  if_ne	jmp	#LR__2502
1edc0     A7 12 02 FB | 	rdlong	arg01, fp
1edc4     34 96 B0 FD | 	call	#__system___float_fromuns
1edc8     FD 12 02 F6 | 	mov	arg01, result1
1edcc     0C 4E 05 F1 | 	add	fp, #12
1edd0     A7 14 02 FB | 	rdlong	arg02, fp
1edd4     0C 4E 85 F1 | 	sub	fp, #12
1edd8     24 9A B0 FD | 	call	#__system___float_mul
1eddc     A7 FA 61 FC | 	wrlong	result1, fp
1ede0     08 4E 05 F1 | 	add	fp, #8
1ede4     A7 3C 68 FC | 	wrlong	#30, fp
1ede8     08 4E 85 F1 | 	sub	fp, #8
1edec     18 02 90 FD | 	jmp	#LR__2509
1edf0                 | LR__2502
1edf0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1edf0     08 4E 05 F1 | 	add	fp, #8
1edf4     A7 26 02 FB | 	rdlong	local01, fp
1edf8     08 4E 85 F1 | 	sub	fp, #8
1edfc     1C 26 0E F2 | 	cmp	local01, #28 wz
1ee00     14 4E 05 A1 |  if_e	add	fp, #20
1ee04     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ee08     14 4E 85 A1 |  if_e	sub	fp, #20
1ee0c     16 2B 02 A6 |  if_e	mov	local03, local04
1ee10     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ee14     20 00 90 5D |  if_ne	jmp	#LR__2503
1ee18     A7 28 02 FB | 	rdlong	local02, fp
1ee1c     0C 4E 05 F1 | 	add	fp, #12
1ee20     A7 2A 02 FB | 	rdlong	local03, fp
1ee24     15 29 02 FD | 	qmul	local02, local03
1ee28     0C 4E 85 F1 | 	sub	fp, #12
1ee2c     18 26 62 FD | 	getqx	local01
1ee30     A7 26 62 FC | 	wrlong	local01, fp
1ee34     D0 01 90 FD | 	jmp	#LR__2509
1ee38                 | LR__2503
1ee38                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1ee38     08 4E 05 F1 | 	add	fp, #8
1ee3c     A7 26 02 FB | 	rdlong	local01, fp
1ee40     08 4E 85 F1 | 	sub	fp, #8
1ee44     1C 26 0E F2 | 	cmp	local01, #28 wz
1ee48     14 4E 05 A1 |  if_e	add	fp, #20
1ee4c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ee50     14 4E 85 A1 |  if_e	sub	fp, #20
1ee54     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1ee58     20 00 90 5D |  if_ne	jmp	#LR__2504
1ee5c     A7 28 02 FB | 	rdlong	local02, fp
1ee60     0C 4E 05 F1 | 	add	fp, #12
1ee64     A7 2A 02 FB | 	rdlong	local03, fp
1ee68     15 29 02 FD | 	qmul	local02, local03
1ee6c     0C 4E 85 F1 | 	sub	fp, #12
1ee70     18 26 62 FD | 	getqx	local01
1ee74     A7 26 62 FC | 	wrlong	local01, fp
1ee78     8C 01 90 FD | 	jmp	#LR__2509
1ee7c                 | LR__2504
1ee7c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1ee7c     08 4E 05 F1 | 	add	fp, #8
1ee80     A7 26 02 FB | 	rdlong	local01, fp
1ee84     08 4E 85 F1 | 	sub	fp, #8
1ee88     1C 26 0E F2 | 	cmp	local01, #28 wz
1ee8c     14 4E 05 A1 |  if_e	add	fp, #20
1ee90     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ee94     14 4E 85 A1 |  if_e	sub	fp, #20
1ee98     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ee9c     40 00 90 5D |  if_ne	jmp	#LR__2505
1eea0     A7 12 02 FB | 	rdlong	arg01, fp
1eea4     09 13 52 F6 | 	abs	arg01, arg01 wc
1eea8     1F 2E C6 C9 |  if_b	decod	local05, #31
1eeac     00 2E 06 36 |  if_ae	mov	local05, #0
1eeb0     48 95 B0 FD | 	call	#__system___float_fromuns
1eeb4     17 FB 61 F5 | 	xor	result1, local05
1eeb8     FD 12 02 F6 | 	mov	arg01, result1
1eebc     0C 4E 05 F1 | 	add	fp, #12
1eec0     A7 14 02 FB | 	rdlong	arg02, fp
1eec4     0C 4E 85 F1 | 	sub	fp, #12
1eec8     34 99 B0 FD | 	call	#__system___float_mul
1eecc     A7 FA 61 FC | 	wrlong	result1, fp
1eed0     08 4E 05 F1 | 	add	fp, #8
1eed4     A7 3C 68 FC | 	wrlong	#30, fp
1eed8     08 4E 85 F1 | 	sub	fp, #8
1eedc     28 01 90 FD | 	jmp	#LR__2509
1eee0                 | LR__2505
1eee0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1eee0     08 4E 05 F1 | 	add	fp, #8
1eee4     A7 26 02 FB | 	rdlong	local01, fp
1eee8     08 4E 85 F1 | 	sub	fp, #8
1eeec     1E 26 0E F2 | 	cmp	local01, #30 wz
1eef0     14 4E 05 A1 |  if_e	add	fp, #20
1eef4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eef8     14 4E 85 A1 |  if_e	sub	fp, #20
1eefc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ef00     28 00 90 5D |  if_ne	jmp	#LR__2506
1ef04     A7 26 02 FB | 	rdlong	local01, fp
1ef08     0C 4E 05 F1 | 	add	fp, #12
1ef0c     A7 12 02 FB | 	rdlong	arg01, fp
1ef10     0C 4E 85 F1 | 	sub	fp, #12
1ef14     E4 94 B0 FD | 	call	#__system___float_fromuns
1ef18     FD 14 02 F6 | 	mov	arg02, result1
1ef1c     13 13 02 F6 | 	mov	arg01, local01
1ef20     DC 98 B0 FD | 	call	#__system___float_mul
1ef24     A7 FA 61 FC | 	wrlong	result1, fp
1ef28     DC 00 90 FD | 	jmp	#LR__2509
1ef2c                 | LR__2506
1ef2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1ef2c     08 4E 05 F1 | 	add	fp, #8
1ef30     A7 26 02 FB | 	rdlong	local01, fp
1ef34     08 4E 85 F1 | 	sub	fp, #8
1ef38     1E 26 0E F2 | 	cmp	local01, #30 wz
1ef3c     14 4E 05 A1 |  if_e	add	fp, #20
1ef40     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ef44     14 4E 85 A1 |  if_e	sub	fp, #20
1ef48     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ef4c     38 00 90 5D |  if_ne	jmp	#LR__2507
1ef50     A7 26 02 FB | 	rdlong	local01, fp
1ef54     0C 4E 05 F1 | 	add	fp, #12
1ef58     A7 12 02 FB | 	rdlong	arg01, fp
1ef5c     0C 4E 85 F1 | 	sub	fp, #12
1ef60     09 13 52 F6 | 	abs	arg01, arg01 wc
1ef64     1F 2E C6 C9 |  if_b	decod	local05, #31
1ef68     00 2E 06 36 |  if_ae	mov	local05, #0
1ef6c     8C 94 B0 FD | 	call	#__system___float_fromuns
1ef70     17 FB 61 F5 | 	xor	result1, local05
1ef74     FD 14 02 F6 | 	mov	arg02, result1
1ef78     13 13 02 F6 | 	mov	arg01, local01
1ef7c     80 98 B0 FD | 	call	#__system___float_mul
1ef80     A7 FA 61 FC | 	wrlong	result1, fp
1ef84     80 00 90 FD | 	jmp	#LR__2509
1ef88                 | LR__2507
1ef88                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1ef88     08 4E 05 F1 | 	add	fp, #8
1ef8c     A7 26 02 FB | 	rdlong	local01, fp
1ef90     08 4E 85 F1 | 	sub	fp, #8
1ef94     1E 26 0E F2 | 	cmp	local01, #30 wz
1ef98     14 4E 05 A1 |  if_e	add	fp, #20
1ef9c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1efa0     14 4E 85 A1 |  if_e	sub	fp, #20
1efa4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1efa8     1C 00 90 5D |  if_ne	jmp	#LR__2508
1efac     A7 12 02 FB | 	rdlong	arg01, fp
1efb0     0C 4E 05 F1 | 	add	fp, #12
1efb4     A7 14 02 FB | 	rdlong	arg02, fp
1efb8     0C 4E 85 F1 | 	sub	fp, #12
1efbc     40 98 B0 FD | 	call	#__system___float_mul
1efc0     A7 FA 61 FC | 	wrlong	result1, fp
1efc4     40 00 90 FD | 	jmp	#LR__2509
1efc8                 | LR__2508
1efc8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1efc8     08 4E 05 F1 | 	add	fp, #8
1efcc     A7 26 02 FB | 	rdlong	local01, fp
1efd0     08 4E 85 F1 | 	sub	fp, #8
1efd4     1F 26 0E F2 | 	cmp	local01, #31 wz
1efd8     14 4E 05 51 |  if_ne	add	fp, #20
1efdc     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1efe0     14 4E 85 51 |  if_ne	sub	fp, #20
1efe4     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1efe8     A7 10 68 AC |  if_e	wrlong	#8, fp
1efec     08 4E 05 A1 |  if_e	add	fp, #8
1eff0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1eff4     08 4E 85 A1 |  if_e	sub	fp, #8
1eff8     A7 12 68 5C |  if_ne	wrlong	#9, fp
1effc     08 4E 05 51 |  if_ne	add	fp, #8
1f000     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1f004     08 4E 85 51 |  if_ne	sub	fp, #8
1f008                 | LR__2509
1f008     A7 12 02 F6 | 	mov	arg01, fp
1f00c     08 DD BE FD | 	call	#_push
1f010     A7 F0 03 F6 | 	mov	ptra, fp
1f014     B2 00 A0 FD | 	call	#popregs_
1f018                 | _do_mul_ret
1f018     2D 00 64 FD | 	ret
1f01c                 | 
1f01c                 | ' 
1f01c                 | ' '--------------------------------- not equal (<>)
1f01c                 | ' 
1f01c                 | ' sub do_ne
1f01c                 | _do_ne
1f01c     05 4A 05 F6 | 	mov	COUNT_, #5
1f020     A8 00 A0 FD | 	call	#pushregs_
1f024     18 F0 07 F1 | 	add	ptra, #24
1f028     54 DC BE FD | 	call	#_pop
1f02c     FD 26 02 F6 | 	mov	local01, result1
1f030     FE 28 02 F6 | 	mov	local02, result2
1f034     FF 2A 02 F6 | 	mov	local03, result3
1f038     0C 4E 05 F1 | 	add	fp, #12
1f03c     A7 26 62 FC | 	wrlong	local01, fp
1f040     04 4E 05 F1 | 	add	fp, #4
1f044     A7 28 62 FC | 	wrlong	local02, fp
1f048     04 4E 05 F1 | 	add	fp, #4
1f04c     A7 2A 62 FC | 	wrlong	local03, fp
1f050     14 4E 85 F1 | 	sub	fp, #20
1f054     28 DC BE FD | 	call	#_pop
1f058     FF 2A 02 F6 | 	mov	local03, result3
1f05c     A7 FA 61 FC | 	wrlong	result1, fp
1f060     04 4E 05 F1 | 	add	fp, #4
1f064     A7 FC 61 FC | 	wrlong	result2, fp
1f068     04 4E 05 F1 | 	add	fp, #4
1f06c     A7 2A 62 FC | 	wrlong	local03, fp
1f070                 | ' 
1f070                 | ' t2=pop()
1f070                 | ' t1=pop()
1f070                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1f070     08 4E 85 F1 | 	sub	fp, #8
1f074     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f078     14 4E 05 A1 |  if_e	add	fp, #20
1f07c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f080     14 4E 85 A1 |  if_e	sub	fp, #20
1f084     16 2B 02 A6 |  if_e	mov	local03, local04
1f088     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f08c     28 00 90 5D |  if_ne	jmp	#LR__2510
1f090     00 26 06 F6 | 	mov	local01, #0
1f094     A7 12 02 FB | 	rdlong	arg01, fp
1f098     0C 4E 05 F1 | 	add	fp, #12
1f09c     A7 14 02 FB | 	rdlong	arg02, fp
1f0a0     0C 4E 85 F1 | 	sub	fp, #12
1f0a4     08 69 B0 FD | 	call	#__system___string_cmp
1f0a8     00 FA 0D F2 | 	cmp	result1, #0 wz
1f0ac     00 26 26 56 |  if_ne	not	local01, #0
1f0b0     A7 26 62 FC | 	wrlong	local01, fp
1f0b4     20 04 90 FD | 	jmp	#LR__2523
1f0b8                 | LR__2510
1f0b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1f0b8     08 4E 05 F1 | 	add	fp, #8
1f0bc     A7 26 02 FB | 	rdlong	local01, fp
1f0c0     08 4E 85 F1 | 	sub	fp, #8
1f0c4     1E 26 0E F2 | 	cmp	local01, #30 wz
1f0c8     14 4E 05 A1 |  if_e	add	fp, #20
1f0cc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f0d0     14 4E 85 A1 |  if_e	sub	fp, #20
1f0d4     16 2B 02 A6 |  if_e	mov	local03, local04
1f0d8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f0dc     2C 00 90 5D |  if_ne	jmp	#LR__2511
1f0e0     00 26 06 F6 | 	mov	local01, #0
1f0e4     A7 12 02 FB | 	rdlong	arg01, fp
1f0e8     0C 4E 05 F1 | 	add	fp, #12
1f0ec     A7 14 02 FB | 	rdlong	arg02, fp
1f0f0     0C 4E 85 F1 | 	sub	fp, #12
1f0f4     01 16 06 F6 | 	mov	arg03, #1
1f0f8     38 9B B0 FD | 	call	#__system___float_cmp
1f0fc     00 FA 0D F2 | 	cmp	result1, #0 wz
1f100     00 26 26 56 |  if_ne	not	local01, #0
1f104     A7 26 62 FC | 	wrlong	local01, fp
1f108     CC 03 90 FD | 	jmp	#LR__2523
1f10c                 | LR__2511
1f10c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1f10c     08 4E 05 F1 | 	add	fp, #8
1f110     A7 26 02 FB | 	rdlong	local01, fp
1f114     08 4E 85 F1 | 	sub	fp, #8
1f118     1E 26 0E F2 | 	cmp	local01, #30 wz
1f11c     14 4E 05 A1 |  if_e	add	fp, #20
1f120     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f124     14 4E 85 A1 |  if_e	sub	fp, #20
1f128     16 2B 02 A6 |  if_e	mov	local03, local04
1f12c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f130     48 00 90 5D |  if_ne	jmp	#LR__2512
1f134     00 26 06 F6 | 	mov	local01, #0
1f138     A7 28 02 FB | 	rdlong	local02, fp
1f13c     0C 4E 05 F1 | 	add	fp, #12
1f140     A7 12 02 FB | 	rdlong	arg01, fp
1f144     0C 4E 85 F1 | 	sub	fp, #12
1f148     09 13 52 F6 | 	abs	arg01, arg01 wc
1f14c     1F 2E C6 C9 |  if_b	decod	local05, #31
1f150     00 2E 06 36 |  if_ae	mov	local05, #0
1f154     A4 92 B0 FD | 	call	#__system___float_fromuns
1f158     17 FB 61 F5 | 	xor	result1, local05
1f15c     FD 14 02 F6 | 	mov	arg02, result1
1f160     14 13 02 F6 | 	mov	arg01, local02
1f164     01 16 06 F6 | 	mov	arg03, #1
1f168     C8 9A B0 FD | 	call	#__system___float_cmp
1f16c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f170     00 26 26 56 |  if_ne	not	local01, #0
1f174     A7 26 62 FC | 	wrlong	local01, fp
1f178     5C 03 90 FD | 	jmp	#LR__2523
1f17c                 | LR__2512
1f17c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1f17c     08 4E 05 F1 | 	add	fp, #8
1f180     A7 26 02 FB | 	rdlong	local01, fp
1f184     08 4E 85 F1 | 	sub	fp, #8
1f188     1E 26 0E F2 | 	cmp	local01, #30 wz
1f18c     14 4E 05 A1 |  if_e	add	fp, #20
1f190     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f194     14 4E 85 A1 |  if_e	sub	fp, #20
1f198     16 2B 02 A6 |  if_e	mov	local03, local04
1f19c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f1a0     38 00 90 5D |  if_ne	jmp	#LR__2513
1f1a4     00 26 06 F6 | 	mov	local01, #0
1f1a8     A7 28 02 FB | 	rdlong	local02, fp
1f1ac     0C 4E 05 F1 | 	add	fp, #12
1f1b0     A7 12 02 FB | 	rdlong	arg01, fp
1f1b4     0C 4E 85 F1 | 	sub	fp, #12
1f1b8     40 92 B0 FD | 	call	#__system___float_fromuns
1f1bc     FD 14 02 F6 | 	mov	arg02, result1
1f1c0     14 13 02 F6 | 	mov	arg01, local02
1f1c4     01 16 06 F6 | 	mov	arg03, #1
1f1c8     68 9A B0 FD | 	call	#__system___float_cmp
1f1cc     00 FA 0D F2 | 	cmp	result1, #0 wz
1f1d0     00 26 26 56 |  if_ne	not	local01, #0
1f1d4     A7 26 62 FC | 	wrlong	local01, fp
1f1d8     FC 02 90 FD | 	jmp	#LR__2523
1f1dc                 | LR__2513
1f1dc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1f1dc     08 4E 05 F1 | 	add	fp, #8
1f1e0     A7 26 02 FB | 	rdlong	local01, fp
1f1e4     08 4E 85 F1 | 	sub	fp, #8
1f1e8     1C 26 0E F2 | 	cmp	local01, #28 wz
1f1ec     14 4E 05 A1 |  if_e	add	fp, #20
1f1f0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f1f4     14 4E 85 A1 |  if_e	sub	fp, #20
1f1f8     16 2B 02 A6 |  if_e	mov	local03, local04
1f1fc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f200     44 00 90 5D |  if_ne	jmp	#LR__2514
1f204     00 26 06 F6 | 	mov	local01, #0
1f208     A7 12 02 FB | 	rdlong	arg01, fp
1f20c     09 13 52 F6 | 	abs	arg01, arg01 wc
1f210     1F 2E C6 C9 |  if_b	decod	local05, #31
1f214     00 2E 06 36 |  if_ae	mov	local05, #0
1f218     E0 91 B0 FD | 	call	#__system___float_fromuns
1f21c     17 FB 61 F5 | 	xor	result1, local05
1f220     FD 12 02 F6 | 	mov	arg01, result1
1f224     0C 4E 05 F1 | 	add	fp, #12
1f228     A7 14 02 FB | 	rdlong	arg02, fp
1f22c     0C 4E 85 F1 | 	sub	fp, #12
1f230     01 16 06 F6 | 	mov	arg03, #1
1f234     FC 99 B0 FD | 	call	#__system___float_cmp
1f238     00 FA 0D F2 | 	cmp	result1, #0 wz
1f23c     00 26 26 56 |  if_ne	not	local01, #0
1f240     A7 26 62 FC | 	wrlong	local01, fp
1f244     90 02 90 FD | 	jmp	#LR__2523
1f248                 | LR__2514
1f248                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1f248     08 4E 05 F1 | 	add	fp, #8
1f24c     A7 26 02 FB | 	rdlong	local01, fp
1f250     08 4E 85 F1 | 	sub	fp, #8
1f254     1C 26 0E F2 | 	cmp	local01, #28 wz
1f258     14 4E 05 A1 |  if_e	add	fp, #20
1f25c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f260     14 4E 85 A1 |  if_e	sub	fp, #20
1f264     16 2B 02 A6 |  if_e	mov	local03, local04
1f268     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f26c     24 00 90 5D |  if_ne	jmp	#LR__2515
1f270     00 26 06 F6 | 	mov	local01, #0
1f274     A7 28 02 FB | 	rdlong	local02, fp
1f278     0C 4E 05 F1 | 	add	fp, #12
1f27c     A7 2A 02 FB | 	rdlong	local03, fp
1f280     0C 4E 85 F1 | 	sub	fp, #12
1f284     15 29 0A F2 | 	cmp	local02, local03 wz
1f288     01 26 66 56 |  if_ne	neg	local01, #1
1f28c     A7 26 62 FC | 	wrlong	local01, fp
1f290     44 02 90 FD | 	jmp	#LR__2523
1f294                 | LR__2515
1f294                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1f294     08 4E 05 F1 | 	add	fp, #8
1f298     A7 26 02 FB | 	rdlong	local01, fp
1f29c     08 4E 85 F1 | 	sub	fp, #8
1f2a0     1C 26 0E F2 | 	cmp	local01, #28 wz
1f2a4     14 4E 05 A1 |  if_e	add	fp, #20
1f2a8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f2ac     14 4E 85 A1 |  if_e	sub	fp, #20
1f2b0     16 2B 02 A6 |  if_e	mov	local03, local04
1f2b4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f2b8     24 00 90 5D |  if_ne	jmp	#LR__2516
1f2bc     00 26 06 F6 | 	mov	local01, #0
1f2c0     A7 28 02 FB | 	rdlong	local02, fp
1f2c4     0C 4E 05 F1 | 	add	fp, #12
1f2c8     A7 2A 02 FB | 	rdlong	local03, fp
1f2cc     0C 4E 85 F1 | 	sub	fp, #12
1f2d0     15 29 0A F2 | 	cmp	local02, local03 wz
1f2d4     01 26 66 56 |  if_ne	neg	local01, #1
1f2d8     A7 26 62 FC | 	wrlong	local01, fp
1f2dc     F8 01 90 FD | 	jmp	#LR__2523
1f2e0                 | LR__2516
1f2e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1f2e0     08 4E 05 F1 | 	add	fp, #8
1f2e4     A7 26 02 FB | 	rdlong	local01, fp
1f2e8     08 4E 85 F1 | 	sub	fp, #8
1f2ec     1D 26 0E F2 | 	cmp	local01, #29 wz
1f2f0     14 4E 05 A1 |  if_e	add	fp, #20
1f2f4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f2f8     14 4E 85 A1 |  if_e	sub	fp, #20
1f2fc     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f300     34 00 90 5D |  if_ne	jmp	#LR__2517
1f304     00 26 06 F6 | 	mov	local01, #0
1f308     A7 12 02 FB | 	rdlong	arg01, fp
1f30c     EC 90 B0 FD | 	call	#__system___float_fromuns
1f310     FD 12 02 F6 | 	mov	arg01, result1
1f314     0C 4E 05 F1 | 	add	fp, #12
1f318     A7 14 02 FB | 	rdlong	arg02, fp
1f31c     0C 4E 85 F1 | 	sub	fp, #12
1f320     01 16 06 F6 | 	mov	arg03, #1
1f324     0C 99 B0 FD | 	call	#__system___float_cmp
1f328     00 FA 0D F2 | 	cmp	result1, #0 wz
1f32c     00 26 26 56 |  if_ne	not	local01, #0
1f330     A7 26 62 FC | 	wrlong	local01, fp
1f334     A0 01 90 FD | 	jmp	#LR__2523
1f338                 | LR__2517
1f338                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1f338     08 4E 05 F1 | 	add	fp, #8
1f33c     A7 26 02 FB | 	rdlong	local01, fp
1f340     08 4E 85 F1 | 	sub	fp, #8
1f344     1D 26 0E F2 | 	cmp	local01, #29 wz
1f348     14 4E 05 A1 |  if_e	add	fp, #20
1f34c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f350     14 4E 85 A1 |  if_e	sub	fp, #20
1f354     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f358     24 00 90 5D |  if_ne	jmp	#LR__2518
1f35c     00 26 06 F6 | 	mov	local01, #0
1f360     A7 28 02 FB | 	rdlong	local02, fp
1f364     0C 4E 05 F1 | 	add	fp, #12
1f368     A7 2A 02 FB | 	rdlong	local03, fp
1f36c     0C 4E 85 F1 | 	sub	fp, #12
1f370     15 29 0A F2 | 	cmp	local02, local03 wz
1f374     01 26 66 56 |  if_ne	neg	local01, #1
1f378     A7 26 62 FC | 	wrlong	local01, fp
1f37c     58 01 90 FD | 	jmp	#LR__2523
1f380                 | LR__2518
1f380                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1f380     08 4E 05 F1 | 	add	fp, #8
1f384     A7 26 02 FB | 	rdlong	local01, fp
1f388     08 4E 85 F1 | 	sub	fp, #8
1f38c     1D 26 0E F2 | 	cmp	local01, #29 wz
1f390     14 4E 05 A1 |  if_e	add	fp, #20
1f394     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f398     14 4E 85 A1 |  if_e	sub	fp, #20
1f39c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f3a0     24 00 90 5D |  if_ne	jmp	#LR__2519
1f3a4     00 26 06 F6 | 	mov	local01, #0
1f3a8     A7 28 02 FB | 	rdlong	local02, fp
1f3ac     0C 4E 05 F1 | 	add	fp, #12
1f3b0     A7 2A 02 FB | 	rdlong	local03, fp
1f3b4     0C 4E 85 F1 | 	sub	fp, #12
1f3b8     15 29 0A F2 | 	cmp	local02, local03 wz
1f3bc     01 26 66 56 |  if_ne	neg	local01, #1
1f3c0     A7 26 62 FC | 	wrlong	local01, fp
1f3c4     10 01 90 FD | 	jmp	#LR__2523
1f3c8                 | LR__2519
1f3c8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1f3c8     08 4E 05 F1 | 	add	fp, #8
1f3cc     A7 26 02 FB | 	rdlong	local01, fp
1f3d0     08 4E 85 F1 | 	sub	fp, #8
1f3d4     2B 26 0E F2 | 	cmp	local01, #43 wz
1f3d8     14 4E 05 A1 |  if_e	add	fp, #20
1f3dc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f3e0     14 4E 85 A1 |  if_e	sub	fp, #20
1f3e4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f3e8     30 00 90 5D |  if_ne	jmp	#LR__2520
1f3ec     00 26 06 F6 | 	mov	local01, #0
1f3f0     A7 12 02 FB | 	rdlong	arg01, fp
1f3f4     00 DA BE FD | 	call	#_convertstring
1f3f8     FD 12 02 F6 | 	mov	arg01, result1
1f3fc     0C 4E 05 F1 | 	add	fp, #12
1f400     A7 14 02 FB | 	rdlong	arg02, fp
1f404     0C 4E 85 F1 | 	sub	fp, #12
1f408     A4 65 B0 FD | 	call	#__system___string_cmp
1f40c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f410     00 26 26 56 |  if_ne	not	local01, #0
1f414     A7 26 62 FC | 	wrlong	local01, fp
1f418     BC 00 90 FD | 	jmp	#LR__2523
1f41c                 | LR__2520
1f41c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1f41c     08 4E 05 F1 | 	add	fp, #8
1f420     A7 26 02 FB | 	rdlong	local01, fp
1f424     08 4E 85 F1 | 	sub	fp, #8
1f428     1F 26 0E F2 | 	cmp	local01, #31 wz
1f42c     14 4E 05 A1 |  if_e	add	fp, #20
1f430     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f434     14 4E 85 A1 |  if_e	sub	fp, #20
1f438     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f43c     34 00 90 5D |  if_ne	jmp	#LR__2521
1f440     00 26 06 F6 | 	mov	local01, #0
1f444     A7 28 02 FB | 	rdlong	local02, fp
1f448     0C 4E 05 F1 | 	add	fp, #12
1f44c     A7 12 02 FB | 	rdlong	arg01, fp
1f450     0C 4E 85 F1 | 	sub	fp, #12
1f454     A0 D9 BE FD | 	call	#_convertstring
1f458     FD 14 02 F6 | 	mov	arg02, result1
1f45c     14 13 02 F6 | 	mov	arg01, local02
1f460     4C 65 B0 FD | 	call	#__system___string_cmp
1f464     00 FA 0D F2 | 	cmp	result1, #0 wz
1f468     00 26 26 56 |  if_ne	not	local01, #0
1f46c     A7 26 62 FC | 	wrlong	local01, fp
1f470     64 00 90 FD | 	jmp	#LR__2523
1f474                 | LR__2521
1f474                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1f474     08 4E 05 F1 | 	add	fp, #8
1f478     A7 26 02 FB | 	rdlong	local01, fp
1f47c     08 4E 85 F1 | 	sub	fp, #8
1f480     2B 26 0E F2 | 	cmp	local01, #43 wz
1f484     14 4E 05 A1 |  if_e	add	fp, #20
1f488     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f48c     14 4E 85 A1 |  if_e	sub	fp, #20
1f490     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f494     3C 00 90 5D |  if_ne	jmp	#LR__2522
1f498     00 26 06 F6 | 	mov	local01, #0
1f49c     A7 12 02 FB | 	rdlong	arg01, fp
1f4a0     54 D9 BE FD | 	call	#_convertstring
1f4a4     FD 28 02 F6 | 	mov	local02, result1
1f4a8     0C 4E 05 F1 | 	add	fp, #12
1f4ac     A7 12 02 FB | 	rdlong	arg01, fp
1f4b0     0C 4E 85 F1 | 	sub	fp, #12
1f4b4     40 D9 BE FD | 	call	#_convertstring
1f4b8     FD 14 02 F6 | 	mov	arg02, result1
1f4bc     14 13 02 F6 | 	mov	arg01, local02
1f4c0     EC 64 B0 FD | 	call	#__system___string_cmp
1f4c4     00 FA 0D F2 | 	cmp	result1, #0 wz
1f4c8     00 26 26 56 |  if_ne	not	local01, #0
1f4cc     A7 26 62 FC | 	wrlong	local01, fp
1f4d0     04 00 90 FD | 	jmp	#LR__2523
1f4d4                 | LR__2522
1f4d4     A7 00 68 FC | 	wrlong	#0, fp
1f4d8                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f4d8                 | LR__2523
1f4d8     08 4E 05 F1 | 	add	fp, #8
1f4dc     A7 38 68 FC | 	wrlong	#28, fp
1f4e0     08 4E 85 F1 | 	sub	fp, #8
1f4e4     A7 12 02 F6 | 	mov	arg01, fp
1f4e8     2C D8 BE FD | 	call	#_push
1f4ec     A7 F0 03 F6 | 	mov	ptra, fp
1f4f0     B2 00 A0 FD | 	call	#popregs_
1f4f4                 | _do_ne_ret
1f4f4     2D 00 64 FD | 	ret
1f4f8                 | 
1f4f8                 | ' 
1f4f8                 | ' '--------------------------------- OR
1f4f8                 | ' 
1f4f8                 | ' sub do_or 
1f4f8                 | _do_or
1f4f8     03 4A 05 F6 | 	mov	COUNT_, #3
1f4fc     A8 00 A0 FD | 	call	#pushregs_
1f500     18 F0 07 F1 | 	add	ptra, #24
1f504     78 D7 BE FD | 	call	#_pop
1f508     FD 12 02 F6 | 	mov	arg01, result1
1f50c     FE 26 02 F6 | 	mov	local01, result2
1f510     FF 28 02 F6 | 	mov	local02, result3
1f514     0C 4E 05 F1 | 	add	fp, #12
1f518     A7 12 62 FC | 	wrlong	arg01, fp
1f51c     04 4E 05 F1 | 	add	fp, #4
1f520     A7 26 62 FC | 	wrlong	local01, fp
1f524     04 4E 05 F1 | 	add	fp, #4
1f528     A7 28 62 FC | 	wrlong	local02, fp
1f52c     14 4E 85 F1 | 	sub	fp, #20
1f530     4C D7 BE FD | 	call	#_pop
1f534     FF 2A 02 F6 | 	mov	local03, result3
1f538     A7 FA 61 FC | 	wrlong	result1, fp
1f53c     04 4E 05 F1 | 	add	fp, #4
1f540     A7 FC 61 FC | 	wrlong	result2, fp
1f544     04 4E 05 F1 | 	add	fp, #4
1f548     A7 2A 62 FC | 	wrlong	local03, fp
1f54c                 | ' 
1f54c                 | ' t2=pop()
1f54c                 | ' t1=pop()
1f54c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1f54c     08 4E 85 F1 | 	sub	fp, #8
1f550     1C 2A 0E F2 | 	cmp	local03, #28 wz
1f554     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f558     A7 2A 62 AC |  if_e	wrlong	local03, fp
1f55c     08 4E 05 A1 |  if_e	add	fp, #8
1f560     A7 3A 68 AC |  if_e	wrlong	#29, fp
1f564     08 4E 85 A1 |  if_e	sub	fp, #8
1f568                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1f568     14 4E 05 F1 | 	add	fp, #20
1f56c     A7 2A 02 FB | 	rdlong	local03, fp
1f570     14 4E 85 F1 | 	sub	fp, #20
1f574     1C 2A 0E F2 | 	cmp	local03, #28 wz
1f578     18 00 90 5D |  if_ne	jmp	#LR__2530
1f57c     0C 4E 05 F1 | 	add	fp, #12
1f580     A7 2A 02 FB | 	rdlong	local03, fp
1f584     A7 2A 62 FC | 	wrlong	local03, fp
1f588     08 4E 05 F1 | 	add	fp, #8
1f58c     A7 3A 68 FC | 	wrlong	#29, fp
1f590     14 4E 85 F1 | 	sub	fp, #20
1f594                 | LR__2530
1f594                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1f594     08 4E 05 F1 | 	add	fp, #8
1f598     A7 2A 02 FB | 	rdlong	local03, fp
1f59c     08 4E 85 F1 | 	sub	fp, #8
1f5a0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f5a4     14 4E 05 51 |  if_ne	add	fp, #20
1f5a8     A7 28 02 5B |  if_ne	rdlong	local02, fp
1f5ac     14 4E 85 51 |  if_ne	sub	fp, #20
1f5b0     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1f5b4     08 4E 05 51 |  if_ne	add	fp, #8
1f5b8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1f5bc     08 4E 85 51 |  if_ne	sub	fp, #8
1f5c0     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1f5c4     14 4E 05 51 |  if_ne	add	fp, #20
1f5c8     14 4E 85 51 |  if_ne	sub	fp, #20
1f5cc     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1f5d0     A7 0C 68 AC |  if_e	wrlong	#6, fp
1f5d4     08 4E 05 A1 |  if_e	add	fp, #8
1f5d8     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f5dc     08 4E 85 A1 |  if_e	sub	fp, #8
1f5e0     18 00 90 AD |  if_e	jmp	#LR__2531
1f5e4     A7 2A 02 FB | 	rdlong	local03, fp
1f5e8     0C 4E 05 F1 | 	add	fp, #12
1f5ec     A7 26 02 FB | 	rdlong	local01, fp
1f5f0     0C 4E 85 F1 | 	sub	fp, #12
1f5f4     13 2B 42 F5 | 	or	local03, local01
1f5f8     A7 2A 62 FC | 	wrlong	local03, fp
1f5fc                 | LR__2531
1f5fc     A7 12 02 F6 | 	mov	arg01, fp
1f600     14 D7 BE FD | 	call	#_push
1f604     A7 F0 03 F6 | 	mov	ptra, fp
1f608     B2 00 A0 FD | 	call	#popregs_
1f60c                 | _do_or_ret
1f60c     2D 00 64 FD | 	ret
1f610                 | 
1f610                 | ' 
1f610                 | ' '--------------------------------- plus (+)
1f610                 | ' 
1f610                 | ' sub do_plus 
1f610                 | _do_plus
1f610     05 4A 05 F6 | 	mov	COUNT_, #5
1f614     A8 00 A0 FD | 	call	#pushregs_
1f618     18 F0 07 F1 | 	add	ptra, #24
1f61c     60 D6 BE FD | 	call	#_pop
1f620     FD 26 02 F6 | 	mov	local01, result1
1f624     FE 28 02 F6 | 	mov	local02, result2
1f628     FF 2A 02 F6 | 	mov	local03, result3
1f62c     0C 4E 05 F1 | 	add	fp, #12
1f630     A7 26 62 FC | 	wrlong	local01, fp
1f634     04 4E 05 F1 | 	add	fp, #4
1f638     A7 28 62 FC | 	wrlong	local02, fp
1f63c     04 4E 05 F1 | 	add	fp, #4
1f640     A7 2A 62 FC | 	wrlong	local03, fp
1f644     14 4E 85 F1 | 	sub	fp, #20
1f648     34 D6 BE FD | 	call	#_pop
1f64c     FF 2A 02 F6 | 	mov	local03, result3
1f650     A7 FA 61 FC | 	wrlong	result1, fp
1f654     04 4E 05 F1 | 	add	fp, #4
1f658     A7 FC 61 FC | 	wrlong	result2, fp
1f65c     04 4E 05 F1 | 	add	fp, #4
1f660     A7 2A 62 FC | 	wrlong	local03, fp
1f664                 | ' 
1f664                 | ' t2=pop()
1f664                 | ' t1=pop()
1f664                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1f664     08 4E 85 F1 | 	sub	fp, #8
1f668     1D 2A 0E F2 | 	cmp	local03, #29 wz
1f66c     14 4E 05 A1 |  if_e	add	fp, #20
1f670     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f674     14 4E 85 A1 |  if_e	sub	fp, #20
1f678     16 2B 02 A6 |  if_e	mov	local03, local04
1f67c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f680     1C 00 90 5D |  if_ne	jmp	#LR__2540
1f684     A7 26 02 FB | 	rdlong	local01, fp
1f688     0C 4E 05 F1 | 	add	fp, #12
1f68c     A7 28 02 FB | 	rdlong	local02, fp
1f690     0C 4E 85 F1 | 	sub	fp, #12
1f694     14 27 02 F1 | 	add	local01, local02
1f698     A7 26 62 FC | 	wrlong	local01, fp
1f69c     48 04 90 FD | 	jmp	#LR__2555
1f6a0                 | LR__2540
1f6a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1f6a0     08 4E 05 F1 | 	add	fp, #8
1f6a4     A7 26 02 FB | 	rdlong	local01, fp
1f6a8     08 4E 85 F1 | 	sub	fp, #8
1f6ac     1D 26 0E F2 | 	cmp	local01, #29 wz
1f6b0     14 4E 05 A1 |  if_e	add	fp, #20
1f6b4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f6b8     14 4E 85 A1 |  if_e	sub	fp, #20
1f6bc     16 2B 02 A6 |  if_e	mov	local03, local04
1f6c0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f6c4     28 00 90 5D |  if_ne	jmp	#LR__2541
1f6c8     A7 26 02 FB | 	rdlong	local01, fp
1f6cc     0C 4E 05 F1 | 	add	fp, #12
1f6d0     A7 28 02 FB | 	rdlong	local02, fp
1f6d4     0C 4E 85 F1 | 	sub	fp, #12
1f6d8     14 27 02 F1 | 	add	local01, local02
1f6dc     A7 26 62 FC | 	wrlong	local01, fp
1f6e0     08 4E 05 F1 | 	add	fp, #8
1f6e4     A7 38 68 FC | 	wrlong	#28, fp
1f6e8     08 4E 85 F1 | 	sub	fp, #8
1f6ec     F8 03 90 FD | 	jmp	#LR__2555
1f6f0                 | LR__2541
1f6f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1f6f0     08 4E 05 F1 | 	add	fp, #8
1f6f4     A7 26 02 FB | 	rdlong	local01, fp
1f6f8     08 4E 85 F1 | 	sub	fp, #8
1f6fc     1D 26 0E F2 | 	cmp	local01, #29 wz
1f700     14 4E 05 A1 |  if_e	add	fp, #20
1f704     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f708     14 4E 85 A1 |  if_e	sub	fp, #20
1f70c     16 2B 02 A6 |  if_e	mov	local03, local04
1f710     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f714     30 00 90 5D |  if_ne	jmp	#LR__2542
1f718     A7 12 02 FB | 	rdlong	arg01, fp
1f71c     DC 8C B0 FD | 	call	#__system___float_fromuns
1f720     FD 12 02 F6 | 	mov	arg01, result1
1f724     0C 4E 05 F1 | 	add	fp, #12
1f728     A7 14 02 FB | 	rdlong	arg02, fp
1f72c     0C 4E 85 F1 | 	sub	fp, #12
1f730     FC 8C B0 FD | 	call	#__system___float_add
1f734     A7 FA 61 FC | 	wrlong	result1, fp
1f738     08 4E 05 F1 | 	add	fp, #8
1f73c     A7 3C 68 FC | 	wrlong	#30, fp
1f740     08 4E 85 F1 | 	sub	fp, #8
1f744     A0 03 90 FD | 	jmp	#LR__2555
1f748                 | LR__2542
1f748                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1f748     08 4E 05 F1 | 	add	fp, #8
1f74c     A7 26 02 FB | 	rdlong	local01, fp
1f750     08 4E 85 F1 | 	sub	fp, #8
1f754     1C 26 0E F2 | 	cmp	local01, #28 wz
1f758     14 4E 05 A1 |  if_e	add	fp, #20
1f75c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f760     14 4E 85 A1 |  if_e	sub	fp, #20
1f764     16 2B 02 A6 |  if_e	mov	local03, local04
1f768     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f76c     1C 00 90 5D |  if_ne	jmp	#LR__2543
1f770     A7 26 02 FB | 	rdlong	local01, fp
1f774     0C 4E 05 F1 | 	add	fp, #12
1f778     A7 28 02 FB | 	rdlong	local02, fp
1f77c     0C 4E 85 F1 | 	sub	fp, #12
1f780     14 27 02 F1 | 	add	local01, local02
1f784     A7 26 62 FC | 	wrlong	local01, fp
1f788     5C 03 90 FD | 	jmp	#LR__2555
1f78c                 | LR__2543
1f78c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1f78c     08 4E 05 F1 | 	add	fp, #8
1f790     A7 26 02 FB | 	rdlong	local01, fp
1f794     08 4E 85 F1 | 	sub	fp, #8
1f798     1C 26 0E F2 | 	cmp	local01, #28 wz
1f79c     14 4E 05 A1 |  if_e	add	fp, #20
1f7a0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f7a4     14 4E 85 A1 |  if_e	sub	fp, #20
1f7a8     16 2B 02 A6 |  if_e	mov	local03, local04
1f7ac     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f7b0     1C 00 90 5D |  if_ne	jmp	#LR__2544
1f7b4     A7 26 02 FB | 	rdlong	local01, fp
1f7b8     0C 4E 05 F1 | 	add	fp, #12
1f7bc     A7 28 02 FB | 	rdlong	local02, fp
1f7c0     0C 4E 85 F1 | 	sub	fp, #12
1f7c4     14 27 02 F1 | 	add	local01, local02
1f7c8     A7 26 62 FC | 	wrlong	local01, fp
1f7cc     18 03 90 FD | 	jmp	#LR__2555
1f7d0                 | LR__2544
1f7d0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1f7d0     08 4E 05 F1 | 	add	fp, #8
1f7d4     A7 26 02 FB | 	rdlong	local01, fp
1f7d8     08 4E 85 F1 | 	sub	fp, #8
1f7dc     1C 26 0E F2 | 	cmp	local01, #28 wz
1f7e0     14 4E 05 A1 |  if_e	add	fp, #20
1f7e4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f7e8     14 4E 85 A1 |  if_e	sub	fp, #20
1f7ec     16 2B 02 A6 |  if_e	mov	local03, local04
1f7f0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f7f4     40 00 90 5D |  if_ne	jmp	#LR__2545
1f7f8     A7 12 02 FB | 	rdlong	arg01, fp
1f7fc     09 13 52 F6 | 	abs	arg01, arg01 wc
1f800     1F 2E C6 C9 |  if_b	decod	local05, #31
1f804     00 2E 06 36 |  if_ae	mov	local05, #0
1f808     F0 8B B0 FD | 	call	#__system___float_fromuns
1f80c     17 FB 61 F5 | 	xor	result1, local05
1f810     FD 12 02 F6 | 	mov	arg01, result1
1f814     0C 4E 05 F1 | 	add	fp, #12
1f818     A7 14 02 FB | 	rdlong	arg02, fp
1f81c     0C 4E 85 F1 | 	sub	fp, #12
1f820     0C 8C B0 FD | 	call	#__system___float_add
1f824     A7 FA 61 FC | 	wrlong	result1, fp
1f828     08 4E 05 F1 | 	add	fp, #8
1f82c     A7 3C 68 FC | 	wrlong	#30, fp
1f830     08 4E 85 F1 | 	sub	fp, #8
1f834     B0 02 90 FD | 	jmp	#LR__2555
1f838                 | LR__2545
1f838                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1f838     08 4E 05 F1 | 	add	fp, #8
1f83c     A7 26 02 FB | 	rdlong	local01, fp
1f840     08 4E 85 F1 | 	sub	fp, #8
1f844     1E 26 0E F2 | 	cmp	local01, #30 wz
1f848     14 4E 05 A1 |  if_e	add	fp, #20
1f84c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f850     14 4E 85 A1 |  if_e	sub	fp, #20
1f854     16 2B 02 A6 |  if_e	mov	local03, local04
1f858     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f85c     28 00 90 5D |  if_ne	jmp	#LR__2546
1f860     A7 26 02 FB | 	rdlong	local01, fp
1f864     0C 4E 05 F1 | 	add	fp, #12
1f868     A7 12 02 FB | 	rdlong	arg01, fp
1f86c     0C 4E 85 F1 | 	sub	fp, #12
1f870     88 8B B0 FD | 	call	#__system___float_fromuns
1f874     FD 14 02 F6 | 	mov	arg02, result1
1f878     13 13 02 F6 | 	mov	arg01, local01
1f87c     B0 8B B0 FD | 	call	#__system___float_add
1f880     A7 FA 61 FC | 	wrlong	result1, fp
1f884     60 02 90 FD | 	jmp	#LR__2555
1f888                 | LR__2546
1f888                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1f888     08 4E 05 F1 | 	add	fp, #8
1f88c     A7 26 02 FB | 	rdlong	local01, fp
1f890     08 4E 85 F1 | 	sub	fp, #8
1f894     1E 26 0E F2 | 	cmp	local01, #30 wz
1f898     14 4E 05 A1 |  if_e	add	fp, #20
1f89c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f8a0     14 4E 85 A1 |  if_e	sub	fp, #20
1f8a4     16 2B 02 A6 |  if_e	mov	local03, local04
1f8a8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f8ac     38 00 90 5D |  if_ne	jmp	#LR__2547
1f8b0     A7 26 02 FB | 	rdlong	local01, fp
1f8b4     0C 4E 05 F1 | 	add	fp, #12
1f8b8     A7 12 02 FB | 	rdlong	arg01, fp
1f8bc     0C 4E 85 F1 | 	sub	fp, #12
1f8c0     09 13 52 F6 | 	abs	arg01, arg01 wc
1f8c4     1F 2E C6 C9 |  if_b	decod	local05, #31
1f8c8     00 2E 06 36 |  if_ae	mov	local05, #0
1f8cc     2C 8B B0 FD | 	call	#__system___float_fromuns
1f8d0     17 FB 61 F5 | 	xor	result1, local05
1f8d4     FD 14 02 F6 | 	mov	arg02, result1
1f8d8     13 13 02 F6 | 	mov	arg01, local01
1f8dc     50 8B B0 FD | 	call	#__system___float_add
1f8e0     A7 FA 61 FC | 	wrlong	result1, fp
1f8e4     00 02 90 FD | 	jmp	#LR__2555
1f8e8                 | LR__2547
1f8e8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1f8e8     08 4E 05 F1 | 	add	fp, #8
1f8ec     A7 26 02 FB | 	rdlong	local01, fp
1f8f0     08 4E 85 F1 | 	sub	fp, #8
1f8f4     1E 26 0E F2 | 	cmp	local01, #30 wz
1f8f8     14 4E 05 A1 |  if_e	add	fp, #20
1f8fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f900     14 4E 85 A1 |  if_e	sub	fp, #20
1f904     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f908     1C 00 90 5D |  if_ne	jmp	#LR__2548
1f90c     A7 12 02 FB | 	rdlong	arg01, fp
1f910     0C 4E 05 F1 | 	add	fp, #12
1f914     A7 14 02 FB | 	rdlong	arg02, fp
1f918     0C 4E 85 F1 | 	sub	fp, #12
1f91c     10 8B B0 FD | 	call	#__system___float_add
1f920     A7 FA 61 FC | 	wrlong	result1, fp
1f924     C0 01 90 FD | 	jmp	#LR__2555
1f928                 | LR__2548
1f928                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1f928     08 4E 05 F1 | 	add	fp, #8
1f92c     A7 26 02 FB | 	rdlong	local01, fp
1f930     08 4E 85 F1 | 	sub	fp, #8
1f934     1F 26 0E F2 | 	cmp	local01, #31 wz
1f938     24 00 90 5D |  if_ne	jmp	#LR__2549
1f93c     14 4E 05 F1 | 	add	fp, #20
1f940     A7 2A 02 FB | 	rdlong	local03, fp
1f944     14 4E 85 F1 | 	sub	fp, #20
1f948     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f94c     A7 04 68 5C |  if_ne	wrlong	#2, fp
1f950     08 4E 05 51 |  if_ne	add	fp, #8
1f954     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1f958     08 4E 85 51 |  if_ne	sub	fp, #8
1f95c     88 01 90 5D |  if_ne	jmp	#LR__2555
1f960                 | LR__2549
1f960                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1f960     14 4E 05 F1 | 	add	fp, #20
1f964     A7 26 02 FB | 	rdlong	local01, fp
1f968     14 4E 85 F1 | 	sub	fp, #20
1f96c     1F 26 0E F2 | 	cmp	local01, #31 wz
1f970     24 00 90 5D |  if_ne	jmp	#LR__2550
1f974     08 4E 05 F1 | 	add	fp, #8
1f978     A7 2A 02 FB | 	rdlong	local03, fp
1f97c     08 4E 85 F1 | 	sub	fp, #8
1f980     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f984     A7 04 68 5C |  if_ne	wrlong	#2, fp
1f988     08 4E 05 51 |  if_ne	add	fp, #8
1f98c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1f990     08 4E 85 51 |  if_ne	sub	fp, #8
1f994     50 01 90 5D |  if_ne	jmp	#LR__2555
1f998                 | LR__2550
1f998                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1f998     08 4E 05 F1 | 	add	fp, #8
1f99c     A7 26 02 FB | 	rdlong	local01, fp
1f9a0     08 4E 85 F1 | 	sub	fp, #8
1f9a4     1F 26 0E F2 | 	cmp	local01, #31 wz
1f9a8     14 4E 05 A1 |  if_e	add	fp, #20
1f9ac     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f9b0     14 4E 85 A1 |  if_e	sub	fp, #20
1f9b4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f9b8     1C 00 90 5D |  if_ne	jmp	#LR__2551
1f9bc     A7 12 02 FB | 	rdlong	arg01, fp
1f9c0     0C 4E 05 F1 | 	add	fp, #12
1f9c4     A7 14 02 FB | 	rdlong	arg02, fp
1f9c8     0C 4E 85 F1 | 	sub	fp, #12
1f9cc     14 60 B0 FD | 	call	#__system___string_concat
1f9d0     A7 FA 61 FC | 	wrlong	result1, fp
1f9d4     10 01 90 FD | 	jmp	#LR__2555
1f9d8                 | LR__2551
1f9d8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1f9d8     08 4E 05 F1 | 	add	fp, #8
1f9dc     A7 26 02 FB | 	rdlong	local01, fp
1f9e0     08 4E 85 F1 | 	sub	fp, #8
1f9e4     2B 26 0E F2 | 	cmp	local01, #43 wz
1f9e8     14 4E 05 A1 |  if_e	add	fp, #20
1f9ec     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f9f0     14 4E 85 A1 |  if_e	sub	fp, #20
1f9f4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f9f8     30 00 90 5D |  if_ne	jmp	#LR__2552
1f9fc     A7 12 02 FB | 	rdlong	arg01, fp
1fa00     F4 D3 BE FD | 	call	#_convertstring
1fa04     FD 12 02 F6 | 	mov	arg01, result1
1fa08     0C 4E 05 F1 | 	add	fp, #12
1fa0c     A7 14 02 FB | 	rdlong	arg02, fp
1fa10     0C 4E 85 F1 | 	sub	fp, #12
1fa14     CC 5F B0 FD | 	call	#__system___string_concat
1fa18     A7 FA 61 FC | 	wrlong	result1, fp
1fa1c     08 4E 05 F1 | 	add	fp, #8
1fa20     A7 3E 68 FC | 	wrlong	#31, fp
1fa24     08 4E 85 F1 | 	sub	fp, #8
1fa28     BC 00 90 FD | 	jmp	#LR__2555
1fa2c                 | LR__2552
1fa2c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1fa2c     08 4E 05 F1 | 	add	fp, #8
1fa30     A7 26 02 FB | 	rdlong	local01, fp
1fa34     08 4E 85 F1 | 	sub	fp, #8
1fa38     1F 26 0E F2 | 	cmp	local01, #31 wz
1fa3c     14 4E 05 A1 |  if_e	add	fp, #20
1fa40     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fa44     14 4E 85 A1 |  if_e	sub	fp, #20
1fa48     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1fa4c     28 00 90 5D |  if_ne	jmp	#LR__2553
1fa50     A7 26 02 FB | 	rdlong	local01, fp
1fa54     0C 4E 05 F1 | 	add	fp, #12
1fa58     A7 12 02 FB | 	rdlong	arg01, fp
1fa5c     0C 4E 85 F1 | 	sub	fp, #12
1fa60     94 D3 BE FD | 	call	#_convertstring
1fa64     FD 14 02 F6 | 	mov	arg02, result1
1fa68     13 13 02 F6 | 	mov	arg01, local01
1fa6c     74 5F B0 FD | 	call	#__system___string_concat
1fa70     A7 FA 61 FC | 	wrlong	result1, fp
1fa74     70 00 90 FD | 	jmp	#LR__2555
1fa78                 | LR__2553
1fa78                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1fa78     08 4E 05 F1 | 	add	fp, #8
1fa7c     A7 26 02 FB | 	rdlong	local01, fp
1fa80     08 4E 85 F1 | 	sub	fp, #8
1fa84     2B 26 0E F2 | 	cmp	local01, #43 wz
1fa88     14 4E 05 A1 |  if_e	add	fp, #20
1fa8c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fa90     14 4E 85 A1 |  if_e	sub	fp, #20
1fa94     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1fa98     3C 00 90 5D |  if_ne	jmp	#LR__2554
1fa9c     A7 12 02 FB | 	rdlong	arg01, fp
1faa0     54 D3 BE FD | 	call	#_convertstring
1faa4     FD 26 02 F6 | 	mov	local01, result1
1faa8     0C 4E 05 F1 | 	add	fp, #12
1faac     A7 12 02 FB | 	rdlong	arg01, fp
1fab0     0C 4E 85 F1 | 	sub	fp, #12
1fab4     40 D3 BE FD | 	call	#_convertstring
1fab8     FD 14 02 F6 | 	mov	arg02, result1
1fabc     13 13 02 F6 | 	mov	arg01, local01
1fac0     20 5F B0 FD | 	call	#__system___string_concat
1fac4     A7 FA 61 FC | 	wrlong	result1, fp
1fac8     08 4E 05 F1 | 	add	fp, #8
1facc     A7 3E 68 FC | 	wrlong	#31, fp
1fad0     08 4E 85 F1 | 	sub	fp, #8
1fad4     10 00 90 FD | 	jmp	#LR__2555
1fad8                 | LR__2554
1fad8     A7 08 68 FC | 	wrlong	#4, fp
1fadc     08 4E 05 F1 | 	add	fp, #8
1fae0     A7 FE 69 FC | 	wrlong	#255, fp
1fae4     08 4E 85 F1 | 	sub	fp, #8
1fae8                 | LR__2555
1fae8     A7 12 02 F6 | 	mov	arg01, fp
1faec     28 D2 BE FD | 	call	#_push
1faf0     A7 F0 03 F6 | 	mov	ptra, fp
1faf4     B2 00 A0 FD | 	call	#popregs_
1faf8                 | _do_plus_ret
1faf8     2D 00 64 FD | 	ret
1fafc                 | 
1fafc                 | ' 
1fafc                 | ' '--------------------------------- power (^)
1fafc                 | ' 
1fafc                 | ' sub do_power 
1fafc                 | _do_power
1fafc     02 4A 05 F6 | 	mov	COUNT_, #2
1fb00     A8 00 A0 FD | 	call	#pushregs_
1fb04     18 F0 07 F1 | 	add	ptra, #24
1fb08     74 D1 BE FD | 	call	#_pop
1fb0c     FD 14 02 F6 | 	mov	arg02, result1
1fb10     FE 12 02 F6 | 	mov	arg01, result2
1fb14     FF 26 02 F6 | 	mov	local01, result3
1fb18     0C 4E 05 F1 | 	add	fp, #12
1fb1c     A7 14 62 FC | 	wrlong	arg02, fp
1fb20     04 4E 05 F1 | 	add	fp, #4
1fb24     A7 12 62 FC | 	wrlong	arg01, fp
1fb28     04 4E 05 F1 | 	add	fp, #4
1fb2c     A7 26 62 FC | 	wrlong	local01, fp
1fb30     14 4E 85 F1 | 	sub	fp, #20
1fb34     48 D1 BE FD | 	call	#_pop
1fb38     A7 FA 61 FC | 	wrlong	result1, fp
1fb3c     04 4E 05 F1 | 	add	fp, #4
1fb40     A7 FC 61 FC | 	wrlong	result2, fp
1fb44     04 4E 05 F1 | 	add	fp, #4
1fb48     A7 FE 61 FC | 	wrlong	result3, fp
1fb4c                 | ' 
1fb4c                 | ' t2=pop()
1fb4c                 | ' t1=pop()
1fb4c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1fb4c     08 4E 85 F1 | 	sub	fp, #8
1fb50     1F FE 0D F2 | 	cmp	result3, #31 wz
1fb54     14 4E 05 51 |  if_ne	add	fp, #20
1fb58     A7 26 02 5B |  if_ne	rdlong	local01, fp
1fb5c     14 4E 85 51 |  if_ne	sub	fp, #20
1fb60     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1fb64     A7 18 68 AC |  if_e	wrlong	#12, fp
1fb68     08 4E 05 A1 |  if_e	add	fp, #8
1fb6c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1fb70     08 4E 85 A1 |  if_e	sub	fp, #8
1fb74     38 01 90 AD |  if_e	jmp	#LR__2565
1fb78                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1fb78     08 4E 05 F1 | 	add	fp, #8
1fb7c     A7 14 02 FB | 	rdlong	arg02, fp
1fb80     08 4E 85 F1 | 	sub	fp, #8
1fb84     1C 14 0E F2 | 	cmp	arg02, #28 wz
1fb88     28 00 90 5D |  if_ne	jmp	#LR__2560
1fb8c     08 4E 05 F1 | 	add	fp, #8
1fb90     A7 3C 68 FC | 	wrlong	#30, fp
1fb94     08 4E 85 F1 | 	sub	fp, #8
1fb98     A7 12 02 FB | 	rdlong	arg01, fp
1fb9c     09 13 52 F6 | 	abs	arg01, arg01 wc
1fba0     1F 28 C6 C9 |  if_b	decod	local02, #31
1fba4     00 28 06 36 |  if_ae	mov	local02, #0
1fba8     50 88 B0 FD | 	call	#__system___float_fromuns
1fbac     14 FB 61 F5 | 	xor	result1, local02
1fbb0     A7 FA 61 FC | 	wrlong	result1, fp
1fbb4                 | LR__2560
1fbb4                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1fbb4     08 4E 05 F1 | 	add	fp, #8
1fbb8     A7 14 02 FB | 	rdlong	arg02, fp
1fbbc     08 4E 85 F1 | 	sub	fp, #8
1fbc0     1D 14 0E F2 | 	cmp	arg02, #29 wz
1fbc4     18 00 90 5D |  if_ne	jmp	#LR__2561
1fbc8     08 4E 05 F1 | 	add	fp, #8
1fbcc     A7 3C 68 FC | 	wrlong	#30, fp
1fbd0     08 4E 85 F1 | 	sub	fp, #8
1fbd4     A7 12 02 FB | 	rdlong	arg01, fp
1fbd8     20 88 B0 FD | 	call	#__system___float_fromuns
1fbdc     A7 FA 61 FC | 	wrlong	result1, fp
1fbe0                 | LR__2561
1fbe0                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1fbe0     14 4E 05 F1 | 	add	fp, #20
1fbe4     A7 14 02 FB | 	rdlong	arg02, fp
1fbe8     14 4E 85 F1 | 	sub	fp, #20
1fbec     1C 14 0E F2 | 	cmp	arg02, #28 wz
1fbf0     34 00 90 5D |  if_ne	jmp	#LR__2562
1fbf4     14 4E 05 F1 | 	add	fp, #20
1fbf8     A7 3C 68 FC | 	wrlong	#30, fp
1fbfc     08 4E 85 F1 | 	sub	fp, #8
1fc00     A7 12 02 FB | 	rdlong	arg01, fp
1fc04     0C 4E 85 F1 | 	sub	fp, #12
1fc08     09 13 52 F6 | 	abs	arg01, arg01 wc
1fc0c     1F 28 C6 C9 |  if_b	decod	local02, #31
1fc10     00 28 06 36 |  if_ae	mov	local02, #0
1fc14     E4 87 B0 FD | 	call	#__system___float_fromuns
1fc18     14 FB 61 F5 | 	xor	result1, local02
1fc1c     0C 4E 05 F1 | 	add	fp, #12
1fc20     A7 FA 61 FC | 	wrlong	result1, fp
1fc24     0C 4E 85 F1 | 	sub	fp, #12
1fc28                 | LR__2562
1fc28                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1fc28     14 4E 05 F1 | 	add	fp, #20
1fc2c     A7 14 02 FB | 	rdlong	arg02, fp
1fc30     14 4E 85 F1 | 	sub	fp, #20
1fc34     1D 14 0E F2 | 	cmp	arg02, #29 wz
1fc38     24 00 90 5D |  if_ne	jmp	#LR__2563
1fc3c     14 4E 05 F1 | 	add	fp, #20
1fc40     A7 3C 68 FC | 	wrlong	#30, fp
1fc44     08 4E 85 F1 | 	sub	fp, #8
1fc48     A7 12 02 FB | 	rdlong	arg01, fp
1fc4c     0C 4E 85 F1 | 	sub	fp, #12
1fc50     A8 87 B0 FD | 	call	#__system___float_fromuns
1fc54     0C 4E 05 F1 | 	add	fp, #12
1fc58     A7 FA 61 FC | 	wrlong	result1, fp
1fc5c     0C 4E 85 F1 | 	sub	fp, #12
1fc60                 | LR__2563
1fc60                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1fc60     08 4E 05 F1 | 	add	fp, #8
1fc64     A7 14 02 FB | 	rdlong	arg02, fp
1fc68     08 4E 85 F1 | 	sub	fp, #8
1fc6c     1E 14 0E F2 | 	cmp	arg02, #30 wz
1fc70     14 4E 05 A1 |  if_e	add	fp, #20
1fc74     A7 26 02 AB |  if_e	rdlong	local01, fp
1fc78     14 4E 85 A1 |  if_e	sub	fp, #20
1fc7c     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1fc80     1C 00 90 5D |  if_ne	jmp	#LR__2564
1fc84     A7 12 02 FB | 	rdlong	arg01, fp
1fc88     0C 4E 05 F1 | 	add	fp, #12
1fc8c     A7 14 02 FB | 	rdlong	arg02, fp
1fc90     0C 4E 85 F1 | 	sub	fp, #12
1fc94     70 9A B0 FD | 	call	#__system____builtin_powf
1fc98     A7 FA 61 FC | 	wrlong	result1, fp
1fc9c     10 00 90 FD | 	jmp	#LR__2565
1fca0                 | LR__2564
1fca0     A7 1A 68 FC | 	wrlong	#13, fp
1fca4     08 4E 05 F1 | 	add	fp, #8
1fca8     A7 FE 69 FC | 	wrlong	#255, fp
1fcac     08 4E 85 F1 | 	sub	fp, #8
1fcb0                 | LR__2565
1fcb0     A7 12 02 F6 | 	mov	arg01, fp
1fcb4     60 D0 BE FD | 	call	#_push
1fcb8     A7 F0 03 F6 | 	mov	ptra, fp
1fcbc     B2 00 A0 FD | 	call	#popregs_
1fcc0                 | _do_power_ret
1fcc0     2D 00 64 FD | 	ret
1fcc4                 | 
1fcc4                 | ' 
1fcc4                 | ' '--------------------------------- SHL
1fcc4                 | ' 
1fcc4                 | ' sub do_shl 
1fcc4                 | _do_shl
1fcc4     03 4A 05 F6 | 	mov	COUNT_, #3
1fcc8     A8 00 A0 FD | 	call	#pushregs_
1fccc     18 F0 07 F1 | 	add	ptra, #24
1fcd0     AC CF BE FD | 	call	#_pop
1fcd4     FD 12 02 F6 | 	mov	arg01, result1
1fcd8     FE 26 02 F6 | 	mov	local01, result2
1fcdc     FF 28 02 F6 | 	mov	local02, result3
1fce0     0C 4E 05 F1 | 	add	fp, #12
1fce4     A7 12 62 FC | 	wrlong	arg01, fp
1fce8     04 4E 05 F1 | 	add	fp, #4
1fcec     A7 26 62 FC | 	wrlong	local01, fp
1fcf0     04 4E 05 F1 | 	add	fp, #4
1fcf4     A7 28 62 FC | 	wrlong	local02, fp
1fcf8     14 4E 85 F1 | 	sub	fp, #20
1fcfc     80 CF BE FD | 	call	#_pop
1fd00     FF 2A 02 F6 | 	mov	local03, result3
1fd04     A7 FA 61 FC | 	wrlong	result1, fp
1fd08     04 4E 05 F1 | 	add	fp, #4
1fd0c     A7 FC 61 FC | 	wrlong	result2, fp
1fd10     04 4E 05 F1 | 	add	fp, #4
1fd14     A7 2A 62 FC | 	wrlong	local03, fp
1fd18                 | ' 
1fd18                 | ' t2=pop()
1fd18                 | ' t1=pop()
1fd18                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1fd18     08 4E 85 F1 | 	sub	fp, #8
1fd1c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1fd20     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fd24     A7 2A 62 AC |  if_e	wrlong	local03, fp
1fd28     08 4E 05 A1 |  if_e	add	fp, #8
1fd2c     A7 3A 68 AC |  if_e	wrlong	#29, fp
1fd30     08 4E 85 A1 |  if_e	sub	fp, #8
1fd34                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1fd34     14 4E 05 F1 | 	add	fp, #20
1fd38     A7 2A 02 FB | 	rdlong	local03, fp
1fd3c     14 4E 85 F1 | 	sub	fp, #20
1fd40     1C 2A 0E F2 | 	cmp	local03, #28 wz
1fd44     18 00 90 5D |  if_ne	jmp	#LR__2570
1fd48     0C 4E 05 F1 | 	add	fp, #12
1fd4c     A7 2A 02 FB | 	rdlong	local03, fp
1fd50     A7 2A 62 FC | 	wrlong	local03, fp
1fd54     08 4E 05 F1 | 	add	fp, #8
1fd58     A7 3A 68 FC | 	wrlong	#29, fp
1fd5c     14 4E 85 F1 | 	sub	fp, #20
1fd60                 | LR__2570
1fd60                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1fd60     08 4E 05 F1 | 	add	fp, #8
1fd64     A7 2A 02 FB | 	rdlong	local03, fp
1fd68     08 4E 85 F1 | 	sub	fp, #8
1fd6c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1fd70     14 4E 05 51 |  if_ne	add	fp, #20
1fd74     A7 28 02 5B |  if_ne	rdlong	local02, fp
1fd78     14 4E 85 51 |  if_ne	sub	fp, #20
1fd7c     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1fd80     08 4E 05 51 |  if_ne	add	fp, #8
1fd84     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1fd88     08 4E 85 51 |  if_ne	sub	fp, #8
1fd8c     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1fd90     14 4E 05 51 |  if_ne	add	fp, #20
1fd94     14 4E 85 51 |  if_ne	sub	fp, #20
1fd98     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1fd9c     A7 0C 68 AC |  if_e	wrlong	#6, fp
1fda0     08 4E 05 A1 |  if_e	add	fp, #8
1fda4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1fda8     08 4E 85 A1 |  if_e	sub	fp, #8
1fdac     18 00 90 AD |  if_e	jmp	#LR__2571
1fdb0     A7 2A 02 FB | 	rdlong	local03, fp
1fdb4     0C 4E 05 F1 | 	add	fp, #12
1fdb8     A7 26 02 FB | 	rdlong	local01, fp
1fdbc     0C 4E 85 F1 | 	sub	fp, #12
1fdc0     13 2B 62 F0 | 	shl	local03, local01
1fdc4     A7 2A 62 FC | 	wrlong	local03, fp
1fdc8                 | LR__2571
1fdc8     A7 12 02 F6 | 	mov	arg01, fp
1fdcc     48 CF BE FD | 	call	#_push
1fdd0     A7 F0 03 F6 | 	mov	ptra, fp
1fdd4     B2 00 A0 FD | 	call	#popregs_
1fdd8                 | _do_shl_ret
1fdd8     2D 00 64 FD | 	ret
1fddc                 | 
1fddc                 | ' 
1fddc                 | ' '--------------------------------- SHR
1fddc                 | ' 
1fddc                 | ' sub do_shr 
1fddc                 | _do_shr
1fddc     03 4A 05 F6 | 	mov	COUNT_, #3
1fde0     A8 00 A0 FD | 	call	#pushregs_
1fde4     18 F0 07 F1 | 	add	ptra, #24
1fde8     94 CE BE FD | 	call	#_pop
1fdec     FD 12 02 F6 | 	mov	arg01, result1
1fdf0     FE 26 02 F6 | 	mov	local01, result2
1fdf4     FF 28 02 F6 | 	mov	local02, result3
1fdf8     0C 4E 05 F1 | 	add	fp, #12
1fdfc     A7 12 62 FC | 	wrlong	arg01, fp
1fe00     04 4E 05 F1 | 	add	fp, #4
1fe04     A7 26 62 FC | 	wrlong	local01, fp
1fe08     04 4E 05 F1 | 	add	fp, #4
1fe0c     A7 28 62 FC | 	wrlong	local02, fp
1fe10     14 4E 85 F1 | 	sub	fp, #20
1fe14     68 CE BE FD | 	call	#_pop
1fe18     FF 2A 02 F6 | 	mov	local03, result3
1fe1c     A7 FA 61 FC | 	wrlong	result1, fp
1fe20     04 4E 05 F1 | 	add	fp, #4
1fe24     A7 FC 61 FC | 	wrlong	result2, fp
1fe28     04 4E 05 F1 | 	add	fp, #4
1fe2c     A7 2A 62 FC | 	wrlong	local03, fp
1fe30                 | ' 
1fe30                 | ' t2=pop()
1fe30                 | ' t1=pop()
1fe30                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1fe30     08 4E 85 F1 | 	sub	fp, #8
1fe34     1C 2A 0E F2 | 	cmp	local03, #28 wz
1fe38     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fe3c     A7 2A 62 AC |  if_e	wrlong	local03, fp
1fe40     08 4E 05 A1 |  if_e	add	fp, #8
1fe44     A7 3A 68 AC |  if_e	wrlong	#29, fp
1fe48     08 4E 85 A1 |  if_e	sub	fp, #8
1fe4c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1fe4c     14 4E 05 F1 | 	add	fp, #20
1fe50     A7 2A 02 FB | 	rdlong	local03, fp
1fe54     14 4E 85 F1 | 	sub	fp, #20
1fe58     1C 2A 0E F2 | 	cmp	local03, #28 wz
1fe5c     18 00 90 5D |  if_ne	jmp	#LR__2580
1fe60     0C 4E 05 F1 | 	add	fp, #12
1fe64     A7 2A 02 FB | 	rdlong	local03, fp
1fe68     A7 2A 62 FC | 	wrlong	local03, fp
1fe6c     08 4E 05 F1 | 	add	fp, #8
1fe70     A7 3A 68 FC | 	wrlong	#29, fp
1fe74     14 4E 85 F1 | 	sub	fp, #20
1fe78                 | LR__2580
1fe78                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1fe78     08 4E 05 F1 | 	add	fp, #8
1fe7c     A7 2A 02 FB | 	rdlong	local03, fp
1fe80     08 4E 85 F1 | 	sub	fp, #8
1fe84     1F 2A 0E F2 | 	cmp	local03, #31 wz
1fe88     14 4E 05 51 |  if_ne	add	fp, #20
1fe8c     A7 28 02 5B |  if_ne	rdlong	local02, fp
1fe90     14 4E 85 51 |  if_ne	sub	fp, #20
1fe94     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1fe98     08 4E 05 51 |  if_ne	add	fp, #8
1fe9c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1fea0     08 4E 85 51 |  if_ne	sub	fp, #8
1fea4     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1fea8     14 4E 05 51 |  if_ne	add	fp, #20
1feac     14 4E 85 51 |  if_ne	sub	fp, #20
1feb0     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1feb4     A7 0C 68 AC |  if_e	wrlong	#6, fp
1feb8     08 4E 05 A1 |  if_e	add	fp, #8
1febc     A7 FE 69 AC |  if_e	wrlong	#255, fp
1fec0     08 4E 85 A1 |  if_e	sub	fp, #8
1fec4     18 00 90 AD |  if_e	jmp	#LR__2581
1fec8     A7 2A 02 FB | 	rdlong	local03, fp
1fecc     0C 4E 05 F1 | 	add	fp, #12
1fed0     A7 26 02 FB | 	rdlong	local01, fp
1fed4     0C 4E 85 F1 | 	sub	fp, #12
1fed8     13 2B 42 F0 | 	shr	local03, local01
1fedc     A7 2A 62 FC | 	wrlong	local03, fp
1fee0                 | LR__2581
1fee0     A7 12 02 F6 | 	mov	arg01, fp
1fee4     30 CE BE FD | 	call	#_push
1fee8     A7 F0 03 F6 | 	mov	ptra, fp
1feec     B2 00 A0 FD | 	call	#popregs_
1fef0                 | _do_shr_ret
1fef0     2D 00 64 FD | 	ret
1fef4                 | 
1fef4                 | ' 
1fef4                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1fef4                 | ' 
1fef4                 | ' ''----------------------------------------------------------------------------------------------------
1fef4                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1fef4                 | ' ''----------------------------------------------------------------------------------------------------
1fef4                 | ' 
1fef4                 | ' ''--------------------------- Command function pointers
1fef4                 | ' 
1fef4                 | ' sub init_commands
1fef4                 | _init_commands
1fef4                 | ' 
1fef4                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1fef4     00 00 06 F6 | 	mov	_var01, #0
1fef8     97 16 48 FB | 	callpa	#(@LR__2591-@LR__2590)>>2,fcache_load_ptr_
1fefc                 | LR__2590
1fefc     00 FB 01 F6 | 	mov	result1, _var01
1ff00     02 FA 65 F0 | 	shl	result1, #2
1ff04     43 00 00 FF 
1ff08     60 E4 05 F1 | 	add	objptr, ##34400
1ff0c     F2 FA 01 F1 | 	add	result1, objptr
1ff10     43 00 00 FF 
1ff14     60 E4 85 F1 | 	sub	objptr, ##34400
1ff18     FD E4 61 FC | 	wrlong	objptr, result1
1ff1c     01 00 06 F1 | 	add	_var01, #1
1ff20     00 01 56 F2 | 	cmps	_var01, #256 wc
1ff24     D4 FF 9F CD |  if_b	jmp	#LR__2590
1ff28                 | LR__2591
1ff28     F2 FA 01 F6 | 	mov	result1, objptr
1ff2c     14 FA 25 F4 | 	bith	result1, #20
1ff30     43 00 00 FF 
1ff34     64 E4 05 F1 | 	add	objptr, ##34404
1ff38     F2 FA 61 FC | 	wrlong	result1, objptr
1ff3c     43 00 00 FF 
1ff40     64 E4 85 F1 | 	sub	objptr, ##34404
1ff44     F2 FA 01 F6 | 	mov	result1, objptr
1ff48     15 FA 25 F4 | 	bith	result1, #21
1ff4c     43 00 00 FF 
1ff50     68 E4 05 F1 | 	add	objptr, ##34408
1ff54     F2 FA 61 FC | 	wrlong	result1, objptr
1ff58     43 00 00 FF 
1ff5c     68 E4 85 F1 | 	sub	objptr, ##34408
1ff60     F2 FA 01 F6 | 	mov	result1, objptr
1ff64     34 FA 25 F4 | 	bith	result1, #52
1ff68     43 00 00 FF 
1ff6c     6C E4 05 F1 | 	add	objptr, ##34412
1ff70     F2 FA 61 FC | 	wrlong	result1, objptr
1ff74     43 00 00 FF 
1ff78     6C E4 85 F1 | 	sub	objptr, ##34412
1ff7c     F2 FA 01 F6 | 	mov	result1, objptr
1ff80     16 FA 25 F4 | 	bith	result1, #22
1ff84     43 00 00 FF 
1ff88     74 E4 05 F1 | 	add	objptr, ##34420
1ff8c     F2 FA 61 FC | 	wrlong	result1, objptr
1ff90     43 00 00 FF 
1ff94     74 E4 85 F1 | 	sub	objptr, ##34420
1ff98     F2 FA 01 F6 | 	mov	result1, objptr
1ff9c     00 28 00 FF 
1ffa0     00 FA 45 F5 | 	or	result1, ##5242880
1ffa4     43 00 00 FF 
1ffa8     78 E4 05 F1 | 	add	objptr, ##34424
1ffac     F2 FA 61 FC | 	wrlong	result1, objptr
1ffb0     43 00 00 FF 
1ffb4     78 E4 85 F1 | 	sub	objptr, ##34424
1ffb8     F2 FA 01 F6 | 	mov	result1, objptr
1ffbc     35 FA 25 F4 | 	bith	result1, #53
1ffc0     43 00 00 FF 
1ffc4     7C E4 05 F1 | 	add	objptr, ##34428
1ffc8     F2 FA 61 FC | 	wrlong	result1, objptr
1ffcc     43 00 00 FF 
1ffd0     7C E4 85 F1 | 	sub	objptr, ##34428
1ffd4     F2 FA 01 F6 | 	mov	result1, objptr
1ffd8     54 FA 25 F4 | 	bith	result1, #84
1ffdc     43 00 00 FF 
1ffe0     80 E4 05 F1 | 	add	objptr, ##34432
1ffe4     F2 FA 61 FC | 	wrlong	result1, objptr
1ffe8     43 00 00 FF 
1ffec     80 E4 85 F1 | 	sub	objptr, ##34432
1fff0     F2 FA 01 F6 | 	mov	result1, objptr
1fff4     17 FA 25 F4 | 	bith	result1, #23
1fff8     43 00 00 FF 
1fffc     84 E4 05 F1 | 	add	objptr, ##34436
20000     F2 FA 61 FC | 	wrlong	result1, objptr
20004     43 00 00 FF 
20008     84 E4 85 F1 | 	sub	objptr, ##34436
2000c     F2 FA 01 F6 | 	mov	result1, objptr
20010     00 48 00 FF 
20014     00 FA 45 F5 | 	or	result1, ##9437184
20018     43 00 00 FF 
2001c     88 E4 05 F1 | 	add	objptr, ##34440
20020     F2 FA 61 FC | 	wrlong	result1, objptr
20024     43 00 00 FF 
20028     88 E4 85 F1 | 	sub	objptr, ##34440
2002c     F2 FA 01 F6 | 	mov	result1, objptr
20030     00 50 00 FF 
20034     00 FA 45 F5 | 	or	result1, ##10485760
20038     43 00 00 FF 
2003c     8C E4 05 F1 | 	add	objptr, ##34444
20040     F2 FA 61 FC | 	wrlong	result1, objptr
20044     43 00 00 FF 
20048     8C E4 85 F1 | 	sub	objptr, ##34444
2004c     F2 FA 01 F6 | 	mov	result1, objptr
20050     00 58 00 FF 
20054     00 FA 45 F5 | 	or	result1, ##11534336
20058     43 00 00 FF 
2005c     90 E4 05 F1 | 	add	objptr, ##34448
20060     F2 FA 61 FC | 	wrlong	result1, objptr
20064     43 00 00 FF 
20068     90 E4 85 F1 | 	sub	objptr, ##34448
2006c     F2 FA 01 F6 | 	mov	result1, objptr
20070     36 FA 25 F4 | 	bith	result1, #54
20074     43 00 00 FF 
20078     A4 E4 05 F1 | 	add	objptr, ##34468
2007c     F2 FA 61 FC | 	wrlong	result1, objptr
20080     43 00 00 FF 
20084     A4 E4 85 F1 | 	sub	objptr, ##34468
20088     F2 FA 01 F6 | 	mov	result1, objptr
2008c     00 68 00 FF 
20090     00 FA 45 F5 | 	or	result1, ##13631488
20094     43 00 00 FF 
20098     D4 E4 05 F1 | 	add	objptr, ##34516
2009c     F2 FA 61 FC | 	wrlong	result1, objptr
200a0     43 00 00 FF 
200a4     D4 E4 85 F1 | 	sub	objptr, ##34516
200a8     F2 FA 01 F6 | 	mov	result1, objptr
200ac     00 68 00 FF 
200b0     00 FA 45 F5 | 	or	result1, ##13631488
200b4     43 00 00 FF 
200b8     D0 E4 05 F1 | 	add	objptr, ##34512
200bc     F2 FA 61 FC | 	wrlong	result1, objptr
200c0     43 00 00 FF 
200c4     D0 E4 85 F1 | 	sub	objptr, ##34512
200c8     F2 FA 01 F6 | 	mov	result1, objptr
200cc     00 68 00 FF 
200d0     00 FA 45 F5 | 	or	result1, ##13631488
200d4     43 00 00 FF 
200d8     D8 E4 05 F1 | 	add	objptr, ##34520
200dc     F2 FA 61 FC | 	wrlong	result1, objptr
200e0     43 00 00 FF 
200e4     D8 E4 85 F1 | 	sub	objptr, ##34520
200e8     F2 FA 01 F6 | 	mov	result1, objptr
200ec     00 68 00 FF 
200f0     00 FA 45 F5 | 	or	result1, ##13631488
200f4     43 00 00 FF 
200f8     DC E4 05 F1 | 	add	objptr, ##34524
200fc     F2 FA 61 FC | 	wrlong	result1, objptr
20100     43 00 00 FF 
20104     DC E4 85 F1 | 	sub	objptr, ##34524
20108     F2 FA 01 F6 | 	mov	result1, objptr
2010c     00 68 00 FF 
20110     00 FA 45 F5 | 	or	result1, ##13631488
20114     43 00 00 FF 
20118     0C E5 05 F1 | 	add	objptr, ##34572
2011c     F2 FA 61 FC | 	wrlong	result1, objptr
20120     43 00 00 FF 
20124     0C E5 85 F1 | 	sub	objptr, ##34572
20128     F2 FA 01 F6 | 	mov	result1, objptr
2012c     55 FA 25 F4 | 	bith	result1, #85
20130     43 00 00 FF 
20134     BC E4 05 F1 | 	add	objptr, ##34492
20138     F2 FA 61 FC | 	wrlong	result1, objptr
2013c     43 00 00 FF 
20140     BC E4 85 F1 | 	sub	objptr, ##34492
20144     F2 FA 01 F6 | 	mov	result1, objptr
20148     00 68 00 FF 
2014c     00 FA 45 F5 | 	or	result1, ##13631488
20150     43 00 00 FF 
20154     10 E5 05 F1 | 	add	objptr, ##34576
20158     F2 FA 61 FC | 	wrlong	result1, objptr
2015c     43 00 00 FF 
20160     10 E5 85 F1 | 	sub	objptr, ##34576
20164     F2 FA 01 F6 | 	mov	result1, objptr
20168     00 68 00 FF 
2016c     00 FA 45 F5 | 	or	result1, ##13631488
20170     43 00 00 FF 
20174     E0 E4 05 F1 | 	add	objptr, ##34528
20178     F2 FA 61 FC | 	wrlong	result1, objptr
2017c     43 00 00 FF 
20180     E0 E4 85 F1 | 	sub	objptr, ##34528
20184     F2 FA 01 F6 | 	mov	result1, objptr
20188     00 68 00 FF 
2018c     00 FA 45 F5 | 	or	result1, ##13631488
20190     43 00 00 FF 
20194     E4 E4 05 F1 | 	add	objptr, ##34532
20198     F2 FA 61 FC | 	wrlong	result1, objptr
2019c     43 00 00 FF 
201a0     E4 E4 85 F1 | 	sub	objptr, ##34532
201a4     F2 FA 01 F6 | 	mov	result1, objptr
201a8     00 68 00 FF 
201ac     00 FA 45 F5 | 	or	result1, ##13631488
201b0     43 00 00 FF 
201b4     E8 E4 05 F1 | 	add	objptr, ##34536
201b8     F2 FA 61 FC | 	wrlong	result1, objptr
201bc     43 00 00 FF 
201c0     E8 E4 85 F1 | 	sub	objptr, ##34536
201c4     F2 FA 01 F6 | 	mov	result1, objptr
201c8     74 FA 25 F4 | 	bith	result1, #116
201cc     43 00 00 FF 
201d0     60 E5 05 F1 | 	add	objptr, ##34656
201d4     F2 FA 61 FC | 	wrlong	result1, objptr
201d8     43 00 00 FF 
201dc     60 E5 85 F1 | 	sub	objptr, ##34656
201e0     F2 FA 01 F6 | 	mov	result1, objptr
201e4     18 FA 25 F4 | 	bith	result1, #24
201e8     43 00 00 FF 
201ec     64 E5 05 F1 | 	add	objptr, ##34660
201f0     F2 FA 61 FC | 	wrlong	result1, objptr
201f4     43 00 00 FF 
201f8     64 E5 85 F1 | 	sub	objptr, ##34660
201fc     F2 FA 01 F6 | 	mov	result1, objptr
20200     00 88 00 FF 
20204     00 FA 45 F5 | 	or	result1, ##17825792
20208     43 00 00 FF 
2020c     68 E5 05 F1 | 	add	objptr, ##34664
20210     F2 FA 61 FC | 	wrlong	result1, objptr
20214     43 00 00 FF 
20218     68 E5 85 F1 | 	sub	objptr, ##34664
2021c     F2 FA 01 F6 | 	mov	result1, objptr
20220     00 90 00 FF 
20224     00 FA 45 F5 | 	or	result1, ##18874368
20228     43 00 00 FF 
2022c     6C E5 05 F1 | 	add	objptr, ##34668
20230     F2 FA 61 FC | 	wrlong	result1, objptr
20234     43 00 00 FF 
20238     6C E5 85 F1 | 	sub	objptr, ##34668
2023c     F2 FA 01 F6 | 	mov	result1, objptr
20240     00 98 00 FF 
20244     00 FA 45 F5 | 	or	result1, ##19922944
20248     43 00 00 FF 
2024c     70 E5 05 F1 | 	add	objptr, ##34672
20250     F2 FA 61 FC | 	wrlong	result1, objptr
20254     43 00 00 FF 
20258     70 E5 85 F1 | 	sub	objptr, ##34672
2025c     F2 FA 01 F6 | 	mov	result1, objptr
20260     00 A0 00 FF 
20264     00 FA 45 F5 | 	or	result1, ##20971520
20268     43 00 00 FF 
2026c     74 E5 05 F1 | 	add	objptr, ##34676
20270     F2 FA 61 FC | 	wrlong	result1, objptr
20274     43 00 00 FF 
20278     74 E5 85 F1 | 	sub	objptr, ##34676
2027c     F2 FA 01 F6 | 	mov	result1, objptr
20280     00 A8 00 FF 
20284     00 FA 45 F5 | 	or	result1, ##22020096
20288     43 00 00 FF 
2028c     78 E5 05 F1 | 	add	objptr, ##34680
20290     F2 FA 61 FC | 	wrlong	result1, objptr
20294     43 00 00 FF 
20298     78 E5 85 F1 | 	sub	objptr, ##34680
2029c     F2 FA 01 F6 | 	mov	result1, objptr
202a0     00 B0 00 FF 
202a4     00 FA 45 F5 | 	or	result1, ##23068672
202a8     43 00 00 FF 
202ac     7C E5 05 F1 | 	add	objptr, ##34684
202b0     F2 FA 61 FC | 	wrlong	result1, objptr
202b4     43 00 00 FF 
202b8     7C E5 85 F1 | 	sub	objptr, ##34684
202bc     F2 FA 01 F6 | 	mov	result1, objptr
202c0     00 B8 00 FF 
202c4     00 FA 45 F5 | 	or	result1, ##24117248
202c8     43 00 00 FF 
202cc     80 E5 05 F1 | 	add	objptr, ##34688
202d0     F2 FA 61 FC | 	wrlong	result1, objptr
202d4     43 00 00 FF 
202d8     80 E5 85 F1 | 	sub	objptr, ##34688
202dc     F2 FA 01 F6 | 	mov	result1, objptr
202e0     37 FA 25 F4 | 	bith	result1, #55
202e4     43 00 00 FF 
202e8     84 E5 05 F1 | 	add	objptr, ##34692
202ec     F2 FA 61 FC | 	wrlong	result1, objptr
202f0     43 00 00 FF 
202f4     84 E5 85 F1 | 	sub	objptr, ##34692
202f8     F2 FA 01 F6 | 	mov	result1, objptr
202fc     00 C8 00 FF 
20300     00 FA 45 F5 | 	or	result1, ##26214400
20304     43 00 00 FF 
20308     88 E5 05 F1 | 	add	objptr, ##34696
2030c     F2 FA 61 FC | 	wrlong	result1, objptr
20310     43 00 00 FF 
20314     88 E5 85 F1 | 	sub	objptr, ##34696
20318     F2 FA 01 F6 | 	mov	result1, objptr
2031c     00 D0 00 FF 
20320     00 FA 45 F5 | 	or	result1, ##27262976
20324     43 00 00 FF 
20328     8C E5 05 F1 | 	add	objptr, ##34700
2032c     F2 FA 61 FC | 	wrlong	result1, objptr
20330     43 00 00 FF 
20334     8C E5 85 F1 | 	sub	objptr, ##34700
20338     F2 FA 01 F6 | 	mov	result1, objptr
2033c     00 D8 00 FF 
20340     00 FA 45 F5 | 	or	result1, ##28311552
20344     43 00 00 FF 
20348     90 E5 05 F1 | 	add	objptr, ##34704
2034c     F2 FA 61 FC | 	wrlong	result1, objptr
20350     43 00 00 FF 
20354     90 E5 85 F1 | 	sub	objptr, ##34704
20358     F2 FA 01 F6 | 	mov	result1, objptr
2035c     56 FA 25 F4 | 	bith	result1, #86
20360     43 00 00 FF 
20364     94 E5 05 F1 | 	add	objptr, ##34708
20368     F2 FA 61 FC | 	wrlong	result1, objptr
2036c     43 00 00 FF 
20370     94 E5 85 F1 | 	sub	objptr, ##34708
20374     F2 FA 01 F6 | 	mov	result1, objptr
20378     00 E8 00 FF 
2037c     00 FA 45 F5 | 	or	result1, ##30408704
20380     45 00 00 FF 
20384     5C E4 05 F1 | 	add	objptr, ##35420
20388     F2 FA 61 FC | 	wrlong	result1, objptr
2038c     45 00 00 FF 
20390     5C E4 85 F1 | 	sub	objptr, ##35420
20394     F2 FA 01 F6 | 	mov	result1, objptr
20398     75 FA 25 F4 | 	bith	result1, #117
2039c     43 00 00 FF 
203a0     98 E5 05 F1 | 	add	objptr, ##34712
203a4     F2 FA 61 FC | 	wrlong	result1, objptr
203a8     43 00 00 FF 
203ac     98 E5 85 F1 | 	sub	objptr, ##34712
203b0     F2 FA 01 F6 | 	mov	result1, objptr
203b4     94 FA 25 F4 | 	bith	result1, #148
203b8     43 00 00 FF 
203bc     AC E5 05 F1 | 	add	objptr, ##34732
203c0     F2 FA 61 FC | 	wrlong	result1, objptr
203c4     43 00 00 FF 
203c8     AC E5 85 F1 | 	sub	objptr, ##34732
203cc     F2 FA 01 F6 | 	mov	result1, objptr
203d0     19 FA 25 F4 | 	bith	result1, #25
203d4     43 00 00 FF 
203d8     9C E5 05 F1 | 	add	objptr, ##34716
203dc     F2 FA 61 FC | 	wrlong	result1, objptr
203e0     43 00 00 FF 
203e4     9C E5 85 F1 | 	sub	objptr, ##34716
203e8     F2 FA 01 F6 | 	mov	result1, objptr
203ec     00 08 01 FF 
203f0     00 FA 45 F5 | 	or	result1, ##34603008
203f4     43 00 00 FF 
203f8     B8 E4 05 F1 | 	add	objptr, ##34488
203fc     F2 FA 61 FC | 	wrlong	result1, objptr
20400     43 00 00 FF 
20404     B8 E4 85 F1 | 	sub	objptr, ##34488
20408     F2 FA 01 F6 | 	mov	result1, objptr
2040c     00 10 01 FF 
20410     00 FA 45 F5 | 	or	result1, ##35651584
20414     43 00 00 FF 
20418     A0 E5 05 F1 | 	add	objptr, ##34720
2041c     F2 FA 61 FC | 	wrlong	result1, objptr
20420     43 00 00 FF 
20424     A0 E5 85 F1 | 	sub	objptr, ##34720
20428     F2 FA 01 F6 | 	mov	result1, objptr
2042c     00 18 01 FF 
20430     00 FA 45 F5 | 	or	result1, ##36700160
20434     43 00 00 FF 
20438     A4 E5 05 F1 | 	add	objptr, ##34724
2043c     F2 FA 61 FC | 	wrlong	result1, objptr
20440     43 00 00 FF 
20444     A4 E5 85 F1 | 	sub	objptr, ##34724
20448     F2 FA 01 F6 | 	mov	result1, objptr
2044c     00 20 01 FF 
20450     00 FA 45 F5 | 	or	result1, ##37748736
20454     43 00 00 FF 
20458     A8 E5 05 F1 | 	add	objptr, ##34728
2045c     F2 FA 61 FC | 	wrlong	result1, objptr
20460     43 00 00 FF 
20464     A8 E5 85 F1 | 	sub	objptr, ##34728
20468     F2 FA 01 F6 | 	mov	result1, objptr
2046c     00 28 01 FF 
20470     00 FA 45 F5 | 	or	result1, ##38797312
20474     43 00 00 FF 
20478     B4 E5 05 F1 | 	add	objptr, ##34740
2047c     F2 FA 61 FC | 	wrlong	result1, objptr
20480     43 00 00 FF 
20484     B4 E5 85 F1 | 	sub	objptr, ##34740
20488     F2 FA 01 F6 | 	mov	result1, objptr
2048c     00 30 01 FF 
20490     00 FA 45 F5 | 	or	result1, ##39845888
20494     43 00 00 FF 
20498     B8 E5 05 F1 | 	add	objptr, ##34744
2049c     F2 FA 61 FC | 	wrlong	result1, objptr
204a0     43 00 00 FF 
204a4     B8 E5 85 F1 | 	sub	objptr, ##34744
204a8     F2 FA 01 F6 | 	mov	result1, objptr
204ac     00 38 01 FF 
204b0     00 FA 45 F5 | 	or	result1, ##40894464
204b4     43 00 00 FF 
204b8     BC E5 05 F1 | 	add	objptr, ##34748
204bc     F2 FA 61 FC | 	wrlong	result1, objptr
204c0     43 00 00 FF 
204c4     BC E5 85 F1 | 	sub	objptr, ##34748
204c8     F2 FA 01 F6 | 	mov	result1, objptr
204cc     00 40 01 FF 
204d0     00 FA 45 F5 | 	or	result1, ##41943040
204d4     43 00 00 FF 
204d8     C0 E5 05 F1 | 	add	objptr, ##34752
204dc     F2 FA 61 FC | 	wrlong	result1, objptr
204e0     43 00 00 FF 
204e4     C0 E5 85 F1 | 	sub	objptr, ##34752
204e8     F2 FA 01 F6 | 	mov	result1, objptr
204ec     00 48 01 FF 
204f0     00 FA 45 F5 | 	or	result1, ##42991616
204f4     43 00 00 FF 
204f8     C8 E5 05 F1 | 	add	objptr, ##34760
204fc     F2 FA 61 FC | 	wrlong	result1, objptr
20500     43 00 00 FF 
20504     C8 E5 85 F1 | 	sub	objptr, ##34760
20508     F2 FA 01 F6 | 	mov	result1, objptr
2050c     00 08 01 FF 
20510     00 FA 45 F5 | 	or	result1, ##34603008
20514     43 00 00 FF 
20518     CC E5 05 F1 | 	add	objptr, ##34764
2051c     F2 FA 61 FC | 	wrlong	result1, objptr
20520     43 00 00 FF 
20524     CC E5 85 F1 | 	sub	objptr, ##34764
20528     F2 FA 01 F6 | 	mov	result1, objptr
2052c     00 50 01 FF 
20530     00 FA 45 F5 | 	or	result1, ##44040192
20534     43 00 00 FF 
20538     CC E4 05 F1 | 	add	objptr, ##34508
2053c     F2 FA 61 FC | 	wrlong	result1, objptr
20540     43 00 00 FF 
20544     CC E4 85 F1 | 	sub	objptr, ##34508
20548     F2 FA 01 F6 | 	mov	result1, objptr
2054c     00 58 01 FF 
20550     00 FA 45 F5 | 	or	result1, ##45088768
20554     43 00 00 FF 
20558     FC E4 05 F1 | 	add	objptr, ##34556
2055c     F2 FA 61 FC | 	wrlong	result1, objptr
20560     43 00 00 FF 
20564     FC E4 85 F1 | 	sub	objptr, ##34556
20568     F2 FA 01 F6 | 	mov	result1, objptr
2056c     00 60 01 FF 
20570     00 FA 45 F5 | 	or	result1, ##46137344
20574     43 00 00 FF 
20578     F8 E4 05 F1 | 	add	objptr, ##34552
2057c     F2 FA 61 FC | 	wrlong	result1, objptr
20580     43 00 00 FF 
20584     F8 E4 85 F1 | 	sub	objptr, ##34552
20588     F2 FA 01 F6 | 	mov	result1, objptr
2058c     00 68 01 FF 
20590     00 FA 45 F5 | 	or	result1, ##47185920
20594     43 00 00 FF 
20598     9C E4 05 F1 | 	add	objptr, ##34460
2059c     F2 FA 61 FC | 	wrlong	result1, objptr
205a0     43 00 00 FF 
205a4     9C E4 85 F1 | 	sub	objptr, ##34460
205a8     F2 FA 01 F6 | 	mov	result1, objptr
205ac     00 70 01 FF 
205b0     00 FA 45 F5 | 	or	result1, ##48234496
205b4     43 00 00 FF 
205b8     A0 E4 05 F1 | 	add	objptr, ##34464
205bc     F2 FA 61 FC | 	wrlong	result1, objptr
205c0     43 00 00 FF 
205c4     A0 E4 85 F1 | 	sub	objptr, ##34464
205c8     F2 FA 01 F6 | 	mov	result1, objptr
205cc     00 78 01 FF 
205d0     00 FA 45 F5 | 	or	result1, ##49283072
205d4     43 00 00 FF 
205d8     08 E5 05 F1 | 	add	objptr, ##34568
205dc     F2 FA 61 FC | 	wrlong	result1, objptr
205e0     43 00 00 FF 
205e4     08 E5 85 F1 | 	sub	objptr, ##34568
205e8     F2 FA 01 F6 | 	mov	result1, objptr
205ec     38 FA 25 F4 | 	bith	result1, #56
205f0     43 00 00 FF 
205f4     B0 E5 05 F1 | 	add	objptr, ##34736
205f8     F2 FA 61 FC | 	wrlong	result1, objptr
205fc     43 00 00 FF 
20600     B0 E5 85 F1 | 	sub	objptr, ##34736
20604     F2 FA 01 F6 | 	mov	result1, objptr
20608     00 88 01 FF 
2060c     00 FA 45 F5 | 	or	result1, ##51380224
20610     43 00 00 FF 
20614     C4 E5 05 F1 | 	add	objptr, ##34756
20618     F2 FA 61 FC | 	wrlong	result1, objptr
2061c     43 00 00 FF 
20620     C4 E5 85 F1 | 	sub	objptr, ##34756
20624     F2 FA 01 F6 | 	mov	result1, objptr
20628     00 90 01 FF 
2062c     00 FA 45 F5 | 	or	result1, ##52428800
20630     43 00 00 FF 
20634     D0 E5 05 F1 | 	add	objptr, ##34768
20638     F2 FA 61 FC | 	wrlong	result1, objptr
2063c     43 00 00 FF 
20640     D0 E5 85 F1 | 	sub	objptr, ##34768
20644     F2 FA 01 F6 | 	mov	result1, objptr
20648     00 98 01 FF 
2064c     00 FA 45 F5 | 	or	result1, ##53477376
20650     43 00 00 FF 
20654     D4 E5 05 F1 | 	add	objptr, ##34772
20658     F2 FA 61 FC | 	wrlong	result1, objptr
2065c     43 00 00 FF 
20660     D4 E5 85 F1 | 	sub	objptr, ##34772
20664     F2 FA 01 F6 | 	mov	result1, objptr
20668     00 A0 01 FF 
2066c     00 FA 45 F5 | 	or	result1, ##54525952
20670     43 00 00 FF 
20674     D8 E5 05 F1 | 	add	objptr, ##34776
20678     F2 FA 61 FC | 	wrlong	result1, objptr
2067c     43 00 00 FF 
20680     D8 E5 85 F1 | 	sub	objptr, ##34776
20684     F2 FA 01 F6 | 	mov	result1, objptr
20688     00 A8 01 FF 
2068c     00 FA 45 F5 | 	or	result1, ##55574528
20690     43 00 00 FF 
20694     DC E5 05 F1 | 	add	objptr, ##34780
20698     F2 FA 61 FC | 	wrlong	result1, objptr
2069c     43 00 00 FF 
206a0     DC E5 85 F1 | 	sub	objptr, ##34780
206a4     F2 FA 01 F6 | 	mov	result1, objptr
206a8     00 B0 01 FF 
206ac     00 FA 45 F5 | 	or	result1, ##56623104
206b0     43 00 00 FF 
206b4     E0 E5 05 F1 | 	add	objptr, ##34784
206b8     F2 FA 61 FC | 	wrlong	result1, objptr
206bc     43 00 00 FF 
206c0     E0 E5 85 F1 | 	sub	objptr, ##34784
206c4     F2 FA 01 F6 | 	mov	result1, objptr
206c8     00 B8 01 FF 
206cc     00 FA 45 F5 | 	or	result1, ##57671680
206d0     43 00 00 FF 
206d4     E4 E5 05 F1 | 	add	objptr, ##34788
206d8     F2 FA 61 FC | 	wrlong	result1, objptr
206dc     43 00 00 FF 
206e0     E4 E5 85 F1 | 	sub	objptr, ##34788
206e4     F2 FA 01 F6 | 	mov	result1, objptr
206e8     94 FA 25 F4 | 	bith	result1, #148
206ec     43 00 00 FF 
206f0     AC E5 05 F1 | 	add	objptr, ##34732
206f4     F2 FA 61 FC | 	wrlong	result1, objptr
206f8     43 00 00 FF 
206fc     AC E5 85 F1 | 	sub	objptr, ##34732
20700     F2 FA 01 F6 | 	mov	result1, objptr
20704     57 FA 25 F4 | 	bith	result1, #87
20708     43 00 00 FF 
2070c     EC E5 05 F1 | 	add	objptr, ##34796
20710     F2 FA 61 FC | 	wrlong	result1, objptr
20714     43 00 00 FF 
20718     EC E5 85 F1 | 	sub	objptr, ##34796
2071c     F2 FA 01 F6 | 	mov	result1, objptr
20720     00 C8 01 FF 
20724     00 FA 45 F5 | 	or	result1, ##59768832
20728     43 00 00 FF 
2072c     E8 E5 05 F1 | 	add	objptr, ##34792
20730     F2 FA 61 FC | 	wrlong	result1, objptr
20734     43 00 00 FF 
20738     E8 E5 85 F1 | 	sub	objptr, ##34792
2073c     F2 FA 01 F6 | 	mov	result1, objptr
20740     00 D0 01 FF 
20744     00 FA 45 F5 | 	or	result1, ##60817408
20748     44 00 00 FF 
2074c     00 E4 05 F1 | 	add	objptr, ##34816
20750     F2 FA 61 FC | 	wrlong	result1, objptr
20754     44 00 00 FF 
20758     00 E4 85 F1 | 	sub	objptr, ##34816
2075c     F2 FA 01 F6 | 	mov	result1, objptr
20760     00 D8 01 FF 
20764     00 FA 45 F5 | 	or	result1, ##61865984
20768     44 00 00 FF 
2076c     04 E4 05 F1 | 	add	objptr, ##34820
20770     F2 FA 61 FC | 	wrlong	result1, objptr
20774     44 00 00 FF 
20778     04 E4 85 F1 | 	sub	objptr, ##34820
2077c     F2 FA 01 F6 | 	mov	result1, objptr
20780     76 FA 25 F4 | 	bith	result1, #118
20784     43 00 00 FF 
20788     F0 E5 05 F1 | 	add	objptr, ##34800
2078c     F2 FA 61 FC | 	wrlong	result1, objptr
20790     43 00 00 FF 
20794     F0 E5 85 F1 | 	sub	objptr, ##34800
20798     F2 FA 01 F6 | 	mov	result1, objptr
2079c     00 E8 01 FF 
207a0     00 FA 45 F5 | 	or	result1, ##63963136
207a4     43 00 00 FF 
207a8     F4 E5 05 F1 | 	add	objptr, ##34804
207ac     F2 FA 61 FC | 	wrlong	result1, objptr
207b0     43 00 00 FF 
207b4     F4 E5 85 F1 | 	sub	objptr, ##34804
207b8     F2 FA 01 F6 | 	mov	result1, objptr
207bc     95 FA 25 F4 | 	bith	result1, #149
207c0     43 00 00 FF 
207c4     F8 E5 05 F1 | 	add	objptr, ##34808
207c8     F2 FA 61 FC | 	wrlong	result1, objptr
207cc     43 00 00 FF 
207d0     F8 E5 85 F1 | 	sub	objptr, ##34808
207d4     F2 FA 01 F6 | 	mov	result1, objptr
207d8     B4 FA 25 F4 | 	bith	result1, #180
207dc     43 00 00 FF 
207e0     FC E5 05 F1 | 	add	objptr, ##34812
207e4     F2 FA 61 FC | 	wrlong	result1, objptr
207e8     43 00 00 FF 
207ec     FC E5 85 F1 | 	sub	objptr, ##34812
207f0     F2 FA 01 F6 | 	mov	result1, objptr
207f4     1A FA 25 F4 | 	bith	result1, #26
207f8     44 00 00 FF 
207fc     0C E4 05 F1 | 	add	objptr, ##34828
20800     F2 FA 61 FC | 	wrlong	result1, objptr
20804     44 00 00 FF 
20808     0C E4 85 F1 | 	sub	objptr, ##34828
2080c     F2 FA 01 F6 | 	mov	result1, objptr
20810     00 08 02 FF 
20814     00 FA 45 F5 | 	or	result1, ##68157440
20818     44 00 00 FF 
2081c     08 E4 05 F1 | 	add	objptr, ##34824
20820     F2 FA 61 FC | 	wrlong	result1, objptr
20824     44 00 00 FF 
20828     08 E4 85 F1 | 	sub	objptr, ##34824
2082c     F2 FA 01 F6 | 	mov	result1, objptr
20830     00 10 02 FF 
20834     00 FA 45 F5 | 	or	result1, ##69206016
20838     44 00 00 FF 
2083c     18 E4 05 F1 | 	add	objptr, ##34840
20840     F2 FA 61 FC | 	wrlong	result1, objptr
20844     44 00 00 FF 
20848     18 E4 85 F1 | 	sub	objptr, ##34840
2084c     F2 FA 01 F6 | 	mov	result1, objptr
20850     00 18 02 FF 
20854     00 FA 45 F5 | 	or	result1, ##70254592
20858     44 00 00 FF 
2085c     14 E4 05 F1 | 	add	objptr, ##34836
20860     F2 FA 61 FC | 	wrlong	result1, objptr
20864     44 00 00 FF 
20868     14 E4 85 F1 | 	sub	objptr, ##34836
2086c     F2 FA 01 F6 | 	mov	result1, objptr
20870     00 20 02 FF 
20874     00 FA 45 F5 | 	or	result1, ##71303168
20878     44 00 00 FF 
2087c     10 E4 05 F1 | 	add	objptr, ##34832
20880     F2 FA 61 FC | 	wrlong	result1, objptr
20884     44 00 00 FF 
20888     10 E4 85 F1 | 	sub	objptr, ##34832
2088c     F2 FA 01 F6 | 	mov	result1, objptr
20890     00 28 02 FF 
20894     00 FA 45 F5 | 	or	result1, ##72351744
20898     44 00 00 FF 
2089c     1C E4 05 F1 | 	add	objptr, ##34844
208a0     F2 FA 61 FC | 	wrlong	result1, objptr
208a4     44 00 00 FF 
208a8     1C E4 85 F1 | 	sub	objptr, ##34844
208ac     F2 FA 01 F6 | 	mov	result1, objptr
208b0     00 30 02 FF 
208b4     00 FA 45 F5 | 	or	result1, ##73400320
208b8     44 00 00 FF 
208bc     20 E4 05 F1 | 	add	objptr, ##34848
208c0     F2 FA 61 FC | 	wrlong	result1, objptr
208c4     44 00 00 FF 
208c8     20 E4 85 F1 | 	sub	objptr, ##34848
208cc     F2 FA 01 F6 | 	mov	result1, objptr
208d0     00 38 02 FF 
208d4     00 FA 45 F5 | 	or	result1, ##74448896
208d8     43 00 00 FF 
208dc     B4 E4 05 F1 | 	add	objptr, ##34484
208e0     F2 FA 61 FC | 	wrlong	result1, objptr
208e4     43 00 00 FF 
208e8     B4 E4 85 F1 | 	sub	objptr, ##34484
208ec     F2 FA 01 F6 | 	mov	result1, objptr
208f0     00 40 02 FF 
208f4     00 FA 45 F5 | 	or	result1, ##75497472
208f8     44 00 00 FF 
208fc     38 E4 05 F1 | 	add	objptr, ##34872
20900     F2 FA 61 FC | 	wrlong	result1, objptr
20904     44 00 00 FF 
20908     38 E4 85 F1 | 	sub	objptr, ##34872
2090c     F2 FA 01 F6 | 	mov	result1, objptr
20910     00 48 02 FF 
20914     00 FA 45 F5 | 	or	result1, ##76546048
20918     44 00 00 FF 
2091c     48 E4 05 F1 | 	add	objptr, ##34888
20920     F2 FA 61 FC | 	wrlong	result1, objptr
20924     44 00 00 FF 
20928     48 E4 85 F1 | 	sub	objptr, ##34888
2092c     F2 FA 01 F6 | 	mov	result1, objptr
20930     00 50 02 FF 
20934     00 FA 45 F5 | 	or	result1, ##77594624
20938     44 00 00 FF 
2093c     4C E4 05 F1 | 	add	objptr, ##34892
20940     F2 FA 61 FC | 	wrlong	result1, objptr
20944     44 00 00 FF 
20948     4C E4 85 F1 | 	sub	objptr, ##34892
2094c     F2 FA 01 F6 | 	mov	result1, objptr
20950     00 58 02 FF 
20954     00 FA 45 F5 | 	or	result1, ##78643200
20958     44 00 00 FF 
2095c     44 E4 05 F1 | 	add	objptr, ##34884
20960     F2 FA 61 FC | 	wrlong	result1, objptr
20964     44 00 00 FF 
20968     44 E4 85 F1 | 	sub	objptr, ##34884
2096c     F2 FA 01 F6 | 	mov	result1, objptr
20970     00 60 02 FF 
20974     00 FA 45 F5 | 	or	result1, ##79691776
20978     44 00 00 FF 
2097c     3C E4 05 F1 | 	add	objptr, ##34876
20980     F2 FA 61 FC | 	wrlong	result1, objptr
20984     44 00 00 FF 
20988     3C E4 85 F1 | 	sub	objptr, ##34876
2098c     F2 FA 01 F6 | 	mov	result1, objptr
20990     00 68 02 FF 
20994     00 FA 45 F5 | 	or	result1, ##80740352
20998     44 00 00 FF 
2099c     40 E4 05 F1 | 	add	objptr, ##34880
209a0     F2 FA 61 FC | 	wrlong	result1, objptr
209a4     44 00 00 FF 
209a8     40 E4 85 F1 | 	sub	objptr, ##34880
209ac     F2 FA 01 F6 | 	mov	result1, objptr
209b0     00 70 02 FF 
209b4     00 FA 45 F5 | 	or	result1, ##81788928
209b8     44 00 00 FF 
209bc     50 E4 05 F1 | 	add	objptr, ##34896
209c0     F2 FA 61 FC | 	wrlong	result1, objptr
209c4     44 00 00 FF 
209c8     50 E4 85 F1 | 	sub	objptr, ##34896
209cc     F2 FA 01 F6 | 	mov	result1, objptr
209d0     00 78 02 FF 
209d4     00 FA 45 F5 | 	or	result1, ##82837504
209d8     44 00 00 FF 
209dc     54 E4 05 F1 | 	add	objptr, ##34900
209e0     F2 FA 61 FC | 	wrlong	result1, objptr
209e4     44 00 00 FF 
209e8     54 E4 85 F1 | 	sub	objptr, ##34900
209ec     F2 FA 01 F6 | 	mov	result1, objptr
209f0     00 80 02 FF 
209f4     00 FA 45 F5 | 	or	result1, ##83886080
209f8     44 00 00 FF 
209fc     58 E4 05 F1 | 	add	objptr, ##34904
20a00     F2 FA 61 FC | 	wrlong	result1, objptr
20a04     44 00 00 FF 
20a08     58 E4 85 F1 | 	sub	objptr, ##34904
20a0c     F2 FA 01 F6 | 	mov	result1, objptr
20a10     00 88 02 FF 
20a14     00 FA 45 F5 | 	or	result1, ##84934656
20a18     44 00 00 FF 
20a1c     5C E4 05 F1 | 	add	objptr, ##34908
20a20     F2 FA 61 FC | 	wrlong	result1, objptr
20a24     44 00 00 FF 
20a28     5C E4 85 F1 | 	sub	objptr, ##34908
20a2c     F2 FA 01 F6 | 	mov	result1, objptr
20a30     00 90 02 FF 
20a34     00 FA 45 F5 | 	or	result1, ##85983232
20a38     44 00 00 FF 
20a3c     60 E4 05 F1 | 	add	objptr, ##34912
20a40     F2 FA 61 FC | 	wrlong	result1, objptr
20a44     44 00 00 FF 
20a48     60 E4 85 F1 | 	sub	objptr, ##34912
20a4c     F2 FA 01 F6 | 	mov	result1, objptr
20a50     00 98 02 FF 
20a54     00 FA 45 F5 | 	or	result1, ##87031808
20a58     44 00 00 FF 
20a5c     64 E4 05 F1 | 	add	objptr, ##34916
20a60     F2 FA 61 FC | 	wrlong	result1, objptr
20a64     44 00 00 FF 
20a68     64 E4 85 F1 | 	sub	objptr, ##34916
20a6c     F2 FA 01 F6 | 	mov	result1, objptr
20a70     00 A0 02 FF 
20a74     00 FA 45 F5 | 	or	result1, ##88080384
20a78     44 00 00 FF 
20a7c     68 E4 05 F1 | 	add	objptr, ##34920
20a80     F2 FA 61 FC | 	wrlong	result1, objptr
20a84     44 00 00 FF 
20a88     68 E4 85 F1 | 	sub	objptr, ##34920
20a8c     F2 FA 01 F6 | 	mov	result1, objptr
20a90     00 A8 02 FF 
20a94     00 FA 45 F5 | 	or	result1, ##89128960
20a98     44 00 00 FF 
20a9c     6C E4 05 F1 | 	add	objptr, ##34924
20aa0     F2 FA 61 FC | 	wrlong	result1, objptr
20aa4     44 00 00 FF 
20aa8     6C E4 85 F1 | 	sub	objptr, ##34924
20aac     F2 FA 01 F6 | 	mov	result1, objptr
20ab0     00 B0 02 FF 
20ab4     00 FA 45 F5 | 	or	result1, ##90177536
20ab8     44 00 00 FF 
20abc     78 E4 05 F1 | 	add	objptr, ##34936
20ac0     F2 FA 61 FC | 	wrlong	result1, objptr
20ac4     44 00 00 FF 
20ac8     78 E4 85 F1 | 	sub	objptr, ##34936
20acc     F2 FA 01 F6 | 	mov	result1, objptr
20ad0     00 B8 02 FF 
20ad4     00 FA 45 F5 | 	or	result1, ##91226112
20ad8     44 00 00 FF 
20adc     70 E4 05 F1 | 	add	objptr, ##34928
20ae0     F2 FA 61 FC | 	wrlong	result1, objptr
20ae4     44 00 00 FF 
20ae8     70 E4 85 F1 | 	sub	objptr, ##34928
20aec     F2 FA 01 F6 | 	mov	result1, objptr
20af0     00 C0 02 FF 
20af4     00 FA 45 F5 | 	or	result1, ##92274688
20af8     44 00 00 FF 
20afc     74 E4 05 F1 | 	add	objptr, ##34932
20b00     F2 FA 61 FC | 	wrlong	result1, objptr
20b04     44 00 00 FF 
20b08     74 E4 85 F1 | 	sub	objptr, ##34932
20b0c     F2 FA 01 F6 | 	mov	result1, objptr
20b10     00 C8 02 FF 
20b14     00 FA 45 F5 | 	or	result1, ##93323264
20b18     44 00 00 FF 
20b1c     7C E4 05 F1 | 	add	objptr, ##34940
20b20     F2 FA 61 FC | 	wrlong	result1, objptr
20b24     44 00 00 FF 
20b28     7C E4 85 F1 | 	sub	objptr, ##34940
20b2c     F2 FA 01 F6 | 	mov	result1, objptr
20b30     00 D0 02 FF 
20b34     00 FA 45 F5 | 	or	result1, ##94371840
20b38     44 00 00 FF 
20b3c     24 E4 05 F1 | 	add	objptr, ##34852
20b40     F2 FA 61 FC | 	wrlong	result1, objptr
20b44     44 00 00 FF 
20b48     24 E4 85 F1 | 	sub	objptr, ##34852
20b4c     F2 FA 01 F6 | 	mov	result1, objptr
20b50     00 D8 02 FF 
20b54     00 FA 45 F5 | 	or	result1, ##95420416
20b58     44 00 00 FF 
20b5c     2C E4 05 F1 | 	add	objptr, ##34860
20b60     F2 FA 61 FC | 	wrlong	result1, objptr
20b64     44 00 00 FF 
20b68     2C E4 85 F1 | 	sub	objptr, ##34860
20b6c     F2 FA 01 F6 | 	mov	result1, objptr
20b70     00 E0 02 FF 
20b74     00 FA 45 F5 | 	or	result1, ##96468992
20b78     44 00 00 FF 
20b7c     30 E4 05 F1 | 	add	objptr, ##34864
20b80     F2 FA 61 FC | 	wrlong	result1, objptr
20b84     44 00 00 FF 
20b88     30 E4 85 F1 | 	sub	objptr, ##34864
20b8c     F2 FA 01 F6 | 	mov	result1, objptr
20b90     00 E8 02 FF 
20b94     00 FA 45 F5 | 	or	result1, ##97517568
20b98     44 00 00 FF 
20b9c     80 E4 05 F1 | 	add	objptr, ##34944
20ba0     F2 FA 61 FC | 	wrlong	result1, objptr
20ba4     44 00 00 FF 
20ba8     80 E4 85 F1 | 	sub	objptr, ##34944
20bac     F2 FA 01 F6 | 	mov	result1, objptr
20bb0     00 F0 02 FF 
20bb4     00 FA 45 F5 | 	or	result1, ##98566144
20bb8     44 00 00 FF 
20bbc     84 E4 05 F1 | 	add	objptr, ##34948
20bc0     F2 FA 61 FC | 	wrlong	result1, objptr
20bc4     44 00 00 FF 
20bc8     84 E4 85 F1 | 	sub	objptr, ##34948
20bcc     F2 FA 01 F6 | 	mov	result1, objptr
20bd0     00 F8 02 FF 
20bd4     00 FA 45 F5 | 	or	result1, ##99614720
20bd8     44 00 00 FF 
20bdc     88 E4 05 F1 | 	add	objptr, ##34952
20be0     F2 FA 61 FC | 	wrlong	result1, objptr
20be4     44 00 00 FF 
20be8     88 E4 85 F1 | 	sub	objptr, ##34952
20bec     F2 FA 01 F6 | 	mov	result1, objptr
20bf0     39 FA 25 F4 | 	bith	result1, #57
20bf4     44 00 00 FF 
20bf8     34 E4 05 F1 | 	add	objptr, ##34868
20bfc     F2 FA 61 FC | 	wrlong	result1, objptr
20c00     44 00 00 FF 
20c04     34 E4 85 F1 | 	sub	objptr, ##34868
20c08     F2 FA 01 F6 | 	mov	result1, objptr
20c0c     00 08 03 FF 
20c10     00 FA 45 F5 | 	or	result1, ##101711872
20c14     44 00 00 FF 
20c18     98 E4 05 F1 | 	add	objptr, ##34968
20c1c     F2 FA 61 FC | 	wrlong	result1, objptr
20c20     44 00 00 FF 
20c24     98 E4 85 F1 | 	sub	objptr, ##34968
20c28     F2 FA 01 F6 | 	mov	result1, objptr
20c2c     00 10 03 FF 
20c30     00 FA 45 F5 | 	or	result1, ##102760448
20c34     44 00 00 FF 
20c38     A0 E4 05 F1 | 	add	objptr, ##34976
20c3c     F2 FA 61 FC | 	wrlong	result1, objptr
20c40     44 00 00 FF 
20c44     A0 E4 85 F1 | 	sub	objptr, ##34976
20c48     F2 FA 01 F6 | 	mov	result1, objptr
20c4c     00 18 03 FF 
20c50     00 FA 45 F5 | 	or	result1, ##103809024
20c54     44 00 00 FF 
20c58     94 E4 05 F1 | 	add	objptr, ##34964
20c5c     F2 FA 61 FC | 	wrlong	result1, objptr
20c60     44 00 00 FF 
20c64     94 E4 85 F1 | 	sub	objptr, ##34964
20c68     F2 FA 01 F6 | 	mov	result1, objptr
20c6c     00 20 03 FF 
20c70     00 FA 45 F5 | 	or	result1, ##104857600
20c74     44 00 00 FF 
20c78     90 E4 05 F1 | 	add	objptr, ##34960
20c7c     F2 FA 61 FC | 	wrlong	result1, objptr
20c80     44 00 00 FF 
20c84     90 E4 85 F1 | 	sub	objptr, ##34960
20c88     F2 FA 01 F6 | 	mov	result1, objptr
20c8c     00 28 03 FF 
20c90     00 FA 45 F5 | 	or	result1, ##105906176
20c94     44 00 00 FF 
20c98     8C E4 05 F1 | 	add	objptr, ##34956
20c9c     F2 FA 61 FC | 	wrlong	result1, objptr
20ca0     44 00 00 FF 
20ca4     8C E4 85 F1 | 	sub	objptr, ##34956
20ca8     F2 FA 01 F6 | 	mov	result1, objptr
20cac     00 30 03 FF 
20cb0     00 FA 45 F5 | 	or	result1, ##106954752
20cb4     44 00 00 FF 
20cb8     9C E4 05 F1 | 	add	objptr, ##34972
20cbc     F2 FA 61 FC | 	wrlong	result1, objptr
20cc0     44 00 00 FF 
20cc4     9C E4 85 F1 | 	sub	objptr, ##34972
20cc8     F2 FA 01 F6 | 	mov	result1, objptr
20ccc     00 38 03 FF 
20cd0     00 FA 45 F5 | 	or	result1, ##108003328
20cd4     44 00 00 FF 
20cd8     A4 E4 05 F1 | 	add	objptr, ##34980
20cdc     F2 FA 61 FC | 	wrlong	result1, objptr
20ce0     44 00 00 FF 
20ce4     A4 E4 85 F1 | 	sub	objptr, ##34980
20ce8     F2 FA 01 F6 | 	mov	result1, objptr
20cec     00 40 03 FF 
20cf0     00 FA 45 F5 | 	or	result1, ##109051904
20cf4     44 00 00 FF 
20cf8     A8 E4 05 F1 | 	add	objptr, ##34984
20cfc     F2 FA 61 FC | 	wrlong	result1, objptr
20d00     44 00 00 FF 
20d04     A8 E4 85 F1 | 	sub	objptr, ##34984
20d08     F2 FA 01 F6 | 	mov	result1, objptr
20d0c     00 48 03 FF 
20d10     00 FA 45 F5 | 	or	result1, ##110100480
20d14     44 00 00 FF 
20d18     AC E4 05 F1 | 	add	objptr, ##34988
20d1c     F2 FA 61 FC | 	wrlong	result1, objptr
20d20     44 00 00 FF 
20d24     AC E4 85 F1 | 	sub	objptr, ##34988
20d28     F2 FA 01 F6 | 	mov	result1, objptr
20d2c     00 50 03 FF 
20d30     00 FA 45 F5 | 	or	result1, ##111149056
20d34     44 00 00 FF 
20d38     B4 E4 05 F1 | 	add	objptr, ##34996
20d3c     F2 FA 61 FC | 	wrlong	result1, objptr
20d40     44 00 00 FF 
20d44     B4 E4 85 F1 | 	sub	objptr, ##34996
20d48     F2 FA 01 F6 | 	mov	result1, objptr
20d4c     00 58 03 FF 
20d50     00 FA 45 F5 | 	or	result1, ##112197632
20d54     44 00 00 FF 
20d58     B8 E4 05 F1 | 	add	objptr, ##35000
20d5c     F2 FA 61 FC | 	wrlong	result1, objptr
20d60     44 00 00 FF 
20d64     B8 E4 85 F1 | 	sub	objptr, ##35000
20d68     F2 FA 01 F6 | 	mov	result1, objptr
20d6c     00 60 03 FF 
20d70     00 FA 45 F5 | 	or	result1, ##113246208
20d74     44 00 00 FF 
20d78     BC E4 05 F1 | 	add	objptr, ##35004
20d7c     F2 FA 61 FC | 	wrlong	result1, objptr
20d80     44 00 00 FF 
20d84     BC E4 85 F1 | 	sub	objptr, ##35004
20d88     F2 FA 01 F6 | 	mov	result1, objptr
20d8c     00 68 03 FF 
20d90     00 FA 45 F5 | 	or	result1, ##114294784
20d94     44 00 00 FF 
20d98     C0 E4 05 F1 | 	add	objptr, ##35008
20d9c     F2 FA 61 FC | 	wrlong	result1, objptr
20da0     44 00 00 FF 
20da4     C0 E4 85 F1 | 	sub	objptr, ##35008
20da8     F2 FA 01 F6 | 	mov	result1, objptr
20dac     00 70 03 FF 
20db0     00 FA 45 F5 | 	or	result1, ##115343360
20db4     44 00 00 FF 
20db8     C4 E4 05 F1 | 	add	objptr, ##35012
20dbc     F2 FA 61 FC | 	wrlong	result1, objptr
20dc0     44 00 00 FF 
20dc4     C4 E4 85 F1 | 	sub	objptr, ##35012
20dc8     F2 FA 01 F6 | 	mov	result1, objptr
20dcc     00 78 03 FF 
20dd0     00 FA 45 F5 | 	or	result1, ##116391936
20dd4     44 00 00 FF 
20dd8     C8 E4 05 F1 | 	add	objptr, ##35016
20ddc     F2 FA 61 FC | 	wrlong	result1, objptr
20de0     44 00 00 FF 
20de4     C8 E4 85 F1 | 	sub	objptr, ##35016
20de8     F2 FA 01 F6 | 	mov	result1, objptr
20dec     00 08 01 FF 
20df0     00 FA 45 F5 | 	or	result1, ##34603008
20df4     44 00 00 FF 
20df8     CC E4 05 F1 | 	add	objptr, ##35020
20dfc     F2 FA 61 FC | 	wrlong	result1, objptr
20e00     44 00 00 FF 
20e04     CC E4 85 F1 | 	sub	objptr, ##35020
20e08     F2 FA 01 F6 | 	mov	result1, objptr
20e0c     58 FA 25 F4 | 	bith	result1, #88
20e10     44 00 00 FF 
20e14     D0 E4 05 F1 | 	add	objptr, ##35024
20e18     F2 FA 61 FC | 	wrlong	result1, objptr
20e1c     44 00 00 FF 
20e20     D0 E4 85 F1 | 	sub	objptr, ##35024
20e24     F2 FA 01 F6 | 	mov	result1, objptr
20e28     00 88 03 FF 
20e2c     00 FA 45 F5 | 	or	result1, ##118489088
20e30     44 00 00 FF 
20e34     B0 E4 05 F1 | 	add	objptr, ##34992
20e38     F2 FA 61 FC | 	wrlong	result1, objptr
20e3c     44 00 00 FF 
20e40     B0 E4 85 F1 | 	sub	objptr, ##34992
20e44     F2 FA 01 F6 | 	mov	result1, objptr
20e48     00 90 03 FF 
20e4c     00 FA 45 F5 | 	or	result1, ##119537664
20e50     43 00 00 FF 
20e54     A8 E4 05 F1 | 	add	objptr, ##34472
20e58     F2 FA 61 FC | 	wrlong	result1, objptr
20e5c     43 00 00 FF 
20e60     A8 E4 85 F1 | 	sub	objptr, ##34472
20e64     F2 FA 01 F6 | 	mov	result1, objptr
20e68     00 98 03 FF 
20e6c     00 FA 45 F5 | 	or	result1, ##120586240
20e70     44 00 00 FF 
20e74     D4 E4 05 F1 | 	add	objptr, ##35028
20e78     F2 FA 61 FC | 	wrlong	result1, objptr
20e7c     44 00 00 FF 
20e80     D4 E4 85 F1 | 	sub	objptr, ##35028
20e84     F2 FA 01 F6 | 	mov	result1, objptr
20e88     00 A0 03 FF 
20e8c     00 FA 45 F5 | 	or	result1, ##121634816
20e90     44 00 00 FF 
20e94     D8 E4 05 F1 | 	add	objptr, ##35032
20e98     F2 FA 61 FC | 	wrlong	result1, objptr
20e9c     44 00 00 FF 
20ea0     D8 E4 85 F1 | 	sub	objptr, ##35032
20ea4     F2 FA 01 F6 | 	mov	result1, objptr
20ea8     00 A8 03 FF 
20eac     00 FA 45 F5 | 	or	result1, ##122683392
20eb0     44 00 00 FF 
20eb4     EC E4 05 F1 | 	add	objptr, ##35052
20eb8     F2 FA 61 FC | 	wrlong	result1, objptr
20ebc     44 00 00 FF 
20ec0     EC E4 85 F1 | 	sub	objptr, ##35052
20ec4     F2 FA 01 F6 | 	mov	result1, objptr
20ec8     00 B0 03 FF 
20ecc     00 FA 45 F5 | 	or	result1, ##123731968
20ed0     44 00 00 FF 
20ed4     E8 E4 05 F1 | 	add	objptr, ##35048
20ed8     F2 FA 61 FC | 	wrlong	result1, objptr
20edc     44 00 00 FF 
20ee0     E8 E4 85 F1 | 	sub	objptr, ##35048
20ee4     F2 FA 01 F6 | 	mov	result1, objptr
20ee8     00 B8 03 FF 
20eec     00 FA 45 F5 | 	or	result1, ##124780544
20ef0     44 00 00 FF 
20ef4     E0 E4 05 F1 | 	add	objptr, ##35040
20ef8     F2 FA 61 FC | 	wrlong	result1, objptr
20efc     44 00 00 FF 
20f00     E0 E4 85 F1 | 	sub	objptr, ##35040
20f04     F2 FA 01 F6 | 	mov	result1, objptr
20f08     77 FA 25 F4 | 	bith	result1, #119
20f0c     44 00 00 FF 
20f10     DC E4 05 F1 | 	add	objptr, ##35036
20f14     F2 FA 61 FC | 	wrlong	result1, objptr
20f18     44 00 00 FF 
20f1c     DC E4 85 F1 | 	sub	objptr, ##35036
20f20     F2 FA 01 F6 | 	mov	result1, objptr
20f24     00 C8 03 FF 
20f28     00 FA 45 F5 | 	or	result1, ##126877696
20f2c     44 00 00 FF 
20f30     FC E4 05 F1 | 	add	objptr, ##35068
20f34     F2 FA 61 FC | 	wrlong	result1, objptr
20f38     44 00 00 FF 
20f3c     FC E4 85 F1 | 	sub	objptr, ##35068
20f40     F2 FA 01 F6 | 	mov	result1, objptr
20f44     00 D0 03 FF 
20f48     00 FA 45 F5 | 	or	result1, ##127926272
20f4c     44 00 00 FF 
20f50     F0 E4 05 F1 | 	add	objptr, ##35056
20f54     F2 FA 61 FC | 	wrlong	result1, objptr
20f58     44 00 00 FF 
20f5c     F0 E4 85 F1 | 	sub	objptr, ##35056
20f60     F2 FA 01 F6 | 	mov	result1, objptr
20f64     00 D8 03 FF 
20f68     00 FA 45 F5 | 	or	result1, ##128974848
20f6c     44 00 00 FF 
20f70     F4 E4 05 F1 | 	add	objptr, ##35060
20f74     F2 FA 61 FC | 	wrlong	result1, objptr
20f78     44 00 00 FF 
20f7c     F4 E4 85 F1 | 	sub	objptr, ##35060
20f80     F2 FA 01 F6 | 	mov	result1, objptr
20f84     96 FA 25 F4 | 	bith	result1, #150
20f88     44 00 00 FF 
20f8c     F8 E4 05 F1 | 	add	objptr, ##35064
20f90     F2 FA 61 FC | 	wrlong	result1, objptr
20f94     44 00 00 FF 
20f98     F8 E4 85 F1 | 	sub	objptr, ##35064
20f9c     F2 FA 01 F6 | 	mov	result1, objptr
20fa0     00 E8 03 FF 
20fa4     00 FA 45 F5 | 	or	result1, ##131072000
20fa8     44 00 00 FF 
20fac     00 E5 05 F1 | 	add	objptr, ##35072
20fb0     F2 FA 61 FC | 	wrlong	result1, objptr
20fb4     44 00 00 FF 
20fb8     00 E5 85 F1 | 	sub	objptr, ##35072
20fbc     F2 FA 01 F6 | 	mov	result1, objptr
20fc0     B5 FA 25 F4 | 	bith	result1, #181
20fc4     44 00 00 FF 
20fc8     04 E5 05 F1 | 	add	objptr, ##35076
20fcc     F2 FA 61 FC | 	wrlong	result1, objptr
20fd0     44 00 00 FF 
20fd4     04 E5 85 F1 | 	sub	objptr, ##35076
20fd8     F2 FA 01 F6 | 	mov	result1, objptr
20fdc     D4 FA 25 F4 | 	bith	result1, #212
20fe0     44 00 00 FF 
20fe4     08 E5 05 F1 | 	add	objptr, ##35080
20fe8     F2 FA 61 FC | 	wrlong	result1, objptr
20fec     44 00 00 FF 
20ff0     08 E5 85 F1 | 	sub	objptr, ##35080
20ff4     F2 FA 01 F6 | 	mov	result1, objptr
20ff8     1B FA 25 F4 | 	bith	result1, #27
20ffc     44 00 00 FF 
21000     0C E5 05 F1 | 	add	objptr, ##35084
21004     F2 FA 61 FC | 	wrlong	result1, objptr
21008     44 00 00 FF 
2100c     0C E5 85 F1 | 	sub	objptr, ##35084
21010     F2 FA 01 F6 | 	mov	result1, objptr
21014     00 08 04 FF 
21018     00 FA 45 F5 | 	or	result1, ##135266304
2101c     44 00 00 FF 
21020     10 E5 05 F1 | 	add	objptr, ##35088
21024     F2 FA 61 FC | 	wrlong	result1, objptr
21028     44 00 00 FF 
2102c     10 E5 85 F1 | 	sub	objptr, ##35088
21030     F2 FA 01 F6 | 	mov	result1, objptr
21034     00 10 04 FF 
21038     00 FA 45 F5 | 	or	result1, ##136314880
2103c     44 00 00 FF 
21040     14 E5 05 F1 | 	add	objptr, ##35092
21044     F2 FA 61 FC | 	wrlong	result1, objptr
21048     44 00 00 FF 
2104c     14 E5 85 F1 | 	sub	objptr, ##35092
21050     F2 FA 01 F6 | 	mov	result1, objptr
21054     00 18 04 FF 
21058     00 FA 45 F5 | 	or	result1, ##137363456
2105c     44 00 00 FF 
21060     1C E5 05 F1 | 	add	objptr, ##35100
21064     F2 FA 61 FC | 	wrlong	result1, objptr
21068     44 00 00 FF 
2106c     1C E5 85 F1 | 	sub	objptr, ##35100
21070     F2 FA 01 F6 | 	mov	result1, objptr
21074     00 20 04 FF 
21078     00 FA 45 F5 | 	or	result1, ##138412032
2107c     44 00 00 FF 
21080     20 E5 05 F1 | 	add	objptr, ##35104
21084     F2 FA 61 FC | 	wrlong	result1, objptr
21088     44 00 00 FF 
2108c     20 E5 85 F1 | 	sub	objptr, ##35104
21090     F2 FA 01 F6 | 	mov	result1, objptr
21094     00 28 04 FF 
21098     00 FA 45 F5 | 	or	result1, ##139460608
2109c     44 00 00 FF 
210a0     24 E5 05 F1 | 	add	objptr, ##35108
210a4     F2 FA 61 FC | 	wrlong	result1, objptr
210a8     44 00 00 FF 
210ac     24 E5 85 F1 | 	sub	objptr, ##35108
210b0     F2 FA 01 F6 | 	mov	result1, objptr
210b4     00 30 04 FF 
210b8     00 FA 45 F5 | 	or	result1, ##140509184
210bc     44 00 00 FF 
210c0     18 E5 05 F1 | 	add	objptr, ##35096
210c4     F2 FA 61 FC | 	wrlong	result1, objptr
210c8     44 00 00 FF 
210cc     18 E5 85 F1 | 	sub	objptr, ##35096
210d0     F2 FA 01 F6 | 	mov	result1, objptr
210d4     00 38 04 FF 
210d8     00 FA 45 F5 | 	or	result1, ##141557760
210dc     44 00 00 FF 
210e0     28 E5 05 F1 | 	add	objptr, ##35112
210e4     F2 FA 61 FC | 	wrlong	result1, objptr
210e8     44 00 00 FF 
210ec     28 E5 85 F1 | 	sub	objptr, ##35112
210f0     F2 FA 01 F6 | 	mov	result1, objptr
210f4     00 40 04 FF 
210f8     00 FA 45 F5 | 	or	result1, ##142606336
210fc     44 00 00 FF 
21100     5C E5 05 F1 | 	add	objptr, ##35164
21104     F2 FA 61 FC | 	wrlong	result1, objptr
21108     44 00 00 FF 
2110c     5C E5 85 F1 | 	sub	objptr, ##35164
21110     F2 FA 01 F6 | 	mov	result1, objptr
21114     00 48 04 FF 
21118     00 FA 45 F5 | 	or	result1, ##143654912
2111c     44 00 00 FF 
21120     54 E5 05 F1 | 	add	objptr, ##35156
21124     F2 FA 61 FC | 	wrlong	result1, objptr
21128     44 00 00 FF 
2112c     54 E5 85 F1 | 	sub	objptr, ##35156
21130     F2 FA 01 F6 | 	mov	result1, objptr
21134     00 50 04 FF 
21138     00 FA 45 F5 | 	or	result1, ##144703488
2113c     44 00 00 FF 
21140     2C E5 05 F1 | 	add	objptr, ##35116
21144     F2 FA 61 FC | 	wrlong	result1, objptr
21148     44 00 00 FF 
2114c     2C E5 85 F1 | 	sub	objptr, ##35116
21150     F2 FA 01 F6 | 	mov	result1, objptr
21154     00 58 04 FF 
21158     00 FA 45 F5 | 	or	result1, ##145752064
2115c     44 00 00 FF 
21160     30 E5 05 F1 | 	add	objptr, ##35120
21164     F2 FA 61 FC | 	wrlong	result1, objptr
21168     44 00 00 FF 
2116c     30 E5 85 F1 | 	sub	objptr, ##35120
21170     F2 FA 01 F6 | 	mov	result1, objptr
21174     00 60 04 FF 
21178     00 FA 45 F5 | 	or	result1, ##146800640
2117c     44 00 00 FF 
21180     4C E5 05 F1 | 	add	objptr, ##35148
21184     F2 FA 61 FC | 	wrlong	result1, objptr
21188     44 00 00 FF 
2118c     4C E5 85 F1 | 	sub	objptr, ##35148
21190     F2 FA 01 F6 | 	mov	result1, objptr
21194     00 68 04 FF 
21198     00 FA 45 F5 | 	or	result1, ##147849216
2119c     44 00 00 FF 
211a0     50 E5 05 F1 | 	add	objptr, ##35152
211a4     F2 FA 61 FC | 	wrlong	result1, objptr
211a8     44 00 00 FF 
211ac     50 E5 85 F1 | 	sub	objptr, ##35152
211b0     F2 FA 01 F6 | 	mov	result1, objptr
211b4     00 70 04 FF 
211b8     00 FA 45 F5 | 	or	result1, ##148897792
211bc     44 00 00 FF 
211c0     6C E5 05 F1 | 	add	objptr, ##35180
211c4     F2 FA 61 FC | 	wrlong	result1, objptr
211c8     44 00 00 FF 
211cc     6C E5 85 F1 | 	sub	objptr, ##35180
211d0     F2 FA 01 F6 | 	mov	result1, objptr
211d4     00 78 04 FF 
211d8     00 FA 45 F5 | 	or	result1, ##149946368
211dc     44 00 00 FF 
211e0     68 E5 05 F1 | 	add	objptr, ##35176
211e4     F2 FA 61 FC | 	wrlong	result1, objptr
211e8     44 00 00 FF 
211ec     68 E5 85 F1 | 	sub	objptr, ##35176
211f0     F2 FA 01 F6 | 	mov	result1, objptr
211f4     00 80 04 FF 
211f8     00 FA 45 F5 | 	or	result1, ##150994944
211fc     44 00 00 FF 
21200     78 E5 05 F1 | 	add	objptr, ##35192
21204     F2 FA 61 FC | 	wrlong	result1, objptr
21208     44 00 00 FF 
2120c     78 E5 85 F1 | 	sub	objptr, ##35192
21210     F2 FA 01 F6 | 	mov	result1, objptr
21214     00 88 04 FF 
21218     00 FA 45 F5 | 	or	result1, ##152043520
2121c     44 00 00 FF 
21220     44 E5 05 F1 | 	add	objptr, ##35140
21224     F2 FA 61 FC | 	wrlong	result1, objptr
21228     44 00 00 FF 
2122c     44 E5 85 F1 | 	sub	objptr, ##35140
21230     F2 FA 01 F6 | 	mov	result1, objptr
21234     00 90 04 FF 
21238     00 FA 45 F5 | 	or	result1, ##153092096
2123c     44 00 00 FF 
21240     74 E5 05 F1 | 	add	objptr, ##35188
21244     F2 FA 61 FC | 	wrlong	result1, objptr
21248     44 00 00 FF 
2124c     74 E5 85 F1 | 	sub	objptr, ##35188
21250     F2 FA 01 F6 | 	mov	result1, objptr
21254     00 98 04 FF 
21258     00 FA 45 F5 | 	or	result1, ##154140672
2125c     44 00 00 FF 
21260     64 E5 05 F1 | 	add	objptr, ##35172
21264     F2 FA 61 FC | 	wrlong	result1, objptr
21268     44 00 00 FF 
2126c     64 E5 85 F1 | 	sub	objptr, ##35172
21270     F2 FA 01 F6 | 	mov	result1, objptr
21274     00 A0 04 FF 
21278     00 FA 45 F5 | 	or	result1, ##155189248
2127c     43 00 00 FF 
21280     14 E5 05 F1 | 	add	objptr, ##34580
21284     F2 FA 61 FC | 	wrlong	result1, objptr
21288     43 00 00 FF 
2128c     14 E5 85 F1 | 	sub	objptr, ##34580
21290     F2 FA 01 F6 | 	mov	result1, objptr
21294     00 A8 04 FF 
21298     00 FA 45 F5 | 	or	result1, ##156237824
2129c     44 00 00 FF 
212a0     34 E5 05 F1 | 	add	objptr, ##35124
212a4     F2 FA 61 FC | 	wrlong	result1, objptr
212a8     44 00 00 FF 
212ac     34 E5 85 F1 | 	sub	objptr, ##35124
212b0     F2 FA 01 F6 | 	mov	result1, objptr
212b4     00 08 01 FF 
212b8     00 FA 45 F5 | 	or	result1, ##34603008
212bc     44 00 00 FF 
212c0     3C E5 05 F1 | 	add	objptr, ##35132
212c4     F2 FA 61 FC | 	wrlong	result1, objptr
212c8     44 00 00 FF 
212cc     3C E5 85 F1 | 	sub	objptr, ##35132
212d0     F2 FA 01 F6 | 	mov	result1, objptr
212d4     00 B0 04 FF 
212d8     00 FA 45 F5 | 	or	result1, ##157286400
212dc     44 00 00 FF 
212e0     38 E5 05 F1 | 	add	objptr, ##35128
212e4     F2 FA 61 FC | 	wrlong	result1, objptr
212e8     44 00 00 FF 
212ec     38 E5 85 F1 | 	sub	objptr, ##35128
212f0     F2 FA 01 F6 | 	mov	result1, objptr
212f4     00 B8 04 FF 
212f8     00 FA 45 F5 | 	or	result1, ##158334976
212fc     44 00 00 FF 
21300     7C E5 05 F1 | 	add	objptr, ##35196
21304     F2 FA 61 FC | 	wrlong	result1, objptr
21308     44 00 00 FF 
2130c     7C E5 85 F1 | 	sub	objptr, ##35196
21310     F2 FA 01 F6 | 	mov	result1, objptr
21314     00 C0 04 FF 
21318     00 FA 45 F5 | 	or	result1, ##159383552
2131c     44 00 00 FF 
21320     80 E5 05 F1 | 	add	objptr, ##35200
21324     F2 FA 61 FC | 	wrlong	result1, objptr
21328     44 00 00 FF 
2132c     80 E5 85 F1 | 	sub	objptr, ##35200
21330     F2 FA 01 F6 | 	mov	result1, objptr
21334     00 C8 04 FF 
21338     00 FA 45 F5 | 	or	result1, ##160432128
2133c     44 00 00 FF 
21340     84 E5 05 F1 | 	add	objptr, ##35204
21344     F2 FA 61 FC | 	wrlong	result1, objptr
21348     44 00 00 FF 
2134c     84 E5 85 F1 | 	sub	objptr, ##35204
21350     F2 FA 01 F6 | 	mov	result1, objptr
21354     00 D0 04 FF 
21358     00 FA 45 F5 | 	or	result1, ##161480704
2135c     44 00 00 FF 
21360     88 E5 05 F1 | 	add	objptr, ##35208
21364     F2 FA 61 FC | 	wrlong	result1, objptr
21368     44 00 00 FF 
2136c     88 E5 85 F1 | 	sub	objptr, ##35208
21370     F2 FA 01 F6 | 	mov	result1, objptr
21374     00 D8 04 FF 
21378     00 FA 45 F5 | 	or	result1, ##162529280
2137c     44 00 00 FF 
21380     8C E5 05 F1 | 	add	objptr, ##35212
21384     F2 FA 61 FC | 	wrlong	result1, objptr
21388     44 00 00 FF 
2138c     8C E5 85 F1 | 	sub	objptr, ##35212
21390                 | _init_commands_ret
21390     2D 00 64 FD | 	ret
21394                 | 
21394                 | ' 
21394                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
21394                 | ' 
21394                 | ' sub init_audio
21394                 | _init_audio
21394     06 4A 05 F6 | 	mov	COUNT_, #6
21398     A8 00 A0 FD | 	call	#pushregs_
2139c     00 C0 1F FF 
213a0     00 26 06 F6 | 	mov	local01, ##1065353216
213a4                 | ' 
213a4                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
213a4     00 28 06 F6 | 	mov	local02, #0
213a8                 | LR__2600
213a8     14 2B 02 F6 | 	mov	local03, local02
213ac     01 2A 66 F0 | 	shl	local03, #1
213b0     58 7F 23 FF 
213b4     00 2C 06 F6 | 	mov	local04, ##1191096320
213b8     14 13 52 F6 | 	abs	arg01, local02 wc
213bc     1F 2E C6 C9 |  if_b	decod	local05, #31
213c0     00 2E 06 36 |  if_ae	mov	local05, #0
213c4     34 70 B0 FD | 	call	#__system___float_fromuns
213c8     17 FB 61 F5 | 	xor	result1, local05
213cc     FD 12 02 F6 | 	mov	arg01, result1
213d0     87 24 20 FF 
213d4     DB 15 06 F6 | 	mov	arg02, ##1078530011
213d8     24 74 B0 FD | 	call	#__system___float_mul
213dc     FD 12 02 F6 | 	mov	arg01, result1
213e0     00 00 22 FF 
213e4     00 14 06 F6 | 	mov	arg02, ##1140850688
213e8     18 76 B0 FD | 	call	#__system___float_div
213ec     FD 12 02 F6 | 	mov	arg01, result1
213f0     6C 7D B0 FD | 	call	#__system____builtin_sinf
213f4     FD 14 02 F6 | 	mov	arg02, result1
213f8     16 13 02 F6 | 	mov	arg01, local04
213fc     00 74 B0 FD | 	call	#__system___float_mul
21400     FD 12 02 F6 | 	mov	arg01, result1
21404     01 14 06 F6 | 	mov	arg02, #1
21408     BC 78 B0 FD | 	call	#__system___float_tointeger
2140c     FD 14 02 F6 | 	mov	arg02, result1
21410     15 13 02 F6 | 	mov	arg01, local03
21414     6C 0D B0 FD | 	call	#_psdpoke
21418     01 28 06 F1 | 	add	local02, #1
2141c     02 00 00 FF 
21420     00 28 56 F2 | 	cmps	local02, ##1024 wc
21424     80 FF 9F CD |  if_b	jmp	#LR__2600
21428                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
21428     00 28 06 F6 | 	mov	local02, #0
2142c                 | LR__2601
2142c     14 15 02 F6 | 	mov	arg02, local02
21430     01 14 66 F0 | 	shl	arg02, #1
21434     0B 12 C6 F9 | 	decod	arg01, #11
21438     0A 13 02 F1 | 	add	arg01, arg02
2143c     14 2D 02 F6 | 	mov	local04, local02
21440     07 2C 66 F0 | 	shl	local04, #7
21444     14 2D 82 F1 | 	sub	local04, local02
21448     C0 FF 7F FF 
2144c     00 15 06 F6 | 	mov	arg02, ##-32512
21450     16 15 02 F1 | 	add	arg02, local04
21454     2C 0D B0 FD | 	call	#_psdpoke
21458     09 2C C6 F9 | 	decod	local04, #9
2145c     14 2D 02 F1 | 	add	local04, local02
21460     01 2C 66 F0 | 	shl	local04, #1
21464     0B 12 C6 F9 | 	decod	arg01, #11
21468     16 13 02 F1 | 	add	arg01, local04
2146c     14 2F 02 F6 | 	mov	local05, local02
21470     07 2E 66 F0 | 	shl	local05, #7
21474     14 2F 82 F1 | 	sub	local05, local02
21478     3F 00 00 FF 
2147c     00 15 06 F6 | 	mov	arg02, ##32512
21480     17 15 82 F1 | 	sub	arg02, local05
21484     FC 0C B0 FD | 	call	#_psdpoke
21488     01 28 06 F1 | 	add	local02, #1
2148c     01 00 00 FF 
21490     00 28 56 F2 | 	cmps	local02, ##512 wc
21494     94 FF 9F CD |  if_b	jmp	#LR__2601
21498                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
21498     00 28 06 F6 | 	mov	local02, #0
2149c                 | LR__2602
2149c     14 2F 02 F6 | 	mov	local05, local02
214a0     01 2E 66 F0 | 	shl	local05, #1
214a4     0C 12 C6 F9 | 	decod	arg01, #12
214a8     17 13 02 F1 | 	add	arg01, local05
214ac     14 2F 02 F6 | 	mov	local05, local02
214b0     06 2E 66 F0 | 	shl	local05, #6
214b4     14 2F 82 F1 | 	sub	local05, local02
214b8     C1 FF 7F FF 
214bc     00 14 06 F6 | 	mov	arg02, ##-32256
214c0     17 15 02 F1 | 	add	arg02, local05
214c4     BC 0C B0 FD | 	call	#_psdpoke
214c8     01 28 06 F1 | 	add	local02, #1
214cc     02 00 00 FF 
214d0     00 28 56 F2 | 	cmps	local02, ##1024 wc
214d4     C4 FF 9F CD |  if_b	jmp	#LR__2602
214d8                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
214d8     00 28 06 F6 | 	mov	local02, #0
214dc                 | LR__2603
214dc     14 2F 02 F6 | 	mov	local05, local02
214e0     01 2E 66 F0 | 	shl	local05, #1
214e4     0C 00 00 FF 
214e8     00 12 06 F6 | 	mov	arg01, ##6144
214ec     17 13 02 F1 | 	add	arg01, local05
214f0     C0 FF 7F FF 
214f4     A8 14 06 F6 | 	mov	arg02, ##-32600
214f8     88 0C B0 FD | 	call	#_psdpoke
214fc     01 28 06 F1 | 	add	local02, #1
21500     80 28 56 F2 | 	cmps	local02, #128 wc
21504     D4 FF 9F CD |  if_b	jmp	#LR__2603
21508     80 28 06 F6 | 	mov	local02, #128
2150c                 | LR__2604
2150c     14 2F 02 F6 | 	mov	local05, local02
21510     01 2E 66 F0 | 	shl	local05, #1
21514     0C 00 00 FF 
21518     00 12 06 F6 | 	mov	arg01, ##6144
2151c     17 13 02 F1 | 	add	arg01, local05
21520     3F 00 00 FF 
21524     58 15 06 F6 | 	mov	arg02, ##32600
21528     58 0C B0 FD | 	call	#_psdpoke
2152c     01 28 06 F1 | 	add	local02, #1
21530     02 00 00 FF 
21534     00 28 16 F2 | 	cmp	local02, ##1024 wc
21538     D0 FF 9F CD |  if_b	jmp	#LR__2604
2153c                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
2153c     00 28 06 F6 | 	mov	local02, #0
21540                 | LR__2605
21540     14 2F 02 F6 | 	mov	local05, local02
21544     01 2E 66 F0 | 	shl	local05, #1
21548     0D 12 C6 F9 | 	decod	arg01, #13
2154c     17 13 02 F1 | 	add	arg01, local05
21550     C0 FF 7F FF 
21554     A8 14 06 F6 | 	mov	arg02, ##-32600
21558     28 0C B0 FD | 	call	#_psdpoke
2155c     01 28 06 F1 | 	add	local02, #1
21560     01 00 00 FF 
21564     00 28 56 F2 | 	cmps	local02, ##512 wc
21568     D4 FF 9F CD |  if_b	jmp	#LR__2605
2156c     09 28 C6 F9 | 	decod	local02, #9
21570                 | LR__2606
21570     14 2F 02 F6 | 	mov	local05, local02
21574     01 2E 66 F0 | 	shl	local05, #1
21578     0D 12 C6 F9 | 	decod	arg01, #13
2157c     17 13 02 F1 | 	add	arg01, local05
21580     3F 00 00 FF 
21584     58 15 06 F6 | 	mov	arg02, ##32600
21588     F8 0B B0 FD | 	call	#_psdpoke
2158c     01 28 06 F1 | 	add	local02, #1
21590     02 00 00 FF 
21594     00 28 16 F2 | 	cmp	local02, ##1024 wc
21598     D4 FF 9F CD |  if_b	jmp	#LR__2606
2159c                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
2159c     00 28 06 F6 | 	mov	local02, #0
215a0                 | LR__2607
215a0     14 2F 02 F6 | 	mov	local05, local02
215a4     01 2E 66 F0 | 	shl	local05, #1
215a8     14 00 00 FF 
215ac     00 12 06 F6 | 	mov	arg01, ##10240
215b0     17 13 02 F1 | 	add	arg01, local05
215b4     C0 FF 7F FF 
215b8     A8 14 06 F6 | 	mov	arg02, ##-32600
215bc     C4 0B B0 FD | 	call	#_psdpoke
215c0     01 28 06 F1 | 	add	local02, #1
215c4     00 29 56 F2 | 	cmps	local02, #256 wc
215c8     D4 FF 9F CD |  if_b	jmp	#LR__2607
215cc     00 29 06 F6 | 	mov	local02, #256
215d0                 | LR__2608
215d0     14 2F 02 F6 | 	mov	local05, local02
215d4     01 2E 66 F0 | 	shl	local05, #1
215d8     14 00 00 FF 
215dc     00 12 06 F6 | 	mov	arg01, ##10240
215e0     17 13 02 F1 | 	add	arg01, local05
215e4     3F 00 00 FF 
215e8     58 15 06 F6 | 	mov	arg02, ##32600
215ec     94 0B B0 FD | 	call	#_psdpoke
215f0     01 28 06 F1 | 	add	local02, #1
215f4     02 00 00 FF 
215f8     00 28 16 F2 | 	cmp	local02, ##1024 wc
215fc     D0 FF 9F CD |  if_b	jmp	#LR__2608
21600                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
21600     18 00 00 FF 
21604     00 28 06 F6 | 	mov	local02, ##12288
21608                 | LR__2609
21608     14 13 02 F6 | 	mov	arg01, local02
2160c     00 14 06 F6 | 	mov	arg02, #0
21610     28 0B B0 FD | 	call	#_pslpoke
21614     04 28 06 F1 | 	add	local02, #4
21618     77 00 00 FF 
2161c     FD 29 56 F2 | 	cmps	local02, ##61437 wc
21620     E4 FF 9F CD |  if_b	jmp	#LR__2609
21624                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
21624     00 28 06 F6 | 	mov	local02, #0
21628                 | LR__2610
21628     14 2F 02 F6 | 	mov	local05, local02
2162c     01 2E 66 F0 | 	shl	local05, #1
21630     78 00 00 FF 
21634     00 2A 06 F6 | 	mov	local03, ##61440
21638     17 2B 02 F1 | 	add	local03, local05
2163c     12 00 00 FF 
21640     BA EA 05 F1 | 	add	ptr__dat__, ##9402
21644     F5 12 02 F6 | 	mov	arg01, ptr__dat__
21648     12 00 00 FF 
2164c     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
21650     10 12 06 F1 | 	add	arg01, #16
21654     14 15 02 F6 | 	mov	arg02, local02
21658     01 14 66 F0 | 	shl	arg02, #1
2165c     0A 13 02 F1 | 	add	arg01, arg02
21660     09 15 E2 FA | 	rdword	arg02, arg01
21664     15 13 02 F6 | 	mov	arg01, local03
21668     18 0B B0 FD | 	call	#_psdpoke
2166c     01 28 06 F1 | 	add	local02, #1
21670     02 00 00 FF 
21674     00 28 56 F2 | 	cmps	local02, ##1024 wc
21678     AC FF 9F CD |  if_b	jmp	#LR__2610
2167c                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
2167c     00 28 06 F6 | 	mov	local02, #0
21680                 | LR__2611
21680     14 2F 02 F6 | 	mov	local05, local02
21684     01 2E 66 F0 | 	shl	local05, #1
21688     7C 00 00 FF 
2168c     00 2A 06 F6 | 	mov	local03, ##63488
21690     17 2B 02 F1 | 	add	local03, local05
21694     0E 00 00 FF 
21698     AA EA 05 F1 | 	add	ptr__dat__, ##7338
2169c     F5 12 02 F6 | 	mov	arg01, ptr__dat__
216a0     0E 00 00 FF 
216a4     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
216a8     10 12 06 F1 | 	add	arg01, #16
216ac     14 15 02 F6 | 	mov	arg02, local02
216b0     01 14 66 F0 | 	shl	arg02, #1
216b4     0A 13 02 F1 | 	add	arg01, arg02
216b8     09 15 E2 FA | 	rdword	arg02, arg01
216bc     15 13 02 F6 | 	mov	arg01, local03
216c0     C0 0A B0 FD | 	call	#_psdpoke
216c4     01 28 06 F1 | 	add	local02, #1
216c8     02 00 00 FF 
216cc     00 28 56 F2 | 	cmps	local02, ##1024 wc
216d0     AC FF 9F CD |  if_b	jmp	#LR__2611
216d4                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
216d4     00 28 06 F6 | 	mov	local02, #0
216d8     0C 00 00 FF 
216dc     D8 E4 05 F1 | 	add	objptr, ##6360
216e0     97 18 48 FB | 	callpa	#(@LR__2613-@LR__2612)>>2,fcache_load_ptr_
216e4                 | LR__2612
216e4     14 2F 02 F6 | 	mov	local05, local02
216e8     01 2E 66 F0 | 	shl	local05, #1
216ec     F2 2E 02 F1 | 	add	local05, objptr
216f0     14 2B 02 F6 | 	mov	local03, local02
216f4     08 2A 66 F0 | 	shl	local03, #8
216f8     7F 00 00 FF 
216fc     00 31 06 F6 | 	mov	local06, ##65280
21700     15 31 82 F1 | 	sub	local06, local03
21704     17 31 52 FC | 	wrword	local06, local05
21708     01 28 06 F1 | 	add	local02, #1
2170c     00 29 56 F2 | 	cmps	local02, #256 wc
21710     D0 FF 9F CD |  if_b	jmp	#LR__2612
21714                 | LR__2613
21714     0C 00 00 FF 
21718     D8 E4 85 F1 | 	sub	objptr, ##6360
2171c                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
2171c     00 28 06 F6 | 	mov	local02, #0
21720                 | LR__2614
21720     14 2F 02 F6 | 	mov	local05, local02
21724     01 2E 66 F0 | 	shl	local05, #1
21728     0D 00 00 FF 
2172c     D8 E4 05 F1 | 	add	objptr, ##6872
21730     F2 2E 02 F1 | 	add	local05, objptr
21734     80 BF 23 FF 
21738     00 12 06 F6 | 	mov	arg01, ##1199505408
2173c     13 15 02 F6 | 	mov	arg02, local01
21740     0D 00 00 FF 
21744     D8 E4 85 F1 | 	sub	objptr, ##6872
21748     B4 70 B0 FD | 	call	#__system___float_mul
2174c     FD 12 02 F6 | 	mov	arg01, result1
21750     01 14 06 F6 | 	mov	arg02, #1
21754     70 75 B0 FD | 	call	#__system___float_tointeger
21758     17 FB 51 FC | 	wrword	result1, local05
2175c     13 13 02 F6 | 	mov	arg01, local01
21760     CC BC 1F FF 
21764     9A 15 06 F6 | 	mov	arg02, ##1064933786
21768     94 70 B0 FD | 	call	#__system___float_mul
2176c     FD 26 02 F6 | 	mov	local01, result1
21770     01 28 06 F1 | 	add	local02, #1
21774     00 29 56 F2 | 	cmps	local02, #256 wc
21778     A4 FF 9F CD |  if_b	jmp	#LR__2614
2177c     0E 00 00 FF 
21780     D6 E4 05 F1 | 	add	objptr, ##7382
21784     F2 00 58 FC | 	wrword	#0, objptr
21788                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
21788     00 28 06 F6 | 	mov	local02, #0
2178c     02 E4 05 F1 | 	add	objptr, #2
21790     97 10 48 FB | 	callpa	#(@LR__2616-@LR__2615)>>2,fcache_load_ptr_
21794                 | LR__2615
21794     14 2F 02 F6 | 	mov	local05, local02
21798     01 2E 66 F0 | 	shl	local05, #1
2179c     F2 2E 02 F1 | 	add	local05, objptr
217a0     7F 00 80 FF 
217a4     17 01 5A FC | 	wrword	##65280, local05
217a8     01 28 06 F1 | 	add	local02, #1
217ac     FF 28 56 F2 | 	cmps	local02, #255 wc
217b0     E0 FF 9F CD |  if_b	jmp	#LR__2615
217b4                 | LR__2616
217b4     FE E5 05 F1 | 	add	objptr, #510
217b8     F2 00 58 FC | 	wrword	#0, objptr
217bc                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
217bc     00 28 06 F6 | 	mov	local02, #0
217c0     02 E4 05 F1 | 	add	objptr, #2
217c4     97 52 48 FB | 	callpa	#(@LR__2621-@LR__2617)>>2,fcache_load_ptr_
217c8                 | LR__2617
217c8     14 2F 02 F6 | 	mov	local05, local02
217cc     01 2E 66 F0 | 	shl	local05, #1
217d0     F2 2E 02 F1 | 	add	local05, objptr
217d4     14 31 02 F6 | 	mov	local06, local02
217d8     0C 30 66 F0 | 	shl	local06, #12
217dc     17 31 52 FC | 	wrword	local06, local05
217e0     01 28 06 F1 | 	add	local02, #1
217e4     10 28 56 F2 | 	cmps	local02, #16 wc
217e8     DC FF 9F CD |  if_b	jmp	#LR__2617
217ec                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
217ec     10 28 06 F6 | 	mov	local02, #16
217f0                 | LR__2618
217f0     14 2F 02 F6 | 	mov	local05, local02
217f4     01 2E 66 F0 | 	shl	local05, #1
217f8     F2 2E 02 F1 | 	add	local05, objptr
217fc     7F 00 80 FF 
21800     17 01 5A FC | 	wrword	##65280, local05
21804     01 28 06 F1 | 	add	local02, #1
21808     F0 28 16 F2 | 	cmp	local02, #240 wc
2180c     E0 FF 9F CD |  if_b	jmp	#LR__2618
21810                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
21810     F0 28 06 F6 | 	mov	local02, #240
21814                 | LR__2619
21814     14 2F 02 F6 | 	mov	local05, local02
21818     01 2E 66 F0 | 	shl	local05, #1
2181c     F2 2E 02 F1 | 	add	local05, objptr
21820     FF 2A 06 F6 | 	mov	local03, #255
21824     14 2B 82 F1 | 	sub	local03, local02
21828     0C 2A 66 F0 | 	shl	local03, #12
2182c     17 2B 52 FC | 	wrword	local03, local05
21830     01 28 06 F1 | 	add	local02, #1
21834     00 29 16 F2 | 	cmp	local02, #256 wc
21838     D8 FF 9F CD |  if_b	jmp	#LR__2619
2183c                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
2183c     00 28 06 F6 | 	mov	local02, #0
21840     01 00 00 FF 
21844     00 E4 05 F1 | 	add	objptr, ##512
21848                 | LR__2620
21848     14 2F 02 F6 | 	mov	local05, local02
2184c     01 2E 66 F0 | 	shl	local05, #1
21850     F2 2E 02 F1 | 	add	local05, objptr
21854     14 31 02 F6 | 	mov	local06, local02
21858     08 30 66 F0 | 	shl	local06, #8
2185c     17 31 52 FC | 	wrword	local06, local05
21860     01 28 06 F1 | 	add	local02, #1
21864     00 29 56 F2 | 	cmps	local02, #256 wc
21868     DC FF 9F CD |  if_b	jmp	#LR__2620
2186c                 | LR__2621
2186c     FE E5 05 F1 | 	add	objptr, #510
21870     F2 00 58 FC | 	wrword	#0, objptr
21874                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
21874     00 28 06 F6 | 	mov	local02, #0
21878     02 E4 05 F1 | 	add	objptr, #2
2187c     97 6A 48 FB | 	callpa	#(@LR__2626-@LR__2622)>>2,fcache_load_ptr_
21880                 | LR__2622
21880     14 2F 02 F6 | 	mov	local05, local02
21884     01 2E 66 F0 | 	shl	local05, #1
21888     F2 2E 02 F1 | 	add	local05, objptr
2188c     14 31 02 F6 | 	mov	local06, local02
21890     04 30 66 F0 | 	shl	local06, #4
21894     14 31 02 F1 | 	add	local06, local02
21898     04 30 66 F0 | 	shl	local06, #4
2189c     17 31 52 FC | 	wrword	local06, local05
218a0     01 28 06 F1 | 	add	local02, #1
218a4     F0 28 56 F2 | 	cmps	local02, #240 wc
218a8     D4 FF 9F CD |  if_b	jmp	#LR__2622
218ac     F0 28 06 F6 | 	mov	local02, #240
218b0                 | LR__2623
218b0     14 2F 02 F6 | 	mov	local05, local02
218b4     01 2E 66 F0 | 	shl	local05, #1
218b8     F2 2E 02 F1 | 	add	local05, objptr
218bc     FF 2A 06 F6 | 	mov	local03, #255
218c0     14 2B 82 F1 | 	sub	local03, local02
218c4     0C 2A 66 F0 | 	shl	local03, #12
218c8     17 2B 52 FC | 	wrword	local03, local05
218cc     01 28 06 F1 | 	add	local02, #1
218d0     00 29 16 F2 | 	cmp	local02, #256 wc
218d4     D8 FF 9F CD |  if_b	jmp	#LR__2623
218d8                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
218d8     00 28 06 F6 | 	mov	local02, #0
218dc     01 00 00 FF 
218e0     00 E4 05 F1 | 	add	objptr, ##512
218e4                 | LR__2624
218e4     14 2F 02 F6 | 	mov	local05, local02
218e8     01 2E 66 F0 | 	shl	local05, #1
218ec     F2 2E 02 F1 | 	add	local05, objptr
218f0     14 31 02 F6 | 	mov	local06, local02
218f4     09 30 66 F0 | 	shl	local06, #9
218f8     17 31 52 FC | 	wrword	local06, local05
218fc     FF 2E 06 F6 | 	mov	local05, #255
21900     14 2F 82 F1 | 	sub	local05, local02
21904     01 2E 66 F0 | 	shl	local05, #1
21908     F2 2E 02 F1 | 	add	local05, objptr
2190c     14 31 02 F6 | 	mov	local06, local02
21910     09 30 66 F0 | 	shl	local06, #9
21914     17 31 52 FC | 	wrword	local06, local05
21918     01 28 06 F1 | 	add	local02, #1
2191c     80 28 56 F2 | 	cmps	local02, #128 wc
21920     C0 FF 9F CD |  if_b	jmp	#LR__2624
21924                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
21924     00 28 06 F6 | 	mov	local02, #0
21928     01 00 00 FF 
2192c     00 E4 05 F1 | 	add	objptr, ##512
21930                 | LR__2625
21930     14 2F 02 F6 | 	mov	local05, local02
21934     01 2E 66 F0 | 	shl	local05, #1
21938     F2 2E 02 F1 | 	add	local05, objptr
2193c     14 31 02 F6 | 	mov	local06, local02
21940     0D 30 66 F0 | 	shl	local06, #13
21944     17 31 52 FC | 	wrword	local06, local05
21948     01 28 06 F1 | 	add	local02, #1
2194c     08 28 56 F2 | 	cmps	local02, #8 wc
21950     DC FF 9F CD |  if_b	jmp	#LR__2625
21954                 | LR__2626
21954                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
21954     08 28 06 F6 | 	mov	local02, #8
21958     97 42 48 FB | 	callpa	#(@LR__2630-@LR__2627)>>2,fcache_load_ptr_
2195c                 | LR__2627
2195c     14 2F 02 F6 | 	mov	local05, local02
21960     01 2E 66 F0 | 	shl	local05, #1
21964     F2 2E 02 F1 | 	add	local05, objptr
21968     14 27 02 F6 | 	mov	local01, local02
2196c     08 26 86 F1 | 	sub	local01, #8
21970     0B 26 66 F0 | 	shl	local01, #11
21974     7F 00 00 FF 
21978     00 31 06 F6 | 	mov	local06, ##65280
2197c     13 31 82 F1 | 	sub	local06, local01
21980     17 31 52 FC | 	wrword	local06, local05
21984     01 28 06 F1 | 	add	local02, #1
21988     18 28 16 F2 | 	cmp	local02, #24 wc
2198c     CC FF 9F CD |  if_b	jmp	#LR__2627
21990                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
21990     18 28 06 F6 | 	mov	local02, #24
21994                 | LR__2628
21994     14 2F 02 F6 | 	mov	local05, local02
21998     01 2E 66 F0 | 	shl	local05, #1
2199c     F2 2E 02 F1 | 	add	local05, objptr
219a0     40 00 80 FF 
219a4     17 01 58 FC | 	wrword	##32768, local05
219a8     01 28 06 F1 | 	add	local02, #1
219ac     81 28 16 F2 | 	cmp	local02, #129 wc
219b0     E0 FF 9F CD |  if_b	jmp	#LR__2628
219b4                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
219b4     81 28 06 F6 | 	mov	local02, #129
219b8                 | LR__2629
219b8     14 2F 02 F6 | 	mov	local05, local02
219bc     01 2E 66 F0 | 	shl	local05, #1
219c0     F2 2E 02 F1 | 	add	local05, objptr
219c4     FF 2A 06 F6 | 	mov	local03, #255
219c8     14 2B 82 F1 | 	sub	local03, local02
219cc     08 2A 66 F0 | 	shl	local03, #8
219d0     17 2B 52 FC | 	wrword	local03, local05
219d4     01 28 06 F1 | 	add	local02, #1
219d8     00 29 16 F2 | 	cmp	local02, #256 wc
219dc     D8 FF 9F CD |  if_b	jmp	#LR__2629
219e0                 | LR__2630
219e0     3E 00 00 FF 
219e4     96 E5 05 F1 | 	add	objptr, ##32150
219e8     F2 00 59 FC | 	wrword	#128, objptr
219ec     52 00 00 FF 
219f0     6E E4 85 F1 | 	sub	objptr, ##42094
219f4                 | ' for i=0 to 7
219f4     00 28 06 F6 | 	mov	local02, #0
219f8     97 8E 48 FB | 	callpa	#(@LR__2632-@LR__2631)>>2,fcache_load_ptr_
219fc                 | LR__2631
219fc     14 2F 02 F6 | 	mov	local05, local02
21a00     01 2E 66 F0 | 	shl	local05, #1
21a04     14 2F 02 F1 | 	add	local05, local02
21a08     03 2E 66 F0 | 	shl	local05, #3
21a0c     14 00 00 FF 
21a10     38 E5 05 F1 | 	add	objptr, ##10552
21a14     F2 2E 02 F1 | 	add	local05, objptr
21a18     00 EE A1 FF 
21a1c     17 01 68 FC | 	wrlong	##1138491392, local05
21a20     14 2F 02 F6 | 	mov	local05, local02
21a24     01 2E 66 F0 | 	shl	local05, #1
21a28     14 2F 02 F1 | 	add	local05, local02
21a2c     03 2E 66 F0 | 	shl	local05, #3
21a30     F2 2E 02 F1 | 	add	local05, objptr
21a34     04 2E 06 F1 | 	add	local05, #4
21a38     17 29 42 FC | 	wrbyte	local02, local05
21a3c     14 2F 02 F6 | 	mov	local05, local02
21a40     01 2E 66 F0 | 	shl	local05, #1
21a44     14 2F 02 F1 | 	add	local05, local02
21a48     03 2E 66 F0 | 	shl	local05, #3
21a4c     F2 2E 02 F1 | 	add	local05, objptr
21a50     05 2E 06 F1 | 	add	local05, #5
21a54     17 29 42 FC | 	wrbyte	local02, local05
21a58     14 2F 02 F6 | 	mov	local05, local02
21a5c     01 2E 66 F0 | 	shl	local05, #1
21a60     14 2F 02 F1 | 	add	local05, local02
21a64     03 2E 66 F0 | 	shl	local05, #3
21a68     F2 2E 02 F1 | 	add	local05, objptr
21a6c     06 2E 06 F1 | 	add	local05, #6
21a70     17 01 58 FC | 	wrword	#0, local05
21a74     14 2F 02 F6 | 	mov	local05, local02
21a78     01 2E 66 F0 | 	shl	local05, #1
21a7c     14 2F 02 F1 | 	add	local05, local02
21a80     03 2E 66 F0 | 	shl	local05, #3
21a84     F2 2E 02 F1 | 	add	local05, objptr
21a88     08 2E 06 F1 | 	add	local05, #8
21a8c     00 C0 9F FF 
21a90     17 01 68 FC | 	wrlong	##1065353216, local05
21a94     14 2F 02 F6 | 	mov	local05, local02
21a98     01 2E 66 F0 | 	shl	local05, #1
21a9c     14 2F 02 F1 | 	add	local05, local02
21aa0     03 2E 66 F0 | 	shl	local05, #3
21aa4     F2 2E 02 F1 | 	add	local05, objptr
21aa8     0C 2E 06 F1 | 	add	local05, #12
21aac     00 40 A0 FF 
21ab0     17 01 68 FC | 	wrlong	##1082130432, local05
21ab4     14 2F 02 F6 | 	mov	local05, local02
21ab8     01 2E 66 F0 | 	shl	local05, #1
21abc     14 2F 02 F1 | 	add	local05, local02
21ac0     03 2E 66 F0 | 	shl	local05, #3
21ac4     F2 2E 02 F1 | 	add	local05, objptr
21ac8     10 2E 06 F1 | 	add	local05, #16
21acc     17 01 68 FC | 	wrlong	#0, local05
21ad0     14 2F 02 F6 | 	mov	local05, local02
21ad4     01 2E 66 F0 | 	shl	local05, #1
21ad8     14 2F 02 F1 | 	add	local05, local02
21adc     03 2E 66 F0 | 	shl	local05, #3
21ae0     F2 2E 02 F1 | 	add	local05, objptr
21ae4     14 2E 06 F1 | 	add	local05, #20
21ae8     17 FF 59 FC | 	wrword	#255, local05
21aec     14 2F 02 F6 | 	mov	local05, local02
21af0     01 2E 66 F0 | 	shl	local05, #1
21af4     3D 00 00 FF 
21af8     28 E5 05 F1 | 	add	objptr, ##31528
21afc     F2 2E 02 F1 | 	add	local05, objptr
21b00     17 FF 59 FC | 	wrword	#255, local05
21b04     01 28 06 F1 | 	add	local02, #1
21b08     08 28 56 F2 | 	cmps	local02, #8 wc
21b0c     52 00 00 FF 
21b10     60 E4 85 F1 | 	sub	objptr, ##42080
21b14     E4 FE 9F CD |  if_b	jmp	#LR__2631
21b18                 | LR__2632
21b18     00 6E 20 FF 
21b1c     00 30 06 F6 | 	mov	local06, ##1088159744
21b20                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
21b20     03 2E 06 F6 | 	mov	local05, #3
21b24                 | LR__2633
21b24     18 13 02 F6 | 	mov	arg01, local06
21b28     CE C3 1F FF 
21b2c     7D 14 06 F6 | 	mov	arg02, ##1065852029
21b30     CC 6C B0 FD | 	call	#__system___float_mul
21b34     FD 30 02 F6 | 	mov	local06, result1
21b38     FA 2F 6E FB | 	djnz	local05, #LR__2633
21b3c     00 28 06 F6 | 	mov	local02, #0
21b40                 | LR__2634
21b40     14 2D 02 F6 | 	mov	local04, local02
21b44     02 2C 66 F0 | 	shl	local04, #2
21b48     14 00 00 FF 
21b4c     D8 E4 05 F1 | 	add	objptr, ##10456
21b50     F2 2C 02 F1 | 	add	local04, objptr
21b54     16 31 62 FC | 	wrlong	local06, local04
21b58     18 13 02 F6 | 	mov	arg01, local06
21b5c     CE C3 1F FF 
21b60     7D 14 06 F6 | 	mov	arg02, ##1065852029
21b64     14 00 00 FF 
21b68     D8 E4 85 F1 | 	sub	objptr, ##10456
21b6c     90 6C B0 FD | 	call	#__system___float_mul
21b70     FD 30 02 F6 | 	mov	local06, result1
21b74     01 28 06 F1 | 	add	local02, #1
21b78     0C 28 56 F2 | 	cmps	local02, #12 wc
21b7c     C0 FF 9F CD |  if_b	jmp	#LR__2634
21b80     14 00 00 FF 
21b84     08 E5 05 F1 | 	add	objptr, ##10504
21b88     F2 50 6B FC | 	wrlong	#424, objptr
21b8c     04 E4 05 F1 | 	add	objptr, #4
21b90     F2 20 6B FC | 	wrlong	#400, objptr
21b94     04 E4 05 F1 | 	add	objptr, #4
21b98     F2 F2 6A FC | 	wrlong	#377, objptr
21b9c     04 E4 05 F1 | 	add	objptr, #4
21ba0     F2 C8 6A FC | 	wrlong	#356, objptr
21ba4     04 E4 05 F1 | 	add	objptr, #4
21ba8     F2 A0 6A FC | 	wrlong	#336, objptr
21bac     04 E4 05 F1 | 	add	objptr, #4
21bb0     F2 7A 6A FC | 	wrlong	#317, objptr
21bb4     04 E4 05 F1 | 	add	objptr, #4
21bb8     F2 58 6A FC | 	wrlong	#300, objptr
21bbc     04 E4 05 F1 | 	add	objptr, #4
21bc0     F2 36 6A FC | 	wrlong	#283, objptr
21bc4     04 E4 05 F1 | 	add	objptr, #4
21bc8     F2 16 6A FC | 	wrlong	#267, objptr
21bcc     04 E4 05 F1 | 	add	objptr, #4
21bd0     F2 F8 69 FC | 	wrlong	#252, objptr
21bd4     04 E4 05 F1 | 	add	objptr, #4
21bd8     F2 DC 69 FC | 	wrlong	#238, objptr
21bdc     04 E4 05 F1 | 	add	objptr, #4
21be0     F2 C0 69 FC | 	wrlong	#224, objptr
21be4     3D 00 00 FF 
21be8     3A E5 05 F1 | 	add	objptr, ##31546
21bec     F2 00 59 FC | 	wrword	#128, objptr
21bf0     02 E4 85 F1 | 	sub	objptr, #2
21bf4     F2 00 59 FC | 	wrword	#128, objptr
21bf8     52 00 00 FF 
21bfc     6C E4 85 F1 | 	sub	objptr, ##42092
21c00     A7 F0 03 F6 | 	mov	ptra, fp
21c04     B2 00 A0 FD | 	call	#popregs_
21c08                 | _init_audio_ret
21c08     2D 00 64 FD | 	ret
21c0c                 | 
21c0c                 | ' 
21c0c                 | ' '------------------- Error messages
21c0c                 | ' 
21c0c                 | ' sub init_error_strings
21c0c                 | _init_error_strings
21c0c     AF 01 00 FF 
21c10     C4 01 06 F6 | 	mov	_var01, ##@LR__5945
21c14     45 00 00 FF 
21c18     7C E4 05 F1 | 	add	objptr, ##35452
21c1c     F2 00 62 FC | 	wrlong	_var01, objptr
21c20     AF 01 00 FF 
21c24     C5 01 06 F6 | 	mov	_var01, ##@LR__5946
21c28     04 E4 05 F1 | 	add	objptr, #4
21c2c     F2 00 62 FC | 	wrlong	_var01, objptr
21c30     AF 01 00 FF 
21c34     E9 01 06 F6 | 	mov	_var01, ##@LR__5947
21c38     04 E4 05 F1 | 	add	objptr, #4
21c3c     F2 00 62 FC | 	wrlong	_var01, objptr
21c40     B0 01 00 FF 
21c44     09 00 06 F6 | 	mov	_var01, ##@LR__5948
21c48     04 E4 05 F1 | 	add	objptr, #4
21c4c     F2 00 62 FC | 	wrlong	_var01, objptr
21c50     B0 01 00 FF 
21c54     22 00 06 F6 | 	mov	_var01, ##@LR__5949
21c58     04 E4 05 F1 | 	add	objptr, #4
21c5c     F2 00 62 FC | 	wrlong	_var01, objptr
21c60     B0 01 00 FF 
21c64     3D 00 06 F6 | 	mov	_var01, ##@LR__5950
21c68     04 E4 05 F1 | 	add	objptr, #4
21c6c     F2 00 62 FC | 	wrlong	_var01, objptr
21c70     B0 01 00 FF 
21c74     5E 00 06 F6 | 	mov	_var01, ##@LR__5951
21c78     04 E4 05 F1 | 	add	objptr, #4
21c7c     F2 00 62 FC | 	wrlong	_var01, objptr
21c80     B0 01 00 FF 
21c84     8B 00 06 F6 | 	mov	_var01, ##@LR__5952
21c88     04 E4 05 F1 | 	add	objptr, #4
21c8c     F2 00 62 FC | 	wrlong	_var01, objptr
21c90     B0 01 00 FF 
21c94     B5 00 06 F6 | 	mov	_var01, ##@LR__5953
21c98     04 E4 05 F1 | 	add	objptr, #4
21c9c     F2 00 62 FC | 	wrlong	_var01, objptr
21ca0     B0 01 00 FF 
21ca4     CD 00 06 F6 | 	mov	_var01, ##@LR__5954
21ca8     04 E4 05 F1 | 	add	objptr, #4
21cac     F2 00 62 FC | 	wrlong	_var01, objptr
21cb0     B0 01 00 FF 
21cb4     ED 00 06 F6 | 	mov	_var01, ##@LR__5955
21cb8     04 E4 05 F1 | 	add	objptr, #4
21cbc     F2 00 62 FC | 	wrlong	_var01, objptr
21cc0     B0 01 00 FF 
21cc4     03 01 06 F6 | 	mov	_var01, ##@LR__5956
21cc8     04 E4 05 F1 | 	add	objptr, #4
21ccc     F2 00 62 FC | 	wrlong	_var01, objptr
21cd0     B0 01 00 FF 
21cd4     20 01 06 F6 | 	mov	_var01, ##@LR__5957
21cd8     04 E4 05 F1 | 	add	objptr, #4
21cdc     F2 00 62 FC | 	wrlong	_var01, objptr
21ce0     B0 01 00 FF 
21ce4     43 01 06 F6 | 	mov	_var01, ##@LR__5958
21ce8     04 E4 05 F1 | 	add	objptr, #4
21cec     F2 00 62 FC | 	wrlong	_var01, objptr
21cf0     B0 01 00 FF 
21cf4     69 01 06 F6 | 	mov	_var01, ##@LR__5959
21cf8     04 E4 05 F1 | 	add	objptr, #4
21cfc     F2 00 62 FC | 	wrlong	_var01, objptr
21d00     B0 01 00 FF 
21d04     84 01 06 F6 | 	mov	_var01, ##@LR__5960
21d08     04 E4 05 F1 | 	add	objptr, #4
21d0c     F2 00 62 FC | 	wrlong	_var01, objptr
21d10     B0 01 00 FF 
21d14     94 01 06 F6 | 	mov	_var01, ##@LR__5961
21d18     04 E4 05 F1 | 	add	objptr, #4
21d1c     F2 00 62 FC | 	wrlong	_var01, objptr
21d20     B0 01 00 FF 
21d24     A3 01 06 F6 | 	mov	_var01, ##@LR__5962
21d28     04 E4 05 F1 | 	add	objptr, #4
21d2c     F2 00 62 FC | 	wrlong	_var01, objptr
21d30     B0 01 00 FF 
21d34     BD 01 06 F6 | 	mov	_var01, ##@LR__5963
21d38     04 E4 05 F1 | 	add	objptr, #4
21d3c     F2 00 62 FC | 	wrlong	_var01, objptr
21d40     B0 01 00 FF 
21d44     CE 01 06 F6 | 	mov	_var01, ##@LR__5964
21d48     04 E4 05 F1 | 	add	objptr, #4
21d4c     F2 00 62 FC | 	wrlong	_var01, objptr
21d50     B0 01 00 FF 
21d54     E5 01 06 F6 | 	mov	_var01, ##@LR__5965
21d58     04 E4 05 F1 | 	add	objptr, #4
21d5c     F2 00 62 FC | 	wrlong	_var01, objptr
21d60     B0 01 00 FF 
21d64     F8 01 06 F6 | 	mov	_var01, ##@LR__5966
21d68     04 E4 05 F1 | 	add	objptr, #4
21d6c     F2 00 62 FC | 	wrlong	_var01, objptr
21d70     B1 01 00 FF 
21d74     07 00 06 F6 | 	mov	_var01, ##@LR__5967
21d78     04 E4 05 F1 | 	add	objptr, #4
21d7c     F2 00 62 FC | 	wrlong	_var01, objptr
21d80     B1 01 00 FF 
21d84     23 00 06 F6 | 	mov	_var01, ##@LR__5968
21d88     04 E4 05 F1 | 	add	objptr, #4
21d8c     F2 00 62 FC | 	wrlong	_var01, objptr
21d90     B1 01 00 FF 
21d94     33 00 06 F6 | 	mov	_var01, ##@LR__5969
21d98     04 E4 05 F1 | 	add	objptr, #4
21d9c     F2 00 62 FC | 	wrlong	_var01, objptr
21da0     B1 01 00 FF 
21da4     43 00 06 F6 | 	mov	_var01, ##@LR__5970
21da8     04 E4 05 F1 | 	add	objptr, #4
21dac     F2 00 62 FC | 	wrlong	_var01, objptr
21db0     B1 01 00 FF 
21db4     76 00 06 F6 | 	mov	_var01, ##@LR__5971
21db8     04 E4 05 F1 | 	add	objptr, #4
21dbc     F2 00 62 FC | 	wrlong	_var01, objptr
21dc0     B1 01 00 FF 
21dc4     91 00 06 F6 | 	mov	_var01, ##@LR__5972
21dc8     04 E4 05 F1 | 	add	objptr, #4
21dcc     F2 00 62 FC | 	wrlong	_var01, objptr
21dd0     B1 01 00 FF 
21dd4     A6 00 06 F6 | 	mov	_var01, ##@LR__5973
21dd8     04 E4 05 F1 | 	add	objptr, #4
21ddc     F2 00 62 FC | 	wrlong	_var01, objptr
21de0     B1 01 00 FF 
21de4     B2 00 06 F6 | 	mov	_var01, ##@LR__5974
21de8     04 E4 05 F1 | 	add	objptr, #4
21dec     F2 00 62 FC | 	wrlong	_var01, objptr
21df0     B1 01 00 FF 
21df4     C3 00 06 F6 | 	mov	_var01, ##@LR__5975
21df8     04 E4 05 F1 | 	add	objptr, #4
21dfc     F2 00 62 FC | 	wrlong	_var01, objptr
21e00     B1 01 00 FF 
21e04     D3 00 06 F6 | 	mov	_var01, ##@LR__5976
21e08     04 E4 05 F1 | 	add	objptr, #4
21e0c     F2 00 62 FC | 	wrlong	_var01, objptr
21e10     B1 01 00 FF 
21e14     EE 00 06 F6 | 	mov	_var01, ##@LR__5977
21e18     04 E4 05 F1 | 	add	objptr, #4
21e1c     F2 00 62 FC | 	wrlong	_var01, objptr
21e20     B1 01 00 FF 
21e24     FE 00 06 F6 | 	mov	_var01, ##@LR__5978
21e28     04 E4 05 F1 | 	add	objptr, #4
21e2c     F2 00 62 FC | 	wrlong	_var01, objptr
21e30     B1 01 00 FF 
21e34     0C 01 06 F6 | 	mov	_var01, ##@LR__5979
21e38     04 E4 05 F1 | 	add	objptr, #4
21e3c     F2 00 62 FC | 	wrlong	_var01, objptr
21e40     B1 01 00 FF 
21e44     26 01 06 F6 | 	mov	_var01, ##@LR__5980
21e48     04 E4 05 F1 | 	add	objptr, #4
21e4c     F2 00 62 FC | 	wrlong	_var01, objptr
21e50     B1 01 00 FF 
21e54     59 01 06 F6 | 	mov	_var01, ##@LR__5981
21e58     04 E4 05 F1 | 	add	objptr, #4
21e5c     F2 00 62 FC | 	wrlong	_var01, objptr
21e60     B1 01 00 FF 
21e64     71 01 06 F6 | 	mov	_var01, ##@LR__5982
21e68     04 E4 05 F1 | 	add	objptr, #4
21e6c     F2 00 62 FC | 	wrlong	_var01, objptr
21e70     B1 01 00 FF 
21e74     8C 01 06 F6 | 	mov	_var01, ##@LR__5983
21e78     04 E4 05 F1 | 	add	objptr, #4
21e7c     F2 00 62 FC | 	wrlong	_var01, objptr
21e80     B1 01 00 FF 
21e84     A9 01 06 F6 | 	mov	_var01, ##@LR__5984
21e88     04 E4 05 F1 | 	add	objptr, #4
21e8c     F2 00 62 FC | 	wrlong	_var01, objptr
21e90     B1 01 00 FF 
21e94     C2 01 06 F6 | 	mov	_var01, ##@LR__5985
21e98     04 E4 05 F1 | 	add	objptr, #4
21e9c     F2 00 62 FC | 	wrlong	_var01, objptr
21ea0     B1 01 00 FF 
21ea4     E1 01 06 F6 | 	mov	_var01, ##@LR__5986
21ea8     04 E4 05 F1 | 	add	objptr, #4
21eac     F2 00 62 FC | 	wrlong	_var01, objptr
21eb0     B1 01 00 FF 
21eb4     EF 01 06 F6 | 	mov	_var01, ##@LR__5987
21eb8     04 E4 05 F1 | 	add	objptr, #4
21ebc     F2 00 62 FC | 	wrlong	_var01, objptr
21ec0     B2 01 00 FF 
21ec4     1C 00 06 F6 | 	mov	_var01, ##@LR__5988
21ec8     04 E4 05 F1 | 	add	objptr, #4
21ecc     F2 00 62 FC | 	wrlong	_var01, objptr
21ed0     B2 01 00 FF 
21ed4     29 00 06 F6 | 	mov	_var01, ##@LR__5989
21ed8     04 E4 05 F1 | 	add	objptr, #4
21edc     F2 00 62 FC | 	wrlong	_var01, objptr
21ee0     B2 01 00 FF 
21ee4     3D 00 06 F6 | 	mov	_var01, ##@LR__5990
21ee8     04 E4 05 F1 | 	add	objptr, #4
21eec     F2 00 62 FC | 	wrlong	_var01, objptr
21ef0     B2 01 00 FF 
21ef4     61 00 06 F6 | 	mov	_var01, ##@LR__5991
21ef8     04 E4 05 F1 | 	add	objptr, #4
21efc     F2 00 62 FC | 	wrlong	_var01, objptr
21f00     B2 01 00 FF 
21f04     78 00 06 F6 | 	mov	_var01, ##@LR__5992
21f08     04 E4 05 F1 | 	add	objptr, #4
21f0c     F2 00 62 FC | 	wrlong	_var01, objptr
21f10     B2 01 00 FF 
21f14     8B 00 06 F6 | 	mov	_var01, ##@LR__5993
21f18     04 E4 05 F1 | 	add	objptr, #4
21f1c     F2 00 62 FC | 	wrlong	_var01, objptr
21f20     B2 01 00 FF 
21f24     A2 00 06 F6 | 	mov	_var01, ##@LR__5994
21f28     04 E4 05 F1 | 	add	objptr, #4
21f2c     F2 00 62 FC | 	wrlong	_var01, objptr
21f30     B2 01 00 FF 
21f34     BB 00 06 F6 | 	mov	_var01, ##@LR__5995
21f38     04 E4 05 F1 | 	add	objptr, #4
21f3c     F2 00 62 FC | 	wrlong	_var01, objptr
21f40     B2 01 00 FF 
21f44     DD 00 06 F6 | 	mov	_var01, ##@LR__5996
21f48     04 E4 05 F1 | 	add	objptr, #4
21f4c     F2 00 62 FC | 	wrlong	_var01, objptr
21f50     B2 01 00 FF 
21f54     F0 00 06 F6 | 	mov	_var01, ##@LR__5997
21f58     04 E4 05 F1 | 	add	objptr, #4
21f5c     F2 00 62 FC | 	wrlong	_var01, objptr
21f60     B2 01 00 FF 
21f64     00 01 06 F6 | 	mov	_var01, ##@LR__5998
21f68     04 E4 05 F1 | 	add	objptr, #4
21f6c     F2 00 62 FC | 	wrlong	_var01, objptr
21f70     B2 01 00 FF 
21f74     18 01 06 F6 | 	mov	_var01, ##@LR__5999
21f78     04 E4 05 F1 | 	add	objptr, #4
21f7c     F2 00 62 FC | 	wrlong	_var01, objptr
21f80     B2 01 00 FF 
21f84     2F 01 06 F6 | 	mov	_var01, ##@LR__6000
21f88     04 E4 05 F1 | 	add	objptr, #4
21f8c     F2 00 62 FC | 	wrlong	_var01, objptr
21f90     45 00 00 FF 
21f94     58 E5 85 F1 | 	sub	objptr, ##35672
21f98                 | _init_error_strings_ret
21f98     2D 00 64 FD | 	ret
21f9c                 | 
21f9c                 | '         
21f9c                 | ' sub printerror(err as integer, linenum=0 as integer)
21f9c                 | _printerror
21f9c     02 4A 05 F6 | 	mov	COUNT_, #2
21fa0     A8 00 A0 FD | 	call	#pushregs_
21fa4     09 27 02 F6 | 	mov	local01, arg01
21fa8     0A 29 02 F6 | 	mov	local02, arg02
21fac     B2 01 00 FF 
21fb0     3C 13 06 F6 | 	mov	arg01, ##@LR__6001
21fb4     0C 21 B0 FD | 	call	#_hg010b_spin2_write
21fb8     13 13 02 F6 | 	mov	arg01, local01
21fbc     A8 26 B0 FD | 	call	#_hg010b_spin2_inttostr
21fc0     FD 12 02 F6 | 	mov	arg01, result1
21fc4     FC 20 B0 FD | 	call	#_hg010b_spin2_write
21fc8     B2 01 00 FF 
21fcc     43 13 06 F6 | 	mov	arg01, ##@LR__6002
21fd0     F0 20 B0 FD | 	call	#_hg010b_spin2_write
21fd4     02 26 66 F0 | 	shl	local01, #2
21fd8     45 00 00 FF 
21fdc     7C E4 05 F1 | 	add	objptr, ##35452
21fe0     F2 26 02 F1 | 	add	local01, objptr
21fe4     13 13 02 FB | 	rdlong	arg01, local01
21fe8     45 00 00 FF 
21fec     7C E4 85 F1 | 	sub	objptr, ##35452
21ff0     D0 20 B0 FD | 	call	#_hg010b_spin2_write
21ff4                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
21ff4                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
21ff4     01 28 56 F2 | 	cmps	local02, #1 wc
21ff8     24 00 90 CD |  if_b	jmp	#LR__2640
21ffc     B2 01 00 FF 
22000     47 13 06 F6 | 	mov	arg01, ##@LR__6003
22004     BC 20 B0 FD | 	call	#_hg010b_spin2_write
22008     14 13 02 F6 | 	mov	arg01, local02
2200c     58 26 B0 FD | 	call	#_hg010b_spin2_inttostr
22010     FD 12 02 F6 | 	mov	arg01, result1
22014                 | ' 
22014                 | ' write(text)
22014     AC 20 B0 FD | 	call	#_hg010b_spin2_write
22018                 | ' crlf
22018     A8 25 B0 FD | 	call	#_hg010b_spin2_crlf
2201c     10 00 90 FD | 	jmp	#LR__2641
22020                 | LR__2640
22020     B2 01 00 FF 
22024     51 13 06 F6 | 	mov	arg01, ##@LR__6004
22028                 | ' 
22028                 | ' write(text)
22028     98 20 B0 FD | 	call	#_hg010b_spin2_write
2202c                 | ' crlf
2202c     94 25 B0 FD | 	call	#_hg010b_spin2_crlf
22030                 | LR__2641
22030     A7 F0 03 F6 | 	mov	ptra, fp
22034     B2 00 A0 FD | 	call	#popregs_
22038                 | _printerror_ret
22038     2D 00 64 FD | 	ret
2203c                 | 
2203c                 | ' 
2203c                 | ' '' ------------------------------- Hardware start/stop/initialization 
2203c                 | ' 
2203c                 | ' sub startpsram
2203c                 | _startpsram
2203c     00 12 06 F6 | 	mov	arg01, #0
22040     0A 14 C6 F9 | 	decod	arg02, #10
22044     0B 16 06 F6 | 	mov	arg03, #11
22048     07 18 06 F6 | 	mov	arg04, #7
2204c     0B 00 00 FF 
22050     CC E4 05 F1 | 	add	objptr, ##5836
22054     7C 2A B0 FD | 	call	#_psram_spin2_startx
22058     2B 00 00 FF 
2205c     3C E5 05 F1 | 	add	objptr, ##22332
22060     F2 FA 61 FC | 	wrlong	result1, objptr
22064                 | '     return $7FF00 + cog*12
22064     0C E4 05 F1 | 	add	objptr, #12
22068     FF 03 80 FF 
2206c     F2 00 6A FC | 	wrlong	##524032, objptr
22070     37 00 00 FF 
22074     14 E4 85 F1 | 	sub	objptr, ##28180
22078                 | _startpsram_ret
22078     2D 00 64 FD | 	ret
2207c                 | 
2207c                 | ' 
2207c                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
2207c                 | _startvideo
2207c     01 4A 05 F6 | 	mov	COUNT_, #1
22080     A8 00 A0 FD | 	call	#pushregs_
22084     37 00 00 FF 
22088     14 E4 05 F1 | 	add	objptr, ##28180
2208c     F2 18 02 FB | 	rdlong	arg04, objptr
22090     37 00 00 FF 
22094     14 E4 85 F1 | 	sub	objptr, ##28180
22098     0A 13 02 F6 | 	mov	arg01, arg02
2209c     0C 15 02 F6 | 	mov	arg02, arg04
220a0     18 08 B0 FD | 	call	#_hg010b_spin2_start
220a4     37 00 00 FF 
220a8     00 E4 05 F1 | 	add	objptr, ##28160
220ac     F2 FA 61 FC | 	wrlong	result1, objptr
220b0                 | ' 
220b0                 | ' videocog=v.start(pin,mbox)
220b0                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
220b0     00 26 06 F6 | 	mov	local01, #0
220b4     2B 00 00 FF 
220b8     34 E5 85 F1 | 	sub	objptr, ##22324
220bc                 | LR__2650
220bc     13 13 02 F6 | 	mov	arg01, local01
220c0     00 28 00 FF 
220c4     00 14 06 F6 | 	mov	arg02, ##5242880
220c8     60 2E B0 FD | 	call	#_psram_spin2_setQos
220cc     01 26 06 F1 | 	add	local01, #1
220d0     08 26 56 F2 | 	cmps	local01, #8 wc
220d4     E4 FF 9F CD |  if_b	jmp	#LR__2650
220d8     2B 00 00 FF 
220dc     34 E5 05 F1 | 	add	objptr, ##22324
220e0     F2 12 02 FB | 	rdlong	arg01, objptr
220e4     7A 00 02 FF 
220e8     00 14 06 F6 | 	mov	arg02, ##67171328
220ec     2B 00 00 FF 
220f0     34 E5 85 F1 | 	sub	objptr, ##22324
220f4     34 2E B0 FD | 	call	#_psram_spin2_setQos
220f8     0B 00 00 FF 
220fc     CC E4 85 F1 | 	sub	objptr, ##5836
22100                 | ' psram.setQoS(videocog, $0400f400) 
22100                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
22100     F2 14 02 F6 | 	mov	arg02, objptr
22104     00 E0 04 FF 
22108     00 14 46 F5 | 	or	arg02, ##163577856
2210c     00 16 06 F6 | 	mov	arg03, #0
22110     00 18 06 F6 | 	mov	arg04, #0
22114     00 12 06 F6 | 	mov	arg01, #0
22118     14 43 B0 FD | 	call	#__system___basic_open
2211c                 | ' return videocog
2211c     37 00 00 FF 
22120     00 E4 05 F1 | 	add	objptr, ##28160
22124     F2 FA 01 FB | 	rdlong	result1, objptr
22128     37 00 00 FF 
2212c     00 E4 85 F1 | 	sub	objptr, ##28160
22130     A7 F0 03 F6 | 	mov	ptra, fp
22134     B2 00 A0 FD | 	call	#popregs_
22138                 | _startvideo_ret
22138     2D 00 64 FD | 	ret
2213c                 | 
2213c                 | ' 
2213c                 | ' 
2213c                 | ' 
2213c                 | ' '' ------------------------------- Convenient psram peek/poke
2213c                 | ' 
2213c                 | ' sub pslpoke(addr as ulong,value as ulong)
2213c                 | _pslpoke
2213c     00 4A 05 F6 | 	mov	COUNT_, #0
22140     A8 00 A0 FD | 	call	#pushregs_
22144     08 F0 07 F1 | 	add	ptra, #8
22148     A7 12 62 FC | 	wrlong	arg01, fp
2214c     04 4E 05 F1 | 	add	fp, #4
22150     A7 14 62 FC | 	wrlong	arg02, fp
22154     A7 12 02 F6 | 	mov	arg01, fp
22158     04 4E 85 F1 | 	sub	fp, #4
2215c     A7 14 02 FB | 	rdlong	arg02, fp
22160     04 16 06 F6 | 	mov	arg03, #4
22164     0B 00 00 FF 
22168     CC E4 05 F1 | 	add	objptr, ##5836
2216c     2C 2C B0 FD | 	call	#_psram_spin2_write
22170     0B 00 00 FF 
22174     CC E4 85 F1 | 	sub	objptr, ##5836
22178     A7 F0 03 F6 | 	mov	ptra, fp
2217c     B2 00 A0 FD | 	call	#popregs_
22180                 | _pslpoke_ret
22180     2D 00 64 FD | 	ret
22184                 | 
22184                 | ' 
22184                 | ' sub psdpoke(addr as ulong,value as ulong)
22184                 | _psdpoke
22184     00 4A 05 F6 | 	mov	COUNT_, #0
22188     A8 00 A0 FD | 	call	#pushregs_
2218c     08 F0 07 F1 | 	add	ptra, #8
22190     A7 12 62 FC | 	wrlong	arg01, fp
22194     04 4E 05 F1 | 	add	fp, #4
22198     A7 14 62 FC | 	wrlong	arg02, fp
2219c     A7 12 02 F6 | 	mov	arg01, fp
221a0     04 4E 85 F1 | 	sub	fp, #4
221a4     A7 14 02 FB | 	rdlong	arg02, fp
221a8     02 16 06 F6 | 	mov	arg03, #2
221ac     0B 00 00 FF 
221b0     CC E4 05 F1 | 	add	objptr, ##5836
221b4     E4 2B B0 FD | 	call	#_psram_spin2_write
221b8     0B 00 00 FF 
221bc     CC E4 85 F1 | 	sub	objptr, ##5836
221c0     A7 F0 03 F6 | 	mov	ptra, fp
221c4     B2 00 A0 FD | 	call	#popregs_
221c8                 | _psdpoke_ret
221c8     2D 00 64 FD | 	ret
221cc                 | 
221cc                 | ' 
221cc                 | ' sub pspoke(addr as ulong,value as ulong)
221cc                 | _pspoke
221cc     00 4A 05 F6 | 	mov	COUNT_, #0
221d0     A8 00 A0 FD | 	call	#pushregs_
221d4     08 F0 07 F1 | 	add	ptra, #8
221d8     A7 12 62 FC | 	wrlong	arg01, fp
221dc     04 4E 05 F1 | 	add	fp, #4
221e0     A7 14 62 FC | 	wrlong	arg02, fp
221e4     A7 12 02 F6 | 	mov	arg01, fp
221e8     04 4E 85 F1 | 	sub	fp, #4
221ec     A7 14 02 FB | 	rdlong	arg02, fp
221f0     01 16 06 F6 | 	mov	arg03, #1
221f4     0B 00 00 FF 
221f8     CC E4 05 F1 | 	add	objptr, ##5836
221fc     9C 2B B0 FD | 	call	#_psram_spin2_write
22200     0B 00 00 FF 
22204     CC E4 85 F1 | 	sub	objptr, ##5836
22208     A7 F0 03 F6 | 	mov	ptra, fp
2220c     B2 00 A0 FD | 	call	#popregs_
22210                 | _pspoke_ret
22210     2D 00 64 FD | 	ret
22214                 | 
22214                 | ' 
22214                 | ' function pspeek(adr as ulong) as ubyte
22214                 | _pspeek
22214     00 4A 05 F6 | 	mov	COUNT_, #0
22218     A8 00 A0 FD | 	call	#pushregs_
2221c     0C F0 07 F1 | 	add	ptra, #12
22220     04 4E 05 F1 | 	add	fp, #4
22224     A7 12 62 FC | 	wrlong	arg01, fp
22228     04 4E 05 F1 | 	add	fp, #4
2222c     A7 12 02 F6 | 	mov	arg01, fp
22230     04 4E 85 F1 | 	sub	fp, #4
22234     A7 14 02 FB | 	rdlong	arg02, fp
22238     04 4E 85 F1 | 	sub	fp, #4
2223c     01 16 06 F6 | 	mov	arg03, #1
22240     0B 00 00 FF 
22244     CC E4 05 F1 | 	add	objptr, ##5836
22248     B4 2A B0 FD | 	call	#_psram_spin2_read1
2224c     0B 00 00 FF 
22250     CC E4 85 F1 | 	sub	objptr, ##5836
22254                 | ' psram.read1(varptr(res),adr,1)
22254                 | ' return res
22254     08 4E 05 F1 | 	add	fp, #8
22258     A7 FA C1 FA | 	rdbyte	result1, fp
2225c     08 4E 85 F1 | 	sub	fp, #8
22260     A7 F0 03 F6 | 	mov	ptra, fp
22264     B2 00 A0 FD | 	call	#popregs_
22268                 | _pspeek_ret
22268     2D 00 64 FD | 	ret
2226c                 | 
2226c                 | ' 
2226c                 | ' function pslpeek(adr as ulong) as ulong
2226c                 | _pslpeek
2226c     00 4A 05 F6 | 	mov	COUNT_, #0
22270     A8 00 A0 FD | 	call	#pushregs_
22274     0C F0 07 F1 | 	add	ptra, #12
22278     04 4E 05 F1 | 	add	fp, #4
2227c     A7 12 62 FC | 	wrlong	arg01, fp
22280     04 4E 05 F1 | 	add	fp, #4
22284     A7 12 02 F6 | 	mov	arg01, fp
22288     04 4E 85 F1 | 	sub	fp, #4
2228c     A7 14 02 FB | 	rdlong	arg02, fp
22290     04 4E 85 F1 | 	sub	fp, #4
22294     04 16 06 F6 | 	mov	arg03, #4
22298     0B 00 00 FF 
2229c     CC E4 05 F1 | 	add	objptr, ##5836
222a0     5C 2A B0 FD | 	call	#_psram_spin2_read1
222a4     0B 00 00 FF 
222a8     CC E4 85 F1 | 	sub	objptr, ##5836
222ac                 | ' psram.read1(varptr(res),adr,4)
222ac                 | ' return res
222ac     08 4E 05 F1 | 	add	fp, #8
222b0     A7 FA 01 FB | 	rdlong	result1, fp
222b4     08 4E 85 F1 | 	sub	fp, #8
222b8     A7 F0 03 F6 | 	mov	ptra, fp
222bc     B2 00 A0 FD | 	call	#popregs_
222c0                 | _pslpeek_ret
222c0     2D 00 64 FD | 	ret
222c4                 | 
222c4                 | ' 
222c4                 | ' function psdpeek(adr as ulong) as ulong
222c4                 | _psdpeek
222c4     00 4A 05 F6 | 	mov	COUNT_, #0
222c8     A8 00 A0 FD | 	call	#pushregs_
222cc     0C F0 07 F1 | 	add	ptra, #12
222d0     04 4E 05 F1 | 	add	fp, #4
222d4     A7 12 62 FC | 	wrlong	arg01, fp
222d8     04 4E 05 F1 | 	add	fp, #4
222dc     A7 12 02 F6 | 	mov	arg01, fp
222e0     04 4E 85 F1 | 	sub	fp, #4
222e4     A7 14 02 FB | 	rdlong	arg02, fp
222e8     04 4E 85 F1 | 	sub	fp, #4
222ec     02 16 06 F6 | 	mov	arg03, #2
222f0     0B 00 00 FF 
222f4     CC E4 05 F1 | 	add	objptr, ##5836
222f8     04 2A B0 FD | 	call	#_psram_spin2_read1
222fc     0B 00 00 FF 
22300     CC E4 85 F1 | 	sub	objptr, ##5836
22304                 | ' psram.read1(varptr(res),adr,2)
22304                 | ' return res
22304     08 4E 05 F1 | 	add	fp, #8
22308     A7 FA E1 FA | 	rdword	result1, fp
2230c     08 4E 85 F1 | 	sub	fp, #8
22310     A7 F0 03 F6 | 	mov	ptra, fp
22314     B2 00 A0 FD | 	call	#popregs_
22318                 | _psdpeek_ret
22318     2D 00 64 FD | 	ret
2231c                 | 
2231c                 | ' 
2231c                 | ' '' ------------------------------- USB keyboard scan to char translator
2231c                 | ' 
2231c                 | ' function scantochar(key)
2231c                 | _scantochar
2231c                 | ' 
2231c                 | ' select case (key shr 8) and 255
2231c     09 01 02 F6 | 	mov	_var01, arg01
22320     08 00 C6 F0 | 	sar	_var01, #8
22324     FF 00 0E F5 | 	and	_var01, #255 wz
22328     24 00 90 AD |  if_e	jmp	#LR__2660
2232c     02 00 0E F2 | 	cmp	_var01, #2 wz
22330     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
22334     30 00 90 AD |  if_e	jmp	#LR__2661
22338     40 00 0E F2 | 	cmp	_var01, #64 wz
2233c     44 00 90 AD |  if_e	jmp	#LR__2662
22340     42 00 0E F2 | 	cmp	_var01, #66 wz
22344     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
22348     70 00 90 5D |  if_ne	jmp	#LR__2664
2234c     50 00 90 FD | 	jmp	#LR__2663
22350                 | LR__2660
22350     09 FB 01 F6 | 	mov	result1, arg01
22354     7F FA 05 F5 | 	and	result1, #127
22358     02 FA 65 F0 | 	shl	result1, #2
2235c     F5 FA 01 F1 | 	add	result1, ptr__dat__
22360     FD FA C1 FA | 	rdbyte	result1, result1
22364     54 00 90 FD | 	jmp	#_scantochar_ret
22368                 | LR__2661
22368     09 FB 01 F6 | 	mov	result1, arg01
2236c     7F FA 05 F5 | 	and	result1, #127
22370     02 FA 65 F0 | 	shl	result1, #2
22374     01 FA 05 F1 | 	add	result1, #1
22378     F5 FA 01 F1 | 	add	result1, ptr__dat__
2237c     FD FA C1 FA | 	rdbyte	result1, result1
22380     38 00 90 FD | 	jmp	#_scantochar_ret
22384                 | LR__2662
22384     09 FB 01 F6 | 	mov	result1, arg01
22388     7F FA 05 F5 | 	and	result1, #127
2238c     02 FA 65 F0 | 	shl	result1, #2
22390     02 FA 05 F1 | 	add	result1, #2
22394     F5 FA 01 F1 | 	add	result1, ptr__dat__
22398     FD FA C1 FA | 	rdbyte	result1, result1
2239c     1C 00 90 FD | 	jmp	#_scantochar_ret
223a0                 | LR__2663
223a0     09 FB 01 F6 | 	mov	result1, arg01
223a4     7F FA 05 F5 | 	and	result1, #127
223a8     02 FA 65 F0 | 	shl	result1, #2
223ac     03 FA 05 F1 | 	add	result1, #3
223b0     F5 FA 01 F1 | 	add	result1, ptr__dat__
223b4     FD FA C1 FA | 	rdbyte	result1, result1
223b8     00 00 90 FD | 	jmp	#_scantochar_ret
223bc                 | LR__2664
223bc                 | _scantochar_ret
223bc     2D 00 64 FD | 	ret
223c0                 | 
223c0                 | _program
223c0     01 4A 05 F6 | 	mov	COUNT_, #1
223c4     A8 00 A0 FD | 	call	#pushregs_
223c8     70 FC BF FD | 	call	#_startpsram
223cc     40 12 06 F6 | 	mov	arg01, #64
223d0     00 14 06 F6 | 	mov	arg02, #0
223d4     00 16 06 F6 | 	mov	arg03, #0
223d8     A0 FC BF FD | 	call	#_startvideo
223dc     37 00 00 FF 
223e0     14 E4 05 F1 | 	add	objptr, ##28180
223e4     F2 12 02 FB | 	rdlong	arg01, objptr
223e8     00 14 06 F6 | 	mov	arg02, #0
223ec     FB 03 00 FF 
223f0     00 17 06 F6 | 	mov	arg03, ##521984
223f4     2B 00 00 FF 
223f8     48 E5 85 F1 | 	sub	objptr, ##22344
223fc     24 2F B0 FD | 	call	#_audio096_spin2_start
22400     FE 16 02 F6 | 	mov	arg03, result2
22404     2B 00 00 FF 
22408     30 E5 05 F1 | 	add	objptr, ##22320
2240c     F2 FA 61 FC | 	wrlong	result1, objptr
22410     14 E4 05 F1 | 	add	objptr, #20
22414     F2 16 62 FC | 	wrlong	arg03, objptr
22418     37 00 00 FF 
2241c     10 E4 85 F1 | 	sub	objptr, ##28176
22420     32 12 06 F6 | 	mov	arg01, #50
22424     54 38 B0 FD | 	call	#__system___waitms
22428     37 00 00 FF 
2242c     10 E4 05 F1 | 	add	objptr, ##28176
22430     F2 12 02 FB | 	rdlong	arg01, objptr
22434     37 00 00 FF 
22438     10 E4 85 F1 | 	sub	objptr, ##28176
2243c     14 12 06 F1 | 	add	arg01, #20
22440     20 00 80 FF 
22444     09 01 58 FC | 	wrword	##16384, arg01
22448     E8 2B B0 FD | 	call	#_usbnew_spin2_start
2244c     37 00 00 FF 
22450     04 E4 05 F1 | 	add	objptr, ##28164
22454     F2 FA 61 FC | 	wrlong	result1, objptr
22458                 | '   mouse_limits[0] := xlim
22458     0F 00 00 FF 
2245c     B8 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7864
22460     01 00 80 FF 
22464     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
22468                 | '   mouse_limits[1] := ylim
22468     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
2246c     01 00 80 FF 
22470     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
22474     36 00 00 FF 
22478     F3 E4 85 F1 | 	sub	objptr, ##27891
2247c     F2 12 02 F6 | 	mov	arg01, objptr
22480     11 E5 85 F1 | 	sub	objptr, #273
22484     C4 12 06 F1 | 	add	arg01, #196
22488                 | '   mouse_outptr := ptr
22488     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
2248c     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
22490     0F 00 00 FF 
22494     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
22498     16 00 00 FF 
2249c     CA EA 05 F1 | 	add	ptr__dat__, ##11466
224a0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
224a4     16 00 00 FF 
224a8     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
224ac     10 12 06 F6 | 	mov	arg01, #16
224b0     A0 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
224b4     10 12 06 F6 | 	mov	arg01, #16
224b8     20 14 06 F6 | 	mov	arg02, #32
224bc     20 16 06 F6 | 	mov	arg03, #32
224c0     20 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
224c4     09 12 C6 F9 | 	decod	arg01, #9
224c8     2C 15 06 F6 | 	mov	arg02, #300
224cc     BC 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
224d0     F2 16 02 F6 | 	mov	arg03, objptr
224d4     50 00 00 FF 
224d8     44 E5 05 F1 | 	add	objptr, ##41284
224dc     F2 14 02 F6 | 	mov	arg02, objptr
224e0     0A 17 62 FC | 	wrlong	arg03, arg02
224e4     04 14 06 F1 | 	add	arg02, #4
224e8     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
224ec     EF 14 02 F6 | 	mov	arg02, entryptr__
224f0     1E FA 05 F6 | 	mov	result1, #30
224f4     28 E4 61 FD | 	setq	objptr
224f8     0A FB F1 FC | 	coginit	result1, arg02 wc
224fc     01 FA 65 C6 |  if_b	neg	result1, #1
22500     04 E4 85 F1 | 	sub	objptr, #4
22504     F2 FA 61 FC | 	wrlong	result1, objptr
22508     01 00 00 FF 
2250c     00 E5 05 F1 | 	add	objptr, ##768
22510     F2 00 68 FC | 	wrlong	#0, objptr
22514     1B 00 00 FF 
22518     0C E4 85 F1 | 	sub	objptr, ##13836
2251c     F2 04 68 FC | 	wrlong	#2, objptr
22520     04 E4 05 F1 | 	add	objptr, #4
22524     F2 26 69 FC | 	wrlong	#147, objptr
22528     04 E4 05 F1 | 	add	objptr, #4
2252c     F2 34 69 FC | 	wrlong	#154, objptr
22530     04 E4 05 F1 | 	add	objptr, #4
22534     F2 08 68 FC | 	wrlong	#4, objptr
22538     04 E4 85 F1 | 	sub	objptr, #4
2253c     F2 16 02 FB | 	rdlong	arg03, objptr
22540     14 E4 85 F1 | 	sub	objptr, #20
22544     F2 16 62 FC | 	wrlong	arg03, objptr
22548     04 E4 05 F1 | 	add	objptr, #4
2254c     F2 00 68 FC | 	wrlong	#0, objptr
22550     04 E4 05 F1 | 	add	objptr, #4
22554     F2 00 68 FC | 	wrlong	#0, objptr
22558     19 00 00 FF 
2255c     0C E5 05 F1 | 	add	objptr, ##13068
22560     F2 02 68 FC | 	wrlong	#1, objptr
22564     01 00 00 FF 
22568     0C E5 05 F1 | 	add	objptr, ##780
2256c     F2 00 68 FC | 	wrlong	#0, objptr
22570     01 00 00 FF 
22574     00 EA 05 F1 | 	add	ptr__dat__, ##512
22578     08 E4 05 F1 | 	add	objptr, #8
2257c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
22580     04 E4 85 F1 | 	sub	objptr, #4
22584     03 00 80 FF 
22588     F2 3C 69 FC | 	wrlong	##1694, objptr
2258c     0C 00 00 FF 
22590     E8 E5 85 F1 | 	sub	objptr, ##6632
22594     F2 18 68 FC | 	wrlong	#12, objptr
22598     45 00 00 FF 
2259c     64 E4 85 F1 | 	sub	objptr, ##35428
225a0     01 00 00 FF 
225a4     00 EA 85 F1 | 	sub	ptr__dat__, ##512
225a8     48 D9 BF FD | 	call	#_init_commands
225ac     5C F6 BF FD | 	call	#_init_error_strings
225b0     E0 ED BF FD | 	call	#_init_audio
225b4     80 30 BF FD | 	call	#_do_new
225b8     37 00 00 FF 
225bc     3C E4 05 F1 | 	add	objptr, ##28220
225c0     F2 12 02 FB | 	rdlong	arg01, objptr
225c4     04 E4 85 F1 | 	sub	objptr, #4
225c8     F2 14 02 FB | 	rdlong	arg02, objptr
225cc     37 00 00 FF 
225d0     38 E4 85 F1 | 	sub	objptr, ##28216
225d4     2C 17 B0 FD | 	call	#_hg010b_spin2_cls
225d8     37 00 00 FF 
225dc     40 E4 05 F1 | 	add	objptr, ##28224
225e0     F2 12 02 FB | 	rdlong	arg01, objptr
225e4     37 00 00 FF 
225e8     40 E4 85 F1 | 	sub	objptr, ##28224
225ec     C4 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
225f0                 | ' 
225f0                 | ' leading_spaces:=amount
225f0     01 00 00 FF 
225f4     B6 E4 05 F1 | 	add	objptr, ##694
225f8     F2 04 68 FC | 	wrlong	#2, objptr
225fc     01 00 00 FF 
22600     B6 E4 85 F1 | 	sub	objptr, ##694
22604     B2 01 00 FF 
22608     52 27 06 F6 | 	mov	local01, ##@LR__6005
2260c     3D 12 06 F6 | 	mov	arg01, #61
22610     3C 14 06 F6 | 	mov	arg02, #60
22614     3B 16 06 F6 | 	mov	arg03, #59
22618     3A 18 06 F6 | 	mov	arg04, #58
2261c     EC 80 B0 FD | 	call	#__system___vfs_open_sdcardx
22620     FD 14 02 F6 | 	mov	arg02, result1
22624     13 13 02 F6 | 	mov	arg01, local01
22628     28 37 B0 FD | 	call	#__system___mount
2262c     B2 01 00 FF 
22630     56 13 06 F6 | 	mov	arg01, ##@LR__6006
22634     DC 39 B0 FD | 	call	#__system___chdir
22638     B2 01 00 FF 
2263c     5E 27 06 F6 | 	mov	local01, ##@LR__6007
22640     4A 00 00 FF 
22644     94 E4 05 F1 | 	add	objptr, ##38036
22648     F2 26 62 FC | 	wrlong	local01, objptr
2264c     13 00 00 FF 
22650     60 E4 85 F1 | 	sub	objptr, ##9824
22654     F2 12 02 FB | 	rdlong	arg01, objptr
22658     37 00 00 FF 
2265c     34 E4 85 F1 | 	sub	objptr, ##28212
22660     01 12 66 F0 | 	shl	arg01, #1
22664     01 14 06 F6 | 	mov	arg02, #1
22668     88 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
2266c                 | ' init_commands
2266c                 | ' init_error_strings
2266c                 | ' init_audio
2266c                 | ' do_new
2266c                 | ' cls(ink, paper)
2266c                 | ' v.setfontfamily(font) 				' use ST Mono font
2266c                 | ' v.setleadingspaces(2)
2266c                 | ' mount "/sd", _vfs_open_sdcard()
2266c                 | ' chdir "/sd/bas"
2266c                 | ' currentdir$="/sd/bas"
2266c                 | ' position 2*editor_spaces,1 : print ver$
2266c     00 12 06 F6 | 	mov	arg01, #0
22670     3C 90 B0 FD | 	call	#__system___getiolock_0599
22674     FD 12 02 F6 | 	mov	arg01, result1
22678     0C 33 B0 FD | 	call	#__system___lockmem
2267c     18 00 00 FF 
22680     40 EB 05 F1 | 	add	ptr__dat__, ##12608
22684     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
22688     18 00 00 FF 
2268c     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
22690     00 12 06 F6 | 	mov	arg01, #0
22694     00 16 06 F6 | 	mov	arg03, #0
22698     E0 3F B0 FD | 	call	#__system___basic_print_string
2269c     00 12 06 F6 | 	mov	arg01, #0
226a0     0A 14 06 F6 | 	mov	arg02, #10
226a4     00 16 06 F6 | 	mov	arg03, #0
226a8     78 3F B0 FD | 	call	#__system___basic_print_char
226ac     00 12 06 F6 | 	mov	arg01, #0
226b0     FC 8F B0 FD | 	call	#__system___getiolock_0599
226b4     FD 00 68 FC | 	wrlong	#0, result1
226b8     52 00 00 FF 
226bc     44 E4 05 F1 | 	add	objptr, ##42052
226c0     F2 12 02 FB | 	rdlong	arg01, objptr
226c4     0E 00 00 FF 
226c8     E8 E5 85 F1 | 	sub	objptr, ##7656
226cc     F2 26 02 FB | 	rdlong	local01, objptr
226d0     43 00 00 FF 
226d4     5C E4 85 F1 | 	sub	objptr, ##34396
226d8     13 13 82 F1 | 	sub	arg01, local01
226dc     00 14 06 F6 | 	mov	arg02, #0
226e0     0A 16 06 F6 | 	mov	arg03, #10
226e4     70 55 B0 FD | 	call	#__system__Number_S
226e8     FD 12 02 F6 | 	mov	arg01, result1
226ec     B2 01 00 FF 
226f0     66 15 06 F6 | 	mov	arg02, ##@LR__6008
226f4     EC 32 B0 FD | 	call	#__system___string_concat
226f8     FD 26 02 F6 | 	mov	local01, result1
226fc     50 00 00 FF 
22700     38 E5 05 F1 | 	add	objptr, ##41272
22704     F2 26 62 FC | 	wrlong	local01, objptr
22708     50 00 00 FF 
2270c     38 E5 85 F1 | 	sub	objptr, ##41272
22710                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
22710     00 12 06 F6 | 	mov	arg01, #0
22714     98 8F B0 FD | 	call	#__system___getiolock_0599
22718     FD 12 02 F6 | 	mov	arg01, result1
2271c     68 32 B0 FD | 	call	#__system___lockmem
22720     50 00 00 FF 
22724     38 E5 05 F1 | 	add	objptr, ##41272
22728     F2 14 02 FB | 	rdlong	arg02, objptr
2272c     50 00 00 FF 
22730     38 E5 85 F1 | 	sub	objptr, ##41272
22734     00 12 06 F6 | 	mov	arg01, #0
22738     00 16 06 F6 | 	mov	arg03, #0
2273c     3C 3F B0 FD | 	call	#__system___basic_print_string
22740     00 12 06 F6 | 	mov	arg01, #0
22744     0A 14 06 F6 | 	mov	arg02, #10
22748     00 16 06 F6 | 	mov	arg03, #0
2274c     D4 3E B0 FD | 	call	#__system___basic_print_char
22750     00 12 06 F6 | 	mov	arg01, #0
22754     58 8F B0 FD | 	call	#__system___getiolock_0599
22758     FD 00 68 FC | 	wrlong	#0, result1
2275c     37 00 00 FF 
22760     34 E4 05 F1 | 	add	objptr, ##28212
22764     F2 12 02 FB | 	rdlong	arg01, objptr
22768     37 00 00 FF 
2276c     34 E4 85 F1 | 	sub	objptr, ##28212
22770     01 12 66 F0 | 	shl	arg01, #1
22774     04 14 06 F6 | 	mov	arg02, #4
22778     78 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
2277c                 | ' position 2*editor_spaces,4 : print "Ready"
2277c     00 12 06 F6 | 	mov	arg01, #0
22780     2C 8F B0 FD | 	call	#__system___getiolock_0599
22784     FD 12 02 F6 | 	mov	arg01, result1
22788     FC 31 B0 FD | 	call	#__system___lockmem
2278c     B2 01 00 FF 
22790     78 15 06 F6 | 	mov	arg02, ##@LR__6009
22794     00 12 06 F6 | 	mov	arg01, #0
22798     00 16 06 F6 | 	mov	arg03, #0
2279c     DC 3E B0 FD | 	call	#__system___basic_print_string
227a0     00 12 06 F6 | 	mov	arg01, #0
227a4     0A 14 06 F6 | 	mov	arg02, #10
227a8     00 16 06 F6 | 	mov	arg03, #0
227ac     74 3E B0 FD | 	call	#__system___basic_print_char
227b0     00 12 06 F6 | 	mov	arg01, #0
227b4     F8 8E B0 FD | 	call	#__system___getiolock_0599
227b8     FD 00 68 FC | 	wrlong	#0, result1
227bc     00 14 06 F6 | 	mov	arg02, #0
227c0     01 14 D6 F7 | 	test	arg02, #1 wc
227c4     5A 4C 64 FD | 	drvc	#38
227c8     01 14 D6 F7 | 	test	arg02, #1 wc
227cc     5A 4E 64 FD | 	drvc	#39
227d0     B2 01 00 FF 
227d4     7E 27 06 F6 | 	mov	local01, ##@LR__6010
227d8     52 00 00 FF 
227dc     70 E4 05 F1 | 	add	objptr, ##42096
227e0     F2 26 62 FC | 	wrlong	local01, objptr
227e4     04 E4 05 F1 | 	add	objptr, #4
227e8     FF FF FF FF 
227ec     F2 FE 6B FC | 	wrlong	##-1, objptr
227f0     0C E4 05 F1 | 	add	objptr, #12
227f4     F2 00 68 FC | 	wrlong	#0, objptr
227f8     52 00 00 FF 
227fc     80 E4 85 F1 | 	sub	objptr, ##42112
22800                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
22800                 | ' loadname="noname.bas"
22800                 | ' do_insert=-1
22800                 | ' inload=0
22800                 | ' 
22800                 | ' open "/sd/bas/autorun.bas" for input as #9
22800     B2 01 00 FF 
22804     89 15 06 F6 | 	mov	arg02, ##@LR__6011
22808     09 12 06 F6 | 	mov	arg01, #9
2280c     00 16 06 F6 | 	mov	arg03, #0
22810     78 3D B0 FD | 	call	#__system___basic_open_string
22814     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22818     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2281c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22820     52 00 00 FF 
22824     84 E4 05 F1 | 	add	objptr, ##42116
22828     F2 FA 61 FC | 	wrlong	result1, objptr
2282c     52 00 00 FF 
22830     84 E4 85 F1 | 	sub	objptr, ##42116
22834                 | ' err=geterr()
22834                 | ' close #9
22834     09 12 06 F6 | 	mov	arg01, #9
22838     A4 84 B0 FD | 	call	#__system__close
2283c                 | ' if err=0 then line$="run autorun.bas" : interpret
2283c     52 00 00 FF 
22840     84 E4 05 F1 | 	add	objptr, ##42116
22844     F2 26 0A FB | 	rdlong	local01, objptr wz
22848     52 00 00 FF 
2284c     84 E4 85 F1 | 	sub	objptr, ##42116
22850     B2 01 00 AF 
22854     9D 27 06 A6 |  if_e	mov	local01, ##@LR__6012
22858     37 00 00 AF 
2285c     1C E4 05 A1 |  if_e	add	objptr, ##28188
22860     F2 26 62 AC |  if_e	wrlong	local01, objptr
22864     37 00 00 AF 
22868     1C E4 85 A1 |  if_e	sub	objptr, ##28188
2286c     4C EF BD AD |  if_e	call	#_interpret
22870                 | ' 
22870                 | ' 
22870                 | ' '-------------------------------------------------------------------------------------------------------- 
22870                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
22870                 | ' '--------------------------------------------------------------------------------------------------------
22870                 | ' 
22870                 | ' do
22870                 | LR__2670
22870     90 DF BD FD | 	call	#_edit
22874     FD 26 02 F6 | 	mov	local01, result1
22878     37 00 00 FF 
2287c     1C E4 05 F1 | 	add	objptr, ##28188
22880     F2 26 62 FC | 	wrlong	local01, objptr
22884     37 00 00 FF 
22888     1C E4 85 F1 | 	sub	objptr, ##28188
2288c     2C EF BD FD | 	call	#_interpret
22890     B2 01 00 FF 
22894     AD 27 06 F6 | 	mov	local01, ##@LR__6013
22898     37 00 00 FF 
2289c     1C E4 05 F1 | 	add	objptr, ##28188
228a0     F2 26 62 FC | 	wrlong	local01, objptr
228a4     37 00 00 FF 
228a8     1C E4 85 F1 | 	sub	objptr, ##28188
228ac     C0 FF 9F FD | 	jmp	#LR__2670
228b0     A7 F0 03 F6 | 	mov	ptra, fp
228b4     B2 00 A0 FD | 	call	#popregs_
228b8                 | _program_ret
228b8     2D 00 64 FD | 	ret
228bc                 | 
228bc                 | ' '' this is not a main program.
228bc                 | ' 
228bc                 | ' '****************************************************************************************************************
228bc                 | ' '                                                                                                             	*
228bc                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
228bc                 | ' '                                                                                                            	*
228bc                 | ' ' base - HDMI base pin												*
228bc                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
228bc                 | ' '														*
228bc                 | ' '														*
228bc                 | ' '****************************************************************************************************************
228bc                 | ' 
228bc                 | ' pub start(base,mb):result |i
228bc                 | _hg010b_spin2_start
228bc                 | ' 
228bc                 | ' '--------------------------- initialize pointers and variables
228bc                 | ' 
228bc                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
228bc     34 E4 05 F1 | 	add	objptr, #52
228c0     F2 FA 01 F6 | 	mov	result1, objptr
228c4     28 E4 85 F1 | 	sub	objptr, #40
228c8     F2 FA 61 FC | 	wrlong	result1, objptr
228cc                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
228cc                 | ' hdmibase:=base							' HDMI base pin, 8*n
228cc     18 E4 05 F1 | 	add	objptr, #24
228d0     F2 12 62 FC | 	wrlong	arg01, objptr
228d4                 | ' mailbox_ptr:=mb		
228d4     04 E4 05 F1 | 	add	objptr, #4
228d8     F2 14 62 FC | 	wrlong	arg02, objptr
228dc                 | ' mailbox0:=mb				' PSRAM mailbox pointer
228dc     C1 E5 05 F1 | 	add	objptr, #449
228e0     F2 14 62 FC | 	wrlong	arg02, objptr
228e4                 | ' sprite_ptr:=@spr1ptr
228e4     D8 E4 85 F1 | 	sub	objptr, #216
228e8     F2 FA 01 F6 | 	mov	result1, objptr
228ec     E5 E4 85 F1 | 	sub	objptr, #229
228f0     F2 FA 61 FC | 	wrlong	result1, objptr
228f4                 | ' 
228f4                 | ' 		'
228f4                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
228f4     E5 E4 05 F1 | 	add	objptr, #229
228f8     F2 FA 01 FB | 	rdlong	result1, objptr
228fc     D0 FA 05 F1 | 	add	result1, #208
22900     FD 10 58 FC | 	wrword	#8, result1
22904                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
22904     F2 16 02 FB | 	rdlong	arg03, objptr
22908     D2 16 06 F1 | 	add	arg03, #210
2290c     0B 21 58 FC | 	wrword	#16, arg03
22910                 | ' leading_spaces:=0				'
22910     A5 E5 05 F1 | 	add	objptr, #421
22914     F2 00 68 FC | 	wrlong	#0, objptr
22918                 | ' 
22918                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
22918     99 E4 85 F1 | 	sub	objptr, #153
2291c     00 00 A0 FF 
22920     F2 0E 68 FC | 	wrlong	##1073741831, objptr
22924                 | ' emptydl[1]:=0
22924     04 E4 05 F1 | 	add	objptr, #4
22928     F2 00 68 FC | 	wrlong	#0, objptr
2292c                 | ' 
2292c                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
2292c                 | ' 
2292c                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
2292c     28 E5 85 F1 | 	sub	objptr, #296
22930     F2 02 68 FC | 	wrlong	#1, objptr
22934                 | ' if s_debug<>0
22934                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
22934     20 00 80 FF 
22938     F2 00 68 FC | 	wrlong	##16384, objptr
2293c     F9 E4 85 F1 | 	sub	objptr, #249
22940                 | ' setmode()							' set the mode, see below
22940     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
22944                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
22944     49 E4 05 F1 | 	add	objptr, #73
22948     F2 FA 01 F6 | 	mov	result1, objptr
2294c     35 E4 85 F1 | 	sub	objptr, #53
22950     F2 FA 61 FC | 	wrlong	result1, objptr
22954                 | ' cursor_ptr:=@cursor_x						
22954     28 E4 05 F1 | 	add	objptr, #40
22958     F2 16 02 F6 | 	mov	arg03, objptr
2295c     2C E4 85 F1 | 	sub	objptr, #44
22960     F2 16 62 FC | 	wrlong	arg03, objptr
22964                 | ' fontnum:=0  							' start with a PC type font 
22964     55 E4 05 F1 | 	add	objptr, #85
22968     F2 00 68 FC | 	wrlong	#0, objptr
2296c                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
2296c     1C E4 05 F1 | 	add	objptr, #28
22970     F2 12 02 F6 | 	mov	arg01, objptr
22974     81 E4 85 F1 | 	sub	objptr, #129
22978     10 00 00 FF 
2297c     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
22980     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
22984     10 00 00 FF 
22988     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
2298c     10 16 06 F6 | 	mov	arg03, #16
22990     14 2F B0 FD | 	call	#__system____builtin_memmove
22994                 | ' leading_spaces:=0
22994     01 00 00 FF 
22998     B6 E4 05 F1 | 	add	objptr, ##694
2299c     F2 00 68 FC | 	wrlong	#0, objptr
229a0     01 00 00 FF 
229a4     B6 E4 85 F1 | 	sub	objptr, ##694
229a8                 | ' '---------------------------- initialize a cursor (MSDOS type)
229a8                 | ' 
229a8                 | ' initcursor(154)
229a8     9A 12 06 F6 | 	mov	arg01, #154
229ac     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
229b0                 | ' 
229b0                 | ' '---------------------------- start the cog
229b0                 | ' 
229b0                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
229b0     10 00 00 FF 
229b4     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
229b8     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
229bc     10 00 00 FF 
229c0     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
229c4     14 E4 05 F1 | 	add	objptr, #20
229c8     10 FA 05 F6 | 	mov	result1, #16
229cc     28 E4 61 FD | 	setq	objptr
229d0     0A FB F1 FC | 	coginit	result1, arg02 wc
229d4     01 FA 65 C6 |  if_b	neg	result1, #1
229d8     1C E4 05 F1 | 	add	objptr, #28
229dc     F2 FA 61 FC | 	wrlong	result1, objptr
229e0     30 E4 85 F1 | 	sub	objptr, #48
229e4                 | ' waitms(40)							' wait for stabilize
229e4     28 12 06 F6 | 	mov	arg01, #40
229e8     90 32 B0 FD | 	call	#__system___waitms
229ec                 | ' return cog							' return the driver's cog #
229ec     30 E4 05 F1 | 	add	objptr, #48
229f0     F2 FA 01 FB | 	rdlong	result1, objptr
229f4     30 E4 85 F1 | 	sub	objptr, #48
229f8                 | _hg010b_spin2_start_ret
229f8     2D 00 64 FD | 	ret
229fc                 | 
229fc                 | ' 
229fc                 | ' 
229fc                 | ' '**************************************************************************************************************** 
229fc                 | ' '                                                                                                             	*
229fc                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
229fc                 | ' '  Mode number - see start() above or bits below								*
229fc                 | ' '                                                                                                             	*
229fc                 | ' '****************************************************************************************************************
229fc                 | ' 
229fc                 | ' '---------------------------- initialize a cursor (MSDOS type)
229fc                 | ' pub initcursor(color) |i
229fc                 | _hg010b_spin2_initcursor
229fc     03 4A 05 F6 | 	mov	COUNT_, #3
22a00     A8 00 A0 FD | 	call	#pushregs_
22a04     09 27 02 F6 | 	mov	local01, arg01
22a08                 | ' 
22a08                 | ' cursor_x:=0							' place the cursor at 0:0
22a08     3C E4 05 F1 | 	add	objptr, #60
22a0c     F2 00 58 FC | 	wrword	#0, objptr
22a10                 | ' cursor_y:=0
22a10     02 E4 05 F1 | 	add	objptr, #2
22a14     F2 00 48 FC | 	wrbyte	#0, objptr
22a18                 | ' repeat i from 0 to 111
22a18     00 28 06 F6 | 	mov	local02, #0
22a1c     F8 E5 05 F1 | 	add	objptr, #504
22a20     97 1A 48 FB | 	callpa	#(@LR__2682-@LR__2680)>>2,fcache_load_ptr_
22a24                 | LR__2680
22a24                 | '   cursor[i]:=0
22a24     14 2B 02 F6 | 	mov	local03, local02
22a28     F2 2A 02 F1 | 	add	local03, objptr
22a2c     15 01 48 FC | 	wrbyte	#0, local03
22a30     01 28 06 F1 | 	add	local02, #1
22a34     70 28 56 F2 | 	cmps	local02, #112 wc
22a38     E8 FF 9F CD |  if_b	jmp	#LR__2680
22a3c                 | ' repeat i from 112 to 127
22a3c     70 28 06 F6 | 	mov	local02, #112
22a40                 | LR__2681
22a40                 | '   cursor[i]:=color  
22a40     14 2B 02 F6 | 	mov	local03, local02
22a44     F2 2A 02 F1 | 	add	local03, objptr
22a48     15 27 42 FC | 	wrbyte	local01, local03
22a4c     01 28 06 F1 | 	add	local02, #1
22a50     80 28 16 F2 | 	cmp	local02, #128 wc
22a54     E8 FF 9F CD |  if_b	jmp	#LR__2681
22a58                 | LR__2682
22a58                 | ' 'repeat i from 0 to 127
22a58                 | ' '  if ((i/8)//2)
22a58                 | ' '    cursor[i]:=15
22a58                 | ' '  else
22a58                 | ' '    cursor[i]:=0
22a58                 | ' '  if i>=120    
22a58                 | ' '    cursor[i]:=40
22a58                 | ' setspriteptr(17,@cursor)
22a58     F2 14 02 F6 | 	mov	arg02, objptr
22a5c     01 00 00 FF 
22a60     36 E4 85 F1 | 	sub	objptr, ##566
22a64     11 12 06 F6 | 	mov	arg01, #17
22a68     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
22a6c                 | ' setspritesize(17,8,16)
22a6c     11 12 06 F6 | 	mov	arg01, #17
22a70     08 14 06 F6 | 	mov	arg02, #8
22a74     10 16 06 F6 | 	mov	arg03, #16
22a78     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
22a7c                 | ' setspritepos(17,0,0)
22a7c     11 12 06 F6 | 	mov	arg01, #17
22a80     00 14 06 F6 | 	mov	arg02, #0
22a84     00 16 06 F6 | 	mov	arg03, #0
22a88     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
22a8c                 | ' cursorshape:=14
22a8c     0B 00 00 FF 
22a90     C6 E4 05 F1 | 	add	objptr, ##5830
22a94     F2 1C 68 FC | 	wrlong	#14, objptr
22a98                 | ' cursorcolor:=color
22a98     04 E4 85 F1 | 	sub	objptr, #4
22a9c     F2 26 62 FC | 	wrlong	local01, objptr
22aa0     0B 00 00 FF 
22aa4     C2 E4 85 F1 | 	sub	objptr, ##5826
22aa8     A7 F0 03 F6 | 	mov	ptra, fp
22aac     B2 00 A0 FD | 	call	#popregs_
22ab0                 | _hg010b_spin2_initcursor_ret
22ab0     2D 00 64 FD | 	ret
22ab4                 | 
22ab4                 | ' 
22ab4                 | ' pub setcursorshape(shape) | i
22ab4                 | _hg010b_spin2_setcursorshape
22ab4                 | ' 
22ab4                 | ' cursorshape:=shape
22ab4     0B 00 00 FF 
22ab8     C6 E4 05 F1 | 	add	objptr, ##5830
22abc     F2 12 62 FC | 	wrlong	arg01, objptr
22ac0                 | ' repeat i from 0 to (8*cursorshape)-1
22ac0     00 00 06 F6 | 	mov	_var01, #0
22ac4     09 03 02 F6 | 	mov	_var02, arg01
22ac8     03 02 66 F0 | 	shl	_var02, #3
22acc     01 02 86 F1 | 	sub	_var02, #1
22ad0     00 02 56 F2 | 	cmps	_var02, #0 wc
22ad4     01 04 86 F6 | 	negc	_var03, #1
22ad8     02 07 02 F6 | 	mov	_var04, _var03
22adc     02 03 02 F1 | 	add	_var02, _var03
22ae0     0A 00 00 FF 
22ae4     90 E4 85 F1 | 	sub	objptr, ##5264
22ae8     97 0C 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
22aec                 | LR__2690
22aec                 | '   cursor[i]:=0
22aec     00 05 02 F6 | 	mov	_var03, _var01
22af0     F2 04 02 F1 | 	add	_var03, objptr
22af4     02 01 48 FC | 	wrbyte	#0, _var03
22af8     03 01 02 F1 | 	add	_var01, _var04
22afc     01 01 0A F2 | 	cmp	_var01, _var02 wz
22b00     E8 FF 9F 5D |  if_ne	jmp	#LR__2690
22b04                 | LR__2691
22b04                 | ' repeat i from 8*cursorshape to 127
22b04     0A 00 00 FF 
22b08     90 E4 05 F1 | 	add	objptr, ##5264
22b0c     F2 06 02 FB | 	rdlong	_var04, objptr
22b10     03 01 02 F6 | 	mov	_var01, _var04
22b14     03 00 66 F0 | 	shl	_var01, #3
22b18     0B 00 00 FF 
22b1c     C6 E4 85 F1 | 	sub	objptr, ##5830
22b20     03 06 66 F0 | 	shl	_var04, #3
22b24     80 06 56 F2 | 	cmps	_var04, #128 wc
22b28     01 04 A6 F6 | 	negnc	_var03, #1
22b2c     7F 02 06 F6 | 	mov	_var02, #127
22b30     02 03 02 F1 | 	add	_var02, _var03
22b34     97 1A 48 FB | 	callpa	#(@LR__2693-@LR__2692)>>2,fcache_load_ptr_
22b38                 | LR__2692
22b38                 | '   cursor[i]:=cursorcolor
22b38     00 07 02 F6 | 	mov	_var04, _var01
22b3c     01 00 00 FF 
22b40     36 E4 05 F1 | 	add	objptr, ##566
22b44     F2 06 02 F1 | 	add	_var04, objptr
22b48     0A 00 00 FF 
22b4c     8C E4 05 F1 | 	add	objptr, ##5260
22b50     F2 12 02 FB | 	rdlong	arg01, objptr
22b54     0B 00 00 FF 
22b58     C2 E4 85 F1 | 	sub	objptr, ##5826
22b5c     03 13 42 FC | 	wrbyte	arg01, _var04
22b60     02 01 02 F1 | 	add	_var01, _var03
22b64     01 01 0A F2 | 	cmp	_var01, _var02 wz
22b68     CC FF 9F 5D |  if_ne	jmp	#LR__2692
22b6c                 | LR__2693
22b6c                 | _hg010b_spin2_setcursorshape_ret
22b6c     2D 00 64 FD | 	ret
22b70                 | 
22b70                 | ' 
22b70                 | ' pub setcursorcolor(color) | i
22b70                 | _hg010b_spin2_setcursorcolor
22b70                 | ' 
22b70                 | ' cursorcolor:=color
22b70     0B 00 00 FF 
22b74     C2 E4 05 F1 | 	add	objptr, ##5826
22b78     F2 12 62 FC | 	wrlong	arg01, objptr
22b7c                 | ' repeat i from 0 to (8*cursorshape)-1
22b7c     00 12 06 F6 | 	mov	arg01, #0
22b80     04 E4 05 F1 | 	add	objptr, #4
22b84     F2 00 02 FB | 	rdlong	_var01, objptr
22b88     03 00 66 F0 | 	shl	_var01, #3
22b8c     01 00 86 F1 | 	sub	_var01, #1
22b90     00 00 56 F2 | 	cmps	_var01, #0 wc
22b94     01 02 86 F6 | 	negc	_var02, #1
22b98     01 05 02 F6 | 	mov	_var03, _var02
22b9c     01 01 02 F1 | 	add	_var01, _var02
22ba0     0A 00 00 FF 
22ba4     90 E4 85 F1 | 	sub	objptr, ##5264
22ba8     97 0C 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
22bac                 | LR__2700
22bac                 | '   cursor[i]:=0
22bac     09 03 02 F6 | 	mov	_var02, arg01
22bb0     F2 02 02 F1 | 	add	_var02, objptr
22bb4     01 01 48 FC | 	wrbyte	#0, _var02
22bb8     02 13 02 F1 | 	add	arg01, _var03
22bbc     00 13 0A F2 | 	cmp	arg01, _var01 wz
22bc0     E8 FF 9F 5D |  if_ne	jmp	#LR__2700
22bc4                 | LR__2701
22bc4                 | ' repeat i from 8*cursorshape to 127
22bc4     0A 00 00 FF 
22bc8     90 E4 05 F1 | 	add	objptr, ##5264
22bcc     F2 04 02 FB | 	rdlong	_var03, objptr
22bd0     02 13 02 F6 | 	mov	arg01, _var03
22bd4     03 12 66 F0 | 	shl	arg01, #3
22bd8     0B 00 00 FF 
22bdc     C6 E4 85 F1 | 	sub	objptr, ##5830
22be0     03 04 66 F0 | 	shl	_var03, #3
22be4     80 04 56 F2 | 	cmps	_var03, #128 wc
22be8     01 02 A6 F6 | 	negnc	_var02, #1
22bec     7F 00 06 F6 | 	mov	_var01, #127
22bf0     01 01 02 F1 | 	add	_var01, _var02
22bf4     97 1A 48 FB | 	callpa	#(@LR__2703-@LR__2702)>>2,fcache_load_ptr_
22bf8                 | LR__2702
22bf8                 | '   cursor[i]:=cursorcolor
22bf8     09 05 02 F6 | 	mov	_var03, arg01
22bfc     01 00 00 FF 
22c00     36 E4 05 F1 | 	add	objptr, ##566
22c04     F2 04 02 F1 | 	add	_var03, objptr
22c08     0A 00 00 FF 
22c0c     8C E4 05 F1 | 	add	objptr, ##5260
22c10     F2 06 02 FB | 	rdlong	_var04, objptr
22c14     0B 00 00 FF 
22c18     C2 E4 85 F1 | 	sub	objptr, ##5826
22c1c     02 07 42 FC | 	wrbyte	_var04, _var03
22c20     01 13 02 F1 | 	add	arg01, _var02
22c24     00 13 0A F2 | 	cmp	arg01, _var01 wz
22c28     CC FF 9F 5D |  if_ne	jmp	#LR__2702
22c2c                 | LR__2703
22c2c                 | _hg010b_spin2_setcursorcolor_ret
22c2c     2D 00 64 FD | 	ret
22c30                 | 
22c30                 | '   
22c30                 | '   
22c30                 | '   
22c30                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
22c30                 | _hg010b_spin2_setmode
22c30     02 4A 05 F6 | 	mov	COUNT_, #2
22c34     A8 00 A0 FD | 	call	#pushregs_
22c38                 | ' 
22c38                 | ' 
22c38                 | ' dl_ptr:=@emptydl[0]
22c38     01 00 00 FF 
22c3c     1D E4 05 F1 | 	add	objptr, ##541
22c40     F2 1A 02 F6 | 	mov	arg05, objptr
22c44     FD E5 85 F1 | 	sub	objptr, #509
22c48     F2 1A 62 FC | 	wrlong	arg05, objptr
22c4c                 | ' 
22c4c                 | ' if cog>0 
22c4c     10 E4 05 F1 | 	add	objptr, #16
22c50     F2 1A 02 FB | 	rdlong	arg05, objptr
22c54     30 E4 85 F1 | 	sub	objptr, #48
22c58     01 1A 56 F2 | 	cmps	arg05, #1 wc
22c5c                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
22c5c     01 12 06 36 |  if_ae	mov	arg01, #1
22c60     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
22c64                 | ' xres:=1024
22c64     01 00 00 FF 
22c68     26 E4 05 F1 | 	add	objptr, ##550
22c6c     02 00 80 FF 
22c70     F2 00 68 FC | 	wrlong	##1024, objptr
22c74                 | ' yres:=600
22c74     04 E4 05 F1 | 	add	objptr, #4
22c78     01 00 80 FF 
22c7c     F2 B0 68 FC | 	wrlong	##600, objptr
22c80                 | ' ppl:=(timings[3])
22c80     10 00 00 FF 
22c84     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
22c88     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
22c8c     51 E5 85 F1 | 	sub	objptr, #337
22c90     F2 1A 62 FC | 	wrlong	arg05, objptr
22c94                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
22c94     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
22c98     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
22c9c     01 26 66 F0 | 	shl	local01, #1
22ca0     80 E4 85 F1 | 	sub	objptr, #128
22ca4     F2 26 62 FC | 	wrlong	local01, objptr
22ca8                 | ' cpl1:=cpl '' todo remove
22ca8     04 E4 05 F1 | 	add	objptr, #4
22cac     F2 26 62 FC | 	wrlong	local01, objptr
22cb0                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
22cb0     02 00 00 FF 
22cb4     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
22cb8     41 E4 85 F1 | 	sub	objptr, #65
22cbc     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
22cc0                 | ' repeat i from 0 to 3
22cc0     00 28 06 F6 | 	mov	local02, #0
22cc4     02 00 00 FF 
22cc8     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
22ccc     08 E4 05 F1 | 	add	objptr, #8
22cd0     97 20 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
22cd4                 | LR__2710
22cd4                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
22cd4     14 27 02 F6 | 	mov	local01, local02
22cd8     02 26 66 F0 | 	shl	local01, #2
22cdc     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
22ce0     F2 1A 02 FB | 	rdlong	arg05, objptr
22ce4     11 1A 66 F0 | 	shl	arg05, #17
22ce8     13 27 02 FB | 	rdlong	local01, local01
22cec     0D 27 02 F1 | 	add	local01, arg05
22cf0     80 40 38 FF 
22cf4     00 26 06 F1 | 	add	local01, ##1887502336
22cf8     14 1B 02 F6 | 	mov	arg05, local02
22cfc     02 1A 66 F0 | 	shl	arg05, #2
22d00     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
22d04     0D 27 62 FC | 	wrlong	local01, arg05
22d08     01 28 06 F1 | 	add	local02, #1
22d0c     04 28 56 F2 | 	cmps	local02, #4 wc
22d10     C0 FF 9F CD |  if_b	jmp	#LR__2710
22d14                 | LR__2711
22d14     24 E4 85 F1 | 	sub	objptr, #36
22d18                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
22d18     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
22d1c     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
22d20     14 26 66 FC | 	wrlong	local01, #20
22d24                 | ' hubset(timings[10])
22d24     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
22d28     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
22d2c     10 00 00 FF 
22d30     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
22d34     00 12 62 FD | 	hubset	arg01
22d38                 | ' waitms(1)                                                   	' wait for stabilization
22d38     01 12 06 F6 | 	mov	arg01, #1
22d3c     3C 2F B0 FD | 	call	#__system___waitms
22d40     10 00 00 FF 
22d44     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
22d48     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
22d4c     61 E4 05 F1 | 	add	objptr, #97
22d50     F2 28 62 FC | 	wrlong	local02, objptr
22d54     14 27 52 F6 | 	abs	local01, local02 wc
22d58     04 26 46 F0 | 	shr	local01, #4
22d5c     13 27 82 F6 | 	negc	local01, local01
22d60     9C E4 05 F1 | 	add	objptr, #156
22d64     F2 26 62 FC | 	wrlong	local01, objptr
22d68     A4 E4 85 F1 | 	sub	objptr, #164
22d6c     F2 28 02 FB | 	rdlong	local02, objptr
22d70     08 E4 05 F1 | 	add	objptr, #8
22d74     F2 26 02 FB | 	rdlong	local01, objptr
22d78     13 29 02 FD | 	qmul	local02, local01
22d7c                 | ' lines:=timings[11]
22d7c                 | ' t_lines:=lines/16
22d7c                 | ' buflen:=cpl*lines						' framebuffer length in longs
22d7c     29 E4 85 F1 | 	sub	objptr, #41
22d80     19 26 C6 F9 | 	decod	local01, #25
22d84     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
22d88     18 28 62 FD | 	getqx	local02
22d8c     F2 28 62 FC | 	wrlong	local02, objptr
22d90     38 E4 85 F1 | 	sub	objptr, #56
22d94     02 28 66 F0 | 	shl	local02, #2
22d98     14 27 82 F1 | 	sub	local01, local02
22d9c     F2 26 62 FC | 	wrlong	local01, objptr
22da0     FD E4 05 F1 | 	add	objptr, #253
22da4     F2 28 02 FB | 	rdlong	local02, objptr
22da8     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
22dac     0D 29 02 FD | 	qmul	local02, arg05
22db0                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
22db0                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
22db0     F9 E4 85 F1 | 	sub	objptr, #249
22db4                 | ' mode_ptr:=@timings						' set pointers to timings
22db4     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
22db8                 | ' graphmode:=1024+512+192+48							' det global variable
22db8                 | ' makedl(graphmode)							' make a DL for the mode
22db8     03 00 00 FF 
22dbc     F0 12 06 F6 | 	mov	arg01, ##1776
22dc0     18 28 62 FD | 	getqx	local02
22dc4     14 27 82 F1 | 	sub	local01, local02
22dc8     F2 26 62 FC | 	wrlong	local01, objptr
22dcc     14 E4 05 F1 | 	add	objptr, #20
22dd0     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
22dd4     79 E4 05 F1 | 	add	objptr, #121
22dd8     03 00 80 FF 
22ddc     F2 E0 69 FC | 	wrlong	##1776, objptr
22de0     91 E4 85 F1 | 	sub	objptr, #145
22de4     10 00 00 FF 
22de8     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
22dec     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
22df0                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
22df0     F2 26 02 FB | 	rdlong	local01, objptr
22df4     DD E4 05 F1 | 	add	objptr, #221
22df8     F2 26 62 FC | 	wrlong	local01, objptr
22dfc                 | ' s_font_ptr:=font_ptr
22dfc     D5 E4 85 F1 | 	sub	objptr, #213
22e00     F2 26 02 FB | 	rdlong	local01, objptr
22e04     D9 E4 05 F1 | 	add	objptr, #217
22e08     F2 26 62 FC | 	wrlong	local01, objptr
22e0c                 | ' s_lines:=lines
22e0c     80 E4 85 F1 | 	sub	objptr, #128
22e10     F2 26 02 FB | 	rdlong	local01, objptr
22e14     84 E4 05 F1 | 	add	objptr, #132
22e18     F2 26 62 FC | 	wrlong	local01, objptr
22e1c                 | ' s_buflen:=buflen
22e1c     AD E4 85 F1 | 	sub	objptr, #173
22e20     F2 26 02 FB | 	rdlong	local01, objptr
22e24     B5 E4 05 F1 | 	add	objptr, #181
22e28     F2 26 62 FC | 	wrlong	local01, objptr
22e2c                 | ' s_cpl:=cpl
22e2c     94 E4 85 F1 | 	sub	objptr, #148
22e30     F2 26 02 FB | 	rdlong	local01, objptr
22e34     90 E4 05 F1 | 	add	objptr, #144
22e38     F2 26 62 FC | 	wrlong	local01, objptr
22e3c                 | ' s_cpl1:=cpl
22e3c     90 E4 85 F1 | 	sub	objptr, #144
22e40     F2 26 02 FB | 	rdlong	local01, objptr
22e44     98 E4 05 F1 | 	add	objptr, #152
22e48     F2 26 62 FC | 	wrlong	local01, objptr
22e4c                 | ' st_lines:=t_lines
22e4c     0C E4 05 F1 | 	add	objptr, #12
22e50     F2 26 02 FB | 	rdlong	local01, objptr
22e54     04 E4 05 F1 | 	add	objptr, #4
22e58     F2 26 62 FC | 	wrlong	local01, objptr
22e5c                 | ' ppl:=ppl/xzoom  
22e5c     28 E4 85 F1 | 	sub	objptr, #40
22e60     F2 88 02 FB | 	rdlong	muldiva_, objptr
22e64     2C E4 05 F1 | 	add	objptr, #44
22e68     F2 8A 02 FB | 	rdlong	muldivb_, objptr
22e6c     05 E5 85 F1 | 	sub	objptr, #261
22e70     BA 00 A0 FD | 	call	#divide_
22e74     D9 E4 05 F1 | 	add	objptr, #217
22e78     F2 8A 62 FC | 	wrlong	muldivb_, objptr
22e7c                 | ' s_ppl:=ppl
22e7c     1C E4 05 F1 | 	add	objptr, #28
22e80     F2 8A 62 FC | 	wrlong	muldivb_, objptr
22e84     F5 E4 85 F1 | 	sub	objptr, #245
22e88                 | ' waitms(20)							' wait 
22e88     14 12 06 F6 | 	mov	arg01, #20
22e8c     EC 2D B0 FD | 	call	#__system___waitms
22e90                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
22e90     04 E4 05 F1 | 	add	objptr, #4
22e94     F2 12 02 FB | 	rdlong	arg01, objptr
22e98     04 E4 85 F1 | 	sub	objptr, #4
22e9c     F2 16 02 FB | 	rdlong	arg03, objptr
22ea0     09 17 82 F1 | 	sub	arg03, arg01
22ea4     20 14 06 F6 | 	mov	arg02, #32
22ea8     00 18 06 F6 | 	mov	arg04, #0
22eac     01 1A 06 F6 | 	mov	arg05, #1
22eb0     0B 00 00 FF 
22eb4     CC E4 05 F1 | 	add	objptr, ##5836
22eb8     7C 1F B0 FD | 	call	#_psram_spin2_fill
22ebc     0B 00 00 FF 
22ec0     CC E4 85 F1 | 	sub	objptr, ##5836
22ec4     A7 F0 03 F6 | 	mov	ptra, fp
22ec8     B2 00 A0 FD | 	call	#popregs_
22ecc                 | _hg010b_spin2_setmode_ret
22ecc     2D 00 64 FD | 	ret
22ed0                 | 
22ed0                 | ' 
22ed0                 | ' '****************************************************************************************************************
22ed0                 | ' '                                                                                                             	*
22ed0                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
22ed0                 | ' '                                                                                                             	*
22ed0                 | ' '****************************************************************************************************************
22ed0                 | ' 
22ed0                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
22ed0                 | _hg010b_spin2_makedl
22ed0                 | ' 
22ed0                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
22ed0                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
22ed0                 | ' repeat i from 0 to 11                                                           ' clear DL
22ed0     00 00 06 F6 | 	mov	_var01, #0
22ed4     ED E5 05 F1 | 	add	objptr, #493
22ed8     97 0E 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
22edc                 | LR__2720
22edc                 | '   displaylist[i]:=0 
22edc     00 03 02 F6 | 	mov	_var02, _var01
22ee0     02 02 66 F0 | 	shl	_var02, #2
22ee4     F2 02 02 F1 | 	add	_var02, objptr
22ee8     01 01 68 FC | 	wrlong	#0, _var02
22eec     01 00 06 F1 | 	add	_var01, #1
22ef0     0C 00 56 F2 | 	cmps	_var01, #12 wc
22ef4     E4 FF 9F CD |  if_b	jmp	#LR__2720
22ef8                 | LR__2721
22ef8                 | '                         ' 
22ef8                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
22ef8     8C E5 85 F1 | 	sub	objptr, #396
22efc     F2 02 02 FB | 	rdlong	_var02, objptr
22f00     14 02 66 F0 | 	shl	_var02, #20
22f04     01 02 06 F1 | 	add	_var02, #1
22f08     04 E4 85 F1 | 	sub	objptr, #4
22f0c     F2 00 02 FB | 	rdlong	_var01, objptr
22f10     02 00 66 F0 | 	shl	_var01, #2
22f14     04 00 66 F0 | 	shl	_var01, #4
22f18     00 03 02 F1 | 	add	_var02, _var01
22f1c     90 E5 05 F1 | 	add	objptr, #400
22f20     F2 02 62 FC | 	wrlong	_var02, objptr
22f24     ED E5 85 F1 | 	sub	objptr, #493
22f28                 | ' displaylist[1]:=buf_ptr<<4+%10  
22f28     F2 02 02 FB | 	rdlong	_var02, objptr
22f2c     04 02 66 F0 | 	shl	_var02, #4
22f30     02 02 06 F1 | 	add	_var02, #2
22f34     F1 E5 05 F1 | 	add	objptr, #497
22f38     F2 02 62 FC | 	wrlong	_var02, objptr
22f3c                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
22f3c     04 E4 85 F1 | 	sub	objptr, #4
22f40     F2 02 02 F6 | 	mov	_var02, objptr
22f44     CD E5 85 F1 | 	sub	objptr, #461
22f48     F2 02 62 FC | 	wrlong	_var02, objptr
22f4c     20 E4 85 F1 | 	sub	objptr, #32
22f50                 | _hg010b_spin2_makedl_ret
22f50     2D 00 64 FD | 	ret
22f54                 | 
22f54                 | ' 
22f54                 | ' 
22f54                 | ' '****************************************************************************************************************
22f54                 | ' '                                                                        					*
22f54                 | ' '  Graphic primitives                                                    					*
22f54                 | ' '                                                                        					*
22f54                 | ' '****************************************************************************************************************
22f54                 | ' 
22f54                 | ' pub setspriteptr(num,ptr)
22f54                 | _hg010b_spin2_setspriteptr
22f54                 | ' long[@spr1ptr+12*num]:=ptr
22f54     11 E5 05 F1 | 	add	objptr, #273
22f58     F2 00 02 F6 | 	mov	_var01, objptr
22f5c     09 03 02 F6 | 	mov	_var02, arg01
22f60     01 02 66 F0 | 	shl	_var02, #1
22f64     09 03 02 F1 | 	add	_var02, arg01
22f68     02 02 66 F0 | 	shl	_var02, #2
22f6c     01 01 02 F1 | 	add	_var01, _var02
22f70     00 15 62 FC | 	wrlong	arg02, _var01
22f74     11 E5 85 F1 | 	sub	objptr, #273
22f78                 | _hg010b_spin2_setspriteptr_ret
22f78     2D 00 64 FD | 	ret
22f7c                 | 
22f7c                 | ' 
22f7c                 | ' pub setspritepos(num,x,y)
22f7c                 | _hg010b_spin2_setspritepos
22f7c                 | ' if y>601
22f7c     01 00 00 FF 
22f80     5A 16 56 F2 | 	cmps	arg03, ##602 wc
22f84                 | '   y:=601
22f84     01 00 00 3F 
22f88     59 16 06 36 |  if_ae	mov	arg03, ##601
22f8c                 | ' if x>1024
22f8c     02 00 00 FF 
22f90     01 14 56 F2 | 	cmps	arg02, ##1025 wc
22f94                 | '   x:=1024
22f94     0A 14 C6 39 |  if_ae	decod	arg02, #10
22f98                 | ' word[@spr1ptr+12*num+4]:=x
22f98     11 E5 05 F1 | 	add	objptr, #273
22f9c     F2 00 02 F6 | 	mov	_var01, objptr
22fa0     09 03 02 F6 | 	mov	_var02, arg01
22fa4     01 02 66 F0 | 	shl	_var02, #1
22fa8     09 03 02 F1 | 	add	_var02, arg01
22fac     02 02 66 F0 | 	shl	_var02, #2
22fb0     01 01 02 F1 | 	add	_var01, _var02
22fb4     04 00 06 F1 | 	add	_var01, #4
22fb8     00 15 52 FC | 	wrword	arg02, _var01
22fbc                 | ' word[@spr1ptr+12*num+6]:=y
22fbc     F2 00 02 F6 | 	mov	_var01, objptr
22fc0     09 03 02 F6 | 	mov	_var02, arg01
22fc4     01 02 66 F0 | 	shl	_var02, #1
22fc8     09 03 02 F1 | 	add	_var02, arg01
22fcc     02 02 66 F0 | 	shl	_var02, #2
22fd0     01 01 02 F1 | 	add	_var01, _var02
22fd4     06 00 06 F1 | 	add	_var01, #6
22fd8     00 17 52 FC | 	wrword	arg03, _var01
22fdc     11 E5 85 F1 | 	sub	objptr, #273
22fe0                 | _hg010b_spin2_setspritepos_ret
22fe0     2D 00 64 FD | 	ret
22fe4                 | 
22fe4                 | ' 
22fe4                 | ' pub setspritesize(num,w,h)
22fe4                 | _hg010b_spin2_setspritesize
22fe4                 | ' word[@spr1ptr+12*num+8]:=w
22fe4     11 E5 05 F1 | 	add	objptr, #273
22fe8     F2 00 02 F6 | 	mov	_var01, objptr
22fec     09 03 02 F6 | 	mov	_var02, arg01
22ff0     01 02 66 F0 | 	shl	_var02, #1
22ff4     09 03 02 F1 | 	add	_var02, arg01
22ff8     02 02 66 F0 | 	shl	_var02, #2
22ffc     01 01 02 F1 | 	add	_var01, _var02
23000     08 00 06 F1 | 	add	_var01, #8
23004     00 15 52 FC | 	wrword	arg02, _var01
23008                 | ' word[@spr1ptr+12*num+10]:=h
23008     F2 00 02 F6 | 	mov	_var01, objptr
2300c     09 03 02 F6 | 	mov	_var02, arg01
23010     01 02 66 F0 | 	shl	_var02, #1
23014     09 03 02 F1 | 	add	_var02, arg01
23018     02 02 66 F0 | 	shl	_var02, #2
2301c     01 01 02 F1 | 	add	_var01, _var02
23020     0A 00 06 F1 | 	add	_var01, #10
23024     00 17 52 FC | 	wrword	arg03, _var01
23028     11 E5 85 F1 | 	sub	objptr, #273
2302c                 | _hg010b_spin2_setspritesize_ret
2302c     2D 00 64 FD | 	ret
23030                 | 
23030                 | ' 
23030                 | ' 
23030                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
23030                 | ' 
23030                 | ' 
23030                 | ' pub putpixel(x,y,c)
23030                 | _hg010b_spin2_putpixel
23030     04 4A 05 F6 | 	mov	COUNT_, #4
23034     A8 00 A0 FD | 	call	#pushregs_
23038     09 27 02 F6 | 	mov	local01, arg01
2303c                 | ' 
2303c                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
2303c     00 28 06 F6 | 	mov	local02, #0
23040     00 26 56 F2 | 	cmps	local01, #0 wc
23044     01 28 66 36 |  if_ae	neg	local02, #1
23048     E9 E4 05 F1 | 	add	objptr, #233
2304c     F2 1A 02 FB | 	rdlong	arg05, objptr
23050     02 1A 66 F0 | 	shl	arg05, #2
23054     0D 27 52 F2 | 	cmps	local01, arg05 wc
23058     15 2B A2 F1 | 	subx	local03, local03
2305c     15 29 02 F5 | 	and	local02, local03
23060     00 2A 06 F6 | 	mov	local03, #0
23064     00 14 56 F2 | 	cmps	arg02, #0 wc
23068     01 2A 66 36 |  if_ae	neg	local03, #1
2306c     15 29 02 F5 | 	and	local02, local03
23070     04 E4 85 F1 | 	sub	objptr, #4
23074     F2 2A 02 FB | 	rdlong	local03, objptr
23078     E5 E4 85 F1 | 	sub	objptr, #229
2307c     15 15 52 F2 | 	cmps	arg02, local03 wc
23080     16 2D A2 F1 | 	subx	local04, local04
23084     16 29 CA F7 | 	test	local02, local04 wz
23088     48 00 90 AD |  if_e	jmp	#LR__2730
2308c     DD E4 05 F1 | 	add	objptr, #221
23090     F2 12 02 FB | 	rdlong	arg01, objptr
23094     14 E4 05 F1 | 	add	objptr, #20
23098     F2 2C 02 FB | 	rdlong	local04, objptr
2309c     02 2C 66 F0 | 	shl	local04, #2
230a0     0A 2D 02 FD | 	qmul	local04, arg02
230a4                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
230a4     0B 15 02 F6 | 	mov	arg02, arg03
230a8     01 16 06 F6 | 	mov	arg03, #1
230ac     00 18 06 F6 | 	mov	arg04, #0
230b0     01 1A 06 F6 | 	mov	arg05, #1
230b4     0A 00 00 FF 
230b8     DB E5 05 F1 | 	add	objptr, ##5595
230bc     18 2C 62 FD | 	getqx	local04
230c0     13 2D 02 F1 | 	add	local04, local01
230c4     16 13 02 F1 | 	add	arg01, local04
230c8     6C 1D B0 FD | 	call	#_psram_spin2_fill
230cc     0B 00 00 FF 
230d0     CC E4 85 F1 | 	sub	objptr, ##5836
230d4                 | LR__2730
230d4     A7 F0 03 F6 | 	mov	ptra, fp
230d8     B2 00 A0 FD | 	call	#popregs_
230dc                 | _hg010b_spin2_putpixel_ret
230dc     2D 00 64 FD | 	ret
230e0                 | 
230e0                 | ' 
230e0                 | ' pub putpixel2(x,y,c)
230e0                 | _hg010b_spin2_putpixel2
230e0     02 4A 05 F6 | 	mov	COUNT_, #2
230e4     A8 00 A0 FD | 	call	#pushregs_
230e8     DD E4 05 F1 | 	add	objptr, #221
230ec     F2 26 02 FB | 	rdlong	local01, objptr
230f0     14 E4 05 F1 | 	add	objptr, #20
230f4     F2 1A 02 FB | 	rdlong	arg05, objptr
230f8     02 1A 66 F0 | 	shl	arg05, #2
230fc     0A 1B 02 FD | 	qmul	arg05, arg02
23100                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
23100     0B 15 02 F6 | 	mov	arg02, arg03
23104     01 16 06 F6 | 	mov	arg03, #1
23108     00 18 06 F6 | 	mov	arg04, #0
2310c     01 1A 06 F6 | 	mov	arg05, #1
23110     0A 00 00 FF 
23114     DB E5 05 F1 | 	add	objptr, ##5595
23118     18 28 62 FD | 	getqx	local02
2311c     09 29 02 F1 | 	add	local02, arg01
23120     14 27 02 F1 | 	add	local01, local02
23124     13 13 02 F6 | 	mov	arg01, local01
23128     0C 1D B0 FD | 	call	#_psram_spin2_fill
2312c     0B 00 00 FF 
23130     CC E4 85 F1 | 	sub	objptr, ##5836
23134     A7 F0 03 F6 | 	mov	ptra, fp
23138     B2 00 A0 FD | 	call	#popregs_
2313c                 | _hg010b_spin2_putpixel2_ret
2313c     2D 00 64 FD | 	ret
23140                 | 
23140                 | ' 
23140                 | ' pub getpixel2(x,y): c 
23140                 | _hg010b_spin2_getpixel2
23140     02 4A 05 F6 | 	mov	COUNT_, #2
23144     A8 00 A0 FD | 	call	#pushregs_
23148     0C F0 07 F1 | 	add	ptra, #12
2314c     04 4E 05 F1 | 	add	fp, #4
23150     A7 12 62 FC | 	wrlong	arg01, fp
23154     04 4E 05 F1 | 	add	fp, #4
23158     A7 14 62 FC | 	wrlong	arg02, fp
2315c     08 4E 85 F1 | 	sub	fp, #8
23160     A7 00 68 FC | 	wrlong	#0, fp
23164     A7 12 02 F6 | 	mov	arg01, fp
23168     DD E4 05 F1 | 	add	objptr, #221
2316c     F2 14 02 FB | 	rdlong	arg02, objptr
23170     14 E4 05 F1 | 	add	objptr, #20
23174     F2 16 02 FB | 	rdlong	arg03, objptr
23178     02 16 66 F0 | 	shl	arg03, #2
2317c     08 4E 05 F1 | 	add	fp, #8
23180     A7 FA 01 FB | 	rdlong	result1, fp
23184     FD 16 02 FD | 	qmul	arg03, result1
23188                 | ' 
23188                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
23188     04 4E 85 F1 | 	sub	fp, #4
2318c     A7 26 02 FB | 	rdlong	local01, fp
23190     04 4E 85 F1 | 	sub	fp, #4
23194     01 16 06 F6 | 	mov	arg03, #1
23198     0A 00 00 FF 
2319c     DB E5 05 F1 | 	add	objptr, ##5595
231a0     18 28 62 FD | 	getqx	local02
231a4     13 29 02 F1 | 	add	local02, local01
231a8     14 15 02 F1 | 	add	arg02, local02
231ac     50 1B B0 FD | 	call	#_psram_spin2_read1
231b0     0B 00 00 FF 
231b4     CC E4 85 F1 | 	sub	objptr, ##5836
231b8                 | ' return c
231b8     A7 FA 01 FB | 	rdlong	result1, fp
231bc     A7 F0 03 F6 | 	mov	ptra, fp
231c0     B2 00 A0 FD | 	call	#popregs_
231c4                 | _hg010b_spin2_getpixel2_ret
231c4     2D 00 64 FD | 	ret
231c8                 | 
231c8                 | '   
231c8                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
231c8                 | ' 
231c8                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
231c8                 | _hg010b_spin2_fastline
231c8     02 4A 05 F6 | 	mov	COUNT_, #2
231cc     A8 00 A0 FD | 	call	#pushregs_
231d0     09 27 02 F6 | 	mov	local01, arg01
231d4     0A 29 02 F6 | 	mov	local02, arg02
231d8                 | ' 
231d8                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
231d8     00 16 56 F2 | 	cmps	arg03, #0 wc
231dc     F4 00 90 CD |  if_b	jmp	#LR__2740
231e0     01 00 00 FF 
231e4     2A E4 05 F1 | 	add	objptr, ##554
231e8     F2 1A 02 FB | 	rdlong	arg05, objptr
231ec     01 00 00 FF 
231f0     2A E4 85 F1 | 	sub	objptr, ##554
231f4     0D 17 52 F2 | 	cmps	arg03, arg05 wc
231f8     D8 00 90 3D |  if_ae	jmp	#LR__2740
231fc     00 26 56 F2 | 	cmps	local01, #0 wc
23200     00 28 56 C2 |  if_b	cmps	local02, #0 wc
23204     CC 00 90 CD |  if_b	jmp	#LR__2740
23208     01 00 00 FF 
2320c     26 E4 05 F1 | 	add	objptr, ##550
23210     F2 1A 02 FB | 	rdlong	arg05, objptr
23214     01 00 00 FF 
23218     26 E4 85 F1 | 	sub	objptr, ##550
2321c     0D 27 5A F2 | 	cmps	local01, arg05 wcz
23220     01 00 00 1F 
23224     26 E4 05 11 |  if_a	add	objptr, ##550
23228     F2 12 02 1B |  if_a	rdlong	arg01, objptr
2322c     01 00 00 1F 
23230     26 E4 85 11 |  if_a	sub	objptr, ##550
23234     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
23238                 | '   return
23238     98 00 90 1D |  if_a	jmp	#LR__2740
2323c     14 27 5A F2 | 	cmps	local01, local02 wcz
23240     13 1B 02 16 |  if_a	mov	arg05, local01
23244     14 27 02 16 |  if_a	mov	local01, local02
23248     0D 29 02 16 |  if_a	mov	local02, arg05
2324c     00 26 56 F2 | 	cmps	local01, #0 wc
23250     00 26 06 C6 |  if_b	mov	local01, #0
23254     01 00 00 FF 
23258     26 E4 05 F1 | 	add	objptr, ##550
2325c     F2 1A 02 FB | 	rdlong	arg05, objptr
23260     01 00 00 FF 
23264     26 E4 85 F1 | 	sub	objptr, ##550
23268     0D 29 52 F2 | 	cmps	local02, arg05 wc
2326c     01 00 00 3F 
23270     26 E4 05 31 |  if_ae	add	objptr, ##550
23274     F2 28 02 3B |  if_ae	rdlong	local02, objptr
23278     01 00 00 3F 
2327c     26 E4 85 31 |  if_ae	sub	objptr, ##550
23280     DD E4 05 F1 | 	add	objptr, #221
23284     F2 12 02 FB | 	rdlong	arg01, objptr
23288     14 E4 05 F1 | 	add	objptr, #20
2328c     F2 1A 02 FB | 	rdlong	arg05, objptr
23290     02 1A 66 F0 | 	shl	arg05, #2
23294     0B 1B 02 FD | 	qmul	arg05, arg03
23298                 | ' if x1>x2
23298                 | '   x1,x2:=x2,x1
23298                 | ' if x1<0 
23298                 | '   x1:=0
23298                 | ' if x2>=xres
23298                 | '   x2:=xres-1  
23298     01 28 86 31 |  if_ae	sub	local02, #1
2329c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
2329c     01 16 06 F6 | 	mov	arg03, #1
232a0     14 17 02 F1 | 	add	arg03, local02
232a4     13 17 82 F1 | 	sub	arg03, local01
232a8     0C 15 02 F6 | 	mov	arg02, arg04
232ac     00 18 06 F6 | 	mov	arg04, #0
232b0     01 1A 06 F6 | 	mov	arg05, #1
232b4     0A 00 00 FF 
232b8     DB E5 05 F1 | 	add	objptr, ##5595
232bc     18 28 62 FD | 	getqx	local02
232c0     13 29 02 F1 | 	add	local02, local01
232c4     14 13 02 F1 | 	add	arg01, local02
232c8     6C 1B B0 FD | 	call	#_psram_spin2_fill
232cc     0B 00 00 FF 
232d0     CC E4 85 F1 | 	sub	objptr, ##5836
232d4                 | LR__2740
232d4     A7 F0 03 F6 | 	mov	ptra, fp
232d8     B2 00 A0 FD | 	call	#popregs_
232dc                 | _hg010b_spin2_fastline_ret
232dc     2D 00 64 FD | 	ret
232e0                 | 
232e0                 | ' 
232e0                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
232e0                 | _hg010b_spin2_draw
232e0     0E 4A 05 F6 | 	mov	COUNT_, #14
232e4     A8 00 A0 FD | 	call	#pushregs_
232e8     09 27 02 F6 | 	mov	local01, arg01
232ec     0A 29 02 F6 | 	mov	local02, arg02
232f0     0B 2B 02 F6 | 	mov	local03, arg03
232f4     0C 2D 02 F6 | 	mov	local04, arg04
232f8     0D 2F 02 F6 | 	mov	local05, arg05
232fc                 | ' 
232fc                 | ' if (y1==y2)
232fc     16 29 0A F2 | 	cmp	local02, local04 wz
23300     18 00 90 5D |  if_ne	jmp	#LR__2750
23304                 | '   fastline(x1,x2,y1,c)
23304     13 13 02 F6 | 	mov	arg01, local01
23308     15 15 02 F6 | 	mov	arg02, local03
2330c     14 17 02 F6 | 	mov	arg03, local02
23310     17 19 02 F6 | 	mov	arg04, local05
23314     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
23318     F8 00 90 FD | 	jmp	#LR__2756
2331c                 | LR__2750
2331c                 | ' else  
2331c                 | '   x:=x1
2331c     13 31 02 F6 | 	mov	local06, local01
23320                 | '   y:=y1
23320     14 33 02 F6 | 	mov	local07, local02
23324                 | ' 
23324                 | '   if (x1<x2) 
23324     15 27 52 F2 | 	cmps	local01, local03 wc
23328                 | '     xi:=1
23328     01 34 06 C6 |  if_b	mov	local08, #1
2332c                 | '     dx:=x2-x1
2332c     15 37 02 C6 |  if_b	mov	local09, local03
23330     13 37 82 C1 |  if_b	sub	local09, local01
23334                 | '   else
23334                 | '     xi:=-1
23334     01 34 66 36 |  if_ae	neg	local08, #1
23338                 | '     dx:=x1-x2
23338     15 27 82 31 |  if_ae	sub	local01, local03
2333c     13 37 02 36 |  if_ae	mov	local09, local01
23340                 | '   
23340                 | '   if (y1<y2) 
23340     16 29 52 F2 | 	cmps	local02, local04 wc
23344                 | '     yi:=1
23344     01 38 06 C6 |  if_b	mov	local10, #1
23348                 | '     dy:=y2-y1
23348     16 3B 02 C6 |  if_b	mov	local11, local04
2334c     14 3B 82 C1 |  if_b	sub	local11, local02
23350                 | '   else
23350                 | '     yi:=-1
23350     01 38 66 36 |  if_ae	neg	local10, #1
23354                 | '     dy:=y1-y2
23354     16 29 82 31 |  if_ae	sub	local02, local04
23358     14 3B 02 36 |  if_ae	mov	local11, local02
2335c                 | ' 
2335c                 | '   putpixel(x,y,c)
2335c     17 17 02 F6 | 	mov	arg03, local05
23360     18 13 02 F6 | 	mov	arg01, local06
23364     19 15 02 F6 | 	mov	arg02, local07
23368     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
2336c                 | ' 
2336c                 | '   if (dx>dy)
2336c     1D 37 5A F2 | 	cmps	local09, local11 wcz
23370     50 00 90 ED |  if_be	jmp	#LR__2752
23374                 | '     ai:=(dy-dx)*2
23374     1D 3D 02 F6 | 	mov	local12, local11
23378     1B 3D 82 F1 | 	sub	local12, local09
2337c     01 3C 66 F0 | 	shl	local12, #1
23380                 | '     bi:=dy*2
23380     01 3A 66 F0 | 	shl	local11, #1
23384     1D 3F 02 F6 | 	mov	local13, local11
23388                 | '     d:= bi-dx
23388     1F 41 02 F6 | 	mov	local14, local13
2338c     1B 41 82 F1 | 	sub	local14, local09
23390                 | '     repeat while (x<>x2) 
23390                 | LR__2751
23390     15 31 0A F2 | 	cmp	local06, local03 wz
23394     7C 00 90 AD |  if_e	jmp	#LR__2755
23398                 | '       if (d>=0) 
23398     00 40 56 F2 | 	cmps	local14, #0 wc
2339c                 | '         x+=xi
2339c     1A 31 02 31 |  if_ae	add	local06, local08
233a0                 | '         y+=yi
233a0     1C 33 02 31 |  if_ae	add	local07, local10
233a4                 | '         d+=ai
233a4     1E 41 02 31 |  if_ae	add	local14, local12
233a8                 | '       else
233a8                 | '         d+=bi
233a8     1F 41 02 C1 |  if_b	add	local14, local13
233ac                 | '         x+=xi
233ac     1A 31 02 C1 |  if_b	add	local06, local08
233b0                 | '       putpixel(x,y,c)
233b0     18 13 02 F6 | 	mov	arg01, local06
233b4     19 15 02 F6 | 	mov	arg02, local07
233b8     17 17 02 F6 | 	mov	arg03, local05
233bc     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
233c0     CC FF 9F FD | 	jmp	#LR__2751
233c4                 | LR__2752
233c4                 | '   else
233c4                 | '     ai:=(dx-dy)*2
233c4     1B 3D 02 F6 | 	mov	local12, local09
233c8     1D 3D 82 F1 | 	sub	local12, local11
233cc     01 3C 66 F0 | 	shl	local12, #1
233d0                 | '     bi:=dx*2
233d0     01 36 66 F0 | 	shl	local09, #1
233d4     1B 3F 02 F6 | 	mov	local13, local09
233d8                 | '     d:=bi-dy
233d8     1F 41 02 F6 | 	mov	local14, local13
233dc     1D 41 82 F1 | 	sub	local14, local11
233e0                 | '     repeat while (y<>y2)
233e0                 | LR__2753
233e0     16 33 0A F2 | 	cmp	local07, local04 wz
233e4     2C 00 90 AD |  if_e	jmp	#LR__2754
233e8                 | '       if (d>=0)
233e8     00 40 56 F2 | 	cmps	local14, #0 wc
233ec                 | '         x+=xi
233ec     1A 31 02 31 |  if_ae	add	local06, local08
233f0                 | '         y+=yi
233f0     1C 33 02 31 |  if_ae	add	local07, local10
233f4                 | '         d+=ai
233f4     1E 41 02 31 |  if_ae	add	local14, local12
233f8                 | '       else
233f8                 | '         d+=bi
233f8     1F 41 02 C1 |  if_b	add	local14, local13
233fc                 | '         y+=yi
233fc     1C 33 02 C1 |  if_b	add	local07, local10
23400                 | '       putpixel(x, y,c)
23400     18 13 02 F6 | 	mov	arg01, local06
23404     19 15 02 F6 | 	mov	arg02, local07
23408     17 17 02 F6 | 	mov	arg03, local05
2340c     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
23410     CC FF 9F FD | 	jmp	#LR__2753
23414                 | LR__2754
23414                 | LR__2755
23414                 | LR__2756
23414     A7 F0 03 F6 | 	mov	ptra, fp
23418     B2 00 A0 FD | 	call	#popregs_
2341c                 | _hg010b_spin2_draw_ret
2341c     2D 00 64 FD | 	ret
23420                 | 
23420                 | '  
23420                 | ' pub fillpush(val) 
23420                 | _hg010b_spin2_fillpush
23420                 | ' fillstack[fillptr]:=val
23420     0B 00 00 FF 
23424     BA E4 05 F1 | 	add	objptr, ##5818
23428     F2 00 02 FB | 	rdlong	_var01, objptr
2342c     02 00 66 F0 | 	shl	_var01, #2
23430     0A 00 00 FF 
23434     00 E4 85 F1 | 	sub	objptr, ##5120
23438     F2 00 02 F1 | 	add	_var01, objptr
2343c     00 13 62 FC | 	wrlong	arg01, _var01
23440                 | ' fillptr+=1   
23440     0A 00 00 FF 
23444     00 E4 05 F1 | 	add	objptr, ##5120
23448     F2 00 02 FB | 	rdlong	_var01, objptr
2344c     01 00 06 F1 | 	add	_var01, #1
23450     F2 00 62 FC | 	wrlong	_var01, objptr
23454     0B 00 00 FF 
23458     BA E4 85 F1 | 	sub	objptr, ##5818
2345c                 | _hg010b_spin2_fillpush_ret
2345c     2D 00 64 FD | 	ret
23460                 | 
23460                 | ' 
23460                 | '     
23460                 | ' pub fillpop() : val
23460                 | _hg010b_spin2_fillpop
23460                 | ' 
23460                 | ' fillptr-=1
23460     0B 00 00 FF 
23464     BA E4 05 F1 | 	add	objptr, ##5818
23468     F2 FA 01 FB | 	rdlong	result1, objptr
2346c     01 FA 85 F1 | 	sub	result1, #1
23470     F2 FA 61 FC | 	wrlong	result1, objptr
23474                 | ' if fillptr<0
23474     0B 00 00 FF 
23478     BA E4 85 F1 | 	sub	objptr, ##5818
2347c     00 FA 55 F2 | 	cmps	result1, #0 wc
23480                 | '   fillptr:=0
23480     0B 00 00 CF 
23484     BA E4 05 C1 |  if_b	add	objptr, ##5818
23488     F2 00 68 CC |  if_b	wrlong	#0, objptr
2348c     0B 00 00 CF 
23490     BA E4 85 C1 |  if_b	sub	objptr, ##5818
23494                 | '   val:=-12345
23494     E7 FF 7F CF 
23498     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
2349c     28 00 90 CD |  if_b	jmp	#LR__2760
234a0                 | ' else 
234a0                 | '   val:=fillstack[fillptr]
234a0     0B 00 00 FF 
234a4     BA E4 05 F1 | 	add	objptr, ##5818
234a8     F2 00 02 FB | 	rdlong	_var01, objptr
234ac     02 00 66 F0 | 	shl	_var01, #2
234b0     0A 00 00 FF 
234b4     00 E4 85 F1 | 	sub	objptr, ##5120
234b8     F2 00 02 F1 | 	add	_var01, objptr
234bc     00 01 02 FB | 	rdlong	_var01, _var01
234c0     01 00 00 FF 
234c4     BA E4 85 F1 | 	sub	objptr, ##698
234c8                 | LR__2760
234c8                 | ' return val
234c8     00 FB 01 F6 | 	mov	result1, _var01
234cc                 | _hg010b_spin2_fillpop_ret
234cc     2D 00 64 FD | 	ret
234d0                 | 
234d0                 | ' 
234d0                 | '       
234d0                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
234d0                 | _hg010b_spin2_fill
234d0     0B 4A 05 F6 | 	mov	COUNT_, #11
234d4     A8 00 A0 FD | 	call	#pushregs_
234d8                 | ' 
234d8                 | ' newcolor:=newcolor & 255
234d8     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
234dc                 | ' oldcolor:=oldcolor & 255
234dc     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
234e0                 | ' 
234e0                 | ' if (oldcolor == newcolor) 
234e0     13 29 0A F2 | 	cmp	local02, local01 wz
234e4                 | '   return
234e4     70 02 90 AD |  if_e	jmp	#LR__2779
234e8                 | ' 
234e8                 | ' fillptr:=0
234e8     0B 00 00 FF 
234ec     BA E4 05 F1 | 	add	objptr, ##5818
234f0     F2 00 68 FC | 	wrlong	#0, objptr
234f4                 | ' fillmax:=0
234f4     04 E4 05 F1 | 	add	objptr, #4
234f8     F2 00 68 FC | 	wrlong	#0, objptr
234fc     0B 00 00 FF 
23500     BE E4 85 F1 | 	sub	objptr, ##5822
23504                 | ' fillpush(x)
23504     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
23508                 | ' fillpush(y)
23508     0A 13 02 F6 | 	mov	arg01, arg02
2350c     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
23510                 | ' y:=fillpop()
23510     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
23514     FD 2A 02 F6 | 	mov	local03, result1
23518                 | ' x:=fillpop()
23518     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
2351c     FD 2C 02 F6 | 	mov	local04, result1
23520                 | ' 'pinhigh(38)
23520                 | ' repeat while (x>-1)       
23520                 | LR__2770
23520     00 2C 56 F2 | 	cmps	local04, #0 wc
23524     30 02 90 CD |  if_b	jmp	#LR__2778
23528                 | '  ' pintoggle(39)
23528                 | '   x1 := x
23528     16 2F 02 F6 | 	mov	local05, local04
2352c                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
2352c                 | LR__2771
2352c     00 30 06 F6 | 	mov	local06, #0
23530     00 32 06 F6 | 	mov	local07, #0
23534     00 2E 56 F2 | 	cmps	local05, #0 wc
23538     01 32 66 36 |  if_ae	neg	local07, #1
2353c     00 32 0E F2 | 	cmp	local07, #0 wz
23540     00 30 26 56 |  if_ne	not	local06, #0
23544     00 34 06 F6 | 	mov	local08, #0
23548     00 36 06 F6 | 	mov	local09, #0
2354c     15 15 02 F6 | 	mov	arg02, local03
23550     17 13 02 F6 | 	mov	arg01, local05
23554     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
23558     14 FB 09 F2 | 	cmp	result1, local02 wz
2355c     00 36 26 A6 |  if_e	not	local09, #0
23560     00 36 0E F2 | 	cmp	local09, #0 wz
23564     00 34 26 56 |  if_ne	not	local08, #0
23568     1A 31 CA F7 | 	test	local06, local08 wz
2356c                 | '     x1--
2356c     01 2E 86 51 |  if_ne	sub	local05, #1
23570     B8 FF 9F 5D |  if_ne	jmp	#LR__2771
23574                 | '   x1++
23574     01 2E 06 F1 | 	add	local05, #1
23578                 | '   spanabove := 0
23578     00 38 06 F6 | 	mov	local10, #0
2357c                 | '   spanbelow := 0
2357c     00 3A 06 F6 | 	mov	local11, #0
23580                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
23580                 | LR__2772
23580     00 30 06 F6 | 	mov	local06, #0
23584     02 00 00 FF 
23588     00 2E 56 F2 | 	cmps	local05, ##1024 wc
2358c     00 30 26 C6 |  if_b	not	local06, #0
23590     00 34 06 F6 | 	mov	local08, #0
23594     00 36 06 F6 | 	mov	local09, #0
23598     15 15 02 F6 | 	mov	arg02, local03
2359c     17 13 02 F6 | 	mov	arg01, local05
235a0     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
235a4     14 FB 09 F2 | 	cmp	result1, local02 wz
235a8     00 36 26 A6 |  if_e	not	local09, #0
235ac     00 36 0E F2 | 	cmp	local09, #0 wz
235b0     00 34 26 56 |  if_ne	not	local08, #0
235b4     1A 31 CA F7 | 	test	local06, local08 wz
235b8     88 01 90 AD |  if_e	jmp	#LR__2777
235bc                 | '     putpixel2 (x1,y, newcolor & 255)
235bc     13 17 E2 F8 | 	getbyte	arg03, local01, #0
235c0     17 13 02 F6 | 	mov	arg01, local05
235c4     15 15 02 F6 | 	mov	arg02, local03
235c8     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
235cc                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
235cc     00 30 06 F6 | 	mov	local06, #0
235d0     00 32 06 F6 | 	mov	local07, #0
235d4     00 38 0E F2 | 	cmp	local10, #0 wz
235d8     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
235dc     01 32 66 26 |  if_nc_and_z	neg	local07, #1
235e0     00 32 0E F2 | 	cmp	local07, #0 wz
235e4     00 30 26 56 |  if_ne	not	local06, #0
235e8     00 34 06 F6 | 	mov	local08, #0
235ec     00 36 06 F6 | 	mov	local09, #0
235f0     15 15 02 F6 | 	mov	arg02, local03
235f4     01 14 86 F1 | 	sub	arg02, #1
235f8     17 13 02 F6 | 	mov	arg01, local05
235fc     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
23600     14 FB 09 F2 | 	cmp	result1, local02 wz
23604     00 36 26 A6 |  if_e	not	local09, #0
23608     00 36 0E F2 | 	cmp	local09, #0 wz
2360c     00 34 26 56 |  if_ne	not	local08, #0
23610     1A 31 CA F7 | 	test	local06, local08 wz
23614     1C 00 90 AD |  if_e	jmp	#LR__2773
23618                 | '       fillpush(x1)
23618     17 13 02 F6 | 	mov	arg01, local05
2361c     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
23620                 | '       fillpush(y-1)
23620     15 13 02 F6 | 	mov	arg01, local03
23624     01 12 86 F1 | 	sub	arg01, #1
23628     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
2362c                 | '       spanabove := 1 
2362c     01 38 06 F6 | 	mov	local10, #1
23630     4C 00 90 FD | 	jmp	#LR__2774
23634                 | LR__2773
23634                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
23634     00 30 06 F6 | 	mov	local06, #0
23638     00 32 06 F6 | 	mov	local07, #0
2363c     00 38 0E F2 | 	cmp	local10, #0 wz
23640     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
23644     01 32 66 16 |  if_a	neg	local07, #1
23648     00 32 0E F2 | 	cmp	local07, #0 wz
2364c     00 30 26 56 |  if_ne	not	local06, #0
23650     00 34 06 F6 | 	mov	local08, #0
23654     00 36 06 F6 | 	mov	local09, #0
23658     15 15 02 F6 | 	mov	arg02, local03
2365c     01 14 86 F1 | 	sub	arg02, #1
23660     17 13 02 F6 | 	mov	arg01, local05
23664     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
23668     14 FB 09 F2 | 	cmp	result1, local02 wz
2366c     00 36 26 56 |  if_ne	not	local09, #0
23670     00 36 0E F2 | 	cmp	local09, #0 wz
23674     00 34 26 56 |  if_ne	not	local08, #0
23678     1A 31 CA F7 | 	test	local06, local08 wz
2367c                 | '       spanabove := 0 
2367c     00 38 06 56 |  if_ne	mov	local10, #0
23680                 | LR__2774
23680                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
23680     00 30 06 F6 | 	mov	local06, #0
23684     00 32 06 F6 | 	mov	local07, #0
23688     00 3A 0E F2 | 	cmp	local11, #0 wz
2368c     01 00 00 AF 
23690     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
23694     01 32 66 86 |  if_c_and_z	neg	local07, #1
23698     00 32 0E F2 | 	cmp	local07, #0 wz
2369c     00 30 26 56 |  if_ne	not	local06, #0
236a0     00 34 06 F6 | 	mov	local08, #0
236a4     00 36 06 F6 | 	mov	local09, #0
236a8     15 15 02 F6 | 	mov	arg02, local03
236ac     01 14 06 F1 | 	add	arg02, #1
236b0     17 13 02 F6 | 	mov	arg01, local05
236b4     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
236b8     14 FB 09 F2 | 	cmp	result1, local02 wz
236bc     00 36 26 A6 |  if_e	not	local09, #0
236c0     00 36 0E F2 | 	cmp	local09, #0 wz
236c4     00 34 26 56 |  if_ne	not	local08, #0
236c8     1A 31 CA F7 | 	test	local06, local08 wz
236cc     1C 00 90 AD |  if_e	jmp	#LR__2775
236d0                 | '       fillpush(x1)
236d0     17 13 02 F6 | 	mov	arg01, local05
236d4     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
236d8                 | '       fillpush(y + 1)
236d8     15 13 02 F6 | 	mov	arg01, local03
236dc     01 12 06 F1 | 	add	arg01, #1
236e0     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
236e4                 | '       spanBelow := 1
236e4     01 3A 06 F6 | 	mov	local11, #1
236e8     50 00 90 FD | 	jmp	#LR__2776
236ec                 | LR__2775
236ec                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
236ec     00 30 06 F6 | 	mov	local06, #0
236f0     00 32 06 F6 | 	mov	local07, #0
236f4     00 3A 0E F2 | 	cmp	local11, #0 wz
236f8     01 00 00 5F 
236fc     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
23700     01 32 66 46 |  if_c_and_nz	neg	local07, #1
23704     00 32 0E F2 | 	cmp	local07, #0 wz
23708     00 30 26 56 |  if_ne	not	local06, #0
2370c     00 34 06 F6 | 	mov	local08, #0
23710     00 36 06 F6 | 	mov	local09, #0
23714     15 15 02 F6 | 	mov	arg02, local03
23718     01 14 06 F1 | 	add	arg02, #1
2371c     17 13 02 F6 | 	mov	arg01, local05
23720     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
23724     14 FB 09 F2 | 	cmp	result1, local02 wz
23728     00 36 26 56 |  if_ne	not	local09, #0
2372c     00 36 0E F2 | 	cmp	local09, #0 wz
23730     00 34 26 56 |  if_ne	not	local08, #0
23734     1A 31 CA F7 | 	test	local06, local08 wz
23738                 | '       spanbelow := 0
23738     00 3A 06 56 |  if_ne	mov	local11, #0
2373c                 | LR__2776
2373c                 | '     x1++
2373c     01 2E 06 F1 | 	add	local05, #1
23740     3C FE 9F FD | 	jmp	#LR__2772
23744                 | LR__2777
23744                 | '   y:=fillpop()
23744     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
23748     FD 2A 02 F6 | 	mov	local03, result1
2374c                 | '   x:=fillpop()
2374c     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
23750     FD 2C 02 F6 | 	mov	local04, result1
23754     C8 FD 9F FD | 	jmp	#LR__2770
23758                 | LR__2778
23758                 | LR__2779
23758     A7 F0 03 F6 | 	mov	ptra, fp
2375c     B2 00 A0 FD | 	call	#popregs_
23760                 | _hg010b_spin2_fill_ret
23760     2D 00 64 FD | 	ret
23764                 | 
23764                 | ' 'pinlow(38)    
23764                 | ' 
23764                 | ' '-- A filled circle -----------------------------------------------------
23764                 | ' 
23764                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
23764                 | _hg010b_spin2_fcircle
23764     08 4A 05 F6 | 	mov	COUNT_, #8
23768     A8 00 A0 FD | 	call	#pushregs_
2376c     0B 27 02 F6 | 	mov	local01, arg03
23770     FF FF 7F FF 
23774     FE 27 06 FD | 	qmul	local01, ##-2
23778     09 29 02 F6 | 	mov	local02, arg01
2377c     0A 2B 02 F6 | 	mov	local03, arg02
23780     0C 2D 02 F6 | 	mov	local04, arg04
23784                 | ' 
23784                 | ' d:=5-4*r
23784     13 19 02 F6 | 	mov	arg04, local01
23788     02 18 66 F0 | 	shl	arg04, #2
2378c     05 2E 06 F6 | 	mov	local05, #5
23790     0C 2F 82 F1 | 	sub	local05, arg04
23794                 | ' x:=0
23794     00 30 06 F6 | 	mov	local06, #0
23798                 | ' y:=r
23798                 | ' da:=(-2*r+5)*4
23798                 | ' db:=3*4
23798     0C 32 06 F6 | 	mov	local07, #12
2379c                 | ' repeat while (x<=y) 
2379c     18 34 62 FD | 	getqx	local08
237a0     05 34 06 F1 | 	add	local08, #5
237a4     02 34 66 F0 | 	shl	local08, #2
237a8                 | LR__2780
237a8     13 31 5A F2 | 	cmps	local06, local01 wcz
237ac     B4 00 90 1D |  if_a	jmp	#LR__2782
237b0                 | '   fastline(x0-x,x0+x,y0-y,c)
237b0     14 13 02 F6 | 	mov	arg01, local02
237b4     18 13 82 F1 | 	sub	arg01, local06
237b8     14 15 02 F6 | 	mov	arg02, local02
237bc     18 15 02 F1 | 	add	arg02, local06
237c0     15 17 02 F6 | 	mov	arg03, local03
237c4     13 17 82 F1 | 	sub	arg03, local01
237c8     16 19 02 F6 | 	mov	arg04, local04
237cc     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
237d0                 | '   fastline(x0-x,x0+x,y0+y,c)
237d0     14 13 02 F6 | 	mov	arg01, local02
237d4     18 13 82 F1 | 	sub	arg01, local06
237d8     14 15 02 F6 | 	mov	arg02, local02
237dc     18 15 02 F1 | 	add	arg02, local06
237e0     15 17 02 F6 | 	mov	arg03, local03
237e4     13 17 02 F1 | 	add	arg03, local01
237e8     16 19 02 F6 | 	mov	arg04, local04
237ec     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
237f0                 | '   fastline(x0-y,x0+y,y0-x,c)
237f0     14 13 02 F6 | 	mov	arg01, local02
237f4     13 13 82 F1 | 	sub	arg01, local01
237f8     14 15 02 F6 | 	mov	arg02, local02
237fc     13 15 02 F1 | 	add	arg02, local01
23800     15 17 02 F6 | 	mov	arg03, local03
23804     18 17 82 F1 | 	sub	arg03, local06
23808     16 19 02 F6 | 	mov	arg04, local04
2380c     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
23810                 | '   fastline(x0-y,x0+y,y0+x,c)
23810     14 13 02 F6 | 	mov	arg01, local02
23814     13 13 82 F1 | 	sub	arg01, local01
23818     14 15 02 F6 | 	mov	arg02, local02
2381c     13 15 02 F1 | 	add	arg02, local01
23820     15 17 02 F6 | 	mov	arg03, local03
23824     18 17 02 F1 | 	add	arg03, local06
23828     16 19 02 F6 | 	mov	arg04, local04
2382c     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
23830                 | '   if d>0 
23830     01 2E 56 F2 | 	cmps	local05, #1 wc
23834     18 00 90 CD |  if_b	jmp	#LR__2781
23838                 | '     d+=da
23838     1A 2F 02 F1 | 	add	local05, local08
2383c                 | '     y-=1
2383c     01 26 86 F1 | 	sub	local01, #1
23840                 | '     x+=1
23840     01 30 06 F1 | 	add	local06, #1
23844                 | '     da+=4*4
23844     10 34 06 F1 | 	add	local08, #16
23848                 | '     db+=2*4
23848     08 32 06 F1 | 	add	local07, #8
2384c     58 FF 9F FD | 	jmp	#LR__2780
23850                 | LR__2781
23850                 | '   else
23850                 | '     d+=db
23850     19 2F 02 F1 | 	add	local05, local07
23854                 | '     x+=1
23854     01 30 06 F1 | 	add	local06, #1
23858                 | '     da+=2*4
23858     08 34 06 F1 | 	add	local08, #8
2385c                 | '     db+=2*4
2385c     08 32 06 F1 | 	add	local07, #8
23860     44 FF 9F FD | 	jmp	#LR__2780
23864                 | LR__2782
23864     A7 F0 03 F6 | 	mov	ptra, fp
23868     B2 00 A0 FD | 	call	#popregs_
2386c                 | _hg010b_spin2_fcircle_ret
2386c     2D 00 64 FD | 	ret
23870                 | 
23870                 | '  
23870                 | ' '-- A circle ------------------------------------------------------------ 
23870                 | '  
23870                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
23870                 | _hg010b_spin2_circle
23870     08 4A 05 F6 | 	mov	COUNT_, #8
23874     A8 00 A0 FD | 	call	#pushregs_
23878     0B 27 02 F6 | 	mov	local01, arg03
2387c     FF FF 7F FF 
23880     FE 27 06 FD | 	qmul	local01, ##-2
23884     09 29 02 F6 | 	mov	local02, arg01
23888     0A 2B 02 F6 | 	mov	local03, arg02
2388c     0C 2D 02 F6 | 	mov	local04, arg04
23890                 | ' 
23890                 | '  
23890                 | ' d:=5-4*r
23890     13 19 02 F6 | 	mov	arg04, local01
23894     02 18 66 F0 | 	shl	arg04, #2
23898     05 2E 06 F6 | 	mov	local05, #5
2389c     0C 2F 82 F1 | 	sub	local05, arg04
238a0                 | ' x:=0
238a0     00 30 06 F6 | 	mov	local06, #0
238a4                 | ' y:=r
238a4                 | ' da:=(-2*r+5)*4
238a4                 | ' db:=3*4
238a4     0C 32 06 F6 | 	mov	local07, #12
238a8                 | ' repeat while (x<=y) 
238a8     18 34 62 FD | 	getqx	local08
238ac     05 34 06 F1 | 	add	local08, #5
238b0     02 34 66 F0 | 	shl	local08, #2
238b4                 | LR__2790
238b4     13 31 5A F2 | 	cmps	local06, local01 wcz
238b8     F4 00 90 1D |  if_a	jmp	#LR__2792
238bc                 | '   putpixel(x0-x,y0-y,c)
238bc     14 13 02 F6 | 	mov	arg01, local02
238c0     18 13 82 F1 | 	sub	arg01, local06
238c4     15 15 02 F6 | 	mov	arg02, local03
238c8     13 15 82 F1 | 	sub	arg02, local01
238cc     16 17 02 F6 | 	mov	arg03, local04
238d0     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
238d4                 | '   putpixel(x0-x,y0+y,c)
238d4     14 13 02 F6 | 	mov	arg01, local02
238d8     18 13 82 F1 | 	sub	arg01, local06
238dc     15 15 02 F6 | 	mov	arg02, local03
238e0     13 15 02 F1 | 	add	arg02, local01
238e4     16 17 02 F6 | 	mov	arg03, local04
238e8     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
238ec                 | '   putpixel(x0+x,y0-y,c)
238ec     14 13 02 F6 | 	mov	arg01, local02
238f0     18 13 02 F1 | 	add	arg01, local06
238f4     15 15 02 F6 | 	mov	arg02, local03
238f8     13 15 82 F1 | 	sub	arg02, local01
238fc     16 17 02 F6 | 	mov	arg03, local04
23900     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
23904                 | '   putpixel(x0+x,y0+y,c)
23904     14 13 02 F6 | 	mov	arg01, local02
23908     18 13 02 F1 | 	add	arg01, local06
2390c     15 15 02 F6 | 	mov	arg02, local03
23910     13 15 02 F1 | 	add	arg02, local01
23914     16 17 02 F6 | 	mov	arg03, local04
23918     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
2391c                 | '   putpixel(x0-y,y0-x,c)
2391c     14 13 02 F6 | 	mov	arg01, local02
23920     13 13 82 F1 | 	sub	arg01, local01
23924     15 15 02 F6 | 	mov	arg02, local03
23928     18 15 82 F1 | 	sub	arg02, local06
2392c     16 17 02 F6 | 	mov	arg03, local04
23930     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
23934                 | '   putpixel(x0-y,y0+x,c)
23934     14 13 02 F6 | 	mov	arg01, local02
23938     13 13 82 F1 | 	sub	arg01, local01
2393c     15 15 02 F6 | 	mov	arg02, local03
23940     18 15 02 F1 | 	add	arg02, local06
23944     16 17 02 F6 | 	mov	arg03, local04
23948     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
2394c                 | '   putpixel(x0+y,y0-x,c)
2394c     14 13 02 F6 | 	mov	arg01, local02
23950     13 13 02 F1 | 	add	arg01, local01
23954     15 15 02 F6 | 	mov	arg02, local03
23958     18 15 82 F1 | 	sub	arg02, local06
2395c     16 17 02 F6 | 	mov	arg03, local04
23960     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
23964                 | '   putpixel(x0+y,y0+x,c)
23964     14 13 02 F6 | 	mov	arg01, local02
23968     13 13 02 F1 | 	add	arg01, local01
2396c     15 15 02 F6 | 	mov	arg02, local03
23970     18 15 02 F1 | 	add	arg02, local06
23974     16 17 02 F6 | 	mov	arg03, local04
23978     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
2397c                 | '   if d>0 
2397c     01 2E 56 F2 | 	cmps	local05, #1 wc
23980     18 00 90 CD |  if_b	jmp	#LR__2791
23984                 | '     d+=da
23984     1A 2F 02 F1 | 	add	local05, local08
23988                 | '     y-=1
23988     01 26 86 F1 | 	sub	local01, #1
2398c                 | '     x+=1
2398c     01 30 06 F1 | 	add	local06, #1
23990                 | '     da+=4*4
23990     10 34 06 F1 | 	add	local08, #16
23994                 | '     db+=2*4
23994     08 32 06 F1 | 	add	local07, #8
23998     18 FF 9F FD | 	jmp	#LR__2790
2399c                 | LR__2791
2399c                 | '   else
2399c                 | '     d+=db
2399c     19 2F 02 F1 | 	add	local05, local07
239a0                 | '     x+=1
239a0     01 30 06 F1 | 	add	local06, #1
239a4                 | '     da+=2*4
239a4     08 34 06 F1 | 	add	local08, #8
239a8                 | '     db+=2*4
239a8     08 32 06 F1 | 	add	local07, #8
239ac     04 FF 9F FD | 	jmp	#LR__2790
239b0                 | LR__2792
239b0     A7 F0 03 F6 | 	mov	ptra, fp
239b4     B2 00 A0 FD | 	call	#popregs_
239b8                 | _hg010b_spin2_circle_ret
239b8     2D 00 64 FD | 	ret
239bc                 | 
239bc                 | '     
239bc                 | ' '-- A frame (an empty rectangle) ---------------------------------------
239bc                 | ' 
239bc                 | ' pub frame(x1,y1,x2,y2,c)
239bc                 | _hg010b_spin2_frame
239bc     05 4A 05 F6 | 	mov	COUNT_, #5
239c0     A8 00 A0 FD | 	call	#pushregs_
239c4     09 27 02 F6 | 	mov	local01, arg01
239c8     0A 29 02 F6 | 	mov	local02, arg02
239cc     0B 2B 02 F6 | 	mov	local03, arg03
239d0     0C 2D 02 F6 | 	mov	local04, arg04
239d4     0D 2F 02 F6 | 	mov	local05, arg05
239d8                 | ' 
239d8                 | ' fastline(x1,x2,y1,c)
239d8     13 13 02 F6 | 	mov	arg01, local01
239dc     15 15 02 F6 | 	mov	arg02, local03
239e0     14 17 02 F6 | 	mov	arg03, local02
239e4     17 19 02 F6 | 	mov	arg04, local05
239e8     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
239ec                 | ' fastline(x1,x2,y2,c)
239ec     13 13 02 F6 | 	mov	arg01, local01
239f0     15 15 02 F6 | 	mov	arg02, local03
239f4     16 17 02 F6 | 	mov	arg03, local04
239f8     17 19 02 F6 | 	mov	arg04, local05
239fc     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
23a00                 | ' line(x1,y1,x1,y2,c)
23a00     13 13 02 F6 | 	mov	arg01, local01
23a04     14 15 02 F6 | 	mov	arg02, local02
23a08     13 17 02 F6 | 	mov	arg03, local01
23a0c     16 19 02 F6 | 	mov	arg04, local04
23a10     17 1B 02 F6 | 	mov	arg05, local05
23a14                 | ' draw(x1,y1,x2,y2,c)
23a14     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
23a18                 | ' line(x2,y1,x2,y2,c)
23a18     15 13 02 F6 | 	mov	arg01, local03
23a1c     14 15 02 F6 | 	mov	arg02, local02
23a20     15 17 02 F6 | 	mov	arg03, local03
23a24     16 19 02 F6 | 	mov	arg04, local04
23a28     17 1B 02 F6 | 	mov	arg05, local05
23a2c                 | ' draw(x1,y1,x2,y2,c)
23a2c     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
23a30     A7 F0 03 F6 | 	mov	ptra, fp
23a34     B2 00 A0 FD | 	call	#popregs_
23a38                 | _hg010b_spin2_frame_ret
23a38     2D 00 64 FD | 	ret
23a3c                 | 
23a3c                 | ' 
23a3c                 | ' '-- A box (a filled rectangle) ----------------------------------------
23a3c                 | ' 
23a3c                 | ' pub box(x1,y1,x2,y2,c) |yy
23a3c                 | _hg010b_spin2_box
23a3c     06 4A 05 F6 | 	mov	COUNT_, #6
23a40     A8 00 A0 FD | 	call	#pushregs_
23a44     09 27 02 F6 | 	mov	local01, arg01
23a48     0A 29 02 F6 | 	mov	local02, arg02
23a4c     0B 2B 02 F6 | 	mov	local03, arg03
23a50     0C 2D 02 F6 | 	mov	local04, arg04
23a54     0D 2F 02 F6 | 	mov	local05, arg05
23a58                 | ' 
23a58                 | ' repeat yy from y1 to y2
23a58     14 2D 52 F2 | 	cmps	local04, local02 wc
23a5c     01 30 86 F6 | 	negc	local06, #1
23a60     18 2D 02 F1 | 	add	local04, local06
23a64                 | LR__2800
23a64                 | '   fastline(x1,x2,yy,c)
23a64     13 13 02 F6 | 	mov	arg01, local01
23a68     15 15 02 F6 | 	mov	arg02, local03
23a6c     17 19 02 F6 | 	mov	arg04, local05
23a70     14 17 02 F6 | 	mov	arg03, local02
23a74     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
23a78     18 29 02 F1 | 	add	local02, local06
23a7c     16 29 0A F2 | 	cmp	local02, local04 wz
23a80     E0 FF 9F 5D |  if_ne	jmp	#LR__2800
23a84     A7 F0 03 F6 | 	mov	ptra, fp
23a88     B2 00 A0 FD | 	call	#popregs_
23a8c                 | _hg010b_spin2_box_ret
23a8c     2D 00 64 FD | 	ret
23a90                 | 
23a90                 | '       
23a90                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
23a90                 | _hg010b_spin2_putcharxycgf
23a90                 | ' 
23a90                 | '  
23a90                 | ' repeat yy from 0 to 15
23a90     00 00 06 F6 | 	mov	_var01, #0
23a94     97 8C 48 FB | 	callpa	#(@LR__2812-@LR__2810)>>2,fcache_load_ptr_
23a98                 | LR__2810
23a98                 | ' 
23a98                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
23a98     95 E4 05 F1 | 	add	objptr, #149
23a9c     F2 02 02 FB | 	rdlong	_var02, objptr
23aa0     0A 02 66 F0 | 	shl	_var02, #10
23aa4     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
23aa8     01 05 02 F1 | 	add	_var03, _var02
23aac     0B 03 02 F6 | 	mov	_var02, arg03
23ab0     04 02 66 F0 | 	shl	_var02, #4
23ab4     01 05 02 F1 | 	add	_var03, _var02
23ab8     00 05 02 F1 | 	add	_var03, _var01
23abc     02 05 C2 FA | 	rdbyte	_var03, _var03
23ac0                 | '   asm
23ac0     00 04 0E F4 | 	testb	_var03, #0 wz
23ac4     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
23ac8     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
23acc     01 04 0E F4 | 	testb	_var03, #1 wz
23ad0     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
23ad4     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
23ad8     02 04 0E F4 | 	testb	_var03, #2 wz
23adc     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
23ae0     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
23ae4     03 04 0E F4 | 	testb	_var03, #3 wz
23ae8     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
23aec     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
23af0     04 04 0E F4 | 	testb	_var03, #4 wz
23af4     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
23af8     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
23afc     05 04 0E F4 | 	testb	_var03, #5 wz
23b00     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
23b04     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
23b08     06 04 0E F4 | 	testb	_var03, #6 wz
23b0c     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
23b10     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
23b14     07 04 0E F4 | 	testb	_var03, #7 wz
23b18     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
23b1c     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
23b20                 | '   
23b20                 | '   ccc[0]:=c1
23b20     99 E5 05 F1 | 	add	objptr, #409
23b24     F2 06 62 FC | 	wrlong	_var04, objptr
23b28                 | '   ccc[1]:=c2 
23b28     04 E4 05 F1 | 	add	objptr, #4
23b2c     F2 08 62 FC | 	wrlong	_var05, objptr
23b30                 | '   long[mailbox0][2]:=8
23b30     49 E4 85 F1 | 	sub	objptr, #73
23b34     F2 04 02 FB | 	rdlong	_var03, objptr
23b38     08 04 06 F1 | 	add	_var03, #8
23b3c     02 11 68 FC | 	wrlong	#8, _var03
23b40                 | '   long[mailbox0][1]:=@ccc
23b40     45 E4 05 F1 | 	add	objptr, #69
23b44     F2 04 02 F6 | 	mov	_var03, objptr
23b48     45 E4 85 F1 | 	sub	objptr, #69
23b4c     F2 02 02 FB | 	rdlong	_var02, objptr
23b50     04 02 06 F1 | 	add	_var02, #4
23b54     01 05 62 FC | 	wrlong	_var03, _var02
23b58                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
23b58     0C E5 85 F1 | 	sub	objptr, #268
23b5c     F2 04 02 FB | 	rdlong	_var03, objptr
23b60     0A 03 02 F6 | 	mov	_var02, arg02
23b64     00 03 02 F1 | 	add	_var02, _var01
23b68     0A 02 66 F0 | 	shl	_var02, #10
23b6c     09 0B 02 F6 | 	mov	_var06, arg01
23b70     02 0A 66 F0 | 	shl	_var06, #2
23b74     05 03 02 F1 | 	add	_var02, _var06
23b78     01 05 02 F1 | 	add	_var03, _var02
23b7c     00 00 78 FF 
23b80     00 04 06 F1 | 	add	_var03, ##-268435456
23b84     0C E5 05 F1 | 	add	objptr, #268
23b88     F2 0A 02 FB | 	rdlong	_var06, objptr
23b8c     05 05 62 FC | 	wrlong	_var03, _var06
23b90                 | '   repeat
23b90                 | LR__2811
23b90     F2 04 02 FB | 	rdlong	_var03, objptr
23b94     02 03 02 FB | 	rdlong	_var02, _var03
23b98     00 02 56 F2 | 	cmps	_var02, #0 wc
23b9c     F0 FF 9F CD |  if_b	jmp	#LR__2811
23ba0     E9 E5 85 F1 | 	sub	objptr, #489
23ba4     01 00 06 F1 | 	add	_var01, #1
23ba8     10 00 56 F2 | 	cmps	_var01, #16 wc
23bac     E8 FE 9F CD |  if_b	jmp	#LR__2810
23bb0                 | LR__2812
23bb0                 | _hg010b_spin2_putcharxycgf_ret
23bb0     2D 00 64 FD | 	ret
23bb4                 | 
23bb4                 | ' 
23bb4                 | ' 
23bb4                 | ' '**********************************************************************r***
23bb4                 | ' '                                                                        *
23bb4                 | ' ' Font related functions                                                 *
23bb4                 | ' '                                                                        *
23bb4                 | ' '*************************************************************************
23bb4                 | ' 
23bb4                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
23bb4                 | ' 
23bb4                 | ' pub setfontfamily(afontnum)
23bb4                 | _hg010b_spin2_setfontfamily
23bb4                 | ' 
23bb4                 | ' font_family:=afontnum
23bb4     95 E4 05 F1 | 	add	objptr, #149
23bb8     F2 12 62 FC | 	wrlong	arg01, objptr
23bbc     95 E4 85 F1 | 	sub	objptr, #149
23bc0                 | ' 'if afontnum==8
23bc0                 | ' '  font_ptr:=@amiga_font
23bc0                 | ' 
23bc0                 | ' if afontnum==4
23bc0     04 12 0E F2 | 	cmp	arg01, #4 wz
23bc4                 | '   font_ptr:=@st_font
23bc4     08 00 00 AF 
23bc8     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
23bcc     08 E4 05 A1 |  if_e	add	objptr, #8
23bd0     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
23bd4     08 E4 85 A1 |  if_e	sub	objptr, #8
23bd8     08 00 00 AF 
23bdc     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
23be0                 | ' if afontnum==0
23be0     00 12 0E F2 | 	cmp	arg01, #0 wz
23be4                 | '   font_ptr:=@vga_font
23be4     08 E4 05 A1 |  if_e	add	objptr, #8
23be8     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
23bec     08 E4 85 A1 |  if_e	sub	objptr, #8
23bf0                 | _hg010b_spin2_setfontfamily_ret
23bf0     2D 00 64 FD | 	ret
23bf4                 | 
23bf4                 | ' 
23bf4                 | ' '*************************************************************************
23bf4                 | ' '                                                                        *
23bf4                 | ' '  Cursor functions                                                      *
23bf4                 | ' '                                                                        *
23bf4                 | ' '*************************************************************************
23bf4                 | ' 
23bf4                 | ' 
23bf4                 | ' pub setcursorpos(x,y)
23bf4                 | _hg010b_spin2_setcursorpos
23bf4                 | ' 
23bf4                 | ' ''---------- Set the (x,y) position of cursor
23bf4                 | ' 
23bf4                 | ' cursor_x:=x
23bf4     3C E4 05 F1 | 	add	objptr, #60
23bf8     F2 12 52 FC | 	wrword	arg01, objptr
23bfc                 | ' cursor_y:=y
23bfc     02 E4 05 F1 | 	add	objptr, #2
23c00     F2 14 42 FC | 	wrbyte	arg02, objptr
23c04                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
23c04     02 E4 85 F1 | 	sub	objptr, #2
23c08     F2 14 E2 FA | 	rdword	arg02, objptr
23c0c     02 14 66 F0 | 	shl	arg02, #2
23c10     02 E4 05 F1 | 	add	objptr, #2
23c14     F2 16 C2 FA | 	rdbyte	arg03, objptr
23c18     3E E4 85 F1 | 	sub	objptr, #62
23c1c     04 16 66 F0 | 	shl	arg03, #4
23c20     04 16 06 F1 | 	add	arg03, #4
23c24     11 12 06 F6 | 	mov	arg01, #17
23c28     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
23c2c                 | _hg010b_spin2_setcursorpos_ret
23c2c     2D 00 64 FD | 	ret
23c30                 | 
23c30                 | ' 
23c30                 | ' pub setcursorx(x)
23c30                 | _hg010b_spin2_setcursorx
23c30                 | ' cursor_x:=x
23c30     3C E4 05 F1 | 	add	objptr, #60
23c34     F2 12 52 FC | 	wrword	arg01, objptr
23c38                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
23c38     F2 14 E2 FA | 	rdword	arg02, objptr
23c3c     02 14 66 F0 | 	shl	arg02, #2
23c40     02 E4 05 F1 | 	add	objptr, #2
23c44     F2 16 C2 FA | 	rdbyte	arg03, objptr
23c48     3E E4 85 F1 | 	sub	objptr, #62
23c4c     04 16 66 F0 | 	shl	arg03, #4
23c50     04 16 06 F1 | 	add	arg03, #4
23c54     11 12 06 F6 | 	mov	arg01, #17
23c58     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
23c5c                 | _hg010b_spin2_setcursorx_ret
23c5c     2D 00 64 FD | 	ret
23c60                 | 
23c60                 | ' 
23c60                 | ' pub setcursory(y) 
23c60                 | _hg010b_spin2_setcursory
23c60                 | ' cursor_y:=y
23c60     3E E4 05 F1 | 	add	objptr, #62
23c64     F2 12 42 FC | 	wrbyte	arg01, objptr
23c68                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
23c68     02 E4 85 F1 | 	sub	objptr, #2
23c6c     F2 14 E2 FA | 	rdword	arg02, objptr
23c70     02 14 66 F0 | 	shl	arg02, #2
23c74     02 E4 05 F1 | 	add	objptr, #2
23c78     F2 16 C2 FA | 	rdbyte	arg03, objptr
23c7c     3E E4 85 F1 | 	sub	objptr, #62
23c80     04 16 66 F0 | 	shl	arg03, #4
23c84     04 16 06 F1 | 	add	arg03, #4
23c88     11 12 06 F6 | 	mov	arg01, #17
23c8c     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
23c90                 | _hg010b_spin2_setcursory_ret
23c90     2D 00 64 FD | 	ret
23c94                 | 
23c94                 | ' 
23c94                 | ' '*************************************************************************
23c94                 | ' '                                                                        *
23c94                 | ' '  VBlank functions                                                      *
23c94                 | ' '                                                                        *
23c94                 | ' '*************************************************************************
23c94                 | ' 
23c94                 | ' pub waitvbl(amount) | i
23c94                 | _hg010b_spin2_waitvbl
23c94     03 4A 05 F6 | 	mov	COUNT_, #3
23c98     A8 00 A0 FD | 	call	#pushregs_
23c9c     09 27 02 F6 | 	mov	local01, arg01
23ca0                 | ' 
23ca0                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
23ca0                 | ' 
23ca0                 | ' repeat i from 1 to amount
23ca0     01 28 06 F6 | 	mov	local02, #1
23ca4     01 26 56 F2 | 	cmps	local01, #1 wc
23ca8     01 2A 86 F6 | 	negc	local03, #1
23cac     15 27 02 F1 | 	add	local01, local03
23cb0                 | LR__2820
23cb0                 | '   repeat until vblank==0
23cb0                 | LR__2821
23cb0     49 E4 05 F1 | 	add	objptr, #73
23cb4     F2 12 0A FB | 	rdlong	arg01, objptr wz
23cb8     49 E4 85 F1 | 	sub	objptr, #73
23cbc     0C 00 90 AD |  if_e	jmp	#LR__2822
23cc0                 | '     waitus(100)
23cc0     64 12 06 F6 | 	mov	arg01, #100
23cc4     20 20 B0 FD | 	call	#__system___waitus
23cc8     E4 FF 9F FD | 	jmp	#LR__2821
23ccc                 | LR__2822
23ccc                 | '   repeat until vblank==1
23ccc                 | LR__2823
23ccc     49 E4 05 F1 | 	add	objptr, #73
23cd0     F2 12 02 FB | 	rdlong	arg01, objptr
23cd4     49 E4 85 F1 | 	sub	objptr, #73
23cd8     01 12 0E F2 | 	cmp	arg01, #1 wz
23cdc     0C 00 90 AD |  if_e	jmp	#LR__2824
23ce0                 | '     waitus(100)
23ce0     64 12 06 F6 | 	mov	arg01, #100
23ce4     00 20 B0 FD | 	call	#__system___waitus
23ce8     E0 FF 9F FD | 	jmp	#LR__2823
23cec                 | LR__2824
23cec     15 29 02 F1 | 	add	local02, local03
23cf0     13 29 0A F2 | 	cmp	local02, local01 wz
23cf4     B8 FF 9F 5D |  if_ne	jmp	#LR__2820
23cf8     A7 F0 03 F6 | 	mov	ptra, fp
23cfc     B2 00 A0 FD | 	call	#popregs_
23d00                 | _hg010b_spin2_waitvbl_ret
23d00     2D 00 64 FD | 	ret
23d04                 | 
23d04                 | ' 
23d04                 | ' 
23d04                 | ' pub cls(fc,bc)   :c,i
23d04                 | _hg010b_spin2_cls
23d04     02 4A 05 F6 | 	mov	COUNT_, #2
23d08     A8 00 A0 FD | 	call	#pushregs_
23d0c     09 27 02 F6 | 	mov	local01, arg01
23d10     0A 29 02 F6 | 	mov	local02, arg02
23d14                 | ' 
23d14                 | ' c:=bc
23d14                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
23d14     DD E4 05 F1 | 	add	objptr, #221
23d18     F2 12 02 FB | 	rdlong	arg01, objptr
23d1c     A5 E4 85 F1 | 	sub	objptr, #165
23d20     F2 16 02 FB | 	rdlong	arg03, objptr
23d24     02 16 66 F0 | 	shl	arg03, #2
23d28     14 15 02 F6 | 	mov	arg02, local02
23d2c     00 18 06 F6 | 	mov	arg04, #0
23d30     01 1A 06 F6 | 	mov	arg05, #1
23d34     0B 00 00 FF 
23d38     94 E4 05 F1 | 	add	objptr, ##5780
23d3c     F8 10 B0 FD | 	call	#_psram_spin2_fill
23d40                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
23d40     0B 00 00 FF 
23d44     C8 E4 85 F1 | 	sub	objptr, ##5832
23d48     F2 12 02 FB | 	rdlong	arg01, objptr
23d4c     04 E4 85 F1 | 	sub	objptr, #4
23d50     F2 16 02 FB | 	rdlong	arg03, objptr
23d54     09 17 82 F1 | 	sub	arg03, arg01
23d58     20 14 06 F6 | 	mov	arg02, #32
23d5c     00 18 06 F6 | 	mov	arg04, #0
23d60     01 1A 06 F6 | 	mov	arg05, #1
23d64     0B 00 00 FF 
23d68     CC E4 05 F1 | 	add	objptr, ##5836
23d6c     C8 10 B0 FD | 	call	#_psram_spin2_fill
23d70                 | ' setwritecolors(fc,bc)
23d70                 | ' 
23d70                 | ' write_color:=ff
23d70     0B 00 00 FF 
23d74     8B E4 85 F1 | 	sub	objptr, ##5771
23d78     F2 26 62 FC | 	wrlong	local01, objptr
23d7c                 | ' write_background:=bb
23d7c     04 E4 05 F1 | 	add	objptr, #4
23d80     F2 28 62 FC | 	wrlong	local02, objptr
23d84                 | ' cursor_x:=0
23d84     09 E4 85 F1 | 	sub	objptr, #9
23d88     F2 00 58 FC | 	wrword	#0, objptr
23d8c                 | ' cursor_y:=0
23d8c     02 E4 05 F1 | 	add	objptr, #2
23d90     F2 00 48 FC | 	wrbyte	#0, objptr
23d94                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
23d94     02 E4 85 F1 | 	sub	objptr, #2
23d98     F2 14 E2 FA | 	rdword	arg02, objptr
23d9c     02 14 66 F0 | 	shl	arg02, #2
23da0     02 E4 05 F1 | 	add	objptr, #2
23da4     F2 16 C2 FA | 	rdbyte	arg03, objptr
23da8     3E E4 85 F1 | 	sub	objptr, #62
23dac     04 16 66 F0 | 	shl	arg03, #4
23db0     04 16 06 F1 | 	add	arg03, #4
23db4     11 12 06 F6 | 	mov	arg01, #17
23db8     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
23dbc                 | ' setcursorcolor(fc)
23dbc     13 13 02 F6 | 	mov	arg01, local01
23dc0     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
23dc4     14 FB 01 F6 | 	mov	result1, local02
23dc8     00 FC 05 F6 | 	mov	result2, #0
23dcc     A7 F0 03 F6 | 	mov	ptra, fp
23dd0     B2 00 A0 FD | 	call	#popregs_
23dd4                 | _hg010b_spin2_cls_ret
23dd4     2D 00 64 FD | 	ret
23dd8                 | 
23dd8                 | ' 
23dd8                 | ' ''---------- Output a char at the cursor position, move the cursor 
23dd8                 | ' 
23dd8                 | ' pub putchar(achar) | c,x,y,l,newcpl
23dd8                 | _hg010b_spin2_putchar
23dd8     02 4A 05 F6 | 	mov	COUNT_, #2
23ddc     A8 00 A0 FD | 	call	#pushregs_
23de0     09 27 02 F6 | 	mov	local01, arg01
23de4                 | ' 
23de4                 | ' if achar==10
23de4     0A 26 0E F2 | 	cmp	local01, #10 wz
23de8                 | '   crlf()
23de8     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
23dec                 | ' if achar==9
23dec     09 26 0E F2 | 	cmp	local01, #9 wz
23df0     18 00 90 5D |  if_ne	jmp	#LR__2830
23df4                 | '   cursor_x:=(cursor_x& %11110000)+16
23df4     3C E4 05 F1 | 	add	objptr, #60
23df8     F2 16 E2 FA | 	rdword	arg03, objptr
23dfc     F0 16 06 F5 | 	and	arg03, #240
23e00     10 16 06 F1 | 	add	arg03, #16
23e04     F2 16 52 FC | 	wrword	arg03, objptr
23e08     3C E4 85 F1 | 	sub	objptr, #60
23e0c                 | LR__2830
23e0c                 | '   
23e0c                 | ' if (achar<>9) && (achar<>10) 
23e0c     09 26 0E F2 | 	cmp	local01, #9 wz
23e10     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
23e14     A8 00 90 AD |  if_e	jmp	#LR__2831
23e18                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
23e18     3C E4 05 F1 | 	add	objptr, #60
23e1c     F2 12 E2 FA | 	rdword	arg01, objptr
23e20     02 E4 05 F1 | 	add	objptr, #2
23e24     F2 14 C2 FA | 	rdbyte	arg02, objptr
23e28     04 14 66 F0 | 	shl	arg02, #4
23e2c     04 14 06 F1 | 	add	arg02, #4
23e30     03 E4 05 F1 | 	add	objptr, #3
23e34     F2 18 02 FB | 	rdlong	arg04, objptr
23e38     04 E4 05 F1 | 	add	objptr, #4
23e3c     F2 1A 02 FB | 	rdlong	arg05, objptr
23e40     45 E4 85 F1 | 	sub	objptr, #69
23e44     13 17 02 F6 | 	mov	arg03, local01
23e48     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
23e4c     04 E4 05 F1 | 	add	objptr, #4
23e50     F2 12 02 FB | 	rdlong	arg01, objptr
23e54     10 00 00 FF 
23e58     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
23e5c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
23e60     3A E4 05 F1 | 	add	objptr, #58
23e64     F2 1A C2 FA | 	rdbyte	arg05, objptr
23e68     0D 17 02 FD | 	qmul	arg03, arg05
23e6c                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
23e6c     10 00 00 FF 
23e70     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
23e74     02 E4 85 F1 | 	sub	objptr, #2
23e78     F2 28 E2 FA | 	rdword	local02, objptr
23e7c     01 28 46 F0 | 	shr	local02, #1
23e80     13 15 02 F6 | 	mov	arg02, local01
23e84     01 16 06 F6 | 	mov	arg03, #1
23e88     00 18 06 F6 | 	mov	arg04, #0
23e8c     01 1A 06 F6 | 	mov	arg05, #1
23e90     0B 00 00 FF 
23e94     90 E4 05 F1 | 	add	objptr, ##5776
23e98     18 26 62 FD | 	getqx	local01
23e9c     14 27 02 F1 | 	add	local01, local02
23ea0     13 13 02 F1 | 	add	arg01, local01
23ea4     90 0F B0 FD | 	call	#_psram_spin2_fill
23ea8                 | '   cursor_x+=2
23ea8     0B 00 00 FF 
23eac     90 E4 85 F1 | 	sub	objptr, ##5776
23eb0     F2 28 E2 FA | 	rdword	local02, objptr
23eb4     02 28 06 F1 | 	add	local02, #2
23eb8     F2 28 52 FC | 	wrword	local02, objptr
23ebc     3C E4 85 F1 | 	sub	objptr, #60
23ec0                 | LR__2831
23ec0                 | ' 
23ec0                 | ' if cursor_x>=256
23ec0     3C E4 05 F1 | 	add	objptr, #60
23ec4     F2 28 E2 FA | 	rdword	local02, objptr
23ec8     3C E4 85 F1 | 	sub	objptr, #60
23ecc     00 29 56 F2 | 	cmps	local02, #256 wc
23ed0     64 00 90 CD |  if_b	jmp	#LR__2833
23ed4                 | '   cursor_x:=0
23ed4     3C E4 05 F1 | 	add	objptr, #60
23ed8     F2 00 58 FC | 	wrword	#0, objptr
23edc                 | '   cursor_y+=1
23edc     02 E4 05 F1 | 	add	objptr, #2
23ee0     F2 28 C2 FA | 	rdbyte	local02, objptr
23ee4     01 28 06 F1 | 	add	local02, #1
23ee8     F2 28 42 FC | 	wrbyte	local02, objptr
23eec                 | '   if cursor_y>st_lines-1
23eec     C3 E4 05 F1 | 	add	objptr, #195
23ef0     F2 28 02 FB | 	rdlong	local02, objptr
23ef4     01 28 86 F1 | 	sub	local02, #1
23ef8     C3 E4 85 F1 | 	sub	objptr, #195
23efc     F2 16 C2 FA | 	rdbyte	arg03, objptr
23f00     3E E4 85 F1 | 	sub	objptr, #62
23f04     14 17 5A F2 | 	cmps	arg03, local02 wcz
23f08     2C 00 90 ED |  if_be	jmp	#LR__2832
23f0c                 | '     scrollup2()
23f0c     00 12 06 F6 | 	mov	arg01, #0
23f10     01 00 00 FF 
23f14     58 14 06 F6 | 	mov	arg02, ##600
23f18     10 16 06 F6 | 	mov	arg03, #16
23f1c     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
23f20                 | '     cursor_y:=st_lines-1
23f20     01 E5 05 F1 | 	add	objptr, #257
23f24     F2 28 02 FB | 	rdlong	local02, objptr
23f28     01 28 86 F1 | 	sub	local02, #1
23f2c     C3 E4 85 F1 | 	sub	objptr, #195
23f30     F2 28 42 FC | 	wrbyte	local02, objptr
23f34     3E E4 85 F1 | 	sub	objptr, #62
23f38                 | LR__2832
23f38                 | LR__2833
23f38                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
23f38     3C E4 05 F1 | 	add	objptr, #60
23f3c     F2 14 E2 FA | 	rdword	arg02, objptr
23f40     02 14 66 F0 | 	shl	arg02, #2
23f44     02 E4 05 F1 | 	add	objptr, #2
23f48     F2 16 C2 FA | 	rdbyte	arg03, objptr
23f4c     3E E4 85 F1 | 	sub	objptr, #62
23f50     04 16 66 F0 | 	shl	arg03, #4
23f54     04 16 06 F1 | 	add	arg03, #4
23f58     11 12 06 F6 | 	mov	arg01, #17
23f5c     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
23f60     A7 F0 03 F6 | 	mov	ptra, fp
23f64     B2 00 A0 FD | 	call	#popregs_
23f68                 | _hg010b_spin2_putchar_ret
23f68     2D 00 64 FD | 	ret
23f6c                 | 
23f6c                 | '     
23f6c                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
23f6c                 | ' 
23f6c                 | ' pub putchar2(achar) | c,x,y,l,newcpl
23f6c                 | _hg010b_spin2_putchar2
23f6c     02 4A 05 F6 | 	mov	COUNT_, #2
23f70     A8 00 A0 FD | 	call	#pushregs_
23f74     09 27 02 F6 | 	mov	local01, arg01
23f78                 | ' 
23f78                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
23f78     3C E4 05 F1 | 	add	objptr, #60
23f7c     F2 12 E2 FA | 	rdword	arg01, objptr
23f80     02 E4 05 F1 | 	add	objptr, #2
23f84     F2 14 C2 FA | 	rdbyte	arg02, objptr
23f88     04 14 66 F0 | 	shl	arg02, #4
23f8c     04 14 06 F1 | 	add	arg02, #4
23f90     03 E4 05 F1 | 	add	objptr, #3
23f94     F2 18 02 FB | 	rdlong	arg04, objptr
23f98     04 E4 05 F1 | 	add	objptr, #4
23f9c     F2 1A 02 FB | 	rdlong	arg05, objptr
23fa0     45 E4 85 F1 | 	sub	objptr, #69
23fa4     13 17 02 F6 | 	mov	arg03, local01
23fa8     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
23fac     04 E4 05 F1 | 	add	objptr, #4
23fb0     F2 12 02 FB | 	rdlong	arg01, objptr
23fb4     10 00 00 FF 
23fb8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
23fbc     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
23fc0     3A E4 05 F1 | 	add	objptr, #58
23fc4     F2 1A C2 FA | 	rdbyte	arg05, objptr
23fc8     0D 17 02 FD | 	qmul	arg03, arg05
23fcc                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
23fcc     10 00 00 FF 
23fd0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
23fd4     02 E4 85 F1 | 	sub	objptr, #2
23fd8     F2 28 E2 FA | 	rdword	local02, objptr
23fdc     01 28 46 F0 | 	shr	local02, #1
23fe0     13 15 02 F6 | 	mov	arg02, local01
23fe4     01 16 06 F6 | 	mov	arg03, #1
23fe8     00 18 06 F6 | 	mov	arg04, #0
23fec     01 1A 06 F6 | 	mov	arg05, #1
23ff0     0B 00 00 FF 
23ff4     90 E4 05 F1 | 	add	objptr, ##5776
23ff8     18 26 62 FD | 	getqx	local01
23ffc     14 27 02 F1 | 	add	local01, local02
24000     13 13 02 F1 | 	add	arg01, local01
24004     30 0E B0 FD | 	call	#_psram_spin2_fill
24008                 | ' 
24008                 | ' cursor_x+=2
24008     0B 00 00 FF 
2400c     90 E4 85 F1 | 	sub	objptr, ##5776
24010     F2 28 E2 FA | 	rdword	local02, objptr
24014     02 28 06 F1 | 	add	local02, #2
24018     F2 28 52 FC | 	wrword	local02, objptr
2401c                 | ' if cursor_x>=256
2401c     F2 28 E2 FA | 	rdword	local02, objptr
24020     3C E4 85 F1 | 	sub	objptr, #60
24024     00 29 56 F2 | 	cmps	local02, #256 wc
24028     64 00 90 CD |  if_b	jmp	#LR__2841
2402c                 | '   cursor_x:=0
2402c     3C E4 05 F1 | 	add	objptr, #60
24030     F2 00 58 FC | 	wrword	#0, objptr
24034                 | '   cursor_y+=1
24034     02 E4 05 F1 | 	add	objptr, #2
24038     F2 28 C2 FA | 	rdbyte	local02, objptr
2403c     01 28 06 F1 | 	add	local02, #1
24040     F2 28 42 FC | 	wrbyte	local02, objptr
24044                 | '   if cursor_y>st_lines-1
24044     C3 E4 05 F1 | 	add	objptr, #195
24048     F2 28 02 FB | 	rdlong	local02, objptr
2404c     01 28 86 F1 | 	sub	local02, #1
24050     C3 E4 85 F1 | 	sub	objptr, #195
24054     F2 16 C2 FA | 	rdbyte	arg03, objptr
24058     3E E4 85 F1 | 	sub	objptr, #62
2405c     14 17 5A F2 | 	cmps	arg03, local02 wcz
24060     2C 00 90 ED |  if_be	jmp	#LR__2840
24064                 | '     scrollup2()
24064     00 12 06 F6 | 	mov	arg01, #0
24068     01 00 00 FF 
2406c     58 14 06 F6 | 	mov	arg02, ##600
24070     10 16 06 F6 | 	mov	arg03, #16
24074     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
24078                 | '     cursor_y:=st_lines-1
24078     01 E5 05 F1 | 	add	objptr, #257
2407c     F2 28 02 FB | 	rdlong	local02, objptr
24080     01 28 86 F1 | 	sub	local02, #1
24084     C3 E4 85 F1 | 	sub	objptr, #195
24088     F2 28 42 FC | 	wrbyte	local02, objptr
2408c     3E E4 85 F1 | 	sub	objptr, #62
24090                 | LR__2840
24090                 | LR__2841
24090                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
24090     3C E4 05 F1 | 	add	objptr, #60
24094     F2 14 E2 FA | 	rdword	arg02, objptr
24098     02 14 66 F0 | 	shl	arg02, #2
2409c     02 E4 05 F1 | 	add	objptr, #2
240a0     F2 16 C2 FA | 	rdbyte	arg03, objptr
240a4     3E E4 85 F1 | 	sub	objptr, #62
240a8     04 16 66 F0 | 	shl	arg03, #4
240ac     04 16 06 F1 | 	add	arg03, #4
240b0     11 12 06 F6 | 	mov	arg01, #17
240b4     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
240b8     A7 F0 03 F6 | 	mov	ptra, fp
240bc     B2 00 A0 FD | 	call	#popregs_
240c0                 | _hg010b_spin2_putchar2_ret
240c0     2D 00 64 FD | 	ret
240c4                 | 
240c4                 | ' ''--------- Output a string at the cursor position, move the cursor  
240c4                 | ' 
240c4                 | ' pub write(text) | iii,c,ncx,ncy
240c4                 | _hg010b_spin2_write
240c4     04 4A 05 F6 | 	mov	COUNT_, #4
240c8     A8 00 A0 FD | 	call	#pushregs_
240cc     09 27 02 F6 | 	mov	local01, arg01
240d0                 | ' 
240d0                 | ' repeat iii from 0 to strsize(text)-1
240d0     00 28 06 F6 | 	mov	local02, #0
240d4     13 13 02 F6 | 	mov	arg01, local01
240d8     09 2B 02 F6 | 	mov	local03, arg01
240dc     97 06 48 FB | 	callpa	#(@LR__2851-@LR__2850)>>2,fcache_load_ptr_
240e0                 | LR__2850
240e0     15 FB C9 FA | 	rdbyte	result1, local03 wz
240e4     01 2A 06 51 |  if_ne	add	local03, #1
240e8     F4 FF 9F 5D |  if_ne	jmp	#LR__2850
240ec                 | LR__2851
240ec     09 2B 82 F1 | 	sub	local03, arg01
240f0     01 2A 86 F1 | 	sub	local03, #1
240f4     00 2A 56 F2 | 	cmps	local03, #0 wc
240f8     01 2C 86 F6 | 	negc	local04, #1
240fc     16 2B 02 F1 | 	add	local03, local04
24100                 | LR__2852
24100                 | '   putchar2(byte[text+iii])
24100     13 13 02 F6 | 	mov	arg01, local01
24104     14 13 02 F1 | 	add	arg01, local02
24108     09 13 C2 FA | 	rdbyte	arg01, arg01
2410c     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
24110     16 29 02 F1 | 	add	local02, local04
24114     15 29 0A F2 | 	cmp	local02, local03 wz
24118     E4 FF 9F 5D |  if_ne	jmp	#LR__2852
2411c     A7 F0 03 F6 | 	mov	ptra, fp
24120     B2 00 A0 FD | 	call	#popregs_
24124                 | _hg010b_spin2_write_ret
24124     2D 00 64 FD | 	ret
24128                 | 
24128                 | '    
24128                 | ' ' a version for text scrolling in Basic shifted 4 lines down
24128                 | ' 
24128                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
24128                 | _hg010b_spin2_scrollup2
24128     03 4A 05 F6 | 	mov	COUNT_, #3
2412c     A8 00 A0 FD | 	call	#pushregs_
24130                 | ' 	
24130                 | ' repeat i from 4 to 579 
24130     04 26 06 F6 | 	mov	local01, #4
24134                 | LR__2860
24134     F9 E4 05 F1 | 	add	objptr, #249
24138     F2 1A 02 FB | 	rdlong	arg05, objptr
2413c     1C E4 85 F1 | 	sub	objptr, #28
24140     F2 14 02 FB | 	rdlong	arg02, objptr
24144     13 19 02 F6 | 	mov	arg04, local01
24148     10 18 06 F1 | 	add	arg04, #16
2414c     02 18 66 F0 | 	shl	arg04, #2
24150     14 E4 05 F1 | 	add	objptr, #20
24154     F2 16 02 FB | 	rdlong	arg03, objptr
24158     0B 19 02 FD | 	qmul	arg04, arg03
2415c                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
2415c     F6 03 00 FF 
24160     00 12 06 F6 | 	mov	arg01, ##519168
24164     0D 13 82 F1 | 	sub	arg01, arg05
24168     02 16 66 F0 | 	shl	arg03, #2
2416c     0A 00 00 FF 
24170     DB E5 05 F1 | 	add	objptr, ##5595
24174     18 1A 62 FD | 	getqx	arg05
24178     0D 15 02 F1 | 	add	arg02, arg05
2417c     80 0B B0 FD | 	call	#_psram_spin2_read1
24180     0A 00 00 FF 
24184     D3 E5 85 F1 | 	sub	objptr, ##5587
24188     F2 1A 02 FB | 	rdlong	arg05, objptr
2418c     1C E4 85 F1 | 	sub	objptr, #28
24190     F2 14 02 FB | 	rdlong	arg02, objptr
24194     13 19 02 F6 | 	mov	arg04, local01
24198     02 18 66 F0 | 	shl	arg04, #2
2419c     14 E4 05 F1 | 	add	objptr, #20
241a0     F2 16 02 FB | 	rdlong	arg03, objptr
241a4     0B 19 02 FD | 	qmul	arg04, arg03
241a8                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
241a8     F6 03 00 FF 
241ac     00 12 06 F6 | 	mov	arg01, ##519168
241b0     0D 13 82 F1 | 	sub	arg01, arg05
241b4     02 16 66 F0 | 	shl	arg03, #2
241b8     0A 00 00 FF 
241bc     DB E5 05 F1 | 	add	objptr, ##5595
241c0     18 1A 62 FD | 	getqx	arg05
241c4     0D 15 02 F1 | 	add	arg02, arg05
241c8     D0 0B B0 FD | 	call	#_psram_spin2_write
241cc     0B 00 00 FF 
241d0     CC E4 85 F1 | 	sub	objptr, ##5836
241d4     01 26 06 F1 | 	add	local01, #1
241d8     01 00 00 FF 
241dc     44 26 16 F2 | 	cmp	local01, ##580 wc
241e0     50 FF 9F CD |  if_b	jmp	#LR__2860
241e4                 | ' 
241e4                 | ' repeat i from 580 to 599
241e4     01 00 00 FF 
241e8     44 26 06 F6 | 	mov	local01, ##580
241ec                 | LR__2861
241ec                 | '    fastline(0,1023,i,write_background)   
241ec     45 E4 05 F1 | 	add	objptr, #69
241f0     F2 18 02 FB | 	rdlong	arg04, objptr
241f4     45 E4 85 F1 | 	sub	objptr, #69
241f8     00 12 06 F6 | 	mov	arg01, #0
241fc     09 14 CE F9 | 	bmask	arg02, #9
24200     13 17 02 F6 | 	mov	arg03, local01
24204     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
24208     01 26 06 F1 | 	add	local01, #1
2420c     01 00 00 FF 
24210     58 26 16 F2 | 	cmp	local01, ##600 wc
24214     D4 FF 9F CD |  if_b	jmp	#LR__2861
24218                 | ' repeat i from 0 to 3
24218     00 26 06 F6 | 	mov	local01, #0
2421c                 | LR__2862
2421c                 | '    fastline(0,1023,i,write_background)      
2421c     45 E4 05 F1 | 	add	objptr, #69
24220     F2 18 02 FB | 	rdlong	arg04, objptr
24224     45 E4 85 F1 | 	sub	objptr, #69
24228     00 12 06 F6 | 	mov	arg01, #0
2422c     09 14 CE F9 | 	bmask	arg02, #9
24230     13 17 02 F6 | 	mov	arg03, local01
24234     90 EF BF FD | 	call	#_hg010b_spin2_fastline
24238     01 26 06 F1 | 	add	local01, #1
2423c     04 26 56 F2 | 	cmps	local01, #4 wc
24240     D8 FF 9F CD |  if_b	jmp	#LR__2862
24244                 | ' 
24244                 | ' repeat i from 0 to 35
24244     00 26 06 F6 | 	mov	local01, #0
24248                 | LR__2863
24248     13 1B 02 F6 | 	mov	arg05, local01
2424c     01 1A 06 F1 | 	add	arg05, #1
24250     10 00 00 FF 
24254     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
24258     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
2425c     0B 1B 02 FD | 	qmul	arg05, arg03
24260                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
24260     F6 03 00 FF 
24264     00 12 06 F6 | 	mov	arg01, ##519168
24268     F9 E4 05 F1 | 	add	objptr, #249
2426c     F2 1A 02 FB | 	rdlong	arg05, objptr
24270     0D 13 82 F1 | 	sub	arg01, arg05
24274     F5 E4 85 F1 | 	sub	objptr, #245
24278     F2 14 02 FB | 	rdlong	arg02, objptr
2427c     10 00 00 FF 
24280     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
24284     0B 00 00 FF 
24288     C8 E4 05 F1 | 	add	objptr, ##5832
2428c     18 1A 62 FD | 	getqx	arg05
24290     0D 15 02 F1 | 	add	arg02, arg05
24294     68 0A B0 FD | 	call	#_psram_spin2_read1
24298     10 00 00 FF 
2429c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
242a0     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
242a4     0B 27 02 FD | 	qmul	local01, arg03
242a8                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
242a8     F6 03 00 FF 
242ac     00 12 06 F6 | 	mov	arg01, ##519168
242b0     0A 00 00 FF 
242b4     D3 E5 85 F1 | 	sub	objptr, ##5587
242b8     F2 1A 02 FB | 	rdlong	arg05, objptr
242bc     0D 13 82 F1 | 	sub	arg01, arg05
242c0     F5 E4 85 F1 | 	sub	objptr, #245
242c4     F2 14 02 FB | 	rdlong	arg02, objptr
242c8     10 00 00 FF 
242cc     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
242d0     0B 00 00 FF 
242d4     C8 E4 05 F1 | 	add	objptr, ##5832
242d8     18 1A 62 FD | 	getqx	arg05
242dc     0D 15 02 F1 | 	add	arg02, arg05
242e0     B8 0A B0 FD | 	call	#_psram_spin2_write
242e4     0B 00 00 FF 
242e8     CC E4 85 F1 | 	sub	objptr, ##5836
242ec     01 26 06 F1 | 	add	local01, #1
242f0     24 26 56 F2 | 	cmps	local01, #36 wc
242f4     50 FF 9F CD |  if_b	jmp	#LR__2863
242f8                 | ' repeat i from 0 to timings[7]-1
242f8     00 26 06 F6 | 	mov	local01, #0
242fc     10 00 00 FF 
24300     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
24304     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
24308     10 00 00 FF 
2430c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
24310     01 28 86 F1 | 	sub	local02, #1
24314     00 28 56 F2 | 	cmps	local02, #0 wc
24318     01 2A 86 F6 | 	negc	local03, #1
2431c     15 29 02 F1 | 	add	local02, local03
24320                 | LR__2864
24320                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
24320     04 E4 05 F1 | 	add	objptr, #4
24324     F2 12 02 FB | 	rdlong	arg01, objptr
24328     10 00 00 FF 
2432c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
24330     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
24334     10 00 00 FF 
24338     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
2433c     0D 19 02 F6 | 	mov	arg04, arg05
24340     03 18 66 F0 | 	shl	arg04, #3
24344     0D 19 02 F1 | 	add	arg04, arg05
24348     02 18 66 F0 | 	shl	arg04, #2
2434c     13 19 02 F1 | 	add	arg04, local01
24350     0C 13 02 F1 | 	add	arg01, arg04
24354     20 14 06 F6 | 	mov	arg02, #32
24358     01 16 06 F6 | 	mov	arg03, #1
2435c     00 18 06 F6 | 	mov	arg04, #0
24360     01 1A 06 F6 | 	mov	arg05, #1
24364     0B 00 00 FF 
24368     C8 E4 05 F1 | 	add	objptr, ##5832
2436c     C8 0A B0 FD | 	call	#_psram_spin2_fill
24370     0B 00 00 FF 
24374     CC E4 85 F1 | 	sub	objptr, ##5836
24378     15 27 02 F1 | 	add	local01, local03
2437c     14 27 0A F2 | 	cmp	local01, local02 wz
24380     9C FF 9F 5D |  if_ne	jmp	#LR__2864
24384     A7 F0 03 F6 | 	mov	ptra, fp
24388     B2 00 A0 FD | 	call	#popregs_
2438c                 | _hg010b_spin2_scrollup2_ret
2438c     2D 00 64 FD | 	ret
24390                 | 
24390                 | '  
24390                 | ' ''----------- Scroll the screen one line down 
24390                 | ' 
24390                 | ' pub scrolldown(start=0) | i
24390                 | _hg010b_spin2_scrolldown
24390     05 4A 05 F6 | 	mov	COUNT_, #5
24394     A8 00 A0 FD | 	call	#pushregs_
24398     09 27 02 F6 | 	mov	local01, arg01
2439c                 | ' 
2439c                 | ' repeat i from 579 to (start*16)+4
2439c     01 00 00 FF 
243a0     43 28 06 F6 | 	mov	local02, ##579
243a4     13 2B 02 F6 | 	mov	local03, local01
243a8     04 2A 66 F0 | 	shl	local03, #4
243ac     04 2A 06 F1 | 	add	local03, #4
243b0     01 00 00 FF 
243b4     43 2A 56 F2 | 	cmps	local03, ##579 wc
243b8     01 2C 86 F6 | 	negc	local04, #1
243bc     16 2F 02 F6 | 	mov	local05, local04
243c0     16 2B 02 F1 | 	add	local03, local04
243c4                 | LR__2870
243c4     F9 E4 05 F1 | 	add	objptr, #249
243c8     F2 2C 02 FB | 	rdlong	local04, objptr
243cc     1C E4 85 F1 | 	sub	objptr, #28
243d0     F2 14 02 FB | 	rdlong	arg02, objptr
243d4     14 1B 02 F6 | 	mov	arg05, local02
243d8     02 1A 66 F0 | 	shl	arg05, #2
243dc     14 E4 05 F1 | 	add	objptr, #20
243e0     F2 16 02 FB | 	rdlong	arg03, objptr
243e4     0B 1B 02 FD | 	qmul	arg05, arg03
243e8                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
243e8     F6 03 00 FF 
243ec     00 12 06 F6 | 	mov	arg01, ##519168
243f0     16 13 82 F1 | 	sub	arg01, local04
243f4     02 16 66 F0 | 	shl	arg03, #2
243f8     0A 00 00 FF 
243fc     DB E5 05 F1 | 	add	objptr, ##5595
24400     18 2C 62 FD | 	getqx	local04
24404     16 15 02 F1 | 	add	arg02, local04
24408     F4 08 B0 FD | 	call	#_psram_spin2_read1
2440c     0A 00 00 FF 
24410     D3 E5 85 F1 | 	sub	objptr, ##5587
24414     F2 2C 02 FB | 	rdlong	local04, objptr
24418     1C E4 85 F1 | 	sub	objptr, #28
2441c     F2 14 02 FB | 	rdlong	arg02, objptr
24420     14 1B 02 F6 | 	mov	arg05, local02
24424     10 1A 06 F1 | 	add	arg05, #16
24428     02 1A 66 F0 | 	shl	arg05, #2
2442c     14 E4 05 F1 | 	add	objptr, #20
24430     F2 16 02 FB | 	rdlong	arg03, objptr
24434     0B 1B 02 FD | 	qmul	arg05, arg03
24438                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
24438     F6 03 00 FF 
2443c     00 12 06 F6 | 	mov	arg01, ##519168
24440     16 13 82 F1 | 	sub	arg01, local04
24444     02 16 66 F0 | 	shl	arg03, #2
24448     0A 00 00 FF 
2444c     DB E5 05 F1 | 	add	objptr, ##5595
24450     18 2C 62 FD | 	getqx	local04
24454     16 15 02 F1 | 	add	arg02, local04
24458     40 09 B0 FD | 	call	#_psram_spin2_write
2445c     0B 00 00 FF 
24460     CC E4 85 F1 | 	sub	objptr, ##5836
24464     17 29 02 F1 | 	add	local02, local05
24468     15 29 0A F2 | 	cmp	local02, local03 wz
2446c     54 FF 9F 5D |  if_ne	jmp	#LR__2870
24470                 | ' 
24470                 | ' repeat i from (start*16)+4 to (start*16)+19
24470     13 29 02 F6 | 	mov	local02, local01
24474     04 28 66 F0 | 	shl	local02, #4
24478     04 28 06 F1 | 	add	local02, #4
2447c     13 2F 02 F6 | 	mov	local05, local01
24480     04 2E 66 F0 | 	shl	local05, #4
24484     13 2E 06 F1 | 	add	local05, #19
24488     13 2D 02 F6 | 	mov	local04, local01
2448c     04 2C 66 F0 | 	shl	local04, #4
24490     04 2C 06 F1 | 	add	local04, #4
24494     16 2F 52 F2 | 	cmps	local05, local04 wc
24498     01 2C 86 F6 | 	negc	local04, #1
2449c     16 2B 02 F6 | 	mov	local03, local04
244a0     16 2F 02 F1 | 	add	local05, local04
244a4                 | LR__2871
244a4                 | '    fastline(0,1023,i,write_background)    
244a4     45 E4 05 F1 | 	add	objptr, #69
244a8     F2 18 02 FB | 	rdlong	arg04, objptr
244ac     45 E4 85 F1 | 	sub	objptr, #69
244b0     00 12 06 F6 | 	mov	arg01, #0
244b4     09 14 CE F9 | 	bmask	arg02, #9
244b8     14 17 02 F6 | 	mov	arg03, local02
244bc     08 ED BF FD | 	call	#_hg010b_spin2_fastline
244c0     15 29 02 F1 | 	add	local02, local03
244c4     17 29 0A F2 | 	cmp	local02, local05 wz
244c8     D8 FF 9F 5D |  if_ne	jmp	#LR__2871
244cc                 | '    
244cc                 | ' repeat i from 35 to start
244cc     23 28 06 F6 | 	mov	local02, #35
244d0     23 26 56 F2 | 	cmps	local01, #35 wc
244d4     01 2C 86 F6 | 	negc	local04, #1
244d8     13 2F 02 F6 | 	mov	local05, local01
244dc     16 2F 02 F1 | 	add	local05, local04
244e0                 | LR__2872
244e0                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
244e0     F6 03 00 FF 
244e4     00 12 06 F6 | 	mov	arg01, ##519168
244e8     F9 E4 05 F1 | 	add	objptr, #249
244ec     F2 2A 02 FB | 	rdlong	local03, objptr
244f0     15 13 82 F1 | 	sub	arg01, local03
244f4     F5 E4 85 F1 | 	sub	objptr, #245
244f8     F2 14 02 FB | 	rdlong	arg02, objptr
244fc     14 2B 02 F6 | 	mov	local03, local02
24500     07 2A 66 F0 | 	shl	local03, #7
24504     15 15 02 F1 | 	add	arg02, local03
24508     80 16 06 F6 | 	mov	arg03, #128
2450c     0B 00 00 FF 
24510     C8 E4 05 F1 | 	add	objptr, ##5832
24514     E8 07 B0 FD | 	call	#_psram_spin2_read1
24518                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
24518     F6 03 00 FF 
2451c     00 12 06 F6 | 	mov	arg01, ##519168
24520     0A 00 00 FF 
24524     D3 E5 85 F1 | 	sub	objptr, ##5587
24528     F2 2A 02 FB | 	rdlong	local03, objptr
2452c     15 13 82 F1 | 	sub	arg01, local03
24530     F5 E4 85 F1 | 	sub	objptr, #245
24534     F2 14 02 FB | 	rdlong	arg02, objptr
24538     14 2B 02 F6 | 	mov	local03, local02
2453c     01 2A 06 F1 | 	add	local03, #1
24540     07 2A 66 F0 | 	shl	local03, #7
24544     15 15 02 F1 | 	add	arg02, local03
24548     80 16 06 F6 | 	mov	arg03, #128
2454c     0B 00 00 FF 
24550     C8 E4 05 F1 | 	add	objptr, ##5832
24554     44 08 B0 FD | 	call	#_psram_spin2_write
24558     0B 00 00 FF 
2455c     CC E4 85 F1 | 	sub	objptr, ##5836
24560     16 29 02 F1 | 	add	local02, local04
24564     17 29 0A F2 | 	cmp	local02, local05 wz
24568     74 FF 9F 5D |  if_ne	jmp	#LR__2872
2456c                 | ' repeat i from 0 to 127
2456c     00 28 06 F6 | 	mov	local02, #0
24570                 | LR__2873
24570                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
24570     04 E4 05 F1 | 	add	objptr, #4
24574     F2 12 02 FB | 	rdlong	arg01, objptr
24578     13 2F 02 F6 | 	mov	local05, local01
2457c     07 2E 66 F0 | 	shl	local05, #7
24580     17 13 02 F1 | 	add	arg01, local05
24584     14 13 02 F1 | 	add	arg01, local02
24588     20 14 06 F6 | 	mov	arg02, #32
2458c     01 16 06 F6 | 	mov	arg03, #1
24590     00 18 06 F6 | 	mov	arg04, #0
24594     01 1A 06 F6 | 	mov	arg05, #1
24598     0B 00 00 FF 
2459c     C8 E4 05 F1 | 	add	objptr, ##5832
245a0     94 08 B0 FD | 	call	#_psram_spin2_fill
245a4     0B 00 00 FF 
245a8     CC E4 85 F1 | 	sub	objptr, ##5836
245ac     01 28 06 F1 | 	add	local02, #1
245b0     80 28 56 F2 | 	cmps	local02, #128 wc
245b4     B8 FF 9F CD |  if_b	jmp	#LR__2873
245b8     A7 F0 03 F6 | 	mov	ptra, fp
245bc     B2 00 A0 FD | 	call	#popregs_
245c0                 | _hg010b_spin2_scrolldown_ret
245c0     2D 00 64 FD | 	ret
245c4                 | 
245c4                 | ' 
245c4                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
245c4                 | ' 
245c4                 | ' pub crlf()
245c4                 | _hg010b_spin2_crlf
245c4                 | ' 
245c4                 | ' cursor_x:=leading_spaces*2
245c4     01 00 00 FF 
245c8     B6 E4 05 F1 | 	add	objptr, ##694
245cc     F2 16 02 FB | 	rdlong	arg03, objptr
245d0     01 16 66 F0 | 	shl	arg03, #1
245d4     01 00 00 FF 
245d8     7A E4 85 F1 | 	sub	objptr, ##634
245dc     F2 16 52 FC | 	wrword	arg03, objptr
245e0                 | ' cursor_y+=1
245e0     02 E4 05 F1 | 	add	objptr, #2
245e4     F2 16 C2 FA | 	rdbyte	arg03, objptr
245e8     01 16 06 F1 | 	add	arg03, #1
245ec     F2 16 42 FC | 	wrbyte	arg03, objptr
245f0                 | ' if cursor_y>st_lines-1
245f0     C3 E4 05 F1 | 	add	objptr, #195
245f4     F2 16 02 FB | 	rdlong	arg03, objptr
245f8     01 16 86 F1 | 	sub	arg03, #1
245fc     C3 E4 85 F1 | 	sub	objptr, #195
24600     F2 14 C2 FA | 	rdbyte	arg02, objptr
24604     3E E4 85 F1 | 	sub	objptr, #62
24608     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
2460c     2C 00 90 ED |  if_be	jmp	#LR__2880
24610                 | '   scrollup2()
24610     00 12 06 F6 | 	mov	arg01, #0
24614     01 00 00 FF 
24618     58 14 06 F6 | 	mov	arg02, ##600
2461c     10 16 06 F6 | 	mov	arg03, #16
24620     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
24624                 | '   cursor_y:=st_lines-1
24624     01 E5 05 F1 | 	add	objptr, #257
24628     F2 16 02 FB | 	rdlong	arg03, objptr
2462c     01 16 86 F1 | 	sub	arg03, #1
24630     C3 E4 85 F1 | 	sub	objptr, #195
24634     F2 16 42 FC | 	wrbyte	arg03, objptr
24638     3E E4 85 F1 | 	sub	objptr, #62
2463c                 | LR__2880
2463c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
2463c     3C E4 05 F1 | 	add	objptr, #60
24640     F2 14 E2 FA | 	rdword	arg02, objptr
24644     02 14 66 F0 | 	shl	arg02, #2
24648     02 E4 05 F1 | 	add	objptr, #2
2464c     F2 16 C2 FA | 	rdbyte	arg03, objptr
24650     3E E4 85 F1 | 	sub	objptr, #62
24654     04 16 66 F0 | 	shl	arg03, #4
24658     04 16 06 F1 | 	add	arg03, #4
2465c     11 12 06 F6 | 	mov	arg01, #17
24660     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
24664                 | _hg010b_spin2_crlf_ret
24664     2D 00 64 FD | 	ret
24668                 | 
24668                 | ' 
24668                 | ' 
24668                 | ' '*************************************************************************
24668                 | ' '                                                                        *
24668                 | ' '  Conversions                                                           *
24668                 | ' '                                                                        *
24668                 | ' '*************************************************************************
24668                 | ' 
24668                 | ' ''---------- Convert a integer to dec string, return a pointer
24668                 | ' 
24668                 | ' pub inttostr(i):result |q,pos,k,j
24668                 | _hg010b_spin2_inttostr
24668     03 4A 05 F6 | 	mov	COUNT_, #3
2466c     A8 00 A0 FD | 	call	#pushregs_
24670     09 27 0A F6 | 	mov	local01, arg01 wz
24674                 | ' 
24674                 | ' j:=i
24674                 | ' pos:=10
24674     0A 28 06 F6 | 	mov	local02, #10
24678                 | ' k:=0
24678     00 2A 06 F6 | 	mov	local03, #0
2467c                 | ' 
2467c                 | ' if (j==0)
2467c     18 00 90 5D |  if_ne	jmp	#LR__2890
24680                 | '   n_string[0]:=48
24680     4D E4 05 F1 | 	add	objptr, #77
24684     F2 60 48 FC | 	wrbyte	#48, objptr
24688                 | '   n_string[1]:=0
24688     01 E4 05 F1 | 	add	objptr, #1
2468c     F2 00 48 FC | 	wrbyte	#0, objptr
24690     4E E4 85 F1 | 	sub	objptr, #78
24694     C4 00 90 FD | 	jmp	#LR__2897
24698                 | LR__2890
24698                 | ' 
24698                 | ' else
24698                 | '   if (j<0)
24698     13 27 52 F6 | 	abs	local01, local01 wc
2469c                 | '     j:=0-j
2469c                 | '     k:=45
2469c     2D 2A 06 C6 |  if_b	mov	local03, #45
246a0                 | ' 
246a0                 | '   n_string[11]:=0
246a0     58 E4 05 F1 | 	add	objptr, #88
246a4     F2 00 48 FC | 	wrbyte	#0, objptr
246a8     58 E4 85 F1 | 	sub	objptr, #88
246ac     97 24 48 FB | 	callpa	#(@LR__2892-@LR__2891)>>2,fcache_load_ptr_
246b0                 | '   repeat while (pos>-1)
246b0                 | LR__2891
246b0     00 28 56 F2 | 	cmps	local02, #0 wc
246b4     40 00 90 CD |  if_b	jmp	#LR__2893
246b8     13 FB 51 F6 | 	abs	result1, local01 wc
246bc     0A FA 15 FD | 	qdiv	result1, #10
246c0                 | '     q:=j//10
246c0     19 FA 61 FD | 	getqy	result1
246c4     FD FA 81 F6 | 	negc	result1, result1
246c8     13 27 52 F6 | 	abs	local01, local01 wc
246cc     0A 26 16 FD | 	qdiv	local01, #10
246d0                 | '     q:=48+q
246d0     30 FA 05 F1 | 	add	result1, #48
246d4                 | '     n_string[pos]:=q
246d4     14 27 02 F6 | 	mov	local01, local02
246d8     4D E4 05 F1 | 	add	objptr, #77
246dc     F2 26 02 F1 | 	add	local01, objptr
246e0     13 FB 41 FC | 	wrbyte	result1, local01
246e4                 | '     j:=j/10
246e4     4D E4 85 F1 | 	sub	objptr, #77
246e8                 | '     pos-=1
246e8     01 28 86 F1 | 	sub	local02, #1
246ec     18 26 62 FD | 	getqx	local01
246f0     13 27 82 F6 | 	negc	local01, local01
246f4     B8 FF 9F FD | 	jmp	#LR__2891
246f8                 | LR__2892
246f8                 | LR__2893
246f8                 | '   repeat while n_string[0]==48
246f8                 | LR__2894
246f8     4D E4 05 F1 | 	add	objptr, #77
246fc     F2 16 C2 FA | 	rdbyte	arg03, objptr
24700     4D E4 85 F1 | 	sub	objptr, #77
24704     30 16 0E F2 | 	cmp	arg03, #48 wz
24708     20 00 90 5D |  if_ne	jmp	#LR__2895
2470c                 | '     bytemove(@n_string,@n_string+1,12)
2470c     4D E4 05 F1 | 	add	objptr, #77
24710     F2 12 02 F6 | 	mov	arg01, objptr
24714     F2 14 02 F6 | 	mov	arg02, objptr
24718     4D E4 85 F1 | 	sub	objptr, #77
2471c     01 14 06 F1 | 	add	arg02, #1
24720     0C 16 06 F6 | 	mov	arg03, #12
24724     80 11 B0 FD | 	call	#__system____builtin_memmove
24728     CC FF 9F FD | 	jmp	#LR__2894
2472c                 | LR__2895
2472c                 | ' 
2472c                 | '   if k==45
2472c     2D 2A 0E F2 | 	cmp	local03, #45 wz
24730     28 00 90 5D |  if_ne	jmp	#LR__2896
24734                 | '      bytemove(@n_string+1,@n_string,12)
24734     4D E4 05 F1 | 	add	objptr, #77
24738     F2 12 02 F6 | 	mov	arg01, objptr
2473c     01 12 06 F1 | 	add	arg01, #1
24740     F2 14 02 F6 | 	mov	arg02, objptr
24744     4D E4 85 F1 | 	sub	objptr, #77
24748     0C 16 06 F6 | 	mov	arg03, #12
2474c     58 11 B0 FD | 	call	#__system____builtin_memmove
24750                 | '      n_string[0]:=k
24750     4D E4 05 F1 | 	add	objptr, #77
24754     F2 2A 42 FC | 	wrbyte	local03, objptr
24758     4D E4 85 F1 | 	sub	objptr, #77
2475c                 | LR__2896
2475c                 | LR__2897
2475c                 | ' 
2475c                 | ' q:=@n_string
2475c     4D E4 05 F1 | 	add	objptr, #77
24760     F2 FA 01 F6 | 	mov	result1, objptr
24764     4D E4 85 F1 | 	sub	objptr, #77
24768                 | ' return q
24768     A7 F0 03 F6 | 	mov	ptra, fp
2476c     B2 00 A0 FD | 	call	#popregs_
24770                 | _hg010b_spin2_inttostr_ret
24770     2D 00 64 FD | 	ret
24774                 | 
24774                 | ' 
24774                 | ' '**********************************************************************************
24774                 | ' '
24774                 | ' '        Blitting
24774                 | ' '
24774                 | ' '**********************************************************************************
24774                 | ' 
24774                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
24774                 | _hg010b_spin2_blit
24774     18 4A 05 F6 | 	mov	COUNT_, #24
24778     A8 00 A0 FD | 	call	#pushregs_
2477c     09 27 02 F6 | 	mov	local01, arg01
24780     0A 29 02 F6 | 	mov	local02, arg02
24784     0B 2B 02 F6 | 	mov	local03, arg03
24788     0C 2D 02 F6 | 	mov	local04, arg04
2478c     0D 2F 02 F6 | 	mov	local05, arg05
24790     0E 31 02 F6 | 	mov	local06, arg06
24794     0F 33 02 F6 | 	mov	local07, arg07
24798     10 35 02 F6 | 	mov	local08, arg08
2479c     11 37 02 F6 | 	mov	local09, arg09
247a0     12 39 02 F6 | 	mov	local10, arg10
247a4                 | ' 
247a4                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
247a4     00 04 00 FF 
247a8     00 26 56 F2 | 	cmps	local01, ##524288 wc
247ac     00 04 00 3F 
247b0     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
247b4     7C 01 90 CD |  if_b	jmp	#LR__2904
247b8     16 29 5A F2 | 	cmps	local02, local04 wcz
247bc     14 3B 02 16 |  if_a	mov	local11, local02
247c0     16 29 02 16 |  if_a	mov	local02, local04
247c4     1D 2D 02 16 |  if_a	mov	local04, local11
247c8     17 2B 5A F2 | 	cmps	local03, local05 wcz
247cc     15 3B 02 16 |  if_a	mov	local11, local03
247d0     17 2B 02 16 |  if_a	mov	local03, local05
247d4     18 2B 02 FD | 	qmul	local03, local06
247d8                 | '   if x1a>x2a
247d8                 | '     x1a,x2a:=x2a,x1a
247d8                 | '   if y1a>y2a
247d8                 | '     y1a,y2a:=y2a,y1a  
247d8     1D 2F 02 16 |  if_a	mov	local05, local11
247dc                 | ' 
247dc                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
247dc     19 3D 02 F6 | 	mov	local12, local07
247e0     14 3D 02 F1 | 	add	local12, local02
247e4     18 3A 62 FD | 	getqx	local11
247e8     1C 37 02 FD | 	qmul	local09, local10
247ec     1D 3D 02 F1 | 	add	local12, local11
247f0     13 3F 02 F6 | 	mov	local13, local01
247f4     1A 3F 02 F1 | 	add	local13, local08
247f8     18 3A 62 FD | 	getqx	local11
247fc     1D 3F 02 F1 | 	add	local13, local11
24800     1F 3D 5A F2 | 	cmps	local12, local13 wcz
24804     98 00 90 ED |  if_be	jmp	#LR__2901
24808                 | '     repeat y from y1a to y2a
24808     15 41 02 F6 | 	mov	local14, local03
2480c     15 2F 52 F2 | 	cmps	local05, local03 wc
24810     01 42 86 F6 | 	negc	local15, #1
24814     17 45 02 F6 | 	mov	local16, local05
24818     21 45 02 F1 | 	add	local16, local15
2481c     0B 00 00 FF 
24820     CC E4 05 F1 | 	add	objptr, ##5836
24824                 | LR__2900
24824     18 41 02 FD | 	qmul	local14, local06
24828                 | '   '    writeln(string("I am here"))
24828                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
24828     13 15 02 F6 | 	mov	arg02, local01
2482c     16 17 02 F6 | 	mov	arg03, local04
24830     14 17 82 F1 | 	sub	arg03, local02
24834     01 16 06 F1 | 	add	arg03, #1
24838     F6 03 00 FF 
2483c     00 12 06 F6 | 	mov	arg01, ##519168
24840     18 3E 62 FD | 	getqx	local13
24844     1F 15 02 F1 | 	add	arg02, local13
24848     14 15 02 F1 | 	add	arg02, local02
2484c     B0 04 B0 FD | 	call	#_psram_spin2_read1
24850     1B 3F 02 F6 | 	mov	local13, local09
24854     15 3F 82 F1 | 	sub	local13, local03
24858     20 3F 02 F1 | 	add	local13, local14
2485c     1C 3F 02 FD | 	qmul	local13, local10
24860                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
24860     19 15 02 F6 | 	mov	arg02, local07
24864     16 17 02 F6 | 	mov	arg03, local04
24868     14 17 82 F1 | 	sub	arg03, local02
2486c     01 16 06 F1 | 	add	arg03, #1
24870     F6 03 00 FF 
24874     00 12 06 F6 | 	mov	arg01, ##519168
24878     18 3E 62 FD | 	getqx	local13
2487c     1F 15 02 F1 | 	add	arg02, local13
24880     1A 15 02 F1 | 	add	arg02, local08
24884     14 05 B0 FD | 	call	#_psram_spin2_write
24888     21 41 02 F1 | 	add	local14, local15
2488c     22 41 0A F2 | 	cmp	local14, local16 wz
24890     90 FF 9F 5D |  if_ne	jmp	#LR__2900
24894     0B 00 00 FF 
24898     CC E4 85 F1 | 	sub	objptr, ##5836
2489c     94 00 90 FD | 	jmp	#LR__2903
248a0                 | LR__2901
248a0                 | '   else
248a0                 | '     repeat y from y2a to y1a
248a0     17 41 02 F6 | 	mov	local14, local05
248a4     17 2B 52 F2 | 	cmps	local03, local05 wc
248a8     01 46 86 F6 | 	negc	local17, #1
248ac     15 49 02 F6 | 	mov	local18, local03
248b0     23 49 02 F1 | 	add	local18, local17
248b4     0B 00 00 FF 
248b8     CC E4 05 F1 | 	add	objptr, ##5836
248bc                 | LR__2902
248bc     18 41 02 FD | 	qmul	local14, local06
248c0                 | '  '     writeln(string("I am there"))
248c0                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
248c0     13 15 02 F6 | 	mov	arg02, local01
248c4     16 17 02 F6 | 	mov	arg03, local04
248c8     14 17 82 F1 | 	sub	arg03, local02
248cc     01 16 06 F1 | 	add	arg03, #1
248d0     F6 03 00 FF 
248d4     00 12 06 F6 | 	mov	arg01, ##519168
248d8     18 44 62 FD | 	getqx	local16
248dc     22 15 02 F1 | 	add	arg02, local16
248e0     14 15 02 F1 | 	add	arg02, local02
248e4     18 04 B0 FD | 	call	#_psram_spin2_read1
248e8     1B 45 02 F6 | 	mov	local16, local09
248ec     15 45 82 F1 | 	sub	local16, local03
248f0     20 45 02 F1 | 	add	local16, local14
248f4     1C 45 02 FD | 	qmul	local16, local10
248f8                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
248f8     19 15 02 F6 | 	mov	arg02, local07
248fc     16 17 02 F6 | 	mov	arg03, local04
24900     14 17 82 F1 | 	sub	arg03, local02
24904     01 16 06 F1 | 	add	arg03, #1
24908     F6 03 00 FF 
2490c     00 12 06 F6 | 	mov	arg01, ##519168
24910     18 44 62 FD | 	getqx	local16
24914     22 15 02 F1 | 	add	arg02, local16
24918     1A 15 02 F1 | 	add	arg02, local08
2491c     7C 04 B0 FD | 	call	#_psram_spin2_write
24920     23 41 02 F1 | 	add	local14, local17
24924     24 41 0A F2 | 	cmp	local14, local18 wz
24928     90 FF 9F 5D |  if_ne	jmp	#LR__2902
2492c     0B 00 00 FF 
24930     CC E4 85 F1 | 	sub	objptr, ##5836
24934                 | LR__2903
24934                 | LR__2904
24934                 | '     
24934                 | ' if ((f>=$80000) && (t<$80000)) 
24934     00 04 00 FF 
24938     00 26 56 F2 | 	cmps	local01, ##524288 wc
2493c     80 00 90 CD |  if_b	jmp	#LR__2906
24940     00 04 00 FF 
24944     00 32 56 F2 | 	cmps	local07, ##524288 wc
24948     74 00 90 3D |  if_ae	jmp	#LR__2906
2494c                 | '   repeat y from y1a to y2a
2494c     15 41 02 F6 | 	mov	local14, local03
24950     15 2F 52 F2 | 	cmps	local05, local03 wc
24954     01 4A 86 F6 | 	negc	local19, #1
24958     17 4D 02 F6 | 	mov	local20, local05
2495c     25 4D 02 F1 | 	add	local20, local19
24960     0B 00 00 FF 
24964     CC E4 05 F1 | 	add	objptr, ##5836
24968                 | LR__2905
24968     1B 49 02 F6 | 	mov	local18, local09
2496c     15 49 82 F1 | 	sub	local18, local03
24970     20 49 02 F1 | 	add	local18, local14
24974     1C 49 02 FD | 	qmul	local18, local10
24978                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
24978     19 13 02 F6 | 	mov	arg01, local07
2497c     18 48 62 FD | 	getqx	local18
24980     18 41 02 FD | 	qmul	local14, local06
24984     24 13 02 F1 | 	add	arg01, local18
24988     1A 13 02 F1 | 	add	arg01, local08
2498c     13 15 02 F6 | 	mov	arg02, local01
24990     16 17 02 F6 | 	mov	arg03, local04
24994     14 17 82 F1 | 	sub	arg03, local02
24998     01 16 06 F1 | 	add	arg03, #1
2499c     18 48 62 FD | 	getqx	local18
249a0     24 15 02 F1 | 	add	arg02, local18
249a4     14 15 02 F1 | 	add	arg02, local02
249a8     54 03 B0 FD | 	call	#_psram_spin2_read1
249ac     25 41 02 F1 | 	add	local14, local19
249b0     26 41 0A F2 | 	cmp	local14, local20 wz
249b4     B0 FF 9F 5D |  if_ne	jmp	#LR__2905
249b8     0B 00 00 FF 
249bc     CC E4 85 F1 | 	sub	objptr, ##5836
249c0                 | LR__2906
249c0                 | '     
249c0                 | ' if ((f<$80000) && (t>=$80000)) 
249c0     00 04 00 FF 
249c4     00 26 56 F2 | 	cmps	local01, ##524288 wc
249c8     84 00 90 3D |  if_ae	jmp	#LR__2908
249cc     00 04 00 FF 
249d0     00 32 56 F2 | 	cmps	local07, ##524288 wc
249d4     78 00 90 CD |  if_b	jmp	#LR__2908
249d8                 | '   t:=t & $FFFFFFF
249d8     7C 32 06 F4 | 	bitl	local07, #124
249dc                 | '   repeat y from y1a to y2a
249dc     15 41 02 F6 | 	mov	local14, local03
249e0     15 2F 52 F2 | 	cmps	local05, local03 wc
249e4     01 4E 86 F6 | 	negc	local21, #1
249e8     17 51 02 F6 | 	mov	local22, local05
249ec     27 51 02 F1 | 	add	local22, local21
249f0     0B 00 00 FF 
249f4     CC E4 05 F1 | 	add	objptr, ##5836
249f8                 | LR__2907
249f8     18 41 02 FD | 	qmul	local14, local06
249fc                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
249fc     13 13 02 F6 | 	mov	arg01, local01
24a00     1B 4D 02 F6 | 	mov	local20, local09
24a04     15 4D 82 F1 | 	sub	local20, local03
24a08     20 4D 02 F1 | 	add	local20, local14
24a0c     18 4A 62 FD | 	getqx	local19
24a10     1C 4D 02 FD | 	qmul	local20, local10
24a14     25 13 02 F1 | 	add	arg01, local19
24a18     14 13 02 F1 | 	add	arg01, local02
24a1c     19 15 02 F6 | 	mov	arg02, local07
24a20     16 17 02 F6 | 	mov	arg03, local04
24a24     14 17 82 F1 | 	sub	arg03, local02
24a28     01 16 06 F1 | 	add	arg03, #1
24a2c     18 4C 62 FD | 	getqx	local20
24a30     26 15 02 F1 | 	add	arg02, local20
24a34     1A 15 02 F1 | 	add	arg02, local08
24a38     60 03 B0 FD | 	call	#_psram_spin2_write
24a3c     27 41 02 F1 | 	add	local14, local21
24a40     28 41 0A F2 | 	cmp	local14, local22 wz
24a44     B0 FF 9F 5D |  if_ne	jmp	#LR__2907
24a48     0B 00 00 FF 
24a4c     CC E4 85 F1 | 	sub	objptr, ##5836
24a50                 | LR__2908
24a50                 | '     
24a50                 | ' if ((f<$80000) && (t<$80000)) 
24a50     00 04 00 FF 
24a54     00 26 56 F2 | 	cmps	local01, ##524288 wc
24a58     00 04 00 CF 
24a5c     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
24a60     64 00 90 3D |  if_ae	jmp	#LR__2910
24a64                 | '   repeat y from y1a to y2a
24a64     15 41 02 F6 | 	mov	local14, local03
24a68     15 2F 52 F2 | 	cmps	local05, local03 wc
24a6c     01 52 86 F6 | 	negc	local23, #1
24a70     17 55 02 F6 | 	mov	local24, local05
24a74     29 55 02 F1 | 	add	local24, local23
24a78                 | LR__2909
24a78     18 41 02 FD | 	qmul	local14, local06
24a7c                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
24a7c     13 13 02 F6 | 	mov	arg01, local01
24a80     1B 51 02 F6 | 	mov	local22, local09
24a84     15 51 82 F1 | 	sub	local22, local03
24a88     20 51 02 F1 | 	add	local22, local14
24a8c     18 4E 62 FD | 	getqx	local21
24a90     1C 51 02 FD | 	qmul	local22, local10
24a94     27 13 02 F1 | 	add	arg01, local21
24a98     14 13 02 F1 | 	add	arg01, local02
24a9c     19 15 02 F6 | 	mov	arg02, local07
24aa0     16 17 02 F6 | 	mov	arg03, local04
24aa4     14 17 82 F1 | 	sub	arg03, local02
24aa8     01 16 06 F1 | 	add	arg03, #1
24aac     18 50 62 FD | 	getqx	local22
24ab0     28 15 02 F1 | 	add	arg02, local22
24ab4     1A 15 02 F1 | 	add	arg02, local08
24ab8     EC 0D B0 FD | 	call	#__system____builtin_memmove
24abc     29 41 02 F1 | 	add	local14, local23
24ac0     2A 41 0A F2 | 	cmp	local14, local24 wz
24ac4     B0 FF 9F 5D |  if_ne	jmp	#LR__2909
24ac8                 | LR__2910
24ac8     A7 F0 03 F6 | 	mov	ptra, fp
24acc     B2 00 A0 FD | 	call	#popregs_
24ad0                 | _hg010b_spin2_blit_ret
24ad0     2D 00 64 FD | 	ret
24ad4                 | 
24ad4                 | ' 
24ad4                 | ' '..............................................................................
24ad4                 | ' 
24ad4                 | ' {{
24ad4                 | ' }}
24ad4                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
24ad4                 | _psram_spin2_startx
24ad4     04 4A 05 F6 | 	mov	COUNT_, #4
24ad8     A8 00 A0 FD | 	call	#pushregs_
24adc     09 27 02 F6 | 	mov	local01, arg01
24ae0     0B 29 02 F6 | 	mov	local02, arg03
24ae4     0C 2B 02 F6 | 	mov	local03, arg04
24ae8                 | '     stop() ' restart driver if required
24ae8     54 01 B0 FD | 	call	#_psram_spin2_stop
24aec     00 26 0E F2 | 	cmp	local01, #0 wz
24af0     14 26 06 AB |  if_e	rdlong	local01, #20
24af4     13 15 52 F6 | 	abs	arg02, local01 wc
24af8     A1 07 00 FF 
24afc     40 14 16 FD | 	qdiv	arg02, ##1000000
24b00                 | ' 
24b00                 | '     ' use current frequency if none specified
24b00                 | ' 
24b00                 | '     if freq == 0 
24b00                 | '         freq := clkfreq 
24b00                 | ' 
24b00                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
24b00                 | ' 
24b00                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
24b00                 | '     if burst < 0
24b00                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
24b00     18 14 62 FD | 	getqx	arg02
24b04     0A 19 82 F6 | 	negc	arg04, arg02
24b08     03 18 66 F0 | 	shl	arg04, #3
24b0c     84 18 86 F1 | 	sub	arg04, #132
24b10     04 18 46 F0 | 	shr	arg04, #4
24b14     04 18 66 F0 | 	shl	arg04, #4
24b18     00 18 56 F2 | 	cmps	arg04, #0 wc
24b1c     0E FA 65 C6 |  if_b	neg	result1, #14
24b20     10 01 90 CD |  if_b	jmp	#LR__2923
24b24                 | ' 
24b24                 | '     ' compute the input delay
24b24                 | ' 
24b24                 | '     if delay <= 0
24b24     01 28 56 F2 | 	cmps	local02, #1 wc
24b28     10 00 90 3D |  if_ae	jmp	#LR__2920
24b2c                 | '         delay := lookupDelay(freq)
24b2c     13 13 02 F6 | 	mov	arg01, local01
24b30     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
24b34     FD 28 02 F6 | 	mov	local02, result1
24b38     04 00 90 FD | 	jmp	#LR__2921
24b3c                 | LR__2920
24b3c                 | '     else
24b3c                 | '         delay <#= $f ' limit to 15
24b3c     0F 28 66 F3 | 	fles	local02, #15
24b40                 | LR__2921
24b40                 | ' 
24b40                 | '     ' create our lock
24b40                 | ' 
24b40                 | '     driverlock := LOCKNEW()  
24b40     00 FA 05 F6 | 	mov	result1, #0
24b44     04 FA 61 FD | 	locknew	result1
24b48     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
24b4c     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
24b50                 | '     if driverlock == -1
24b50     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
24b54     FF FF 7F FF 
24b58     FF FB 0D F2 | 	cmp	result1, ##-1 wz
24b5c                 | '         return ERR_NO_LOCK
24b5c     1A FA 65 A6 |  if_e	neg	result1, #26
24b60     D0 00 90 AD |  if_e	jmp	#LR__2923
24b64                 | ' 
24b64                 | '     ' patch in the proper data and HUB addresses to the startup structure
24b64                 | ' 
24b64                 | '     long[@startupData][0]:=clkfreq
24b64     14 26 06 FB | 	rdlong	local01, #20
24b68     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
24b6c     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
24b70                 | ' '    long[@startupData][1]:=$1000_0000
24b70                 | '     long[@startupData][5]:=@deviceData
24b70     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
24b74     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
24b78     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
24b7c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
24b80     14 14 06 F1 | 	add	arg02, #20
24b84     0A 27 62 FC | 	wrlong	local01, arg02
24b88                 | '     long[@startupData][6]:=@qosData
24b88     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
24b8c     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
24b90     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
24b94     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
24b98     18 14 06 F1 | 	add	arg02, #24
24b9c     0A 27 62 FC | 	wrlong	local01, arg02
24ba0                 | '     long[@startupData][7]:=$7FF00
24ba0     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
24ba4     1C 26 06 F1 | 	add	local01, #28
24ba8     FF 03 80 FF 
24bac     13 01 6A FC | 	wrlong	##524032, local01
24bb0                 | ' 
24bb0                 | '     ' setup some default bank and QoS parameter values
24bb0                 | ' 
24bb0                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
24bb0     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
24bb4     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
24bb8     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
24bbc     10 18 66 F0 | 	shl	arg04, #16
24bc0     0C 28 66 F0 | 	shl	local02, #12
24bc4     14 19 42 F5 | 	or	arg04, local02
24bc8     18 18 46 F5 | 	or	arg04, #24
24bcc     0C 15 02 F6 | 	mov	arg02, arg04
24bd0     02 16 06 F6 | 	mov	arg03, #2
24bd4     A0 00 A0 FD | 	call	#\builtin_longfill_
24bd8                 | '     longfill(@qosData, $FFFF0000, 8)
24bd8     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
24bdc     07 16 06 F6 | 	mov	arg03, #7
24be0     28 16 62 FD | 	setq	arg03
24be4     80 FF FF FF 
24be8     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
24bec                 | ' 
24bec                 | '     ' get the address of the PSRAM memory driver so we can start it
24bec                 | ' 
24bec                 | '     driverAddr:= driver.getDriverAddr()
24bec                 | '     return @driver_start
24bec     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
24bf0     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
24bf4     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
24bf8                 | ' 
24bf8                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
24bf8                 | ' 
24bf8                 | '     if desiredcog < 0
24bf8     00 2A 56 F2 | 	cmps	local03, #0 wc
24bfc                 | '         desiredcog := NEWCOG
24bfc     10 2A 06 C6 |  if_b	mov	local03, #16
24c00                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
24c00     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
24c04     15 2D 02 F6 | 	mov	local04, local03
24c08     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
24c0c     0A 2D F2 FC | 	coginit	local04, arg02 wc
24c10     01 2C 66 C6 |  if_b	neg	local04, #1
24c14     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
24c18     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
24c1c                 | '     repeat until long[@startupData] == 0 
24c1c     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
24c20                 | LR__2922
24c20     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
24c24     F8 FF 9F 5D |  if_ne	jmp	#LR__2922
24c28                 | ' 
24c28                 | '     return drivercog
24c28     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
24c2c     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
24c30     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24c34                 | LR__2923
24c34     A7 F0 03 F6 | 	mov	ptra, fp
24c38     B2 00 A0 FD | 	call	#popregs_
24c3c                 | _psram_spin2_startx_ret
24c3c     2D 00 64 FD | 	ret
24c40                 | 
24c40                 | ' 
24c40                 | ' '..............................................................................
24c40                 | ' 
24c40                 | ' {{
24c40                 | ' }}
24c40                 | ' PUB stop() : i
24c40                 | _psram_spin2_stop
24c40     00 00 06 F6 | 	mov	_var01, #0
24c44                 | '     if drivercog <> -1
24c44     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24c48     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
24c4c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24c50     FF FF 7F FF 
24c54     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
24c58     70 00 90 AD |  if_e	jmp	#LR__2933
24c5c                 | '         cogstop(drivercog) ' a rather brutal stop
24c5c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24c60     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
24c64     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24c68     03 12 62 FD | 	cogstop	arg01
24c6c     97 26 48 FB | 	callpa	#(@LR__2932-@LR__2930)>>2,fcache_load_ptr_
24c70                 | '         repeat i from 0 to 7
24c70                 | LR__2930
24c70                 | '             if long[$7FF00][i*3] < 0
24c70     00 FB 01 F6 | 	mov	result1, _var01
24c74     01 FA 65 F0 | 	shl	result1, #1
24c78     00 FB 01 F1 | 	add	result1, _var01
24c7c     02 FA 65 F0 | 	shl	result1, #2
24c80     FF 03 00 FF 
24c84     00 FB 05 F1 | 	add	result1, ##524032
24c88     FD FA 01 FB | 	rdlong	result1, result1
24c8c     00 FA 55 F2 | 	cmps	result1, #0 wc
24c90     1C 00 90 3D |  if_ae	jmp	#LR__2931
24c94                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
24c94     00 FB 01 F6 | 	mov	result1, _var01
24c98     01 FA 65 F0 | 	shl	result1, #1
24c9c     00 FB 01 F1 | 	add	result1, _var01
24ca0     02 FA 65 F0 | 	shl	result1, #2
24ca4     FF 03 00 FF 
24ca8     00 FB 05 F1 | 	add	result1, ##524032
24cac     FD 20 68 FC | 	wrlong	#16, result1
24cb0                 | LR__2931
24cb0     01 00 06 F1 | 	add	_var01, #1
24cb4     08 00 56 F2 | 	cmps	_var01, #8 wc
24cb8     B4 FF 9F CD |  if_b	jmp	#LR__2930
24cbc                 | LR__2932
24cbc                 | '         drivercog := -1
24cbc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24cc0     FF FF FF FF 
24cc4     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
24cc8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24ccc                 | LR__2933
24ccc                 | '     if driverlock <> -1
24ccc     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
24cd0     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
24cd4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
24cd8     FF FF 7F FF 
24cdc     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
24ce0                 | '         LOCKRET(driverlock)
24ce0     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
24ce4     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
24ce8     05 12 62 5D |  if_ne	lockret	arg01
24cec                 | '         driverlock := -1
24cec     FF FF FF 5F 
24cf0     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
24cf4     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
24cf8     00 FB 01 F6 | 	mov	result1, _var01
24cfc                 | _psram_spin2_stop_ret
24cfc     2D 00 64 FD | 	ret
24d00                 | 
24d00                 | ' 
24d00                 | ' '..............................................................................
24d00                 | ' 
24d00                 | ' {{
24d00                 | ' }}
24d00                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
24d00                 | _psram_spin2_read1
24d00                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
24d00                 | '     if drivercog == -1 ' driver must be running
24d00     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24d04     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
24d08     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24d0c     FF FF 7F FF 
24d10     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
24d14                 | '         return ERR_INACTIVE
24d14     0F FA 65 A6 |  if_e	neg	result1, #15
24d18     7C 00 90 AD |  if_e	jmp	#LR__2941
24d1c                 | '     if count == 0 ' don't even bother reading
24d1c     00 16 0E F2 | 	cmp	arg03, #0 wz
24d20                 | '         return 0
24d20     00 FA 05 A6 |  if_e	mov	result1, #0
24d24     70 00 90 AD |  if_e	jmp	#LR__2941
24d28                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
24d28     00 FA 05 F6 | 	mov	result1, #0
24d2c     01 FA 61 FD | 	cogid	result1
24d30     FD 00 02 F6 | 	mov	_var01, result1
24d34     01 00 66 F0 | 	shl	_var01, #1
24d38     FD 00 02 F1 | 	add	_var01, result1
24d3c     02 00 66 F0 | 	shl	_var01, #2
24d40     FF 03 00 FF 
24d44     00 03 06 F6 | 	mov	_var02, ##524032
24d48     00 03 02 F1 | 	add	_var02, _var01
24d4c                 | '     if long[mailbox] < 0
24d4c     01 01 02 FB | 	rdlong	_var01, _var02
24d50     00 00 56 F2 | 	cmps	_var01, #0 wc
24d54                 | '         return ERR_MAILBOX_BUSY
24d54     1C FA 65 C6 |  if_b	neg	result1, #28
24d58     3C 00 90 CD |  if_b	jmp	#LR__2941
24d5c                 | '     long[mailbox][2] := count
24d5c     08 02 06 F1 | 	add	_var02, #8
24d60     01 17 62 FC | 	wrlong	arg03, _var02
24d64                 | '     long[mailbox][1] := dstHubAddr
24d64     04 02 86 F1 | 	sub	_var02, #4
24d68     01 13 62 FC | 	wrlong	arg01, _var02
24d6c     04 02 86 F1 | 	sub	_var02, #4
24d70                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
24d70     0A 05 02 F6 | 	mov	_var03, arg02
24d74     D9 04 06 F4 | 	bitl	_var03, #217
24d78     00 00 58 FF 
24d7c     00 00 06 F6 | 	mov	_var01, ##-1342177280
24d80     02 01 02 F1 | 	add	_var01, _var03
24d84     01 01 62 FC | 	wrlong	_var01, _var02
24d88                 | '     repeat
24d88                 | LR__2940
24d88                 | '         result := long[mailbox]    
24d88     01 05 02 FB | 	rdlong	_var03, _var02
24d8c     00 04 56 F2 | 	cmps	_var03, #0 wc
24d90     F4 FF 9F CD |  if_b	jmp	#LR__2940
24d94                 | '     while result < 0   
24d94                 | '     return -result                       'return success or error
24d94     02 FB 61 F6 | 	neg	result1, _var03
24d98                 | LR__2941
24d98                 | _psram_spin2_read1_ret
24d98     2D 00 64 FD | 	ret
24d9c                 | 
24d9c                 | ' 
24d9c                 | ' '..............................................................................
24d9c                 | ' 
24d9c                 | ' {{
24d9c                 | ' }}
24d9c                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
24d9c                 | _psram_spin2_write
24d9c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
24d9c                 | '     if drivercog == -1 ' driver must be running
24d9c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24da0     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
24da4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24da8     FF FF 7F FF 
24dac     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
24db0                 | '         return ERR_INACTIVE
24db0     0F FA 65 A6 |  if_e	neg	result1, #15
24db4     7C 00 90 AD |  if_e	jmp	#LR__2951
24db8                 | '     if count == 0 ' don't even bother writing
24db8     00 16 0E F2 | 	cmp	arg03, #0 wz
24dbc                 | '         return 0
24dbc     00 FA 05 A6 |  if_e	mov	result1, #0
24dc0     70 00 90 AD |  if_e	jmp	#LR__2951
24dc4                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
24dc4     00 FA 05 F6 | 	mov	result1, #0
24dc8     01 FA 61 FD | 	cogid	result1
24dcc     FD 00 02 F6 | 	mov	_var01, result1
24dd0     01 00 66 F0 | 	shl	_var01, #1
24dd4     FD 00 02 F1 | 	add	_var01, result1
24dd8     02 00 66 F0 | 	shl	_var01, #2
24ddc     FF 03 00 FF 
24de0     00 03 06 F6 | 	mov	_var02, ##524032
24de4     00 03 02 F1 | 	add	_var02, _var01
24de8                 | '     if long[mailbox] < 0
24de8     01 01 02 FB | 	rdlong	_var01, _var02
24dec     00 00 56 F2 | 	cmps	_var01, #0 wc
24df0                 | '         return ERR_MAILBOX_BUSY
24df0     1C FA 65 C6 |  if_b	neg	result1, #28
24df4     3C 00 90 CD |  if_b	jmp	#LR__2951
24df8                 | '     long[mailbox][2] := count
24df8     08 02 06 F1 | 	add	_var02, #8
24dfc     01 17 62 FC | 	wrlong	arg03, _var02
24e00                 | '     long[mailbox][1] := srcHubAddr
24e00     04 02 86 F1 | 	sub	_var02, #4
24e04     01 13 62 FC | 	wrlong	arg01, _var02
24e08     04 02 86 F1 | 	sub	_var02, #4
24e0c                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
24e0c     0A 05 02 F6 | 	mov	_var03, arg02
24e10     D9 04 06 F4 | 	bitl	_var03, #217
24e14     00 00 78 FF 
24e18     00 00 06 F6 | 	mov	_var01, ##-268435456
24e1c     02 01 02 F1 | 	add	_var01, _var03
24e20     01 01 62 FC | 	wrlong	_var01, _var02
24e24                 | '     repeat
24e24                 | LR__2950
24e24                 | '         result := long[mailbox]    
24e24     01 05 02 FB | 	rdlong	_var03, _var02
24e28     00 04 56 F2 | 	cmps	_var03, #0 wc
24e2c     F4 FF 9F CD |  if_b	jmp	#LR__2950
24e30                 | '     while result < 0   
24e30                 | '     return -result                       'return success or error
24e30     02 FB 61 F6 | 	neg	result1, _var03
24e34                 | LR__2951
24e34                 | _psram_spin2_write_ret
24e34     2D 00 64 FD | 	ret
24e38                 | 
24e38                 | ' 
24e38                 | ' ' generalized fill
24e38                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
24e38                 | _psram_spin2_fill
24e38     09 01 02 F6 | 	mov	_var01, arg01
24e3c     0A 03 02 F6 | 	mov	_var02, arg02
24e40     0B 05 02 F6 | 	mov	_var03, arg03
24e44     0D 07 02 F6 | 	mov	_var04, arg05
24e48                 | '     case datasize 
24e48     01 06 86 F1 | 	sub	_var04, #1
24e4c     04 06 26 F3 | 	fle	_var04, #4
24e50     30 06 62 FD | 	jmprel	_var04
24e54                 | LR__2960
24e54     10 00 90 FD | 	jmp	#LR__2961
24e58     18 00 90 FD | 	jmp	#LR__2962
24e5c     2C 00 90 FD | 	jmp	#LR__2964
24e60     1C 00 90 FD | 	jmp	#LR__2963
24e64     24 00 90 FD | 	jmp	#LR__2964
24e68                 | LR__2961
24e68                 | '         1: req := driver.R_WRITEBYTE
24e68     00 00 60 FF 
24e6c     00 08 06 F6 | 	mov	_var05, ##-1073741824
24e70     20 00 90 FD | 	jmp	#LR__2965
24e74                 | LR__2962
24e74                 | '         2: req := driver.R_WRITEWORD
24e74     00 00 68 FF 
24e78     00 08 06 F6 | 	mov	_var05, ##-805306368
24e7c     14 00 90 FD | 	jmp	#LR__2965
24e80                 | LR__2963
24e80                 | '         4: req := driver.R_WRITELONG
24e80     00 00 70 FF 
24e84     00 08 06 F6 | 	mov	_var05, ##-536870912
24e88     08 00 90 FD | 	jmp	#LR__2965
24e8c                 | LR__2964
24e8c                 | '         other : return ERR_INVALID
24e8c     06 FA 65 F6 | 	neg	result1, #6
24e90     94 00 90 FD | 	jmp	#LR__2967
24e94                 | LR__2965
24e94                 | '     if count == 0   ' nothing to do
24e94     00 04 0E F2 | 	cmp	_var03, #0 wz
24e98                 | '         return 0
24e98     00 FA 05 A6 |  if_e	mov	result1, #0
24e9c     88 00 90 AD |  if_e	jmp	#LR__2967
24ea0                 | '     if drivercog == -1
24ea0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24ea4     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
24ea8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24eac     FF FF 7F FF 
24eb0     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
24eb4                 | '         return ERR_INACTIVE
24eb4     0F FA 65 A6 |  if_e	neg	result1, #15
24eb8     6C 00 90 AD |  if_e	jmp	#LR__2967
24ebc                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
24ebc     00 FA 05 F6 | 	mov	result1, #0
24ec0     01 FA 61 FD | 	cogid	result1
24ec4     FD 06 02 F6 | 	mov	_var04, result1
24ec8     01 06 66 F0 | 	shl	_var04, #1
24ecc     FD 06 02 F1 | 	add	_var04, result1
24ed0     02 06 66 F0 | 	shl	_var04, #2
24ed4     FF 03 00 FF 
24ed8     00 0B 06 F6 | 	mov	_var06, ##524032
24edc     03 0B 02 F1 | 	add	_var06, _var04
24ee0                 | '     if long[mailbox] < 0
24ee0     05 07 02 FB | 	rdlong	_var04, _var06
24ee4     00 06 56 F2 | 	cmps	_var04, #0 wc
24ee8                 | '         return ERR_MAILBOX_BUSY
24ee8     1C FA 65 C6 |  if_b	neg	result1, #28
24eec     38 00 90 CD |  if_b	jmp	#LR__2967
24ef0                 | '     long[mailbox][2] := count
24ef0     08 0A 06 F1 | 	add	_var06, #8
24ef4     05 05 62 FC | 	wrlong	_var03, _var06
24ef8                 | '     long[mailbox][1] := pattern
24ef8     04 0A 86 F1 | 	sub	_var06, #4
24efc     05 03 62 FC | 	wrlong	_var02, _var06
24f00     04 0A 86 F1 | 	sub	_var06, #4
24f04                 | '     long[mailbox] := req + (addr & $1ffffff)
24f04     04 0D 02 F6 | 	mov	_var07, _var05
24f08     00 0F 02 F6 | 	mov	_var08, _var01
24f0c     D9 0E 06 F4 | 	bitl	_var08, #217
24f10     07 0D 02 F1 | 	add	_var07, _var08
24f14     05 0D 62 FC | 	wrlong	_var07, _var06
24f18                 | '     repeat
24f18                 | LR__2966
24f18                 | '         r := long[mailbox]
24f18     05 0F 02 FB | 	rdlong	_var08, _var06
24f1c     00 0E 56 F2 | 	cmps	_var08, #0 wc
24f20     F4 FF 9F CD |  if_b	jmp	#LR__2966
24f24                 | '     while r < 0
24f24                 | '     return -r                  ' return 0 for success or negated error code
24f24     07 FB 61 F6 | 	neg	result1, _var08
24f28                 | LR__2967
24f28                 | _psram_spin2_fill_ret
24f28     2D 00 64 FD | 	ret
24f2c                 | 
24f2c                 | ' 
24f2c                 | ' '..............................................................................
24f2c                 | ' 
24f2c                 | ' {{
24f2c                 | ' }}
24f2c                 | ' PUB setQos(cog, qos) : result | mailbox
24f2c                 | _psram_spin2_setQos
24f2c     09 01 02 F6 | 	mov	_var01, arg01
24f30                 | '     if drivercog == -1 ' driver must be running
24f30     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24f34     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
24f38     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24f3c     FF FF 7F FF 
24f40     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
24f44                 | '         return ERR_INACTIVE
24f44     0F FA 65 A6 |  if_e	neg	result1, #15
24f48     9C 00 90 AD |  if_e	jmp	#LR__2974
24f4c                 | '     if cog < 0 or cog > 7 ' enforce cog id range
24f4c     00 00 56 F2 | 	cmps	_var01, #0 wc
24f50     08 00 90 CD |  if_b	jmp	#LR__2970
24f54     08 00 56 F2 | 	cmps	_var01, #8 wc
24f58     08 00 90 CD |  if_b	jmp	#LR__2971
24f5c                 | LR__2970
24f5c                 | '         return ERR_INVALID
24f5c     06 FA 65 F6 | 	neg	result1, #6
24f60     84 00 90 FD | 	jmp	#LR__2974
24f64                 | LR__2971
24f64                 | '     long[@qosData][cog] := qos & !$1ff
24f64     FF 15 26 F5 | 	andn	arg02, #511
24f68     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
24f6c     02 00 66 F0 | 	shl	_var01, #2
24f70     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
24f74     00 15 62 FC | 	wrlong	arg02, _var01
24f78                 | '     mailbox := $7FF00 + drivercog*12
24f78     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
24f7c     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
24f80     02 07 02 F6 | 	mov	_var04, _var03
24f84     01 06 66 F0 | 	shl	_var04, #1
24f88     02 07 02 F1 | 	add	_var04, _var03
24f8c     02 06 66 F0 | 	shl	_var04, #2
24f90     FF 03 00 FF 
24f94     00 09 06 F6 | 	mov	_var05, ##524032
24f98     03 09 02 F1 | 	add	_var05, _var04
24f9c                 | '     repeat until LOCKTRY(driverlock)
24f9c     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
24fa0                 | LR__2972
24fa0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
24fa4     06 12 72 FD | 	locktry	arg01 wc
24fa8     F4 FF 9F 3D |  if_ae	jmp	#LR__2972
24fac     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
24fb0                 | '     long[mailbox] := driver.R_CONFIG + cogid()
24fb0     00 06 06 F6 | 	mov	_var04, #0
24fb4     01 06 62 FD | 	cogid	_var04
24fb8     00 00 78 FF 
24fbc     00 02 06 F6 | 	mov	_var02, ##-268435456
24fc0     03 03 02 F1 | 	add	_var02, _var04
24fc4     04 03 62 FC | 	wrlong	_var02, _var05
24fc8                 | '     repeat while long[mailbox] < 0
24fc8                 | LR__2973
24fc8     04 03 02 FB | 	rdlong	_var02, _var05
24fcc     00 02 56 F2 | 	cmps	_var02, #0 wc
24fd0     F4 FF 9F CD |  if_b	jmp	#LR__2973
24fd4                 | '     LOCKREL(driverlock)
24fd4     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
24fd8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
24fdc     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
24fe0     07 12 72 FD | 	lockrel	arg01 wc
24fe4     00 FA 05 F6 | 	mov	result1, #0
24fe8                 | LR__2974
24fe8                 | _psram_spin2_setQos_ret
24fe8     2D 00 64 FD | 	ret
24fec                 | 
24fec                 | ' 
24fec                 | ' '..............................................................................
24fec                 | ' 
24fec                 | ' {{
24fec                 | ' }}
24fec                 | ' PRI lookupDelay(freq) : delay | profile
24fec                 | _psram_spin2_lookupDelay
24fec                 | '     profile := @delayTable
24fec     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
24ff0     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
24ff4                 | '     delay := long[profile][0]
24ff4     00 03 02 FB | 	rdlong	_var02, _var01
24ff8                 | '     repeat while long[profile][1] 
24ff8     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
24ffc     97 16 48 FB | 	callpa	#(@LR__2981-@LR__2980)>>2,fcache_load_ptr_
25000                 | LR__2980
25000     04 00 06 F1 | 	add	_var01, #4
25004     00 FB 09 FB | 	rdlong	result1, _var01 wz
25008     04 00 86 F1 | 	sub	_var01, #4
2500c     1C 00 90 AD |  if_e	jmp	#LR__2982
25010                 | '         if freq +< long[profile][1] 
25010     04 00 06 F1 | 	add	_var01, #4
25014     00 FB 01 FB | 	rdlong	result1, _var01
25018     04 00 86 F1 | 	sub	_var01, #4
2501c     FD 12 12 F2 | 	cmp	arg01, result1 wc
25020                 | '             quit
25020                 | '         profile += 4
25020     04 00 06 31 |  if_ae	add	_var01, #4
25024                 | '         delay++
25024     01 02 06 31 |  if_ae	add	_var02, #1
25028     D4 FF 9F 3D |  if_ae	jmp	#LR__2980
2502c                 | LR__2981
2502c                 | LR__2982
2502c     01 FB 01 F6 | 	mov	result1, _var02
25030                 | _psram_spin2_lookupDelay_ret
25030     2D 00 64 FD | 	ret
25034                 | 
25034                 | ' 
25034                 | ' PUB start() : r
25034                 | _usbnew_spin2_start
25034     00 00 06 F6 | 	mov	_var01, #0
25038                 | '   ifnot driver_cog
25038     15 00 00 FF 
2503c     47 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10823
25040     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
25044     15 00 00 FF 
25048     47 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10823
2504c     38 00 90 5D |  if_ne	jmp	#LR__2990
25050                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
25050     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
25054     10 00 06 F6 | 	mov	_var01, #16
25058     00 16 06 F6 | 	mov	arg03, #0
2505c     28 16 62 FD | 	setq	arg03
25060     0A 01 F2 FC | 	coginit	_var01, arg02 wc
25064     01 00 66 C6 |  if_b	neg	_var01, #1
25068                 | '     if r >= 0
25068     00 00 56 F2 | 	cmps	_var01, #0 wc
2506c                 | '       driver_cog := r+1
2506c     00 03 02 36 |  if_ae	mov	_var02, _var01
25070     01 02 06 31 |  if_ae	add	_var02, #1
25074     15 00 00 3F 
25078     47 F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10823
2507c     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
25080     15 00 00 3F 
25084     47 F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10823
25088                 | LR__2990
25088     00 FB 01 F6 | 	mov	result1, _var01
2508c                 | _usbnew_spin2_start_ret
2508c     2D 00 64 FD | 	ret
25090                 | 
25090                 | '     '' (Always enabled)
25090                 | ' 
25090                 | ' '' Get current pressed state of a keyboard key
25090                 | ' PUB keystate(key) : r | buf[2],tmp
25090                 | _usbnew_spin2_keystate
25090     00 04 06 F6 | 	mov	_var03, #0
25094                 | '   if key >= $E0 && key < $E8
25094     E0 12 56 F2 | 	cmps	arg01, #224 wc
25098     34 00 90 CD |  if_b	jmp	#LR__3000
2509c     E8 12 56 F2 | 	cmps	arg01, #232 wc
250a0     2C 00 90 3D |  if_ae	jmp	#LR__3000
250a4                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
250a4     00 FA 05 F6 | 	mov	result1, #0
250a8     13 00 00 FF 
250ac     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
250b0     09 07 02 F6 | 	mov	_var04, arg01
250b4     E0 06 86 F1 | 	sub	_var04, #224
250b8     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
250bc     03 09 4A F0 | 	shr	_var05, _var04 wz
250c0     13 00 00 FF 
250c4     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
250c8     01 FA 65 56 |  if_ne	neg	result1, #1
250cc     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
250d0                 | LR__3000
250d0                 | '   else
250d0                 | '     '' Do this in inline ASM to ensure atomicity
250d0                 | '     tmp := @hkbd_report
250d0     13 00 00 FF 
250d4     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
250d8     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
250dc                 | '     org
250dc     13 00 00 FF 
250e0     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
250e4     97 1E 48 FB | 	callpa	#(@LR__3002-@LR__3001)>>2,fcache_load_ptr_
250e8                 | LR__3001
250e8 000             | 	org	0
250e8 000 28 02 64 FD | 	setq	#1
250ec 001 04 01 02 FB | 	rdlong	_var01, _var05
250f0 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
250f4 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
250f8 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
250fc 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
25100 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
25104 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
25108 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
2510c 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
25110 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
25114 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
25118 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
2511c 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
25120 00e 01 04 66 A6 |  if_e	neg	_var03, #1
25124 00f             | LR__3002
25124                 | 	orgh
25124     02 FB 01 F6 | 	mov	result1, _var03
25128                 | _usbnew_spin2_keystate_ret
25128     2D 00 64 FD | 	ret
2512c                 | 
2512c                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
2512c                 | ' 
2512c                 | ' '' Return key event from buffer if there is one
2512c                 | ' PUB get_key() : r | tail
2512c                 | _usbnew_spin2_get_key
2512c                 | '   tail := keyq_tail
2512c     0F 00 00 FF 
25130     C5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7877
25134     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
25138                 | '   if keyq_head == tail
25138     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
2513c     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
25140     0F 00 00 FF 
25144     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
25148     00 03 0A F2 | 	cmp	_var02, _var01 wz
2514c                 | '     return 0 ' No event
2514c     00 FA 05 A6 |  if_e	mov	result1, #0
25150     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
25154                 | '   r := keyq_data[tail]
25154     00 03 02 F6 | 	mov	_var02, _var01
25158     02 02 66 F0 | 	shl	_var02, #2
2515c     0F 00 00 FF 
25160     C6 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7878
25164     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
25168     01 FB 01 FB | 	rdlong	result1, _var02
2516c                 | '   if ++tail == KEYQUEUE_SIZE
2516c     01 00 06 F1 | 	add	_var01, #1
25170     80 00 0E F2 | 	cmp	_var01, #128 wz
25174                 | '     tail := 0
25174     00 00 06 A6 |  if_e	mov	_var01, #0
25178                 | '   keyq_tail := tail
25178     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
2517c     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
25180     0F 00 00 FF 
25184     C5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7877
25188                 | _usbnew_spin2_get_key_ret
25188     2D 00 64 FD | 	ret
2518c                 | 
2518c                 | ' 
2518c                 | ' '' Emulate mouse movement
2518c                 | ' PUB mouse_move(x,y)
2518c                 | _usbnew_spin2_mouse_move
2518c     02 4A 05 F6 | 	mov	COUNT_, #2
25190     A8 00 A0 FD | 	call	#pushregs_
25194     09 27 02 F6 | 	mov	local01, arg01
25198     0A 29 02 F6 | 	mov	local02, arg02
2519c                 | '   mouse_lock := 1
2519c     14 00 00 FF 
251a0     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
251a4     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
251a8     14 00 00 FF 
251ac     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
251b0                 | '   waitus(2) ' hope driver is now done
251b0     02 12 06 F6 | 	mov	arg01, #2
251b4     30 0B B0 FD | 	call	#__system___waitus
251b8                 | '   mouse_xacc := x
251b8     14 00 00 FF 
251bc     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
251c0     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
251c4                 | '   mouse_yacc := y
251c4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
251c8     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
251cc                 | '   if mouse_outptr
251cc     04 00 00 FF 
251d0     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
251d4     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
251d8     0F 00 00 FF 
251dc     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
251e0     24 00 90 AD |  if_e	jmp	#LR__3010
251e4                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
251e4     10 28 66 F0 | 	shl	local02, #16
251e8     13 27 32 F9 | 	getword	local01, local01, #0
251ec     13 29 42 F5 | 	or	local02, local01
251f0     0F 00 00 FF 
251f4     C0 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7872
251f8     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
251fc     0F 00 00 FF 
25200     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
25204     13 29 62 FC | 	wrlong	local02, local01
25208                 | LR__3010
25208                 | '   mouse_lock := 0
25208     14 00 00 FF 
2520c     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
25210     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
25214     14 00 00 FF 
25218     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
2521c     A7 F0 03 F6 | 	mov	ptra, fp
25220     B2 00 A0 FD | 	call	#popregs_
25224                 | _usbnew_spin2_mouse_move_ret
25224     2D 00 64 FD | 	ret
25228                 | 
25228                 | '     '' Set HAVE_HIDPAD to enable.
25228                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
25228                 | ' 
25228                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
25228                 | ' PUB hidpad_id(dev) : r
25228                 | _usbnew_spin2_hidpad_id
25228                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
25228     13 00 00 FF 
2522c     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
25230     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
25234     09 01 02 F6 | 	mov	_var01, arg01
25238     03 00 66 F0 | 	shl	_var01, #3
2523c     09 01 82 F1 | 	sub	_var01, arg01
25240     02 00 66 F0 | 	shl	_var01, #2
25244     00 FB 01 F1 | 	add	result1, _var01
25248     FD FA 01 FB | 	rdlong	result1, result1
2524c     13 00 00 FF 
25250     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
25254                 | _usbnew_spin2_hidpad_id_ret
25254     2D 00 64 FD | 	ret
25258                 | 
25258                 | ' 
25258                 | ' '' Get all button states for a device
25258                 | ' PUB hidpad_buttons(dev) : r 
25258                 | _usbnew_spin2_hidpad_buttons
25258                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
25258     13 00 00 FF 
2525c     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
25260     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
25264     09 01 02 F6 | 	mov	_var01, arg01
25268     03 00 66 F0 | 	shl	_var01, #3
2526c     09 01 82 F1 | 	sub	_var01, arg01
25270     02 00 66 F0 | 	shl	_var01, #2
25274     00 FB 01 F1 | 	add	result1, _var01
25278     14 FA 05 F1 | 	add	result1, #20
2527c     FD FA 01 FB | 	rdlong	result1, result1
25280     13 00 00 FF 
25284     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
25288                 | _usbnew_spin2_hidpad_buttons_ret
25288     2D 00 64 FD | 	ret
2528c                 | 
2528c                 | ' 
2528c                 | ' '' Get state of an axis (normalized between -32768 and 32767)
2528c                 | ' PUB hidpad_axis(dev,axnum) : r
2528c                 | _usbnew_spin2_hidpad_axis
2528c                 | '   if axnum +>= 6
2528c     06 14 16 F2 | 	cmp	arg02, #6 wc
25290                 | '     return 0
25290     00 FA 05 36 |  if_ae	mov	result1, #0
25294     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
25298                 | '   else 
25298                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
25298     13 00 00 FF 
2529c     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
252a0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
252a4     09 01 02 F6 | 	mov	_var01, arg01
252a8     03 00 66 F0 | 	shl	_var01, #3
252ac     09 01 82 F1 | 	sub	_var01, arg01
252b0     02 00 66 F0 | 	shl	_var01, #2
252b4     00 FB 01 F1 | 	add	result1, _var01
252b8     04 00 06 F6 | 	mov	_var01, #4
252bc     0A 01 02 F1 | 	add	_var01, arg02
252c0     01 00 66 F0 | 	shl	_var01, #1
252c4     FD 00 02 F1 | 	add	_var01, result1
252c8     00 FB E1 FA | 	rdword	result1, _var01
252cc     0F FA 65 F7 | 	signx	result1, #15
252d0     13 00 00 FF 
252d4     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
252d8                 | _usbnew_spin2_hidpad_axis_ret
252d8     2D 00 64 FD | 	ret
252dc                 | 
252dc                 | ' 
252dc                 | ' '' Get state of a hat
252dc                 | ' PUB hidpad_hat(dev,hatnum) : r
252dc                 | _usbnew_spin2_hidpad_hat
252dc                 | '   if hatnum +>= 4
252dc     04 14 16 F2 | 	cmp	arg02, #4 wc
252e0                 | '     return 0
252e0     00 FA 05 36 |  if_ae	mov	result1, #0
252e4     38 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
252e8                 | '   else 
252e8                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6*4+hatnum]
252e8     13 00 00 FF 
252ec     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
252f0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
252f4     09 01 02 F6 | 	mov	_var01, arg01
252f8     03 00 66 F0 | 	shl	_var01, #3
252fc     09 01 82 F1 | 	sub	_var01, arg01
25300     02 00 66 F0 | 	shl	_var01, #2
25304     00 FB 01 F1 | 	add	result1, _var01
25308     18 00 06 F6 | 	mov	_var01, #24
2530c     0A 01 02 F1 | 	add	_var01, arg02
25310     FD 00 02 F1 | 	add	_var01, result1
25314     00 FB C1 FA | 	rdbyte	result1, _var01
25318     13 00 00 FF 
2531c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
25320                 | _usbnew_spin2_hidpad_hat_ret
25320     2D 00 64 FD | 	ret
25324                 | 
25324                 | ' 
25324                 | ' 
25324                 | ' '--------------------------------------------------------------
25324                 | ' '---------- Init the variables, start the cog. ----------------
25324                 | ' '--------------------------------------------------------------
25324                 | ' 
25324                 | ' pub start(mbox,scope,cache) :cog,base | iii
25324                 | _audio096_spin2_start
25324     04 4A 05 F6 | 	mov	COUNT_, #4
25328     A8 00 A0 FD | 	call	#pushregs_
2532c     09 27 02 F6 | 	mov	local01, arg01
25330                 | ' 
25330                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
25330                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
25330                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
25330                 | ' 
25330                 | ' mailboxaddr:=mbox 
25330     F2 26 62 FC | 	wrlong	local01, objptr
25334                 | ' scope_ptr:=scope
25334     04 E4 05 F1 | 	add	objptr, #4
25338     F2 14 62 FC | 	wrlong	arg02, objptr
2533c                 | ' cache_ptr:=cache
2533c     04 E4 05 F1 | 	add	objptr, #4
25340     F2 16 62 FC | 	wrlong	arg03, objptr
25344                 | ' base:=@channel1[0]
25344     04 E4 05 F1 | 	add	objptr, #4
25348     F2 28 02 F6 | 	mov	local02, objptr
2534c                 | ' long[$40]:=mbox
2534c     40 26 66 FC | 	wrlong	local01, #64
25350                 | ' repeat iii from 0 to 7
25350     00 2A 06 F6 | 	mov	local03, #0
25354     02 00 00 FF 
25358     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
2535c     0C E4 85 F1 | 	sub	objptr, #12
25360     97 BC 48 FB | 	callpa	#(@LR__3021-@LR__3020)>>2,fcache_load_ptr_
25364                 | LR__3020
25364                 | '   long[base+64*iii]:=0
25364     14 27 02 F6 | 	mov	local01, local02
25368     15 FD 01 F6 | 	mov	result2, local03
2536c     06 FC 65 F0 | 	shl	result2, #6
25370     FE 26 02 F1 | 	add	local01, result2
25374     13 01 68 FC | 	wrlong	#0, local01
25378                 | '   long[base+64*iii+4]:=0
25378     14 27 02 F6 | 	mov	local01, local02
2537c     15 FD 01 F6 | 	mov	result2, local03
25380     06 FC 65 F0 | 	shl	result2, #6
25384     FE 26 02 F1 | 	add	local01, result2
25388     04 26 06 F1 | 	add	local01, #4
2538c     13 01 68 FC | 	wrlong	#0, local01
25390                 | '   long[base+64*iii+12]:=0
25390     14 2D 02 F6 | 	mov	local04, local02
25394     15 27 02 F6 | 	mov	local01, local03
25398     06 26 66 F0 | 	shl	local01, #6
2539c     13 2D 02 F1 | 	add	local04, local01
253a0     0C 2C 06 F1 | 	add	local04, #12
253a4     16 01 68 FC | 	wrlong	#0, local04
253a8                 | '   long[base+64*iii+16]:=2 
253a8     14 2D 02 F6 | 	mov	local04, local02
253ac     15 27 02 F6 | 	mov	local01, local03
253b0     06 26 66 F0 | 	shl	local01, #6
253b4     13 2D 02 F1 | 	add	local04, local01
253b8     10 2C 06 F1 | 	add	local04, #16
253bc     16 05 68 FC | 	wrlong	#2, local04
253c0                 | '   word[base+64*iii+20]:=0
253c0     14 2D 02 F6 | 	mov	local04, local02
253c4     15 27 02 F6 | 	mov	local01, local03
253c8     06 26 66 F0 | 	shl	local01, #6
253cc     13 2D 02 F1 | 	add	local04, local01
253d0     14 2C 06 F1 | 	add	local04, #20
253d4     16 01 58 FC | 	wrword	#0, local04
253d8                 | '   word[base+64*iii+22]:=8192
253d8     14 2D 02 F6 | 	mov	local04, local02
253dc     15 27 02 F6 | 	mov	local01, local03
253e0     06 26 66 F0 | 	shl	local01, #6
253e4     13 2D 02 F1 | 	add	local04, local01
253e8     16 2C 06 F1 | 	add	local04, #22
253ec     10 00 80 FF 
253f0     16 01 58 FC | 	wrword	##8192, local04
253f4                 | '   word[base+64*iii+24]:=4000+2*iii
253f4     15 2D 02 F6 | 	mov	local04, local03
253f8     01 2C 66 F0 | 	shl	local04, #1
253fc     07 00 00 FF 
25400     A0 27 06 F6 | 	mov	local01, ##4000
25404     16 27 02 F1 | 	add	local01, local04
25408     14 2D 02 F6 | 	mov	local04, local02
2540c     15 FD 01 F6 | 	mov	result2, local03
25410     06 FC 65 F0 | 	shl	result2, #6
25414     FE 2C 02 F1 | 	add	local04, result2
25418     18 2C 06 F1 | 	add	local04, #24
2541c     16 27 52 FC | 	wrword	local01, local04
25420                 | '   word[base+64*iii+26]:=2
25420     14 2D 02 F6 | 	mov	local04, local02
25424     15 27 02 F6 | 	mov	local01, local03
25428     06 26 66 F0 | 	shl	local01, #6
2542c     13 2D 02 F1 | 	add	local04, local01
25430     1A 2C 06 F1 | 	add	local04, #26
25434     16 05 58 FC | 	wrword	#2, local04
25438                 | '   long [base+64*iii+8]:=@null | $C0000000
25438     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
2543c     3E 26 26 F4 | 	bith	local01, #62
25440     14 2D 02 F6 | 	mov	local04, local02
25444     15 17 02 F6 | 	mov	arg03, local03
25448     06 16 66 F0 | 	shl	arg03, #6
2544c     0B 2D 02 F1 | 	add	local04, arg03
25450     08 2C 06 F1 | 	add	local04, #8
25454     16 27 62 FC | 	wrlong	local01, local04
25458                 | '   long[base+64*iii+32]:=0
25458     14 2D 02 F6 | 	mov	local04, local02
2545c     15 27 02 F6 | 	mov	local01, local03
25460     06 26 66 F0 | 	shl	local01, #6
25464     13 2D 02 F1 | 	add	local04, local01
25468     20 2C 06 F1 | 	add	local04, #32
2546c     16 01 68 FC | 	wrlong	#0, local04
25470                 | '   long[base+64*iii+36]:=0
25470     14 2D 02 F6 | 	mov	local04, local02
25474     15 27 02 F6 | 	mov	local01, local03
25478     06 26 66 F0 | 	shl	local01, #6
2547c     13 2D 02 F1 | 	add	local04, local01
25480     24 2C 06 F1 | 	add	local04, #36
25484     16 01 68 FC | 	wrlong	#0, local04
25488                 | '   long[base+64*iii+40]:=0
25488     14 2D 02 F6 | 	mov	local04, local02
2548c     15 27 02 F6 | 	mov	local01, local03
25490     06 26 66 F0 | 	shl	local01, #6
25494     13 2D 02 F1 | 	add	local04, local01
25498     28 2C 06 F1 | 	add	local04, #40
2549c     16 01 68 FC | 	wrlong	#0, local04
254a0                 | '   long[base+64*iii+44]:=0
254a0     14 2D 02 F6 | 	mov	local04, local02
254a4     15 27 02 F6 | 	mov	local01, local03
254a8     06 26 66 F0 | 	shl	local01, #6
254ac     13 2D 02 F1 | 	add	local04, local01
254b0     2C 2C 06 F1 | 	add	local04, #44
254b4     16 01 68 FC | 	wrlong	#0, local04
254b8                 | '   long[base+64*iii+28]:=0
254b8     14 2D 02 F6 | 	mov	local04, local02
254bc     15 27 02 F6 | 	mov	local01, local03
254c0     06 26 66 F0 | 	shl	local01, #6
254c4     13 2D 02 F1 | 	add	local04, local01
254c8     1C 2C 06 F1 | 	add	local04, #28
254cc     16 01 68 FC | 	wrlong	#0, local04
254d0     01 2A 06 F1 | 	add	local03, #1
254d4     08 2A 56 F2 | 	cmps	local03, #8 wc
254d8     88 FE 9F CD |  if_b	jmp	#LR__3020
254dc                 | LR__3021
254dc     02 00 00 FF 
254e0     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
254e4                 | '   
254e4                 | ' cog:=coginit(16,@audio,@mailboxaddr)
254e4     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
254e8     F2 16 02 F6 | 	mov	arg03, objptr
254ec     10 2C 06 F6 | 	mov	local04, #16
254f0     28 16 62 FD | 	setq	arg03
254f4     0A 2D F2 FC | 	coginit	local04, arg02 wc
254f8     01 2C 66 C6 |  if_b	neg	local04, #1
254fc                 | ' waitms(100)
254fc     64 12 06 F6 | 	mov	arg01, #100
25500     78 07 B0 FD | 	call	#__system___waitms
25504                 | ' return cog,base
25504     14 FD 01 F6 | 	mov	result2, local02
25508     16 FB 01 F6 | 	mov	result1, local04
2550c     A7 F0 03 F6 | 	mov	ptra, fp
25510     B2 00 A0 FD | 	call	#popregs_
25514                 | _audio096_spin2_start_ret
25514     2D 00 64 FD | 	ret
25518                 | 
25518                 | ' 
25518                 | ' ' a simple play procedure to not poke everything. 
25518                 | ' 
25518                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
25518                 | _audio096_spin2_play
25518     0C E4 05 F1 | 	add	objptr, #12
2551c     F2 00 02 F6 | 	mov	_var01, objptr
25520     06 12 66 F0 | 	shl	arg01, #6
25524     09 01 02 F1 | 	add	_var01, arg01
25528     00 13 02 F6 | 	mov	arg01, _var01
2552c     0C 12 06 F1 | 	add	arg01, #12
25530     09 1B 62 FC | 	wrlong	arg05, arg01
25534     00 1C 56 F2 | 	cmps	arg06, #0 wc
25538     00 13 02 36 |  if_ae	mov	arg01, _var01
2553c     10 12 06 31 |  if_ae	add	arg01, #16
25540     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
25544     02 1A 06 C1 |  if_b	add	arg05, #2
25548     00 13 02 C6 |  if_b	mov	arg01, _var01
2554c     10 12 06 C1 |  if_b	add	arg01, #16
25550     09 1B 62 CC |  if_b	wrlong	arg05, arg01
25554     0B 13 52 F6 | 	abs	arg01, arg03 wc
25558     0F 1B 80 FF 
2555c     09 1F 1A FD | 	qdiv	##3546895, arg01
25560                 | ' 
25560                 | ' base2:=@channel1[0]+64*channel
25560                 | ' 
25560                 | ' 
25560                 | ' long[base2+12]:= len
25560                 | ' if loop >=0 
25560                 | '   long[base2+16]:= loop
25560     0C E4 85 F1 | 	sub	objptr, #12
25564                 | ' else
25564                 | '   long[base2+16]:= len+2
25564                 | ' word[base2+20]:=vol
25564     00 13 02 F6 | 	mov	arg01, _var01
25568     14 12 06 F1 | 	add	arg01, #20
2556c     09 19 52 FC | 	wrword	arg04, arg01
25570                 | ' word[base2+24]:= 3546895/splfreq 
25570     00 19 02 F6 | 	mov	arg04, _var01
25574     18 18 06 F1 | 	add	arg04, #24
25578                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
25578                 | ' long[base2+28]:=$40000000    
25578                 | ' long[base2+32]:=0    
25578                 | ' long[base2+36]:=0    
25578                 | ' long[base2+40]:=0    
25578                 | ' long[base2+44]:=0    
25578                 | ' long[base2+8]:=sample+$C0000000     
25578     00 00 60 FF 
2557c     00 14 06 F1 | 	add	arg02, ##-1073741824
25580     18 12 62 FD | 	getqx	arg01
25584     09 13 82 F6 | 	negc	arg01, arg01
25588     0C 13 52 FC | 	wrword	arg01, arg04
2558c     00 13 02 F6 | 	mov	arg01, _var01
25590     1A 12 06 F1 | 	add	arg01, #26
25594     09 01 5A FC | 	wrword	#256, arg01
25598     00 13 02 F6 | 	mov	arg01, _var01
2559c     1C 12 06 F1 | 	add	arg01, #28
255a0     00 00 A0 FF 
255a4     09 01 68 FC | 	wrlong	##1073741824, arg01
255a8     00 13 02 F6 | 	mov	arg01, _var01
255ac     20 12 06 F1 | 	add	arg01, #32
255b0     09 01 68 FC | 	wrlong	#0, arg01
255b4     00 13 02 F6 | 	mov	arg01, _var01
255b8     24 12 06 F1 | 	add	arg01, #36
255bc     09 01 68 FC | 	wrlong	#0, arg01
255c0     00 13 02 F6 | 	mov	arg01, _var01
255c4     28 12 06 F1 | 	add	arg01, #40
255c8     09 01 68 FC | 	wrlong	#0, arg01
255cc     00 13 02 F6 | 	mov	arg01, _var01
255d0     2C 12 06 F1 | 	add	arg01, #44
255d4     09 01 68 FC | 	wrlong	#0, arg01
255d8     08 00 06 F1 | 	add	_var01, #8
255dc     00 15 62 FC | 	wrlong	arg02, _var01
255e0                 | _audio096_spin2_play_ret
255e0     2D 00 64 FD | 	ret
255e4                 | 
255e4                 | ' 
255e4                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
255e4                 | _audio096_spin2_play8
255e4                 | ' 
255e4                 | ' base2:=@channel1[0]+64*channel
255e4     0C E4 05 F1 | 	add	objptr, #12
255e8     F2 00 02 F6 | 	mov	_var01, objptr
255ec     06 12 66 F0 | 	shl	arg01, #6
255f0     09 01 02 F1 | 	add	_var01, arg01
255f4                 | ' long[base2]:=0
255f4     00 01 68 FC | 	wrlong	#0, _var01
255f8                 | ' long[base2+8]:=sample+$40000000 
255f8     00 00 20 FF 
255fc     00 14 06 F1 | 	add	arg02, ##1073741824
25600     00 13 02 F6 | 	mov	arg01, _var01
25604     08 12 06 F1 | 	add	arg01, #8
25608     09 15 62 FC | 	wrlong	arg02, arg01
2560c                 | ' if loop>=0
2560c     00 1C 56 F2 | 	cmps	arg06, #0 wc
25610     0C E4 85 F1 | 	sub	objptr, #12
25614     1C 00 90 CD |  if_b	jmp	#LR__3030
25618                 | '   long[base2+12]:=loop
25618     00 15 02 F6 | 	mov	arg02, _var01
2561c     0C 14 06 F1 | 	add	arg02, #12
25620     0A 1D 62 FC | 	wrlong	arg06, arg02
25624                 | '   long[base2+16]:= len
25624     00 1D 02 F6 | 	mov	arg06, _var01
25628     10 1C 06 F1 | 	add	arg06, #16
2562c     0E 1B 62 FC | 	wrlong	arg05, arg06
25630     1C 00 90 FD | 	jmp	#LR__3031
25634                 | LR__3030
25634                 | ' else
25634                 | '   long[base2+12]:= len
25634     00 1D 02 F6 | 	mov	arg06, _var01
25638     0C 1C 06 F1 | 	add	arg06, #12
2563c     0E 1B 62 FC | 	wrlong	arg05, arg06
25640                 | '   long[base2+16]:= len+1
25640     01 1A 06 F1 | 	add	arg05, #1
25644     00 13 02 F6 | 	mov	arg01, _var01
25648     10 12 06 F1 | 	add	arg01, #16
2564c     09 1B 62 FC | 	wrlong	arg05, arg01
25650                 | LR__3031
25650     0B 17 52 F6 | 	abs	arg03, arg03 wc
25654     0F 1B 80 FF 
25658     0B 1F 1A FD | 	qdiv	##3546895, arg03
2565c                 | ' word[base2+20]:=vol
2565c     00 17 02 F6 | 	mov	arg03, _var01
25660     14 16 06 F1 | 	add	arg03, #20
25664     0B 19 52 FC | 	wrword	arg04, arg03
25668                 | ' word[base2+24]:= 3546895 /splfreq 
25668     00 13 02 F6 | 	mov	arg01, _var01
2566c     18 12 06 F1 | 	add	arg01, #24
25670                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
25670     1A 00 06 F1 | 	add	_var01, #26
25674     18 18 62 FD | 	getqx	arg04
25678     0C 19 82 F6 | 	negc	arg04, arg04
2567c     09 19 52 FC | 	wrword	arg04, arg01
25680     00 01 5A FC | 	wrword	#256, _var01
25684                 | _audio096_spin2_play8_ret
25684     2D 00 64 FD | 	ret
25688                 | 
25688                 | ' 'long[base2+28]:=$40000000
25688                 | ' 
25688                 | '     
25688                 | ' pub stop(channel) 'silence it
25688                 | _audio096_spin2_stop
25688                 | ' 
25688                 | ' word[@channel1[0]+64*channel+20]:=0
25688     0C E4 05 F1 | 	add	objptr, #12
2568c     F2 00 02 F6 | 	mov	_var01, objptr
25690     09 03 02 F6 | 	mov	_var02, arg01
25694     06 02 66 F0 | 	shl	_var02, #6
25698     01 01 02 F1 | 	add	_var01, _var02
2569c     14 00 06 F1 | 	add	_var01, #20
256a0     00 01 58 FC | 	wrword	#0, _var01
256a4                 | ' word[@channel1[0]+64*channel+20]:=0
256a4     F2 00 02 F6 | 	mov	_var01, objptr
256a8     06 12 66 F0 | 	shl	arg01, #6
256ac     09 01 02 F1 | 	add	_var01, arg01
256b0     14 00 06 F1 | 	add	_var01, #20
256b4     00 01 58 FC | 	wrword	#0, _var01
256b8     0C E4 85 F1 | 	sub	objptr, #12
256bc                 | _audio096_spin2_stop_ret
256bc     2D 00 64 FD | 	ret
256c0                 | hubexit
256c0     81 00 80 FD | 	jmp	#cogexit
256c4                 | 
256c4                 | __system___setbaud
256c4     14 88 06 FB | 	rdlong	muldiva_, #20
256c8     09 8B 02 F6 | 	mov	muldivb_, arg01
256cc     BA 00 A0 FD | 	call	#divide_
256d0     97 06 48 FB | 	callpa	#(@LR__3041-@LR__3040)>>2,fcache_load_ptr_
256d4                 | LR__3040
256d4     3E FA 9D FA | 	rdpin	result1, #62 wc
256d8     FE FC A1 F1 | 	subx	result2, result2
256dc     F4 FF 9F CD |  if_b	jmp	#LR__3040
256e0                 | LR__3041
256e0     40 7C 64 FD | 	dirl	#62
256e4     40 7E 64 FD | 	dirl	#63
256e8     F3 8A 62 FC | 	wrlong	muldivb_, ptr___system__dat__
256ec     10 8A 66 F0 | 	shl	muldivb_, #16
256f0     07 14 06 F6 | 	mov	arg02, #7
256f4     45 15 02 F1 | 	add	arg02, muldivb_
256f8     3E F8 0C FC | 	wrpin	#124, #62
256fc     3E 14 16 FC | 	wxpin	arg02, #62
25700     3F 7C 0C FC | 	wrpin	#62, #63
25704     14 14 06 F1 | 	add	arg02, #20
25708     3F 14 16 FC | 	wxpin	arg02, #63
2570c     41 7C 64 FD | 	dirh	#62
25710     41 7E 64 FD | 	dirh	#63
25714                 | __system___setbaud_ret
25714     2D 00 64 FD | 	ret
25718                 | 
25718                 | __system___txraw
25718     01 4A 05 F6 | 	mov	COUNT_, #1
2571c     A8 00 A0 FD | 	call	#pushregs_
25720     09 27 02 F6 | 	mov	local01, arg01
25724     97 06 48 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
25728                 | LR__3050
25728     3E FA 9D FA | 	rdpin	result1, #62 wc
2572c     FE FC A1 F1 | 	subx	result2, result2
25730     F4 FF 9F CD |  if_b	jmp	#LR__3050
25734                 | LR__3051
25734     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
25738     C2 01 00 AF 
2573c     00 12 06 A6 |  if_e	mov	arg01, ##230400
25740     80 FF BF AD |  if_e	call	#__system___setbaud
25744     58 7C 64 FD | 	drvl	#62
25748     3E 26 26 FC | 	wypin	local01, #62
2574c     01 FA 05 F6 | 	mov	result1, #1
25750     A7 F0 03 F6 | 	mov	ptra, fp
25754     B2 00 A0 FD | 	call	#popregs_
25758                 | __system___txraw_ret
25758     2D 00 64 FD | 	ret
2575c                 | 
2575c                 | __system___rxraw
2575c     0D 4A 05 F6 | 	mov	COUNT_, #13
25760     A8 00 A0 FD | 	call	#pushregs_
25764     09 27 02 F6 | 	mov	local01, arg01
25768     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2576c     C2 01 00 AF 
25770     00 12 06 A6 |  if_e	mov	arg01, ##230400
25774     4C FF BF AD |  if_e	call	#__system___setbaud
25778     00 26 0E F2 | 	cmp	local01, #0 wz
2577c     20 00 90 AD |  if_e	jmp	#LR__3060
25780     14 2A 06 FB | 	rdlong	local03, #20
25784     0A 2A 46 F0 | 	shr	local03, #10
25788     15 27 02 FD | 	qmul	local01, local03
2578c     1A FA 61 FD | 	getct	result1
25790     18 2C 62 FD | 	getqx	local04
25794     16 FB 01 F1 | 	add	result1, local04
25798     FD 2E 02 F6 | 	mov	local05, result1
2579c     04 00 90 FD | 	jmp	#LR__3061
257a0                 | LR__3060
257a0     00 2E 06 F6 | 	mov	local05, #0
257a4                 | LR__3061
257a4     01 30 66 F6 | 	neg	local06, #1
257a8     3F 32 06 F6 | 	mov	local07, #63
257ac     00 34 06 F6 | 	mov	local08, #0
257b0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
257b4     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
257b8     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
257bc                 | LR__3062
257bc     08 36 16 F4 | 	testb	local09, #8 wc
257c0     09 36 76 F4 | 	testbn	local09, #9 andc
257c4     0A 36 46 F0 | 	shr	local09, #10
257c8     01 34 06 C6 |  if_b	mov	local08, #1
257cc     40 7E 6C 3D |  if_ae	testp	#63 wz
257d0     01 34 06 26 |  if_nc_and_z	mov	local08, #1
257d4     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
257d8     04 36 46 20 |  if_nc_and_z	shr	local09, #4
257dc                 | LR__3063
257dc     00 28 06 F6 | 	mov	local02, #0
257e0     00 34 0E F2 | 	cmp	local08, #0 wz
257e4     01 28 66 56 |  if_ne	neg	local02, #1
257e8     00 38 06 F6 | 	mov	local10, #0
257ec     00 2A 06 F6 | 	mov	local03, #0
257f0     00 26 0E F2 | 	cmp	local01, #0 wz
257f4     01 2A 66 56 |  if_ne	neg	local03, #1
257f8     00 2C 06 F6 | 	mov	local04, #0
257fc     00 3A 06 F6 | 	mov	local11, #0
25800     17 3D 02 F6 | 	mov	local12, local05
25804     1A FA 61 FD | 	getct	result1
25808     FD 3E 02 F6 | 	mov	local13, result1
2580c     1F 3D 82 F1 | 	sub	local12, local13
25810     00 3C 56 F2 | 	cmps	local12, #0 wc
25814     00 3A 26 C6 |  if_b	not	local11, #0
25818     00 3A 0E F2 | 	cmp	local11, #0 wz
2581c     00 2C 26 56 |  if_ne	not	local04, #0
25820     16 2B CA F7 | 	test	local03, local04 wz
25824     00 38 26 56 |  if_ne	not	local10, #0
25828     1C 29 4A F5 | 	or	local02, local10 wz
2582c     8C FF 9F AD |  if_e	jmp	#LR__3062
25830     00 34 0E F2 | 	cmp	local08, #0 wz
25834     1B 31 02 56 |  if_ne	mov	local06, local09
25838     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
2583c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
25840     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
25844     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
25848     18 FB 01 F6 | 	mov	result1, local06
2584c     A7 F0 03 F6 | 	mov	ptra, fp
25850     B2 00 A0 FD | 	call	#popregs_
25854                 | __system___rxraw_ret
25854     2D 00 64 FD | 	ret
25858                 | 
25858                 | __system___getus
25858     1A FC 71 FD | 	getct	result2 wc
2585c     1A 00 62 FD | 	getct	_var01
25860     10 E6 05 F1 | 	add	ptr___system__dat__, #16
25864     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
25868     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
2586c     20 00 90 5D |  if_ne	jmp	#LR__3070
25870     14 02 06 FB | 	rdlong	_var02, #20
25874     A1 07 00 FF 
25878     40 02 16 FD | 	qdiv	_var02, ##1000000
2587c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
25880     18 FA 61 FD | 	getqx	result1
25884     FD 02 02 F6 | 	mov	_var02, result1
25888     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2588c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
25890                 | LR__3070
25890     01 FD 11 FD | 	qdiv	result2, _var02
25894     19 FC 61 FD | 	getqy	result2
25898     28 FC 61 FD | 	setq	result2
2589c     01 01 12 FD | 	qdiv	_var01, _var02
258a0     18 FA 61 FD | 	getqx	result1
258a4                 | __system___getus_ret
258a4     2D 00 64 FD | 	ret
258a8                 | 
258a8                 | __system____builtin_memmove
258a8     09 01 02 F6 | 	mov	_var01, arg01
258ac     0A 13 52 F2 | 	cmps	arg01, arg02 wc
258b0     10 00 90 CD |  if_b	jmp	#LR__3080
258b4     0A 03 02 F6 | 	mov	_var02, arg02
258b8     0B 03 02 F1 | 	add	_var02, arg03
258bc     01 13 52 F2 | 	cmps	arg01, _var02 wc
258c0     48 00 90 CD |  if_b	jmp	#LR__3086
258c4                 | LR__3080
258c4     0B 05 02 F6 | 	mov	_var03, arg03
258c8     02 04 4E F0 | 	shr	_var03, #2 wz
258cc     18 00 90 AD |  if_e	jmp	#LR__3085
258d0     97 0A 48 FB | 	callpa	#(@LR__3083-@LR__3081)>>2,fcache_load_ptr_
258d4                 | LR__3081
258d4     02 09 D8 FC | 	rep	@LR__3084, _var03
258d8                 | LR__3082
258d8     0A 05 02 FB | 	rdlong	_var03, arg02
258dc     09 05 62 FC | 	wrlong	_var03, arg01
258e0     04 12 06 F1 | 	add	arg01, #4
258e4     04 14 06 F1 | 	add	arg02, #4
258e8                 | LR__3083
258e8                 | LR__3084
258e8                 | LR__3085
258e8     02 16 CE F7 | 	test	arg03, #2 wz
258ec     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
258f0     09 03 52 5C |  if_ne	wrword	_var02, arg01
258f4     02 12 06 51 |  if_ne	add	arg01, #2
258f8     02 14 06 51 |  if_ne	add	arg02, #2
258fc     01 16 CE F7 | 	test	arg03, #1 wz
25900     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
25904     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
25908     28 00 90 FD | 	jmp	#LR__3092
2590c                 | LR__3086
2590c     0B 13 02 F1 | 	add	arg01, arg03
25910     0B 15 02 F1 | 	add	arg02, arg03
25914     0B 07 0A F6 | 	mov	_var04, arg03 wz
25918     18 00 90 AD |  if_e	jmp	#LR__3091
2591c     97 0A 48 FB | 	callpa	#(@LR__3089-@LR__3087)>>2,fcache_load_ptr_
25920                 | LR__3087
25920     03 09 D8 FC | 	rep	@LR__3090, _var04
25924                 | LR__3088
25924     01 12 86 F1 | 	sub	arg01, #1
25928     01 14 86 F1 | 	sub	arg02, #1
2592c     0A 03 C2 FA | 	rdbyte	_var02, arg02
25930     09 03 42 FC | 	wrbyte	_var02, arg01
25934                 | LR__3089
25934                 | LR__3090
25934                 | LR__3091
25934                 | LR__3092
25934     00 FB 01 F6 | 	mov	result1, _var01
25938                 | __system____builtin_memmove_ret
25938     2D 00 64 FD | 	ret
2593c                 | 
2593c                 | __system____builtin_strcpy
2593c     09 01 02 F6 | 	mov	_var01, arg01
25940     97 0A 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
25944                 | LR__3100
25944     0A FB C9 FA | 	rdbyte	result1, arg02 wz
25948     09 FB 41 FC | 	wrbyte	result1, arg01
2594c     01 14 06 F1 | 	add	arg02, #1
25950     01 12 06 F1 | 	add	arg01, #1
25954     EC FF 9F 5D |  if_ne	jmp	#LR__3100
25958                 | LR__3101
25958     00 FB 01 F6 | 	mov	result1, _var01
2595c                 | __system____builtin_strcpy_ret
2595c     2D 00 64 FD | 	ret
25960                 | 
25960                 | __system____topofstack
25960     00 4A 05 F6 | 	mov	COUNT_, #0
25964     A8 00 A0 FD | 	call	#pushregs_
25968     08 F0 07 F1 | 	add	ptra, #8
2596c     04 4E 05 F1 | 	add	fp, #4
25970     A7 12 62 FC | 	wrlong	arg01, fp
25974     A7 FA 01 F6 | 	mov	result1, fp
25978     04 4E 85 F1 | 	sub	fp, #4
2597c     A7 F0 03 F6 | 	mov	ptra, fp
25980     B2 00 A0 FD | 	call	#popregs_
25984                 | __system____topofstack_ret
25984     2D 00 64 FD | 	ret
25988                 | 
25988                 | __system___lockmem
25988     00 FA 05 F6 | 	mov	result1, #0
2598c     01 FA 61 FD | 	cogid	result1
25990     00 FB 05 F1 | 	add	result1, #256
25994                 | LR__3110
25994     09 01 0A FB | 	rdlong	_var01, arg01 wz
25998     09 FB 61 AC |  if_e	wrlong	result1, arg01
2599c     09 01 02 AB |  if_e	rdlong	_var01, arg01
259a0     09 01 02 AB |  if_e	rdlong	_var01, arg01
259a4     FD 00 0A F2 | 	cmp	_var01, result1 wz
259a8     E8 FF 9F 5D |  if_ne	jmp	#LR__3110
259ac                 | __system___lockmem_ret
259ac     2D 00 64 FD | 	ret
259b0                 | 
259b0                 | __system___string_cmp
259b0     97 14 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
259b4                 | LR__3120
259b4     09 01 C2 FA | 	rdbyte	_var01, arg01
259b8     0A 03 C2 FA | 	rdbyte	_var02, arg02
259bc     00 05 02 F6 | 	mov	_var03, _var01
259c0     01 05 8A F1 | 	sub	_var03, _var02 wz
259c4     01 12 06 F1 | 	add	arg01, #1
259c8     01 14 06 F1 | 	add	arg02, #1
259cc     0C 00 90 5D |  if_ne	jmp	#LR__3122
259d0     00 00 0E F2 | 	cmp	_var01, #0 wz
259d4     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
259d8     D8 FF 9F 5D |  if_ne	jmp	#LR__3120
259dc                 | LR__3121
259dc                 | LR__3122
259dc     02 FB 01 F6 | 	mov	result1, _var03
259e0                 | __system___string_cmp_ret
259e0     2D 00 64 FD | 	ret
259e4                 | 
259e4                 | __system___string_concat
259e4     05 4A 05 F6 | 	mov	COUNT_, #5
259e8     A8 00 A0 FD | 	call	#pushregs_
259ec     09 27 02 F6 | 	mov	local01, arg01
259f0     0A 29 02 F6 | 	mov	local02, arg02
259f4     13 13 02 F6 | 	mov	arg01, local01
259f8     09 2B 02 F6 | 	mov	local03, arg01
259fc     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
25a00                 | LR__3130
25a00     15 FB C9 FA | 	rdbyte	result1, local03 wz
25a04     01 2A 06 51 |  if_ne	add	local03, #1
25a08     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
25a0c                 | LR__3131
25a0c     09 2B 82 F1 | 	sub	local03, arg01
25a10     15 2D 02 F6 | 	mov	local04, local03
25a14     14 13 02 F6 | 	mov	arg01, local02
25a18     09 2B 02 F6 | 	mov	local03, arg01
25a1c     97 06 48 FB | 	callpa	#(@LR__3133-@LR__3132)>>2,fcache_load_ptr_
25a20                 | LR__3132
25a20     15 FB C9 FA | 	rdbyte	result1, local03 wz
25a24     01 2A 06 51 |  if_ne	add	local03, #1
25a28     F4 FF 9F 5D |  if_ne	jmp	#LR__3132
25a2c                 | LR__3133
25a2c     09 2B 82 F1 | 	sub	local03, arg01
25a30     16 13 02 F6 | 	mov	arg01, local04
25a34     15 13 02 F1 | 	add	arg01, local03
25a38     01 12 06 F1 | 	add	arg01, #1
25a3c     E8 40 B0 FD | 	call	#__system___gc_alloc_managed
25a40     FD 2E 0A F6 | 	mov	local05, result1 wz
25a44     28 00 90 AD |  if_e	jmp	#LR__3134
25a48     17 13 02 F6 | 	mov	arg01, local05
25a4c     13 15 02 F6 | 	mov	arg02, local01
25a50     16 17 02 F6 | 	mov	arg03, local04
25a54     50 FE BF FD | 	call	#__system____builtin_memmove
25a58     17 13 02 F6 | 	mov	arg01, local05
25a5c     16 13 02 F1 | 	add	arg01, local04
25a60     01 2A 06 F1 | 	add	local03, #1
25a64     14 15 02 F6 | 	mov	arg02, local02
25a68     15 17 02 F6 | 	mov	arg03, local03
25a6c     38 FE BF FD | 	call	#__system____builtin_memmove
25a70                 | LR__3134
25a70     17 FB 01 F6 | 	mov	result1, local05
25a74     A7 F0 03 F6 | 	mov	ptra, fp
25a78     B2 00 A0 FD | 	call	#popregs_
25a7c                 | __system___string_concat_ret
25a7c     2D 00 64 FD | 	ret
25a80                 | 
25a80                 | __system___tx
25a80     02 4A 05 F6 | 	mov	COUNT_, #2
25a84     A8 00 A0 FD | 	call	#pushregs_
25a88     09 27 02 F6 | 	mov	local01, arg01
25a8c     0A 26 0E F2 | 	cmp	local01, #10 wz
25a90     18 00 90 5D |  if_ne	jmp	#LR__3140
25a94     08 E6 05 F1 | 	add	ptr___system__dat__, #8
25a98     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
25a9c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
25aa0     02 28 CE F7 | 	test	local02, #2 wz
25aa4     0D 12 06 56 |  if_ne	mov	arg01, #13
25aa8     6C FC BF 5D |  if_ne	call	#__system___txraw
25aac                 | LR__3140
25aac     13 13 02 F6 | 	mov	arg01, local01
25ab0     64 FC BF FD | 	call	#__system___txraw
25ab4     A7 F0 03 F6 | 	mov	ptra, fp
25ab8     B2 00 A0 FD | 	call	#popregs_
25abc                 | __system___tx_ret
25abc     2D 00 64 FD | 	ret
25ac0                 | 
25ac0                 | __system___rx
25ac0     01 4A 05 F6 | 	mov	COUNT_, #1
25ac4     A8 00 A0 FD | 	call	#pushregs_
25ac8                 | LR__3150
25ac8     00 12 06 F6 | 	mov	arg01, #0
25acc     8C FC BF FD | 	call	#__system___rxraw
25ad0     FD 26 02 F6 | 	mov	local01, result1
25ad4     FF FF 7F FF 
25ad8     FF 27 0E F2 | 	cmp	local01, ##-1 wz
25adc     E8 FF 9F AD |  if_e	jmp	#LR__3150
25ae0     0D 26 0E F2 | 	cmp	local01, #13 wz
25ae4     14 00 90 5D |  if_ne	jmp	#LR__3151
25ae8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
25aec     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
25af0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
25af4     02 FA CD F7 | 	test	result1, #2 wz
25af8     0A 26 06 56 |  if_ne	mov	local01, #10
25afc                 | LR__3151
25afc     08 E6 05 F1 | 	add	ptr___system__dat__, #8
25b00     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
25b04     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
25b08     01 12 CE F7 | 	test	arg01, #1 wz
25b0c     1C 00 90 AD |  if_e	jmp	#LR__3154
25b10     7F 26 0E F2 | 	cmp	local01, #127 wz
25b14     0C 00 90 5D |  if_ne	jmp	#LR__3152
25b18     08 12 06 F6 | 	mov	arg01, #8
25b1c     60 FF BF FD | 	call	#__system___tx
25b20     08 00 90 FD | 	jmp	#LR__3153
25b24                 | LR__3152
25b24     13 13 02 F6 | 	mov	arg01, local01
25b28     54 FF BF FD | 	call	#__system___tx
25b2c                 | LR__3153
25b2c                 | LR__3154
25b2c     13 FB 01 F6 | 	mov	result1, local01
25b30     A7 F0 03 F6 | 	mov	ptra, fp
25b34     B2 00 A0 FD | 	call	#popregs_
25b38                 | __system___rx_ret
25b38     2D 00 64 FD | 	ret
25b3c                 | 
25b3c                 | __system___pinwrite
25b3c     09 01 02 F6 | 	mov	_var01, arg01
25b40     1F 00 06 F5 | 	and	_var01, #31
25b44     20 12 CE F7 | 	test	arg01, #32 wz
25b48     06 12 46 F0 | 	shr	arg01, #6
25b4c     09 13 CA F9 | 	bmask	arg01, arg01
25b50     00 13 62 F0 | 	shl	arg01, _var01
25b54     00 15 62 F0 | 	shl	arg02, _var01
25b58     1C 00 90 AD |  if_e	jmp	#LR__3160
25b5c     09 F7 43 F5 | 	or	dirb, arg01
25b60     FD 01 02 F6 | 	mov	_var01, outb
25b64     09 01 22 F5 | 	andn	_var01, arg01
25b68     09 15 02 F5 | 	and	arg02, arg01
25b6c     0A 01 42 F5 | 	or	_var01, arg02
25b70     00 FB 03 F6 | 	mov	outb, _var01
25b74     18 00 90 FD | 	jmp	#LR__3161
25b78                 | LR__3160
25b78     09 F5 43 F5 | 	or	dira, arg01
25b7c     FC 01 02 F6 | 	mov	_var01, outa
25b80     09 01 22 F5 | 	andn	_var01, arg01
25b84     09 15 02 F5 | 	and	arg02, arg01
25b88     0A 01 42 F5 | 	or	_var01, arg02
25b8c     00 F9 03 F6 | 	mov	outa, _var01
25b90                 | LR__3161
25b90                 | __system___pinwrite_ret
25b90     2D 00 64 FD | 	ret
25b94                 | 
25b94                 | __system___basic_read_line
25b94     06 4A 05 F6 | 	mov	COUNT_, #6
25b98     A8 00 A0 FD | 	call	#pushregs_
25b9c     09 27 02 F6 | 	mov	local01, arg01
25ba0     00 28 06 F6 | 	mov	local02, #0
25ba4     18 2A 06 F6 | 	mov	local03, #24
25ba8     00 2C 06 F6 | 	mov	local04, #0
25bac     18 12 06 F6 | 	mov	arg01, #24
25bb0     74 3F B0 FD | 	call	#__system___gc_alloc_managed
25bb4     FD 2E 0A F6 | 	mov	local05, result1 wz
25bb8     17 FB 01 A6 |  if_e	mov	result1, local05
25bbc     B0 00 90 AD |  if_e	jmp	#LR__3173
25bc0                 | LR__3170
25bc0     13 13 02 F6 | 	mov	arg01, local01
25bc4     78 0B B0 FD | 	call	#__system___basic_get_char
25bc8     FD 30 02 F6 | 	mov	local06, result1
25bcc     01 30 56 F2 | 	cmps	local06, #1 wc
25bd0     8C 00 90 CD |  if_b	jmp	#LR__3172
25bd4     0A 30 0E F2 | 	cmp	local06, #10 wz
25bd8     10 00 90 5D |  if_ne	jmp	#LR__3171
25bdc     00 2C 0E F2 | 	cmp	local04, #0 wz
25be0     01 28 56 52 |  if_ne	cmps	local02, #1 wc
25be4     01 28 86 11 |  if_a	sub	local02, #1
25be8     74 00 90 FD | 	jmp	#LR__3172
25bec                 | LR__3171
25bec     0D 30 0E F2 | 	cmp	local06, #13 wz
25bf0     01 2C 06 A6 |  if_e	mov	local04, #1
25bf4     00 2C 06 56 |  if_ne	mov	local04, #0
25bf8     08 30 0E F2 | 	cmp	local06, #8 wz
25bfc     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
25c00     01 28 56 A2 |  if_e	cmps	local02, #1 wc
25c04     01 28 86 21 |  if_nc_and_z	sub	local02, #1
25c08     B4 FF 9F AD |  if_e	jmp	#LR__3170
25c0c     17 17 02 F6 | 	mov	arg03, local05
25c10     14 17 02 F1 | 	add	arg03, local02
25c14     0B 31 42 FC | 	wrbyte	local06, arg03
25c18     01 28 06 F1 | 	add	local02, #1
25c1c     15 29 0A F2 | 	cmp	local02, local03 wz
25c20     9C FF 9F 5D |  if_ne	jmp	#LR__3170
25c24     15 13 02 F6 | 	mov	arg01, local03
25c28     20 12 06 F1 | 	add	arg01, #32
25c2c     F8 3E B0 FD | 	call	#__system___gc_alloc_managed
25c30     FD 30 0A F6 | 	mov	local06, result1 wz
25c34     18 FB 01 A6 |  if_e	mov	result1, local06
25c38     34 00 90 AD |  if_e	jmp	#LR__3173
25c3c     18 13 02 F6 | 	mov	arg01, local06
25c40     17 15 02 F6 | 	mov	arg02, local05
25c44     15 17 02 F6 | 	mov	arg03, local03
25c48     5C FC BF FD | 	call	#__system____builtin_memmove
25c4c     20 2A 06 F1 | 	add	local03, #32
25c50     17 13 02 F6 | 	mov	arg01, local05
25c54     0C 40 B0 FD | 	call	#__system___gc_free
25c58     18 2F 02 F6 | 	mov	local05, local06
25c5c     60 FF 9F FD | 	jmp	#LR__3170
25c60                 | LR__3172
25c60     17 31 02 F6 | 	mov	local06, local05
25c64     14 31 02 F1 | 	add	local06, local02
25c68     18 01 48 FC | 	wrbyte	#0, local06
25c6c     17 FB 01 F6 | 	mov	result1, local05
25c70                 | LR__3173
25c70     A7 F0 03 F6 | 	mov	ptra, fp
25c74     B2 00 A0 FD | 	call	#popregs_
25c78                 | __system___basic_read_line_ret
25c78     2D 00 64 FD | 	ret
25c7c                 | 
25c7c                 | __system___waitms
25c7c     09 01 02 F6 | 	mov	_var01, arg01
25c80     1A 02 62 FD | 	getct	_var02
25c84     14 04 06 FB | 	rdlong	_var03, #20
25c88     97 14 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
25c8c                 | LR__3180
25c8c     01 00 00 FF 
25c90     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
25c94     1C 00 90 CD |  if_b	jmp	#LR__3182
25c98     02 03 02 F1 | 	add	_var02, _var03
25c9c     01 13 02 F6 | 	mov	arg01, _var02
25ca0     00 12 66 FA | 	addct1	arg01, #0
25ca4     24 22 60 FD | 	waitct1
25ca8     01 00 00 FF 
25cac     E8 01 86 F1 | 	sub	_var01, ##1000
25cb0     D8 FF 9F FD | 	jmp	#LR__3180
25cb4                 | LR__3181
25cb4                 | LR__3182
25cb4     01 00 56 F2 | 	cmps	_var01, #1 wc
25cb8     28 00 90 CD |  if_b	jmp	#LR__3183
25cbc     02 01 02 FD | 	qmul	_var01, _var03
25cc0     01 00 00 FF 
25cc4     E8 17 06 F6 | 	mov	arg03, ##1000
25cc8     19 FA 61 FD | 	getqy	result1
25ccc     18 12 62 FD | 	getqx	arg01
25cd0     28 FA 61 FD | 	setq	result1
25cd4     0B 13 12 FD | 	qdiv	arg01, arg03
25cd8     18 12 62 FD | 	getqx	arg01
25cdc     01 13 62 FA | 	addct1	arg01, _var02
25ce0     24 22 60 FD | 	waitct1
25ce4                 | LR__3183
25ce4                 | __system___waitms_ret
25ce4     2D 00 64 FD | 	ret
25ce8                 | 
25ce8                 | __system___waitus
25ce8     09 01 02 F6 | 	mov	_var01, arg01
25cec     1A 02 62 FD | 	getct	_var02
25cf0     14 04 06 FB | 	rdlong	_var03, #20
25cf4     97 14 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
25cf8                 | LR__3190
25cf8     A1 07 00 FF 
25cfc     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
25d00     1C 00 90 CD |  if_b	jmp	#LR__3192
25d04     02 03 02 F1 | 	add	_var02, _var03
25d08     01 13 02 F6 | 	mov	arg01, _var02
25d0c     00 12 66 FA | 	addct1	arg01, #0
25d10     24 22 60 FD | 	waitct1
25d14     A1 07 00 FF 
25d18     40 00 86 F1 | 	sub	_var01, ##1000000
25d1c     D8 FF 9F FD | 	jmp	#LR__3190
25d20                 | LR__3191
25d20                 | LR__3192
25d20     01 00 56 F2 | 	cmps	_var01, #1 wc
25d24     28 00 90 CD |  if_b	jmp	#LR__3193
25d28     02 01 02 FD | 	qmul	_var01, _var03
25d2c     A1 07 00 FF 
25d30     40 16 06 F6 | 	mov	arg03, ##1000000
25d34     19 FA 61 FD | 	getqy	result1
25d38     18 12 62 FD | 	getqx	arg01
25d3c     28 FA 61 FD | 	setq	result1
25d40     0B 13 12 FD | 	qdiv	arg01, arg03
25d44     18 FA 61 FD | 	getqx	result1
25d48     FD 02 62 FA | 	addct1	_var02, result1
25d4c     24 22 60 FD | 	waitct1
25d50                 | LR__3193
25d50                 | __system___waitus_ret
25d50     2D 00 64 FD | 	ret
25d54                 | 
25d54                 | __system___mount
25d54     0B 4A 05 F6 | 	mov	COUNT_, #11
25d58     A8 00 A0 FD | 	call	#pushregs_
25d5c     09 27 02 F6 | 	mov	local01, arg01
25d60     0A 29 0A F6 | 	mov	local02, arg02 wz
25d64     01 2A 66 F6 | 	neg	local03, #1
25d68     01 FA 65 A6 |  if_e	neg	result1, #1
25d6c     98 02 90 AD |  if_e	jmp	#LR__3215
25d70     13 FB C1 FA | 	rdbyte	result1, local01
25d74     2F FA 0D F2 | 	cmp	result1, #47 wz
25d78     28 00 90 5D |  if_ne	jmp	#LR__3202
25d7c     13 13 02 F6 | 	mov	arg01, local01
25d80     09 2D 02 F6 | 	mov	local04, arg01
25d84     97 06 48 FB | 	callpa	#(@LR__3201-@LR__3200)>>2,fcache_load_ptr_
25d88                 | LR__3200
25d88     16 FB C9 FA | 	rdbyte	result1, local04 wz
25d8c     01 2C 06 51 |  if_ne	add	local04, #1
25d90     F4 FF 9F 5D |  if_ne	jmp	#LR__3200
25d94                 | LR__3201
25d94     09 2D 82 F1 | 	sub	local04, arg01
25d98     16 FB 01 F6 | 	mov	result1, local04
25d9c     10 FA 55 F2 | 	cmps	result1, #16 wc
25da0     14 00 90 CD |  if_b	jmp	#LR__3203
25da4                 | LR__3202
25da4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25da8     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
25dac     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25db0     01 FA 65 F6 | 	neg	result1, #1
25db4     50 02 90 FD | 	jmp	#LR__3215
25db8                 | LR__3203
25db8     00 2E 06 F6 | 	mov	local05, #0
25dbc                 | LR__3204
25dbc     04 2E 56 F2 | 	cmps	local05, #4 wc
25dc0     B0 00 90 3D |  if_ae	jmp	#LR__3209
25dc4     17 13 02 F6 | 	mov	arg01, local05
25dc8     02 12 66 F0 | 	shl	arg01, #2
25dcc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25dd0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25dd4     09 FB 09 FB | 	rdlong	result1, arg01 wz
25dd8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25ddc     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
25de0     17 2B 02 86 |  if_c_and_z	mov	local03, local05
25de4     84 00 90 8D |  if_c_and_z	jmp	#LR__3208
25de8     17 13 02 F6 | 	mov	arg01, local05
25dec     02 12 66 F0 | 	shl	arg01, #2
25df0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25df4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25df8     09 13 02 FB | 	rdlong	arg01, arg01
25dfc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25e00     09 2D 02 F6 | 	mov	local04, arg01
25e04     97 06 48 FB | 	callpa	#(@LR__3206-@LR__3205)>>2,fcache_load_ptr_
25e08                 | LR__3205
25e08     16 FB C9 FA | 	rdbyte	result1, local04 wz
25e0c     01 2C 06 51 |  if_ne	add	local04, #1
25e10     F4 FF 9F 5D |  if_ne	jmp	#LR__3205
25e14                 | LR__3206
25e14     09 2D 82 F1 | 	sub	local04, arg01
25e18     16 31 02 F6 | 	mov	local06, local04
25e1c     18 13 02 F6 | 	mov	arg01, local06
25e20     13 13 02 F1 | 	add	arg01, local01
25e24     09 FB C1 FA | 	rdbyte	result1, arg01
25e28     2F FA 0D F2 | 	cmp	result1, #47 wz
25e2c     18 33 02 56 |  if_ne	mov	local07, local06
25e30     13 33 02 51 |  if_ne	add	local07, local01
25e34     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
25e38     30 00 90 5D |  if_ne	jmp	#LR__3207
25e3c     17 17 02 F6 | 	mov	arg03, local05
25e40     02 16 66 F0 | 	shl	arg03, #2
25e44     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25e48     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
25e4c     0B 15 02 FB | 	rdlong	arg02, arg03
25e50     13 13 02 F6 | 	mov	arg01, local01
25e54     18 17 02 F6 | 	mov	arg03, local06
25e58     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25e5c     48 51 B0 FD | 	call	#__system__strncmp
25e60     00 FA 0D F2 | 	cmp	result1, #0 wz
25e64     17 2B 02 A6 |  if_e	mov	local03, local05
25e68     08 00 90 AD |  if_e	jmp	#LR__3209
25e6c                 | LR__3207
25e6c                 | LR__3208
25e6c     01 2E 06 F1 | 	add	local05, #1
25e70     48 FF 9F FD | 	jmp	#LR__3204
25e74                 | LR__3209
25e74     FF FF 7F FF 
25e78     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
25e7c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25e80     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
25e84     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25e88     01 FA 65 A6 |  if_e	neg	result1, #1
25e8c     78 01 90 AD |  if_e	jmp	#LR__3215
25e90     15 2F 02 F6 | 	mov	local05, local03
25e94     17 33 02 F6 | 	mov	local07, local05
25e98     02 32 66 F0 | 	shl	local07, #2
25e9c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25ea0     F3 32 02 F1 | 	add	local07, ptr___system__dat__
25ea4     19 31 0A FB | 	rdlong	local06, local07 wz
25ea8     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
25eac     58 00 90 AD |  if_e	jmp	#LR__3210
25eb0     4C 30 06 F1 | 	add	local06, #76
25eb4     18 33 0A FB | 	rdlong	local07, local06 wz
25eb8     4C 30 86 F1 | 	sub	local06, #76
25ebc     48 00 90 AD |  if_e	jmp	#LR__3210
25ec0     4C 30 06 F1 | 	add	local06, #76
25ec4     18 33 02 FB | 	rdlong	local07, local06
25ec8     19 2B 02 F6 | 	mov	local03, local07
25ecc     13 32 46 F7 | 	zerox	local07, #19
25ed0     14 2A 46 F0 | 	shr	local03, #20
25ed4     02 2A 66 F0 | 	shl	local03, #2
25ed8     ED 2A 02 F1 | 	add	local03, __methods__
25edc     15 2B 02 FB | 	rdlong	local03, local03
25ee0     17 31 02 F6 | 	mov	local06, local05
25ee4     02 30 66 F0 | 	shl	local06, #2
25ee8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25eec     F3 30 02 F1 | 	add	local06, ptr___system__dat__
25ef0     18 13 02 FB | 	rdlong	arg01, local06
25ef4     F2 30 02 F6 | 	mov	local06, objptr
25ef8     19 E5 01 F6 | 	mov	objptr, local07
25efc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25f00     2D 2A 62 FD | 	call	local03
25f04     18 E5 01 F6 | 	mov	objptr, local06
25f08                 | LR__3210
25f08     17 35 02 F6 | 	mov	local08, local05
25f0c     02 34 66 F0 | 	shl	local08, #2
25f10     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25f14     F3 34 02 F1 | 	add	local08, ptr___system__dat__
25f18     1A 29 62 FC | 	wrlong	local02, local08
25f1c     00 28 0E F2 | 	cmp	local02, #0 wz
25f20     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
25f24     18 00 90 5D |  if_ne	jmp	#LR__3211
25f28     02 2E 66 F0 | 	shl	local05, #2
25f2c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25f30     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
25f34     17 01 68 FC | 	wrlong	#0, local05
25f38     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25f3c     C4 00 90 FD | 	jmp	#LR__3214
25f40                 | LR__3211
25f40     17 37 02 F6 | 	mov	local09, local05
25f44     04 36 66 F0 | 	shl	local09, #4
25f48     24 E6 05 F1 | 	add	ptr___system__dat__, #36
25f4c     F3 36 02 F1 | 	add	local09, ptr___system__dat__
25f50     1B 13 02 F6 | 	mov	arg01, local09
25f54     13 15 02 F6 | 	mov	arg02, local01
25f58     10 16 06 F6 | 	mov	arg03, #16
25f5c     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
25f60     98 4F B0 FD | 	call	#__system__strncpy
25f64     48 28 06 F1 | 	add	local02, #72
25f68     14 35 0A FB | 	rdlong	local08, local02 wz
25f6c     48 28 86 F1 | 	sub	local02, #72
25f70     7C 00 90 AD |  if_e	jmp	#LR__3213
25f74     48 28 06 F1 | 	add	local02, #72
25f78     14 35 02 FB | 	rdlong	local08, local02
25f7c     1A 39 02 F6 | 	mov	local10, local08
25f80     13 34 46 F7 | 	zerox	local08, #19
25f84     14 38 46 F0 | 	shr	local10, #20
25f88     02 38 66 F0 | 	shl	local10, #2
25f8c     ED 38 02 F1 | 	add	local10, __methods__
25f90     1C 39 02 FB | 	rdlong	local10, local10
25f94     1B 13 02 F6 | 	mov	arg01, local09
25f98     F2 3A 02 F6 | 	mov	local11, objptr
25f9c     1A E5 01 F6 | 	mov	objptr, local08
25fa0     2D 38 62 FD | 	call	local10
25fa4     1D E5 01 F6 | 	mov	objptr, local11
25fa8     FD 12 0A F6 | 	mov	arg01, result1 wz
25fac     40 00 90 AD |  if_e	jmp	#LR__3212
25fb0     17 35 02 F6 | 	mov	local08, local05
25fb4     02 34 66 F0 | 	shl	local08, #2
25fb8     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25fbc     F3 34 02 F1 | 	add	local08, ptr___system__dat__
25fc0     1A 01 68 FC | 	wrlong	#0, local08
25fc4     02 2E 66 F0 | 	shl	local05, #2
25fc8     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
25fcc     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
25fd0     17 01 68 FC | 	wrlong	#0, local05
25fd4     09 13 6A F6 | 	neg	arg01, arg01 wz
25fd8     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
25fdc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25fe0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25fe4     01 FA 65 56 |  if_ne	neg	result1, #1
25fe8     00 FA 05 A6 |  if_e	mov	result1, #0
25fec     18 00 90 FD | 	jmp	#LR__3215
25ff0                 | LR__3212
25ff0                 | LR__3213
25ff0     02 2E 66 F0 | 	shl	local05, #2
25ff4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25ff8     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
25ffc     17 37 62 FC | 	wrlong	local09, local05
26000     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26004                 | LR__3214
26004     00 FA 05 F6 | 	mov	result1, #0
26008                 | LR__3215
26008     A7 F0 03 F6 | 	mov	ptra, fp
2600c     B2 00 A0 FD | 	call	#popregs_
26010                 | __system___mount_ret
26010     2D 00 64 FD | 	ret
26014                 | 
26014                 | __system___chdir
26014     00 4A 05 F6 | 	mov	COUNT_, #0
26018     A8 00 A0 FD | 	call	#pushregs_
2601c     40 F0 07 F1 | 	add	ptra, #64
26020     04 4E 05 F1 | 	add	fp, #4
26024     A7 12 62 FC | 	wrlong	arg01, fp
26028     04 4E 05 F1 | 	add	fp, #4
2602c     A7 14 02 F6 | 	mov	arg02, fp
26030     08 4E 85 F1 | 	sub	fp, #8
26034     68 4B B0 FD | 	call	#__system__stat
26038     3C 4E 05 F1 | 	add	fp, #60
2603c     A7 FA 61 FC | 	wrlong	result1, fp
26040     3C 4E 85 F1 | 	sub	fp, #60
26044     00 FA 0D F2 | 	cmp	result1, #0 wz
26048     3C 4E 05 51 |  if_ne	add	fp, #60
2604c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
26050     3C 4E 85 51 |  if_ne	sub	fp, #60
26054     BC 00 90 5D |  if_ne	jmp	#LR__3222
26058     10 4E 05 F1 | 	add	fp, #16
2605c     A7 12 02 FB | 	rdlong	arg01, fp
26060     10 4E 85 F1 | 	sub	fp, #16
26064     78 00 00 FF 
26068     00 12 06 F5 | 	and	arg01, ##61440
2606c     08 00 00 FF 
26070     00 12 0E F2 | 	cmp	arg01, ##4096 wz
26074     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
26078     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
2607c     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
26080     01 FA 65 56 |  if_ne	neg	result1, #1
26084     8C 00 90 5D |  if_ne	jmp	#LR__3222
26088     04 4E 05 F1 | 	add	fp, #4
2608c     A7 16 02 FB | 	rdlong	arg03, fp
26090     04 4E 85 F1 | 	sub	fp, #4
26094     0B 17 C2 FA | 	rdbyte	arg03, arg03
26098     2F 16 0E F2 | 	cmp	arg03, #47 wz
2609c     24 00 90 5D |  if_ne	jmp	#LR__3220
260a0     84 E6 05 F1 | 	add	ptr___system__dat__, #132
260a4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
260a8     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
260ac     04 4E 05 F1 | 	add	fp, #4
260b0     A7 14 02 FB | 	rdlong	arg02, fp
260b4     04 4E 85 F1 | 	sub	fp, #4
260b8     00 17 06 F6 | 	mov	arg03, #256
260bc     3C 4E B0 FD | 	call	#__system__strncpy
260c0     4C 00 90 FD | 	jmp	#LR__3221
260c4                 | LR__3220
260c4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
260c8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
260cc     38 4E 05 F1 | 	add	fp, #56
260d0     A7 12 62 FC | 	wrlong	arg01, fp
260d4     38 4E 85 F1 | 	sub	fp, #56
260d8     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
260dc     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
260e0     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
260e4     00 17 06 F6 | 	mov	arg03, #256
260e8     10 4E B0 FD | 	call	#__system__strncpy
260ec     38 4E 05 F1 | 	add	fp, #56
260f0     A7 12 02 FB | 	rdlong	arg01, fp
260f4     34 4E 85 F1 | 	sub	fp, #52
260f8     A7 14 02 FB | 	rdlong	arg02, fp
260fc     04 4E 85 F1 | 	sub	fp, #4
26100     84 E6 05 F1 | 	add	ptr___system__dat__, #132
26104     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
26108     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2610c     10 00 B0 FD | 	call	#__system____getvfsforfile
26110                 | LR__3221
26110     00 FA 05 F6 | 	mov	result1, #0
26114                 | LR__3222
26114     A7 F0 03 F6 | 	mov	ptra, fp
26118     B2 00 A0 FD | 	call	#popregs_
2611c                 | __system___chdir_ret
2611c     2D 00 64 FD | 	ret
26120                 | 
26120                 | __system____getvfsforfile
26120     0E 4A 05 F6 | 	mov	COUNT_, #14
26124     A8 00 A0 FD | 	call	#pushregs_
26128     09 27 02 F6 | 	mov	local01, arg01
2612c     0A 29 02 F6 | 	mov	local02, arg02
26130     0B 2B 02 F6 | 	mov	local03, arg03
26134     97 10 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
26138                 | LR__3230
26138     14 FB C1 FA | 	rdbyte	result1, local02
2613c     2F FA 0D F2 | 	cmp	result1, #47 wz
26140     01 28 06 A1 |  if_e	add	local02, #1
26144     14 2D C2 AA |  if_e	rdbyte	local04, local02
26148     01 28 86 A1 |  if_e	sub	local02, #1
2614c     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
26150     01 28 06 A1 |  if_e	add	local02, #1
26154     E0 FF 9F AD |  if_e	jmp	#LR__3230
26158                 | LR__3231
26158     14 2D C2 FA | 	rdbyte	local04, local02
2615c     2F 2C 0E F2 | 	cmp	local04, #47 wz
26160     14 00 90 5D |  if_ne	jmp	#LR__3232
26164     13 13 02 F6 | 	mov	arg01, local01
26168     14 15 02 F6 | 	mov	arg02, local02
2616c     00 17 06 F6 | 	mov	arg03, #256
26170     88 4D B0 FD | 	call	#__system__strncpy
26174     7C 00 90 FD | 	jmp	#LR__3234
26178                 | LR__3232
26178     84 E6 05 F1 | 	add	ptr___system__dat__, #132
2617c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
26180     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
26184     13 13 02 F6 | 	mov	arg01, local01
26188     00 17 06 F6 | 	mov	arg03, #256
2618c     6C 4D B0 FD | 	call	#__system__strncpy
26190     14 2D CA FA | 	rdbyte	local04, local02 wz
26194     5C 00 90 AD |  if_e	jmp	#LR__3233
26198     14 2D C2 FA | 	rdbyte	local04, local02
2619c     2E 2C 0E F2 | 	cmp	local04, #46 wz
261a0     01 28 06 A1 |  if_e	add	local02, #1
261a4     14 2F C2 AA |  if_e	rdbyte	local05, local02
261a8     01 28 86 A1 |  if_e	sub	local02, #1
261ac     17 31 02 A6 |  if_e	mov	local06, local05
261b0     07 30 4E A7 |  if_e	zerox	local06, #7 wz
261b4     3C 00 90 AD |  if_e	jmp	#LR__3233
261b8     13 2F C2 FA | 	rdbyte	local05, local01
261bc     2F 2E 0E F2 | 	cmp	local05, #47 wz
261c0     01 26 06 A1 |  if_e	add	local01, #1
261c4     13 2D C2 AA |  if_e	rdbyte	local04, local01
261c8     01 26 86 A1 |  if_e	sub	local01, #1
261cc     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
261d0     AA 01 00 5F 
261d4     94 14 06 56 |  if_ne	mov	arg02, ##@LR__5360
261d8     13 13 02 56 |  if_ne	mov	arg01, local01
261dc     00 17 06 56 |  if_ne	mov	arg03, #256
261e0     64 4D B0 5D |  if_ne	call	#__system__strncat
261e4     13 13 02 F6 | 	mov	arg01, local01
261e8     14 15 02 F6 | 	mov	arg02, local02
261ec     00 17 06 F6 | 	mov	arg03, #256
261f0     54 4D B0 FD | 	call	#__system__strncat
261f4                 | LR__3233
261f4                 | LR__3234
261f4     13 13 02 F6 | 	mov	arg01, local01
261f8     0C 4F B0 FD | 	call	#__system___normalizeName
261fc     13 2D CA FA | 	rdbyte	local04, local01 wz
26200     1C 00 90 AD |  if_e	jmp	#LR__3235
26204     13 2D C2 FA | 	rdbyte	local04, local01
26208     2F 2C 0E F2 | 	cmp	local04, #47 wz
2620c     01 26 06 A1 |  if_e	add	local01, #1
26210     13 31 C2 AA |  if_e	rdbyte	local06, local01
26214     01 26 86 A1 |  if_e	sub	local01, #1
26218     00 30 4E A2 |  if_e	cmps	local06, #0 wz
2621c     18 00 90 5D |  if_ne	jmp	#LR__3236
26220                 | LR__3235
26220     01 00 00 FF 
26224     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
26228     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2622c     01 00 00 FF 
26230     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
26234     EC 01 90 FD | 	jmp	#LR__3250
26238                 | LR__3236
26238     00 32 06 F6 | 	mov	local07, #0
2623c                 | LR__3237
2623c     04 32 56 F2 | 	cmps	local07, #4 wc
26240     CC 01 90 3D |  if_ae	jmp	#LR__3249
26244     19 31 02 F6 | 	mov	local06, local07
26248     02 30 66 F0 | 	shl	local06, #2
2624c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26250     F3 30 02 F1 | 	add	local06, ptr___system__dat__
26254     18 31 0A FB | 	rdlong	local06, local06 wz
26258     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2625c     A8 01 90 AD |  if_e	jmp	#LR__3248
26260     19 2D 02 F6 | 	mov	local04, local07
26264     02 2C 66 F0 | 	shl	local04, #2
26268     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2626c     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
26270     16 13 02 FB | 	rdlong	arg01, local04
26274     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26278     09 35 02 F6 | 	mov	local08, arg01
2627c     97 06 48 FB | 	callpa	#(@LR__3239-@LR__3238)>>2,fcache_load_ptr_
26280                 | LR__3238
26280     1A FB C9 FA | 	rdbyte	result1, local08 wz
26284     01 34 06 51 |  if_ne	add	local08, #1
26288     F4 FF 9F 5D |  if_ne	jmp	#LR__3238
2628c                 | LR__3239
2628c     09 35 82 F1 | 	sub	local08, arg01
26290     1A 37 02 F6 | 	mov	local09, local08
26294     1B 2D 02 F6 | 	mov	local04, local09
26298     13 2D 02 F1 | 	add	local04, local01
2629c     16 31 C2 FA | 	rdbyte	local06, local04
262a0     2F 30 0E F2 | 	cmp	local06, #47 wz
262a4     1B 39 02 56 |  if_ne	mov	local10, local09
262a8     13 39 02 51 |  if_ne	add	local10, local01
262ac     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
262b0     54 01 90 5D |  if_ne	jmp	#LR__3247
262b4     19 17 02 F6 | 	mov	arg03, local07
262b8     02 16 66 F0 | 	shl	arg03, #2
262bc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
262c0     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
262c4     0B 15 02 FB | 	rdlong	arg02, arg03
262c8     1B 17 02 F6 | 	mov	arg03, local09
262cc     13 13 02 F6 | 	mov	arg01, local01
262d0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
262d4     D0 4C B0 FD | 	call	#__system__strncmp
262d8     00 FA 4D F2 | 	cmps	result1, #0 wz
262dc     28 01 90 5D |  if_ne	jmp	#LR__3247
262e0     19 3B 02 F6 | 	mov	local11, local07
262e4     02 3A 66 F0 | 	shl	local11, #2
262e8     74 E6 05 F1 | 	add	ptr___system__dat__, #116
262ec     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
262f0     1D 3D 02 FB | 	rdlong	local12, local11
262f4     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
262f8     97 22 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
262fc                 | LR__3240
262fc     1B 31 02 F6 | 	mov	local06, local09
26300     01 30 06 F1 | 	add	local06, #1
26304     13 31 02 F1 | 	add	local06, local01
26308     18 3B C2 FA | 	rdbyte	local11, local06
2630c     2E 3A 0E F2 | 	cmp	local11, #46 wz
26310     2C 00 90 5D |  if_ne	jmp	#LR__3242
26314     1B 3B 02 F6 | 	mov	local11, local09
26318     02 3A 06 F1 | 	add	local11, #2
2631c     13 3B 02 F1 | 	add	local11, local01
26320     1D 39 C2 FA | 	rdbyte	local10, local11
26324     2F 38 0E F2 | 	cmp	local10, #47 wz
26328     1B 3F 02 56 |  if_ne	mov	local13, local09
2632c     02 3E 06 51 |  if_ne	add	local13, #2
26330     13 3F 02 51 |  if_ne	add	local13, local01
26334     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
26338     01 36 06 A1 |  if_e	add	local09, #1
2633c     BC FF 9F AD |  if_e	jmp	#LR__3240
26340                 | LR__3241
26340                 | LR__3242
26340     00 2A 0E F2 | 	cmp	local03, #0 wz
26344     15 13 02 56 |  if_ne	mov	arg01, local03
26348     13 15 02 56 |  if_ne	mov	arg02, local01
2634c     00 17 06 56 |  if_ne	mov	arg03, #256
26350     A8 4B B0 5D |  if_ne	call	#__system__strncpy
26354     13 15 02 F6 | 	mov	arg02, local01
26358     1B 15 02 F1 | 	add	arg02, local09
2635c     01 14 06 F1 | 	add	arg02, #1
26360     13 13 02 F6 | 	mov	arg01, local01
26364     D4 F5 BF FD | 	call	#__system____builtin_strcpy
26368     13 13 02 F6 | 	mov	arg01, local01
2636c     09 35 02 F6 | 	mov	local08, arg01
26370     97 06 48 FB | 	callpa	#(@LR__3244-@LR__3243)>>2,fcache_load_ptr_
26374                 | LR__3243
26374     1A FB C9 FA | 	rdbyte	result1, local08 wz
26378     01 34 06 51 |  if_ne	add	local08, #1
2637c     F4 FF 9F 5D |  if_ne	jmp	#LR__3243
26380                 | LR__3244
26380     09 35 82 F1 | 	sub	local08, arg01
26384     1A 37 02 F6 | 	mov	local09, local08
26388                 | LR__3245
26388     01 36 56 F2 | 	cmps	local09, #1 wc
2638c     70 00 90 CD |  if_b	jmp	#LR__3246
26390     1B 2D 02 F6 | 	mov	local04, local09
26394     13 2D 02 F1 | 	add	local04, local01
26398     16 3B C2 FA | 	rdbyte	local11, local04
2639c     2F 3A 0E F2 | 	cmp	local11, #47 wz
263a0     1B 3B 02 A6 |  if_e	mov	local11, local09
263a4     13 3B 02 A1 |  if_e	add	local11, local01
263a8     1D 01 48 AC |  if_e	wrbyte	#0, local11
263ac     01 36 86 A1 |  if_e	sub	local09, #1
263b0     D4 FF 9F AD |  if_e	jmp	#LR__3245
263b4     1B 2D 02 F6 | 	mov	local04, local09
263b8     13 2D 02 F1 | 	add	local04, local01
263bc     16 3B C2 FA | 	rdbyte	local11, local04
263c0     2E 3A 0E F2 | 	cmp	local11, #46 wz
263c4     38 00 90 5D |  if_ne	jmp	#LR__3246
263c8     02 36 56 F2 | 	cmps	local09, #2 wc
263cc     30 00 90 CD |  if_b	jmp	#LR__3246
263d0     1B 41 02 F6 | 	mov	local14, local09
263d4     01 40 86 F1 | 	sub	local14, #1
263d8     13 41 02 F1 | 	add	local14, local01
263dc     20 2F C2 FA | 	rdbyte	local05, local14
263e0     2F 2E 0E F2 | 	cmp	local05, #47 wz
263e4     18 00 90 5D |  if_ne	jmp	#LR__3246
263e8     1B 2D 02 F6 | 	mov	local04, local09
263ec     01 2C 86 F1 | 	sub	local04, #1
263f0     13 2D 02 F1 | 	add	local04, local01
263f4     16 01 48 FC | 	wrbyte	#0, local04
263f8     02 36 86 F1 | 	sub	local09, #2
263fc     88 FF 9F FD | 	jmp	#LR__3245
26400                 | LR__3246
26400     1E FB 01 F6 | 	mov	result1, local12
26404     1C 00 90 FD | 	jmp	#LR__3250
26408                 | LR__3247
26408                 | LR__3248
26408     01 32 06 F1 | 	add	local07, #1
2640c     2C FE 9F FD | 	jmp	#LR__3237
26410                 | LR__3249
26410     02 00 00 FF 
26414     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
26418     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2641c     02 00 00 FF 
26420     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
26424                 | LR__3250
26424     A7 F0 03 F6 | 	mov	ptra, fp
26428     B2 00 A0 FD | 	call	#popregs_
2642c                 | __system____getvfsforfile_ret
2642c     2D 00 64 FD | 	ret
26430                 | 
26430                 | __system___basic_open
26430     05 4A 05 F6 | 	mov	COUNT_, #5
26434     A8 00 A0 FD | 	call	#pushregs_
26438     0A 27 02 F6 | 	mov	local01, arg02
2643c     0B 29 02 F6 | 	mov	local02, arg03
26440     0C 2B 02 F6 | 	mov	local03, arg04
26444     00 2C 06 F6 | 	mov	local04, #0
26448     88 4A B0 FD | 	call	#__system____getftab
2644c     FD 2E 0A F6 | 	mov	local05, result1 wz
26450     18 00 90 5D |  if_ne	jmp	#LR__3260
26454     EE 12 02 F6 | 	mov	arg01, abortchain
26458     0C 14 06 F6 | 	mov	arg02, #12
2645c     01 16 06 F6 | 	mov	arg03, #1
26460     DA 00 A0 FD | 	call	#__longjmp
26464     01 FA 65 F6 | 	neg	result1, #1
26468     14 01 90 FD | 	jmp	#LR__3269
2646c                 | LR__3260
2646c     08 2E 06 F1 | 	add	local05, #8
26470     17 FB 09 FB | 	rdlong	result1, local05 wz
26474     08 2E 86 F1 | 	sub	local05, #8
26478     17 13 02 56 |  if_ne	mov	arg01, local05
2647c     A8 41 B0 5D |  if_ne	call	#__system___closeraw
26480     00 26 0E F2 | 	cmp	local01, #0 wz
26484     00 28 0E A2 |  if_e	cmp	local02, #0 wz
26488     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
2648c     3C 00 90 AD |  if_e	jmp	#LR__3262
26490     0C 12 06 F6 | 	mov	arg01, #12
26494     90 36 B0 FD | 	call	#__system___gc_alloc_managed
26498     FD 2C 0A F6 | 	mov	local04, result1 wz
2649c     18 00 90 5D |  if_ne	jmp	#LR__3261
264a0     EE 12 02 F6 | 	mov	arg01, abortchain
264a4     07 14 06 F6 | 	mov	arg02, #7
264a8     01 16 06 F6 | 	mov	arg03, #1
264ac     DA 00 A0 FD | 	call	#__longjmp
264b0     01 FA 65 F6 | 	neg	result1, #1
264b4     C8 00 90 FD | 	jmp	#LR__3269
264b8                 | LR__3261
264b8     16 01 68 FC | 	wrlong	#0, local04
264bc     04 2C 06 F1 | 	add	local04, #4
264c0     16 01 68 FC | 	wrlong	#0, local04
264c4     04 2C 86 F1 | 	sub	local04, #4
264c8     17 2D 62 FC | 	wrlong	local04, local05
264cc                 | LR__3262
264cc     00 26 0E F2 | 	cmp	local01, #0 wz
264d0     20 00 90 AD |  if_e	jmp	#LR__3263
264d4     16 27 62 FC | 	wrlong	local01, local04
264d8     16 FB 01 F6 | 	mov	result1, local04
264dc     00 E8 04 FF 
264e0     00 FA 45 F5 | 	or	result1, ##164626432
264e4     1C 2E 06 F1 | 	add	local05, #28
264e8     17 FB 61 FC | 	wrlong	result1, local05
264ec     1C 2E 86 F1 | 	sub	local05, #28
264f0     0C 00 90 FD | 	jmp	#LR__3264
264f4                 | LR__3263
264f4     1C 2E 06 F1 | 	add	local05, #28
264f8     17 01 68 FC | 	wrlong	#0, local05
264fc     1C 2E 86 F1 | 	sub	local05, #28
26500                 | LR__3264
26500     00 28 0E F2 | 	cmp	local02, #0 wz
26504     28 00 90 AD |  if_e	jmp	#LR__3265
26508     04 2C 06 F1 | 	add	local04, #4
2650c     16 29 62 FC | 	wrlong	local02, local04
26510     04 2C 86 F1 | 	sub	local04, #4
26514     16 FB 01 F6 | 	mov	result1, local04
26518     00 F0 04 FF 
2651c     00 FA 45 F5 | 	or	result1, ##165675008
26520     20 2E 06 F1 | 	add	local05, #32
26524     17 FB 61 FC | 	wrlong	result1, local05
26528     20 2E 86 F1 | 	sub	local05, #32
2652c     0C 00 90 FD | 	jmp	#LR__3266
26530                 | LR__3265
26530     20 2E 06 F1 | 	add	local05, #32
26534     17 01 68 FC | 	wrlong	#0, local05
26538     20 2E 86 F1 | 	sub	local05, #32
2653c                 | LR__3266
2653c     00 2A 0E F2 | 	cmp	local03, #0 wz
26540     24 00 90 AD |  if_e	jmp	#LR__3267
26544     08 2C 06 F1 | 	add	local04, #8
26548     16 2B 62 FC | 	wrlong	local03, local04
2654c     08 2C 86 F1 | 	sub	local04, #8
26550     00 F8 04 FF 
26554     00 2C 46 F5 | 	or	local04, ##166723584
26558     24 2E 06 F1 | 	add	local05, #36
2655c     17 2D 62 FC | 	wrlong	local04, local05
26560     24 2E 86 F1 | 	sub	local05, #36
26564     0C 00 90 FD | 	jmp	#LR__3268
26568                 | LR__3267
26568     24 2E 06 F1 | 	add	local05, #36
2656c     17 01 68 FC | 	wrlong	#0, local05
26570     24 2E 86 F1 | 	sub	local05, #36
26574                 | LR__3268
26574     08 2E 06 F1 | 	add	local05, #8
26578     17 0F 68 FC | 	wrlong	#7, local05
2657c     00 FA 05 F6 | 	mov	result1, #0
26580                 | LR__3269
26580     A7 F0 03 F6 | 	mov	ptra, fp
26584     B2 00 A0 FD | 	call	#popregs_
26588                 | __system___basic_open_ret
26588     2D 00 64 FD | 	ret
2658c                 | 
2658c                 | __system___basic_open_string
2658c     04 4A 05 F6 | 	mov	COUNT_, #4
26590     A8 00 A0 FD | 	call	#pushregs_
26594     0A 27 02 F6 | 	mov	local01, arg02
26598     0B 29 02 F6 | 	mov	local02, arg03
2659c     34 49 B0 FD | 	call	#__system____getftab
265a0     FD 2A 0A F6 | 	mov	local03, result1 wz
265a4     18 00 90 5D |  if_ne	jmp	#LR__3270
265a8     EE 12 02 F6 | 	mov	arg01, abortchain
265ac     0C 14 06 F6 | 	mov	arg02, #12
265b0     01 16 06 F6 | 	mov	arg03, #1
265b4     DA 00 A0 FD | 	call	#__longjmp
265b8     01 FA 65 F6 | 	neg	result1, #1
265bc     58 00 90 FD | 	jmp	#LR__3272
265c0                 | LR__3270
265c0     08 2A 06 F1 | 	add	local03, #8
265c4     15 19 0A FB | 	rdlong	arg04, local03 wz
265c8     08 2A 86 F1 | 	sub	local03, #8
265cc     15 13 02 56 |  if_ne	mov	arg01, local03
265d0     54 40 B0 5D |  if_ne	call	#__system___closeraw
265d4     13 15 02 F6 | 	mov	arg02, local01
265d8     14 17 02 F6 | 	mov	arg03, local02
265dc     15 13 02 F6 | 	mov	arg01, local03
265e0     B6 19 06 F6 | 	mov	arg04, #438
265e4     3C 3D B0 FD | 	call	#__system___openraw
265e8     FD 2C 02 F6 | 	mov	local04, result1
265ec     00 2C 56 F2 | 	cmps	local04, #0 wc
265f0     20 00 90 3D |  if_ae	jmp	#LR__3271
265f4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
265f8     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
265fc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26600     EE 12 02 F6 | 	mov	arg01, abortchain
26604     01 16 06 F6 | 	mov	arg03, #1
26608     DA 00 A0 FD | 	call	#__longjmp
2660c     01 FA 65 F6 | 	neg	result1, #1
26610     04 00 90 FD | 	jmp	#LR__3272
26614                 | LR__3271
26614     16 FB 01 F6 | 	mov	result1, local04
26618                 | LR__3272
26618     A7 F0 03 F6 | 	mov	ptra, fp
2661c     B2 00 A0 FD | 	call	#popregs_
26620                 | __system___basic_open_string_ret
26620     2D 00 64 FD | 	ret
26624                 | 
26624                 | __system___basic_print_char
26624     03 4A 05 F6 | 	mov	COUNT_, #3
26628     A8 00 A0 FD | 	call	#pushregs_
2662c     0A 27 02 F6 | 	mov	local01, arg02
26630     F4 4F B0 FD | 	call	#__system___gettxfunc
26634     FD 28 0A F6 | 	mov	local02, result1 wz
26638     00 FA 05 A6 |  if_e	mov	result1, #0
2663c     30 00 90 AD |  if_e	jmp	#LR__3280
26640     14 2B 02 F6 | 	mov	local03, local02
26644     13 28 46 F7 | 	zerox	local02, #19
26648     14 2A 46 F0 | 	shr	local03, #20
2664c     02 2A 66 F0 | 	shl	local03, #2
26650     ED 2A 02 F1 | 	add	local03, __methods__
26654     15 2B 02 FB | 	rdlong	local03, local03
26658     13 13 02 F6 | 	mov	arg01, local01
2665c     F2 26 02 F6 | 	mov	local01, objptr
26660     14 E5 01 F6 | 	mov	objptr, local02
26664     2D 2A 62 FD | 	call	local03
26668     13 E5 01 F6 | 	mov	objptr, local01
2666c     01 FA 05 F6 | 	mov	result1, #1
26670                 | LR__3280
26670     A7 F0 03 F6 | 	mov	ptra, fp
26674     B2 00 A0 FD | 	call	#popregs_
26678                 | __system___basic_print_char_ret
26678     2D 00 64 FD | 	ret
2667c                 | 
2667c                 | __system___basic_print_string
2667c     03 4A 05 F6 | 	mov	COUNT_, #3
26680     A8 00 A0 FD | 	call	#pushregs_
26684     0A 27 02 F6 | 	mov	local01, arg02
26688     0B 29 02 F6 | 	mov	local02, arg03
2668c     98 4F B0 FD | 	call	#__system___gettxfunc
26690     FD 2A 0A F6 | 	mov	local03, result1 wz
26694     00 FA 05 A6 |  if_e	mov	result1, #0
26698     18 00 90 AD |  if_e	jmp	#LR__3290
2669c     00 26 0E F2 | 	cmp	local01, #0 wz
266a0     00 FA 05 A6 |  if_e	mov	result1, #0
266a4     15 13 02 56 |  if_ne	mov	arg01, local03
266a8     14 15 02 56 |  if_ne	mov	arg02, local02
266ac     13 17 02 56 |  if_ne	mov	arg03, local01
266b0     08 02 B0 5D |  if_ne	call	#__system___fmtstr
266b4                 | LR__3290
266b4     A7 F0 03 F6 | 	mov	ptra, fp
266b8     B2 00 A0 FD | 	call	#popregs_
266bc                 | __system___basic_print_string_ret
266bc     2D 00 64 FD | 	ret
266c0                 | 
266c0                 | __system___basic_print_integer
266c0     04 4A 05 F6 | 	mov	COUNT_, #4
266c4     A8 00 A0 FD | 	call	#pushregs_
266c8     0A 27 02 F6 | 	mov	local01, arg02
266cc     0B 29 02 F6 | 	mov	local02, arg03
266d0     0C 2B 02 F6 | 	mov	local03, arg04
266d4     50 4F B0 FD | 	call	#__system___gettxfunc
266d8     FD 2C 0A F6 | 	mov	local04, result1 wz
266dc     00 FA 05 A6 |  if_e	mov	result1, #0
266e0     16 13 02 56 |  if_ne	mov	arg01, local04
266e4     14 15 02 56 |  if_ne	mov	arg02, local02
266e8     13 17 02 56 |  if_ne	mov	arg03, local01
266ec     15 19 02 56 |  if_ne	mov	arg04, local03
266f0     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
266f4     A7 F0 03 F6 | 	mov	ptra, fp
266f8     B2 00 A0 FD | 	call	#popregs_
266fc                 | __system___basic_print_integer_ret
266fc     2D 00 64 FD | 	ret
26700                 | 
26700                 | __system___basic_print_unsigned
26700     03 4A 05 F6 | 	mov	COUNT_, #3
26704     A8 00 A0 FD | 	call	#pushregs_
26708     0A 27 02 F6 | 	mov	local01, arg02
2670c     0B 29 02 F6 | 	mov	local02, arg03
26710     0C 2B 02 F6 | 	mov	local03, arg04
26714     10 4F B0 FD | 	call	#__system___gettxfunc
26718     FD 12 0A F6 | 	mov	arg01, result1 wz
2671c     00 FA 05 A6 |  if_e	mov	result1, #0
26720     3A 28 26 54 |  if_ne	bith	local02, #58
26724     14 15 02 56 |  if_ne	mov	arg02, local02
26728     13 17 02 56 |  if_ne	mov	arg03, local01
2672c     15 19 02 56 |  if_ne	mov	arg04, local03
26730     74 02 B0 5D |  if_ne	call	#__system___fmtnum
26734     A7 F0 03 F6 | 	mov	ptra, fp
26738     B2 00 A0 FD | 	call	#popregs_
2673c                 | __system___basic_print_unsigned_ret
2673c     2D 00 64 FD | 	ret
26740                 | 
26740                 | __system___basic_get_char
26740     03 4A 05 F6 | 	mov	COUNT_, #3
26744     A8 00 A0 FD | 	call	#pushregs_
26748     20 4F B0 FD | 	call	#__system___getrxfunc
2674c     FD 26 0A F6 | 	mov	local01, result1 wz
26750     01 FA 65 A6 |  if_e	neg	result1, #1
26754     28 00 90 AD |  if_e	jmp	#LR__3300
26758     13 29 02 F6 | 	mov	local02, local01
2675c     13 26 46 F7 | 	zerox	local01, #19
26760     14 28 46 F0 | 	shr	local02, #20
26764     02 28 66 F0 | 	shl	local02, #2
26768     ED 28 02 F1 | 	add	local02, __methods__
2676c     14 29 02 FB | 	rdlong	local02, local02
26770     F2 2A 02 F6 | 	mov	local03, objptr
26774     13 E5 01 F6 | 	mov	objptr, local01
26778     2D 28 62 FD | 	call	local02
2677c     15 E5 01 F6 | 	mov	objptr, local03
26780                 | LR__3300
26780     A7 F0 03 F6 | 	mov	ptra, fp
26784     B2 00 A0 FD | 	call	#popregs_
26788                 | __system___basic_get_char_ret
26788     2D 00 64 FD | 	ret
2678c                 | 
2678c                 | __system___basic_put
2678c     04 4A 05 F6 | 	mov	COUNT_, #4
26790     A8 00 A0 FD | 	call	#pushregs_
26794     0D 27 02 F6 | 	mov	local01, arg05
26798     13 19 02 FD | 	qmul	arg04, local01
2679c     09 29 02 F6 | 	mov	local02, arg01
267a0     0B 2B 02 F6 | 	mov	local03, arg03
267a4     00 14 0E F2 | 	cmp	arg02, #0 wz
267a8     01 14 86 51 |  if_ne	sub	arg02, #1
267ac     14 13 02 56 |  if_ne	mov	arg01, local02
267b0     00 16 06 56 |  if_ne	mov	arg03, #0
267b4     18 2C 62 FD | 	getqx	local04
267b8     60 45 B0 5D |  if_ne	call	#__system__lseek
267bc     15 15 02 F6 | 	mov	arg02, local03
267c0     16 17 02 F6 | 	mov	arg03, local04
267c4     14 13 02 F6 | 	mov	arg01, local02
267c8     9C 44 B0 FD | 	call	#__system__write
267cc     FD 2C 02 F6 | 	mov	local04, result1
267d0     01 2C 56 F2 | 	cmps	local04, #1 wc
267d4     10 00 90 CD |  if_b	jmp	#LR__3310
267d8     16 89 02 F6 | 	mov	muldiva_, local04
267dc     13 8B 02 F6 | 	mov	muldivb_, local01
267e0     BA 00 A0 FD | 	call	#divide_
267e4     45 2D 02 F6 | 	mov	local04, muldivb_
267e8                 | LR__3310
267e8     16 FB 01 F6 | 	mov	result1, local04
267ec     A7 F0 03 F6 | 	mov	ptra, fp
267f0     B2 00 A0 FD | 	call	#popregs_
267f4                 | __system___basic_put_ret
267f4     2D 00 64 FD | 	ret
267f8                 | 
267f8                 | __system___basic_get
267f8     04 4A 05 F6 | 	mov	COUNT_, #4
267fc     A8 00 A0 FD | 	call	#pushregs_
26800     0D 27 02 F6 | 	mov	local01, arg05
26804     13 19 02 FD | 	qmul	arg04, local01
26808     09 29 02 F6 | 	mov	local02, arg01
2680c     0B 2B 02 F6 | 	mov	local03, arg03
26810     00 14 0E F2 | 	cmp	arg02, #0 wz
26814     01 14 86 51 |  if_ne	sub	arg02, #1
26818     14 13 02 56 |  if_ne	mov	arg01, local02
2681c     00 16 06 56 |  if_ne	mov	arg03, #0
26820     18 2C 62 FD | 	getqx	local04
26824     F4 44 B0 5D |  if_ne	call	#__system__lseek
26828     15 15 02 F6 | 	mov	arg02, local03
2682c     16 17 02 F6 | 	mov	arg03, local04
26830     14 13 02 F6 | 	mov	arg01, local02
26834     6C 44 B0 FD | 	call	#__system__read
26838     FD 2C 02 F6 | 	mov	local04, result1
2683c     01 2C 56 F2 | 	cmps	local04, #1 wc
26840     10 00 90 CD |  if_b	jmp	#LR__3320
26844     16 89 02 F6 | 	mov	muldiva_, local04
26848     13 8B 02 F6 | 	mov	muldivb_, local01
2684c     BA 00 A0 FD | 	call	#divide_
26850     45 2D 02 F6 | 	mov	local04, muldivb_
26854                 | LR__3320
26854     16 FB 01 F6 | 	mov	result1, local04
26858     A7 F0 03 F6 | 	mov	ptra, fp
2685c     B2 00 A0 FD | 	call	#popregs_
26860                 | __system___basic_get_ret
26860     2D 00 64 FD | 	ret
26864                 | 
26864                 | __system___fmtchar
26864     00 4A 05 F6 | 	mov	COUNT_, #0
26868     A8 00 A0 FD | 	call	#pushregs_
2686c     10 F0 07 F1 | 	add	ptra, #16
26870     04 4E 05 F1 | 	add	fp, #4
26874     A7 12 62 FC | 	wrlong	arg01, fp
26878     04 4E 05 F1 | 	add	fp, #4
2687c     A7 14 62 FC | 	wrlong	arg02, fp
26880     04 4E 05 F1 | 	add	fp, #4
26884     A7 16 62 FC | 	wrlong	arg03, fp
26888     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2688c     A7 16 62 FC | 	wrlong	arg03, fp
26890     08 4E 85 F1 | 	sub	fp, #8
26894     A7 12 02 FB | 	rdlong	arg01, fp
26898     04 4E 05 F1 | 	add	fp, #4
2689c     A7 14 02 FB | 	rdlong	arg02, fp
268a0     04 4E 05 F1 | 	add	fp, #4
268a4     A7 16 02 F6 | 	mov	arg03, fp
268a8     0C 4E 85 F1 | 	sub	fp, #12
268ac     0C 00 B0 FD | 	call	#__system___fmtstr
268b0     A7 F0 03 F6 | 	mov	ptra, fp
268b4     B2 00 A0 FD | 	call	#popregs_
268b8                 | __system___fmtchar_ret
268b8     2D 00 64 FD | 	ret
268bc                 | 
268bc                 | __system___fmtstr
268bc     09 4A 05 F6 | 	mov	COUNT_, #9
268c0     A8 00 A0 FD | 	call	#pushregs_
268c4     09 27 02 F6 | 	mov	local01, arg01
268c8     0A 29 02 F6 | 	mov	local02, arg02
268cc     0B 2B 02 F6 | 	mov	local03, arg03
268d0     14 19 E2 F8 | 	getbyte	arg04, local02, #0
268d4     15 13 02 F6 | 	mov	arg01, local03
268d8     09 2D 02 F6 | 	mov	local04, arg01
268dc     97 06 48 FB | 	callpa	#(@LR__3331-@LR__3330)>>2,fcache_load_ptr_
268e0                 | LR__3330
268e0     16 FB C9 FA | 	rdbyte	result1, local04 wz
268e4     01 2C 06 51 |  if_ne	add	local04, #1
268e8     F4 FF 9F 5D |  if_ne	jmp	#LR__3330
268ec                 | LR__3331
268ec     09 2D 82 F1 | 	sub	local04, arg01
268f0     00 18 0E F2 | 	cmp	arg04, #0 wz
268f4     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
268f8     14 15 02 F6 | 	mov	arg02, local02
268fc     16 17 02 F6 | 	mov	arg03, local04
26900     13 13 02 F6 | 	mov	arg01, local01
26904     02 18 06 F6 | 	mov	arg04, #2
26908     BC 49 B0 FD | 	call	#__system___fmtpad
2690c     FD 2E 02 F6 | 	mov	local05, result1
26910     00 2E 56 F2 | 	cmps	local05, #0 wc
26914     17 FB 01 C6 |  if_b	mov	result1, local05
26918     80 00 90 CD |  if_b	jmp	#LR__3334
2691c     01 2C 56 F2 | 	cmps	local04, #1 wc
26920     50 00 90 CD |  if_b	jmp	#LR__3333
26924     16 31 02 F6 | 	mov	local06, local04
26928                 | LR__3332
26928     13 33 02 F6 | 	mov	local07, local01
2692c     13 35 02 F6 | 	mov	local08, local01
26930     13 32 46 F7 | 	zerox	local07, #19
26934     14 34 46 F0 | 	shr	local08, #20
26938     02 34 66 F0 | 	shl	local08, #2
2693c     ED 34 02 F1 | 	add	local08, __methods__
26940     1A 35 02 FB | 	rdlong	local08, local08
26944     15 13 C2 FA | 	rdbyte	arg01, local03
26948     F2 36 02 F6 | 	mov	local09, objptr
2694c     19 E5 01 F6 | 	mov	objptr, local07
26950     01 2A 06 F1 | 	add	local03, #1
26954     2D 34 62 FD | 	call	local08
26958     1B E5 01 F6 | 	mov	objptr, local09
2695c     FD 36 02 F6 | 	mov	local09, result1
26960     00 36 56 F2 | 	cmps	local09, #0 wc
26964     1B FB 01 C6 |  if_b	mov	result1, local09
26968     30 00 90 CD |  if_b	jmp	#LR__3334
2696c     1B 2F 02 F1 | 	add	local05, local09
26970     ED 31 6E FB | 	djnz	local06, #LR__3332
26974                 | LR__3333
26974     14 15 02 F6 | 	mov	arg02, local02
26978     16 17 02 F6 | 	mov	arg03, local04
2697c     13 13 02 F6 | 	mov	arg01, local01
26980     01 18 06 F6 | 	mov	arg04, #1
26984     40 49 B0 FD | 	call	#__system___fmtpad
26988     FD 36 02 F6 | 	mov	local09, result1
2698c     00 36 56 F2 | 	cmps	local09, #0 wc
26990     1B FB 01 C6 |  if_b	mov	result1, local09
26994     1B 2F 02 31 |  if_ae	add	local05, local09
26998     17 FB 01 36 |  if_ae	mov	result1, local05
2699c                 | LR__3334
2699c     A7 F0 03 F6 | 	mov	ptra, fp
269a0     B2 00 A0 FD | 	call	#popregs_
269a4                 | __system___fmtstr_ret
269a4     2D 00 64 FD | 	ret
269a8                 | 
269a8                 | __system___fmtnum
269a8     0B 4A 05 F6 | 	mov	COUNT_, #11
269ac     A8 00 A0 FD | 	call	#pushregs_
269b0     09 27 02 F6 | 	mov	local01, arg01
269b4     0A 29 02 F6 | 	mov	local02, arg02
269b8     0B 2B 02 F6 | 	mov	local03, arg03
269bc     0C 2D 02 F6 | 	mov	local04, arg04
269c0     F8 2F 02 F6 | 	mov	local05, ptra
269c4     17 31 02 F6 | 	mov	local06, local05
269c8     00 32 06 F6 | 	mov	local07, #0
269cc     14 35 02 F6 | 	mov	local08, local02
269d0     10 34 46 F0 | 	shr	local08, #16
269d4     3F 34 06 F5 | 	and	local08, #63
269d8     14 37 E2 F8 | 	getbyte	local09, local02, #0
269dc     14 39 02 F6 | 	mov	local10, local02
269e0     1A 38 46 F0 | 	shr	local10, #26
269e4     03 38 06 F5 | 	and	local10, #3
269e8     1C 3B 02 F6 | 	mov	local11, local10
269ec     01 34 56 F2 | 	cmps	local08, #1 wc
269f0     44 F0 07 F1 | 	add	ptra, #68
269f4     01 34 86 31 |  if_ae	sub	local08, #1
269f8     41 36 56 F2 | 	cmps	local09, #65 wc
269fc     00 36 0E C2 |  if_b	cmp	local09, #0 wz
26a00     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
26a04     03 3A 0E F2 | 	cmp	local11, #3 wz
26a08     00 3A 06 A6 |  if_e	mov	local11, #0
26a0c     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
26a10     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
26a14     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
26a18     00 3A 0E F2 | 	cmp	local11, #0 wz
26a1c     4C 00 90 AD |  if_e	jmp	#LR__3343
26a20     01 32 06 F6 | 	mov	local07, #1
26a24     1B 35 0A F2 | 	cmp	local08, local09 wz
26a28     18 00 90 5D |  if_ne	jmp	#LR__3341
26a2c     05 34 6E FB | 	djnz	local08, #LR__3340
26a30     13 13 02 F6 | 	mov	arg01, local01
26a34     14 15 02 F6 | 	mov	arg02, local02
26a38     23 16 06 F6 | 	mov	arg03, #35
26a3c     24 FE BF FD | 	call	#__system___fmtchar
26a40     88 00 90 FD | 	jmp	#LR__3347
26a44                 | LR__3340
26a44                 | LR__3341
26a44     02 3A 0E F2 | 	cmp	local11, #2 wz
26a48     18 39 02 A6 |  if_e	mov	local10, local06
26a4c     01 30 06 A1 |  if_e	add	local06, #1
26a50     1C 41 48 AC |  if_e	wrbyte	#32, local10
26a54     14 00 90 AD |  if_e	jmp	#LR__3342
26a58     04 3A 0E F2 | 	cmp	local11, #4 wz
26a5c     18 5B 48 AC |  if_e	wrbyte	#45, local06
26a60     01 30 06 A1 |  if_e	add	local06, #1
26a64     18 57 48 5C |  if_ne	wrbyte	#43, local06
26a68     01 30 06 51 |  if_ne	add	local06, #1
26a6c                 | LR__3342
26a6c                 | LR__3343
26a6c     18 13 02 F6 | 	mov	arg01, local06
26a70     15 15 02 F6 | 	mov	arg02, local03
26a74     16 17 02 F6 | 	mov	arg03, local04
26a78     1A 19 02 F6 | 	mov	arg04, local08
26a7c     00 1A 06 F6 | 	mov	arg05, #0
26a80     1D 28 2E F4 | 	testbn	local02, #29 wz
26a84     01 1A 06 56 |  if_ne	mov	arg05, #1
26a88     04 49 B0 FD | 	call	#__system___uitoa
26a8c     FD 32 02 F1 | 	add	local07, result1
26a90     1B 33 5A F2 | 	cmps	local07, local09 wcz
26a94     24 00 90 ED |  if_be	jmp	#LR__3346
26a98     97 0E 48 FB | 	callpa	#(@LR__3345-@LR__3344)>>2,fcache_load_ptr_
26a9c                 | LR__3344
26a9c     1B 39 02 F6 | 	mov	local10, local09
26aa0     01 38 56 F2 | 	cmps	local10, #1 wc
26aa4     01 36 86 F1 | 	sub	local09, #1
26aa8     18 39 02 36 |  if_ae	mov	local10, local06
26aac     01 30 06 31 |  if_ae	add	local06, #1
26ab0     1C 47 48 3C |  if_ae	wrbyte	#35, local10
26ab4     E4 FF 9F 3D |  if_ae	jmp	#LR__3344
26ab8                 | LR__3345
26ab8     18 01 48 FC | 	wrbyte	#0, local06
26abc                 | LR__3346
26abc     13 13 02 F6 | 	mov	arg01, local01
26ac0     14 15 02 F6 | 	mov	arg02, local02
26ac4     17 17 02 F6 | 	mov	arg03, local05
26ac8     F0 FD BF FD | 	call	#__system___fmtstr
26acc                 | LR__3347
26acc     A7 F0 03 F6 | 	mov	ptra, fp
26ad0     B2 00 A0 FD | 	call	#popregs_
26ad4                 | __system___fmtnum_ret
26ad4     2D 00 64 FD | 	ret
26ad8                 | 
26ad8                 | __system___fmtfloat
26ad8     10 4A 05 F6 | 	mov	COUNT_, #16
26adc     A8 00 A0 FD | 	call	#pushregs_
26ae0     24 F1 07 F1 | 	add	ptra, #292
26ae4     04 4E 05 F1 | 	add	fp, #4
26ae8     A7 12 62 FC | 	wrlong	arg01, fp
26aec     04 4E 05 F1 | 	add	fp, #4
26af0     A7 14 62 FC | 	wrlong	arg02, fp
26af4     04 4E 05 F1 | 	add	fp, #4
26af8     A7 16 62 FC | 	wrlong	arg03, fp
26afc     04 4E 05 F1 | 	add	fp, #4
26b00     A7 18 62 FC | 	wrlong	arg04, fp
26b04     0C 4E 05 F1 | 	add	fp, #12
26b08     A7 14 68 FC | 	wrlong	#10, fp
26b0c     08 4E 05 F1 | 	add	fp, #8
26b10     A7 00 68 FC | 	wrlong	#0, fp
26b14     08 4E 05 F1 | 	add	fp, #8
26b18     A7 00 68 FC | 	wrlong	#0, fp
26b1c     08 4E 05 F1 | 	add	fp, #8
26b20     A7 00 68 FC | 	wrlong	#0, fp
26b24     04 4E 05 F1 | 	add	fp, #4
26b28     A7 04 68 FC | 	wrlong	#2, fp
26b2c     04 4E 05 F1 | 	add	fp, #4
26b30     A7 00 68 FC | 	wrlong	#0, fp
26b34     04 4E 05 F1 | 	add	fp, #4
26b38     A7 00 68 FC | 	wrlong	#0, fp
26b3c     04 4E 05 F1 | 	add	fp, #4
26b40     A7 00 68 FC | 	wrlong	#0, fp
26b44     04 4E 05 F1 | 	add	fp, #4
26b48     A7 00 68 FC | 	wrlong	#0, fp
26b4c     18 4E 05 F1 | 	add	fp, #24
26b50     A7 00 68 FC | 	wrlong	#0, fp
26b54     68 4E 05 F1 | 	add	fp, #104
26b58     A7 26 02 F6 | 	mov	local01, fp
26b5c     08 4E 85 F1 | 	sub	fp, #8
26b60     A7 26 62 FC | 	wrlong	local01, fp
26b64     04 4E 05 F1 | 	add	fp, #4
26b68     A7 26 62 FC | 	wrlong	local01, fp
26b6c     BC 4E 85 F1 | 	sub	fp, #188
26b70     A7 26 02 FB | 	rdlong	local01, fp
26b74     10 26 46 F0 | 	shr	local01, #16
26b78     3F 26 06 F5 | 	and	local01, #63
26b7c     B0 4E 05 F1 | 	add	fp, #176
26b80     A7 26 62 FC | 	wrlong	local01, fp
26b84     B0 4E 85 F1 | 	sub	fp, #176
26b88     A7 26 02 FB | 	rdlong	local01, fp
26b8c     1C 26 46 F0 | 	shr	local01, #28
26b90     01 26 06 F5 | 	and	local01, #1
26b94     08 4F 05 F1 | 	add	fp, #264
26b98     A7 26 62 FC | 	wrlong	local01, fp
26b9c     58 4E 85 F1 | 	sub	fp, #88
26ba0     A7 26 0A FB | 	rdlong	local01, fp wz
26ba4     B8 4E 85 F1 | 	sub	fp, #184
26ba8     3C 00 90 5D |  if_ne	jmp	#LR__3351
26bac     10 4E 05 F1 | 	add	fp, #16
26bb0     A7 26 02 FB | 	rdlong	local01, fp
26bb4     10 4E 85 F1 | 	sub	fp, #16
26bb8     61 26 0E F2 | 	cmp	local01, #97 wz
26bbc     18 00 90 5D |  if_ne	jmp	#LR__3350
26bc0     B8 4E 05 F1 | 	add	fp, #184
26bc4     A7 1A 68 FC | 	wrlong	#13, fp
26bc8     84 4E 85 F1 | 	sub	fp, #132
26bcc     A7 02 68 FC | 	wrlong	#1, fp
26bd0     34 4E 85 F1 | 	sub	fp, #52
26bd4     24 00 90 FD | 	jmp	#LR__3352
26bd8                 | LR__3350
26bd8     B8 4E 05 F1 | 	add	fp, #184
26bdc     A7 0C 68 FC | 	wrlong	#6, fp
26be0     B8 4E 85 F1 | 	sub	fp, #184
26be4     14 00 90 FD | 	jmp	#LR__3352
26be8                 | LR__3351
26be8     B8 4E 05 F1 | 	add	fp, #184
26bec     A7 26 02 FB | 	rdlong	local01, fp
26bf0     01 26 86 F1 | 	sub	local01, #1
26bf4     A7 26 62 FC | 	wrlong	local01, fp
26bf8     B8 4E 85 F1 | 	sub	fp, #184
26bfc                 | LR__3352
26bfc     08 4E 05 F1 | 	add	fp, #8
26c00     A7 26 02 FB | 	rdlong	local01, fp
26c04     16 26 46 F0 | 	shr	local01, #22
26c08     03 26 06 F5 | 	and	local01, #3
26c0c     04 4F 05 F1 | 	add	fp, #260
26c10     A7 26 62 FC | 	wrlong	local01, fp
26c14     04 4F 85 F1 | 	sub	fp, #260
26c18     A7 26 02 FB | 	rdlong	local01, fp
26c1c     1D 26 46 F0 | 	shr	local01, #29
26c20     01 26 06 F5 | 	and	local01, #1
26c24     B4 4E 05 F1 | 	add	fp, #180
26c28     A7 26 62 FC | 	wrlong	local01, fp
26c2c     B4 4E 85 F1 | 	sub	fp, #180
26c30     A7 26 02 FB | 	rdlong	local01, fp
26c34     13 27 EA F8 | 	getbyte	local01, local01, #1
26c38     60 4E 05 F1 | 	add	fp, #96
26c3c     A7 26 62 FC | 	wrlong	local01, fp
26c40     60 4E 85 F1 | 	sub	fp, #96
26c44     A7 26 02 FB | 	rdlong	local01, fp
26c48     13 27 E2 F8 | 	getbyte	local01, local01, #0
26c4c     64 4E 05 F1 | 	add	fp, #100
26c50     A7 26 62 FC | 	wrlong	local01, fp
26c54     00 26 06 F6 | 	mov	local01, #0
26c58     5C 4E 85 F1 | 	sub	fp, #92
26c5c     A7 1A 02 FB | 	rdlong	arg05, fp
26c60     65 1A 0E F2 | 	cmp	arg05, #101 wz
26c64     01 26 06 A6 |  if_e	mov	local01, #1
26c68     14 4E 05 F1 | 	add	fp, #20
26c6c     A7 26 62 FC | 	wrlong	local01, fp
26c70     98 4E 05 F1 | 	add	fp, #152
26c74     A7 28 0A FB | 	rdlong	local02, fp wz
26c78     45 26 06 56 |  if_ne	mov	local01, #69
26c7c     65 26 06 A6 |  if_e	mov	local01, #101
26c80     8C 4E 85 F1 | 	sub	fp, #140
26c84     A7 26 62 FC | 	wrlong	local01, fp
26c88     20 4E 85 F1 | 	sub	fp, #32
26c8c     A7 26 02 FB | 	rdlong	local01, fp
26c90     10 4E 85 F1 | 	sub	fp, #16
26c94     61 26 0E F2 | 	cmp	local01, #97 wz
26c98     4C 00 90 5D |  if_ne	jmp	#LR__3353
26c9c     24 4E 05 F1 | 	add	fp, #36
26ca0     A7 02 68 FC | 	wrlong	#1, fp
26ca4     98 4E 05 F1 | 	add	fp, #152
26ca8     A7 28 0A FB | 	rdlong	local02, fp wz
26cac     50 26 06 56 |  if_ne	mov	local01, #80
26cb0     70 26 06 A6 |  if_e	mov	local01, #112
26cb4     8C 4E 85 F1 | 	sub	fp, #140
26cb8     A7 26 62 FC | 	wrlong	local01, fp
26cbc     14 4E 85 F1 | 	sub	fp, #20
26cc0     A7 04 68 FC | 	wrlong	#2, fp
26cc4     1C 4E 05 F1 | 	add	fp, #28
26cc8     A7 02 68 FC | 	wrlong	#1, fp
26ccc     84 4E 05 F1 | 	add	fp, #132
26cd0     A7 28 0A FB | 	rdlong	local02, fp wz
26cd4     58 26 06 56 |  if_ne	mov	local01, #88
26cd8     78 26 06 A6 |  if_e	mov	local01, #120
26cdc     7C 4E 85 F1 | 	sub	fp, #124
26ce0     A7 26 62 FC | 	wrlong	local01, fp
26ce4     40 4E 85 F1 | 	sub	fp, #64
26ce8                 | LR__3353
26ce8     10 4E 05 F1 | 	add	fp, #16
26cec     A7 26 02 FB | 	rdlong	local01, fp
26cf0     10 4E 85 F1 | 	sub	fp, #16
26cf4     23 26 0E F2 | 	cmp	local01, #35 wz
26cf8     3C 00 90 5D |  if_ne	jmp	#LR__3356
26cfc     48 4E 05 F1 | 	add	fp, #72
26d00     A7 02 68 FC | 	wrlong	#1, fp
26d04     C8 4E 05 F1 | 	add	fp, #200
26d08     A7 26 0A FB | 	rdlong	local01, fp wz
26d0c     10 4F 85 F1 | 	sub	fp, #272
26d10     18 00 90 AD |  if_e	jmp	#LR__3354
26d14     10 4E 05 F1 | 	add	fp, #16
26d18     A7 CC 68 FC | 	wrlong	#102, fp
26d1c     00 4F 05 F1 | 	add	fp, #256
26d20     A7 00 68 FC | 	wrlong	#0, fp
26d24     10 4F 85 F1 | 	sub	fp, #272
26d28     0C 00 90 FD | 	jmp	#LR__3355
26d2c                 | LR__3354
26d2c     10 4F 05 F1 | 	add	fp, #272
26d30     A7 02 68 FC | 	wrlong	#1, fp
26d34     10 4F 85 F1 | 	sub	fp, #272
26d38                 | LR__3355
26d38                 | LR__3356
26d38     08 4E 05 F1 | 	add	fp, #8
26d3c     A7 26 02 FB | 	rdlong	local01, fp
26d40     1A 26 46 F0 | 	shr	local01, #26
26d44     03 26 06 F5 | 	and	local01, #3
26d48     5C 4E 05 F1 | 	add	fp, #92
26d4c     A7 26 62 FC | 	wrlong	local01, fp
26d50     58 4E 85 F1 | 	sub	fp, #88
26d54     A7 FA 01 FB | 	rdlong	result1, fp
26d58     0C 4E 85 F1 | 	sub	fp, #12
26d5c     1F FA 4D F0 | 	shr	result1, #31 wz
26d60     20 00 90 AD |  if_e	jmp	#LR__3357
26d64     2C 4E 05 F1 | 	add	fp, #44
26d68     A7 5A 68 FC | 	wrlong	#45, fp
26d6c     20 4E 85 F1 | 	sub	fp, #32
26d70     A7 FA 01 FB | 	rdlong	result1, fp
26d74     1F FA E5 F4 | 	bitnot	result1, #31
26d78     A7 FA 61 FC | 	wrlong	result1, fp
26d7c     0C 4E 85 F1 | 	sub	fp, #12
26d80     3C 00 90 FD | 	jmp	#LR__3359
26d84                 | LR__3357
26d84     64 4E 05 F1 | 	add	fp, #100
26d88     A7 26 02 FB | 	rdlong	local01, fp
26d8c     64 4E 85 F1 | 	sub	fp, #100
26d90     01 26 0E F2 | 	cmp	local01, #1 wz
26d94     2C 4E 05 A1 |  if_e	add	fp, #44
26d98     A7 56 68 AC |  if_e	wrlong	#43, fp
26d9c     2C 4E 85 A1 |  if_e	sub	fp, #44
26da0     1C 00 90 AD |  if_e	jmp	#LR__3358
26da4     64 4E 05 F1 | 	add	fp, #100
26da8     A7 26 02 FB | 	rdlong	local01, fp
26dac     64 4E 85 F1 | 	sub	fp, #100
26db0     02 26 0E F2 | 	cmp	local01, #2 wz
26db4     2C 4E 05 A1 |  if_e	add	fp, #44
26db8     A7 40 68 AC |  if_e	wrlong	#32, fp
26dbc     2C 4E 85 A1 |  if_e	sub	fp, #44
26dc0                 | LR__3358
26dc0                 | LR__3359
26dc0     08 4E 05 F1 | 	add	fp, #8
26dc4     A7 26 02 FB | 	rdlong	local01, fp
26dc8     18 26 46 F0 | 	shr	local01, #24
26dcc     03 26 06 F5 | 	and	local01, #3
26dd0     3C 4E 05 F1 | 	add	fp, #60
26dd4     A7 26 62 FC | 	wrlong	local01, fp
26dd8     00 26 06 F6 | 	mov	local01, #0
26ddc     18 4E 85 F1 | 	sub	fp, #24
26de0     A7 2A 0A FB | 	rdlong	local03, fp wz
26de4     2C 4E 85 F1 | 	sub	fp, #44
26de8     18 00 90 5D |  if_ne	jmp	#LR__3360
26dec     1C 4E 05 F1 | 	add	fp, #28
26df0     A7 2C 02 FB | 	rdlong	local04, fp
26df4     1C 4E 85 F1 | 	sub	fp, #28
26df8     16 2F 02 F6 | 	mov	local05, local04
26dfc     0A 2E 0E F2 | 	cmp	local05, #10 wz
26e00     04 00 90 AD |  if_e	jmp	#LR__3361
26e04                 | LR__3360
26e04     01 26 66 F5 | 	xor	local01, #1
26e08                 | LR__3361
26e08     3C 4E 05 F1 | 	add	fp, #60
26e0c     A7 26 62 FC | 	wrlong	local01, fp
26e10     3C 4E 85 F1 | 	sub	fp, #60
26e14     00 26 0E F2 | 	cmp	local01, #0 wz
26e18     0C 01 90 AD |  if_e	jmp	#LR__3363
26e1c     44 4E 05 F1 | 	add	fp, #68
26e20     A7 2E 02 FB | 	rdlong	local05, fp
26e24     44 4E 85 F1 | 	sub	fp, #68
26e28     17 2B 02 F6 | 	mov	local03, local05
26e2c     02 2A 0E F2 | 	cmp	local03, #2 wz
26e30     F4 00 90 5D |  if_ne	jmp	#LR__3363
26e34     0C 4F 05 F1 | 	add	fp, #268
26e38     A7 30 02 FB | 	rdlong	local06, fp
26e3c     0C 4F 85 F1 | 	sub	fp, #268
26e40     18 2D 02 F6 | 	mov	local04, local06
26e44     02 2C 0E F2 | 	cmp	local04, #2 wz
26e48     DC 00 90 AD |  if_e	jmp	#LR__3363
26e4c     C0 4E 05 F1 | 	add	fp, #192
26e50     A7 12 02 FB | 	rdlong	arg01, fp
26e54     94 4E 85 F1 | 	sub	fp, #148
26e58     A7 14 02 FB | 	rdlong	arg02, fp
26e5c     14 4E 05 F1 | 	add	fp, #20
26e60     A7 16 02 FB | 	rdlong	arg03, fp
26e64     40 4E 85 F1 | 	sub	fp, #64
26e68     8C 47 B0 FD | 	call	#__system__emitsign_0559
26e6c     14 4F 05 F1 | 	add	fp, #276
26e70     A7 FA 61 FC | 	wrlong	result1, fp
26e74     14 4F 85 F1 | 	sub	fp, #276
26e78     00 FA 55 F2 | 	cmps	result1, #0 wc
26e7c     14 4F 05 C1 |  if_b	add	fp, #276
26e80     A7 FA 01 CB |  if_b	rdlong	result1, fp
26e84     14 4F 85 C1 |  if_b	sub	fp, #276
26e88     6C 0B 90 CD |  if_b	jmp	#LR__3413
26e8c     C0 4E 05 F1 | 	add	fp, #192
26e90     A7 26 02 FB | 	rdlong	local01, fp
26e94     54 4E 05 F1 | 	add	fp, #84
26e98     A7 2E 02 FB | 	rdlong	local05, fp
26e9c     17 2B 02 F6 | 	mov	local03, local05
26ea0     17 27 02 F1 | 	add	local01, local05
26ea4     54 4E 85 F1 | 	sub	fp, #84
26ea8     A7 26 62 FC | 	wrlong	local01, fp
26eac     58 4E 85 F1 | 	sub	fp, #88
26eb0     A7 26 0A FB | 	rdlong	local01, fp wz
26eb4     68 4E 85 F1 | 	sub	fp, #104
26eb8     60 00 90 AD |  if_e	jmp	#LR__3362
26ebc     68 4E 05 F1 | 	add	fp, #104
26ec0     A7 26 02 FB | 	rdlong	local01, fp
26ec4     AC 4E 05 F1 | 	add	fp, #172
26ec8     A7 2A 02 FB | 	rdlong	local03, fp
26ecc     15 27 82 F1 | 	sub	local01, local03
26ed0     AC 4E 85 F1 | 	sub	fp, #172
26ed4     A7 26 62 FC | 	wrlong	local01, fp
26ed8     68 4E 85 F1 | 	sub	fp, #104
26edc     00 26 56 F2 | 	cmps	local01, #0 wc
26ee0     68 4E 05 C1 |  if_b	add	fp, #104
26ee4     A7 00 68 CC |  if_b	wrlong	#0, fp
26ee8     68 4E 85 C1 |  if_b	sub	fp, #104
26eec     08 4E 05 F1 | 	add	fp, #8
26ef0     A7 26 02 FB | 	rdlong	local01, fp
26ef4     E8 26 06 F4 | 	bitl	local01, #232
26ef8     A7 26 62 FC | 	wrlong	local01, fp
26efc     60 4E 05 F1 | 	add	fp, #96
26f00     A7 2E 02 FB | 	rdlong	local05, fp
26f04     17 2B 02 F6 | 	mov	local03, local05
26f08     08 2A 66 F0 | 	shl	local03, #8
26f0c     15 27 42 F5 | 	or	local01, local03
26f10     60 4E 85 F1 | 	sub	fp, #96
26f14     A7 26 62 FC | 	wrlong	local01, fp
26f18     08 4E 85 F1 | 	sub	fp, #8
26f1c                 | LR__3362
26f1c     3C 4E 05 F1 | 	add	fp, #60
26f20     A7 00 68 FC | 	wrlong	#0, fp
26f24     3C 4E 85 F1 | 	sub	fp, #60
26f28                 | LR__3363
26f28     0C 4E 05 F1 | 	add	fp, #12
26f2c     A7 12 02 FB | 	rdlong	arg01, fp
26f30     0C 4E 85 F1 | 	sub	fp, #12
26f34     EC 21 B0 FD | 	call	#__system____builtin_ilogb
26f38     FF FF 3F FF 
26f3c     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
26f40     50 00 90 5D |  if_ne	jmp	#LR__3365
26f44     2C 4E 05 F1 | 	add	fp, #44
26f48     A7 26 0A FB | 	rdlong	local01, fp wz
26f4c     2C 4E 85 F1 | 	sub	fp, #44
26f50     24 00 90 AD |  if_e	jmp	#LR__3364
26f54     C0 4E 05 F1 | 	add	fp, #192
26f58     A7 28 02 FB | 	rdlong	local02, fp
26f5c     14 2B 02 F6 | 	mov	local03, local02
26f60     01 2A 06 F1 | 	add	local03, #1
26f64     A7 2A 62 FC | 	wrlong	local03, fp
26f68     94 4E 85 F1 | 	sub	fp, #148
26f6c     A7 2C 02 FB | 	rdlong	local04, fp
26f70     2C 4E 85 F1 | 	sub	fp, #44
26f74     14 2D 42 FC | 	wrbyte	local04, local02
26f78                 | LR__3364
26f78     C0 4E 05 F1 | 	add	fp, #192
26f7c     A7 12 02 FB | 	rdlong	arg01, fp
26f80     C0 4E 85 F1 | 	sub	fp, #192
26f84     AA 01 00 FF 
26f88     96 14 06 F6 | 	mov	arg02, ##@LR__5361
26f8c     AC E9 BF FD | 	call	#__system____builtin_strcpy
26f90     A4 08 90 FD | 	jmp	#LR__3401
26f94                 | LR__3365
26f94     0C 4E 05 F1 | 	add	fp, #12
26f98     A7 28 02 FB | 	rdlong	local02, fp
26f9c     0C 4E 85 F1 | 	sub	fp, #12
26fa0     14 13 02 F6 | 	mov	arg01, local02
26fa4     7C 21 B0 FD | 	call	#__system____builtin_ilogb
26fa8     00 00 40 FF 
26fac     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
26fb0     50 00 90 5D |  if_ne	jmp	#LR__3367
26fb4     2C 4E 05 F1 | 	add	fp, #44
26fb8     A7 26 0A FB | 	rdlong	local01, fp wz
26fbc     2C 4E 85 F1 | 	sub	fp, #44
26fc0     24 00 90 AD |  if_e	jmp	#LR__3366
26fc4     C0 4E 05 F1 | 	add	fp, #192
26fc8     A7 28 02 FB | 	rdlong	local02, fp
26fcc     14 2B 02 F6 | 	mov	local03, local02
26fd0     01 2A 06 F1 | 	add	local03, #1
26fd4     A7 2A 62 FC | 	wrlong	local03, fp
26fd8     94 4E 85 F1 | 	sub	fp, #148
26fdc     A7 2C 02 FB | 	rdlong	local04, fp
26fe0     2C 4E 85 F1 | 	sub	fp, #44
26fe4     14 2D 42 FC | 	wrbyte	local04, local02
26fe8                 | LR__3366
26fe8     C0 4E 05 F1 | 	add	fp, #192
26fec     A7 12 02 FB | 	rdlong	arg01, fp
26ff0     C0 4E 85 F1 | 	sub	fp, #192
26ff4     AA 01 00 FF 
26ff8     9A 14 06 F6 | 	mov	arg02, ##@LR__5362
26ffc     3C E9 BF FD | 	call	#__system____builtin_strcpy
27000     34 08 90 FD | 	jmp	#LR__3401
27004                 | LR__3367
27004     10 4E 05 F1 | 	add	fp, #16
27008     A7 26 02 FB | 	rdlong	local01, fp
2700c     10 4E 85 F1 | 	sub	fp, #16
27010     67 26 0E F2 | 	cmp	local01, #103 wz
27014     10 4E 05 51 |  if_ne	add	fp, #16
27018     A7 2A 02 5B |  if_ne	rdlong	local03, fp
2701c     10 4E 85 51 |  if_ne	sub	fp, #16
27020     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
27024     94 01 90 5D |  if_ne	jmp	#LR__3372
27028     0C 4E 05 F1 | 	add	fp, #12
2702c     A7 12 02 FB | 	rdlong	arg01, fp
27030     08 4E 05 F1 | 	add	fp, #8
27034     A7 14 02 F6 | 	mov	arg02, fp
27038     0C 4E 05 F1 | 	add	fp, #12
2703c     A7 16 02 F6 | 	mov	arg03, fp
27040     98 4E 05 F1 | 	add	fp, #152
27044     A7 18 02 FB | 	rdlong	arg04, fp
27048     9C 4E 85 F1 | 	sub	fp, #156
2704c     A7 1A 02 FB | 	rdlong	arg05, fp
27050     1C 4E 85 F1 | 	sub	fp, #28
27054     AC 43 B0 FD | 	call	#__system__disassemble_0557
27058     10 4E 05 F1 | 	add	fp, #16
2705c     A7 26 02 FB | 	rdlong	local01, fp
27060     10 4E 85 F1 | 	sub	fp, #16
27064     23 26 0E F2 | 	cmp	local01, #35 wz
27068     A0 00 90 5D |  if_ne	jmp	#LR__3369
2706c     20 4E 05 F1 | 	add	fp, #32
27070     A7 26 02 FB | 	rdlong	local01, fp
27074     98 4E 05 F1 | 	add	fp, #152
27078     A7 2A 02 FB | 	rdlong	local03, fp
2707c     B8 4E 85 F1 | 	sub	fp, #184
27080     15 27 5A F2 | 	cmps	local01, local03 wcz
27084     24 4E 05 11 |  if_a	add	fp, #36
27088     A7 02 68 1C |  if_a	wrlong	#1, fp
2708c     24 4E 85 11 |  if_a	sub	fp, #36
27090     A4 01 90 1D |  if_a	jmp	#LR__3375
27094     20 4E 05 F1 | 	add	fp, #32
27098     A7 26 02 FB | 	rdlong	local01, fp
2709c     20 4E 85 F1 | 	sub	fp, #32
270a0     00 26 56 F2 | 	cmps	local01, #0 wc
270a4     2C 00 90 3D |  if_ae	jmp	#LR__3368
270a8     B8 4E 05 F1 | 	add	fp, #184
270ac     A7 26 02 FB | 	rdlong	local01, fp
270b0     13 27 62 F6 | 	neg	local01, local01
270b4     98 4E 85 F1 | 	sub	fp, #152
270b8     A7 2A 02 FB | 	rdlong	local03, fp
270bc     20 4E 85 F1 | 	sub	fp, #32
270c0     13 2B 5A F2 | 	cmps	local03, local01 wcz
270c4     24 4E 05 E1 |  if_be	add	fp, #36
270c8     A7 02 68 EC |  if_be	wrlong	#1, fp
270cc     24 4E 85 E1 |  if_be	sub	fp, #36
270d0     64 01 90 FD | 	jmp	#LR__3375
270d4                 | LR__3368
270d4     20 4E 05 F1 | 	add	fp, #32
270d8     A7 26 02 FB | 	rdlong	local01, fp
270dc     20 4E 85 F1 | 	sub	fp, #32
270e0     01 26 56 F2 | 	cmps	local01, #1 wc
270e4     50 01 90 CD |  if_b	jmp	#LR__3375
270e8     B8 4E 05 F1 | 	add	fp, #184
270ec     A7 26 02 FB | 	rdlong	local01, fp
270f0     98 4E 85 F1 | 	sub	fp, #152
270f4     A7 2A 02 FB | 	rdlong	local03, fp
270f8     15 27 82 F1 | 	sub	local01, local03
270fc     98 4E 05 F1 | 	add	fp, #152
27100     A7 26 62 FC | 	wrlong	local01, fp
27104     B8 4E 85 F1 | 	sub	fp, #184
27108     2C 01 90 FD | 	jmp	#LR__3375
2710c                 | LR__3369
2710c     00 26 06 F6 | 	mov	local01, #0
27110     08 4E 05 F1 | 	add	fp, #8
27114     A7 28 02 FB | 	rdlong	local02, fp
27118     1C 28 46 F0 | 	shr	local02, #28
2711c     01 28 0E F5 | 	and	local02, #1 wz
27120     01 26 06 A6 |  if_e	mov	local01, #1
27124     2C 4E 05 F1 | 	add	fp, #44
27128     A7 26 62 FC | 	wrlong	local01, fp
2712c     14 4E 85 F1 | 	sub	fp, #20
27130     A7 26 02 FB | 	rdlong	local01, fp
27134     98 4E 05 F1 | 	add	fp, #152
27138     A7 2A 02 FB | 	rdlong	local03, fp
2713c     B8 4E 85 F1 | 	sub	fp, #184
27140     15 27 52 F2 | 	cmps	local01, local03 wc
27144     18 00 90 3D |  if_ae	jmp	#LR__3370
27148     20 4E 05 F1 | 	add	fp, #32
2714c     A7 2C 02 FB | 	rdlong	local04, fp
27150     20 4E 85 F1 | 	sub	fp, #32
27154     FF FF 7F FF 
27158     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
2715c     10 00 90 3D |  if_ae	jmp	#LR__3371
27160                 | LR__3370
27160     24 4E 05 F1 | 	add	fp, #36
27164     A7 02 68 FC | 	wrlong	#1, fp
27168     24 4E 85 F1 | 	sub	fp, #36
2716c     C8 00 90 FD | 	jmp	#LR__3375
27170                 | LR__3371
27170     B8 4E 05 F1 | 	add	fp, #184
27174     A7 2C 02 FB | 	rdlong	local04, fp
27178     98 4E 85 F1 | 	sub	fp, #152
2717c     A7 2A 02 FB | 	rdlong	local03, fp
27180     15 2D 82 F1 | 	sub	local04, local03
27184     98 4E 05 F1 | 	add	fp, #152
27188     A7 2C 62 FC | 	wrlong	local04, fp
2718c     AC 4E 85 F1 | 	sub	fp, #172
27190     A7 12 02 FB | 	rdlong	arg01, fp
27194     08 4E 05 F1 | 	add	fp, #8
27198     A7 14 02 F6 | 	mov	arg02, fp
2719c     0C 4E 05 F1 | 	add	fp, #12
271a0     A7 16 02 F6 | 	mov	arg03, fp
271a4     16 19 62 F6 | 	neg	arg04, local04
271a8     04 4E 85 F1 | 	sub	fp, #4
271ac     A7 1A 02 FB | 	rdlong	arg05, fp
271b0     1C 4E 85 F1 | 	sub	fp, #28
271b4     4C 42 B0 FD | 	call	#__system__disassemble_0557
271b8     7C 00 90 FD | 	jmp	#LR__3375
271bc                 | LR__3372
271bc     24 4E 05 F1 | 	add	fp, #36
271c0     A7 26 0A FB | 	rdlong	local01, fp wz
271c4     24 4E 85 F1 | 	sub	fp, #36
271c8     34 00 90 AD |  if_e	jmp	#LR__3373
271cc     0C 4E 05 F1 | 	add	fp, #12
271d0     A7 12 02 FB | 	rdlong	arg01, fp
271d4     08 4E 05 F1 | 	add	fp, #8
271d8     A7 14 02 F6 | 	mov	arg02, fp
271dc     0C 4E 05 F1 | 	add	fp, #12
271e0     A7 16 02 F6 | 	mov	arg03, fp
271e4     98 4E 05 F1 | 	add	fp, #152
271e8     A7 18 02 FB | 	rdlong	arg04, fp
271ec     9C 4E 85 F1 | 	sub	fp, #156
271f0     A7 1A 02 FB | 	rdlong	arg05, fp
271f4     1C 4E 85 F1 | 	sub	fp, #28
271f8     08 42 B0 FD | 	call	#__system__disassemble_0557
271fc     38 00 90 FD | 	jmp	#LR__3374
27200                 | LR__3373
27200     0C 4E 05 F1 | 	add	fp, #12
27204     A7 12 02 FB | 	rdlong	arg01, fp
27208     08 4E 05 F1 | 	add	fp, #8
2720c     A7 14 02 F6 | 	mov	arg02, fp
27210     0C 4E 05 F1 | 	add	fp, #12
27214     A7 16 02 F6 | 	mov	arg03, fp
27218     98 4E 05 F1 | 	add	fp, #152
2721c     A7 2C 02 FB | 	rdlong	local04, fp
27220     01 2C 06 F1 | 	add	local04, #1
27224     16 19 62 F6 | 	neg	arg04, local04
27228     9C 4E 85 F1 | 	sub	fp, #156
2722c     A7 1A 02 FB | 	rdlong	arg05, fp
27230     1C 4E 85 F1 | 	sub	fp, #28
27234     CC 41 B0 FD | 	call	#__system__disassemble_0557
27238                 | LR__3374
27238                 | LR__3375
27238     1C 4E 05 F1 | 	add	fp, #28
2723c     A7 26 02 FB | 	rdlong	local01, fp
27240     1C 4E 85 F1 | 	sub	fp, #28
27244     02 26 0E F2 | 	cmp	local01, #2 wz
27248     4C 00 90 5D |  if_ne	jmp	#LR__3378
2724c     1C 4E 05 F1 | 	add	fp, #28
27250     A7 20 68 FC | 	wrlong	#16, fp
27254     1C 4E 85 F1 | 	sub	fp, #28
27258                 | LR__3376
27258     14 4E 05 F1 | 	add	fp, #20
2725c     A7 26 0A FB | 	rdlong	local01, fp wz
27260     14 4E 85 F1 | 	sub	fp, #20
27264     30 00 90 AD |  if_e	jmp	#LR__3377
27268     14 4E 05 F1 | 	add	fp, #20
2726c     A7 2A 02 FB | 	rdlong	local03, fp
27270     14 4E 85 F1 | 	sub	fp, #20
27274     00 80 00 FF 
27278     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
2727c     18 00 90 3D |  if_ae	jmp	#LR__3377
27280     14 4E 05 F1 | 	add	fp, #20
27284     A7 26 02 FB | 	rdlong	local01, fp
27288     01 26 66 F0 | 	shl	local01, #1
2728c     A7 26 62 FC | 	wrlong	local01, fp
27290     14 4E 85 F1 | 	sub	fp, #20
27294     C0 FF 9F FD | 	jmp	#LR__3376
27298                 | LR__3377
27298                 | LR__3378
27298     70 4E 05 F1 | 	add	fp, #112
2729c     A7 12 02 F6 | 	mov	arg01, fp
272a0     5C 4E 85 F1 | 	sub	fp, #92
272a4     A7 14 02 FB | 	rdlong	arg02, fp
272a8     08 4E 05 F1 | 	add	fp, #8
272ac     A7 16 02 FB | 	rdlong	arg03, fp
272b0     A0 4E 05 F1 | 	add	fp, #160
272b4     A7 1A 02 FB | 	rdlong	arg05, fp
272b8     BC 4E 85 F1 | 	sub	fp, #188
272bc     01 18 06 F6 | 	mov	arg04, #1
272c0     CC 40 B0 FD | 	call	#__system___uitoa
272c4     58 4E 05 F1 | 	add	fp, #88
272c8     A7 FA 61 FC | 	wrlong	result1, fp
272cc     38 4E 85 F1 | 	sub	fp, #56
272d0     A7 26 02 FB | 	rdlong	local01, fp
272d4     20 4E 85 F1 | 	sub	fp, #32
272d8     00 26 56 F2 | 	cmps	local01, #0 wc
272dc     50 00 90 3D |  if_ae	jmp	#LR__3379
272e0     60 4E 05 F1 | 	add	fp, #96
272e4     A7 5A 68 FC | 	wrlong	#45, fp
272e8     50 4E 05 F1 | 	add	fp, #80
272ec     A7 12 02 F6 | 	mov	arg01, fp
272f0     90 4E 85 F1 | 	sub	fp, #144
272f4     A7 2A 02 FB | 	rdlong	local03, fp
272f8     15 15 62 F6 | 	neg	arg02, local03
272fc     18 4E 05 F1 | 	add	fp, #24
27300     A7 18 02 FB | 	rdlong	arg04, fp
27304     84 4E 05 F1 | 	add	fp, #132
27308     A7 30 02 FB | 	rdlong	local06, fp
2730c     BC 4E 85 F1 | 	sub	fp, #188
27310     18 2D 02 F6 | 	mov	local04, local06
27314     0A 16 06 F6 | 	mov	arg03, #10
27318     16 1B 02 F6 | 	mov	arg05, local04
2731c     70 40 B0 FD | 	call	#__system___uitoa
27320     5C 4E 05 F1 | 	add	fp, #92
27324     A7 FA 61 FC | 	wrlong	result1, fp
27328     5C 4E 85 F1 | 	sub	fp, #92
2732c     48 00 90 FD | 	jmp	#LR__3380
27330                 | LR__3379
27330     60 4E 05 F1 | 	add	fp, #96
27334     A7 56 68 FC | 	wrlong	#43, fp
27338     50 4E 05 F1 | 	add	fp, #80
2733c     A7 12 02 F6 | 	mov	arg01, fp
27340     90 4E 85 F1 | 	sub	fp, #144
27344     A7 14 02 FB | 	rdlong	arg02, fp
27348     18 4E 05 F1 | 	add	fp, #24
2734c     A7 18 02 FB | 	rdlong	arg04, fp
27350     84 4E 05 F1 | 	add	fp, #132
27354     A7 30 02 FB | 	rdlong	local06, fp
27358     BC 4E 85 F1 | 	sub	fp, #188
2735c     18 2D 02 F6 | 	mov	local04, local06
27360     0A 16 06 F6 | 	mov	arg03, #10
27364     16 1B 02 F6 | 	mov	arg05, local04
27368     24 40 B0 FD | 	call	#__system___uitoa
2736c     5C 4E 05 F1 | 	add	fp, #92
27370     A7 FA 61 FC | 	wrlong	result1, fp
27374     5C 4E 85 F1 | 	sub	fp, #92
27378                 | LR__3380
27378     24 4E 05 F1 | 	add	fp, #36
2737c     A7 26 0A FB | 	rdlong	local01, fp wz
27380     24 4E 85 F1 | 	sub	fp, #36
27384     2C 00 90 AD |  if_e	jmp	#LR__3381
27388     50 4E 05 F1 | 	add	fp, #80
2738c     A7 00 68 FC | 	wrlong	#0, fp
27390     04 4E 85 F1 | 	sub	fp, #4
27394     A7 00 68 FC | 	wrlong	#0, fp
27398     6C 4E 05 F1 | 	add	fp, #108
2739c     A7 26 02 FB | 	rdlong	local01, fp
273a0     01 26 06 F1 | 	add	local01, #1
273a4     64 4E 85 F1 | 	sub	fp, #100
273a8     A7 26 62 FC | 	wrlong	local01, fp
273ac     54 4E 85 F1 | 	sub	fp, #84
273b0     88 00 90 FD | 	jmp	#LR__3384
273b4                 | LR__3381
273b4     20 4E 05 F1 | 	add	fp, #32
273b8     A7 26 02 FB | 	rdlong	local01, fp
273bc     20 4E 85 F1 | 	sub	fp, #32
273c0     00 26 56 F2 | 	cmps	local01, #0 wc
273c4     40 00 90 3D |  if_ae	jmp	#LR__3382
273c8     20 4E 05 F1 | 	add	fp, #32
273cc     A7 28 02 FB | 	rdlong	local02, fp
273d0     30 4E 05 F1 | 	add	fp, #48
273d4     A7 28 62 FC | 	wrlong	local02, fp
273d8     04 4E 85 F1 | 	sub	fp, #4
273dc     A7 28 62 FC | 	wrlong	local02, fp
273e0     2C 4E 85 F1 | 	sub	fp, #44
273e4     A7 26 02 FB | 	rdlong	local01, fp
273e8     98 4E 05 F1 | 	add	fp, #152
273ec     A7 2A 02 FB | 	rdlong	local03, fp
273f0     15 27 02 F1 | 	add	local01, local03
273f4     01 26 06 F1 | 	add	local01, #1
273f8     64 4E 85 F1 | 	sub	fp, #100
273fc     A7 26 62 FC | 	wrlong	local01, fp
27400     54 4E 85 F1 | 	sub	fp, #84
27404     34 00 90 FD | 	jmp	#LR__3383
27408                 | LR__3382
27408     4C 4E 05 F1 | 	add	fp, #76
2740c     A7 00 68 FC | 	wrlong	#0, fp
27410     2C 4E 85 F1 | 	sub	fp, #44
27414     A7 26 02 FB | 	rdlong	local01, fp
27418     30 4E 05 F1 | 	add	fp, #48
2741c     A7 26 62 FC | 	wrlong	local01, fp
27420     68 4E 05 F1 | 	add	fp, #104
27424     A7 2A 02 FB | 	rdlong	local03, fp
27428     15 27 02 F1 | 	add	local01, local03
2742c     01 26 06 F1 | 	add	local01, #1
27430     64 4E 85 F1 | 	sub	fp, #100
27434     A7 26 62 FC | 	wrlong	local01, fp
27438     54 4E 85 F1 | 	sub	fp, #84
2743c                 | LR__3383
2743c                 | LR__3384
2743c     54 4E 05 F1 | 	add	fp, #84
27440     A7 26 02 FB | 	rdlong	local01, fp
27444     08 4E 85 F1 | 	sub	fp, #8
27448     A7 2A 02 FB | 	rdlong	local03, fp
2744c     15 27 82 F1 | 	sub	local01, local03
27450     01 26 06 F1 | 	add	local01, #1
27454     24 4E 85 F1 | 	sub	fp, #36
27458     A7 26 62 FC | 	wrlong	local01, fp
2745c     04 4E 05 F1 | 	add	fp, #4
27460     A7 26 0A FB | 	rdlong	local01, fp wz
27464     2C 4E 85 F1 | 	sub	fp, #44
27468     28 4E 05 51 |  if_ne	add	fp, #40
2746c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
27470     01 2A 06 51 |  if_ne	add	local03, #1
27474     A7 2A 62 5C |  if_ne	wrlong	local03, fp
27478     28 4E 85 51 |  if_ne	sub	fp, #40
2747c     1C 4E 05 F1 | 	add	fp, #28
27480     A7 26 02 FB | 	rdlong	local01, fp
27484     1C 4E 85 F1 | 	sub	fp, #28
27488     10 26 0E F2 | 	cmp	local01, #16 wz
2748c     28 4E 05 A1 |  if_e	add	fp, #40
27490     A7 26 02 AB |  if_e	rdlong	local01, fp
27494     02 26 06 A1 |  if_e	add	local01, #2
27498     A7 26 62 AC |  if_e	wrlong	local01, fp
2749c     28 4E 85 A1 |  if_e	sub	fp, #40
274a0     24 4E 05 F1 | 	add	fp, #36
274a4     A7 26 0A FB | 	rdlong	local01, fp wz
274a8     24 4E 85 F1 | 	sub	fp, #36
274ac     28 00 90 AD |  if_e	jmp	#LR__3385
274b0     28 4E 05 F1 | 	add	fp, #40
274b4     A7 26 02 FB | 	rdlong	local01, fp
274b8     02 2A 06 F6 | 	mov	local03, #2
274bc     34 4E 05 F1 | 	add	fp, #52
274c0     A7 2E 02 FB | 	rdlong	local05, fp
274c4     17 2B 02 F1 | 	add	local03, local05
274c8     15 27 02 F1 | 	add	local01, local03
274cc     34 4E 85 F1 | 	sub	fp, #52
274d0     A7 26 62 FC | 	wrlong	local01, fp
274d4     28 4E 85 F1 | 	sub	fp, #40
274d8                 | LR__3385
274d8     28 4E 05 F1 | 	add	fp, #40
274dc     A7 26 02 FB | 	rdlong	local01, fp
274e0     28 4E 85 F1 | 	sub	fp, #40
274e4     41 26 56 F2 | 	cmps	local01, #65 wc
274e8     01 FA 65 36 |  if_ae	neg	result1, #1
274ec     08 05 90 3D |  if_ae	jmp	#LR__3413
274f0     3C 4E 05 F1 | 	add	fp, #60
274f4     A7 26 0A FB | 	rdlong	local01, fp wz
274f8     3C 4E 85 F1 | 	sub	fp, #60
274fc     60 00 90 AD |  if_e	jmp	#LR__3386
27500     C0 4E 05 F1 | 	add	fp, #192
27504     A7 12 02 FB | 	rdlong	arg01, fp
27508     94 4E 85 F1 | 	sub	fp, #148
2750c     A7 14 02 FB | 	rdlong	arg02, fp
27510     14 4E 05 F1 | 	add	fp, #20
27514     A7 16 02 FB | 	rdlong	arg03, fp
27518     40 4E 85 F1 | 	sub	fp, #64
2751c     D8 40 B0 FD | 	call	#__system__emitsign_0559
27520     18 4F 05 F1 | 	add	fp, #280
27524     A7 FA 61 FC | 	wrlong	result1, fp
27528     18 4F 85 F1 | 	sub	fp, #280
2752c     00 FA 55 F2 | 	cmps	result1, #0 wc
27530     18 4F 05 C1 |  if_b	add	fp, #280
27534     A7 FA 01 CB |  if_b	rdlong	result1, fp
27538     18 4F 85 C1 |  if_b	sub	fp, #280
2753c     B8 04 90 CD |  if_b	jmp	#LR__3413
27540     C0 4E 05 F1 | 	add	fp, #192
27544     A7 26 02 FB | 	rdlong	local01, fp
27548     58 4E 05 F1 | 	add	fp, #88
2754c     A7 2A 02 FB | 	rdlong	local03, fp
27550     15 27 02 F1 | 	add	local01, local03
27554     58 4E 85 F1 | 	sub	fp, #88
27558     A7 26 62 FC | 	wrlong	local01, fp
2755c     C0 4E 85 F1 | 	sub	fp, #192
27560                 | LR__3386
27560     4C 4E 05 F1 | 	add	fp, #76
27564     A7 26 02 FB | 	rdlong	local01, fp
27568     34 4E 85 F1 | 	sub	fp, #52
2756c     A7 26 62 FC | 	wrlong	local01, fp
27570     18 4E 85 F1 | 	sub	fp, #24
27574     97 9E 48 FB | 	callpa	#(@LR__3392-@LR__3387)>>2,fcache_load_ptr_
27578                 | LR__3387
27578     18 4E 05 F1 | 	add	fp, #24
2757c     A7 28 02 FB | 	rdlong	local02, fp
27580     3C 4E 05 F1 | 	add	fp, #60
27584     A7 2E 02 FB | 	rdlong	local05, fp
27588     54 4E 85 F1 | 	sub	fp, #84
2758c     17 29 52 F2 | 	cmps	local02, local05 wc
27590     20 01 90 3D |  if_ae	jmp	#LR__3393
27594     18 4E 05 F1 | 	add	fp, #24
27598     A7 30 02 FB | 	rdlong	local06, fp
2759c     18 4E 85 F1 | 	sub	fp, #24
275a0     00 30 56 F2 | 	cmps	local06, #0 wc
275a4     58 00 90 CD |  if_b	jmp	#LR__3388
275a8     18 4E 05 F1 | 	add	fp, #24
275ac     A7 30 02 FB | 	rdlong	local06, fp
275b0     40 4E 05 F1 | 	add	fp, #64
275b4     A7 32 02 FB | 	rdlong	local07, fp
275b8     58 4E 85 F1 | 	sub	fp, #88
275bc     19 31 52 F2 | 	cmps	local06, local07 wc
275c0     3C 00 90 3D |  if_ae	jmp	#LR__3388
275c4     C0 4E 05 F1 | 	add	fp, #192
275c8     A7 34 02 FB | 	rdlong	local08, fp
275cc     1A 33 02 F6 | 	mov	local07, local08
275d0     01 32 06 F1 | 	add	local07, #1
275d4     A7 32 62 FC | 	wrlong	local07, fp
275d8     A8 4E 85 F1 | 	sub	fp, #168
275dc     A7 32 02 FB | 	rdlong	local07, fp
275e0     19 37 02 F6 | 	mov	local09, local07
275e4     58 4E 05 F1 | 	add	fp, #88
275e8     A7 38 02 F6 | 	mov	local10, fp
275ec     A7 36 02 F1 | 	add	local09, fp
275f0     1B 3B C2 FA | 	rdbyte	local11, local09
275f4     1A 3B 42 FC | 	wrbyte	local11, local08
275f8     70 4E 85 F1 | 	sub	fp, #112
275fc     20 00 90 FD | 	jmp	#LR__3389
27600                 | LR__3388
27600     C0 4E 05 F1 | 	add	fp, #192
27604     A7 34 02 FB | 	rdlong	local08, fp
27608     1A 37 02 F6 | 	mov	local09, local08
2760c     01 36 06 F1 | 	add	local09, #1
27610     A7 36 62 FC | 	wrlong	local09, fp
27614     C0 4E 85 F1 | 	sub	fp, #192
27618     30 36 06 F6 | 	mov	local09, #48
2761c     1A 61 48 FC | 	wrbyte	#48, local08
27620                 | LR__3389
27620     18 4E 05 F1 | 	add	fp, #24
27624     A7 30 02 FB | 	rdlong	local06, fp
27628     38 4E 05 F1 | 	add	fp, #56
2762c     A7 3C 02 FB | 	rdlong	local12, fp
27630     50 4E 85 F1 | 	sub	fp, #80
27634     1E 31 0A F2 | 	cmp	local06, local12 wz
27638     5C 00 90 5D |  if_ne	jmp	#LR__3391
2763c     10 4F 05 F1 | 	add	fp, #272
27640     A7 32 02 FB | 	rdlong	local07, fp
27644     10 4F 85 F1 | 	sub	fp, #272
27648     19 37 0A F6 | 	mov	local09, local07 wz
2764c     28 00 90 5D |  if_ne	jmp	#LR__3390
27650     54 4E 05 F1 | 	add	fp, #84
27654     A7 3A 02 FB | 	rdlong	local11, fp
27658     1D 39 02 F6 | 	mov	local10, local11
2765c     01 38 86 F1 | 	sub	local10, #1
27660     3C 4E 85 F1 | 	sub	fp, #60
27664     A7 3E 02 FB | 	rdlong	local13, fp
27668     18 4E 85 F1 | 	sub	fp, #24
2766c     1F 41 02 F6 | 	mov	local14, local13
27670     1C 41 52 F2 | 	cmps	local14, local10 wc
27674     20 00 90 3D |  if_ae	jmp	#LR__3391
27678                 | LR__3390
27678     C0 4E 05 F1 | 	add	fp, #192
2767c     A7 34 02 FB | 	rdlong	local08, fp
27680     1A 3D 02 F6 | 	mov	local12, local08
27684     01 3C 06 F1 | 	add	local12, #1
27688     A7 3C 62 FC | 	wrlong	local12, fp
2768c     C0 4E 85 F1 | 	sub	fp, #192
27690     2E 36 06 F6 | 	mov	local09, #46
27694     1A 5D 48 FC | 	wrbyte	#46, local08
27698                 | LR__3391
27698     18 4E 05 F1 | 	add	fp, #24
2769c     A7 42 02 FB | 	rdlong	local15, fp
276a0     21 3D 02 F6 | 	mov	local12, local15
276a4     01 3C 06 F1 | 	add	local12, #1
276a8     A7 3C 62 FC | 	wrlong	local12, fp
276ac     18 4E 85 F1 | 	sub	fp, #24
276b0     C4 FE 9F FD | 	jmp	#LR__3387
276b4                 | LR__3392
276b4                 | LR__3393
276b4     34 4E 05 F1 | 	add	fp, #52
276b8     A7 26 0A FB | 	rdlong	local01, fp wz
276bc     34 4E 85 F1 | 	sub	fp, #52
276c0     A0 00 90 AD |  if_e	jmp	#LR__3397
276c4     C0 4E 05 F1 | 	add	fp, #192
276c8     A7 26 02 FB | 	rdlong	local01, fp
276cc     01 26 86 F1 | 	sub	local01, #1
276d0     A7 26 62 FC | 	wrlong	local01, fp
276d4     C0 4E 85 F1 | 	sub	fp, #192
276d8     97 26 48 FB | 	callpa	#(@LR__3395-@LR__3394)>>2,fcache_load_ptr_
276dc                 | LR__3394
276dc     C0 4E 05 F1 | 	add	fp, #192
276e0     A7 26 02 FB | 	rdlong	local01, fp
276e4     04 4E 05 F1 | 	add	fp, #4
276e8     A7 2A 02 FB | 	rdlong	local03, fp
276ec     C4 4E 85 F1 | 	sub	fp, #196
276f0     15 27 5A F2 | 	cmps	local01, local03 wcz
276f4     30 00 90 ED |  if_be	jmp	#LR__3396
276f8     C0 4E 05 F1 | 	add	fp, #192
276fc     A7 30 02 FB | 	rdlong	local06, fp
27700     C0 4E 85 F1 | 	sub	fp, #192
27704     18 2D C2 FA | 	rdbyte	local04, local06
27708     30 2C 0E F2 | 	cmp	local04, #48 wz
2770c     18 00 90 5D |  if_ne	jmp	#LR__3396
27710     C0 4E 05 F1 | 	add	fp, #192
27714     A7 26 02 FB | 	rdlong	local01, fp
27718     01 26 86 F1 | 	sub	local01, #1
2771c     A7 26 62 FC | 	wrlong	local01, fp
27720     C0 4E 85 F1 | 	sub	fp, #192
27724     B4 FF 9F FD | 	jmp	#LR__3394
27728                 | LR__3395
27728                 | LR__3396
27728     C0 4E 05 F1 | 	add	fp, #192
2772c     A7 28 02 FB | 	rdlong	local02, fp
27730     C0 4E 85 F1 | 	sub	fp, #192
27734     14 27 C2 FA | 	rdbyte	local01, local02
27738     2E 26 0E F2 | 	cmp	local01, #46 wz
2773c     C0 4E 05 A1 |  if_e	add	fp, #192
27740     A7 26 02 AB |  if_e	rdlong	local01, fp
27744     01 26 86 A1 |  if_e	sub	local01, #1
27748     A7 26 62 AC |  if_e	wrlong	local01, fp
2774c     C0 4E 85 A1 |  if_e	sub	fp, #192
27750     C0 4E 05 F1 | 	add	fp, #192
27754     A7 2A 02 FB | 	rdlong	local03, fp
27758     01 2A 06 F1 | 	add	local03, #1
2775c     A7 2A 62 FC | 	wrlong	local03, fp
27760     C0 4E 85 F1 | 	sub	fp, #192
27764                 | LR__3397
27764     24 4E 05 F1 | 	add	fp, #36
27768     A7 26 0A FB | 	rdlong	local01, fp wz
2776c     24 4E 85 F1 | 	sub	fp, #36
27770     B4 00 90 AD |  if_e	jmp	#LR__3400
27774     C0 4E 05 F1 | 	add	fp, #192
27778     A7 28 02 FB | 	rdlong	local02, fp
2777c     14 2B 02 F6 | 	mov	local03, local02
27780     01 2A 06 F1 | 	add	local03, #1
27784     A7 2A 62 FC | 	wrlong	local03, fp
27788     90 4E 85 F1 | 	sub	fp, #144
2778c     A7 2C 02 FB | 	rdlong	local04, fp
27790     14 2D 42 FC | 	wrbyte	local04, local02
27794     90 4E 05 F1 | 	add	fp, #144
27798     A7 28 02 FB | 	rdlong	local02, fp
2779c     14 2B 02 F6 | 	mov	local03, local02
277a0     01 2A 06 F1 | 	add	local03, #1
277a4     A7 2A 62 FC | 	wrlong	local03, fp
277a8     60 4E 85 F1 | 	sub	fp, #96
277ac     A7 2C 02 FB | 	rdlong	local04, fp
277b0     14 2D 42 FC | 	wrbyte	local04, local02
277b4     48 4E 85 F1 | 	sub	fp, #72
277b8     A7 00 68 FC | 	wrlong	#0, fp
277bc     18 4E 85 F1 | 	sub	fp, #24
277c0                 | LR__3398
277c0     18 4E 05 F1 | 	add	fp, #24
277c4     A7 28 02 FB | 	rdlong	local02, fp
277c8     44 4E 05 F1 | 	add	fp, #68
277cc     A7 2E 02 FB | 	rdlong	local05, fp
277d0     5C 4E 85 F1 | 	sub	fp, #92
277d4     17 29 52 F2 | 	cmps	local02, local05 wc
277d8     4C 00 90 3D |  if_ae	jmp	#LR__3399
277dc     C0 4E 05 F1 | 	add	fp, #192
277e0     A7 34 02 FB | 	rdlong	local08, fp
277e4     1A 3D 02 F6 | 	mov	local12, local08
277e8     01 3C 06 F1 | 	add	local12, #1
277ec     A7 3C 62 FC | 	wrlong	local12, fp
277f0     A8 4E 85 F1 | 	sub	fp, #168
277f4     A7 32 02 FB | 	rdlong	local07, fp
277f8     19 37 02 F6 | 	mov	local09, local07
277fc     98 4E 05 F1 | 	add	fp, #152
27800     A7 38 02 F6 | 	mov	local10, fp
27804     A7 36 02 F1 | 	add	local09, fp
27808     1B 3B C2 FA | 	rdbyte	local11, local09
2780c     1A 3B 42 FC | 	wrbyte	local11, local08
27810     98 4E 85 F1 | 	sub	fp, #152
27814     A7 3C 02 FB | 	rdlong	local12, fp
27818     01 3C 06 F1 | 	add	local12, #1
2781c     A7 3C 62 FC | 	wrlong	local12, fp
27820     18 4E 85 F1 | 	sub	fp, #24
27824     98 FF 9F FD | 	jmp	#LR__3398
27828                 | LR__3399
27828                 | LR__3400
27828     C0 4E 05 F1 | 	add	fp, #192
2782c     A7 26 02 FB | 	rdlong	local01, fp
27830     C0 4E 85 F1 | 	sub	fp, #192
27834     13 01 48 FC | 	wrbyte	#0, local01
27838                 | LR__3401
27838     6C 4E 05 F1 | 	add	fp, #108
2783c     A7 26 0A FB | 	rdlong	local01, fp wz
27840     6C 4E 85 F1 | 	sub	fp, #108
27844     90 01 90 AD |  if_e	jmp	#LR__3412
27848     48 4E 05 F1 | 	add	fp, #72
2784c     A7 2A 0A FB | 	rdlong	local03, fp wz
27850     48 4E 85 F1 | 	sub	fp, #72
27854     80 01 90 AD |  if_e	jmp	#LR__3412
27858     C4 4E 05 F1 | 	add	fp, #196
2785c     A7 12 02 FB | 	rdlong	arg01, fp
27860     C4 4E 85 F1 | 	sub	fp, #196
27864     09 45 02 F6 | 	mov	local16, arg01
27868     97 06 48 FB | 	callpa	#(@LR__3403-@LR__3402)>>2,fcache_load_ptr_
2786c                 | LR__3402
2786c     22 FB C9 FA | 	rdbyte	result1, local16 wz
27870     01 44 06 51 |  if_ne	add	local16, #1
27874     F4 FF 9F 5D |  if_ne	jmp	#LR__3402
27878                 | LR__3403
27878     09 45 82 F1 | 	sub	local16, arg01
2787c     22 2D 02 F6 | 	mov	local04, local16
27880     6C 4E 05 F1 | 	add	fp, #108
27884     A7 30 02 FB | 	rdlong	local06, fp
27888     6C 4E 85 F1 | 	sub	fp, #108
2788c     18 2D 5A F2 | 	cmps	local04, local06 wcz
27890     44 01 90 ED |  if_be	jmp	#LR__3412
27894     C4 4E 05 F1 | 	add	fp, #196
27898     A7 26 02 FB | 	rdlong	local01, fp
2789c     5C 4E 05 F1 | 	add	fp, #92
278a0     A7 26 62 FC | 	wrlong	local01, fp
278a4     FC 4E 85 F1 | 	sub	fp, #252
278a8     A7 26 0A FB | 	rdlong	local01, fp wz
278ac     24 4E 85 F1 | 	sub	fp, #36
278b0     20 00 90 AD |  if_e	jmp	#LR__3404
278b4     B8 4E 05 F1 | 	add	fp, #184
278b8     A7 00 68 FC | 	wrlong	#0, fp
278bc     4C 4E 85 F1 | 	sub	fp, #76
278c0     A7 26 02 FB | 	rdlong	local01, fp
278c4     B0 4E 05 F1 | 	add	fp, #176
278c8     A7 26 62 FC | 	wrlong	local01, fp
278cc     1C 4F 85 F1 | 	sub	fp, #284
278d0     24 00 90 FD | 	jmp	#LR__3405
278d4                 | LR__3404
278d4     6C 4E 05 F1 | 	add	fp, #108
278d8     A7 26 02 FB | 	rdlong	local01, fp
278dc     01 26 86 F1 | 	sub	local01, #1
278e0     4C 4E 05 F1 | 	add	fp, #76
278e4     A7 2A 02 FB | 	rdlong	local03, fp
278e8     15 27 82 F1 | 	sub	local01, local03
278ec     64 4E 05 F1 | 	add	fp, #100
278f0     A7 26 62 FC | 	wrlong	local01, fp
278f4     1C 4F 85 F1 | 	sub	fp, #284
278f8                 | LR__3405
278f8     97 20 48 FB | 	callpa	#(@LR__3407-@LR__3406)>>2,fcache_load_ptr_
278fc                 | LR__3406
278fc     1C 4F 05 F1 | 	add	fp, #284
27900     A7 26 0A FB | 	rdlong	local01, fp wz
27904     1C 4F 85 F1 | 	sub	fp, #284
27908     30 00 90 AD |  if_e	jmp	#LR__3408
2790c     20 4F 05 F1 | 	add	fp, #288
27910     A7 28 02 FB | 	rdlong	local02, fp
27914     14 2B 02 F6 | 	mov	local03, local02
27918     01 2A 06 F1 | 	add	local03, #1
2791c     A7 2A 62 FC | 	wrlong	local03, fp
27920     14 55 48 FC | 	wrbyte	#42, local02
27924     04 4E 85 F1 | 	sub	fp, #4
27928     A7 26 02 FB | 	rdlong	local01, fp
2792c     01 26 86 F1 | 	sub	local01, #1
27930     A7 26 62 FC | 	wrlong	local01, fp
27934     1C 4F 85 F1 | 	sub	fp, #284
27938     C0 FF 9F FD | 	jmp	#LR__3406
2793c                 | LR__3407
2793c                 | LR__3408
2793c     B8 4E 05 F1 | 	add	fp, #184
27940     A7 26 0A FB | 	rdlong	local01, fp wz
27944     B8 4E 85 F1 | 	sub	fp, #184
27948     70 00 90 AD |  if_e	jmp	#LR__3411
2794c     20 4F 05 F1 | 	add	fp, #288
27950     A7 28 02 FB | 	rdlong	local02, fp
27954     14 2B 02 F6 | 	mov	local03, local02
27958     01 2A 06 F1 | 	add	local03, #1
2795c     A7 2A 62 FC | 	wrlong	local03, fp
27960     14 5D 48 FC | 	wrbyte	#46, local02
27964     04 4E 85 F1 | 	sub	fp, #4
27968     A7 00 68 FC | 	wrlong	#0, fp
2796c     1C 4F 85 F1 | 	sub	fp, #284
27970                 | LR__3409
27970     1C 4F 05 F1 | 	add	fp, #284
27974     A7 28 02 FB | 	rdlong	local02, fp
27978     64 4E 85 F1 | 	sub	fp, #100
2797c     A7 2E 02 FB | 	rdlong	local05, fp
27980     B8 4E 85 F1 | 	sub	fp, #184
27984     17 29 52 F2 | 	cmps	local02, local05 wc
27988     30 00 90 3D |  if_ae	jmp	#LR__3410
2798c     20 4F 05 F1 | 	add	fp, #288
27990     A7 34 02 FB | 	rdlong	local08, fp
27994     1A 3D 02 F6 | 	mov	local12, local08
27998     01 3C 06 F1 | 	add	local12, #1
2799c     A7 3C 62 FC | 	wrlong	local12, fp
279a0     1A 55 48 FC | 	wrbyte	#42, local08
279a4     04 4E 85 F1 | 	sub	fp, #4
279a8     A7 3C 02 FB | 	rdlong	local12, fp
279ac     01 3C 06 F1 | 	add	local12, #1
279b0     A7 3C 62 FC | 	wrlong	local12, fp
279b4     1C 4F 85 F1 | 	sub	fp, #284
279b8     B4 FF 9F FD | 	jmp	#LR__3409
279bc                 | LR__3410
279bc                 | LR__3411
279bc     20 4F 05 F1 | 	add	fp, #288
279c0     A7 28 02 FB | 	rdlong	local02, fp
279c4     14 2B 02 F6 | 	mov	local03, local02
279c8     01 2A 06 F1 | 	add	local03, #1
279cc     A7 2A 62 FC | 	wrlong	local03, fp
279d0     20 4F 85 F1 | 	sub	fp, #288
279d4     14 01 48 FC | 	wrbyte	#0, local02
279d8                 | LR__3412
279d8     04 4E 05 F1 | 	add	fp, #4
279dc     A7 12 02 FB | 	rdlong	arg01, fp
279e0     04 4E 05 F1 | 	add	fp, #4
279e4     A7 14 02 FB | 	rdlong	arg02, fp
279e8     BC 4E 05 F1 | 	add	fp, #188
279ec     A7 16 02 FB | 	rdlong	arg03, fp
279f0     C4 4E 85 F1 | 	sub	fp, #196
279f4     C4 EE BF FD | 	call	#__system___fmtstr
279f8                 | LR__3413
279f8     A7 F0 03 F6 | 	mov	ptra, fp
279fc     B2 00 A0 FD | 	call	#popregs_
27a00                 | __system___fmtfloat_ret
27a00     2D 00 64 FD | 	ret
27a04                 | 
27a04                 | __system__Left_S
27a04     04 4A 05 F6 | 	mov	COUNT_, #4
27a08     A8 00 A0 FD | 	call	#pushregs_
27a0c     09 27 02 F6 | 	mov	local01, arg01
27a10     0A 29 02 F6 | 	mov	local02, arg02
27a14     01 28 56 F2 | 	cmps	local02, #1 wc
27a18     AA 01 00 CF 
27a1c     9E FA 05 C6 |  if_b	mov	result1, ##@LR__5363
27a20     5C 00 90 CD |  if_b	jmp	#LR__3423
27a24     13 13 02 F6 | 	mov	arg01, local01
27a28     09 2B 02 F6 | 	mov	local03, arg01
27a2c     97 06 48 FB | 	callpa	#(@LR__3421-@LR__3420)>>2,fcache_load_ptr_
27a30                 | LR__3420
27a30     15 FB C9 FA | 	rdbyte	result1, local03 wz
27a34     01 2A 06 51 |  if_ne	add	local03, #1
27a38     F4 FF 9F 5D |  if_ne	jmp	#LR__3420
27a3c                 | LR__3421
27a3c     09 2B 82 F1 | 	sub	local03, arg01
27a40     15 FB 01 F6 | 	mov	result1, local03
27a44     14 FB 59 F2 | 	cmps	result1, local02 wcz
27a48     13 FB 01 E6 |  if_be	mov	result1, local01
27a4c     30 00 90 ED |  if_be	jmp	#LR__3423
27a50     14 13 02 F6 | 	mov	arg01, local02
27a54     02 12 06 F1 | 	add	arg01, #2
27a58     CC 20 B0 FD | 	call	#__system___gc_alloc_managed
27a5c     FD 2C 0A F6 | 	mov	local04, result1 wz
27a60     18 00 90 AD |  if_e	jmp	#LR__3422
27a64     16 13 02 F6 | 	mov	arg01, local04
27a68     13 15 02 F6 | 	mov	arg02, local01
27a6c     14 17 02 F6 | 	mov	arg03, local02
27a70     34 DE BF FD | 	call	#__system____builtin_memmove
27a74     16 29 02 F1 | 	add	local02, local04
27a78     14 01 48 FC | 	wrbyte	#0, local02
27a7c                 | LR__3422
27a7c     16 FB 01 F6 | 	mov	result1, local04
27a80                 | LR__3423
27a80     A7 F0 03 F6 | 	mov	ptra, fp
27a84     B2 00 A0 FD | 	call	#popregs_
27a88                 | __system__Left_S_ret
27a88     2D 00 64 FD | 	ret
27a8c                 | 
27a8c                 | __system__Right_S
27a8c     05 4A 05 F6 | 	mov	COUNT_, #5
27a90     A8 00 A0 FD | 	call	#pushregs_
27a94     09 27 02 F6 | 	mov	local01, arg01
27a98     0A 29 02 F6 | 	mov	local02, arg02
27a9c     01 28 56 F2 | 	cmps	local02, #1 wc
27aa0     AA 01 00 CF 
27aa4     9F FA 05 C6 |  if_b	mov	result1, ##@LR__5364
27aa8     64 00 90 CD |  if_b	jmp	#LR__3433
27aac     13 13 02 F6 | 	mov	arg01, local01
27ab0     09 2B 02 F6 | 	mov	local03, arg01
27ab4     97 06 48 FB | 	callpa	#(@LR__3431-@LR__3430)>>2,fcache_load_ptr_
27ab8                 | LR__3430
27ab8     15 FB C9 FA | 	rdbyte	result1, local03 wz
27abc     01 2A 06 51 |  if_ne	add	local03, #1
27ac0     F4 FF 9F 5D |  if_ne	jmp	#LR__3430
27ac4                 | LR__3431
27ac4     09 2B 82 F1 | 	sub	local03, arg01
27ac8     15 FB 01 F6 | 	mov	result1, local03
27acc     FD 2C 02 F6 | 	mov	local04, result1
27ad0     14 2D 5A F2 | 	cmps	local04, local02 wcz
27ad4     13 FB 01 E6 |  if_be	mov	result1, local01
27ad8     34 00 90 ED |  if_be	jmp	#LR__3433
27adc     14 13 02 F6 | 	mov	arg01, local02
27ae0     02 12 06 F1 | 	add	arg01, #2
27ae4     40 20 B0 FD | 	call	#__system___gc_alloc_managed
27ae8     FD 2E 0A F6 | 	mov	local05, result1 wz
27aec     1C 00 90 AD |  if_e	jmp	#LR__3432
27af0     14 2D 82 F1 | 	sub	local04, local02
27af4     13 2D 02 F1 | 	add	local04, local01
27af8     01 28 06 F1 | 	add	local02, #1
27afc     17 13 02 F6 | 	mov	arg01, local05
27b00     16 15 02 F6 | 	mov	arg02, local04
27b04     14 17 02 F6 | 	mov	arg03, local02
27b08     9C DD BF FD | 	call	#__system____builtin_memmove
27b0c                 | LR__3432
27b0c     17 FB 01 F6 | 	mov	result1, local05
27b10                 | LR__3433
27b10     A7 F0 03 F6 | 	mov	ptra, fp
27b14     B2 00 A0 FD | 	call	#popregs_
27b18                 | __system__Right_S_ret
27b18     2D 00 64 FD | 	ret
27b1c                 | 
27b1c                 | __system__Mid_S
27b1c     05 4A 05 F6 | 	mov	COUNT_, #5
27b20     A8 00 A0 FD | 	call	#pushregs_
27b24     09 27 02 F6 | 	mov	local01, arg01
27b28     0A 29 02 F6 | 	mov	local02, arg02
27b2c     01 16 56 F2 | 	cmps	arg03, #1 wc
27b30     AA 01 00 CF 
27b34     A0 FA 05 C6 |  if_b	mov	result1, ##@LR__5365
27b38     80 00 90 CD |  if_b	jmp	#LR__3443
27b3c     01 28 86 F1 | 	sub	local02, #1
27b40     00 28 56 F3 | 	fges	local02, #0 wc
27b44     13 13 02 F6 | 	mov	arg01, local01
27b48     09 2B 02 F6 | 	mov	local03, arg01
27b4c     97 06 48 FB | 	callpa	#(@LR__3441-@LR__3440)>>2,fcache_load_ptr_
27b50                 | LR__3440
27b50     15 FB C9 FA | 	rdbyte	result1, local03 wz
27b54     01 2A 06 51 |  if_ne	add	local03, #1
27b58     F4 FF 9F 5D |  if_ne	jmp	#LR__3440
27b5c                 | LR__3441
27b5c     09 2B 82 F1 | 	sub	local03, arg01
27b60     15 FB 01 F6 | 	mov	result1, local03
27b64     FD 14 02 F6 | 	mov	arg02, result1
27b68     14 15 52 F2 | 	cmps	arg02, local02 wc
27b6c     AA 01 00 CF 
27b70     A1 FA 05 C6 |  if_b	mov	result1, ##@LR__5366
27b74     44 00 90 CD |  if_b	jmp	#LR__3443
27b78     0A 2D 02 F6 | 	mov	local04, arg02
27b7c     14 2D 82 F1 | 	sub	local04, local02
27b80     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
27b84     0B 2D 02 16 |  if_a	mov	local04, arg03
27b88     16 13 02 F6 | 	mov	arg01, local04
27b8c     02 12 06 F1 | 	add	arg01, #2
27b90     94 1F B0 FD | 	call	#__system___gc_alloc_managed
27b94     FD 2E 0A F6 | 	mov	local05, result1 wz
27b98     1C 00 90 AD |  if_e	jmp	#LR__3442
27b9c     13 29 02 F1 | 	add	local02, local01
27ba0     17 13 02 F6 | 	mov	arg01, local05
27ba4     14 15 02 F6 | 	mov	arg02, local02
27ba8     16 17 02 F6 | 	mov	arg03, local04
27bac     F8 DC BF FD | 	call	#__system____builtin_memmove
27bb0     17 2D 02 F1 | 	add	local04, local05
27bb4     16 01 48 FC | 	wrbyte	#0, local04
27bb8                 | LR__3442
27bb8     17 FB 01 F6 | 	mov	result1, local05
27bbc                 | LR__3443
27bbc     A7 F0 03 F6 | 	mov	ptra, fp
27bc0     B2 00 A0 FD | 	call	#popregs_
27bc4                 | __system__Mid_S_ret
27bc4     2D 00 64 FD | 	ret
27bc8                 | 
27bc8                 | __system__Chr_S
27bc8     01 4A 05 F6 | 	mov	COUNT_, #1
27bcc     A8 00 A0 FD | 	call	#pushregs_
27bd0     09 27 02 F6 | 	mov	local01, arg01
27bd4     03 12 06 F6 | 	mov	arg01, #3
27bd8     4C 1F B0 FD | 	call	#__system___gc_alloc_managed
27bdc     00 FA 4D F2 | 	cmps	result1, #0 wz
27be0     FD 26 42 5C |  if_ne	wrbyte	local01, result1
27be4     01 FA 05 51 |  if_ne	add	result1, #1
27be8     FD 00 48 5C |  if_ne	wrbyte	#0, result1
27bec     01 FA 85 51 |  if_ne	sub	result1, #1
27bf0     A7 F0 03 F6 | 	mov	ptra, fp
27bf4     B2 00 A0 FD | 	call	#popregs_
27bf8                 | __system__Chr_S_ret
27bf8     2D 00 64 FD | 	ret
27bfc                 | 
27bfc                 | __system__str_S
27bfc     02 4A 05 F6 | 	mov	COUNT_, #2
27c00     A8 00 A0 FD | 	call	#pushregs_
27c04     09 27 02 F6 | 	mov	local01, arg01
27c08     10 12 06 F6 | 	mov	arg01, #16
27c0c     18 1F B0 FD | 	call	#__system___gc_alloc_managed
27c10     FD 28 0A F6 | 	mov	local02, result1 wz
27c14     30 00 90 AD |  if_e	jmp	#LR__3450
27c18     F8 13 02 F6 | 	mov	arg01, ptra
27c1c     08 F0 07 F1 | 	add	ptra, #8
27c20     09 29 62 FC | 	wrlong	local02, arg01
27c24     04 12 06 F1 | 	add	arg01, #4
27c28     09 01 68 FC | 	wrlong	#0, arg01
27c2c     04 12 86 F1 | 	sub	arg01, #4
27c30     00 10 05 FF 
27c34     00 12 46 F5 | 	or	arg01, ##169869312
27c38     00 14 06 F6 | 	mov	arg02, #0
27c3c     13 17 02 F6 | 	mov	arg03, local01
27c40     67 18 06 F6 | 	mov	arg04, #103
27c44     90 EE BF FD | 	call	#__system___fmtfloat
27c48                 | LR__3450
27c48     14 FB 01 F6 | 	mov	result1, local02
27c4c     A7 F0 03 F6 | 	mov	ptra, fp
27c50     B2 00 A0 FD | 	call	#popregs_
27c54                 | __system__str_S_ret
27c54     2D 00 64 FD | 	ret
27c58                 | 
27c58                 | __system__Number_S
27c58     08 4A 05 F6 | 	mov	COUNT_, #8
27c5c     A8 00 A0 FD | 	call	#pushregs_
27c60     09 27 02 F6 | 	mov	local01, arg01
27c64     0A 29 0A F6 | 	mov	local02, arg02 wz
27c68     0B 2B 02 F6 | 	mov	local03, arg03
27c6c     3C 00 90 5D |  if_ne	jmp	#LR__3462
27c70     01 28 06 F6 | 	mov	local02, #1
27c74     15 2D 02 F6 | 	mov	local04, local03
27c78     01 2E 06 F6 | 	mov	local05, #1
27c7c     97 16 48 FB | 	callpa	#(@LR__3461-@LR__3460)>>2,fcache_load_ptr_
27c80                 | LR__3460
27c80     00 30 06 F6 | 	mov	local06, #0
27c84     13 2D 1A F2 | 	cmp	local04, local01 wcz
27c88     01 30 66 E6 |  if_be	neg	local06, #1
27c8c     16 2F 12 F2 | 	cmp	local05, local04 wc
27c90     19 33 A2 F1 | 	subx	local07, local07
27c94     19 31 CA F7 | 	test	local06, local07 wz
27c98     15 2D 02 5D |  if_ne	qmul	local04, local03
27c9c     16 2F 02 56 |  if_ne	mov	local05, local04
27ca0     01 28 06 51 |  if_ne	add	local02, #1
27ca4     18 2C 62 5D |  if_ne	getqx	local04
27ca8     D4 FF 9F 5D |  if_ne	jmp	#LR__3460
27cac                 | LR__3461
27cac                 | LR__3462
27cac     20 28 36 F3 | 	fle	local02, #32 wc
27cb0     14 13 02 F6 | 	mov	arg01, local02
27cb4     02 12 06 F1 | 	add	arg01, #2
27cb8     6C 1E B0 FD | 	call	#__system___gc_alloc_managed
27cbc     FD 30 02 F6 | 	mov	local06, result1
27cc0     14 33 02 F6 | 	mov	local07, local02
27cc4     18 33 02 F1 | 	add	local07, local06
27cc8     19 01 48 FC | 	wrbyte	#0, local07
27ccc     97 1A 48 FB | 	callpa	#(@LR__3464-@LR__3463)>>2,fcache_load_ptr_
27cd0                 | LR__3463
27cd0     01 28 16 F2 | 	cmp	local02, #1 wc
27cd4     2C 00 90 CD |  if_b	jmp	#LR__3465
27cd8     15 27 12 FD | 	qdiv	local01, local03
27cdc     01 28 86 F1 | 	sub	local02, #1
27ce0     14 33 02 F6 | 	mov	local07, local02
27ce4     18 33 02 F1 | 	add	local07, local06
27ce8     19 34 62 FD | 	getqy	local08
27cec     0A 34 16 F2 | 	cmp	local08, #10 wc
27cf0     30 34 06 C1 |  if_b	add	local08, #48
27cf4     37 34 06 31 |  if_ae	add	local08, #55
27cf8     19 35 42 FC | 	wrbyte	local08, local07
27cfc     18 26 62 FD | 	getqx	local01
27d00     CC FF 9F FD | 	jmp	#LR__3463
27d04                 | LR__3464
27d04                 | LR__3465
27d04     18 FB 01 F6 | 	mov	result1, local06
27d08     A7 F0 03 F6 | 	mov	ptra, fp
27d0c     B2 00 A0 FD | 	call	#popregs_
27d10                 | __system__Number_S_ret
27d10     2D 00 64 FD | 	ret
27d14                 | 
27d14                 | __system__LCase_S
27d14     07 4A 05 F6 | 	mov	COUNT_, #7
27d18     A8 00 A0 FD | 	call	#pushregs_
27d1c     09 27 02 F6 | 	mov	local01, arg01
27d20     09 29 02 F6 | 	mov	local02, arg01
27d24     97 06 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
27d28                 | LR__3470
27d28     14 FB C9 FA | 	rdbyte	result1, local02 wz
27d2c     01 28 06 51 |  if_ne	add	local02, #1
27d30     F4 FF 9F 5D |  if_ne	jmp	#LR__3470
27d34                 | LR__3471
27d34     09 29 82 F1 | 	sub	local02, arg01
27d38     14 FB 01 F6 | 	mov	result1, local02
27d3c     FD 28 0A F6 | 	mov	local02, result1 wz
27d40     AA 01 00 AF 
27d44     A2 FA 05 A6 |  if_e	mov	result1, ##@LR__5367
27d48     7C 00 90 AD |  if_e	jmp	#LR__3477
27d4c     14 13 02 F6 | 	mov	arg01, local02
27d50     02 12 06 F1 | 	add	arg01, #2
27d54     D0 1D B0 FD | 	call	#__system___gc_alloc_managed
27d58     FD 2A 0A F6 | 	mov	local03, result1 wz
27d5c     64 00 90 AD |  if_e	jmp	#LR__3476
27d60     01 2C 66 F6 | 	neg	local04, #1
27d64     97 26 48 FB | 	callpa	#(@LR__3475-@LR__3472)>>2,fcache_load_ptr_
27d68                 | LR__3472
27d68     01 2C 06 F1 | 	add	local04, #1
27d6c     16 2F 02 F6 | 	mov	local05, local04
27d70     13 2F 02 F1 | 	add	local05, local01
27d74     17 31 C2 FA | 	rdbyte	local06, local05
27d78     41 30 56 F2 | 	cmps	local06, #65 wc
27d7c     18 00 90 CD |  if_b	jmp	#LR__3473
27d80     5B 30 56 F2 | 	cmps	local06, #91 wc
27d84     16 33 02 C6 |  if_b	mov	local07, local04
27d88     15 33 02 C1 |  if_b	add	local07, local03
27d8c     20 30 06 C1 |  if_b	add	local06, #32
27d90     19 31 42 CC |  if_b	wrbyte	local06, local07
27d94     0C 00 90 CD |  if_b	jmp	#LR__3474
27d98                 | LR__3473
27d98     16 33 02 F6 | 	mov	local07, local04
27d9c     15 33 02 F1 | 	add	local07, local03
27da0     19 31 42 FC | 	wrbyte	local06, local07
27da4                 | LR__3474
27da4     14 31 02 F6 | 	mov	local06, local02
27da8     01 30 86 F1 | 	sub	local06, #1
27dac     18 2D 0A F2 | 	cmp	local04, local06 wz
27db0     B4 FF 9F 5D |  if_ne	jmp	#LR__3472
27db4                 | LR__3475
27db4     15 29 02 F1 | 	add	local02, local03
27db8     14 01 48 FC | 	wrbyte	#0, local02
27dbc     15 FB 01 F6 | 	mov	result1, local03
27dc0     04 00 90 FD | 	jmp	#LR__3477
27dc4                 | LR__3476
27dc4     15 FB 01 F6 | 	mov	result1, local03
27dc8                 | LR__3477
27dc8     A7 F0 03 F6 | 	mov	ptra, fp
27dcc     B2 00 A0 FD | 	call	#popregs_
27dd0                 | __system__LCase_S_ret
27dd0     2D 00 64 FD | 	ret
27dd4                 | 
27dd4                 | __system__LTrim_S
27dd4     05 4A 05 F6 | 	mov	COUNT_, #5
27dd8     A8 00 A0 FD | 	call	#pushregs_
27ddc     09 27 02 F6 | 	mov	local01, arg01
27de0     09 29 02 F6 | 	mov	local02, arg01
27de4     97 06 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
27de8                 | LR__3480
27de8     14 FB C9 FA | 	rdbyte	result1, local02 wz
27dec     01 28 06 51 |  if_ne	add	local02, #1
27df0     F4 FF 9F 5D |  if_ne	jmp	#LR__3480
27df4                 | LR__3481
27df4     09 29 82 F1 | 	sub	local02, arg01
27df8     14 FB 01 F6 | 	mov	result1, local02
27dfc     FD 28 0A F6 | 	mov	local02, result1 wz
27e00     AA 01 00 AF 
27e04     A3 FA 05 A6 |  if_e	mov	result1, ##@LR__5368
27e08     7C 00 90 AD |  if_e	jmp	#LR__3486
27e0c     00 2A 06 F6 | 	mov	local03, #0
27e10     14 2D 02 F6 | 	mov	local04, local02
27e14                 | LR__3482
27e14     16 2B 52 F2 | 	cmps	local03, local04 wc
27e18     68 00 90 3D |  if_ae	jmp	#LR__3485
27e1c     15 17 02 F6 | 	mov	arg03, local03
27e20     13 17 02 F1 | 	add	arg03, local01
27e24     0B 17 C2 FA | 	rdbyte	arg03, arg03
27e28     20 16 0E F2 | 	cmp	arg03, #32 wz
27e2c     4C 00 90 AD |  if_e	jmp	#LR__3484
27e30     14 13 02 F6 | 	mov	arg01, local02
27e34     15 13 82 F1 | 	sub	arg01, local03
27e38     02 12 06 F1 | 	add	arg01, #2
27e3c     E8 1C B0 FD | 	call	#__system___gc_alloc_managed
27e40     FD 2E 0A F6 | 	mov	local05, result1 wz
27e44     2C 00 90 AD |  if_e	jmp	#LR__3483
27e48     15 15 02 F6 | 	mov	arg02, local03
27e4c     13 15 02 F1 | 	add	arg02, local01
27e50     14 17 02 F6 | 	mov	arg03, local02
27e54     15 17 82 F1 | 	sub	arg03, local03
27e58     17 13 02 F6 | 	mov	arg01, local05
27e5c     48 DA BF FD | 	call	#__system____builtin_memmove
27e60     15 29 82 F1 | 	sub	local02, local03
27e64     17 29 02 F1 | 	add	local02, local05
27e68     14 01 48 FC | 	wrbyte	#0, local02
27e6c     17 FB 01 F6 | 	mov	result1, local05
27e70     14 00 90 FD | 	jmp	#LR__3486
27e74                 | LR__3483
27e74     17 FB 01 F6 | 	mov	result1, local05
27e78     0C 00 90 FD | 	jmp	#LR__3486
27e7c                 | LR__3484
27e7c     01 2A 06 F1 | 	add	local03, #1
27e80     90 FF 9F FD | 	jmp	#LR__3482
27e84                 | LR__3485
27e84     13 FB 01 F6 | 	mov	result1, local01
27e88                 | LR__3486
27e88     A7 F0 03 F6 | 	mov	ptra, fp
27e8c     B2 00 A0 FD | 	call	#popregs_
27e90                 | __system__LTrim_S_ret
27e90     2D 00 64 FD | 	ret
27e94                 | 
27e94                 | __system__RTrim_S
27e94     04 4A 05 F6 | 	mov	COUNT_, #4
27e98     A8 00 A0 FD | 	call	#pushregs_
27e9c     09 27 02 F6 | 	mov	local01, arg01
27ea0     09 29 02 F6 | 	mov	local02, arg01
27ea4     97 06 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
27ea8                 | LR__3490
27ea8     14 FB C9 FA | 	rdbyte	result1, local02 wz
27eac     01 28 06 51 |  if_ne	add	local02, #1
27eb0     F4 FF 9F 5D |  if_ne	jmp	#LR__3490
27eb4                 | LR__3491
27eb4     09 29 82 F1 | 	sub	local02, arg01
27eb8     14 FB 01 F6 | 	mov	result1, local02
27ebc     FD 28 0A F6 | 	mov	local02, result1 wz
27ec0     AA 01 00 AF 
27ec4     A4 FA 05 A6 |  if_e	mov	result1, ##@LR__5369
27ec8     74 00 90 AD |  if_e	jmp	#LR__3495
27ecc     14 2B 02 F6 | 	mov	local03, local02
27ed0     01 2A 86 F1 | 	sub	local03, #1
27ed4                 | LR__3492
27ed4     15 15 02 F6 | 	mov	arg02, local03
27ed8     13 15 02 F1 | 	add	arg02, local01
27edc     0A 29 C2 FA | 	rdbyte	local02, arg02
27ee0     20 28 0E F2 | 	cmp	local02, #32 wz
27ee4     44 00 90 AD |  if_e	jmp	#LR__3494
27ee8     15 13 02 F6 | 	mov	arg01, local03
27eec     02 12 06 F1 | 	add	arg01, #2
27ef0     34 1C B0 FD | 	call	#__system___gc_alloc_managed
27ef4     FD 2C 0A F6 | 	mov	local04, result1 wz
27ef8     28 00 90 AD |  if_e	jmp	#LR__3493
27efc     15 17 02 F6 | 	mov	arg03, local03
27f00     01 16 06 F1 | 	add	arg03, #1
27f04     16 13 02 F6 | 	mov	arg01, local04
27f08     13 15 02 F6 | 	mov	arg02, local01
27f0c     98 D9 BF FD | 	call	#__system____builtin_memmove
27f10     01 2A 06 F1 | 	add	local03, #1
27f14     16 2B 02 F1 | 	add	local03, local04
27f18     15 01 48 FC | 	wrbyte	#0, local03
27f1c     16 FB 01 F6 | 	mov	result1, local04
27f20     1C 00 90 FD | 	jmp	#LR__3495
27f24                 | LR__3493
27f24     16 FB 01 F6 | 	mov	result1, local04
27f28     14 00 90 FD | 	jmp	#LR__3495
27f2c                 | LR__3494
27f2c     01 2A 86 F1 | 	sub	local03, #1
27f30     00 2A 56 F2 | 	cmps	local03, #0 wc
27f34     9C FF 9F 3D |  if_ae	jmp	#LR__3492
27f38     AA 01 00 FF 
27f3c     A5 FA 05 F6 | 	mov	result1, ##@LR__5370
27f40                 | LR__3495
27f40     A7 F0 03 F6 | 	mov	ptra, fp
27f44     B2 00 A0 FD | 	call	#popregs_
27f48                 | __system__RTrim_S_ret
27f48     2D 00 64 FD | 	ret
27f4c                 | 
27f4c                 | __system__Instr
27f4c     07 4A 05 F6 | 	mov	COUNT_, #7
27f50     A8 00 A0 FD | 	call	#pushregs_
27f54     09 27 02 F6 | 	mov	local01, arg01
27f58     0A 29 02 F6 | 	mov	local02, arg02
27f5c     0B 2B 02 F6 | 	mov	local03, arg03
27f60     15 13 02 F6 | 	mov	arg01, local03
27f64     09 2D 02 F6 | 	mov	local04, arg01
27f68     97 06 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
27f6c                 | LR__3500
27f6c     16 FB C9 FA | 	rdbyte	result1, local04 wz
27f70     01 2C 06 51 |  if_ne	add	local04, #1
27f74     F4 FF 9F 5D |  if_ne	jmp	#LR__3500
27f78                 | LR__3501
27f78     09 2D 82 F1 | 	sub	local04, arg01
27f7c     16 2F 02 F6 | 	mov	local05, local04
27f80     14 13 02 F6 | 	mov	arg01, local02
27f84     09 2D 02 F6 | 	mov	local04, arg01
27f88     97 06 48 FB | 	callpa	#(@LR__3503-@LR__3502)>>2,fcache_load_ptr_
27f8c                 | LR__3502
27f8c     16 FB C9 FA | 	rdbyte	result1, local04 wz
27f90     01 2C 06 51 |  if_ne	add	local04, #1
27f94     F4 FF 9F 5D |  if_ne	jmp	#LR__3502
27f98                 | LR__3503
27f98     09 2D 82 F1 | 	sub	local04, arg01
27f9c     16 FB 01 F6 | 	mov	result1, local04
27fa0     FD 18 0A F6 | 	mov	arg04, result1 wz
27fa4     00 FA 05 A6 |  if_e	mov	result1, #0
27fa8     98 00 90 AD |  if_e	jmp	#LR__3507
27fac     00 2E 0E F2 | 	cmp	local05, #0 wz
27fb0     00 FA 05 A6 |  if_e	mov	result1, #0
27fb4     8C 00 90 AD |  if_e	jmp	#LR__3507
27fb8     0C 27 5A F2 | 	cmps	local01, arg04 wcz
27fbc     00 FA 05 16 |  if_a	mov	result1, #0
27fc0     80 00 90 1D |  if_a	jmp	#LR__3507
27fc4     01 26 56 F2 | 	cmps	local01, #1 wc
27fc8     01 26 06 C6 |  if_b	mov	local01, #1
27fcc     15 31 C2 FA | 	rdbyte	local06, local03
27fd0     01 2E 0E F2 | 	cmp	local05, #1 wz
27fd4     18 00 90 5D |  if_ne	jmp	#LR__3504
27fd8     14 13 02 F6 | 	mov	arg01, local02
27fdc     18 15 02 F6 | 	mov	arg02, local06
27fe0     13 17 02 F6 | 	mov	arg03, local01
27fe4     00 18 06 F6 | 	mov	arg04, #0
27fe8     14 37 B0 FD | 	call	#__system____ScanForChar
27fec     54 00 90 FD | 	jmp	#LR__3507
27ff0                 | LR__3504
27ff0     13 33 02 F6 | 	mov	local07, local01
27ff4                 | LR__3505
27ff4     14 13 02 F6 | 	mov	arg01, local02
27ff8     18 15 02 F6 | 	mov	arg02, local06
27ffc     19 17 02 F6 | 	mov	arg03, local07
28000     00 18 06 F6 | 	mov	arg04, #0
28004     F8 36 B0 FD | 	call	#__system____ScanForChar
28008     FD 32 0A F6 | 	mov	local07, result1 wz
2800c     30 00 90 AD |  if_e	jmp	#LR__3506
28010     17 17 02 F6 | 	mov	arg03, local05
28014     14 13 02 F6 | 	mov	arg01, local02
28018     19 15 02 F6 | 	mov	arg02, local07
2801c     FC FA BF FD | 	call	#__system__Mid_S
28020     FD 12 02 F6 | 	mov	arg01, result1
28024     15 15 02 F6 | 	mov	arg02, local03
28028     84 D9 BF FD | 	call	#__system___string_cmp
2802c     00 FA 0D F2 | 	cmp	result1, #0 wz
28030     19 FB 01 A6 |  if_e	mov	result1, local07
28034     0C 00 90 AD |  if_e	jmp	#LR__3507
28038     17 33 02 F1 | 	add	local07, local05
2803c     B4 FF 9F FD | 	jmp	#LR__3505
28040                 | LR__3506
28040     00 FA 05 F6 | 	mov	result1, #0
28044                 | LR__3507
28044     A7 F0 03 F6 | 	mov	ptra, fp
28048     B2 00 A0 FD | 	call	#popregs_
2804c                 | __system__Instr_ret
2804c     2D 00 64 FD | 	ret
28050                 | 
28050                 | __system__InstrRev
28050     07 4A 05 F6 | 	mov	COUNT_, #7
28054     A8 00 A0 FD | 	call	#pushregs_
28058     09 27 02 F6 | 	mov	local01, arg01
2805c     0A 29 02 F6 | 	mov	local02, arg02
28060     0B 2B 02 F6 | 	mov	local03, arg03
28064     15 13 02 F6 | 	mov	arg01, local03
28068     09 2D 02 F6 | 	mov	local04, arg01
2806c     97 06 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
28070                 | LR__3510
28070     16 FB C9 FA | 	rdbyte	result1, local04 wz
28074     01 2C 06 51 |  if_ne	add	local04, #1
28078     F4 FF 9F 5D |  if_ne	jmp	#LR__3510
2807c                 | LR__3511
2807c     09 2D 82 F1 | 	sub	local04, arg01
28080     16 2F 02 F6 | 	mov	local05, local04
28084     14 13 02 F6 | 	mov	arg01, local02
28088     09 2D 02 F6 | 	mov	local04, arg01
2808c     97 06 48 FB | 	callpa	#(@LR__3513-@LR__3512)>>2,fcache_load_ptr_
28090                 | LR__3512
28090     16 FB C9 FA | 	rdbyte	result1, local04 wz
28094     01 2C 06 51 |  if_ne	add	local04, #1
28098     F4 FF 9F 5D |  if_ne	jmp	#LR__3512
2809c                 | LR__3513
2809c     09 2D 82 F1 | 	sub	local04, arg01
280a0     16 FB 01 F6 | 	mov	result1, local04
280a4     FD 18 0A F6 | 	mov	arg04, result1 wz
280a8     00 FA 05 A6 |  if_e	mov	result1, #0
280ac     98 00 90 AD |  if_e	jmp	#LR__3517
280b0     00 2E 0E F2 | 	cmp	local05, #0 wz
280b4     00 FA 05 A6 |  if_e	mov	result1, #0
280b8     8C 00 90 AD |  if_e	jmp	#LR__3517
280bc     0C 27 5A F2 | 	cmps	local01, arg04 wcz
280c0     0C 27 02 16 |  if_a	mov	local01, arg04
280c4     01 26 56 F2 | 	cmps	local01, #1 wc
280c8     01 26 06 C6 |  if_b	mov	local01, #1
280cc     15 31 C2 FA | 	rdbyte	local06, local03
280d0     01 2E 0E F2 | 	cmp	local05, #1 wz
280d4     18 00 90 5D |  if_ne	jmp	#LR__3514
280d8     14 13 02 F6 | 	mov	arg01, local02
280dc     18 15 02 F6 | 	mov	arg02, local06
280e0     13 17 02 F6 | 	mov	arg03, local01
280e4     01 18 06 F6 | 	mov	arg04, #1
280e8     14 36 B0 FD | 	call	#__system____ScanForChar
280ec     58 00 90 FD | 	jmp	#LR__3517
280f0                 | LR__3514
280f0     17 33 02 F6 | 	mov	local07, local05
280f4     01 32 86 F1 | 	sub	local07, #1
280f8                 | LR__3515
280f8     14 13 02 F6 | 	mov	arg01, local02
280fc     18 15 02 F6 | 	mov	arg02, local06
28100     19 17 02 F6 | 	mov	arg03, local07
28104     01 18 06 F6 | 	mov	arg04, #1
28108     F4 35 B0 FD | 	call	#__system____ScanForChar
2810c     FD 32 0A F6 | 	mov	local07, result1 wz
28110     30 00 90 AD |  if_e	jmp	#LR__3516
28114     17 17 02 F6 | 	mov	arg03, local05
28118     14 13 02 F6 | 	mov	arg01, local02
2811c     19 15 02 F6 | 	mov	arg02, local07
28120     F8 F9 BF FD | 	call	#__system__Mid_S
28124     FD 12 02 F6 | 	mov	arg01, result1
28128     15 15 02 F6 | 	mov	arg02, local03
2812c     80 D8 BF FD | 	call	#__system___string_cmp
28130     00 FA 0D F2 | 	cmp	result1, #0 wz
28134     19 FB 01 A6 |  if_e	mov	result1, local07
28138     0C 00 90 AD |  if_e	jmp	#LR__3517
2813c     17 33 82 F1 | 	sub	local07, local05
28140     B4 FF 9F FD | 	jmp	#LR__3515
28144                 | LR__3516
28144     00 FA 05 F6 | 	mov	result1, #0
28148                 | LR__3517
28148     A7 F0 03 F6 | 	mov	ptra, fp
2814c     B2 00 A0 FD | 	call	#popregs_
28150                 | __system__InstrRev_ret
28150     2D 00 64 FD | 	ret
28154                 | 
28154                 | __system___remove
28154     06 4A 05 F6 | 	mov	COUNT_, #6
28158     A8 00 A0 FD | 	call	#pushregs_
2815c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
28160     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
28164     09 15 02 F6 | 	mov	arg02, arg01
28168     13 13 02 F6 | 	mov	arg01, local01
2816c     00 16 06 F6 | 	mov	arg03, #0
28170     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
28174     A8 DF BF FD | 	call	#__system____getvfsforfile
28178     FD 28 0A F6 | 	mov	local02, result1 wz
2817c     10 00 90 AD |  if_e	jmp	#LR__3520
28180     20 28 06 F1 | 	add	local02, #32
28184     14 13 0A FB | 	rdlong	arg01, local02 wz
28188     20 28 86 F1 | 	sub	local02, #32
2818c     14 00 90 5D |  if_ne	jmp	#LR__3521
28190                 | LR__3520
28190     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28194     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
28198     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2819c     01 FA 65 F6 | 	neg	result1, #1
281a0     A8 00 90 FD | 	jmp	#LR__3524
281a4                 | LR__3521
281a4     40 28 06 F1 | 	add	local02, #64
281a8     14 2B 02 FB | 	rdlong	local03, local02
281ac     15 2D 02 F6 | 	mov	local04, local03
281b0     40 28 86 F1 | 	sub	local02, #64
281b4     13 2C 46 F7 | 	zerox	local04, #19
281b8     14 2A 46 F0 | 	shr	local03, #20
281bc     02 2A 66 F0 | 	shl	local03, #2
281c0     ED 2A 02 F1 | 	add	local03, __methods__
281c4     15 2B 02 FB | 	rdlong	local03, local03
281c8     13 13 02 F6 | 	mov	arg01, local01
281cc     F2 2E 02 F6 | 	mov	local05, objptr
281d0     16 E5 01 F6 | 	mov	objptr, local04
281d4     2D 2A 62 FD | 	call	local03
281d8     17 E5 01 F6 | 	mov	objptr, local05
281dc     FD 30 02 F6 | 	mov	local06, result1
281e0     FF FF 7F FF 
281e4     F2 31 0E F2 | 	cmp	local06, ##-14 wz
281e8     38 00 90 5D |  if_ne	jmp	#LR__3522
281ec     3C 28 06 F1 | 	add	local02, #60
281f0     14 31 02 FB | 	rdlong	local06, local02
281f4     18 2B 02 F6 | 	mov	local03, local06
281f8     13 30 46 F7 | 	zerox	local06, #19
281fc     14 2A 46 F0 | 	shr	local03, #20
28200     02 2A 66 F0 | 	shl	local03, #2
28204     ED 2A 02 F1 | 	add	local03, __methods__
28208     15 2B 02 FB | 	rdlong	local03, local03
2820c     13 13 02 F6 | 	mov	arg01, local01
28210     F2 2E 02 F6 | 	mov	local05, objptr
28214     18 E5 01 F6 | 	mov	objptr, local06
28218     2D 2A 62 FD | 	call	local03
2821c     17 E5 01 F6 | 	mov	objptr, local05
28220     FD 30 02 F6 | 	mov	local06, result1
28224                 | LR__3522
28224     00 30 0E F2 | 	cmp	local06, #0 wz
28228     1C 00 90 AD |  if_e	jmp	#LR__3523
2822c     18 13 6A F6 | 	neg	arg01, local06 wz
28230     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28234     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
28238     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2823c     01 FA 65 56 |  if_ne	neg	result1, #1
28240     00 FA 05 A6 |  if_e	mov	result1, #0
28244     04 00 90 FD | 	jmp	#LR__3524
28248                 | LR__3523
28248     00 FA 05 F6 | 	mov	result1, #0
2824c                 | LR__3524
2824c     A7 F0 03 F6 | 	mov	ptra, fp
28250     B2 00 A0 FD | 	call	#popregs_
28254                 | __system___remove_ret
28254     2D 00 64 FD | 	ret
28258                 | 
28258                 | __system___mkdir
28258     05 4A 05 F6 | 	mov	COUNT_, #5
2825c     A8 00 A0 FD | 	call	#pushregs_
28260     84 E7 05 F1 | 	add	ptr___system__dat__, #388
28264     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
28268     09 15 02 F6 | 	mov	arg02, arg01
2826c     13 13 02 F6 | 	mov	arg01, local01
28270     00 16 06 F6 | 	mov	arg03, #0
28274     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
28278     A4 DE BF FD | 	call	#__system____getvfsforfile
2827c     FD 28 0A F6 | 	mov	local02, result1 wz
28280     10 00 90 AD |  if_e	jmp	#LR__3530
28284     20 28 06 F1 | 	add	local02, #32
28288     14 15 0A FB | 	rdlong	arg02, local02 wz
2828c     20 28 86 F1 | 	sub	local02, #32
28290     14 00 90 5D |  if_ne	jmp	#LR__3531
28294                 | LR__3530
28294     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28298     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2829c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
282a0     01 FA 65 F6 | 	neg	result1, #1
282a4     60 00 90 FD | 	jmp	#LR__3533
282a8                 | LR__3531
282a8     38 28 06 F1 | 	add	local02, #56
282ac     14 2B 02 FB | 	rdlong	local03, local02
282b0     15 2D 02 F6 | 	mov	local04, local03
282b4     13 2A 46 F7 | 	zerox	local03, #19
282b8     14 2C 46 F0 | 	shr	local04, #20
282bc     02 2C 66 F0 | 	shl	local04, #2
282c0     ED 2C 02 F1 | 	add	local04, __methods__
282c4     16 2D 02 FB | 	rdlong	local04, local04
282c8     13 13 02 F6 | 	mov	arg01, local01
282cc     FF 15 06 F6 | 	mov	arg02, #511
282d0     F2 2E 02 F6 | 	mov	local05, objptr
282d4     15 E5 01 F6 | 	mov	objptr, local03
282d8     2D 2C 62 FD | 	call	local04
282dc     17 E5 01 F6 | 	mov	objptr, local05
282e0     FD 12 0A F6 | 	mov	arg01, result1 wz
282e4     1C 00 90 AD |  if_e	jmp	#LR__3532
282e8     09 13 6A F6 | 	neg	arg01, arg01 wz
282ec     20 E6 05 F1 | 	add	ptr___system__dat__, #32
282f0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
282f4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
282f8     01 FA 65 56 |  if_ne	neg	result1, #1
282fc     00 FA 05 A6 |  if_e	mov	result1, #0
28300     04 00 90 FD | 	jmp	#LR__3533
28304                 | LR__3532
28304     00 FA 05 F6 | 	mov	result1, #0
28308                 | LR__3533
28308     A7 F0 03 F6 | 	mov	ptra, fp
2830c     B2 00 A0 FD | 	call	#popregs_
28310                 | __system___mkdir_ret
28310     2D 00 64 FD | 	ret
28314                 | 
28314                 | __system___strerror
28314     00 12 56 F2 | 	cmps	arg01, #0 wc
28318     08 00 90 CD |  if_b	jmp	#LR__3540
2831c     1A 12 56 F2 | 	cmps	arg01, #26 wc
28320     04 00 90 CD |  if_b	jmp	#LR__3541
28324                 | LR__3540
28324     19 12 06 F6 | 	mov	arg01, #25
28328                 | LR__3541
28328     02 12 66 F0 | 	shl	arg01, #2
2832c     01 00 00 FF 
28330     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
28334     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
28338     09 FB 01 FB | 	rdlong	result1, arg01
2833c     01 00 00 FF 
28340     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
28344                 | __system___strerror_ret
28344     2D 00 64 FD | 	ret
28348                 | 
28348                 | __system___int64_shl
28348     20 16 CE F7 | 	test	arg03, #32 wz
2834c     09 15 02 56 |  if_ne	mov	arg02, arg01
28350     00 12 06 56 |  if_ne	mov	arg01, #0
28354     1F 16 CE F7 | 	test	arg03, #31 wz
28358     18 00 90 AD |  if_e	jmp	#LR__3550
2835c     0B 15 62 F0 | 	shl	arg02, arg03
28360     09 FB 01 F6 | 	mov	result1, arg01
28364     0B FD 61 F6 | 	neg	result2, arg03
28368     FE FA 41 F0 | 	shr	result1, result2
2836c     FD 14 42 F5 | 	or	arg02, result1
28370     0B 13 62 F0 | 	shl	arg01, arg03
28374                 | LR__3550
28374     0A FD 01 F6 | 	mov	result2, arg02
28378     09 FB 01 F6 | 	mov	result1, arg01
2837c                 | __system___int64_shl_ret
2837c     2D 00 64 FD | 	ret
28380                 | 
28380                 | __system___usepins
28380     14 E6 05 F1 | 	add	ptr___system__dat__, #20
28384     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
28388     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
2838c     00 13 CA F7 | 	test	arg01, _var01 wz
28390     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
28394     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
28398     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
2839c     01 15 CA A7 |  if_e	test	arg02, _var02 wz
283a0     00 FA 05 56 |  if_ne	mov	result1, #0
283a4     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
283a8     14 E6 05 F1 | 	add	ptr___system__dat__, #20
283ac     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
283b0     09 03 42 F5 | 	or	_var02, arg01
283b4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
283b8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
283bc     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
283c0     0A 03 42 F5 | 	or	_var02, arg02
283c4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
283c8     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
283cc     01 FA 65 F6 | 	neg	result1, #1
283d0                 | __system___usepins_ret
283d0     2D 00 64 FD | 	ret
283d4                 | 
283d4                 | __system___freepins
283d4     14 E6 05 F1 | 	add	ptr___system__dat__, #20
283d8     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
283dc     09 01 22 F5 | 	andn	_var01, arg01
283e0     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
283e4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
283e8     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
283ec     0A 01 22 F5 | 	andn	_var01, arg02
283f0     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
283f4     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
283f8                 | __system___freepins_ret
283f8     2D 00 64 FD | 	ret
283fc                 | 
283fc                 | __system___float_fromuns
283fc     09 17 0A F6 | 	mov	arg03, arg01 wz
28400     0B FB 01 A6 |  if_e	mov	result1, arg03
28404     24 00 90 AD |  if_e	jmp	#LR__3560
28408     0B 15 92 F7 | 	encod	arg02, arg03 wc
2840c     01 14 06 C1 |  if_b	add	arg02, #1
28410     01 14 86 F1 | 	sub	arg02, #1
28414     1F 12 06 F6 | 	mov	arg01, #31
28418     0A 13 82 F1 | 	sub	arg01, arg02
2841c     09 17 62 F0 | 	shl	arg03, arg01
28420     02 16 46 F0 | 	shr	arg03, #2
28424     00 12 06 F6 | 	mov	arg01, #0
28428     4C 09 B0 FD | 	call	#__system___float_Pack
2842c                 | LR__3560
2842c                 | __system___float_fromuns_ret
2842c     2D 00 64 FD | 	ret
28430                 | 
28430                 | __system___float_add
28430     0F 4A 05 F6 | 	mov	COUNT_, #15
28434     A8 00 A0 FD | 	call	#pushregs_
28438     09 27 02 F6 | 	mov	local01, arg01
2843c     0A 29 02 F6 | 	mov	local02, arg02
28440     00 2A 06 F6 | 	mov	local03, #0
28444     13 2D 02 F6 | 	mov	local04, local01
28448     16 2F 02 F6 | 	mov	local05, local04
2844c     16 2E 46 F7 | 	zerox	local05, #22
28450     16 31 02 F6 | 	mov	local06, local04
28454     01 30 66 F0 | 	shl	local06, #1
28458     18 30 46 F0 | 	shr	local06, #24
2845c     1F 2C 46 F0 | 	shr	local04, #31
28460     14 13 02 F6 | 	mov	arg01, local02
28464     09 FB 01 F6 | 	mov	result1, arg01
28468     FD 32 02 F6 | 	mov	local07, result1
2846c     19 35 02 F6 | 	mov	local08, local07
28470     16 34 46 F7 | 	zerox	local08, #22
28474     19 37 02 F6 | 	mov	local09, local07
28478     01 36 66 F0 | 	shl	local09, #1
2847c     18 36 46 F0 | 	shr	local09, #24
28480     1B 39 02 F6 | 	mov	local10, local09
28484     1F 32 46 F0 | 	shr	local07, #31
28488     00 3A 06 F6 | 	mov	local11, #0
2848c     00 3C 06 F6 | 	mov	local12, #0
28490     1C 31 12 F2 | 	cmp	local06, local10 wc
28494     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
28498     2C 00 90 1D |  if_a	jmp	#LR__3570
2849c     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
284a0     24 00 90 3D |  if_ae	jmp	#LR__3570
284a4     17 3F 02 F6 | 	mov	local13, local05
284a8     1A 2F 02 F6 | 	mov	local05, local08
284ac     1F 35 02 F6 | 	mov	local08, local13
284b0     18 3F 02 F6 | 	mov	local13, local06
284b4     1C 31 02 F6 | 	mov	local06, local10
284b8     1F 39 02 F6 | 	mov	local10, local13
284bc     16 3F 02 F6 | 	mov	local13, local04
284c0     19 2D 02 F6 | 	mov	local04, local07
284c4     1F 33 02 F6 | 	mov	local07, local13
284c8                 | LR__3570
284c8     FF 30 0E F2 | 	cmp	local06, #255 wz
284cc     70 01 90 AD |  if_e	jmp	#LR__3585
284d0     00 30 0E F2 | 	cmp	local06, #0 wz
284d4     AC 01 90 AD |  if_e	jmp	#LR__3587
284d8     17 2E 26 F4 | 	bith	local05, #23
284dc                 | LR__3571
284dc     00 38 0E F2 | 	cmp	local10, #0 wz
284e0     F0 01 90 AD |  if_e	jmp	#LR__3591
284e4     17 34 26 F4 | 	bith	local08, #23
284e8                 | LR__3572
284e8     7F 30 86 F1 | 	sub	local06, #127
284ec     7F 38 86 F1 | 	sub	local10, #127
284f0     18 41 02 F6 | 	mov	local14, local06
284f4     1C 41 82 F1 | 	sub	local14, local10
284f8     97 14 48 FB | 	callpa	#(@LR__3574-@LR__3573)>>2,fcache_load_ptr_
284fc                 | LR__3573
284fc     20 40 56 F2 | 	cmps	local14, #32 wc
28500     20 00 90 CD |  if_b	jmp	#LR__3575
28504     1A 37 02 F6 | 	mov	local09, local08
28508     00 3A 0E F2 | 	cmp	local11, #0 wz
2850c     6F 3A 62 FD | 	wrnz	local11
28510     1D 37 42 F5 | 	or	local09, local11
28514     1B 3B 02 F6 | 	mov	local11, local09
28518     00 34 06 F6 | 	mov	local08, #0
2851c     20 40 86 F1 | 	sub	local14, #32
28520     D8 FF 9F FD | 	jmp	#LR__3573
28524                 | LR__3574
28524                 | LR__3575
28524     00 40 0E F2 | 	cmp	local14, #0 wz
28528     38 00 90 AD |  if_e	jmp	#LR__3576
2852c     1A 3F 02 F6 | 	mov	local13, local08
28530     20 38 06 F6 | 	mov	local10, #32
28534     20 39 82 F1 | 	sub	local10, local14
28538     1C 3F 62 F0 | 	shl	local13, local10
2853c     1D 39 02 F6 | 	mov	local10, local11
28540     20 36 06 F6 | 	mov	local09, #32
28544     20 37 82 F1 | 	sub	local09, local14
28548     1B 39 6A F0 | 	shl	local10, local09 wz
2854c     20 3B 42 F0 | 	shr	local11, local14
28550     20 35 42 F0 | 	shr	local08, local14
28554     1F 3B 42 F5 | 	or	local11, local13
28558     00 42 06 F6 | 	mov	local15, #0
2855c     01 42 06 56 |  if_ne	mov	local15, #1
28560     21 3B 42 F5 | 	or	local11, local15
28564                 | LR__3576
28564     16 43 02 F6 | 	mov	local15, local04
28568     19 43 62 F5 | 	xor	local15, local07
2856c     01 42 CE F7 | 	test	local15, #1 wz
28570     18 00 90 AD |  if_e	jmp	#LR__3577
28574     1A 35 22 F6 | 	not	local08, local08
28578     1D 3B 22 F6 | 	not	local11, local11
2857c     01 3A 0E F1 | 	add	local11, #1 wz
28580     00 42 06 F6 | 	mov	local15, #0
28584     01 42 06 A6 |  if_e	mov	local15, #1
28588     21 35 02 F1 | 	add	local08, local15
2858c                 | LR__3577
2858c     1D 3D 12 F1 | 	add	local12, local11 wc
28590     1A 2F 22 F1 | 	addx	local05, local08
28594     00 2E 56 F2 | 	cmps	local05, #0 wc
28598     1C 00 90 3D |  if_ae	jmp	#LR__3578
2859c     01 2C 66 F5 | 	xor	local04, #1
285a0     17 2F 22 F6 | 	not	local05, local05
285a4     1E 3D 22 F6 | 	not	local12, local12
285a8     01 3C 0E F1 | 	add	local12, #1 wz
285ac     00 42 06 F6 | 	mov	local15, #0
285b0     01 42 06 A6 |  if_e	mov	local15, #1
285b4     21 2F 02 F1 | 	add	local05, local15
285b8                 | LR__3578
285b8     00 80 00 FF 
285bc     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
285c0     28 00 90 CD |  if_b	jmp	#LR__3579
285c4     01 30 06 F1 | 	add	local06, #1
285c8     1E 41 02 F6 | 	mov	local14, local12
285cc     01 40 06 F5 | 	and	local14, #1
285d0     01 3C 46 F0 | 	shr	local12, #1
285d4     17 43 02 F6 | 	mov	local15, local05
285d8     1F 42 66 F0 | 	shl	local15, #31
285dc     21 3D 42 F5 | 	or	local12, local15
285e0     20 3D 42 F5 | 	or	local12, local14
285e4     01 2E 46 F0 | 	shr	local05, #1
285e8     3C 00 90 FD | 	jmp	#LR__3584
285ec                 | LR__3579
285ec     00 40 00 FF 
285f0     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
285f4     30 00 90 3D |  if_ae	jmp	#LR__3583
285f8     00 2E 0E F2 | 	cmp	local05, #0 wz
285fc     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
28600     08 2C 46 A5 |  if_e	or	local04, #8
28604     01 2C 26 A5 |  if_e	andn	local04, #1
28608     1C 00 90 AD |  if_e	jmp	#LR__3582
2860c                 | LR__3580
2860c     00 40 00 FF 
28610     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
28614     10 00 90 3D |  if_ae	jmp	#LR__3581
28618     1E 3D 12 F1 | 	add	local12, local12 wc
2861c     17 2F 22 F1 | 	addx	local05, local05
28620     01 30 86 F1 | 	sub	local06, #1
28624     E4 FF 9F FD | 	jmp	#LR__3580
28628                 | LR__3581
28628                 | LR__3582
28628                 | LR__3583
28628                 | LR__3584
28628     17 13 02 F6 | 	mov	arg01, local05
2862c     1E 15 02 F6 | 	mov	arg02, local12
28630     18 17 02 F6 | 	mov	arg03, local06
28634     16 19 02 F6 | 	mov	arg04, local04
28638     08 35 B0 FD | 	call	#__system__pack_0671
2863c     DC 00 90 FD | 	jmp	#LR__3595
28640                 | LR__3585
28640     FF 38 0E F2 | 	cmp	local10, #255 wz
28644     10 00 90 5D |  if_ne	jmp	#LR__3586
28648     16 33 0A F2 | 	cmp	local07, local04 wz
2864c     00 F8 3F 5F 
28650     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
28654     C4 00 90 5D |  if_ne	jmp	#LR__3595
28658                 | LR__3586
28658     00 2E 0E F2 | 	cmp	local05, #0 wz
2865c     00 F8 3F 5F 
28660     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
28664     B4 00 90 5D |  if_ne	jmp	#LR__3595
28668     1E 15 02 F6 | 	mov	arg02, local12
2866c     18 17 02 F6 | 	mov	arg03, local06
28670     16 19 02 F6 | 	mov	arg04, local04
28674     02 18 46 F5 | 	or	arg04, #2
28678     17 13 02 F6 | 	mov	arg01, local05
2867c     C4 34 B0 FD | 	call	#__system__pack_0671
28680     98 00 90 FD | 	jmp	#LR__3595
28684                 | LR__3587
28684     00 2E 0E F2 | 	cmp	local05, #0 wz
28688     28 00 90 AD |  if_e	jmp	#LR__3590
2868c     01 2E 66 F0 | 	shl	local05, #1
28690     97 0E 48 FB | 	callpa	#(@LR__3589-@LR__3588)>>2,fcache_load_ptr_
28694                 | LR__3588
28694     00 40 00 FF 
28698     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
2869c     18 43 02 C6 |  if_b	mov	local15, local06
286a0     01 42 86 C1 |  if_b	sub	local15, #1
286a4     21 31 02 C6 |  if_b	mov	local06, local15
286a8     01 2E 66 C0 |  if_b	shl	local05, #1
286ac     E4 FF 9F CD |  if_b	jmp	#LR__3588
286b0                 | LR__3589
286b0     28 FE 9F FD | 	jmp	#LR__3571
286b4                 | LR__3590
286b4     19 2D 02 F5 | 	and	local04, local07
286b8     16 19 02 F6 | 	mov	arg04, local04
286bc     08 18 46 F5 | 	or	arg04, #8
286c0     00 12 06 F6 | 	mov	arg01, #0
286c4     00 14 06 F6 | 	mov	arg02, #0
286c8     00 16 06 F6 | 	mov	arg03, #0
286cc     74 34 B0 FD | 	call	#__system__pack_0671
286d0     48 00 90 FD | 	jmp	#LR__3595
286d4                 | LR__3591
286d4     00 34 0E F2 | 	cmp	local08, #0 wz
286d8     28 00 90 AD |  if_e	jmp	#LR__3594
286dc     01 34 66 F0 | 	shl	local08, #1
286e0     97 0E 48 FB | 	callpa	#(@LR__3593-@LR__3592)>>2,fcache_load_ptr_
286e4                 | LR__3592
286e4     00 40 00 FF 
286e8     00 34 16 F2 | 	cmp	local08, ##8388608 wc
286ec     1C 43 02 C6 |  if_b	mov	local15, local10
286f0     01 42 86 C1 |  if_b	sub	local15, #1
286f4     21 39 02 C6 |  if_b	mov	local10, local15
286f8     01 34 66 C0 |  if_b	shl	local08, #1
286fc     E4 FF 9F CD |  if_b	jmp	#LR__3592
28700                 | LR__3593
28700     E4 FD 9F FD | 	jmp	#LR__3572
28704                 | LR__3594
28704     7F 30 86 F1 | 	sub	local06, #127
28708     17 13 02 F6 | 	mov	arg01, local05
2870c     1E 15 02 F6 | 	mov	arg02, local12
28710     18 17 02 F6 | 	mov	arg03, local06
28714     16 19 02 F6 | 	mov	arg04, local04
28718     28 34 B0 FD | 	call	#__system__pack_0671
2871c                 | LR__3595
2871c     A7 F0 03 F6 | 	mov	ptra, fp
28720     B2 00 A0 FD | 	call	#popregs_
28724                 | __system___float_add_ret
28724     2D 00 64 FD | 	ret
28728                 | 
28728                 | __system___float_sqrt
28728     04 4A 05 F6 | 	mov	COUNT_, #4
2872c     A8 00 A0 FD | 	call	#pushregs_
28730     09 27 02 F6 | 	mov	local01, arg01
28734     09 FB 01 F6 | 	mov	result1, arg01
28738     FD 28 02 F6 | 	mov	local02, result1
2873c     14 2B 02 F6 | 	mov	local03, local02
28740     16 2A 46 F7 | 	zerox	local03, #22
28744     14 2D 02 F6 | 	mov	local04, local02
28748     01 2C 66 F0 | 	shl	local04, #1
2874c     18 2C 4E F0 | 	shr	local04, #24 wz
28750     1F 28 46 F0 | 	shr	local02, #31
28754     70 00 90 AD |  if_e	jmp	#LR__3601
28758     17 2A 26 F4 | 	bith	local03, #23
2875c                 | LR__3600
2875c     00 28 0E F2 | 	cmp	local02, #0 wz
28760     00 F8 3F 5F 
28764     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
28768     88 00 90 5D |  if_ne	jmp	#LR__3604
2876c     FF 2C 0E F2 | 	cmp	local04, #255 wz
28770     13 FB 01 A6 |  if_e	mov	result1, local01
28774     7C 00 90 AD |  if_e	jmp	#LR__3604
28778     7F 2C 86 F1 | 	sub	local04, #127
2877c     01 2C CE F7 | 	test	local04, #1 wz
28780     01 2A 66 50 |  if_ne	shl	local03, #1
28784     05 2A 66 F0 | 	shl	local03, #5
28788     15 01 38 FD | 	qsqrt	#0, local03
2878c     01 2C 86 51 |  if_ne	sub	local04, #1
28790     16 2D 52 F6 | 	abs	local04, local04 wc
28794     01 2C 46 F0 | 	shr	local04, #1
28798     16 17 82 F6 | 	negc	arg03, local04
2879c     14 19 02 F6 | 	mov	arg04, local02
287a0     18 12 62 FD | 	getqx	arg01
287a4     09 15 02 F6 | 	mov	arg02, arg01
287a8     19 14 66 F0 | 	shl	arg02, #25
287ac     07 12 46 F0 | 	shr	arg01, #7
287b0     00 80 00 FF 
287b4     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
287b8     01 16 06 31 |  if_ae	add	arg03, #1
287bc     01 12 46 30 |  if_ae	shr	arg01, #1
287c0     80 33 B0 FD | 	call	#__system__pack_0671
287c4     2C 00 90 FD | 	jmp	#LR__3604
287c8                 | LR__3601
287c8     00 2A 0E F2 | 	cmp	local03, #0 wz
287cc     13 FB 01 A6 |  if_e	mov	result1, local01
287d0     20 00 90 AD |  if_e	jmp	#LR__3604
287d4     01 2A 66 F0 | 	shl	local03, #1
287d8     97 0A 48 FB | 	callpa	#(@LR__3603-@LR__3602)>>2,fcache_load_ptr_
287dc                 | LR__3602
287dc     00 40 00 FF 
287e0     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
287e4     01 2C 86 C1 |  if_b	sub	local04, #1
287e8     01 2A 66 C0 |  if_b	shl	local03, #1
287ec     EC FF 9F CD |  if_b	jmp	#LR__3602
287f0                 | LR__3603
287f0     68 FF 9F FD | 	jmp	#LR__3600
287f4                 | LR__3604
287f4     A7 F0 03 F6 | 	mov	ptra, fp
287f8     B2 00 A0 FD | 	call	#popregs_
287fc                 | __system___float_sqrt_ret
287fc     2D 00 64 FD | 	ret
28800                 | 
28800                 | __system___float_mul
28800     0B 4A 05 F6 | 	mov	COUNT_, #11
28804     A8 00 A0 FD | 	call	#pushregs_
28808     09 27 02 F6 | 	mov	local01, arg01
2880c     0A 29 02 F6 | 	mov	local02, arg02
28810     13 2B 02 F6 | 	mov	local03, local01
28814     15 2D 02 F6 | 	mov	local04, local03
28818     16 2C 46 F7 | 	zerox	local04, #22
2881c     15 2F 02 F6 | 	mov	local05, local03
28820     01 2E 66 F0 | 	shl	local05, #1
28824     18 2E 46 F0 | 	shr	local05, #24
28828     1F 2A 46 F0 | 	shr	local03, #31
2882c     14 FB 01 F6 | 	mov	result1, local02
28830     FD 30 02 F6 | 	mov	local06, result1
28834     18 33 02 F6 | 	mov	local07, local06
28838     16 32 46 F7 | 	zerox	local07, #22
2883c     18 35 02 F6 | 	mov	local08, local06
28840     01 34 66 F0 | 	shl	local08, #1
28844     18 34 46 F0 | 	shr	local08, #24
28848     1F 30 46 F0 | 	shr	local06, #31
2884c     18 2B 62 F5 | 	xor	local03, local06
28850     FF 2E 0E F2 | 	cmp	local05, #255 wz
28854     90 00 90 AD |  if_e	jmp	#LR__3613
28858     FF 34 0E F2 | 	cmp	local08, #255 wz
2885c     D8 00 90 AD |  if_e	jmp	#LR__3615
28860     00 2E 0E F2 | 	cmp	local05, #0 wz
28864     0C 01 90 AD |  if_e	jmp	#LR__3616
28868     17 2C 26 F4 | 	bith	local04, #23
2886c                 | LR__3610
2886c     00 34 0E F2 | 	cmp	local08, #0 wz
28870     44 01 90 AD |  if_e	jmp	#LR__3620
28874     17 32 26 F4 | 	bith	local07, #23
28878                 | LR__3611
28878     16 29 02 F6 | 	mov	local02, local04
2887c     04 28 66 F0 | 	shl	local02, #4
28880     19 31 02 F6 | 	mov	local06, local07
28884     05 30 66 F0 | 	shl	local06, #5
28888     18 29 02 FD | 	qmul	local02, local06
2888c     1A 2F 02 F1 | 	add	local05, local08
28890     FE 2E 86 F1 | 	sub	local05, #254
28894     17 37 02 F6 | 	mov	local09, local05
28898     04 2C 66 F0 | 	shl	local04, #4
2889c     05 32 66 F0 | 	shl	local07, #5
288a0     18 38 62 FD | 	getqx	local10
288a4     19 2D 02 FD | 	qmul	local04, local07
288a8     19 3A 62 FD | 	getqy	local11
288ac     00 80 00 FF 
288b0     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
288b4     18 00 90 CD |  if_b	jmp	#LR__3612
288b8     01 36 06 F1 | 	add	local09, #1
288bc     01 38 46 F0 | 	shr	local10, #1
288c0     1D 35 02 F6 | 	mov	local08, local11
288c4     1F 34 66 F0 | 	shl	local08, #31
288c8     1A 39 42 F5 | 	or	local10, local08
288cc     01 3A 46 F0 | 	shr	local11, #1
288d0                 | LR__3612
288d0     1D 13 02 F6 | 	mov	arg01, local11
288d4     1C 15 02 F6 | 	mov	arg02, local10
288d8     1B 17 02 F6 | 	mov	arg03, local09
288dc     15 19 02 F6 | 	mov	arg04, local03
288e0     60 32 B0 FD | 	call	#__system__pack_0671
288e4     10 01 90 FD | 	jmp	#LR__3624
288e8                 | LR__3613
288e8     00 2C 0E F2 | 	cmp	local04, #0 wz
288ec     13 FB 01 56 |  if_ne	mov	result1, local01
288f0     04 01 90 5D |  if_ne	jmp	#LR__3624
288f4     FF 34 56 F2 | 	cmps	local08, #255 wc
288f8     00 34 0E C2 |  if_b	cmp	local08, #0 wz
288fc     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
28900     18 00 90 4D |  if_c_and_nz	jmp	#LR__3614
28904     00 F8 3F CF 
28908     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
2890c     E8 00 90 CD |  if_b	jmp	#LR__3624
28910     00 32 0E F2 | 	cmp	local07, #0 wz
28914     14 FB 01 56 |  if_ne	mov	result1, local02
28918     DC 00 90 5D |  if_ne	jmp	#LR__3624
2891c                 | LR__3614
2891c     02 2A 46 F5 | 	or	local03, #2
28920     00 12 06 F6 | 	mov	arg01, #0
28924     00 14 06 F6 | 	mov	arg02, #0
28928     17 17 02 F6 | 	mov	arg03, local05
2892c     15 19 02 F6 | 	mov	arg04, local03
28930     10 32 B0 FD | 	call	#__system__pack_0671
28934     C0 00 90 FD | 	jmp	#LR__3624
28938                 | LR__3615
28938     00 2E 0E F2 | 	cmp	local05, #0 wz
2893c     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
28940     00 F8 3F AF 
28944     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
28948     AC 00 90 AD |  if_e	jmp	#LR__3624
2894c     00 32 0E F2 | 	cmp	local07, #0 wz
28950     14 FB 01 56 |  if_ne	mov	result1, local02
28954     A0 00 90 5D |  if_ne	jmp	#LR__3624
28958     1A 17 02 F6 | 	mov	arg03, local08
2895c     15 19 02 F6 | 	mov	arg04, local03
28960     02 18 46 F5 | 	or	arg04, #2
28964     00 12 06 F6 | 	mov	arg01, #0
28968     00 14 06 F6 | 	mov	arg02, #0
2896c     D4 31 B0 FD | 	call	#__system__pack_0671
28970     84 00 90 FD | 	jmp	#LR__3624
28974                 | LR__3616
28974     00 2C 0E F2 | 	cmp	local04, #0 wz
28978     20 00 90 AD |  if_e	jmp	#LR__3619
2897c     01 2C 66 F0 | 	shl	local04, #1
28980     97 0A 48 FB | 	callpa	#(@LR__3618-@LR__3617)>>2,fcache_load_ptr_
28984                 | LR__3617
28984     00 40 00 FF 
28988     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
2898c     01 2E 86 C1 |  if_b	sub	local05, #1
28990     01 2C 66 C0 |  if_b	shl	local04, #1
28994     EC FF 9F CD |  if_b	jmp	#LR__3617
28998                 | LR__3618
28998     D0 FE 9F FD | 	jmp	#LR__3610
2899c                 | LR__3619
2899c     08 2A 46 F5 | 	or	local03, #8
289a0     00 12 06 F6 | 	mov	arg01, #0
289a4     00 14 06 F6 | 	mov	arg02, #0
289a8     00 16 06 F6 | 	mov	arg03, #0
289ac     15 19 02 F6 | 	mov	arg04, local03
289b0     90 31 B0 FD | 	call	#__system__pack_0671
289b4     40 00 90 FD | 	jmp	#LR__3624
289b8                 | LR__3620
289b8     00 32 0E F2 | 	cmp	local07, #0 wz
289bc     20 00 90 AD |  if_e	jmp	#LR__3623
289c0     01 32 66 F0 | 	shl	local07, #1
289c4     97 0A 48 FB | 	callpa	#(@LR__3622-@LR__3621)>>2,fcache_load_ptr_
289c8                 | LR__3621
289c8     00 40 00 FF 
289cc     00 32 16 F2 | 	cmp	local07, ##8388608 wc
289d0     01 34 86 C1 |  if_b	sub	local08, #1
289d4     01 32 66 C0 |  if_b	shl	local07, #1
289d8     EC FF 9F CD |  if_b	jmp	#LR__3621
289dc                 | LR__3622
289dc     98 FE 9F FD | 	jmp	#LR__3611
289e0                 | LR__3623
289e0     08 2A 46 F5 | 	or	local03, #8
289e4     00 12 06 F6 | 	mov	arg01, #0
289e8     00 14 06 F6 | 	mov	arg02, #0
289ec     00 16 06 F6 | 	mov	arg03, #0
289f0     15 19 02 F6 | 	mov	arg04, local03
289f4     4C 31 B0 FD | 	call	#__system__pack_0671
289f8                 | LR__3624
289f8     A7 F0 03 F6 | 	mov	ptra, fp
289fc     B2 00 A0 FD | 	call	#popregs_
28a00                 | __system___float_mul_ret
28a00     2D 00 64 FD | 	ret
28a04                 | 
28a04                 | __system___float_div
28a04     0E 4A 05 F6 | 	mov	COUNT_, #14
28a08     A8 00 A0 FD | 	call	#pushregs_
28a0c     09 2B 02 F6 | 	mov	local03, arg01
28a10     0A 2D 02 F6 | 	mov	local04, arg02
28a14     15 2F 02 F6 | 	mov	local05, local03
28a18     17 31 02 F6 | 	mov	local06, local05
28a1c     16 30 46 F7 | 	zerox	local06, #22
28a20     17 33 02 F6 | 	mov	local07, local05
28a24     01 32 66 F0 | 	shl	local07, #1
28a28     18 32 46 F0 | 	shr	local07, #24
28a2c     1F 2E 46 F0 | 	shr	local05, #31
28a30     16 FB 01 F6 | 	mov	result1, local04
28a34     FD 34 02 F6 | 	mov	local08, result1
28a38     1A 37 02 F6 | 	mov	local09, local08
28a3c     16 36 46 F7 | 	zerox	local09, #22
28a40     1A 39 02 F6 | 	mov	local10, local08
28a44     01 38 66 F0 | 	shl	local10, #1
28a48     18 38 46 F0 | 	shr	local10, #24
28a4c     1F 34 46 F0 | 	shr	local08, #31
28a50     1A 2F 62 F5 | 	xor	local05, local08
28a54     FF 32 0E F2 | 	cmp	local07, #255 wz
28a58     D4 00 90 AD |  if_e	jmp	#LR__3635
28a5c     FF 38 0E F2 | 	cmp	local10, #255 wz
28a60     04 01 90 AD |  if_e	jmp	#LR__3636
28a64     00 32 0E F2 | 	cmp	local07, #0 wz
28a68     24 01 90 AD |  if_e	jmp	#LR__3637
28a6c     17 30 26 F4 | 	bith	local06, #23
28a70                 | LR__3630
28a70     00 38 0E F2 | 	cmp	local10, #0 wz
28a74     70 01 90 AD |  if_e	jmp	#LR__3641
28a78     17 36 26 F4 | 	bith	local09, #23
28a7c                 | LR__3631
28a7c     1C 33 82 F1 | 	sub	local07, local10
28a80     19 3B 02 F6 | 	mov	local11, local07
28a84     18 13 02 F6 | 	mov	arg01, local06
28a88     02 12 46 F0 | 	shr	arg01, #2
28a8c     1E 30 66 F0 | 	shl	local06, #30
28a90     18 15 02 F6 | 	mov	arg02, local06
28a94     1B 17 02 F6 | 	mov	arg03, local09
28a98     28 12 62 FD | 	setq	arg01
28a9c     0B 15 12 FD | 	qdiv	arg02, arg03
28aa0     00 3C 06 F6 | 	mov	local12, #0
28aa4     18 26 62 FD | 	getqx	local01
28aa8     19 FC 61 FD | 	getqy	result2
28aac     FE 28 02 F6 | 	mov	local02, result2
28ab0     13 3F 02 F6 | 	mov	local13, local01
28ab4     00 28 4E F2 | 	cmps	local02, #0 wz
28ab8     1F 41 02 F6 | 	mov	local14, local13
28abc     19 40 66 F0 | 	shl	local14, #25
28ac0     01 3C 06 56 |  if_ne	mov	local12, #1
28ac4     1E 41 42 F5 | 	or	local14, local12
28ac8     07 3E 46 F0 | 	shr	local13, #7
28acc     00 80 00 FF 
28ad0     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
28ad4     1C 00 90 CD |  if_b	jmp	#LR__3632
28ad8     01 3A 06 F1 | 	add	local11, #1
28adc     01 40 46 F0 | 	shr	local14, #1
28ae0     1F 3D 02 F6 | 	mov	local12, local13
28ae4     1F 3C 66 F0 | 	shl	local12, #31
28ae8     1E 41 42 F5 | 	or	local14, local12
28aec     01 3E 46 F0 | 	shr	local13, #1
28af0     24 00 90 FD | 	jmp	#LR__3634
28af4                 | LR__3632
28af4     00 40 00 FF 
28af8     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
28afc     18 00 90 3D |  if_ae	jmp	#LR__3633
28b00     01 3A 86 F1 | 	sub	local11, #1
28b04     01 3E 66 F0 | 	shl	local13, #1
28b08     20 3D 02 F6 | 	mov	local12, local14
28b0c     1F 3C 46 F0 | 	shr	local12, #31
28b10     1E 3F 42 F5 | 	or	local13, local12
28b14     01 40 66 F0 | 	shl	local14, #1
28b18                 | LR__3633
28b18                 | LR__3634
28b18     1F 13 02 F6 | 	mov	arg01, local13
28b1c     20 15 02 F6 | 	mov	arg02, local14
28b20     1D 17 02 F6 | 	mov	arg03, local11
28b24     17 19 02 F6 | 	mov	arg04, local05
28b28     18 30 B0 FD | 	call	#__system__pack_0671
28b2c     F8 00 90 FD | 	jmp	#LR__3645
28b30                 | LR__3635
28b30     00 30 0E F2 | 	cmp	local06, #0 wz
28b34     15 FB 01 56 |  if_ne	mov	result1, local03
28b38     EC 00 90 5D |  if_ne	jmp	#LR__3645
28b3c     FF 38 0E F2 | 	cmp	local10, #255 wz
28b40     00 F8 3F AF 
28b44     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
28b48     DC 00 90 AD |  if_e	jmp	#LR__3645
28b4c     02 2E 46 F5 | 	or	local05, #2
28b50     00 12 06 F6 | 	mov	arg01, #0
28b54     00 14 06 F6 | 	mov	arg02, #0
28b58     19 17 02 F6 | 	mov	arg03, local07
28b5c     17 19 02 F6 | 	mov	arg04, local05
28b60     E0 2F B0 FD | 	call	#__system__pack_0671
28b64     C0 00 90 FD | 	jmp	#LR__3645
28b68                 | LR__3636
28b68     00 36 0E F2 | 	cmp	local09, #0 wz
28b6c     16 FB 01 56 |  if_ne	mov	result1, local04
28b70     B4 00 90 5D |  if_ne	jmp	#LR__3645
28b74     17 19 02 F6 | 	mov	arg04, local05
28b78     08 18 46 F5 | 	or	arg04, #8
28b7c     00 12 06 F6 | 	mov	arg01, #0
28b80     00 14 06 F6 | 	mov	arg02, #0
28b84     00 16 06 F6 | 	mov	arg03, #0
28b88     B8 2F B0 FD | 	call	#__system__pack_0671
28b8c     98 00 90 FD | 	jmp	#LR__3645
28b90                 | LR__3637
28b90     00 30 0E F2 | 	cmp	local06, #0 wz
28b94     20 00 90 AD |  if_e	jmp	#LR__3640
28b98     01 30 66 F0 | 	shl	local06, #1
28b9c     97 0A 48 FB | 	callpa	#(@LR__3639-@LR__3638)>>2,fcache_load_ptr_
28ba0                 | LR__3638
28ba0     00 40 00 FF 
28ba4     00 30 16 F2 | 	cmp	local06, ##8388608 wc
28ba8     01 32 86 C1 |  if_b	sub	local07, #1
28bac     01 30 66 C0 |  if_b	shl	local06, #1
28bb0     EC FF 9F CD |  if_b	jmp	#LR__3638
28bb4                 | LR__3639
28bb4     B8 FE 9F FD | 	jmp	#LR__3630
28bb8                 | LR__3640
28bb8     00 38 0E F2 | 	cmp	local10, #0 wz
28bbc     00 36 0E A2 |  if_e	cmp	local09, #0 wz
28bc0     00 F8 3F AF 
28bc4     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
28bc8     5C 00 90 AD |  if_e	jmp	#LR__3645
28bcc     17 19 02 F6 | 	mov	arg04, local05
28bd0     08 18 46 F5 | 	or	arg04, #8
28bd4     00 12 06 F6 | 	mov	arg01, #0
28bd8     00 14 06 F6 | 	mov	arg02, #0
28bdc     00 16 06 F6 | 	mov	arg03, #0
28be0     60 2F B0 FD | 	call	#__system__pack_0671
28be4     40 00 90 FD | 	jmp	#LR__3645
28be8                 | LR__3641
28be8     00 36 0E F2 | 	cmp	local09, #0 wz
28bec     20 00 90 AD |  if_e	jmp	#LR__3644
28bf0     01 36 66 F0 | 	shl	local09, #1
28bf4     97 0A 48 FB | 	callpa	#(@LR__3643-@LR__3642)>>2,fcache_load_ptr_
28bf8                 | LR__3642
28bf8     00 40 00 FF 
28bfc     00 36 16 F2 | 	cmp	local09, ##8388608 wc
28c00     01 38 86 C1 |  if_b	sub	local10, #1
28c04     01 36 66 C0 |  if_b	shl	local09, #1
28c08     EC FF 9F CD |  if_b	jmp	#LR__3642
28c0c                 | LR__3643
28c0c     6C FE 9F FD | 	jmp	#LR__3631
28c10                 | LR__3644
28c10     02 2E 46 F5 | 	or	local05, #2
28c14     00 12 06 F6 | 	mov	arg01, #0
28c18     00 14 06 F6 | 	mov	arg02, #0
28c1c     00 16 06 F6 | 	mov	arg03, #0
28c20     17 19 02 F6 | 	mov	arg04, local05
28c24     1C 2F B0 FD | 	call	#__system__pack_0671
28c28                 | LR__3645
28c28     A7 F0 03 F6 | 	mov	ptra, fp
28c2c     B2 00 A0 FD | 	call	#popregs_
28c30                 | __system___float_div_ret
28c30     2D 00 64 FD | 	ret
28c34                 | 
28c34                 | __system___float_cmp
28c34     00 C0 3F FF 
28c38     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
28c3c     00 C0 3F CF 
28c40     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
28c44     0B FB 01 36 |  if_ae	mov	result1, arg03
28c48     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
28c4c     00 C0 7F FF 
28c50     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
28c54     00 C0 7F CF 
28c58     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
28c5c     0B FB 01 36 |  if_ae	mov	result1, arg03
28c60     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
28c64     00 12 56 F2 | 	cmps	arg01, #0 wc
28c68     2C 00 90 3D |  if_ae	jmp	#LR__3650
28c6c     00 14 56 F2 | 	cmps	arg02, #0 wc
28c70     0A FB 01 C6 |  if_b	mov	result1, arg02
28c74     09 FB 81 C1 |  if_b	sub	result1, arg01
28c78     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
28c7c     00 14 0E F2 | 	cmp	arg02, #0 wz
28c80     00 00 40 AF 
28c84     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
28c88     00 FA 05 A6 |  if_e	mov	result1, #0
28c8c     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
28c90     01 FA 65 F6 | 	neg	result1, #1
28c94     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
28c98                 | LR__3650
28c98     00 14 56 F2 | 	cmps	arg02, #0 wc
28c9c     1C 00 90 3D |  if_ae	jmp	#LR__3651
28ca0     00 12 0E F2 | 	cmp	arg01, #0 wz
28ca4     00 00 40 AF 
28ca8     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
28cac     00 FA 05 A6 |  if_e	mov	result1, #0
28cb0     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
28cb4     01 FA 05 F6 | 	mov	result1, #1
28cb8     08 00 90 FD | 	jmp	#__system___float_cmp_ret
28cbc                 | LR__3651
28cbc     0A 13 82 F1 | 	sub	arg01, arg02
28cc0     09 FB 01 F6 | 	mov	result1, arg01
28cc4                 | __system___float_cmp_ret
28cc4     2D 00 64 FD | 	ret
28cc8                 | 
28cc8                 | __system___float_tointeger
28cc8     02 4A 05 F6 | 	mov	COUNT_, #2
28ccc     A8 00 A0 FD | 	call	#pushregs_
28cd0     50 00 B0 FD | 	call	#__system___float_Unpack
28cd4     FF FF 7F FF 
28cd8     FF FD 55 F2 | 	cmps	result2, ##-1 wc
28cdc     34 00 90 CD |  if_b	jmp	#LR__3660
28ce0     1F FC 55 F2 | 	cmps	result2, #31 wc
28ce4     2C 00 90 3D |  if_ae	jmp	#LR__3660
28ce8     02 FE 65 F0 | 	shl	result3, #2
28cec     1E 26 06 F6 | 	mov	local01, #30
28cf0     FE 26 82 F1 | 	sub	local01, result2
28cf4     13 FF 41 F0 | 	shr	result3, local01
28cf8     FF 28 02 F6 | 	mov	local02, result3
28cfc     0A 29 02 F1 | 	add	local02, arg02
28d00     01 28 46 F0 | 	shr	local02, #1
28d04     00 FA 0D F2 | 	cmp	result1, #0 wz
28d08     14 29 62 56 |  if_ne	neg	local02, local02
28d0c     14 FB 01 F6 | 	mov	result1, local02
28d10     04 00 90 FD | 	jmp	#LR__3661
28d14                 | LR__3660
28d14     00 FA 05 F6 | 	mov	result1, #0
28d18                 | LR__3661
28d18     A7 F0 03 F6 | 	mov	ptra, fp
28d1c     B2 00 A0 FD | 	call	#popregs_
28d20                 | __system___float_tointeger_ret
28d20     2D 00 64 FD | 	ret
28d24                 | 
28d24                 | __system___float_Unpack
28d24     09 01 02 F6 | 	mov	_var01, arg01
28d28     1F 00 46 F0 | 	shr	_var01, #31
28d2c     09 03 02 F6 | 	mov	_var02, arg01
28d30     01 02 66 F0 | 	shl	_var02, #1
28d34     18 02 4E F0 | 	shr	_var02, #24 wz
28d38     17 13 06 F4 | 	bitl	arg01, #279
28d3c     06 12 66 50 |  if_ne	shl	arg01, #6
28d40     1D 12 26 54 |  if_ne	bith	arg01, #29
28d44     1C 00 90 5D |  if_ne	jmp	#LR__3670
28d48     09 05 92 F7 | 	encod	_var03, arg01 wc
28d4c     01 04 06 C1 |  if_b	add	_var03, #1
28d50     17 04 86 F1 | 	sub	_var03, #23
28d54     02 03 02 F6 | 	mov	_var02, _var03
28d58     07 FC 05 F6 | 	mov	result2, #7
28d5c     02 FD 81 F1 | 	sub	result2, _var03
28d60     FE 12 62 F0 | 	shl	arg01, result2
28d64                 | LR__3670
28d64     7F 02 86 F1 | 	sub	_var02, #127
28d68     09 FF 01 F6 | 	mov	result3, arg01
28d6c     00 FB 01 F6 | 	mov	result1, _var01
28d70     01 FD 01 F6 | 	mov	result2, _var02
28d74                 | __system___float_Unpack_ret
28d74     2D 00 64 FD | 	ret
28d78                 | 
28d78                 | __system___float_Pack
28d78     00 00 06 F6 | 	mov	_var01, #0
28d7c     00 16 0E F2 | 	cmp	arg03, #0 wz
28d80     8C 00 90 AD |  if_e	jmp	#LR__3681
28d84     0B 03 92 F7 | 	encod	_var02, arg03 wc
28d88     01 02 06 C1 |  if_b	add	_var02, #1
28d8c     21 00 06 F6 | 	mov	_var01, #33
28d90     01 01 82 F1 | 	sub	_var01, _var02
28d94     00 17 62 F0 | 	shl	arg03, _var01
28d98     03 02 06 F6 | 	mov	_var02, #3
28d9c     00 03 82 F1 | 	sub	_var02, _var01
28da0     01 15 02 F1 | 	add	arg02, _var02
28da4     0A 05 02 F6 | 	mov	_var03, arg02
28da8     00 17 06 F1 | 	add	arg03, #256
28dac     0B 03 02 F6 | 	mov	_var02, arg03
28db0     FF 02 2E F5 | 	andn	_var02, #255 wz
28db4     01 04 06 A1 |  if_e	add	_var03, #1
28db8     7F 04 06 F1 | 	add	_var03, #127
28dbc     FF FF 7F FF 
28dc0     E9 05 46 F3 | 	fges	_var03, ##-23
28dc4     FF 04 66 F3 | 	fles	_var03, #255
28dc8     01 04 56 F2 | 	cmps	_var03, #1 wc
28dcc     1C 00 90 3D |  if_ae	jmp	#LR__3680
28dd0     01 16 46 F0 | 	shr	arg03, #1
28dd4     1F 02 C6 F9 | 	decod	_var02, #31
28dd8     0B 03 02 F1 | 	add	_var02, arg03
28ddc     02 05 62 F6 | 	neg	_var03, _var03
28de0     02 03 42 F0 | 	shr	_var02, _var03
28de4     01 17 02 F6 | 	mov	arg03, _var02
28de8     00 04 06 F6 | 	mov	_var03, #0
28dec                 | LR__3680
28dec     09 FB 01 F6 | 	mov	result1, arg01
28df0     1F FA 65 F0 | 	shl	result1, #31
28df4     02 03 02 F6 | 	mov	_var02, _var03
28df8     17 02 66 F0 | 	shl	_var02, #23
28dfc     01 FB 41 F5 | 	or	result1, _var02
28e00     0B 07 02 F6 | 	mov	_var04, arg03
28e04     09 06 46 F0 | 	shr	_var04, #9
28e08     03 FB 41 F5 | 	or	result1, _var04
28e0c     04 00 90 FD | 	jmp	#__system___float_Pack_ret
28e10                 | LR__3681
28e10     00 FB 01 F6 | 	mov	result1, _var01
28e14                 | __system___float_Pack_ret
28e14     2D 00 64 FD | 	ret
28e18                 | 
28e18                 | __system___basic_print_float
28e18     05 4A 05 F6 | 	mov	COUNT_, #5
28e1c     A8 00 A0 FD | 	call	#pushregs_
28e20     09 27 02 F6 | 	mov	local01, arg01
28e24     0A 29 02 F6 | 	mov	local02, arg02
28e28     0B 2B 0A F6 | 	mov	local03, arg03 wz
28e2c     0C 2D 02 F6 | 	mov	local04, arg04
28e30     14 00 90 5D |  if_ne	jmp	#LR__3690
28e34     23 2C 0E F2 | 	cmp	local04, #35 wz
28e38     80 02 10 AF 
28e3c     00 2E 06 A6 |  if_e	mov	local05, ##537198592
28e40     1D 2E C6 59 |  if_ne	decod	local05, #29
28e44     17 2B 02 F6 | 	mov	local03, local05
28e48                 | LR__3690
28e48     13 13 02 F6 | 	mov	arg01, local01
28e4c     D8 27 B0 FD | 	call	#__system___gettxfunc
28e50     FD 2E 0A F6 | 	mov	local05, result1 wz
28e54     00 FA 05 A6 |  if_e	mov	result1, #0
28e58     17 13 02 56 |  if_ne	mov	arg01, local05
28e5c     15 15 02 56 |  if_ne	mov	arg02, local03
28e60     14 17 02 56 |  if_ne	mov	arg03, local02
28e64     16 19 02 56 |  if_ne	mov	arg04, local04
28e68     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
28e6c     A7 F0 03 F6 | 	mov	ptra, fp
28e70     B2 00 A0 FD | 	call	#popregs_
28e74                 | __system___basic_print_float_ret
28e74     2D 00 64 FD | 	ret
28e78                 | 
28e78                 | __system____builtin_atoi
28e78     07 4A 05 F6 | 	mov	COUNT_, #7
28e7c     A8 00 A0 FD | 	call	#pushregs_
28e80                 | __system____builtin_atoi_enter
28e80     09 27 02 F6 | 	mov	local01, arg01
28e84     0A 29 02 F6 | 	mov	local02, arg02
28e88     00 2A 06 F6 | 	mov	local03, #0
28e8c     00 2C 06 F6 | 	mov	local04, #0
28e90     00 2E 06 F6 | 	mov	local05, #0
28e94     97 1C 48 FB | 	callpa	#(@LR__3702-@LR__3700)>>2,fcache_load_ptr_
28e98                 | LR__3700
28e98     13 31 C2 FA | 	rdbyte	local06, local01
28e9c     20 30 0E F2 | 	cmp	local06, #32 wz
28ea0     01 26 06 A1 |  if_e	add	local01, #1
28ea4     F0 FF 9F AD |  if_e	jmp	#LR__3700
28ea8     13 33 C2 FA | 	rdbyte	local07, local01
28eac                 | LR__3701
28eac     2D 32 0E F2 | 	cmp	local07, #45 wz
28eb0     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
28eb4     18 00 90 5D |  if_ne	jmp	#LR__3703
28eb8     01 26 06 F1 | 	add	local01, #1
28ebc     2D 32 0E F2 | 	cmp	local07, #45 wz
28ec0     01 30 06 A6 |  if_e	mov	local06, #1
28ec4     18 2F C2 A2 |  if_e	subr	local05, local06
28ec8     13 33 C2 FA | 	rdbyte	local07, local01
28ecc     DC FF 9F FD | 	jmp	#LR__3701
28ed0                 | LR__3702
28ed0                 | LR__3703
28ed0     00 28 0E F2 | 	cmp	local02, #0 wz
28ed4     1C 00 90 5D |  if_ne	jmp	#LR__3705
28ed8     24 32 0E F2 | 	cmp	local07, #36 wz
28edc     10 28 06 A6 |  if_e	mov	local02, #16
28ee0     01 26 06 A1 |  if_e	add	local01, #1
28ee4     0C 00 90 AD |  if_e	jmp	#LR__3704
28ee8     25 32 0E F2 | 	cmp	local07, #37 wz
28eec     02 28 06 A6 |  if_e	mov	local02, #2
28ef0     01 26 06 A1 |  if_e	add	local01, #1
28ef4                 | LR__3704
28ef4                 | LR__3705
28ef4     97 48 48 FB | 	callpa	#(@LR__3713-@LR__3706)>>2,fcache_load_ptr_
28ef8                 | LR__3706
28ef8                 | LR__3707
28ef8     13 33 C2 FA | 	rdbyte	local07, local01
28efc     5F 32 0E F2 | 	cmp	local07, #95 wz
28f00     01 26 06 F1 | 	add	local01, #1
28f04     F0 FF 9F AD |  if_e	jmp	#LR__3707
28f08     30 32 0E F2 | 	cmp	local07, #48 wz
28f0c     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
28f10     00 2C 06 A6 |  if_e	mov	local04, #0
28f14     60 00 90 AD |  if_e	jmp	#LR__3712
28f18     31 32 56 F2 | 	cmps	local07, #49 wc
28f1c     18 00 90 CD |  if_b	jmp	#LR__3708
28f20     3A 32 56 F2 | 	cmps	local07, #58 wc
28f24     19 2D 02 C6 |  if_b	mov	local04, local07
28f28     30 2C 86 C1 |  if_b	sub	local04, #48
28f2c     00 28 0E C2 |  if_b	cmp	local02, #0 wz
28f30     0A 28 06 86 |  if_c_and_z	mov	local02, #10
28f34     40 00 90 CD |  if_b	jmp	#LR__3711
28f38                 | LR__3708
28f38     0B 28 56 F2 | 	cmps	local02, #11 wc
28f3c     61 32 56 32 |  if_ae	cmps	local07, #97 wc
28f40     14 00 90 CD |  if_b	jmp	#LR__3709
28f44     67 32 56 F2 | 	cmps	local07, #103 wc
28f48     61 32 86 C1 |  if_b	sub	local07, #97
28f4c     0A 2C 06 C6 |  if_b	mov	local04, #10
28f50     19 2D 02 C1 |  if_b	add	local04, local07
28f54     20 00 90 CD |  if_b	jmp	#LR__3710
28f58                 | LR__3709
28f58     0B 28 56 F2 | 	cmps	local02, #11 wc
28f5c     41 32 56 32 |  if_ae	cmps	local07, #65 wc
28f60     24 00 90 CD |  if_b	jmp	#LR__3714
28f64     47 32 56 F2 | 	cmps	local07, #71 wc
28f68     41 32 86 C1 |  if_b	sub	local07, #65
28f6c     0A 2C 06 C6 |  if_b	mov	local04, #10
28f70     19 2D 02 C1 |  if_b	add	local04, local07
28f74     10 00 90 3D |  if_ae	jmp	#LR__3714
28f78                 | LR__3710
28f78                 | LR__3711
28f78                 | LR__3712
28f78     15 29 02 FD | 	qmul	local02, local03
28f7c     18 2A 62 FD | 	getqx	local03
28f80     16 2B 02 F1 | 	add	local03, local04
28f84     70 FF 9F FD | 	jmp	#LR__3706
28f88                 | LR__3713
28f88                 | LR__3714
28f88     00 28 0E F2 | 	cmp	local02, #0 wz
28f8c     64 00 90 5D |  if_ne	jmp	#LR__3720
28f90     78 32 0E F2 | 	cmp	local07, #120 wz
28f94     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
28f98     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
28f9c     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
28fa0     14 00 90 5D |  if_ne	jmp	#LR__3715
28fa4     13 13 02 F6 | 	mov	arg01, local01
28fa8     10 14 06 F6 | 	mov	arg02, #16
28fac     C8 FE BF FD | 	call	#__system____builtin_atoi
28fb0     FD 2A 02 F6 | 	mov	local03, result1
28fb4     3C 00 90 FD | 	jmp	#LR__3719
28fb8                 | LR__3715
28fb8     62 32 0E F2 | 	cmp	local07, #98 wz
28fbc     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
28fc0     14 00 90 5D |  if_ne	jmp	#LR__3716
28fc4     13 13 02 F6 | 	mov	arg01, local01
28fc8     02 14 06 F6 | 	mov	arg02, #2
28fcc     A8 FE BF FD | 	call	#__system____builtin_atoi
28fd0     FD 2A 02 F6 | 	mov	local03, result1
28fd4     1C 00 90 FD | 	jmp	#LR__3718
28fd8                 | LR__3716
28fd8     6F 32 0E F2 | 	cmp	local07, #111 wz
28fdc     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
28fe0     10 00 90 5D |  if_ne	jmp	#LR__3717
28fe4     13 13 02 F6 | 	mov	arg01, local01
28fe8     08 14 06 F6 | 	mov	arg02, #8
28fec     88 FE BF FD | 	call	#__system____builtin_atoi
28ff0     FD 2A 02 F6 | 	mov	local03, result1
28ff4                 | LR__3717
28ff4                 | LR__3718
28ff4                 | LR__3719
28ff4                 | LR__3720
28ff4     00 2E 0E F2 | 	cmp	local05, #0 wz
28ff8     15 2B 62 56 |  if_ne	neg	local03, local03
28ffc     15 FB 01 F6 | 	mov	result1, local03
29000     A7 F0 03 F6 | 	mov	ptra, fp
29004     B2 00 A0 FD | 	call	#popregs_
29008                 | __system____builtin_atoi_ret
29008     2D 00 64 FD | 	ret
2900c                 | 
2900c                 | __system____builtin_atof
2900c     07 4A 05 F6 | 	mov	COUNT_, #7
29010     A8 00 A0 FD | 	call	#pushregs_
29014     09 27 02 F6 | 	mov	local01, arg01
29018     00 28 06 F6 | 	mov	local02, #0
2901c     00 2A 06 F6 | 	mov	local03, #0
29020     00 2C 06 F6 | 	mov	local04, #0
29024     00 2E 06 F6 | 	mov	local05, #0
29028     97 08 48 FB | 	callpa	#(@LR__3731-@LR__3730)>>2,fcache_load_ptr_
2902c                 | LR__3730
2902c     13 17 C2 FA | 	rdbyte	arg03, local01
29030     20 16 0E F2 | 	cmp	arg03, #32 wz
29034     01 26 06 A1 |  if_e	add	local01, #1
29038     F0 FF 9F AD |  if_e	jmp	#LR__3730
2903c                 | LR__3731
2903c     13 31 C2 FA | 	rdbyte	local06, local01
29040                 | LR__3732
29040     2B 30 0E F2 | 	cmp	local06, #43 wz
29044     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
29048     14 00 90 5D |  if_ne	jmp	#LR__3733
2904c     2D 30 0E F2 | 	cmp	local06, #45 wz
29050     1F 2C E6 A4 |  if_e	bitnot	local04, #31
29054     01 26 06 F1 | 	add	local01, #1
29058     13 31 C2 FA | 	rdbyte	local06, local01
2905c     E0 FF 9F FD | 	jmp	#LR__3732
29060                 | LR__3733
29060                 | LR__3734
29060     97 08 48 FB | 	callpa	#(@LR__3736-@LR__3735)>>2,fcache_load_ptr_
29064                 | LR__3735
29064     13 31 C2 FA | 	rdbyte	local06, local01
29068     5F 30 0E F2 | 	cmp	local06, #95 wz
2906c     01 26 06 F1 | 	add	local01, #1
29070     F0 FF 9F AD |  if_e	jmp	#LR__3735
29074                 | LR__3736
29074     00 30 0E F2 | 	cmp	local06, #0 wz
29078     5C 00 90 AD |  if_e	jmp	#LR__3738
2907c     30 30 56 F2 | 	cmps	local06, #48 wc
29080     44 00 90 CD |  if_b	jmp	#LR__3737
29084     3A 30 56 F2 | 	cmps	local06, #58 wc
29088     3C 00 90 3D |  if_ae	jmp	#LR__3737
2908c     14 13 02 F6 | 	mov	arg01, local02
29090     00 90 20 FF 
29094     00 14 06 F6 | 	mov	arg02, ##1092616192
29098     64 F7 BF FD | 	call	#__system___float_mul
2909c     FD 28 02 F6 | 	mov	local02, result1
290a0     30 30 86 F1 | 	sub	local06, #48
290a4     18 13 02 F6 | 	mov	arg01, local06
290a8     50 F3 BF FD | 	call	#__system___float_fromuns
290ac     FD 14 02 F6 | 	mov	arg02, result1
290b0     14 13 02 F6 | 	mov	arg01, local02
290b4     78 F3 BF FD | 	call	#__system___float_add
290b8     FD 28 02 F6 | 	mov	local02, result1
290bc     00 2E 0E F2 | 	cmp	local05, #0 wz
290c0     01 2A 86 51 |  if_ne	sub	local03, #1
290c4     98 FF 9F FD | 	jmp	#LR__3734
290c8                 | LR__3737
290c8     2E 30 0E F2 | 	cmp	local06, #46 wz
290cc     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
290d0     01 2E 06 A6 |  if_e	mov	local05, #1
290d4     88 FF 9F AD |  if_e	jmp	#LR__3734
290d8                 | LR__3738
290d8     45 30 0E F2 | 	cmp	local06, #69 wz
290dc     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
290e0     18 00 90 5D |  if_ne	jmp	#LR__3739
290e4     13 13 02 F6 | 	mov	arg01, local01
290e8     00 14 06 F6 | 	mov	arg02, #0
290ec     88 FD BF FD | 	call	#__system____builtin_atoi
290f0     15 FB 01 F1 | 	add	result1, local03
290f4     FD 32 02 F6 | 	mov	local07, result1
290f8     04 00 90 FD | 	jmp	#LR__3740
290fc                 | LR__3739
290fc     15 33 02 F6 | 	mov	local07, local03
29100                 | LR__3740
29100     19 17 02 F6 | 	mov	arg03, local07
29104     14 13 02 F6 | 	mov	arg01, local02
29108     00 90 20 FF 
2910c     00 14 06 F6 | 	mov	arg02, ##1092616192
29110     F4 06 B0 FD | 	call	#__system___float_pow_n
29114     16 FB 61 F5 | 	xor	result1, local04
29118     A7 F0 03 F6 | 	mov	ptra, fp
2911c     B2 00 A0 FD | 	call	#popregs_
29120                 | __system____builtin_atof_ret
29120     2D 00 64 FD | 	ret
29124                 | 
29124                 | __system____builtin_ilogb
29124     FC FB BF FD | 	call	#__system___float_Unpack
29128     00 FE 0D F2 | 	cmp	result3, #0 wz
2912c     00 00 40 AF 
29130     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
29134     24 00 90 AD |  if_e	jmp	#LR__3751
29138     80 FC 0D F2 | 	cmp	result2, #128 wz
2913c     18 00 90 5D |  if_ne	jmp	#LR__3750
29140     00 00 10 FF 
29144     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
29148     1E FA CD A9 |  if_e	bmask	result1, #30
2914c     0C 00 90 AD |  if_e	jmp	#LR__3751
29150     1F FA C5 F9 | 	decod	result1, #31
29154     04 00 90 FD | 	jmp	#LR__3751
29158                 | LR__3750
29158     FE FA 01 F6 | 	mov	result1, result2
2915c                 | LR__3751
2915c                 | __system____builtin_ilogb_ret
2915c     2D 00 64 FD | 	ret
29160                 | 
29160                 | __system____builtin_sinf
29160     03 4A 05 F6 | 	mov	COUNT_, #3
29164     A8 00 A0 FD | 	call	#pushregs_
29168     09 27 02 F6 | 	mov	local01, arg01
2916c     87 64 20 FF 
29170     DB 15 06 F6 | 	mov	arg02, ##1086918619
29174     8C F8 BF FD | 	call	#__system___float_div
29178     FD 12 02 F6 | 	mov	arg01, result1
2917c     00 14 06 F6 | 	mov	arg02, #0
29180     44 FB BF FD | 	call	#__system___float_tointeger
29184     FD 16 0A F6 | 	mov	arg03, result1 wz
29188     44 00 90 AD |  if_e	jmp	#LR__3760
2918c     0B 13 52 F6 | 	abs	arg01, arg03 wc
29190     1F 28 C6 C9 |  if_b	decod	local02, #31
29194     00 28 06 36 |  if_ae	mov	local02, #0
29198     60 F2 BF FD | 	call	#__system___float_fromuns
2919c     14 FB 61 F5 | 	xor	result1, local02
291a0     FD 12 02 F6 | 	mov	arg01, result1
291a4     1E 14 C6 F9 | 	decod	arg02, #30
291a8     54 F6 BF FD | 	call	#__system___float_mul
291ac     FD 12 02 F6 | 	mov	arg01, result1
291b0     87 24 20 FF 
291b4     DB 15 06 F6 | 	mov	arg02, ##1078530011
291b8     44 F6 BF FD | 	call	#__system___float_mul
291bc     FD 14 02 F6 | 	mov	arg02, result1
291c0     13 13 02 F6 | 	mov	arg01, local01
291c4     1F 14 E6 F4 | 	bitnot	arg02, #31
291c8     64 F2 BF FD | 	call	#__system___float_add
291cc     FD 26 02 F6 | 	mov	local01, result1
291d0                 | LR__3760
291d0     13 13 02 F6 | 	mov	arg01, local01
291d4     66 E6 1E FF 
291d8     CD 14 06 F6 | 	mov	arg02, ##1036831949
291dc     01 16 06 F6 | 	mov	arg03, #1
291e0     50 FA BF FD | 	call	#__system___float_cmp
291e4     00 FA 55 F2 | 	cmps	result1, #0 wc
291e8     5C 00 90 3D |  if_ae	jmp	#LR__3761
291ec     13 13 02 F6 | 	mov	arg01, local01
291f0     66 E6 5E FF 
291f4     CD 14 06 F6 | 	mov	arg02, ##-1110651699
291f8     01 16 66 F6 | 	neg	arg03, #1
291fc     34 FA BF FD | 	call	#__system___float_cmp
29200     01 FA 55 F2 | 	cmps	result1, #1 wc
29204     40 00 90 CD |  if_b	jmp	#LR__3761
29208     13 13 02 F6 | 	mov	arg01, local01
2920c     13 15 02 F6 | 	mov	arg02, local01
29210     EC F5 BF FD | 	call	#__system___float_mul
29214     FD 12 02 F6 | 	mov	arg01, result1
29218     13 15 02 F6 | 	mov	arg02, local01
2921c     E0 F5 BF FD | 	call	#__system___float_mul
29220     FD 12 02 F6 | 	mov	arg01, result1
29224     00 60 20 FF 
29228     00 14 06 F6 | 	mov	arg02, ##1086324736
2922c     D4 F7 BF FD | 	call	#__system___float_div
29230     FD 14 02 F6 | 	mov	arg02, result1
29234     13 13 02 F6 | 	mov	arg01, local01
29238     1F 14 E6 F4 | 	bitnot	arg02, #31
2923c     F0 F1 BF FD | 	call	#__system___float_add
29240     FD 2A 02 F6 | 	mov	local03, result1
29244     54 00 90 FD | 	jmp	#LR__3762
29248                 | LR__3761
29248     13 13 02 F6 | 	mov	arg01, local01
2924c     7C 91 26 FF 
29250     83 15 06 F6 | 	mov	arg02, ##1294137731
29254     A8 F5 BF FD | 	call	#__system___float_mul
29258     FD 12 02 F6 | 	mov	arg01, result1
2925c     00 14 06 F6 | 	mov	arg02, #0
29260     64 FA BF FD | 	call	#__system___float_tointeger
29264     02 FA 65 F0 | 	shl	result1, #2
29268     00 00 A0 FF 
2926c     FD 00 48 FD | 	qrotate	##1073741824, result1
29270     19 12 62 FD | 	getqy	arg01
29274     09 13 52 F6 | 	abs	arg01, arg01 wc
29278     1F 28 C6 C9 |  if_b	decod	local02, #31
2927c     00 28 06 36 |  if_ae	mov	local02, #0
29280     78 F1 BF FD | 	call	#__system___float_fromuns
29284     14 FB 61 F5 | 	xor	result1, local02
29288     FD 12 02 F6 | 	mov	arg01, result1
2928c     00 40 27 FF 
29290     00 14 06 F6 | 	mov	arg02, ##1317011456
29294     6C F7 BF FD | 	call	#__system___float_div
29298     FD 2A 02 F6 | 	mov	local03, result1
2929c                 | LR__3762
2929c     15 FB 01 F6 | 	mov	result1, local03
292a0     A7 F0 03 F6 | 	mov	ptra, fp
292a4     B2 00 A0 FD | 	call	#popregs_
292a8                 | __system____builtin_sinf_ret
292a8     2D 00 64 FD | 	ret
292ac                 | 
292ac                 | __system____builtin_tanf
292ac     02 4A 05 F6 | 	mov	COUNT_, #2
292b0     A8 00 A0 FD | 	call	#pushregs_
292b4     09 27 02 F6 | 	mov	local01, arg01
292b8     A4 FE BF FD | 	call	#__system____builtin_sinf
292bc     FD 28 02 F6 | 	mov	local02, result1
292c0     13 15 02 F6 | 	mov	arg02, local01
292c4     87 E4 1F FF 
292c8     DB 13 06 F6 | 	mov	arg01, ##1070141403
292cc     1F 14 E6 F4 | 	bitnot	arg02, #31
292d0     5C F1 BF FD | 	call	#__system___float_add
292d4     FD 12 02 F6 | 	mov	arg01, result1
292d8     84 FE BF FD | 	call	#__system____builtin_sinf
292dc     FD 14 02 F6 | 	mov	arg02, result1
292e0     14 13 02 F6 | 	mov	arg01, local02
292e4     1C F7 BF FD | 	call	#__system___float_div
292e8     A7 F0 03 F6 | 	mov	ptra, fp
292ec     B2 00 A0 FD | 	call	#popregs_
292f0                 | __system____builtin_tanf_ret
292f0     2D 00 64 FD | 	ret
292f4                 | 
292f4                 | __system____builtin_asinf
292f4     01 4A 05 F6 | 	mov	COUNT_, #1
292f8     A8 00 A0 FD | 	call	#pushregs_
292fc     09 27 02 F6 | 	mov	local01, arg01
29300     13 15 02 F6 | 	mov	arg02, local01
29304     13 13 02 F6 | 	mov	arg01, local01
29308     F4 F4 BF FD | 	call	#__system___float_mul
2930c     FD 14 02 F6 | 	mov	arg02, result1
29310     00 C0 1F FF 
29314     00 12 06 F6 | 	mov	arg01, ##1065353216
29318     1F 14 E6 F4 | 	bitnot	arg02, #31
2931c     10 F1 BF FD | 	call	#__system___float_add
29320     FD 12 02 F6 | 	mov	arg01, result1
29324     00 F4 BF FD | 	call	#__system___float_sqrt
29328     FD 14 02 F6 | 	mov	arg02, result1
2932c     13 13 02 F6 | 	mov	arg01, local01
29330     58 00 B0 FD | 	call	#__system____builtin_atan2f
29334     A7 F0 03 F6 | 	mov	ptra, fp
29338     B2 00 A0 FD | 	call	#popregs_
2933c                 | __system____builtin_asinf_ret
2933c     2D 00 64 FD | 	ret
29340                 | 
29340                 | __system____builtin_acosf
29340     01 4A 05 F6 | 	mov	COUNT_, #1
29344     A8 00 A0 FD | 	call	#pushregs_
29348     09 27 02 F6 | 	mov	local01, arg01
2934c     13 15 02 F6 | 	mov	arg02, local01
29350     13 13 02 F6 | 	mov	arg01, local01
29354     A8 F4 BF FD | 	call	#__system___float_mul
29358     FD 14 02 F6 | 	mov	arg02, result1
2935c     00 C0 1F FF 
29360     00 12 06 F6 | 	mov	arg01, ##1065353216
29364     1F 14 E6 F4 | 	bitnot	arg02, #31
29368     C4 F0 BF FD | 	call	#__system___float_add
2936c     FD 12 02 F6 | 	mov	arg01, result1
29370     B4 F3 BF FD | 	call	#__system___float_sqrt
29374     FD 12 02 F6 | 	mov	arg01, result1
29378     13 15 02 F6 | 	mov	arg02, local01
2937c     0C 00 B0 FD | 	call	#__system____builtin_atan2f
29380     A7 F0 03 F6 | 	mov	ptra, fp
29384     B2 00 A0 FD | 	call	#popregs_
29388                 | __system____builtin_acosf_ret
29388     2D 00 64 FD | 	ret
2938c                 | 
2938c                 | __system____builtin_atan2f
2938c     04 4A 05 F6 | 	mov	COUNT_, #4
29390     A8 00 A0 FD | 	call	#pushregs_
29394     09 27 02 F6 | 	mov	local01, arg01
29398     0A 29 02 F6 | 	mov	local02, arg02
2939c     13 13 02 F6 | 	mov	arg01, local01
293a0     00 14 06 F6 | 	mov	arg02, #0
293a4     01 16 06 F6 | 	mov	arg03, #1
293a8     88 F8 BF FD | 	call	#__system___float_cmp
293ac     00 FA 0D F2 | 	cmp	result1, #0 wz
293b0     28 00 90 5D |  if_ne	jmp	#LR__3770
293b4     14 13 02 F6 | 	mov	arg01, local02
293b8     00 14 06 F6 | 	mov	arg02, #0
293bc     01 16 06 F6 | 	mov	arg03, #1
293c0     70 F8 BF FD | 	call	#__system___float_cmp
293c4     00 FA 55 F2 | 	cmps	result1, #0 wc
293c8     87 24 60 CF 
293cc     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
293d0     DC 00 90 CD |  if_b	jmp	#LR__3771
293d4     00 FA 05 F6 | 	mov	result1, #0
293d8     D4 00 90 FD | 	jmp	#LR__3771
293dc                 | LR__3770
293dc     14 13 02 F6 | 	mov	arg01, local02
293e0     14 15 02 F6 | 	mov	arg02, local02
293e4     18 F4 BF FD | 	call	#__system___float_mul
293e8     FD 2A 02 F6 | 	mov	local03, result1
293ec     13 13 02 F6 | 	mov	arg01, local01
293f0     13 15 02 F6 | 	mov	arg02, local01
293f4     08 F4 BF FD | 	call	#__system___float_mul
293f8     FD 14 02 F6 | 	mov	arg02, result1
293fc     15 13 02 F6 | 	mov	arg01, local03
29400     2C F0 BF FD | 	call	#__system___float_add
29404     FD 12 02 F6 | 	mov	arg01, result1
29408     1C F3 BF FD | 	call	#__system___float_sqrt
2940c     FD 2A 02 F6 | 	mov	local03, result1
29410     14 13 02 F6 | 	mov	arg01, local02
29414     15 15 02 F6 | 	mov	arg02, local03
29418     E8 F5 BF FD | 	call	#__system___float_div
2941c     FD 28 02 F6 | 	mov	local02, result1
29420     13 13 02 F6 | 	mov	arg01, local01
29424     15 15 02 F6 | 	mov	arg02, local03
29428     D8 F5 BF FD | 	call	#__system___float_div
2942c     FD 26 02 F6 | 	mov	local01, result1
29430     00 40 27 FF 
29434     00 12 06 F6 | 	mov	arg01, ##1317011456
29438     14 15 02 F6 | 	mov	arg02, local02
2943c     C0 F3 BF FD | 	call	#__system___float_mul
29440     FD 12 02 F6 | 	mov	arg01, result1
29444     00 14 06 F6 | 	mov	arg02, #0
29448     7C F8 BF FD | 	call	#__system___float_tointeger
2944c     FD 2A 02 F6 | 	mov	local03, result1
29450     00 40 27 FF 
29454     00 12 06 F6 | 	mov	arg01, ##1317011456
29458     13 15 02 F6 | 	mov	arg02, local01
2945c     A0 F3 BF FD | 	call	#__system___float_mul
29460     FD 12 02 F6 | 	mov	arg01, result1
29464     00 14 06 F6 | 	mov	arg02, #0
29468     5C F8 BF FD | 	call	#__system___float_tointeger
2946c     FD 2A 52 FD | 	qvector	local03, result1
29470     87 24 20 FF 
29474     DB 2B 06 F6 | 	mov	local03, ##1078530011
29478     19 12 62 FD | 	getqy	arg01
2947c     01 12 C6 F0 | 	sar	arg01, #1
29480     09 13 52 F6 | 	abs	arg01, arg01 wc
29484     1F 2C C6 C9 |  if_b	decod	local04, #31
29488     00 2C 06 36 |  if_ae	mov	local04, #0
2948c     6C EF BF FD | 	call	#__system___float_fromuns
29490     16 FB 61 F5 | 	xor	result1, local04
29494     FD 12 02 F6 | 	mov	arg01, result1
29498     00 40 27 FF 
2949c     00 14 06 F6 | 	mov	arg02, ##1317011456
294a0     60 F5 BF FD | 	call	#__system___float_div
294a4     FD 14 02 F6 | 	mov	arg02, result1
294a8     15 13 02 F6 | 	mov	arg01, local03
294ac     50 F3 BF FD | 	call	#__system___float_mul
294b0                 | LR__3771
294b0     A7 F0 03 F6 | 	mov	ptra, fp
294b4     B2 00 A0 FD | 	call	#popregs_
294b8                 | __system____builtin_atan2f_ret
294b8     2D 00 64 FD | 	ret
294bc                 | 
294bc                 | __system____builtin_exp2f
294bc     04 4A 05 F6 | 	mov	COUNT_, #4
294c0     A8 00 A0 FD | 	call	#pushregs_
294c4     09 27 02 F6 | 	mov	local01, arg01
294c8     00 7F 21 FF 
294cc     00 14 06 F6 | 	mov	arg02, ##1123942400
294d0     01 16 66 F6 | 	neg	arg03, #1
294d4     5C F7 BF FD | 	call	#__system___float_cmp
294d8     00 FA 55 F2 | 	cmps	result1, #0 wc
294dc     00 C0 3F 3F 
294e0     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
294e4     DC 00 90 3D |  if_ae	jmp	#LR__3781
294e8     13 13 02 F6 | 	mov	arg01, local01
294ec     00 7F 61 FF 
294f0     00 14 06 F6 | 	mov	arg02, ##-1023541248
294f4     01 16 06 F6 | 	mov	arg03, #1
294f8     38 F7 BF FD | 	call	#__system___float_cmp
294fc     00 FA 55 F2 | 	cmps	result1, #0 wc
29500     00 FA 05 C6 |  if_b	mov	result1, #0
29504     BC 00 90 CD |  if_b	jmp	#LR__3781
29508     13 13 02 F6 | 	mov	arg01, local01
2950c     00 14 06 F6 | 	mov	arg02, #0
29510     B4 F7 BF FD | 	call	#__system___float_tointeger
29514     FD 28 02 F6 | 	mov	local02, result1
29518     14 13 52 F6 | 	abs	arg01, local02 wc
2951c     1F 2A C6 C9 |  if_b	decod	local03, #31
29520     00 2A 06 36 |  if_ae	mov	local03, #0
29524     D4 EE BF FD | 	call	#__system___float_fromuns
29528     15 FB 61 F5 | 	xor	result1, local03
2952c     FD 14 02 F6 | 	mov	arg02, result1
29530     13 13 02 F6 | 	mov	arg01, local01
29534     1F 14 E6 F4 | 	bitnot	arg02, #31
29538     F4 EE BF FD | 	call	#__system___float_add
2953c     FD 2C 02 F6 | 	mov	local04, result1
29540     16 13 02 F6 | 	mov	arg01, local04
29544     00 14 06 F6 | 	mov	arg02, #0
29548     01 16 06 F6 | 	mov	arg03, #1
2954c     E4 F6 BF FD | 	call	#__system___float_cmp
29550     00 FA 55 F2 | 	cmps	result1, #0 wc
29554     18 00 90 3D |  if_ae	jmp	#LR__3780
29558     16 13 02 F6 | 	mov	arg01, local04
2955c     00 C0 1F FF 
29560     00 14 06 F6 | 	mov	arg02, ##1065353216
29564     C8 EE BF FD | 	call	#__system___float_add
29568     FD 2C 02 F6 | 	mov	local04, result1
2956c     01 28 86 F1 | 	sub	local02, #1
29570                 | LR__3780
29570     7F 28 06 F1 | 	add	local02, #127
29574     17 28 66 F0 | 	shl	local02, #23
29578     16 13 02 F6 | 	mov	arg01, local04
2957c     00 80 26 FF 
29580     00 14 06 F6 | 	mov	arg02, ##1291845632
29584     78 F2 BF FD | 	call	#__system___float_mul
29588     FD 12 02 F6 | 	mov	arg01, result1
2958c     00 14 06 F6 | 	mov	arg02, #0
29590     34 F7 BF FD | 	call	#__system___float_tointeger
29594     FD 2C 0A F6 | 	mov	local04, result1 wz
29598     14 FB 01 A6 |  if_e	mov	result1, local02
2959c     24 00 90 AD |  if_e	jmp	#LR__3781
295a0     3E 2C 26 F4 | 	bith	local04, #62
295a4     0F 2C 62 FD | 	qexp	local04
295a8     14 13 02 F6 | 	mov	arg01, local02
295ac     18 14 62 FD | 	getqx	arg02
295b0     01 14 06 F1 | 	add	arg02, #1
295b4     01 14 46 F0 | 	shr	arg02, #1
295b8     00 80 1F FF 
295bc     00 14 06 F1 | 	add	arg02, ##1056964608
295c0     3C F2 BF FD | 	call	#__system___float_mul
295c4                 | LR__3781
295c4     A7 F0 03 F6 | 	mov	ptra, fp
295c8     B2 00 A0 FD | 	call	#popregs_
295cc                 | __system____builtin_exp2f_ret
295cc     2D 00 64 FD | 	ret
295d0                 | 
295d0                 | __system____builtin_log2f
295d0     06 4A 05 F6 | 	mov	COUNT_, #6
295d4     A8 00 A0 FD | 	call	#pushregs_
295d8     09 27 02 F6 | 	mov	local01, arg01
295dc     09 29 0A F6 | 	mov	local02, arg01 wz
295e0     00 00 40 5F 
295e4     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
295e8     00 40 00 AF 
295ec     00 FA 65 A6 |  if_e	neg	result1, ##8388608
295f0     08 01 90 AD |  if_e	jmp	#LR__3794
295f4     00 28 56 F2 | 	cmps	local02, #0 wc
295f8     00 E0 3F CF 
295fc     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
29600     F8 00 90 CD |  if_b	jmp	#LR__3794
29604     13 13 02 F6 | 	mov	arg01, local01
29608     00 90 20 FF 
2960c     00 14 06 F6 | 	mov	arg02, ##1092616192
29610     01 16 06 F6 | 	mov	arg03, #1
29614     1C F6 BF FD | 	call	#__system___float_cmp
29618     00 FA 0D F2 | 	cmp	result1, #0 wz
2961c     4D 2A 20 AF 
29620     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
29624     D4 00 90 AD |  if_e	jmp	#LR__3794
29628     13 13 02 F6 | 	mov	arg01, local01
2962c     FC 16 20 FF 
29630     54 14 06 F6 | 	mov	arg02, ##1076754516
29634     01 16 06 F6 | 	mov	arg03, #1
29638     F8 F5 BF FD | 	call	#__system___float_cmp
2963c     00 FA 0D F2 | 	cmp	result1, #0 wz
29640     55 DC 1F AF 
29644     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
29648     B0 00 90 AD |  if_e	jmp	#LR__3794
2964c     14 2B 02 F6 | 	mov	local03, local02
29650     17 2A 46 F0 | 	shr	local03, #23
29654     15 2B E2 F8 | 	getbyte	local03, local03, #0
29658     17 29 06 F4 | 	bitl	local02, #279
2965c     14 2D 02 F6 | 	mov	local04, local02
29660     FF 2A 0E F2 | 	cmp	local03, #255 wz
29664     1C 00 90 5D |  if_ne	jmp	#LR__3790
29668     00 2C 0E F2 | 	cmp	local04, #0 wz
2966c     00 C0 3F 5F 
29670     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
29674     00 E0 3F AF 
29678     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
2967c     17 FB 01 F6 | 	mov	result1, local05
29680     78 00 90 FD | 	jmp	#LR__3794
29684                 | LR__3790
29684     00 2A 0E F2 | 	cmp	local03, #0 wz
29688     17 2C 26 54 |  if_ne	bith	local04, #23
2968c     7F 2A 86 51 |  if_ne	sub	local03, #127
29690     28 00 90 5D |  if_ne	jmp	#LR__3793
29694     00 2C 0E F2 | 	cmp	local04, #0 wz
29698     00 40 00 AF 
2969c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
296a0     58 00 90 AD |  if_e	jmp	#LR__3794
296a4     7E 2A 66 F6 | 	neg	local03, #126
296a8     97 08 48 FB | 	callpa	#(@LR__3792-@LR__3791)>>2,fcache_load_ptr_
296ac                 | LR__3791
296ac     17 2C 2E F4 | 	testbn	local04, #23 wz
296b0     01 2C 66 A0 |  if_e	shl	local04, #1
296b4     01 2A 06 A1 |  if_e	add	local03, #1
296b8     F0 FF 9F AD |  if_e	jmp	#LR__3791
296bc                 | LR__3792
296bc                 | LR__3793
296bc     0E 2C 62 FD | 	qlog	local04
296c0     01 2A 86 F1 | 	sub	local03, #1
296c4     15 13 52 F6 | 	abs	arg01, local03 wc
296c8     1F 30 C6 C9 |  if_b	decod	local06, #31
296cc     00 30 06 36 |  if_ae	mov	local06, #0
296d0     18 2E 62 FD | 	getqx	local05
296d4     9B 2E 06 F4 | 	bitl	local05, #155
296d8     08 2E 06 F1 | 	add	local05, #8
296dc     04 2E 46 F0 | 	shr	local05, #4
296e0     00 C0 1F FF 
296e4     00 2E 06 F1 | 	add	local05, ##1065353216
296e8     10 ED BF FD | 	call	#__system___float_fromuns
296ec     18 FB 61 F5 | 	xor	result1, local06
296f0     FD 14 02 F6 | 	mov	arg02, result1
296f4     17 13 02 F6 | 	mov	arg01, local05
296f8     34 ED BF FD | 	call	#__system___float_add
296fc                 | LR__3794
296fc     A7 F0 03 F6 | 	mov	ptra, fp
29700     B2 00 A0 FD | 	call	#popregs_
29704                 | __system____builtin_log2f_ret
29704     2D 00 64 FD | 	ret
29708                 | 
29708                 | __system____builtin_powf
29708     04 4A 05 F6 | 	mov	COUNT_, #4
2970c     A8 00 A0 FD | 	call	#pushregs_
29710     09 27 02 F6 | 	mov	local01, arg01
29714     0A 29 02 F6 | 	mov	local02, arg02
29718     14 13 02 F6 | 	mov	arg01, local02
2971c     00 14 06 F6 | 	mov	arg02, #0
29720     A4 F5 BF FD | 	call	#__system___float_tointeger
29724     FD 2A 02 F6 | 	mov	local03, result1
29728     15 13 52 F6 | 	abs	arg01, local03 wc
2972c     1F 2C C6 C9 |  if_b	decod	local04, #31
29730     00 2C 06 36 |  if_ae	mov	local04, #0
29734     C4 EC BF FD | 	call	#__system___float_fromuns
29738     16 FB 61 F5 | 	xor	result1, local04
2973c     FD 12 02 F6 | 	mov	arg01, result1
29740     14 15 02 F6 | 	mov	arg02, local02
29744     01 16 06 F6 | 	mov	arg03, #1
29748     E8 F4 BF FD | 	call	#__system___float_cmp
2974c     00 FA 0D F2 | 	cmp	result1, #0 wz
29750     18 00 90 5D |  if_ne	jmp	#LR__3800
29754     00 C0 1F FF 
29758     00 12 06 F6 | 	mov	arg01, ##1065353216
2975c     13 15 02 F6 | 	mov	arg02, local01
29760     15 17 02 F6 | 	mov	arg03, local03
29764     A0 00 B0 FD | 	call	#__system___float_pow_n
29768     58 00 90 FD | 	jmp	#LR__3801
2976c                 | LR__3800
2976c     13 13 02 F6 | 	mov	arg01, local01
29770     00 14 06 F6 | 	mov	arg02, #0
29774     01 16 06 F6 | 	mov	arg03, #1
29778     B8 F4 BF FD | 	call	#__system___float_cmp
2977c     00 FA 55 F2 | 	cmps	result1, #0 wc
29780     00 E0 3F CF 
29784     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
29788     38 00 90 CD |  if_b	jmp	#LR__3801
2978c     13 13 02 F6 | 	mov	arg01, local01
29790     00 14 06 F6 | 	mov	arg02, #0
29794     01 16 06 F6 | 	mov	arg03, #1
29798     98 F4 BF FD | 	call	#__system___float_cmp
2979c     00 FA 0D F2 | 	cmp	result1, #0 wz
297a0     00 FA 05 A6 |  if_e	mov	result1, #0
297a4     1C 00 90 AD |  if_e	jmp	#LR__3801
297a8     13 13 02 F6 | 	mov	arg01, local01
297ac     20 FE BF FD | 	call	#__system____builtin_log2f
297b0     FD 12 02 F6 | 	mov	arg01, result1
297b4     14 15 02 F6 | 	mov	arg02, local02
297b8     44 F0 BF FD | 	call	#__system___float_mul
297bc     FD 12 02 F6 | 	mov	arg01, result1
297c0     F8 FC BF FD | 	call	#__system____builtin_exp2f
297c4                 | LR__3801
297c4     A7 F0 03 F6 | 	mov	ptra, fp
297c8     B2 00 A0 FD | 	call	#popregs_
297cc                 | __system____builtin_powf_ret
297cc     2D 00 64 FD | 	ret
297d0                 | 
297d0                 | __system____builtin_logbase
297d0     02 4A 05 F6 | 	mov	COUNT_, #2
297d4     A8 00 A0 FD | 	call	#pushregs_
297d8     09 27 02 F6 | 	mov	local01, arg01
297dc     0A 13 02 F6 | 	mov	arg01, arg02
297e0     EC FD BF FD | 	call	#__system____builtin_log2f
297e4     FD 28 02 F6 | 	mov	local02, result1
297e8     13 13 02 F6 | 	mov	arg01, local01
297ec     E0 FD BF FD | 	call	#__system____builtin_log2f
297f0     FD 14 02 F6 | 	mov	arg02, result1
297f4     14 13 02 F6 | 	mov	arg01, local02
297f8     08 F2 BF FD | 	call	#__system___float_div
297fc     A7 F0 03 F6 | 	mov	ptra, fp
29800     B2 00 A0 FD | 	call	#popregs_
29804                 | __system____builtin_logbase_ret
29804     2D 00 64 FD | 	ret
29808                 | 
29808                 | __system___float_pow_n
29808     05 4A 05 F6 | 	mov	COUNT_, #5
2980c     A8 00 A0 FD | 	call	#pushregs_
29810     09 27 02 F6 | 	mov	local01, arg01
29814     0A 29 02 F6 | 	mov	local02, arg02
29818     0B 2B 02 F6 | 	mov	local03, arg03
2981c     00 2A 56 F2 | 	cmps	local03, #0 wc
29820     18 00 90 3D |  if_ae	jmp	#LR__3810
29824     01 2C 06 F6 | 	mov	local04, #1
29828     15 2B 62 F6 | 	neg	local03, local03
2982c     00 2A 56 F2 | 	cmps	local03, #0 wc
29830     00 FA 05 C6 |  if_b	mov	result1, #0
29834     94 00 90 CD |  if_b	jmp	#LR__3818
29838     04 00 90 FD | 	jmp	#LR__3811
2983c                 | LR__3810
2983c     00 2C 06 F6 | 	mov	local04, #0
29840                 | LR__3811
29840     00 C0 1F FF 
29844     00 2E 06 F6 | 	mov	local05, ##1065353216
29848                 | LR__3812
29848     01 2A 56 F2 | 	cmps	local03, #1 wc
2984c     30 00 90 CD |  if_b	jmp	#LR__3814
29850     01 2A CE F7 | 	test	local03, #1 wz
29854     10 00 90 AD |  if_e	jmp	#LR__3813
29858     17 13 02 F6 | 	mov	arg01, local05
2985c     14 15 02 F6 | 	mov	arg02, local02
29860     9C EF BF FD | 	call	#__system___float_mul
29864     FD 2E 02 F6 | 	mov	local05, result1
29868                 | LR__3813
29868     01 2A C6 F0 | 	sar	local03, #1
2986c     14 13 02 F6 | 	mov	arg01, local02
29870     14 15 02 F6 | 	mov	arg02, local02
29874     88 EF BF FD | 	call	#__system___float_mul
29878     FD 28 02 F6 | 	mov	local02, result1
2987c     C8 FF 9F FD | 	jmp	#LR__3812
29880                 | LR__3814
29880     00 2C 0E F2 | 	cmp	local04, #0 wz
29884     14 00 90 AD |  if_e	jmp	#LR__3815
29888     13 13 02 F6 | 	mov	arg01, local01
2988c     17 15 02 F6 | 	mov	arg02, local05
29890     70 F1 BF FD | 	call	#__system___float_div
29894     FD 2E 02 F6 | 	mov	local05, result1
29898     2C 00 90 FD | 	jmp	#LR__3817
2989c                 | LR__3815
2989c     13 13 02 F6 | 	mov	arg01, local01
298a0     00 C0 1F FF 
298a4     00 14 06 F6 | 	mov	arg02, ##1065353216
298a8     01 16 06 F6 | 	mov	arg03, #1
298ac     84 F3 BF FD | 	call	#__system___float_cmp
298b0     00 FA 0D F2 | 	cmp	result1, #0 wz
298b4     10 00 90 AD |  if_e	jmp	#LR__3816
298b8     13 13 02 F6 | 	mov	arg01, local01
298bc     17 15 02 F6 | 	mov	arg02, local05
298c0     3C EF BF FD | 	call	#__system___float_mul
298c4     FD 2E 02 F6 | 	mov	local05, result1
298c8                 | LR__3816
298c8                 | LR__3817
298c8     17 FB 01 F6 | 	mov	result1, local05
298cc                 | LR__3818
298cc     A7 F0 03 F6 | 	mov	ptra, fp
298d0     B2 00 A0 FD | 	call	#popregs_
298d4                 | __system___float_pow_n_ret
298d4     2D 00 64 FD | 	ret
298d8                 | 
298d8                 | __system___gc_ptrs
298d8     EC 00 02 F6 | 	mov	_var01, __heap_ptr
298dc     00 03 02 F6 | 	mov	_var02, _var01
298e0     BB 00 00 FF 
298e4     F8 02 06 F1 | 	add	_var02, ##95992
298e8     00 FD 09 FB | 	rdlong	result2, _var01 wz
298ec     74 00 90 5D |  if_ne	jmp	#LR__3820
298f0     01 FD 01 F6 | 	mov	result2, _var02
298f4     00 FD 81 F1 | 	sub	result2, _var01
298f8     00 03 58 FC | 	wrword	#1, _var01
298fc     00 FB 01 F6 | 	mov	result1, _var01
29900     02 FA 05 F1 | 	add	result1, #2
29904     36 00 80 FF 
29908     FD 20 59 FC | 	wrword	##27792, result1
2990c     00 FB 01 F6 | 	mov	result1, _var01
29910     04 FA 05 F1 | 	add	result1, #4
29914     FD 00 58 FC | 	wrword	#0, result1
29918     00 FB 01 F6 | 	mov	result1, _var01
2991c     06 FA 05 F1 | 	add	result1, #6
29920     FD 02 58 FC | 	wrword	#1, result1
29924     10 00 06 F1 | 	add	_var01, #16
29928     FE FC 51 F6 | 	abs	result2, result2 wc
2992c     04 FC 45 F0 | 	shr	result2, #4
29930     FE FC 81 F6 | 	negc	result2, result2
29934     00 FD 51 FC | 	wrword	result2, _var01
29938     00 FD 01 F6 | 	mov	result2, _var01
2993c     02 FC 05 F1 | 	add	result2, #2
29940     36 00 80 FF 
29944     FE 1E 59 FC | 	wrword	##27791, result2
29948     00 FD 01 F6 | 	mov	result2, _var01
2994c     04 FC 05 F1 | 	add	result2, #4
29950     FE 00 58 FC | 	wrword	#0, result2
29954     00 FD 01 F6 | 	mov	result2, _var01
29958     06 FC 05 F1 | 	add	result2, #6
2995c     FE 00 58 FC | 	wrword	#0, result2
29960     10 00 86 F1 | 	sub	_var01, #16
29964                 | LR__3820
29964     00 FB 01 F6 | 	mov	result1, _var01
29968     01 FD 01 F6 | 	mov	result2, _var02
2996c                 | __system___gc_ptrs_ret
2996c     2D 00 64 FD | 	ret
29970                 | 
29970                 | __system___gc_tryalloc
29970     0B 4A 05 F6 | 	mov	COUNT_, #11
29974     A8 00 A0 FD | 	call	#pushregs_
29978     09 27 02 F6 | 	mov	local01, arg01
2997c     0A 29 02 F6 | 	mov	local02, arg02
29980     54 FF BF FD | 	call	#__system___gc_ptrs
29984     FD 2A 02 F6 | 	mov	local03, result1
29988     FE 2C 02 F6 | 	mov	local04, result2
2998c     15 2F 02 F6 | 	mov	local05, local03
29990     00 30 06 F6 | 	mov	local06, #0
29994     97 1E 48 FB | 	callpa	#(@LR__3831-@LR__3830)>>2,fcache_load_ptr_
29998                 | LR__3830
29998     17 33 02 F6 | 	mov	local07, local05
2999c     06 2E 06 F1 | 	add	local05, #6
299a0     17 15 EA FA | 	rdword	arg02, local05 wz
299a4     15 13 02 F6 | 	mov	arg01, local03
299a8     00 FA 05 A6 |  if_e	mov	result1, #0
299ac     04 14 66 50 |  if_ne	shl	arg02, #4
299b0     0A 13 02 51 |  if_ne	add	arg01, arg02
299b4     09 FB 01 56 |  if_ne	mov	result1, arg01
299b8     FD 2E 0A F6 | 	mov	local05, result1 wz
299bc     17 31 E2 5A |  if_ne	rdword	local06, local05
299c0     00 2E 0E F2 | 	cmp	local05, #0 wz
299c4     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
299c8     08 00 90 1D |  if_a	jmp	#LR__3832
299cc     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
299d0     C4 FF 9F 1D |  if_a	jmp	#LR__3830
299d4                 | LR__3831
299d4                 | LR__3832
299d4     00 2E 0E F2 | 	cmp	local05, #0 wz
299d8     17 FB 01 A6 |  if_e	mov	result1, local05
299dc     3C 01 90 AD |  if_e	jmp	#LR__3835
299e0     17 FD 01 F6 | 	mov	result2, local05
299e4     06 FC 05 F1 | 	add	result2, #6
299e8     FE 34 E2 FA | 	rdword	local08, result2
299ec     18 27 52 F2 | 	cmps	local01, local06 wc
299f0     C0 00 90 3D |  if_ae	jmp	#LR__3834
299f4     17 27 52 FC | 	wrword	local01, local05
299f8     17 13 02 F6 | 	mov	arg01, local05
299fc     13 35 02 F6 | 	mov	local08, local01
29a00     04 34 66 F0 | 	shl	local08, #4
29a04     1A 13 02 F1 | 	add	arg01, local08
29a08     13 31 82 F1 | 	sub	local06, local01
29a0c     09 31 52 FC | 	wrword	local06, arg01
29a10     09 35 02 F6 | 	mov	local08, arg01
29a14     02 34 06 F1 | 	add	local08, #2
29a18     36 00 80 FF 
29a1c     1A 1F 59 FC | 	wrword	##27791, local08
29a20     17 15 0A F6 | 	mov	arg02, local05 wz
29a24     00 FA 05 A6 |  if_e	mov	result1, #0
29a28     15 15 82 51 |  if_ne	sub	arg02, local03
29a2c     04 14 46 50 |  if_ne	shr	arg02, #4
29a30     0A FB 01 56 |  if_ne	mov	result1, arg02
29a34     09 35 02 F6 | 	mov	local08, arg01
29a38     04 34 06 F1 | 	add	local08, #4
29a3c     1A FB 51 FC | 	wrword	result1, local08
29a40     17 35 02 F6 | 	mov	local08, local05
29a44     06 34 06 F1 | 	add	local08, #6
29a48     09 15 02 F6 | 	mov	arg02, arg01
29a4c     1A 35 E2 FA | 	rdword	local08, local08
29a50     06 14 06 F1 | 	add	arg02, #6
29a54     0A 35 52 FC | 	wrword	local08, arg02
29a58     09 37 02 F6 | 	mov	local09, arg01
29a5c     1B 15 0A F6 | 	mov	arg02, local09 wz
29a60     00 FA 05 A6 |  if_e	mov	result1, #0
29a64     15 15 82 51 |  if_ne	sub	arg02, local03
29a68     04 14 46 50 |  if_ne	shr	arg02, #4
29a6c     0A FB 01 56 |  if_ne	mov	result1, arg02
29a70     FD 34 02 F6 | 	mov	local08, result1
29a74     09 39 EA FA | 	rdword	local10, arg01 wz
29a78     00 FA 05 A6 |  if_e	mov	result1, #0
29a7c     04 38 66 50 |  if_ne	shl	local10, #4
29a80     1C 13 02 51 |  if_ne	add	arg01, local10
29a84     09 FB 01 56 |  if_ne	mov	result1, arg01
29a88     FD 3A 0A F6 | 	mov	local11, result1 wz
29a8c     24 00 90 AD |  if_e	jmp	#LR__3833
29a90     16 3B 52 F2 | 	cmps	local11, local04 wc
29a94     1C 00 90 3D |  if_ae	jmp	#LR__3833
29a98     1B 15 0A F6 | 	mov	arg02, local09 wz
29a9c     00 FA 05 A6 |  if_e	mov	result1, #0
29aa0     15 15 82 51 |  if_ne	sub	arg02, local03
29aa4     04 14 46 50 |  if_ne	shr	arg02, #4
29aa8     0A FB 01 56 |  if_ne	mov	result1, arg02
29aac     04 3A 06 F1 | 	add	local11, #4
29ab0     1D FB 51 FC | 	wrword	result1, local11
29ab4                 | LR__3833
29ab4                 | LR__3834
29ab4     06 32 06 F1 | 	add	local07, #6
29ab8     19 35 52 FC | 	wrword	local08, local07
29abc     36 00 00 FF 
29ac0     80 36 06 F6 | 	mov	local09, ##27776
29ac4     14 37 42 F5 | 	or	local09, local02
29ac8     00 FA 05 F6 | 	mov	result1, #0
29acc     01 FA 61 FD | 	cogid	result1
29ad0     FD 36 42 F5 | 	or	local09, result1
29ad4     17 3B 02 F6 | 	mov	local11, local05
29ad8     02 3A 06 F1 | 	add	local11, #2
29adc     1D 37 52 FC | 	wrword	local09, local11
29ae0     15 37 02 F6 | 	mov	local09, local03
29ae4     08 36 06 F1 | 	add	local09, #8
29ae8     17 3B 02 F6 | 	mov	local11, local05
29aec     1B 37 E2 FA | 	rdword	local09, local09
29af0     06 3A 06 F1 | 	add	local11, #6
29af4     1D 37 52 FC | 	wrword	local09, local11
29af8     17 15 0A F6 | 	mov	arg02, local05 wz
29afc     00 FA 05 A6 |  if_e	mov	result1, #0
29b00     15 15 82 51 |  if_ne	sub	arg02, local03
29b04     04 14 46 50 |  if_ne	shr	arg02, #4
29b08     0A FB 01 56 |  if_ne	mov	result1, arg02
29b0c     08 2A 06 F1 | 	add	local03, #8
29b10     15 FB 51 FC | 	wrword	result1, local03
29b14     08 2E 06 F1 | 	add	local05, #8
29b18     17 FB 01 F6 | 	mov	result1, local05
29b1c                 | LR__3835
29b1c     A7 F0 03 F6 | 	mov	ptra, fp
29b20     B2 00 A0 FD | 	call	#popregs_
29b24                 | __system___gc_tryalloc_ret
29b24     2D 00 64 FD | 	ret
29b28                 | 
29b28                 | __system___gc_alloc_managed
29b28     01 4A 05 F6 | 	mov	COUNT_, #1
29b2c     A8 00 A0 FD | 	call	#pushregs_
29b30     09 27 02 F6 | 	mov	local01, arg01
29b34     00 14 06 F6 | 	mov	arg02, #0
29b38     1C 00 B0 FD | 	call	#__system___gc_doalloc
29b3c     FD 14 0A F6 | 	mov	arg02, result1 wz
29b40     01 26 56 A2 |  if_e	cmps	local01, #1 wc
29b44     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
29b48     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
29b4c     A7 F0 03 F6 | 	mov	ptra, fp
29b50     B2 00 A0 FD | 	call	#popregs_
29b54                 | __system___gc_alloc_managed_ret
29b54     2D 00 64 FD | 	ret
29b58                 | 
29b58                 | __system___gc_doalloc
29b58     06 4A 05 F6 | 	mov	COUNT_, #6
29b5c     A8 00 A0 FD | 	call	#pushregs_
29b60     09 27 0A F6 | 	mov	local01, arg01 wz
29b64     0A 29 02 F6 | 	mov	local02, arg02
29b68     00 FA 05 A6 |  if_e	mov	result1, #0
29b6c     8C 00 90 AD |  if_e	jmp	#LR__3847
29b70     17 26 06 F1 | 	add	local01, #23
29b74     0F 26 26 F5 | 	andn	local01, #15
29b78     04 26 46 F0 | 	shr	local01, #4
29b7c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
29b80     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
29b84     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
29b88     FC BD BF FD | 	call	#__system___lockmem
29b8c     13 13 02 F6 | 	mov	arg01, local01
29b90     14 15 02 F6 | 	mov	arg02, local02
29b94     D8 FD BF FD | 	call	#__system___gc_tryalloc
29b98     FD 2A 0A F6 | 	mov	local03, result1 wz
29b9c     14 00 90 5D |  if_ne	jmp	#LR__3840
29ba0     70 03 B0 FD | 	call	#__system___gc_docollect
29ba4     13 13 02 F6 | 	mov	arg01, local01
29ba8     14 15 02 F6 | 	mov	arg02, local02
29bac     C0 FD BF FD | 	call	#__system___gc_tryalloc
29bb0     FD 2A 02 F6 | 	mov	local03, result1
29bb4                 | LR__3840
29bb4     1C E6 05 F1 | 	add	ptr___system__dat__, #28
29bb8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
29bbc     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
29bc0     09 01 68 FC | 	wrlong	#0, arg01
29bc4     00 2A 0E F2 | 	cmp	local03, #0 wz
29bc8     2C 00 90 AD |  if_e	jmp	#LR__3846
29bcc     04 26 66 F0 | 	shl	local01, #4
29bd0     08 26 86 F1 | 	sub	local01, #8
29bd4     13 2D 52 F6 | 	abs	local04, local01 wc
29bd8     02 2C 46 F0 | 	shr	local04, #2
29bdc     16 2F 8A F6 | 	negc	local05, local04 wz
29be0     15 31 02 F6 | 	mov	local06, local03
29be4     10 00 90 AD |  if_e	jmp	#LR__3845
29be8     97 06 48 FB | 	callpa	#(@LR__3843-@LR__3841)>>2,fcache_load_ptr_
29bec                 | LR__3841
29bec     17 05 D8 FC | 	rep	@LR__3844, local05
29bf0                 | LR__3842
29bf0     18 01 68 FC | 	wrlong	#0, local06
29bf4     04 30 06 F1 | 	add	local06, #4
29bf8                 | LR__3843
29bf8                 | LR__3844
29bf8                 | LR__3845
29bf8                 | LR__3846
29bf8     15 FB 01 F6 | 	mov	result1, local03
29bfc                 | LR__3847
29bfc     A7 F0 03 F6 | 	mov	ptra, fp
29c00     B2 00 A0 FD | 	call	#popregs_
29c04                 | __system___gc_doalloc_ret
29c04     2D 00 64 FD | 	ret
29c08                 | 
29c08                 | __system___gc_isvalidptr
29c08     F8 16 06 F4 | 	bitl	arg03, #248
29c0c     08 16 86 F1 | 	sub	arg03, #8
29c10     09 17 52 F2 | 	cmps	arg03, arg01 wc
29c14     08 00 90 CD |  if_b	jmp	#LR__3850
29c18     0A 17 52 F2 | 	cmps	arg03, arg02 wc
29c1c     08 00 90 CD |  if_b	jmp	#LR__3851
29c20                 | LR__3850
29c20     00 FA 05 F6 | 	mov	result1, #0
29c24     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
29c28                 | LR__3851
29c28     0B 01 02 F6 | 	mov	_var01, arg03
29c2c     09 01 62 F5 | 	xor	_var01, arg01
29c30     0F 00 CE F7 | 	test	_var01, #15 wz
29c34     00 FA 05 56 |  if_ne	mov	result1, #0
29c38     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
29c3c     0B 01 02 F6 | 	mov	_var01, arg03
29c40     02 00 06 F1 | 	add	_var01, #2
29c44     00 01 E2 FA | 	rdword	_var01, _var01
29c48     7F 00 00 FF 
29c4c     C0 01 06 F5 | 	and	_var01, ##65472
29c50     36 00 00 FF 
29c54     80 00 0E F2 | 	cmp	_var01, ##27776 wz
29c58     00 FA 05 56 |  if_ne	mov	result1, #0
29c5c     0B FB 01 A6 |  if_e	mov	result1, arg03
29c60                 | __system___gc_isvalidptr_ret
29c60     2D 00 64 FD | 	ret
29c64                 | 
29c64                 | __system___gc_free
29c64     09 17 02 F6 | 	mov	arg03, arg01
29c68     6C FC BF FD | 	call	#__system___gc_ptrs
29c6c     FD 12 02 F6 | 	mov	arg01, result1
29c70     FE 14 02 F6 | 	mov	arg02, result2
29c74     90 FF BF FD | 	call	#__system___gc_isvalidptr
29c78     FD 14 0A F6 | 	mov	arg02, result1 wz
29c7c     28 00 90 AD |  if_e	jmp	#LR__3860
29c80     1C E6 05 F1 | 	add	ptr___system__dat__, #28
29c84     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
29c88     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
29c8c     F8 BC BF FD | 	call	#__system___lockmem
29c90     0A 13 02 F6 | 	mov	arg01, arg02
29c94     14 00 B0 FD | 	call	#__system___gc_dofree
29c98     1C E6 05 F1 | 	add	ptr___system__dat__, #28
29c9c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
29ca0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
29ca4     09 01 68 FC | 	wrlong	#0, arg01
29ca8                 | LR__3860
29ca8                 | __system___gc_free_ret
29ca8     2D 00 64 FD | 	ret
29cac                 | 
29cac                 | __system___gc_dofree
29cac     06 4A 05 F6 | 	mov	COUNT_, #6
29cb0     A8 00 A0 FD | 	call	#pushregs_
29cb4     09 27 02 F6 | 	mov	local01, arg01
29cb8     1C FC BF FD | 	call	#__system___gc_ptrs
29cbc     FD 28 02 F6 | 	mov	local02, result1
29cc0     FE 2A 02 F6 | 	mov	local03, result2
29cc4     13 15 02 F6 | 	mov	arg02, local01
29cc8     02 14 06 F1 | 	add	arg02, #2
29ccc     36 00 80 FF 
29cd0     0A 1F 59 FC | 	wrword	##27791, arg02
29cd4     13 2D 02 F6 | 	mov	local04, local01
29cd8     13 13 02 F6 | 	mov	arg01, local01
29cdc     09 2F EA FA | 	rdword	local05, arg01 wz
29ce0     00 FA 05 A6 |  if_e	mov	result1, #0
29ce4     04 2E 66 50 |  if_ne	shl	local05, #4
29ce8     17 13 02 51 |  if_ne	add	arg01, local05
29cec     09 FB 01 56 |  if_ne	mov	result1, arg01
29cf0     FD 30 02 F6 | 	mov	local06, result1
29cf4     97 24 48 FB | 	callpa	#(@LR__3871-@LR__3870)>>2,fcache_load_ptr_
29cf8                 | LR__3870
29cf8     04 2C 06 F1 | 	add	local04, #4
29cfc     16 15 EA FA | 	rdword	arg02, local04 wz
29d00     14 13 02 F6 | 	mov	arg01, local02
29d04     00 FA 05 A6 |  if_e	mov	result1, #0
29d08     04 14 66 50 |  if_ne	shl	arg02, #4
29d0c     0A 13 02 51 |  if_ne	add	arg01, arg02
29d10     09 FB 01 56 |  if_ne	mov	result1, arg01
29d14     FD 2C 0A F6 | 	mov	local04, result1 wz
29d18     24 00 90 AD |  if_e	jmp	#LR__3872
29d1c     16 13 02 F6 | 	mov	arg01, local04
29d20     00 FA 05 F6 | 	mov	result1, #0
29d24     02 12 06 F1 | 	add	arg01, #2
29d28     09 13 E2 FA | 	rdword	arg01, arg01
29d2c     36 00 00 FF 
29d30     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
29d34     01 FA 65 A6 |  if_e	neg	result1, #1
29d38     00 FA 0D F2 | 	cmp	result1, #0 wz
29d3c     B8 FF 9F AD |  if_e	jmp	#LR__3870
29d40                 | LR__3871
29d40                 | LR__3872
29d40     00 2C 0E F2 | 	cmp	local04, #0 wz
29d44     14 2D 02 A6 |  if_e	mov	local04, local02
29d48     16 15 02 F6 | 	mov	arg02, local04
29d4c     06 14 06 F1 | 	add	arg02, #6
29d50     13 13 02 F6 | 	mov	arg01, local01
29d54     0A 15 E2 FA | 	rdword	arg02, arg02
29d58     06 12 06 F1 | 	add	arg01, #6
29d5c     09 15 52 FC | 	wrword	arg02, arg01
29d60     13 15 0A F6 | 	mov	arg02, local01 wz
29d64     00 FA 05 A6 |  if_e	mov	result1, #0
29d68     14 15 82 51 |  if_ne	sub	arg02, local02
29d6c     04 14 46 50 |  if_ne	shr	arg02, #4
29d70     0A FB 01 56 |  if_ne	mov	result1, arg02
29d74     16 15 02 F6 | 	mov	arg02, local04
29d78     06 14 06 F1 | 	add	arg02, #6
29d7c     0A FB 51 FC | 	wrword	result1, arg02
29d80     14 2D 0A F2 | 	cmp	local04, local02 wz
29d84     A4 00 90 AD |  if_e	jmp	#LR__3875
29d88     16 13 02 F6 | 	mov	arg01, local04
29d8c     09 2F EA FA | 	rdword	local05, arg01 wz
29d90     00 FA 05 A6 |  if_e	mov	result1, #0
29d94     04 2E 66 50 |  if_ne	shl	local05, #4
29d98     17 13 02 51 |  if_ne	add	arg01, local05
29d9c     09 FB 01 56 |  if_ne	mov	result1, arg01
29da0     13 FB 09 F2 | 	cmp	result1, local01 wz
29da4     84 00 90 5D |  if_ne	jmp	#LR__3874
29da8     16 31 E2 FA | 	rdword	local06, local04
29dac     13 15 E2 FA | 	rdword	arg02, local01
29db0     0A 31 02 F1 | 	add	local06, arg02
29db4     16 31 52 FC | 	wrword	local06, local04
29db8     13 31 02 F6 | 	mov	local06, local01
29dbc     02 30 06 F1 | 	add	local06, #2
29dc0     18 01 58 FC | 	wrword	#0, local06
29dc4     13 13 02 F6 | 	mov	arg01, local01
29dc8     09 2F EA FA | 	rdword	local05, arg01 wz
29dcc     00 FA 05 A6 |  if_e	mov	result1, #0
29dd0     04 2E 66 50 |  if_ne	shl	local05, #4
29dd4     17 13 02 51 |  if_ne	add	arg01, local05
29dd8     09 FB 01 56 |  if_ne	mov	result1, arg01
29ddc     FD 30 02 F6 | 	mov	local06, result1
29de0     15 31 52 F2 | 	cmps	local06, local03 wc
29de4     20 00 90 3D |  if_ae	jmp	#LR__3873
29de8     16 15 0A F6 | 	mov	arg02, local04 wz
29dec     00 FA 05 A6 |  if_e	mov	result1, #0
29df0     14 15 82 51 |  if_ne	sub	arg02, local02
29df4     04 14 46 50 |  if_ne	shr	arg02, #4
29df8     0A FB 01 56 |  if_ne	mov	result1, arg02
29dfc     18 15 02 F6 | 	mov	arg02, local06
29e00     04 14 06 F1 | 	add	arg02, #4
29e04     0A FB 51 FC | 	wrword	result1, arg02
29e08                 | LR__3873
29e08     13 15 02 F6 | 	mov	arg02, local01
29e0c     06 14 06 F1 | 	add	arg02, #6
29e10     16 FD 01 F6 | 	mov	result2, local04
29e14     0A 15 E2 FA | 	rdword	arg02, arg02
29e18     06 FC 05 F1 | 	add	result2, #6
29e1c     FE 14 52 FC | 	wrword	arg02, result2
29e20     06 26 06 F1 | 	add	local01, #6
29e24     13 01 58 FC | 	wrword	#0, local01
29e28     16 27 02 F6 | 	mov	local01, local04
29e2c                 | LR__3874
29e2c                 | LR__3875
29e2c     13 13 02 F6 | 	mov	arg01, local01
29e30     09 2F EA FA | 	rdword	local05, arg01 wz
29e34     00 FA 05 A6 |  if_e	mov	result1, #0
29e38     04 2E 66 50 |  if_ne	shl	local05, #4
29e3c     17 13 02 51 |  if_ne	add	arg01, local05
29e40     09 FB 01 56 |  if_ne	mov	result1, arg01
29e44     FD 14 0A F6 | 	mov	arg02, result1 wz
29e48     B8 00 90 AD |  if_e	jmp	#LR__3877
29e4c     15 15 52 F2 | 	cmps	arg02, local03 wc
29e50     B0 00 90 3D |  if_ae	jmp	#LR__3877
29e54     0A 13 02 F6 | 	mov	arg01, arg02
29e58     00 FA 05 F6 | 	mov	result1, #0
29e5c     02 12 06 F1 | 	add	arg01, #2
29e60     09 13 E2 FA | 	rdword	arg01, arg01
29e64     36 00 00 FF 
29e68     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
29e6c     01 FA 65 A6 |  if_e	neg	result1, #1
29e70     00 FA 0D F2 | 	cmp	result1, #0 wz
29e74     8C 00 90 AD |  if_e	jmp	#LR__3877
29e78     13 2D 02 F6 | 	mov	local04, local01
29e7c     16 31 E2 FA | 	rdword	local06, local04
29e80     0A 13 02 F6 | 	mov	arg01, arg02
29e84     09 27 E2 FA | 	rdword	local01, arg01
29e88     13 31 02 F1 | 	add	local06, local01
29e8c     16 31 52 FC | 	wrword	local06, local04
29e90     09 31 02 F6 | 	mov	local06, arg01
29e94     06 30 06 F1 | 	add	local06, #6
29e98     16 27 02 F6 | 	mov	local01, local04
29e9c     18 31 E2 FA | 	rdword	local06, local06
29ea0     06 26 06 F1 | 	add	local01, #6
29ea4     13 31 52 FC | 	wrword	local06, local01
29ea8     09 31 02 F6 | 	mov	local06, arg01
29eac     02 30 06 F1 | 	add	local06, #2
29eb0     18 55 59 FC | 	wrword	#170, local06
29eb4     09 31 02 F6 | 	mov	local06, arg01
29eb8     06 30 06 F1 | 	add	local06, #6
29ebc     18 01 58 FC | 	wrword	#0, local06
29ec0     09 2F EA FA | 	rdword	local05, arg01 wz
29ec4     00 FA 05 A6 |  if_e	mov	result1, #0
29ec8     04 2E 66 50 |  if_ne	shl	local05, #4
29ecc     17 13 02 51 |  if_ne	add	arg01, local05
29ed0     09 FB 01 56 |  if_ne	mov	result1, arg01
29ed4     FD 30 0A F6 | 	mov	local06, result1 wz
29ed8     28 00 90 AD |  if_e	jmp	#LR__3876
29edc     15 31 52 F2 | 	cmps	local06, local03 wc
29ee0     20 00 90 3D |  if_ae	jmp	#LR__3876
29ee4     16 15 0A F6 | 	mov	arg02, local04 wz
29ee8     00 FA 05 A6 |  if_e	mov	result1, #0
29eec     14 15 82 51 |  if_ne	sub	arg02, local02
29ef0     04 14 46 50 |  if_ne	shr	arg02, #4
29ef4     0A FB 01 56 |  if_ne	mov	result1, arg02
29ef8     18 2D 02 F6 | 	mov	local04, local06
29efc     04 2C 06 F1 | 	add	local04, #4
29f00     16 FB 51 FC | 	wrword	result1, local04
29f04                 | LR__3876
29f04                 | LR__3877
29f04     18 FB 01 F6 | 	mov	result1, local06
29f08     A7 F0 03 F6 | 	mov	ptra, fp
29f0c     B2 00 A0 FD | 	call	#popregs_
29f10                 | __system___gc_dofree_ret
29f10     2D 00 64 FD | 	ret
29f14                 | 
29f14                 | __system___gc_docollect
29f14     05 4A 05 F6 | 	mov	COUNT_, #5
29f18     A8 00 A0 FD | 	call	#pushregs_
29f1c     B8 F9 BF FD | 	call	#__system___gc_ptrs
29f20     FE 26 02 F6 | 	mov	local01, result2
29f24     FD 28 02 F6 | 	mov	local02, result1
29f28     14 13 02 F6 | 	mov	arg01, local02
29f2c     09 2B EA FA | 	rdword	local03, arg01 wz
29f30     00 FA 05 A6 |  if_e	mov	result1, #0
29f34     04 2A 66 50 |  if_ne	shl	local03, #4
29f38     15 13 02 51 |  if_ne	add	arg01, local03
29f3c     09 FB 01 56 |  if_ne	mov	result1, arg01
29f40     FD 2C 0A F6 | 	mov	local04, result1 wz
29f44     00 FA 05 F6 | 	mov	result1, #0
29f48     01 FA 61 FD | 	cogid	result1
29f4c     FD 2E 02 F6 | 	mov	local05, result1
29f50     48 00 90 AD |  if_e	jmp	#LR__3882
29f54     97 22 48 FB | 	callpa	#(@LR__3881-@LR__3880)>>2,fcache_load_ptr_
29f58                 | LR__3880
29f58     13 2D 52 F2 | 	cmps	local04, local01 wc
29f5c     3C 00 90 3D |  if_ae	jmp	#LR__3882
29f60     16 15 02 F6 | 	mov	arg02, local04
29f64     02 14 06 F1 | 	add	arg02, #2
29f68     0A 15 E2 FA | 	rdword	arg02, arg02
29f6c     20 14 26 F5 | 	andn	arg02, #32
29f70     16 13 02 F6 | 	mov	arg01, local04
29f74     02 12 06 F1 | 	add	arg01, #2
29f78     09 15 52 FC | 	wrword	arg02, arg01
29f7c     16 13 02 F6 | 	mov	arg01, local04
29f80     09 2B EA FA | 	rdword	local03, arg01 wz
29f84     00 FA 05 A6 |  if_e	mov	result1, #0
29f88     04 2A 66 50 |  if_ne	shl	local03, #4
29f8c     15 13 02 51 |  if_ne	add	arg01, local03
29f90     09 FB 01 56 |  if_ne	mov	result1, arg01
29f94     FD 2C 0A F6 | 	mov	local04, result1 wz
29f98     BC FF 9F 5D |  if_ne	jmp	#LR__3880
29f9c                 | LR__3881
29f9c                 | LR__3882
29f9c     00 2A 06 F6 | 	mov	local03, #0
29fa0     00 12 06 F6 | 	mov	arg01, #0
29fa4     B8 B9 BF FD | 	call	#__system____topofstack
29fa8     FD 14 02 F6 | 	mov	arg02, result1
29fac     15 13 02 F6 | 	mov	arg01, local03
29fb0     90 00 B0 FD | 	call	#__system___gc_markhub
29fb4     1C 01 B0 FD | 	call	#__system___gc_markcog
29fb8     14 13 02 F6 | 	mov	arg01, local02
29fbc     09 2B EA FA | 	rdword	local03, arg01 wz
29fc0     00 FA 05 A6 |  if_e	mov	result1, #0
29fc4     04 2A 66 50 |  if_ne	shl	local03, #4
29fc8     15 13 02 51 |  if_ne	add	arg01, local03
29fcc     09 FB 01 56 |  if_ne	mov	result1, arg01
29fd0     FD 28 0A F6 | 	mov	local02, result1 wz
29fd4     60 00 90 AD |  if_e	jmp	#LR__3886
29fd8                 | LR__3883
29fd8     14 2D 02 F6 | 	mov	local04, local02
29fdc     16 13 02 F6 | 	mov	arg01, local04
29fe0     09 2B EA FA | 	rdword	local03, arg01 wz
29fe4     00 FA 05 A6 |  if_e	mov	result1, #0
29fe8     04 2A 66 50 |  if_ne	shl	local03, #4
29fec     15 13 02 51 |  if_ne	add	arg01, local03
29ff0     09 FB 01 56 |  if_ne	mov	result1, arg01
29ff4     FD 28 02 F6 | 	mov	local02, result1
29ff8     16 15 02 F6 | 	mov	arg02, local04
29ffc     02 14 06 F1 | 	add	arg02, #2
2a000     0A 15 E2 FA | 	rdword	arg02, arg02
2a004     20 14 CE F7 | 	test	arg02, #32 wz
2a008     10 14 CE A7 |  if_e	test	arg02, #16 wz
2a00c     1C 00 90 5D |  if_ne	jmp	#LR__3885
2a010     0A 15 42 F8 | 	getnib	arg02, arg02, #0
2a014     17 15 0A F2 | 	cmp	arg02, local05 wz
2a018     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
2a01c     0C 00 90 5D |  if_ne	jmp	#LR__3884
2a020     16 13 02 F6 | 	mov	arg01, local04
2a024     84 FC BF FD | 	call	#__system___gc_dofree
2a028     FD 28 02 F6 | 	mov	local02, result1
2a02c                 | LR__3884
2a02c                 | LR__3885
2a02c     00 28 0E F2 | 	cmp	local02, #0 wz
2a030     13 29 52 52 |  if_ne	cmps	local02, local01 wc
2a034     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3883
2a038                 | LR__3886
2a038     A7 F0 03 F6 | 	mov	ptra, fp
2a03c     B2 00 A0 FD | 	call	#popregs_
2a040                 | __system___gc_docollect_ret
2a040     2D 00 64 FD | 	ret
2a044                 | 
2a044                 | __system___gc_markhub
2a044     04 4A 05 F6 | 	mov	COUNT_, #4
2a048     A8 00 A0 FD | 	call	#pushregs_
2a04c     09 27 02 F6 | 	mov	local01, arg01
2a050     0A 29 02 F6 | 	mov	local02, arg02
2a054     80 F8 BF FD | 	call	#__system___gc_ptrs
2a058     FD 2A 02 F6 | 	mov	local03, result1
2a05c     FE 2C 02 F6 | 	mov	local04, result2
2a060                 | LR__3890
2a060     14 27 52 F2 | 	cmps	local01, local02 wc
2a064     60 00 90 3D |  if_ae	jmp	#LR__3891
2a068     13 17 02 FB | 	rdlong	arg03, local01
2a06c     04 26 06 F1 | 	add	local01, #4
2a070     16 15 02 F6 | 	mov	arg02, local04
2a074     15 13 02 F6 | 	mov	arg01, local03
2a078     8C FB BF FD | 	call	#__system___gc_isvalidptr
2a07c     FD 16 0A F6 | 	mov	arg03, result1 wz
2a080     DC FF 9F AD |  if_e	jmp	#LR__3890
2a084     0B 13 02 F6 | 	mov	arg01, arg03
2a088     00 FA 05 F6 | 	mov	result1, #0
2a08c     02 12 06 F1 | 	add	arg01, #2
2a090     09 13 E2 FA | 	rdword	arg01, arg01
2a094     36 00 00 FF 
2a098     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2a09c     01 FA 65 A6 |  if_e	neg	result1, #1
2a0a0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a0a4     B8 FF 9F 5D |  if_ne	jmp	#LR__3890
2a0a8     0B FD 01 F6 | 	mov	result2, arg03
2a0ac     02 FC 05 F1 | 	add	result2, #2
2a0b0     FE FC E1 FA | 	rdword	result2, result2
2a0b4     0F FC 25 F5 | 	andn	result2, #15
2a0b8     2E FC 45 F5 | 	or	result2, #46
2a0bc     02 16 06 F1 | 	add	arg03, #2
2a0c0     0B FD 51 FC | 	wrword	result2, arg03
2a0c4     98 FF 9F FD | 	jmp	#LR__3890
2a0c8                 | LR__3891
2a0c8     A7 F0 03 F6 | 	mov	ptra, fp
2a0cc     B2 00 A0 FD | 	call	#popregs_
2a0d0                 | __system___gc_markhub_ret
2a0d0     2D 00 64 FD | 	ret
2a0d4                 | 
2a0d4                 | __system___gc_markcog
2a0d4     04 4A 05 F6 | 	mov	COUNT_, #4
2a0d8     A8 00 A0 FD | 	call	#pushregs_
2a0dc     F8 F7 BF FD | 	call	#__system___gc_ptrs
2a0e0     FD 26 02 F6 | 	mov	local01, result1
2a0e4     FE 28 02 F6 | 	mov	local02, result2
2a0e8     EF 2B 06 F6 | 	mov	local03, #495
2a0ec                 | LR__3900
2a0ec                 | 	'.live	local03
2a0ec     00 2A 96 F9 | 	alts	local03, #0
2a0f0     15 2D 02 F6 | 	mov	local04, local03
2a0f4     13 13 02 F6 | 	mov	arg01, local01
2a0f8     14 15 02 F6 | 	mov	arg02, local02
2a0fc     16 17 02 F6 | 	mov	arg03, local04
2a100     04 FB BF FD | 	call	#__system___gc_isvalidptr
2a104     00 FA 0D F2 | 	cmp	result1, #0 wz
2a108     18 00 90 AD |  if_e	jmp	#LR__3901
2a10c     FD 2C 02 F6 | 	mov	local04, result1
2a110     02 2C 06 F1 | 	add	local04, #2
2a114     16 2D E2 FA | 	rdword	local04, local04
2a118     20 2C 46 F5 | 	or	local04, #32
2a11c     02 FA 05 F1 | 	add	result1, #2
2a120     FD 2C 52 FC | 	wrword	local04, result1
2a124                 | LR__3901
2a124     01 2A 86 F1 | 	sub	local03, #1
2a128     00 2A 56 F2 | 	cmps	local03, #0 wc
2a12c     BC FF 9F 3D |  if_ae	jmp	#LR__3900
2a130     A7 F0 03 F6 | 	mov	ptra, fp
2a134     B2 00 A0 FD | 	call	#popregs_
2a138                 | __system___gc_markcog_ret
2a138     2D 00 64 FD | 	ret
2a13c                 | 
2a13c                 | __system__opendir
2a13c     06 4A 05 F6 | 	mov	COUNT_, #6
2a140     A8 00 A0 FD | 	call	#pushregs_
2a144     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2a148     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2a14c     09 15 02 F6 | 	mov	arg02, arg01
2a150     13 13 02 F6 | 	mov	arg01, local01
2a154     00 16 06 F6 | 	mov	arg03, #0
2a158     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2a15c     C0 BF BF FD | 	call	#__system____getvfsforfile
2a160     FD 28 0A F6 | 	mov	local02, result1 wz
2a164     10 00 90 AD |  if_e	jmp	#LR__3910
2a168     28 28 06 F1 | 	add	local02, #40
2a16c     14 17 0A FB | 	rdlong	arg03, local02 wz
2a170     28 28 86 F1 | 	sub	local02, #40
2a174     14 00 90 5D |  if_ne	jmp	#LR__3911
2a178                 | LR__3910
2a178     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a17c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2a180     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a184     00 FA 05 F6 | 	mov	result1, #0
2a188     90 00 90 FD | 	jmp	#LR__3913
2a18c                 | LR__3911
2a18c     5C 12 06 F6 | 	mov	arg01, #92
2a190     10 14 06 F6 | 	mov	arg02, #16
2a194     C0 F9 BF FD | 	call	#__system___gc_doalloc
2a198     FD 2A 0A F6 | 	mov	local03, result1 wz
2a19c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a1a0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2a1a4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a1a8     00 FA 05 A6 |  if_e	mov	result1, #0
2a1ac     6C 00 90 AD |  if_e	jmp	#LR__3913
2a1b0     28 28 06 F1 | 	add	local02, #40
2a1b4     14 2D 02 FB | 	rdlong	local04, local02
2a1b8     16 2F 02 F6 | 	mov	local05, local04
2a1bc     28 28 86 F1 | 	sub	local02, #40
2a1c0     13 2E 46 F7 | 	zerox	local05, #19
2a1c4     14 2C 46 F0 | 	shr	local04, #20
2a1c8     02 2C 66 F0 | 	shl	local04, #2
2a1cc     ED 2C 02 F1 | 	add	local04, __methods__
2a1d0     16 2D 02 FB | 	rdlong	local04, local04
2a1d4     15 13 02 F6 | 	mov	arg01, local03
2a1d8     13 15 02 F6 | 	mov	arg02, local01
2a1dc     F2 30 02 F6 | 	mov	local06, objptr
2a1e0     17 E5 01 F6 | 	mov	objptr, local05
2a1e4     2D 2C 62 FD | 	call	local04
2a1e8     18 E5 01 F6 | 	mov	objptr, local06
2a1ec     FD 16 0A F6 | 	mov	arg03, result1 wz
2a1f0     20 00 90 AD |  if_e	jmp	#LR__3912
2a1f4     00 16 4E F2 | 	cmps	arg03, #0 wz
2a1f8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a1fc     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2a200     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a204     15 13 02 F6 | 	mov	arg01, local03
2a208     58 FA BF FD | 	call	#__system___gc_free
2a20c     00 FA 05 F6 | 	mov	result1, #0
2a210     08 00 90 FD | 	jmp	#LR__3913
2a214                 | LR__3912
2a214     15 29 62 FC | 	wrlong	local02, local03
2a218     15 FB 01 F6 | 	mov	result1, local03
2a21c                 | LR__3913
2a21c     A7 F0 03 F6 | 	mov	ptra, fp
2a220     B2 00 A0 FD | 	call	#popregs_
2a224                 | __system__opendir_ret
2a224     2D 00 64 FD | 	ret
2a228                 | 
2a228                 | __system__closedir
2a228     04 4A 05 F6 | 	mov	COUNT_, #4
2a22c     A8 00 A0 FD | 	call	#pushregs_
2a230     09 27 02 F6 | 	mov	local01, arg01
2a234     13 13 02 FB | 	rdlong	arg01, local01
2a238     2C 12 06 F1 | 	add	arg01, #44
2a23c     09 29 02 FB | 	rdlong	local02, arg01
2a240     14 2B 02 F6 | 	mov	local03, local02
2a244     13 2A 46 F7 | 	zerox	local03, #19
2a248     14 28 46 F0 | 	shr	local02, #20
2a24c     02 28 66 F0 | 	shl	local02, #2
2a250     ED 28 02 F1 | 	add	local02, __methods__
2a254     14 29 02 FB | 	rdlong	local02, local02
2a258     13 13 02 F6 | 	mov	arg01, local01
2a25c     F2 2C 02 F6 | 	mov	local04, objptr
2a260     15 E5 01 F6 | 	mov	objptr, local03
2a264     2D 28 62 FD | 	call	local02
2a268     16 E5 01 F6 | 	mov	objptr, local04
2a26c     FD 2C 02 F6 | 	mov	local04, result1
2a270     13 13 02 F6 | 	mov	arg01, local01
2a274     EC F9 BF FD | 	call	#__system___gc_free
2a278     00 2C 4E F2 | 	cmps	local04, #0 wz
2a27c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a280     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
2a284     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a288     01 FA 65 56 |  if_ne	neg	result1, #1
2a28c     00 FA 05 A6 |  if_e	mov	result1, #0
2a290     A7 F0 03 F6 | 	mov	ptra, fp
2a294     B2 00 A0 FD | 	call	#popregs_
2a298                 | __system__closedir_ret
2a298     2D 00 64 FD | 	ret
2a29c                 | 
2a29c                 | __system__readdir
2a29c     04 4A 05 F6 | 	mov	COUNT_, #4
2a2a0     A8 00 A0 FD | 	call	#pushregs_
2a2a4     09 15 0A FB | 	rdlong	arg02, arg01 wz
2a2a8     08 12 06 F1 | 	add	arg01, #8
2a2ac     09 27 02 F6 | 	mov	local01, arg01
2a2b0     08 12 86 F1 | 	sub	arg01, #8
2a2b4     00 FA 05 A6 |  if_e	mov	result1, #0
2a2b8     5C 00 90 AD |  if_e	jmp	#LR__3921
2a2bc     30 14 06 F1 | 	add	arg02, #48
2a2c0     0A 29 02 FB | 	rdlong	local02, arg02
2a2c4     14 2B 02 F6 | 	mov	local03, local02
2a2c8     13 2A 46 F7 | 	zerox	local03, #19
2a2cc     14 28 46 F0 | 	shr	local02, #20
2a2d0     02 28 66 F0 | 	shl	local02, #2
2a2d4     ED 28 02 F1 | 	add	local02, __methods__
2a2d8     14 29 02 FB | 	rdlong	local02, local02
2a2dc     13 15 02 F6 | 	mov	arg02, local01
2a2e0     F2 2C 02 F6 | 	mov	local04, objptr
2a2e4     15 E5 01 F6 | 	mov	objptr, local03
2a2e8     2D 28 62 FD | 	call	local02
2a2ec     16 E5 01 F6 | 	mov	objptr, local04
2a2f0     00 FA 4D F2 | 	cmps	result1, #0 wz
2a2f4     1C 00 90 AD |  if_e	jmp	#LR__3920
2a2f8     01 FA 55 F2 | 	cmps	result1, #1 wc
2a2fc     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2a300     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2a304     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
2a308     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2a30c     00 FA 05 F6 | 	mov	result1, #0
2a310     04 00 90 FD | 	jmp	#LR__3921
2a314                 | LR__3920
2a314     13 FB 01 F6 | 	mov	result1, local01
2a318                 | LR__3921
2a318     A7 F0 03 F6 | 	mov	ptra, fp
2a31c     B2 00 A0 FD | 	call	#popregs_
2a320                 | __system__readdir_ret
2a320     2D 00 64 FD | 	ret
2a324                 | 
2a324                 | __system___openraw
2a324     15 4A 05 F6 | 	mov	COUNT_, #21
2a328     A8 00 A0 FD | 	call	#pushregs_
2a32c     09 27 02 F6 | 	mov	local01, arg01
2a330     0A 29 02 F6 | 	mov	local02, arg02
2a334     0B 2B 02 F6 | 	mov	local03, arg03
2a338     0C 2D 02 F6 | 	mov	local04, arg04
2a33c     04 2E 06 F6 | 	mov	local05, #4
2a340     13 31 02 F6 | 	mov	local06, local01
2a344     00 32 06 F6 | 	mov	local07, #0
2a348     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2a34c     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
2a350     1A 13 02 F6 | 	mov	arg01, local08
2a354     14 15 02 F6 | 	mov	arg02, local02
2a358     00 16 06 F6 | 	mov	arg03, #0
2a35c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2a360     BC BD BF FD | 	call	#__system____getvfsforfile
2a364     FD 36 0A F6 | 	mov	local09, result1 wz
2a368     10 00 90 AD |  if_e	jmp	#LR__3930
2a36c     20 36 06 F1 | 	add	local09, #32
2a370     1B FB 09 FB | 	rdlong	result1, local09 wz
2a374     20 36 86 F1 | 	sub	local09, #32
2a378     14 00 90 5D |  if_ne	jmp	#LR__3931
2a37c                 | LR__3930
2a37c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a380     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2a384     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a388     01 FA 65 F6 | 	neg	result1, #1
2a38c     8C 02 90 FD | 	jmp	#LR__3944
2a390                 | LR__3931
2a390     18 13 02 F6 | 	mov	arg01, local06
2a394     00 14 06 F6 | 	mov	arg02, #0
2a398     34 16 06 F6 | 	mov	arg03, #52
2a39c     09 39 02 F6 | 	mov	local10, arg01
2a3a0     98 00 A0 FD | 	call	#\builtin_bytefill_
2a3a4     20 36 06 F1 | 	add	local09, #32
2a3a8     1B 3B 02 FB | 	rdlong	local11, local09
2a3ac     1D 3D 02 F6 | 	mov	local12, local11
2a3b0     1D 3F 02 F6 | 	mov	local13, local11
2a3b4     20 36 86 F1 | 	sub	local09, #32
2a3b8     1F 41 02 F6 | 	mov	local14, local13
2a3bc     13 3C 46 F7 | 	zerox	local12, #19
2a3c0     14 40 46 F0 | 	shr	local14, #20
2a3c4     02 40 66 F0 | 	shl	local14, #2
2a3c8     ED 40 02 F1 | 	add	local14, __methods__
2a3cc     20 41 02 FB | 	rdlong	local14, local14
2a3d0     18 43 02 F6 | 	mov	local15, local06
2a3d4     1A 45 02 F6 | 	mov	local16, local08
2a3d8     15 47 02 F6 | 	mov	local17, local03
2a3dc     21 13 02 F6 | 	mov	arg01, local15
2a3e0     22 15 02 F6 | 	mov	arg02, local16
2a3e4     23 17 02 F6 | 	mov	arg03, local17
2a3e8     F2 48 02 F6 | 	mov	local18, objptr
2a3ec     1E E5 01 F6 | 	mov	objptr, local12
2a3f0     2D 40 62 FD | 	call	local14
2a3f4     24 E5 01 F6 | 	mov	objptr, local18
2a3f8     FD 4A 0A F6 | 	mov	local19, result1 wz
2a3fc     04 2A CE 57 |  if_ne	test	local03, #4 wz
2a400     58 00 90 AD |  if_e	jmp	#LR__3932
2a404     24 36 06 F1 | 	add	local09, #36
2a408     1B 3B 02 FB | 	rdlong	local11, local09
2a40c     1D 3D 02 F6 | 	mov	local12, local11
2a410     1D 3F 02 F6 | 	mov	local13, local11
2a414     24 36 86 F1 | 	sub	local09, #36
2a418     1F 41 02 F6 | 	mov	local14, local13
2a41c     13 3C 46 F7 | 	zerox	local12, #19
2a420     14 40 46 F0 | 	shr	local14, #20
2a424     02 40 66 F0 | 	shl	local14, #2
2a428     ED 40 02 F1 | 	add	local14, __methods__
2a42c     20 41 02 FB | 	rdlong	local14, local14
2a430     18 43 02 F6 | 	mov	local15, local06
2a434     1A 45 02 F6 | 	mov	local16, local08
2a438     16 47 02 F6 | 	mov	local17, local04
2a43c     21 13 02 F6 | 	mov	arg01, local15
2a440     22 15 02 F6 | 	mov	arg02, local16
2a444     23 17 02 F6 | 	mov	arg03, local17
2a448     F2 48 02 F6 | 	mov	local18, objptr
2a44c     1E E5 01 F6 | 	mov	objptr, local12
2a450     2D 40 62 FD | 	call	local14
2a454     24 E5 01 F6 | 	mov	objptr, local18
2a458     FD 4A 02 F6 | 	mov	local19, result1
2a45c                 | LR__3932
2a45c     00 4A 0E F2 | 	cmp	local19, #0 wz
2a460     8C 01 90 5D |  if_ne	jmp	#LR__3942
2a464     15 4D 02 F6 | 	mov	local20, local03
2a468     03 4C 0E F5 | 	and	local20, #3 wz
2a46c     02 2E 46 55 |  if_ne	or	local05, #2
2a470     01 4C 0E F2 | 	cmp	local20, #1 wz
2a474     01 2E 46 55 |  if_ne	or	local05, #1
2a478     20 2A CE F7 | 	test	local03, #32 wz
2a47c     C0 2E 46 55 |  if_ne	or	local05, #192
2a480     08 30 06 F1 | 	add	local06, #8
2a484     18 2F 62 FC | 	wrlong	local05, local06
2a488     0C 30 06 F1 | 	add	local06, #12
2a48c     18 4F 0A FB | 	rdlong	local21, local06 wz
2a490     14 30 86 F1 | 	sub	local06, #20
2a494     18 00 90 5D |  if_ne	jmp	#LR__3933
2a498     04 36 06 F1 | 	add	local09, #4
2a49c     1B 4F 02 FB | 	rdlong	local21, local09
2a4a0     04 36 86 F1 | 	sub	local09, #4
2a4a4     14 30 06 F1 | 	add	local06, #20
2a4a8     18 4F 62 FC | 	wrlong	local21, local06
2a4ac     14 30 86 F1 | 	sub	local06, #20
2a4b0                 | LR__3933
2a4b0     18 30 06 F1 | 	add	local06, #24
2a4b4     18 4F 0A FB | 	rdlong	local21, local06 wz
2a4b8     18 30 86 F1 | 	sub	local06, #24
2a4bc     18 00 90 5D |  if_ne	jmp	#LR__3934
2a4c0     08 36 06 F1 | 	add	local09, #8
2a4c4     1B 4F 02 FB | 	rdlong	local21, local09
2a4c8     08 36 86 F1 | 	sub	local09, #8
2a4cc     18 30 06 F1 | 	add	local06, #24
2a4d0     18 4F 62 FC | 	wrlong	local21, local06
2a4d4     18 30 86 F1 | 	sub	local06, #24
2a4d8                 | LR__3934
2a4d8     24 30 06 F1 | 	add	local06, #36
2a4dc     18 4F 0A FB | 	rdlong	local21, local06 wz
2a4e0     24 30 86 F1 | 	sub	local06, #36
2a4e4     1B 4F 02 AB |  if_e	rdlong	local21, local09
2a4e8     24 30 06 A1 |  if_e	add	local06, #36
2a4ec     18 4F 62 AC |  if_e	wrlong	local21, local06
2a4f0     24 30 86 A1 |  if_e	sub	local06, #36
2a4f4     28 30 06 F1 | 	add	local06, #40
2a4f8     18 4F 0A FB | 	rdlong	local21, local06 wz
2a4fc     28 30 86 F1 | 	sub	local06, #40
2a500     18 00 90 5D |  if_ne	jmp	#LR__3935
2a504     10 36 06 F1 | 	add	local09, #16
2a508     1B 4F 02 FB | 	rdlong	local21, local09
2a50c     10 36 86 F1 | 	sub	local09, #16
2a510     28 30 06 F1 | 	add	local06, #40
2a514     18 4F 62 FC | 	wrlong	local21, local06
2a518     28 30 86 F1 | 	sub	local06, #40
2a51c                 | LR__3935
2a51c     30 30 06 F1 | 	add	local06, #48
2a520     18 4F 0A FB | 	rdlong	local21, local06 wz
2a524     30 30 86 F1 | 	sub	local06, #48
2a528     18 00 90 5D |  if_ne	jmp	#LR__3936
2a52c     0C 36 06 F1 | 	add	local09, #12
2a530     1B 4F 02 FB | 	rdlong	local21, local09
2a534     0C 36 86 F1 | 	sub	local09, #12
2a538     30 30 06 F1 | 	add	local06, #48
2a53c     18 4F 62 FC | 	wrlong	local21, local06
2a540     30 30 86 F1 | 	sub	local06, #48
2a544                 | LR__3936
2a544     1C 30 06 F1 | 	add	local06, #28
2a548     18 4F 0A FB | 	rdlong	local21, local06 wz
2a54c     1C 30 86 F1 | 	sub	local06, #28
2a550     1C 00 90 5D |  if_ne	jmp	#LR__3937
2a554     01 32 06 F6 | 	mov	local07, #1
2a558     F2 12 02 F6 | 	mov	arg01, objptr
2a55c     00 38 05 FF 
2a560     00 12 46 F5 | 	or	arg01, ##175112192
2a564     1C 30 06 F1 | 	add	local06, #28
2a568     18 13 62 FC | 	wrlong	arg01, local06
2a56c     1C 30 86 F1 | 	sub	local06, #28
2a570                 | LR__3937
2a570     20 30 06 F1 | 	add	local06, #32
2a574     18 4F 0A FB | 	rdlong	local21, local06 wz
2a578     20 30 86 F1 | 	sub	local06, #32
2a57c     1C 00 90 5D |  if_ne	jmp	#LR__3938
2a580     01 32 06 F6 | 	mov	local07, #1
2a584     F2 12 02 F6 | 	mov	arg01, objptr
2a588     00 40 05 FF 
2a58c     00 12 46 F5 | 	or	arg01, ##176160768
2a590     20 30 06 F1 | 	add	local06, #32
2a594     18 13 62 FC | 	wrlong	arg01, local06
2a598     20 30 86 F1 | 	sub	local06, #32
2a59c                 | LR__3938
2a59c     2C 30 06 F1 | 	add	local06, #44
2a5a0     18 4F 0A FB | 	rdlong	local21, local06 wz
2a5a4     2C 30 86 F1 | 	sub	local06, #44
2a5a8     44 00 90 5D |  if_ne	jmp	#LR__3941
2a5ac     14 36 06 F1 | 	add	local09, #20
2a5b0     1B 4F 0A FB | 	rdlong	local21, local09 wz
2a5b4     14 36 86 F1 | 	sub	local09, #20
2a5b8     18 00 90 AD |  if_e	jmp	#LR__3939
2a5bc     14 36 06 F1 | 	add	local09, #20
2a5c0     1B 4F 02 FB | 	rdlong	local21, local09
2a5c4     2C 30 06 F1 | 	add	local06, #44
2a5c8     18 4F 62 FC | 	wrlong	local21, local06
2a5cc     2C 30 86 F1 | 	sub	local06, #44
2a5d0     1C 00 90 FD | 	jmp	#LR__3940
2a5d4                 | LR__3939
2a5d4     01 32 06 F6 | 	mov	local07, #1
2a5d8     F2 12 02 F6 | 	mov	arg01, objptr
2a5dc     00 48 05 FF 
2a5e0     00 12 46 F5 | 	or	arg01, ##177209344
2a5e4     2C 30 06 F1 | 	add	local06, #44
2a5e8     18 13 62 FC | 	wrlong	arg01, local06
2a5ec     2C 30 86 F1 | 	sub	local06, #44
2a5f0                 | LR__3940
2a5f0                 | LR__3941
2a5f0                 | LR__3942
2a5f0     00 32 0E F2 | 	cmp	local07, #0 wz
2a5f4     18 13 02 56 |  if_ne	mov	arg01, local06
2a5f8     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2a5fc     00 4A 0E F2 | 	cmp	local19, #0 wz
2a600     00 12 06 A6 |  if_e	mov	arg01, #0
2a604     10 00 90 5D |  if_ne	jmp	#LR__3943
2a608     00 12 4E F2 | 	cmps	arg01, #0 wz
2a60c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a610     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2a614     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a618                 | LR__3943
2a618     25 FB 01 F6 | 	mov	result1, local19
2a61c                 | LR__3944
2a61c     A7 F0 03 F6 | 	mov	ptra, fp
2a620     B2 00 A0 FD | 	call	#popregs_
2a624                 | __system___openraw_ret
2a624     2D 00 64 FD | 	ret
2a628                 | 
2a628                 | __system___closeraw
2a628     05 4A 05 F6 | 	mov	COUNT_, #5
2a62c     A8 00 A0 FD | 	call	#pushregs_
2a630     09 27 02 F6 | 	mov	local01, arg01
2a634     00 28 06 F6 | 	mov	local02, #0
2a638     08 26 06 F1 | 	add	local01, #8
2a63c     13 FB 09 FB | 	rdlong	result1, local01 wz
2a640     08 26 86 F1 | 	sub	local01, #8
2a644     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a648     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2a64c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a650     01 FA 65 A6 |  if_e	neg	result1, #1
2a654     A8 00 90 AD |  if_e	jmp	#LR__3952
2a658     2C 26 06 F1 | 	add	local01, #44
2a65c     13 FB 09 FB | 	rdlong	result1, local01 wz
2a660     2C 26 86 F1 | 	sub	local01, #44
2a664     38 00 90 AD |  if_e	jmp	#LR__3950
2a668     2C 26 06 F1 | 	add	local01, #44
2a66c     13 2B 02 FB | 	rdlong	local03, local01
2a670     15 2D 02 F6 | 	mov	local04, local03
2a674     2C 26 86 F1 | 	sub	local01, #44
2a678     13 2C 46 F7 | 	zerox	local04, #19
2a67c     14 2A 46 F0 | 	shr	local03, #20
2a680     02 2A 66 F0 | 	shl	local03, #2
2a684     ED 2A 02 F1 | 	add	local03, __methods__
2a688     15 2B 02 FB | 	rdlong	local03, local03
2a68c     13 13 02 F6 | 	mov	arg01, local01
2a690     F2 2E 02 F6 | 	mov	local05, objptr
2a694     16 E5 01 F6 | 	mov	objptr, local04
2a698     2D 2A 62 FD | 	call	local03
2a69c     17 E5 01 F6 | 	mov	objptr, local05
2a6a0                 | LR__3950
2a6a0     24 26 06 F1 | 	add	local01, #36
2a6a4     13 2F 0A FB | 	rdlong	local05, local01 wz
2a6a8     24 26 86 F1 | 	sub	local01, #36
2a6ac     3C 00 90 AD |  if_e	jmp	#LR__3951
2a6b0     24 26 06 F1 | 	add	local01, #36
2a6b4     13 2B 02 FB | 	rdlong	local03, local01
2a6b8     15 2D 02 F6 | 	mov	local04, local03
2a6bc     24 26 86 F1 | 	sub	local01, #36
2a6c0     13 2C 46 F7 | 	zerox	local04, #19
2a6c4     14 2A 46 F0 | 	shr	local03, #20
2a6c8     02 2A 66 F0 | 	shl	local03, #2
2a6cc     ED 2A 02 F1 | 	add	local03, __methods__
2a6d0     15 2B 02 FB | 	rdlong	local03, local03
2a6d4     13 13 02 F6 | 	mov	arg01, local01
2a6d8     F2 2E 02 F6 | 	mov	local05, objptr
2a6dc     16 E5 01 F6 | 	mov	objptr, local04
2a6e0     2D 2A 62 FD | 	call	local03
2a6e4     17 E5 01 F6 | 	mov	objptr, local05
2a6e8     FD 28 02 F6 | 	mov	local02, result1
2a6ec                 | LR__3951
2a6ec     13 13 02 F6 | 	mov	arg01, local01
2a6f0     00 14 06 F6 | 	mov	arg02, #0
2a6f4     34 16 06 F6 | 	mov	arg03, #52
2a6f8     98 00 A0 FD | 	call	#\builtin_bytefill_
2a6fc     14 FB 01 F6 | 	mov	result1, local02
2a700                 | LR__3952
2a700     A7 F0 03 F6 | 	mov	ptra, fp
2a704     B2 00 A0 FD | 	call	#popregs_
2a708                 | __system___closeraw_ret
2a708     2D 00 64 FD | 	ret
2a70c                 | 
2a70c                 | __system___vfs_open_sdcardx
2a70c     0B 4A 05 F6 | 	mov	COUNT_, #11
2a710     A8 00 A0 FD | 	call	#pushregs_
2a714     09 2B 02 F6 | 	mov	local03, arg01
2a718     0A 2D 02 F6 | 	mov	local04, arg02
2a71c     0B 2F 02 F6 | 	mov	local05, arg03
2a720     0C 31 02 F6 | 	mov	local06, arg04
2a724     01 00 00 FF 
2a728     24 12 06 F6 | 	mov	arg01, ##548
2a72c     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
2a730     FD 32 02 F6 | 	mov	local07, result1
2a734     01 00 00 FF 
2a738     34 12 06 F6 | 	mov	arg01, ##564
2a73c     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
2a740     FD 34 02 F6 | 	mov	local08, result1
2a744     15 19 02 F6 | 	mov	arg04, local03
2a748     1F 18 C6 F0 | 	sar	arg04, #31
2a74c     15 17 02 F6 | 	mov	arg03, local03
2a750     01 12 06 F6 | 	mov	arg01, #1
2a754     00 14 06 F6 | 	mov	arg02, #0
2a758     EC DB BF FD | 	call	#__system___int64_shl
2a75c     FD 26 02 F6 | 	mov	local01, result1
2a760     FE 36 02 F6 | 	mov	local09, result2
2a764     16 19 02 F6 | 	mov	arg04, local04
2a768     1F 18 C6 F0 | 	sar	arg04, #31
2a76c     16 17 02 F6 | 	mov	arg03, local04
2a770     01 12 06 F6 | 	mov	arg01, #1
2a774     00 14 06 F6 | 	mov	arg02, #0
2a778     CC DB BF FD | 	call	#__system___int64_shl
2a77c     FD 26 42 F5 | 	or	local01, result1
2a780     FE 36 42 F5 | 	or	local09, result2
2a784     17 19 02 F6 | 	mov	arg04, local05
2a788     1F 18 C6 F0 | 	sar	arg04, #31
2a78c     17 17 02 F6 | 	mov	arg03, local05
2a790     01 12 06 F6 | 	mov	arg01, #1
2a794     00 14 06 F6 | 	mov	arg02, #0
2a798     AC DB BF FD | 	call	#__system___int64_shl
2a79c     FD 26 42 F5 | 	or	local01, result1
2a7a0     FE 36 42 F5 | 	or	local09, result2
2a7a4     18 19 02 F6 | 	mov	arg04, local06
2a7a8     1F 18 C6 F0 | 	sar	arg04, #31
2a7ac     18 17 02 F6 | 	mov	arg03, local06
2a7b0     01 12 06 F6 | 	mov	arg01, #1
2a7b4     00 14 06 F6 | 	mov	arg02, #0
2a7b8     8C DB BF FD | 	call	#__system___int64_shl
2a7bc     1B 15 02 F6 | 	mov	arg02, local09
2a7c0     FD 26 42 F5 | 	or	local01, result1
2a7c4     0A FD 41 F5 | 	or	result2, arg02
2a7c8     FE 28 02 F6 | 	mov	local02, result2
2a7cc     13 13 02 F6 | 	mov	arg01, local01
2a7d0     14 15 02 F6 | 	mov	arg02, local02
2a7d4     A8 DB BF FD | 	call	#__system___usepins
2a7d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2a7dc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a7e0     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2a7e4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a7e8     00 FA 05 A6 |  if_e	mov	result1, #0
2a7ec     B4 00 90 AD |  if_e	jmp	#LR__3962
2a7f0     13 39 02 F6 | 	mov	local10, local01
2a7f4     14 37 02 F6 | 	mov	local09, local02
2a7f8     01 00 00 FF 
2a7fc     08 32 06 F1 | 	add	local07, ##520
2a800     19 39 62 FC | 	wrlong	local10, local07
2a804     04 32 06 F1 | 	add	local07, #4
2a808     19 37 62 FC | 	wrlong	local09, local07
2a80c     01 00 00 FF 
2a810     0C 32 86 F1 | 	sub	local07, ##524
2a814     18 1B 02 F6 | 	mov	arg05, local06
2a818     00 12 06 F6 | 	mov	arg01, #0
2a81c     15 15 02 F6 | 	mov	arg02, local03
2a820     16 17 02 F6 | 	mov	arg03, local04
2a824     17 19 02 F6 | 	mov	arg04, local05
2a828     F2 38 02 F6 | 	mov	local10, objptr
2a82c     19 E5 01 F6 | 	mov	objptr, local07
2a830     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
2a834     1C E5 01 F6 | 	mov	objptr, local10
2a838     FD 3A 0A F6 | 	mov	local11, result1 wz
2a83c     24 00 90 5D |  if_ne	jmp	#LR__3960
2a840     AA 01 00 FF 
2a844     FE 14 06 F6 | 	mov	arg02, ##@LR__5377
2a848     1A 13 02 F6 | 	mov	arg01, local08
2a84c     00 16 06 F6 | 	mov	arg03, #0
2a850     F2 3A 02 F6 | 	mov	local11, objptr
2a854     19 E5 01 F6 | 	mov	objptr, local07
2a858     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
2a85c     1D E5 01 F6 | 	mov	objptr, local11
2a860     FD 3A 02 F6 | 	mov	local11, result1
2a864                 | LR__3960
2a864     00 3A 0E F2 | 	cmp	local11, #0 wz
2a868     24 00 90 AD |  if_e	jmp	#LR__3961
2a86c     13 13 02 F6 | 	mov	arg01, local01
2a870     14 15 02 F6 | 	mov	arg02, local02
2a874     5C DB BF FD | 	call	#__system___freepins
2a878     1D 13 6A F6 | 	neg	arg01, local11 wz
2a87c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a880     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2a884     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a888     00 FA 05 F6 | 	mov	result1, #0
2a88c     14 00 90 FD | 	jmp	#LR__3962
2a890                 | LR__3961
2a890     19 13 02 F6 | 	mov	arg01, local07
2a894     F2 3A 02 F6 | 	mov	local11, objptr
2a898     19 E5 01 F6 | 	mov	objptr, local07
2a89c     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
2a8a0     1D E5 01 F6 | 	mov	objptr, local11
2a8a4                 | LR__3962
2a8a4     A7 F0 03 F6 | 	mov	ptra, fp
2a8a8     B2 00 A0 FD | 	call	#popregs_
2a8ac                 | __system___vfs_open_sdcardx_ret
2a8ac     2D 00 64 FD | 	ret
2a8b0                 | 
2a8b0                 | __system____default_getc
2a8b0     03 4A 05 F6 | 	mov	COUNT_, #3
2a8b4     A8 00 A0 FD | 	call	#pushregs_
2a8b8     09 27 02 F6 | 	mov	local01, arg01
2a8bc     13 29 02 FB | 	rdlong	local02, local01
2a8c0     08 28 06 F1 | 	add	local02, #8
2a8c4     14 2B 02 FB | 	rdlong	local03, local02
2a8c8     02 2A CE F7 | 	test	local03, #2 wz
2a8cc     13 13 02 56 |  if_ne	mov	arg01, local01
2a8d0     00 01 B0 5D |  if_ne	call	#__system____default_flush
2a8d4     14 2B 02 FB | 	rdlong	local03, local02
2a8d8     01 2A 46 F5 | 	or	local03, #1
2a8dc     14 2B 62 FC | 	wrlong	local03, local02
2a8e0     08 28 86 F1 | 	sub	local02, #8
2a8e4     14 2B 0A FB | 	rdlong	local03, local02 wz
2a8e8     0C 00 90 5D |  if_ne	jmp	#LR__3970
2a8ec     13 13 02 F6 | 	mov	arg01, local01
2a8f0     68 18 B0 FD | 	call	#__system____default_filbuf
2a8f4     FD 2A 02 F6 | 	mov	local03, result1
2a8f8                 | LR__3970
2a8f8     01 2A 56 F2 | 	cmps	local03, #1 wc
2a8fc     01 FA 65 C6 |  if_b	neg	result1, #1
2a900     1C 00 90 CD |  if_b	jmp	#LR__3971
2a904     01 2A 86 F1 | 	sub	local03, #1
2a908     14 2B 62 FC | 	wrlong	local03, local02
2a90c     04 28 06 F1 | 	add	local02, #4
2a910     14 2B 02 FB | 	rdlong	local03, local02
2a914     15 FB C1 FA | 	rdbyte	result1, local03
2a918     01 2A 06 F1 | 	add	local03, #1
2a91c     14 2B 62 FC | 	wrlong	local03, local02
2a920                 | LR__3971
2a920     A7 F0 03 F6 | 	mov	ptra, fp
2a924     B2 00 A0 FD | 	call	#popregs_
2a928                 | __system____default_getc_ret
2a928     2D 00 64 FD | 	ret
2a92c                 | 
2a92c                 | __system____default_putc
2a92c     06 4A 05 F6 | 	mov	COUNT_, #6
2a930     A8 00 A0 FD | 	call	#pushregs_
2a934     09 27 02 F6 | 	mov	local01, arg01
2a938     0A 29 02 F6 | 	mov	local02, arg02
2a93c     14 2B 02 FB | 	rdlong	local03, local02
2a940     08 2A 06 F1 | 	add	local03, #8
2a944     15 FB 01 FB | 	rdlong	result1, local03
2a948     01 FA CD F7 | 	test	result1, #1 wz
2a94c     14 13 02 56 |  if_ne	mov	arg01, local02
2a950     80 00 B0 5D |  if_ne	call	#__system____default_flush
2a954     15 2D 02 FB | 	rdlong	local04, local03
2a958     02 2C 46 F5 | 	or	local04, #2
2a95c     15 2D 62 FC | 	wrlong	local04, local03
2a960     08 2A 86 F1 | 	sub	local03, #8
2a964     15 2F 02 FB | 	rdlong	local05, local03
2a968     10 2A 06 F1 | 	add	local03, #16
2a96c     15 15 02 FB | 	rdlong	arg02, local03
2a970     10 2A 86 F1 | 	sub	local03, #16
2a974     17 FB 01 F6 | 	mov	result1, local05
2a978     0A FB 01 F1 | 	add	result1, arg02
2a97c     FD 26 42 FC | 	wrbyte	local01, result1
2a980     13 27 E2 F8 | 	getbyte	local01, local01, #0
2a984     01 2E 06 F1 | 	add	local05, #1
2a988     15 2F 62 FC | 	wrlong	local05, local03
2a98c     06 28 06 F1 | 	add	local02, #6
2a990     14 31 EA FA | 	rdword	local06, local02 wz
2a994     06 28 86 F1 | 	sub	local02, #6
2a998     0C 2A 06 51 |  if_ne	add	local03, #12
2a99c     15 2D 02 5B |  if_ne	rdlong	local04, local03
2a9a0     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
2a9a4     0C 00 90 AD |  if_e	jmp	#LR__3980
2a9a8     0A 26 0E F2 | 	cmp	local01, #10 wz
2a9ac     01 30 0E A2 |  if_e	cmp	local06, #1 wz
2a9b0     10 00 90 5D |  if_ne	jmp	#LR__3981
2a9b4                 | LR__3980
2a9b4     14 13 02 F6 | 	mov	arg01, local02
2a9b8     18 00 B0 FD | 	call	#__system____default_flush
2a9bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2a9c0     01 26 66 56 |  if_ne	neg	local01, #1
2a9c4                 | LR__3981
2a9c4     13 FB 01 F6 | 	mov	result1, local01
2a9c8     A7 F0 03 F6 | 	mov	ptra, fp
2a9cc     B2 00 A0 FD | 	call	#popregs_
2a9d0                 | __system____default_putc_ret
2a9d0     2D 00 64 FD | 	ret
2a9d4                 | 
2a9d4                 | __system____default_flush
2a9d4     06 4A 05 F6 | 	mov	COUNT_, #6
2a9d8     A8 00 A0 FD | 	call	#pushregs_
2a9dc     09 27 02 F6 | 	mov	local01, arg01
2a9e0     13 29 02 FB | 	rdlong	local02, local01
2a9e4     14 2B 02 FB | 	rdlong	local03, local02
2a9e8     08 28 06 F1 | 	add	local02, #8
2a9ec     14 FB 01 FB | 	rdlong	result1, local02
2a9f0     08 28 86 F1 | 	sub	local02, #8
2a9f4     02 FA CD F7 | 	test	result1, #2 wz
2a9f8     D0 00 90 AD |  if_e	jmp	#LR__3992
2a9fc     01 2A 56 F2 | 	cmps	local03, #1 wc
2aa00     20 01 90 CD |  if_b	jmp	#LR__3994
2aa04     08 26 06 F1 | 	add	local01, #8
2aa08     13 FB 01 FB | 	rdlong	result1, local01
2aa0c     08 26 86 F1 | 	sub	local01, #8
2aa10     40 FA CD F7 | 	test	result1, #64 wz
2aa14     68 00 90 AD |  if_e	jmp	#LR__3991
2aa18     08 26 06 F1 | 	add	local01, #8
2aa1c     13 17 02 FB | 	rdlong	arg03, local01
2aa20     08 26 86 F1 | 	sub	local01, #8
2aa24     80 16 CE F7 | 	test	arg03, #128 wz
2aa28     54 00 90 AD |  if_e	jmp	#LR__3990
2aa2c     30 26 06 F1 | 	add	local01, #48
2aa30     13 2D 02 FB | 	rdlong	local04, local01
2aa34     16 2F 02 F6 | 	mov	local05, local04
2aa38     30 26 86 F1 | 	sub	local01, #48
2aa3c     13 2E 46 F7 | 	zerox	local05, #19
2aa40     14 2C 46 F0 | 	shr	local04, #20
2aa44     02 2C 66 F0 | 	shl	local04, #2
2aa48     ED 2C 02 F1 | 	add	local04, __methods__
2aa4c     16 2D 02 FB | 	rdlong	local04, local04
2aa50     13 13 02 F6 | 	mov	arg01, local01
2aa54     00 14 06 F6 | 	mov	arg02, #0
2aa58     02 16 06 F6 | 	mov	arg03, #2
2aa5c     F2 30 02 F6 | 	mov	local06, objptr
2aa60     17 E5 01 F6 | 	mov	objptr, local05
2aa64     2D 2C 62 FD | 	call	local04
2aa68     18 E5 01 F6 | 	mov	objptr, local06
2aa6c     08 26 06 F1 | 	add	local01, #8
2aa70     13 31 02 FB | 	rdlong	local06, local01
2aa74     80 30 26 F5 | 	andn	local06, #128
2aa78     13 31 62 FC | 	wrlong	local06, local01
2aa7c     08 26 86 F1 | 	sub	local01, #8
2aa80                 | LR__3990
2aa80                 | LR__3991
2aa80     18 26 06 F1 | 	add	local01, #24
2aa84     13 2D 02 FB | 	rdlong	local04, local01
2aa88     16 2F 02 F6 | 	mov	local05, local04
2aa8c     18 26 86 F1 | 	sub	local01, #24
2aa90     13 2E 46 F7 | 	zerox	local05, #19
2aa94     14 2C 46 F0 | 	shr	local04, #20
2aa98     02 2C 66 F0 | 	shl	local04, #2
2aa9c     ED 2C 02 F1 | 	add	local04, __methods__
2aaa0     16 2D 02 FB | 	rdlong	local04, local04
2aaa4     10 28 06 F1 | 	add	local02, #16
2aaa8     14 15 02 FB | 	rdlong	arg02, local02
2aaac     10 28 86 F1 | 	sub	local02, #16
2aab0     13 13 02 F6 | 	mov	arg01, local01
2aab4     15 17 02 F6 | 	mov	arg03, local03
2aab8     F2 30 02 F6 | 	mov	local06, objptr
2aabc     17 E5 01 F6 | 	mov	objptr, local05
2aac0     2D 2C 62 FD | 	call	local04
2aac4     18 E5 01 F6 | 	mov	objptr, local06
2aac8     58 00 90 FD | 	jmp	#LR__3994
2aacc                 | LR__3992
2aacc     08 28 06 F1 | 	add	local02, #8
2aad0     14 31 02 FB | 	rdlong	local06, local02
2aad4     08 28 86 F1 | 	sub	local02, #8
2aad8     01 30 CE F7 | 	test	local06, #1 wz
2aadc     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2aae0     40 00 90 AD |  if_e	jmp	#LR__3993
2aae4     30 26 06 F1 | 	add	local01, #48
2aae8     13 2D 02 FB | 	rdlong	local04, local01
2aaec     16 2F 02 F6 | 	mov	local05, local04
2aaf0     30 26 86 F1 | 	sub	local01, #48
2aaf4     13 2E 46 F7 | 	zerox	local05, #19
2aaf8     14 2C 46 F0 | 	shr	local04, #20
2aafc     02 2C 66 F0 | 	shl	local04, #2
2ab00     ED 2C 02 F1 | 	add	local04, __methods__
2ab04     16 2D 02 FB | 	rdlong	local04, local04
2ab08     13 13 02 F6 | 	mov	arg01, local01
2ab0c     15 15 62 F6 | 	neg	arg02, local03
2ab10     01 16 06 F6 | 	mov	arg03, #1
2ab14     F2 30 02 F6 | 	mov	local06, objptr
2ab18     17 E5 01 F6 | 	mov	objptr, local05
2ab1c     2D 2C 62 FD | 	call	local04
2ab20     18 E5 01 F6 | 	mov	objptr, local06
2ab24                 | LR__3993
2ab24                 | LR__3994
2ab24     14 01 68 FC | 	wrlong	#0, local02
2ab28     04 28 06 F1 | 	add	local02, #4
2ab2c     14 01 68 FC | 	wrlong	#0, local02
2ab30     04 28 06 F1 | 	add	local02, #4
2ab34     14 01 68 FC | 	wrlong	#0, local02
2ab38     00 FA 05 F6 | 	mov	result1, #0
2ab3c     A7 F0 03 F6 | 	mov	ptra, fp
2ab40     B2 00 A0 FD | 	call	#popregs_
2ab44                 | __system____default_flush_ret
2ab44     2D 00 64 FD | 	ret
2ab48                 | 
2ab48                 | __system____default_buffer_init
2ab48     02 4A 05 F6 | 	mov	COUNT_, #2
2ab4c     A8 00 A0 FD | 	call	#pushregs_
2ab50     09 27 02 F6 | 	mov	local01, arg01
2ab54     13 29 02 FB | 	rdlong	local02, local01
2ab58     13 13 02 F6 | 	mov	arg01, local01
2ab5c     34 03 B0 FD | 	call	#__system___isatty
2ab60     00 FA 0D F2 | 	cmp	result1, #0 wz
2ab64     06 26 06 51 |  if_ne	add	local01, #6
2ab68     13 0B 58 5C |  if_ne	wrword	#5, local01
2ab6c     06 26 06 A1 |  if_e	add	local01, #6
2ab70     13 0D 58 AC |  if_e	wrword	#6, local01
2ab74     14 28 06 F1 | 	add	local02, #20
2ab78     14 27 02 F6 | 	mov	local01, local02
2ab7c     04 28 86 F1 | 	sub	local02, #4
2ab80     14 27 62 FC | 	wrlong	local01, local02
2ab84     04 28 86 F1 | 	sub	local02, #4
2ab88     02 00 80 FF 
2ab8c     14 01 68 FC | 	wrlong	##1024, local02
2ab90     00 FA 05 F6 | 	mov	result1, #0
2ab94     A7 F0 03 F6 | 	mov	ptra, fp
2ab98     B2 00 A0 FD | 	call	#popregs_
2ab9c                 | __system____default_buffer_init_ret
2ab9c     2D 00 64 FD | 	ret
2aba0                 | 
2aba0                 | __system__stat
2aba0     04 4A 05 F6 | 	mov	COUNT_, #4
2aba4     A8 00 A0 FD | 	call	#pushregs_
2aba8     0A 27 02 F6 | 	mov	local01, arg02
2abac     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2abb0     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2abb4     09 15 02 F6 | 	mov	arg02, arg01
2abb8     14 13 02 F6 | 	mov	arg01, local02
2abbc     00 16 06 F6 | 	mov	arg03, #0
2abc0     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2abc4     58 B5 BF FD | 	call	#__system____getvfsforfile
2abc8     FD 2A 0A F6 | 	mov	local03, result1 wz
2abcc     10 00 90 AD |  if_e	jmp	#LR__4000
2abd0     34 2A 06 F1 | 	add	local03, #52
2abd4     15 17 0A FB | 	rdlong	arg03, local03 wz
2abd8     34 2A 86 F1 | 	sub	local03, #52
2abdc     14 00 90 5D |  if_ne	jmp	#LR__4001
2abe0                 | LR__4000
2abe0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2abe4     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2abe8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2abec     01 FA 65 F6 | 	neg	result1, #1
2abf0     68 00 90 FD | 	jmp	#LR__4002
2abf4                 | LR__4001
2abf4     13 13 02 F6 | 	mov	arg01, local01
2abf8     00 14 06 F6 | 	mov	arg02, #0
2abfc     30 16 06 F6 | 	mov	arg03, #48
2ac00     09 2D 02 F6 | 	mov	local04, arg01
2ac04     98 00 A0 FD | 	call	#\builtin_bytefill_
2ac08     16 FB 01 F6 | 	mov	result1, local04
2ac0c     14 13 CA FA | 	rdbyte	arg01, local02 wz
2ac10     08 26 06 A1 |  if_e	add	local01, #8
2ac14     08 00 80 AF 
2ac18     13 FF 6B AC |  if_e	wrlong	##4607, local01
2ac1c     00 FA 05 A6 |  if_e	mov	result1, #0
2ac20     38 00 90 AD |  if_e	jmp	#LR__4002
2ac24     34 2A 06 F1 | 	add	local03, #52
2ac28     15 2B 02 FB | 	rdlong	local03, local03
2ac2c     15 2D 02 F6 | 	mov	local04, local03
2ac30     13 2A 46 F7 | 	zerox	local03, #19
2ac34     14 2C 46 F0 | 	shr	local04, #20
2ac38     02 2C 66 F0 | 	shl	local04, #2
2ac3c     ED 2C 02 F1 | 	add	local04, __methods__
2ac40     16 2D 02 FB | 	rdlong	local04, local04
2ac44     14 13 02 F6 | 	mov	arg01, local02
2ac48     13 15 02 F6 | 	mov	arg02, local01
2ac4c     F2 28 02 F6 | 	mov	local02, objptr
2ac50     15 E5 01 F6 | 	mov	objptr, local03
2ac54     2D 2C 62 FD | 	call	local04
2ac58     14 E5 01 F6 | 	mov	objptr, local02
2ac5c                 | LR__4002
2ac5c     A7 F0 03 F6 | 	mov	ptra, fp
2ac60     B2 00 A0 FD | 	call	#popregs_
2ac64                 | __system__stat_ret
2ac64     2D 00 64 FD | 	ret
2ac68                 | 
2ac68                 | __system__write
2ac68     0A 12 16 F2 | 	cmp	arg01, #10 wc
2ac6c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2ac70     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2ac74     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2ac78     01 FA 65 36 |  if_ae	neg	result1, #1
2ac7c     20 00 90 3D |  if_ae	jmp	#LR__4010
2ac80     34 12 06 FD | 	qmul	arg01, #52
2ac84     02 00 00 FF 
2ac88     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2ac8c     18 12 62 FD | 	getqx	arg01
2ac90     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2ac94     02 00 00 FF 
2ac98     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2ac9c     0C 10 B0 FD | 	call	#__system___vfswrite
2aca0                 | LR__4010
2aca0                 | __system__write_ret
2aca0     2D 00 64 FD | 	ret
2aca4                 | 
2aca4                 | __system__read
2aca4     0A 12 16 F2 | 	cmp	arg01, #10 wc
2aca8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2acac     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2acb0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2acb4     01 FA 65 36 |  if_ae	neg	result1, #1
2acb8     20 00 90 3D |  if_ae	jmp	#LR__4020
2acbc     34 12 06 FD | 	qmul	arg01, #52
2acc0     02 00 00 FF 
2acc4     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2acc8     18 12 62 FD | 	getqx	arg01
2accc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2acd0     02 00 00 FF 
2acd4     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2acd8     98 11 B0 FD | 	call	#__system___vfsread
2acdc                 | LR__4020
2acdc                 | __system__read_ret
2acdc     2D 00 64 FD | 	ret
2ace0                 | 
2ace0                 | __system__close
2ace0     0A 12 16 F2 | 	cmp	arg01, #10 wc
2ace4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2ace8     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2acec     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2acf0     01 FA 65 36 |  if_ae	neg	result1, #1
2acf4     20 00 90 3D |  if_ae	jmp	#LR__4030
2acf8     34 12 06 FD | 	qmul	arg01, #52
2acfc     02 00 00 FF 
2ad00     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2ad04     18 12 62 FD | 	getqx	arg01
2ad08     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2ad0c     02 00 00 FF 
2ad10     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2ad14     10 F9 BF FD | 	call	#__system___closeraw
2ad18                 | LR__4030
2ad18                 | __system__close_ret
2ad18     2D 00 64 FD | 	ret
2ad1c                 | 
2ad1c                 | __system__lseek
2ad1c     06 4A 05 F6 | 	mov	COUNT_, #6
2ad20     A8 00 A0 FD | 	call	#pushregs_
2ad24     0A 12 16 F2 | 	cmp	arg01, #10 wc
2ad28     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2ad2c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2ad30     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2ad34     01 FA 65 36 |  if_ae	neg	result1, #1
2ad38     C4 00 90 3D |  if_ae	jmp	#LR__4041
2ad3c     34 12 06 FD | 	qmul	arg01, #52
2ad40     02 00 00 FF 
2ad44     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2ad48     18 26 62 FD | 	getqx	local01
2ad4c     F3 26 02 F1 | 	add	local01, ptr___system__dat__
2ad50     30 26 06 F1 | 	add	local01, #48
2ad54     13 13 0A FB | 	rdlong	arg01, local01 wz
2ad58     30 26 86 F1 | 	sub	local01, #48
2ad5c     02 00 00 FF 
2ad60     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2ad64     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ad68     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2ad6c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ad70     01 FA 65 A6 |  if_e	neg	result1, #1
2ad74     88 00 90 AD |  if_e	jmp	#LR__4041
2ad78     08 26 06 F1 | 	add	local01, #8
2ad7c     13 29 02 FB | 	rdlong	local02, local01
2ad80     08 26 86 F1 | 	sub	local01, #8
2ad84     40 28 CE F7 | 	test	local02, #64 wz
2ad88     08 26 06 51 |  if_ne	add	local01, #8
2ad8c     13 29 02 5B |  if_ne	rdlong	local02, local01
2ad90     80 28 46 55 |  if_ne	or	local02, #128
2ad94     13 29 62 5C |  if_ne	wrlong	local02, local01
2ad98     08 26 86 51 |  if_ne	sub	local01, #8
2ad9c     30 26 06 F1 | 	add	local01, #48
2ada0     13 2B 02 FB | 	rdlong	local03, local01
2ada4     15 2D 02 F6 | 	mov	local04, local03
2ada8     30 26 86 F1 | 	sub	local01, #48
2adac     13 2C 46 F7 | 	zerox	local04, #19
2adb0     14 2A 46 F0 | 	shr	local03, #20
2adb4     02 2A 66 F0 | 	shl	local03, #2
2adb8     ED 2A 02 F1 | 	add	local03, __methods__
2adbc     15 2B 02 FB | 	rdlong	local03, local03
2adc0     13 13 02 F6 | 	mov	arg01, local01
2adc4     F2 2E 02 F6 | 	mov	local05, objptr
2adc8     16 E5 01 F6 | 	mov	objptr, local04
2adcc     2D 2A 62 FD | 	call	local03
2add0     17 E5 01 F6 | 	mov	objptr, local05
2add4     FD 30 02 F6 | 	mov	local06, result1
2add8     00 30 56 F2 | 	cmps	local06, #0 wc
2addc     1C 00 90 3D |  if_ae	jmp	#LR__4040
2ade0     18 13 6A F6 | 	neg	arg01, local06 wz
2ade4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ade8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2adec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2adf0     01 FA 65 56 |  if_ne	neg	result1, #1
2adf4     00 FA 05 A6 |  if_e	mov	result1, #0
2adf8     04 00 90 FD | 	jmp	#LR__4041
2adfc                 | LR__4040
2adfc     18 FB 01 F6 | 	mov	result1, local06
2ae00                 | LR__4041
2ae00     A7 F0 03 F6 | 	mov	ptra, fp
2ae04     B2 00 A0 FD | 	call	#popregs_
2ae08                 | __system__lseek_ret
2ae08     2D 00 64 FD | 	ret
2ae0c                 | 
2ae0c                 | __system___ioctl
2ae0c     03 4A 05 F6 | 	mov	COUNT_, #3
2ae10     A8 00 A0 FD | 	call	#pushregs_
2ae14     00 12 4E F2 | 	cmps	arg01, #0 wz
2ae18     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ae1c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ae20     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ae24     01 FA 65 A6 |  if_e	neg	result1, #1
2ae28     5C 00 90 AD |  if_e	jmp	#LR__4051
2ae2c     28 12 06 F1 | 	add	arg01, #40
2ae30     09 27 02 FB | 	rdlong	local01, arg01
2ae34     13 29 02 F6 | 	mov	local02, local01
2ae38     28 12 86 F1 | 	sub	arg01, #40
2ae3c     13 28 46 F7 | 	zerox	local02, #19
2ae40     14 26 46 F0 | 	shr	local01, #20
2ae44     02 26 66 F0 | 	shl	local01, #2
2ae48     ED 26 02 F1 | 	add	local01, __methods__
2ae4c     13 27 02 FB | 	rdlong	local01, local01
2ae50     F2 2A 02 F6 | 	mov	local03, objptr
2ae54     14 E5 01 F6 | 	mov	objptr, local02
2ae58     2D 26 62 FD | 	call	local01
2ae5c     15 E5 01 F6 | 	mov	objptr, local03
2ae60     FD 12 0A F6 | 	mov	arg01, result1 wz
2ae64     1C 00 90 AD |  if_e	jmp	#LR__4050
2ae68     00 12 4E F2 | 	cmps	arg01, #0 wz
2ae6c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ae70     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2ae74     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2ae78     01 FA 65 56 |  if_ne	neg	result1, #1
2ae7c     00 FA 05 A6 |  if_e	mov	result1, #0
2ae80     04 00 90 FD | 	jmp	#LR__4051
2ae84                 | LR__4050
2ae84     00 FA 05 F6 | 	mov	result1, #0
2ae88                 | LR__4051
2ae88     A7 F0 03 F6 | 	mov	ptra, fp
2ae8c     B2 00 A0 FD | 	call	#popregs_
2ae90                 | __system___ioctl_ret
2ae90     2D 00 64 FD | 	ret
2ae94                 | 
2ae94                 | __system___isatty
2ae94     00 4A 05 F6 | 	mov	COUNT_, #0
2ae98     A8 00 A0 FD | 	call	#pushregs_
2ae9c     0C F0 07 F1 | 	add	ptra, #12
2aea0     04 4E 05 F1 | 	add	fp, #4
2aea4     A7 12 62 FC | 	wrlong	arg01, fp
2aea8     04 4E 05 F1 | 	add	fp, #4
2aeac     A7 16 02 F6 | 	mov	arg03, fp
2aeb0     08 4E 85 F1 | 	sub	fp, #8
2aeb4     00 15 06 F6 | 	mov	arg02, #256
2aeb8     50 FF BF FD | 	call	#__system___ioctl
2aebc     00 FA 0D F2 | 	cmp	result1, #0 wz
2aec0     01 FA 05 A6 |  if_e	mov	result1, #1
2aec4     00 FA 05 56 |  if_ne	mov	result1, #0
2aec8     A7 F0 03 F6 | 	mov	ptra, fp
2aecc     B2 00 A0 FD | 	call	#popregs_
2aed0                 | __system___isatty_ret
2aed0     2D 00 64 FD | 	ret
2aed4                 | 
2aed4                 | __system____getftab
2aed4     0A 12 16 F2 | 	cmp	arg01, #10 wc
2aed8     34 12 06 CD |  if_b	qmul	arg01, #52
2aedc     00 FA 05 36 |  if_ae	mov	result1, #0
2aee0     02 00 00 CF 
2aee4     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
2aee8     18 FA 61 CD |  if_b	getqx	result1
2aeec     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2aef0     02 00 00 CF 
2aef4     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
2aef8                 | __system____getftab_ret
2aef8     2D 00 64 FD | 	ret
2aefc                 | 
2aefc                 | __system__strncpy
2aefc     09 01 02 F6 | 	mov	_var01, arg01
2af00                 | LR__4060
2af00     01 16 86 F1 | 	sub	arg03, #1
2af04     00 16 56 F2 | 	cmps	arg03, #0 wc
2af08     18 00 90 CD |  if_b	jmp	#LR__4061
2af0c     0A FB C1 FA | 	rdbyte	result1, arg02
2af10     00 FB 41 FC | 	wrbyte	result1, _var01
2af14     01 14 06 F1 | 	add	arg02, #1
2af18     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2af1c     01 00 06 F1 | 	add	_var01, #1
2af20     DC FF 9F 5D |  if_ne	jmp	#LR__4060
2af24                 | LR__4061
2af24     97 0C 48 FB | 	callpa	#(@LR__4063-@LR__4062)>>2,fcache_load_ptr_
2af28                 | LR__4062
2af28     01 16 86 F1 | 	sub	arg03, #1
2af2c     00 16 56 F2 | 	cmps	arg03, #0 wc
2af30     00 03 02 36 |  if_ae	mov	_var02, _var01
2af34     01 00 06 31 |  if_ae	add	_var01, #1
2af38     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2af3c     E8 FF 9F 3D |  if_ae	jmp	#LR__4062
2af40                 | LR__4063
2af40     09 FB 01 F6 | 	mov	result1, arg01
2af44                 | __system__strncpy_ret
2af44     2D 00 64 FD | 	ret
2af48                 | 
2af48                 | __system__strncat
2af48     00 14 4E F2 | 	cmps	arg02, #0 wz
2af4c     50 00 90 AD |  if_e	jmp	#LR__4074
2af50     01 16 16 F2 | 	cmp	arg03, #1 wc
2af54     48 00 90 CD |  if_b	jmp	#LR__4074
2af58     09 01 02 F6 | 	mov	_var01, arg01
2af5c     97 1E 48 FB | 	callpa	#(@LR__4072-@LR__4070)>>2,fcache_load_ptr_
2af60                 | LR__4070
2af60     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2af64     01 00 06 51 |  if_ne	add	_var01, #1
2af68     F4 FF 9F 5D |  if_ne	jmp	#LR__4070
2af6c     0B 03 02 F6 | 	mov	_var02, arg03
2af70                 | LR__4071
2af70     0A 05 C2 FA | 	rdbyte	_var03, arg02
2af74     02 07 02 F6 | 	mov	_var04, _var03
2af78     07 06 4E F7 | 	zerox	_var04, #7 wz
2af7c     01 14 06 F1 | 	add	arg02, #1
2af80     18 00 90 AD |  if_e	jmp	#LR__4073
2af84     01 02 86 F1 | 	sub	_var02, #1
2af88     00 02 56 F2 | 	cmps	_var02, #0 wc
2af8c     00 07 02 36 |  if_ae	mov	_var04, _var01
2af90     01 00 06 31 |  if_ae	add	_var01, #1
2af94     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
2af98     D4 FF 9F 3D |  if_ae	jmp	#LR__4071
2af9c                 | LR__4072
2af9c                 | LR__4073
2af9c     00 01 48 FC | 	wrbyte	#0, _var01
2afa0                 | LR__4074
2afa0     09 FB 01 F6 | 	mov	result1, arg01
2afa4                 | __system__strncat_ret
2afa4     2D 00 64 FD | 	ret
2afa8                 | 
2afa8                 | __system__strncmp
2afa8     09 01 0A F6 | 	mov	_var01, arg01 wz
2afac     14 00 90 5D |  if_ne	jmp	#LR__4080
2afb0     00 14 0E F2 | 	cmp	arg02, #0 wz
2afb4     01 02 66 56 |  if_ne	neg	_var02, #1
2afb8     00 02 06 A6 |  if_e	mov	_var02, #0
2afbc     01 FB 01 F6 | 	mov	result1, _var02
2afc0     74 00 90 FD | 	jmp	#__system__strncmp_ret
2afc4                 | LR__4080
2afc4     00 14 0E F2 | 	cmp	arg02, #0 wz
2afc8     01 FA 05 A6 |  if_e	mov	result1, #1
2afcc     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2afd0     0B 05 02 F6 | 	mov	_var03, arg03
2afd4     97 16 48 FB | 	callpa	#(@LR__4082-@LR__4081)>>2,fcache_load_ptr_
2afd8                 | LR__4081
2afd8     00 07 C2 FA | 	rdbyte	_var04, _var01
2afdc     0A 09 02 F6 | 	mov	_var05, arg02
2afe0     04 0B C2 FA | 	rdbyte	_var06, _var05
2afe4     01 04 86 F1 | 	sub	_var03, #1
2afe8     00 04 56 F2 | 	cmps	_var03, #0 wc
2afec     01 00 06 F1 | 	add	_var01, #1
2aff0     01 14 06 F1 | 	add	arg02, #1
2aff4     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2aff8     08 00 90 2D |  if_nc_and_z	jmp	#LR__4083
2affc     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2b000     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4081
2b004                 | LR__4082
2b004                 | LR__4083
2b004     00 04 56 F2 | 	cmps	_var03, #0 wc
2b008     00 FA 05 C6 |  if_b	mov	result1, #0
2b00c     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2b010     05 07 0A F2 | 	cmp	_var04, _var06 wz
2b014     00 FA 05 A6 |  if_e	mov	result1, #0
2b018     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2b01c     00 06 0E F2 | 	cmp	_var04, #0 wz
2b020     01 FA 65 A6 |  if_e	neg	result1, #1
2b024     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2b028     00 0A 0E F2 | 	cmp	_var06, #0 wz
2b02c     01 FA 05 A6 |  if_e	mov	result1, #1
2b030     03 FB 01 56 |  if_ne	mov	result1, _var04
2b034     05 FB 81 51 |  if_ne	sub	result1, _var06
2b038                 | __system__strncmp_ret
2b038     2D 00 64 FD | 	ret
2b03c                 | 
2b03c                 | __system____root_opendir
2b03c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2b040     04 12 06 F1 | 	add	arg01, #4
2b044     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
2b048     00 FA 05 F6 | 	mov	result1, #0
2b04c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2b050                 | __system____root_opendir_ret
2b050     2D 00 64 FD | 	ret
2b054                 | 
2b054                 | __system____root_readdir
2b054     03 4A 05 F6 | 	mov	COUNT_, #3
2b058     A8 00 A0 FD | 	call	#pushregs_
2b05c     09 27 02 F6 | 	mov	local01, arg01
2b060     0A 29 02 F6 | 	mov	local02, arg02
2b064     04 26 06 F1 | 	add	local01, #4
2b068     13 2B 02 FB | 	rdlong	local03, local01
2b06c     04 26 86 F1 | 	sub	local01, #4
2b070                 | LR__4090
2b070     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2b074     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
2b078     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2b07c     01 FA 65 A6 |  if_e	neg	result1, #1
2b080     48 00 90 AD |  if_e	jmp	#LR__4091
2b084     15 17 0A FB | 	rdlong	arg03, local03 wz
2b088     04 2A 06 A1 |  if_e	add	local03, #4
2b08c     E0 FF 9F AD |  if_e	jmp	#LR__4090
2b090     15 15 02 FB | 	rdlong	arg02, local03
2b094     01 14 06 F1 | 	add	arg02, #1
2b098     14 13 02 F6 | 	mov	arg01, local02
2b09c     40 16 06 F6 | 	mov	arg03, #64
2b0a0     58 FE BF FD | 	call	#__system__strncpy
2b0a4     50 28 06 F1 | 	add	local02, #80
2b0a8     14 03 48 FC | 	wrbyte	#1, local02
2b0ac     08 28 86 F1 | 	sub	local02, #8
2b0b0     14 01 68 FC | 	wrlong	#0, local02
2b0b4     04 28 06 F1 | 	add	local02, #4
2b0b8     14 01 68 FC | 	wrlong	#0, local02
2b0bc     04 2A 06 F1 | 	add	local03, #4
2b0c0     04 26 06 F1 | 	add	local01, #4
2b0c4     13 2B 62 FC | 	wrlong	local03, local01
2b0c8     00 FA 05 F6 | 	mov	result1, #0
2b0cc                 | LR__4091
2b0cc     A7 F0 03 F6 | 	mov	ptra, fp
2b0d0     B2 00 A0 FD | 	call	#popregs_
2b0d4                 | __system____root_readdir_ret
2b0d4     2D 00 64 FD | 	ret
2b0d8                 | 
2b0d8                 | __system____root_closedir
2b0d8     00 FA 05 F6 | 	mov	result1, #0
2b0dc                 | __system____root_closedir_ret
2b0dc     2D 00 64 FD | 	ret
2b0e0                 | 
2b0e0                 | __system____root_stat
2b0e0     0A 01 02 F6 | 	mov	_var01, arg02
2b0e4     00 13 02 F6 | 	mov	arg01, _var01
2b0e8     00 14 06 F6 | 	mov	arg02, #0
2b0ec     30 16 06 F6 | 	mov	arg03, #48
2b0f0     98 00 A0 FD | 	call	#\builtin_bytefill_
2b0f4     08 00 06 F1 | 	add	_var01, #8
2b0f8     08 00 80 FF 
2b0fc     00 FF 6B FC | 	wrlong	##4607, _var01
2b100     00 FA 05 F6 | 	mov	result1, #0
2b104                 | __system____root_stat_ret
2b104     2D 00 64 FD | 	ret
2b108                 | 
2b108                 | __system___normalizeName
2b108     00 00 06 F6 | 	mov	_var01, #0
2b10c     09 03 02 F6 | 	mov	_var02, arg01
2b110     01 05 02 F6 | 	mov	_var03, _var02
2b114                 | LR__4100
2b114     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2b118     5C 01 90 AD |  if_e	jmp	#LR__4119
2b11c     00 00 0E F2 | 	cmp	_var01, #0 wz
2b120     02 07 02 56 |  if_ne	mov	_var04, _var03
2b124     01 04 06 51 |  if_ne	add	_var03, #1
2b128     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2b12c     00 00 06 56 |  if_ne	mov	_var01, #0
2b130     01 07 C2 FA | 	rdbyte	_var04, _var02
2b134     2E 06 0E F2 | 	cmp	_var04, #46 wz
2b138     D8 00 90 5D |  if_ne	jmp	#LR__4112
2b13c     01 02 06 F1 | 	add	_var02, #1
2b140     01 07 C2 FA | 	rdbyte	_var04, _var02
2b144     01 02 86 F1 | 	sub	_var02, #1
2b148     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b14c     18 00 90 AD |  if_e	jmp	#LR__4101
2b150     01 02 06 F1 | 	add	_var02, #1
2b154     01 09 C2 FA | 	rdbyte	_var05, _var02
2b158     01 02 86 F1 | 	sub	_var02, #1
2b15c     04 0B 02 F6 | 	mov	_var06, _var05
2b160     07 0A 4E F7 | 	zerox	_var06, #7 wz
2b164     10 00 90 5D |  if_ne	jmp	#LR__4102
2b168                 | LR__4101
2b168     01 0D 02 F6 | 	mov	_var07, _var02
2b16c     01 0C 06 F1 | 	add	_var07, #1
2b170     06 03 02 F6 | 	mov	_var02, _var07
2b174     E0 00 90 FD | 	jmp	#LR__4116
2b178                 | LR__4102
2b178     01 02 06 F1 | 	add	_var02, #1
2b17c     01 0D C2 FA | 	rdbyte	_var07, _var02
2b180     01 02 86 F1 | 	sub	_var02, #1
2b184     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2b188     2E 06 0E F2 | 	cmp	_var04, #46 wz
2b18c     84 00 90 5D |  if_ne	jmp	#LR__4111
2b190     02 02 06 F1 | 	add	_var02, #2
2b194     01 0D C2 FA | 	rdbyte	_var07, _var02
2b198     02 02 86 F1 | 	sub	_var02, #2
2b19c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2b1a0     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b1a4     18 00 90 AD |  if_e	jmp	#LR__4103
2b1a8     02 02 06 F1 | 	add	_var02, #2
2b1ac     01 09 C2 FA | 	rdbyte	_var05, _var02
2b1b0     02 02 86 F1 | 	sub	_var02, #2
2b1b4     04 0B 02 F6 | 	mov	_var06, _var05
2b1b8     07 0A 4E F7 | 	zerox	_var06, #7 wz
2b1bc     54 00 90 5D |  if_ne	jmp	#LR__4110
2b1c0                 | LR__4103
2b1c0     02 02 06 F1 | 	add	_var02, #2
2b1c4     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2b1c8     40 00 90 ED |  if_be	jmp	#LR__4109
2b1cc     02 0F 02 F6 | 	mov	_var08, _var03
2b1d0     01 0E 86 F1 | 	sub	_var08, #1
2b1d4                 | LR__4104
2b1d4     07 07 C2 FA | 	rdbyte	_var04, _var08
2b1d8     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b1dc     0C 00 90 5D |  if_ne	jmp	#LR__4105
2b1e0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2b1e4     01 0E 86 11 |  if_a	sub	_var08, #1
2b1e8     E8 FF 9F 1D |  if_a	jmp	#LR__4104
2b1ec                 | LR__4105
2b1ec     97 0C 48 FB | 	callpa	#(@LR__4107-@LR__4106)>>2,fcache_load_ptr_
2b1f0                 | LR__4106
2b1f0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2b1f4     10 00 90 ED |  if_be	jmp	#LR__4108
2b1f8     07 07 C2 FA | 	rdbyte	_var04, _var08
2b1fc     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b200     01 0E 86 51 |  if_ne	sub	_var08, #1
2b204     E8 FF 9F 5D |  if_ne	jmp	#LR__4106
2b208                 | LR__4107
2b208                 | LR__4108
2b208     07 05 02 F6 | 	mov	_var03, _var08
2b20c                 | LR__4109
2b20c     01 00 06 F6 | 	mov	_var01, #1
2b210     44 00 90 FD | 	jmp	#LR__4116
2b214                 | LR__4110
2b214                 | LR__4111
2b214                 | LR__4112
2b214     97 18 48 FB | 	callpa	#(@LR__4114-@LR__4113)>>2,fcache_load_ptr_
2b218                 | LR__4113
2b218     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2b21c     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2b220     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2b224     20 00 90 AD |  if_e	jmp	#LR__4115
2b228     01 0B 02 F6 | 	mov	_var06, _var02
2b22c     01 09 02 F6 | 	mov	_var05, _var02
2b230     01 08 06 F1 | 	add	_var05, #1
2b234     05 11 C2 FA | 	rdbyte	_var09, _var06
2b238     04 03 02 F6 | 	mov	_var02, _var05
2b23c     02 11 42 FC | 	wrbyte	_var09, _var03
2b240     01 04 06 F1 | 	add	_var03, #1
2b244     D0 FF 9F FD | 	jmp	#LR__4113
2b248                 | LR__4114
2b248                 | LR__4115
2b248     01 07 C2 FA | 	rdbyte	_var04, _var02
2b24c     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b250     C0 FE 9F 5D |  if_ne	jmp	#LR__4100
2b254     01 00 06 F6 | 	mov	_var01, #1
2b258                 | LR__4116
2b258     97 0C 48 FB | 	callpa	#(@LR__4118-@LR__4117)>>2,fcache_load_ptr_
2b25c                 | LR__4117
2b25c     01 07 C2 FA | 	rdbyte	_var04, _var02
2b260     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b264     01 0D 02 A6 |  if_e	mov	_var07, _var02
2b268     01 0C 06 A1 |  if_e	add	_var07, #1
2b26c     06 03 02 A6 |  if_e	mov	_var02, _var07
2b270     E8 FF 9F AD |  if_e	jmp	#LR__4117
2b274                 | LR__4118
2b274     9C FE 9F FD | 	jmp	#LR__4100
2b278                 | LR__4119
2b278     02 01 48 FC | 	wrbyte	#0, _var03
2b27c                 | __system___normalizeName_ret
2b27c     2D 00 64 FD | 	ret
2b280                 | 
2b280                 | __system___strrev
2b280     09 01 CA FA | 	rdbyte	_var01, arg01 wz
2b284     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
2b288     09 03 02 F6 | 	mov	_var02, arg01
2b28c     97 1A 48 FB | 	callpa	#(@LR__4122-@LR__4120)>>2,fcache_load_ptr_
2b290                 | LR__4120
2b290     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2b294     01 02 06 51 |  if_ne	add	_var02, #1
2b298     F4 FF 9F 5D |  if_ne	jmp	#LR__4120
2b29c     01 02 86 F1 | 	sub	_var02, #1
2b2a0                 | LR__4121
2b2a0     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2b2a4     1C 00 90 ED |  if_be	jmp	#LR__4123
2b2a8     09 01 C2 FA | 	rdbyte	_var01, arg01
2b2ac     01 05 C2 FA | 	rdbyte	_var03, _var02
2b2b0     09 05 42 FC | 	wrbyte	_var03, arg01
2b2b4     01 01 42 FC | 	wrbyte	_var01, _var02
2b2b8     01 12 06 F1 | 	add	arg01, #1
2b2bc     01 02 86 F1 | 	sub	_var02, #1
2b2c0     DC FF 9F FD | 	jmp	#LR__4121
2b2c4                 | LR__4122
2b2c4                 | LR__4123
2b2c4                 | __system___strrev_ret
2b2c4     2D 00 64 FD | 	ret
2b2c8                 | 
2b2c8                 | __system___fmtpad
2b2c8     06 4A 05 F6 | 	mov	COUNT_, #6
2b2cc     A8 00 A0 FD | 	call	#pushregs_
2b2d0     09 27 02 F6 | 	mov	local01, arg01
2b2d4     0A 29 02 F6 | 	mov	local02, arg02
2b2d8     0B 2B 02 F6 | 	mov	local03, arg03
2b2dc     14 13 EA F8 | 	getbyte	arg01, local02, #1
2b2e0     16 28 46 F0 | 	shr	local02, #22
2b2e4     03 28 0E F5 | 	and	local02, #3 wz
2b2e8     00 2C 06 F6 | 	mov	local04, #0
2b2ec     01 28 06 A6 |  if_e	mov	local02, #1
2b2f0     0C 29 CA F7 | 	test	local02, arg04 wz
2b2f4     00 FA 05 A6 |  if_e	mov	result1, #0
2b2f8     88 00 90 AD |  if_e	jmp	#LR__4133
2b2fc     09 2B C2 F2 | 	subr	local03, arg01
2b300     01 2A 56 F2 | 	cmps	local03, #1 wc
2b304     00 FA 05 C6 |  if_b	mov	result1, #0
2b308     78 00 90 CD |  if_b	jmp	#LR__4133
2b30c     03 28 0E F2 | 	cmp	local02, #3 wz
2b310     18 00 90 5D |  if_ne	jmp	#LR__4130
2b314     01 18 0E F2 | 	cmp	arg04, #1 wz
2b318     6E 28 62 FD | 	wrz	local02
2b31c     14 2B 02 F1 | 	add	local03, local02
2b320     15 2B 52 F6 | 	abs	local03, local03 wc
2b324     01 2A 46 F0 | 	shr	local03, #1
2b328     15 2B 82 F6 | 	negc	local03, local03
2b32c                 | LR__4130
2b32c     01 2A 56 F2 | 	cmps	local03, #1 wc
2b330     4C 00 90 CD |  if_b	jmp	#LR__4132
2b334     15 2F 02 F6 | 	mov	local05, local03
2b338                 | LR__4131
2b338     13 29 02 F6 | 	mov	local02, local01
2b33c     13 31 02 F6 | 	mov	local06, local01
2b340     13 28 46 F7 | 	zerox	local02, #19
2b344     14 30 46 F0 | 	shr	local06, #20
2b348     02 30 66 F0 | 	shl	local06, #2
2b34c     ED 30 02 F1 | 	add	local06, __methods__
2b350     18 31 02 FB | 	rdlong	local06, local06
2b354     20 12 06 F6 | 	mov	arg01, #32
2b358     F2 2A 02 F6 | 	mov	local03, objptr
2b35c     14 E5 01 F6 | 	mov	objptr, local02
2b360     2D 30 62 FD | 	call	local06
2b364     15 E5 01 F6 | 	mov	objptr, local03
2b368     FD 30 02 F6 | 	mov	local06, result1
2b36c     00 30 56 F2 | 	cmps	local06, #0 wc
2b370     18 FB 01 C6 |  if_b	mov	result1, local06
2b374     0C 00 90 CD |  if_b	jmp	#LR__4133
2b378     18 2D 02 F1 | 	add	local04, local06
2b37c     EE 2F 6E FB | 	djnz	local05, #LR__4131
2b380                 | LR__4132
2b380     16 FB 01 F6 | 	mov	result1, local04
2b384                 | LR__4133
2b384     A7 F0 03 F6 | 	mov	ptra, fp
2b388     B2 00 A0 FD | 	call	#popregs_
2b38c                 | __system___fmtpad_ret
2b38c     2D 00 64 FD | 	ret
2b390                 | 
2b390                 | __system___uitoa
2b390     04 4A 05 F6 | 	mov	COUNT_, #4
2b394     A8 00 A0 FD | 	call	#pushregs_
2b398     09 27 02 F6 | 	mov	local01, arg01
2b39c     00 1A 4E F2 | 	cmps	arg05, #0 wz
2b3a0     13 1B 02 F6 | 	mov	arg05, local01
2b3a4     00 28 06 F6 | 	mov	local02, #0
2b3a8     37 2A 06 56 |  if_ne	mov	local03, #55
2b3ac     57 2A 06 A6 |  if_e	mov	local03, #87
2b3b0                 | LR__4140
2b3b0     0B 15 12 FD | 	qdiv	arg02, arg03
2b3b4     19 2C 62 FD | 	getqy	local04
2b3b8     0B 15 12 FD | 	qdiv	arg02, arg03
2b3bc     0A 2C 16 F2 | 	cmp	local04, #10 wc
2b3c0     30 2C 06 C1 |  if_b	add	local04, #48
2b3c4     15 2D 02 31 |  if_ae	add	local04, local03
2b3c8     0D 2D 42 FC | 	wrbyte	local04, arg05
2b3cc     01 1A 06 F1 | 	add	arg05, #1
2b3d0     01 28 06 F1 | 	add	local02, #1
2b3d4     18 14 62 FD | 	getqx	arg02
2b3d8     00 14 0E F2 | 	cmp	arg02, #0 wz
2b3dc     D0 FF 9F 5D |  if_ne	jmp	#LR__4140
2b3e0     0C 29 12 F2 | 	cmp	local02, arg04 wc
2b3e4     C8 FF 9F CD |  if_b	jmp	#LR__4140
2b3e8     0D 01 48 FC | 	wrbyte	#0, arg05
2b3ec     13 13 02 F6 | 	mov	arg01, local01
2b3f0     8C FE BF FD | 	call	#__system___strrev
2b3f4     14 FB 01 F6 | 	mov	result1, local02
2b3f8     A7 F0 03 F6 | 	mov	ptra, fp
2b3fc     B2 00 A0 FD | 	call	#popregs_
2b400                 | __system___uitoa_ret
2b400     2D 00 64 FD | 	ret
2b404                 | 
2b404                 | __system__disassemble_0557
2b404     10 4A 05 F6 | 	mov	COUNT_, #16
2b408     A8 00 A0 FD | 	call	#pushregs_
2b40c     09 27 02 F6 | 	mov	local01, arg01
2b410     0A 29 02 F6 | 	mov	local02, arg02
2b414     0B 2B 02 F6 | 	mov	local03, arg03
2b418     0C 2D 02 F6 | 	mov	local04, arg04
2b41c     0D 2F 02 F6 | 	mov	local05, arg05
2b420     17 13 52 F6 | 	abs	arg01, local05 wc
2b424     1F 30 C6 C9 |  if_b	decod	local06, #31
2b428     00 30 06 36 |  if_ae	mov	local06, #0
2b42c     CC CF BF FD | 	call	#__system___float_fromuns
2b430     18 FB 61 F5 | 	xor	result1, local06
2b434     FD 32 02 F6 | 	mov	local07, result1
2b438     00 34 06 F6 | 	mov	local08, #0
2b43c     13 13 02 F6 | 	mov	arg01, local01
2b440     00 14 06 F6 | 	mov	arg02, #0
2b444     01 16 06 F6 | 	mov	arg03, #1
2b448     E8 D7 BF FD | 	call	#__system___float_cmp
2b44c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b450     00 36 06 A6 |  if_e	mov	local09, #0
2b454     14 01 68 AC |  if_e	wrlong	#0, local02
2b458     15 37 62 AC |  if_e	wrlong	local09, local03
2b45c     8C 01 90 AD |  if_e	jmp	#LR__4162
2b460     13 13 02 F6 | 	mov	arg01, local01
2b464     BC DC BF FD | 	call	#__system____builtin_ilogb
2b468     FD 38 02 F6 | 	mov	local10, result1
2b46c     0A 2E 0E F2 | 	cmp	local05, #10 wz
2b470     24 00 90 5D |  if_ne	jmp	#LR__4150
2b474     1C 37 02 F6 | 	mov	local09, local10
2b478     01 36 66 F0 | 	shl	local09, #1
2b47c     1C 37 02 F1 | 	add	local09, local10
2b480     1B 39 52 F6 | 	abs	local10, local09 wc
2b484     0A 38 16 FD | 	qdiv	local10, #10
2b488     09 3A 06 F6 | 	mov	local11, #9
2b48c     18 38 62 FD | 	getqx	local10
2b490     1C 39 82 F6 | 	negc	local10, local10
2b494     04 00 90 FD | 	jmp	#LR__4151
2b498                 | LR__4150
2b498     18 3A 06 F6 | 	mov	local11, #24
2b49c                 | LR__4151
2b49c                 | LR__4152
2b49c     08 34 56 F2 | 	cmps	local08, #8 wc
2b4a0     01 34 06 F1 | 	add	local08, #1
2b4a4     60 00 90 3D |  if_ae	jmp	#LR__4153
2b4a8     00 C0 1F FF 
2b4ac     00 12 06 F6 | 	mov	arg01, ##1065353216
2b4b0     19 15 02 F6 | 	mov	arg02, local07
2b4b4     1C 17 02 F6 | 	mov	arg03, local10
2b4b8     4C E3 BF FD | 	call	#__system___float_pow_n
2b4bc     FD 14 02 F6 | 	mov	arg02, result1
2b4c0     13 13 02 F6 | 	mov	arg01, local01
2b4c4     3C D5 BF FD | 	call	#__system___float_div
2b4c8     FD 3C 02 F6 | 	mov	local12, result1
2b4cc     1E 13 02 F6 | 	mov	arg01, local12
2b4d0     00 C0 1F FF 
2b4d4     00 14 06 F6 | 	mov	arg02, ##1065353216
2b4d8     01 16 06 F6 | 	mov	arg03, #1
2b4dc     54 D7 BF FD | 	call	#__system___float_cmp
2b4e0     00 FA 55 F2 | 	cmps	result1, #0 wc
2b4e4     01 38 86 C1 |  if_b	sub	local10, #1
2b4e8     B0 FF 9F CD |  if_b	jmp	#LR__4152
2b4ec     19 15 02 F6 | 	mov	arg02, local07
2b4f0     1E 13 02 F6 | 	mov	arg01, local12
2b4f4     01 16 66 F6 | 	neg	arg03, #1
2b4f8     38 D7 BF FD | 	call	#__system___float_cmp
2b4fc     00 FA 55 F2 | 	cmps	result1, #0 wc
2b500     01 38 06 31 |  if_ae	add	local10, #1
2b504     94 FF 9F 3D |  if_ae	jmp	#LR__4152
2b508                 | LR__4153
2b508     1E 13 02 F6 | 	mov	arg01, local12
2b50c     14 DC BF FD | 	call	#__system____builtin_ilogb
2b510     FD 3E 02 F6 | 	mov	local13, result1
2b514     1E 41 02 F6 | 	mov	local14, local12
2b518     17 41 06 F4 | 	bitl	local14, #279
2b51c     17 40 26 F4 | 	bith	local14, #23
2b520     1F 41 62 F0 | 	shl	local14, local13
2b524     02 2E 0E F2 | 	cmp	local05, #2 wz
2b528     02 2C 66 A0 |  if_e	shl	local04, #2
2b52c     00 42 06 F6 | 	mov	local15, #0
2b530     00 2C 56 F2 | 	cmps	local04, #0 wc
2b534     10 00 90 3D |  if_ae	jmp	#LR__4154
2b538     1C 2D C2 F2 | 	subr	local04, local10
2b53c     00 2C 56 F2 | 	cmps	local04, #0 wc
2b540     A0 00 90 CD |  if_b	jmp	#LR__4161
2b544     04 00 90 FD | 	jmp	#LR__4155
2b548                 | LR__4154
2b548     01 2C 06 F1 | 	add	local04, #1
2b54c                 | LR__4155
2b54c     1D 2D 7A F3 | 	fles	local04, local11 wcz
2b550     01 44 06 F6 | 	mov	local16, #1
2b554     97 22 48 FB | 	callpa	#(@LR__4157-@LR__4156)>>2,fcache_load_ptr_
2b558                 | LR__4156
2b558     00 40 00 FF 
2b55c     00 42 16 F2 | 	cmp	local15, ##8388608 wc
2b560     38 00 90 3D |  if_ae	jmp	#LR__4158
2b564     01 2C 56 F2 | 	cmps	local04, #1 wc
2b568     01 2C 86 F1 | 	sub	local04, #1
2b56c     2C 00 90 CD |  if_b	jmp	#LR__4158
2b570     17 43 02 FD | 	qmul	local15, local05
2b574     20 3F 02 F6 | 	mov	local13, local14
2b578     17 3E 46 F0 | 	shr	local13, #23
2b57c     17 41 06 F4 | 	bitl	local14, #279
2b580     18 42 62 FD | 	getqx	local15
2b584     17 45 02 FD | 	qmul	local16, local05
2b588     18 44 62 FD | 	getqx	local16
2b58c     17 41 02 FD | 	qmul	local14, local05
2b590     1F 43 02 F1 | 	add	local15, local13
2b594     18 40 62 FD | 	getqx	local14
2b598     BC FF 9F FD | 	jmp	#LR__4156
2b59c                 | LR__4157
2b59c                 | LR__4158
2b59c     17 37 02 F6 | 	mov	local09, local05
2b5a0     17 36 66 F0 | 	shl	local09, #23
2b5a4     1B 3F 52 F6 | 	abs	local13, local09 wc
2b5a8     01 3E 46 F0 | 	shr	local13, #1
2b5ac     1F 3F 82 F6 | 	negc	local13, local13
2b5b0     1F 41 1A F2 | 	cmp	local14, local13 wcz
2b5b4     20 00 90 1D |  if_a	jmp	#LR__4159
2b5b8     17 2E 66 F0 | 	shl	local05, #23
2b5bc     17 3F 52 F6 | 	abs	local13, local05 wc
2b5c0     01 3E 46 F0 | 	shr	local13, #1
2b5c4     1F 3F 82 F6 | 	negc	local13, local13
2b5c8     1F 41 0A F2 | 	cmp	local14, local13 wz
2b5cc     14 00 90 5D |  if_ne	jmp	#LR__4160
2b5d0     01 42 CE F7 | 	test	local15, #1 wz
2b5d4     0C 00 90 AD |  if_e	jmp	#LR__4160
2b5d8                 | LR__4159
2b5d8     01 42 06 F1 | 	add	local15, #1
2b5dc     22 43 0A F2 | 	cmp	local15, local16 wz
2b5e0     01 38 06 A1 |  if_e	add	local10, #1
2b5e4                 | LR__4160
2b5e4                 | LR__4161
2b5e4     14 43 62 FC | 	wrlong	local15, local02
2b5e8     15 39 62 FC | 	wrlong	local10, local03
2b5ec                 | LR__4162
2b5ec     A7 F0 03 F6 | 	mov	ptra, fp
2b5f0     B2 00 A0 FD | 	call	#popregs_
2b5f4                 | __system__disassemble_0557_ret
2b5f4     2D 00 64 FD | 	ret
2b5f8                 | 
2b5f8                 | __system__emitsign_0559
2b5f8     00 FA 05 F6 | 	mov	result1, #0
2b5fc     00 14 0E F2 | 	cmp	arg02, #0 wz
2b600     09 01 02 56 |  if_ne	mov	_var01, arg01
2b604     01 12 06 51 |  if_ne	add	arg01, #1
2b608     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2b60c     01 FA 05 56 |  if_ne	mov	result1, #1
2b610     00 16 0E F2 | 	cmp	arg03, #0 wz
2b614     09 61 48 5C |  if_ne	wrbyte	#48, arg01
2b618     01 12 06 51 |  if_ne	add	arg01, #1
2b61c     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2b620     02 FA 05 51 |  if_ne	add	result1, #2
2b624                 | __system__emitsign_0559_ret
2b624     2D 00 64 FD | 	ret
2b628                 | 
2b628                 | __system___gettxfunc
2b628     01 4A 05 F6 | 	mov	COUNT_, #1
2b62c     A8 00 A0 FD | 	call	#pushregs_
2b630     A0 F8 BF FD | 	call	#__system____getftab
2b634     FD 26 0A F6 | 	mov	local01, result1 wz
2b638     10 00 90 AD |  if_e	jmp	#LR__4170
2b63c     08 26 06 F1 | 	add	local01, #8
2b640     13 15 0A FB | 	rdlong	arg02, local01 wz
2b644     08 26 86 F1 | 	sub	local01, #8
2b648     08 00 90 5D |  if_ne	jmp	#LR__4171
2b64c                 | LR__4170
2b64c     00 FA 05 F6 | 	mov	result1, #0
2b650     0C 00 90 FD | 	jmp	#LR__4172
2b654                 | LR__4171
2b654     00 00 05 FF 
2b658     00 26 46 F5 | 	or	local01, ##167772160
2b65c     13 FB 01 F6 | 	mov	result1, local01
2b660                 | LR__4172
2b660     A7 F0 03 F6 | 	mov	ptra, fp
2b664     B2 00 A0 FD | 	call	#popregs_
2b668                 | __system___gettxfunc_ret
2b668     2D 00 64 FD | 	ret
2b66c                 | 
2b66c                 | __system___getrxfunc
2b66c     01 4A 05 F6 | 	mov	COUNT_, #1
2b670     A8 00 A0 FD | 	call	#pushregs_
2b674     5C F8 BF FD | 	call	#__system____getftab
2b678     FD 26 0A F6 | 	mov	local01, result1 wz
2b67c     10 00 90 AD |  if_e	jmp	#LR__4180
2b680     08 26 06 F1 | 	add	local01, #8
2b684     13 15 0A FB | 	rdlong	arg02, local01 wz
2b688     08 26 86 F1 | 	sub	local01, #8
2b68c     08 00 90 5D |  if_ne	jmp	#LR__4181
2b690                 | LR__4180
2b690     00 FA 05 F6 | 	mov	result1, #0
2b694     0C 00 90 FD | 	jmp	#LR__4182
2b698                 | LR__4181
2b698     00 08 05 FF 
2b69c     00 26 46 F5 | 	or	local01, ##168820736
2b6a0     13 FB 01 F6 | 	mov	result1, local01
2b6a4                 | LR__4182
2b6a4     A7 F0 03 F6 | 	mov	ptra, fp
2b6a8     B2 00 A0 FD | 	call	#popregs_
2b6ac                 | __system___getrxfunc_ret
2b6ac     2D 00 64 FD | 	ret
2b6b0                 | 
2b6b0                 | __system___getiolock_0599
2b6b0     01 4A 05 F6 | 	mov	COUNT_, #1
2b6b4     A8 00 A0 FD | 	call	#pushregs_
2b6b8     18 F8 BF FD | 	call	#__system____getftab
2b6bc     FD 26 0A F6 | 	mov	local01, result1 wz
2b6c0     10 00 90 AD |  if_e	jmp	#LR__4190
2b6c4     08 26 06 F1 | 	add	local01, #8
2b6c8     13 FB 09 FB | 	rdlong	result1, local01 wz
2b6cc     08 26 86 F1 | 	sub	local01, #8
2b6d0     18 00 90 5D |  if_ne	jmp	#LR__4191
2b6d4                 | LR__4190
2b6d4     01 00 00 FF 
2b6d8     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2b6dc     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2b6e0     01 00 00 FF 
2b6e4     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
2b6e8     08 00 90 FD | 	jmp	#LR__4192
2b6ec                 | LR__4191
2b6ec     0C 26 06 F1 | 	add	local01, #12
2b6f0     13 FB 01 F6 | 	mov	result1, local01
2b6f4                 | LR__4192
2b6f4     A7 F0 03 F6 | 	mov	ptra, fp
2b6f8     B2 00 A0 FD | 	call	#popregs_
2b6fc                 | __system___getiolock_0599_ret
2b6fc     2D 00 64 FD | 	ret
2b700                 | 
2b700                 | __system____ScanForChar
2b700     09 01 02 F6 | 	mov	_var01, arg01
2b704     09 03 02 F6 | 	mov	_var02, arg01
2b708     97 06 48 FB | 	callpa	#(@LR__4201-@LR__4200)>>2,fcache_load_ptr_
2b70c                 | LR__4200
2b70c     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2b710     01 02 06 51 |  if_ne	add	_var02, #1
2b714     F4 FF 9F 5D |  if_ne	jmp	#LR__4200
2b718                 | LR__4201
2b718     09 03 82 F1 | 	sub	_var02, arg01
2b71c     01 FB 01 F6 | 	mov	result1, _var02
2b720     FD 12 0A F6 | 	mov	arg01, result1 wz
2b724     00 FA 05 A6 |  if_e	mov	result1, #0
2b728     B8 00 90 AD |  if_e	jmp	#LR__4208
2b72c     0A 05 02 F6 | 	mov	_var03, arg02
2b730     07 04 4E F7 | 	zerox	_var03, #7 wz
2b734     00 FA 05 A6 |  if_e	mov	result1, #0
2b738     A8 00 90 AD |  if_e	jmp	#LR__4208
2b73c     01 16 16 F2 | 	cmp	arg03, #1 wc
2b740     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2b744     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2b748     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2b74c     94 00 90 4D |  if_c_and_nz	jmp	#LR__4208
2b750     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2b754     10 00 90 ED |  if_be	jmp	#LR__4202
2b758     00 18 0E F2 | 	cmp	arg04, #0 wz
2b75c     00 FA 05 A6 |  if_e	mov	result1, #0
2b760     80 00 90 AD |  if_e	jmp	#LR__4208
2b764     09 17 02 F6 | 	mov	arg03, arg01
2b768                 | LR__4202
2b768     01 16 86 F1 | 	sub	arg03, #1
2b76c     00 18 0E F2 | 	cmp	arg04, #0 wz
2b770     38 00 90 5D |  if_ne	jmp	#LR__4204
2b774     0B 07 02 F6 | 	mov	_var04, arg03
2b778     09 09 02 F6 | 	mov	_var05, arg01
2b77c                 | LR__4203
2b77c     04 07 12 F2 | 	cmp	_var04, _var05 wc
2b780     5C 00 90 3D |  if_ae	jmp	#LR__4207
2b784     03 05 02 F6 | 	mov	_var03, _var04
2b788     00 05 02 F1 | 	add	_var03, _var01
2b78c     02 05 C2 FA | 	rdbyte	_var03, _var03
2b790     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2b794     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2b798     01 06 06 A1 |  if_e	add	_var04, #1
2b79c     03 FB 01 A6 |  if_e	mov	result1, _var04
2b7a0     40 00 90 AD |  if_e	jmp	#LR__4208
2b7a4     01 06 06 F1 | 	add	_var04, #1
2b7a8     D0 FF 9F FD | 	jmp	#LR__4203
2b7ac                 | LR__4204
2b7ac     0B 07 02 F6 | 	mov	_var04, arg03
2b7b0                 | LR__4205
2b7b0     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2b7b4     28 00 90 1D |  if_a	jmp	#LR__4206
2b7b8     03 09 02 F6 | 	mov	_var05, _var04
2b7bc     00 09 02 F1 | 	add	_var05, _var01
2b7c0     04 05 C2 FA | 	rdbyte	_var03, _var05
2b7c4     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2b7c8     04 05 0A F2 | 	cmp	_var03, _var05 wz
2b7cc     01 06 06 A1 |  if_e	add	_var04, #1
2b7d0     03 FB 01 A6 |  if_e	mov	result1, _var04
2b7d4     0C 00 90 AD |  if_e	jmp	#LR__4208
2b7d8     01 06 86 F1 | 	sub	_var04, #1
2b7dc     D0 FF 9F FD | 	jmp	#LR__4205
2b7e0                 | LR__4206
2b7e0                 | LR__4207
2b7e0     00 FA 05 F6 | 	mov	result1, #0
2b7e4                 | LR__4208
2b7e4                 | __system____ScanForChar_ret
2b7e4     2D 00 64 FD | 	ret
2b7e8                 | 
2b7e8                 | __system___basic_dir
2b7e8     05 4A 05 F6 | 	mov	COUNT_, #5
2b7ec     A8 00 A0 FD | 	call	#pushregs_
2b7f0     4C F0 07 F1 | 	add	ptra, #76
2b7f4     04 4E 05 F1 | 	add	fp, #4
2b7f8     A7 12 62 FC | 	wrlong	arg01, fp
2b7fc     04 4E 05 F1 | 	add	fp, #4
2b800     A7 14 62 FC | 	wrlong	arg02, fp
2b804     04 4E 85 F1 | 	sub	fp, #4
2b808     A7 14 0A FB | 	rdlong	arg02, fp wz
2b80c     04 4E 85 F1 | 	sub	fp, #4
2b810     04 4E 05 51 |  if_ne	add	fp, #4
2b814     A7 26 02 5B |  if_ne	rdlong	local01, fp
2b818     04 4E 85 51 |  if_ne	sub	fp, #4
2b81c     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
2b820     70 00 90 AD |  if_e	jmp	#LR__4210
2b824     03 00 00 FF 
2b828     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2b82c     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2b830     03 00 00 FF 
2b834     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2b838     03 00 00 5F 
2b83c     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
2b840     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2b844     03 00 00 5F 
2b848     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2b84c     D8 E9 BF 5D |  if_ne	call	#__system__closedir
2b850     AA 01 00 FF 
2b854     00 13 06 F6 | 	mov	arg01, ##@LR__5378
2b858     E0 E8 BF FD | 	call	#__system__opendir
2b85c     03 00 00 FF 
2b860     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2b864     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2b868     08 4E 05 F1 | 	add	fp, #8
2b86c     A7 28 02 FB | 	rdlong	local02, fp
2b870     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2b874     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2b878     04 4E 85 F1 | 	sub	fp, #4
2b87c     A7 28 02 FB | 	rdlong	local02, fp
2b880     04 4E 85 F1 | 	sub	fp, #4
2b884     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2b888     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2b88c     03 00 00 FF 
2b890     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2b894                 | LR__4210
2b894     03 00 00 FF 
2b898     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2b89c     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2b8a0     03 00 00 FF 
2b8a4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2b8a8     AA 01 00 AF 
2b8ac     02 FB 05 A6 |  if_e	mov	result1, ##@LR__5379
2b8b0     84 02 90 AD |  if_e	jmp	#LR__4223
2b8b4                 | LR__4211
2b8b4     03 00 00 FF 
2b8b8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2b8bc     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2b8c0     03 00 00 FF 
2b8c4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2b8c8     D0 E9 BF FD | 	call	#__system__readdir
2b8cc     0C 4E 05 F1 | 	add	fp, #12
2b8d0     A7 FA 61 FC | 	wrlong	result1, fp
2b8d4     0C 4E 85 F1 | 	sub	fp, #12
2b8d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b8dc     38 00 90 5D |  if_ne	jmp	#LR__4212
2b8e0     03 00 00 FF 
2b8e4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2b8e8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2b8ec     03 00 00 FF 
2b8f0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2b8f4     30 E9 BF FD | 	call	#__system__closedir
2b8f8     03 00 00 FF 
2b8fc     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2b900     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2b904     03 00 00 FF 
2b908     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2b90c     AA 01 00 FF 
2b910     04 FB 05 F6 | 	mov	result1, ##@LR__5380
2b914     20 02 90 FD | 	jmp	#LR__4223
2b918                 | LR__4212
2b918     0C 4E 05 F1 | 	add	fp, #12
2b91c     A7 12 02 FB | 	rdlong	arg01, fp
2b920     0C 4E 85 F1 | 	sub	fp, #12
2b924     03 00 00 FF 
2b928     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2b92c     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2b930     03 00 00 FF 
2b934     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2b938     10 09 B0 FD | 	call	#__system___pat_match
2b93c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b940     70 FF 9F AD |  if_e	jmp	#LR__4211
2b944     03 00 00 FF 
2b948     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2b94c     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2b950     03 00 00 FF 
2b954     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2b958     78 01 90 AD |  if_e	jmp	#LR__4219
2b95c     0C 4E 05 F1 | 	add	fp, #12
2b960     A7 12 02 FB | 	rdlong	arg01, fp
2b964     04 4E 05 F1 | 	add	fp, #4
2b968     A7 14 02 F6 | 	mov	arg02, fp
2b96c     10 4E 85 F1 | 	sub	fp, #16
2b970     2C F2 BF FD | 	call	#__system__stat
2b974     40 4E 05 F1 | 	add	fp, #64
2b978     A7 FA 61 FC | 	wrlong	result1, fp
2b97c     40 4E 85 F1 | 	sub	fp, #64
2b980     00 FA 0D F2 | 	cmp	result1, #0 wz
2b984     AA 01 00 5F 
2b988     06 FB 05 56 |  if_ne	mov	result1, ##@LR__5381
2b98c     A8 01 90 5D |  if_ne	jmp	#LR__4223
2b990     18 4E 05 F1 | 	add	fp, #24
2b994     A7 28 02 FB | 	rdlong	local02, fp
2b998     78 00 00 FF 
2b99c     00 28 06 F5 | 	and	local02, ##61440
2b9a0     2C 4E 05 F1 | 	add	fp, #44
2b9a4     A7 28 62 FC | 	wrlong	local02, fp
2b9a8     38 4E 85 F1 | 	sub	fp, #56
2b9ac     A7 28 02 FB | 	rdlong	local02, fp
2b9b0     0C 4E 85 F1 | 	sub	fp, #12
2b9b4     14 29 C2 FA | 	rdbyte	local02, local02
2b9b8     2E 28 0E F2 | 	cmp	local02, #46 wz
2b9bc     08 4E 05 A1 |  if_e	add	fp, #8
2b9c0     A7 04 68 AC |  if_e	wrlong	#2, fp
2b9c4     08 4E C5 F3 | 	sumz	fp, #8
2b9c8     A7 00 68 5C |  if_ne	wrlong	#0, fp
2b9cc     08 4E 85 51 |  if_ne	sub	fp, #8
2b9d0     44 4E 05 F1 | 	add	fp, #68
2b9d4     A7 28 02 FB | 	rdlong	local02, fp
2b9d8     44 4E 85 F1 | 	sub	fp, #68
2b9dc     08 00 00 FF 
2b9e0     00 28 0E F2 | 	cmp	local02, ##4096 wz
2b9e4     18 00 90 5D |  if_ne	jmp	#LR__4213
2b9e8     08 4E 05 F1 | 	add	fp, #8
2b9ec     A7 28 02 FB | 	rdlong	local02, fp
2b9f0     10 28 46 F5 | 	or	local02, #16
2b9f4     A7 28 62 FC | 	wrlong	local02, fp
2b9f8     08 4E 85 F1 | 	sub	fp, #8
2b9fc     AC 00 90 FD | 	jmp	#LR__4218
2ba00                 | LR__4213
2ba00     44 4E 05 F1 | 	add	fp, #68
2ba04     A7 28 02 FB | 	rdlong	local02, fp
2ba08     44 4E 85 F1 | 	sub	fp, #68
2ba0c     10 00 00 FF 
2ba10     00 28 0E F2 | 	cmp	local02, ##8192 wz
2ba14     44 4E 05 51 |  if_ne	add	fp, #68
2ba18     A7 26 02 5B |  if_ne	rdlong	local01, fp
2ba1c     44 4E 85 51 |  if_ne	sub	fp, #68
2ba20     18 00 00 5F 
2ba24     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
2ba28     44 4E 05 51 |  if_ne	add	fp, #68
2ba2c     13 2B 02 56 |  if_ne	mov	local03, local01
2ba30     44 4E 85 51 |  if_ne	sub	fp, #68
2ba34     20 00 00 5F 
2ba38     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
2ba3c     18 00 90 5D |  if_ne	jmp	#LR__4214
2ba40     08 4E 05 F1 | 	add	fp, #8
2ba44     A7 28 02 FB | 	rdlong	local02, fp
2ba48     04 28 46 F5 | 	or	local02, #4
2ba4c     A7 28 62 FC | 	wrlong	local02, fp
2ba50     08 4E 85 F1 | 	sub	fp, #8
2ba54     54 00 90 FD | 	jmp	#LR__4217
2ba58                 | LR__4214
2ba58     18 4E 05 F1 | 	add	fp, #24
2ba5c     A7 28 02 FB | 	rdlong	local02, fp
2ba60     18 4E 85 F1 | 	sub	fp, #24
2ba64     92 28 CE F7 | 	test	local02, #146 wz
2ba68     18 00 90 5D |  if_ne	jmp	#LR__4215
2ba6c     08 4E 05 F1 | 	add	fp, #8
2ba70     A7 28 02 FB | 	rdlong	local02, fp
2ba74     01 28 46 F5 | 	or	local02, #1
2ba78     A7 28 62 FC | 	wrlong	local02, fp
2ba7c     08 4E 85 F1 | 	sub	fp, #8
2ba80     28 00 90 FD | 	jmp	#LR__4216
2ba84                 | LR__4215
2ba84     44 4E 05 F1 | 	add	fp, #68
2ba88     A7 2C 02 FB | 	rdlong	local04, fp
2ba8c     44 4E 85 F1 | 	sub	fp, #68
2ba90     08 00 00 FF 
2ba94     00 2C 0E F2 | 	cmp	local04, ##4096 wz
2ba98     08 4E 05 51 |  if_ne	add	fp, #8
2ba9c     A7 2C 02 5B |  if_ne	rdlong	local04, fp
2baa0     20 2C 46 55 |  if_ne	or	local04, #32
2baa4     A7 2C 62 5C |  if_ne	wrlong	local04, fp
2baa8     08 4E 85 51 |  if_ne	sub	fp, #8
2baac                 | LR__4216
2baac                 | LR__4217
2baac                 | LR__4218
2baac     08 4E 05 F1 | 	add	fp, #8
2bab0     A7 2C 02 FB | 	rdlong	local04, fp
2bab4     08 4E 85 F1 | 	sub	fp, #8
2bab8     03 00 00 FF 
2babc     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2bac0     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2bac4     03 00 00 FF 
2bac8     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2bacc     13 2D CA F7 | 	test	local04, local01 wz
2bad0     E0 FD 9F AD |  if_e	jmp	#LR__4211
2bad4                 | LR__4219
2bad4     0C 4E 05 F1 | 	add	fp, #12
2bad8     A7 12 02 FB | 	rdlong	arg01, fp
2badc     0C 4E 85 F1 | 	sub	fp, #12
2bae0     09 2F 02 F6 | 	mov	local05, arg01
2bae4     97 06 48 FB | 	callpa	#(@LR__4221-@LR__4220)>>2,fcache_load_ptr_
2bae8                 | LR__4220
2bae8     17 FB C9 FA | 	rdbyte	result1, local05 wz
2baec     01 2E 06 51 |  if_ne	add	local05, #1
2baf0     F4 FF 9F 5D |  if_ne	jmp	#LR__4220
2baf4                 | LR__4221
2baf4     17 13 C2 F2 | 	subr	arg01, local05
2baf8     01 12 06 F1 | 	add	arg01, #1
2bafc     28 E0 BF FD | 	call	#__system___gc_alloc_managed
2bb00     48 4E 05 F1 | 	add	fp, #72
2bb04     A7 FA 61 FC | 	wrlong	result1, fp
2bb08     48 4E 85 F1 | 	sub	fp, #72
2bb0c     00 FA 0D F2 | 	cmp	result1, #0 wz
2bb10     18 00 90 AD |  if_e	jmp	#LR__4222
2bb14     48 4E 05 F1 | 	add	fp, #72
2bb18     A7 12 02 FB | 	rdlong	arg01, fp
2bb1c     3C 4E 85 F1 | 	sub	fp, #60
2bb20     A7 14 02 FB | 	rdlong	arg02, fp
2bb24     0C 4E 85 F1 | 	sub	fp, #12
2bb28     10 9E BF FD | 	call	#__system____builtin_strcpy
2bb2c                 | LR__4222
2bb2c     48 4E 05 F1 | 	add	fp, #72
2bb30     A7 FA 01 FB | 	rdlong	result1, fp
2bb34     48 4E 85 F1 | 	sub	fp, #72
2bb38                 | LR__4223
2bb38     A7 F0 03 F6 | 	mov	ptra, fp
2bb3c     B2 00 A0 FD | 	call	#popregs_
2bb40                 | __system___basic_dir_ret
2bb40     2D 00 64 FD | 	ret
2bb44                 | 
2bb44                 | __system__pack_0671
2bb44     09 01 02 F6 | 	mov	_var01, arg01
2bb48     7F 16 06 F1 | 	add	arg03, #127
2bb4c     04 18 CE F7 | 	test	arg04, #4 wz
2bb50     10 00 90 AD |  if_e	jmp	#LR__4230
2bb54     00 00 0E F2 | 	cmp	_var01, #0 wz
2bb58     16 00 C6 A9 |  if_e	decod	_var01, #22
2bb5c     F7 00 26 F4 | 	bith	_var01, #247
2bb60     B4 00 90 FD | 	jmp	#LR__4239
2bb64                 | LR__4230
2bb64     02 18 CE F7 | 	test	arg04, #2 wz
2bb68     00 C0 3F 5F 
2bb6c     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2bb70     00 14 06 56 |  if_ne	mov	arg02, #0
2bb74     A0 00 90 5D |  if_ne	jmp	#LR__4238
2bb78     08 18 CE F7 | 	test	arg04, #8 wz
2bb7c     00 00 06 56 |  if_ne	mov	_var01, #0
2bb80     94 00 90 5D |  if_ne	jmp	#LR__4237
2bb84     FF 16 56 F2 | 	cmps	arg03, #255 wc
2bb88     00 C0 3F 3F 
2bb8c     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2bb90     00 14 06 36 |  if_ae	mov	arg02, #0
2bb94     80 00 90 3D |  if_ae	jmp	#LR__4236
2bb98     01 16 56 F2 | 	cmps	arg03, #1 wc
2bb9c     6C 00 90 3D |  if_ae	jmp	#LR__4234
2bba0     01 14 46 F0 | 	shr	arg02, #1
2bba4     00 03 02 F6 | 	mov	_var02, _var01
2bba8     01 02 06 F5 | 	and	_var02, #1
2bbac     1F 02 66 F0 | 	shl	_var02, #31
2bbb0     01 15 42 F5 | 	or	arg02, _var02
2bbb4     01 00 46 F0 | 	shr	_var01, #1
2bbb8     97 1E 48 FB | 	callpa	#(@LR__4232-@LR__4231)>>2,fcache_load_ptr_
2bbbc                 | LR__4231
2bbbc     00 16 56 F2 | 	cmps	arg03, #0 wc
2bbc0     34 00 90 3D |  if_ae	jmp	#LR__4233
2bbc4     00 00 0E F2 | 	cmp	_var01, #0 wz
2bbc8     2C 00 90 AD |  if_e	jmp	#LR__4233
2bbcc     0A 13 02 F6 | 	mov	arg01, arg02
2bbd0     01 12 06 F5 | 	and	arg01, #1
2bbd4     01 16 06 F1 | 	add	arg03, #1
2bbd8     01 14 46 F0 | 	shr	arg02, #1
2bbdc     00 03 02 F6 | 	mov	_var02, _var01
2bbe0     01 02 06 F5 | 	and	_var02, #1
2bbe4     1F 02 66 F0 | 	shl	_var02, #31
2bbe8     01 15 42 F5 | 	or	arg02, _var02
2bbec     09 15 42 F5 | 	or	arg02, arg01
2bbf0     01 00 46 F0 | 	shr	_var01, #1
2bbf4     C4 FF 9F FD | 	jmp	#LR__4231
2bbf8                 | LR__4232
2bbf8                 | LR__4233
2bbf8     00 16 56 F2 | 	cmps	arg03, #0 wc
2bbfc     18 00 90 3D |  if_ae	jmp	#LR__4235
2bc00     00 14 0E F2 | 	cmp	arg02, #0 wz
2bc04     6F 14 62 FD | 	wrnz	arg02
2bc08     0C 00 90 FD | 	jmp	#LR__4235
2bc0c                 | LR__4234
2bc0c     17 01 06 F4 | 	bitl	_var01, #279
2bc10     17 16 66 F0 | 	shl	arg03, #23
2bc14     0B 01 42 F5 | 	or	_var01, arg03
2bc18                 | LR__4235
2bc18                 | LR__4236
2bc18                 | LR__4237
2bc18                 | LR__4238
2bc18                 | LR__4239
2bc18     01 00 CE F7 | 	test	_var01, #1 wz
2bc1c     01 14 46 55 |  if_ne	or	arg02, #1
2bc20     0A 17 02 F6 | 	mov	arg03, arg02
2bc24     00 02 06 F6 | 	mov	_var02, #0
2bc28     FF FF 3F FF 
2bc2c     FF 15 06 F1 | 	add	arg02, ##2147483647
2bc30     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2bc34     01 02 06 C6 |  if_b	mov	_var02, #1
2bc38     01 01 02 F1 | 	add	_var01, _var02
2bc3c     01 18 CE F7 | 	test	arg04, #1 wz
2bc40     1F 00 26 54 |  if_ne	bith	_var01, #31
2bc44     00 FB 01 F6 | 	mov	result1, _var01
2bc48                 | __system__pack_0671_ret
2bc48     2D 00 64 FD | 	ret
2bc4c                 | 
2bc4c                 | __system___rxtxioctl_0761
2bc4c     00 15 0E F2 | 	cmp	arg02, #256 wz
2bc50     0C 00 90 AD |  if_e	jmp	#LR__4240
2bc54     01 15 0E F2 | 	cmp	arg02, #257 wz
2bc58     1C 00 90 AD |  if_e	jmp	#LR__4241
2bc5c     30 00 90 FD | 	jmp	#LR__4242
2bc60                 | LR__4240
2bc60     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2bc64     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2bc68     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2bc6c     0B FB 61 FC | 	wrlong	result1, arg03
2bc70     00 FA 05 F6 | 	mov	result1, #0
2bc74     28 00 90 FD | 	jmp	#LR__4243
2bc78                 | LR__4241
2bc78     0B 13 02 FB | 	rdlong	arg01, arg03
2bc7c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2bc80     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2bc84     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2bc88     00 FA 05 F6 | 	mov	result1, #0
2bc8c     10 00 90 FD | 	jmp	#LR__4243
2bc90                 | LR__4242
2bc90     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bc94     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2bc98     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bc9c     01 FA 65 F6 | 	neg	result1, #1
2bca0                 | LR__4243
2bca0                 | __system___rxtxioctl_0761_ret
2bca0     2D 00 64 FD | 	ret
2bca4                 | 
2bca4                 | __system____dummy_flush_0762
2bca4     00 FA 05 F6 | 	mov	result1, #0
2bca8                 | __system____dummy_flush_0762_ret
2bca8     2D 00 64 FD | 	ret
2bcac                 | 
2bcac                 | __system___vfswrite
2bcac     09 4A 05 F6 | 	mov	COUNT_, #9
2bcb0     A8 00 A0 FD | 	call	#pushregs_
2bcb4     09 27 02 F6 | 	mov	local01, arg01
2bcb8     0A 29 02 F6 | 	mov	local02, arg02
2bcbc     0B 2B 02 F6 | 	mov	local03, arg03
2bcc0     14 2D 02 F6 | 	mov	local04, local02
2bcc4     08 26 06 F1 | 	add	local01, #8
2bcc8     13 13 02 FB | 	rdlong	arg01, local01
2bccc     08 26 86 F1 | 	sub	local01, #8
2bcd0     02 12 CE F7 | 	test	arg01, #2 wz
2bcd4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bcd8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2bcdc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bce0     01 FA 65 A6 |  if_e	neg	result1, #1
2bce4     80 01 90 AD |  if_e	jmp	#LR__4256
2bce8     08 26 06 F1 | 	add	local01, #8
2bcec     13 FB 01 FB | 	rdlong	result1, local01
2bcf0     08 26 86 F1 | 	sub	local01, #8
2bcf4     40 FA CD F7 | 	test	result1, #64 wz
2bcf8     68 00 90 AD |  if_e	jmp	#LR__4251
2bcfc     08 26 06 F1 | 	add	local01, #8
2bd00     13 15 02 FB | 	rdlong	arg02, local01
2bd04     08 26 86 F1 | 	sub	local01, #8
2bd08     80 14 CE F7 | 	test	arg02, #128 wz
2bd0c     54 00 90 AD |  if_e	jmp	#LR__4250
2bd10     30 26 06 F1 | 	add	local01, #48
2bd14     13 2F 02 FB | 	rdlong	local05, local01
2bd18     17 31 02 F6 | 	mov	local06, local05
2bd1c     30 26 86 F1 | 	sub	local01, #48
2bd20     13 30 46 F7 | 	zerox	local06, #19
2bd24     14 2E 46 F0 | 	shr	local05, #20
2bd28     02 2E 66 F0 | 	shl	local05, #2
2bd2c     ED 2E 02 F1 | 	add	local05, __methods__
2bd30     17 2F 02 FB | 	rdlong	local05, local05
2bd34     13 13 02 F6 | 	mov	arg01, local01
2bd38     00 14 06 F6 | 	mov	arg02, #0
2bd3c     02 16 06 F6 | 	mov	arg03, #2
2bd40     F2 32 02 F6 | 	mov	local07, objptr
2bd44     18 E5 01 F6 | 	mov	objptr, local06
2bd48     2D 2E 62 FD | 	call	local05
2bd4c     19 E5 01 F6 | 	mov	objptr, local07
2bd50     08 26 06 F1 | 	add	local01, #8
2bd54     13 33 02 FB | 	rdlong	local07, local01
2bd58     80 32 26 F5 | 	andn	local07, #128
2bd5c     13 33 62 FC | 	wrlong	local07, local01
2bd60     08 26 86 F1 | 	sub	local01, #8
2bd64                 | LR__4250
2bd64                 | LR__4251
2bd64     18 26 06 F1 | 	add	local01, #24
2bd68     13 33 0A FB | 	rdlong	local07, local01 wz
2bd6c     18 26 86 F1 | 	sub	local01, #24
2bd70     80 00 90 AD |  if_e	jmp	#LR__4253
2bd74     18 26 06 F1 | 	add	local01, #24
2bd78     13 2F 02 FB | 	rdlong	local05, local01
2bd7c     17 31 02 F6 | 	mov	local06, local05
2bd80     18 26 86 F1 | 	sub	local01, #24
2bd84     13 30 46 F7 | 	zerox	local06, #19
2bd88     14 2E 46 F0 | 	shr	local05, #20
2bd8c     02 2E 66 F0 | 	shl	local05, #2
2bd90     ED 2E 02 F1 | 	add	local05, __methods__
2bd94     17 2F 02 FB | 	rdlong	local05, local05
2bd98     14 15 02 F6 | 	mov	arg02, local02
2bd9c     15 17 02 F6 | 	mov	arg03, local03
2bda0     13 13 02 F6 | 	mov	arg01, local01
2bda4     F2 32 02 F6 | 	mov	local07, objptr
2bda8     18 E5 01 F6 | 	mov	objptr, local06
2bdac     2D 2E 62 FD | 	call	local05
2bdb0     19 E5 01 F6 | 	mov	objptr, local07
2bdb4     FD 34 02 F6 | 	mov	local08, result1
2bdb8     00 34 56 F2 | 	cmps	local08, #0 wc
2bdbc     2C 00 90 3D |  if_ae	jmp	#LR__4252
2bdc0     08 26 06 F1 | 	add	local01, #8
2bdc4     13 33 02 FB | 	rdlong	local07, local01
2bdc8     20 32 46 F5 | 	or	local07, #32
2bdcc     13 33 62 FC | 	wrlong	local07, local01
2bdd0     00 34 4E F2 | 	cmps	local08, #0 wz
2bdd4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bdd8     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2bddc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bde0     01 FA 65 56 |  if_ne	neg	result1, #1
2bde4     00 FA 05 A6 |  if_e	mov	result1, #0
2bde8     7C 00 90 FD | 	jmp	#LR__4256
2bdec                 | LR__4252
2bdec     1A FB 01 F6 | 	mov	result1, local08
2bdf0     74 00 90 FD | 	jmp	#LR__4256
2bdf4                 | LR__4253
2bdf4     1C 26 06 F1 | 	add	local01, #28
2bdf8     13 37 0A FB | 	rdlong	local09, local01 wz
2bdfc     1C 26 86 F1 | 	sub	local01, #28
2be00     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2be04     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2be08     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2be0c     01 FA 65 A6 |  if_e	neg	result1, #1
2be10     54 00 90 AD |  if_e	jmp	#LR__4256
2be14     00 34 06 F6 | 	mov	local08, #0
2be18                 | LR__4254
2be18     01 2A 16 F2 | 	cmp	local03, #1 wc
2be1c     44 00 90 CD |  if_b	jmp	#LR__4255
2be20     1B 31 02 F6 | 	mov	local06, local09
2be24     1B 2F 02 F6 | 	mov	local05, local09
2be28     13 30 46 F7 | 	zerox	local06, #19
2be2c     14 2E 46 F0 | 	shr	local05, #20
2be30     02 2E 66 F0 | 	shl	local05, #2
2be34     ED 2E 02 F1 | 	add	local05, __methods__
2be38     17 2F 02 FB | 	rdlong	local05, local05
2be3c     16 13 C2 FA | 	rdbyte	arg01, local04
2be40     13 15 02 F6 | 	mov	arg02, local01
2be44     F2 32 02 F6 | 	mov	local07, objptr
2be48     18 E5 01 F6 | 	mov	objptr, local06
2be4c     01 2C 06 F1 | 	add	local04, #1
2be50     2D 2E 62 FD | 	call	local05
2be54     19 E5 01 F6 | 	mov	objptr, local07
2be58     FD 34 02 F1 | 	add	local08, result1
2be5c     01 2A 86 F1 | 	sub	local03, #1
2be60     B4 FF 9F FD | 	jmp	#LR__4254
2be64                 | LR__4255
2be64     1A FB 01 F6 | 	mov	result1, local08
2be68                 | LR__4256
2be68     A7 F0 03 F6 | 	mov	ptra, fp
2be6c     B2 00 A0 FD | 	call	#popregs_
2be70                 | __system___vfswrite_ret
2be70     2D 00 64 FD | 	ret
2be74                 | 
2be74                 | __system___vfsread
2be74     03 4A 05 F6 | 	mov	COUNT_, #3
2be78     A8 00 A0 FD | 	call	#pushregs_
2be7c     28 F0 07 F1 | 	add	ptra, #40
2be80     04 4E 05 F1 | 	add	fp, #4
2be84     A7 12 62 FC | 	wrlong	arg01, fp
2be88     04 4E 05 F1 | 	add	fp, #4
2be8c     A7 14 62 FC | 	wrlong	arg02, fp
2be90     04 4E 05 F1 | 	add	fp, #4
2be94     A7 16 62 FC | 	wrlong	arg03, fp
2be98     04 4E 85 F1 | 	sub	fp, #4
2be9c     A7 FA 01 FB | 	rdlong	result1, fp
2bea0     14 4E 05 F1 | 	add	fp, #20
2bea4     A7 FA 61 FC | 	wrlong	result1, fp
2bea8     04 4E 05 F1 | 	add	fp, #4
2beac     A7 00 68 FC | 	wrlong	#0, fp
2beb0     1C 4E 85 F1 | 	sub	fp, #28
2beb4     A7 12 02 FB | 	rdlong	arg01, fp
2beb8     04 4E 85 F1 | 	sub	fp, #4
2bebc     08 12 06 F1 | 	add	arg01, #8
2bec0     09 FB 01 FB | 	rdlong	result1, arg01
2bec4     01 FA CD F7 | 	test	result1, #1 wz
2bec8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2becc     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2bed0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bed4     01 FA 65 A6 |  if_e	neg	result1, #1
2bed8     74 02 90 AD |  if_e	jmp	#LR__4266
2bedc     04 4E 05 F1 | 	add	fp, #4
2bee0     A7 12 02 FB | 	rdlong	arg01, fp
2bee4     04 4E 85 F1 | 	sub	fp, #4
2bee8     14 12 06 F1 | 	add	arg01, #20
2beec     09 FB 09 FB | 	rdlong	result1, arg01 wz
2bef0     B8 00 90 AD |  if_e	jmp	#LR__4261
2bef4     04 4E 05 F1 | 	add	fp, #4
2bef8     A7 12 02 FB | 	rdlong	arg01, fp
2befc     09 17 02 F6 | 	mov	arg03, arg01
2bf00     14 16 06 F1 | 	add	arg03, #20
2bf04     0B 27 02 FB | 	rdlong	local01, arg03
2bf08     13 29 02 F6 | 	mov	local02, local01
2bf0c     13 26 46 F7 | 	zerox	local01, #19
2bf10     14 28 46 F0 | 	shr	local02, #20
2bf14     02 28 66 F0 | 	shl	local02, #2
2bf18     ED 28 02 F1 | 	add	local02, __methods__
2bf1c     14 29 02 FB | 	rdlong	local02, local02
2bf20     04 4E 05 F1 | 	add	fp, #4
2bf24     A7 14 02 FB | 	rdlong	arg02, fp
2bf28     04 4E 05 F1 | 	add	fp, #4
2bf2c     A7 16 02 FB | 	rdlong	arg03, fp
2bf30     0C 4E 85 F1 | 	sub	fp, #12
2bf34     F2 2A 02 F6 | 	mov	local03, objptr
2bf38     13 E5 01 F6 | 	mov	objptr, local01
2bf3c     2D 28 62 FD | 	call	local02
2bf40     15 E5 01 F6 | 	mov	objptr, local03
2bf44     10 4E 05 F1 | 	add	fp, #16
2bf48     A7 FA 61 FC | 	wrlong	result1, fp
2bf4c     10 4E 85 F1 | 	sub	fp, #16
2bf50     00 FA 55 F2 | 	cmps	result1, #0 wc
2bf54     44 00 90 3D |  if_ae	jmp	#LR__4260
2bf58     04 4E 05 F1 | 	add	fp, #4
2bf5c     A7 2A 02 FB | 	rdlong	local03, fp
2bf60     15 27 02 F6 | 	mov	local01, local03
2bf64     08 2A 06 F1 | 	add	local03, #8
2bf68     15 29 02 FB | 	rdlong	local02, local03
2bf6c     20 28 46 F5 | 	or	local02, #32
2bf70     08 26 06 F1 | 	add	local01, #8
2bf74     13 29 62 FC | 	wrlong	local02, local01
2bf78     0C 4E 05 F1 | 	add	fp, #12
2bf7c     A7 12 0A FB | 	rdlong	arg01, fp wz
2bf80     10 4E 85 F1 | 	sub	fp, #16
2bf84     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bf88     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2bf8c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bf90     01 FA 65 56 |  if_ne	neg	result1, #1
2bf94     00 FA 05 A6 |  if_e	mov	result1, #0
2bf98     B4 01 90 FD | 	jmp	#LR__4266
2bf9c                 | LR__4260
2bf9c     10 4E 05 F1 | 	add	fp, #16
2bfa0     A7 FA 01 FB | 	rdlong	result1, fp
2bfa4     10 4E 85 F1 | 	sub	fp, #16
2bfa8     A4 01 90 FD | 	jmp	#LR__4266
2bfac                 | LR__4261
2bfac     04 4E 05 F1 | 	add	fp, #4
2bfb0     A7 12 02 FB | 	rdlong	arg01, fp
2bfb4     20 12 06 F1 | 	add	arg01, #32
2bfb8     09 13 0A FB | 	rdlong	arg01, arg01 wz
2bfbc     14 4E 05 F1 | 	add	fp, #20
2bfc0     A7 12 62 FC | 	wrlong	arg01, fp
2bfc4     18 4E 85 F1 | 	sub	fp, #24
2bfc8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bfcc     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2bfd0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bfd4     01 FA 65 A6 |  if_e	neg	result1, #1
2bfd8     74 01 90 AD |  if_e	jmp	#LR__4266
2bfdc     04 4E 05 F1 | 	add	fp, #4
2bfe0     A7 2A 02 FB | 	rdlong	local03, fp
2bfe4     04 4E 85 F1 | 	sub	fp, #4
2bfe8     28 2A 06 F1 | 	add	local03, #40
2bfec     15 29 0A FB | 	rdlong	local02, local03 wz
2bff0     7C 00 90 AD |  if_e	jmp	#LR__4263
2bff4     04 4E 05 F1 | 	add	fp, #4
2bff8     A7 12 02 FB | 	rdlong	arg01, fp
2bffc     09 2B 02 F6 | 	mov	local03, arg01
2c000     28 2A 06 F1 | 	add	local03, #40
2c004     15 27 02 FB | 	rdlong	local01, local03
2c008     13 29 02 F6 | 	mov	local02, local01
2c00c     13 26 46 F7 | 	zerox	local01, #19
2c010     14 28 46 F0 | 	shr	local02, #20
2c014     02 28 66 F0 | 	shl	local02, #2
2c018     ED 28 02 F1 | 	add	local02, __methods__
2c01c     14 29 02 FB | 	rdlong	local02, local02
2c020     20 4E 05 F1 | 	add	fp, #32
2c024     A7 16 02 F6 | 	mov	arg03, fp
2c028     24 4E 85 F1 | 	sub	fp, #36
2c02c     00 15 06 F6 | 	mov	arg02, #256
2c030     F2 2A 02 F6 | 	mov	local03, objptr
2c034     13 E5 01 F6 | 	mov	objptr, local01
2c038     2D 28 62 FD | 	call	local02
2c03c     15 E5 01 F6 | 	mov	objptr, local03
2c040     10 4E 05 F1 | 	add	fp, #16
2c044     A7 FA 61 FC | 	wrlong	result1, fp
2c048     00 FA 4D F2 | 	cmps	result1, #0 wz
2c04c     10 4E 85 F1 | 	sub	fp, #16
2c050     1C 00 90 5D |  if_ne	jmp	#LR__4262
2c054     24 4E 05 F1 | 	add	fp, #36
2c058     A7 28 02 FB | 	rdlong	local02, fp
2c05c     24 4E 85 F1 | 	sub	fp, #36
2c060     02 28 CE F7 | 	test	local02, #2 wz
2c064     20 4E 05 51 |  if_ne	add	fp, #32
2c068     A7 02 68 5C |  if_ne	wrlong	#1, fp
2c06c     20 4E 85 51 |  if_ne	sub	fp, #32
2c070                 | LR__4262
2c070                 | LR__4263
2c070     10 4E 05 F1 | 	add	fp, #16
2c074     A7 00 68 FC | 	wrlong	#0, fp
2c078     10 4E 85 F1 | 	sub	fp, #16
2c07c                 | LR__4264
2c07c     0C 4E 05 F1 | 	add	fp, #12
2c080     A7 2A 02 FB | 	rdlong	local03, fp
2c084     0C 4E 85 F1 | 	sub	fp, #12
2c088     01 2A 16 F2 | 	cmp	local03, #1 wc
2c08c     B4 00 90 CD |  if_b	jmp	#LR__4265
2c090     18 4E 05 F1 | 	add	fp, #24
2c094     A7 28 02 FB | 	rdlong	local02, fp
2c098     14 2B 02 F6 | 	mov	local03, local02
2c09c     13 2A 46 F7 | 	zerox	local03, #19
2c0a0     14 28 46 F0 | 	shr	local02, #20
2c0a4     02 28 66 F0 | 	shl	local02, #2
2c0a8     ED 28 02 F1 | 	add	local02, __methods__
2c0ac     14 29 02 FB | 	rdlong	local02, local02
2c0b0     14 4E 85 F1 | 	sub	fp, #20
2c0b4     A7 12 02 FB | 	rdlong	arg01, fp
2c0b8     04 4E 85 F1 | 	sub	fp, #4
2c0bc     F2 26 02 F6 | 	mov	local01, objptr
2c0c0     15 E5 01 F6 | 	mov	objptr, local03
2c0c4     2D 28 62 FD | 	call	local02
2c0c8     13 E5 01 F6 | 	mov	objptr, local01
2c0cc     14 4E 05 F1 | 	add	fp, #20
2c0d0     A7 FA 61 FC | 	wrlong	result1, fp
2c0d4     14 4E 85 F1 | 	sub	fp, #20
2c0d8     00 FA 55 F2 | 	cmps	result1, #0 wc
2c0dc     64 00 90 CD |  if_b	jmp	#LR__4265
2c0e0     1C 4E 05 F1 | 	add	fp, #28
2c0e4     A7 2A 02 FB | 	rdlong	local03, fp
2c0e8     15 29 02 F6 | 	mov	local02, local03
2c0ec     01 28 06 F1 | 	add	local02, #1
2c0f0     A7 28 62 FC | 	wrlong	local02, fp
2c0f4     08 4E 85 F1 | 	sub	fp, #8
2c0f8     A7 28 02 FB | 	rdlong	local02, fp
2c0fc     15 29 42 FC | 	wrbyte	local02, local03
2c100     04 4E 85 F1 | 	sub	fp, #4
2c104     A7 2A 02 FB | 	rdlong	local03, fp
2c108     01 2A 06 F1 | 	add	local03, #1
2c10c     A7 2A 62 FC | 	wrlong	local03, fp
2c110     04 4E 85 F1 | 	sub	fp, #4
2c114     A7 2A 02 FB | 	rdlong	local03, fp
2c118     01 2A 86 F1 | 	sub	local03, #1
2c11c     A7 2A 62 FC | 	wrlong	local03, fp
2c120     14 4E 05 F1 | 	add	fp, #20
2c124     A7 2A 0A FB | 	rdlong	local03, fp wz
2c128     20 4E 85 F1 | 	sub	fp, #32
2c12c     4C FF 9F AD |  if_e	jmp	#LR__4264
2c130     14 4E 05 F1 | 	add	fp, #20
2c134     A7 28 02 FB | 	rdlong	local02, fp
2c138     14 4E 85 F1 | 	sub	fp, #20
2c13c     0A 28 0E F2 | 	cmp	local02, #10 wz
2c140     38 FF 9F 5D |  if_ne	jmp	#LR__4264
2c144                 | LR__4265
2c144     10 4E 05 F1 | 	add	fp, #16
2c148     A7 FA 01 FB | 	rdlong	result1, fp
2c14c     10 4E 85 F1 | 	sub	fp, #16
2c150                 | LR__4266
2c150     A7 F0 03 F6 | 	mov	ptra, fp
2c154     B2 00 A0 FD | 	call	#popregs_
2c158                 | __system___vfsread_ret
2c158     2D 00 64 FD | 	ret
2c15c                 | 
2c15c                 | __system____default_filbuf
2c15c     04 4A 05 F6 | 	mov	COUNT_, #4
2c160     A8 00 A0 FD | 	call	#pushregs_
2c164     09 27 02 F6 | 	mov	local01, arg01
2c168     13 29 02 FB | 	rdlong	local02, local01
2c16c     0C 28 06 F1 | 	add	local02, #12
2c170     14 FB 09 FB | 	rdlong	result1, local02 wz
2c174     0C 28 86 F1 | 	sub	local02, #12
2c178     20 00 90 5D |  if_ne	jmp	#LR__4270
2c17c     14 28 06 F1 | 	add	local02, #20
2c180     14 FB 01 F6 | 	mov	result1, local02
2c184     04 28 86 F1 | 	sub	local02, #4
2c188     14 FB 61 FC | 	wrlong	result1, local02
2c18c     04 28 86 F1 | 	sub	local02, #4
2c190     02 00 80 FF 
2c194     14 01 68 FC | 	wrlong	##1024, local02
2c198     0C 28 86 F1 | 	sub	local02, #12
2c19c                 | LR__4270
2c19c     14 26 06 F1 | 	add	local01, #20
2c1a0     13 2B 02 FB | 	rdlong	local03, local01
2c1a4     15 2D 02 F6 | 	mov	local04, local03
2c1a8     14 26 86 F1 | 	sub	local01, #20
2c1ac     13 2C 46 F7 | 	zerox	local04, #19
2c1b0     14 2A 46 F0 | 	shr	local03, #20
2c1b4     02 2A 66 F0 | 	shl	local03, #2
2c1b8     ED 2A 02 F1 | 	add	local03, __methods__
2c1bc     15 2B 02 FB | 	rdlong	local03, local03
2c1c0     10 28 06 F1 | 	add	local02, #16
2c1c4     14 15 02 FB | 	rdlong	arg02, local02
2c1c8     04 28 86 F1 | 	sub	local02, #4
2c1cc     14 17 02 FB | 	rdlong	arg03, local02
2c1d0     0C 28 86 F1 | 	sub	local02, #12
2c1d4     13 13 02 F6 | 	mov	arg01, local01
2c1d8     F2 26 02 F6 | 	mov	local01, objptr
2c1dc     16 E5 01 F6 | 	mov	objptr, local04
2c1e0     2D 2A 62 FD | 	call	local03
2c1e4     13 E5 01 F6 | 	mov	objptr, local01
2c1e8     FD 2C 02 F6 | 	mov	local04, result1
2c1ec     00 2C 56 F2 | 	cmps	local04, #0 wc
2c1f0     01 FA 65 C6 |  if_b	neg	result1, #1
2c1f4     28 00 90 CD |  if_b	jmp	#LR__4271
2c1f8     14 2D 62 FC | 	wrlong	local04, local02
2c1fc     10 28 06 F1 | 	add	local02, #16
2c200     14 2B 02 FB | 	rdlong	local03, local02
2c204     0C 28 86 F1 | 	sub	local02, #12
2c208     14 2B 62 FC | 	wrlong	local03, local02
2c20c     04 28 06 F1 | 	add	local02, #4
2c210     14 2B 02 FB | 	rdlong	local03, local02
2c214     01 2A 46 F5 | 	or	local03, #1
2c218     14 2B 62 FC | 	wrlong	local03, local02
2c21c     16 FB 01 F6 | 	mov	result1, local04
2c220                 | LR__4271
2c220     A7 F0 03 F6 | 	mov	ptra, fp
2c224     B2 00 A0 FD | 	call	#popregs_
2c228                 | __system____default_filbuf_ret
2c228     2D 00 64 FD | 	ret
2c22c                 | 
2c22c                 | __system__getlower_1151
2c22c     41 12 56 F2 | 	cmps	arg01, #65 wc
2c230     10 00 90 CD |  if_b	jmp	#LR__4280
2c234     5B 12 56 F2 | 	cmps	arg01, #91 wc
2c238     09 FB 01 C6 |  if_b	mov	result1, arg01
2c23c     20 FA 05 C1 |  if_b	add	result1, #32
2c240     04 00 90 CD |  if_b	jmp	#__system__getlower_1151_ret
2c244                 | LR__4280
2c244     09 FB 01 F6 | 	mov	result1, arg01
2c248                 | __system__getlower_1151_ret
2c248     2D 00 64 FD | 	ret
2c24c                 | 
2c24c                 | __system___pat_match
2c24c     08 4A 05 F6 | 	mov	COUNT_, #8
2c250     A8 00 A0 FD | 	call	#pushregs_
2c254     09 27 02 F6 | 	mov	local01, arg01
2c258                 | LR__4290
2c258     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2c25c     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2c260     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2c264     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2c268     2C 00 90 AD |  if_e	jmp	#LR__4291
2c26c     0A 13 C2 FA | 	rdbyte	arg01, arg02
2c270     B8 FF BF FD | 	call	#__system__getlower_1151
2c274     FD 2A 02 F6 | 	mov	local03, result1
2c278     13 13 C2 FA | 	rdbyte	arg01, local01
2c27c     AC FF BF FD | 	call	#__system__getlower_1151
2c280     15 FB 09 F2 | 	cmp	result1, local03 wz
2c284     00 FA 05 56 |  if_ne	mov	result1, #0
2c288     FC 00 90 5D |  if_ne	jmp	#LR__4299
2c28c     01 26 06 F1 | 	add	local01, #1
2c290     01 14 06 F1 | 	add	arg02, #1
2c294     C0 FF 9F FD | 	jmp	#LR__4290
2c298                 | LR__4291
2c298     0A 2B C2 FA | 	rdbyte	local03, arg02
2c29c     2A 2A 0E F2 | 	cmp	local03, #42 wz
2c2a0     D4 00 90 5D |  if_ne	jmp	#LR__4298
2c2a4     01 14 06 F1 | 	add	arg02, #1
2c2a8     0A 29 C2 FA | 	rdbyte	local02, arg02
2c2ac     01 14 86 F1 | 	sub	arg02, #1
2c2b0     2E 28 0E F2 | 	cmp	local02, #46 wz
2c2b4     28 00 90 5D |  if_ne	jmp	#LR__4292
2c2b8     02 14 06 F1 | 	add	arg02, #2
2c2bc     0A 29 C2 FA | 	rdbyte	local02, arg02
2c2c0     02 14 86 F1 | 	sub	arg02, #2
2c2c4     2A 28 0E F2 | 	cmp	local02, #42 wz
2c2c8     03 14 06 A1 |  if_e	add	arg02, #3
2c2cc     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2c2d0     03 14 86 A1 |  if_e	sub	arg02, #3
2c2d4     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2c2d8     01 FA 05 A6 |  if_e	mov	result1, #1
2c2dc     A8 00 90 AD |  if_e	jmp	#LR__4299
2c2e0                 | LR__4292
2c2e0     01 14 06 F1 | 	add	arg02, #1
2c2e4     00 30 06 F6 | 	mov	local06, #0
2c2e8     97 1E 48 FB | 	callpa	#(@LR__4295-@LR__4293)>>2,fcache_load_ptr_
2c2ec                 | LR__4293
2c2ec     18 33 02 F6 | 	mov	local07, local06
2c2f0     0A 33 02 F1 | 	add	local07, arg02
2c2f4     19 33 CA FA | 	rdbyte	local07, local07 wz
2c2f8     18 2F 02 56 |  if_ne	mov	local05, local06
2c2fc     01 2E 06 51 |  if_ne	add	local05, #1
2c300     17 31 02 56 |  if_ne	mov	local06, local05
2c304     E4 FF 9F 5D |  if_ne	jmp	#LR__4293
2c308     00 34 06 F6 | 	mov	local08, #0
2c30c                 | LR__4294
2c30c     1A 33 02 F6 | 	mov	local07, local08
2c310     13 33 02 F1 | 	add	local07, local01
2c314     19 33 CA FA | 	rdbyte	local07, local07 wz
2c318     1A 2F 02 56 |  if_ne	mov	local05, local08
2c31c     01 2E 06 51 |  if_ne	add	local05, #1
2c320     17 35 02 56 |  if_ne	mov	local08, local05
2c324     E4 FF 9F 5D |  if_ne	jmp	#LR__4294
2c328                 | LR__4295
2c328     18 35 52 F2 | 	cmps	local08, local06 wc
2c32c     00 FA 05 C6 |  if_b	mov	result1, #0
2c330     54 00 90 CD |  if_b	jmp	#LR__4299
2c334     1A 29 02 F6 | 	mov	local02, local08
2c338     18 29 82 F1 | 	sub	local02, local06
2c33c     14 27 02 F1 | 	add	local01, local02
2c340                 | LR__4296
2c340     01 30 56 F2 | 	cmps	local06, #1 wc
2c344     30 00 90 CD |  if_b	jmp	#LR__4297
2c348     13 13 C2 FA | 	rdbyte	arg01, local01
2c34c     DC FE BF FD | 	call	#__system__getlower_1151
2c350     FD 34 02 F6 | 	mov	local08, result1
2c354     0A 13 C2 FA | 	rdbyte	arg01, arg02
2c358     D0 FE BF FD | 	call	#__system__getlower_1151
2c35c     FD 34 0A F2 | 	cmp	local08, result1 wz
2c360     00 FA 05 56 |  if_ne	mov	result1, #0
2c364     20 00 90 5D |  if_ne	jmp	#LR__4299
2c368     01 26 06 F1 | 	add	local01, #1
2c36c     01 14 06 F1 | 	add	arg02, #1
2c370     01 30 86 F1 | 	sub	local06, #1
2c374     C8 FF 9F FD | 	jmp	#LR__4296
2c378                 | LR__4297
2c378                 | LR__4298
2c378     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2c37c     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2c380     01 FA 05 A6 |  if_e	mov	result1, #1
2c384     00 FA 05 56 |  if_ne	mov	result1, #0
2c388                 | LR__4299
2c388     A7 F0 03 F6 | 	mov	ptra, fp
2c38c     B2 00 A0 FD | 	call	#popregs_
2c390                 | __system___pat_match_ret
2c390     2D 00 64 FD | 	ret
2c394                 | 
2c394                 | _fatfs_cc_ff_uni2oem
2c394     00 00 06 F6 | 	mov	_var01, #0
2c398     80 12 16 F2 | 	cmp	arg01, #128 wc
2c39c     09 01 02 C6 |  if_b	mov	_var01, arg01
2c3a0     58 00 90 CD |  if_b	jmp	#LR__4304
2c3a4     80 00 00 FF 
2c3a8     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2c3ac     4C 00 90 3D |  if_ae	jmp	#LR__4303
2c3b0     0A FB 31 F9 | 	getword	result1, arg02, #0
2c3b4     01 00 00 FF 
2c3b8     52 FB 0D F2 | 	cmp	result1, ##850 wz
2c3bc     3C 00 90 5D |  if_ne	jmp	#LR__4303
2c3c0                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2c3c0     00 00 06 F6 | 	mov	_var01, #0
2c3c4     97 14 48 FB | 	callpa	#(@LR__4301-@LR__4300)>>2,fcache_load_ptr_
2c3c8                 | LR__4300
2c3c8     00 FB 31 F9 | 	getword	result1, _var01, #0
2c3cc     80 FA 15 F2 | 	cmp	result1, #128 wc
2c3d0     1C 00 90 3D |  if_ae	jmp	#LR__4302
2c3d4     00 FB 31 F9 | 	getword	result1, _var01, #0
2c3d8     01 FA 65 F0 | 	shl	result1, #1
2c3dc     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2c3e0     FD FA E1 FA | 	rdword	result1, result1
2c3e4     FD 12 0A F2 | 	cmp	arg01, result1 wz
2c3e8     01 00 06 51 |  if_ne	add	_var01, #1
2c3ec     D8 FF 9F 5D |  if_ne	jmp	#LR__4300
2c3f0                 | LR__4301
2c3f0                 | LR__4302
2c3f0     00 01 32 F9 | 	getword	_var01, _var01, #0
2c3f4     80 00 06 F1 | 	add	_var01, #128
2c3f8     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2c3fc                 | LR__4303
2c3fc                 | LR__4304
2c3fc                 | ' 			c = (c + 0x80) & 0xFF;
2c3fc                 | ' 		}
2c3fc                 | ' 	}
2c3fc                 | ' 
2c3fc                 | ' 	return c;
2c3fc     00 FB 01 F6 | 	mov	result1, _var01
2c400                 | _fatfs_cc_ff_uni2oem_ret
2c400     2D 00 64 FD | 	ret
2c404                 | 
2c404                 | _fatfs_cc_ff_oem2uni
2c404     00 00 06 F6 | 	mov	_var01, #0
2c408     09 FB 31 F9 | 	getword	result1, arg01, #0
2c40c     80 FA 15 F2 | 	cmp	result1, #128 wc
2c410     09 01 02 C6 |  if_b	mov	_var01, arg01
2c414     2C 00 90 CD |  if_b	jmp	#LR__4311
2c418     0A 15 32 F9 | 	getword	arg02, arg02, #0
2c41c     01 00 00 FF 
2c420     52 15 0E F2 | 	cmp	arg02, ##850 wz
2c424     1C 00 90 5D |  if_ne	jmp	#LR__4310
2c428     09 FB 31 F9 | 	getword	result1, arg01, #0
2c42c     00 FB 15 F2 | 	cmp	result1, #256 wc
2c430     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2c434     80 12 86 C1 |  if_b	sub	arg01, #128
2c438     01 12 66 C0 |  if_b	shl	arg01, #1
2c43c     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2c440     09 01 E2 CA |  if_b	rdword	_var01, arg01
2c444                 | LR__4310
2c444                 | LR__4311
2c444                 | ' 		}
2c444                 | ' 	}
2c444                 | ' 
2c444                 | ' 	return c;
2c444     00 FB 01 F6 | 	mov	result1, _var01
2c448                 | _fatfs_cc_ff_oem2uni_ret
2c448     2D 00 64 FD | 	ret
2c44c                 | 
2c44c                 | _fatfs_cc_ff_wtoupper
2c44c     09 01 02 F6 | 	mov	_var01, arg01
2c450     80 00 00 FF 
2c454     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2c458     60 01 90 3D |  if_ae	jmp	#LR__4333
2c45c     00 03 02 F6 | 	mov	_var02, _var01
2c460     01 01 32 F9 | 	getword	_var01, _var02, #0
2c464     08 00 00 FF 
2c468     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2c46c     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2c470     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2c474     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2c478     01 00 00 3F 
2c47c     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2c480     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2c484     01 00 00 3F 
2c488     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2c48c     02 07 02 F6 | 	mov	_var04, _var03
2c490                 | ' 		uc = (WORD)uni;
2c490                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2c490                 | ' 		for (;;) {
2c490                 | LR__4320
2c490     03 09 E2 FA | 	rdword	_var05, _var04
2c494     04 05 02 F6 | 	mov	_var03, _var05
2c498     0F 04 4E F7 | 	zerox	_var03, #15 wz
2c49c     02 06 06 F1 | 	add	_var04, #2
2c4a0     14 01 90 AD |  if_e	jmp	#LR__4332
2c4a4     01 05 32 F9 | 	getword	_var03, _var02, #0
2c4a8     04 01 32 F9 | 	getword	_var01, _var05, #0
2c4ac     00 05 12 F2 | 	cmp	_var03, _var01 wc
2c4b0     04 01 90 CD |  if_b	jmp	#LR__4332
2c4b4     03 0B E2 FA | 	rdword	_var06, _var04
2c4b8     05 0D 32 F9 | 	getword	_var07, _var06, #0
2c4bc     08 0C 46 F0 | 	shr	_var07, #8
2c4c0     05 0B 32 F9 | 	getword	_var06, _var06, #0
2c4c4     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2c4c8     01 05 32 F9 | 	getword	_var03, _var02, #0
2c4cc     04 0F 32 F9 | 	getword	_var08, _var05, #0
2c4d0     05 01 32 F9 | 	getword	_var01, _var06, #0
2c4d4     00 0F 02 F1 | 	add	_var08, _var01
2c4d8     07 05 52 F2 | 	cmps	_var03, _var08 wc
2c4dc     02 06 06 F1 | 	add	_var04, #2
2c4e0     C4 00 90 3D |  if_ae	jmp	#LR__4331
2c4e4                 | ' 				switch (cmd) {
2c4e4     06 11 32 F9 | 	getword	_var09, _var07, #0
2c4e8     09 10 26 F3 | 	fle	_var09, #9
2c4ec     30 10 62 FD | 	jmprel	_var09
2c4f0                 | LR__4321
2c4f0     24 00 90 FD | 	jmp	#LR__4322
2c4f4     3C 00 90 FD | 	jmp	#LR__4323
2c4f8     54 00 90 FD | 	jmp	#LR__4324
2c4fc     5C 00 90 FD | 	jmp	#LR__4325
2c500     64 00 90 FD | 	jmp	#LR__4326
2c504     6C 00 90 FD | 	jmp	#LR__4327
2c508     74 00 90 FD | 	jmp	#LR__4328
2c50c     7C 00 90 FD | 	jmp	#LR__4329
2c510     84 00 90 FD | 	jmp	#LR__4330
2c514     A0 00 90 FD | 	jmp	#LR__4332
2c518                 | LR__4322
2c518     01 03 32 F9 | 	getword	_var02, _var02, #0
2c51c     04 09 32 F9 | 	getword	_var05, _var05, #0
2c520     04 03 82 F1 | 	sub	_var02, _var05
2c524     01 02 66 F0 | 	shl	_var02, #1
2c528     03 03 02 F1 | 	add	_var02, _var04
2c52c     01 03 E2 FA | 	rdword	_var02, _var02
2c530     84 00 90 FD | 	jmp	#LR__4332
2c534                 | LR__4323
2c534     01 05 32 F9 | 	getword	_var03, _var02, #0
2c538     01 03 32 F9 | 	getword	_var02, _var02, #0
2c53c     04 09 32 F9 | 	getword	_var05, _var05, #0
2c540     04 03 82 F1 | 	sub	_var02, _var05
2c544     01 02 06 F5 | 	and	_var02, #1
2c548     02 03 C2 F2 | 	subr	_var02, _var03
2c54c     68 00 90 FD | 	jmp	#LR__4332
2c550                 | LR__4324
2c550     01 03 32 F9 | 	getword	_var02, _var02, #0
2c554     10 02 86 F1 | 	sub	_var02, #16
2c558     5C 00 90 FD | 	jmp	#LR__4332
2c55c                 | LR__4325
2c55c     01 03 32 F9 | 	getword	_var02, _var02, #0
2c560     20 02 86 F1 | 	sub	_var02, #32
2c564     50 00 90 FD | 	jmp	#LR__4332
2c568                 | LR__4326
2c568     01 03 32 F9 | 	getword	_var02, _var02, #0
2c56c     30 02 86 F1 | 	sub	_var02, #48
2c570     44 00 90 FD | 	jmp	#LR__4332
2c574                 | LR__4327
2c574     01 03 32 F9 | 	getword	_var02, _var02, #0
2c578     1A 02 86 F1 | 	sub	_var02, #26
2c57c     38 00 90 FD | 	jmp	#LR__4332
2c580                 | LR__4328
2c580     01 03 32 F9 | 	getword	_var02, _var02, #0
2c584     08 02 06 F1 | 	add	_var02, #8
2c588     2C 00 90 FD | 	jmp	#LR__4332
2c58c                 | LR__4329
2c58c     01 03 32 F9 | 	getword	_var02, _var02, #0
2c590     50 02 86 F1 | 	sub	_var02, #80
2c594     20 00 90 FD | 	jmp	#LR__4332
2c598                 | LR__4330
2c598     01 03 32 F9 | 	getword	_var02, _var02, #0
2c59c     0E 00 00 FF 
2c5a0     60 02 86 F1 | 	sub	_var02, ##7264
2c5a4                 | ' 				}
2c5a4                 | ' 				break;
2c5a4     10 00 90 FD | 	jmp	#LR__4332
2c5a8                 | LR__4331
2c5a8     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2c5ac     02 0A 06 AA |  if_e	mul	_var06, #2
2c5b0     05 07 02 A1 |  if_e	add	_var04, _var06
2c5b4     D8 FE 9F FD | 	jmp	#LR__4320
2c5b8                 | LR__4332
2c5b8     01 01 32 F9 | 	getword	_var01, _var02, #0
2c5bc                 | LR__4333
2c5bc                 | ' 		}
2c5bc                 | ' 		uni = uc;
2c5bc                 | ' 	}
2c5bc                 | ' 
2c5bc                 | ' 	return uni;
2c5bc     00 FB 01 F6 | 	mov	result1, _var01
2c5c0                 | _fatfs_cc_ff_wtoupper_ret
2c5c0     2D 00 64 FD | 	ret
2c5c4                 | 
2c5c4                 | _fatfs_cc_strncpy
2c5c4     09 01 02 F6 | 	mov	_var01, arg01
2c5c8     97 12 48 FB | 	callpa	#(@LR__4341-@LR__4340)>>2,fcache_load_ptr_
2c5cc                 | ' 
2c5cc                 | ' 	dscan = dst;
2c5cc                 | ' 	sscan = src;
2c5cc                 | ' 	count = n;
2c5cc                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2c5cc                 | LR__4340
2c5cc     01 16 86 F1 | 	sub	arg03, #1
2c5d0     00 16 56 F2 | 	cmps	arg03, #0 wc
2c5d4     18 00 90 CD |  if_b	jmp	#LR__4342
2c5d8     0A FB C1 FA | 	rdbyte	result1, arg02
2c5dc     00 FB 41 FC | 	wrbyte	result1, _var01
2c5e0     01 14 06 F1 | 	add	arg02, #1
2c5e4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2c5e8                 | ' 		continue;
2c5e8     01 00 06 F1 | 	add	_var01, #1
2c5ec     DC FF 9F 5D |  if_ne	jmp	#LR__4340
2c5f0                 | LR__4341
2c5f0                 | LR__4342
2c5f0     97 0C 48 FB | 	callpa	#(@LR__4344-@LR__4343)>>2,fcache_load_ptr_
2c5f4                 | ' 	while (--count >= 0)
2c5f4                 | LR__4343
2c5f4     01 16 86 F1 | 	sub	arg03, #1
2c5f8     00 16 56 F2 | 	cmps	arg03, #0 wc
2c5fc     00 03 02 36 |  if_ae	mov	_var02, _var01
2c600     01 00 06 31 |  if_ae	add	_var01, #1
2c604     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2c608     E8 FF 9F 3D |  if_ae	jmp	#LR__4343
2c60c                 | LR__4344
2c60c                 | ' 		*dscan++ = '\0';
2c60c                 | ' 	return(dst);
2c60c     09 FB 01 F6 | 	mov	result1, arg01
2c610                 | _fatfs_cc_strncpy_ret
2c610     2D 00 64 FD | 	ret
2c614                 | 
2c614                 | _fatfs_cc_memcmp
2c614                 | ' 	for (n = size; n > 0; n--)
2c614     00 16 0E F2 | 	cmp	arg03, #0 wz
2c618     28 00 90 AD |  if_e	jmp	#LR__4351
2c61c                 | LR__4350
2c61c     09 01 C2 FA | 	rdbyte	_var01, arg01
2c620     0A 03 C2 FA | 	rdbyte	_var02, arg02
2c624     01 01 0A F2 | 	cmp	_var01, _var02 wz
2c628     01 12 06 A1 |  if_e	add	arg01, #1
2c62c     01 14 06 A1 |  if_e	add	arg02, #1
2c630                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2c630     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2c634     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2c638     01 FB 81 51 |  if_ne	sub	result1, _var02
2c63c     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2c640     F6 17 6E FB | 	djnz	arg03, #LR__4350
2c644                 | LR__4351
2c644                 | ' 
2c644                 | ' 	return(0);
2c644     00 FA 05 F6 | 	mov	result1, #0
2c648                 | _fatfs_cc_memcmp_ret
2c648     2D 00 64 FD | 	ret
2c64c                 | 
2c64c                 | _fatfs_cc_strncmp
2c64c     09 01 0A F6 | 	mov	_var01, arg01 wz
2c650     14 00 90 5D |  if_ne	jmp	#LR__4360
2c654                 | ' 		return scan2 ? -1 : 0;
2c654     00 14 0E F2 | 	cmp	arg02, #0 wz
2c658     01 02 66 56 |  if_ne	neg	_var02, #1
2c65c     00 02 06 A6 |  if_e	mov	_var02, #0
2c660     01 FB 01 F6 | 	mov	result1, _var02
2c664     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2c668                 | LR__4360
2c668     00 14 0E F2 | 	cmp	arg02, #0 wz
2c66c     01 FA 05 A6 |  if_e	mov	result1, #1
2c670     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2c674     0B 05 02 F6 | 	mov	_var03, arg03
2c678     97 16 48 FB | 	callpa	#(@LR__4362-@LR__4361)>>2,fcache_load_ptr_
2c67c                 | ' 	count = n;
2c67c                 | ' 	do {
2c67c                 | LR__4361
2c67c     00 07 C2 FA | 	rdbyte	_var04, _var01
2c680     0A 09 02 F6 | 	mov	_var05, arg02
2c684     04 0B C2 FA | 	rdbyte	_var06, _var05
2c688     01 04 86 F1 | 	sub	_var03, #1
2c68c     00 04 56 F2 | 	cmps	_var03, #0 wc
2c690     01 00 06 F1 | 	add	_var01, #1
2c694     01 14 06 F1 | 	add	arg02, #1
2c698     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2c69c     08 00 90 2D |  if_nc_and_z	jmp	#LR__4363
2c6a0     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2c6a4     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4361
2c6a8                 | LR__4362
2c6a8                 | LR__4363
2c6a8     00 04 56 F2 | 	cmps	_var03, #0 wc
2c6ac                 | ' 		return(0);
2c6ac     00 FA 05 C6 |  if_b	mov	result1, #0
2c6b0     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2c6b4     05 07 0A F2 | 	cmp	_var04, _var06 wz
2c6b8                 | ' 		return(0);
2c6b8     00 FA 05 A6 |  if_e	mov	result1, #0
2c6bc     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2c6c0     00 06 0E F2 | 	cmp	_var04, #0 wz
2c6c4                 | ' 		return(-1);
2c6c4     01 FA 65 A6 |  if_e	neg	result1, #1
2c6c8     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2c6cc     00 0A 0E F2 | 	cmp	_var06, #0 wz
2c6d0                 | ' 		return(1);
2c6d0     01 FA 05 A6 |  if_e	mov	result1, #1
2c6d4                 | ' 		return(c1 - c2);
2c6d4     03 FB 01 56 |  if_ne	mov	result1, _var04
2c6d8     05 FB 81 51 |  if_ne	sub	result1, _var06
2c6dc                 | _fatfs_cc_strncmp_ret
2c6dc     2D 00 64 FD | 	ret
2c6e0                 | 
2c6e0                 | _fatfs_cc_strchr
2c6e0                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
2c6e0                 | ' 	while ((c = *s++) != (char) charwanted)
2c6e0                 | LR__4370
2c6e0     09 01 02 F6 | 	mov	_var01, arg01
2c6e4     00 03 C2 FA | 	rdbyte	_var02, _var01
2c6e8     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2c6ec     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2c6f0     03 05 0A F2 | 	cmp	_var03, _var04 wz
2c6f4     01 12 06 F1 | 	add	arg01, #1
2c6f8     14 00 90 AD |  if_e	jmp	#LR__4371
2c6fc     01 05 02 F6 | 	mov	_var03, _var02
2c700     07 04 4E F7 | 	zerox	_var03, #7 wz
2c704     00 FA 05 A6 |  if_e	mov	result1, #0
2c708     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2c70c     D0 FF 9F FD | 	jmp	#LR__4370
2c710                 | LR__4371
2c710                 | ' 	return((char *)--s);
2c710     01 12 86 F1 | 	sub	arg01, #1
2c714     09 FB 01 F6 | 	mov	result1, arg01
2c718                 | _fatfs_cc_strchr_ret
2c718     2D 00 64 FD | 	ret
2c71c                 | 
2c71c                 | _fatfs_cc_disk_initialize
2c71c     04 4A 05 F6 | 	mov	COUNT_, #4
2c720     A8 00 A0 FD | 	call	#pushregs_
2c724     40 F0 07 F1 | 	add	ptra, #64
2c728     04 4E 05 F1 | 	add	fp, #4
2c72c     A7 12 42 FC | 	wrbyte	arg01, fp
2c730     01 00 00 FF 
2c734     14 E4 05 F1 | 	add	objptr, ##532
2c738     F2 18 02 FB | 	rdlong	arg04, objptr
2c73c     2C 4E 05 F1 | 	add	fp, #44
2c740     A7 18 62 FC | 	wrlong	arg04, fp
2c744     04 E4 85 F1 | 	sub	objptr, #4
2c748     F2 18 02 FB | 	rdlong	arg04, objptr
2c74c     04 4E 05 F1 | 	add	fp, #4
2c750     A7 18 62 FC | 	wrlong	arg04, fp
2c754     08 E4 05 F1 | 	add	objptr, #8
2c758     F2 18 02 FB | 	rdlong	arg04, objptr
2c75c     04 4E 05 F1 | 	add	fp, #4
2c760     A7 18 62 FC | 	wrlong	arg04, fp
2c764     04 E4 05 F1 | 	add	objptr, #4
2c768     F2 18 02 FB | 	rdlong	arg04, objptr
2c76c     04 4E 05 F1 | 	add	fp, #4
2c770     A7 18 62 FC | 	wrlong	arg04, fp
2c774     04 E4 05 F1 | 	add	objptr, #4
2c778     F2 02 48 FC | 	wrbyte	#1, objptr
2c77c     01 00 00 FF 
2c780     20 E4 85 F1 | 	sub	objptr, ##544
2c784     38 4E 85 F1 | 	sub	fp, #56
2c788     A7 18 CA FA | 	rdbyte	arg04, fp wz
2c78c     04 4E 85 F1 | 	sub	fp, #4
2c790                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2c790                 | '             return RES_NOTRDY;
2c790     03 FA 05 56 |  if_ne	mov	result1, #3
2c794     D8 05 90 5D |  if_ne	jmp	#LR__4398
2c798     13 00 00 FF 
2c79c     10 13 06 F6 | 	mov	arg01, ##10000
2c7a0     44 95 BF FD | 	call	#__system___waitus
2c7a4     30 4E 05 F1 | 	add	fp, #48
2c7a8     A7 12 02 FB | 	rdlong	arg01, fp
2c7ac     09 01 08 FC | 	wrpin	#0, arg01
2c7b0     04 4E 05 F1 | 	add	fp, #4
2c7b4     A7 12 02 FB | 	rdlong	arg01, fp
2c7b8     09 01 08 FC | 	wrpin	#0, arg01
2c7bc     04 4E 05 F1 | 	add	fp, #4
2c7c0     A7 12 02 FB | 	rdlong	arg01, fp
2c7c4     09 01 08 FC | 	wrpin	#0, arg01
2c7c8     04 4E 05 F1 | 	add	fp, #4
2c7cc     A7 12 02 FB | 	rdlong	arg01, fp
2c7d0     09 00 80 FF 
2c7d4     09 01 08 FC | 	wrpin	##4608, arg01
2c7d8     0C 4E 85 F1 | 	sub	fp, #12
2c7dc     A7 12 02 FB | 	rdlong	arg01, fp
2c7e0     59 12 62 FD | 	drvh	arg01
2c7e4     04 4E 05 F1 | 	add	fp, #4
2c7e8     A7 12 02 FB | 	rdlong	arg01, fp
2c7ec     59 12 62 FD | 	drvh	arg01
2c7f0     04 4E 05 F1 | 	add	fp, #4
2c7f4     A7 12 02 FB | 	rdlong	arg01, fp
2c7f8     59 12 62 FD | 	drvh	arg01
2c7fc     04 4E 05 F1 | 	add	fp, #4
2c800     A7 12 02 FB | 	rdlong	arg01, fp
2c804     59 12 62 FD | 	drvh	arg01
2c808     20 4E 85 F1 | 	sub	fp, #32
2c80c     00 04 80 FF 
2c810     A7 20 68 FC | 	wrlong	##524304, fp
2c814     04 4E 05 F1 | 	add	fp, #4
2c818     20 03 80 FF 
2c81c     A7 90 68 FC | 	wrlong	##409672, fp
2c820     14 4E 05 F1 | 	add	fp, #20
2c824     A7 26 02 FB | 	rdlong	local01, fp
2c828     18 4E 85 F1 | 	sub	fp, #24
2c82c     A7 16 02 FB | 	rdlong	arg03, fp
2c830     40 26 62 FD | 	dirl	local01
2c834     A0 03 80 FF 
2c838     13 91 08 FC | 	wrpin	##475208, local01
2c83c     13 17 12 FC | 	wxpin	arg03, local01
2c840     13 01 28 FC | 	wypin	#0, local01
2c844     41 26 62 FD | 	dirh	local01
2c848     1C 4E 05 F1 | 	add	fp, #28
2c84c     A7 28 02 FB | 	rdlong	local02, fp
2c850     14 27 82 F1 | 	sub	local01, local02
2c854     07 26 06 F5 | 	and	local01, #7
2c858     18 26 66 F0 | 	shl	local01, #24
2c85c     78 14 06 F6 | 	mov	arg02, #120
2c860     13 15 42 F5 | 	or	arg02, local01
2c864     14 4E 85 F1 | 	sub	fp, #20
2c868     A7 14 62 FC | 	wrlong	arg02, fp
2c86c     14 4E 05 F1 | 	add	fp, #20
2c870     A7 12 02 FB | 	rdlong	arg01, fp
2c874     10 14 26 F4 | 	bith	arg02, #16
2c878     40 12 62 FD | 	dirl	arg01
2c87c     09 15 02 FC | 	wrpin	arg02, arg01
2c880     09 3F 18 FC | 	wxpin	#31, arg01
2c884     FF FF FF FF 
2c888     09 FF 2B FC | 	wypin	##-1, arg01
2c88c     41 12 62 FD | 	dirh	arg01
2c890     04 4E 85 F1 | 	sub	fp, #4
2c894     A7 14 02 FB | 	rdlong	arg02, fp
2c898     08 4E 05 F1 | 	add	fp, #8
2c89c     A7 2A 02 FB | 	rdlong	local03, fp
2c8a0     15 15 82 F1 | 	sub	arg02, local03
2c8a4     07 14 06 F5 | 	and	arg02, #7
2c8a8     18 14 66 F0 | 	shl	arg02, #24
2c8ac     14 4E 85 F1 | 	sub	fp, #20
2c8b0     A7 14 62 FC | 	wrlong	arg02, fp
2c8b4     29 00 00 FF 
2c8b8     7A 14 46 F5 | 	or	arg02, ##21114
2c8bc     A7 14 62 FC | 	wrlong	arg02, fp
2c8c0     14 4E 05 F1 | 	add	fp, #20
2c8c4     A7 12 02 FB | 	rdlong	arg01, fp
2c8c8     40 12 62 FD | 	dirl	arg01
2c8cc     09 15 02 FC | 	wrpin	arg02, arg01
2c8d0     09 4F 18 FC | 	wxpin	#39, arg01
2c8d4     09 01 28 FC | 	wypin	#0, arg01
2c8d8     41 12 62 FD | 	dirh	arg01
2c8dc     28 4E 85 F1 | 	sub	fp, #40
2c8e0     A7 12 02 F6 | 	mov	arg01, fp
2c8e4     14 4E 85 F1 | 	sub	fp, #20
2c8e8     0A 14 06 F6 | 	mov	arg02, #10
2c8ec     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1185
2c8f0     00 12 06 F6 | 	mov	arg01, #0
2c8f4     00 14 06 F6 | 	mov	arg02, #0
2c8f8     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2c8fc     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1195
2c900     64 12 06 F6 | 	mov	arg01, #100
2c904     E0 93 BF FD | 	call	#__system___waitus
2c908     14 4E 05 F1 | 	add	fp, #20
2c90c     A7 12 02 F6 | 	mov	arg01, fp
2c910     14 4E 85 F1 | 	sub	fp, #20
2c914     0A 14 06 F6 | 	mov	arg02, #10
2c918     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1185
2c91c     0C 4E 05 F1 | 	add	fp, #12
2c920     A7 00 48 FC | 	wrbyte	#0, fp
2c924     0C 4E 85 F1 | 	sub	fp, #12
2c928     00 12 06 F6 | 	mov	arg01, #0
2c92c     00 14 06 F6 | 	mov	arg02, #0
2c930     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2c934     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2c938     01 18 0E F2 | 	cmp	arg04, #1 wz
2c93c     B8 03 90 5D |  if_ne	jmp	#LR__4397
2c940     08 12 06 F6 | 	mov	arg01, #8
2c944     AA 15 06 F6 | 	mov	arg02, #426
2c948     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2c94c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2c950     01 FA 0D F2 | 	cmp	result1, #1 wz
2c954     98 01 90 5D |  if_ne	jmp	#LR__4383
2c958     14 4E 05 F1 | 	add	fp, #20
2c95c     A7 12 02 F6 | 	mov	arg01, fp
2c960     14 4E 85 F1 | 	sub	fp, #20
2c964     04 14 06 F6 | 	mov	arg02, #4
2c968     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1185
2c96c     16 4E 05 F1 | 	add	fp, #22
2c970     A7 2C C2 FA | 	rdbyte	local04, fp
2c974     16 4E 85 F1 | 	sub	fp, #22
2c978     01 2C 0E F2 | 	cmp	local04, #1 wz
2c97c     17 4E 05 A1 |  if_e	add	fp, #23
2c980     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2c984     17 4E 85 A1 |  if_e	sub	fp, #23
2c988     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2c98c     68 03 90 5D |  if_ne	jmp	#LR__4396
2c990                 | ' 				for (tmr = 1000; tmr; tmr--) {
2c990     18 4E 05 F1 | 	add	fp, #24
2c994     01 00 80 FF 
2c998     A7 D0 6B FC | 	wrlong	##1000, fp
2c99c     18 4E 85 F1 | 	sub	fp, #24
2c9a0                 | LR__4380
2c9a0     18 4E 05 F1 | 	add	fp, #24
2c9a4     A7 26 0A FB | 	rdlong	local01, fp wz
2c9a8     18 4E 85 F1 | 	sub	fp, #24
2c9ac     3C 00 90 AD |  if_e	jmp	#LR__4381
2c9b0     A9 12 06 F6 | 	mov	arg01, #169
2c9b4     1E 14 C6 F9 | 	decod	arg02, #30
2c9b8     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2c9bc     FD 2C 02 F6 | 	mov	local04, result1
2c9c0     07 2C 4E F7 | 	zerox	local04, #7 wz
2c9c4     24 00 90 AD |  if_e	jmp	#LR__4381
2c9c8     01 00 00 FF 
2c9cc     E8 13 06 F6 | 	mov	arg01, ##1000
2c9d0     14 93 BF FD | 	call	#__system___waitus
2c9d4     18 4E 05 F1 | 	add	fp, #24
2c9d8     A7 2C 02 FB | 	rdlong	local04, fp
2c9dc     01 2C 86 F1 | 	sub	local04, #1
2c9e0     A7 2C 62 FC | 	wrlong	local04, fp
2c9e4     18 4E 85 F1 | 	sub	fp, #24
2c9e8     B4 FF 9F FD | 	jmp	#LR__4380
2c9ec                 | LR__4381
2c9ec     18 4E 05 F1 | 	add	fp, #24
2c9f0     A7 2C 0A FB | 	rdlong	local04, fp wz
2c9f4     18 4E 85 F1 | 	sub	fp, #24
2c9f8     4C 00 90 AD |  if_e	jmp	#LR__4382
2c9fc     3A 12 06 F6 | 	mov	arg01, #58
2ca00     00 14 06 F6 | 	mov	arg02, #0
2ca04     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2ca08     FD 2A 02 F6 | 	mov	local03, result1
2ca0c     07 2A 4E F7 | 	zerox	local03, #7 wz
2ca10     34 00 90 5D |  if_ne	jmp	#LR__4382
2ca14     14 4E 05 F1 | 	add	fp, #20
2ca18     A7 12 02 F6 | 	mov	arg01, fp
2ca1c     14 4E 85 F1 | 	sub	fp, #20
2ca20     04 14 06 F6 | 	mov	arg02, #4
2ca24     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1185
2ca28     14 4E 05 F1 | 	add	fp, #20
2ca2c     A7 26 C2 FA | 	rdbyte	local01, fp
2ca30     40 26 CE F7 | 	test	local01, #64 wz
2ca34     0C 2C 06 56 |  if_ne	mov	local04, #12
2ca38     04 2C 06 A6 |  if_e	mov	local04, #4
2ca3c     08 4E 85 F1 | 	sub	fp, #8
2ca40     A7 2C 42 FC | 	wrbyte	local04, fp
2ca44     0C 4E 85 F1 | 	sub	fp, #12
2ca48                 | LR__4382
2ca48     14 2C 06 FB | 	rdlong	local04, #20
2ca4c     18 4E 05 F1 | 	add	fp, #24
2ca50     A7 2C 62 FC | 	wrlong	local04, fp
2ca54     0C 4E 05 F1 | 	add	fp, #12
2ca58     A7 2C 02 FB | 	rdlong	local04, fp
2ca5c     1B 2C 26 F4 | 	bith	local04, #27
2ca60     A7 2C 62 FC | 	wrlong	local04, fp
2ca64     0C 4E 85 F1 | 	sub	fp, #12
2ca68     A7 2C 02 FB | 	rdlong	local04, fp
2ca6c     18 4E 85 F1 | 	sub	fp, #24
2ca70     68 78 04 FF 
2ca74     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2ca78     1C 4E 05 C1 |  if_b	add	fp, #28
2ca7c     00 01 80 CF 
2ca80     A7 08 68 CC |  if_b	wrlong	##131076, fp
2ca84     1C 4E 85 C1 |  if_b	sub	fp, #28
2ca88     6C 02 90 CD |  if_b	jmp	#LR__4396
2ca8c     18 4E 05 F1 | 	add	fp, #24
2ca90     A7 2C 02 FB | 	rdlong	local04, fp
2ca94     18 4E 85 F1 | 	sub	fp, #24
2ca98     E1 F5 05 FF 
2ca9c     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2caa0     1C 4E 05 C1 |  if_b	add	fp, #28
2caa4     00 01 80 CF 
2caa8     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2caac     1C 4E 85 C1 |  if_b	sub	fp, #28
2cab0     44 02 90 CD |  if_b	jmp	#LR__4396
2cab4     18 4E 05 F1 | 	add	fp, #24
2cab8     A7 2C 02 FB | 	rdlong	local04, fp
2cabc     18 4E 85 F1 | 	sub	fp, #24
2cac0     3B 58 08 FF 
2cac4     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2cac8     1C 4E 05 C1 |  if_b	add	fp, #28
2cacc     00 01 80 CF 
2cad0     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2cad4     1C 4E 85 C1 |  if_b	sub	fp, #28
2cad8     1C 02 90 CD |  if_b	jmp	#LR__4396
2cadc     1C 4E 05 F1 | 	add	fp, #28
2cae0     80 01 80 FF 
2cae4     A7 10 68 FC | 	wrlong	##196616, fp
2cae8     1C 4E 85 F1 | 	sub	fp, #28
2caec     08 02 90 FD | 	jmp	#LR__4396
2caf0                 | LR__4383
2caf0     A9 12 06 F6 | 	mov	arg01, #169
2caf4     00 14 06 F6 | 	mov	arg02, #0
2caf8     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2cafc     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2cb00     02 2C 16 F2 | 	cmp	local04, #2 wc
2cb04     18 00 90 3D |  if_ae	jmp	#LR__4384
2cb08     0C 4E 05 F1 | 	add	fp, #12
2cb0c     A7 04 48 FC | 	wrbyte	#2, fp
2cb10     04 4E 05 F1 | 	add	fp, #4
2cb14     A7 52 49 FC | 	wrbyte	#169, fp
2cb18     10 4E 85 F1 | 	sub	fp, #16
2cb1c     14 00 90 FD | 	jmp	#LR__4385
2cb20                 | LR__4384
2cb20     0C 4E 05 F1 | 	add	fp, #12
2cb24     A7 02 48 FC | 	wrbyte	#1, fp
2cb28     04 4E 05 F1 | 	add	fp, #4
2cb2c     A7 02 48 FC | 	wrbyte	#1, fp
2cb30     10 4E 85 F1 | 	sub	fp, #16
2cb34                 | LR__4385
2cb34                 | ' 				ty =  0x01 ; cmd =  (1) ;
2cb34                 | ' 			}
2cb34                 | ' 			for (tmr = 1000; tmr; tmr--) {
2cb34     18 4E 05 F1 | 	add	fp, #24
2cb38     01 00 80 FF 
2cb3c     A7 D0 6B FC | 	wrlong	##1000, fp
2cb40     18 4E 85 F1 | 	sub	fp, #24
2cb44                 | LR__4386
2cb44     18 4E 05 F1 | 	add	fp, #24
2cb48     A7 2A 0A FB | 	rdlong	local03, fp wz
2cb4c     18 4E 85 F1 | 	sub	fp, #24
2cb50     44 00 90 AD |  if_e	jmp	#LR__4387
2cb54     10 4E 05 F1 | 	add	fp, #16
2cb58     A7 12 C2 FA | 	rdbyte	arg01, fp
2cb5c     10 4E 85 F1 | 	sub	fp, #16
2cb60     00 14 06 F6 | 	mov	arg02, #0
2cb64     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2cb68     FD 2C 02 F6 | 	mov	local04, result1
2cb6c     07 2C 4E F7 | 	zerox	local04, #7 wz
2cb70     24 00 90 AD |  if_e	jmp	#LR__4387
2cb74     01 00 00 FF 
2cb78     E8 13 06 F6 | 	mov	arg01, ##1000
2cb7c     68 91 BF FD | 	call	#__system___waitus
2cb80     18 4E 05 F1 | 	add	fp, #24
2cb84     A7 2C 02 FB | 	rdlong	local04, fp
2cb88     01 2C 86 F1 | 	sub	local04, #1
2cb8c     A7 2C 62 FC | 	wrlong	local04, fp
2cb90     18 4E 85 F1 | 	sub	fp, #24
2cb94     AC FF 9F FD | 	jmp	#LR__4386
2cb98                 | LR__4387
2cb98     18 4E 05 F1 | 	add	fp, #24
2cb9c     A7 2C 0A FB | 	rdlong	local04, fp wz
2cba0     18 4E 85 F1 | 	sub	fp, #24
2cba4     14 00 90 AD |  if_e	jmp	#LR__4388
2cba8     10 12 06 F6 | 	mov	arg01, #16
2cbac     09 14 C6 F9 | 	decod	arg02, #9
2cbb0     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2cbb4     07 FA 4D F7 | 	zerox	result1, #7 wz
2cbb8     0C 00 90 AD |  if_e	jmp	#LR__4389
2cbbc                 | LR__4388
2cbbc     0C 4E 05 F1 | 	add	fp, #12
2cbc0     A7 00 48 FC | 	wrbyte	#0, fp
2cbc4     0C 4E 85 F1 | 	sub	fp, #12
2cbc8                 | LR__4389
2cbc8     14 2C 06 FB | 	rdlong	local04, #20
2cbcc     18 4E 05 F1 | 	add	fp, #24
2cbd0     A7 2C 62 FC | 	wrlong	local04, fp
2cbd4     18 4E 85 F1 | 	sub	fp, #24
2cbd8     F0 FA 02 FF 
2cbdc     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2cbe0     18 00 90 3D |  if_ae	jmp	#LR__4390
2cbe4     24 4E 05 F1 | 	add	fp, #36
2cbe8     A7 2C 02 FB | 	rdlong	local04, fp
2cbec     1B 2C 26 F4 | 	bith	local04, #27
2cbf0     A7 2C 62 FC | 	wrlong	local04, fp
2cbf4     24 4E 85 F1 | 	sub	fp, #36
2cbf8     2C 00 90 FD | 	jmp	#LR__4391
2cbfc                 | LR__4390
2cbfc     18 4E 05 F1 | 	add	fp, #24
2cc00     A7 2C 02 FB | 	rdlong	local04, fp
2cc04     18 4E 85 F1 | 	sub	fp, #24
2cc08     E1 F5 05 FF 
2cc0c     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2cc10     24 4E 05 C1 |  if_b	add	fp, #36
2cc14     A7 2C 02 CB |  if_b	rdlong	local04, fp
2cc18     80 00 04 CF 
2cc1c     00 2C 46 C5 |  if_b	or	local04, ##134283264
2cc20     A7 2C 62 CC |  if_b	wrlong	local04, fp
2cc24     24 4E 85 C1 |  if_b	sub	fp, #36
2cc28                 | LR__4391
2cc28     18 4E 05 F1 | 	add	fp, #24
2cc2c     A7 2C 02 FB | 	rdlong	local04, fp
2cc30     18 4E 85 F1 | 	sub	fp, #24
2cc34     F0 FA 02 FF 
2cc38     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2cc3c     1C 4E 05 C1 |  if_b	add	fp, #28
2cc40     00 01 80 CF 
2cc44     A7 08 68 CC |  if_b	wrlong	##131076, fp
2cc48     1C 4E 85 C1 |  if_b	sub	fp, #28
2cc4c     A8 00 90 CD |  if_b	jmp	#LR__4395
2cc50     18 4E 05 F1 | 	add	fp, #24
2cc54     A7 2C 02 FB | 	rdlong	local04, fp
2cc58     18 4E 85 F1 | 	sub	fp, #24
2cc5c     68 78 04 FF 
2cc60     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2cc64     1C 4E 05 C1 |  if_b	add	fp, #28
2cc68     80 01 80 CF 
2cc6c     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2cc70     1C 4E 85 C1 |  if_b	sub	fp, #28
2cc74     80 00 90 CD |  if_b	jmp	#LR__4394
2cc78     18 4E 05 F1 | 	add	fp, #24
2cc7c     A7 2C 02 FB | 	rdlong	local04, fp
2cc80     18 4E 85 F1 | 	sub	fp, #24
2cc84     E1 F5 05 FF 
2cc88     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2cc8c     1C 4E 05 C1 |  if_b	add	fp, #28
2cc90     00 02 80 CF 
2cc94     A7 10 68 CC |  if_b	wrlong	##262152, fp
2cc98     1C 4E 85 C1 |  if_b	sub	fp, #28
2cc9c     58 00 90 CD |  if_b	jmp	#LR__4393
2cca0     18 4E 05 F1 | 	add	fp, #24
2cca4     A7 2C 02 FB | 	rdlong	local04, fp
2cca8     18 4E 85 F1 | 	sub	fp, #24
2ccac     59 73 07 FF 
2ccb0     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2ccb4     1C 4E 05 C1 |  if_b	add	fp, #28
2ccb8     80 02 80 CF 
2ccbc     A7 14 68 CC |  if_b	wrlong	##327690, fp
2ccc0     1C 4E 85 C1 |  if_b	sub	fp, #28
2ccc4     30 00 90 CD |  if_b	jmp	#LR__4392
2ccc8     18 4E 05 F1 | 	add	fp, #24
2cccc     A7 2C 02 FB | 	rdlong	local04, fp
2ccd0     18 4E 85 F1 | 	sub	fp, #24
2ccd4     D1 F0 08 FF 
2ccd8     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2ccdc     1C 4E 05 C1 |  if_b	add	fp, #28
2cce0     00 03 80 CF 
2cce4     A7 18 68 CC |  if_b	wrlong	##393228, fp
2cce8     1C 4E 85 F3 | 	sumc	fp, #28
2ccec     80 03 80 3F 
2ccf0     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2ccf4     1C 4E 85 31 |  if_ae	sub	fp, #28
2ccf8                 | LR__4392
2ccf8                 | LR__4393
2ccf8                 | LR__4394
2ccf8                 | LR__4395
2ccf8                 | LR__4396
2ccf8                 | LR__4397
2ccf8     0C 4E 05 F1 | 	add	fp, #12
2ccfc     A7 2C C2 FA | 	rdbyte	local04, fp
2cd00     01 00 00 FF 
2cd04     21 E4 05 F1 | 	add	objptr, ##545
2cd08     F2 2C 42 FC | 	wrbyte	local04, objptr
2cd0c     A7 26 CA FA | 	rdbyte	local01, fp wz
2cd10     00 2C 06 56 |  if_ne	mov	local04, #0
2cd14     01 2C 06 A6 |  if_e	mov	local04, #1
2cd18     20 4E 05 F1 | 	add	fp, #32
2cd1c     A7 2C 42 FC | 	wrbyte	local04, fp
2cd20     A7 2C C2 FA | 	rdbyte	local04, fp
2cd24     2C 4E 85 F1 | 	sub	fp, #44
2cd28     01 E4 85 F1 | 	sub	objptr, #1
2cd2c     F2 2C 42 FC | 	wrbyte	local04, objptr
2cd30     01 00 00 FF 
2cd34     20 E4 85 F1 | 	sub	objptr, ##544
2cd38     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1195
2cd3c     34 4E 05 F1 | 	add	fp, #52
2cd40     A7 12 02 FB | 	rdlong	arg01, fp
2cd44     18 4E 85 F1 | 	sub	fp, #24
2cd48     A7 14 02 FB | 	rdlong	arg02, fp
2cd4c     09 15 12 FC | 	wxpin	arg02, arg01
2cd50     1C 4E 05 F1 | 	add	fp, #28
2cd54     A7 12 02 FB | 	rdlong	arg01, fp
2cd58     14 4E 85 F1 | 	sub	fp, #20
2cd5c     A7 14 02 FB | 	rdlong	arg02, fp
2cd60     09 15 02 FC | 	wrpin	arg02, arg01
2cd64                 | ' 
2cd64                 | ' 		}
2cd64                 | ' 	}
2cd64                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2cd64                 | ' 	CardType = ty;
2cd64                 | ' 	s = ty ? 0 :  0x01 ;
2cd64                 | ' 	Stat = s;
2cd64                 | ' 
2cd64                 | ' 	deselect();
2cd64                 | ' 
2cd64                 | ' 
2cd64                 | ' 	_wxpin( PIN_CLK, ck_div );
2cd64                 | ' 	_wrpin( PIN_DI, spm_tx );
2cd64                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2cd64                 | ' 	return s;
2cd64     08 4E 05 F1 | 	add	fp, #8
2cd68     A7 FA C1 FA | 	rdbyte	result1, fp
2cd6c     2C 4E 85 F1 | 	sub	fp, #44
2cd70                 | LR__4398
2cd70     A7 F0 03 F6 | 	mov	ptra, fp
2cd74     B2 00 A0 FD | 	call	#popregs_
2cd78                 | _fatfs_cc_disk_initialize_ret
2cd78     2D 00 64 FD | 	ret
2cd7c                 | 
2cd7c                 | _fatfs_cc_disk_read
2cd7c     05 4A 05 F6 | 	mov	COUNT_, #5
2cd80     A8 00 A0 FD | 	call	#pushregs_
2cd84     0A 27 02 F6 | 	mov	local01, arg02
2cd88     0B 29 02 F6 | 	mov	local02, arg03
2cd8c     0C 2B 02 F6 | 	mov	local03, arg04
2cd90     00 12 0E F2 | 	cmp	arg01, #0 wz
2cd94     01 FA 05 56 |  if_ne	mov	result1, #1
2cd98                 | ' 
2cd98                 | ' 	return Stat;
2cd98     01 00 00 AF 
2cd9c     20 E4 05 A1 |  if_e	add	objptr, ##544
2cda0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2cda4     01 00 00 AF 
2cda8     20 E4 85 A1 |  if_e	sub	objptr, ##544
2cdac     FD FA E1 F8 | 	getbyte	result1, result1, #0
2cdb0     01 FA CD F7 | 	test	result1, #1 wz
2cdb4     03 FA 05 56 |  if_ne	mov	result1, #3
2cdb8     84 00 90 5D |  if_ne	jmp	#LR__4402
2cdbc     01 00 00 FF 
2cdc0     21 E4 05 F1 | 	add	objptr, ##545
2cdc4     F2 2C C2 FA | 	rdbyte	local04, objptr
2cdc8     01 00 00 FF 
2cdcc     21 E4 85 F1 | 	sub	objptr, ##545
2cdd0     08 2C CE F7 | 	test	local04, #8 wz
2cdd4     09 28 66 A0 |  if_e	shl	local02, #9
2cdd8     02 2A 16 F2 | 	cmp	local03, #2 wc
2cddc     12 2C 06 36 |  if_ae	mov	local04, #18
2cde0     11 2C 06 C6 |  if_b	mov	local04, #17
2cde4     14 15 02 F6 | 	mov	arg02, local02
2cde8     16 13 02 F6 | 	mov	arg01, local04
2cdec     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2cdf0     FD 2E 02 F6 | 	mov	local05, result1
2cdf4     07 2E 4E F7 | 	zerox	local05, #7 wz
2cdf8     30 00 90 5D |  if_ne	jmp	#LR__4401
2cdfc                 | ' 		do {
2cdfc                 | LR__4400
2cdfc     13 13 02 F6 | 	mov	arg01, local01
2ce00     09 14 C6 F9 | 	decod	arg02, #9
2ce04     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1203
2ce08     00 FA 0D F2 | 	cmp	result1, #0 wz
2ce0c     01 00 00 5F 
2ce10     00 26 06 51 |  if_ne	add	local01, ##512
2ce14     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4400
2ce18     16 2D E2 F8 | 	getbyte	local04, local04, #0
2ce1c     12 2C 0E F2 | 	cmp	local04, #18 wz
2ce20     0C 12 06 A6 |  if_e	mov	arg01, #12
2ce24     00 14 06 A6 |  if_e	mov	arg02, #0
2ce28     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1209
2ce2c                 | LR__4401
2ce2c     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1195
2ce30                 | ' 	}
2ce30                 | ' 	deselect();
2ce30                 | ' 
2ce30                 | ' 	return count ? RES_ERROR : RES_OK;
2ce30     00 2A 0E F2 | 	cmp	local03, #0 wz
2ce34     01 2E 06 56 |  if_ne	mov	local05, #1
2ce38     00 2E 06 A6 |  if_e	mov	local05, #0
2ce3c     17 FB 01 F6 | 	mov	result1, local05
2ce40                 | LR__4402
2ce40     A7 F0 03 F6 | 	mov	ptra, fp
2ce44     B2 00 A0 FD | 	call	#popregs_
2ce48                 | _fatfs_cc_disk_read_ret
2ce48     2D 00 64 FD | 	ret
2ce4c                 | 
2ce4c                 | _fatfs_cc_disk_write
2ce4c     04 4A 05 F6 | 	mov	COUNT_, #4
2ce50     A8 00 A0 FD | 	call	#pushregs_
2ce54     0A 27 02 F6 | 	mov	local01, arg02
2ce58     0C 29 02 F6 | 	mov	local02, arg04
2ce5c     0B 2B 02 F6 | 	mov	local03, arg03
2ce60     00 12 0E F2 | 	cmp	arg01, #0 wz
2ce64     01 FA 05 56 |  if_ne	mov	result1, #1
2ce68                 | ' 
2ce68                 | ' 	return Stat;
2ce68     01 00 00 AF 
2ce6c     20 E4 05 A1 |  if_e	add	objptr, ##544
2ce70     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2ce74     01 00 00 AF 
2ce78     20 E4 85 A1 |  if_e	sub	objptr, ##544
2ce7c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2ce80     01 FA CD F7 | 	test	result1, #1 wz
2ce84     03 FA 05 56 |  if_ne	mov	result1, #3
2ce88     D4 00 90 5D |  if_ne	jmp	#LR__4414
2ce8c     01 00 00 FF 
2ce90     21 E4 05 F1 | 	add	objptr, ##545
2ce94     F2 16 C2 FA | 	rdbyte	arg03, objptr
2ce98     01 00 00 FF 
2ce9c     21 E4 85 F1 | 	sub	objptr, ##545
2cea0     08 16 CE F7 | 	test	arg03, #8 wz
2cea4     09 2A 66 A0 |  if_e	shl	local03, #9
2cea8     01 28 0E F2 | 	cmp	local02, #1 wz
2ceac     30 00 90 5D |  if_ne	jmp	#LR__4410
2ceb0     18 12 06 F6 | 	mov	arg01, #24
2ceb4     15 15 02 F6 | 	mov	arg02, local03
2ceb8     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2cebc     FD 2C 02 F6 | 	mov	local04, result1
2cec0     07 2C 4E F7 | 	zerox	local04, #7 wz
2cec4     84 00 90 5D |  if_ne	jmp	#LR__4413
2cec8     13 13 02 F6 | 	mov	arg01, local01
2cecc     FE 14 06 F6 | 	mov	arg02, #254
2ced0     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1205
2ced4     00 FA 0D F2 | 	cmp	result1, #0 wz
2ced8     00 28 06 56 |  if_ne	mov	local02, #0
2cedc     6C 00 90 FD | 	jmp	#LR__4413
2cee0                 | LR__4410
2cee0     01 00 00 FF 
2cee4     21 E4 05 F1 | 	add	objptr, ##545
2cee8     F2 2C C2 FA | 	rdbyte	local04, objptr
2ceec     01 00 00 FF 
2cef0     21 E4 85 F1 | 	sub	objptr, ##545
2cef4     06 2C CE F7 | 	test	local04, #6 wz
2cef8     97 12 06 56 |  if_ne	mov	arg01, #151
2cefc     14 15 02 56 |  if_ne	mov	arg02, local02
2cf00     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1209
2cf04     15 15 02 F6 | 	mov	arg02, local03
2cf08     19 12 06 F6 | 	mov	arg01, #25
2cf0c     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2cf10     FD 2C 02 F6 | 	mov	local04, result1
2cf14     07 2C 4E F7 | 	zerox	local04, #7 wz
2cf18     30 00 90 5D |  if_ne	jmp	#LR__4412
2cf1c                 | ' 			do {
2cf1c                 | LR__4411
2cf1c     13 13 02 F6 | 	mov	arg01, local01
2cf20     FC 14 06 F6 | 	mov	arg02, #252
2cf24     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1205
2cf28     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf2c     01 00 00 5F 
2cf30     00 26 06 51 |  if_ne	add	local01, ##512
2cf34     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4411
2cf38     00 12 06 F6 | 	mov	arg01, #0
2cf3c     FD 14 06 F6 | 	mov	arg02, #253
2cf40     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1205
2cf44     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf48     01 28 06 A6 |  if_e	mov	local02, #1
2cf4c                 | LR__4412
2cf4c                 | LR__4413
2cf4c     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1195
2cf50                 | ' 				count = 1;
2cf50                 | ' 		}
2cf50                 | ' 	}
2cf50                 | ' 	deselect();
2cf50                 | ' 
2cf50                 | ' 	return count ? RES_ERROR : RES_OK;
2cf50     00 28 0E F2 | 	cmp	local02, #0 wz
2cf54     01 2C 06 56 |  if_ne	mov	local04, #1
2cf58     00 2C 06 A6 |  if_e	mov	local04, #0
2cf5c     16 FB 01 F6 | 	mov	result1, local04
2cf60                 | LR__4414
2cf60     A7 F0 03 F6 | 	mov	ptra, fp
2cf64     B2 00 A0 FD | 	call	#popregs_
2cf68                 | _fatfs_cc_disk_write_ret
2cf68     2D 00 64 FD | 	ret
2cf6c                 | 
2cf6c                 | _fatfs_cc_disk_ioctl
2cf6c     01 4A 05 F6 | 	mov	COUNT_, #1
2cf70     A8 00 A0 FD | 	call	#pushregs_
2cf74     30 F0 07 F1 | 	add	ptra, #48
2cf78     04 4E 05 F1 | 	add	fp, #4
2cf7c     A7 12 42 FC | 	wrbyte	arg01, fp
2cf80     04 4E 05 F1 | 	add	fp, #4
2cf84     A7 14 42 FC | 	wrbyte	arg02, fp
2cf88     04 4E 05 F1 | 	add	fp, #4
2cf8c     A7 16 62 FC | 	wrlong	arg03, fp
2cf90     08 4E 85 F1 | 	sub	fp, #8
2cf94     A7 12 CA FA | 	rdbyte	arg01, fp wz
2cf98     04 4E 85 F1 | 	sub	fp, #4
2cf9c     01 FA 05 56 |  if_ne	mov	result1, #1
2cfa0                 | ' 
2cfa0                 | ' 	return Stat;
2cfa0     01 00 00 AF 
2cfa4     20 E4 05 A1 |  if_e	add	objptr, ##544
2cfa8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2cfac     01 00 00 AF 
2cfb0     20 E4 85 A1 |  if_e	sub	objptr, ##544
2cfb4     FD FA E1 F8 | 	getbyte	result1, result1, #0
2cfb8     01 FA CD F7 | 	test	result1, #1 wz
2cfbc     03 FA 05 56 |  if_ne	mov	result1, #3
2cfc0     E4 01 90 5D |  if_ne	jmp	#LR__4428
2cfc4     10 4E 05 F1 | 	add	fp, #16
2cfc8     A7 02 68 FC | 	wrlong	#1, fp
2cfcc                 | ' 
2cfcc                 | ' 	res = RES_ERROR;
2cfcc                 | ' 	switch (ctrl) {
2cfcc     08 4E 85 F1 | 	sub	fp, #8
2cfd0     A7 26 C2 FA | 	rdbyte	local01, fp
2cfd4     08 4E 85 F1 | 	sub	fp, #8
2cfd8     04 26 26 F3 | 	fle	local01, #4
2cfdc     30 26 62 FD | 	jmprel	local01
2cfe0                 | LR__4420
2cfe0     10 00 90 FD | 	jmp	#LR__4421
2cfe4     24 00 90 FD | 	jmp	#LR__4422
2cfe8     A0 01 90 FD | 	jmp	#LR__4426
2cfec     80 01 90 FD | 	jmp	#LR__4425
2cff0     98 01 90 FD | 	jmp	#LR__4426
2cff4                 | LR__4421
2cff4     B4 79 B0 FD | 	call	#_fatfs_cc_select_1199
2cff8     00 FA 0D F2 | 	cmp	result1, #0 wz
2cffc     10 4E 05 51 |  if_ne	add	fp, #16
2d000     A7 00 68 5C |  if_ne	wrlong	#0, fp
2d004     10 4E 85 51 |  if_ne	sub	fp, #16
2d008                 | ' 			break;
2d008     8C 01 90 FD | 	jmp	#LR__4427
2d00c                 | LR__4422
2d00c     09 12 06 F6 | 	mov	arg01, #9
2d010     00 14 06 F6 | 	mov	arg02, #0
2d014     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2d018     FD 26 02 F6 | 	mov	local01, result1
2d01c     07 26 4E F7 | 	zerox	local01, #7 wz
2d020     74 01 90 5D |  if_ne	jmp	#LR__4427
2d024     18 4E 05 F1 | 	add	fp, #24
2d028     A7 12 02 F6 | 	mov	arg01, fp
2d02c     18 4E 85 F1 | 	sub	fp, #24
2d030     10 14 06 F6 | 	mov	arg02, #16
2d034     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1203
2d038     00 FA 0D F2 | 	cmp	result1, #0 wz
2d03c     58 01 90 AD |  if_e	jmp	#LR__4427
2d040     18 4E 05 F1 | 	add	fp, #24
2d044     A7 26 C2 FA | 	rdbyte	local01, fp
2d048     18 4E 85 F1 | 	sub	fp, #24
2d04c     06 26 46 F0 | 	shr	local01, #6
2d050     01 26 0E F2 | 	cmp	local01, #1 wz
2d054     5C 00 90 5D |  if_ne	jmp	#LR__4423
2d058     21 4E 05 F1 | 	add	fp, #33
2d05c     A7 26 C2 FA | 	rdbyte	local01, fp
2d060     01 4E 85 F1 | 	sub	fp, #1
2d064     A7 FA C1 FA | 	rdbyte	result1, fp
2d068     FD FA 31 F9 | 	getword	result1, result1, #0
2d06c     08 FA 65 F0 | 	shl	result1, #8
2d070     FD 26 02 F1 | 	add	local01, result1
2d074     01 4E 85 F1 | 	sub	fp, #1
2d078     A7 FA C1 FA | 	rdbyte	result1, fp
2d07c     3F FA 05 F5 | 	and	result1, #63
2d080     10 FA 65 F0 | 	shl	result1, #16
2d084     FD 26 02 F1 | 	add	local01, result1
2d088     01 26 06 F1 | 	add	local01, #1
2d08c     09 4E 05 F1 | 	add	fp, #9
2d090     A7 26 62 FC | 	wrlong	local01, fp
2d094     1C 4E 85 F1 | 	sub	fp, #28
2d098     A7 26 02 FB | 	rdlong	local01, fp
2d09c     1C 4E 05 F1 | 	add	fp, #28
2d0a0     A7 FA 01 FB | 	rdlong	result1, fp
2d0a4     28 4E 85 F1 | 	sub	fp, #40
2d0a8     0A FA 65 F0 | 	shl	result1, #10
2d0ac     13 FB 61 FC | 	wrlong	result1, local01
2d0b0     AC 00 90 FD | 	jmp	#LR__4424
2d0b4                 | LR__4423
2d0b4     1D 4E 05 F1 | 	add	fp, #29
2d0b8     A7 26 C2 FA | 	rdbyte	local01, fp
2d0bc     13 27 42 F8 | 	getnib	local01, local01, #0
2d0c0     05 4E 05 F1 | 	add	fp, #5
2d0c4     A7 FA C1 FA | 	rdbyte	result1, fp
2d0c8     80 FA 05 F5 | 	and	result1, #128
2d0cc     07 FA C5 F0 | 	sar	result1, #7
2d0d0     FD 26 02 F1 | 	add	local01, result1
2d0d4     01 4E 85 F1 | 	sub	fp, #1
2d0d8     A7 FA C1 FA | 	rdbyte	result1, fp
2d0dc     03 FA 05 F5 | 	and	result1, #3
2d0e0     01 FA 65 F0 | 	shl	result1, #1
2d0e4     FD 26 02 F1 | 	add	local01, result1
2d0e8     02 26 06 F1 | 	add	local01, #2
2d0ec     0D 4E 85 F1 | 	sub	fp, #13
2d0f0     A7 26 42 FC | 	wrbyte	local01, fp
2d0f4     0C 4E 05 F1 | 	add	fp, #12
2d0f8     A7 26 C2 FA | 	rdbyte	local01, fp
2d0fc     06 26 46 F0 | 	shr	local01, #6
2d100     01 4E 85 F1 | 	sub	fp, #1
2d104     A7 FA C1 FA | 	rdbyte	result1, fp
2d108     FD FA 31 F9 | 	getword	result1, result1, #0
2d10c     02 FA 65 F0 | 	shl	result1, #2
2d110     FD 26 02 F1 | 	add	local01, result1
2d114     01 4E 85 F1 | 	sub	fp, #1
2d118     A7 FA C1 FA | 	rdbyte	result1, fp
2d11c     03 FA 05 F5 | 	and	result1, #3
2d120     FD FA 31 F9 | 	getword	result1, result1, #0
2d124     0A FA 65 F0 | 	shl	result1, #10
2d128     FD 26 02 F1 | 	add	local01, result1
2d12c     01 26 06 F1 | 	add	local01, #1
2d130     0A 4E 05 F1 | 	add	fp, #10
2d134     A7 26 62 FC | 	wrlong	local01, fp
2d138     1C 4E 85 F1 | 	sub	fp, #28
2d13c     A7 26 02 FB | 	rdlong	local01, fp
2d140     1C 4E 05 F1 | 	add	fp, #28
2d144     A7 FA 01 FB | 	rdlong	result1, fp
2d148     14 4E 85 F1 | 	sub	fp, #20
2d14c     A7 16 C2 FA | 	rdbyte	arg03, fp
2d150     14 4E 85 F1 | 	sub	fp, #20
2d154     09 16 86 F1 | 	sub	arg03, #9
2d158     0B FB 61 F0 | 	shl	result1, arg03
2d15c     13 FB 61 FC | 	wrlong	result1, local01
2d160                 | LR__4424
2d160     10 4E 05 F1 | 	add	fp, #16
2d164     A7 00 68 FC | 	wrlong	#0, fp
2d168     10 4E 85 F1 | 	sub	fp, #16
2d16c                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2d16c                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2d16c                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2d16c                 | ' 				}
2d16c                 | ' 				res = RES_OK;
2d16c                 | ' 			}
2d16c                 | ' 			break;
2d16c     28 00 90 FD | 	jmp	#LR__4427
2d170                 | LR__4425
2d170     0C 4E 05 F1 | 	add	fp, #12
2d174     A7 26 02 FB | 	rdlong	local01, fp
2d178     13 01 69 FC | 	wrlong	#128, local01
2d17c     04 4E 05 F1 | 	add	fp, #4
2d180     A7 00 68 FC | 	wrlong	#0, fp
2d184     10 4E 85 F1 | 	sub	fp, #16
2d188                 | ' 			*(DWORD*)buff = 128;
2d188                 | ' 			res = RES_OK;
2d188                 | ' 			break;
2d188     0C 00 90 FD | 	jmp	#LR__4427
2d18c                 | LR__4426
2d18c     10 4E 05 F1 | 	add	fp, #16
2d190     A7 08 68 FC | 	wrlong	#4, fp
2d194     10 4E 85 F1 | 	sub	fp, #16
2d198                 | LR__4427
2d198     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1195
2d19c                 | ' 			res = RES_PARERR;
2d19c                 | ' 	}
2d19c                 | ' 
2d19c                 | ' 	deselect();
2d19c                 | ' 
2d19c                 | ' 	return res;
2d19c     10 4E 05 F1 | 	add	fp, #16
2d1a0     A7 FA 01 FB | 	rdlong	result1, fp
2d1a4     10 4E 85 F1 | 	sub	fp, #16
2d1a8                 | LR__4428
2d1a8     A7 F0 03 F6 | 	mov	ptra, fp
2d1ac     B2 00 A0 FD | 	call	#popregs_
2d1b0                 | _fatfs_cc_disk_ioctl_ret
2d1b0     2D 00 64 FD | 	ret
2d1b4                 | 
2d1b4                 | _fatfs_cc_disk_setpins
2d1b4     00 12 0E F2 | 	cmp	arg01, #0 wz
2d1b8     01 FA 65 56 |  if_ne	neg	result1, #1
2d1bc     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2d1c0     01 00 00 FF 
2d1c4     10 E4 05 F1 | 	add	objptr, ##528
2d1c8     F2 14 62 FC | 	wrlong	arg02, objptr
2d1cc     04 E4 05 F1 | 	add	objptr, #4
2d1d0     F2 16 62 FC | 	wrlong	arg03, objptr
2d1d4     04 E4 05 F1 | 	add	objptr, #4
2d1d8     F2 18 62 FC | 	wrlong	arg04, objptr
2d1dc     04 E4 05 F1 | 	add	objptr, #4
2d1e0     F2 1A 62 FC | 	wrlong	arg05, objptr
2d1e4     01 00 00 FF 
2d1e8     1C E4 85 F1 | 	sub	objptr, ##540
2d1ec     00 FA 05 F6 | 	mov	result1, #0
2d1f0                 | _fatfs_cc_disk_setpins_ret
2d1f0     2D 00 64 FD | 	ret
2d1f4                 | 
2d1f4                 | _fatfs_cc_tchar2uni
2d1f4     09 01 02 FB | 	rdlong	_var01, arg01
2d1f8     00 03 02 F6 | 	mov	_var02, _var01
2d1fc     01 00 06 F1 | 	add	_var01, #1
2d200     00 05 02 F6 | 	mov	_var03, _var01
2d204     01 07 C2 FA | 	rdbyte	_var04, _var02
2d208     80 06 CE F7 | 	test	_var04, #128 wz
2d20c     E8 00 90 AD |  if_e	jmp	#LR__4437
2d210     03 09 02 F6 | 	mov	_var05, _var04
2d214     E0 08 06 F5 | 	and	_var05, #224
2d218     C0 08 0E F2 | 	cmp	_var05, #192 wz
2d21c     1F 06 06 A5 |  if_e	and	_var04, #31
2d220     01 0A 06 A6 |  if_e	mov	_var06, #1
2d224     34 00 90 AD |  if_e	jmp	#LR__4431
2d228     03 09 02 F6 | 	mov	_var05, _var04
2d22c     F0 08 06 F5 | 	and	_var05, #240
2d230     E0 08 0E F2 | 	cmp	_var05, #224 wz
2d234     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2d238     02 0A 06 A6 |  if_e	mov	_var06, #2
2d23c     1C 00 90 AD |  if_e	jmp	#LR__4430
2d240     03 09 02 F6 | 	mov	_var05, _var04
2d244     F8 08 06 F5 | 	and	_var05, #248
2d248     F0 08 0E F2 | 	cmp	_var05, #240 wz
2d24c     07 06 06 A5 |  if_e	and	_var04, #7
2d250     03 0A 06 A6 |  if_e	mov	_var06, #3
2d254                 | ' 			return 0xFFFFFFFF;
2d254     01 FA 65 56 |  if_ne	neg	result1, #1
2d258     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2d25c                 | LR__4430
2d25c                 | LR__4431
2d25c                 | ' 		}
2d25c                 | ' 		do {
2d25c                 | LR__4432
2d25c     02 0D C2 FA | 	rdbyte	_var07, _var03
2d260     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2d264     C0 08 06 F5 | 	and	_var05, #192
2d268     80 08 0E F2 | 	cmp	_var05, #128 wz
2d26c     01 04 06 F1 | 	add	_var03, #1
2d270     01 FA 65 56 |  if_ne	neg	result1, #1
2d274     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2d278     06 06 66 F0 | 	shl	_var04, #6
2d27c     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2d280     3F 02 06 F5 | 	and	_var02, #63
2d284     01 07 42 F5 | 	or	_var04, _var02
2d288     F4 0B 6E FB | 	djnz	_var06, #LR__4432
2d28c     80 06 16 F2 | 	cmp	_var04, #128 wc
2d290     24 00 90 CD |  if_b	jmp	#LR__4434
2d294     6C 00 00 FF 
2d298     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2d29c     0C 00 90 CD |  if_b	jmp	#LR__4433
2d2a0     70 00 00 FF 
2d2a4     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2d2a8     0C 00 90 CD |  if_b	jmp	#LR__4434
2d2ac                 | LR__4433
2d2ac     80 08 00 FF 
2d2b0     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2d2b4     08 00 90 CD |  if_b	jmp	#LR__4435
2d2b8                 | LR__4434
2d2b8     01 FA 65 F6 | 	neg	result1, #1
2d2bc     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2d2c0                 | LR__4435
2d2c0     80 00 00 FF 
2d2c4     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2d2c8     2C 00 90 CD |  if_b	jmp	#LR__4436
2d2cc     03 03 02 F6 | 	mov	_var02, _var04
2d2d0     80 00 00 FF 
2d2d4     00 02 86 F1 | 	sub	_var02, ##65536
2d2d8     06 02 66 F0 | 	shl	_var02, #6
2d2dc     80 FF 01 FF 
2d2e0     00 02 06 F5 | 	and	_var02, ##67043328
2d2e4     6E 00 6C FF 
2d2e8     00 08 06 F6 | 	mov	_var05, ##-671032320
2d2ec     01 09 42 F5 | 	or	_var05, _var02
2d2f0     09 06 46 F7 | 	zerox	_var04, #9
2d2f4     04 07 42 F5 | 	or	_var04, _var05
2d2f8                 | LR__4436
2d2f8                 | LR__4437
2d2f8     09 05 62 FC | 	wrlong	_var03, arg01
2d2fc                 | ' 	}
2d2fc                 | ' #line 811 "ff.c"
2d2fc                 | ' 	*str = p;
2d2fc                 | ' 	return uc;
2d2fc     03 FB 01 F6 | 	mov	result1, _var04
2d300                 | _fatfs_cc_tchar2uni_ret
2d300     2D 00 64 FD | 	ret
2d304                 | 
2d304                 | _fatfs_cc_put_utf
2d304     80 12 16 F2 | 	cmp	arg01, #128 wc
2d308     18 00 90 3D |  if_ae	jmp	#LR__4440
2d30c     01 16 16 F2 | 	cmp	arg03, #1 wc
2d310     00 FA 05 C6 |  if_b	mov	result1, #0
2d314     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2d318     0A 13 42 FC | 	wrbyte	arg01, arg02
2d31c                 | ' 		*buf = (TCHAR)chr;
2d31c                 | ' 		return 1;
2d31c     01 FA 05 F6 | 	mov	result1, #1
2d320     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2d324                 | LR__4440
2d324     04 00 00 FF 
2d328     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2d32c     40 00 90 3D |  if_ae	jmp	#LR__4441
2d330     02 16 16 F2 | 	cmp	arg03, #2 wc
2d334     00 FA 05 C6 |  if_b	mov	result1, #0
2d338     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2d33c     09 FB 01 F6 | 	mov	result1, arg01
2d340     06 FA 45 F0 | 	shr	result1, #6
2d344     1F FA 05 F5 | 	and	result1, #31
2d348     C0 16 06 F6 | 	mov	arg03, #192
2d34c     FD 16 42 F5 | 	or	arg03, result1
2d350     0A 17 42 FC | 	wrbyte	arg03, arg02
2d354     01 14 06 F1 | 	add	arg02, #1
2d358     3F 12 06 F5 | 	and	arg01, #63
2d35c     80 FA 05 F6 | 	mov	result1, #128
2d360     09 FB 41 F5 | 	or	result1, arg01
2d364     0A FB 41 FC | 	wrbyte	result1, arg02
2d368                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2d368                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2d368                 | ' 		return 2;
2d368     02 FA 05 F6 | 	mov	result1, #2
2d36c     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2d370                 | LR__4441
2d370     80 00 00 FF 
2d374     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2d378     70 00 90 3D |  if_ae	jmp	#LR__4444
2d37c     03 16 16 F2 | 	cmp	arg03, #3 wc
2d380     18 00 90 CD |  if_b	jmp	#LR__4442
2d384     6C 00 00 FF 
2d388     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2d38c     14 00 90 CD |  if_b	jmp	#LR__4443
2d390     70 00 00 FF 
2d394     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2d398     08 00 90 3D |  if_ae	jmp	#LR__4443
2d39c                 | LR__4442
2d39c     00 FA 05 F6 | 	mov	result1, #0
2d3a0     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2d3a4                 | LR__4443
2d3a4     09 FB 59 F8 | 	getnib	result1, arg01, #3
2d3a8     E0 16 06 F6 | 	mov	arg03, #224
2d3ac     FD 16 42 F5 | 	or	arg03, result1
2d3b0     0A 17 42 FC | 	wrbyte	arg03, arg02
2d3b4     01 14 06 F1 | 	add	arg02, #1
2d3b8     09 FB 01 F6 | 	mov	result1, arg01
2d3bc     06 FA 45 F0 | 	shr	result1, #6
2d3c0     3F FA 05 F5 | 	and	result1, #63
2d3c4     80 16 06 F6 | 	mov	arg03, #128
2d3c8     FD 16 42 F5 | 	or	arg03, result1
2d3cc     0A 17 42 FC | 	wrbyte	arg03, arg02
2d3d0     01 14 06 F1 | 	add	arg02, #1
2d3d4     3F 12 06 F5 | 	and	arg01, #63
2d3d8     80 FA 05 F6 | 	mov	result1, #128
2d3dc     09 FB 41 F5 | 	or	result1, arg01
2d3e0     0A FB 41 FC | 	wrbyte	result1, arg02
2d3e4                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2d3e4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2d3e4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2d3e4                 | ' 		return 3;
2d3e4     03 FA 05 F6 | 	mov	result1, #3
2d3e8     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2d3ec                 | LR__4444
2d3ec     04 16 16 F2 | 	cmp	arg03, #4 wc
2d3f0     00 FA 05 C6 |  if_b	mov	result1, #0
2d3f4     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2d3f8     09 01 02 F6 | 	mov	_var01, arg01
2d3fc     E0 01 06 F4 | 	bitl	_var01, #480
2d400     00 00 6C FF 
2d404     00 00 86 F1 | 	sub	_var01, ##-671088640
2d408     06 00 46 F0 | 	shr	_var01, #6
2d40c     09 13 32 F9 | 	getword	arg01, arg01, #0
2d410     6E 00 00 FF 
2d414     00 12 86 F1 | 	sub	arg01, ##56320
2d418     00 08 00 FF 
2d41c     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2d420     02 00 00 CF 
2d424     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2d428     00 FA 05 36 |  if_ae	mov	result1, #0
2d42c     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2d430     09 01 42 F5 | 	or	_var01, arg01
2d434     80 00 00 FF 
2d438     00 00 06 F1 | 	add	_var01, ##65536
2d43c     00 FB 01 F6 | 	mov	result1, _var01
2d440     12 FA 45 F0 | 	shr	result1, #18
2d444     07 FA 05 F5 | 	and	result1, #7
2d448     F0 16 06 F6 | 	mov	arg03, #240
2d44c     FD 16 42 F5 | 	or	arg03, result1
2d450     0A 17 42 FC | 	wrbyte	arg03, arg02
2d454     01 14 06 F1 | 	add	arg02, #1
2d458     00 FB 01 F6 | 	mov	result1, _var01
2d45c     0C FA 45 F0 | 	shr	result1, #12
2d460     3F FA 05 F5 | 	and	result1, #63
2d464     80 16 06 F6 | 	mov	arg03, #128
2d468     FD 16 42 F5 | 	or	arg03, result1
2d46c     0A 17 42 FC | 	wrbyte	arg03, arg02
2d470     01 14 06 F1 | 	add	arg02, #1
2d474     00 FB 01 F6 | 	mov	result1, _var01
2d478     06 FA 45 F0 | 	shr	result1, #6
2d47c     3F FA 05 F5 | 	and	result1, #63
2d480     80 16 06 F6 | 	mov	arg03, #128
2d484     FD 16 42 F5 | 	or	arg03, result1
2d488     0A 17 42 FC | 	wrbyte	arg03, arg02
2d48c     01 14 06 F1 | 	add	arg02, #1
2d490     3F 00 06 F5 | 	and	_var01, #63
2d494     80 FA 05 F6 | 	mov	result1, #128
2d498     00 FB 41 F5 | 	or	result1, _var01
2d49c     0A FB 41 FC | 	wrbyte	result1, arg02
2d4a0                 | ' 	chr = (hc | chr) + 0x10000;
2d4a0                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2d4a0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2d4a0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2d4a0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2d4a0                 | ' 	return 4;
2d4a0     04 FA 05 F6 | 	mov	result1, #4
2d4a4                 | _fatfs_cc_put_utf_ret
2d4a4     2D 00 64 FD | 	ret
2d4a8                 | 
2d4a8                 | _fatfs_cc_sync_window
2d4a8     02 4A 05 F6 | 	mov	COUNT_, #2
2d4ac     A8 00 A0 FD | 	call	#pushregs_
2d4b0     09 27 02 F6 | 	mov	local01, arg01
2d4b4     00 28 06 F6 | 	mov	local02, #0
2d4b8     03 26 06 F1 | 	add	local01, #3
2d4bc     13 FB C9 FA | 	rdbyte	result1, local01 wz
2d4c0     03 26 86 F1 | 	sub	local01, #3
2d4c4     A4 00 90 AD |  if_e	jmp	#LR__4452
2d4c8     01 26 06 F1 | 	add	local01, #1
2d4cc     13 13 C2 FA | 	rdbyte	arg01, local01
2d4d0     33 26 06 F1 | 	add	local01, #51
2d4d4     13 15 02 F6 | 	mov	arg02, local01
2d4d8     04 26 86 F1 | 	sub	local01, #4
2d4dc     13 17 02 FB | 	rdlong	arg03, local01
2d4e0     30 26 86 F1 | 	sub	local01, #48
2d4e4     01 18 06 F6 | 	mov	arg04, #1
2d4e8     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2d4ec     00 FA 0D F2 | 	cmp	result1, #0 wz
2d4f0     74 00 90 5D |  if_ne	jmp	#LR__4450
2d4f4     03 26 06 F1 | 	add	local01, #3
2d4f8     13 01 48 FC | 	wrbyte	#0, local01
2d4fc     2D 26 06 F1 | 	add	local01, #45
2d500     13 FB 01 FB | 	rdlong	result1, local01
2d504     0C 26 86 F1 | 	sub	local01, #12
2d508     13 19 02 FB | 	rdlong	arg04, local01
2d50c     0C FB 81 F1 | 	sub	result1, arg04
2d510     08 26 86 F1 | 	sub	local01, #8
2d514     13 19 02 FB | 	rdlong	arg04, local01
2d518     1C 26 86 F1 | 	sub	local01, #28
2d51c     0C FB 11 F2 | 	cmp	result1, arg04 wc
2d520     48 00 90 3D |  if_ae	jmp	#LR__4451
2d524     02 26 06 F1 | 	add	local01, #2
2d528     13 19 C2 FA | 	rdbyte	arg04, local01
2d52c     02 26 86 F1 | 	sub	local01, #2
2d530     02 18 0E F2 | 	cmp	arg04, #2 wz
2d534     34 00 90 5D |  if_ne	jmp	#LR__4451
2d538     01 26 06 F1 | 	add	local01, #1
2d53c     13 13 C2 FA | 	rdbyte	arg01, local01
2d540     33 26 06 F1 | 	add	local01, #51
2d544     13 15 02 F6 | 	mov	arg02, local01
2d548     04 26 86 F1 | 	sub	local01, #4
2d54c     13 17 02 FB | 	rdlong	arg03, local01
2d550     14 26 86 F1 | 	sub	local01, #20
2d554     13 27 02 FB | 	rdlong	local01, local01
2d558     13 17 02 F1 | 	add	arg03, local01
2d55c     01 18 06 F6 | 	mov	arg04, #1
2d560     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2d564     04 00 90 FD | 	jmp	#LR__4451
2d568                 | LR__4450
2d568     01 28 06 F6 | 	mov	local02, #1
2d56c                 | LR__4451
2d56c                 | LR__4452
2d56c                 | ' 			res = FR_DISK_ERR;
2d56c                 | ' 		}
2d56c                 | ' 	}
2d56c                 | ' 	return res;
2d56c     14 FB 01 F6 | 	mov	result1, local02
2d570     A7 F0 03 F6 | 	mov	ptra, fp
2d574     B2 00 A0 FD | 	call	#popregs_
2d578                 | _fatfs_cc_sync_window_ret
2d578     2D 00 64 FD | 	ret
2d57c                 | 
2d57c                 | _fatfs_cc_move_window
2d57c     03 4A 05 F6 | 	mov	COUNT_, #3
2d580     A8 00 A0 FD | 	call	#pushregs_
2d584     09 27 02 F6 | 	mov	local01, arg01
2d588     0A 29 02 F6 | 	mov	local02, arg02
2d58c     00 2A 06 F6 | 	mov	local03, #0
2d590     30 26 06 F1 | 	add	local01, #48
2d594     13 19 02 FB | 	rdlong	arg04, local01
2d598     30 26 86 F1 | 	sub	local01, #48
2d59c     0C 29 0A F2 | 	cmp	local02, arg04 wz
2d5a0     40 00 90 AD |  if_e	jmp	#LR__4461
2d5a4     13 13 02 F6 | 	mov	arg01, local01
2d5a8     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2d5ac     FD 2A 0A F6 | 	mov	local03, result1 wz
2d5b0     30 00 90 5D |  if_ne	jmp	#LR__4460
2d5b4     01 26 06 F1 | 	add	local01, #1
2d5b8     13 13 C2 FA | 	rdbyte	arg01, local01
2d5bc     33 26 06 F1 | 	add	local01, #51
2d5c0     13 15 02 F6 | 	mov	arg02, local01
2d5c4     14 17 02 F6 | 	mov	arg03, local02
2d5c8     01 18 06 F6 | 	mov	arg04, #1
2d5cc     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2d5d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d5d4     01 28 66 56 |  if_ne	neg	local02, #1
2d5d8     01 2A 06 56 |  if_ne	mov	local03, #1
2d5dc     04 26 86 F1 | 	sub	local01, #4
2d5e0     13 29 62 FC | 	wrlong	local02, local01
2d5e4                 | LR__4460
2d5e4                 | LR__4461
2d5e4                 | ' 				sect = (LBA_t)0 - 1;
2d5e4                 | ' 				res = FR_DISK_ERR;
2d5e4                 | ' 			}
2d5e4                 | ' 			fs->winsect = sect;
2d5e4                 | ' 		}
2d5e4                 | ' 	}
2d5e4                 | ' 	return res;
2d5e4     15 FB 01 F6 | 	mov	result1, local03
2d5e8     A7 F0 03 F6 | 	mov	ptra, fp
2d5ec     B2 00 A0 FD | 	call	#popregs_
2d5f0                 | _fatfs_cc_move_window_ret
2d5f0     2D 00 64 FD | 	ret
2d5f4                 | 
2d5f4                 | _fatfs_cc_sync_fs
2d5f4     02 4A 05 F6 | 	mov	COUNT_, #2
2d5f8     A8 00 A0 FD | 	call	#pushregs_
2d5fc     09 27 02 F6 | 	mov	local01, arg01
2d600     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2d604     FD 28 0A F6 | 	mov	local02, result1 wz
2d608     D8 00 90 5D |  if_ne	jmp	#LR__4471
2d60c     13 19 C2 FA | 	rdbyte	arg04, local01
2d610     03 18 0E F2 | 	cmp	arg04, #3 wz
2d614     04 26 06 A1 |  if_e	add	local01, #4
2d618     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2d61c     04 26 86 A1 |  if_e	sub	local01, #4
2d620     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2d624     A0 00 90 5D |  if_ne	jmp	#LR__4470
2d628     34 26 06 F1 | 	add	local01, #52
2d62c     13 13 02 F6 | 	mov	arg01, local01
2d630     00 14 06 F6 | 	mov	arg02, #0
2d634     09 16 C6 F9 | 	decod	arg03, #9
2d638     98 00 A0 FD | 	call	#\builtin_bytefill_
2d63c     13 13 02 F6 | 	mov	arg01, local01
2d640     FE 13 06 F1 | 	add	arg01, #510
2d644     55 00 80 FF 
2d648     09 AB 58 FC | 	wrword	##43605, arg01
2d64c     A9 B0 A0 FF 
2d650     13 A5 68 FC | 	wrlong	##1096897106, local01
2d654     13 13 02 F6 | 	mov	arg01, local01
2d658     E4 13 06 F1 | 	add	arg01, #484
2d65c     B9 A0 B0 FF 
2d660     09 E5 68 FC | 	wrlong	##1631679090, arg01
2d664     13 13 02 F6 | 	mov	arg01, local01
2d668     E8 13 06 F1 | 	add	arg01, #488
2d66c     20 26 86 F1 | 	sub	local01, #32
2d670     13 15 02 FB | 	rdlong	arg02, local01
2d674     09 15 62 FC | 	wrlong	arg02, arg01
2d678     20 26 06 F1 | 	add	local01, #32
2d67c     13 13 02 F6 | 	mov	arg01, local01
2d680     EC 13 06 F1 | 	add	arg01, #492
2d684     24 26 86 F1 | 	sub	local01, #36
2d688     13 15 02 FB | 	rdlong	arg02, local01
2d68c     09 15 62 FC | 	wrlong	arg02, arg01
2d690     10 26 06 F1 | 	add	local01, #16
2d694     13 17 02 FB | 	rdlong	arg03, local01
2d698     01 16 06 F1 | 	add	arg03, #1
2d69c     10 26 06 F1 | 	add	local01, #16
2d6a0     13 17 62 FC | 	wrlong	arg03, local01
2d6a4     2F 26 86 F1 | 	sub	local01, #47
2d6a8     13 13 C2 FA | 	rdbyte	arg01, local01
2d6ac     33 26 06 F1 | 	add	local01, #51
2d6b0     13 15 02 F6 | 	mov	arg02, local01
2d6b4     01 18 06 F6 | 	mov	arg04, #1
2d6b8     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2d6bc     30 26 86 F1 | 	sub	local01, #48
2d6c0     13 01 48 FC | 	wrbyte	#0, local01
2d6c4     04 26 86 F1 | 	sub	local01, #4
2d6c8                 | LR__4470
2d6c8     01 26 06 F1 | 	add	local01, #1
2d6cc     13 13 C2 FA | 	rdbyte	arg01, local01
2d6d0     00 14 06 F6 | 	mov	arg02, #0
2d6d4     00 16 06 F6 | 	mov	arg03, #0
2d6d8     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2d6dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2d6e0     01 28 06 56 |  if_ne	mov	local02, #1
2d6e4                 | LR__4471
2d6e4                 | ' 	}
2d6e4                 | ' 
2d6e4                 | ' 	return res;
2d6e4     14 FB 01 F6 | 	mov	result1, local02
2d6e8     A7 F0 03 F6 | 	mov	ptra, fp
2d6ec     B2 00 A0 FD | 	call	#popregs_
2d6f0                 | _fatfs_cc_sync_fs_ret
2d6f0     2D 00 64 FD | 	ret
2d6f4                 | 
2d6f4                 | _fatfs_cc_clst2sect
2d6f4     02 14 86 F1 | 	sub	arg02, #2
2d6f8     18 12 06 F1 | 	add	arg01, #24
2d6fc     09 01 02 FB | 	rdlong	_var01, arg01
2d700     18 12 86 F1 | 	sub	arg01, #24
2d704     02 00 86 F1 | 	sub	_var01, #2
2d708     00 15 12 F2 | 	cmp	arg02, _var01 wc
2d70c     00 FA 05 36 |  if_ae	mov	result1, #0
2d710     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2d714     0A 12 06 F1 | 	add	arg01, #10
2d718     09 01 E2 FA | 	rdword	_var01, arg01
2d71c     0A 01 02 FD | 	qmul	_var01, arg02
2d720                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2d720     22 12 06 F1 | 	add	arg01, #34
2d724     09 FB 01 FB | 	rdlong	result1, arg01
2d728     18 00 62 FD | 	getqx	_var01
2d72c     00 FB 01 F1 | 	add	result1, _var01
2d730                 | _fatfs_cc_clst2sect_ret
2d730     2D 00 64 FD | 	ret
2d734                 | 
2d734                 | _fatfs_cc_get_fat
2d734     07 4A 05 F6 | 	mov	COUNT_, #7
2d738     A8 00 A0 FD | 	call	#pushregs_
2d73c     0A 27 02 F6 | 	mov	local01, arg02
2d740     09 29 02 FB | 	rdlong	local02, arg01
2d744     02 26 16 F2 | 	cmp	local01, #2 wc
2d748     14 00 90 CD |  if_b	jmp	#LR__4480
2d74c     18 28 06 F1 | 	add	local02, #24
2d750     14 2B 02 FB | 	rdlong	local03, local02
2d754     18 28 86 F1 | 	sub	local02, #24
2d758     15 27 12 F2 | 	cmp	local01, local03 wc
2d75c     08 00 90 CD |  if_b	jmp	#LR__4481
2d760                 | LR__4480
2d760     01 2C 06 F6 | 	mov	local04, #1
2d764     60 01 90 FD | 	jmp	#LR__4488
2d768                 | LR__4481
2d768     01 2C 66 F6 | 	neg	local04, #1
2d76c                 | ' 		val = 0xFFFFFFFF;
2d76c                 | ' 
2d76c                 | ' 		switch (fs->fs_type) {
2d76c     14 2F C2 FA | 	rdbyte	local05, local02
2d770     01 2E 86 F1 | 	sub	local05, #1
2d774     03 2E 26 F3 | 	fle	local05, #3
2d778     30 2E 62 FD | 	jmprel	local05
2d77c                 | LR__4482
2d77c     0C 00 90 FD | 	jmp	#LR__4483
2d780     B8 00 90 FD | 	jmp	#LR__4484
2d784     F8 00 90 FD | 	jmp	#LR__4485
2d788     38 01 90 FD | 	jmp	#LR__4486
2d78c                 | LR__4483
2d78c     13 2F 02 F6 | 	mov	local05, local01
2d790     13 13 02 F6 | 	mov	arg01, local01
2d794     01 12 46 F0 | 	shr	arg01, #1
2d798     09 2F 02 F1 | 	add	local05, arg01
2d79c     14 13 02 F6 | 	mov	arg01, local02
2d7a0     17 31 02 F6 | 	mov	local06, local05
2d7a4     09 30 46 F0 | 	shr	local06, #9
2d7a8     24 28 06 F1 | 	add	local02, #36
2d7ac     14 15 02 FB | 	rdlong	arg02, local02
2d7b0     24 28 86 F1 | 	sub	local02, #36
2d7b4     18 15 02 F1 | 	add	arg02, local06
2d7b8     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2d7bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2d7c0     04 01 90 5D |  if_ne	jmp	#LR__4487
2d7c4     17 31 02 F6 | 	mov	local06, local05
2d7c8     FF 31 06 F5 | 	and	local06, #511
2d7cc     34 28 06 F1 | 	add	local02, #52
2d7d0     14 31 02 F1 | 	add	local06, local02
2d7d4     18 33 C2 FA | 	rdbyte	local07, local06
2d7d8     34 28 86 F1 | 	sub	local02, #52
2d7dc     14 13 02 F6 | 	mov	arg01, local02
2d7e0     01 2E 06 F1 | 	add	local05, #1
2d7e4     17 31 02 F6 | 	mov	local06, local05
2d7e8     09 30 46 F0 | 	shr	local06, #9
2d7ec     24 28 06 F1 | 	add	local02, #36
2d7f0     14 15 02 FB | 	rdlong	arg02, local02
2d7f4     24 28 86 F1 | 	sub	local02, #36
2d7f8     18 15 02 F1 | 	add	arg02, local06
2d7fc     7C FD BF FD | 	call	#_fatfs_cc_move_window
2d800     00 FA 0D F2 | 	cmp	result1, #0 wz
2d804     C0 00 90 5D |  if_ne	jmp	#LR__4487
2d808     FF 2F 06 F5 | 	and	local05, #511
2d80c     34 28 06 F1 | 	add	local02, #52
2d810     14 2F 02 F1 | 	add	local05, local02
2d814     17 31 C2 FA | 	rdbyte	local06, local05
2d818     08 30 66 F0 | 	shl	local06, #8
2d81c     18 33 42 F5 | 	or	local07, local06
2d820     01 26 CE F7 | 	test	local01, #1 wz
2d824     04 32 46 50 |  if_ne	shr	local07, #4
2d828     19 2B 02 56 |  if_ne	mov	local03, local07
2d82c     0B 32 46 A7 |  if_e	zerox	local07, #11
2d830     19 2B 02 A6 |  if_e	mov	local03, local07
2d834     15 2D 02 F6 | 	mov	local04, local03
2d838                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2d838                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2d838                 | ' 			break;
2d838     8C 00 90 FD | 	jmp	#LR__4487
2d83c                 | LR__4484
2d83c     14 13 02 F6 | 	mov	arg01, local02
2d840     13 31 02 F6 | 	mov	local06, local01
2d844     08 30 46 F0 | 	shr	local06, #8
2d848     24 28 06 F1 | 	add	local02, #36
2d84c     14 15 02 FB | 	rdlong	arg02, local02
2d850     24 28 86 F1 | 	sub	local02, #36
2d854     18 15 02 F1 | 	add	arg02, local06
2d858     20 FD BF FD | 	call	#_fatfs_cc_move_window
2d85c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d860     64 00 90 5D |  if_ne	jmp	#LR__4487
2d864     34 28 06 F1 | 	add	local02, #52
2d868     01 26 66 F0 | 	shl	local01, #1
2d86c     FF 27 06 F5 | 	and	local01, #511
2d870     13 29 02 F1 | 	add	local02, local01
2d874                 | ' {
2d874                 | ' 
2d874                 | ' 	return *((WORD*)ptr);
2d874     14 FB E1 FA | 	rdword	result1, local02
2d878     FD 2C 32 F9 | 	getword	local04, result1, #0
2d87c                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2d87c                 | ' 			break;
2d87c     48 00 90 FD | 	jmp	#LR__4487
2d880                 | LR__4485
2d880     14 13 02 F6 | 	mov	arg01, local02
2d884     13 31 02 F6 | 	mov	local06, local01
2d888     07 30 46 F0 | 	shr	local06, #7
2d88c     24 28 06 F1 | 	add	local02, #36
2d890     14 15 02 FB | 	rdlong	arg02, local02
2d894     24 28 86 F1 | 	sub	local02, #36
2d898     18 15 02 F1 | 	add	arg02, local06
2d89c     DC FC BF FD | 	call	#_fatfs_cc_move_window
2d8a0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d8a4     20 00 90 5D |  if_ne	jmp	#LR__4487
2d8a8     34 28 06 F1 | 	add	local02, #52
2d8ac     02 26 66 F0 | 	shl	local01, #2
2d8b0     FF 27 06 F5 | 	and	local01, #511
2d8b4     13 29 02 F1 | 	add	local02, local01
2d8b8                 | ' {
2d8b8                 | ' 
2d8b8                 | ' 	return *((DWORD*)ptr);
2d8b8     14 2D 02 FB | 	rdlong	local04, local02
2d8bc     7C 2C 06 F4 | 	bitl	local04, #124
2d8c0                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2d8c0                 | ' 			break;
2d8c0     04 00 90 FD | 	jmp	#LR__4487
2d8c4                 | LR__4486
2d8c4     01 2C 06 F6 | 	mov	local04, #1
2d8c8                 | LR__4487
2d8c8                 | LR__4488
2d8c8                 | ' 			val = 1;
2d8c8                 | ' 		}
2d8c8                 | ' 	}
2d8c8                 | ' 
2d8c8                 | ' 	return val;
2d8c8     16 FB 01 F6 | 	mov	result1, local04
2d8cc     A7 F0 03 F6 | 	mov	ptra, fp
2d8d0     B2 00 A0 FD | 	call	#popregs_
2d8d4                 | _fatfs_cc_get_fat_ret
2d8d4     2D 00 64 FD | 	ret
2d8d8                 | 
2d8d8                 | _fatfs_cc_put_fat
2d8d8     08 4A 05 F6 | 	mov	COUNT_, #8
2d8dc     A8 00 A0 FD | 	call	#pushregs_
2d8e0     09 27 02 F6 | 	mov	local01, arg01
2d8e4     0A 29 02 F6 | 	mov	local02, arg02
2d8e8     0B 2B 02 F6 | 	mov	local03, arg03
2d8ec     02 2C 06 F6 | 	mov	local04, #2
2d8f0     02 28 16 F2 | 	cmp	local02, #2 wc
2d8f4     E0 01 90 CD |  if_b	jmp	#LR__4497
2d8f8     18 26 06 F1 | 	add	local01, #24
2d8fc     13 2F 02 FB | 	rdlong	local05, local01
2d900     18 26 86 F1 | 	sub	local01, #24
2d904     17 29 12 F2 | 	cmp	local02, local05 wc
2d908     CC 01 90 3D |  if_ae	jmp	#LR__4497
2d90c                 | ' 		switch (fs->fs_type) {
2d90c     13 31 C2 FA | 	rdbyte	local06, local01
2d910     01 30 86 F1 | 	sub	local06, #1
2d914     03 30 26 F3 | 	fle	local06, #3
2d918     30 30 62 FD | 	jmprel	local06
2d91c                 | LR__4490
2d91c     0C 00 90 FD | 	jmp	#LR__4491
2d920     F8 00 90 FD | 	jmp	#LR__4494
2d924     40 01 90 FD | 	jmp	#LR__4495
2d928     AC 01 90 FD | 	jmp	#LR__4496
2d92c                 | LR__4491
2d92c     14 33 02 F6 | 	mov	local07, local02
2d930     14 2F 02 F6 | 	mov	local05, local02
2d934     01 2E 46 F0 | 	shr	local05, #1
2d938     17 33 02 F1 | 	add	local07, local05
2d93c     13 13 02 F6 | 	mov	arg01, local01
2d940     19 31 02 F6 | 	mov	local06, local07
2d944     09 30 46 F0 | 	shr	local06, #9
2d948     24 26 06 F1 | 	add	local01, #36
2d94c     13 15 02 FB | 	rdlong	arg02, local01
2d950     24 26 86 F1 | 	sub	local01, #36
2d954     18 15 02 F1 | 	add	arg02, local06
2d958     20 FC BF FD | 	call	#_fatfs_cc_move_window
2d95c     FD 2C 0A F6 | 	mov	local04, result1 wz
2d960     74 01 90 5D |  if_ne	jmp	#LR__4496
2d964     34 26 06 F1 | 	add	local01, #52
2d968     13 35 02 F6 | 	mov	local08, local01
2d96c     19 2F 02 F6 | 	mov	local05, local07
2d970     FF 2F 06 F5 | 	and	local05, #511
2d974     17 35 02 F1 | 	add	local08, local05
2d978     01 28 CE F7 | 	test	local02, #1 wz
2d97c     34 26 86 F1 | 	sub	local01, #52
2d980     01 32 06 F1 | 	add	local07, #1
2d984     18 00 90 AD |  if_e	jmp	#LR__4492
2d988     1A 2F C2 FA | 	rdbyte	local05, local08
2d98c     17 2F 42 F8 | 	getnib	local05, local05, #0
2d990     15 31 E2 F8 | 	getbyte	local06, local03, #0
2d994     04 30 66 F0 | 	shl	local06, #4
2d998     18 2F 42 F5 | 	or	local05, local06
2d99c     04 00 90 FD | 	jmp	#LR__4493
2d9a0                 | LR__4492
2d9a0     15 2F 02 F6 | 	mov	local05, local03
2d9a4                 | LR__4493
2d9a4     1A 2F 42 FC | 	wrbyte	local05, local08
2d9a8     03 26 06 F1 | 	add	local01, #3
2d9ac     13 03 48 FC | 	wrbyte	#1, local01
2d9b0     03 26 86 F1 | 	sub	local01, #3
2d9b4     13 13 02 F6 | 	mov	arg01, local01
2d9b8     19 35 02 F6 | 	mov	local08, local07
2d9bc     09 34 46 F0 | 	shr	local08, #9
2d9c0     24 26 06 F1 | 	add	local01, #36
2d9c4     13 15 02 FB | 	rdlong	arg02, local01
2d9c8     24 26 86 F1 | 	sub	local01, #36
2d9cc     1A 15 02 F1 | 	add	arg02, local08
2d9d0     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2d9d4     FD 2C 0A F6 | 	mov	local04, result1 wz
2d9d8     FC 00 90 5D |  if_ne	jmp	#LR__4496
2d9dc     34 26 06 F1 | 	add	local01, #52
2d9e0     13 35 02 F6 | 	mov	local08, local01
2d9e4     FF 33 06 F5 | 	and	local07, #511
2d9e8     19 35 02 F1 | 	add	local08, local07
2d9ec     01 28 CE F7 | 	test	local02, #1 wz
2d9f0     04 2A 46 50 |  if_ne	shr	local03, #4
2d9f4     15 2F 02 56 |  if_ne	mov	local05, local03
2d9f8     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2d9fc     F0 2E 06 A5 |  if_e	and	local05, #240
2da00     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2da04     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2da08     15 2F 42 A5 |  if_e	or	local05, local03
2da0c     1A 2F 42 FC | 	wrbyte	local05, local08
2da10     31 26 86 F1 | 	sub	local01, #49
2da14     13 03 48 FC | 	wrbyte	#1, local01
2da18                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2da18                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2da18                 | ' 			fs->wflag = 1;
2da18                 | ' 			break;
2da18     BC 00 90 FD | 	jmp	#LR__4496
2da1c                 | LR__4494
2da1c     13 13 02 F6 | 	mov	arg01, local01
2da20     14 35 02 F6 | 	mov	local08, local02
2da24     08 34 46 F0 | 	shr	local08, #8
2da28     24 26 06 F1 | 	add	local01, #36
2da2c     13 15 02 FB | 	rdlong	arg02, local01
2da30     24 26 86 F1 | 	sub	local01, #36
2da34     1A 15 02 F1 | 	add	arg02, local08
2da38     40 FB BF FD | 	call	#_fatfs_cc_move_window
2da3c     FD 2C 0A F6 | 	mov	local04, result1 wz
2da40     94 00 90 5D |  if_ne	jmp	#LR__4496
2da44     34 26 06 F1 | 	add	local01, #52
2da48     13 13 02 F6 | 	mov	arg01, local01
2da4c     01 28 66 F0 | 	shl	local02, #1
2da50     FF 29 06 F5 | 	and	local02, #511
2da54     14 13 02 F1 | 	add	arg01, local02
2da58     09 2B 52 FC | 	wrword	local03, arg01
2da5c     31 26 86 F1 | 	sub	local01, #49
2da60     13 03 48 FC | 	wrbyte	#1, local01
2da64                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2da64                 | ' 			fs->wflag = 1;
2da64                 | ' 			break;
2da64     70 00 90 FD | 	jmp	#LR__4496
2da68                 | LR__4495
2da68     13 13 02 F6 | 	mov	arg01, local01
2da6c     14 35 02 F6 | 	mov	local08, local02
2da70     07 34 46 F0 | 	shr	local08, #7
2da74     24 26 06 F1 | 	add	local01, #36
2da78     13 15 02 FB | 	rdlong	arg02, local01
2da7c     24 26 86 F1 | 	sub	local01, #36
2da80     1A 15 02 F1 | 	add	arg02, local08
2da84     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2da88     FD 2C 0A F6 | 	mov	local04, result1 wz
2da8c     48 00 90 5D |  if_ne	jmp	#LR__4496
2da90     7C 2A 06 F4 | 	bitl	local03, #124
2da94     34 26 06 F1 | 	add	local01, #52
2da98     14 35 02 F6 | 	mov	local08, local02
2da9c     02 34 66 F0 | 	shl	local08, #2
2daa0     FF 35 06 F5 | 	and	local08, #511
2daa4     13 13 02 F6 | 	mov	arg01, local01
2daa8     1A 13 02 F1 | 	add	arg01, local08
2daac                 | ' {
2daac                 | ' 
2daac                 | ' 	return *((DWORD*)ptr);
2daac     09 35 02 FB | 	rdlong	local08, arg01
2dab0     00 00 78 FF 
2dab4     00 34 06 F5 | 	and	local08, ##-268435456
2dab8     1A 2B 42 F5 | 	or	local03, local08
2dabc     13 13 02 F6 | 	mov	arg01, local01
2dac0     02 28 66 F0 | 	shl	local02, #2
2dac4     FF 29 06 F5 | 	and	local02, #511
2dac8     14 13 02 F1 | 	add	arg01, local02
2dacc     09 2B 62 FC | 	wrlong	local03, arg01
2dad0     31 26 86 F1 | 	sub	local01, #49
2dad4     13 03 48 FC | 	wrbyte	#1, local01
2dad8                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2dad8                 | ' 			}
2dad8                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2dad8                 | ' 			fs->wflag = 1;
2dad8                 | ' 			break;
2dad8                 | LR__4496
2dad8                 | LR__4497
2dad8                 | ' 		}
2dad8                 | ' 	}
2dad8                 | ' 	return res;
2dad8     16 FB 01 F6 | 	mov	result1, local04
2dadc     A7 F0 03 F6 | 	mov	ptra, fp
2dae0     B2 00 A0 FD | 	call	#popregs_
2dae4                 | _fatfs_cc_put_fat_ret
2dae4     2D 00 64 FD | 	ret
2dae8                 | 
2dae8                 | _fatfs_cc_remove_chain
2dae8     05 4A 05 F6 | 	mov	COUNT_, #5
2daec     A8 00 A0 FD | 	call	#pushregs_
2daf0     09 27 02 F6 | 	mov	local01, arg01
2daf4     0A 29 02 F6 | 	mov	local02, arg02
2daf8     0B 2B 02 F6 | 	mov	local03, arg03
2dafc     13 2D 02 FB | 	rdlong	local04, local01
2db00     02 28 16 F2 | 	cmp	local02, #2 wc
2db04     14 00 90 CD |  if_b	jmp	#LR__4500
2db08     18 2C 06 F1 | 	add	local04, #24
2db0c     16 FB 01 FB | 	rdlong	result1, local04
2db10     18 2C 86 F1 | 	sub	local04, #24
2db14     FD 28 12 F2 | 	cmp	local02, result1 wc
2db18     08 00 90 CD |  if_b	jmp	#LR__4501
2db1c                 | LR__4500
2db1c     02 FA 05 F6 | 	mov	result1, #2
2db20     CC 00 90 FD | 	jmp	#LR__4506
2db24                 | LR__4501
2db24     00 2A 0E F2 | 	cmp	local03, #0 wz
2db28     18 00 90 AD |  if_e	jmp	#LR__4502
2db2c     15 15 02 F6 | 	mov	arg02, local03
2db30     16 13 02 F6 | 	mov	arg01, local04
2db34     01 16 66 F6 | 	neg	arg03, #1
2db38     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2db3c     00 FA 0D F2 | 	cmp	result1, #0 wz
2db40     AC 00 90 5D |  if_ne	jmp	#LR__4506
2db44                 | LR__4502
2db44                 | ' 	}
2db44                 | ' 
2db44                 | ' 
2db44                 | ' 	do {
2db44                 | LR__4503
2db44     14 15 02 F6 | 	mov	arg02, local02
2db48     13 13 02 F6 | 	mov	arg01, local01
2db4c     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2db50     FD 2E 0A F6 | 	mov	local05, result1 wz
2db54     94 00 90 AD |  if_e	jmp	#LR__4505
2db58     01 2E 0E F2 | 	cmp	local05, #1 wz
2db5c     02 FA 05 A6 |  if_e	mov	result1, #2
2db60     8C 00 90 AD |  if_e	jmp	#LR__4506
2db64     FF FF 7F FF 
2db68     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2db6c     01 FA 05 A6 |  if_e	mov	result1, #1
2db70     7C 00 90 AD |  if_e	jmp	#LR__4506
2db74     14 15 02 F6 | 	mov	arg02, local02
2db78     16 13 02 F6 | 	mov	arg01, local04
2db7c     00 16 06 F6 | 	mov	arg03, #0
2db80     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2db84     FD 2A 0A F6 | 	mov	local03, result1 wz
2db88     15 FB 01 56 |  if_ne	mov	result1, local03
2db8c     60 00 90 5D |  if_ne	jmp	#LR__4506
2db90     18 2C 06 F1 | 	add	local04, #24
2db94     16 2B 02 FB | 	rdlong	local03, local04
2db98     02 2A 86 F1 | 	sub	local03, #2
2db9c     04 2C 86 F1 | 	sub	local04, #4
2dba0     16 29 02 FB | 	rdlong	local02, local04
2dba4     14 2C 86 F1 | 	sub	local04, #20
2dba8     15 29 12 F2 | 	cmp	local02, local03 wc
2dbac     24 00 90 3D |  if_ae	jmp	#LR__4504
2dbb0     14 2C 06 F1 | 	add	local04, #20
2dbb4     16 2B 02 FB | 	rdlong	local03, local04
2dbb8     01 2A 06 F1 | 	add	local03, #1
2dbbc     16 2B 62 FC | 	wrlong	local03, local04
2dbc0     10 2C 86 F1 | 	sub	local04, #16
2dbc4     16 2B C2 FA | 	rdbyte	local03, local04
2dbc8     01 2A 46 F5 | 	or	local03, #1
2dbcc     16 2B 42 FC | 	wrbyte	local03, local04
2dbd0     04 2C 86 F1 | 	sub	local04, #4
2dbd4                 | LR__4504
2dbd4     17 29 02 F6 | 	mov	local02, local05
2dbd8     18 2C 06 F1 | 	add	local04, #24
2dbdc     16 2F 02 FB | 	rdlong	local05, local04
2dbe0     18 2C 86 F1 | 	sub	local04, #24
2dbe4     17 29 12 F2 | 	cmp	local02, local05 wc
2dbe8     58 FF 9F CD |  if_b	jmp	#LR__4503
2dbec                 | LR__4505
2dbec                 | ' #line 1500 "ff.c"
2dbec                 | ' 	return FR_OK;
2dbec     00 FA 05 F6 | 	mov	result1, #0
2dbf0                 | LR__4506
2dbf0     A7 F0 03 F6 | 	mov	ptra, fp
2dbf4     B2 00 A0 FD | 	call	#popregs_
2dbf8                 | _fatfs_cc_remove_chain_ret
2dbf8     2D 00 64 FD | 	ret
2dbfc                 | 
2dbfc                 | _fatfs_cc_create_chain
2dbfc     09 4A 05 F6 | 	mov	COUNT_, #9
2dc00     A8 00 A0 FD | 	call	#pushregs_
2dc04     09 27 02 F6 | 	mov	local01, arg01
2dc08     0A 29 0A F6 | 	mov	local02, arg02 wz
2dc0c     13 2B 02 FB | 	rdlong	local03, local01
2dc10     28 00 90 5D |  if_ne	jmp	#LR__4510
2dc14     10 2A 06 F1 | 	add	local03, #16
2dc18     15 2D 0A FB | 	rdlong	local04, local03 wz
2dc1c     10 2A 86 F1 | 	sub	local03, #16
2dc20     18 2A 06 51 |  if_ne	add	local03, #24
2dc24     15 2F 02 5B |  if_ne	rdlong	local05, local03
2dc28     18 2A 86 51 |  if_ne	sub	local03, #24
2dc2c     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2dc30     50 00 90 4D |  if_c_and_nz	jmp	#LR__4511
2dc34     01 2C 06 F6 | 	mov	local04, #1
2dc38     48 00 90 FD | 	jmp	#LR__4511
2dc3c                 | LR__4510
2dc3c     14 15 02 F6 | 	mov	arg02, local02
2dc40     13 13 02 F6 | 	mov	arg01, local01
2dc44     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2dc48     FD 2C 02 F6 | 	mov	local04, result1
2dc4c     02 2C 16 F2 | 	cmp	local04, #2 wc
2dc50     01 FA 05 C6 |  if_b	mov	result1, #1
2dc54     BC 01 90 CD |  if_b	jmp	#LR__4521
2dc58     FF FF 7F FF 
2dc5c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2dc60     16 FB 01 A6 |  if_e	mov	result1, local04
2dc64     AC 01 90 AD |  if_e	jmp	#LR__4521
2dc68     18 2A 06 F1 | 	add	local03, #24
2dc6c     15 2F 02 FB | 	rdlong	local05, local03
2dc70     18 2A 86 F1 | 	sub	local03, #24
2dc74     17 2D 12 F2 | 	cmp	local04, local05 wc
2dc78     16 FB 01 C6 |  if_b	mov	result1, local04
2dc7c     94 01 90 CD |  if_b	jmp	#LR__4521
2dc80     14 2D 02 F6 | 	mov	local04, local02
2dc84                 | LR__4511
2dc84     14 2A 06 F1 | 	add	local03, #20
2dc88     15 2F 0A FB | 	rdlong	local05, local03 wz
2dc8c     14 2A 86 F1 | 	sub	local03, #20
2dc90     00 FA 05 A6 |  if_e	mov	result1, #0
2dc94     7C 01 90 AD |  if_e	jmp	#LR__4521
2dc98     00 30 06 F6 | 	mov	local06, #0
2dc9c     14 2D 0A F2 | 	cmp	local04, local02 wz
2dca0     74 00 90 5D |  if_ne	jmp	#LR__4514
2dca4     16 31 02 F6 | 	mov	local06, local04
2dca8     01 30 06 F1 | 	add	local06, #1
2dcac     18 2A 06 F1 | 	add	local03, #24
2dcb0     15 2F 02 FB | 	rdlong	local05, local03
2dcb4     18 2A 86 F1 | 	sub	local03, #24
2dcb8     17 31 12 F2 | 	cmp	local06, local05 wc
2dcbc     02 30 06 36 |  if_ae	mov	local06, #2
2dcc0     18 15 02 F6 | 	mov	arg02, local06
2dcc4     13 13 02 F6 | 	mov	arg01, local01
2dcc8     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2dccc     FD 2E 02 F6 | 	mov	local05, result1
2dcd0     01 2E 0E F2 | 	cmp	local05, #1 wz
2dcd4     FF FF 7F 5F 
2dcd8     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2dcdc     17 FB 01 A6 |  if_e	mov	result1, local05
2dce0     30 01 90 AD |  if_e	jmp	#LR__4521
2dce4     00 2E 0E F2 | 	cmp	local05, #0 wz
2dce8     2C 00 90 AD |  if_e	jmp	#LR__4513
2dcec     10 2A 06 F1 | 	add	local03, #16
2dcf0     15 33 02 FB | 	rdlong	local07, local03
2dcf4     10 2A 86 F1 | 	sub	local03, #16
2dcf8     02 32 16 F2 | 	cmp	local07, #2 wc
2dcfc     14 00 90 CD |  if_b	jmp	#LR__4512
2dd00     18 2A 06 F1 | 	add	local03, #24
2dd04     15 2F 02 FB | 	rdlong	local05, local03
2dd08     18 2A 86 F1 | 	sub	local03, #24
2dd0c     17 33 12 F2 | 	cmp	local07, local05 wc
2dd10     19 2D 02 C6 |  if_b	mov	local04, local07
2dd14                 | LR__4512
2dd14     00 30 06 F6 | 	mov	local06, #0
2dd18                 | LR__4513
2dd18                 | LR__4514
2dd18     00 30 0E F2 | 	cmp	local06, #0 wz
2dd1c     60 00 90 5D |  if_ne	jmp	#LR__4517
2dd20     16 31 02 F6 | 	mov	local06, local04
2dd24                 | ' 			ncl = scl;
2dd24                 | ' 			for (;;) {
2dd24                 | LR__4515
2dd24     01 30 06 F1 | 	add	local06, #1
2dd28     18 2A 06 F1 | 	add	local03, #24
2dd2c     15 2F 02 FB | 	rdlong	local05, local03
2dd30     18 2A 86 F1 | 	sub	local03, #24
2dd34     17 31 12 F2 | 	cmp	local06, local05 wc
2dd38     02 30 06 36 |  if_ae	mov	local06, #2
2dd3c     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2dd40     00 FA 05 16 |  if_a	mov	result1, #0
2dd44     CC 00 90 1D |  if_a	jmp	#LR__4521
2dd48     18 15 02 F6 | 	mov	arg02, local06
2dd4c     13 13 02 F6 | 	mov	arg01, local01
2dd50     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2dd54     FD 32 0A F6 | 	mov	local07, result1 wz
2dd58     24 00 90 AD |  if_e	jmp	#LR__4516
2dd5c     01 32 0E F2 | 	cmp	local07, #1 wz
2dd60     FF FF 7F 5F 
2dd64     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2dd68     19 FB 01 A6 |  if_e	mov	result1, local07
2dd6c     A4 00 90 AD |  if_e	jmp	#LR__4521
2dd70     16 31 0A F2 | 	cmp	local06, local04 wz
2dd74     00 FA 05 A6 |  if_e	mov	result1, #0
2dd78     98 00 90 AD |  if_e	jmp	#LR__4521
2dd7c     A4 FF 9F FD | 	jmp	#LR__4515
2dd80                 | LR__4516
2dd80                 | LR__4517
2dd80     15 13 02 F6 | 	mov	arg01, local03
2dd84     18 15 02 F6 | 	mov	arg02, local06
2dd88     01 16 66 F6 | 	neg	arg03, #1
2dd8c     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2dd90     FD 34 0A F6 | 	mov	local08, result1 wz
2dd94     1C 00 90 5D |  if_ne	jmp	#LR__4518
2dd98     00 28 0E F2 | 	cmp	local02, #0 wz
2dd9c     14 00 90 AD |  if_e	jmp	#LR__4518
2dda0     15 13 02 F6 | 	mov	arg01, local03
2dda4     14 15 02 F6 | 	mov	arg02, local02
2dda8     18 17 02 F6 | 	mov	arg03, local06
2ddac     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2ddb0     FD 34 02 F6 | 	mov	local08, result1
2ddb4                 | LR__4518
2ddb4     00 34 0E F2 | 	cmp	local08, #0 wz
2ddb8     4C 00 90 5D |  if_ne	jmp	#LR__4519
2ddbc     10 2A 06 F1 | 	add	local03, #16
2ddc0     15 31 62 FC | 	wrlong	local06, local03
2ddc4     08 2A 06 F1 | 	add	local03, #8
2ddc8     15 2F 02 FB | 	rdlong	local05, local03
2ddcc     02 2E 86 F1 | 	sub	local05, #2
2ddd0     04 2A 86 F1 | 	sub	local03, #4
2ddd4     15 37 02 FB | 	rdlong	local09, local03
2ddd8     14 2A 86 F1 | 	sub	local03, #20
2dddc     17 37 1A F2 | 	cmp	local09, local05 wcz
2dde0     14 2A 06 E1 |  if_be	add	local03, #20
2dde4     15 37 02 EB |  if_be	rdlong	local09, local03
2dde8     01 36 86 E1 |  if_be	sub	local09, #1
2ddec     15 37 62 EC |  if_be	wrlong	local09, local03
2ddf0     14 2A 86 E1 |  if_be	sub	local03, #20
2ddf4     04 2A 06 F1 | 	add	local03, #4
2ddf8     15 2F C2 FA | 	rdbyte	local05, local03
2ddfc     01 2E 46 F5 | 	or	local05, #1
2de00     15 2F 42 FC | 	wrbyte	local05, local03
2de04     08 00 90 FD | 	jmp	#LR__4520
2de08                 | LR__4519
2de08     01 34 0E F2 | 	cmp	local08, #1 wz
2de0c     01 30 C6 F6 | 	negz	local06, #1
2de10                 | LR__4520
2de10                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2de10                 | ' 	}
2de10                 | ' 
2de10                 | ' 	return ncl;
2de10     18 FB 01 F6 | 	mov	result1, local06
2de14                 | LR__4521
2de14     A7 F0 03 F6 | 	mov	ptra, fp
2de18     B2 00 A0 FD | 	call	#popregs_
2de1c                 | _fatfs_cc_create_chain_ret
2de1c     2D 00 64 FD | 	ret
2de20                 | 
2de20                 | _fatfs_cc_dir_clear
2de20     06 4A 05 F6 | 	mov	COUNT_, #6
2de24     A8 00 A0 FD | 	call	#pushregs_
2de28     09 27 02 F6 | 	mov	local01, arg01
2de2c     0A 29 02 F6 | 	mov	local02, arg02
2de30     13 13 02 F6 | 	mov	arg01, local01
2de34     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2de38     00 FA 0D F2 | 	cmp	result1, #0 wz
2de3c     01 FA 05 56 |  if_ne	mov	result1, #1
2de40     90 00 90 5D |  if_ne	jmp	#LR__4532
2de44     13 13 02 F6 | 	mov	arg01, local01
2de48     14 15 02 F6 | 	mov	arg02, local02
2de4c     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2de50     FD 2A 02 F6 | 	mov	local03, result1
2de54     30 26 06 F1 | 	add	local01, #48
2de58     13 2B 62 FC | 	wrlong	local03, local01
2de5c     04 26 06 F1 | 	add	local01, #4
2de60     13 13 02 F6 | 	mov	arg01, local01
2de64     00 14 06 F6 | 	mov	arg02, #0
2de68     09 16 C6 F9 | 	decod	arg03, #9
2de6c     98 00 A0 FD | 	call	#\builtin_bytefill_
2de70     13 2D 02 F6 | 	mov	local04, local01
2de74                 | ' #line 1667 "ff.c"
2de74                 | ' 	{
2de74                 | ' 		ibuf = fs->win; szb = 1;
2de74                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2de74     00 2E 06 F6 | 	mov	local05, #0
2de78     34 26 86 F1 | 	sub	local01, #52
2de7c                 | LR__4530
2de7c     0A 26 06 F1 | 	add	local01, #10
2de80     13 31 E2 FA | 	rdword	local06, local01
2de84     0A 26 86 F1 | 	sub	local01, #10
2de88     18 2F 12 F2 | 	cmp	local05, local06 wc
2de8c     2C 00 90 3D |  if_ae	jmp	#LR__4531
2de90     01 26 06 F1 | 	add	local01, #1
2de94     13 13 C2 FA | 	rdbyte	arg01, local01
2de98     01 26 86 F1 | 	sub	local01, #1
2de9c     16 15 02 F6 | 	mov	arg02, local04
2dea0     15 17 02 F6 | 	mov	arg03, local03
2dea4     17 17 02 F1 | 	add	arg03, local05
2dea8     01 18 06 F6 | 	mov	arg04, #1
2deac     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2deb0     00 FA 0D F2 | 	cmp	result1, #0 wz
2deb4     01 2E 06 A1 |  if_e	add	local05, #1
2deb8     C0 FF 9F AD |  if_e	jmp	#LR__4530
2debc                 | LR__4531
2debc                 | ' 	}
2debc                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2debc     0A 26 06 F1 | 	add	local01, #10
2dec0     13 2D E2 FA | 	rdword	local04, local01
2dec4     16 2F 0A F2 | 	cmp	local05, local04 wz
2dec8     00 30 06 A6 |  if_e	mov	local06, #0
2decc     01 30 06 56 |  if_ne	mov	local06, #1
2ded0     18 FB 01 F6 | 	mov	result1, local06
2ded4                 | LR__4532
2ded4     A7 F0 03 F6 | 	mov	ptra, fp
2ded8     B2 00 A0 FD | 	call	#popregs_
2dedc                 | _fatfs_cc_dir_clear_ret
2dedc     2D 00 64 FD | 	ret
2dee0                 | 
2dee0                 | _fatfs_cc_dir_sdi
2dee0     06 4A 05 F6 | 	mov	COUNT_, #6
2dee4     A8 00 A0 FD | 	call	#pushregs_
2dee8     09 27 02 F6 | 	mov	local01, arg01
2deec     0A 29 02 F6 | 	mov	local02, arg02
2def0     13 2B 02 FB | 	rdlong	local03, local01
2def4     00 10 00 FF 
2def8     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2defc     1F 28 CE C7 |  if_b	test	local02, #31 wz
2df00                 | ' 		return FR_INT_ERR;
2df00     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2df04     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4546
2df08     10 26 06 F1 | 	add	local01, #16
2df0c     13 29 62 FC | 	wrlong	local02, local01
2df10     08 26 86 F1 | 	sub	local01, #8
2df14     13 2D 0A FB | 	rdlong	local04, local01 wz
2df18     08 26 86 F1 | 	sub	local01, #8
2df1c     15 2F C2 AA |  if_e	rdbyte	local05, local03
2df20     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2df24     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2df28     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2df2c     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2df30     00 2C 0E F2 | 	cmp	local04, #0 wz
2df34     3C 00 90 5D |  if_ne	jmp	#LR__4540
2df38     14 2F 02 F6 | 	mov	local05, local02
2df3c     05 2E 46 F0 | 	shr	local05, #5
2df40     08 2A 06 F1 | 	add	local03, #8
2df44     15 15 E2 FA | 	rdword	arg02, local03
2df48     08 2A 86 F1 | 	sub	local03, #8
2df4c     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2df50     02 FA 05 36 |  if_ae	mov	result1, #2
2df54     E4 00 90 3D |  if_ae	jmp	#LR__4546
2df58     28 2A 06 F1 | 	add	local03, #40
2df5c     15 2F 02 FB | 	rdlong	local05, local03
2df60     28 2A 86 F1 | 	sub	local03, #40
2df64     18 26 06 F1 | 	add	local01, #24
2df68     13 2F 62 FC | 	wrlong	local05, local01
2df6c     18 26 86 F1 | 	sub	local01, #24
2df70     7C 00 90 FD | 	jmp	#LR__4545
2df74                 | LR__4540
2df74     0A 2A 06 F1 | 	add	local03, #10
2df78     15 31 E2 FA | 	rdword	local06, local03
2df7c     0A 2A 86 F1 | 	sub	local03, #10
2df80     09 30 66 F0 | 	shl	local06, #9
2df84                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2df84                 | ' 		while (ofs >= csz) {
2df84                 | LR__4541
2df84     18 29 12 F2 | 	cmp	local02, local06 wc
2df88     4C 00 90 CD |  if_b	jmp	#LR__4544
2df8c     13 13 02 F6 | 	mov	arg01, local01
2df90     16 15 02 F6 | 	mov	arg02, local04
2df94     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2df98     FD 2C 02 F6 | 	mov	local04, result1
2df9c     FF FF 7F FF 
2dfa0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2dfa4     01 FA 05 A6 |  if_e	mov	result1, #1
2dfa8     90 00 90 AD |  if_e	jmp	#LR__4546
2dfac     02 2C 16 F2 | 	cmp	local04, #2 wc
2dfb0     14 00 90 CD |  if_b	jmp	#LR__4542
2dfb4     18 2A 06 F1 | 	add	local03, #24
2dfb8     15 2F 02 FB | 	rdlong	local05, local03
2dfbc     18 2A 86 F1 | 	sub	local03, #24
2dfc0     17 2D 12 F2 | 	cmp	local04, local05 wc
2dfc4     08 00 90 CD |  if_b	jmp	#LR__4543
2dfc8                 | LR__4542
2dfc8     02 FA 05 F6 | 	mov	result1, #2
2dfcc     6C 00 90 FD | 	jmp	#LR__4546
2dfd0                 | LR__4543
2dfd0     18 29 82 F1 | 	sub	local02, local06
2dfd4     AC FF 9F FD | 	jmp	#LR__4541
2dfd8                 | LR__4544
2dfd8     15 13 02 F6 | 	mov	arg01, local03
2dfdc     16 15 02 F6 | 	mov	arg02, local04
2dfe0     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2dfe4     18 26 06 F1 | 	add	local01, #24
2dfe8     13 FB 61 FC | 	wrlong	result1, local01
2dfec     18 26 86 F1 | 	sub	local01, #24
2dff0                 | LR__4545
2dff0     14 26 06 F1 | 	add	local01, #20
2dff4     13 2D 62 FC | 	wrlong	local04, local01
2dff8     04 26 06 F1 | 	add	local01, #4
2dffc     13 2F 0A FB | 	rdlong	local05, local01 wz
2e000     18 26 86 F1 | 	sub	local01, #24
2e004     02 FA 05 A6 |  if_e	mov	result1, #2
2e008     30 00 90 AD |  if_e	jmp	#LR__4546
2e00c     14 31 02 F6 | 	mov	local06, local02
2e010     09 30 46 F0 | 	shr	local06, #9
2e014     18 26 06 F1 | 	add	local01, #24
2e018     13 2F 02 FB | 	rdlong	local05, local01
2e01c     18 2F 02 F1 | 	add	local05, local06
2e020     13 2F 62 FC | 	wrlong	local05, local01
2e024     34 2A 06 F1 | 	add	local03, #52
2e028     FF 29 06 F5 | 	and	local02, #511
2e02c     14 2B 02 F1 | 	add	local03, local02
2e030     04 26 06 F1 | 	add	local01, #4
2e034     13 2B 62 FC | 	wrlong	local03, local01
2e038                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2e038                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2e038                 | ' 
2e038                 | ' 	return FR_OK;
2e038     00 FA 05 F6 | 	mov	result1, #0
2e03c                 | LR__4546
2e03c     A7 F0 03 F6 | 	mov	ptra, fp
2e040     B2 00 A0 FD | 	call	#popregs_
2e044                 | _fatfs_cc_dir_sdi_ret
2e044     2D 00 64 FD | 	ret
2e048                 | 
2e048                 | _fatfs_cc_dir_next
2e048     05 4A 05 F6 | 	mov	COUNT_, #5
2e04c     A8 00 A0 FD | 	call	#pushregs_
2e050     09 27 02 F6 | 	mov	local01, arg01
2e054     0A 29 02 F6 | 	mov	local02, arg02
2e058     13 2B 02 FB | 	rdlong	local03, local01
2e05c     10 26 06 F1 | 	add	local01, #16
2e060     13 2D 02 FB | 	rdlong	local04, local01
2e064     10 26 86 F1 | 	sub	local01, #16
2e068     20 2C 06 F1 | 	add	local04, #32
2e06c     00 10 00 FF 
2e070     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2e074     18 26 06 31 |  if_ae	add	local01, #24
2e078     13 01 68 3C |  if_ae	wrlong	#0, local01
2e07c     18 26 86 31 |  if_ae	sub	local01, #24
2e080     18 26 06 F1 | 	add	local01, #24
2e084     13 15 0A FB | 	rdlong	arg02, local01 wz
2e088     18 26 86 F1 | 	sub	local01, #24
2e08c     04 FA 05 A6 |  if_e	mov	result1, #4
2e090     64 01 90 AD |  if_e	jmp	#LR__4555
2e094     FF 2D CE F7 | 	test	local04, #511 wz
2e098     3C 01 90 5D |  if_ne	jmp	#LR__4554
2e09c     18 26 06 F1 | 	add	local01, #24
2e0a0     13 15 02 FB | 	rdlong	arg02, local01
2e0a4     01 14 06 F1 | 	add	arg02, #1
2e0a8     13 15 62 FC | 	wrlong	arg02, local01
2e0ac     04 26 86 F1 | 	sub	local01, #4
2e0b0     13 15 0A FB | 	rdlong	arg02, local01 wz
2e0b4     14 26 86 F1 | 	sub	local01, #20
2e0b8     2C 00 90 5D |  if_ne	jmp	#LR__4550
2e0bc     16 15 02 F6 | 	mov	arg02, local04
2e0c0     05 14 46 F0 | 	shr	arg02, #5
2e0c4     08 2A 06 F1 | 	add	local03, #8
2e0c8     15 29 E2 FA | 	rdword	local02, local03
2e0cc     08 2A 86 F1 | 	sub	local03, #8
2e0d0     14 15 12 F2 | 	cmp	arg02, local02 wc
2e0d4     18 26 06 31 |  if_ae	add	local01, #24
2e0d8     13 01 68 3C |  if_ae	wrlong	#0, local01
2e0dc                 | ' 				dp->sect = 0; return FR_NO_FILE;
2e0dc     04 FA 05 36 |  if_ae	mov	result1, #4
2e0e0     14 01 90 3D |  if_ae	jmp	#LR__4555
2e0e4     F0 00 90 FD | 	jmp	#LR__4553
2e0e8                 | LR__4550
2e0e8     16 13 02 F6 | 	mov	arg01, local04
2e0ec     09 12 46 F0 | 	shr	arg01, #9
2e0f0     0A 2A 06 F1 | 	add	local03, #10
2e0f4     15 15 E2 FA | 	rdword	arg02, local03
2e0f8     0A 2A 86 F1 | 	sub	local03, #10
2e0fc     01 14 86 F1 | 	sub	arg02, #1
2e100     0A 13 CA F7 | 	test	arg01, arg02 wz
2e104     D0 00 90 5D |  if_ne	jmp	#LR__4552
2e108     13 13 02 F6 | 	mov	arg01, local01
2e10c     14 26 06 F1 | 	add	local01, #20
2e110     13 15 02 FB | 	rdlong	arg02, local01
2e114     14 26 86 F1 | 	sub	local01, #20
2e118     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2e11c     FD 2E 02 F6 | 	mov	local05, result1
2e120     02 2E 16 F2 | 	cmp	local05, #2 wc
2e124     02 FA 05 C6 |  if_b	mov	result1, #2
2e128     CC 00 90 CD |  if_b	jmp	#LR__4555
2e12c     FF FF 7F FF 
2e130     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2e134     01 FA 05 A6 |  if_e	mov	result1, #1
2e138     BC 00 90 AD |  if_e	jmp	#LR__4555
2e13c     18 2A 06 F1 | 	add	local03, #24
2e140     15 15 02 FB | 	rdlong	arg02, local03
2e144     18 2A 86 F1 | 	sub	local03, #24
2e148     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2e14c     68 00 90 CD |  if_b	jmp	#LR__4551
2e150     00 28 0E F2 | 	cmp	local02, #0 wz
2e154     18 26 06 A1 |  if_e	add	local01, #24
2e158     13 01 68 AC |  if_e	wrlong	#0, local01
2e15c                 | ' 						dp->sect = 0; return FR_NO_FILE;
2e15c     04 FA 05 A6 |  if_e	mov	result1, #4
2e160     94 00 90 AD |  if_e	jmp	#LR__4555
2e164     13 13 02 F6 | 	mov	arg01, local01
2e168     14 26 06 F1 | 	add	local01, #20
2e16c     13 15 02 FB | 	rdlong	arg02, local01
2e170     14 26 86 F1 | 	sub	local01, #20
2e174     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2e178     FD 2E 0A F6 | 	mov	local05, result1 wz
2e17c     07 FA 05 A6 |  if_e	mov	result1, #7
2e180     74 00 90 AD |  if_e	jmp	#LR__4555
2e184     01 2E 0E F2 | 	cmp	local05, #1 wz
2e188     02 FA 05 A6 |  if_e	mov	result1, #2
2e18c     68 00 90 AD |  if_e	jmp	#LR__4555
2e190     FF FF 7F FF 
2e194     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2e198     01 FA 05 A6 |  if_e	mov	result1, #1
2e19c     58 00 90 AD |  if_e	jmp	#LR__4555
2e1a0     17 15 02 F6 | 	mov	arg02, local05
2e1a4     15 13 02 F6 | 	mov	arg01, local03
2e1a8     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2e1ac     00 FA 0D F2 | 	cmp	result1, #0 wz
2e1b0     01 FA 05 56 |  if_ne	mov	result1, #1
2e1b4     40 00 90 5D |  if_ne	jmp	#LR__4555
2e1b8                 | LR__4551
2e1b8     14 26 06 F1 | 	add	local01, #20
2e1bc     13 2F 62 FC | 	wrlong	local05, local01
2e1c0     15 13 02 F6 | 	mov	arg01, local03
2e1c4     17 15 02 F6 | 	mov	arg02, local05
2e1c8     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2e1cc     04 26 06 F1 | 	add	local01, #4
2e1d0     13 FB 61 FC | 	wrlong	result1, local01
2e1d4     18 26 86 F1 | 	sub	local01, #24
2e1d8                 | LR__4552
2e1d8                 | LR__4553
2e1d8                 | LR__4554
2e1d8     10 26 06 F1 | 	add	local01, #16
2e1dc     13 2D 62 FC | 	wrlong	local04, local01
2e1e0     34 2A 06 F1 | 	add	local03, #52
2e1e4     FF 2D 06 F5 | 	and	local04, #511
2e1e8     16 2B 02 F1 | 	add	local03, local04
2e1ec     0C 26 06 F1 | 	add	local01, #12
2e1f0     13 2B 62 FC | 	wrlong	local03, local01
2e1f4                 | ' #line 1771 "ff.c"
2e1f4                 | ' 				}
2e1f4                 | ' 				dp->clust = clst;
2e1f4                 | ' 				dp->sect = clst2sect(fs, clst);
2e1f4                 | ' 			}
2e1f4                 | ' 		}
2e1f4                 | ' 	}
2e1f4                 | ' 	dp->dptr = ofs;
2e1f4                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2e1f4                 | ' 
2e1f4                 | ' 	return FR_OK;
2e1f4     00 FA 05 F6 | 	mov	result1, #0
2e1f8                 | LR__4555
2e1f8     A7 F0 03 F6 | 	mov	ptra, fp
2e1fc     B2 00 A0 FD | 	call	#popregs_
2e200                 | _fatfs_cc_dir_next_ret
2e200     2D 00 64 FD | 	ret
2e204                 | 
2e204                 | _fatfs_cc_dir_alloc
2e204     08 4A 05 F6 | 	mov	COUNT_, #8
2e208     A8 00 A0 FD | 	call	#pushregs_
2e20c     09 27 02 F6 | 	mov	local01, arg01
2e210     0A 29 02 F6 | 	mov	local02, arg02
2e214     13 2B 02 FB | 	rdlong	local03, local01
2e218     13 13 02 F6 | 	mov	arg01, local01
2e21c     00 14 06 F6 | 	mov	arg02, #0
2e220     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2e224     FD 2C 0A F6 | 	mov	local04, result1 wz
2e228     70 00 90 5D |  if_ne	jmp	#LR__4564
2e22c     00 2E 06 F6 | 	mov	local05, #0
2e230                 | ' 		n = 0;
2e230                 | ' 		do {
2e230                 | LR__4560
2e230     18 26 06 F1 | 	add	local01, #24
2e234     13 15 02 FB | 	rdlong	arg02, local01
2e238     18 26 86 F1 | 	sub	local01, #24
2e23c     15 13 02 F6 | 	mov	arg01, local03
2e240     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2e244     FD 2C 0A F6 | 	mov	local04, result1 wz
2e248     50 00 90 5D |  if_ne	jmp	#LR__4563
2e24c     1C 26 06 F1 | 	add	local01, #28
2e250     13 31 02 FB | 	rdlong	local06, local01
2e254     1C 26 86 F1 | 	sub	local01, #28
2e258     18 31 C2 FA | 	rdbyte	local06, local06
2e25c     E5 30 0E F2 | 	cmp	local06, #229 wz
2e260     1C 26 06 51 |  if_ne	add	local01, #28
2e264     13 33 02 5B |  if_ne	rdlong	local07, local01
2e268     1C 26 86 51 |  if_ne	sub	local01, #28
2e26c     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2e270     10 00 90 5D |  if_ne	jmp	#LR__4561
2e274     01 2E 06 F1 | 	add	local05, #1
2e278     14 2F 0A F2 | 	cmp	local05, local02 wz
2e27c     1C 00 90 AD |  if_e	jmp	#LR__4563
2e280     04 00 90 FD | 	jmp	#LR__4562
2e284                 | LR__4561
2e284     00 2E 06 F6 | 	mov	local05, #0
2e288                 | LR__4562
2e288     13 13 02 F6 | 	mov	arg01, local01
2e28c     01 14 06 F6 | 	mov	arg02, #1
2e290     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2e294     FD 2C 0A F6 | 	mov	local04, result1 wz
2e298     94 FF 9F AD |  if_e	jmp	#LR__4560
2e29c                 | LR__4563
2e29c                 | LR__4564
2e29c     04 2C 0E F2 | 	cmp	local04, #4 wz
2e2a0     07 2C 06 A6 |  if_e	mov	local04, #7
2e2a4                 | ' 	return res;
2e2a4     16 FB 01 F6 | 	mov	result1, local04
2e2a8     A7 F0 03 F6 | 	mov	ptra, fp
2e2ac     B2 00 A0 FD | 	call	#popregs_
2e2b0                 | _fatfs_cc_dir_alloc_ret
2e2b0     2D 00 64 FD | 	ret
2e2b4                 | 
2e2b4                 | _fatfs_cc_ld_clust
2e2b4     09 01 02 F6 | 	mov	_var01, arg01
2e2b8     0A 13 02 F6 | 	mov	arg01, arg02
2e2bc     1A 12 06 F1 | 	add	arg01, #26
2e2c0                 | ' {
2e2c0                 | ' 
2e2c0                 | ' 	return *((WORD*)ptr);
2e2c0     09 FB E1 FA | 	rdword	result1, arg01
2e2c4     FD 12 32 F9 | 	getword	arg01, result1, #0
2e2c8     00 01 C2 FA | 	rdbyte	_var01, _var01
2e2cc     03 00 0E F2 | 	cmp	_var01, #3 wz
2e2d0     14 14 06 A1 |  if_e	add	arg02, #20
2e2d4                 | ' {
2e2d4                 | ' 
2e2d4                 | ' 	return *((WORD*)ptr);
2e2d4     0A FB E1 AA |  if_e	rdword	result1, arg02
2e2d8     10 FA 65 A0 |  if_e	shl	result1, #16
2e2dc     FD 12 42 A5 |  if_e	or	arg01, result1
2e2e0                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2e2e0                 | ' 	}
2e2e0                 | ' 
2e2e0                 | ' 	return cl;
2e2e0     09 FB 01 F6 | 	mov	result1, arg01
2e2e4                 | _fatfs_cc_ld_clust_ret
2e2e4     2D 00 64 FD | 	ret
2e2e8                 | 
2e2e8                 | _fatfs_cc_st_clust
2e2e8     09 01 02 F6 | 	mov	_var01, arg01
2e2ec     0A 13 02 F6 | 	mov	arg01, arg02
2e2f0     1A 12 06 F1 | 	add	arg01, #26
2e2f4     09 17 52 FC | 	wrword	arg03, arg01
2e2f8     00 01 C2 FA | 	rdbyte	_var01, _var01
2e2fc     03 00 0E F2 | 	cmp	_var01, #3 wz
2e300     14 14 06 A1 |  if_e	add	arg02, #20
2e304     10 16 46 A0 |  if_e	shr	arg03, #16
2e308     0A 17 52 AC |  if_e	wrword	arg03, arg02
2e30c                 | _fatfs_cc_st_clust_ret
2e30c     2D 00 64 FD | 	ret
2e310                 | 
2e310                 | _fatfs_cc_cmp_lfn
2e310     07 4A 05 F6 | 	mov	COUNT_, #7
2e314     A8 00 A0 FD | 	call	#pushregs_
2e318     09 27 02 F6 | 	mov	local01, arg01
2e31c     0A 13 02 F6 | 	mov	arg01, arg02
2e320     1A 12 06 F1 | 	add	arg01, #26
2e324                 | ' {
2e324                 | ' 
2e324                 | ' 	return *((WORD*)ptr);
2e324     09 FB E9 FA | 	rdword	result1, arg01 wz
2e328     00 FA 05 56 |  if_ne	mov	result1, #0
2e32c     E0 00 90 5D |  if_ne	jmp	#LR__4576
2e330     0A 29 C2 FA | 	rdbyte	local02, arg02
2e334     3F 28 06 F5 | 	and	local02, #63
2e338     01 28 86 F1 | 	sub	local02, #1
2e33c     0D 28 06 FD | 	qmul	local02, #13
2e340                 | ' 
2e340                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2e340                 | ' 
2e340                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2e340     01 2A 06 F6 | 	mov	local03, #1
2e344     00 2C 06 F6 | 	mov	local04, #0
2e348     18 2E 62 FD | 	getqx	local05
2e34c                 | LR__4570
2e34c     0D 2C 16 F2 | 	cmp	local04, #13 wc
2e350     9C 00 90 3D |  if_ae	jmp	#LR__4575
2e354     0A 13 02 F6 | 	mov	arg01, arg02
2e358     16 29 02 F6 | 	mov	local02, local04
2e35c     01 00 00 FF 
2e360     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2e364     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2e368     14 29 C2 FA | 	rdbyte	local02, local02
2e36c     01 28 06 FA | 	mul	local02, #1
2e370     14 13 02 F1 | 	add	arg01, local02
2e374     01 00 00 FF 
2e378     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2e37c                 | ' {
2e37c                 | ' 
2e37c                 | ' 	return *((WORD*)ptr);
2e37c     09 FB E1 FA | 	rdword	result1, arg01
2e380     FD 30 02 F6 | 	mov	local06, result1
2e384     15 29 02 F6 | 	mov	local02, local03
2e388     0F 28 4E F7 | 	zerox	local02, #15 wz
2e38c     44 00 90 AD |  if_e	jmp	#LR__4573
2e390     00 2F 16 F2 | 	cmp	local05, #256 wc
2e394     2C 00 90 3D |  if_ae	jmp	#LR__4571
2e398     18 13 32 F9 | 	getword	arg01, local06, #0
2e39c     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2e3a0     FD 28 02 F6 | 	mov	local02, result1
2e3a4     17 2B 02 F6 | 	mov	local03, local05
2e3a8     01 2A 66 F0 | 	shl	local03, #1
2e3ac     13 2B 02 F1 | 	add	local03, local01
2e3b0     15 13 E2 FA | 	rdword	arg01, local03
2e3b4     01 2E 06 F1 | 	add	local05, #1
2e3b8     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2e3bc     FD 28 0A F2 | 	cmp	local02, result1 wz
2e3c0     08 00 90 AD |  if_e	jmp	#LR__4572
2e3c4                 | LR__4571
2e3c4                 | ' 				return 0;
2e3c4     00 FA 05 F6 | 	mov	result1, #0
2e3c8     44 00 90 FD | 	jmp	#LR__4576
2e3cc                 | LR__4572
2e3cc     18 2B 02 F6 | 	mov	local03, local06
2e3d0     14 00 90 FD | 	jmp	#LR__4574
2e3d4                 | LR__4573
2e3d4     18 31 32 F9 | 	getword	local06, local06, #0
2e3d8     7F 00 00 FF 
2e3dc     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2e3e0     00 FA 05 56 |  if_ne	mov	result1, #0
2e3e4     28 00 90 5D |  if_ne	jmp	#LR__4576
2e3e8                 | LR__4574
2e3e8     01 2C 06 F1 | 	add	local04, #1
2e3ec     5C FF 9F FD | 	jmp	#LR__4570
2e3f0                 | LR__4575
2e3f0     0A 29 C2 FA | 	rdbyte	local02, arg02
2e3f4     40 28 CE F7 | 	test	local02, #64 wz
2e3f8     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2e3fc     01 2E 66 50 |  if_ne	shl	local05, #1
2e400     13 2F 02 51 |  if_ne	add	local05, local01
2e404     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2e408     00 FA 05 56 |  if_ne	mov	result1, #0
2e40c                 | ' 
2e40c                 | ' 	return 1;
2e40c     01 FA 05 A6 |  if_e	mov	result1, #1
2e410                 | LR__4576
2e410     A7 F0 03 F6 | 	mov	ptra, fp
2e414     B2 00 A0 FD | 	call	#popregs_
2e418                 | _fatfs_cc_cmp_lfn_ret
2e418     2D 00 64 FD | 	ret
2e41c                 | 
2e41c                 | _fatfs_cc_pick_lfn
2e41c     09 01 02 F6 | 	mov	_var01, arg01
2e420     0A 13 02 F6 | 	mov	arg01, arg02
2e424     1A 12 06 F1 | 	add	arg01, #26
2e428                 | ' {
2e428                 | ' 
2e428                 | ' 	return *((WORD*)ptr);
2e428     09 FB E9 FA | 	rdword	result1, arg01 wz
2e42c     00 FA 05 56 |  if_ne	mov	result1, #0
2e430     D4 00 90 5D |  if_ne	jmp	#LR__4585
2e434     0A 03 C2 FA | 	rdbyte	_var02, arg02
2e438     40 02 26 F5 | 	andn	_var02, #64
2e43c     01 02 86 F1 | 	sub	_var02, #1
2e440     0D 02 06 FD | 	qmul	_var02, #13
2e444                 | ' 
2e444                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2e444                 | ' 
2e444                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2e444     01 04 06 F6 | 	mov	_var03, #1
2e448     00 06 06 F6 | 	mov	_var04, #0
2e44c     18 08 62 FD | 	getqx	_var05
2e450                 | LR__4580
2e450     0D 06 16 F2 | 	cmp	_var04, #13 wc
2e454     80 00 90 3D |  if_ae	jmp	#LR__4583
2e458     0A 13 02 F6 | 	mov	arg01, arg02
2e45c     03 03 02 F6 | 	mov	_var02, _var04
2e460     01 00 00 FF 
2e464     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2e468     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2e46c     01 03 C2 FA | 	rdbyte	_var02, _var02
2e470     01 02 06 FA | 	mul	_var02, #1
2e474     01 13 02 F1 | 	add	arg01, _var02
2e478     01 00 00 FF 
2e47c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2e480                 | ' {
2e480                 | ' 
2e480                 | ' 	return *((WORD*)ptr);
2e480     09 FB E1 FA | 	rdword	result1, arg01
2e484     FD 0A 02 F6 | 	mov	_var06, result1
2e488     02 03 02 F6 | 	mov	_var02, _var03
2e48c     0F 02 4E F7 | 	zerox	_var02, #15 wz
2e490     28 00 90 AD |  if_e	jmp	#LR__4581
2e494     00 09 16 F2 | 	cmp	_var05, #256 wc
2e498     00 FA 05 36 |  if_ae	mov	result1, #0
2e49c     68 00 90 3D |  if_ae	jmp	#LR__4585
2e4a0     04 03 02 F6 | 	mov	_var02, _var05
2e4a4     01 02 66 F0 | 	shl	_var02, #1
2e4a8     00 03 02 F1 | 	add	_var02, _var01
2e4ac     05 05 02 F6 | 	mov	_var03, _var06
2e4b0     01 05 52 FC | 	wrword	_var03, _var02
2e4b4     01 08 06 F1 | 	add	_var05, #1
2e4b8     14 00 90 FD | 	jmp	#LR__4582
2e4bc                 | LR__4581
2e4bc     05 0B 32 F9 | 	getword	_var06, _var06, #0
2e4c0     7F 00 00 FF 
2e4c4     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2e4c8     00 FA 05 56 |  if_ne	mov	result1, #0
2e4cc     38 00 90 5D |  if_ne	jmp	#LR__4585
2e4d0                 | LR__4582
2e4d0     01 06 06 F1 | 	add	_var04, #1
2e4d4     78 FF 9F FD | 	jmp	#LR__4580
2e4d8                 | LR__4583
2e4d8     0A 03 C2 FA | 	rdbyte	_var02, arg02
2e4dc     40 02 CE F7 | 	test	_var02, #64 wz
2e4e0     02 0D 02 56 |  if_ne	mov	_var07, _var03
2e4e4     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2e4e8     18 00 90 AD |  if_e	jmp	#LR__4584
2e4ec     00 09 16 F2 | 	cmp	_var05, #256 wc
2e4f0     00 FA 05 36 |  if_ae	mov	result1, #0
2e4f4     10 00 90 3D |  if_ae	jmp	#LR__4585
2e4f8     01 08 66 F0 | 	shl	_var05, #1
2e4fc     00 09 02 F1 | 	add	_var05, _var01
2e500     04 01 58 FC | 	wrword	#0, _var05
2e504                 | LR__4584
2e504                 | ' 		lfnbuf[i] = 0;
2e504                 | ' 	}
2e504                 | ' 
2e504                 | ' 	return 1;
2e504     01 FA 05 F6 | 	mov	result1, #1
2e508                 | LR__4585
2e508                 | _fatfs_cc_pick_lfn_ret
2e508     2D 00 64 FD | 	ret
2e50c                 | 
2e50c                 | _fatfs_cc_put_lfn
2e50c     0D 14 06 F1 | 	add	arg02, #13
2e510     0A 19 42 FC | 	wrbyte	arg04, arg02
2e514     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2e518     01 18 86 F1 | 	sub	arg04, #1
2e51c     0D 18 06 FD | 	qmul	arg04, #13
2e520     09 01 02 F6 | 	mov	_var01, arg01
2e524     02 14 86 F1 | 	sub	arg02, #2
2e528     0A 1F 48 FC | 	wrbyte	#15, arg02
2e52c     01 14 06 F1 | 	add	arg02, #1
2e530     0A 01 48 FC | 	wrbyte	#0, arg02
2e534     0C 14 86 F1 | 	sub	arg02, #12
2e538     0A 13 02 F6 | 	mov	arg01, arg02
2e53c     1A 12 06 F1 | 	add	arg01, #26
2e540     09 01 58 FC | 	wrword	#0, arg01
2e544     00 02 06 F6 | 	mov	_var02, #0
2e548     00 04 06 F6 | 	mov	_var03, #0
2e54c                 | ' 	BYTE* dir,
2e54c                 | ' 	BYTE ord,
2e54c                 | ' 	BYTE sum
2e54c                 | ' )
2e54c                 | ' {
2e54c                 | ' 	UINT i, s;
2e54c                 | ' 	WCHAR wc;
2e54c                 | ' 
2e54c                 | ' 
2e54c                 | ' 	dir[ 13 ] = sum;
2e54c                 | ' 	dir[ 11 ] =  0x0F ;
2e54c                 | ' 	dir[ 12 ] = 0;
2e54c                 | ' 	st_word(dir +  26 , 0);
2e54c                 | ' 
2e54c                 | ' 	i = (ord - 1) * 13;
2e54c                 | ' 	s = wc = 0;
2e54c                 | ' 	do {
2e54c     01 00 00 FF 
2e550     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2e554     18 06 62 FD | 	getqx	_var04
2e558     97 2A 48 FB | 	callpa	#(@LR__4591-@LR__4590)>>2,fcache_load_ptr_
2e55c                 | LR__4590
2e55c     01 19 32 F9 | 	getword	arg04, _var02, #0
2e560     7F 00 00 FF 
2e564     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2e568     03 13 02 56 |  if_ne	mov	arg01, _var04
2e56c     01 06 06 51 |  if_ne	add	_var04, #1
2e570     01 12 66 50 |  if_ne	shl	arg01, #1
2e574     00 13 02 51 |  if_ne	add	arg01, _var01
2e578     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2e57c     0A 13 02 F6 | 	mov	arg01, arg02
2e580     02 19 02 F6 | 	mov	arg04, _var03
2e584     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2e588     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e58c     01 18 06 FA | 	mul	arg04, #1
2e590     0C 13 02 F1 | 	add	arg01, arg04
2e594     09 03 52 FC | 	wrword	_var02, arg01
2e598     01 19 02 F6 | 	mov	arg04, _var02
2e59c     0F 18 4E F7 | 	zerox	arg04, #15 wz
2e5a0     0F 02 CE A9 |  if_e	bmask	_var02, #15
2e5a4     01 04 06 F1 | 	add	_var03, #1
2e5a8     0D 04 16 F2 | 	cmp	_var03, #13 wc
2e5ac     AC FF 9F CD |  if_b	jmp	#LR__4590
2e5b0                 | LR__4591
2e5b0     01 00 00 FF 
2e5b4     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2e5b8     01 03 32 F9 | 	getword	_var02, _var02, #0
2e5bc     7F 00 00 FF 
2e5c0     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2e5c4     01 06 66 50 |  if_ne	shl	_var04, #1
2e5c8     00 07 02 51 |  if_ne	add	_var04, _var01
2e5cc     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2e5d0     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2e5d4     40 16 46 A5 |  if_e	or	arg03, #64
2e5d8     0A 17 42 FC | 	wrbyte	arg03, arg02
2e5dc                 | _fatfs_cc_put_lfn_ret
2e5dc     2D 00 64 FD | 	ret
2e5e0                 | 
2e5e0                 | _fatfs_cc_gen_numname
2e5e0     08 4A 05 F6 | 	mov	COUNT_, #8
2e5e4     A8 00 A0 FD | 	call	#pushregs_
2e5e8     2C F0 07 F1 | 	add	ptra, #44
2e5ec     09 27 02 F6 | 	mov	local01, arg01
2e5f0     0A 29 02 F6 | 	mov	local02, arg02
2e5f4     0B 2B 02 F6 | 	mov	local03, arg03
2e5f8     0C 2D 02 F6 | 	mov	local04, arg04
2e5fc     13 13 02 F6 | 	mov	arg01, local01
2e600     14 15 02 F6 | 	mov	arg02, local02
2e604     0B 16 06 F6 | 	mov	arg03, #11
2e608     9C 72 BF FD | 	call	#__system____builtin_memmove
2e60c     06 2C 16 F2 | 	cmp	local04, #6 wc
2e610     48 00 90 CD |  if_b	jmp	#LR__4605
2e614     16 2F 02 F6 | 	mov	local05, local04
2e618     97 1E 48 FB | 	callpa	#(@LR__4603-@LR__4600)>>2,fcache_load_ptr_
2e61c                 | ' 		sreg = seq;
2e61c                 | ' 		while (*lfn) {
2e61c                 | LR__4600
2e61c     15 31 EA FA | 	rdword	local06, local03 wz
2e620     34 00 90 AD |  if_e	jmp	#LR__4604
2e624     15 33 E2 FA | 	rdword	local07, local03
2e628                 | ' 			wc = *lfn++;
2e628                 | ' 			for (i = 0; i < 16; i++) {
2e628     02 2A 06 F1 | 	add	local03, #2
2e62c     10 12 DC FC | 	rep	@LR__4602, #16
2e630                 | LR__4601
2e630     01 2E 66 F0 | 	shl	local05, #1
2e634     19 31 32 F9 | 	getword	local06, local07, #0
2e638     01 30 06 F5 | 	and	local06, #1
2e63c     18 2F 02 F1 | 	add	local05, local06
2e640     19 33 32 F9 | 	getword	local07, local07, #0
2e644     01 32 46 F0 | 	shr	local07, #1
2e648     10 2E 2E F4 | 	testbn	local05, #16 wz
2e64c     88 00 00 5F 
2e650     21 2E 66 55 |  if_ne	xor	local05, ##69665
2e654                 | LR__4602
2e654     C4 FF 9F FD | 	jmp	#LR__4600
2e658                 | LR__4603
2e658                 | LR__4604
2e658     17 2D 02 F6 | 	mov	local04, local05
2e65c                 | LR__4605
2e65c     07 32 06 F6 | 	mov	local07, #7
2e660                 | ' 			}
2e660                 | ' 		}
2e660                 | ' 		seq = (UINT)sreg;
2e660                 | ' 	}
2e660                 | ' 
2e660                 | ' 
2e660                 | ' 	i = 7;
2e660                 | ' 	do {
2e660     10 4E 05 F1 | 	add	fp, #16
2e664     97 1A 48 FB | 	callpa	#(@LR__4607-@LR__4606)>>2,fcache_load_ptr_
2e668                 | LR__4606
2e668     16 2F 42 F8 | 	getnib	local05, local04, #0
2e66c     30 2E 06 F1 | 	add	local05, #48
2e670     04 2C 46 F0 | 	shr	local04, #4
2e674     17 31 E2 F8 | 	getbyte	local06, local05, #0
2e678     3A 30 16 F2 | 	cmp	local06, #58 wc
2e67c     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2e680     07 2E 06 31 |  if_ae	add	local05, #7
2e684     19 31 02 F6 | 	mov	local06, local07
2e688     01 32 8E F1 | 	sub	local07, #1 wz
2e68c     A7 30 02 F1 | 	add	local06, fp
2e690     18 2F 42 FC | 	wrbyte	local05, local06
2e694     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2e698     CC FF 9F 5D |  if_ne	jmp	#LR__4606
2e69c                 | LR__4607
2e69c     19 31 02 F6 | 	mov	local06, local07
2e6a0     A7 30 02 F1 | 	add	local06, fp
2e6a4     18 FD 48 FC | 	wrbyte	#126, local06
2e6a8                 | ' 	ns[i] = '~';
2e6a8                 | ' 
2e6a8                 | ' 
2e6a8                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2e6a8     00 2E 06 F6 | 	mov	local05, #0
2e6ac     10 4E 85 F1 | 	sub	fp, #16
2e6b0     97 2A 48 FB | 	callpa	#(@LR__4610-@LR__4608)>>2,fcache_load_ptr_
2e6b4                 | LR__4608
2e6b4     19 2F 12 F2 | 	cmp	local05, local07 wc
2e6b8     4C 00 90 3D |  if_ae	jmp	#LR__4611
2e6bc     17 31 02 F6 | 	mov	local06, local05
2e6c0     13 31 02 F1 | 	add	local06, local01
2e6c4     18 31 C2 FA | 	rdbyte	local06, local06
2e6c8     20 30 0E F2 | 	cmp	local06, #32 wz
2e6cc     38 00 90 AD |  if_e	jmp	#LR__4611
2e6d0     17 13 02 F6 | 	mov	arg01, local05
2e6d4     13 13 02 F1 | 	add	arg01, local01
2e6d8     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2e6dc     00 FA 05 56 |  if_ne	mov	result1, #0
2e6e0                 | ' 
2e6e0                 | ' 	return 0;
2e6e0     00 FA 05 A6 |  if_e	mov	result1, #0
2e6e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e6e8     14 00 90 AD |  if_e	jmp	#LR__4609
2e6ec     19 31 02 F6 | 	mov	local06, local07
2e6f0     01 30 86 F1 | 	sub	local06, #1
2e6f4     18 2F 0A F2 | 	cmp	local05, local06 wz
2e6f8     0C 00 90 AD |  if_e	jmp	#LR__4611
2e6fc     01 2E 06 F1 | 	add	local05, #1
2e700                 | LR__4609
2e700     01 2E 06 F1 | 	add	local05, #1
2e704     AC FF 9F FD | 	jmp	#LR__4608
2e708                 | LR__4610
2e708                 | LR__4611
2e708     97 20 48 FB | 	callpa	#(@LR__4615-@LR__4612)>>2,fcache_load_ptr_
2e70c                 | ' 			j++;
2e70c                 | ' 		}
2e70c                 | ' 	}
2e70c                 | ' 	do {
2e70c                 | LR__4612
2e70c     17 31 02 F6 | 	mov	local06, local05
2e710     13 31 02 F1 | 	add	local06, local01
2e714     08 32 16 F2 | 	cmp	local07, #8 wc
2e718     01 2E 06 F1 | 	add	local05, #1
2e71c     1C 00 90 3D |  if_ae	jmp	#LR__4613
2e720     19 2D 02 F6 | 	mov	local04, local07
2e724     10 4E 05 F1 | 	add	fp, #16
2e728     A7 2C 02 F1 | 	add	local04, fp
2e72c     16 35 C2 FA | 	rdbyte	local08, local04
2e730     01 32 06 F1 | 	add	local07, #1
2e734     10 4E 85 F1 | 	sub	fp, #16
2e738     04 00 90 FD | 	jmp	#LR__4614
2e73c                 | LR__4613
2e73c     20 34 06 F6 | 	mov	local08, #32
2e740                 | LR__4614
2e740     18 35 42 FC | 	wrbyte	local08, local06
2e744     08 2E 16 F2 | 	cmp	local05, #8 wc
2e748     C0 FF 9F CD |  if_b	jmp	#LR__4612
2e74c                 | LR__4615
2e74c     A7 F0 03 F6 | 	mov	ptra, fp
2e750     B2 00 A0 FD | 	call	#popregs_
2e754                 | _fatfs_cc_gen_numname_ret
2e754     2D 00 64 FD | 	ret
2e758                 | 
2e758                 | _fatfs_cc_sum_sfn
2e758     00 00 06 F6 | 	mov	_var01, #0
2e75c                 | ' )
2e75c                 | ' {
2e75c                 | ' 	BYTE sum = 0;
2e75c                 | ' 	UINT n = 11;
2e75c                 | ' 
2e75c                 | ' 	do {
2e75c     97 12 48 FB | 	callpa	#(@LR__4622-@LR__4620)>>2,fcache_load_ptr_
2e760                 | LR__4620
2e760     0B 10 DC FC | 	rep	@LR__4623, #11
2e764                 | LR__4621
2e764     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2e768     01 FA 45 F0 | 	shr	result1, #1
2e76c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2e770     07 00 66 F0 | 	shl	_var01, #7
2e774     00 FB 01 F1 | 	add	result1, _var01
2e778     09 01 C2 FA | 	rdbyte	_var01, arg01
2e77c     FD 00 02 F1 | 	add	_var01, result1
2e780     01 12 06 F1 | 	add	arg01, #1
2e784                 | LR__4622
2e784                 | LR__4623
2e784                 | ' 	return sum;
2e784     00 FB 01 F6 | 	mov	result1, _var01
2e788                 | _fatfs_cc_sum_sfn_ret
2e788     2D 00 64 FD | 	ret
2e78c                 | 
2e78c                 | _fatfs_cc_dir_read
2e78c     0C 4A 05 F6 | 	mov	COUNT_, #12
2e790     A8 00 A0 FD | 	call	#pushregs_
2e794     09 27 02 F6 | 	mov	local01, arg01
2e798     0A 29 02 F6 | 	mov	local02, arg02
2e79c     04 2A 06 F6 | 	mov	local03, #4
2e7a0     13 2D 02 FB | 	rdlong	local04, local01
2e7a4     FF 2E 06 F6 | 	mov	local05, #255
2e7a8     FF 30 06 F6 | 	mov	local06, #255
2e7ac                 | ' )
2e7ac                 | ' {
2e7ac                 | ' 	FRESULT res = FR_NO_FILE;
2e7ac                 | ' 	FATFS *fs = dp->obj.fs;
2e7ac                 | ' 	BYTE attr, b;
2e7ac                 | ' 
2e7ac                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2e7ac                 | ' 
2e7ac                 | ' 
2e7ac                 | ' 	while (dp->sect) {
2e7ac                 | LR__4630
2e7ac     18 26 06 F1 | 	add	local01, #24
2e7b0     13 FB 09 FB | 	rdlong	result1, local01 wz
2e7b4     18 26 86 F1 | 	sub	local01, #24
2e7b8     AC 01 90 AD |  if_e	jmp	#LR__4640
2e7bc     18 26 06 F1 | 	add	local01, #24
2e7c0     13 15 02 FB | 	rdlong	arg02, local01
2e7c4     18 26 86 F1 | 	sub	local01, #24
2e7c8     16 13 02 F6 | 	mov	arg01, local04
2e7cc     AC ED BF FD | 	call	#_fatfs_cc_move_window
2e7d0     FD 2A 0A F6 | 	mov	local03, result1 wz
2e7d4     90 01 90 5D |  if_ne	jmp	#LR__4640
2e7d8     1C 26 06 F1 | 	add	local01, #28
2e7dc     13 FB 01 FB | 	rdlong	result1, local01
2e7e0     1C 26 86 F1 | 	sub	local01, #28
2e7e4     FD 32 C2 FA | 	rdbyte	local07, result1
2e7e8     19 FB 01 F6 | 	mov	result1, local07
2e7ec     07 FA 4D F7 | 	zerox	result1, #7 wz
2e7f0     04 2A 06 A6 |  if_e	mov	local03, #4
2e7f4                 | ' 			res = FR_NO_FILE; break;
2e7f4     70 01 90 AD |  if_e	jmp	#LR__4640
2e7f8     1C 26 06 F1 | 	add	local01, #28
2e7fc     13 35 02 FB | 	rdlong	local08, local01
2e800     0B 34 06 F1 | 	add	local08, #11
2e804     1A 37 C2 FA | 	rdbyte	local09, local08
2e808     3F 36 06 F5 | 	and	local09, #63
2e80c     16 26 86 F1 | 	sub	local01, #22
2e810     13 37 42 FC | 	wrbyte	local09, local01
2e814     06 26 86 F1 | 	sub	local01, #6
2e818     19 FB E1 F8 | 	getbyte	result1, local07, #0
2e81c     E5 FA 0D F2 | 	cmp	result1, #229 wz
2e820     19 35 02 56 |  if_ne	mov	local08, local07
2e824     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2e828     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2e82c     1C 00 90 AD |  if_e	jmp	#LR__4631
2e830     00 38 06 F6 | 	mov	local10, #0
2e834     1B 35 E2 F8 | 	getbyte	local08, local09, #0
2e838     20 34 26 F5 | 	andn	local08, #32
2e83c     08 34 0E F2 | 	cmp	local08, #8 wz
2e840     01 38 06 A6 |  if_e	mov	local10, #1
2e844     14 39 0A F2 | 	cmp	local10, local02 wz
2e848     08 00 90 AD |  if_e	jmp	#LR__4632
2e84c                 | LR__4631
2e84c     FF 2E 06 F6 | 	mov	local05, #255
2e850     00 01 90 FD | 	jmp	#LR__4639
2e854                 | LR__4632
2e854     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2e858     0F 36 0E F2 | 	cmp	local09, #15 wz
2e85c     B4 00 90 5D |  if_ne	jmp	#LR__4636
2e860     19 3B E2 F8 | 	getbyte	local11, local07, #0
2e864     40 3A CE F7 | 	test	local11, #64 wz
2e868     30 00 90 AD |  if_e	jmp	#LR__4633
2e86c     1C 26 06 F1 | 	add	local01, #28
2e870     13 3B 02 FB | 	rdlong	local11, local01
2e874     0D 3A 06 F1 | 	add	local11, #13
2e878     1D 31 C2 FA | 	rdbyte	local06, local11
2e87c     19 33 E2 F8 | 	getbyte	local07, local07, #0
2e880     BF 32 06 F5 | 	and	local07, #191
2e884     19 2F 02 F6 | 	mov	local05, local07
2e888     0C 26 86 F1 | 	sub	local01, #12
2e88c     13 3B 02 FB | 	rdlong	local11, local01
2e890     1C 26 06 F1 | 	add	local01, #28
2e894     13 3B 62 FC | 	wrlong	local11, local01
2e898     2C 26 86 F1 | 	sub	local01, #44
2e89c                 | LR__4633
2e89c     19 35 E2 F8 | 	getbyte	local08, local07, #0
2e8a0     17 39 E2 F8 | 	getbyte	local10, local05, #0
2e8a4     1C 35 0A F2 | 	cmp	local08, local10 wz
2e8a8     5C 00 90 5D |  if_ne	jmp	#LR__4634
2e8ac     18 39 E2 F8 | 	getbyte	local10, local06, #0
2e8b0     1C 26 06 F1 | 	add	local01, #28
2e8b4     13 37 02 FB | 	rdlong	local09, local01
2e8b8     1C 26 86 F1 | 	sub	local01, #28
2e8bc     0D 36 06 F1 | 	add	local09, #13
2e8c0     1B 35 C2 FA | 	rdbyte	local08, local09
2e8c4     1A 37 E2 F8 | 	getbyte	local09, local08, #0
2e8c8     1B 39 0A F2 | 	cmp	local10, local09 wz
2e8cc     38 00 90 5D |  if_ne	jmp	#LR__4634
2e8d0     0C 2C 06 F1 | 	add	local04, #12
2e8d4     16 13 02 FB | 	rdlong	arg01, local04
2e8d8     0C 2C 86 F1 | 	sub	local04, #12
2e8dc     1C 26 06 F1 | 	add	local01, #28
2e8e0     13 3D 02 FB | 	rdlong	local12, local01
2e8e4     1C 26 86 F1 | 	sub	local01, #28
2e8e8     1E 15 02 F6 | 	mov	arg02, local12
2e8ec     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2e8f0     00 FA 4D F2 | 	cmps	result1, #0 wz
2e8f4     17 3D 02 56 |  if_ne	mov	local12, local05
2e8f8     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
2e8fc     01 3C 86 51 |  if_ne	sub	local12, #1
2e900     1E 3B 02 56 |  if_ne	mov	local11, local12
2e904     04 00 90 5D |  if_ne	jmp	#LR__4635
2e908                 | LR__4634
2e908     FF 3A 06 F6 | 	mov	local11, #255
2e90c                 | LR__4635
2e90c     1D 2F 02 F6 | 	mov	local05, local11
2e910     40 00 90 FD | 	jmp	#LR__4638
2e914                 | LR__4636
2e914     17 3B 02 F6 | 	mov	local11, local05
2e918     07 3A 4E F7 | 	zerox	local11, #7 wz
2e91c     20 00 90 5D |  if_ne	jmp	#LR__4637
2e920     18 31 E2 F8 | 	getbyte	local06, local06, #0
2e924     1C 26 06 F1 | 	add	local01, #28
2e928     13 13 02 FB | 	rdlong	arg01, local01
2e92c     1C 26 86 F1 | 	sub	local01, #28
2e930     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2e934     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e938     FD 30 0A F2 | 	cmp	local06, result1 wz
2e93c     28 00 90 AD |  if_e	jmp	#LR__4640
2e940                 | LR__4637
2e940     2C 26 06 F1 | 	add	local01, #44
2e944     FF FF FF FF 
2e948     13 FF 6B FC | 	wrlong	##-1, local01
2e94c     2C 26 86 F1 | 	sub	local01, #44
2e950                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2e950                 | ' 					}
2e950                 | ' 					break;
2e950     14 00 90 FD | 	jmp	#LR__4640
2e954                 | LR__4638
2e954                 | LR__4639
2e954     13 13 02 F6 | 	mov	arg01, local01
2e958     00 14 06 F6 | 	mov	arg02, #0
2e95c     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2e960     FD 2A 0A F6 | 	mov	local03, result1 wz
2e964     44 FE 9F AD |  if_e	jmp	#LR__4630
2e968                 | LR__4640
2e968     00 2A 0E F2 | 	cmp	local03, #0 wz
2e96c     18 26 06 51 |  if_ne	add	local01, #24
2e970     13 01 68 5C |  if_ne	wrlong	#0, local01
2e974                 | ' 	return res;
2e974     15 FB 01 F6 | 	mov	result1, local03
2e978     A7 F0 03 F6 | 	mov	ptra, fp
2e97c     B2 00 A0 FD | 	call	#popregs_
2e980                 | _fatfs_cc_dir_read_ret
2e980     2D 00 64 FD | 	ret
2e984                 | 
2e984                 | _fatfs_cc_dir_find
2e984     0B 4A 05 F6 | 	mov	COUNT_, #11
2e988     A8 00 A0 FD | 	call	#pushregs_
2e98c     09 27 02 F6 | 	mov	local01, arg01
2e990     13 29 02 FB | 	rdlong	local02, local01
2e994     13 13 02 F6 | 	mov	arg01, local01
2e998     00 14 06 F6 | 	mov	arg02, #0
2e99c     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2e9a0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e9a4     18 02 90 5D |  if_ne	jmp	#LR__4662
2e9a8     FF 2A 06 F6 | 	mov	local03, #255
2e9ac     FF 2C 06 F6 | 	mov	local04, #255
2e9b0     2C 26 06 F1 | 	add	local01, #44
2e9b4     FF FF FF FF 
2e9b8     13 FF 6B FC | 	wrlong	##-1, local01
2e9bc     2C 26 86 F1 | 	sub	local01, #44
2e9c0                 | ' #line 2404 "ff.c"
2e9c0                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2e9c0                 | ' 
2e9c0                 | ' 	do {
2e9c0                 | LR__4650
2e9c0     18 26 06 F1 | 	add	local01, #24
2e9c4     13 15 02 FB | 	rdlong	arg02, local01
2e9c8     18 26 86 F1 | 	sub	local01, #24
2e9cc     14 13 02 F6 | 	mov	arg01, local02
2e9d0     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2e9d4     FD 2E 0A F6 | 	mov	local05, result1 wz
2e9d8     E0 01 90 5D |  if_ne	jmp	#LR__4661
2e9dc     1C 26 06 F1 | 	add	local01, #28
2e9e0     13 17 02 FB | 	rdlong	arg03, local01
2e9e4     1C 26 86 F1 | 	sub	local01, #28
2e9e8     0B 31 C2 FA | 	rdbyte	local06, arg03
2e9ec     18 17 02 F6 | 	mov	arg03, local06
2e9f0     07 16 4E F7 | 	zerox	arg03, #7 wz
2e9f4     04 2E 06 A6 |  if_e	mov	local05, #4
2e9f8     C0 01 90 AD |  if_e	jmp	#LR__4661
2e9fc     1C 26 06 F1 | 	add	local01, #28
2ea00     13 33 02 FB | 	rdlong	local07, local01
2ea04     19 17 02 F6 | 	mov	arg03, local07
2ea08     0B 16 06 F1 | 	add	arg03, #11
2ea0c     0B 35 C2 FA | 	rdbyte	local08, arg03
2ea10     3F 34 06 F5 | 	and	local08, #63
2ea14     16 26 86 F1 | 	sub	local01, #22
2ea18     13 35 42 FC | 	wrbyte	local08, local01
2ea1c     06 26 86 F1 | 	sub	local01, #6
2ea20     18 17 E2 F8 | 	getbyte	arg03, local06, #0
2ea24     E5 16 0E F2 | 	cmp	arg03, #229 wz
2ea28     18 00 90 AD |  if_e	jmp	#LR__4651
2ea2c     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
2ea30     08 16 CE F7 | 	test	arg03, #8 wz
2ea34     1A 33 02 56 |  if_ne	mov	local07, local08
2ea38     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
2ea3c     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
2ea40     18 00 90 AD |  if_e	jmp	#LR__4652
2ea44                 | LR__4651
2ea44     FF 2C 06 F6 | 	mov	local04, #255
2ea48     2C 26 06 F1 | 	add	local01, #44
2ea4c     FF FF FF FF 
2ea50     13 FF 6B FC | 	wrlong	##-1, local01
2ea54     2C 26 86 F1 | 	sub	local01, #44
2ea58     4C 01 90 FD | 	jmp	#LR__4660
2ea5c                 | LR__4652
2ea5c     1A 35 E2 F8 | 	getbyte	local08, local08, #0
2ea60     0F 34 0E F2 | 	cmp	local08, #15 wz
2ea64     C8 00 90 5D |  if_ne	jmp	#LR__4656
2ea68     2B 26 06 F1 | 	add	local01, #43
2ea6c     13 35 C2 FA | 	rdbyte	local08, local01
2ea70     2B 26 86 F1 | 	sub	local01, #43
2ea74     40 34 CE F7 | 	test	local08, #64 wz
2ea78     2C 01 90 5D |  if_ne	jmp	#LR__4659
2ea7c     18 37 E2 F8 | 	getbyte	local09, local06, #0
2ea80     40 36 CE F7 | 	test	local09, #64 wz
2ea84     30 00 90 AD |  if_e	jmp	#LR__4653
2ea88     1C 26 06 F1 | 	add	local01, #28
2ea8c     13 37 02 FB | 	rdlong	local09, local01
2ea90     0D 36 06 F1 | 	add	local09, #13
2ea94     1B 2B C2 FA | 	rdbyte	local03, local09
2ea98     18 31 E2 F8 | 	getbyte	local06, local06, #0
2ea9c     BF 30 06 F5 | 	and	local06, #191
2eaa0     18 2D 02 F6 | 	mov	local04, local06
2eaa4     0C 26 86 F1 | 	sub	local01, #12
2eaa8     13 37 02 FB | 	rdlong	local09, local01
2eaac     1C 26 06 F1 | 	add	local01, #28
2eab0     13 37 62 FC | 	wrlong	local09, local01
2eab4     2C 26 86 F1 | 	sub	local01, #44
2eab8                 | LR__4653
2eab8     18 39 E2 F8 | 	getbyte	local10, local06, #0
2eabc     16 33 E2 F8 | 	getbyte	local07, local04, #0
2eac0     19 39 0A F2 | 	cmp	local10, local07 wz
2eac4     5C 00 90 5D |  if_ne	jmp	#LR__4654
2eac8     15 35 E2 F8 | 	getbyte	local08, local03, #0
2eacc     1C 26 06 F1 | 	add	local01, #28
2ead0     13 33 02 FB | 	rdlong	local07, local01
2ead4     1C 26 86 F1 | 	sub	local01, #28
2ead8     0D 32 06 F1 | 	add	local07, #13
2eadc     19 31 C2 FA | 	rdbyte	local06, local07
2eae0     18 33 E2 F8 | 	getbyte	local07, local06, #0
2eae4     19 35 0A F2 | 	cmp	local08, local07 wz
2eae8     38 00 90 5D |  if_ne	jmp	#LR__4654
2eaec     0C 28 06 F1 | 	add	local02, #12
2eaf0     14 13 02 FB | 	rdlong	arg01, local02
2eaf4     0C 28 86 F1 | 	sub	local02, #12
2eaf8     1C 26 06 F1 | 	add	local01, #28
2eafc     13 3B 02 FB | 	rdlong	local11, local01
2eb00     1C 26 86 F1 | 	sub	local01, #28
2eb04     1D 15 02 F6 | 	mov	arg02, local11
2eb08     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2eb0c     00 FA 4D F2 | 	cmps	result1, #0 wz
2eb10     16 3B 02 56 |  if_ne	mov	local11, local04
2eb14     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
2eb18     01 3A 86 51 |  if_ne	sub	local11, #1
2eb1c     1D 37 02 56 |  if_ne	mov	local09, local11
2eb20     04 00 90 5D |  if_ne	jmp	#LR__4655
2eb24                 | LR__4654
2eb24     FF 36 06 F6 | 	mov	local09, #255
2eb28                 | LR__4655
2eb28     1B 2D 02 F6 | 	mov	local04, local09
2eb2c     78 00 90 FD | 	jmp	#LR__4659
2eb30                 | LR__4656
2eb30     16 37 02 F6 | 	mov	local09, local04
2eb34     07 36 4E F7 | 	zerox	local09, #7 wz
2eb38     20 00 90 5D |  if_ne	jmp	#LR__4657
2eb3c     15 39 E2 F8 | 	getbyte	local10, local03, #0
2eb40     1C 26 06 F1 | 	add	local01, #28
2eb44     13 13 02 FB | 	rdlong	arg01, local01
2eb48     1C 26 86 F1 | 	sub	local01, #28
2eb4c     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2eb50     FD FA E1 F8 | 	getbyte	result1, result1, #0
2eb54     FD 38 0A F2 | 	cmp	local10, result1 wz
2eb58     60 00 90 AD |  if_e	jmp	#LR__4661
2eb5c                 | LR__4657
2eb5c     2B 26 06 F1 | 	add	local01, #43
2eb60     13 37 C2 FA | 	rdbyte	local09, local01
2eb64     2B 26 86 F1 | 	sub	local01, #43
2eb68     01 36 CE F7 | 	test	local09, #1 wz
2eb6c     24 00 90 5D |  if_ne	jmp	#LR__4658
2eb70     1C 26 06 F1 | 	add	local01, #28
2eb74     13 13 02 FB | 	rdlong	arg01, local01
2eb78     04 26 06 F1 | 	add	local01, #4
2eb7c     13 15 02 F6 | 	mov	arg02, local01
2eb80     20 26 86 F1 | 	sub	local01, #32
2eb84     0B 16 06 F6 | 	mov	arg03, #11
2eb88     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2eb8c     00 FA 0D F2 | 	cmp	result1, #0 wz
2eb90     28 00 90 AD |  if_e	jmp	#LR__4661
2eb94                 | LR__4658
2eb94     FF 2C 06 F6 | 	mov	local04, #255
2eb98     2C 26 06 F1 | 	add	local01, #44
2eb9c     FF FF FF FF 
2eba0     13 FF 6B FC | 	wrlong	##-1, local01
2eba4     2C 26 86 F1 | 	sub	local01, #44
2eba8                 | LR__4659
2eba8                 | LR__4660
2eba8     13 13 02 F6 | 	mov	arg01, local01
2ebac     00 14 06 F6 | 	mov	arg02, #0
2ebb0     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2ebb4     FD 2E 0A F6 | 	mov	local05, result1 wz
2ebb8     04 FE 9F AD |  if_e	jmp	#LR__4650
2ebbc                 | LR__4661
2ebbc                 | ' 
2ebbc                 | ' 	return res;
2ebbc     17 FB 01 F6 | 	mov	result1, local05
2ebc0                 | LR__4662
2ebc0     A7 F0 03 F6 | 	mov	ptra, fp
2ebc4     B2 00 A0 FD | 	call	#popregs_
2ebc8                 | _fatfs_cc_dir_find_ret
2ebc8     2D 00 64 FD | 	ret
2ebcc                 | 
2ebcc                 | _fatfs_cc_dir_register
2ebcc     0A 4A 05 F6 | 	mov	COUNT_, #10
2ebd0     A8 00 A0 FD | 	call	#pushregs_
2ebd4     2C F0 07 F1 | 	add	ptra, #44
2ebd8     04 4E 05 F1 | 	add	fp, #4
2ebdc     A7 12 62 FC | 	wrlong	arg01, fp
2ebe0     09 27 02 FB | 	rdlong	local01, arg01
2ebe4     08 4E 05 F1 | 	add	fp, #8
2ebe8     A7 26 62 FC | 	wrlong	local01, fp
2ebec     08 4E 85 F1 | 	sub	fp, #8
2ebf0     A7 28 02 FB | 	rdlong	local02, fp
2ebf4     04 4E 85 F1 | 	sub	fp, #4
2ebf8     2B 28 06 F1 | 	add	local02, #43
2ebfc     14 29 C2 FA | 	rdbyte	local02, local02
2ec00     A0 28 CE F7 | 	test	local02, #160 wz
2ec04     06 FA 05 56 |  if_ne	mov	result1, #6
2ec08     F8 03 90 5D |  if_ne	jmp	#LR__4685
2ec0c                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2ec0c     14 4E 05 F1 | 	add	fp, #20
2ec10     A7 00 68 FC | 	wrlong	#0, fp
2ec14     14 4E 85 F1 | 	sub	fp, #20
2ec18     97 28 48 FB | 	callpa	#(@LR__4671-@LR__4670)>>2,fcache_load_ptr_
2ec1c                 | LR__4670
2ec1c     0C 4E 05 F1 | 	add	fp, #12
2ec20     A7 28 02 FB | 	rdlong	local02, fp
2ec24     0C 28 06 F1 | 	add	local02, #12
2ec28     14 2B 02 FB | 	rdlong	local03, local02
2ec2c     08 4E 05 F1 | 	add	fp, #8
2ec30     A7 2C 02 FB | 	rdlong	local04, fp
2ec34     14 4E 85 F1 | 	sub	fp, #20
2ec38     01 2C 66 F0 | 	shl	local04, #1
2ec3c     15 2D 02 F1 | 	add	local04, local03
2ec40     16 29 EA FA | 	rdword	local02, local04 wz
2ec44     24 00 90 AD |  if_e	jmp	#LR__4672
2ec48     14 4E 05 F1 | 	add	fp, #20
2ec4c     A7 2E 02 FB | 	rdlong	local05, fp
2ec50     17 31 02 F6 | 	mov	local06, local05
2ec54     17 33 02 F6 | 	mov	local07, local05
2ec58     19 35 02 F6 | 	mov	local08, local07
2ec5c     01 34 06 F1 | 	add	local08, #1
2ec60     A7 34 62 FC | 	wrlong	local08, fp
2ec64     14 4E 85 F1 | 	sub	fp, #20
2ec68     B0 FF 9F FD | 	jmp	#LR__4670
2ec6c                 | LR__4671
2ec6c                 | LR__4672
2ec6c     1C 4E 05 F1 | 	add	fp, #28
2ec70     A7 12 02 F6 | 	mov	arg01, fp
2ec74     18 4E 85 F1 | 	sub	fp, #24
2ec78     A7 14 02 FB | 	rdlong	arg02, fp
2ec7c     04 4E 85 F1 | 	sub	fp, #4
2ec80     20 14 06 F1 | 	add	arg02, #32
2ec84     0C 16 06 F6 | 	mov	arg03, #12
2ec88     1C 6C BF FD | 	call	#__system____builtin_memmove
2ec8c     27 4E 05 F1 | 	add	fp, #39
2ec90     A7 36 C2 FA | 	rdbyte	local09, fp
2ec94     27 4E 85 F1 | 	sub	fp, #39
2ec98     01 36 CE F7 | 	test	local09, #1 wz
2ec9c     F4 00 90 AD |  if_e	jmp	#LR__4675
2eca0     04 4E 05 F1 | 	add	fp, #4
2eca4     A7 38 02 FB | 	rdlong	local10, fp
2eca8     2B 38 06 F1 | 	add	local10, #43
2ecac     1C 81 48 FC | 	wrbyte	#64, local10
2ecb0                 | ' 		dp->fn[ 11 ] =  0x40 ;
2ecb0                 | ' 		for (n = 1; n < 100; n++) {
2ecb0     0C 4E 05 F1 | 	add	fp, #12
2ecb4     A7 02 68 FC | 	wrlong	#1, fp
2ecb8     10 4E 85 F1 | 	sub	fp, #16
2ecbc                 | LR__4673
2ecbc     10 4E 05 F1 | 	add	fp, #16
2ecc0     A7 28 02 FB | 	rdlong	local02, fp
2ecc4     10 4E 85 F1 | 	sub	fp, #16
2ecc8     64 28 16 F2 | 	cmp	local02, #100 wc
2eccc     70 00 90 3D |  if_ae	jmp	#LR__4674
2ecd0     04 4E 05 F1 | 	add	fp, #4
2ecd4     A7 12 02 FB | 	rdlong	arg01, fp
2ecd8     20 12 06 F1 | 	add	arg01, #32
2ecdc     18 4E 05 F1 | 	add	fp, #24
2ece0     A7 14 02 F6 | 	mov	arg02, fp
2ece4     10 4E 85 F1 | 	sub	fp, #16
2ece8     A7 38 02 FB | 	rdlong	local10, fp
2ecec     0C 38 06 F1 | 	add	local10, #12
2ecf0     1C 17 02 FB | 	rdlong	arg03, local10
2ecf4     04 4E 05 F1 | 	add	fp, #4
2ecf8     A7 18 02 FB | 	rdlong	arg04, fp
2ecfc     10 4E 85 F1 | 	sub	fp, #16
2ed00     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2ed04     04 4E 05 F1 | 	add	fp, #4
2ed08     A7 12 02 FB | 	rdlong	arg01, fp
2ed0c     04 4E 85 F1 | 	sub	fp, #4
2ed10     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2ed14     08 4E 05 F1 | 	add	fp, #8
2ed18     A7 FA 61 FC | 	wrlong	result1, fp
2ed1c     00 FA 4D F2 | 	cmps	result1, #0 wz
2ed20     08 4E 85 F1 | 	sub	fp, #8
2ed24     18 00 90 5D |  if_ne	jmp	#LR__4674
2ed28     10 4E 05 F1 | 	add	fp, #16
2ed2c     A7 38 02 FB | 	rdlong	local10, fp
2ed30     01 38 06 F1 | 	add	local10, #1
2ed34     A7 38 62 FC | 	wrlong	local10, fp
2ed38     10 4E 85 F1 | 	sub	fp, #16
2ed3c     7C FF 9F FD | 	jmp	#LR__4673
2ed40                 | LR__4674
2ed40     10 4E 05 F1 | 	add	fp, #16
2ed44     A7 38 02 FB | 	rdlong	local10, fp
2ed48     10 4E 85 F1 | 	sub	fp, #16
2ed4c     64 38 0E F2 | 	cmp	local10, #100 wz
2ed50     07 FA 05 A6 |  if_e	mov	result1, #7
2ed54     AC 02 90 AD |  if_e	jmp	#LR__4685
2ed58     08 4E 05 F1 | 	add	fp, #8
2ed5c     A7 38 02 FB | 	rdlong	local10, fp
2ed60     08 4E 85 F1 | 	sub	fp, #8
2ed64     04 38 0E F2 | 	cmp	local10, #4 wz
2ed68     08 4E 05 51 |  if_ne	add	fp, #8
2ed6c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2ed70     08 4E 85 51 |  if_ne	sub	fp, #8
2ed74     8C 02 90 5D |  if_ne	jmp	#LR__4685
2ed78     04 4E 05 F1 | 	add	fp, #4
2ed7c     A7 38 02 FB | 	rdlong	local10, fp
2ed80     23 4E 05 F1 | 	add	fp, #35
2ed84     A7 26 C2 FA | 	rdbyte	local01, fp
2ed88     27 4E 85 F1 | 	sub	fp, #39
2ed8c     2B 38 06 F1 | 	add	local10, #43
2ed90     1C 27 42 FC | 	wrbyte	local01, local10
2ed94                 | LR__4675
2ed94     27 4E 05 F1 | 	add	fp, #39
2ed98     A7 28 C2 FA | 	rdbyte	local02, fp
2ed9c     27 4E 85 F1 | 	sub	fp, #39
2eda0     02 28 CE F7 | 	test	local02, #2 wz
2eda4     20 00 90 AD |  if_e	jmp	#LR__4676
2eda8     14 4E 05 F1 | 	add	fp, #20
2edac     A7 38 02 FB | 	rdlong	local10, fp
2edb0     0C 38 06 F1 | 	add	local10, #12
2edb4     0D 38 16 FD | 	qdiv	local10, #13
2edb8     14 4E 85 F1 | 	sub	fp, #20
2edbc     18 38 62 FD | 	getqx	local10
2edc0     01 38 06 F1 | 	add	local10, #1
2edc4     04 00 90 FD | 	jmp	#LR__4677
2edc8                 | LR__4676
2edc8     01 38 06 F6 | 	mov	local10, #1
2edcc                 | LR__4677
2edcc     18 4E 05 F1 | 	add	fp, #24
2edd0     A7 38 62 FC | 	wrlong	local10, fp
2edd4     14 4E 85 F1 | 	sub	fp, #20
2edd8     A7 12 02 FB | 	rdlong	arg01, fp
2eddc     1C 15 02 F6 | 	mov	arg02, local10
2ede0     04 4E 85 F1 | 	sub	fp, #4
2ede4     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2ede8     08 4E 05 F1 | 	add	fp, #8
2edec     A7 FA 61 FC | 	wrlong	result1, fp
2edf0     08 4E 85 F1 | 	sub	fp, #8
2edf4     00 FA 0D F2 | 	cmp	result1, #0 wz
2edf8     38 01 90 5D |  if_ne	jmp	#LR__4682
2edfc     18 4E 05 F1 | 	add	fp, #24
2ee00     A7 38 02 FB | 	rdlong	local10, fp
2ee04     01 38 8E F1 | 	sub	local10, #1 wz
2ee08     A7 38 62 FC | 	wrlong	local10, fp
2ee0c     18 4E 85 F1 | 	sub	fp, #24
2ee10     20 01 90 AD |  if_e	jmp	#LR__4682
2ee14     04 4E 05 F1 | 	add	fp, #4
2ee18     A7 38 02 FB | 	rdlong	local10, fp
2ee1c     1C 13 02 F6 | 	mov	arg01, local10
2ee20     14 4E 05 F1 | 	add	fp, #20
2ee24     A7 18 02 FB | 	rdlong	arg04, fp
2ee28     18 4E 85 F1 | 	sub	fp, #24
2ee2c     05 18 66 F0 | 	shl	arg04, #5
2ee30     10 38 06 F1 | 	add	local10, #16
2ee34     1C 15 02 FB | 	rdlong	arg02, local10
2ee38     0C 15 82 F1 | 	sub	arg02, arg04
2ee3c     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2ee40     08 4E 05 F1 | 	add	fp, #8
2ee44     A7 FA 61 FC | 	wrlong	result1, fp
2ee48     08 4E 85 F1 | 	sub	fp, #8
2ee4c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ee50     E0 00 90 5D |  if_ne	jmp	#LR__4681
2ee54     04 4E 05 F1 | 	add	fp, #4
2ee58     A7 12 02 FB | 	rdlong	arg01, fp
2ee5c     04 4E 85 F1 | 	sub	fp, #4
2ee60     20 12 06 F1 | 	add	arg01, #32
2ee64     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2ee68     FD 38 02 F6 | 	mov	local10, result1
2ee6c     28 4E 05 F1 | 	add	fp, #40
2ee70     A7 38 42 FC | 	wrbyte	local10, fp
2ee74     28 4E 85 F1 | 	sub	fp, #40
2ee78                 | ' 			sum = sum_sfn(dp->fn);
2ee78                 | ' 			do {
2ee78                 | LR__4678
2ee78     0C 4E 05 F1 | 	add	fp, #12
2ee7c     A7 12 02 FB | 	rdlong	arg01, fp
2ee80     08 4E 85 F1 | 	sub	fp, #8
2ee84     A7 26 02 FB | 	rdlong	local01, fp
2ee88     04 4E 85 F1 | 	sub	fp, #4
2ee8c     18 26 06 F1 | 	add	local01, #24
2ee90     13 15 02 FB | 	rdlong	arg02, local01
2ee94     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2ee98     08 4E 05 F1 | 	add	fp, #8
2ee9c     A7 FA 61 FC | 	wrlong	result1, fp
2eea0     00 FA 4D F2 | 	cmps	result1, #0 wz
2eea4     08 4E 85 F1 | 	sub	fp, #8
2eea8     88 00 90 5D |  if_ne	jmp	#LR__4680
2eeac     0C 4E 05 F1 | 	add	fp, #12
2eeb0     A7 28 02 FB | 	rdlong	local02, fp
2eeb4     0C 28 06 F1 | 	add	local02, #12
2eeb8     14 13 02 FB | 	rdlong	arg01, local02
2eebc     08 4E 85 F1 | 	sub	fp, #8
2eec0     A7 26 02 FB | 	rdlong	local01, fp
2eec4     1C 26 06 F1 | 	add	local01, #28
2eec8     13 15 02 FB | 	rdlong	arg02, local01
2eecc     14 4E 05 F1 | 	add	fp, #20
2eed0     A7 16 02 FB | 	rdlong	arg03, fp
2eed4     10 4E 05 F1 | 	add	fp, #16
2eed8     A7 18 C2 FA | 	rdbyte	arg04, fp
2eedc     28 4E 85 F1 | 	sub	fp, #40
2eee0     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2eee4     0C 4E 05 F1 | 	add	fp, #12
2eee8     A7 38 02 FB | 	rdlong	local10, fp
2eeec     03 38 06 F1 | 	add	local10, #3
2eef0     1C 03 48 FC | 	wrbyte	#1, local10
2eef4     08 4E 85 F1 | 	sub	fp, #8
2eef8     A7 12 02 FB | 	rdlong	arg01, fp
2eefc     04 4E 85 F1 | 	sub	fp, #4
2ef00     00 14 06 F6 | 	mov	arg02, #0
2ef04     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2ef08     08 4E 05 F1 | 	add	fp, #8
2ef0c     A7 FA 61 FC | 	wrlong	result1, fp
2ef10     00 FA 4D F2 | 	cmps	result1, #0 wz
2ef14     08 4E 85 F1 | 	sub	fp, #8
2ef18     18 00 90 5D |  if_ne	jmp	#LR__4679
2ef1c     18 4E 05 F1 | 	add	fp, #24
2ef20     A7 38 02 FB | 	rdlong	local10, fp
2ef24     01 38 8E F1 | 	sub	local10, #1 wz
2ef28     A7 38 62 FC | 	wrlong	local10, fp
2ef2c     18 4E 85 F1 | 	sub	fp, #24
2ef30     44 FF 9F 5D |  if_ne	jmp	#LR__4678
2ef34                 | LR__4679
2ef34                 | LR__4680
2ef34                 | LR__4681
2ef34                 | LR__4682
2ef34     08 4E 05 F1 | 	add	fp, #8
2ef38     A7 38 0A FB | 	rdlong	local10, fp wz
2ef3c     08 4E 85 F1 | 	sub	fp, #8
2ef40     B4 00 90 5D |  if_ne	jmp	#LR__4684
2ef44     0C 4E 05 F1 | 	add	fp, #12
2ef48     A7 12 02 FB | 	rdlong	arg01, fp
2ef4c     08 4E 85 F1 | 	sub	fp, #8
2ef50     A7 26 02 FB | 	rdlong	local01, fp
2ef54     04 4E 85 F1 | 	sub	fp, #4
2ef58     18 26 06 F1 | 	add	local01, #24
2ef5c     13 15 02 FB | 	rdlong	arg02, local01
2ef60     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2ef64     08 4E 05 F1 | 	add	fp, #8
2ef68     A7 FA 61 FC | 	wrlong	result1, fp
2ef6c     08 4E 85 F1 | 	sub	fp, #8
2ef70     00 FA 0D F2 | 	cmp	result1, #0 wz
2ef74     80 00 90 5D |  if_ne	jmp	#LR__4683
2ef78     04 4E 05 F1 | 	add	fp, #4
2ef7c     A7 28 02 FB | 	rdlong	local02, fp
2ef80     04 4E 85 F1 | 	sub	fp, #4
2ef84     1C 28 06 F1 | 	add	local02, #28
2ef88     14 13 02 FB | 	rdlong	arg01, local02
2ef8c     00 14 06 F6 | 	mov	arg02, #0
2ef90     20 16 06 F6 | 	mov	arg03, #32
2ef94     98 00 A0 FD | 	call	#\builtin_bytefill_
2ef98     04 4E 05 F1 | 	add	fp, #4
2ef9c     A7 14 02 FB | 	rdlong	arg02, fp
2efa0     0A 27 02 F6 | 	mov	local01, arg02
2efa4     1C 26 06 F1 | 	add	local01, #28
2efa8     13 13 02 FB | 	rdlong	arg01, local01
2efac     04 4E 85 F1 | 	sub	fp, #4
2efb0     20 14 06 F1 | 	add	arg02, #32
2efb4     0B 16 06 F6 | 	mov	arg03, #11
2efb8     EC 68 BF FD | 	call	#__system____builtin_memmove
2efbc     04 4E 05 F1 | 	add	fp, #4
2efc0     A7 36 02 FB | 	rdlong	local09, fp
2efc4     1B 39 02 F6 | 	mov	local10, local09
2efc8     1C 38 06 F1 | 	add	local10, #28
2efcc     1C 27 02 FB | 	rdlong	local01, local10
2efd0     2B 36 06 F1 | 	add	local09, #43
2efd4     1B 39 C2 FA | 	rdbyte	local10, local09
2efd8     18 38 06 F5 | 	and	local10, #24
2efdc     0C 26 06 F1 | 	add	local01, #12
2efe0     13 39 42 FC | 	wrbyte	local10, local01
2efe4     08 4E 05 F1 | 	add	fp, #8
2efe8     A7 38 02 FB | 	rdlong	local10, fp
2efec     0C 4E 85 F1 | 	sub	fp, #12
2eff0     03 38 06 F1 | 	add	local10, #3
2eff4     1C 03 48 FC | 	wrbyte	#1, local10
2eff8                 | LR__4683
2eff8                 | LR__4684
2eff8                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2eff8                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2eff8                 | ' 
2eff8                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2eff8                 | ' 
2eff8                 | ' 			fs->wflag = 1;
2eff8                 | ' 		}
2eff8                 | ' 	}
2eff8                 | ' 
2eff8                 | ' 	return res;
2eff8     08 4E 05 F1 | 	add	fp, #8
2effc     A7 FA 01 FB | 	rdlong	result1, fp
2f000     08 4E 85 F1 | 	sub	fp, #8
2f004                 | LR__4685
2f004     A7 F0 03 F6 | 	mov	ptra, fp
2f008     B2 00 A0 FD | 	call	#popregs_
2f00c                 | _fatfs_cc_dir_register_ret
2f00c     2D 00 64 FD | 	ret
2f010                 | 
2f010                 | _fatfs_cc_dir_remove
2f010     05 4A 05 F6 | 	mov	COUNT_, #5
2f014     A8 00 A0 FD | 	call	#pushregs_
2f018     09 27 02 F6 | 	mov	local01, arg01
2f01c     13 29 02 FB | 	rdlong	local02, local01
2f020     10 26 06 F1 | 	add	local01, #16
2f024     13 2B 02 FB | 	rdlong	local03, local01
2f028     1C 26 06 F1 | 	add	local01, #28
2f02c     13 15 02 FB | 	rdlong	arg02, local01
2f030     2C 26 86 F1 | 	sub	local01, #44
2f034     FF FF 7F FF 
2f038     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2f03c     00 2C 06 A6 |  if_e	mov	local04, #0
2f040     18 00 90 AD |  if_e	jmp	#LR__4690
2f044     13 13 02 F6 | 	mov	arg01, local01
2f048     2C 26 06 F1 | 	add	local01, #44
2f04c     13 15 02 FB | 	rdlong	arg02, local01
2f050     2C 26 86 F1 | 	sub	local01, #44
2f054     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2f058     FD 2C 02 F6 | 	mov	local04, result1
2f05c                 | LR__4690
2f05c     16 2F 0A F6 | 	mov	local05, local04 wz
2f060     64 00 90 5D |  if_ne	jmp	#LR__4693
2f064                 | ' 		do {
2f064                 | LR__4691
2f064     18 26 06 F1 | 	add	local01, #24
2f068     13 15 02 FB | 	rdlong	arg02, local01
2f06c     18 26 86 F1 | 	sub	local01, #24
2f070     14 13 02 F6 | 	mov	arg01, local02
2f074     04 E5 BF FD | 	call	#_fatfs_cc_move_window
2f078     FD 2E 0A F6 | 	mov	local05, result1 wz
2f07c     40 00 90 5D |  if_ne	jmp	#LR__4692
2f080     1C 26 06 F1 | 	add	local01, #28
2f084     13 2D 02 FB | 	rdlong	local04, local01
2f088     16 CB 49 FC | 	wrbyte	#229, local04
2f08c     03 28 06 F1 | 	add	local02, #3
2f090     14 03 48 FC | 	wrbyte	#1, local02
2f094     03 28 86 F1 | 	sub	local02, #3
2f098     0C 26 86 F1 | 	sub	local01, #12
2f09c     13 2D 02 FB | 	rdlong	local04, local01
2f0a0     10 26 86 F1 | 	sub	local01, #16
2f0a4     15 2D 12 F2 | 	cmp	local04, local03 wc
2f0a8     14 00 90 3D |  if_ae	jmp	#LR__4692
2f0ac     13 13 02 F6 | 	mov	arg01, local01
2f0b0     00 14 06 F6 | 	mov	arg02, #0
2f0b4     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2f0b8     FD 2E 0A F6 | 	mov	local05, result1 wz
2f0bc     A4 FF 9F AD |  if_e	jmp	#LR__4691
2f0c0                 | LR__4692
2f0c0     04 2E 0E F2 | 	cmp	local05, #4 wz
2f0c4     02 2E 06 A6 |  if_e	mov	local05, #2
2f0c8                 | LR__4693
2f0c8                 | ' 	}
2f0c8                 | ' #line 2590 "ff.c"
2f0c8                 | ' 	return res;
2f0c8     17 FB 01 F6 | 	mov	result1, local05
2f0cc     A7 F0 03 F6 | 	mov	ptra, fp
2f0d0     B2 00 A0 FD | 	call	#popregs_
2f0d4                 | _fatfs_cc_dir_remove_ret
2f0d4     2D 00 64 FD | 	ret
2f0d8                 | 
2f0d8                 | _fatfs_cc_get_fileinfo
2f0d8     0F 4A 05 F6 | 	mov	COUNT_, #15
2f0dc     A8 00 A0 FD | 	call	#pushregs_
2f0e0     09 27 02 F6 | 	mov	local01, arg01
2f0e4     0A 29 02 F6 | 	mov	local02, arg02
2f0e8     13 2B 02 FB | 	rdlong	local03, local01
2f0ec     1C 28 06 F1 | 	add	local02, #28
2f0f0     14 01 48 FC | 	wrbyte	#0, local02
2f0f4     1C 28 86 F1 | 	sub	local02, #28
2f0f8     18 26 06 F1 | 	add	local01, #24
2f0fc     13 2D 0A FB | 	rdlong	local04, local01 wz
2f100     18 26 86 F1 | 	sub	local01, #24
2f104     90 03 90 AD |  if_e	jmp	#LR__4714
2f108     2C 26 06 F1 | 	add	local01, #44
2f10c     13 2D 02 FB | 	rdlong	local04, local01
2f110     2C 26 86 F1 | 	sub	local01, #44
2f114     FF FF 7F FF 
2f118     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2f11c     D8 00 90 AD |  if_e	jmp	#LR__4703
2f120     00 2E 06 F6 | 	mov	local05, #0
2f124     00 30 06 F6 | 	mov	local06, #0
2f128     00 32 06 F6 | 	mov	local07, #0
2f12c                 | ' 			si = di = 0;
2f12c                 | ' 			hs = 0;
2f12c                 | ' 			while (fs->lfnbuf[si] != 0) {
2f12c                 | LR__4700
2f12c     0C 2A 06 F1 | 	add	local03, #12
2f130     15 2D 02 FB | 	rdlong	local04, local03
2f134     0C 2A 86 F1 | 	sub	local03, #12
2f138     18 35 02 F6 | 	mov	local08, local06
2f13c     01 34 66 F0 | 	shl	local08, #1
2f140     16 35 02 F1 | 	add	local08, local04
2f144     1A 2D EA FA | 	rdword	local04, local08 wz
2f148     90 00 90 AD |  if_e	jmp	#LR__4702
2f14c     0C 2A 06 F1 | 	add	local03, #12
2f150     15 37 02 FB | 	rdlong	local09, local03
2f154     0C 2A 86 F1 | 	sub	local03, #12
2f158     18 39 02 F6 | 	mov	local10, local06
2f15c     01 38 66 F0 | 	shl	local10, #1
2f160     1B 39 02 F1 | 	add	local10, local09
2f164     1C 3B E2 FA | 	rdword	local11, local10
2f168     19 2D 02 F6 | 	mov	local04, local07
2f16c     0F 2C 4E F7 | 	zerox	local04, #15 wz
2f170     01 30 06 F1 | 	add	local06, #1
2f174     24 00 90 5D |  if_ne	jmp	#LR__4701
2f178     1D 3D 32 F9 | 	getword	local12, local11, #0
2f17c     6C 00 00 FF 
2f180     00 3C 16 F2 | 	cmp	local12, ##55296 wc
2f184     14 00 90 CD |  if_b	jmp	#LR__4701
2f188     1D 3F 32 F9 | 	getword	local13, local11, #0
2f18c     70 00 00 FF 
2f190     00 3E 16 F2 | 	cmp	local13, ##57344 wc
2f194     1D 33 02 C6 |  if_b	mov	local07, local11
2f198                 | ' 					hs = wc; continue;
2f198     90 FF 9F CD |  if_b	jmp	#LR__4700
2f19c                 | LR__4701
2f19c     19 13 32 F9 | 	getword	arg01, local07, #0
2f1a0     10 12 66 F0 | 	shl	arg01, #16
2f1a4     1D 3B 32 F9 | 	getword	local11, local11, #0
2f1a8     1D 13 42 F5 | 	or	arg01, local11
2f1ac     17 15 02 F6 | 	mov	arg02, local05
2f1b0     1C 28 06 F1 | 	add	local02, #28
2f1b4     14 15 02 F1 | 	add	arg02, local02
2f1b8     FF 16 06 F6 | 	mov	arg03, #255
2f1bc     17 17 82 F1 | 	sub	arg03, local05
2f1c0     1C 28 86 F1 | 	sub	local02, #28
2f1c4     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2f1c8     FD 40 0A F6 | 	mov	local14, result1 wz
2f1cc     00 2E 06 A6 |  if_e	mov	local05, #0
2f1d0     20 2F 02 51 |  if_ne	add	local05, local14
2f1d4     00 32 06 56 |  if_ne	mov	local07, #0
2f1d8     50 FF 9F 5D |  if_ne	jmp	#LR__4700
2f1dc                 | LR__4702
2f1dc     19 2D 02 F6 | 	mov	local04, local07
2f1e0     0F 2C 4E F7 | 	zerox	local04, #15 wz
2f1e4     00 2E 06 56 |  if_ne	mov	local05, #0
2f1e8     1C 28 06 F1 | 	add	local02, #28
2f1ec     14 2F 02 F1 | 	add	local05, local02
2f1f0     17 01 48 FC | 	wrbyte	#0, local05
2f1f4     1C 28 86 F1 | 	sub	local02, #28
2f1f8                 | LR__4703
2f1f8     00 2E 06 F6 | 	mov	local05, #0
2f1fc     00 30 06 F6 | 	mov	local06, #0
2f200                 | ' 			fno->fname[di] = 0;
2f200                 | ' 		}
2f200                 | ' 	}
2f200                 | ' 
2f200                 | ' 	si = di = 0;
2f200                 | ' 	while (si < 11) {
2f200                 | LR__4704
2f200     0B 30 16 F2 | 	cmp	local06, #11 wc
2f204     20 01 90 3D |  if_ae	jmp	#LR__4707
2f208     1C 26 06 F1 | 	add	local01, #28
2f20c     13 37 02 FB | 	rdlong	local09, local01
2f210     1C 26 86 F1 | 	sub	local01, #28
2f214     18 39 02 F6 | 	mov	local10, local06
2f218     1B 39 02 F1 | 	add	local10, local09
2f21c     1C 3B C2 FA | 	rdbyte	local11, local10
2f220     1D 2D 32 F9 | 	getword	local04, local11, #0
2f224     20 2C 0E F2 | 	cmp	local04, #32 wz
2f228     01 30 06 F1 | 	add	local06, #1
2f22c     D0 FF 9F AD |  if_e	jmp	#LR__4704
2f230     1D 2D 32 F9 | 	getword	local04, local11, #0
2f234     05 2C 0E F2 | 	cmp	local04, #5 wz
2f238     E5 3A 06 A6 |  if_e	mov	local11, #229
2f23c     09 30 0E F2 | 	cmp	local06, #9 wz
2f240     20 00 90 5D |  if_ne	jmp	#LR__4705
2f244     0C 2E 16 F2 | 	cmp	local05, #12 wc
2f248     18 00 90 3D |  if_ae	jmp	#LR__4705
2f24c     17 3F 02 F6 | 	mov	local13, local05
2f250     0C 28 06 F1 | 	add	local02, #12
2f254     14 3F 02 F1 | 	add	local13, local02
2f258     1F 5D 48 FC | 	wrbyte	#46, local13
2f25c     01 2E 06 F1 | 	add	local05, #1
2f260     0C 28 86 F1 | 	sub	local02, #12
2f264                 | LR__4705
2f264     1D 13 32 F9 | 	getword	arg01, local11, #0
2f268     07 12 4E F7 | 	zerox	arg01, #7 wz
2f26c     00 FA 05 56 |  if_ne	mov	result1, #0
2f270                 | ' 
2f270                 | ' 	return 0;
2f270     00 FA 05 A6 |  if_e	mov	result1, #0
2f274     00 FA 0D F2 | 	cmp	result1, #0 wz
2f278     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
2f27c     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
2f280     50 00 90 AD |  if_e	jmp	#LR__4706
2f284     1C 26 06 F1 | 	add	local01, #28
2f288     13 39 02 FB | 	rdlong	local10, local01
2f28c     1C 26 86 F1 | 	sub	local01, #28
2f290     18 35 02 F6 | 	mov	local08, local06
2f294     1C 35 02 F1 | 	add	local08, local10
2f298     1A 13 CA FA | 	rdbyte	arg01, local08 wz
2f29c     00 FA 05 56 |  if_ne	mov	result1, #0
2f2a0                 | ' 
2f2a0                 | ' 	return 0;
2f2a0     00 FA 05 A6 |  if_e	mov	result1, #0
2f2a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f2a8     28 00 90 AD |  if_e	jmp	#LR__4706
2f2ac     1D 3B 32 F9 | 	getword	local11, local11, #0
2f2b0     08 3A 66 F0 | 	shl	local11, #8
2f2b4     1C 26 06 F1 | 	add	local01, #28
2f2b8     13 41 02 FB | 	rdlong	local14, local01
2f2bc     1C 26 86 F1 | 	sub	local01, #28
2f2c0     18 37 02 F6 | 	mov	local09, local06
2f2c4     20 37 02 F1 | 	add	local09, local14
2f2c8     1B 3D C2 FA | 	rdbyte	local12, local09
2f2cc     1E 3B 42 F5 | 	or	local11, local12
2f2d0     01 30 06 F1 | 	add	local06, #1
2f2d4                 | LR__4706
2f2d4     1D 13 02 F6 | 	mov	arg01, local11
2f2d8     01 00 00 FF 
2f2dc     52 15 06 F6 | 	mov	arg02, ##850
2f2e0     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2f2e4     FD 3A 02 F6 | 	mov	local11, result1
2f2e8     1D 2D 02 F6 | 	mov	local04, local11
2f2ec     0F 2C 4E F7 | 	zerox	local04, #15 wz
2f2f0     00 2E 06 A6 |  if_e	mov	local05, #0
2f2f4     30 00 90 AD |  if_e	jmp	#LR__4707
2f2f8     1D 13 32 F9 | 	getword	arg01, local11, #0
2f2fc     17 15 02 F6 | 	mov	arg02, local05
2f300     0C 28 06 F1 | 	add	local02, #12
2f304     14 15 02 F1 | 	add	arg02, local02
2f308     0C 16 06 F6 | 	mov	arg03, #12
2f30c     17 17 82 F1 | 	sub	arg03, local05
2f310     0C 28 86 F1 | 	sub	local02, #12
2f314     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2f318     FD 40 0A F6 | 	mov	local14, result1 wz
2f31c     00 2E 06 A6 |  if_e	mov	local05, #0
2f320     20 2F 02 51 |  if_ne	add	local05, local14
2f324     D8 FE 9F 5D |  if_ne	jmp	#LR__4704
2f328                 | LR__4707
2f328     17 2D 02 F6 | 	mov	local04, local05
2f32c     0C 28 06 F1 | 	add	local02, #12
2f330     14 2D 02 F1 | 	add	local04, local02
2f334     16 01 48 FC | 	wrbyte	#0, local04
2f338     10 28 06 F1 | 	add	local02, #16
2f33c     14 2D CA FA | 	rdbyte	local04, local02 wz
2f340     1C 28 86 F1 | 	sub	local02, #28
2f344     F8 00 90 5D |  if_ne	jmp	#LR__4713
2f348     00 2E 0E F2 | 	cmp	local05, #0 wz
2f34c     1C 00 90 5D |  if_ne	jmp	#LR__4708
2f350     17 3F 02 F6 | 	mov	local13, local05
2f354     1C 28 06 F1 | 	add	local02, #28
2f358     14 3F 02 F1 | 	add	local13, local02
2f35c     1F 7F 48 FC | 	wrbyte	#63, local13
2f360     01 2E 06 F1 | 	add	local05, #1
2f364     1C 28 86 F1 | 	sub	local02, #28
2f368     A4 00 90 FD | 	jmp	#LR__4712
2f36c                 | LR__4708
2f36c                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2f36c     00 2E 06 F6 | 	mov	local05, #0
2f370     00 30 06 F6 | 	mov	local06, #0
2f374     08 42 06 F6 | 	mov	local15, #8
2f378                 | LR__4709
2f378     18 2D 02 F6 | 	mov	local04, local06
2f37c     0C 28 06 F1 | 	add	local02, #12
2f380     14 2D 02 F1 | 	add	local04, local02
2f384     16 3F CA FA | 	rdbyte	local13, local04 wz
2f388     0C 28 86 F1 | 	sub	local02, #12
2f38c     80 00 90 AD |  if_e	jmp	#LR__4711
2f390     18 35 02 F6 | 	mov	local08, local06
2f394     0C 28 06 F1 | 	add	local02, #12
2f398     14 35 02 F1 | 	add	local08, local02
2f39c     1A 3B C2 FA | 	rdbyte	local11, local08
2f3a0     1D 41 32 F9 | 	getword	local14, local11, #0
2f3a4     2E 40 0E F2 | 	cmp	local14, #46 wz
2f3a8     0C 28 86 F1 | 	sub	local02, #12
2f3ac     10 42 06 A6 |  if_e	mov	local15, #16
2f3b0     1D 41 32 F9 | 	getword	local14, local11, #0
2f3b4     41 40 16 F2 | 	cmp	local14, #65 wc
2f3b8     30 00 90 CD |  if_b	jmp	#LR__4710
2f3bc     1D 35 32 F9 | 	getword	local08, local11, #0
2f3c0     5B 34 16 F2 | 	cmp	local08, #91 wc
2f3c4     24 00 90 3D |  if_ae	jmp	#LR__4710
2f3c8     1C 26 06 F1 | 	add	local01, #28
2f3cc     13 37 02 FB | 	rdlong	local09, local01
2f3d0     1C 26 86 F1 | 	sub	local01, #28
2f3d4     0C 36 06 F1 | 	add	local09, #12
2f3d8     1B 39 C2 FA | 	rdbyte	local10, local09
2f3dc     21 41 E2 F8 | 	getbyte	local14, local15, #0
2f3e0     20 39 CA F7 | 	test	local10, local14 wz
2f3e4     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
2f3e8     20 3A 06 51 |  if_ne	add	local11, #32
2f3ec                 | LR__4710
2f3ec     17 41 02 F6 | 	mov	local14, local05
2f3f0     1C 28 06 F1 | 	add	local02, #28
2f3f4     14 41 02 F1 | 	add	local14, local02
2f3f8     1D 3B 32 F9 | 	getword	local11, local11, #0
2f3fc     20 3B 42 FC | 	wrbyte	local11, local14
2f400     01 30 06 F1 | 	add	local06, #1
2f404     01 2E 06 F1 | 	add	local05, #1
2f408     1C 28 86 F1 | 	sub	local02, #28
2f40c     68 FF 9F FD | 	jmp	#LR__4709
2f410                 | LR__4711
2f410                 | LR__4712
2f410     1C 28 06 F1 | 	add	local02, #28
2f414     14 2F 02 F1 | 	add	local05, local02
2f418     17 01 48 FC | 	wrbyte	#0, local05
2f41c     1C 26 06 F1 | 	add	local01, #28
2f420     13 2D 02 FB | 	rdlong	local04, local01
2f424     1C 26 86 F1 | 	sub	local01, #28
2f428     0C 2C 06 F1 | 	add	local04, #12
2f42c     16 3F CA FA | 	rdbyte	local13, local04 wz
2f430     1C 28 86 F1 | 	sub	local02, #28
2f434     0C 28 06 A1 |  if_e	add	local02, #12
2f438     14 01 48 AC |  if_e	wrbyte	#0, local02
2f43c     0C 28 86 A1 |  if_e	sub	local02, #12
2f440                 | LR__4713
2f440     1C 26 06 F1 | 	add	local01, #28
2f444     13 3D 02 FB | 	rdlong	local12, local01
2f448     0B 3C 06 F1 | 	add	local12, #11
2f44c     1E 2D C2 FA | 	rdbyte	local04, local12
2f450     3F 2C 06 F5 | 	and	local04, #63
2f454     08 28 06 F1 | 	add	local02, #8
2f458     14 2D 42 FC | 	wrbyte	local04, local02
2f45c     08 28 86 F1 | 	sub	local02, #8
2f460     13 13 02 FB | 	rdlong	arg01, local01
2f464     1C 12 06 F1 | 	add	arg01, #28
2f468                 | ' {
2f468                 | ' 
2f468                 | ' 	return *((DWORD*)ptr);
2f468     09 FB 01 FB | 	rdlong	result1, arg01
2f46c     14 FB 61 FC | 	wrlong	result1, local02
2f470     13 13 02 FB | 	rdlong	arg01, local01
2f474     16 12 06 F1 | 	add	arg01, #22
2f478                 | ' {
2f478                 | ' 
2f478                 | ' 	return *((WORD*)ptr);
2f478     09 FB E1 FA | 	rdword	result1, arg01
2f47c     06 28 06 F1 | 	add	local02, #6
2f480     14 FB 51 FC | 	wrword	result1, local02
2f484     13 13 02 FB | 	rdlong	arg01, local01
2f488     18 12 06 F1 | 	add	arg01, #24
2f48c                 | ' {
2f48c                 | ' 
2f48c                 | ' 	return *((WORD*)ptr);
2f48c     09 FB E1 FA | 	rdword	result1, arg01
2f490     02 28 86 F1 | 	sub	local02, #2
2f494     14 FB 51 FC | 	wrword	result1, local02
2f498                 | LR__4714
2f498     A7 F0 03 F6 | 	mov	ptra, fp
2f49c     B2 00 A0 FD | 	call	#popregs_
2f4a0                 | _fatfs_cc_get_fileinfo_ret
2f4a0     2D 00 64 FD | 	ret
2f4a4                 | 
2f4a4                 | _fatfs_cc_create_name
2f4a4     0D 4A 05 F6 | 	mov	COUNT_, #13
2f4a8     A8 00 A0 FD | 	call	#pushregs_
2f4ac     34 F0 07 F1 | 	add	ptra, #52
2f4b0     04 4E 05 F1 | 	add	fp, #4
2f4b4     A7 12 62 FC | 	wrlong	arg01, fp
2f4b8     04 4E 05 F1 | 	add	fp, #4
2f4bc     A7 14 62 FC | 	wrlong	arg02, fp
2f4c0     0A FB 01 FB | 	rdlong	result1, arg02
2f4c4     28 4E 05 F1 | 	add	fp, #40
2f4c8     A7 FA 61 FC | 	wrlong	result1, fp
2f4cc     2C 4E 85 F1 | 	sub	fp, #44
2f4d0     A7 FA 01 FB | 	rdlong	result1, fp
2f4d4     FD 26 02 FB | 	rdlong	local01, result1
2f4d8     0C 26 06 F1 | 	add	local01, #12
2f4dc     13 29 02 FB | 	rdlong	local02, local01
2f4e0     14 4E 05 F1 | 	add	fp, #20
2f4e4     A7 28 62 FC | 	wrlong	local02, fp
2f4e8     14 4E 05 F1 | 	add	fp, #20
2f4ec     A7 00 68 FC | 	wrlong	#0, fp
2f4f0     2C 4E 85 F1 | 	sub	fp, #44
2f4f4                 | ' 
2f4f4                 | ' 
2f4f4                 | ' 
2f4f4                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2f4f4                 | ' 	for (;;) {
2f4f4                 | LR__4720
2f4f4     30 4E 05 F1 | 	add	fp, #48
2f4f8     A7 12 02 F6 | 	mov	arg01, fp
2f4fc     30 4E 85 F1 | 	sub	fp, #48
2f500     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2f504     1C 4E 05 F1 | 	add	fp, #28
2f508     A7 FA 61 FC | 	wrlong	result1, fp
2f50c     1C 4E 85 F1 | 	sub	fp, #28
2f510     FF FF 7F FF 
2f514     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2f518     06 FA 05 A6 |  if_e	mov	result1, #6
2f51c     74 08 90 AD |  if_e	jmp	#LR__4760
2f520     1C 4E 05 F1 | 	add	fp, #28
2f524     A7 26 02 FB | 	rdlong	local01, fp
2f528     1C 4E 85 F1 | 	sub	fp, #28
2f52c     80 00 00 FF 
2f530     00 26 16 F2 | 	cmp	local01, ##65536 wc
2f534     3C 00 90 CD |  if_b	jmp	#LR__4721
2f538     18 4E 05 F1 | 	add	fp, #24
2f53c     A7 2A 02 FB | 	rdlong	local03, fp
2f540     14 4E 05 F1 | 	add	fp, #20
2f544     A7 26 02 FB | 	rdlong	local01, fp
2f548     13 2D 02 F6 | 	mov	local04, local01
2f54c     01 2C 06 F1 | 	add	local04, #1
2f550     A7 2C 62 FC | 	wrlong	local04, fp
2f554     01 26 66 F0 | 	shl	local01, #1
2f558     15 27 02 F1 | 	add	local01, local03
2f55c     10 4E 85 F1 | 	sub	fp, #16
2f560     A7 2E 02 FB | 	rdlong	local05, fp
2f564     1C 4E 85 F1 | 	sub	fp, #28
2f568     17 31 02 F6 | 	mov	local06, local05
2f56c     10 30 46 F0 | 	shr	local06, #16
2f570     13 31 52 FC | 	wrword	local06, local01
2f574                 | LR__4721
2f574     1C 4E 05 F1 | 	add	fp, #28
2f578     A7 26 02 FB | 	rdlong	local01, fp
2f57c     08 4E 85 F1 | 	sub	fp, #8
2f580     A7 26 52 FC | 	wrword	local01, fp
2f584     A7 26 E2 FA | 	rdword	local01, fp
2f588     14 4E 85 F1 | 	sub	fp, #20
2f58c     20 26 16 F2 | 	cmp	local01, #32 wc
2f590     B0 00 90 CD |  if_b	jmp	#LR__4723
2f594     14 4E 05 F1 | 	add	fp, #20
2f598     A7 26 E2 FA | 	rdword	local01, fp
2f59c     14 4E 85 F1 | 	sub	fp, #20
2f5a0     2F 26 0E F2 | 	cmp	local01, #47 wz
2f5a4     14 4E 05 51 |  if_ne	add	fp, #20
2f5a8     A7 2C E2 5A |  if_ne	rdword	local04, fp
2f5ac     14 4E 85 51 |  if_ne	sub	fp, #20
2f5b0     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
2f5b4     8C 00 90 AD |  if_e	jmp	#LR__4723
2f5b8     14 4E 05 F1 | 	add	fp, #20
2f5bc     A7 12 E2 FA | 	rdword	arg01, fp
2f5c0     14 4E 85 F1 | 	sub	fp, #20
2f5c4     80 12 16 F2 | 	cmp	arg01, #128 wc
2f5c8     24 00 90 3D |  if_ae	jmp	#LR__4722
2f5cc     AA 01 00 FF 
2f5d0     08 13 06 F6 | 	mov	arg01, ##@LR__5382
2f5d4     14 4E 05 F1 | 	add	fp, #20
2f5d8     A7 14 E2 FA | 	rdword	arg02, fp
2f5dc     14 4E 85 F1 | 	sub	fp, #20
2f5e0     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2f5e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f5e8     06 FA 05 56 |  if_ne	mov	result1, #6
2f5ec     A4 07 90 5D |  if_ne	jmp	#LR__4760
2f5f0                 | LR__4722
2f5f0     2C 4E 05 F1 | 	add	fp, #44
2f5f4     A7 30 02 FB | 	rdlong	local06, fp
2f5f8     2C 4E 85 F1 | 	sub	fp, #44
2f5fc     FF 30 16 F2 | 	cmp	local06, #255 wc
2f600     06 FA 05 36 |  if_ae	mov	result1, #6
2f604     8C 07 90 3D |  if_ae	jmp	#LR__4760
2f608     18 4E 05 F1 | 	add	fp, #24
2f60c     A7 2A 02 FB | 	rdlong	local03, fp
2f610     14 4E 05 F1 | 	add	fp, #20
2f614     A7 28 02 FB | 	rdlong	local02, fp
2f618     14 2D 02 F6 | 	mov	local04, local02
2f61c     01 2C 06 F1 | 	add	local04, #1
2f620     A7 2C 62 FC | 	wrlong	local04, fp
2f624     14 27 02 F6 | 	mov	local01, local02
2f628     01 26 66 F0 | 	shl	local01, #1
2f62c     15 27 02 F1 | 	add	local01, local03
2f630     18 4E 85 F1 | 	sub	fp, #24
2f634     A7 30 E2 FA | 	rdword	local06, fp
2f638     14 4E 85 F1 | 	sub	fp, #20
2f63c     13 31 52 FC | 	wrword	local06, local01
2f640     B0 FE 9F FD | 	jmp	#LR__4720
2f644                 | LR__4723
2f644     14 4E 05 F1 | 	add	fp, #20
2f648     A7 32 E2 FA | 	rdword	local07, fp
2f64c     14 4E 85 F1 | 	sub	fp, #20
2f650     20 32 16 F2 | 	cmp	local07, #32 wc
2f654     10 4E 05 C1 |  if_b	add	fp, #16
2f658     A7 08 48 CC |  if_b	wrbyte	#4, fp
2f65c     10 4E 85 C1 |  if_b	sub	fp, #16
2f660     74 00 90 CD |  if_b	jmp	#LR__4728
2f664     97 24 48 FB | 	callpa	#(@LR__4726-@LR__4724)>>2,fcache_load_ptr_
2f668                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2f668                 | LR__4724
2f668     30 4E 05 F1 | 	add	fp, #48
2f66c     A7 2C 02 FB | 	rdlong	local04, fp
2f670     30 4E 85 F1 | 	sub	fp, #48
2f674     16 33 C2 FA | 	rdbyte	local07, local04
2f678     2F 32 0E F2 | 	cmp	local07, #47 wz
2f67c     18 00 90 AD |  if_e	jmp	#LR__4725
2f680     30 4E 05 F1 | 	add	fp, #48
2f684     A7 2C 02 FB | 	rdlong	local04, fp
2f688     30 4E 85 F1 | 	sub	fp, #48
2f68c     16 29 C2 FA | 	rdbyte	local02, local04
2f690     5C 28 0E F2 | 	cmp	local02, #92 wz
2f694     18 00 90 5D |  if_ne	jmp	#LR__4727
2f698                 | LR__4725
2f698     30 4E 05 F1 | 	add	fp, #48
2f69c     A7 26 02 FB | 	rdlong	local01, fp
2f6a0     01 26 06 F1 | 	add	local01, #1
2f6a4     A7 26 62 FC | 	wrlong	local01, fp
2f6a8     30 4E 85 F1 | 	sub	fp, #48
2f6ac     B8 FF 9F FD | 	jmp	#LR__4724
2f6b0                 | LR__4726
2f6b0                 | LR__4727
2f6b0     10 4E 05 F1 | 	add	fp, #16
2f6b4     A7 00 48 FC | 	wrbyte	#0, fp
2f6b8     20 4E 05 F1 | 	add	fp, #32
2f6bc     A7 30 02 FB | 	rdlong	local06, fp
2f6c0     30 4E 85 F1 | 	sub	fp, #48
2f6c4     18 33 C2 FA | 	rdbyte	local07, local06
2f6c8     20 32 16 F2 | 	cmp	local07, #32 wc
2f6cc     10 4E 05 C1 |  if_b	add	fp, #16
2f6d0     A7 08 48 CC |  if_b	wrbyte	#4, fp
2f6d4     10 4E 85 C1 |  if_b	sub	fp, #16
2f6d8                 | LR__4728
2f6d8     08 4E 05 F1 | 	add	fp, #8
2f6dc     A7 32 02 FB | 	rdlong	local07, fp
2f6e0     28 4E 05 F1 | 	add	fp, #40
2f6e4     A7 26 02 FB | 	rdlong	local01, fp
2f6e8     30 4E 85 F1 | 	sub	fp, #48
2f6ec     19 27 62 FC | 	wrlong	local01, local07
2f6f0     97 38 48 FB | 	callpa	#(@LR__4730-@LR__4729)>>2,fcache_load_ptr_
2f6f4                 | ' 	}
2f6f4                 | ' 	*path = p;
2f6f4                 | ' #line 2862 "ff.c"
2f6f4                 | ' 	while (di) {
2f6f4                 | LR__4729
2f6f4     2C 4E 05 F1 | 	add	fp, #44
2f6f8     A7 32 0A FB | 	rdlong	local07, fp wz
2f6fc     2C 4E 85 F1 | 	sub	fp, #44
2f700     60 00 90 AD |  if_e	jmp	#LR__4731
2f704     18 4E 05 F1 | 	add	fp, #24
2f708     A7 30 02 FB | 	rdlong	local06, fp
2f70c     14 4E 05 F1 | 	add	fp, #20
2f710     A7 2C 02 FB | 	rdlong	local04, fp
2f714     01 2C 86 F1 | 	sub	local04, #1
2f718     01 2C 66 F0 | 	shl	local04, #1
2f71c     18 2D 02 F1 | 	add	local04, local06
2f720     16 31 E2 FA | 	rdword	local06, local04
2f724     18 4E 85 F1 | 	sub	fp, #24
2f728     A7 30 52 FC | 	wrword	local06, fp
2f72c     A7 32 E2 FA | 	rdword	local07, fp
2f730     14 4E 85 F1 | 	sub	fp, #20
2f734     20 32 0E F2 | 	cmp	local07, #32 wz
2f738     14 4E 05 51 |  if_ne	add	fp, #20
2f73c     A7 26 E2 5A |  if_ne	rdword	local01, fp
2f740     14 4E 85 51 |  if_ne	sub	fp, #20
2f744     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
2f748     18 00 90 5D |  if_ne	jmp	#LR__4731
2f74c     2C 4E 05 F1 | 	add	fp, #44
2f750     A7 26 02 FB | 	rdlong	local01, fp
2f754     01 26 86 F1 | 	sub	local01, #1
2f758     A7 26 62 FC | 	wrlong	local01, fp
2f75c     2C 4E 85 F1 | 	sub	fp, #44
2f760     90 FF 9F FD | 	jmp	#LR__4729
2f764                 | LR__4730
2f764                 | LR__4731
2f764     18 4E 05 F1 | 	add	fp, #24
2f768     A7 34 02 FB | 	rdlong	local08, fp
2f76c     14 4E 05 F1 | 	add	fp, #20
2f770     A7 2C 02 FB | 	rdlong	local04, fp
2f774     01 2C 66 F0 | 	shl	local04, #1
2f778     1A 2D 02 F1 | 	add	local04, local08
2f77c     16 01 58 FC | 	wrword	#0, local04
2f780     A7 32 0A FB | 	rdlong	local07, fp wz
2f784     2C 4E 85 F1 | 	sub	fp, #44
2f788     06 FA 05 A6 |  if_e	mov	result1, #6
2f78c     04 06 90 AD |  if_e	jmp	#LR__4760
2f790                 | ' 
2f790                 | ' 
2f790                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2f790     28 4E 05 F1 | 	add	fp, #40
2f794     A7 00 68 FC | 	wrlong	#0, fp
2f798     28 4E 85 F1 | 	sub	fp, #40
2f79c     97 22 48 FB | 	callpa	#(@LR__4733-@LR__4732)>>2,fcache_load_ptr_
2f7a0                 | LR__4732
2f7a0     18 4E 05 F1 | 	add	fp, #24
2f7a4     A7 36 02 FB | 	rdlong	local09, fp
2f7a8     10 4E 05 F1 | 	add	fp, #16
2f7ac     A7 38 02 FB | 	rdlong	local10, fp
2f7b0     28 4E 85 F1 | 	sub	fp, #40
2f7b4     01 38 66 F0 | 	shl	local10, #1
2f7b8     1B 39 02 F1 | 	add	local10, local09
2f7bc     1C 3B E2 FA | 	rdword	local11, local10
2f7c0     20 3A 0E F2 | 	cmp	local11, #32 wz
2f7c4     1C 00 90 5D |  if_ne	jmp	#LR__4734
2f7c8     28 4E 05 F1 | 	add	fp, #40
2f7cc     A7 3C 02 FB | 	rdlong	local12, fp
2f7d0     1E 2F 02 F6 | 	mov	local05, local12
2f7d4     01 2E 06 F1 | 	add	local05, #1
2f7d8     A7 2E 62 FC | 	wrlong	local05, fp
2f7dc     28 4E 85 F1 | 	sub	fp, #40
2f7e0     BC FF 9F FD | 	jmp	#LR__4732
2f7e4                 | LR__4733
2f7e4                 | LR__4734
2f7e4     28 4E 05 F1 | 	add	fp, #40
2f7e8     A7 32 02 FB | 	rdlong	local07, fp
2f7ec     28 4E 85 F1 | 	sub	fp, #40
2f7f0     01 32 16 F2 | 	cmp	local07, #1 wc
2f7f4     28 00 90 3D |  if_ae	jmp	#LR__4735
2f7f8     18 4E 05 F1 | 	add	fp, #24
2f7fc     A7 2A 02 FB | 	rdlong	local03, fp
2f800     10 4E 05 F1 | 	add	fp, #16
2f804     A7 36 02 FB | 	rdlong	local09, fp
2f808     28 4E 85 F1 | 	sub	fp, #40
2f80c     01 36 66 F0 | 	shl	local09, #1
2f810     15 37 02 F1 | 	add	local09, local03
2f814     1B 27 E2 FA | 	rdword	local01, local09
2f818     2E 26 0E F2 | 	cmp	local01, #46 wz
2f81c     14 00 90 5D |  if_ne	jmp	#LR__4736
2f820                 | LR__4735
2f820     10 4E 05 F1 | 	add	fp, #16
2f824     A7 32 C2 FA | 	rdbyte	local07, fp
2f828     03 32 46 F5 | 	or	local07, #3
2f82c     A7 32 42 FC | 	wrbyte	local07, fp
2f830     10 4E 85 F1 | 	sub	fp, #16
2f834                 | LR__4736
2f834     97 2C 48 FB | 	callpa	#(@LR__4738-@LR__4737)>>2,fcache_load_ptr_
2f838                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2f838                 | LR__4737
2f838     2C 4E 05 F1 | 	add	fp, #44
2f83c     A7 32 02 FB | 	rdlong	local07, fp
2f840     2C 4E 85 F1 | 	sub	fp, #44
2f844     01 32 16 F2 | 	cmp	local07, #1 wc
2f848     44 00 90 CD |  if_b	jmp	#LR__4739
2f84c     18 4E 05 F1 | 	add	fp, #24
2f850     A7 30 02 FB | 	rdlong	local06, fp
2f854     14 4E 05 F1 | 	add	fp, #20
2f858     A7 2A 02 FB | 	rdlong	local03, fp
2f85c     2C 4E 85 F1 | 	sub	fp, #44
2f860     01 2A 86 F1 | 	sub	local03, #1
2f864     01 2A 66 F0 | 	shl	local03, #1
2f868     18 2B 02 F1 | 	add	local03, local06
2f86c     15 27 E2 FA | 	rdword	local01, local03
2f870     2E 26 0E F2 | 	cmp	local01, #46 wz
2f874     18 00 90 AD |  if_e	jmp	#LR__4739
2f878     2C 4E 05 F1 | 	add	fp, #44
2f87c     A7 26 02 FB | 	rdlong	local01, fp
2f880     01 26 86 F1 | 	sub	local01, #1
2f884     A7 26 62 FC | 	wrlong	local01, fp
2f888     2C 4E 85 F1 | 	sub	fp, #44
2f88c     A8 FF 9F FD | 	jmp	#LR__4737
2f890                 | LR__4738
2f890                 | LR__4739
2f890     04 4E 05 F1 | 	add	fp, #4
2f894     A7 12 02 FB | 	rdlong	arg01, fp
2f898     04 4E 85 F1 | 	sub	fp, #4
2f89c     20 12 06 F1 | 	add	arg01, #32
2f8a0     20 14 06 F6 | 	mov	arg02, #32
2f8a4     0B 16 06 F6 | 	mov	arg03, #11
2f8a8     09 3F 02 F6 | 	mov	local13, arg01
2f8ac     98 00 A0 FD | 	call	#\builtin_bytefill_
2f8b0     1F FB 01 F6 | 	mov	result1, local13
2f8b4     0C 4E 05 F1 | 	add	fp, #12
2f8b8     A7 00 48 FC | 	wrbyte	#0, fp
2f8bc     A7 32 C2 FA | 	rdbyte	local07, fp
2f8c0     14 4E 05 F1 | 	add	fp, #20
2f8c4     A7 32 62 FC | 	wrlong	local07, fp
2f8c8     04 4E 05 F1 | 	add	fp, #4
2f8cc     A7 10 68 FC | 	wrlong	#8, fp
2f8d0     24 4E 85 F1 | 	sub	fp, #36
2f8d4                 | ' 
2f8d4                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2f8d4                 | ' 	i = b = 0; ni = 8;
2f8d4                 | ' 	for (;;) {
2f8d4                 | LR__4740
2f8d4     18 4E 05 F1 | 	add	fp, #24
2f8d8     A7 2A 02 FB | 	rdlong	local03, fp
2f8dc     10 4E 05 F1 | 	add	fp, #16
2f8e0     A7 36 02 FB | 	rdlong	local09, fp
2f8e4     1B 2D 02 F6 | 	mov	local04, local09
2f8e8     01 2C 06 F1 | 	add	local04, #1
2f8ec     A7 2C 62 FC | 	wrlong	local04, fp
2f8f0     01 36 66 F0 | 	shl	local09, #1
2f8f4     15 37 02 F1 | 	add	local09, local03
2f8f8     1B 31 E2 FA | 	rdword	local06, local09
2f8fc     14 4E 85 F1 | 	sub	fp, #20
2f900     A7 30 52 FC | 	wrword	local06, fp
2f904     A7 32 EA FA | 	rdword	local07, fp wz
2f908     14 4E 85 F1 | 	sub	fp, #20
2f90c     74 03 90 AD |  if_e	jmp	#LR__4756
2f910     14 4E 05 F1 | 	add	fp, #20
2f914     A7 32 E2 FA | 	rdword	local07, fp
2f918     14 4E 85 F1 | 	sub	fp, #20
2f91c     20 32 0E F2 | 	cmp	local07, #32 wz
2f920     30 00 90 AD |  if_e	jmp	#LR__4741
2f924     14 4E 05 F1 | 	add	fp, #20
2f928     A7 26 E2 FA | 	rdword	local01, fp
2f92c     14 4E 85 F1 | 	sub	fp, #20
2f930     2E 26 0E F2 | 	cmp	local01, #46 wz
2f934     34 00 90 5D |  if_ne	jmp	#LR__4742
2f938     28 4E 05 F1 | 	add	fp, #40
2f93c     A7 2C 02 FB | 	rdlong	local04, fp
2f940     04 4E 05 F1 | 	add	fp, #4
2f944     A7 38 02 FB | 	rdlong	local10, fp
2f948     2C 4E 85 F1 | 	sub	fp, #44
2f94c     1C 2D 0A F2 | 	cmp	local04, local10 wz
2f950     18 00 90 AD |  if_e	jmp	#LR__4742
2f954                 | LR__4741
2f954     10 4E 05 F1 | 	add	fp, #16
2f958     A7 32 C2 FA | 	rdbyte	local07, fp
2f95c     03 32 46 F5 | 	or	local07, #3
2f960     A7 32 42 FC | 	wrbyte	local07, fp
2f964     10 4E 85 F1 | 	sub	fp, #16
2f968                 | ' 			cf |=  0x01  |  0x02 ;
2f968                 | ' 			continue;
2f968     68 FF 9F FD | 	jmp	#LR__4740
2f96c                 | LR__4742
2f96c     20 4E 05 F1 | 	add	fp, #32
2f970     A7 32 02 FB | 	rdlong	local07, fp
2f974     04 4E 05 F1 | 	add	fp, #4
2f978     A7 26 02 FB | 	rdlong	local01, fp
2f97c     24 4E 85 F1 | 	sub	fp, #36
2f980     13 33 12 F2 | 	cmp	local07, local01 wc
2f984     1C 00 90 3D |  if_ae	jmp	#LR__4743
2f988     28 4E 05 F1 | 	add	fp, #40
2f98c     A7 34 02 FB | 	rdlong	local08, fp
2f990     04 4E 05 F1 | 	add	fp, #4
2f994     A7 38 02 FB | 	rdlong	local10, fp
2f998     2C 4E 85 F1 | 	sub	fp, #44
2f99c     1C 35 0A F2 | 	cmp	local08, local10 wz
2f9a0     B0 00 90 5D |  if_ne	jmp	#LR__4745
2f9a4                 | LR__4743
2f9a4     24 4E 05 F1 | 	add	fp, #36
2f9a8     A7 32 02 FB | 	rdlong	local07, fp
2f9ac     24 4E 85 F1 | 	sub	fp, #36
2f9b0     0B 32 0E F2 | 	cmp	local07, #11 wz
2f9b4     18 00 90 5D |  if_ne	jmp	#LR__4744
2f9b8     10 4E 05 F1 | 	add	fp, #16
2f9bc     A7 32 C2 FA | 	rdbyte	local07, fp
2f9c0     03 32 46 F5 | 	or	local07, #3
2f9c4     A7 32 42 FC | 	wrbyte	local07, fp
2f9c8     10 4E 85 F1 | 	sub	fp, #16
2f9cc                 | ' 				cf |=  0x01  |  0x02 ;
2f9cc                 | ' 				break;
2f9cc     B4 02 90 FD | 	jmp	#LR__4756
2f9d0                 | LR__4744
2f9d0     28 4E 05 F1 | 	add	fp, #40
2f9d4     A7 32 02 FB | 	rdlong	local07, fp
2f9d8     04 4E 05 F1 | 	add	fp, #4
2f9dc     A7 26 02 FB | 	rdlong	local01, fp
2f9e0     2C 4E 85 F1 | 	sub	fp, #44
2f9e4     13 33 0A F2 | 	cmp	local07, local01 wz
2f9e8     10 4E 05 51 |  if_ne	add	fp, #16
2f9ec     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2f9f0     03 32 46 55 |  if_ne	or	local07, #3
2f9f4     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2f9f8     10 4E 85 51 |  if_ne	sub	fp, #16
2f9fc     28 4E 05 F1 | 	add	fp, #40
2fa00     A7 32 02 FB | 	rdlong	local07, fp
2fa04     04 4E 05 F1 | 	add	fp, #4
2fa08     A7 28 02 FB | 	rdlong	local02, fp
2fa0c     2C 4E 85 F1 | 	sub	fp, #44
2fa10     14 33 1A F2 | 	cmp	local07, local02 wcz
2fa14     6C 02 90 1D |  if_a	jmp	#LR__4756
2fa18     2C 4E 05 F1 | 	add	fp, #44
2fa1c     A7 32 02 FB | 	rdlong	local07, fp
2fa20     04 4E 85 F1 | 	sub	fp, #4
2fa24     A7 32 62 FC | 	wrlong	local07, fp
2fa28     08 4E 85 F1 | 	sub	fp, #8
2fa2c     A7 10 68 FC | 	wrlong	#8, fp
2fa30     04 4E 05 F1 | 	add	fp, #4
2fa34     A7 16 68 FC | 	wrlong	#11, fp
2fa38     18 4E 85 F1 | 	sub	fp, #24
2fa3c     A7 3A C2 FA | 	rdbyte	local11, fp
2fa40     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2fa44     02 32 66 F0 | 	shl	local07, #2
2fa48     A7 32 42 FC | 	wrbyte	local07, fp
2fa4c     0C 4E 85 F1 | 	sub	fp, #12
2fa50                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2fa50                 | ' 			continue;
2fa50     80 FE 9F FD | 	jmp	#LR__4740
2fa54                 | LR__4745
2fa54     14 4E 05 F1 | 	add	fp, #20
2fa58     A7 32 E2 FA | 	rdword	local07, fp
2fa5c     14 4E 85 F1 | 	sub	fp, #20
2fa60     80 32 16 F2 | 	cmp	local07, #128 wc
2fa64     6C 00 90 CD |  if_b	jmp	#LR__4747
2fa68     10 4E 05 F1 | 	add	fp, #16
2fa6c     A7 32 C2 FA | 	rdbyte	local07, fp
2fa70     02 32 46 F5 | 	or	local07, #2
2fa74     A7 32 42 FC | 	wrbyte	local07, fp
2fa78     04 4E 05 F1 | 	add	fp, #4
2fa7c     A7 12 E2 FA | 	rdword	arg01, fp
2fa80     14 4E 85 F1 | 	sub	fp, #20
2fa84     01 00 00 FF 
2fa88     52 15 06 F6 | 	mov	arg02, ##850
2fa8c     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2fa90     14 4E 05 F1 | 	add	fp, #20
2fa94     A7 FA 51 FC | 	wrword	result1, fp
2fa98     A7 32 E2 FA | 	rdword	local07, fp
2fa9c     14 4E 85 F1 | 	sub	fp, #20
2faa0     80 32 CE F7 | 	test	local07, #128 wz
2faa4     2C 00 90 AD |  if_e	jmp	#LR__4746
2faa8     14 4E 05 F1 | 	add	fp, #20
2faac     A7 28 E2 FA | 	rdword	local02, fp
2fab0     7F 28 06 F5 | 	and	local02, #127
2fab4     01 00 00 FF 
2fab8     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2fabc     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2fac0     14 33 C2 FA | 	rdbyte	local07, local02
2fac4     A7 32 52 FC | 	wrword	local07, fp
2fac8     14 4E 85 F1 | 	sub	fp, #20
2facc     01 00 00 FF 
2fad0     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2fad4                 | LR__4746
2fad4                 | LR__4747
2fad4     14 4E 05 F1 | 	add	fp, #20
2fad8     A7 32 E2 FA | 	rdword	local07, fp
2fadc     14 4E 85 F1 | 	sub	fp, #20
2fae0     00 33 16 F2 | 	cmp	local07, #256 wc
2fae4     88 00 90 CD |  if_b	jmp	#LR__4749
2fae8     24 4E 05 F1 | 	add	fp, #36
2faec     A7 32 02 FB | 	rdlong	local07, fp
2faf0     01 32 86 F1 | 	sub	local07, #1
2faf4     04 4E 85 F1 | 	sub	fp, #4
2faf8     A7 28 02 FB | 	rdlong	local02, fp
2fafc     20 4E 85 F1 | 	sub	fp, #32
2fb00     19 29 12 F2 | 	cmp	local02, local07 wc
2fb04     2C 00 90 CD |  if_b	jmp	#LR__4748
2fb08     10 4E 05 F1 | 	add	fp, #16
2fb0c     A7 3A C2 FA | 	rdbyte	local11, fp
2fb10     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2fb14     03 32 46 F5 | 	or	local07, #3
2fb18     A7 32 42 FC | 	wrbyte	local07, fp
2fb1c     14 4E 05 F1 | 	add	fp, #20
2fb20     A7 32 02 FB | 	rdlong	local07, fp
2fb24     04 4E 85 F1 | 	sub	fp, #4
2fb28     A7 32 62 FC | 	wrlong	local07, fp
2fb2c     20 4E 85 F1 | 	sub	fp, #32
2fb30                 | ' 				cf |=  0x01  |  0x02 ;
2fb30                 | ' 				i = ni; continue;
2fb30     A0 FD 9F FD | 	jmp	#LR__4740
2fb34                 | LR__4748
2fb34     04 4E 05 F1 | 	add	fp, #4
2fb38     A7 36 02 FB | 	rdlong	local09, fp
2fb3c     1C 4E 05 F1 | 	add	fp, #28
2fb40     A7 38 02 FB | 	rdlong	local10, fp
2fb44     1C 2D 02 F6 | 	mov	local04, local10
2fb48     01 2C 06 F1 | 	add	local04, #1
2fb4c     A7 2C 62 FC | 	wrlong	local04, fp
2fb50     20 36 06 F1 | 	add	local09, #32
2fb54     1B 39 02 F1 | 	add	local10, local09
2fb58     0C 4E 85 F1 | 	sub	fp, #12
2fb5c     A7 2A E2 FA | 	rdword	local03, fp
2fb60     14 4E 85 F1 | 	sub	fp, #20
2fb64     08 2A 46 F0 | 	shr	local03, #8
2fb68     1C 2B 42 FC | 	wrbyte	local03, local10
2fb6c     D4 00 90 FD | 	jmp	#LR__4755
2fb70                 | LR__4749
2fb70     14 4E 05 F1 | 	add	fp, #20
2fb74     A7 32 EA FA | 	rdword	local07, fp wz
2fb78     14 4E 85 F1 | 	sub	fp, #20
2fb7c     20 00 90 AD |  if_e	jmp	#LR__4750
2fb80     AA 01 00 FF 
2fb84     11 13 06 F6 | 	mov	arg01, ##@LR__5383
2fb88     14 4E 05 F1 | 	add	fp, #20
2fb8c     A7 14 E2 FA | 	rdword	arg02, fp
2fb90     14 4E 85 F1 | 	sub	fp, #20
2fb94     48 CB BF FD | 	call	#_fatfs_cc_strchr
2fb98     00 FA 0D F2 | 	cmp	result1, #0 wz
2fb9c     20 00 90 AD |  if_e	jmp	#LR__4751
2fba0                 | LR__4750
2fba0     14 4E 05 F1 | 	add	fp, #20
2fba4     A7 BE 58 FC | 	wrword	#95, fp
2fba8     04 4E 85 F1 | 	sub	fp, #4
2fbac     A7 32 C2 FA | 	rdbyte	local07, fp
2fbb0     03 32 46 F5 | 	or	local07, #3
2fbb4     A7 32 42 FC | 	wrbyte	local07, fp
2fbb8     10 4E 85 F1 | 	sub	fp, #16
2fbbc     84 00 90 FD | 	jmp	#LR__4754
2fbc0                 | LR__4751
2fbc0     14 4E 05 F1 | 	add	fp, #20
2fbc4     A7 32 E2 FA | 	rdword	local07, fp
2fbc8     14 4E 85 F1 | 	sub	fp, #20
2fbcc     41 32 16 F2 | 	cmp	local07, #65 wc
2fbd0     24 00 90 CD |  if_b	jmp	#LR__4752
2fbd4     14 4E 05 F1 | 	add	fp, #20
2fbd8     A7 26 E2 FA | 	rdword	local01, fp
2fbdc     14 4E 85 F1 | 	sub	fp, #20
2fbe0     5B 26 16 F2 | 	cmp	local01, #91 wc
2fbe4     0C 4E 05 C1 |  if_b	add	fp, #12
2fbe8     A7 32 C2 CA |  if_b	rdbyte	local07, fp
2fbec     02 32 46 C5 |  if_b	or	local07, #2
2fbf0     A7 32 42 CC |  if_b	wrbyte	local07, fp
2fbf4     0C 4E 85 C1 |  if_b	sub	fp, #12
2fbf8                 | LR__4752
2fbf8     14 4E 05 F1 | 	add	fp, #20
2fbfc     A7 32 E2 FA | 	rdword	local07, fp
2fc00     14 4E 85 F1 | 	sub	fp, #20
2fc04     61 32 16 F2 | 	cmp	local07, #97 wc
2fc08     38 00 90 CD |  if_b	jmp	#LR__4753
2fc0c     14 4E 05 F1 | 	add	fp, #20
2fc10     A7 26 E2 FA | 	rdword	local01, fp
2fc14     14 4E 85 F1 | 	sub	fp, #20
2fc18     7B 26 16 F2 | 	cmp	local01, #123 wc
2fc1c     24 00 90 3D |  if_ae	jmp	#LR__4753
2fc20     0C 4E 05 F1 | 	add	fp, #12
2fc24     A7 32 C2 FA | 	rdbyte	local07, fp
2fc28     01 32 46 F5 | 	or	local07, #1
2fc2c     A7 32 42 FC | 	wrbyte	local07, fp
2fc30     08 4E 05 F1 | 	add	fp, #8
2fc34     A7 32 E2 FA | 	rdword	local07, fp
2fc38     20 32 86 F1 | 	sub	local07, #32
2fc3c     A7 32 52 FC | 	wrword	local07, fp
2fc40     14 4E 85 F1 | 	sub	fp, #20
2fc44                 | LR__4753
2fc44                 | LR__4754
2fc44                 | LR__4755
2fc44     04 4E 05 F1 | 	add	fp, #4
2fc48     A7 3A 02 FB | 	rdlong	local11, fp
2fc4c     1D 37 02 F6 | 	mov	local09, local11
2fc50     1C 4E 05 F1 | 	add	fp, #28
2fc54     A7 28 02 FB | 	rdlong	local02, fp
2fc58     14 2D 02 F6 | 	mov	local04, local02
2fc5c     01 2C 06 F1 | 	add	local04, #1
2fc60     A7 2C 62 FC | 	wrlong	local04, fp
2fc64     14 39 02 F6 | 	mov	local10, local02
2fc68     20 36 06 F1 | 	add	local09, #32
2fc6c     1B 39 02 F1 | 	add	local10, local09
2fc70     0C 4E 85 F1 | 	sub	fp, #12
2fc74     A7 2A E2 FA | 	rdword	local03, fp
2fc78     14 4E 85 F1 | 	sub	fp, #20
2fc7c     1C 2B 42 FC | 	wrbyte	local03, local10
2fc80     50 FC 9F FD | 	jmp	#LR__4740
2fc84                 | LR__4756
2fc84     04 4E 05 F1 | 	add	fp, #4
2fc88     A7 3A 02 FB | 	rdlong	local11, fp
2fc8c     04 4E 85 F1 | 	sub	fp, #4
2fc90     20 3A 06 F1 | 	add	local11, #32
2fc94     1D 33 C2 FA | 	rdbyte	local07, local11
2fc98     E5 32 0E F2 | 	cmp	local07, #229 wz
2fc9c     04 4E 05 A1 |  if_e	add	fp, #4
2fca0     A7 32 02 AB |  if_e	rdlong	local07, fp
2fca4     04 4E 85 A1 |  if_e	sub	fp, #4
2fca8     20 32 06 A1 |  if_e	add	local07, #32
2fcac     19 0B 48 AC |  if_e	wrbyte	#5, local07
2fcb0     24 4E 05 F1 | 	add	fp, #36
2fcb4     A7 32 02 FB | 	rdlong	local07, fp
2fcb8     24 4E 85 F1 | 	sub	fp, #36
2fcbc     08 32 0E F2 | 	cmp	local07, #8 wz
2fcc0     0C 4E 05 A1 |  if_e	add	fp, #12
2fcc4     A7 32 C2 AA |  if_e	rdbyte	local07, fp
2fcc8     02 32 66 A0 |  if_e	shl	local07, #2
2fccc     A7 32 42 AC |  if_e	wrbyte	local07, fp
2fcd0     0C 4E 85 A1 |  if_e	sub	fp, #12
2fcd4     0C 4E 05 F1 | 	add	fp, #12
2fcd8     A7 32 C2 FA | 	rdbyte	local07, fp
2fcdc     0C 4E 85 F1 | 	sub	fp, #12
2fce0     0C 32 06 F5 | 	and	local07, #12
2fce4     0C 32 0E F2 | 	cmp	local07, #12 wz
2fce8     18 00 90 AD |  if_e	jmp	#LR__4757
2fcec     0C 4E 05 F1 | 	add	fp, #12
2fcf0     A7 26 C2 FA | 	rdbyte	local01, fp
2fcf4     0C 4E 85 F1 | 	sub	fp, #12
2fcf8     03 26 06 F5 | 	and	local01, #3
2fcfc     03 26 0E F2 | 	cmp	local01, #3 wz
2fd00     14 00 90 5D |  if_ne	jmp	#LR__4758
2fd04                 | LR__4757
2fd04     10 4E 05 F1 | 	add	fp, #16
2fd08     A7 32 C2 FA | 	rdbyte	local07, fp
2fd0c     02 32 46 F5 | 	or	local07, #2
2fd10     A7 32 42 FC | 	wrbyte	local07, fp
2fd14     10 4E 85 F1 | 	sub	fp, #16
2fd18                 | LR__4758
2fd18     10 4E 05 F1 | 	add	fp, #16
2fd1c     A7 32 C2 FA | 	rdbyte	local07, fp
2fd20     10 4E 85 F1 | 	sub	fp, #16
2fd24     02 32 CE F7 | 	test	local07, #2 wz
2fd28     48 00 90 5D |  if_ne	jmp	#LR__4759
2fd2c     0C 4E 05 F1 | 	add	fp, #12
2fd30     A7 32 C2 FA | 	rdbyte	local07, fp
2fd34     0C 4E 85 F1 | 	sub	fp, #12
2fd38     01 32 CE F7 | 	test	local07, #1 wz
2fd3c     10 4E 05 51 |  if_ne	add	fp, #16
2fd40     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2fd44     10 32 46 55 |  if_ne	or	local07, #16
2fd48     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2fd4c     10 4E 85 51 |  if_ne	sub	fp, #16
2fd50     0C 4E 05 F1 | 	add	fp, #12
2fd54     A7 32 C2 FA | 	rdbyte	local07, fp
2fd58     0C 4E 85 F1 | 	sub	fp, #12
2fd5c     04 32 CE F7 | 	test	local07, #4 wz
2fd60     10 4E 05 51 |  if_ne	add	fp, #16
2fd64     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2fd68     08 32 46 55 |  if_ne	or	local07, #8
2fd6c     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2fd70     10 4E 85 51 |  if_ne	sub	fp, #16
2fd74                 | LR__4759
2fd74     04 4E 05 F1 | 	add	fp, #4
2fd78     A7 32 02 FB | 	rdlong	local07, fp
2fd7c     0C 4E 05 F1 | 	add	fp, #12
2fd80     A7 26 C2 FA | 	rdbyte	local01, fp
2fd84     10 4E 85 F1 | 	sub	fp, #16
2fd88     2B 32 06 F1 | 	add	local07, #43
2fd8c     19 27 42 FC | 	wrbyte	local01, local07
2fd90                 | ' 	}
2fd90                 | ' 
2fd90                 | ' 	dp->fn[ 11 ] = cf;
2fd90                 | ' 
2fd90                 | ' 	return FR_OK;
2fd90     00 FA 05 F6 | 	mov	result1, #0
2fd94                 | LR__4760
2fd94     A7 F0 03 F6 | 	mov	ptra, fp
2fd98     B2 00 A0 FD | 	call	#popregs_
2fd9c                 | _fatfs_cc_create_name_ret
2fd9c     2D 00 64 FD | 	ret
2fda0                 | 
2fda0                 | _fatfs_cc_follow_path
2fda0     02 4A 05 F6 | 	mov	COUNT_, #2
2fda4     A8 00 A0 FD | 	call	#pushregs_
2fda8     18 F0 07 F1 | 	add	ptra, #24
2fdac     04 4E 05 F1 | 	add	fp, #4
2fdb0     A7 12 62 FC | 	wrlong	arg01, fp
2fdb4     04 4E 05 F1 | 	add	fp, #4
2fdb8     A7 14 62 FC | 	wrlong	arg02, fp
2fdbc     04 4E 85 F1 | 	sub	fp, #4
2fdc0     A7 FA 01 FB | 	rdlong	result1, fp
2fdc4     FD 26 02 FB | 	rdlong	local01, result1
2fdc8     10 4E 05 F1 | 	add	fp, #16
2fdcc     A7 26 62 FC | 	wrlong	local01, fp
2fdd0     14 4E 85 F1 | 	sub	fp, #20
2fdd4     97 24 48 FB | 	callpa	#(@LR__4772-@LR__4770)>>2,fcache_load_ptr_
2fdd8                 | ' )
2fdd8                 | ' {
2fdd8                 | ' 	FRESULT res;
2fdd8                 | ' 	BYTE ns;
2fdd8                 | ' 	FATFS *fs = dp->obj.fs;
2fdd8                 | ' #line 3034 "ff.c"
2fdd8                 | ' 	{
2fdd8                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2fdd8                 | LR__4770
2fdd8     08 4E 05 F1 | 	add	fp, #8
2fddc     A7 26 02 FB | 	rdlong	local01, fp
2fde0     08 4E 85 F1 | 	sub	fp, #8
2fde4     13 27 C2 FA | 	rdbyte	local01, local01
2fde8     2F 26 0E F2 | 	cmp	local01, #47 wz
2fdec     18 00 90 AD |  if_e	jmp	#LR__4771
2fdf0     08 4E 05 F1 | 	add	fp, #8
2fdf4     A7 26 02 FB | 	rdlong	local01, fp
2fdf8     08 4E 85 F1 | 	sub	fp, #8
2fdfc     13 27 C2 FA | 	rdbyte	local01, local01
2fe00     5C 26 0E F2 | 	cmp	local01, #92 wz
2fe04     18 00 90 5D |  if_ne	jmp	#LR__4773
2fe08                 | LR__4771
2fe08     08 4E 05 F1 | 	add	fp, #8
2fe0c     A7 26 02 FB | 	rdlong	local01, fp
2fe10     01 26 06 F1 | 	add	local01, #1
2fe14     A7 26 62 FC | 	wrlong	local01, fp
2fe18     08 4E 85 F1 | 	sub	fp, #8
2fe1c     B8 FF 9F FD | 	jmp	#LR__4770
2fe20                 | LR__4772
2fe20                 | LR__4773
2fe20     04 4E 05 F1 | 	add	fp, #4
2fe24     A7 26 02 FB | 	rdlong	local01, fp
2fe28     08 26 06 F1 | 	add	local01, #8
2fe2c     13 01 68 FC | 	wrlong	#0, local01
2fe30     04 4E 05 F1 | 	add	fp, #4
2fe34     A7 26 02 FB | 	rdlong	local01, fp
2fe38     08 4E 85 F1 | 	sub	fp, #8
2fe3c     13 27 C2 FA | 	rdbyte	local01, local01
2fe40     20 26 16 F2 | 	cmp	local01, #32 wc
2fe44     30 00 90 3D |  if_ae	jmp	#LR__4774
2fe48     04 4E 05 F1 | 	add	fp, #4
2fe4c     A7 26 02 FB | 	rdlong	local01, fp
2fe50     2B 26 06 F1 | 	add	local01, #43
2fe54     13 01 49 FC | 	wrbyte	#128, local01
2fe58     A7 12 02 FB | 	rdlong	arg01, fp
2fe5c     04 4E 85 F1 | 	sub	fp, #4
2fe60     00 14 06 F6 | 	mov	arg02, #0
2fe64     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2fe68     0C 4E 05 F1 | 	add	fp, #12
2fe6c     A7 FA 61 FC | 	wrlong	result1, fp
2fe70     0C 4E 85 F1 | 	sub	fp, #12
2fe74     1C 01 90 FD | 	jmp	#LR__4778
2fe78                 | LR__4774
2fe78                 | ' 		for (;;) {
2fe78                 | LR__4775
2fe78     04 4E 05 F1 | 	add	fp, #4
2fe7c     A7 12 02 FB | 	rdlong	arg01, fp
2fe80     04 4E 05 F1 | 	add	fp, #4
2fe84     A7 14 02 F6 | 	mov	arg02, fp
2fe88     08 4E 85 F1 | 	sub	fp, #8
2fe8c     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2fe90     0C 4E 05 F1 | 	add	fp, #12
2fe94     A7 FA 61 FC | 	wrlong	result1, fp
2fe98     00 FA 4D F2 | 	cmps	result1, #0 wz
2fe9c     0C 4E 85 F1 | 	sub	fp, #12
2fea0     F0 00 90 5D |  if_ne	jmp	#LR__4777
2fea4     04 4E 05 F1 | 	add	fp, #4
2fea8     A7 12 02 FB | 	rdlong	arg01, fp
2feac     04 4E 85 F1 | 	sub	fp, #4
2feb0     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2feb4     0C 4E 05 F1 | 	add	fp, #12
2feb8     A7 FA 61 FC | 	wrlong	result1, fp
2febc     08 4E 85 F1 | 	sub	fp, #8
2fec0     A7 26 02 FB | 	rdlong	local01, fp
2fec4     2B 26 06 F1 | 	add	local01, #43
2fec8     13 27 C2 FA | 	rdbyte	local01, local01
2fecc     0C 4E 05 F1 | 	add	fp, #12
2fed0     A7 26 42 FC | 	wrbyte	local01, fp
2fed4     04 4E 85 F1 | 	sub	fp, #4
2fed8     A7 26 0A FB | 	rdlong	local01, fp wz
2fedc     0C 4E 85 F1 | 	sub	fp, #12
2fee0     34 00 90 AD |  if_e	jmp	#LR__4776
2fee4     0C 4E 05 F1 | 	add	fp, #12
2fee8     A7 26 02 FB | 	rdlong	local01, fp
2feec     0C 4E 85 F1 | 	sub	fp, #12
2fef0     04 26 0E F2 | 	cmp	local01, #4 wz
2fef4     9C 00 90 5D |  if_ne	jmp	#LR__4777
2fef8     10 4E 05 F1 | 	add	fp, #16
2fefc     A7 26 C2 FA | 	rdbyte	local01, fp
2ff00     10 4E 85 F1 | 	sub	fp, #16
2ff04     04 26 CE F7 | 	test	local01, #4 wz
2ff08     0C 4E 05 A1 |  if_e	add	fp, #12
2ff0c     A7 0A 68 AC |  if_e	wrlong	#5, fp
2ff10     0C 4E 85 A1 |  if_e	sub	fp, #12
2ff14                 | ' 					}
2ff14                 | ' 				}
2ff14                 | ' 				break;
2ff14     7C 00 90 FD | 	jmp	#LR__4777
2ff18                 | LR__4776
2ff18     10 4E 05 F1 | 	add	fp, #16
2ff1c     A7 26 C2 FA | 	rdbyte	local01, fp
2ff20     10 4E 85 F1 | 	sub	fp, #16
2ff24     04 26 CE F7 | 	test	local01, #4 wz
2ff28     68 00 90 5D |  if_ne	jmp	#LR__4777
2ff2c     04 4E 05 F1 | 	add	fp, #4
2ff30     A7 26 02 FB | 	rdlong	local01, fp
2ff34     04 4E 85 F1 | 	sub	fp, #4
2ff38     06 26 06 F1 | 	add	local01, #6
2ff3c     13 27 C2 FA | 	rdbyte	local01, local01
2ff40     10 26 CE F7 | 	test	local01, #16 wz
2ff44     0C 4E 05 A1 |  if_e	add	fp, #12
2ff48     A7 0A 68 AC |  if_e	wrlong	#5, fp
2ff4c     0C 4E 85 A1 |  if_e	sub	fp, #12
2ff50                 | ' 				res = FR_NO_PATH; break;
2ff50     40 00 90 AD |  if_e	jmp	#LR__4777
2ff54     04 4E 05 F1 | 	add	fp, #4
2ff58     A7 28 02 FB | 	rdlong	local02, fp
2ff5c     14 27 02 F6 | 	mov	local01, local02
2ff60     10 4E 05 F1 | 	add	fp, #16
2ff64     A7 14 02 FB | 	rdlong	arg02, fp
2ff68     0A 13 02 F6 | 	mov	arg01, arg02
2ff6c     34 14 06 F1 | 	add	arg02, #52
2ff70     14 4E 85 F1 | 	sub	fp, #20
2ff74     10 28 06 F1 | 	add	local02, #16
2ff78     14 29 02 FB | 	rdlong	local02, local02
2ff7c     FF 29 06 F5 | 	and	local02, #511
2ff80     14 15 02 F1 | 	add	arg02, local02
2ff84     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2ff88     08 26 06 F1 | 	add	local01, #8
2ff8c     13 FB 61 FC | 	wrlong	result1, local01
2ff90     E4 FE 9F FD | 	jmp	#LR__4775
2ff94                 | LR__4777
2ff94                 | LR__4778
2ff94                 | ' 			}
2ff94                 | ' #line 3090 "ff.c"
2ff94                 | ' 			{
2ff94                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2ff94                 | ' 			}
2ff94                 | ' 		}
2ff94                 | ' 	}
2ff94                 | ' 
2ff94                 | ' 	return res;
2ff94     0C 4E 05 F1 | 	add	fp, #12
2ff98     A7 FA 01 FB | 	rdlong	result1, fp
2ff9c     0C 4E 85 F1 | 	sub	fp, #12
2ffa0     A7 F0 03 F6 | 	mov	ptra, fp
2ffa4     B2 00 A0 FD | 	call	#popregs_
2ffa8                 | _fatfs_cc_follow_path_ret
2ffa8     2D 00 64 FD | 	ret
2ffac                 | 
2ffac                 | _fatfs_cc_get_ldnumber
2ffac     01 00 66 F6 | 	neg	_var01, #1
2ffb0     09 03 0A FB | 	rdlong	_var02, arg01 wz
2ffb4     01 05 02 F6 | 	mov	_var03, _var02
2ffb8     01 FA 65 A6 |  if_e	neg	result1, #1
2ffbc     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2ffc0     97 10 48 FB | 	callpa	#(@LR__4781-@LR__4780)>>2,fcache_load_ptr_
2ffc4                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2ffc4                 | LR__4780
2ffc4     02 07 C2 FA | 	rdbyte	_var04, _var03
2ffc8     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2ffcc     20 FA 15 F2 | 	cmp	result1, #32 wc
2ffd0     01 04 06 F1 | 	add	_var03, #1
2ffd4     03 09 02 36 |  if_ae	mov	_var05, _var04
2ffd8     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2ffdc     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2ffe0     E0 FF 9F 1D |  if_a	jmp	#LR__4780
2ffe4                 | LR__4781
2ffe4     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2ffe8     3A 06 0E F2 | 	cmp	_var04, #58 wz
2ffec     40 00 90 5D |  if_ne	jmp	#LR__4783
2fff0     01 0A 06 F6 | 	mov	_var06, #1
2fff4     01 09 C2 FA | 	rdbyte	_var05, _var02
2fff8     30 08 16 F2 | 	cmp	_var05, #48 wc
2fffc     1C 00 90 CD |  if_b	jmp	#LR__4782
30000     01 09 C2 FA | 	rdbyte	_var05, _var02
30004     3A 08 16 F2 | 	cmp	_var05, #58 wc
30008     01 0D 02 C6 |  if_b	mov	_var07, _var02
3000c     02 0C 06 C1 |  if_b	add	_var07, #2
30010     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
30014     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
30018     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
3001c                 | LR__4782
3001c     01 0A 56 F2 | 	cmps	_var06, #1 wc
30020     05 01 02 C6 |  if_b	mov	_var01, _var06
30024     09 05 62 CC |  if_b	wrlong	_var03, arg01
30028                 | ' 			vol = i;
30028                 | ' 			*path = tt;
30028                 | ' 		}
30028                 | ' 		return vol;
30028     00 FB 01 F6 | 	mov	result1, _var01
3002c     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
30030                 | LR__4783
30030                 | ' 	}
30030                 | ' #line 3170 "ff.c"
30030                 | ' 	vol = 0;
30030                 | ' 
30030                 | ' 	return vol;
30030     00 FA 05 F6 | 	mov	result1, #0
30034                 | _fatfs_cc_get_ldnumber_ret
30034     2D 00 64 FD | 	ret
30038                 | 
30038                 | _fatfs_cc_check_fs
30038     04 4A 05 F6 | 	mov	COUNT_, #4
3003c     A8 00 A0 FD | 	call	#pushregs_
30040     09 27 02 F6 | 	mov	local01, arg01
30044     03 26 06 F1 | 	add	local01, #3
30048     13 01 48 FC | 	wrbyte	#0, local01
3004c     2D 26 06 F1 | 	add	local01, #45
30050     FF FF FF FF 
30054     13 FF 6B FC | 	wrlong	##-1, local01
30058     30 26 86 F1 | 	sub	local01, #48
3005c     13 13 02 F6 | 	mov	arg01, local01
30060     18 D5 BF FD | 	call	#_fatfs_cc_move_window
30064     00 FA 0D F2 | 	cmp	result1, #0 wz
30068     04 FA 05 56 |  if_ne	mov	result1, #4
3006c     94 01 90 5D |  if_ne	jmp	#LR__4794
30070     34 26 06 F1 | 	add	local01, #52
30074     13 13 02 F6 | 	mov	arg01, local01
30078     FE 13 06 F1 | 	add	arg01, #510
3007c                 | ' {
3007c                 | ' 
3007c                 | ' 	return *((WORD*)ptr);
3007c     09 29 E2 FA | 	rdword	local02, arg01
30080     13 2B C2 FA | 	rdbyte	local03, local01
30084     34 26 86 F1 | 	sub	local01, #52
30088     15 2D E2 F8 | 	getbyte	local04, local03, #0
3008c     EB 2C 0E F2 | 	cmp	local04, #235 wz
30090     15 17 02 56 |  if_ne	mov	arg03, local03
30094     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
30098     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
3009c     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
300a0     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
300a4     44 01 90 5D |  if_ne	jmp	#LR__4793
300a8     14 2D 32 F9 | 	getword	local04, local02, #0
300ac     55 00 00 FF 
300b0     55 2C 0E F2 | 	cmp	local04, ##43605 wz
300b4     2C 00 90 5D |  if_ne	jmp	#LR__4790
300b8     34 26 06 F1 | 	add	local01, #52
300bc     13 13 02 F6 | 	mov	arg01, local01
300c0     34 26 86 F1 | 	sub	local01, #52
300c4     52 12 06 F1 | 	add	arg01, #82
300c8     AA 01 00 FF 
300cc     18 15 06 F6 | 	mov	arg02, ##@LR__5384
300d0     08 16 06 F6 | 	mov	arg03, #8
300d4     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
300d8     00 FA 0D F2 | 	cmp	result1, #0 wz
300dc                 | ' 			return 0;
300dc     00 FA 05 A6 |  if_e	mov	result1, #0
300e0     20 01 90 AD |  if_e	jmp	#LR__4794
300e4                 | LR__4790
300e4     34 26 06 F1 | 	add	local01, #52
300e8     13 13 02 F6 | 	mov	arg01, local01
300ec     0B 12 06 F1 | 	add	arg01, #11
300f0                 | ' {
300f0                 | ' 
300f0                 | ' 	return *((WORD*)ptr);
300f0     09 FB E1 FA | 	rdword	result1, arg01
300f4     0D 26 06 F1 | 	add	local01, #13
300f8     13 2B C2 FA | 	rdbyte	local03, local01
300fc     41 26 86 F1 | 	sub	local01, #65
30100     FD 2C 32 F9 | 	getword	local04, result1, #0
30104     FD 14 32 F9 | 	getword	arg02, result1, #0
30108     01 14 86 F1 | 	sub	arg02, #1
3010c     0A 2D CA F7 | 	test	local04, arg02 wz
30110     D8 00 90 5D |  if_ne	jmp	#LR__4792
30114     FD 14 32 F9 | 	getword	arg02, result1, #0
30118     01 00 00 FF 
3011c     00 14 16 F2 | 	cmp	arg02, ##512 wc
30120     C8 00 90 CD |  if_b	jmp	#LR__4792
30124     FD 14 32 F9 | 	getword	arg02, result1, #0
30128     01 00 00 FF 
3012c     01 14 16 F2 | 	cmp	arg02, ##513 wc
30130     B8 00 90 3D |  if_ae	jmp	#LR__4792
30134     15 13 02 F6 | 	mov	arg01, local03
30138     07 12 4E F7 | 	zerox	arg01, #7 wz
3013c     AC 00 90 AD |  if_e	jmp	#LR__4792
30140     15 13 E2 F8 | 	getbyte	arg01, local03, #0
30144     15 2B E2 F8 | 	getbyte	local03, local03, #0
30148     01 2A 86 F1 | 	sub	local03, #1
3014c     15 13 CA F7 | 	test	arg01, local03 wz
30150     98 00 90 5D |  if_ne	jmp	#LR__4792
30154     34 26 06 F1 | 	add	local01, #52
30158     13 13 02 F6 | 	mov	arg01, local01
3015c     34 26 86 F1 | 	sub	local01, #52
30160     0E 12 06 F1 | 	add	arg01, #14
30164                 | ' {
30164                 | ' 
30164                 | ' 	return *((WORD*)ptr);
30164     09 FB E9 FA | 	rdword	result1, arg01 wz
30168     80 00 90 AD |  if_e	jmp	#LR__4792
3016c     44 26 06 F1 | 	add	local01, #68
30170     13 13 C2 FA | 	rdbyte	arg01, local01
30174     44 26 86 F1 | 	sub	local01, #68
30178     01 12 86 F1 | 	sub	arg01, #1
3017c     02 12 16 F2 | 	cmp	arg01, #2 wc
30180     68 00 90 3D |  if_ae	jmp	#LR__4792
30184     34 26 06 F1 | 	add	local01, #52
30188     13 13 02 F6 | 	mov	arg01, local01
3018c     34 26 86 F1 | 	sub	local01, #52
30190     11 12 06 F1 | 	add	arg01, #17
30194                 | ' {
30194                 | ' 
30194                 | ' 	return *((WORD*)ptr);
30194     09 FB E9 FA | 	rdword	result1, arg01 wz
30198     50 00 90 AD |  if_e	jmp	#LR__4792
3019c     34 26 06 F1 | 	add	local01, #52
301a0     13 13 02 F6 | 	mov	arg01, local01
301a4     34 26 86 F1 | 	sub	local01, #52
301a8     13 12 06 F1 | 	add	arg01, #19
301ac                 | ' {
301ac                 | ' 
301ac                 | ' 	return *((WORD*)ptr);
301ac     09 FB E1 FA | 	rdword	result1, arg01
301b0     FD 2A 32 F9 | 	getword	local03, result1, #0
301b4     80 2A 16 F2 | 	cmp	local03, #128 wc
301b8     20 00 90 3D |  if_ae	jmp	#LR__4791
301bc     34 26 06 F1 | 	add	local01, #52
301c0     13 13 02 F6 | 	mov	arg01, local01
301c4     34 26 86 F1 | 	sub	local01, #52
301c8     20 12 06 F1 | 	add	arg01, #32
301cc                 | ' {
301cc                 | ' 
301cc                 | ' 	return *((DWORD*)ptr);
301cc     09 FB 01 FB | 	rdlong	result1, arg01
301d0     80 00 00 FF 
301d4     00 FA 15 F2 | 	cmp	result1, ##65536 wc
301d8     10 00 90 CD |  if_b	jmp	#LR__4792
301dc                 | LR__4791
301dc     4A 26 06 F1 | 	add	local01, #74
301e0                 | ' {
301e0                 | ' 
301e0                 | ' 	return *((WORD*)ptr);
301e0     13 FB E9 FA | 	rdword	result1, local01 wz
301e4                 | ' 			&& b != 0 && (b & (b - 1)) == 0
301e4                 | ' 			&& ld_word(fs->win +  14 ) != 0
301e4                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
301e4                 | ' 			&& ld_word(fs->win +  17 ) != 0
301e4                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
301e4                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
301e4                 | ' 				return 0;
301e4     00 FA 05 56 |  if_ne	mov	result1, #0
301e8     18 00 90 5D |  if_ne	jmp	#LR__4794
301ec                 | LR__4792
301ec                 | LR__4793
301ec                 | ' 		}
301ec                 | ' 	}
301ec                 | ' 	return sign == 0xAA55 ? 2 : 3;
301ec     14 2B 32 F9 | 	getword	local03, local02, #0
301f0     55 00 00 FF 
301f4     55 2A 0E F2 | 	cmp	local03, ##43605 wz
301f8     02 2C 06 A6 |  if_e	mov	local04, #2
301fc     03 2C 06 56 |  if_ne	mov	local04, #3
30200     16 FB 01 F6 | 	mov	result1, local04
30204                 | LR__4794
30204     A7 F0 03 F6 | 	mov	ptra, fp
30208     B2 00 A0 FD | 	call	#popregs_
3020c                 | _fatfs_cc_check_fs_ret
3020c     2D 00 64 FD | 	ret
30210                 | 
30210                 | _fatfs_cc_find_volume
30210     05 4A 05 F6 | 	mov	COUNT_, #5
30214     A8 00 A0 FD | 	call	#pushregs_
30218     24 F0 07 F1 | 	add	ptra, #36
3021c     09 27 02 F6 | 	mov	local01, arg01
30220     0A 29 02 F6 | 	mov	local02, arg02
30224     13 13 02 F6 | 	mov	arg01, local01
30228     00 14 06 F6 | 	mov	arg02, #0
3022c     08 FE BF FD | 	call	#_fatfs_cc_check_fs
30230     02 FA 0D F2 | 	cmp	result1, #2 wz
30234     0C 00 90 AD |  if_e	jmp	#LR__4800
30238     03 FA 15 F2 | 	cmp	result1, #3 wc
3023c     00 28 0E C2 |  if_b	cmp	local02, #0 wz
30240     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4808
30244                 | LR__4800
30244                 | ' 	for (i = 0; i < 4; i++) {
30244     00 2A 06 F6 | 	mov	local03, #0
30248     97 26 48 FB | 	callpa	#(@LR__4802-@LR__4801)>>2,fcache_load_ptr_
3024c                 | LR__4801
3024c     04 2A 16 F2 | 	cmp	local03, #4 wc
30250     44 00 90 3D |  if_ae	jmp	#LR__4803
30254     15 2D 02 F6 | 	mov	local04, local03
30258     02 2C 66 F0 | 	shl	local04, #2
3025c     14 4E 05 F1 | 	add	fp, #20
30260     A7 2C 02 F1 | 	add	local04, fp
30264     34 26 06 F1 | 	add	local01, #52
30268     13 13 02 F6 | 	mov	arg01, local01
3026c     34 26 86 F1 | 	sub	local01, #52
30270     BE 13 06 F1 | 	add	arg01, #446
30274     15 15 02 F6 | 	mov	arg02, local03
30278     04 14 66 F0 | 	shl	arg02, #4
3027c     0A 13 02 F1 | 	add	arg01, arg02
30280     08 12 06 F1 | 	add	arg01, #8
30284                 | ' {
30284                 | ' 
30284                 | ' 	return *((DWORD*)ptr);
30284     09 FB 01 FB | 	rdlong	result1, arg01
30288     14 4E 85 F1 | 	sub	fp, #20
3028c     16 FB 61 FC | 	wrlong	result1, local04
30290     01 2A 06 F1 | 	add	local03, #1
30294     B4 FF 9F FD | 	jmp	#LR__4801
30298                 | LR__4802
30298                 | LR__4803
30298     00 28 0E F2 | 	cmp	local02, #0 wz
3029c     14 2D 02 56 |  if_ne	mov	local04, local02
302a0     01 2C 86 51 |  if_ne	sub	local04, #1
302a4     00 2C 06 A6 |  if_e	mov	local04, #0
302a8     16 2B 02 F6 | 	mov	local03, local04
302ac                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
302ac                 | ' 	}
302ac                 | ' 	i = part ? part - 1 : 0;
302ac                 | ' 	do {
302ac                 | LR__4804
302ac     15 2D 02 F6 | 	mov	local04, local03
302b0     02 2C 66 F0 | 	shl	local04, #2
302b4     14 4E 05 F1 | 	add	fp, #20
302b8     A7 2C 02 F1 | 	add	local04, fp
302bc     16 2D 0A FB | 	rdlong	local04, local04 wz
302c0     14 4E 85 F1 | 	sub	fp, #20
302c4     28 00 90 AD |  if_e	jmp	#LR__4805
302c8     15 2D 02 F6 | 	mov	local04, local03
302cc     02 2C 66 F0 | 	shl	local04, #2
302d0     14 4E 05 F1 | 	add	fp, #20
302d4     A7 2C 02 F1 | 	add	local04, fp
302d8     16 15 02 FB | 	rdlong	arg02, local04
302dc     13 13 02 F6 | 	mov	arg01, local01
302e0     14 4E 85 F1 | 	sub	fp, #20
302e4     50 FD BF FD | 	call	#_fatfs_cc_check_fs
302e8     FD 2C 02 F6 | 	mov	local04, result1
302ec     04 00 90 FD | 	jmp	#LR__4806
302f0                 | LR__4805
302f0     03 2C 06 F6 | 	mov	local04, #3
302f4                 | LR__4806
302f4     16 2F 02 F6 | 	mov	local05, local04
302f8     00 28 0E F2 | 	cmp	local02, #0 wz
302fc     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
30300     0C 00 90 8D |  if_c_and_z	jmp	#LR__4807
30304     01 2A 06 A1 |  if_e	add	local03, #1
30308     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
3030c     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4804
30310                 | LR__4807
30310                 | ' 	return fmt;
30310     17 FB 01 F6 | 	mov	result1, local05
30314                 | LR__4808
30314     A7 F0 03 F6 | 	mov	ptra, fp
30318     B2 00 A0 FD | 	call	#popregs_
3031c                 | _fatfs_cc_find_volume_ret
3031c     2D 00 64 FD | 	ret
30320                 | 
30320                 | _fatfs_cc_mount_volume
30320     0B 4A 05 F6 | 	mov	COUNT_, #11
30324     A8 00 A0 FD | 	call	#pushregs_
30328     0A 27 02 F6 | 	mov	local01, arg02
3032c     0B 29 02 F6 | 	mov	local02, arg03
30330     13 01 68 FC | 	wrlong	#0, local01
30334     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
30338     FD 2A 02 F6 | 	mov	local03, result1
3033c     00 2A 56 F2 | 	cmps	local03, #0 wc
30340     0B FA 05 C6 |  if_b	mov	result1, #11
30344     3C 05 90 CD |  if_b	jmp	#LR__4820
30348     15 17 02 F6 | 	mov	arg03, local03
3034c     02 16 66 F0 | 	shl	arg03, #2
30350     F2 16 02 F1 | 	add	arg03, objptr
30354     0B 2D 0A FB | 	rdlong	local04, arg03 wz
30358     0C FA 05 A6 |  if_e	mov	result1, #12
3035c     24 05 90 AD |  if_e	jmp	#LR__4820
30360     13 2D 62 FC | 	wrlong	local04, local01
30364     14 29 E2 F8 | 	getbyte	local02, local02, #0
30368     FE 28 06 F5 | 	and	local02, #254
3036c     16 17 CA FA | 	rdbyte	arg03, local04 wz
30370     4C 00 90 AD |  if_e	jmp	#LR__4811
30374     01 2C 06 F1 | 	add	local04, #1
30378     16 13 CA FA | 	rdbyte	arg01, local04 wz
3037c     01 2C 86 F1 | 	sub	local04, #1
30380     01 FA 05 56 |  if_ne	mov	result1, #1
30384                 | ' 
30384                 | ' 	return Stat;
30384     01 00 00 AF 
30388     20 E4 05 A1 |  if_e	add	objptr, ##544
3038c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
30390     01 00 00 AF 
30394     20 E4 85 A1 |  if_e	sub	objptr, ##544
30398     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
3039c     01 16 CE F7 | 	test	arg03, #1 wz
303a0     1C 00 90 5D |  if_ne	jmp	#LR__4810
303a4     00 28 0E F2 | 	cmp	local02, #0 wz
303a8     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
303ac     04 FA CD 57 |  if_ne	test	result1, #4 wz
303b0                 | ' 				return FR_WRITE_PROTECTED;
303b0     0A FA 05 56 |  if_ne	mov	result1, #10
303b4     CC 04 90 5D |  if_ne	jmp	#LR__4820
303b8                 | ' 			}
303b8                 | ' 			return FR_OK;
303b8     00 FA 05 F6 | 	mov	result1, #0
303bc     C4 04 90 FD | 	jmp	#LR__4820
303c0                 | LR__4810
303c0                 | LR__4811
303c0     16 01 48 FC | 	wrbyte	#0, local04
303c4     01 2C 06 F1 | 	add	local04, #1
303c8     16 2B 42 FC | 	wrbyte	local03, local04
303cc     16 13 C2 FA | 	rdbyte	arg01, local04
303d0     01 2C 86 F1 | 	sub	local04, #1
303d4     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
303d8     FD 16 02 F6 | 	mov	arg03, result1
303dc     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
303e0     01 2E CE F7 | 	test	local05, #1 wz
303e4                 | ' 		return FR_NOT_READY;
303e4     03 FA 05 56 |  if_ne	mov	result1, #3
303e8     98 04 90 5D |  if_ne	jmp	#LR__4820
303ec     00 28 0E F2 | 	cmp	local02, #0 wz
303f0     0B 2F 02 56 |  if_ne	mov	local05, arg03
303f4     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
303f8     04 2E CE 57 |  if_ne	test	local05, #4 wz
303fc                 | ' 		return FR_WRITE_PROTECTED;
303fc     0A FA 05 56 |  if_ne	mov	result1, #10
30400     80 04 90 5D |  if_ne	jmp	#LR__4820
30404     16 13 02 F6 | 	mov	arg01, local04
30408     00 14 06 F6 | 	mov	arg02, #0
3040c     00 FE BF FD | 	call	#_fatfs_cc_find_volume
30410     FD 12 02 F6 | 	mov	arg01, result1
30414     04 12 0E F2 | 	cmp	arg01, #4 wz
30418     01 FA 05 A6 |  if_e	mov	result1, #1
3041c     64 04 90 AD |  if_e	jmp	#LR__4820
30420     02 12 16 F2 | 	cmp	arg01, #2 wc
30424     0D FA 05 36 |  if_ae	mov	result1, #13
30428     58 04 90 3D |  if_ae	jmp	#LR__4820
3042c     30 2C 06 F1 | 	add	local04, #48
30430     16 31 02 FB | 	rdlong	local06, local04
30434     04 2C 06 F1 | 	add	local04, #4
30438     16 13 02 F6 | 	mov	arg01, local04
3043c     34 2C 86 F1 | 	sub	local04, #52
30440     0B 12 06 F1 | 	add	arg01, #11
30444                 | ' {
30444                 | ' 
30444                 | ' 	return *((WORD*)ptr);
30444     09 FB E1 FA | 	rdword	result1, arg01
30448     01 00 00 FF 
3044c     00 FA 0D F2 | 	cmp	result1, ##512 wz
30450     0D FA 05 56 |  if_ne	mov	result1, #13
30454     2C 04 90 5D |  if_ne	jmp	#LR__4820
30458     34 2C 06 F1 | 	add	local04, #52
3045c     16 13 02 F6 | 	mov	arg01, local04
30460     34 2C 86 F1 | 	sub	local04, #52
30464     16 12 06 F1 | 	add	arg01, #22
30468                 | ' {
30468                 | ' 
30468                 | ' 	return *((WORD*)ptr);
30468     09 FB E1 FA | 	rdword	result1, arg01
3046c     FD 32 0A F6 | 	mov	local07, result1 wz
30470     18 00 90 5D |  if_ne	jmp	#LR__4812
30474     34 2C 06 F1 | 	add	local04, #52
30478     16 13 02 F6 | 	mov	arg01, local04
3047c     34 2C 86 F1 | 	sub	local04, #52
30480     24 12 06 F1 | 	add	arg01, #36
30484                 | ' {
30484                 | ' 
30484                 | ' 	return *((DWORD*)ptr);
30484     09 FB 01 FB | 	rdlong	result1, arg01
30488     FD 32 02 F6 | 	mov	local07, result1
3048c                 | LR__4812
3048c     1C 2C 06 F1 | 	add	local04, #28
30490     16 33 62 FC | 	wrlong	local07, local04
30494     28 2C 06 F1 | 	add	local04, #40
30498     16 2F C2 FA | 	rdbyte	local05, local04
3049c     42 2C 86 F1 | 	sub	local04, #66
304a0     16 2F 42 FC | 	wrbyte	local05, local04
304a4     16 2F C2 FA | 	rdbyte	local05, local04
304a8     02 2C 86 F1 | 	sub	local04, #2
304ac     01 2E 0E F2 | 	cmp	local05, #1 wz
304b0     02 2C 06 51 |  if_ne	add	local04, #2
304b4     16 2F C2 5A |  if_ne	rdbyte	local05, local04
304b8     02 2C 86 51 |  if_ne	sub	local04, #2
304bc     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
304c0     0D FA 05 56 |  if_ne	mov	result1, #13
304c4     BC 03 90 5D |  if_ne	jmp	#LR__4820
304c8     02 2C 06 F1 | 	add	local04, #2
304cc     16 2F C2 FA | 	rdbyte	local05, local04
304d0     17 33 02 FD | 	qmul	local07, local05
304d4     3F 2C 06 F1 | 	add	local04, #63
304d8     16 2F C2 FA | 	rdbyte	local05, local04
304dc     37 2C 86 F1 | 	sub	local04, #55
304e0     16 2F 52 FC | 	wrword	local05, local04
304e4     16 2F EA FA | 	rdword	local05, local04 wz
304e8     0A 2C 86 F1 | 	sub	local04, #10
304ec     18 32 62 FD | 	getqx	local07
304f0     20 00 90 AD |  if_e	jmp	#LR__4813
304f4     0A 2C 06 F1 | 	add	local04, #10
304f8     16 2F E2 FA | 	rdword	local05, local04
304fc     17 2B 32 F9 | 	getword	local03, local05, #0
30500     0A 2C 86 F1 | 	sub	local04, #10
30504     17 2F 32 F9 | 	getword	local05, local05, #0
30508     01 2E 86 F1 | 	sub	local05, #1
3050c     17 2B CA F7 | 	test	local03, local05 wz
30510     08 00 90 AD |  if_e	jmp	#LR__4814
30514                 | LR__4813
30514     0D FA 05 F6 | 	mov	result1, #13
30518     68 03 90 FD | 	jmp	#LR__4820
3051c                 | LR__4814
3051c     34 2C 06 F1 | 	add	local04, #52
30520     16 13 02 F6 | 	mov	arg01, local04
30524     11 12 06 F1 | 	add	arg01, #17
30528                 | ' {
30528                 | ' 
30528                 | ' 	return *((WORD*)ptr);
30528     09 FB E1 FA | 	rdword	result1, arg01
3052c     2C 2C 86 F1 | 	sub	local04, #44
30530     16 FB 51 FC | 	wrword	result1, local04
30534     16 2F E2 FA | 	rdword	local05, local04
30538     08 2C 86 F1 | 	sub	local04, #8
3053c     17 13 52 F6 | 	abs	arg01, local05 wc
30540     09 13 42 F8 | 	getnib	arg01, arg01, #0
30544     09 13 8A F6 | 	negc	arg01, arg01 wz
30548     0D FA 05 56 |  if_ne	mov	result1, #13
3054c     34 03 90 5D |  if_ne	jmp	#LR__4820
30550     34 2C 06 F1 | 	add	local04, #52
30554     16 13 02 F6 | 	mov	arg01, local04
30558     34 2C 86 F1 | 	sub	local04, #52
3055c     13 12 06 F1 | 	add	arg01, #19
30560                 | ' {
30560                 | ' 
30560                 | ' 	return *((WORD*)ptr);
30560     09 FB E1 FA | 	rdword	result1, arg01
30564     FD 34 0A F6 | 	mov	local08, result1 wz
30568     34 2C 06 A1 |  if_e	add	local04, #52
3056c     16 13 02 A6 |  if_e	mov	arg01, local04
30570     34 2C 86 A1 |  if_e	sub	local04, #52
30574     20 12 06 A1 |  if_e	add	arg01, #32
30578                 | ' {
30578                 | ' 
30578                 | ' 	return *((DWORD*)ptr);
30578     09 35 02 AB |  if_e	rdlong	local08, arg01
3057c     34 2C 06 F1 | 	add	local04, #52
30580     16 13 02 F6 | 	mov	arg01, local04
30584     34 2C 86 F1 | 	sub	local04, #52
30588     0E 12 06 F1 | 	add	arg01, #14
3058c                 | ' {
3058c                 | ' 
3058c                 | ' 	return *((WORD*)ptr);
3058c     09 FB E1 FA | 	rdword	result1, arg01
30590     FD 12 02 F6 | 	mov	arg01, result1
30594     09 2F 02 F6 | 	mov	local05, arg01
30598     0F 2E 4E F7 | 	zerox	local05, #15 wz
3059c     0D FA 05 A6 |  if_e	mov	result1, #13
305a0     E0 02 90 AD |  if_e	jmp	#LR__4820
305a4     09 37 32 F9 | 	getword	local09, arg01, #0
305a8     19 37 02 F1 | 	add	local09, local07
305ac     08 2C 06 F1 | 	add	local04, #8
305b0     16 2F E2 FA | 	rdword	local05, local04
305b4     08 2C 86 F1 | 	sub	local04, #8
305b8     17 2F 52 F6 | 	abs	local05, local05 wc
305bc     04 2E 46 F0 | 	shr	local05, #4
305c0     17 37 82 F3 | 	sumc	local09, local05
305c4     1B 35 12 F2 | 	cmp	local08, local09 wc
305c8     0D FA 05 C6 |  if_b	mov	result1, #13
305cc     B4 02 90 CD |  if_b	jmp	#LR__4820
305d0     1B 35 82 F1 | 	sub	local08, local09
305d4     0A 2C 06 F1 | 	add	local04, #10
305d8     16 2F E2 FA | 	rdword	local05, local04
305dc     17 35 12 FD | 	qdiv	local08, local05
305e0     0A 2C 86 F1 | 	sub	local04, #10
305e4     18 2E 62 FD | 	getqx	local05
305e8     00 2E 0E F2 | 	cmp	local05, #0 wz
305ec     0D FA 05 A6 |  if_e	mov	result1, #13
305f0     90 02 90 AD |  if_e	jmp	#LR__4820
305f4     00 38 06 F6 | 	mov	local10, #0
305f8     FF FF 07 FF 
305fc     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
30600     03 38 06 C6 |  if_b	mov	local10, #3
30604     7F 00 00 FF 
30608     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
3060c     02 38 06 C6 |  if_b	mov	local10, #2
30610     07 00 00 FF 
30614     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
30618     01 38 06 C6 |  if_b	mov	local10, #1
3061c     00 38 0E F2 | 	cmp	local10, #0 wz
30620     0D FA 05 A6 |  if_e	mov	result1, #13
30624     5C 02 90 AD |  if_e	jmp	#LR__4820
30628     02 2E 06 F1 | 	add	local05, #2
3062c     18 2C 06 F1 | 	add	local04, #24
30630     16 2F 62 FC | 	wrlong	local05, local04
30634     08 2C 06 F1 | 	add	local04, #8
30638     16 31 62 FC | 	wrlong	local06, local04
3063c     18 2F 02 F6 | 	mov	local05, local06
30640     09 13 32 F9 | 	getword	arg01, arg01, #0
30644     09 2F 02 F1 | 	add	local05, arg01
30648     04 2C 06 F1 | 	add	local04, #4
3064c     16 2F 62 FC | 	wrlong	local05, local04
30650     18 2F 02 F6 | 	mov	local05, local06
30654     1B 2F 02 F1 | 	add	local05, local09
30658     08 2C 06 F1 | 	add	local04, #8
3065c     16 2F 62 FC | 	wrlong	local05, local04
30660     2C 2C 86 F1 | 	sub	local04, #44
30664     03 38 0E F2 | 	cmp	local10, #3 wz
30668     5C 00 90 5D |  if_ne	jmp	#LR__4815
3066c     34 2C 06 F1 | 	add	local04, #52
30670     16 13 02 F6 | 	mov	arg01, local04
30674     34 2C 86 F1 | 	sub	local04, #52
30678     2A 12 06 F1 | 	add	arg01, #42
3067c                 | ' {
3067c                 | ' 
3067c                 | ' 	return *((WORD*)ptr);
3067c     09 FB E9 FA | 	rdword	result1, arg01 wz
30680     0D FA 05 56 |  if_ne	mov	result1, #13
30684     FC 01 90 5D |  if_ne	jmp	#LR__4820
30688     08 2C 06 F1 | 	add	local04, #8
3068c     16 2F EA FA | 	rdword	local05, local04 wz
30690     08 2C 86 F1 | 	sub	local04, #8
30694     0D FA 05 56 |  if_ne	mov	result1, #13
30698     E8 01 90 5D |  if_ne	jmp	#LR__4820
3069c     34 2C 06 F1 | 	add	local04, #52
306a0     16 13 02 F6 | 	mov	arg01, local04
306a4     2C 12 06 F1 | 	add	arg01, #44
306a8                 | ' {
306a8                 | ' 
306a8                 | ' 	return *((DWORD*)ptr);
306a8     09 FB 01 FB | 	rdlong	result1, arg01
306ac     0C 2C 86 F1 | 	sub	local04, #12
306b0     16 FB 61 FC | 	wrlong	result1, local04
306b4     10 2C 86 F1 | 	sub	local04, #16
306b8     16 3B 02 FB | 	rdlong	local11, local04
306bc     18 2C 86 F1 | 	sub	local04, #24
306c0     02 3A 66 F0 | 	shl	local11, #2
306c4     6C 00 90 FD | 	jmp	#LR__4817
306c8                 | LR__4815
306c8     08 2C 06 F1 | 	add	local04, #8
306cc     16 2F EA FA | 	rdword	local05, local04 wz
306d0     08 2C 86 F1 | 	sub	local04, #8
306d4     0D FA 05 A6 |  if_e	mov	result1, #13
306d8     A8 01 90 AD |  if_e	jmp	#LR__4820
306dc     24 2C 06 F1 | 	add	local04, #36
306e0     16 2F 02 FB | 	rdlong	local05, local04
306e4     19 2F 02 F1 | 	add	local05, local07
306e8     04 2C 06 F1 | 	add	local04, #4
306ec     16 2F 62 FC | 	wrlong	local05, local04
306f0     28 2C 86 F1 | 	sub	local04, #40
306f4     02 38 0E F2 | 	cmp	local10, #2 wz
306f8     18 2C 06 A1 |  if_e	add	local04, #24
306fc     16 2F 02 AB |  if_e	rdlong	local05, local04
30700     18 2C 86 A1 |  if_e	sub	local04, #24
30704     01 2E 66 A0 |  if_e	shl	local05, #1
30708     24 00 90 AD |  if_e	jmp	#LR__4816
3070c     18 2C 06 F1 | 	add	local04, #24
30710     16 3B 02 FB | 	rdlong	local11, local04
30714     1D 2F 02 F6 | 	mov	local05, local11
30718     01 2E 66 F0 | 	shl	local05, #1
3071c     1D 2F 02 F1 | 	add	local05, local11
30720     01 2E 46 F0 | 	shr	local05, #1
30724     18 2C 86 F1 | 	sub	local04, #24
30728     01 3A 06 F5 | 	and	local11, #1
3072c     1D 2F 02 F1 | 	add	local05, local11
30730                 | LR__4816
30730     17 3B 02 F6 | 	mov	local11, local05
30734                 | LR__4817
30734     FF 3B 06 F1 | 	add	local11, #511
30738     09 3A 46 F0 | 	shr	local11, #9
3073c     1C 2C 06 F1 | 	add	local04, #28
30740     16 17 02 FB | 	rdlong	arg03, local04
30744     1C 2C 86 F1 | 	sub	local04, #28
30748     1D 17 12 F2 | 	cmp	arg03, local11 wc
3074c     0D FA 05 C6 |  if_b	mov	result1, #13
30750     30 01 90 CD |  if_b	jmp	#LR__4820
30754     14 2C 06 F1 | 	add	local04, #20
30758     FF FF FF FF 
3075c     16 FF 6B FC | 	wrlong	##-1, local04
30760     04 2C 86 F1 | 	sub	local04, #4
30764     FF FF FF FF 
30768     16 FF 6B FC | 	wrlong	##-1, local04
3076c     0C 2C 86 F1 | 	sub	local04, #12
30770     16 01 49 FC | 	wrbyte	#128, local04
30774     04 2C 86 F1 | 	sub	local04, #4
30778     03 38 0E F2 | 	cmp	local10, #3 wz
3077c     D0 00 90 5D |  if_ne	jmp	#LR__4819
30780     34 2C 06 F1 | 	add	local04, #52
30784     16 13 02 F6 | 	mov	arg01, local04
30788     34 2C 86 F1 | 	sub	local04, #52
3078c     30 12 06 F1 | 	add	arg01, #48
30790                 | ' {
30790                 | ' 
30790                 | ' 	return *((WORD*)ptr);
30790     09 FB E1 FA | 	rdword	result1, arg01
30794     FD 2E 32 F9 | 	getword	local05, result1, #0
30798     01 2E 0E F2 | 	cmp	local05, #1 wz
3079c     B0 00 90 5D |  if_ne	jmp	#LR__4819
307a0     01 30 06 F1 | 	add	local06, #1
307a4     16 13 02 F6 | 	mov	arg01, local04
307a8     18 15 02 F6 | 	mov	arg02, local06
307ac     CC CD BF FD | 	call	#_fatfs_cc_move_window
307b0     00 FA 0D F2 | 	cmp	result1, #0 wz
307b4     98 00 90 5D |  if_ne	jmp	#LR__4819
307b8     04 2C 06 F1 | 	add	local04, #4
307bc     16 01 48 FC | 	wrbyte	#0, local04
307c0     30 2C 06 F1 | 	add	local04, #48
307c4     16 13 02 F6 | 	mov	arg01, local04
307c8     34 2C 86 F1 | 	sub	local04, #52
307cc     FE 13 06 F1 | 	add	arg01, #510
307d0                 | ' {
307d0                 | ' 
307d0                 | ' 	return *((WORD*)ptr);
307d0     09 FB E1 FA | 	rdword	result1, arg01
307d4     FD 2E 32 F9 | 	getword	local05, result1, #0
307d8     55 00 00 FF 
307dc     55 2E 0E F2 | 	cmp	local05, ##43605 wz
307e0     34 2C 06 A1 |  if_e	add	local04, #52
307e4     16 13 02 A6 |  if_e	mov	arg01, local04
307e8     34 2C 86 A1 |  if_e	sub	local04, #52
307ec                 | ' {
307ec                 | ' 
307ec                 | ' 	return *((DWORD*)ptr);
307ec     09 FB 01 AB |  if_e	rdlong	result1, arg01
307f0     A9 B0 20 AF 
307f4     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
307f8     54 00 90 5D |  if_ne	jmp	#LR__4818
307fc     34 2C 06 F1 | 	add	local04, #52
30800     16 13 02 F6 | 	mov	arg01, local04
30804     34 2C 86 F1 | 	sub	local04, #52
30808     E4 13 06 F1 | 	add	arg01, #484
3080c                 | ' {
3080c                 | ' 
3080c                 | ' 	return *((DWORD*)ptr);
3080c     09 FB 01 FB | 	rdlong	result1, arg01
30810     B9 A0 30 FF 
30814     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
30818     34 00 90 5D |  if_ne	jmp	#LR__4818
3081c     34 2C 06 F1 | 	add	local04, #52
30820     16 13 02 F6 | 	mov	arg01, local04
30824     E8 13 06 F1 | 	add	arg01, #488
30828                 | ' {
30828                 | ' 
30828                 | ' 	return *((DWORD*)ptr);
30828     09 FB 01 FB | 	rdlong	result1, arg01
3082c     20 2C 86 F1 | 	sub	local04, #32
30830     16 FB 61 FC | 	wrlong	result1, local04
30834     20 2C 06 F1 | 	add	local04, #32
30838     16 13 02 F6 | 	mov	arg01, local04
3083c     EC 13 06 F1 | 	add	arg01, #492
30840                 | ' {
30840                 | ' 
30840                 | ' 	return *((DWORD*)ptr);
30840     09 FB 01 FB | 	rdlong	result1, arg01
30844     24 2C 86 F1 | 	sub	local04, #36
30848     16 FB 61 FC | 	wrlong	result1, local04
3084c     10 2C 86 F1 | 	sub	local04, #16
30850                 | LR__4818
30850                 | LR__4819
30850     16 39 42 FC | 	wrbyte	local10, local04
30854     04 E4 05 F1 | 	add	objptr, #4
30858     F2 2E E2 FA | 	rdword	local05, objptr
3085c     01 2E 06 F1 | 	add	local05, #1
30860     F2 2E 52 FC | 	wrword	local05, objptr
30864     F2 3A E2 FA | 	rdword	local11, objptr
30868     06 2C 06 F1 | 	add	local04, #6
3086c     16 3B 52 FC | 	wrword	local11, local04
30870     04 E4 05 F1 | 	add	objptr, #4
30874     06 2C 06 F1 | 	add	local04, #6
30878     16 E5 61 FC | 	wrlong	objptr, local04
3087c                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
3087c                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
3087c                 | ' 			{
3087c                 | ' 
3087c                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
3087c                 | ' 
3087c                 | ' 
3087c                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
3087c                 | ' 
3087c                 | ' 			}
3087c                 | ' 		}
3087c                 | ' 
3087c                 | ' 
3087c                 | ' 	}
3087c                 | ' 
3087c                 | ' 	fs->fs_type = (BYTE)fmt;
3087c                 | ' 	fs->id = ++Fsid;
3087c                 | ' 
3087c                 | ' 	fs->lfnbuf = LfnBuf;
3087c                 | ' #line 3567 "ff.c"
3087c                 | ' 	return FR_OK;
3087c     00 FA 05 F6 | 	mov	result1, #0
30880     08 E4 85 F1 | 	sub	objptr, #8
30884                 | LR__4820
30884     A7 F0 03 F6 | 	mov	ptra, fp
30888     B2 00 A0 FD | 	call	#popregs_
3088c                 | _fatfs_cc_mount_volume_ret
3088c     2D 00 64 FD | 	ret
30890                 | 
30890                 | _fatfs_cc_validate
30890     09 01 0A F6 | 	mov	_var01, arg01 wz
30894     09 02 06 F6 | 	mov	_var02, #9
30898     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
3089c     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
308a0     50 00 90 AD |  if_e	jmp	#LR__4830
308a4     04 00 06 F1 | 	add	_var01, #4
308a8     00 07 E2 FA | 	rdword	_var04, _var01
308ac     04 00 86 F1 | 	sub	_var01, #4
308b0     00 13 02 FB | 	rdlong	arg01, _var01
308b4     06 12 06 F1 | 	add	arg01, #6
308b8     09 FB E1 FA | 	rdword	result1, arg01
308bc     FD 06 0A F2 | 	cmp	_var04, result1 wz
308c0     30 00 90 5D |  if_ne	jmp	#LR__4830
308c4     00 07 02 FB | 	rdlong	_var04, _var01
308c8     01 06 06 F1 | 	add	_var04, #1
308cc     03 13 CA FA | 	rdbyte	arg01, _var04 wz
308d0     01 FA 05 56 |  if_ne	mov	result1, #1
308d4                 | ' 
308d4                 | ' 	return Stat;
308d4     01 00 00 AF 
308d8     20 E4 05 A1 |  if_e	add	objptr, ##544
308dc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
308e0     01 00 00 AF 
308e4     20 E4 85 A1 |  if_e	sub	objptr, ##544
308e8     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
308ec     01 04 CE F7 | 	test	_var03, #1 wz
308f0     00 02 06 A6 |  if_e	mov	_var02, #0
308f4                 | LR__4830
308f4     00 02 0E F2 | 	cmp	_var02, #0 wz
308f8     00 05 02 AB |  if_e	rdlong	_var03, _var01
308fc     00 04 06 56 |  if_ne	mov	_var03, #0
30900     0A 05 62 FC | 	wrlong	_var03, arg02
30904                 | ' 			res = FR_OK;
30904                 | ' 		}
30904                 | ' 
30904                 | ' 	}
30904                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
30904                 | ' 	return res;
30904     01 FB 01 F6 | 	mov	result1, _var02
30908                 | _fatfs_cc_validate_ret
30908     2D 00 64 FD | 	ret
3090c                 | 
3090c                 | _fatfs_cc_f_mount
3090c     01 4A 05 F6 | 	mov	COUNT_, #1
30910     A8 00 A0 FD | 	call	#pushregs_
30914     20 F0 07 F1 | 	add	ptra, #32
30918     04 4E 05 F1 | 	add	fp, #4
3091c     A7 12 62 FC | 	wrlong	arg01, fp
30920     04 4E 05 F1 | 	add	fp, #4
30924     A7 14 62 FC | 	wrlong	arg02, fp
30928     04 4E 05 F1 | 	add	fp, #4
3092c     A7 16 42 FC | 	wrbyte	arg03, fp
30930     04 4E 85 F1 | 	sub	fp, #4
30934     A7 16 02 FB | 	rdlong	arg03, fp
30938     14 4E 05 F1 | 	add	fp, #20
3093c     A7 16 62 FC | 	wrlong	arg03, fp
30940     A7 12 02 F6 | 	mov	arg01, fp
30944     1C 4E 85 F1 | 	sub	fp, #28
30948     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
3094c     14 4E 05 F1 | 	add	fp, #20
30950     A7 FA 61 FC | 	wrlong	result1, fp
30954     14 4E 85 F1 | 	sub	fp, #20
30958     00 FA 55 F2 | 	cmps	result1, #0 wc
3095c     0B FA 05 C6 |  if_b	mov	result1, #11
30960     C0 00 90 CD |  if_b	jmp	#LR__4841
30964     14 4E 05 F1 | 	add	fp, #20
30968     A7 16 02 FB | 	rdlong	arg03, fp
3096c     02 16 66 F0 | 	shl	arg03, #2
30970     F2 16 02 F1 | 	add	arg03, objptr
30974     0B 17 0A FB | 	rdlong	arg03, arg03 wz
30978     04 4E 85 F1 | 	sub	fp, #4
3097c     A7 16 62 FC | 	wrlong	arg03, fp
30980     10 4E 85 F1 | 	sub	fp, #16
30984     28 00 90 AD |  if_e	jmp	#LR__4840
30988     10 4E 05 F1 | 	add	fp, #16
3098c     A7 16 02 FB | 	rdlong	arg03, fp
30990     10 4E 85 F1 | 	sub	fp, #16
30994     01 16 06 F1 | 	add	arg03, #1
30998     0B 13 C2 FA | 	rdbyte	arg01, arg03
3099c     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
309a0     10 4E 05 F1 | 	add	fp, #16
309a4     A7 16 02 FB | 	rdlong	arg03, fp
309a8     10 4E 85 F1 | 	sub	fp, #16
309ac     0B 01 48 FC | 	wrbyte	#0, arg03
309b0                 | LR__4840
309b0     04 4E 05 F1 | 	add	fp, #4
309b4     A7 26 0A FB | 	rdlong	local01, fp wz
309b8     04 4E 85 F1 | 	sub	fp, #4
309bc     04 4E 05 51 |  if_ne	add	fp, #4
309c0     A7 26 02 5B |  if_ne	rdlong	local01, fp
309c4     04 4E 85 51 |  if_ne	sub	fp, #4
309c8     13 01 48 5C |  if_ne	wrbyte	#0, local01
309cc     14 4E 05 F1 | 	add	fp, #20
309d0     A7 26 02 FB | 	rdlong	local01, fp
309d4     02 26 66 F0 | 	shl	local01, #2
309d8     F2 26 02 F1 | 	add	local01, objptr
309dc     10 4E 85 F1 | 	sub	fp, #16
309e0     A7 16 02 FB | 	rdlong	arg03, fp
309e4     13 17 62 FC | 	wrlong	arg03, local01
309e8     08 4E 05 F1 | 	add	fp, #8
309ec     A7 26 CA FA | 	rdbyte	local01, fp wz
309f0     0C 4E 85 F1 | 	sub	fp, #12
309f4     00 FA 05 A6 |  if_e	mov	result1, #0
309f8     28 00 90 AD |  if_e	jmp	#LR__4841
309fc     08 4E 05 F1 | 	add	fp, #8
30a00     A7 12 02 F6 | 	mov	arg01, fp
30a04     04 4E 85 F1 | 	sub	fp, #4
30a08     A7 14 02 F6 | 	mov	arg02, fp
30a0c     04 4E 85 F1 | 	sub	fp, #4
30a10     00 16 06 F6 | 	mov	arg03, #0
30a14     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
30a18     18 4E 05 F1 | 	add	fp, #24
30a1c     A7 FA 61 FC | 	wrlong	result1, fp
30a20                 | ' 
30a20                 | ' 	res = mount_volume(&path, &fs, 0);
30a20                 | ' 	return res ;
30a20     18 4E 85 F1 | 	sub	fp, #24
30a24                 | LR__4841
30a24     A7 F0 03 F6 | 	mov	ptra, fp
30a28     B2 00 A0 FD | 	call	#popregs_
30a2c                 | _fatfs_cc_f_mount_ret
30a2c     2D 00 64 FD | 	ret
30a30                 | 
30a30                 | _fatfs_cc_f_open
30a30     02 4A 05 F6 | 	mov	COUNT_, #2
30a34     A8 00 A0 FD | 	call	#pushregs_
30a38     60 F0 07 F1 | 	add	ptra, #96
30a3c     04 4E 05 F1 | 	add	fp, #4
30a40     A7 12 62 FC | 	wrlong	arg01, fp
30a44     04 4E 05 F1 | 	add	fp, #4
30a48     A7 14 62 FC | 	wrlong	arg02, fp
30a4c     04 4E 05 F1 | 	add	fp, #4
30a50     A7 16 42 FC | 	wrbyte	arg03, fp
30a54     08 4E 85 F1 | 	sub	fp, #8
30a58     A7 18 0A FB | 	rdlong	arg04, fp wz
30a5c     04 4E 85 F1 | 	sub	fp, #4
30a60     09 FA 05 A6 |  if_e	mov	result1, #9
30a64     98 06 90 AD |  if_e	jmp	#LR__4867
30a68     0C 4E 05 F1 | 	add	fp, #12
30a6c     A7 18 C2 FA | 	rdbyte	arg04, fp
30a70     3F 18 06 F5 | 	and	arg04, #63
30a74     A7 18 42 FC | 	wrbyte	arg04, fp
30a78     04 4E 85 F1 | 	sub	fp, #4
30a7c     A7 12 02 F6 | 	mov	arg01, fp
30a80     3C 4E 05 F1 | 	add	fp, #60
30a84     A7 14 02 F6 | 	mov	arg02, fp
30a88     38 4E 85 F1 | 	sub	fp, #56
30a8c     A7 16 C2 FA | 	rdbyte	arg03, fp
30a90     0C 4E 85 F1 | 	sub	fp, #12
30a94     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
30a98     10 4E 05 F1 | 	add	fp, #16
30a9c     A7 FA 61 FC | 	wrlong	result1, fp
30aa0     10 4E 85 F1 | 	sub	fp, #16
30aa4     00 FA 0D F2 | 	cmp	result1, #0 wz
30aa8     2C 06 90 5D |  if_ne	jmp	#LR__4866
30aac     44 4E 05 F1 | 	add	fp, #68
30ab0     A7 18 02 FB | 	rdlong	arg04, fp
30ab4     30 4E 85 F1 | 	sub	fp, #48
30ab8     A7 18 62 FC | 	wrlong	arg04, fp
30abc     A7 12 02 F6 | 	mov	arg01, fp
30ac0     0C 4E 85 F1 | 	sub	fp, #12
30ac4     A7 26 02 FB | 	rdlong	local01, fp
30ac8     08 4E 85 F1 | 	sub	fp, #8
30acc     13 15 02 F6 | 	mov	arg02, local01
30ad0     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
30ad4     10 4E 05 F1 | 	add	fp, #16
30ad8     A7 FA 61 FC | 	wrlong	result1, fp
30adc     10 4E 85 F1 | 	sub	fp, #16
30ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
30ae4     1C 00 90 5D |  if_ne	jmp	#LR__4850
30ae8     3F 4E 05 F1 | 	add	fp, #63
30aec     A7 18 C2 FA | 	rdbyte	arg04, fp
30af0     3F 4E 85 F1 | 	sub	fp, #63
30af4     80 18 CE F7 | 	test	arg04, #128 wz
30af8     10 4E 05 51 |  if_ne	add	fp, #16
30afc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
30b00     10 4E 85 51 |  if_ne	sub	fp, #16
30b04                 | LR__4850
30b04     0C 4E 05 F1 | 	add	fp, #12
30b08     A7 18 C2 FA | 	rdbyte	arg04, fp
30b0c     0C 4E 85 F1 | 	sub	fp, #12
30b10     1C 18 CE F7 | 	test	arg04, #28 wz
30b14     F0 01 90 AD |  if_e	jmp	#LR__4855
30b18     10 4E 05 F1 | 	add	fp, #16
30b1c     A7 26 0A FB | 	rdlong	local01, fp wz
30b20     10 4E 85 F1 | 	sub	fp, #16
30b24     48 00 90 AD |  if_e	jmp	#LR__4852
30b28     10 4E 05 F1 | 	add	fp, #16
30b2c     A7 18 02 FB | 	rdlong	arg04, fp
30b30     10 4E 85 F1 | 	sub	fp, #16
30b34     04 18 0E F2 | 	cmp	arg04, #4 wz
30b38     1C 00 90 5D |  if_ne	jmp	#LR__4851
30b3c     14 4E 05 F1 | 	add	fp, #20
30b40     A7 12 02 F6 | 	mov	arg01, fp
30b44     14 4E 85 F1 | 	sub	fp, #20
30b48     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
30b4c     10 4E 05 F1 | 	add	fp, #16
30b50     A7 FA 61 FC | 	wrlong	result1, fp
30b54     10 4E 85 F1 | 	sub	fp, #16
30b58                 | LR__4851
30b58     0C 4E 05 F1 | 	add	fp, #12
30b5c     A7 26 C2 FA | 	rdbyte	local01, fp
30b60     08 26 46 F5 | 	or	local01, #8
30b64     A7 26 42 FC | 	wrbyte	local01, fp
30b68     0C 4E 85 F1 | 	sub	fp, #12
30b6c     3C 00 90 FD | 	jmp	#LR__4854
30b70                 | LR__4852
30b70     1A 4E 05 F1 | 	add	fp, #26
30b74     A7 26 C2 FA | 	rdbyte	local01, fp
30b78     1A 4E 85 F1 | 	sub	fp, #26
30b7c     11 26 CE F7 | 	test	local01, #17 wz
30b80     10 4E 05 51 |  if_ne	add	fp, #16
30b84     A7 0E 68 5C |  if_ne	wrlong	#7, fp
30b88     10 4E 85 51 |  if_ne	sub	fp, #16
30b8c     1C 00 90 5D |  if_ne	jmp	#LR__4853
30b90     0C 4E 05 F1 | 	add	fp, #12
30b94     A7 26 C2 FA | 	rdbyte	local01, fp
30b98     0C 4E 85 F1 | 	sub	fp, #12
30b9c     04 26 CE F7 | 	test	local01, #4 wz
30ba0     10 4E 05 51 |  if_ne	add	fp, #16
30ba4     A7 10 68 5C |  if_ne	wrlong	#8, fp
30ba8     10 4E 85 51 |  if_ne	sub	fp, #16
30bac                 | LR__4853
30bac                 | LR__4854
30bac     10 4E 05 F1 | 	add	fp, #16
30bb0     A7 26 0A FB | 	rdlong	local01, fp wz
30bb4     10 4E 85 F1 | 	sub	fp, #16
30bb8     A8 01 90 5D |  if_ne	jmp	#LR__4858
30bbc     0C 4E 05 F1 | 	add	fp, #12
30bc0     A7 26 C2 FA | 	rdbyte	local01, fp
30bc4     0C 4E 85 F1 | 	sub	fp, #12
30bc8     08 26 CE F7 | 	test	local01, #8 wz
30bcc     94 01 90 AD |  if_e	jmp	#LR__4858
30bd0     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
30bd4     54 4E 05 F1 | 	add	fp, #84
30bd8     A7 FA 61 FC | 	wrlong	result1, fp
30bdc     24 4E 85 F1 | 	sub	fp, #36
30be0     A7 12 02 FB | 	rdlong	arg01, fp
30be4     0E 12 06 F1 | 	add	arg01, #14
30be8     09 FB 61 FC | 	wrlong	result1, arg01
30bec     A7 12 02 FB | 	rdlong	arg01, fp
30bf0     16 12 06 F1 | 	add	arg01, #22
30bf4     24 4E 05 F1 | 	add	fp, #36
30bf8     A7 14 02 FB | 	rdlong	arg02, fp
30bfc     09 15 62 FC | 	wrlong	arg02, arg01
30c00     10 4E 85 F1 | 	sub	fp, #16
30c04     A7 12 02 FB | 	rdlong	arg01, fp
30c08     14 4E 85 F1 | 	sub	fp, #20
30c0c     A7 14 02 FB | 	rdlong	arg02, fp
30c10     30 4E 85 F1 | 	sub	fp, #48
30c14     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
30c18     48 4E 05 F1 | 	add	fp, #72
30c1c     A7 FA 61 FC | 	wrlong	result1, fp
30c20     18 4E 85 F1 | 	sub	fp, #24
30c24     A7 26 02 FB | 	rdlong	local01, fp
30c28     0B 26 06 F1 | 	add	local01, #11
30c2c     13 41 48 FC | 	wrbyte	#32, local01
30c30     14 4E 05 F1 | 	add	fp, #20
30c34     A7 12 02 FB | 	rdlong	arg01, fp
30c38     14 4E 85 F1 | 	sub	fp, #20
30c3c     A7 14 02 FB | 	rdlong	arg02, fp
30c40     30 4E 85 F1 | 	sub	fp, #48
30c44     00 16 06 F6 | 	mov	arg03, #0
30c48     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
30c4c     30 4E 05 F1 | 	add	fp, #48
30c50     A7 12 02 FB | 	rdlong	arg01, fp
30c54     1C 12 06 F1 | 	add	arg01, #28
30c58     09 01 68 FC | 	wrlong	#0, arg01
30c5c     14 4E 05 F1 | 	add	fp, #20
30c60     A7 26 02 FB | 	rdlong	local01, fp
30c64     03 26 06 F1 | 	add	local01, #3
30c68     13 03 48 FC | 	wrbyte	#1, local01
30c6c     04 4E 05 F1 | 	add	fp, #4
30c70     A7 26 0A FB | 	rdlong	local01, fp wz
30c74     48 4E 85 F1 | 	sub	fp, #72
30c78     E8 00 90 AD |  if_e	jmp	#LR__4858
30c7c     44 4E 05 F1 | 	add	fp, #68
30c80     A7 26 02 FB | 	rdlong	local01, fp
30c84     30 26 06 F1 | 	add	local01, #48
30c88     13 27 02 FB | 	rdlong	local01, local01
30c8c     14 4E 05 F1 | 	add	fp, #20
30c90     A7 26 62 FC | 	wrlong	local01, fp
30c94     44 4E 85 F1 | 	sub	fp, #68
30c98     A7 12 02 F6 | 	mov	arg01, fp
30c9c     34 4E 05 F1 | 	add	fp, #52
30ca0     A7 14 02 FB | 	rdlong	arg02, fp
30ca4     48 4E 85 F1 | 	sub	fp, #72
30ca8     00 16 06 F6 | 	mov	arg03, #0
30cac     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
30cb0     10 4E 05 F1 | 	add	fp, #16
30cb4     A7 FA 61 FC | 	wrlong	result1, fp
30cb8     10 4E 85 F1 | 	sub	fp, #16
30cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
30cc0     A0 00 90 5D |  if_ne	jmp	#LR__4858
30cc4     44 4E 05 F1 | 	add	fp, #68
30cc8     A7 12 02 FB | 	rdlong	arg01, fp
30ccc     14 4E 05 F1 | 	add	fp, #20
30cd0     A7 14 02 FB | 	rdlong	arg02, fp
30cd4     58 4E 85 F1 | 	sub	fp, #88
30cd8     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
30cdc     10 4E 05 F1 | 	add	fp, #16
30ce0     A7 FA 61 FC | 	wrlong	result1, fp
30ce4     34 4E 05 F1 | 	add	fp, #52
30ce8     A7 18 02 FB | 	rdlong	arg04, fp
30cec     04 4E 05 F1 | 	add	fp, #4
30cf0     A7 26 02 FB | 	rdlong	local01, fp
30cf4     48 4E 85 F1 | 	sub	fp, #72
30cf8     01 26 86 F1 | 	sub	local01, #1
30cfc     10 18 06 F1 | 	add	arg04, #16
30d00     0C 27 62 FC | 	wrlong	local01, arg04
30d04     5C 00 90 FD | 	jmp	#LR__4858
30d08                 | LR__4855
30d08     10 4E 05 F1 | 	add	fp, #16
30d0c     A7 18 0A FB | 	rdlong	arg04, fp wz
30d10     10 4E 85 F1 | 	sub	fp, #16
30d14     4C 00 90 5D |  if_ne	jmp	#LR__4857
30d18     1A 4E 05 F1 | 	add	fp, #26
30d1c     A7 18 C2 FA | 	rdbyte	arg04, fp
30d20     1A 4E 85 F1 | 	sub	fp, #26
30d24     10 18 CE F7 | 	test	arg04, #16 wz
30d28     10 4E 05 51 |  if_ne	add	fp, #16
30d2c     A7 08 68 5C |  if_ne	wrlong	#4, fp
30d30     10 4E 85 51 |  if_ne	sub	fp, #16
30d34     2C 00 90 5D |  if_ne	jmp	#LR__4856
30d38     0C 4E 05 F1 | 	add	fp, #12
30d3c     A7 18 C2 FA | 	rdbyte	arg04, fp
30d40     0C 4E 85 F1 | 	sub	fp, #12
30d44     02 18 CE F7 | 	test	arg04, #2 wz
30d48     1A 4E 05 51 |  if_ne	add	fp, #26
30d4c     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
30d50     1A 4E 85 51 |  if_ne	sub	fp, #26
30d54     01 26 CE 57 |  if_ne	test	local01, #1 wz
30d58     10 4E 05 51 |  if_ne	add	fp, #16
30d5c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
30d60     10 4E 85 51 |  if_ne	sub	fp, #16
30d64                 | LR__4856
30d64                 | LR__4857
30d64                 | LR__4858
30d64     10 4E 05 F1 | 	add	fp, #16
30d68     A7 26 0A FB | 	rdlong	local01, fp wz
30d6c     10 4E 85 F1 | 	sub	fp, #16
30d70     60 00 90 5D |  if_ne	jmp	#LR__4859
30d74     0C 4E 05 F1 | 	add	fp, #12
30d78     A7 28 C2 FA | 	rdbyte	local02, fp
30d7c     0C 4E 85 F1 | 	sub	fp, #12
30d80     08 28 CE F7 | 	test	local02, #8 wz
30d84     0C 4E 05 51 |  if_ne	add	fp, #12
30d88     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
30d8c     40 28 46 55 |  if_ne	or	local02, #64
30d90     A7 28 42 5C |  if_ne	wrbyte	local02, fp
30d94     0C 4E 85 51 |  if_ne	sub	fp, #12
30d98     04 4E 05 F1 | 	add	fp, #4
30d9c     A7 28 02 FB | 	rdlong	local02, fp
30da0     40 4E 05 F1 | 	add	fp, #64
30da4     A7 26 02 FB | 	rdlong	local01, fp
30da8     30 26 06 F1 | 	add	local01, #48
30dac     13 27 02 FB | 	rdlong	local01, local01
30db0     20 28 06 F1 | 	add	local02, #32
30db4     14 27 62 FC | 	wrlong	local01, local02
30db8     40 4E 85 F1 | 	sub	fp, #64
30dbc     A7 28 02 FB | 	rdlong	local02, fp
30dc0     2C 4E 05 F1 | 	add	fp, #44
30dc4     A7 26 02 FB | 	rdlong	local01, fp
30dc8     30 4E 85 F1 | 	sub	fp, #48
30dcc     24 28 06 F1 | 	add	local02, #36
30dd0     14 27 62 FC | 	wrlong	local01, local02
30dd4                 | LR__4859
30dd4     10 4E 05 F1 | 	add	fp, #16
30dd8     A7 28 0A FB | 	rdlong	local02, fp wz
30ddc     10 4E 85 F1 | 	sub	fp, #16
30de0     F4 02 90 5D |  if_ne	jmp	#LR__4865
30de4     04 4E 05 F1 | 	add	fp, #4
30de8     A7 28 02 FB | 	rdlong	local02, fp
30dec     40 4E 05 F1 | 	add	fp, #64
30df0     A7 12 02 FB | 	rdlong	arg01, fp
30df4     14 4E 85 F1 | 	sub	fp, #20
30df8     A7 14 02 FB | 	rdlong	arg02, fp
30dfc     30 4E 85 F1 | 	sub	fp, #48
30e00     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
30e04     08 28 06 F1 | 	add	local02, #8
30e08     14 FB 61 FC | 	wrlong	result1, local02
30e0c     04 4E 05 F1 | 	add	fp, #4
30e10     A7 28 02 FB | 	rdlong	local02, fp
30e14     2C 4E 05 F1 | 	add	fp, #44
30e18     A7 12 02 FB | 	rdlong	arg01, fp
30e1c     1C 12 06 F1 | 	add	arg01, #28
30e20                 | ' {
30e20                 | ' 
30e20                 | ' 	return *((DWORD*)ptr);
30e20     09 FB 01 FB | 	rdlong	result1, arg01
30e24     0C 28 06 F1 | 	add	local02, #12
30e28     14 FB 61 FC | 	wrlong	result1, local02
30e2c     2C 4E 85 F1 | 	sub	fp, #44
30e30     A7 28 02 FB | 	rdlong	local02, fp
30e34     40 4E 05 F1 | 	add	fp, #64
30e38     A7 26 02 FB | 	rdlong	local01, fp
30e3c     14 27 62 FC | 	wrlong	local01, local02
30e40     40 4E 85 F1 | 	sub	fp, #64
30e44     A7 28 02 FB | 	rdlong	local02, fp
30e48     40 4E 05 F1 | 	add	fp, #64
30e4c     A7 26 02 FB | 	rdlong	local01, fp
30e50     06 26 06 F1 | 	add	local01, #6
30e54     13 27 E2 FA | 	rdword	local01, local01
30e58     04 28 06 F1 | 	add	local02, #4
30e5c     14 27 52 FC | 	wrword	local01, local02
30e60     40 4E 85 F1 | 	sub	fp, #64
30e64     A7 28 02 FB | 	rdlong	local02, fp
30e68     08 4E 05 F1 | 	add	fp, #8
30e6c     A7 26 C2 FA | 	rdbyte	local01, fp
30e70     10 28 06 F1 | 	add	local02, #16
30e74     14 27 42 FC | 	wrbyte	local01, local02
30e78     08 4E 85 F1 | 	sub	fp, #8
30e7c     A7 28 02 FB | 	rdlong	local02, fp
30e80     11 28 06 F1 | 	add	local02, #17
30e84     14 01 48 FC | 	wrbyte	#0, local02
30e88     A7 28 02 FB | 	rdlong	local02, fp
30e8c     1C 28 06 F1 | 	add	local02, #28
30e90     14 01 68 FC | 	wrlong	#0, local02
30e94     A7 28 02 FB | 	rdlong	local02, fp
30e98     14 28 06 F1 | 	add	local02, #20
30e9c     14 01 68 FC | 	wrlong	#0, local02
30ea0     A7 12 02 FB | 	rdlong	arg01, fp
30ea4     04 4E 85 F1 | 	sub	fp, #4
30ea8     28 12 06 F1 | 	add	arg01, #40
30eac     00 14 06 F6 | 	mov	arg02, #0
30eb0     09 16 C6 F9 | 	decod	arg03, #9
30eb4     98 00 A0 FD | 	call	#\builtin_bytefill_
30eb8     0C 4E 05 F1 | 	add	fp, #12
30ebc     A7 28 C2 FA | 	rdbyte	local02, fp
30ec0     0C 4E 85 F1 | 	sub	fp, #12
30ec4     20 28 CE F7 | 	test	local02, #32 wz
30ec8     0C 02 90 AD |  if_e	jmp	#LR__4864
30ecc     04 4E 05 F1 | 	add	fp, #4
30ed0     A7 26 02 FB | 	rdlong	local01, fp
30ed4     04 4E 85 F1 | 	sub	fp, #4
30ed8     0C 26 06 F1 | 	add	local01, #12
30edc     13 29 02 FB | 	rdlong	local02, local01
30ee0     01 28 16 F2 | 	cmp	local02, #1 wc
30ee4     F0 01 90 CD |  if_b	jmp	#LR__4864
30ee8     04 4E 05 F1 | 	add	fp, #4
30eec     A7 26 02 FB | 	rdlong	local01, fp
30ef0     13 29 02 F6 | 	mov	local02, local01
30ef4     0C 26 06 F1 | 	add	local01, #12
30ef8     13 27 02 FB | 	rdlong	local01, local01
30efc     14 28 06 F1 | 	add	local02, #20
30f00     14 27 62 FC | 	wrlong	local01, local02
30f04     40 4E 05 F1 | 	add	fp, #64
30f08     A7 28 02 FB | 	rdlong	local02, fp
30f0c     0A 28 06 F1 | 	add	local02, #10
30f10     14 29 E2 FA | 	rdword	local02, local02
30f14     09 28 66 F0 | 	shl	local02, #9
30f18     08 4E 05 F1 | 	add	fp, #8
30f1c     A7 28 62 FC | 	wrlong	local02, fp
30f20     48 4E 85 F1 | 	sub	fp, #72
30f24     A7 28 02 FB | 	rdlong	local02, fp
30f28     08 28 06 F1 | 	add	local02, #8
30f2c     14 27 02 FB | 	rdlong	local01, local02
30f30     4C 4E 05 F1 | 	add	fp, #76
30f34     A7 26 62 FC | 	wrlong	local01, fp
30f38                 | ' 				fp->fptr = fp->obj.objsize;
30f38                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
30f38                 | ' 				clst = fp->obj.sclust;
30f38                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
30f38     4C 4E 85 F1 | 	sub	fp, #76
30f3c     A7 28 02 FB | 	rdlong	local02, fp
30f40     0C 28 06 F1 | 	add	local02, #12
30f44     14 27 02 FB | 	rdlong	local01, local02
30f48     58 4E 05 F1 | 	add	fp, #88
30f4c     A7 26 62 FC | 	wrlong	local01, fp
30f50     5C 4E 85 F1 | 	sub	fp, #92
30f54                 | LR__4860
30f54     10 4E 05 F1 | 	add	fp, #16
30f58     A7 28 0A FB | 	rdlong	local02, fp wz
30f5c     10 4E 85 F1 | 	sub	fp, #16
30f60     94 00 90 5D |  if_ne	jmp	#LR__4861
30f64     5C 4E 05 F1 | 	add	fp, #92
30f68     A7 28 02 FB | 	rdlong	local02, fp
30f6c     10 4E 85 F1 | 	sub	fp, #16
30f70     A7 26 02 FB | 	rdlong	local01, fp
30f74     4C 4E 85 F1 | 	sub	fp, #76
30f78     13 29 1A F2 | 	cmp	local02, local01 wcz
30f7c     78 00 90 ED |  if_be	jmp	#LR__4861
30f80     04 4E 05 F1 | 	add	fp, #4
30f84     A7 12 02 FB | 	rdlong	arg01, fp
30f88     4C 4E 05 F1 | 	add	fp, #76
30f8c     A7 14 02 FB | 	rdlong	arg02, fp
30f90     50 4E 85 F1 | 	sub	fp, #80
30f94     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
30f98     50 4E 05 F1 | 	add	fp, #80
30f9c     A7 FA 61 FC | 	wrlong	result1, fp
30fa0     50 4E 85 F1 | 	sub	fp, #80
30fa4     02 FA 15 F2 | 	cmp	result1, #2 wc
30fa8     10 4E 05 C1 |  if_b	add	fp, #16
30fac     A7 04 68 CC |  if_b	wrlong	#2, fp
30fb0     10 4E 85 C1 |  if_b	sub	fp, #16
30fb4     50 4E 05 F1 | 	add	fp, #80
30fb8     A7 28 02 FB | 	rdlong	local02, fp
30fbc     50 4E 85 F1 | 	sub	fp, #80
30fc0     FF FF 7F FF 
30fc4     FF 29 0E F2 | 	cmp	local02, ##-1 wz
30fc8     10 4E 05 A1 |  if_e	add	fp, #16
30fcc     A7 02 68 AC |  if_e	wrlong	#1, fp
30fd0     10 4E 85 A1 |  if_e	sub	fp, #16
30fd4     5C 4E 05 F1 | 	add	fp, #92
30fd8     A7 28 02 FB | 	rdlong	local02, fp
30fdc     10 4E 85 F1 | 	sub	fp, #16
30fe0     A7 26 02 FB | 	rdlong	local01, fp
30fe4     13 29 82 F1 | 	sub	local02, local01
30fe8     10 4E 05 F1 | 	add	fp, #16
30fec     A7 28 62 FC | 	wrlong	local02, fp
30ff0     5C 4E 85 F1 | 	sub	fp, #92
30ff4     5C FF 9F FD | 	jmp	#LR__4860
30ff8                 | LR__4861
30ff8     04 4E 05 F1 | 	add	fp, #4
30ffc     A7 28 02 FB | 	rdlong	local02, fp
31000     4C 4E 05 F1 | 	add	fp, #76
31004     A7 26 02 FB | 	rdlong	local01, fp
31008     18 28 06 F1 | 	add	local02, #24
3100c     14 27 62 FC | 	wrlong	local01, local02
31010     40 4E 85 F1 | 	sub	fp, #64
31014     A7 28 0A FB | 	rdlong	local02, fp wz
31018     10 4E 85 F1 | 	sub	fp, #16
3101c     B8 00 90 5D |  if_ne	jmp	#LR__4863
31020     5C 4E 05 F1 | 	add	fp, #92
31024     A7 26 02 FB | 	rdlong	local01, fp
31028     5C 4E 85 F1 | 	sub	fp, #92
3102c     FF 27 CE F7 | 	test	local01, #511 wz
31030     A4 00 90 AD |  if_e	jmp	#LR__4863
31034     44 4E 05 F1 | 	add	fp, #68
31038     A7 12 02 FB | 	rdlong	arg01, fp
3103c     0C 4E 05 F1 | 	add	fp, #12
31040     A7 14 02 FB | 	rdlong	arg02, fp
31044     50 4E 85 F1 | 	sub	fp, #80
31048     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
3104c     58 4E 05 F1 | 	add	fp, #88
31050     A7 FA 61 FC | 	wrlong	result1, fp
31054     00 FA 4D F2 | 	cmps	result1, #0 wz
31058     58 4E 85 F1 | 	sub	fp, #88
3105c     10 4E 05 A1 |  if_e	add	fp, #16
31060     A7 04 68 AC |  if_e	wrlong	#2, fp
31064     10 4E 85 A1 |  if_e	sub	fp, #16
31068     6C 00 90 AD |  if_e	jmp	#LR__4862
3106c     04 4E 05 F1 | 	add	fp, #4
31070     A7 28 02 FB | 	rdlong	local02, fp
31074     54 4E 05 F1 | 	add	fp, #84
31078     A7 26 02 FB | 	rdlong	local01, fp
3107c     04 4E 05 F1 | 	add	fp, #4
31080     A7 18 02 FB | 	rdlong	arg04, fp
31084     09 18 46 F0 | 	shr	arg04, #9
31088     0C 27 02 F1 | 	add	local01, arg04
3108c     1C 28 06 F1 | 	add	local02, #28
31090     14 27 62 FC | 	wrlong	local01, local02
31094     18 4E 85 F1 | 	sub	fp, #24
31098     A7 28 02 FB | 	rdlong	local02, fp
3109c     01 28 06 F1 | 	add	local02, #1
310a0     14 13 C2 FA | 	rdbyte	arg01, local02
310a4     40 4E 85 F1 | 	sub	fp, #64
310a8     A7 28 02 FB | 	rdlong	local02, fp
310ac     14 15 02 F6 | 	mov	arg02, local02
310b0     28 14 06 F1 | 	add	arg02, #40
310b4     04 4E 85 F1 | 	sub	fp, #4
310b8     1C 28 06 F1 | 	add	local02, #28
310bc     14 17 02 FB | 	rdlong	arg03, local02
310c0     01 18 06 F6 | 	mov	arg04, #1
310c4     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
310c8     00 FA 0D F2 | 	cmp	result1, #0 wz
310cc     10 4E 05 51 |  if_ne	add	fp, #16
310d0     A7 02 68 5C |  if_ne	wrlong	#1, fp
310d4     10 4E 85 51 |  if_ne	sub	fp, #16
310d8                 | LR__4862
310d8                 | LR__4863
310d8                 | LR__4864
310d8                 | LR__4865
310d8                 | LR__4866
310d8     10 4E 05 F1 | 	add	fp, #16
310dc     A7 28 0A FB | 	rdlong	local02, fp wz
310e0     10 4E 85 F1 | 	sub	fp, #16
310e4     04 4E 05 51 |  if_ne	add	fp, #4
310e8     A7 28 02 5B |  if_ne	rdlong	local02, fp
310ec     04 4E 85 51 |  if_ne	sub	fp, #4
310f0     14 01 68 5C |  if_ne	wrlong	#0, local02
310f4                 | ' 
310f4                 | ' 	return res ;
310f4     10 4E 05 F1 | 	add	fp, #16
310f8     A7 FA 01 FB | 	rdlong	result1, fp
310fc     10 4E 85 F1 | 	sub	fp, #16
31100                 | LR__4867
31100     A7 F0 03 F6 | 	mov	ptra, fp
31104     B2 00 A0 FD | 	call	#popregs_
31108                 | _fatfs_cc_f_open_ret
31108     2D 00 64 FD | 	ret
3110c                 | 
3110c                 | _fatfs_cc_f_read
3110c     0E 4A 05 F6 | 	mov	COUNT_, #14
31110     A8 00 A0 FD | 	call	#pushregs_
31114     38 F0 07 F1 | 	add	ptra, #56
31118     04 4E 05 F1 | 	add	fp, #4
3111c     A7 12 62 FC | 	wrlong	arg01, fp
31120     04 4E 05 F1 | 	add	fp, #4
31124     A7 14 62 FC | 	wrlong	arg02, fp
31128     04 4E 05 F1 | 	add	fp, #4
3112c     A7 16 62 FC | 	wrlong	arg03, fp
31130     04 4E 05 F1 | 	add	fp, #4
31134     A7 18 62 FC | 	wrlong	arg04, fp
31138     08 4E 85 F1 | 	sub	fp, #8
3113c     A7 FA 01 FB | 	rdlong	result1, fp
31140     2C 4E 05 F1 | 	add	fp, #44
31144     A7 FA 61 FC | 	wrlong	result1, fp
31148     24 4E 85 F1 | 	sub	fp, #36
3114c     A7 FA 01 FB | 	rdlong	result1, fp
31150     FD 00 68 FC | 	wrlong	#0, result1
31154     0C 4E 85 F1 | 	sub	fp, #12
31158     A7 12 02 FB | 	rdlong	arg01, fp
3115c     14 4E 05 F1 | 	add	fp, #20
31160     A7 14 02 F6 | 	mov	arg02, fp
31164     18 4E 85 F1 | 	sub	fp, #24
31168     24 F7 BF FD | 	call	#_fatfs_cc_validate
3116c     14 4E 05 F1 | 	add	fp, #20
31170     A7 FA 61 FC | 	wrlong	result1, fp
31174     00 FA 4D F2 | 	cmps	result1, #0 wz
31178     14 4E 85 F1 | 	sub	fp, #20
3117c     20 00 90 5D |  if_ne	jmp	#LR__4870
31180     04 4E 05 F1 | 	add	fp, #4
31184     A7 14 02 FB | 	rdlong	arg02, fp
31188     11 14 06 F1 | 	add	arg02, #17
3118c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
31190     10 4E 05 F1 | 	add	fp, #16
31194     A7 14 62 FC | 	wrlong	arg02, fp
31198     14 4E 85 F1 | 	sub	fp, #20
3119c     10 00 90 AD |  if_e	jmp	#LR__4871
311a0                 | LR__4870
311a0     14 4E 05 F1 | 	add	fp, #20
311a4     A7 FA 01 FB | 	rdlong	result1, fp
311a8     14 4E 85 F1 | 	sub	fp, #20
311ac     EC 05 90 FD | 	jmp	#LR__4890
311b0                 | LR__4871
311b0     04 4E 05 F1 | 	add	fp, #4
311b4     A7 18 02 FB | 	rdlong	arg04, fp
311b8     04 4E 85 F1 | 	sub	fp, #4
311bc     10 18 06 F1 | 	add	arg04, #16
311c0     0C 19 C2 FA | 	rdbyte	arg04, arg04
311c4     01 18 CE F7 | 	test	arg04, #1 wz
311c8     07 FA 05 A6 |  if_e	mov	result1, #7
311cc     CC 05 90 AD |  if_e	jmp	#LR__4890
311d0     04 4E 05 F1 | 	add	fp, #4
311d4     A7 26 02 FB | 	rdlong	local01, fp
311d8     13 29 02 F6 | 	mov	local02, local01
311dc     0C 28 06 F1 | 	add	local02, #12
311e0     14 2B 02 FB | 	rdlong	local03, local02
311e4     14 26 06 F1 | 	add	local01, #20
311e8     13 27 02 FB | 	rdlong	local01, local01
311ec     13 2B 82 F1 | 	sub	local03, local01
311f0     20 4E 05 F1 | 	add	fp, #32
311f4     A7 2A 62 FC | 	wrlong	local03, fp
311f8     18 4E 85 F1 | 	sub	fp, #24
311fc     A7 2C 02 FB | 	rdlong	local04, fp
31200     0C 4E 85 F1 | 	sub	fp, #12
31204     15 2D 1A F2 | 	cmp	local04, local03 wcz
31208     24 4E 05 11 |  if_a	add	fp, #36
3120c     A7 2C 02 1B |  if_a	rdlong	local04, fp
31210     18 4E 85 11 |  if_a	sub	fp, #24
31214     A7 2C 62 1C |  if_a	wrlong	local04, fp
31218     0C 4E 85 11 |  if_a	sub	fp, #12
3121c                 | ' 
3121c                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
3121c                 | LR__4872
3121c     0C 4E 05 F1 | 	add	fp, #12
31220     A7 28 02 FB | 	rdlong	local02, fp
31224     0C 4E 85 F1 | 	sub	fp, #12
31228     14 2D 02 F6 | 	mov	local04, local02
3122c     01 2C 16 F2 | 	cmp	local04, #1 wc
31230     64 05 90 CD |  if_b	jmp	#LR__4889
31234     04 4E 05 F1 | 	add	fp, #4
31238     A7 2A 02 FB | 	rdlong	local03, fp
3123c     04 4E 85 F1 | 	sub	fp, #4
31240     14 2A 06 F1 | 	add	local03, #20
31244     15 2B 02 FB | 	rdlong	local03, local03
31248     FF 2B CE F7 | 	test	local03, #511 wz
3124c     3C 04 90 5D |  if_ne	jmp	#LR__4887
31250     04 4E 05 F1 | 	add	fp, #4
31254     A7 26 02 FB | 	rdlong	local01, fp
31258     14 26 06 F1 | 	add	local01, #20
3125c     13 2B 02 FB | 	rdlong	local03, local01
31260     09 2A 46 F0 | 	shr	local03, #9
31264     14 4E 05 F1 | 	add	fp, #20
31268     A7 2E 02 FB | 	rdlong	local05, fp
3126c     17 31 02 F6 | 	mov	local06, local05
31270     0A 30 06 F1 | 	add	local06, #10
31274     18 33 E2 FA | 	rdword	local07, local06
31278     0A 30 86 F1 | 	sub	local06, #10
3127c     19 35 32 F9 | 	getword	local08, local07, #0
31280     01 34 86 F1 | 	sub	local08, #1
31284     1A 2B 0A F5 | 	and	local03, local08 wz
31288     18 4E 05 F1 | 	add	fp, #24
3128c     A7 2A 62 FC | 	wrlong	local03, fp
31290     30 4E 85 F1 | 	sub	fp, #48
31294     E0 00 90 5D |  if_ne	jmp	#LR__4877
31298     04 4E 05 F1 | 	add	fp, #4
3129c     A7 2A 02 FB | 	rdlong	local03, fp
312a0     04 4E 85 F1 | 	sub	fp, #4
312a4     14 2A 06 F1 | 	add	local03, #20
312a8     15 2B 0A FB | 	rdlong	local03, local03 wz
312ac     20 00 90 5D |  if_ne	jmp	#LR__4873
312b0     04 4E 05 F1 | 	add	fp, #4
312b4     A7 2A 02 FB | 	rdlong	local03, fp
312b8     08 2A 06 F1 | 	add	local03, #8
312bc     15 2B 02 FB | 	rdlong	local03, local03
312c0     18 4E 05 F1 | 	add	fp, #24
312c4     A7 2A 62 FC | 	wrlong	local03, fp
312c8     1C 4E 85 F1 | 	sub	fp, #28
312cc     28 00 90 FD | 	jmp	#LR__4874
312d0                 | LR__4873
312d0     04 4E 05 F1 | 	add	fp, #4
312d4     A7 34 02 FB | 	rdlong	local08, fp
312d8     1A 13 02 F6 | 	mov	arg01, local08
312dc     04 4E 85 F1 | 	sub	fp, #4
312e0     18 34 06 F1 | 	add	local08, #24
312e4     1A 15 02 FB | 	rdlong	arg02, local08
312e8     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
312ec     1C 4E 05 F1 | 	add	fp, #28
312f0     A7 FA 61 FC | 	wrlong	result1, fp
312f4     1C 4E 85 F1 | 	sub	fp, #28
312f8                 | LR__4874
312f8     1C 4E 05 F1 | 	add	fp, #28
312fc     A7 2A 02 FB | 	rdlong	local03, fp
31300     1C 4E 85 F1 | 	sub	fp, #28
31304     02 2A 16 F2 | 	cmp	local03, #2 wc
31308     1C 00 90 3D |  if_ae	jmp	#LR__4875
3130c     04 4E 05 F1 | 	add	fp, #4
31310     A7 2A 02 FB | 	rdlong	local03, fp
31314     04 4E 85 F1 | 	sub	fp, #4
31318     11 2A 06 F1 | 	add	local03, #17
3131c     15 05 48 FC | 	wrbyte	#2, local03
31320     02 FA 05 F6 | 	mov	result1, #2
31324     74 04 90 FD | 	jmp	#LR__4890
31328                 | LR__4875
31328     1C 4E 05 F1 | 	add	fp, #28
3132c     A7 2A 02 FB | 	rdlong	local03, fp
31330     1C 4E 85 F1 | 	sub	fp, #28
31334     FF FF 7F FF 
31338     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
3133c     1C 00 90 5D |  if_ne	jmp	#LR__4876
31340     04 4E 05 F1 | 	add	fp, #4
31344     A7 2A 02 FB | 	rdlong	local03, fp
31348     04 4E 85 F1 | 	sub	fp, #4
3134c     11 2A 06 F1 | 	add	local03, #17
31350     15 03 48 FC | 	wrbyte	#1, local03
31354     01 FA 05 F6 | 	mov	result1, #1
31358     40 04 90 FD | 	jmp	#LR__4890
3135c                 | LR__4876
3135c     04 4E 05 F1 | 	add	fp, #4
31360     A7 2A 02 FB | 	rdlong	local03, fp
31364     18 4E 05 F1 | 	add	fp, #24
31368     A7 34 02 FB | 	rdlong	local08, fp
3136c     1C 4E 85 F1 | 	sub	fp, #28
31370     18 2A 06 F1 | 	add	local03, #24
31374     15 35 62 FC | 	wrlong	local08, local03
31378                 | LR__4877
31378     18 4E 05 F1 | 	add	fp, #24
3137c     A7 12 02 FB | 	rdlong	arg01, fp
31380     14 4E 85 F1 | 	sub	fp, #20
31384     A7 2A 02 FB | 	rdlong	local03, fp
31388     04 4E 85 F1 | 	sub	fp, #4
3138c     18 2A 06 F1 | 	add	local03, #24
31390     15 15 02 FB | 	rdlong	arg02, local03
31394     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
31398     20 4E 05 F1 | 	add	fp, #32
3139c     A7 FA 61 FC | 	wrlong	result1, fp
313a0     20 4E 85 F1 | 	sub	fp, #32
313a4     00 FA 0D F2 | 	cmp	result1, #0 wz
313a8     1C 00 90 5D |  if_ne	jmp	#LR__4878
313ac     04 4E 05 F1 | 	add	fp, #4
313b0     A7 2A 02 FB | 	rdlong	local03, fp
313b4     04 4E 85 F1 | 	sub	fp, #4
313b8     11 2A 06 F1 | 	add	local03, #17
313bc     15 05 48 FC | 	wrbyte	#2, local03
313c0     02 FA 05 F6 | 	mov	result1, #2
313c4     D4 03 90 FD | 	jmp	#LR__4890
313c8                 | LR__4878
313c8     20 4E 05 F1 | 	add	fp, #32
313cc     A7 2A 02 FB | 	rdlong	local03, fp
313d0     10 4E 05 F1 | 	add	fp, #16
313d4     A7 34 02 FB | 	rdlong	local08, fp
313d8     1A 2B 02 F1 | 	add	local03, local08
313dc     10 4E 85 F1 | 	sub	fp, #16
313e0     A7 2A 62 FC | 	wrlong	local03, fp
313e4     14 4E 85 F1 | 	sub	fp, #20
313e8     A7 2A 02 FB | 	rdlong	local03, fp
313ec     09 2A 46 F0 | 	shr	local03, #9
313f0     20 4E 05 F1 | 	add	fp, #32
313f4     A7 2A 62 FC | 	wrlong	local03, fp
313f8     2C 4E 85 F1 | 	sub	fp, #44
313fc     01 2A 16 F2 | 	cmp	local03, #1 wc
31400     5C 01 90 CD |  if_b	jmp	#LR__4882
31404     30 4E 05 F1 | 	add	fp, #48
31408     A7 2A 02 FB | 	rdlong	local03, fp
3140c     04 4E 85 F1 | 	sub	fp, #4
31410     A7 34 02 FB | 	rdlong	local08, fp
31414     1A 2B 02 F1 | 	add	local03, local08
31418     14 4E 85 F1 | 	sub	fp, #20
3141c     A7 34 02 FB | 	rdlong	local08, fp
31420     18 4E 85 F1 | 	sub	fp, #24
31424     0A 34 06 F1 | 	add	local08, #10
31428     1A 35 E2 FA | 	rdword	local08, local08
3142c     1A 2B 1A F2 | 	cmp	local03, local08 wcz
31430     28 00 90 ED |  if_be	jmp	#LR__4879
31434     18 4E 05 F1 | 	add	fp, #24
31438     A7 26 02 FB | 	rdlong	local01, fp
3143c     0A 26 06 F1 | 	add	local01, #10
31440     13 2B E2 FA | 	rdword	local03, local01
31444     18 4E 05 F1 | 	add	fp, #24
31448     A7 34 02 FB | 	rdlong	local08, fp
3144c     1A 2B 82 F1 | 	sub	local03, local08
31450     04 4E 85 F1 | 	sub	fp, #4
31454     A7 2A 62 FC | 	wrlong	local03, fp
31458     2C 4E 85 F1 | 	sub	fp, #44
3145c                 | LR__4879
3145c     18 4E 05 F1 | 	add	fp, #24
31460     A7 26 02 FB | 	rdlong	local01, fp
31464     01 26 06 F1 | 	add	local01, #1
31468     13 13 C2 FA | 	rdbyte	arg01, local01
3146c     1C 4E 05 F1 | 	add	fp, #28
31470     A7 14 02 FB | 	rdlong	arg02, fp
31474     14 4E 85 F1 | 	sub	fp, #20
31478     A7 16 02 FB | 	rdlong	arg03, fp
3147c     0C 4E 05 F1 | 	add	fp, #12
31480     A7 18 02 FB | 	rdlong	arg04, fp
31484     2C 4E 85 F1 | 	sub	fp, #44
31488     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
3148c     00 FA 0D F2 | 	cmp	result1, #0 wz
31490     1C 00 90 AD |  if_e	jmp	#LR__4880
31494     04 4E 05 F1 | 	add	fp, #4
31498     A7 2A 02 FB | 	rdlong	local03, fp
3149c     04 4E 85 F1 | 	sub	fp, #4
314a0     11 2A 06 F1 | 	add	local03, #17
314a4     15 03 48 FC | 	wrbyte	#1, local03
314a8     01 FA 05 F6 | 	mov	result1, #1
314ac     EC 02 90 FD | 	jmp	#LR__4890
314b0                 | LR__4880
314b0     04 4E 05 F1 | 	add	fp, #4
314b4     A7 26 02 FB | 	rdlong	local01, fp
314b8     04 4E 85 F1 | 	sub	fp, #4
314bc     10 26 06 F1 | 	add	local01, #16
314c0     13 2B C2 FA | 	rdbyte	local03, local01
314c4     80 2A CE F7 | 	test	local03, #128 wz
314c8     78 00 90 AD |  if_e	jmp	#LR__4881
314cc     04 4E 05 F1 | 	add	fp, #4
314d0     A7 34 02 FB | 	rdlong	local08, fp
314d4     1C 34 06 F1 | 	add	local08, #28
314d8     1A 35 02 FB | 	rdlong	local08, local08
314dc     1C 4E 05 F1 | 	add	fp, #28
314e0     A7 36 02 FB | 	rdlong	local09, fp
314e4     1B 35 82 F1 | 	sub	local08, local09
314e8     0C 4E 05 F1 | 	add	fp, #12
314ec     A7 38 02 FB | 	rdlong	local10, fp
314f0     2C 4E 85 F1 | 	sub	fp, #44
314f4     1C 3B 02 F6 | 	mov	local11, local10
314f8     1D 35 12 F2 | 	cmp	local08, local11 wc
314fc     44 00 90 3D |  if_ae	jmp	#LR__4881
31500     34 4E 05 F1 | 	add	fp, #52
31504     A7 12 02 FB | 	rdlong	arg01, fp
31508     30 4E 85 F1 | 	sub	fp, #48
3150c     A7 14 02 FB | 	rdlong	arg02, fp
31510     0A 3B 02 F6 | 	mov	local11, arg02
31514     1C 3A 06 F1 | 	add	local11, #28
31518     1D 37 02 FB | 	rdlong	local09, local11
3151c     1C 4E 05 F1 | 	add	fp, #28
31520     A7 2E 02 FB | 	rdlong	local05, fp
31524     17 37 82 F1 | 	sub	local09, local05
31528     09 36 66 F0 | 	shl	local09, #9
3152c     1B 3B 02 F6 | 	mov	local11, local09
31530     1B 13 02 F1 | 	add	arg01, local09
31534     20 4E 85 F1 | 	sub	fp, #32
31538     28 14 06 F1 | 	add	arg02, #40
3153c     09 16 C6 F9 | 	decod	arg03, #9
31540     64 43 BF FD | 	call	#__system____builtin_memmove
31544                 | LR__4881
31544     2C 4E 05 F1 | 	add	fp, #44
31548     A7 2A 02 FB | 	rdlong	local03, fp
3154c     09 2A 66 F0 | 	shl	local03, #9
31550     04 4E 85 F1 | 	sub	fp, #4
31554     A7 2A 62 FC | 	wrlong	local03, fp
31558     28 4E 85 F1 | 	sub	fp, #40
3155c                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
3155c                 | ' 				}
3155c                 | ' 
3155c                 | ' 
3155c                 | ' 				rcnt =  ((UINT) 512 )  * cc;
3155c                 | ' 				continue;
3155c     B4 01 90 FD | 	jmp	#LR__4888
31560                 | LR__4882
31560     04 4E 05 F1 | 	add	fp, #4
31564     A7 2A 02 FB | 	rdlong	local03, fp
31568     1C 2A 06 F1 | 	add	local03, #28
3156c     15 2B 02 FB | 	rdlong	local03, local03
31570     1C 4E 05 F1 | 	add	fp, #28
31574     A7 26 02 FB | 	rdlong	local01, fp
31578     20 4E 85 F1 | 	sub	fp, #32
3157c     13 2B 0A F2 | 	cmp	local03, local01 wz
31580     EC 00 90 AD |  if_e	jmp	#LR__4886
31584     04 4E 05 F1 | 	add	fp, #4
31588     A7 26 02 FB | 	rdlong	local01, fp
3158c     04 4E 85 F1 | 	sub	fp, #4
31590     10 26 06 F1 | 	add	local01, #16
31594     13 2B C2 FA | 	rdbyte	local03, local01
31598     80 2A CE F7 | 	test	local03, #128 wz
3159c     7C 00 90 AD |  if_e	jmp	#LR__4884
315a0     18 4E 05 F1 | 	add	fp, #24
315a4     A7 26 02 FB | 	rdlong	local01, fp
315a8     01 26 06 F1 | 	add	local01, #1
315ac     13 13 C2 FA | 	rdbyte	arg01, local01
315b0     14 4E 85 F1 | 	sub	fp, #20
315b4     A7 2A 02 FB | 	rdlong	local03, fp
315b8     15 15 02 F6 | 	mov	arg02, local03
315bc     28 14 06 F1 | 	add	arg02, #40
315c0     04 4E 85 F1 | 	sub	fp, #4
315c4     1C 2A 06 F1 | 	add	local03, #28
315c8     15 17 02 FB | 	rdlong	arg03, local03
315cc     01 18 06 F6 | 	mov	arg04, #1
315d0     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
315d4     00 FA 0D F2 | 	cmp	result1, #0 wz
315d8     1C 00 90 AD |  if_e	jmp	#LR__4883
315dc     04 4E 05 F1 | 	add	fp, #4
315e0     A7 2A 02 FB | 	rdlong	local03, fp
315e4     04 4E 85 F1 | 	sub	fp, #4
315e8     11 2A 06 F1 | 	add	local03, #17
315ec     15 03 48 FC | 	wrbyte	#1, local03
315f0     01 FA 05 F6 | 	mov	result1, #1
315f4     A4 01 90 FD | 	jmp	#LR__4890
315f8                 | LR__4883
315f8     04 4E 05 F1 | 	add	fp, #4
315fc     A7 3A 02 FB | 	rdlong	local11, fp
31600     1D 2B 02 F6 | 	mov	local03, local11
31604     04 4E 85 F1 | 	sub	fp, #4
31608     10 3A 06 F1 | 	add	local11, #16
3160c     1D 3B C2 FA | 	rdbyte	local11, local11
31610     7F 3A 06 F5 | 	and	local11, #127
31614     10 2A 06 F1 | 	add	local03, #16
31618     15 3B 42 FC | 	wrbyte	local11, local03
3161c                 | LR__4884
3161c     18 4E 05 F1 | 	add	fp, #24
31620     A7 26 02 FB | 	rdlong	local01, fp
31624     01 26 06 F1 | 	add	local01, #1
31628     13 13 C2 FA | 	rdbyte	arg01, local01
3162c     14 4E 85 F1 | 	sub	fp, #20
31630     A7 14 02 FB | 	rdlong	arg02, fp
31634     28 14 06 F1 | 	add	arg02, #40
31638     1C 4E 05 F1 | 	add	fp, #28
3163c     A7 16 02 FB | 	rdlong	arg03, fp
31640     20 4E 85 F1 | 	sub	fp, #32
31644     01 18 06 F6 | 	mov	arg04, #1
31648     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
3164c     00 FA 0D F2 | 	cmp	result1, #0 wz
31650     1C 00 90 AD |  if_e	jmp	#LR__4885
31654     04 4E 05 F1 | 	add	fp, #4
31658     A7 2A 02 FB | 	rdlong	local03, fp
3165c     04 4E 85 F1 | 	sub	fp, #4
31660     11 2A 06 F1 | 	add	local03, #17
31664     15 03 48 FC | 	wrbyte	#1, local03
31668     01 FA 05 F6 | 	mov	result1, #1
3166c     2C 01 90 FD | 	jmp	#LR__4890
31670                 | LR__4885
31670                 | LR__4886
31670     04 4E 05 F1 | 	add	fp, #4
31674     A7 2A 02 FB | 	rdlong	local03, fp
31678     1C 4E 05 F1 | 	add	fp, #28
3167c     A7 3A 02 FB | 	rdlong	local11, fp
31680     20 4E 85 F1 | 	sub	fp, #32
31684     1C 2A 06 F1 | 	add	local03, #28
31688     15 3B 62 FC | 	wrlong	local11, local03
3168c                 | LR__4887
3168c     04 4E 05 F1 | 	add	fp, #4
31690     A7 26 02 FB | 	rdlong	local01, fp
31694     14 26 06 F1 | 	add	local01, #20
31698     13 3B 02 FB | 	rdlong	local11, local01
3169c     FF 3B 06 F5 | 	and	local11, #511
316a0     09 2A C6 F9 | 	decod	local03, #9
316a4     1D 2B 82 F1 | 	sub	local03, local11
316a8     24 4E 05 F1 | 	add	fp, #36
316ac     A7 2A 62 FC | 	wrlong	local03, fp
316b0     1C 4E 85 F1 | 	sub	fp, #28
316b4     A7 3A 02 FB | 	rdlong	local11, fp
316b8     0C 4E 85 F1 | 	sub	fp, #12
316bc     1D 2B 1A F2 | 	cmp	local03, local11 wcz
316c0     0C 4E 05 11 |  if_a	add	fp, #12
316c4     A7 2A 02 1B |  if_a	rdlong	local03, fp
316c8     1C 4E 05 11 |  if_a	add	fp, #28
316cc     A7 2A 62 1C |  if_a	wrlong	local03, fp
316d0     28 4E 85 11 |  if_a	sub	fp, #40
316d4     34 4E 05 F1 | 	add	fp, #52
316d8     A7 12 02 FB | 	rdlong	arg01, fp
316dc     30 4E 85 F1 | 	sub	fp, #48
316e0     A7 30 02 FB | 	rdlong	local06, fp
316e4     18 15 02 F6 | 	mov	arg02, local06
316e8     28 14 06 F1 | 	add	arg02, #40
316ec     14 30 06 F1 | 	add	local06, #20
316f0     18 3B 02 FB | 	rdlong	local11, local06
316f4     1D 37 02 F6 | 	mov	local09, local11
316f8     1B 39 02 F6 | 	mov	local10, local09
316fc     FF 39 06 F5 | 	and	local10, #511
31700     1C 15 02 F1 | 	add	arg02, local10
31704     24 4E 05 F1 | 	add	fp, #36
31708     A7 16 02 FB | 	rdlong	arg03, fp
3170c     28 4E 85 F1 | 	sub	fp, #40
31710     94 41 BF FD | 	call	#__system____builtin_memmove
31714                 | LR__4888
31714     0C 4E 05 F1 | 	add	fp, #12
31718     A7 2A 02 FB | 	rdlong	local03, fp
3171c     1C 4E 05 F1 | 	add	fp, #28
31720     A7 34 02 FB | 	rdlong	local08, fp
31724     1A 2B 82 F1 | 	sub	local03, local08
31728     1C 4E 85 F1 | 	sub	fp, #28
3172c     A7 2A 62 FC | 	wrlong	local03, fp
31730     04 4E 05 F1 | 	add	fp, #4
31734     A7 26 02 FB | 	rdlong	local01, fp
31738     13 33 02 FB | 	rdlong	local07, local01
3173c     18 4E 05 F1 | 	add	fp, #24
31740     A7 34 02 FB | 	rdlong	local08, fp
31744     1A 33 02 F1 | 	add	local07, local08
31748     13 33 62 FC | 	wrlong	local07, local01
3174c     0C 4E 05 F1 | 	add	fp, #12
31750     A7 2A 02 FB | 	rdlong	local03, fp
31754     0C 4E 85 F1 | 	sub	fp, #12
31758     A7 3C 02 FB | 	rdlong	local12, fp
3175c     1E 2B 02 F1 | 	add	local03, local12
31760     0C 4E 05 F1 | 	add	fp, #12
31764     A7 2A 62 FC | 	wrlong	local03, fp
31768     30 4E 85 F1 | 	sub	fp, #48
3176c     A7 3E 02 FB | 	rdlong	local13, fp
31770     1F 2B 02 F6 | 	mov	local03, local13
31774     14 3E 06 F1 | 	add	local13, #20
31778     1F 41 02 FB | 	rdlong	local14, local13
3177c     24 4E 05 F1 | 	add	fp, #36
31780     A7 30 02 FB | 	rdlong	local06, fp
31784     28 4E 85 F1 | 	sub	fp, #40
31788     18 41 02 F1 | 	add	local14, local06
3178c     14 2A 06 F1 | 	add	local03, #20
31790     15 41 62 FC | 	wrlong	local14, local03
31794     84 FA 9F FD | 	jmp	#LR__4872
31798                 | LR__4889
31798                 | ' 
31798                 | ' 
31798                 | ' 
31798                 | ' 
31798                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
31798                 | ' 
31798                 | ' 	}
31798                 | ' 
31798                 | ' 	return FR_OK ;
31798     00 FA 05 F6 | 	mov	result1, #0
3179c                 | LR__4890
3179c     A7 F0 03 F6 | 	mov	ptra, fp
317a0     B2 00 A0 FD | 	call	#popregs_
317a4                 | _fatfs_cc_f_read_ret
317a4     2D 00 64 FD | 	ret
317a8                 | 
317a8                 | _fatfs_cc_f_write
317a8     15 4A 05 F6 | 	mov	COUNT_, #21
317ac     A8 00 A0 FD | 	call	#pushregs_
317b0     34 F0 07 F1 | 	add	ptra, #52
317b4     04 4E 05 F1 | 	add	fp, #4
317b8     A7 12 62 FC | 	wrlong	arg01, fp
317bc     04 4E 05 F1 | 	add	fp, #4
317c0     A7 14 62 FC | 	wrlong	arg02, fp
317c4     04 4E 05 F1 | 	add	fp, #4
317c8     A7 16 62 FC | 	wrlong	arg03, fp
317cc     04 4E 05 F1 | 	add	fp, #4
317d0     A7 18 62 FC | 	wrlong	arg04, fp
317d4     08 4E 85 F1 | 	sub	fp, #8
317d8     A7 FA 01 FB | 	rdlong	result1, fp
317dc     28 4E 05 F1 | 	add	fp, #40
317e0     A7 FA 61 FC | 	wrlong	result1, fp
317e4     20 4E 85 F1 | 	sub	fp, #32
317e8     A7 FA 01 FB | 	rdlong	result1, fp
317ec     FD 00 68 FC | 	wrlong	#0, result1
317f0     0C 4E 85 F1 | 	sub	fp, #12
317f4     A7 12 02 FB | 	rdlong	arg01, fp
317f8     14 4E 05 F1 | 	add	fp, #20
317fc     A7 14 02 F6 | 	mov	arg02, fp
31800     18 4E 85 F1 | 	sub	fp, #24
31804     88 F0 BF FD | 	call	#_fatfs_cc_validate
31808     14 4E 05 F1 | 	add	fp, #20
3180c     A7 FA 61 FC | 	wrlong	result1, fp
31810     00 FA 4D F2 | 	cmps	result1, #0 wz
31814     14 4E 85 F1 | 	sub	fp, #20
31818     20 00 90 5D |  if_ne	jmp	#LR__4900
3181c     04 4E 05 F1 | 	add	fp, #4
31820     A7 14 02 FB | 	rdlong	arg02, fp
31824     11 14 06 F1 | 	add	arg02, #17
31828     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
3182c     10 4E 05 F1 | 	add	fp, #16
31830     A7 14 62 FC | 	wrlong	arg02, fp
31834     14 4E 85 F1 | 	sub	fp, #20
31838     10 00 90 AD |  if_e	jmp	#LR__4901
3183c                 | LR__4900
3183c     14 4E 05 F1 | 	add	fp, #20
31840     A7 FA 01 FB | 	rdlong	result1, fp
31844     14 4E 85 F1 | 	sub	fp, #20
31848     44 07 90 FD | 	jmp	#LR__4923
3184c                 | LR__4901
3184c     04 4E 05 F1 | 	add	fp, #4
31850     A7 14 02 FB | 	rdlong	arg02, fp
31854     04 4E 85 F1 | 	sub	fp, #4
31858     10 14 06 F1 | 	add	arg02, #16
3185c     0A 15 C2 FA | 	rdbyte	arg02, arg02
31860     02 14 CE F7 | 	test	arg02, #2 wz
31864     07 FA 05 A6 |  if_e	mov	result1, #7
31868     24 07 90 AD |  if_e	jmp	#LR__4923
3186c     04 4E 05 F1 | 	add	fp, #4
31870     A7 14 02 FB | 	rdlong	arg02, fp
31874     0A 13 02 F6 | 	mov	arg01, arg02
31878     14 12 06 F1 | 	add	arg01, #20
3187c     09 13 02 FB | 	rdlong	arg01, arg01
31880     08 4E 05 F1 | 	add	fp, #8
31884     A7 FA 01 FB | 	rdlong	result1, fp
31888     FD 12 02 F1 | 	add	arg01, result1
3188c     0C 4E 85 F1 | 	sub	fp, #12
31890     14 14 06 F1 | 	add	arg02, #20
31894     0A FB 01 FB | 	rdlong	result1, arg02
31898     FD 12 12 F2 | 	cmp	arg01, result1 wc
3189c     24 00 90 3D |  if_ae	jmp	#LR__4902
318a0     04 4E 05 F1 | 	add	fp, #4
318a4     A7 14 02 FB | 	rdlong	arg02, fp
318a8     01 FA 65 F6 | 	neg	result1, #1
318ac     14 14 06 F1 | 	add	arg02, #20
318b0     0A 15 02 FB | 	rdlong	arg02, arg02
318b4     0A FB 81 F1 | 	sub	result1, arg02
318b8     08 4E 05 F1 | 	add	fp, #8
318bc     A7 FA 61 FC | 	wrlong	result1, fp
318c0     0C 4E 85 F1 | 	sub	fp, #12
318c4                 | LR__4902
318c4                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
318c4                 | ' 	}
318c4                 | ' 
318c4                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
318c4                 | LR__4903
318c4     0C 4E 05 F1 | 	add	fp, #12
318c8     A7 FA 01 FB | 	rdlong	result1, fp
318cc     0C 4E 85 F1 | 	sub	fp, #12
318d0     01 FA 15 F2 | 	cmp	result1, #1 wc
318d4     90 06 90 CD |  if_b	jmp	#LR__4922
318d8     04 4E 05 F1 | 	add	fp, #4
318dc     A7 FA 01 FB | 	rdlong	result1, fp
318e0     04 4E 85 F1 | 	sub	fp, #4
318e4     14 FA 05 F1 | 	add	result1, #20
318e8     FD FA 01 FB | 	rdlong	result1, result1
318ec     FF FB CD F7 | 	test	result1, #511 wz
318f0     D8 04 90 5D |  if_ne	jmp	#LR__4918
318f4     04 4E 05 F1 | 	add	fp, #4
318f8     A7 FA 01 FB | 	rdlong	result1, fp
318fc     14 FA 05 F1 | 	add	result1, #20
31900     FD FA 01 FB | 	rdlong	result1, result1
31904     09 FA 45 F0 | 	shr	result1, #9
31908     14 4E 05 F1 | 	add	fp, #20
3190c     A7 14 02 FB | 	rdlong	arg02, fp
31910     0A 14 06 F1 | 	add	arg02, #10
31914     0A 19 E2 FA | 	rdword	arg04, arg02
31918     0C 15 32 F9 | 	getword	arg02, arg04, #0
3191c     01 14 86 F1 | 	sub	arg02, #1
31920     0A FB 09 F5 | 	and	result1, arg02 wz
31924     14 4E 05 F1 | 	add	fp, #20
31928     A7 FA 61 FC | 	wrlong	result1, fp
3192c     2C 4E 85 F1 | 	sub	fp, #44
31930     44 01 90 5D |  if_ne	jmp	#LR__4909
31934     04 4E 05 F1 | 	add	fp, #4
31938     A7 FA 01 FB | 	rdlong	result1, fp
3193c     04 4E 85 F1 | 	sub	fp, #4
31940     14 FA 05 F1 | 	add	result1, #20
31944     FD 14 0A FB | 	rdlong	arg02, result1 wz
31948     44 00 90 5D |  if_ne	jmp	#LR__4904
3194c     04 4E 05 F1 | 	add	fp, #4
31950     A7 14 02 FB | 	rdlong	arg02, fp
31954     08 14 06 F1 | 	add	arg02, #8
31958     0A 15 0A FB | 	rdlong	arg02, arg02 wz
3195c     18 4E 05 F1 | 	add	fp, #24
31960     A7 14 62 FC | 	wrlong	arg02, fp
31964     1C 4E 85 F1 | 	sub	fp, #28
31968     4C 00 90 5D |  if_ne	jmp	#LR__4905
3196c     04 4E 05 F1 | 	add	fp, #4
31970     A7 12 02 FB | 	rdlong	arg01, fp
31974     04 4E 85 F1 | 	sub	fp, #4
31978     00 14 06 F6 | 	mov	arg02, #0
3197c     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
31980     1C 4E 05 F1 | 	add	fp, #28
31984     A7 FA 61 FC | 	wrlong	result1, fp
31988     1C 4E 85 F1 | 	sub	fp, #28
3198c     28 00 90 FD | 	jmp	#LR__4905
31990                 | LR__4904
31990     04 4E 05 F1 | 	add	fp, #4
31994     A7 18 02 FB | 	rdlong	arg04, fp
31998     0C 13 02 F6 | 	mov	arg01, arg04
3199c     04 4E 85 F1 | 	sub	fp, #4
319a0     18 18 06 F1 | 	add	arg04, #24
319a4     0C 15 02 FB | 	rdlong	arg02, arg04
319a8     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
319ac     1C 4E 05 F1 | 	add	fp, #28
319b0     A7 FA 61 FC | 	wrlong	result1, fp
319b4     1C 4E 85 F1 | 	sub	fp, #28
319b8                 | LR__4905
319b8     1C 4E 05 F1 | 	add	fp, #28
319bc     A7 FA 09 FB | 	rdlong	result1, fp wz
319c0     1C 4E 85 F1 | 	sub	fp, #28
319c4     A0 05 90 AD |  if_e	jmp	#LR__4922
319c8     1C 4E 05 F1 | 	add	fp, #28
319cc     A7 FA 01 FB | 	rdlong	result1, fp
319d0     1C 4E 85 F1 | 	sub	fp, #28
319d4     01 FA 0D F2 | 	cmp	result1, #1 wz
319d8     1C 00 90 5D |  if_ne	jmp	#LR__4906
319dc     04 4E 05 F1 | 	add	fp, #4
319e0     A7 FA 01 FB | 	rdlong	result1, fp
319e4     04 4E 85 F1 | 	sub	fp, #4
319e8     11 FA 05 F1 | 	add	result1, #17
319ec     FD 04 48 FC | 	wrbyte	#2, result1
319f0     02 FA 05 F6 | 	mov	result1, #2
319f4     98 05 90 FD | 	jmp	#LR__4923
319f8                 | LR__4906
319f8     1C 4E 05 F1 | 	add	fp, #28
319fc     A7 FA 01 FB | 	rdlong	result1, fp
31a00     1C 4E 85 F1 | 	sub	fp, #28
31a04     FF FF 7F FF 
31a08     FF FB 0D F2 | 	cmp	result1, ##-1 wz
31a0c     1C 00 90 5D |  if_ne	jmp	#LR__4907
31a10     04 4E 05 F1 | 	add	fp, #4
31a14     A7 FA 01 FB | 	rdlong	result1, fp
31a18     04 4E 85 F1 | 	sub	fp, #4
31a1c     11 FA 05 F1 | 	add	result1, #17
31a20     FD 02 48 FC | 	wrbyte	#1, result1
31a24     01 FA 05 F6 | 	mov	result1, #1
31a28     64 05 90 FD | 	jmp	#LR__4923
31a2c                 | LR__4907
31a2c     04 4E 05 F1 | 	add	fp, #4
31a30     A7 FA 01 FB | 	rdlong	result1, fp
31a34     18 4E 05 F1 | 	add	fp, #24
31a38     A7 18 02 FB | 	rdlong	arg04, fp
31a3c     18 FA 05 F1 | 	add	result1, #24
31a40     FD 18 62 FC | 	wrlong	arg04, result1
31a44     18 4E 85 F1 | 	sub	fp, #24
31a48     A7 FA 01 FB | 	rdlong	result1, fp
31a4c     04 4E 85 F1 | 	sub	fp, #4
31a50     08 FA 05 F1 | 	add	result1, #8
31a54     FD FA 09 FB | 	rdlong	result1, result1 wz
31a58     1C 00 90 5D |  if_ne	jmp	#LR__4908
31a5c     04 4E 05 F1 | 	add	fp, #4
31a60     A7 18 02 FB | 	rdlong	arg04, fp
31a64     18 4E 05 F1 | 	add	fp, #24
31a68     A7 FA 01 FB | 	rdlong	result1, fp
31a6c     1C 4E 85 F1 | 	sub	fp, #28
31a70     08 18 06 F1 | 	add	arg04, #8
31a74     0C FB 61 FC | 	wrlong	result1, arg04
31a78                 | LR__4908
31a78                 | LR__4909
31a78     04 4E 05 F1 | 	add	fp, #4
31a7c     A7 18 02 FB | 	rdlong	arg04, fp
31a80     04 4E 85 F1 | 	sub	fp, #4
31a84     10 18 06 F1 | 	add	arg04, #16
31a88     0C 19 C2 FA | 	rdbyte	arg04, arg04
31a8c     80 18 CE F7 | 	test	arg04, #128 wz
31a90     7C 00 90 AD |  if_e	jmp	#LR__4911
31a94     18 4E 05 F1 | 	add	fp, #24
31a98     A7 18 02 FB | 	rdlong	arg04, fp
31a9c     01 18 06 F1 | 	add	arg04, #1
31aa0     0C 13 C2 FA | 	rdbyte	arg01, arg04
31aa4     14 4E 85 F1 | 	sub	fp, #20
31aa8     A7 18 02 FB | 	rdlong	arg04, fp
31aac     0C 15 02 F6 | 	mov	arg02, arg04
31ab0     28 14 06 F1 | 	add	arg02, #40
31ab4     04 4E 85 F1 | 	sub	fp, #4
31ab8     1C 18 06 F1 | 	add	arg04, #28
31abc     0C 17 02 FB | 	rdlong	arg03, arg04
31ac0     01 18 06 F6 | 	mov	arg04, #1
31ac4     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
31ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
31acc     1C 00 90 AD |  if_e	jmp	#LR__4910
31ad0     04 4E 05 F1 | 	add	fp, #4
31ad4     A7 FA 01 FB | 	rdlong	result1, fp
31ad8     04 4E 85 F1 | 	sub	fp, #4
31adc     11 FA 05 F1 | 	add	result1, #17
31ae0     FD 02 48 FC | 	wrbyte	#1, result1
31ae4     01 FA 05 F6 | 	mov	result1, #1
31ae8     A4 04 90 FD | 	jmp	#LR__4923
31aec                 | LR__4910
31aec     04 4E 05 F1 | 	add	fp, #4
31af0     A7 18 02 FB | 	rdlong	arg04, fp
31af4     0C FB 01 F6 | 	mov	result1, arg04
31af8     04 4E 85 F1 | 	sub	fp, #4
31afc     10 18 06 F1 | 	add	arg04, #16
31b00     0C 19 C2 FA | 	rdbyte	arg04, arg04
31b04     7F 18 06 F5 | 	and	arg04, #127
31b08     10 FA 05 F1 | 	add	result1, #16
31b0c     FD 18 42 FC | 	wrbyte	arg04, result1
31b10                 | LR__4911
31b10     18 4E 05 F1 | 	add	fp, #24
31b14     A7 12 02 FB | 	rdlong	arg01, fp
31b18     14 4E 85 F1 | 	sub	fp, #20
31b1c     A7 14 02 FB | 	rdlong	arg02, fp
31b20     04 4E 85 F1 | 	sub	fp, #4
31b24     18 14 06 F1 | 	add	arg02, #24
31b28     0A 15 02 FB | 	rdlong	arg02, arg02
31b2c     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
31b30     20 4E 05 F1 | 	add	fp, #32
31b34     A7 FA 61 FC | 	wrlong	result1, fp
31b38     20 4E 85 F1 | 	sub	fp, #32
31b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
31b40     1C 00 90 5D |  if_ne	jmp	#LR__4912
31b44     04 4E 05 F1 | 	add	fp, #4
31b48     A7 FA 01 FB | 	rdlong	result1, fp
31b4c     04 4E 85 F1 | 	sub	fp, #4
31b50     11 FA 05 F1 | 	add	result1, #17
31b54     FD 04 48 FC | 	wrbyte	#2, result1
31b58     02 FA 05 F6 | 	mov	result1, #2
31b5c     30 04 90 FD | 	jmp	#LR__4923
31b60                 | LR__4912
31b60     20 4E 05 F1 | 	add	fp, #32
31b64     A7 FA 01 FB | 	rdlong	result1, fp
31b68     0C 4E 05 F1 | 	add	fp, #12
31b6c     A7 26 02 FB | 	rdlong	local01, fp
31b70     13 FB 01 F1 | 	add	result1, local01
31b74     0C 4E 85 F1 | 	sub	fp, #12
31b78     A7 FA 61 FC | 	wrlong	result1, fp
31b7c     14 4E 85 F1 | 	sub	fp, #20
31b80     A7 FA 01 FB | 	rdlong	result1, fp
31b84     09 FA 45 F0 | 	shr	result1, #9
31b88     1C 4E 05 F1 | 	add	fp, #28
31b8c     A7 FA 61 FC | 	wrlong	result1, fp
31b90     28 4E 85 F1 | 	sub	fp, #40
31b94     01 FA 15 F2 | 	cmp	result1, #1 wc
31b98     60 01 90 CD |  if_b	jmp	#LR__4916
31b9c     2C 4E 05 F1 | 	add	fp, #44
31ba0     A7 FA 01 FB | 	rdlong	result1, fp
31ba4     04 4E 85 F1 | 	sub	fp, #4
31ba8     A7 18 02 FB | 	rdlong	arg04, fp
31bac     0C FB 01 F1 | 	add	result1, arg04
31bb0     10 4E 85 F1 | 	sub	fp, #16
31bb4     A7 18 02 FB | 	rdlong	arg04, fp
31bb8     18 4E 85 F1 | 	sub	fp, #24
31bbc     0A 18 06 F1 | 	add	arg04, #10
31bc0     0C 19 E2 FA | 	rdword	arg04, arg04
31bc4     0C FB 19 F2 | 	cmp	result1, arg04 wcz
31bc8     28 00 90 ED |  if_be	jmp	#LR__4913
31bcc     18 4E 05 F1 | 	add	fp, #24
31bd0     A7 FA 01 FB | 	rdlong	result1, fp
31bd4     0A FA 05 F1 | 	add	result1, #10
31bd8     FD FA E1 FA | 	rdword	result1, result1
31bdc     14 4E 05 F1 | 	add	fp, #20
31be0     A7 18 02 FB | 	rdlong	arg04, fp
31be4     0C FB 81 F1 | 	sub	result1, arg04
31be8     04 4E 85 F1 | 	sub	fp, #4
31bec     A7 FA 61 FC | 	wrlong	result1, fp
31bf0     28 4E 85 F1 | 	sub	fp, #40
31bf4                 | LR__4913
31bf4     18 4E 05 F1 | 	add	fp, #24
31bf8     A7 18 02 FB | 	rdlong	arg04, fp
31bfc     01 18 06 F1 | 	add	arg04, #1
31c00     0C 13 C2 FA | 	rdbyte	arg01, arg04
31c04     18 4E 05 F1 | 	add	fp, #24
31c08     A7 14 02 FB | 	rdlong	arg02, fp
31c0c     10 4E 85 F1 | 	sub	fp, #16
31c10     A7 16 02 FB | 	rdlong	arg03, fp
31c14     08 4E 05 F1 | 	add	fp, #8
31c18     A7 18 02 FB | 	rdlong	arg04, fp
31c1c     28 4E 85 F1 | 	sub	fp, #40
31c20     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
31c24     00 FA 0D F2 | 	cmp	result1, #0 wz
31c28     1C 00 90 AD |  if_e	jmp	#LR__4914
31c2c     04 4E 05 F1 | 	add	fp, #4
31c30     A7 26 02 FB | 	rdlong	local01, fp
31c34     04 4E 85 F1 | 	sub	fp, #4
31c38     11 26 06 F1 | 	add	local01, #17
31c3c     13 03 48 FC | 	wrbyte	#1, local01
31c40     01 FA 05 F6 | 	mov	result1, #1
31c44     48 03 90 FD | 	jmp	#LR__4923
31c48                 | LR__4914
31c48     04 4E 05 F1 | 	add	fp, #4
31c4c     A7 FA 01 FB | 	rdlong	result1, fp
31c50     1C FA 05 F1 | 	add	result1, #28
31c54     FD FA 01 FB | 	rdlong	result1, result1
31c58     1C 4E 05 F1 | 	add	fp, #28
31c5c     A7 28 02 FB | 	rdlong	local02, fp
31c60     14 FB 81 F1 | 	sub	result1, local02
31c64     08 4E 05 F1 | 	add	fp, #8
31c68     A7 18 02 FB | 	rdlong	arg04, fp
31c6c     28 4E 85 F1 | 	sub	fp, #40
31c70     0C FB 11 F2 | 	cmp	result1, arg04 wc
31c74     68 00 90 3D |  if_ae	jmp	#LR__4915
31c78     04 4E 05 F1 | 	add	fp, #4
31c7c     A7 12 02 FB | 	rdlong	arg01, fp
31c80     28 12 06 F1 | 	add	arg01, #40
31c84     2C 4E 05 F1 | 	add	fp, #44
31c88     A7 14 02 FB | 	rdlong	arg02, fp
31c8c     2C 4E 85 F1 | 	sub	fp, #44
31c90     A7 FA 01 FB | 	rdlong	result1, fp
31c94     1C FA 05 F1 | 	add	result1, #28
31c98     FD 2A 02 FB | 	rdlong	local03, result1
31c9c     1C 4E 05 F1 | 	add	fp, #28
31ca0     A7 18 02 FB | 	rdlong	arg04, fp
31ca4     20 4E 85 F1 | 	sub	fp, #32
31ca8     0C 2B 82 F1 | 	sub	local03, arg04
31cac     09 2A 66 F0 | 	shl	local03, #9
31cb0     15 15 02 F1 | 	add	arg02, local03
31cb4     09 16 C6 F9 | 	decod	arg03, #9
31cb8     EC 3B BF FD | 	call	#__system____builtin_memmove
31cbc     04 4E 05 F1 | 	add	fp, #4
31cc0     A7 18 02 FB | 	rdlong	arg04, fp
31cc4     0C FB 01 F6 | 	mov	result1, arg04
31cc8     04 4E 85 F1 | 	sub	fp, #4
31ccc     10 18 06 F1 | 	add	arg04, #16
31cd0     0C 19 C2 FA | 	rdbyte	arg04, arg04
31cd4     7F 18 06 F5 | 	and	arg04, #127
31cd8     10 FA 05 F1 | 	add	result1, #16
31cdc     FD 18 42 FC | 	wrbyte	arg04, result1
31ce0                 | LR__4915
31ce0     28 4E 05 F1 | 	add	fp, #40
31ce4     A7 FA 01 FB | 	rdlong	result1, fp
31ce8     09 FA 65 F0 | 	shl	result1, #9
31cec     04 4E 85 F1 | 	sub	fp, #4
31cf0     A7 FA 61 FC | 	wrlong	result1, fp
31cf4     24 4E 85 F1 | 	sub	fp, #36
31cf8                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
31cf8                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
31cf8                 | ' 				}
31cf8                 | ' 
31cf8                 | ' 
31cf8                 | ' 				wcnt =  ((UINT) 512 )  * cc;
31cf8                 | ' 				continue;
31cf8     74 01 90 FD | 	jmp	#LR__4919
31cfc                 | LR__4916
31cfc     04 4E 05 F1 | 	add	fp, #4
31d00     A7 28 02 FB | 	rdlong	local02, fp
31d04     1C 28 06 F1 | 	add	local02, #28
31d08     14 FB 01 FB | 	rdlong	result1, local02
31d0c     1C 4E 05 F1 | 	add	fp, #28
31d10     A7 28 02 FB | 	rdlong	local02, fp
31d14     20 4E 85 F1 | 	sub	fp, #32
31d18     14 FB 09 F2 | 	cmp	result1, local02 wz
31d1c     90 00 90 AD |  if_e	jmp	#LR__4917
31d20     04 4E 05 F1 | 	add	fp, #4
31d24     A7 FA 01 FB | 	rdlong	result1, fp
31d28     FD 2A 02 F6 | 	mov	local03, result1
31d2c     04 4E 85 F1 | 	sub	fp, #4
31d30     14 2A 06 F1 | 	add	local03, #20
31d34     15 2B 02 FB | 	rdlong	local03, local03
31d38     0C FA 05 F1 | 	add	result1, #12
31d3c     FD 2C 02 FB | 	rdlong	local04, result1
31d40     16 2F 02 F6 | 	mov	local05, local04
31d44     17 2B 12 F2 | 	cmp	local03, local05 wc
31d48     64 00 90 3D |  if_ae	jmp	#LR__4917
31d4c     18 4E 05 F1 | 	add	fp, #24
31d50     A7 18 02 FB | 	rdlong	arg04, fp
31d54     01 18 06 F1 | 	add	arg04, #1
31d58     0C 13 C2 FA | 	rdbyte	arg01, arg04
31d5c     14 4E 85 F1 | 	sub	fp, #20
31d60     A7 30 02 FB | 	rdlong	local06, fp
31d64     28 30 06 F1 | 	add	local06, #40
31d68     18 33 02 F6 | 	mov	local07, local06
31d6c     1C 4E 05 F1 | 	add	fp, #28
31d70     A7 34 02 FB | 	rdlong	local08, fp
31d74     20 4E 85 F1 | 	sub	fp, #32
31d78     01 36 06 F6 | 	mov	local09, #1
31d7c     19 15 02 F6 | 	mov	arg02, local07
31d80     1A 17 02 F6 | 	mov	arg03, local08
31d84     01 18 06 F6 | 	mov	arg04, #1
31d88     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
31d8c     FD 38 0A F6 | 	mov	local10, result1 wz
31d90     1C 00 90 AD |  if_e	jmp	#LR__4917
31d94     04 4E 05 F1 | 	add	fp, #4
31d98     A7 38 02 FB | 	rdlong	local10, fp
31d9c     04 4E 85 F1 | 	sub	fp, #4
31da0     11 38 06 F1 | 	add	local10, #17
31da4     1C 03 48 FC | 	wrbyte	#1, local10
31da8                 | ' 				fp->fptr < fp->obj.objsize &&
31da8                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
31da8                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
31da8     01 FA 05 F6 | 	mov	result1, #1
31dac     E0 01 90 FD | 	jmp	#LR__4923
31db0                 | LR__4917
31db0     04 4E 05 F1 | 	add	fp, #4
31db4     A7 18 02 FB | 	rdlong	arg04, fp
31db8     1C 4E 05 F1 | 	add	fp, #28
31dbc     A7 FA 01 FB | 	rdlong	result1, fp
31dc0     20 4E 85 F1 | 	sub	fp, #32
31dc4     1C 18 06 F1 | 	add	arg04, #28
31dc8     0C FB 61 FC | 	wrlong	result1, arg04
31dcc                 | LR__4918
31dcc     04 4E 05 F1 | 	add	fp, #4
31dd0     A7 FA 01 FB | 	rdlong	result1, fp
31dd4     14 FA 05 F1 | 	add	result1, #20
31dd8     FD FA 01 FB | 	rdlong	result1, result1
31ddc     FF FB 05 F5 | 	and	result1, #511
31de0     09 3A C6 F9 | 	decod	local11, #9
31de4     FD 3A 82 F1 | 	sub	local11, result1
31de8     20 4E 05 F1 | 	add	fp, #32
31dec     A7 3A 62 FC | 	wrlong	local11, fp
31df0     18 4E 85 F1 | 	sub	fp, #24
31df4     A7 FA 01 FB | 	rdlong	result1, fp
31df8     0C 4E 85 F1 | 	sub	fp, #12
31dfc     FD 3A 1A F2 | 	cmp	local11, result1 wcz
31e00     0C 4E 05 11 |  if_a	add	fp, #12
31e04     A7 3A 02 1B |  if_a	rdlong	local11, fp
31e08     18 4E 05 11 |  if_a	add	fp, #24
31e0c     A7 3A 62 1C |  if_a	wrlong	local11, fp
31e10     24 4E 85 11 |  if_a	sub	fp, #36
31e14     04 4E 05 F1 | 	add	fp, #4
31e18     A7 3A 02 FB | 	rdlong	local11, fp
31e1c     1D 13 02 F6 | 	mov	arg01, local11
31e20     28 12 06 F1 | 	add	arg01, #40
31e24     14 3A 06 F1 | 	add	local11, #20
31e28     1D 3B 02 FB | 	rdlong	local11, local11
31e2c     FF 3B 06 F5 | 	and	local11, #511
31e30     1D 13 02 F1 | 	add	arg01, local11
31e34     2C 4E 05 F1 | 	add	fp, #44
31e38     A7 14 02 FB | 	rdlong	arg02, fp
31e3c     0C 4E 85 F1 | 	sub	fp, #12
31e40     A7 16 02 FB | 	rdlong	arg03, fp
31e44     24 4E 85 F1 | 	sub	fp, #36
31e48     5C 3A BF FD | 	call	#__system____builtin_memmove
31e4c     04 4E 05 F1 | 	add	fp, #4
31e50     A7 FA 01 FB | 	rdlong	result1, fp
31e54     FD 3A 02 F6 | 	mov	local11, result1
31e58     04 4E 85 F1 | 	sub	fp, #4
31e5c     10 FA 05 F1 | 	add	result1, #16
31e60     FD FA C1 FA | 	rdbyte	result1, result1
31e64     80 FA 45 F5 | 	or	result1, #128
31e68     10 3A 06 F1 | 	add	local11, #16
31e6c     1D FB 41 FC | 	wrbyte	result1, local11
31e70                 | LR__4919
31e70     0C 4E 05 F1 | 	add	fp, #12
31e74     A7 3A 02 FB | 	rdlong	local11, fp
31e78     18 4E 05 F1 | 	add	fp, #24
31e7c     A7 FA 01 FB | 	rdlong	result1, fp
31e80     FD 3A 82 F1 | 	sub	local11, result1
31e84     18 4E 85 F1 | 	sub	fp, #24
31e88     A7 3A 62 FC | 	wrlong	local11, fp
31e8c     04 4E 05 F1 | 	add	fp, #4
31e90     A7 3C 02 FB | 	rdlong	local12, fp
31e94     1E 3B 02 FB | 	rdlong	local11, local12
31e98     14 4E 05 F1 | 	add	fp, #20
31e9c     A7 3E 02 FB | 	rdlong	local13, fp
31ea0     1F 3B 02 F1 | 	add	local11, local13
31ea4     1E 3B 62 FC | 	wrlong	local11, local12
31ea8     0C 4E 05 F1 | 	add	fp, #12
31eac     A7 3A 02 FB | 	rdlong	local11, fp
31eb0     0C 4E 85 F1 | 	sub	fp, #12
31eb4     A7 40 02 FB | 	rdlong	local14, fp
31eb8     20 3B 02 F1 | 	add	local11, local14
31ebc     0C 4E 05 F1 | 	add	fp, #12
31ec0     A7 3A 62 FC | 	wrlong	local11, fp
31ec4     2C 4E 85 F1 | 	sub	fp, #44
31ec8     A7 42 02 FB | 	rdlong	local15, fp
31ecc     21 3B 02 F6 | 	mov	local11, local15
31ed0     14 42 06 F1 | 	add	local15, #20
31ed4     21 43 02 FB | 	rdlong	local15, local15
31ed8     20 4E 05 F1 | 	add	fp, #32
31edc     A7 44 02 FB | 	rdlong	local16, fp
31ee0     22 43 02 F1 | 	add	local15, local16
31ee4     14 3A 06 F1 | 	add	local11, #20
31ee8     1D 43 62 FC | 	wrlong	local15, local11
31eec     20 4E 85 F1 | 	sub	fp, #32
31ef0     A7 46 02 FB | 	rdlong	local17, fp
31ef4     23 3B 02 F6 | 	mov	local11, local17
31ef8     23 49 02 F6 | 	mov	local18, local17
31efc     04 4E 85 F1 | 	sub	fp, #4
31f00     14 46 06 F1 | 	add	local17, #20
31f04     23 4B 02 FB | 	rdlong	local19, local17
31f08     0C 48 06 F1 | 	add	local18, #12
31f0c     24 4D 02 FB | 	rdlong	local20, local18
31f10     26 4B 1A F2 | 	cmp	local19, local20 wcz
31f14     24 00 90 ED |  if_be	jmp	#LR__4920
31f18     04 4E 05 F1 | 	add	fp, #4
31f1c     A7 2E 02 FB | 	rdlong	local05, fp
31f20     04 4E 85 F1 | 	sub	fp, #4
31f24     17 2B 02 F6 | 	mov	local03, local05
31f28     14 2A 06 F1 | 	add	local03, #20
31f2c     15 2D 02 FB | 	rdlong	local04, local03
31f30     14 2A 86 F1 | 	sub	local03, #20
31f34     16 4F 02 F6 | 	mov	local21, local04
31f38     20 00 90 FD | 	jmp	#LR__4921
31f3c                 | LR__4920
31f3c     04 4E 05 F1 | 	add	fp, #4
31f40     A7 32 02 FB | 	rdlong	local07, fp
31f44     04 4E 85 F1 | 	sub	fp, #4
31f48     19 39 02 F6 | 	mov	local10, local07
31f4c     0C 38 06 F1 | 	add	local10, #12
31f50     1C 35 02 FB | 	rdlong	local08, local10
31f54     0C 38 86 F1 | 	sub	local10, #12
31f58     1A 4F 02 F6 | 	mov	local21, local08
31f5c                 | LR__4921
31f5c     0C 3A 06 F1 | 	add	local11, #12
31f60     1D 4F 62 FC | 	wrlong	local21, local11
31f64     5C F9 9F FD | 	jmp	#LR__4903
31f68                 | LR__4922
31f68     04 4E 05 F1 | 	add	fp, #4
31f6c     A7 3C 02 FB | 	rdlong	local12, fp
31f70     1E 27 02 F6 | 	mov	local01, local12
31f74     04 4E 85 F1 | 	sub	fp, #4
31f78     10 3C 06 F1 | 	add	local12, #16
31f7c     1E 3B C2 FA | 	rdbyte	local11, local12
31f80     40 3A 46 F5 | 	or	local11, #64
31f84     10 26 06 F1 | 	add	local01, #16
31f88     13 3B 42 FC | 	wrbyte	local11, local01
31f8c                 | ' 
31f8c                 | ' 
31f8c                 | ' 
31f8c                 | ' 
31f8c                 | ' 
31f8c                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
31f8c                 | ' 		fp->flag |=  0x80 ;
31f8c                 | ' 
31f8c                 | ' 	}
31f8c                 | ' 
31f8c                 | ' 	fp->flag |=  0x40 ;
31f8c                 | ' 
31f8c                 | ' 	return FR_OK ;
31f8c     00 FA 05 F6 | 	mov	result1, #0
31f90                 | LR__4923
31f90     A7 F0 03 F6 | 	mov	ptra, fp
31f94     B2 00 A0 FD | 	call	#popregs_
31f98                 | _fatfs_cc_f_write_ret
31f98     2D 00 64 FD | 	ret
31f9c                 | 
31f9c                 | _fatfs_cc_f_sync
31f9c     00 4A 05 F6 | 	mov	COUNT_, #0
31fa0     A8 00 A0 FD | 	call	#pushregs_
31fa4     18 F0 07 F1 | 	add	ptra, #24
31fa8     04 4E 05 F1 | 	add	fp, #4
31fac     A7 12 62 FC | 	wrlong	arg01, fp
31fb0     08 4E 05 F1 | 	add	fp, #8
31fb4     A7 14 02 F6 | 	mov	arg02, fp
31fb8     0C 4E 85 F1 | 	sub	fp, #12
31fbc     D0 E8 BF FD | 	call	#_fatfs_cc_validate
31fc0     08 4E 05 F1 | 	add	fp, #8
31fc4     A7 FA 61 FC | 	wrlong	result1, fp
31fc8     08 4E 85 F1 | 	sub	fp, #8
31fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
31fd0     C0 01 90 5D |  if_ne	jmp	#LR__4933
31fd4     04 4E 05 F1 | 	add	fp, #4
31fd8     A7 18 02 FB | 	rdlong	arg04, fp
31fdc     04 4E 85 F1 | 	sub	fp, #4
31fe0     10 18 06 F1 | 	add	arg04, #16
31fe4     0C 19 C2 FA | 	rdbyte	arg04, arg04
31fe8     40 18 CE F7 | 	test	arg04, #64 wz
31fec     A4 01 90 AD |  if_e	jmp	#LR__4932
31ff0     04 4E 05 F1 | 	add	fp, #4
31ff4     A7 18 02 FB | 	rdlong	arg04, fp
31ff8     04 4E 85 F1 | 	sub	fp, #4
31ffc     10 18 06 F1 | 	add	arg04, #16
32000     0C 19 C2 FA | 	rdbyte	arg04, arg04
32004     80 18 CE F7 | 	test	arg04, #128 wz
32008     64 00 90 AD |  if_e	jmp	#LR__4930
3200c     0C 4E 05 F1 | 	add	fp, #12
32010     A7 18 02 FB | 	rdlong	arg04, fp
32014     01 18 06 F1 | 	add	arg04, #1
32018     0C 13 C2 FA | 	rdbyte	arg01, arg04
3201c     08 4E 85 F1 | 	sub	fp, #8
32020     A7 18 02 FB | 	rdlong	arg04, fp
32024     0C 15 02 F6 | 	mov	arg02, arg04
32028     28 14 06 F1 | 	add	arg02, #40
3202c     04 4E 85 F1 | 	sub	fp, #4
32030     1C 18 06 F1 | 	add	arg04, #28
32034     0C 17 02 FB | 	rdlong	arg03, arg04
32038     01 18 06 F6 | 	mov	arg04, #1
3203c     0C AE BF FD | 	call	#_fatfs_cc_disk_write
32040     00 FA 0D F2 | 	cmp	result1, #0 wz
32044     01 FA 05 56 |  if_ne	mov	result1, #1
32048     54 01 90 5D |  if_ne	jmp	#LR__4934
3204c     04 4E 05 F1 | 	add	fp, #4
32050     A7 18 02 FB | 	rdlong	arg04, fp
32054     0C 17 02 F6 | 	mov	arg03, arg04
32058     04 4E 85 F1 | 	sub	fp, #4
3205c     10 18 06 F1 | 	add	arg04, #16
32060     0C 19 C2 FA | 	rdbyte	arg04, arg04
32064     7F 18 06 F5 | 	and	arg04, #127
32068     10 16 06 F1 | 	add	arg03, #16
3206c     0B 19 42 FC | 	wrbyte	arg04, arg03
32070                 | LR__4930
32070     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
32074     10 4E 05 F1 | 	add	fp, #16
32078     A7 FA 61 FC | 	wrlong	result1, fp
3207c     04 4E 85 F1 | 	sub	fp, #4
32080     A7 12 02 FB | 	rdlong	arg01, fp
32084     08 4E 85 F1 | 	sub	fp, #8
32088     A7 18 02 FB | 	rdlong	arg04, fp
3208c     04 4E 85 F1 | 	sub	fp, #4
32090     20 18 06 F1 | 	add	arg04, #32
32094     0C 15 02 FB | 	rdlong	arg02, arg04
32098     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
3209c     08 4E 05 F1 | 	add	fp, #8
320a0     A7 FA 61 FC | 	wrlong	result1, fp
320a4     08 4E 85 F1 | 	sub	fp, #8
320a8     00 FA 0D F2 | 	cmp	result1, #0 wz
320ac     E4 00 90 5D |  if_ne	jmp	#LR__4931
320b0     04 4E 05 F1 | 	add	fp, #4
320b4     A7 18 02 FB | 	rdlong	arg04, fp
320b8     24 18 06 F1 | 	add	arg04, #36
320bc     0C 19 02 FB | 	rdlong	arg04, arg04
320c0     10 4E 05 F1 | 	add	fp, #16
320c4     A7 18 62 FC | 	wrlong	arg04, fp
320c8     0C 17 02 F6 | 	mov	arg03, arg04
320cc     0B 16 06 F1 | 	add	arg03, #11
320d0     0B 17 C2 FA | 	rdbyte	arg03, arg03
320d4     20 16 46 F5 | 	or	arg03, #32
320d8     0B 18 06 F1 | 	add	arg04, #11
320dc     0C 17 42 FC | 	wrbyte	arg03, arg04
320e0     10 4E 85 F1 | 	sub	fp, #16
320e4     A7 18 02 FB | 	rdlong	arg04, fp
320e8     0C 13 02 FB | 	rdlong	arg01, arg04
320ec     10 4E 05 F1 | 	add	fp, #16
320f0     A7 14 02 FB | 	rdlong	arg02, fp
320f4     14 4E 85 F1 | 	sub	fp, #20
320f8     08 18 06 F1 | 	add	arg04, #8
320fc     0C 17 02 FB | 	rdlong	arg03, arg04
32100     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
32104     14 4E 05 F1 | 	add	fp, #20
32108     A7 12 02 FB | 	rdlong	arg01, fp
3210c     1C 12 06 F1 | 	add	arg01, #28
32110     10 4E 85 F1 | 	sub	fp, #16
32114     A7 18 02 FB | 	rdlong	arg04, fp
32118     0C 18 06 F1 | 	add	arg04, #12
3211c     0C 15 02 FB | 	rdlong	arg02, arg04
32120     09 15 62 FC | 	wrlong	arg02, arg01
32124     10 4E 05 F1 | 	add	fp, #16
32128     A7 12 02 FB | 	rdlong	arg01, fp
3212c     16 12 06 F1 | 	add	arg01, #22
32130     04 4E 85 F1 | 	sub	fp, #4
32134     A7 14 02 FB | 	rdlong	arg02, fp
32138     09 15 62 FC | 	wrlong	arg02, arg01
3213c     04 4E 05 F1 | 	add	fp, #4
32140     A7 12 02 FB | 	rdlong	arg01, fp
32144     12 12 06 F1 | 	add	arg01, #18
32148     09 01 58 FC | 	wrword	#0, arg01
3214c     08 4E 85 F1 | 	sub	fp, #8
32150     A7 18 02 FB | 	rdlong	arg04, fp
32154     03 18 06 F1 | 	add	arg04, #3
32158     0C 03 48 FC | 	wrbyte	#1, arg04
3215c     A7 12 02 FB | 	rdlong	arg01, fp
32160     0C 4E 85 F1 | 	sub	fp, #12
32164     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
32168     08 4E 05 F1 | 	add	fp, #8
3216c     A7 FA 61 FC | 	wrlong	result1, fp
32170     04 4E 85 F1 | 	sub	fp, #4
32174     A7 18 02 FB | 	rdlong	arg04, fp
32178     0C 17 02 F6 | 	mov	arg03, arg04
3217c     04 4E 85 F1 | 	sub	fp, #4
32180     10 18 06 F1 | 	add	arg04, #16
32184     0C 19 C2 FA | 	rdbyte	arg04, arg04
32188     BF 18 06 F5 | 	and	arg04, #191
3218c     10 16 06 F1 | 	add	arg03, #16
32190     0B 19 42 FC | 	wrbyte	arg04, arg03
32194                 | LR__4931
32194                 | LR__4932
32194                 | LR__4933
32194                 | ' 					dir = fp->dir_ptr;
32194                 | ' 					dir[ 11 ] |=  0x20 ;
32194                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
32194                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
32194                 | ' 					st_dword(dir +  22 , tm);
32194                 | ' 					st_word(dir +  18 , 0);
32194                 | ' 					fs->wflag = 1;
32194                 | ' 					res = sync_fs(fs);
32194                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
32194                 | ' 				}
32194                 | ' 			}
32194                 | ' 		}
32194                 | ' 	}
32194                 | ' 
32194                 | ' 	return res ;
32194     08 4E 05 F1 | 	add	fp, #8
32198     A7 FA 01 FB | 	rdlong	result1, fp
3219c     08 4E 85 F1 | 	sub	fp, #8
321a0                 | LR__4934
321a0     A7 F0 03 F6 | 	mov	ptra, fp
321a4     B2 00 A0 FD | 	call	#popregs_
321a8                 | _fatfs_cc_f_sync_ret
321a8     2D 00 64 FD | 	ret
321ac                 | 
321ac                 | _fatfs_cc_f_close
321ac     01 4A 05 F6 | 	mov	COUNT_, #1
321b0     A8 00 A0 FD | 	call	#pushregs_
321b4     10 F0 07 F1 | 	add	ptra, #16
321b8     04 4E 05 F1 | 	add	fp, #4
321bc     A7 12 62 FC | 	wrlong	arg01, fp
321c0     04 4E 85 F1 | 	sub	fp, #4
321c4     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
321c8     08 4E 05 F1 | 	add	fp, #8
321cc     A7 FA 61 FC | 	wrlong	result1, fp
321d0     08 4E 85 F1 | 	sub	fp, #8
321d4     00 FA 0D F2 | 	cmp	result1, #0 wz
321d8     38 00 90 5D |  if_ne	jmp	#LR__4940
321dc     04 4E 05 F1 | 	add	fp, #4
321e0     A7 12 02 FB | 	rdlong	arg01, fp
321e4     08 4E 05 F1 | 	add	fp, #8
321e8     A7 14 02 F6 | 	mov	arg02, fp
321ec     0C 4E 85 F1 | 	sub	fp, #12
321f0     9C E6 BF FD | 	call	#_fatfs_cc_validate
321f4     08 4E 05 F1 | 	add	fp, #8
321f8     A7 FA 61 FC | 	wrlong	result1, fp
321fc     08 4E 85 F1 | 	sub	fp, #8
32200     00 FA 0D F2 | 	cmp	result1, #0 wz
32204     04 4E 05 A1 |  if_e	add	fp, #4
32208     A7 26 02 AB |  if_e	rdlong	local01, fp
3220c     04 4E 85 A1 |  if_e	sub	fp, #4
32210     13 01 68 AC |  if_e	wrlong	#0, local01
32214                 | LR__4940
32214                 | ' 
32214                 | ' 
32214                 | ' 
32214                 | ' 
32214                 | ' 			fp->obj.fs = 0;
32214                 | ' #line 4192 "ff.c"
32214                 | ' 		}
32214                 | ' 	}
32214                 | ' 	return res;
32214     08 4E 05 F1 | 	add	fp, #8
32218     A7 FA 01 FB | 	rdlong	result1, fp
3221c     08 4E 85 F1 | 	sub	fp, #8
32220     A7 F0 03 F6 | 	mov	ptra, fp
32224     B2 00 A0 FD | 	call	#popregs_
32228                 | _fatfs_cc_f_close_ret
32228     2D 00 64 FD | 	ret
3222c                 | 
3222c                 | _fatfs_cc_f_lseek
3222c     00 4A 05 F6 | 	mov	COUNT_, #0
32230     A8 00 A0 FD | 	call	#pushregs_
32234     24 F0 07 F1 | 	add	ptra, #36
32238     04 4E 05 F1 | 	add	fp, #4
3223c     A7 12 62 FC | 	wrlong	arg01, fp
32240     04 4E 05 F1 | 	add	fp, #4
32244     A7 14 62 FC | 	wrlong	arg02, fp
32248     04 4E 85 F1 | 	sub	fp, #4
3224c     A7 12 02 FB | 	rdlong	arg01, fp
32250     0C 4E 05 F1 | 	add	fp, #12
32254     A7 14 02 F6 | 	mov	arg02, fp
32258     10 4E 85 F1 | 	sub	fp, #16
3225c     30 E6 BF FD | 	call	#_fatfs_cc_validate
32260     0C 4E 05 F1 | 	add	fp, #12
32264     A7 FA 61 FC | 	wrlong	result1, fp
32268     0C 4E 85 F1 | 	sub	fp, #12
3226c     00 FA 0D F2 | 	cmp	result1, #0 wz
32270     1C 00 90 5D |  if_ne	jmp	#LR__4950
32274     04 4E 05 F1 | 	add	fp, #4
32278     A7 18 02 FB | 	rdlong	arg04, fp
3227c     11 18 06 F1 | 	add	arg04, #17
32280     0C 19 C2 FA | 	rdbyte	arg04, arg04
32284     08 4E 05 F1 | 	add	fp, #8
32288     A7 18 62 FC | 	wrlong	arg04, fp
3228c     0C 4E 85 F1 | 	sub	fp, #12
32290                 | LR__4950
32290     0C 4E 05 F1 | 	add	fp, #12
32294     A7 18 0A FB | 	rdlong	arg04, fp wz
32298     0C 4E 85 F1 | 	sub	fp, #12
3229c     0C 4E 05 51 |  if_ne	add	fp, #12
322a0     A7 FA 01 5B |  if_ne	rdlong	result1, fp
322a4     0C 4E 85 51 |  if_ne	sub	fp, #12
322a8     40 06 90 5D |  if_ne	jmp	#LR__4973
322ac     04 4E 05 F1 | 	add	fp, #4
322b0     A7 18 02 FB | 	rdlong	arg04, fp
322b4     04 4E 05 F1 | 	add	fp, #4
322b8     A7 16 02 FB | 	rdlong	arg03, fp
322bc     08 4E 85 F1 | 	sub	fp, #8
322c0     0C 18 06 F1 | 	add	arg04, #12
322c4     0C 19 02 FB | 	rdlong	arg04, arg04
322c8     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
322cc     3C 00 90 ED |  if_be	jmp	#LR__4951
322d0     04 4E 05 F1 | 	add	fp, #4
322d4     A7 16 02 FB | 	rdlong	arg03, fp
322d8     04 4E 85 F1 | 	sub	fp, #4
322dc     10 16 06 F1 | 	add	arg03, #16
322e0     0B 17 C2 FA | 	rdbyte	arg03, arg03
322e4     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
322e8     02 16 CE F7 | 	test	arg03, #2 wz
322ec     1C 00 90 5D |  if_ne	jmp	#LR__4951
322f0     04 4E 05 F1 | 	add	fp, #4
322f4     A7 16 02 FB | 	rdlong	arg03, fp
322f8     0C 16 06 F1 | 	add	arg03, #12
322fc     0B 17 02 FB | 	rdlong	arg03, arg03
32300     04 4E 05 F1 | 	add	fp, #4
32304     A7 16 62 FC | 	wrlong	arg03, fp
32308     08 4E 85 F1 | 	sub	fp, #8
3230c                 | LR__4951
3230c     04 4E 05 F1 | 	add	fp, #4
32310     A7 16 02 FB | 	rdlong	arg03, fp
32314     14 16 06 F1 | 	add	arg03, #20
32318     0B 17 02 FB | 	rdlong	arg03, arg03
3231c     1C 4E 05 F1 | 	add	fp, #28
32320     A7 16 62 FC | 	wrlong	arg03, fp
32324     1C 4E 85 F1 | 	sub	fp, #28
32328     A7 16 02 FB | 	rdlong	arg03, fp
3232c     18 4E 05 F1 | 	add	fp, #24
32330     A7 00 68 FC | 	wrlong	#0, fp
32334     14 16 06 F1 | 	add	arg03, #20
32338     0B 01 68 FC | 	wrlong	#0, arg03
3233c     14 4E 85 F1 | 	sub	fp, #20
32340     A7 16 02 FB | 	rdlong	arg03, fp
32344     08 4E 85 F1 | 	sub	fp, #8
32348     01 16 16 F2 | 	cmp	arg03, #1 wc
3234c     E4 03 90 CD |  if_b	jmp	#LR__4967
32350     10 4E 05 F1 | 	add	fp, #16
32354     A7 16 02 FB | 	rdlong	arg03, fp
32358     0A 16 06 F1 | 	add	arg03, #10
3235c     0B 19 E2 FA | 	rdword	arg04, arg03
32360     09 18 66 F0 | 	shl	arg04, #9
32364     08 4E 05 F1 | 	add	fp, #8
32368     A7 18 62 FC | 	wrlong	arg04, fp
3236c     08 4E 05 F1 | 	add	fp, #8
32370     A7 18 02 FB | 	rdlong	arg04, fp
32374     20 4E 85 F1 | 	sub	fp, #32
32378     01 18 16 F2 | 	cmp	arg04, #1 wc
3237c     AC 00 90 CD |  if_b	jmp	#LR__4952
32380     08 4E 05 F1 | 	add	fp, #8
32384     A7 18 02 FB | 	rdlong	arg04, fp
32388     01 18 86 F1 | 	sub	arg04, #1
3238c     10 4E 05 F1 | 	add	fp, #16
32390     A7 16 02 FB | 	rdlong	arg03, fp
32394     0B 19 12 FD | 	qdiv	arg04, arg03
32398     08 4E 05 F1 | 	add	fp, #8
3239c     A7 FA 01 FB | 	rdlong	result1, fp
323a0     01 FA 85 F1 | 	sub	result1, #1
323a4     18 18 62 FD | 	getqx	arg04
323a8     0B FB 11 FD | 	qdiv	result1, arg03
323ac     20 4E 85 F1 | 	sub	fp, #32
323b0     18 16 62 FD | 	getqx	arg03
323b4     0B 19 12 F2 | 	cmp	arg04, arg03 wc
323b8     70 00 90 CD |  if_b	jmp	#LR__4952
323bc     04 4E 05 F1 | 	add	fp, #4
323c0     A7 16 02 FB | 	rdlong	arg03, fp
323c4     1C 4E 05 F1 | 	add	fp, #28
323c8     A7 FA 01 FB | 	rdlong	result1, fp
323cc     01 FA 85 F1 | 	sub	result1, #1
323d0     08 4E 85 F1 | 	sub	fp, #8
323d4     A7 18 02 FB | 	rdlong	arg04, fp
323d8     01 18 86 F1 | 	sub	arg04, #1
323dc     0C FB 21 F5 | 	andn	result1, arg04
323e0     14 16 06 F1 | 	add	arg03, #20
323e4     0B FB 61 FC | 	wrlong	result1, arg03
323e8     10 4E 85 F1 | 	sub	fp, #16
323ec     A7 16 02 FB | 	rdlong	arg03, fp
323f0     04 4E 85 F1 | 	sub	fp, #4
323f4     A7 18 02 FB | 	rdlong	arg04, fp
323f8     14 18 06 F1 | 	add	arg04, #20
323fc     0C 19 02 FB | 	rdlong	arg04, arg04
32400     0C 17 82 F1 | 	sub	arg03, arg04
32404     04 4E 05 F1 | 	add	fp, #4
32408     A7 16 62 FC | 	wrlong	arg03, fp
3240c     04 4E 85 F1 | 	sub	fp, #4
32410     A7 16 02 FB | 	rdlong	arg03, fp
32414     18 16 06 F1 | 	add	arg03, #24
32418     0B 17 02 FB | 	rdlong	arg03, arg03
3241c     10 4E 05 F1 | 	add	fp, #16
32420     A7 16 62 FC | 	wrlong	arg03, fp
32424     14 4E 85 F1 | 	sub	fp, #20
32428     D0 00 90 FD | 	jmp	#LR__4956
3242c                 | LR__4952
3242c     04 4E 05 F1 | 	add	fp, #4
32430     A7 16 02 FB | 	rdlong	arg03, fp
32434     08 16 06 F1 | 	add	arg03, #8
32438     0B 17 0A FB | 	rdlong	arg03, arg03 wz
3243c     10 4E 05 F1 | 	add	fp, #16
32440     A7 16 62 FC | 	wrlong	arg03, fp
32444     14 4E 85 F1 | 	sub	fp, #20
32448     94 00 90 5D |  if_ne	jmp	#LR__4955
3244c     04 4E 05 F1 | 	add	fp, #4
32450     A7 12 02 FB | 	rdlong	arg01, fp
32454     04 4E 85 F1 | 	sub	fp, #4
32458     00 14 06 F6 | 	mov	arg02, #0
3245c     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
32460     14 4E 05 F1 | 	add	fp, #20
32464     A7 FA 61 FC | 	wrlong	result1, fp
32468     14 4E 85 F1 | 	sub	fp, #20
3246c     01 FA 0D F2 | 	cmp	result1, #1 wz
32470     1C 00 90 5D |  if_ne	jmp	#LR__4953
32474     04 4E 05 F1 | 	add	fp, #4
32478     A7 16 02 FB | 	rdlong	arg03, fp
3247c     04 4E 85 F1 | 	sub	fp, #4
32480     11 16 06 F1 | 	add	arg03, #17
32484     0B 05 48 FC | 	wrbyte	#2, arg03
32488     02 FA 05 F6 | 	mov	result1, #2
3248c     5C 04 90 FD | 	jmp	#LR__4973
32490                 | LR__4953
32490     14 4E 05 F1 | 	add	fp, #20
32494     A7 FA 01 FB | 	rdlong	result1, fp
32498     14 4E 85 F1 | 	sub	fp, #20
3249c     FF FF 7F FF 
324a0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
324a4     1C 00 90 5D |  if_ne	jmp	#LR__4954
324a8     04 4E 05 F1 | 	add	fp, #4
324ac     A7 16 02 FB | 	rdlong	arg03, fp
324b0     04 4E 85 F1 | 	sub	fp, #4
324b4     11 16 06 F1 | 	add	arg03, #17
324b8     0B 03 48 FC | 	wrbyte	#1, arg03
324bc     01 FA 05 F6 | 	mov	result1, #1
324c0     28 04 90 FD | 	jmp	#LR__4973
324c4                 | LR__4954
324c4     04 4E 05 F1 | 	add	fp, #4
324c8     A7 16 02 FB | 	rdlong	arg03, fp
324cc     10 4E 05 F1 | 	add	fp, #16
324d0     A7 18 02 FB | 	rdlong	arg04, fp
324d4     14 4E 85 F1 | 	sub	fp, #20
324d8     08 16 06 F1 | 	add	arg03, #8
324dc     0B 19 62 FC | 	wrlong	arg04, arg03
324e0                 | LR__4955
324e0     04 4E 05 F1 | 	add	fp, #4
324e4     A7 16 02 FB | 	rdlong	arg03, fp
324e8     10 4E 05 F1 | 	add	fp, #16
324ec     A7 18 02 FB | 	rdlong	arg04, fp
324f0     14 4E 85 F1 | 	sub	fp, #20
324f4     18 16 06 F1 | 	add	arg03, #24
324f8     0B 19 62 FC | 	wrlong	arg04, arg03
324fc                 | LR__4956
324fc     14 4E 05 F1 | 	add	fp, #20
32500     A7 16 0A FB | 	rdlong	arg03, fp wz
32504     14 4E 85 F1 | 	sub	fp, #20
32508     28 02 90 AD |  if_e	jmp	#LR__4966
3250c                 | ' 				while (ofs > bcs) {
3250c                 | LR__4957
3250c     08 4E 05 F1 | 	add	fp, #8
32510     A7 18 02 FB | 	rdlong	arg04, fp
32514     10 4E 05 F1 | 	add	fp, #16
32518     A7 16 02 FB | 	rdlong	arg03, fp
3251c     18 4E 85 F1 | 	sub	fp, #24
32520     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
32524     68 01 90 ED |  if_be	jmp	#LR__4963
32528     08 4E 05 F1 | 	add	fp, #8
3252c     A7 18 02 FB | 	rdlong	arg04, fp
32530     10 4E 05 F1 | 	add	fp, #16
32534     A7 16 02 FB | 	rdlong	arg03, fp
32538     0B 19 82 F1 | 	sub	arg04, arg03
3253c     10 4E 85 F1 | 	sub	fp, #16
32540     A7 18 62 FC | 	wrlong	arg04, fp
32544     04 4E 85 F1 | 	sub	fp, #4
32548     A7 18 02 FB | 	rdlong	arg04, fp
3254c     0C FB 01 F6 | 	mov	result1, arg04
32550     14 18 06 F1 | 	add	arg04, #20
32554     0C 19 02 FB | 	rdlong	arg04, arg04
32558     14 4E 05 F1 | 	add	fp, #20
3255c     A7 16 02 FB | 	rdlong	arg03, fp
32560     0B 19 02 F1 | 	add	arg04, arg03
32564     14 FA 05 F1 | 	add	result1, #20
32568     FD 18 62 FC | 	wrlong	arg04, result1
3256c     14 4E 85 F1 | 	sub	fp, #20
32570     A7 16 02 FB | 	rdlong	arg03, fp
32574     04 4E 85 F1 | 	sub	fp, #4
32578     10 16 06 F1 | 	add	arg03, #16
3257c     0B 17 C2 FA | 	rdbyte	arg03, arg03
32580     02 16 CE F7 | 	test	arg03, #2 wz
32584     3C 00 90 AD |  if_e	jmp	#LR__4958
32588     04 4E 05 F1 | 	add	fp, #4
3258c     A7 12 02 FB | 	rdlong	arg01, fp
32590     10 4E 05 F1 | 	add	fp, #16
32594     A7 14 02 FB | 	rdlong	arg02, fp
32598     14 4E 85 F1 | 	sub	fp, #20
3259c     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
325a0     14 4E 05 F1 | 	add	fp, #20
325a4     A7 FA 61 FC | 	wrlong	result1, fp
325a8     00 FA 4D F2 | 	cmps	result1, #0 wz
325ac     14 4E 85 F1 | 	sub	fp, #20
325b0     08 4E 05 A1 |  if_e	add	fp, #8
325b4     A7 00 68 AC |  if_e	wrlong	#0, fp
325b8     08 4E 85 A1 |  if_e	sub	fp, #8
325bc                 | ' 							ofs = 0; break;
325bc     D0 00 90 AD |  if_e	jmp	#LR__4963
325c0     24 00 90 FD | 	jmp	#LR__4959
325c4                 | LR__4958
325c4     04 4E 05 F1 | 	add	fp, #4
325c8     A7 12 02 FB | 	rdlong	arg01, fp
325cc     10 4E 05 F1 | 	add	fp, #16
325d0     A7 14 02 FB | 	rdlong	arg02, fp
325d4     14 4E 85 F1 | 	sub	fp, #20
325d8     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
325dc     14 4E 05 F1 | 	add	fp, #20
325e0     A7 FA 61 FC | 	wrlong	result1, fp
325e4     14 4E 85 F1 | 	sub	fp, #20
325e8                 | LR__4959
325e8     14 4E 05 F1 | 	add	fp, #20
325ec     A7 16 02 FB | 	rdlong	arg03, fp
325f0     14 4E 85 F1 | 	sub	fp, #20
325f4     FF FF 7F FF 
325f8     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
325fc     1C 00 90 5D |  if_ne	jmp	#LR__4960
32600     04 4E 05 F1 | 	add	fp, #4
32604     A7 16 02 FB | 	rdlong	arg03, fp
32608     04 4E 85 F1 | 	sub	fp, #4
3260c     11 16 06 F1 | 	add	arg03, #17
32610     0B 03 48 FC | 	wrbyte	#1, arg03
32614     01 FA 05 F6 | 	mov	result1, #1
32618     D0 02 90 FD | 	jmp	#LR__4973
3261c                 | LR__4960
3261c     14 4E 05 F1 | 	add	fp, #20
32620     A7 16 02 FB | 	rdlong	arg03, fp
32624     14 4E 85 F1 | 	sub	fp, #20
32628     02 16 16 F2 | 	cmp	arg03, #2 wc
3262c     24 00 90 CD |  if_b	jmp	#LR__4961
32630     10 4E 05 F1 | 	add	fp, #16
32634     A7 18 02 FB | 	rdlong	arg04, fp
32638     04 4E 05 F1 | 	add	fp, #4
3263c     A7 16 02 FB | 	rdlong	arg03, fp
32640     14 4E 85 F1 | 	sub	fp, #20
32644     18 18 06 F1 | 	add	arg04, #24
32648     0C 19 02 FB | 	rdlong	arg04, arg04
3264c     0C 17 12 F2 | 	cmp	arg03, arg04 wc
32650     1C 00 90 CD |  if_b	jmp	#LR__4962
32654                 | LR__4961
32654     04 4E 05 F1 | 	add	fp, #4
32658     A7 16 02 FB | 	rdlong	arg03, fp
3265c     04 4E 85 F1 | 	sub	fp, #4
32660     11 16 06 F1 | 	add	arg03, #17
32664     0B 05 48 FC | 	wrbyte	#2, arg03
32668     02 FA 05 F6 | 	mov	result1, #2
3266c     7C 02 90 FD | 	jmp	#LR__4973
32670                 | LR__4962
32670     04 4E 05 F1 | 	add	fp, #4
32674     A7 18 02 FB | 	rdlong	arg04, fp
32678     10 4E 05 F1 | 	add	fp, #16
3267c     A7 16 02 FB | 	rdlong	arg03, fp
32680     14 4E 85 F1 | 	sub	fp, #20
32684     18 18 06 F1 | 	add	arg04, #24
32688     0C 17 62 FC | 	wrlong	arg03, arg04
3268c     7C FE 9F FD | 	jmp	#LR__4957
32690                 | LR__4963
32690     04 4E 05 F1 | 	add	fp, #4
32694     A7 16 02 FB | 	rdlong	arg03, fp
32698     0B 13 02 F6 | 	mov	arg01, arg03
3269c     14 16 06 F1 | 	add	arg03, #20
326a0     0B 15 02 FB | 	rdlong	arg02, arg03
326a4     04 4E 05 F1 | 	add	fp, #4
326a8     A7 16 02 FB | 	rdlong	arg03, fp
326ac     0B 15 02 F1 | 	add	arg02, arg03
326b0     14 12 06 F1 | 	add	arg01, #20
326b4     09 15 62 FC | 	wrlong	arg02, arg01
326b8     A7 16 02 FB | 	rdlong	arg03, fp
326bc     08 4E 85 F1 | 	sub	fp, #8
326c0     FF 17 CE F7 | 	test	arg03, #511 wz
326c4     6C 00 90 AD |  if_e	jmp	#LR__4965
326c8     10 4E 05 F1 | 	add	fp, #16
326cc     A7 12 02 FB | 	rdlong	arg01, fp
326d0     04 4E 05 F1 | 	add	fp, #4
326d4     A7 14 02 FB | 	rdlong	arg02, fp
326d8     14 4E 85 F1 | 	sub	fp, #20
326dc     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
326e0     1C 4E 05 F1 | 	add	fp, #28
326e4     A7 FA 61 FC | 	wrlong	result1, fp
326e8     1C 4E 85 F1 | 	sub	fp, #28
326ec     00 FA 0D F2 | 	cmp	result1, #0 wz
326f0     1C 00 90 5D |  if_ne	jmp	#LR__4964
326f4     04 4E 05 F1 | 	add	fp, #4
326f8     A7 16 02 FB | 	rdlong	arg03, fp
326fc     04 4E 85 F1 | 	sub	fp, #4
32700     11 16 06 F1 | 	add	arg03, #17
32704     0B 05 48 FC | 	wrbyte	#2, arg03
32708     02 FA 05 F6 | 	mov	result1, #2
3270c     DC 01 90 FD | 	jmp	#LR__4973
32710                 | LR__4964
32710     1C 4E 05 F1 | 	add	fp, #28
32714     A7 18 02 FB | 	rdlong	arg04, fp
32718     14 4E 85 F1 | 	sub	fp, #20
3271c     A7 16 02 FB | 	rdlong	arg03, fp
32720     09 16 46 F0 | 	shr	arg03, #9
32724     0B 19 02 F1 | 	add	arg04, arg03
32728     14 4E 05 F1 | 	add	fp, #20
3272c     A7 18 62 FC | 	wrlong	arg04, fp
32730     1C 4E 85 F1 | 	sub	fp, #28
32734                 | LR__4965
32734                 | LR__4966
32734                 | LR__4967
32734     04 4E 05 F1 | 	add	fp, #4
32738     A7 18 02 FB | 	rdlong	arg04, fp
3273c     0C 17 02 F6 | 	mov	arg03, arg04
32740     04 4E 85 F1 | 	sub	fp, #4
32744     14 16 06 F1 | 	add	arg03, #20
32748     0B 17 02 FB | 	rdlong	arg03, arg03
3274c     0C 18 06 F1 | 	add	arg04, #12
32750     0C 19 02 FB | 	rdlong	arg04, arg04
32754     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
32758     3C 00 90 ED |  if_be	jmp	#LR__4968
3275c     04 4E 05 F1 | 	add	fp, #4
32760     A7 18 02 FB | 	rdlong	arg04, fp
32764     0C 17 02 F6 | 	mov	arg03, arg04
32768     14 18 06 F1 | 	add	arg04, #20
3276c     0C 19 02 FB | 	rdlong	arg04, arg04
32770     0C 16 06 F1 | 	add	arg03, #12
32774     0B 19 62 FC | 	wrlong	arg04, arg03
32778     A7 18 02 FB | 	rdlong	arg04, fp
3277c     0C 17 02 F6 | 	mov	arg03, arg04
32780     04 4E 85 F1 | 	sub	fp, #4
32784     10 18 06 F1 | 	add	arg04, #16
32788     0C 19 C2 FA | 	rdbyte	arg04, arg04
3278c     40 18 46 F5 | 	or	arg04, #64
32790     10 16 06 F1 | 	add	arg03, #16
32794     0B 19 42 FC | 	wrbyte	arg04, arg03
32798                 | LR__4968
32798     04 4E 05 F1 | 	add	fp, #4
3279c     A7 16 02 FB | 	rdlong	arg03, fp
327a0     04 4E 85 F1 | 	sub	fp, #4
327a4     14 16 06 F1 | 	add	arg03, #20
327a8     0B 17 02 FB | 	rdlong	arg03, arg03
327ac     FF 17 CE F7 | 	test	arg03, #511 wz
327b0     2C 01 90 AD |  if_e	jmp	#LR__4972
327b4     04 4E 05 F1 | 	add	fp, #4
327b8     A7 18 02 FB | 	rdlong	arg04, fp
327bc     18 4E 05 F1 | 	add	fp, #24
327c0     A7 16 02 FB | 	rdlong	arg03, fp
327c4     1C 4E 85 F1 | 	sub	fp, #28
327c8     1C 18 06 F1 | 	add	arg04, #28
327cc     0C 19 02 FB | 	rdlong	arg04, arg04
327d0     0C 17 0A F2 | 	cmp	arg03, arg04 wz
327d4     08 01 90 AD |  if_e	jmp	#LR__4972
327d8     04 4E 05 F1 | 	add	fp, #4
327dc     A7 16 02 FB | 	rdlong	arg03, fp
327e0     04 4E 85 F1 | 	sub	fp, #4
327e4     10 16 06 F1 | 	add	arg03, #16
327e8     0B 17 C2 FA | 	rdbyte	arg03, arg03
327ec     80 16 CE F7 | 	test	arg03, #128 wz
327f0     7C 00 90 AD |  if_e	jmp	#LR__4970
327f4     10 4E 05 F1 | 	add	fp, #16
327f8     A7 16 02 FB | 	rdlong	arg03, fp
327fc     01 16 06 F1 | 	add	arg03, #1
32800     0B 13 C2 FA | 	rdbyte	arg01, arg03
32804     0C 4E 85 F1 | 	sub	fp, #12
32808     A7 16 02 FB | 	rdlong	arg03, fp
3280c     0B 15 02 F6 | 	mov	arg02, arg03
32810     28 14 06 F1 | 	add	arg02, #40
32814     04 4E 85 F1 | 	sub	fp, #4
32818     1C 16 06 F1 | 	add	arg03, #28
3281c     0B 17 02 FB | 	rdlong	arg03, arg03
32820     01 18 06 F6 | 	mov	arg04, #1
32824     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
32828     00 FA 0D F2 | 	cmp	result1, #0 wz
3282c     1C 00 90 AD |  if_e	jmp	#LR__4969
32830     04 4E 05 F1 | 	add	fp, #4
32834     A7 16 02 FB | 	rdlong	arg03, fp
32838     04 4E 85 F1 | 	sub	fp, #4
3283c     11 16 06 F1 | 	add	arg03, #17
32840     0B 03 48 FC | 	wrbyte	#1, arg03
32844     01 FA 05 F6 | 	mov	result1, #1
32848     A0 00 90 FD | 	jmp	#LR__4973
3284c                 | LR__4969
3284c     04 4E 05 F1 | 	add	fp, #4
32850     A7 18 02 FB | 	rdlong	arg04, fp
32854     0C 17 02 F6 | 	mov	arg03, arg04
32858     04 4E 85 F1 | 	sub	fp, #4
3285c     10 18 06 F1 | 	add	arg04, #16
32860     0C 19 C2 FA | 	rdbyte	arg04, arg04
32864     7F 18 06 F5 | 	and	arg04, #127
32868     10 16 06 F1 | 	add	arg03, #16
3286c     0B 19 42 FC | 	wrbyte	arg04, arg03
32870                 | LR__4970
32870     10 4E 05 F1 | 	add	fp, #16
32874     A7 16 02 FB | 	rdlong	arg03, fp
32878     01 16 06 F1 | 	add	arg03, #1
3287c     0B 13 C2 FA | 	rdbyte	arg01, arg03
32880     0C 4E 85 F1 | 	sub	fp, #12
32884     A7 14 02 FB | 	rdlong	arg02, fp
32888     28 14 06 F1 | 	add	arg02, #40
3288c     18 4E 05 F1 | 	add	fp, #24
32890     A7 16 02 FB | 	rdlong	arg03, fp
32894     1C 4E 85 F1 | 	sub	fp, #28
32898     01 18 06 F6 | 	mov	arg04, #1
3289c     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
328a0     00 FA 0D F2 | 	cmp	result1, #0 wz
328a4     1C 00 90 AD |  if_e	jmp	#LR__4971
328a8     04 4E 05 F1 | 	add	fp, #4
328ac     A7 16 02 FB | 	rdlong	arg03, fp
328b0     04 4E 85 F1 | 	sub	fp, #4
328b4     11 16 06 F1 | 	add	arg03, #17
328b8     0B 03 48 FC | 	wrbyte	#1, arg03
328bc     01 FA 05 F6 | 	mov	result1, #1
328c0     28 00 90 FD | 	jmp	#LR__4973
328c4                 | LR__4971
328c4     04 4E 05 F1 | 	add	fp, #4
328c8     A7 18 02 FB | 	rdlong	arg04, fp
328cc     18 4E 05 F1 | 	add	fp, #24
328d0     A7 16 02 FB | 	rdlong	arg03, fp
328d4     1C 4E 85 F1 | 	sub	fp, #28
328d8     1C 18 06 F1 | 	add	arg04, #28
328dc     0C 17 62 FC | 	wrlong	arg03, arg04
328e0                 | LR__4972
328e0                 | ' 
328e0                 | ' 			fp->sect = nsect;
328e0                 | ' 		}
328e0                 | ' 	}
328e0                 | ' 
328e0                 | ' 	return res ;
328e0     0C 4E 05 F1 | 	add	fp, #12
328e4     A7 FA 01 FB | 	rdlong	result1, fp
328e8     0C 4E 85 F1 | 	sub	fp, #12
328ec                 | LR__4973
328ec     A7 F0 03 F6 | 	mov	ptra, fp
328f0     B2 00 A0 FD | 	call	#popregs_
328f4                 | _fatfs_cc_f_lseek_ret
328f4     2D 00 64 FD | 	ret
328f8                 | 
328f8                 | _fatfs_cc_f_opendir
328f8     01 4A 05 F6 | 	mov	COUNT_, #1
328fc     A8 00 A0 FD | 	call	#pushregs_
32900     14 F0 07 F1 | 	add	ptra, #20
32904     04 4E 05 F1 | 	add	fp, #4
32908     A7 12 62 FC | 	wrlong	arg01, fp
3290c     04 4E 05 F1 | 	add	fp, #4
32910     A7 14 62 FC | 	wrlong	arg02, fp
32914     04 4E 85 F1 | 	sub	fp, #4
32918     A7 16 0A FB | 	rdlong	arg03, fp wz
3291c     04 4E 85 F1 | 	sub	fp, #4
32920     09 FA 05 A6 |  if_e	mov	result1, #9
32924     78 01 90 AD |  if_e	jmp	#LR__4986
32928     08 4E 05 F1 | 	add	fp, #8
3292c     A7 12 02 F6 | 	mov	arg01, fp
32930     08 4E 05 F1 | 	add	fp, #8
32934     A7 14 02 F6 | 	mov	arg02, fp
32938     10 4E 85 F1 | 	sub	fp, #16
3293c     00 16 06 F6 | 	mov	arg03, #0
32940     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
32944     0C 4E 05 F1 | 	add	fp, #12
32948     A7 FA 61 FC | 	wrlong	result1, fp
3294c     0C 4E 85 F1 | 	sub	fp, #12
32950     00 FA 0D F2 | 	cmp	result1, #0 wz
32954     20 01 90 5D |  if_ne	jmp	#LR__4985
32958     04 4E 05 F1 | 	add	fp, #4
3295c     A7 16 02 FB | 	rdlong	arg03, fp
32960     0C 4E 05 F1 | 	add	fp, #12
32964     A7 FA 01 FB | 	rdlong	result1, fp
32968     0B FB 61 FC | 	wrlong	result1, arg03
3296c     0C 4E 85 F1 | 	sub	fp, #12
32970     A7 12 02 FB | 	rdlong	arg01, fp
32974     04 4E 05 F1 | 	add	fp, #4
32978     A7 14 02 FB | 	rdlong	arg02, fp
3297c     08 4E 85 F1 | 	sub	fp, #8
32980     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
32984     0C 4E 05 F1 | 	add	fp, #12
32988     A7 FA 61 FC | 	wrlong	result1, fp
3298c     0C 4E 85 F1 | 	sub	fp, #12
32990     00 FA 0D F2 | 	cmp	result1, #0 wz
32994     C4 00 90 5D |  if_ne	jmp	#LR__4984
32998     04 4E 05 F1 | 	add	fp, #4
3299c     A7 16 02 FB | 	rdlong	arg03, fp
329a0     04 4E 85 F1 | 	sub	fp, #4
329a4     2B 16 06 F1 | 	add	arg03, #43
329a8     0B 17 C2 FA | 	rdbyte	arg03, arg03
329ac     80 16 CE F7 | 	test	arg03, #128 wz
329b0     58 00 90 5D |  if_ne	jmp	#LR__4982
329b4     04 4E 05 F1 | 	add	fp, #4
329b8     A7 16 02 FB | 	rdlong	arg03, fp
329bc     04 4E 85 F1 | 	sub	fp, #4
329c0     06 16 06 F1 | 	add	arg03, #6
329c4     0B 17 C2 FA | 	rdbyte	arg03, arg03
329c8     10 16 CE F7 | 	test	arg03, #16 wz
329cc     30 00 90 AD |  if_e	jmp	#LR__4980
329d0     04 4E 05 F1 | 	add	fp, #4
329d4     A7 16 02 FB | 	rdlong	arg03, fp
329d8     0B 27 02 F6 | 	mov	local01, arg03
329dc     0C 4E 05 F1 | 	add	fp, #12
329e0     A7 12 02 FB | 	rdlong	arg01, fp
329e4     10 4E 85 F1 | 	sub	fp, #16
329e8     1C 16 06 F1 | 	add	arg03, #28
329ec     0B 15 02 FB | 	rdlong	arg02, arg03
329f0     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
329f4     08 26 06 F1 | 	add	local01, #8
329f8     13 FB 61 FC | 	wrlong	result1, local01
329fc     0C 00 90 FD | 	jmp	#LR__4981
32a00                 | LR__4980
32a00     0C 4E 05 F1 | 	add	fp, #12
32a04     A7 0A 68 FC | 	wrlong	#5, fp
32a08     0C 4E 85 F1 | 	sub	fp, #12
32a0c                 | LR__4981
32a0c                 | LR__4982
32a0c     0C 4E 05 F1 | 	add	fp, #12
32a10     A7 26 0A FB | 	rdlong	local01, fp wz
32a14     0C 4E 85 F1 | 	sub	fp, #12
32a18     40 00 90 5D |  if_ne	jmp	#LR__4983
32a1c     04 4E 05 F1 | 	add	fp, #4
32a20     A7 26 02 FB | 	rdlong	local01, fp
32a24     0C 4E 05 F1 | 	add	fp, #12
32a28     A7 16 02 FB | 	rdlong	arg03, fp
32a2c     06 16 06 F1 | 	add	arg03, #6
32a30     0B 17 E2 FA | 	rdword	arg03, arg03
32a34     04 26 06 F1 | 	add	local01, #4
32a38     13 17 52 FC | 	wrword	arg03, local01
32a3c     0C 4E 85 F1 | 	sub	fp, #12
32a40     A7 12 02 FB | 	rdlong	arg01, fp
32a44     04 4E 85 F1 | 	sub	fp, #4
32a48     00 14 06 F6 | 	mov	arg02, #0
32a4c     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
32a50     0C 4E 05 F1 | 	add	fp, #12
32a54     A7 FA 61 FC | 	wrlong	result1, fp
32a58     0C 4E 85 F1 | 	sub	fp, #12
32a5c                 | LR__4983
32a5c                 | LR__4984
32a5c     0C 4E 05 F1 | 	add	fp, #12
32a60     A7 26 02 FB | 	rdlong	local01, fp
32a64     0C 4E 85 F1 | 	sub	fp, #12
32a68     04 26 0E F2 | 	cmp	local01, #4 wz
32a6c     0C 4E 05 A1 |  if_e	add	fp, #12
32a70     A7 0A 68 AC |  if_e	wrlong	#5, fp
32a74     0C 4E 85 A1 |  if_e	sub	fp, #12
32a78                 | LR__4985
32a78     0C 4E 05 F1 | 	add	fp, #12
32a7c     A7 26 0A FB | 	rdlong	local01, fp wz
32a80     0C 4E 85 F1 | 	sub	fp, #12
32a84     04 4E 05 51 |  if_ne	add	fp, #4
32a88     A7 26 02 5B |  if_ne	rdlong	local01, fp
32a8c     04 4E 85 51 |  if_ne	sub	fp, #4
32a90     13 01 68 5C |  if_ne	wrlong	#0, local01
32a94                 | ' 
32a94                 | ' 	return res ;
32a94     0C 4E 05 F1 | 	add	fp, #12
32a98     A7 FA 01 FB | 	rdlong	result1, fp
32a9c     0C 4E 85 F1 | 	sub	fp, #12
32aa0                 | LR__4986
32aa0     A7 F0 03 F6 | 	mov	ptra, fp
32aa4     B2 00 A0 FD | 	call	#popregs_
32aa8                 | _fatfs_cc_f_opendir_ret
32aa8     2D 00 64 FD | 	ret
32aac                 | 
32aac                 | _fatfs_cc_f_closedir
32aac     00 4A 05 F6 | 	mov	COUNT_, #0
32ab0     A8 00 A0 FD | 	call	#pushregs_
32ab4     10 F0 07 F1 | 	add	ptra, #16
32ab8     04 4E 05 F1 | 	add	fp, #4
32abc     A7 12 62 FC | 	wrlong	arg01, fp
32ac0     08 4E 05 F1 | 	add	fp, #8
32ac4     A7 14 02 F6 | 	mov	arg02, fp
32ac8     0C 4E 85 F1 | 	sub	fp, #12
32acc     C0 DD BF FD | 	call	#_fatfs_cc_validate
32ad0     08 4E 05 F1 | 	add	fp, #8
32ad4     A7 FA 61 FC | 	wrlong	result1, fp
32ad8     08 4E 85 F1 | 	sub	fp, #8
32adc     00 FA 0D F2 | 	cmp	result1, #0 wz
32ae0     04 4E 05 A1 |  if_e	add	fp, #4
32ae4     A7 FA 01 AB |  if_e	rdlong	result1, fp
32ae8     04 4E 85 A1 |  if_e	sub	fp, #4
32aec     FD 00 68 AC |  if_e	wrlong	#0, result1
32af0                 | ' 
32af0                 | ' 
32af0                 | ' 
32af0                 | ' 
32af0                 | ' 		dp->obj.fs = 0;
32af0                 | ' #line 4633 "ff.c"
32af0                 | ' 	}
32af0                 | ' 	return res;
32af0     08 4E 05 F1 | 	add	fp, #8
32af4     A7 FA 01 FB | 	rdlong	result1, fp
32af8     08 4E 85 F1 | 	sub	fp, #8
32afc     A7 F0 03 F6 | 	mov	ptra, fp
32b00     B2 00 A0 FD | 	call	#popregs_
32b04                 | _fatfs_cc_f_closedir_ret
32b04     2D 00 64 FD | 	ret
32b08                 | 
32b08                 | _fatfs_cc_f_readdir
32b08     00 4A 05 F6 | 	mov	COUNT_, #0
32b0c     A8 00 A0 FD | 	call	#pushregs_
32b10     14 F0 07 F1 | 	add	ptra, #20
32b14     04 4E 05 F1 | 	add	fp, #4
32b18     A7 12 62 FC | 	wrlong	arg01, fp
32b1c     04 4E 05 F1 | 	add	fp, #4
32b20     A7 14 62 FC | 	wrlong	arg02, fp
32b24     04 4E 85 F1 | 	sub	fp, #4
32b28     A7 12 02 FB | 	rdlong	arg01, fp
32b2c     0C 4E 05 F1 | 	add	fp, #12
32b30     A7 14 02 F6 | 	mov	arg02, fp
32b34     10 4E 85 F1 | 	sub	fp, #16
32b38     54 DD BF FD | 	call	#_fatfs_cc_validate
32b3c     0C 4E 05 F1 | 	add	fp, #12
32b40     A7 FA 61 FC | 	wrlong	result1, fp
32b44     0C 4E 85 F1 | 	sub	fp, #12
32b48     00 FA 0D F2 | 	cmp	result1, #0 wz
32b4c     BC 00 90 5D |  if_ne	jmp	#LR__4993
32b50     08 4E 05 F1 | 	add	fp, #8
32b54     A7 FA 09 FB | 	rdlong	result1, fp wz
32b58     08 4E 85 F1 | 	sub	fp, #8
32b5c     24 00 90 5D |  if_ne	jmp	#LR__4990
32b60     04 4E 05 F1 | 	add	fp, #4
32b64     A7 12 02 FB | 	rdlong	arg01, fp
32b68     04 4E 85 F1 | 	sub	fp, #4
32b6c     00 14 06 F6 | 	mov	arg02, #0
32b70     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
32b74     0C 4E 05 F1 | 	add	fp, #12
32b78     A7 FA 61 FC | 	wrlong	result1, fp
32b7c     0C 4E 85 F1 | 	sub	fp, #12
32b80     88 00 90 FD | 	jmp	#LR__4992
32b84                 | LR__4990
32b84     04 4E 05 F1 | 	add	fp, #4
32b88     A7 12 02 FB | 	rdlong	arg01, fp
32b8c     04 4E 85 F1 | 	sub	fp, #4
32b90     00 14 06 F6 | 	mov	arg02, #0
32b94     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
32b98     0C 4E 05 F1 | 	add	fp, #12
32b9c     A7 FA 61 FC | 	wrlong	result1, fp
32ba0     0C 4E 85 F1 | 	sub	fp, #12
32ba4     04 FA 0D F2 | 	cmp	result1, #4 wz
32ba8     0C 4E 05 A1 |  if_e	add	fp, #12
32bac     A7 00 68 AC |  if_e	wrlong	#0, fp
32bb0     0C 4E 85 A1 |  if_e	sub	fp, #12
32bb4     0C 4E 05 F1 | 	add	fp, #12
32bb8     A7 FA 09 FB | 	rdlong	result1, fp wz
32bbc     0C 4E 85 F1 | 	sub	fp, #12
32bc0     48 00 90 5D |  if_ne	jmp	#LR__4991
32bc4     04 4E 05 F1 | 	add	fp, #4
32bc8     A7 12 02 FB | 	rdlong	arg01, fp
32bcc     04 4E 05 F1 | 	add	fp, #4
32bd0     A7 14 02 FB | 	rdlong	arg02, fp
32bd4     08 4E 85 F1 | 	sub	fp, #8
32bd8     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
32bdc     04 4E 05 F1 | 	add	fp, #4
32be0     A7 12 02 FB | 	rdlong	arg01, fp
32be4     04 4E 85 F1 | 	sub	fp, #4
32be8     00 14 06 F6 | 	mov	arg02, #0
32bec     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
32bf0     0C 4E 05 F1 | 	add	fp, #12
32bf4     A7 FA 61 FC | 	wrlong	result1, fp
32bf8     0C 4E 85 F1 | 	sub	fp, #12
32bfc     04 FA 0D F2 | 	cmp	result1, #4 wz
32c00     0C 4E 05 A1 |  if_e	add	fp, #12
32c04     A7 00 68 AC |  if_e	wrlong	#0, fp
32c08     0C 4E 85 A1 |  if_e	sub	fp, #12
32c0c                 | LR__4991
32c0c                 | LR__4992
32c0c                 | LR__4993
32c0c                 | ' 			}
32c0c                 | ' 			;
32c0c                 | ' 		}
32c0c                 | ' 	}
32c0c                 | ' 	return res ;
32c0c     0C 4E 05 F1 | 	add	fp, #12
32c10     A7 FA 01 FB | 	rdlong	result1, fp
32c14     0C 4E 85 F1 | 	sub	fp, #12
32c18     A7 F0 03 F6 | 	mov	ptra, fp
32c1c     B2 00 A0 FD | 	call	#popregs_
32c20                 | _fatfs_cc_f_readdir_ret
32c20     2D 00 64 FD | 	ret
32c24                 | 
32c24                 | _fatfs_cc_f_stat
32c24     00 4A 05 F6 | 	mov	COUNT_, #0
32c28     A8 00 A0 FD | 	call	#pushregs_
32c2c     40 F0 07 F1 | 	add	ptra, #64
32c30     04 4E 05 F1 | 	add	fp, #4
32c34     A7 12 62 FC | 	wrlong	arg01, fp
32c38     04 4E 05 F1 | 	add	fp, #4
32c3c     A7 14 62 FC | 	wrlong	arg02, fp
32c40     04 4E 85 F1 | 	sub	fp, #4
32c44     A7 12 02 F6 | 	mov	arg01, fp
32c48     0C 4E 05 F1 | 	add	fp, #12
32c4c     A7 14 02 F6 | 	mov	arg02, fp
32c50     10 4E 85 F1 | 	sub	fp, #16
32c54     00 16 06 F6 | 	mov	arg03, #0
32c58     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
32c5c     0C 4E 05 F1 | 	add	fp, #12
32c60     A7 FA 61 FC | 	wrlong	result1, fp
32c64     0C 4E 85 F1 | 	sub	fp, #12
32c68     00 FA 0D F2 | 	cmp	result1, #0 wz
32c6c     74 00 90 5D |  if_ne	jmp	#LR__5003
32c70     10 4E 05 F1 | 	add	fp, #16
32c74     A7 12 02 F6 | 	mov	arg01, fp
32c78     0C 4E 85 F1 | 	sub	fp, #12
32c7c     A7 14 02 FB | 	rdlong	arg02, fp
32c80     04 4E 85 F1 | 	sub	fp, #4
32c84     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
32c88     0C 4E 05 F1 | 	add	fp, #12
32c8c     A7 FA 61 FC | 	wrlong	result1, fp
32c90     0C 4E 85 F1 | 	sub	fp, #12
32c94     00 FA 0D F2 | 	cmp	result1, #0 wz
32c98     48 00 90 5D |  if_ne	jmp	#LR__5002
32c9c     3B 4E 05 F1 | 	add	fp, #59
32ca0     A7 FA C1 FA | 	rdbyte	result1, fp
32ca4     3B 4E 85 F1 | 	sub	fp, #59
32ca8     80 FA CD F7 | 	test	result1, #128 wz
32cac     0C 4E 05 51 |  if_ne	add	fp, #12
32cb0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
32cb4     0C 4E 85 51 |  if_ne	sub	fp, #12
32cb8     28 00 90 5D |  if_ne	jmp	#LR__5001
32cbc     08 4E 05 F1 | 	add	fp, #8
32cc0     A7 FA 09 FB | 	rdlong	result1, fp wz
32cc4     08 4E 85 F1 | 	sub	fp, #8
32cc8     18 00 90 AD |  if_e	jmp	#LR__5000
32ccc     10 4E 05 F1 | 	add	fp, #16
32cd0     A7 12 02 F6 | 	mov	arg01, fp
32cd4     08 4E 85 F1 | 	sub	fp, #8
32cd8     A7 14 02 FB | 	rdlong	arg02, fp
32cdc     08 4E 85 F1 | 	sub	fp, #8
32ce0     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
32ce4                 | LR__5000
32ce4                 | LR__5001
32ce4                 | LR__5002
32ce4                 | LR__5003
32ce4                 | ' 			}
32ce4                 | ' 		}
32ce4                 | ' 		;
32ce4                 | ' 	}
32ce4                 | ' 
32ce4                 | ' 	return res ;
32ce4     0C 4E 05 F1 | 	add	fp, #12
32ce8     A7 FA 01 FB | 	rdlong	result1, fp
32cec     0C 4E 85 F1 | 	sub	fp, #12
32cf0     A7 F0 03 F6 | 	mov	ptra, fp
32cf4     B2 00 A0 FD | 	call	#popregs_
32cf8                 | _fatfs_cc_f_stat_ret
32cf8     2D 00 64 FD | 	ret
32cfc                 | 
32cfc                 | _fatfs_cc_f_unlink
32cfc     00 4A 05 F6 | 	mov	COUNT_, #0
32d00     A8 00 A0 FD | 	call	#pushregs_
32d04     74 F0 07 F1 | 	add	ptra, #116
32d08     04 4E 05 F1 | 	add	fp, #4
32d0c     A7 12 62 FC | 	wrlong	arg01, fp
32d10     68 4E 05 F1 | 	add	fp, #104
32d14     A7 00 68 FC | 	wrlong	#0, fp
32d18     68 4E 85 F1 | 	sub	fp, #104
32d1c     A7 12 02 F6 | 	mov	arg01, fp
32d20     6C 4E 05 F1 | 	add	fp, #108
32d24     A7 14 02 F6 | 	mov	arg02, fp
32d28     70 4E 85 F1 | 	sub	fp, #112
32d2c     02 16 06 F6 | 	mov	arg03, #2
32d30     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
32d34     08 4E 05 F1 | 	add	fp, #8
32d38     A7 FA 61 FC | 	wrlong	result1, fp
32d3c     08 4E 85 F1 | 	sub	fp, #8
32d40     00 FA 0D F2 | 	cmp	result1, #0 wz
32d44     E4 01 90 5D |  if_ne	jmp	#LR__5018
32d48     70 4E 05 F1 | 	add	fp, #112
32d4c     A7 16 02 FB | 	rdlong	arg03, fp
32d50     64 4E 85 F1 | 	sub	fp, #100
32d54     A7 16 62 FC | 	wrlong	arg03, fp
32d58     A7 12 02 F6 | 	mov	arg01, fp
32d5c     08 4E 85 F1 | 	sub	fp, #8
32d60     A7 14 02 FB | 	rdlong	arg02, fp
32d64     04 4E 85 F1 | 	sub	fp, #4
32d68     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
32d6c     08 4E 05 F1 | 	add	fp, #8
32d70     A7 FA 61 FC | 	wrlong	result1, fp
32d74     00 FA 4D F2 | 	cmps	result1, #0 wz
32d78     08 4E 85 F1 | 	sub	fp, #8
32d7c     AC 01 90 5D |  if_ne	jmp	#LR__5017
32d80     37 4E 05 F1 | 	add	fp, #55
32d84     A7 FA C1 FA | 	rdbyte	result1, fp
32d88     37 4E 85 F1 | 	sub	fp, #55
32d8c     80 FA CD F7 | 	test	result1, #128 wz
32d90     08 4E 05 51 |  if_ne	add	fp, #8
32d94     A7 0C 68 5C |  if_ne	wrlong	#6, fp
32d98     08 4E 85 51 |  if_ne	sub	fp, #8
32d9c     1C 00 90 5D |  if_ne	jmp	#LR__5010
32da0     12 4E 05 F1 | 	add	fp, #18
32da4     A7 FA C1 FA | 	rdbyte	result1, fp
32da8     12 4E 85 F1 | 	sub	fp, #18
32dac     01 FA CD F7 | 	test	result1, #1 wz
32db0     08 4E 05 51 |  if_ne	add	fp, #8
32db4     A7 0E 68 5C |  if_ne	wrlong	#7, fp
32db8     08 4E 85 51 |  if_ne	sub	fp, #8
32dbc                 | LR__5010
32dbc     08 4E 05 F1 | 	add	fp, #8
32dc0     A7 FA 09 FB | 	rdlong	result1, fp wz
32dc4     08 4E 85 F1 | 	sub	fp, #8
32dc8     C8 00 90 5D |  if_ne	jmp	#LR__5013
32dcc     70 4E 05 F1 | 	add	fp, #112
32dd0     A7 12 02 FB | 	rdlong	arg01, fp
32dd4     48 4E 85 F1 | 	sub	fp, #72
32dd8     A7 14 02 FB | 	rdlong	arg02, fp
32ddc     28 4E 85 F1 | 	sub	fp, #40
32de0     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
32de4     6C 4E 05 F1 | 	add	fp, #108
32de8     A7 FA 61 FC | 	wrlong	result1, fp
32dec     5A 4E 85 F1 | 	sub	fp, #90
32df0     A7 FA C1 FA | 	rdbyte	result1, fp
32df4     12 4E 85 F1 | 	sub	fp, #18
32df8     10 FA CD F7 | 	test	result1, #16 wz
32dfc     94 00 90 AD |  if_e	jmp	#LR__5012
32e00     70 4E 05 F1 | 	add	fp, #112
32e04     A7 FA 01 FB | 	rdlong	result1, fp
32e08     34 4E 85 F1 | 	sub	fp, #52
32e0c     A7 FA 61 FC | 	wrlong	result1, fp
32e10     30 4E 05 F1 | 	add	fp, #48
32e14     A7 16 02 FB | 	rdlong	arg03, fp
32e18     28 4E 85 F1 | 	sub	fp, #40
32e1c     A7 16 62 FC | 	wrlong	arg03, fp
32e20     08 4E 85 F1 | 	sub	fp, #8
32e24     A7 12 02 F6 | 	mov	arg01, fp
32e28     3C 4E 85 F1 | 	sub	fp, #60
32e2c     00 14 06 F6 | 	mov	arg02, #0
32e30     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
32e34     08 4E 05 F1 | 	add	fp, #8
32e38     A7 FA 61 FC | 	wrlong	result1, fp
32e3c     08 4E 85 F1 | 	sub	fp, #8
32e40     00 FA 0D F2 | 	cmp	result1, #0 wz
32e44     4C 00 90 5D |  if_ne	jmp	#LR__5011
32e48     3C 4E 05 F1 | 	add	fp, #60
32e4c     A7 12 02 F6 | 	mov	arg01, fp
32e50     3C 4E 85 F1 | 	sub	fp, #60
32e54     00 14 06 F6 | 	mov	arg02, #0
32e58     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
32e5c     08 4E 05 F1 | 	add	fp, #8
32e60     A7 FA 61 FC | 	wrlong	result1, fp
32e64     00 FA 4D F2 | 	cmps	result1, #0 wz
32e68     08 4E 85 F1 | 	sub	fp, #8
32e6c     08 4E 05 A1 |  if_e	add	fp, #8
32e70     A7 0E 68 AC |  if_e	wrlong	#7, fp
32e74     08 4E 85 A1 |  if_e	sub	fp, #8
32e78     08 4E 05 F1 | 	add	fp, #8
32e7c     A7 FA 01 FB | 	rdlong	result1, fp
32e80     08 4E 85 F1 | 	sub	fp, #8
32e84     04 FA 0D F2 | 	cmp	result1, #4 wz
32e88     08 4E 05 A1 |  if_e	add	fp, #8
32e8c     A7 00 68 AC |  if_e	wrlong	#0, fp
32e90     08 4E 85 A1 |  if_e	sub	fp, #8
32e94                 | LR__5011
32e94                 | LR__5012
32e94                 | LR__5013
32e94     08 4E 05 F1 | 	add	fp, #8
32e98     A7 FA 09 FB | 	rdlong	result1, fp wz
32e9c     08 4E 85 F1 | 	sub	fp, #8
32ea0     88 00 90 5D |  if_ne	jmp	#LR__5016
32ea4     0C 4E 05 F1 | 	add	fp, #12
32ea8     A7 12 02 F6 | 	mov	arg01, fp
32eac     0C 4E 85 F1 | 	sub	fp, #12
32eb0     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
32eb4     08 4E 05 F1 | 	add	fp, #8
32eb8     A7 FA 61 FC | 	wrlong	result1, fp
32ebc     08 4E 85 F1 | 	sub	fp, #8
32ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
32ec4     38 00 90 5D |  if_ne	jmp	#LR__5014
32ec8     6C 4E 05 F1 | 	add	fp, #108
32ecc     A7 FA 09 FB | 	rdlong	result1, fp wz
32ed0     6C 4E 85 F1 | 	sub	fp, #108
32ed4     28 00 90 AD |  if_e	jmp	#LR__5014
32ed8     0C 4E 05 F1 | 	add	fp, #12
32edc     A7 12 02 F6 | 	mov	arg01, fp
32ee0     60 4E 05 F1 | 	add	fp, #96
32ee4     A7 14 02 FB | 	rdlong	arg02, fp
32ee8     6C 4E 85 F1 | 	sub	fp, #108
32eec     00 16 06 F6 | 	mov	arg03, #0
32ef0     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
32ef4     08 4E 05 F1 | 	add	fp, #8
32ef8     A7 FA 61 FC | 	wrlong	result1, fp
32efc     08 4E 85 F1 | 	sub	fp, #8
32f00                 | LR__5014
32f00     08 4E 05 F1 | 	add	fp, #8
32f04     A7 FA 09 FB | 	rdlong	result1, fp wz
32f08     08 4E 85 F1 | 	sub	fp, #8
32f0c     1C 00 90 5D |  if_ne	jmp	#LR__5015
32f10     70 4E 05 F1 | 	add	fp, #112
32f14     A7 12 02 FB | 	rdlong	arg01, fp
32f18     70 4E 85 F1 | 	sub	fp, #112
32f1c     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
32f20     08 4E 05 F1 | 	add	fp, #8
32f24     A7 FA 61 FC | 	wrlong	result1, fp
32f28     08 4E 85 F1 | 	sub	fp, #8
32f2c                 | LR__5015
32f2c                 | LR__5016
32f2c                 | LR__5017
32f2c                 | LR__5018
32f2c                 | ' 			}
32f2c                 | ' 		}
32f2c                 | ' 		;
32f2c                 | ' 	}
32f2c                 | ' 
32f2c                 | ' 	return res ;
32f2c     08 4E 05 F1 | 	add	fp, #8
32f30     A7 FA 01 FB | 	rdlong	result1, fp
32f34     08 4E 85 F1 | 	sub	fp, #8
32f38     A7 F0 03 F6 | 	mov	ptra, fp
32f3c     B2 00 A0 FD | 	call	#popregs_
32f40                 | _fatfs_cc_f_unlink_ret
32f40     2D 00 64 FD | 	ret
32f44                 | 
32f44                 | _fatfs_cc_f_mkdir
32f44     00 4A 05 F6 | 	mov	COUNT_, #0
32f48     A8 00 A0 FD | 	call	#pushregs_
32f4c     5C F0 07 F1 | 	add	ptra, #92
32f50     04 4E 05 F1 | 	add	fp, #4
32f54     A7 12 62 FC | 	wrlong	arg01, fp
32f58     A7 12 02 F6 | 	mov	arg01, fp
32f5c     48 4E 05 F1 | 	add	fp, #72
32f60     A7 14 02 F6 | 	mov	arg02, fp
32f64     4C 4E 85 F1 | 	sub	fp, #76
32f68     02 16 06 F6 | 	mov	arg03, #2
32f6c     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
32f70     08 4E 05 F1 | 	add	fp, #8
32f74     A7 FA 61 FC | 	wrlong	result1, fp
32f78     08 4E 85 F1 | 	sub	fp, #8
32f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
32f80     C4 02 90 5D |  if_ne	jmp	#LR__5025
32f84     4C 4E 05 F1 | 	add	fp, #76
32f88     A7 16 02 FB | 	rdlong	arg03, fp
32f8c     40 4E 85 F1 | 	sub	fp, #64
32f90     A7 16 62 FC | 	wrlong	arg03, fp
32f94     A7 12 02 F6 | 	mov	arg01, fp
32f98     08 4E 85 F1 | 	sub	fp, #8
32f9c     A7 14 02 FB | 	rdlong	arg02, fp
32fa0     04 4E 85 F1 | 	sub	fp, #4
32fa4     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
32fa8     08 4E 05 F1 | 	add	fp, #8
32fac     A7 FA 61 FC | 	wrlong	result1, fp
32fb0     00 FA 4D F2 | 	cmps	result1, #0 wz
32fb4     08 4E 85 F1 | 	sub	fp, #8
32fb8     08 4E 05 A1 |  if_e	add	fp, #8
32fbc     A7 10 68 AC |  if_e	wrlong	#8, fp
32fc0     08 4E 85 A1 |  if_e	sub	fp, #8
32fc4     08 4E 05 F1 | 	add	fp, #8
32fc8     A7 FA 01 FB | 	rdlong	result1, fp
32fcc     08 4E 85 F1 | 	sub	fp, #8
32fd0     04 FA 0D F2 | 	cmp	result1, #4 wz
32fd4     70 02 90 5D |  if_ne	jmp	#LR__5024
32fd8     4C 4E 05 F1 | 	add	fp, #76
32fdc     A7 16 02 FB | 	rdlong	arg03, fp
32fe0     10 4E 85 F1 | 	sub	fp, #16
32fe4     A7 16 62 FC | 	wrlong	arg03, fp
32fe8     A7 12 02 F6 | 	mov	arg01, fp
32fec     3C 4E 85 F1 | 	sub	fp, #60
32ff0     00 14 06 F6 | 	mov	arg02, #0
32ff4     04 AC BF FD | 	call	#_fatfs_cc_create_chain
32ff8     50 4E 05 F1 | 	add	fp, #80
32ffc     A7 FA 61 FC | 	wrlong	result1, fp
33000     48 4E 85 F1 | 	sub	fp, #72
33004     A7 00 68 FC | 	wrlong	#0, fp
33008     48 4E 05 F1 | 	add	fp, #72
3300c     A7 FA 09 FB | 	rdlong	result1, fp wz
33010     50 4E 85 F1 | 	sub	fp, #80
33014     08 4E 05 A1 |  if_e	add	fp, #8
33018     A7 0E 68 AC |  if_e	wrlong	#7, fp
3301c     08 4E 85 A1 |  if_e	sub	fp, #8
33020     50 4E 05 F1 | 	add	fp, #80
33024     A7 FA 01 FB | 	rdlong	result1, fp
33028     50 4E 85 F1 | 	sub	fp, #80
3302c     01 FA 0D F2 | 	cmp	result1, #1 wz
33030     08 4E 05 A1 |  if_e	add	fp, #8
33034     A7 04 68 AC |  if_e	wrlong	#2, fp
33038     08 4E 85 A1 |  if_e	sub	fp, #8
3303c     50 4E 05 F1 | 	add	fp, #80
33040     A7 16 02 FB | 	rdlong	arg03, fp
33044     50 4E 85 F1 | 	sub	fp, #80
33048     FF FF 7F FF 
3304c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
33050     08 4E 05 A1 |  if_e	add	fp, #8
33054     A7 02 68 AC |  if_e	wrlong	#1, fp
33058     08 4E 85 A1 |  if_e	sub	fp, #8
3305c     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
33060     58 4E 05 F1 | 	add	fp, #88
33064     A7 FA 61 FC | 	wrlong	result1, fp
33068     50 4E 85 F1 | 	sub	fp, #80
3306c     A7 FA 09 FB | 	rdlong	result1, fp wz
33070     08 4E 85 F1 | 	sub	fp, #8
33074     1C 01 90 5D |  if_ne	jmp	#LR__5021
33078     4C 4E 05 F1 | 	add	fp, #76
3307c     A7 12 02 FB | 	rdlong	arg01, fp
33080     04 4E 05 F1 | 	add	fp, #4
33084     A7 14 02 FB | 	rdlong	arg02, fp
33088     50 4E 85 F1 | 	sub	fp, #80
3308c     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
33090     08 4E 05 F1 | 	add	fp, #8
33094     A7 FA 61 FC | 	wrlong	result1, fp
33098     00 FA 4D F2 | 	cmps	result1, #0 wz
3309c     08 4E 85 F1 | 	sub	fp, #8
330a0     F0 00 90 5D |  if_ne	jmp	#LR__5020
330a4     4C 4E 05 F1 | 	add	fp, #76
330a8     A7 12 02 FB | 	rdlong	arg01, fp
330ac     4C 4E 85 F1 | 	sub	fp, #76
330b0     34 12 06 F1 | 	add	arg01, #52
330b4     20 14 06 F6 | 	mov	arg02, #32
330b8     0B 16 06 F6 | 	mov	arg03, #11
330bc     98 00 A0 FD | 	call	#\builtin_bytefill_
330c0     4C 4E 05 F1 | 	add	fp, #76
330c4     A7 FA 01 FB | 	rdlong	result1, fp
330c8     34 FA 05 F1 | 	add	result1, #52
330cc     FD 5C 48 FC | 	wrbyte	#46, result1
330d0     A7 16 02 FB | 	rdlong	arg03, fp
330d4     3F 16 06 F1 | 	add	arg03, #63
330d8     0B 21 48 FC | 	wrbyte	#16, arg03
330dc     A7 12 02 FB | 	rdlong	arg01, fp
330e0     4A 12 06 F1 | 	add	arg01, #74
330e4     0C 4E 05 F1 | 	add	fp, #12
330e8     A7 14 02 FB | 	rdlong	arg02, fp
330ec     09 15 62 FC | 	wrlong	arg02, arg01
330f0     0C 4E 85 F1 | 	sub	fp, #12
330f4     A7 14 02 FB | 	rdlong	arg02, fp
330f8     0A 13 02 F6 | 	mov	arg01, arg02
330fc     34 14 06 F1 | 	add	arg02, #52
33100     04 4E 05 F1 | 	add	fp, #4
33104     A7 16 02 FB | 	rdlong	arg03, fp
33108     50 4E 85 F1 | 	sub	fp, #80
3310c     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
33110     4C 4E 05 F1 | 	add	fp, #76
33114     A7 14 02 FB | 	rdlong	arg02, fp
33118     0A 13 02 F6 | 	mov	arg01, arg02
3311c     54 12 06 F1 | 	add	arg01, #84
33120     4C 4E 85 F1 | 	sub	fp, #76
33124     34 14 06 F1 | 	add	arg02, #52
33128     20 16 06 F6 | 	mov	arg03, #32
3312c     78 27 BF FD | 	call	#__system____builtin_memmove
33130     4C 4E 05 F1 | 	add	fp, #76
33134     A7 16 02 FB | 	rdlong	arg03, fp
33138     55 16 06 F1 | 	add	arg03, #85
3313c     0B 5D 48 FC | 	wrbyte	#46, arg03
33140     38 4E 85 F1 | 	sub	fp, #56
33144     A7 16 02 FB | 	rdlong	arg03, fp
33148     40 4E 05 F1 | 	add	fp, #64
3314c     A7 16 62 FC | 	wrlong	arg03, fp
33150     08 4E 85 F1 | 	sub	fp, #8
33154     A7 14 02 FB | 	rdlong	arg02, fp
33158     0A 13 02 F6 | 	mov	arg01, arg02
3315c     54 14 06 F1 | 	add	arg02, #84
33160     4C 4E 85 F1 | 	sub	fp, #76
33164     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
33168     4C 4E 05 F1 | 	add	fp, #76
3316c     A7 16 02 FB | 	rdlong	arg03, fp
33170     03 16 06 F1 | 	add	arg03, #3
33174     0B 03 48 FC | 	wrbyte	#1, arg03
33178     40 4E 85 F1 | 	sub	fp, #64
3317c     A7 12 02 F6 | 	mov	arg01, fp
33180     0C 4E 85 F1 | 	sub	fp, #12
33184     44 BA BF FD | 	call	#_fatfs_cc_dir_register
33188     08 4E 05 F1 | 	add	fp, #8
3318c     A7 FA 61 FC | 	wrlong	result1, fp
33190     08 4E 85 F1 | 	sub	fp, #8
33194                 | LR__5020
33194                 | LR__5021
33194     08 4E 05 F1 | 	add	fp, #8
33198     A7 FA 09 FB | 	rdlong	result1, fp wz
3319c     08 4E 85 F1 | 	sub	fp, #8
331a0     88 00 90 5D |  if_ne	jmp	#LR__5022
331a4     28 4E 05 F1 | 	add	fp, #40
331a8     A7 12 02 FB | 	rdlong	arg01, fp
331ac     16 12 06 F1 | 	add	arg01, #22
331b0     30 4E 05 F1 | 	add	fp, #48
331b4     A7 14 02 FB | 	rdlong	arg02, fp
331b8     09 15 62 FC | 	wrlong	arg02, arg01
331bc     0C 4E 85 F1 | 	sub	fp, #12
331c0     A7 12 02 FB | 	rdlong	arg01, fp
331c4     24 4E 85 F1 | 	sub	fp, #36
331c8     A7 14 02 FB | 	rdlong	arg02, fp
331cc     28 4E 05 F1 | 	add	fp, #40
331d0     A7 16 02 FB | 	rdlong	arg03, fp
331d4     50 4E 85 F1 | 	sub	fp, #80
331d8     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
331dc     28 4E 05 F1 | 	add	fp, #40
331e0     A7 FA 01 FB | 	rdlong	result1, fp
331e4     0B FA 05 F1 | 	add	result1, #11
331e8     FD 20 48 FC | 	wrbyte	#16, result1
331ec     24 4E 05 F1 | 	add	fp, #36
331f0     A7 FA 01 FB | 	rdlong	result1, fp
331f4     03 FA 05 F1 | 	add	result1, #3
331f8     FD 02 48 FC | 	wrbyte	#1, result1
331fc     44 4E 85 F1 | 	sub	fp, #68
33200     A7 FA 09 FB | 	rdlong	result1, fp wz
33204     08 4E 85 F1 | 	sub	fp, #8
33208     3C 00 90 5D |  if_ne	jmp	#LR__5023
3320c     4C 4E 05 F1 | 	add	fp, #76
33210     A7 12 02 FB | 	rdlong	arg01, fp
33214     4C 4E 85 F1 | 	sub	fp, #76
33218     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
3321c     08 4E 05 F1 | 	add	fp, #8
33220     A7 FA 61 FC | 	wrlong	result1, fp
33224     08 4E 85 F1 | 	sub	fp, #8
33228     1C 00 90 FD | 	jmp	#LR__5023
3322c                 | LR__5022
3322c     3C 4E 05 F1 | 	add	fp, #60
33230     A7 12 02 F6 | 	mov	arg01, fp
33234     14 4E 05 F1 | 	add	fp, #20
33238     A7 14 02 FB | 	rdlong	arg02, fp
3323c     50 4E 85 F1 | 	sub	fp, #80
33240     00 16 06 F6 | 	mov	arg03, #0
33244     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
33248                 | LR__5023
33248                 | LR__5024
33248                 | LR__5025
33248                 | ' 				remove_chain(&sobj, dcl, 0);
33248                 | ' 			}
33248                 | ' 		}
33248                 | ' 		;
33248                 | ' 	}
33248                 | ' 
33248                 | ' 	return res ;
33248     08 4E 05 F1 | 	add	fp, #8
3324c     A7 FA 01 FB | 	rdlong	result1, fp
33250     08 4E 85 F1 | 	sub	fp, #8
33254     A7 F0 03 F6 | 	mov	ptra, fp
33258     B2 00 A0 FD | 	call	#popregs_
3325c                 | _fatfs_cc_f_mkdir_ret
3325c     2D 00 64 FD | 	ret
33260                 | 
33260                 | _fatfs_cc_f_rename
33260     01 4A 05 F6 | 	mov	COUNT_, #1
33264     A8 00 A0 FD | 	call	#pushregs_
33268     9C F0 07 F1 | 	add	ptra, #156
3326c     04 4E 05 F1 | 	add	fp, #4
33270     A7 12 62 FC | 	wrlong	arg01, fp
33274     04 4E 05 F1 | 	add	fp, #4
33278     A7 14 62 FC | 	wrlong	arg02, fp
3327c     A7 12 02 F6 | 	mov	arg01, fp
33280     08 4E 85 F1 | 	sub	fp, #8
33284     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
33288     04 4E 05 F1 | 	add	fp, #4
3328c     A7 12 02 F6 | 	mov	arg01, fp
33290     6C 4E 05 F1 | 	add	fp, #108
33294     A7 14 02 F6 | 	mov	arg02, fp
33298     70 4E 85 F1 | 	sub	fp, #112
3329c     02 16 06 F6 | 	mov	arg03, #2
332a0     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
332a4     0C 4E 05 F1 | 	add	fp, #12
332a8     A7 FA 61 FC | 	wrlong	result1, fp
332ac     0C 4E 85 F1 | 	sub	fp, #12
332b0     00 FA 0D F2 | 	cmp	result1, #0 wz
332b4     44 03 90 5D |  if_ne	jmp	#LR__5043
332b8     70 4E 05 F1 | 	add	fp, #112
332bc     A7 16 02 FB | 	rdlong	arg03, fp
332c0     60 4E 85 F1 | 	sub	fp, #96
332c4     A7 16 62 FC | 	wrlong	arg03, fp
332c8     A7 12 02 F6 | 	mov	arg01, fp
332cc     0C 4E 85 F1 | 	sub	fp, #12
332d0     A7 14 02 FB | 	rdlong	arg02, fp
332d4     04 4E 85 F1 | 	sub	fp, #4
332d8     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
332dc     0C 4E 05 F1 | 	add	fp, #12
332e0     A7 FA 61 FC | 	wrlong	result1, fp
332e4     00 FA 4D F2 | 	cmps	result1, #0 wz
332e8     0C 4E 85 F1 | 	sub	fp, #12
332ec     1C 00 90 5D |  if_ne	jmp	#LR__5030
332f0     3B 4E 05 F1 | 	add	fp, #59
332f4     A7 FA C1 FA | 	rdbyte	result1, fp
332f8     3B 4E 85 F1 | 	sub	fp, #59
332fc     A0 FA CD F7 | 	test	result1, #160 wz
33300     0C 4E 05 51 |  if_ne	add	fp, #12
33304     A7 0C 68 5C |  if_ne	wrlong	#6, fp
33308     0C 4E 85 51 |  if_ne	sub	fp, #12
3330c                 | LR__5030
3330c     0C 4E 05 F1 | 	add	fp, #12
33310     A7 26 0A FB | 	rdlong	local01, fp wz
33314     0C 4E 85 F1 | 	sub	fp, #12
33318     E0 02 90 5D |  if_ne	jmp	#LR__5042
3331c     74 4E 05 F1 | 	add	fp, #116
33320     A7 12 02 F6 | 	mov	arg01, fp
33324     48 4E 85 F1 | 	sub	fp, #72
33328     A7 14 02 FB | 	rdlong	arg02, fp
3332c     2C 4E 85 F1 | 	sub	fp, #44
33330     20 16 06 F6 | 	mov	arg03, #32
33334     70 25 BF FD | 	call	#__system____builtin_memmove
33338     40 4E 05 F1 | 	add	fp, #64
3333c     A7 12 02 F6 | 	mov	arg01, fp
33340     30 4E 85 F1 | 	sub	fp, #48
33344     A7 14 02 F6 | 	mov	arg02, fp
33348     10 4E 85 F1 | 	sub	fp, #16
3334c     30 16 06 F6 | 	mov	arg03, #48
33350     54 25 BF FD | 	call	#__system____builtin_memmove
33354     40 4E 05 F1 | 	add	fp, #64
33358     A7 12 02 F6 | 	mov	arg01, fp
3335c     38 4E 85 F1 | 	sub	fp, #56
33360     A7 14 02 FB | 	rdlong	arg02, fp
33364     08 4E 85 F1 | 	sub	fp, #8
33368     34 CA BF FD | 	call	#_fatfs_cc_follow_path
3336c     0C 4E 05 F1 | 	add	fp, #12
33370     A7 FA 61 FC | 	wrlong	result1, fp
33374     0C 4E 85 F1 | 	sub	fp, #12
33378     00 FA 0D F2 | 	cmp	result1, #0 wz
3337c     4C 00 90 5D |  if_ne	jmp	#LR__5033
33380     48 4E 05 F1 | 	add	fp, #72
33384     A7 FA 01 FB | 	rdlong	result1, fp
33388     30 4E 85 F1 | 	sub	fp, #48
3338c     A7 16 02 FB | 	rdlong	arg03, fp
33390     18 4E 85 F1 | 	sub	fp, #24
33394     0B FB 09 F2 | 	cmp	result1, arg03 wz
33398     20 00 90 5D |  if_ne	jmp	#LR__5031
3339c     50 4E 05 F1 | 	add	fp, #80
333a0     A7 FA 01 FB | 	rdlong	result1, fp
333a4     30 4E 85 F1 | 	sub	fp, #48
333a8     A7 16 02 FB | 	rdlong	arg03, fp
333ac     20 4E 85 F1 | 	sub	fp, #32
333b0     0B FB 09 F2 | 	cmp	result1, arg03 wz
333b4     04 26 06 A6 |  if_e	mov	local01, #4
333b8     04 00 90 AD |  if_e	jmp	#LR__5032
333bc                 | LR__5031
333bc     08 26 06 F6 | 	mov	local01, #8
333c0                 | LR__5032
333c0     0C 4E 05 F1 | 	add	fp, #12
333c4     A7 26 62 FC | 	wrlong	local01, fp
333c8     0C 4E 85 F1 | 	sub	fp, #12
333cc                 | LR__5033
333cc     0C 4E 05 F1 | 	add	fp, #12
333d0     A7 26 02 FB | 	rdlong	local01, fp
333d4     0C 4E 85 F1 | 	sub	fp, #12
333d8     04 26 0E F2 | 	cmp	local01, #4 wz
333dc     CC 01 90 5D |  if_ne	jmp	#LR__5039
333e0     40 4E 05 F1 | 	add	fp, #64
333e4     A7 12 02 F6 | 	mov	arg01, fp
333e8     40 4E 85 F1 | 	sub	fp, #64
333ec     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
333f0     0C 4E 05 F1 | 	add	fp, #12
333f4     A7 FA 61 FC | 	wrlong	result1, fp
333f8     0C 4E 85 F1 | 	sub	fp, #12
333fc     00 FA 0D F2 | 	cmp	result1, #0 wz
33400     A8 01 90 5D |  if_ne	jmp	#LR__5038
33404     5C 4E 05 F1 | 	add	fp, #92
33408     A7 12 02 FB | 	rdlong	arg01, fp
3340c     38 4E 05 F1 | 	add	fp, #56
33410     A7 12 62 FC | 	wrlong	arg01, fp
33414     0D 12 06 F1 | 	add	arg01, #13
33418     20 4E 85 F1 | 	sub	fp, #32
3341c     A7 14 02 F6 | 	mov	arg02, fp
33420     74 4E 85 F1 | 	sub	fp, #116
33424     0D 14 06 F1 | 	add	arg02, #13
33428     13 16 06 F6 | 	mov	arg03, #19
3342c     78 24 BF FD | 	call	#__system____builtin_memmove
33430     94 4E 05 F1 | 	add	fp, #148
33434     A7 26 02 FB | 	rdlong	local01, fp
33438     15 4E 85 F1 | 	sub	fp, #21
3343c     A7 FA C1 FA | 	rdbyte	result1, fp
33440     0B 26 06 F1 | 	add	local01, #11
33444     13 FB 41 FC | 	wrbyte	result1, local01
33448     15 4E 05 F1 | 	add	fp, #21
3344c     A7 26 02 FB | 	rdlong	local01, fp
33450     94 4E 85 F1 | 	sub	fp, #148
33454     0B 26 06 F1 | 	add	local01, #11
33458     13 27 C2 FA | 	rdbyte	local01, local01
3345c     10 26 CE F7 | 	test	local01, #16 wz
33460     24 00 90 5D |  if_ne	jmp	#LR__5034
33464     94 4E 05 F1 | 	add	fp, #148
33468     A7 FA 01 FB | 	rdlong	result1, fp
3346c     FD 26 02 F6 | 	mov	local01, result1
33470     94 4E 85 F1 | 	sub	fp, #148
33474     0B FA 05 F1 | 	add	result1, #11
33478     FD FA C1 FA | 	rdbyte	result1, result1
3347c     20 FA 45 F5 | 	or	result1, #32
33480     0B 26 06 F1 | 	add	local01, #11
33484     13 FB 41 FC | 	wrbyte	result1, local01
33488                 | LR__5034
33488     70 4E 05 F1 | 	add	fp, #112
3348c     A7 26 02 FB | 	rdlong	local01, fp
33490     03 26 06 F1 | 	add	local01, #3
33494     13 03 48 FC | 	wrbyte	#1, local01
33498     24 4E 05 F1 | 	add	fp, #36
3349c     A7 26 02 FB | 	rdlong	local01, fp
334a0     94 4E 85 F1 | 	sub	fp, #148
334a4     0B 26 06 F1 | 	add	local01, #11
334a8     13 27 C2 FA | 	rdbyte	local01, local01
334ac     10 26 CE F7 | 	test	local01, #16 wz
334b0     F8 00 90 AD |  if_e	jmp	#LR__5037
334b4     18 4E 05 F1 | 	add	fp, #24
334b8     A7 16 02 FB | 	rdlong	arg03, fp
334bc     30 4E 05 F1 | 	add	fp, #48
334c0     A7 26 02 FB | 	rdlong	local01, fp
334c4     48 4E 85 F1 | 	sub	fp, #72
334c8     13 17 0A F2 | 	cmp	arg03, local01 wz
334cc     DC 00 90 AD |  if_e	jmp	#LR__5037
334d0     70 4E 05 F1 | 	add	fp, #112
334d4     A7 12 02 FB | 	rdlong	arg01, fp
334d8     09 27 02 F6 | 	mov	local01, arg01
334dc     24 4E 05 F1 | 	add	fp, #36
334e0     A7 14 02 FB | 	rdlong	arg02, fp
334e4     94 4E 85 F1 | 	sub	fp, #148
334e8     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
334ec     FD 14 02 F6 | 	mov	arg02, result1
334f0     13 13 02 F6 | 	mov	arg01, local01
334f4     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
334f8     98 4E 05 F1 | 	add	fp, #152
334fc     A7 FA 61 FC | 	wrlong	result1, fp
33500     00 FA 4D F2 | 	cmps	result1, #0 wz
33504     98 4E 85 F1 | 	sub	fp, #152
33508     0C 4E 05 A1 |  if_e	add	fp, #12
3350c     A7 04 68 AC |  if_e	wrlong	#2, fp
33510     0C 4E 85 A1 |  if_e	sub	fp, #12
33514     94 00 90 AD |  if_e	jmp	#LR__5036
33518     70 4E 05 F1 | 	add	fp, #112
3351c     A7 12 02 FB | 	rdlong	arg01, fp
33520     28 4E 05 F1 | 	add	fp, #40
33524     A7 14 02 FB | 	rdlong	arg02, fp
33528     98 4E 85 F1 | 	sub	fp, #152
3352c     4C A0 BF FD | 	call	#_fatfs_cc_move_window
33530     0C 4E 05 F1 | 	add	fp, #12
33534     A7 FA 61 FC | 	wrlong	result1, fp
33538     64 4E 05 F1 | 	add	fp, #100
3353c     A7 26 02 FB | 	rdlong	local01, fp
33540     54 26 06 F1 | 	add	local01, #84
33544     24 4E 05 F1 | 	add	fp, #36
33548     A7 26 62 FC | 	wrlong	local01, fp
3354c     88 4E 85 F1 | 	sub	fp, #136
33550     A7 26 0A FB | 	rdlong	local01, fp wz
33554     0C 4E 85 F1 | 	sub	fp, #12
33558     50 00 90 5D |  if_ne	jmp	#LR__5035
3355c     94 4E 05 F1 | 	add	fp, #148
33560     A7 26 02 FB | 	rdlong	local01, fp
33564     94 4E 85 F1 | 	sub	fp, #148
33568     01 26 06 F1 | 	add	local01, #1
3356c     13 27 C2 FA | 	rdbyte	local01, local01
33570     2E 26 0E F2 | 	cmp	local01, #46 wz
33574     34 00 90 5D |  if_ne	jmp	#LR__5035
33578     70 4E 05 F1 | 	add	fp, #112
3357c     A7 12 02 FB | 	rdlong	arg01, fp
33580     24 4E 05 F1 | 	add	fp, #36
33584     A7 14 02 FB | 	rdlong	arg02, fp
33588     4C 4E 85 F1 | 	sub	fp, #76
3358c     A7 16 02 FB | 	rdlong	arg03, fp
33590     48 4E 85 F1 | 	sub	fp, #72
33594     50 AD BF FD | 	call	#_fatfs_cc_st_clust
33598     70 4E 05 F1 | 	add	fp, #112
3359c     A7 26 02 FB | 	rdlong	local01, fp
335a0     70 4E 85 F1 | 	sub	fp, #112
335a4     03 26 06 F1 | 	add	local01, #3
335a8     13 03 48 FC | 	wrbyte	#1, local01
335ac                 | LR__5035
335ac                 | LR__5036
335ac                 | LR__5037
335ac                 | LR__5038
335ac                 | LR__5039
335ac     0C 4E 05 F1 | 	add	fp, #12
335b0     A7 26 0A FB | 	rdlong	local01, fp wz
335b4     0C 4E 85 F1 | 	sub	fp, #12
335b8     40 00 90 5D |  if_ne	jmp	#LR__5041
335bc     10 4E 05 F1 | 	add	fp, #16
335c0     A7 12 02 F6 | 	mov	arg01, fp
335c4     10 4E 85 F1 | 	sub	fp, #16
335c8     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
335cc     0C 4E 05 F1 | 	add	fp, #12
335d0     A7 FA 61 FC | 	wrlong	result1, fp
335d4     0C 4E 85 F1 | 	sub	fp, #12
335d8     00 FA 0D F2 | 	cmp	result1, #0 wz
335dc     1C 00 90 5D |  if_ne	jmp	#LR__5040
335e0     70 4E 05 F1 | 	add	fp, #112
335e4     A7 12 02 FB | 	rdlong	arg01, fp
335e8     70 4E 85 F1 | 	sub	fp, #112
335ec     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
335f0     0C 4E 05 F1 | 	add	fp, #12
335f4     A7 FA 61 FC | 	wrlong	result1, fp
335f8     0C 4E 85 F1 | 	sub	fp, #12
335fc                 | LR__5040
335fc                 | LR__5041
335fc                 | LR__5042
335fc                 | LR__5043
335fc                 | ' 					res = sync_fs(fs);
335fc                 | ' 				}
335fc                 | ' 			}
335fc                 | ' 
335fc                 | ' 		}
335fc                 | ' 		;
335fc                 | ' 	}
335fc                 | ' 
335fc                 | ' 	return res ;
335fc     0C 4E 05 F1 | 	add	fp, #12
33600     A7 FA 01 FB | 	rdlong	result1, fp
33604     0C 4E 85 F1 | 	sub	fp, #12
33608     A7 F0 03 F6 | 	mov	ptra, fp
3360c     B2 00 A0 FD | 	call	#popregs_
33610                 | _fatfs_cc_f_rename_ret
33610     2D 00 64 FD | 	ret
33614                 | 
33614                 | _fatfs_cc_time
33614     00 4A 05 F6 | 	mov	COUNT_, #0
33618     A8 00 A0 FD | 	call	#pushregs_
3361c     14 F0 07 F1 | 	add	ptra, #20
33620     04 4E 05 F1 | 	add	fp, #4
33624     A7 12 62 FC | 	wrlong	arg01, fp
33628     04 4E 05 F1 | 	add	fp, #4
3362c     A7 12 02 F6 | 	mov	arg01, fp
33630     08 4E 85 F1 | 	sub	fp, #8
33634     00 14 06 F6 | 	mov	arg02, #0
33638     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
3363c     08 4E 05 F1 | 	add	fp, #8
33640     A7 FA 01 FB | 	rdlong	result1, fp
33644     08 4E 05 F1 | 	add	fp, #8
33648     A7 FA 61 FC | 	wrlong	result1, fp
3364c     0C 4E 85 F1 | 	sub	fp, #12
33650     A7 FA 09 FB | 	rdlong	result1, fp wz
33654     04 4E 85 F1 | 	sub	fp, #4
33658     18 00 90 AD |  if_e	jmp	#LR__5050
3365c     04 4E 05 F1 | 	add	fp, #4
33660     A7 FA 01 FB | 	rdlong	result1, fp
33664     0C 4E 05 F1 | 	add	fp, #12
33668     A7 14 02 FB | 	rdlong	arg02, fp
3366c     10 4E 85 F1 | 	sub	fp, #16
33670     FD 14 62 FC | 	wrlong	arg02, result1
33674                 | LR__5050
33674                 | '         *tp = now;
33674                 | '     return now;
33674     10 4E 05 F1 | 	add	fp, #16
33678     A7 FA 01 FB | 	rdlong	result1, fp
3367c     10 4E 85 F1 | 	sub	fp, #16
33680     A7 F0 03 F6 | 	mov	ptra, fp
33684     B2 00 A0 FD | 	call	#popregs_
33688                 | _fatfs_cc_time_ret
33688     2D 00 64 FD | 	ret
3368c                 | 
3368c                 | _fatfs_cc_mktime
3368c     06 4A 05 F6 | 	mov	COUNT_, #6
33690     A8 00 A0 FD | 	call	#pushregs_
33694     09 27 02 F6 | 	mov	local01, arg01
33698     14 26 06 F1 | 	add	local01, #20
3369c     13 13 02 FB | 	rdlong	arg01, local01
336a0     14 26 86 F1 | 	sub	local01, #20
336a4     46 12 56 F2 | 	cmps	arg01, #70 wc
336a8                 | '                 return (time_t) -1;
336a8     01 FA 65 C6 |  if_b	neg	result1, #1
336ac     7C 01 90 CD |  if_b	jmp	#LR__5064
336b0     03 00 00 FF 
336b4     6C 29 06 F6 | 	mov	local02, ##1900
336b8     14 26 06 F1 | 	add	local01, #20
336bc     13 FB 01 FB | 	rdlong	result1, local01
336c0     FD 28 02 F1 | 	add	local02, result1
336c4     08 26 86 F1 | 	sub	local01, #8
336c8     13 2B 02 FB | 	rdlong	local03, local01
336cc     01 2A 86 F1 | 	sub	local03, #1
336d0     04 26 06 F1 | 	add	local01, #4
336d4     13 13 02 FB | 	rdlong	arg01, local01
336d8     10 26 86 F1 | 	sub	local01, #16
336dc     02 12 66 F0 | 	shl	arg01, #2
336e0     02 00 00 FF 
336e4     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
336e8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
336ec     09 FB 01 FB | 	rdlong	result1, arg01
336f0     FD 2A 02 F1 | 	add	local03, result1
336f4     14 13 02 F6 | 	mov	arg01, local02
336f8     02 00 00 FF 
336fc     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
33700     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
33704     00 FA 0D F2 | 	cmp	result1, #0 wz
33708     1C 00 90 AD |  if_e	jmp	#LR__5060
3370c     00 2C 06 F6 | 	mov	local04, #0
33710     10 26 06 F1 | 	add	local01, #16
33714     13 FB 01 FB | 	rdlong	result1, local01
33718     10 26 86 F1 | 	sub	local01, #16
3371c     02 FA 55 F2 | 	cmps	result1, #2 wc
33720     01 2C 06 36 |  if_ae	mov	local04, #1
33724     04 00 90 FD | 	jmp	#LR__5061
33728                 | LR__5060
33728     00 2C 06 F6 | 	mov	local04, #0
3372c                 | LR__5061
3372c     04 26 06 F1 | 	add	local01, #4
33730     13 FB 01 FB | 	rdlong	result1, local01
33734     04 26 86 F1 | 	sub	local01, #4
33738     13 2F 02 FB | 	rdlong	local05, local01
3373c     08 26 06 F1 | 	add	local01, #8
33740     13 13 02 FB | 	rdlong	arg01, local01
33744     07 00 00 FF 
33748     10 12 06 FD | 	qmul	arg01, ##3600
3374c     16 2B 02 F1 | 	add	local03, local04
33750     FD 2C 02 F6 | 	mov	local04, result1
33754     04 2C 66 F0 | 	shl	local04, #4
33758     FD 2C 82 F1 | 	sub	local04, result1
3375c     02 2C 66 F0 | 	shl	local04, #2
33760     16 2F 02 F1 | 	add	local05, local04
33764     08 26 86 F1 | 	sub	local01, #8
33768     18 2C 62 FD | 	getqx	local04
3376c     A8 00 00 FF 
33770     80 2B 06 FD | 	qmul	local03, ##86400
33774     16 2F 02 F1 | 	add	local05, local04
33778     14 2B 02 F6 | 	mov	local03, local02
3377c     03 00 00 FF 
33780     B2 2B 86 F1 | 	sub	local03, ##1970
33784     18 2C 62 FD | 	getqx	local04
33788     99 F0 00 FF 
3378c     80 2B 06 FD | 	qmul	local03, ##31536000
33790     16 2F 02 F1 | 	add	local05, local04
33794     14 2B 02 F6 | 	mov	local03, local02
33798     03 00 00 FF 
3379c     B1 2B 86 F1 | 	sub	local03, ##1969
337a0     15 31 52 F6 | 	abs	local06, local03 wc
337a4     02 30 46 F0 | 	shr	local06, #2
337a8     18 31 82 F6 | 	negc	local06, local06
337ac     03 00 00 FF 
337b0     D1 29 56 F2 | 	cmps	local02, ##2001 wc
337b4     18 2C 62 FD | 	getqx	local04
337b8     16 2F 02 F1 | 	add	local05, local04
337bc     18 00 90 CD |  if_b	jmp	#LR__5062
337c0     03 00 00 FF 
337c4     D0 29 86 F1 | 	sub	local02, ##2000
337c8     14 2D 52 F6 | 	abs	local04, local02 wc
337cc     64 2C 16 FD | 	qdiv	local04, #100
337d0     18 2C 62 FD | 	getqx	local04
337d4     16 31 A2 F3 | 	sumnc	local06, local04
337d8                 | LR__5062
337d8     A8 00 00 FF 
337dc     80 31 06 FD | 	qmul	local06, ##86400
337e0     18 30 62 FD | 	getqx	local06
337e4     18 2F 02 F1 | 	add	local05, local06
337e8     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
337ec     02 00 00 FF 
337f0     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
337f4     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
337f8     18 2F 02 F1 | 	add	local05, local06
337fc     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
33800     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
33804     02 00 00 FF 
33808     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
3380c     01 2A 0E F2 | 	cmp	local03, #1 wz
33810     14 00 90 5D |  if_ne	jmp	#LR__5063
33814     13 13 02 F6 | 	mov	arg01, local01
33818     DC 19 B0 FD | 	call	#_fatfs_cc___indst
3381c     00 FA 0D F2 | 	cmp	result1, #0 wz
33820     07 00 00 5F 
33824     10 2E 86 51 |  if_ne	sub	local05, ##3600
33828                 | LR__5063
33828                 | '                 s -=  (3600L) ;
33828                 | ' 
33828                 | '         return s;
33828     17 FB 01 F6 | 	mov	result1, local05
3382c                 | LR__5064
3382c     A7 F0 03 F6 | 	mov	ptra, fp
33830     B2 00 A0 FD | 	call	#popregs_
33834                 | _fatfs_cc_mktime_ret
33834     2D 00 64 FD | 	ret
33838                 | 
33838                 | _fatfs_cc__gmtime_r
33838     03 4A 05 F6 | 	mov	COUNT_, #3
3383c     A8 00 A0 FD | 	call	#pushregs_
33840     09 27 02 FB | 	rdlong	local01, arg01
33844     A8 00 00 FF 
33848     80 27 16 FD | 	qdiv	local01, ##86400
3384c     18 FA 61 FD | 	getqx	result1
33850     04 FA 05 F1 | 	add	result1, #4
33854     07 FA 15 FD | 	qdiv	result1, #7
33858     18 14 06 F1 | 	add	arg02, #24
3385c     D1 7F 27 FF 
33860     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
33864     D1 7F 27 3F 
33868     00 26 86 31 |  if_ae	sub	local01, ##1325376000
3386c     03 00 00 3F 
33870     DC 29 06 36 |  if_ae	mov	local02, ##2012
33874     03 00 00 CF 
33878     B2 29 06 C6 |  if_b	mov	local02, ##1970
3387c                 | ' 	  year = 1970;
3387c                 | ' 	}
3387c                 | ' 
3387c                 | ' 	for(;;) {
3387c     19 FA 61 FD | 	getqy	result1
33880     0A FB 61 FC | 	wrlong	result1, arg02
33884     18 14 86 F1 | 	sub	arg02, #24
33888                 | LR__5070
33888     14 13 02 F6 | 	mov	arg01, local02
3388c     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
33890     00 FA 0D F2 | 	cmp	result1, #0 wz
33894     42 F1 00 5F 
33898     00 2B 06 56 |  if_ne	mov	local03, ##31622400
3389c     99 F0 00 AF 
338a0     80 2B 06 A6 |  if_e	mov	local03, ##31536000
338a4     15 27 12 F2 | 	cmp	local01, local03 wc
338a8                 | ' 	    break;
338a8     01 28 06 31 |  if_ae	add	local02, #1
338ac     15 27 82 31 |  if_ae	sub	local01, local03
338b0     D4 FF 9F 3D |  if_ae	jmp	#LR__5070
338b4     A8 00 00 FF 
338b8     80 27 16 FD | 	qdiv	local01, ##86400
338bc     14 2B 02 F6 | 	mov	local03, local02
338c0     03 00 00 FF 
338c4     6C 2B 86 F1 | 	sub	local03, ##1900
338c8     14 14 06 F1 | 	add	arg02, #20
338cc     0A 2B 62 FC | 	wrlong	local03, arg02
338d0     08 14 06 F1 | 	add	arg02, #8
338d4     14 13 02 F6 | 	mov	arg01, local02
338d8     18 28 62 FD | 	getqx	local02
338dc     0A 29 62 FC | 	wrlong	local02, arg02
338e0     1C 14 86 F1 | 	sub	arg02, #28
338e4     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
338e8     00 FA 0D F2 | 	cmp	result1, #0 wz
338ec     1D 2A 06 56 |  if_ne	mov	local03, #29
338f0     1C 2A 06 A6 |  if_e	mov	local03, #28
338f4     02 00 00 FF 
338f8     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
338fc     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
33900     02 00 00 FF 
33904     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
33908                 | ' 
33908                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
33908                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
33908     00 12 06 F6 | 	mov	arg01, #0
3390c     97 2A 48 FB | 	callpa	#(@LR__5072-@LR__5071)>>2,fcache_load_ptr_
33910                 | LR__5071
33910     09 2B 02 F6 | 	mov	local03, arg01
33914     02 2A 66 F0 | 	shl	local03, #2
33918     02 00 00 FF 
3391c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
33920     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
33924     15 2B 02 FB | 	rdlong	local03, local03
33928     15 29 52 F2 | 	cmps	local02, local03 wc
3392c     02 00 00 FF 
33930     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
33934     2C 00 90 CD |  if_b	jmp	#LR__5073
33938     09 2B 02 F6 | 	mov	local03, arg01
3393c     02 2A 66 F0 | 	shl	local03, #2
33940     02 00 00 FF 
33944     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
33948     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
3394c     15 2B 02 FB | 	rdlong	local03, local03
33950     15 29 82 F1 | 	sub	local02, local03
33954     01 12 06 F1 | 	add	arg01, #1
33958     02 00 00 FF 
3395c     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
33960     AC FF 9F FD | 	jmp	#LR__5071
33964                 | LR__5072
33964                 | LR__5073
33964     A8 00 00 FF 
33968     80 27 16 FD | 	qdiv	local01, ##86400
3396c     10 14 06 F1 | 	add	arg02, #16
33970     0A 13 62 FC | 	wrlong	arg01, arg02
33974     01 28 06 F1 | 	add	local02, #1
33978     04 14 86 F1 | 	sub	arg02, #4
3397c     0A 29 62 FC | 	wrlong	local02, arg02
33980     19 26 62 FD | 	getqy	local01
33984     07 00 00 FF 
33988     10 26 16 FD | 	qdiv	local01, ##3600
3398c     18 2A 62 FD | 	getqx	local03
33990     07 00 00 FF 
33994     10 26 16 FD | 	qdiv	local01, ##3600
33998     04 14 86 F1 | 	sub	arg02, #4
3399c     0A 2B 62 FC | 	wrlong	local03, arg02
339a0     19 26 62 FD | 	getqy	local01
339a4     3C 26 16 FD | 	qdiv	local01, #60
339a8     18 2A 62 FD | 	getqx	local03
339ac     3C 26 16 FD | 	qdiv	local01, #60
339b0     04 14 86 F1 | 	sub	arg02, #4
339b4     0A 2B 62 FC | 	wrlong	local03, arg02
339b8     04 14 86 F1 | 	sub	arg02, #4
339bc                 | '         stm->tm_isdst = 0;
339bc                 | ' 
339bc                 | ' ;
339bc                 | '         return stm;
339bc     0A FB 01 F6 | 	mov	result1, arg02
339c0     19 2A 62 FD | 	getqy	local03
339c4     0A 2B 62 FC | 	wrlong	local03, arg02
339c8     20 14 06 F1 | 	add	arg02, #32
339cc     0A 01 68 FC | 	wrlong	#0, arg02
339d0     A7 F0 03 F6 | 	mov	ptra, fp
339d4     B2 00 A0 FD | 	call	#popregs_
339d8                 | _fatfs_cc__gmtime_r_ret
339d8     2D 00 64 FD | 	ret
339dc                 | 
339dc                 | _fatfs_cc__tzset
339dc     AA 01 00 FF 
339e0     21 13 06 F6 | 	mov	arg01, ##@LR__5385
339e4     34 00 B0 FD | 	call	#_fatfs_cc_getenv
339e8     FD 12 02 F6 | 	mov	arg01, result1
339ec     02 00 00 FF 
339f0     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
339f4     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
339f8     02 00 00 FF 
339fc     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
33a00     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
33a04     02 00 00 FF 
33a08     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
33a0c     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
33a10     02 00 00 FF 
33a14     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
33a18                 | _fatfs_cc__tzset_ret
33a18     2D 00 64 FD | 	ret
33a1c                 | 
33a1c                 | _fatfs_cc_getenv
33a1c     06 4A 05 F6 | 	mov	COUNT_, #6
33a20     A8 00 A0 FD | 	call	#pushregs_
33a24     09 27 02 F6 | 	mov	local01, arg01
33a28     09 29 02 F6 | 	mov	local02, arg01
33a2c     97 06 48 FB | 	callpa	#(@LR__5081-@LR__5080)>>2,fcache_load_ptr_
33a30                 | LR__5080
33a30     14 FB C9 FA | 	rdbyte	result1, local02 wz
33a34     01 28 06 51 |  if_ne	add	local02, #1
33a38     F4 FF 9F 5D |  if_ne	jmp	#LR__5080
33a3c                 | LR__5081
33a3c     09 29 82 F1 | 	sub	local02, arg01
33a40     14 FB 01 F6 | 	mov	result1, local02
33a44     02 00 00 FF 
33a48     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
33a4c     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
33a50     02 00 00 FF 
33a54     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
33a58                 | '             return 0;
33a58     00 FA 05 A6 |  if_e	mov	result1, #0
33a5c     5C 00 90 AD |  if_e	jmp	#LR__5084
33a60                 | ' 
33a60                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
33a60     02 00 00 FF 
33a64     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
33a68     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
33a6c     02 00 00 FF 
33a70     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
33a74                 | LR__5082
33a74     15 2D 0A FB | 	rdlong	local04, local03 wz
33a78     3C 00 90 AD |  if_e	jmp	#LR__5083
33a7c     16 13 02 F6 | 	mov	arg01, local04
33a80     13 15 02 F6 | 	mov	arg02, local01
33a84     14 17 02 F6 | 	mov	arg03, local02
33a88     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
33a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
33a90     14 2F 02 A6 |  if_e	mov	local05, local02
33a94     16 2F 02 A1 |  if_e	add	local05, local04
33a98     17 31 C2 AA |  if_e	rdbyte	local06, local05
33a9c     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
33aa0                 | ' 			return name+len+1;
33aa0     14 2D 02 A1 |  if_e	add	local04, local02
33aa4     01 2C 06 A1 |  if_e	add	local04, #1
33aa8     16 FB 01 A6 |  if_e	mov	result1, local04
33aac     0C 00 90 AD |  if_e	jmp	#LR__5084
33ab0     04 2A 06 F1 | 	add	local03, #4
33ab4     BC FF 9F FD | 	jmp	#LR__5082
33ab8                 | LR__5083
33ab8                 | ' 	}
33ab8                 | ' 	return 0;
33ab8     00 FA 05 F6 | 	mov	result1, #0
33abc                 | LR__5084
33abc     A7 F0 03 F6 | 	mov	ptra, fp
33ac0     B2 00 A0 FD | 	call	#popregs_
33ac4                 | _fatfs_cc_getenv_ret
33ac4     2D 00 64 FD | 	ret
33ac8                 | 
33ac8                 | _fatfs_cc__get_fattime
33ac8     00 4A 05 F6 | 	mov	COUNT_, #0
33acc     A8 00 A0 FD | 	call	#pushregs_
33ad0     34 F0 07 F1 | 	add	ptra, #52
33ad4     00 12 06 F6 | 	mov	arg01, #0
33ad8     38 FB BF FD | 	call	#_fatfs_cc_time
33adc     04 4E 05 F1 | 	add	fp, #4
33ae0     A7 FA 61 FC | 	wrlong	result1, fp
33ae4     A7 12 02 F6 | 	mov	arg01, fp
33ae8     0C 4E 05 F1 | 	add	fp, #12
33aec     A7 14 02 F6 | 	mov	arg02, fp
33af0     10 4E 85 F1 | 	sub	fp, #16
33af4     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
33af8     24 4E 05 F1 | 	add	fp, #36
33afc     A7 14 02 FB | 	rdlong	arg02, fp
33b00     50 14 86 F1 | 	sub	arg02, #80
33b04     09 14 66 F0 | 	shl	arg02, #9
33b08     04 4E 85 F1 | 	sub	fp, #4
33b0c     A7 FA 01 FB | 	rdlong	result1, fp
33b10     01 FA 05 F1 | 	add	result1, #1
33b14     05 FA 65 F0 | 	shl	result1, #5
33b18     FD 14 42 F5 | 	or	arg02, result1
33b1c     04 4E 85 F1 | 	sub	fp, #4
33b20     A7 FA 01 FB | 	rdlong	result1, fp
33b24     FD 14 42 F5 | 	or	arg02, result1
33b28     14 4E 85 F1 | 	sub	fp, #20
33b2c     A7 14 62 FC | 	wrlong	arg02, fp
33b30     10 4E 05 F1 | 	add	fp, #16
33b34     A7 14 02 FB | 	rdlong	arg02, fp
33b38     0B 14 66 F0 | 	shl	arg02, #11
33b3c     04 4E 85 F1 | 	sub	fp, #4
33b40     A7 FA 01 FB | 	rdlong	result1, fp
33b44     05 FA 65 F0 | 	shl	result1, #5
33b48     FD 14 42 F5 | 	or	arg02, result1
33b4c     04 4E 85 F1 | 	sub	fp, #4
33b50     A7 FA 01 FB | 	rdlong	result1, fp
33b54     FD 14 42 F5 | 	or	arg02, result1
33b58     04 4E 85 F1 | 	sub	fp, #4
33b5c     A7 14 62 FC | 	wrlong	arg02, fp
33b60                 | ' 
33b60                 | '     now = time(0);
33b60                 | '     _gmtime_r (&now, &date);
33b60                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
33b60                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
33b60                 | '     return (ffdate << 16) | fftime;
33b60     04 4E 85 F1 | 	sub	fp, #4
33b64     A7 FA 01 FB | 	rdlong	result1, fp
33b68     10 FA 65 F0 | 	shl	result1, #16
33b6c     08 4E 85 F1 | 	sub	fp, #8
33b70     0A FB 41 F5 | 	or	result1, arg02
33b74     A7 F0 03 F6 | 	mov	ptra, fp
33b78     B2 00 A0 FD | 	call	#popregs_
33b7c                 | _fatfs_cc__get_fattime_ret
33b7c     2D 00 64 FD | 	ret
33b80                 | 
33b80                 | _fatfs_cc_unixtime_1025
33b80     00 4A 05 F6 | 	mov	COUNT_, #0
33b84     A8 00 A0 FD | 	call	#pushregs_
33b88     34 F0 07 F1 | 	add	ptra, #52
33b8c     04 4E 05 F1 | 	add	fp, #4
33b90     A7 12 62 FC | 	wrlong	arg01, fp
33b94     04 4E 05 F1 | 	add	fp, #4
33b98     A7 14 62 FC | 	wrlong	arg02, fp
33b9c     04 4E 85 F1 | 	sub	fp, #4
33ba0     A7 14 02 FB | 	rdlong	arg02, fp
33ba4     09 14 46 F0 | 	shr	arg02, #9
33ba8     7F 14 06 F5 | 	and	arg02, #127
33bac     50 FA 05 F6 | 	mov	result1, #80
33bb0     0A FB 01 F1 | 	add	result1, arg02
33bb4     20 4E 05 F1 | 	add	fp, #32
33bb8     A7 FA 61 FC | 	wrlong	result1, fp
33bbc     20 4E 85 F1 | 	sub	fp, #32
33bc0     A7 FA 01 FB | 	rdlong	result1, fp
33bc4     05 FA 45 F0 | 	shr	result1, #5
33bc8     FD FA 41 F8 | 	getnib	result1, result1, #0
33bcc     01 FA 85 F1 | 	sub	result1, #1
33bd0     1C 4E 05 F1 | 	add	fp, #28
33bd4     A7 FA 61 FC | 	wrlong	result1, fp
33bd8     1C 4E 85 F1 | 	sub	fp, #28
33bdc     A7 FA 01 FB | 	rdlong	result1, fp
33be0     1F FA 05 F5 | 	and	result1, #31
33be4     18 4E 05 F1 | 	add	fp, #24
33be8     A7 FA 61 FC | 	wrlong	result1, fp
33bec     14 4E 85 F1 | 	sub	fp, #20
33bf0     A7 FA 01 FB | 	rdlong	result1, fp
33bf4     0B FA 45 F0 | 	shr	result1, #11
33bf8     1F FA 05 F5 | 	and	result1, #31
33bfc     10 4E 05 F1 | 	add	fp, #16
33c00     A7 FA 61 FC | 	wrlong	result1, fp
33c04     10 4E 85 F1 | 	sub	fp, #16
33c08     A7 FA 01 FB | 	rdlong	result1, fp
33c0c     05 FA 45 F0 | 	shr	result1, #5
33c10     3F FA 05 F5 | 	and	result1, #63
33c14     0C 4E 05 F1 | 	add	fp, #12
33c18     A7 FA 61 FC | 	wrlong	result1, fp
33c1c     0C 4E 85 F1 | 	sub	fp, #12
33c20     A7 14 02 FB | 	rdlong	arg02, fp
33c24     1F 14 06 F5 | 	and	arg02, #31
33c28     01 14 66 F0 | 	shl	arg02, #1
33c2c     08 4E 05 F1 | 	add	fp, #8
33c30     A7 14 62 FC | 	wrlong	arg02, fp
33c34     A7 12 02 F6 | 	mov	arg01, fp
33c38     10 4E 85 F1 | 	sub	fp, #16
33c3c     4C FA BF FD | 	call	#_fatfs_cc_mktime
33c40     0C 4E 05 F1 | 	add	fp, #12
33c44     A7 FA 61 FC | 	wrlong	result1, fp
33c48                 | ' 
33c48                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
33c48                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
33c48                 | '     date.tm_mday = (dosdate & 0x1f);
33c48                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
33c48                 | '     date.tm_min = (dostime >> 5) & 0x3f;
33c48                 | '     date.tm_sec = (dostime & 0x1f) << 1;
33c48                 | ' 
33c48                 | '     t = mktime(&date);
33c48                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
33c48                 | '     return t;
33c48     0C 4E 85 F1 | 	sub	fp, #12
33c4c     A7 F0 03 F6 | 	mov	ptra, fp
33c50     B2 00 A0 FD | 	call	#popregs_
33c54                 | _fatfs_cc_unixtime_1025_ret
33c54     2D 00 64 FD | 	ret
33c58                 | 
33c58                 | _fatfs_cc__set_dos_error_1027
33c58     09 01 02 F6 | 	mov	_var01, arg01
33c5c                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
33c5c                 | '     switch (derr) {
33c5c     14 00 26 F3 | 	fle	_var01, #20
33c60     30 00 62 FD | 	jmprel	_var01
33c64                 | LR__5090
33c64     50 00 90 FD | 	jmp	#LR__5091
33c68     84 00 90 FD | 	jmp	#LR__5105
33c6c     80 00 90 FD | 	jmp	#LR__5106
33c70     7C 00 90 FD | 	jmp	#LR__5107
33c74     48 00 90 FD | 	jmp	#LR__5092
33c78     44 00 90 FD | 	jmp	#LR__5093
33c7c     40 00 90 FD | 	jmp	#LR__5094
33c80     44 00 90 FD | 	jmp	#LR__5095
33c84     48 00 90 FD | 	jmp	#LR__5097
33c88     54 00 90 FD | 	jmp	#LR__5100
33c8c     38 00 90 FD | 	jmp	#LR__5096
33c90     4C 00 90 FD | 	jmp	#LR__5101
33c94     48 00 90 FD | 	jmp	#LR__5102
33c98     44 00 90 FD | 	jmp	#LR__5103
33c9c     50 00 90 FD | 	jmp	#LR__5108
33ca0     4C 00 90 FD | 	jmp	#LR__5108
33ca4     48 00 90 FD | 	jmp	#LR__5108
33ca8     2C 00 90 FD | 	jmp	#LR__5098
33cac     38 00 90 FD | 	jmp	#LR__5104
33cb0     2C 00 90 FD | 	jmp	#LR__5099
33cb4     38 00 90 FD | 	jmp	#LR__5108
33cb8                 | LR__5091
33cb8     00 02 06 F6 | 	mov	_var02, #0
33cbc                 | '         r = 0;
33cbc                 | '         break;
33cbc     34 00 90 FD | 	jmp	#LR__5109
33cc0                 | LR__5092
33cc0                 | LR__5093
33cc0                 | LR__5094
33cc0     04 02 06 F6 | 	mov	_var02, #4
33cc4                 | '         r =  4 ;
33cc4                 | '         break;
33cc4     2C 00 90 FD | 	jmp	#LR__5109
33cc8                 | LR__5095
33cc8                 | LR__5096
33cc8     06 02 06 F6 | 	mov	_var02, #6
33ccc                 | '         r =  6 ;
33ccc                 | '         break;
33ccc     24 00 90 FD | 	jmp	#LR__5109
33cd0                 | LR__5097
33cd0     09 02 06 F6 | 	mov	_var02, #9
33cd4                 | '         r =  9 ;
33cd4                 | '         break;
33cd4     1C 00 90 FD | 	jmp	#LR__5109
33cd8                 | LR__5098
33cd8     07 02 06 F6 | 	mov	_var02, #7
33cdc                 | '         r =  7 ;
33cdc                 | '         break;
33cdc     14 00 90 FD | 	jmp	#LR__5109
33ce0                 | LR__5099
33ce0                 | LR__5100
33ce0                 | LR__5101
33ce0                 | LR__5102
33ce0                 | LR__5103
33ce0     0A 02 06 F6 | 	mov	_var02, #10
33ce4                 | '         r =  10 ;
33ce4                 | '         break;
33ce4     0C 00 90 FD | 	jmp	#LR__5109
33ce8                 | LR__5104
33ce8     0B 02 06 F6 | 	mov	_var02, #11
33cec                 | '         r =  11 ;
33cec                 | '         break;
33cec     04 00 90 FD | 	jmp	#LR__5109
33cf0                 | LR__5105
33cf0                 | LR__5106
33cf0                 | LR__5107
33cf0                 | LR__5108
33cf0     0C 02 06 F6 | 	mov	_var02, #12
33cf4                 | '         r =  12 ;
33cf4                 | '         break;
33cf4                 | LR__5109
33cf4                 | '     }
33cf4                 | '     return _seterror(r);
33cf4     00 02 4E F2 | 	cmps	_var02, #0 wz
33cf8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
33cfc     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
33d00     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
33d04     01 FA 65 56 |  if_ne	neg	result1, #1
33d08     00 FA 05 A6 |  if_e	mov	result1, #0
33d0c                 | _fatfs_cc__set_dos_error_1027_ret
33d0c     2D 00 64 FD | 	ret
33d10                 | 
33d10                 | _fatfs_cc_v_creat
33d10     04 4A 05 F6 | 	mov	COUNT_, #4
33d14     A8 00 A0 FD | 	call	#pushregs_
33d18     09 27 02 F6 | 	mov	local01, arg01
33d1c     0A 29 02 F6 | 	mov	local02, arg02
33d20     03 00 00 FF 
33d24     3C 12 06 F6 | 	mov	arg01, ##1596
33d28                 | '     return _gc_alloc(size);
33d28     10 14 06 F6 | 	mov	arg02, #16
33d2c     28 5E BF FD | 	call	#__system___gc_doalloc
33d30     FD 2A 0A F6 | 	mov	local03, result1 wz
33d34                 | '       return _seterror( 7 );
33d34     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
33d38     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
33d3c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
33d40     01 FA 65 A6 |  if_e	neg	result1, #1
33d44     58 00 90 AD |  if_e	jmp	#LR__5111
33d48     15 13 02 F6 | 	mov	arg01, local03
33d4c     00 14 06 F6 | 	mov	arg02, #0
33d50     03 00 00 FF 
33d54     3C 16 06 F6 | 	mov	arg03, ##1596
33d58     98 00 A0 FD | 	call	#\builtin_bytefill_
33d5c     02 00 00 FF 
33d60     14 2A 06 F1 | 	add	local03, ##1044
33d64     15 13 02 F6 | 	mov	arg01, local03
33d68     02 00 00 FF 
33d6c     14 2A 86 F1 | 	sub	local03, ##1044
33d70     14 15 02 F6 | 	mov	arg02, local02
33d74     07 16 06 F6 | 	mov	arg03, #7
33d78     B4 CC BF FD | 	call	#_fatfs_cc_f_open
33d7c     FD 2C 0A F6 | 	mov	local04, result1 wz
33d80     14 00 90 AD |  if_e	jmp	#LR__5110
33d84     15 13 02 F6 | 	mov	arg01, local03
33d88                 | '     return _gc_free(ptr);
33d88     D8 5E BF FD | 	call	#__system___gc_free
33d8c                 | '     free(f);
33d8c                 | '     return _set_dos_error(r);
33d8c     16 13 02 F6 | 	mov	arg01, local04
33d90     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1027
33d94     08 00 90 FD | 	jmp	#LR__5111
33d98                 | LR__5110
33d98     13 2B 62 FC | 	wrlong	local03, local01
33d9c                 | '   }
33d9c                 | '   fil->vfsdata = f;
33d9c                 | '   return 0;
33d9c     00 FA 05 F6 | 	mov	result1, #0
33da0                 | LR__5111
33da0     A7 F0 03 F6 | 	mov	ptra, fp
33da4     B2 00 A0 FD | 	call	#popregs_
33da8                 | _fatfs_cc_v_creat_ret
33da8     2D 00 64 FD | 	ret
33dac                 | 
33dac                 | _fatfs_cc_v_close
33dac     02 4A 05 F6 | 	mov	COUNT_, #2
33db0     A8 00 A0 FD | 	call	#pushregs_
33db4     09 27 02 FB | 	rdlong	local01, arg01
33db8     02 00 00 FF 
33dbc     14 26 06 F1 | 	add	local01, ##1044
33dc0     13 13 02 F6 | 	mov	arg01, local01
33dc4     02 00 00 FF 
33dc8     14 26 86 F1 | 	sub	local01, ##1044
33dcc     DC E3 BF FD | 	call	#_fatfs_cc_f_close
33dd0     FD 28 02 F6 | 	mov	local02, result1
33dd4     13 13 02 F6 | 	mov	arg01, local01
33dd8                 | '     return _gc_free(ptr);
33dd8     88 5E BF FD | 	call	#__system___gc_free
33ddc                 | '     FAT_FIL *f = fil->vfsdata;
33ddc                 | '     r=f_close(&f->fil);
33ddc                 | '     free(f);
33ddc                 | '     return _set_dos_error(r);
33ddc     14 13 02 F6 | 	mov	arg01, local02
33de0     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1027
33de4     A7 F0 03 F6 | 	mov	ptra, fp
33de8     B2 00 A0 FD | 	call	#popregs_
33dec                 | _fatfs_cc_v_close_ret
33dec     2D 00 64 FD | 	ret
33df0                 | 
33df0                 | _fatfs_cc_v_opendir
33df0     04 4A 05 F6 | 	mov	COUNT_, #4
33df4     A8 00 A0 FD | 	call	#pushregs_
33df8     09 27 02 F6 | 	mov	local01, arg01
33dfc     0A 29 02 F6 | 	mov	local02, arg02
33e00     30 12 06 F6 | 	mov	arg01, #48
33e04                 | '     return _gc_alloc(size);
33e04     10 14 06 F6 | 	mov	arg02, #16
33e08     4C 5D BF FD | 	call	#__system___gc_doalloc
33e0c     FD 2A 0A F6 | 	mov	local03, result1 wz
33e10                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
33e10                 | '       return _seterror( 7 );
33e10     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
33e14     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
33e18     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
33e1c     01 FA 65 A6 |  if_e	neg	result1, #1
33e20     34 00 90 AD |  if_e	jmp	#LR__5121
33e24     14 15 02 F6 | 	mov	arg02, local02
33e28     15 13 02 F6 | 	mov	arg01, local03
33e2c     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
33e30     FD 2C 0A F6 | 	mov	local04, result1 wz
33e34     14 00 90 AD |  if_e	jmp	#LR__5120
33e38     15 13 02 F6 | 	mov	arg01, local03
33e3c                 | '     return _gc_free(ptr);
33e3c     24 5E BF FD | 	call	#__system___gc_free
33e40                 | '         free(f);
33e40                 | '         return _set_dos_error(r);
33e40     16 13 02 F6 | 	mov	arg01, local04
33e44     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1027
33e48     0C 00 90 FD | 	jmp	#LR__5121
33e4c                 | LR__5120
33e4c     04 26 06 F1 | 	add	local01, #4
33e50     13 2B 62 FC | 	wrlong	local03, local01
33e54                 | '     }
33e54                 | '     dir->vfsdata = f;
33e54                 | '     return 0;
33e54     00 FA 05 F6 | 	mov	result1, #0
33e58                 | LR__5121
33e58     A7 F0 03 F6 | 	mov	ptra, fp
33e5c     B2 00 A0 FD | 	call	#popregs_
33e60                 | _fatfs_cc_v_opendir_ret
33e60     2D 00 64 FD | 	ret
33e64                 | 
33e64                 | _fatfs_cc_v_closedir
33e64     02 4A 05 F6 | 	mov	COUNT_, #2
33e68     A8 00 A0 FD | 	call	#pushregs_
33e6c     04 12 06 F1 | 	add	arg01, #4
33e70     09 27 02 FB | 	rdlong	local01, arg01
33e74     13 13 02 F6 | 	mov	arg01, local01
33e78     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
33e7c     FD 28 02 F6 | 	mov	local02, result1
33e80     13 13 02 F6 | 	mov	arg01, local01
33e84                 | '     return _gc_free(ptr);
33e84     DC 5D BF FD | 	call	#__system___gc_free
33e88     00 28 0E F2 | 	cmp	local02, #0 wz
33e8c     14 13 02 56 |  if_ne	mov	arg01, local02
33e90     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1027
33e94                 | '     return r;
33e94     14 FB 01 F6 | 	mov	result1, local02
33e98     A7 F0 03 F6 | 	mov	ptra, fp
33e9c     B2 00 A0 FD | 	call	#popregs_
33ea0                 | _fatfs_cc_v_closedir_ret
33ea0     2D 00 64 FD | 	ret
33ea4                 | 
33ea4                 | _fatfs_cc_v_readdir
33ea4     01 4A 05 F6 | 	mov	COUNT_, #1
33ea8     A8 00 A0 FD | 	call	#pushregs_
33eac     2C F1 07 F1 | 	add	ptra, #300
33eb0     04 4E 05 F1 | 	add	fp, #4
33eb4     A7 12 62 FC | 	wrlong	arg01, fp
33eb8     04 4E 05 F1 | 	add	fp, #4
33ebc     A7 14 62 FC | 	wrlong	arg02, fp
33ec0     04 4E 85 F1 | 	sub	fp, #4
33ec4     A7 16 02 FB | 	rdlong	arg03, fp
33ec8     04 16 06 F1 | 	add	arg03, #4
33ecc     0B 13 02 FB | 	rdlong	arg01, arg03
33ed0     08 4E 05 F1 | 	add	fp, #8
33ed4     A7 14 02 F6 | 	mov	arg02, fp
33ed8     0C 4E 85 F1 | 	sub	fp, #12
33edc     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
33ee0     28 4F 05 F1 | 	add	fp, #296
33ee4     A7 FA 61 FC | 	wrlong	result1, fp
33ee8     28 4F 85 F1 | 	sub	fp, #296
33eec     00 FA 0D F2 | 	cmp	result1, #0 wz
33ef0     14 00 90 AD |  if_e	jmp	#LR__5130
33ef4                 | '         return _set_dos_error(r);
33ef4     28 4F 05 F1 | 	add	fp, #296
33ef8     A7 12 02 FB | 	rdlong	arg01, fp
33efc     28 4F 85 F1 | 	sub	fp, #296
33f00     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1027
33f04     C4 00 90 FD | 	jmp	#LR__5133
33f08                 | LR__5130
33f08     28 4E 05 F1 | 	add	fp, #40
33f0c     A7 16 CA FA | 	rdbyte	arg03, fp wz
33f10     28 4E 85 F1 | 	sub	fp, #40
33f14                 | '         return -1;
33f14     01 FA 65 A6 |  if_e	neg	result1, #1
33f18     B0 00 90 AD |  if_e	jmp	#LR__5133
33f1c     08 4E 05 F1 | 	add	fp, #8
33f20     A7 12 02 FB | 	rdlong	arg01, fp
33f24     20 4E 05 F1 | 	add	fp, #32
33f28     A7 14 02 F6 | 	mov	arg02, fp
33f2c     28 4E 85 F1 | 	sub	fp, #40
33f30     3F 16 06 F6 | 	mov	arg03, #63
33f34     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
33f38     08 4E 05 F1 | 	add	fp, #8
33f3c     A7 16 02 FB | 	rdlong	arg03, fp
33f40     3F 16 06 F1 | 	add	arg03, #63
33f44     0B 01 48 FC | 	wrbyte	#0, arg03
33f48     0C 4E 05 F1 | 	add	fp, #12
33f4c     A7 16 C2 FA | 	rdbyte	arg03, fp
33f50     14 4E 85 F1 | 	sub	fp, #20
33f54     10 16 CE F7 | 	test	arg03, #16 wz
33f58     18 00 90 AD |  if_e	jmp	#LR__5131
33f5c     08 4E 05 F1 | 	add	fp, #8
33f60     A7 16 02 FB | 	rdlong	arg03, fp
33f64     08 4E 85 F1 | 	sub	fp, #8
33f68     50 16 06 F1 | 	add	arg03, #80
33f6c     0B 03 48 FC | 	wrbyte	#1, arg03
33f70     14 00 90 FD | 	jmp	#LR__5132
33f74                 | LR__5131
33f74     08 4E 05 F1 | 	add	fp, #8
33f78     A7 16 02 FB | 	rdlong	arg03, fp
33f7c     08 4E 85 F1 | 	sub	fp, #8
33f80     50 16 06 F1 | 	add	arg03, #80
33f84     0B 01 48 FC | 	wrbyte	#0, arg03
33f88                 | LR__5132
33f88     08 4E 05 F1 | 	add	fp, #8
33f8c     A7 16 02 FB | 	rdlong	arg03, fp
33f90     04 4E 05 F1 | 	add	fp, #4
33f94     A7 14 02 FB | 	rdlong	arg02, fp
33f98     48 16 06 F1 | 	add	arg03, #72
33f9c     0B 15 62 FC | 	wrlong	arg02, arg03
33fa0     04 4E 85 F1 | 	sub	fp, #4
33fa4     A7 26 02 FB | 	rdlong	local01, fp
33fa8     08 4E 05 F1 | 	add	fp, #8
33fac     A7 12 E2 FA | 	rdword	arg01, fp
33fb0     02 4E 05 F1 | 	add	fp, #2
33fb4     A7 14 E2 FA | 	rdword	arg02, fp
33fb8     12 4E 85 F1 | 	sub	fp, #18
33fbc     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_1025
33fc0     4C 26 06 F1 | 	add	local01, #76
33fc4     13 FB 61 FC | 	wrlong	result1, local01
33fc8                 | '         ent->d_type =  (0) ;
33fc8                 | '     }
33fc8                 | '     ent->d_size = finfo.fsize;
33fc8                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
33fc8                 | '     return 0;
33fc8     00 FA 05 F6 | 	mov	result1, #0
33fcc                 | LR__5133
33fcc     A7 F0 03 F6 | 	mov	ptra, fp
33fd0     B2 00 A0 FD | 	call	#popregs_
33fd4                 | _fatfs_cc_v_readdir_ret
33fd4     2D 00 64 FD | 	ret
33fd8                 | 
33fd8                 | _fatfs_cc_v_stat
33fd8     03 4A 05 F6 | 	mov	COUNT_, #3
33fdc     A8 00 A0 FD | 	call	#pushregs_
33fe0     30 F1 07 F1 | 	add	ptra, #304
33fe4     04 4E 05 F1 | 	add	fp, #4
33fe8     A7 12 62 FC | 	wrlong	arg01, fp
33fec     04 4E 05 F1 | 	add	fp, #4
33ff0     A7 14 62 FC | 	wrlong	arg02, fp
33ff4     08 4E 85 F1 | 	sub	fp, #8
33ff8     0A 13 02 F6 | 	mov	arg01, arg02
33ffc     00 14 06 F6 | 	mov	arg02, #0
34000     30 16 06 F6 | 	mov	arg03, #48
34004     98 00 A0 FD | 	call	#\builtin_bytefill_
34008     04 4E 05 F1 | 	add	fp, #4
3400c     A7 FA 01 FB | 	rdlong	result1, fp
34010     04 4E 85 F1 | 	sub	fp, #4
34014     FD FA C9 FA | 	rdbyte	result1, result1 wz
34018     2C 00 90 AD |  if_e	jmp	#LR__5140
3401c     04 4E 05 F1 | 	add	fp, #4
34020     A7 FA 01 FB | 	rdlong	result1, fp
34024     04 4E 85 F1 | 	sub	fp, #4
34028     FD FA C1 FA | 	rdbyte	result1, result1
3402c     2E FA 0D F2 | 	cmp	result1, #46 wz
34030     04 4E 05 A1 |  if_e	add	fp, #4
34034     A7 26 02 AB |  if_e	rdlong	local01, fp
34038     04 4E 85 A1 |  if_e	sub	fp, #4
3403c     01 26 06 A1 |  if_e	add	local01, #1
34040     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
34044     18 00 90 5D |  if_ne	jmp	#LR__5141
34048                 | LR__5140
34048     18 4E 05 F1 | 	add	fp, #24
3404c     A7 20 48 FC | 	wrbyte	#16, fp
34050     0C 4E 85 F1 | 	sub	fp, #12
34054     A7 00 68 FC | 	wrlong	#0, fp
34058     0C 4E 85 F1 | 	sub	fp, #12
3405c     24 00 90 FD | 	jmp	#LR__5142
34060                 | LR__5141
34060     04 4E 05 F1 | 	add	fp, #4
34064     A7 12 02 FB | 	rdlong	arg01, fp
34068     0C 4E 05 F1 | 	add	fp, #12
3406c     A7 14 02 F6 | 	mov	arg02, fp
34070     10 4E 85 F1 | 	sub	fp, #16
34074     AC EB BF FD | 	call	#_fatfs_cc_f_stat
34078     0C 4E 05 F1 | 	add	fp, #12
3407c     A7 FA 61 FC | 	wrlong	result1, fp
34080     0C 4E 85 F1 | 	sub	fp, #12
34084                 | LR__5142
34084     0C 4E 05 F1 | 	add	fp, #12
34088     A7 28 0A FB | 	rdlong	local02, fp wz
3408c     0C 4E 85 F1 | 	sub	fp, #12
34090     14 00 90 AD |  if_e	jmp	#LR__5143
34094                 | '         return _set_dos_error(r);
34094     0C 4E 05 F1 | 	add	fp, #12
34098     A7 12 02 FB | 	rdlong	arg01, fp
3409c     0C 4E 85 F1 | 	sub	fp, #12
340a0     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1027
340a4     14 01 90 FD | 	jmp	#LR__5144
340a8                 | LR__5143
340a8     2C 4F 05 F1 | 	add	fp, #300
340ac     A7 48 6A FC | 	wrlong	#292, fp
340b0     14 4F 85 F1 | 	sub	fp, #276
340b4     A7 2A C2 FA | 	rdbyte	local03, fp
340b8     18 4E 85 F1 | 	sub	fp, #24
340bc     01 2A CE F7 | 	test	local03, #1 wz
340c0     2C 4F 05 A1 |  if_e	add	fp, #300
340c4     A7 2A 02 AB |  if_e	rdlong	local03, fp
340c8     92 2A 46 A5 |  if_e	or	local03, #146
340cc     A7 2A 62 AC |  if_e	wrlong	local03, fp
340d0     2C 4F 85 A1 |  if_e	sub	fp, #300
340d4     18 4E 05 F1 | 	add	fp, #24
340d8     A7 2A C2 FA | 	rdbyte	local03, fp
340dc     18 4E 85 F1 | 	sub	fp, #24
340e0     10 2A CE F7 | 	test	local03, #16 wz
340e4     2C 4F 05 51 |  if_ne	add	fp, #300
340e8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
340ec     08 00 00 5F 
340f0     49 2A 46 55 |  if_ne	or	local03, ##4169
340f4     A7 2A 62 5C |  if_ne	wrlong	local03, fp
340f8     2C 4F 85 51 |  if_ne	sub	fp, #300
340fc     08 4E 05 F1 | 	add	fp, #8
34100     A7 2A 02 FB | 	rdlong	local03, fp
34104     24 4F 05 F1 | 	add	fp, #292
34108     A7 28 02 FB | 	rdlong	local02, fp
3410c     08 2A 06 F1 | 	add	local03, #8
34110     15 29 62 FC | 	wrlong	local02, local03
34114     24 4F 85 F1 | 	sub	fp, #292
34118     A7 2A 02 FB | 	rdlong	local03, fp
3411c     0C 2A 06 F1 | 	add	local03, #12
34120     15 03 68 FC | 	wrlong	#1, local03
34124     A7 2A 02 FB | 	rdlong	local03, fp
34128     08 4E 05 F1 | 	add	fp, #8
3412c     A7 28 02 FB | 	rdlong	local02, fp
34130     18 2A 06 F1 | 	add	local03, #24
34134     15 29 62 FC | 	wrlong	local02, local03
34138     08 4E 85 F1 | 	sub	fp, #8
3413c     A7 2A 02 FB | 	rdlong	local03, fp
34140     1C 2A 06 F1 | 	add	local03, #28
34144     01 00 80 FF 
34148     15 01 68 FC | 	wrlong	##512, local03
3414c     A7 28 02 FB | 	rdlong	local02, fp
34150     14 2B 02 F6 | 	mov	local03, local02
34154     18 28 06 F1 | 	add	local02, #24
34158     14 29 02 FB | 	rdlong	local02, local02
3415c     FF 29 06 F1 | 	add	local02, #511
34160     14 29 52 F6 | 	abs	local02, local02 wc
34164     09 28 46 F0 | 	shr	local02, #9
34168     14 29 82 F6 | 	negc	local02, local02
3416c     20 2A 06 F1 | 	add	local03, #32
34170     15 29 62 FC | 	wrlong	local02, local03
34174     A7 28 02 FB | 	rdlong	local02, fp
34178     14 2B 02 F6 | 	mov	local03, local02
3417c     14 27 02 F6 | 	mov	local01, local02
34180     0C 4E 05 F1 | 	add	fp, #12
34184     A7 12 E2 FA | 	rdword	arg01, fp
34188     02 4E 05 F1 | 	add	fp, #2
3418c     A7 14 E2 FA | 	rdword	arg02, fp
34190     16 4E 85 F1 | 	sub	fp, #22
34194     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_1025
34198     2C 26 06 F1 | 	add	local01, #44
3419c     13 FB 61 FC | 	wrlong	result1, local01
341a0     28 28 06 F1 | 	add	local02, #40
341a4     14 FB 61 FC | 	wrlong	result1, local02
341a8     24 2A 06 F1 | 	add	local03, #36
341ac     15 FB 61 FC | 	wrlong	result1, local03
341b0                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
341b0                 | '     }
341b0                 | '     buf->st_mode = mode;
341b0                 | '     buf->st_nlink = 1;
341b0                 | '     buf->st_size = finfo.fsize;
341b0                 | '     buf->st_blksize = 512;
341b0                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
341b0                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
341b0                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
341b0                 | '     return r;
341b0     0C 4E 05 F1 | 	add	fp, #12
341b4     A7 FA 01 FB | 	rdlong	result1, fp
341b8     0C 4E 85 F1 | 	sub	fp, #12
341bc                 | LR__5144
341bc     A7 F0 03 F6 | 	mov	ptra, fp
341c0     B2 00 A0 FD | 	call	#popregs_
341c4                 | _fatfs_cc_v_stat_ret
341c4     2D 00 64 FD | 	ret
341c8                 | 
341c8                 | _fatfs_cc_v_read
341c8     00 4A 05 F6 | 	mov	COUNT_, #0
341cc     A8 00 A0 FD | 	call	#pushregs_
341d0     1C F0 07 F1 | 	add	ptra, #28
341d4     04 4E 05 F1 | 	add	fp, #4
341d8     A7 12 62 FC | 	wrlong	arg01, fp
341dc     04 4E 05 F1 | 	add	fp, #4
341e0     A7 14 62 FC | 	wrlong	arg02, fp
341e4     04 4E 05 F1 | 	add	fp, #4
341e8     A7 16 62 FC | 	wrlong	arg03, fp
341ec     08 4E 85 F1 | 	sub	fp, #8
341f0     A7 12 02 FB | 	rdlong	arg01, fp
341f4     09 13 0A FB | 	rdlong	arg01, arg01 wz
341f8     0C 4E 05 F1 | 	add	fp, #12
341fc     A7 12 62 FC | 	wrlong	arg01, fp
34200     10 4E 85 F1 | 	sub	fp, #16
34204                 | '         return _seterror( 5 );
34204     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34208     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
3420c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34210     01 FA 65 A6 |  if_e	neg	result1, #1
34214     B8 00 90 AD |  if_e	jmp	#LR__5152
34218     10 4E 05 F1 | 	add	fp, #16
3421c     A7 12 02 FB | 	rdlong	arg01, fp
34220     02 00 00 FF 
34224     14 12 06 F1 | 	add	arg01, ##1044
34228     08 4E 85 F1 | 	sub	fp, #8
3422c     A7 14 02 FB | 	rdlong	arg02, fp
34230     04 4E 05 F1 | 	add	fp, #4
34234     A7 16 02 FB | 	rdlong	arg03, fp
34238     0C 4E 05 F1 | 	add	fp, #12
3423c     A7 18 02 F6 | 	mov	arg04, fp
34240     18 4E 85 F1 | 	sub	fp, #24
34244     C4 CE BF FD | 	call	#_fatfs_cc_f_read
34248     14 4E 05 F1 | 	add	fp, #20
3424c     A7 FA 61 FC | 	wrlong	result1, fp
34250     14 4E 85 F1 | 	sub	fp, #20
34254     00 FA 0D F2 | 	cmp	result1, #0 wz
34258     34 00 90 AD |  if_e	jmp	#LR__5150
3425c     04 4E 05 F1 | 	add	fp, #4
34260     A7 18 02 FB | 	rdlong	arg04, fp
34264     0C 17 02 F6 | 	mov	arg03, arg04
34268     08 18 06 F1 | 	add	arg04, #8
3426c     0C 19 02 FB | 	rdlong	arg04, arg04
34270     20 18 46 F5 | 	or	arg04, #32
34274     08 16 06 F1 | 	add	arg03, #8
34278     0B 19 62 FC | 	wrlong	arg04, arg03
3427c                 | '         fil->state |=  (0x20) ;
3427c                 | '         return _set_dos_error(r);
3427c     10 4E 05 F1 | 	add	fp, #16
34280     A7 12 02 FB | 	rdlong	arg01, fp
34284     14 4E 85 F1 | 	sub	fp, #20
34288     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1027
3428c     40 00 90 FD | 	jmp	#LR__5152
34290                 | LR__5150
34290     18 4E 05 F1 | 	add	fp, #24
34294     A7 FA 09 FB | 	rdlong	result1, fp wz
34298     18 4E 85 F1 | 	sub	fp, #24
3429c     24 00 90 5D |  if_ne	jmp	#LR__5151
342a0     04 4E 05 F1 | 	add	fp, #4
342a4     A7 FA 01 FB | 	rdlong	result1, fp
342a8     FD 18 02 F6 | 	mov	arg04, result1
342ac     04 4E 85 F1 | 	sub	fp, #4
342b0     08 FA 05 F1 | 	add	result1, #8
342b4     FD FA 01 FB | 	rdlong	result1, result1
342b8     10 FA 45 F5 | 	or	result1, #16
342bc     08 18 06 F1 | 	add	arg04, #8
342c0     0C FB 61 FC | 	wrlong	result1, arg04
342c4                 | LR__5151
342c4                 | '         fil->state |=  (0x10) ;
342c4                 | '     }
342c4                 | '     return x;
342c4     18 4E 05 F1 | 	add	fp, #24
342c8     A7 FA 01 FB | 	rdlong	result1, fp
342cc     18 4E 85 F1 | 	sub	fp, #24
342d0                 | LR__5152
342d0     A7 F0 03 F6 | 	mov	ptra, fp
342d4     B2 00 A0 FD | 	call	#popregs_
342d8                 | _fatfs_cc_v_read_ret
342d8     2D 00 64 FD | 	ret
342dc                 | 
342dc                 | _fatfs_cc_v_write
342dc     00 4A 05 F6 | 	mov	COUNT_, #0
342e0     A8 00 A0 FD | 	call	#pushregs_
342e4     1C F0 07 F1 | 	add	ptra, #28
342e8     04 4E 05 F1 | 	add	fp, #4
342ec     A7 12 62 FC | 	wrlong	arg01, fp
342f0     04 4E 05 F1 | 	add	fp, #4
342f4     A7 14 62 FC | 	wrlong	arg02, fp
342f8     04 4E 05 F1 | 	add	fp, #4
342fc     A7 16 62 FC | 	wrlong	arg03, fp
34300     08 4E 85 F1 | 	sub	fp, #8
34304     A7 12 02 FB | 	rdlong	arg01, fp
34308     09 13 0A FB | 	rdlong	arg01, arg01 wz
3430c     0C 4E 05 F1 | 	add	fp, #12
34310     A7 12 62 FC | 	wrlong	arg01, fp
34314     10 4E 85 F1 | 	sub	fp, #16
34318                 | '         return _seterror( 5 );
34318     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
3431c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
34320     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34324     01 FA 65 A6 |  if_e	neg	result1, #1
34328     84 00 90 AD |  if_e	jmp	#LR__5161
3432c     10 4E 05 F1 | 	add	fp, #16
34330     A7 12 02 FB | 	rdlong	arg01, fp
34334     02 00 00 FF 
34338     14 12 06 F1 | 	add	arg01, ##1044
3433c     08 4E 85 F1 | 	sub	fp, #8
34340     A7 14 02 FB | 	rdlong	arg02, fp
34344     04 4E 05 F1 | 	add	fp, #4
34348     A7 16 02 FB | 	rdlong	arg03, fp
3434c     0C 4E 05 F1 | 	add	fp, #12
34350     A7 18 02 F6 | 	mov	arg04, fp
34354     18 4E 85 F1 | 	sub	fp, #24
34358     4C D4 BF FD | 	call	#_fatfs_cc_f_write
3435c     14 4E 05 F1 | 	add	fp, #20
34360     A7 FA 61 FC | 	wrlong	result1, fp
34364     14 4E 85 F1 | 	sub	fp, #20
34368     00 FA 0D F2 | 	cmp	result1, #0 wz
3436c     34 00 90 AD |  if_e	jmp	#LR__5160
34370     04 4E 05 F1 | 	add	fp, #4
34374     A7 18 02 FB | 	rdlong	arg04, fp
34378     0C 17 02 F6 | 	mov	arg03, arg04
3437c     08 18 06 F1 | 	add	arg04, #8
34380     0C 19 02 FB | 	rdlong	arg04, arg04
34384     20 18 46 F5 | 	or	arg04, #32
34388     08 16 06 F1 | 	add	arg03, #8
3438c     0B 19 62 FC | 	wrlong	arg04, arg03
34390                 | '         fil->state |=  (0x20) ;
34390                 | '         return _set_dos_error(r);
34390     10 4E 05 F1 | 	add	fp, #16
34394     A7 12 02 FB | 	rdlong	arg01, fp
34398     14 4E 85 F1 | 	sub	fp, #20
3439c     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1027
343a0     0C 00 90 FD | 	jmp	#LR__5161
343a4                 | LR__5160
343a4                 | '     }
343a4                 | '     return x;
343a4     18 4E 05 F1 | 	add	fp, #24
343a8     A7 FA 01 FB | 	rdlong	result1, fp
343ac     18 4E 85 F1 | 	sub	fp, #24
343b0                 | LR__5161
343b0     A7 F0 03 F6 | 	mov	ptra, fp
343b4     B2 00 A0 FD | 	call	#popregs_
343b8                 | _fatfs_cc_v_write_ret
343b8     2D 00 64 FD | 	ret
343bc                 | 
343bc                 | _fatfs_cc_v_lseek
343bc     04 4A 05 F6 | 	mov	COUNT_, #4
343c0     A8 00 A0 FD | 	call	#pushregs_
343c4     0A 27 02 F6 | 	mov	local01, arg02
343c8     0B 29 02 F6 | 	mov	local02, arg03
343cc     09 2B 02 FB | 	rdlong	local03, arg01
343d0     02 00 00 FF 
343d4     14 2A 0E F1 | 	add	local03, ##1044 wz
343d8                 | '         return _seterror( 5 );
343d8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
343dc     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
343e0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
343e4     01 FA 65 A6 |  if_e	neg	result1, #1
343e8     4C 00 90 AD |  if_e	jmp	#LR__5172
343ec     00 28 0E F2 | 	cmp	local02, #0 wz
343f0     24 00 90 AD |  if_e	jmp	#LR__5170
343f4     01 28 0E F2 | 	cmp	local02, #1 wz
343f8     14 2A 06 A1 |  if_e	add	local03, #20
343fc     15 2D 02 AB |  if_e	rdlong	local04, local03
34400     14 2A 86 A1 |  if_e	sub	local03, #20
34404     16 27 02 A1 |  if_e	add	local01, local04
34408     0C 2A 06 51 |  if_ne	add	local03, #12
3440c     15 2D 02 5B |  if_ne	rdlong	local04, local03
34410     0C 2A 86 51 |  if_ne	sub	local03, #12
34414     16 27 02 51 |  if_ne	add	local01, local04
34418                 | LR__5170
34418     13 15 02 F6 | 	mov	arg02, local01
3441c     15 13 02 F6 | 	mov	arg01, local03
34420     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
34424     FD 12 0A F6 | 	mov	arg01, result1 wz
34428     08 00 90 AD |  if_e	jmp	#LR__5171
3442c                 | '         return _set_dos_error(result);
3442c     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1027
34430     04 00 90 FD | 	jmp	#LR__5172
34434                 | LR__5171
34434                 | '     }
34434                 | '     return offset;
34434     13 FB 01 F6 | 	mov	result1, local01
34438                 | LR__5172
34438     A7 F0 03 F6 | 	mov	ptra, fp
3443c     B2 00 A0 FD | 	call	#popregs_
34440                 | _fatfs_cc_v_lseek_ret
34440     2D 00 64 FD | 	ret
34444                 | 
34444                 | _fatfs_cc_v_ioctl
34444                 | ' {
34444                 | '     return _seterror( 10 );
34444     20 E6 05 F1 | 	add	ptr___system__dat__, #32
34448     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
3444c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
34450     01 FA 65 F6 | 	neg	result1, #1
34454                 | _fatfs_cc_v_ioctl_ret
34454     2D 00 64 FD | 	ret
34458                 | 
34458                 | _fatfs_cc_v_mkdir
34458     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
3445c     FD 12 02 F6 | 	mov	arg01, result1
34460                 | ' 
34460                 | '     r = f_mkdir(name);
34460                 | '     return _set_dos_error(r);
34460     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1027
34464                 | _fatfs_cc_v_mkdir_ret
34464     2D 00 64 FD | 	ret
34468                 | 
34468                 | _fatfs_cc_v_remove
34468     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
3446c     FD 12 02 F6 | 	mov	arg01, result1
34470                 | ' 
34470                 | '     r = f_unlink(name);
34470                 | '     return _set_dos_error(r);
34470     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1027
34474                 | _fatfs_cc_v_remove_ret
34474     2D 00 64 FD | 	ret
34478                 | 
34478                 | _fatfs_cc_v_rmdir
34478     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
3447c     FD 12 02 F6 | 	mov	arg01, result1
34480                 | ' 
34480                 | '     r = f_unlink(name);
34480                 | '     return _set_dos_error(r);
34480     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1027
34484                 | _fatfs_cc_v_rmdir_ret
34484     2D 00 64 FD | 	ret
34488                 | 
34488                 | _fatfs_cc_v_rename
34488     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
3448c     FD 12 02 F6 | 	mov	arg01, result1
34490                 | '     return _set_dos_error(r);
34490     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1027
34494                 | _fatfs_cc_v_rename_ret
34494     2D 00 64 FD | 	ret
34498                 | 
34498                 | _fatfs_cc_v_open
34498     07 4A 05 F6 | 	mov	COUNT_, #7
3449c     A8 00 A0 FD | 	call	#pushregs_
344a0     09 27 02 F6 | 	mov	local01, arg01
344a4     0A 29 02 F6 | 	mov	local02, arg02
344a8     0B 2B 02 F6 | 	mov	local03, arg03
344ac     03 00 00 FF 
344b0     3C 12 06 F6 | 	mov	arg01, ##1596
344b4                 | '     return _gc_alloc(size);
344b4     10 14 06 F6 | 	mov	arg02, #16
344b8     9C 56 BF FD | 	call	#__system___gc_doalloc
344bc     FD 2C 0A F6 | 	mov	local04, result1 wz
344c0                 | '       return _seterror( 7 );
344c0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
344c4     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
344c8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
344cc     01 FA 65 A6 |  if_e	neg	result1, #1
344d0     98 00 90 AD |  if_e	jmp	#LR__5186
344d4     16 13 02 F6 | 	mov	arg01, local04
344d8     00 14 06 F6 | 	mov	arg02, #0
344dc     03 00 00 FF 
344e0     3C 16 06 F6 | 	mov	arg03, ##1596
344e4     98 00 A0 FD | 	call	#\builtin_bytefill_
344e8                 | '   switch (flags & 3) {
344e8     15 2F 02 F6 | 	mov	local05, local03
344ec     03 2E 0E F5 | 	and	local05, #3 wz
344f0     0C 00 90 AD |  if_e	jmp	#LR__5180
344f4     01 2E 0E F2 | 	cmp	local05, #1 wz
344f8     0C 00 90 AD |  if_e	jmp	#LR__5181
344fc     10 00 90 FD | 	jmp	#LR__5182
34500                 | LR__5180
34500     01 30 06 F6 | 	mov	local06, #1
34504                 | '       fs_flags =  0x01 ;
34504                 | '       break;
34504     0C 00 90 FD | 	jmp	#LR__5183
34508                 | LR__5181
34508     02 30 06 F6 | 	mov	local06, #2
3450c                 | '       fs_flags =  0x02 ;
3450c                 | '       break;
3450c     04 00 90 FD | 	jmp	#LR__5183
34510                 | LR__5182
34510     03 30 06 F6 | 	mov	local06, #3
34514                 | '       fs_flags =  0x01  |  0x02 ;
34514                 | '       break;
34514                 | LR__5183
34514     08 2A CE F7 | 	test	local03, #8 wz
34518     18 30 46 55 |  if_ne	or	local06, #24
3451c     08 00 90 5D |  if_ne	jmp	#LR__5184
34520     20 2A CE F7 | 	test	local03, #32 wz
34524     30 30 46 55 |  if_ne	or	local06, #48
34528                 | LR__5184
34528     02 00 00 FF 
3452c     14 2C 06 F1 | 	add	local04, ##1044
34530     16 13 02 F6 | 	mov	arg01, local04
34534     02 00 00 FF 
34538     14 2C 86 F1 | 	sub	local04, ##1044
3453c     14 15 02 F6 | 	mov	arg02, local02
34540     18 17 02 F6 | 	mov	arg03, local06
34544     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
34548     FD 32 0A F6 | 	mov	local07, result1 wz
3454c     14 00 90 AD |  if_e	jmp	#LR__5185
34550     16 13 02 F6 | 	mov	arg01, local04
34554                 | '     return _gc_free(ptr);
34554     0C 57 BF FD | 	call	#__system___gc_free
34558                 | '     free(f);
34558                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34558                 | '     return _set_dos_error(r);
34558     19 13 02 F6 | 	mov	arg01, local07
3455c     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1027
34560     08 00 90 FD | 	jmp	#LR__5186
34564                 | LR__5185
34564     13 2D 62 FC | 	wrlong	local04, local01
34568                 | '   }
34568                 | '   fil->vfsdata = f;
34568                 | '   return 0;
34568     00 FA 05 F6 | 	mov	result1, #0
3456c                 | LR__5186
3456c     A7 F0 03 F6 | 	mov	ptra, fp
34570     B2 00 A0 FD | 	call	#popregs_
34574                 | _fatfs_cc_v_open_ret
34574     2D 00 64 FD | 	ret
34578                 | 
34578                 | _fatfs_cc_v_flush
34578     09 13 02 FB | 	rdlong	arg01, arg01
3457c     02 00 00 FF 
34580     14 12 0E F1 | 	add	arg01, ##1044 wz
34584                 | '         return _seterror( 5 );
34584     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34588     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
3458c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34590     01 FA 65 A6 |  if_e	neg	result1, #1
34594     0C 00 90 AD |  if_e	jmp	#LR__5190
34598     00 DA BF FD | 	call	#_fatfs_cc_f_sync
3459c     FD 12 02 F6 | 	mov	arg01, result1
345a0                 | '     }
345a0                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
345a0                 | '     result = f_sync(f);
345a0                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
345a0                 | '     return _set_dos_error(result);
345a0     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1027
345a4                 | LR__5190
345a4                 | _fatfs_cc_v_flush_ret
345a4     2D 00 64 FD | 	ret
345a8                 | 
345a8                 | _fatfs_cc_v_init
345a8                 | ' {
345a8                 | '     return 0;
345a8     00 FA 05 F6 | 	mov	result1, #0
345ac                 | _fatfs_cc_v_init_ret
345ac     2D 00 64 FD | 	ret
345b0                 | 
345b0                 | _fatfs_cc_v_deinit
345b0     AA 01 00 FF 
345b4     24 15 06 F6 | 	mov	arg02, ##@LR__5386
345b8     00 12 06 F6 | 	mov	arg01, #0
345bc     00 16 06 F6 | 	mov	arg03, #0
345c0     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
345c4     01 00 00 FF 
345c8     08 E4 05 F1 | 	add	objptr, ##520
345cc     F2 12 02 FB | 	rdlong	arg01, objptr
345d0     04 E4 05 F1 | 	add	objptr, #4
345d4     F2 14 02 FB | 	rdlong	arg02, objptr
345d8     01 00 00 FF 
345dc     0C E4 85 F1 | 	sub	objptr, ##524
345e0     F0 3D BF FD | 	call	#__system___freepins
345e4                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
345e4                 | '     _freepins(f_pinmask);
345e4                 | '     return 0;
345e4     00 FA 05 F6 | 	mov	result1, #0
345e8                 | _fatfs_cc_v_deinit_ret
345e8     2D 00 64 FD | 	ret
345ec                 | 
345ec                 | _fatfs_cc_get_vfs
345ec     01 4A 05 F6 | 	mov	COUNT_, #1
345f0     A8 00 A0 FD | 	call	#pushregs_
345f4     09 27 02 F6 | 	mov	local01, arg01
345f8     50 12 06 F6 | 	mov	arg01, #80
345fc     28 55 BF FD | 	call	#__system___gc_alloc_managed
34600     FD 12 02 F6 | 	mov	arg01, result1
34604     F2 FA 01 F6 | 	mov	result1, objptr
34608     00 50 05 FF 
3460c     00 FA 45 F5 | 	or	result1, ##178257920
34610     09 FB 61 FC | 	wrlong	result1, arg01
34614     F2 FA 01 F6 | 	mov	result1, objptr
34618     00 58 05 FF 
3461c     00 FA 45 F5 | 	or	result1, ##179306496
34620     04 12 06 F1 | 	add	arg01, #4
34624     09 FB 61 FC | 	wrlong	result1, arg01
34628     F2 FA 01 F6 | 	mov	result1, objptr
3462c     00 60 05 FF 
34630     00 FA 45 F5 | 	or	result1, ##180355072
34634     04 12 06 F1 | 	add	arg01, #4
34638     09 FB 61 FC | 	wrlong	result1, arg01
3463c     F2 FA 01 F6 | 	mov	result1, objptr
34640     00 68 05 FF 
34644     00 FA 45 F5 | 	or	result1, ##181403648
34648     04 12 06 F1 | 	add	arg01, #4
3464c     09 FB 61 FC | 	wrlong	result1, arg01
34650     F2 FA 01 F6 | 	mov	result1, objptr
34654     00 70 05 FF 
34658     00 FA 45 F5 | 	or	result1, ##182452224
3465c     04 12 06 F1 | 	add	arg01, #4
34660     09 FB 61 FC | 	wrlong	result1, arg01
34664     04 12 06 F1 | 	add	arg01, #4
34668     09 01 68 FC | 	wrlong	#0, arg01
3466c     04 12 06 F1 | 	add	arg01, #4
34670     09 27 62 FC | 	wrlong	local01, arg01
34674     04 12 06 F1 | 	add	arg01, #4
34678     09 01 68 FC | 	wrlong	#0, arg01
3467c     F2 FA 01 F6 | 	mov	result1, objptr
34680     00 78 05 FF 
34684     00 FA 45 F5 | 	or	result1, ##183500800
34688     04 12 06 F1 | 	add	arg01, #4
3468c     09 FB 61 FC | 	wrlong	result1, arg01
34690     F2 FA 01 F6 | 	mov	result1, objptr
34694     00 80 05 FF 
34698     00 FA 45 F5 | 	or	result1, ##184549376
3469c     04 12 06 F1 | 	add	arg01, #4
346a0     09 FB 61 FC | 	wrlong	result1, arg01
346a4     F2 FA 01 F6 | 	mov	result1, objptr
346a8     00 88 05 FF 
346ac     00 FA 45 F5 | 	or	result1, ##185597952
346b0     04 12 06 F1 | 	add	arg01, #4
346b4     09 FB 61 FC | 	wrlong	result1, arg01
346b8     F2 FA 01 F6 | 	mov	result1, objptr
346bc     00 90 05 FF 
346c0     00 FA 45 F5 | 	or	result1, ##186646528
346c4     04 12 06 F1 | 	add	arg01, #4
346c8     09 FB 61 FC | 	wrlong	result1, arg01
346cc     F2 FA 01 F6 | 	mov	result1, objptr
346d0     00 98 05 FF 
346d4     00 FA 45 F5 | 	or	result1, ##187695104
346d8     04 12 06 F1 | 	add	arg01, #4
346dc     09 FB 61 FC | 	wrlong	result1, arg01
346e0     F2 FA 01 F6 | 	mov	result1, objptr
346e4     00 A0 05 FF 
346e8     00 FA 45 F5 | 	or	result1, ##188743680
346ec     04 12 06 F1 | 	add	arg01, #4
346f0     09 FB 61 FC | 	wrlong	result1, arg01
346f4     F2 FA 01 F6 | 	mov	result1, objptr
346f8     00 A8 05 FF 
346fc     00 FA 45 F5 | 	or	result1, ##189792256
34700     04 12 06 F1 | 	add	arg01, #4
34704     09 FB 61 FC | 	wrlong	result1, arg01
34708     F2 FA 01 F6 | 	mov	result1, objptr
3470c     00 B0 05 FF 
34710     00 FA 45 F5 | 	or	result1, ##190840832
34714     04 12 06 F1 | 	add	arg01, #4
34718     09 FB 61 FC | 	wrlong	result1, arg01
3471c     F2 FA 01 F6 | 	mov	result1, objptr
34720     00 B8 05 FF 
34724     00 FA 45 F5 | 	or	result1, ##191889408
34728     04 12 06 F1 | 	add	arg01, #4
3472c     09 FB 61 FC | 	wrlong	result1, arg01
34730     F2 FA 01 F6 | 	mov	result1, objptr
34734     00 C0 05 FF 
34738     00 FA 45 F5 | 	or	result1, ##192937984
3473c     04 12 06 F1 | 	add	arg01, #4
34740     09 FB 61 FC | 	wrlong	result1, arg01
34744     F2 FA 01 F6 | 	mov	result1, objptr
34748     00 C8 05 FF 
3474c     00 FA 45 F5 | 	or	result1, ##193986560
34750     04 12 06 F1 | 	add	arg01, #4
34754     09 FB 61 FC | 	wrlong	result1, arg01
34758     F2 FA 01 F6 | 	mov	result1, objptr
3475c     00 D0 05 FF 
34760     00 FA 45 F5 | 	or	result1, ##195035136
34764     04 12 06 F1 | 	add	arg01, #4
34768     09 FB 61 FC | 	wrlong	result1, arg01
3476c     4C 12 86 F1 | 	sub	arg01, #76
34770                 | ' 
34770                 | '     v->close = &v_close;
34770                 | '     v->read = &v_read;
34770                 | '     v->write = &v_write;
34770                 | '     v->lseek = &v_lseek;
34770                 | '     v->ioctl = &v_ioctl;
34770                 | '     v->flush = 0;
34770                 | '     v->vfs_data = ptr;
34770                 | '     v->reserved = 0;
34770                 | ' 
34770                 | '     v->open = &v_open;
34770                 | '     v->creat = &v_creat;
34770                 | '     v->opendir = &v_opendir;
34770                 | '     v->closedir = &v_closedir;
34770                 | '     v->readdir = &v_readdir;
34770                 | '     v->stat = &v_stat;
34770                 | ' 
34770                 | '     v->mkdir = &v_mkdir;
34770                 | '     v->rmdir = &v_rmdir;
34770                 | ' 
34770                 | '     v->remove = &v_remove;
34770                 | '     v->rename = &v_rename;
34770                 | ' 
34770                 | '     v->init = &v_init;
34770                 | '     v->deinit = &v_deinit;
34770                 | ' 
34770                 | '     return v;
34770     09 FB 01 F6 | 	mov	result1, arg01
34774     A7 F0 03 F6 | 	mov	ptra, fp
34778     B2 00 A0 FD | 	call	#popregs_
3477c                 | _fatfs_cc_get_vfs_ret
3477c     2D 00 64 FD | 	ret
34780                 | 
34780                 | _fatfs_cc_xmit_mmc_1178
34780     01 00 00 FF 
34784     10 E4 05 F1 | 	add	objptr, ##528
34788     F2 00 02 FB | 	rdlong	_var01, objptr
3478c     08 E4 05 F1 | 	add	objptr, #8
34790     F2 02 02 FB | 	rdlong	_var02, objptr
34794     01 00 00 FF 
34798     18 E4 85 F1 | 	sub	objptr, ##536
3479c     40 02 62 FD | 	dirl	_var02
347a0     28 02 64 FD | 	setq	#1
347a4     09 05 02 FB | 	rdlong	_var03, arg01
347a8     69 04 62 FD | 	rev	_var03
347ac     1B 04 FE F9 | 	movbyts	_var03, #27
347b0     01 05 22 FC | 	wypin	_var03, _var02
347b4     0A 05 02 F6 | 	mov	_var03, arg02
347b8     02 14 4E F0 | 	shr	arg02, #2 wz
347bc     03 04 66 F0 | 	shl	_var03, #3
347c0     00 05 22 FC | 	wypin	_var03, _var01
347c4     41 02 62 FD | 	dirh	_var02
347c8     08 12 06 F1 | 	add	arg01, #8
347cc     69 06 62 FD | 	rev	_var04
347d0     1B 06 FE F9 | 	movbyts	_var04, #27
347d4                 | LR__5200
347d4     01 07 22 5C |  if_ne	wypin	_var04, _var02
347d8     09 07 02 5B |  if_ne	rdlong	_var04, arg01
347dc     04 12 06 51 |  if_ne	add	arg01, #4
347e0     69 06 62 5D |  if_ne	rev	_var04
347e4     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
347e8                 | LR__5201
347e8     40 02 72 5D |  if_ne	testp	_var02 wc
347ec     F8 FF 9F 1D |  if_a	jmp	#LR__5201
347f0     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5200
347f4                 | LR__5202
347f4     40 00 72 FD | 	testp	_var01 wc
347f8     F8 FF 9F 3D |  if_ae	jmp	#LR__5202
347fc     40 02 62 FD | 	dirl	_var02
34800     FF FF FF FF 
34804     01 FF 2B FC | 	wypin	##-1, _var02
34808     41 02 62 FD | 	dirh	_var02
3480c                 | _fatfs_cc_xmit_mmc_1178_ret
3480c     2D 00 64 FD | 	ret
34810                 | 
34810                 | _fatfs_cc_rcvr_mmc_1185
34810     01 00 00 FF 
34814     10 E4 05 F1 | 	add	objptr, ##528
34818     F2 00 02 FB | 	rdlong	_var01, objptr
3481c     0C E4 05 F1 | 	add	objptr, #12
34820     F2 02 02 FB | 	rdlong	_var02, objptr
34824     01 00 00 FF 
34828     1C E4 85 F1 | 	sub	objptr, ##540
3482c     01 03 08 FC | 	akpin	_var02
34830     0A 05 0A F6 | 	mov	_var03, arg02 wz
34834     02 04 4E F0 | 	shr	_var03, #2 wz
34838     30 00 90 AD |  if_e	jmp	#LR__5212
3483c     02 07 02 F6 | 	mov	_var04, _var03
34840     05 06 66 F0 | 	shl	_var04, #5
34844     00 07 22 FC | 	wypin	_var04, _var01
34848     01 7F 18 FC | 	wxpin	#63, _var02
3484c                 | LR__5210
3484c                 | LR__5211
3484c     40 02 72 FD | 	testp	_var02 wc
34850     F8 FF 9F 3D |  if_ae	jmp	#LR__5211
34854     01 07 8A FA | 	rdpin	_var04, _var02
34858     69 06 62 FD | 	rev	_var04
3485c     1B 06 FE F9 | 	movbyts	_var04, #27
34860     09 07 62 FC | 	wrlong	_var04, arg01
34864     04 12 06 F1 | 	add	arg01, #4
34868     F8 05 6E FB | 	djnz	_var03, #LR__5210
3486c                 | LR__5212
3486c     03 14 0E F5 | 	and	arg02, #3 wz
34870     24 00 90 AD |  if_e	jmp	#LR__5215
34874     01 4F 18 FC | 	wxpin	#39, _var02
34878                 | LR__5213
34878     00 11 28 FC | 	wypin	#8, _var01
3487c                 | LR__5214
3487c     40 02 72 FD | 	testp	_var02 wc
34880     F8 FF 9F 3D |  if_ae	jmp	#LR__5214
34884     01 07 8A FA | 	rdpin	_var04, _var02
34888     69 06 62 FD | 	rev	_var04
3488c     09 07 42 FC | 	wrbyte	_var04, arg01
34890     01 12 06 F1 | 	add	arg01, #1
34894     F8 15 6E FB | 	djnz	arg02, #LR__5213
34898                 | LR__5215
34898                 | _fatfs_cc_rcvr_mmc_1185_ret
34898     2D 00 64 FD | 	ret
3489c                 | 
3489c                 | _fatfs_cc_wait_ready_1189
3489c     01 4A 05 F6 | 	mov	COUNT_, #1
348a0     A8 00 A0 FD | 	call	#pushregs_
348a4     10 F0 07 F1 | 	add	ptra, #16
348a8     1A FA 61 FD | 	getct	result1
348ac     08 4E 05 F1 | 	add	fp, #8
348b0     A7 FA 61 FC | 	wrlong	result1, fp
348b4     14 26 06 FB | 	rdlong	local01, #20
348b8     01 26 46 F0 | 	shr	local01, #1
348bc     04 4E 05 F1 | 	add	fp, #4
348c0     A7 26 62 FC | 	wrlong	local01, fp
348c4     0C 4E 85 F1 | 	sub	fp, #12
348c8                 | ' {
348c8                 | ' 	BYTE d;
348c8                 | ' 	UINT tmr, tmout;
348c8                 | ' 
348c8                 | ' 	tmr = _cnt();
348c8                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
348c8                 | ' 	for(;;) {
348c8                 | LR__5220
348c8     04 4E 05 F1 | 	add	fp, #4
348cc     A7 12 02 F6 | 	mov	arg01, fp
348d0     04 4E 85 F1 | 	sub	fp, #4
348d4     01 14 06 F6 | 	mov	arg02, #1
348d8     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1185
348dc     04 4E 05 F1 | 	add	fp, #4
348e0     A7 26 C2 FA | 	rdbyte	local01, fp
348e4     04 4E 85 F1 | 	sub	fp, #4
348e8     FF 26 0E F2 | 	cmp	local01, #255 wz
348ec     01 FA 05 A6 |  if_e	mov	result1, #1
348f0     28 00 90 AD |  if_e	jmp	#LR__5221
348f4     1A FA 61 FD | 	getct	result1
348f8     08 4E 05 F1 | 	add	fp, #8
348fc     A7 26 02 FB | 	rdlong	local01, fp
34900     13 FB 81 F1 | 	sub	result1, local01
34904     04 4E 05 F1 | 	add	fp, #4
34908     A7 26 02 FB | 	rdlong	local01, fp
3490c     0C 4E 85 F1 | 	sub	fp, #12
34910     13 FB 11 F2 | 	cmp	result1, local01 wc
34914     00 FA 05 36 |  if_ae	mov	result1, #0
34918     AC FF 9F CD |  if_b	jmp	#LR__5220
3491c                 | LR__5221
3491c     A7 F0 03 F6 | 	mov	ptra, fp
34920     B2 00 A0 FD | 	call	#popregs_
34924                 | _fatfs_cc_wait_ready_1189_ret
34924     2D 00 64 FD | 	ret
34928                 | 
34928                 | _fatfs_cc_deselect_1195
34928     00 4A 05 F6 | 	mov	COUNT_, #0
3492c     A8 00 A0 FD | 	call	#pushregs_
34930     14 F0 07 F1 | 	add	ptra, #20
34934     01 00 00 FF 
34938     14 E4 05 F1 | 	add	objptr, ##532
3493c     F2 14 02 FB | 	rdlong	arg02, objptr
34940     04 4E 05 F1 | 	add	fp, #4
34944     A7 14 62 FC | 	wrlong	arg02, fp
34948     04 E4 85 F1 | 	sub	objptr, #4
3494c     F2 14 02 FB | 	rdlong	arg02, objptr
34950     04 4E 05 F1 | 	add	fp, #4
34954     A7 14 62 FC | 	wrlong	arg02, fp
34958     08 E4 05 F1 | 	add	objptr, #8
3495c     F2 14 02 FB | 	rdlong	arg02, objptr
34960     04 4E 05 F1 | 	add	fp, #4
34964     A7 14 62 FC | 	wrlong	arg02, fp
34968     04 E4 05 F1 | 	add	objptr, #4
3496c     F2 14 02 FB | 	rdlong	arg02, objptr
34970     01 00 00 FF 
34974     1C E4 85 F1 | 	sub	objptr, ##540
34978     04 4E 05 F1 | 	add	fp, #4
3497c     A7 14 62 FC | 	wrlong	arg02, fp
34980     0C 4E 85 F1 | 	sub	fp, #12
34984     A7 12 02 FB | 	rdlong	arg01, fp
34988     04 4E 85 F1 | 	sub	fp, #4
3498c     59 12 62 FD | 	drvh	arg01
34990     1F 20 64 FD | 	waitx	#16
34994     A7 12 02 F6 | 	mov	arg01, fp
34998     01 14 06 F6 | 	mov	arg02, #1
3499c     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1185
349a0     A7 F0 03 F6 | 	mov	ptra, fp
349a4     B2 00 A0 FD | 	call	#popregs_
349a8                 | _fatfs_cc_deselect_1195_ret
349a8     2D 00 64 FD | 	ret
349ac                 | 
349ac                 | _fatfs_cc_select_1199
349ac     00 4A 05 F6 | 	mov	COUNT_, #0
349b0     A8 00 A0 FD | 	call	#pushregs_
349b4     10 F0 07 F1 | 	add	ptra, #16
349b8     01 00 00 FF 
349bc     14 E4 05 F1 | 	add	objptr, ##532
349c0     F2 14 02 FB | 	rdlong	arg02, objptr
349c4     08 4E 05 F1 | 	add	fp, #8
349c8     A7 14 62 FC | 	wrlong	arg02, fp
349cc     08 E4 05 F1 | 	add	objptr, #8
349d0     F2 12 02 FB | 	rdlong	arg01, objptr
349d4     01 00 00 FF 
349d8     1C E4 85 F1 | 	sub	objptr, ##540
349dc     04 4E 05 F1 | 	add	fp, #4
349e0     A7 12 62 FC | 	wrlong	arg01, fp
349e4     50 12 62 FD | 	fltl	arg01
349e8     04 4E 85 F1 | 	sub	fp, #4
349ec     A7 12 02 FB | 	rdlong	arg01, fp
349f0     58 12 62 FD | 	drvl	arg01
349f4     1F 20 64 FD | 	waitx	#16
349f8     04 4E 05 F1 | 	add	fp, #4
349fc     A7 12 02 FB | 	rdlong	arg01, fp
34a00     41 12 62 FD | 	dirh	arg01
34a04     08 4E 85 F1 | 	sub	fp, #8
34a08     A7 12 02 F6 | 	mov	arg01, fp
34a0c     04 4E 85 F1 | 	sub	fp, #4
34a10     01 14 06 F6 | 	mov	arg02, #1
34a14     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1185
34a18     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1189
34a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
34a20     01 FA 05 56 |  if_ne	mov	result1, #1
34a24     08 00 90 5D |  if_ne	jmp	#LR__5230
34a28     FC FE BF FD | 	call	#_fatfs_cc_deselect_1195
34a2c                 | ' 
34a2c                 | ' 	deselect();
34a2c                 | ' 	return 0;
34a2c     00 FA 05 F6 | 	mov	result1, #0
34a30                 | LR__5230
34a30     A7 F0 03 F6 | 	mov	ptra, fp
34a34     B2 00 A0 FD | 	call	#popregs_
34a38                 | _fatfs_cc_select_1199_ret
34a38     2D 00 64 FD | 	ret
34a3c                 | 
34a3c                 | _fatfs_cc_rcvr_datablock_1203
34a3c     01 4A 05 F6 | 	mov	COUNT_, #1
34a40     A8 00 A0 FD | 	call	#pushregs_
34a44     18 F0 07 F1 | 	add	ptra, #24
34a48     04 4E 05 F1 | 	add	fp, #4
34a4c     A7 12 62 FC | 	wrlong	arg01, fp
34a50     04 4E 05 F1 | 	add	fp, #4
34a54     A7 14 62 FC | 	wrlong	arg02, fp
34a58     1A FA 61 FD | 	getct	result1
34a5c     08 4E 05 F1 | 	add	fp, #8
34a60     A7 FA 61 FC | 	wrlong	result1, fp
34a64     14 26 06 FB | 	rdlong	local01, #20
34a68     03 26 46 F0 | 	shr	local01, #3
34a6c     04 4E 05 F1 | 	add	fp, #4
34a70     A7 26 62 FC | 	wrlong	local01, fp
34a74     14 4E 85 F1 | 	sub	fp, #20
34a78                 | ' 	BYTE *buff,
34a78                 | ' 	UINT btr
34a78                 | ' )
34a78                 | ' {
34a78                 | ' 	BYTE d[2];
34a78                 | ' 	UINT tmr, tmout;
34a78                 | ' 
34a78                 | ' 	tmr = _cnt();
34a78                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
34a78                 | ' 	for(;;) {
34a78                 | LR__5240
34a78     0C 4E 05 F1 | 	add	fp, #12
34a7c     A7 12 02 F6 | 	mov	arg01, fp
34a80     0C 4E 85 F1 | 	sub	fp, #12
34a84     01 14 06 F6 | 	mov	arg02, #1
34a88     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1185
34a8c     0C 4E 05 F1 | 	add	fp, #12
34a90     A7 26 C2 FA | 	rdbyte	local01, fp
34a94     0C 4E 85 F1 | 	sub	fp, #12
34a98     FF 26 0E F2 | 	cmp	local01, #255 wz
34a9c     28 00 90 5D |  if_ne	jmp	#LR__5241
34aa0     1A FA 61 FD | 	getct	result1
34aa4     FD 26 02 F6 | 	mov	local01, result1
34aa8     10 4E 05 F1 | 	add	fp, #16
34aac     A7 14 02 FB | 	rdlong	arg02, fp
34ab0     0A 27 82 F1 | 	sub	local01, arg02
34ab4     04 4E 05 F1 | 	add	fp, #4
34ab8     A7 14 02 FB | 	rdlong	arg02, fp
34abc     14 4E 85 F1 | 	sub	fp, #20
34ac0     0A 27 12 F2 | 	cmp	local01, arg02 wc
34ac4     B0 FF 9F CD |  if_b	jmp	#LR__5240
34ac8                 | LR__5241
34ac8     0C 4E 05 F1 | 	add	fp, #12
34acc     A7 26 C2 FA | 	rdbyte	local01, fp
34ad0     0C 4E 85 F1 | 	sub	fp, #12
34ad4     FE 26 0E F2 | 	cmp	local01, #254 wz
34ad8     00 FA 05 56 |  if_ne	mov	result1, #0
34adc     30 00 90 5D |  if_ne	jmp	#LR__5242
34ae0     04 4E 05 F1 | 	add	fp, #4
34ae4     A7 12 02 FB | 	rdlong	arg01, fp
34ae8     04 4E 05 F1 | 	add	fp, #4
34aec     A7 14 02 FB | 	rdlong	arg02, fp
34af0     08 4E 85 F1 | 	sub	fp, #8
34af4     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1185
34af8     0C 4E 05 F1 | 	add	fp, #12
34afc     A7 12 02 F6 | 	mov	arg01, fp
34b00     0C 4E 85 F1 | 	sub	fp, #12
34b04     02 14 06 F6 | 	mov	arg02, #2
34b08     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1185
34b0c                 | ' 
34b0c                 | ' 	rcvr_mmc(buff, btr);
34b0c                 | ' 	rcvr_mmc(d, 2);
34b0c                 | ' 
34b0c                 | ' 	return 1;
34b0c     01 FA 05 F6 | 	mov	result1, #1
34b10                 | LR__5242
34b10     A7 F0 03 F6 | 	mov	ptra, fp
34b14     B2 00 A0 FD | 	call	#popregs_
34b18                 | _fatfs_cc_rcvr_datablock_1203_ret
34b18     2D 00 64 FD | 	ret
34b1c                 | 
34b1c                 | _fatfs_cc_xmit_datablock_1205
34b1c     00 4A 05 F6 | 	mov	COUNT_, #0
34b20     A8 00 A0 FD | 	call	#pushregs_
34b24     10 F0 07 F1 | 	add	ptra, #16
34b28     04 4E 05 F1 | 	add	fp, #4
34b2c     A7 12 62 FC | 	wrlong	arg01, fp
34b30     04 4E 05 F1 | 	add	fp, #4
34b34     A7 14 42 FC | 	wrbyte	arg02, fp
34b38     08 4E 85 F1 | 	sub	fp, #8
34b3c     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1189
34b40     00 FA 0D F2 | 	cmp	result1, #0 wz
34b44     00 FA 05 A6 |  if_e	mov	result1, #0
34b48     90 00 90 AD |  if_e	jmp	#LR__5251
34b4c     08 4E 05 F1 | 	add	fp, #8
34b50     A7 14 C2 FA | 	rdbyte	arg02, fp
34b54     04 4E 05 F1 | 	add	fp, #4
34b58     A7 14 42 FC | 	wrbyte	arg02, fp
34b5c     A7 12 02 F6 | 	mov	arg01, fp
34b60     0C 4E 85 F1 | 	sub	fp, #12
34b64     01 14 06 F6 | 	mov	arg02, #1
34b68     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1178
34b6c     08 4E 05 F1 | 	add	fp, #8
34b70     A7 14 C2 FA | 	rdbyte	arg02, fp
34b74     08 4E 85 F1 | 	sub	fp, #8
34b78     FD 14 0E F2 | 	cmp	arg02, #253 wz
34b7c     58 00 90 AD |  if_e	jmp	#LR__5250
34b80     04 4E 05 F1 | 	add	fp, #4
34b84     A7 12 02 FB | 	rdlong	arg01, fp
34b88     04 4E 85 F1 | 	sub	fp, #4
34b8c     09 14 C6 F9 | 	decod	arg02, #9
34b90     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1178
34b94     0C 4E 05 F1 | 	add	fp, #12
34b98     A7 12 02 F6 | 	mov	arg01, fp
34b9c     0C 4E 85 F1 | 	sub	fp, #12
34ba0     02 14 06 F6 | 	mov	arg02, #2
34ba4     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1185
34ba8     0C 4E 05 F1 | 	add	fp, #12
34bac     A7 12 02 F6 | 	mov	arg01, fp
34bb0     0C 4E 85 F1 | 	sub	fp, #12
34bb4     01 14 06 F6 | 	mov	arg02, #1
34bb8     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1185
34bbc     0C 4E 05 F1 | 	add	fp, #12
34bc0     A7 14 C2 FA | 	rdbyte	arg02, fp
34bc4     0C 4E 85 F1 | 	sub	fp, #12
34bc8     1F 14 06 F5 | 	and	arg02, #31
34bcc     05 14 0E F2 | 	cmp	arg02, #5 wz
34bd0                 | ' 			return 0;
34bd0     00 FA 05 56 |  if_ne	mov	result1, #0
34bd4     04 00 90 5D |  if_ne	jmp	#LR__5251
34bd8                 | LR__5250
34bd8                 | ' 	}
34bd8                 | ' 
34bd8                 | ' 	return 1;
34bd8     01 FA 05 F6 | 	mov	result1, #1
34bdc                 | LR__5251
34bdc     A7 F0 03 F6 | 	mov	ptra, fp
34be0     B2 00 A0 FD | 	call	#popregs_
34be4                 | _fatfs_cc_xmit_datablock_1205_ret
34be4     2D 00 64 FD | 	ret
34be8                 | 
34be8                 | _fatfs_cc_send_cmd_1209
34be8     01 4A 05 F6 | 	mov	COUNT_, #1
34bec     A8 00 A0 FD | 	call	#pushregs_
34bf0     1C F0 07 F1 | 	add	ptra, #28
34bf4                 | _fatfs_cc_send_cmd_1209_enter
34bf4     04 4E 05 F1 | 	add	fp, #4
34bf8     A7 12 42 FC | 	wrbyte	arg01, fp
34bfc     04 4E 05 F1 | 	add	fp, #4
34c00     A7 14 62 FC | 	wrlong	arg02, fp
34c04     04 4E 85 F1 | 	sub	fp, #4
34c08     A7 FA C1 FA | 	rdbyte	result1, fp
34c0c     04 4E 85 F1 | 	sub	fp, #4
34c10     80 FA CD F7 | 	test	result1, #128 wz
34c14     44 00 90 AD |  if_e	jmp	#LR__5260
34c18     04 4E 05 F1 | 	add	fp, #4
34c1c     A7 14 C2 FA | 	rdbyte	arg02, fp
34c20     7F 14 06 F5 | 	and	arg02, #127
34c24     A7 14 42 FC | 	wrbyte	arg02, fp
34c28     04 4E 85 F1 | 	sub	fp, #4
34c2c     37 12 06 F6 | 	mov	arg01, #55
34c30     00 14 06 F6 | 	mov	arg02, #0
34c34     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1209
34c38     0C 4E 05 F1 | 	add	fp, #12
34c3c     A7 FA 41 FC | 	wrbyte	result1, fp
34c40     A7 14 C2 FA | 	rdbyte	arg02, fp
34c44     0C 4E 85 F1 | 	sub	fp, #12
34c48     02 14 16 F2 | 	cmp	arg02, #2 wc
34c4c     0C 4E 05 31 |  if_ae	add	fp, #12
34c50     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
34c54     0C 4E 85 31 |  if_ae	sub	fp, #12
34c58     6C 01 90 3D |  if_ae	jmp	#LR__5264
34c5c                 | LR__5260
34c5c     04 4E 05 F1 | 	add	fp, #4
34c60     A7 14 C2 FA | 	rdbyte	arg02, fp
34c64     04 4E 85 F1 | 	sub	fp, #4
34c68     0C 14 0E F2 | 	cmp	arg02, #12 wz
34c6c     14 00 90 AD |  if_e	jmp	#LR__5261
34c70     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1195
34c74     34 FD BF FD | 	call	#_fatfs_cc_select_1199
34c78     00 FA 0D F2 | 	cmp	result1, #0 wz
34c7c     FF FA 05 A6 |  if_e	mov	result1, #255
34c80     44 01 90 AD |  if_e	jmp	#LR__5264
34c84                 | LR__5261
34c84     04 4E 05 F1 | 	add	fp, #4
34c88     A7 14 C2 FA | 	rdbyte	arg02, fp
34c8c     40 FA 05 F6 | 	mov	result1, #64
34c90     0A FB 41 F5 | 	or	result1, arg02
34c94     10 4E 05 F1 | 	add	fp, #16
34c98     A7 FA 41 FC | 	wrbyte	result1, fp
34c9c     0C 4E 85 F1 | 	sub	fp, #12
34ca0     A7 FA 01 FB | 	rdlong	result1, fp
34ca4     18 FA 45 F0 | 	shr	result1, #24
34ca8     0D 4E 05 F1 | 	add	fp, #13
34cac     A7 FA 41 FC | 	wrbyte	result1, fp
34cb0     0D 4E 85 F1 | 	sub	fp, #13
34cb4     A7 FA 01 FB | 	rdlong	result1, fp
34cb8     10 FA 45 F0 | 	shr	result1, #16
34cbc     0E 4E 05 F1 | 	add	fp, #14
34cc0     A7 FA 41 FC | 	wrbyte	result1, fp
34cc4     0E 4E 85 F1 | 	sub	fp, #14
34cc8     A7 FA 01 FB | 	rdlong	result1, fp
34ccc     08 FA 45 F0 | 	shr	result1, #8
34cd0     0F 4E 05 F1 | 	add	fp, #15
34cd4     A7 FA 41 FC | 	wrbyte	result1, fp
34cd8     0F 4E 85 F1 | 	sub	fp, #15
34cdc     A7 FA 01 FB | 	rdlong	result1, fp
34ce0     10 4E 05 F1 | 	add	fp, #16
34ce4     A7 FA 41 FC | 	wrbyte	result1, fp
34ce8     0C 4E 85 F1 | 	sub	fp, #12
34cec     A7 02 48 FC | 	wrbyte	#1, fp
34cf0     08 4E 85 F1 | 	sub	fp, #8
34cf4     A7 FA C9 FA | 	rdbyte	result1, fp wz
34cf8     04 4E 85 F1 | 	sub	fp, #4
34cfc     0C 4E 05 A1 |  if_e	add	fp, #12
34d00     A7 2A 49 AC |  if_e	wrbyte	#149, fp
34d04     0C 4E 85 A1 |  if_e	sub	fp, #12
34d08     04 4E 05 F1 | 	add	fp, #4
34d0c     A7 FA C1 FA | 	rdbyte	result1, fp
34d10     04 4E 85 F1 | 	sub	fp, #4
34d14     08 FA 0D F2 | 	cmp	result1, #8 wz
34d18     0C 4E 05 A1 |  if_e	add	fp, #12
34d1c     A7 0E 49 AC |  if_e	wrbyte	#135, fp
34d20     0C 4E 85 A1 |  if_e	sub	fp, #12
34d24     0C 4E 05 F1 | 	add	fp, #12
34d28     A7 14 C2 FA | 	rdbyte	arg02, fp
34d2c     0D 4E 05 F1 | 	add	fp, #13
34d30     A7 14 42 FC | 	wrbyte	arg02, fp
34d34     05 4E 85 F1 | 	sub	fp, #5
34d38     A7 12 02 F6 | 	mov	arg01, fp
34d3c     14 4E 85 F1 | 	sub	fp, #20
34d40     06 14 06 F6 | 	mov	arg02, #6
34d44     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1178
34d48     04 4E 05 F1 | 	add	fp, #4
34d4c     A7 26 C2 FA | 	rdbyte	local01, fp
34d50     04 4E 85 F1 | 	sub	fp, #4
34d54     0C 26 0E F2 | 	cmp	local01, #12 wz
34d58     10 4E 05 A1 |  if_e	add	fp, #16
34d5c     A7 12 02 A6 |  if_e	mov	arg01, fp
34d60     10 4E 85 A1 |  if_e	sub	fp, #16
34d64     01 14 06 A6 |  if_e	mov	arg02, #1
34d68     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1185
34d6c     0C 4E 05 F1 | 	add	fp, #12
34d70     A7 14 48 FC | 	wrbyte	#10, fp
34d74     0C 4E 85 F1 | 	sub	fp, #12
34d78                 | ' 	n = 10;
34d78                 | ' 	do
34d78                 | LR__5262
34d78     10 4E 05 F1 | 	add	fp, #16
34d7c     A7 12 02 F6 | 	mov	arg01, fp
34d80     10 4E 85 F1 | 	sub	fp, #16
34d84     01 14 06 F6 | 	mov	arg02, #1
34d88     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1185
34d8c     10 4E 05 F1 | 	add	fp, #16
34d90     A7 26 C2 FA | 	rdbyte	local01, fp
34d94     10 4E 85 F1 | 	sub	fp, #16
34d98     80 26 CE F7 | 	test	local01, #128 wz
34d9c     1C 00 90 AD |  if_e	jmp	#LR__5263
34da0     0C 4E 05 F1 | 	add	fp, #12
34da4     A7 26 C2 FA | 	rdbyte	local01, fp
34da8     01 26 86 F1 | 	sub	local01, #1
34dac     A7 26 42 FC | 	wrbyte	local01, fp
34db0     A7 26 CA FA | 	rdbyte	local01, fp wz
34db4     0C 4E 85 F1 | 	sub	fp, #12
34db8     BC FF 9F 5D |  if_ne	jmp	#LR__5262
34dbc                 | LR__5263
34dbc                 | ' 
34dbc                 | ' 	return d;
34dbc     10 4E 05 F1 | 	add	fp, #16
34dc0     A7 FA C1 FA | 	rdbyte	result1, fp
34dc4     10 4E 85 F1 | 	sub	fp, #16
34dc8                 | LR__5264
34dc8     A7 F0 03 F6 | 	mov	ptra, fp
34dcc     B2 00 A0 FD | 	call	#popregs_
34dd0                 | _fatfs_cc_send_cmd_1209_ret
34dd0     2D 00 64 FD | 	ret
34dd4                 | 
34dd4                 | _fatfs_cc_disk_deinitialize
34dd4     03 4A 05 F6 | 	mov	COUNT_, #3
34dd8     A8 00 A0 FD | 	call	#pushregs_
34ddc     00 12 4E F2 | 	cmps	arg01, #0 wz
34de0     01 00 00 FF 
34de4     14 E4 05 F1 | 	add	objptr, ##532
34de8     F2 12 02 FB | 	rdlong	arg01, objptr
34dec     04 E4 85 F1 | 	sub	objptr, #4
34df0     F2 26 02 FB | 	rdlong	local01, objptr
34df4     08 E4 05 F1 | 	add	objptr, #8
34df8     F2 28 02 FB | 	rdlong	local02, objptr
34dfc     04 E4 05 F1 | 	add	objptr, #4
34e00     F2 2A 02 FB | 	rdlong	local03, objptr
34e04     01 00 00 FF 
34e08     1C E4 85 F1 | 	sub	objptr, ##540
34e0c                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
34e0c                 | '         return RES_NOTRDY;
34e0c     03 FA 05 56 |  if_ne	mov	result1, #3
34e10     2C 00 90 5D |  if_ne	jmp	#LR__5270
34e14     50 12 62 FD | 	fltl	arg01
34e18     09 01 08 FC | 	wrpin	#0, arg01
34e1c     50 26 62 FD | 	fltl	local01
34e20     13 01 08 FC | 	wrpin	#0, local01
34e24     50 28 62 FD | 	fltl	local02
34e28     14 01 08 FC | 	wrpin	#0, local02
34e2c     50 2A 62 FD | 	fltl	local03
34e30     15 01 08 FC | 	wrpin	#0, local03
34e34     0A 12 06 F6 | 	mov	arg01, #10
34e38     40 0E BF FD | 	call	#__system___waitms
34e3c                 | '     }
34e3c                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
34e3c                 | '     _pinclear(PIN_SS);
34e3c                 | '     _pinclear(PIN_CLK);
34e3c                 | '     _pinclear(PIN_DI);
34e3c                 | '     _pinclear(PIN_DO);
34e3c                 | ' 
34e3c                 | '     _waitms(10);
34e3c                 | ' 
34e3c                 | '     return 0;
34e3c     00 FA 05 F6 | 	mov	result1, #0
34e40                 | LR__5270
34e40     A7 F0 03 F6 | 	mov	ptra, fp
34e44     B2 00 A0 FD | 	call	#popregs_
34e48                 | _fatfs_cc_disk_deinitialize_ret
34e48     2D 00 64 FD | 	ret
34e4c                 | 
34e4c                 | _fatfs_cc_gettimeofday
34e4c     04 4A 05 F6 | 	mov	COUNT_, #4
34e50     A8 00 A0 FD | 	call	#pushregs_
34e54     09 27 02 F6 | 	mov	local01, arg01
34e58     FC 09 BF FD | 	call	#__system___getus
34e5c     FD 12 02 F6 | 	mov	arg01, result1
34e60     02 00 00 FF 
34e64     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
34e68     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
34e6c     09 FB 01 F6 | 	mov	result1, arg01
34e70     14 FB 81 F1 | 	sub	result1, local02
34e74     A1 07 00 FF 
34e78     40 FA 15 FD | 	qdiv	result1, ##1000000
34e7c     02 00 00 FF 
34e80     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
34e84     18 28 62 FD | 	getqx	local02
34e88     A1 07 00 FF 
34e8c     40 FA 15 FD | 	qdiv	result1, ##1000000
34e90     00 28 0E F2 | 	cmp	local02, #0 wz
34e94     19 2A 62 FD | 	getqy	local03
34e98     28 00 90 AD |  if_e	jmp	#LR__5280
34e9c     02 00 00 FF 
34ea0     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
34ea4     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
34ea8     14 2D 02 F1 | 	add	local04, local02
34eac     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
34eb0     15 13 82 F1 | 	sub	arg01, local03
34eb4     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
34eb8     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
34ebc     02 00 00 FF 
34ec0     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
34ec4                 | LR__5280
34ec4     02 00 00 FF 
34ec8     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
34ecc     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
34ed0     02 00 00 FF 
34ed4     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
34ed8     13 2D 62 FC | 	wrlong	local04, local01
34edc     04 26 06 F1 | 	add	local01, #4
34ee0     13 2B 62 FC | 	wrlong	local03, local01
34ee4                 | '         lastsec += secs;
34ee4                 | '         lastus = now - leftover;
34ee4                 | '     }
34ee4                 | '     tv->tv_sec = lastsec;
34ee4                 | '     tv->tv_usec = leftover;
34ee4                 | '     return 0;
34ee4     00 FA 05 F6 | 	mov	result1, #0
34ee8     A7 F0 03 F6 | 	mov	ptra, fp
34eec     B2 00 A0 FD | 	call	#popregs_
34ef0                 | _fatfs_cc_gettimeofday_ret
34ef0     2D 00 64 FD | 	ret
34ef4                 | 
34ef4                 | _fatfs_cc__is_leap_year
34ef4     09 FB 51 F6 | 	abs	result1, arg01 wc
34ef8     03 FA 05 F5 | 	and	result1, #3
34efc     FD FA 89 F6 | 	negc	result1, result1 wz
34f00     38 00 90 5D |  if_ne	jmp	#LR__5291
34f04     09 FB 51 F6 | 	abs	result1, arg01 wc
34f08     64 FA 15 FD | 	qdiv	result1, #100
34f0c     19 FA 61 FD | 	getqy	result1
34f10     FD FA 89 F6 | 	negc	result1, result1 wz
34f14     1C 00 90 5D |  if_ne	jmp	#LR__5290
34f18     09 FB 51 F6 | 	abs	result1, arg01 wc
34f1c     90 FB 15 FD | 	qdiv	result1, #400
34f20                 | '       return (0 == y % 400);
34f20     00 FA 05 F6 | 	mov	result1, #0
34f24     19 00 62 FD | 	getqy	_var01
34f28     00 01 8A F6 | 	negc	_var01, _var01 wz
34f2c     01 FA 05 A6 |  if_e	mov	result1, #1
34f30     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
34f34                 | LR__5290
34f34                 | '     return 1;
34f34     01 FA 05 F6 | 	mov	result1, #1
34f38     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
34f3c                 | LR__5291
34f3c                 | '   }
34f3c                 | '   return 0;
34f3c     00 FA 05 F6 | 	mov	result1, #0
34f40                 | _fatfs_cc__is_leap_year_ret
34f40     2D 00 64 FD | 	ret
34f44                 | 
34f44                 | _fatfs_cc___tzoffset
34f44     09 01 0A F6 | 	mov	_var01, arg01 wz
34f48     FF FF FF FF 
34f4c     0A FF 6B FC | 	wrlong	##-1, arg02
34f50     01 02 06 F6 | 	mov	_var02, #1
34f54     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
34f58                 | '                 return 0;
34f58     00 FA 05 A6 |  if_e	mov	result1, #0
34f5c     94 02 90 AD |  if_e	jmp	#LR__5317
34f60     0A 01 68 FC | 	wrlong	#0, arg02
34f64     02 00 00 FF 
34f68     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
34f6c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
34f70                 | ' 
34f70                 | '        *hasdst = 0;
34f70                 | ' 
34f70                 | ' 	n = stdname;
34f70                 | '         while (*s && isalpha(*s)) {
34f70     02 00 00 FF 
34f74     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
34f78     97 28 48 FB | 	callpa	#(@LR__5301-@LR__5300)>>2,fcache_load_ptr_
34f7c                 | LR__5300
34f7c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
34f80     48 00 90 AD |  if_e	jmp	#LR__5302
34f84     00 13 C2 FA | 	rdbyte	arg01, _var01
34f88                 | ' {
34f88                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
34f88     80 12 36 F3 | 	fle	arg01, #128 wc
34f8c                 | '     return __ctype[c];
34f8c     02 00 00 FF 
34f90     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
34f94     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
34f98     09 FB C1 FA | 	rdbyte	result1, arg01
34f9c     02 00 00 FF 
34fa0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
34fa4     0C FA CD F7 | 	test	result1, #12 wz
34fa8     20 00 90 AD |  if_e	jmp	#LR__5302
34fac     00 09 02 F6 | 	mov	_var05, _var01
34fb0     00 0B 02 F6 | 	mov	_var06, _var01
34fb4     01 0A 06 F1 | 	add	_var06, #1
34fb8     04 0D C2 FA | 	rdbyte	_var07, _var05
34fbc     05 01 02 F6 | 	mov	_var01, _var06
34fc0     03 0D 42 FC | 	wrbyte	_var07, _var04
34fc4     01 06 06 F1 | 	add	_var04, #1
34fc8     B0 FF 9F FD | 	jmp	#LR__5300
34fcc                 | LR__5301
34fcc                 | LR__5302
34fcc     03 01 48 FC | 	wrbyte	#0, _var04
34fd0     00 0E 06 F6 | 	mov	_var08, #0
34fd4     00 05 C2 FA | 	rdbyte	_var03, _var01
34fd8     2D 04 0E F2 | 	cmp	_var03, #45 wz
34fdc     01 02 66 A6 |  if_e	neg	_var02, #1
34fe0     01 00 06 A1 |  if_e	add	_var01, #1
34fe4     97 28 48 FB | 	callpa	#(@LR__5304-@LR__5303)>>2,fcache_load_ptr_
34fe8                 | '                 sgn = -1;
34fe8                 | '                 s++;
34fe8                 | '         }
34fe8                 | '         while (isdigit(*s)) {
34fe8                 | LR__5303
34fe8     00 13 C2 FA | 	rdbyte	arg01, _var01
34fec                 | ' {
34fec                 | '   return  (__ctype_get(c) & 0x02 ) ;
34fec     80 12 36 F3 | 	fle	arg01, #128 wc
34ff0                 | '     return __ctype[c];
34ff0     02 00 00 FF 
34ff4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
34ff8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
34ffc     09 FB C1 FA | 	rdbyte	result1, arg01
35000     02 00 00 FF 
35004     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
35008     02 FA CD F7 | 	test	result1, #2 wz
3500c     28 00 90 AD |  if_e	jmp	#LR__5305
35010     07 05 02 F6 | 	mov	_var03, _var08
35014     02 04 66 F0 | 	shl	_var03, #2
35018     07 05 02 F1 | 	add	_var03, _var08
3501c     01 04 66 F0 | 	shl	_var03, #1
35020     00 09 C2 FA | 	rdbyte	_var05, _var01
35024     30 08 86 F1 | 	sub	_var05, #48
35028     04 05 02 F1 | 	add	_var03, _var05
3502c     02 0F 02 F6 | 	mov	_var08, _var03
35030     01 00 06 F1 | 	add	_var01, #1
35034     B0 FF 9F FD | 	jmp	#LR__5303
35038                 | LR__5304
35038                 | LR__5305
35038     07 00 00 FF 
3503c     10 0E 06 FD | 	qmul	_var08, ##3600
35040     00 05 C2 FA | 	rdbyte	_var03, _var01
35044     3A 04 0E F2 | 	cmp	_var03, #58 wz
35048     18 10 62 FD | 	getqx	_var09
3504c     70 00 90 5D |  if_ne	jmp	#LR__5309
35050     00 0E 06 F6 | 	mov	_var08, #0
35054     01 00 06 F1 | 	add	_var01, #1
35058     97 28 48 FB | 	callpa	#(@LR__5307-@LR__5306)>>2,fcache_load_ptr_
3505c                 | '                 x = 0;
3505c                 | '                 s++;
3505c                 | '                 while (isdigit(*s)) {
3505c                 | LR__5306
3505c     00 13 C2 FA | 	rdbyte	arg01, _var01
35060                 | ' {
35060                 | '   return  (__ctype_get(c) & 0x02 ) ;
35060     80 12 36 F3 | 	fle	arg01, #128 wc
35064                 | '     return __ctype[c];
35064     02 00 00 FF 
35068     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
3506c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35070     09 FB C1 FA | 	rdbyte	result1, arg01
35074     02 00 00 FF 
35078     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
3507c     02 FA CD F7 | 	test	result1, #2 wz
35080     28 00 90 AD |  if_e	jmp	#LR__5308
35084     07 05 02 F6 | 	mov	_var03, _var08
35088     02 04 66 F0 | 	shl	_var03, #2
3508c     07 05 02 F1 | 	add	_var03, _var08
35090     01 04 66 F0 | 	shl	_var03, #1
35094     00 09 C2 FA | 	rdbyte	_var05, _var01
35098     30 08 86 F1 | 	sub	_var05, #48
3509c     04 05 02 F1 | 	add	_var03, _var05
350a0     02 0F 02 F6 | 	mov	_var08, _var03
350a4     01 00 06 F1 | 	add	_var01, #1
350a8     B0 FF 9F FD | 	jmp	#LR__5306
350ac                 | LR__5307
350ac                 | LR__5308
350ac     07 0D 02 F6 | 	mov	_var07, _var08
350b0     04 0C 66 F0 | 	shl	_var07, #4
350b4     07 0D 82 F1 | 	sub	_var07, _var08
350b8     02 0C 66 F0 | 	shl	_var07, #2
350bc     06 11 02 F1 | 	add	_var09, _var07
350c0                 | LR__5309
350c0     02 00 00 FF 
350c4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
350c8     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
350cc     00 13 C2 FA | 	rdbyte	arg01, _var01
350d0                 | ' {
350d0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
350d0     80 12 36 F3 | 	fle	arg01, #128 wc
350d4                 | '     return __ctype[c];
350d4     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
350d8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
350dc     09 FB C1 FA | 	rdbyte	result1, arg01
350e0     02 00 00 FF 
350e4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
350e8     0C FA CD F7 | 	test	result1, #12 wz
350ec     50 00 90 AD |  if_e	jmp	#LR__5312
350f0     0A 03 68 FC | 	wrlong	#1, arg02
350f4                 | '                 *hasdst = 1;
350f4                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
350f4                 | LR__5310
350f4     00 05 CA FA | 	rdbyte	_var03, _var01 wz
350f8     44 00 90 AD |  if_e	jmp	#LR__5311
350fc     00 13 C2 FA | 	rdbyte	arg01, _var01
35100                 | ' {
35100                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
35100     80 12 36 F3 | 	fle	arg01, #128 wc
35104                 | '     return __ctype[c];
35104     02 00 00 FF 
35108     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
3510c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35110     09 FB C1 FA | 	rdbyte	result1, arg01
35114     02 00 00 FF 
35118     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
3511c     0C FA CD F7 | 	test	result1, #12 wz
35120     1C 00 90 AD |  if_e	jmp	#LR__5311
35124     00 0B 02 F6 | 	mov	_var06, _var01
35128     01 0A 06 F1 | 	add	_var06, #1
3512c     00 0D C2 FA | 	rdbyte	_var07, _var01
35130     05 01 02 F6 | 	mov	_var01, _var06
35134     03 0D 42 FC | 	wrbyte	_var07, _var04
35138     01 06 06 F1 | 	add	_var04, #1
3513c     B4 FF 9F FD | 	jmp	#LR__5310
35140                 | LR__5311
35140                 | LR__5312
35140     03 01 48 FC | 	wrbyte	#0, _var04
35144     02 00 00 FF 
35148     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
3514c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
35150     02 00 00 FF 
35154     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
35158     20 00 90 AD |  if_e	jmp	#LR__5313
3515c     02 00 00 FF 
35160     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
35164     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
35168     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
3516c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
35170     02 00 00 FF 
35174     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
35178     1C 00 90 FD | 	jmp	#LR__5314
3517c                 | LR__5313
3517c     02 00 00 FF 
35180     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
35184     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
35188     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
3518c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
35190     02 00 00 FF 
35194     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
35198                 | LR__5314
35198     02 00 00 FF 
3519c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
351a0     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
351a4     02 00 00 FF 
351a8     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
351ac     20 00 90 AD |  if_e	jmp	#LR__5315
351b0     02 00 00 FF 
351b4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
351b8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
351bc     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
351c0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
351c4     02 00 00 FF 
351c8     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
351cc     1C 00 90 FD | 	jmp	#LR__5316
351d0                 | LR__5315
351d0     02 00 00 FF 
351d4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
351d8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
351dc     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
351e0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
351e4     02 00 00 FF 
351e8     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
351ec                 | LR__5316
351ec     08 03 02 FD | 	qmul	_var02, _var09
351f0                 | ' 		_tzname[1] = stdname;
351f0                 | ' 
351f0                 | '         return sgn * off;
351f0     18 FA 61 FD | 	getqx	result1
351f4                 | LR__5317
351f4                 | _fatfs_cc___tzoffset_ret
351f4     2D 00 64 FD | 	ret
351f8                 | 
351f8                 | _fatfs_cc___indst
351f8     10 12 06 F1 | 	add	arg01, #16
351fc     09 01 02 FB | 	rdlong	_var01, arg01
35200     10 12 86 F1 | 	sub	arg01, #16
35204     02 00 0E F2 | 	cmp	_var01, #2 wz
35208     30 00 90 5D |  if_ne	jmp	#LR__5320
3520c     07 00 06 F6 | 	mov	_var01, #7
35210     18 12 06 F1 | 	add	arg01, #24
35214     09 03 02 FB | 	rdlong	_var02, arg01
35218     01 01 02 F1 | 	add	_var01, _var02
3521c     0C 12 86 F1 | 	sub	arg01, #12
35220     09 05 02 FB | 	rdlong	_var03, arg01
35224     02 01 82 F1 | 	sub	_var01, _var03
35228     00 00 56 F2 | 	cmps	_var01, #0 wc
3522c                 | '                         return 1;
3522c     01 FA 05 C6 |  if_b	mov	result1, #1
35230     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
35234                 | '                 return 0;
35234     00 FA 05 F6 | 	mov	result1, #0
35238     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
3523c                 | LR__5320
3523c     10 12 06 F1 | 	add	arg01, #16
35240     09 01 02 FB | 	rdlong	_var01, arg01
35244     10 12 86 F1 | 	sub	arg01, #16
35248     0A 00 0E F2 | 	cmp	_var01, #10 wz
3524c     28 00 90 5D |  if_ne	jmp	#LR__5321
35250     18 12 06 F1 | 	add	arg01, #24
35254     09 01 02 FB | 	rdlong	_var01, arg01
35258     0C 12 86 F1 | 	sub	arg01, #12
3525c     09 07 02 FB | 	rdlong	_var04, arg01
35260     03 01 82 F1 | 	sub	_var01, _var04
35264     00 00 56 F2 | 	cmps	_var01, #0 wc
35268                 | '                         return 0;
35268     00 FA 05 C6 |  if_b	mov	result1, #0
3526c     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
35270                 | '                 return 1;
35270     01 FA 05 F6 | 	mov	result1, #1
35274     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
35278                 | LR__5321
35278                 | '         }
35278                 | ' 
35278                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
35278     00 00 06 F6 | 	mov	_var01, #0
3527c     10 12 06 F1 | 	add	arg01, #16
35280     09 03 02 FB | 	rdlong	_var02, arg01
35284     10 12 86 F1 | 	sub	arg01, #16
35288     03 02 56 F2 | 	cmps	_var02, #3 wc
3528c     10 00 90 CD |  if_b	jmp	#LR__5322
35290     10 12 06 F1 | 	add	arg01, #16
35294     09 05 02 FB | 	rdlong	_var03, arg01
35298     0A 04 56 F2 | 	cmps	_var03, #10 wc
3529c     01 00 06 C6 |  if_b	mov	_var01, #1
352a0                 | LR__5322
352a0     00 FB 01 F6 | 	mov	result1, _var01
352a4                 | _fatfs_cc___indst_ret
352a4     2D 00 64 FD | 	ret
352a8                 | 
352a8                 | ' 	
352a8                 | ' 	FUNCTION pfunc(c as integer) as integer
352a8                 | ___strs_cl_pfunc
352a8                 | ' 		if (i < 16) then
352a8     04 E4 05 F1 | 	add	objptr, #4
352ac     F2 FA 01 FB | 	rdlong	result1, objptr
352b0     04 E4 85 F1 | 	sub	objptr, #4
352b4     10 FA 55 F2 | 	cmps	result1, #16 wc
352b8     2C 00 90 3D |  if_ae	jmp	#LR__5330
352bc     F2 FA 01 FB | 	rdlong	result1, objptr
352c0     04 E4 05 F1 | 	add	objptr, #4
352c4     F2 00 02 FB | 	rdlong	_var01, objptr
352c8     FD 00 02 F1 | 	add	_var01, result1
352cc     00 13 42 FC | 	wrbyte	arg01, _var01
352d0     F2 FA 01 FB | 	rdlong	result1, objptr
352d4     01 FA 05 F1 | 	add	result1, #1
352d8     F2 FA 61 FC | 	wrlong	result1, objptr
352dc     04 E4 85 F1 | 	sub	objptr, #4
352e0                 | ' 			p(i) = c
352e0                 | ' 			i = i+1
352e0                 | ' 			return 1
352e0     01 FA 05 F6 | 	mov	result1, #1
352e4     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
352e8                 | LR__5330
352e8                 | ' 			return -1
352e8     01 FA 65 F6 | 	neg	result1, #1
352ec                 | ___strs_cl_pfunc_ret
352ec     2D 00 64 FD | 	ret
352f0                 | 
352f0                 | __struct__s_vfs_file_t_putchar
352f0     04 4A 05 F6 | 	mov	COUNT_, #4
352f4     A8 00 A0 FD | 	call	#pushregs_
352f8     1C E4 05 F1 | 	add	objptr, #28
352fc     F2 26 0A FB | 	rdlong	local01, objptr wz
35300     1C E4 85 F1 | 	sub	objptr, #28
35304     00 FA 05 A6 |  if_e	mov	result1, #0
35308     48 00 90 AD |  if_e	jmp	#LR__5340
3530c     1C E4 05 F1 | 	add	objptr, #28
35310     F2 28 02 FB | 	rdlong	local02, objptr
35314     14 2B 02 F6 | 	mov	local03, local02
35318     1C E4 85 F1 | 	sub	objptr, #28
3531c     13 2A 46 F7 | 	zerox	local03, #19
35320     14 28 46 F0 | 	shr	local02, #20
35324     02 28 66 F0 | 	shl	local02, #2
35328     ED 28 02 F1 | 	add	local02, __methods__
3532c     14 29 02 FB | 	rdlong	local02, local02
35330     F2 14 02 F6 | 	mov	arg02, objptr
35334     F2 2C 02 F6 | 	mov	local04, objptr
35338     15 E5 01 F6 | 	mov	objptr, local03
3533c     2D 28 62 FD | 	call	local02
35340     16 E5 01 F6 | 	mov	objptr, local04
35344                 | '     return (i < 0) ? 0 : 1;
35344     00 FA 55 F2 | 	cmps	result1, #0 wc
35348     00 26 06 C6 |  if_b	mov	local01, #0
3534c     01 26 06 36 |  if_ae	mov	local01, #1
35350     13 FB 01 F6 | 	mov	result1, local01
35354                 | LR__5340
35354     A7 F0 03 F6 | 	mov	ptra, fp
35358     B2 00 A0 FD | 	call	#popregs_
3535c                 | __struct__s_vfs_file_t_putchar_ret
3535c     2D 00 64 FD | 	ret
35360                 | 
35360                 | __struct__s_vfs_file_t_getchar
35360     03 4A 05 F6 | 	mov	COUNT_, #3
35364     A8 00 A0 FD | 	call	#pushregs_
35368     20 E4 05 F1 | 	add	objptr, #32
3536c     F2 12 0A FB | 	rdlong	arg01, objptr wz
35370     20 E4 85 F1 | 	sub	objptr, #32
35374     01 FA 65 A6 |  if_e	neg	result1, #1
35378     38 00 90 AD |  if_e	jmp	#LR__5350
3537c                 | '     return getcf(__this);
3537c     20 E4 05 F1 | 	add	objptr, #32
35380     F2 26 02 FB | 	rdlong	local01, objptr
35384     13 29 02 F6 | 	mov	local02, local01
35388     20 E4 85 F1 | 	sub	objptr, #32
3538c     13 28 46 F7 | 	zerox	local02, #19
35390     14 26 46 F0 | 	shr	local01, #20
35394     02 26 66 F0 | 	shl	local01, #2
35398     ED 26 02 F1 | 	add	local01, __methods__
3539c     13 27 02 FB | 	rdlong	local01, local01
353a0     F2 12 02 F6 | 	mov	arg01, objptr
353a4     F2 2A 02 F6 | 	mov	local03, objptr
353a8     14 E5 01 F6 | 	mov	objptr, local02
353ac     2D 26 62 FD | 	call	local01
353b0     15 E5 01 F6 | 	mov	objptr, local03
353b4                 | LR__5350
353b4     A7 F0 03 F6 | 	mov	ptra, fp
353b8     B2 00 A0 FD | 	call	#popregs_
353bc                 | __struct__s_vfs_file_t_getchar_ret
353bc     2D 00 64 FD | 	ret
353c0                 | 
353c0                 | __struct___bas_wrap_sender_tx
353c0     03 4A 05 F6 | 	mov	COUNT_, #3
353c4     A8 00 A0 FD | 	call	#pushregs_
353c8     F2 26 02 FB | 	rdlong	local01, objptr
353cc     13 29 02 F6 | 	mov	local02, local01
353d0     13 26 46 F7 | 	zerox	local01, #19
353d4     14 28 46 F0 | 	shr	local02, #20
353d8     02 28 66 F0 | 	shl	local02, #2
353dc     ED 28 02 F1 | 	add	local02, __methods__
353e0     14 29 02 FB | 	rdlong	local02, local02
353e4     F2 2A 02 F6 | 	mov	local03, objptr
353e8     13 E5 01 F6 | 	mov	objptr, local01
353ec     2D 28 62 FD | 	call	local02
353f0     15 E5 01 F6 | 	mov	objptr, local03
353f4     01 FA 05 F6 | 	mov	result1, #1
353f8     A7 F0 03 F6 | 	mov	ptra, fp
353fc     B2 00 A0 FD | 	call	#popregs_
35400                 | __struct___bas_wrap_sender_tx_ret
35400     2D 00 64 FD | 	ret
35404                 | 
35404                 | __struct___bas_wrap_sender_rx
35404     03 4A 05 F6 | 	mov	COUNT_, #3
35408     A8 00 A0 FD | 	call	#pushregs_
3540c     04 E4 05 F1 | 	add	objptr, #4
35410     F2 26 02 FB | 	rdlong	local01, objptr
35414     13 29 02 F6 | 	mov	local02, local01
35418     04 E4 85 F1 | 	sub	objptr, #4
3541c     13 28 46 F7 | 	zerox	local02, #19
35420     14 26 46 F0 | 	shr	local01, #20
35424     02 26 66 F0 | 	shl	local01, #2
35428     ED 26 02 F1 | 	add	local01, __methods__
3542c     13 27 02 FB | 	rdlong	local01, local01
35430     F2 2A 02 F6 | 	mov	local03, objptr
35434     14 E5 01 F6 | 	mov	objptr, local02
35438     2D 26 62 FD | 	call	local01
3543c     15 E5 01 F6 | 	mov	objptr, local03
35440     A7 F0 03 F6 | 	mov	ptra, fp
35444     B2 00 A0 FD | 	call	#popregs_
35448                 | __struct___bas_wrap_sender_rx_ret
35448     2D 00 64 FD | 	ret
3544c                 | 
3544c                 | __struct___bas_wrap_sender_close
3544c     03 4A 05 F6 | 	mov	COUNT_, #3
35450     A8 00 A0 FD | 	call	#pushregs_
35454     08 E4 05 F1 | 	add	objptr, #8
35458     F2 26 02 FB | 	rdlong	local01, objptr
3545c     13 29 02 F6 | 	mov	local02, local01
35460     08 E4 85 F1 | 	sub	objptr, #8
35464     13 28 46 F7 | 	zerox	local02, #19
35468     14 26 46 F0 | 	shr	local01, #20
3546c     02 26 66 F0 | 	shl	local01, #2
35470     ED 26 02 F1 | 	add	local01, __methods__
35474     13 27 02 FB | 	rdlong	local01, local01
35478     F2 2A 02 F6 | 	mov	local03, objptr
3547c     14 E5 01 F6 | 	mov	objptr, local02
35480     2D 26 62 FD | 	call	local01
35484     15 E5 01 F6 | 	mov	objptr, local03
35488     A7 F0 03 F6 | 	mov	ptra, fp
3548c     B2 00 A0 FD | 	call	#popregs_
35490                 | __struct___bas_wrap_sender_close_ret
35490     2D 00 64 FD | 	ret
35494                 | 
35494                 | LR__5360
35494     2F          | 	byte	"/"
35495     00          | 	byte	0
35496                 | LR__5361
35496     69 6E 66    | 	byte	"inf"
35499     00          | 	byte	0
3549a                 | LR__5362
3549a     6E 61 6E    | 	byte	"nan"
3549d     00          | 	byte	0
3549e                 | LR__5363
3549e                 | 	byte	
3549e     00          | 	byte	0
3549f                 | LR__5364
3549f                 | 	byte	
3549f     00          | 	byte	0
354a0                 | LR__5365
354a0                 | 	byte	
354a0     00          | 	byte	0
354a1                 | LR__5366
354a1                 | 	byte	
354a1     00          | 	byte	0
354a2                 | LR__5367
354a2                 | 	byte	
354a2     00          | 	byte	0
354a3                 | LR__5368
354a3                 | 	byte	
354a3     00          | 	byte	0
354a4                 | LR__5369
354a4                 | 	byte	
354a4     00          | 	byte	0
354a5                 | LR__5370
354a5                 | 	byte	
354a5     00          | 	byte	0
354a6                 | LR__5371
354a6     00          | 	byte	0
354a7     00          | 	byte	0
354a8                 | LR__5372
354a8     00          | 	byte	0
354a9     00          | 	byte	0
354aa                 | LR__5373
354aa     00          | 	byte	0
354ab     00          | 	byte	0
354ac                 | LR__5374
354ac     20 21 21 21 
354b0     20 63 6F 72 
354b4     72 75 70 74 
354b8     65 64 20 68 
354bc     65 61 70 3F 
354c0     3F 3F 20 21 
354c4     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
354c7     00          | 	byte	0
354c8                 | LR__5375
354c8     20 21 21 21 
354cc     20 6F 75 74 
354d0     20 6F 66 20 
354d4     68 65 61 70 
354d8     20 6D 65 6D 
354dc     6F 72 79 20 
354e0     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
354e4     00          | 	byte	0
354e5                 | LR__5376
354e5     20 21 21 21 
354e9     20 63 6F 72 
354ed     72 75 70 74 
354f1     65 64 20 68 
354f5     65 61 70 20 
354f9     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
354fd     00          | 	byte	0
354fe                 | LR__5377
354fe     00          | 	byte	0
354ff     00          | 	byte	0
35500                 | LR__5378
35500     2E          | 	byte	"."
35501     00          | 	byte	0
35502                 | LR__5379
35502     00          | 	byte	0
35503     00          | 	byte	0
35504                 | LR__5380
35504     00          | 	byte	0
35505     00          | 	byte	0
35506                 | LR__5381
35506     00          | 	byte	0
35507     00          | 	byte	0
35508                 | LR__5382
35508     2A 3A 3C 3E 
3550c     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
35510     00          | 	byte	0
35511                 | LR__5383
35511     2B 2C 3B 3D 
35515     5B 5D       | 	byte	"+,;=[]"
35517     00          | 	byte	0
35518                 | LR__5384
35518     46 41 54 33 
3551c     32 20 20 20 | 	byte	"FAT32   "
35520     00          | 	byte	0
35521                 | LR__5385
35521     54 5A       | 	byte	"TZ"
35523     00          | 	byte	0
35524                 | LR__5386
35524     00          | 	byte	0
35525     00          | 	byte	0
35526                 | LR__5387
35526                 | 	byte	
35526     00          | 	byte	0
35527                 | LR__5388
35527                 | 	byte	
35527     00          | 	byte	0
35528                 | LR__5389
35528                 | 	byte	
35528     00          | 	byte	0
35529                 | LR__5390
35529                 | 	byte	
35529     00          | 	byte	0
3552a                 | LR__5391
3552a     22          | 	byte	34
3552b     00          | 	byte	0
3552c                 | LR__5392
3552c     22          | 	byte	34
3552d     00          | 	byte	0
3552e                 | LR__5393
3552e     3A          | 	byte	":"
3552f     00          | 	byte	0
35530                 | LR__5394
35530                 | 	byte	
35530     00          | 	byte	0
35531                 | LR__5395
35531                 | 	byte	
35531     00          | 	byte	0
35532                 | LR__5396
35532                 | 	byte	
35532     00          | 	byte	0
35533                 | LR__5397
35533                 | 	byte	
35533     00          | 	byte	0
35534                 | LR__5398
35534                 | 	byte	
35534     00          | 	byte	0
35535                 | LR__5399
35535                 | 	byte	
35535     00          | 	byte	0
35536                 | LR__5400
35536                 | 	byte	
35536     00          | 	byte	0
35537                 | LR__5401
35537     30          | 	byte	"0"
35538     00          | 	byte	0
35539                 | LR__5402
35539     22          | 	byte	34
3553a     00          | 	byte	0
3553b                 | LR__5403
3553b     22          | 	byte	34
3553c     00          | 	byte	0
3553d                 | LR__5404
3553d     22          | 	byte	34
3553e     00          | 	byte	0
3553f                 | LR__5405
3553f     22          | 	byte	34
35540     00          | 	byte	0
35541                 | LR__5406
35541     22          | 	byte	34
35542     00          | 	byte	0
35543                 | LR__5407
35543     3E          | 	byte	">"
35544     00          | 	byte	0
35545                 | LR__5408
35545     3C          | 	byte	"<"
35546     00          | 	byte	0
35547                 | LR__5409
35547     2B          | 	byte	"+"
35548     00          | 	byte	0
35549                 | LR__5410
35549     2D          | 	byte	"-"
3554a     00          | 	byte	0
3554b                 | LR__5411
3554b     2A          | 	byte	"*"
3554c     00          | 	byte	0
3554d                 | LR__5412
3554d     2F          | 	byte	"/"
3554e     00          | 	byte	0
3554f                 | LR__5413
3554f     5E          | 	byte	"^"
35550     00          | 	byte	0
35551                 | LR__5414
35551     3D          | 	byte	"="
35552     00          | 	byte	0
35553                 | LR__5415
35553     2B          | 	byte	"+"
35554     00          | 	byte	0
35555                 | LR__5416
35555     2B          | 	byte	"+"
35556     00          | 	byte	0
35557                 | LR__5417
35557     2D          | 	byte	"-"
35558     00          | 	byte	0
35559                 | LR__5418
35559     2D          | 	byte	"-"
3555a     00          | 	byte	0
3555b                 | LR__5419
3555b     3C          | 	byte	"<"
3555c     00          | 	byte	0
3555d                 | LR__5420
3555d     3E          | 	byte	">"
3555e     00          | 	byte	0
3555f                 | LR__5421
3555f     22          | 	byte	34
35560     00          | 	byte	0
35561                 | LR__5422
35561     22          | 	byte	34
35562     00          | 	byte	0
35563                 | LR__5423
35563     65 6C 73 65 | 	byte	"else"
35567     00          | 	byte	0
35568                 | LR__5424
35568     74 68 65 6E | 	byte	"then"
3556c     00          | 	byte	0
3556d                 | LR__5425
3556d     2E          | 	byte	"."
3556e     00          | 	byte	0
3556f                 | LR__5426
3556f     3F          | 	byte	"?"
35570     00          | 	byte	0
35571                 | LR__5427
35571     3F          | 	byte	"?"
35572     00          | 	byte	0
35573                 | LR__5428
35573     6D 6F 75 73 
35577     65          | 	byte	"mouse"
35578     00          | 	byte	0
35579                 | LR__5429
35579     63 75 72 73 
3557d     6F 72       | 	byte	"cursor"
3557f     00          | 	byte	0
35580                 | LR__5430
35580     63 6C 69 63 
35584     6B          | 	byte	"click"
35585     00          | 	byte	0
35586                 | LR__5431
35586     6F 6E       | 	byte	"on"
35588     00          | 	byte	0
35589                 | LR__5432
35589     31          | 	byte	"1"
3558a     00          | 	byte	0
3558b                 | LR__5433
3558b     6F 66 66    | 	byte	"off"
3558e     00          | 	byte	0
3558f                 | LR__5434
3558f     30          | 	byte	"0"
35590     00          | 	byte	0
35591                 | LR__5435
35591     6D 6F 64 65 | 	byte	"mode"
35595     00          | 	byte	0
35596                 | LR__5436
35596     6D 2E       | 	byte	"m."
35598     00          | 	byte	0
35599                 | LR__5437
35599     61 74 61 72 
3559d     69          | 	byte	"atari"
3559e     00          | 	byte	0
3559f                 | LR__5438
3559f     30          | 	byte	"0"
355a0     00          | 	byte	0
355a1                 | LR__5439
355a1     70 63 5F 61 
355a5     6D 62 65 72 | 	byte	"pc_amber"
355a9     00          | 	byte	0
355aa                 | LR__5440
355aa     31          | 	byte	"1"
355ab     00          | 	byte	0
355ac                 | LR__5441
355ac     70 63 5F 67 
355b0     72 65 65 6E | 	byte	"pc_green"
355b4     00          | 	byte	0
355b5                 | LR__5442
355b5     32          | 	byte	"2"
355b6     00          | 	byte	0
355b7                 | LR__5443
355b7     70 63 5F 77 
355bb     68 69 74 65 | 	byte	"pc_white"
355bf     00          | 	byte	0
355c0                 | LR__5444
355c0     33          | 	byte	"3"
355c1     00          | 	byte	0
355c2                 | LR__5445
355c2     73 74       | 	byte	"st"
355c4     00          | 	byte	0
355c5                 | LR__5446
355c5     34          | 	byte	"4"
355c6     00          | 	byte	0
355c7                 | LR__5447
355c7                 | 	byte	
355c7     00          | 	byte	0
355c8                 | LR__5448
355c8     6C 6F 61 64 | 	byte	"load"
355cc     00          | 	byte	0
355cd                 | LR__5449
355cd     73 61 76 65 | 	byte	"save"
355d1     00          | 	byte	0
355d2                 | LR__5450
355d2     62 72 75 6E | 	byte	"brun"
355d6     00          | 	byte	0
355d7                 | LR__5451
355d7     72 75 6E    | 	byte	"run"
355da     00          | 	byte	0
355db                 | LR__5452
355db     6C 6F 2E    | 	byte	"lo."
355de     00          | 	byte	0
355df                 | LR__5453
355df     73 2E       | 	byte	"s."
355e1     00          | 	byte	0
355e2                 | LR__5454
355e2     62 72 2E    | 	byte	"br."
355e5     00          | 	byte	0
355e6                 | LR__5455
355e6     65 6E 74 65 
355ea     72          | 	byte	"enter"
355eb     00          | 	byte	0
355ec                 | LR__5456
355ec     65 2E       | 	byte	"e."
355ee     00          | 	byte	0
355ef                 | LR__5457
355ef     64 65 6C 65 
355f3     74 65       | 	byte	"delete"
355f5     00          | 	byte	0
355f6                 | LR__5458
355f6     6D 6B 64 69 
355fa     72          | 	byte	"mkdir"
355fb     00          | 	byte	0
355fc                 | LR__5459
355fc     63 64       | 	byte	"cd"
355fe     00          | 	byte	0
355ff                 | LR__5460
355ff     63 64 2E    | 	byte	"cd."
35602     00          | 	byte	0
35603                 | LR__5461
35603     2E          | 	byte	"."
35604     00          | 	byte	0
35605                 | LR__5462
35605     2E 2E       | 	byte	".."
35607     00          | 	byte	0
35608                 | LR__5463
35608     63 64       | 	byte	"cd"
3560a     00          | 	byte	0
3560b                 | LR__5464
3560b     2F          | 	byte	"/"
3560c     00          | 	byte	0
3560d                 | LR__5465
3560d                 | 	byte	
3560d     00          | 	byte	0
3560e                 | LR__5466
3560e                 | 	byte	
3560e     00          | 	byte	0
3560f                 | LR__5467
3560f                 | 	byte	
3560f     00          | 	byte	0
35610                 | LR__5468
35610                 | 	byte	
35610     00          | 	byte	0
35611                 | LR__5469
35611                 | 	byte	
35611     00          | 	byte	0
35612                 | LR__5470
35612     52 65 61 64 
35616     79          | 	byte	"Ready"
35617     00          | 	byte	0
35618                 | LR__5471
35618     2B          | 	byte	"+"
35619     00          | 	byte	0
3561a                 | LR__5472
3561a     2D          | 	byte	"-"
3561b     00          | 	byte	0
3561c                 | LR__5473
3561c     6F 72       | 	byte	"or"
3561e     00          | 	byte	0
3561f                 | LR__5474
3561f     78 6F 72    | 	byte	"xor"
35622     00          | 	byte	0
35623                 | LR__5475
35623     2A          | 	byte	"*"
35624     00          | 	byte	0
35625                 | LR__5476
35625     2F          | 	byte	"/"
35626     00          | 	byte	0
35627                 | LR__5477
35627     61 6E 64    | 	byte	"and"
3562a     00          | 	byte	0
3562b                 | LR__5478
3562b     64 69 76    | 	byte	"div"
3562e     00          | 	byte	0
3562f                 | LR__5479
3562f     6D 6F 64    | 	byte	"mod"
35632     00          | 	byte	0
35633                 | LR__5480
35633     73 68 6C    | 	byte	"shl"
35636     00          | 	byte	0
35637                 | LR__5481
35637     73 68 72    | 	byte	"shr"
3563a     00          | 	byte	0
3563b                 | LR__5482
3563b     5E          | 	byte	"^"
3563c     00          | 	byte	0
3563d                 | LR__5483
3563d     6E 6F 74    | 	byte	"not"
35640     00          | 	byte	0
35641                 | LR__5484
35641     40          | 	byte	"@"
35642     00          | 	byte	0
35643                 | LR__5485
35643     3D          | 	byte	"="
35644     00          | 	byte	0
35645                 | LR__5486
35645     3E 3D       | 	byte	">="
35647     00          | 	byte	0
35648                 | LR__5487
35648     3C 3D       | 	byte	"<="
3564a     00          | 	byte	0
3564b                 | LR__5488
3564b     3C          | 	byte	"<"
3564c     00          | 	byte	0
3564d                 | LR__5489
3564d     3E          | 	byte	">"
3564e     00          | 	byte	0
3564f                 | LR__5490
3564f     3C 3E       | 	byte	"<>"
35651     00          | 	byte	0
35652                 | LR__5491
35652     2B 2B       | 	byte	"++"
35654     00          | 	byte	0
35655                 | LR__5492
35655     2D 2D       | 	byte	"--"
35657     00          | 	byte	0
35658                 | LR__5493
35658     23          | 	byte	"#"
35659     00          | 	byte	0
3565a                 | LR__5494
3565a     30          | 	byte	"0"
3565b     00          | 	byte	0
3565c                 | LR__5495
3565c     39          | 	byte	"9"
3565d     00          | 	byte	0
3565e                 | LR__5496
3565e     23 72 65 61 
35662     64          | 	byte	"#read"
35663     00          | 	byte	0
35664                 | LR__5497
35664     23 77 72 69 
35668     74 65       | 	byte	"#write"
3566a     00          | 	byte	0
3566b                 | LR__5498
3566b     23 61 70 70 
3566f     65 6E 64    | 	byte	"#append"
35672     00          | 	byte	0
35673                 | LR__5499
35673     23          | 	byte	"#"
35674     00          | 	byte	0
35675                 | LR__5500
35675     23          | 	byte	"#"
35676     00          | 	byte	0
35677                 | LR__5501
35677     2D          | 	byte	"-"
35678     00          | 	byte	0
35679                 | LR__5502
35679     30          | 	byte	"0"
3567a     00          | 	byte	0
3567b                 | LR__5503
3567b     63          | 	byte	"c"
3567c     00          | 	byte	0
3567d                 | LR__5504
3567d     63 23       | 	byte	"c#"
3567f     00          | 	byte	0
35680                 | LR__5505
35680     64          | 	byte	"d"
35681     00          | 	byte	0
35682                 | LR__5506
35682     64 23       | 	byte	"d#"
35684     00          | 	byte	0
35685                 | LR__5507
35685     65          | 	byte	"e"
35686     00          | 	byte	0
35687                 | LR__5508
35687     66          | 	byte	"f"
35688     00          | 	byte	0
35689                 | LR__5509
35689     66 23       | 	byte	"f#"
3568b     00          | 	byte	0
3568c                 | LR__5510
3568c     67          | 	byte	"g"
3568d     00          | 	byte	0
3568e                 | LR__5511
3568e     67 23       | 	byte	"g#"
35690     00          | 	byte	0
35691                 | LR__5512
35691     61          | 	byte	"a"
35692     00          | 	byte	0
35693                 | LR__5513
35693     61 23       | 	byte	"a#"
35695     00          | 	byte	0
35696                 | LR__5514
35696     68          | 	byte	"h"
35697     00          | 	byte	0
35698                 | LR__5515
35698     62          | 	byte	"b"
35699     00          | 	byte	0
3569a                 | LR__5516
3569a     2B          | 	byte	"+"
3569b     00          | 	byte	0
3569c                 | LR__5517
3569c     2D          | 	byte	"-"
3569d     00          | 	byte	0
3569e                 | LR__5518
3569e     3D          | 	byte	"="
3569f     00          | 	byte	0
356a0                 | LR__5519
356a0     2C          | 	byte	","
356a1     00          | 	byte	0
356a2                 | LR__5520
356a2     2A          | 	byte	"*"
356a3     00          | 	byte	0
356a4                 | LR__5521
356a4     2F          | 	byte	"/"
356a5     00          | 	byte	0
356a6                 | LR__5522
356a6     3B          | 	byte	";"
356a7     00          | 	byte	0
356a8                 | LR__5523
356a8     22          | 	byte	34
356a9     00          | 	byte	0
356aa                 | LR__5524
356aa     5E          | 	byte	"^"
356ab     00          | 	byte	0
356ac                 | LR__5525
356ac     29          | 	byte	")"
356ad     00          | 	byte	0
356ae                 | LR__5526
356ae     28          | 	byte	"("
356af     00          | 	byte	0
356b0                 | LR__5527
356b0     3A          | 	byte	":"
356b1     00          | 	byte	0
356b2                 | LR__5528
356b2     20          | 	byte	" "
356b3     00          | 	byte	0
356b4                 | LR__5529
356b4     3E          | 	byte	">"
356b5     00          | 	byte	0
356b6                 | LR__5530
356b6     3C          | 	byte	"<"
356b7     00          | 	byte	0
356b8                 | LR__5531
356b8     3D          | 	byte	"="
356b9     00          | 	byte	0
356ba                 | LR__5532
356ba     62 65 65 70 | 	byte	"beep"
356be     00          | 	byte	0
356bf                 | LR__5533
356bf     62 2E       | 	byte	"b."
356c1     00          | 	byte	0
356c2                 | LR__5534
356c2     62 6C 69 74 | 	byte	"blit"
356c6     00          | 	byte	0
356c7                 | LR__5535
356c7     62 6F 78    | 	byte	"box"
356ca     00          | 	byte	0
356cb                 | LR__5536
356cb     62 72 75 6E | 	byte	"brun"
356cf     00          | 	byte	0
356d0                 | LR__5537
356d0     62 72 2E    | 	byte	"br."
356d3     00          | 	byte	0
356d4                 | LR__5538
356d4     63 64       | 	byte	"cd"
356d6     00          | 	byte	0
356d7                 | LR__5539
356d7     63 68 61 6E 
356db     67 65 66 72 
356df     65 71       | 	byte	"changefreq"
356e1     00          | 	byte	0
356e2                 | LR__5540
356e2     63 66 2E    | 	byte	"cf."
356e5     00          | 	byte	0
356e6                 | LR__5541
356e6     63 68 61 6E 
356ea     67 65 70 61 
356ee     6E          | 	byte	"changepan"
356ef     00          | 	byte	0
356f0                 | LR__5542
356f0     63 70 2E    | 	byte	"cp."
356f3     00          | 	byte	0
356f4                 | LR__5543
356f4     63 68 61 6E 
356f8     67 65 76 6F 
356fc     6C          | 	byte	"changevol"
356fd     00          | 	byte	0
356fe                 | LR__5544
356fe     63 76 2E    | 	byte	"cv."
35701     00          | 	byte	0
35702                 | LR__5545
35702     63 68 61 6E 
35706     67 65 77 61 
3570a     76 65       | 	byte	"changewave"
3570c     00          | 	byte	0
3570d                 | LR__5546
3570d     63 77 2E    | 	byte	"cw."
35710     00          | 	byte	0
35711                 | LR__5547
35711     63 69 72 63 
35715     6C 65       | 	byte	"circle"
35717     00          | 	byte	0
35718                 | LR__5548
35718     63 69 2E    | 	byte	"ci."
3571b     00          | 	byte	0
3571c                 | LR__5549
3571c     63 6C 69 63 
35720     6B          | 	byte	"click"
35721     00          | 	byte	0
35722                 | LR__5550
35722     63 6C 6F 73 
35726     65          | 	byte	"close"
35727     00          | 	byte	0
35728                 | LR__5551
35728     63 6C 73    | 	byte	"cls"
3572b     00          | 	byte	0
3572c                 | LR__5552
3572c     63 6F 6C 6F 
35730     72          | 	byte	"color"
35731     00          | 	byte	0
35732                 | LR__5553
35732     63 2E       | 	byte	"c."
35734     00          | 	byte	0
35735                 | LR__5554
35735     63 73 61 76 
35739     65          | 	byte	"csave"
3573a     00          | 	byte	0
3573b                 | LR__5555
3573b     63 73 2E    | 	byte	"cs."
3573e     00          | 	byte	0
3573f                 | LR__5556
3573f     63 75 72 73 
35743     6F 72       | 	byte	"cursor"
35745     00          | 	byte	0
35746                 | LR__5557
35746     64 61 74 61 | 	byte	"data"
3574a     00          | 	byte	0
3574b                 | LR__5558
3574b     64 65 66 73 
3574f     6E 64       | 	byte	"defsnd"
35751     00          | 	byte	0
35752                 | LR__5559
35752     64 65 66 65 
35756     6E 76       | 	byte	"defenv"
35758     00          | 	byte	0
35759                 | LR__5560
35759     64 65 66 73 
3575d     70 72 69 74 
35761     65          | 	byte	"defsprite"
35762     00          | 	byte	0
35763                 | LR__5561
35763     64 73 2E    | 	byte	"ds."
35766     00          | 	byte	0
35767                 | LR__5562
35767     64 65 67    | 	byte	"deg"
3576a     00          | 	byte	0
3576b                 | LR__5563
3576b     64 65 6C 65 
3576f     74 65       | 	byte	"delete"
35771     00          | 	byte	0
35772                 | LR__5564
35772     64 69 6D    | 	byte	"dim"
35775     00          | 	byte	0
35776                 | LR__5565
35776     64 69 72    | 	byte	"dir"
35779     00          | 	byte	0
3577a                 | LR__5566
3577a     64 70 6F 6B 
3577e     65          | 	byte	"dpoke"
3577f     00          | 	byte	0
35780                 | LR__5567
35780     64 72 61 77 | 	byte	"draw"
35784     00          | 	byte	0
35785                 | LR__5568
35785     64 72 61 77 
35789     74 6F       | 	byte	"drawto"
3578b     00          | 	byte	0
3578c                 | LR__5569
3578c     64 72 2E    | 	byte	"dr."
3578f     00          | 	byte	0
35790                 | LR__5570
35790     65 6C 73 65 | 	byte	"else"
35794     00          | 	byte	0
35795                 | LR__5571
35795     65 6E 64    | 	byte	"end"
35798     00          | 	byte	0
35799                 | LR__5572
35799     65 6E 74 65 
3579d     72          | 	byte	"enter"
3579e     00          | 	byte	0
3579f                 | LR__5573
3579f     65 2E       | 	byte	"e."
357a1     00          | 	byte	0
357a2                 | LR__5574
357a2     66 63 69 72 
357a6     63 6C 65    | 	byte	"fcircle"
357a9     00          | 	byte	0
357aa                 | LR__5575
357aa     66 63 2E    | 	byte	"fc."
357ad     00          | 	byte	0
357ae                 | LR__5576
357ae     66 69 6C 6C | 	byte	"fill"
357b2     00          | 	byte	0
357b3                 | LR__5577
357b3     66 69 2E    | 	byte	"fi."
357b6     00          | 	byte	0
357b7                 | LR__5578
357b7     66 6F 6E 74 | 	byte	"font"
357bb     00          | 	byte	0
357bc                 | LR__5579
357bc     66 6F 72    | 	byte	"for"
357bf     00          | 	byte	0
357c0                 | LR__5580
357c0     66 2E       | 	byte	"f."
357c2     00          | 	byte	0
357c3                 | LR__5581
357c3     66 72 61 6D 
357c7     65          | 	byte	"frame"
357c8     00          | 	byte	0
357c9                 | LR__5582
357c9     66 72 2E    | 	byte	"fr."
357cc     00          | 	byte	0
357cd                 | LR__5583
357cd     67 65 74    | 	byte	"get"
357d0     00          | 	byte	0
357d1                 | LR__5584
357d1     67 6F 73 75 
357d5     62          | 	byte	"gosub"
357d6     00          | 	byte	0
357d7                 | LR__5585
357d7     67 6F 74 6F | 	byte	"goto"
357db     00          | 	byte	0
357dc                 | LR__5586
357dc     67 2E       | 	byte	"g."
357de     00          | 	byte	0
357df                 | LR__5587
357df     69 66       | 	byte	"if"
357e1     00          | 	byte	0
357e2                 | LR__5588
357e2     69 6E 6B    | 	byte	"ink"
357e5     00          | 	byte	0
357e6                 | LR__5589
357e6     69 2E       | 	byte	"i."
357e8     00          | 	byte	0
357e9                 | LR__5590
357e9     69 6E 70 75 
357ed     74          | 	byte	"input"
357ee     00          | 	byte	0
357ef                 | LR__5591
357ef     6C 69 73 74 | 	byte	"list"
357f3     00          | 	byte	0
357f4                 | LR__5592
357f4     6C 2E       | 	byte	"l."
357f6     00          | 	byte	0
357f7                 | LR__5593
357f7     6C 6F 61 64 | 	byte	"load"
357fb     00          | 	byte	0
357fc                 | LR__5594
357fc     6C 6F 2E    | 	byte	"lo."
357ff     00          | 	byte	0
35800                 | LR__5595
35800     6C 70 6F 6B 
35804     65          | 	byte	"lpoke"
35805     00          | 	byte	0
35806                 | LR__5596
35806     6D 6B 64 69 
3580a     72          | 	byte	"mkdir"
3580b     00          | 	byte	0
3580c                 | LR__5597
3580c     6D 6F 64 65 | 	byte	"mode"
35810     00          | 	byte	0
35811                 | LR__5598
35811     6D 2E       | 	byte	"m."
35813     00          | 	byte	0
35814                 | LR__5599
35814     6D 6F 75 73 
35818     65          | 	byte	"mouse"
35819     00          | 	byte	0
3581a                 | LR__5600
3581a     6E 65 77    | 	byte	"new"
3581d     00          | 	byte	0
3581e                 | LR__5601
3581e     6E 65 78 74 | 	byte	"next"
35822     00          | 	byte	0
35823                 | LR__5602
35823     6E 2E       | 	byte	"n."
35825     00          | 	byte	0
35826                 | LR__5603
35826     6F 6E       | 	byte	"on"
35828     00          | 	byte	0
35829                 | LR__5604
35829     6F 70 65 6E | 	byte	"open"
3582d     00          | 	byte	0
3582e                 | LR__5605
3582e     70 61 70 65 
35832     72          | 	byte	"paper"
35833     00          | 	byte	0
35834                 | LR__5606
35834     70 61 2E    | 	byte	"pa."
35837     00          | 	byte	0
35838                 | LR__5607
35838     70 69 6E 66 
3583c     6C 6F 61 74 | 	byte	"pinfloat"
35840     00          | 	byte	0
35841                 | LR__5608
35841     70 69 6E 68 
35845     69          | 	byte	"pinhi"
35846     00          | 	byte	0
35847                 | LR__5609
35847     70 69 6E 6C 
3584b     6F          | 	byte	"pinlo"
3584c     00          | 	byte	0
3584d                 | LR__5610
3584d     70 69 6E 73 
35851     74 61 72 74 | 	byte	"pinstart"
35855     00          | 	byte	0
35856                 | LR__5611
35856     70 69 6E 74 
3585a     6F 67 67 6C 
3585e     65          | 	byte	"pintoggle"
3585f     00          | 	byte	0
35860                 | LR__5612
35860     70 69 6E 77 
35864     72 69 74 65 | 	byte	"pinwrite"
35868     00          | 	byte	0
35869                 | LR__5613
35869     70 6C 61 79 | 	byte	"play"
3586d     00          | 	byte	0
3586e                 | LR__5614
3586e     70 2E       | 	byte	"p."
35870     00          | 	byte	0
35871                 | LR__5615
35871     70 6C 6F 74 | 	byte	"plot"
35875     00          | 	byte	0
35876                 | LR__5616
35876     70 6C 2E    | 	byte	"pl."
35879     00          | 	byte	0
3587a                 | LR__5617
3587a     70 6F 6B 65 | 	byte	"poke"
3587e     00          | 	byte	0
3587f                 | LR__5618
3587f     70 6F 70    | 	byte	"pop"
35882     00          | 	byte	0
35883                 | LR__5619
35883     70 6F 73 69 
35887     74 69 6F 6E | 	byte	"position"
3588b     00          | 	byte	0
3588c                 | LR__5620
3588c     70 6F 73 2E | 	byte	"pos."
35890     00          | 	byte	0
35891                 | LR__5621
35891     70 72 69 6E 
35895     74          | 	byte	"print"
35896     00          | 	byte	0
35897                 | LR__5622
35897     3F          | 	byte	"?"
35898     00          | 	byte	0
35899                 | LR__5623
35899     70 75 74    | 	byte	"put"
3589c     00          | 	byte	0
3589d                 | LR__5624
3589d     72 61 64    | 	byte	"rad"
358a0     00          | 	byte	0
358a1                 | LR__5625
358a1     72 65 61 64 | 	byte	"read"
358a5     00          | 	byte	0
358a6                 | LR__5626
358a6     72 65 6C 65 
358aa     61 73 65    | 	byte	"release"
358ad     00          | 	byte	0
358ae                 | LR__5627
358ae     72 65 6D    | 	byte	"rem"
358b1     00          | 	byte	0
358b2                 | LR__5628
358b2     27          | 	byte	"'"
358b3     00          | 	byte	0
358b4                 | LR__5629
358b4     72 65 73 74 
358b8     6F 72 65    | 	byte	"restore"
358bb     00          | 	byte	0
358bc                 | LR__5630
358bc     72 65 74 75 
358c0     72 6E       | 	byte	"return"
358c2     00          | 	byte	0
358c3                 | LR__5631
358c3     72 75 6E    | 	byte	"run"
358c6     00          | 	byte	0
358c7                 | LR__5632
358c7     73 61 76 65 | 	byte	"save"
358cb     00          | 	byte	0
358cc                 | LR__5633
358cc     73 2E       | 	byte	"s."
358ce     00          | 	byte	0
358cf                 | LR__5634
358cf     73 65 74 64 
358d3     65 6C 61 79 | 	byte	"setdelay"
358d7     00          | 	byte	0
358d8                 | LR__5635
358d8     73 64 2E    | 	byte	"sd."
358db     00          | 	byte	0
358dc                 | LR__5636
358dc     73 65 74 65 
358e0     6E 76       | 	byte	"setenv"
358e2     00          | 	byte	0
358e3                 | LR__5637
358e3     73 65 2E    | 	byte	"se."
358e6     00          | 	byte	0
358e7                 | LR__5638
358e7     73 65 74 6C 
358eb     65 6E       | 	byte	"setlen"
358ed     00          | 	byte	0
358ee                 | LR__5639
358ee     73 6C 2E    | 	byte	"sl."
358f1     00          | 	byte	0
358f2                 | LR__5640
358f2     73 65 74 70 
358f6     61 6E       | 	byte	"setpan"
358f8     00          | 	byte	0
358f9                 | LR__5641
358f9     73 70 2E    | 	byte	"sp."
358fc     00          | 	byte	0
358fd                 | LR__5642
358fd     73 65 74 73 
35901     75 73 74 61 
35905     69 6E       | 	byte	"setsustain"
35907     00          | 	byte	0
35908                 | LR__5643
35908     73 73 2E    | 	byte	"ss."
3590b     00          | 	byte	0
3590c                 | LR__5644
3590c     73 65 74 76 
35910     6F 6C       | 	byte	"setvol"
35912     00          | 	byte	0
35913                 | LR__5645
35913     73 76 2E    | 	byte	"sv."
35916     00          | 	byte	0
35917                 | LR__5646
35917     73 65 74 77 
3591b     61 76 65    | 	byte	"setwave"
3591e     00          | 	byte	0
3591f                 | LR__5647
3591f     73 77 2E    | 	byte	"sw."
35922     00          | 	byte	0
35923                 | LR__5648
35923     73 65 74 77 
35927     61 76       | 	byte	"setwav"
35929     00          | 	byte	0
3592a                 | LR__5649
3592a     73 68 75 74 
3592e     75 70       | 	byte	"shutup"
35930     00          | 	byte	0
35931                 | LR__5650
35931     73 68 2E    | 	byte	"sh."
35934     00          | 	byte	0
35935                 | LR__5651
35935     73 6F 75 6E 
35939     64          | 	byte	"sound"
3593a     00          | 	byte	0
3593b                 | LR__5652
3593b     73 6F 2E    | 	byte	"so."
3593e     00          | 	byte	0
3593f                 | LR__5653
3593f     73 70 72 69 
35943     74 65       | 	byte	"sprite"
35945     00          | 	byte	0
35946                 | LR__5654
35946     73 70 72 2E | 	byte	"spr."
3594a     00          | 	byte	0
3594b                 | LR__5655
3594b     74 68 65 6E | 	byte	"then"
3594f     00          | 	byte	0
35950                 | LR__5656
35950     77 61 69 74 
35954     6D 73       | 	byte	"waitms"
35956     00          | 	byte	0
35957                 | LR__5657
35957     77 2E       | 	byte	"w."
35959     00          | 	byte	0
3595a                 | LR__5658
3595a     77 61 69 74 
3595e     63 6C 6F 63 
35962     6B          | 	byte	"waitclock"
35963     00          | 	byte	0
35964                 | LR__5659
35964     77 63 2E    | 	byte	"wc."
35967     00          | 	byte	0
35968                 | LR__5660
35968     77 61 69 74 
3596c     76 62 6C    | 	byte	"waitvbl"
3596f     00          | 	byte	0
35970                 | LR__5661
35970     77 76 2E    | 	byte	"wv."
35973     00          | 	byte	0
35974                 | LR__5662
35974     77 72 70 69 
35978     6E          | 	byte	"wrpin"
35979     00          | 	byte	0
3597a                 | LR__5663
3597a     77 78 70 69 
3597e     6E          | 	byte	"wxpin"
3597f     00          | 	byte	0
35980                 | LR__5664
35980     77 79 70 69 
35984     6E          | 	byte	"wypin"
35985     00          | 	byte	0
35986                 | LR__5665
35986     61 62 73    | 	byte	"abs"
35989     00          | 	byte	0
3598a                 | LR__5666
3598a     61 63 6F 73 | 	byte	"acos"
3598e     00          | 	byte	0
3598f                 | LR__5667
3598f     61 64 72    | 	byte	"adr"
35992     00          | 	byte	0
35993                 | LR__5668
35993     61 64 64 72 | 	byte	"addr"
35997     00          | 	byte	0
35998                 | LR__5669
35998     61 73 63    | 	byte	"asc"
3599b     00          | 	byte	0
3599c                 | LR__5670
3599c     61 73 69 6E | 	byte	"asin"
359a0     00          | 	byte	0
359a1                 | LR__5671
359a1     61 74 6E    | 	byte	"atn"
359a4     00          | 	byte	0
359a5                 | LR__5672
359a5     62 69 6E 24 | 	byte	"bin$"
359a9     00          | 	byte	0
359aa                 | LR__5673
359aa     63 68 72 24 | 	byte	"chr$"
359ae     00          | 	byte	0
359af                 | LR__5674
359af     63 6F 73    | 	byte	"cos"
359b2     00          | 	byte	0
359b3                 | LR__5675
359b3     64 70 65 65 
359b7     6B          | 	byte	"dpeek"
359b8     00          | 	byte	0
359b9                 | LR__5676
359b9     66 72 61 6D 
359bd     65 62 75 66 | 	byte	"framebuf"
359c1     00          | 	byte	0
359c2                 | LR__5677
359c2     66 62 2E    | 	byte	"fb."
359c5     00          | 	byte	0
359c6                 | LR__5678
359c6     66 72 65    | 	byte	"fre"
359c9     00          | 	byte	0
359ca                 | LR__5679
359ca     67 65 74 70 
359ce     69 78 65 6C | 	byte	"getpixel"
359d2     00          | 	byte	0
359d3                 | LR__5680
359d3     67 65 2E    | 	byte	"ge."
359d6     00          | 	byte	0
359d7                 | LR__5681
359d7     67 65 74 65 
359db     6E 76 73 75 
359df     73 74 61 69 
359e3     6E          | 	byte	"getenvsustain"
359e4     00          | 	byte	0
359e5                 | LR__5682
359e5     67 65 74 6E 
359e9     6F 74 65 76 
359ed     61 6C 75 65 | 	byte	"getnotevalue"
359f1     00          | 	byte	0
359f2                 | LR__5683
359f2     67 65 74 74 
359f6     69 6D 65    | 	byte	"gettime"
359f9     00          | 	byte	0
359fa                 | LR__5684
359fa     68 65 78 24 | 	byte	"hex$"
359fe     00          | 	byte	0
359ff                 | LR__5685
359ff     69 6E 6B 65 
35a03     79 24       | 	byte	"inkey$"
35a05     00          | 	byte	0
35a06                 | LR__5686
35a06     69 6E 74    | 	byte	"int"
35a09     00          | 	byte	0
35a0a                 | LR__5687
35a0a     6C 65 66 74 
35a0e     24          | 	byte	"left$"
35a0f     00          | 	byte	0
35a10                 | LR__5688
35a10     6C 65 6E    | 	byte	"len"
35a13     00          | 	byte	0
35a14                 | LR__5689
35a14     6C 6F 67    | 	byte	"log"
35a17     00          | 	byte	0
35a18                 | LR__5690
35a18     6C 70 65 65 
35a1c     6B          | 	byte	"lpeek"
35a1d     00          | 	byte	0
35a1e                 | LR__5691
35a1e     6D 69 64 24 | 	byte	"mid$"
35a22     00          | 	byte	0
35a23                 | LR__5692
35a23     6D 6F 75 73 
35a27     65 6B       | 	byte	"mousek"
35a29     00          | 	byte	0
35a2a                 | LR__5693
35a2a     6D 6F 75 73 
35a2e     65 77       | 	byte	"mousew"
35a30     00          | 	byte	0
35a31                 | LR__5694
35a31     6D 6F 75 73 
35a35     65 78       | 	byte	"mousex"
35a37     00          | 	byte	0
35a38                 | LR__5695
35a38     6D 6F 75 73 
35a3c     65 79       | 	byte	"mousey"
35a3e     00          | 	byte	0
35a3f                 | LR__5696
35a3f     70 61 64 78 | 	byte	"padx"
35a43     00          | 	byte	0
35a44                 | LR__5697
35a44     70 61 64 79 | 	byte	"pady"
35a48     00          | 	byte	0
35a49                 | LR__5698
35a49     70 61 64 7A | 	byte	"padz"
35a4d     00          | 	byte	0
35a4e                 | LR__5699
35a4e     70 61 64 68 | 	byte	"padh"
35a52     00          | 	byte	0
35a53                 | LR__5700
35a53     70 65 65 6B | 	byte	"peek"
35a57     00          | 	byte	0
35a58                 | LR__5701
35a58     70 69 6E 72 
35a5c     65 61 64    | 	byte	"pinread"
35a5f     00          | 	byte	0
35a60                 | LR__5702
35a60     72 64 70 69 
35a64     6E          | 	byte	"rdpin"
35a65     00          | 	byte	0
35a66                 | LR__5703
35a66     72 69 67 68 
35a6a     74 24       | 	byte	"right$"
35a6c     00          | 	byte	0
35a6d                 | LR__5704
35a6d     72 71 70 69 
35a71     6E          | 	byte	"rqpin"
35a72     00          | 	byte	0
35a73                 | LR__5705
35a73     72 6F 75 6E 
35a77     64          | 	byte	"round"
35a78     00          | 	byte	0
35a79                 | LR__5706
35a79     72 6E 64    | 	byte	"rnd"
35a7c     00          | 	byte	0
35a7d                 | LR__5707
35a7d     73 69 6E    | 	byte	"sin"
35a80     00          | 	byte	0
35a81                 | LR__5708
35a81     73 71 72    | 	byte	"sqr"
35a84     00          | 	byte	0
35a85                 | LR__5709
35a85     73 74 69 63 
35a89     6B          | 	byte	"stick"
35a8a     00          | 	byte	0
35a8b                 | LR__5710
35a8b     73 74 72 69 
35a8f     67          | 	byte	"strig"
35a90     00          | 	byte	0
35a91                 | LR__5711
35a91     73 74 72 24 | 	byte	"str$"
35a95     00          | 	byte	0
35a96                 | LR__5712
35a96     74 61 6E    | 	byte	"tan"
35a99     00          | 	byte	0
35a9a                 | LR__5713
35a9a     76 61 6C    | 	byte	"val"
35a9d     00          | 	byte	0
35a9e                 | LR__5714
35a9e     76 61 72 70 
35aa2     74 72       | 	byte	"varptr"
35aa4     00          | 	byte	0
35aa5                 | LR__5715
35aa5     61          | 	byte	"a"
35aa6     00          | 	byte	0
35aa7                 | LR__5716
35aa7     7A          | 	byte	"z"
35aa8     00          | 	byte	0
35aa9                 | LR__5717
35aa9     5F          | 	byte	"_"
35aaa     00          | 	byte	0
35aab                 | LR__5718
35aab     61          | 	byte	"a"
35aac     00          | 	byte	0
35aad                 | LR__5719
35aad     7A          | 	byte	"z"
35aae     00          | 	byte	0
35aaf                 | LR__5720
35aaf     30          | 	byte	"0"
35ab0     00          | 	byte	0
35ab1                 | LR__5721
35ab1     39          | 	byte	"9"
35ab2     00          | 	byte	0
35ab3                 | LR__5722
35ab3     5F          | 	byte	"_"
35ab4     00          | 	byte	0
35ab5                 | LR__5723
35ab5     2E          | 	byte	"."
35ab6     00          | 	byte	0
35ab7                 | LR__5724
35ab7     61          | 	byte	"a"
35ab8     00          | 	byte	0
35ab9                 | LR__5725
35ab9     7A          | 	byte	"z"
35aba     00          | 	byte	0
35abb                 | LR__5726
35abb     30          | 	byte	"0"
35abc     00          | 	byte	0
35abd                 | LR__5727
35abd     39          | 	byte	"9"
35abe     00          | 	byte	0
35abf                 | LR__5728
35abf     5F          | 	byte	"_"
35ac0     00          | 	byte	0
35ac1                 | LR__5729
35ac1     24          | 	byte	"$"
35ac2     00          | 	byte	0
35ac3                 | LR__5730
35ac3     25          | 	byte	"%"
35ac4     00          | 	byte	0
35ac5                 | LR__5731
35ac5     21          | 	byte	"!"
35ac6     00          | 	byte	0
35ac7                 | LR__5732
35ac7     30          | 	byte	"0"
35ac8     00          | 	byte	0
35ac9                 | LR__5733
35ac9     39          | 	byte	"9"
35aca     00          | 	byte	0
35acb                 | LR__5734
35acb     2E          | 	byte	"."
35acc     00          | 	byte	0
35acd                 | LR__5735
35acd     24          | 	byte	"$"
35ace     00          | 	byte	0
35acf                 | LR__5736
35acf     25          | 	byte	"%"
35ad0     00          | 	byte	0
35ad1                 | LR__5737
35ad1     2D          | 	byte	"-"
35ad2     00          | 	byte	0
35ad3                 | LR__5738
35ad3     2E          | 	byte	"."
35ad4     00          | 	byte	0
35ad5                 | LR__5739
35ad5     24          | 	byte	"$"
35ad6     00          | 	byte	0
35ad7                 | LR__5740
35ad7     25          | 	byte	"%"
35ad8     00          | 	byte	0
35ad9                 | LR__5741
35ad9     30          | 	byte	"0"
35ada     00          | 	byte	0
35adb                 | LR__5742
35adb     39          | 	byte	"9"
35adc     00          | 	byte	0
35add                 | LR__5743
35add     5F          | 	byte	"_"
35ade     00          | 	byte	0
35adf                 | LR__5744
35adf     2E          | 	byte	"."
35ae0     00          | 	byte	0
35ae1                 | LR__5745
35ae1     45          | 	byte	"E"
35ae2     00          | 	byte	0
35ae3                 | LR__5746
35ae3     65          | 	byte	"e"
35ae4     00          | 	byte	0
35ae5                 | LR__5747
35ae5     2D          | 	byte	"-"
35ae6     00          | 	byte	0
35ae7                 | LR__5748
35ae7     61          | 	byte	"a"
35ae8     00          | 	byte	0
35ae9                 | LR__5749
35ae9     66          | 	byte	"f"
35aea     00          | 	byte	0
35aeb                 | LR__5750
35aeb     30          | 	byte	"0"
35aec     00          | 	byte	0
35aed                 | LR__5751
35aed     31          | 	byte	"1"
35aee     00          | 	byte	0
35aef                 | LR__5752
35aef     5F          | 	byte	"_"
35af0     00          | 	byte	0
35af1                 | LR__5753
35af1     2D          | 	byte	"-"
35af2     00          | 	byte	0
35af3                 | LR__5754
35af3     65          | 	byte	"e"
35af4     00          | 	byte	0
35af5                 | LR__5755
35af5     2E          | 	byte	"."
35af6     00          | 	byte	0
35af7                 | LR__5756
35af7     45          | 	byte	"E"
35af8     00          | 	byte	0
35af9                 | LR__5757
35af9     65          | 	byte	"e"
35afa     00          | 	byte	0
35afb                 | LR__5758
35afb     30          | 	byte	"0"
35afc     00          | 	byte	0
35afd                 | LR__5759
35afd     39          | 	byte	"9"
35afe     00          | 	byte	0
35aff                 | LR__5760
35aff     24          | 	byte	"$"
35b00     00          | 	byte	0
35b01                 | LR__5761
35b01     25          | 	byte	"%"
35b02     00          | 	byte	0
35b03                 | LR__5762
35b03     2D          | 	byte	"-"
35b04     00          | 	byte	0
35b05                 | LR__5763
35b05     24          | 	byte	"$"
35b06     00          | 	byte	0
35b07                 | LR__5764
35b07     25          | 	byte	"%"
35b08     00          | 	byte	0
35b09                 | LR__5765
35b09     30          | 	byte	"0"
35b0a     00          | 	byte	0
35b0b                 | LR__5766
35b0b     39          | 	byte	"9"
35b0c     00          | 	byte	0
35b0d                 | LR__5767
35b0d     5F          | 	byte	"_"
35b0e     00          | 	byte	0
35b0f                 | LR__5768
35b0f     30          | 	byte	"0"
35b10     00          | 	byte	0
35b11                 | LR__5769
35b11     39          | 	byte	"9"
35b12     00          | 	byte	0
35b13                 | LR__5770
35b13     61          | 	byte	"a"
35b14     00          | 	byte	0
35b15                 | LR__5771
35b15     66          | 	byte	"f"
35b16     00          | 	byte	0
35b17                 | LR__5772
35b17     5F          | 	byte	"_"
35b18     00          | 	byte	0
35b19                 | LR__5773
35b19     30          | 	byte	"0"
35b1a     00          | 	byte	0
35b1b                 | LR__5774
35b1b     31          | 	byte	"1"
35b1c     00          | 	byte	0
35b1d                 | LR__5775
35b1d     5F          | 	byte	"_"
35b1e     00          | 	byte	0
35b1f                 | LR__5776
35b1f     30          | 	byte	"0"
35b20     00          | 	byte	0
35b21                 | LR__5777
35b21     39          | 	byte	"9"
35b22     00          | 	byte	0
35b23                 | LR__5778
35b23     5F          | 	byte	"_"
35b24     00          | 	byte	0
35b25                 | LR__5779
35b25     22          | 	byte	34
35b26     00          | 	byte	0
35b27                 | LR__5780
35b27     22          | 	byte	34
35b28     00          | 	byte	0
35b29                 | LR__5781
35b29     44 69 6D 3A 
35b2d     20 61 74 20 
35b31     6C 69 6E 65 
35b35     20          | 	byte	"Dim: at line "
35b36     00          | 	byte	0
35b37                 | LR__5782
35b37     3A 20 77 61 
35b3b     72 6E 69 6E 
35b3f     67 3A 20 74 
35b43     68 65 20 76 
35b47     61 72 69 61 
35b4b     62 6C 65 20 
35b4f     65 78 69 73 
35b53     74 65 64 2E | 	byte	": warning: the variable existed."
35b57     00          | 	byte	0
35b58                 | LR__5783
35b58     28          | 	byte	"("
35b59     00          | 	byte	0
35b5a                 | LR__5784
35b5a     61 73       | 	byte	"as"
35b5c     00          | 	byte	0
35b5d                 | LR__5785
35b5d     61 73       | 	byte	"as"
35b5f     00          | 	byte	0
35b60                 | LR__5786
35b60     2C          | 	byte	","
35b61     00          | 	byte	0
35b62                 | LR__5787
35b62     29          | 	byte	")"
35b63     00          | 	byte	0
35b64                 | LR__5788
35b64     29          | 	byte	")"
35b65     00          | 	byte	0
35b66                 | LR__5789
35b66     61 73       | 	byte	"as"
35b68     00          | 	byte	0
35b69                 | LR__5790
35b69     62 79 74 65 | 	byte	"byte"
35b6d     00          | 	byte	0
35b6e                 | LR__5791
35b6e     75 62 79 74 
35b72     65          | 	byte	"ubyte"
35b73     00          | 	byte	0
35b74                 | LR__5792
35b74     73 68 6F 72 
35b78     74          | 	byte	"short"
35b79     00          | 	byte	0
35b7a                 | LR__5793
35b7a     75 73 68 6F 
35b7e     72 74       | 	byte	"ushort"
35b80     00          | 	byte	0
35b81                 | LR__5794
35b81     6C 6F 6E 67 | 	byte	"long"
35b85     00          | 	byte	0
35b86                 | LR__5795
35b86     69 6E 74 65 
35b8a     67 65 72    | 	byte	"integer"
35b8d     00          | 	byte	0
35b8e                 | LR__5796
35b8e     75 6C 6F 6E 
35b92     67          | 	byte	"ulong"
35b93     00          | 	byte	0
35b94                 | LR__5797
35b94     69 6E 74 36 
35b98     34          | 	byte	"int64"
35b99     00          | 	byte	0
35b9a                 | LR__5798
35b9a     75 69 6E 74 
35b9e     36 34       | 	byte	"uint64"
35ba0     00          | 	byte	0
35ba1                 | LR__5799
35ba1     73 69 6E 67 
35ba5     6C 65       | 	byte	"single"
35ba7     00          | 	byte	0
35ba8                 | LR__5800
35ba8     64 6F 75 62 
35bac     6C 65       | 	byte	"double"
35bae     00          | 	byte	0
35baf                 | LR__5801
35baf     73 74 72 69 
35bb3     6E 67       | 	byte	"string"
35bb5     00          | 	byte	0
35bb6                 | LR__5802
35bb6     74 6F       | 	byte	"to"
35bb8     00          | 	byte	0
35bb9                 | LR__5803
35bb9     73 74 65 70 | 	byte	"step"
35bbd     00          | 	byte	0
35bbe                 | LR__5804
35bbe     73 2E       | 	byte	"s."
35bc0     00          | 	byte	0
35bc1                 | LR__5805
35bc1     67 6F 74 6F | 	byte	"goto"
35bc5     00          | 	byte	0
35bc6                 | LR__5806
35bc6     67 6F 73 75 
35bca     62          | 	byte	"gosub"
35bcb     00          | 	byte	0
35bcc                 | LR__5807
35bcc     24          | 	byte	"$"
35bcd     00          | 	byte	0
35bce                 | LR__5808
35bce     26 68       | 	byte	"&h"
35bd0     00          | 	byte	0
35bd1                 | LR__5809
35bd1     25          | 	byte	"%"
35bd2     00          | 	byte	0
35bd3                 | LR__5810
35bd3     26 62       | 	byte	"&b"
35bd5     00          | 	byte	0
35bd6                 | LR__5811
35bd6                 | 	byte	
35bd6     00          | 	byte	0
35bd7                 | LR__5812
35bd7     61 63 6F 73 
35bdb     3A 20       | 	byte	"acos: "
35bdd     00          | 	byte	0
35bde                 | LR__5813
35bde     61 73 63 3A 
35be2     20          | 	byte	"asc: "
35be3     00          | 	byte	0
35be4                 | LR__5814
35be4     61 73 63 3A 
35be8     20          | 	byte	"asc: "
35be9     00          | 	byte	0
35bea                 | LR__5815
35bea     61 73 69 6E 
35bee     3A 20       | 	byte	"asin: "
35bf0     00          | 	byte	0
35bf1                 | LR__5816
35bf1     61 74 6E 3A 
35bf5     20          | 	byte	"atn: "
35bf6     00          | 	byte	0
35bf7                 | LR__5817
35bf7     62 6C 69 74 
35bfb     3A 20       | 	byte	"blit: "
35bfd     00          | 	byte	0
35bfe                 | LR__5818
35bfe     62 69 6E 24 
35c02     3A 20       | 	byte	"bin$: "
35c04     00          | 	byte	0
35c05                 | LR__5819
35c05     2F          | 	byte	"/"
35c06     00          | 	byte	0
35c07                 | LR__5820
35c07     2F 73 64 2F 
35c0b     62 69 6E 2F | 	byte	"/sd/bin/"
35c0f     00          | 	byte	0
35c10                 | LR__5821
35c10     53 79 73 74 
35c14     65 6D 20 65 
35c18     72 72 6F 72 
35c1c     20          | 	byte	"System error "
35c1d     00          | 	byte	0
35c1e                 | LR__5822
35c1e     3A 20       | 	byte	": "
35c20     00          | 	byte	0
35c21                 | LR__5823
35c21     2A          | 	byte	"*"
35c22     00          | 	byte	0
35c23                 | LR__5824
35c23     2E 2E       | 	byte	".."
35c25     00          | 	byte	0
35c26                 | LR__5825
35c26     2F          | 	byte	"/"
35c27     00          | 	byte	0
35c28                 | LR__5826
35c28     2F          | 	byte	"/"
35c29     00          | 	byte	0
35c2a                 | LR__5827
35c2a     53 79 73 74 
35c2e     65 6D 20 65 
35c32     72 72 6F 72 
35c36     20          | 	byte	"System error "
35c37     00          | 	byte	0
35c38                 | LR__5828
35c38     3A 20       | 	byte	": "
35c3a     00          | 	byte	0
35c3b                 | LR__5829
35c3b     43 75 72 72 
35c3f     65 6E 74 20 
35c43     64 69 72 65 
35c47     63 74 6F 72 
35c4b     79 3A 20    | 	byte	"Current directory: "
35c4e     00          | 	byte	0
35c4f                 | LR__5830
35c4f     2F          | 	byte	"/"
35c50     00          | 	byte	0
35c51                 | LR__5831
35c51     53 79 73 74 
35c55     65 6D 20 65 
35c59     72 72 6F 72 
35c5d     20          | 	byte	"System error "
35c5e     00          | 	byte	0
35c5f                 | LR__5832
35c5f     3A 20       | 	byte	": "
35c61     00          | 	byte	0
35c62                 | LR__5833
35c62     43 75 72 72 
35c66     65 6E 74 20 
35c6a     64 69 72 65 
35c6e     63 74 6F 72 
35c72     79 3A 20    | 	byte	"Current directory: "
35c75     00          | 	byte	0
35c76                 | LR__5834
35c76     2F          | 	byte	"/"
35c77     00          | 	byte	0
35c78                 | LR__5835
35c78     2F          | 	byte	"/"
35c79     00          | 	byte	0
35c7a                 | LR__5836
35c7a     2F          | 	byte	"/"
35c7b     00          | 	byte	0
35c7c                 | LR__5837
35c7c     53 79 73 74 
35c80     65 6D 20 65 
35c84     72 72 6F 72 
35c88     20          | 	byte	"System error "
35c89     00          | 	byte	0
35c8a                 | LR__5838
35c8a     3A 20       | 	byte	": "
35c8c     00          | 	byte	0
35c8d                 | LR__5839
35c8d     43 75 72 72 
35c91     65 6E 74 20 
35c95     64 69 72 65 
35c99     63 74 6F 72 
35c9d     79 3A 20    | 	byte	"Current directory: "
35ca0     00          | 	byte	0
35ca1                 | LR__5840
35ca1     63 68 72 24 
35ca5     3A 20       | 	byte	"chr$: "
35ca7     00          | 	byte	0
35ca8                 | LR__5841
35ca8     63 68 61 6E 
35cac     6E 65 6C 23 
35cb0     20 65 78 70 
35cb4     65 63 74 65 
35cb8     64          | 	byte	"channel# expected"
35cb9     00          | 	byte	0
35cba                 | LR__5842
35cba     63 6F 73 3A 
35cbe     20          | 	byte	"cos: "
35cbf     00          | 	byte	0
35cc0                 | LR__5843
35cc0                 | 	byte	
35cc0     00          | 	byte	0
35cc1                 | LR__5844
35cc1                 | 	byte	
35cc1     00          | 	byte	0
35cc2                 | LR__5845
35cc2     2F 73 64 2F 
35cc6     6D 65 64 69 
35cca     61 2F 68 2F | 	byte	"/sd/media/h/"
35cce     00          | 	byte	0
35ccf                 | LR__5846
35ccf     53 79 73 74 
35cd3     65 6D 20 65 
35cd7     72 72 6F 72 
35cdb     20          | 	byte	"System error "
35cdc     00          | 	byte	0
35cdd                 | LR__5847
35cdd     3A 20       | 	byte	": "
35cdf     00          | 	byte	0
35ce0                 | LR__5848
35ce0                 | 	byte	
35ce0     00          | 	byte	0
35ce1                 | LR__5849
35ce1                 | 	byte	
35ce1     00          | 	byte	0
35ce2                 | LR__5850
35ce2     2F 73 64 2F 
35ce6     6D 65 64 69 
35cea     61 2F 73 2F | 	byte	"/sd/media/s/"
35cee     00          | 	byte	0
35cef                 | LR__5851
35cef     53 79 73 74 
35cf3     65 6D 20 65 
35cf7     72 72 6F 72 
35cfb     20          | 	byte	"System error "
35cfc     00          | 	byte	0
35cfd                 | LR__5852
35cfd     3A 20       | 	byte	": "
35cff     00          | 	byte	0
35d00                 | LR__5853
35d00     2F          | 	byte	"/"
35d01     00          | 	byte	0
35d02                 | LR__5854
35d02     2F          | 	byte	"/"
35d03     00          | 	byte	0
35d04                 | LR__5855
35d04     2F          | 	byte	"/"
35d05     00          | 	byte	0
35d06                 | LR__5856
35d06     43 61 6E 6E 
35d0a     6F 74 20 64 
35d0e     65 6C 65 74 
35d12     65 20 66 69 
35d16     6C 65 20 6F 
35d1a     72 20 66 69 
35d1e     6C 65 20 64 
35d22     6F 65 73 6E 
35d26     27 74 20 65 
35d2a     78 69 73 74 
35d2e     3A 20 73 79 
35d32     73 74 65 6D 
35d36     20 65 72 72 
35d3a     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
35d3d     00          | 	byte	0
35d3e                 | LR__5857
35d3e     43 75 72 72 
35d42     65 6E 74 20 
35d46     64 69 72 65 
35d4a     63 74 6F 72 
35d4e     79 3A 20    | 	byte	"Current directory: "
35d51     00          | 	byte	0
35d52                 | LR__5858
35d52                 | 	byte	
35d52     00          | 	byte	0
35d53                 | LR__5859
35d53     2A          | 	byte	"*"
35d54     00          | 	byte	0
35d55                 | LR__5860
35d55                 | 	byte	
35d55     00          | 	byte	0
35d56                 | LR__5861
35d56     5B 64 69 72 
35d5a     5D 20       | 	byte	"[dir] "
35d5c     00          | 	byte	0
35d5d                 | LR__5862
35d5d     4D 6F 72 65 
35d61     20 74 68 61 
35d65     6E 20 31 32 
35d69     38 20 65 6E 
35d6d     74 72 69 65 
35d71     73 20 66 6F 
35d75     75 6E 64 3A 
35d79     20 63 6C 65 
35d7d     61 6E 20 79 
35d81     6F 75 72 20 
35d85     64 69 72 65 
35d89     63 74 6F 72 
35d8d     79          | 	byte	"More than 128 entries found: clean your directory"
35d8e     00          | 	byte	0
35d8f                 | LR__5863
35d8f     2A          | 	byte	"*"
35d90     00          | 	byte	0
35d91                 | LR__5864
35d91                 | 	byte	
35d91     00          | 	byte	0
35d92                 | LR__5865
35d92     4D 6F 72 65 
35d96     20 74 68 61 
35d9a     6E 20 31 32 
35d9e     38 20 65 6E 
35da2     74 72 69 65 
35da6     73 20 66 6F 
35daa     75 6E 64 3A 
35dae     20 63 6C 65 
35db2     61 6E 20 79 
35db6     6F 75 72 20 
35dba     64 69 72 65 
35dbe     63 74 6F 72 
35dc2     79          | 	byte	"More than 128 entries found: clean your directory"
35dc3     00          | 	byte	0
35dc4                 | LR__5866
35dc4     45 72 72 6F 
35dc8     72 20       | 	byte	"Error "
35dca     00          | 	byte	0
35dcb                 | LR__5867
35dcb     3A 20       | 	byte	": "
35dcd     00          | 	byte	0
35dce                 | LR__5868
35dce     67 65 74 65 
35dd2     6E 76 73 75 
35dd6     73 74 61 69 
35dda     6E 3A 20    | 	byte	"getenvsustain: "
35ddd     00          | 	byte	0
35dde                 | LR__5869
35dde     67 65 74 70 
35de2     69 78 65 6C 
35de6     3A 20       | 	byte	"getpixel: "
35de8     00          | 	byte	0
35de9                 | LR__5870
35de9     68 65 78 24 
35ded     3A 20       | 	byte	"hex$: "
35def     00          | 	byte	0
35df0                 | LR__5871
35df0                 | 	byte	
35df0     00          | 	byte	0
35df1                 | LR__5872
35df1     49 6E 20 69 
35df5     6E 70 75 74 
35df9     3A 20       | 	byte	"In input: "
35dfb     00          | 	byte	0
35dfc                 | LR__5873
35dfc     2C          | 	byte	","
35dfd     00          | 	byte	0
35dfe                 | LR__5874
35dfe                 | 	byte	
35dfe     00          | 	byte	0
35dff                 | LR__5875
35dff                 | 	byte	
35dff     00          | 	byte	0
35e00                 | LR__5876
35e00     6C 65 66 74 
35e04     24 3A 20    | 	byte	"left$: "
35e07     00          | 	byte	0
35e08                 | LR__5877
35e08     6C 65 66 74 
35e0c     24 3A 20    | 	byte	"left$: "
35e0f     00          | 	byte	0
35e10                 | LR__5878
35e10     6C 65 6E 3A 
35e14     20          | 	byte	"len: "
35e15     00          | 	byte	0
35e16                 | LR__5879
35e16     6C 65 6E 3A 
35e1a     20          | 	byte	"len: "
35e1b     00          | 	byte	0
35e1c                 | LR__5880
35e1c                 | 	byte	
35e1c     00          | 	byte	0
35e1d                 | LR__5881
35e1d     2F          | 	byte	"/"
35e1e     00          | 	byte	0
35e1f                 | LR__5882
35e1f     2F          | 	byte	"/"
35e20     00          | 	byte	0
35e21                 | LR__5883
35e21     2E 62 61 73 | 	byte	".bas"
35e25     00          | 	byte	0
35e26                 | LR__5884
35e26     53 79 73 74 
35e2a     65 6D 20 65 
35e2e     72 72 6F 72 
35e32     20          | 	byte	"System error "
35e33     00          | 	byte	0
35e34                 | LR__5885
35e34     3A 20       | 	byte	": "
35e36     00          | 	byte	0
35e37                 | LR__5886
35e37     2E 62 61 73 | 	byte	".bas"
35e3b     00          | 	byte	0
35e3c                 | LR__5887
35e3c     2F          | 	byte	"/"
35e3d     00          | 	byte	0
35e3e                 | LR__5888
35e3e                 | 	byte	
35e3e     00          | 	byte	0
35e3f                 | LR__5889
35e3f     4C 6F 61 64 
35e43     65 64 20    | 	byte	"Loaded "
35e46     00          | 	byte	0
35e47                 | LR__5890
35e47     2F          | 	byte	"/"
35e48     00          | 	byte	0
35e49                 | LR__5891
35e49     6C 6F 67 3A 
35e4d     20          | 	byte	"log: "
35e4e     00          | 	byte	0
35e4f                 | LR__5892
35e4f     6D 69 64 24 
35e53     3A 20       | 	byte	"mid$: "
35e55     00          | 	byte	0
35e56                 | LR__5893
35e56     6D 69 64 24 
35e5a     3A 20       | 	byte	"mid$: "
35e5c     00          | 	byte	0
35e5d                 | LR__5894
35e5d     43 61 6E 6E 
35e61     6F 74 20 63 
35e65     72 65 61 74 
35e69     65 20 61 20 
35e6d     64 69 72 65 
35e71     63 74 6F 72 
35e75     79 3A 20 73 
35e79     79 73 74 65 
35e7d     6D 20 65 72 
35e81     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
35e85     00          | 	byte	0
35e86                 | LR__5895
35e86     20 42 41 53 
35e8a     49 43 20 62 
35e8e     79 74 65 73 
35e92     20 66 72 65 
35e96     65          | 	byte	" BASIC bytes free"
35e97     00          | 	byte	0
35e98                 | LR__5896
35e98                 | 	byte	
35e98     00          | 	byte	0
35e99                 | LR__5897
35e99                 | 	byte	
35e99     00          | 	byte	0
35e9a                 | LR__5898
35e9a                 | 	byte	
35e9a     00          | 	byte	0
35e9b                 | LR__5899
35e9b     6E 6F 6E 61 
35e9f     6D 65 2E 62 
35ea3     61 73       | 	byte	"noname.bas"
35ea5     00          | 	byte	0
35ea6                 | LR__5900
35ea6     66 69 6C 65 
35eaa     6E 61 6D 65 
35eae     20 65 78 70 
35eb2     65 63 74 65 
35eb6     64          | 	byte	"filename expected"
35eb7     00          | 	byte	0
35eb8                 | LR__5901
35eb8     72 65 61 64 | 	byte	"read"
35ebc     00          | 	byte	0
35ebd                 | LR__5902
35ebd     77 72 69 74 
35ec1     65          | 	byte	"write"
35ec2     00          | 	byte	0
35ec3                 | LR__5903
35ec3     61 70 70 65 
35ec7     6E 64       | 	byte	"append"
35ec9     00          | 	byte	0
35eca                 | LR__5904
35eca     63 68 61 6E 
35ece     6E 65 6C 23 
35ed2     20 65 78 70 
35ed6     65 63 74 65 
35eda     64          | 	byte	"channel# expected"
35edb     00          | 	byte	0
35edc                 | LR__5905
35edc     4F 70 65 6E 
35ee0     3A 20 69 6E 
35ee4     76 61 6C 69 
35ee8     64 20 6D 6F 
35eec     64 65       | 	byte	"Open: invalid mode"
35eee     00          | 	byte	0
35eef                 | LR__5906
35eef     70 61 64 68 
35ef3     3A 20       | 	byte	"padh: "
35ef5     00          | 	byte	0
35ef6                 | LR__5907
35ef6     70 61 64 78 
35efa     3A 20       | 	byte	"padx: "
35efc     00          | 	byte	0
35efd                 | LR__5908
35efd     70 61 64 79 
35f01     3A 20       | 	byte	"pady: "
35f03     00          | 	byte	0
35f04                 | LR__5909
35f04     70 61 64 7A 
35f08     3A 20       | 	byte	"padz: "
35f0a     00          | 	byte	0
35f0b                 | LR__5910
35f0b     50 72 69 6E 
35f0f     74 20 74 6F 
35f13     20 63 68 61 
35f17     6E 6E 65 6C 
35f1b     20 28 6E 6F 
35f1f     74 20 79 65 
35f23     74 20 69 6D 
35f27     70 6C 65 6D 
35f2b     65 6E 74 65 
35f2f     64 29       | 	byte	"Print to channel (not yet implemented)"
35f31     00          | 	byte	0
35f32                 | LR__5911
35f32                 | 	byte	
35f32     00          | 	byte	0
35f33                 | LR__5912
35f33     64 61 74 61 | 	byte	"data"
35f37     00          | 	byte	0
35f38                 | LR__5913
35f38                 | 	byte	
35f38     00          | 	byte	0
35f39                 | LR__5914
35f39     49 6E 20 72 
35f3d     65 61 64 3A 
35f41     20          | 	byte	"In read: "
35f42     00          | 	byte	0
35f43                 | LR__5915
35f43                 | 	byte	
35f43     00          | 	byte	0
35f44                 | LR__5916
35f44                 | 	byte	
35f44     00          | 	byte	0
35f45                 | LR__5917
35f45     2C          | 	byte	","
35f46     00          | 	byte	0
35f47                 | LR__5918
35f47                 | 	byte	
35f47     00          | 	byte	0
35f48                 | LR__5919
35f48                 | 	byte	
35f48     00          | 	byte	0
35f49                 | LR__5920
35f49                 | 	byte	
35f49     00          | 	byte	0
35f4a                 | LR__5921
35f4a                 | 	byte	
35f4a     00          | 	byte	0
35f4b                 | LR__5922
35f4b                 | 	byte	
35f4b     00          | 	byte	0
35f4c                 | LR__5923
35f4c     72 69 67 68 
35f50     74 24 3A 20 | 	byte	"right$: "
35f54     00          | 	byte	0
35f55                 | LR__5924
35f55     72 69 67 68 
35f59     74 24 3A 20 | 	byte	"right$: "
35f5d     00          | 	byte	0
35f5e                 | LR__5925
35f5e     72 6E 64 3A 
35f62     20          | 	byte	"rnd: "
35f63     00          | 	byte	0
35f64                 | LR__5926
35f64     72 6E 64 3A 
35f68     20          | 	byte	"rnd: "
35f69     00          | 	byte	0
35f6a                 | LR__5927
35f6a                 | 	byte	
35f6a     00          | 	byte	0
35f6b                 | LR__5928
35f6b     53 74 6F 70 
35f6f     70 65 64 20 
35f73     61 74 20 6C 
35f77     69 6E 65 20 | 	byte	"Stopped at line "
35f7b     00          | 	byte	0
35f7c                 | LR__5929
35f7c                 | 	byte	
35f7c     00          | 	byte	0
35f7d                 | LR__5930
35f7d     2F          | 	byte	"/"
35f7e     00          | 	byte	0
35f7f                 | LR__5931
35f7f                 | 	byte	
35f7f     00          | 	byte	0
35f80                 | LR__5932
35f80     53 61 76 65 
35f84     64 20 61 73 
35f88     20          | 	byte	"Saved as "
35f89     00          | 	byte	0
35f8a                 | LR__5933
35f8a     2F          | 	byte	"/"
35f8b     00          | 	byte	0
35f8c                 | LR__5934
35f8c     73 69 6E 3A 
35f90     20          | 	byte	"sin: "
35f91     00          | 	byte	0
35f92                 | LR__5935
35f92     73 71 72 3A 
35f96     20          | 	byte	"sqr: "
35f97     00          | 	byte	0
35f98                 | LR__5936
35f98     73 74 69 63 
35f9c     6B 3A 20    | 	byte	"stick: "
35f9f     00          | 	byte	0
35fa0                 | LR__5937
35fa0     73 74 72 69 
35fa4     67 3A 20    | 	byte	"strig: "
35fa7     00          | 	byte	0
35fa8                 | LR__5938
35fa8     74 61 6E 3A 
35fac     20          | 	byte	"tan: "
35fad     00          | 	byte	0
35fae                 | LR__5939
35fae     76 61 6C 3A 
35fb2     20          | 	byte	"val: "
35fb3     00          | 	byte	0
35fb4                 | LR__5940
35fb4     76 61 6C 3A 
35fb8     20          | 	byte	"val: "
35fb9     00          | 	byte	0
35fba                 | LR__5941
35fba     24          | 	byte	"$"
35fbb     00          | 	byte	0
35fbc                 | LR__5942
35fbc     26 68       | 	byte	"&h"
35fbe     00          | 	byte	0
35fbf                 | LR__5943
35fbf     25          | 	byte	"%"
35fc0     00          | 	byte	0
35fc1                 | LR__5944
35fc1     26 62       | 	byte	"&b"
35fc3     00          | 	byte	0
35fc4                 | LR__5945
35fc4                 | 	byte	
35fc4     00          | 	byte	0
35fc5                 | LR__5946
35fc5     45 78 70 65 
35fc9     63 74 65 64 
35fcd     20 6E 75 6D 
35fd1     62 65 72 2C 
35fd5     20 67 6F 74 
35fd9     20 73 6F 6D 
35fdd     65 74 68 69 
35fe1     6E 67 20 65 
35fe5     6C 73 65    | 	byte	"Expected number, got something else"
35fe8     00          | 	byte	0
35fe9                 | LR__5947
35fe9     43 61 6E 6E 
35fed     6F 74 20 61 
35ff1     64 64 20 61 
35ff5     20 6E 75 6D 
35ff9     62 65 72 20 
35ffd     74 6F 20 61 
36001     20 73 74 72 
36005     69 6E 67    | 	byte	"Cannot add a number to a string"
36008     00          | 	byte	0
36009                 | LR__5948
36009     43 61 6E 6E 
3600d     6F 74 20 73 
36011     75 62 73 74 
36015     72 61 63 74 
36019     20 73 74 72 
3601d     69 6E 67 73 | 	byte	"Cannot substract strings"
36021     00          | 	byte	0
36022                 | LR__5949
36022     55 6E 6B 6E 
36026     6F 77 6E 20 
3602a     65 72 72 6F 
3602e     72 20 77 68 
36032     69 6C 65 20 
36036     61 64 64 69 
3603a     6E 67       | 	byte	"Unknown error while adding"
3603c     00          | 	byte	0
3603d                 | LR__5950
3603d     55 6E 6B 6E 
36041     6F 77 6E 20 
36045     65 72 72 6F 
36049     72 20 77 68 
3604d     69 6C 65 20 
36051     73 75 62 73 
36055     74 72 61 63 
36059     74 69 6E 67 | 	byte	"Unknown error while substracting"
3605d     00          | 	byte	0
3605e                 | LR__5951
3605e     43 61 6E 6E 
36062     6F 74 20 64 
36066     6F 20 6C 6F 
3606a     67 69 63 20 
3606e     6F 70 65 72 
36072     61 74 69 6F 
36076     6E 20 6F 6E 
3607a     20 73 74 72 
3607e     69 6E 67 20 
36082     6F 72 20 66 
36086     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
3608a     00          | 	byte	0
3608b                 | LR__5952
3608b     55 6E 6B 6E 
3608f     6F 77 6E 20 
36093     65 72 72 6F 
36097     72 20 77 68 
3609b     69 6C 65 20 
3609f     64 6F 69 6E 
360a3     67 20 6C 6F 
360a7     67 69 63 20 
360ab     6F 70 65 72 
360af     61 74 69 6F 
360b3     6E          | 	byte	"Unknown error while doing logic operation"
360b4     00          | 	byte	0
360b5                 | LR__5953
360b5     43 61 6E 6E 
360b9     6F 74 20 6D 
360bd     75 6C 74 69 
360c1     70 6C 79 20 
360c5     73 74 72 69 
360c9     6E 67 73    | 	byte	"Cannot multiply strings"
360cc     00          | 	byte	0
360cd                 | LR__5954
360cd     55 6E 6B 6E 
360d1     6F 77 6E 20 
360d5     65 72 72 6F 
360d9     72 20 77 68 
360dd     69 6C 65 20 
360e1     6D 75 6C 74 
360e5     69 70 6C 79 
360e9     69 6E 67    | 	byte	"Unknown error while multiplying"
360ec     00          | 	byte	0
360ed                 | LR__5955
360ed     43 61 6E 6E 
360f1     6F 74 20 64 
360f5     69 76 69 64 
360f9     65 20 73 74 
360fd     72 69 6E 67 
36101     73          | 	byte	"Cannot divide strings"
36102     00          | 	byte	0
36103                 | LR__5956
36103     55 6E 6B 6E 
36107     6F 77 6E 20 
3610b     65 72 72 6F 
3610f     72 20 77 68 
36113     69 6C 65 20 
36117     64 69 76 69 
3611b     64 69 6E 67 | 	byte	"Unknown error while dividing"
3611f     00          | 	byte	0
36120                 | LR__5957
36120     43 61 6E 6E 
36124     6F 74 20 63 
36128     6F 6D 70 75 
3612c     74 65 20 61 
36130     20 70 6F 77 
36134     65 72 20 6F 
36138     66 20 61 20 
3613c     73 74 72 69 
36140     6E 67       | 	byte	"Cannot compute a power of a string"
36142     00          | 	byte	0
36143                 | LR__5958
36143     55 6E 6B 6E 
36147     6F 77 6E 20 
3614b     65 72 72 6F 
3614f     72 20 77 68 
36153     69 6C 65 20 
36157     63 6F 6D 70 
3615b     75 74 69 6E 
3615f     67 20 61 20 
36163     70 6F 77 65 
36167     72          | 	byte	"Unknown error while computing a power"
36168     00          | 	byte	0
36169                 | LR__5959
36169     52 69 67 68 
3616d     74 20 70 61 
36171     72 65 6E 74 
36175     68 65 73 69 
36179     73 20 65 78 
3617d     70 65 63 74 
36181     65 64       | 	byte	"Right parenthesis expected"
36183     00          | 	byte	0
36184                 | LR__5960
36184     45 78 70 65 
36188     63 74 65 64 
3618c     20 73 74 72 
36190     69 6E 67    | 	byte	"Expected string"
36193     00          | 	byte	0
36194                 | LR__5961
36194     45 78 70 65 
36198     63 74 65 64 
3619c     20 66 6C 6F 
361a0     61 74       | 	byte	"Expected float"
361a2     00          | 	byte	0
361a3                 | LR__5962
361a3     45 78 70 65 
361a7     63 74 65 64 
361ab     20 75 6E 73 
361af     69 67 6E 65 
361b3     64 20 69 6E 
361b7     74 65 67 65 
361bb     72          | 	byte	"Expected unsigned integer"
361bc     00          | 	byte	0
361bd                 | LR__5963
361bd     45 78 70 65 
361c1     63 74 65 64 
361c5     20 69 6E 74 
361c9     65 67 65 72 | 	byte	"Expected integer"
361cd     00          | 	byte	0
361ce                 | LR__5964
361ce     4E 6F 20 6D 
361d2     6F 72 65 20 
361d6     76 61 72 69 
361da     61 62 6C 65 
361de     20 73 6C 6F 
361e2     74 73       | 	byte	"No more variable slots"
361e4     00          | 	byte	0
361e5                 | LR__5965
361e5     56 61 72 69 
361e9     61 62 6C 65 
361ed     20 6E 6F 74 
361f1     20 66 6F 75 
361f5     6E 64       | 	byte	"Variable not found"
361f7     00          | 	byte	0
361f8                 | LR__5966
361f8     43 6F 6D 6D 
361fc     61 20 65 78 
36200     70 65 63 74 
36204     65 64       | 	byte	"Comma expected"
36206     00          | 	byte	0
36207                 | LR__5967
36207     43 6F 6D 6D 
3620b     61 20 6F 72 
3620f     20 73 65 6D 
36213     69 63 6F 6C 
36217     6F 6E 20 65 
3621b     78 70 65 63 
3621f     74 65 64    | 	byte	"Comma or semicolon expected"
36222     00          | 	byte	0
36223                 | LR__5968
36223     55 6E 6B 6E 
36227     6F 77 6E 20 
3622b     63 6F 6D 6D 
3622f     61 6E 64    | 	byte	"Unknown command"
36232     00          | 	byte	0
36233                 | LR__5969
36233     53 74 61 63 
36237     6B 20 75 6E 
3623b     64 65 72 66 
3623f     6C 6F 77    | 	byte	"Stack underflow"
36242     00          | 	byte	0
36243                 | LR__5970
36243     43 61 6E 6E 
36247     6F 74 20 65 
3624b     78 65 63 75 
3624f     74 65 20 67 
36253     6F 74 6F 20 
36257     6F 72 20 67 
3625b     6F 73 75 62 
3625f     20 69 6E 20 
36263     74 68 65 20 
36267     69 6D 6D 65 
3626b     64 69 61 74 
3626f     65 20 6D 6F 
36273     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
36275     00          | 	byte	0
36276                 | LR__5971
36276     43 61 6E 6E 
3627a     6F 74 20 6C 
3627e     6F 61 64 20 
36282     66 72 6F 6D 
36286     20 74 68 69 
3628a     73 20 66 69 
3628e     6C 65       | 	byte	"Cannot load from this file"
36290     00          | 	byte	0
36291                 | LR__5972
36291     54 68 65 20 
36295     70 72 6F 67 
36299     72 61 6D 20 
3629d     69 73 20 65 
362a1     6D 70 74 79 | 	byte	"The program is empty"
362a5     00          | 	byte	0
362a6                 | LR__5973
362a6     49 66 20 61 
362aa     66 74 65 72 
362ae     20 69 66    | 	byte	"If after if"
362b1     00          | 	byte	0
362b2                 | LR__5974
362b2     45 6D 70 74 
362b6     79 20 65 78 
362ba     70 72 65 73 
362be     73 69 6F 6E | 	byte	"Empty expression"
362c2     00          | 	byte	0
362c3                 | LR__5975
362c3     53 74 72 69 
362c7     6E 67 20 65 
362cb     78 70 65 63 
362cf     74 65 64    | 	byte	"String expected"
362d2     00          | 	byte	0
362d3                 | LR__5976
362d3     49 6E 74 65 
362d7     72 70 72 65 
362db     74 65 72 20 
362df     69 6E 74 65 
362e3     72 6E 61 6C 
362e7     20 65 72 72 
362eb     6F 72       | 	byte	"Interpreter internal error"
362ed     00          | 	byte	0
362ee                 | LR__5977
362ee     45 78 70 65 
362f2     63 74 65 64 
362f6     20 61 73 73 
362fa     69 67 6E    | 	byte	"Expected assign"
362fd     00          | 	byte	0
362fe                 | LR__5978
362fe     45 78 70 65 
36302     63 74 65 64 
36306     20 27 74 6F 
3630a     27          | 	byte	"Expected 'to'"
3630b     00          | 	byte	0
3630c                 | LR__5979
3630c     45 78 70 65 
36310     63 74 65 64 
36314     20 69 6E 74 
36318     65 67 65 72 
3631c     20 76 61 72 
36320     69 61 62 6C 
36324     65          | 	byte	"Expected integer variable"
36325     00          | 	byte	0
36326                 | LR__5980
36326     55 6E 69 6E 
3632a     69 74 69 61 
3632e     6C 69 7A 65 
36332     64 20 76 61 
36336     72 69 61 62 
3633a     6C 65 20 69 
3633e     6E 20 27 6E 
36342     65 78 74 27 
36346     2C 20 75 73 
3634a     65 20 27 66 
3634e     6F 72 27 20 
36352     62 65 66 6F 
36356     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
36358     00          | 	byte	0
36359                 | LR__5981
36359     4E 6F 20 6D 
3635d     6F 72 65 20 
36361     73 6C 6F 74 
36365     73 20 66 6F 
36369     72 20 27 66 
3636d     6F 72 27    | 	byte	"No more slots for 'for'"
36370     00          | 	byte	0
36371                 | LR__5982
36371     27 4E 65 78 
36375     74 27 20 64 
36379     6F 65 73 6E 
3637d     27 74 20 6D 
36381     61 74 63 68 
36385     20 27 66 6F 
36389     72 27       | 	byte	"'Next' doesn't match 'for'"
3638b     00          | 	byte	0
3638c                 | LR__5983
3638c     27 47 6F 74 
36390     6F 27 20 74 
36394     61 72 67 65 
36398     74 20 6C 69 
3639c     6E 65 20 6E 
363a0     6F 74 20 66 
363a4     6F 75 6E 64 | 	byte	"'Goto' target line not found"
363a8     00          | 	byte	0
363a9                 | LR__5984
363a9     42 61 64 20 
363ad     6E 75 6D 62 
363b1     65 72 20 6F 
363b5     66 20 70 61 
363b9     72 61 6D 65 
363bd     74 65 72 73 | 	byte	"Bad number of parameters"
363c1     00          | 	byte	0
363c2                 | LR__5985
363c2     46 75 6E 63 
363c6     74 69 6F 6E 
363ca     20 75 6E 64 
363ce     65 66 69 6E 
363d2     65 64 20 66 
363d6     6F 72 20 73 
363da     74 72 69 6E 
363de     67 73       | 	byte	"Function undefined for strings"
363e0     00          | 	byte	0
363e1                 | LR__5986
363e1     42 61 64 20 
363e5     70 61 72 61 
363e9     6D 65 74 65 
363ed     72          | 	byte	"Bad parameter"
363ee     00          | 	byte	0
363ef                 | LR__5987
363ef     43 61 6E 6E 
363f3     6F 74 20 64 
363f7     65 63 6C 61 
363fb     72 65 20 61 
363ff     6E 20 61 72 
36403     72 61 79 3A 
36407     20 74 68 65 
3640b     20 76 61 72 
3640f     69 61 62 6C 
36413     65 20 65 78 
36417     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
3641b     00          | 	byte	0
3641c                 | LR__5988
3641c     45 78 70 65 
36420     63 74 65 64 
36424     20 27 28 27 | 	byte	"Expected '('"
36428     00          | 	byte	0
36429                 | LR__5989
36429     45 78 70 65 
3642d     63 74 65 64 
36431     20 27 29 27 
36435     20 6F 72 20 
36439     27 2C 27    | 	byte	"Expected ')' or ','"
3643c     00          | 	byte	0
3643d                 | LR__5990
3643d     4E 6F 20 6D 
36441     6F 72 65 20 
36445     74 68 61 6E 
36449     20 33 20 64 
3644d     69 6D 65 6E 
36451     73 69 6F 6E 
36455     73 20 73 75 
36459     70 70 6F 72 
3645d     74 65 64    | 	byte	"No more than 3 dimensions supported"
36460     00          | 	byte	0
36461                 | LR__5991
36461     56 61 72 69 
36465     61 62 6C 65 
36469     20 6E 61 6D 
3646d     65 20 65 78 
36471     70 65 63 74 
36475     65 64       | 	byte	"Variable name expected"
36477     00          | 	byte	0
36478                 | LR__5992
36478     54 79 70 65 
3647c     20 6E 61 6D 
36480     65 20 65 78 
36484     70 65 63 74 
36488     65 64       | 	byte	"Type name expected"
3648a     00          | 	byte	0
3648b                 | LR__5993
3648b     54 79 70 65 
3648f     20 6E 6F 74 
36493     20 73 75 70 
36497     70 6F 72 74 
3649b     65 64 20 79 
3649f     65 74       | 	byte	"Type not supported yet"
364a1     00          | 	byte	0
364a2                 | LR__5994
364a2     41 72 72 61 
364a6     79 20 69 6E 
364aa     64 65 78 20 
364ae     6F 75 74 20 
364b2     6F 66 20 72 
364b6     61 6E 67 65 | 	byte	"Array index out of range"
364ba     00          | 	byte	0
364bb                 | LR__5995
364bb     42 61 64 20 
364bf     74 79 70 65 
364c3     20 77 68 69 
364c7     6C 65 20 61 
364cb     73 73 69 67 
364cf     6E 69 6E 67 
364d3     20 74 6F 20 
364d7     61 72 72 61 
364db     79          | 	byte	"Bad type while assigning to array"
364dc     00          | 	byte	0
364dd                 | LR__5996
364dd     54 6F 6F 20 
364e1     6D 61 6E 79 
364e5     20 76 61 72 
364e9     69 61 62 6C 
364ed     65 73       | 	byte	"Too many variables"
364ef     00          | 	byte	0
364f0                 | LR__5997
364f0     27 54 68 65 
364f4     6E 27 20 65 
364f8     78 70 65 63 
364fc     74 65 64    | 	byte	"'Then' expected"
364ff     00          | 	byte	0
36500                 | LR__5998
36500     44 69 72 65 
36504     63 74 6F 72 
36508     79 20 64 6F 
3650c     65 73 6E 27 
36510     74 20 65 78 
36514     69 73 74    | 	byte	"Directory doesn't exist"
36517     00          | 	byte	0
36518                 | LR__5999
36518     55 6E 65 78 
3651c     70 65 63 74 
36520     65 64 20 65 
36524     6E 64 20 6F 
36528     66 20 6C 69 
3652c     6E 65       | 	byte	"Unexpected end of line"
3652e     00          | 	byte	0
3652f                 | LR__6000
3652f     4E 6F 20 6D 
36533     6F 72 65 20 
36537     64 61 74 61 | 	byte	"No more data"
3653b     00          | 	byte	0
3653c                 | LR__6001
3653c     45 72 72 6F 
36540     72 20       | 	byte	"Error "
36542     00          | 	byte	0
36543                 | LR__6002
36543     20 2D 20    | 	byte	" - "
36546     00          | 	byte	0
36547                 | LR__6003
36547     20 69 6E 20 
3654b     6C 69 6E 65 
3654f     20          | 	byte	" in line "
36550     00          | 	byte	0
36551                 | LR__6004
36551                 | 	byte	
36551     00          | 	byte	0
36552                 | LR__6005
36552     2F 73 64    | 	byte	"/sd"
36555     00          | 	byte	0
36556                 | LR__6006
36556     2F 73 64 2F 
3655a     62 61 73    | 	byte	"/sd/bas"
3655d     00          | 	byte	0
3655e                 | LR__6007
3655e     2F 73 64 2F 
36562     62 61 73    | 	byte	"/sd/bas"
36565     00          | 	byte	0
36566                 | LR__6008
36566     20 42 41 53 
3656a     49 43 20 62 
3656e     79 74 65 73 
36572     20 66 72 65 
36576     65          | 	byte	" BASIC bytes free"
36577     00          | 	byte	0
36578                 | LR__6009
36578     52 65 61 64 
3657c     79          | 	byte	"Ready"
3657d     00          | 	byte	0
3657e                 | LR__6010
3657e     6E 6F 6E 61 
36582     6D 65 2E 62 
36586     61 73       | 	byte	"noname.bas"
36588     00          | 	byte	0
36589                 | LR__6011
36589     2F 73 64 2F 
3658d     62 61 73 2F 
36591     61 75 74 6F 
36595     72 75 6E 2E 
36599     62 61 73    | 	byte	"/sd/bas/autorun.bas"
3659c     00          | 	byte	0
3659d                 | LR__6012
3659d     72 75 6E 20 
365a1     61 75 74 6F 
365a5     72 75 6E 2E 
365a9     62 61 73    | 	byte	"run autorun.bas"
365ac     00          | 	byte	0
365ad                 | LR__6013
365ad                 | 	byte	
365ad     00          | 	byte	0
365ae     00 00       | 	alignl
365b0                 | _dat_
365b0     00 00 00 00 
365b4     00 00 00 00 
365b8     00 00 00 00 
365bc     00 00 00 00 | 	byte	$00[16]
365c0     61 41 17 0E 
365c4     62 42 00 00 
365c8     63 43 19 10 
365cc     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
365d0     65 45 18 0F 
365d4     66 46 00 00 
365d8     67 47 00 00 
365dc     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
365e0     69 49 00 00 
365e4     6A 4A 00 00 
365e8     6B 4B 00 00 
365ec     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
365f0     6D 4D 00 00 
365f4     6E 4E 1A 11 
365f8     6F 4F 1E 15 
365fc     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
36600     71 51 00 00 
36604     72 52 00 00 
36608     73 53 1B 12 
3660c     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
36610     75 55 00 00 
36614     76 56 00 00 
36618     77 57 00 00 
3661c     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
36620     79 59 00 00 
36624     7A 5A 1D 14 
36628     31 21 04 00 
3662c     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
36630     33 23 06 00 
36634     34 24 07 00 
36638     35 25 08 00 
3663c     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
36640     37 26 0A 00 
36644     38 2A 0B 00 
36648     39 28 0C 00 
3664c     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
36650     8D 8D 00 00 
36654     9B 9B 00 00 
36658     88 88 00 00 
3665c     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
36660     20 20 00 00 
36664     2D 5F 00 00 
36668     3D 2B 00 00 
3666c     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
36670     5D 7D 00 00 
36674     5C 7C 00 00 
36678     23 7E 00 00 
3667c     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
36680     27 22 00 00 
36684     60 7E 03 00 
36688     2C 3C 00 00 
3668c     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
36690     2F 3F 00 00 
36694     B9 B9 00 00 
36698     BA 00 00 00 
3669c     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
366a0     BC 00 00 00 
366a4     BD 00 00 00 
366a8     BE 00 00 00 
366ac     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
366b0     C0 00 00 00 
366b4     C1 00 00 00 
366b8     C2 00 00 00 
366bc     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
366c0     C4 00 00 00 
366c4     C5 00 00 00 
366c8     C6 00 00 00 
366cc     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
366d0     C8 00 00 00 
366d4     C9 00 00 00 
366d8     CA 00 00 00 
366dc     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
366e0     7F 7F 00 00 
366e4     CC 00 00 00 
366e8     CD 00 00 00 
366ec     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
366f0     CF 00 00 00 
366f4     D0 00 00 00 
366f8     D1 00 00 00 
366fc     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
36700     2F 2F 00 00 
36704     2A 2A 00 00 
36708     2D 2D 00 00 
3670c     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
36710     8D 8D 00 00 
36714     31 31 00 00 
36718     32 32 00 00 
3671c     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
36720     34 34 00 00 
36724     35 35 00 00 
36728     36 36 00 00 
3672c     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
36730     38 38 00 00 
36734     39 39 00 00 
36738     30 30 00 00 
3673c     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
36740     5C 7C 00 00 
36744     00 00 00 00 
36748     00 00 00 00 
3674c     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
36750     00 00 00 00 
      ...             
367a8     00 00 00 00 
367ac     00 00 00 00 | 	byte	$00[96]
367b0     2B 00 A6 F2 
367b4     24 A7 09 80 
367b8     5B 88 4D 89 
367bc     80 88 A5 88 | atari_spl file "atari.spl"
367c0     6D 88 B8 88 
367c4     80 88 CB 88 
367c8     92 88 A5 88 
367cc     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
367d0     A5 88 CA 88 
367d4     A6 88 DD 88 
367d8     B8 88 AB 89 
367dc     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
367e0     C8 AD C6 F1 
367e4     91 06 B6 FF 
367e8     13 00 4A 00 
367ec     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
367f0     5D 00 5E 00 
367f4     5D 00 5E 00 
367f8     5E 00 5D 00 
367fc     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
36800     38 00 83 00 
36804     25 00 83 00 
36808     C3 FE D1 04 
3680c     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
36810     48 88 38 85 
36814     41 8A CB 88 
36818     28 89 B8 88 
3681c     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
36820     15 89 03 89 
36824     02 89 15 89 
36828     16 89 15 89 
3682c     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
36830     15 89 3A 89 
36834     72 89 E3 89 
36838     52 83 AD 97 
3683c     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
36840     0C 02 B6 FF 
36844     E1 00 A8 00 
36848     F3 00 A8 00 
3684c     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
36850     CE 00 CD 00 
36854     CD 00 BA 00 
36858     E1 00 BB 00 
3685c     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
36860     DF 00 C9 FF 
36864     E6 01 B6 06 
36868     EE DD 8D 98 
3686c     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
36870     97 89 73 89 
36874     3B 89 60 89 
36878     60 89 60 89 
3687c     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
36880     73 89 72 89 
36884     85 89 73 89 
36888     AA 89 60 89 
3688c     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
36890     E8 8A 18 86 
36894     92 88 A5 C2 
36898     E0 00 C3 05 
3689c     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
368a0     F2 00 64 01 
368a4     06 01 3E 01 
368a8     2B 01 2B 01 
368ac     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
368b0     2B 01 2A 01 
368b4     2B 01 2B 01 
368b8     2B 01 18 01 
368bc     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
368c0     39 07 61 F3 
368c4     C0 AF 37 85 
368c8     0F 88 8B 8A 
368cc     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
368d0     AB 89 D0 89 
368d4     AB 89 D0 89 
368d8     D0 89 CF 89 
368dc     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
368e0     D0 89 F5 89 
368e4     BD 89 08 8A 
368e8     CF 89 E8 8A 
368ec     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
368f0     53 B3 0D F8 
368f4     F4 07 38 00 
368f8     63 01 63 01 
368fc     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
36900     88 01 88 01 
36904     76 01 88 01 
36908     88 01 89 01 
3690c     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
36910     75 01 AE 01 
36914     76 01 88 01 
36918     4A 00 46 06 
3691c     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
36920     08 8A 9A 86 
36924     33 8B 08 8A 
36928     2D 8A F5 89 
3692c     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
36930     2D 8A 2D 8A 
36934     2E 8A 1B 8A 
36938     40 8A 2D 8A 
3693c     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
36940     2E 8A 79 8A 
36944     66 8A C8 8B 
36948     72 82 2B 97 
3694c     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
36950     1D 02 05 01 
36954     F8 01 C0 01 
36958     0B 02 C0 01 
3695c     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
36960     F9 01 D3 01 
36964     F8 01 D3 01 
36968     F8 01 D2 01 
3696c     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
36970     E6 01 2B 01 
36974     8E 02 5F 07 
36978     F7 E2 ED 9C 
3697c     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
36980     E8 8A 78 8A 
36984     78 8A 65 8A 
36988     8B 8A 78 8A 
3698c     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
36990     8B 8A 9D 8A 
36994     9D 8A 8B 8A 
36998     C2 8A 78 8A 
3699c     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
369a0     70 8C 18 86 
369a4     8B 8A 23 C9 
369a8     CB 03 C4 05 
369ac     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
369b0     0B 02 7B 02 
369b4     1E 02 55 02 
369b8     30 02 43 02 
369bc     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
369c0     43 02 44 02 
369c4     43 02 30 02 
369c8     68 02 31 02 
369cc     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
369d0     07 08 3F F7 
369d4     73 B2 13 85 
369d8     15 89 ED 8B 
369dc     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
369e0     B0 8A FB 8A 
369e4     D5 8A FA 8A 
369e8     E8 8A FB 8A 
369ec     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
369f0     E8 8A 21 8B 
369f4     E7 8A 33 8B 
369f8     E8 8A 26 8C 
369fc     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
36a00     8D B0 27 F6 
36a04     9C 08 AD 01 
36a08     7B 02 8D 02 
36a0c     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
36a10     A1 02 A0 02 
36a14     A1 02 A0 02 
36a18     A0 02 A0 02 
36a1c     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
36a20     7B 02 D8 02 
36a24     7B 02 C6 02 
36a28     3E 01 C3 05 
36a2c     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
36a30     00 8C 2A 86 
36a34     E0 8C FA 8A 
36a38     6A 8B FB 8A 
36a3c     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
36a40     45 8B 45 8B 
36a44     45 8B 6B 8B 
36a48     46 8B 59 8B 
36a4c     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
36a50     6B 8B 6B 8B 
36a54     6B 8B 6B 8B 
36a58     7D 8B 7D 8B 
36a5c     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
36a60     90 8B 91 8B 
36a64     90 8B 90 8B 
36a68     A3 8B A3 8B 
36a6c     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
36a70     B5 8B B6 8B 
36a74     B5 8B B5 8B 
36a78     B6 8B C8 8B 
36a7c     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
36a80     C8 8B DA 8B 
36a84     DB 8B DB 8B 
36a88     DB 8B DC 8B 
36a8c     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
36a90     EE 8B EE 8B 
36a94     00 8C 01 8C 
36a98     00 8C 01 8C 
36a9c     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
36aa0     12 8C 13 8C 
36aa4     13 8C 26 8C 
36aa8     26 8C 26 8C 
36aac     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
36ab0     38 8C 38 8C 
36ab4     38 8C 38 8C 
36ab8     4B 8C 4B 8C 
36abc     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
36ac0     5E 8C 5E 8C 
36ac4     5E 8C 5E 8C 
36ac8     70 8C 70 8C 
36acc     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
36ad0     70 8C 83 8C 
36ad4     83 8C 83 8C 
36ad8     83 8C 96 8C 
36adc     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
36ae0     95 8C A9 8C 
36ae4     A9 8C A8 8C 
36ae8     A8 8C A8 8C 
36aec     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
36af0     BB 8C BB 8C 
36af4     BB 8C CE 8C 
36af8     CE 8C CE 8C 
36afc     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
36b00     E0 8C E1 8C 
36b04     E1 8C E0 8C 
36b08     F4 8C F2 8C 
36b0c     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
36b10     05 8D 05 8D 
36b14     06 8D 06 8D 
36b18     19 8D 19 8D 
36b1c     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
36b20     18 8D 2B 8D 
36b24     2B 8D 2B 8D 
36b28     2A 8D 3E 8D 
36b2c     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
36b30     3E 8D 51 8D 
36b34     50 8D 50 8D 
36b38     50 8D 51 8D 
36b3c     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
36b40     63 8D 64 8D 
36b44     76 8D 75 8D 
36b48     75 8D 76 8D 
36b4c     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
36b50     88 8D 88 8D 
36b54     89 8D 9B 8D 
36b58     9A 8D 9B 8D 
36b5c     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
36b60     AD 8D AE 8D 
36b64     AD 8D AE 8D 
36b68     C1 8D C1 8D 
36b6c     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
36b70     D3 8D D3 8D 
36b74     D3 8D D3 8D 
36b78     D3 8D E6 8D 
36b7c     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
36b80     E6 8D E6 8D 
36b84     F9 8D F9 8D 
36b88     F9 8D F8 8D 
36b8c     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
36b90     0B 8E 0B 8E 
36b94     1D 8E 1D 8E 
36b98     1E 8E 1E 8E 
36b9c     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
36ba0     31 8E 31 8E 
36ba4     31 8E 42 8E 
36ba8     43 8E 43 8E 
36bac     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
36bb0     56 8E 56 8E 
36bb4     55 8E 56 8E 
36bb8     68 8E 69 8E 
36bbc     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
36bc0     69 8E 7B 8E 
36bc4     7C 8E 7B 8E 
36bc8     7B 8E 8D 8E 
36bcc     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
36bd0     8D 8E A1 8E 
36bd4     A0 8E A1 8E 
36bd8     A1 8E A0 8E 
36bdc     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
36be0     B3 8E B3 8E 
36be4     C6 8E C5 8E 
36be8     C6 8E C6 8E 
36bec     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
36bf0     D8 8E D9 8E 
36bf4     D8 8E EC 8E 
36bf8     EB 8E EC 8E 
36bfc     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
36c00     FE 8E FE 8E 
36c04     FE 8E FE 8E 
36c08     10 8F 10 8F 
36c0c     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
36c10     11 8F 23 8F 
36c14     24 8F 23 8F 
36c18     24 8F 37 8F 
36c1c     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
36c20     36 8F 36 8F 
36c24     48 8F 49 8F 
36c28     49 8F 49 8F 
36c2c     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
36c30     5B 8F 5C 8F 
36c34     5B 8F 6E 8F 
36c38     6E 8F 6E 8F 
36c3c     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
36c40     81 8F 81 8F 
36c44     81 8F 81 8F 
36c48     93 8F 93 8F 
36c4c     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
36c50     93 8F A6 8F 
36c54     A6 8F A6 8F 
36c58     A6 8F B9 8F 
36c5c     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
36c60     B9 8F B9 8F 
36c64     CC 8F CB 8F 
36c68     CB 8F CC 8F 
36c6c     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
36c70     DF 8F DE 8F 
36c74     DE 8F F1 8F 
36c78     F1 8F F1 8F 
36c7c     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
36c80     03 90 04 90 
36c84     04 90 04 90 
36c88     16 90 17 90 
36c8c     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
36c90     29 90 28 90 
36c94     29 90 28 90 
36c98     29 90 3C 90 
36c9c     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
36ca0     3C 90 4F 90 
36ca4     4E 90 4E 90 
36ca8     4E 90 4E 90 
36cac     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
36cb0     61 90 61 90 
36cb4     73 90 74 90 
36cb8     74 90 74 90 
36cbc     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
36cc0     87 90 86 90 
36cc4     87 90 86 90 
36cc8     99 90 99 90 
36ccc     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
36cd0     AB 90 AB 90 
36cd4     AC 90 AB 90 
36cd8     AB 90 BF 90 
36cdc     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
36ce0     BE 90 D1 90 
36ce4     D0 90 D1 90 
36ce8     D1 90 D1 90 
36cec     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
36cf0     E3 90 E4 90 
36cf4     F6 90 F6 90 
36cf8     F6 90 F6 90 
36cfc     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
36d00     09 91 0A 91 
36d04     0A 91 1C 91 
36d08     1C 91 1C 91 
36d0c     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
36d10     2F 91 2E 91 
36d14     2F 91 2F 91 
36d18     2E 91 41 91 
36d1c     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
36d20     41 91 53 91 
36d24     54 91 54 91 
36d28     53 91 54 91 
36d2c     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
36d30     67 91 67 91 
36d34     79 91 7A 91 
36d38     79 91 78 91 
36d3c     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
36d40     8C 91 8B 91 
36d44     8C 91 8C 91 
36d48     9E 91 9E 91 
36d4c     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
36d50     B1 91 B1 91 
36d54     B2 91 B1 91 
36d58     B1 91 C4 91 
36d5c     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
36d60     C4 91 D6 91 
36d64     D7 91 D7 91 
36d68     D7 91 D6 91 
36d6c     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
36d70     EA 91 EA 91 
36d74     EA 91 FC 91 
36d78     FC 91 FB 91 
36d7c     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
36d80     0E 92 0F 92 
36d84     0F 92 0E 92 
36d88     21 92 21 92 
36d8c     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
36d90     21 92 34 92 
36d94     33 92 34 92 
36d98     34 92 47 92 
36d9c     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
36da0     46 92 47 92 
36da4     59 92 59 92 
36da8     59 92 59 92 
36dac     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
36db0     6C 92 6C 92 
36db4     6B 92 7E 92 
36db8     7E 92 7E 92 
36dbc     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
36dc0     92 92 91 92 
36dc4     91 92 90 92 
36dc8     91 92 A4 92 
36dcc     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
36dd0     A3 92 B6 92 
36dd4     B6 92 B7 92 
36dd8     B7 92 B6 92 
36ddc     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
36de0     CA 92 C9 92 
36de4     CA 92 DC 92 
36de8     DC 92 DC 92 
36dec     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
36df0     EF 92 EF 92 
36df4     EF 92 EF 92 
36df8     01 93 01 93 
36dfc     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
36e00     15 93 14 93 
36e04     14 93 14 93 
36e08     14 93 27 93 
36e0c     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
36e10     27 93 39 93 
36e14     3A 93 39 93 
36e18     39 93 39 93 
36e1c     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
36e20     4B 93 4C 93 
36e24     5F 93 5F 93 
36e28     5F 93 5E 93 
36e2c     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
36e30     5F 93 84 93 
36e34     4C 93 96 93 
36e38     5F 93 AE 94 
36e3c     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
36e40     7B C1 00 00 
36e44     00 00 00 00 
36e48     00 00 00 00 
36e4c     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36e50     00 00 00 00 | 	byte	$00, $00, $00, $00
36e54     7A D7 00 80 
36e58     87 8A 48 8F 
36e5c     EC 8C 76 8D 
36e60     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
36e64     3C 8D 82 8D 
36e68     42 8D 88 8D 
36e6c     8C 8D 8E 8D 
36e70     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
36e74     97 8D DE 8D 
36e78     E1 8D F1 8E 
36e7c     D8 8C A3 83 
36e80     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
36e84     65 71 C9 65 
36e88     FC 64 C4 65 
36e8c     C1 65 BF 65 
36e90     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
36e94     B6 65 B4 65 
36e98     B2 65 AE 65 
36e9c     AC 65 ED 65 
36ea0     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
36ea4     5E 65 25 66 
36ea8     FA 62 23 6B 
36eac     B5 6C 61 0A 
36eb0     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
36eb4     5D 90 BE 8D 
36eb8     47 8E C3 8D 
36ebc     09 8E C9 8D 
36ec0     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
36ec4     15 8E 19 8E 
36ec8     1B 8E 62 8E 
36ecc     64 8E 68 8E 
36ed0     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
36ed4     B5 8E 4C 90 
36ed8     FA 84 3C 9D 
36edc     98 13 79 6D 
36ee0     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
36ee4     D9 66 50 66 
36ee8     D4 66 4B 66 
36eec     8C 66 46 66 
36ef0     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
36ef4     81 66 3A 66 
36ef8     7C 66 36 66 
36efc     76 66 30 66 
36f00     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
36f04     6B 66 88 72 
36f08     BF 37 E7 B7 
36f0c     75 83 8B 8E 
36f10     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
36f14     94 8E 96 8E 
36f18     DD 8E 9C 8E 
36f1c     E2 8E A2 8E 
36f20     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
36f24     EE 8E AE 8E 
36f28     38 8F B5 8E 
36f2c     3F 8F FD 8E 
36f30     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
36f34     A5 87 1E E3 
36f38     6D 5D FA 71 
36f3c     41 64 25 67 
36f40     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
36f44     D9 66 1A 67 
36f48     18 67 15 67 
36f4c     12 67 0F 67 
36f50     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
36f54     07 67 C0 66 
36f58     01 67 BC 66 
36f5c     B8 66 DE 64 
36f60     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
36f64     43 E5 1F 8B 
36f68     14 8A F1 90 
36f6c     1C 8F 63 8F 
36f70     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
36f74     29 8F 6E 8F 
36f78     72 8F 75 8F 
36f7c     34 8F BE 8F 
36f80     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
36f84     84 8F 87 8F 
36f88     CC 8F 56 90 
36f8c     67 91 49 80 
36f90     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
36f94     46 77 A6 66 
36f98     E8 66 B0 67 
36f9c     AD 67 ED 67 
36fa0     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
36fa4     A2 67 E3 67 
36fa8     9D 67 9A 67 
36fac     98 67 94 67 
36fb0     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
36fb4     49 67 CD 67 
36fb8     28 65 5F 6E 
36fbc     82 67 3A 01 
36fc0     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
36fc4     C2 91 A9 8F 
36fc8     EF 8F AE 8F 
36fcc     F4 8F B5 8F 
36fd0     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
36fd4     01 90 03 90 
36fd8     07 90 09 90 
36fdc     0C 90 53 90 
36fe0     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
36fe4     18 90 44 93 
36fe8     85 84 D6 9D 
36fec     87 1F 2F 75 
36ff0     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
36ff4     C4 68 F6 67 
36ff8     BE 68 F1 67 
36ffc     76 68 2E 68 
37000     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
37004     27 68 24 68 
37008     64 68 1E 68 
3700c     5F 68 19 68 
37010     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
37014     DC 68 56 72 
37018     7E 36 C2 B8 
3701c     D7 84 73 90 
37020     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
37024     7B 90 7F 90 
37028     82 90 84 90 
3702c     CB 90 8B 90 
37030     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
37034     D7 90 96 90 
37038     20 91 59 90 
3703c     25 91 A2 90 
37040     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
37044     D0 89 40 EE 
37048     12 64 C4 71 
3704c     29 66 0C 69 
37050     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
37054     C0 68 02 69 
37058     FE 68 FB 68 
3705c     F9 68 F6 68 
37060     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
37064     EE 68 A8 68 
37068     2C 69 5F 68 
3706c     E2 68 81 66 
37070     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
37074     1E EB A6 8A 
37078     73 8B 5E 93 
3707c     7B 90 48 91 
37080     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
37084     0D 91 11 91 
37088     14 91 16 91 
3708c     5C 91 1C 91 
37090     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
37094     68 91 AF 91 
37098     2A 91 B5 91 
3709c     75 91 1A 94 
370a0     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
370a4     70 0E CB 6C 
370a8     5D 6E C4 67 
370ac     99 69 54 69 
370b0     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
370b4     D2 69 49 69 
370b8     89 69 86 69 
370bc     40 69 C4 69 
370c0     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
370c4     35 69 76 69 
370c8     58 67 EB 6D 
370cc     E9 6D 89 0F 
370d0     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
370d4     33 94 94 91 
370d8     D9 91 56 91 
370dc     E0 91 9F 91 
370e0     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
370e4     EC 91 EE 91 
370e8     F1 91 F4 91 
370ec     F7 91 3D 92 
370f0     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
370f4     46 92 21 94 
370f8     11 89 A4 9D 
370fc     FD 0E 8F 6C 
37100     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
37104     28 6A E1 69 
37108     65 6A 1F 6A 
3710c     5F 6A 1A 6A 
37110     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
37114     54 6A 0F 6A 
37118     4F 6A 09 6A 
3711c     06 6A 03 6A 
37120     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
37124     23 68 69 77 
37128     3A 4D 38 CA 
3712c     38 86 4E 91 
37130     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
37134     64 92 24 92 
37138     6A 92 2A 92 
3713c     70 92 30 92 
37140     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
37144     7B 92 7E 92 
37148     C5 92 84 92 
3714c     CB 92 8A 92 
37150     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
37154     4D 8D F9 E2 
37158     97 59 FE 74 
3715c     DB 68 6D 6A 
37160     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
37164     A8 6A A5 6A 
37168     A3 6A 9F 6A 
3716c     9D 6A 9B 6A 
37170     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
37174     D6 6A 8F 6A 
37178     CF 6A 46 6A 
3717c     CA 6A E1 67 
37180     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
37184     D3 F7 15 92 
37188     90 8C BF 94 
3718c     A6 92 EB 92 
37190     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
37194     B1 92 F7 92 
37198     FA 92 FD 92 
3719c     00 93 02 93 
371a0     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
371a4     4F 93 52 93 
371a8     54 93 22 94 
371ac     5A 93 8F 88 
371b0     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
371b4     1C 77 07 6C 
371b8     E8 69 7A 6B 
371bc     34 6B 75 6B 
371c0     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
371c4     29 6B 26 6B 
371c8     24 6B 21 6B 
371cc     1D 6B 5E 6B 
371d0     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
371d4     12 6B 52 6B 
371d8     34 69 34 6E 
371dc     BA 73 A4 24 
371e0     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
371e4     7A 94 B3 93 
371e8     72 93 31 93 
371ec     78 93 7A 93 
371f0     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
371f4     83 93 86 93 
371f8     89 93 D0 93 
371fc     D2 93 D5 93 
37200     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
37204     DD 93 40 96 
37208     30 8B 99 9C 
3720c     52 10 94 71 
37210     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
37214     46 6C 79 6B 
37218     40 6C B7 6B 
3721c     F7 6B B1 6B 
37220     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
37224     EC 6B A5 6B 
37228     A2 6B 9F 6B 
3722c     9D 6B 9A 6B 
37230     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
37234     C8 6A E4 76 
37238     20 4B F9 CE 
3723c     2E 8A 1A 92 
37240     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
37244     FB 93 BA 93 
37248     01 94 03 94 
3724c     4A 94 09 94 
37250     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
37254     55 94 14 94 
37258     9E 94 1A 94 
3725c     61 94 20 94 
37260     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
37264     3E 87 E5 CD 
37268     5F 50 6C 78 
3726c     B5 6A 04 6C 
37270     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
37274     83 6C 7F 6C 
37278     7C 6C 36 6C 
3727c     76 6C 74 6C 
37280     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
37284     6B 6C 25 6C 
37288     66 6C 1F 6C 
3728c     1D 6C 41 6A 
37290     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
37294     BA FA FC 94 
37298     5B 8D 97 96 
3729c     3B 94 C5 94 
372a0     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
372a4     89 94 8C 94 
372a8     8F 94 92 94 
372ac     94 94 DB 94 
372b0     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
372b4     E4 94 E7 94 
372b8     2D 95 74 95 
372bc     C8 96 15 89 
372c0     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
372c4     CB 75 31 6F 
372c8     7E 6B 10 6D 
372cc     C9 6C 0A 6D 
372d0     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
372d4     BD 6C FF 6C 
372d8     FB 6C F9 6C 
372dc     B2 6C F3 6C 
372e0     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
372e4     A7 6C E8 6C 
372e8     0D 6B 85 6F 
372ec     C7 74 10 28 
372f0     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
372f4     96 96 47 95 
372f8     06 95 0A 95 
372fc     0C 95 0F 95 
37300     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
37304     17 95 5E 95 
37308     61 95 63 95 
3730c     22 95 AC 95 
37310     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
37314     72 95 17 98 
37318     59 8E 01 96 
3731c     CF FC 5A 68 
37320     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
37324     96 6D 50 6D 
37328     D5 6D 4A 6D 
3732c     8C 6D 89 6D 
37330     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
37334     80 6D 3A 6D 
37338     7A 6D 77 6D 
3733c     75 6D 71 6D 
37340     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
37344     18 6C BC 78 
37348     9A 4F 7E CF 
3734c     1F 89 F1 93 
37350     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
37354     D2 95 4E 95 
37358     D7 95 53 95 
3735c     DD 95 E0 95 
37360     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
37364     A5 95 EB 95 
37368     EE 95 F0 95 
3736c     37 96 B3 95 
37370     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
37374     1A 98 D5 8D 
37378     C5 9F CD 0F 
3737c     0F 71 F3 73 
37380     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
37384     D9 6D 5E 6E 
37388     D3 6D 58 6E 
3738c     12 6E 0F 6E 
37390     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
37394     49 6E BF 6D 
37398     87 6E 76 6D 
3739c     81 6E 11 6B 
373a0     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
373a4     3F 09 44 95 
373a8     E5 8D 3F 99 
373ac     D4 95 A2 96 
373b0     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
373b4     23 96 69 96 
373b8     6B 96 6E 96 
373bc     71 96 74 96 
373c0     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
373c4     BF 96 3C 96 
373c8     C6 96 C8 96 
373cc     A3 98 51 8D 
373d0     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
373d4     CF 75 29 73 
373d8     90 6C EC 6E 
373dc     62 6E E7 6E 
373e0     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
373e4     9A 6E 98 6E 
373e8     95 6E 91 6E 
373ec     8E 6E CF 6E 
373f0     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
373f4     40 6E C3 6E 
373f8     E8 6C 45 6F 
373fc     A5 7B C9 35 
37400     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
37404     2D 98 23 97 
37408     E1 96 A0 96 
3740c     A4 96 EA 96 
37410     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
37414     AF 96 F4 96 
37418     F8 96 3E 97 
3741c     FD 96 43 97 
37420     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
37424     08 97 6B 99 
37428     D6 92 88 91 
3742c     D8 EE 84 66 
37430     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
37434     2E 6F E7 6E 
37438     6C 6F 24 6F 
3743c     21 6F 1F 6F 
37440     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
37444     17 6F 13 6F 
37448     54 6F 0E 6F 
3744c     0B 6F 4B 6F 
37450     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
37454     27 6D 1C 7B 
37458     19 59 9F DB 
3745c     66 8E BC 94 
37460     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
37464     67 97 26 97 
37468     6D 97 2B 97 
3746c     72 97 32 97 
37470     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
37474     C1 97 7F 97 
37478     C6 97 85 97 
3747c     CB 97 CE 97 
37480     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
37484     EC 8A C4 C6 
37488     68 4C F4 7D 
3748c     63 6E E8 6E 
37490     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
37494     ED 6F A7 6F 
37498     E7 6F A0 6F 
3749c     E1 6F 9B 6F 
374a0     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
374a4     D5 6F 8F 6F 
374a8     CE 6F 45 6F 
374ac     86 6F 68 6D 
374b0     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
374b4     C0 13 AD A2 
374b8     A7 8E 79 99 
374bc     E6 97 E8 97 
374c0     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
374c4     F1 97 F3 97 
374c8     F6 97 F9 97 
374cc     FB 97 FE 97 
374d0     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
374d4     4A 98 0A 98 
374d8     93 98 0F 98 
374dc     7F 9B BF 8C 
374e0     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
374e4     91 7B 62 73 
374e8     1A 6E B9 70 
374ec     EB 6F B3 70 
374f0     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
374f4     25 70 20 70 
374f8     1E 70 1B 70 
374fc     18 70 15 70 
37500     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
37504     0D 70 09 70 
37508     07 70 03 70 
3750c     01 70 FD 6F 
37510     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
37514     F6 6F F2 6F 
37518     EF 6F EC 6F 
3751c     2C 70 E6 6F 
37520     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
37524     DD 6F 97 6F 
37528     D7 6F 84 6E 
3752c     8F 6F 3F 7D 
37530     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
37532     FF FF FF FF 
37536     FF FF       | atarist_spl file "atarist.spl" '512
37538     00 00 00 00 
3753c     00 00 00 00 
37540     00 00       | 	byte	$00[10]
37542     17 7F F2 7F 
37546     B2 7F 72 7F 
3754a     33 7F F4 7E 
3754e     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
37552     36 7E F5 7D 
37556     E9 51 F2 0D 
3755a     8E 00 F3 FD 
3755e     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
37562     57 FD 58 FD 
37566     5B FD 5C FD 
3756a     5C FD 60 7D 
3756e     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
37572     D6 7C 98 7C 
37576     59 7C 1A 7C 
3757a     DC 7B 9E 7B 
3757e     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
37582     F3 05 00 FD 
37586     41 FB EA FA 
3758a     D9 FA DB FA 
3758e     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
37592     E4 FA 9B 36 
37596     F8 7A C0 7A 
3759a     84 7A 45 7A 
3759e     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
375a2     8E 79 51 79 
375a6     15 79 D7 78 
375aa     3C 1F EB FF 
375ae     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
375b2     6D F8 65 F8 
375b6     68 F8 6D F8 
375ba     70 F8 74 F8 
375be     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
375c2     AB 60 79 60 
375c6     4B 60 1A 60 
375ca     E9 5F B9 5F 
375ce     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
375d2     FB 59 B2 0B 
375d6     92 FA 3A F7 
375da     96 F6 79 F6 
375de     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
375e2     82 F6 86 F6 
375e6     8C F6 DB 5D 
375ea     F1 5E C1 5E 
375ee     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
375f2     34 5E 04 5E 
375f6     D6 5D A6 5D 
375fa     78 5D D4 3E 
375fe     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
37602     27 F5 BA F4 
37606     AB F4 AD F4 
3760a     B2 F4 B8 F4 
3760e     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
37612     26 5D 2B 5D 
37616     FC 5C CD 5C 
3761a     9F 5C 70 5C 
3761e     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
37622     E5 5B B8 5B 
37626     DB 24 A7 FC 
3762a     D1 F4 4D F3 
3762e     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
37632     04 F3 0B F3 
37636     11 F3 16 F3 
3763a     DE 18 98 5B 
3763e     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
37642     4E 4A 29 48 
37646     A0 47 6A 47 
3764a     43 47 20 47 
3764e     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
37652     E2 F6 98 F2 
37656     C5 F1 A3 F1 
3765a     A3 F1 A8 F1 
3765e     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
37662     BF F1 00 3D 
37666     EF 46 CD 46 
3766a     AA 46 86 46 
3766e     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
37672     1C 46 F9 45 
37676     D7 45 EE 43 
3767a     DE 02 E8 F3 
3767e     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
37682     61 F0 65 F0 
37686     6D F0 74 F0 
3768a     7C F0 84 F0 
3768e     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
37692     8E 45 6D 45 
37696     49 45 27 45 
3769a     05 45 E1 44 
3769e     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
376a2     F1 2F A9 FB 
376a6     8B F1 9B EF 
376aa     40 EF 36 EF 
376ae     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
376b2     4D EF 56 EF 
376b6     5E EF 7B 44 
376ba     8C 44 69 44 
376be     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
376c2     03 44 E1 43 
376c6     C0 43 F5 37 
376ca     69 33 0F 11 
376ce     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
376d2     66 EE 37 EE 
376d6     38 EE 40 EE 
376da     48 EE 51 EE 
376de     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
376e2     7D 32 6A 32 
376e6     51 32 37 32 
376ea     1F 32 05 32 
376ee     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
376f2     B9 31 A1 31 
376f6     F1 04 F4 F1 
376fa     50 EE A0 ED 
376fe     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
37702     93 ED 9A ED 
37706     A4 ED AD ED 
3770a     F4 27 C1 31 
3770e     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
37712     78 31 5F 31 
37716     46 31 2E 31 
3771a     15 31 FC 30 
3771e     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
37722     C4 EF 4A ED 
37726     DC EC CB EC 
3772a     D2 EC DA EC 
3772e     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
37732     F9 EC 64 2F 
37736     0A 31 F1 30 
3773a     D9 30 C0 30 
3773e     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
37742     78 30 5F 30 
37746     46 30 38 23 
3774a     A6 F6 19 EE 
3774e     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
37752     20 EC 28 EC 
37756     32 EC 3C EC 
3775a     47 EC 51 EC 
3775e     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
37762     A3 22 93 22 
37766     7F 22 6E 22 
3776a     5D 22 4C 22 
3776e     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
37772     77 09 76 F1 
37776     CC EC F0 EB 
3777a     CD EB CE EB 
3777e     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
37782     ED EB F5 EB 
37786     3E F6 6B 22 
3778a     5F 22 4E 22 
3778e     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
37792     1B 22 0B 22 
37796     FA 21 E9 21 
3779a     D8 21 4D FF 
3779e     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
377a2     92 EB 7B EB 
377a6     82 EB 8C EB 
377aa     97 EB A1 EB 
377ae     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
377b2     15 22 04 22 
377b6     F3 21 E3 21 
377ba     D2 21 C0 21 
377be     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
377c2     8E 21 7D 21 
377c6     9A F8 A4 ED 
377ca     8E EB 2F EB 
377ce     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
377d2     37 EB 42 EB 
377d6     4C EB 57 EB 
377da     B2 17 22 19 
377de     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
377e2     FD 18 EF 18 
377e6     E3 18 D6 18 
377ea     CA 18 BD 18 
377ee     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
377f2     60 EC 35 EB 
377f6     01 EB 01 EB 
377fa     0C EB 16 EB 
377fe     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
37802     34 EB D0 18 
37806     00 19 F4 18 
3780a     E8 18 DA 18 
3780e     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
37812     B6 18 A9 18 
37816     9D 18 91 05 
3781a     F0 EF CA EB 
3781e     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
37822     E8 EA F2 EA 
37826     FE EA 07 EB 
3782a     12 EB C2 EF 
3782e     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
37832     D9 18 CD 18 
37836     C0 18 B3 18 
3783a     A7 18 9B 18 
3783e     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
37842     B8 FC 30 EE 
37846     61 EB DC EA 
3784a     CD EA D2 EA 
3784e     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
37852     F3 EA FE EA 
37856     D2 09 D1 18 
3785a     C3 18 17 18 
3785e     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
37862     66 11 52 11 
37866     49 11 41 11 
3786a     38 11 E0 F4 
3786e     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
37872     C9 EA C5 EA 
37876     CF EA DB EA 
3787a     E6 EA EF EA 
3787e     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
37882     89 11 80 11 
37886     78 11 6E 11 
3788a     67 11 5D 11 
3788e     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
37892     43 11 32 0D 
37896     9C F1 07 EC 
3789a     F8 EA CD EA 
3789e     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
378a2     E4 EA ED EA 
378a6     F8 EA 02 EB 
378aa     55 11 91 11 
378ae     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
378b2     75 11 6E 11 
378b6     64 11 5E 11 
378ba     54 11 4A 11 
378be     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
378c2     A8 EB F1 EA 
378c6     D9 EA DC EA 
378ca     E8 EA F1 EA 
378ce     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
378d2     A6 EB 9E 11 
378d6     A0 11 96 11 
378da     8D 11 85 11 
378de     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
378e2     6A 11 CA 0D 
378e6     36 0B 57 F8 
378ea     6C ED 57 EB 
378ee     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
378f2     F4 EA FF EA 
378f6     09 EB 15 EB 
378fa     1E EB 1A FD 
378fe     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
37902     ED 0A E8 0A 
37906     E2 0A DC 0A 
3790a     D6 0A D1 0A 
3790e     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
37912     F8 F3 BC EC 
37916     57 EB 1E EB 
3791a     18 EB 24 EB 
3791e     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
37922     42 EB 4D EB 
37926     08 09 20 0B 
3792a     1A 0B 14 0B 
3792e     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
37932     04 0B FE 0A 
37936     F9 0A F2 0A 
3793a     84 08 3A F1 
3793e     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
37942     42 EB 42 EB 
37946     4E EB 57 EB 
3794a     62 EB 6B EB 
3794e     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
37952     48 0B 43 0B 
37956     3C 0B 36 0B 
3795a     31 0B 2C 0B 
3795e     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
37962     1B 0B 5C 00 
37966     6A EF 1B EC 
3796a     81 EB 6A EB 
3796e     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
37972     85 EB 8E EB 
37976     99 EB A3 EB 
3797a     DD 05 E5 05 
3797e     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
37982     DB 05 D8 05 
37986     D5 05 D1 05 
3798a     D0 05 CB 05 
3798e     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
37992     0C EC BB EB 
37996     B3 EB BB EB 
3799a     C5 EB D0 EB 
3799e     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
379a2     E4 F7 2C 06 
379a6     28 06 24 06 
379aa     22 06 1F 06 
379ae     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
379b2     16 06 14 06 
379b6     0F 06 D0 F3 
379ba     65 ED 2D EC 
379be     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
379c2     01 EC 0A EC 
379c6     14 EC 1E EC 
379ca     29 EC FB 03 
379ce     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
379d2     63 06 60 06 
379d6     5E 06 59 06 
379da     58 06 54 06 
379de     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
379e2     69 F1 21 ED 
379e6     55 EC 33 EC 
379ea     36 EC 40 EC 
379ee     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
379f2     5C EC 68 EC 
379f6     92 02 D9 02 
379fa     D7 02 D7 02 
379fe     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
37a02     D1 02 D1 02 
37a06     CE 02 CD 02 
37a0a     5D FC 80 EF 
37a0e     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
37a12     83 EC 8A EC 
37a16     93 EC 9C EC 
37a1a     A5 EC B1 EC 
37a1e     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
37a22     2B 03 2A 03 
37a26     29 03 26 03 
37a2a     25 03 24 03 
37a2e     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
37a32     1F 03 70 F7 
37a36     D0 EE 27 ED 
37a3a     DB EC D4 EC 
37a3e     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
37a42     F0 EC FA EC 
37a46     02 ED F9 F4 
37a4a     7B 03 7C 03 
37a4e     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
37a52     75 03 73 03 
37a56     72 03 70 03 
37a5a     6D 03 6C 03 
37a5e     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
37a62     54 ED 22 ED 
37a66     22 ED 2C ED 
37a6a     35 ED 3F ED 
37a6e     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
37a72     14 01 C3 03 
37a76     C1 03 C0 03 
37a7a     5F 01 A5 00 
37a7e     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
37a82     7B 00 7C 00 
37a86     20 00 85 F1 
37a8a     2A EE 89 ED 
37a8e     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
37a92     80 ED 87 ED 
37a96     90 ED 9A ED 
37a9a     A3 ED 73 00 
37a9e     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
37aa2     D0 00 D0 00 
37aa6     D0 00 D0 00 
37aaa     D0 00 CF 00 
37aae     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
37ab2     80 F0 3D EE 
37ab6     D5 ED C7 ED 
37aba     CD ED D6 ED 
37abe     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
37ac2     F2 ED FA ED 
37ac6     1D 01 29 01 
37aca     27 01 27 01 
37ace     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
37ad2     25 01 26 01 
37ad6     26 01 23 01 
37ada     D0 F7 EC EF 
37ade     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
37ae2     1C EE 24 EE 
37ae6     2D EE 37 EE 
37aea     40 EE 47 EE 
37aee     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
37af2     7D 01 7B 01 
37af6     7A 01 7A 01 
37afa     79 01 78 01 
37afe     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
37b02     84 FE DE F3 
37b06     6C EF 93 EE 
37b0a     72 EE 72 EE 
37b0e     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
37b12     8B EE 95 EE 
37b16     9E EE 15 FC 
37b1a     67 FE 67 FE 
37b1e     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
37b22     6B FE 6B FE 
37b26     6D FE 6D FE 
37b2a     6D FE 6F FE 
37b2e     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
37b32     DF EE CC EE 
37b36     CF EE D9 EE 
37b3a     E1 EE EA EE 
37b3e     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
37b42     5A FE C4 FE 
37b46     C3 FE C5 FE 
37b4a     C6 FE C6 FE 
37b4e     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
37b52     C8 FE C7 FE 
37b56     DA FB 85 F1 
37b5a     8D EF 31 EF 
37b5e     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
37b62     34 EF 3E EF 
37b66     46 EF 4F EF 
37b6a     57 EF 0D FF 
37b6e     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
37b72     1F FF 1F FF 
37b76     21 FF 21 FF 
37b7a     21 FF 21 FF 
37b7e     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
37b82     15 F1 BE EF 
37b86     84 EF 7E EF 
37b8a     88 EF 8F EF 
37b8e     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
37b92     A9 EF 06 F2 
37b96     A6 FC AB FC 
37b9a     AD FC AE FC 
37b9e     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
37ba2     B2 FC B4 FC 
37ba6     B6 FC B7 FC 
37baa     8B F4 BD F0 
37bae     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
37bb2     E4 EF EE EF 
37bb6     F6 EF FD EF 
37bba     04 F0 0E F0 
37bbe     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
37bc2     0B FD 0D FD 
37bc6     0F FD 11 FD 
37bca     11 FD 13 FD 
37bce     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
37bd2     17 FD 64 F3 
37bd6     CD F0 52 F0 
37bda     41 F0 45 F0 
37bde     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
37be2     5B F0 64 F0 
37be6     6D F0 FB FC 
37bea     65 FD 68 FD 
37bee     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
37bf2     6C FD 6D FD 
37bf6     6F FD 70 FD 
37bfa     72 FD B3 FB 
37bfe     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
37c02     A4 F0 99 F0 
37c06     A0 F0 A8 F0 
37c0a     AE F0 B9 F0 
37c0e     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
37c12     CB FB DD FB 
37c16     DE FB E0 FB 
37c1a     E3 FB E3 FB 
37c1e     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
37c22     E9 FB EC FB 
37c26     62 F7 27 F2 
37c2a     2A F1 FF F0 
37c2e     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
37c32     0C F1 13 F1 
37c36     1B F1 23 F1 
37c3a     33 F2 3C FC 
37c3e     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
37c42     42 FC 45 FC 
37c46     47 FC 48 FC 
37c4a     4A FC 4C FC 
37c4e     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
37c52     20 F2 77 F1 
37c56     5C F1 5F F1 
37c5a     64 F1 6C F1 
37c5e     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
37c62     83 F1 DC F8 
37c66     9A FC 9A FC 
37c6a     9B FC 9E FC 
37c6e     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
37c72     A3 FC A4 FC 
37c76     A6 FC A9 FC 
37c7a     90 F4 33 F2 
37c7e     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
37c82     BA F1 BF F1 
37c86     C7 F1 CE F1 
37c8a     D6 F1 DC F1 
37c8e     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
37c92     F3 FC F5 FC 
37c96     FE FB 79 FB 
37c9a     62 FB 5F FB 
37c9e     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
37ca2     6F FA AF F3 
37ca6     53 F2 12 F2 
37caa     0F F2 15 F2 
37cae     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
37cb2     2A F2 32 F2 
37cb6     38 F2 9A FB 
37cba     AF FB B1 FB 
37cbe     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
37cc2     B7 FB B8 FB 
37cc6     BA FB BC FB 
37cca     C1 FB 3B F8 
37cce     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
37cd2     6E F2 6C F2 
37cd6     74 F2 7A F2 
37cda     81 F2 87 F2 
37cde     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
37ce2     06 FC 09 FC 
37ce6     0C FC 0E FC 
37cea     0F FC 12 FC 
37cee     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
37cf2     17 FC 1A FC 
37cf6     B2 F6 7B F3 
37cfa     DD F2 C5 F2 
37cfe     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
37d02     D4 F2 DB F2 
37d06     E0 F2 E8 F2 
37d0a     28 F8 60 FC 
37d0e     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
37d12     64 FC 66 FC 
37d16     68 FC 6A FC 
37d1a     6D FC 52 FC 
37d1e     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
37d22     78 F3 24 F3 
37d26     1A F3 1E F3 
37d2a     24 F3 2A F3 
37d2e     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
37d32     3D F3 80 FA 
37d36     0C FB 0F FB 
37d3a     10 FB 14 FB 
37d3e     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
37d42     1B FB 1D FB 
37d46     1F FB 92 FA 
37d4a     DE F4 AE F3 
37d4e     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
37d52     79 F3 7E F3 
37d56     84 F3 8C F3 
37d5a     92 F3 97 F3 
37d5e     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
37d62     67 FB 69 FB 
37d66     6B FB 6F FB 
37d6a     71 FB 72 FB 
37d6e     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
37d72     E3 F8 BA F4 
37d76     EE F3 CC F3 
37d7a     CA F3 CF F3 
37d7e     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
37d82     E2 F3 E8 F3 
37d86     ED F3 B7 FB 
37d8a     BC FB BE FB 
37d8e     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
37d92     C4 FB C6 FB 
37d96     C8 FB C9 FB 
37d9a     CC FB 8F F7 
37d9e     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
37da2     1E F4 1E F4 
37da6     24 F4 2A F4 
37daa     30 F4 38 F4 
37dae     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
37db2     AD FA B1 FA 
37db6     B4 FA B6 FA 
37dba     BA FA BB FA 
37dbe     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
37dc2     C2 FA C6 FA 
37dc6     55 F6 C6 F4 
37dca     7D F4 72 F4 
37dce     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
37dd2     83 F4 89 F4 
37dd6     8F F4 94 F4 
37dda     66 FA 03 FB 
37dde     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
37de2     0A FB 0E FB 
37de6     10 FB 11 FB 
37dea     16 FB 18 FB 
37dee     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
37df2     F9 F4 CA F4 
37df6     C5 F4 CB F4 
37dfa     D1 F4 D7 F4 
37dfe     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
37e02     E8 F4 3F FB 
37e06     56 FB 58 FB 
37e0a     5A FB 5E FB 
37e0e     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
37e12     64 FB 64 FB 
37e16     69 FB 99 F9 
37e1a     E9 F5 33 F5 
37e1e     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
37e22     1D F5 22 F5 
37e26     27 F5 2E F5 
37e2a     32 F5 37 F5 
37e2e     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
37e32     BC FA BC FA 
37e36     C1 FA C2 FA 
37e3a     C4 FA C8 FA 
37e3e     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
37e42     F9 F7 DB F5 
37e46     78 F5 69 F5 
37e4a     6A F5 70 F5 
37e4e     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
37e52     7F F5 85 F5 
37e56     6E F7 06 FB 
37e5a     0A FB 0B FB 
37e5e     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
37e62     14 FB 15 FB 
37e66     18 FB 1B FB 
37e6a     1D FB 70 F7 
37e6e     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
37e72     B6 F5 BB F5 
37e76     C0 F5 C6 F5 
37e7a     CA F5 CF F5 
37e7e     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
37e82     54 FB 56 FB 
37e86     5A FB 5B FB 
37e8a     5E FB 5F FB 
37e8e     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
37e92     67 FB 52 FB 
37e96     29 F7 33 F6 
37e9a     06 F6 02 F6 
37e9e     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
37ea2     10 F6 16 F6 
37ea6     1A F6 1F F6 
37eaa     81 FB 9F FB 
37eae     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
37eb2     51 FB F2 FA 
37eb6     E3 FA E3 FA 
37eba     E5 FA E9 FA 
37ebe     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
37ec2     64 F6 4D F6 
37ec6     4D F6 53 F6 
37eca     57 F6 5C F6 
37ece     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
37ed2     6A F6 19 FB 
37ed6     1E FB 22 FB 
37eda     23 FB 24 FB 
37ede     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
37ee2     2C FB 2E FB 
37ee6     32 FB F0 F8 
37eea     01 F7 A5 F6 
37eee     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
37ef2     9F F6 A3 F6 
37ef6     A6 F6 AC F6 
37efa     B0 F6 EB F7 
37efe     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
37f02     68 FB 6C FB 
37f06     6E FB 71 FB 
37f0a     72 FB 74 FB 
37f0e     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
37f12     71 F8 21 F7 
37f16     E5 F6 DD F6 
37f1a     E1 F6 E6 F6 
37f1e     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
37f22     F5 F6 F7 F6 
37f26     F7 FA AB FB 
37f2a     AD FB AF FB 
37f2e     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
37f32     B6 FB B9 FB 
37f36     BB FB BC FB 
37f3a     21 FB 07 F8 
37f3e     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
37f42     22 F7 26 F7 
37f46     2B F7 2E F7 
37f4a     34 F7 38 F7 
37f4e     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
37f52     13 FB 16 FB 
37f56     17 FB 1B FB 
37f5a     1E FB 20 FB 
37f5e     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
37f62     26 FB 77 FA 
37f66     F3 F7 7C F7 
37f6a     67 F7 6A F7 
37f6e     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
37f72     74 F7 7A F7 
37f76     7E F7 82 F7 
37f7a     53 FB 5A FB 
37f7e     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
37f82     5F FB 63 FB 
37f86     65 FB 67 FB 
37f8a     69 FB 6A FB 
37f8e     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
37f92     B5 F7 A9 F7 
37f96     AD F7 B0 F7 
37f9a     B5 F7 B8 F7 
37f9e     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
37fa2     6E F8 99 FB 
37fa6     9C FB 9D FB 
37faa     9F FB A4 FB 
37fae     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
37fb2     A9 FB AB FB 
37fb6     AD FB 46 F9 
37fba     26 F8 F0 F7 
37fbe     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
37fc2     F4 F7 F8 F7 
37fc6     FB F7 FF F7 
37fca     03 F8 65 FA 
37fce     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
37fd2     2B FB 2F FB 
37fd6     30 FB 32 FB 
37fda     34 FB 38 FB 
37fde     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
37fe2     E9 F8 4A F8 
37fe6     2E F8 2C F8 
37fea     2F F8 36 F8 
37fee     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
37ff2     41 F8 44 F8 
37ff6     4A FB 67 FB 
37ffa     68 FB 6B FB 
37ffe     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
38002     73 FB 74 FB 
38006     78 FB 7A FB 
3800a     14 FB E7 F8 
3800e     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
38012     6D F8 70 F8 
38016     73 F8 78 F8 
3801a     7C F8 80 F8 
3801e     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
38022     A6 FB A7 FB 
38026     A9 FB AC FB 
3802a     AF FB B1 FB 
3802e     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
38032     B7 FB 73 FA 
38036     F8 F8 B4 F8 
3803a     A9 F8 AB F8 
3803e     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
38042     B4 F8 B8 F8 
38046     BB F8 FA F8 
3804a     64 FB 65 FB 
3804e     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
38052     6D FB 6F FB 
38056     70 FB 74 FB 
3805a     77 FB 77 FB 
3805e     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
38062     E9 F8 E4 F8 
38066     E8 F8 EB F8 
3806a     EE F8 F2 F8 
3806e     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
38072     B5 FA 9F FB 
38076     A1 FB A4 FB 
3807a     A5 FB A9 FB 
3807e     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
38082     AE FB B1 FB 
38086     B2 FB C7 F9 
3808a     39 F9 22 F9 
3808e     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
38092     26 F9 2A F9 
38096     2E F9 32 F9 
3809a     33 F9 BA FB 
3809e     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
380a2     DE FB E1 FB 
380a6     E2 FB E4 FB 
380aa     E5 FB E7 FB 
380ae     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
380b2     C5 F9 67 F9 
380b6     57 F9 56 F9 
380ba     5B F9 5F F9 
380be     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
380c2     68 F9 6C F9 
380c6     0B FC 11 FC 
380ca     14 FC 15 FC 
380ce     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
380d2     B5 FB B5 FB 
380d6     B6 FB B8 FB 
380da     E9 FA C8 F9 
380de     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
380e2     90 F9 94 F9 
380e6     95 F9 99 F9 
380ea     9D F9 9F F9 
380ee     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
380f2     DE FB DF FB 
380f6     E2 FB E4 FB 
380fa     E6 FB E8 FB 
380fe     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
38102     EF FB AC FA 
38106     E9 F9 C7 F9 
3810a     C3 F9 C8 F9 
3810e     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
38112     D0 F9 D4 F9 
38116     D6 F9 0E FB 
3811a     11 FC 13 FC 
3811e     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
38122     19 FC 1B FC 
38126     1D FC 1E FC 
3812a     21 FC 22 FC 
3812e     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
38132     F7 F9 F7 F9 
38136     FB F9 FE F9 
3813a     00 FA 03 FA 
3813e     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
38142     1B FC 45 FC 
38146     46 FC 48 FC 
3814a     4A FC 4B FC 
3814e     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
38152     52 FC 54 FC 
38156     F3 FB 82 FA 
3815a     35 FA 28 FA 
3815e     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
38162     31 FA 32 FA 
38166     37 FA 37 FA 
3816a     3C FA 00 FC 
3816e     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
38172     09 FC 0B FC 
38176     0F FC 12 FC 
3817a     12 FC 15 FC 
3817e     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
38182     8D FA 60 FA 
38186     5B FA 5C FA 
3818a     60 FA 61 FA 
3818e     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
38192     6C FA 6D FA 
38196     37 FC 3A FC 
3819a     3B FC 3D FC 
3819e     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
381a2     43 FC 44 FC 
381a6     45 FC 47 FC 
381aa     51 FB AB FA 
381ae     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
381b2     8E FA 91 FA 
381b6     93 FA 95 FA 
381ba     98 FA 9B FA 
381be     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
381c2     68 FC 6A FC 
381c6     6C FC 6E FC 
381ca     70 FC 72 FC 
381ce     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
381d2     76 FC 3B FB 
381d6     D0 FA BB FA 
381da     B9 FA BD FA 
381de     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
381e2     C4 FA C6 FA 
381e6     CA FA 13 FC 
381ea     3A FC 3A FC 
381ee     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
381f2     41 FC 43 FC 
381f6     44 FC 47 FC 
381fa     48 FC 3C FC 
381fe     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
38202     E6 FA E8 FA 
38206     EB FA EE FA 
3820a     F0 FA F2 FA 
3820e     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
38212     61 FC 66 FC 
38216     68 FC 6B FC 
3821a     6C FC 6E FC 
3821e     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
38222     73 FC 75 FC 
38226     13 FC 3F FB 
3822a     17 FB 12 FB 
3822e     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
38232     1A FB 1D FB 
38236     1F FB 20 FB 
3823a     23 FB 92 FC 
3823e     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
38242     96 FC 97 FC 
38246     9A FC 9C FC 
3824a     9E FC 9F FC 
3824e     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
38252     5A FB 41 FB 
38256     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
3825a     73 32 00 04 
3825e     00 00 10 00 
38262     00 00 00 00 
38266     00 00 00 00 | atari2 file "atari2.s2"
3826a     43 87 43 87 
3826e     43 87 44 87 
38272     43 87 44 87 
38276     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3827a     43 87 43 87 
3827e     43 87 44 87 
38282     43 87 43 87 
38286     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3828a     44 87 43 87 
3828e     44 87 43 87 
38292     43 87 43 87 
38296     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3829a     43 87 43 87 
3829e     44 87 43 87 
382a2     44 87 44 87 
382a6     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
382aa     43 87 43 87 
382ae     44 87 43 87 
382b2     43 87 42 87 
382b6     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
382ba     43 87 43 87 
382be     43 87 43 87 
382c2     44 87 43 87 
382c6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
382ca     44 87 44 87 
382ce     43 87 44 87 
382d2     43 87 44 87 
382d6     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
382da     44 87 43 87 
382de     44 87 44 87 
382e2     43 87 43 87 
382e6     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
382ea     43 87 44 87 
382ee     44 87 43 87 
382f2     43 87 44 87 
382f6     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
382fa     43 87 43 87 
382fe     43 87 43 87 
38302     43 87 43 87 
38306     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
3830a     42 87 43 87 
3830e     44 87 42 87 
38312     43 87 43 87 
38316     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
3831a     43 87 44 87 
3831e     44 87 43 87 
38322     43 87 43 87 
38326     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3832a     43 87 5C 87 
3832e     EE 86 AC 87 
38332     4C 7C A3 78 
38336     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
3833a     BC 78 BB 78 
3833e     BD 78 BC 78 
38342     BB 78 BD 78 
38346     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
3834a     BB 78 BB 78 
3834e     BC 78 BC 78 
38352     BC 78 BB 78 
38356     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3835a     BC 78 BC 78 
3835e     BC 78 BC 78 
38362     BC 78 BC 78 
38366     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3836a     BB 78 BC 78 
3836e     A0 78 4C 7C 
38372     11 7A 29 89 
38376     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
3837a     44 87 43 87 
3837e     44 87 43 87 
38382     43 87 42 87 
38386     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3838a     43 87 43 87 
3838e     44 87 ED 85 
38392     71 85 52 79 
38396     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
3839a     BC 78 BC 78 
3839e     BC 78 BC 78 
383a2     BC 78 BC 78 
383a6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
383aa     BC 78 BC 78 
383ae     BC 78 A0 78 
383b2     CF 7A B9 81 
383b6     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
383ba     44 87 43 87 
383be     43 87 44 87 
383c2     43 87 44 87 
383c6     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
383ca     43 87 43 87 
383ce     43 87 43 87 
383d2     44 87 43 87 
383d6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
383da     43 87 43 87 
383de     44 87 43 87 
383e2     44 87 43 87 
383e6     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
383ea     44 87 43 87 
383ee     43 87 43 87 
383f2     5A 87 39 81 
383f6     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
383fa     A5 78 BC 78 
383fe     BB 78 BC 78 
38402     BB 78 BC 78 
38406     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
3840a     BC 78 BC 78 
3840e     BC 78 BC 78 
38412     BC 78 8F 79 
38416     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
3841a     09 85 47 87 
3841e     43 87 43 87 
38422     42 87 42 87 
38426     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
3842a     43 87 43 87 
3842e     43 87 43 87 
38432     43 87 44 87 
38436     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3843a     43 87 43 87 
3843e     44 87 43 87 
38442     42 87 43 87 
38446     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
3844a     44 87 43 87 
3844e     43 87 43 87 
38452     44 87 44 87 
38456     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
3845a     94 78 55 7A 
3845e     B9 78 BC 78 
38462     BC 78 BC 78 
38466     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3846a     BC 78 BB 78 
3846e     BC 78 BC 78 
38472     BC 78 BC 78 
38476     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3847a     BB 78 BC 78 
3847e     BC 78 BC 78 
38482     BB 78 BC 78 
38486     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3848a     BC 78 BC 78 
3848e     BD 78 BC 78 
38492     BC 78 BB 78 
38496     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
3849a     94 78 B3 84 
3849e     36 84 4A 87 
384a2     43 87 43 87 
384a6     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
384aa     43 87 44 87 
384ae     43 87 43 87 
384b2     43 87 43 87 
384b6     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
384ba     43 87 44 87 
384be     43 87 44 87 
384c2     43 87 43 87 
384c6     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
384ca     43 87 43 87 
384ce     43 87 45 87 
384d2     43 87 43 87 
384d6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
384da     43 87 44 87 
384de     44 87 44 87 
384e2     43 87 43 87 
384e6     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
384ea     43 87 42 87 
384ee     43 87 43 87 
384f2     44 87 43 87 
384f6     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
384fa     54 87 3C 82 
384fe     36 83 52 79 
38502     C6 78 BC 78 
38506     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
3850a     BB 78 BB 78 
3850e     BC 78 BC 78 
38512     BC 78 BC 78 
38516     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3851a     BD 78 ED 78 
3851e     1B 79 F4 83 
38522     4D 83 4E 87 
38526     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
3852a     44 87 43 87 
3852e     42 87 44 87 
38532     43 87 42 87 
38536     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
3853a     43 87 54 87 
3853e     26 82 B3 84 
38542     D6 77 BB 78 
38546     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
3854a     BC 78 BB 78 
3854e     BB 78 BB 78 
38552     BB 78 BB 78 
38556     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
3855a     BC 78 BC 78 
3855e     26 79 18 75 
38562     36 83 1F 84 
38566     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
3856a     43 87 43 87 
3856e     43 87 43 87 
38572     43 87 44 87 
38576     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3857a     43 87 44 87 
3857e     44 87 43 87 
38582     43 87 43 87 
38586     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
3858a     43 87 43 87 
3858e     43 87 43 87 
38592     44 87 44 87 
38596     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
3859a     44 87 43 87 
3859e     43 87 43 87 
385a2     43 87 44 87 
385a6     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
385aa     44 87 44 87 
385ae     44 87 43 87 
385b2     44 87 43 87 
385b6     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
385ba     43 87 43 87 
385be     43 87 44 87 
385c2     44 87 43 87 
385c6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
385ca     43 87 43 87 
385ce     43 87 43 87 
385d2     43 87 44 87 
385d6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
385da     43 87 44 87 
385de     43 87 44 87 
385e2     19 87 7D 86 
385e6     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
385ea     B1 78 BC 78 
385ee     BC 78 BC 78 
385f2     BC 78 BC 78 
385f6     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
385fa     BC 78 BC 78 
385fe     BD 78 BC 78 
38602     B7 78 3B 7B 
38606     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
3860a     96 86 44 87 
3860e     43 87 43 87 
38612     43 87 43 87 
38616     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
3861a     44 87 44 87 
3861e     43 87 44 87 
38622     43 87 44 87 
38626     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
3862a     43 87 44 87 
3862e     43 87 44 87 
38632     43 87 44 87 
38636     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3863a     43 87 44 87 
3863e     43 87 43 87 
38642     44 87 43 87 
38646     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3864a     44 87 44 87 
3864e     43 87 43 87 
38652     43 87 44 87 
38656     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3865a     43 87 43 87 
3865e     43 87 43 87 
38662     44 87 44 87 
38666     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
3866a     36 83 CF 7A 
3866e     AB 78 BB 78 
38672     BC 78 BC 78 
38676     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
3867a     BB 78 BC 78 
3867e     BC 78 BC 78 
38682     BC 78 BC 78 
38686     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3868a     BC 78 BC 78 
3868e     BC 78 BB 78 
38692     BC 78 BC 78 
38696     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3869a     BB 78 BC 78 
3869e     BB 78 BC 78 
386a2     BC 78 BD 78 
386a6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
386aa     BC 78 BC 78 
386ae     BC 78 BC 78 
386b2     BC 78 BD 78 
386b6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
386ba     BC 78 BB 78 
386be     BC 78 BB 78 
386c2     BB 78 BC 78 
386c6     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
386ca     BC 78 BC 78 
386ce     BC 78 BC 78 
386d2     BC 78 BB 78 
386d6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
386da     BC 78 BC 78 
386de     BC 78 BD 78 
386e2     BB 78 BC 78 
386e6     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
386ea     BC 78 BC 78 
386ee     BC 78 BB 78 
386f2     BC 78 BB 78 
386f6     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
386fa     BB 78 BC 78 
386fe     BC 78 BC 78 
38702     BC 78 BB 78 
38706     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3870a     BC 78 BC 78 
3870e     BC 78 BB 78 
38712     BC 78 BB 78 
38716     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3871a     BC 78 BC 78 
3871e     BC 78 BC 78 
38722     BB 78 BC 78 
38726     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3872a     BC 78 9F 78 
3872e     52 79 B3 84 
38732     2F 86 60 87 
38736     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
3873a     44 87 43 87 
3873e     43 87 43 87 
38742     43 87 43 87 
38746     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3874a     43 87 43 87 
3874e     43 87 44 87 
38752     43 87 43 87 
38756     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3875a     43 87 43 87 
3875e     43 87 43 87 
38762     43 87 44 87 
38766     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3876a     44 87 44 87 
3876e     5E 87 BC 80 
38772     FB 80 94 78 
38776     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
3877a     BD 78 BC 78 
3877e     BB 78 BC 78 
38782     BB 78 BB 78 
38786     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
3878a     BC 78 BB 78 
3878e     BB 78 6B 79 
38792     D6 77 AC 87 
38796     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
3879a     43 87 44 87 
3879e     43 87 43 87 
387a2     44 87 43 87 
387a6     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
387aa     43 87 44 87 
387ae     43 87 5C 87 
387b2     E7 80 00 80 
387b6     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
387ba     BC 78 BD 78 
387be     BC 78 BC 78 
387c2     BC 78 BB 78 
387c6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
387ca     BC 78 BC 78 
387ce     BB 78 BC 78 
387d2     BB 78 BC 78 
387d6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
387da     BB 78 BC 78 
387de     BC 78 BC 78 
387e2     BC 78 BC 78 
387e6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
387ea     BC 78 BC 78 
387ee     BC 78 BC 78 
387f2     A0 78 8D 7B 
387f6     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
387fa     60 87 43 87 
387fe     44 87 44 87 
38802     43 87 43 87 
38806     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
3880a     44 87 43 87 
3880e     43 87 43 87 
38812     44 87 73 86 
38816     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
3881a     51 7B B6 78 
3881e     BC 78 BD 78 
38822     BC 78 BC 78 
38826     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3882a     BB 78 BC 78 
3882e     BD 78 BB 78 
38832     BC 78 BB 78 
38836     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3883a     BC 78 BC 78 
3883e     BC 78 BC 78 
38842     BB 78 BC 78 
38846     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3884a     BC 78 BB 78 
3884e     BB 78 BC 78 
38852     BC 78 BB 78 
38856     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
3885a     22 8C AF 84 
3885e     48 87 43 87 
38862     44 87 43 87 
38866     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
3886a     43 87 42 87 
3886e     43 87 43 87 
38872     44 87 43 87 
38876     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3887a     43 87 43 87 
3887e     44 87 44 87 
38882     43 87 43 87 
38886     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3888a     43 87 43 87 
3888e     43 87 43 87 
38892     44 87 43 87 
38896     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
3889a     9F 8B D6 77 
3889e     16 7C B3 78 
388a2     BC 78 BB 78 
388a6     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
388aa     BB 78 BC 78 
388ae     BB 78 BC 78 
388b2     BC 78 BC 78 
388b6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
388ba     BC 78 BB 78 
388be     BB 78 BC 78 
388c2     BB 78 BC 78 
388c6     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
388ca     BB 78 BB 78 
388ce     BC 78 BC 78 
388d2     BC 78 BB 78 
388d6     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
388da     BC 78 BC 78 
388de     BC 78 BD 78 
388e2     BB 78 BC 78 
388e6     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
388ea     BC 78 BC 78 
388ee     BC 78 BB 78 
388f2     BC 78 BC 78 
388f6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
388fa     A8 78 54 7E 
388fe     F4 83 17 82 
38902     50 87 43 87 
38906     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
3890a     44 87 43 87 
3890e     44 87 43 87 
38912     43 87 44 87 
38916     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3891a     43 87 28 87 
3891e     20 85 CF 7A 
38922     70 7D AD 78 
38926     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
3892a     BB 78 BC 78 
3892e     BC 78 BC 78 
38932     BB 78 BB 78 
38936     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
3893a     BB 78 B2 78 
3893e     9A 7C CF 7A 
38942     4A 87 0D 87 
38946     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
3894a     43 87 44 87 
3894e     43 87 44 87 
38952     43 87 43 87 
38956     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
3895a     44 87 43 87 
3895e     28 87 51 85 
38962     11 7A 1E 7D 
38966     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
3896a     BC 78 BB 78 
3896e     BC 78 BC 78 
38972     BC 78 BC 78 
38976     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3897a     BB 78 BC 78 
3897e     BB 78 BC 78 
38982     BC 78 BC 78 
38986     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3898a     BB 78 BC 78 
3898e     BC 78 BC 78 
38992     BD 78 BB 78 
38996     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
3899a     BC 78 BB 78 
3899e     BC 78 BC 78 
389a2     BC 78 BB 78 
389a6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
389aa     BC 78 BC 78 
389ae     BC 78 BC 78 
389b2     BB 78 BC 78 
389b6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
389ba     BC 78 BD 78 
389be     BC 78 BC 78 
389c2     BC 78 BB 78 
389c6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
389ca     BC 78 BB 78 
389ce     BB 78 BC 78 
389d2     BC 78 BB 78 
389d6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
389da     BB 78 BB 78 
389de     BB 78 BC 78 
389e2     B6 78 48 7D 
389e6     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
389ea     56 87 43 87 
389ee     42 87 44 87 
389f2     44 87 43 87 
389f6     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
389fa     43 87 44 87 
389fe     43 87 44 87 
38a02     4C 87 7E 83 
38a06     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
38a0a     F7 78 BC 78 
38a0e     BC 78 BB 78 
38a12     BB 78 BC 78 
38a16     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
38a1a     BC 78 BB 78 
38a1e     BC 78 BC 78 
38a22     BB 78 BC 78 
38a26     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
38a2a     BB 78 BC 78 
38a2e     BC 78 BC 78 
38a32     BC 78 BB 78 
38a36     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
38a3a     BC 78 BC 78 
38a3e     BC 78 BC 78 
38a42     BC 78 BB 78 
38a46     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
38a4a     BC 78 BB 78 
38a4e     BB 78 BC 78 
38a52     BC 78 BB 78 
38a56     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
38a5a     BC 78 BC 78 
38a5e     BB 78 BC 78 
38a62     BC 78 BC 78 
38a66     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
38a6a     73 32 00 04 
38a6e     00 00 10 00 
38a72     00 00 00 00 
38a76     00 00 00 00 | atari12 file "atari12.s2"
38a7a     00 6D 00 6D 
38a7e     00 6D 00 6D 
38a82     00 6D 00 6D 
38a86     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38a8a     00 6D 00 6D 
38a8e     00 6D 00 6D 
38a92     00 6D 00 6D 
38a96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38a9a     00 6D 00 6D 
38a9e     00 6D 00 6D 
38aa2     00 6D 00 6D 
38aa6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38aaa     00 6D 00 6D 
38aae     00 6D 00 6D 
38ab2     00 6D 00 6D 
38ab6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38aba     00 6D 00 6D 
38abe     00 6D 00 6D 
38ac2     00 6D 00 6D 
38ac6     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
38aca     00 6C 00 6C 
38ace     00 6C 00 6C 
38ad2     00 6C 00 6C 
38ad6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38ada     00 6C 00 6C 
38ade     00 6C 00 6C 
38ae2     00 6C 00 6C 
38ae6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38aea     00 6C 00 6C 
38aee     00 6C 00 6C 
38af2     00 6C 00 6C 
38af6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38afa     00 6C 00 6C 
38afe     00 6C 00 6C 
38b02     00 6C 00 6C 
38b06     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38b0a     00 6C 00 6C 
38b0e     00 6C 00 6C 
38b12     00 6C 00 6C 
38b16     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38b1a     00 6C 00 6C 
38b1e     00 6C 00 6C 
38b22     00 6C 00 6C 
38b26     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38b2a     00 6C 00 6C 
38b2e     00 6C 00 6C 
38b32     00 6C 00 6C 
38b36     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38b3a     00 6C 00 6C 
38b3e     00 6C 00 6C 
38b42     00 6C 00 6C 
38b46     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38b4a     00 6C 00 6C 
38b4e     00 6C 00 6C 
38b52     00 6C 00 6C 
38b56     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38b5a     00 6C 00 6C 
38b5e     00 6C 00 6C 
38b62     00 6C 00 6C 
38b66     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38b6a     00 6C 00 6C 
38b6e     00 6C 00 6C 
38b72     00 6C 00 6C 
38b76     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38b7a     00 6C 00 6B 
38b7e     00 6B 00 6B 
38b82     00 6B 00 6B 
38b86     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38b8a     00 6B 00 6B 
38b8e     00 6B 00 6B 
38b92     00 6B 00 6B 
38b96     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38b9a     00 6B 00 6B 
38b9e     00 6B 00 6B 
38ba2     00 6B 00 6B 
38ba6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38baa     00 6B 00 6B 
38bae     00 6B 00 6B 
38bb2     00 6B 00 6B 
38bb6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38bba     00 6B 00 6B 
38bbe     00 6B 00 6B 
38bc2     00 6B 00 6B 
38bc6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38bca     00 6B 00 6B 
38bce     00 6B 00 6B 
38bd2     00 6B 00 6B 
38bd6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38bda     00 6B 00 6B 
38bde     00 6B 00 6B 
38be2     00 6B 00 6B 
38be6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38bea     00 6B 00 6B 
38bee     00 6B 00 6B 
38bf2     00 6B 00 6B 
38bf6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38bfa     00 6B 00 6B 
38bfe     00 6B 00 6B 
38c02     00 6B 00 6B 
38c06     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38c0a     00 6B 00 6B 
38c0e     00 6B 00 6B 
38c12     00 6A 00 9D 
38c16     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
38c1a     00 9E 00 9E 
38c1e     00 9E 00 9E 
38c22     00 9E 00 9E 
38c26     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38c2a     00 9E 00 9E 
38c2e     00 9E 00 9E 
38c32     00 9E 00 9E 
38c36     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38c3a     00 9E 00 9E 
38c3e     00 9E 00 9E 
38c42     00 9E 00 9E 
38c46     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38c4a     00 9E 00 9E 
38c4e     00 9E 00 9E 
38c52     00 9E 00 9E 
38c56     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38c5a     00 9E 00 9E 
38c5e     00 9E 00 9E 
38c62     00 9E 00 9E 
38c66     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38c6a     00 9E 00 9E 
38c6e     00 9E 00 9E 
38c72     00 9E 00 9E 
38c76     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38c7a     00 9E 00 9E 
38c7e     00 9E 00 9E 
38c82     00 9E 00 9E 
38c86     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38c8a     00 9E 00 9E 
38c8e     00 9E 00 9E 
38c92     00 9E 00 9E 
38c96     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38c9a     00 9E 00 9E 
38c9e     00 9E 00 9E 
38ca2     00 9E 00 9E 
38ca6     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
38caa     00 9F 00 9F 
38cae     00 9F 00 9F 
38cb2     00 9F 00 9F 
38cb6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38cba     00 9F 00 9F 
38cbe     00 9F 00 9F 
38cc2     00 9F 00 9F 
38cc6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38cca     00 9F 00 9F 
38cce     00 9F 00 9F 
38cd2     00 9F 00 9F 
38cd6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38cda     00 9F 00 9F 
38cde     00 9F 00 9F 
38ce2     00 9F 00 9F 
38ce6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38cea     00 9F 00 9F 
38cee     00 9F 00 9F 
38cf2     00 9F 00 9F 
38cf6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38cfa     00 9F 00 9F 
38cfe     00 9F 00 9F 
38d02     00 9F 00 9F 
38d06     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38d0a     00 9F 00 9F 
38d0e     00 9F 00 9F 
38d12     00 9F 00 9F 
38d16     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38d1a     00 9F 00 9F 
38d1e     00 9F 00 9F 
38d22     00 9F 00 9F 
38d26     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38d2a     00 9F 00 9F 
38d2e     00 9F 00 9F 
38d32     00 9F 00 9F 
38d36     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38d3a     00 9F 00 9F 
38d3e     00 9F 00 9F 
38d42     00 9F 00 9F 
38d46     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38d4a     00 9F 00 9F 
38d4e     00 9F 00 9F 
38d52     00 9F 00 9F 
38d56     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38d5a     00 9F 00 9F 
38d5e     00 9F 00 9F 
38d62     00 9F 00 9F 
38d66     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38d6a     00 9F 00 9F 
38d6e     00 9F 00 A0 
38d72     00 A0 00 A0 
38d76     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38d7a     00 A0 00 A0 
38d7e     00 A0 00 A0 
38d82     00 A0 00 A0 
38d86     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38d8a     00 A0 00 A0 
38d8e     00 A0 00 A0 
38d92     00 A0 00 A0 
38d96     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38d9a     00 A0 00 A0 
38d9e     00 A0 00 A0 
38da2     00 A0 00 A0 
38da6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38daa     00 A0 00 A0 
38dae     00 A0 00 A0 
38db2     00 A0 00 A0 
38db6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38dba     00 A0 00 A0 
38dbe     00 A0 00 A0 
38dc2     00 A0 00 A0 
38dc6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38dca     00 A0 00 A0 
38dce     00 A0 00 A0 
38dd2     00 A0 00 A0 
38dd6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38dda     00 A0 00 A0 
38dde     00 A0 00 A0 
38de2     00 A0 00 A0 
38de6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38dea     00 A0 00 A0 
38dee     00 A0 00 A0 
38df2     00 A0 00 A0 
38df6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38dfa     00 A0 00 A0 
38dfe     00 A0 00 A0 
38e02     00 A0 00 A0 
38e06     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38e0a     00 A0 00 A0 
38e0e     00 A0 00 A0 
38e12     00 A0 00 A0 
38e16     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38e1a     00 A0 00 A0 
38e1e     00 A0 00 A0 
38e22     00 A0 00 A0 
38e26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38e2a     00 A0 00 A0 
38e2e     00 A0 00 A0 
38e32     00 A0 00 A0 
38e36     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
38e3a     00 6D 00 6D 
38e3e     00 6D 00 6D 
38e42     00 6D 00 6D 
38e46     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38e4a     00 6D 00 6D 
38e4e     00 6D 00 6D 
38e52     00 6D 00 6D 
38e56     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38e5a     00 6D 00 6D 
38e5e     00 6D 00 6D 
38e62     00 6D 00 6D 
38e66     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38e6a     00 6D 00 6D 
38e6e     00 6D 00 6D 
38e72     00 6D 00 6D 
38e76     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38e7a     00 6D 00 6D 
38e7e     00 6D 00 6D 
38e82     00 6D 00 6D 
38e86     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38e8a     00 6D 00 6D 
38e8e     00 6D 00 6D 
38e92     00 6D 00 6D 
38e96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38e9a     00 6D 00 6D 
38e9e     00 6D 00 6D 
38ea2     00 6D 00 6D 
38ea6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38eaa     00 6D 00 6D 
38eae     00 6D 00 6D 
38eb2     00 6D 00 6D 
38eb6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38eba     00 6D 00 6D 
38ebe     00 A0 00 A0 
38ec2     00 A0 00 A0 
38ec6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38eca     00 A0 00 A0 
38ece     00 A0 00 A0 
38ed2     00 A0 00 A0 
38ed6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38eda     00 A0 00 A0 
38ede     00 A0 00 A0 
38ee2     00 A0 00 A0 
38ee6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38eea     00 A0 00 A0 
38eee     00 A0 00 A0 
38ef2     00 A0 00 A0 
38ef6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38efa     00 A0 00 A0 
38efe     00 A0 00 A0 
38f02     00 A0 00 A0 
38f06     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38f0a     00 A0 00 A0 
38f0e     00 A0 00 A0 
38f12     00 A0 00 A0 
38f16     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38f1a     00 A0 00 A0 
38f1e     00 A0 00 A0 
38f22     00 A0 00 A0 
38f26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38f2a     00 A0 00 A0 
38f2e     00 A0 00 A0 
38f32     00 A0 00 A0 
38f36     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38f3a     00 A0 00 A0 
38f3e     00 A0 00 A0 
38f42     00 A0 00 A0 
38f46     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
38f4a     00 6D 00 6D 
38f4e     00 6D 00 6D 
38f52     00 6D 00 6D 
38f56     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38f5a     00 6D 00 6D 
38f5e     00 6D 00 6D 
38f62     00 6D 00 6D 
38f66     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38f6a     00 6D 00 6D 
38f6e     00 6D 00 6D 
38f72     00 6D 00 6D 
38f76     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38f7a     00 6D 00 6D 
38f7e     00 6D 00 6D 
38f82     00 6D 00 6D 
38f86     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38f8a     00 6D 00 6D 
38f8e     00 6D 00 6D 
38f92     00 6D 00 6D 
38f96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38f9a     00 6D 00 6D 
38f9e     00 6D 00 6D 
38fa2     00 6D 00 6D 
38fa6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38faa     00 6D 00 6D 
38fae     00 6D 00 6D 
38fb2     00 6D 00 6D 
38fb6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38fba     00 6D 00 6D 
38fbe     00 6D 00 6D 
38fc2     00 6D 00 6D 
38fc6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38fca     00 6D 00 6D 
38fce     00 6C 00 A0 
38fd2     00 9F 00 A0 
38fd6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
38fda     00 A0 00 A0 
38fde     00 A0 00 A0 
38fe2     00 A0 00 A0 
38fe6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38fea     00 A0 00 A0 
38fee     00 A0 00 A0 
38ff2     00 A0 00 A0 
38ff6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38ffa     00 A0 00 A0 
38ffe     00 A0 00 A0 
39002     00 A0 00 A0 
39006     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3900a     00 A0 00 A0 
3900e     00 A0 00 A0 
39012     00 A0 00 A0 
39016     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3901a     00 A0 00 A0 
3901e     00 A0 00 A0 
39022     00 A0 00 A0 
39026     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3902a     00 A0 00 A0 
3902e     00 A0 00 A0 
39032     00 A0 00 A0 
39036     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3903a     00 A0 00 A0 
3903e     00 A0 00 A0 
39042     00 A0 00 A0 
39046     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3904a     00 A0 00 A0 
3904e     00 A0 00 A0 
39052     00 A0 00 A0 
39056     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3905a     00 A0 00 A0 
3905e     00 A0 00 A0 
39062     00 A0 00 A0 
39066     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3906a     00 A0 00 A0 
3906e     00 A0 00 A0 
39072     00 A0 00 A0 
39076     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3907a     00 A0 00 A0 
3907e     00 A0 00 A0 
39082     00 A0 00 A0 
39086     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3908a     00 A1 00 A1 
3908e     00 A1 00 A1 
39092     00 A1 00 A1 
39096     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3909a     00 A1 00 A1 
3909e     00 A1 00 A1 
390a2     00 A1 00 A1 
390a6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
390aa     00 A1 00 A1 
390ae     00 A1 00 A1 
390b2     00 A1 00 A1 
390b6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
390ba     00 A1 00 A1 
390be     00 A1 00 A1 
390c2     00 A1 00 A1 
390c6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
390ca     00 A1 00 A1 
390ce     00 A1 00 A1 
390d2     00 A1 00 A1 
390d6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
390da     00 A1 00 A1 
390de     00 A1 00 A1 
390e2     00 6E 00 6E 
390e6     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
390ea     00 6E 00 6E 
390ee     00 6E 00 6E 
390f2     00 6E 00 6E 
390f6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
390fa     00 6E 00 6E 
390fe     00 6E 00 6E 
39102     00 6E 00 6E 
39106     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3910a     00 6E 00 6E 
3910e     00 6E 00 6E 
39112     00 6E 00 6E 
39116     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3911a     00 6E 00 6D 
3911e     00 6D 00 6D 
39122     00 6D 00 6D 
39126     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3912a     00 6D 00 6D 
3912e     00 6D 00 6D 
39132     00 6D 00 6D 
39136     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3913a     00 6D 00 6D 
3913e     00 6D 00 6D 
39142     00 6D 00 6D 
39146     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3914a     00 6D 00 6D 
3914e     00 6D 00 6D 
39152     00 6D 00 6D 
39156     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3915a     00 6D 00 6D 
3915e     00 6D 00 6D 
39162     00 6D 00 6D 
39166     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3916a     00 6D 00 6D 
3916e     00 6D 00 6D 
39172     00 6D 00 6D 
39176     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3917a     00 6D 00 6D 
3917e     00 6D 00 6D 
39182     00 6D 00 6D 
39186     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3918a     00 6D 00 6D 
3918e     00 6D 00 6D 
39192     00 6D 00 6D 
39196     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3919a     00 6D 00 6D 
3919e     00 6D 00 6D 
391a2     00 6D 00 6D 
391a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
391aa     00 6D 00 6D 
391ae     00 6D 00 6D 
391b2     00 6D 00 6D 
391b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
391ba     00 6D 00 6D 
391be     00 6D 00 6D 
391c2     00 6D 00 6D 
391c6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
391ca     00 6D 00 6D 
391ce     00 6C 00 6C 
391d2     00 6C 00 6C 
391d6     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
391da     00 6C 00 6C 
391de     00 6C 00 6C 
391e2     00 6C 00 6C 
391e6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
391ea     00 6C 00 6C 
391ee     00 6C 00 6C 
391f2     00 9D 00 9F 
391f6     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
391fa     00 9F 00 9F 
391fe     00 9F 00 9F 
39202     00 A0 00 A0 
39206     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3920a     00 A0 00 A0 
3920e     00 A0 00 A0 
39212     00 A0 00 A0 
39216     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3921a     00 A0 00 A0 
3921e     00 A0 00 A0 
39222     00 A0 00 A0 
39226     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3922a     00 A0 00 A0 
3922e     00 A0 00 A0 
39232     00 A0 00 A0 
39236     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3923a     00 A0 00 A0 
3923e     00 A0 00 A0 
39242     00 A0 00 A0 
39246     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3924a     00 A0 00 A0 
3924e     00 A0 00 A0 
39252     00 A0 00 A0 
39256     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3925a     00 A0 00 A0 
3925e     00 A0 00 A0 
39262     00 A0 00 A0 
39266     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3926a     00 A0 00 A0 
3926e     00 A0 00 A0 
39272     00 A0 00 A0 
39276     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3927a     01 00 00 00 
3927e     00 00 00 00 
39282     00 00 00 00 
39286     00 00 00 00 | mouse  file "mouse2.def"
3928a     00 00 00 00 
3928e     00 00 00 00 
39292     00 00 00 00 
39296     00 00 00 00 | 	byte	$00[16]
3929a     01 01 00 00 
3929e     00 00 00 00 
392a2     00 00 00 00 
392a6     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
392aa     00 00 00 00 
392ae     00 00 00 00 
392b2     00 00 00 00 
392b6     00 00 00 00 | 	byte	$00[16]
392ba     01 0D 01 00 
392be     00 00 00 00 
392c2     00 00 00 00 
392c6     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
392ca     00 00 00 00 
392ce     00 00 00 00 
392d2     00 00 00 00 
392d6     00 00 00 00 | 	byte	$00[16]
392da     01 0D 0D 01 
392de     00 00 00 00 
392e2     00 00 00 00 
392e6     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
392ea     00 00 00 00 
392ee     00 00 00 00 
392f2     00 00 00 00 
392f6     00 00 00 00 | 	byte	$00[16]
392fa     01 0D 0D 0D 
392fe     01 00 00 00 
39302     00 00 00 00 
39306     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3930a     00 00 00 00 
3930e     00 00 00 00 
39312     00 00 00 00 
39316     00 00 00 00 | 	byte	$00[16]
3931a     01 0D 0D 0D 
3931e     0D 01 00 00 
39322     00 00 00 00 
39326     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3932a     00 00 00 00 
3932e     00 00 00 00 
39332     00 00 00 00 
39336     00 00 00 00 | 	byte	$00[16]
3933a     01 0D 0D 0D 
3933e     0D 0D 01 00 
39342     00 00 00 00 
39346     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3934a     00 00 00 00 
3934e     00 00 00 00 
39352     00 00 00 00 
39356     00 00 00 00 | 	byte	$00[16]
3935a     01 0D 0D 0D 
3935e     0D 0D 0D 01 
39362     00 00 00 00 
39366     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3936a     00 00 00 00 
3936e     00 00 00 00 
39372     00 00 00 00 
39376     00 00 00 00 | 	byte	$00[16]
3937a     01 0D 0D 0D 
3937e     0D 0D 0D 0C 
39382     01 00 00 00 
39386     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3938a     00 00 00 00 
3938e     00 00 00 00 
39392     00 00 00 00 
39396     00 00 00 00 | 	byte	$00[16]
3939a     01 0D 0D 0D 
3939e     0D 0D 0D 0D 
393a2     0C 01 00 00 
393a6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
393aa     00 00 00 00 
393ae     00 00 00 00 
393b2     00 00 00 00 
393b6     00 00 00 00 | 	byte	$00[16]
393ba     01 0D 0D 0D 
393be     0D 0D 0D 0D 
393c2     0D 0C 01 00 
393c6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
393ca     00 00 00 00 
393ce     00 00 00 00 
393d2     00 00 00 00 
393d6     00 00 00 00 | 	byte	$00[16]
393da     01 0D 0D 0D 
393de     0D 0D 0D 0D 
393e2     0D 0D 0B 01 
393e6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
393ea     00 00 00 00 
393ee     00 00 00 00 
393f2     00 00 00 00 
393f6     00 00 00 00 | 	byte	$00[16]
393fa     01 0D 0D 0D 
393fe     0C 0D 0D 03 
39402     01 01 01 01 
39406     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
3940a     00 00 00 00 
3940e     00 00 00 00 
39412     00 00 00 00 
39416     00 00 00 00 | 	byte	$00[16]
3941a     01 0D 0D 0C 
3941e     01 09 0D 03 
39422     00 00 00 00 
39426     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3942a     00 00 00 00 
3942e     00 00 00 00 
39432     00 00 00 00 
39436     00 00 00 00 | 	byte	$00[16]
3943a     01 0D 0C 01 
3943e     00 01 0D 0B 
39442     01 00 00 00 
39446     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3944a     00 00 00 00 
3944e     00 00 00 00 
39452     00 00 00 00 
39456     00 00 00 00 | 	byte	$00[16]
3945a     01 0C 01 00 
3945e     00 01 0A 0D 
39462     01 00 00 00 
39466     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3946a     00 00 00 00 
3946e     00 00 00 00 
39472     00 00 00 00 
39476     00 00 00 00 | 	byte	$00[16]
3947a     01 01 00 00 
3947e     00 00 01 0D 
39482     0B 01 00 00 
39486     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3948a     00 00 00 00 
3948e     00 00 00 00 
39492     00 00 00 00 
39496     00 00 00 00 
3949a     00 00 00 00 
3949e     00 00       | 	byte	$00[22]
394a0     01 0B 0D 01 
394a4     00 00 00 00 
394a8     00 00 00 00 
394ac     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
394b0     00 00 00 00 
394b4     00 00 00 00 
394b8     00 00 00 00 
394bc     00 00 00 00 
394c0     00          | 	byte	$00[17]
394c1     01 01 00 00 
394c5     00 00 00 00 
394c9     00 00 00 00 
394cd     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
394d1     00 00 00 00 
      ...             
39675     00 00 00 00 
39679     00          | 	byte	$00[425]
3967a                 | 
3967a     00 00       |              	org
3967c 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
39680 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
39684 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
39688 003             | 
39688 003 00 30 04 F6 |                 mov     psramaddr,#0
3968c 004             | 
3968c 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
39690 005 20 00 00 FF 
39694 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
39698 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
3969c 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
396a0 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
396a4 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
396a8 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
396ac 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
396b0 00d             | 
396b0 00d 20 00 00 FF 
396b4 00e 00 30 04 F1 |                 add 	psramaddr,##16384
396b8 00f E0 03 00 FF 
396bc 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
396c0 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
396c4 012             | 
396c4 012             |                 
396c4 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
396c8 013             |     
396c8 013 01 2C 60 FD |                 cogid 	t11				' get id
396cc 014 00 00 EC FC |                 coginit #0,#0				' start the new program
396d0 015 03 2C 60 FD |                 cogstop t11				' stop the loader
396d4 016             | 
396d4 016 00 00 00 00 | t11 		long 	0
396d8 017 00 FF 07 00 | mailbox 	long 	$7FF00
396dc 018 00 00 00 00 | psramaddr 	long 	0
396e0 019 00 00 00 00 | pslockval	long 	0
396e4 01a 00 00 00 00 | cmd             long    0
396e8 01b 00 00 00 00 | buf1            long    0
396ec 01c 00 40 00 00 | buf2            long    16384
396f0 01d F4 96 03 00 | 	long	@@@_dat_ + 12612
396f4 01e 50 32 20 52 
396f8 01f 65 74 72 6F 
396fc 020 6D 61 63 68 
39700 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
39704 022 42 41 53 49 
39708 023 43 20 76 65 
3970c 024 72 73 69 6F 
39710 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
39714 026 33 33 00 00 | 	byte	$33, $33, $00, $00
39718 027             | 	alignl
39718 027             | _hg010b_spin2_dat_
39718 027             | 
39718 027 00 00 00 00 
3971c 028 00 00 00 00 
39720 029 00 00 00 00 
39724 02a 00 00 00 00 
39728 02b 00 00 00    | vga_font       file "vgafont.def"
3972b 02b 7E 81 A5 81 
3972f 02c 81 BD 99 81 
39733 02d 81 7E 00 00 
39737 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3973b 02f 7E FF DB FF 
3973f 030 FF C3 E7 FF 
39743 031 FF 7E 00 00 
39747 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3974b 033 00 36 7F 7F 
3974f 034 7F 7F 3E 1C 
39753 035 08 00 00 00 
39757 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3975b 037 00 08 1C 3E 
3975f 038 7F 3E 1C 08 
39763 039 00 00 00 00 
39767 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3976b 03b 18 3C 3C E7 
3976f 03c E7 E7 18 18 
39773 03d 3C 00 00 00 
39777 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3977b 03f 18 3C 7E FF 
3977f 040 FF 7E 18 18 
39783 041 3C 00 00 00 
39787 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3978b 043 00 00 00 18 
3978f 044 3C 3C 18 00 
39793 045 00 00 00 00 
39797 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3979b 047 FF FF FF E7 
3979f 048 C3 C3 E7 FF 
397a3 049 FF FF FF FF 
397a7 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
397ab 04b 00 00 3C 66 
397af 04c 42 42 66 3C 
397b3 04d 00 00 00 00 
397b7 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
397bb 04f FF FF C3 99 
397bf 050 BD BD 99 C3 
397c3 051 FF FF FF FF 
397c7 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
397cb 053 78 70 58 4C 
397cf 054 1E 33 33 33 
397d3 055 33 1E 00 00 
397d7 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
397db 057 3C 66 66 66 
397df 058 66 3C 18 7E 
397e3 059 18 18 00 00 
397e7 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
397eb 05b FC CC FC 0C 
397ef 05c 0C 0C 0C 0E 
397f3 05d 0F 07 00 00 
397f7 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
397fb 05f FE C6 FE C6 
397ff 060 C6 C6 C6 E6 
39803 061 E7 67 03 00 
39807 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3980b 063 18 18 DB 3C 
3980f 064 E7 3C DB 18 
39813 065 18 00 00 00 
39817 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3981b 067 03 07 0F 1F 
3981f 068 7F 1F 0F 07 
39823 069 03 01 00 00 
39827 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3982b 06b 60 70 78 7C 
3982f 06c 7F 7C 78 70 
39833 06d 60 40 00 00 
39837 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3983b 06f 18 3C 7E 18 
3983f 070 18 18 7E 3C 
39843 071 18 00 00 00 
39847 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3984b 073 66 66 66 66 
3984f 074 66 66 66    | 	byte	$66[7]
39852 075 00 66 66 00 
39856 076 00 00 00 00 
3985a 077 00 FE DB DB 
3985e 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
39862 079 D8 D8 D8 00 
39866 07a 00 00 00 3E 
3986a 07b 63 06 1C 36 
3986e 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
39872 07d 30 63 3E 00 
39876 07e 00 00 00 00 
3987a 07f 00 00 00 00 
3987e 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
39882 081 7F 7F 7F 00 
39886 082 00 00 00 00 
3988a 083 00 18 3C 7E 
3988e 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
39892 085 3C 18 7E 00 
39896 086 00 00 00 00 
3989a 087 00 18 3C 7E 
3989e 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
398a2 089 18 18 18 00 
398a6 08a 00 00 00 00 
398aa 08b 00 18 18 18 
398ae 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
398b2 08d 7E 3C 18 00 
398b6 08e 00 00 00 00 
398ba 08f 00 00 00 18 
398be 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
398c2 091 00 00 00 00 
398c6 092 00 00 00 00 
398ca 093 00 00 00    | 	byte	$00[11]
398cd 094 0C 06 7F 06 
398d1 095 0C 00 00 00 
398d5 096 00 00 00 00 
398d9 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
398dd 098 00 03 03 03 
398e1 099 7F 00 00 00 
398e5 09a 00 00 00 00 
398e9 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
398ed 09c 14 36 7F 36 
398f1 09d 14 00 00 00 
398f5 09e 00 00 00 00 
398f9 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
398fd 0a0 1C 1C 3E 3E 
39901 0a1 7F 7F 00 00 
39905 0a2 00 00 00 00 
39909 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3990d 0a4 7F 3E 3E 1C 
39911 0a5 1C 08 00 00 
39915 0a6 00 00 00 00 
39919 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3991d 0a8 00 00 00 00 
39921 0a9 00 00 00 00 
39925 0aa 00 00 00 00 
39929 0ab 00 00       | 	byte	$00[14]
3992b 0ab 18 3C 3C 3C 
3992f 0ac 18 18 18 00 
39933 0ad 18 18 00 00 
39937 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3993b 0af 66 24 00 00 
3993f 0b0 00 00 00 00 
39943 0b1 00 00 00 00 
39947 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3994b 0b3 00 36 36 7F 
3994f 0b4 36 36 36 7F 
39953 0b5 36 36 00 00 
39957 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3995b 0b7 3E 63 43 03 
3995f 0b8 3E 60 60 61 
39963 0b9 63 3E 18 18 
39967 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3996b 0bb 00 00 43 63 
3996f 0bc 30 18 0C 06 
39973 0bd 63 61 00 00 
39977 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3997b 0bf 1C 36 36 1C 
3997f 0c0 6E 3B 33 33 
39983 0c1 33 6E 00 00 
39987 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3998b 0c3 0C 0C 0C 06 
3998f 0c4 00 00 00 00 
39993 0c5 00 00 00 00 
39997 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3999b 0c7 30 18 0C 0C 
3999f 0c8 0C 0C 0C 0C 
399a3 0c9 18 30 00 00 
399a7 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
399ab 0cb 0C 18 30 30 
399af 0cc 30 30 30 30 
399b3 0cd 18 0C 00 00 
399b7 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
399bb 0cf 00 00 00 66 
399bf 0d0 3C FF 3C 66 
399c3 0d1 00 00 00 00 
399c7 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
399cb 0d3 00 00 00 18 
399cf 0d4 18 7E 18 18 
399d3 0d5 00 00 00 00 
399d7 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
399db 0d7 00 00 00 00 
399df 0d8 00 00 00 00 | 	byte	$00[8]
399e3 0d9 18 18 18 0C 
399e7 0da 00 00 00 00 
399eb 0db 00 00 00 00 
399ef 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
399f3 0dd 00 00 00 00 
399f7 0de 00 00 00 00 
399fb 0df 00 00 00 00 
399ff 0e0 00 00 00 00 | 	byte	$00[16]
39a03 0e1 18 18 00 00 
39a07 0e2 00 00 00 00 
39a0b 0e3 00 00 40 60 
39a0f 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
39a13 0e5 03 01 00 00 
39a17 0e6 00 00 00 00 
39a1b 0e7 1C 36 63 63 
39a1f 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
39a23 0e9 36 1C 00 00 
39a27 0ea 00 00 00 00 
39a2b 0eb 18 1C 1E 18 
39a2f 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
39a33 0ed 18 7E 00 00 
39a37 0ee 00 00 00 00 
39a3b 0ef 3E 63 60 30 
39a3f 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
39a43 0f1 63 7F 00 00 
39a47 0f2 00 00 00 00 
39a4b 0f3 3E 63 60 60 
39a4f 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
39a53 0f5 63 3E 00 00 
39a57 0f6 00 00 00 00 
39a5b 0f7 30 38 3C 36 
39a5f 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
39a63 0f9 30 78 00 00 
39a67 0fa 00 00 00 00 
39a6b 0fb 7F 03 03 03 
39a6f 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
39a73 0fd 63 3E 00 00 
39a77 0fe 00 00 00 00 
39a7b 0ff 1C 06 03 03 
39a7f 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
39a83 101 63 3E 00 00 
39a87 102 00 00 00 00 
39a8b 103 7F 63 60 60 
39a8f 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
39a93 105 0C 0C 00 00 
39a97 106 00 00 00 00 
39a9b 107 3E 63 63 63 
39a9f 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
39aa3 109 63 3E 00 00 
39aa7 10a 00 00 00 00 
39aab 10b 3E 63 63 63 
39aaf 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
39ab3 10d 30 1E 00 00 
39ab7 10e 00 00 00 00 
39abb 10f 00 00 00 18 
39abf 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
39ac3 111 18 18 00 00 
39ac7 112 00 00 00 00 
39acb 113 00 00 00 18 
39acf 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
39ad3 115 18 18 0C 00 
39ad7 116 00 00 00 00 
39adb 117 00 60 30 18 
39adf 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
39ae3 119 30 60 00 00 
39ae7 11a 00 00 00 00 
39aeb 11b 00 00 00 7E 
39aef 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
39af3 11d 00 00 00 00 
39af7 11e 00 00 00 00 
39afb 11f 00          | 	byte	$00[9]
39afc 120 06 0C 18 30 
39b00 121 60 30 18 0C 
39b04 122 06 00 00 00 
39b08 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
39b0c 124 63 63 30 18 
39b10 125 18 18 00 18 
39b14 126 18 00 00 00 
39b18 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
39b1c 128 3E 63 63 7B 
39b20 129 7B 7B 3B 03 
39b24 12a 3E 00 00 00 
39b28 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
39b2c 12c 1C 36 63 63 
39b30 12d 7F 63 63 63 
39b34 12e 63 00 00 00 
39b38 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
39b3c 130 66 66 66 3E 
39b40 131 66 66 66 66 
39b44 132 3F 00 00 00 
39b48 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
39b4c 134 66 43 03 03 
39b50 135 03 03 43 66 
39b54 136 3C 00 00 00 
39b58 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
39b5c 138 36 66 66 66 
39b60 139 66 66 66 36 
39b64 13a 1F 00 00 00 
39b68 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
39b6c 13c 66 46 16 1E 
39b70 13d 16 06 46 66 
39b74 13e 7F 00 00 00 
39b78 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
39b7c 140 66 46 16 1E 
39b80 141 16 06 06 06 
39b84 142 0F 00 00 00 
39b88 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
39b8c 144 66 43 03 03 
39b90 145 7B 63 63 66 
39b94 146 5C 00 00 00 
39b98 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
39b9c 148 63 63 63 7F 
39ba0 149 63 63 63 63 
39ba4 14a 63 00 00 00 
39ba8 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
39bac 14c 18 18 18 18 
39bb0 14d 18 18 18 18 | 	byte	$18[8]
39bb4 14e 3C 00 00 00 
39bb8 14f 00 00 00 78 
39bbc 150 30 30 30 30 
39bc0 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
39bc4 152 1E 00 00 00 
39bc8 153 00 00 00 67 
39bcc 154 66 66 36 1E 
39bd0 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
39bd4 156 67 00 00 00 
39bd8 157 00 00 00 0F 
39bdc 158 06 06 06 06 
39be0 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
39be4 15a 7F 00 00 00 
39be8 15b 00 00 00 63 
39bec 15c 77 7F 7F 6B 
39bf0 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
39bf4 15e 63 00 00 00 
39bf8 15f 00 00 00 63 
39bfc 160 67 6F 7F 7B 
39c00 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
39c04 162 63 00 00 00 
39c08 163 00 00 00 3E 
39c0c 164 63 63 63 63 
39c10 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
39c14 166 3E 00 00 00 
39c18 167 00 00 00 3F 
39c1c 168 66 66 66 3E 
39c20 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
39c24 16a 0F 00 00 00 
39c28 16b 00 00 00 3E 
39c2c 16c 63 63 63 63 
39c30 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
39c34 16e 3E 30 70 00 
39c38 16f 00 00 00 3F 
39c3c 170 66 66 66 3E 
39c40 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
39c44 172 67 00 00 00 
39c48 173 00 00 00 3E 
39c4c 174 63 63 06 1C 
39c50 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
39c54 176 3E 00 00 00 
39c58 177 00 00 00 7E 
39c5c 178 7E 5A 18 18 
39c60 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
39c64 17a 3C 00 00 00 
39c68 17b 00 00 00 63 
39c6c 17c 63 63 63 63 
39c70 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
39c74 17e 3E 00 00 00 
39c78 17f 00 00 00 63 
39c7c 180 63 63 63 63 
39c80 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
39c84 182 08 00 00 00 
39c88 183 00 00 00 63 
39c8c 184 63 63 63 6B 
39c90 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
39c94 186 36 00 00 00 
39c98 187 00 00 00 63 
39c9c 188 63 36 3E 1C 
39ca0 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
39ca4 18a 63 00 00 00 
39ca8 18b 00 00 00 66 
39cac 18c 66 66 66 3C 
39cb0 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
39cb4 18e 3C 00 00 00 
39cb8 18f 00 00 00 7F 
39cbc 190 63 61 30 18 
39cc0 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
39cc4 192 7F 00 00 00 
39cc8 193 00 00 00 3C 
39ccc 194 0C 0C 0C 0C 
39cd0 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
39cd4 196 3C 00 00 00 
39cd8 197 00 00 00 00 
39cdc 198 01 03 07 0E 
39ce0 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
39ce4 19a 40 00 00 00 
39ce8 19b 00 00 00 3C 
39cec 19c 30 30 30 30 
39cf0 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
39cf4 19e 3C 00 00 00 
39cf8 19f 1C 36 00 00 
39cfc 1a0 00 00 00 00 
39d00 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39d04 1a2 00 00 00 00 
39d08 1a3 00 00 00 00 
39d0c 1a4 00 00 00 00 
39d10 1a5 00 00 00 00 
39d14 1a6 00          | 	byte	$00[17]
39d15 1a6 FF 00 00 0C 
39d19 1a7 18 00 00 00 
39d1d 1a8 00 00 00 00 
39d21 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39d25 1aa 00 00 00 00 
39d29 1ab 00 00 00 00 
39d2d 1ac 00          | 	byte	$00[9]
39d2e 1ac 1E 30 3E 33 
39d32 1ad 33 33 6E 00 
39d36 1ae 00 00 00 00 
39d3a 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
39d3e 1b0 1E 36 66 66 
39d42 1b1 66 66 3E 00 
39d46 1b2 00 00 00 00 
39d4a 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
39d4e 1b4 3E 63 03 03 
39d52 1b5 03 63 3E 00 
39d56 1b6 00 00 00 00 
39d5a 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
39d5e 1b8 3C 36 33 33 
39d62 1b9 33 33 6E 00 
39d66 1ba 00 00 00 00 
39d6a 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
39d6e 1bc 3E 63 7F 03 
39d72 1bd 03 63 3E 00 
39d76 1be 00 00 00 00 
39d7a 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
39d7e 1c0 0C 1E 0C 0C 
39d82 1c1 0C 0C 1E 00 
39d86 1c2 00 00 00 00 
39d8a 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
39d8e 1c4 6E 33 33 33 
39d92 1c5 33 33 3E 30 
39d96 1c6 33 1E 00 00 
39d9a 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
39d9e 1c8 36 6E 66 66 
39da2 1c9 66 66 67 00 
39da6 1ca 00 00 00 00 
39daa 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
39dae 1cc 1C 18 18 18 
39db2 1cd 18 18 3C 00 
39db6 1ce 00 00 00 00 
39dba 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
39dbe 1d0 70 60 60 60 
39dc2 1d1 60 60 60 66 
39dc6 1d2 66 3C 00 00 
39dca 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
39dce 1d4 66 36 1E 1E 
39dd2 1d5 36 66 67 00 
39dd6 1d6 00 00 00 00 
39dda 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
39dde 1d8 18 18 18 18 
39de2 1d9 18 18       | 	byte	$18[6]
39de4 1da 3C 00 00 00 
39de8 1db 00 00 00 00 
39dec 1dc 00 00 37 7F 
39df0 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
39df4 1de 63 00 00 00 
39df8 1df 00 00 00 00 
39dfc 1e0 00 00 3B 66 
39e00 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
39e04 1e2 66 00 00 00 
39e08 1e3 00 00 00 00 
39e0c 1e4 00 00 3E 63 
39e10 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
39e14 1e6 3E 00 00 00 
39e18 1e7 00 00 00 00 
39e1c 1e8 00 00 3B 66 
39e20 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
39e24 1ea 3E 06 06 0F 
39e28 1eb 00 00 00 00 
39e2c 1ec 00 00 6E 33 
39e30 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
39e34 1ee 3E 30 30 78 
39e38 1ef 00 00 00 00 
39e3c 1f0 00 00 3B 6E 
39e40 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
39e44 1f2 0F 00 00 00 
39e48 1f3 00 00 00 00 
39e4c 1f4 00 00 3E 63 
39e50 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
39e54 1f6 3E 00 00 00 
39e58 1f7 00 00 00 08 
39e5c 1f8 0C 0C 3F 0C 
39e60 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
39e64 1fa 38 00 00 00 
39e68 1fb 00 00 00 00 
39e6c 1fc 00 00 33 33 
39e70 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
39e74 1fe 6E 00 00 00 
39e78 1ff 00 00 00 00 
39e7c 200 00 00 63 63 
39e80 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
39e84 202 1C 00 00 00 
39e88 203 00 00 00 00 
39e8c 204 00 00 63 63 
39e90 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
39e94 206 36 00 00 00 
39e98 207 00 00 00 00 
39e9c 208 00 00 63 36 
39ea0 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
39ea4 20a 63 00 00 00 
39ea8 20b 00 00 00 00 
39eac 20c 00 00 63 63 
39eb0 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
39eb4 20e 7E 60 30 1F 
39eb8 20f 00 00 00 00 
39ebc 210 00 00 7F 33 
39ec0 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
39ec4 212 7F 00 00 00 
39ec8 213 00 00 00 70 
39ecc 214 18 18 18 0E 
39ed0 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
39ed4 216 70 00 00 00 
39ed8 217 00 00 00 18 
39edc 218 18 18 18 18 
39ee0 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
39ee4 21a 18 00 00 00 
39ee8 21b 00 00 00 0E 
39eec 21c 18 18 18 70 
39ef0 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
39ef4 21e 0E 00 00 00 
39ef8 21f 6E 3B 00 00 
39efc 220 00 00 00 00 
39f00 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39f04 222 00 00 00 00 
39f08 223 00 00 00 00 
39f0c 224 00 00       | 	byte	$00[10]
39f0e 224 08 1C 36 63 
39f12 225 63 63 7F 00 
39f16 226 00 00 00 00 
39f1a 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
39f1e 228 03 03 03 03 
39f22 229 43 66 3C 18 
39f26 22a 30 1E 00 00 
39f2a 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
39f2e 22c 33 33 33 33 
39f32 22d 33 33       | 	byte	$33[6]
39f34 22e 6E 00 00 00 
39f38 22f 00 00 60 30 
39f3c 230 18 00 3E 63 
39f40 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
39f44 232 3E 00 00 00 
39f48 233 00 00 08 1C 
39f4c 234 36 00 1E 30 
39f50 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
39f54 236 6E 00 00 00 
39f58 237 00 00 00 00 
39f5c 238 33 00 1E 30 
39f60 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
39f64 23a 6E 00 00 00 
39f68 23b 00 00 1C 36 
39f6c 23c 1C 00 33 33 
39f70 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
39f74 23e 6E 00 00 00 
39f78 23f 00 00 60 30 
39f7c 240 18 00 3E 63 
39f80 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
39f84 242 3E 00 00 00 
39f88 243 00 00 00 00 
39f8c 244 00 00 3E 63 
39f90 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
39f94 246 3E 18 30 1E 
39f98 247 00 00 00 1C 
39f9c 248 58 78 38 18 
39fa0 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
39fa4 24a 3C 00 00 00 
39fa8 24b 00 00 00 00 
39fac 24c 63 00 3E 63 
39fb0 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
39fb4 24e 3E 00 00 00 
39fb8 24f 66 33 00 3E 
39fbc 250 63 63 63 63 
39fc0 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
39fc4 252 3E 00 00 00 
39fc8 253 00 00 CC 66 
39fcc 254 33 00 3E 63 
39fd0 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
39fd4 256 3E 00 00 00 
39fd8 257 00 00 18 3C 
39fdc 258 66 00 1C 18 
39fe0 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
39fe4 25a 3C 00 00 00 
39fe8 25b 30 18 00 7F 
39fec 25c 63 61 30 18 
39ff0 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
39ff4 25e 7F 00 00 00 
39ff8 25f 00 63 00 08 
39ffc 260 1C 36 63 63 
3a000 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
3a004 262 63 00 00 00 
3a008 263 30 18 00 3C 
3a00c 264 66 43 03 03 
3a010 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
3a014 266 3C 00 00 00 
3a018 267 30 18 00 7F 
3a01c 268 66 46 16 1E 
3a020 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
3a024 26a 7F 00 00 00 
3a028 26b 0C 06 00 0F 
3a02c 26c 06 06 06 06 
3a030 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3a034 26e 7F 00 00 00 
3a038 26f 30 18 00 1C 
3a03c 270 18 18 18 18 
3a040 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
3a044 272 3C 00 00 00 
3a048 273 00 00 08 1C 
3a04c 274 36 00 3E 63 
3a050 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
3a054 276 3E 00 00 00 
3a058 277 00 00 00 00 
3a05c 278 63 00 3E 63 
3a060 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
3a064 27a 3E 00 00 00 
3a068 27b 00 00 00 6F 
3a06c 27c 46 26 06 06 
3a070 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
3a074 27e 7F 00 00 00 
3a078 27f 00 00 00 6E 
3a07c 280 4C 2C 0C 0C 
3a080 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
3a084 282 1E 00 00 00 
3a088 283 30 18 00 3E 
3a08c 284 63 63 06 1C 
3a090 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3a094 286 3E 00 00 00 
3a098 287 00 00 60 30 
3a09c 288 18 00 3E 63 
3a0a0 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3a0a4 28a 3E 00 00 00 
3a0a8 28b 00 63 00 3E 
3a0ac 28c 63 63 63 63 
3a0b0 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3a0b4 28e 3E 00 00 00 
3a0b8 28f 00 63 00 63 
3a0bc 290 63 63 63 63 
3a0c0 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3a0c4 292 3E 00 00 00 
3a0c8 293 6C 38 00 7E 
3a0cc 294 7E 5A 18 18 
3a0d0 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3a0d4 296 3C 00 00 00 
3a0d8 297 00 00 60 48 
3a0dc 298 2C 0C 3F 0C 
3a0e0 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3a0e4 29a 38 00 00 00 
3a0e8 29b 00 00 00 0F 
3a0ec 29c 26 36 1E 0E 
3a0f0 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3a0f4 29e 7F 00 00 00 
3a0f8 29f 00 00 00 00 
3a0fc 2a0 00 63 36 1C 
3a100 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3a104 2a2 00 00 00 00 
3a108 2a3 00 00       | 	byte	$00[6]
3a10a 2a3 36 1C 08 00 
3a10e 2a4 3E 63 03 03 
3a112 2a5 03 63 3E 00 
3a116 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3a11a 2a7 30 18 0C 00 
3a11e 2a8 1E 30 3E 33 
3a122 2a9 33 33 6E 00 
3a126 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3a12a 2ab 60 30 18 00 
3a12e 2ac 1C 18 18 18 
3a132 2ad 18 18 3C 00 
3a136 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3a13a 2af 60 30 18 00 
3a13e 2b0 3E 63 63 63 
3a142 2b1 63 63 3E 00 
3a146 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3a14a 2b3 30 18 0C 00 
3a14e 2b4 33 33 33 33 
3a152 2b5 33 33 6E 00 
3a156 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3a15a 2b7 00 08 1C 36 
3a15e 2b8 63 63 7F 63 
3a162 2b9 63 63 63 18 
3a166 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3a16a 2bb 00 00 00 00 
3a16e 2bc 1E 30 3E 33 
3a172 2bd 33 33 6E 18 
3a176 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3a17a 2bf 00 7F 63 61 
3a17e 2c0 30 18 0C 06 
3a182 2c1 43 63 7F 00 
3a186 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3a18a 2c3 36 1C 08 00 
3a18e 2c4 7F 33 18 0C 
3a192 2c5 06 63 7F 00 
3a196 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3a19a 2c7 00 7F 66 46 
3a19e 2c8 16 1E 16 06 
3a1a2 2c9 46 66 7F 18 
3a1a6 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3a1aa 2cb 00 00 00 00 
3a1ae 2cc 3E 63 7F 03 
3a1b2 2cd 03 63 3E 18 
3a1b6 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3a1ba 2cf 00 3C 66 03 
3a1be 2d0 1F 03 0F 03 
3a1c2 2d1 03 66 3C 00 
3a1c6 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3a1ca 2d3 60 30 18 00 
3a1ce 2d4 7F 33 18 0C 
3a1d2 2d5 06 63 7F 00 
3a1d6 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3a1da 2d7 00 3C 66 43 
3a1de 2d8 03 03 03 03 
3a1e2 2d9 43 66 3C 00 
3a1e6 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3a1ea 2db 00 00 00 00 
3a1ee 2dc 3E 63 06 1C 
3a1f2 2dd 30 63 3E 18 
3a1f6 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3a1fa 2df 00 00 00 00 
3a1fe 2e0 00 00       | 	byte	$00[6]
3a200 2e1 6C 36 1B 36 
3a204 2e2 6C 00 00 00 
3a208 2e3 00 00 00 00 
3a20c 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a210 2e5 1B 36 6C 36 
3a214 2e6 1B 00 00 00 
3a218 2e7 88 22 88 22 
3a21c 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
3a220 2e9 88 22 88 22 
3a224 2ea 88 22 88 22 
3a228 2eb AA 55 AA 55 
3a22c 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
3a230 2ed AA 55 AA 55 
3a234 2ee AA 55 AA 55 
3a238 2ef BB EE BB EE 
3a23c 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
3a240 2f1 BB EE BB EE 
3a244 2f2 BB EE BB EE 
3a248 2f3 18 18 18 18 
3a24c 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
3a250 2f5 18 18 18 18 
3a254 2f6 18 18 18 18 
3a258 2f7 18 18 18 18 
3a25c 2f8 18 18 18    | 	byte	$18[15]
3a25f 2f8 1F 18 18 18 
3a263 2f9 18 18 18 18 
3a267 2fa 18 30 18 00 
3a26b 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3a26f 2fc 63 7F 63 63 
3a273 2fd 63 63 00 00 
3a277 2fe 00 1C 36 00 
3a27b 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3a27f 300 63 7F 63 63 
3a283 301 63 63 00 00 
3a287 302 00 36 1C 00 
3a28b 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3a28f 304 1E 16 06 46 
3a293 305 66 7F 00 00 
3a297 306 00 00 00 00 
3a29b 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3a29f 308 1C 30 60 63 
3a2a3 309 63 3E 18 30 
3a2a7 30a 1E 6C 6C 6C 
3a2ab 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3a2af 30c 6F 6C 6C 6C 
3a2b3 30d 6C 6C 6C 6C 
3a2b7 30e 6C 6C 6C 6C 
3a2bb 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3a2bf 310 6C 6C 6C 6C 
3a2c3 311 6C 6C 6C 6C 
3a2c7 312 6C          | 	byte	$6c[9]
3a2c8 313 00 00 00 00 
3a2cc 314 00          | 	byte	$00[5]
3a2cd 314 7F 60 6F 6C 
3a2d1 315 6C 6C 6C 6C 
3a2d5 316 6C 6C 6C 6C 
3a2d9 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3a2dd 318 6F 60 7F 00 
3a2e1 319 00 00 00 00 
3a2e5 31a 00 00 00 18 
3a2e9 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3a2ed 31c 61 30 18 0C 
3a2f1 31d 06 43 63 7F 
3a2f5 31e 00 00 00 00 
3a2f9 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3a2fd 320 00 7F 33 18 
3a301 321 0C 06 63 7F 
3a305 322 00 00 00 00 
3a309 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3a30d 324 00 00 1F 18 
3a311 325 18 18 18 18 
3a315 326 18 18 18 18 
3a319 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3a31d 328 18 18 F8 00 
3a321 329 00 00 00 00 
3a325 32a 00 00 00 18 
3a329 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3a32d 32c 18 18 FF 00 
3a331 32d 00 00 00 00 
3a335 32e 00 00 00 00 
3a339 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a33d 330 00 00 FF 18 
3a341 331 18 18 18 18 
3a345 332 18 18 18 18 
3a349 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3a34d 334 18 18 F8 18 
3a351 335 18 18 18 18 
3a355 336 18 18 18 00 
3a359 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3a35d 338 00 00 FF 00 
3a361 339 00 00 00 00 
3a365 33a 00 00 00 18 
3a369 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3a36d 33c 18 18 FF 18 
3a371 33d 18 18 18 18 
3a375 33e 18 18 18 63 
3a379 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3a37d 340 36 63 63 7F 
3a381 341 63 63 63 63 
3a385 342 00 00 00 00 
3a389 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3a38d 344 00 1E 30 3E 
3a391 345 33 33 33 6E 
3a395 346 00 00 00 6C 
3a399 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3a39d 348 EC 0C FC 00 
3a3a1 349 00 00 00 00 
3a3a5 34a 00 00 00 00 
3a3a9 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a3ad 34c FC 0C EC 6C 
3a3b1 34d 6C 6C 6C 6C 
3a3b5 34e 6C 6C 6C 6C 
3a3b9 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3a3bd 350 EF 00 FF 00 
3a3c1 351 00 00 00 00 
3a3c5 352 00 00 00 00 
3a3c9 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a3cd 354 FF 00 EF 6C 
3a3d1 355 6C 6C 6C 6C 
3a3d5 356 6C 6C 6C 6C 
3a3d9 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3a3dd 358 EC 0C EC 6C 
3a3e1 359 6C 6C 6C 6C 
3a3e5 35a 6C 6C 6C 00 
3a3e9 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3a3ed 35c FF 00 FF 00 
3a3f1 35d 00 00 00 00 
3a3f5 35e 00 00 00 6C 
3a3f9 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3a3fd 360 EF 00 EF 6C 
3a401 361 6C 6C 6C 6C 
3a405 362 6C 6C 6C 00 
3a409 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3a40d 364 63 3E 63 63 
3a411 365 63 63 3E 63 
3a415 366 00 00 00 00 
3a419 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3a41d 368 30 3C 36 33 
3a421 369 33 33 33 6E 
3a425 36a 00 00 00 00 
3a429 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3a42d 36c 66 66 6F 66 
3a431 36d 66 66 36 1F 
3a435 36e 00 00 00 36 
3a439 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3a43d 370 66 66 66 66 
3a441 371 66 66       | 	byte	$66[6]
3a443 371 36 1F 00 00 
3a447 372 00 00 63 00 
3a44b 373 7F 66 46 16 
3a44f 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3a453 375 66 7F 00 00 
3a457 376 00 6C 38 00 
3a45b 377 38 30 30 3C 
3a45f 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
3a463 379 33 6E 00 00 
3a467 37a 00 36 1C 00 
3a46b 37b 63 67 6F 7F 
3a46f 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
3a473 37d 63 63 00 00 
3a477 37e 00 30 18 00 
3a47b 37f 3C 18 18 18 
3a47f 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3a483 381 18 3C 00 00 
3a487 382 00 3C 66 00 
3a48b 383 3C 18 18 18 
3a48f 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3a493 385 18 3C 00 00 
3a497 386 00 00 00 36 
3a49b 387 1C 08 00 3E 
3a49f 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3a4a3 389 63 3E 00 00 
3a4a7 38a 00 18 18 18 
3a4ab 38b 18 18 18 18 
3a4af 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3a4b3 38d 00 00 00 00 
3a4b7 38e 00 00 00 00 
3a4bb 38f 00 00 00 00 | 	byte	$00[12]
3a4bf 390 F8 18 18 18 
3a4c3 391 18 18 18 18 
3a4c7 392 18 FF FF FF 
3a4cb 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3a4cf 394 FF FF FF FF 
3a4d3 395 FF FF FF FF 
3a4d7 396 FF          | 	byte	$ff[9]
3a4d8 397 00 00 00 00 
3a4dc 398 00 00 00    | 	byte	$00[7]
3a4df 398 FF FF FF FF 
3a4e3 399 FF FF FF FF 
3a4e7 39a FF          | 	byte	$ff[9]
3a4e8 39b 00 00 00 7E 
3a4ec 39c 7E 5A 18 18 
3a4f0 39d 18 18 18 18 
3a4f4 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
3a4f8 39f 1C 36 1C 63 
3a4fc 3a0 63 63 63 63 
3a500 3a1 63 63 63 63 
3a504 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3a508 3a3 FF FF FF FF 
3a50c 3a4 FF FF FF    | 	byte	$ff[7]
3a50f 3a4 00 00 00 00 
3a513 3a5 00 00 00 00 
3a517 3a6 00          | 	byte	$00[9]
3a518 3a7 30 18 00 3E 
3a51c 3a8 63 63 63 63 
3a520 3a9 63 63 63 63 
3a524 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3a528 3ab 00 00 00 1E 
3a52c 3ac 33 33 33 1B 
3a530 3ad 33 63 63 63 
3a534 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
3a538 3af 1C 36 00 3E 
3a53c 3b0 63 63 63 63 
3a540 3b1 63 63 63 63 
3a544 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3a548 3b3 30 18 00 63 
3a54c 3b4 67 6F 7F 7B 
3a550 3b5 73 63 63 63 
3a554 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3a558 3b7 00 00 60 30 
3a55c 3b8 18 00 3B 66 
3a560 3b9 66 66 66 66 
3a564 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3a568 3bb 00 00 36 1C 
3a56c 3bc 08 00 3B 66 
3a570 3bd 66 66 66 66 
3a574 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3a578 3bf 36 1C 00 3E 
3a57c 3c0 63 63 06 1C 
3a580 3c1 30 60 63 63 
3a584 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3a588 3c3 00 00 36 1C 
3a58c 3c4 08 00 3E 63 
3a590 3c5 06 1C 30 63 
3a594 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3a598 3c7 30 18 00 3F 
3a59c 3c8 66 66 66 3E 
3a5a0 3c9 36 66 66 66 
3a5a4 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3a5a8 3cb 30 18 00 63 
3a5ac 3cc 63 63 63 63 
3a5b0 3cd 63 63 63 63 
3a5b4 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3a5b8 3cf 00 00 60 30 
3a5bc 3d0 18 00 3B 6E 
3a5c0 3d1 66 06 06 06 
3a5c4 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3a5c8 3d3 66 33 00 63 
3a5cc 3d4 63 63 63 63 
3a5d0 3d5 63 63 63 63 
3a5d4 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3a5d8 3d7 00 00 60 30 
3a5dc 3d8 18 00 63 63 
3a5e0 3d9 63 63 63 63 
3a5e4 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
3a5e8 3db 30 18 00 66 
3a5ec 3dc 66 66 66 3C 
3a5f0 3dd 18 18 18 18 
3a5f4 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
3a5f8 3df 00 00 00 08 
3a5fc 3e0 0C 0C 3F 0C 
3a600 3e1 0C 0C 0C 6C 
3a604 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
3a608 3e3 30 18 00 00 
3a60c 3e4 00 00 00 00 
3a610 3e5 00 00 00 00 
3a614 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a618 3e7 00 00 00 00 
3a61c 3e8 00 00 00 00 | 	byte	$00[8]
3a620 3e9 7F 00 00 00 
3a624 3ea 00 00 00 00 
3a628 3eb 66 33 00 00 
3a62c 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3a630 3ed 00 00 00 00 
3a634 3ee 00 00 00 00 
3a638 3ef 00 00 00 00 
3a63c 3f0 00 00 00 00 
3a640 3f1 00 00 00 00 
3a644 3f2 00          | 	byte	$00[21]
3a645 3f2 0C 06 3C 36 
3a649 3f3 1C 00 00 00 
3a64d 3f4 00 00 00 00 
3a651 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a655 3f6 00 00 00 63 
3a659 3f7 3E 00 00 00 
3a65d 3f8 00 00 00 00 
3a661 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a665 3fa 00 00 00 00 
3a669 3fb 3E 63 06 1C 
3a66d 3fc 36 63 63 36 
3a671 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
3a675 3fe 00 00 00 00 
3a679 3ff 00 00 00 00 | 	byte	$00[8]
3a67d 400 18 00 7E 00 
3a681 401 18 00 00 00 
3a685 402 00 00 00 00 
3a689 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a68d 404 00 00 00 00 
3a691 405 00 00 00 00 | 	byte	$00[8]
3a695 406 18 30 1E 00 
3a699 407 00 00 1C 36 
3a69d 408 36 1C 00 00 
3a6a1 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
3a6a5 40a 00 00 00 00 
3a6a9 40b 63 00 00 00 
3a6ad 40c 00 00 00 00 
3a6b1 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a6b5 40e 00 00 00 18 
3a6b9 40f 18 00 00 00 
3a6bd 410 00 00 00 00 
3a6c1 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a6c5 412 00 00 00 00 
3a6c9 413 00          | 	byte	$00[5]
3a6ca 413 CC 66 33 00 
3a6ce 414 33 33 33 33 
3a6d2 415 33 33 6E 00 
3a6d6 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3a6da 417 00 3F 66 66 
3a6de 418 66 3E 36 66 
3a6e2 419 66 66 6F 00 
3a6e6 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3a6ea 41b 36 1C 08 00 
3a6ee 41c 3B 6E 66 06 
3a6f2 41d 06 06 0F 00 
3a6f6 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3a6fa 41f 00 00 00 7E 
3a6fe 420 7E 7E 7E 7E 
3a702 421 7E 7E 00 00 
3a706 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3a70a 423 00 00 00 00 
3a70e 424 00 00 00 00 
3a712 425 00 00 00 00 
3a716 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a718 427             | 'vga_font       file "vgafont.def"
3a718 427 00 00 00 00 
      ...             
3a748 433 00 00 00 00 
3a74c 434 00 00 00    | st_font        file "st4font.def"
3a74f 434 FF FF 00 00 
3a753 435 00 00 00 00 
3a757 436 00 18 18 18 
3a75b 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3a75f 438 18 18 18 18 
3a763 439 18 18 18 18 
3a767 43a 18          | 	byte	$18[9]
3a768 43b 00 00 00 00 
3a76c 43c 00 00 00    | 	byte	$00[7]
3a76f 43c FF FF 18 18 
3a773 43d 18 18 18 18 
3a777 43e 18 18 18 18 
3a77b 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3a77f 440 FF FF 00 00 
3a783 441 00 00 00 00 
3a787 442 00 18 18 18 
3a78b 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3a78f 444 1F 1F 18 18 
3a793 445 18 18 18 18 
3a797 446 18 18 18 18 
3a79b 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3a79f 448 F8 F8 18 18 
3a7a3 449 18 18 18 18 
3a7a7 44a 18 00 00 00 
3a7ab 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3a7af 44c 1F 1F 18 18 
3a7b3 44d 18 18 18 18 
3a7b7 44e 18 00 00 00 
3a7bb 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3a7bf 450 F8 F8 18 18 
3a7c3 451 18 18 18 18 
3a7c7 452 18 18 18 18 
3a7cb 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3a7cf 454 1F 1F 00 00 
3a7d3 455 00 00 00 00 
3a7d7 456 00 18 18 18 
3a7db 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3a7df 458 F8 F8 00 00 
3a7e3 459 00 00 00 00 
3a7e7 45a 00 18 18 18 
3a7eb 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3a7ef 45c FF FF 18 18 
3a7f3 45d 18 18 18 18 
3a7f7 45e 18 00 00 18 
3a7fb 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3a7ff 460 66 7E 7E 66 
3a803 461 66 66 66 30 
3a807 462 18 00 00 7E 
3a80b 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3a80f 464 3E 06 06 06 
3a813 465 06 7E 7E 18 
3a817 466 0C 30 18 3C 
3a81b 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3a81f 468 06 06 06 66 
3a823 469 66 7E 3C 00 
3a827 46a 00 30 18 66 
3a82b 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3a82f 46c 7E 7E 76 76 
3a833 46d 66 66 66 00 
3a837 46e 00 30 18 7C 
3a83b 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3a83f 470 1C 38 70 60 
3a843 471 60 7E 3E 00 
3a847 472 00 30 18 7E 
3a84b 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3a84f 474 18 0C 0C 06 
3a853 475 06 7E 7E 00 
3a857 476 00 18 18 00 
3a85b 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3a85f 478 18 18 0C 0C 
3a863 479 06 7E 7E 00 
3a867 47a 00 30 18 3C 
3a86b 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3a86f 47c 66 66 66 66 
3a873 47d 66          | 	byte	$66[5]
3a874 47e 7E 3C 00 00 
3a878 47f 00 00 06 06 
3a87c 480 06 06 16 1E 
3a880 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
3a884 482 7E 7E 00 00 
3a888 483 00 00 00 00 
3a88c 484 00 3C 7C 60 
3a890 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3a894 486 7E 7C 30 18 
3a898 487 00 00 00 00 
3a89c 488 00 3C 7E 66 
3a8a0 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
3a8a4 48a 7E 7C 18 0C 
3a8a8 48b 00 00 30 18 
3a8ac 48c 00 3C 3E 06 
3a8b0 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3a8b4 48e 7E 7C 00 00 
3a8b8 48f 00 00 30 18 
3a8bc 490 00 3E 7E 66 
3a8c0 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3a8c4 492 66 66 00 00 
3a8c8 493 00 00 30 18 
3a8cc 494 00 7C 7E 06 
3a8d0 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3a8d4 496 7E 3E 00 00 
3a8d8 497 00 00 30 18 
3a8dc 498 00 7E 7E 30 
3a8e0 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3a8e4 49a 7E 7E 00 00 
3a8e8 49b 00 00 18 18 
3a8ec 49c 00 7E 7E 30 
3a8f0 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3a8f4 49e 7E 7E 00 00 
3a8f8 49f 00 00 30 18 
3a8fc 4a0 00 3C 7E 66 
3a900 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3a904 4a2 7E 3C 00 00 
3a908 4a3 00 00 1C 1C 
3a90c 4a4 18 18 38 3C 
3a910 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3a914 4a6 3C 3C 00 00 
3a918 4a7 00 00 00 00 
3a91c 4a8 00 00 00 00 
3a920 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a924 4aa 00 00 00 00 
3a928 4ab 00 00       | 	byte	$00[6]
3a92a 4ab 18 18 18 18 
3a92e 4ac 18 18 18 18 | 	byte	$18[8]
3a932 4ad 00 00 18 18 
3a936 4ae 00 00 00 00 
3a93a 4af 66 66 66 66 
3a93e 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3a942 4b1 00 00 00 00 
3a946 4b2 00 00 00 00 
3a94a 4b3 00          | 	byte	$00[9]
3a94b 4b3 66 66 FF FF 
3a94f 4b4 66 66 FF FF 
3a953 4b5 66 66 00 00 
3a957 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3a95b 4b7 7C 7E 06 06 
3a95f 4b8 3E 7C 60 60 
3a963 4b9 7E 3E 18 18 
3a967 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3a96b 4bb 66 30 30 18 
3a96f 4bc 18 0C 0C 66 
3a973 4bd 66 00 00 00 
3a977 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3a97b 4bf 66 66 3C 1C 
3a97f 4c0 1C FC FE 66 
3a983 4c1 66 FE FC 00 
3a987 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3a98b 4c3 18 18 18 18 
3a98f 4c4 00 00 00 00 
3a993 4c5 00 00 00 00 
3a997 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3a99b 4c7 18 1C 0C 0C 
3a99f 4c8 0C 0C 0C 0C 
3a9a3 4c9 1C 18 30 00 
3a9a7 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3a9ab 4cb 18 38 30 30 
3a9af 4cc 30 30 30 30 
3a9b3 4cd 38 18 0C 00 
3a9b7 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3a9bb 4cf 66 66 3C 3C 
3a9bf 4d0 FF FF 3C 3C 
3a9c3 4d1 66 66 00 00 
3a9c7 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3a9cb 4d3 00 18 18 18 
3a9cf 4d4 7E 7E 18 18 
3a9d3 4d5 18 00 00 00 
3a9d7 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3a9db 4d7 00 00 00 00 
3a9df 4d8 00 00       | 	byte	$00[6]
3a9e1 4d9 18 18 18 18 
3a9e5 4da 18          | 	byte	$18[5]
3a9e6 4da 0C 04 00 00 
3a9ea 4db 00 00 00 00 
3a9ee 4dc 7E 7E 00 00 
3a9f2 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3a9f6 4de 00 00 00 00 
3a9fa 4df 00 00 00 00 
3a9fe 4e0 00 00 00 00 
3aa02 4e1 00          | 	byte	$00[13]
3aa03 4e1 18 18 18 00 
3aa07 4e2 00 00 00 60 
3aa0b 4e3 60 60 30 30 
3aa0f 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3aa13 4e5 06 06 06 00 
3aa17 4e6 00 00 00 3C 
3aa1b 4e7 7E 66 66 66 
3aa1f 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3aa23 4e9 66 7E 3C 00 
3aa27 4ea 00 00 00 18 
3aa2b 4eb 18 1C 1C 18 
3aa2f 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3aa33 4ed 18 7E 7E 00 
3aa37 4ee 00 00 00 3C 
3aa3b 4ef 7E 66 66 30 
3aa3f 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3aa43 4f1 0C 7E 7E 00 
3aa47 4f2 00 00 00 7E 
3aa4b 4f3 7E 30 30 18 
3aa4f 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3aa53 4f5 66 7E 3C 00 
3aa57 4f6 00 00 00 30 
3aa5b 4f7 30 38 38 3C 
3aa5f 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3aa63 4f9 7E 30 30 00 
3aa67 4fa 00 00 00 7E 
3aa6b 4fb 7E 06 06 3E 
3aa6f 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3aa73 4fd 66 7E 3C 00 
3aa77 4fe 00 00 00 38 
3aa7b 4ff 3C 0E 06 06 
3aa7f 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3aa83 501 66 7E 3C 00 
3aa87 502 00 00 00 7E 
3aa8b 503 7E 60 60 30 
3aa8f 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3aa93 505 0C 0C 0C 00 
3aa97 506 00 00 00 3C 
3aa9b 507 7E 66 66 3C 
3aa9f 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3aaa3 509 66 7E 3C 00 
3aaa7 50a 00 00 00 3C 
3aaab 50b 7E 66 66 7E 
3aaaf 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3aab3 50d 70 3C 1C 00 
3aab7 50e 00 00 00 00 
3aabb 50f 00 00 18 18 
3aabf 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3aac3 511 18 18 18 00 
3aac7 512 00 00 00 00 
3aacb 513 00 00 18 18 
3aacf 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3aad3 515 18 18 18 0C 
3aad7 516 04 00 00 00 
3aadb 517 70 38 1C 0E 
3aadf 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3aae3 519 70 00 00 00 
3aae7 51a 00 00 00 00 
3aaeb 51b 00 00 7E 7E 
3aaef 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3aaf3 51d 00 00 00 00 
3aaf7 51e 00 00 00 00 | 	byte	$00[8]
3aafb 51f 0E 1C 38 70 
3aaff 520 E0 70 38 1C 
3ab03 521 0E 00 00 00 
3ab07 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3ab0b 523 7E 66 66 30 
3ab0f 524 30 18 18 18 
3ab13 525 00 18 18 00 
3ab17 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3ab1b 527 7E 66 66 66 
3ab1f 528 66 36 06 66 
3ab23 529 66 7E 3C 00 
3ab27 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3ab2b 52b 3C 7E 66 66 
3ab2f 52c 66 7E 7E 66 
3ab33 52d 66 66 66 00 
3ab37 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3ab3b 52f 7E 66 66 7E 
3ab3f 530 3E 66 66 66 
3ab43 531 66 7E 3E 00 
3ab47 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3ab4b 533 7E 66 66 06 
3ab4f 534 06 06 06 66 
3ab53 535 66 7E 3C 00 
3ab57 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3ab5b 537 7E 66 66 66 
3ab5f 538 66 66 66 66 
3ab63 539 66 7E 3E 00 
3ab67 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3ab6b 53b 7E 06 06 3E 
3ab6f 53c 3E 06 06 06 
3ab73 53d 06 7E 7E 00 
3ab77 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3ab7b 53f 7E 06 06 3E 
3ab7f 540 3E 06 06 06 
3ab83 541 06 06 06 00 
3ab87 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3ab8b 543 7E 06 06 76 
3ab8f 544 76 66 66 66 
3ab93 545 66 7E 3C 00 
3ab97 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3ab9b 547 66 66 66 7E 
3ab9f 548 7E 66 66 66 
3aba3 549 66 66 66 00 
3aba7 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3abab 54b 7E 18 18 18 
3abaf 54c 18 18 18 18 
3abb3 54d 18 7E 7E 00 
3abb7 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3abbb 54f 60 60 60 60 
3abbf 550 60 60 60    | 	byte	$60[7]
3abc2 551 66 66 7E 3C 
3abc6 552 00 00 00 00 
3abca 553 66 66 36 36 
3abce 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3abd2 555 66 66 C6 C6 
3abd6 556 00 00 00 00 
3abda 557 06 06 06 06 
3abde 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3abe2 559 06 06 7E 7E 
3abe6 55a 00 00 00 00 
3abea 55b C6 C6 EE EE 
3abee 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3abf2 55d C6 C6 C6 C6 
3abf6 55e 00 00 00 00 
3abfa 55f 66 66 66 6E 
3abfe 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3ac02 561 76 66 66 66 
3ac06 562 00 00 00 00 
3ac0a 563 3C 7E 66 66 
3ac0e 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3ac12 565 66 66 7E 3C 
3ac16 566 00 00 00 00 
3ac1a 567 3E 7E 66 66 
3ac1e 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3ac22 569 06 06 06 06 
3ac26 56a 00 00 00 00 
3ac2a 56b 3C 7E 66 66 
3ac2e 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3ac32 56d 66 56 3E 6C 
3ac36 56e 00 00 00 00 
3ac3a 56f 3E 7E 66 66 
3ac3e 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3ac42 571 66 66 C6 C6 
3ac46 572 00 00 00 00 
3ac4a 573 7C 7E 06 06 
3ac4e 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3ac52 575 60 60 7E 3E 
3ac56 576 00 00 00 00 
3ac5a 577 7E 7E 18 18 
3ac5e 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3ac62 579 18 18 18 18 
3ac66 57a 00 00 00 00 
3ac6a 57b 66 66 66 66 
3ac6e 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3ac72 57d 66 66 7E 3C 
3ac76 57e 00 00 00 00 
3ac7a 57f 66 66 66 66 
3ac7e 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3ac82 581 3C 3C 18 18 
3ac86 582 00 00 00 00 
3ac8a 583 C6 C6 C6 C6 
3ac8e 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3ac92 585 FE EE C6 82 
3ac96 586 00 00 00 00 
3ac9a 587 66 66 66 3C 
3ac9e 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3aca2 589 3C 66 66 66 
3aca6 58a 00 00 00 00 
3acaa 58b 66 66 66 66 
3acae 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3acb2 58d 18 18 18 18 
3acb6 58e 00 00 00 00 
3acba 58f 7E 7E 30 30 
3acbe 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3acc2 591 06 06 7E 7E 
3acc6 592 00 00 00 00 
3acca 593 3C 3C 0C 0C 
3acce 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3acd2 595 0C 0C 3C 3C 
3acd6 596 00 00 00 00 
3acda 597 06 06 0C 0C 
3acde 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3ace2 599 60 60 C0 C0 
3ace6 59a 00 00 00 00 
3acea 59b 3C 3C 30 30 
3acee 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3acf2 59d 30 30 3C 3C 
3acf6 59e 00 00 00 00 
3acfa 59f 18 18 3C 3C 
3acfe 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3ad02 5a1 00 00 00 00 
3ad06 5a2 00 00 00 00 
3ad0a 5a3 00 00 00 00 
3ad0e 5a4 00 00 00 00 
3ad12 5a5 00 00       | 	byte	$00[18]
3ad14 5a6 FE FE 00 00 
3ad18 5a7 00 00 0C 0C 
3ad1c 5a8 18 18 00 00 
3ad20 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3ad24 5aa 00 00 00 00 
3ad28 5ab 00 00 00 00 
3ad2c 5ac 00          | 	byte	$00[9]
3ad2d 5ac 3C 7C 60 7C 
3ad31 5ad 7E 66 66 7E 
3ad35 5ae 7C 00 00 00 
3ad39 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3ad3d 5b0 3E 7E 66 66 
3ad41 5b1 66 66 66 7E 
3ad45 5b2 3E 00 00 00 
3ad49 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3ad4d 5b4 3C 3E 06 06 
3ad51 5b5 06 06 06 7E 
3ad55 5b6 7C 00 00 00 
3ad59 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3ad5d 5b8 7C 7E 66 66 
3ad61 5b9 66 66 66 7E 
3ad65 5ba 7C 00 00 00 
3ad69 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3ad6d 5bc 3C 7E 66 66 
3ad71 5bd 7E 06 06 7E 
3ad75 5be 7C 00 00 00 
3ad79 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3ad7d 5c0 18 7E 7E 18 
3ad81 5c1 18 18 18 18 
3ad85 5c2 18 00 00 00 
3ad89 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3ad8d 5c4 7C 7E 66 66 
3ad91 5c5 66 66 7E 7C 
3ad95 5c6 60 7E 3E 00 
3ad99 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3ad9d 5c8 3E 7E 66 66 
3ada1 5c9 66 66 66 66 
3ada5 5ca 66 00 00 00 
3ada9 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3adad 5cc 1C 1C 18 18 
3adb1 5cd 18 18 18 3C 
3adb5 5ce 3C 00 00 00 
3adb9 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3adbd 5d0 30 30 30 30 
3adc1 5d1 30 30 30 30 
3adc5 5d2 30          | 	byte	$30[9]
3adc6 5d2 3E 1E 00 00 
3adca 5d3 06 06 06 36 
3adce 5d4 36 1E 1E 1E 
3add2 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3add6 5d6 00 00 00 00 
3adda 5d7 1C 1C 18 18 
3adde 5d8 18 18 18 18 
3ade2 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3ade6 5da 00 00 00 00 
3adea 5db 00 00 00    | 	byte	$00[7]
3aded 5dc 6C FE FE D6 
3adf1 5dd D6 C6 C6 C6 
3adf5 5de C6 00 00 00 
3adf9 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3adfd 5e0 3E 7E 66 66 
3ae01 5e1 66 66 66 66 
3ae05 5e2 66 00 00 00 
3ae09 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3ae0d 5e4 3C 7E 66 66 
3ae11 5e5 66 66 66 7E 
3ae15 5e6 3C 00 00 00 
3ae19 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3ae1d 5e8 3E 7E 66 66 
3ae21 5e9 66 66 66 7E 
3ae25 5ea 3E 06 06 00 
3ae29 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3ae2d 5ec 7C 7E 66 66 
3ae31 5ed 66 66 66 7E 
3ae35 5ee 7C 60 60 00 
3ae39 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3ae3d 5f0 3E 7E 66 06 
3ae41 5f1 06 06 06 06 
3ae45 5f2 06 00 00 00 
3ae49 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3ae4d 5f4 7C 7E 06 0E 
3ae51 5f5 3C 70 60 7E 
3ae55 5f6 3E 00 00 00 
3ae59 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3ae5d 5f8 7E 7E 18 18 
3ae61 5f9 18 18 18 78 
3ae65 5fa 70 00 00 00 
3ae69 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3ae6d 5fc 66 66 66 66 
3ae71 5fd 66 66 66    | 	byte	$66[7]
3ae74 5fe 7E 7C 00 00 
3ae78 5ff 00 00 00 00 
3ae7c 600 00 66 66 66 
3ae80 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
3ae84 602 18 18 00 00 
3ae88 603 00 00 00 00 
3ae8c 604 00 C6 C6 D6 
3ae90 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3ae94 606 C6 82 00 00 
3ae98 607 00 00 00 00 
3ae9c 608 00 66 66 3C 
3aea0 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3aea4 60a 66 66 00 00 
3aea8 60b 00 00 00 00 
3aeac 60c 00 66 66 66 
3aeb0 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3aeb4 60e 7C 60 7E 3E 
3aeb8 60f 00 00 00 00 
3aebc 610 00 7E 7E 30 
3aec0 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3aec4 612 7E 7E 00 00 
3aec8 613 00 00 30 18 
3aecc 614 18 18 18 0C 
3aed0 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3aed4 616 18 30 00 00 
3aed8 617 00 00 18 18 
3aedc 618 18 18 18 18 
3aee0 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3aee4 61a 18 18 00 00 
3aee8 61b 00 00 0C 18 
3aeec 61c 18 18 18 30 
3aef0 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3aef4 61e 18 0C 00 00 
3aef8 61f 00 00 6C 7E 
3aefc 620 36 00 00 00 
3af00 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3af04 622 00 00 00 00 
3af08 623 00 00 00 00 
3af0c 624 00          | 	byte	$00[9]
3af0d 624 18 18 18 18 
3af11 625 18 18 00 00 
3af15 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3af18 627             | 'amiga_font     file "amigafont.def"
3af18 627 00 6C FE FE 
3af1c 628 7C 38 10 00 
3af20 629 18 18 18 F8 
3af24 62a F8 18 18 18 | a8_font        file "atari8.fnt"
3af28 62b C0 C0 C0 C0 
3af2c 62c C0 C0 C0 C0 | 	byte	$c0[8]
3af30 62d 18 18 18 1F 
3af34 62e 1F 00 00 00 
3af38 62f 18 18 18 1F 
3af3c 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3af40 631 00 00 00 1F 
3af44 632 1F 18 18 18 
3af48 633 C0 E0 70 38 
3af4c 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3af50 635 03 07 0E 1C 
3af54 636 38 70 E0 C0 
3af58 637 80 C0 E0 F0 
3af5c 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3af60 639 00 00 00 00 
3af64 63a F0 F0 F0 F0 
3af68 63b 01 03 07 0F 
3af6c 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3af70 63d F0 F0 F0 F0 
3af74 63e 00 00 00 00 
3af78 63f 0F 0F 0F 0F 
3af7c 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3af80 641 FF FF 00 00 
3af84 642 00 00 00 00 
3af88 643 00 00 00 00 
3af8c 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3af90 645 00 00 00 00 
3af94 646 0F 0F 0F 0F 
3af98 647 00 38 38 EE 
3af9c 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3afa0 649 00 00 00 F8 
3afa4 64a F8 18 18 18 
3afa8 64b 00 00 00 FF 
3afac 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3afb0 64d 18 18 18 FF 
3afb4 64e FF 18 18 18 
3afb8 64f 00 00 3C 7E 
3afbc 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3afc0 651 00 00 00 00 
3afc4 652 FF FF FF FF 
3afc8 653 03 03 03 03 
3afcc 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3afd0 655 00 00 00 FF 
3afd4 656 FF 18 18 18 
3afd8 657 18 18 18 FF 
3afdc 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3afe0 659 0F 0F 0F 0F 
3afe4 65a 0F 0F 0F 0F | 	byte	$0f[8]
3afe8 65b 18 18 18 F8 
3afec 65c F8 00 00 00 
3aff0 65d 1E 06 1E 06 
3aff4 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3aff8 65f 00 18 3C 7E 
3affc 660 18 18 18 00 
3b000 661 00 18 18 18 
3b004 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3b008 663 00 18 0C 7E 
3b00c 664 0C 18 00 00 
3b010 665 00 18 30 7E 
3b014 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3b018 667 00 00 00 00 
3b01c 668 00 00 00 00 
3b020 669 00          | 	byte	$00[9]
3b021 669 18 18 18 18 
3b025 66a 00 18 00 00 
3b029 66b 66 66 66 00 
3b02d 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3b031 66d 66 FF 66 66 
3b035 66e FF 66 00 18 
3b039 66f 7C 06 3C 60 
3b03d 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3b041 671 66 36 18 0C 
3b045 672 66 62 00 38 
3b049 673 6C 38 1C F6 
3b04d 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3b051 675 18 18 18 00 
3b055 676 00 00 00 00 
3b059 677 70 38 18 18 
3b05d 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3b061 679 0E 1C 18 18 
3b065 67a 1C 0E 00 00 
3b069 67b 66 3C FF 3C 
3b06d 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3b071 67d 18 18 7E 18 
3b075 67e 18 00 00 00 
3b079 67f 00 00 00 00 
3b07d 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3b081 681 00 00 7E 00 
3b085 682 00 00 00 00 
3b089 683 00 00 00 00 
3b08d 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3b091 685 60 30 18 0C 
3b095 686 06 02 00 00 
3b099 687 3C 66 76 6E 
3b09d 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3b0a1 689 18 1C 18 18 
3b0a5 68a 18 7E 00 00 
3b0a9 68b 3C 66 30 18 
3b0ad 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3b0b1 68d 7E 30 18 30 
3b0b5 68e 66 3C 00 00 
3b0b9 68f 30 38 3C 36 
3b0bd 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3b0c1 691 7E 06 3E 60 
3b0c5 692 66 3C 00 00 
3b0c9 693 3C 06 3E 66 
3b0cd 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3b0d1 695 7E 60 30 18 
3b0d5 696 0C 0C 00 00 
3b0d9 697 3C 66 3C 66 
3b0dd 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3b0e1 699 3C 66 7C 60 
3b0e5 69a 30 1C 00 00 
3b0e9 69b 00 18 18 00 
3b0ed 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3b0f1 69d 00 18 18 00 
3b0f5 69e 18 18 0C 60 
3b0f9 69f 30 18 0C 18 
3b0fd 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3b101 6a1 00 7E 00 00 
3b105 6a2 7E 00 00 06 
3b109 6a3 0C 18 30 18 
3b10d 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3b111 6a5 3C 66 30 18 
3b115 6a6 00 18 00 00 
3b119 6a7 3C 66 76 76 
3b11d 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3b121 6a9 18 3C 66 66 
3b125 6aa 7E 66 00 00 
3b129 6ab 3E 66 3E 66 
3b12d 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3b131 6ad 3C 66 06 06 
3b135 6ae 66 3C 00 00 
3b139 6af 1E 36 66 66 
3b13d 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3b141 6b1 7E 06 3E 06 
3b145 6b2 06 7E 00 00 
3b149 6b3 7E 06 3E 06 
3b14d 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3b151 6b5 7C 06 06 76 
3b155 6b6 66 7C 00 00 
3b159 6b7 66 66 7E 66 
3b15d 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3b161 6b9 7E 18 18 18 
3b165 6ba 18 7E 00 00 
3b169 6bb 60 60 60 60 
3b16d 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3b171 6bd 66 36 1E 1E 
3b175 6be 36 66 00 00 
3b179 6bf 06 06 06 06 
3b17d 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3b181 6c1 C6 EE FE D6 
3b185 6c2 C6 C6 00 00 
3b189 6c3 66 6E 7E 7E 
3b18d 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3b191 6c5 3C 66 66 66 
3b195 6c6 66 3C 00 00 
3b199 6c7 3E 66 66 3E 
3b19d 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3b1a1 6c9 3C 66 66 66 
3b1a5 6ca 36 6C 00 00 
3b1a9 6cb 3E 66 66 3E 
3b1ad 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3b1b1 6cd 3C 06 3C 60 
3b1b5 6ce 60 3C 00 00 
3b1b9 6cf 7E 18 18 18 
3b1bd 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3b1c1 6d1 66 66 66 66 
3b1c5 6d2 66          | 	byte	$66[5]
3b1c6 6d2 7E 00 00 66 
3b1ca 6d3 66 66 66 3C 
3b1ce 6d4 18 00 00 C6 
3b1d2 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3b1d6 6d6 C6 00 00 66 
3b1da 6d7 66 3C 3C 66 
3b1de 6d8 66 00 00 66 
3b1e2 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3b1e6 6da 18 00 00 7E 
3b1ea 6db 30 18 0C 06 
3b1ee 6dc 7E 00 00 78 
3b1f2 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3b1f6 6de 78 00 00 02 
3b1fa 6df 06 0C 18 30 
3b1fe 6e0 60 00 00 1E 
3b202 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3b206 6e2 1E 00 00 10 
3b20a 6e3 38 6C C6 00 
3b20e 6e4 00 00 00 00 
3b212 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b216 6e6 FF 00 00 18 
3b21a 6e7 3C 7E 7E 3C 
3b21e 6e8 18 00 00 00 
3b222 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3b226 6ea 7C 00 00 06 
3b22a 6eb 06 3E 66 66 
3b22e 6ec 3E 00 00 00 
3b232 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3b236 6ee 3C 00 00 60 
3b23a 6ef 60 7C 66 66 
3b23e 6f0 7C 00 00 00 
3b242 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3b246 6f2 3C 00 00 70 
3b24a 6f3 18 7C 18 18 
3b24e 6f4 18 00 00 00 
3b252 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3b256 6f6 60 3E 00 06 
3b25a 6f7 06 3E 66 66 
3b25e 6f8 66 00 00 18 
3b262 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3b266 6fa 3C 00 00 60 
3b26a 6fb 00 60 60 60 
3b26e 6fc 60 3C 00 06 
3b272 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3b276 6fe 66 00 00 1C 
3b27a 6ff 18 18 18 18 
3b27e 700 3C 00 00 00 
3b282 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3b286 702 C6 00 00 00 
3b28a 703 3E 66 66 66 
3b28e 704 66 00 00 00 
3b292 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3b296 706 3C 00 00 00 
3b29a 707 3E 66 66 3E 
3b29e 708 06 06 00 00 
3b2a2 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3b2a6 70a 60 60 00 00 
3b2aa 70b 3E 66 06 06 
3b2ae 70c 06 00 00 00 
3b2b2 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3b2b6 70e 3E 00 00 18 
3b2ba 70f 7E 18 18 18 
3b2be 710 70 00 00 00 
3b2c2 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3b2c6 712 7C 00 00 00 
3b2ca 713 66 66 66 3C 
3b2ce 714 18 00 00 00 
3b2d2 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3b2d6 716 6C 00 00 00 
3b2da 717 66 3C 18 3C 
3b2de 718 66 00 00 00 
3b2e2 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3b2e6 71a 30 1E 00 00 
3b2ea 71b 7E 30 18 0C 
3b2ee 71c 7E 00 00 18 
3b2f2 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3b2f6 71e 3C 00 18 18 
3b2fa 71f 18 18 18 18 
3b2fe 720 18 18 00 7E 
3b302 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3b306 722 60 00 10 18 
3b30a 723 1C 1E 1C 18 
3b30e 724 10 00 08 18 
3b312 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3b316 726 08 00       | 	byte	$08, $00
3b318 727 00 00 00 00 
3b31c 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3b31d 728 80 00 00 00 
3b321 729 00 80 00 00 
3b325 72a 80 80 00 00 
3b329 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3b32d 72c 80 00 80 00 
3b331 72d 00 40 80 00 
3b335 72e AA AA AA 00 
3b339 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3b33d 730 FF 00 00 00 
3b341 731 00 FF 00 00 
3b345 732 FF FF 00 00 
3b349 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3b34d 734 FF 00 FF 00 
3b351 735 00 FF FF 00 
3b355 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3b358 737 00 00 00 00 
3b35c 738 00          | ataripalette   file "ataripalettep2.def"
3b35d 738 11 11 11 00 
3b361 739 22 22 22 00 
3b365 73a 33 33 33 00 
3b369 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3b36d 73c 55 55 55 00 
3b371 73d 66 66 66 00 
3b375 73e 77 77 77 00 
3b379 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3b37d 740 99 99 99 00 
3b381 741 AA AA AA 00 
3b385 742 BB BB BB 00 
3b389 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3b38d 744 DD DD DD 00 
3b391 745 EE EE EE 00 
3b395 746 FF FF FF 00 
3b399 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3b39d 748 00 14 40 00 
3b3a1 749 00 1E 60 00 
3b3a5 74a 00 28 80 00 
3b3a9 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3b3ad 74c 00 3C BF 00 
3b3b1 74d 00 46 DF 00 
3b3b5 74e 00 50 FF 00 
3b3b9 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3b3bd 750 39 77 FF 00 
3b3c1 751 55 8A FF 00 
3b3c5 752 71 9E FF 00 
3b3c9 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3b3cd 754 AA C5 FF 00 
3b3d1 755 C6 D8 FF 00 
3b3d5 756 E3 EC FF 00 
3b3d9 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3b3dd 758 00 00 40 00 
3b3e1 759 00 00 60 00 
3b3e5 75a 00 00 80 00 
3b3e9 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3b3ed 75c 00 00 BF 00 
3b3f1 75d 00 00 DF 00 
3b3f5 75e 00 00 FF 00 
3b3f9 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3b3fd 760 39 39 FF 00 
3b401 761 55 55 FF 00 
3b405 762 71 71 FF 00 
3b409 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3b40d 764 AA AA FF 00 
3b411 765 C6 C6 FF 00 
3b415 766 E3 E3 FF 00 
3b419 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3b41d 768 20 00 40 00 
3b421 769 30 00 60 00 
3b425 76a 40 00 80 00 
3b429 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3b42d 76c 60 00 BF 00 
3b431 76d 70 00 DF 00 
3b435 76e 80 00 FF 00 
3b439 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3b43d 770 9C 39 FF 00 
3b441 771 AA 55 FF 00 
3b445 772 B8 71 FF 00 
3b449 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3b44d 774 D5 AA FF 00 
3b451 775 E3 C6 FF 00 
3b455 776 F1 E3 FF 00 
3b459 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3b45d 778 40 00 40 00 
3b461 779 60 00 60 00 
3b465 77a 80 00 80 00 
3b469 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3b46d 77c BF 00 BF 00 
3b471 77d DF 00 DF 00 
3b475 77e FF 00 FF 00 
3b479 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3b47d 780 FF 39 FF 00 
3b481 781 FF 55 FF 00 
3b485 782 FF 71 FF 00 
3b489 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3b48d 784 FF AA FF 00 
3b491 785 FF C6 FF 00 
3b495 786 FF E3 FF 00 
3b499 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3b49d 788 40 00 20 00 
3b4a1 789 60 00 30 00 
3b4a5 78a 80 00 40 00 
3b4a9 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3b4ad 78c BF 00 60 00 
3b4b1 78d DF 00 70 00 
3b4b5 78e FF 00 80 00 
3b4b9 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3b4bd 790 FF 39 9C 00 
3b4c1 791 FF 55 AA 00 
3b4c5 792 FF 71 B8 00 
3b4c9 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3b4cd 794 FF AA D5 00 
3b4d1 795 FF C6 E3 00 
3b4d5 796 FF E3 F1 00 
3b4d9 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3b4dd 798 40 00 00 00 
3b4e1 799 60 00 00 00 
3b4e5 79a 80 00 00 00 
3b4e9 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3b4ed 79c BF 00 00 00 
3b4f1 79d DF 00 00 00 
3b4f5 79e FF 00 00 00 
3b4f9 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3b4fd 7a0 FF 39 39 00 
3b501 7a1 FF 55 55 00 
3b505 7a2 FF 71 71 00 
3b509 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3b50d 7a4 FF AA AA 00 
3b511 7a5 FF C6 C6 00 
3b515 7a6 FF E3 E3 00 
3b519 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3b51d 7a8 40 10 00 00 
3b521 7a9 60 18 00 00 
3b525 7aa 80 20 00 00 
3b529 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3b52d 7ac BF 30 00 00 
3b531 7ad DF 38 00 00 
3b535 7ae FF 40 00 00 
3b539 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3b53d 7b0 FF 6A 39 00 
3b541 7b1 FF 80 55 00 
3b545 7b2 FF 95 71 00 
3b549 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3b54d 7b4 FF BF AA 00 
3b551 7b5 FF D5 C6 00 
3b555 7b6 FF EA E3 00 
3b559 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3b55d 7b8 40 20 00 00 
3b561 7b9 60 30 00 00 
3b565 7ba 80 40 00 00 
3b569 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3b56d 7bc BF 60 00 00 
3b571 7bd DF 70 00 00 
3b575 7be FF 80 00 00 
3b579 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3b57d 7c0 FF 9C 39 00 
3b581 7c1 FF AA 55 00 
3b585 7c2 FF B8 71 00 
3b589 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3b58d 7c4 FF D5 AA 00 
3b591 7c5 FF E3 C6 00 
3b595 7c6 FF F1 E3 00 
3b599 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3b59d 7c8 40 30 00 00 
3b5a1 7c9 60 48 00 00 
3b5a5 7ca 80 60 00 00 
3b5a9 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3b5ad 7cc BF 90 00 00 
3b5b1 7cd DF A8 00 00 
3b5b5 7ce FF C0 00 00 
3b5b9 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3b5bd 7d0 FF CE 39 00 
3b5c1 7d1 FF D5 55 00 
3b5c5 7d2 FF DC 71 00 
3b5c9 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3b5cd 7d4 FF EA AA 00 
3b5d1 7d5 FF F1 C6 00 
3b5d5 7d6 FF F8 E3 00 
3b5d9 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3b5dd 7d8 30 40 00 00 
3b5e1 7d9 48 60 00 00 
3b5e5 7da 60 80 00 00 
3b5e9 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3b5ed 7dc 90 BF 00 00 
3b5f1 7dd A8 DF 00 00 
3b5f5 7de C0 FF 00 00 
3b5f9 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3b5fd 7e0 CE FF 39 00 
3b601 7e1 D5 FF 55 00 
3b605 7e2 DC FF 71 00 
3b609 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3b60d 7e4 EA FF AA 00 
3b611 7e5 F1 FF C6 00 
3b615 7e6 F8 FF E3 00 
3b619 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3b61d 7e8 00 40 00 00 
3b621 7e9 00 60 00 00 
3b625 7ea 00 80 00 00 
3b629 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3b62d 7ec 00 BF 00 00 
3b631 7ed 00 DF 00 00 
3b635 7ee 00 FF 00 00 
3b639 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3b63d 7f0 39 FF 39 00 
3b641 7f1 55 FF 55 00 
3b645 7f2 71 FF 71 00 
3b649 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3b64d 7f4 AA FF AA 00 
3b651 7f5 C6 FF C6 00 
3b655 7f6 E3 FF E3 00 
3b659 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3b65d 7f8 00 40 14 00 
3b661 7f9 00 60 1E 00 
3b665 7fa 00 80 28 00 
3b669 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3b66d 7fc 00 BF 3C 00 
3b671 7fd 00 DF 46 00 
3b675 7fe 00 FF 50 00 
3b679 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3b67d 800 39 FF 77 00 
3b681 801 55 FF 8A 00 
3b685 802 71 FF 9E 00 
3b689 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3b68d 804 AA FF C5 00 
3b691 805 C6 FF D8 00 
3b695 806 E3 FF EC 00 
3b699 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3b69d 808 00 40 28 00 
3b6a1 809 00 60 3C 00 
3b6a5 80a 00 80 50 00 
3b6a9 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3b6ad 80c 00 BF 78 00 
3b6b1 80d 00 DF 8C 00 
3b6b5 80e 00 FF A0 00 
3b6b9 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3b6bd 810 39 FF B5 00 
3b6c1 811 55 FF C0 00 
3b6c5 812 71 FF CA 00 
3b6c9 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3b6cd 814 AA FF DF 00 
3b6d1 815 C6 FF EA 00 
3b6d5 816 E3 FF F4 00 
3b6d9 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3b6dd 818 00 40 40 00 
3b6e1 819 00 60 60 00 
3b6e5 81a 00 80 80 00 
3b6e9 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3b6ed 81c 00 BF BF 00 
3b6f1 81d 00 DF DF 00 
3b6f5 81e 00 FF FF 00 
3b6f9 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3b6fd 820 39 FF FF 00 
3b701 821 55 FF FF 00 
3b705 822 71 FF FF 00 
3b709 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3b70d 824 AA FF FF 00 
3b711 825 C6 FF FF 00 
3b715 826 E3 FF FF 00 
3b719 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3b71d 828 00 28 40 00 
3b721 829 00 3C 60 00 
3b725 82a 00 50 80 00 
3b729 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3b72d 82c 00 78 BF 00 
3b731 82d 00 8C DF 00 
3b735 82e 00 A0 FF 00 
3b739 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3b73d 830 39 B5 FF 00 
3b741 831 55 C0 FF 00 
3b745 832 71 CA FF 00 
3b749 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3b74d 834 AA DF FF 00 
3b751 835 C6 EA FF 00 
3b755 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3b758 837             | 
3b758 837             | '**********************************************************************************
3b758 837             | '
3b758 837             | '        Timings and colors definitions
3b758 837             | '
3b758 837             | '**********************************************************************************
3b758 837             | 
3b758 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3b758 837 08 00 00 00 
3b75c 838 3C 00 00 00 
3b760 839 08 00 00 00 
3b764 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3b768 83b 07 00 00 00 
3b76c 83c 04 00 00 00 
3b770 83d 01 00 00 00 
3b774 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3b778 83f 58 02 00 00 
3b77c 840 20 9E 4B 14 
3b780 841 FB A8 9E 01 
3b784 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3b788 843 00 00 00 00 
3b78c 844 C0 00 00 00 
3b790 845 00 00 00 00 
3b794 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b798 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3b798 847 00 75 C7 97 
3b79c 848 27 47 F6 0A 
3b7a0 849 05 79 CB 9B 
3b7a4 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3b7a8 84b             | 
3b7a8 84b             | ''--------  Initialization  ----------------------------------------------------------------
3b7a8 84b             | 
3b7a8 84b 28 0C 64 FD | hdmi            setq    #6
3b7ac 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3b7b0 84d 28 10 64 FD |                 setq    #8
3b7b4 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3b7b8 84f             | 
3b7b8 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3b7bc 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3b7c0 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3b7c4 852 D6 C6 01 F1 |                 add     t1,hbase
3b7c8 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3b7cc 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3b7d0 855 7B 0B 80 5F 
3b7d4 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3b7d8 857 66 66 86 FF 
3b7dc 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3b7e0 859             | '
3b7e0 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
3b7e4 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
3b7e8 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3b7ec 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3b7f0 85d             | 
3b7f0 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3b7f4 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3b7f8 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3b7fc 860             | 
3b7fc 860             | ''--------  frame rendering main loop  ---------------------------------------------------
3b7fc 860             | 
3b7fc 860 28 06 64 FD | p101            setq 	#3
3b800 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
3b804 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3b808 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3b80c 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3b810 865 00 A0 05 F6 |                 mov     dlinum, #0
3b814 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3b818 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3b81c 868             | 
3b81c 868             | 
3b81c 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3b820 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3b824 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3b828 86b             |                 
3b828 86b             | 
3b828 86b             | 
3b828 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3b828 86b             |   
3b828 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3b82c 86c 29 FE 65 3D |          if_nc  setq2   #255
3b830 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3b834 86e             | 
3b834 86e             | '' -----   up porch (before the picture)
3b834 86e             | 
3b834 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3b838 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3b83c 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3b840 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3b844 872             |  
3b844 872             |    
3b844 872             |  
3b844 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3b848 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
3b84c 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3b850 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3b854 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
3b858 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3b85c 878             | 
3b85c 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3b860 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
3b864 87a 48 00 B0 FD | 		call    #dli
3b868 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
3b86c 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
3b870 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3b874 87e             |                 	
3b874 87e             |                 
3b874 87e             | 
3b874 87e             |  
3b874 87e             | '' ------- the main screen drawing starts here
3b874 87e             | 
3b874 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3b878 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3b87c 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3b880 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
3b884 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3b888 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3b88c 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3b890 885             |               
3b890 885             | 
3b890 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3b894 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3b898 887             | 
3b898 887             | ' ---------------- All visible lines displayed now, start vblank  
3b898 887             | 
3b898 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3b89c 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3b8a0 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3b8a4 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
3b8a8 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3b8ac 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3b8b0 88d             | 
3b8b0 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3b8b0 88d             | 
3b8b0 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3b8b0 88d             | 
3b8b0 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3b8b4 88e             | 
3b8b4 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3b8b8 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
3b8bc 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3b8c0 891             | 
3b8c0 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3b8c4 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3b8c8 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3b8cc 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3b8d0 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3b8d4 896             | 
3b8d4 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3b8d8 897 DD C6 41 F8 |                 getnib  t1,dl,#0
3b8dc 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3b8e0 899 70 00 90 AD |     if_z        jmp     #preload
3b8e4 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3b8e8 89b 94 00 90 AD |     if_z        jmp     #preload2
3b8ec 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3b8f0 89d 0C 00 90 AD |     if_z        jmp     #p390
3b8f4 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3b8f8 89f 28 00 90 AD |     if_z        jmp     #p391  
3b8fc 8a0             | 
3b8fc 8a0 2D 00 64 FD | p308            ret
3b900 8a1             |    
3b900 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3b904 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3b908 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3b90c 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3b910 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3b914 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3b918 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3b91c 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3b920 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3b924 8aa             |  
3b924 8aa             | '' --------  Reload palette. To do 
3b924 8aa             | 
3b924 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3b928 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3b92c 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3b930 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3b934 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3b938 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
3b93c 8b0 70 FF 9F FD |         	jmp     #dli                
3b940 8b1             |       
3b940 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3b940 8b1             | 
3b940 8b1             | 
3b940 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3b940 8b1             | 
3b940 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3b944 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
3b948 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3b94c 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
3b950 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3b954 8b6             |         
3b954 8b6             | '' -------------- Preload a line from PSRAM        
3b954 8b6             |         
3b954 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3b958 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3b95c 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3b960 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
3b964 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
3b968 8bb             | 
3b968 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3b96c 8bc 32 B7 01 F6 |                 mov     buf2,a1024
3b970 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3b974 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3b978 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3b97c 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3b980 8c1             |  
3b980 8c1             |  
3b980 8c1             | preload2      '  incmod  dlinum,#3
3b980 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
3b984 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
3b988 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3b98c 8c4 28 02 64 FD |                 setq	#1
3b990 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3b994 8c6             |                 
3b994 8c6             | 
3b994 8c6             | '' -------------- Draw sprites
3b994 8c6             | 
3b994 8c6 CF 5C 02 F6 | sprite          mov t8,frames
3b998 8c7 10 5C 0E F5 | 		and t8,#16 wz
3b99c 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
3b9a0 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
3b9a4 8ca             | 		
3b9a4 8ca             | 
3b9a4 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3b9a8 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3b9ac 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
3b9b0 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3b9b4 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3b9b8 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
3b9bc 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3b9c0 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
3b9c4 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
3b9c8 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3b9cc 8d4 01 52 86 F1 |                 sub     sprite_h,#1
3b9d0 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3b9d4 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3b9d8 8d7             | 
3b9d8 8d7             | 
3b9d8 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3b9dc 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3b9e0 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3b9e4 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3b9e8 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3b9ec 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3b9f0 8dd 00 5E 06 F6 |                 mov 	t9,#0
3b9f4 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3b9f8 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3b9fc 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3ba00 8e1             |      
3ba00 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3ba04 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3ba08 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3ba0c 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3ba10 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3ba14 8e6             |                 
3ba14 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3ba18 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3ba1c 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3ba20 8e9             |   		
3ba20 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3ba24 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3ba28 8eb             | 
3ba28 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3ba2c 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3ba30 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3ba34 8ee             |  
3ba34 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3ba38 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3ba3c 8f0 10 00 90 CD |      if_c 	jmp     #p899		
3ba40 8f1             | 	
3ba40 8f1             | 	
3ba40 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3ba44 8f2 28 CD 01 F1 | 		add	t4,sprite_w
3ba48 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3ba4c 8f4             | 
3ba4c 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3ba50 8f5             | 
3ba50 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
3ba54 8f6 01 58 86 F1 | 	 	sub     t6,#1
3ba58 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3ba5c 8f8             | 
3ba5c 8f8 28 58 62 FD |                 setq   	t6
3ba60 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3ba64 8fa 28 5D 02 F6 |                 mov t8,sprite_w
3ba68 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3ba6c 8fc 24 00 90 AD |         if_z    jmp #p898
3ba70 8fd             |          
3ba70 8fd             |         
3ba70 8fd 70 5F 06 F6 |                 mov  t9,#368
3ba74 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3ba78 8ff             | 
3ba78 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3ba7c 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
3ba80 901 FF FF 7F FF 
3ba84 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3ba88 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3ba8c 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
3ba90 905 2D 01 00 F5 |                 and 0-0, t7
3ba94 906             |                
3ba94 906             | 
3ba94 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3ba98 907 E5 E0 7A FA |                 wmlong 368,t3				
3ba9c 908             |                 
3ba9c 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3baa0 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3baa4 90a 2D 00 64 FD |                 ret
3baa8 90b             | 	
3baa8 90b             | 	
3baa8 90b             |                
3baa8 90b             |  
3baa8 90b             | '' -------------- Graphics line ------------------------------------------------------------
3baa8 90b             |  
3baa8 90b             | 
3baa8 90b             | '' consts and vars
3baa8 90b             | 
3baa8 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3baac 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3bab0 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3bab4 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3bab8 90f             | 
3bab8 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3babc 910             | 
3babc 910             | '------ these longs will be set by setmode function
3babc 910             | 
3babc 910 00 00 00 00 | m_bs            long    0        'blanks before sync
3bac0 911 00 00 00 00 | m_sn            long    0        'sync
3bac4 912 00 00 00 00 | m_bv            long    0        'blanks before visible
3bac8 913 00 00 00 00 | m_vi            long    0        'visible pixels #
3bacc 914             | 'm_border        long    0        'left/right borders
3bacc 914 00 00 00 00 | i_upporch       long    0        'up porch lines
3bad0 915 00 00 00 00 | i_vsync         long    0        'vsync lines
3bad4 916 00 00 00 00 | i_downporch     long    0        'down porch lines
3bad8 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3badc 918 00 00 00 00 | i_totalvis      long    0
3bae0 919             | 
3bae0 919             | '-------------------------------------
3bae0 919             |  
3bae0 919 00 00 00 00 | linenum         long    0
3bae4 91a 00 00 00 00 | frames          long    0
3bae8 91b 00 00 00 00 | dlinum long 0
3baec 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3baf0 91d             | 
3baf0 91d 00 00 00 00 | vblankptr       long    0
3baf4 91e 00 00 00 00 | modeptr         long    0
3baf8 91f 00 00 00 00 | paletteptr      long    0
3bafc 920 00 00 00 00 | dlptr           long    0
3bb00 921 01 00 00 00 | hbase           long    1
3bb04 922 00 00 00 00 | mailbox         long    0
3bb08 923 00 00 00 00 | spriteptr          long 0
3bb0c 924             | 
3bb0c 924 00 00 00 00 | cmd             long    0
3bb10 925 00 B0 07 00 | buf1            long    $80000-16384-4096
3bb14 926 00 04 00 00 | buf2            long    1024
3bb18 927 01 00 00 00 | dlptr2          long    1
3bb1c 928 01 00 00 00 | dl              long    1
3bb20 929             | 
3bb20 929 00 00 00 00 | buf1c long 0
3bb24 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
3bb28 92b 01 00 00 00 | framebuf2       long    1
3bb2c 92c 01 00 00 00 | hsync0          long    1
3bb30 92d 01 00 00 00 | hsync1          long    1
3bb34 92e             | 
3bb34 92e 01 00 00 00 | t1              long    1
3bb38 92f 00 00 00 00 | t2 long 0
3bb3c 930 00 00 00 00 | t3 long 0
3bb40 931 00 00 00 00 | t4 long 0
3bb44 932             | 
3bb44 932 00 00 00 00 | rcnt            long    0  'dl repeat count
3bb48 933 00 00 00 00 | rcnt2           long    0
3bb4c 934 00 00 00 00 | rcnt2a          long    0
3bb50 935 00 00 00 00 | roffset         long    0
3bb54 936 00 00 00 00 | rdl             long    0  'dl repeat line
3bb58 937 00 00 00 00 | dlc             long    0  'dl command
3bb5c 938             | 
3bb5c 938 FF FF FF FF | affffffff       long    $ffffffff
3bb60 939 00 00 00 00 | sprite1pointer long 0
3bb64 93a 00 00 00 00 | sprite1xy      long 0
3bb68 93b 00 00 00 00 | sprite1wh      long 0
3bb6c 93c 00 00 00 00 | sprite2pointer long 0
3bb70 93d 00 00 00 00 | sprite2xy      long 0
3bb74 93e 00 00 00 00 | sprite2wh      long 0
3bb78 93f 00 00 00 00 | sprite3pointer long 0
3bb7c 940 00 00 00 00 | sprite3xy      long 0
3bb80 941 00 00 00 00 | sprite3wh      long 0
3bb84 942 00 00 00 00 | sprite4pointer long 0
3bb88 943 00 00 00 00 | sprite4xy      long 0
3bb8c 944 00 00 00 00 | sprite4wh      long 0
3bb90 945 00 00 00 00 | sprite5pointer long 0
3bb94 946 00 00 00 00 | sprite5xy      long 0
3bb98 947 00 00 00 00 | sprite5wh      long 0
3bb9c 948 00 00 00 00 | sprite6pointer long 0
3bba0 949 00 00 00 00 | sprite6xy      long 0
3bba4 94a 00 00 00 00 | sprite6wh      long 0
3bba8 94b 00 00 00 00 | sprite7pointer long 0
3bbac 94c 00 00 00 00 | sprite7xy      long 0
3bbb0 94d 00 00 00 00 | sprite7wh      long 0
3bbb4 94e 00 00 00 00 | sprite8pointer long 0
3bbb8 94f 00 00 00 00 | sprite8xy      long 0
3bbbc 950 00 00 00 00 | sprite8wh      long 0
3bbc0 951 00 00 00 00 | sprite9pointer long 0
3bbc4 952 00 00 00 00 | sprite9xy      long 0
3bbc8 953 00 00 00 00 | sprite9wh      long 0
3bbcc 954 00 00 00 00 | sprite10pointer long 0
3bbd0 955 00 00 00 00 | sprite10xy      long 0
3bbd4 956 00 00 00 00 | sprite10wh      long 0
3bbd8 957 00 00 00 00 | sprite11pointer long 0
3bbdc 958 00 00 00 00 | sprite11xy      long 0
3bbe0 959 00 00 00 00 | sprite11wh      long 0
3bbe4 95a 00 00 00 00 | sprite12pointer long 0
3bbe8 95b 00 00 00 00 | sprite12xy      long 0
3bbec 95c 00 00 00 00 | sprite12wh      long 0
3bbf0 95d 00 00 00 00 | sprite13pointer long 0
3bbf4 95e 00 00 00 00 | sprite13xy      long 0
3bbf8 95f 00 00 00 00 | sprite13wh      long 0
3bbfc 960 00 00 00 00 | sprite14pointer long 0
3bc00 961 00 00 00 00 | sprite14xy      long 0
3bc04 962 00 00 00 00 | sprite14wh      long 0
3bc08 963 00 00 00 00 | sprite15pointer long 0
3bc0c 964 00 00 00 00 | sprite15xy      long 0
3bc10 965 00 00 00 00 | sprite15wh      long 0
3bc14 966 00 00 00 00 | sprite16pointer long 0
3bc18 967 00 00 00 00 | sprite16xy      long 0
3bc1c 968 00 00 00 00 | sprite16wh      long 0
3bc20 969 00 00 00 00 | sprite17pointer long 0
3bc24 96a 00 00 00 00 | sprite17xy      long 0
3bc28 96b 00 00 00 00 | sprite17wh      long 0
3bc2c 96c 00 00 00 00 | sprite18pointer long 0
3bc30 96d 00 00 00 00 | sprite18xy      long 0
3bc34 96e 00 00 00 00 | sprite18wh      long 0
3bc38 96f 00 00 00 00 | spritenum long 0
3bc3c 970             | 
3bc3c 970 00 00 00 00 | spriteline long 0
3bc40 971 84 03 00 00 | sprite_x long 900
3bc44 972 00 00 00 00 | sprite_y long 0
3bc48 973 10 00 00 00 | sprite_w long 16
3bc4c 974 40 00 00 00 | sprite_h long 64
3bc50 975 00 00 00 00 | l2 long 0
3bc54 976 00 00 00 00 | t5 long 0
3bc58 977 00 00 00 00 | t6 long 0
3bc5c 978 00 00 00 00 | t7 long 0
3bc60 979 00 00 00 00 | t8 long 0
3bc64 97a 00 00 00 00 | t9 long 0
3bc68 97b 00 00 00 00 | preloadaddr long 0
3bc6c 97c 00 00 00 00 | preloadlineaddr long 0
3bc70 97d 00 04 00 00 | a1024 long 1024
3bc74 97e             | 
3bc74 97e E0 03 00 00 | aa long 992
3bc78 97f FF 03 00 00 | a1023 long 1023
3bc7c 980 00 10 00 00 | a4096 long 4096
3bc80 981             |  fit 368
3bc80 981             | _psram_spin2_dat_
3bc80 981 00 00 00 00 
      ...             
3bd78 9bf 00 00 00 00 
3bd7c 9c0 00 00 00 00 |     listdata long 0[8*8]
3bd80 9c1             |             orgh
3bd80                 | 
3bd80                 | ' driver state
3bd80     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3bd84     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3bd88                 | 
3bd88                 | ' delay profile
3bd88     07 00 00 00 
3bd8c     00 CF 7B 05 
3bd90     80 D1 F0 08 
3bd94     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3bd98     80 C4 60 0F 
3bd9c     80 39 7A 12 
3bda0     40 2D D9 13 
3bda4     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3bda8                 | 
3bda8                 | ' data to be passed to driver when starting it
3bda8                 | startupData
3bda8     00 00 00 00 |     long    0           ' current frequency
3bdac     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3bdb0     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3bdb4     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3bdb8     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3bdbc     C8 BD 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3bdc0     48 BE 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3bdc4     68 BE 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3bdc8                 | 
3bdc8                 | ' data for memory
3bdc8                 | deviceData
3bdc8                 |     ' 16 bank parameters follow (16MB per bank)
3bdc8     00 00 00 00 
      ...             
3be00     00 00 00 00 
3be04     00 00 00 00 |     long    0[16]                               ' banks 0-15
3be08                 |     ' 16 banks of pin parameters follow
3be08     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3be0c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3be10     FF FF FF FF 
      ...             
3be40     FF FF FF FF 
3be44     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3be48                 | 
3be48                 | ' data for COG polling
3be48                 | qosData 
3be48     00 00 FF FF 
3be4c     00 00 FF FF 
3be50     00 00 FF FF 
3be54     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3be58     00 00 FF FF 
3be5c     00 00 FF FF 
3be60     00 00 FF FF 
3be64     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3be68                 |     
3be68                 | ' mailbox storage
3be68                 | 
3be68                 | mailboxes
3be68     00 00 00 00 
      ...             
3bec0     00 00 00 00 
3bec4     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3bec8                 | 	alignl
3bec8                 | _psram16drv_spin2_dat_
3bec8                 |                             orgh
3bec8     00 00 00 00 
      ...             
3bee0     00 00 00 00 
3bee4     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3bee8                 | 
3bee8                 | driver_start
3bee8                 |                             org
3bee8 000             | '..................................................................................................
3bee8 000             | ' Memory layout for COG RAM once operational:
3bee8 000             | '
3bee8 000             | '  COG RAM address      Usage
3bee8 000             | '  ---------------      ----
3bee8 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3bee8 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3bee8 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3bee8 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3bee8 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3bee8 000             | '  ~$198-$1F3           State and register variables
3bee8 000             | '
3bee8 000             | ' Also during driver COG startup:
3bee8 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3bee8 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3bee8 000             | '..................................................................................................
3bee8 000             |                             
3bee8 000             | ' Mailbox storage after vector initialization
3bee8 000             | 
3bee8 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3beec 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3bef0 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3bef4 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3bef8 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3befc 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3bf00 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3bf04 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3bf08 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3bf0c 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3bf10 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3bf14 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3bf18 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3bf1c 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3bf20 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3bf24 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3bf28 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3bf2c 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3bf30 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3bf34 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3bf38 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3bf3c 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3bf40 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3bf44 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3bf48 018             | 
3bf48 018             | ' Mailbox parameter addresses per COG once patched
3bf48 018             |                             
3bf48 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3bf4c 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3bf50 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3bf54 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3bf58 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3bf5c 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3bf60 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3bf64 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3bf68 020             | 
3bf68 020             | '..................................................................................................
3bf68 020             | ' Per COG request and state setup and service branching
3bf68 020             |         
3bf68 020             | cog0                 
3bf68 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3bf6c 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3bf70 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3bf74 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3bf78 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3bf7c 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3bf80 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3bf84 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3bf88 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3bf8c 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3bf90 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3bf94 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3bf98 02c             | cog1                        
3bf98 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3bf9c 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3bfa0 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3bfa4 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3bfa8 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3bfac 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3bfb0 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3bfb4 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3bfb8 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3bfbc 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3bfc0 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3bfc4 037 33 CA 63 FD |                             execf   request-0               'jump to service
3bfc8 038             | cog2                         
3bfc8 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3bfcc 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3bfd0 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3bfd4 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3bfd8 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3bfdc 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3bfe0 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3bfe4 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3bfe8 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3bfec 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3bff0 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3bff4 043 33 CA 63 FD |                             execf   request-0               'jump to service
3bff8 044             | cog3                        
3bff8 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3bffc 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3c000 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3c004 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3c008 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c00c 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c010 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3c014 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3c018 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3c01c 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c020 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c024 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3c028 050             | cog4                        
3c028 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3c02c 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3c030 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3c034 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3c038 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c03c 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c040 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3c044 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3c048 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3c04c 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c050 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c054 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3c058 05c             | cog5                        
3c058 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3c05c 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3c060 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3c064 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3c068 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c06c 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c070 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3c074 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3c078 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3c07c 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c080 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c084 067 33 CA 63 FD |                             execf   request-0               'jump to service
3c088 068             | cog6                        
3c088 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3c08c 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3c090 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3c094 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3c098 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c09c 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c0a0 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3c0a4 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3c0a8 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3c0ac 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c0b0 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c0b4 073 33 CA 63 FD |                             execf   request-0               'jump to service
3c0b8 074             | cog7                        
3c0b8 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3c0bc 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3c0c0 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3c0c4 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3c0c8 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c0cc 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c0d0 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3c0d4 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3c0d8 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3c0dc 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c0e0 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c0e4 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3c0e8 080             |                             fit     128
3c0e8 080             | 
3c0e8 080             |                             fit     128
3c0e8 080             | pad                         long    0[128-$]                'align init code to $80
3c0e8 080             | 
3c0e8 080             | '..................................................................................................
3c0e8 080             | 
3c0e8 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3c0e8 080             | 
3c0e8 080             | init                        
3c0e8 080             |                             ' get driver scratch long address in hub
3c0e8 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3c0ec 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3c0f0 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3c0f4 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3c0f8 084             |                     
3c0f8 084             |                             ' read in the additional LUT RAM code
3c0f8 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3c0fc 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3c100 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3c104 087             | 
3c104 087             |                             ' read the startup parameters
3c104 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3c108 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3c10c 089             | 
3c10c 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3c10c 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3c110 08a             | 
3c110 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3c114 08b 01 00 00 5F 
3c118 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3c11c 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3c120 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3c124 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3c128 090             | 
3c128 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3c128 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3c12c 091 01 00 00 FF 
3c130 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3c134 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3c138 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3c13c 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3c140 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3c144 097 08 DE 47 F5 |                             or      a, #8
3c148 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3c14c 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3c150 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3c154 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3c158 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3c15c 09d 01 DE 07 F1 |                             add     a, #1
3c160 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3c164 09f             |  
3c164 09f             |                             ' setup device control pin states
3c164 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3c168 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3c16c 0a1 01 00 00 FF 
3c170 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3c174 0a3             | 
3c174 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3c178 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3c17c 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3c180 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3c184 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3c188 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3c18c 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3c190 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3c194 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3c198 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3c19c 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3c1a0 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3c1a4 0af             | pinloop
3c1a4 0af             |                             ' generate minimum CE high time before access
3c1a4 0af A1 07 00 FF 
3c1a8 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3c1ac 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3c1b0 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3c1b4 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3c1b8 0b4 1F DE 63 FD |                             waitx   a                       'delay
3c1bc 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3c1c0 0b6             | 
3c1c0 0b6             |                             ' setup the COG mailboxes and addresses 
3c1c0 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3c1c4 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3c1c8 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3c1cc 0b9             | 
3c1cc 0b9 28 2E 64 FD |                             setq    #24-1
3c1d0 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3c1d4 0bb             | 
3c1d4 0bb             |                             ' setup the polling loop for active COGs 
3c1d4 0bb 01 C2 63 FD |                             cogid   id
3c1d8 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3c1dc 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3c1e0 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3c1e4 0bf 0A F0 07 F6 |                             mov     ptra, #10
3c1e8 0c0 E1 F1 03 FA |                             mul     ptra, id
3c1ec 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3c1f0 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3c1f4 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3c1f8 0c4 03 C2 07 FA |                             mul     id, #3
3c1fc 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3c200 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3c204 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3c208 0c8 D8 01 B0 FD |                             call    #reloadcogs
3c20c 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3c210 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3c214 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3c214 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3c218 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3c21c 0cd 08 04 DC FC |                             rep     #2, #8
3c220 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3c224 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3c228 0d0             | 
3c228 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3c228 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3c228 0d0 01 C2 63 FD |                             cogid   id
3c22c 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3c230 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3c234 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3c238 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3c23c 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3c240 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3c244 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3c248 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3c24c 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3c250 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3c254 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3c258 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3c25c 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3c260 0de A5 E5 03 F1 |                             add     d, const512
3c264 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3c268 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3c26c 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3c270 0e2             |                             
3c270 0e2             |                             ' setup register values for control vector loop setup after we return
3c270 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3c274 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3c278 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3c27c 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3c280 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3c284 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3c288 0e8 D0 C3 8F F9 |                             altd    id, #id0
3c28c 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3c290 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3c294 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3c298 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3c29c 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3c2a0 0ee             |  
3c2a0 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3c2a4 0ef 07 CA 07 F5 |                             and     request, #7
3c2a8 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3c2ac 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3c2b0 0f2             |                             fit     $100                    'ensure all init code fits this space
3c2b0 0f2             | 
3c2b0 0f2             |                             fit     $100                    'ensure all init code fits this space
3c2b0 0f2             | 
3c2b0 0f2 00 00 00 00 
      ...             
3c2e0 0fe 00 00 00 00 
3c2e4 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3c2e8 100             | 
3c2e8 100             | '..................................................................................................
3c2e8 100             | ' Error result handling and COG notification of request completion
3c2e8 100             | 
3c2e8 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3c2ec 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3c2f0 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3c2f4 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3c2f8 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3c2fc 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3c300 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3c304 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3c308 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3c30c 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3c310 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3c314 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3c318 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3c31c 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3c320 10e             | ' Poller re-starts here after a COG is serviced
3c320 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3c324 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3c328 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3c32c 111             | ' Main dynamic polling loop repeats until a request arrives
3c32c 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3c330 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3c334 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3c338 114             | 
3c338 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3c33c 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3c340 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3c344 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3c348 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3c34c 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3c350 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3c354 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3c358 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3c35c 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3c360 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3c364 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3c368 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3c36c 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3c370 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3c374 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3c378 124             | 
3c378 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3c37c 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3c380 126             |  
3c380 126             | '..................................................................................................
3c380 126             | ' List handler                               
3c380 126             | 
3c380 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3c384 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3c388 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3c38c 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3c390 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3c394 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3c398 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3c39c 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3c3a0 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3c3a4 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3c3a8 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3c3ac 131 33 00 60 FD |                             execf   0-0                     'process the request 
3c3b0 132             | 
3c3b0 132             | '..................................................................................................
3c3b0 132             | ' Restoring per COG state and resuming where we left off
3c3b0 132             | 
3c3b0 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3c3b4 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3c3b8 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3c3bc 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3c3c0 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3c3c4 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3c3c8 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3c3cc 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3c3d0 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3c3d4 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3c3d8 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3c3dc 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3c3e0 13e             |                    
3c3e0 13e             | '..................................................................................................
3c3e0 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3c3e0 13e             | 
3c3e0 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3c3e4 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3c3e8 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3c3ec 141 D0 DF B7 F9 |                             setd    a, #id0
3c3f0 142 D8 DF BF F9 |                             sets    a, #addr1
3c3f4 143 FE FF FF FF 
3c3f8 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3c3fc 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3c400 146 3F DE A7 F9 |                             alti    a, #%111_111 
3c404 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3c408 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3c40c 149 01 E2 63 FD |                             cogid   c
3c410 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3c414 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3c418 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3c41c 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3c420 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3c424 14f 00 E0 03 F6 |                             mov     b, 0-0
3c428 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3c42c 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3c430 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3c434 153 0C 00 90 AD |             if_z            jmp     #excluded               
3c438 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3c43c 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3c440 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3c444 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3c448 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3c44c 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3c450 15a             | 
3c450 15a             | 'determine priority cogs and build instructions for the polling sequence
3c450 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3c454 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3c458 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3c45c 15d             | 
3c45c 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3c460 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3c464 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3c468 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3c46c 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3c470 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3c474 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3c478 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3c47c 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3c480 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3c484 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3c488 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3c48c 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3c490 16a             | endprioloop
3c490 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3c494 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3c498 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3c49c 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3c4a0 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3c4a4 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3c4a8 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3c4ac 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3c4b0 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3c4b4 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3c4b8 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3c4bc 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3c4c0 176             | 
3c4c0 176             | ' populate the round robin COG polling instructions
3c4c0 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3c4c4 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3c4c8 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3c4cc 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3c4d0 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3c4d4 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3c4d8 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3c4dc 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3c4e0 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3c4e4 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3c4e8 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3c4ec 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3c4f0 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3c4f4 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3c4f8 184             | '..................................................................................................
3c4f8 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3c4f8 184             | 
3c4f8 184             | set_latency                                                 '            (a) set latency
3c4f8 184             | get_latency                                                 '            (b) get latency
3c4f8 184             | set_burst                                                   '            (c) set burst size of bank
3c4f8 184             | get_burst                                                   '            (d) get burst size of bank
3c4f8 184             |                                                             '            (e) dump state
3c4f8 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3c4fc 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3c500 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3c504 187             |                                                             ' | | | | e  account for following AUGS
3c504 187 04 00 00 FF 
3c508 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3c50c 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3c510 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3c514 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3c518 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3c51c 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3c520 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3c524 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3c528 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3c52c 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3c530 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3c534 193             | 
3c534 193             | '..................................................................................................
3c534 193             | ' Misc EXECF code
3c534 193             | 
3c534 193 33 72 63 FD | start_read_exec             execf   newburstr
3c538 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3c53c 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3c540 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3c544 197             | 
3c544 197             | '..................................................................................................
3c544 197             | ' Variables
3c544 197             | 
3c544 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3c548 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3c54c 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3c550 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3c554 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3c558 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3c55c 19d             | 
3c55c 19d 00 00 00 80 | xfreq1          long    $80000000
3c560 19e 00 00 00 40 | xfreq2          long    $40000000
3c564 19f 03 00 00 00 | delay           long    3
3c568 1a0             | 
3c568 1a0             | lutcodeaddr                 
3c568 1a0             | startupparams
3c568 1a0             | excludedcogs                                    'careful: shared register use!
3c568 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3c56c 1a1 00 00 00 00 | flags           long    0
3c570 1a2             | mask                                            'careful: shared register use!
3c570 1a2 00 00 00 00 | resetmaskA      long    0
3c574 1a3             | limit                                           'careful: shared register use!
3c574 1a3 00 00 00 00 | resetmaskB      long    0
3c578 1a4 00 00 00 00 | datapins        long    0
3c57c 1a5             | const512                                        'careful: shared register use!
3c57c 1a5 00 00 00 00 | devicelist      long    0
3c580 1a6 00 00 00 00 | coglist         long    0
3c584 1a7 00 00 00 00 | mbox            long    0 
3c588 1a8             | 
3c588 1a8             | clkpin                                          'shared with code patched during init
3c588 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3c58c 1a9             | cspin                                           'shared with code patched during init
3c58c 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3c590 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3c594 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3c598 1ac 01 00 00 00 | clkdelay        long    1
3c59c 1ad 00 00 00 00 | regdatabus      long    0
3c5a0 1ae             | 
3c5a0 1ae 10 00 00 00 | deviceaddr      long    $10
3c5a4 1af             | rrcounter
3c5a4 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3c5a8 1b0             | 
3c5a8 1b0             | ' jump addresses for the per COG handlers
3c5a8 1b0 20 00 00 00 | cog0_handler    long    cog0
3c5ac 1b1 2C 00 00 00 | cog1_handler    long    cog1
3c5b0 1b2 38 00 00 00 | cog2_handler    long    cog2
3c5b4 1b3 44 00 00 00 | cog3_handler    long    cog3
3c5b8 1b4 50 00 00 00 | cog4_handler    long    cog4
3c5bc 1b5 5C 00 00 00 | cog5_handler    long    cog5
3c5c0 1b6 68 00 00 00 | cog6_handler    long    cog6
3c5c4 1b7 74 00 00 00 | cog7_handler    long    cog7
3c5c8 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3c5cc 1b9             | 
3c5cc 1b9             | ' EXECF sequences
3c5cc 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3c5d0 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3c5d4 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3c5d8 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3c5dc 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3c5e0 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3c5e4 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3c5e8 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3c5e8 1c0             | 
3c5e8 1c0             | 
3c5e8 1c0             | ' SKIPF sequences
3c5e8 1c0             | skiptable
3c5e8 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3c5ec 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3c5f0 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3c5f4 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3c5f8 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3c5fc 1c5 00 00 00 00 | pattern2        long    0
3c600 1c6 00 00 00 00 | pattern3        long    0
3c604 1c7 77 02 00 00 | singlelong      long    %1001110111  
3c608 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3c60c 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3c610 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3c614 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3c618 1cc             | 
3c618 1cc             | ' LUT RAM address values
3c618 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3c61c 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3c620 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3c624 1cf F6 02 00 00 | noread          long    noread_lut
3c628 1d0             | 
3c628 1d0 00 00 00 00 | id0             long    0
3c62c 1d1 01 00 00 00 | id1             long    1
3c630 1d2 02 00 00 00 | id2             long    2
3c634 1d3 03 00 00 00 | id3             long    3
3c638 1d4 04 00 00 00 | id4             long    4
3c63c 1d5 05 00 00 00 | id5             long    5
3c640 1d6 06 00 00 00 | id6             long    6
3c644 1d7 07 00 00 00 | id7             long    7
3c648 1d8             | 
3c648 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3c648 1d8             | 'and COG updates and need to follow immediately after id0-id7
3c648 1d8 00 00 00 00 | addr1           long    0
3c64c 1d9 00 00 00 00 | hubdata         long    0
3c650 1da 00 00 00 00 | count           long    0
3c654 1db 00 00 00 00 | addr2           long    0
3c658 1dc 00 00 00 00 | total           long    0
3c65c 1dd 00 00 00 00 | offset1         long    0
3c660 1de 00 00 00 00 | offset2         long    0
3c664 1df 00 00 00 00 | link            long    0
3c668 1e0             | 
3c668 1e0             | burstwrite                                      'note shared register use during init
3c668 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3c66c 1e1 00 00 00 00 | id              long    0
3c670 1e2             | 
3c670 1e2 00 00 00 00 | header          long    0
3c674 1e3 00 00 00 00 | trailer         long    0
3c678 1e4 00 00 00 00 | cmdaddr         long    0
3c67c 1e5 00 00 00 00 | request         long    0
3c680 1e6 00 00 00 00 | rrlimit         long    0
3c684 1e7 00 00 00 00 | pinconfig       long    0
3c688 1e8 00 00 00 00 | clks            long    0
3c68c 1e9 00 00 00 00 | resume          long    0
3c690 1ea 00 00 00 00 | orighubsize     long    0
3c694 1eb 00 00 00 00 | wrclks          long    0
3c698 1ec             | 
3c698 1ec 00 00 00 00 | pattern         long    0
3c69c 1ed 00 00 00 00 | hubscratch      long    0
3c6a0 1ee 00 10 00 00 | val4k           long    4096
3c6a4 1ef             | 
3c6a4 1ef             | ' temporary general purpose regs
3c6a4 1ef 00 00 00 00 | a               long    0
3c6a8 1f0 00 00 00 00 | b               long    0
3c6ac 1f1 00 00 00 00 | c               long    0
3c6b0 1f2 00 00 00 00 | d               long    0
3c6b4 1f3             |                 fit     502
3c6b4 1f3             | 
3c6b4 1f3             |                 fit     502
3c6b4 1f3             | 
3c6b4 1f3             | '..................................................................................................
3c6b4 1f3             | 
3c6b4 1f3             |             orgh
3c6b4                 | 
3c6b4                 | lut_code
3c6b4                 | 'HW init code up to 80 longs
3c6b4                 | 
3c6b4                 | '..................................................................................................
3c6b4                 | ' Memory layout for LUT RAM once operational:
3c6b4                 | '
3c6b4                 | '  LUT RAM address      Usage
3c6b4                 | '  ---------------      ----
3c6b4                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3c6b4                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3c6b4                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3c6b4                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3c6b4                 | '
3c6b4                 | ' Also during driver COG startup:
3c6b4                 | ' $230-$24F is used for HW init setup
3c6b4                 | ' $250-$26F is used as temporary vector storage 
3c6b4                 | '..................................................................................................
3c6b4                 | 
3c6b4                 |                 org $230    
3c6b4 230             | 
3c6b4 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3c6b4 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3c6b8 231 24 16 60 FD |                             pollxfi
3c6bc 232 FF AA 2A FF 
3c6c0 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3c6c4 234 28 00 B0 FD |                             call    #sendqspi
3c6c8 235 07 F8 07 FF 
3c6cc 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3c6d0 237 28 00 B0 FD |                             call    #sendspi
3c6d4 238 F8 07 78 FF 
3c6d8 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3c6dc 23a 1C 00 B0 FD |                             call    #sendspi
3c6e0 23b 7F 78 78 FF 
3c6e4 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3c6e8 23d 10 00 B0 FD |                             call    #sendspi 
3c6ec 23e 2D 00 64 FD |                             ret
3c6f0 23f             | 
3c6f0 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3c6f4 240 32 0C 64 FD |                             skipf   #%110
3c6f8 241 9C EF 03 F6 |                             mov     pb, xsendimm
3c6fc 242             | 
3c6fc 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3c700 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3c704 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3c708 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3c70c 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3c710 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3c714 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3c718 249 50 48 63 FD |                             fltl    datapins                'float data bus
3c71c 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3c720 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3c724 24c             | 
3c724 24c 00 00 00 00 
3c728 24d 00 00 00 00 
3c72c 24e 00 00 00 00 
3c730 24f 00 00 00 00 |                 long    0[$270-32-$]
3c734 250             |                 fit     $270-32  ' keep room for 32 vector longs
3c734 250             |     
3c734 250             |                 fit     $270-32  ' keep room for 32 vector longs
3c734 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3c734 250             | rw_vect ' PSRAM jump vectors
3c734 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3c738 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3c73c 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3c740 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3c744 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3c748 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3c74c 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3c750 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3c754 258             | ro_vect ' R/O PSRAM jump vectors
3c754 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3c758 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3c75c 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3c760 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3c764 25c 00 01 00 00 |                 long    unsupported
3c768 25d 00 01 00 00 |                 long    unsupported
3c76c 25e 00 01 00 00 |                 long    unsupported
3c770 25f 00 01 00 00 |                 long    unsupported
3c774 260             | ctrl_vect ' Control jump vectors
3c774 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3c778 261 00 01 00 00 |                 long    unsupported
3c77c 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3c780 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3c784 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3c788 265 00 01 00 00 |                 long    unsupported
3c78c 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3c790 267 3E 01 00 00 |                 long    reconfig 
3c794 268             | no_vect ' Invalid bank jump vectors
3c794 268 01 01 00 00 |                 long    invalidbank
3c798 269 01 01 00 00 |                 long    invalidbank
3c79c 26a 01 01 00 00 |                 long    invalidbank
3c7a0 26b 01 01 00 00 |                 long    invalidbank
3c7a4 26c 01 01 00 00 |                 long    invalidbank
3c7a8 26d 01 01 00 00 |                 long    invalidbank
3c7ac 26e 01 01 00 00 |                 long    invalidbank
3c7b0 26f 01 01 00 00 |                 long    invalidbank
3c7b4 270             |                 fit     $270
3c7b4 270             | 
3c7b4 270             |                 fit     $270
3c7b4 270             | '..................................................................................................
3c7b4 270             | ' PSRAM READS
3c7b4 270             |                                                             ' a b c d e f
3c7b4 270             |                                                             ' B W L B R L  (a) byte read
3c7b4 270             |                                                             ' Y O O U E O  (b) word read
3c7b4 270             |                                                             ' T R N R S C  (c) long read
3c7b4 270             |                                                             ' E D G S U K  (d) new burst read
3c7b4 270             |                                                             '       T M E  (e) resumed sub-burst
3c7b4 270             |                                                             '         E D  (f) locked sub-burst
3c7b4 270             | 
3c7b4 270             | 
3c7b4 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3c7b8 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3c7bc 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3c7c0 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3c7c4 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3c7c8 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3c7cc 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3c7d0 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3c7d4 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3c7d8 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3c7dc 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3c7e0 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3c7e4 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3c7e8 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3c7ec 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3c7f0 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3c7f4 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3c7f8 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3c7fc 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3c800 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3c804 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3c808 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3c80c 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3c810 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3c814 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3c818 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3c81c 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3c820 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3c824 28c             | 
3c824 28c             |                             ' fall through to read bursts
3c824 28c             |                         
3c824 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3c824 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3c828 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3c82c 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3c830 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3c834 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3c838 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3c83c 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3c840 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3c844 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3c848 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3c84c 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3c850 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3c854 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3c858 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3c85c 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3c860 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3c864 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3c868 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3c86c 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3c870 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3c874 2a0 E8 D1 03 F1 |                             add     clks, clks
3c878 2a1             | readcommon
3c878 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3c87c 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3c880 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3c884 2a4             | 
3c884 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3c888 2a5 69 C8 63 FD |                             rev     cmdaddr
3c88c 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3c890 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3c894 2a8             | 
3c894 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3c898 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3c89c 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3c89c 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3c8a0 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3c8a4 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3c8a8 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3c8ac 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3c8ac 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3c8b0 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3c8b4 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3c8b8 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3c8bc 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3c8c0 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3c8c4 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3c8c4 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3c8c8 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3c8cc 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3c8d0 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3c8d4 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3c8d8 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3c8dc 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3c8e0 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3c8e4 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3c8e8 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3c8ec 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3c8f0 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3c8f4 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3c8f8 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3c8fc 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3c8fc 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3c900 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3c904 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3c908 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3c90c 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3c910 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3c914 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3c918 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3c91c 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3c920 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3c924 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3c928 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3c92c 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3c930 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3c934 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3c938 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3c93c 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3c940 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3c944 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3c948 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3c94c 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3c950 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3c954 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3c958 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3c95c 2da 10 03 90 FD |                             jmp     #writecommon
3c960 2db             | 
3c960 2db             | '..................................................................................................
3c960 2db             | ' Burst continuation testing
3c960 2db             | 
3c960 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3c964 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3c968 2dd             | continue_read_lut          
3c968 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3c96c 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3c970 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3c974 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3c978 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3c97c 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3c980 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3c984 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3c988 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3c98c 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3c990 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3c994 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3c998 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3c99c 2ea             | 
3c99c 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3c9a0 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3c9a4 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3c9a8 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3c9ac 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3c9b0 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3c9b4 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3c9b8 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3c9bc 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3c9c0 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3c9c4 2f4 2A 1C 66 0D |             _ret_           push    #poller
3c9c8 2f5             | 
3c9c8 2f5             | 
3c9c8 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3c9cc 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3c9cc 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3c9d0 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3c9d4 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3c9d8 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3c9dc 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3c9e0 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3c9e4 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3c9e8 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3c9ec 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3c9f0 2ff             | '..................................................................................................
3c9f0 2ff             | ' Completion of requests
3c9f0 2ff             | 
3c9f0 2ff             | complete_rw_lut             
3c9f0 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3c9f4 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3c9f8 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3c9fc 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3ca00 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3ca04 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3ca08 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3ca0c 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3ca10 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3ca14 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3ca18 309 32 62 64 AD |             if_z            skipf   #%110001
3ca1c 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3ca20 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3ca24 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3ca28 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3ca2c 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3ca30 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3ca34 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3ca38 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3ca3c 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3ca40 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3ca44 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3ca48 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3ca4c 316             |                                                             ' skipcase (a) gfx copy to/from hub
3ca4c 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3ca4c 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3ca4c 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3ca50 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3ca54 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3ca58 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3ca5c 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3ca60 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3ca64 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3ca68 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3ca6c 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3ca70 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3ca74 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3ca78 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3ca7c 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3ca80 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3ca84 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3ca88 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3ca8c 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3ca90 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3ca94 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3ca98 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3ca9c 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3caa0 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3caa4 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3caa8 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3caac 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3cab0 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3cab4 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3cab8 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3cabc 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3cac0 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3cac4 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3cac8 335 DF B7 03 A6 |             if_z            mov     addr2, link
3cacc 336 34 FF 9F AD |             if_z            jmp     #checknext
3cad0 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3cad4 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3cad8 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3cadc 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3cae0 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3cae4 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3cae8 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3caec 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3caf0 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3caf4 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3caf8 341             | 
3caf8 341             | '..................................................................................................
3caf8 341             | ' PSRAM WRITES
3caf8 341             |                                                             '  a b c d e f g h
3caf8 341             | 
3caf8 341             |                                                             '  B W L F B R L L (a) byte write(s)
3caf8 341             |                                                             '  Y O O I U E O O (b) word write(s)
3caf8 341             |                                                             '  T R N L R S C C (c) long write(s)
3caf8 341             |                                                             '  E D G L S U K K (d) resumed fill
3caf8 341             |                                                             '          T M E E (e) new burst write
3caf8 341             |                                                             '            E D D (f) resumed burst
3caf8 341             |                                                             '              F B (g) locked fill
3caf8 341             |                                                             '              I U (h) locked burst write
3caf8 341             |                                                             '              L R 
3caf8 341             |                                                             '              L S 
3caf8 341             |                                                             '                T 
3caf8 341             | 
3caf8 341             | w_single                   
3caf8 341             | w_fill_cont           
3caf8 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3cafc 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3cb00 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3cb04 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3cb08 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3cb0c 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3cb10 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3cb14 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3cb18 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3cb1c 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3cb20 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3cb24 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3cb28 34d             |                ' disable call to r_resume_burst for single longs when z=0
3cb28 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3cb2c 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3cb30 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3cb34 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3cb38 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3cb3c 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3cb40 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3cb44 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3cb48 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3cb4c 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3cb50 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3cb54 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3cb58 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3cb5c 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3cb60 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3cb64 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3cb68 35d             |         
3cb68 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3cb68 35d             |             '
3cb68 35d             |             '  At least one of these 3 optional components will be sent
3cb68 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3cb68 35d             |             '     body - N x full longs of data
3cb68 35d             |             '     trailer - last partial long of data
3cb68 35d             |             '
3cb68 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3cb68 35d             |             '
3cb68 35d             |             'Case    Type                           Sends
3cb68 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3cb68 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3cb68 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3cb68 35d             |             ' 4)     Multiple long fill             body only
3cb68 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3cb68 35d             | 
3cb68 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3cb68 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3cb6c 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3cb70 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3cb74 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3cb78 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3cb7c 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3cb80 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3cb84 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3cb88 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3cb8c 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3cb90 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3cb94 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3cb98 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3cb9c 36a             |                             
3cb9c 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3cba0 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3cba4 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3cba8 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3cbac 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3cbb0 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3cbb4 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3cbb8 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3cbbc 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3cbc0 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3cbc4 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3cbc8 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3cbcc 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3cbd0 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3cbd4 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3cbd8 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3cbdc 37a             | 
3cbdc 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3cbe0 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3cbe4 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3cbe8 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3cbec 37e             |                  
3cbec 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3cbf0 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3cbf4 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3cbf8 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3cbfc 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3cc00 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3cc04 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3cc08 385             | 
3cc08 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3cc0c 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3cc10 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3cc14 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3cc18 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3cc1c 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3cc20 38b             | 
3cc20 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3cc20 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3cc24 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3cc28 38d 2A B0 63 FD |                             push    addr1                   'save address
3cc2c 38e             | 
3cc2c 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3cc2c 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3cc30 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3cc34 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3cc38 391             |             
3cc38 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3cc3c 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3cc40 393 2B B0 63 FD |                             pop     addr1                   'restore address
3cc44 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3cc48 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3cc4c 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3cc50 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3cc54 398             | 
3cc54 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3cc58 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3cc5c 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3cc60 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3cc64 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3cc68 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3cc6c 39e             | 
3cc6c 39e             |                             'trailer is done
3cc6c 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3cc70 39f             | 
3cc70 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3cc74 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3cc78 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3cc7c 3a2             | 
3cc7c 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3cc80 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3cc84 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3cc88 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3cc8c 3a6             |                             
3cc8c 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3cc90 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3cc94 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3cc98 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3cc9c 3aa             |                                                          
3cc9c 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3cca0 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3cca4 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3cca8 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3ccac 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3ccb0 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3ccb4 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3ccb8 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3ccbc 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3ccc0 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3ccc4 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3ccc8 3b5             |  
3ccc8 3b5 59 52 63 FD |                             drvh    cspin
3cccc 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3ccd0 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3ccd4 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3ccd8 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3ccdc 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3cce0 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3cce4 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3cce8 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3ccec 3be EA E5 03 F6 |                             mov     d, orighubsize
3ccf0 3bf EF E5 63 F0 |                             shl     d, a
3ccf4 3c0 F2 E3 83 F1 |                             sub     c, d
3ccf8 3c1 DD E3 03 F1 |                             add     c, offset1
3ccfc 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3cd00 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3cd04 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3cd08 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3cd0c 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3cd10 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3cd14 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3cd18 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3cd1c 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3cd20 3cb BB D3 03 F6 |                             mov     resume, restorefill
3cd24 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3cd28 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3cd2c 3ce 6C FC BF CD |             if_c            call    #yield
3cd30 3cf 2D 00 64 FD |                             ret
3cd34 3d0             |                            
3cd34 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3cd34 3d0             |                       '     rczl    pa                      'rotate left into address offset
3cd34 3d0             |                       '     rczl    c wcz                   'restore count and flags
3cd34 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3cd38 3d1 02 EC 67 F0 |                             shl     pa, #2
3cd3c 3d2 28 06 64 AD |             if_z            setq    #3
3cd40 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3cd44 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3cd48 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3cd4c 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3cd50 3d7             | 
3cd50 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3cd54 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3cd58 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3cd5c 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3cd60 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3cd64 3dc             |                 fit 1024-32
3cd64 3dc             |         
3cd64 3dc             | 
3cd64 3dc             | '..................................................................................................
3cd64 3dc             | 
3cd64 3dc             |                 fit 1024-32
3cd64 3dc 00 00 00 00 
3cd68 3dd 00 00 00 00 
3cd6c 3de 00 00 00 00 
3cd70 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3cd74 3e0             |                 org 1024-32
3cd74 000             | 
3cd74 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3cd74 000 00 00 00 00 |                 long $0000
3cd78 001 11 11 00 00 |                 long $1111
3cd7c 002 22 22 00 00 |                 long $2222
3cd80 003 33 33 00 00 |                 long $3333
3cd84 004 44 44 00 00 |                 long $4444
3cd88 005 55 55 00 00 |                 long $5555
3cd8c 006 66 66 00 00 |                 long $6666
3cd90 007 77 77 00 00 |                 long $7777
3cd94 008 88 88 00 00 |                 long $8888
3cd98 009 99 99 00 00 |                 long $9999
3cd9c 00a AA AA 00 00 |                 long $aaaa
3cda0 00b BB BB 00 00 |                 long $bbbb
3cda4 00c CC CC 00 00 |                 long $cccc
3cda8 00d DD DD 00 00 |                 long $dddd
3cdac 00e EE EE 00 00 |                 long $eeee
3cdb0 00f FF FF 00 00 |                 long $ffff
3cdb4 010             | 
3cdb4 010             | 'masks
3cdb4 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3cdb8 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3cdbc 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3cdc0 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3cdc4 014             | 
3cdc4 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3cdc8 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3cdcc 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3cdd0 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3cdd4 018             | 
3cdd4 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3cdd8 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3cddc 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3cde0 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3cde4 01c             | 
3cde4 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3cde8 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3cdec 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3cdf0 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3cdf4 020             |         fit 1024
3cdf4 020             | 
3cdf4 020             |         fit 1024
3cdf4 020             | 
3cdf4 020             | '--------------------------------------------------------------------------------------------------
3cdf4 020             |         orgh
3cdf4                 | 
3cdf4                 | gfxexpansion
3cdf4                 |                             'simple line drawing graphics expansion of memory driver
3cdf4                 |                             'jmp     #donerepeats                'just return for now
3cdf4                 | 
3cdf4     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3cdf8     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3cdfc     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3ce00     DD E1 03 F6 |                             mov     b, offset1              'get error term
3ce04     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3ce08     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3ce0c     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3ce10     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3ce14     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3ce18     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3ce1c     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3ce20     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3ce24     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3ce28     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3ce2c     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3ce30     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3ce34     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3ce38     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3ce3c     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3ce40     DC E5 33 F9 |                             getword d, total, #0            'get line width
3ce44     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3ce48     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3ce4c     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3ce50     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3ce54     C3 03 80 FD |                             jmp     #readmask               'continue filling
3ce58                 | 	alignl
3ce58                 | _usbnew_spin2_dat_
3ce58                 |                 org     $000
3ce58 000             | 
3ce58 000             | usb_host_start
3ce58 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3ce5c 001             | 
3ce5c 001 03 00 00 FF 
3ce60 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3ce64 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3ce68 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3ce6c 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3ce70 006 29 70 63 FD |                 setq2   htmp
3ce74 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3ce78 008             | 
3ce78 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3ce7c 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3ce80 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3ce84 00b             | 
3ce84 00b             | '------------------------------------------------------------------------------
3ce84 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3ce84 00b             | ' special because the receiving function must not respond with either STALL or
3ce84 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3ce84 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3ce84 00b             | ' corrupt packet, it must ignore the transaction
3ce84 00b             | '------------------------------------------------------------------------------
3ce84 00b             | ' On entry:
3ce84 00b             | '   PTRA - start address of the SETUP data struct.
3ce84 00b             | ' On exit:
3ce84 00b             | '   retval - PID_ACK on success, otherwise error code.
3ce84 00b             | '------------------------------------------------------------------------------
3ce84 00b             | txn_setup
3ce84 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3ce88 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3ce8c 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3ce90 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3ce94 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3ce98 010             | .setup
3ce98 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3ce9c 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cea0 012 2D 00 64 AD |         if_z    ret
3cea4 013 7C 0B B0 FD |                 call    #retry_wait
3cea8 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3ceac 015 2D 00 64 AD |         if_z    ret
3ceb0 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3ceb4 017 E0 FF 9F FD |                 jmp     #.setup
3ceb8 018             | 
3ceb8 018             | '------------------------------------------------------------------------------
3ceb8 018             | ' IN/INTERRUPT transaction.
3ceb8 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3ceb8 018             | '------------------------------------------------------------------------------
3ceb8 018             | ' On entry:
3ceb8 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3ceb8 018             | '     CRC(b19..23).
3ceb8 018             | ' On exit:
3ceb8 018             | '------------------------------------------------------------------------------
3ceb8 018             | txn_in
3ceb8 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3cebc 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3cec0 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3cec4 01b             | 
3cec4 01b             |                 ' Fall through to urx_packet
3cec4 01b             | 
3cec4 01b             | '------------------------------------------------------------------------------
3cec4 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3cec4 01b             | ' received are handshakes and IN DATAx.
3cec4 01b             | '------------------------------------------------------------------------------
3cec4 01b             | ' On entry:
3cec4 01b             | ' On exit:
3cec4 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3cec4 01b             | '     returned.
3cec4 01b             | '------------------------------------------------------------------------------
3cec4 01b             | urx_packet
3cec4 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3cec8 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3cecc 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3ced0 01e 1A 92 63 FD |                 getct   hct2
3ced4 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3ced8 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3cedc 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3cee0 022             | .wait_sop
3cee0 022 22 A7 8A FA |                 rdpin   urx, dm
3cee4 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3cee8 024 08 00 90 CD |         if_c    jmp     #.get_pid
3ceec 025 FC 25 CC FB |                 jnct2   #.wait_sop
3cef0 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3cef4 027             | .get_pid
3cef4 027 28 02 B0 FD |                 call    #urx_next
3cef8 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3cefc 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3cf00 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3cf04 02b             | .chk_pid
3cf04 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cf08 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3cf0c 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3cf10 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3cf14 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3cf18 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3cf1c 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3cf20 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3cf24 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3cf28 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3cf2c 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3cf30 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3cf34 037             | .ack_resend
3cf34 037 22 A7 82 FA |                 rqpin   urx, dm
3cf38 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3cf3c 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3cf40 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3cf44 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3cf48 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3cf4c 03d             | .chk_eop
3cf4c 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3cf50 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3cf54 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3cf58 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3cf5c 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3cf60 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3cf64 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3cf68 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3cf6c 045 2D 00 64 FD |                 ret
3cf70 046             | .idle
3cf70 046 22 A7 82 FA |                 rqpin   urx, dm
3cf74 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3cf78 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3cf7c 049 2D 00 64 FD |                 ret
3cf80 04a             | 
3cf80 04a             | '------------------------------------------------------------------------------
3cf80 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3cf80 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3cf80 04a             | ' if one is required.
3cf80 04a             | '------------------------------------------------------------------------------
3cf80 04a             | ' On entry:
3cf80 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3cf80 04a             | ' On exit:
3cf80 04a             | '------------------------------------------------------------------------------
3cf80 04a             | utx_token
3cf80 04a 22 A7 82 FA |                 rqpin   urx, dm
3cf84 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3cf88 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3cf8c 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3cf90 04e 34 0D B0 CD |         if_c    call    #utx_pre
3cf94 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3cf98 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3cf9c 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3cfa0 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3cfa4 053             | .next_byte
3cfa4 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3cfa8 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3cfac 055             | .wait
3cfac 055 40 46 72 FD |                 testp   dp                      wc
3cfb0 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3cfb4 057 23 03 08 FC |                 akpin   dp
3cfb8 058 22 A5 22 FC |                 wypin   utx, dm
3cfbc 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3cfc0 05a             | 
3cfc0 05a             | '------------------------------------------------------------------------------
3cfc0 05a             | ' SETUP/OUT/INTERRUPT transaction.
3cfc0 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3cfc0 05a             | '------------------------------------------------------------------------------
3cfc0 05a             | ' On entry:
3cfc0 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3cfc0 05a             | '     CRC(b19..23).
3cfc0 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3cfc0 05a             | '   pkt_data - count of DATAx payload bytes to send.
3cfc0 05a             | ' On exit:
3cfc0 05a             | '------------------------------------------------------------------------------
3cfc0 05a             | txn_out
3cfc0 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3cfc4 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3cfc8 05c 00 00 C0 FF 
3cfcc 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3cfd0 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3cfd4 05f             | 
3cfd4 05f             |                 ' Fall through to utx_data
3cfd4 05f             | 
3cfd4 05f             | '------------------------------------------------------------------------------
3cfd4 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3cfd4 05f             | ' calculated while the data byte is being shifted out. Since data stage
3cfd4 05f             | ' success/fail is not determined until the status stage of the transaction,
3cfd4 05f             | ' this routine is only concerned about the current DATAx packet.
3cfd4 05f             | '------------------------------------------------------------------------------
3cfd4 05f             | ' On entry:
3cfd4 05f             | '   PTRA - hub start address of the data to read.
3cfd4 05f             | '   pkt_cnt - data payload size.
3cfd4 05f             | ' On exit:
3cfd4 05f             | '------------------------------------------------------------------------------
3cfd4 05f             | utx_data
3cfd4 05f 22 A7 82 FA |                 rqpin   urx, dm
3cfd8 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3cfdc 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3cfe0 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3cfe4 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3cfe8 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3cfec 065 D8 0C B0 CD |         if_c    call    #utx_pre
3cff0 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3cff4 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3cff8 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3cffc 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3d000 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3d004 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3d008 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3d00c 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3d010 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3d014 06f             | .read_byte
3d014 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3d018 070 F0 00 B0 FD |                 call    #utx_byte
3d01c 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3d020 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3d024 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3d028 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3d02c 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3d030 076             | .send_crc
3d030 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3d034 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3d038 078 D0 00 B0 FD |                 call    #utx_byte
3d03c 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3d040 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3d044 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3d048 07c             | 
3d048 07c             | '------------------------------------------------------------------------------
3d048 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3d048 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3d048 07c             | ' expects that the packet includes at least the CRC word.
3d048 07c             | '
3d048 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3d048 07c             | ' was requested, which makes it difficult to determine where the data stops
3d048 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3d048 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3d048 07c             | ' USB-16 expected residual value of 0xB001.
3d048 07c             | '
3d048 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3d048 07c             | ' so the caller can verify IN success before writing the data to its final
3d048 07c             | ' destination.
3d048 07c             | '------------------------------------------------------------------------------
3d048 07c             | ' On entry:
3d048 07c             | '   pkt_data - max byte count expected to be in the packet.
3d048 07c             | '   newb_flg - signals new byte ready when toggled.
3d048 07c             | ' On exit:
3d048 07c             | '   pkt_cnt - actual number of bytes read.
3d048 07c             | '------------------------------------------------------------------------------
3d048 07c             | urx_data
3d048 07c F7 75 03 F6 |                 mov     htmp2, pb
3d04c 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3d050 07e 00 00 C0 FF 
3d054 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3d058 080 BA EF 03 F6 |                 mov     pb, htmp2
3d05c 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3d060 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3d064 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3d068 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3d06c 085             | .wait_byte
3d06c 085             | ' In-line rx for max speed
3d06c 085 22 A7 82 FA |                 rqpin   urx, dm
3d070 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3d074 087 53 A5 02 F5 |                 and     utx, urx
3d078 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3d07c 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3d080 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3d084 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3d088 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3d08c 08d DC FF 9F FD |                 jmp     #.wait_byte
3d090 08e             | .get_byte
3d090 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3d094 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3d098 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3d09c 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3d0a0 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3d0a4 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3d0a8 094             | .end_crc
3d0a8 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3d0ac 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3d0b0 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3d0b4 097 2D 00 64 1D |         if_a    ret
3d0b8 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3d0b8 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3d0b8 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3d0b8 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3d0b8 098 22 A7 82 FA |                 rqpin   urx, dm
3d0bc 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3d0c0 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3d0c4 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3d0c4 09b             | .chk_crc
3d0c4 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3d0c8 09c 58 00 00 FF 
3d0cc 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3d0d0 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3d0d4 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3d0d8 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3d0dc 0a1 34 09 B0 FD |                 call    #poll_waitx
3d0e0 0a2             | 
3d0e0 0a2             |                 ' Fall through to utx_handshake
3d0e0 0a2             | 
3d0e0 0a2             | '------------------------------------------------------------------------------
3d0e0 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3d0e0 0a2             | ' the appropriate IP delay has been inserted.
3d0e0 0a2             | '------------------------------------------------------------------------------
3d0e0 0a2             | ' On entry:
3d0e0 0a2             | '   retval - handshake PID to send.
3d0e0 0a2             | ' On exit:
3d0e0 0a2             | '   retval unchanged.
3d0e0 0a2             | '------------------------------------------------------------------------------
3d0e0 0a2             | utx_handshake
3d0e0 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3d0e4 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3d0e8 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3d0ec 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3d0f0 0a6 5F A5 02 F6 |                 mov     utx, retval
3d0f4 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3d0f8 0a8             | .idle
3d0f8 0a8 22 A7 82 FA |                 rqpin   urx, dm
3d0fc 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3d100 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3d104 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3d108 0ac 08 09 90 FD |                 jmp     #poll_waitx
3d10c 0ad             | 
3d10c 0ad             | '------------------------------------------------------------------------------
3d10c 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3d10c 0ad             | '------------------------------------------------------------------------------
3d10c 0ad             | ' On entry:
3d10c 0ad             | '   utx - byte to transmit.
3d10c 0ad             | ' On exit:
3d10c 0ad             | '------------------------------------------------------------------------------
3d10c 0ad             | utx_byte
3d10c 0ad 40 46 72 FD |                 testp   dp                      wc
3d110 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3d114 0af 23 03 08 FC |                 akpin   dp
3d118 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3d11c 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3d120 0b2             | 
3d120 0b2             | '------------------------------------------------------------------------------
3d120 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3d120 0b2             | '------------------------------------------------------------------------------
3d120 0b2             | ' On entry:
3d120 0b2             | ' On exit:
3d120 0b2             | '   retval - the byte read.
3d120 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3d120 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3d120 0b2             | '     received.
3d120 0b2             | '------------------------------------------------------------------------------
3d120 0b2             | urx_next
3d120 0b2 22 A7 8A FA |                 rdpin   urx, dm
3d124 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3d128 0b4 53 A5 02 F5 |                 and     utx, urx
3d12c 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3d130 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3d134 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3d138 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3d13c 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3d140 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3d144 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3d148 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3d14c 0bd 2D 00 64 FD |                 ret
3d150 0be             | 
3d150 0be             | '------------------------------------------------------------------------------
3d150 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3d150 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3d150 0be             | ' length, and the PID is not included in the CRC calculation:
3d150 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3d150 0be             | '  CRC5  ENDP ADDRESS PID
3d150 0be             | ' %00000_1111_1111111_xxxxxxxx
3d150 0be             | '------------------------------------------------------------------------------
3d150 0be             | ' On entry:
3d150 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3d150 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3d150 0be             | ' On exit:
3d150 0be             | '   ep_addr_pid - CRC value appended to the packet.
3d150 0be             | '------------------------------------------------------------------------------
3d150 0be             | calc_crc5
3d150 0be FF 03 00 FF 
3d154 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3d158 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
3d15c 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3d160 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3d164 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
3d168 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3d16c 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3d170 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3d174 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3d178 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3d17c 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
3d180 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3d184 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
3d188 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3d18c 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3d190 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3d194 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3d198 0d0             | 
3d198 0d0             | '------------------------------------------------------------------------------
3d198 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3d198 0d0             | '------------------------------------------------------------------------------
3d198 0d0             | isr1_fsframe
3d198 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3d19c 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3d1a0 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3d1a4 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3d1a8 0d4             | .wait
3d1a8 0d4 40 46 72 FD |                 testp   dp                      wc
3d1ac 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3d1b0 0d6 23 03 08 FC |                 akpin   dp
3d1b4 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3d1b8 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3d1bc 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3d1c0 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3d1c4 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3d1c8 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3d1cc 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3d1d0 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3d1d4 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3d1d8 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3d1dc 0e1 2C FF BF FD |                 call    #utx_byte
3d1e0 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3d1e4 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3d1e8 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3d1ec 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3d1f0 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3d1f4 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3d1f8 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3d1fc 0e9 5B A5 42 F5 |                 or      utx, icrc
3d200 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3d204 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3d208 0ec 20 00 90 FD |                 jmp     #isr1_wait
3d20c 0ed             | isr1_lsframe
3d20c 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3d210 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3d214 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3d218 0f0             | .wait
3d218 0f0 40 46 72 FD |                 testp   dp                      wc
3d21c 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3d220 0f2 23 03 08 FC |                 akpin   dp
3d224 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3d228 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3d22c 0f5             | isr1_wait
3d22c 0f5 22 A5 82 FA |                 rqpin   utx, dm
3d230 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3d234 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3d238 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3d23c 0f9 03 00 00 FF 
3d240 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3d244 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3d248 0fc F5 FF 3B FB |                 reti1
3d24c 0fd             | 
3d24c 0fd             | '------------------------------------------------------------------------------
3d24c 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3d24c 0fd             | ' transaction will complete before the next frame is triggered.
3d24c 0fd             | '------------------------------------------------------------------------------
3d24c 0fd             | ' On entry:
3d24c 0fd             | ' On exit:
3d24c 0fd             | '------------------------------------------------------------------------------
3d24c 0fd             | wait_txn_ok
3d24c 0fd 1A 74 63 FD |                 getct   htmp2
3d250 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
3d254 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3d258 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3d25c 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3d260 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3d264 103 2D 00 64 FD |                 ret
3d268 104             | 
3d268 104             | '------------------------------------------------------------------------------
3d268 104             | ' A device connection was detected, or a bus reset was requested by the USB
3d268 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3d268 104             | ' and perform a reset sequence prior to device enumeration.
3d268 104             | '------------------------------------------------------------------------------
3d268 104             | dev_reset
3d268 104 22 A7 82 FA |                 rqpin   urx, dm
3d26c 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3d270 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3d274 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3d278 108             | reset
3d278 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3d27c 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3d280 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3d284 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3d288 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3d28c 10d 1A 92 62 FD |                 getct   iframe_ct_base
3d290 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3d294 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3d298 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3d29c 111 24 70 07 F1 |                 add     htmp, #36
3d2a0 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3d2a4 113             | .framewait
3d2a4 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
3d2a8 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3d2ac 115 2D 00 64 FD |                 ret
3d2b0 116             | 
3d2b0 116             | '------------------------------------------------------------------------------
3d2b0 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3d2b0 116             | '------------------------------------------------------------------------------
3d2b0 116             | ' On entry:
3d2b0 116             | '   PTRA - source address.
3d2b0 116             | '   PB - destination address.
3d2b0 116             | '   hr0 - length of copy, in bytes.
3d2b0 116             | ' On exit:
3d2b0 116             | '------------------------------------------------------------------------------
3d2b0 116             | hmemcpy
3d2b0 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
3d2b4 117 F7 71 43 FC |                 wrbyte  htmp, pb
3d2b8 118 01 EE 07 F1 |                 add     pb, #1
3d2bc 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3d2c0 11a             | 
3d2c0 11a             | '------------------------------------------------------------------------------
3d2c0 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3d2c0 11a             | ' loop until the errant device is disconnected.
3d2c0 11a             | '------------------------------------------------------------------------------
3d2c0 11a             | ' On entry:
3d2c0 11a             | ' On exit:
3d2c0 11a             | '------------------------------------------------------------------------------
3d2c0 11a             | host_error
3d2c0 11a             |           if ERROR_LED >= 0
3d2c0 11a             |           end
3d2c0 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3d2c4 11b             | 
3d2c4 11b             | '------------------------------------------------------------------------------
3d2c4 11b             | ' Get HID descriptor buffer for current port
3d2c4 11b             | '------------------------------------------------------------------------------
3d2c4 11b             | ' On entry:
3d2c4 11b             | ' On exit:
3d2c4 11b             | '   PB - HID descriptor buffer pointer
3d2c4 11b             | '------------------------------------------------------------------------------
3d2c4 11b             | get_hid_descr_buffer
3d2c4 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3d2c8 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3d2cc 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3d2d0 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3d2d4 11f             | 
3d2d4 11f             | 
3d2d4 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3d2d8 120             | 
3d2d8 120             | ' USB commands and error codes
3d2d8 120 00 00 00 00 | cmd_data        long    0
3d2dc 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3d2e0 122             | 
3d2e0 122             | ' Parameters block assigned at cog startup
3d2e0 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3d2e4 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3d2e8 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3d2ec 125             | if ACTIVITY_LED >= 0
3d2ec 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3d2ec 125             | end
3d2ec 125             | if ERROR_LED >= 0
3d2ec 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3d2ec 125             | end
3d2ec 125 00 00 00 00 | hid_descr_p     long    0
3d2f0 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3d2f0 126             | 'hkbd_report_p   long    0
3d2f0 126 00 00 00 00 | hub_descr_p     long    0
3d2f4 127 00 00 00 00 | urx_buff_p      long    0
3d2f8 128 00 00 00 00 | dev_desc_buff_p long    0
3d2fc 129 00 00 00 00 | con_desc_buff_p long    0
3d300 12a 00 00 00 00 | cache_start_p   long    0
3d304 12b 00 00 00 00 | cache_end_p     long    0
3d308 12c             | if EMUPAD_MAX_PLAYER > 0
3d308 12c             | emupad_out_ptr  long    0
3d308 12c             | end
3d308 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3d30c 12d             | 
3d30c 12d             | hdev_init_start
3d30c 12d             | hdev_port       res     1
3d30c 12d             | hdev_port       res     1
3d30c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3d30c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3d30c 12d             | kbm_next_datax  res     1
3d30c 12d             | kbm_next_datax  res     1
3d30c 12d             | hub_intf_num    res     1
3d30c 12d             | hub_intf_num    res     1
3d30c 12d             | hub_next_datax  res     1
3d30c 12d             | hub_next_datax  res     1
3d30c 12d             | hub_status_chg  res     1
3d30c 12d             | hub_status_chg  res     1
3d30c 12d             | hub_port_status res     1
3d30c 12d             | hub_port_status res     1
3d30c 12d             | if HAVE_MOUSE
3d30c 12d             | ms_intf_num     res     1
3d30c 12d             | ms_intf_num     res     1
3d30c 12d             | ms_in_max_pkt   res     1
3d30c 12d             | ms_in_max_pkt   res     1
3d30c 12d             | end
3d30c 12d             | kb_intf_num     res     1
3d30c 12d             | kb_intf_num     res     1
3d30c 12d             | kb_interval     res     1
3d30c 12d             | kb_interval     res     1
3d30c 12d             | kb_in_max_pkt   res     1
3d30c 12d             | kb_in_max_pkt   res     1
3d30c 12d             | kb_max_index    res     1
3d30c 12d             | kb_max_index    res     1
3d30c 12d             | kb_led_states   res     1
3d30c 12d             | kb_led_states   res     1
3d30c 12d             | gp_intf_num     res     1
3d30c 12d             | gp_intf_num     res     1
3d30c 12d             | gp_interval     res     1
3d30c 12d             | gp_interval     res     1
3d30c 12d             | gp_max_index    res     1
3d30c 12d             | gp_max_index    res     1
3d30c 12d             | gp_descr_len    res     1+MAX_DEVICES
3d30c 12d             | gp_descr_len    res     1+MAX_DEVICES
3d30c 12d             | hdev_init_end
3d30c 12d             | 
3d30c 12d             | ' Initialized at cog startup:
3d30c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3d30c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3d30c 12d             | iframe_ct_new   res     1
3d30c 12d             | iframe_ct_new   res     1
3d30c 12d             | iframe_ct_base  res     1
3d30c 12d             | iframe_ct_base  res     1
3d30c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3d30c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3d30c 12d             | 
3d30c 12d             | ' This register block is reset to zero when a USB device connects
3d30c 12d             | hreg_init_start
3d30c 12d             | hstatus         res     1         ' Host status flags
3d30c 12d             | hstatus         res     1         ' Host status flags
3d30c 12d             | hctwait         res     1         ' Poll-based wait clocks
3d30c 12d             | hctwait         res     1         ' Poll-based wait clocks
3d30c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3d30c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3d30c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3d30c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3d30c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3d30c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3d30c 12d             | xfer_retry      res     1         ' Control transfer retry count
3d30c 12d             | xfer_retry      res     1         ' Control transfer retry count
3d30c 12d             | retry           res     1         ' Transaction retry count
3d30c 12d             | retry           res     1         ' Transaction retry count
3d30c 12d             | utx             res     1         ' Byte to transmit on USB
3d30c 12d             | utx             res     1         ' Byte to transmit on USB
3d30c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3d30c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3d30c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3d30c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3d30c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3d30c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3d30c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3d30c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3d30c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3d30c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3d30c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3d30c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3d30c 12d             | frame           res     1         ' USB 1ms frame counter value
3d30c 12d             | frame           res     1         ' USB 1ms frame counter value
3d30c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3d30c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3d30c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3d30c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3d30c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3d30c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3d30c 12d             | crc             res     1         ' Used for CRC16 calculation
3d30c 12d             | crc             res     1         ' Used for CRC16 calculation
3d30c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3d30c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3d30c 12d             | retval          res     1         ' Global success/fail return parameter
3d30c 12d             | retval          res     1         ' Global success/fail return parameter
3d30c 12d             | context_retval  res     1         ' Operation contextual return parameter
3d30c 12d             | context_retval  res     1         ' Operation contextual return parameter
3d30c 12d             | ' Device stuff
3d30c 12d             | hdev_id         res     1+MAX_DEVICES
3d30c 12d             | hdev_id         res     1+MAX_DEVICES
3d30c 12d             | hdev_bcd        res     1
3d30c 12d             | hdev_bcd        res     1
3d30c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3d30c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3d30c 12d             | ' Keyboard/mouse stuff
3d30c 12d             | hctrl_ep_addr   res     1
3d30c 12d             | hctrl_ep_addr   res     1
3d30c 12d             | hctrl_max_pkt   res     1
3d30c 12d             | hctrl_max_pkt   res     1
3d30c 12d             | hconfig_base    res     1
3d30c 12d             | hconfig_base    res     1
3d30c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3d30c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3d30c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3d30c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3d30c 12d             | hdev_class      res     1
3d30c 12d             | hdev_class      res     1
3d30c 12d             | hdev_subclass   res     1
3d30c 12d             | hdev_subclass   res     1
3d30c 12d             | hdev_protocol   res     1
3d30c 12d             | hdev_protocol   res     1
3d30c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3d30c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3d30c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3d30c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3d30c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3d30c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3d30c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3d30c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3d30c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3d30c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3d30c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3d30c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3d30c 12d             | if HAVE_MOUSE
3d30c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3d30c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3d30c 12d             | end
3d30c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3d30c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3d30c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3d30c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3d30c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3d30c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3d30c 12d             | hdev_out_addr   res     1
3d30c 12d             | hdev_out_addr   res     1
3d30c 12d             | 
3d30c 12d             | if EMUPAD_MAX_PLAYER > 0
3d30c 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3d30c 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3d30c 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3d30c 12d             | end
3d30c 12d             | 
3d30c 12d             | hreg_init_end
3d30c 12d             | 
3d30c 12d             | hidr_start
3d30c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3d30c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3d30c 12d             | hidr_flags      res     1
3d30c 12d             | hidr_flags      res     1
3d30c 12d             | hidr_axis       res     3
3d30c 12d             | hidr_axis       res     3
3d30c 12d             | hidr_buttons    res     1
3d30c 12d             | hidr_buttons    res     1
3d30c 12d             | hidr_hats       res     1
3d30c 12d             | hidr_hats       res     1
3d30c 12d             | '' Above are actually useful values, 6 longs
3d30c 12d             | hidr_id         res     1
3d30c 12d             | hidr_id         res     1
3d30c 12d             | hidr_state      res     1
3d30c 12d             | hidr_state      res     1
3d30c 12d             | hidr_size       res     1
3d30c 12d             | hidr_size       res     1
3d30c 12d             | hidr_count      res     1
3d30c 12d             | hidr_count      res     1
3d30c 12d             | hidr_offset     res     1
3d30c 12d             | hidr_offset     res     1
3d30c 12d             | hidr_usage_idx  res     1
3d30c 12d             | hidr_usage_idx  res     1
3d30c 12d             | hidr_lminmax    res     1
3d30c 12d             | hidr_lminmax    res     1
3d30c 12d             | hidr_pminmax    res     1
3d30c 12d             | hidr_pminmax    res     1
3d30c 12d             | hidr_type       res     1
3d30c 12d             | hidr_type       res     1
3d30c 12d             | hidr_end
3d30c 12d             | 
3d30c 12d             | ' Variables dependent on the system freqency
3d30c 12d             | _var_64_lower_  res     1
3d30c 12d             | _var_64_lower_  res     1
3d30c 12d             | _var_64_upper_  res     1
3d30c 12d             | _var_64_upper_  res     1
3d30c 12d             | _12Mbps_        res     1
3d30c 12d             | _12Mbps_        res     1
3d30c 12d             | _1_5Mbps_       res     1
3d30c 12d             | _1_5Mbps_       res     1
3d30c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3d30c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3d30c 12d             | _1us_           res     1         ' 1us
3d30c 12d             | _1us_           res     1         ' 1us
3d30c 12d             | _10us_          res     1         ' 10us
3d30c 12d             | _10us_          res     1         ' 10us
3d30c 12d             | _33us_          res     1         ' 33us
3d30c 12d             | _33us_          res     1         ' 33us
3d30c 12d             | _txn_err_       res     1         ' 250us
3d30c 12d             | _txn_err_       res     1         ' 250us
3d30c 12d             | _500us_         res     1         ' 500us
3d30c 12d             | _500us_         res     1         ' 500us
3d30c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3d30c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3d30c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3d30c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3d30c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3d30c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3d30c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3d30c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3d30c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3d30c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3d30c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3d30c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3d30c 12d             | _preamble_wait_ res     1
3d30c 12d             | _preamble_wait_ res     1
3d30c 12d             | _1ms_           res     1         ' 1ms
3d30c 12d             | _1ms_           res     1         ' 1ms
3d30c 12d             | _2ms_           res     1         ' 2ms
3d30c 12d             | _2ms_           res     1         ' 2ms
3d30c 12d             | _suspend_wait_  res     1         ' 3ms
3d30c 12d             | _suspend_wait_  res     1         ' 3ms
3d30c 12d             | _4ms_           res     1         ' 4ms
3d30c 12d             | _4ms_           res     1         ' 4ms
3d30c 12d             | _xfer_wait_     res     1         ' 5ms
3d30c 12d             | _xfer_wait_     res     1         ' 5ms
3d30c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3d30c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3d30c 12d             | _reset_hold_    res     1         ' 15ms
3d30c 12d             | _reset_hold_    res     1         ' 15ms
3d30c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3d30c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3d30c 12d             | _21ms_          res     1         ' 21ms
3d30c 12d             | _21ms_          res     1         ' 21ms
3d30c 12d             | _100ms_         res     1         ' 100ms
3d30c 12d             | _100ms_         res     1         ' 100ms
3d30c 12d             | _500ms_         res     1         ' 500ms
3d30c 12d             | _500ms_         res     1         ' 500ms
3d30c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3d30c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3d30c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3d30c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3d30c 12d             | '------------------------------------------------------------------------------
3d30c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3d30c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3d30c 12d             | _usb_d_ls_nco_  res     1
3d30c 12d             | _usb_d_ls_nco_  res     1
3d30c 12d             | _usb_h_fs_nco_  res     1
3d30c 12d             | _usb_h_fs_nco_  res     1
3d30c 12d             | _usb_d_fs_nco_  res     1
3d30c 12d             | _usb_d_fs_nco_  res     1
3d30c 12d             | '------------------------------------------------------------------------------
3d30c 12d             | ' Scratch registers
3d30c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3d30c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3d30c 12d             | htmp1           res     1
3d30c 12d             | htmp1           res     1
3d30c 12d             | htmp2           res     1
3d30c 12d             | htmp2           res     1
3d30c 12d             | htmp3           res     1
3d30c 12d             | htmp3           res     1
3d30c 12d             | hrep            res     1         ' Repeat count
3d30c 12d             | hrep            res     1         ' Repeat count
3d30c 12d             | hsave0          res     1         ' Subroutine parameter saves
3d30c 12d             | hsave0          res     1         ' Subroutine parameter saves
3d30c 12d             | hsave1          res     1
3d30c 12d             | hsave1          res     1
3d30c 12d             | hsave2          res     1
3d30c 12d             | hsave2          res     1
3d30c 12d             | isrtmp1         res     1
3d30c 12d             | isrtmp1         res     1
3d30c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3d30c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3d30c 12d             | hr0             res     1         ' Multi-purpose registers
3d30c 12d             | hr0             res     1         ' Multi-purpose registers
3d30c 12d             | hr1             res     1
3d30c 12d             | hr1             res     1
3d30c 12d             | hr2             res     1
3d30c 12d             | hr2             res     1
3d30c 12d             | hr3             res     1
3d30c 12d             | hr3             res     1
3d30c 12d             | hpar1           res     1         ' Routine entry/exit parameters
3d30c 12d             | hpar1           res     1         ' Routine entry/exit parameters
3d30c 12d             | hpar2           res     1
3d30c 12d             | hpar2           res     1
3d30c 12d             | hpar3           res     1
3d30c 12d             | hpar3           res     1
3d30c 12d             | hct2            res     1         ' Function response bus turn-around timer
3d30c 12d             | hct2            res     1         ' Function response bus turn-around timer
3d30c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3d30c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3d30c 12d             | mod_cnt         res     1         ' Used in idle loops
3d30c 12d             | mod_cnt         res     1         ' Used in idle loops
3d30c 12d             |                 fit     $1F0
3d30c 12d             |                 org     $200
3d30c 200             | hlut_start
3d30c 200             | 
3d30c 200             | '------------------------------------------------------------------------------
3d30c 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3d30c 200             | ' settings to startup defaults.
3d30c 200             | '------------------------------------------------------------------------------
3d30c 200             | ' On entry:
3d30c 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3d30c 200             | '------------------------------------------------------------------------------
3d30c 200             | set_speed_full
3d30c 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3d310 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3d314 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3d318 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3d31c 204             | '                ret                             wcz     ' Restore caller flags on exit
3d31c 204             | 
3d31c 204             | '------------------------------------------------------------------------------
3d31c 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3d31c 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3d31c 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3d31c 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3d31c 204             | ' putting the smart pins into reset.
3d31c 204             | '------------------------------------------------------------------------------
3d31c 204             | ' On entry:
3d31c 204             | ' On exit: CZ flags restored to caller states
3d31c 204             | '------------------------------------------------------------------------------
3d31c 204             | set_speed_low
3d31c 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3d320 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3d324 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3d328 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3d32c 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3d330 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3d334 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3d338 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3d33c 20c             | 
3d33c 20c             | '------------------------------------------------------------------------------
3d33c 20c             | ' Perform configuration stuff required when a device intitially connects.
3d33c 20c             | '------------------------------------------------------------------------------
3d33c 20c             | ' On entry:
3d33c 20c             | ' On exit:
3d33c 20c             | '------------------------------------------------------------------------------
3d33c 20c             | on_connect
3d33c 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3d340 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3d344 20e             | .retry
3d344 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3d348 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3d34c 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3d350 211 00 08 00 FF 
3d354 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3d358 213 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3d35c 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3d360 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3d364 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3d368 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3d36c 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d370 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3d374 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3d378 21b 4C 03 B0 FD |                 call    #poll_waitx
3d37c 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3d380 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3d384 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3d388 21f B8 FF 9F FD |                 jmp     #.retry
3d38c 220             | .get_dev_desc
3d38c 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3d390 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3d394 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3d398 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
3d39c 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3d3a0 225 88 FB BF FD |                 call    #reset
3d3a4 226 30 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3d3a8 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3d3ac 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3d3b0 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3d3b4 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d3b8 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3d3bc 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
3d3c0 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3d3c4 22e 04 00 00 FF 
3d3c8 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3d3cc 230 34 FA BF FD |                 call    #calc_crc5
3d3d0 231 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3d3d4 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3d3d8 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3d3dc 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3d3e0 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3d3e4 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3d3e8 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d3ec 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3d3f0 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3d3f4 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3d3f8 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3d3fc 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
3d400 23d C4 02 B0 FD |                 call    #poll_waitx
3d404 23e 20 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3d408 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3d40c 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3d410 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3d414 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3d418 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d41c 244 2D 00 64 5D |         if_nz   ret
3d420 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3d424 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3d428 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3d42c 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3d430 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3d434 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3d438 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3d43c 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3d440 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3d444 24e 2C FB 9F CD |         if_b    jmp     #host_error
3d448 24f 10 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3d44c 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3d450 251 2D EC 63 FD |                 call    pa
3d454 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3d458 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3d45c 254 2C EC 63 FD |                 jmp     pa
3d460 255             | 
3d460 255             | '------------------------------------------------------------------------------
3d460 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3d460 255             | ' Status reporting is always in the function-to-host direction.
3d460 255             | '------------------------------------------------------------------------------
3d460 255             | ' On entry:
3d460 255             | '   PTRA - start address of the SETUP data in hub.
3d460 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3d460 255             | '     stage.
3d460 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3d460 255             | ' On exit:
3d460 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3d460 255             | '     contains the count of data stage bytes actually received, which must
3d460 255             | '     always be <= the count requested.
3d460 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3d460 255             | '     more specific USB operation error code.
3d460 255             | '------------------------------------------------------------------------------
3d460 255             | control_read
3d460 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3d464 256 F8 8F 03 F6 |                 mov     hpar2, ptra
3d468 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3d46c 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3d470 259             | .xfer_start
3d470 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3d474 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3d478 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d47c 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3d480 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3d484 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3d488 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3d48c 260 61 00 00 FF 
3d490 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3d494 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3d498 263             | .data
3d498 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3d49c 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3d4a0 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3d4a4 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3d4a8 267             | .nak_retry
3d4a8 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3d4ac 268             | .in_retry
3d4ac 268 BC F6 BF FD |                 call    #txn_in
3d4b0 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3d4b4 26a 28 00 90 AD |         if_z    jmp     #.commit
3d4b8 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3d4bc 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3d4c0 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3d4c4 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3d4c8 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3d4cc 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3d4d0 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3d4d4 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3d4d8 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3d4dc 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3d4e0 275             | .commit
3d4e0 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3d4e4 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3d4e8 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3d4ec 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
3d4f0 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3d4f4 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3d4f8 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3d4fc 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3d500 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3d504 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3d508 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3d50c 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3d510 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3d514 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3d518 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3d51c 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3d520 285             | .pre_status
3d520 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3d524 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3d528 287 00 B0 06 F6 |                 mov     pkt_data, #0
3d52c 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3d530 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3d534 28a 61 00 00 FF 
3d538 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3d53c 28c             | .out_retry
3d53c 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3d540 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d544 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3d548 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3d54c 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3d550 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3d554 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3d558 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3d55c 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3d560 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3d564 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3d568 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3d568 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3d568 297             | ' ControlRead() transfer gets things unstuck most of the time...
3d568 297             | .xfer_retry
3d568 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
3d56c 298 58 01 B0 FD |                 call    #poll_waitx
3d570 299 8C F9 BF FD |                 call    #wait_txn_ok
3d574 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3d578 29b C7 F1 03 F6 |                 mov     ptra, hpar2
3d57c 29c C8 EF 03 F6 |                 mov     pb, hpar3
3d580 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3d584 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3d588 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3d58c 2a0             | 
3d58c 2a0             | '------------------------------------------------------------------------------
3d58c 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3d58c 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3d58c 2a0             | ' the SETUP data struct is filled with the required values.
3d58c 2a0             | '------------------------------------------------------------------------------
3d58c 2a0             | ' On entry:
3d58c 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3d58c 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3d58c 2a0             | '     stage.
3d58c 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3d58c 2a0             | ' On exit:
3d58c 2a0             | '   retval - used to convey the success/failure of each stage.
3d58c 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3d58c 2a0             | '     more specific USB operation error code.
3d58c 2a0             | '------------------------------------------------------------------------------
3d58c 2a0             | control_write
3d58c 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3d590 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3d594 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3d598 2a3             | 
3d598 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3d59c 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
3d5a0 2a5 F7 91 03 F6 |                 mov     hpar3, pb
3d5a4 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3d5a8 2a7             | .xfer_start
3d5a8 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3d5ac 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3d5b0 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3d5b4 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d5b8 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3d5bc 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3d5c0 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3d5c4 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3d5c8 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3d5cc 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3d5d0 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3d5d4 2b2             | .data
3d5d4 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3d5d8 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3d5dc 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3d5e0 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3d5e4 2b6             | .out_retry
3d5e4 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3d5e8 2b7 88 F6 BF FD |                 call    #txn_out
3d5ec 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d5f0 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3d5f4 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3d5f8 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3d5fc 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3d600 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3d604 2be             | .commit
3d604 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3d608 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3d60c 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3d610 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3d614 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3d618 2c3             | pre_status_in
3d618 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3d61c 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3d620 2c5             | .status_retry
3d620 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3d624 2c6 44 F5 BF FD |                 call    #txn_in
3d628 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3d62c 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3d630 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3d634 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3d638 2cb 2D 00 64 AD |         if_z    ret
3d63c 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3d640 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3d644 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3d648 2cf             | '               ret                                     ' Caller must handle transfer retirement
3d648 2cf             | 
3d648 2cf             | '------------------------------------------------------------------------------
3d648 2cf             | ' Execute an IN interrupt transaction.
3d648 2cf             | '------------------------------------------------------------------------------
3d648 2cf             | ' On entry:
3d648 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3d648 2cf             | '   hpar2 - Address of the IN data buffer
3d648 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3d648 2cf             | ' On exit:
3d648 2cf             | '   retval - the result of the operation.
3d648 2cf             | '   hpar3 - the count of IN data bytes actually received.
3d648 2cf             | '------------------------------------------------------------------------------
3d648 2cf             | do_int_in
3d648 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3d64c 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3d650 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3d654 2d2             | 
3d654 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
3d658 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3d65c 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3d660 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3d664 2d6             | .retry
3d664 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3d668 2d7 00 F5 BF FD |                 call    #txn_in
3d66c 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3d670 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3d674 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3d678 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3d67c 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3d680 2dd 54 00 B0 FD |                 call    #retry_wait
3d684 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3d688 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3d68c 2e0 D4 FF 9F FD |                 jmp     #.retry
3d690 2e1             | .commit
3d690 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3d694 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3d698 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3d69c 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3d6a0 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3d6a4 2e6             | .post_ret
3d6a4 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3d6a8 2e7             | 
3d6a8 2e7             | 
3d6a8 2e7             | '------------------------------------------------------------------------------
3d6a8 2e7             | ' Resets the downstream hub port to FS
3d6a8 2e7             | '------------------------------------------------------------------------------
3d6a8 2e7             | dwnstream_reset
3d6a8 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3d6ac 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3d6b0 2e9             | 
3d6b0 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3d6b4 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3d6b8 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3d6bc 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3d6c0 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3d6c4 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3d6c8 2ef             | 
3d6c8 2ef             | '------------------------------------------------------------------------------
3d6c8 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3d6c8 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3d6c8 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3d6c8 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3d6c8 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3d6c8 2ef             | '------------------------------------------------------------------------------
3d6c8 2ef             | ' On entry:
3d6c8 2ef             | '   hctwait - wait interval in sysclocks.
3d6c8 2ef             | ' On exit:
3d6c8 2ef             | '------------------------------------------------------------------------------
3d6c8 2ef             | poll_waitx
3d6c8 2ef 1A 92 63 FD |                 getct   hct2
3d6cc 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
3d6d0 2f1             | .wait
3d6d0 2f1 FF 25 CC FB |                 jnct2   #.wait
3d6d4 2f2 2D 00 64 FD |                 ret
3d6d8 2f3             | 
3d6d8 2f3             | '------------------------------------------------------------------------------
3d6d8 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3d6d8 2f3             | '------------------------------------------------------------------------------
3d6d8 2f3             | ' On entry:
3d6d8 2f3             | '   retval - transaction response PID or error code.
3d6d8 2f3             | ' On exit:
3d6d8 2f3             | '------------------------------------------------------------------------------
3d6d8 2f3             | retry_wait
3d6d8 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3d6dc 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3d6e0 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3d6e4 2f6 14 00 90 AD |         if_z    jmp     #.nak
3d6e8 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3d6ec 2f8 D8 FF BF FD |                 call    #poll_waitx
3d6f0 2f9             | .dec
3d6f0 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3d6f4 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3d6f8 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3d6fc 2fc             | .nak
3d6fc 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3d700 2fd C4 FF BF FD |                 call    #poll_waitx
3d704 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3d708 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3d70c 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3d710 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3d714 302 2D 00 64 FD |                 ret
3d718 303             | 
3d718 303             | host_reset
3d718 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3d71c 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3d720 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3d720 305 BD 01 05 FF 
3d724 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3d728 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3d72c 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3d730 309             | ' Check to see if the system clock has been changed.
3d730 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3d734 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3d738 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3d73c 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3d740 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3d744 30e 40 46 62 FD |                 dirl    dp
3d748 30f             | 
3d748 30f 28 02 64 FD |                 setq    #1
3d74c 310 80 00 80 FF 
3d750 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3d754 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3d758 313             | .enable
3d758 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3d75c 314 41 46 62 FD |                 dirh    dp
3d760 315 1F 36 63 FD |                 waitx   _1us_
3d764 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3d768 317             | 
3d768 317             |                 ' Handle Port protection enable and startup delay
3d768 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
3d76c 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3d770 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3d774 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3d778 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3d77c 31c             | 
3d77c 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3d780 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3d784 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3d788 31f 00 00 04 F6 |                 mov     0-0, #0
3d78c 320             | .regloop
3d78c 320             | 
3d78c 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3d78c 320             | 
3d78c 320             | discon_entry
3d78c 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3d790 321             | 
3d790 321             |               
3d790 321             |         if HAVE_HIDPAD
3d790 321 D4 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3d794 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3d798 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3d79c 324 F7 01 68 FC |                 wrlong  #0,pb
3d7a0 325             |         end
3d7a0 325             |         if EMUPAD_MAX_PLAYER > 0
3d7a0 325             |         end
3d7a0 325             | 
3d7a0 325             |                 ' Fall through to disconnected loop
3d7a0 325             | 
3d7a0 325             | '-----------------------------------------------------------------------------------------------------------------
3d7a0 325             | ' Device connect handling (Section 7.1.7.3).
3d7a0 325             | '-----------------------------------------------------------------------------------------------------------------
3d7a0 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3d7a0 325             | ' device to connect (Section 7.1.7.3).
3d7a0 325             | '-----------------------------------------------------------------------------------------------------------------
3d7a0 325             | disconnected
3d7a0 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3d7a4 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3d7a8 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3d7ac 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3d7b0 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3d7b4 32a             |         if ACTIVITY_LED >= 0
3d7b4 32a             |         end
3d7b4 32a 22 A7 82 FA |                 rqpin   urx, dm
3d7b8 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3d7bc 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3d7c0 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3d7c4 32e             | .se1_test
3d7c4 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3d7c8 32f FC FE BF FD |                 call    #poll_waitx
3d7cc 330 22 A7 82 FA |                 rqpin   urx, dm
3d7d0 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3d7d4 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3d7d8 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3d7dc 334             | .se1            'SE1 is a fatal error condition
3d7dc 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
3d7e0 335 E4 FE BF FD |                 call    #poll_waitx
3d7e4 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3d7e8 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3d7ec 338             | .connect_test                                           ' Test lines until stable J/K state seen
3d7ec 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3d7f0 339 22 A7 82 FA |                 rqpin   urx, dm
3d7f4 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3d7f8 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3d7fc 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3d800 33d             | connected
3d800 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3d804 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3d808 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3d80c 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3d810 341             | .set_pulse
3d810 341 1A 64 63 FD |                 getct   _pulse_time_
3d814 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3d818 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3d818 343             | ' of 1ms and make a correction, if necessary.
3d818 343             | '                mov     htmp, _1ms_
3d818 343             | '                subs    htmp, iframe_delta
3d818 343             | '                adds    _frame1ms_clks_, htmp
3d818 343             | '                debug(udec(_frame1ms_clks_))
3d818 343             | 
3d818 343             |                 ' Fall through to idle/processing loop
3d818 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3d81c 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3d820 345             | 
3d820 345             | hidle
3d820 345 22 A7 82 FA |                 rqpin   urx, dm
3d824 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3d828 347 98 00 90 CD |         if_c    jmp     #.se0_test
3d82c 348 24 06 70 FD |                 pollct3                         wc
3d830 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3d834 34a 1A 94 63 FD |                 getct   hct3
3d838 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3d83c 34c             | 
3d83c 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3d840 34d 00 70 E3 F8 |                 getbyte htmp
3d844 34e             | 
3d844 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
3d848 34f 84 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3d84c 350 40 00 90 AD |         if_z    jmp     #.poll
3d850 351             | 
3d850 351             |         if _HAVE_GAMEPAD
3d850 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
3d854 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3d858 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3d85c 354 0C 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3d860 355 2C 00 90 AD |         if_z    jmp     #.poll
3d864 356             |         end
3d864 356             | 
3d864 356             |         if HAVE_MOUSE
3d864 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3d868 357 30 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3d86c 358 20 00 90 AD |         if_z    jmp     #.poll
3d870 359             |         end
3d870 359             | 
3d870 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
3d874 35a 98 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3d878 35b 14 00 90 AD |         if_z    jmp     #.poll
3d87c 35c             | 
3d87c 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
3d880 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3d884 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3d888 35f 98 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3d88c 360             |         if HAVE_MOUSE
3d88c 360 30 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3d890 361             |         else
3d890 361             |         end
3d890 361             | 
3d890 361             | .poll
3d890 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3d894 362 2D EC 63 FD |                 call    pa
3d898 363             | .skip_poll
3d898 363             | 
3d898 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3d89c 364             | 
3d89c 364             | .nopoll
3d89c 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3d8a0 365 44 00 90 AD |         if_z    jmp     #hsuspend
3d8a4 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3d8a8 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3d8ac 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3d8b0 369 1A 84 63 FD |                 getct   hr0
3d8b4 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3d8b8 36b             |         if ACTIVITY_LED >= 0
3d8b8 36b             |         end
3d8b8 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
3d8bc 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
3d8c0 36d 5C FF 9F FD |                 jmp     #hidle
3d8c4 36e             | ' Check for extended SE0 state on the bus
3d8c4 36e             | .se0_test
3d8c4 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
3d8c8 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3d8cc 370 22 A7 82 FA |                 rqpin   urx, dm
3d8d0 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3d8d4 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3d8d8 373 24 F6 BF FD |                 call    #wait_txn_ok
3d8dc 374 00 00 80 FF 
3d8e0 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3d8e4 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3d8e4 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3d8e8 377             | 
3d8e8 377             | hsuspend
3d8e8 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3d8ec 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3d8f0 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3d8f4 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3d8f8 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3d8fc 37c 00 96 07 F6 |                 mov     mod_cnt, #0
3d900 37d             | 
3d900 37d             |                 ' Fall through to resume wait loop
3d900 37d             | 
3d900 37d             | hwait_resume
3d900 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3d904 37e 02 86 47 F0 |                 shr     hr1, #2
3d908 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3d90c 380             |         if ACTIVITY_LED >= 0
3d90c 380             |         end
3d90c 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3d910 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3d914 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3d918 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3d91c 384 18 00 90 AD |         if_z    jmp     #.resume
3d920 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3d924 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3d928 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3d92c 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3d930 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3d934 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3d938 38b             | .resume
3d938 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3d93c 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3d940 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3d944 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
3d948 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3d94c 390 1F 70 63 FD |                 waitx   htmp
3d950 391 22 07 28 FC |                 wypin   #OUT_J, dm
3d954 392 01 70 47 F0 |                 shr     htmp, #1
3d958 393 1F 70 63 FD |                 waitx   htmp
3d95c 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3d960 395 1A 92 62 FD |                 getct   iframe_ct_base
3d964 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3d968 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3d96c 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3d970 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
3d974 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3d978 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3d97c 39c             | 
3d97c 39c             | '------------------------------------------------------------------------------
3d97c 39c             | ' Send preamble to enable low-speed HUB ports
3d97c 39c             | '------------------------------------------------------------------------------
3d97c 39c             | ' On entry:
3d97c 39c             | ' On exit:
3d97c 39c             | '   USB baud rate set to low-speed
3d97c 39c             | '------------------------------------------------------------------------------
3d97c 39c             | utx_pre
3d97c 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3d980 39d 40 46 62 FD |                 dirl    dp
3d984 39e 28 02 64 FD |                 setq    #1
3d988 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3d98c 3a0 58 44 62 FD |                 drvl    dm
3d990 3a1 59 46 62 FD |                 drvh    dp
3d994 3a2             | 
3d994 3a2 1E 00 00 FF 
3d998 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3d99c 3a4             | 
3d99c 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3d9a0 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
3d9a4 3a6 28 02 64 3D |         if_nc   setq    #1
3d9a8 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3d9ac 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
3d9b0 3a9             | .l1
3d9b0 3a9             | 
3d9b0 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3d9b4 3aa 40 46 62 FD |                 dirl    dp
3d9b8 3ab 28 02 64 FD |                 setq    #1
3d9bc 3ac 80 00 80 FF 
3d9c0 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3d9c4 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3d9c8 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3d9cc 3b0 41 46 62 FD |                 dirh    dp
3d9d0 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3d9d4 3b2             | 
3d9d4 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3d9d8 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3d9dc 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3d9e0 3b5             | 
3d9e0 3b5             | hlut_end
3d9e0 3b5             |                 fit     $400
3d9e0 3b5             |                 orgh
3d9e0                 | if OVERLAP_MEMORY
3d9e0                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3d9e0                 | end
3d9e0                 | '------------------------------------------------------------------------------
3d9e0                 | ' Routines called from cog space.
3d9e0                 | '------------------------------------------------------------------------------
3d9e0                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3d9e0                 | '------------------------------------------------------------------------------
3d9e0                 | 
3d9e0                 | '------------------------------------------------------------------------------
3d9e0                 | ' USB host cog initialization.
3d9e0                 | '------------------------------------------------------------------------------
3d9e0                 | usb_host_init
3d9e0                 |                 ' Initialize buffer pointers
3d9e0                 |         if OVERLAP_MEMORY
3d9e0                 |         else
3d9e0     3C 15 B0 FE |                 loc     pb, #hid_descr
3d9e4                 |         end
3d9e4     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3d9e8                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3d9e8                 |                 {
3d9e8                 |                 }
3d9e8                 |         
3d9e8                 |                 {
3d9e8                 |                 }
3d9e8                 |                 'loc     pb,#hkbd_report
3d9e8                 |                 'mov     hkbd_report_p,pb
3d9e8                 | 
3d9e8     04 1D B0 FE |                 loc     pb, #hub_descr
3d9ec     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3d9f0     19 1D B0 FE |                 loc     pb, #urx_buff
3d9f4     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3d9f8     91 1D B0 FE |                 loc     pb, #dev_desc_buff
3d9fc     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3da00     9B 1D B0 FE |                 loc     pb, #con_desc_buff
3da04     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3da08     14 15 B0 FE |                 loc     pb, #usb_cache_start
3da0c     F7 55 02 F6 |                 mov     cache_start_p, pb
3da10     E5 1C B0 FE |                 loc     pb, #usb_cache_end
3da14     F7 57 02 F6 |                 mov     cache_end_p, pb
3da18                 | 
3da18                 |         if ERROR_LED >= 0
3da18                 |         end
3da18                 | 
3da18                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3da18                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3da18                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3da18                 | ' Configure and enable the Serial Host USB port.
3da18     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3da1c                 | 
3da1c                 | '------------------------------------------------------------------------------
3da1c                 | ' Timing calculations happen before any interrupt(s) are enabled.
3da1c                 | '------------------------------------------------------------------------------
3da1c                 | ' On entry:
3da1c                 | '   htmp - current CLKFREQ value.
3da1c                 | '------------------------------------------------------------------------------
3da1c                 | hinit_usb_timings
3da1c                 | '                getct   htmp2
3da1c     B8 59 02 F6 |                 mov     save_sysclk, htmp
3da20     8D 5B 80 FF 
3da24     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3da28     18 30 63 FD |                 getqx   _12Mbps_
3da2c     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3da30     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3da34     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3da38     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3da3c     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3da40     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3da44     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
3da48     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3da4c     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3da50     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3da54     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3da58     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
3da5c     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3da60     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3da64     80 00 00 FF 
3da68     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3da6c     18 2C 63 FD |                 getqx   _var_64_lower_
3da70     19 2E 63 FD |                 getqy   _var_64_upper_
3da74     28 2C 63 FD |                 setq    _var_64_lower_
3da78     65 CD 1D FF 
3da7c     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3da80     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3da84     01 00 00 FF 
3da88     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3da8c     18 2C 63 FD |                 getqx   _var_64_lower_
3da90     19 2E 63 FD |                 getqy   _var_64_upper_
3da94     28 2C 63 FD |                 setq    _var_64_lower_
3da98     A1 07 00 FF 
3da9c     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
3daa0     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3daa4     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3daa8     09 36 57 F0 |                 shr     _1us_, #9               wc
3daac     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3dab0     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3dab4     18 38 63 FD |                 getqx   _10us_
3dab8     09 38 57 F0 |                 shr     _10us_, #9              wc
3dabc     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
3dac0     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3dac4     18 3A 63 FD |                 getqx   _33us_
3dac8     09 3A 57 F0 |                 shr     _33us_, #9              wc
3dacc     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
3dad0     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3dad4     18 3C 63 FD |                 getqx   _txn_err_
3dad8     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
3dadc     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3dae0     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3dae4     18 3E 63 FD |                 getqx   _500us_
3dae8     09 3E 57 F0 |                 shr     _500us_, #9             wc
3daec     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
3daf0     01 00 00 FF 
3daf4     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3daf8     18 40 63 FD |                 getqx   _txn_ok_ls_
3dafc     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3db00     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3db04     01 00 00 FF 
3db08     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3db0c     18 42 63 FD |                 getqx   _txn_ok_fs_
3db10     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3db14     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3db18     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3db1c     05 00 00 FF 
3db20     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3db24     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3db28     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
3db2c     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3db30     1C 00 00 FF 
3db34     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3db38     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3db3c     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3db40     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3db44     00 00 00 FF 
3db48     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3db4c     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3db50     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
3db54     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3db58     04 00 00 FF 
3db5c     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3db60     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3db64     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
3db68     8D 5B 00 FF 
3db6c     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3db70     18 4C 63 FD |                 getqx   _preamble_wait_
3db74     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3db78     01 00 00 FF 
3db7c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3db80     18 2C 63 FD |                 getqx   _var_64_lower_
3db84     19 2E 63 FD |                 getqy   _var_64_upper_
3db88     28 2C 63 FD |                 setq    _var_64_lower_
3db8c     01 00 00 FF 
3db90     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3db94     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3db98     09 4E 57 F0 |                 shr     _1ms_, #9               wc
3db9c     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3dba0     FF FF 7F FF 
3dba4     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
3dba8     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3dbac     A7 51 03 F6 |                 mov     _2ms_, _1ms_
3dbb0     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3dbb4     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
3dbb8     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3dbbc     A7 55 03 F6 |                 mov     _4ms_, _1ms_
3dbc0     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3dbc4     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
3dbc8     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3dbcc     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3dbd0     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
3dbd4     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3dbd8     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3dbdc     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3dbe0     A7 59 03 F6 |                 mov     _8ms_, _1ms_
3dbe4     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3dbe8     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3dbec     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3dbf0     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3dbf4     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3dbf8     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3dbfc     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3dc00     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3dc04     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3dc08     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3dc0c     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3dc10                 | '        _ret_   mov     _1sec_, save_sysclk
3dc10                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3dc10                 | '                ret
3dc10                 | {
3dc10                 | }
3dc10                 | 
3dc10                 | '------------------------------------------------------------------------------
3dc10                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3dc10                 | ' one. If it is, start the task progression that will configure the device for
3dc10                 | ' use.
3dc10                 | '------------------------------------------------------------------------------
3dc10                 | ' On entry:
3dc10                 | '   hconfig_base - start address of the cached config descriptor chain.
3dc10                 | ' On exit:
3dc10                 | '------------------------------------------------------------------------------
3dc10                 | hparse_con_desc
3dc10     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3dc14     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3dc18     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3dc1c     4E 70 FF F9 |                 movbyts htmp,#%%1032
3dc20     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3dc24                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3dc24                 | 
3dc24     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3dc28     6E ED 03 F1 |                 add     pa, hconfig_base
3dc2c     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3dc30                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3dc30                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3dc30                 | ' that defines a keyboard and/or mouse.
3dc30     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3dc34                 | .next_intf
3dc34     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3dc38     B8 01 90 3D |         if_ae   jmp     #hset_config
3dc3c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3dc40     75 F3 03 F1 |                 add     ptrb, hnext_desc
3dc44     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3dc48     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3dc4c     0C 00 90 AD |         if_z    jmp     #.intf
3dc50     80 71 C7 FA |                 rdbyte  htmp, ptrb
3dc54     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3dc58     D8 FF 9F FD |                 jmp     #.next_intf
3dc5c                 | .intf
3dc5c     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3dc60     00 90 07 F6 |                 mov     hpar3, #0
3dc64     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3dc68     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3dc6c     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3dc70     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3dc74                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3dc74                 | 
3dc74                 | .endp
3dc74     80 71 C7 FA |                 rdbyte  htmp, ptrb
3dc78     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3dc7c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3dc80     78 00 90 3D |         if_ae   jmp     #.get_device
3dc84     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3dc88     75 F3 03 F1 |                 add     ptrb, hnext_desc
3dc8c     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3dc90     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3dc94     64 00 90 AD |         if_z    jmp     #.get_device
3dc98     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3dc9c     04 00 90 AD |         if_z    jmp     #.get_ep
3dca0     D0 FF 9F FD |                 jmp     #.endp
3dca4                 | .get_ep
3dca4     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3dca8     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3dcac     0F 86 67 F0 |                 shl     hr1, #8 + 7
3dcb0     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
3dcb4     3F 00 00 FF 
3dcb8     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
3dcbc     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
3dcc0     00 8E 0F F2 |                 cmp     hpar2, #0               wz
3dcc4     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3dcc8     00 90 0F F2 |                 cmp     hpar3, #0               wz
3dccc     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3dcd0     A0 FF 9F FD |                 jmp     #.endp
3dcd4                 | .in_ep
3dcd4     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3dcd8     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3dcdc                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3dcdc     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3dce0     C2 89 DB F8 |                 setbyte hr2, hr0, #3
3dce4     8C FF 9F FD |                 jmp     #.endp
3dce8                 | .out_ep
3dce8     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3dcec     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3dcf0                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3dcf0     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3dcf4     C2 8B DB F8 |                 setbyte hr3, hr0, #3
3dcf8     78 FF 9F FD |                 jmp     #.endp
3dcfc                 | 
3dcfc                 | .get_device
3dcfc     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3dd00     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3dd04     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3dd08     64 00 90 AD |         if_z    jmp     #.gamepad
3dd0c     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3dd10     A8 00 90 AD |         if_z    jmp     #.hub
3dd14     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3dd18     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3dd1c                 |  '               cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3dd1c     00 E6 0E F2 |            cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3dd20     4C 00 90 AD |         if_z    jmp     #.gamepad
3dd24     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3dd28     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3dd2c                 | .keyboard
3dd2c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3dd30                 |         if HAVE_MOUSE
3dd30     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3dd34                 |         else
3dd34                 |         end
3dd34     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3dd38     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
3dd3c     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3dd40     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
3dd44     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3dd48     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3dd4c                 |                 'debug(udec(kb_intf_num))
3dd4c                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3dd4c     E4 FE 9F FD |                 jmp     #.next_intf
3dd50                 | if HAVE_MOUSE
3dd50                 | .mouse
3dd50     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3dd54     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3dd58     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3dd5c     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
3dd60     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3dd64                 |                 'getbyte ms_interval, hr2, #3
3dd64     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3dd68     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3dd6c                 |                 'debug(udec(kb_intf_num))
3dd6c                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3dd6c     C4 FE 9F FD |                 jmp     #.next_intf
3dd70                 | end
3dd70                 | .gamepad
3dd70     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3dd74     C7 71 63 F5 |                 xor     htmp, hpar2
3dd78     3F 00 00 FF 
3dd7c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3dd80     B0 FE 9F AD |         if_z    jmp     #.next_intf
3dd84                 |         if HAVE_MOUSE
3dd84     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3dd88     C7 71 63 F5 |                 xor     htmp, hpar2
3dd8c     3F 00 00 FF 
3dd90     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3dd94     9C FE 9F AD |         if_z    jmp     #.next_intf
3dd98                 |         end
3dd98     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3dd9c     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3dda0     90 FE 9F 5D |         if_nz   jmp     #.next_intf
3dda4                 | 
3dda4     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3dda8     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3ddac     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3ddb0     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3ddb4     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3ddb8                 |                 'debug(udec(gp_intf_num))
3ddb8                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3ddb8     78 FE 9F FD |                 jmp     #.next_intf
3ddbc                 | .hub
3ddbc     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3ddc0     70 FE 9F 5D |         if_nz   jmp     #.next_intf
3ddc4     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3ddc8     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3ddcc     64 FE 9F 5D |         if_nz   jmp     #.next_intf
3ddd0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3ddd4     5C FE 9F 5D |         if_nz   jmp     #.next_intf
3ddd8     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3dddc     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3dde0     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3dde4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3dde8     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3ddec     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3ddf0                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3ddf0     40 FE 9F FD |                 jmp     #.next_intf
3ddf4                 | 
3ddf4                 | '------------------------------------------------------------------------------
3ddf4                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3ddf4                 | ' it according to its function, or functions. In the case of this boot protocol
3ddf4                 | ' keyboard/mouse class driver:
3ddf4                 | ' - SetConfiguration(config_num)
3ddf4                 | ' - SetProtocol(boot)
3ddf4                 | ' - SetIdle(indefinite)
3ddf4                 | ' - Enter the device interrupt IN polling task stage.
3ddf4                 | '------------------------------------------------------------------------------
3ddf4                 | ' On entry:
3ddf4                 | ' On exit:
3ddf4                 | '------------------------------------------------------------------------------
3ddf4                 | hset_config
3ddf4                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3ddf4                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3ddf4     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3ddf8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3ddfc     00 00 0C F2 |                 cmp     0-0, #0                 wz
3de00     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3de04                 |         if HAVE_MOUSE
3de04     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3de08                 |         end
3de08     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3de0c     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3de10                 | .set_config
3de10     6C 0E D0 FE |                 loc     ptra, #set_config
3de14     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3de18     6E ED 03 F1 |                 add     pa, hconfig_base
3de1c     F6 8D C3 FA |                 rdbyte  hpar1, pa
3de20     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3de24     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3de28     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3de2c     A0 02 A0 FD |                 call    #control_write
3de30     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3de34     2D 00 64 5D |         if_nz   ret
3de38                 | .kbd_config
3de38     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3de3c     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3de40                 | 
3de40     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3de44     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3de48     3F 00 00 FF 
3de4c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3de50     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3de54                 | 
3de54     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3de58     34 0E D0 FE |                 loc     ptra, #set_protocol
3de5c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3de60     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3de64     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3de68     A0 02 A0 FD |                 call    #control_write
3de6c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3de70     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3de74     E4 02 90 5D |         if_nz   jmp     #.notify_client
3de78     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3de7c     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3de80     30 03 B0 FD |                 call    #hset_idle
3de84                 |                 'cmp     retval, #PID_ACK        wz
3de84                 |         'if_nz   mov     hkbd_ep_addr, #0
3de84                 |         'if_nz   jmp     #.notify_client
3de84     A8 99 02 F6 |                 mov     hctwait, _2ms_
3de88     EF 02 A0 FD |                 call    #poll_waitx
3de8c     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3de90     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3de94     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3de98     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3de9c     2C 03 B0 FD |                 call    #hset_kbdled_report
3dea0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3dea4     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3dea8     B0 02 90 5D |         if_nz   jmp     #.notify_client
3deac     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3deb0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3deb4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3deb8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3debc     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3dec0     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3dec4     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3dec8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3decc     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3ded0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3ded4     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3ded8                 |         if !!HAVE_MOUSE
3ded8                 |         end
3ded8                 | 
3ded8                 | .mouse_config
3ded8                 | if HAVE_MOUSE
3ded8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3dedc     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3dee0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3dee4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3dee8     3F 00 00 FF 
3deec     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3def0     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3def4                 | 
3def4                 |                 debug("mouse passed addr check")
3def4                 | 
3def4     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3def8     00 00 80 FF 
3defc     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3df00     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3df04     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3df08     55 02 A0 FD |                 call    #control_read
3df0c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3df10     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3df14     44 02 90 5D |         if_nz   jmp     #.notify_client
3df18     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3df1c     56 01 00 F6 |                 mov     0-0, total_data
3df20     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3df24                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3df24                 | 
3df24     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3df28     64 0D D0 FE |                 loc     ptra, #set_protocol
3df2c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3df30     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3df34     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3df38     A0 02 A0 FD |                 call    #control_write
3df3c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3df40     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3df44     14 02 90 5D |         if_nz   jmp     #.notify_client
3df48                 |                 debug("mouse passed SetProtocol")
3df48     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3df4c     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3df50     60 02 B0 FD |                 call    #hset_idle
3df54                 |                 'cmp     retval, #PID_ACK        wz
3df54                 |         'if_nz   mov     hmouse_ep_addr, #0
3df54                 |         'if_nz   jmp     #.notify_client
3df54                 |                 debug("mouse passed SetIdle")
3df54     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3df58     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3df5c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3df60     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3df64     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3df68     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3df6c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3df70     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3df74     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
3df78     3F 00 00 FF 
3df7c     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3df80     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3df84     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3df88     D0 01 90 FD |                 jmp     #.notify_client
3df8c                 | end
3df8c                 | .gamepad_config
3df8c                 | if _HAVE_GAMEPAD
3df8c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3df90     00 00 0C F2 |                 cmp     0-0, #0                 wz
3df94     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3df98     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3df9c     00 70 03 F6 |                 mov     htmp, 0-0
3dfa0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3dfa4     3F 00 00 FF 
3dfa8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3dfac     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3dfb0                 | 
3dfb0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3dfb4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3dfb8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3dfbc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3dfc0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3dfc4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3dfc8     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3dfcc     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3dfd0     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3dfd4     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3dfd8     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3dfdc     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3dfe0     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3dfe4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3dfe8                 | 
3dfe8                 |                 if EMUPAD_MAX_PLAYER > 0
3dfe8                 |                 
3dfe8                 | .rule_loop           
3dfe8                 |                 end
3dfe8                 | 
3dfe8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3dfec     5C 00 90 AD |         if_e    jmp     #.xinput
3dff0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3dff4     00 70 03 F6 |                 mov     htmp,0-0
3dff8     01 A6 02 FF 
3dffc     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3e000     7C 00 90 AD |         if_e    jmp     #.ps3
3e004                 | 
3e004     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3e008     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3e00c     00 00 80 5F 
3e010     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3e014     03 00 80 AF 
3e018     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3e01c     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3e020     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3e024     55 02 A0 FD |                 call    #control_read
3e028     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e02c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3e030     00 00 04 56 |         if_nz   mov     0-0, #0
3e034     24 01 90 5D |         if_nz   jmp     #.notify_client
3e038     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3e03c     56 01 00 F6 |                 mov     0-0, total_data
3e040     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3e044                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3e044                 | 
3e044     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3e048     10 01 90 FD |                 jmp     #.notify_client
3e04c                 | .xinput
3e04c     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3e050     2D EF 03 F6 |                 mov     pb,hdev_port
3e054     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3e058     03 EE 27 F3 |                 fle     pb,#3
3e05c     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3e060     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3e064                 | 
3e064     03 B0 06 F6 |                 mov     pkt_data, #3
3e068     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3e06c     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3e070     5A 00 A0 FD |                 call    #txn_out
3e074     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3e078                 | 
3e078     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
3e07c     DC 00 90 FD |                 jmp     #.notify_client
3e080                 | .ps3
3e080     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3e084     2D EF 03 F6 |                 mov     pb,hdev_port
3e088     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3e08c     04 EE 27 F3 |                 fle     pb,#4
3e090     F7 EF C3 F9 |                 decod   pb
3e094     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3e098                 | 
3e098     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3e09c     00 0C D0 FE |                 loc     ptra, #set_report
3e0a0     01 00 80 FF 
3e0a4     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3e0a8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3e0ac     03 61 5C FC |                 wrword  #48, ptra[wLength]
3e0b0     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3e0b4     A0 02 A0 FD |                 call    #control_write
3e0b8                 | 
3e0b8     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3e0bc     E0 0B D0 FE |                 loc     ptra, #set_report
3e0c0     01 00 80 FF 
3e0c4     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3e0c8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3e0cc     03 09 5C FC |                 wrword  #4, ptra[wLength]
3e0d0     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3e0d4     A0 02 A0 FD |                 call    #control_write
3e0d8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3e0dc     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3e0e0     00 00 04 56 |         if_nz   mov     0-0, #0
3e0e4     74 00 90 5D |         if_nz   jmp     #.notify_client
3e0e8                 | 
3e0e8     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3e0ec     6C 00 90 FD |                 jmp     #.notify_client
3e0f0                 | end
3e0f0                 | 
3e0f0                 | .hub_config
3e0f0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3e0f4     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3e0f8     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
3e0fc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3e100     3F 00 00 FF 
3e104     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3e108     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3e10c                 | 
3e10c     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3e110     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3e114     26 EF 03 F6 |                 mov     pb, hub_descr_p
3e118     55 02 A0 FD |                 call    #control_read
3e11c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e120     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3e124     34 00 90 5D |         if_nz   jmp     #.notify_client
3e128                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3e128                 | 
3e128     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3e12c     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3e130     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3e134                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3e134                 | .pwr_loop
3e134     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3e138     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3e13c     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
3e140     A0 02 A0 FD |                 call    #control_write
3e144     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
3e148                 | 
3e148     B1 99 02 F6 |                 mov     hctwait, _500ms_
3e14c     B0 99 02 F1 |                 add     hctwait, _100ms_
3e150     EF 02 A0 FD |                 call    #poll_waitx
3e154                 | 
3e154     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3e158     00 00 90 FD |                 jmp     #.notify_client
3e15c                 | 
3e15c                 | .notify_client
3e15c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3e160     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3e164                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3e164                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3e164     2D 00 64 FD |                 ret
3e168                 | 
3e168                 | '------------------------------------------------------------------------------
3e168                 | ' Initialize the keyboard/mouse data area to start-up values.
3e168                 | '------------------------------------------------------------------------------
3e168                 | ' On entry:
3e168                 | ' On exit:
3e168                 | '------------------------------------------------------------------------------
3e168                 | init_kbdm_data
3e168     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3e16c     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3e170                 | 
3e170     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3e174     2B ED 03 F6 |                 mov     pa, cache_end_p
3e178                 | .loop
3e178     61 01 4C FC |                 wrbyte  #0, ptra++
3e17c     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3e180     F4 FF 9F CD |         if_b    jmp     #.loop
3e184                 |         
3e184                 |         if EMUPAD_MAX_PLAYER > 0
3e184                 |         end
3e184                 | 
3e184                 | 
3e184     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3e188                 | .regloop
3e188     00 EC 8F F9 |                 altd    pa
3e18c     00 00 04 F6 |                 mov     0-0, #0
3e190     01 EC 07 F1 |                 add     pa, #1
3e194     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3e198     EC FF 9F 5D |         if_nz   jmp     #.regloop
3e19c                 | 
3e19c     E1 E1 61 FF 
3e1a0     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3e1a4     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3e1a8     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3e1ac     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3e1b0                 | 
3e1b0     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3e1b4                 | 
3e1b4                 | '------------------------------------------------------------------------------
3e1b4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3e1b4                 | ' function.
3e1b4                 | '------------------------------------------------------------------------------
3e1b4                 | ' On entry:
3e1b4                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3e1b4                 | '   hpar2 - index number of the target interface.
3e1b4                 | ' On exit:
3e1b4                 | '------------------------------------------------------------------------------
3e1b4                 | hset_idle
3e1b4     A8 99 02 F6 |                 mov     hctwait, _2ms_
3e1b8     EF 02 A0 FD |                 call    #poll_waitx
3e1bc     D8 0A D0 FE |                 loc     ptra, #set_idle
3e1c0     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
3e1c4     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
3e1c8     A0 02 80 FD |                 jmp     #control_write
3e1cc                 | 
3e1cc                 | '------------------------------------------------------------------------------
3e1cc                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3e1cc                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3e1cc                 | '------------------------------------------------------------------------------
3e1cc                 | ' On entry:
3e1cc                 | '   ep_addr_pid - device address and enpoint for the request.
3e1cc                 | ' On exit:
3e1cc                 | '   retval - transaction result.
3e1cc                 | '------------------------------------------------------------------------------
3e1cc                 | hset_kbdled_report
3e1cc     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3e1d0     CC 0A D0 FE |                 loc     ptra, #set_report
3e1d4     01 00 80 FF 
3e1d8     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3e1dc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3e1e0     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3e1e4     27 EF 03 F6 |                 mov     pb, urx_buff_p
3e1e8     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3e1ec     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3e1f0                 | 
3e1f0                 | '------------------------------------------------------------------------------
3e1f0                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3e1f0                 | '------------------------------------------------------------------------------
3e1f0                 | ' On entry:
3e1f0                 | ' On exit:
3e1f0                 | '------------------------------------------------------------------------------
3e1f0                 | hget_kbd_in_report
3e1f0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3e1f4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3e1f8     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3e1fc     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3e200     CF 02 A0 FD |                 call    #do_int_in
3e204     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e208     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3e20c                 | 
3e20c     00 90 0F F2 |                 cmp     hpar3, #0               wz
3e210     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3e214                 | 
3e214     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3e218     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3e21c     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3e220     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3e224                 | 
3e224     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3e228     18 00 B0 FD |                 call    #hkbd_compare
3e22c                 |         if EMUPAD_MAX_PLAYER > 0
3e22c                 |         end
3e22c                 | 
3e22c                 | .led_check
3e22c     3B 71 03 F6 |                 mov     htmp, kb_led_states
3e230     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3e234     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3e238     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3e23c     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3e240     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3e244                 | 
3e244                 | '------------------------------------------------------------------------------
3e244                 | ' Compare current and previous keyboard data buffers for keypress changes.
3e244                 | '------------------------------------------------------------------------------
3e244                 | hkbd_compare
3e244     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3e248     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
3e24c     61 73 07 FB |                 rdlong  htmp1, ptra++
3e250     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3e254     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
3e258     61 73 07 FB |                 rdlong  htmp1, ptra++
3e25c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3e260     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3e264     2D 00 64 AD |         if_z    ret
3e268                 | 
3e268     B4 13 D0 FE |                 loc     ptra, #hkbd_report
3e26c                 | 
3e26c                 |                 ' Handle modifiers
3e26c     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
3e270     00 87 C7 FA |                 rdbyte  hr1, ptra
3e274     C7 87 43 F9 |                 rolword hr1,hpar2,#0
3e278     63 86 63 FD |                 mergew  hr1
3e27c     08 EC 07 F6 |                 mov     pa,#8
3e280                 | .modloop
3e280     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3e284     E8 8C 07 F6 |                 mov     hpar1,#$E8
3e288     F6 8D 83 F1 |                 sub     hpar1,pa
3e28c     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3e290     FB ED 6F FB |                 djnz    pa,#.modloop
3e294                 | 
3e294     6F E0 75 FD | .release        modc    _set    wc
3e298                 |                 'alts    hdev_port, #hid_report_p
3e298                 |                 'mov     ptra, hid_report_p
3e298     02 F0 07 F1 |                 add     ptra, #2
3e29c     06 EC 07 F6 |                 mov     pa, #6
3e2a0     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3e2a4     20 00 90 AD |         if_z    jmp     #.rl3
3e2a8     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3e2ac     02 F2 07 F1 |                 add     ptrb, #2
3e2b0     06 EE 07 F6 |                 mov     pb, #6
3e2b4     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
3e2b8     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3e2bc     08 00 90 AD |         if_z    jmp     #.rl3
3e2c0     FC EF 6F FB |                 djnz    pb, #.rl2
3e2c4     68 00 B0 FD |                 call    #hkbd_translate
3e2c8     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3e2cc                 | 
3e2cc     00 90 07 F6 |                 mov     hpar3, #0
3e2d0     1F 90 27 F4 |                 bith    hpar3, #31
3e2d4                 | 
3e2d4     6F 00 74 FD | .press          modc    _clr    wc
3e2d8     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3e2dc     02 F0 07 F1 |                 add     ptra, #2
3e2e0     06 EC 07 F6 |                 mov     pa, #6
3e2e4     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3e2e8     20 00 90 AD |         if_z    jmp     #.pl3
3e2ec     30 13 F0 FE |                 loc     ptrb, #hkbd_report
3e2f0     02 F2 07 F1 |                 add     ptrb, #2
3e2f4     06 EE 07 F6 |                 mov     pb, #6
3e2f8     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
3e2fc     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3e300     08 00 90 AD |         if_z    jmp     #.pl3
3e304     FC EF 6F FB |                 djnz    pb, #.pl2
3e308     24 00 B0 FD |                 call    #hkbd_translate
3e30c     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3e310                 | 
3e310     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3e314     08 13 F0 FE |                 loc     ptrb, #hkbd_report
3e318     28 02 64 FD |                 setq #1
3e31c     61 73 07 FB |                 rdlong  htmp1, ptra++
3e320     28 02 64 FD |                 setq #1
3e324     E1 73 67 FC |                 wrlong  htmp1, ptrb++
3e328     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3e32c                 | 
3e32c     2D 00 64 FD |                 ret
3e330                 | 
3e330                 | '------------------------------------------------------------------------------
3e330                 | ' Translate keyboard scancode to ASCII
3e330                 | '------------------------------------------------------------------------------
3e330                 | ' On entry:
3e330                 | '   hpar1 - scancode
3e330                 | '   hpar2 - key modifiers state
3e330                 | '       c - pressed (0) or released (1) flag
3e330                 | ' On exit:
3e330                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3e330                 | '               30..17 = unused
3e330                 | '                   18 = scroll-lock state 
3e330                 | '                   17 = caps-lock state
3e330                 | '                   16 = num-lock state 
3e330                 | '                15..8 = key modifiers state
3e330                 | '                 7..0 = scancode
3e330                 | '------------------------------------------------------------------------------
3e330                 | hkbd_translate
3e330     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3e334     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3e338     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3e33c     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3e340     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3e344     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3e348                 | 
3e348                 |         if EMUPAD_MAX_PLAYER > 0
3e348                 | 
3e348                 |         if EMUPAD_BT0_BIT >= 0
3e348                 |         end
3e348                 |         if EMUPAD_BT1_BIT >= 0
3e348                 |         end
3e348                 |         if EMUPAD_BT2_BIT >= 0
3e348                 |         end
3e348                 |         if EMUPAD_BT3_BIT >= 0
3e348                 |         end
3e348                 |         if EMUPAD_BT4_BIT >= 0
3e348                 |         end
3e348                 |         if EMUPAD_BT5_BIT >= 0
3e348                 |         end
3e348                 |         if EMUPAD_BT6_BIT >= 0
3e348                 |         end
3e348                 |         if EMUPAD_BT7_BIT >= 0
3e348                 |         end
3e348                 |         if EMUPAD_BT8_BIT >= 0
3e348                 |         end
3e348                 |         if EMUPAD_BT9_BIT >= 0
3e348                 |         end
3e348                 | 
3e348                 |         end
3e348     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
3e34c     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3e350     1F 8C 47 F4 |                 bitc    hpar1, #31
3e354                 |         if KEYQUEUE_SIZE > 0
3e354     C4 09 B0 FE |                 loc pb,#keyq_head
3e358     F7 71 E3 FA |                 rdword htmp,pb
3e35c     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3e360     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3e364     B8 75 03 F6 |                 mov htmp2,htmp
3e368     04 74 07 FA |                 mul htmp2,#4
3e36c     F7 75 03 F1 |                 add htmp2,pb
3e370     02 74 07 F1 |                 add htmp2,#2
3e374     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3e378     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3e37c     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
3e380     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3e384                 |         end
3e384     2D 00 7C FD |                 ret wcz
3e388                 | 
3e388                 | if HAVE_MOUSE
3e388                 | '------------------------------------------------------------------------------
3e388                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3e388                 | '------------------------------------------------------------------------------
3e388                 | ' On entry:
3e388                 | ' On exit:
3e388                 | '------------------------------------------------------------------------------
3e388                 | hget_mouse_in_report
3e388     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3e38c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3e390     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3e394     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3e398     CF 02 A0 FD |                 call    #do_int_in
3e39c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e3a0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3e3a4                 | 
3e3a4     00 90 0F F2 |                 cmp     hpar3, #0               wz
3e3a8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3e3ac                 | 
3e3ac     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3e3b0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3e3b4     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3e3b8     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3e3bc                 | 
3e3bc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3e3c0     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
3e3c4     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
3e3c8     01 90 87 31 |         if_ae   sub     hpar3, #1
3e3cc                 | 
3e3cc     40 09 90 FE |                 loc     pa, #mouse_limits
3e3d0     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
3e3d4                 | 
3e3d4                 |                 ' load xacc,yacc,zacc
3e3d4     28 04 64 FD |                 setq    #3-1
3e3d8     80 87 07 FB |                 rdlong  hr1,ptrb
3e3dc                 |                 ' load limits and outptr
3e3dc     28 04 64 FD |                 setq    #3-1
3e3e0     F6 73 03 FB |                 rdlong  htmp1,pa
3e3e4                 | 
3e3e4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
3e3e8     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
3e3ec     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
3e3f0     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
3e3f4     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
3e3f8     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
3e3fc     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
3e400     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
3e404                 |               
3e404                 | 
3e404     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
3e408     07 70 67 F7 |                 signx   htmp, #7
3e40c     B8 87 03 F1 |                 add     hr1,htmp
3e410     00 72 0F F2 |                 cmp     htmp1,#0 wz
3e414     B9 87 63 53 |         if_ne   fles    hr1,htmp1
3e418     00 86 47 53 |         if_ne   fges    hr1,#0
3e41c                 | 
3e41c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
3e420     07 70 67 F7 |                 signx   htmp, #7
3e424     B8 89 03 F1 |                 add     hr2,htmp
3e428     00 74 0F F2 |                 cmp     htmp2,#0 wz
3e42c     BA 89 63 53 |         if_ne   fles    hr2,htmp2
3e430     00 88 47 53 |         if_ne   fges    hr2,#0
3e434                 |                 
3e434                 | 
3e434     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
3e438     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
3e43c     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
3e440     B8 8B 03 A1 |         if_z    add     hr3,htmp
3e444                 | 
3e444     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3e448     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3e44c                 | 
3e44c                 |                 ' write back accumulators
3e44c     28 04 64 FD |                 setq    #3-1
3e450     80 87 67 FC |                 wrlong  hr1,ptrb
3e454                 |                 ' if outptr set, write X/Y words
3e454     00 76 0F F2 |                 cmp htmp3,#0                    wz
3e458     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
3e45c     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
3e460     2D 00 64 FD |                 ret
3e464                 | end
3e464                 | 
3e464                 | '------------------------------------------------------------------------------
3e464                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3e464                 | '------------------------------------------------------------------------------
3e464                 | ' On entry:
3e464                 | ' On exit:
3e464                 | '------------------------------------------------------------------------------
3e464                 | if _HAVE_GAMEPAD
3e464                 | hget_gp_in_report
3e464     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3e468     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3e46c                 | 
3e46c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3e470     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3e474     00 90 E3 F8 |                 getbyte hpar3
3e478     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3e47c     CF 02 A0 FD |                 call    #do_int_in
3e480     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e484     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3e488                 | 
3e488     00 90 0F F2 |                 cmp     hpar3, #0               wz
3e48c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3e490                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3e490                 | 
3e490     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3e494     00 70 E3 F8 |                 getbyte htmp                            ' |
3e498     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3e49c     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3e4a0     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3e4a4     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3e4a8     B8 01 C0 F8 |                 setbyte htmp                            ' |
3e4ac                 | 
3e4ac                 | ' Note: the following code compares the current and previous reports
3e4ac                 | ' and process the data if there are changes to ease the debug output.
3e4ac                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3e4ac                 | ' gpPreReport buffer.
3e4ac                 | 
3e4ac                 |                 ' ----- start of block to remove
3e4ac                 |                 {
3e4ac                 |                 }
3e4ac                 |                 ' ----- end of block to remove
3e4ac     F4 04 90 FE |                 loc pa,#hpad_translate
3e4b0     2A EC 63 FD |                 push pa
3e4b4                 | 
3e4b4                 |                 ' FALL THROUGH !!!!
3e4b4                 | 
3e4b4                 | '------------------------------------------------------------------------------
3e4b4                 | ' Decode controller report
3e4b4                 | '------------------------------------------------------------------------------
3e4b4                 | hid_decode
3e4b4                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3e4b4     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3e4b8     00 04 00 FF 
3e4bc     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3e4c0                 | 
3e4c0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3e4c4                 | 
3e4c4     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3e4c8     00 2A E3 F8 |                 getbyte hidr_type
3e4cc     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3e4d0     34 02 90 AD |         if_z    jmp     #hpad_xinput
3e4d4     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3e4d8     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3e4dc     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3e4e0     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3e4e4     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3e4e8                 |                 
3e4e8                 | 
3e4e8                 | '------------------------------------------------------------------------------
3e4e8                 | ' Handle HID controller (or mouse now
3e4e8                 | ' On entry:
3e4e8                 | '   ptrb - controller report
3e4e8                 | '------------------------------------------------------------------------------
3e4e8                 | hpad_hid
3e4e8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3e4ec     F7 F1 03 F6 |                 mov     ptra, pb
3e4f0     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3e4f4     00 EC 03 F6 |                 mov     pa, 0-0
3e4f8                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3e4f8     19 2A 3B FF 
3e4fc     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3e500                 | 
3e500                 | .next
3e500     00 EC 5F F2 |                 cmps    pa, #0      wcz
3e504     2D 00 7C ED |         if_be   ret     wcz
3e508                 | 
3e508     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3e50c     01 EC 87 F1 |                 sub     pa, #1
3e510     00 8E 07 F6 |                 mov     hpar2, #0
3e514                 | 
3e514     C6 71 03 F6 |                 mov     htmp, hpar1
3e518     03 70 07 F5 |                 and     htmp, #$03
3e51c     01 70 0F F2 |                 cmp     htmp, #1    wz
3e520     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3e524     07 8E 67 A7 |         if_z    signx   hpar2,#7
3e528     01 EC 87 A1 |         if_z    sub     pa, #1
3e52c     02 70 0F F2 |                 cmp     htmp, #2    wz
3e530     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3e534     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3e538     02 EC 87 A1 |         if_z    sub     pa, #2
3e53c     03 70 0F F2 |                 cmp     htmp, #3    wz
3e540     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3e544     04 EC 87 A1 |         if_z    sub     pa, #4
3e548                 | 
3e548     FC 8C 07 F5 |                 and     hpar1, #$FC
3e54c                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3e54c                 | 
3e54c     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3e550     0C 01 90 AD |         if_z    jmp     #.report_id
3e554     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3e558     24 01 90 AD |         if_z    jmp     #.usage_page
3e55c     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3e560     2C 01 90 AD |         if_z    jmp     #.usage
3e564     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3e568     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3e56c     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3e570     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3e574     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3e578     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3e57c     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3e580     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3e584     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3e588     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3e58c     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3e590     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3e594     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3e598     64 FF 9F 5D |         if_nz   jmp     #.next
3e59c                 | 
3e59c     D8 1D A7 FB |                 tjf     hidr_state,#.next
3e5a0                 | 
3e5a0     03 8E 07 F5 |                 and     hpar2, #$03
3e5a4     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3e5a8     18 00 90 5D |         if_nz   jmp     #.skip
3e5ac                 | 
3e5ac     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
3e5b0     20 00 90 AD |         if_z    jmp     #.axes
3e5b4     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3e5b8     5C 00 90 AD |         if_z    jmp     #.hats
3e5bc     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3e5c0     70 00 90 AD |         if_z    jmp     #.buttons
3e5c4                 | .skip
3e5c4     8F 71 03 F6 |                 mov     htmp, hidr_size
3e5c8     90 71 03 FA |                 mul     htmp, hidr_count
3e5cc     B8 23 03 F1 |                 add     hidr_offset, htmp
3e5d0     2C FF 9F FD |                 jmp     #.next
3e5d4                 | .axes
3e5d4                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3e5d4     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3e5d8     90 87 03 F6 |                 mov     hr1, hidr_count
3e5dc                 | .l1
3e5dc     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3e5e0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3e5e4     04 03 B0 FD |                 call    #hpad_getbits
3e5e8     64 03 B0 FD |                 call    #hpad_normalize
3e5ec     06 84 1F F2 |                 cmp     hr0, #6         wcz
3e5f0     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3e5f4     00 88 43 C8 |         if_b    getnib  hr2
3e5f8     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3e5fc     5F 01 20 C9 |         if_b    setword retval
3e600     01 84 07 C1 |         if_b    add     hr0, #1
3e604     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3e608     F4 87 6F FB |                 djnz    hr1, #.l1
3e60c                 | 
3e60c     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3e610     01 1C 07 F6 |                 mov     hidr_state, #1
3e614     E8 FE 9F FD |                 jmp     #.next
3e618                 | .hats
3e618                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3e618     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3e61c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3e620     C8 02 B0 FD |                 call    #hpad_getbits
3e624     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3e628     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3e62c     01 1C 07 F6 |                 mov     hidr_state, #1
3e630     90 FF 9F FD |                 jmp     #.skip
3e634                 | .buttons
3e634                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3e634     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3e638     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3e63c     90 8F 03 FA |                 mul     hpar2, hidr_count
3e640     A8 02 B0 FD |                 call    #hpad_getbits
3e644     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3e648     B8 BF 62 F0 |                 shl     retval, htmp
3e64c     5F 17 43 F5 |                 or      hidr_buttons, retval
3e650     90 71 03 F1 |                 add     htmp, hidr_count
3e654     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3e658     01 1C 07 F6 |                 mov     hidr_state, #1
3e65c     64 FF 9F FD |                 jmp     #.skip
3e660                 | .report_id
3e660     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3e664     2D 00 7C 5D |         if_nz   ret     wcz
3e668     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3e66c     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3e670     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3e674     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3e678     01 F2 87 51 |         if_nz   sub     ptrb,#1
3e67c     80 FE 9F FD |                 jmp     #.next
3e680                 | .usage_page
3e680     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3e684     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3e688     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3e68c     70 FE 9F FD |                 jmp     #.next
3e690                 | .usage
3e690     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3e694     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3e698     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3e69c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3e6a0     5C FE 9F AD |         if_z    jmp     #.next
3e6a4     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3e6a8     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3e6ac     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3e6b0     4C FE 9F AD |         if_z    jmp     #.next
3e6b4     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3e6b8     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
3e6bc     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3e6c0     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3e6c4     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3e6c8     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3e6cc     10 00 90 AD |         if_z    jmp     #.usage_axis
3e6d0     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3e6d4     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3e6d8     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3e6dc     20 FE 9F FD |                 jmp     #.next
3e6e0                 | .usage_axis
3e6e0     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3e6e4     18 FE 9F CD |         if_b    jmp     #.next
3e6e8     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3e6ec     C7 01 00 F8 |                 setnib  hpar2
3e6f0                 | 
3e6f0     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3e6f4     C7 8F C3 F9 |                 decod   hpar2
3e6f8     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3e6fc                 | 
3e6fc     01 24 07 F1 |                 add     hidr_usage_idx, #1
3e700     02 1C 07 F6 |                 mov     hidr_state, #2
3e704     F8 FD 9F FD |                 jmp     #.next
3e708                 | 
3e708                 | '------------------------------------------------------------------------------
3e708                 | ' Handle XInput controller
3e708                 | ' On entry:
3e708                 | '   ptrb - controller report
3e708                 | '------------------------------------------------------------------------------
3e708                 | '   Default implementation translates the report to a pseudo-defacto hid
3e708                 | '   standard and jumps to hpad_translate for actions.
3e708                 | '   Implementors may take specific actions for this kind of controller.
3e708                 | '------------------------------------------------------------------------------
3e708                 | hpad_xinput
3e708     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3e70c     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3e710     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3e714     14 70 0F F2 |                 cmp     htmp, #$14      wz
3e718     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3e71c                 | 
3e71c                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3e71c                 | 
3e71c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3e720     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3e724                 | 
3e724     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3e728     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3e72c     5F BF 22 F6 |                 not     retval
3e730     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3e734     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3e738     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3e73c     5F BF 22 F6 |                 not     retval
3e740     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3e744                 | 
3e744     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3e748     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3e74c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3e750     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3e754     F8 01 B0 FD |                 call    #hpad_normalize
3e758     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3e75c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3e760     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3e764     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3e768     E4 01 B0 FD |                 call    #hpad_normalize
3e76c     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3e770                 | 
3e770     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3e774     81 BF E6 FA |                 rdword  retval, ptrb[1]
3e778     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3e77c     00 16 47 F4 |                 bitc    hidr_buttons, #0
3e780     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3e784     01 16 47 F4 |                 bitc    hidr_buttons, #1
3e788     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3e78c     02 16 47 F4 |                 bitc    hidr_buttons, #2
3e790     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3e794     03 16 47 F4 |                 bitc    hidr_buttons, #3
3e798     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3e79c     04 16 47 F4 |                 bitc    hidr_buttons, #4
3e7a0     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3e7a4     05 16 47 F4 |                 bitc    hidr_buttons, #5
3e7a8     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3e7ac     08 16 47 F4 |                 bitc    hidr_buttons, #8
3e7b0     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3e7b4     09 16 47 F4 |                 bitc    hidr_buttons, #9
3e7b8     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3e7bc     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3e7c0     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3e7c4     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3e7c8     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3e7cc     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3e7d0                 | 
3e7d0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3e7d4     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3e7d8     7A BB 7A FF 
3e7dc     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3e7e0     F9 FF 7F FF 
3e7e4     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3e7e8     B9 71 5F F9 |                 altgn   htmp, #htmp1
3e7ec     00 70 43 F8 |                 getnib  htmp
3e7f0     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3e7f4                 | 
3e7f4     AC 01 90 FD |                 jmp     #hpad_translate
3e7f8                 | 
3e7f8                 | '------------------------------------------------------------------------------
3e7f8                 | ' Handle PS3 controller
3e7f8                 | ' On entry:
3e7f8                 | '   ptrb - controller report
3e7f8                 | '------------------------------------------------------------------------------
3e7f8                 | '   Default implementation translates the report to a pseudo-defacto hid
3e7f8                 | '   standard and jumps to hpad_translate for actions.
3e7f8                 | '   Implementors may take specific actions for this kind of controller.
3e7f8                 | '------------------------------------------------------------------------------
3e7f8                 | hpad_ps3
3e7f8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3e7fc     01 70 0F F2 |                 cmp     htmp, #$01      wz
3e800     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3e804                 | 
3e804                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3e804                 | 
3e804     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3e808     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3e80c     40 01 B0 FD |                 call    #hpad_normalize
3e810     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3e814     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3e818     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3e81c     30 01 B0 FD |                 call    #hpad_normalize
3e820     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3e824     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3e828     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3e82c     20 01 B0 FD |                 call    #hpad_normalize
3e830     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3e834     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3e838     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3e83c     10 01 B0 FD |                 call    #hpad_normalize
3e840     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3e844     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3e848     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3e84c                 | 
3e84c     08 8C 07 F6 |                 mov     hpar1, #8
3e850     13 8E 07 F6 |                 mov     hpar2, #19
3e854     94 00 B0 FD |                 call    #hpad_getbits
3e858                 | 
3e858     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3e85c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3e860     00 16 47 F4 |                 bitc    hidr_buttons, #0
3e864     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3e868     01 16 47 F4 |                 bitc    hidr_buttons, #1
3e86c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3e870     02 16 47 F4 |                 bitc    hidr_buttons, #2
3e874     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3e878     03 16 47 F4 |                 bitc    hidr_buttons, #3
3e87c     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3e880     04 16 47 F4 |                 bitc    hidr_buttons, #4
3e884     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3e888     05 16 47 F4 |                 bitc    hidr_buttons, #5
3e88c     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3e890     06 16 47 F4 |                 bitc    hidr_buttons, #6
3e894     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3e898     07 16 47 F4 |                 bitc    hidr_buttons, #7
3e89c     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3e8a0     08 16 47 F4 |                 bitc    hidr_buttons, #8
3e8a4     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3e8a8     09 16 47 F4 |                 bitc    hidr_buttons, #9
3e8ac     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3e8b0     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3e8b4     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3e8b8     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3e8bc     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3e8c0     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3e8c4                 | 
3e8c4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3e8c8     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3e8cc     09 FA 79 FF 
3e8d0     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3e8d4     FF FA 7F FF 
3e8d8     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3e8dc     B9 71 5F F9 |                 altgn   htmp, #htmp1
3e8e0     00 70 43 F8 |                 getnib  htmp
3e8e4     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3e8e8                 | 
3e8e8     B8 00 90 FD |                 jmp     #hpad_translate
3e8ec                 | 
3e8ec                 | '------------------------------------------------------------------------------
3e8ec                 | ' Read bits from report data buffer
3e8ec                 | '------------------------------------------------------------------------------
3e8ec                 | ' On entry:
3e8ec                 | '   PTRB - report buffer
3e8ec                 | '   hpar1 - start bit
3e8ec                 | '   hpar2 - number of bits
3e8ec                 | ' On exit:
3e8ec                 | '   retval - bits
3e8ec                 | '------------------------------------------------------------------------------
3e8ec                 | hpad_getbits
3e8ec     C6 71 03 F6 |                 mov     htmp, hpar1
3e8f0     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3e8f4     F9 71 03 F1 |                 add     htmp, ptrb
3e8f8     B8 BF 02 FB |                 rdlong  retval, htmp
3e8fc                 | 
3e8fc     C6 73 03 F6 |                 mov     htmp1, hpar1
3e900     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3e904     B9 BF 42 F0 |                 shr     retval, htmp1
3e908                 | 
3e908     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3e90c     10 00 90 1D |         if_a    jmp     #.l1
3e910                 | 
3e910     C7 8F C3 F9 |                 decod   hpar2
3e914     01 8E 87 F1 |                 sub     hpar2, #1
3e918     C7 BF 02 F5 |                 and     retval, hpar2
3e91c     2D 00 64 FD |                 ret
3e920                 | .l1
3e920     FF 7F 00 FF 
3e924     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3e928     03 70 07 F1 |                 add     htmp, #3
3e92c     B8 75 03 FB |                 rdlong  htmp2, htmp
3e930     18 8E 87 F1 |                 sub     hpar2, #24
3e934     C7 8F C3 F9 |                 decod   hpar2
3e938     01 8E 87 F1 |                 sub     hpar2, #1
3e93c     B9 75 43 F0 |                 shr     htmp2, htmp1
3e940     C7 75 03 F5 |                 and     htmp2, hpar2
3e944     18 74 67 F0 |                 shl     htmp2, #24
3e948     BA BF 42 F5 |                 or      retval, htmp2
3e94c     2D 00 64 FD |                 ret
3e950                 | 
3e950                 | '------------------------------------------------------------------------------
3e950                 | ' Normalize value to signed word (-32768 / 32767)
3e950                 | '------------------------------------------------------------------------------
3e950                 | ' On entry:
3e950                 | '   retval - value to normalize
3e950                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3e950                 | '   - or -
3e950                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3e950                 | '   hidr_size - value bits length
3e950                 | ' On exit:
3e950                 | '   retval - normalized value
3e950                 | '------------------------------------------------------------------------------
3e950                 | hpad_normalize
3e950     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3e954     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3e958     2D 00 64 AD |         if_z    ret
3e95c     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3e960     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3e964     0F 72 77 F7 |                 signx   htmp1, #15      wc
3e968     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3e96c     00 BE 66 C7 |         if_c    signx   retval, #0-0
3e970     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3e974     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3e978     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3e97c     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3e980     B8 71 53 F6 |                 abs     htmp            wc
3e984     1F BE 0E F4 |                 testb   retval, #31     wz
3e988     5F BF 42 F6 |                 abs     retval
3e98c     B8 BF 12 FD |                 qdiv    retval, htmp
3e990     18 BE 62 FD |                 getqx   retval
3e994     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3e998     C0 FF 7F FF 
3e99c     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3e9a0     2D 00 64 FD |                 ret
3e9a4                 | 
3e9a4                 | '------------------------------------------------------------------------------
3e9a4                 | ' Perform controller actions
3e9a4                 | ' On entry:
3e9a4                 | '    hidr_id        report id
3e9a4                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3e9a4                 | '                      X = hidr_axis+0, #0
3e9a4                 | '                      Y = hidr_axis+0, #1
3e9a4                 | '                      Z = hidr_axis+1, #0
3e9a4                 | '                     RX = hidr_axis+1, #1
3e9a4                 | '                     RY = hidr_axis+2, #0
3e9a4                 | '                     RZ = hidr_axis+2, #1
3e9a4                 | '    hidr_buttons   buttons state (bits 0 to 31)
3e9a4                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3e9a4                 | '
3e9a4                 | '                     -------3 -------2 -------1 -------0 byte
3e9a4                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3e9a4                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3e9a4                 | '                                zyx||| |||||||| ++++++++ n. buttons
3e9a4                 | '                                |||||| ||||++++--------- n. axes
3e9a4                 | '                                |||||| ++++------------- n. hats
3e9a4                 | '                                ++++++------------------ valid axes
3e9a4                 | '------------------------------------------------------------------------------
3e9a4                 | hpad_translate
3e9a4                 | 
3e9a4                 | 
3e9a4                 |         if HAVE_HIDPAD
3e9a4     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3e9a8     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3e9ac     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3e9b0     01 70 E7 F2 |                 cmpsub  htmp,#1
3e9b4     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3e9b8     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3e9bc     2D 00 7C 3D |         if_ae   ret     wcz
3e9c0     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3e9c4     B8 F3 03 F1 |                 add     ptrb,htmp
3e9c8     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3e9cc     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3e9d0     28 0C 64 FD |                 setq    #7-1
3e9d4     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3e9d8                 |         end
3e9d8                 | 
3e9d8                 | 
3e9d8                 |         if EMUPAD_MAX_PLAYER > 0
3e9d8                 | .emupad_no_hat
3e9d8                 |         if EMUPAD_BT0_BIT >= 0
3e9d8                 |         end
3e9d8                 |         if EMUPAD_BT1_BIT >= 0
3e9d8                 |         end
3e9d8                 |         if EMUPAD_BT2_BIT >= 0
3e9d8                 |         end
3e9d8                 |         if EMUPAD_BT3_BIT >= 0
3e9d8                 |         end
3e9d8                 |         if EMUPAD_BT4_BIT >= 0
3e9d8                 |         end
3e9d8                 |         if EMUPAD_BT5_BIT >= 0
3e9d8                 |         end
3e9d8                 |         if EMUPAD_BT6_BIT >= 0
3e9d8                 |         end
3e9d8                 |         if EMUPAD_BT7_BIT >= 0
3e9d8                 |         end
3e9d8                 |         if EMUPAD_BT8_BIT >= 0
3e9d8                 |         end
3e9d8                 |         if EMUPAD_BT9_BIT >= 0
3e9d8                 |         end
3e9d8                 | .emupad_slot_over
3e9d8                 |         end
3e9d8                 | 
3e9d8                 |         if 0
3e9d8                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3e9d8                 | 
3e9d8                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3e9d8                 | 
3e9d8                 |         end
3e9d8     2D 00 64 FD |                 ret
3e9dc                 | end
3e9dc                 | 
3e9dc                 | if EMUPAD_MAX_PLAYER > 0
3e9dc                 | '------------------------------------------------------------------------------
3e9dc                 | ' Clear EmuPad state
3e9dc                 | '------------------------------------------------------------------------------
3e9dc                 | emupad_reset
3e9dc                 | 
3e9dc                 | '------------------------------------------------------------------------------
3e9dc                 | ' Get EmuPad Player number for current device (into retval)
3e9dc                 | ' Z flag is also set if current device is valid
3e9dc                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3e9dc                 | '------------------------------------------------------------------------------
3e9dc                 | emupad_getnum
3e9dc                 | .loop
3e9dc                 | '------------------------------------------------------------------------------
3e9dc                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3e9dc                 | '------------------------------------------------------------------------------
3e9dc                 | emupad_discon
3e9dc                 | .loop         
3e9dc                 |         
3e9dc                 |         ' FALL THROUGH!!!
3e9dc                 | 
3e9dc                 | '------------------------------------------------------------------------------
3e9dc                 | ' Update EmuPad reports (all of them...)
3e9dc                 | '------------------------------------------------------------------------------
3e9dc                 | emupad_write_reports
3e9dc                 | .devloop
3e9dc                 | 
3e9dc                 | end
3e9dc                 | 
3e9dc                 | 
3e9dc                 | '------------------------------------------------------------------------------
3e9dc                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3e9dc                 | '------------------------------------------------------------------------------
3e9dc                 | ' On entry:
3e9dc                 | ' On exit:
3e9dc                 | '------------------------------------------------------------------------------
3e9dc                 | hget_hub_status
3e9dc     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3e9e0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3e9e4     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3e9e8     01 90 2F F9 |                 setword hpar3, #1, #1
3e9ec     CF 02 A0 FD |                 call    #do_int_in
3e9f0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e9f4     0C 00 90 AD |         if_z    jmp     #.data
3e9f8     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3e9fc     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3ea00     2D 00 64 FD |                 ret
3ea04                 | .data
3ea04     00 90 0F F2 |                 cmp     hpar3, #0               wz
3ea08     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3ea0c                 | 
3ea0c     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3ea10     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3ea14     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3ea18     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3ea1c                 |                 debug(ubin_long(hub_status_chg))
3ea1c                 | 
3ea1c     01 5A 06 F6 |                 mov     hdev_port, #1
3ea20                 | .loop
3ea20     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3ea24     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3ea28     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3ea2c     F0 FF 9F 3D |         if_nc   jmp     #.loop
3ea30     2D 00 64 FD |                 ret
3ea34                 | 
3ea34                 | hub_port_handler
3ea34     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3ea38     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3ea3c     27 EF 03 F6 |                 mov     pb, urx_buff_p
3ea40     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ea44     55 02 A0 FD |                 call    #control_read
3ea48     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3ea4c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3ea4c                 | 
3ea4c     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3ea50     50 01 90 5D |         if_x0   jmp     #.other
3ea54     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3ea58     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3ea5c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ea60     A0 02 A0 FD |                 call    #control_write
3ea64     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3ea68     7C 01 90 5D |         if_x0   jmp     #.disconnect
3ea6c     B0 99 02 F6 |                 mov     hctwait, _100ms_
3ea70     EF 02 A0 FD |                 call    #poll_waitx
3ea74                 | 
3ea74     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3ea78     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3ea7c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ea80     A0 02 A0 FD |                 call    #control_write
3ea84                 | 
3ea84     02 76 07 F6 |                 mov     htmp3, #2
3ea88                 | .wait_reset
3ea88     AC 99 02 F6 |                 mov     hctwait, _8ms_
3ea8c     EF 02 A0 FD |                 call    #poll_waitx
3ea90     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3ea94     27 EF 03 F6 |                 mov     pb, urx_buff_p
3ea98     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ea9c     55 02 A0 FD |                 call    #control_read
3eaa0     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3eaa4     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3eaa8     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3eaac                 | 
3eaac     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3eab0     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3eab4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3eab8     A0 02 A0 FD |                 call    #control_write
3eabc                 | 
3eabc     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3eac0                 | .wait_recover
3eac0     A7 99 02 F6 |                 mov     hctwait, _1ms_
3eac4     EF 02 A0 FD |                 call    #poll_waitx
3eac8     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3eacc                 | 
3eacc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3ead0     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3ead4     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3ead8                 | 
3ead8     00 08 00 FF 
3eadc     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3eae0     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3eae4     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3eae8     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3eaec     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3eaf0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3eaf4     48 01 90 5D |         if_nz   jmp     #.done
3eaf8                 | .get_dev_desc
3eaf8     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3eafc     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3eb00     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3eb04     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3eb08     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3eb0c     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3eb10     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3eb14     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3eb18     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3eb1c     AC 99 02 F6 |                 mov     hctwait, _8ms_
3eb20     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3eb24     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3eb28     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3eb2c     BE 00 A0 FD |                 call    #calc_crc5
3eb30     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3eb34     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3eb38     F7 AD C2 FA |                 rdbyte  total_data, pb
3eb3c     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3eb40     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3eb44     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3eb48     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3eb4c     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3eb50     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3eb54                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3eb54     9F 99 02 F6 |                 mov     hctwait, _500us_
3eb58     EF 02 A0 FD |                 call    #poll_waitx
3eb5c     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3eb60     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3eb64     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3eb68     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3eb6c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3eb70     CC 00 90 5D |         if_nz   jmp     #.done
3eb74     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3eb78     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3eb7c     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3eb80     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3eb84     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3eb88     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3eb8c     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3eb90     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3eb94     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3eb98     A4 00 90 CD |         if_b    jmp     #.done
3eb9c     70 F0 BF FD |                 call    #hparse_con_desc
3eba0     9C 00 90 FD |                 jmp     #.done
3eba4                 | 
3eba4                 | .other
3eba4     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3eba8     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3ebac     28 00 90 AD |         if_x1   jmp     #.reset_feature
3ebb0     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3ebb4     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3ebb8     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3ebbc     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3ebc0     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3ebc4     10 00 90 AD |         if_x1   jmp     #.reset_feature
3ebc8     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3ebcc     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3ebd0     04 00 90 AD |         if_x1   jmp     #.reset_feature
3ebd4     68 00 90 FD |                 jmp     #.done
3ebd8                 | .reset_feature
3ebd8     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3ebdc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ebe0     A0 02 A0 FD |                 call    #control_write
3ebe4     58 00 90 FD |                 jmp     #.done
3ebe8                 | .disconnect
3ebe8                 | 
3ebe8     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3ebec     00 70 E3 F8 |                 getbyte htmp
3ebf0     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3ebf4     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3ebf8     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3ebfc     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3ec00     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3ec04     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3ec08                 |         if EMUPAD_MAX_PLAYER > 0
3ec08                 |         end
3ec08                 |         if HAVE_MOUSE
3ec08     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3ec0c     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3ec10     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3ec14                 |         end
3ec14                 |         if HAVE_HIDPAD
3ec14     14 0A F0 FE |                 loc ptrb,#hidpad_report
3ec18     2D 71 03 F6 |                 mov htmp,hdev_port
3ec1c     01 70 E7 F2 |                 cmpsub htmp,#1
3ec20     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3ec24     B8 F3 03 F1 |                 add ptrb,htmp
3ec28     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3ec2c     80 01 6C FC |                 wrlong #0,ptrb
3ec30                 |         end
3ec30                 | 
3ec30     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3ec34     00 00 C4 F8 |                 setbyte #0
3ec38     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3ec3c     00 00 04 F6 |                 mov     0-0, #0
3ec40                 | 
3ec40                 | .done
3ec40     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3ec44     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3ec48     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3ec4c     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3ec50     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3ec54     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3ec58                 | 
3ec58     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3ec5c     27 EF 03 F6 |                 mov     pb, urx_buff_p
3ec60     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ec64     55 02 A0 FD |                 call    #control_read
3ec68     00 69 06 FB |                 rdlong  hub_port_status, ptra
3ec6c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3ec6c     2D 00 64 FD |                 ret
3ec70                 | 
3ec70                 | '------------------------------------------------------------------------------
3ec70                 | ' Partially populated SETUP packets
3ec70                 | '------------------------------------------------------------------------------
3ec70     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3ec71     06          |                 byte    REQ_GET_DESC
3ec72     00 01       |                 word    TYPE_DEVICE << 8
3ec74     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3ec76     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ec78     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3ec79     06          |                 byte    REQ_GET_DESC
3ec7a     00 02       |                 word    TYPE_CONFIG << 8
3ec7c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3ec7e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ec80     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3ec81     09          |                 byte    REQ_SET_CONFIG
3ec82     00 00       |                 word    0       ' Configuration value
3ec84     00 00       |                 word    0       ' Zero
3ec86     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3ec88     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3ec89     05          |                 byte    REQ_SET_ADDR
3ec8a     00 00       |                 word    0       ' Zero
3ec8c     00 00       |                 word    0       ' Zero
3ec8e     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3ec90                 | '------------------------------------------------------------------------------
3ec90                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3ec90                 | ' wValue field dictates which protocol should be used.
3ec90                 | '
3ec90                 | ' When initialized, all devices default to report protocol. However the host
3ec90                 | ' should not make any assumptions about the device state and should set the
3ec90                 | ' desired protocol whenever initializing a device.
3ec90                 | '------------------------------------------------------------------------------
3ec90     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3ec91     0B          |                 byte    HID_SET_PROTO
3ec92     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3ec94                 |                                                 ' (HID 1.11 Section 7.2.6).
3ec94     00 00       |                 word    0               ' Interface index number.
3ec96     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3ec98                 | '------------------------------------------------------------------------------
3ec98     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3ec99     0A          |                 byte    HID_SET_IDLE
3ec9a     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3ec9c                 |                                         ' reporting until a change is detected in the report data
3ec9c                 | 
3ec9c                 |                                         ' (HID 1.11 Section 7.2.4).
3ec9c     00 00       |                 word    0       ' Interface index number.
3ec9e     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3eca0     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3eca1     09          |                 byte    HID_SET_REPORT
3eca2     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3eca4                 |                                         ' (HID 1.11 Section 7.2.2).
3eca4     00 00       |                 word    0       ' Interface index number.
3eca6     00 00       |                 word    0       ' Size of the report, in bytes.
3eca8     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3eca9     06          |                 byte    REQ_GET_DESC
3ecaa     00 22       |                 word    TYPE_REPORT << 8
3ecac     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3ecae     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ecb0                 | '------------------------------------------------------------------------------
3ecb0     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3ecb1     06          |                 byte    REQ_GET_DESC
3ecb2     00 29       |                 word    TYPE_HUB << 8
3ecb4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3ecb6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ecb8     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3ecb9     03          |                 byte    REQ_SET_FEATURE
3ecba     00 00       |                 word    0       ' port power
3ecbc     01 00       |                 word    1       ' Port index number (1+)
3ecbe     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ecc0     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3ecc1     01          |                 byte    REQ_CLEAR_FEATURE
3ecc2     00 00       |                 word    0       ' port power
3ecc4     01 00       |                 word    1       ' Port index number (1+)
3ecc6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ecc8     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3ecc9     00          |                 byte    REQ_GET_STATUS
3ecca     00 00       |                 word    0
3eccc     01 00       |                 word    1       ' Port index number (1+)
3ecce     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3ecd0                 | '------------------------------------------------------------------------------
3ecd0                 | if _HAVE_GAMEPAD
3ecd0     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3ecd4                 | ps3_command_buff
3ecd4     00 00 00 00 
3ecd8     00          |                 byte    $00, $00, $00, $00, $00
3ecd9     00 00 00 00 
3ecdd     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3ecde     FF 27 10 00 
3ece2     32          |                 byte    $FF, $27, $10, $00, $32
3ece3     FF 27 10 00 
3ece7     32          |                 byte    $FF, $27, $10, $00, $32
3ece8     FF 27 10 00 
3ecec     32          |                 byte    $FF, $27, $10, $00, $32
3eced     FF 27 10 00 
3ecf1     32          |                 byte    $FF, $27, $10, $00, $32
3ecf2     00 00 00 00 
3ecf6     00          |                 byte    $00, $00, $00, $00, $00
3ecf7     00 00 00 00 
3ecfb     00          |                 byte    $00, $00, $00, $00, $00
3ecfc     00 00 00 00 
3ed00     00          |                 byte    $00, $00, $00, $00, $00
3ed01     00 00 00    |                 byte    $00, $00, $00
3ed04                 | '------------------------------------------------------------------------------
3ed04     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3ed07                 |                                         ' 0x01 All blinking
3ed07                 |                                         ' 0x02 1 flashes, then on
3ed07                 |                                         ' 0x03 2 flashes, then on
3ed07                 |                                         ' 0x04 3 flashes, then on
3ed07                 |                                         ' 0x05 4 flashes, then on
3ed07                 |                                         ' 0x06 1 on
3ed07                 |                                         ' 0x07 2 on
3ed07                 |                                         ' 0x08 3 on
3ed07                 |                                         ' 0x09 4 on
3ed07                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3ed07                 |                                         ' 0x0B Blinking*
3ed07                 |                                         ' 0x0C Slow blinking*
3ed07                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3ed07     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3ed0a     00          |                 byte    $00             ' Left rumble
3ed0b     00          |                 byte    $00             ' Right rumble
3ed0c     00 00 00    |                 byte    $00, $00, $00
3ed0f     00          | end
3ed10                 | alignl
3ed10                 | 
3ed10                 | if HAVE_MOUSE
3ed10     00 00 00 00 
3ed14     00 00 00 00 | mouse_limits long 0[2]
3ed18     00 00 00 00 | mouse_outptr long 0
3ed1c                 | end
3ed1c                 | 
3ed1c                 | if KEYQUEUE_SIZE > 0
3ed1c     00          | keyq_head byte 0
3ed1d     00          | keyq_tail byte 0
3ed1e     00 00 00 00 
      ...             
3ef1a     00 00 00 00 
3ef1e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3ef20                 | alignl
3ef20                 | end
3ef20                 | 
3ef20                 | if EMUPAD_MAX_PLAYER > 0
3ef20                 | emupad_rule_buffer
3ef20                 | if EMUPAD_BUILTIN_RULES
3ef20                 | file "padmap_builtin.dat"
3ef20                 | end
3ef20                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3ef20                 | '' Default rule directly follows!
3ef20                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3ef20                 | end
3ef20                 | 
3ef20                 | '------------------------------------------------------------------------------
3ef20                 | ' The USB data cache area gets zero-filled at every device disconnect
3ef20                 | '------------------------------------------------------------------------------
3ef20                 | usb_cache_start
3ef20                 | 
3ef20                 | ' HID descriptor and report buffers
3ef20                 | if !!OVERLAP_MEMORY
3ef20     00 00 00 00 
      ...             
3f618     00 00 00 00 
3f61c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3f620                 | end
3f620     00 00 00 00 
3f624     00 00 00 00 | hkbd_report     byte    0[8]
3f628     00 00 00 00 | hkbd_led_rep    byte    0
3f62c                 | alignl
3f62c                 | 
3f62c                 | if HAVE_HIDPAD
3f62c     00 00 00 00 
      ...             
3f6e8     00 00 00 00 
3f6ec     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3f6f0                 | end
3f6f0                 | 
3f6f0                 | ' HUB descriptor
3f6f0     00          | hub_descr       byte    0   ' bDescLength
3f6f1     00          |                 byte    0   ' bDescriptorType
3f6f2     00          |                 byte    0   ' bNbrPorts
3f6f3     00 00       |                 word    0   ' wHubCharacteristics
3f6f5     00          |                 byte    0   ' bPwrOn2PwrGood
3f6f6     00          |                 byte    0   ' bHubContrCurrent
3f6f7     00          |                 byte    0   ' DeviceRemoveable
3f6f8     00          |                 byte    0   ' PortPwrCtrlMask
3f6f9                 | 
3f6f9                 | usb_cache_end
3f6f9                 | 
3f6f9                 | if HAVE_MOUSE
3f6f9     00 00 00 00 | mouse_xacc      long 0
3f6fd     00 00 00 00 | mouse_yacc      long 0
3f701     00 00 00 00 | mouse_zacc      long 0
3f705     00          | mouse_bstate    byte 0
3f706     00          | mouse_lpending  byte 0
3f707     00          | mouse_rpending  byte 0
3f708     00          | mouse_mpending  byte 0
3f709     00          | mouse_lock      byte 0
3f70a     00 00 00    |                 byte 0[3] ' padding
3f70d                 | end
3f70d                 | 
3f70d     00 00 00 00 
      ...             
3f785     00 00 00 00 
3f789     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3f78d     00 00 00 00 
3f791     00 00 00 00 
3f795     00 00 00 00 
3f799     00 00 00 00 
3f79d     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3f79f     00 00 00 00 
      ...             
3f897     00 00 00 00 
3f89b     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3f89f                 | 
3f89f     00          | driver_cog      byte    0                       ' Current driver cog + 1
3f8a0                 | 	alignl
3f8a0                 | _audio096_spin2_dat_
3f8a0                 | 
3f8a0                 | audio       org     0
3f8a0                 | 
3f8a0     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3f8a4     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3f8a8     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3f8ac                 |  
3f8ac     01 EC 63 FD |             cogid   pa                   ' compute cogid
3f8b0     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3f8b4     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3f8b8     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3f8bc                 | 
3f8bc     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3f8c0     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3f8c4     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3f8c8     0F 24 06 FC |             wrpin   dac2,#right
3f8cc     0F 00 1E FC |             wxpin   #256,#right    
3f8d0     41 9C 64 FD |             dirh    #left addpins 1
3f8d4     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3f8d8     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3f8dc     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3f8e0                 |             
3f8e0                 | '---------------------------------------------------------------------------------        
3f8e0                 | '----------------- The main loop -------------------------------------------------
3f8e0                 | '---------------------------------------------------------------------------------
3f8e0                 | 
3f8e0     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3f8e4     10 00 90 CD |       if_c  jmp     #loop1
3f8e8                 |   
3f8e8     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3f8ec     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3f8f0     D5 00 80 F1 |             sub     0-0,a40000000
3f8f4     FD 01 6E FB |             djnz    cn,#p402
3f8f8                 |     
3f8f8     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3f8fc     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3f900     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3f904     01 00 06 C6 |     if_c    mov     cn,#1
3f908     DA 02 3A F3 |             fle     ct,time3 wcz
3f90c     02 00 06 C6 |     if_c    mov     cn,#2     
3f910     DB 02 3A F3 |             fle     ct,time4 wcz
3f914     03 00 06 C6 |     if_c    mov     cn,#3
3f918     DC 02 3A F3 |             fle     ct,time5 wcz
3f91c     04 00 06 C6 |     if_c    mov     cn,#4
3f920     DD 02 3A F3 |             fle     ct,time6 wcz
3f924     05 00 06 C6 |     if_c    mov     cn,#5
3f928     DE 02 3A F3 |             fle     ct,time7 wcz
3f92c     06 00 06 C6 |     if_c    mov     cn,#6
3f930     DF 02 3A F3 |             fle     ct,time8 wcz
3f934     07 00 06 C6 |     if_c    mov     cn,#7
3f938                 | 
3f938                 | 
3f938                 | '----------------------------------------------------------------------------------
3f938                 | '------------- Compute channel samples --------------------------------------------
3f938                 | '----------------------------------------------------------------------------------
3f938                 | 
3f938                 | 
3f938     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3f93c     06 C0 65 F0 |             shl     channeladd,#6
3f940     E0 F0 03 F1 |             add     ptra,channeladd
3f944                 | 
3f944     28 16 64 FD |             setq    #11                        	' read parameters
3f948     00 D7 05 FB |             rdlong  pointer0,ptra
3f94c                 |     	    
3f94c     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3f950     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3f954     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3f958     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3f95c     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3f960     00 C4 0D F2 |             cmp     qq,#0 wz                         
3f964     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3f968     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3f96c                 |             
3f96c     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3f970     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3f974     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3f978                 | 
3f978     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3f97c     EC 08 3A F9 |             getword oldrs,sample0,#1
3f980     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3f984     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3f988     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3f98c     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3f990                 | 
3f990     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3f994     00 04 02 F6 |             mov     dt0,0-0    
3f998     D7 04 82 F1 |             sub     dt0,time0
3f99c                 |             
3f99c     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3f9a0     FB 00 00 F1 |             add     0-0,afreq0  	
3f9a4                 |             
3f9a4                 | '---- envelopes
3f9a4                 |             
3f9a4     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3f9a8     20 00 00 AF 
3f9ac     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3f9b0     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3f9b4                 | 
3f9b4     FB 48 02 F6 |             mov     envs1,afreq0
3f9b8     F5 48 02 FA |             mul     envs1,envspd0
3f9bc     24 E7 01 F1 |             add     envph0,envs1 
3f9c0                 | 
3f9c0     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3f9c4     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3f9c8     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3f9cc     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3f9d0     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3f9d4     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3f9d8     00 46 06 36 |     if_ge   mov     envlo,#0
3f9dc     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3f9e0     16 E6 65 30 |     if_ge   shl     envph0,#22
3f9e4                 | 
3f9e4     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3f9e8     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3f9ec     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3f9f0     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3f9f4     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3f9f8     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3f9fc     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3fa00     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3fa04     23 49 02 FA |             mul     envs1,envlo
3fa08     25 49 02 F1 |             add     envs1,envs2
3fa0c     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3fa10                 |             
3fa10     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3fa14     1B C6 61 AD |     if_z    getrnd  spl
3fa18     58 00 90 AD |     if_z    jmp     #p406
3fa1c                 |  
3fa1c     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3fa20     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3fa24     08 D6 45 F0 |             shr     pointer0,#8
3fa28                 |          
3fa28     1F DA 0D F4 |             testb   sstart0,#31 wz            
3fa2c     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3fa30     1C DA 0D F4 |             testb   sstart0,#28 wz            
3fa34     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3fa38                 |         
3fa38     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3fa3c     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3fa40     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3fa44                 |             
3fa44     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3fa48     ED C4 01 F1 |             add     qq,sstart0            
3fa4c                 | 
3fa4c     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3fa50     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3fa54     1C 01 B0 1D |     if_gt   call    #cache_read
3fa58                 |          
3fa58     1F DA 0D F4 |             testb   sstart0,#31 wz 
3fa5c     08 C6 65 50 |     if_nz   shl     spl,#8
3fa60     08 D6 65 50 |     if_nz   shl     pointer0,#8
3fa64     07 D6 65 A0 |     if_z    shl     pointer0,#7
3fa68     1C DA 0D F4 |             testb   sstart0,#28 wz            
3fa6c     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3fa70     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3fa74                 | 
3fa74                 | 
3fa74     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3fa78     00 C6 01 F6 |             mov     spl,0-0
3fa7c     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3fa80     00 C6 01 F6 |             mov     spl,0-0
3fa84                 | 
3fa84     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3fa88     00 0A 02 F6 |             mov     ls0,0-0
3fa8c     20 00 00 FF 
3fa90     00 C4 05 F6 |             mov     qq,##16384
3fa94     FE C4 81 F1 |             sub     qq,apan0
3fa98     E2 C6 31 FA |             scas    spl,qq
3fa9c     00 0C 02 F6 |             mov     rs0, 0-0
3faa0                 | 
3faa0     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3faa4     06 11 02 F1 |             add     rs,rs0
3faa8     03 0F 82 F1 |             sub     ls,oldls
3faac     05 0F 02 F1 |             add     ls,ls0
3fab0                 |    
3fab0     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3fab4     05 D9 21 F9 |             setword sample0,ls0,#0
3fab8                 |             
3fab8     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3fabc     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3fac0     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3fac4                 |   '  if_z    mov     sample0,#0
3fac4     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3fac8     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3facc     04 00 00 AF 
3fad0     00 B0 05 A1 |     if_z    add     time1,##2048
3fad4     D8 B2 01 A6 |     if_z    mov     time2,time1
3fad8     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3fadc                 | 
3fadc     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3fae0     00 D7 65 FC |             wrlong  pointer0,ptra
3fae4     08 E7 65 FC |             wrlong  envph0,ptra[8]
3fae8     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3faec                 |                       
3faec     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3faf0     FF C3 25 A7 |     if_z    decmod  front, #511          
3faf4                 |          
3faf4     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3faf8     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3fafc     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3fb00     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3fb04                 | 	    
3fb04                 | 		    
3fb04     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3fb08     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3fb0c     04 15 02 F6 |             mov     newsample, oldrs       
3fb10                 | 
3fb10     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3fb14     02 AF 01 F1 |             add     time0,dt0    
3fb18                 |                                      
3fb18     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3fb1c     D8 FD 9F AD |     if_z    jmp     #loop1
3fb20     02 C5 01 F6 |             mov     qq,dt0
3fb24                 | 
3fb24                 |     
3fb24                 |             
3fb24     01 4E 36 F0 | p301        rol     dropper,#1 wc
3fb28     40 00 90 3D |     if_nc   jmp     #p399
3fb2c     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3fb30     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3fb34     F4 FF 9F AD |     if_e    jmp     #p398   
3fb38                 | 		
3fb38     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3fb3c     20 00 90 AD |     if_z    jmp     #p302	   
3fb40                 |   
3fb40     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3fb44     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3fb48     02 1E 66 C0 |     if_c    shl     scptr2,#2
3fb4c     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3fb50     60 1E 66 FC |             wrlong  scptr2,#$60
3fb54     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3fb58     01 00 00 CF 
3fb5c     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3fb60                 | 			    
3fb60     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3fb64     00 00 00 FF 
3fb68     FF C3 05 F7 |             incmod  front, ##511
3fb6c     ED C5 6D FB | p399        djnz    qq,#p301
3fb70                 |             
3fb70     6C FD 9F FD |             jmp     #loop            'loop
3fb74                 | 
3fb74                 | '----------------------------------------------------------------------------------
3fb74                 | '------------- This is the end of the main loop -----------------------------------
3fb74                 | '----------------------------------------------------------------------------------
3fb74                 | 
3fb74                 | '----------------------------------------------------------------------------------
3fb74                 | '------------- PSRAM cache ----------- --------------------------------------------
3fb74                 | '----------------------------------------------------------------------------------
3fb74                 | 
3fb74                 | ' There are 8 cache pointers for 8 channels
3fb74                 | ' if 24 higher bits of address=cache, then get a word from the cache
3fb74                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3fb74                 | 
3fb74                 | 
3fb74     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3fb78                 |             
3fb78     E2 40 02 F6 | 	    mov     addrhi,qq		
3fb7c     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3fb80     14 01 96 F9 | 	    alts    cn,#cache1            
3fb84     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3fb88     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3fb8c                 | 	
3fb8c     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3fb90     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3fb94     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3fb98     08 38 66 F0 | 	    shl     cmd,#8
3fb9c     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3fba0     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3fba4     08 3A 66 F0 |             shl     hubaddr,#8                  '
3fba8     13 3B 02 F1 |             add     hubaddr,hubptr 
3fbac     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3fbb0     28 04 64 FD |             setq    #2                          ' write 3 longs
3fbb4     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3fbb8     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3fbbc     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3fbc0                 |             
3fbc0                 | 	
3fbc0     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3fbc4     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3fbc8     13 C5 01 F1 | 	    add     qq,hubptr
3fbcc     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3fbd0     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3fbd4                 |           
3fbd4                 | 
3fbd4                 | '--------------------------------------------------------------------------
3fbd4                 | '------ Interrupt service -------------------------------------------------
3fbd4                 | '------ Output the sample, get the next one if exists ---------------------
3fbd4                 | '--------------------------------------------------------------------------
3fbd4                 | 
3fbd4     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3fbd8     0F D0 25 FC |             wypin   rsample,#right       '4
3fbdc     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3fbe0     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3fbe4     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3fbe8     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3fbec     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3fbf0                 |     
3fbf0     F5 FF 3B FB |             reti1                        '17/19 
3fbf4                 |           
3fbf4                 | '---------------------------------------------------------------------------
3fbf4                 | '-------- End of interrupt -------------------------------------------------
3fbf4                 | '---------------------------------------------------------------------------    
3fbf4                 | 
3fbf4                 | 
3fbf4                 | '---------------------------------------------------------------------------
3fbf4                 | '------- Variables ---------------------------------------------------------
3fbf4                 | '---------------------------------------------------------------------------
3fbf4                 | 
3fbf4                 | ' constants
3fbf4                 | 
3fbf4     00 00 00 40 | a40000000   long $40000000
3fbf8     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3fbfc                 | 
3fbfc                 | ' Time variables
3fbfc                 | 
3fbfc     00 00 00 00 | time0       long 0    ' Global sample computing time
3fc00     01 00 00 00 | time1       long 1    ' Local channels time
3fc04     02 00 00 00 | time2       long 2
3fc08     03 00 00 00 | time3       long 3
3fc0c     04 00 00 00 | time4       long 4
3fc10     05 00 00 00 | time5       long 5
3fc14     06 00 00 00 | time6       long 6
3fc18     07 00 00 00 | time7       long 7
3fc1c     08 00 00 00 | time8       long 8
3fc20                 | 
3fc20     00 00 00 00 | channeladd long 0
3fc24                 | 
3fc24     00 00 00 00 | front       long 0
3fc28                 | 
3fc28                 | ' temporary variables 
3fc28     00 00 00 00 | qq          long 0
3fc2c     00 00 00 00 | spl         long 0
3fc30     00 00 00 00 | zero        long 0
3fc34     00 00 00 00 | mailbox     long 0
3fc38     00 00 00 00 | mailbox2 long 0
3fc3c                 | 
3fc3c                 | ' Interrupt ISR variables
3fc3c                 | 
3fc3c     00 00 00 00 | lsample     long 0
3fc40     00 00 00 00 | rsample     long 0
3fc44     00 00 00 00 | lsnext      long 0
3fc48     00 00 00 00 | rsnext      long 0 
3fc4c                 | 
3fc4c                 | ' channel parameter block
3fc4c                 | 
3fc4c     00 00 00 00 | pointer0    long 0     
3fc50     00 00 00 00 | sample0     long 0
3fc54     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3fc58     00 00 00 00 | lstart0     long 0
3fc5c     00 00 00 00 | lend0       long 0
3fc60     00 00 00 00 | volpan0     long 0
3fc64     00 00 00 00 | freqskip0   long 0
3fc68     00 00 00 00 | command0    long 0
3fc6c     00 00 00 00 | envph0	    long 0
3fc70     00 00 00 00 | envptr0	    long 0
3fc74     00 00 00 00 | envspd0	    long 0
3fc78     00 00 00 00 | envlen0	    long 0
3fc7c     00 00 00 00 | res5	    long 0
3fc80     00 00 00 00 | res6	    long 0
3fc84     00 00 00 00 | res7	    long 0
3fc88     00 00 00 00 | res8	    long 0
3fc8c                 | 
3fc8c     00 00 00 00 | afreq0      long 0
3fc90     00 00 00 00 | askip0      long 0
3fc94     00 00 00 00 | avol0       long 0
3fc98     00 00 00 00 | apan0       long 0
3fc9c                 | 
3fc9c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3fca0     00 00 00 00 | cn          long 0
3fca4     00 00 00 00 | ct          long 0
3fca8     00 00 00 00 | dt0         long 0
3fcac                 | 
3fcac                 | ' Samples
3fcac     00 00 00 00 | oldls       long 0
3fcb0     00 00 00 00 | oldrs       long 0
3fcb4                 | 
3fcb4     00 00 00 00 | ls0         long 0
3fcb8     00 00 00 00 | rs0         long 0
3fcbc                 | 
3fcbc     00 00 00 00 | ls          long 0    
3fcc0     00 00 00 00 | rs          long 0
3fcc4                 | 
3fcc4     00 00 00 00 | oldsample   long 0
3fcc8     00 00 00 00 | newsample   long 0
3fccc                 | 
3fccc     00 00 00 00 | nrsample    long 0
3fcd0     00 00 00 00 | nlsample    long 0
3fcd4                 | 
3fcd4     00 00 00 00 | scbase long 0
3fcd8     00 00 00 00 | scptr long 0
3fcdc     00 00 00 00 | scptr2 long 0
3fce0     00 00 00 00 | scope long 0
3fce4                 | 
3fce4     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3fce8     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3fcec                 | 
3fcec     00 18 07 00 | hubptr      long $71800
3fcf0     00 00 00 00 | cache1      long 0
3fcf4     00 00 00 00 | cache2      long 0
3fcf8     00 00 00 00 | cache3      long 0
3fcfc     00 00 00 00 | cache4      long 0
3fd00     00 00 00 00 | cache5      long 0
3fd04     00 00 00 00 | cache6      long 0
3fd08     00 00 00 00 | cache7      long 0
3fd0c     00 00 00 00 | cache8      long 0
3fd10                 | 
3fd10                 | 
3fd10     00 00 00 00 | cmd         long 0
3fd14     00 00 00 00 | hubaddr     long 0
3fd18     00 01 00 00 | count       long 256
3fd1c     00 00 00 00 | addrlo long 0
3fd20     00 00 00 00 | addrhi long 0
3fd24     00 00 00 00 | pointer00 long 0
3fd28     00 00 00 00 | envhi long 0
3fd2c     00 00 00 00 | envlo long 0
3fd30     00 00 00 00 | envs1 long 0
3fd34     00 00 00 00 | envs2 long 0
3fd38     00 00 00 00 | noise0 long 0
3fd3c     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3fd40     00 00 00 00 
3fd44     00 00 00 00 | null  			long 	0,0           ' for channel reset
3fd48                 | 	alignl
3fd48                 | __system__dat_
3fd48     00 00 00 00 
3fd4c     00 00 00 00 | 	byte	$00[8]
3fd50     03 00 00 00 
3fd54     00 00 00 00 
3fd58     00 00 00 00 
3fd5c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3fd60     00 00 00 00 
      ...             
3ffec     00 00 00 00 
3fff0     00 00 00 00 | 	byte	$00[660]
3fff4     00 00 30 0A | 	long	(163 {__system____root_opendir})<<20
3fff8     00 00 40 0A | 	long	(164 {__system____root_closedir})<<20
3fffc     00 00 50 0A | 	long	(165 {__system____root_readdir})<<20
40000     00 00 60 0A | 	long	(166 {__system____root_stat})<<20
40004     00 00 00 00 
40008     00 00 00 00 
4000c     00 00 00 00 
40010     00 00 00 00 
40014     00 00 00 00 
40018     00 00 00 00 
4001c     00 00 00 00 | 	byte	$00[28]
40020     88 00 04 00 | 	long	@@@__system__dat_ + 832
40024     8B 00 04 00 | 	long	@@@__system__dat_ + 835
40028     AC 00 04 00 | 	long	@@@__system__dat_ + 868
4002c     C5 00 04 00 | 	long	@@@__system__dat_ + 893
40030     E0 00 04 00 | 	long	@@@__system__dat_ + 920
40034     FA 00 04 00 | 	long	@@@__system__dat_ + 946
40038     0A 01 04 00 | 	long	@@@__system__dat_ + 962
4003c     1C 01 04 00 | 	long	@@@__system__dat_ + 980
40040     2E 01 04 00 | 	long	@@@__system__dat_ + 998
40044     40 01 04 00 | 	long	@@@__system__dat_ + 1016
40048     4C 01 04 00 | 	long	@@@__system__dat_ + 1028
4004c     5D 01 04 00 | 	long	@@@__system__dat_ + 1045
40050     71 01 04 00 | 	long	@@@__system__dat_ + 1065
40054     7B 01 04 00 | 	long	@@@__system__dat_ + 1075
40058     8B 01 04 00 | 	long	@@@__system__dat_ + 1091
4005c     9A 01 04 00 | 	long	@@@__system__dat_ + 1106
40060     B0 01 04 00 | 	long	@@@__system__dat_ + 1128
40064     C9 01 04 00 | 	long	@@@__system__dat_ + 1153
40068     DD 01 04 00 | 	long	@@@__system__dat_ + 1173
4006c     EB 01 04 00 | 	long	@@@__system__dat_ + 1187
40070     FF 01 04 00 | 	long	@@@__system__dat_ + 1207
40074     0B 02 04 00 | 	long	@@@__system__dat_ + 1219
40078     1D 02 04 00 | 	long	@@@__system__dat_ + 1237
4007c     35 02 04 00 | 	long	@@@__system__dat_ + 1261
40080     47 02 04 00 | 	long	@@@__system__dat_ + 1279
40084     5A 02 04 00 | 	long	@@@__system__dat_ + 1298
40088     4F 4B 00 4E 
4008c     75 6D 65 72 
40090     69 63 61 6C 
40094     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
40098     75 6D 65 6E 
4009c     74 20 6F 75 
400a0     74 20 6F 66 
400a4     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
400a8     61 69 6E 00 
400ac     52 65 73 75 
400b0     6C 74 20 6E 
400b4     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
400b8     65 70 72 65 
400bc     73 65 6E 74 
400c0     61 62 6C 65 
400c4     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
400c8     65 67 61 6C 
400cc     20 6D 75 6C 
400d0     74 69 62 79 
400d4     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
400d8     65 71 75 65 
400dc     6E 63 65 00 
400e0     4E 6F 20 73 
400e4     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
400e8     66 69 6C 65 
400ec     20 6F 72 20 
400f0     64 69 72 65 
400f4     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
400f8     79 00 42 61 
400fc     64 20 66 69 
40100     6C 65 20 6E 
40104     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
40108     72 00 50 65 
4010c     72 6D 69 73 
40110     73 69 6F 6E 
40114     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
40118     69 65 64 00 
4011c     4E 6F 74 20 
40120     65 6E 6F 75 
40124     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
40128     65 6D 6F 72 
4012c     79 00 54 65 
40130     6D 70 6F 72 
40134     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
40138     66 61 69 6C 
4013c     75 72 65 00 
40140     46 69 6C 65 
40144     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
40148     73 74 73 00 
4014c     49 6E 76 61 
40150     6C 69 64 20 
40154     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
40158     6D 65 6E 74 
4015c     00 54 6F 6F 
40160     20 6D 61 6E 
40164     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
40168     65 6E 20 66 
4016c     69 6C 65 73 
40170     00 49 2F 4F 
40174     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
40178     6F 72 00 4E 
4017c     6F 74 20 61 
40180     20 64 69 72 
40184     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
40188     72 79 00 49 
4018c     73 20 61 20 
40190     64 69 72 65 
40194     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
40198     79 00 52 65 
4019c     61 64 20 6F 
401a0     6E 6C 79 20 
401a4     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
401a8     20 73 79 73 
401ac     74 65 6D 00 
401b0     46 75 6E 63 
401b4     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
401b8     20 6E 6F 74 
401bc     20 69 6D 70 
401c0     6C 65 6D 65 
401c4     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
401c8     00 44 69 72 
401cc     65 63 74 6F 
401d0     72 79 20 6E 
401d4     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
401d8     6D 70 74 79 
401dc     00 4E 61 6D 
401e0     65 20 74 6F 
401e4     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
401e8     6E 67 00 44 
401ec     65 76 69 63 
401f0     65 20 6E 6F 
401f4     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
401f8     65 6B 61 62 
401fc     6C 65 00 42 
40200     61 64 20 61 
40204     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
40208     73 73 00 42 
4020c     72 6F 6B 65 
40210     6E 20 63 6F 
40214     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
40218     74 69 6F 6E 
4021c     00 44 65 76 
40220     69 63 65 20 
40224     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
40228     65 73 6F 75 
4022c     72 63 65 20 
40230     62 75 73 79 
40234     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
40238     73 73 20 64 
4023c     65 76 69 63 
40240     65 20 6C 69 
40244     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
40248     6F 20 73 70 
4024c     61 63 65 20 
40250     6F 6E 20 64 
40254     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
40258     65 00 55 6E 
4025c     6B 6E 6F 77 
40260     6E 20 65 72 
40264     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
40268     00 00 00 00 
4026c     00 00 00 00 
40270     00 00 00 00 | 	byte	$00[12]
40274     05 00 00 00 
40278     00 00 00 00 
4027c     00 00 00 00 
40280     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
40284     00 00 00 00 | 	byte	$00, $00, $00, $00
40288     00 00 B0 0B | 	long	(187 {__system___tx})<<20
4028c     00 00 C0 0B | 	long	(188 {__system___rx})<<20
40290     00 00 00 00 | 	byte	$00, $00, $00, $00
40294     00 00 D0 0B | 	long	(189 {__system___rxtxioctl_0761})<<20
40298     00 00 E0 0B | 	long	(190 {__system____dummy_flush_0762})<<20
4029c     00 00 00 00 
402a0     00 00 00 00 | 	byte	$00[8]
402a4     01 00 00 00 
402a8     06 00 00 00 
402ac     00 00 00 00 
402b0     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
402b4     00 00 00 00 
402b8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
402bc     00 00 B0 0B | 	long	(187 {__system___tx})<<20
402c0     00 00 C0 0B | 	long	(188 {__system___rx})<<20
402c4     00 00 00 00 | 	byte	$00, $00, $00, $00
402c8     00 00 D0 0B | 	long	(189 {__system___rxtxioctl_0761})<<20
402cc     00 00 E0 0B | 	long	(190 {__system____dummy_flush_0762})<<20
402d0     00 00 00 00 
402d4     00 00 00 00 | 	byte	$00[8]
402d8     01 00 00 00 
402dc     06 00 00 00 
402e0     00 00 00 00 
402e4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
402e8     00 00 00 00 
402ec     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
402f0     00 00 B0 0B | 	long	(187 {__system___tx})<<20
402f4     00 00 C0 0B | 	long	(188 {__system___rx})<<20
402f8     00 00 00 00 | 	byte	$00, $00, $00, $00
402fc     00 00 D0 0B | 	long	(189 {__system___rxtxioctl_0761})<<20
40300     00 00 E0 0B | 	long	(190 {__system____dummy_flush_0762})<<20
40304     00 00 00 00 
      ...             
40474     00 00 00 00 
40478     00 00 00 00 | 	byte	$00[376]
4047c     80 04 04 00 | 	long	@@@__system__dat_ + 1848
40480     00 00 00 00 
40484     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
40488                 | 	alignl
40488                 | _fatfs_cc_dat_
40488     C7 00 FC 00 
4048c     E9 00 E2 00 
40490     E4 00 E0 00 
40494     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
40498     EA 00 EB 00 
4049c     E8 00 EF 00 
404a0     EE 00 EC 00 
404a4     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
404a8     C9 00 E6 00 
404ac     C6 00 F4 00 
404b0     F6 00 F2 00 
404b4     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
404b8     FF 00 D6 00 
404bc     DC 00 F8 00 
404c0     A3 00 D8 00 
404c4     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
404c8     E1 00 ED 00 
404cc     F3 00 FA 00 
404d0     F1 00 D1 00 
404d4     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
404d8     BF 00 AE 00 
404dc     AC 00 BD 00 
404e0     BC 00 A1 00 
404e4     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
404e8     91 25 92 25 
404ec     93 25 02 25 
404f0     24 25 C1 00 
404f4     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
404f8     A9 00 63 25 
404fc     51 25 57 25 
40500     5D 25 A2 00 
40504     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
40508     14 25 34 25 
4050c     2C 25 1C 25 
40510     00 25 3C 25 
40514     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
40518     5A 25 54 25 
4051c     69 25 66 25 
40520     60 25 50 25 
40524     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
40528     F0 00 D0 00 
4052c     CA 00 CB 00 
40530     C8 00 31 01 
40534     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
40538     CF 00 18 25 
4053c     0C 25 88 25 
40540     84 25 A6 00 
40544     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
40548     D3 00 DF 00 
4054c     D4 00 D2 00 
40550     F5 00 D5 00 
40554     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
40558     DE 00 DA 00 
4055c     DB 00 D9 00 
40560     FD 00 DD 00 
40564     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
40568     AD 00 B1 00 
4056c     17 20 BE 00 
40570     B6 00 A7 00 
40574     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
40578     B0 00 A8 00 
4057c     B7 00 B9 00 
40580     B3 00 B2 00 
40584     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
40588     61 00 1A 03 
4058c     E0 00 17 03 
40590     F8 00 07 03 
40594     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
40598     78 01 00 01 
4059c     30 01 32 01 
405a0     06 01 39 01 
405a4     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
405a8     2E 01 79 01 
405ac     06 01 80 01 
405b0     4D 00 43 02 
405b4     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
405b8     82 01 84 01 
405bc     84 01 86 01 
405c0     87 01 87 01 
405c4     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
405c8     8B 01 8B 01 
405cc     8D 01 8E 01 
405d0     8F 01 90 01 
405d4     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
405d8     93 01 94 01 
405dc     F6 01 96 01 
405e0     97 01 98 01 
405e4     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
405e8     9B 01 9C 01 
405ec     9D 01 20 02 
405f0     9F 01 A0 01 
405f4     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
405f8     A2 01 A4 01 
405fc     A4 01 A6 01 
40600     A7 01 A7 01 
40604     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
40608     AB 01 AC 01 
4060c     AC 01 AE 01 
40610     AF 01 AF 01 
40614     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
40618     B3 01 B3 01 
4061c     B5 01 B5 01 
40620     B7 01 B8 01 
40624     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
40628     BB 01 BC 01 
4062c     BC 01 BE 01 
40630     F7 01 C0 01 
40634     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
40638     C3 01 C4 01 
4063c     C5 01 C4 01 
40640     C7 01 C8 01 
40644     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
40648     CB 01 CA 01 
4064c     CD 01 10 01 
40650     DD 01 01 00 
40654     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
40658     12 01 F3 01 
4065c     03 00 F1 01 
40660     F4 01 F4 01 
40664     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
40668     22 02 12 01 
4066c     3A 02 09 00 
40670     65 2C 3B 02 
40674     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
40678     66 2C 3F 02 
4067c     40 02 41 02 
40680     41 02 46 02 
40684     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
40688     40 00 81 01 
4068c     86 01 55 02 
40690     89 01 8A 01 
40694     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
40698     5A 02 90 01 
4069c     5C 02 5D 02 
406a0     5E 02 5F 02 
406a4     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
406a8     62 02 94 01 
406ac     64 02 65 02 
406b0     66 02 67 02 
406b4     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
406b8     6A 02 62 2C 
406bc     6C 02 6D 02 
406c0     6E 02 9C 01 
406c4     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
406c8     9D 01 73 02 
406cc     74 02 9F 01 
406d0     76 02 77 02 
406d4     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
406d8     7A 02 7B 02 
406dc     7C 02 64 2C 
406e0     7E 02 7F 02 
406e4     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
406e8     82 02 A9 01 
406ec     84 02 85 02 
406f0     86 02 87 02 
406f4     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
406f8     B1 01 B2 01 
406fc     45 02 8D 02 
40700     8E 02 8F 02 
40704     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
40708     B7 01 7B 03 
4070c     03 00 FD 03 
40710     FE 03 FF 03 
40714     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
40718     86 03 88 03 
4071c     89 03 8A 03 
40720     B1 03 11 03 
40724     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
40728     A3 03 A3 03 
4072c     C4 03 08 03 
40730     CC 03 03 00 
40734     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
40738     8F 03 D8 03 
4073c     18 01 F2 03 
40740     0A 00 F9 03 
40744     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
40748     F5 03 F6 03 
4074c     F7 03 F7 03 
40750     F9 03 FA 03 
40754     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
40758     20 03 50 04 
4075c     10 07 60 04 
40760     22 01 8A 04 
40764     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
40768     0E 01 CF 04 
4076c     01 00 C0 04 
40770     D0 04 44 01 
40774     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
40778     00 00 7D 1D 
4077c     01 00 63 2C 
40780     00 1E 96 01 
40784     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
40788     00 1F 08 06 
4078c     10 1F 06 06 
40790     20 1F 08 06 
40794     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
40798     40 1F 06 06 
4079c     51 1F 07 00 
407a0     59 1F 52 1F 
407a4     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
407a8     5D 1F 56 1F 
407ac     5F 1F 60 1F 
407b0     08 06 70 1F 
407b4     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
407b8     BB 1F C8 1F 
407bc     C9 1F CA 1F 
407c0     CB 1F DA 1F 
407c4     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
407c8     F9 1F EA 1F 
407cc     EB 1F FA 1F 
407d0     FB 1F 80 1F 
407d4     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
407d8     08 06 A0 1F 
407dc     08 06 B0 1F 
407e0     04 00 B8 1F 
407e4     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
407e8     BC 1F CC 1F 
407ec     01 00 C3 1F 
407f0     D0 1F 02 06 
407f4     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
407f8     E5 1F 01 00 
407fc     EC 1F F3 1F 
40800     01 00 FC 1F 
40804     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
40808     32 21 70 21 
4080c     10 02 84 21 
40810     01 00 83 21 
40814     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
40818     30 2C 2F 04 
4081c     60 2C 02 01 
40820     67 2C 06 01 
40824     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
40828     80 2C 64 01 
4082c     00 2D 26 08 
40830     41 FF 1A 03 
40834     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
40838     05 07 09 0E 
4083c     10 12 14 16 
40840     18 1C 1E 43 
40844     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
40848     41 41 43 45 
4084c     45 45 49 49 
40850     49 41 41 45 
40854     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
40858     4F 55 55 59 
4085c     4F 55 4F 9C 
40860     4F 9E 9F 41 
40864     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
40868     A5 A6 A7 A8 
4086c     A9 AA AB AC 
40870     AD AE AF B0 
40874     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
40878     41 41 41 B8 
4087c     B9 BA BB BC 
40880     BD BE BF C0 
40884     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
40888     C5 41 41 C8 
4088c     C9 CA CB CC 
40890     CD CE CF D1 
40894     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
40898     49 49 49 49 
4089c     D9 DA DB DC 
408a0     DD 49 DF 4F 
408a4     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
408a8     4F E6 E8 E8 
408ac     55 55 55 59 
408b0     59 EE EF F0 
408b4     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
408b8     F5 F6 F7 F8 
408bc     F9 FA FB FC 
408c0     FD FE FF 00 
408c4     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
408c8     00 00 00 00 | 	byte	$00, $00, $00, $00
408cc     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_close})<<20
408d0     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_read})<<20
408d4     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_write})<<20
408d8     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_lseek})<<20
408dc     00 00 E0 0A | 	long	(174 {_fatfs_cc_v_ioctl})<<20
408e0     00 00 F0 0B | 	long	(191 {_fatfs_cc_v_flush})<<20
408e4     00 00 00 00 
408e8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
408ec     00 00 F0 0A | 	long	(175 {_fatfs_cc_v_open})<<20
408f0     00 00 00 0B | 	long	(176 {_fatfs_cc_v_creat})<<20
408f4     00 00 10 0B | 	long	(177 {_fatfs_cc_v_opendir})<<20
408f8     00 00 20 0B | 	long	(178 {_fatfs_cc_v_closedir})<<20
408fc     00 00 30 0B | 	long	(179 {_fatfs_cc_v_readdir})<<20
40900     00 00 40 0B | 	long	(180 {_fatfs_cc_v_stat})<<20
40904     00 00 50 0B | 	long	(181 {_fatfs_cc_v_mkdir})<<20
40908     00 00 60 0B | 	long	(182 {_fatfs_cc_v_rmdir})<<20
4090c     00 00 70 0B | 	long	(183 {_fatfs_cc_v_remove})<<20
40910     00 00 80 0B | 	long	(184 {_fatfs_cc_v_rename})<<20
40914     00 00 90 0B | 	long	(185 {_fatfs_cc_v_init})<<20
40918     00 00 A0 0B | 	long	(186 {_fatfs_cc_v_deinit})<<20
4091c     FF FF FF FF 
40920     1F 00 00 00 
40924     1C 00 00 00 
40928     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
4092c     1E 00 00 00 
40930     1F 00 00 00 
40934     1E 00 00 00 
40938     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
4093c     1F 00 00 00 
40940     1E 00 00 00 
40944     1F 00 00 00 
40948     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
4094c     1F 00 00 00 
40950     00 00 00 00 
40954     1F 00 00 00 
40958     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
4095c     5A 00 00 00 
40960     78 00 00 00 
40964     97 00 00 00 
40968     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
4096c     D4 00 00 00 
40970     F3 00 00 00 
40974     11 01 00 00 
40978     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
4097c     4E 01 00 00 
40980     6D 01 00 00 
40984     FF FF FF FF 
40988     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
4098c     00 00 00 00 
      ...             
409a4     00 00 00 00 
409a8     00 00 00 00 | 	byte	$00[32]
409ac     CA 09 04 00 | 	long	@@@_fatfs_cc_dat_ + 1346
409b0     CE 09 04 00 | 	long	@@@_fatfs_cc_dat_ + 1350
409b4     00 00 00 00 
409b8     00 00 00 00 
409bc     00 00 00 00 
409c0     00 00 00 00 
409c4     00 00       | 	byte	$00[18]
409c6     3F 3F 3F 00 
409ca     55 43 54 00 
409ce     55 43 54 00 
409d2     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
409d6     00 00 00 00 
409da     00 00 00    | 	byte	$00[7]
409dd     CA 9A 3B 00 
409e1     00 00 00 01 
409e5     01 01 01 01 
409e9     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
409ed     91 11 11 11 
409f1     11 01 01 01 
409f5     01 01 01 01 
409f9     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
409fd     01 01 01 01 
40a01     01 01 01    | 	byte	$01[7]
40a04     90 20 20 20 
40a08     20 20 20 20 
40a0c     20 20 20 20 
40a10     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
40a14     42 42 42 42 
40a18     42 42 42 42 
40a1c     42 42       | 	byte	$42[10]
40a1e     20 20 20 20 
40a22     20 20 20    | 	byte	$20[7]
40a25     44 44 44 44 
40a29     44 44       | 	byte	$44[6]
40a2b     04 04 04 04 
40a2f     04 04 04 04 
40a33     04 04 04 04 
40a37     04 04 04 04 
40a3b     04 04 04 04 | 	byte	$04[20]
40a3f     20 20 20 20 
40a43     20 20       | 	byte	$20[6]
40a45     48 48 48 48 
40a49     48 48       | 	byte	$48[6]
40a4b     08 08 08 08 
40a4f     08 08 08 08 
40a53     08 08 08 08 
40a57     08 08 08 08 
40a5b     08 08 08 08 | 	byte	$08[20]
40a5f     20 20 20 20 
40a63     01 00 00 00 
40a67     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
40a68                 | __methodtable__
40a68     6C 5C 01 00 | 	long	@_do_no_command
40a6c     10 F6 01 00 | 	long	@_do_plus
40a70     30 E6 01 00 | 	long	@_do_minus
40a74     F8 F4 01 00 | 	long	@_do_or
40a78     B0 EC 01 00 | 	long	@_do_mul
40a7c     F4 D0 01 00 | 	long	@_do_fdiv
40a80     E0 C8 01 00 | 	long	@_do_and
40a84     F8 C9 01 00 | 	long	@_do_div
40a88     90 EA 01 00 | 	long	@_do_mod
40a8c     C4 FC 01 00 | 	long	@_do_shl
40a90     DC FD 01 00 | 	long	@_do_shr
40a94     FC FA 01 00 | 	long	@_do_power
40a98     98 BE 01 00 | 	long	@_do_getvar
40a9c     28 82 01 00 | 	long	@_do_push
40aa0     90 B8 01 00 | 	long	@_do_assign
40aa4     14 F5 00 00 | 	long	@_do_cls
40aa8     38 56 01 00 | 	long	@_do_new
40aac     6C 7A 01 00 | 	long	@_do_plot
40ab0     14 17 01 00 | 	long	@_do_draw
40ab4     D4 7C 01 00 | 	long	@_do_print
40ab8     F4 F2 00 00 | 	long	@_do_circle
40abc     48 19 01 00 | 	long	@_do_fcircle
40ac0     E8 E1 00 00 | 	long	@_do_box
40ac4     2C 1E 01 00 | 	long	@_do_frame
40ac8     54 F5 00 00 | 	long	@_do_color
40acc     BC 1B 01 00 | 	long	@_do_for
40ad0     A4 58 01 00 | 	long	@_do_next
40ad4     70 44 01 00 | 	long	@_do_list
40ad8     D0 9D 01 00 | 	long	@_do_run
40adc     70 18 01 00 | 	long	@_do_error
40ae0     78 2A 01 00 | 	long	@_do_fast_goto
40ae4     68 2B 01 00 | 	long	@_do_find_goto
40ae8     7C 2D 01 00 | 	long	@_do_slow_goto
40aec     8C 5C 01 00 | 	long	@_do_nothing
40af0     EC D4 00 00 | 	long	@_test_csave
40af4     EC A1 01 00 | 	long	@_do_save
40af8     0C 47 01 00 | 	long	@_do_load
40afc     A8 6D 01 00 | 	long	@_do_pinwrite
40b00     D0 B5 01 00 | 	long	@_do_waitms
40b04     04 B7 01 00 | 	long	@_do_waitvbl
40b08     70 30 01 00 | 	long	@_do_if
40b0c     08 18 01 00 | 	long	@_do_else
40b10     18 CC 01 00 | 	long	@_do_eq
40b14     BC D2 01 00 | 	long	@_do_ge
40b18     88 DC 01 00 | 	long	@_do_le
40b1c     A4 D7 01 00 | 	long	@_do_gt
40b20     64 E1 01 00 | 	long	@_do_lt
40b24     1C F0 01 00 | 	long	@_do_ne
40b28     38 9B 01 00 | 	long	@_do_rnd
40b2c     D0 E3 00 00 | 	long	@_do_brun
40b30     6C DD 00 00 | 	long	@_do_beep
40b34     A4 0F 01 00 | 	long	@_do_dir
40b38     DC 69 01 00 | 	long	@_do_paper
40b3c     2C 34 01 00 | 	long	@_do_ink
40b40     40 1B 01 00 | 	long	@_do_font
40b44     48 51 01 00 | 	long	@_do_mode
40b48     F4 54 01 00 | 	long	@_do_mouse
40b4c     F8 28 01 00 | 	long	@_do_gettime
40b50     B0 F6 00 00 | 	long	@_do_cursor
40b54     6C F4 00 00 | 	long	@_do_click
40b58     B0 55 01 00 | 	long	@_do_mousex
40b5c     F4 55 01 00 | 	long	@_do_mousey
40b60     28 55 01 00 | 	long	@_do_mousek
40b64     6C 55 01 00 | 	long	@_do_mousew
40b68     38 AB 01 00 | 	long	@_do_sin
40b6c     70 AE 01 00 | 	long	@_do_stick
40b70     00 B0 01 00 | 	long	@_do_strig
40b74     90 AC 01 00 | 	long	@_do_sprite
40b78     CC 0A 01 00 | 	long	@_do_defsprite
40b7c     A4 27 01 00 | 	long	@_do_getpixel
40b80     AC B5 01 00 | 	long	@_do_waitclock
40b84     E0 E9 01 00 | 	long	@_do_negative
40b88     AC 88 01 00 | 	long	@_do_rdpin
40b8c     5C 9D 01 00 | 	long	@_do_rqpin
40b90     D4 6B 01 00 | 	long	@_do_pinread
40b94     10 B7 01 00 | 	long	@_do_wrpin
40b98     90 B7 01 00 | 	long	@_do_wxpin
40b9c     10 B8 01 00 | 	long	@_do_wypin
40ba0     14 6B 01 00 | 	long	@_do_pinfloat
40ba4     94 6B 01 00 | 	long	@_do_pinlo
40ba8     54 6B 01 00 | 	long	@_do_pinhi
40bac     58 6C 01 00 | 	long	@_do_pinstart
40bb0     68 6D 01 00 | 	long	@_do_pintoggle
40bb4     4C 7C 01 00 | 	long	@_do_position
40bb8     8C F5 00 00 | 	long	@_do_cos
40bbc     90 B1 01 00 | 	long	@_do_tan
40bc0     54 DC 00 00 | 	long	@_do_atn
40bc4     44 DB 00 00 | 	long	@_do_asin
40bc8     D4 D8 00 00 | 	long	@_do_acos
40bcc     7C AD 01 00 | 	long	@_do_sqr
40bd0     2C 1A 01 00 | 	long	@_do_fill
40bd4     E0 01 01 00 | 	long	@_do_defsnd
40bd8     E4 F6 00 00 | 	long	@_do_defenv
40bdc     84 88 01 00 | 	long	@_do_rad
40be0     40 0E 01 00 | 	long	@_do_deg
40be4     AC 34 01 00 | 	long	@_do_int
40be8     30 6E 01 00 | 	long	@_do_play
40bec     90 A5 01 00 | 	long	@_do_setdelay
40bf0     38 A6 01 00 | 	long	@_do_setenv
40bf4     E0 A6 01 00 | 	long	@_do_setlen
40bf8     88 A7 01 00 | 	long	@_do_setpan
40bfc     D8 A8 01 00 | 	long	@_do_setvol
40c00     80 A9 01 00 | 	long	@_do_setwave
40c04     30 A8 01 00 | 	long	@_do_setsustain
40c08     30 98 01 00 | 	long	@_do_release
40c0c     90 25 01 00 | 	long	@_do_getenvsustain
40c10     3C 7B 01 00 | 	long	@_do_poke
40c14     3C 16 01 00 | 	long	@_do_dpoke
40c18     E4 4D 01 00 | 	long	@_do_lpoke
40c1c     64 6A 01 00 | 	long	@_do_peek
40c20     90 15 01 00 | 	long	@_do_dpeek
40c24     38 4D 01 00 | 	long	@_do_lpeek
40c28     88 1F 01 00 | 	long	@_do_fre
40c2c     A0 26 01 00 | 	long	@_do_getnotevalue
40c30     50 C4 01 00 | 	long	@_do_getaddr
40c34     54 31 01 00 | 	long	@_do_inkey
40c38     54 D8 00 00 | 	long	@_do_abs
40c3c     0C 2F 01 00 | 	long	@_do_hex
40c40     84 E0 00 00 | 	long	@_do_bin
40c44     A0 B2 01 00 | 	long	@_do_val
40c48     F4 F1 00 00 | 	long	@_do_chr
40c4c     E4 D9 00 00 | 	long	@_do_asc
40c50     70 41 01 00 | 	long	@_do_left
40c54     AC 99 01 00 | 	long	@_do_right
40c58     BC 4E 01 00 | 	long	@_do_mid
40c5c     FC 42 01 00 | 	long	@_do_len
40c60     60 29 01 00 | 	long	@_do_gosub
40c64     00 99 01 00 | 	long	@_do_return
40c68     2C 18 01 00 | 	long	@_do_end
40c6c     14 7C 01 00 | 	long	@_do_pop
40c70     BC 4B 01 00 | 	long	@_do_log
40c74     E8 EF 00 00 | 	long	@_do_changevol
40c78     C8 F0 00 00 | 	long	@_do_changewav
40c7c     D8 EE 00 00 | 	long	@_do_changepan
40c80     BC EB 00 00 | 	long	@_do_changefreq
40c84     28 AA 01 00 | 	long	@_do_shutup
40c88     08 9D 01 00 | 	long	@_do_round
40c8c     60 18 01 00 | 	long	@_do_enter
40c90     B4 5D 01 00 | 	long	@_do_open
40c94     98 F4 00 00 | 	long	@_do_close
40c98     EC 1F 01 00 | 	long	@_do_get
40c9c     44 83 01 00 | 	long	@_do_put
40ca0     08 E6 00 00 | 	long	@_do_cd
40ca4     68 0E 01 00 | 	long	@_do_delete
40ca8     88 50 01 00 | 	long	@_do_mkdir
40cac     80 DE 00 00 | 	long	@_do_blit
40cb0     54 1F 01 00 | 	long	@_do_framebuf
40cb4     90 5C 01 00 | 	long	@_do_on
40cb8     48 AC 01 00 | 	long	@_do_skip
40cbc     68 35 01 00 | 	long	@_do_input
40cc0     10 8B 01 00 | 	long	@_do_read
40cc4     C8 98 01 00 | 	long	@_do_restore
40cc8     5C 62 01 00 | 	long	@_do_padx
40ccc     DC 64 01 00 | 	long	@_do_pady
40cd0     5C 67 01 00 | 	long	@_do_padz
40cd4     CC 60 01 00 | 	long	@_do_padh
40cd8     D8 3D 02 00 | 	long	@_hg010b_spin2_putchar
40cdc     C0 53 03 00 | 	long	@__struct___bas_wrap_sender_tx
40ce0     04 54 03 00 | 	long	@__struct___bas_wrap_sender_rx
40ce4     4C 54 03 00 | 	long	@__struct___bas_wrap_sender_close
40ce8     F0 52 03 00 | 	long	@__struct__s_vfs_file_t_putchar
40cec     60 53 03 00 | 	long	@__struct__s_vfs_file_t_getchar
40cf0     A8 52 03 00 | 	long	@___strs_cl_pfunc
40cf4     3C B0 02 00 | 	long	@__system____root_opendir
40cf8     D8 B0 02 00 | 	long	@__system____root_closedir
40cfc     54 B0 02 00 | 	long	@__system____root_readdir
40d00     E0 B0 02 00 | 	long	@__system____root_stat
40d04     2C A9 02 00 | 	long	@__system____default_putc
40d08     B0 A8 02 00 | 	long	@__system____default_getc
40d0c     D4 A9 02 00 | 	long	@__system____default_flush
40d10     AC 3D 03 00 | 	long	@_fatfs_cc_v_close
40d14     C8 41 03 00 | 	long	@_fatfs_cc_v_read
40d18     DC 42 03 00 | 	long	@_fatfs_cc_v_write
40d1c     BC 43 03 00 | 	long	@_fatfs_cc_v_lseek
40d20     44 44 03 00 | 	long	@_fatfs_cc_v_ioctl
40d24     98 44 03 00 | 	long	@_fatfs_cc_v_open
40d28     10 3D 03 00 | 	long	@_fatfs_cc_v_creat
40d2c     F0 3D 03 00 | 	long	@_fatfs_cc_v_opendir
40d30     64 3E 03 00 | 	long	@_fatfs_cc_v_closedir
40d34     A4 3E 03 00 | 	long	@_fatfs_cc_v_readdir
40d38     D8 3F 03 00 | 	long	@_fatfs_cc_v_stat
40d3c     58 44 03 00 | 	long	@_fatfs_cc_v_mkdir
40d40     78 44 03 00 | 	long	@_fatfs_cc_v_rmdir
40d44     68 44 03 00 | 	long	@_fatfs_cc_v_remove
40d48     88 44 03 00 | 	long	@_fatfs_cc_v_rename
40d4c     A8 45 03 00 | 	long	@_fatfs_cc_v_init
40d50     B0 45 03 00 | 	long	@_fatfs_cc_v_deinit
40d54     80 5A 02 00 | 	long	@__system___tx
40d58     C0 5A 02 00 | 	long	@__system___rx
40d5c     4C BC 02 00 | 	long	@__system___rxtxioctl_0761
40d60     A4 BC 02 00 | 	long	@__system____dummy_flush_0762
40d64     78 45 03 00 | 	long	@_fatfs_cc_v_flush
40d68                 | __heap_base
40d68     00 00 00 00 
      ...             
58468     00 00 00 00 
5846c     00 00 00 00 | 	long	0[24002]
58470                 | objmem
58470     00 00 00 00 
      ...             
62934     00 00 00 00 
62938     00 00 00 00 | 	long	0[10547]
6293c                 | stackspace
6293c     00 00 00 00 | 	long	0[1]
62940 100             | 	org	COG_BSS_START
62940 100             | _var01
62940 100             | 	res	1
62940 101             | _var02
62940 101             | 	res	1
62940 102             | _var03
62940 102             | 	res	1
62940 103             | _var04
62940 103             | 	res	1
62940 104             | _var05
62940 104             | 	res	1
62940 105             | _var06
62940 105             | 	res	1
62940 106             | _var07
62940 106             | 	res	1
62940 107             | _var08
62940 107             | 	res	1
62940 108             | _var09
62940 108             | 	res	1
62940 109             | arg01
62940 109             | 	res	1
62940 10a             | arg02
62940 10a             | 	res	1
62940 10b             | arg03
62940 10b             | 	res	1
62940 10c             | arg04
62940 10c             | 	res	1
62940 10d             | arg05
62940 10d             | 	res	1
62940 10e             | arg06
62940 10e             | 	res	1
62940 10f             | arg07
62940 10f             | 	res	1
62940 110             | arg08
62940 110             | 	res	1
62940 111             | arg09
62940 111             | 	res	1
62940 112             | arg10
62940 112             | 	res	1
62940 113             | local01
62940 113             | 	res	1
62940 114             | local02
62940 114             | 	res	1
62940 115             | local03
62940 115             | 	res	1
62940 116             | local04
62940 116             | 	res	1
62940 117             | local05
62940 117             | 	res	1
62940 118             | local06
62940 118             | 	res	1
62940 119             | local07
62940 119             | 	res	1
62940 11a             | local08
62940 11a             | 	res	1
62940 11b             | local09
62940 11b             | 	res	1
62940 11c             | local10
62940 11c             | 	res	1
62940 11d             | local11
62940 11d             | 	res	1
62940 11e             | local12
62940 11e             | 	res	1
62940 11f             | local13
62940 11f             | 	res	1
62940 120             | local14
62940 120             | 	res	1
62940 121             | local15
62940 121             | 	res	1
62940 122             | local16
62940 122             | 	res	1
62940 123             | local17
62940 123             | 	res	1
62940 124             | local18
62940 124             | 	res	1
62940 125             | local19
62940 125             | 	res	1
62940 126             | local20
62940 126             | 	res	1
62940 127             | local21
62940 127             | 	res	1
62940 128             | local22
62940 128             | 	res	1
62940 129             | local23
62940 129             | 	res	1
62940 12a             | local24
62940 12a             | 	res	1
62940 12b             | local25
62940 12b             | 	res	1
62940 12c             | local26
62940 12c             | 	res	1
62940 12d             | local27
62940 12d             | 	res	1
62940 12e             | local28
62940 12e             | 	res	1
62940 12f             | local29
62940 12f             | 	res	1
62940 130             | local30
62940 130             | 	res	1
62940 131             | local31
62940 131             | 	res	1
62940 132             | local32
62940 132             | 	res	1
62940 133             | local33
62940 133             | 	res	1
62940 134             | local34
62940 134             | 	res	1
62940 135             | local35
62940 135             | 	res	1
62940 136             | local36
62940 136             | 	res	1
62940 137             | local37
62940 137             | 	res	1
62940 138             | local38
62940 138             | 	res	1
62940 139             | local39
62940 139             | 	res	1
62940 13a             | local40
62940 13a             | 	res	1
62940 13b             | local41
62940 13b             | 	res	1
62940 13c             | local42
62940 13c             | 	res	1
62940 13d             | local43
62940 13d             | 	res	1
62940 13e             | local44
62940 13e             | 	res	1
62940 13f             | local45
62940 13f             | 	res	1
62940 140             | local46
62940 140             | 	res	1
62940 141             | local47
62940 141             | 	res	1
62940 142             | local48
62940 142             | 	res	1
62940 143             | local49
62940 143             | 	res	1
62940 144             | muldiva_
62940 144             | 	res	1
62940 145             | muldivb_
62940 145             | 	res	1
62940 146             | 	fit	480
62940 146             | 
