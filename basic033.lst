00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic033.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 33
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 50 29 A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 45 8B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 44 89 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 45 89 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 8A 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 88 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 44 89 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 45 8B 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 3C 13 04 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 34 10 04 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 44 8A 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 14 03 04 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 6C FE 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 7C 6B 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 54 0A 04 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 E4 9C 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 94 C4 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 4C C2 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 24 D4 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 64 2F 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     00 3A B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     94 4E B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D0 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10192
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D0 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10192
00840     52 00 00 FF 
00844     E0 E4 05 F1 | 	add	objptr, ##42208
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     52 00 00 FF 
00850     E0 E4 85 F1 | 	sub	objptr, ##42208
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     3C E5 05 F1 | 	add	objptr, ##41276
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     3C E5 85 F1 | 	sub	objptr, ##41276
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     D4 51 B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     28 59 B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     20 53 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     3C E5 05 F1 | 	add	objptr, ##41276
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     3C E5 85 F1 | 	sub	objptr, ##41276
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     52 00 00 FF 
00980     A4 E4 05 F1 | 	add	objptr, ##42148
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     D4 E5 85 F1 | 	sub	objptr, ##36308
009c0     E4 50 B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     D8 1E B2 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     52 00 00 FF 
009dc     E0 E4 05 F1 | 	add	objptr, ##42208
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     52 00 00 FF 
009e8     E0 E4 85 F1 | 	sub	objptr, ##42208
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     52 00 00 FF 
00a64     C8 E4 05 F1 | 	add	objptr, ##42184
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     52 00 00 FF 
00a70     C8 E4 85 F1 | 	sub	objptr, ##42184
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     D0 1C B2 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     70 1C B2 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     52 00 00 FF 
00afc     E8 E4 05 F1 | 	add	objptr, ##42216
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     52 00 00 FF 
00b08     AA E4 85 F1 | 	sub	objptr, ##42154
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     52 00 00 FF 
00b74     AC E4 05 F1 | 	add	objptr, ##42156
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     52 00 00 FF 
00b88     AA E4 85 F1 | 	sub	objptr, ##42154
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     00 1C B2 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     48 34 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     52 00 00 FF 
00bdc     E8 E4 05 F1 | 	add	objptr, ##42216
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     52 00 00 FF 
00bf0     E8 E4 85 F1 | 	sub	objptr, ##42216
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     64 37 B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     3C E5 05 A1 |  if_e	add	objptr, ##41276
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     3C E5 85 A1 |  if_e	sub	objptr, ##41276
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     10 4E B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     64 55 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     60 4F B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     AD 01 00 FF 
00ccc     B6 50 06 F6 | 	mov	local22, ##@LR__5377
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     94 1A B2 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     40 74 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     50 52 B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     52 00 00 FF 
00d34     C8 E4 05 F1 | 	add	objptr, ##42184
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     52 00 00 FF 
00d40     C8 E4 85 F1 | 	sub	objptr, ##42184
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     B4 3B B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     E4 3D B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     3C E5 05 F1 | 	add	objptr, ##41276
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     3C E5 85 F1 | 	sub	objptr, ##41276
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     9C 4C B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     F0 53 B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     EC 4D B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     30 19 B2 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     24 33 B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     18 33 B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     A8 32 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     74 32 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     94 32 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     84 32 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     D4 17 B2 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     80 17 B2 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     50 17 B2 FD | 	call	#_pspoke
0100c     52 00 00 FF 
01010     E8 E4 05 F1 | 	add	objptr, ##42216
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     52 00 00 FF 
0101c     AA E4 85 F1 | 	sub	objptr, ##42154
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     52 00 00 FF 
0108c     AC E4 05 F1 | 	add	objptr, ##42156
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     52 00 00 FF 
010a0     AA E4 85 F1 | 	sub	objptr, ##42154
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     E8 16 B2 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     30 2F B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     52 00 00 FF 
010f4     E8 E4 05 F1 | 	add	objptr, ##42216
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     52 00 00 FF 
01108     E8 E4 85 F1 | 	sub	objptr, ##42216
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     0C 30 B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     D0 15 B2 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     7C 15 B2 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     4C 15 B2 FD | 	call	#_pspoke
01210     52 00 00 FF 
01214     E8 E4 05 F1 | 	add	objptr, ##42216
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     52 00 00 FF 
01220     AA E4 85 F1 | 	sub	objptr, ##42154
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     52 00 00 FF 
01290     AC E4 05 F1 | 	add	objptr, ##42156
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     52 00 00 FF 
012a4     AA E4 85 F1 | 	sub	objptr, ##42154
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     E4 14 B2 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     2C 2D B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     52 00 00 FF 
012f8     E8 E4 05 F1 | 	add	objptr, ##42216
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     52 00 00 FF 
0130c     E8 E4 85 F1 | 	sub	objptr, ##42216
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     AD 01 00 FF 
01328     B7 50 06 F6 | 	mov	local22, ##@LR__5378
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     52 00 00 FF 
01354     8E E4 05 F1 | 	add	objptr, ##42126
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     52 00 00 FF 
01360     CC E4 85 F1 | 	sub	objptr, ##42188
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     52 00 00 CF 
0136c     CC E4 05 C1 |  if_b	add	objptr, ##42188
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     52 00 00 CF 
01378     CC E4 85 C1 |  if_b	sub	objptr, ##42188
0137c     52 00 00 FF 
01380     CC E4 05 F1 | 	add	objptr, ##42188
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     52 00 00 FF 
0138c     CC E4 85 F1 | 	sub	objptr, ##42188
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     54 2E B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     52 00 00 FF 
013b4     8E E4 05 F1 | 	add	objptr, ##42126
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     52 00 00 FF 
013c0     CC E4 85 F1 | 	sub	objptr, ##42188
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     52 00 00 3F 
013cc     CC E4 05 31 |  if_ae	add	objptr, ##42188
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     52 00 00 3F 
013d8     CC E4 85 31 |  if_ae	sub	objptr, ##42188
013dc     52 00 00 FF 
013e0     CC E4 05 F1 | 	add	objptr, ##42188
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     52 00 00 FF 
013ec     CC E4 85 F1 | 	sub	objptr, ##42188
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     F4 2D B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     52 00 00 FF 
01414     94 E4 05 F1 | 	add	objptr, ##42132
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1B 00 00 FF 
01420     9C E4 85 F1 | 	sub	objptr, ##13980
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1B 00 00 CF 
01448     9C E4 05 C1 |  if_b	add	objptr, ##13980
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     52 00 00 CF 
01454     D0 E4 85 C1 |  if_b	sub	objptr, ##42192
01458     52 00 00 FF 
0145c     D0 E4 05 F1 | 	add	objptr, ##42192
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     52 00 00 FF 
01468     D0 E4 85 F1 | 	sub	objptr, ##42192
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     48 2D B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     52 00 00 FF 
01490     94 E4 05 F1 | 	add	objptr, ##42132
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     52 00 00 FF 
0149c     D0 E4 85 F1 | 	sub	objptr, ##42192
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     52 00 00 3F 
014a8     D0 E4 05 31 |  if_ae	add	objptr, ##42192
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     52 00 00 3F 
014b4     D0 E4 85 31 |  if_ae	sub	objptr, ##42192
014b8     52 00 00 FF 
014bc     D0 E4 05 F1 | 	add	objptr, ##42192
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     52 00 00 FF 
014c8     D0 E4 85 F1 | 	sub	objptr, ##42192
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     EC 2C B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     52 00 00 FF 
014e0     C8 E4 05 F1 | 	add	objptr, ##42184
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     52 00 00 FF 
014f4     C8 E4 85 F1 | 	sub	objptr, ##42184
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     38 1B B2 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     28 1B B2 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     52 00 00 FF 
01544     4B E4 05 F1 | 	add	objptr, ##42059
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     52 00 00 FF 
01558     94 E4 85 F1 | 	sub	objptr, ##42132
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     A4 4C B2 FD | 	call	#__system___waitms
01568     52 00 00 FF 
0156c     94 E4 05 F1 | 	add	objptr, ##42132
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     52 00 00 FF 
01580     94 E4 85 F1 | 	sub	objptr, ##42132
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     7C 4C B2 FD | 	call	#__system___waitms
01590     52 00 00 FF 
01594     94 E4 05 F1 | 	add	objptr, ##42132
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     52 00 00 FF 
015a8     94 E4 85 F1 | 	sub	objptr, ##42132
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     54 4C B2 FD | 	call	#__system___waitms
015b8     52 00 00 FF 
015bc     94 E4 05 F1 | 	add	objptr, ##42132
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     52 00 00 FF 
015d0     94 E4 85 F1 | 	sub	objptr, ##42132
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     08 4A 05 F6 | 	mov	COUNT_, #8
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     48 E5 05 F1 | 	add	objptr, ##41800
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     AD F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10413
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     50 E5 85 F1 | 	sub	objptr, ##41808
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650     64 41 B2 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     6C 01 90 CD |  if_b	jmp	#LR__0061
0165c     14 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     B4 41 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 2A 02 F6 | 	mov	local03, result1
0166c     14 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     A4 41 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     FD 2C 02 F6 | 	mov	local04, result1
0167c     14 13 02 F6 | 	mov	arg01, local02
01680     02 14 06 F6 | 	mov	arg02, #2
01684     94 41 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01688     FD 2E 02 F6 | 	mov	local05, result1
0168c     14 13 02 F6 | 	mov	arg01, local02
01690     00 14 06 F6 | 	mov	arg02, #0
01694     D4 41 B2 FD | 	call	#_usbnew_spin2_hidpad_hat
01698     FD 30 02 F6 | 	mov	local06, result1
0169c     14 13 02 F6 | 	mov	arg01, local02
016a0     03 14 06 F6 | 	mov	arg02, #3
016a4     74 41 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016a8     FD 32 02 F6 | 	mov	local07, result1
016ac     14 13 02 F6 | 	mov	arg01, local02
016b0     04 14 06 F6 | 	mov	arg02, #4
016b4     64 41 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016b8     FD 34 02 F6 | 	mov	local08, result1
016bc     14 13 02 F6 | 	mov	arg01, local02
016c0     05 14 06 F6 | 	mov	arg02, #5
016c4     54 41 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016c8     FD 14 02 F6 | 	mov	arg02, result1
016cc     13 FB 01 F6 | 	mov	result1, local01
016d0     02 FA 65 F0 | 	shl	result1, #2
016d4     51 00 00 FF 
016d8     58 E5 05 F1 | 	add	objptr, ##41816
016dc     F2 FA 01 F1 | 	add	result1, objptr
016e0     FD 2A 62 FC | 	wrlong	local03, result1
016e4     13 FB 01 F6 | 	mov	result1, local01
016e8     02 FA 65 F0 | 	shl	result1, #2
016ec     1C E4 05 F1 | 	add	objptr, #28
016f0     F2 FA 01 F1 | 	add	result1, objptr
016f4     FD 2C 62 FC | 	wrlong	local04, result1
016f8     13 FB 01 F6 | 	mov	result1, local01
016fc     02 FA 65 F0 | 	shl	result1, #2
01700     1C E4 05 F1 | 	add	objptr, #28
01704     F2 FA 01 F1 | 	add	result1, objptr
01708     FD 2E 62 FC | 	wrlong	local05, result1
0170c     13 2F 02 F6 | 	mov	local05, local01
01710     02 2E 66 F0 | 	shl	local05, #2
01714     1C E4 05 F1 | 	add	objptr, #28
01718     F2 2E 02 F1 | 	add	local05, objptr
0171c     17 31 62 FC | 	wrlong	local06, local05
01720     13 31 02 F6 | 	mov	local06, local01
01724     02 30 66 F0 | 	shl	local06, #2
01728     1C E4 05 F1 | 	add	objptr, #28
0172c     F2 30 02 F1 | 	add	local06, objptr
01730     18 33 62 FC | 	wrlong	local07, local06
01734     13 33 02 F6 | 	mov	local07, local01
01738     02 32 66 F0 | 	shl	local07, #2
0173c     1C E4 05 F1 | 	add	objptr, #28
01740     F2 32 02 F1 | 	add	local07, objptr
01744     19 35 62 FC | 	wrlong	local08, local07
01748     13 35 02 F6 | 	mov	local08, local01
0174c     02 34 66 F0 | 	shl	local08, #2
01750     1C E4 05 F1 | 	add	objptr, #28
01754     F2 34 02 F1 | 	add	local08, objptr
01758     1A 15 62 FC | 	wrlong	arg02, local08
0175c     60 00 00 FF 
01760     00 2A 06 F1 | 	add	local03, ##49152
01764     0F 2A 46 F0 | 	shr	local03, #15
01768     01 34 06 F6 | 	mov	local08, #1
0176c     15 35 02 F1 | 	add	local08, local03
01770     60 00 00 FF 
01774     00 2C 06 F1 | 	add	local04, ##49152
01778     0F 2C 46 F0 | 	shr	local04, #15
0177c     01 32 06 F6 | 	mov	local07, #1
01780     16 33 02 F1 | 	add	local07, local04
01784     13 31 02 F6 | 	mov	local06, local01
01788     02 30 66 F0 | 	shl	local06, #2
0178c     1C E4 05 F1 | 	add	objptr, #28
01790     F2 30 02 F1 | 	add	local06, objptr
01794     02 32 66 F0 | 	shl	local07, #2
01798     19 35 02 F1 | 	add	local08, local07
0179c     18 35 62 FC | 	wrlong	local08, local06
017a0     13 35 02 F6 | 	mov	local08, local01
017a4     02 34 66 F0 | 	shl	local08, #2
017a8     1C E4 05 F1 | 	add	objptr, #28
017ac     F2 34 02 F1 | 	add	local08, objptr
017b0     14 13 02 F6 | 	mov	arg01, local02
017b4     52 00 00 FF 
017b8     38 E4 85 F1 | 	sub	objptr, ##42040
017bc     28 40 B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
017c0     1A FB 61 FC | 	wrlong	result1, local08
017c4     01 26 06 F1 | 	add	local01, #1
017c8                 | LR__0061
017c8     01 28 06 F1 | 	add	local02, #1
017cc     07 28 16 F2 | 	cmp	local02, #7 wc
017d0     78 FE 9F CD |  if_b	jmp	#LR__0060
017d4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
017d8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
017d8                 | LR__0062
017d8     07 26 16 F2 | 	cmp	local01, #7 wc
017dc     3C 00 90 3D |  if_ae	jmp	#LR__0064
017e0     13 35 02 F6 | 	mov	local08, local01
017e4     02 34 66 F0 | 	shl	local08, #2
017e8     52 00 00 FF 
017ec     1C E4 05 F1 | 	add	objptr, ##42012
017f0     F2 34 02 F1 | 	add	local08, objptr
017f4     1A 01 68 FC | 	wrlong	#0, local08
017f8     13 35 02 F6 | 	mov	local08, local01
017fc     02 34 66 F0 | 	shl	local08, #2
01800     1C E4 05 F1 | 	add	objptr, #28
01804     F2 34 02 F1 | 	add	local08, objptr
01808     1A 01 68 FC | 	wrlong	#0, local08
0180c     01 26 06 F1 | 	add	local01, #1
01810     52 00 00 FF 
01814     38 E4 85 F1 | 	sub	objptr, ##42040
01818     BC FF 9F FD | 	jmp	#LR__0062
0181c                 | LR__0063
0181c                 | LR__0064
0181c     A7 F0 03 F6 | 	mov	ptra, fp
01820     B2 00 A0 FD | 	call	#popregs_
01824                 | _gethdi_ret
01824     2D 00 64 FD | 	ret
01828                 | 
01828                 | ' 
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' 
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' '
01828                 | ' '                                     LINE INTERPRETER/TOKENIZER
01828                 | ' '
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' 
01828                 | ' 
01828                 | ' sub interpret
01828                 | _interpret
01828     31 4A 05 F6 | 	mov	COUNT_, #49
0182c     A8 00 A0 FD | 	call	#pushregs_
01830     01 00 00 FF 
01834     84 F0 07 F1 | 	add	ptra, ##644
01838     37 00 00 FF 
0183c     1C E4 05 F1 | 	add	objptr, ##28188
01840     F2 12 02 FB | 	rdlong	arg01, objptr
01844     37 00 00 FF 
01848     1C E4 85 F1 | 	sub	objptr, ##28188
0184c     D4 6B B2 FD | 	call	#__system__RTrim_S
01850     FD 12 02 F6 | 	mov	arg01, result1
01854     0C 6B B2 FD | 	call	#__system__LTrim_S
01858     37 00 00 FF 
0185c     20 E4 05 F1 | 	add	objptr, ##28192
01860     F2 FA 61 FC | 	wrlong	result1, objptr
01864     04 E4 05 F1 | 	add	objptr, #4
01868     FF FF FF FF 
0186c     F2 FE 6B FC | 	wrlong	##-1, objptr
01870     1B 00 00 FF 
01874     8C E4 05 F1 | 	add	objptr, ##13964
01878     F2 00 68 FC | 	wrlong	#0, objptr
0187c     08 00 00 FF 
01880     34 E4 85 F1 | 	sub	objptr, ##4148
01884     F2 00 68 FC | 	wrlong	#0, objptr
01888     4A 00 00 FF 
0188c     7C E4 85 F1 | 	sub	objptr, ##38012
01890     00 26 06 F6 | 	mov	local01, #0
01894                 | LR__0070
01894                 | ' 
01894                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
01894                 | ' 
01894                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
01894                 | ' 
01894                 | ' 108 
01894                 | ' for i=0 to 125: separators(i)=0 :next i
01894     00 28 06 F6 | 	mov	local02, #0
01898     38 4E 05 F1 | 	add	fp, #56
0189c     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
018a0                 | LR__0071
018a0     14 2B 02 F6 | 	mov	local03, local02
018a4     02 2A 66 F0 | 	shl	local03, #2
018a8     A7 2A 02 F1 | 	add	local03, fp
018ac     15 01 68 FC | 	wrlong	#0, local03
018b0     01 28 06 F1 | 	add	local02, #1
018b4     7E 28 56 F2 | 	cmps	local02, #126 wc
018b8     E4 FF 9F CD |  if_b	jmp	#LR__0071
018bc                 | LR__0072
018bc     38 4E 85 F1 | 	sub	fp, #56
018c0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
018c0     00 28 06 F6 | 	mov	local02, #0
018c4     35 00 00 FF 
018c8     0C E4 05 F1 | 	add	objptr, ##27148
018cc     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
018d0                 | LR__0073
018d0     14 2D 02 F6 | 	mov	local04, local02
018d4     03 2C 66 F0 | 	shl	local04, #3
018d8     F2 2C 02 F1 | 	add	local04, objptr
018dc     AD 01 00 FF 
018e0     B8 16 06 F6 | 	mov	arg03, ##@LR__5379
018e4     16 17 62 FC | 	wrlong	arg03, local04
018e8     14 2D 02 F6 | 	mov	local04, local02
018ec     03 2C 66 F0 | 	shl	local04, #3
018f0     F2 2E 02 F6 | 	mov	local05, objptr
018f4     F2 2C 02 F1 | 	add	local04, objptr
018f8     00 30 06 F6 | 	mov	local06, #0
018fc     04 2C 06 F1 | 	add	local04, #4
01900     16 01 68 FC | 	wrlong	#0, local04
01904     01 28 06 F1 | 	add	local02, #1
01908     7E 28 56 F2 | 	cmps	local02, #126 wc
0190c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01910                 | LR__0074
01910     02 00 00 FF 
01914     10 E4 05 F1 | 	add	objptr, ##1040
01918     F2 12 02 FB | 	rdlong	arg01, objptr
0191c     37 00 00 FF 
01920     1C E4 85 F1 | 	sub	objptr, ##28188
01924     FC 6A B2 FD | 	call	#__system__RTrim_S
01928     FD 12 02 F6 | 	mov	arg01, result1
0192c     34 6A B2 FD | 	call	#__system__LTrim_S
01930     37 00 00 FF 
01934     1C E4 05 F1 | 	add	objptr, ##28188
01938     F2 FA 61 FC | 	wrlong	result1, objptr
0193c     AD 01 00 FF 
01940     B9 2C 06 F6 | 	mov	local04, ##@LR__5380
01944     1B 00 00 FF 
01948     D0 E4 05 F1 | 	add	objptr, ##14032
0194c     F2 2C 62 FC | 	wrlong	local04, objptr
01950     1B 00 00 FF 
01954     D0 E4 85 F1 | 	sub	objptr, ##14032
01958     F2 12 02 FB | 	rdlong	arg01, objptr
0195c     37 00 00 FF 
01960     1C E4 85 F1 | 	sub	objptr, ##28188
01964     09 33 02 F6 | 	mov	local07, arg01
01968     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0196c                 | LR__0075
0196c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01970     01 32 06 51 |  if_ne	add	local07, #1
01974     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01978                 | LR__0076
01978     09 33 8A F1 | 	sub	local07, arg01 wz
0197c     52 00 00 FF 
01980     F0 E4 05 F1 | 	add	objptr, ##42224
01984     F2 32 62 FC | 	wrlong	local07, objptr
01988                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
01988     52 00 00 FF 
0198c     F0 E4 85 F1 | 	sub	objptr, ##42224
01990     7C 27 90 AD |  if_e	jmp	#LR__0207
01994     00 34 06 F6 | 	mov	local08, #0
01998                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
01998                 | ' for i=1 to len(line$)
01998     01 28 06 F6 | 	mov	local02, #1
0199c     37 00 00 FF 
019a0     1C E4 05 F1 | 	add	objptr, ##28188
019a4     F2 12 02 FB | 	rdlong	arg01, objptr
019a8     37 00 00 FF 
019ac     1C E4 85 F1 | 	sub	objptr, ##28188
019b0     09 33 02 F6 | 	mov	local07, arg01
019b4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
019b8                 | LR__0077
019b8     19 FB C9 FA | 	rdbyte	result1, local07 wz
019bc     01 32 06 51 |  if_ne	add	local07, #1
019c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
019c4                 | LR__0078
019c4     09 33 82 F1 | 	sub	local07, arg01
019c8     19 37 02 F6 | 	mov	local09, local07
019cc     01 36 06 F1 | 	add	local09, #1
019d0                 | LR__0079
019d0     1B 29 52 F2 | 	cmps	local02, local09 wc
019d4     AC 00 90 3D |  if_ae	jmp	#LR__0081
019d8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
019d8     37 00 00 FF 
019dc     1C E4 05 F1 | 	add	objptr, ##28188
019e0     F2 12 02 FB | 	rdlong	arg01, objptr
019e4     37 00 00 FF 
019e8     1C E4 85 F1 | 	sub	objptr, ##28188
019ec     14 15 02 F6 | 	mov	arg02, local02
019f0     01 16 06 F6 | 	mov	arg03, #1
019f4     B4 66 B2 FD | 	call	#__system__Mid_S
019f8     FD 12 02 F6 | 	mov	arg01, result1
019fc     AD 01 00 FF 
01a00     BA 14 06 F6 | 	mov	arg02, ##@LR__5381
01a04     38 45 B2 FD | 	call	#__system___string_cmp
01a08     00 FA 0D F2 | 	cmp	result1, #0 wz
01a0c     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01a10     01 34 06 A6 |  if_e	mov	local08, #1
01a14     3C 00 90 AD |  if_e	jmp	#LR__0080
01a18     37 00 00 FF 
01a1c     1C E4 05 F1 | 	add	objptr, ##28188
01a20     F2 12 02 FB | 	rdlong	arg01, objptr
01a24     37 00 00 FF 
01a28     1C E4 85 F1 | 	sub	objptr, ##28188
01a2c     14 15 02 F6 | 	mov	arg02, local02
01a30     01 16 06 F6 | 	mov	arg03, #1
01a34     74 66 B2 FD | 	call	#__system__Mid_S
01a38     FD 12 02 F6 | 	mov	arg01, result1
01a3c     AD 01 00 FF 
01a40     BC 14 06 F6 | 	mov	arg02, ##@LR__5382
01a44     F8 44 B2 FD | 	call	#__system___string_cmp
01a48     00 FA 0D F2 | 	cmp	result1, #0 wz
01a4c     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01a50     00 34 06 A6 |  if_e	mov	local08, #0
01a54                 | LR__0080
01a54     14 2D 02 F6 | 	mov	local04, local02
01a58     03 2C 66 F0 | 	shl	local04, #3
01a5c     35 00 00 FF 
01a60     0C E4 05 F1 | 	add	objptr, ##27148
01a64     F2 2E 02 F6 | 	mov	local05, objptr
01a68     F2 2C 02 F1 | 	add	local04, objptr
01a6c     04 2C 06 F1 | 	add	local04, #4
01a70     16 35 62 FC | 	wrlong	local08, local04
01a74     01 28 06 F1 | 	add	local02, #1
01a78     35 00 00 FF 
01a7c     0C E4 85 F1 | 	sub	objptr, ##27148
01a80     4C FF 9F FD | 	jmp	#LR__0079
01a84                 | LR__0081
01a84     01 28 06 F6 | 	mov	local02, #1
01a88                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01a88                 | LR__0082
01a88     37 00 00 FF 
01a8c     1C E4 05 F1 | 	add	objptr, ##28188
01a90     F2 12 02 FB | 	rdlong	arg01, objptr
01a94     37 00 00 FF 
01a98     1C E4 85 F1 | 	sub	objptr, ##28188
01a9c     14 15 02 F6 | 	mov	arg02, local02
01aa0     01 16 06 F6 | 	mov	arg03, #1
01aa4     04 66 B2 FD | 	call	#__system__Mid_S
01aa8     FD 12 02 F6 | 	mov	arg01, result1
01aac     AD 01 00 FF 
01ab0     BE 38 06 F6 | 	mov	local10, ##@LR__5383
01ab4     1C 15 02 F6 | 	mov	arg02, local10
01ab8     84 44 B2 FD | 	call	#__system___string_cmp
01abc     00 FA 0D F2 | 	cmp	result1, #0 wz
01ac0     34 00 90 5D |  if_ne	jmp	#LR__0083
01ac4     14 2F 02 F6 | 	mov	local05, local02
01ac8     03 2E 66 F0 | 	shl	local05, #3
01acc     35 00 00 FF 
01ad0     0C E4 05 F1 | 	add	objptr, ##27148
01ad4     F2 30 02 F6 | 	mov	local06, objptr
01ad8     F2 2E 02 F1 | 	add	local05, objptr
01adc     04 2E 06 F1 | 	add	local05, #4
01ae0     17 3B 02 FB | 	rdlong	local11, local05
01ae4     04 2E 86 F1 | 	sub	local05, #4
01ae8     1D 3D 0A F6 | 	mov	local12, local11 wz
01aec     35 00 00 FF 
01af0     0C E4 85 F1 | 	sub	objptr, ##27148
01af4     24 00 90 AD |  if_e	jmp	#LR__0084
01af8                 | LR__0083
01af8     52 00 00 FF 
01afc     F0 E4 05 F1 | 	add	objptr, ##42224
01b00     F2 3E 02 FB | 	rdlong	local13, objptr
01b04     52 00 00 FF 
01b08     F0 E4 85 F1 | 	sub	objptr, ##42224
01b0c     1F 41 02 F6 | 	mov	local14, local13
01b10     20 29 52 F2 | 	cmps	local02, local14 wc
01b14     01 28 06 C1 |  if_b	add	local02, #1
01b18     6C FF 9F CD |  if_b	jmp	#LR__0082
01b1c                 | LR__0084
01b1c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01b1c     52 00 00 FF 
01b20     F0 E4 05 F1 | 	add	objptr, ##42224
01b24     F2 2C 02 FB | 	rdlong	local04, objptr
01b28     52 00 00 FF 
01b2c     F0 E4 85 F1 | 	sub	objptr, ##42224
01b30     16 29 52 F2 | 	cmps	local02, local04 wc
01b34     A8 00 90 3D |  if_ae	jmp	#LR__0087
01b38     37 00 00 FF 
01b3c     1C E4 05 F1 | 	add	objptr, ##28188
01b40     F2 30 02 FB | 	rdlong	local06, objptr
01b44     37 00 00 FF 
01b48     1C E4 85 F1 | 	sub	objptr, ##28188
01b4c     18 13 02 F6 | 	mov	arg01, local06
01b50     09 33 02 F6 | 	mov	local07, arg01
01b54     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01b58                 | LR__0085
01b58     19 FB C9 FA | 	rdbyte	result1, local07 wz
01b5c     01 32 06 51 |  if_ne	add	local07, #1
01b60     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01b64                 | LR__0086
01b64     09 33 82 F1 | 	sub	local07, arg01
01b68     19 2F 02 F6 | 	mov	local05, local07
01b6c     17 15 02 F6 | 	mov	arg02, local05
01b70     14 15 82 F1 | 	sub	arg02, local02
01b74     18 13 02 F6 | 	mov	arg01, local06
01b78     A0 64 B2 FD | 	call	#__system__Right_S
01b7c     FD 12 02 F6 | 	mov	arg01, result1
01b80     A0 68 B2 FD | 	call	#__system__RTrim_S
01b84     FD 12 02 F6 | 	mov	arg01, result1
01b88     D8 67 B2 FD | 	call	#__system__LTrim_S
01b8c     52 00 00 FF 
01b90     F4 E4 05 F1 | 	add	objptr, ##42228
01b94     F2 FA 61 FC | 	wrlong	result1, objptr
01b98     1B 00 00 FF 
01b9c     D8 E4 85 F1 | 	sub	objptr, ##14040
01ba0     F2 12 02 FB | 	rdlong	arg01, objptr
01ba4     37 00 00 FF 
01ba8     1C E4 85 F1 | 	sub	objptr, ##28188
01bac     01 28 86 F1 | 	sub	local02, #1
01bb0     14 15 02 F6 | 	mov	arg02, local02
01bb4     DC 63 B2 FD | 	call	#__system__Left_S
01bb8     FD 12 02 F6 | 	mov	arg01, result1
01bbc     64 68 B2 FD | 	call	#__system__RTrim_S
01bc0     FD 12 02 F6 | 	mov	arg01, result1
01bc4     9C 67 B2 FD | 	call	#__system__LTrim_S
01bc8     37 00 00 FF 
01bcc     1C E4 05 F1 | 	add	objptr, ##28188
01bd0     F2 FA 61 FC | 	wrlong	result1, objptr
01bd4     37 00 00 FF 
01bd8     1C E4 85 F1 | 	sub	objptr, ##28188
01bdc     1C 00 90 FD | 	jmp	#LR__0088
01be0                 | LR__0087
01be0     AD 01 00 FF 
01be4     C0 2C 06 F6 | 	mov	local04, ##@LR__5384
01be8     52 00 00 FF 
01bec     F4 E4 05 F1 | 	add	objptr, ##42228
01bf0     F2 2C 62 FC | 	wrlong	local04, objptr
01bf4     52 00 00 FF 
01bf8     F4 E4 85 F1 | 	sub	objptr, ##42228
01bfc                 | LR__0088
01bfc                 | ' 
01bfc                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01bfc     37 00 00 FF 
01c00     24 E4 05 F1 | 	add	objptr, ##28196
01c04     F2 2C 02 FB | 	rdlong	local04, objptr
01c08     37 00 00 FF 
01c0c     24 E4 85 F1 | 	sub	objptr, ##28196
01c10     FF FF 7F FF 
01c14     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c18     40 00 90 5D |  if_ne	jmp	#LR__0089
01c1c     52 00 00 FF 
01c20     F4 E4 05 F1 | 	add	objptr, ##42228
01c24     F2 12 02 FB | 	rdlong	arg01, objptr
01c28     52 00 00 FF 
01c2c     F4 E4 85 F1 | 	sub	objptr, ##42228
01c30     AD 01 00 FF 
01c34     C1 30 06 F6 | 	mov	local06, ##@LR__5385
01c38     18 15 02 F6 | 	mov	arg02, local06
01c3c     00 43 B2 FD | 	call	#__system___string_cmp
01c40     00 FA 0D F2 | 	cmp	result1, #0 wz
01c44     37 00 00 5F 
01c48     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c4c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01c50     37 00 00 5F 
01c54     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c58     08 01 90 5D |  if_ne	jmp	#LR__0093
01c5c                 | LR__0089
01c5c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01c5c     37 00 00 FF 
01c60     24 E4 05 F1 | 	add	objptr, ##28196
01c64     F2 2C 02 FB | 	rdlong	local04, objptr
01c68     37 00 00 FF 
01c6c     24 E4 85 F1 | 	sub	objptr, ##28196
01c70     FF FF 7F FF 
01c74     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c78     3C 00 90 5D |  if_ne	jmp	#LR__0090
01c7c     52 00 00 FF 
01c80     F4 E4 05 F1 | 	add	objptr, ##42228
01c84     F2 12 02 FB | 	rdlong	arg01, objptr
01c88     52 00 00 FF 
01c8c     F4 E4 85 F1 | 	sub	objptr, ##42228
01c90     AD 01 00 FF 
01c94     C2 14 06 F6 | 	mov	arg02, ##@LR__5386
01c98     A4 42 B2 FD | 	call	#__system___string_cmp
01c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
01ca0     37 00 00 AF 
01ca4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01ca8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01cac     37 00 00 AF 
01cb0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01cb4     AC 00 90 AD |  if_e	jmp	#LR__0093
01cb8                 | LR__0090
01cb8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01cb8     37 00 00 FF 
01cbc     24 E4 05 F1 | 	add	objptr, ##28196
01cc0     F2 2C 02 FB | 	rdlong	local04, objptr
01cc4     37 00 00 FF 
01cc8     24 E4 85 F1 | 	sub	objptr, ##28196
01ccc     04 2C 0E F2 | 	cmp	local04, #4 wz
01cd0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01cd4     52 00 00 FF 
01cd8     F4 E4 05 F1 | 	add	objptr, ##42228
01cdc     F2 12 02 FB | 	rdlong	arg01, objptr
01ce0     52 00 00 FF 
01ce4     F4 E4 85 F1 | 	sub	objptr, ##42228
01ce8     AD 01 00 FF 
01cec     C3 14 06 F6 | 	mov	arg02, ##@LR__5387
01cf0     4C 42 B2 FD | 	call	#__system___string_cmp
01cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
01cf8     37 00 00 5F 
01cfc     24 E4 05 51 |  if_ne	add	objptr, ##28196
01d00     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01d04     37 00 00 5F 
01d08     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01d0c     54 00 90 5D |  if_ne	jmp	#LR__0093
01d10                 | LR__0091
01d10                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01d10     37 00 00 FF 
01d14     24 E4 05 F1 | 	add	objptr, ##28196
01d18     F2 2C 02 FB | 	rdlong	local04, objptr
01d1c     37 00 00 FF 
01d20     24 E4 85 F1 | 	sub	objptr, ##28196
01d24     04 2C 0E F2 | 	cmp	local04, #4 wz
01d28     38 00 90 5D |  if_ne	jmp	#LR__0092
01d2c     52 00 00 FF 
01d30     F4 E4 05 F1 | 	add	objptr, ##42228
01d34     F2 12 02 FB | 	rdlong	arg01, objptr
01d38     52 00 00 FF 
01d3c     F4 E4 85 F1 | 	sub	objptr, ##42228
01d40     AD 01 00 FF 
01d44     C4 14 06 F6 | 	mov	arg02, ##@LR__5388
01d48     F4 41 B2 FD | 	call	#__system___string_cmp
01d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
01d50     37 00 00 AF 
01d54     24 E4 05 A1 |  if_e	add	objptr, ##28196
01d58     F2 04 68 AC |  if_e	wrlong	#2, objptr
01d5c     37 00 00 AF 
01d60     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01d64                 | LR__0092
01d64                 | LR__0093
01d64     38 4E 05 F1 | 	add	fp, #56
01d68     A7 00 68 FC | 	wrlong	#0, fp
01d6c     38 4E 85 F1 | 	sub	fp, #56
01d70     00 28 06 F6 | 	mov	local02, #0
01d74     01 42 06 F6 | 	mov	local15, #1
01d78                 | ' 
01d78                 | ' ' 1b: find separators
01d78                 | ' 
01d78                 | ' 107
01d78                 | ' separators(0)=0
01d78                 | ' i=0: j=1
01d78                 | ' do: 
01d78                 | LR__0094
01d78     01 28 06 F1 | 	add	local02, #1
01d7c     37 00 00 FF 
01d80     1C E4 05 F1 | 	add	objptr, ##28188
01d84     F2 12 02 FB | 	rdlong	arg01, objptr
01d88     37 00 00 FF 
01d8c     1C E4 85 F1 | 	sub	objptr, ##28188
01d90     14 15 02 F6 | 	mov	arg02, local02
01d94     01 16 06 F6 | 	mov	arg03, #1
01d98     10 63 B2 FD | 	call	#__system__Mid_S
01d9c     FD 44 02 F6 | 	mov	local16, result1
01da0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01da0     22 13 02 F6 | 	mov	arg01, local16
01da4     D0 2B B0 FD | 	call	#_isseparator
01da8     00 FA 0D F2 | 	cmp	result1, #0 wz
01dac     1C 00 90 AD |  if_e	jmp	#LR__0095
01db0     21 2B 02 F6 | 	mov	local03, local15
01db4     02 2A 66 F0 | 	shl	local03, #2
01db8     38 4E 05 F1 | 	add	fp, #56
01dbc     A7 2A 02 F1 | 	add	local03, fp
01dc0     15 29 62 FC | 	wrlong	local02, local03
01dc4     01 42 06 F1 | 	add	local15, #1
01dc8     38 4E 85 F1 | 	sub	fp, #56
01dcc                 | LR__0095
01dcc     52 00 00 FF 
01dd0     F0 E4 05 F1 | 	add	objptr, ##42224
01dd4     F2 2C 02 FB | 	rdlong	local04, objptr
01dd8     52 00 00 FF 
01ddc     F0 E4 85 F1 | 	sub	objptr, ##42224
01de0     16 29 5A F2 | 	cmps	local02, local04 wcz
01de4     90 FF 9F ED |  if_be	jmp	#LR__0094
01de8     21 2B 02 F6 | 	mov	local03, local15
01dec     02 2A 66 F0 | 	shl	local03, #2
01df0     38 4E 05 F1 | 	add	fp, #56
01df4     A7 38 02 F6 | 	mov	local10, fp
01df8     A7 2A 02 F1 | 	add	local03, fp
01dfc     15 29 62 FC | 	wrlong	local02, local03
01e00     00 46 06 F6 | 	mov	local17, #0
01e04                 | ' for i=0 to j-1 
01e04     00 28 06 F6 | 	mov	local02, #0
01e08     21 49 02 F6 | 	mov	local18, local15
01e0c     38 4E 85 F1 | 	sub	fp, #56
01e10                 | LR__0096
01e10     24 29 52 F2 | 	cmps	local02, local18 wc
01e14     50 01 90 3D |  if_ae	jmp	#LR__0100
01e18     14 2B 02 F6 | 	mov	local03, local02
01e1c     02 2A 66 F0 | 	shl	local03, #2
01e20     38 4E 05 F1 | 	add	fp, #56
01e24     A7 2A 02 F1 | 	add	local03, fp
01e28     15 2F 02 FB | 	rdlong	local05, local03
01e2c     52 00 00 FF 
01e30     FC E4 05 F1 | 	add	objptr, ##42236
01e34     F2 2E 62 FC | 	wrlong	local05, objptr
01e38     14 2B 02 F6 | 	mov	local03, local02
01e3c     01 2A 06 F1 | 	add	local03, #1
01e40     02 2A 66 F0 | 	shl	local03, #2
01e44     A7 38 02 F6 | 	mov	local10, fp
01e48     A7 2A 02 F1 | 	add	local03, fp
01e4c     15 2F 02 FB | 	rdlong	local05, local03
01e50     04 E4 05 F1 | 	add	objptr, #4
01e54     F2 2E 62 FC | 	wrlong	local05, objptr
01e58                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e58     04 E4 85 F1 | 	sub	objptr, #4
01e5c     F2 2C 02 FB | 	rdlong	local04, objptr
01e60     52 00 00 FF 
01e64     FC E4 85 F1 | 	sub	objptr, ##42236
01e68     01 2C 56 F2 | 	cmps	local04, #1 wc
01e6c     38 4E 85 F1 | 	sub	fp, #56
01e70     68 00 90 CD |  if_b	jmp	#LR__0098
01e74     37 00 00 FF 
01e78     1C E4 05 F1 | 	add	objptr, ##28188
01e7c     F2 12 02 FB | 	rdlong	arg01, objptr
01e80     1B 00 00 FF 
01e84     E0 E4 05 F1 | 	add	objptr, ##14048
01e88     F2 14 02 FB | 	rdlong	arg02, objptr
01e8c     52 00 00 FF 
01e90     FC E4 85 F1 | 	sub	objptr, ##42236
01e94     01 16 06 F6 | 	mov	arg03, #1
01e98     10 62 B2 FD | 	call	#__system__Mid_S
01e9c     FD 4A 02 F6 | 	mov	local19, result1
01ea0     AD 01 00 FF 
01ea4     C5 14 06 F6 | 	mov	arg02, ##@LR__5389
01ea8     25 13 02 F6 | 	mov	arg01, local19
01eac     90 40 B2 FD | 	call	#__system___string_cmp
01eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
01eb4     24 00 90 AD |  if_e	jmp	#LR__0097
01eb8     23 39 02 F6 | 	mov	local10, local17
01ebc     03 38 66 F0 | 	shl	local10, #3
01ec0     35 00 00 FF 
01ec4     0C E4 05 F1 | 	add	objptr, ##27148
01ec8     F2 38 02 F1 | 	add	local10, objptr
01ecc     1C 4B 62 FC | 	wrlong	local19, local10
01ed0     01 46 06 F1 | 	add	local17, #1
01ed4     35 00 00 FF 
01ed8     0C E4 85 F1 | 	sub	objptr, ##27148
01edc                 | LR__0097
01edc                 | LR__0098
01edc     37 00 00 FF 
01ee0     1C E4 05 F1 | 	add	objptr, ##28188
01ee4     F2 12 02 FB | 	rdlong	arg01, objptr
01ee8     1B 00 00 FF 
01eec     E0 E4 05 F1 | 	add	objptr, ##14048
01ef0     F2 14 02 FB | 	rdlong	arg02, objptr
01ef4     01 14 06 F1 | 	add	arg02, #1
01ef8     04 E4 05 F1 | 	add	objptr, #4
01efc     F2 16 02 FB | 	rdlong	arg03, objptr
01f00     04 E4 85 F1 | 	sub	objptr, #4
01f04     F2 3A 02 FB | 	rdlong	local11, objptr
01f08     52 00 00 FF 
01f0c     FC E4 85 F1 | 	sub	objptr, ##42236
01f10     1D 3D 02 F6 | 	mov	local12, local11
01f14     1E 17 82 F1 | 	sub	arg03, local12
01f18     01 16 86 F1 | 	sub	arg03, #1
01f1c     8C 61 B2 FD | 	call	#__system__Mid_S
01f20     FD 4A 02 F6 | 	mov	local19, result1
01f24                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f24     AD 01 00 FF 
01f28     C6 14 06 F6 | 	mov	arg02, ##@LR__5390
01f2c     25 13 02 F6 | 	mov	arg01, local19
01f30     0C 40 B2 FD | 	call	#__system___string_cmp
01f34     00 FA 0D F2 | 	cmp	result1, #0 wz
01f38     24 00 90 AD |  if_e	jmp	#LR__0099
01f3c     23 39 02 F6 | 	mov	local10, local17
01f40     03 38 66 F0 | 	shl	local10, #3
01f44     35 00 00 FF 
01f48     0C E4 05 F1 | 	add	objptr, ##27148
01f4c     F2 38 02 F1 | 	add	local10, objptr
01f50     1C 4B 62 FC | 	wrlong	local19, local10
01f54     01 46 06 F1 | 	add	local17, #1
01f58     35 00 00 FF 
01f5c     0C E4 85 F1 | 	sub	objptr, ##27148
01f60                 | LR__0099
01f60     01 28 06 F1 | 	add	local02, #1
01f64     A8 FE 9F FD | 	jmp	#LR__0096
01f68                 | LR__0100
01f68                 | ' 
01f68                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01f68                 | ' 
01f68                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01f68     37 00 00 FF 
01f6c     24 E4 05 F1 | 	add	objptr, ##28196
01f70     F2 2C 0A FB | 	rdlong	local04, objptr wz
01f74     37 00 00 FF 
01f78     24 E4 85 F1 | 	sub	objptr, ##28196
01f7c     37 00 00 5F 
01f80     24 E4 05 51 |  if_ne	add	objptr, ##28196
01f84     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01f88     37 00 00 5F 
01f8c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01f90     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01f94     B8 00 90 5D |  if_ne	jmp	#LR__0103
01f98     35 00 00 FF 
01f9c     0C E4 05 F1 | 	add	objptr, ##27148
01fa0     F2 3A 02 FB | 	rdlong	local11, objptr
01fa4     35 00 00 FF 
01fa8     0C E4 85 F1 | 	sub	objptr, ##27148
01fac     1D 13 02 F6 | 	mov	arg01, local11
01fb0     68 4C B0 FD | 	call	#_isdec
01fb4     FD 3C 02 F6 | 	mov	local12, result1
01fb8     1E 31 22 F6 | 	not	local06, local12
01fbc     00 30 0E F2 | 	cmp	local06, #0 wz
01fc0     8C 00 90 AD |  if_e	jmp	#LR__0103
01fc4     23 29 02 F6 | 	mov	local02, local17
01fc8     35 00 00 FF 
01fcc     0C E4 05 F1 | 	add	objptr, ##27148
01fd0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01fd4                 | LR__0101
01fd4     14 2F 02 F6 | 	mov	local05, local02
01fd8     01 2E 86 F1 | 	sub	local05, #1
01fdc     03 2E 66 F0 | 	shl	local05, #3
01fe0     F2 2E 02 F1 | 	add	local05, objptr
01fe4     17 2D 02 FB | 	rdlong	local04, local05
01fe8     14 31 02 F6 | 	mov	local06, local02
01fec     01 30 86 F1 | 	sub	local06, #1
01ff0     03 30 66 F0 | 	shl	local06, #3
01ff4     F2 30 02 F1 | 	add	local06, objptr
01ff8     04 30 06 F1 | 	add	local06, #4
01ffc     18 2B 02 FB | 	rdlong	local03, local06
02000     14 31 02 F6 | 	mov	local06, local02
02004     03 30 66 F0 | 	shl	local06, #3
02008     F2 3C 02 F6 | 	mov	local12, objptr
0200c     F2 30 02 F1 | 	add	local06, objptr
02010     18 2D 62 FC | 	wrlong	local04, local06
02014     14 3B 02 F6 | 	mov	local11, local02
02018     1D 3F 02 F6 | 	mov	local13, local11
0201c     03 3E 66 F0 | 	shl	local13, #3
02020     F2 3E 02 F1 | 	add	local13, objptr
02024     04 3E 06 F1 | 	add	local13, #4
02028     1F 2B 62 FC | 	wrlong	local03, local13
0202c     01 28 86 F1 | 	sub	local02, #1
02030     01 28 56 F2 | 	cmps	local02, #1 wc
02034     9C FF 9F 3D |  if_ae	jmp	#LR__0101
02038                 | LR__0102
02038     AD 01 00 FF 
0203c     C7 2C 06 F6 | 	mov	local04, ##@LR__5391
02040     F2 2C 62 FC | 	wrlong	local04, objptr
02044     35 00 00 FF 
02048     0C E4 85 F1 | 	sub	objptr, ##27148
0204c     01 46 06 F1 | 	add	local17, #1
02050                 | LR__0103
02050     00 28 06 F6 | 	mov	local02, #0
02054                 | ' 
02054                 | ' ' 1e : find strings
02054                 | ' 
02054                 | ' i=0
02054                 | ' do
02054                 | LR__0104
02054                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
02054     14 2F 02 F6 | 	mov	local05, local02
02058     03 2E 66 F0 | 	shl	local05, #3
0205c     35 00 00 FF 
02060     0C E4 05 F1 | 	add	objptr, ##27148
02064     F2 2E 02 F1 | 	add	local05, objptr
02068     17 13 02 FB | 	rdlong	arg01, local05
0206c     AD 01 00 FF 
02070     C9 14 06 F6 | 	mov	arg02, ##@LR__5392
02074     35 00 00 FF 
02078     0C E4 85 F1 | 	sub	objptr, ##27148
0207c     C0 3E B2 FD | 	call	#__system___string_cmp
02080     00 FA 0D F2 | 	cmp	result1, #0 wz
02084     01 28 06 51 |  if_ne	add	local02, #1
02088     20 01 90 5D |  if_ne	jmp	#LR__0109
0208c     14 4D 02 F6 | 	mov	local20, local02
02090                 | LR__0105
02090     14 39 02 F6 | 	mov	local10, local02
02094     01 38 06 F1 | 	add	local10, #1
02098     03 38 66 F0 | 	shl	local10, #3
0209c     35 00 00 FF 
020a0     0C E4 05 F1 | 	add	objptr, ##27148
020a4     F2 38 02 F1 | 	add	local10, objptr
020a8     1C 4B 02 FB | 	rdlong	local19, local10
020ac     26 39 02 F6 | 	mov	local10, local20
020b0     03 38 66 F0 | 	shl	local10, #3
020b4     F2 38 02 F1 | 	add	local10, objptr
020b8     26 3B 02 F6 | 	mov	local11, local20
020bc     1D 41 02 F6 | 	mov	local14, local11
020c0     03 40 66 F0 | 	shl	local14, #3
020c4     F2 40 02 F1 | 	add	local14, objptr
020c8     20 13 02 FB | 	rdlong	arg01, local14
020cc     25 3D 02 F6 | 	mov	local12, local19
020d0     1E 15 02 F6 | 	mov	arg02, local12
020d4     35 00 00 FF 
020d8     0C E4 85 F1 | 	sub	objptr, ##27148
020dc     94 3E B2 FD | 	call	#__system___string_concat
020e0     1C FB 61 FC | 	wrlong	result1, local10
020e4     14 43 02 F6 | 	mov	local15, local02
020e8     01 42 06 F1 | 	add	local15, #1
020ec     23 4F 02 F6 | 	mov	local21, local17
020f0     01 4E 06 F1 | 	add	local21, #1
020f4     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
020f8                 | LR__0106
020f8     27 43 52 F2 | 	cmps	local15, local21 wc
020fc     70 00 90 3D |  if_ae	jmp	#LR__0108
02100     21 2F 02 F6 | 	mov	local05, local15
02104     01 2E 06 F1 | 	add	local05, #1
02108     03 2E 66 F0 | 	shl	local05, #3
0210c     35 00 00 FF 
02110     0C E4 05 F1 | 	add	objptr, ##27148
02114     F2 2E 02 F1 | 	add	local05, objptr
02118     17 2D 02 FB | 	rdlong	local04, local05
0211c     21 31 02 F6 | 	mov	local06, local15
02120     01 30 06 F1 | 	add	local06, #1
02124     03 30 66 F0 | 	shl	local06, #3
02128     F2 30 02 F1 | 	add	local06, objptr
0212c     04 30 06 F1 | 	add	local06, #4
02130     18 2B 02 FB | 	rdlong	local03, local06
02134     21 31 02 F6 | 	mov	local06, local15
02138     03 30 66 F0 | 	shl	local06, #3
0213c     F2 3C 02 F6 | 	mov	local12, objptr
02140     F2 30 02 F1 | 	add	local06, objptr
02144     18 2D 62 FC | 	wrlong	local04, local06
02148     21 3B 02 F6 | 	mov	local11, local15
0214c     1D 3F 02 F6 | 	mov	local13, local11
02150     03 3E 66 F0 | 	shl	local13, #3
02154     F2 3E 02 F1 | 	add	local13, objptr
02158     04 3E 06 F1 | 	add	local13, #4
0215c     1F 2B 62 FC | 	wrlong	local03, local13
02160     01 42 06 F1 | 	add	local15, #1
02164     35 00 00 FF 
02168     0C E4 85 F1 | 	sub	objptr, ##27148
0216c     88 FF 9F FD | 	jmp	#LR__0106
02170                 | LR__0107
02170                 | LR__0108
02170     01 46 86 F1 | 	sub	local17, #1
02174     AD 01 00 FF 
02178     CB 14 06 F6 | 	mov	arg02, ##@LR__5393
0217c     25 13 02 F6 | 	mov	arg01, local19
02180     BC 3D B2 FD | 	call	#__system___string_cmp
02184     00 FA 0D F2 | 	cmp	result1, #0 wz
02188     23 29 52 52 |  if_ne	cmps	local02, local17 wc
0218c     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
02190                 | '   if p$<>"""" then k+=1:i+=1
02190     AD 01 00 FF 
02194     CD 14 06 F6 | 	mov	arg02, ##@LR__5394
02198     25 13 02 F6 | 	mov	arg01, local19
0219c     A0 3D B2 FD | 	call	#__system___string_cmp
021a0     00 FA 0D F2 | 	cmp	result1, #0 wz
021a4     01 46 06 51 |  if_ne	add	local17, #1
021a8     01 28 06 51 |  if_ne	add	local02, #1
021ac                 | LR__0109
021ac     23 29 52 F2 | 	cmps	local02, local17 wc
021b0     A0 FE 9F CD |  if_b	jmp	#LR__0104
021b4     00 28 06 F6 | 	mov	local02, #0
021b8                 | ' 
021b8                 | ' ' 1f : concatenate strings if "" detected between
021b8                 | '  
021b8                 | ' i=0
021b8                 | ' do
021b8                 | LR__0110
021b8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
021b8     14 2F 02 F6 | 	mov	local05, local02
021bc     03 2E 66 F0 | 	shl	local05, #3
021c0     35 00 00 FF 
021c4     0C E4 05 F1 | 	add	objptr, ##27148
021c8     F2 30 02 F6 | 	mov	local06, objptr
021cc     F2 2E 02 F1 | 	add	local05, objptr
021d0     17 13 02 FB | 	rdlong	arg01, local05
021d4     01 14 06 F6 | 	mov	arg02, #1
021d8     35 00 00 FF 
021dc     0C E4 85 F1 | 	sub	objptr, ##27148
021e0     38 5E B2 FD | 	call	#__system__Right_S
021e4     FD 12 02 F6 | 	mov	arg01, result1
021e8     AD 01 00 FF 
021ec     CF 14 06 F6 | 	mov	arg02, ##@LR__5395
021f0     4C 3D B2 FD | 	call	#__system___string_cmp
021f4     00 FA 0D F2 | 	cmp	result1, #0 wz
021f8     7C 01 90 5D |  if_ne	jmp	#LR__0116
021fc     14 31 02 F6 | 	mov	local06, local02
02200     01 30 06 F1 | 	add	local06, #1
02204     03 30 66 F0 | 	shl	local06, #3
02208     35 00 00 FF 
0220c     0C E4 05 F1 | 	add	objptr, ##27148
02210     F2 3C 02 F6 | 	mov	local12, objptr
02214     F2 30 02 F1 | 	add	local06, objptr
02218     18 13 02 FB | 	rdlong	arg01, local06
0221c     01 14 06 F6 | 	mov	arg02, #1
02220     35 00 00 FF 
02224     0C E4 85 F1 | 	sub	objptr, ##27148
02228     68 5D B2 FD | 	call	#__system__Left_S
0222c     FD 12 02 F6 | 	mov	arg01, result1
02230     AD 01 00 FF 
02234     D1 14 06 F6 | 	mov	arg02, ##@LR__5396
02238     04 3D B2 FD | 	call	#__system___string_cmp
0223c     00 FA 0D F2 | 	cmp	result1, #0 wz
02240     34 01 90 5D |  if_ne	jmp	#LR__0116
02244     14 39 02 F6 | 	mov	local10, local02
02248     03 38 66 F0 | 	shl	local10, #3
0224c     35 00 00 FF 
02250     0C E4 05 F1 | 	add	objptr, ##27148
02254     F2 38 02 F1 | 	add	local10, objptr
02258     14 41 02 F6 | 	mov	local14, local02
0225c     03 40 66 F0 | 	shl	local14, #3
02260     F2 40 02 F1 | 	add	local14, objptr
02264     20 31 02 FB | 	rdlong	local06, local14
02268     14 3F 02 F6 | 	mov	local13, local02
0226c     01 3E 06 F1 | 	add	local13, #1
02270     03 3E 66 F0 | 	shl	local13, #3
02274     F2 3E 02 F1 | 	add	local13, objptr
02278     1F 3D 02 FB | 	rdlong	local12, local13
0227c     14 51 02 F6 | 	mov	local22, local02
02280     01 50 06 F1 | 	add	local22, #1
02284     28 53 02 F6 | 	mov	local23, local22
02288     03 52 66 F0 | 	shl	local23, #3
0228c     F2 54 02 F6 | 	mov	local24, objptr
02290     F2 52 02 F1 | 	add	local23, objptr
02294     29 13 02 FB | 	rdlong	arg01, local23
02298     35 00 00 FF 
0229c     0C E4 85 F1 | 	sub	objptr, ##27148
022a0     09 33 02 F6 | 	mov	local07, arg01
022a4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
022a8                 | LR__0111
022a8     19 FB C9 FA | 	rdbyte	result1, local07 wz
022ac     01 32 06 51 |  if_ne	add	local07, #1
022b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
022b4                 | LR__0112
022b4     09 33 82 F1 | 	sub	local07, arg01
022b8     19 3B 02 F6 | 	mov	local11, local07
022bc     01 3A 86 F1 | 	sub	local11, #1
022c0     1E 13 02 F6 | 	mov	arg01, local12
022c4     1D 15 02 F6 | 	mov	arg02, local11
022c8     50 5D B2 FD | 	call	#__system__Right_S
022cc     FD 3C 02 F6 | 	mov	local12, result1
022d0     18 13 02 F6 | 	mov	arg01, local06
022d4     1E 15 02 F6 | 	mov	arg02, local12
022d8     98 3C B2 FD | 	call	#__system___string_concat
022dc     FD 30 02 F6 | 	mov	local06, result1
022e0     1C 31 62 FC | 	wrlong	local06, local10
022e4                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
022e4     14 43 02 F6 | 	mov	local15, local02
022e8     01 42 06 F1 | 	add	local15, #1
022ec     23 57 02 F6 | 	mov	local25, local17
022f0     01 56 06 F1 | 	add	local25, #1
022f4     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
022f8                 | LR__0113
022f8     2B 43 52 F2 | 	cmps	local15, local25 wc
022fc     70 00 90 3D |  if_ae	jmp	#LR__0115
02300     21 2F 02 F6 | 	mov	local05, local15
02304     01 2E 06 F1 | 	add	local05, #1
02308     03 2E 66 F0 | 	shl	local05, #3
0230c     35 00 00 FF 
02310     0C E4 05 F1 | 	add	objptr, ##27148
02314     F2 2E 02 F1 | 	add	local05, objptr
02318     17 2D 02 FB | 	rdlong	local04, local05
0231c     21 31 02 F6 | 	mov	local06, local15
02320     01 30 06 F1 | 	add	local06, #1
02324     03 30 66 F0 | 	shl	local06, #3
02328     F2 30 02 F1 | 	add	local06, objptr
0232c     04 30 06 F1 | 	add	local06, #4
02330     18 2B 02 FB | 	rdlong	local03, local06
02334     21 31 02 F6 | 	mov	local06, local15
02338     03 30 66 F0 | 	shl	local06, #3
0233c     F2 3C 02 F6 | 	mov	local12, objptr
02340     F2 30 02 F1 | 	add	local06, objptr
02344     18 2D 62 FC | 	wrlong	local04, local06
02348     21 3B 02 F6 | 	mov	local11, local15
0234c     1D 3F 02 F6 | 	mov	local13, local11
02350     03 3E 66 F0 | 	shl	local13, #3
02354     F2 3E 02 F1 | 	add	local13, objptr
02358     04 3E 06 F1 | 	add	local13, #4
0235c     1F 2B 62 FC | 	wrlong	local03, local13
02360     01 42 06 F1 | 	add	local15, #1
02364     35 00 00 FF 
02368     0C E4 85 F1 | 	sub	objptr, ##27148
0236c     88 FF 9F FD | 	jmp	#LR__0113
02370                 | LR__0114
02370                 | LR__0115
02370     01 28 86 F1 | 	sub	local02, #1
02374     01 46 86 F1 | 	sub	local17, #1
02378                 | LR__0116
02378     01 28 06 F1 | 	add	local02, #1
0237c     23 29 52 F2 | 	cmps	local02, local17 wc
02380     34 FE 9F CD |  if_b	jmp	#LR__0110
02384     00 28 06 F6 | 	mov	local02, #0
02388                 | '  
02388                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
02388                 | '  
02388                 | ' i=0 
02388                 | ' do
02388                 | LR__0117
02388     14 39 02 F6 | 	mov	local10, local02
0238c     03 38 66 F0 | 	shl	local10, #3
02390     35 00 00 FF 
02394     0C E4 05 F1 | 	add	objptr, ##27148
02398     F2 38 02 F1 | 	add	local10, objptr
0239c     1C 59 02 FB | 	rdlong	local26, local10
023a0     14 39 02 F6 | 	mov	local10, local02
023a4     01 38 06 F1 | 	add	local10, #1
023a8     03 38 66 F0 | 	shl	local10, #3
023ac     F2 38 02 F1 | 	add	local10, objptr
023b0     1C 5B 02 FB | 	rdlong	local27, local10
023b4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
023b4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
023b4     AD 01 00 FF 
023b8     D3 14 06 F6 | 	mov	arg02, ##@LR__5397
023bc     2C 13 02 F6 | 	mov	arg01, local26
023c0     35 00 00 FF 
023c4     0C E4 85 F1 | 	sub	objptr, ##27148
023c8     74 3B B2 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     A8 00 90 AD |  if_e	jmp	#LR__0118
023d4     AD 01 00 FF 
023d8     D5 14 06 F6 | 	mov	arg02, ##@LR__5398
023dc     2C 13 02 F6 | 	mov	arg01, local26
023e0     5C 3B B2 FD | 	call	#__system___string_cmp
023e4     FD 2A 0A F6 | 	mov	local03, result1 wz
023e8     90 00 90 AD |  if_e	jmp	#LR__0118
023ec     AD 01 00 FF 
023f0     D7 30 06 F6 | 	mov	local06, ##@LR__5399
023f4     2C 13 02 F6 | 	mov	arg01, local26
023f8     18 15 02 F6 | 	mov	arg02, local06
023fc     40 3B B2 FD | 	call	#__system___string_cmp
02400     00 FA 0D F2 | 	cmp	result1, #0 wz
02404     74 00 90 AD |  if_e	jmp	#LR__0118
02408     AD 01 00 FF 
0240c     D9 3C 06 F6 | 	mov	local12, ##@LR__5400
02410     2C 13 02 F6 | 	mov	arg01, local26
02414     1E 15 02 F6 | 	mov	arg02, local12
02418     24 3B B2 FD | 	call	#__system___string_cmp
0241c     00 FA 0D F2 | 	cmp	result1, #0 wz
02420     58 00 90 AD |  if_e	jmp	#LR__0118
02424     AD 01 00 FF 
02428     DB 3A 06 F6 | 	mov	local11, ##@LR__5401
0242c     1D 3D 02 F6 | 	mov	local12, local11
02430     2C 13 02 F6 | 	mov	arg01, local26
02434     1E 15 02 F6 | 	mov	arg02, local12
02438     04 3B B2 FD | 	call	#__system___string_cmp
0243c     FD 30 0A F6 | 	mov	local06, result1 wz
02440     38 00 90 AD |  if_e	jmp	#LR__0118
02444     AD 01 00 FF 
02448     DD 3A 06 F6 | 	mov	local11, ##@LR__5402
0244c     2C 13 02 F6 | 	mov	arg01, local26
02450     1D 15 02 F6 | 	mov	arg02, local11
02454     E8 3A B2 FD | 	call	#__system___string_cmp
02458     FD 3C 0A F6 | 	mov	local12, result1 wz
0245c     1C 00 90 AD |  if_e	jmp	#LR__0118
02460     AD 01 00 FF 
02464     DF 40 06 F6 | 	mov	local14, ##@LR__5403
02468     2C 13 02 F6 | 	mov	arg01, local26
0246c     20 15 02 F6 | 	mov	arg02, local14
02470     CC 3A B2 FD | 	call	#__system___string_cmp
02474     FD 3A 0A F6 | 	mov	local11, result1 wz
02478     20 00 90 5D |  if_ne	jmp	#LR__0119
0247c                 | LR__0118
0247c     AD 01 00 FF 
02480     E1 5C 06 F6 | 	mov	local28, ##@LR__5404
02484     2E 3F 02 F6 | 	mov	local13, local28
02488     2D 13 02 F6 | 	mov	arg01, local27
0248c     1F 15 02 F6 | 	mov	arg02, local13
02490     AC 3A B2 FD | 	call	#__system___string_cmp
02494     FD 40 0A F6 | 	mov	local14, result1 wz
02498     B8 00 90 AD |  if_e	jmp	#LR__0122
0249c                 | LR__0119
0249c     AD 01 00 FF 
024a0     E3 5C 06 F6 | 	mov	local28, ##@LR__5405
024a4     2C 13 02 F6 | 	mov	arg01, local26
024a8     2E 15 02 F6 | 	mov	arg02, local28
024ac     90 3A B2 FD | 	call	#__system___string_cmp
024b0     FD 3E 0A F6 | 	mov	local13, result1 wz
024b4     20 00 90 5D |  if_ne	jmp	#LR__0120
024b8     AD 01 00 FF 
024bc     E5 52 06 F6 | 	mov	local23, ##@LR__5406
024c0     29 51 02 F6 | 	mov	local22, local23
024c4     2D 13 02 F6 | 	mov	arg01, local27
024c8     28 15 02 F6 | 	mov	arg02, local22
024cc     70 3A B2 FD | 	call	#__system___string_cmp
024d0     FD 5C 0A F6 | 	mov	local28, result1 wz
024d4     7C 00 90 AD |  if_e	jmp	#LR__0122
024d8                 | LR__0120
024d8     AD 01 00 FF 
024dc     E7 52 06 F6 | 	mov	local23, ##@LR__5407
024e0     2C 13 02 F6 | 	mov	arg01, local26
024e4     29 15 02 F6 | 	mov	arg02, local23
024e8     54 3A B2 FD | 	call	#__system___string_cmp
024ec     FD 50 0A F6 | 	mov	local22, result1 wz
024f0     20 00 90 5D |  if_ne	jmp	#LR__0121
024f4     AD 01 00 FF 
024f8     E9 5E 06 F6 | 	mov	local29, ##@LR__5408
024fc     2F 55 02 F6 | 	mov	local24, local29
02500     2D 13 02 F6 | 	mov	arg01, local27
02504     2A 15 02 F6 | 	mov	arg02, local24
02508     34 3A B2 FD | 	call	#__system___string_cmp
0250c     FD 52 0A F6 | 	mov	local23, result1 wz
02510     40 00 90 AD |  if_e	jmp	#LR__0122
02514                 | LR__0121
02514     AD 01 00 FF 
02518     EB 60 06 F6 | 	mov	local30, ##@LR__5409
0251c     30 5F 02 F6 | 	mov	local29, local30
02520     2C 13 02 F6 | 	mov	arg01, local26
02524     2F 15 02 F6 | 	mov	arg02, local29
02528     14 3A B2 FD | 	call	#__system___string_cmp
0252c     FD 54 0A F6 | 	mov	local24, result1 wz
02530     F0 00 90 5D |  if_ne	jmp	#LR__0126
02534     AD 01 00 FF 
02538     ED 62 06 F6 | 	mov	local31, ##@LR__5410
0253c     31 61 02 F6 | 	mov	local30, local31
02540     2D 13 02 F6 | 	mov	arg01, local27
02544     30 15 02 F6 | 	mov	arg02, local30
02548     F4 39 B2 FD | 	call	#__system___string_cmp
0254c     FD 5E 0A F6 | 	mov	local29, result1 wz
02550     D0 00 90 5D |  if_ne	jmp	#LR__0126
02554                 | LR__0122
02554     14 39 02 F6 | 	mov	local10, local02
02558     03 38 66 F0 | 	shl	local10, #3
0255c     35 00 00 FF 
02560     0C E4 05 F1 | 	add	objptr, ##27148
02564     F2 38 02 F1 | 	add	local10, objptr
02568     2D 3D 02 F6 | 	mov	local12, local27
0256c     2C 13 02 F6 | 	mov	arg01, local26
02570     1E 15 02 F6 | 	mov	arg02, local12
02574     35 00 00 FF 
02578     0C E4 85 F1 | 	sub	objptr, ##27148
0257c     F4 39 B2 FD | 	call	#__system___string_concat
02580     1C FB 61 FC | 	wrlong	result1, local10
02584                 | '     lparts(i).part$=s1$+s2$
02584                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02584     14 43 02 F6 | 	mov	local15, local02
02588     01 42 06 F1 | 	add	local15, #1
0258c     23 65 02 F6 | 	mov	local32, local17
02590     01 64 06 F1 | 	add	local32, #1
02594     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
02598                 | LR__0123
02598     32 43 52 F2 | 	cmps	local15, local32 wc
0259c     7C 00 90 3D |  if_ae	jmp	#LR__0125
025a0     21 2F 02 F6 | 	mov	local05, local15
025a4     01 2E 06 F1 | 	add	local05, #1
025a8     03 2E 66 F0 | 	shl	local05, #3
025ac     35 00 00 FF 
025b0     0C E4 05 F1 | 	add	objptr, ##27148
025b4     F2 2E 02 F1 | 	add	local05, objptr
025b8     17 2D 02 FB | 	rdlong	local04, local05
025bc     21 31 02 F6 | 	mov	local06, local15
025c0     01 30 06 F1 | 	add	local06, #1
025c4     03 30 66 F0 | 	shl	local06, #3
025c8     F2 30 02 F1 | 	add	local06, objptr
025cc     04 30 06 F1 | 	add	local06, #4
025d0     18 2B 02 FB | 	rdlong	local03, local06
025d4     21 31 02 F6 | 	mov	local06, local15
025d8     03 30 66 F0 | 	shl	local06, #3
025dc     F2 3C 02 F6 | 	mov	local12, objptr
025e0     F2 30 02 F1 | 	add	local06, objptr
025e4     18 2D 62 FC | 	wrlong	local04, local06
025e8     21 3B 02 F6 | 	mov	local11, local15
025ec     1D 41 02 F6 | 	mov	local14, local11
025f0     20 3F 02 F6 | 	mov	local13, local14
025f4     03 3E 66 F0 | 	shl	local13, #3
025f8     F2 5C 02 F6 | 	mov	local28, objptr
025fc     F2 3E 02 F1 | 	add	local13, objptr
02600     04 3E 06 F1 | 	add	local13, #4
02604     1F 2B 62 FC | 	wrlong	local03, local13
02608     04 3E 86 F1 | 	sub	local13, #4
0260c     01 42 06 F1 | 	add	local15, #1
02610     35 00 00 FF 
02614     0C E4 85 F1 | 	sub	objptr, ##27148
02618     7C FF 9F FD | 	jmp	#LR__0123
0261c                 | LR__0124
0261c                 | LR__0125
0261c     01 28 86 F1 | 	sub	local02, #1
02620     01 46 86 F1 | 	sub	local17, #1
02624                 | LR__0126
02624     01 28 06 F1 | 	add	local02, #1
02628     23 29 52 F2 | 	cmps	local02, local17 wc
0262c     58 FD 9F CD |  if_b	jmp	#LR__0117
02630                 | '  
02630                 | ' ' 1h : now remove parts that are spaces
02630                 | ' 
02630                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02630     00 28 06 F6 | 	mov	local02, #0
02634     23 67 02 F6 | 	mov	local33, local17
02638     01 66 06 F1 | 	add	local33, #1
0263c                 | LR__0127
0263c     33 29 52 F2 | 	cmps	local02, local33 wc
02640     50 00 90 3D |  if_ae	jmp	#LR__0128
02644     14 39 02 F6 | 	mov	local10, local02
02648     03 38 66 F0 | 	shl	local10, #3
0264c     35 00 00 FF 
02650     0C E4 05 F1 | 	add	objptr, ##27148
02654     F2 38 02 F1 | 	add	local10, objptr
02658     14 3D 02 F6 | 	mov	local12, local02
0265c     1E 3B 02 F6 | 	mov	local11, local12
02660     1D 41 02 F6 | 	mov	local14, local11
02664     03 40 66 F0 | 	shl	local14, #3
02668     F2 3E 02 F6 | 	mov	local13, objptr
0266c     F2 40 02 F1 | 	add	local14, objptr
02670     20 13 02 FB | 	rdlong	arg01, local14
02674     35 00 00 FF 
02678     0C E4 85 F1 | 	sub	objptr, ##27148
0267c     A4 5D B2 FD | 	call	#__system__RTrim_S
02680     FD 12 02 F6 | 	mov	arg01, result1
02684     DC 5C B2 FD | 	call	#__system__LTrim_S
02688     1C FB 61 FC | 	wrlong	result1, local10
0268c     01 28 06 F1 | 	add	local02, #1
02690     A8 FF 9F FD | 	jmp	#LR__0127
02694                 | LR__0128
02694     00 28 06 F6 | 	mov	local02, #0
02698     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
0269c                 | ' i=0
0269c                 | ' do 
0269c                 | LR__0129
0269c                 | '   if len(lparts(i).part$)=0 then 
0269c     14 2F 02 F6 | 	mov	local05, local02
026a0     03 2E 66 F0 | 	shl	local05, #3
026a4     35 00 00 FF 
026a8     0C E4 05 F1 | 	add	objptr, ##27148
026ac     F2 2E 02 F1 | 	add	local05, objptr
026b0     17 13 02 FB | 	rdlong	arg01, local05
026b4     35 00 00 FF 
026b8     0C E4 85 F1 | 	sub	objptr, ##27148
026bc     09 33 02 F6 | 	mov	local07, arg01
026c0                 | LR__0130
026c0     19 FB C9 FA | 	rdbyte	result1, local07 wz
026c4     01 32 06 51 |  if_ne	add	local07, #1
026c8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
026cc     09 33 8A F1 | 	sub	local07, arg01 wz
026d0     C4 00 90 5D |  if_ne	jmp	#LR__0134
026d4                 | '     if i=k-1 then k-=1  :  exit
026d4     23 2D 02 F6 | 	mov	local04, local17
026d8     01 2C 86 F1 | 	sub	local04, #1
026dc     16 29 0A F2 | 	cmp	local02, local04 wz
026e0     01 46 86 A1 |  if_e	sub	local17, #1
026e4     C4 00 90 AD |  if_e	jmp	#LR__0136
026e8                 | '     if i<k-1 then 
026e8     23 2D 02 F6 | 	mov	local04, local17
026ec     01 2C 86 F1 | 	sub	local04, #1
026f0     16 29 52 F2 | 	cmps	local02, local04 wc
026f4     A0 00 90 3D |  if_ae	jmp	#LR__0133
026f8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
026f8     14 43 02 F6 | 	mov	local15, local02
026fc     23 69 02 F6 | 	mov	local34, local17
02700     01 68 86 F1 | 	sub	local34, #1
02704                 | LR__0131
02704     34 43 52 F2 | 	cmps	local15, local34 wc
02708     80 00 90 3D |  if_ae	jmp	#LR__0132
0270c     21 2F 02 F6 | 	mov	local05, local15
02710     01 2E 06 F1 | 	add	local05, #1
02714     03 2E 66 F0 | 	shl	local05, #3
02718     35 00 00 FF 
0271c     0C E4 05 F1 | 	add	objptr, ##27148
02720     F2 2E 02 F1 | 	add	local05, objptr
02724     17 2D 02 FB | 	rdlong	local04, local05
02728     21 31 02 F6 | 	mov	local06, local15
0272c     01 30 06 F1 | 	add	local06, #1
02730     03 30 66 F0 | 	shl	local06, #3
02734     F2 30 02 F1 | 	add	local06, objptr
02738     04 30 06 F1 | 	add	local06, #4
0273c     18 2B 02 FB | 	rdlong	local03, local06
02740     21 39 02 F6 | 	mov	local10, local15
02744     1C 31 02 F6 | 	mov	local06, local10
02748     03 30 66 F0 | 	shl	local06, #3
0274c     F2 3C 02 F6 | 	mov	local12, objptr
02750     F2 30 02 F1 | 	add	local06, objptr
02754     18 2D 62 FC | 	wrlong	local04, local06
02758     21 3B 02 F6 | 	mov	local11, local15
0275c     1D 41 02 F6 | 	mov	local14, local11
02760     20 3F 02 F6 | 	mov	local13, local14
02764     03 3E 66 F0 | 	shl	local13, #3
02768     F2 5C 02 F6 | 	mov	local28, objptr
0276c     F2 3E 02 F1 | 	add	local13, objptr
02770     04 3E 06 F1 | 	add	local13, #4
02774     1F 2B 62 FC | 	wrlong	local03, local13
02778     04 3E 86 F1 | 	sub	local13, #4
0277c     01 42 06 F1 | 	add	local15, #1
02780     35 00 00 FF 
02784     0C E4 85 F1 | 	sub	objptr, ##27148
02788     78 FF 9F FD | 	jmp	#LR__0131
0278c                 | LR__0132
0278c     01 46 86 F1 | 	sub	local17, #1
02790                 | '       if i>0 then i-=1 
02790     01 28 56 F2 | 	cmps	local02, #1 wc
02794     01 28 86 31 |  if_ae	sub	local02, #1
02798                 | LR__0133
02798                 | LR__0134
02798     01 28 06 F1 | 	add	local02, #1
0279c     23 2D 02 F6 | 	mov	local04, local17
027a0     01 2C 86 F1 | 	sub	local04, #1
027a4     16 29 5A F2 | 	cmps	local02, local04 wcz
027a8     F0 FE 9F ED |  if_be	jmp	#LR__0129
027ac                 | LR__0135
027ac                 | LR__0136
027ac                 | ' 
027ac                 | ' ' 1i: lowercase all that is not a string
027ac                 | ' 
027ac                 | ' for j=0 to k-1
027ac     00 42 06 F6 | 	mov	local15, #0
027b0     23 6B 02 F6 | 	mov	local35, local17
027b4                 | LR__0137
027b4     35 43 52 F2 | 	cmps	local15, local35 wc
027b8     CC 00 90 3D |  if_ae	jmp	#LR__0140
027bc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
027bc     21 2F 02 F6 | 	mov	local05, local15
027c0     03 2E 66 F0 | 	shl	local05, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 2E 02 F1 | 	add	local05, objptr
027d0     17 13 02 FB | 	rdlong	arg01, local05
027d4     01 14 06 F6 | 	mov	arg02, #1
027d8     35 00 00 FF 
027dc     0C E4 85 F1 | 	sub	objptr, ##27148
027e0     B0 57 B2 FD | 	call	#__system__Left_S
027e4     FD 12 02 F6 | 	mov	arg01, result1
027e8     AD 01 00 FF 
027ec     EF 14 06 F6 | 	mov	arg02, ##@LR__5411
027f0     4C 37 B2 FD | 	call	#__system___string_cmp
027f4     00 FA 0D F2 | 	cmp	result1, #0 wz
027f8     44 00 90 5D |  if_ne	jmp	#LR__0138
027fc     21 31 02 F6 | 	mov	local06, local15
02800     03 30 66 F0 | 	shl	local06, #3
02804     35 00 00 FF 
02808     0C E4 05 F1 | 	add	objptr, ##27148
0280c     F2 3C 02 F6 | 	mov	local12, objptr
02810     F2 30 02 F1 | 	add	local06, objptr
02814     18 13 02 FB | 	rdlong	arg01, local06
02818     01 14 06 F6 | 	mov	arg02, #1
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     F4 57 B2 FD | 	call	#__system__Right_S
02828     FD 12 02 F6 | 	mov	arg01, result1
0282c     AD 01 00 FF 
02830     F1 14 06 F6 | 	mov	arg02, ##@LR__5412
02834     08 37 B2 FD | 	call	#__system___string_cmp
02838     00 FA 0D F2 | 	cmp	result1, #0 wz
0283c     40 00 90 AD |  if_e	jmp	#LR__0139
02840                 | LR__0138
02840     21 39 02 F6 | 	mov	local10, local15
02844     03 38 66 F0 | 	shl	local10, #3
02848     35 00 00 FF 
0284c     0C E4 05 F1 | 	add	objptr, ##27148
02850     F2 38 02 F1 | 	add	local10, objptr
02854     21 3D 02 F6 | 	mov	local12, local15
02858     1E 3B 02 F6 | 	mov	local11, local12
0285c     1D 41 02 F6 | 	mov	local14, local11
02860     03 40 66 F0 | 	shl	local14, #3
02864     F2 3E 02 F6 | 	mov	local13, objptr
02868     F2 40 02 F1 | 	add	local14, objptr
0286c     20 13 02 FB | 	rdlong	arg01, local14
02870     35 00 00 FF 
02874     0C E4 85 F1 | 	sub	objptr, ##27148
02878     28 5A B2 FD | 	call	#__system__LCase_S
0287c     1C FB 61 FC | 	wrlong	result1, local10
02880                 | LR__0139
02880     01 42 06 F1 | 	add	local15, #1
02884     2C FF 9F FD | 	jmp	#LR__0137
02888                 | LR__0140
02888                 | ' 
02888                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
02888                 | ' 
02888                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
02888     00 28 06 F6 | 	mov	local02, #0
0288c     23 6D 02 F6 | 	mov	local36, local17
02890     01 6C 06 F1 | 	add	local36, #1
02894     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
02898                 | LR__0141
02898     36 29 52 F2 | 	cmps	local02, local36 wc
0289c     30 00 90 3D |  if_ae	jmp	#LR__0143
028a0     14 39 02 F6 | 	mov	local10, local02
028a4     03 38 66 F0 | 	shl	local10, #3
028a8     35 00 00 FF 
028ac     0C E4 05 F1 | 	add	objptr, ##27148
028b0     F2 38 02 F1 | 	add	local10, objptr
028b4     04 38 06 F1 | 	add	local10, #4
028b8     FF FF FF FF 
028bc     1C FF 6B FC | 	wrlong	##-1, local10
028c0     01 28 06 F1 | 	add	local02, #1
028c4     35 00 00 FF 
028c8     0C E4 85 F1 | 	sub	objptr, ##27148
028cc     C8 FF 9F FD | 	jmp	#LR__0141
028d0                 | LR__0142
028d0                 | LR__0143
028d0                 | ' 
028d0                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 12 02 FB | 	rdlong	arg01, objptr
028dc     35 00 00 FF 
028e0     0C E4 85 F1 | 	sub	objptr, ##27148
028e4     34 43 B0 FD | 	call	#_isdec
028e8     00 FA 0D F2 | 	cmp	result1, #0 wz
028ec     01 6E 06 56 |  if_ne	mov	local37, #1
028f0     00 6E 06 A6 |  if_e	mov	local37, #0
028f4                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
028f4     35 00 00 FF 
028f8     0C E4 05 F1 | 	add	objptr, ##27148
028fc     F2 12 02 FB | 	rdlong	arg01, objptr
02900     35 00 00 FF 
02904     0C E4 85 F1 | 	sub	objptr, ##27148
02908     AD 01 00 FF 
0290c     F3 14 06 F6 | 	mov	arg02, ##@LR__5413
02910     2C 36 B2 FD | 	call	#__system___string_cmp
02914     00 FA 0D F2 | 	cmp	result1, #0 wz
02918     01 6E 06 A6 |  if_e	mov	local37, #1
0291c     00 28 06 F6 | 	mov	local02, #0
02920                 | ' i=0 : do 
02920                 | LR__0144
02920                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02920     14 2F 02 F6 | 	mov	local05, local02
02924     03 2E 66 F0 | 	shl	local05, #3
02928     35 00 00 FF 
0292c     0C E4 05 F1 | 	add	objptr, ##27148
02930     F2 2E 02 F1 | 	add	local05, objptr
02934     17 13 02 FB | 	rdlong	arg01, local05
02938     AD 01 00 FF 
0293c     F8 14 06 F6 | 	mov	arg02, ##@LR__5414
02940     35 00 00 FF 
02944     0C E4 85 F1 | 	sub	objptr, ##27148
02948     F4 35 B2 FD | 	call	#__system___string_cmp
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     0C 00 90 AD |  if_e	jmp	#LR__0145
02954     01 28 06 F1 | 	add	local02, #1
02958     23 29 5A F2 | 	cmps	local02, local17 wcz
0295c     C0 FF 9F ED |  if_be	jmp	#LR__0144
02960                 | LR__0145
02960                 | ' if i<k then addptr=i+1	 							' then found
02960     23 29 52 F2 | 	cmps	local02, local17 wc
02964     14 6F 02 C6 |  if_b	mov	local37, local02
02968     01 6E 06 C1 |  if_b	add	local37, #1
0296c     35 00 00 FF 
02970     0C E4 05 F1 | 	add	objptr, ##27148
02974                 | ' lp$=lparts(addptr).part$ 
02974                 | ' 
02974                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02974     37 2F 02 F6 | 	mov	local05, local37
02978     03 2E 66 F0 | 	shl	local05, #3
0297c     F2 2E 02 F1 | 	add	local05, objptr
02980     17 13 02 FB | 	rdlong	arg01, local05
02984     01 14 06 F6 | 	mov	arg02, #1
02988     35 00 00 FF 
0298c     0C E4 85 F1 | 	sub	objptr, ##27148
02990     00 56 B2 FD | 	call	#__system__Left_S
02994     FD 12 02 F6 | 	mov	arg01, result1
02998     AD 01 00 FF 
0299c     FD 14 06 F6 | 	mov	arg02, ##@LR__5415
029a0     9C 35 B2 FD | 	call	#__system___string_cmp
029a4     00 FA 0D F2 | 	cmp	result1, #0 wz
029a8     60 01 90 5D |  if_ne	jmp	#LR__0152
029ac     37 31 02 F6 | 	mov	local06, local37
029b0     03 30 66 F0 | 	shl	local06, #3
029b4     35 00 00 FF 
029b8     0C E4 05 F1 | 	add	objptr, ##27148
029bc     F2 30 02 F1 | 	add	local06, objptr
029c0     18 13 02 FB | 	rdlong	arg01, local06
029c4     35 00 00 FF 
029c8     0C E4 85 F1 | 	sub	objptr, ##27148
029cc     09 33 02 F6 | 	mov	local07, arg01
029d0     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
029d4                 | LR__0146
029d4     19 FB C9 FA | 	rdbyte	result1, local07 wz
029d8     01 32 06 51 |  if_ne	add	local07, #1
029dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
029e0                 | LR__0147
029e0     09 33 82 F1 | 	sub	local07, arg01
029e4     02 32 56 F2 | 	cmps	local07, #2 wc
029e8     20 01 90 CD |  if_b	jmp	#LR__0152
029ec     01 46 06 F1 | 	add	local17, #1
029f0                 | '   k+=1
029f0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
029f0     23 29 02 F6 | 	mov	local02, local17
029f4     37 71 02 F6 | 	mov	local38, local37
029f8     01 70 06 F1 | 	add	local38, #1
029fc     35 00 00 FF 
02a00     0C E4 05 F1 | 	add	objptr, ##27148
02a04     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02a08                 | LR__0148
02a08     14 2F 02 F6 | 	mov	local05, local02
02a0c     01 2E 86 F1 | 	sub	local05, #1
02a10     03 2E 66 F0 | 	shl	local05, #3
02a14     F2 2E 02 F1 | 	add	local05, objptr
02a18     17 2D 02 FB | 	rdlong	local04, local05
02a1c     14 31 02 F6 | 	mov	local06, local02
02a20     01 30 86 F1 | 	sub	local06, #1
02a24     03 30 66 F0 | 	shl	local06, #3
02a28     F2 30 02 F1 | 	add	local06, objptr
02a2c     04 30 06 F1 | 	add	local06, #4
02a30     18 2B 02 FB | 	rdlong	local03, local06
02a34     14 31 02 F6 | 	mov	local06, local02
02a38     03 30 66 F0 | 	shl	local06, #3
02a3c     F2 30 02 F1 | 	add	local06, objptr
02a40     18 2D 62 FC | 	wrlong	local04, local06
02a44     14 3F 02 F6 | 	mov	local13, local02
02a48     03 3E 66 F0 | 	shl	local13, #3
02a4c     F2 3E 02 F1 | 	add	local13, objptr
02a50     04 3E 06 F1 | 	add	local13, #4
02a54     1F 2B 62 FC | 	wrlong	local03, local13
02a58     01 28 86 F1 | 	sub	local02, #1
02a5c     38 29 52 F2 | 	cmps	local02, local38 wc
02a60     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02a64                 | LR__0149
02a64     37 39 02 F6 | 	mov	local10, local37
02a68     01 38 06 F1 | 	add	local10, #1
02a6c     03 38 66 F0 | 	shl	local10, #3
02a70     F2 38 02 F1 | 	add	local10, objptr
02a74     37 41 02 F6 | 	mov	local14, local37
02a78     03 40 66 F0 | 	shl	local14, #3
02a7c     F2 40 02 F1 | 	add	local14, objptr
02a80     20 31 02 FB | 	rdlong	local06, local14
02a84     37 3F 02 F6 | 	mov	local13, local37
02a88     1F 5D 02 F6 | 	mov	local28, local13
02a8c     2E 51 02 F6 | 	mov	local22, local28
02a90     03 50 66 F0 | 	shl	local22, #3
02a94     F2 52 02 F6 | 	mov	local23, objptr
02a98     F2 50 02 F1 | 	add	local22, objptr
02a9c     28 13 02 FB | 	rdlong	arg01, local22
02aa0     35 00 00 FF 
02aa4     0C E4 85 F1 | 	sub	objptr, ##27148
02aa8     09 33 02 F6 | 	mov	local07, arg01
02aac     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02ab0                 | LR__0150
02ab0     19 FB C9 FA | 	rdbyte	result1, local07 wz
02ab4     01 32 06 51 |  if_ne	add	local07, #1
02ab8     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02abc                 | LR__0151
02abc     09 33 82 F1 | 	sub	local07, arg01
02ac0     19 41 02 F6 | 	mov	local14, local07
02ac4     20 3B 02 F6 | 	mov	local11, local14
02ac8     01 3A 86 F1 | 	sub	local11, #1
02acc     1D 3D 02 F6 | 	mov	local12, local11
02ad0     18 13 02 F6 | 	mov	arg01, local06
02ad4     1E 15 02 F6 | 	mov	arg02, local12
02ad8     40 55 B2 FD | 	call	#__system__Right_S
02adc     1C FB 61 FC | 	wrlong	result1, local10
02ae0     37 39 02 F6 | 	mov	local10, local37
02ae4     03 38 66 F0 | 	shl	local10, #3
02ae8     35 00 00 FF 
02aec     0C E4 05 F1 | 	add	objptr, ##27148
02af0     F2 38 02 F1 | 	add	local10, objptr
02af4     AD 01 00 FF 
02af8     FF 30 06 F6 | 	mov	local06, ##@LR__5416
02afc     1C 31 62 FC | 	wrlong	local06, local10
02b00     35 00 00 FF 
02b04     0C E4 85 F1 | 	sub	objptr, ##27148
02b08     A8 01 90 FD | 	jmp	#LR__0160
02b0c                 | LR__0152
02b0c     37 31 02 F6 | 	mov	local06, local37
02b10     03 30 66 F0 | 	shl	local06, #3
02b14     35 00 00 FF 
02b18     0C E4 05 F1 | 	add	objptr, ##27148
02b1c     F2 3C 02 F6 | 	mov	local12, objptr
02b20     F2 30 02 F1 | 	add	local06, objptr
02b24     18 15 02 FB | 	rdlong	arg02, local06
02b28     AD 01 00 FF 
02b2c     01 17 06 F6 | 	mov	arg03, ##@LR__5417
02b30     01 12 06 F6 | 	mov	arg01, #1
02b34     35 00 00 FF 
02b38     0C E4 85 F1 | 	sub	objptr, ##27148
02b3c     9C 59 B2 FD | 	call	#__system__Instr
02b40     FD 72 02 F6 | 	mov	local39, result1
02b44                 | ' 
02b44                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02b44                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02b44     01 72 56 F2 | 	cmps	local39, #1 wc
02b48     68 01 90 CD |  if_b	jmp	#LR__0159
02b4c     37 2F 02 F6 | 	mov	local05, local37
02b50     03 2E 66 F0 | 	shl	local05, #3
02b54     35 00 00 FF 
02b58     0C E4 05 F1 | 	add	objptr, ##27148
02b5c     F2 2E 02 F1 | 	add	local05, objptr
02b60     17 13 02 FB | 	rdlong	arg01, local05
02b64     35 00 00 FF 
02b68     0C E4 85 F1 | 	sub	objptr, ##27148
02b6c     09 33 02 F6 | 	mov	local07, arg01
02b70     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02b74                 | LR__0153
02b74     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b78     01 32 06 51 |  if_ne	add	local07, #1
02b7c     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02b80                 | LR__0154
02b80     09 33 82 F1 | 	sub	local07, arg01
02b84     19 73 52 F2 | 	cmps	local39, local07 wc
02b88     28 01 90 3D |  if_ae	jmp	#LR__0159
02b8c     01 46 06 F1 | 	add	local17, #1
02b90                 | '   k+=1
02b90                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02b90     23 29 02 F6 | 	mov	local02, local17
02b94     37 75 02 F6 | 	mov	local40, local37
02b98     01 74 06 F1 | 	add	local40, #1
02b9c     35 00 00 FF 
02ba0     0C E4 05 F1 | 	add	objptr, ##27148
02ba4     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ba8                 | LR__0155
02ba8     14 2F 02 F6 | 	mov	local05, local02
02bac     01 2E 86 F1 | 	sub	local05, #1
02bb0     03 2E 66 F0 | 	shl	local05, #3
02bb4     F2 2E 02 F1 | 	add	local05, objptr
02bb8     17 2D 02 FB | 	rdlong	local04, local05
02bbc     14 31 02 F6 | 	mov	local06, local02
02bc0     01 30 86 F1 | 	sub	local06, #1
02bc4     03 30 66 F0 | 	shl	local06, #3
02bc8     F2 30 02 F1 | 	add	local06, objptr
02bcc     04 30 06 F1 | 	add	local06, #4
02bd0     18 2B 02 FB | 	rdlong	local03, local06
02bd4     14 31 02 F6 | 	mov	local06, local02
02bd8     03 30 66 F0 | 	shl	local06, #3
02bdc     F2 30 02 F1 | 	add	local06, objptr
02be0     18 2D 62 FC | 	wrlong	local04, local06
02be4     14 3F 02 F6 | 	mov	local13, local02
02be8     03 3E 66 F0 | 	shl	local13, #3
02bec     F2 3E 02 F1 | 	add	local13, objptr
02bf0     04 3E 06 F1 | 	add	local13, #4
02bf4     1F 2B 62 FC | 	wrlong	local03, local13
02bf8     01 28 86 F1 | 	sub	local02, #1
02bfc     3A 29 52 F2 | 	cmps	local02, local40 wc
02c00     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02c04                 | LR__0156
02c04     37 39 02 F6 | 	mov	local10, local37
02c08     01 38 06 F1 | 	add	local10, #1
02c0c     03 38 66 F0 | 	shl	local10, #3
02c10     F2 38 02 F1 | 	add	local10, objptr
02c14     37 41 02 F6 | 	mov	local14, local37
02c18     03 40 66 F0 | 	shl	local14, #3
02c1c     F2 40 02 F1 | 	add	local14, objptr
02c20     20 31 02 FB | 	rdlong	local06, local14
02c24     37 5D 02 F6 | 	mov	local28, local37
02c28     2E 51 02 F6 | 	mov	local22, local28
02c2c     03 50 66 F0 | 	shl	local22, #3
02c30     F2 52 02 F6 | 	mov	local23, objptr
02c34     F2 50 02 F1 | 	add	local22, objptr
02c38     28 13 02 FB | 	rdlong	arg01, local22
02c3c     35 00 00 FF 
02c40     0C E4 85 F1 | 	sub	objptr, ##27148
02c44     09 33 02 F6 | 	mov	local07, arg01
02c48     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02c4c                 | LR__0157
02c4c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02c50     01 32 06 51 |  if_ne	add	local07, #1
02c54     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02c58                 | LR__0158
02c58     09 33 82 F1 | 	sub	local07, arg01
02c5c     19 15 02 F6 | 	mov	arg02, local07
02c60     39 15 82 F1 | 	sub	arg02, local39
02c64     18 13 02 F6 | 	mov	arg01, local06
02c68     B0 53 B2 FD | 	call	#__system__Right_S
02c6c     1C FB 61 FC | 	wrlong	result1, local10
02c70     37 39 02 F6 | 	mov	local10, local37
02c74     03 38 66 F0 | 	shl	local10, #3
02c78     35 00 00 FF 
02c7c     0C E4 05 F1 | 	add	objptr, ##27148
02c80     F2 38 02 F1 | 	add	local10, objptr
02c84     37 3B 02 F6 | 	mov	local11, local37
02c88     1D 41 02 F6 | 	mov	local14, local11
02c8c     03 40 66 F0 | 	shl	local14, #3
02c90     F2 3E 02 F6 | 	mov	local13, objptr
02c94     F2 40 02 F1 | 	add	local14, objptr
02c98     20 13 02 FB | 	rdlong	arg01, local14
02c9c     39 3D 02 F6 | 	mov	local12, local39
02ca0     1E 15 02 F6 | 	mov	arg02, local12
02ca4     35 00 00 FF 
02ca8     0C E4 85 F1 | 	sub	objptr, ##27148
02cac     E4 52 B2 FD | 	call	#__system__Left_S
02cb0     1C FB 61 FC | 	wrlong	result1, local10
02cb4                 | LR__0159
02cb4                 | LR__0160
02cb4     37 39 02 F6 | 	mov	local10, local37
02cb8     03 38 66 F0 | 	shl	local10, #3
02cbc     35 00 00 FF 
02cc0     0C E4 05 F1 | 	add	objptr, ##27148
02cc4     F2 38 02 F1 | 	add	local10, objptr
02cc8     1C 77 02 FB | 	rdlong	local41, local10
02ccc                 | ' 
02ccc                 | ' 825
02ccc                 | ' lp$=lparts(addptr).part$ 
02ccc                 | ' 
02ccc                 | ' ' process mouse/cursor/click on/off
02ccc                 | ' 
02ccc                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02ccc     AD 01 00 FF 
02cd0     03 15 06 F6 | 	mov	arg02, ##@LR__5418
02cd4     3B 13 02 F6 | 	mov	arg01, local41
02cd8     35 00 00 FF 
02cdc     0C E4 85 F1 | 	sub	objptr, ##27148
02ce0     5C 32 B2 FD | 	call	#__system___string_cmp
02ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce8     30 00 90 AD |  if_e	jmp	#LR__0161
02cec     AD 01 00 FF 
02cf0     09 15 06 F6 | 	mov	arg02, ##@LR__5419
02cf4     3B 13 02 F6 | 	mov	arg01, local41
02cf8     44 32 B2 FD | 	call	#__system___string_cmp
02cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02d00     18 00 90 AD |  if_e	jmp	#LR__0161
02d04     AD 01 00 FF 
02d08     10 15 06 F6 | 	mov	arg02, ##@LR__5420
02d0c     3B 13 02 F6 | 	mov	arg01, local41
02d10     2C 32 B2 FD | 	call	#__system___string_cmp
02d14     00 FA 0D F2 | 	cmp	result1, #0 wz
02d18     E0 00 90 5D |  if_ne	jmp	#LR__0164
02d1c                 | LR__0161
02d1c                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02d1c     37 2F 02 F6 | 	mov	local05, local37
02d20     01 2E 06 F1 | 	add	local05, #1
02d24     03 2E 66 F0 | 	shl	local05, #3
02d28     35 00 00 FF 
02d2c     0C E4 05 F1 | 	add	objptr, ##27148
02d30     F2 2E 02 F1 | 	add	local05, objptr
02d34     17 13 02 FB | 	rdlong	arg01, local05
02d38     AD 01 00 FF 
02d3c     16 15 06 F6 | 	mov	arg02, ##@LR__5421
02d40     35 00 00 FF 
02d44     0C E4 85 F1 | 	sub	objptr, ##27148
02d48     F4 31 B2 FD | 	call	#__system___string_cmp
02d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d50     38 00 90 5D |  if_ne	jmp	#LR__0162
02d54     37 39 02 F6 | 	mov	local10, local37
02d58     01 38 06 F1 | 	add	local10, #1
02d5c     03 38 66 F0 | 	shl	local10, #3
02d60     35 00 00 FF 
02d64     0C E4 05 F1 | 	add	objptr, ##27148
02d68     F2 38 02 F1 | 	add	local10, objptr
02d6c     AD 01 00 FF 
02d70     19 31 06 F6 | 	mov	local06, ##@LR__5422
02d74     1C 31 62 FC | 	wrlong	local06, local10
02d78     14 E4 05 F1 | 	add	objptr, #20
02d7c     01 00 80 FF 
02d80     F2 00 68 FC | 	wrlong	##512, objptr
02d84     35 00 00 FF 
02d88     20 E4 85 F1 | 	sub	objptr, ##27168
02d8c                 | LR__0162
02d8c                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02d8c     37 2F 02 F6 | 	mov	local05, local37
02d90     01 2E 06 F1 | 	add	local05, #1
02d94     03 2E 66 F0 | 	shl	local05, #3
02d98     35 00 00 FF 
02d9c     0C E4 05 F1 | 	add	objptr, ##27148
02da0     F2 2E 02 F1 | 	add	local05, objptr
02da4     17 13 02 FB | 	rdlong	arg01, local05
02da8     AD 01 00 FF 
02dac     1B 15 06 F6 | 	mov	arg02, ##@LR__5423
02db0     35 00 00 FF 
02db4     0C E4 85 F1 | 	sub	objptr, ##27148
02db8     84 31 B2 FD | 	call	#__system___string_cmp
02dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
02dc0     38 00 90 5D |  if_ne	jmp	#LR__0163
02dc4     37 39 02 F6 | 	mov	local10, local37
02dc8     01 38 06 F1 | 	add	local10, #1
02dcc     03 38 66 F0 | 	shl	local10, #3
02dd0     35 00 00 FF 
02dd4     0C E4 05 F1 | 	add	objptr, ##27148
02dd8     F2 38 02 F1 | 	add	local10, objptr
02ddc     AD 01 00 FF 
02de0     1F 31 06 F6 | 	mov	local06, ##@LR__5424
02de4     1C 31 62 FC | 	wrlong	local06, local10
02de8     14 E4 05 F1 | 	add	objptr, #20
02dec     01 00 80 FF 
02df0     F2 00 68 FC | 	wrlong	##512, objptr
02df4     35 00 00 FF 
02df8     20 E4 85 F1 | 	sub	objptr, ##27168
02dfc                 | LR__0163
02dfc                 | LR__0164
02dfc                 | ' 		
02dfc                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02dfc                 | ' 
02dfc                 | ' if (lp$="mode" orelse lp$="m.") then 
02dfc     AD 01 00 FF 
02e00     21 15 06 F6 | 	mov	arg02, ##@LR__5425
02e04     3B 13 02 F6 | 	mov	arg01, local41
02e08     34 31 B2 FD | 	call	#__system___string_cmp
02e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e10     18 00 90 AD |  if_e	jmp	#LR__0165
02e14     AD 01 00 FF 
02e18     26 15 06 F6 | 	mov	arg02, ##@LR__5426
02e1c     3B 13 02 F6 | 	mov	arg01, local41
02e20     1C 31 B2 FD | 	call	#__system___string_cmp
02e24     00 FA 0D F2 | 	cmp	result1, #0 wz
02e28     F4 01 90 5D |  if_ne	jmp	#LR__0171
02e2c                 | LR__0165
02e2c                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02e2c     37 2F 02 F6 | 	mov	local05, local37
02e30     01 2E 06 F1 | 	add	local05, #1
02e34     03 2E 66 F0 | 	shl	local05, #3
02e38     35 00 00 FF 
02e3c     0C E4 05 F1 | 	add	objptr, ##27148
02e40     F2 2E 02 F1 | 	add	local05, objptr
02e44     17 13 02 FB | 	rdlong	arg01, local05
02e48     AD 01 00 FF 
02e4c     29 15 06 F6 | 	mov	arg02, ##@LR__5427
02e50     35 00 00 FF 
02e54     0C E4 85 F1 | 	sub	objptr, ##27148
02e58     E4 30 B2 FD | 	call	#__system___string_cmp
02e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e60     2C 00 90 5D |  if_ne	jmp	#LR__0166
02e64     37 39 02 F6 | 	mov	local10, local37
02e68     01 38 06 F1 | 	add	local10, #1
02e6c     03 38 66 F0 | 	shl	local10, #3
02e70     35 00 00 FF 
02e74     0C E4 05 F1 | 	add	objptr, ##27148
02e78     F2 38 02 F1 | 	add	local10, objptr
02e7c     AD 01 00 FF 
02e80     2F 31 06 F6 | 	mov	local06, ##@LR__5428
02e84     1C 31 62 FC | 	wrlong	local06, local10
02e88     35 00 00 FF 
02e8c     0C E4 85 F1 | 	sub	objptr, ##27148
02e90                 | LR__0166
02e90                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02e90     37 2F 02 F6 | 	mov	local05, local37
02e94     01 2E 06 F1 | 	add	local05, #1
02e98     03 2E 66 F0 | 	shl	local05, #3
02e9c     35 00 00 FF 
02ea0     0C E4 05 F1 | 	add	objptr, ##27148
02ea4     F2 2E 02 F1 | 	add	local05, objptr
02ea8     17 13 02 FB | 	rdlong	arg01, local05
02eac     AD 01 00 FF 
02eb0     31 15 06 F6 | 	mov	arg02, ##@LR__5429
02eb4     35 00 00 FF 
02eb8     0C E4 85 F1 | 	sub	objptr, ##27148
02ebc     80 30 B2 FD | 	call	#__system___string_cmp
02ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec4     2C 00 90 5D |  if_ne	jmp	#LR__0167
02ec8     37 39 02 F6 | 	mov	local10, local37
02ecc     01 38 06 F1 | 	add	local10, #1
02ed0     03 38 66 F0 | 	shl	local10, #3
02ed4     35 00 00 FF 
02ed8     0C E4 05 F1 | 	add	objptr, ##27148
02edc     F2 38 02 F1 | 	add	local10, objptr
02ee0     AD 01 00 FF 
02ee4     3A 31 06 F6 | 	mov	local06, ##@LR__5430
02ee8     1C 31 62 FC | 	wrlong	local06, local10
02eec     35 00 00 FF 
02ef0     0C E4 85 F1 | 	sub	objptr, ##27148
02ef4                 | LR__0167
02ef4                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02ef4     37 2F 02 F6 | 	mov	local05, local37
02ef8     01 2E 06 F1 | 	add	local05, #1
02efc     03 2E 66 F0 | 	shl	local05, #3
02f00     35 00 00 FF 
02f04     0C E4 05 F1 | 	add	objptr, ##27148
02f08     F2 2E 02 F1 | 	add	local05, objptr
02f0c     17 13 02 FB | 	rdlong	arg01, local05
02f10     AD 01 00 FF 
02f14     3C 15 06 F6 | 	mov	arg02, ##@LR__5431
02f18     35 00 00 FF 
02f1c     0C E4 85 F1 | 	sub	objptr, ##27148
02f20     1C 30 B2 FD | 	call	#__system___string_cmp
02f24     00 FA 0D F2 | 	cmp	result1, #0 wz
02f28     2C 00 90 5D |  if_ne	jmp	#LR__0168
02f2c     37 39 02 F6 | 	mov	local10, local37
02f30     01 38 06 F1 | 	add	local10, #1
02f34     03 38 66 F0 | 	shl	local10, #3
02f38     35 00 00 FF 
02f3c     0C E4 05 F1 | 	add	objptr, ##27148
02f40     F2 38 02 F1 | 	add	local10, objptr
02f44     AD 01 00 FF 
02f48     45 31 06 F6 | 	mov	local06, ##@LR__5432
02f4c     1C 31 62 FC | 	wrlong	local06, local10
02f50     35 00 00 FF 
02f54     0C E4 85 F1 | 	sub	objptr, ##27148
02f58                 | LR__0168
02f58                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02f58     37 2F 02 F6 | 	mov	local05, local37
02f5c     01 2E 06 F1 | 	add	local05, #1
02f60     03 2E 66 F0 | 	shl	local05, #3
02f64     35 00 00 FF 
02f68     0C E4 05 F1 | 	add	objptr, ##27148
02f6c     F2 2E 02 F1 | 	add	local05, objptr
02f70     17 13 02 FB | 	rdlong	arg01, local05
02f74     AD 01 00 FF 
02f78     47 15 06 F6 | 	mov	arg02, ##@LR__5433
02f7c     35 00 00 FF 
02f80     0C E4 85 F1 | 	sub	objptr, ##27148
02f84     B8 2F B2 FD | 	call	#__system___string_cmp
02f88     00 FA 0D F2 | 	cmp	result1, #0 wz
02f8c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f90     37 39 02 F6 | 	mov	local10, local37
02f94     01 38 06 F1 | 	add	local10, #1
02f98     03 38 66 F0 | 	shl	local10, #3
02f9c     35 00 00 FF 
02fa0     0C E4 05 F1 | 	add	objptr, ##27148
02fa4     F2 38 02 F1 | 	add	local10, objptr
02fa8     AD 01 00 FF 
02fac     50 31 06 F6 | 	mov	local06, ##@LR__5434
02fb0     1C 31 62 FC | 	wrlong	local06, local10
02fb4     35 00 00 FF 
02fb8     0C E4 85 F1 | 	sub	objptr, ##27148
02fbc                 | LR__0169
02fbc                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02fbc     37 2F 02 F6 | 	mov	local05, local37
02fc0     01 2E 06 F1 | 	add	local05, #1
02fc4     03 2E 66 F0 | 	shl	local05, #3
02fc8     35 00 00 FF 
02fcc     0C E4 05 F1 | 	add	objptr, ##27148
02fd0     F2 2E 02 F1 | 	add	local05, objptr
02fd4     17 13 02 FB | 	rdlong	arg01, local05
02fd8     AD 01 00 FF 
02fdc     52 15 06 F6 | 	mov	arg02, ##@LR__5435
02fe0     35 00 00 FF 
02fe4     0C E4 85 F1 | 	sub	objptr, ##27148
02fe8     54 2F B2 FD | 	call	#__system___string_cmp
02fec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff0     2C 00 90 5D |  if_ne	jmp	#LR__0170
02ff4     37 39 02 F6 | 	mov	local10, local37
02ff8     01 38 06 F1 | 	add	local10, #1
02ffc     03 38 66 F0 | 	shl	local10, #3
03000     35 00 00 FF 
03004     0C E4 05 F1 | 	add	objptr, ##27148
03008     F2 38 02 F1 | 	add	local10, objptr
0300c     AD 01 00 FF 
03010     55 31 06 F6 | 	mov	local06, ##@LR__5436
03014     1C 31 62 FC | 	wrlong	local06, local10
03018     35 00 00 FF 
0301c     0C E4 85 F1 | 	sub	objptr, ##27148
03020                 | LR__0170
03020                 | LR__0171
03020                 | ' 
03020                 | ' ' find part types 
03020                 | ' 
03020                 | ' for i=0 to k-1
03020     00 28 06 F6 | 	mov	local02, #0
03024     23 79 02 F6 | 	mov	local42, local17
03028                 | LR__0172
03028     3C 29 52 F2 | 	cmps	local02, local42 wc
0302c     A4 07 90 3D |  if_ae	jmp	#LR__0184
03030     14 39 02 F6 | 	mov	local10, local02
03034     03 38 66 F0 | 	shl	local10, #3
03038     35 00 00 FF 
0303c     0C E4 05 F1 | 	add	objptr, ##27148
03040     F2 38 02 F1 | 	add	local10, objptr
03044     14 3B 02 F6 | 	mov	local11, local02
03048     1D 41 02 F6 | 	mov	local14, local11
0304c     20 3F 02 F6 | 	mov	local13, local14
03050     03 3E 66 F0 | 	shl	local13, #3
03054     F2 3E 02 F1 | 	add	local13, objptr
03058     1F 13 02 FB | 	rdlong	arg01, local13
0305c     35 00 00 FF 
03060     0C E4 85 F1 | 	sub	objptr, ##27148
03064     10 19 B0 FD | 	call	#_isseparator
03068     FD FA E1 F8 | 	getbyte	result1, result1, #0
0306c     04 38 06 F1 | 	add	local10, #4
03070     1C FB 61 FC | 	wrlong	result1, local10
03074                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03074     14 39 02 F6 | 	mov	local10, local02
03078     03 38 66 F0 | 	shl	local10, #3
0307c     35 00 00 FF 
03080     0C E4 05 F1 | 	add	objptr, ##27148
03084     F2 38 02 F1 | 	add	local10, objptr
03088     04 38 06 F1 | 	add	local10, #4
0308c     1C 3D 02 FB | 	rdlong	local12, local10
03090     01 3C 56 F2 | 	cmps	local12, #1 wc
03094     35 00 00 FF 
03098     0C E4 85 F1 | 	sub	objptr, ##27148
0309c     2C 07 90 3D |  if_ae	jmp	#LR__0183
030a0     14 39 02 F6 | 	mov	local10, local02
030a4     03 38 66 F0 | 	shl	local10, #3
030a8     35 00 00 FF 
030ac     0C E4 05 F1 | 	add	objptr, ##27148
030b0     F2 38 02 F1 | 	add	local10, objptr
030b4     14 3B 02 F6 | 	mov	local11, local02
030b8     1D 41 02 F6 | 	mov	local14, local11
030bc     20 3F 02 F6 | 	mov	local13, local14
030c0     03 3E 66 F0 | 	shl	local13, #3
030c4     F2 3E 02 F1 | 	add	local13, objptr
030c8     1F 13 02 FB | 	rdlong	arg01, local13
030cc     35 00 00 FF 
030d0     0C E4 85 F1 | 	sub	objptr, ##27148
030d4     EC 10 B0 FD | 	call	#_isoperator
030d8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030dc     04 38 06 F1 | 	add	local10, #4
030e0     1C FB 61 FC | 	wrlong	result1, local10
030e4                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030e4     14 39 02 F6 | 	mov	local10, local02
030e8     03 38 66 F0 | 	shl	local10, #3
030ec     35 00 00 FF 
030f0     0C E4 05 F1 | 	add	objptr, ##27148
030f4     F2 38 02 F1 | 	add	local10, objptr
030f8     04 38 06 F1 | 	add	local10, #4
030fc     1C 3D 02 FB | 	rdlong	local12, local10
03100     01 3C 56 F2 | 	cmps	local12, #1 wc
03104     35 00 00 FF 
03108     0C E4 85 F1 | 	sub	objptr, ##27148
0310c     BC 06 90 3D |  if_ae	jmp	#LR__0183
03110     14 39 02 F6 | 	mov	local10, local02
03114     03 38 66 F0 | 	shl	local10, #3
03118     35 00 00 FF 
0311c     0C E4 05 F1 | 	add	objptr, ##27148
03120     F2 38 02 F1 | 	add	local10, objptr
03124     14 3B 02 F6 | 	mov	local11, local02
03128     1D 41 02 F6 | 	mov	local14, local11
0312c     20 3F 02 F6 | 	mov	local13, local14
03130     03 3E 66 F0 | 	shl	local13, #3
03134     F2 3E 02 F1 | 	add	local13, objptr
03138     1F 13 02 FB | 	rdlong	arg01, local13
0313c     35 00 00 FF 
03140     0C E4 85 F1 | 	sub	objptr, ##27148
03144                 | ' 
03144                 | ' select case s
03144     AE 01 00 FF 
03148     48 14 06 F6 | 	mov	arg02, ##@LR__5521
0314c     F0 2D B2 FD | 	call	#__system___string_cmp
03150     00 FA 0D F2 | 	cmp	result1, #0 wz
03154     1B FA 05 A6 |  if_e	mov	result1, #27
03158     00 FA 05 56 |  if_ne	mov	result1, #0
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 38 06 F1 | 	add	local10, #4
03164     1C FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     04 38 06 F1 | 	add	local10, #4
03180     1C 3D 02 FB | 	rdlong	local12, local10
03184     01 3C 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     38 06 90 3D |  if_ae	jmp	#LR__0183
03194     14 39 02 F6 | 	mov	local10, local02
03198     03 38 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 38 02 F1 | 	add	local10, objptr
031a8     14 3B 02 F6 | 	mov	local11, local02
031ac     1D 41 02 F6 | 	mov	local14, local11
031b0     20 3F 02 F6 | 	mov	local13, local14
031b4     03 3E 66 F0 | 	shl	local13, #3
031b8     F2 3E 02 F1 | 	add	local13, objptr
031bc     1F 13 02 FB | 	rdlong	arg01, local13
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     AC 19 B0 FD | 	call	#_iscommand
031cc     FD FA E1 F8 | 	getbyte	result1, result1, #0
031d0     04 38 06 F1 | 	add	local10, #4
031d4     1C FB 61 FC | 	wrlong	result1, local10
031d8                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031d8     14 39 02 F6 | 	mov	local10, local02
031dc     03 38 66 F0 | 	shl	local10, #3
031e0     35 00 00 FF 
031e4     0C E4 05 F1 | 	add	objptr, ##27148
031e8     F2 38 02 F1 | 	add	local10, objptr
031ec     04 38 06 F1 | 	add	local10, #4
031f0     1C 3D 02 FB | 	rdlong	local12, local10
031f4     01 3C 56 F2 | 	cmps	local12, #1 wc
031f8     35 00 00 FF 
031fc     0C E4 85 F1 | 	sub	objptr, ##27148
03200     C8 05 90 3D |  if_ae	jmp	#LR__0183
03204     14 39 02 F6 | 	mov	local10, local02
03208     03 38 66 F0 | 	shl	local10, #3
0320c     35 00 00 FF 
03210     0C E4 05 F1 | 	add	objptr, ##27148
03214     F2 38 02 F1 | 	add	local10, objptr
03218     14 3B 02 F6 | 	mov	local11, local02
0321c     1D 41 02 F6 | 	mov	local14, local11
03220     20 3F 02 F6 | 	mov	local13, local14
03224     03 3E 66 F0 | 	shl	local13, #3
03228     F2 5C 02 F6 | 	mov	local28, objptr
0322c     F2 3E 02 F1 | 	add	local13, objptr
03230     1F 13 02 FB | 	rdlong	arg01, local13
03234     35 00 00 FF 
03238     0C E4 85 F1 | 	sub	objptr, ##27148
0323c     18 2A B0 FD | 	call	#_isfunction
03240     FD FA E1 F8 | 	getbyte	result1, result1, #0
03244     04 38 06 F1 | 	add	local10, #4
03248     1C FB 61 FC | 	wrlong	result1, local10
0324c                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0324c     14 39 02 F6 | 	mov	local10, local02
03250     03 38 66 F0 | 	shl	local10, #3
03254     35 00 00 FF 
03258     0C E4 05 F1 | 	add	objptr, ##27148
0325c     F2 38 02 F1 | 	add	local10, objptr
03260     04 38 06 F1 | 	add	local10, #4
03264     1C 3D 02 FB | 	rdlong	local12, local10
03268     01 3C 56 F2 | 	cmps	local12, #1 wc
0326c     35 00 00 FF 
03270     0C E4 85 F1 | 	sub	objptr, ##27148
03274     54 05 90 3D |  if_ae	jmp	#LR__0183
03278     14 39 02 F6 | 	mov	local10, local02
0327c     03 38 66 F0 | 	shl	local10, #3
03280     35 00 00 FF 
03284     0C E4 05 F1 | 	add	objptr, ##27148
03288     F2 38 02 F1 | 	add	local10, objptr
0328c     14 3B 02 F6 | 	mov	local11, local02
03290     1D 41 02 F6 | 	mov	local14, local11
03294     03 40 66 F0 | 	shl	local14, #3
03298     F2 3E 02 F6 | 	mov	local13, objptr
0329c     F2 40 02 F1 | 	add	local14, objptr
032a0     20 13 02 FB | 	rdlong	arg01, local14
032a4     35 00 00 FF 
032a8     0C E4 85 F1 | 	sub	objptr, ##27148
032ac     5C 13 B0 FD | 	call	#_isnotename
032b0     04 38 06 F1 | 	add	local10, #4
032b4     1C FB 61 FC | 	wrlong	result1, local10
032b8                 | ' lparts(i).token=isnotename(lparts(i).part$) 
032b8                 | ' if lparts(i).token>0 then 
032b8     14 39 02 F6 | 	mov	local10, local02
032bc     03 38 66 F0 | 	shl	local10, #3
032c0     35 00 00 FF 
032c4     0C E4 05 F1 | 	add	objptr, ##27148
032c8     F2 38 02 F1 | 	add	local10, objptr
032cc     04 38 06 F1 | 	add	local10, #4
032d0     1C 31 02 FB | 	rdlong	local06, local10
032d4     01 30 56 F2 | 	cmps	local06, #1 wc
032d8     35 00 00 FF 
032dc     0C E4 85 F1 | 	sub	objptr, ##27148
032e0     8C 00 90 CD |  if_b	jmp	#LR__0173
032e4     14 2F 02 F6 | 	mov	local05, local02
032e8     03 2E 66 F0 | 	shl	local05, #3
032ec     35 00 00 FF 
032f0     0C E4 05 F1 | 	add	objptr, ##27148
032f4     F2 2E 02 F1 | 	add	local05, objptr
032f8     04 2E 06 F1 | 	add	local05, #4
032fc     17 3D 02 FB | 	rdlong	local12, local05
03300     1E 13 02 F6 | 	mov	arg01, local12
03304     35 00 00 FF 
03308     0C E4 85 F1 | 	sub	objptr, ##27148
0330c     30 3A B0 FD | 	call	#_getnoteval
03310     FD 7A 02 F6 | 	mov	local43, result1
03314     14 39 02 F6 | 	mov	local10, local02
03318     03 38 66 F0 | 	shl	local10, #3
0331c     35 00 00 FF 
03320     0C E4 05 F1 | 	add	objptr, ##27148
03324     F2 38 02 F1 | 	add	local10, objptr
03328     3D 13 02 F6 | 	mov	arg01, local43
0332c     35 00 00 FF 
03330     0C E4 85 F1 | 	sub	objptr, ##27148
03334     54 4E B2 FD | 	call	#__system__str_S
03338     1C FB 61 FC | 	wrlong	result1, local10
0333c     14 2D 02 F6 | 	mov	local04, local02
03340     16 2B 02 F6 | 	mov	local03, local04
03344     15 39 02 F6 | 	mov	local10, local03
03348     03 38 66 F0 | 	shl	local10, #3
0334c     35 00 00 FF 
03350     0C E4 05 F1 | 	add	objptr, ##27148
03354     F2 38 02 F1 | 	add	local10, objptr
03358     04 38 06 F1 | 	add	local10, #4
0335c     01 00 80 FF 
03360     1C 05 68 FC | 	wrlong	##514, local10
03364     35 00 00 FF 
03368     0C E4 85 F1 | 	sub	objptr, ##27148
0336c     5C 04 90 FD | 	jmp	#LR__0183
03370                 | LR__0173
03370     14 39 02 F6 | 	mov	local10, local02
03374     03 38 66 F0 | 	shl	local10, #3
03378     35 00 00 FF 
0337c     0C E4 05 F1 | 	add	objptr, ##27148
03380     F2 38 02 F1 | 	add	local10, objptr
03384     14 41 02 F6 | 	mov	local14, local02
03388     03 40 66 F0 | 	shl	local14, #3
0338c     F2 40 02 F1 | 	add	local14, objptr
03390     20 13 02 FB | 	rdlong	arg01, local14
03394     35 00 00 FF 
03398     0C E4 85 F1 | 	sub	objptr, ##27148
0339c     04 11 B0 FD | 	call	#_ischannel
033a0     04 38 06 F1 | 	add	local10, #4
033a4     1C FB 61 FC | 	wrlong	result1, local10
033a8                 | ' 
033a8                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
033a8                 | ' 
033a8                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
033a8     14 39 02 F6 | 	mov	local10, local02
033ac     03 38 66 F0 | 	shl	local10, #3
033b0     35 00 00 FF 
033b4     0C E4 05 F1 | 	add	objptr, ##27148
033b8     F2 38 02 F1 | 	add	local10, objptr
033bc     04 38 06 F1 | 	add	local10, #4
033c0     1C 31 02 FB | 	rdlong	local06, local10
033c4     01 30 56 F2 | 	cmps	local06, #1 wc
033c8     35 00 00 FF 
033cc     0C E4 85 F1 | 	sub	objptr, ##27148
033d0     74 00 90 CD |  if_b	jmp	#LR__0174
033d4     14 39 02 F6 | 	mov	local10, local02
033d8     03 38 66 F0 | 	shl	local10, #3
033dc     35 00 00 FF 
033e0     0C E4 05 F1 | 	add	objptr, ##27148
033e4     F2 38 02 F1 | 	add	local10, objptr
033e8     14 3B 02 F6 | 	mov	local11, local02
033ec     1D 41 02 F6 | 	mov	local14, local11
033f0     03 40 66 F0 | 	shl	local14, #3
033f4     F2 3E 02 F6 | 	mov	local13, objptr
033f8     F2 40 02 F1 | 	add	local14, objptr
033fc     20 13 02 FB | 	rdlong	arg01, local14
03400     01 3C 06 F6 | 	mov	local12, #1
03404     01 14 06 F6 | 	mov	arg02, #1
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     08 4C B2 FD | 	call	#__system__Right_S
03414     1C FB 61 FC | 	wrlong	result1, local10
03418     14 2D 02 F6 | 	mov	local04, local02
0341c     16 2B 02 F6 | 	mov	local03, local04
03420     15 39 02 F6 | 	mov	local10, local03
03424     03 38 66 F0 | 	shl	local10, #3
03428     35 00 00 FF 
0342c     0C E4 05 F1 | 	add	objptr, ##27148
03430     F2 38 02 F1 | 	add	local10, objptr
03434     04 38 06 F1 | 	add	local10, #4
03438     1C 59 68 FC | 	wrlong	#44, local10
0343c     35 00 00 FF 
03440     0C E4 85 F1 | 	sub	objptr, ##27148
03444     84 03 90 FD | 	jmp	#LR__0183
03448                 | LR__0174
03448     14 39 02 F6 | 	mov	local10, local02
0344c     03 38 66 F0 | 	shl	local10, #3
03450     35 00 00 FF 
03454     0C E4 05 F1 | 	add	objptr, ##27148
03458     F2 38 02 F1 | 	add	local10, objptr
0345c     14 3B 02 F6 | 	mov	local11, local02
03460     1D 41 02 F6 | 	mov	local14, local11
03464     03 40 66 F0 | 	shl	local14, #3
03468     F2 3E 02 F6 | 	mov	local13, objptr
0346c     F2 40 02 F1 | 	add	local14, objptr
03470     20 13 02 FB | 	rdlong	arg01, local14
03474     35 00 00 FF 
03478     0C E4 85 F1 | 	sub	objptr, ##27148
0347c     0C 11 B0 FD | 	call	#_isconstant
03480     04 38 06 F1 | 	add	local10, #4
03484     1C FB 61 FC | 	wrlong	result1, local10
03488                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
03488     14 39 02 F6 | 	mov	local10, local02
0348c     03 38 66 F0 | 	shl	local10, #3
03490     35 00 00 FF 
03494     0C E4 05 F1 | 	add	objptr, ##27148
03498     F2 38 02 F1 | 	add	local10, objptr
0349c     04 38 06 F1 | 	add	local10, #4
034a0     1C 3D 02 FB | 	rdlong	local12, local10
034a4     01 3C 56 F2 | 	cmps	local12, #1 wc
034a8     35 00 00 FF 
034ac     0C E4 85 F1 | 	sub	objptr, ##27148
034b0     94 00 90 CD |  if_b	jmp	#LR__0175
034b4     14 39 02 F6 | 	mov	local10, local02
034b8     03 38 66 F0 | 	shl	local10, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 38 02 F1 | 	add	local10, objptr
034c8     14 3D 02 F6 | 	mov	local12, local02
034cc     1E 3B 02 F6 | 	mov	local11, local12
034d0     1D 41 02 F6 | 	mov	local14, local11
034d4     03 40 66 F0 | 	shl	local14, #3
034d8     F2 3E 02 F6 | 	mov	local13, objptr
034dc     F2 40 02 F1 | 	add	local14, objptr
034e0     04 40 06 F1 | 	add	local14, #4
034e4     20 13 02 FB | 	rdlong	arg01, local14
034e8     04 40 86 F1 | 	sub	local14, #4
034ec     35 00 00 FF 
034f0     0C E4 85 F1 | 	sub	objptr, ##27148
034f4     09 13 52 F6 | 	abs	arg01, arg01 wc
034f8     1F 7C C6 C9 |  if_b	decod	local44, #31
034fc     00 7C 06 36 |  if_ae	mov	local44, #0
03500     88 54 B2 FD | 	call	#__system___float_fromuns
03504     3E FB 61 F5 | 	xor	result1, local44
03508     FD 12 02 F6 | 	mov	arg01, result1
0350c     7C 4C B2 FD | 	call	#__system__str_S
03510     1C FB 61 FC | 	wrlong	result1, local10
03514     14 2D 02 F6 | 	mov	local04, local02
03518     16 2B 02 F6 | 	mov	local03, local04
0351c     15 39 02 F6 | 	mov	local10, local03
03520     03 38 66 F0 | 	shl	local10, #3
03524     35 00 00 FF 
03528     0C E4 05 F1 | 	add	objptr, ##27148
0352c     F2 38 02 F1 | 	add	local10, objptr
03530     04 38 06 F1 | 	add	local10, #4
03534     01 00 80 FF 
03538     1C 03 68 FC | 	wrlong	##513, local10
0353c     35 00 00 FF 
03540     0C E4 85 F1 | 	sub	objptr, ##27148
03544     84 02 90 FD | 	jmp	#LR__0183
03548                 | LR__0175
03548     14 2F 02 F6 | 	mov	local05, local02
0354c     03 2E 66 F0 | 	shl	local05, #3
03550     35 00 00 FF 
03554     0C E4 05 F1 | 	add	objptr, ##27148
03558     F2 2E 02 F1 | 	add	local05, objptr
0355c     17 13 02 FB | 	rdlong	arg01, local05
03560     35 00 00 FF 
03564     0C E4 85 F1 | 	sub	objptr, ##27148
03568     20 30 B0 FD | 	call	#_isnum
0356c     FD 7E 02 F6 | 	mov	local45, result1
03570     14 2F 02 F6 | 	mov	local05, local02
03574     03 2E 66 F0 | 	shl	local05, #3
03578     35 00 00 FF 
0357c     0C E4 05 F1 | 	add	objptr, ##27148
03580     F2 2E 02 F1 | 	add	local05, objptr
03584     17 13 02 FB | 	rdlong	arg01, local05
03588     35 00 00 FF 
0358c     0C E4 85 F1 | 	sub	objptr, ##27148
03590     E4 33 B0 FD | 	call	#_isint
03594     FD 80 02 F6 | 	mov	local46, result1
03598     14 2F 02 F6 | 	mov	local05, local02
0359c     03 2E 66 F0 | 	shl	local05, #3
035a0     35 00 00 FF 
035a4     0C E4 05 F1 | 	add	objptr, ##27148
035a8     F2 2E 02 F1 | 	add	local05, objptr
035ac     17 13 02 FB | 	rdlong	arg01, local05
035b0     35 00 00 FF 
035b4     0C E4 85 F1 | 	sub	objptr, ##27148
035b8     60 36 B0 FD | 	call	#_isdec
035bc     FD 82 02 F6 | 	mov	local47, result1
035c0                 | ' 
035c0                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
035c0                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
035c0     00 7E 0E F2 | 	cmp	local45, #0 wz
035c4     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
035c8     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
035cc     34 00 90 AD |  if_e	jmp	#LR__0176
035d0     14 2D 02 F6 | 	mov	local04, local02
035d4     16 2B 02 F6 | 	mov	local03, local04
035d8     15 39 02 F6 | 	mov	local10, local03
035dc     03 38 66 F0 | 	shl	local10, #3
035e0     35 00 00 FF 
035e4     0C E4 05 F1 | 	add	objptr, ##27148
035e8     F2 38 02 F1 | 	add	local10, objptr
035ec     04 38 06 F1 | 	add	local10, #4
035f0     01 00 80 FF 
035f4     1C 01 68 FC | 	wrlong	##512, local10
035f8     35 00 00 FF 
035fc     0C E4 85 F1 | 	sub	objptr, ##27148
03600     C8 01 90 FD | 	jmp	#LR__0183
03604                 | LR__0176
03604                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03604     00 7E 0E F2 | 	cmp	local45, #0 wz
03608     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
0360c     41 2D 22 56 |  if_ne	not	local04, local47
03610     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03614     34 00 90 AD |  if_e	jmp	#LR__0177
03618     14 2D 02 F6 | 	mov	local04, local02
0361c     16 2B 02 F6 | 	mov	local03, local04
03620     15 39 02 F6 | 	mov	local10, local03
03624     03 38 66 F0 | 	shl	local10, #3
03628     35 00 00 FF 
0362c     0C E4 05 F1 | 	add	objptr, ##27148
03630     F2 38 02 F1 | 	add	local10, objptr
03634     04 38 06 F1 | 	add	local10, #4
03638     01 00 80 FF 
0363c     1C 03 68 FC | 	wrlong	##513, local10
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     80 01 90 FD | 	jmp	#LR__0183
0364c                 | LR__0177
0364c                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
0364c     00 7E 0E F2 | 	cmp	local45, #0 wz
03650     40 2D 22 56 |  if_ne	not	local04, local46
03654     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03658     41 2B 22 56 |  if_ne	not	local03, local47
0365c     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
03660     34 00 90 AD |  if_e	jmp	#LR__0178
03664     14 2D 02 F6 | 	mov	local04, local02
03668     16 2B 02 F6 | 	mov	local03, local04
0366c     15 39 02 F6 | 	mov	local10, local03
03670     03 38 66 F0 | 	shl	local10, #3
03674     35 00 00 FF 
03678     0C E4 05 F1 | 	add	objptr, ##27148
0367c     F2 38 02 F1 | 	add	local10, objptr
03680     04 38 06 F1 | 	add	local10, #4
03684     01 00 80 FF 
03688     1C 05 68 FC | 	wrlong	##514, local10
0368c     35 00 00 FF 
03690     0C E4 85 F1 | 	sub	objptr, ##27148
03694     34 01 90 FD | 	jmp	#LR__0183
03698                 | LR__0178
03698                 | ' 
03698                 | ' if isstring(lparts(i).part$) then 
03698     14 2F 02 F6 | 	mov	local05, local02
0369c     03 2E 66 F0 | 	shl	local05, #3
036a0     35 00 00 FF 
036a4     0C E4 05 F1 | 	add	objptr, ##27148
036a8     F2 2E 02 F1 | 	add	local05, objptr
036ac     17 13 02 FB | 	rdlong	arg01, local05
036b0     35 00 00 FF 
036b4     0C E4 85 F1 | 	sub	objptr, ##27148
036b8     20 36 B0 FD | 	call	#_isstring
036bc     00 FA 0D F2 | 	cmp	result1, #0 wz
036c0     A8 00 90 AD |  if_e	jmp	#LR__0181
036c4     14 39 02 F6 | 	mov	local10, local02
036c8     03 38 66 F0 | 	shl	local10, #3
036cc     35 00 00 FF 
036d0     0C E4 05 F1 | 	add	objptr, ##27148
036d4     F2 38 02 F1 | 	add	local10, objptr
036d8     04 38 06 F1 | 	add	local10, #4
036dc     01 00 80 FF 
036e0     1C 07 68 FC | 	wrlong	##515, local10
036e4     14 2D 02 F6 | 	mov	local04, local02
036e8     16 2B 02 F6 | 	mov	local03, local04
036ec     15 39 02 F6 | 	mov	local10, local03
036f0     03 38 66 F0 | 	shl	local10, #3
036f4     F2 38 02 F1 | 	add	local10, objptr
036f8     14 41 02 F6 | 	mov	local14, local02
036fc     03 40 66 F0 | 	shl	local14, #3
03700     F2 40 02 F1 | 	add	local14, objptr
03704     20 31 02 FB | 	rdlong	local06, local14
03708     02 3C 06 F6 | 	mov	local12, #2
0370c     14 51 02 F6 | 	mov	local22, local02
03710     28 53 02 F6 | 	mov	local23, local22
03714     03 52 66 F0 | 	shl	local23, #3
03718     F2 54 02 F6 | 	mov	local24, objptr
0371c     F2 52 02 F1 | 	add	local23, objptr
03720     29 13 02 FB | 	rdlong	arg01, local23
03724     35 00 00 FF 
03728     0C E4 85 F1 | 	sub	objptr, ##27148
0372c     09 33 02 F6 | 	mov	local07, arg01
03730     97 06 48 FB | 	callpa	#(@LR__0180-@LR__0179)>>2,fcache_load_ptr_
03734                 | LR__0179
03734     19 FB C9 FA | 	rdbyte	result1, local07 wz
03738     01 32 06 51 |  if_ne	add	local07, #1
0373c     F4 FF 9F 5D |  if_ne	jmp	#LR__0179
03740                 | LR__0180
03740     09 33 82 F1 | 	sub	local07, arg01
03744     19 3F 02 F6 | 	mov	local13, local07
03748     1F 41 02 F6 | 	mov	local14, local13
0374c     02 40 86 F1 | 	sub	local14, #2
03750     20 3B 02 F6 | 	mov	local11, local14
03754     18 13 02 F6 | 	mov	arg01, local06
03758     1E 15 02 F6 | 	mov	arg02, local12
0375c     1D 17 02 F6 | 	mov	arg03, local11
03760     48 49 B2 FD | 	call	#__system__Mid_S
03764     1C FB 61 FC | 	wrlong	result1, local10
03768     60 00 90 FD | 	jmp	#LR__0183
0376c                 | LR__0181
0376c                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
0376c     14 2B 02 F6 | 	mov	local03, local02
03770     15 2F 02 F6 | 	mov	local05, local03
03774     03 2E 66 F0 | 	shl	local05, #3
03778     35 00 00 FF 
0377c     0C E4 05 F1 | 	add	objptr, ##27148
03780     F2 2E 02 F1 | 	add	local05, objptr
03784     17 13 02 FB | 	rdlong	arg01, local05
03788     35 00 00 FF 
0378c     0C E4 85 F1 | 	sub	objptr, ##27148
03790     84 2B B0 FD | 	call	#_isname
03794     FD 2C 0A F6 | 	mov	local04, result1 wz
03798     30 00 90 AD |  if_e	jmp	#LR__0182
0379c     14 2D 02 F6 | 	mov	local04, local02
037a0     16 2B 02 F6 | 	mov	local03, local04
037a4     15 39 02 F6 | 	mov	local10, local03
037a8     03 38 66 F0 | 	shl	local10, #3
037ac     35 00 00 FF 
037b0     0C E4 05 F1 | 	add	objptr, ##27148
037b4     F2 38 02 F1 | 	add	local10, objptr
037b8     04 38 06 F1 | 	add	local10, #4
037bc     01 00 80 FF 
037c0     1C 09 68 FC | 	wrlong	##516, local10
037c4     35 00 00 FF 
037c8     0C E4 85 F1 | 	sub	objptr, ##27148
037cc                 | LR__0182
037cc                 | LR__0183
037cc     01 28 06 F1 | 	add	local02, #1
037d0     54 F8 9F FD | 	jmp	#LR__0172
037d4                 | LR__0184
037d4     23 39 02 F6 | 	mov	local10, local17
037d8     03 38 66 F0 | 	shl	local10, #3
037dc     35 00 00 FF 
037e0     0C E4 05 F1 | 	add	objptr, ##27148
037e4     F2 38 02 F1 | 	add	local10, objptr
037e8     04 38 06 F1 | 	add	local10, #4
037ec     1C FD 6B FC | 	wrlong	#510, local10
037f0     23 39 02 F6 | 	mov	local10, local17
037f4     03 38 66 F0 | 	shl	local10, #3
037f8     F2 38 02 F1 | 	add	local10, objptr
037fc     AD 01 00 FF 
03800     57 31 06 F6 | 	mov	local06, ##@LR__5437
03804     1C 31 62 FC | 	wrlong	local06, local10
03808     10 00 00 FF 
0380c     54 E4 05 F1 | 	add	objptr, ##8276
03810     F2 46 62 FC | 	wrlong	local17, objptr
03814     45 00 00 FF 
03818     60 E4 85 F1 | 	sub	objptr, ##35424
0381c                 | ' 
0381c                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
0381c                 | ' 
0381c                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
0381c                 | '  
0381c                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
0381c     AD 01 00 FF 
03820     58 15 06 F6 | 	mov	arg02, ##@LR__5438
03824     3B 13 02 F6 | 	mov	arg01, local41
03828     14 27 B2 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     F0 00 90 AD |  if_e	jmp	#LR__0185
03834     AD 01 00 FF 
03838     5D 15 06 F6 | 	mov	arg02, ##@LR__5439
0383c     3B 13 02 F6 | 	mov	arg01, local41
03840     FC 26 B2 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     D8 00 90 AD |  if_e	jmp	#LR__0185
0384c     AD 01 00 FF 
03850     62 31 06 F6 | 	mov	local06, ##@LR__5440
03854     3B 13 02 F6 | 	mov	arg01, local41
03858     18 15 02 F6 | 	mov	arg02, local06
0385c     E0 26 B2 FD | 	call	#__system___string_cmp
03860     00 FA 0D F2 | 	cmp	result1, #0 wz
03864     BC 00 90 AD |  if_e	jmp	#LR__0185
03868     AD 01 00 FF 
0386c     67 3D 06 F6 | 	mov	local12, ##@LR__5441
03870     1E 31 02 F6 | 	mov	local06, local12
03874     3B 13 02 F6 | 	mov	arg01, local41
03878     18 15 02 F6 | 	mov	arg02, local06
0387c     C0 26 B2 FD | 	call	#__system___string_cmp
03880     00 FA 0D F2 | 	cmp	result1, #0 wz
03884     9C 00 90 AD |  if_e	jmp	#LR__0185
03888     AD 01 00 FF 
0388c     6B 3B 06 F6 | 	mov	local11, ##@LR__5442
03890     1D 3D 02 F6 | 	mov	local12, local11
03894     3B 13 02 F6 | 	mov	arg01, local41
03898     1E 15 02 F6 | 	mov	arg02, local12
0389c     A0 26 B2 FD | 	call	#__system___string_cmp
038a0     FD 30 0A F6 | 	mov	local06, result1 wz
038a4     7C 00 90 AD |  if_e	jmp	#LR__0185
038a8     AD 01 00 FF 
038ac     6F 41 06 F6 | 	mov	local14, ##@LR__5443
038b0     20 3B 02 F6 | 	mov	local11, local14
038b4     3B 13 02 F6 | 	mov	arg01, local41
038b8     1D 15 02 F6 | 	mov	arg02, local11
038bc     80 26 B2 FD | 	call	#__system___string_cmp
038c0     FD 3C 0A F6 | 	mov	local12, result1 wz
038c4     5C 00 90 AD |  if_e	jmp	#LR__0185
038c8     AD 01 00 FF 
038cc     72 3F 06 F6 | 	mov	local13, ##@LR__5444
038d0     1F 41 02 F6 | 	mov	local14, local13
038d4     3B 13 02 F6 | 	mov	arg01, local41
038d8     20 15 02 F6 | 	mov	arg02, local14
038dc     60 26 B2 FD | 	call	#__system___string_cmp
038e0     FD 3A 0A F6 | 	mov	local11, result1 wz
038e4     3C 00 90 AD |  if_e	jmp	#LR__0185
038e8     AD 01 00 FF 
038ec     76 3F 06 F6 | 	mov	local13, ##@LR__5445
038f0     3B 13 02 F6 | 	mov	arg01, local41
038f4     1F 15 02 F6 | 	mov	arg02, local13
038f8     44 26 B2 FD | 	call	#__system___string_cmp
038fc     FD 40 0A F6 | 	mov	local14, result1 wz
03900     20 00 90 AD |  if_e	jmp	#LR__0185
03904     AD 01 00 FF 
03908     7C 51 06 F6 | 	mov	local22, ##@LR__5446
0390c     28 5D 02 F6 | 	mov	local28, local22
03910     3B 13 02 F6 | 	mov	arg01, local41
03914     2E 15 02 F6 | 	mov	arg02, local28
03918     24 26 B2 FD | 	call	#__system___string_cmp
0391c     FD 3E 0A F6 | 	mov	local13, result1 wz
03920     7C 00 90 5D |  if_ne	jmp	#LR__0186
03924                 | LR__0185
03924     37 5D 02 F6 | 	mov	local28, local37
03928     01 5C 06 F1 | 	add	local28, #1
0392c     2E 51 02 F6 | 	mov	local22, local28
03930     28 53 02 F6 | 	mov	local23, local22
03934     03 52 66 F0 | 	shl	local23, #3
03938     35 00 00 FF 
0393c     0C E4 05 F1 | 	add	objptr, ##27148
03940     F2 54 02 F6 | 	mov	local24, objptr
03944     F2 52 02 F1 | 	add	local23, objptr
03948     04 52 06 F1 | 	add	local23, #4
0394c     29 61 02 FB | 	rdlong	local30, local23
03950     04 52 86 F1 | 	sub	local23, #4
03954     30 5F 02 F6 | 	mov	local29, local30
03958     01 00 00 FF 
0395c     04 5E 0E F2 | 	cmp	local29, ##516 wz
03960     35 00 00 FF 
03964     0C E4 85 F1 | 	sub	objptr, ##27148
03968     34 00 90 5D |  if_ne	jmp	#LR__0186
0396c     37 39 02 F6 | 	mov	local10, local37
03970     01 38 06 F1 | 	add	local10, #1
03974     03 38 66 F0 | 	shl	local10, #3
03978     35 00 00 FF 
0397c     0C E4 05 F1 | 	add	objptr, ##27148
03980     F2 38 02 F1 | 	add	local10, objptr
03984     01 00 00 FF 
03988     03 30 06 F6 | 	mov	local06, ##515
0398c     04 38 06 F1 | 	add	local10, #4
03990     01 00 80 FF 
03994     1C 07 68 FC | 	wrlong	##515, local10
03998     35 00 00 FF 
0399c     0C E4 85 F1 | 	sub	objptr, ##27148
039a0                 | LR__0186
039a0                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
039a0     AD 01 00 FF 
039a4     7F 15 06 F6 | 	mov	arg02, ##@LR__5447
039a8     3B 13 02 F6 | 	mov	arg01, local41
039ac     90 25 B2 FD | 	call	#__system___string_cmp
039b0     00 FA 0D F2 | 	cmp	result1, #0 wz
039b4     1C 00 90 AD |  if_e	jmp	#LR__0187
039b8     AD 01 00 FF 
039bc     86 2F 06 F6 | 	mov	local05, ##@LR__5448
039c0     3B 13 02 F6 | 	mov	arg01, local41
039c4     17 15 02 F6 | 	mov	arg02, local05
039c8     74 25 B2 FD | 	call	#__system___string_cmp
039cc     00 FA 0D F2 | 	cmp	result1, #0 wz
039d0     7C 00 90 5D |  if_ne	jmp	#LR__0188
039d4                 | LR__0187
039d4     37 2F 02 F6 | 	mov	local05, local37
039d8     01 2E 06 F1 | 	add	local05, #1
039dc     17 31 02 F6 | 	mov	local06, local05
039e0     03 30 66 F0 | 	shl	local06, #3
039e4     35 00 00 FF 
039e8     0C E4 05 F1 | 	add	objptr, ##27148
039ec     F2 3C 02 F6 | 	mov	local12, objptr
039f0     F2 30 02 F1 | 	add	local06, objptr
039f4     04 30 06 F1 | 	add	local06, #4
039f8     18 41 02 FB | 	rdlong	local14, local06
039fc     04 30 86 F1 | 	sub	local06, #4
03a00     20 3B 02 F6 | 	mov	local11, local14
03a04     01 00 00 FF 
03a08     04 3A 0E F2 | 	cmp	local11, ##516 wz
03a0c     35 00 00 FF 
03a10     0C E4 85 F1 | 	sub	objptr, ##27148
03a14     38 00 90 5D |  if_ne	jmp	#LR__0188
03a18     37 39 02 F6 | 	mov	local10, local37
03a1c     01 38 06 F1 | 	add	local10, #1
03a20     03 38 66 F0 | 	shl	local10, #3
03a24     35 00 00 FF 
03a28     0C E4 05 F1 | 	add	objptr, ##27148
03a2c     F2 2E 02 F6 | 	mov	local05, objptr
03a30     F2 38 02 F1 | 	add	local10, objptr
03a34     01 00 00 FF 
03a38     03 30 06 F6 | 	mov	local06, ##515
03a3c     04 38 06 F1 | 	add	local10, #4
03a40     01 00 80 FF 
03a44     1C 07 68 FC | 	wrlong	##515, local10
03a48     35 00 00 FF 
03a4c     0C E4 85 F1 | 	sub	objptr, ##27148
03a50                 | LR__0188
03a50                 | ' 
03a50                 | ' ' cd needs special treatment..
03a50                 | ' 
03a50                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03a50     AD 01 00 FF 
03a54     8C 15 06 F6 | 	mov	arg02, ##@LR__5449
03a58     3B 13 02 F6 | 	mov	arg01, local41
03a5c     E0 24 B2 FD | 	call	#__system___string_cmp
03a60     00 FA 0D F2 | 	cmp	result1, #0 wz
03a64     38 00 90 5D |  if_ne	jmp	#LR__0189
03a68     37 39 02 F6 | 	mov	local10, local37
03a6c     01 38 06 F1 | 	add	local10, #1
03a70     03 38 66 F0 | 	shl	local10, #3
03a74     35 00 00 FF 
03a78     0C E4 05 F1 | 	add	objptr, ##27148
03a7c     F2 2E 02 F6 | 	mov	local05, objptr
03a80     F2 38 02 F1 | 	add	local10, objptr
03a84     01 00 00 FF 
03a88     03 30 06 F6 | 	mov	local06, ##515
03a8c     04 38 06 F1 | 	add	local10, #4
03a90     01 00 80 FF 
03a94     1C 07 68 FC | 	wrlong	##515, local10
03a98     35 00 00 FF 
03a9c     0C E4 85 F1 | 	sub	objptr, ##27148
03aa0                 | LR__0189
03aa0                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03aa0     AD 01 00 FF 
03aa4     8F 15 06 F6 | 	mov	arg02, ##@LR__5450
03aa8     3B 13 02 F6 | 	mov	arg01, local41
03aac     90 24 B2 FD | 	call	#__system___string_cmp
03ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab4     A4 00 90 5D |  if_ne	jmp	#LR__0190
03ab8     37 31 02 F6 | 	mov	local06, local37
03abc     01 30 06 F1 | 	add	local06, #1
03ac0     03 30 66 F0 | 	shl	local06, #3
03ac4     35 00 00 FF 
03ac8     0C E4 05 F1 | 	add	objptr, ##27148
03acc     F2 3C 02 F6 | 	mov	local12, objptr
03ad0     F2 30 02 F1 | 	add	local06, objptr
03ad4     18 13 02 FB | 	rdlong	arg01, local06
03ad8     AD 01 00 FF 
03adc     93 2F 06 F6 | 	mov	local05, ##@LR__5451
03ae0     17 15 02 F6 | 	mov	arg02, local05
03ae4     35 00 00 FF 
03ae8     0C E4 85 F1 | 	sub	objptr, ##27148
03aec     50 24 B2 FD | 	call	#__system___string_cmp
03af0     00 FA 0D F2 | 	cmp	result1, #0 wz
03af4     64 00 90 5D |  if_ne	jmp	#LR__0190
03af8     37 39 02 F6 | 	mov	local10, local37
03afc     01 38 06 F1 | 	add	local10, #1
03b00     03 38 66 F0 | 	shl	local10, #3
03b04     35 00 00 FF 
03b08     0C E4 05 F1 | 	add	objptr, ##27148
03b0c     F2 38 02 F1 | 	add	local10, objptr
03b10     04 38 06 F1 | 	add	local10, #4
03b14     01 00 80 FF 
03b18     1C 07 68 FC | 	wrlong	##515, local10
03b1c     37 39 02 F6 | 	mov	local10, local37
03b20     01 38 06 F1 | 	add	local10, #1
03b24     03 38 66 F0 | 	shl	local10, #3
03b28     F2 38 02 F1 | 	add	local10, objptr
03b2c     AD 01 00 FF 
03b30     95 31 06 F6 | 	mov	local06, ##@LR__5452
03b34     1C 31 62 FC | 	wrlong	local06, local10
03b38     37 39 02 F6 | 	mov	local10, local37
03b3c     03 38 66 F0 | 	shl	local10, #3
03b40     F2 2E 02 F6 | 	mov	local05, objptr
03b44     F2 38 02 F1 | 	add	local10, objptr
03b48     C3 30 06 F6 | 	mov	local06, #195
03b4c     04 38 06 F1 | 	add	local10, #4
03b50     1C 87 69 FC | 	wrlong	#195, local10
03b54     35 00 00 FF 
03b58     0C E4 85 F1 | 	sub	objptr, ##27148
03b5c                 | LR__0190
03b5c                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03b5c     AD 01 00 FF 
03b60     98 39 06 F6 | 	mov	local10, ##@LR__5453
03b64     3B 13 02 F6 | 	mov	arg01, local41
03b68     1C 15 02 F6 | 	mov	arg02, local10
03b6c     D0 23 B2 FD | 	call	#__system___string_cmp
03b70     00 FA 0D F2 | 	cmp	result1, #0 wz
03b74     04 01 90 5D |  if_ne	jmp	#LR__0193
03b78     37 31 02 F6 | 	mov	local06, local37
03b7c     01 30 06 F1 | 	add	local06, #1
03b80     03 30 66 F0 | 	shl	local06, #3
03b84     35 00 00 FF 
03b88     0C E4 05 F1 | 	add	objptr, ##27148
03b8c     F2 3C 02 F6 | 	mov	local12, objptr
03b90     F2 30 02 F1 | 	add	local06, objptr
03b94     18 13 02 FB | 	rdlong	arg01, local06
03b98     AD 01 00 FF 
03b9c     9B 2F 06 F6 | 	mov	local05, ##@LR__5454
03ba0     17 39 02 F6 | 	mov	local10, local05
03ba4     1C 15 02 F6 | 	mov	arg02, local10
03ba8     35 00 00 FF 
03bac     0C E4 85 F1 | 	sub	objptr, ##27148
03bb0     8C 23 B2 FD | 	call	#__system___string_cmp
03bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bb8     C0 00 90 5D |  if_ne	jmp	#LR__0193
03bbc     37 39 02 F6 | 	mov	local10, local37
03bc0     01 38 06 F1 | 	add	local10, #1
03bc4     03 38 66 F0 | 	shl	local10, #3
03bc8     35 00 00 FF 
03bcc     0C E4 05 F1 | 	add	objptr, ##27148
03bd0     F2 2E 02 F6 | 	mov	local05, objptr
03bd4     F2 38 02 F1 | 	add	local10, objptr
03bd8     01 00 00 FF 
03bdc     03 30 06 F6 | 	mov	local06, ##515
03be0     04 38 06 F1 | 	add	local10, #4
03be4     01 00 80 FF 
03be8     1C 07 68 FC | 	wrlong	##515, local10
03bec     04 38 86 F1 | 	sub	local10, #4
03bf0     37 29 02 F6 | 	mov	local02, local37
03bf4     02 28 06 F1 | 	add	local02, #2
03bf8     23 85 02 F6 | 	mov	local48, local17
03bfc     01 84 06 F1 | 	add	local48, #1
03c00     35 00 00 FF 
03c04     0C E4 85 F1 | 	sub	objptr, ##27148
03c08                 | LR__0191
03c08     42 29 52 F2 | 	cmps	local02, local48 wc
03c0c     6C 00 90 3D |  if_ae	jmp	#LR__0192
03c10     14 39 02 F6 | 	mov	local10, local02
03c14     03 38 66 F0 | 	shl	local10, #3
03c18     35 00 00 FF 
03c1c     0C E4 05 F1 | 	add	objptr, ##27148
03c20     F2 38 02 F1 | 	add	local10, objptr
03c24     1C 87 02 FB | 	rdlong	local49, local10
03c28     37 39 02 F6 | 	mov	local10, local37
03c2c     01 38 06 F1 | 	add	local10, #1
03c30     03 38 66 F0 | 	shl	local10, #3
03c34     F2 2E 02 F6 | 	mov	local05, objptr
03c38     F2 38 02 F1 | 	add	local10, objptr
03c3c     37 3B 02 F6 | 	mov	local11, local37
03c40     01 3A 06 F1 | 	add	local11, #1
03c44     1D 41 02 F6 | 	mov	local14, local11
03c48     03 40 66 F0 | 	shl	local14, #3
03c4c     F2 3E 02 F6 | 	mov	local13, objptr
03c50     F2 40 02 F1 | 	add	local14, objptr
03c54     20 13 02 FB | 	rdlong	arg01, local14
03c58     43 3D 02 F6 | 	mov	local12, local49
03c5c     1E 15 02 F6 | 	mov	arg02, local12
03c60     35 00 00 FF 
03c64     0C E4 85 F1 | 	sub	objptr, ##27148
03c68     08 23 B2 FD | 	call	#__system___string_concat
03c6c     FD 30 02 F6 | 	mov	local06, result1
03c70     1C 31 62 FC | 	wrlong	local06, local10
03c74     01 28 06 F1 | 	add	local02, #1
03c78     8C FF 9F FD | 	jmp	#LR__0191
03c7c                 | LR__0192
03c7c                 | LR__0193
03c7c                 | ' 
03c7c                 | ' ' determine a type of the line and compile it
03c7c                 | ' 
03c7c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03c7c     35 00 00 FF 
03c80     0C E4 05 F1 | 	add	objptr, ##27148
03c84     F2 12 02 FB | 	rdlong	arg01, objptr
03c88     35 00 00 FF 
03c8c     0C E4 85 F1 | 	sub	objptr, ##27148
03c90     88 2F B0 FD | 	call	#_isdec
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     30 00 90 AD |  if_e	jmp	#LR__0194
03c9c     35 00 00 FF 
03ca0     0C E4 05 F1 | 	add	objptr, ##27148
03ca4     F2 12 02 FB | 	rdlong	arg01, objptr
03ca8     35 00 00 FF 
03cac     0C E4 85 F1 | 	sub	objptr, ##27148
03cb0     00 14 06 F6 | 	mov	arg02, #0
03cb4     50 57 B2 FD | 	call	#__system____builtin_atoi
03cb8     52 00 00 FF 
03cbc     B0 E4 05 F1 | 	add	objptr, ##42160
03cc0     F2 FA 61 FC | 	wrlong	result1, objptr
03cc4     52 00 00 FF 
03cc8     B0 E4 85 F1 | 	sub	objptr, ##42160
03ccc                 | LR__0194
03ccc                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03ccc     52 00 00 FF 
03cd0     B0 E4 05 F1 | 	add	objptr, ##42160
03cd4     F2 2C 02 FB | 	rdlong	local04, objptr
03cd8     52 00 00 FF 
03cdc     B0 E4 85 F1 | 	sub	objptr, ##42160
03ce0     01 2C 16 F2 | 	cmp	local04, #1 wc
03ce4     40 00 90 CD |  if_b	jmp	#LR__0195
03ce8     01 46 0E F2 | 	cmp	local17, #1 wz
03cec     37 00 00 AF 
03cf0     24 E4 05 A1 |  if_e	add	objptr, ##28196
03cf4     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03cf8     37 00 00 AF 
03cfc     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03d00     17 39 02 A6 |  if_e	mov	local10, local05
03d04     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03d08     1C 00 90 5D |  if_ne	jmp	#LR__0195
03d0c     52 00 00 FF 
03d10     B0 E4 05 F1 | 	add	objptr, ##42160
03d14     F2 12 02 FB | 	rdlong	arg01, objptr
03d18     52 00 00 FF 
03d1c     B0 E4 85 F1 | 	sub	objptr, ##42160
03d20     A4 30 B0 FD | 	call	#_deleteline
03d24     C8 03 90 FD | 	jmp	#LR__0206
03d28                 | LR__0195
03d28                 | ' 
03d28                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03d28     37 00 00 FF 
03d2c     24 E4 05 F1 | 	add	objptr, ##28196
03d30     F2 2C 0A FB | 	rdlong	local04, objptr wz
03d34     37 00 00 FF 
03d38     24 E4 85 F1 | 	sub	objptr, ##28196
03d3c     20 00 90 AD |  if_e	jmp	#LR__0196
03d40     37 00 00 FF 
03d44     24 E4 05 F1 | 	add	objptr, ##28196
03d48     F2 2E 02 FB | 	rdlong	local05, objptr
03d4c     37 00 00 FF 
03d50     24 E4 85 F1 | 	sub	objptr, ##28196
03d54     17 39 02 F6 | 	mov	local10, local05
03d58     03 38 0E F2 | 	cmp	local10, #3 wz
03d5c     C0 00 90 5D |  if_ne	jmp	#LR__0198
03d60                 | LR__0196
03d60     35 00 00 FF 
03d64     20 E4 05 F1 | 	add	objptr, ##27168
03d68     F2 3C 02 FB | 	rdlong	local12, objptr
03d6c     35 00 00 FF 
03d70     20 E4 85 F1 | 	sub	objptr, ##27168
03d74     1B 3C 0E F2 | 	cmp	local12, #27 wz
03d78     A4 00 90 AD |  if_e	jmp	#LR__0198
03d7c     52 00 00 FF 
03d80     B0 E4 05 F1 | 	add	objptr, ##42160
03d84     F2 12 02 FB | 	rdlong	arg01, objptr
03d88     1B 00 00 FF 
03d8c     8C E4 85 F1 | 	sub	objptr, ##13964
03d90     F2 16 02 FB | 	rdlong	arg03, objptr
03d94     37 00 00 FF 
03d98     24 E4 85 F1 | 	sub	objptr, ##28196
03d9c     00 14 06 F6 | 	mov	arg02, #0
03da0     5C 44 B0 FD | 	call	#_compile
03da4     FD 26 0A F6 | 	mov	local01, result1 wz
03da8                 | '   err=compile(linenum,0,cont) 
03da8                 | '   if err<>0 then printerror(err,linenum): goto 101
03da8     20 00 90 AD |  if_e	jmp	#LR__0197
03dac     52 00 00 FF 
03db0     B0 E4 05 F1 | 	add	objptr, ##42160
03db4     F2 14 02 FB | 	rdlong	arg02, objptr
03db8     52 00 00 FF 
03dbc     B0 E4 85 F1 | 	sub	objptr, ##42160
03dc0     13 13 02 F6 | 	mov	arg01, local01
03dc4     64 E7 B1 FD | 	call	#_printerror
03dc8     44 03 90 FD | 	jmp	#LR__0207
03dcc                 | LR__0197
03dcc                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03dcc     52 00 00 FF 
03dd0     F4 E4 05 F1 | 	add	objptr, ##42228
03dd4     F2 12 02 FB | 	rdlong	arg01, objptr
03dd8     52 00 00 FF 
03ddc     F4 E4 85 F1 | 	sub	objptr, ##42228
03de0     AD 01 00 FF 
03de4     9D 15 06 F6 | 	mov	arg02, ##@LR__5455
03de8     54 21 B2 FD | 	call	#__system___string_cmp
03dec     00 FA 0D F2 | 	cmp	result1, #0 wz
03df0     FC 02 90 AD |  if_e	jmp	#LR__0206
03df4     52 00 00 FF 
03df8     F4 E4 05 F1 | 	add	objptr, ##42228
03dfc     F2 2C 02 FB | 	rdlong	local04, objptr
03e00     1B 00 00 FF 
03e04     D8 E4 85 F1 | 	sub	objptr, ##14040
03e08     F2 2C 62 FC | 	wrlong	local04, objptr
03e0c     08 E4 05 F1 | 	add	objptr, #8
03e10     F2 08 68 FC | 	wrlong	#4, objptr
03e14     37 00 00 FF 
03e18     24 E4 85 F1 | 	sub	objptr, ##28196
03e1c     74 DA 9F FD | 	jmp	#LR__0070
03e20                 | LR__0198
03e20                 | '       							
03e20                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03e20     37 00 00 FF 
03e24     24 E4 05 F1 | 	add	objptr, ##28196
03e28     F2 2C 02 FB | 	rdlong	local04, objptr
03e2c     37 00 00 FF 
03e30     24 E4 85 F1 | 	sub	objptr, ##28196
03e34     01 2C 0E F2 | 	cmp	local04, #1 wz
03e38     37 00 00 5F 
03e3c     24 E4 05 51 |  if_ne	add	objptr, ##28196
03e40     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03e44     37 00 00 5F 
03e48     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03e4c     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03e50     C0 00 90 5D |  if_ne	jmp	#LR__0200
03e54     35 00 00 FF 
03e58     18 E4 05 F1 | 	add	objptr, ##27160
03e5c     F2 3C 02 FB | 	rdlong	local12, objptr
03e60     35 00 00 FF 
03e64     18 E4 85 F1 | 	sub	objptr, ##27160
03e68     1B 3C 0E F2 | 	cmp	local12, #27 wz
03e6c     A4 00 90 AD |  if_e	jmp	#LR__0200
03e70     52 00 00 FF 
03e74     B0 E4 05 F1 | 	add	objptr, ##42160
03e78     F2 12 02 FB | 	rdlong	arg01, objptr
03e7c     1B 00 00 FF 
03e80     8C E4 85 F1 | 	sub	objptr, ##13964
03e84     F2 16 02 FB | 	rdlong	arg03, objptr
03e88     37 00 00 FF 
03e8c     24 E4 85 F1 | 	sub	objptr, ##28196
03e90     00 14 06 F6 | 	mov	arg02, #0
03e94     68 43 B0 FD | 	call	#_compile
03e98     FD 26 0A F6 | 	mov	local01, result1 wz
03e9c                 | '   err=compile(linenum,0,cont) 
03e9c                 | '   if err<>0 then printerror(err,linenum): goto 101
03e9c     20 00 90 AD |  if_e	jmp	#LR__0199
03ea0     52 00 00 FF 
03ea4     B0 E4 05 F1 | 	add	objptr, ##42160
03ea8     F2 14 02 FB | 	rdlong	arg02, objptr
03eac     52 00 00 FF 
03eb0     B0 E4 85 F1 | 	sub	objptr, ##42160
03eb4     13 13 02 F6 | 	mov	arg01, local01
03eb8     70 E6 B1 FD | 	call	#_printerror
03ebc     50 02 90 FD | 	jmp	#LR__0207
03ec0                 | LR__0199
03ec0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03ec0     52 00 00 FF 
03ec4     F4 E4 05 F1 | 	add	objptr, ##42228
03ec8     F2 12 02 FB | 	rdlong	arg01, objptr
03ecc     52 00 00 FF 
03ed0     F4 E4 85 F1 | 	sub	objptr, ##42228
03ed4     AD 01 00 FF 
03ed8     9E 15 06 F6 | 	mov	arg02, ##@LR__5456
03edc     60 20 B2 FD | 	call	#__system___string_cmp
03ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ee4     08 02 90 AD |  if_e	jmp	#LR__0206
03ee8     52 00 00 FF 
03eec     F4 E4 05 F1 | 	add	objptr, ##42228
03ef0     F2 2C 02 FB | 	rdlong	local04, objptr
03ef4     1B 00 00 FF 
03ef8     D8 E4 85 F1 | 	sub	objptr, ##14040
03efc     F2 2C 62 FC | 	wrlong	local04, objptr
03f00     08 E4 05 F1 | 	add	objptr, #8
03f04     F2 08 68 FC | 	wrlong	#4, objptr
03f08     37 00 00 FF 
03f0c     24 E4 85 F1 | 	sub	objptr, ##28196
03f10     80 D9 9F FD | 	jmp	#LR__0070
03f14                 | LR__0200
03f14                 | ' 							 
03f14                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03f14     37 00 00 FF 
03f18     24 E4 05 F1 | 	add	objptr, ##28196
03f1c     F2 2C 0A FB | 	rdlong	local04, objptr wz
03f20     37 00 00 FF 
03f24     24 E4 85 F1 | 	sub	objptr, ##28196
03f28     37 00 00 5F 
03f2c     24 E4 05 51 |  if_ne	add	objptr, ##28196
03f30     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03f34     37 00 00 5F 
03f38     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03f3c     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
03f40     35 00 00 AF 
03f44     20 E4 05 A1 |  if_e	add	objptr, ##27168
03f48     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03f4c     35 00 00 AF 
03f50     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03f54     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03f58     A4 00 90 5D |  if_ne	jmp	#LR__0202
03f5c     52 00 00 FF 
03f60     B0 E4 05 F1 | 	add	objptr, ##42160
03f64     F2 12 02 FB | 	rdlong	arg01, objptr
03f68     1B 00 00 FF 
03f6c     8C E4 85 F1 | 	sub	objptr, ##13964
03f70     F2 16 02 FB | 	rdlong	arg03, objptr
03f74     37 00 00 FF 
03f78     24 E4 85 F1 | 	sub	objptr, ##28196
03f7c     00 14 06 F6 | 	mov	arg02, #0
03f80     44 43 B0 FD | 	call	#_compile_assign
03f84     FD 26 0A F6 | 	mov	local01, result1 wz
03f88                 | '   err=compile_assign(linenum,0,cont)
03f88                 | '   if err<>0 then printerror(err,linenum): goto 101
03f88     20 00 90 AD |  if_e	jmp	#LR__0201
03f8c     52 00 00 FF 
03f90     B0 E4 05 F1 | 	add	objptr, ##42160
03f94     F2 14 02 FB | 	rdlong	arg02, objptr
03f98     52 00 00 FF 
03f9c     B0 E4 85 F1 | 	sub	objptr, ##42160
03fa0     13 13 02 F6 | 	mov	arg01, local01
03fa4     84 E5 B1 FD | 	call	#_printerror
03fa8     64 01 90 FD | 	jmp	#LR__0207
03fac                 | LR__0201
03fac                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03fac     52 00 00 FF 
03fb0     F4 E4 05 F1 | 	add	objptr, ##42228
03fb4     F2 12 02 FB | 	rdlong	arg01, objptr
03fb8     52 00 00 FF 
03fbc     F4 E4 85 F1 | 	sub	objptr, ##42228
03fc0     AD 01 00 FF 
03fc4     9F 15 06 F6 | 	mov	arg02, ##@LR__5457
03fc8     74 1F B2 FD | 	call	#__system___string_cmp
03fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03fd0     1C 01 90 AD |  if_e	jmp	#LR__0206
03fd4     52 00 00 FF 
03fd8     F4 E4 05 F1 | 	add	objptr, ##42228
03fdc     F2 2C 02 FB | 	rdlong	local04, objptr
03fe0     1B 00 00 FF 
03fe4     D8 E4 85 F1 | 	sub	objptr, ##14040
03fe8     F2 2C 62 FC | 	wrlong	local04, objptr
03fec     08 E4 05 F1 | 	add	objptr, #8
03ff0     F2 08 68 FC | 	wrlong	#4, objptr
03ff4     37 00 00 FF 
03ff8     24 E4 85 F1 | 	sub	objptr, ##28196
03ffc     94 D8 9F FD | 	jmp	#LR__0070
04000                 | LR__0202
04000                 | '     							 
04000                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
04000     37 00 00 FF 
04004     24 E4 05 F1 | 	add	objptr, ##28196
04008     F2 2C 02 FB | 	rdlong	local04, objptr
0400c     37 00 00 FF 
04010     24 E4 85 F1 | 	sub	objptr, ##28196
04014     01 2C 0E F2 | 	cmp	local04, #1 wz
04018     37 00 00 5F 
0401c     24 E4 05 51 |  if_ne	add	objptr, ##28196
04020     F2 38 02 5B |  if_ne	rdlong	local10, objptr
04024     37 00 00 5F 
04028     24 E4 85 51 |  if_ne	sub	objptr, ##28196
0402c     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
04030     35 00 00 AF 
04034     18 E4 05 A1 |  if_e	add	objptr, ##27160
04038     F2 3C 02 AB |  if_e	rdlong	local12, objptr
0403c     35 00 00 AF 
04040     18 E4 85 A1 |  if_e	sub	objptr, ##27160
04044     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
04048     A4 00 90 5D |  if_ne	jmp	#LR__0205
0404c     52 00 00 FF 
04050     B0 E4 05 F1 | 	add	objptr, ##42160
04054     F2 12 02 FB | 	rdlong	arg01, objptr
04058     1B 00 00 FF 
0405c     8C E4 85 F1 | 	sub	objptr, ##13964
04060     F2 16 02 FB | 	rdlong	arg03, objptr
04064     37 00 00 FF 
04068     24 E4 85 F1 | 	sub	objptr, ##28196
0406c     00 14 06 F6 | 	mov	arg02, #0
04070     54 42 B0 FD | 	call	#_compile_assign
04074     FD 26 0A F6 | 	mov	local01, result1 wz
04078                 | '   err=compile_assign(linenum,0,cont) 
04078                 | '   if err<>0 then printerror(err,linenum): goto 101
04078     20 00 90 AD |  if_e	jmp	#LR__0203
0407c     52 00 00 FF 
04080     B0 E4 05 F1 | 	add	objptr, ##42160
04084     F2 14 02 FB | 	rdlong	arg02, objptr
04088     52 00 00 FF 
0408c     B0 E4 85 F1 | 	sub	objptr, ##42160
04090     13 13 02 F6 | 	mov	arg01, local01
04094     94 E4 B1 FD | 	call	#_printerror
04098     74 00 90 FD | 	jmp	#LR__0207
0409c                 | LR__0203
0409c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
0409c     52 00 00 FF 
040a0     F4 E4 05 F1 | 	add	objptr, ##42228
040a4     F2 12 02 FB | 	rdlong	arg01, objptr
040a8     52 00 00 FF 
040ac     F4 E4 85 F1 | 	sub	objptr, ##42228
040b0     AD 01 00 FF 
040b4     A0 15 06 F6 | 	mov	arg02, ##@LR__5458
040b8     84 1E B2 FD | 	call	#__system___string_cmp
040bc     00 FA 4D F2 | 	cmps	result1, #0 wz
040c0     2C 00 90 AD |  if_e	jmp	#LR__0204
040c4     52 00 00 FF 
040c8     F4 E4 05 F1 | 	add	objptr, ##42228
040cc     F2 2C 02 FB | 	rdlong	local04, objptr
040d0     1B 00 00 FF 
040d4     D8 E4 85 F1 | 	sub	objptr, ##14040
040d8     F2 2C 62 FC | 	wrlong	local04, objptr
040dc     08 E4 05 F1 | 	add	objptr, #8
040e0     F2 08 68 FC | 	wrlong	#4, objptr
040e4     37 00 00 FF 
040e8     24 E4 85 F1 | 	sub	objptr, ##28196
040ec     A4 D7 9F FD | 	jmp	#LR__0070
040f0                 | LR__0204
040f0                 | LR__0205
040f0                 | LR__0206
040f0                 | ' 
040f0                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
040f0     52 00 00 FF 
040f4     B0 E4 05 F1 | 	add	objptr, ##42160
040f8     F2 2C 0A FB | 	rdlong	local04, objptr wz
040fc     52 00 00 FF 
04100     B0 E4 85 F1 | 	sub	objptr, ##42160
04104     B0 00 90 5D |  if_ne	jmp	#LR__0210
04108     02 12 06 F6 | 	mov	arg01, #2
0410c     CC 90 B0 FD | 	call	#_execute_line
04110                 | LR__0207
04110                 | '   execute_line(2)
04110                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
04110     52 00 00 FF 
04114     D4 E4 05 F1 | 	add	objptr, ##42196
04118     F2 2C 0A FB | 	rdlong	local04, objptr wz
0411c     52 00 00 FF 
04120     D4 E4 85 F1 | 	sub	objptr, ##42196
04124     20 00 90 5D |  if_ne	jmp	#LR__0208
04128     AD 01 00 FF 
0412c     A1 13 06 F6 | 	mov	arg01, ##@LR__5459
04130                 | ' 
04130                 | ' write(text)
04130     20 05 B2 FD | 	call	#_hg010b_spin2_write
04134                 | ' crlf
04134     1C 0A B2 FD | 	call	#_hg010b_spin2_crlf
04138     AD 01 00 FF 
0413c     A2 13 06 F6 | 	mov	arg01, ##@LR__5460
04140                 | ' 
04140                 | ' write(text)
04140     10 05 B2 FD | 	call	#_hg010b_spin2_write
04144                 | ' crlf
04144     0C 0A B2 FD | 	call	#_hg010b_spin2_crlf
04148                 | LR__0208
04148                 | '     if inload=1 andalso err>0 then print fullline$
04148     52 00 00 FF 
0414c     D4 E4 05 F1 | 	add	objptr, ##42196
04150     F2 2C 02 FB | 	rdlong	local04, objptr
04154     52 00 00 FF 
04158     D4 E4 85 F1 | 	sub	objptr, ##42196
0415c     01 2C 0E F2 | 	cmp	local04, #1 wz
04160     54 00 90 5D |  if_ne	jmp	#LR__0209
04164     01 26 56 F2 | 	cmps	local01, #1 wc
04168     4C 00 90 CD |  if_b	jmp	#LR__0209
0416c     00 12 06 F6 | 	mov	arg01, #0
04170     CC 7A B2 FD | 	call	#__system___getiolock_0602
04174     FD 12 02 F6 | 	mov	arg01, result1
04178     9C 1D B2 FD | 	call	#__system___lockmem
0417c     37 00 00 FF 
04180     20 E4 05 F1 | 	add	objptr, ##28192
04184     F2 14 02 FB | 	rdlong	arg02, objptr
04188     37 00 00 FF 
0418c     20 E4 85 F1 | 	sub	objptr, ##28192
04190     00 12 06 F6 | 	mov	arg01, #0
04194     00 16 06 F6 | 	mov	arg03, #0
04198     70 2A B2 FD | 	call	#__system___basic_print_string
0419c     00 12 06 F6 | 	mov	arg01, #0
041a0     0A 14 06 F6 | 	mov	arg02, #10
041a4     00 16 06 F6 | 	mov	arg03, #0
041a8     08 2A B2 FD | 	call	#__system___basic_print_char
041ac     00 12 06 F6 | 	mov	arg01, #0
041b0     8C 7A B2 FD | 	call	#__system___getiolock_0602
041b4     FD 00 68 FC | 	wrlong	#0, result1
041b8                 | LR__0209
041b8                 | LR__0210
041b8     A7 F0 03 F6 | 	mov	ptra, fp
041bc     B2 00 A0 FD | 	call	#popregs_
041c0                 | _interpret_ret
041c0     2D 00 64 FD | 	ret
041c4                 | 
041c4                 | ' 
041c4                 | ' '---------------------------------------------------------------------------------------------------------------------
041c4                 | ' '
041c4                 | ' '                          END OF TOKENIZER MAIN CODE
041c4                 | ' '
041c4                 | ' '---------------------------------------------------------------------------------------------------------------------
041c4                 | ' 
041c4                 | ' '---------------------------------------------------------------------------------------------------------------------
041c4                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
041c4                 | ' '---------------------------------------------------------------------------------------------------------------------
041c4                 | ' 
041c4                 | ' ' Check if the part is an operator, return a token or 0 if not found
041c4                 | ' 
041c4                 | ' function isoperator(s as string) as ubyte
041c4                 | _isoperator
041c4     01 4A 05 F6 | 	mov	COUNT_, #1
041c8     A8 00 A0 FD | 	call	#pushregs_
041cc                 | ' 
041cc                 | ' select case s
041cc     09 27 02 F6 | 	mov	local01, arg01
041d0     AD 01 00 FF 
041d4     A8 15 06 F6 | 	mov	arg02, ##@LR__5461
041d8     13 13 02 F6 | 	mov	arg01, local01
041dc     60 1D B2 FD | 	call	#__system___string_cmp
041e0     00 FA 0D F2 | 	cmp	result1, #0 wz
041e4     FC 01 90 AD |  if_e	jmp	#LR__0220
041e8     AD 01 00 FF 
041ec     AA 15 06 F6 | 	mov	arg02, ##@LR__5462
041f0     13 13 02 F6 | 	mov	arg01, local01
041f4     48 1D B2 FD | 	call	#__system___string_cmp
041f8     00 FA 0D F2 | 	cmp	result1, #0 wz
041fc     EC 01 90 AD |  if_e	jmp	#LR__0221
04200     AD 01 00 FF 
04204     AC 15 06 F6 | 	mov	arg02, ##@LR__5463
04208     13 13 02 F6 | 	mov	arg01, local01
0420c     30 1D B2 FD | 	call	#__system___string_cmp
04210     00 FA 0D F2 | 	cmp	result1, #0 wz
04214     DC 01 90 AD |  if_e	jmp	#LR__0222
04218     AD 01 00 FF 
0421c     AF 15 06 F6 | 	mov	arg02, ##@LR__5464
04220     13 13 02 F6 | 	mov	arg01, local01
04224     18 1D B2 FD | 	call	#__system___string_cmp
04228     00 FA 0D F2 | 	cmp	result1, #0 wz
0422c     CC 01 90 AD |  if_e	jmp	#LR__0223
04230     AD 01 00 FF 
04234     B3 15 06 F6 | 	mov	arg02, ##@LR__5465
04238     13 13 02 F6 | 	mov	arg01, local01
0423c     00 1D B2 FD | 	call	#__system___string_cmp
04240     00 FA 0D F2 | 	cmp	result1, #0 wz
04244     BC 01 90 AD |  if_e	jmp	#LR__0224
04248     AD 01 00 FF 
0424c     B5 15 06 F6 | 	mov	arg02, ##@LR__5466
04250     13 13 02 F6 | 	mov	arg01, local01
04254     E8 1C B2 FD | 	call	#__system___string_cmp
04258     00 FA 0D F2 | 	cmp	result1, #0 wz
0425c     AC 01 90 AD |  if_e	jmp	#LR__0225
04260     AD 01 00 FF 
04264     B7 15 06 F6 | 	mov	arg02, ##@LR__5467
04268     13 13 02 F6 | 	mov	arg01, local01
0426c     D0 1C B2 FD | 	call	#__system___string_cmp
04270     00 FA 0D F2 | 	cmp	result1, #0 wz
04274     9C 01 90 AD |  if_e	jmp	#LR__0226
04278     AD 01 00 FF 
0427c     BB 15 06 F6 | 	mov	arg02, ##@LR__5468
04280     13 13 02 F6 | 	mov	arg01, local01
04284     B8 1C B2 FD | 	call	#__system___string_cmp
04288     00 FA 0D F2 | 	cmp	result1, #0 wz
0428c     8C 01 90 AD |  if_e	jmp	#LR__0227
04290     AD 01 00 FF 
04294     BF 15 06 F6 | 	mov	arg02, ##@LR__5469
04298     13 13 02 F6 | 	mov	arg01, local01
0429c     A0 1C B2 FD | 	call	#__system___string_cmp
042a0     00 FA 0D F2 | 	cmp	result1, #0 wz
042a4     7C 01 90 AD |  if_e	jmp	#LR__0228
042a8     AD 01 00 FF 
042ac     C3 15 06 F6 | 	mov	arg02, ##@LR__5470
042b0     13 13 02 F6 | 	mov	arg01, local01
042b4     88 1C B2 FD | 	call	#__system___string_cmp
042b8     00 FA 0D F2 | 	cmp	result1, #0 wz
042bc     6C 01 90 AD |  if_e	jmp	#LR__0229
042c0     AD 01 00 FF 
042c4     C7 15 06 F6 | 	mov	arg02, ##@LR__5471
042c8     13 13 02 F6 | 	mov	arg01, local01
042cc     70 1C B2 FD | 	call	#__system___string_cmp
042d0     00 FA 0D F2 | 	cmp	result1, #0 wz
042d4     5C 01 90 AD |  if_e	jmp	#LR__0230
042d8     AD 01 00 FF 
042dc     CB 15 06 F6 | 	mov	arg02, ##@LR__5472
042e0     13 13 02 F6 | 	mov	arg01, local01
042e4     58 1C B2 FD | 	call	#__system___string_cmp
042e8     00 FA 0D F2 | 	cmp	result1, #0 wz
042ec     4C 01 90 AD |  if_e	jmp	#LR__0231
042f0     AD 01 00 FF 
042f4     CD 15 06 F6 | 	mov	arg02, ##@LR__5473
042f8     13 13 02 F6 | 	mov	arg01, local01
042fc     40 1C B2 FD | 	call	#__system___string_cmp
04300     00 FA 0D F2 | 	cmp	result1, #0 wz
04304     3C 01 90 AD |  if_e	jmp	#LR__0232
04308     AD 01 00 FF 
0430c     D1 15 06 F6 | 	mov	arg02, ##@LR__5474
04310     13 13 02 F6 | 	mov	arg01, local01
04314     28 1C B2 FD | 	call	#__system___string_cmp
04318     00 FA 0D F2 | 	cmp	result1, #0 wz
0431c     2C 01 90 AD |  if_e	jmp	#LR__0233
04320     AD 01 00 FF 
04324     D3 15 06 F6 | 	mov	arg02, ##@LR__5475
04328     13 13 02 F6 | 	mov	arg01, local01
0432c     10 1C B2 FD | 	call	#__system___string_cmp
04330     00 FA 0D F2 | 	cmp	result1, #0 wz
04334     1C 01 90 AD |  if_e	jmp	#LR__0234
04338     AD 01 00 FF 
0433c     D5 15 06 F6 | 	mov	arg02, ##@LR__5476
04340     13 13 02 F6 | 	mov	arg01, local01
04344     F8 1B B2 FD | 	call	#__system___string_cmp
04348     00 FA 0D F2 | 	cmp	result1, #0 wz
0434c     0C 01 90 AD |  if_e	jmp	#LR__0235
04350     AD 01 00 FF 
04354     D8 15 06 F6 | 	mov	arg02, ##@LR__5477
04358     13 13 02 F6 | 	mov	arg01, local01
0435c     E0 1B B2 FD | 	call	#__system___string_cmp
04360     00 FA 0D F2 | 	cmp	result1, #0 wz
04364     FC 00 90 AD |  if_e	jmp	#LR__0236
04368     AD 01 00 FF 
0436c     DB 15 06 F6 | 	mov	arg02, ##@LR__5478
04370     13 13 02 F6 | 	mov	arg01, local01
04374     C8 1B B2 FD | 	call	#__system___string_cmp
04378     00 FA 0D F2 | 	cmp	result1, #0 wz
0437c     EC 00 90 AD |  if_e	jmp	#LR__0237
04380     AD 01 00 FF 
04384     DD 15 06 F6 | 	mov	arg02, ##@LR__5479
04388     13 13 02 F6 | 	mov	arg01, local01
0438c     B0 1B B2 FD | 	call	#__system___string_cmp
04390     00 FA 0D F2 | 	cmp	result1, #0 wz
04394     DC 00 90 AD |  if_e	jmp	#LR__0238
04398     AD 01 00 FF 
0439c     DF 15 06 F6 | 	mov	arg02, ##@LR__5480
043a0     13 13 02 F6 | 	mov	arg01, local01
043a4     98 1B B2 FD | 	call	#__system___string_cmp
043a8     00 FA 0D F2 | 	cmp	result1, #0 wz
043ac     CC 00 90 AD |  if_e	jmp	#LR__0239
043b0     AD 01 00 FF 
043b4     E2 15 06 F6 | 	mov	arg02, ##@LR__5481
043b8     13 13 02 F6 | 	mov	arg01, local01
043bc     80 1B B2 FD | 	call	#__system___string_cmp
043c0     00 FA 0D F2 | 	cmp	result1, #0 wz
043c4     BC 00 90 AD |  if_e	jmp	#LR__0240
043c8     AD 01 00 FF 
043cc     E5 15 06 F6 | 	mov	arg02, ##@LR__5482
043d0     13 13 02 F6 | 	mov	arg01, local01
043d4     68 1B B2 FD | 	call	#__system___string_cmp
043d8     00 FA 0D F2 | 	cmp	result1, #0 wz
043dc     AC 00 90 AD |  if_e	jmp	#LR__0241
043e0     B0 00 90 FD | 	jmp	#LR__0242
043e4                 | LR__0220
043e4     01 FA 05 F6 | 	mov	result1, #1
043e8     AC 00 90 FD | 	jmp	#LR__0243
043ec                 | LR__0221
043ec     02 FA 05 F6 | 	mov	result1, #2
043f0     A4 00 90 FD | 	jmp	#LR__0243
043f4                 | LR__0222
043f4     03 FA 05 F6 | 	mov	result1, #3
043f8     9C 00 90 FD | 	jmp	#LR__0243
043fc                 | LR__0223
043fc     04 FA 05 F6 | 	mov	result1, #4
04400     94 00 90 FD | 	jmp	#LR__0243
04404                 | LR__0224
04404     05 FA 05 F6 | 	mov	result1, #5
04408     8C 00 90 FD | 	jmp	#LR__0243
0440c                 | LR__0225
0440c     06 FA 05 F6 | 	mov	result1, #6
04410     84 00 90 FD | 	jmp	#LR__0243
04414                 | LR__0226
04414     07 FA 05 F6 | 	mov	result1, #7
04418     7C 00 90 FD | 	jmp	#LR__0243
0441c                 | LR__0227
0441c     08 FA 05 F6 | 	mov	result1, #8
04420     74 00 90 FD | 	jmp	#LR__0243
04424                 | LR__0228
04424     09 FA 05 F6 | 	mov	result1, #9
04428     6C 00 90 FD | 	jmp	#LR__0243
0442c                 | LR__0229
0442c     0A FA 05 F6 | 	mov	result1, #10
04430     64 00 90 FD | 	jmp	#LR__0243
04434                 | LR__0230
04434     0B FA 05 F6 | 	mov	result1, #11
04438     5C 00 90 FD | 	jmp	#LR__0243
0443c                 | LR__0231
0443c     0C FA 05 F6 | 	mov	result1, #12
04440     54 00 90 FD | 	jmp	#LR__0243
04444                 | LR__0232
04444     0D FA 05 F6 | 	mov	result1, #13
04448     4C 00 90 FD | 	jmp	#LR__0243
0444c                 | LR__0233
0444c     0E FA 05 F6 | 	mov	result1, #14
04450     44 00 90 FD | 	jmp	#LR__0243
04454                 | LR__0234
04454     1B FA 05 F6 | 	mov	result1, #27
04458     3C 00 90 FD | 	jmp	#LR__0243
0445c                 | LR__0235
0445c     27 FA 05 F6 | 	mov	result1, #39
04460     34 00 90 FD | 	jmp	#LR__0243
04464                 | LR__0236
04464     26 FA 05 F6 | 	mov	result1, #38
04468     2C 00 90 FD | 	jmp	#LR__0243
0446c                 | LR__0237
0446c     10 FA 05 F6 | 	mov	result1, #16
04470     24 00 90 FD | 	jmp	#LR__0243
04474                 | LR__0238
04474     0F FA 05 F6 | 	mov	result1, #15
04478     1C 00 90 FD | 	jmp	#LR__0243
0447c                 | LR__0239
0447c     2A FA 05 F6 | 	mov	result1, #42
04480     14 00 90 FD | 	jmp	#LR__0243
04484                 | LR__0240
04484     28 FA 05 F6 | 	mov	result1, #40
04488     0C 00 90 FD | 	jmp	#LR__0243
0448c                 | LR__0241
0448c     29 FA 05 F6 | 	mov	result1, #41
04490     04 00 90 FD | 	jmp	#LR__0243
04494                 | LR__0242
04494     00 FA 05 F6 | 	mov	result1, #0
04498                 | LR__0243
04498     A7 F0 03 F6 | 	mov	ptra, fp
0449c     B2 00 A0 FD | 	call	#popregs_
044a0                 | _isoperator_ret
044a0     2D 00 64 FD | 	ret
044a4                 | 
044a4                 | ' 
044a4                 | ' ' Check if the part is a channel#, return a token or 0 if not found
044a4                 | ' 
044a4                 | ' function ischannel(s as string) as ulong
044a4                 | _ischannel
044a4     02 4A 05 F6 | 	mov	COUNT_, #2
044a8     A8 00 A0 FD | 	call	#pushregs_
044ac                 | ' if left$(s,1)<>"#" then return 0
044ac     09 27 02 F6 | 	mov	local01, arg01
044b0     01 14 06 F6 | 	mov	arg02, #1
044b4     DC 3A B2 FD | 	call	#__system__Left_S
044b8     FD 12 02 F6 | 	mov	arg01, result1
044bc     AD 01 00 FF 
044c0     E8 15 06 F6 | 	mov	arg02, ##@LR__5483
044c4     78 1A B2 FD | 	call	#__system___string_cmp
044c8     00 FA 0D F2 | 	cmp	result1, #0 wz
044cc     00 FA 05 56 |  if_ne	mov	result1, #0
044d0     AC 00 90 5D |  if_ne	jmp	#LR__0254
044d4                 | ' if len(s)<>2 then return 0
044d4     13 13 02 F6 | 	mov	arg01, local01
044d8     09 29 02 F6 | 	mov	local02, arg01
044dc     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
044e0                 | LR__0250
044e0     14 FB C9 FA | 	rdbyte	result1, local02 wz
044e4     01 28 06 51 |  if_ne	add	local02, #1
044e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
044ec                 | LR__0251
044ec     09 29 82 F1 | 	sub	local02, arg01
044f0     14 FB 01 F6 | 	mov	result1, local02
044f4     02 FA 0D F2 | 	cmp	result1, #2 wz
044f8     00 FA 05 56 |  if_ne	mov	result1, #0
044fc     80 00 90 5D |  if_ne	jmp	#LR__0254
04500                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04500     13 13 02 F6 | 	mov	arg01, local01
04504     01 14 06 F6 | 	mov	arg02, #1
04508     10 3B B2 FD | 	call	#__system__Right_S
0450c     FD 12 02 F6 | 	mov	arg01, result1
04510     AD 01 00 FF 
04514     EA 15 06 F6 | 	mov	arg02, ##@LR__5484
04518     24 1A B2 FD | 	call	#__system___string_cmp
0451c     00 FA 55 F2 | 	cmps	result1, #0 wc
04520     24 00 90 CD |  if_b	jmp	#LR__0252
04524     13 13 02 F6 | 	mov	arg01, local01
04528     01 14 06 F6 | 	mov	arg02, #1
0452c     EC 3A B2 FD | 	call	#__system__Right_S
04530     FD 12 02 F6 | 	mov	arg01, result1
04534     AD 01 00 FF 
04538     EC 15 06 F6 | 	mov	arg02, ##@LR__5485
0453c     00 1A B2 FD | 	call	#__system___string_cmp
04540     01 FA 55 F2 | 	cmps	result1, #1 wc
04544     08 00 90 CD |  if_b	jmp	#LR__0253
04548                 | LR__0252
04548     00 FA 05 F6 | 	mov	result1, #0
0454c     30 00 90 FD | 	jmp	#LR__0254
04550                 | LR__0253
04550                 | ' return token_channel+val(right$(s,1))
04550     13 13 02 F6 | 	mov	arg01, local01
04554     01 14 06 F6 | 	mov	arg02, #1
04558     C0 3A B2 FD | 	call	#__system__Right_S
0455c     FD 12 02 F6 | 	mov	arg01, result1
04560     38 50 B2 FD | 	call	#__system____builtin_atof
04564     FD 14 02 F6 | 	mov	arg02, result1
04568     00 18 21 FF 
0456c     00 12 06 F6 | 	mov	arg01, ##1110441984
04570     4C 44 B2 FD | 	call	#__system___float_add
04574     FD 12 02 F6 | 	mov	arg01, result1
04578     00 14 06 F6 | 	mov	arg02, #0
0457c     D8 4C B2 FD | 	call	#__system___float_tointeger
04580                 | LR__0254
04580     A7 F0 03 F6 | 	mov	ptra, fp
04584     B2 00 A0 FD | 	call	#popregs_
04588                 | _ischannel_ret
04588     2D 00 64 FD | 	ret
0458c                 | 
0458c                 | ' 
0458c                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
0458c                 | ' ' todo: add spin2/pasm constants for pin control
0458c                 | ' 
0458c                 | ' function isconstant(s as string) as integer
0458c                 | _isconstant
0458c     01 4A 05 F6 | 	mov	COUNT_, #1
04590     A8 00 A0 FD | 	call	#pushregs_
04594                 | ' 
04594                 | ' select case s
04594     09 27 02 F6 | 	mov	local01, arg01
04598     AD 01 00 FF 
0459c     EE 15 06 F6 | 	mov	arg02, ##@LR__5486
045a0     13 13 02 F6 | 	mov	arg01, local01
045a4     98 19 B2 FD | 	call	#__system___string_cmp
045a8     00 FA 0D F2 | 	cmp	result1, #0 wz
045ac     34 00 90 AD |  if_e	jmp	#LR__0260
045b0     AD 01 00 FF 
045b4     F4 15 06 F6 | 	mov	arg02, ##@LR__5487
045b8     13 13 02 F6 | 	mov	arg01, local01
045bc     80 19 B2 FD | 	call	#__system___string_cmp
045c0     00 FA 0D F2 | 	cmp	result1, #0 wz
045c4     24 00 90 AD |  if_e	jmp	#LR__0261
045c8     AD 01 00 FF 
045cc     FB 15 06 F6 | 	mov	arg02, ##@LR__5488
045d0     13 13 02 F6 | 	mov	arg01, local01
045d4     68 19 B2 FD | 	call	#__system___string_cmp
045d8     00 FA 0D F2 | 	cmp	result1, #0 wz
045dc     14 00 90 AD |  if_e	jmp	#LR__0262
045e0     18 00 90 FD | 	jmp	#LR__0263
045e4                 | LR__0260
045e4     01 FA 05 F6 | 	mov	result1, #1
045e8     14 00 90 FD | 	jmp	#LR__0264
045ec                 | LR__0261
045ec     02 FA 05 F6 | 	mov	result1, #2
045f0     0C 00 90 FD | 	jmp	#LR__0264
045f4                 | LR__0262
045f4     04 FA 05 F6 | 	mov	result1, #4
045f8     04 00 90 FD | 	jmp	#LR__0264
045fc                 | LR__0263
045fc     00 FA 05 F6 | 	mov	result1, #0
04600                 | LR__0264
04600     A7 F0 03 F6 | 	mov	ptra, fp
04604     B2 00 A0 FD | 	call	#popregs_
04608                 | _isconstant_ret
04608     2D 00 64 FD | 	ret
0460c                 | 
0460c                 | ' 
0460c                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
0460c                 | ' 
0460c                 | ' function isnotename(s as string) as ulong
0460c                 | _isnotename
0460c     07 4A 05 F6 | 	mov	COUNT_, #7
04610     A8 00 A0 FD | 	call	#pushregs_
04614                 | ' if left$(s,1)<>"#" then return 0
04614     09 27 02 F6 | 	mov	local01, arg01
04618     01 14 06 F6 | 	mov	arg02, #1
0461c     74 39 B2 FD | 	call	#__system__Left_S
04620     FD 12 02 F6 | 	mov	arg01, result1
04624     AE 01 00 FF 
04628     03 14 06 F6 | 	mov	arg02, ##@LR__5489
0462c     10 19 B2 FD | 	call	#__system___string_cmp
04630     00 FA 0D F2 | 	cmp	result1, #0 wz
04634     00 FA 05 56 |  if_ne	mov	result1, #0
04638     30 03 90 5D |  if_ne	jmp	#LR__0293
0463c                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
0463c     13 13 02 F6 | 	mov	arg01, local01
04640     03 14 06 F6 | 	mov	arg02, #3
04644     01 16 06 F6 | 	mov	arg03, #1
04648     60 3A B2 FD | 	call	#__system__Mid_S
0464c     FD 12 02 F6 | 	mov	arg01, result1
04650     AE 01 00 FF 
04654     05 14 06 F6 | 	mov	arg02, ##@LR__5490
04658     E4 18 B2 FD | 	call	#__system___string_cmp
0465c     00 FA 0D F2 | 	cmp	result1, #0 wz
04660     18 00 90 5D |  if_ne	jmp	#LR__0270
04664     13 13 02 F6 | 	mov	arg01, local01
04668     02 14 06 F6 | 	mov	arg02, #2
0466c     02 16 06 F6 | 	mov	arg03, #2
04670     38 3A B2 FD | 	call	#__system__Mid_S
04674     FD 28 02 F6 | 	mov	local02, result1
04678     14 00 90 FD | 	jmp	#LR__0271
0467c                 | LR__0270
0467c     13 13 02 F6 | 	mov	arg01, local01
04680     02 14 06 F6 | 	mov	arg02, #2
04684     01 16 06 F6 | 	mov	arg03, #1
04688     20 3A B2 FD | 	call	#__system__Mid_S
0468c     FD 28 02 F6 | 	mov	local02, result1
04690                 | LR__0271
04690                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
04690     13 13 02 F6 | 	mov	arg01, local01
04694     09 2B 02 F6 | 	mov	local03, arg01
04698     97 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
0469c                 | LR__0272
0469c     15 FB C9 FA | 	rdbyte	result1, local03 wz
046a0     01 2A 06 51 |  if_ne	add	local03, #1
046a4     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
046a8                 | LR__0273
046a8     09 2B 82 F1 | 	sub	local03, arg01
046ac     15 15 02 F6 | 	mov	arg02, local03
046b0     01 14 86 F1 | 	sub	arg02, #1
046b4     13 13 02 F6 | 	mov	arg01, local01
046b8     01 16 06 F6 | 	mov	arg03, #1
046bc     EC 39 B2 FD | 	call	#__system__Mid_S
046c0     FD 12 02 F6 | 	mov	arg01, result1
046c4     AE 01 00 FF 
046c8     07 14 06 F6 | 	mov	arg02, ##@LR__5491
046cc     70 18 B2 FD | 	call	#__system___string_cmp
046d0     00 FA 0D F2 | 	cmp	result1, #0 wz
046d4     28 00 90 AD |  if_e	jmp	#LR__0274
046d8     13 13 02 F6 | 	mov	arg01, local01
046dc     01 14 06 F6 | 	mov	arg02, #1
046e0     38 39 B2 FD | 	call	#__system__Right_S
046e4     FD 12 02 F6 | 	mov	arg01, result1
046e8     B0 4E B2 FD | 	call	#__system____builtin_atof
046ec     FD 12 02 F6 | 	mov	arg01, result1
046f0     00 14 06 F6 | 	mov	arg02, #0
046f4     60 4B B2 FD | 	call	#__system___float_tointeger
046f8     FD 2C 02 F6 | 	mov	local04, result1
046fc     34 00 90 FD | 	jmp	#LR__0275
04700                 | LR__0274
04700     13 13 02 F6 | 	mov	arg01, local01
04704     01 14 06 F6 | 	mov	arg02, #1
04708     10 39 B2 FD | 	call	#__system__Right_S
0470c     FD 12 02 F6 | 	mov	arg01, result1
04710     88 4E B2 FD | 	call	#__system____builtin_atof
04714     FD 14 02 F6 | 	mov	arg02, result1
04718     00 C0 5F FF 
0471c     00 12 06 F6 | 	mov	arg01, ##-1082130432
04720     6C 46 B2 FD | 	call	#__system___float_mul
04724     FD 12 02 F6 | 	mov	arg01, result1
04728     00 14 06 F6 | 	mov	arg02, #0
0472c     28 4B B2 FD | 	call	#__system___float_tointeger
04730     FD 2C 02 F6 | 	mov	local04, result1
04734                 | LR__0275
04734                 | ' 
04734                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04734     00 2C 0E F2 | 	cmp	local04, #0 wz
04738     24 00 90 5D |  if_ne	jmp	#LR__0276
0473c     13 13 02 F6 | 	mov	arg01, local01
04740     01 14 06 F6 | 	mov	arg02, #1
04744     D4 38 B2 FD | 	call	#__system__Right_S
04748     FD 12 02 F6 | 	mov	arg01, result1
0474c     AE 01 00 FF 
04750     09 14 06 F6 | 	mov	arg02, ##@LR__5492
04754     E8 17 B2 FD | 	call	#__system___string_cmp
04758     00 FA 0D F2 | 	cmp	result1, #0 wz
0475c     04 2C 06 56 |  if_ne	mov	local04, #4
04760                 | LR__0276
04760                 | ' 
04760                 | ' select case s1
04760     14 2F 02 F6 | 	mov	local05, local02
04764     AE 01 00 FF 
04768     0B 14 06 F6 | 	mov	arg02, ##@LR__5493
0476c     17 13 02 F6 | 	mov	arg01, local05
04770     CC 17 B2 FD | 	call	#__system___string_cmp
04774     00 FA 0D F2 | 	cmp	result1, #0 wz
04778     24 01 90 AD |  if_e	jmp	#LR__0277
0477c     AE 01 00 FF 
04780     0D 14 06 F6 | 	mov	arg02, ##@LR__5494
04784     17 13 02 F6 | 	mov	arg01, local05
04788     B4 17 B2 FD | 	call	#__system___string_cmp
0478c     00 FA 0D F2 | 	cmp	result1, #0 wz
04790     18 01 90 AD |  if_e	jmp	#LR__0278
04794     AE 01 00 FF 
04798     10 14 06 F6 | 	mov	arg02, ##@LR__5495
0479c     17 13 02 F6 | 	mov	arg01, local05
047a0     9C 17 B2 FD | 	call	#__system___string_cmp
047a4     00 FA 0D F2 | 	cmp	result1, #0 wz
047a8     0C 01 90 AD |  if_e	jmp	#LR__0279
047ac     AE 01 00 FF 
047b0     12 14 06 F6 | 	mov	arg02, ##@LR__5496
047b4     17 13 02 F6 | 	mov	arg01, local05
047b8     84 17 B2 FD | 	call	#__system___string_cmp
047bc     00 FA 0D F2 | 	cmp	result1, #0 wz
047c0     00 01 90 AD |  if_e	jmp	#LR__0280
047c4     AE 01 00 FF 
047c8     15 14 06 F6 | 	mov	arg02, ##@LR__5497
047cc     17 13 02 F6 | 	mov	arg01, local05
047d0     6C 17 B2 FD | 	call	#__system___string_cmp
047d4     00 FA 0D F2 | 	cmp	result1, #0 wz
047d8     F4 00 90 AD |  if_e	jmp	#LR__0281
047dc     AE 01 00 FF 
047e0     17 14 06 F6 | 	mov	arg02, ##@LR__5498
047e4     17 13 02 F6 | 	mov	arg01, local05
047e8     54 17 B2 FD | 	call	#__system___string_cmp
047ec     00 FA 0D F2 | 	cmp	result1, #0 wz
047f0     E8 00 90 AD |  if_e	jmp	#LR__0282
047f4     AE 01 00 FF 
047f8     19 14 06 F6 | 	mov	arg02, ##@LR__5499
047fc     17 13 02 F6 | 	mov	arg01, local05
04800     3C 17 B2 FD | 	call	#__system___string_cmp
04804     00 FA 0D F2 | 	cmp	result1, #0 wz
04808     DC 00 90 AD |  if_e	jmp	#LR__0283
0480c     AE 01 00 FF 
04810     1C 14 06 F6 | 	mov	arg02, ##@LR__5500
04814     17 13 02 F6 | 	mov	arg01, local05
04818     24 17 B2 FD | 	call	#__system___string_cmp
0481c     00 FA 0D F2 | 	cmp	result1, #0 wz
04820     D0 00 90 AD |  if_e	jmp	#LR__0284
04824     AE 01 00 FF 
04828     1E 14 06 F6 | 	mov	arg02, ##@LR__5501
0482c     17 13 02 F6 | 	mov	arg01, local05
04830     0C 17 B2 FD | 	call	#__system___string_cmp
04834     00 FA 0D F2 | 	cmp	result1, #0 wz
04838     C4 00 90 AD |  if_e	jmp	#LR__0285
0483c     AE 01 00 FF 
04840     21 14 06 F6 | 	mov	arg02, ##@LR__5502
04844     17 13 02 F6 | 	mov	arg01, local05
04848     F4 16 B2 FD | 	call	#__system___string_cmp
0484c     00 FA 0D F2 | 	cmp	result1, #0 wz
04850     B8 00 90 AD |  if_e	jmp	#LR__0286
04854     AE 01 00 FF 
04858     23 14 06 F6 | 	mov	arg02, ##@LR__5503
0485c     17 13 02 F6 | 	mov	arg01, local05
04860     DC 16 B2 FD | 	call	#__system___string_cmp
04864     00 FA 0D F2 | 	cmp	result1, #0 wz
04868     AC 00 90 AD |  if_e	jmp	#LR__0287
0486c     AE 01 00 FF 
04870     26 14 06 F6 | 	mov	arg02, ##@LR__5504
04874     17 13 02 F6 | 	mov	arg01, local05
04878     C4 16 B2 FD | 	call	#__system___string_cmp
0487c     00 FA 0D F2 | 	cmp	result1, #0 wz
04880     A0 00 90 AD |  if_e	jmp	#LR__0288
04884     AE 01 00 FF 
04888     28 14 06 F6 | 	mov	arg02, ##@LR__5505
0488c     17 13 02 F6 | 	mov	arg01, local05
04890     AC 16 B2 FD | 	call	#__system___string_cmp
04894     00 FA 0D F2 | 	cmp	result1, #0 wz
04898     94 00 90 AD |  if_e	jmp	#LR__0289
0489c     9C 00 90 FD | 	jmp	#LR__0290
048a0                 | LR__0277
048a0     01 00 00 FF 
048a4     00 31 06 F6 | 	mov	local06, ##768
048a8     98 00 90 FD | 	jmp	#LR__0291
048ac                 | LR__0278
048ac     01 00 00 FF 
048b0     01 31 06 F6 | 	mov	local06, ##769
048b4     8C 00 90 FD | 	jmp	#LR__0291
048b8                 | LR__0279
048b8     01 00 00 FF 
048bc     02 31 06 F6 | 	mov	local06, ##770
048c0     80 00 90 FD | 	jmp	#LR__0291
048c4                 | LR__0280
048c4     01 00 00 FF 
048c8     03 31 06 F6 | 	mov	local06, ##771
048cc     74 00 90 FD | 	jmp	#LR__0291
048d0                 | LR__0281
048d0     01 00 00 FF 
048d4     04 31 06 F6 | 	mov	local06, ##772
048d8     68 00 90 FD | 	jmp	#LR__0291
048dc                 | LR__0282
048dc     01 00 00 FF 
048e0     05 31 06 F6 | 	mov	local06, ##773
048e4     5C 00 90 FD | 	jmp	#LR__0291
048e8                 | LR__0283
048e8     01 00 00 FF 
048ec     06 31 06 F6 | 	mov	local06, ##774
048f0     50 00 90 FD | 	jmp	#LR__0291
048f4                 | LR__0284
048f4     01 00 00 FF 
048f8     07 31 06 F6 | 	mov	local06, ##775
048fc     44 00 90 FD | 	jmp	#LR__0291
04900                 | LR__0285
04900     01 00 00 FF 
04904     08 31 06 F6 | 	mov	local06, ##776
04908     38 00 90 FD | 	jmp	#LR__0291
0490c                 | LR__0286
0490c     01 00 00 FF 
04910     09 31 06 F6 | 	mov	local06, ##777
04914     2C 00 90 FD | 	jmp	#LR__0291
04918                 | LR__0287
04918     01 00 00 FF 
0491c     0A 31 06 F6 | 	mov	local06, ##778
04920     20 00 90 FD | 	jmp	#LR__0291
04924                 | LR__0288
04924     01 00 00 FF 
04928     0B 31 06 F6 | 	mov	local06, ##779
0492c     14 00 90 FD | 	jmp	#LR__0291
04930                 | LR__0289
04930     01 00 00 FF 
04934     0B 31 06 F6 | 	mov	local06, ##779
04938     08 00 90 FD | 	jmp	#LR__0291
0493c                 | LR__0290
0493c     00 FA 05 F6 | 	mov	result1, #0
04940     28 00 90 FD | 	jmp	#LR__0293
04944                 | LR__0291
04944                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04944     FF FF 7F FF 
04948     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
0494c     18 00 90 CD |  if_b	jmp	#LR__0292
04950     0A 2C 56 F2 | 	cmps	local04, #10 wc
04954     16 33 02 C6 |  if_b	mov	local07, local04
04958     01 32 66 C0 |  if_b	shl	local07, #1
0495c     16 33 02 C1 |  if_b	add	local07, local04
04960     02 32 66 C0 |  if_b	shl	local07, #2
04964     19 31 02 C1 |  if_b	add	local06, local07
04968                 | LR__0292
04968                 | ' return token
04968     18 FB 01 F6 | 	mov	result1, local06
0496c                 | LR__0293
0496c     A7 F0 03 F6 | 	mov	ptra, fp
04970     B2 00 A0 FD | 	call	#popregs_
04974                 | _isnotename_ret
04974     2D 00 64 FD | 	ret
04978                 | 
04978                 | ' 
04978                 | ' ' Check if the part is a separator, return a token or 0 if not found
04978                 | ' 
04978                 | ' function isseparator(s as string) as ubyte
04978                 | _isseparator
04978     01 4A 05 F6 | 	mov	COUNT_, #1
0497c     A8 00 A0 FD | 	call	#pushregs_
04980                 | ' 
04980                 | ' select case s
04980     09 27 02 F6 | 	mov	local01, arg01
04984     AE 01 00 FF 
04988     2A 14 06 F6 | 	mov	arg02, ##@LR__5506
0498c     13 13 02 F6 | 	mov	arg01, local01
04990     AC 15 B2 FD | 	call	#__system___string_cmp
04994     00 FA 0D F2 | 	cmp	result1, #0 wz
04998     54 01 90 AD |  if_e	jmp	#LR__0300
0499c     AE 01 00 FF 
049a0     2C 14 06 F6 | 	mov	arg02, ##@LR__5507
049a4     13 13 02 F6 | 	mov	arg01, local01
049a8     94 15 B2 FD | 	call	#__system___string_cmp
049ac     00 FA 0D F2 | 	cmp	result1, #0 wz
049b0     44 01 90 AD |  if_e	jmp	#LR__0301
049b4     AE 01 00 FF 
049b8     2E 14 06 F6 | 	mov	arg02, ##@LR__5508
049bc     13 13 02 F6 | 	mov	arg01, local01
049c0     7C 15 B2 FD | 	call	#__system___string_cmp
049c4     00 FA 0D F2 | 	cmp	result1, #0 wz
049c8     34 01 90 AD |  if_e	jmp	#LR__0302
049cc     AE 01 00 FF 
049d0     30 14 06 F6 | 	mov	arg02, ##@LR__5509
049d4     13 13 02 F6 | 	mov	arg01, local01
049d8     64 15 B2 FD | 	call	#__system___string_cmp
049dc     00 FA 0D F2 | 	cmp	result1, #0 wz
049e0     24 01 90 AD |  if_e	jmp	#LR__0303
049e4     AE 01 00 FF 
049e8     32 14 06 F6 | 	mov	arg02, ##@LR__5510
049ec     13 13 02 F6 | 	mov	arg01, local01
049f0     4C 15 B2 FD | 	call	#__system___string_cmp
049f4     00 FA 0D F2 | 	cmp	result1, #0 wz
049f8     14 01 90 AD |  if_e	jmp	#LR__0304
049fc     AE 01 00 FF 
04a00     34 14 06 F6 | 	mov	arg02, ##@LR__5511
04a04     13 13 02 F6 | 	mov	arg01, local01
04a08     34 15 B2 FD | 	call	#__system___string_cmp
04a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a10     04 01 90 AD |  if_e	jmp	#LR__0305
04a14     AE 01 00 FF 
04a18     36 14 06 F6 | 	mov	arg02, ##@LR__5512
04a1c     13 13 02 F6 | 	mov	arg01, local01
04a20     1C 15 B2 FD | 	call	#__system___string_cmp
04a24     00 FA 0D F2 | 	cmp	result1, #0 wz
04a28     F4 00 90 AD |  if_e	jmp	#LR__0306
04a2c     AE 01 00 FF 
04a30     38 14 06 F6 | 	mov	arg02, ##@LR__5513
04a34     13 13 02 F6 | 	mov	arg01, local01
04a38     04 15 B2 FD | 	call	#__system___string_cmp
04a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a40     E4 00 90 AD |  if_e	jmp	#LR__0307
04a44     AE 01 00 FF 
04a48     3A 14 06 F6 | 	mov	arg02, ##@LR__5514
04a4c     13 13 02 F6 | 	mov	arg01, local01
04a50     EC 14 B2 FD | 	call	#__system___string_cmp
04a54     00 FA 0D F2 | 	cmp	result1, #0 wz
04a58     D4 00 90 AD |  if_e	jmp	#LR__0308
04a5c     AE 01 00 FF 
04a60     3C 14 06 F6 | 	mov	arg02, ##@LR__5515
04a64     13 13 02 F6 | 	mov	arg01, local01
04a68     D4 14 B2 FD | 	call	#__system___string_cmp
04a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a70     C4 00 90 AD |  if_e	jmp	#LR__0309
04a74     AE 01 00 FF 
04a78     3E 14 06 F6 | 	mov	arg02, ##@LR__5516
04a7c     13 13 02 F6 | 	mov	arg01, local01
04a80     BC 14 B2 FD | 	call	#__system___string_cmp
04a84     00 FA 0D F2 | 	cmp	result1, #0 wz
04a88     B4 00 90 AD |  if_e	jmp	#LR__0310
04a8c     AE 01 00 FF 
04a90     40 14 06 F6 | 	mov	arg02, ##@LR__5517
04a94     13 13 02 F6 | 	mov	arg01, local01
04a98     A4 14 B2 FD | 	call	#__system___string_cmp
04a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04aa0     A4 00 90 AD |  if_e	jmp	#LR__0311
04aa4     AE 01 00 FF 
04aa8     42 14 06 F6 | 	mov	arg02, ##@LR__5518
04aac     13 13 02 F6 | 	mov	arg01, local01
04ab0     8C 14 B2 FD | 	call	#__system___string_cmp
04ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab8     94 00 90 AD |  if_e	jmp	#LR__0312
04abc     AE 01 00 FF 
04ac0     44 14 06 F6 | 	mov	arg02, ##@LR__5519
04ac4     13 13 02 F6 | 	mov	arg01, local01
04ac8     74 14 B2 FD | 	call	#__system___string_cmp
04acc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ad0     84 00 90 AD |  if_e	jmp	#LR__0313
04ad4     AE 01 00 FF 
04ad8     46 14 06 F6 | 	mov	arg02, ##@LR__5520
04adc     13 13 02 F6 | 	mov	arg01, local01
04ae0     5C 14 B2 FD | 	call	#__system___string_cmp
04ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae8     74 00 90 AD |  if_e	jmp	#LR__0314
04aec     78 00 90 FD | 	jmp	#LR__0315
04af0                 | LR__0300
04af0     01 FA 05 F6 | 	mov	result1, #1
04af4     74 00 90 FD | 	jmp	#LR__0316
04af8                 | LR__0301
04af8     02 FA 05 F6 | 	mov	result1, #2
04afc     6C 00 90 FD | 	jmp	#LR__0316
04b00                 | LR__0302
04b00     1B FA 05 F6 | 	mov	result1, #27
04b04     64 00 90 FD | 	jmp	#LR__0316
04b08                 | LR__0303
04b08     11 FA 05 F6 | 	mov	result1, #17
04b0c     5C 00 90 FD | 	jmp	#LR__0316
04b10                 | LR__0304
04b10     05 FA 05 F6 | 	mov	result1, #5
04b14     54 00 90 FD | 	jmp	#LR__0316
04b18                 | LR__0305
04b18     06 FA 05 F6 | 	mov	result1, #6
04b1c     4C 00 90 FD | 	jmp	#LR__0316
04b20                 | LR__0306
04b20     12 FA 05 F6 | 	mov	result1, #18
04b24     44 00 90 FD | 	jmp	#LR__0316
04b28                 | LR__0307
04b28     13 FA 05 F6 | 	mov	result1, #19
04b2c     3C 00 90 FD | 	jmp	#LR__0316
04b30                 | LR__0308
04b30     0C FA 05 F6 | 	mov	result1, #12
04b34     34 00 90 FD | 	jmp	#LR__0316
04b38                 | LR__0309
04b38     14 FA 05 F6 | 	mov	result1, #20
04b3c     2C 00 90 FD | 	jmp	#LR__0316
04b40                 | LR__0310
04b40     15 FA 05 F6 | 	mov	result1, #21
04b44     24 00 90 FD | 	jmp	#LR__0316
04b48                 | LR__0311
04b48     16 FA 05 F6 | 	mov	result1, #22
04b4c     1C 00 90 FD | 	jmp	#LR__0316
04b50                 | LR__0312
04b50     FF FB 05 F6 | 	mov	result1, #511
04b54     14 00 90 FD | 	jmp	#LR__0316
04b58                 | LR__0313
04b58     0F FA 05 F6 | 	mov	result1, #15
04b5c     0C 00 90 FD | 	jmp	#LR__0316
04b60                 | LR__0314
04b60     10 FA 05 F6 | 	mov	result1, #16
04b64     04 00 90 FD | 	jmp	#LR__0316
04b68                 | LR__0315
04b68     00 FA 05 F6 | 	mov	result1, #0
04b6c                 | LR__0316
04b6c     A7 F0 03 F6 | 	mov	ptra, fp
04b70     B2 00 A0 FD | 	call	#popregs_
04b74                 | _isseparator_ret
04b74     2D 00 64 FD | 	ret
04b78                 | 
04b78                 | ' 
04b78                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04b78                 | ' 
04b78                 | ' function iscommand(s as string) as ubyte
04b78                 | _iscommand
04b78     01 4A 05 F6 | 	mov	COUNT_, #1
04b7c     A8 00 A0 FD | 	call	#pushregs_
04b80                 | ' 
04b80                 | ' select case s
04b80     09 27 02 F6 | 	mov	local01, arg01
04b84     AE 01 00 FF 
04b88     4A 14 06 F6 | 	mov	arg02, ##@LR__5522
04b8c     13 13 02 F6 | 	mov	arg01, local01
04b90     AC 13 B2 FD | 	call	#__system___string_cmp
04b94     00 FA 0D F2 | 	cmp	result1, #0 wz
04b98     7C 0C 90 AD |  if_e	jmp	#LR__0320
04b9c     AE 01 00 FF 
04ba0     4F 14 06 F6 | 	mov	arg02, ##@LR__5523
04ba4     13 13 02 F6 | 	mov	arg01, local01
04ba8     94 13 B2 FD | 	call	#__system___string_cmp
04bac     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb0     6C 0C 90 AD |  if_e	jmp	#LR__0321
04bb4     AE 01 00 FF 
04bb8     52 14 06 F6 | 	mov	arg02, ##@LR__5524
04bbc     13 13 02 F6 | 	mov	arg01, local01
04bc0     7C 13 B2 FD | 	call	#__system___string_cmp
04bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bc8     5C 0C 90 AD |  if_e	jmp	#LR__0322
04bcc     AE 01 00 FF 
04bd0     57 14 06 F6 | 	mov	arg02, ##@LR__5525
04bd4     13 13 02 F6 | 	mov	arg01, local01
04bd8     64 13 B2 FD | 	call	#__system___string_cmp
04bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
04be0     4C 0C 90 AD |  if_e	jmp	#LR__0323
04be4     AE 01 00 FF 
04be8     5B 14 06 F6 | 	mov	arg02, ##@LR__5526
04bec     13 13 02 F6 | 	mov	arg01, local01
04bf0     4C 13 B2 FD | 	call	#__system___string_cmp
04bf4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bf8     3C 0C 90 AD |  if_e	jmp	#LR__0324
04bfc     AE 01 00 FF 
04c00     60 14 06 F6 | 	mov	arg02, ##@LR__5527
04c04     13 13 02 F6 | 	mov	arg01, local01
04c08     34 13 B2 FD | 	call	#__system___string_cmp
04c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c10     2C 0C 90 AD |  if_e	jmp	#LR__0325
04c14     AE 01 00 FF 
04c18     64 14 06 F6 | 	mov	arg02, ##@LR__5528
04c1c     13 13 02 F6 | 	mov	arg01, local01
04c20     1C 13 B2 FD | 	call	#__system___string_cmp
04c24     00 FA 0D F2 | 	cmp	result1, #0 wz
04c28     1C 0C 90 AD |  if_e	jmp	#LR__0326
04c2c     AE 01 00 FF 
04c30     67 14 06 F6 | 	mov	arg02, ##@LR__5529
04c34     13 13 02 F6 | 	mov	arg01, local01
04c38     04 13 B2 FD | 	call	#__system___string_cmp
04c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c40     0C 0C 90 AD |  if_e	jmp	#LR__0327
04c44     AE 01 00 FF 
04c48     72 14 06 F6 | 	mov	arg02, ##@LR__5530
04c4c     13 13 02 F6 | 	mov	arg01, local01
04c50     EC 12 B2 FD | 	call	#__system___string_cmp
04c54     00 FA 0D F2 | 	cmp	result1, #0 wz
04c58     FC 0B 90 AD |  if_e	jmp	#LR__0328
04c5c     AE 01 00 FF 
04c60     76 14 06 F6 | 	mov	arg02, ##@LR__5531
04c64     13 13 02 F6 | 	mov	arg01, local01
04c68     D4 12 B2 FD | 	call	#__system___string_cmp
04c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c70     EC 0B 90 AD |  if_e	jmp	#LR__0329
04c74     AE 01 00 FF 
04c78     80 14 06 F6 | 	mov	arg02, ##@LR__5532
04c7c     13 13 02 F6 | 	mov	arg01, local01
04c80     BC 12 B2 FD | 	call	#__system___string_cmp
04c84     00 FA 0D F2 | 	cmp	result1, #0 wz
04c88     DC 0B 90 AD |  if_e	jmp	#LR__0330
04c8c     AE 01 00 FF 
04c90     84 14 06 F6 | 	mov	arg02, ##@LR__5533
04c94     13 13 02 F6 | 	mov	arg01, local01
04c98     A4 12 B2 FD | 	call	#__system___string_cmp
04c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ca0     CC 0B 90 AD |  if_e	jmp	#LR__0331
04ca4     AE 01 00 FF 
04ca8     8E 14 06 F6 | 	mov	arg02, ##@LR__5534
04cac     13 13 02 F6 | 	mov	arg01, local01
04cb0     8C 12 B2 FD | 	call	#__system___string_cmp
04cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04cb8     BC 0B 90 AD |  if_e	jmp	#LR__0332
04cbc     AE 01 00 FF 
04cc0     92 14 06 F6 | 	mov	arg02, ##@LR__5535
04cc4     13 13 02 F6 | 	mov	arg01, local01
04cc8     74 12 B2 FD | 	call	#__system___string_cmp
04ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd0     AC 0B 90 AD |  if_e	jmp	#LR__0333
04cd4     AE 01 00 FF 
04cd8     9D 14 06 F6 | 	mov	arg02, ##@LR__5536
04cdc     13 13 02 F6 | 	mov	arg01, local01
04ce0     5C 12 B2 FD | 	call	#__system___string_cmp
04ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ce8     9C 0B 90 AD |  if_e	jmp	#LR__0334
04cec     AE 01 00 FF 
04cf0     A1 14 06 F6 | 	mov	arg02, ##@LR__5537
04cf4     13 13 02 F6 | 	mov	arg01, local01
04cf8     44 12 B2 FD | 	call	#__system___string_cmp
04cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
04d00     8C 0B 90 AD |  if_e	jmp	#LR__0335
04d04     AE 01 00 FF 
04d08     A8 14 06 F6 | 	mov	arg02, ##@LR__5538
04d0c     13 13 02 F6 | 	mov	arg01, local01
04d10     2C 12 B2 FD | 	call	#__system___string_cmp
04d14     00 FA 0D F2 | 	cmp	result1, #0 wz
04d18     7C 0B 90 AD |  if_e	jmp	#LR__0336
04d1c     AE 01 00 FF 
04d20     AC 14 06 F6 | 	mov	arg02, ##@LR__5539
04d24     13 13 02 F6 | 	mov	arg01, local01
04d28     14 12 B2 FD | 	call	#__system___string_cmp
04d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d30     6C 0B 90 AD |  if_e	jmp	#LR__0337
04d34     AE 01 00 FF 
04d38     B2 14 06 F6 | 	mov	arg02, ##@LR__5540
04d3c     13 13 02 F6 | 	mov	arg01, local01
04d40     FC 11 B2 FD | 	call	#__system___string_cmp
04d44     00 FA 0D F2 | 	cmp	result1, #0 wz
04d48     5C 0B 90 AD |  if_e	jmp	#LR__0338
04d4c     AE 01 00 FF 
04d50     B8 14 06 F6 | 	mov	arg02, ##@LR__5541
04d54     13 13 02 F6 | 	mov	arg01, local01
04d58     E4 11 B2 FD | 	call	#__system___string_cmp
04d5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d60     4C 0B 90 AD |  if_e	jmp	#LR__0339
04d64     AE 01 00 FF 
04d68     BC 14 06 F6 | 	mov	arg02, ##@LR__5542
04d6c     13 13 02 F6 | 	mov	arg01, local01
04d70     CC 11 B2 FD | 	call	#__system___string_cmp
04d74     00 FA 0D F2 | 	cmp	result1, #0 wz
04d78     3C 0B 90 AD |  if_e	jmp	#LR__0340
04d7c     AE 01 00 FF 
04d80     C4 14 06 F6 | 	mov	arg02, ##@LR__5543
04d84     13 13 02 F6 | 	mov	arg01, local01
04d88     B4 11 B2 FD | 	call	#__system___string_cmp
04d8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d90     2C 0B 90 AD |  if_e	jmp	#LR__0341
04d94     AE 01 00 FF 
04d98     CA 14 06 F6 | 	mov	arg02, ##@LR__5544
04d9c     13 13 02 F6 | 	mov	arg01, local01
04da0     9C 11 B2 FD | 	call	#__system___string_cmp
04da4     00 FA 0D F2 | 	cmp	result1, #0 wz
04da8     1C 0B 90 AD |  if_e	jmp	#LR__0342
04dac     AE 01 00 FF 
04db0     CD 14 06 F6 | 	mov	arg02, ##@LR__5545
04db4     13 13 02 F6 | 	mov	arg01, local01
04db8     84 11 B2 FD | 	call	#__system___string_cmp
04dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04dc0     0C 0B 90 AD |  if_e	jmp	#LR__0343
04dc4     AE 01 00 FF 
04dc8     D2 14 06 F6 | 	mov	arg02, ##@LR__5546
04dcc     13 13 02 F6 | 	mov	arg01, local01
04dd0     6C 11 B2 FD | 	call	#__system___string_cmp
04dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
04dd8     FC 0A 90 AD |  if_e	jmp	#LR__0344
04ddc     AE 01 00 FF 
04de0     D9 14 06 F6 | 	mov	arg02, ##@LR__5547
04de4     13 13 02 F6 | 	mov	arg01, local01
04de8     54 11 B2 FD | 	call	#__system___string_cmp
04dec     00 FA 0D F2 | 	cmp	result1, #0 wz
04df0     EC 0A 90 AD |  if_e	jmp	#LR__0345
04df4     AE 01 00 FF 
04df8     DE 14 06 F6 | 	mov	arg02, ##@LR__5548
04dfc     13 13 02 F6 | 	mov	arg01, local01
04e00     3C 11 B2 FD | 	call	#__system___string_cmp
04e04     00 FA 0D F2 | 	cmp	result1, #0 wz
04e08     DC 0A 90 AD |  if_e	jmp	#LR__0346
04e0c     AE 01 00 FF 
04e10     E5 14 06 F6 | 	mov	arg02, ##@LR__5549
04e14     13 13 02 F6 | 	mov	arg01, local01
04e18     24 11 B2 FD | 	call	#__system___string_cmp
04e1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e20     CC 0A 90 AD |  if_e	jmp	#LR__0347
04e24     AE 01 00 FF 
04e28     EC 14 06 F6 | 	mov	arg02, ##@LR__5550
04e2c     13 13 02 F6 | 	mov	arg01, local01
04e30     0C 11 B2 FD | 	call	#__system___string_cmp
04e34     00 FA 0D F2 | 	cmp	result1, #0 wz
04e38     BC 0A 90 AD |  if_e	jmp	#LR__0348
04e3c     AE 01 00 FF 
04e40     F6 14 06 F6 | 	mov	arg02, ##@LR__5551
04e44     13 13 02 F6 | 	mov	arg01, local01
04e48     F4 10 B2 FD | 	call	#__system___string_cmp
04e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e50     AC 0A 90 AD |  if_e	jmp	#LR__0349
04e54     AE 01 00 FF 
04e58     FA 14 06 F6 | 	mov	arg02, ##@LR__5552
04e5c     13 13 02 F6 | 	mov	arg01, local01
04e60     DC 10 B2 FD | 	call	#__system___string_cmp
04e64     00 FA 0D F2 | 	cmp	result1, #0 wz
04e68     9C 0A 90 AD |  if_e	jmp	#LR__0350
04e6c     AE 01 00 FF 
04e70     FE 14 06 F6 | 	mov	arg02, ##@LR__5553
04e74     13 13 02 F6 | 	mov	arg01, local01
04e78     C4 10 B2 FD | 	call	#__system___string_cmp
04e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e80     8C 0A 90 AD |  if_e	jmp	#LR__0351
04e84     AE 01 00 FF 
04e88     05 15 06 F6 | 	mov	arg02, ##@LR__5554
04e8c     13 13 02 F6 | 	mov	arg01, local01
04e90     AC 10 B2 FD | 	call	#__system___string_cmp
04e94     00 FA 0D F2 | 	cmp	result1, #0 wz
04e98     7C 0A 90 AD |  if_e	jmp	#LR__0352
04e9c     AE 01 00 FF 
04ea0     09 15 06 F6 | 	mov	arg02, ##@LR__5555
04ea4     13 13 02 F6 | 	mov	arg01, local01
04ea8     94 10 B2 FD | 	call	#__system___string_cmp
04eac     00 FA 0D F2 | 	cmp	result1, #0 wz
04eb0     6C 0A 90 AD |  if_e	jmp	#LR__0353
04eb4     AE 01 00 FF 
04eb8     0D 15 06 F6 | 	mov	arg02, ##@LR__5556
04ebc     13 13 02 F6 | 	mov	arg01, local01
04ec0     7C 10 B2 FD | 	call	#__system___string_cmp
04ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ec8     5C 0A 90 AD |  if_e	jmp	#LR__0354
04ecc     AE 01 00 FF 
04ed0     13 15 06 F6 | 	mov	arg02, ##@LR__5557
04ed4     13 13 02 F6 | 	mov	arg01, local01
04ed8     64 10 B2 FD | 	call	#__system___string_cmp
04edc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ee0     4C 0A 90 AD |  if_e	jmp	#LR__0355
04ee4     AE 01 00 FF 
04ee8     18 15 06 F6 | 	mov	arg02, ##@LR__5558
04eec     13 13 02 F6 | 	mov	arg01, local01
04ef0     4C 10 B2 FD | 	call	#__system___string_cmp
04ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ef8     3C 0A 90 AD |  if_e	jmp	#LR__0356
04efc     AE 01 00 FF 
04f00     1F 15 06 F6 | 	mov	arg02, ##@LR__5559
04f04     13 13 02 F6 | 	mov	arg01, local01
04f08     34 10 B2 FD | 	call	#__system___string_cmp
04f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f10     2C 0A 90 AD |  if_e	jmp	#LR__0357
04f14     AE 01 00 FF 
04f18     23 15 06 F6 | 	mov	arg02, ##@LR__5560
04f1c     13 13 02 F6 | 	mov	arg01, local01
04f20     1C 10 B2 FD | 	call	#__system___string_cmp
04f24     00 FA 0D F2 | 	cmp	result1, #0 wz
04f28     1C 0A 90 AD |  if_e	jmp	#LR__0358
04f2c     AE 01 00 FF 
04f30     28 15 06 F6 | 	mov	arg02, ##@LR__5561
04f34     13 13 02 F6 | 	mov	arg01, local01
04f38     04 10 B2 FD | 	call	#__system___string_cmp
04f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f40     0C 0A 90 AD |  if_e	jmp	#LR__0359
04f44     AE 01 00 FF 
04f48     2C 15 06 F6 | 	mov	arg02, ##@LR__5562
04f4c     13 13 02 F6 | 	mov	arg01, local01
04f50     EC 0F B2 FD | 	call	#__system___string_cmp
04f54     00 FA 0D F2 | 	cmp	result1, #0 wz
04f58     FC 09 90 AD |  if_e	jmp	#LR__0360
04f5c     AE 01 00 FF 
04f60     32 15 06 F6 | 	mov	arg02, ##@LR__5563
04f64     13 13 02 F6 | 	mov	arg01, local01
04f68     D4 0F B2 FD | 	call	#__system___string_cmp
04f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f70     EC 09 90 AD |  if_e	jmp	#LR__0361
04f74     AE 01 00 FF 
04f78     35 15 06 F6 | 	mov	arg02, ##@LR__5564
04f7c     13 13 02 F6 | 	mov	arg01, local01
04f80     BC 0F B2 FD | 	call	#__system___string_cmp
04f84     00 FA 0D F2 | 	cmp	result1, #0 wz
04f88     DC 09 90 AD |  if_e	jmp	#LR__0362
04f8c     AE 01 00 FF 
04f90     3D 15 06 F6 | 	mov	arg02, ##@LR__5565
04f94     13 13 02 F6 | 	mov	arg01, local01
04f98     A4 0F B2 FD | 	call	#__system___string_cmp
04f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04fa0     CC 09 90 AD |  if_e	jmp	#LR__0363
04fa4     AE 01 00 FF 
04fa8     41 15 06 F6 | 	mov	arg02, ##@LR__5566
04fac     13 13 02 F6 | 	mov	arg01, local01
04fb0     8C 0F B2 FD | 	call	#__system___string_cmp
04fb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fb8     BC 09 90 AD |  if_e	jmp	#LR__0364
04fbc     AE 01 00 FF 
04fc0     46 15 06 F6 | 	mov	arg02, ##@LR__5567
04fc4     13 13 02 F6 | 	mov	arg01, local01
04fc8     74 0F B2 FD | 	call	#__system___string_cmp
04fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
04fd0     AC 09 90 AD |  if_e	jmp	#LR__0365
04fd4     AE 01 00 FF 
04fd8     4A 15 06 F6 | 	mov	arg02, ##@LR__5568
04fdc     13 13 02 F6 | 	mov	arg01, local01
04fe0     5C 0F B2 FD | 	call	#__system___string_cmp
04fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fe8     9C 09 90 AD |  if_e	jmp	#LR__0366
04fec     AE 01 00 FF 
04ff0     4F 15 06 F6 | 	mov	arg02, ##@LR__5569
04ff4     13 13 02 F6 | 	mov	arg01, local01
04ff8     44 0F B2 FD | 	call	#__system___string_cmp
04ffc     00 FA 0D F2 | 	cmp	result1, #0 wz
05000     8C 09 90 AD |  if_e	jmp	#LR__0367
05004     AE 01 00 FF 
05008     53 15 06 F6 | 	mov	arg02, ##@LR__5570
0500c     13 13 02 F6 | 	mov	arg01, local01
05010     2C 0F B2 FD | 	call	#__system___string_cmp
05014     00 FA 0D F2 | 	cmp	result1, #0 wz
05018     7C 09 90 AD |  if_e	jmp	#LR__0368
0501c     AE 01 00 FF 
05020     56 15 06 F6 | 	mov	arg02, ##@LR__5571
05024     13 13 02 F6 | 	mov	arg01, local01
05028     14 0F B2 FD | 	call	#__system___string_cmp
0502c     00 FA 0D F2 | 	cmp	result1, #0 wz
05030     6C 09 90 AD |  if_e	jmp	#LR__0369
05034     AE 01 00 FF 
05038     5C 15 06 F6 | 	mov	arg02, ##@LR__5572
0503c     13 13 02 F6 | 	mov	arg01, local01
05040     FC 0E B2 FD | 	call	#__system___string_cmp
05044     00 FA 0D F2 | 	cmp	result1, #0 wz
05048     5C 09 90 AD |  if_e	jmp	#LR__0370
0504c     AE 01 00 FF 
05050     60 15 06 F6 | 	mov	arg02, ##@LR__5573
05054     13 13 02 F6 | 	mov	arg01, local01
05058     E4 0E B2 FD | 	call	#__system___string_cmp
0505c     00 FA 0D F2 | 	cmp	result1, #0 wz
05060     4C 09 90 AD |  if_e	jmp	#LR__0371
05064     AE 01 00 FF 
05068     64 15 06 F6 | 	mov	arg02, ##@LR__5574
0506c     13 13 02 F6 | 	mov	arg01, local01
05070     CC 0E B2 FD | 	call	#__system___string_cmp
05074     00 FA 0D F2 | 	cmp	result1, #0 wz
05078     3C 09 90 AD |  if_e	jmp	#LR__0372
0507c     AE 01 00 FF 
05080     6A 15 06 F6 | 	mov	arg02, ##@LR__5575
05084     13 13 02 F6 | 	mov	arg01, local01
05088     B4 0E B2 FD | 	call	#__system___string_cmp
0508c     00 FA 0D F2 | 	cmp	result1, #0 wz
05090     2C 09 90 AD |  if_e	jmp	#LR__0373
05094     AE 01 00 FF 
05098     6F 15 06 F6 | 	mov	arg02, ##@LR__5576
0509c     13 13 02 F6 | 	mov	arg01, local01
050a0     9C 0E B2 FD | 	call	#__system___string_cmp
050a4     00 FA 0D F2 | 	cmp	result1, #0 wz
050a8     1C 09 90 AD |  if_e	jmp	#LR__0374
050ac     AE 01 00 FF 
050b0     72 15 06 F6 | 	mov	arg02, ##@LR__5577
050b4     13 13 02 F6 | 	mov	arg01, local01
050b8     84 0E B2 FD | 	call	#__system___string_cmp
050bc     00 FA 0D F2 | 	cmp	result1, #0 wz
050c0     0C 09 90 AD |  if_e	jmp	#LR__0375
050c4     AE 01 00 FF 
050c8     75 15 06 F6 | 	mov	arg02, ##@LR__5578
050cc     13 13 02 F6 | 	mov	arg01, local01
050d0     6C 0E B2 FD | 	call	#__system___string_cmp
050d4     00 FA 0D F2 | 	cmp	result1, #0 wz
050d8     FC 08 90 AD |  if_e	jmp	#LR__0376
050dc     AE 01 00 FF 
050e0     79 15 06 F6 | 	mov	arg02, ##@LR__5579
050e4     13 13 02 F6 | 	mov	arg01, local01
050e8     54 0E B2 FD | 	call	#__system___string_cmp
050ec     00 FA 0D F2 | 	cmp	result1, #0 wz
050f0     EC 08 90 AD |  if_e	jmp	#LR__0377
050f4     AE 01 00 FF 
050f8     7C 15 06 F6 | 	mov	arg02, ##@LR__5580
050fc     13 13 02 F6 | 	mov	arg01, local01
05100     3C 0E B2 FD | 	call	#__system___string_cmp
05104     00 FA 0D F2 | 	cmp	result1, #0 wz
05108     DC 08 90 AD |  if_e	jmp	#LR__0378
0510c     AE 01 00 FF 
05110     82 15 06 F6 | 	mov	arg02, ##@LR__5581
05114     13 13 02 F6 | 	mov	arg01, local01
05118     24 0E B2 FD | 	call	#__system___string_cmp
0511c     00 FA 0D F2 | 	cmp	result1, #0 wz
05120     CC 08 90 AD |  if_e	jmp	#LR__0379
05124     AE 01 00 FF 
05128     87 15 06 F6 | 	mov	arg02, ##@LR__5582
0512c     13 13 02 F6 | 	mov	arg01, local01
05130     0C 0E B2 FD | 	call	#__system___string_cmp
05134     00 FA 0D F2 | 	cmp	result1, #0 wz
05138     BC 08 90 AD |  if_e	jmp	#LR__0380
0513c     AE 01 00 FF 
05140     8A 15 06 F6 | 	mov	arg02, ##@LR__5583
05144     13 13 02 F6 | 	mov	arg01, local01
05148     F4 0D B2 FD | 	call	#__system___string_cmp
0514c     00 FA 0D F2 | 	cmp	result1, #0 wz
05150     AC 08 90 AD |  if_e	jmp	#LR__0381
05154     AE 01 00 FF 
05158     8F 15 06 F6 | 	mov	arg02, ##@LR__5584
0515c     13 13 02 F6 | 	mov	arg01, local01
05160     DC 0D B2 FD | 	call	#__system___string_cmp
05164     00 FA 0D F2 | 	cmp	result1, #0 wz
05168     9C 08 90 AD |  if_e	jmp	#LR__0382
0516c     AE 01 00 FF 
05170     93 15 06 F6 | 	mov	arg02, ##@LR__5585
05174     13 13 02 F6 | 	mov	arg01, local01
05178     C4 0D B2 FD | 	call	#__system___string_cmp
0517c     00 FA 0D F2 | 	cmp	result1, #0 wz
05180     8C 08 90 AD |  if_e	jmp	#LR__0383
05184     AE 01 00 FF 
05188     99 15 06 F6 | 	mov	arg02, ##@LR__5586
0518c     13 13 02 F6 | 	mov	arg01, local01
05190     AC 0D B2 FD | 	call	#__system___string_cmp
05194     00 FA 0D F2 | 	cmp	result1, #0 wz
05198     7C 08 90 AD |  if_e	jmp	#LR__0384
0519c     AE 01 00 FF 
051a0     9F 15 06 F6 | 	mov	arg02, ##@LR__5587
051a4     13 13 02 F6 | 	mov	arg01, local01
051a8     94 0D B2 FD | 	call	#__system___string_cmp
051ac     00 FA 0D F2 | 	cmp	result1, #0 wz
051b0     6C 08 90 AD |  if_e	jmp	#LR__0385
051b4     AE 01 00 FF 
051b8     A4 15 06 F6 | 	mov	arg02, ##@LR__5588
051bc     13 13 02 F6 | 	mov	arg01, local01
051c0     7C 0D B2 FD | 	call	#__system___string_cmp
051c4     00 FA 0D F2 | 	cmp	result1, #0 wz
051c8     5C 08 90 AD |  if_e	jmp	#LR__0386
051cc     AE 01 00 FF 
051d0     A7 15 06 F6 | 	mov	arg02, ##@LR__5589
051d4     13 13 02 F6 | 	mov	arg01, local01
051d8     64 0D B2 FD | 	call	#__system___string_cmp
051dc     00 FA 0D F2 | 	cmp	result1, #0 wz
051e0     4C 08 90 AD |  if_e	jmp	#LR__0387
051e4     AE 01 00 FF 
051e8     AD 15 06 F6 | 	mov	arg02, ##@LR__5590
051ec     13 13 02 F6 | 	mov	arg01, local01
051f0     4C 0D B2 FD | 	call	#__system___string_cmp
051f4     00 FA 0D F2 | 	cmp	result1, #0 wz
051f8     3C 08 90 AD |  if_e	jmp	#LR__0388
051fc     AE 01 00 FF 
05200     B1 15 06 F6 | 	mov	arg02, ##@LR__5591
05204     13 13 02 F6 | 	mov	arg01, local01
05208     34 0D B2 FD | 	call	#__system___string_cmp
0520c     00 FA 0D F2 | 	cmp	result1, #0 wz
05210     2C 08 90 AD |  if_e	jmp	#LR__0389
05214     AE 01 00 FF 
05218     B6 15 06 F6 | 	mov	arg02, ##@LR__5592
0521c     13 13 02 F6 | 	mov	arg01, local01
05220     1C 0D B2 FD | 	call	#__system___string_cmp
05224     00 FA 0D F2 | 	cmp	result1, #0 wz
05228     1C 08 90 AD |  if_e	jmp	#LR__0390
0522c     AE 01 00 FF 
05230     B9 15 06 F6 | 	mov	arg02, ##@LR__5593
05234     13 13 02 F6 | 	mov	arg01, local01
05238     04 0D B2 FD | 	call	#__system___string_cmp
0523c     00 FA 0D F2 | 	cmp	result1, #0 wz
05240     0C 08 90 AD |  if_e	jmp	#LR__0391
05244     AE 01 00 FF 
05248     BC 15 06 F6 | 	mov	arg02, ##@LR__5594
0524c     13 13 02 F6 | 	mov	arg01, local01
05250     EC 0C B2 FD | 	call	#__system___string_cmp
05254     00 FA 0D F2 | 	cmp	result1, #0 wz
05258     FC 07 90 AD |  if_e	jmp	#LR__0392
0525c     AE 01 00 FF 
05260     C1 15 06 F6 | 	mov	arg02, ##@LR__5595
05264     13 13 02 F6 | 	mov	arg01, local01
05268     D4 0C B2 FD | 	call	#__system___string_cmp
0526c     00 FA 0D F2 | 	cmp	result1, #0 wz
05270     EC 07 90 AD |  if_e	jmp	#LR__0393
05274     AE 01 00 FF 
05278     C7 15 06 F6 | 	mov	arg02, ##@LR__5596
0527c     13 13 02 F6 | 	mov	arg01, local01
05280     BC 0C B2 FD | 	call	#__system___string_cmp
05284     00 FA 0D F2 | 	cmp	result1, #0 wz
05288     DC 07 90 AD |  if_e	jmp	#LR__0394
0528c     AE 01 00 FF 
05290     CB 15 06 F6 | 	mov	arg02, ##@LR__5597
05294     13 13 02 F6 | 	mov	arg01, local01
05298     A4 0C B2 FD | 	call	#__system___string_cmp
0529c     00 FA 0D F2 | 	cmp	result1, #0 wz
052a0     CC 07 90 AD |  if_e	jmp	#LR__0395
052a4     AE 01 00 FF 
052a8     D4 15 06 F6 | 	mov	arg02, ##@LR__5598
052ac     13 13 02 F6 | 	mov	arg01, local01
052b0     8C 0C B2 FD | 	call	#__system___string_cmp
052b4     00 FA 0D F2 | 	cmp	result1, #0 wz
052b8     BC 07 90 AD |  if_e	jmp	#LR__0396
052bc     AE 01 00 FF 
052c0     DA 15 06 F6 | 	mov	arg02, ##@LR__5599
052c4     13 13 02 F6 | 	mov	arg01, local01
052c8     74 0C B2 FD | 	call	#__system___string_cmp
052cc     00 FA 0D F2 | 	cmp	result1, #0 wz
052d0     AC 07 90 AD |  if_e	jmp	#LR__0397
052d4     AE 01 00 FF 
052d8     E0 15 06 F6 | 	mov	arg02, ##@LR__5600
052dc     13 13 02 F6 | 	mov	arg01, local01
052e0     5C 0C B2 FD | 	call	#__system___string_cmp
052e4     00 FA 0D F2 | 	cmp	result1, #0 wz
052e8     9C 07 90 AD |  if_e	jmp	#LR__0398
052ec     AE 01 00 FF 
052f0     E9 15 06 F6 | 	mov	arg02, ##@LR__5601
052f4     13 13 02 F6 | 	mov	arg01, local01
052f8     44 0C B2 FD | 	call	#__system___string_cmp
052fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05300     8C 07 90 AD |  if_e	jmp	#LR__0399
05304     AE 01 00 FF 
05308     F3 15 06 F6 | 	mov	arg02, ##@LR__5602
0530c     13 13 02 F6 | 	mov	arg01, local01
05310     2C 0C B2 FD | 	call	#__system___string_cmp
05314     00 FA 0D F2 | 	cmp	result1, #0 wz
05318     7C 07 90 AD |  if_e	jmp	#LR__0400
0531c     AE 01 00 FF 
05320     FC 15 06 F6 | 	mov	arg02, ##@LR__5603
05324     13 13 02 F6 | 	mov	arg01, local01
05328     14 0C B2 FD | 	call	#__system___string_cmp
0532c     00 FA 0D F2 | 	cmp	result1, #0 wz
05330     6C 07 90 AD |  if_e	jmp	#LR__0401
05334     AF 01 00 FF 
05338     01 14 06 F6 | 	mov	arg02, ##@LR__5604
0533c     13 13 02 F6 | 	mov	arg01, local01
05340     FC 0B B2 FD | 	call	#__system___string_cmp
05344     00 FA 0D F2 | 	cmp	result1, #0 wz
05348     5C 07 90 AD |  if_e	jmp	#LR__0402
0534c     AF 01 00 FF 
05350     04 14 06 F6 | 	mov	arg02, ##@LR__5605
05354     13 13 02 F6 | 	mov	arg01, local01
05358     E4 0B B2 FD | 	call	#__system___string_cmp
0535c     00 FA 0D F2 | 	cmp	result1, #0 wz
05360     4C 07 90 AD |  if_e	jmp	#LR__0403
05364     AF 01 00 FF 
05368     0F 14 06 F6 | 	mov	arg02, ##@LR__5606
0536c     13 13 02 F6 | 	mov	arg01, local01
05370     CC 0B B2 FD | 	call	#__system___string_cmp
05374     00 FA 0D F2 | 	cmp	result1, #0 wz
05378     3C 07 90 AD |  if_e	jmp	#LR__0404
0537c     AF 01 00 FF 
05380     14 14 06 F6 | 	mov	arg02, ##@LR__5607
05384     13 13 02 F6 | 	mov	arg01, local01
05388     B4 0B B2 FD | 	call	#__system___string_cmp
0538c     00 FA 0D F2 | 	cmp	result1, #0 wz
05390     2C 07 90 AD |  if_e	jmp	#LR__0405
05394     AF 01 00 FF 
05398     18 14 06 F6 | 	mov	arg02, ##@LR__5608
0539c     13 13 02 F6 | 	mov	arg01, local01
053a0     9C 0B B2 FD | 	call	#__system___string_cmp
053a4     00 FA 0D F2 | 	cmp	result1, #0 wz
053a8     1C 07 90 AD |  if_e	jmp	#LR__0406
053ac     AF 01 00 FF 
053b0     1D 14 06 F6 | 	mov	arg02, ##@LR__5609
053b4     13 13 02 F6 | 	mov	arg01, local01
053b8     84 0B B2 FD | 	call	#__system___string_cmp
053bc     00 FA 0D F2 | 	cmp	result1, #0 wz
053c0     0C 07 90 AD |  if_e	jmp	#LR__0407
053c4     AF 01 00 FF 
053c8     21 14 06 F6 | 	mov	arg02, ##@LR__5610
053cc     13 13 02 F6 | 	mov	arg01, local01
053d0     6C 0B B2 FD | 	call	#__system___string_cmp
053d4     00 FA 0D F2 | 	cmp	result1, #0 wz
053d8     FC 06 90 AD |  if_e	jmp	#LR__0408
053dc     AF 01 00 FF 
053e0     2A 14 06 F6 | 	mov	arg02, ##@LR__5611
053e4     13 13 02 F6 | 	mov	arg01, local01
053e8     54 0B B2 FD | 	call	#__system___string_cmp
053ec     00 FA 0D F2 | 	cmp	result1, #0 wz
053f0     EC 06 90 AD |  if_e	jmp	#LR__0409
053f4     AF 01 00 FF 
053f8     2F 14 06 F6 | 	mov	arg02, ##@LR__5612
053fc     13 13 02 F6 | 	mov	arg01, local01
05400     3C 0B B2 FD | 	call	#__system___string_cmp
05404     00 FA 0D F2 | 	cmp	result1, #0 wz
05408     DC 06 90 AD |  if_e	jmp	#LR__0410
0540c     AF 01 00 FF 
05410     35 14 06 F6 | 	mov	arg02, ##@LR__5613
05414     13 13 02 F6 | 	mov	arg01, local01
05418     24 0B B2 FD | 	call	#__system___string_cmp
0541c     00 FA 0D F2 | 	cmp	result1, #0 wz
05420     CC 06 90 AD |  if_e	jmp	#LR__0411
05424     AF 01 00 FF 
05428     37 14 06 F6 | 	mov	arg02, ##@LR__5614
0542c     13 13 02 F6 | 	mov	arg01, local01
05430     0C 0B B2 FD | 	call	#__system___string_cmp
05434     00 FA 0D F2 | 	cmp	result1, #0 wz
05438     BC 06 90 AD |  if_e	jmp	#LR__0412
0543c     AF 01 00 FF 
05440     3B 14 06 F6 | 	mov	arg02, ##@LR__5615
05444     13 13 02 F6 | 	mov	arg01, local01
05448     F4 0A B2 FD | 	call	#__system___string_cmp
0544c     00 FA 0D F2 | 	cmp	result1, #0 wz
05450     AC 06 90 AD |  if_e	jmp	#LR__0413
05454     AF 01 00 FF 
05458     3F 14 06 F6 | 	mov	arg02, ##@LR__5616
0545c     13 13 02 F6 | 	mov	arg01, local01
05460     DC 0A B2 FD | 	call	#__system___string_cmp
05464     00 FA 0D F2 | 	cmp	result1, #0 wz
05468     9C 06 90 AD |  if_e	jmp	#LR__0414
0546c     AF 01 00 FF 
05470     44 14 06 F6 | 	mov	arg02, ##@LR__5617
05474     13 13 02 F6 | 	mov	arg01, local01
05478     C4 0A B2 FD | 	call	#__system___string_cmp
0547c     00 FA 0D F2 | 	cmp	result1, #0 wz
05480     8C 06 90 AD |  if_e	jmp	#LR__0415
05484     AF 01 00 FF 
05488     4C 14 06 F6 | 	mov	arg02, ##@LR__5618
0548c     13 13 02 F6 | 	mov	arg01, local01
05490     AC 0A B2 FD | 	call	#__system___string_cmp
05494     00 FA 0D F2 | 	cmp	result1, #0 wz
05498     7C 06 90 AD |  if_e	jmp	#LR__0416
0549c     AF 01 00 FF 
054a0     50 14 06 F6 | 	mov	arg02, ##@LR__5619
054a4     13 13 02 F6 | 	mov	arg01, local01
054a8     94 0A B2 FD | 	call	#__system___string_cmp
054ac     00 FA 0D F2 | 	cmp	result1, #0 wz
054b0     6C 06 90 AD |  if_e	jmp	#LR__0417
054b4     AF 01 00 FF 
054b8     52 14 06 F6 | 	mov	arg02, ##@LR__5620
054bc     13 13 02 F6 | 	mov	arg01, local01
054c0     7C 0A B2 FD | 	call	#__system___string_cmp
054c4     00 FA 0D F2 | 	cmp	result1, #0 wz
054c8     5C 06 90 AD |  if_e	jmp	#LR__0418
054cc     AF 01 00 FF 
054d0     5A 14 06 F6 | 	mov	arg02, ##@LR__5621
054d4     13 13 02 F6 | 	mov	arg01, local01
054d8     64 0A B2 FD | 	call	#__system___string_cmp
054dc     00 FA 0D F2 | 	cmp	result1, #0 wz
054e0     4C 06 90 AD |  if_e	jmp	#LR__0419
054e4     AF 01 00 FF 
054e8     61 14 06 F6 | 	mov	arg02, ##@LR__5622
054ec     13 13 02 F6 | 	mov	arg01, local01
054f0     4C 0A B2 FD | 	call	#__system___string_cmp
054f4     00 FA 0D F2 | 	cmp	result1, #0 wz
054f8     3C 06 90 AD |  if_e	jmp	#LR__0420
054fc     AF 01 00 FF 
05500     65 14 06 F6 | 	mov	arg02, ##@LR__5623
05504     13 13 02 F6 | 	mov	arg01, local01
05508     34 0A B2 FD | 	call	#__system___string_cmp
0550c     00 FA 0D F2 | 	cmp	result1, #0 wz
05510     2C 06 90 AD |  if_e	jmp	#LR__0421
05514     AF 01 00 FF 
05518     6A 14 06 F6 | 	mov	arg02, ##@LR__5624
0551c     13 13 02 F6 | 	mov	arg01, local01
05520     1C 0A B2 FD | 	call	#__system___string_cmp
05524     00 FA 0D F2 | 	cmp	result1, #0 wz
05528     1C 06 90 AD |  if_e	jmp	#LR__0422
0552c     AF 01 00 FF 
05530     6D 14 06 F6 | 	mov	arg02, ##@LR__5625
05534     13 13 02 F6 | 	mov	arg01, local01
05538     04 0A B2 FD | 	call	#__system___string_cmp
0553c     00 FA 0D F2 | 	cmp	result1, #0 wz
05540     0C 06 90 AD |  if_e	jmp	#LR__0423
05544     AF 01 00 FF 
05548     76 14 06 F6 | 	mov	arg02, ##@LR__5626
0554c     13 13 02 F6 | 	mov	arg01, local01
05550     EC 09 B2 FD | 	call	#__system___string_cmp
05554     00 FA 0D F2 | 	cmp	result1, #0 wz
05558     FC 05 90 AD |  if_e	jmp	#LR__0424
0555c     AF 01 00 FF 
05560     7A 14 06 F6 | 	mov	arg02, ##@LR__5627
05564     13 13 02 F6 | 	mov	arg01, local01
05568     D4 09 B2 FD | 	call	#__system___string_cmp
0556c     00 FA 0D F2 | 	cmp	result1, #0 wz
05570     EC 05 90 AD |  if_e	jmp	#LR__0425
05574     AF 01 00 FF 
05578     81 14 06 F6 | 	mov	arg02, ##@LR__5628
0557c     13 13 02 F6 | 	mov	arg01, local01
05580     BC 09 B2 FD | 	call	#__system___string_cmp
05584     00 FA 0D F2 | 	cmp	result1, #0 wz
05588     DC 05 90 AD |  if_e	jmp	#LR__0426
0558c     AF 01 00 FF 
05590     85 14 06 F6 | 	mov	arg02, ##@LR__5629
05594     13 13 02 F6 | 	mov	arg01, local01
05598     A4 09 B2 FD | 	call	#__system___string_cmp
0559c     00 FA 0D F2 | 	cmp	result1, #0 wz
055a0     CC 05 90 AD |  if_e	jmp	#LR__0427
055a4     AF 01 00 FF 
055a8     8C 14 06 F6 | 	mov	arg02, ##@LR__5630
055ac     13 13 02 F6 | 	mov	arg01, local01
055b0     8C 09 B2 FD | 	call	#__system___string_cmp
055b4     00 FA 0D F2 | 	cmp	result1, #0 wz
055b8     BC 05 90 AD |  if_e	jmp	#LR__0428
055bc     AF 01 00 FF 
055c0     90 14 06 F6 | 	mov	arg02, ##@LR__5631
055c4     13 13 02 F6 | 	mov	arg01, local01
055c8     74 09 B2 FD | 	call	#__system___string_cmp
055cc     00 FA 0D F2 | 	cmp	result1, #0 wz
055d0     AC 05 90 AD |  if_e	jmp	#LR__0429
055d4     AF 01 00 FF 
055d8     97 14 06 F6 | 	mov	arg02, ##@LR__5632
055dc     13 13 02 F6 | 	mov	arg01, local01
055e0     5C 09 B2 FD | 	call	#__system___string_cmp
055e4     00 FA 0D F2 | 	cmp	result1, #0 wz
055e8     9C 05 90 AD |  if_e	jmp	#LR__0430
055ec     AF 01 00 FF 
055f0     9B 14 06 F6 | 	mov	arg02, ##@LR__5633
055f4     13 13 02 F6 | 	mov	arg01, local01
055f8     44 09 B2 FD | 	call	#__system___string_cmp
055fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05600     8C 05 90 AD |  if_e	jmp	#LR__0431
05604     AF 01 00 FF 
05608     A6 14 06 F6 | 	mov	arg02, ##@LR__5634
0560c     13 13 02 F6 | 	mov	arg01, local01
05610     2C 09 B2 FD | 	call	#__system___string_cmp
05614     00 FA 0D F2 | 	cmp	result1, #0 wz
05618     7C 05 90 AD |  if_e	jmp	#LR__0432
0561c     AF 01 00 FF 
05620     AA 14 06 F6 | 	mov	arg02, ##@LR__5635
05624     13 13 02 F6 | 	mov	arg01, local01
05628     14 09 B2 FD | 	call	#__system___string_cmp
0562c     00 FA 0D F2 | 	cmp	result1, #0 wz
05630     6C 05 90 AD |  if_e	jmp	#LR__0433
05634     AF 01 00 FF 
05638     B1 14 06 F6 | 	mov	arg02, ##@LR__5636
0563c     13 13 02 F6 | 	mov	arg01, local01
05640     FC 08 B2 FD | 	call	#__system___string_cmp
05644     00 FA 0D F2 | 	cmp	result1, #0 wz
05648     5C 05 90 AD |  if_e	jmp	#LR__0434
0564c     AF 01 00 FF 
05650     B5 14 06 F6 | 	mov	arg02, ##@LR__5637
05654     13 13 02 F6 | 	mov	arg01, local01
05658     E4 08 B2 FD | 	call	#__system___string_cmp
0565c     00 FA 0D F2 | 	cmp	result1, #0 wz
05660     4C 05 90 AD |  if_e	jmp	#LR__0435
05664     AF 01 00 FF 
05668     BD 14 06 F6 | 	mov	arg02, ##@LR__5638
0566c     13 13 02 F6 | 	mov	arg01, local01
05670     CC 08 B2 FD | 	call	#__system___string_cmp
05674     00 FA 0D F2 | 	cmp	result1, #0 wz
05678     3C 05 90 AD |  if_e	jmp	#LR__0436
0567c     AF 01 00 FF 
05680     C1 14 06 F6 | 	mov	arg02, ##@LR__5639
05684     13 13 02 F6 | 	mov	arg01, local01
05688     B4 08 B2 FD | 	call	#__system___string_cmp
0568c     00 FA 0D F2 | 	cmp	result1, #0 wz
05690     2C 05 90 AD |  if_e	jmp	#LR__0437
05694     AF 01 00 FF 
05698     C8 14 06 F6 | 	mov	arg02, ##@LR__5640
0569c     13 13 02 F6 | 	mov	arg01, local01
056a0     9C 08 B2 FD | 	call	#__system___string_cmp
056a4     00 FA 0D F2 | 	cmp	result1, #0 wz
056a8     1C 05 90 AD |  if_e	jmp	#LR__0438
056ac     AF 01 00 FF 
056b0     CF 14 06 F6 | 	mov	arg02, ##@LR__5641
056b4     13 13 02 F6 | 	mov	arg01, local01
056b8     84 08 B2 FD | 	call	#__system___string_cmp
056bc     00 FA 0D F2 | 	cmp	result1, #0 wz
056c0     0C 05 90 AD |  if_e	jmp	#LR__0439
056c4     AF 01 00 FF 
056c8     D3 14 06 F6 | 	mov	arg02, ##@LR__5642
056cc     13 13 02 F6 | 	mov	arg01, local01
056d0     6C 08 B2 FD | 	call	#__system___string_cmp
056d4     00 FA 0D F2 | 	cmp	result1, #0 wz
056d8     FC 04 90 AD |  if_e	jmp	#LR__0440
056dc     AF 01 00 FF 
056e0     D9 14 06 F6 | 	mov	arg02, ##@LR__5643
056e4     13 13 02 F6 | 	mov	arg01, local01
056e8     54 08 B2 FD | 	call	#__system___string_cmp
056ec     00 FA 0D F2 | 	cmp	result1, #0 wz
056f0     EC 04 90 AD |  if_e	jmp	#LR__0441
056f4     AF 01 00 FF 
056f8     DD 14 06 F6 | 	mov	arg02, ##@LR__5644
056fc     13 13 02 F6 | 	mov	arg01, local01
05700     3C 08 B2 FD | 	call	#__system___string_cmp
05704     00 FA 0D F2 | 	cmp	result1, #0 wz
05708     DC 04 90 AD |  if_e	jmp	#LR__0442
0570c     AF 01 00 FF 
05710     E4 14 06 F6 | 	mov	arg02, ##@LR__5645
05714     13 13 02 F6 | 	mov	arg01, local01
05718     24 08 B2 FD | 	call	#__system___string_cmp
0571c     00 FA 0D F2 | 	cmp	result1, #0 wz
05720     CC 04 90 AD |  if_e	jmp	#LR__0443
05724     AF 01 00 FF 
05728     E9 14 06 F6 | 	mov	arg02, ##@LR__5646
0572c     13 13 02 F6 | 	mov	arg01, local01
05730     0C 08 B2 FD | 	call	#__system___string_cmp
05734     00 FA 0D F2 | 	cmp	result1, #0 wz
05738     BC 04 90 AD |  if_e	jmp	#LR__0444
0573c     AF 01 00 FF 
05740     EE 14 06 F6 | 	mov	arg02, ##@LR__5647
05744     13 13 02 F6 | 	mov	arg01, local01
05748     F4 07 B2 FD | 	call	#__system___string_cmp
0574c     00 FA 0D F2 | 	cmp	result1, #0 wz
05750     AC 04 90 AD |  if_e	jmp	#LR__0445
05754     AF 01 00 FF 
05758     F5 14 06 F6 | 	mov	arg02, ##@LR__5648
0575c     13 13 02 F6 | 	mov	arg01, local01
05760     DC 07 B2 FD | 	call	#__system___string_cmp
05764     00 FA 0D F2 | 	cmp	result1, #0 wz
05768     9C 04 90 AD |  if_e	jmp	#LR__0446
0576c     AF 01 00 FF 
05770     F8 14 06 F6 | 	mov	arg02, ##@LR__5649
05774     13 13 02 F6 | 	mov	arg01, local01
05778     C4 07 B2 FD | 	call	#__system___string_cmp
0577c     00 FA 0D F2 | 	cmp	result1, #0 wz
05780     8C 04 90 AD |  if_e	jmp	#LR__0447
05784     AF 01 00 FF 
05788     02 15 06 F6 | 	mov	arg02, ##@LR__5650
0578c     13 13 02 F6 | 	mov	arg01, local01
05790     AC 07 B2 FD | 	call	#__system___string_cmp
05794     00 FA 0D F2 | 	cmp	result1, #0 wz
05798     7C 04 90 AD |  if_e	jmp	#LR__0448
0579c     AF 01 00 FF 
057a0     06 15 06 F6 | 	mov	arg02, ##@LR__5651
057a4     13 13 02 F6 | 	mov	arg01, local01
057a8     94 07 B2 FD | 	call	#__system___string_cmp
057ac     00 FA 0D F2 | 	cmp	result1, #0 wz
057b0     6C 04 90 AD |  if_e	jmp	#LR__0449
057b4     AF 01 00 FF 
057b8     0E 15 06 F6 | 	mov	arg02, ##@LR__5652
057bc     13 13 02 F6 | 	mov	arg01, local01
057c0     7C 07 B2 FD | 	call	#__system___string_cmp
057c4     00 FA 0D F2 | 	cmp	result1, #0 wz
057c8     5C 04 90 AD |  if_e	jmp	#LR__0450
057cc     AF 01 00 FF 
057d0     12 15 06 F6 | 	mov	arg02, ##@LR__5653
057d4     13 13 02 F6 | 	mov	arg01, local01
057d8     64 07 B2 FD | 	call	#__system___string_cmp
057dc     00 FA 0D F2 | 	cmp	result1, #0 wz
057e0     4C 04 90 AD |  if_e	jmp	#LR__0451
057e4     AF 01 00 FF 
057e8     18 15 06 F6 | 	mov	arg02, ##@LR__5654
057ec     13 13 02 F6 | 	mov	arg01, local01
057f0     4C 07 B2 FD | 	call	#__system___string_cmp
057f4     00 FA 0D F2 | 	cmp	result1, #0 wz
057f8     3C 04 90 AD |  if_e	jmp	#LR__0452
057fc     AF 01 00 FF 
05800     1E 15 06 F6 | 	mov	arg02, ##@LR__5655
05804     13 13 02 F6 | 	mov	arg01, local01
05808     34 07 B2 FD | 	call	#__system___string_cmp
0580c     00 FA 0D F2 | 	cmp	result1, #0 wz
05810     2C 04 90 AD |  if_e	jmp	#LR__0453
05814     30 04 90 FD | 	jmp	#LR__0454
05818                 | LR__0320
05818     5C FA 05 F6 | 	mov	result1, #92
0581c     2C 04 90 FD | 	jmp	#LR__0455
05820                 | LR__0321
05820     5C FA 05 F6 | 	mov	result1, #92
05824     24 04 90 FD | 	jmp	#LR__0455
05828                 | LR__0322
05828     B9 FA 05 F6 | 	mov	result1, #185
0582c     1C 04 90 FD | 	jmp	#LR__0455
05830                 | LR__0323
05830     47 FA 05 F6 | 	mov	result1, #71
05834     14 04 90 FD | 	jmp	#LR__0455
05838                 | LR__0324
05838     59 FA 05 F6 | 	mov	result1, #89
0583c     0C 04 90 FD | 	jmp	#LR__0455
05840                 | LR__0325
05840     59 FA 05 F6 | 	mov	result1, #89
05844     04 04 90 FD | 	jmp	#LR__0455
05848                 | LR__0326
05848     C3 FA 05 F6 | 	mov	result1, #195
0584c     FC 03 90 FD | 	jmp	#LR__0455
05850                 | LR__0327
05850     AE FA 05 F6 | 	mov	result1, #174
05854     F4 03 90 FD | 	jmp	#LR__0455
05858                 | LR__0328
05858     AE FA 05 F6 | 	mov	result1, #174
0585c     EC 03 90 FD | 	jmp	#LR__0455
05860                 | LR__0329
05860     B1 FA 05 F6 | 	mov	result1, #177
05864     E4 03 90 FD | 	jmp	#LR__0455
05868                 | LR__0330
05868     B1 FA 05 F6 | 	mov	result1, #177
0586c     DC 03 90 FD | 	jmp	#LR__0455
05870                 | LR__0331
05870     AF FA 05 F6 | 	mov	result1, #175
05874     D4 03 90 FD | 	jmp	#LR__0455
05878                 | LR__0332
05878     AF FA 05 F6 | 	mov	result1, #175
0587c     CC 03 90 FD | 	jmp	#LR__0455
05880                 | LR__0333
05880     B0 FA 05 F6 | 	mov	result1, #176
05884     C4 03 90 FD | 	jmp	#LR__0455
05888                 | LR__0334
05888     B0 FA 05 F6 | 	mov	result1, #176
0588c     BC 03 90 FD | 	jmp	#LR__0455
05890                 | LR__0335
05890     45 FA 05 F6 | 	mov	result1, #69
05894     B4 03 90 FD | 	jmp	#LR__0455
05898                 | LR__0336
05898     45 FA 05 F6 | 	mov	result1, #69
0589c     AC 03 90 FD | 	jmp	#LR__0455
058a0                 | LR__0337
058a0     69 FA 05 F6 | 	mov	result1, #105
058a4     A4 03 90 FD | 	jmp	#LR__0455
058a8                 | LR__0338
058a8     B4 FA 05 F6 | 	mov	result1, #180
058ac     9C 03 90 FD | 	jmp	#LR__0455
058b0                 | LR__0339
058b0     40 FA 05 F6 | 	mov	result1, #64
058b4     94 03 90 FD | 	jmp	#LR__0455
058b8                 | LR__0340
058b8     C0 FA 05 F6 | 	mov	result1, #192
058bc     8C 03 90 FD | 	jmp	#LR__0455
058c0                 | LR__0341
058c0     49 FA 05 F6 | 	mov	result1, #73
058c4     84 03 90 FD | 	jmp	#LR__0455
058c8                 | LR__0342
058c8     49 FA 05 F6 | 	mov	result1, #73
058cc     7C 03 90 FD | 	jmp	#LR__0455
058d0                 | LR__0343
058d0     C4 FA 05 F6 | 	mov	result1, #196
058d4     74 03 90 FD | 	jmp	#LR__0455
058d8                 | LR__0344
058d8     68 FA 05 F6 | 	mov	result1, #104
058dc     6C 03 90 FD | 	jmp	#LR__0455
058e0                 | LR__0345
058e0     B7 FA 05 F6 | 	mov	result1, #183
058e4     64 03 90 FD | 	jmp	#LR__0455
058e8                 | LR__0346
058e8     73 FA 05 F6 | 	mov	result1, #115
058ec     5C 03 90 FD | 	jmp	#LR__0455
058f0                 | LR__0347
058f0     74 FA 05 F6 | 	mov	result1, #116
058f4     54 03 90 FD | 	jmp	#LR__0455
058f8                 | LR__0348
058f8     6C FA 05 F6 | 	mov	result1, #108
058fc     4C 03 90 FD | 	jmp	#LR__0455
05900                 | LR__0349
05900     6C FA 05 F6 | 	mov	result1, #108
05904     44 03 90 FD | 	jmp	#LR__0455
05908                 | LR__0350
05908     89 FA 05 F6 | 	mov	result1, #137
0590c     3C 03 90 FD | 	jmp	#LR__0455
05910                 | LR__0351
05910     C2 FA 05 F6 | 	mov	result1, #194
05914     34 03 90 FD | 	jmp	#LR__0455
05918                 | LR__0352
05918     72 FA 05 F6 | 	mov	result1, #114
0591c     2C 03 90 FD | 	jmp	#LR__0455
05920                 | LR__0353
05920     5D FA 05 F6 | 	mov	result1, #93
05924     24 03 90 FD | 	jmp	#LR__0455
05928                 | LR__0354
05928     96 FA 05 F6 | 	mov	result1, #150
0592c     1C 03 90 FD | 	jmp	#LR__0455
05930                 | LR__0355
05930     43 FA 05 F6 | 	mov	result1, #67
05934     14 03 90 FD | 	jmp	#LR__0455
05938                 | LR__0356
05938     43 FA 05 F6 | 	mov	result1, #67
0593c     0C 03 90 FD | 	jmp	#LR__0455
05940                 | LR__0357
05940     43 FA 05 F6 | 	mov	result1, #67
05944     04 03 90 FD | 	jmp	#LR__0455
05948                 | LR__0358
05948     5A FA 05 F6 | 	mov	result1, #90
0594c     FC 02 90 FD | 	jmp	#LR__0455
05950                 | LR__0359
05950     AB FA 05 F6 | 	mov	result1, #171
05954     F4 02 90 FD | 	jmp	#LR__0455
05958                 | LR__0360
05958     BD FA 05 F6 | 	mov	result1, #189
0595c     EC 02 90 FD | 	jmp	#LR__0455
05960                 | LR__0361
05960     BD FA 05 F6 | 	mov	result1, #189
05964     E4 02 90 FD | 	jmp	#LR__0455
05968                 | LR__0362
05968     46 FA 05 F6 | 	mov	result1, #70
0596c     DC 02 90 FD | 	jmp	#LR__0455
05970                 | LR__0363
05970     46 FA 05 F6 | 	mov	result1, #70
05974     D4 02 90 FD | 	jmp	#LR__0455
05978                 | LR__0364
05978     71 FA 05 F6 | 	mov	result1, #113
0597c     CC 02 90 FD | 	jmp	#LR__0455
05980                 | LR__0365
05980     71 FA 05 F6 | 	mov	result1, #113
05984     C4 02 90 FD | 	jmp	#LR__0455
05988                 | LR__0366
05988     60 FA 05 F6 | 	mov	result1, #96
0598c     BC 02 90 FD | 	jmp	#LR__0455
05990                 | LR__0367
05990     4A FA 05 F6 | 	mov	result1, #74
05994     B4 02 90 FD | 	jmp	#LR__0455
05998                 | LR__0368
05998     4A FA 05 F6 | 	mov	result1, #74
0599c     AC 02 90 FD | 	jmp	#LR__0455
059a0                 | LR__0369
059a0     48 FA 05 F6 | 	mov	result1, #72
059a4     A4 02 90 FD | 	jmp	#LR__0455
059a8                 | LR__0370
059a8     48 FA 05 F6 | 	mov	result1, #72
059ac     9C 02 90 FD | 	jmp	#LR__0455
059b0                 | LR__0371
059b0     BB FA 05 F6 | 	mov	result1, #187
059b4     94 02 90 FD | 	jmp	#LR__0455
059b8                 | LR__0372
059b8     A9 FA 05 F6 | 	mov	result1, #169
059bc     8C 02 90 FD | 	jmp	#LR__0455
059c0                 | LR__0373
059c0     4E FA 05 F6 | 	mov	result1, #78
059c4     84 02 90 FD | 	jmp	#LR__0455
059c8                 | LR__0374
059c8     4E FA 05 F6 | 	mov	result1, #78
059cc     7C 02 90 FD | 	jmp	#LR__0455
059d0                 | LR__0375
059d0     58 FA 05 F6 | 	mov	result1, #88
059d4     74 02 90 FD | 	jmp	#LR__0455
059d8                 | LR__0376
059d8     5F FA 05 F6 | 	mov	result1, #95
059dc     6C 02 90 FD | 	jmp	#LR__0455
059e0                 | LR__0377
059e0     5F FA 05 F6 | 	mov	result1, #95
059e4     64 02 90 FD | 	jmp	#LR__0455
059e8                 | LR__0378
059e8     B5 FA 05 F6 | 	mov	result1, #181
059ec     5C 02 90 FD | 	jmp	#LR__0455
059f0                 | LR__0379
059f0     4C FA 05 F6 | 	mov	result1, #76
059f4     54 02 90 FD | 	jmp	#LR__0455
059f8                 | LR__0380
059f8     4C FA 05 F6 | 	mov	result1, #76
059fc     4C 02 90 FD | 	jmp	#LR__0455
05a00                 | LR__0381
05a00     52 FA 05 F6 | 	mov	result1, #82
05a04     44 02 90 FD | 	jmp	#LR__0455
05a08                 | LR__0382
05a08     52 FA 05 F6 | 	mov	result1, #82
05a0c     3C 02 90 FD | 	jmp	#LR__0455
05a10                 | LR__0383
05a10     97 FA 05 F6 | 	mov	result1, #151
05a14     34 02 90 FD | 	jmp	#LR__0455
05a18                 | LR__0384
05a18     C6 FA 05 F6 | 	mov	result1, #198
05a1c     2C 02 90 FD | 	jmp	#LR__0455
05a20                 | LR__0385
05a20     61 FA 05 F6 | 	mov	result1, #97
05a24     24 02 90 FD | 	jmp	#LR__0455
05a28                 | LR__0386
05a28     61 FA 05 F6 | 	mov	result1, #97
05a2c     1C 02 90 FD | 	jmp	#LR__0455
05a30                 | LR__0387
05a30     63 FA 05 F6 | 	mov	result1, #99
05a34     14 02 90 FD | 	jmp	#LR__0455
05a38                 | LR__0388
05a38     41 FA 05 F6 | 	mov	result1, #65
05a3c     0C 02 90 FD | 	jmp	#LR__0455
05a40                 | LR__0389
05a40     4B FA 05 F6 | 	mov	result1, #75
05a44     04 02 90 FD | 	jmp	#LR__0455
05a48                 | LR__0390
05a48     4B FA 05 F6 | 	mov	result1, #75
05a4c     FC 01 90 FD | 	jmp	#LR__0455
05a50                 | LR__0391
05a50     C1 FA 05 F6 | 	mov	result1, #193
05a54     F4 01 90 FD | 	jmp	#LR__0455
05a58                 | LR__0392
05a58     B3 FA 05 F6 | 	mov	result1, #179
05a5c     EC 01 90 FD | 	jmp	#LR__0455
05a60                 | LR__0393
05a60     5E FA 05 F6 | 	mov	result1, #94
05a64     E4 01 90 FD | 	jmp	#LR__0455
05a68                 | LR__0394
05a68     5E FA 05 F6 | 	mov	result1, #94
05a6c     DC 01 90 FD | 	jmp	#LR__0455
05a70                 | LR__0395
05a70     7C FA 05 F6 | 	mov	result1, #124
05a74     D4 01 90 FD | 	jmp	#LR__0455
05a78                 | LR__0396
05a78     7E FA 05 F6 | 	mov	result1, #126
05a7c     CC 01 90 FD | 	jmp	#LR__0455
05a80                 | LR__0397
05a80     7D FA 05 F6 | 	mov	result1, #125
05a84     C4 01 90 FD | 	jmp	#LR__0455
05a88                 | LR__0398
05a88     7F FA 05 F6 | 	mov	result1, #127
05a8c     BC 01 90 FD | 	jmp	#LR__0455
05a90                 | LR__0399
05a90     80 FA 05 F6 | 	mov	result1, #128
05a94     B4 01 90 FD | 	jmp	#LR__0455
05a98                 | LR__0400
05a98     55 FA 05 F6 | 	mov	result1, #85
05a9c     AC 01 90 FD | 	jmp	#LR__0455
05aa0                 | LR__0401
05aa0     75 FA 05 F6 | 	mov	result1, #117
05aa4     A4 01 90 FD | 	jmp	#LR__0455
05aa8                 | LR__0402
05aa8     75 FA 05 F6 | 	mov	result1, #117
05aac     9C 01 90 FD | 	jmp	#LR__0455
05ab0                 | LR__0403
05ab0     BA FA 05 F6 | 	mov	result1, #186
05ab4     94 01 90 FD | 	jmp	#LR__0455
05ab8                 | LR__0404
05ab8     42 FA 05 F6 | 	mov	result1, #66
05abc     8C 01 90 FD | 	jmp	#LR__0455
05ac0                 | LR__0405
05ac0     42 FA 05 F6 | 	mov	result1, #66
05ac4     84 01 90 FD | 	jmp	#LR__0455
05ac8                 | LR__0406
05ac8     95 FA 05 F6 | 	mov	result1, #149
05acc     7C 01 90 FD | 	jmp	#LR__0455
05ad0                 | LR__0407
05ad0     AC FA 05 F6 | 	mov	result1, #172
05ad4     74 01 90 FD | 	jmp	#LR__0455
05ad8                 | LR__0408
05ad8     81 FA 05 F6 | 	mov	result1, #129
05adc     6C 01 90 FD | 	jmp	#LR__0455
05ae0                 | LR__0409
05ae0     81 FA 05 F6 | 	mov	result1, #129
05ae4     64 01 90 FD | 	jmp	#LR__0455
05ae8                 | LR__0410
05ae8     44 FA 05 F6 | 	mov	result1, #68
05aec     5C 01 90 FD | 	jmp	#LR__0455
05af0                 | LR__0411
05af0     44 FA 05 F6 | 	mov	result1, #68
05af4     54 01 90 FD | 	jmp	#LR__0455
05af8                 | LR__0412
05af8     BC FA 05 F6 | 	mov	result1, #188
05afc     4C 01 90 FD | 	jmp	#LR__0455
05b00                 | LR__0413
05b00     88 FA 05 F6 | 	mov	result1, #136
05b04     44 01 90 FD | 	jmp	#LR__0455
05b08                 | LR__0414
05b08     B6 FA 05 F6 | 	mov	result1, #182
05b0c     3C 01 90 FD | 	jmp	#LR__0455
05b10                 | LR__0415
05b10     92 FA 05 F6 | 	mov	result1, #146
05b14     34 01 90 FD | 	jmp	#LR__0455
05b18                 | LR__0416
05b18     BE FA 05 F6 | 	mov	result1, #190
05b1c     2C 01 90 FD | 	jmp	#LR__0455
05b20                 | LR__0417
05b20     BE FA 05 F6 | 	mov	result1, #190
05b24     24 01 90 FD | 	jmp	#LR__0455
05b28                 | LR__0418
05b28     C7 FA 05 F6 | 	mov	result1, #199
05b2c     1C 01 90 FD | 	jmp	#LR__0455
05b30                 | LR__0419
05b30     AA FA 05 F6 | 	mov	result1, #170
05b34     14 01 90 FD | 	jmp	#LR__0455
05b38                 | LR__0420
05b38     4D FA 05 F6 | 	mov	result1, #77
05b3c     0C 01 90 FD | 	jmp	#LR__0455
05b40                 | LR__0421
05b40     51 FA 05 F6 | 	mov	result1, #81
05b44     04 01 90 FD | 	jmp	#LR__0455
05b48                 | LR__0422
05b48     51 FA 05 F6 | 	mov	result1, #81
05b4c     FC 00 90 FD | 	jmp	#LR__0455
05b50                 | LR__0423
05b50     8E FA 05 F6 | 	mov	result1, #142
05b54     F4 00 90 FD | 	jmp	#LR__0455
05b58                 | LR__0424
05b58     8E FA 05 F6 | 	mov	result1, #142
05b5c     EC 00 90 FD | 	jmp	#LR__0455
05b60                 | LR__0425
05b60     90 FA 05 F6 | 	mov	result1, #144
05b64     E4 00 90 FD | 	jmp	#LR__0455
05b68                 | LR__0426
05b68     90 FA 05 F6 | 	mov	result1, #144
05b6c     DC 00 90 FD | 	jmp	#LR__0455
05b70                 | LR__0427
05b70     8D FA 05 F6 | 	mov	result1, #141
05b74     D4 00 90 FD | 	jmp	#LR__0455
05b78                 | LR__0428
05b78     8D FA 05 F6 | 	mov	result1, #141
05b7c     CC 00 90 FD | 	jmp	#LR__0455
05b80                 | LR__0429
05b80     8C FA 05 F6 | 	mov	result1, #140
05b84     C4 00 90 FD | 	jmp	#LR__0455
05b88                 | LR__0430
05b88     8C FA 05 F6 | 	mov	result1, #140
05b8c     BC 00 90 FD | 	jmp	#LR__0455
05b90                 | LR__0431
05b90     91 FA 05 F6 | 	mov	result1, #145
05b94     B4 00 90 FD | 	jmp	#LR__0455
05b98                 | LR__0432
05b98     91 FA 05 F6 | 	mov	result1, #145
05b9c     AC 00 90 FD | 	jmp	#LR__0455
05ba0                 | LR__0433
05ba0     8B FA 05 F6 | 	mov	result1, #139
05ba4     A4 00 90 FD | 	jmp	#LR__0455
05ba8                 | LR__0434
05ba8     8B FA 05 F6 | 	mov	result1, #139
05bac     9C 00 90 FD | 	jmp	#LR__0455
05bb0                 | LR__0435
05bb0     8F FA 05 F6 | 	mov	result1, #143
05bb4     94 00 90 FD | 	jmp	#LR__0455
05bb8                 | LR__0436
05bb8     8F FA 05 F6 | 	mov	result1, #143
05bbc     8C 00 90 FD | 	jmp	#LR__0455
05bc0                 | LR__0437
05bc0     8F FA 05 F6 | 	mov	result1, #143
05bc4     84 00 90 FD | 	jmp	#LR__0455
05bc8                 | LR__0438
05bc8     B2 FA 05 F6 | 	mov	result1, #178
05bcc     7C 00 90 FD | 	jmp	#LR__0455
05bd0                 | LR__0439
05bd0     B2 FA 05 F6 | 	mov	result1, #178
05bd4     74 00 90 FD | 	jmp	#LR__0455
05bd8                 | LR__0440
05bd8     75 FA 05 F6 | 	mov	result1, #117
05bdc     6C 00 90 FD | 	jmp	#LR__0455
05be0                 | LR__0441
05be0     75 FA 05 F6 | 	mov	result1, #117
05be4     64 00 90 FD | 	jmp	#LR__0455
05be8                 | LR__0442
05be8     6D FA 05 F6 | 	mov	result1, #109
05bec     5C 00 90 FD | 	jmp	#LR__0455
05bf0                 | LR__0443
05bf0     6D FA 05 F6 | 	mov	result1, #109
05bf4     54 00 90 FD | 	jmp	#LR__0455
05bf8                 | LR__0444
05bf8     5B FA 05 F6 | 	mov	result1, #91
05bfc     4C 00 90 FD | 	jmp	#LR__0455
05c00                 | LR__0445
05c00     56 FA 05 F6 | 	mov	result1, #86
05c04     44 00 90 FD | 	jmp	#LR__0455
05c08                 | LR__0446
05c08     56 FA 05 F6 | 	mov	result1, #86
05c0c     3C 00 90 FD | 	jmp	#LR__0455
05c10                 | LR__0447
05c10     70 FA 05 F6 | 	mov	result1, #112
05c14     34 00 90 FD | 	jmp	#LR__0455
05c18                 | LR__0448
05c18     70 FA 05 F6 | 	mov	result1, #112
05c1c     2C 00 90 FD | 	jmp	#LR__0455
05c20                 | LR__0449
05c20     57 FA 05 F6 | 	mov	result1, #87
05c24     24 00 90 FD | 	jmp	#LR__0455
05c28                 | LR__0450
05c28     57 FA 05 F6 | 	mov	result1, #87
05c2c     1C 00 90 FD | 	jmp	#LR__0455
05c30                 | LR__0451
05c30     79 FA 05 F6 | 	mov	result1, #121
05c34     14 00 90 FD | 	jmp	#LR__0455
05c38                 | LR__0452
05c38     77 FA 05 F6 | 	mov	result1, #119
05c3c     0C 00 90 FD | 	jmp	#LR__0455
05c40                 | LR__0453
05c40     78 FA 05 F6 | 	mov	result1, #120
05c44     04 00 90 FD | 	jmp	#LR__0455
05c48                 | LR__0454
05c48     00 FA 05 F6 | 	mov	result1, #0
05c4c                 | LR__0455
05c4c     A7 F0 03 F6 | 	mov	ptra, fp
05c50     B2 00 A0 FD | 	call	#popregs_
05c54                 | _iscommand_ret
05c54     2D 00 64 FD | 	ret
05c58                 | 
05c58                 | ' 
05c58                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05c58                 | ' 
05c58                 | ' function isfunction(s as string) as ubyte
05c58                 | _isfunction
05c58     01 4A 05 F6 | 	mov	COUNT_, #1
05c5c     A8 00 A0 FD | 	call	#pushregs_
05c60                 | ' 
05c60                 | ' select case s
05c60     09 27 02 F6 | 	mov	local01, arg01
05c64     AF 01 00 FF 
05c68     24 15 06 F6 | 	mov	arg02, ##@LR__5656
05c6c     13 13 02 F6 | 	mov	arg01, local01
05c70     CC 02 B2 FD | 	call	#__system___string_cmp
05c74     00 FA 0D F2 | 	cmp	result1, #0 wz
05c78     E4 04 90 AD |  if_e	jmp	#LR__0460
05c7c     AF 01 00 FF 
05c80     28 15 06 F6 | 	mov	arg02, ##@LR__5657
05c84     13 13 02 F6 | 	mov	arg01, local01
05c88     B4 02 B2 FD | 	call	#__system___string_cmp
05c8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05c90     D4 04 90 AD |  if_e	jmp	#LR__0461
05c94     AF 01 00 FF 
05c98     2D 15 06 F6 | 	mov	arg02, ##@LR__5658
05c9c     13 13 02 F6 | 	mov	arg01, local01
05ca0     9C 02 B2 FD | 	call	#__system___string_cmp
05ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ca8     C4 04 90 AD |  if_e	jmp	#LR__0462
05cac     AF 01 00 FF 
05cb0     31 15 06 F6 | 	mov	arg02, ##@LR__5659
05cb4     13 13 02 F6 | 	mov	arg01, local01
05cb8     84 02 B2 FD | 	call	#__system___string_cmp
05cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
05cc0     B4 04 90 AD |  if_e	jmp	#LR__0463
05cc4     AF 01 00 FF 
05cc8     36 15 06 F6 | 	mov	arg02, ##@LR__5660
05ccc     13 13 02 F6 | 	mov	arg01, local01
05cd0     6C 02 B2 FD | 	call	#__system___string_cmp
05cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
05cd8     A4 04 90 AD |  if_e	jmp	#LR__0464
05cdc     AF 01 00 FF 
05ce0     3A 15 06 F6 | 	mov	arg02, ##@LR__5661
05ce4     13 13 02 F6 | 	mov	arg01, local01
05ce8     54 02 B2 FD | 	call	#__system___string_cmp
05cec     00 FA 0D F2 | 	cmp	result1, #0 wz
05cf0     94 04 90 AD |  if_e	jmp	#LR__0465
05cf4     AF 01 00 FF 
05cf8     3F 15 06 F6 | 	mov	arg02, ##@LR__5662
05cfc     13 13 02 F6 | 	mov	arg01, local01
05d00     3C 02 B2 FD | 	call	#__system___string_cmp
05d04     00 FA 0D F2 | 	cmp	result1, #0 wz
05d08     84 04 90 AD |  if_e	jmp	#LR__0466
05d0c     AF 01 00 FF 
05d10     43 15 06 F6 | 	mov	arg02, ##@LR__5663
05d14     13 13 02 F6 | 	mov	arg01, local01
05d18     24 02 B2 FD | 	call	#__system___string_cmp
05d1c     00 FA 0D F2 | 	cmp	result1, #0 wz
05d20     74 04 90 AD |  if_e	jmp	#LR__0467
05d24     AF 01 00 FF 
05d28     48 15 06 F6 | 	mov	arg02, ##@LR__5664
05d2c     13 13 02 F6 | 	mov	arg01, local01
05d30     0C 02 B2 FD | 	call	#__system___string_cmp
05d34     00 FA 0D F2 | 	cmp	result1, #0 wz
05d38     64 04 90 AD |  if_e	jmp	#LR__0468
05d3c     AF 01 00 FF 
05d40     4D 15 06 F6 | 	mov	arg02, ##@LR__5665
05d44     13 13 02 F6 | 	mov	arg01, local01
05d48     F4 01 B2 FD | 	call	#__system___string_cmp
05d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
05d50     54 04 90 AD |  if_e	jmp	#LR__0469
05d54     AF 01 00 FF 
05d58     51 15 06 F6 | 	mov	arg02, ##@LR__5666
05d5c     13 13 02 F6 | 	mov	arg01, local01
05d60     DC 01 B2 FD | 	call	#__system___string_cmp
05d64     00 FA 0D F2 | 	cmp	result1, #0 wz
05d68     44 04 90 AD |  if_e	jmp	#LR__0470
05d6c     AF 01 00 FF 
05d70     57 15 06 F6 | 	mov	arg02, ##@LR__5667
05d74     13 13 02 F6 | 	mov	arg01, local01
05d78     C4 01 B2 FD | 	call	#__system___string_cmp
05d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
05d80     34 04 90 AD |  if_e	jmp	#LR__0471
05d84     AF 01 00 FF 
05d88     60 15 06 F6 | 	mov	arg02, ##@LR__5668
05d8c     13 13 02 F6 | 	mov	arg01, local01
05d90     AC 01 B2 FD | 	call	#__system___string_cmp
05d94     00 FA 0D F2 | 	cmp	result1, #0 wz
05d98     24 04 90 AD |  if_e	jmp	#LR__0472
05d9c     AF 01 00 FF 
05da0     64 15 06 F6 | 	mov	arg02, ##@LR__5669
05da4     13 13 02 F6 | 	mov	arg01, local01
05da8     94 01 B2 FD | 	call	#__system___string_cmp
05dac     00 FA 0D F2 | 	cmp	result1, #0 wz
05db0     14 04 90 AD |  if_e	jmp	#LR__0473
05db4     AF 01 00 FF 
05db8     68 15 06 F6 | 	mov	arg02, ##@LR__5670
05dbc     13 13 02 F6 | 	mov	arg01, local01
05dc0     7C 01 B2 FD | 	call	#__system___string_cmp
05dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
05dc8     04 04 90 AD |  if_e	jmp	#LR__0474
05dcc     AF 01 00 FF 
05dd0     71 15 06 F6 | 	mov	arg02, ##@LR__5671
05dd4     13 13 02 F6 | 	mov	arg01, local01
05dd8     64 01 B2 FD | 	call	#__system___string_cmp
05ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
05de0     F4 03 90 AD |  if_e	jmp	#LR__0475
05de4     AF 01 00 FF 
05de8     75 15 06 F6 | 	mov	arg02, ##@LR__5672
05dec     13 13 02 F6 | 	mov	arg01, local01
05df0     4C 01 B2 FD | 	call	#__system___string_cmp
05df4     00 FA 0D F2 | 	cmp	result1, #0 wz
05df8     E4 03 90 AD |  if_e	jmp	#LR__0476
05dfc     AF 01 00 FF 
05e00     83 15 06 F6 | 	mov	arg02, ##@LR__5673
05e04     13 13 02 F6 | 	mov	arg01, local01
05e08     34 01 B2 FD | 	call	#__system___string_cmp
05e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
05e10     D4 03 90 AD |  if_e	jmp	#LR__0477
05e14     AF 01 00 FF 
05e18     90 15 06 F6 | 	mov	arg02, ##@LR__5674
05e1c     13 13 02 F6 | 	mov	arg01, local01
05e20     1C 01 B2 FD | 	call	#__system___string_cmp
05e24     00 FA 0D F2 | 	cmp	result1, #0 wz
05e28     C4 03 90 AD |  if_e	jmp	#LR__0478
05e2c     AF 01 00 FF 
05e30     98 15 06 F6 | 	mov	arg02, ##@LR__5675
05e34     13 13 02 F6 | 	mov	arg01, local01
05e38     04 01 B2 FD | 	call	#__system___string_cmp
05e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
05e40     B4 03 90 AD |  if_e	jmp	#LR__0479
05e44     AF 01 00 FF 
05e48     9D 15 06 F6 | 	mov	arg02, ##@LR__5676
05e4c     13 13 02 F6 | 	mov	arg01, local01
05e50     EC 00 B2 FD | 	call	#__system___string_cmp
05e54     00 FA 0D F2 | 	cmp	result1, #0 wz
05e58     A4 03 90 AD |  if_e	jmp	#LR__0480
05e5c     AF 01 00 FF 
05e60     A4 15 06 F6 | 	mov	arg02, ##@LR__5677
05e64     13 13 02 F6 | 	mov	arg01, local01
05e68     D4 00 B2 FD | 	call	#__system___string_cmp
05e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
05e70     94 03 90 AD |  if_e	jmp	#LR__0481
05e74     AF 01 00 FF 
05e78     A8 15 06 F6 | 	mov	arg02, ##@LR__5678
05e7c     13 13 02 F6 | 	mov	arg01, local01
05e80     BC 00 B2 FD | 	call	#__system___string_cmp
05e84     00 FA 0D F2 | 	cmp	result1, #0 wz
05e88     84 03 90 AD |  if_e	jmp	#LR__0482
05e8c     AF 01 00 FF 
05e90     AE 15 06 F6 | 	mov	arg02, ##@LR__5679
05e94     13 13 02 F6 | 	mov	arg01, local01
05e98     A4 00 B2 FD | 	call	#__system___string_cmp
05e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
05ea0     74 03 90 AD |  if_e	jmp	#LR__0483
05ea4     AF 01 00 FF 
05ea8     B2 15 06 F6 | 	mov	arg02, ##@LR__5680
05eac     13 13 02 F6 | 	mov	arg01, local01
05eb0     8C 00 B2 FD | 	call	#__system___string_cmp
05eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
05eb8     64 03 90 AD |  if_e	jmp	#LR__0484
05ebc     AF 01 00 FF 
05ec0     B6 15 06 F6 | 	mov	arg02, ##@LR__5681
05ec4     13 13 02 F6 | 	mov	arg01, local01
05ec8     74 00 B2 FD | 	call	#__system___string_cmp
05ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
05ed0     54 03 90 AD |  if_e	jmp	#LR__0485
05ed4     AF 01 00 FF 
05ed8     BC 15 06 F6 | 	mov	arg02, ##@LR__5682
05edc     13 13 02 F6 | 	mov	arg01, local01
05ee0     5C 00 B2 FD | 	call	#__system___string_cmp
05ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ee8     44 03 90 AD |  if_e	jmp	#LR__0486
05eec     AF 01 00 FF 
05ef0     C1 15 06 F6 | 	mov	arg02, ##@LR__5683
05ef4     13 13 02 F6 | 	mov	arg01, local01
05ef8     44 00 B2 FD | 	call	#__system___string_cmp
05efc     00 FA 0D F2 | 	cmp	result1, #0 wz
05f00     34 03 90 AD |  if_e	jmp	#LR__0487
05f04     AF 01 00 FF 
05f08     C8 15 06 F6 | 	mov	arg02, ##@LR__5684
05f0c     13 13 02 F6 | 	mov	arg01, local01
05f10     2C 00 B2 FD | 	call	#__system___string_cmp
05f14     00 FA 0D F2 | 	cmp	result1, #0 wz
05f18     24 03 90 AD |  if_e	jmp	#LR__0488
05f1c     AF 01 00 FF 
05f20     CF 15 06 F6 | 	mov	arg02, ##@LR__5685
05f24     13 13 02 F6 | 	mov	arg01, local01
05f28     14 00 B2 FD | 	call	#__system___string_cmp
05f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f30     14 03 90 AD |  if_e	jmp	#LR__0489
05f34     AF 01 00 FF 
05f38     D6 15 06 F6 | 	mov	arg02, ##@LR__5686
05f3c     13 13 02 F6 | 	mov	arg01, local01
05f40     FC FF B1 FD | 	call	#__system___string_cmp
05f44     00 FA 0D F2 | 	cmp	result1, #0 wz
05f48     04 03 90 AD |  if_e	jmp	#LR__0490
05f4c     AF 01 00 FF 
05f50     DD 15 06 F6 | 	mov	arg02, ##@LR__5687
05f54     13 13 02 F6 | 	mov	arg01, local01
05f58     E4 FF B1 FD | 	call	#__system___string_cmp
05f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f60     F4 02 90 AD |  if_e	jmp	#LR__0491
05f64     AF 01 00 FF 
05f68     E2 15 06 F6 | 	mov	arg02, ##@LR__5688
05f6c     13 13 02 F6 | 	mov	arg01, local01
05f70     CC FF B1 FD | 	call	#__system___string_cmp
05f74     00 FA 0D F2 | 	cmp	result1, #0 wz
05f78     E4 02 90 AD |  if_e	jmp	#LR__0492
05f7c     AF 01 00 FF 
05f80     E7 15 06 F6 | 	mov	arg02, ##@LR__5689
05f84     13 13 02 F6 | 	mov	arg01, local01
05f88     B4 FF B1 FD | 	call	#__system___string_cmp
05f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f90     D4 02 90 AD |  if_e	jmp	#LR__0493
05f94     AF 01 00 FF 
05f98     EC 15 06 F6 | 	mov	arg02, ##@LR__5690
05f9c     13 13 02 F6 | 	mov	arg01, local01
05fa0     9C FF B1 FD | 	call	#__system___string_cmp
05fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
05fa8     C4 02 90 AD |  if_e	jmp	#LR__0494
05fac     AF 01 00 FF 
05fb0     F2 15 06 F6 | 	mov	arg02, ##@LR__5691
05fb4     13 13 02 F6 | 	mov	arg01, local01
05fb8     84 FF B1 FD | 	call	#__system___string_cmp
05fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
05fc0     B4 02 90 AD |  if_e	jmp	#LR__0495
05fc4     AF 01 00 FF 
05fc8     F8 15 06 F6 | 	mov	arg02, ##@LR__5692
05fcc     13 13 02 F6 | 	mov	arg01, local01
05fd0     6C FF B1 FD | 	call	#__system___string_cmp
05fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
05fd8     A4 02 90 AD |  if_e	jmp	#LR__0496
05fdc     AF 01 00 FF 
05fe0     FE 15 06 F6 | 	mov	arg02, ##@LR__5693
05fe4     13 13 02 F6 | 	mov	arg01, local01
05fe8     54 FF B1 FD | 	call	#__system___string_cmp
05fec     00 FA 0D F2 | 	cmp	result1, #0 wz
05ff0     94 02 90 AD |  if_e	jmp	#LR__0497
05ff4     B0 01 00 FF 
05ff8     03 14 06 F6 | 	mov	arg02, ##@LR__5694
05ffc     13 13 02 F6 | 	mov	arg01, local01
06000     3C FF B1 FD | 	call	#__system___string_cmp
06004     00 FA 0D F2 | 	cmp	result1, #0 wz
06008     84 02 90 AD |  if_e	jmp	#LR__0498
0600c     B0 01 00 FF 
06010     08 14 06 F6 | 	mov	arg02, ##@LR__5695
06014     13 13 02 F6 | 	mov	arg01, local01
06018     24 FF B1 FD | 	call	#__system___string_cmp
0601c     00 FA 0D F2 | 	cmp	result1, #0 wz
06020     74 02 90 AD |  if_e	jmp	#LR__0499
06024     B0 01 00 FF 
06028     10 14 06 F6 | 	mov	arg02, ##@LR__5696
0602c     13 13 02 F6 | 	mov	arg01, local01
06030     0C FF B1 FD | 	call	#__system___string_cmp
06034     00 FA 0D F2 | 	cmp	result1, #0 wz
06038     64 02 90 AD |  if_e	jmp	#LR__0500
0603c     B0 01 00 FF 
06040     16 14 06 F6 | 	mov	arg02, ##@LR__5697
06044     13 13 02 F6 | 	mov	arg01, local01
06048     F4 FE B1 FD | 	call	#__system___string_cmp
0604c     00 FA 0D F2 | 	cmp	result1, #0 wz
06050     54 02 90 AD |  if_e	jmp	#LR__0501
06054     B0 01 00 FF 
06058     1D 14 06 F6 | 	mov	arg02, ##@LR__5698
0605c     13 13 02 F6 | 	mov	arg01, local01
06060     DC FE B1 FD | 	call	#__system___string_cmp
06064     00 FA 0D F2 | 	cmp	result1, #0 wz
06068     44 02 90 AD |  if_e	jmp	#LR__0502
0606c     B0 01 00 FF 
06070     23 14 06 F6 | 	mov	arg02, ##@LR__5699
06074     13 13 02 F6 | 	mov	arg01, local01
06078     C4 FE B1 FD | 	call	#__system___string_cmp
0607c     00 FA 0D F2 | 	cmp	result1, #0 wz
06080     34 02 90 AD |  if_e	jmp	#LR__0503
06084     B0 01 00 FF 
06088     29 14 06 F6 | 	mov	arg02, ##@LR__5700
0608c     13 13 02 F6 | 	mov	arg01, local01
06090     AC FE B1 FD | 	call	#__system___string_cmp
06094     00 FA 0D F2 | 	cmp	result1, #0 wz
06098     24 02 90 AD |  if_e	jmp	#LR__0504
0609c     B0 01 00 FF 
060a0     2D 14 06 F6 | 	mov	arg02, ##@LR__5701
060a4     13 13 02 F6 | 	mov	arg01, local01
060a8     94 FE B1 FD | 	call	#__system___string_cmp
060ac     00 FA 0D F2 | 	cmp	result1, #0 wz
060b0     14 02 90 AD |  if_e	jmp	#LR__0505
060b4     B0 01 00 FF 
060b8     31 14 06 F6 | 	mov	arg02, ##@LR__5702
060bc     13 13 02 F6 | 	mov	arg01, local01
060c0     7C FE B1 FD | 	call	#__system___string_cmp
060c4     00 FA 0D F2 | 	cmp	result1, #0 wz
060c8     04 02 90 AD |  if_e	jmp	#LR__0506
060cc     B0 01 00 FF 
060d0     35 14 06 F6 | 	mov	arg02, ##@LR__5703
060d4     13 13 02 F6 | 	mov	arg01, local01
060d8     64 FE B1 FD | 	call	#__system___string_cmp
060dc     00 FA 0D F2 | 	cmp	result1, #0 wz
060e0     F4 01 90 AD |  if_e	jmp	#LR__0507
060e4     B0 01 00 FF 
060e8     3B 14 06 F6 | 	mov	arg02, ##@LR__5704
060ec     13 13 02 F6 | 	mov	arg01, local01
060f0     4C FE B1 FD | 	call	#__system___string_cmp
060f4     00 FA 0D F2 | 	cmp	result1, #0 wz
060f8     E4 01 90 AD |  if_e	jmp	#LR__0508
060fc     B0 01 00 FF 
06100     41 14 06 F6 | 	mov	arg02, ##@LR__5705
06104     13 13 02 F6 | 	mov	arg01, local01
06108     34 FE B1 FD | 	call	#__system___string_cmp
0610c     00 FA 0D F2 | 	cmp	result1, #0 wz
06110     D4 01 90 AD |  if_e	jmp	#LR__0509
06114     B0 01 00 FF 
06118     46 14 06 F6 | 	mov	arg02, ##@LR__5706
0611c     13 13 02 F6 | 	mov	arg01, local01
06120     1C FE B1 FD | 	call	#__system___string_cmp
06124     00 FA 0D F2 | 	cmp	result1, #0 wz
06128     C4 01 90 AD |  if_e	jmp	#LR__0510
0612c     B0 01 00 FF 
06130     4A 14 06 F6 | 	mov	arg02, ##@LR__5707
06134     13 13 02 F6 | 	mov	arg01, local01
06138     04 FE B1 FD | 	call	#__system___string_cmp
0613c     00 FA 0D F2 | 	cmp	result1, #0 wz
06140     B4 01 90 AD |  if_e	jmp	#LR__0511
06144     B0 01 00 FF 
06148     4E 14 06 F6 | 	mov	arg02, ##@LR__5708
0614c     13 13 02 F6 | 	mov	arg01, local01
06150     EC FD B1 FD | 	call	#__system___string_cmp
06154     00 FA 0D F2 | 	cmp	result1, #0 wz
06158     A4 01 90 AD |  if_e	jmp	#LR__0512
0615c     A8 01 90 FD | 	jmp	#LR__0513
06160                 | LR__0460
06160     9E FA 05 F6 | 	mov	result1, #158
06164     A4 01 90 FD | 	jmp	#LR__0514
06168                 | LR__0461
06168     85 FA 05 F6 | 	mov	result1, #133
0616c     9C 01 90 FD | 	jmp	#LR__0514
06170                 | LR__0462
06170     9B FA 05 F6 | 	mov	result1, #155
06174     94 01 90 FD | 	jmp	#LR__0514
06178                 | LR__0463
06178     9B FA 05 F6 | 	mov	result1, #155
0617c     8C 01 90 FD | 	jmp	#LR__0514
06180                 | LR__0464
06180     A7 FA 05 F6 | 	mov	result1, #167
06184     84 01 90 FD | 	jmp	#LR__0514
06188                 | LR__0465
06188     84 FA 05 F6 | 	mov	result1, #132
0618c     7C 01 90 FD | 	jmp	#LR__0514
06190                 | LR__0466
06190     86 FA 05 F6 | 	mov	result1, #134
06194     74 01 90 FD | 	jmp	#LR__0514
06198                 | LR__0467
06198     A2 FA 05 F6 | 	mov	result1, #162
0619c     6C 01 90 FD | 	jmp	#LR__0514
061a0                 | LR__0468
061a0     9F FA 05 F6 | 	mov	result1, #159
061a4     64 01 90 FD | 	jmp	#LR__0514
061a8                 | LR__0469
061a8     82 FA 05 F6 | 	mov	result1, #130
061ac     5C 01 90 FD | 	jmp	#LR__0514
061b0                 | LR__0470
061b0     99 FA 05 F6 | 	mov	result1, #153
061b4     54 01 90 FD | 	jmp	#LR__0514
061b8                 | LR__0471
061b8     C5 FA 05 F6 | 	mov	result1, #197
061bc     4C 01 90 FD | 	jmp	#LR__0514
061c0                 | LR__0472
061c0     C5 FA 05 F6 | 	mov	result1, #197
061c4     44 01 90 FD | 	jmp	#LR__0514
061c8                 | LR__0473
061c8     9C FA 05 F6 | 	mov	result1, #156
061cc     3C 01 90 FD | 	jmp	#LR__0514
061d0                 | LR__0474
061d0     6F FA 05 F6 | 	mov	result1, #111
061d4     34 01 90 FD | 	jmp	#LR__0514
061d8                 | LR__0475
061d8     6F FA 05 F6 | 	mov	result1, #111
061dc     2C 01 90 FD | 	jmp	#LR__0514
061e0                 | LR__0476
061e0     93 FA 05 F6 | 	mov	result1, #147
061e4     24 01 90 FD | 	jmp	#LR__0514
061e8                 | LR__0477
061e8     94 FA 05 F6 | 	mov	result1, #148
061ec     1C 01 90 FD | 	jmp	#LR__0514
061f0                 | LR__0478
061f0     62 FA 05 F6 | 	mov	result1, #98
061f4     14 01 90 FD | 	jmp	#LR__0514
061f8                 | LR__0479
061f8     A3 FA 05 F6 | 	mov	result1, #163
061fc     0C 01 90 FD | 	jmp	#LR__0514
06200                 | LR__0480
06200     9D FA 05 F6 | 	mov	result1, #157
06204     04 01 90 FD | 	jmp	#LR__0514
06208                 | LR__0481
06208     8A FA 05 F6 | 	mov	result1, #138
0620c     FC 00 90 FD | 	jmp	#LR__0514
06210                 | LR__0482
06210     A4 FA 05 F6 | 	mov	result1, #164
06214     F4 00 90 FD | 	jmp	#LR__0514
06218                 | LR__0483
06218     A8 FA 05 F6 | 	mov	result1, #168
0621c     EC 00 90 FD | 	jmp	#LR__0514
06220                 | LR__0484
06220     AD FA 05 F6 | 	mov	result1, #173
06224     E4 00 90 FD | 	jmp	#LR__0514
06228                 | LR__0485
06228     9A FA 05 F6 | 	mov	result1, #154
0622c     DC 00 90 FD | 	jmp	#LR__0514
06230                 | LR__0486
06230     A6 FA 05 F6 | 	mov	result1, #166
06234     D4 00 90 FD | 	jmp	#LR__0514
06238                 | LR__0487
06238     66 FA 05 F6 | 	mov	result1, #102
0623c     CC 00 90 FD | 	jmp	#LR__0514
06240                 | LR__0488
06240     67 FA 05 F6 | 	mov	result1, #103
06244     C4 00 90 FD | 	jmp	#LR__0514
06248                 | LR__0489
06248     64 FA 05 F6 | 	mov	result1, #100
0624c     BC 00 90 FD | 	jmp	#LR__0514
06250                 | LR__0490
06250     65 FA 05 F6 | 	mov	result1, #101
06254     B4 00 90 FD | 	jmp	#LR__0514
06258                 | LR__0491
06258     C8 FA 05 F6 | 	mov	result1, #200
0625c     AC 00 90 FD | 	jmp	#LR__0514
06260                 | LR__0492
06260     C9 FA 05 F6 | 	mov	result1, #201
06264     A4 00 90 FD | 	jmp	#LR__0514
06268                 | LR__0493
06268     CA FA 05 F6 | 	mov	result1, #202
0626c     9C 00 90 FD | 	jmp	#LR__0514
06270                 | LR__0494
06270     CC FA 05 F6 | 	mov	result1, #204
06274     94 00 90 FD | 	jmp	#LR__0514
06278                 | LR__0495
06278     CD FA 05 F6 | 	mov	result1, #205
0627c     8C 00 90 FD | 	jmp	#LR__0514
06280                 | LR__0496
06280     CE FA 05 F6 | 	mov	result1, #206
06284     84 00 90 FD | 	jmp	#LR__0514
06288                 | LR__0497
06288     CB FA 05 F6 | 	mov	result1, #203
0628c     7C 00 90 FD | 	jmp	#LR__0514
06290                 | LR__0498
06290     98 FA 05 F6 | 	mov	result1, #152
06294     74 00 90 FD | 	jmp	#LR__0514
06298                 | LR__0499
06298     7B FA 05 F6 | 	mov	result1, #123
0629c     6C 00 90 FD | 	jmp	#LR__0514
062a0                 | LR__0500
062a0     76 FA 05 F6 | 	mov	result1, #118
062a4     64 00 90 FD | 	jmp	#LR__0514
062a8                 | LR__0501
062a8     A5 FA 05 F6 | 	mov	result1, #165
062ac     5C 00 90 FD | 	jmp	#LR__0514
062b0                 | LR__0502
062b0     7A FA 05 F6 | 	mov	result1, #122
062b4     54 00 90 FD | 	jmp	#LR__0514
062b8                 | LR__0503
062b8     BF FA 05 F6 | 	mov	result1, #191
062bc     4C 00 90 FD | 	jmp	#LR__0514
062c0                 | LR__0504
062c0     54 FA 05 F6 | 	mov	result1, #84
062c4     44 00 90 FD | 	jmp	#LR__0514
062c8                 | LR__0505
062c8     6B FA 05 F6 | 	mov	result1, #107
062cc     3C 00 90 FD | 	jmp	#LR__0514
062d0                 | LR__0506
062d0     87 FA 05 F6 | 	mov	result1, #135
062d4     34 00 90 FD | 	jmp	#LR__0514
062d8                 | LR__0507
062d8     6A FA 05 F6 | 	mov	result1, #106
062dc     2C 00 90 FD | 	jmp	#LR__0514
062e0                 | LR__0508
062e0     6E FA 05 F6 | 	mov	result1, #110
062e4     24 00 90 FD | 	jmp	#LR__0514
062e8                 | LR__0509
062e8     A1 FA 05 F6 | 	mov	result1, #161
062ec     1C 00 90 FD | 	jmp	#LR__0514
062f0                 | LR__0510
062f0     83 FA 05 F6 | 	mov	result1, #131
062f4     14 00 90 FD | 	jmp	#LR__0514
062f8                 | LR__0511
062f8     A0 FA 05 F6 | 	mov	result1, #160
062fc     0C 00 90 FD | 	jmp	#LR__0514
06300                 | LR__0512
06300     9B FA 05 F6 | 	mov	result1, #155
06304     04 00 90 FD | 	jmp	#LR__0514
06308                 | LR__0513
06308     00 FA 05 F6 | 	mov	result1, #0
0630c                 | LR__0514
0630c     A7 F0 03 F6 | 	mov	ptra, fp
06310     B2 00 A0 FD | 	call	#popregs_
06314                 | _isfunction_ret
06314     2D 00 64 FD | 	ret
06318                 | 
06318                 | ' 
06318                 | ' ' Check if the part is a name
06318                 | ' 
06318                 | ' function isname(s as string) as boolean
06318                 | _isname
06318     0D 4A 05 F6 | 	mov	COUNT_, #13
0631c     A8 00 A0 FD | 	call	#pushregs_
06320     09 27 02 F6 | 	mov	local01, arg01
06324     09 29 02 F6 | 	mov	local02, arg01
06328     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
0632c                 | LR__0520
0632c     14 FB C9 FA | 	rdbyte	result1, local02 wz
06330     01 28 06 51 |  if_ne	add	local02, #1
06334     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
06338                 | LR__0521
06338     09 29 82 F1 | 	sub	local02, arg01
0633c     14 FB 01 F6 | 	mov	result1, local02
06340     FD 2A 0A F6 | 	mov	local03, result1 wz
06344     00 FA 05 A6 |  if_e	mov	result1, #0
06348     34 02 90 AD |  if_e	jmp	#LR__0533
0634c     13 13 02 F6 | 	mov	arg01, local01
06350     01 14 06 F6 | 	mov	arg02, #1
06354     01 16 06 F6 | 	mov	arg03, #1
06358     50 1D B2 FD | 	call	#__system__Mid_S
0635c     FD 2C 02 F6 | 	mov	local04, result1
06360                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
06360     B0 01 00 FF 
06364     55 14 06 F6 | 	mov	arg02, ##@LR__5709
06368     16 13 02 F6 | 	mov	arg01, local04
0636c     D0 FB B1 FD | 	call	#__system___string_cmp
06370     00 FA 55 F2 | 	cmps	result1, #0 wc
06374     18 00 90 CD |  if_b	jmp	#LR__0522
06378     B0 01 00 FF 
0637c     57 14 06 F6 | 	mov	arg02, ##@LR__5710
06380     16 13 02 F6 | 	mov	arg01, local04
06384     B8 FB B1 FD | 	call	#__system___string_cmp
06388     01 FA 55 F2 | 	cmps	result1, #1 wc
0638c     1C 00 90 CD |  if_b	jmp	#LR__0523
06390                 | LR__0522
06390     B0 01 00 FF 
06394     59 14 06 F6 | 	mov	arg02, ##@LR__5711
06398     16 13 02 F6 | 	mov	arg01, local04
0639c     A0 FB B1 FD | 	call	#__system___string_cmp
063a0     00 FA 0D F2 | 	cmp	result1, #0 wz
063a4     00 FA 05 56 |  if_ne	mov	result1, #0
063a8     D4 01 90 5D |  if_ne	jmp	#LR__0533
063ac                 | LR__0523
063ac                 | ' if l>2 then 
063ac     03 2A 56 F2 | 	cmps	local03, #3 wc
063b0     C8 01 90 CD |  if_b	jmp	#LR__0532
063b4                 | '   for i=2 to l
063b4     02 2E 06 F6 | 	mov	local05, #2
063b8     15 31 02 F6 | 	mov	local06, local03
063bc     01 30 06 F1 | 	add	local06, #1
063c0                 | LR__0524
063c0     18 2F 52 F2 | 	cmps	local05, local06 wc
063c4     B4 01 90 3D |  if_ae	jmp	#LR__0531
063c8     13 13 02 F6 | 	mov	arg01, local01
063cc     17 15 02 F6 | 	mov	arg02, local05
063d0     01 16 06 F6 | 	mov	arg03, #1
063d4     D4 1C B2 FD | 	call	#__system__Mid_S
063d8     FD 2C 02 F6 | 	mov	local04, result1
063dc                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
063dc     15 2F 52 F2 | 	cmps	local05, local03 wc
063e0     9C 00 90 3D |  if_ae	jmp	#LR__0527
063e4     B0 01 00 FF 
063e8     5B 14 06 F6 | 	mov	arg02, ##@LR__5712
063ec     16 13 02 F6 | 	mov	arg01, local04
063f0     4C FB B1 FD | 	call	#__system___string_cmp
063f4     00 FA 55 F2 | 	cmps	result1, #0 wc
063f8     18 00 90 CD |  if_b	jmp	#LR__0525
063fc     B0 01 00 FF 
06400     5D 14 06 F6 | 	mov	arg02, ##@LR__5713
06404     16 13 02 F6 | 	mov	arg01, local04
06408     34 FB B1 FD | 	call	#__system___string_cmp
0640c     01 FA 55 F2 | 	cmps	result1, #1 wc
06410     6C 00 90 CD |  if_b	jmp	#LR__0527
06414                 | LR__0525
06414     B0 01 00 FF 
06418     5F 14 06 F6 | 	mov	arg02, ##@LR__5714
0641c     16 13 02 F6 | 	mov	arg01, local04
06420     1C FB B1 FD | 	call	#__system___string_cmp
06424     00 FA 55 F2 | 	cmps	result1, #0 wc
06428     18 00 90 CD |  if_b	jmp	#LR__0526
0642c     B0 01 00 FF 
06430     61 14 06 F6 | 	mov	arg02, ##@LR__5715
06434     16 13 02 F6 | 	mov	arg01, local04
06438     04 FB B1 FD | 	call	#__system___string_cmp
0643c     01 FA 55 F2 | 	cmps	result1, #1 wc
06440     3C 00 90 CD |  if_b	jmp	#LR__0527
06444                 | LR__0526
06444     B0 01 00 FF 
06448     63 32 06 F6 | 	mov	local07, ##@LR__5716
0644c     16 13 02 F6 | 	mov	arg01, local04
06450     19 15 02 F6 | 	mov	arg02, local07
06454     E8 FA B1 FD | 	call	#__system___string_cmp
06458     00 FA 0D F2 | 	cmp	result1, #0 wz
0645c     20 00 90 AD |  if_e	jmp	#LR__0527
06460     B0 01 00 FF 
06464     65 34 06 F6 | 	mov	local08, ##@LR__5717
06468     16 13 02 F6 | 	mov	arg01, local04
0646c     1A 15 02 F6 | 	mov	arg02, local08
06470     CC FA B1 FD | 	call	#__system___string_cmp
06474     FD 36 0A F6 | 	mov	local09, result1 wz
06478     00 FA 05 56 |  if_ne	mov	result1, #0
0647c     00 01 90 5D |  if_ne	jmp	#LR__0533
06480                 | LR__0527
06480                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06480     15 2F 0A F2 | 	cmp	local05, local03 wz
06484     EC 00 90 5D |  if_ne	jmp	#LR__0530
06488     B0 01 00 FF 
0648c     67 38 06 F6 | 	mov	local10, ##@LR__5718
06490     16 13 02 F6 | 	mov	arg01, local04
06494     1C 15 02 F6 | 	mov	arg02, local10
06498     A4 FA B1 FD | 	call	#__system___string_cmp
0649c     FD 3A 02 F6 | 	mov	local11, result1
064a0     00 3A 56 F2 | 	cmps	local11, #0 wc
064a4     1C 00 90 CD |  if_b	jmp	#LR__0528
064a8     B0 01 00 FF 
064ac     69 14 06 F6 | 	mov	arg02, ##@LR__5719
064b0     16 13 02 F6 | 	mov	arg01, local04
064b4     88 FA B1 FD | 	call	#__system___string_cmp
064b8     FD 38 02 F6 | 	mov	local10, result1
064bc     01 38 56 F2 | 	cmps	local10, #1 wc
064c0     B0 00 90 CD |  if_b	jmp	#LR__0530
064c4                 | LR__0528
064c4     B0 01 00 FF 
064c8     6B 14 06 F6 | 	mov	arg02, ##@LR__5720
064cc     16 13 02 F6 | 	mov	arg01, local04
064d0     6C FA B1 FD | 	call	#__system___string_cmp
064d4     00 FA 55 F2 | 	cmps	result1, #0 wc
064d8     1C 00 90 CD |  if_b	jmp	#LR__0529
064dc     B0 01 00 FF 
064e0     6D 36 06 F6 | 	mov	local09, ##@LR__5721
064e4     16 13 02 F6 | 	mov	arg01, local04
064e8     1B 15 02 F6 | 	mov	arg02, local09
064ec     50 FA B1 FD | 	call	#__system___string_cmp
064f0     01 FA 55 F2 | 	cmps	result1, #1 wc
064f4     7C 00 90 CD |  if_b	jmp	#LR__0530
064f8                 | LR__0529
064f8     B0 01 00 FF 
064fc     6F 36 06 F6 | 	mov	local09, ##@LR__5722
06500     16 13 02 F6 | 	mov	arg01, local04
06504     1B 15 02 F6 | 	mov	arg02, local09
06508     34 FA B1 FD | 	call	#__system___string_cmp
0650c     00 FA 4D F2 | 	cmps	result1, #0 wz
06510     60 00 90 AD |  if_e	jmp	#LR__0530
06514     B0 01 00 FF 
06518     71 34 06 F6 | 	mov	local08, ##@LR__5723
0651c     16 13 02 F6 | 	mov	arg01, local04
06520     1A 15 02 F6 | 	mov	arg02, local08
06524     18 FA B1 FD | 	call	#__system___string_cmp
06528     FD 36 0A F6 | 	mov	local09, result1 wz
0652c     44 00 90 AD |  if_e	jmp	#LR__0530
06530     B0 01 00 FF 
06534     73 3C 06 F6 | 	mov	local12, ##@LR__5724
06538     1E 35 02 F6 | 	mov	local08, local12
0653c     16 13 02 F6 | 	mov	arg01, local04
06540     1A 15 02 F6 | 	mov	arg02, local08
06544     F8 F9 B1 FD | 	call	#__system___string_cmp
06548     FD 32 0A F6 | 	mov	local07, result1 wz
0654c     24 00 90 AD |  if_e	jmp	#LR__0530
06550     B0 01 00 FF 
06554     75 3E 06 F6 | 	mov	local13, ##@LR__5725
06558     1F 3D 02 F6 | 	mov	local12, local13
0655c     16 13 02 F6 | 	mov	arg01, local04
06560     1E 15 02 F6 | 	mov	arg02, local12
06564     D8 F9 B1 FD | 	call	#__system___string_cmp
06568     FD 34 0A F6 | 	mov	local08, result1 wz
0656c     00 FA 05 56 |  if_ne	mov	result1, #0
06570     0C 00 90 5D |  if_ne	jmp	#LR__0533
06574                 | LR__0530
06574     01 2E 06 F1 | 	add	local05, #1
06578     44 FE 9F FD | 	jmp	#LR__0524
0657c                 | LR__0531
0657c                 | LR__0532
0657c                 | ' return true
0657c     01 FA 65 F6 | 	neg	result1, #1
06580                 | LR__0533
06580     A7 F0 03 F6 | 	mov	ptra, fp
06584     B2 00 A0 FD | 	call	#popregs_
06588                 | _isname_ret
06588     2D 00 64 FD | 	ret
0658c                 | 
0658c                 | ' 
0658c                 | ' ' Check if the part is a number.  
0658c                 | ' 
0658c                 | ' function isnum(s as string) as boolean 
0658c                 | _isnum
0658c     13 4A 05 F6 | 	mov	COUNT_, #19
06590     A8 00 A0 FD | 	call	#pushregs_
06594     09 27 02 F6 | 	mov	local01, arg01
06598     00 28 06 F6 | 	mov	local02, #0
0659c     00 2A 06 F6 | 	mov	local03, #0
065a0     13 13 02 F6 | 	mov	arg01, local01
065a4     09 2D 02 F6 | 	mov	local04, arg01
065a8     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
065ac                 | LR__0540
065ac     16 FB C9 FA | 	rdbyte	result1, local04 wz
065b0     01 2C 06 51 |  if_ne	add	local04, #1
065b4     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
065b8                 | LR__0541
065b8     09 2D 82 F1 | 	sub	local04, arg01
065bc     16 FB 01 F6 | 	mov	result1, local04
065c0     FD 2E 0A F6 | 	mov	local05, result1 wz
065c4     00 FA 05 A6 |  if_e	mov	result1, #0
065c8     A0 03 90 AD |  if_e	jmp	#LR__0556
065cc     13 13 02 F6 | 	mov	arg01, local01
065d0     01 14 06 F6 | 	mov	arg02, #1
065d4     01 16 06 F6 | 	mov	arg03, #1
065d8     D0 1A B2 FD | 	call	#__system__Mid_S
065dc     FD 30 02 F6 | 	mov	local06, result1
065e0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
065e0     B0 01 00 FF 
065e4     77 14 06 F6 | 	mov	arg02, ##@LR__5726
065e8     18 13 02 F6 | 	mov	arg01, local06
065ec     50 F9 B1 FD | 	call	#__system___string_cmp
065f0     00 FA 55 F2 | 	cmps	result1, #0 wc
065f4     1C 00 90 CD |  if_b	jmp	#LR__0542
065f8     B0 01 00 FF 
065fc     79 32 06 F6 | 	mov	local07, ##@LR__5727
06600     18 13 02 F6 | 	mov	arg01, local06
06604     19 15 02 F6 | 	mov	arg02, local07
06608     34 F9 B1 FD | 	call	#__system___string_cmp
0660c     01 FA 55 F2 | 	cmps	result1, #1 wc
06610     84 00 90 CD |  if_b	jmp	#LR__0543
06614                 | LR__0542
06614     B0 01 00 FF 
06618     7B 34 06 F6 | 	mov	local08, ##@LR__5728
0661c     1A 33 02 F6 | 	mov	local07, local08
06620     18 13 02 F6 | 	mov	arg01, local06
06624     19 15 02 F6 | 	mov	arg02, local07
06628     14 F9 B1 FD | 	call	#__system___string_cmp
0662c     00 FA 0D F2 | 	cmp	result1, #0 wz
06630     64 00 90 AD |  if_e	jmp	#LR__0543
06634     B0 01 00 FF 
06638     7D 36 06 F6 | 	mov	local09, ##@LR__5729
0663c     1B 35 02 F6 | 	mov	local08, local09
06640     18 13 02 F6 | 	mov	arg01, local06
06644     1A 15 02 F6 | 	mov	arg02, local08
06648     F4 F8 B1 FD | 	call	#__system___string_cmp
0664c     FD 32 0A F6 | 	mov	local07, result1 wz
06650     44 00 90 AD |  if_e	jmp	#LR__0543
06654     B0 01 00 FF 
06658     7F 38 06 F6 | 	mov	local10, ##@LR__5730
0665c     1C 37 02 F6 | 	mov	local09, local10
06660     18 13 02 F6 | 	mov	arg01, local06
06664     1B 15 02 F6 | 	mov	arg02, local09
06668     D4 F8 B1 FD | 	call	#__system___string_cmp
0666c     FD 34 0A F6 | 	mov	local08, result1 wz
06670     24 00 90 AD |  if_e	jmp	#LR__0543
06674     B0 01 00 FF 
06678     81 3A 06 F6 | 	mov	local11, ##@LR__5731
0667c     1D 39 02 F6 | 	mov	local10, local11
06680     18 13 02 F6 | 	mov	arg01, local06
06684     1C 15 02 F6 | 	mov	arg02, local10
06688     B4 F8 B1 FD | 	call	#__system___string_cmp
0668c     FD 36 0A F6 | 	mov	local09, result1 wz
06690     00 FA 05 56 |  if_ne	mov	result1, #0
06694     D4 02 90 5D |  if_ne	jmp	#LR__0556
06698                 | LR__0543
06698                 | ' if m$="." then ds=1
06698     B0 01 00 FF 
0669c     83 14 06 F6 | 	mov	arg02, ##@LR__5732
066a0     18 13 02 F6 | 	mov	arg01, local06
066a4     98 F8 B1 FD | 	call	#__system___string_cmp
066a8     00 FA 0D F2 | 	cmp	result1, #0 wz
066ac     01 28 06 A6 |  if_e	mov	local02, #1
066b0                 | ' if m$="$" then hex=1 else hex=0
066b0     B0 01 00 FF 
066b4     85 14 06 F6 | 	mov	arg02, ##@LR__5733
066b8     18 13 02 F6 | 	mov	arg01, local06
066bc     80 F8 B1 FD | 	call	#__system___string_cmp
066c0     00 FA 0D F2 | 	cmp	result1, #0 wz
066c4     01 3C 06 A6 |  if_e	mov	local12, #1
066c8     00 3C 06 56 |  if_ne	mov	local12, #0
066cc                 | ' if m$="%" then bin=1 else bin=0
066cc     B0 01 00 FF 
066d0     87 14 06 F6 | 	mov	arg02, ##@LR__5734
066d4     18 13 02 F6 | 	mov	arg01, local06
066d8     64 F8 B1 FD | 	call	#__system___string_cmp
066dc     00 FA 0D F2 | 	cmp	result1, #0 wz
066e0     01 3E 06 A6 |  if_e	mov	local13, #1
066e4     00 3E 06 56 |  if_ne	mov	local13, #0
066e8                 | ' if l>1 then 
066e8     02 2E 56 F2 | 	cmps	local05, #2 wc
066ec     78 02 90 CD |  if_b	jmp	#LR__0555
066f0                 | '   for i=2 to l
066f0     02 40 06 F6 | 	mov	local14, #2
066f4     17 43 02 F6 | 	mov	local15, local05
066f8     01 42 06 F1 | 	add	local15, #1
066fc                 | LR__0544
066fc     21 41 52 F2 | 	cmps	local14, local15 wc
06700     64 02 90 3D |  if_ae	jmp	#LR__0554
06704     13 13 02 F6 | 	mov	arg01, local01
06708     20 15 02 F6 | 	mov	arg02, local14
0670c     01 16 06 F6 | 	mov	arg03, #1
06710     98 19 B2 FD | 	call	#__system__Mid_S
06714     FD 30 02 F6 | 	mov	local06, result1
06718     00 44 06 F6 | 	mov	local16, #0
0671c                 | '     m$=mid$(s,i,1) : b=false
0671c                 | '     if m$>="0" andalso m$<="9" then b=true  
0671c     B0 01 00 FF 
06720     89 14 06 F6 | 	mov	arg02, ##@LR__5735
06724     18 13 02 F6 | 	mov	arg01, local06
06728     14 F8 B1 FD | 	call	#__system___string_cmp
0672c     00 FA 55 F2 | 	cmps	result1, #0 wc
06730     1C 00 90 CD |  if_b	jmp	#LR__0545
06734     B0 01 00 FF 
06738     8B 32 06 F6 | 	mov	local07, ##@LR__5736
0673c     18 13 02 F6 | 	mov	arg01, local06
06740     19 15 02 F6 | 	mov	arg02, local07
06744     F8 F7 B1 FD | 	call	#__system___string_cmp
06748     01 FA 55 F2 | 	cmps	result1, #1 wc
0674c     01 44 66 C6 |  if_b	neg	local16, #1
06750                 | LR__0545
06750                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06750     B0 01 00 FF 
06754     8D 14 06 F6 | 	mov	arg02, ##@LR__5737
06758     18 13 02 F6 | 	mov	arg01, local06
0675c     E0 F7 B1 FD | 	call	#__system___string_cmp
06760     00 FA 0D F2 | 	cmp	result1, #0 wz
06764     7C 00 90 AD |  if_e	jmp	#LR__0546
06768     B0 01 00 FF 
0676c     8F 32 06 F6 | 	mov	local07, ##@LR__5738
06770     18 13 02 F6 | 	mov	arg01, local06
06774     19 15 02 F6 | 	mov	arg02, local07
06778     C4 F7 B1 FD | 	call	#__system___string_cmp
0677c     00 FA 0D F2 | 	cmp	result1, #0 wz
06780     60 00 90 AD |  if_e	jmp	#LR__0546
06784     B0 01 00 FF 
06788     91 34 06 F6 | 	mov	local08, ##@LR__5739
0678c     1A 33 02 F6 | 	mov	local07, local08
06790     18 13 02 F6 | 	mov	arg01, local06
06794     19 15 02 F6 | 	mov	arg02, local07
06798     A4 F7 B1 FD | 	call	#__system___string_cmp
0679c     00 FA 0D F2 | 	cmp	result1, #0 wz
067a0     40 00 90 AD |  if_e	jmp	#LR__0546
067a4     B0 01 00 FF 
067a8     93 36 06 F6 | 	mov	local09, ##@LR__5740
067ac     1B 35 02 F6 | 	mov	local08, local09
067b0     18 13 02 F6 | 	mov	arg01, local06
067b4     1A 15 02 F6 | 	mov	arg02, local08
067b8     84 F7 B1 FD | 	call	#__system___string_cmp
067bc     FD 32 0A F6 | 	mov	local07, result1 wz
067c0     20 00 90 AD |  if_e	jmp	#LR__0546
067c4     B0 01 00 FF 
067c8     95 38 06 F6 | 	mov	local10, ##@LR__5741
067cc     1C 37 02 F6 | 	mov	local09, local10
067d0     18 13 02 F6 | 	mov	arg01, local06
067d4     1B 15 02 F6 | 	mov	arg02, local09
067d8     64 F7 B1 FD | 	call	#__system___string_cmp
067dc     FD 34 0A F6 | 	mov	local08, result1 wz
067e0     04 00 90 5D |  if_ne	jmp	#LR__0547
067e4                 | LR__0546
067e4     01 44 66 F6 | 	neg	local16, #1
067e8                 | LR__0547
067e8                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
067e8     01 3C 0E F2 | 	cmp	local12, #1 wz
067ec     34 00 90 5D |  if_ne	jmp	#LR__0548
067f0     B0 01 00 FF 
067f4     97 14 06 F6 | 	mov	arg02, ##@LR__5742
067f8     18 13 02 F6 | 	mov	arg01, local06
067fc     40 F7 B1 FD | 	call	#__system___string_cmp
06800     00 FA 55 F2 | 	cmps	result1, #0 wc
06804     1C 00 90 CD |  if_b	jmp	#LR__0548
06808     B0 01 00 FF 
0680c     99 32 06 F6 | 	mov	local07, ##@LR__5743
06810     18 13 02 F6 | 	mov	arg01, local06
06814     19 15 02 F6 | 	mov	arg02, local07
06818     24 F7 B1 FD | 	call	#__system___string_cmp
0681c     01 FA 55 F2 | 	cmps	result1, #1 wc
06820     01 44 66 C6 |  if_b	neg	local16, #1
06824                 | LR__0548
06824                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06824     01 3E 0E F2 | 	cmp	local13, #1 wz
06828     58 00 90 5D |  if_ne	jmp	#LR__0550
0682c     B0 01 00 FF 
06830     9B 14 06 F6 | 	mov	arg02, ##@LR__5744
06834     18 13 02 F6 | 	mov	arg01, local06
06838     04 F7 B1 FD | 	call	#__system___string_cmp
0683c     00 FA 55 F2 | 	cmps	result1, #0 wc
06840     1C 00 90 CD |  if_b	jmp	#LR__0549
06844     B0 01 00 FF 
06848     9D 32 06 F6 | 	mov	local07, ##@LR__5745
0684c     18 13 02 F6 | 	mov	arg01, local06
06850     19 15 02 F6 | 	mov	arg02, local07
06854     E8 F6 B1 FD | 	call	#__system___string_cmp
06858     01 FA 55 F2 | 	cmps	result1, #1 wc
0685c     24 00 90 CD |  if_b	jmp	#LR__0550
06860                 | LR__0549
06860     B0 01 00 FF 
06864     9F 34 06 F6 | 	mov	local08, ##@LR__5746
06868     1A 33 02 F6 | 	mov	local07, local08
0686c     18 13 02 F6 | 	mov	arg01, local06
06870     19 15 02 F6 | 	mov	arg02, local07
06874     C8 F6 B1 FD | 	call	#__system___string_cmp
06878     00 FA 0D F2 | 	cmp	result1, #0 wz
0687c     00 FA 05 56 |  if_ne	mov	result1, #0
06880     E8 00 90 5D |  if_ne	jmp	#LR__0556
06884                 | LR__0550
06884                 | '     if not b then return false
06884     22 45 22 F6 | 	not	local16, local16
06888     00 44 0E F2 | 	cmp	local16, #0 wz
0688c     00 FA 05 56 |  if_ne	mov	result1, #0
06890     D8 00 90 5D |  if_ne	jmp	#LR__0556
06894                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06894     B0 01 00 FF 
06898     A1 14 06 F6 | 	mov	arg02, ##@LR__5747
0689c     18 13 02 F6 | 	mov	arg01, local06
068a0     9C F6 B1 FD | 	call	#__system___string_cmp
068a4     00 FA 0D F2 | 	cmp	result1, #0 wz
068a8     3C 00 90 5D |  if_ne	jmp	#LR__0551
068ac     20 15 02 F6 | 	mov	arg02, local14
068b0     01 14 86 F1 | 	sub	arg02, #1
068b4     13 13 02 F6 | 	mov	arg01, local01
068b8     01 16 06 F6 | 	mov	arg03, #1
068bc     EC 17 B2 FD | 	call	#__system__Mid_S
068c0     FD 12 02 F6 | 	mov	arg01, result1
068c4     DC 19 B2 FD | 	call	#__system__LCase_S
068c8     FD 12 02 F6 | 	mov	arg01, result1
068cc     B0 01 00 FF 
068d0     A3 32 06 F6 | 	mov	local07, ##@LR__5748
068d4     19 15 02 F6 | 	mov	arg02, local07
068d8     64 F6 B1 FD | 	call	#__system___string_cmp
068dc     00 FA 0D F2 | 	cmp	result1, #0 wz
068e0     00 FA 05 56 |  if_ne	mov	result1, #0
068e4     84 00 90 5D |  if_ne	jmp	#LR__0556
068e8                 | LR__0551
068e8                 | '     if m$="." then ds+=1: if ds>1 then return false
068e8     B0 01 00 FF 
068ec     A5 14 06 F6 | 	mov	arg02, ##@LR__5749
068f0     18 13 02 F6 | 	mov	arg01, local06
068f4     48 F6 B1 FD | 	call	#__system___string_cmp
068f8     00 FA 0D F2 | 	cmp	result1, #0 wz
068fc     01 28 06 A1 |  if_e	add	local02, #1
06900     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06904     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06908     60 00 90 2D |  if_nc_and_z	jmp	#LR__0556
0690c                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
0690c     B0 01 00 FF 
06910     A7 46 06 F6 | 	mov	local17, ##@LR__5750
06914     23 49 02 F6 | 	mov	local18, local17
06918     18 13 02 F6 | 	mov	arg01, local06
0691c     24 15 02 F6 | 	mov	arg02, local18
06920     1C F6 B1 FD | 	call	#__system___string_cmp
06924     FD 4A 0A F6 | 	mov	local19, result1 wz
06928     20 00 90 AD |  if_e	jmp	#LR__0552
0692c     B0 01 00 FF 
06930     A9 32 06 F6 | 	mov	local07, ##@LR__5751
06934     19 47 02 F6 | 	mov	local17, local07
06938     18 13 02 F6 | 	mov	arg01, local06
0693c     23 15 02 F6 | 	mov	arg02, local17
06940     FC F5 B1 FD | 	call	#__system___string_cmp
06944     FD 48 0A F6 | 	mov	local18, result1 wz
06948     14 00 90 5D |  if_ne	jmp	#LR__0553
0694c                 | LR__0552
0694c     01 2A 06 F1 | 	add	local03, #1
06950     00 3C 0E F2 | 	cmp	local12, #0 wz
06954     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06958     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
0695c     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0556
06960                 | LR__0553
06960     01 40 06 F1 | 	add	local14, #1
06964     94 FD 9F FD | 	jmp	#LR__0544
06968                 | LR__0554
06968                 | LR__0555
06968                 | ' return true
06968     01 FA 65 F6 | 	neg	result1, #1
0696c                 | LR__0556
0696c     A7 F0 03 F6 | 	mov	ptra, fp
06970     B2 00 A0 FD | 	call	#popregs_
06974                 | _isnum_ret
06974     2D 00 64 FD | 	ret
06978                 | 
06978                 | '   
06978                 | ' ' Check if the part is an integer number.    
06978                 | '   
06978                 | ' function isint(s as string) as boolean
06978                 | _isint
06978     0E 4A 05 F6 | 	mov	COUNT_, #14
0697c     A8 00 A0 FD | 	call	#pushregs_
06980     09 27 02 F6 | 	mov	local01, arg01
06984     09 29 02 F6 | 	mov	local02, arg01
06988     97 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
0698c                 | LR__0560
0698c     14 FB C9 FA | 	rdbyte	result1, local02 wz
06990     01 28 06 51 |  if_ne	add	local02, #1
06994     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
06998                 | LR__0561
06998     09 29 82 F1 | 	sub	local02, arg01
0699c     14 FB 01 F6 | 	mov	result1, local02
069a0     FD 2A 0A F6 | 	mov	local03, result1 wz
069a4     00 FA 05 A6 |  if_e	mov	result1, #0
069a8     64 02 90 AD |  if_e	jmp	#LR__0574
069ac     13 13 02 F6 | 	mov	arg01, local01
069b0     01 14 06 F6 | 	mov	arg02, #1
069b4     01 16 06 F6 | 	mov	arg03, #1
069b8     F0 16 B2 FD | 	call	#__system__Mid_S
069bc     FD 2C 02 F6 | 	mov	local04, result1
069c0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
069c0     B0 01 00 FF 
069c4     AB 14 06 F6 | 	mov	arg02, ##@LR__5752
069c8     16 13 02 F6 | 	mov	arg01, local04
069cc     70 F5 B1 FD | 	call	#__system___string_cmp
069d0     00 FA 55 F2 | 	cmps	result1, #0 wc
069d4     1C 00 90 CD |  if_b	jmp	#LR__0562
069d8     B0 01 00 FF 
069dc     AD 2E 06 F6 | 	mov	local05, ##@LR__5753
069e0     16 13 02 F6 | 	mov	arg01, local04
069e4     17 15 02 F6 | 	mov	arg02, local05
069e8     54 F5 B1 FD | 	call	#__system___string_cmp
069ec     01 FA 55 F2 | 	cmps	result1, #1 wc
069f0     64 00 90 CD |  if_b	jmp	#LR__0563
069f4                 | LR__0562
069f4     B0 01 00 FF 
069f8     AF 30 06 F6 | 	mov	local06, ##@LR__5754
069fc     18 2F 02 F6 | 	mov	local05, local06
06a00     16 13 02 F6 | 	mov	arg01, local04
06a04     17 15 02 F6 | 	mov	arg02, local05
06a08     34 F5 B1 FD | 	call	#__system___string_cmp
06a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
06a10     44 00 90 AD |  if_e	jmp	#LR__0563
06a14     B0 01 00 FF 
06a18     B1 32 06 F6 | 	mov	local07, ##@LR__5755
06a1c     19 31 02 F6 | 	mov	local06, local07
06a20     16 13 02 F6 | 	mov	arg01, local04
06a24     18 15 02 F6 | 	mov	arg02, local06
06a28     14 F5 B1 FD | 	call	#__system___string_cmp
06a2c     FD 2E 0A F6 | 	mov	local05, result1 wz
06a30     24 00 90 AD |  if_e	jmp	#LR__0563
06a34     B0 01 00 FF 
06a38     B3 34 06 F6 | 	mov	local08, ##@LR__5756
06a3c     1A 33 02 F6 | 	mov	local07, local08
06a40     16 13 02 F6 | 	mov	arg01, local04
06a44     19 15 02 F6 | 	mov	arg02, local07
06a48     F4 F4 B1 FD | 	call	#__system___string_cmp
06a4c     FD 30 0A F6 | 	mov	local06, result1 wz
06a50     00 FA 05 56 |  if_ne	mov	result1, #0
06a54     B8 01 90 5D |  if_ne	jmp	#LR__0574
06a58                 | LR__0563
06a58                 | ' if m$="$" then hex=1 else hex=0
06a58     B0 01 00 FF 
06a5c     B5 14 06 F6 | 	mov	arg02, ##@LR__5757
06a60     16 13 02 F6 | 	mov	arg01, local04
06a64     D8 F4 B1 FD | 	call	#__system___string_cmp
06a68     00 FA 0D F2 | 	cmp	result1, #0 wz
06a6c     01 36 06 A6 |  if_e	mov	local09, #1
06a70     00 36 06 56 |  if_ne	mov	local09, #0
06a74                 | ' if m$="%" then bin=1 else bin=0
06a74     B0 01 00 FF 
06a78     B7 14 06 F6 | 	mov	arg02, ##@LR__5758
06a7c     16 13 02 F6 | 	mov	arg01, local04
06a80     BC F4 B1 FD | 	call	#__system___string_cmp
06a84     00 FA 0D F2 | 	cmp	result1, #0 wz
06a88     01 38 06 A6 |  if_e	mov	local10, #1
06a8c     00 38 06 56 |  if_ne	mov	local10, #0
06a90                 | ' if l>1 then 
06a90     02 2A 56 F2 | 	cmps	local03, #2 wc
06a94     74 01 90 CD |  if_b	jmp	#LR__0573
06a98                 | '   for i=2 to l
06a98     02 3A 06 F6 | 	mov	local11, #2
06a9c     15 3D 02 F6 | 	mov	local12, local03
06aa0     01 3C 06 F1 | 	add	local12, #1
06aa4                 | LR__0564
06aa4     1E 3B 52 F2 | 	cmps	local11, local12 wc
06aa8     60 01 90 3D |  if_ae	jmp	#LR__0572
06aac     13 13 02 F6 | 	mov	arg01, local01
06ab0     1D 15 02 F6 | 	mov	arg02, local11
06ab4     01 16 06 F6 | 	mov	arg03, #1
06ab8     F0 15 B2 FD | 	call	#__system__Mid_S
06abc     FD 2C 02 F6 | 	mov	local04, result1
06ac0                 | '     m$=mid$(s,i,1) 
06ac0                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06ac0     00 36 0E F2 | 	cmp	local09, #0 wz
06ac4     50 00 90 5D |  if_ne	jmp	#LR__0566
06ac8     B0 01 00 FF 
06acc     B9 14 06 F6 | 	mov	arg02, ##@LR__5759
06ad0     16 13 02 F6 | 	mov	arg01, local04
06ad4     68 F4 B1 FD | 	call	#__system___string_cmp
06ad8     00 FA 55 F2 | 	cmps	result1, #0 wc
06adc     18 00 90 CD |  if_b	jmp	#LR__0565
06ae0     B0 01 00 FF 
06ae4     BB 14 06 F6 | 	mov	arg02, ##@LR__5760
06ae8     16 13 02 F6 | 	mov	arg01, local04
06aec     50 F4 B1 FD | 	call	#__system___string_cmp
06af0     01 FA 55 F2 | 	cmps	result1, #1 wc
06af4     20 00 90 CD |  if_b	jmp	#LR__0566
06af8                 | LR__0565
06af8     B0 01 00 FF 
06afc     BD 30 06 F6 | 	mov	local06, ##@LR__5761
06b00     16 13 02 F6 | 	mov	arg01, local04
06b04     18 15 02 F6 | 	mov	arg02, local06
06b08     34 F4 B1 FD | 	call	#__system___string_cmp
06b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
06b10     00 FA 05 56 |  if_ne	mov	result1, #0
06b14     F8 00 90 5D |  if_ne	jmp	#LR__0574
06b18                 | LR__0566
06b18                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06b18     01 36 0E F2 | 	cmp	local09, #1 wz
06b1c     90 00 90 5D |  if_ne	jmp	#LR__0569
06b20     B0 01 00 FF 
06b24     BF 14 06 F6 | 	mov	arg02, ##@LR__5762
06b28     16 13 02 F6 | 	mov	arg01, local04
06b2c     10 F4 B1 FD | 	call	#__system___string_cmp
06b30     00 FA 55 F2 | 	cmps	result1, #0 wc
06b34     1C 00 90 CD |  if_b	jmp	#LR__0567
06b38     B0 01 00 FF 
06b3c     C1 14 06 F6 | 	mov	arg02, ##@LR__5763
06b40     16 13 02 F6 | 	mov	arg01, local04
06b44     F8 F3 B1 FD | 	call	#__system___string_cmp
06b48     FD 3E 02 F6 | 	mov	local13, result1
06b4c     01 3E 56 F2 | 	cmps	local13, #1 wc
06b50     5C 00 90 CD |  if_b	jmp	#LR__0569
06b54                 | LR__0567
06b54     B0 01 00 FF 
06b58     C3 2E 06 F6 | 	mov	local05, ##@LR__5764
06b5c     16 13 02 F6 | 	mov	arg01, local04
06b60     17 15 02 F6 | 	mov	arg02, local05
06b64     D8 F3 B1 FD | 	call	#__system___string_cmp
06b68     FD 40 02 F6 | 	mov	local14, result1
06b6c     00 40 56 F2 | 	cmps	local14, #0 wc
06b70     1C 00 90 CD |  if_b	jmp	#LR__0568
06b74     B0 01 00 FF 
06b78     C5 32 06 F6 | 	mov	local07, ##@LR__5765
06b7c     16 13 02 F6 | 	mov	arg01, local04
06b80     19 15 02 F6 | 	mov	arg02, local07
06b84     B8 F3 B1 FD | 	call	#__system___string_cmp
06b88     01 FA 55 F2 | 	cmps	result1, #1 wc
06b8c     20 00 90 CD |  if_b	jmp	#LR__0569
06b90                 | LR__0568
06b90     B0 01 00 FF 
06b94     C7 34 06 F6 | 	mov	local08, ##@LR__5766
06b98     16 13 02 F6 | 	mov	arg01, local04
06b9c     1A 15 02 F6 | 	mov	arg02, local08
06ba0     9C F3 B1 FD | 	call	#__system___string_cmp
06ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ba8     00 FA 05 56 |  if_ne	mov	result1, #0
06bac     60 00 90 5D |  if_ne	jmp	#LR__0574
06bb0                 | LR__0569
06bb0                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
06bb0     01 38 0E F2 | 	cmp	local10, #1 wz
06bb4     4C 00 90 5D |  if_ne	jmp	#LR__0571
06bb8     B0 01 00 FF 
06bbc     C9 14 06 F6 | 	mov	arg02, ##@LR__5767
06bc0     16 13 02 F6 | 	mov	arg01, local04
06bc4     78 F3 B1 FD | 	call	#__system___string_cmp
06bc8     00 FA 55 F2 | 	cmps	result1, #0 wc
06bcc     18 00 90 CD |  if_b	jmp	#LR__0570
06bd0     B0 01 00 FF 
06bd4     CB 14 06 F6 | 	mov	arg02, ##@LR__5768
06bd8     16 13 02 F6 | 	mov	arg01, local04
06bdc     60 F3 B1 FD | 	call	#__system___string_cmp
06be0     01 FA 55 F2 | 	cmps	result1, #1 wc
06be4     1C 00 90 CD |  if_b	jmp	#LR__0571
06be8                 | LR__0570
06be8     B0 01 00 FF 
06bec     CD 14 06 F6 | 	mov	arg02, ##@LR__5769
06bf0     16 13 02 F6 | 	mov	arg01, local04
06bf4     48 F3 B1 FD | 	call	#__system___string_cmp
06bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
06bfc     00 FA 05 56 |  if_ne	mov	result1, #0
06c00     0C 00 90 5D |  if_ne	jmp	#LR__0574
06c04                 | LR__0571
06c04     01 3A 06 F1 | 	add	local11, #1
06c08     98 FE 9F FD | 	jmp	#LR__0564
06c0c                 | LR__0572
06c0c                 | LR__0573
06c0c                 | ' return true
06c0c     01 FA 65 F6 | 	neg	result1, #1
06c10                 | LR__0574
06c10     A7 F0 03 F6 | 	mov	ptra, fp
06c14     B2 00 A0 FD | 	call	#popregs_
06c18                 | _isint_ret
06c18     2D 00 64 FD | 	ret
06c1c                 | 
06c1c                 | ' 
06c1c                 | ' ' Check if the part is a positive decimal number.  
06c1c                 | ' 
06c1c                 | ' function isdec(s as string) as boolean
06c1c                 | _isdec
06c1c     05 4A 05 F6 | 	mov	COUNT_, #5
06c20     A8 00 A0 FD | 	call	#pushregs_
06c24     09 27 02 F6 | 	mov	local01, arg01
06c28     09 29 02 F6 | 	mov	local02, arg01
06c2c     97 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06c30                 | LR__0580
06c30     14 FB C9 FA | 	rdbyte	result1, local02 wz
06c34     01 28 06 51 |  if_ne	add	local02, #1
06c38     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06c3c                 | LR__0581
06c3c     09 29 82 F1 | 	sub	local02, arg01
06c40     14 FB 01 F6 | 	mov	result1, local02
06c44     FD 28 0A F6 | 	mov	local02, result1 wz
06c48     00 FA 05 A6 |  if_e	mov	result1, #0
06c4c     80 00 90 AD |  if_e	jmp	#LR__0586
06c50                 | ' for i=1 to l
06c50     01 2A 06 F6 | 	mov	local03, #1
06c54     14 2D 02 F6 | 	mov	local04, local02
06c58     01 2C 06 F1 | 	add	local04, #1
06c5c                 | LR__0582
06c5c     16 2B 52 F2 | 	cmps	local03, local04 wc
06c60     68 00 90 3D |  if_ae	jmp	#LR__0585
06c64     13 13 02 F6 | 	mov	arg01, local01
06c68     15 15 02 F6 | 	mov	arg02, local03
06c6c     01 16 06 F6 | 	mov	arg03, #1
06c70     38 14 B2 FD | 	call	#__system__Mid_S
06c74     FD 2E 02 F6 | 	mov	local05, result1
06c78                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06c78     B0 01 00 FF 
06c7c     CF 14 06 F6 | 	mov	arg02, ##@LR__5770
06c80     17 13 02 F6 | 	mov	arg01, local05
06c84     B8 F2 B1 FD | 	call	#__system___string_cmp
06c88     00 FA 55 F2 | 	cmps	result1, #0 wc
06c8c     18 00 90 CD |  if_b	jmp	#LR__0583
06c90     B0 01 00 FF 
06c94     D1 14 06 F6 | 	mov	arg02, ##@LR__5771
06c98     17 13 02 F6 | 	mov	arg01, local05
06c9c     A0 F2 B1 FD | 	call	#__system___string_cmp
06ca0     01 FA 55 F2 | 	cmps	result1, #1 wc
06ca4     1C 00 90 CD |  if_b	jmp	#LR__0584
06ca8                 | LR__0583
06ca8     B0 01 00 FF 
06cac     D3 14 06 F6 | 	mov	arg02, ##@LR__5772
06cb0     17 13 02 F6 | 	mov	arg01, local05
06cb4     88 F2 B1 FD | 	call	#__system___string_cmp
06cb8     00 FA 0D F2 | 	cmp	result1, #0 wz
06cbc     00 FA 05 56 |  if_ne	mov	result1, #0
06cc0     0C 00 90 5D |  if_ne	jmp	#LR__0586
06cc4                 | LR__0584
06cc4     01 2A 06 F1 | 	add	local03, #1
06cc8     90 FF 9F FD | 	jmp	#LR__0582
06ccc                 | LR__0585
06ccc                 | ' return true
06ccc     01 FA 65 F6 | 	neg	result1, #1
06cd0                 | LR__0586
06cd0     A7 F0 03 F6 | 	mov	ptra, fp
06cd4     B2 00 A0 FD | 	call	#popregs_
06cd8                 | _isdec_ret
06cd8     2D 00 64 FD | 	ret
06cdc                 | 
06cdc                 | ' 
06cdc                 | ' ' Check if the part is a string.  
06cdc                 | ' 
06cdc                 | ' function isstring(s as string) as boolean
06cdc                 | _isstring
06cdc     01 4A 05 F6 | 	mov	COUNT_, #1
06ce0     A8 00 A0 FD | 	call	#pushregs_
06ce4                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
06ce4     09 27 02 F6 | 	mov	local01, arg01
06ce8     01 14 06 F6 | 	mov	arg02, #1
06cec     A4 12 B2 FD | 	call	#__system__Left_S
06cf0     FD 12 02 F6 | 	mov	arg01, result1
06cf4     B0 01 00 FF 
06cf8     D5 14 06 F6 | 	mov	arg02, ##@LR__5773
06cfc     40 F2 B1 FD | 	call	#__system___string_cmp
06d00     00 FA 4D F2 | 	cmps	result1, #0 wz
06d04     28 00 90 5D |  if_ne	jmp	#LR__0590
06d08     13 13 02 F6 | 	mov	arg01, local01
06d0c     01 14 06 F6 | 	mov	arg02, #1
06d10     08 13 B2 FD | 	call	#__system__Right_S
06d14     FD 12 02 F6 | 	mov	arg01, result1
06d18     B0 01 00 FF 
06d1c     D7 14 06 F6 | 	mov	arg02, ##@LR__5774
06d20     1C F2 B1 FD | 	call	#__system___string_cmp
06d24     00 FA 4D F2 | 	cmps	result1, #0 wz
06d28     01 FA 65 A6 |  if_e	neg	result1, #1
06d2c     04 00 90 AD |  if_e	jmp	#LR__0591
06d30                 | LR__0590
06d30     00 FA 05 F6 | 	mov	result1, #0
06d34                 | LR__0591
06d34     A7 F0 03 F6 | 	mov	ptra, fp
06d38     B2 00 A0 FD | 	call	#popregs_
06d3c                 | _isstring_ret
06d3c     2D 00 64 FD | 	ret
06d40                 | 
06d40                 | ' 
06d40                 | ' ' getnoteval. Returns the frequency of note token
06d40                 | ' 
06d40                 | ' function getnoteval(token) as single
06d40                 | _getnoteval
06d40     02 4A 05 F6 | 	mov	COUNT_, #2
06d44     A8 00 A0 FD | 	call	#pushregs_
06d48     01 00 00 FF 
06d4c     00 13 86 F1 | 	sub	arg01, ##768
06d50     09 15 52 F6 | 	abs	arg02, arg01 wc
06d54     0C 14 16 FD | 	qdiv	arg02, #12
06d58     14 00 00 FF 
06d5c     D8 E4 05 F1 | 	add	objptr, ##10456
06d60     19 14 62 FD | 	getqy	arg02
06d64     0A 15 82 F6 | 	negc	arg02, arg02
06d68     02 14 66 F0 | 	shl	arg02, #2
06d6c     F2 14 02 F1 | 	add	arg02, objptr
06d70     0A 27 02 FB | 	rdlong	local01, arg02
06d74     09 15 52 F6 | 	abs	arg02, arg01 wc
06d78     0C 14 16 FD | 	qdiv	arg02, #12
06d7c     14 00 00 FF 
06d80     D8 E4 85 F1 | 	sub	objptr, ##10456
06d84     01 12 06 F6 | 	mov	arg01, #1
06d88                 | ' noteexp=1+(note/12) 
06d88                 | ' return (2.0^noteexp)*notebase
06d88     18 14 62 FD | 	getqx	arg02
06d8c     0A 13 82 F3 | 	sumc	arg01, arg02
06d90     09 13 52 F6 | 	abs	arg01, arg01 wc
06d94     1F 28 C6 C9 |  if_b	decod	local02, #31
06d98     00 28 06 36 |  if_ae	mov	local02, #0
06d9c     EC 1B B2 FD | 	call	#__system___float_fromuns
06da0     14 FB 61 F5 | 	xor	result1, local02
06da4     FD 14 02 F6 | 	mov	arg02, result1
06da8     1E 12 C6 F9 | 	decod	arg01, #30
06dac     E8 2E B2 FD | 	call	#__system____builtin_powf
06db0     FD 12 02 F6 | 	mov	arg01, result1
06db4     13 15 02 F6 | 	mov	arg02, local01
06db8     D4 1F B2 FD | 	call	#__system___float_mul
06dbc     A7 F0 03 F6 | 	mov	ptra, fp
06dc0     B2 00 A0 FD | 	call	#popregs_
06dc4                 | _getnoteval_ret
06dc4     2D 00 64 FD | 	ret
06dc8                 | 
06dc8                 | ' 
06dc8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06dc8                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
06dc8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06dc8                 | ' 
06dc8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06dc8                 | ' '
06dc8                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
06dc8                 | ' '
06dc8                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
06dc8                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
06dc8                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
06dc8                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
06dc8                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
06dc8                 | ' ' 
06dc8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06dc8                 | ' 
06dc8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06dc8                 | ' ' Helper functions to manage program lines
06dc8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06dc8                 | ' 
06dc8                 | ' '----- delete a line from a program
06dc8                 | ' 
06dc8                 | ' function deleteline(aline as ulong) as integer
06dc8                 | _deleteline
06dc8     02 4A 05 F6 | 	mov	COUNT_, #2
06dcc     A8 00 A0 FD | 	call	#pushregs_
06dd0     2C F0 07 F1 | 	add	ptra, #44
06dd4     04 4E 05 F1 | 	add	fp, #4
06dd8     A7 12 62 FC | 	wrlong	arg01, fp
06ddc     4A 00 00 FF 
06de0     88 E4 05 F1 | 	add	objptr, ##38024
06de4     F2 26 02 FB | 	rdlong	local01, objptr
06de8     0C 4E 05 F1 | 	add	fp, #12
06dec     A7 26 62 FC | 	wrlong	local01, fp
06df0     10 4E 85 F1 | 	sub	fp, #16
06df4                 | ' 
06df4                 | ' searchptr=programstart
06df4                 | ' do
06df4     3E 00 00 FF 
06df8     BC E5 85 F1 | 	sub	objptr, ##32188
06dfc                 | LR__0600
06dfc     14 4E 05 F1 | 	add	fp, #20
06e00     A7 12 02 F6 | 	mov	arg01, fp
06e04     04 4E 85 F1 | 	sub	fp, #4
06e08     A7 14 02 FB | 	rdlong	arg02, fp
06e0c     10 4E 85 F1 | 	sub	fp, #16
06e10     18 16 06 F6 | 	mov	arg03, #24
06e14     78 E4 B1 FD | 	call	#_psram_spin2_read1
06e18     10 4E 05 F1 | 	add	fp, #16
06e1c     A7 26 02 FB | 	rdlong	local01, fp
06e20     08 4E 85 F1 | 	sub	fp, #8
06e24     A7 26 62 FC | 	wrlong	local01, fp
06e28     20 4E 05 F1 | 	add	fp, #32
06e2c     A7 26 02 FB | 	rdlong	local01, fp
06e30     18 4E 85 F1 | 	sub	fp, #24
06e34     A7 26 62 FC | 	wrlong	local01, fp
06e38     04 4E 05 F1 | 	add	fp, #4
06e3c     A7 26 02 FB | 	rdlong	local01, fp
06e40     10 4E 85 F1 | 	sub	fp, #16
06e44     A7 16 02 FB | 	rdlong	arg03, fp
06e48     04 4E 85 F1 | 	sub	fp, #4
06e4c     0B 27 12 F2 | 	cmp	local01, arg03 wc
06e50     28 4E 05 C1 |  if_b	add	fp, #40
06e54     A7 28 02 CB |  if_b	rdlong	local02, fp
06e58     28 4E 85 C1 |  if_b	sub	fp, #40
06e5c     FF FF 3F CF 
06e60     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06e64     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0600
06e68     0B 00 00 FF 
06e6c     CC E4 85 F1 | 	sub	objptr, ##5836
06e70                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
06e70     14 4E 05 F1 | 	add	fp, #20
06e74     A7 26 02 FB | 	rdlong	local01, fp
06e78     10 4E 85 F1 | 	sub	fp, #16
06e7c     A7 28 02 FB | 	rdlong	local02, fp
06e80     04 4E 85 F1 | 	sub	fp, #4
06e84     14 27 0A F2 | 	cmp	local01, local02 wz
06e88     01 FA 65 56 |  if_ne	neg	result1, #1
06e8c     34 02 90 5D |  if_ne	jmp	#LR__0605
06e90     08 4E 05 F1 | 	add	fp, #8
06e94     A7 12 02 FB | 	rdlong	arg01, fp
06e98     08 4E 85 F1 | 	sub	fp, #8
06e9c     01 14 66 F6 | 	neg	arg02, #1
06ea0     28 B8 B1 FD | 	call	#_pslpoke
06ea4                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
06ea4                 | ' 
06ea4                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
06ea4     28 4E 05 F1 | 	add	fp, #40
06ea8     A7 26 02 FB | 	rdlong	local01, fp
06eac     28 4E 85 F1 | 	sub	fp, #40
06eb0     FF FF 3F FF 
06eb4     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06eb8     24 4E 05 A1 |  if_e	add	fp, #36
06ebc     A7 28 02 AB |  if_e	rdlong	local02, fp
06ec0     24 4E 85 A1 |  if_e	sub	fp, #36
06ec4     FF FF 7F AF 
06ec8     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
06ecc     88 00 90 5D |  if_ne	jmp	#LR__0601
06ed0     4A 00 00 FF 
06ed4     88 E4 05 F1 | 	add	objptr, ##38024
06ed8     00 04 80 FF 
06edc     F2 00 68 FC | 	wrlong	##524288, objptr
06ee0     07 00 00 FF 
06ee4     2C E4 85 F1 | 	sub	objptr, ##3628
06ee8     00 04 80 FF 
06eec     F2 00 68 FC | 	wrlong	##524288, objptr
06ef0     07 00 00 FF 
06ef4     30 E4 05 F1 | 	add	objptr, ##3632
06ef8     F2 00 68 FC | 	wrlong	#0, objptr
06efc     04 E4 05 F1 | 	add	objptr, #4
06f00     FF FF FF FF 
06f04     F2 FE 6B FC | 	wrlong	##-1, objptr
06f08     4A 00 00 FF 
06f0c     90 E4 85 F1 | 	sub	objptr, ##38032
06f10     00 12 06 F6 | 	mov	arg01, #0
06f14     01 14 66 F6 | 	neg	arg02, #1
06f18     B0 B7 B1 FD | 	call	#_pslpoke
06f1c     10 12 06 F6 | 	mov	arg01, #16
06f20     01 14 66 F6 | 	neg	arg02, #1
06f24     A4 B7 B1 FD | 	call	#_pslpoke
06f28     14 12 06 F6 | 	mov	arg01, #20
06f2c     1E 14 CE F9 | 	bmask	arg02, #30
06f30     98 B7 B1 FD | 	call	#_pslpoke
06f34     50 00 00 FF 
06f38     B8 E4 05 F1 | 	add	objptr, ##41144
06f3c     00 04 80 FF 
06f40     F2 00 68 FC | 	wrlong	##524288, objptr
06f44     04 E4 05 F1 | 	add	objptr, #4
06f48     00 04 80 FF 
06f4c     F2 00 68 FC | 	wrlong	##524288, objptr
06f50     50 00 00 FF 
06f54     BC E4 85 F1 | 	sub	objptr, ##41148
06f58                 | LR__0601
06f58                 | ' 
06f58                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06f58     28 4E 05 F1 | 	add	fp, #40
06f5c     A7 26 02 FB | 	rdlong	local01, fp
06f60     28 4E 85 F1 | 	sub	fp, #40
06f64     FF FF 3F FF 
06f68     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06f6c     74 00 90 5D |  if_ne	jmp	#LR__0602
06f70     24 4E 05 F1 | 	add	fp, #36
06f74     A7 28 02 FB | 	rdlong	local02, fp
06f78     24 4E 85 F1 | 	sub	fp, #36
06f7c     FF FF 7F FF 
06f80     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06f84     5C 00 90 AD |  if_e	jmp	#LR__0602
06f88     24 4E 05 F1 | 	add	fp, #36
06f8c     A7 12 02 FB | 	rdlong	arg01, fp
06f90     24 4E 85 F1 | 	sub	fp, #36
06f94     14 12 06 F1 | 	add	arg01, #20
06f98     1E 14 CE F9 | 	bmask	arg02, #30
06f9c     2C B7 B1 FD | 	call	#_pslpoke
06fa0     24 4E 05 F1 | 	add	fp, #36
06fa4     A7 26 02 FB | 	rdlong	local01, fp
06fa8     4A 00 00 FF 
06fac     90 E4 05 F1 | 	add	objptr, ##38032
06fb0     F2 26 62 FC | 	wrlong	local01, objptr
06fb4     4A 00 00 FF 
06fb8     90 E4 85 F1 | 	sub	objptr, ##38032
06fbc     A7 12 02 FB | 	rdlong	arg01, fp
06fc0     24 4E 85 F1 | 	sub	fp, #36
06fc4     34 B8 B1 FD | 	call	#_pslpeek
06fc8     4A 00 00 FF 
06fcc     8C E4 05 F1 | 	add	objptr, ##38028
06fd0     F2 FA 61 FC | 	wrlong	result1, objptr
06fd4     4A 00 00 FF 
06fd8     8C E4 85 F1 | 	sub	objptr, ##38028
06fdc                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
06fdc                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
06fdc                 | '   lastline=pslpeek(header(4))
06fdc                 | '   return 0
06fdc     00 FA 05 F6 | 	mov	result1, #0
06fe0     E0 00 90 FD | 	jmp	#LR__0605
06fe4                 | LR__0602
06fe4                 | ' 
06fe4                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
06fe4     28 4E 05 F1 | 	add	fp, #40
06fe8     A7 26 02 FB | 	rdlong	local01, fp
06fec     28 4E 85 F1 | 	sub	fp, #40
06ff0     FF FF 3F FF 
06ff4     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06ff8     58 00 90 AD |  if_e	jmp	#LR__0603
06ffc     24 4E 05 F1 | 	add	fp, #36
07000     A7 28 02 FB | 	rdlong	local02, fp
07004     24 4E 85 F1 | 	sub	fp, #36
07008     FF FF 7F FF 
0700c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
07010     40 00 90 5D |  if_ne	jmp	#LR__0603
07014     28 4E 05 F1 | 	add	fp, #40
07018     A7 12 02 FB | 	rdlong	arg01, fp
0701c     28 4E 85 F1 | 	sub	fp, #40
07020     10 12 06 F1 | 	add	arg01, #16
07024     01 14 66 F6 | 	neg	arg02, #1
07028     A0 B6 B1 FD | 	call	#_pslpoke
0702c     28 4E 05 F1 | 	add	fp, #40
07030     A7 26 02 FB | 	rdlong	local01, fp
07034     28 4E 85 F1 | 	sub	fp, #40
07038     4A 00 00 FF 
0703c     88 E4 05 F1 | 	add	objptr, ##38024
07040     F2 26 62 FC | 	wrlong	local01, objptr
07044     4A 00 00 FF 
07048     88 E4 85 F1 | 	sub	objptr, ##38024
0704c                 | ' '   print "deleted first line"
0704c                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
0704c                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
0704c                 | '   return 0
0704c     00 FA 05 F6 | 	mov	result1, #0
07050     70 00 90 FD | 	jmp	#LR__0605
07054                 | LR__0603
07054                 | ' 
07054                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
07054     28 4E 05 F1 | 	add	fp, #40
07058     A7 26 02 FB | 	rdlong	local01, fp
0705c     28 4E 85 F1 | 	sub	fp, #40
07060     FF FF 3F FF 
07064     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07068     24 4E 05 51 |  if_ne	add	fp, #36
0706c     A7 28 02 5B |  if_ne	rdlong	local02, fp
07070     24 4E 85 51 |  if_ne	sub	fp, #36
07074     FF FF 7F 5F 
07078     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
0707c     40 00 90 AD |  if_e	jmp	#LR__0604
07080     28 4E 05 F1 | 	add	fp, #40
07084     A7 12 02 FB | 	rdlong	arg01, fp
07088     10 12 06 F1 | 	add	arg01, #16
0708c     04 4E 85 F1 | 	sub	fp, #4
07090     A7 14 02 FB | 	rdlong	arg02, fp
07094     24 4E 85 F1 | 	sub	fp, #36
07098     30 B6 B1 FD | 	call	#_pslpoke
0709c     24 4E 05 F1 | 	add	fp, #36
070a0     A7 12 02 FB | 	rdlong	arg01, fp
070a4     14 12 06 F1 | 	add	arg01, #20
070a8     04 4E 05 F1 | 	add	fp, #4
070ac     A7 14 02 FB | 	rdlong	arg02, fp
070b0     28 4E 85 F1 | 	sub	fp, #40
070b4     14 B6 B1 FD | 	call	#_pslpoke
070b8                 | '    pslpoke(header(5)+16,header(4))  
070b8                 | '    pslpoke(header(4)+20, header(5))
070b8                 | '    return 0
070b8     00 FA 05 F6 | 	mov	result1, #0
070bc     04 00 90 FD | 	jmp	#LR__0605
070c0                 | LR__0604
070c0     00 FA 05 F6 | 	mov	result1, #0
070c4                 | LR__0605
070c4     A7 F0 03 F6 | 	mov	ptra, fp
070c8     B2 00 A0 FD | 	call	#popregs_
070cc                 | _deleteline_ret
070cc     2D 00 64 FD | 	ret
070d0                 | 
070d0                 | ' 
070d0                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
070d0                 | ' 
070d0                 | ' sub save_line
070d0                 | _save_line
070d0     03 4A 05 F6 | 	mov	COUNT_, #3
070d4     A8 00 A0 FD | 	call	#pushregs_
070d8     4A 00 00 FF 
070dc     7C E4 05 F1 | 	add	objptr, ##38012
070e0     F2 16 02 FB | 	rdlong	arg03, objptr
070e4     01 16 06 F1 | 	add	arg03, #1
070e8     05 00 00 FF 
070ec     18 E4 85 F1 | 	sub	objptr, ##2584
070f0     F2 14 02 FB | 	rdlong	arg02, objptr
070f4     0B 15 02 FD | 	qmul	arg02, arg03
070f8     0E 00 00 FF 
070fc     44 E4 85 F1 | 	sub	objptr, ##7236
07100     F2 12 02 FB | 	rdlong	arg01, objptr
07104     37 00 00 FF 
07108     20 E4 85 F1 | 	sub	objptr, ##28192
0710c     09 27 02 F6 | 	mov	local01, arg01
07110     18 28 62 FD | 	getqx	local02
07114     97 06 48 FB | 	callpa	#(@LR__0611-@LR__0610)>>2,fcache_load_ptr_
07118                 | LR__0610
07118     13 FB C9 FA | 	rdbyte	result1, local01 wz
0711c     01 26 06 51 |  if_ne	add	local01, #1
07120     F4 FF 9F 5D |  if_ne	jmp	#LR__0610
07124                 | LR__0611
07124     09 27 82 F1 | 	sub	local01, arg01
07128     03 26 CE F7 | 	test	local01, #3 wz
0712c     02 26 46 50 |  if_ne	shr	local01, #2
07130     01 26 06 51 |  if_ne	add	local01, #1
07134     02 26 66 50 |  if_ne	shl	local01, #2
07138     14 2B 02 F6 | 	mov	local03, local02
0713c     13 2B 02 F1 | 	add	local03, local01
07140     43 00 00 FF 
07144     5C E4 05 F1 | 	add	objptr, ##34396
07148     F2 16 02 FB | 	rdlong	arg03, objptr
0714c     14 17 02 F1 | 	add	arg03, local02
07150     04 00 00 FF 
07154     28 E4 05 F1 | 	add	objptr, ##2088
07158     F2 16 62 FC | 	wrlong	arg03, objptr
0715c     04 E4 05 F1 | 	add	objptr, #4
07160     F2 26 62 FC | 	wrlong	local01, objptr
07164     0C E4 85 F1 | 	sub	objptr, #12
07168     F2 12 02 F6 | 	mov	arg01, objptr
0716c     04 00 00 FF 
07170     20 E4 85 F1 | 	sub	objptr, ##2080
07174     F2 14 02 FB | 	rdlong	arg02, objptr
07178     14 17 02 F6 | 	mov	arg03, local02
0717c     37 00 00 FF 
07180     90 E5 85 F1 | 	sub	objptr, ##28560
07184     A4 E1 B1 FD | 	call	#_psram_spin2_write
07188     2B 00 00 FF 
0718c     54 E5 05 F1 | 	add	objptr, ##22356
07190     F2 12 02 FB | 	rdlong	arg01, objptr
07194     0C 00 00 FF 
07198     3C E4 05 F1 | 	add	objptr, ##6204
0719c     F2 14 02 FB | 	rdlong	arg02, objptr
071a0     14 15 02 F1 | 	add	arg02, local02
071a4     13 17 02 F6 | 	mov	arg03, local01
071a8     37 00 00 FF 
071ac     90 E5 85 F1 | 	sub	objptr, ##28560
071b0     78 E1 B1 FD | 	call	#_psram_spin2_write
071b4     37 00 00 FF 
071b8     90 E5 05 F1 | 	add	objptr, ##28560
071bc     F2 26 02 FB | 	rdlong	local01, objptr
071c0     15 27 02 F1 | 	add	local01, local03
071c4     F2 26 62 FC | 	wrlong	local01, objptr
071c8     43 00 00 FF 
071cc     5C E4 85 F1 | 	sub	objptr, ##34396
071d0     A7 F0 03 F6 | 	mov	ptra, fp
071d4     B2 00 A0 FD | 	call	#popregs_
071d8                 | _save_line_ret
071d8     2D 00 64 FD | 	ret
071dc                 | 
071dc                 | ' 
071dc                 | ' '----- Insert a new line into the middle of the program
071dc                 | ' 
071dc                 | ' function insertline(aline as ulong) as integer
071dc                 | _insertline
071dc     02 4A 05 F6 | 	mov	COUNT_, #2
071e0     A8 00 A0 FD | 	call	#pushregs_
071e4     28 F0 07 F1 | 	add	ptra, #40
071e8     04 4E 05 F1 | 	add	fp, #4
071ec     A7 12 62 FC | 	wrlong	arg01, fp
071f0     4A 00 00 FF 
071f4     88 E4 05 F1 | 	add	objptr, ##38024
071f8     F2 26 02 FB | 	rdlong	local01, objptr
071fc     04 4E 05 F1 | 	add	fp, #4
07200     A7 26 62 FC | 	wrlong	local01, fp
07204     08 4E 85 F1 | 	sub	fp, #8
07208                 | ' 
07208                 | ' do
07208     3E 00 00 FF 
0720c     BC E5 85 F1 | 	sub	objptr, ##32188
07210                 | LR__0620
07210     10 4E 05 F1 | 	add	fp, #16
07214     A7 12 02 F6 | 	mov	arg01, fp
07218     08 4E 85 F1 | 	sub	fp, #8
0721c     A7 14 02 FB | 	rdlong	arg02, fp
07220     08 4E 85 F1 | 	sub	fp, #8
07224     18 16 06 F6 | 	mov	arg03, #24
07228     64 E0 B1 FD | 	call	#_psram_spin2_read1
0722c     08 4E 05 F1 | 	add	fp, #8
07230     A7 26 02 FB | 	rdlong	local01, fp
07234     04 4E 05 F1 | 	add	fp, #4
07238     A7 26 62 FC | 	wrlong	local01, fp
0723c     18 4E 05 F1 | 	add	fp, #24
07240     A7 26 02 FB | 	rdlong	local01, fp
07244     1C 4E 85 F1 | 	sub	fp, #28
07248     A7 26 62 FC | 	wrlong	local01, fp
0724c     08 4E 05 F1 | 	add	fp, #8
07250     A7 26 02 FB | 	rdlong	local01, fp
07254     0C 4E 85 F1 | 	sub	fp, #12
07258     A7 16 02 FB | 	rdlong	arg03, fp
0725c     04 4E 85 F1 | 	sub	fp, #4
07260     0B 27 12 F2 | 	cmp	local01, arg03 wc
07264     24 4E 05 C1 |  if_b	add	fp, #36
07268     A7 28 02 CB |  if_b	rdlong	local02, fp
0726c     24 4E 85 C1 |  if_b	sub	fp, #36
07270     FF FF 3F CF 
07274     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07278     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0620
0727c     0B 00 00 FF 
07280     CC E4 85 F1 | 	sub	objptr, ##5836
07284                 | ' 
07284                 | ' if header(0)=aline then return -1 				' delete it first
07284     10 4E 05 F1 | 	add	fp, #16
07288     A7 26 02 FB | 	rdlong	local01, fp
0728c     0C 4E 85 F1 | 	sub	fp, #12
07290     A7 28 02 FB | 	rdlong	local02, fp
07294     04 4E 85 F1 | 	sub	fp, #4
07298     14 27 0A F2 | 	cmp	local01, local02 wz
0729c     01 FA 65 A6 |  if_e	neg	result1, #1
072a0     48 01 90 AD |  if_e	jmp	#LR__0623
072a4                 | ' if header(0)<aline then return -2 				' end of program reached
072a4     10 4E 05 F1 | 	add	fp, #16
072a8     A7 26 02 FB | 	rdlong	local01, fp
072ac     0C 4E 85 F1 | 	sub	fp, #12
072b0     A7 16 02 FB | 	rdlong	arg03, fp
072b4     04 4E 85 F1 | 	sub	fp, #4
072b8     0B 27 12 F2 | 	cmp	local01, arg03 wc
072bc     02 FA 65 C6 |  if_b	neg	result1, #2
072c0     28 01 90 CD |  if_b	jmp	#LR__0623
072c4                 | ' 
072c4                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
072c4     20 4E 05 F1 | 	add	fp, #32
072c8     A7 26 02 FB | 	rdlong	local01, fp
072cc     20 4E 85 F1 | 	sub	fp, #32
072d0     FF FF 7F FF 
072d4     FF 27 0E F2 | 	cmp	local01, ##-1 wz
072d8     78 00 90 5D |  if_ne	jmp	#LR__0621
072dc     43 00 00 FF 
072e0     5C E4 05 F1 | 	add	objptr, ##34396
072e4     F2 26 02 FB | 	rdlong	local01, objptr
072e8     07 00 00 FF 
072ec     2C E4 05 F1 | 	add	objptr, ##3628
072f0     F2 26 62 FC | 	wrlong	local01, objptr
072f4     0C 4E 05 F1 | 	add	fp, #12
072f8     A7 12 02 FB | 	rdlong	arg01, fp
072fc     0C 4E 85 F1 | 	sub	fp, #12
07300     10 12 06 F1 | 	add	arg01, #16
07304     07 00 00 FF 
07308     2C E4 85 F1 | 	sub	objptr, ##3628
0730c     F2 14 02 FB | 	rdlong	arg02, objptr
07310     43 00 00 FF 
07314     5C E4 85 F1 | 	sub	objptr, ##34396
07318     B0 B3 B1 FD | 	call	#_pslpoke
0731c     47 00 00 FF 
07320     8C E4 05 F1 | 	add	objptr, ##36492
07324     FF FF FF FF 
07328     F2 FE 6B FC | 	wrlong	##-1, objptr
0732c     0C 4E 05 F1 | 	add	fp, #12
07330     A7 26 02 FB | 	rdlong	local01, fp
07334     0C 4E 85 F1 | 	sub	fp, #12
07338     04 E4 05 F1 | 	add	objptr, #4
0733c     F2 26 62 FC | 	wrlong	local01, objptr
07340     47 00 00 FF 
07344     90 E4 85 F1 | 	sub	objptr, ##36496
07348     84 FD BF FD | 	call	#_save_line
0734c                 | '   programstart=programptr
0734c                 | '   pslpoke(lineptr2+16,programptr)
0734c                 | '   ucompiledline(4)=$FFFF_FFFF
0734c                 | '   ucompiledline(5)=lineptr2
0734c                 | '   save_line
0734c                 | '   return 0
0734c     00 FA 05 F6 | 	mov	result1, #0
07350     98 00 90 FD | 	jmp	#LR__0623
07354                 | LR__0621
07354                 | ' 
07354                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
07354     20 4E 05 F1 | 	add	fp, #32
07358     A7 26 02 FB | 	rdlong	local01, fp
0735c     20 4E 85 F1 | 	sub	fp, #32
07360     FF FF 7F FF 
07364     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07368     7C 00 90 AD |  if_e	jmp	#LR__0622
0736c     20 4E 05 F1 | 	add	fp, #32
07370     A7 26 02 FB | 	rdlong	local01, fp
07374     47 00 00 FF 
07378     8C E4 05 F1 | 	add	objptr, ##36492
0737c     F2 26 62 FC | 	wrlong	local01, objptr
07380     14 4E 85 F1 | 	sub	fp, #20
07384     A7 26 02 FB | 	rdlong	local01, fp
07388     04 E4 05 F1 | 	add	objptr, #4
0738c     F2 26 62 FC | 	wrlong	local01, objptr
07390     A7 12 02 FB | 	rdlong	arg01, fp
07394     0C 4E 85 F1 | 	sub	fp, #12
07398     10 12 06 F1 | 	add	arg01, #16
0739c     04 00 00 FF 
073a0     34 E4 85 F1 | 	sub	objptr, ##2100
073a4     F2 14 02 FB | 	rdlong	arg02, objptr
073a8     43 00 00 FF 
073ac     5C E4 85 F1 | 	sub	objptr, ##34396
073b0     18 B3 B1 FD | 	call	#_pslpoke
073b4     20 4E 05 F1 | 	add	fp, #32
073b8     A7 12 02 FB | 	rdlong	arg01, fp
073bc     20 4E 85 F1 | 	sub	fp, #32
073c0     14 12 06 F1 | 	add	arg01, #20
073c4     43 00 00 FF 
073c8     5C E4 05 F1 | 	add	objptr, ##34396
073cc     F2 14 02 FB | 	rdlong	arg02, objptr
073d0     43 00 00 FF 
073d4     5C E4 85 F1 | 	sub	objptr, ##34396
073d8     F0 B2 B1 FD | 	call	#_pslpoke
073dc     F0 FC BF FD | 	call	#_save_line
073e0                 | '   ucompiledline(4)=header(4)
073e0                 | '   ucompiledline(5)=lineptr2
073e0                 | '   pslpoke(lineptr2+16,programptr)
073e0                 | '   pslpoke(header(4)+20,programptr)
073e0                 | '   save_line
073e0                 | '   return 0
073e0     00 FA 05 F6 | 	mov	result1, #0
073e4     04 00 90 FD | 	jmp	#LR__0623
073e8                 | LR__0622
073e8     00 FA 05 F6 | 	mov	result1, #0
073ec                 | LR__0623
073ec     A7 F0 03 F6 | 	mov	ptra, fp
073f0     B2 00 A0 FD | 	call	#popregs_
073f4                 | _insertline_ret
073f4     2D 00 64 FD | 	ret
073f8                 | 
073f8                 | ' 
073f8                 | ' '----- Adds a new line at the end of the program
073f8                 | ' 
073f8                 | ' sub add_line_at_end(aline) 
073f8                 | _add_line_at_end
073f8     4A 00 00 FF 
073fc     8C E4 05 F1 | 	add	objptr, ##38028
07400     F2 12 62 FC | 	wrlong	arg01, objptr
07404     04 E4 05 F1 | 	add	objptr, #4
07408     F2 14 02 FB | 	rdlong	arg02, objptr
0740c     03 00 00 FF 
07410     04 E4 85 F1 | 	sub	objptr, ##1540
07414     F2 14 62 FC | 	wrlong	arg02, objptr
07418     03 00 00 FF 
0741c     04 E4 05 F1 | 	add	objptr, ##1540
07420     F2 12 02 FB | 	rdlong	arg01, objptr
07424     14 12 06 F1 | 	add	arg01, #20
07428     07 00 00 FF 
0742c     34 E4 85 F1 | 	sub	objptr, ##3636
07430     F2 14 02 FB | 	rdlong	arg02, objptr
07434     43 00 00 FF 
07438     5C E4 85 F1 | 	sub	objptr, ##34396
0743c     8C B2 B1 FD | 	call	#_pslpoke
07440     43 00 00 FF 
07444     5C E4 05 F1 | 	add	objptr, ##34396
07448     F2 14 02 FB | 	rdlong	arg02, objptr
0744c     07 00 00 FF 
07450     34 E4 05 F1 | 	add	objptr, ##3636
07454     F2 14 62 FC | 	wrlong	arg02, objptr
07458     03 00 00 FF 
0745c     00 E4 85 F1 | 	sub	objptr, ##1536
07460     FF FF BF FF 
07464     F2 FE 6B FC | 	wrlong	##2147483647, objptr
07468                 | ' 
07468                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07468                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07468     04 00 00 FF 
0746c     34 E4 85 F1 | 	sub	objptr, ##2100
07470     F2 14 02 FB | 	rdlong	arg02, objptr
07474     43 00 00 FF 
07478     5C E4 85 F1 | 	sub	objptr, ##34396
0747c     00 04 00 FF 
07480     00 14 0E F2 | 	cmp	arg02, ##524288 wz
07484     47 00 00 AF 
07488     8C E4 05 A1 |  if_e	add	objptr, ##36492
0748c     FF FF FF AF 
07490     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
07494     47 00 00 AF 
07498     8C E4 85 A1 |  if_e	sub	objptr, ##36492
0749c     30 FC BF FD | 	call	#_save_line
074a0     43 00 00 FF 
074a4     5C E4 05 F1 | 	add	objptr, ##34396
074a8     F2 12 02 FB | 	rdlong	arg01, objptr
074ac     43 00 00 FF 
074b0     5C E4 85 F1 | 	sub	objptr, ##34396
074b4     01 14 66 F6 | 	neg	arg02, #1
074b8     10 B2 B1 FD | 	call	#_pslpoke
074bc                 | _add_line_at_end_ret
074bc     2D 00 64 FD | 	ret
074c0                 | 
074c0                 | ' 
074c0                 | ' '--------------------------------------------------------------------------------------------------------------------------
074c0                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
074c0                 | ' '--------------------------------------------------------------------------------------------------------------------------
074c0                 | ' 
074c0                 | ' '--------------------------------------------------------------------------------------------------------------------------
074c0                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
074c0                 | ' '--------------------------------------------------------------------------------------------------------------------------
074c0                 | ' 
074c0                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
074c0                 | ' 
074c0                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
074c0                 | _compile_immediate
074c0     0A 4A 05 F6 | 	mov	COUNT_, #10
074c4     A8 00 A0 FD | 	call	#pushregs_
074c8                 | _compile_immediate_enter
074c8     09 2D 02 F6 | 	mov	local04, arg01
074cc     0A 2F 02 F6 | 	mov	local05, arg02
074d0     00 30 06 F6 | 	mov	local06, #0
074d4     00 32 06 F6 | 	mov	local07, #0
074d8     00 34 06 F6 | 	mov	local08, #0
074dc                 | ' 
074dc                 | ' ' linetype=cont+1
074dc                 | ' ' 1 : this is the first part of the line that will continue
074dc                 | ' ' 2 - this is the continuation of the line
074dc                 | ' ' 3 - this is the last continued line
074dc                 | ' ' 4 - this is the one and only part
074dc                 | ' ' 5 - continued after if/else
074dc                 | ' 
074dc                 | ' err=0
074dc                 | ' cmd=0
074dc                 | ' vars=0
074dc                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
074dc     02 2C 0E F2 | 	cmp	local04, #2 wz
074e0     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
074e4     24 00 90 5D |  if_ne	jmp	#LR__0630
074e8     35 00 00 FF 
074ec     10 E4 05 F1 | 	add	objptr, ##27152
074f0     F2 32 02 FB | 	rdlong	local07, objptr
074f4     01 36 06 F6 | 	mov	local09, #1
074f8     02 00 00 FF 
074fc     34 E4 05 F1 | 	add	objptr, ##1076
07500     F2 02 68 FC | 	wrlong	#1, objptr
07504     37 00 00 FF 
07508     44 E4 85 F1 | 	sub	objptr, ##28228
0750c                 | LR__0630
0750c                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
0750c     04 2C 0E F2 | 	cmp	local04, #4 wz
07510     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07514     30 00 90 5D |  if_ne	jmp	#LR__0631
07518     35 00 00 FF 
0751c     18 E4 05 F1 | 	add	objptr, ##27160
07520     F2 32 02 FB | 	rdlong	local07, objptr
07524     02 36 06 F6 | 	mov	local09, #2
07528     02 00 00 FF 
0752c     2C E4 05 F1 | 	add	objptr, ##1068
07530     F2 04 68 FC | 	wrlong	#2, objptr
07534     13 00 00 FF 
07538     38 E4 05 F1 | 	add	objptr, ##9784
0753c     F2 04 68 FC | 	wrlong	#2, objptr
07540     4A 00 00 FF 
07544     7C E4 85 F1 | 	sub	objptr, ##38012
07548                 | LR__0631
07548                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07548     05 2C 0E F2 | 	cmp	local04, #5 wz
0754c     40 00 90 5D |  if_ne	jmp	#LR__0632
07550     37 00 00 FF 
07554     44 E4 05 F1 | 	add	objptr, ##28228
07558     F2 FC 01 FB | 	rdlong	result2, objptr
0755c     FE 36 02 F6 | 	mov	local09, result2
07560     03 36 66 F0 | 	shl	local09, #3
07564     02 00 00 FF 
07568     38 E4 85 F1 | 	sub	objptr, ##1080
0756c     F2 36 02 F1 | 	add	local09, objptr
07570     04 36 06 F1 | 	add	local09, #4
07574     1B 33 02 FB | 	rdlong	local07, local09
07578     01 FC 05 F1 | 	add	result2, #1
0757c     02 00 00 FF 
07580     38 E4 05 F1 | 	add	objptr, ##1080
07584     F2 FC 61 FC | 	wrlong	result2, objptr
07588     37 00 00 FF 
0758c     44 E4 85 F1 | 	sub	objptr, ##28228
07590                 | LR__0632
07590                 | ' 
07590                 | ' 'print  "In compile_immediate cmd=:", cmd
07590                 | ' 451 select case cmd
07590     5C 32 0E F2 | 	cmp	local07, #92 wz
07594     BC 02 90 AD |  if_e	jmp	#LR__0633
07598     B9 32 0E F2 | 	cmp	local07, #185 wz
0759c     C0 02 90 AD |  if_e	jmp	#LR__0634
075a0     47 32 0E F2 | 	cmp	local07, #71 wz
075a4     C8 02 90 AD |  if_e	jmp	#LR__0635
075a8     59 32 0E F2 | 	cmp	local07, #89 wz
075ac     D0 02 90 AD |  if_e	jmp	#LR__0636
075b0     C3 32 0E F2 | 	cmp	local07, #195 wz
075b4     D8 02 90 AD |  if_e	jmp	#LR__0637
075b8     45 32 0E F2 | 	cmp	local07, #69 wz
075bc     DC 02 90 AD |  if_e	jmp	#LR__0638
075c0     69 32 0E F2 | 	cmp	local07, #105 wz
075c4     E4 02 90 AD |  if_e	jmp	#LR__0639
075c8     40 32 0E F2 | 	cmp	local07, #64 wz
075cc     AC 06 90 AD |  if_e	jmp	#LR__0711
075d0     B4 32 0E F2 | 	cmp	local07, #180 wz
075d4     E0 02 90 AD |  if_e	jmp	#LR__0640
075d8     49 32 0E F2 | 	cmp	local07, #73 wz
075dc     E4 02 90 AD |  if_e	jmp	#LR__0641
075e0     AE 32 0E F2 | 	cmp	local07, #174 wz
075e4     E8 02 90 AD |  if_e	jmp	#LR__0642
075e8     B0 32 0E F2 | 	cmp	local07, #176 wz
075ec     EC 02 90 AD |  if_e	jmp	#LR__0643
075f0     AF 32 0E F2 | 	cmp	local07, #175 wz
075f4     F0 02 90 AD |  if_e	jmp	#LR__0644
075f8     B1 32 0E F2 | 	cmp	local07, #177 wz
075fc     F4 02 90 AD |  if_e	jmp	#LR__0645
07600     68 32 0E F2 | 	cmp	local07, #104 wz
07604     F8 02 90 AD |  if_e	jmp	#LR__0646
07608     B7 32 0E F2 | 	cmp	local07, #183 wz
0760c     6C 06 90 AD |  if_e	jmp	#LR__0711
07610     74 32 0E F2 | 	cmp	local07, #116 wz
07614     F4 02 90 AD |  if_e	jmp	#LR__0647
07618     73 32 0E F2 | 	cmp	local07, #115 wz
0761c     FC 02 90 AD |  if_e	jmp	#LR__0648
07620     6C 32 0E F2 | 	cmp	local07, #108 wz
07624     04 03 90 AD |  if_e	jmp	#LR__0649
07628     89 32 0E F2 | 	cmp	local07, #137 wz
0762c     4C 06 90 AD |  if_e	jmp	#LR__0711
07630     C2 32 0E F2 | 	cmp	local07, #194 wz
07634     04 03 90 AD |  if_e	jmp	#LR__0650
07638     72 32 0E F2 | 	cmp	local07, #114 wz
0763c     08 03 90 AD |  if_e	jmp	#LR__0651
07640     5D 32 0E F2 | 	cmp	local07, #93 wz
07644     0C 03 90 AD |  if_e	jmp	#LR__0652
07648     96 32 0E F2 | 	cmp	local07, #150 wz
0764c     14 03 90 AD |  if_e	jmp	#LR__0653
07650     43 32 0E F2 | 	cmp	local07, #67 wz
07654     18 03 90 AD |  if_e	jmp	#LR__0654
07658     5A 32 0E F2 | 	cmp	local07, #90 wz
0765c     20 03 90 AD |  if_e	jmp	#LR__0655
07660     AB 32 0E F2 | 	cmp	local07, #171 wz
07664     14 06 90 AD |  if_e	jmp	#LR__0711
07668     BD 32 0E F2 | 	cmp	local07, #189 wz
0766c     20 03 90 AD |  if_e	jmp	#LR__0656
07670     BB 32 0E F2 | 	cmp	local07, #187 wz
07674     28 03 90 AD |  if_e	jmp	#LR__0657
07678     4E 32 0E F2 | 	cmp	local07, #78 wz
0767c     30 03 90 AD |  if_e	jmp	#LR__0658
07680     A9 32 0E F2 | 	cmp	local07, #169 wz
07684     48 03 90 AD |  if_e	jmp	#LR__0660
07688     46 32 0E F2 | 	cmp	local07, #70 wz
0768c     60 03 90 AD |  if_e	jmp	#LR__0662
07690     71 32 0E F2 | 	cmp	local07, #113 wz
07694     68 03 90 AD |  if_e	jmp	#LR__0663
07698     60 32 0E F2 | 	cmp	local07, #96 wz
0769c     6C 03 90 AD |  if_e	jmp	#LR__0664
076a0     4A 32 0E F2 | 	cmp	local07, #74 wz
076a4     70 03 90 AD |  if_e	jmp	#LR__0665
076a8     48 32 0E F2 | 	cmp	local07, #72 wz
076ac     74 03 90 AD |  if_e	jmp	#LR__0666
076b0     58 32 0E F2 | 	cmp	local07, #88 wz
076b4     7C 03 90 AD |  if_e	jmp	#LR__0667
076b8     5F 32 0E F2 | 	cmp	local07, #95 wz
076bc     84 03 90 AD |  if_e	jmp	#LR__0668
076c0     B5 32 0E F2 | 	cmp	local07, #181 wz
076c4     88 03 90 AD |  if_e	jmp	#LR__0669
076c8     8A 32 0E F2 | 	cmp	local07, #138 wz
076cc     90 03 90 AD |  if_e	jmp	#LR__0670
076d0     4C 32 0E F2 | 	cmp	local07, #76 wz
076d4     94 03 90 AD |  if_e	jmp	#LR__0671
076d8     52 32 0E F2 | 	cmp	local07, #82 wz
076dc     9C 03 90 AD |  if_e	jmp	#LR__0672
076e0     97 32 0E F2 | 	cmp	local07, #151 wz
076e4     A4 03 90 AD |  if_e	jmp	#LR__0673
076e8     C6 32 0E F2 | 	cmp	local07, #198 wz
076ec     A8 03 90 AD |  if_e	jmp	#LR__0674
076f0     61 32 0E F2 | 	cmp	local07, #97 wz
076f4     AC 03 90 AD |  if_e	jmp	#LR__0675
076f8     63 32 0E F2 | 	cmp	local07, #99 wz
076fc     B0 03 90 AD |  if_e	jmp	#LR__0676
07700     41 32 0E F2 | 	cmp	local07, #65 wz
07704     74 05 90 AD |  if_e	jmp	#LR__0711
07708     4B 32 0E F2 | 	cmp	local07, #75 wz
0770c     AC 03 90 AD |  if_e	jmp	#LR__0677
07710     C1 32 0E F2 | 	cmp	local07, #193 wz
07714     B0 03 90 AD |  if_e	jmp	#LR__0678
07718     B3 32 0E F2 | 	cmp	local07, #179 wz
0771c     B4 03 90 AD |  if_e	jmp	#LR__0679
07720     5E 32 0E F2 | 	cmp	local07, #94 wz
07724     B8 03 90 AD |  if_e	jmp	#LR__0680
07728     7C 32 0E F2 | 	cmp	local07, #124 wz
0772c     BC 03 90 AD |  if_e	jmp	#LR__0681
07730     7D 32 0E F2 | 	cmp	local07, #125 wz
07734     C0 03 90 AD |  if_e	jmp	#LR__0682
07738     7E 32 0E F2 | 	cmp	local07, #126 wz
0773c     C4 03 90 AD |  if_e	jmp	#LR__0683
07740     7F 32 0E F2 | 	cmp	local07, #127 wz
07744     C8 03 90 AD |  if_e	jmp	#LR__0684
07748     80 32 0E F2 | 	cmp	local07, #128 wz
0774c     CC 03 90 AD |  if_e	jmp	#LR__0685
07750     55 32 0E F2 | 	cmp	local07, #85 wz
07754     D0 03 90 AD |  if_e	jmp	#LR__0686
07758     75 32 0E F2 | 	cmp	local07, #117 wz
0775c     D4 03 90 AD |  if_e	jmp	#LR__0687
07760     42 32 0E F2 | 	cmp	local07, #66 wz
07764     DC 03 90 AD |  if_e	jmp	#LR__0688
07768     95 32 0E F2 | 	cmp	local07, #149 wz
0776c     E4 03 90 AD |  if_e	jmp	#LR__0689
07770     AC 32 0E F2 | 	cmp	local07, #172 wz
07774     04 05 90 AD |  if_e	jmp	#LR__0711
07778     81 32 0E F2 | 	cmp	local07, #129 wz
0777c     E0 03 90 AD |  if_e	jmp	#LR__0690
07780     44 32 0E F2 | 	cmp	local07, #68 wz
07784     E4 03 90 AD |  if_e	jmp	#LR__0691
07788     BC 32 0E F2 | 	cmp	local07, #188 wz
0778c     E8 03 90 AD |  if_e	jmp	#LR__0692
07790     88 32 0E F2 | 	cmp	local07, #136 wz
07794     E4 04 90 AD |  if_e	jmp	#LR__0711
07798     B6 32 0E F2 | 	cmp	local07, #182 wz
0779c     E8 03 90 AD |  if_e	jmp	#LR__0693
077a0     92 32 0E F2 | 	cmp	local07, #146 wz
077a4     F0 03 90 AD |  if_e	jmp	#LR__0694
077a8     BE 32 0E F2 | 	cmp	local07, #190 wz
077ac     88 05 90 AD |  if_e	jmp	#LR__0712
077b0     C7 32 0E F2 | 	cmp	local07, #199 wz
077b4     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
077b8     C0 04 90 AD |  if_e	jmp	#LR__0711
077bc     4D 32 0E F2 | 	cmp	local07, #77 wz
077c0     E0 03 90 AD |  if_e	jmp	#LR__0695
077c4     51 32 0E F2 | 	cmp	local07, #81 wz
077c8     E8 03 90 AD |  if_e	jmp	#LR__0696
077cc     8E 32 0E F2 | 	cmp	local07, #142 wz
077d0     F0 03 90 AD |  if_e	jmp	#LR__0697
077d4     90 32 0E F2 | 	cmp	local07, #144 wz
077d8     F4 03 90 AD |  if_e	jmp	#LR__0698
077dc     8D 32 0E F2 | 	cmp	local07, #141 wz
077e0     F8 03 90 AD |  if_e	jmp	#LR__0699
077e4     8C 32 0E F2 | 	cmp	local07, #140 wz
077e8     FC 03 90 AD |  if_e	jmp	#LR__0700
077ec     91 32 0E F2 | 	cmp	local07, #145 wz
077f0     00 04 90 AD |  if_e	jmp	#LR__0701
077f4     8B 32 0E F2 | 	cmp	local07, #139 wz
077f8     04 04 90 AD |  if_e	jmp	#LR__0702
077fc     8F 32 0E F2 | 	cmp	local07, #143 wz
07800     08 04 90 AD |  if_e	jmp	#LR__0703
07804     B2 32 0E F2 | 	cmp	local07, #178 wz
07808     0C 04 90 AD |  if_e	jmp	#LR__0704
0780c     6D 32 0E F2 | 	cmp	local07, #109 wz
07810     14 04 90 AD |  if_e	jmp	#LR__0705
07814     70 32 0E F2 | 	cmp	local07, #112 wz
07818     60 04 90 AD |  if_e	jmp	#LR__0711
0781c     56 32 0E F2 | 	cmp	local07, #86 wz
07820     10 04 90 AD |  if_e	jmp	#LR__0706
07824     57 32 0E F2 | 	cmp	local07, #87 wz
07828     50 04 90 AD |  if_e	jmp	#LR__0711
0782c     79 32 0E F2 | 	cmp	local07, #121 wz
07830     0C 04 90 AD |  if_e	jmp	#LR__0707
07834     77 32 0E F2 | 	cmp	local07, #119 wz
07838     10 04 90 AD |  if_e	jmp	#LR__0708
0783c     78 32 0E F2 | 	cmp	local07, #120 wz
07840     14 04 90 AD |  if_e	jmp	#LR__0709
07844     01 00 00 FF 
07848     04 32 0E F2 | 	cmp	local07, ##516 wz
0784c     14 04 90 AD |  if_e	jmp	#LR__0710
07850     E4 04 90 FD | 	jmp	#LR__0712
07854                 | LR__0633
07854     30 0B B0 FD | 	call	#_compile_fun_2p
07858     FD 30 02 F6 | 	mov	local06, result1
0785c     1C 04 90 FD | 	jmp	#LR__0711
07860                 | LR__0634
07860     F4 0D B0 FD | 	call	#_compile_fun_varp
07864     FD 34 02 F6 | 	mov	local08, result1
07868     FE 30 02 F6 | 	mov	local06, result2
0786c     0C 04 90 FD | 	jmp	#LR__0711
07870                 | LR__0635
07870     E4 0D B0 FD | 	call	#_compile_fun_varp
07874     FD 34 02 F6 | 	mov	local08, result1
07878     FE 30 02 F6 | 	mov	local06, result2
0787c     FC 03 90 FD | 	jmp	#LR__0711
07880                 | LR__0636
07880     D4 0D B0 FD | 	call	#_compile_fun_varp
07884     FD 34 02 F6 | 	mov	local08, result1
07888     FE 30 02 F6 | 	mov	local06, result2
0788c     EC 03 90 FD | 	jmp	#LR__0711
07890                 | LR__0637
07890                 | ' return expr()
07890     30 42 B0 FD | 	call	#_expr
07894     FD 30 02 F6 | 	mov	local06, result1
07898     E0 03 90 FD | 	jmp	#LR__0711
0789c                 | LR__0638
0789c     B8 0D B0 FD | 	call	#_compile_fun_varp
078a0     FD 34 02 F6 | 	mov	local08, result1
078a4     FE 30 02 F6 | 	mov	local06, result2
078a8     D0 03 90 FD | 	jmp	#LR__0711
078ac                 | LR__0639
078ac                 | ' return expr()
078ac     14 42 B0 FD | 	call	#_expr
078b0     FD 30 02 F6 | 	mov	local06, result1
078b4     C4 03 90 FD | 	jmp	#LR__0711
078b8                 | LR__0640
078b8                 | ' return expr()
078b8     08 42 B0 FD | 	call	#_expr
078bc     FD 30 02 F6 | 	mov	local06, result1
078c0     B8 03 90 FD | 	jmp	#LR__0711
078c4                 | LR__0641
078c4                 | ' return expr()
078c4     FC 41 B0 FD | 	call	#_expr
078c8     FD 30 02 F6 | 	mov	local06, result1
078cc     AC 03 90 FD | 	jmp	#LR__0711
078d0                 | LR__0642
078d0     B4 0A B0 FD | 	call	#_compile_fun_2p
078d4     FD 30 02 F6 | 	mov	local06, result1
078d8     A0 03 90 FD | 	jmp	#LR__0711
078dc                 | LR__0643
078dc     A8 0A B0 FD | 	call	#_compile_fun_2p
078e0     FD 30 02 F6 | 	mov	local06, result1
078e4     94 03 90 FD | 	jmp	#LR__0711
078e8                 | LR__0644
078e8     9C 0A B0 FD | 	call	#_compile_fun_2p
078ec     FD 30 02 F6 | 	mov	local06, result1
078f0     88 03 90 FD | 	jmp	#LR__0711
078f4                 | LR__0645
078f4     90 0A B0 FD | 	call	#_compile_fun_2p
078f8     FD 30 02 F6 | 	mov	local06, result1
078fc     7C 03 90 FD | 	jmp	#LR__0711
07900                 | LR__0646
07900                 | ' return expr()
07900     C0 41 B0 FD | 	call	#_expr
07904     FD 30 02 F6 | 	mov	local06, result1
07908     70 03 90 FD | 	jmp	#LR__0711
0790c                 | LR__0647
0790c     48 0D B0 FD | 	call	#_compile_fun_varp
07910     FD 34 02 F6 | 	mov	local08, result1
07914     FE 30 02 F6 | 	mov	local06, result2
07918     60 03 90 FD | 	jmp	#LR__0711
0791c                 | LR__0648
0791c     38 0D B0 FD | 	call	#_compile_fun_varp
07920     FD 34 02 F6 | 	mov	local08, result1
07924     FE 30 02 F6 | 	mov	local06, result2
07928     50 03 90 FD | 	jmp	#LR__0711
0792c                 | LR__0649
0792c     28 0D B0 FD | 	call	#_compile_fun_varp
07930     FD 34 02 F6 | 	mov	local08, result1
07934     FE 30 02 F6 | 	mov	local06, result2
07938     40 03 90 FD | 	jmp	#LR__0711
0793c                 | LR__0650
0793c                 | ' return expr()
0793c     84 41 B0 FD | 	call	#_expr
07940     FD 30 02 F6 | 	mov	local06, result1
07944     34 03 90 FD | 	jmp	#LR__0711
07948                 | LR__0651
07948     30 22 B0 FD | 	call	#_compile_dim
0794c     FD 30 02 F6 | 	mov	local06, result1
07950     E4 03 90 FD | 	jmp	#LR__0712
07954                 | LR__0652
07954     00 0D B0 FD | 	call	#_compile_fun_varp
07958     FD 34 02 F6 | 	mov	local08, result1
0795c     FE 30 02 F6 | 	mov	local06, result2
07960     18 03 90 FD | 	jmp	#LR__0711
07964                 | LR__0653
07964     20 0A B0 FD | 	call	#_compile_fun_2p
07968     FD 30 02 F6 | 	mov	local06, result1
0796c     0C 03 90 FD | 	jmp	#LR__0711
07970                 | LR__0654
07970     E4 0C B0 FD | 	call	#_compile_fun_varp
07974     FD 34 02 F6 | 	mov	local08, result1
07978     FE 30 02 F6 | 	mov	local06, result2
0797c     FC 02 90 FD | 	jmp	#LR__0711
07980                 | LR__0655
07980     17 13 02 F6 | 	mov	arg01, local05
07984     BC 20 B0 FD | 	call	#_compile_else
07988     FD 30 02 F6 | 	mov	local06, result1
0798c     A8 03 90 FD | 	jmp	#LR__0712
07990                 | LR__0656
07990     C4 0C B0 FD | 	call	#_compile_fun_varp
07994     FD 34 02 F6 | 	mov	local08, result1
07998     FE 30 02 F6 | 	mov	local06, result2
0799c     DC 02 90 FD | 	jmp	#LR__0711
079a0                 | LR__0657
079a0     B4 0C B0 FD | 	call	#_compile_fun_varp
079a4     FD 34 02 F6 | 	mov	local08, result1
079a8     FE 30 02 F6 | 	mov	local06, result2
079ac     CC 02 90 FD | 	jmp	#LR__0711
079b0                 | LR__0658
079b0     01 2E 16 F2 | 	cmp	local05, #1 wc
079b4     08 00 90 CD |  if_b	jmp	#LR__0659
079b8     5C 33 B0 FD | 	call	#_compile_goto
079bc     78 03 90 FD | 	jmp	#LR__0712
079c0                 | LR__0659
079c0     19 12 06 F6 | 	mov	arg01, #25
079c4     00 14 06 F6 | 	mov	arg02, #0
079c8     60 AB B1 FD | 	call	#_printerror
079cc     68 03 90 FD | 	jmp	#LR__0712
079d0                 | LR__0660
079d0     01 2E 16 F2 | 	cmp	local05, #1 wc
079d4     08 00 90 CD |  if_b	jmp	#LR__0661
079d8     D8 32 B0 FD | 	call	#_compile_gosub
079dc     58 03 90 FD | 	jmp	#LR__0712
079e0                 | LR__0661
079e0     19 12 06 F6 | 	mov	arg01, #25
079e4     00 14 06 F6 | 	mov	arg02, #0
079e8     40 AB B1 FD | 	call	#_printerror
079ec     48 03 90 FD | 	jmp	#LR__0712
079f0                 | LR__0662
079f0     64 0C B0 FD | 	call	#_compile_fun_varp
079f4     FD 34 02 F6 | 	mov	local08, result1
079f8     FE 30 02 F6 | 	mov	local06, result2
079fc     7C 02 90 FD | 	jmp	#LR__0711
07a00                 | LR__0663
07a00     FC 0A B0 FD | 	call	#_compile_fun_4p
07a04     FD 30 02 F6 | 	mov	local06, result1
07a08     70 02 90 FD | 	jmp	#LR__0711
07a0c                 | LR__0664
07a0c                 | ' return expr()
07a0c     B4 40 B0 FD | 	call	#_expr
07a10     FD 30 02 F6 | 	mov	local06, result1
07a14     64 02 90 FD | 	jmp	#LR__0711
07a18                 | LR__0665
07a18     34 28 B0 FD | 	call	#_compile_for
07a1c     FD 30 02 F6 | 	mov	local06, result1
07a20     14 03 90 FD | 	jmp	#LR__0712
07a24                 | LR__0666
07a24     30 0C B0 FD | 	call	#_compile_fun_varp
07a28     FD 34 02 F6 | 	mov	local08, result1
07a2c     FE 30 02 F6 | 	mov	local06, result2
07a30     48 02 90 FD | 	jmp	#LR__0711
07a34                 | LR__0667
07a34     17 13 02 F6 | 	mov	arg01, local05
07a38     80 1E B0 FD | 	call	#_compile_if
07a3c     FD 30 02 F6 | 	mov	local06, result1
07a40     F4 02 90 FD | 	jmp	#LR__0712
07a44                 | LR__0668
07a44                 | ' return expr()
07a44     7C 40 B0 FD | 	call	#_expr
07a48     FD 30 02 F6 | 	mov	local06, result1
07a4c     2C 02 90 FD | 	jmp	#LR__0711
07a50                 | LR__0669
07a50     D0 0D B0 FD | 	call	#_compile_input
07a54     FD 34 02 F6 | 	mov	local08, result1
07a58     FE 30 02 F6 | 	mov	local06, result2
07a5c     1C 02 90 FD | 	jmp	#LR__0711
07a60                 | LR__0670
07a60                 | ' return expr()
07a60     60 40 B0 FD | 	call	#_expr
07a64     FD 30 02 F6 | 	mov	local06, result1
07a68     10 02 90 FD | 	jmp	#LR__0711
07a6c                 | LR__0671
07a6c     E8 0B B0 FD | 	call	#_compile_fun_varp
07a70     FD 34 02 F6 | 	mov	local08, result1
07a74     FE 30 02 F6 | 	mov	local06, result2
07a78     00 02 90 FD | 	jmp	#LR__0711
07a7c                 | LR__0672
07a7c     D8 0B B0 FD | 	call	#_compile_fun_varp
07a80     FD 34 02 F6 | 	mov	local08, result1
07a84     FE 30 02 F6 | 	mov	local06, result2
07a88     F0 01 90 FD | 	jmp	#LR__0711
07a8c                 | LR__0673
07a8c     F8 08 B0 FD | 	call	#_compile_fun_2p
07a90     FD 30 02 F6 | 	mov	local06, result1
07a94     E4 01 90 FD | 	jmp	#LR__0711
07a98                 | LR__0674
07a98                 | ' return expr()
07a98     28 40 B0 FD | 	call	#_expr
07a9c     FD 30 02 F6 | 	mov	local06, result1
07aa0     D8 01 90 FD | 	jmp	#LR__0711
07aa4                 | LR__0675
07aa4                 | ' return expr()
07aa4     1C 40 B0 FD | 	call	#_expr
07aa8     FD 30 02 F6 | 	mov	local06, result1
07aac     CC 01 90 FD | 	jmp	#LR__0711
07ab0                 | LR__0676
07ab0                 | ' return expr()
07ab0     10 40 B0 FD | 	call	#_expr
07ab4     FD 30 02 F6 | 	mov	local06, result1
07ab8     C0 01 90 FD | 	jmp	#LR__0711
07abc                 | LR__0677
07abc     5C 30 B0 FD | 	call	#_compile_next
07ac0     FD 30 02 F6 | 	mov	local06, result1
07ac4     70 02 90 FD | 	jmp	#LR__0712
07ac8                 | LR__0678
07ac8     3C 36 B0 FD | 	call	#_compile_on
07acc     FD 30 02 F6 | 	mov	local06, result1
07ad0     64 02 90 FD | 	jmp	#LR__0712
07ad4                 | LR__0679
07ad4     38 09 B0 FD | 	call	#_compile_fun_3p
07ad8     FD 30 02 F6 | 	mov	local06, result1
07adc     9C 01 90 FD | 	jmp	#LR__0711
07ae0                 | LR__0680
07ae0                 | ' return expr()
07ae0     E0 3F B0 FD | 	call	#_expr
07ae4     FD 30 02 F6 | 	mov	local06, result1
07ae8     90 01 90 FD | 	jmp	#LR__0711
07aec                 | LR__0681
07aec                 | ' return expr()
07aec     D4 3F B0 FD | 	call	#_expr
07af0     FD 30 02 F6 | 	mov	local06, result1
07af4     84 01 90 FD | 	jmp	#LR__0711
07af8                 | LR__0682
07af8                 | ' return expr()
07af8     C8 3F B0 FD | 	call	#_expr
07afc     FD 30 02 F6 | 	mov	local06, result1
07b00     78 01 90 FD | 	jmp	#LR__0711
07b04                 | LR__0683
07b04                 | ' return expr()
07b04     BC 3F B0 FD | 	call	#_expr
07b08     FD 30 02 F6 | 	mov	local06, result1
07b0c     6C 01 90 FD | 	jmp	#LR__0711
07b10                 | LR__0684
07b10     EC 09 B0 FD | 	call	#_compile_fun_4p
07b14     FD 30 02 F6 | 	mov	local06, result1
07b18     60 01 90 FD | 	jmp	#LR__0711
07b1c                 | LR__0685
07b1c                 | ' return expr()
07b1c     A4 3F B0 FD | 	call	#_expr
07b20     FD 30 02 F6 | 	mov	local06, result1
07b24     54 01 90 FD | 	jmp	#LR__0711
07b28                 | LR__0686
07b28     5C 08 B0 FD | 	call	#_compile_fun_2p
07b2c     FD 30 02 F6 | 	mov	local06, result1
07b30     48 01 90 FD | 	jmp	#LR__0711
07b34                 | LR__0687
07b34     20 0B B0 FD | 	call	#_compile_fun_varp
07b38     FD 34 02 F6 | 	mov	local08, result1
07b3c     FE 30 02 F6 | 	mov	local06, result2
07b40     38 01 90 FD | 	jmp	#LR__0711
07b44                 | LR__0688
07b44     10 0B B0 FD | 	call	#_compile_fun_varp
07b48     FD 34 02 F6 | 	mov	local08, result1
07b4c     FE 30 02 F6 | 	mov	local06, result2
07b50     28 01 90 FD | 	jmp	#LR__0711
07b54                 | LR__0689
07b54     30 08 B0 FD | 	call	#_compile_fun_2p
07b58     FD 30 02 F6 | 	mov	local06, result1
07b5c     1C 01 90 FD | 	jmp	#LR__0711
07b60                 | LR__0690
07b60     24 08 B0 FD | 	call	#_compile_fun_2p
07b64     FD 30 02 F6 | 	mov	local06, result1
07b68     10 01 90 FD | 	jmp	#LR__0711
07b6c                 | LR__0691
07b6c     74 16 B0 FD | 	call	#_compile_print
07b70     FD 30 02 F6 | 	mov	local06, result1
07b74     C0 01 90 FD | 	jmp	#LR__0712
07b78                 | LR__0692
07b78     DC 0A B0 FD | 	call	#_compile_fun_varp
07b7c     FD 34 02 F6 | 	mov	local08, result1
07b80     FE 30 02 F6 | 	mov	local06, result2
07b84     F4 00 90 FD | 	jmp	#LR__0711
07b88                 | LR__0693
07b88     A8 0B B0 FD | 	call	#_compile_read
07b8c     FD 34 02 F6 | 	mov	local08, result1
07b90     FE 30 02 F6 | 	mov	local06, result2
07b94     E4 00 90 FD | 	jmp	#LR__0711
07b98                 | LR__0694
07b98                 | ' return expr()
07b98     28 3F B0 FD | 	call	#_expr
07b9c     FD 30 02 F6 | 	mov	local06, result1
07ba0     D8 00 90 FD | 	jmp	#LR__0711
07ba4                 | LR__0695
07ba4     B0 0A B0 FD | 	call	#_compile_fun_varp
07ba8     FD 34 02 F6 | 	mov	local08, result1
07bac     FE 30 02 F6 | 	mov	local06, result2
07bb0     C8 00 90 FD | 	jmp	#LR__0711
07bb4                 | LR__0696
07bb4     A0 0A B0 FD | 	call	#_compile_fun_varp
07bb8     FD 34 02 F6 | 	mov	local08, result1
07bbc     FE 30 02 F6 | 	mov	local06, result2
07bc0     B8 00 90 FD | 	jmp	#LR__0711
07bc4                 | LR__0697
07bc4     C0 07 B0 FD | 	call	#_compile_fun_2p
07bc8     FD 30 02 F6 | 	mov	local06, result1
07bcc     AC 00 90 FD | 	jmp	#LR__0711
07bd0                 | LR__0698
07bd0     B4 07 B0 FD | 	call	#_compile_fun_2p
07bd4     FD 30 02 F6 | 	mov	local06, result1
07bd8     A0 00 90 FD | 	jmp	#LR__0711
07bdc                 | LR__0699
07bdc     A8 07 B0 FD | 	call	#_compile_fun_2p
07be0     FD 30 02 F6 | 	mov	local06, result1
07be4     94 00 90 FD | 	jmp	#LR__0711
07be8                 | LR__0700
07be8     9C 07 B0 FD | 	call	#_compile_fun_2p
07bec     FD 30 02 F6 | 	mov	local06, result1
07bf0     88 00 90 FD | 	jmp	#LR__0711
07bf4                 | LR__0701
07bf4     90 07 B0 FD | 	call	#_compile_fun_2p
07bf8     FD 30 02 F6 | 	mov	local06, result1
07bfc     7C 00 90 FD | 	jmp	#LR__0711
07c00                 | LR__0702
07c00     84 07 B0 FD | 	call	#_compile_fun_2p
07c04     FD 30 02 F6 | 	mov	local06, result1
07c08     70 00 90 FD | 	jmp	#LR__0711
07c0c                 | LR__0703
07c0c     78 07 B0 FD | 	call	#_compile_fun_2p
07c10     FD 30 02 F6 | 	mov	local06, result1
07c14     64 00 90 FD | 	jmp	#LR__0711
07c18                 | LR__0704
07c18     3C 0A B0 FD | 	call	#_compile_fun_varp
07c1c     FD 34 02 F6 | 	mov	local08, result1
07c20     FE 30 02 F6 | 	mov	local06, result2
07c24     54 00 90 FD | 	jmp	#LR__0711
07c28                 | LR__0705
07c28     E4 07 B0 FD | 	call	#_compile_fun_3p
07c2c     FD 30 02 F6 | 	mov	local06, result1
07c30     48 00 90 FD | 	jmp	#LR__0711
07c34                 | LR__0706
07c34                 | ' return expr()
07c34     8C 3E B0 FD | 	call	#_expr
07c38     FD 30 02 F6 | 	mov	local06, result1
07c3c     3C 00 90 FD | 	jmp	#LR__0711
07c40                 | LR__0707
07c40     44 07 B0 FD | 	call	#_compile_fun_2p
07c44     FD 30 02 F6 | 	mov	local06, result1
07c48     30 00 90 FD | 	jmp	#LR__0711
07c4c                 | LR__0708
07c4c     38 07 B0 FD | 	call	#_compile_fun_2p
07c50     FD 30 02 F6 | 	mov	local06, result1
07c54     24 00 90 FD | 	jmp	#LR__0711
07c58                 | LR__0709
07c58     2C 07 B0 FD | 	call	#_compile_fun_2p
07c5c     FD 30 02 F6 | 	mov	local06, result1
07c60     18 00 90 FD | 	jmp	#LR__0711
07c64                 | LR__0710
07c64     1C 13 B0 FD | 	call	#_compile_array_assign
07c68     FD 30 02 F6 | 	mov	local06, result1
07c6c     0E 30 0E F2 | 	cmp	local06, #14 wz
07c70     C4 00 90 5D |  if_ne	jmp	#LR__0712
07c74                 | ' return 23
07c74     17 30 06 F6 | 	mov	local06, #23
07c78     BC 00 90 FD | 	jmp	#LR__0712
07c7c                 | ' return 23
07c7c                 | LR__0711
07c7c     19 2B 02 F6 | 	mov	local03, local07
07c80     1A 27 02 F6 | 	mov	local01, local08
07c84     13 37 02 F6 | 	mov	local09, local01
07c88     14 39 02 F6 | 	mov	local10, local02
07c8c     15 33 02 F6 | 	mov	local07, local03
07c90     4A 00 00 FF 
07c94     7C E4 05 F1 | 	add	objptr, ##38012
07c98     F2 26 02 FB | 	rdlong	local01, objptr
07c9c     13 35 02 F6 | 	mov	local08, local01
07ca0     01 34 66 F0 | 	shl	local08, #1
07ca4     13 35 02 F1 | 	add	local08, local01
07ca8     02 34 66 F0 | 	shl	local08, #2
07cac     03 00 00 FF 
07cb0     00 E4 85 F1 | 	sub	objptr, ##1536
07cb4     F2 34 02 F1 | 	add	local08, objptr
07cb8     1A 37 62 FC | 	wrlong	local09, local08
07cbc     03 00 00 FF 
07cc0     00 E4 05 F1 | 	add	objptr, ##1536
07cc4     F2 26 02 FB | 	rdlong	local01, objptr
07cc8     13 37 02 F6 | 	mov	local09, local01
07ccc     01 36 66 F0 | 	shl	local09, #1
07cd0     13 37 02 F1 | 	add	local09, local01
07cd4     02 36 66 F0 | 	shl	local09, #2
07cd8     03 00 00 FF 
07cdc     00 E4 85 F1 | 	sub	objptr, ##1536
07ce0     F2 36 02 F1 | 	add	local09, objptr
07ce4     04 36 06 F1 | 	add	local09, #4
07ce8     1B 39 62 FC | 	wrlong	local10, local09
07cec     03 00 00 FF 
07cf0     00 E4 05 F1 | 	add	objptr, ##1536
07cf4     F2 26 02 FB | 	rdlong	local01, objptr
07cf8     13 39 02 F6 | 	mov	local10, local01
07cfc     01 38 66 F0 | 	shl	local10, #1
07d00     13 39 02 F1 | 	add	local10, local01
07d04     02 38 66 F0 | 	shl	local10, #2
07d08     03 00 00 FF 
07d0c     00 E4 85 F1 | 	sub	objptr, ##1536
07d10     F2 38 02 F1 | 	add	local10, objptr
07d14     08 38 06 F1 | 	add	local10, #8
07d18     1C 33 62 FC | 	wrlong	local07, local10
07d1c     03 00 00 FF 
07d20     00 E4 05 F1 | 	add	objptr, ##1536
07d24     F2 36 02 FB | 	rdlong	local09, objptr
07d28     01 36 06 F1 | 	add	local09, #1
07d2c     F2 36 62 FC | 	wrlong	local09, objptr
07d30     4A 00 00 FF 
07d34     7C E4 85 F1 | 	sub	objptr, ##38012
07d38                 | LR__0712
07d38                 | ' 
07d38                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07d38                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07d38     03 2C 0E F2 | 	cmp	local04, #3 wz
07d3c     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07d40     38 00 90 5D |  if_ne	jmp	#LR__0713
07d44     4A 00 00 FF 
07d48     7C E4 05 F1 | 	add	objptr, ##38012
07d4c     F2 38 02 FB | 	rdlong	local10, objptr
07d50     1C 27 02 F6 | 	mov	local01, local10
07d54     01 26 66 F0 | 	shl	local01, #1
07d58     1C 27 02 F1 | 	add	local01, local10
07d5c     02 26 66 F0 | 	shl	local01, #2
07d60     03 00 00 FF 
07d64     00 E4 85 F1 | 	sub	objptr, ##1536
07d68     F2 26 02 F1 | 	add	local01, objptr
07d6c     08 26 06 F1 | 	add	local01, #8
07d70     13 FD 6B FC | 	wrlong	#510, local01
07d74     47 00 00 FF 
07d78     7C E4 85 F1 | 	sub	objptr, ##36476
07d7c                 | LR__0713
07d7c                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
07d7c                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07d7c     4A 00 00 FF 
07d80     7C E4 05 F1 | 	add	objptr, ##38012
07d84     F2 26 02 FB | 	rdlong	local01, objptr
07d88     4A 00 00 FF 
07d8c     7C E4 85 F1 | 	sub	objptr, ##38012
07d90     97 58 48 FB | 	callpa	#(@LR__0716-@LR__0714)>>2,fcache_load_ptr_
07d94                 | LR__0714
07d94     13 39 02 F6 | 	mov	local10, local01
07d98     01 38 66 F0 | 	shl	local10, #1
07d9c     13 39 02 F1 | 	add	local10, local01
07da0     02 38 66 F0 | 	shl	local10, #2
07da4     47 00 00 FF 
07da8     7C E4 05 F1 | 	add	objptr, ##36476
07dac     F2 38 02 F1 | 	add	local10, objptr
07db0     08 38 06 F1 | 	add	local10, #8
07db4     1C 39 02 FB | 	rdlong	local10, local10
07db8     9B 38 0E F2 | 	cmp	local10, #155 wz
07dbc     47 00 00 FF 
07dc0     7C E4 85 F1 | 	sub	objptr, ##36476
07dc4     70 00 90 5D |  if_ne	jmp	#LR__0715
07dc8     13 37 02 F6 | 	mov	local09, local01
07dcc     01 36 86 F1 | 	sub	local09, #1
07dd0     1B 39 02 F6 | 	mov	local10, local09
07dd4     01 38 66 F0 | 	shl	local10, #1
07dd8     1B 39 02 F1 | 	add	local10, local09
07ddc     02 38 66 F0 | 	shl	local10, #2
07de0     47 00 00 FF 
07de4     7C E4 05 F1 | 	add	objptr, ##36476
07de8     F2 38 02 F1 | 	add	local10, objptr
07dec     08 38 06 F1 | 	add	local10, #8
07df0     1C 39 02 FB | 	rdlong	local10, local10
07df4     11 38 0E F2 | 	cmp	local10, #17 wz
07df8     47 00 00 FF 
07dfc     7C E4 85 F1 | 	sub	objptr, ##36476
07e00     34 00 90 5D |  if_ne	jmp	#LR__0715
07e04     13 37 02 F6 | 	mov	local09, local01
07e08     01 36 86 F1 | 	sub	local09, #1
07e0c     1B 39 02 F6 | 	mov	local10, local09
07e10     01 38 66 F0 | 	shl	local10, #1
07e14     1B 39 02 F1 | 	add	local10, local09
07e18     02 38 66 F0 | 	shl	local10, #2
07e1c     47 00 00 FF 
07e20     7C E4 05 F1 | 	add	objptr, ##36476
07e24     F2 38 02 F1 | 	add	local10, objptr
07e28     08 38 06 F1 | 	add	local10, #8
07e2c     1C 25 68 FC | 	wrlong	#18, local10
07e30     47 00 00 FF 
07e34     7C E4 85 F1 | 	sub	objptr, ##36476
07e38                 | LR__0715
07e38     01 26 86 F1 | 	sub	local01, #1
07e3c     01 26 56 F2 | 	cmps	local01, #1 wc
07e40     50 FF 9F 3D |  if_ae	jmp	#LR__0714
07e44                 | LR__0716
07e44                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
07e44                 | ' return err
07e44     18 FB 01 F6 | 	mov	result1, local06
07e48     A7 F0 03 F6 | 	mov	ptra, fp
07e4c     B2 00 A0 FD | 	call	#popregs_
07e50                 | _compile_immediate_ret
07e50     2D 00 64 FD | 	ret
07e54                 | 
07e54                 | ' 
07e54                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
07e54                 | ' 
07e54                 | ' function compile_immediate_assign(linetype as ulong) as ulong
07e54                 | _compile_immediate_assign
07e54     0C 4A 05 F6 | 	mov	COUNT_, #12
07e58     A8 00 A0 FD | 	call	#pushregs_
07e5c     09 2D 02 F6 | 	mov	local04, arg01
07e60     FF 2A 06 F6 | 	mov	local03, #255
07e64     01 2E 66 F6 | 	neg	local05, #1
07e68     00 30 06 F6 | 	mov	local06, #0
07e6c                 | ' 
07e6c                 | ' t1.result_type=result_error : t1.result.uresult=0
07e6c                 | ' i=-1: j=-1 : err=0
07e6c                 | ' 
07e6c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
07e6c     02 2C 0E F2 | 	cmp	local04, #2 wz
07e70     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07e74     35 00 00 AF 
07e78     0C E4 05 A1 |  if_e	add	objptr, ##27148
07e7c     F2 32 02 AB |  if_e	rdlong	local07, objptr
07e80     02 00 00 AF 
07e84     38 E4 05 A1 |  if_e	add	objptr, ##1080
07e88     F2 04 68 AC |  if_e	wrlong	#2, objptr
07e8c     37 00 00 AF 
07e90     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07e94                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
07e94     04 2C 0E F2 | 	cmp	local04, #4 wz
07e98     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07e9c     2C 00 90 5D |  if_ne	jmp	#LR__0720
07ea0     35 00 00 FF 
07ea4     14 E4 05 F1 | 	add	objptr, ##27156
07ea8     F2 32 02 FB | 	rdlong	local07, objptr
07eac     02 00 00 FF 
07eb0     30 E4 05 F1 | 	add	objptr, ##1072
07eb4     F2 06 68 FC | 	wrlong	#3, objptr
07eb8     13 00 00 FF 
07ebc     38 E4 05 F1 | 	add	objptr, ##9784
07ec0     F2 04 68 FC | 	wrlong	#2, objptr
07ec4     4A 00 00 FF 
07ec8     7C E4 85 F1 | 	sub	objptr, ##38012
07ecc                 | LR__0720
07ecc                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07ecc     05 2C 0E F2 | 	cmp	local04, #5 wz
07ed0     3C 00 90 5D |  if_ne	jmp	#LR__0721
07ed4     37 00 00 FF 
07ed8     44 E4 05 F1 | 	add	objptr, ##28228
07edc     F2 FA 01 FB | 	rdlong	result1, objptr
07ee0     FD 32 02 F6 | 	mov	local07, result1
07ee4     03 32 66 F0 | 	shl	local07, #3
07ee8     02 00 00 FF 
07eec     38 E4 85 F1 | 	sub	objptr, ##1080
07ef0     F2 32 02 F1 | 	add	local07, objptr
07ef4     19 33 02 FB | 	rdlong	local07, local07
07ef8     02 FA 05 F1 | 	add	result1, #2
07efc     02 00 00 FF 
07f00     38 E4 05 F1 | 	add	objptr, ##1080
07f04     F2 FA 61 FC | 	wrlong	result1, objptr
07f08     37 00 00 FF 
07f0c     44 E4 85 F1 | 	sub	objptr, ##28228
07f10                 | LR__0721
07f10     19 13 02 F6 | 	mov	arg01, local07
07f14     01 14 06 F6 | 	mov	arg02, #1
07f18     00 01 B2 FD | 	call	#__system__Right_S
07f1c     FD 34 02 F6 | 	mov	local08, result1
07f20     A0 3B B0 FD | 	call	#_expr
07f24                 | ' 
07f24                 | ' suffix2$=right$(varname2$,1)
07f24                 | ' expr()
07f24                 | ' if varnum>0 then					' try to find a variable
07f24     35 00 00 FF 
07f28     08 E4 05 F1 | 	add	objptr, ##27144
07f2c     F2 36 02 FB | 	rdlong	local09, objptr
07f30     35 00 00 FF 
07f34     08 E4 85 F1 | 	sub	objptr, ##27144
07f38     01 36 56 F2 | 	cmps	local09, #1 wc
07f3c     58 00 90 CD |  if_b	jmp	#LR__0724
07f40                 | '   for i=0 to varnum-1
07f40     00 38 06 F6 | 	mov	local10, #0
07f44     35 00 00 FF 
07f48     08 E4 05 F1 | 	add	objptr, ##27144
07f4c     F2 3A 02 FB | 	rdlong	local11, objptr
07f50     35 00 00 FF 
07f54     08 E4 85 F1 | 	sub	objptr, ##27144
07f58                 | LR__0722
07f58     1D 39 52 F2 | 	cmps	local10, local11 wc
07f5c     38 00 90 3D |  if_ae	jmp	#LR__0723
07f60                 | '     if variables(i).name=varname2$ then j=i : exit
07f60     1C 37 02 F6 | 	mov	local09, local10
07f64     04 36 66 F0 | 	shl	local09, #4
07f68     14 00 00 FF 
07f6c     F8 E5 05 F1 | 	add	objptr, ##10744
07f70     F2 36 02 F1 | 	add	local09, objptr
07f74     1B 13 02 FB | 	rdlong	arg01, local09
07f78     19 15 02 F6 | 	mov	arg02, local07
07f7c     14 00 00 FF 
07f80     F8 E5 85 F1 | 	sub	objptr, ##10744
07f84     B8 DF B1 FD | 	call	#__system___string_cmp
07f88     00 FA 0D F2 | 	cmp	result1, #0 wz
07f8c     1C 2F 02 A6 |  if_e	mov	local05, local10
07f90     01 38 06 51 |  if_ne	add	local10, #1
07f94     C0 FF 9F 5D |  if_ne	jmp	#LR__0722
07f98                 | LR__0723
07f98                 | LR__0724
07f98                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
07f98     FF FF 7F FF 
07f9c     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
07fa0     60 00 90 5D |  if_ne	jmp	#LR__0725
07fa4     35 00 00 FF 
07fa8     08 E4 05 F1 | 	add	objptr, ##27144
07fac     F2 36 02 FB | 	rdlong	local09, objptr
07fb0     35 00 00 FF 
07fb4     08 E4 85 F1 | 	sub	objptr, ##27144
07fb8     02 00 00 FF 
07fbc     00 36 56 F2 | 	cmps	local09, ##1024 wc
07fc0     40 00 90 3D |  if_ae	jmp	#LR__0725
07fc4     35 00 00 FF 
07fc8     08 E4 05 F1 | 	add	objptr, ##27144
07fcc     F2 3A 02 FB | 	rdlong	local11, objptr
07fd0     04 3A 66 F0 | 	shl	local11, #4
07fd4     20 00 00 FF 
07fd8     10 E4 85 F1 | 	sub	objptr, ##16400
07fdc     F2 3A 02 F1 | 	add	local11, objptr
07fe0     1D 33 62 FC | 	wrlong	local07, local11
07fe4     20 00 00 FF 
07fe8     10 E4 05 F1 | 	add	objptr, ##16400
07fec     F2 36 02 FB | 	rdlong	local09, objptr
07ff0     1B 2F 02 F6 | 	mov	local05, local09
07ff4     01 36 06 F1 | 	add	local09, #1
07ff8     F2 36 62 FC | 	wrlong	local09, objptr
07ffc     35 00 00 FF 
08000     08 E4 85 F1 | 	sub	objptr, ##27144
08004                 | LR__0725
08004                 | ' if varnum>=maxvars then
08004     35 00 00 FF 
08008     08 E4 05 F1 | 	add	objptr, ##27144
0800c     F2 36 02 FB | 	rdlong	local09, objptr
08010     35 00 00 FF 
08014     08 E4 85 F1 | 	sub	objptr, ##27144
08018     02 00 00 FF 
0801c     00 36 56 F2 | 	cmps	local09, ##1024 wc
08020     2D 30 06 36 |  if_ae	mov	local06, #45
08024     C8 01 90 3D |  if_ae	jmp	#LR__0730
08028     17 27 02 F6 | 	mov	local01, local05
0802c     17 2A 06 F6 | 	mov	local03, #23
08030     13 37 02 F6 | 	mov	local09, local01
08034     14 3D 02 F6 | 	mov	local12, local02
08038     15 27 02 F6 | 	mov	local01, local03
0803c     4A 00 00 FF 
08040     7C E4 05 F1 | 	add	objptr, ##38012
08044     F2 3A 02 FB | 	rdlong	local11, objptr
08048     1D 39 02 F6 | 	mov	local10, local11
0804c     01 38 66 F0 | 	shl	local10, #1
08050     1D 39 02 F1 | 	add	local10, local11
08054     02 38 66 F0 | 	shl	local10, #2
08058     03 00 00 FF 
0805c     00 E4 85 F1 | 	sub	objptr, ##1536
08060     F2 38 02 F1 | 	add	local10, objptr
08064     1C 37 62 FC | 	wrlong	local09, local10
08068     03 00 00 FF 
0806c     00 E4 05 F1 | 	add	objptr, ##1536
08070     F2 36 02 FB | 	rdlong	local09, objptr
08074     1B 3B 02 F6 | 	mov	local11, local09
08078     01 3A 66 F0 | 	shl	local11, #1
0807c     1B 3B 02 F1 | 	add	local11, local09
08080     02 3A 66 F0 | 	shl	local11, #2
08084     03 00 00 FF 
08088     00 E4 85 F1 | 	sub	objptr, ##1536
0808c     F2 3A 02 F1 | 	add	local11, objptr
08090     04 3A 06 F1 | 	add	local11, #4
08094     1D 3D 62 FC | 	wrlong	local12, local11
08098     03 00 00 FF 
0809c     00 E4 05 F1 | 	add	objptr, ##1536
080a0     F2 36 02 FB | 	rdlong	local09, objptr
080a4     1B 3D 02 F6 | 	mov	local12, local09
080a8     01 3C 66 F0 | 	shl	local12, #1
080ac     1B 3D 02 F1 | 	add	local12, local09
080b0     02 3C 66 F0 | 	shl	local12, #2
080b4     03 00 00 FF 
080b8     00 E4 85 F1 | 	sub	objptr, ##1536
080bc     F2 3C 02 F1 | 	add	local12, objptr
080c0     08 3C 06 F1 | 	add	local12, #8
080c4     1E 27 62 FC | 	wrlong	local01, local12
080c8     03 00 00 FF 
080cc     00 E4 05 F1 | 	add	objptr, ##1536
080d0     F2 36 02 FB | 	rdlong	local09, objptr
080d4     01 36 06 F1 | 	add	local09, #1
080d8     F2 36 62 FC | 	wrlong	local09, objptr
080dc     4A 00 00 FF 
080e0     7C E4 85 F1 | 	sub	objptr, ##38012
080e4                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
080e4                 | '   compiledline(lineptr)=t1:  lineptr+=1 
080e4                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
080e4     03 2C 0E F2 | 	cmp	local04, #3 wz
080e8     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
080ec     38 00 90 5D |  if_ne	jmp	#LR__0726
080f0     4A 00 00 FF 
080f4     7C E4 05 F1 | 	add	objptr, ##38012
080f8     F2 3C 02 FB | 	rdlong	local12, objptr
080fc     1E 27 02 F6 | 	mov	local01, local12
08100     01 26 66 F0 | 	shl	local01, #1
08104     1E 27 02 F1 | 	add	local01, local12
08108     02 26 66 F0 | 	shl	local01, #2
0810c     03 00 00 FF 
08110     00 E4 85 F1 | 	sub	objptr, ##1536
08114     F2 26 02 F1 | 	add	local01, objptr
08118     08 26 06 F1 | 	add	local01, #8
0811c     13 FD 6B FC | 	wrlong	#510, local01
08120     47 00 00 FF 
08124     7C E4 85 F1 | 	sub	objptr, ##36476
08128                 | LR__0726
08128                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08128     4A 00 00 FF 
0812c     7C E4 05 F1 | 	add	objptr, ##38012
08130     F2 38 02 FB | 	rdlong	local10, objptr
08134     4A 00 00 FF 
08138     7C E4 85 F1 | 	sub	objptr, ##38012
0813c     97 58 48 FB | 	callpa	#(@LR__0729-@LR__0727)>>2,fcache_load_ptr_
08140                 | LR__0727
08140     1C 3D 02 F6 | 	mov	local12, local10
08144     01 3C 66 F0 | 	shl	local12, #1
08148     1C 3D 02 F1 | 	add	local12, local10
0814c     02 3C 66 F0 | 	shl	local12, #2
08150     47 00 00 FF 
08154     7C E4 05 F1 | 	add	objptr, ##36476
08158     F2 3C 02 F1 | 	add	local12, objptr
0815c     08 3C 06 F1 | 	add	local12, #8
08160     1E 3D 02 FB | 	rdlong	local12, local12
08164     9B 3C 0E F2 | 	cmp	local12, #155 wz
08168     47 00 00 FF 
0816c     7C E4 85 F1 | 	sub	objptr, ##36476
08170     70 00 90 5D |  if_ne	jmp	#LR__0728
08174     1C 3D 02 F6 | 	mov	local12, local10
08178     01 3C 86 F1 | 	sub	local12, #1
0817c     1E 27 02 F6 | 	mov	local01, local12
08180     01 26 66 F0 | 	shl	local01, #1
08184     1E 27 02 F1 | 	add	local01, local12
08188     02 26 66 F0 | 	shl	local01, #2
0818c     47 00 00 FF 
08190     7C E4 05 F1 | 	add	objptr, ##36476
08194     F2 26 02 F1 | 	add	local01, objptr
08198     08 26 06 F1 | 	add	local01, #8
0819c     13 27 02 FB | 	rdlong	local01, local01
081a0     11 26 0E F2 | 	cmp	local01, #17 wz
081a4     47 00 00 FF 
081a8     7C E4 85 F1 | 	sub	objptr, ##36476
081ac     34 00 90 5D |  if_ne	jmp	#LR__0728
081b0     1C 3D 02 F6 | 	mov	local12, local10
081b4     01 3C 86 F1 | 	sub	local12, #1
081b8     1E 27 02 F6 | 	mov	local01, local12
081bc     01 26 66 F0 | 	shl	local01, #1
081c0     1E 27 02 F1 | 	add	local01, local12
081c4     02 26 66 F0 | 	shl	local01, #2
081c8     47 00 00 FF 
081cc     7C E4 05 F1 | 	add	objptr, ##36476
081d0     F2 26 02 F1 | 	add	local01, objptr
081d4     08 26 06 F1 | 	add	local01, #8
081d8     13 25 68 FC | 	wrlong	#18, local01
081dc     47 00 00 FF 
081e0     7C E4 85 F1 | 	sub	objptr, ##36476
081e4                 | LR__0728
081e4     01 38 86 F1 | 	sub	local10, #1
081e8     01 38 56 F2 | 	cmps	local10, #1 wc
081ec     50 FF 9F 3D |  if_ae	jmp	#LR__0727
081f0                 | LR__0729
081f0                 | LR__0730
081f0                 | ' return err
081f0     18 FB 01 F6 | 	mov	result1, local06
081f4     A7 F0 03 F6 | 	mov	ptra, fp
081f8     B2 00 A0 FD | 	call	#popregs_
081fc                 | _compile_immediate_assign_ret
081fc     2D 00 64 FD | 	ret
08200                 | 
08200                 | ' 
08200                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
08200                 | ' 
08200                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
08200                 | _compile
08200     03 4A 05 F6 | 	mov	COUNT_, #3
08204     A8 00 A0 FD | 	call	#pushregs_
08208     09 27 02 F6 | 	mov	local01, arg01
0820c     0B 29 02 F6 | 	mov	local02, arg03
08210     47 00 00 FF 
08214     7C E4 05 F1 | 	add	objptr, ##36476
08218     F2 26 62 FC | 	wrlong	local01, objptr
0821c     04 E4 05 F1 | 	add	objptr, #4
08220     F2 14 62 FC | 	wrlong	arg02, objptr
08224     47 00 00 FF 
08228     80 E4 85 F1 | 	sub	objptr, ##36480
0822c     14 13 02 F6 | 	mov	arg01, local02
08230     01 12 06 F1 | 	add	arg01, #1
08234     13 15 02 F6 | 	mov	arg02, local01
08238     84 F2 BF FD | 	call	#_compile_immediate
0823c     FD 2A 0A F6 | 	mov	local03, result1 wz
08240                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
08240                 | ' ucompiledline(0)=alinemajor
08240                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
08240                 | ' 
08240                 | ' ' cont: 
08240                 | ' ' 0 - this is the first part of the line that will continue
08240                 | ' ' 1 - this is the continuation of the line
08240                 | ' ' 2 - this is the last continued line
08240                 | ' ' 3 - this is the one and only part
08240                 | ' 
08240                 | ' err=compile_immediate(cont+1,alinemajor) 
08240                 | ' if err=0 andalso alinemajor>0 then
08240     74 00 90 5D |  if_ne	jmp	#LR__0745
08244     01 26 16 F2 | 	cmp	local01, #1 wc
08248     6C 00 90 CD |  if_b	jmp	#LR__0745
0824c                 | '   if cont=3 orelse cont=2 then 
0824c     03 28 0E F2 | 	cmp	local02, #3 wz
08250     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08254     60 00 90 5D |  if_ne	jmp	#LR__0744
08258                 | '     if alinemajor >lastline then 
08258     4A 00 00 FF 
0825c     8C E4 05 F1 | 	add	objptr, ##38028
08260     F2 14 02 FB | 	rdlong	arg02, objptr
08264     4A 00 00 FF 
08268     8C E4 85 F1 | 	sub	objptr, ##38028
0826c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08270     0C 00 90 ED |  if_be	jmp	#LR__0740
08274     13 13 02 F6 | 	mov	arg01, local01
08278     7C F1 BF FD | 	call	#_add_line_at_end
0827c     38 00 90 FD | 	jmp	#LR__0743
08280                 | LR__0740
08280     13 13 02 F6 | 	mov	arg01, local01
08284     40 EB BF FD | 	call	#_deleteline
08288                 | '       deleteline(alinemajor)  
08288                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
08288     4A 00 00 FF 
0828c     8C E4 05 F1 | 	add	objptr, ##38028
08290     F2 14 02 FB | 	rdlong	arg02, objptr
08294     4A 00 00 FF 
08298     8C E4 85 F1 | 	sub	objptr, ##38028
0829c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
082a0     0C 00 90 ED |  if_be	jmp	#LR__0741
082a4     13 13 02 F6 | 	mov	arg01, local01
082a8     4C F1 BF FD | 	call	#_add_line_at_end
082ac     08 00 90 FD | 	jmp	#LR__0742
082b0                 | LR__0741
082b0     13 13 02 F6 | 	mov	arg01, local01
082b4     24 EF BF FD | 	call	#_insertline
082b8                 | LR__0742
082b8                 | LR__0743
082b8                 | LR__0744
082b8                 | LR__0745
082b8                 | ' return err
082b8     15 FB 01 F6 | 	mov	result1, local03
082bc     A7 F0 03 F6 | 	mov	ptra, fp
082c0     B2 00 A0 FD | 	call	#popregs_
082c4                 | _compile_ret
082c4     2D 00 64 FD | 	ret
082c8                 | 
082c8                 | ' 
082c8                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
082c8                 | ' 
082c8                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
082c8                 | _compile_assign
082c8     03 4A 05 F6 | 	mov	COUNT_, #3
082cc     A8 00 A0 FD | 	call	#pushregs_
082d0     09 27 02 F6 | 	mov	local01, arg01
082d4     0B 29 02 F6 | 	mov	local02, arg03
082d8     47 00 00 FF 
082dc     7C E4 05 F1 | 	add	objptr, ##36476
082e0     F2 26 62 FC | 	wrlong	local01, objptr
082e4     04 E4 05 F1 | 	add	objptr, #4
082e8     F2 14 62 FC | 	wrlong	arg02, objptr
082ec     47 00 00 FF 
082f0     80 E4 85 F1 | 	sub	objptr, ##36480
082f4     14 13 02 F6 | 	mov	arg01, local02
082f8     01 12 06 F1 | 	add	arg01, #1
082fc     54 FB BF FD | 	call	#_compile_immediate_assign
08300     FD 2A 02 F6 | 	mov	local03, result1
08304                 | ' 
08304                 | ' ucompiledline(0)=alinemajor
08304                 | ' ucompiledline(1)=alineminor
08304                 | ' 
08304                 | ' err=compile_immediate_assign(cont+1) 
08304                 | ' if alinemajor>0 then
08304     01 26 16 F2 | 	cmp	local01, #1 wc
08308     6C 00 90 CD |  if_b	jmp	#LR__0755
0830c                 | '   if cont=3 orelse cont=2 then 
0830c     03 28 0E F2 | 	cmp	local02, #3 wz
08310     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08314     60 00 90 5D |  if_ne	jmp	#LR__0754
08318                 | '     if alinemajor >lastline then 
08318     4A 00 00 FF 
0831c     8C E4 05 F1 | 	add	objptr, ##38028
08320     F2 14 02 FB | 	rdlong	arg02, objptr
08324     4A 00 00 FF 
08328     8C E4 85 F1 | 	sub	objptr, ##38028
0832c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08330     0C 00 90 ED |  if_be	jmp	#LR__0750
08334     13 13 02 F6 | 	mov	arg01, local01
08338     BC F0 BF FD | 	call	#_add_line_at_end
0833c     38 00 90 FD | 	jmp	#LR__0753
08340                 | LR__0750
08340     13 13 02 F6 | 	mov	arg01, local01
08344     80 EA BF FD | 	call	#_deleteline
08348                 | '       deleteline(alinemajor)  
08348                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
08348     4A 00 00 FF 
0834c     8C E4 05 F1 | 	add	objptr, ##38028
08350     F2 14 02 FB | 	rdlong	arg02, objptr
08354     4A 00 00 FF 
08358     8C E4 85 F1 | 	sub	objptr, ##38028
0835c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08360     0C 00 90 ED |  if_be	jmp	#LR__0751
08364     13 13 02 F6 | 	mov	arg01, local01
08368     8C F0 BF FD | 	call	#_add_line_at_end
0836c     08 00 90 FD | 	jmp	#LR__0752
08370                 | LR__0751
08370     13 13 02 F6 | 	mov	arg01, local01
08374     64 EE BF FD | 	call	#_insertline
08378                 | LR__0752
08378                 | LR__0753
08378                 | LR__0754
08378                 | LR__0755
08378                 | ' return err
08378     15 FB 01 F6 | 	mov	result1, local03
0837c     A7 F0 03 F6 | 	mov	ptra, fp
08380     B2 00 A0 FD | 	call	#popregs_
08384                 | _compile_assign_ret
08384     2D 00 64 FD | 	ret
08388                 | 
08388                 | ' 
08388                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
08388                 | ' 
08388                 | ' function compile_fun_2p() as ulong
08388                 | _compile_fun_2p
08388     01 4A 05 F6 | 	mov	COUNT_, #1
0838c     A8 00 A0 FD | 	call	#pushregs_
08390     30 37 B0 FD | 	call	#_expr
08394     FD 26 02 F6 | 	mov	local01, result1
08398                 | ' err=expr() : if err>0 then return err
08398     01 26 16 F2 | 	cmp	local01, #1 wc
0839c     13 FB 01 36 |  if_ae	mov	result1, local01
083a0     60 00 90 3D |  if_ae	jmp	#LR__0760
083a4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
083a4     37 00 00 FF 
083a8     44 E4 05 F1 | 	add	objptr, ##28228
083ac     F2 26 02 FB | 	rdlong	local01, objptr
083b0     03 26 66 F0 | 	shl	local01, #3
083b4     02 00 00 FF 
083b8     38 E4 85 F1 | 	sub	objptr, ##1080
083bc     F2 26 02 F1 | 	add	local01, objptr
083c0     04 26 06 F1 | 	add	local01, #4
083c4     13 27 02 FB | 	rdlong	local01, local01
083c8     11 26 0E F2 | 	cmp	local01, #17 wz
083cc     35 00 00 FF 
083d0     0C E4 85 F1 | 	sub	objptr, ##27148
083d4     15 FA 05 56 |  if_ne	mov	result1, #21
083d8     28 00 90 5D |  if_ne	jmp	#LR__0760
083dc     37 00 00 FF 
083e0     44 E4 05 F1 | 	add	objptr, ##28228
083e4     F2 26 02 FB | 	rdlong	local01, objptr
083e8     01 26 06 F1 | 	add	local01, #1
083ec     F2 26 62 FC | 	wrlong	local01, objptr
083f0     37 00 00 FF 
083f4     44 E4 85 F1 | 	sub	objptr, ##28228
083f8     C8 36 B0 FD | 	call	#_expr
083fc                 | ' err=expr() : if err>0 then return err
083fc     01 FA 15 F2 | 	cmp	result1, #1 wc
08400                 | ' return 0
08400     00 FA 05 C6 |  if_b	mov	result1, #0
08404                 | LR__0760
08404     A7 F0 03 F6 | 	mov	ptra, fp
08408     B2 00 A0 FD | 	call	#popregs_
0840c                 | _compile_fun_2p_ret
0840c     2D 00 64 FD | 	ret
08410                 | 
08410                 | ' 
08410                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08410                 | ' 
08410                 | ' function compile_fun_3p() as ulong
08410                 | _compile_fun_3p
08410     01 4A 05 F6 | 	mov	COUNT_, #1
08414     A8 00 A0 FD | 	call	#pushregs_
08418     A8 36 B0 FD | 	call	#_expr
0841c     FD 26 02 F6 | 	mov	local01, result1
08420                 | ' err=expr() : if err>0 then return err
08420     01 26 16 F2 | 	cmp	local01, #1 wc
08424     13 FB 01 36 |  if_ae	mov	result1, local01
08428     C8 00 90 3D |  if_ae	jmp	#LR__0770
0842c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0842c     37 00 00 FF 
08430     44 E4 05 F1 | 	add	objptr, ##28228
08434     F2 26 02 FB | 	rdlong	local01, objptr
08438     03 26 66 F0 | 	shl	local01, #3
0843c     02 00 00 FF 
08440     38 E4 85 F1 | 	sub	objptr, ##1080
08444     F2 26 02 F1 | 	add	local01, objptr
08448     04 26 06 F1 | 	add	local01, #4
0844c     13 27 02 FB | 	rdlong	local01, local01
08450     11 26 0E F2 | 	cmp	local01, #17 wz
08454     35 00 00 FF 
08458     0C E4 85 F1 | 	sub	objptr, ##27148
0845c     15 FA 05 56 |  if_ne	mov	result1, #21
08460     90 00 90 5D |  if_ne	jmp	#LR__0770
08464     37 00 00 FF 
08468     44 E4 05 F1 | 	add	objptr, ##28228
0846c     F2 26 02 FB | 	rdlong	local01, objptr
08470     01 26 06 F1 | 	add	local01, #1
08474     F2 26 62 FC | 	wrlong	local01, objptr
08478     37 00 00 FF 
0847c     44 E4 85 F1 | 	sub	objptr, ##28228
08480     40 36 B0 FD | 	call	#_expr
08484     FD 26 02 F6 | 	mov	local01, result1
08488                 | ' err=expr() : if err>0 then return err
08488     01 26 16 F2 | 	cmp	local01, #1 wc
0848c     13 FB 01 36 |  if_ae	mov	result1, local01
08490     60 00 90 3D |  if_ae	jmp	#LR__0770
08494                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08494     37 00 00 FF 
08498     44 E4 05 F1 | 	add	objptr, ##28228
0849c     F2 26 02 FB | 	rdlong	local01, objptr
084a0     03 26 66 F0 | 	shl	local01, #3
084a4     02 00 00 FF 
084a8     38 E4 85 F1 | 	sub	objptr, ##1080
084ac     F2 26 02 F1 | 	add	local01, objptr
084b0     04 26 06 F1 | 	add	local01, #4
084b4     13 27 02 FB | 	rdlong	local01, local01
084b8     11 26 0E F2 | 	cmp	local01, #17 wz
084bc     35 00 00 FF 
084c0     0C E4 85 F1 | 	sub	objptr, ##27148
084c4     15 FA 05 56 |  if_ne	mov	result1, #21
084c8     28 00 90 5D |  if_ne	jmp	#LR__0770
084cc     37 00 00 FF 
084d0     44 E4 05 F1 | 	add	objptr, ##28228
084d4     F2 26 02 FB | 	rdlong	local01, objptr
084d8     01 26 06 F1 | 	add	local01, #1
084dc     F2 26 62 FC | 	wrlong	local01, objptr
084e0     37 00 00 FF 
084e4     44 E4 85 F1 | 	sub	objptr, ##28228
084e8     D8 35 B0 FD | 	call	#_expr
084ec                 | ' err=expr() : if err>0 then return err
084ec     01 FA 15 F2 | 	cmp	result1, #1 wc
084f0                 | ' return 0
084f0     00 FA 05 C6 |  if_b	mov	result1, #0
084f4                 | LR__0770
084f4     A7 F0 03 F6 | 	mov	ptra, fp
084f8     B2 00 A0 FD | 	call	#popregs_
084fc                 | _compile_fun_3p_ret
084fc     2D 00 64 FD | 	ret
08500                 | 
08500                 | ' 
08500                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08500                 | ' 
08500                 | ' function compile_fun_4p() as ulong
08500                 | _compile_fun_4p
08500     01 4A 05 F6 | 	mov	COUNT_, #1
08504     A8 00 A0 FD | 	call	#pushregs_
08508     B8 35 B0 FD | 	call	#_expr
0850c     FD 26 02 F6 | 	mov	local01, result1
08510                 | ' err=expr() : if err>0 then return err
08510     01 26 16 F2 | 	cmp	local01, #1 wc
08514     13 FB 01 36 |  if_ae	mov	result1, local01
08518     30 01 90 3D |  if_ae	jmp	#LR__0780
0851c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
0851c     37 00 00 FF 
08520     44 E4 05 F1 | 	add	objptr, ##28228
08524     F2 26 02 FB | 	rdlong	local01, objptr
08528     03 26 66 F0 | 	shl	local01, #3
0852c     02 00 00 FF 
08530     38 E4 85 F1 | 	sub	objptr, ##1080
08534     F2 26 02 F1 | 	add	local01, objptr
08538     04 26 06 F1 | 	add	local01, #4
0853c     13 27 02 FB | 	rdlong	local01, local01
08540     11 26 0E F2 | 	cmp	local01, #17 wz
08544     35 00 00 FF 
08548     0C E4 85 F1 | 	sub	objptr, ##27148
0854c     15 FA 05 56 |  if_ne	mov	result1, #21
08550     F8 00 90 5D |  if_ne	jmp	#LR__0780
08554     37 00 00 FF 
08558     44 E4 05 F1 | 	add	objptr, ##28228
0855c     F2 26 02 FB | 	rdlong	local01, objptr
08560     01 26 06 F1 | 	add	local01, #1
08564     F2 26 62 FC | 	wrlong	local01, objptr
08568     37 00 00 FF 
0856c     44 E4 85 F1 | 	sub	objptr, ##28228
08570     50 35 B0 FD | 	call	#_expr
08574     FD 26 02 F6 | 	mov	local01, result1
08578                 | ' err=expr() : if err>0 then return err
08578     01 26 16 F2 | 	cmp	local01, #1 wc
0857c     13 FB 01 36 |  if_ae	mov	result1, local01
08580     C8 00 90 3D |  if_ae	jmp	#LR__0780
08584                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08584     37 00 00 FF 
08588     44 E4 05 F1 | 	add	objptr, ##28228
0858c     F2 26 02 FB | 	rdlong	local01, objptr
08590     03 26 66 F0 | 	shl	local01, #3
08594     02 00 00 FF 
08598     38 E4 85 F1 | 	sub	objptr, ##1080
0859c     F2 26 02 F1 | 	add	local01, objptr
085a0     04 26 06 F1 | 	add	local01, #4
085a4     13 27 02 FB | 	rdlong	local01, local01
085a8     11 26 0E F2 | 	cmp	local01, #17 wz
085ac     35 00 00 FF 
085b0     0C E4 85 F1 | 	sub	objptr, ##27148
085b4     15 FA 05 56 |  if_ne	mov	result1, #21
085b8     90 00 90 5D |  if_ne	jmp	#LR__0780
085bc     37 00 00 FF 
085c0     44 E4 05 F1 | 	add	objptr, ##28228
085c4     F2 26 02 FB | 	rdlong	local01, objptr
085c8     01 26 06 F1 | 	add	local01, #1
085cc     F2 26 62 FC | 	wrlong	local01, objptr
085d0     37 00 00 FF 
085d4     44 E4 85 F1 | 	sub	objptr, ##28228
085d8     E8 34 B0 FD | 	call	#_expr
085dc     FD 26 02 F6 | 	mov	local01, result1
085e0                 | ' err=expr() : if err>0 then return err
085e0     01 26 16 F2 | 	cmp	local01, #1 wc
085e4     13 FB 01 36 |  if_ae	mov	result1, local01
085e8     60 00 90 3D |  if_ae	jmp	#LR__0780
085ec                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
085ec     37 00 00 FF 
085f0     44 E4 05 F1 | 	add	objptr, ##28228
085f4     F2 26 02 FB | 	rdlong	local01, objptr
085f8     03 26 66 F0 | 	shl	local01, #3
085fc     02 00 00 FF 
08600     38 E4 85 F1 | 	sub	objptr, ##1080
08604     F2 26 02 F1 | 	add	local01, objptr
08608     04 26 06 F1 | 	add	local01, #4
0860c     13 27 02 FB | 	rdlong	local01, local01
08610     11 26 0E F2 | 	cmp	local01, #17 wz
08614     35 00 00 FF 
08618     0C E4 85 F1 | 	sub	objptr, ##27148
0861c     15 FA 05 56 |  if_ne	mov	result1, #21
08620     28 00 90 5D |  if_ne	jmp	#LR__0780
08624     37 00 00 FF 
08628     44 E4 05 F1 | 	add	objptr, ##28228
0862c     F2 26 02 FB | 	rdlong	local01, objptr
08630     01 26 06 F1 | 	add	local01, #1
08634     F2 26 62 FC | 	wrlong	local01, objptr
08638     37 00 00 FF 
0863c     44 E4 85 F1 | 	sub	objptr, ##28228
08640     80 34 B0 FD | 	call	#_expr
08644                 | ' err=expr() : if err>0 then return err
08644     01 FA 15 F2 | 	cmp	result1, #1 wc
08648                 | ' return 0
08648     00 FA 05 C6 |  if_b	mov	result1, #0
0864c                 | LR__0780
0864c     A7 F0 03 F6 | 	mov	ptra, fp
08650     B2 00 A0 FD | 	call	#popregs_
08654                 | _compile_fun_4p_ret
08654     2D 00 64 FD | 	ret
08658                 | 
08658                 | ' 
08658                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08658                 | ' 
08658                 | ' function compile_fun_varp() as ulong,ulong 
08658                 | _compile_fun_varp
08658     03 4A 05 F6 | 	mov	COUNT_, #3
0865c     A8 00 A0 FD | 	call	#pushregs_
08660     00 26 06 F6 | 	mov	local01, #0
08664                 | ' 
08664                 | ' i=0 : err=0
08664                 | ' if lparts(ct).token<>token_end then
08664     37 00 00 FF 
08668     44 E4 05 F1 | 	add	objptr, ##28228
0866c     F2 28 02 FB | 	rdlong	local02, objptr
08670     03 28 66 F0 | 	shl	local02, #3
08674     02 00 00 FF 
08678     38 E4 85 F1 | 	sub	objptr, ##1080
0867c     F2 28 02 F1 | 	add	local02, objptr
08680     04 28 06 F1 | 	add	local02, #4
08684     14 29 02 FB | 	rdlong	local02, local02
08688     FE 29 0E F2 | 	cmp	local02, #510 wz
0868c     35 00 00 FF 
08690     0C E4 85 F1 | 	sub	objptr, ##27148
08694     88 00 90 AD |  if_e	jmp	#LR__0791
08698                 | '   do
08698                 | LR__0790
08698     28 34 B0 FD | 	call	#_expr
0869c     01 26 06 F1 | 	add	local01, #1
086a0                 | '     expr()
086a0                 | '     i+=1
086a0                 | '     if lparts(ct).token=token_comma then ct+=1
086a0     37 00 00 FF 
086a4     44 E4 05 F1 | 	add	objptr, ##28228
086a8     F2 28 02 FB | 	rdlong	local02, objptr
086ac     03 28 66 F0 | 	shl	local02, #3
086b0     02 00 00 FF 
086b4     38 E4 85 F1 | 	sub	objptr, ##1080
086b8     F2 28 02 F1 | 	add	local02, objptr
086bc     04 28 06 F1 | 	add	local02, #4
086c0     14 29 02 FB | 	rdlong	local02, local02
086c4     11 28 0E F2 | 	cmp	local02, #17 wz
086c8     35 00 00 FF 
086cc     0C E4 85 F1 | 	sub	objptr, ##27148
086d0     37 00 00 AF 
086d4     44 E4 05 A1 |  if_e	add	objptr, ##28228
086d8     F2 2A 02 AB |  if_e	rdlong	local03, objptr
086dc     01 2A 06 A1 |  if_e	add	local03, #1
086e0     F2 2A 62 AC |  if_e	wrlong	local03, objptr
086e4     37 00 00 AF 
086e8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
086ec                 | '     if lparts(ct).token=token_end then exit loop
086ec     37 00 00 FF 
086f0     44 E4 05 F1 | 	add	objptr, ##28228
086f4     F2 28 02 FB | 	rdlong	local02, objptr
086f8     03 28 66 F0 | 	shl	local02, #3
086fc     02 00 00 FF 
08700     38 E4 85 F1 | 	sub	objptr, ##1080
08704     F2 28 02 F1 | 	add	local02, objptr
08708     04 28 06 F1 | 	add	local02, #4
0870c     14 29 02 FB | 	rdlong	local02, local02
08710     FE 29 0E F2 | 	cmp	local02, #510 wz
08714     35 00 00 FF 
08718     0C E4 85 F1 | 	sub	objptr, ##27148
0871c     78 FF 9F 5D |  if_ne	jmp	#LR__0790
08720                 | LR__0791
08720                 | ' return i,err
08720     13 FB 01 F6 | 	mov	result1, local01
08724     00 FC 05 F6 | 	mov	result2, #0
08728     A7 F0 03 F6 | 	mov	ptra, fp
0872c     B2 00 A0 FD | 	call	#popregs_
08730                 | _compile_fun_varp_ret
08730     2D 00 64 FD | 	ret
08734                 | 
08734                 | ' 
08734                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08734                 | ' 
08734                 | ' function compile_read() as ulong,ulong 
08734                 | _compile_read
08734     04 4A 05 F6 | 	mov	COUNT_, #4
08738     A8 00 A0 FD | 	call	#pushregs_
0873c     00 26 06 F6 | 	mov	local01, #0
08740                 | ' 
08740                 | ' i=0 : err=0
08740                 | ' if lparts(ct).token<>token_end then
08740     37 00 00 FF 
08744     44 E4 05 F1 | 	add	objptr, ##28228
08748     F2 28 02 FB | 	rdlong	local02, objptr
0874c     03 28 66 F0 | 	shl	local02, #3
08750     02 00 00 FF 
08754     38 E4 85 F1 | 	sub	objptr, ##1080
08758     F2 28 02 F1 | 	add	local02, objptr
0875c     04 28 06 F1 | 	add	local02, #4
08760     14 29 02 FB | 	rdlong	local02, local02
08764     FE 29 0E F2 | 	cmp	local02, #510 wz
08768     35 00 00 FF 
0876c     0C E4 85 F1 | 	sub	objptr, ##27148
08770     98 00 90 AD |  if_e	jmp	#LR__0801
08774                 | '   do
08774                 | LR__0800
08774     B8 2F B0 FD | 	call	#_getaddr
08778     FD 2A 02 F6 | 	mov	local03, result1
0877c     37 00 00 FF 
08780     44 E4 05 F1 | 	add	objptr, ##28228
08784     F2 28 02 FB | 	rdlong	local02, objptr
08788     01 28 06 F1 | 	add	local02, #1
0878c     F2 28 62 FC | 	wrlong	local02, objptr
08790     01 26 06 F1 | 	add	local01, #1
08794                 | '     err=getaddr() :ct+=1
08794                 | '     i+=1 
08794                 | '     if lparts(ct).token=token_comma then ct+=1 
08794     03 28 66 F0 | 	shl	local02, #3
08798     02 00 00 FF 
0879c     38 E4 85 F1 | 	sub	objptr, ##1080
087a0     F2 28 02 F1 | 	add	local02, objptr
087a4     04 28 06 F1 | 	add	local02, #4
087a8     14 29 02 FB | 	rdlong	local02, local02
087ac     11 28 0E F2 | 	cmp	local02, #17 wz
087b0     35 00 00 FF 
087b4     0C E4 85 F1 | 	sub	objptr, ##27148
087b8     37 00 00 AF 
087bc     44 E4 05 A1 |  if_e	add	objptr, ##28228
087c0     F2 2C 02 AB |  if_e	rdlong	local04, objptr
087c4     01 2C 06 A1 |  if_e	add	local04, #1
087c8     F2 2C 62 AC |  if_e	wrlong	local04, objptr
087cc     37 00 00 AF 
087d0     44 E4 85 A1 |  if_e	sub	objptr, ##28228
087d4                 | '     if lparts(ct).token=token_end then exit loop
087d4     37 00 00 FF 
087d8     44 E4 05 F1 | 	add	objptr, ##28228
087dc     F2 28 02 FB | 	rdlong	local02, objptr
087e0     03 28 66 F0 | 	shl	local02, #3
087e4     02 00 00 FF 
087e8     38 E4 85 F1 | 	sub	objptr, ##1080
087ec     F2 28 02 F1 | 	add	local02, objptr
087f0     04 28 06 F1 | 	add	local02, #4
087f4     14 29 02 FB | 	rdlong	local02, local02
087f8     FE 29 0E F2 | 	cmp	local02, #510 wz
087fc     35 00 00 FF 
08800     0C E4 85 F1 | 	sub	objptr, ##27148
08804     08 00 90 AD |  if_e	jmp	#LR__0802
08808     68 FF 9F FD | 	jmp	#LR__0800
0880c                 | LR__0801
0880c     36 2A 06 F6 | 	mov	local03, #54
08810                 | LR__0802
08810                 | ' return i,err
08810     13 FB 01 F6 | 	mov	result1, local01
08814     15 FD 01 F6 | 	mov	result2, local03
08818     A7 F0 03 F6 | 	mov	ptra, fp
0881c     B2 00 A0 FD | 	call	#popregs_
08820                 | _compile_read_ret
08820     2D 00 64 FD | 	ret
08824                 | 
08824                 | ' 
08824                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08824                 | ' 
08824                 | ' function compile_input() as ulong,ulong 
08824                 | _compile_input
08824     0F 4A 05 F6 | 	mov	COUNT_, #15
08828     A8 00 A0 FD | 	call	#pushregs_
0882c                 | ' 
0882c                 | ' if lparts(ct).token=token_string then
0882c     37 00 00 FF 
08830     44 E4 05 F1 | 	add	objptr, ##28228
08834     F2 16 02 FB | 	rdlong	arg03, objptr
08838     03 16 66 F0 | 	shl	arg03, #3
0883c     02 00 00 FF 
08840     38 E4 85 F1 | 	sub	objptr, ##1080
08844     F2 16 02 F1 | 	add	arg03, objptr
08848     04 16 06 F1 | 	add	arg03, #4
0884c     0B FD 01 FB | 	rdlong	result2, arg03
08850     01 00 00 FF 
08854     03 FC 0D F2 | 	cmp	result2, ##515 wz
08858     35 00 00 FF 
0885c     0C E4 85 F1 | 	sub	objptr, ##27148
08860     38 06 90 5D |  if_ne	jmp	#LR__0817
08864     37 00 00 FF 
08868     44 E4 05 F1 | 	add	objptr, ##28228
0886c     F2 14 02 FB | 	rdlong	arg02, objptr
08870     03 14 66 F0 | 	shl	arg02, #3
08874     02 00 00 FF 
08878     38 E4 85 F1 | 	sub	objptr, ##1080
0887c     F2 14 02 F1 | 	add	arg02, objptr
08880     0A 13 02 FB | 	rdlong	arg01, arg02
08884     35 00 00 FF 
08888     0C E4 85 F1 | 	sub	objptr, ##27148
0888c     09 2D 02 F6 | 	mov	local04, arg01
08890     97 06 48 FB | 	callpa	#(@LR__0811-@LR__0810)>>2,fcache_load_ptr_
08894                 | LR__0810
08894     16 FB C9 FA | 	rdbyte	result1, local04 wz
08898     01 2C 06 51 |  if_ne	add	local04, #1
0889c     F4 FF 9F 5D |  if_ne	jmp	#LR__0810
088a0                 | LR__0811
088a0     09 2D 82 F1 | 	sub	local04, arg01
088a4     16 FB 01 F6 | 	mov	result1, local04
088a8     52 00 00 FF 
088ac     F0 E4 05 F1 | 	add	objptr, ##42224
088b0     F2 FA 61 FC | 	wrlong	result1, objptr
088b4     58 E4 85 F1 | 	sub	objptr, #88
088b8     F2 12 02 FB | 	rdlong	arg01, objptr
088bc     FD 12 82 F1 | 	sub	arg01, result1
088c0     04 12 86 F1 | 	sub	arg01, #4
088c4     03 12 26 F5 | 	andn	arg01, #3
088c8     F2 12 62 FC | 	wrlong	arg01, objptr
088cc     58 E4 05 F1 | 	add	objptr, #88
088d0     F2 14 02 FB | 	rdlong	arg02, objptr
088d4     52 00 00 FF 
088d8     F0 E4 85 F1 | 	sub	objptr, ##42224
088dc     EC 9D B1 FD | 	call	#_pslpoke
088e0                 | '   pslpoke memtop,l
088e0                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
088e0     01 2E 06 F6 | 	mov	local05, #1
088e4     52 00 00 FF 
088e8     F0 E4 05 F1 | 	add	objptr, ##42224
088ec     F2 30 02 FB | 	rdlong	local06, objptr
088f0     52 00 00 FF 
088f4     F0 E4 85 F1 | 	sub	objptr, ##42224
088f8     01 30 06 F1 | 	add	local06, #1
088fc                 | LR__0812
088fc     18 2F 52 F2 | 	cmps	local05, local06 wc
08900     5C 00 90 3D |  if_ae	jmp	#LR__0813
08904     52 00 00 FF 
08908     98 E4 05 F1 | 	add	objptr, ##42136
0890c     F2 32 02 FB | 	rdlong	local07, objptr
08910     03 32 06 F1 | 	add	local07, #3
08914     17 33 02 F1 | 	add	local07, local05
08918     1B 00 00 FF 
0891c     54 E4 85 F1 | 	sub	objptr, ##13908
08920     F2 14 02 FB | 	rdlong	arg02, objptr
08924     03 14 66 F0 | 	shl	arg02, #3
08928     02 00 00 FF 
0892c     38 E4 85 F1 | 	sub	objptr, ##1080
08930     F2 14 02 F1 | 	add	arg02, objptr
08934     0A 13 02 FB | 	rdlong	arg01, arg02
08938     17 15 02 F6 | 	mov	arg02, local05
0893c     01 16 06 F6 | 	mov	arg03, #1
08940     35 00 00 FF 
08944     0C E4 85 F1 | 	sub	objptr, ##27148
08948     60 F7 B1 FD | 	call	#__system__Mid_S
0894c     FD 14 C2 FA | 	rdbyte	arg02, result1
08950     19 13 02 F6 | 	mov	arg01, local07
08954     04 9E B1 FD | 	call	#_pspoke
08958     01 2E 06 F1 | 	add	local05, #1
0895c     9C FF 9F FD | 	jmp	#LR__0812
08960                 | LR__0813
08960     52 00 00 FF 
08964     98 E4 05 F1 | 	add	objptr, ##42136
08968     F2 26 02 FB | 	rdlong	local01, objptr
0896c     2B 2A 06 F6 | 	mov	local03, #43
08970     13 35 02 F6 | 	mov	local08, local01
08974     14 33 02 F6 | 	mov	local07, local02
08978     15 37 02 F6 | 	mov	local09, local03
0897c     08 00 00 FF 
08980     1C E4 85 F1 | 	sub	objptr, ##4124
08984     F2 30 02 FB | 	rdlong	local06, objptr
08988     18 2F 02 F6 | 	mov	local05, local06
0898c     01 2E 66 F0 | 	shl	local05, #1
08990     18 2F 02 F1 | 	add	local05, local06
08994     02 2E 66 F0 | 	shl	local05, #2
08998     03 00 00 FF 
0899c     00 E4 85 F1 | 	sub	objptr, ##1536
089a0     F2 2E 02 F1 | 	add	local05, objptr
089a4     17 35 62 FC | 	wrlong	local08, local05
089a8     03 00 00 FF 
089ac     00 E4 05 F1 | 	add	objptr, ##1536
089b0     F2 34 02 FB | 	rdlong	local08, objptr
089b4     1A 31 02 F6 | 	mov	local06, local08
089b8     01 30 66 F0 | 	shl	local06, #1
089bc     1A 31 02 F1 | 	add	local06, local08
089c0     02 30 66 F0 | 	shl	local06, #2
089c4     03 00 00 FF 
089c8     00 E4 85 F1 | 	sub	objptr, ##1536
089cc     F2 30 02 F1 | 	add	local06, objptr
089d0     04 30 06 F1 | 	add	local06, #4
089d4     18 33 62 FC | 	wrlong	local07, local06
089d8     03 00 00 FF 
089dc     00 E4 05 F1 | 	add	objptr, ##1536
089e0     F2 34 02 FB | 	rdlong	local08, objptr
089e4     1A 33 02 F6 | 	mov	local07, local08
089e8     01 32 66 F0 | 	shl	local07, #1
089ec     1A 33 02 F1 | 	add	local07, local08
089f0     02 32 66 F0 | 	shl	local07, #2
089f4     03 00 00 FF 
089f8     00 E4 85 F1 | 	sub	objptr, ##1536
089fc     F2 32 02 F1 | 	add	local07, objptr
08a00     08 32 06 F1 | 	add	local07, #8
08a04     19 37 62 FC | 	wrlong	local09, local07
08a08     03 00 00 FF 
08a0c     00 E4 05 F1 | 	add	objptr, ##1536
08a10     F2 34 02 FB | 	rdlong	local08, objptr
08a14     01 34 06 F1 | 	add	local08, #1
08a18     F2 34 62 FC | 	wrlong	local08, objptr
08a1c     13 00 00 FF 
08a20     38 E4 85 F1 | 	sub	objptr, ##9784
08a24     F2 34 02 FB | 	rdlong	local08, objptr
08a28     01 34 06 F1 | 	add	local08, #1
08a2c     F2 34 62 FC | 	wrlong	local08, objptr
08a30                 | '   t1.result.uresult=memtop
08a30                 | '   t1.result_type=result_string2  
08a30                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08a30                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08a30     03 34 66 F0 | 	shl	local08, #3
08a34     02 00 00 FF 
08a38     38 E4 85 F1 | 	sub	objptr, ##1080
08a3c     F2 34 02 F1 | 	add	local08, objptr
08a40     04 34 06 F1 | 	add	local08, #4
08a44     1A 35 02 FB | 	rdlong	local08, local08
08a48     11 34 0E F2 | 	cmp	local08, #17 wz
08a4c     35 00 00 FF 
08a50     0C E4 85 F1 | 	sub	objptr, ##27148
08a54     60 01 90 5D |  if_ne	jmp	#LR__0814
08a58     21 2A 06 F6 | 	mov	local03, #33
08a5c     13 35 02 F6 | 	mov	local08, local01
08a60     14 33 02 F6 | 	mov	local07, local02
08a64     15 39 02 F6 | 	mov	local10, local03
08a68     4A 00 00 FF 
08a6c     7C E4 05 F1 | 	add	objptr, ##38012
08a70     F2 3A 02 FB | 	rdlong	local11, objptr
08a74     1D 3D 02 F6 | 	mov	local12, local11
08a78     01 3C 66 F0 | 	shl	local12, #1
08a7c     1D 3D 02 F1 | 	add	local12, local11
08a80     02 3C 66 F0 | 	shl	local12, #2
08a84     03 00 00 FF 
08a88     00 E4 85 F1 | 	sub	objptr, ##1536
08a8c     F2 3C 02 F1 | 	add	local12, objptr
08a90     1E 35 62 FC | 	wrlong	local08, local12
08a94     03 00 00 FF 
08a98     00 E4 05 F1 | 	add	objptr, ##1536
08a9c     F2 3E 02 FB | 	rdlong	local13, objptr
08aa0     1F 35 02 F6 | 	mov	local08, local13
08aa4     01 34 66 F0 | 	shl	local08, #1
08aa8     1F 35 02 F1 | 	add	local08, local13
08aac     02 34 66 F0 | 	shl	local08, #2
08ab0     03 00 00 FF 
08ab4     00 E4 85 F1 | 	sub	objptr, ##1536
08ab8     F2 34 02 F1 | 	add	local08, objptr
08abc     04 34 06 F1 | 	add	local08, #4
08ac0     1A 33 62 FC | 	wrlong	local07, local08
08ac4     03 00 00 FF 
08ac8     00 E4 05 F1 | 	add	objptr, ##1536
08acc     F2 34 02 FB | 	rdlong	local08, objptr
08ad0     1A 41 02 F6 | 	mov	local14, local08
08ad4     01 40 66 F0 | 	shl	local14, #1
08ad8     1A 41 02 F1 | 	add	local14, local08
08adc     02 40 66 F0 | 	shl	local14, #2
08ae0     03 00 00 FF 
08ae4     00 E4 85 F1 | 	sub	objptr, ##1536
08ae8     F2 40 02 F1 | 	add	local14, objptr
08aec     08 40 06 F1 | 	add	local14, #8
08af0     20 39 62 FC | 	wrlong	local10, local14
08af4     03 00 00 FF 
08af8     00 E4 05 F1 | 	add	objptr, ##1536
08afc     F2 34 02 FB | 	rdlong	local08, objptr
08b00     01 34 06 F1 | 	add	local08, #1
08b04     F2 34 62 FC | 	wrlong	local08, objptr
08b08     44 2A 06 F6 | 	mov	local03, #68
08b0c     13 35 02 F6 | 	mov	local08, local01
08b10     14 33 02 F6 | 	mov	local07, local02
08b14     15 39 02 F6 | 	mov	local10, local03
08b18     F2 40 02 FB | 	rdlong	local14, objptr
08b1c     20 3F 02 F6 | 	mov	local13, local14
08b20     01 3E 66 F0 | 	shl	local13, #1
08b24     20 3F 02 F1 | 	add	local13, local14
08b28     02 3E 66 F0 | 	shl	local13, #2
08b2c     03 00 00 FF 
08b30     00 E4 85 F1 | 	sub	objptr, ##1536
08b34     F2 3E 02 F1 | 	add	local13, objptr
08b38     1F 35 62 FC | 	wrlong	local08, local13
08b3c     03 00 00 FF 
08b40     00 E4 05 F1 | 	add	objptr, ##1536
08b44     F2 40 02 FB | 	rdlong	local14, objptr
08b48     20 3F 02 F6 | 	mov	local13, local14
08b4c     01 3E 66 F0 | 	shl	local13, #1
08b50     20 3F 02 F1 | 	add	local13, local14
08b54     02 3E 66 F0 | 	shl	local13, #2
08b58     03 00 00 FF 
08b5c     00 E4 85 F1 | 	sub	objptr, ##1536
08b60     F2 3E 02 F1 | 	add	local13, objptr
08b64     04 3E 06 F1 | 	add	local13, #4
08b68     1F 33 62 FC | 	wrlong	local07, local13
08b6c     03 00 00 FF 
08b70     00 E4 05 F1 | 	add	objptr, ##1536
08b74     F2 3E 02 FB | 	rdlong	local13, objptr
08b78     1F 41 02 F6 | 	mov	local14, local13
08b7c     01 40 66 F0 | 	shl	local14, #1
08b80     1F 41 02 F1 | 	add	local14, local13
08b84     02 40 66 F0 | 	shl	local14, #2
08b88     03 00 00 FF 
08b8c     00 E4 85 F1 | 	sub	objptr, ##1536
08b90     F2 40 02 F1 | 	add	local14, objptr
08b94     08 40 06 F1 | 	add	local14, #8
08b98     20 39 62 FC | 	wrlong	local10, local14
08b9c     03 00 00 FF 
08ba0     00 E4 05 F1 | 	add	objptr, ##1536
08ba4     F2 34 02 FB | 	rdlong	local08, objptr
08ba8     01 34 06 F1 | 	add	local08, #1
08bac     F2 34 62 FC | 	wrlong	local08, objptr
08bb0     4A 00 00 FF 
08bb4     7C E4 85 F1 | 	sub	objptr, ##38012
08bb8                 | LR__0814
08bb8                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08bb8     37 00 00 FF 
08bbc     44 E4 05 F1 | 	add	objptr, ##28228
08bc0     F2 34 02 FB | 	rdlong	local08, objptr
08bc4     03 34 66 F0 | 	shl	local08, #3
08bc8     02 00 00 FF 
08bcc     38 E4 85 F1 | 	sub	objptr, ##1080
08bd0     F2 34 02 F1 | 	add	local08, objptr
08bd4     04 34 06 F1 | 	add	local08, #4
08bd8     1A 41 02 FB | 	rdlong	local14, local08
08bdc     12 40 0E F2 | 	cmp	local14, #18 wz
08be0     35 00 00 FF 
08be4     0C E4 85 F1 | 	sub	objptr, ##27148
08be8     60 01 90 5D |  if_ne	jmp	#LR__0815
08bec     22 2A 06 F6 | 	mov	local03, #34
08bf0     13 35 02 F6 | 	mov	local08, local01
08bf4     14 33 02 F6 | 	mov	local07, local02
08bf8     15 39 02 F6 | 	mov	local10, local03
08bfc     4A 00 00 FF 
08c00     7C E4 05 F1 | 	add	objptr, ##38012
08c04     F2 40 02 FB | 	rdlong	local14, objptr
08c08     20 3F 02 F6 | 	mov	local13, local14
08c0c     01 3E 66 F0 | 	shl	local13, #1
08c10     20 3F 02 F1 | 	add	local13, local14
08c14     02 3E 66 F0 | 	shl	local13, #2
08c18     03 00 00 FF 
08c1c     00 E4 85 F1 | 	sub	objptr, ##1536
08c20     F2 3E 02 F1 | 	add	local13, objptr
08c24     1F 35 62 FC | 	wrlong	local08, local13
08c28     03 00 00 FF 
08c2c     00 E4 05 F1 | 	add	objptr, ##1536
08c30     F2 40 02 FB | 	rdlong	local14, objptr
08c34     20 35 02 F6 | 	mov	local08, local14
08c38     01 34 66 F0 | 	shl	local08, #1
08c3c     20 35 02 F1 | 	add	local08, local14
08c40     02 34 66 F0 | 	shl	local08, #2
08c44     03 00 00 FF 
08c48     00 E4 85 F1 | 	sub	objptr, ##1536
08c4c     F2 34 02 F1 | 	add	local08, objptr
08c50     04 34 06 F1 | 	add	local08, #4
08c54     1A 33 62 FC | 	wrlong	local07, local08
08c58     03 00 00 FF 
08c5c     00 E4 05 F1 | 	add	objptr, ##1536
08c60     F2 34 02 FB | 	rdlong	local08, objptr
08c64     1A 41 02 F6 | 	mov	local14, local08
08c68     01 40 66 F0 | 	shl	local14, #1
08c6c     1A 41 02 F1 | 	add	local14, local08
08c70     02 40 66 F0 | 	shl	local14, #2
08c74     03 00 00 FF 
08c78     00 E4 85 F1 | 	sub	objptr, ##1536
08c7c     F2 40 02 F1 | 	add	local14, objptr
08c80     08 40 06 F1 | 	add	local14, #8
08c84     20 39 62 FC | 	wrlong	local10, local14
08c88     03 00 00 FF 
08c8c     00 E4 05 F1 | 	add	objptr, ##1536
08c90     F2 34 02 FB | 	rdlong	local08, objptr
08c94     01 34 06 F1 | 	add	local08, #1
08c98     F2 34 62 FC | 	wrlong	local08, objptr
08c9c     44 2A 06 F6 | 	mov	local03, #68
08ca0     13 35 02 F6 | 	mov	local08, local01
08ca4     14 33 02 F6 | 	mov	local07, local02
08ca8     15 39 02 F6 | 	mov	local10, local03
08cac     F2 40 02 FB | 	rdlong	local14, objptr
08cb0     20 3F 02 F6 | 	mov	local13, local14
08cb4     01 3E 66 F0 | 	shl	local13, #1
08cb8     20 3F 02 F1 | 	add	local13, local14
08cbc     02 3E 66 F0 | 	shl	local13, #2
08cc0     03 00 00 FF 
08cc4     00 E4 85 F1 | 	sub	objptr, ##1536
08cc8     F2 3E 02 F1 | 	add	local13, objptr
08ccc     1F 35 62 FC | 	wrlong	local08, local13
08cd0     03 00 00 FF 
08cd4     00 E4 05 F1 | 	add	objptr, ##1536
08cd8     F2 40 02 FB | 	rdlong	local14, objptr
08cdc     20 3F 02 F6 | 	mov	local13, local14
08ce0     01 3E 66 F0 | 	shl	local13, #1
08ce4     20 3F 02 F1 | 	add	local13, local14
08ce8     02 3E 66 F0 | 	shl	local13, #2
08cec     03 00 00 FF 
08cf0     00 E4 85 F1 | 	sub	objptr, ##1536
08cf4     F2 3E 02 F1 | 	add	local13, objptr
08cf8     04 3E 06 F1 | 	add	local13, #4
08cfc     1F 33 62 FC | 	wrlong	local07, local13
08d00     03 00 00 FF 
08d04     00 E4 05 F1 | 	add	objptr, ##1536
08d08     F2 3E 02 FB | 	rdlong	local13, objptr
08d0c     1F 41 02 F6 | 	mov	local14, local13
08d10     01 40 66 F0 | 	shl	local14, #1
08d14     1F 41 02 F1 | 	add	local14, local13
08d18     02 40 66 F0 | 	shl	local14, #2
08d1c     03 00 00 FF 
08d20     00 E4 85 F1 | 	sub	objptr, ##1536
08d24     F2 40 02 F1 | 	add	local14, objptr
08d28     08 40 06 F1 | 	add	local14, #8
08d2c     20 39 62 FC | 	wrlong	local10, local14
08d30     03 00 00 FF 
08d34     00 E4 05 F1 | 	add	objptr, ##1536
08d38     F2 34 02 FB | 	rdlong	local08, objptr
08d3c     01 34 06 F1 | 	add	local08, #1
08d40     F2 34 62 FC | 	wrlong	local08, objptr
08d44     4A 00 00 FF 
08d48     7C E4 85 F1 | 	sub	objptr, ##38012
08d4c                 | LR__0815
08d4c                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
08d4c     37 00 00 FF 
08d50     44 E4 05 F1 | 	add	objptr, ##28228
08d54     F2 34 02 FB | 	rdlong	local08, objptr
08d58     03 34 66 F0 | 	shl	local08, #3
08d5c     02 00 00 FF 
08d60     38 E4 85 F1 | 	sub	objptr, ##1080
08d64     F2 34 02 F1 | 	add	local08, objptr
08d68     04 34 06 F1 | 	add	local08, #4
08d6c     1A 41 02 FB | 	rdlong	local14, local08
08d70     12 40 0E F2 | 	cmp	local14, #18 wz
08d74     35 00 00 FF 
08d78     0C E4 85 F1 | 	sub	objptr, ##27148
08d7c     00 01 90 AD |  if_e	jmp	#LR__0816
08d80     37 00 00 FF 
08d84     44 E4 05 F1 | 	add	objptr, ##28228
08d88     F2 34 02 FB | 	rdlong	local08, objptr
08d8c     03 34 66 F0 | 	shl	local08, #3
08d90     02 00 00 FF 
08d94     38 E4 85 F1 | 	sub	objptr, ##1080
08d98     F2 34 02 F1 | 	add	local08, objptr
08d9c     04 34 06 F1 | 	add	local08, #4
08da0     1A 41 02 FB | 	rdlong	local14, local08
08da4     11 40 0E F2 | 	cmp	local14, #17 wz
08da8     35 00 00 FF 
08dac     0C E4 85 F1 | 	sub	objptr, ##27148
08db0     CC 00 90 AD |  if_e	jmp	#LR__0816
08db4     44 2A 06 F6 | 	mov	local03, #68
08db8     13 35 02 F6 | 	mov	local08, local01
08dbc     14 33 02 F6 | 	mov	local07, local02
08dc0     15 39 02 F6 | 	mov	local10, local03
08dc4     4A 00 00 FF 
08dc8     7C E4 05 F1 | 	add	objptr, ##38012
08dcc     F2 40 02 FB | 	rdlong	local14, objptr
08dd0     20 3F 02 F6 | 	mov	local13, local14
08dd4     01 3E 66 F0 | 	shl	local13, #1
08dd8     20 3F 02 F1 | 	add	local13, local14
08ddc     02 3E 66 F0 | 	shl	local13, #2
08de0     03 00 00 FF 
08de4     00 E4 85 F1 | 	sub	objptr, ##1536
08de8     F2 3E 02 F1 | 	add	local13, objptr
08dec     1F 35 62 FC | 	wrlong	local08, local13
08df0     03 00 00 FF 
08df4     00 E4 05 F1 | 	add	objptr, ##1536
08df8     F2 40 02 FB | 	rdlong	local14, objptr
08dfc     20 3F 02 F6 | 	mov	local13, local14
08e00     01 3E 66 F0 | 	shl	local13, #1
08e04     20 3F 02 F1 | 	add	local13, local14
08e08     02 3E 66 F0 | 	shl	local13, #2
08e0c     03 00 00 FF 
08e10     00 E4 85 F1 | 	sub	objptr, ##1536
08e14     F2 3E 02 F1 | 	add	local13, objptr
08e18     04 3E 06 F1 | 	add	local13, #4
08e1c     1F 33 62 FC | 	wrlong	local07, local13
08e20     03 00 00 FF 
08e24     00 E4 05 F1 | 	add	objptr, ##1536
08e28     F2 3E 02 FB | 	rdlong	local13, objptr
08e2c     1F 41 02 F6 | 	mov	local14, local13
08e30     01 40 66 F0 | 	shl	local14, #1
08e34     1F 41 02 F1 | 	add	local14, local13
08e38     02 40 66 F0 | 	shl	local14, #2
08e3c     03 00 00 FF 
08e40     00 E4 85 F1 | 	sub	objptr, ##1536
08e44     F2 40 02 F1 | 	add	local14, objptr
08e48     08 40 06 F1 | 	add	local14, #8
08e4c     20 39 62 FC | 	wrlong	local10, local14
08e50     03 00 00 FF 
08e54     00 E4 05 F1 | 	add	objptr, ##1536
08e58     F2 34 02 FB | 	rdlong	local08, objptr
08e5c     01 34 06 F1 | 	add	local08, #1
08e60     F2 34 62 FC | 	wrlong	local08, objptr
08e64     13 00 00 FF 
08e68     38 E4 85 F1 | 	sub	objptr, ##9784
08e6c     F2 34 02 FB | 	rdlong	local08, objptr
08e70     01 34 86 F1 | 	sub	local08, #1
08e74     F2 34 62 FC | 	wrlong	local08, objptr
08e78     37 00 00 FF 
08e7c     44 E4 85 F1 | 	sub	objptr, ##28228
08e80                 | LR__0816
08e80     37 00 00 FF 
08e84     44 E4 05 F1 | 	add	objptr, ##28228
08e88     F2 34 02 FB | 	rdlong	local08, objptr
08e8c     01 34 06 F1 | 	add	local08, #1
08e90     F2 34 62 FC | 	wrlong	local08, objptr
08e94     37 00 00 FF 
08e98     44 E4 85 F1 | 	sub	objptr, ##28228
08e9c                 | LR__0817
08e9c     00 2E 06 F6 | 	mov	local05, #0
08ea0                 | ' i=0 : err=0
08ea0                 | ' if lparts(ct).token<>token_end then
08ea0     37 00 00 FF 
08ea4     44 E4 05 F1 | 	add	objptr, ##28228
08ea8     F2 40 02 FB | 	rdlong	local14, objptr
08eac     03 40 66 F0 | 	shl	local14, #3
08eb0     02 00 00 FF 
08eb4     38 E4 85 F1 | 	sub	objptr, ##1080
08eb8     F2 40 02 F1 | 	add	local14, objptr
08ebc     04 40 06 F1 | 	add	local14, #4
08ec0     20 41 02 FB | 	rdlong	local14, local14
08ec4     FE 41 0E F2 | 	cmp	local14, #510 wz
08ec8     35 00 00 FF 
08ecc     0C E4 85 F1 | 	sub	objptr, ##27148
08ed0     98 00 90 AD |  if_e	jmp	#LR__0819
08ed4                 | '   do
08ed4                 | LR__0818
08ed4     58 28 B0 FD | 	call	#_getaddr
08ed8     FD 42 02 F6 | 	mov	local15, result1
08edc     37 00 00 FF 
08ee0     44 E4 05 F1 | 	add	objptr, ##28228
08ee4     F2 40 02 FB | 	rdlong	local14, objptr
08ee8     01 40 06 F1 | 	add	local14, #1
08eec     F2 40 62 FC | 	wrlong	local14, objptr
08ef0     01 2E 06 F1 | 	add	local05, #1
08ef4                 | '     err=getaddr() :ct+=1
08ef4                 | '     i+=1 
08ef4                 | '     if lparts(ct).token=token_comma then ct+=1 
08ef4     03 40 66 F0 | 	shl	local14, #3
08ef8     02 00 00 FF 
08efc     38 E4 85 F1 | 	sub	objptr, ##1080
08f00     F2 40 02 F1 | 	add	local14, objptr
08f04     04 40 06 F1 | 	add	local14, #4
08f08     20 41 02 FB | 	rdlong	local14, local14
08f0c     11 40 0E F2 | 	cmp	local14, #17 wz
08f10     35 00 00 FF 
08f14     0C E4 85 F1 | 	sub	objptr, ##27148
08f18     37 00 00 AF 
08f1c     44 E4 05 A1 |  if_e	add	objptr, ##28228
08f20     F2 34 02 AB |  if_e	rdlong	local08, objptr
08f24     01 34 06 A1 |  if_e	add	local08, #1
08f28     F2 34 62 AC |  if_e	wrlong	local08, objptr
08f2c     37 00 00 AF 
08f30     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08f34                 | '     if lparts(ct).token=token_end then exit loop
08f34     37 00 00 FF 
08f38     44 E4 05 F1 | 	add	objptr, ##28228
08f3c     F2 40 02 FB | 	rdlong	local14, objptr
08f40     03 40 66 F0 | 	shl	local14, #3
08f44     02 00 00 FF 
08f48     38 E4 85 F1 | 	sub	objptr, ##1080
08f4c     F2 40 02 F1 | 	add	local14, objptr
08f50     04 40 06 F1 | 	add	local14, #4
08f54     20 41 02 FB | 	rdlong	local14, local14
08f58     FE 41 0E F2 | 	cmp	local14, #510 wz
08f5c     35 00 00 FF 
08f60     0C E4 85 F1 | 	sub	objptr, ##27148
08f64     08 00 90 AD |  if_e	jmp	#LR__0820
08f68     68 FF 9F FD | 	jmp	#LR__0818
08f6c                 | LR__0819
08f6c     36 42 06 F6 | 	mov	local15, #54
08f70                 | LR__0820
08f70                 | ' return i,err
08f70     17 FB 01 F6 | 	mov	result1, local05
08f74     21 FD 01 F6 | 	mov	result2, local15
08f78     A7 F0 03 F6 | 	mov	ptra, fp
08f7c     B2 00 A0 FD | 	call	#popregs_
08f80                 | _compile_input_ret
08f80     2D 00 64 FD | 	ret
08f84                 | 
08f84                 | ' 
08f84                 | ' '----- compile assign to an array element
08f84                 | ' 
08f84                 | ' function compile_array_assign() as ulong 
08f84                 | _compile_array_assign
08f84     0B 4A 05 F6 | 	mov	COUNT_, #11
08f88     A8 00 A0 FD | 	call	#pushregs_
08f8c     00 2C 06 F6 | 	mov	local04, #0
08f90     00 2E 06 F6 | 	mov	local05, #0
08f94     37 00 00 FF 
08f98     44 E4 05 F1 | 	add	objptr, ##28228
08f9c     F2 30 02 FB | 	rdlong	local06, objptr
08fa0     18 FB 01 F6 | 	mov	result1, local06
08fa4     01 FA 85 F1 | 	sub	result1, #1
08fa8     03 FA 65 F0 | 	shl	result1, #3
08fac     02 00 00 FF 
08fb0     38 E4 85 F1 | 	sub	objptr, ##1080
08fb4     F2 FA 01 F1 | 	add	result1, objptr
08fb8     FD 32 02 FB | 	rdlong	local07, result1
08fbc                 | ' numpar=0 : err=0
08fbc                 | ' varname$=lparts(ct-1).part$
08fbc                 | ' if lparts(ct).token=token_lpar then
08fbc     03 30 66 F0 | 	shl	local06, #3
08fc0     F2 30 02 F1 | 	add	local06, objptr
08fc4     04 30 06 F1 | 	add	local06, #4
08fc8     18 31 02 FB | 	rdlong	local06, local06
08fcc     15 30 0E F2 | 	cmp	local06, #21 wz
08fd0     35 00 00 FF 
08fd4     0C E4 85 F1 | 	sub	objptr, ##27148
08fd8     F4 01 90 5D |  if_ne	jmp	#LR__0834
08fdc     37 00 00 FF 
08fe0     44 E4 05 F1 | 	add	objptr, ##28228
08fe4     F2 34 02 FB | 	rdlong	local08, objptr
08fe8     01 34 06 F1 | 	add	local08, #1
08fec     F2 34 62 FC | 	wrlong	local08, objptr
08ff0     37 00 00 FF 
08ff4     44 E4 85 F1 | 	sub	objptr, ##28228
08ff8                 | '   ct+=1 											' omit this lpar, this is for expr list
08ff8                 | '   do
08ff8                 | LR__0830
08ff8     C8 2A B0 FD | 	call	#_expr
08ffc     37 00 00 FF 
09000     44 E4 05 F1 | 	add	objptr, ##28228
09004     F2 30 02 FB | 	rdlong	local06, objptr
09008     01 30 06 F1 | 	add	local06, #1
0900c     F2 30 62 FC | 	wrlong	local06, objptr
09010     01 2C 06 F1 | 	add	local04, #1
09014     01 30 86 F1 | 	sub	local06, #1
09018     03 30 66 F0 | 	shl	local06, #3
0901c     02 00 00 FF 
09020     38 E4 85 F1 | 	sub	objptr, ##1080
09024     F2 30 02 F1 | 	add	local06, objptr
09028     04 30 06 F1 | 	add	local06, #4
0902c     18 35 02 FB | 	rdlong	local08, local06
09030     14 34 0E F2 | 	cmp	local08, #20 wz
09034     35 00 00 FF 
09038     0C E4 85 F1 | 	sub	objptr, ##27148
0903c     34 00 90 AD |  if_e	jmp	#LR__0831
09040     37 00 00 FF 
09044     44 E4 05 F1 | 	add	objptr, ##28228
09048     F2 34 02 FB | 	rdlong	local08, objptr
0904c     03 34 66 F0 | 	shl	local08, #3
09050     02 00 00 FF 
09054     38 E4 85 F1 | 	sub	objptr, ##1080
09058     F2 34 02 F1 | 	add	local08, objptr
0905c     04 34 06 F1 | 	add	local08, #4
09060     1A 35 02 FB | 	rdlong	local08, local08
09064     FE 35 0E F2 | 	cmp	local08, #510 wz
09068     35 00 00 FF 
0906c     0C E4 85 F1 | 	sub	objptr, ##27148
09070     84 FF 9F 5D |  if_ne	jmp	#LR__0830
09074                 | LR__0831
09074     37 00 00 FF 
09078     44 E4 05 F1 | 	add	objptr, ##28228
0907c     F2 34 02 FB | 	rdlong	local08, objptr
09080     01 34 06 F1 | 	add	local08, #1
09084     F2 34 62 FC | 	wrlong	local08, objptr
09088     37 00 00 FF 
0908c     44 E4 85 F1 | 	sub	objptr, ##28228
09090     30 2A B0 FD | 	call	#_expr
09094     01 36 66 F6 | 	neg	local09, #1
09098     00 38 06 F6 | 	mov	local10, #0
0909c                 | '   ct+=1 : expr()
0909c                 | '   j=-1 : i=0 
0909c                 | '   do 
0909c                 | LR__0832
0909c                 | '     if variables(i).name=varname$ then j=i: exit loop
0909c     1C 31 02 F6 | 	mov	local06, local10
090a0     04 30 66 F0 | 	shl	local06, #4
090a4     14 00 00 FF 
090a8     F8 E5 05 F1 | 	add	objptr, ##10744
090ac     F2 30 02 F1 | 	add	local06, objptr
090b0     18 13 02 FB | 	rdlong	arg01, local06
090b4     19 15 02 F6 | 	mov	arg02, local07
090b8     14 00 00 FF 
090bc     F8 E5 85 F1 | 	sub	objptr, ##10744
090c0     7C CE B1 FD | 	call	#__system___string_cmp
090c4     00 FA 0D F2 | 	cmp	result1, #0 wz
090c8     1C 37 02 A6 |  if_e	mov	local09, local10
090cc     20 00 90 AD |  if_e	jmp	#LR__0833
090d0     01 38 06 F1 | 	add	local10, #1
090d4     35 00 00 FF 
090d8     08 E4 05 F1 | 	add	objptr, ##27144
090dc     F2 34 02 FB | 	rdlong	local08, objptr
090e0     35 00 00 FF 
090e4     08 E4 85 F1 | 	sub	objptr, ##27144
090e8     1A 39 5A F2 | 	cmps	local10, local08 wcz
090ec     AC FF 9F ED |  if_be	jmp	#LR__0832
090f0                 | LR__0833
090f0     1B 27 02 F6 | 	mov	local01, local09
090f4     16 29 02 F6 | 	mov	local02, local04
090f8     17 2A 06 F6 | 	mov	local03, #23
090fc     13 35 02 F6 | 	mov	local08, local01
09100     14 3B 02 F6 | 	mov	local11, local02
09104     15 33 02 F6 | 	mov	local07, local03
09108     4A 00 00 FF 
0910c     7C E4 05 F1 | 	add	objptr, ##38012
09110     F2 26 02 FB | 	rdlong	local01, objptr
09114     13 37 02 F6 | 	mov	local09, local01
09118     01 36 66 F0 | 	shl	local09, #1
0911c     13 37 02 F1 | 	add	local09, local01
09120     02 36 66 F0 | 	shl	local09, #2
09124     03 00 00 FF 
09128     00 E4 85 F1 | 	sub	objptr, ##1536
0912c     F2 36 02 F1 | 	add	local09, objptr
09130     1B 35 62 FC | 	wrlong	local08, local09
09134     03 00 00 FF 
09138     00 E4 05 F1 | 	add	objptr, ##1536
0913c     F2 26 02 FB | 	rdlong	local01, objptr
09140     13 37 02 F6 | 	mov	local09, local01
09144     01 36 66 F0 | 	shl	local09, #1
09148     13 37 02 F1 | 	add	local09, local01
0914c     02 36 66 F0 | 	shl	local09, #2
09150     03 00 00 FF 
09154     00 E4 85 F1 | 	sub	objptr, ##1536
09158     F2 36 02 F1 | 	add	local09, objptr
0915c     04 36 06 F1 | 	add	local09, #4
09160     1B 3B 62 FC | 	wrlong	local11, local09
09164     03 00 00 FF 
09168     00 E4 05 F1 | 	add	objptr, ##1536
0916c     F2 3A 02 FB | 	rdlong	local11, objptr
09170     1D 27 02 F6 | 	mov	local01, local11
09174     01 26 66 F0 | 	shl	local01, #1
09178     1D 27 02 F1 | 	add	local01, local11
0917c     02 26 66 F0 | 	shl	local01, #2
09180     03 00 00 FF 
09184     00 E4 85 F1 | 	sub	objptr, ##1536
09188     F2 26 02 F1 | 	add	local01, objptr
0918c     08 26 06 F1 | 	add	local01, #8
09190     13 33 62 FC | 	wrlong	local07, local01
09194     03 00 00 FF 
09198     00 E4 05 F1 | 	add	objptr, ##1536
0919c     F2 34 02 FB | 	rdlong	local08, objptr
091a0     01 34 06 F1 | 	add	local08, #1
091a4     F2 34 62 FC | 	wrlong	local08, objptr
091a8                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
091a8                 | '   if numpar>3 then err=45
091a8     04 2C 16 F2 | 	cmp	local04, #4 wc
091ac     2D 2E 06 36 |  if_ae	mov	local05, #45
091b0                 | '   if i>varnum then err=20
091b0     15 00 00 FF 
091b4     74 E4 85 F1 | 	sub	objptr, ##10868
091b8     F2 34 02 FB | 	rdlong	local08, objptr
091bc     35 00 00 FF 
091c0     08 E4 85 F1 | 	sub	objptr, ##27144
091c4     1A 39 5A F2 | 	cmps	local10, local08 wcz
091c8     14 2E 06 16 |  if_a	mov	local05, #20
091cc     04 00 90 FD | 	jmp	#LR__0835
091d0                 | LR__0834
091d0     0E 2E 06 F6 | 	mov	local05, #14
091d4                 | LR__0835
091d4                 | ' return err
091d4     17 FB 01 F6 | 	mov	result1, local05
091d8     A7 F0 03 F6 | 	mov	ptra, fp
091dc     B2 00 A0 FD | 	call	#popregs_
091e0                 | _compile_array_assign_ret
091e0     2D 00 64 FD | 	ret
091e4                 | 
091e4                 | ' 
091e4                 | ' '----- compile print command with its ";" and "," modifiers
091e4                 | ' 
091e4                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
091e4                 | _compile_print
091e4     0B 4A 05 F6 | 	mov	COUNT_, #11
091e8     A8 00 A0 FD | 	call	#pushregs_
091ec     00 26 06 F6 | 	mov	local01, #0
091f0     1D 2A 06 F6 | 	mov	local03, #29
091f4                 | ' t1.result.uresult=0 : t1.result_type=result_uint
091f4                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
091f4     37 00 00 FF 
091f8     44 E4 05 F1 | 	add	objptr, ##28228
091fc     F2 2C 02 FB | 	rdlong	local04, objptr
09200     03 2C 66 F0 | 	shl	local04, #3
09204     02 00 00 FF 
09208     38 E4 85 F1 | 	sub	objptr, ##1080
0920c     F2 2C 02 F1 | 	add	local04, objptr
09210     04 2C 06 F1 | 	add	local04, #4
09214     16 2D 02 FB | 	rdlong	local04, local04
09218     FE 2D 0E F2 | 	cmp	local04, #510 wz
0921c     35 00 00 FF 
09220     0C E4 85 F1 | 	sub	objptr, ##27148
09224     68 01 90 5D |  if_ne	jmp	#LR__0840
09228     20 2A 06 F6 | 	mov	local03, #32
0922c     13 2F 02 F6 | 	mov	local05, local01
09230     14 31 02 F6 | 	mov	local06, local02
09234     15 33 02 F6 | 	mov	local07, local03
09238     4A 00 00 FF 
0923c     7C E4 05 F1 | 	add	objptr, ##38012
09240     F2 34 02 FB | 	rdlong	local08, objptr
09244     1A 37 02 F6 | 	mov	local09, local08
09248     01 36 66 F0 | 	shl	local09, #1
0924c     1A 37 02 F1 | 	add	local09, local08
09250     02 36 66 F0 | 	shl	local09, #2
09254     03 00 00 FF 
09258     00 E4 85 F1 | 	sub	objptr, ##1536
0925c     F2 36 02 F1 | 	add	local09, objptr
09260     1B 2F 62 FC | 	wrlong	local05, local09
09264     03 00 00 FF 
09268     00 E4 05 F1 | 	add	objptr, ##1536
0926c     F2 2E 02 FB | 	rdlong	local05, objptr
09270     17 39 02 F6 | 	mov	local10, local05
09274     01 38 66 F0 | 	shl	local10, #1
09278     17 39 02 F1 | 	add	local10, local05
0927c     02 38 66 F0 | 	shl	local10, #2
09280     03 00 00 FF 
09284     00 E4 85 F1 | 	sub	objptr, ##1536
09288     F2 38 02 F1 | 	add	local10, objptr
0928c     04 38 06 F1 | 	add	local10, #4
09290     1C 31 62 FC | 	wrlong	local06, local10
09294     03 00 00 FF 
09298     00 E4 05 F1 | 	add	objptr, ##1536
0929c     F2 2E 02 FB | 	rdlong	local05, objptr
092a0     17 3B 02 F6 | 	mov	local11, local05
092a4     01 3A 66 F0 | 	shl	local11, #1
092a8     17 3B 02 F1 | 	add	local11, local05
092ac     02 3A 66 F0 | 	shl	local11, #2
092b0     03 00 00 FF 
092b4     00 E4 85 F1 | 	sub	objptr, ##1536
092b8     F2 3A 02 F1 | 	add	local11, objptr
092bc     08 3A 06 F1 | 	add	local11, #8
092c0     1D 33 62 FC | 	wrlong	local07, local11
092c4     03 00 00 FF 
092c8     00 E4 05 F1 | 	add	objptr, ##1536
092cc     F2 2E 02 FB | 	rdlong	local05, objptr
092d0     01 2E 06 F1 | 	add	local05, #1
092d4     F2 2E 62 FC | 	wrlong	local05, objptr
092d8     44 2A 06 F6 | 	mov	local03, #68
092dc     13 2F 02 F6 | 	mov	local05, local01
092e0     14 31 02 F6 | 	mov	local06, local02
092e4     15 33 02 F6 | 	mov	local07, local03
092e8     F2 34 02 FB | 	rdlong	local08, objptr
092ec     1A 37 02 F6 | 	mov	local09, local08
092f0     01 36 66 F0 | 	shl	local09, #1
092f4     1A 37 02 F1 | 	add	local09, local08
092f8     02 36 66 F0 | 	shl	local09, #2
092fc     03 00 00 FF 
09300     00 E4 85 F1 | 	sub	objptr, ##1536
09304     F2 36 02 F1 | 	add	local09, objptr
09308     1B 2F 62 FC | 	wrlong	local05, local09
0930c     03 00 00 FF 
09310     00 E4 05 F1 | 	add	objptr, ##1536
09314     F2 3A 02 FB | 	rdlong	local11, objptr
09318     1D 39 02 F6 | 	mov	local10, local11
0931c     01 38 66 F0 | 	shl	local10, #1
09320     1D 39 02 F1 | 	add	local10, local11
09324     02 38 66 F0 | 	shl	local10, #2
09328     03 00 00 FF 
0932c     00 E4 85 F1 | 	sub	objptr, ##1536
09330     F2 38 02 F1 | 	add	local10, objptr
09334     04 38 06 F1 | 	add	local10, #4
09338     1C 31 62 FC | 	wrlong	local06, local10
0933c     03 00 00 FF 
09340     00 E4 05 F1 | 	add	objptr, ##1536
09344     F2 38 02 FB | 	rdlong	local10, objptr
09348     1C 3B 02 F6 | 	mov	local11, local10
0934c     01 3A 66 F0 | 	shl	local11, #1
09350     1C 3B 02 F1 | 	add	local11, local10
09354     02 3A 66 F0 | 	shl	local11, #2
09358     03 00 00 FF 
0935c     00 E4 85 F1 | 	sub	objptr, ##1536
09360     F2 3A 02 F1 | 	add	local11, objptr
09364     08 3A 06 F1 | 	add	local11, #8
09368     1D 33 62 FC | 	wrlong	local07, local11
0936c     03 00 00 FF 
09370     00 E4 05 F1 | 	add	objptr, ##1536
09374     F2 2E 02 FB | 	rdlong	local05, objptr
09378     01 2E 06 F1 | 	add	local05, #1
0937c     F2 2E 62 FC | 	wrlong	local05, objptr
09380     4A 00 00 FF 
09384     7C E4 85 F1 | 	sub	objptr, ##38012
09388     00 FA 05 F6 | 	mov	result1, #0
0938c     20 05 90 FD | 	jmp	#LR__0847
09390                 | LR__0840
09390                 | ' do
09390                 | LR__0841
09390     30 27 B0 FD | 	call	#_expr
09394                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
09394                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09394     37 00 00 FF 
09398     44 E4 05 F1 | 	add	objptr, ##28228
0939c     F2 2C 02 FB | 	rdlong	local04, objptr
093a0     03 2C 66 F0 | 	shl	local04, #3
093a4     02 00 00 FF 
093a8     38 E4 85 F1 | 	sub	objptr, ##1080
093ac     F2 2C 02 F1 | 	add	local04, objptr
093b0     04 2C 06 F1 | 	add	local04, #4
093b4     16 35 02 FB | 	rdlong	local08, local04
093b8     11 34 0E F2 | 	cmp	local08, #17 wz
093bc     35 00 00 FF 
093c0     0C E4 85 F1 | 	sub	objptr, ##27148
093c4     60 01 90 5D |  if_ne	jmp	#LR__0842
093c8     21 2A 06 F6 | 	mov	local03, #33
093cc     13 2F 02 F6 | 	mov	local05, local01
093d0     14 31 02 F6 | 	mov	local06, local02
093d4     15 33 02 F6 | 	mov	local07, local03
093d8     4A 00 00 FF 
093dc     7C E4 05 F1 | 	add	objptr, ##38012
093e0     F2 34 02 FB | 	rdlong	local08, objptr
093e4     1A 37 02 F6 | 	mov	local09, local08
093e8     01 36 66 F0 | 	shl	local09, #1
093ec     1A 37 02 F1 | 	add	local09, local08
093f0     02 36 66 F0 | 	shl	local09, #2
093f4     03 00 00 FF 
093f8     00 E4 85 F1 | 	sub	objptr, ##1536
093fc     F2 36 02 F1 | 	add	local09, objptr
09400     1B 2F 62 FC | 	wrlong	local05, local09
09404     03 00 00 FF 
09408     00 E4 05 F1 | 	add	objptr, ##1536
0940c     F2 3A 02 FB | 	rdlong	local11, objptr
09410     1D 39 02 F6 | 	mov	local10, local11
09414     01 38 66 F0 | 	shl	local10, #1
09418     1D 39 02 F1 | 	add	local10, local11
0941c     02 38 66 F0 | 	shl	local10, #2
09420     03 00 00 FF 
09424     00 E4 85 F1 | 	sub	objptr, ##1536
09428     F2 38 02 F1 | 	add	local10, objptr
0942c     04 38 06 F1 | 	add	local10, #4
09430     1C 31 62 FC | 	wrlong	local06, local10
09434     03 00 00 FF 
09438     00 E4 05 F1 | 	add	objptr, ##1536
0943c     F2 2E 02 FB | 	rdlong	local05, objptr
09440     17 3B 02 F6 | 	mov	local11, local05
09444     01 3A 66 F0 | 	shl	local11, #1
09448     17 3B 02 F1 | 	add	local11, local05
0944c     02 3A 66 F0 | 	shl	local11, #2
09450     03 00 00 FF 
09454     00 E4 85 F1 | 	sub	objptr, ##1536
09458     F2 3A 02 F1 | 	add	local11, objptr
0945c     08 3A 06 F1 | 	add	local11, #8
09460     1D 33 62 FC | 	wrlong	local07, local11
09464     03 00 00 FF 
09468     00 E4 05 F1 | 	add	objptr, ##1536
0946c     F2 2E 02 FB | 	rdlong	local05, objptr
09470     01 2E 06 F1 | 	add	local05, #1
09474     F2 2E 62 FC | 	wrlong	local05, objptr
09478     44 2A 06 F6 | 	mov	local03, #68
0947c     13 2F 02 F6 | 	mov	local05, local01
09480     14 31 02 F6 | 	mov	local06, local02
09484     15 33 02 F6 | 	mov	local07, local03
09488     F2 34 02 FB | 	rdlong	local08, objptr
0948c     1A 37 02 F6 | 	mov	local09, local08
09490     01 36 66 F0 | 	shl	local09, #1
09494     1A 37 02 F1 | 	add	local09, local08
09498     02 36 66 F0 | 	shl	local09, #2
0949c     03 00 00 FF 
094a0     00 E4 85 F1 | 	sub	objptr, ##1536
094a4     F2 36 02 F1 | 	add	local09, objptr
094a8     1B 2F 62 FC | 	wrlong	local05, local09
094ac     03 00 00 FF 
094b0     00 E4 05 F1 | 	add	objptr, ##1536
094b4     F2 3A 02 FB | 	rdlong	local11, objptr
094b8     1D 39 02 F6 | 	mov	local10, local11
094bc     01 38 66 F0 | 	shl	local10, #1
094c0     1D 39 02 F1 | 	add	local10, local11
094c4     02 38 66 F0 | 	shl	local10, #2
094c8     03 00 00 FF 
094cc     00 E4 85 F1 | 	sub	objptr, ##1536
094d0     F2 38 02 F1 | 	add	local10, objptr
094d4     04 38 06 F1 | 	add	local10, #4
094d8     1C 31 62 FC | 	wrlong	local06, local10
094dc     03 00 00 FF 
094e0     00 E4 05 F1 | 	add	objptr, ##1536
094e4     F2 38 02 FB | 	rdlong	local10, objptr
094e8     1C 3B 02 F6 | 	mov	local11, local10
094ec     01 3A 66 F0 | 	shl	local11, #1
094f0     1C 3B 02 F1 | 	add	local11, local10
094f4     02 3A 66 F0 | 	shl	local11, #2
094f8     03 00 00 FF 
094fc     00 E4 85 F1 | 	sub	objptr, ##1536
09500     F2 3A 02 F1 | 	add	local11, objptr
09504     08 3A 06 F1 | 	add	local11, #8
09508     1D 33 62 FC | 	wrlong	local07, local11
0950c     03 00 00 FF 
09510     00 E4 05 F1 | 	add	objptr, ##1536
09514     F2 2E 02 FB | 	rdlong	local05, objptr
09518     01 2E 06 F1 | 	add	local05, #1
0951c     F2 2E 62 FC | 	wrlong	local05, objptr
09520     4A 00 00 FF 
09524     7C E4 85 F1 | 	sub	objptr, ##38012
09528                 | LR__0842
09528                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09528     37 00 00 FF 
0952c     44 E4 05 F1 | 	add	objptr, ##28228
09530     F2 2C 02 FB | 	rdlong	local04, objptr
09534     03 2C 66 F0 | 	shl	local04, #3
09538     02 00 00 FF 
0953c     38 E4 85 F1 | 	sub	objptr, ##1080
09540     F2 2C 02 F1 | 	add	local04, objptr
09544     04 2C 06 F1 | 	add	local04, #4
09548     16 35 02 FB | 	rdlong	local08, local04
0954c     12 34 0E F2 | 	cmp	local08, #18 wz
09550     35 00 00 FF 
09554     0C E4 85 F1 | 	sub	objptr, ##27148
09558     60 01 90 5D |  if_ne	jmp	#LR__0843
0955c     22 2A 06 F6 | 	mov	local03, #34
09560     13 2F 02 F6 | 	mov	local05, local01
09564     14 31 02 F6 | 	mov	local06, local02
09568     15 33 02 F6 | 	mov	local07, local03
0956c     4A 00 00 FF 
09570     7C E4 05 F1 | 	add	objptr, ##38012
09574     F2 34 02 FB | 	rdlong	local08, objptr
09578     1A 37 02 F6 | 	mov	local09, local08
0957c     01 36 66 F0 | 	shl	local09, #1
09580     1A 37 02 F1 | 	add	local09, local08
09584     02 36 66 F0 | 	shl	local09, #2
09588     03 00 00 FF 
0958c     00 E4 85 F1 | 	sub	objptr, ##1536
09590     F2 36 02 F1 | 	add	local09, objptr
09594     1B 2F 62 FC | 	wrlong	local05, local09
09598     03 00 00 FF 
0959c     00 E4 05 F1 | 	add	objptr, ##1536
095a0     F2 3A 02 FB | 	rdlong	local11, objptr
095a4     1D 39 02 F6 | 	mov	local10, local11
095a8     01 38 66 F0 | 	shl	local10, #1
095ac     1D 39 02 F1 | 	add	local10, local11
095b0     02 38 66 F0 | 	shl	local10, #2
095b4     03 00 00 FF 
095b8     00 E4 85 F1 | 	sub	objptr, ##1536
095bc     F2 38 02 F1 | 	add	local10, objptr
095c0     04 38 06 F1 | 	add	local10, #4
095c4     1C 31 62 FC | 	wrlong	local06, local10
095c8     03 00 00 FF 
095cc     00 E4 05 F1 | 	add	objptr, ##1536
095d0     F2 2E 02 FB | 	rdlong	local05, objptr
095d4     17 3B 02 F6 | 	mov	local11, local05
095d8     01 3A 66 F0 | 	shl	local11, #1
095dc     17 3B 02 F1 | 	add	local11, local05
095e0     02 3A 66 F0 | 	shl	local11, #2
095e4     03 00 00 FF 
095e8     00 E4 85 F1 | 	sub	objptr, ##1536
095ec     F2 3A 02 F1 | 	add	local11, objptr
095f0     08 3A 06 F1 | 	add	local11, #8
095f4     1D 33 62 FC | 	wrlong	local07, local11
095f8     03 00 00 FF 
095fc     00 E4 05 F1 | 	add	objptr, ##1536
09600     F2 2E 02 FB | 	rdlong	local05, objptr
09604     01 2E 06 F1 | 	add	local05, #1
09608     F2 2E 62 FC | 	wrlong	local05, objptr
0960c     44 2A 06 F6 | 	mov	local03, #68
09610     13 2F 02 F6 | 	mov	local05, local01
09614     14 31 02 F6 | 	mov	local06, local02
09618     15 33 02 F6 | 	mov	local07, local03
0961c     F2 34 02 FB | 	rdlong	local08, objptr
09620     1A 37 02 F6 | 	mov	local09, local08
09624     01 36 66 F0 | 	shl	local09, #1
09628     1A 37 02 F1 | 	add	local09, local08
0962c     02 36 66 F0 | 	shl	local09, #2
09630     03 00 00 FF 
09634     00 E4 85 F1 | 	sub	objptr, ##1536
09638     F2 36 02 F1 | 	add	local09, objptr
0963c     1B 2F 62 FC | 	wrlong	local05, local09
09640     03 00 00 FF 
09644     00 E4 05 F1 | 	add	objptr, ##1536
09648     F2 3A 02 FB | 	rdlong	local11, objptr
0964c     1D 39 02 F6 | 	mov	local10, local11
09650     01 38 66 F0 | 	shl	local10, #1
09654     1D 39 02 F1 | 	add	local10, local11
09658     02 38 66 F0 | 	shl	local10, #2
0965c     03 00 00 FF 
09660     00 E4 85 F1 | 	sub	objptr, ##1536
09664     F2 38 02 F1 | 	add	local10, objptr
09668     04 38 06 F1 | 	add	local10, #4
0966c     1C 31 62 FC | 	wrlong	local06, local10
09670     03 00 00 FF 
09674     00 E4 05 F1 | 	add	objptr, ##1536
09678     F2 38 02 FB | 	rdlong	local10, objptr
0967c     1C 3B 02 F6 | 	mov	local11, local10
09680     01 3A 66 F0 | 	shl	local11, #1
09684     1C 3B 02 F1 | 	add	local11, local10
09688     02 3A 66 F0 | 	shl	local11, #2
0968c     03 00 00 FF 
09690     00 E4 85 F1 | 	sub	objptr, ##1536
09694     F2 3A 02 F1 | 	add	local11, objptr
09698     08 3A 06 F1 | 	add	local11, #8
0969c     1D 33 62 FC | 	wrlong	local07, local11
096a0     03 00 00 FF 
096a4     00 E4 05 F1 | 	add	objptr, ##1536
096a8     F2 2E 02 FB | 	rdlong	local05, objptr
096ac     01 2E 06 F1 | 	add	local05, #1
096b0     F2 2E 62 FC | 	wrlong	local05, objptr
096b4     4A 00 00 FF 
096b8     7C E4 85 F1 | 	sub	objptr, ##38012
096bc                 | LR__0843
096bc                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
096bc     37 00 00 FF 
096c0     44 E4 05 F1 | 	add	objptr, ##28228
096c4     F2 2C 02 FB | 	rdlong	local04, objptr
096c8     03 2C 66 F0 | 	shl	local04, #3
096cc     02 00 00 FF 
096d0     38 E4 85 F1 | 	sub	objptr, ##1080
096d4     F2 2C 02 F1 | 	add	local04, objptr
096d8     04 2C 06 F1 | 	add	local04, #4
096dc     16 35 02 FB | 	rdlong	local08, local04
096e0     FE 35 0E F2 | 	cmp	local08, #510 wz
096e4     35 00 00 FF 
096e8     0C E4 85 F1 | 	sub	objptr, ##27148
096ec     B8 00 90 5D |  if_ne	jmp	#LR__0844
096f0     44 2A 06 F6 | 	mov	local03, #68
096f4     13 2F 02 F6 | 	mov	local05, local01
096f8     14 31 02 F6 | 	mov	local06, local02
096fc     15 33 02 F6 | 	mov	local07, local03
09700     4A 00 00 FF 
09704     7C E4 05 F1 | 	add	objptr, ##38012
09708     F2 34 02 FB | 	rdlong	local08, objptr
0970c     1A 37 02 F6 | 	mov	local09, local08
09710     01 36 66 F0 | 	shl	local09, #1
09714     1A 37 02 F1 | 	add	local09, local08
09718     02 36 66 F0 | 	shl	local09, #2
0971c     03 00 00 FF 
09720     00 E4 85 F1 | 	sub	objptr, ##1536
09724     F2 36 02 F1 | 	add	local09, objptr
09728     1B 2F 62 FC | 	wrlong	local05, local09
0972c     03 00 00 FF 
09730     00 E4 05 F1 | 	add	objptr, ##1536
09734     F2 3A 02 FB | 	rdlong	local11, objptr
09738     1D 39 02 F6 | 	mov	local10, local11
0973c     01 38 66 F0 | 	shl	local10, #1
09740     1D 39 02 F1 | 	add	local10, local11
09744     02 38 66 F0 | 	shl	local10, #2
09748     03 00 00 FF 
0974c     00 E4 85 F1 | 	sub	objptr, ##1536
09750     F2 38 02 F1 | 	add	local10, objptr
09754     04 38 06 F1 | 	add	local10, #4
09758     1C 31 62 FC | 	wrlong	local06, local10
0975c     03 00 00 FF 
09760     00 E4 05 F1 | 	add	objptr, ##1536
09764     F2 38 02 FB | 	rdlong	local10, objptr
09768     1C 3B 02 F6 | 	mov	local11, local10
0976c     01 3A 66 F0 | 	shl	local11, #1
09770     1C 3B 02 F1 | 	add	local11, local10
09774     02 3A 66 F0 | 	shl	local11, #2
09778     03 00 00 FF 
0977c     00 E4 85 F1 | 	sub	objptr, ##1536
09780     F2 3A 02 F1 | 	add	local11, objptr
09784     08 3A 06 F1 | 	add	local11, #8
09788     1D 33 62 FC | 	wrlong	local07, local11
0978c     03 00 00 FF 
09790     00 E4 05 F1 | 	add	objptr, ##1536
09794     F2 2E 02 FB | 	rdlong	local05, objptr
09798     01 2E 06 F1 | 	add	local05, #1
0979c     F2 2E 62 FC | 	wrlong	local05, objptr
097a0     4A 00 00 FF 
097a4     7C E4 85 F1 | 	sub	objptr, ##38012
097a8                 | LR__0844
097a8                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
097a8     37 00 00 FF 
097ac     44 E4 05 F1 | 	add	objptr, ##28228
097b0     F2 2C 02 FB | 	rdlong	local04, objptr
097b4     03 2C 66 F0 | 	shl	local04, #3
097b8     02 00 00 FF 
097bc     38 E4 85 F1 | 	sub	objptr, ##1080
097c0     F2 2C 02 F1 | 	add	local04, objptr
097c4     04 2C 06 F1 | 	add	local04, #4
097c8     16 35 02 FB | 	rdlong	local08, local04
097cc     11 34 0E F2 | 	cmp	local08, #17 wz
097d0     35 00 00 FF 
097d4     0C E4 85 F1 | 	sub	objptr, ##27148
097d8     6C 00 90 AD |  if_e	jmp	#LR__0845
097dc     37 00 00 FF 
097e0     44 E4 05 F1 | 	add	objptr, ##28228
097e4     F2 34 02 FB | 	rdlong	local08, objptr
097e8     03 34 66 F0 | 	shl	local08, #3
097ec     02 00 00 FF 
097f0     38 E4 85 F1 | 	sub	objptr, ##1080
097f4     F2 34 02 F1 | 	add	local08, objptr
097f8     04 34 06 F1 | 	add	local08, #4
097fc     1A 35 02 FB | 	rdlong	local08, local08
09800     12 34 0E F2 | 	cmp	local08, #18 wz
09804     35 00 00 FF 
09808     0C E4 85 F1 | 	sub	objptr, ##27148
0980c     38 00 90 AD |  if_e	jmp	#LR__0845
09810     37 00 00 FF 
09814     44 E4 05 F1 | 	add	objptr, ##28228
09818     F2 3A 02 FB | 	rdlong	local11, objptr
0981c     03 3A 66 F0 | 	shl	local11, #3
09820     02 00 00 FF 
09824     38 E4 85 F1 | 	sub	objptr, ##1080
09828     F2 3A 02 F1 | 	add	local11, objptr
0982c     04 3A 06 F1 | 	add	local11, #4
09830     1D 3B 02 FB | 	rdlong	local11, local11
09834     FE 3B 0E F2 | 	cmp	local11, #510 wz
09838     35 00 00 FF 
0983c     0C E4 85 F1 | 	sub	objptr, ##27148
09840     16 FA 05 56 |  if_ne	mov	result1, #22
09844     68 00 90 5D |  if_ne	jmp	#LR__0847
09848                 | LR__0845
09848     37 00 00 FF 
0984c     44 E4 05 F1 | 	add	objptr, ##28228
09850     F2 2C 02 FB | 	rdlong	local04, objptr
09854     01 2C 06 F1 | 	add	local04, #1
09858     F2 2C 62 FC | 	wrlong	local04, objptr
0985c     03 2C 66 F0 | 	shl	local04, #3
09860     02 00 00 FF 
09864     38 E4 85 F1 | 	sub	objptr, ##1080
09868     F2 2C 02 F1 | 	add	local04, objptr
0986c     04 2C 06 F1 | 	add	local04, #4
09870     16 35 02 FB | 	rdlong	local08, local04
09874     FE 35 0E F2 | 	cmp	local08, #510 wz
09878     35 00 00 FF 
0987c     0C E4 85 F1 | 	sub	objptr, ##27148
09880     28 00 90 AD |  if_e	jmp	#LR__0846
09884     37 00 00 FF 
09888     44 E4 05 F1 | 	add	objptr, ##28228
0988c     F2 3A 02 FB | 	rdlong	local11, objptr
09890     0E 00 00 FF 
09894     1C E4 05 F1 | 	add	objptr, ##7196
09898     F2 38 02 FB | 	rdlong	local10, objptr
0989c     45 00 00 FF 
098a0     60 E4 85 F1 | 	sub	objptr, ##35424
098a4     1C 3B 52 F2 | 	cmps	local11, local10 wc
098a8     E4 FA 9F CD |  if_b	jmp	#LR__0841
098ac                 | LR__0846
098ac                 | ' return 0
098ac     00 FA 05 F6 | 	mov	result1, #0
098b0                 | LR__0847
098b0     A7 F0 03 F6 | 	mov	ptra, fp
098b4     B2 00 A0 FD | 	call	#popregs_
098b8                 | _compile_print_ret
098b8     2D 00 64 FD | 	ret
098bc                 | 
098bc                 | ' 
098bc                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
098bc                 | ' 
098bc                 | ' function compile_if(aline as ulong) as ulong  
098bc                 | _compile_if
098bc     09 4A 05 F6 | 	mov	COUNT_, #9
098c0     A8 00 A0 FD | 	call	#pushregs_
098c4                 | _compile_if_enter
098c4     09 2D 02 F6 | 	mov	local04, arg01
098c8                 | ' return expr()
098c8     F8 21 B0 FD | 	call	#_expr
098cc     37 00 00 FF 
098d0     44 E4 05 F1 | 	add	objptr, ##28228
098d4     F2 14 02 FB | 	rdlong	arg02, objptr
098d8     0A 2F 02 F6 | 	mov	local05, arg02
098dc     03 2E 66 F0 | 	shl	local05, #3
098e0     02 00 00 FF 
098e4     38 E4 85 F1 | 	sub	objptr, ##1080
098e8     F2 2E 02 F1 | 	add	local05, objptr
098ec     04 2E 06 F1 | 	add	local05, #4
098f0     17 2F 02 FB | 	rdlong	local05, local05
098f4     01 14 06 F1 | 	add	arg02, #1
098f8     02 00 00 FF 
098fc     38 E4 05 F1 | 	add	objptr, ##1080
09900     F2 14 62 FC | 	wrlong	arg02, objptr
09904     37 00 00 FF 
09908     44 E4 85 F1 | 	sub	objptr, ##28228
0990c                 | ' 
0990c                 | ' err=compile_fun_1p()
0990c                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
0990c     5B 2E 0E F2 | 	cmp	local05, #91 wz
09910     34 FA 05 56 |  if_ne	mov	result1, #52
09914     20 01 90 5D |  if_ne	jmp	#LR__0852
09918     58 2A 06 F6 | 	mov	local03, #88
0991c     13 31 02 F6 | 	mov	local06, local01
09920     14 33 02 F6 | 	mov	local07, local02
09924     15 15 02 F6 | 	mov	arg02, local03
09928     4A 00 00 FF 
0992c     7C E4 05 F1 | 	add	objptr, ##38012
09930     F2 12 02 FB | 	rdlong	arg01, objptr
09934     09 35 02 F6 | 	mov	local08, arg01
09938     01 34 66 F0 | 	shl	local08, #1
0993c     09 35 02 F1 | 	add	local08, arg01
09940     02 34 66 F0 | 	shl	local08, #2
09944     03 00 00 FF 
09948     00 E4 85 F1 | 	sub	objptr, ##1536
0994c     F2 34 02 F1 | 	add	local08, objptr
09950     1A 31 62 FC | 	wrlong	local06, local08
09954     03 00 00 FF 
09958     00 E4 05 F1 | 	add	objptr, ##1536
0995c     F2 30 02 FB | 	rdlong	local06, objptr
09960     18 13 02 F6 | 	mov	arg01, local06
09964     01 12 66 F0 | 	shl	arg01, #1
09968     18 13 02 F1 | 	add	arg01, local06
0996c     02 12 66 F0 | 	shl	arg01, #2
09970     03 00 00 FF 
09974     00 E4 85 F1 | 	sub	objptr, ##1536
09978     F2 12 02 F1 | 	add	arg01, objptr
0997c     04 12 06 F1 | 	add	arg01, #4
09980     09 33 62 FC | 	wrlong	local07, arg01
09984     03 00 00 FF 
09988     00 E4 05 F1 | 	add	objptr, ##1536
0998c     F2 30 02 FB | 	rdlong	local06, objptr
09990     18 13 02 F6 | 	mov	arg01, local06
09994     01 12 66 F0 | 	shl	arg01, #1
09998     18 13 02 F1 | 	add	arg01, local06
0999c     02 12 66 F0 | 	shl	arg01, #2
099a0     03 00 00 FF 
099a4     00 E4 85 F1 | 	sub	objptr, ##1536
099a8     F2 12 02 F1 | 	add	arg01, objptr
099ac     08 12 06 F1 | 	add	arg01, #8
099b0     09 15 62 FC | 	wrlong	arg02, arg01
099b4     03 00 00 FF 
099b8     00 E4 05 F1 | 	add	objptr, ##1536
099bc     F2 30 02 FB | 	rdlong	local06, objptr
099c0     01 30 06 F1 | 	add	local06, #1
099c4     F2 30 62 FC | 	wrlong	local06, objptr
099c8                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
099c8                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
099c8     13 00 00 FF 
099cc     38 E4 85 F1 | 	sub	objptr, ##9784
099d0     F2 14 02 FB | 	rdlong	arg02, objptr
099d4     01 14 06 F1 | 	add	arg02, #1
099d8     03 14 66 F0 | 	shl	arg02, #3
099dc     02 00 00 FF 
099e0     38 E4 85 F1 | 	sub	objptr, ##1080
099e4     F2 14 02 F1 | 	add	arg02, objptr
099e8     0A 13 02 FB | 	rdlong	arg01, arg02
099ec     35 00 00 FF 
099f0     0C E4 85 F1 | 	sub	objptr, ##27148
099f4                 | ' 
099f4                 | ' select case s
099f4     AE 01 00 FF 
099f8     48 14 06 F6 | 	mov	arg02, ##@LR__5521
099fc     40 C5 B1 FD | 	call	#__system___string_cmp
09a00     00 FA 0D F2 | 	cmp	result1, #0 wz
09a04     1B FA 05 A6 |  if_e	mov	result1, #27
09a08     00 FA 05 56 |  if_ne	mov	result1, #0
09a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
09a10     10 00 90 AD |  if_e	jmp	#LR__0850
09a14     05 12 06 F6 | 	mov	arg01, #5
09a18     38 E4 BF FD | 	call	#_compile_immediate_assign
09a1c     FD 36 02 F6 | 	mov	local09, result1
09a20     10 00 90 FD | 	jmp	#LR__0851
09a24                 | LR__0850
09a24     05 12 06 F6 | 	mov	arg01, #5
09a28     16 15 02 F6 | 	mov	arg02, local04
09a2c     90 DA BF FD | 	call	#_compile_immediate
09a30     FD 36 02 F6 | 	mov	local09, result1
09a34                 | LR__0851
09a34                 | ' return err
09a34     1B FB 01 F6 | 	mov	result1, local09
09a38                 | LR__0852
09a38     A7 F0 03 F6 | 	mov	ptra, fp
09a3c     B2 00 A0 FD | 	call	#popregs_
09a40                 | _compile_if_ret
09a40     2D 00 64 FD | 	ret
09a44                 | 
09a44                 | ' 
09a44                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09a44                 | ' 
09a44                 | ' function compile_else(aline as ulong) as ulong  
09a44                 | _compile_else
09a44     07 4A 05 F6 | 	mov	COUNT_, #7
09a48     A8 00 A0 FD | 	call	#pushregs_
09a4c                 | _compile_else_enter
09a4c     09 2D 02 F6 | 	mov	local04, arg01
09a50     5A 2A 06 F6 | 	mov	local03, #90
09a54     13 2F 02 F6 | 	mov	local05, local01
09a58     14 31 02 F6 | 	mov	local06, local02
09a5c     15 27 02 F6 | 	mov	local01, local03
09a60     4A 00 00 FF 
09a64     7C E4 05 F1 | 	add	objptr, ##38012
09a68     F2 14 02 FB | 	rdlong	arg02, objptr
09a6c     0A 13 02 F6 | 	mov	arg01, arg02
09a70     01 12 66 F0 | 	shl	arg01, #1
09a74     0A 13 02 F1 | 	add	arg01, arg02
09a78     02 12 66 F0 | 	shl	arg01, #2
09a7c     03 00 00 FF 
09a80     00 E4 85 F1 | 	sub	objptr, ##1536
09a84     F2 12 02 F1 | 	add	arg01, objptr
09a88     09 2F 62 FC | 	wrlong	local05, arg01
09a8c     03 00 00 FF 
09a90     00 E4 05 F1 | 	add	objptr, ##1536
09a94     F2 2E 02 FB | 	rdlong	local05, objptr
09a98     17 15 02 F6 | 	mov	arg02, local05
09a9c     01 14 66 F0 | 	shl	arg02, #1
09aa0     17 15 02 F1 | 	add	arg02, local05
09aa4     02 14 66 F0 | 	shl	arg02, #2
09aa8     03 00 00 FF 
09aac     00 E4 85 F1 | 	sub	objptr, ##1536
09ab0     F2 14 02 F1 | 	add	arg02, objptr
09ab4     04 14 06 F1 | 	add	arg02, #4
09ab8     0A 31 62 FC | 	wrlong	local06, arg02
09abc     03 00 00 FF 
09ac0     00 E4 05 F1 | 	add	objptr, ##1536
09ac4     F2 30 02 FB | 	rdlong	local06, objptr
09ac8     18 2F 02 F6 | 	mov	local05, local06
09acc     01 2E 66 F0 | 	shl	local05, #1
09ad0     18 2F 02 F1 | 	add	local05, local06
09ad4     02 2E 66 F0 | 	shl	local05, #2
09ad8     03 00 00 FF 
09adc     00 E4 85 F1 | 	sub	objptr, ##1536
09ae0     F2 2E 02 F1 | 	add	local05, objptr
09ae4     08 2E 06 F1 | 	add	local05, #8
09ae8     17 27 62 FC | 	wrlong	local01, local05
09aec     03 00 00 FF 
09af0     00 E4 05 F1 | 	add	objptr, ##1536
09af4     F2 2E 02 FB | 	rdlong	local05, objptr
09af8     01 2E 06 F1 | 	add	local05, #1
09afc     F2 2E 62 FC | 	wrlong	local05, objptr
09b00                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09b00                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09b00     13 00 00 FF 
09b04     38 E4 85 F1 | 	sub	objptr, ##9784
09b08     F2 30 02 FB | 	rdlong	local06, objptr
09b0c     01 30 06 F1 | 	add	local06, #1
09b10     03 30 66 F0 | 	shl	local06, #3
09b14     02 00 00 FF 
09b18     38 E4 85 F1 | 	sub	objptr, ##1080
09b1c     F2 30 02 F1 | 	add	local06, objptr
09b20     18 13 02 FB | 	rdlong	arg01, local06
09b24     35 00 00 FF 
09b28     0C E4 85 F1 | 	sub	objptr, ##27148
09b2c                 | ' 
09b2c                 | ' select case s
09b2c     AE 01 00 FF 
09b30     48 14 06 F6 | 	mov	arg02, ##@LR__5521
09b34     08 C4 B1 FD | 	call	#__system___string_cmp
09b38     00 FA 0D F2 | 	cmp	result1, #0 wz
09b3c     1B FA 05 A6 |  if_e	mov	result1, #27
09b40     00 FA 05 56 |  if_ne	mov	result1, #0
09b44     00 FA 0D F2 | 	cmp	result1, #0 wz
09b48     10 00 90 AD |  if_e	jmp	#LR__0860
09b4c     05 12 06 F6 | 	mov	arg01, #5
09b50     00 E3 BF FD | 	call	#_compile_immediate_assign
09b54     FD 32 02 F6 | 	mov	local07, result1
09b58     10 00 90 FD | 	jmp	#LR__0861
09b5c                 | LR__0860
09b5c     05 12 06 F6 | 	mov	arg01, #5
09b60     16 15 02 F6 | 	mov	arg02, local04
09b64     58 D9 BF FD | 	call	#_compile_immediate
09b68     FD 32 02 F6 | 	mov	local07, result1
09b6c                 | LR__0861
09b6c                 | ' return err
09b6c     19 FB 01 F6 | 	mov	result1, local07
09b70     A7 F0 03 F6 | 	mov	ptra, fp
09b74     B2 00 A0 FD | 	call	#popregs_
09b78                 | _compile_else_ret
09b78     2D 00 64 FD | 	ret
09b7c                 | 
09b7c                 | ' 
09b7c                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09b7c                 | ' 
09b7c                 | ' function compile_dim() as ulong  
09b7c                 | _compile_dim
09b7c     11 4A 05 F6 | 	mov	COUNT_, #17
09b80     A8 00 A0 FD | 	call	#pushregs_
09b84     01 26 06 F6 | 	mov	local01, #1
09b88     01 28 06 F6 | 	mov	local02, #1
09b8c     01 2A 06 F6 | 	mov	local03, #1
09b90                 | ' 
09b90                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09b90                 | ' if isname(lparts(ct).part$) then 
09b90     37 00 00 FF 
09b94     44 E4 05 F1 | 	add	objptr, ##28228
09b98     F2 18 02 FB | 	rdlong	arg04, objptr
09b9c     03 18 66 F0 | 	shl	arg04, #3
09ba0     02 00 00 FF 
09ba4     38 E4 85 F1 | 	sub	objptr, ##1080
09ba8     F2 18 02 F1 | 	add	arg04, objptr
09bac     0C 13 02 FB | 	rdlong	arg01, arg04
09bb0     35 00 00 FF 
09bb4     0C E4 85 F1 | 	sub	objptr, ##27148
09bb8     5C C7 BF FD | 	call	#_isname
09bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
09bc0     78 05 90 AD |  if_e	jmp	#LR__0893
09bc4     37 00 00 FF 
09bc8     44 E4 05 F1 | 	add	objptr, ##28228
09bcc     F2 2C 02 FB | 	rdlong	local04, objptr
09bd0     03 2C 66 F0 | 	shl	local04, #3
09bd4     02 00 00 FF 
09bd8     38 E4 85 F1 | 	sub	objptr, ##1080
09bdc     F2 2C 02 F1 | 	add	local04, objptr
09be0     16 2F 02 FB | 	rdlong	local05, local04
09be4     01 30 66 F6 | 	neg	local06, #1
09be8                 | '   varname2$=lparts(ct).part$ 
09be8                 | '   j=-1
09be8                 | '   if varnum>0 then
09be8     04 E4 85 F1 | 	sub	objptr, #4
09bec     F2 32 02 FB | 	rdlong	local07, objptr
09bf0     35 00 00 FF 
09bf4     08 E4 85 F1 | 	sub	objptr, ##27144
09bf8     01 32 56 F2 | 	cmps	local07, #1 wc
09bfc     58 00 90 CD |  if_b	jmp	#LR__0872
09c00                 | '     for i=0 to varnum-1
09c00     00 34 06 F6 | 	mov	local08, #0
09c04     35 00 00 FF 
09c08     08 E4 05 F1 | 	add	objptr, ##27144
09c0c     F2 36 02 FB | 	rdlong	local09, objptr
09c10     35 00 00 FF 
09c14     08 E4 85 F1 | 	sub	objptr, ##27144
09c18                 | LR__0870
09c18     1B 35 52 F2 | 	cmps	local08, local09 wc
09c1c     38 00 90 3D |  if_ae	jmp	#LR__0871
09c20                 | '       if variables(i).name=varname2$ then j=i : exit
09c20     1A 2D 02 F6 | 	mov	local04, local08
09c24     04 2C 66 F0 | 	shl	local04, #4
09c28     14 00 00 FF 
09c2c     F8 E5 05 F1 | 	add	objptr, ##10744
09c30     F2 2C 02 F1 | 	add	local04, objptr
09c34     16 13 02 FB | 	rdlong	arg01, local04
09c38     17 15 02 F6 | 	mov	arg02, local05
09c3c     14 00 00 FF 
09c40     F8 E5 85 F1 | 	sub	objptr, ##10744
09c44     F8 C2 B1 FD | 	call	#__system___string_cmp
09c48     00 FA 0D F2 | 	cmp	result1, #0 wz
09c4c     1A 31 02 A6 |  if_e	mov	local06, local08
09c50     01 34 06 51 |  if_ne	add	local08, #1
09c54     C0 FF 9F 5D |  if_ne	jmp	#LR__0870
09c58                 | LR__0871
09c58                 | LR__0872
09c58                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
09c58     FF FF 7F FF 
09c5c     FF 31 0E F2 | 	cmp	local06, ##-1 wz
09c60     35 00 00 AF 
09c64     08 E4 05 A1 |  if_e	add	objptr, ##27144
09c68     F2 30 02 AB |  if_e	rdlong	local06, objptr
09c6c     35 00 00 AF 
09c70     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09c74     78 00 90 AD |  if_e	jmp	#LR__0873
09c78     00 12 06 F6 | 	mov	arg01, #0
09c7c     C0 1F B2 FD | 	call	#__system___getiolock_0602
09c80     FD 12 02 F6 | 	mov	arg01, result1
09c84     90 C2 B1 FD | 	call	#__system___lockmem
09c88     B0 01 00 FF 
09c8c     D9 14 06 F6 | 	mov	arg02, ##@LR__5775
09c90     00 12 06 F6 | 	mov	arg01, #0
09c94     00 16 06 F6 | 	mov	arg03, #0
09c98     70 CF B1 FD | 	call	#__system___basic_print_string
09c9c     52 00 00 FF 
09ca0     B0 E4 05 F1 | 	add	objptr, ##42160
09ca4     F2 14 02 FB | 	rdlong	arg02, objptr
09ca8     52 00 00 FF 
09cac     B0 E4 85 F1 | 	sub	objptr, ##42160
09cb0     00 12 06 F6 | 	mov	arg01, #0
09cb4     00 16 06 F6 | 	mov	arg03, #0
09cb8     0A 18 06 F6 | 	mov	arg04, #10
09cbc     D0 CF B1 FD | 	call	#__system___basic_print_unsigned
09cc0     B0 01 00 FF 
09cc4     E7 14 06 F6 | 	mov	arg02, ##@LR__5776
09cc8     00 12 06 F6 | 	mov	arg01, #0
09ccc     00 16 06 F6 | 	mov	arg03, #0
09cd0     38 CF B1 FD | 	call	#__system___basic_print_string
09cd4     00 12 06 F6 | 	mov	arg01, #0
09cd8     0A 14 06 F6 | 	mov	arg02, #10
09cdc     00 16 06 F6 | 	mov	arg03, #0
09ce0     D0 CE B1 FD | 	call	#__system___basic_print_char
09ce4     00 12 06 F6 | 	mov	arg01, #0
09ce8     54 1F B2 FD | 	call	#__system___getiolock_0602
09cec     FD 00 68 FC | 	wrlong	#0, result1
09cf0                 | LR__0873
09cf0                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
09cf0     37 00 00 FF 
09cf4     44 E4 05 F1 | 	add	objptr, ##28228
09cf8     F2 14 02 FB | 	rdlong	arg02, objptr
09cfc     01 14 06 F1 | 	add	arg02, #1
09d00     03 14 66 F0 | 	shl	arg02, #3
09d04     02 00 00 FF 
09d08     38 E4 85 F1 | 	sub	objptr, ##1080
09d0c     F2 14 02 F1 | 	add	arg02, objptr
09d10     0A 13 02 FB | 	rdlong	arg01, arg02
09d14     B0 01 00 FF 
09d18     08 15 06 F6 | 	mov	arg02, ##@LR__5777
09d1c     35 00 00 FF 
09d20     0C E4 85 F1 | 	sub	objptr, ##27148
09d24     18 C2 B1 FD | 	call	#__system___string_cmp
09d28     00 FA 0D F2 | 	cmp	result1, #0 wz
09d2c     44 00 90 AD |  if_e	jmp	#LR__0874
09d30     37 00 00 FF 
09d34     44 E4 05 F1 | 	add	objptr, ##28228
09d38     F2 36 02 FB | 	rdlong	local09, objptr
09d3c     01 36 06 F1 | 	add	local09, #1
09d40     03 36 66 F0 | 	shl	local09, #3
09d44     02 00 00 FF 
09d48     38 E4 85 F1 | 	sub	objptr, ##1080
09d4c     F2 36 02 F1 | 	add	local09, objptr
09d50     1B 13 02 FB | 	rdlong	arg01, local09
09d54     B0 01 00 FF 
09d58     0A 15 06 F6 | 	mov	arg02, ##@LR__5778
09d5c     35 00 00 FF 
09d60     0C E4 85 F1 | 	sub	objptr, ##27148
09d64     D8 C1 B1 FD | 	call	#__system___string_cmp
09d68     00 FA 0D F2 | 	cmp	result1, #0 wz
09d6c     2B FA 05 56 |  if_ne	mov	result1, #43
09d70     D0 04 90 5D |  if_ne	jmp	#LR__0895
09d74                 | LR__0874
09d74                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
09d74     37 00 00 FF 
09d78     44 E4 05 F1 | 	add	objptr, ##28228
09d7c     F2 14 02 FB | 	rdlong	arg02, objptr
09d80     01 14 06 F1 | 	add	arg02, #1
09d84     03 14 66 F0 | 	shl	arg02, #3
09d88     02 00 00 FF 
09d8c     38 E4 85 F1 | 	sub	objptr, ##1080
09d90     F2 14 02 F1 | 	add	arg02, objptr
09d94     0A 13 02 FB | 	rdlong	arg01, arg02
09d98     B0 01 00 FF 
09d9c     0D 15 06 F6 | 	mov	arg02, ##@LR__5779
09da0     35 00 00 FF 
09da4     0C E4 85 F1 | 	sub	objptr, ##27148
09da8     94 C1 B1 FD | 	call	#__system___string_cmp
09dac     00 FA 0D F2 | 	cmp	result1, #0 wz
09db0     37 00 00 AF 
09db4     44 E4 05 A1 |  if_e	add	objptr, ##28228
09db8     F2 38 02 AB |  if_e	rdlong	local10, objptr
09dbc     37 00 00 AF 
09dc0     44 E4 85 A1 |  if_e	sub	objptr, ##28228
09dc4     01 38 06 A1 |  if_e	add	local10, #1
09dc8     5C 01 90 AD |  if_e	jmp	#LR__0879
09dcc     37 00 00 FF 
09dd0     44 E4 05 F1 | 	add	objptr, ##28228
09dd4     F2 38 02 FB | 	rdlong	local10, objptr
09dd8     37 00 00 FF 
09ddc     44 E4 85 F1 | 	sub	objptr, ##28228
09de0     02 38 06 F1 | 	add	local10, #2
09de4     00 3A 06 F6 | 	mov	local11, #0
09de8                 | '   l=ct+2 : m=0 : do
09de8                 | LR__0875
09de8                 | '   if isdec(lparts(l).part$) then 
09de8     1C 2D 02 F6 | 	mov	local04, local10
09dec     03 2C 66 F0 | 	shl	local04, #3
09df0     35 00 00 FF 
09df4     0C E4 05 F1 | 	add	objptr, ##27148
09df8     F2 2C 02 F1 | 	add	local04, objptr
09dfc     16 13 02 FB | 	rdlong	arg01, local04
09e00     35 00 00 FF 
09e04     0C E4 85 F1 | 	sub	objptr, ##27148
09e08     10 CE BF FD | 	call	#_isdec
09e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
09e10     44 00 90 AD |  if_e	jmp	#LR__0876
09e14     1D 3D 02 F6 | 	mov	local12, local11
09e18     13 3D 06 F1 | 	add	local12, #local01
09e1c     1C 37 02 F6 | 	mov	local09, local10
09e20     03 36 66 F0 | 	shl	local09, #3
09e24     35 00 00 FF 
09e28     0C E4 05 F1 | 	add	objptr, ##27148
09e2c     F2 36 02 F1 | 	add	local09, objptr
09e30     1B 13 02 FB | 	rdlong	arg01, local09
09e34     00 14 06 F6 | 	mov	arg02, #0
09e38     35 00 00 FF 
09e3c     0C E4 85 F1 | 	sub	objptr, ##27148
09e40     C4 F5 B1 FD | 	call	#__system____builtin_atoi
09e44     FD 3E 02 F6 | 	mov	local13, result1
09e48                 | 	'.live	local13
09e48                 | 	'.live	local12
09e48     00 3C 8E F9 | 	altd	local12, #0
09e4c     1F 3D 02 F6 | 	mov	local12, local13
09e50     01 3A 06 F1 | 	add	local11, #1
09e54     08 00 90 FD | 	jmp	#LR__0877
09e58                 | LR__0876
09e58                 | '     return(17)
09e58     11 FA 05 F6 | 	mov	result1, #17
09e5c     E4 03 90 FD | 	jmp	#LR__0895
09e60                 | LR__0877
09e60                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
09e60     1C 2D 02 F6 | 	mov	local04, local10
09e64     01 2C 06 F1 | 	add	local04, #1
09e68     03 2C 66 F0 | 	shl	local04, #3
09e6c     35 00 00 FF 
09e70     0C E4 05 F1 | 	add	objptr, ##27148
09e74     F2 2C 02 F1 | 	add	local04, objptr
09e78     16 13 02 FB | 	rdlong	arg01, local04
09e7c     B0 01 00 FF 
09e80     10 15 06 F6 | 	mov	arg02, ##@LR__5780
09e84     35 00 00 FF 
09e88     0C E4 85 F1 | 	sub	objptr, ##27148
09e8c     B0 C0 B1 FD | 	call	#__system___string_cmp
09e90     00 FA 0D F2 | 	cmp	result1, #0 wz
09e94     3C 00 90 AD |  if_e	jmp	#LR__0878
09e98     1C 3F 02 F6 | 	mov	local13, local10
09e9c     01 3E 06 F1 | 	add	local13, #1
09ea0     03 3E 66 F0 | 	shl	local13, #3
09ea4     35 00 00 FF 
09ea8     0C E4 05 F1 | 	add	objptr, ##27148
09eac     F2 3E 02 F1 | 	add	local13, objptr
09eb0     1F 13 02 FB | 	rdlong	arg01, local13
09eb4     B0 01 00 FF 
09eb8     12 15 06 F6 | 	mov	arg02, ##@LR__5781
09ebc     35 00 00 FF 
09ec0     0C E4 85 F1 | 	sub	objptr, ##27148
09ec4     78 C0 B1 FD | 	call	#__system___string_cmp
09ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
09ecc     2C FA 05 56 |  if_ne	mov	result1, #44
09ed0     70 03 90 5D |  if_ne	jmp	#LR__0895
09ed4                 | LR__0878
09ed4     02 38 06 F1 | 	add	local10, #2
09ed8     1C 2D 02 F6 | 	mov	local04, local10
09edc     01 2C 86 F1 | 	sub	local04, #1
09ee0     03 2C 66 F0 | 	shl	local04, #3
09ee4     35 00 00 FF 
09ee8     0C E4 05 F1 | 	add	objptr, ##27148
09eec     F2 2C 02 F1 | 	add	local04, objptr
09ef0     16 13 02 FB | 	rdlong	arg01, local04
09ef4     B0 01 00 FF 
09ef8     14 15 06 F6 | 	mov	arg02, ##@LR__5782
09efc     35 00 00 FF 
09f00     0C E4 85 F1 | 	sub	objptr, ##27148
09f04     38 C0 B1 FD | 	call	#__system___string_cmp
09f08     00 FA 0D F2 | 	cmp	result1, #0 wz
09f0c     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
09f10     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0875
09f14                 | '   if m>3 then return 45
09f14     04 3A 56 F2 | 	cmps	local11, #4 wc
09f18     2D FA 05 36 |  if_ae	mov	result1, #45
09f1c     24 03 90 3D |  if_ae	jmp	#LR__0895
09f20     00 41 06 F6 | 	mov	local14, #256
09f24     0C 42 06 F6 | 	mov	local15, #12
09f28                 | LR__0879
09f28                 | '   arraytype=array_no_type : esize=12
09f28                 | ' 1350 
09f28                 | '   if lparts(l).part$="as" then
09f28     1C 2D 02 F6 | 	mov	local04, local10
09f2c     03 2C 66 F0 | 	shl	local04, #3
09f30     35 00 00 FF 
09f34     0C E4 05 F1 | 	add	objptr, ##27148
09f38     F2 2C 02 F1 | 	add	local04, objptr
09f3c     16 13 02 FB | 	rdlong	arg01, local04
09f40     B0 01 00 FF 
09f44     16 15 06 F6 | 	mov	arg02, ##@LR__5783
09f48     35 00 00 FF 
09f4c     0C E4 85 F1 | 	sub	objptr, ##27148
09f50     EC BF B1 FD | 	call	#__system___string_cmp
09f54     00 FA 0D F2 | 	cmp	result1, #0 wz
09f58     E8 01 90 5D |  if_ne	jmp	#LR__0894
09f5c                 | '     select case lparts(l+1).part$
09f5c     1C 3D 02 F6 | 	mov	local12, local10
09f60     01 3C 06 F1 | 	add	local12, #1
09f64     03 3C 66 F0 | 	shl	local12, #3
09f68     35 00 00 FF 
09f6c     0C E4 05 F1 | 	add	objptr, ##27148
09f70     F2 3C 02 F1 | 	add	local12, objptr
09f74     1E 45 02 FB | 	rdlong	local16, local12
09f78     B0 01 00 FF 
09f7c     19 15 06 F6 | 	mov	arg02, ##@LR__5784
09f80     22 13 02 F6 | 	mov	arg01, local16
09f84     35 00 00 FF 
09f88     0C E4 85 F1 | 	sub	objptr, ##27148
09f8c     B0 BF B1 FD | 	call	#__system___string_cmp
09f90     00 FA 0D F2 | 	cmp	result1, #0 wz
09f94     0C 01 90 AD |  if_e	jmp	#LR__0880
09f98     B0 01 00 FF 
09f9c     1E 15 06 F6 | 	mov	arg02, ##@LR__5785
09fa0     22 13 02 F6 | 	mov	arg01, local16
09fa4     98 BF B1 FD | 	call	#__system___string_cmp
09fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
09fac     00 01 90 AD |  if_e	jmp	#LR__0881
09fb0     B0 01 00 FF 
09fb4     24 15 06 F6 | 	mov	arg02, ##@LR__5786
09fb8     22 13 02 F6 | 	mov	arg01, local16
09fbc     80 BF B1 FD | 	call	#__system___string_cmp
09fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
09fc4     F4 00 90 AD |  if_e	jmp	#LR__0882
09fc8     B0 01 00 FF 
09fcc     2A 15 06 F6 | 	mov	arg02, ##@LR__5787
09fd0     22 13 02 F6 | 	mov	arg01, local16
09fd4     68 BF B1 FD | 	call	#__system___string_cmp
09fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
09fdc     E8 00 90 AD |  if_e	jmp	#LR__0883
09fe0     B0 01 00 FF 
09fe4     31 15 06 F6 | 	mov	arg02, ##@LR__5788
09fe8     22 13 02 F6 | 	mov	arg01, local16
09fec     50 BF B1 FD | 	call	#__system___string_cmp
09ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
09ff4     DC 00 90 AD |  if_e	jmp	#LR__0884
09ff8     B0 01 00 FF 
09ffc     36 15 06 F6 | 	mov	arg02, ##@LR__5789
0a000     22 13 02 F6 | 	mov	arg01, local16
0a004     38 BF B1 FD | 	call	#__system___string_cmp
0a008     00 FA 0D F2 | 	cmp	result1, #0 wz
0a00c     D0 00 90 AD |  if_e	jmp	#LR__0885
0a010     B0 01 00 FF 
0a014     3E 15 06 F6 | 	mov	arg02, ##@LR__5790
0a018     22 13 02 F6 | 	mov	arg01, local16
0a01c     20 BF B1 FD | 	call	#__system___string_cmp
0a020     00 FA 0D F2 | 	cmp	result1, #0 wz
0a024     C4 00 90 AD |  if_e	jmp	#LR__0886
0a028     B0 01 00 FF 
0a02c     44 15 06 F6 | 	mov	arg02, ##@LR__5791
0a030     22 13 02 F6 | 	mov	arg01, local16
0a034     08 BF B1 FD | 	call	#__system___string_cmp
0a038     00 FA 0D F2 | 	cmp	result1, #0 wz
0a03c     B8 00 90 AD |  if_e	jmp	#LR__0887
0a040     B0 01 00 FF 
0a044     4A 15 06 F6 | 	mov	arg02, ##@LR__5792
0a048     22 13 02 F6 | 	mov	arg01, local16
0a04c     F0 BE B1 FD | 	call	#__system___string_cmp
0a050     00 FA 0D F2 | 	cmp	result1, #0 wz
0a054     AC 00 90 AD |  if_e	jmp	#LR__0888
0a058     B0 01 00 FF 
0a05c     51 15 06 F6 | 	mov	arg02, ##@LR__5793
0a060     22 13 02 F6 | 	mov	arg01, local16
0a064     D8 BE B1 FD | 	call	#__system___string_cmp
0a068     00 FA 0D F2 | 	cmp	result1, #0 wz
0a06c     A0 00 90 AD |  if_e	jmp	#LR__0889
0a070     B0 01 00 FF 
0a074     58 15 06 F6 | 	mov	arg02, ##@LR__5794
0a078     22 13 02 F6 | 	mov	arg01, local16
0a07c     C0 BE B1 FD | 	call	#__system___string_cmp
0a080     00 FA 0D F2 | 	cmp	result1, #0 wz
0a084     94 00 90 AD |  if_e	jmp	#LR__0890
0a088     B0 01 00 FF 
0a08c     5F 15 06 F6 | 	mov	arg02, ##@LR__5795
0a090     22 13 02 F6 | 	mov	arg01, local16
0a094     A8 BE B1 FD | 	call	#__system___string_cmp
0a098     00 FA 0D F2 | 	cmp	result1, #0 wz
0a09c     88 00 90 AD |  if_e	jmp	#LR__0891
0a0a0     90 00 90 FD | 	jmp	#LR__0892
0a0a4                 | LR__0880
0a0a4     01 41 06 F6 | 	mov	local14, #257
0a0a8     01 42 06 F6 | 	mov	local15, #1
0a0ac     94 00 90 FD | 	jmp	#LR__0894
0a0b0                 | LR__0881
0a0b0     02 41 06 F6 | 	mov	local14, #258
0a0b4     01 42 06 F6 | 	mov	local15, #1
0a0b8     88 00 90 FD | 	jmp	#LR__0894
0a0bc                 | LR__0882
0a0bc     03 41 06 F6 | 	mov	local14, #259
0a0c0     02 42 06 F6 | 	mov	local15, #2
0a0c4     7C 00 90 FD | 	jmp	#LR__0894
0a0c8                 | LR__0883
0a0c8     04 41 06 F6 | 	mov	local14, #260
0a0cc     02 42 06 F6 | 	mov	local15, #2
0a0d0     70 00 90 FD | 	jmp	#LR__0894
0a0d4                 | LR__0884
0a0d4     05 41 06 F6 | 	mov	local14, #261
0a0d8     04 42 06 F6 | 	mov	local15, #4
0a0dc     64 00 90 FD | 	jmp	#LR__0894
0a0e0                 | LR__0885
0a0e0     05 41 06 F6 | 	mov	local14, #261
0a0e4     04 42 06 F6 | 	mov	local15, #4
0a0e8     58 00 90 FD | 	jmp	#LR__0894
0a0ec                 | LR__0886
0a0ec     06 41 06 F6 | 	mov	local14, #262
0a0f0     04 42 06 F6 | 	mov	local15, #4
0a0f4     4C 00 90 FD | 	jmp	#LR__0894
0a0f8                 | LR__0887
0a0f8     07 41 06 F6 | 	mov	local14, #263
0a0fc     08 42 06 F6 | 	mov	local15, #8
0a100     40 00 90 FD | 	jmp	#LR__0894
0a104                 | LR__0888
0a104     08 41 06 F6 | 	mov	local14, #264
0a108     08 42 06 F6 | 	mov	local15, #8
0a10c     34 00 90 FD | 	jmp	#LR__0894
0a110                 | LR__0889
0a110     09 41 06 F6 | 	mov	local14, #265
0a114     04 42 06 F6 | 	mov	local15, #4
0a118     28 00 90 FD | 	jmp	#LR__0894
0a11c                 | LR__0890
0a11c     0A 41 06 F6 | 	mov	local14, #266
0a120     08 42 06 F6 | 	mov	local15, #8
0a124     1C 00 90 FD | 	jmp	#LR__0894
0a128                 | LR__0891
0a128     0B 41 06 F6 | 	mov	local14, #267
0a12c     04 42 06 F6 | 	mov	local15, #4
0a130     10 00 90 FD | 	jmp	#LR__0894
0a134                 | LR__0892
0a134     2F FA 05 F6 | 	mov	result1, #47
0a138     08 01 90 FD | 	jmp	#LR__0895
0a13c                 | LR__0893
0a13c                 | '   return 46
0a13c     2E FA 05 F6 | 	mov	result1, #46
0a140     00 01 90 FD | 	jmp	#LR__0895
0a144                 | LR__0894
0a144     13 43 02 FD | 	qmul	local15, local01
0a148     18 32 62 FD | 	getqx	local07
0a14c     14 33 02 FD | 	qmul	local07, local02
0a150     18 44 62 FD | 	getqx	local16
0a154     15 45 02 FD | 	qmul	local16, local03
0a158     52 00 00 FF 
0a15c     98 E4 05 F1 | 	add	objptr, ##42136
0a160     F2 46 02 FB | 	rdlong	local17, objptr
0a164     20 15 02 F6 | 	mov	arg02, local14
0a168     18 44 62 FD | 	getqx	local16
0a16c     22 47 82 F1 | 	sub	local17, local16
0a170     10 46 86 F1 | 	sub	local17, #16
0a174     0F 46 26 F5 | 	andn	local17, #15
0a178     F2 46 62 FC | 	wrlong	local17, objptr
0a17c     52 00 00 FF 
0a180     98 E4 85 F1 | 	sub	objptr, ##42136
0a184     23 13 02 F6 | 	mov	arg01, local17
0a188     88 85 B1 FD | 	call	#_psdpoke
0a18c     23 13 02 F6 | 	mov	arg01, local17
0a190     02 12 06 F1 | 	add	arg01, #2
0a194     21 15 02 F6 | 	mov	arg02, local15
0a198     78 85 B1 FD | 	call	#_psdpoke
0a19c     23 13 02 F6 | 	mov	arg01, local17
0a1a0     04 12 06 F1 | 	add	arg01, #4
0a1a4     13 15 02 F6 | 	mov	arg02, local01
0a1a8     20 85 B1 FD | 	call	#_pslpoke
0a1ac     23 13 02 F6 | 	mov	arg01, local17
0a1b0     08 12 06 F1 | 	add	arg01, #8
0a1b4     14 15 02 F6 | 	mov	arg02, local02
0a1b8     10 85 B1 FD | 	call	#_pslpoke
0a1bc     23 13 02 F6 | 	mov	arg01, local17
0a1c0     0C 12 06 F1 | 	add	arg01, #12
0a1c4     15 15 02 F6 | 	mov	arg02, local03
0a1c8     00 85 B1 FD | 	call	#_pslpoke
0a1cc     18 3D 02 F6 | 	mov	local12, local06
0a1d0     04 3C 66 F0 | 	shl	local12, #4
0a1d4     14 00 00 FF 
0a1d8     F8 E5 05 F1 | 	add	objptr, ##10744
0a1dc     F2 3C 02 F1 | 	add	local12, objptr
0a1e0     1E 2F 62 FC | 	wrlong	local05, local12
0a1e4     18 3D 02 F6 | 	mov	local12, local06
0a1e8     04 3C 66 F0 | 	shl	local12, #4
0a1ec     F2 3C 02 F1 | 	add	local12, objptr
0a1f0     04 3C 06 F1 | 	add	local12, #4
0a1f4     1E 47 62 FC | 	wrlong	local17, local12
0a1f8     18 3D 02 F6 | 	mov	local12, local06
0a1fc     04 3C 66 F0 | 	shl	local12, #4
0a200     F2 3C 02 F1 | 	add	local12, objptr
0a204     0C 3C 06 F1 | 	add	local12, #12
0a208     1E 41 62 FC | 	wrlong	local14, local12
0a20c                 | ' memtop=arrayptr
0a20c                 | ' psdpoke arrayptr,arraytype 
0a20c                 | ' psdpoke arrayptr+2,esize 
0a20c                 | ' pslpoke arrayptr+4,dims(0)
0a20c                 | ' pslpoke arrayptr+8,dims(1)
0a20c                 | ' pslpoke arrayptr+12,dims(2)
0a20c                 | ' variables(j).name=varname2$
0a20c                 | ' variables(j).value.uresult=arrayptr
0a20c                 | ' variables(j).vartype=arraytype
0a20c                 | ' if j=varnum then varnum+=1
0a20c     20 00 00 FF 
0a210     10 E4 05 F1 | 	add	objptr, ##16400
0a214     F2 32 02 FB | 	rdlong	local07, objptr
0a218     35 00 00 FF 
0a21c     08 E4 85 F1 | 	sub	objptr, ##27144
0a220     19 31 0A F2 | 	cmp	local06, local07 wz
0a224     35 00 00 AF 
0a228     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a22c     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a230     01 32 06 A1 |  if_e	add	local07, #1
0a234     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a238     35 00 00 AF 
0a23c     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a240                 | ' return 0
0a240     00 FA 05 F6 | 	mov	result1, #0
0a244                 | LR__0895
0a244     A7 F0 03 F6 | 	mov	ptra, fp
0a248     B2 00 A0 FD | 	call	#popregs_
0a24c                 | _compile_dim_ret
0a24c     2D 00 64 FD | 	ret
0a250                 | 
0a250                 | ' 
0a250                 | ' '----- compile 'for' command. 
0a250                 | ' 
0a250                 | ' function compile_for() as ulong  
0a250                 | _compile_for
0a250     0E 4A 05 F6 | 	mov	COUNT_, #14
0a254     A8 00 A0 FD | 	call	#pushregs_
0a258                 | ' 
0a258                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a258     37 00 00 FF 
0a25c     44 E4 05 F1 | 	add	objptr, ##28228
0a260     F2 14 02 FB | 	rdlong	arg02, objptr
0a264     01 14 06 F1 | 	add	arg02, #1
0a268     03 14 66 F0 | 	shl	arg02, #3
0a26c     02 00 00 FF 
0a270     38 E4 85 F1 | 	sub	objptr, ##1080
0a274     F2 14 02 F1 | 	add	arg02, objptr
0a278     0A 13 02 FB | 	rdlong	arg01, arg02
0a27c     35 00 00 FF 
0a280     0C E4 85 F1 | 	sub	objptr, ##27148
0a284                 | ' 
0a284                 | ' select case s
0a284     AE 01 00 FF 
0a288     48 14 06 F6 | 	mov	arg02, ##@LR__5521
0a28c     B0 BC B1 FD | 	call	#__system___string_cmp
0a290     00 FA 0D F2 | 	cmp	result1, #0 wz
0a294     1B FA 05 A6 |  if_e	mov	result1, #27
0a298     00 FA 05 56 |  if_ne	mov	result1, #0
0a29c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2a0     0C 00 90 AD |  if_e	jmp	#LR__0900
0a2a4     05 12 06 F6 | 	mov	arg01, #5
0a2a8     A8 DB BF FD | 	call	#_compile_immediate_assign
0a2ac     08 00 90 FD | 	jmp	#LR__0901
0a2b0                 | LR__0900
0a2b0     20 FA 05 F6 | 	mov	result1, #32
0a2b4     58 08 90 FD | 	jmp	#LR__0917
0a2b8                 | LR__0901
0a2b8     4A 00 00 FF 
0a2bc     7C E4 05 F1 | 	add	objptr, ##38012
0a2c0     F2 14 02 FB | 	rdlong	arg02, objptr
0a2c4     0A 13 02 F6 | 	mov	arg01, arg02
0a2c8     01 12 86 F1 | 	sub	arg01, #1
0a2cc     09 2D 02 F6 | 	mov	local04, arg01
0a2d0     01 2C 66 F0 | 	shl	local04, #1
0a2d4     09 2D 02 F1 | 	add	local04, arg01
0a2d8     02 2C 66 F0 | 	shl	local04, #2
0a2dc     03 00 00 FF 
0a2e0     00 E4 85 F1 | 	sub	objptr, ##1536
0a2e4     F2 2C 02 F1 | 	add	local04, objptr
0a2e8     16 27 02 FB | 	rdlong	local01, local04
0a2ec     04 2C 06 F1 | 	add	local04, #4
0a2f0     16 2F 02 FB | 	rdlong	local05, local04
0a2f4     01 14 86 F1 | 	sub	arg02, #1
0a2f8     0A 2D 02 F6 | 	mov	local04, arg02
0a2fc     01 2C 66 F0 | 	shl	local04, #1
0a300     0A 2D 02 F1 | 	add	local04, arg02
0a304     02 2C 66 F0 | 	shl	local04, #2
0a308     F2 30 02 F6 | 	mov	local06, objptr
0a30c     F2 2C 02 F1 | 	add	local04, objptr
0a310     08 2C 06 F1 | 	add	local04, #8
0a314     16 2D 02 FB | 	rdlong	local04, local04
0a318     17 29 02 F6 | 	mov	local02, local05
0a31c     16 2B 02 F6 | 	mov	local03, local04
0a320                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a320     17 2A 0E F2 | 	cmp	local03, #23 wz
0a324     47 00 00 FF 
0a328     7C E4 85 F1 | 	sub	objptr, ##36476
0a32c     22 FA 05 56 |  if_ne	mov	result1, #34
0a330     DC 07 90 5D |  if_ne	jmp	#LR__0917
0a334     13 33 02 F6 | 	mov	local07, local01
0a338                 | ' varnum=t1.result.uresult
0a338                 | ' if lparts(ct).part$<>"to" then return 33
0a338     37 00 00 FF 
0a33c     44 E4 05 F1 | 	add	objptr, ##28228
0a340     F2 2C 02 FB | 	rdlong	local04, objptr
0a344     03 2C 66 F0 | 	shl	local04, #3
0a348     02 00 00 FF 
0a34c     38 E4 85 F1 | 	sub	objptr, ##1080
0a350     F2 2C 02 F1 | 	add	local04, objptr
0a354     16 13 02 FB | 	rdlong	arg01, local04
0a358     B0 01 00 FF 
0a35c     66 15 06 F6 | 	mov	arg02, ##@LR__5796
0a360     35 00 00 FF 
0a364     0C E4 85 F1 | 	sub	objptr, ##27148
0a368     D4 BB B1 FD | 	call	#__system___string_cmp
0a36c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a370     21 FA 05 56 |  if_ne	mov	result1, #33
0a374     98 07 90 5D |  if_ne	jmp	#LR__0917
0a378     37 00 00 FF 
0a37c     44 E4 05 F1 | 	add	objptr, ##28228
0a380     F2 34 02 FB | 	rdlong	local08, objptr
0a384     01 34 06 F1 | 	add	local08, #1
0a388     F2 34 62 FC | 	wrlong	local08, objptr
0a38c     37 00 00 FF 
0a390     44 E4 85 F1 | 	sub	objptr, ##28228
0a394     2C 17 B0 FD | 	call	#_expr
0a398                 | ' ct+=1
0a398                 | ' expr()  										' there is "to" value pushed on the stack
0a398                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a398     37 00 00 FF 
0a39c     44 E4 05 F1 | 	add	objptr, ##28228
0a3a0     F2 2C 02 FB | 	rdlong	local04, objptr
0a3a4     03 2C 66 F0 | 	shl	local04, #3
0a3a8     02 00 00 FF 
0a3ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a3b0     F2 2C 02 F1 | 	add	local04, objptr
0a3b4     16 13 02 FB | 	rdlong	arg01, local04
0a3b8     B0 01 00 FF 
0a3bc     69 15 06 F6 | 	mov	arg02, ##@LR__5797
0a3c0     35 00 00 FF 
0a3c4     0C E4 85 F1 | 	sub	objptr, ##27148
0a3c8     74 BB B1 FD | 	call	#__system___string_cmp
0a3cc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3d0     48 00 90 AD |  if_e	jmp	#LR__0902
0a3d4     37 00 00 FF 
0a3d8     44 E4 05 F1 | 	add	objptr, ##28228
0a3dc     F2 2C 02 FB | 	rdlong	local04, objptr
0a3e0     03 2C 66 F0 | 	shl	local04, #3
0a3e4     02 00 00 FF 
0a3e8     38 E4 85 F1 | 	sub	objptr, ##1080
0a3ec     F2 2C 02 F1 | 	add	local04, objptr
0a3f0     16 13 02 FB | 	rdlong	arg01, local04
0a3f4     02 14 06 F6 | 	mov	arg02, #2
0a3f8     35 00 00 FF 
0a3fc     0C E4 85 F1 | 	sub	objptr, ##27148
0a400     90 DB B1 FD | 	call	#__system__Left_S
0a404     FD 12 02 F6 | 	mov	arg01, result1
0a408     B0 01 00 FF 
0a40c     6E 15 06 F6 | 	mov	arg02, ##@LR__5798
0a410     2C BB B1 FD | 	call	#__system___string_cmp
0a414     00 FA 0D F2 | 	cmp	result1, #0 wz
0a418     9C 05 90 5D |  if_ne	jmp	#LR__0915
0a41c                 | LR__0902
0a41c                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a41c     37 00 00 FF 
0a420     44 E4 05 F1 | 	add	objptr, ##28228
0a424     F2 2C 02 FB | 	rdlong	local04, objptr
0a428     03 2C 66 F0 | 	shl	local04, #3
0a42c     02 00 00 FF 
0a430     38 E4 85 F1 | 	sub	objptr, ##1080
0a434     F2 2C 02 F1 | 	add	local04, objptr
0a438     16 13 02 FB | 	rdlong	arg01, local04
0a43c     02 14 06 F6 | 	mov	arg02, #2
0a440     35 00 00 FF 
0a444     0C E4 85 F1 | 	sub	objptr, ##27148
0a448     48 DB B1 FD | 	call	#__system__Left_S
0a44c     FD 12 02 F6 | 	mov	arg01, result1
0a450     B0 01 00 FF 
0a454     71 15 06 F6 | 	mov	arg02, ##@LR__5799
0a458     E4 BA B1 FD | 	call	#__system___string_cmp
0a45c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a460     30 05 90 5D |  if_ne	jmp	#LR__0914
0a464     37 00 00 FF 
0a468     44 E4 05 F1 | 	add	objptr, ##28228
0a46c     F2 2C 02 FB | 	rdlong	local04, objptr
0a470     03 2C 66 F0 | 	shl	local04, #3
0a474     02 00 00 FF 
0a478     38 E4 85 F1 | 	sub	objptr, ##1080
0a47c     F2 2C 02 F1 | 	add	local04, objptr
0a480     16 13 02 FB | 	rdlong	arg01, local04
0a484     35 00 00 FF 
0a488     0C E4 85 F1 | 	sub	objptr, ##27148
0a48c     09 37 02 F6 | 	mov	local09, arg01
0a490     97 06 48 FB | 	callpa	#(@LR__0904-@LR__0903)>>2,fcache_load_ptr_
0a494                 | LR__0903
0a494     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a498     01 36 06 51 |  if_ne	add	local09, #1
0a49c     F4 FF 9F 5D |  if_ne	jmp	#LR__0903
0a4a0                 | LR__0904
0a4a0     09 37 82 F1 | 	sub	local09, arg01
0a4a4     03 36 56 F2 | 	cmps	local09, #3 wc
0a4a8     E8 04 90 CD |  if_b	jmp	#LR__0914
0a4ac     37 00 00 FF 
0a4b0     44 E4 05 F1 | 	add	objptr, ##28228
0a4b4     F2 2C 02 FB | 	rdlong	local04, objptr
0a4b8     16 39 02 F6 | 	mov	local10, local04
0a4bc     03 38 66 F0 | 	shl	local10, #3
0a4c0     02 00 00 FF 
0a4c4     38 E4 85 F1 | 	sub	objptr, ##1080
0a4c8     F2 38 02 F1 | 	add	local10, objptr
0a4cc     03 2C 66 F0 | 	shl	local04, #3
0a4d0     F2 2C 02 F1 | 	add	local04, objptr
0a4d4     16 2D 02 FB | 	rdlong	local04, local04
0a4d8     02 00 00 FF 
0a4dc     38 E4 05 F1 | 	add	objptr, ##1080
0a4e0     F2 12 02 FB | 	rdlong	arg01, objptr
0a4e4     03 12 66 F0 | 	shl	arg01, #3
0a4e8     02 00 00 FF 
0a4ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a4f0     F2 12 02 F1 | 	add	arg01, objptr
0a4f4     09 13 02 FB | 	rdlong	arg01, arg01
0a4f8     35 00 00 FF 
0a4fc     0C E4 85 F1 | 	sub	objptr, ##27148
0a500     09 37 02 F6 | 	mov	local09, arg01
0a504     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0a508                 | LR__0905
0a508     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a50c     01 36 06 51 |  if_ne	add	local09, #1
0a510     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0a514                 | LR__0906
0a514     09 37 82 F1 | 	sub	local09, arg01
0a518     1B 15 02 F6 | 	mov	arg02, local09
0a51c     02 14 86 F1 | 	sub	arg02, #2
0a520     16 13 02 F6 | 	mov	arg01, local04
0a524     F4 DA B1 FD | 	call	#__system__Right_S
0a528     1C FB 61 FC | 	wrlong	result1, local10
0a52c     37 00 00 FF 
0a530     44 E4 05 F1 | 	add	objptr, ##28228
0a534     F2 2C 02 FB | 	rdlong	local04, objptr
0a538     16 39 02 F6 | 	mov	local10, local04
0a53c     03 38 66 F0 | 	shl	local10, #3
0a540     02 00 00 FF 
0a544     38 E4 85 F1 | 	sub	objptr, ##1080
0a548     F2 38 02 F1 | 	add	local10, objptr
0a54c     03 2C 66 F0 | 	shl	local04, #3
0a550     F2 2C 02 F1 | 	add	local04, objptr
0a554     16 13 02 FB | 	rdlong	arg01, local04
0a558     35 00 00 FF 
0a55c     0C E4 85 F1 | 	sub	objptr, ##27148
0a560     F4 B6 BF FD | 	call	#_isfunction
0a564     FD FA E1 F8 | 	getbyte	result1, result1, #0
0a568     04 38 06 F1 | 	add	local10, #4
0a56c     1C FB 61 FC | 	wrlong	result1, local10
0a570                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0a570     37 00 00 FF 
0a574     44 E4 05 F1 | 	add	objptr, ##28228
0a578     F2 38 02 FB | 	rdlong	local10, objptr
0a57c     03 38 66 F0 | 	shl	local10, #3
0a580     02 00 00 FF 
0a584     38 E4 85 F1 | 	sub	objptr, ##1080
0a588     F2 38 02 F1 | 	add	local10, objptr
0a58c     04 38 06 F1 | 	add	local10, #4
0a590     1C 2D 02 FB | 	rdlong	local04, local10
0a594     01 2C 56 F2 | 	cmps	local04, #1 wc
0a598     35 00 00 FF 
0a59c     0C E4 85 F1 | 	sub	objptr, ##27148
0a5a0     D4 03 90 3D |  if_ae	jmp	#LR__0913
0a5a4     37 00 00 FF 
0a5a8     44 E4 05 F1 | 	add	objptr, ##28228
0a5ac     F2 2C 02 FB | 	rdlong	local04, objptr
0a5b0     16 39 02 F6 | 	mov	local10, local04
0a5b4     03 38 66 F0 | 	shl	local10, #3
0a5b8     02 00 00 FF 
0a5bc     38 E4 85 F1 | 	sub	objptr, ##1080
0a5c0     F2 38 02 F1 | 	add	local10, objptr
0a5c4     03 2C 66 F0 | 	shl	local04, #3
0a5c8     F2 2C 02 F1 | 	add	local04, objptr
0a5cc     16 13 02 FB | 	rdlong	arg01, local04
0a5d0     35 00 00 FF 
0a5d4     0C E4 85 F1 | 	sub	objptr, ##27148
0a5d8     30 A0 BF FD | 	call	#_isnotename
0a5dc     04 38 06 F1 | 	add	local10, #4
0a5e0     1C FB 61 FC | 	wrlong	result1, local10
0a5e4                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0a5e4                 | '     if lparts(ct).token>0 then 
0a5e4     37 00 00 FF 
0a5e8     44 E4 05 F1 | 	add	objptr, ##28228
0a5ec     F2 38 02 FB | 	rdlong	local10, objptr
0a5f0     03 38 66 F0 | 	shl	local10, #3
0a5f4     02 00 00 FF 
0a5f8     38 E4 85 F1 | 	sub	objptr, ##1080
0a5fc     F2 38 02 F1 | 	add	local10, objptr
0a600     04 38 06 F1 | 	add	local10, #4
0a604     1C 2D 02 FB | 	rdlong	local04, local10
0a608     01 2C 56 F2 | 	cmps	local04, #1 wc
0a60c     35 00 00 FF 
0a610     0C E4 85 F1 | 	sub	objptr, ##27148
0a614     94 00 90 CD |  if_b	jmp	#LR__0907
0a618     37 00 00 FF 
0a61c     44 E4 05 F1 | 	add	objptr, ##28228
0a620     F2 38 02 FB | 	rdlong	local10, objptr
0a624     03 38 66 F0 | 	shl	local10, #3
0a628     02 00 00 FF 
0a62c     38 E4 85 F1 | 	sub	objptr, ##1080
0a630     F2 38 02 F1 | 	add	local10, objptr
0a634     04 38 06 F1 | 	add	local10, #4
0a638     1C 13 02 FB | 	rdlong	arg01, local10
0a63c     35 00 00 FF 
0a640     0C E4 85 F1 | 	sub	objptr, ##27148
0a644     F8 C6 BF FD | 	call	#_getnoteval
0a648     FD 12 02 F6 | 	mov	arg01, result1
0a64c     37 00 00 FF 
0a650     44 E4 05 F1 | 	add	objptr, ##28228
0a654     F2 38 02 FB | 	rdlong	local10, objptr
0a658     03 38 66 F0 | 	shl	local10, #3
0a65c     02 00 00 FF 
0a660     38 E4 85 F1 | 	sub	objptr, ##1080
0a664     F2 38 02 F1 | 	add	local10, objptr
0a668     35 00 00 FF 
0a66c     0C E4 85 F1 | 	sub	objptr, ##27148
0a670     18 DB B1 FD | 	call	#__system__str_S
0a674     1C FB 61 FC | 	wrlong	result1, local10
0a678     37 00 00 FF 
0a67c     44 E4 05 F1 | 	add	objptr, ##28228
0a680     F2 38 02 FB | 	rdlong	local10, objptr
0a684     03 38 66 F0 | 	shl	local10, #3
0a688     02 00 00 FF 
0a68c     38 E4 85 F1 | 	sub	objptr, ##1080
0a690     F2 38 02 F1 | 	add	local10, objptr
0a694     04 38 06 F1 | 	add	local10, #4
0a698     01 00 80 FF 
0a69c     1C 05 68 FC | 	wrlong	##514, local10
0a6a0     35 00 00 FF 
0a6a4     0C E4 85 F1 | 	sub	objptr, ##27148
0a6a8     CC 02 90 FD | 	jmp	#LR__0913
0a6ac                 | LR__0907
0a6ac     37 00 00 FF 
0a6b0     44 E4 05 F1 | 	add	objptr, ##28228
0a6b4     F2 2C 02 FB | 	rdlong	local04, objptr
0a6b8     16 39 02 F6 | 	mov	local10, local04
0a6bc     03 38 66 F0 | 	shl	local10, #3
0a6c0     02 00 00 FF 
0a6c4     38 E4 85 F1 | 	sub	objptr, ##1080
0a6c8     F2 38 02 F1 | 	add	local10, objptr
0a6cc     03 2C 66 F0 | 	shl	local04, #3
0a6d0     F2 2C 02 F1 | 	add	local04, objptr
0a6d4     16 13 02 FB | 	rdlong	arg01, local04
0a6d8     35 00 00 FF 
0a6dc     0C E4 85 F1 | 	sub	objptr, ##27148
0a6e0     A8 9E BF FD | 	call	#_isconstant
0a6e4     04 38 06 F1 | 	add	local10, #4
0a6e8     1C FB 61 FC | 	wrlong	result1, local10
0a6ec                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0a6ec     37 00 00 FF 
0a6f0     44 E4 05 F1 | 	add	objptr, ##28228
0a6f4     F2 38 02 FB | 	rdlong	local10, objptr
0a6f8     03 38 66 F0 | 	shl	local10, #3
0a6fc     02 00 00 FF 
0a700     38 E4 85 F1 | 	sub	objptr, ##1080
0a704     F2 38 02 F1 | 	add	local10, objptr
0a708     04 38 06 F1 | 	add	local10, #4
0a70c     1C 2D 02 FB | 	rdlong	local04, local10
0a710     01 2C 56 F2 | 	cmps	local04, #1 wc
0a714     35 00 00 FF 
0a718     0C E4 85 F1 | 	sub	objptr, ##27148
0a71c     8C 00 90 CD |  if_b	jmp	#LR__0908
0a720     37 00 00 FF 
0a724     44 E4 05 F1 | 	add	objptr, ##28228
0a728     F2 34 02 FB | 	rdlong	local08, objptr
0a72c     1A 39 02 F6 | 	mov	local10, local08
0a730     03 38 66 F0 | 	shl	local10, #3
0a734     02 00 00 FF 
0a738     38 E4 85 F1 | 	sub	objptr, ##1080
0a73c     F2 38 02 F1 | 	add	local10, objptr
0a740     03 34 66 F0 | 	shl	local08, #3
0a744     F2 34 02 F1 | 	add	local08, objptr
0a748     04 34 06 F1 | 	add	local08, #4
0a74c     1A 13 02 FB | 	rdlong	arg01, local08
0a750     35 00 00 FF 
0a754     0C E4 85 F1 | 	sub	objptr, ##27148
0a758     09 13 52 F6 | 	abs	arg01, arg01 wc
0a75c     1F 3A C6 C9 |  if_b	decod	local11, #31
0a760     00 3A 06 36 |  if_ae	mov	local11, #0
0a764     24 E2 B1 FD | 	call	#__system___float_fromuns
0a768     1D FB 61 F5 | 	xor	result1, local11
0a76c     FD 12 02 F6 | 	mov	arg01, result1
0a770     18 DA B1 FD | 	call	#__system__str_S
0a774     1C FB 61 FC | 	wrlong	result1, local10
0a778     37 00 00 FF 
0a77c     44 E4 05 F1 | 	add	objptr, ##28228
0a780     F2 38 02 FB | 	rdlong	local10, objptr
0a784     03 38 66 F0 | 	shl	local10, #3
0a788     02 00 00 FF 
0a78c     38 E4 85 F1 | 	sub	objptr, ##1080
0a790     F2 38 02 F1 | 	add	local10, objptr
0a794     04 38 06 F1 | 	add	local10, #4
0a798     01 00 80 FF 
0a79c     1C 03 68 FC | 	wrlong	##513, local10
0a7a0     35 00 00 FF 
0a7a4     0C E4 85 F1 | 	sub	objptr, ##27148
0a7a8     CC 01 90 FD | 	jmp	#LR__0913
0a7ac                 | LR__0908
0a7ac     37 00 00 FF 
0a7b0     44 E4 05 F1 | 	add	objptr, ##28228
0a7b4     F2 38 02 FB | 	rdlong	local10, objptr
0a7b8     03 38 66 F0 | 	shl	local10, #3
0a7bc     02 00 00 FF 
0a7c0     38 E4 85 F1 | 	sub	objptr, ##1080
0a7c4     F2 38 02 F1 | 	add	local10, objptr
0a7c8     1C 13 02 FB | 	rdlong	arg01, local10
0a7cc     35 00 00 FF 
0a7d0     0C E4 85 F1 | 	sub	objptr, ##27148
0a7d4     B4 BD BF FD | 	call	#_isnum
0a7d8     FD 3C 02 F6 | 	mov	local12, result1
0a7dc     37 00 00 FF 
0a7e0     44 E4 05 F1 | 	add	objptr, ##28228
0a7e4     F2 38 02 FB | 	rdlong	local10, objptr
0a7e8     03 38 66 F0 | 	shl	local10, #3
0a7ec     02 00 00 FF 
0a7f0     38 E4 85 F1 | 	sub	objptr, ##1080
0a7f4     F2 38 02 F1 | 	add	local10, objptr
0a7f8     1C 13 02 FB | 	rdlong	arg01, local10
0a7fc     35 00 00 FF 
0a800     0C E4 85 F1 | 	sub	objptr, ##27148
0a804     70 C1 BF FD | 	call	#_isint
0a808     FD 3E 02 F6 | 	mov	local13, result1
0a80c     37 00 00 FF 
0a810     44 E4 05 F1 | 	add	objptr, ##28228
0a814     F2 38 02 FB | 	rdlong	local10, objptr
0a818     03 38 66 F0 | 	shl	local10, #3
0a81c     02 00 00 FF 
0a820     38 E4 85 F1 | 	sub	objptr, ##1080
0a824     F2 38 02 F1 | 	add	local10, objptr
0a828     1C 13 02 FB | 	rdlong	arg01, local10
0a82c     35 00 00 FF 
0a830     0C E4 85 F1 | 	sub	objptr, ##27148
0a834     E4 C3 BF FD | 	call	#_isdec
0a838     FD 40 02 F6 | 	mov	local14, result1
0a83c                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0a83c                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0a83c     00 3C 0E F2 | 	cmp	local12, #0 wz
0a840     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0a844     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0a848     34 00 90 AD |  if_e	jmp	#LR__0909
0a84c     37 00 00 FF 
0a850     44 E4 05 F1 | 	add	objptr, ##28228
0a854     F2 38 02 FB | 	rdlong	local10, objptr
0a858     03 38 66 F0 | 	shl	local10, #3
0a85c     02 00 00 FF 
0a860     38 E4 85 F1 | 	sub	objptr, ##1080
0a864     F2 38 02 F1 | 	add	local10, objptr
0a868     04 38 06 F1 | 	add	local10, #4
0a86c     01 00 80 FF 
0a870     1C 01 68 FC | 	wrlong	##512, local10
0a874     35 00 00 FF 
0a878     0C E4 85 F1 | 	sub	objptr, ##27148
0a87c     F8 00 90 FD | 	jmp	#LR__0913
0a880                 | LR__0909
0a880                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0a880     00 3C 0E F2 | 	cmp	local12, #0 wz
0a884     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0a888     20 35 22 56 |  if_ne	not	local08, local14
0a88c     00 34 0E 52 |  if_ne	cmp	local08, #0 wz
0a890     34 00 90 AD |  if_e	jmp	#LR__0910
0a894     37 00 00 FF 
0a898     44 E4 05 F1 | 	add	objptr, ##28228
0a89c     F2 38 02 FB | 	rdlong	local10, objptr
0a8a0     03 38 66 F0 | 	shl	local10, #3
0a8a4     02 00 00 FF 
0a8a8     38 E4 85 F1 | 	sub	objptr, ##1080
0a8ac     F2 38 02 F1 | 	add	local10, objptr
0a8b0     04 38 06 F1 | 	add	local10, #4
0a8b4     01 00 80 FF 
0a8b8     1C 03 68 FC | 	wrlong	##513, local10
0a8bc     35 00 00 FF 
0a8c0     0C E4 85 F1 | 	sub	objptr, ##27148
0a8c4     B0 00 90 FD | 	jmp	#LR__0913
0a8c8                 | LR__0910
0a8c8                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0a8c8     00 3C 0E F2 | 	cmp	local12, #0 wz
0a8cc     1F 3F 22 56 |  if_ne	not	local13, local13
0a8d0     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0a8d4     20 41 22 56 |  if_ne	not	local14, local14
0a8d8     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0a8dc     34 00 90 AD |  if_e	jmp	#LR__0911
0a8e0     37 00 00 FF 
0a8e4     44 E4 05 F1 | 	add	objptr, ##28228
0a8e8     F2 38 02 FB | 	rdlong	local10, objptr
0a8ec     03 38 66 F0 | 	shl	local10, #3
0a8f0     02 00 00 FF 
0a8f4     38 E4 85 F1 | 	sub	objptr, ##1080
0a8f8     F2 38 02 F1 | 	add	local10, objptr
0a8fc     04 38 06 F1 | 	add	local10, #4
0a900     01 00 80 FF 
0a904     1C 05 68 FC | 	wrlong	##514, local10
0a908     35 00 00 FF 
0a90c     0C E4 85 F1 | 	sub	objptr, ##27148
0a910     64 00 90 FD | 	jmp	#LR__0913
0a914                 | LR__0911
0a914                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0a914     37 00 00 FF 
0a918     44 E4 05 F1 | 	add	objptr, ##28228
0a91c     F2 38 02 FB | 	rdlong	local10, objptr
0a920     03 38 66 F0 | 	shl	local10, #3
0a924     02 00 00 FF 
0a928     38 E4 85 F1 | 	sub	objptr, ##1080
0a92c     F2 38 02 F1 | 	add	local10, objptr
0a930     1C 13 02 FB | 	rdlong	arg01, local10
0a934     35 00 00 FF 
0a938     0C E4 85 F1 | 	sub	objptr, ##27148
0a93c     D8 B9 BF FD | 	call	#_isname
0a940     00 FA 0D F2 | 	cmp	result1, #0 wz
0a944     30 00 90 AD |  if_e	jmp	#LR__0912
0a948     37 00 00 FF 
0a94c     44 E4 05 F1 | 	add	objptr, ##28228
0a950     F2 38 02 FB | 	rdlong	local10, objptr
0a954     03 38 66 F0 | 	shl	local10, #3
0a958     02 00 00 FF 
0a95c     38 E4 85 F1 | 	sub	objptr, ##1080
0a960     F2 38 02 F1 | 	add	local10, objptr
0a964     04 38 06 F1 | 	add	local10, #4
0a968     01 00 80 FF 
0a96c     1C 09 68 FC | 	wrlong	##516, local10
0a970     35 00 00 FF 
0a974     0C E4 85 F1 | 	sub	objptr, ##27148
0a978                 | LR__0912
0a978                 | LR__0913
0a978     37 00 00 FF 
0a97c     44 E4 05 F1 | 	add	objptr, ##28228
0a980     F2 34 02 FB | 	rdlong	local08, objptr
0a984     01 34 86 F1 | 	sub	local08, #1
0a988     F2 34 62 FC | 	wrlong	local08, objptr
0a98c     37 00 00 FF 
0a990     44 E4 85 F1 | 	sub	objptr, ##28228
0a994                 | LR__0914
0a994     37 00 00 FF 
0a998     44 E4 05 F1 | 	add	objptr, ##28228
0a99c     F2 34 02 FB | 	rdlong	local08, objptr
0a9a0     01 34 06 F1 | 	add	local08, #1
0a9a4     F2 34 62 FC | 	wrlong	local08, objptr
0a9a8     37 00 00 FF 
0a9ac     44 E4 85 F1 | 	sub	objptr, ##28228
0a9b0     10 11 B0 FD | 	call	#_expr
0a9b4     78 00 90 FD | 	jmp	#LR__0916
0a9b8                 | LR__0915
0a9b8     4A 00 00 FF 
0a9bc     7C E4 05 F1 | 	add	objptr, ##38012
0a9c0     F2 40 02 FB | 	rdlong	local14, objptr
0a9c4     20 39 02 F6 | 	mov	local10, local14
0a9c8     01 38 66 F0 | 	shl	local10, #1
0a9cc     20 39 02 F1 | 	add	local10, local14
0a9d0     02 38 66 F0 | 	shl	local10, #2
0a9d4     03 00 00 FF 
0a9d8     00 E4 85 F1 | 	sub	objptr, ##1536
0a9dc     F2 38 02 F1 | 	add	local10, objptr
0a9e0     08 38 06 F1 | 	add	local10, #8
0a9e4     1C 39 68 FC | 	wrlong	#28, local10
0a9e8     03 00 00 FF 
0a9ec     00 E4 05 F1 | 	add	objptr, ##1536
0a9f0     F2 40 02 FB | 	rdlong	local14, objptr
0a9f4     20 39 02 F6 | 	mov	local10, local14
0a9f8     01 38 66 F0 | 	shl	local10, #1
0a9fc     20 39 02 F1 | 	add	local10, local14
0aa00     02 38 66 F0 | 	shl	local10, #2
0aa04     03 00 00 FF 
0aa08     00 E4 85 F1 | 	sub	objptr, ##1536
0aa0c     F2 38 02 F1 | 	add	local10, objptr
0aa10     1C 03 68 FC | 	wrlong	#1, local10
0aa14     03 00 00 FF 
0aa18     00 E4 05 F1 | 	add	objptr, ##1536
0aa1c     F2 34 02 FB | 	rdlong	local08, objptr
0aa20     01 34 06 F1 | 	add	local08, #1
0aa24     F2 34 62 FC | 	wrlong	local08, objptr
0aa28     4A 00 00 FF 
0aa2c     7C E4 85 F1 | 	sub	objptr, ##38012
0aa30                 | LR__0916
0aa30     4A 00 00 FF 
0aa34     7C E4 05 F1 | 	add	objptr, ##38012
0aa38     F2 40 02 FB | 	rdlong	local14, objptr
0aa3c     20 39 02 F6 | 	mov	local10, local14
0aa40     01 38 66 F0 | 	shl	local10, #1
0aa44     20 39 02 F1 | 	add	local10, local14
0aa48     02 38 66 F0 | 	shl	local10, #2
0aa4c     03 00 00 FF 
0aa50     00 E4 85 F1 | 	sub	objptr, ##1536
0aa54     F2 38 02 F1 | 	add	local10, objptr
0aa58     08 38 06 F1 | 	add	local10, #8
0aa5c     1C 39 68 FC | 	wrlong	#28, local10
0aa60     03 00 00 FF 
0aa64     00 E4 05 F1 | 	add	objptr, ##1536
0aa68     F2 40 02 FB | 	rdlong	local14, objptr
0aa6c     20 39 02 F6 | 	mov	local10, local14
0aa70     01 38 66 F0 | 	shl	local10, #1
0aa74     20 39 02 F1 | 	add	local10, local14
0aa78     02 38 66 F0 | 	shl	local10, #2
0aa7c     03 00 00 FF 
0aa80     00 E4 85 F1 | 	sub	objptr, ##1536
0aa84     F2 38 02 F1 | 	add	local10, objptr
0aa88     1C 33 62 FC | 	wrlong	local07, local10
0aa8c     03 00 00 FF 
0aa90     00 E4 05 F1 | 	add	objptr, ##1536
0aa94     F2 40 02 FB | 	rdlong	local14, objptr
0aa98     01 40 06 F1 | 	add	local14, #1
0aa9c     F2 40 62 FC | 	wrlong	local14, objptr
0aaa0     20 39 02 F6 | 	mov	local10, local14
0aaa4     01 38 66 F0 | 	shl	local10, #1
0aaa8     20 39 02 F1 | 	add	local10, local14
0aaac     02 38 66 F0 | 	shl	local10, #2
0aab0     03 00 00 FF 
0aab4     00 E4 85 F1 | 	sub	objptr, ##1536
0aab8     F2 38 02 F1 | 	add	local10, objptr
0aabc     08 38 06 F1 | 	add	local10, #8
0aac0     1C 95 68 FC | 	wrlong	#74, local10
0aac4     03 00 00 FF 
0aac8     00 E4 05 F1 | 	add	objptr, ##1536
0aacc     F2 40 02 FB | 	rdlong	local14, objptr
0aad0     20 39 02 F6 | 	mov	local10, local14
0aad4     01 38 66 F0 | 	shl	local10, #1
0aad8     20 39 02 F1 | 	add	local10, local14
0aadc     02 38 66 F0 | 	shl	local10, #2
0aae0     03 00 00 FF 
0aae4     00 E4 85 F1 | 	sub	objptr, ##1536
0aae8     F2 38 02 F1 | 	add	local10, objptr
0aaec     1C 01 68 FC | 	wrlong	#0, local10
0aaf0     03 00 00 FF 
0aaf4     00 E4 05 F1 | 	add	objptr, ##1536
0aaf8     F2 34 02 FB | 	rdlong	local08, objptr
0aafc     01 34 06 F1 | 	add	local08, #1
0ab00     F2 34 62 FC | 	wrlong	local08, objptr
0ab04     4A 00 00 FF 
0ab08     7C E4 85 F1 | 	sub	objptr, ##38012
0ab0c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0ab0c                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0ab0c                 | ' return 0
0ab0c     00 FA 05 F6 | 	mov	result1, #0
0ab10                 | LR__0917
0ab10     A7 F0 03 F6 | 	mov	ptra, fp
0ab14     B2 00 A0 FD | 	call	#popregs_
0ab18                 | _compile_for_ret
0ab18     2D 00 64 FD | 	ret
0ab1c                 | 
0ab1c                 | ' 
0ab1c                 | ' '----- compile 'next' command. 
0ab1c                 | ' 
0ab1c                 | ' function compile_next() as ulong
0ab1c                 | _compile_next
0ab1c     04 4A 05 F6 | 	mov	COUNT_, #4
0ab20     A8 00 A0 FD | 	call	#pushregs_
0ab24     37 00 00 FF 
0ab28     44 E4 05 F1 | 	add	objptr, ##28228
0ab2c     F2 14 02 FB | 	rdlong	arg02, objptr
0ab30     03 14 66 F0 | 	shl	arg02, #3
0ab34     02 00 00 FF 
0ab38     38 E4 85 F1 | 	sub	objptr, ##1080
0ab3c     F2 14 02 F1 | 	add	arg02, objptr
0ab40     0A 27 02 FB | 	rdlong	local01, arg02
0ab44                 | ' 
0ab44                 | ' varname$=lparts(ct).part$ 
0ab44                 | ' if varnum=0 then return 35
0ab44     04 E4 85 F1 | 	sub	objptr, #4
0ab48     F2 14 0A FB | 	rdlong	arg02, objptr wz
0ab4c     35 00 00 FF 
0ab50     08 E4 85 F1 | 	sub	objptr, ##27144
0ab54     23 FA 05 A6 |  if_e	mov	result1, #35
0ab58     4C 01 90 AD |  if_e	jmp	#LR__0922
0ab5c     01 28 66 F6 | 	neg	local02, #1
0ab60                 | ' j=-1
0ab60                 | ' for i=0 to varnum-1
0ab60     00 2A 06 F6 | 	mov	local03, #0
0ab64     35 00 00 FF 
0ab68     08 E4 05 F1 | 	add	objptr, ##27144
0ab6c     F2 2C 02 FB | 	rdlong	local04, objptr
0ab70     35 00 00 FF 
0ab74     08 E4 85 F1 | 	sub	objptr, ##27144
0ab78                 | LR__0920
0ab78     16 2B 12 F2 | 	cmp	local03, local04 wc
0ab7c     38 00 90 3D |  if_ae	jmp	#LR__0921
0ab80                 | '   if variables(i).name=varname$ then j=i : exit
0ab80     15 15 02 F6 | 	mov	arg02, local03
0ab84     04 14 66 F0 | 	shl	arg02, #4
0ab88     14 00 00 FF 
0ab8c     F8 E5 05 F1 | 	add	objptr, ##10744
0ab90     F2 14 02 F1 | 	add	arg02, objptr
0ab94     0A 13 02 FB | 	rdlong	arg01, arg02
0ab98     13 15 02 F6 | 	mov	arg02, local01
0ab9c     14 00 00 FF 
0aba0     F8 E5 85 F1 | 	sub	objptr, ##10744
0aba4     98 B3 B1 FD | 	call	#__system___string_cmp
0aba8     00 FA 0D F2 | 	cmp	result1, #0 wz
0abac     15 29 02 A6 |  if_e	mov	local02, local03
0abb0     01 2A 06 51 |  if_ne	add	local03, #1
0abb4     C0 FF 9F 5D |  if_ne	jmp	#LR__0920
0abb8                 | LR__0921
0abb8                 | ' if j=-1 then return 35
0abb8     FF FF 7F FF 
0abbc     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0abc0     23 FA 05 A6 |  if_e	mov	result1, #35
0abc4     E0 00 90 AD |  if_e	jmp	#LR__0922
0abc8     4A 00 00 FF 
0abcc     7C E4 05 F1 | 	add	objptr, ##38012
0abd0     F2 2C 02 FB | 	rdlong	local04, objptr
0abd4     16 2B 02 F6 | 	mov	local03, local04
0abd8     01 2A 66 F0 | 	shl	local03, #1
0abdc     16 2B 02 F1 | 	add	local03, local04
0abe0     02 2A 66 F0 | 	shl	local03, #2
0abe4     03 00 00 FF 
0abe8     00 E4 85 F1 | 	sub	objptr, ##1536
0abec     F2 2A 02 F1 | 	add	local03, objptr
0abf0     08 2A 06 F1 | 	add	local03, #8
0abf4     15 39 68 FC | 	wrlong	#28, local03
0abf8     03 00 00 FF 
0abfc     00 E4 05 F1 | 	add	objptr, ##1536
0ac00     F2 2C 02 FB | 	rdlong	local04, objptr
0ac04     16 2B 02 F6 | 	mov	local03, local04
0ac08     01 2A 66 F0 | 	shl	local03, #1
0ac0c     16 2B 02 F1 | 	add	local03, local04
0ac10     02 2A 66 F0 | 	shl	local03, #2
0ac14     03 00 00 FF 
0ac18     00 E4 85 F1 | 	sub	objptr, ##1536
0ac1c     F2 2A 02 F1 | 	add	local03, objptr
0ac20     15 29 62 FC | 	wrlong	local02, local03
0ac24     03 00 00 FF 
0ac28     00 E4 05 F1 | 	add	objptr, ##1536
0ac2c     F2 2C 02 FB | 	rdlong	local04, objptr
0ac30     01 2C 06 F1 | 	add	local04, #1
0ac34     F2 2C 62 FC | 	wrlong	local04, objptr
0ac38     16 2B 02 F6 | 	mov	local03, local04
0ac3c     01 2A 66 F0 | 	shl	local03, #1
0ac40     16 2B 02 F1 | 	add	local03, local04
0ac44     02 2A 66 F0 | 	shl	local03, #2
0ac48     03 00 00 FF 
0ac4c     00 E4 85 F1 | 	sub	objptr, ##1536
0ac50     F2 2A 02 F1 | 	add	local03, objptr
0ac54     08 2A 06 F1 | 	add	local03, #8
0ac58     15 97 68 FC | 	wrlong	#75, local03
0ac5c     03 00 00 FF 
0ac60     00 E4 05 F1 | 	add	objptr, ##1536
0ac64     F2 2C 02 FB | 	rdlong	local04, objptr
0ac68     16 2B 02 F6 | 	mov	local03, local04
0ac6c     01 2A 66 F0 | 	shl	local03, #1
0ac70     16 2B 02 F1 | 	add	local03, local04
0ac74     02 2A 66 F0 | 	shl	local03, #2
0ac78     03 00 00 FF 
0ac7c     00 E4 85 F1 | 	sub	objptr, ##1536
0ac80     F2 2A 02 F1 | 	add	local03, objptr
0ac84     15 01 68 FC | 	wrlong	#0, local03
0ac88     03 00 00 FF 
0ac8c     00 E4 05 F1 | 	add	objptr, ##1536
0ac90     F2 2C 02 FB | 	rdlong	local04, objptr
0ac94     01 2C 06 F1 | 	add	local04, #1
0ac98     F2 2C 62 FC | 	wrlong	local04, objptr
0ac9c     4A 00 00 FF 
0aca0     7C E4 85 F1 | 	sub	objptr, ##38012
0aca4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0aca4                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0aca4                 | ' return 0
0aca4     00 FA 05 F6 | 	mov	result1, #0
0aca8                 | LR__0922
0aca8     A7 F0 03 F6 | 	mov	ptra, fp
0acac     B2 00 A0 FD | 	call	#popregs_
0acb0                 | _compile_next_ret
0acb0     2D 00 64 FD | 	ret
0acb4                 | 
0acb4                 | ' 
0acb4                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0acb4                 | ' 
0acb4                 | ' function compile_gosub() as ulong
0acb4                 | _compile_gosub
0acb4     02 4A 05 F6 | 	mov	COUNT_, #2
0acb8     A8 00 A0 FD | 	call	#pushregs_
0acbc     4A 00 00 FF 
0acc0     7C E4 05 F1 | 	add	objptr, ##38012
0acc4     F2 26 02 FB | 	rdlong	local01, objptr
0acc8     13 29 02 F6 | 	mov	local02, local01
0accc     01 28 66 F0 | 	shl	local02, #1
0acd0     13 29 02 F1 | 	add	local02, local01
0acd4     02 28 66 F0 | 	shl	local02, #2
0acd8     03 00 00 FF 
0acdc     00 E4 85 F1 | 	sub	objptr, ##1536
0ace0     F2 28 02 F1 | 	add	local02, objptr
0ace4     08 28 06 F1 | 	add	local02, #8
0ace8     14 53 69 FC | 	wrlong	#169, local02
0acec     03 00 00 FF 
0acf0     00 E4 05 F1 | 	add	objptr, ##1536
0acf4     F2 28 02 FB | 	rdlong	local02, objptr
0acf8     01 28 06 F1 | 	add	local02, #1
0acfc     F2 28 62 FC | 	wrlong	local02, objptr
0ad00     4A 00 00 FF 
0ad04     7C E4 85 F1 | 	sub	objptr, ##38012
0ad08     0C 00 B0 FD | 	call	#_compile_goto
0ad0c                 | ' compiledline(lineptr).result_type=token_gosub
0ad0c                 | ' lineptr+=1
0ad0c                 | ' err=compile_goto()
0ad0c                 | ' return err
0ad0c     A7 F0 03 F6 | 	mov	ptra, fp
0ad10     B2 00 A0 FD | 	call	#popregs_
0ad14                 | _compile_gosub_ret
0ad14     2D 00 64 FD | 	ret
0ad18                 | 
0ad18                 | ' 
0ad18                 | ' '----- compile 'goto' 
0ad18                 | ' 
0ad18                 | ' function compile_goto() as ulong
0ad18                 | _compile_goto
0ad18     03 4A 05 F6 | 	mov	COUNT_, #3
0ad1c     A8 00 A0 FD | 	call	#pushregs_
0ad20     34 F0 07 F1 | 	add	ptra, #52
0ad24                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0ad24     37 00 00 FF 
0ad28     44 E4 05 F1 | 	add	objptr, ##28228
0ad2c     F2 16 02 FB | 	rdlong	arg03, objptr
0ad30     03 16 66 F0 | 	shl	arg03, #3
0ad34     02 00 00 FF 
0ad38     38 E4 85 F1 | 	sub	objptr, ##1080
0ad3c     F2 16 02 F1 | 	add	arg03, objptr
0ad40     04 16 06 F1 | 	add	arg03, #4
0ad44     0B 17 02 FB | 	rdlong	arg03, arg03
0ad48     01 00 00 FF 
0ad4c     00 16 0E F2 | 	cmp	arg03, ##512 wz
0ad50     35 00 00 FF 
0ad54     0C E4 85 F1 | 	sub	objptr, ##27148
0ad58     CC 02 90 5D |  if_ne	jmp	#LR__0935
0ad5c     37 00 00 FF 
0ad60     44 E4 05 F1 | 	add	objptr, ##28228
0ad64     F2 16 02 FB | 	rdlong	arg03, objptr
0ad68     01 16 06 F1 | 	add	arg03, #1
0ad6c     03 16 66 F0 | 	shl	arg03, #3
0ad70     02 00 00 FF 
0ad74     38 E4 85 F1 | 	sub	objptr, ##1080
0ad78     F2 16 02 F1 | 	add	arg03, objptr
0ad7c     04 16 06 F1 | 	add	arg03, #4
0ad80     0B 17 02 FB | 	rdlong	arg03, arg03
0ad84     FE 17 0E F2 | 	cmp	arg03, #510 wz
0ad88     35 00 00 FF 
0ad8c     0C E4 85 F1 | 	sub	objptr, ##27148
0ad90     94 02 90 5D |  if_ne	jmp	#LR__0935
0ad94     37 00 00 FF 
0ad98     44 E4 05 F1 | 	add	objptr, ##28228
0ad9c     F2 16 02 FB | 	rdlong	arg03, objptr
0ada0     03 16 66 F0 | 	shl	arg03, #3
0ada4     02 00 00 FF 
0ada8     38 E4 85 F1 | 	sub	objptr, ##1080
0adac     F2 16 02 F1 | 	add	arg03, objptr
0adb0     0B 13 02 FB | 	rdlong	arg01, arg03
0adb4     00 14 06 F6 | 	mov	arg02, #0
0adb8     35 00 00 FF 
0adbc     0C E4 85 F1 | 	sub	objptr, ##27148
0adc0     44 E6 B1 FD | 	call	#__system____builtin_atoi
0adc4     04 4E 05 F1 | 	add	fp, #4
0adc8     A7 FA 61 FC | 	wrlong	result1, fp
0adcc     4A 00 00 FF 
0add0     7C E4 05 F1 | 	add	objptr, ##38012
0add4     F2 26 02 FB | 	rdlong	local01, objptr
0add8     13 29 02 F6 | 	mov	local02, local01
0addc     01 28 66 F0 | 	shl	local02, #1
0ade0     13 29 02 F1 | 	add	local02, local01
0ade4     02 28 66 F0 | 	shl	local02, #2
0ade8     03 00 00 FF 
0adec     00 E4 85 F1 | 	sub	objptr, ##1536
0adf0     F2 28 02 F1 | 	add	local02, objptr
0adf4     08 28 06 F1 | 	add	local02, #8
0adf8     14 9D 68 FC | 	wrlong	#78, local02
0adfc     03 00 00 FF 
0ae00     0C E4 05 F1 | 	add	objptr, ##1548
0ae04     F2 2A 02 FB | 	rdlong	local03, objptr
0ae08     4A 00 00 FF 
0ae0c     88 E4 85 F1 | 	sub	objptr, ##38024
0ae10     04 4E 05 F1 | 	add	fp, #4
0ae14     A7 2A 62 FC | 	wrlong	local03, fp
0ae18     08 4E 85 F1 | 	sub	fp, #8
0ae1c                 | '   gotoline=val%(lparts(ct).part$) 
0ae1c                 | '   compiledline(lineptr).result_type=token_fast_goto
0ae1c                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0ae1c                 | '   do
0ae1c                 | LR__0930
0ae1c     10 4E 05 F1 | 	add	fp, #16
0ae20     A7 12 02 F6 | 	mov	arg01, fp
0ae24     08 4E 85 F1 | 	sub	fp, #8
0ae28     A7 14 02 FB | 	rdlong	arg02, fp
0ae2c     08 4E 85 F1 | 	sub	fp, #8
0ae30     18 16 06 F6 | 	mov	arg03, #24
0ae34     0B 00 00 FF 
0ae38     CC E4 05 F1 | 	add	objptr, ##5836
0ae3c     50 A4 B1 FD | 	call	#_psram_spin2_read1
0ae40     0B 00 00 FF 
0ae44     CC E4 85 F1 | 	sub	objptr, ##5836
0ae48                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0ae48                 | '     if gotoheader(0)<>$FFFFFFFF then
0ae48     10 4E 05 F1 | 	add	fp, #16
0ae4c     A7 2A 02 FB | 	rdlong	local03, fp
0ae50     10 4E 85 F1 | 	sub	fp, #16
0ae54     FF FF 7F FF 
0ae58     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0ae5c     24 00 90 AD |  if_e	jmp	#LR__0931
0ae60     08 4E 05 F1 | 	add	fp, #8
0ae64     A7 2A 02 FB | 	rdlong	local03, fp
0ae68     04 4E 05 F1 | 	add	fp, #4
0ae6c     A7 2A 62 FC | 	wrlong	local03, fp
0ae70     18 4E 05 F1 | 	add	fp, #24
0ae74     A7 2A 02 FB | 	rdlong	local03, fp
0ae78     1C 4E 85 F1 | 	sub	fp, #28
0ae7c     A7 2A 62 FC | 	wrlong	local03, fp
0ae80     08 4E 85 F1 | 	sub	fp, #8
0ae84                 | LR__0931
0ae84     24 4E 05 F1 | 	add	fp, #36
0ae88     A7 2A 02 FB | 	rdlong	local03, fp
0ae8c     24 4E 85 F1 | 	sub	fp, #36
0ae90     FF FF 3F FF 
0ae94     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0ae98     10 4E 05 51 |  if_ne	add	fp, #16
0ae9c     A7 26 02 5B |  if_ne	rdlong	local01, fp
0aea0     10 4E 85 51 |  if_ne	sub	fp, #16
0aea4     FF FF 7F 5F 
0aea8     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0aeac     1C 00 90 AD |  if_e	jmp	#LR__0932
0aeb0     10 4E 05 F1 | 	add	fp, #16
0aeb4     A7 2A 02 FB | 	rdlong	local03, fp
0aeb8     0C 4E 85 F1 | 	sub	fp, #12
0aebc     A7 28 02 FB | 	rdlong	local02, fp
0aec0     04 4E 85 F1 | 	sub	fp, #4
0aec4     14 2B 0A F2 | 	cmp	local03, local02 wz
0aec8     50 FF 9F 5D |  if_ne	jmp	#LR__0930
0aecc                 | LR__0932
0aecc                 | '   if gotoheader(0)=gotoline then
0aecc     10 4E 05 F1 | 	add	fp, #16
0aed0     A7 2A 02 FB | 	rdlong	local03, fp
0aed4     0C 4E 85 F1 | 	sub	fp, #12
0aed8     A7 26 02 FB | 	rdlong	local01, fp
0aedc     04 4E 85 F1 | 	sub	fp, #4
0aee0     13 2B 0A F2 | 	cmp	local03, local01 wz
0aee4     7C 00 90 5D |  if_ne	jmp	#LR__0933
0aee8     4A 00 00 FF 
0aeec     7C E4 05 F1 | 	add	objptr, ##38012
0aef0     F2 26 02 FB | 	rdlong	local01, objptr
0aef4     13 29 02 F6 | 	mov	local02, local01
0aef8     01 28 66 F0 | 	shl	local02, #1
0aefc     13 29 02 F1 | 	add	local02, local01
0af00     02 28 66 F0 | 	shl	local02, #2
0af04     03 00 00 FF 
0af08     00 E4 85 F1 | 	sub	objptr, ##1536
0af0c     F2 28 02 F1 | 	add	local02, objptr
0af10     0C 4E 05 F1 | 	add	fp, #12
0af14     A7 2A 02 FB | 	rdlong	local03, fp
0af18     14 2B 62 FC | 	wrlong	local03, local02
0af1c     03 00 00 FF 
0af20     00 E4 05 F1 | 	add	objptr, ##1536
0af24     F2 26 02 FB | 	rdlong	local01, objptr
0af28     13 29 02 F6 | 	mov	local02, local01
0af2c     01 28 66 F0 | 	shl	local02, #1
0af30     13 29 02 F1 | 	add	local02, local01
0af34     02 28 66 F0 | 	shl	local02, #2
0af38     03 00 00 FF 
0af3c     00 E4 85 F1 | 	sub	objptr, ##1536
0af40     F2 28 02 F1 | 	add	local02, objptr
0af44     08 4E 85 F1 | 	sub	fp, #8
0af48     A7 2A 02 FB | 	rdlong	local03, fp
0af4c     04 4E 85 F1 | 	sub	fp, #4
0af50     04 28 06 F1 | 	add	local02, #4
0af54     14 2B 62 FC | 	wrlong	local03, local02
0af58     47 00 00 FF 
0af5c     7C E4 85 F1 | 	sub	objptr, ##36476
0af60     A4 00 90 FD | 	jmp	#LR__0934
0af64                 | LR__0933
0af64     4A 00 00 FF 
0af68     7C E4 05 F1 | 	add	objptr, ##38012
0af6c     F2 26 02 FB | 	rdlong	local01, objptr
0af70     13 29 02 F6 | 	mov	local02, local01
0af74     01 28 66 F0 | 	shl	local02, #1
0af78     13 29 02 F1 | 	add	local02, local01
0af7c     02 28 66 F0 | 	shl	local02, #2
0af80     03 00 00 FF 
0af84     00 E4 85 F1 | 	sub	objptr, ##1536
0af88     F2 28 02 F1 | 	add	local02, objptr
0af8c     00 00 C0 FF 
0af90     14 01 68 FC | 	wrlong	##-2147483648, local02
0af94     03 00 00 FF 
0af98     00 E4 05 F1 | 	add	objptr, ##1536
0af9c     F2 26 02 FB | 	rdlong	local01, objptr
0afa0     13 29 02 F6 | 	mov	local02, local01
0afa4     01 28 66 F0 | 	shl	local02, #1
0afa8     13 29 02 F1 | 	add	local02, local01
0afac     02 28 66 F0 | 	shl	local02, #2
0afb0     03 00 00 FF 
0afb4     00 E4 85 F1 | 	sub	objptr, ##1536
0afb8     F2 28 02 F1 | 	add	local02, objptr
0afbc     04 4E 05 F1 | 	add	fp, #4
0afc0     A7 2A 02 FB | 	rdlong	local03, fp
0afc4     04 4E 85 F1 | 	sub	fp, #4
0afc8     04 28 06 F1 | 	add	local02, #4
0afcc     14 2B 62 FC | 	wrlong	local03, local02
0afd0     03 00 00 FF 
0afd4     00 E4 05 F1 | 	add	objptr, ##1536
0afd8     F2 26 02 FB | 	rdlong	local01, objptr
0afdc     13 29 02 F6 | 	mov	local02, local01
0afe0     01 28 66 F0 | 	shl	local02, #1
0afe4     13 29 02 F1 | 	add	local02, local01
0afe8     02 28 66 F0 | 	shl	local02, #2
0afec     03 00 00 FF 
0aff0     00 E4 85 F1 | 	sub	objptr, ##1536
0aff4     F2 28 02 F1 | 	add	local02, objptr
0aff8     08 28 06 F1 | 	add	local02, #8
0affc     14 A7 68 FC | 	wrlong	#83, local02
0b000     47 00 00 FF 
0b004     7C E4 85 F1 | 	sub	objptr, ##36476
0b008                 | LR__0934
0b008     4A 00 00 FF 
0b00c     7C E4 05 F1 | 	add	objptr, ##38012
0b010     F2 2A 02 FB | 	rdlong	local03, objptr
0b014     01 2A 06 F1 | 	add	local03, #1
0b018     F2 2A 62 FC | 	wrlong	local03, objptr
0b01c     4A 00 00 FF 
0b020     7C E4 85 F1 | 	sub	objptr, ##38012
0b024     D0 00 90 FD | 	jmp	#LR__0936
0b028                 | LR__0935
0b028     98 0A B0 FD | 	call	#_expr
0b02c     30 4E 05 F1 | 	add	fp, #48
0b030     A7 9E 68 FC | 	wrlong	#79, fp
0b034     08 4E 85 F1 | 	sub	fp, #8
0b038     A7 00 68 FC | 	wrlong	#0, fp
0b03c     04 4E 05 F1 | 	add	fp, #4
0b040     A7 2A 02 FB | 	rdlong	local03, fp
0b044     04 4E 05 F1 | 	add	fp, #4
0b048     A7 26 02 FB | 	rdlong	local01, fp
0b04c     30 4E 85 F1 | 	sub	fp, #48
0b050     4A 00 00 FF 
0b054     7C E4 05 F1 | 	add	objptr, ##38012
0b058     F2 28 02 FB | 	rdlong	local02, objptr
0b05c     14 17 02 F6 | 	mov	arg03, local02
0b060     01 16 66 F0 | 	shl	arg03, #1
0b064     14 17 02 F1 | 	add	arg03, local02
0b068     02 16 66 F0 | 	shl	arg03, #2
0b06c     03 00 00 FF 
0b070     00 E4 85 F1 | 	sub	objptr, ##1536
0b074     F2 16 02 F1 | 	add	arg03, objptr
0b078     0B 01 68 FC | 	wrlong	#0, arg03
0b07c     03 00 00 FF 
0b080     00 E4 05 F1 | 	add	objptr, ##1536
0b084     F2 28 02 FB | 	rdlong	local02, objptr
0b088     14 17 02 F6 | 	mov	arg03, local02
0b08c     01 16 66 F0 | 	shl	arg03, #1
0b090     14 17 02 F1 | 	add	arg03, local02
0b094     02 16 66 F0 | 	shl	arg03, #2
0b098     03 00 00 FF 
0b09c     00 E4 85 F1 | 	sub	objptr, ##1536
0b0a0     F2 16 02 F1 | 	add	arg03, objptr
0b0a4     04 16 06 F1 | 	add	arg03, #4
0b0a8     0B 2B 62 FC | 	wrlong	local03, arg03
0b0ac     03 00 00 FF 
0b0b0     00 E4 05 F1 | 	add	objptr, ##1536
0b0b4     F2 2A 02 FB | 	rdlong	local03, objptr
0b0b8     15 29 02 F6 | 	mov	local02, local03
0b0bc     01 28 66 F0 | 	shl	local02, #1
0b0c0     15 29 02 F1 | 	add	local02, local03
0b0c4     02 28 66 F0 | 	shl	local02, #2
0b0c8     03 00 00 FF 
0b0cc     00 E4 85 F1 | 	sub	objptr, ##1536
0b0d0     F2 28 02 F1 | 	add	local02, objptr
0b0d4     08 28 06 F1 | 	add	local02, #8
0b0d8     14 27 62 FC | 	wrlong	local01, local02
0b0dc     03 00 00 FF 
0b0e0     00 E4 05 F1 | 	add	objptr, ##1536
0b0e4     F2 2A 02 FB | 	rdlong	local03, objptr
0b0e8     01 2A 06 F1 | 	add	local03, #1
0b0ec     F2 2A 62 FC | 	wrlong	local03, objptr
0b0f0     4A 00 00 FF 
0b0f4     7C E4 85 F1 | 	sub	objptr, ##38012
0b0f8                 | LR__0936
0b0f8                 | ' return 0
0b0f8     00 FA 05 F6 | 	mov	result1, #0
0b0fc     A7 F0 03 F6 | 	mov	ptra, fp
0b100     B2 00 A0 FD | 	call	#popregs_
0b104                 | _compile_goto_ret
0b104     2D 00 64 FD | 	ret
0b108                 | 
0b108                 | ' 
0b108                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b108                 | ' 
0b108                 | ' function compile_on() as ulong
0b108                 | _compile_on
0b108     04 4A 05 F6 | 	mov	COUNT_, #4
0b10c     A8 00 A0 FD | 	call	#pushregs_
0b110     B0 09 B0 FD | 	call	#_expr
0b114     00 26 06 F6 | 	mov	local01, #0
0b118     4A 00 00 FF 
0b11c     7C E4 05 F1 | 	add	objptr, ##38012
0b120     F2 14 02 FB | 	rdlong	arg02, objptr
0b124     0A 13 02 F6 | 	mov	arg01, arg02
0b128     01 12 66 F0 | 	shl	arg01, #1
0b12c     0A 13 02 F1 | 	add	arg01, arg02
0b130     02 12 66 F0 | 	shl	arg01, #2
0b134     03 00 00 FF 
0b138     00 E4 85 F1 | 	sub	objptr, ##1536
0b13c     F2 12 02 F1 | 	add	arg01, objptr
0b140     08 12 06 F1 | 	add	arg01, #8
0b144     09 83 69 FC | 	wrlong	#193, arg01
0b148     03 00 00 FF 
0b14c     00 E4 05 F1 | 	add	objptr, ##1536
0b150     F2 14 02 FB | 	rdlong	arg02, objptr
0b154     0A 29 02 F6 | 	mov	local02, arg02
0b158     01 14 06 F1 | 	add	arg02, #1
0b15c     F2 14 62 FC | 	wrlong	arg02, objptr
0b160                 | ' expr()
0b160                 | ' 'print lparts(ct).part$ 'ok
0b160                 | ' numpar=0
0b160                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b160                 | ' if lparts(ct).part$="goto" then
0b160     13 00 00 FF 
0b164     38 E4 85 F1 | 	sub	objptr, ##9784
0b168     F2 14 02 FB | 	rdlong	arg02, objptr
0b16c     03 14 66 F0 | 	shl	arg02, #3
0b170     02 00 00 FF 
0b174     38 E4 85 F1 | 	sub	objptr, ##1080
0b178     F2 14 02 F1 | 	add	arg02, objptr
0b17c     0A 13 02 FB | 	rdlong	arg01, arg02
0b180     B0 01 00 FF 
0b184     74 15 06 F6 | 	mov	arg02, ##@LR__5800
0b188     35 00 00 FF 
0b18c     0C E4 85 F1 | 	sub	objptr, ##27148
0b190     AC AD B1 FD | 	call	#__system___string_cmp
0b194     00 FA 0D F2 | 	cmp	result1, #0 wz
0b198     14 02 90 5D |  if_ne	jmp	#LR__0945
0b19c     37 00 00 FF 
0b1a0     44 E4 05 F1 | 	add	objptr, ##28228
0b1a4     F2 2A 02 FB | 	rdlong	local03, objptr
0b1a8     37 00 00 FF 
0b1ac     44 E4 85 F1 | 	sub	objptr, ##28228
0b1b0     01 2A 06 F1 | 	add	local03, #1
0b1b4                 | '   i=ct+1
0b1b4                 | '   do
0b1b4                 | LR__0940
0b1b4                 | '     if lparts(i).token=token_decimal then
0b1b4     15 FB 01 F6 | 	mov	result1, local03
0b1b8     03 FA 65 F0 | 	shl	result1, #3
0b1bc     35 00 00 FF 
0b1c0     0C E4 05 F1 | 	add	objptr, ##27148
0b1c4     F2 FA 01 F1 | 	add	result1, objptr
0b1c8     04 FA 05 F1 | 	add	result1, #4
0b1cc     FD FA 01 FB | 	rdlong	result1, result1
0b1d0     01 00 00 FF 
0b1d4     00 FA 0D F2 | 	cmp	result1, ##512 wz
0b1d8     35 00 00 FF 
0b1dc     0C E4 85 F1 | 	sub	objptr, ##27148
0b1e0     DC 00 90 5D |  if_ne	jmp	#LR__0941
0b1e4     4A 00 00 FF 
0b1e8     7C E4 05 F1 | 	add	objptr, ##38012
0b1ec     F2 FA 01 FB | 	rdlong	result1, objptr
0b1f0     FD 14 02 F6 | 	mov	arg02, result1
0b1f4     01 14 66 F0 | 	shl	arg02, #1
0b1f8     FD 14 02 F1 | 	add	arg02, result1
0b1fc     02 14 66 F0 | 	shl	arg02, #2
0b200     03 00 00 FF 
0b204     00 E4 85 F1 | 	sub	objptr, ##1536
0b208     F2 14 02 F1 | 	add	arg02, objptr
0b20c     00 00 C0 FF 
0b210     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0b214     03 00 00 FF 
0b218     00 E4 05 F1 | 	add	objptr, ##1536
0b21c     F2 14 02 FB | 	rdlong	arg02, objptr
0b220     0A 2D 02 F6 | 	mov	local04, arg02
0b224     01 2C 66 F0 | 	shl	local04, #1
0b228     0A 2D 02 F1 | 	add	local04, arg02
0b22c     02 2C 66 F0 | 	shl	local04, #2
0b230     03 00 00 FF 
0b234     00 E4 85 F1 | 	sub	objptr, ##1536
0b238     F2 2C 02 F1 | 	add	local04, objptr
0b23c     15 15 02 F6 | 	mov	arg02, local03
0b240     03 14 66 F0 | 	shl	arg02, #3
0b244     12 00 00 FF 
0b248     70 E4 85 F1 | 	sub	objptr, ##9328
0b24c     F2 14 02 F1 | 	add	arg02, objptr
0b250     0A 13 02 FB | 	rdlong	arg01, arg02
0b254     00 14 06 F6 | 	mov	arg02, #0
0b258     35 00 00 FF 
0b25c     0C E4 85 F1 | 	sub	objptr, ##27148
0b260     A4 E1 B1 FD | 	call	#__system____builtin_atoi
0b264     04 2C 06 F1 | 	add	local04, #4
0b268     16 FB 61 FC | 	wrlong	result1, local04
0b26c     4A 00 00 FF 
0b270     7C E4 05 F1 | 	add	objptr, ##38012
0b274     F2 14 02 FB | 	rdlong	arg02, objptr
0b278     0A 2D 02 F6 | 	mov	local04, arg02
0b27c     01 2C 66 F0 | 	shl	local04, #1
0b280     0A 2D 02 F1 | 	add	local04, arg02
0b284     02 2C 66 F0 | 	shl	local04, #2
0b288     03 00 00 FF 
0b28c     00 E4 85 F1 | 	sub	objptr, ##1536
0b290     F2 2C 02 F1 | 	add	local04, objptr
0b294     08 2C 06 F1 | 	add	local04, #8
0b298     16 A7 68 FC | 	wrlong	#83, local04
0b29c     03 00 00 FF 
0b2a0     00 E4 05 F1 | 	add	objptr, ##1536
0b2a4     F2 2C 02 FB | 	rdlong	local04, objptr
0b2a8     01 2C 06 F1 | 	add	local04, #1
0b2ac     F2 2C 62 FC | 	wrlong	local04, objptr
0b2b0     4A 00 00 FF 
0b2b4     7C E4 85 F1 | 	sub	objptr, ##38012
0b2b8     01 26 06 F1 | 	add	local01, #1
0b2bc     08 00 90 FD | 	jmp	#LR__0942
0b2c0                 | LR__0941
0b2c0                 | '       return 17
0b2c0     11 FA 05 F6 | 	mov	result1, #17
0b2c4     5C 04 90 FD | 	jmp	#LR__0955
0b2c8                 | LR__0942
0b2c8     01 2A 06 F1 | 	add	local03, #1
0b2cc                 | '     i+=1
0b2cc                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b2cc     15 2D 02 F6 | 	mov	local04, local03
0b2d0     03 2C 66 F0 | 	shl	local04, #3
0b2d4     35 00 00 FF 
0b2d8     0C E4 05 F1 | 	add	objptr, ##27148
0b2dc     F2 2C 02 F1 | 	add	local04, objptr
0b2e0     04 2C 06 F1 | 	add	local04, #4
0b2e4     16 2D 02 FB | 	rdlong	local04, local04
0b2e8     11 2C 0E F2 | 	cmp	local04, #17 wz
0b2ec     35 00 00 FF 
0b2f0     0C E4 85 F1 | 	sub	objptr, ##27148
0b2f4     30 00 90 AD |  if_e	jmp	#LR__0943
0b2f8     15 2D 02 F6 | 	mov	local04, local03
0b2fc     03 2C 66 F0 | 	shl	local04, #3
0b300     35 00 00 FF 
0b304     0C E4 05 F1 | 	add	objptr, ##27148
0b308     F2 2C 02 F1 | 	add	local04, objptr
0b30c     04 2C 06 F1 | 	add	local04, #4
0b310     16 2D 02 FB | 	rdlong	local04, local04
0b314     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b318     35 00 00 FF 
0b31c     0C E4 85 F1 | 	sub	objptr, ##27148
0b320     15 FA 05 56 |  if_ne	mov	result1, #21
0b324     FC 03 90 5D |  if_ne	jmp	#LR__0955
0b328                 | LR__0943
0b328                 | '     if lparts(i).token=token_end then exit loop
0b328     15 2D 02 F6 | 	mov	local04, local03
0b32c     03 2C 66 F0 | 	shl	local04, #3
0b330     35 00 00 FF 
0b334     0C E4 05 F1 | 	add	objptr, ##27148
0b338     F2 2C 02 F1 | 	add	local04, objptr
0b33c     04 2C 06 F1 | 	add	local04, #4
0b340     16 2D 02 FB | 	rdlong	local04, local04
0b344     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b348     35 00 00 FF 
0b34c     0C E4 85 F1 | 	sub	objptr, ##27148
0b350     30 00 90 AD |  if_e	jmp	#LR__0944
0b354     01 2A 06 F1 | 	add	local03, #1
0b358     15 2D 02 F6 | 	mov	local04, local03
0b35c     03 2C 66 F0 | 	shl	local04, #3
0b360     35 00 00 FF 
0b364     0C E4 05 F1 | 	add	objptr, ##27148
0b368     F2 2C 02 F1 | 	add	local04, objptr
0b36c     04 2C 06 F1 | 	add	local04, #4
0b370     16 2D 02 FB | 	rdlong	local04, local04
0b374     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b378     35 00 00 FF 
0b37c     0C E4 85 F1 | 	sub	objptr, ##27148
0b380     30 FE 9F 5D |  if_ne	jmp	#LR__0940
0b384                 | LR__0944
0b384     14 2D 02 F6 | 	mov	local04, local02
0b388     01 2C 66 F0 | 	shl	local04, #1
0b38c     14 2D 02 F1 | 	add	local04, local02
0b390     02 2C 66 F0 | 	shl	local04, #2
0b394     47 00 00 FF 
0b398     7C E4 05 F1 | 	add	objptr, ##36476
0b39c     F2 2C 02 F1 | 	add	local04, objptr
0b3a0     04 2C 06 F1 | 	add	local04, #4
0b3a4     16 03 68 FC | 	wrlong	#1, local04
0b3a8     47 00 00 FF 
0b3ac     7C E4 85 F1 | 	sub	objptr, ##36476
0b3b0                 | LR__0945
0b3b0                 | ' 
0b3b0                 | ' if lparts(ct).part$="gosub" then
0b3b0     37 00 00 FF 
0b3b4     44 E4 05 F1 | 	add	objptr, ##28228
0b3b8     F2 2A 02 FB | 	rdlong	local03, objptr
0b3bc     03 2A 66 F0 | 	shl	local03, #3
0b3c0     02 00 00 FF 
0b3c4     38 E4 85 F1 | 	sub	objptr, ##1080
0b3c8     F2 2A 02 F1 | 	add	local03, objptr
0b3cc     15 13 02 FB | 	rdlong	arg01, local03
0b3d0     B0 01 00 FF 
0b3d4     79 15 06 F6 | 	mov	arg02, ##@LR__5801
0b3d8     35 00 00 FF 
0b3dc     0C E4 85 F1 | 	sub	objptr, ##27148
0b3e0     5C AB B1 FD | 	call	#__system___string_cmp
0b3e4     00 FA 0D F2 | 	cmp	result1, #0 wz
0b3e8     84 02 90 5D |  if_ne	jmp	#LR__0951
0b3ec     37 00 00 FF 
0b3f0     44 E4 05 F1 | 	add	objptr, ##28228
0b3f4     F2 2A 02 FB | 	rdlong	local03, objptr
0b3f8     37 00 00 FF 
0b3fc     44 E4 85 F1 | 	sub	objptr, ##28228
0b400     01 2A 06 F1 | 	add	local03, #1
0b404                 | '   i=ct+1
0b404                 | '   do
0b404                 | LR__0946
0b404                 | '     if lparts(i).token=token_decimal then
0b404     15 2D 02 F6 | 	mov	local04, local03
0b408     03 2C 66 F0 | 	shl	local04, #3
0b40c     35 00 00 FF 
0b410     0C E4 05 F1 | 	add	objptr, ##27148
0b414     F2 2C 02 F1 | 	add	local04, objptr
0b418     04 2C 06 F1 | 	add	local04, #4
0b41c     16 2D 02 FB | 	rdlong	local04, local04
0b420     01 00 00 FF 
0b424     00 2C 0E F2 | 	cmp	local04, ##512 wz
0b428     35 00 00 FF 
0b42c     0C E4 85 F1 | 	sub	objptr, ##27148
0b430     4C 01 90 5D |  if_ne	jmp	#LR__0947
0b434     4A 00 00 FF 
0b438     7C E4 05 F1 | 	add	objptr, ##38012
0b43c     F2 FA 01 FB | 	rdlong	result1, objptr
0b440     FD 2C 02 F6 | 	mov	local04, result1
0b444     01 2C 66 F0 | 	shl	local04, #1
0b448     FD 2C 02 F1 | 	add	local04, result1
0b44c     02 2C 66 F0 | 	shl	local04, #2
0b450     03 00 00 FF 
0b454     00 E4 85 F1 | 	sub	objptr, ##1536
0b458     F2 2C 02 F1 | 	add	local04, objptr
0b45c     08 2C 06 F1 | 	add	local04, #8
0b460     16 53 69 FC | 	wrlong	#169, local04
0b464     03 00 00 FF 
0b468     00 E4 05 F1 | 	add	objptr, ##1536
0b46c     F2 FA 01 FB | 	rdlong	result1, objptr
0b470     01 FA 05 F1 | 	add	result1, #1
0b474     F2 FA 61 FC | 	wrlong	result1, objptr
0b478     FD 2C 02 F6 | 	mov	local04, result1
0b47c     01 2C 66 F0 | 	shl	local04, #1
0b480     FD 2C 02 F1 | 	add	local04, result1
0b484     02 2C 66 F0 | 	shl	local04, #2
0b488     03 00 00 FF 
0b48c     00 E4 85 F1 | 	sub	objptr, ##1536
0b490     F2 2C 02 F1 | 	add	local04, objptr
0b494     00 00 C0 FF 
0b498     16 01 68 FC | 	wrlong	##-2147483648, local04
0b49c     03 00 00 FF 
0b4a0     00 E4 05 F1 | 	add	objptr, ##1536
0b4a4     F2 FA 01 FB | 	rdlong	result1, objptr
0b4a8     FD 2C 02 F6 | 	mov	local04, result1
0b4ac     01 2C 66 F0 | 	shl	local04, #1
0b4b0     FD 2C 02 F1 | 	add	local04, result1
0b4b4     02 2C 66 F0 | 	shl	local04, #2
0b4b8     03 00 00 FF 
0b4bc     00 E4 85 F1 | 	sub	objptr, ##1536
0b4c0     F2 2C 02 F1 | 	add	local04, objptr
0b4c4     15 13 02 F6 | 	mov	arg01, local03
0b4c8     03 12 66 F0 | 	shl	arg01, #3
0b4cc     12 00 00 FF 
0b4d0     70 E4 85 F1 | 	sub	objptr, ##9328
0b4d4     F2 12 02 F1 | 	add	arg01, objptr
0b4d8     09 13 02 FB | 	rdlong	arg01, arg01
0b4dc     00 14 06 F6 | 	mov	arg02, #0
0b4e0     35 00 00 FF 
0b4e4     0C E4 85 F1 | 	sub	objptr, ##27148
0b4e8     1C DF B1 FD | 	call	#__system____builtin_atoi
0b4ec     04 2C 06 F1 | 	add	local04, #4
0b4f0     16 FB 61 FC | 	wrlong	result1, local04
0b4f4     4A 00 00 FF 
0b4f8     7C E4 05 F1 | 	add	objptr, ##38012
0b4fc     F2 12 02 FB | 	rdlong	arg01, objptr
0b500     09 2D 02 F6 | 	mov	local04, arg01
0b504     01 2C 66 F0 | 	shl	local04, #1
0b508     09 2D 02 F1 | 	add	local04, arg01
0b50c     02 2C 66 F0 | 	shl	local04, #2
0b510     03 00 00 FF 
0b514     00 E4 85 F1 | 	sub	objptr, ##1536
0b518     F2 2C 02 F1 | 	add	local04, objptr
0b51c     08 2C 06 F1 | 	add	local04, #8
0b520     16 A7 68 FC | 	wrlong	#83, local04
0b524     03 00 00 FF 
0b528     00 E4 05 F1 | 	add	objptr, ##1536
0b52c     F2 12 02 FB | 	rdlong	arg01, objptr
0b530     01 12 06 F1 | 	add	arg01, #1
0b534     F2 12 62 FC | 	wrlong	arg01, objptr
0b538     01 26 06 F1 | 	add	local01, #1
0b53c     09 2D 02 F6 | 	mov	local04, arg01
0b540     01 2C 66 F0 | 	shl	local04, #1
0b544     09 2D 02 F1 | 	add	local04, arg01
0b548     02 2C 66 F0 | 	shl	local04, #2
0b54c     03 00 00 FF 
0b550     00 E4 85 F1 | 	sub	objptr, ##1536
0b554     F2 2C 02 F1 | 	add	local04, objptr
0b558     08 2C 06 F1 | 	add	local04, #8
0b55c     16 5B 68 FC | 	wrlong	#45, local04
0b560     03 00 00 FF 
0b564     00 E4 05 F1 | 	add	objptr, ##1536
0b568     F2 2C 02 FB | 	rdlong	local04, objptr
0b56c     01 2C 06 F1 | 	add	local04, #1
0b570     F2 2C 62 FC | 	wrlong	local04, objptr
0b574     4A 00 00 FF 
0b578     7C E4 85 F1 | 	sub	objptr, ##38012
0b57c     08 00 90 FD | 	jmp	#LR__0948
0b580                 | LR__0947
0b580                 | '       return 17
0b580     11 FA 05 F6 | 	mov	result1, #17
0b584     9C 01 90 FD | 	jmp	#LR__0955
0b588                 | LR__0948
0b588     01 2A 06 F1 | 	add	local03, #1
0b58c                 | '     i+=1
0b58c                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b58c     15 2D 02 F6 | 	mov	local04, local03
0b590     03 2C 66 F0 | 	shl	local04, #3
0b594     35 00 00 FF 
0b598     0C E4 05 F1 | 	add	objptr, ##27148
0b59c     F2 2C 02 F1 | 	add	local04, objptr
0b5a0     04 2C 06 F1 | 	add	local04, #4
0b5a4     16 2D 02 FB | 	rdlong	local04, local04
0b5a8     11 2C 0E F2 | 	cmp	local04, #17 wz
0b5ac     35 00 00 FF 
0b5b0     0C E4 85 F1 | 	sub	objptr, ##27148
0b5b4     30 00 90 AD |  if_e	jmp	#LR__0949
0b5b8     15 2D 02 F6 | 	mov	local04, local03
0b5bc     03 2C 66 F0 | 	shl	local04, #3
0b5c0     35 00 00 FF 
0b5c4     0C E4 05 F1 | 	add	objptr, ##27148
0b5c8     F2 2C 02 F1 | 	add	local04, objptr
0b5cc     04 2C 06 F1 | 	add	local04, #4
0b5d0     16 2D 02 FB | 	rdlong	local04, local04
0b5d4     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b5d8     35 00 00 FF 
0b5dc     0C E4 85 F1 | 	sub	objptr, ##27148
0b5e0     15 FA 05 56 |  if_ne	mov	result1, #21
0b5e4     3C 01 90 5D |  if_ne	jmp	#LR__0955
0b5e8                 | LR__0949
0b5e8                 | '     if lparts(i).token=token_end then exit loop
0b5e8     15 2D 02 F6 | 	mov	local04, local03
0b5ec     03 2C 66 F0 | 	shl	local04, #3
0b5f0     35 00 00 FF 
0b5f4     0C E4 05 F1 | 	add	objptr, ##27148
0b5f8     F2 2C 02 F1 | 	add	local04, objptr
0b5fc     04 2C 06 F1 | 	add	local04, #4
0b600     16 2D 02 FB | 	rdlong	local04, local04
0b604     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b608     35 00 00 FF 
0b60c     0C E4 85 F1 | 	sub	objptr, ##27148
0b610     30 00 90 AD |  if_e	jmp	#LR__0950
0b614     01 2A 06 F1 | 	add	local03, #1
0b618     15 2D 02 F6 | 	mov	local04, local03
0b61c     03 2C 66 F0 | 	shl	local04, #3
0b620     35 00 00 FF 
0b624     0C E4 05 F1 | 	add	objptr, ##27148
0b628     F2 2C 02 F1 | 	add	local04, objptr
0b62c     04 2C 06 F1 | 	add	local04, #4
0b630     16 2D 02 FB | 	rdlong	local04, local04
0b634     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b638     35 00 00 FF 
0b63c     0C E4 85 F1 | 	sub	objptr, ##27148
0b640     C0 FD 9F 5D |  if_ne	jmp	#LR__0946
0b644                 | LR__0950
0b644     14 2D 02 F6 | 	mov	local04, local02
0b648     01 2C 66 F0 | 	shl	local04, #1
0b64c     14 2D 02 F1 | 	add	local04, local02
0b650     02 2C 66 F0 | 	shl	local04, #2
0b654     47 00 00 FF 
0b658     7C E4 05 F1 | 	add	objptr, ##36476
0b65c     F2 2C 02 F1 | 	add	local04, objptr
0b660     04 2C 06 F1 | 	add	local04, #4
0b664     16 07 68 FC | 	wrlong	#3, local04
0b668     47 00 00 FF 
0b66c     7C E4 85 F1 | 	sub	objptr, ##36476
0b670                 | LR__0951
0b670     14 2B 02 F6 | 	mov	local03, local02
0b674     01 2A 66 F0 | 	shl	local03, #1
0b678     14 2B 02 F1 | 	add	local03, local02
0b67c     02 2A 66 F0 | 	shl	local03, #2
0b680     47 00 00 FF 
0b684     7C E4 05 F1 | 	add	objptr, ##36476
0b688     F2 2A 02 F1 | 	add	local03, objptr
0b68c     15 27 62 FC | 	wrlong	local01, local03
0b690                 | ' compiledline(onlineptr).result.uresult=numpar
0b690                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0b690     03 00 00 FF 
0b694     00 E4 05 F1 | 	add	objptr, ##1536
0b698     F2 2A 02 FB | 	rdlong	local03, objptr
0b69c     4A 00 00 FF 
0b6a0     7C E4 85 F1 | 	sub	objptr, ##38012
0b6a4     97 3C 48 FB | 	callpa	#(@LR__0954-@LR__0952)>>2,fcache_load_ptr_
0b6a8                 | LR__0952
0b6a8     15 2D 02 F6 | 	mov	local04, local03
0b6ac     01 2C 66 F0 | 	shl	local04, #1
0b6b0     15 2D 02 F1 | 	add	local04, local03
0b6b4     02 2C 66 F0 | 	shl	local04, #2
0b6b8     47 00 00 FF 
0b6bc     7C E4 05 F1 | 	add	objptr, ##36476
0b6c0     F2 2C 02 F1 | 	add	local04, objptr
0b6c4     08 2C 06 F1 | 	add	local04, #8
0b6c8     16 2D 02 FB | 	rdlong	local04, local04
0b6cc     2D 2C 0E F2 | 	cmp	local04, #45 wz
0b6d0     47 00 00 FF 
0b6d4     7C E4 85 F1 | 	sub	objptr, ##36476
0b6d8     38 00 90 5D |  if_ne	jmp	#LR__0953
0b6dc     15 2D 02 F6 | 	mov	local04, local03
0b6e0     01 2C 66 F0 | 	shl	local04, #1
0b6e4     15 2D 02 F1 | 	add	local04, local03
0b6e8     02 2C 66 F0 | 	shl	local04, #2
0b6ec     47 00 00 FF 
0b6f0     7C E4 05 F1 | 	add	objptr, ##36476
0b6f4     F2 2C 02 F1 | 	add	local04, objptr
0b6f8     03 00 00 FF 
0b6fc     00 E4 05 F1 | 	add	objptr, ##1536
0b700     F2 26 02 FB | 	rdlong	local01, objptr
0b704     4A 00 00 FF 
0b708     7C E4 85 F1 | 	sub	objptr, ##38012
0b70c     02 26 86 F1 | 	sub	local01, #2
0b710     16 27 62 FC | 	wrlong	local01, local04
0b714                 | LR__0953
0b714     01 2A 86 F1 | 	sub	local03, #1
0b718     14 2B 52 F2 | 	cmps	local03, local02 wc
0b71c     88 FF 9F 3D |  if_ae	jmp	#LR__0952
0b720                 | LR__0954
0b720                 | ' return 0
0b720     00 FA 05 F6 | 	mov	result1, #0
0b724                 | LR__0955
0b724     A7 F0 03 F6 | 	mov	ptra, fp
0b728     B2 00 A0 FD | 	call	#popregs_
0b72c                 | _compile_on_ret
0b72c     2D 00 64 FD | 	ret
0b730                 | 
0b730                 | ' 
0b730                 | ' '----- A helper for compile_input and compile_read
0b730                 | '  
0b730                 | ' function getaddr() as ulong
0b730                 | _getaddr
0b730     0B 4A 05 F6 | 	mov	COUNT_, #11
0b734     A8 00 A0 FD | 	call	#pushregs_
0b738     37 00 00 FF 
0b73c     44 E4 05 F1 | 	add	objptr, ##28228
0b740     F2 2C 02 FB | 	rdlong	local04, objptr
0b744     03 2C 66 F0 | 	shl	local04, #3
0b748     02 00 00 FF 
0b74c     38 E4 85 F1 | 	sub	objptr, ##1080
0b750     F2 2C 02 F1 | 	add	local04, objptr
0b754     16 2F 02 FB | 	rdlong	local05, local04
0b758     01 30 66 F6 | 	neg	local06, #1
0b75c                 | ' 
0b75c                 | ' varname$=lparts(ct).part$
0b75c                 | ' j=-1
0b75c                 | ' 
0b75c                 | ' for i=0 to varnum-1
0b75c     00 32 06 F6 | 	mov	local07, #0
0b760     04 E4 85 F1 | 	sub	objptr, #4
0b764     F2 34 02 FB | 	rdlong	local08, objptr
0b768     35 00 00 FF 
0b76c     08 E4 85 F1 | 	sub	objptr, ##27144
0b770                 | LR__0960
0b770     1A 33 52 F2 | 	cmps	local07, local08 wc
0b774     38 00 90 3D |  if_ae	jmp	#LR__0961
0b778                 | '   if variables(i).name=varname$ then j=i : exit
0b778     19 2D 02 F6 | 	mov	local04, local07
0b77c     04 2C 66 F0 | 	shl	local04, #4
0b780     14 00 00 FF 
0b784     F8 E5 05 F1 | 	add	objptr, ##10744
0b788     F2 2C 02 F1 | 	add	local04, objptr
0b78c     16 13 02 FB | 	rdlong	arg01, local04
0b790     17 15 02 F6 | 	mov	arg02, local05
0b794     14 00 00 FF 
0b798     F8 E5 85 F1 | 	sub	objptr, ##10744
0b79c     A0 A7 B1 FD | 	call	#__system___string_cmp
0b7a0     00 FA 0D F2 | 	cmp	result1, #0 wz
0b7a4     19 31 02 A6 |  if_e	mov	local06, local07
0b7a8     01 32 06 51 |  if_ne	add	local07, #1
0b7ac     C0 FF 9F 5D |  if_ne	jmp	#LR__0960
0b7b0                 | LR__0961
0b7b0                 | ' if  j=-1 andalso varnum<maxvars then   
0b7b0     FF FF 7F FF 
0b7b4     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0b7b8     A8 00 90 5D |  if_ne	jmp	#LR__0962
0b7bc     35 00 00 FF 
0b7c0     08 E4 05 F1 | 	add	objptr, ##27144
0b7c4     F2 34 02 FB | 	rdlong	local08, objptr
0b7c8     35 00 00 FF 
0b7cc     08 E4 85 F1 | 	sub	objptr, ##27144
0b7d0     02 00 00 FF 
0b7d4     00 34 56 F2 | 	cmps	local08, ##1024 wc
0b7d8     88 00 90 3D |  if_ae	jmp	#LR__0962
0b7dc     35 00 00 FF 
0b7e0     08 E4 05 F1 | 	add	objptr, ##27144
0b7e4     F2 2C 02 FB | 	rdlong	local04, objptr
0b7e8     04 2C 66 F0 | 	shl	local04, #4
0b7ec     20 00 00 FF 
0b7f0     10 E4 85 F1 | 	sub	objptr, ##16400
0b7f4     F2 2C 02 F1 | 	add	local04, objptr
0b7f8     16 2F 62 FC | 	wrlong	local05, local04
0b7fc     20 00 00 FF 
0b800     10 E4 05 F1 | 	add	objptr, ##16400
0b804     F2 2C 02 FB | 	rdlong	local04, objptr
0b808     04 2C 66 F0 | 	shl	local04, #4
0b80c     20 00 00 FF 
0b810     10 E4 85 F1 | 	sub	objptr, ##16400
0b814     F2 2C 02 F1 | 	add	local04, objptr
0b818     04 2C 06 F1 | 	add	local04, #4
0b81c     16 01 68 FC | 	wrlong	#0, local04
0b820     20 00 00 FF 
0b824     10 E4 05 F1 | 	add	objptr, ##16400
0b828     F2 2C 02 FB | 	rdlong	local04, objptr
0b82c     04 2C 66 F0 | 	shl	local04, #4
0b830     20 00 00 FF 
0b834     10 E4 85 F1 | 	sub	objptr, ##16400
0b838     F2 2C 02 F1 | 	add	local04, objptr
0b83c     0C 2C 06 F1 | 	add	local04, #12
0b840     16 39 68 FC | 	wrlong	#28, local04
0b844     20 00 00 FF 
0b848     10 E4 05 F1 | 	add	objptr, ##16400
0b84c     F2 34 02 FB | 	rdlong	local08, objptr
0b850     1A 31 02 F6 | 	mov	local06, local08
0b854     01 34 06 F1 | 	add	local08, #1
0b858     F2 34 62 FC | 	wrlong	local08, objptr
0b85c     35 00 00 FF 
0b860     08 E4 85 F1 | 	sub	objptr, ##27144
0b864                 | LR__0962
0b864     00 34 06 F6 | 	mov	local08, #0
0b868                 | ' numpar=0
0b868                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0b868     37 00 00 FF 
0b86c     44 E4 05 F1 | 	add	objptr, ##28228
0b870     F2 2C 02 FB | 	rdlong	local04, objptr
0b874     01 2C 06 F1 | 	add	local04, #1
0b878     03 2C 66 F0 | 	shl	local04, #3
0b87c     02 00 00 FF 
0b880     38 E4 85 F1 | 	sub	objptr, ##1080
0b884     F2 2C 02 F1 | 	add	local04, objptr
0b888     04 2C 06 F1 | 	add	local04, #4
0b88c     16 33 02 FB | 	rdlong	local07, local04
0b890     15 32 0E F2 | 	cmp	local07, #21 wz
0b894     35 00 00 FF 
0b898     0C E4 85 F1 | 	sub	objptr, ##27148
0b89c     54 01 90 5D |  if_ne	jmp	#LR__0967
0b8a0     37 00 00 FF 
0b8a4     44 E4 05 F1 | 	add	objptr, ##28228
0b8a8     F2 36 02 FB | 	rdlong	local09, objptr
0b8ac     01 36 06 F1 | 	add	local09, #1
0b8b0     F2 36 62 FC | 	wrlong	local09, objptr
0b8b4     37 00 00 FF 
0b8b8     44 E4 85 F1 | 	sub	objptr, ##28228
0b8bc                 | '   ct+=1 											' omit this lpar, this is for expr list
0b8bc                 | '   do
0b8bc                 | LR__0963
0b8bc     37 00 00 FF 
0b8c0     44 E4 05 F1 | 	add	objptr, ##28228
0b8c4     F2 2C 02 FB | 	rdlong	local04, objptr
0b8c8     01 2C 06 F1 | 	add	local04, #1
0b8cc     F2 2C 62 FC | 	wrlong	local04, objptr
0b8d0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b8d0                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0b8d0     03 2C 66 F0 | 	shl	local04, #3
0b8d4     02 00 00 FF 
0b8d8     38 E4 85 F1 | 	sub	objptr, ##1080
0b8dc     F2 2C 02 F1 | 	add	local04, objptr
0b8e0     04 2C 06 F1 | 	add	local04, #4
0b8e4     16 37 02 FB | 	rdlong	local09, local04
0b8e8     15 36 0E F2 | 	cmp	local09, #21 wz
0b8ec     35 00 00 FF 
0b8f0     0C E4 85 F1 | 	sub	objptr, ##27148
0b8f4     44 00 90 5D |  if_ne	jmp	#LR__0964
0b8f8     37 00 00 FF 
0b8fc     44 E4 05 F1 | 	add	objptr, ##28228
0b900     F2 36 02 FB | 	rdlong	local09, objptr
0b904     01 36 06 F1 | 	add	local09, #1
0b908     F2 36 62 FC | 	wrlong	local09, objptr
0b90c     37 00 00 FF 
0b910     44 E4 85 F1 | 	sub	objptr, ##28228
0b914     AC 01 B0 FD | 	call	#_expr
0b918     FD 38 02 F6 | 	mov	local10, result1
0b91c     37 00 00 FF 
0b920     44 E4 05 F1 | 	add	objptr, ##28228
0b924     F2 36 02 FB | 	rdlong	local09, objptr
0b928     01 36 06 F1 | 	add	local09, #1
0b92c     F2 36 62 FC | 	wrlong	local09, objptr
0b930     37 00 00 FF 
0b934     44 E4 85 F1 | 	sub	objptr, ##28228
0b938     08 00 90 FD | 	jmp	#LR__0965
0b93c                 | LR__0964
0b93c     84 01 B0 FD | 	call	#_expr
0b940     FD 38 02 F6 | 	mov	local10, result1
0b944                 | LR__0965
0b944                 | '     if err>0 then return err
0b944     01 38 56 F2 | 	cmps	local10, #1 wc
0b948     1C FB 01 36 |  if_ae	mov	result1, local10
0b94c     68 01 90 3D |  if_ae	jmp	#LR__0968
0b950     01 34 06 F1 | 	add	local08, #1
0b954     37 00 00 FF 
0b958     44 E4 05 F1 | 	add	objptr, ##28228
0b95c     F2 2C 02 FB | 	rdlong	local04, objptr
0b960     03 2C 66 F0 | 	shl	local04, #3
0b964     02 00 00 FF 
0b968     38 E4 85 F1 | 	sub	objptr, ##1080
0b96c     F2 2C 02 F1 | 	add	local04, objptr
0b970     04 2C 06 F1 | 	add	local04, #4
0b974     16 39 02 FB | 	rdlong	local10, local04
0b978     14 38 0E F2 | 	cmp	local10, #20 wz
0b97c     35 00 00 FF 
0b980     0C E4 85 F1 | 	sub	objptr, ##27148
0b984     34 00 90 AD |  if_e	jmp	#LR__0966
0b988     37 00 00 FF 
0b98c     44 E4 05 F1 | 	add	objptr, ##28228
0b990     F2 38 02 FB | 	rdlong	local10, objptr
0b994     03 38 66 F0 | 	shl	local10, #3
0b998     02 00 00 FF 
0b99c     38 E4 85 F1 | 	sub	objptr, ##1080
0b9a0     F2 38 02 F1 | 	add	local10, objptr
0b9a4     04 38 06 F1 | 	add	local10, #4
0b9a8     1C 39 02 FB | 	rdlong	local10, local10
0b9ac     FE 39 0E F2 | 	cmp	local10, #510 wz
0b9b0     35 00 00 FF 
0b9b4     0C E4 85 F1 | 	sub	objptr, ##27148
0b9b8     00 FF 9F 5D |  if_ne	jmp	#LR__0963
0b9bc                 | LR__0966
0b9bc                 | '     if lparts(ct).token=token_end then return 14
0b9bc     37 00 00 FF 
0b9c0     44 E4 05 F1 | 	add	objptr, ##28228
0b9c4     F2 2C 02 FB | 	rdlong	local04, objptr
0b9c8     03 2C 66 F0 | 	shl	local04, #3
0b9cc     02 00 00 FF 
0b9d0     38 E4 85 F1 | 	sub	objptr, ##1080
0b9d4     F2 2C 02 F1 | 	add	local04, objptr
0b9d8     04 2C 06 F1 | 	add	local04, #4
0b9dc     16 39 02 FB | 	rdlong	local10, local04
0b9e0     FE 39 0E F2 | 	cmp	local10, #510 wz
0b9e4     35 00 00 FF 
0b9e8     0C E4 85 F1 | 	sub	objptr, ##27148
0b9ec     0E FA 05 A6 |  if_e	mov	result1, #14
0b9f0     C4 00 90 AD |  if_e	jmp	#LR__0968
0b9f4                 | LR__0967
0b9f4     1A 29 02 F6 | 	mov	local02, local08
0b9f8     12 2A 06 F6 | 	mov	local03, #18
0b9fc     18 27 02 F6 | 	mov	local01, local06
0ba00     13 37 02 F6 | 	mov	local09, local01
0ba04     14 3B 02 F6 | 	mov	local11, local02
0ba08     15 27 02 F6 | 	mov	local01, local03
0ba0c     4A 00 00 FF 
0ba10     7C E4 05 F1 | 	add	objptr, ##38012
0ba14     F2 38 02 FB | 	rdlong	local10, objptr
0ba18     1C 35 02 F6 | 	mov	local08, local10
0ba1c     01 34 66 F0 | 	shl	local08, #1
0ba20     1C 35 02 F1 | 	add	local08, local10
0ba24     02 34 66 F0 | 	shl	local08, #2
0ba28     03 00 00 FF 
0ba2c     00 E4 85 F1 | 	sub	objptr, ##1536
0ba30     F2 34 02 F1 | 	add	local08, objptr
0ba34     1A 37 62 FC | 	wrlong	local09, local08
0ba38     03 00 00 FF 
0ba3c     00 E4 05 F1 | 	add	objptr, ##1536
0ba40     F2 38 02 FB | 	rdlong	local10, objptr
0ba44     1C 37 02 F6 | 	mov	local09, local10
0ba48     01 36 66 F0 | 	shl	local09, #1
0ba4c     1C 37 02 F1 | 	add	local09, local10
0ba50     02 36 66 F0 | 	shl	local09, #2
0ba54     03 00 00 FF 
0ba58     00 E4 85 F1 | 	sub	objptr, ##1536
0ba5c     F2 36 02 F1 | 	add	local09, objptr
0ba60     04 36 06 F1 | 	add	local09, #4
0ba64     1B 3B 62 FC | 	wrlong	local11, local09
0ba68     03 00 00 FF 
0ba6c     00 E4 05 F1 | 	add	objptr, ##1536
0ba70     F2 3A 02 FB | 	rdlong	local11, objptr
0ba74     1D 39 02 F6 | 	mov	local10, local11
0ba78     01 38 66 F0 | 	shl	local10, #1
0ba7c     1D 39 02 F1 | 	add	local10, local11
0ba80     02 38 66 F0 | 	shl	local10, #2
0ba84     03 00 00 FF 
0ba88     00 E4 85 F1 | 	sub	objptr, ##1536
0ba8c     F2 38 02 F1 | 	add	local10, objptr
0ba90     08 38 06 F1 | 	add	local10, #8
0ba94     1C 27 62 FC | 	wrlong	local01, local10
0ba98     03 00 00 FF 
0ba9c     00 E4 05 F1 | 	add	objptr, ##1536
0baa0     F2 36 02 FB | 	rdlong	local09, objptr
0baa4     01 36 06 F1 | 	add	local09, #1
0baa8     F2 36 62 FC | 	wrlong	local09, objptr
0baac     4A 00 00 FF 
0bab0     7C E4 85 F1 | 	sub	objptr, ##38012
0bab4                 | ' t2.result.twowords(1)=numpar
0bab4                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0bab4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0bab4                 | ' return 0
0bab4     00 FA 05 F6 | 	mov	result1, #0
0bab8                 | LR__0968
0bab8     A7 F0 03 F6 | 	mov	ptra, fp
0babc     B2 00 A0 FD | 	call	#popregs_
0bac0                 | _getaddr_ret
0bac0     2D 00 64 FD | 	ret
0bac4                 | 
0bac4                 | ' 
0bac4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bac4                 | ' '--------------------------------------------- 
0bac4                 | ' 
0bac4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bac4                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0bac4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bac4                 | ' 
0bac4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bac4                 | ' '
0bac4                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0bac4                 | ' '
0bac4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bac4                 | ' 
0bac4                 | ' function expr() as ulong 
0bac4                 | _expr
0bac4     07 4A 05 F6 | 	mov	COUNT_, #7
0bac8     A8 00 A0 FD | 	call	#pushregs_
0bacc                 | _expr_enter
0bacc     37 00 00 FF 
0bad0     44 E4 05 F1 | 	add	objptr, ##28228
0bad4     F2 2C 02 FB | 	rdlong	local04, objptr
0bad8     03 2C 66 F0 | 	shl	local04, #3
0badc     02 00 00 FF 
0bae0     38 E4 85 F1 | 	sub	objptr, ##1080
0bae4     F2 2C 02 F1 | 	add	local04, objptr
0bae8     04 2C 06 F1 | 	add	local04, #4
0baec     16 2F 02 FB | 	rdlong	local05, local04
0baf0                 | ' 
0baf0                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0baf0     FE 2F 0E F2 | 	cmp	local05, #510 wz
0baf4     35 00 00 FF 
0baf8     0C E4 85 F1 | 	sub	objptr, ##27148
0bafc     C4 00 90 5D |  if_ne	jmp	#LR__0970
0bb00     1D 26 06 F6 | 	mov	local01, #29
0bb04     FF 2A 06 F6 | 	mov	local03, #255
0bb08     13 31 02 F6 | 	mov	local06, local01
0bb0c     14 33 02 F6 | 	mov	local07, local02
0bb10     15 27 02 F6 | 	mov	local01, local03
0bb14     4A 00 00 FF 
0bb18     7C E4 05 F1 | 	add	objptr, ##38012
0bb1c     F2 2E 02 FB | 	rdlong	local05, objptr
0bb20     17 2D 02 F6 | 	mov	local04, local05
0bb24     01 2C 66 F0 | 	shl	local04, #1
0bb28     17 2D 02 F1 | 	add	local04, local05
0bb2c     02 2C 66 F0 | 	shl	local04, #2
0bb30     03 00 00 FF 
0bb34     00 E4 85 F1 | 	sub	objptr, ##1536
0bb38     F2 2C 02 F1 | 	add	local04, objptr
0bb3c     16 31 62 FC | 	wrlong	local06, local04
0bb40     03 00 00 FF 
0bb44     00 E4 05 F1 | 	add	objptr, ##1536
0bb48     F2 30 02 FB | 	rdlong	local06, objptr
0bb4c     18 2F 02 F6 | 	mov	local05, local06
0bb50     01 2E 66 F0 | 	shl	local05, #1
0bb54     18 2F 02 F1 | 	add	local05, local06
0bb58     02 2E 66 F0 | 	shl	local05, #2
0bb5c     03 00 00 FF 
0bb60     00 E4 85 F1 | 	sub	objptr, ##1536
0bb64     F2 2E 02 F1 | 	add	local05, objptr
0bb68     04 2E 06 F1 | 	add	local05, #4
0bb6c     17 33 62 FC | 	wrlong	local07, local05
0bb70     03 00 00 FF 
0bb74     00 E4 05 F1 | 	add	objptr, ##1536
0bb78     F2 32 02 FB | 	rdlong	local07, objptr
0bb7c     19 31 02 F6 | 	mov	local06, local07
0bb80     01 30 66 F0 | 	shl	local06, #1
0bb84     19 31 02 F1 | 	add	local06, local07
0bb88     02 30 66 F0 | 	shl	local06, #2
0bb8c     03 00 00 FF 
0bb90     00 E4 85 F1 | 	sub	objptr, ##1536
0bb94     F2 30 02 F1 | 	add	local06, objptr
0bb98     08 30 06 F1 | 	add	local06, #8
0bb9c     18 27 62 FC | 	wrlong	local01, local06
0bba0     03 00 00 FF 
0bba4     00 E4 05 F1 | 	add	objptr, ##1536
0bba8     F2 30 02 FB | 	rdlong	local06, objptr
0bbac     01 30 06 F1 | 	add	local06, #1
0bbb0     F2 30 62 FC | 	wrlong	local06, objptr
0bbb4     4A 00 00 FF 
0bbb8     7C E4 85 F1 | 	sub	objptr, ##38012
0bbbc     1D FA 05 F6 | 	mov	result1, #29
0bbc0     64 01 90 FD | 	jmp	#LR__0973
0bbc4                 | LR__0970
0bbc4     00 26 06 F6 | 	mov	local01, #0
0bbc8     68 01 B0 FD | 	call	#_addsub
0bbcc                 | ' t3.result.uresult=0
0bbcc                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0bbcc                 | ' if err>0 then return err
0bbcc     01 FA 15 F2 | 	cmp	result1, #1 wc
0bbd0     54 01 90 3D |  if_ae	jmp	#LR__0973
0bbd4     37 00 00 FF 
0bbd8     44 E4 05 F1 | 	add	objptr, ##28228
0bbdc     F2 2C 02 FB | 	rdlong	local04, objptr
0bbe0     03 2C 66 F0 | 	shl	local04, #3
0bbe4     02 00 00 FF 
0bbe8     38 E4 85 F1 | 	sub	objptr, ##1080
0bbec     F2 2C 02 F1 | 	add	local04, objptr
0bbf0     04 2C 06 F1 | 	add	local04, #4
0bbf4     16 2F 02 FB | 	rdlong	local05, local04
0bbf8                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0bbf8                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0bbf8     35 00 00 FF 
0bbfc     0C E4 85 F1 | 	sub	objptr, ##27148
0bc00                 | LR__0971
0bc00     1B 2E 0E F2 | 	cmp	local05, #27 wz
0bc04     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0bc08     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0bc0c     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0bc10     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0bc14     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0bc18     08 01 90 5D |  if_ne	jmp	#LR__0972
0bc1c     37 00 00 FF 
0bc20     44 E4 05 F1 | 	add	objptr, ##28228
0bc24     F2 30 02 FB | 	rdlong	local06, objptr
0bc28     01 30 06 F1 | 	add	local06, #1
0bc2c     F2 30 62 FC | 	wrlong	local06, objptr
0bc30     37 00 00 FF 
0bc34     44 E4 85 F1 | 	sub	objptr, ##28228
0bc38     F8 00 B0 FD | 	call	#_addsub
0bc3c                 | '   ct+=1
0bc3c                 | '   err=addsub() : if err>0 then return err
0bc3c     01 FA 15 F2 | 	cmp	result1, #1 wc
0bc40     E4 00 90 3D |  if_ae	jmp	#LR__0973
0bc44     17 2B 02 F6 | 	mov	local03, local05
0bc48     13 31 02 F6 | 	mov	local06, local01
0bc4c     14 33 02 F6 | 	mov	local07, local02
0bc50     15 2F 02 F6 | 	mov	local05, local03
0bc54     4A 00 00 FF 
0bc58     7C E4 05 F1 | 	add	objptr, ##38012
0bc5c     F2 2C 02 FB | 	rdlong	local04, objptr
0bc60     16 FB 01 F6 | 	mov	result1, local04
0bc64     01 FA 65 F0 | 	shl	result1, #1
0bc68     16 FB 01 F1 | 	add	result1, local04
0bc6c     02 FA 65 F0 | 	shl	result1, #2
0bc70     03 00 00 FF 
0bc74     00 E4 85 F1 | 	sub	objptr, ##1536
0bc78     F2 FA 01 F1 | 	add	result1, objptr
0bc7c     FD 30 62 FC | 	wrlong	local06, result1
0bc80     03 00 00 FF 
0bc84     00 E4 05 F1 | 	add	objptr, ##1536
0bc88     F2 30 02 FB | 	rdlong	local06, objptr
0bc8c     18 2D 02 F6 | 	mov	local04, local06
0bc90     01 2C 66 F0 | 	shl	local04, #1
0bc94     18 2D 02 F1 | 	add	local04, local06
0bc98     02 2C 66 F0 | 	shl	local04, #2
0bc9c     03 00 00 FF 
0bca0     00 E4 85 F1 | 	sub	objptr, ##1536
0bca4     F2 2C 02 F1 | 	add	local04, objptr
0bca8     04 2C 06 F1 | 	add	local04, #4
0bcac     16 33 62 FC | 	wrlong	local07, local04
0bcb0     03 00 00 FF 
0bcb4     00 E4 05 F1 | 	add	objptr, ##1536
0bcb8     F2 32 02 FB | 	rdlong	local07, objptr
0bcbc     19 31 02 F6 | 	mov	local06, local07
0bcc0     01 30 66 F0 | 	shl	local06, #1
0bcc4     19 31 02 F1 | 	add	local06, local07
0bcc8     02 30 66 F0 | 	shl	local06, #2
0bccc     03 00 00 FF 
0bcd0     00 E4 85 F1 | 	sub	objptr, ##1536
0bcd4     F2 30 02 F1 | 	add	local06, objptr
0bcd8     08 30 06 F1 | 	add	local06, #8
0bcdc     18 2F 62 FC | 	wrlong	local05, local06
0bce0     03 00 00 FF 
0bce4     00 E4 05 F1 | 	add	objptr, ##1536
0bce8     F2 30 02 FB | 	rdlong	local06, objptr
0bcec     01 30 06 F1 | 	add	local06, #1
0bcf0     F2 30 62 FC | 	wrlong	local06, objptr
0bcf4     13 00 00 FF 
0bcf8     38 E4 85 F1 | 	sub	objptr, ##9784
0bcfc     F2 2C 02 FB | 	rdlong	local04, objptr
0bd00     03 2C 66 F0 | 	shl	local04, #3
0bd04     02 00 00 FF 
0bd08     38 E4 85 F1 | 	sub	objptr, ##1080
0bd0c     F2 2C 02 F1 | 	add	local04, objptr
0bd10     04 2C 06 F1 | 	add	local04, #4
0bd14     16 2F 02 FB | 	rdlong	local05, local04
0bd18     35 00 00 FF 
0bd1c     0C E4 85 F1 | 	sub	objptr, ##27148
0bd20     DC FE 9F FD | 	jmp	#LR__0971
0bd24                 | LR__0972
0bd24                 | ' return 0  
0bd24     00 FA 05 F6 | 	mov	result1, #0
0bd28                 | LR__0973
0bd28     A7 F0 03 F6 | 	mov	ptra, fp
0bd2c     B2 00 A0 FD | 	call	#popregs_
0bd30                 | _expr_ret
0bd30     2D 00 64 FD | 	ret
0bd34                 | 
0bd34                 | ' 
0bd34                 | ' ' Second level operators : add, sub, logic
0bd34                 | ' 
0bd34                 | ' function addsub() as ulong
0bd34                 | _addsub
0bd34     07 4A 05 F6 | 	mov	COUNT_, #7
0bd38     A8 00 A0 FD | 	call	#pushregs_
0bd3c                 | _addsub_enter
0bd3c     00 26 06 F6 | 	mov	local01, #0
0bd40     60 01 B0 FD | 	call	#_muldiv
0bd44                 | ' 
0bd44                 | ' t3.result.uresult=0
0bd44                 | ' err=muldiv() : if err>0 then return err           			 
0bd44     01 FA 15 F2 | 	cmp	result1, #1 wc
0bd48     4C 01 90 3D |  if_ae	jmp	#LR__0982
0bd4c     37 00 00 FF 
0bd50     44 E4 05 F1 | 	add	objptr, ##28228
0bd54     F2 2C 02 FB | 	rdlong	local04, objptr
0bd58     03 2C 66 F0 | 	shl	local04, #3
0bd5c     02 00 00 FF 
0bd60     38 E4 85 F1 | 	sub	objptr, ##1080
0bd64     F2 2C 02 F1 | 	add	local04, objptr
0bd68     04 2C 06 F1 | 	add	local04, #4
0bd6c     16 2F 02 FB | 	rdlong	local05, local04
0bd70                 | ' op = lparts(ct).token				 
0bd70                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0bd70     35 00 00 FF 
0bd74     0C E4 85 F1 | 	sub	objptr, ##27148
0bd78                 | LR__0980
0bd78     01 2E 0E F2 | 	cmp	local05, #1 wz
0bd7c     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0bd80     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0bd84     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0bd88     08 01 90 5D |  if_ne	jmp	#LR__0981
0bd8c     37 00 00 FF 
0bd90     44 E4 05 F1 | 	add	objptr, ##28228
0bd94     F2 2C 02 FB | 	rdlong	local04, objptr
0bd98     01 2C 06 F1 | 	add	local04, #1
0bd9c     F2 2C 62 FC | 	wrlong	local04, objptr
0bda0     37 00 00 FF 
0bda4     44 E4 85 F1 | 	sub	objptr, ##28228
0bda8     F8 00 B0 FD | 	call	#_muldiv
0bdac                 | '   ct+=1
0bdac                 | '   err=muldiv() : if err>0 then return err   
0bdac     01 FA 15 F2 | 	cmp	result1, #1 wc
0bdb0     E4 00 90 3D |  if_ae	jmp	#LR__0982
0bdb4     17 2B 02 F6 | 	mov	local03, local05
0bdb8     13 31 02 F6 | 	mov	local06, local01
0bdbc     14 33 02 F6 | 	mov	local07, local02
0bdc0     15 2F 02 F6 | 	mov	local05, local03
0bdc4     4A 00 00 FF 
0bdc8     7C E4 05 F1 | 	add	objptr, ##38012
0bdcc     F2 2C 02 FB | 	rdlong	local04, objptr
0bdd0     16 FB 01 F6 | 	mov	result1, local04
0bdd4     01 FA 65 F0 | 	shl	result1, #1
0bdd8     16 FB 01 F1 | 	add	result1, local04
0bddc     02 FA 65 F0 | 	shl	result1, #2
0bde0     03 00 00 FF 
0bde4     00 E4 85 F1 | 	sub	objptr, ##1536
0bde8     F2 FA 01 F1 | 	add	result1, objptr
0bdec     FD 30 62 FC | 	wrlong	local06, result1
0bdf0     03 00 00 FF 
0bdf4     00 E4 05 F1 | 	add	objptr, ##1536
0bdf8     F2 30 02 FB | 	rdlong	local06, objptr
0bdfc     18 2D 02 F6 | 	mov	local04, local06
0be00     01 2C 66 F0 | 	shl	local04, #1
0be04     18 2D 02 F1 | 	add	local04, local06
0be08     02 2C 66 F0 | 	shl	local04, #2
0be0c     03 00 00 FF 
0be10     00 E4 85 F1 | 	sub	objptr, ##1536
0be14     F2 2C 02 F1 | 	add	local04, objptr
0be18     04 2C 06 F1 | 	add	local04, #4
0be1c     16 33 62 FC | 	wrlong	local07, local04
0be20     03 00 00 FF 
0be24     00 E4 05 F1 | 	add	objptr, ##1536
0be28     F2 32 02 FB | 	rdlong	local07, objptr
0be2c     19 31 02 F6 | 	mov	local06, local07
0be30     01 30 66 F0 | 	shl	local06, #1
0be34     19 31 02 F1 | 	add	local06, local07
0be38     02 30 66 F0 | 	shl	local06, #2
0be3c     03 00 00 FF 
0be40     00 E4 85 F1 | 	sub	objptr, ##1536
0be44     F2 30 02 F1 | 	add	local06, objptr
0be48     08 30 06 F1 | 	add	local06, #8
0be4c     18 2F 62 FC | 	wrlong	local05, local06
0be50     03 00 00 FF 
0be54     00 E4 05 F1 | 	add	objptr, ##1536
0be58     F2 30 02 FB | 	rdlong	local06, objptr
0be5c     01 30 06 F1 | 	add	local06, #1
0be60     F2 30 62 FC | 	wrlong	local06, objptr
0be64     13 00 00 FF 
0be68     38 E4 85 F1 | 	sub	objptr, ##9784
0be6c     F2 2C 02 FB | 	rdlong	local04, objptr
0be70     03 2C 66 F0 | 	shl	local04, #3
0be74     02 00 00 FF 
0be78     38 E4 85 F1 | 	sub	objptr, ##1080
0be7c     F2 2C 02 F1 | 	add	local04, objptr
0be80     04 2C 06 F1 | 	add	local04, #4
0be84     16 2F 02 FB | 	rdlong	local05, local04
0be88     35 00 00 FF 
0be8c     0C E4 85 F1 | 	sub	objptr, ##27148
0be90     E4 FE 9F FD | 	jmp	#LR__0980
0be94                 | LR__0981
0be94                 | ' return 0
0be94     00 FA 05 F6 | 	mov	result1, #0
0be98                 | LR__0982
0be98     A7 F0 03 F6 | 	mov	ptra, fp
0be9c     B2 00 A0 FD | 	call	#popregs_
0bea0                 | _addsub_ret
0bea0     2D 00 64 FD | 	ret
0bea4                 | 
0bea4                 | ' 
0bea4                 | ' ' Third level operators : mul,div,shift,power
0bea4                 | ' 
0bea4                 | ' function muldiv() as ulong
0bea4                 | _muldiv
0bea4     07 4A 05 F6 | 	mov	COUNT_, #7
0bea8     A8 00 A0 FD | 	call	#pushregs_
0beac                 | _muldiv_enter
0beac     00 26 06 F6 | 	mov	local01, #0
0beb0     6C 01 B0 FD | 	call	#_getvalue
0beb4                 | ' 
0beb4                 | ' t3.result.uresult=0
0beb4                 | ' err=getvalue() : if err>0 then return err     
0beb4     01 FA 15 F2 | 	cmp	result1, #1 wc
0beb8     58 01 90 3D |  if_ae	jmp	#LR__0992
0bebc     37 00 00 FF 
0bec0     44 E4 05 F1 | 	add	objptr, ##28228
0bec4     F2 2C 02 FB | 	rdlong	local04, objptr
0bec8     03 2C 66 F0 | 	shl	local04, #3
0becc     02 00 00 FF 
0bed0     38 E4 85 F1 | 	sub	objptr, ##1080
0bed4     F2 2C 02 F1 | 	add	local04, objptr
0bed8     04 2C 06 F1 | 	add	local04, #4
0bedc     16 2F 02 FB | 	rdlong	local05, local04
0bee0                 | ' op = lparts(ct).token
0bee0                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0bee0     35 00 00 FF 
0bee4     0C E4 85 F1 | 	sub	objptr, ##27148
0bee8                 | LR__0990
0bee8     05 2E 0E F2 | 	cmp	local05, #5 wz
0beec     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0bef0     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0bef4     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0bef8     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0befc     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0bf00     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0bf04     08 01 90 5D |  if_ne	jmp	#LR__0991
0bf08     37 00 00 FF 
0bf0c     44 E4 05 F1 | 	add	objptr, ##28228
0bf10     F2 2C 02 FB | 	rdlong	local04, objptr
0bf14     01 2C 06 F1 | 	add	local04, #1
0bf18     F2 2C 62 FC | 	wrlong	local04, objptr
0bf1c     37 00 00 FF 
0bf20     44 E4 85 F1 | 	sub	objptr, ##28228
0bf24     F8 00 B0 FD | 	call	#_getvalue
0bf28                 | '   ct+=1
0bf28                 | '   err=getvalue() :if err>0 then return err   
0bf28     01 FA 15 F2 | 	cmp	result1, #1 wc
0bf2c     E4 00 90 3D |  if_ae	jmp	#LR__0992
0bf30     17 2B 02 F6 | 	mov	local03, local05
0bf34     13 31 02 F6 | 	mov	local06, local01
0bf38     14 33 02 F6 | 	mov	local07, local02
0bf3c     15 2F 02 F6 | 	mov	local05, local03
0bf40     4A 00 00 FF 
0bf44     7C E4 05 F1 | 	add	objptr, ##38012
0bf48     F2 2C 02 FB | 	rdlong	local04, objptr
0bf4c     16 FB 01 F6 | 	mov	result1, local04
0bf50     01 FA 65 F0 | 	shl	result1, #1
0bf54     16 FB 01 F1 | 	add	result1, local04
0bf58     02 FA 65 F0 | 	shl	result1, #2
0bf5c     03 00 00 FF 
0bf60     00 E4 85 F1 | 	sub	objptr, ##1536
0bf64     F2 FA 01 F1 | 	add	result1, objptr
0bf68     FD 30 62 FC | 	wrlong	local06, result1
0bf6c     03 00 00 FF 
0bf70     00 E4 05 F1 | 	add	objptr, ##1536
0bf74     F2 30 02 FB | 	rdlong	local06, objptr
0bf78     18 2D 02 F6 | 	mov	local04, local06
0bf7c     01 2C 66 F0 | 	shl	local04, #1
0bf80     18 2D 02 F1 | 	add	local04, local06
0bf84     02 2C 66 F0 | 	shl	local04, #2
0bf88     03 00 00 FF 
0bf8c     00 E4 85 F1 | 	sub	objptr, ##1536
0bf90     F2 2C 02 F1 | 	add	local04, objptr
0bf94     04 2C 06 F1 | 	add	local04, #4
0bf98     16 33 62 FC | 	wrlong	local07, local04
0bf9c     03 00 00 FF 
0bfa0     00 E4 05 F1 | 	add	objptr, ##1536
0bfa4     F2 32 02 FB | 	rdlong	local07, objptr
0bfa8     19 31 02 F6 | 	mov	local06, local07
0bfac     01 30 66 F0 | 	shl	local06, #1
0bfb0     19 31 02 F1 | 	add	local06, local07
0bfb4     02 30 66 F0 | 	shl	local06, #2
0bfb8     03 00 00 FF 
0bfbc     00 E4 85 F1 | 	sub	objptr, ##1536
0bfc0     F2 30 02 F1 | 	add	local06, objptr
0bfc4     08 30 06 F1 | 	add	local06, #8
0bfc8     18 2F 62 FC | 	wrlong	local05, local06
0bfcc     03 00 00 FF 
0bfd0     00 E4 05 F1 | 	add	objptr, ##1536
0bfd4     F2 30 02 FB | 	rdlong	local06, objptr
0bfd8     01 30 06 F1 | 	add	local06, #1
0bfdc     F2 30 62 FC | 	wrlong	local06, objptr
0bfe0     13 00 00 FF 
0bfe4     38 E4 85 F1 | 	sub	objptr, ##9784
0bfe8     F2 2C 02 FB | 	rdlong	local04, objptr
0bfec     03 2C 66 F0 | 	shl	local04, #3
0bff0     02 00 00 FF 
0bff4     38 E4 85 F1 | 	sub	objptr, ##1080
0bff8     F2 2C 02 F1 | 	add	local04, objptr
0bffc     04 2C 06 F1 | 	add	local04, #4
0c000     16 2F 02 FB | 	rdlong	local05, local04
0c004     35 00 00 FF 
0c008     0C E4 85 F1 | 	sub	objptr, ##27148
0c00c     D8 FE 9F FD | 	jmp	#LR__0990
0c010                 | LR__0991
0c010                 | ' return 0
0c010     00 FA 05 F6 | 	mov	result1, #0
0c014                 | LR__0992
0c014     A7 F0 03 F6 | 	mov	ptra, fp
0c018     B2 00 A0 FD | 	call	#popregs_
0c01c                 | _muldiv_ret
0c01c     2D 00 64 FD | 	ret
0c020                 | 
0c020                 | ' 
0c020                 | ' ' Get a value for operations
0c020                 | ' 
0c020                 | ' function getvalue()  as ulong
0c020                 | _getvalue
0c020     0B 4A 05 F6 | 	mov	COUNT_, #11
0c024     A8 00 A0 FD | 	call	#pushregs_
0c028                 | _getvalue_enter
0c028     01 2C 06 F6 | 	mov	local04, #1
0c02c     00 26 06 F6 | 	mov	local01, #0
0c030     1D 2A 06 F6 | 	mov	local03, #29
0c034     37 00 00 FF 
0c038     44 E4 05 F1 | 	add	objptr, ##28228
0c03c     F2 16 02 FB | 	rdlong	arg03, objptr
0c040     03 16 66 F0 | 	shl	arg03, #3
0c044     02 00 00 FF 
0c048     38 E4 85 F1 | 	sub	objptr, ##1080
0c04c     F2 16 02 F1 | 	add	arg03, objptr
0c050     04 16 06 F1 | 	add	arg03, #4
0c054     0B 2F 02 FB | 	rdlong	local05, arg03
0c058                 | ' 
0c058                 | ' m=1											' for negative numbers
0c058                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c058                 | ' op=lparts(ct).token
0c058                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c058     02 2E 0E F2 | 	cmp	local05, #2 wz
0c05c     35 00 00 FF 
0c060     0C E4 85 F1 | 	sub	objptr, ##27148
0c064     38 00 90 5D |  if_ne	jmp	#LR__1000
0c068     01 2C 66 F6 | 	neg	local04, #1
0c06c     37 00 00 FF 
0c070     44 E4 05 F1 | 	add	objptr, ##28228
0c074     F2 2E 02 FB | 	rdlong	local05, objptr
0c078     01 2E 06 F1 | 	add	local05, #1
0c07c     F2 2E 62 FC | 	wrlong	local05, objptr
0c080     03 2E 66 F0 | 	shl	local05, #3
0c084     02 00 00 FF 
0c088     38 E4 85 F1 | 	sub	objptr, ##1080
0c08c     F2 2E 02 F1 | 	add	local05, objptr
0c090     04 2E 06 F1 | 	add	local05, #4
0c094     17 2F 02 FB | 	rdlong	local05, local05
0c098     35 00 00 FF 
0c09c     0C E4 85 F1 | 	sub	objptr, ##27148
0c0a0                 | LR__1000
0c0a0                 | ' select case op
0c0a0     01 00 00 FF 
0c0a4     00 2E 0E F2 | 	cmp	local05, ##512 wz
0c0a8     44 00 90 AD |  if_e	jmp	#LR__1001
0c0ac     01 00 00 FF 
0c0b0     01 2E 0E F2 | 	cmp	local05, ##513 wz
0c0b4     90 01 90 AD |  if_e	jmp	#LR__1004
0c0b8     01 00 00 FF 
0c0bc     02 2E 0E F2 | 	cmp	local05, ##514 wz
0c0c0     44 04 90 AD |  if_e	jmp	#LR__1011
0c0c4     01 00 00 FF 
0c0c8     03 2E 0E F2 | 	cmp	local05, ##515 wz
0c0cc     A8 05 90 AD |  if_e	jmp	#LR__1014
0c0d0     2C 2E 0E F2 | 	cmp	local05, #44 wz
0c0d4     78 07 90 AD |  if_e	jmp	#LR__1019
0c0d8     01 00 00 FF 
0c0dc     04 2E 0E F2 | 	cmp	local05, ##516 wz
0c0e0     70 08 90 AD |  if_e	jmp	#LR__1020
0c0e4     15 2E 0E F2 | 	cmp	local05, #21 wz
0c0e8     98 08 90 AD |  if_e	jmp	#LR__1021
0c0ec     10 09 90 FD | 	jmp	#LR__1022
0c0f0                 | LR__1001
0c0f0                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c0f0     01 2C 0E F2 | 	cmp	local04, #1 wz
0c0f4     3C 00 90 5D |  if_ne	jmp	#LR__1002
0c0f8     37 00 00 FF 
0c0fc     44 E4 05 F1 | 	add	objptr, ##28228
0c100     F2 2E 02 FB | 	rdlong	local05, objptr
0c104     03 2E 66 F0 | 	shl	local05, #3
0c108     02 00 00 FF 
0c10c     38 E4 85 F1 | 	sub	objptr, ##1080
0c110     F2 2E 02 F1 | 	add	local05, objptr
0c114     17 13 02 FB | 	rdlong	arg01, local05
0c118     00 14 06 F6 | 	mov	arg02, #0
0c11c     35 00 00 FF 
0c120     0C E4 85 F1 | 	sub	objptr, ##27148
0c124     E0 D2 B1 FD | 	call	#__system____builtin_atoi
0c128     FD 2C 02 FD | 	qmul	local04, result1
0c12c     18 26 62 FD | 	getqx	local01
0c130     1C 2A 06 F6 | 	mov	local03, #28
0c134                 | LR__1002
0c134                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c134     FF FF 7F FF 
0c138     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c13c     3C 00 90 5D |  if_ne	jmp	#LR__1003
0c140     37 00 00 FF 
0c144     44 E4 05 F1 | 	add	objptr, ##28228
0c148     F2 2E 02 FB | 	rdlong	local05, objptr
0c14c     03 2E 66 F0 | 	shl	local05, #3
0c150     02 00 00 FF 
0c154     38 E4 85 F1 | 	sub	objptr, ##1080
0c158     F2 2E 02 F1 | 	add	local05, objptr
0c15c     17 13 02 FB | 	rdlong	arg01, local05
0c160     00 14 06 F6 | 	mov	arg02, #0
0c164     35 00 00 FF 
0c168     0C E4 85 F1 | 	sub	objptr, ##27148
0c16c     98 D2 B1 FD | 	call	#__system____builtin_atoi
0c170     FD 2C 02 FD | 	qmul	local04, result1
0c174     18 26 62 FD | 	getqx	local01
0c178     1C 2A 06 F6 | 	mov	local03, #28
0c17c                 | LR__1003
0c17c     13 31 02 F6 | 	mov	local06, local01
0c180     14 33 02 F6 | 	mov	local07, local02
0c184     15 2F 02 F6 | 	mov	local05, local03
0c188     4A 00 00 FF 
0c18c     7C E4 05 F1 | 	add	objptr, ##38012
0c190     F2 26 02 FB | 	rdlong	local01, objptr
0c194     13 2D 02 F6 | 	mov	local04, local01
0c198     01 2C 66 F0 | 	shl	local04, #1
0c19c     13 2D 02 F1 | 	add	local04, local01
0c1a0     02 2C 66 F0 | 	shl	local04, #2
0c1a4     03 00 00 FF 
0c1a8     00 E4 85 F1 | 	sub	objptr, ##1536
0c1ac     F2 2C 02 F1 | 	add	local04, objptr
0c1b0     16 31 62 FC | 	wrlong	local06, local04
0c1b4     03 00 00 FF 
0c1b8     00 E4 05 F1 | 	add	objptr, ##1536
0c1bc     F2 30 02 FB | 	rdlong	local06, objptr
0c1c0     18 27 02 F6 | 	mov	local01, local06
0c1c4     01 26 66 F0 | 	shl	local01, #1
0c1c8     18 27 02 F1 | 	add	local01, local06
0c1cc     02 26 66 F0 | 	shl	local01, #2
0c1d0     03 00 00 FF 
0c1d4     00 E4 85 F1 | 	sub	objptr, ##1536
0c1d8     F2 26 02 F1 | 	add	local01, objptr
0c1dc     04 26 06 F1 | 	add	local01, #4
0c1e0     13 33 62 FC | 	wrlong	local07, local01
0c1e4     03 00 00 FF 
0c1e8     00 E4 05 F1 | 	add	objptr, ##1536
0c1ec     F2 32 02 FB | 	rdlong	local07, objptr
0c1f0     19 31 02 F6 | 	mov	local06, local07
0c1f4     01 30 66 F0 | 	shl	local06, #1
0c1f8     19 31 02 F1 | 	add	local06, local07
0c1fc     02 30 66 F0 | 	shl	local06, #2
0c200     03 00 00 FF 
0c204     00 E4 85 F1 | 	sub	objptr, ##1536
0c208     F2 30 02 F1 | 	add	local06, objptr
0c20c     08 30 06 F1 | 	add	local06, #8
0c210     18 2F 62 FC | 	wrlong	local05, local06
0c214     03 00 00 FF 
0c218     00 E4 05 F1 | 	add	objptr, ##1536
0c21c     F2 30 02 FB | 	rdlong	local06, objptr
0c220     01 30 06 F1 | 	add	local06, #1
0c224     F2 30 62 FC | 	wrlong	local06, objptr
0c228     13 00 00 FF 
0c22c     38 E4 85 F1 | 	sub	objptr, ##9784
0c230     F2 30 02 FB | 	rdlong	local06, objptr
0c234     01 30 06 F1 | 	add	local06, #1
0c238     F2 30 62 FC | 	wrlong	local06, objptr
0c23c     37 00 00 FF 
0c240     44 E4 85 F1 | 	sub	objptr, ##28228
0c244     E4 07 90 FD | 	jmp	#LR__1023
0c248                 | LR__1004
0c248                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c248     37 00 00 FF 
0c24c     44 E4 05 F1 | 	add	objptr, ##28228
0c250     F2 16 02 FB | 	rdlong	arg03, objptr
0c254     03 16 66 F0 | 	shl	arg03, #3
0c258     02 00 00 FF 
0c25c     38 E4 85 F1 | 	sub	objptr, ##1080
0c260     F2 16 02 F1 | 	add	arg03, objptr
0c264     0B 13 02 FB | 	rdlong	arg01, arg03
0c268     01 14 06 F6 | 	mov	arg02, #1
0c26c     35 00 00 FF 
0c270     0C E4 85 F1 | 	sub	objptr, ##27148
0c274     1C BD B1 FD | 	call	#__system__Left_S
0c278     FD 12 02 F6 | 	mov	arg01, result1
0c27c     B0 01 00 FF 
0c280     7F 15 06 F6 | 	mov	arg02, ##@LR__5802
0c284     B8 9C B1 FD | 	call	#__system___string_cmp
0c288     00 FA 0D F2 | 	cmp	result1, #0 wz
0c28c     94 00 90 5D |  if_ne	jmp	#LR__1007
0c290     37 00 00 FF 
0c294     44 E4 05 F1 | 	add	objptr, ##28228
0c298     F2 32 02 FB | 	rdlong	local07, objptr
0c29c     19 31 02 F6 | 	mov	local06, local07
0c2a0     03 30 66 F0 | 	shl	local06, #3
0c2a4     02 00 00 FF 
0c2a8     38 E4 85 F1 | 	sub	objptr, ##1080
0c2ac     F2 30 02 F1 | 	add	local06, objptr
0c2b0     B0 01 00 FF 
0c2b4     81 2F 06 F6 | 	mov	local05, ##@LR__5803
0c2b8     03 32 66 F0 | 	shl	local07, #3
0c2bc     F2 32 02 F1 | 	add	local07, objptr
0c2c0     19 33 02 FB | 	rdlong	local07, local07
0c2c4     02 00 00 FF 
0c2c8     38 E4 05 F1 | 	add	objptr, ##1080
0c2cc     F2 26 02 FB | 	rdlong	local01, objptr
0c2d0     03 26 66 F0 | 	shl	local01, #3
0c2d4     02 00 00 FF 
0c2d8     38 E4 85 F1 | 	sub	objptr, ##1080
0c2dc     F2 26 02 F1 | 	add	local01, objptr
0c2e0     13 13 02 FB | 	rdlong	arg01, local01
0c2e4     35 00 00 FF 
0c2e8     0C E4 85 F1 | 	sub	objptr, ##27148
0c2ec     09 35 02 F6 | 	mov	local08, arg01
0c2f0     97 06 48 FB | 	callpa	#(@LR__1006-@LR__1005)>>2,fcache_load_ptr_
0c2f4                 | LR__1005
0c2f4     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c2f8     01 34 06 51 |  if_ne	add	local08, #1
0c2fc     F4 FF 9F 5D |  if_ne	jmp	#LR__1005
0c300                 | LR__1006
0c300     09 35 82 F1 | 	sub	local08, arg01
0c304     1A 15 02 F6 | 	mov	arg02, local08
0c308     01 14 86 F1 | 	sub	arg02, #1
0c30c     19 13 02 F6 | 	mov	arg01, local07
0c310     08 BD B1 FD | 	call	#__system__Right_S
0c314     FD 14 02 F6 | 	mov	arg02, result1
0c318     17 13 02 F6 | 	mov	arg01, local05
0c31c     54 9C B1 FD | 	call	#__system___string_concat
0c320     18 FB 61 FC | 	wrlong	result1, local06
0c324                 | LR__1007
0c324                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c324     37 00 00 FF 
0c328     44 E4 05 F1 | 	add	objptr, ##28228
0c32c     F2 16 02 FB | 	rdlong	arg03, objptr
0c330     03 16 66 F0 | 	shl	arg03, #3
0c334     02 00 00 FF 
0c338     38 E4 85 F1 | 	sub	objptr, ##1080
0c33c     F2 16 02 F1 | 	add	arg03, objptr
0c340     0B 13 02 FB | 	rdlong	arg01, arg03
0c344     01 14 06 F6 | 	mov	arg02, #1
0c348     35 00 00 FF 
0c34c     0C E4 85 F1 | 	sub	objptr, ##27148
0c350     40 BC B1 FD | 	call	#__system__Left_S
0c354     FD 12 02 F6 | 	mov	arg01, result1
0c358     B0 01 00 FF 
0c35c     84 15 06 F6 | 	mov	arg02, ##@LR__5804
0c360     DC 9B B1 FD | 	call	#__system___string_cmp
0c364     00 FA 0D F2 | 	cmp	result1, #0 wz
0c368     94 00 90 5D |  if_ne	jmp	#LR__1010
0c36c     37 00 00 FF 
0c370     44 E4 05 F1 | 	add	objptr, ##28228
0c374     F2 32 02 FB | 	rdlong	local07, objptr
0c378     19 31 02 F6 | 	mov	local06, local07
0c37c     03 30 66 F0 | 	shl	local06, #3
0c380     02 00 00 FF 
0c384     38 E4 85 F1 | 	sub	objptr, ##1080
0c388     F2 30 02 F1 | 	add	local06, objptr
0c38c     B0 01 00 FF 
0c390     86 2F 06 F6 | 	mov	local05, ##@LR__5805
0c394     03 32 66 F0 | 	shl	local07, #3
0c398     F2 32 02 F1 | 	add	local07, objptr
0c39c     19 33 02 FB | 	rdlong	local07, local07
0c3a0     02 00 00 FF 
0c3a4     38 E4 05 F1 | 	add	objptr, ##1080
0c3a8     F2 26 02 FB | 	rdlong	local01, objptr
0c3ac     03 26 66 F0 | 	shl	local01, #3
0c3b0     02 00 00 FF 
0c3b4     38 E4 85 F1 | 	sub	objptr, ##1080
0c3b8     F2 26 02 F1 | 	add	local01, objptr
0c3bc     13 13 02 FB | 	rdlong	arg01, local01
0c3c0     35 00 00 FF 
0c3c4     0C E4 85 F1 | 	sub	objptr, ##27148
0c3c8     09 35 02 F6 | 	mov	local08, arg01
0c3cc     97 06 48 FB | 	callpa	#(@LR__1009-@LR__1008)>>2,fcache_load_ptr_
0c3d0                 | LR__1008
0c3d0     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c3d4     01 34 06 51 |  if_ne	add	local08, #1
0c3d8     F4 FF 9F 5D |  if_ne	jmp	#LR__1008
0c3dc                 | LR__1009
0c3dc     09 35 82 F1 | 	sub	local08, arg01
0c3e0     1A 15 02 F6 | 	mov	arg02, local08
0c3e4     01 14 86 F1 | 	sub	arg02, #1
0c3e8     19 13 02 F6 | 	mov	arg01, local07
0c3ec     2C BC B1 FD | 	call	#__system__Right_S
0c3f0     FD 14 02 F6 | 	mov	arg02, result1
0c3f4     17 13 02 F6 | 	mov	arg01, local05
0c3f8     78 9B B1 FD | 	call	#__system___string_concat
0c3fc     18 FB 61 FC | 	wrlong	result1, local06
0c400                 | LR__1010
0c400     37 00 00 FF 
0c404     44 E4 05 F1 | 	add	objptr, ##28228
0c408     F2 30 02 FB | 	rdlong	local06, objptr
0c40c     03 30 66 F0 | 	shl	local06, #3
0c410     02 00 00 FF 
0c414     38 E4 85 F1 | 	sub	objptr, ##1080
0c418     F2 30 02 F1 | 	add	local06, objptr
0c41c     18 13 02 FB | 	rdlong	arg01, local06
0c420     00 14 06 F6 | 	mov	arg02, #0
0c424     35 00 00 FF 
0c428     0C E4 85 F1 | 	sub	objptr, ##27148
0c42c     D8 CF B1 FD | 	call	#__system____builtin_atoi
0c430     FD 2C 02 FD | 	qmul	local04, result1
0c434     4A 00 00 FF 
0c438     7C E4 05 F1 | 	add	objptr, ##38012
0c43c     F2 30 02 FB | 	rdlong	local06, objptr
0c440     18 37 02 F6 | 	mov	local09, local06
0c444     01 36 66 F0 | 	shl	local09, #1
0c448     18 37 02 F1 | 	add	local09, local06
0c44c     02 36 66 F0 | 	shl	local09, #2
0c450     03 00 00 FF 
0c454     00 E4 85 F1 | 	sub	objptr, ##1536
0c458     F2 36 02 F1 | 	add	local09, objptr
0c45c     03 00 00 FF 
0c460     00 E4 05 F1 | 	add	objptr, ##1536
0c464     18 26 62 FD | 	getqx	local01
0c468     1C 2A 06 F6 | 	mov	local03, #28
0c46c     13 31 02 F6 | 	mov	local06, local01
0c470     14 33 02 F6 | 	mov	local07, local02
0c474     1B 31 62 FC | 	wrlong	local06, local09
0c478     15 37 02 F6 | 	mov	local09, local03
0c47c     F2 30 02 FB | 	rdlong	local06, objptr
0c480     18 2F 02 F6 | 	mov	local05, local06
0c484     01 2E 66 F0 | 	shl	local05, #1
0c488     18 2F 02 F1 | 	add	local05, local06
0c48c     02 2E 66 F0 | 	shl	local05, #2
0c490     03 00 00 FF 
0c494     00 E4 85 F1 | 	sub	objptr, ##1536
0c498     F2 2E 02 F1 | 	add	local05, objptr
0c49c     04 2E 06 F1 | 	add	local05, #4
0c4a0     17 33 62 FC | 	wrlong	local07, local05
0c4a4     03 00 00 FF 
0c4a8     00 E4 05 F1 | 	add	objptr, ##1536
0c4ac     F2 32 02 FB | 	rdlong	local07, objptr
0c4b0     19 31 02 F6 | 	mov	local06, local07
0c4b4     01 30 66 F0 | 	shl	local06, #1
0c4b8     19 31 02 F1 | 	add	local06, local07
0c4bc     02 30 66 F0 | 	shl	local06, #2
0c4c0     03 00 00 FF 
0c4c4     00 E4 85 F1 | 	sub	objptr, ##1536
0c4c8     F2 30 02 F1 | 	add	local06, objptr
0c4cc     08 30 06 F1 | 	add	local06, #8
0c4d0     18 37 62 FC | 	wrlong	local09, local06
0c4d4     03 00 00 FF 
0c4d8     00 E4 05 F1 | 	add	objptr, ##1536
0c4dc     F2 30 02 FB | 	rdlong	local06, objptr
0c4e0     01 30 06 F1 | 	add	local06, #1
0c4e4     F2 30 62 FC | 	wrlong	local06, objptr
0c4e8     13 00 00 FF 
0c4ec     38 E4 85 F1 | 	sub	objptr, ##9784
0c4f0     F2 30 02 FB | 	rdlong	local06, objptr
0c4f4     01 30 06 F1 | 	add	local06, #1
0c4f8     F2 30 62 FC | 	wrlong	local06, objptr
0c4fc     37 00 00 FF 
0c500     44 E4 85 F1 | 	sub	objptr, ##28228
0c504     24 05 90 FD | 	jmp	#LR__1023
0c508                 | LR__1011
0c508                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0c508     01 2C 0E F2 | 	cmp	local04, #1 wz
0c50c     48 00 90 5D |  if_ne	jmp	#LR__1012
0c510     00 C0 1F FF 
0c514     00 30 06 F6 | 	mov	local06, ##1065353216
0c518     37 00 00 FF 
0c51c     44 E4 05 F1 | 	add	objptr, ##28228
0c520     F2 36 02 FB | 	rdlong	local09, objptr
0c524     03 36 66 F0 | 	shl	local09, #3
0c528     02 00 00 FF 
0c52c     38 E4 85 F1 | 	sub	objptr, ##1080
0c530     F2 36 02 F1 | 	add	local09, objptr
0c534     1B 13 02 FB | 	rdlong	arg01, local09
0c538     35 00 00 FF 
0c53c     0C E4 85 F1 | 	sub	objptr, ##27148
0c540     58 D0 B1 FD | 	call	#__system____builtin_atof
0c544     FD 14 02 F6 | 	mov	arg02, result1
0c548     18 13 02 F6 | 	mov	arg01, local06
0c54c     40 C8 B1 FD | 	call	#__system___float_mul
0c550     FD 26 02 F6 | 	mov	local01, result1
0c554     1E 2A 06 F6 | 	mov	local03, #30
0c558                 | LR__1012
0c558                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0c558     FF FF 7F FF 
0c55c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c560     48 00 90 5D |  if_ne	jmp	#LR__1013
0c564     00 C0 5F FF 
0c568     00 30 06 F6 | 	mov	local06, ##-1082130432
0c56c     37 00 00 FF 
0c570     44 E4 05 F1 | 	add	objptr, ##28228
0c574     F2 36 02 FB | 	rdlong	local09, objptr
0c578     03 36 66 F0 | 	shl	local09, #3
0c57c     02 00 00 FF 
0c580     38 E4 85 F1 | 	sub	objptr, ##1080
0c584     F2 36 02 F1 | 	add	local09, objptr
0c588     1B 13 02 FB | 	rdlong	arg01, local09
0c58c     35 00 00 FF 
0c590     0C E4 85 F1 | 	sub	objptr, ##27148
0c594     04 D0 B1 FD | 	call	#__system____builtin_atof
0c598     FD 14 02 F6 | 	mov	arg02, result1
0c59c     18 13 02 F6 | 	mov	arg01, local06
0c5a0     EC C7 B1 FD | 	call	#__system___float_mul
0c5a4     FD 26 02 F6 | 	mov	local01, result1
0c5a8     1E 2A 06 F6 | 	mov	local03, #30
0c5ac                 | LR__1013
0c5ac     13 31 02 F6 | 	mov	local06, local01
0c5b0     14 33 02 F6 | 	mov	local07, local02
0c5b4     15 2F 02 F6 | 	mov	local05, local03
0c5b8     4A 00 00 FF 
0c5bc     7C E4 05 F1 | 	add	objptr, ##38012
0c5c0     F2 26 02 FB | 	rdlong	local01, objptr
0c5c4     13 37 02 F6 | 	mov	local09, local01
0c5c8     01 36 66 F0 | 	shl	local09, #1
0c5cc     13 37 02 F1 | 	add	local09, local01
0c5d0     02 36 66 F0 | 	shl	local09, #2
0c5d4     03 00 00 FF 
0c5d8     00 E4 85 F1 | 	sub	objptr, ##1536
0c5dc     F2 36 02 F1 | 	add	local09, objptr
0c5e0     1B 31 62 FC | 	wrlong	local06, local09
0c5e4     03 00 00 FF 
0c5e8     00 E4 05 F1 | 	add	objptr, ##1536
0c5ec     F2 36 02 FB | 	rdlong	local09, objptr
0c5f0     1B 31 02 F6 | 	mov	local06, local09
0c5f4     01 30 66 F0 | 	shl	local06, #1
0c5f8     1B 31 02 F1 | 	add	local06, local09
0c5fc     02 30 66 F0 | 	shl	local06, #2
0c600     03 00 00 FF 
0c604     00 E4 85 F1 | 	sub	objptr, ##1536
0c608     F2 30 02 F1 | 	add	local06, objptr
0c60c     04 30 06 F1 | 	add	local06, #4
0c610     18 33 62 FC | 	wrlong	local07, local06
0c614     03 00 00 FF 
0c618     00 E4 05 F1 | 	add	objptr, ##1536
0c61c     F2 36 02 FB | 	rdlong	local09, objptr
0c620     1B 33 02 F6 | 	mov	local07, local09
0c624     01 32 66 F0 | 	shl	local07, #1
0c628     1B 33 02 F1 | 	add	local07, local09
0c62c     02 32 66 F0 | 	shl	local07, #2
0c630     03 00 00 FF 
0c634     00 E4 85 F1 | 	sub	objptr, ##1536
0c638     F2 32 02 F1 | 	add	local07, objptr
0c63c     08 32 06 F1 | 	add	local07, #8
0c640     19 2F 62 FC | 	wrlong	local05, local07
0c644     03 00 00 FF 
0c648     00 E4 05 F1 | 	add	objptr, ##1536
0c64c     F2 30 02 FB | 	rdlong	local06, objptr
0c650     01 30 06 F1 | 	add	local06, #1
0c654     F2 30 62 FC | 	wrlong	local06, objptr
0c658     13 00 00 FF 
0c65c     38 E4 85 F1 | 	sub	objptr, ##9784
0c660     F2 30 02 FB | 	rdlong	local06, objptr
0c664     01 30 06 F1 | 	add	local06, #1
0c668     F2 30 62 FC | 	wrlong	local06, objptr
0c66c     37 00 00 FF 
0c670     44 E4 85 F1 | 	sub	objptr, ##28228
0c674     B4 03 90 FD | 	jmp	#LR__1023
0c678                 | LR__1014
0c678     37 00 00 FF 
0c67c     44 E4 05 F1 | 	add	objptr, ##28228
0c680     F2 16 02 FB | 	rdlong	arg03, objptr
0c684     03 16 66 F0 | 	shl	arg03, #3
0c688     02 00 00 FF 
0c68c     38 E4 85 F1 | 	sub	objptr, ##1080
0c690     F2 16 02 F1 | 	add	arg03, objptr
0c694     0B 13 02 FB | 	rdlong	arg01, arg03
0c698     35 00 00 FF 
0c69c     0C E4 85 F1 | 	sub	objptr, ##27148
0c6a0     09 35 02 F6 | 	mov	local08, arg01
0c6a4     97 06 48 FB | 	callpa	#(@LR__1016-@LR__1015)>>2,fcache_load_ptr_
0c6a8                 | LR__1015
0c6a8     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c6ac     01 34 06 51 |  if_ne	add	local08, #1
0c6b0     F4 FF 9F 5D |  if_ne	jmp	#LR__1015
0c6b4                 | LR__1016
0c6b4     09 35 82 F1 | 	sub	local08, arg01
0c6b8     1A FB 01 F6 | 	mov	result1, local08
0c6bc     52 00 00 FF 
0c6c0     F0 E4 05 F1 | 	add	objptr, ##42224
0c6c4     F2 FA 61 FC | 	wrlong	result1, objptr
0c6c8     58 E4 85 F1 | 	sub	objptr, #88
0c6cc     F2 12 02 FB | 	rdlong	arg01, objptr
0c6d0     FD 12 82 F1 | 	sub	arg01, result1
0c6d4     04 12 86 F1 | 	sub	arg01, #4
0c6d8     03 12 26 F5 | 	andn	arg01, #3
0c6dc     F2 12 62 FC | 	wrlong	arg01, objptr
0c6e0     58 E4 05 F1 | 	add	objptr, #88
0c6e4     F2 14 02 FB | 	rdlong	arg02, objptr
0c6e8     52 00 00 FF 
0c6ec     F0 E4 85 F1 | 	sub	objptr, ##42224
0c6f0     D8 5F B1 FD | 	call	#_pslpoke
0c6f4                 | '     pslpoke memtop,l
0c6f4                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0c6f4     01 38 06 F6 | 	mov	local10, #1
0c6f8     52 00 00 FF 
0c6fc     F0 E4 05 F1 | 	add	objptr, ##42224
0c700     F2 3A 02 FB | 	rdlong	local11, objptr
0c704     52 00 00 FF 
0c708     F0 E4 85 F1 | 	sub	objptr, ##42224
0c70c     01 3A 06 F1 | 	add	local11, #1
0c710                 | LR__1017
0c710     1D 39 52 F2 | 	cmps	local10, local11 wc
0c714     5C 00 90 3D |  if_ae	jmp	#LR__1018
0c718     52 00 00 FF 
0c71c     98 E4 05 F1 | 	add	objptr, ##42136
0c720     F2 32 02 FB | 	rdlong	local07, objptr
0c724     03 32 06 F1 | 	add	local07, #3
0c728     1C 33 02 F1 | 	add	local07, local10
0c72c     1B 00 00 FF 
0c730     54 E4 85 F1 | 	sub	objptr, ##13908
0c734     F2 36 02 FB | 	rdlong	local09, objptr
0c738     03 36 66 F0 | 	shl	local09, #3
0c73c     02 00 00 FF 
0c740     38 E4 85 F1 | 	sub	objptr, ##1080
0c744     F2 36 02 F1 | 	add	local09, objptr
0c748     1B 13 02 FB | 	rdlong	arg01, local09
0c74c     1C 15 02 F6 | 	mov	arg02, local10
0c750     01 16 06 F6 | 	mov	arg03, #1
0c754     35 00 00 FF 
0c758     0C E4 85 F1 | 	sub	objptr, ##27148
0c75c     4C B9 B1 FD | 	call	#__system__Mid_S
0c760     FD 14 C2 FA | 	rdbyte	arg02, result1
0c764     19 13 02 F6 | 	mov	arg01, local07
0c768     F0 5F B1 FD | 	call	#_pspoke
0c76c     01 38 06 F1 | 	add	local10, #1
0c770     9C FF 9F FD | 	jmp	#LR__1017
0c774                 | LR__1018
0c774     52 00 00 FF 
0c778     98 E4 05 F1 | 	add	objptr, ##42136
0c77c     F2 26 02 FB | 	rdlong	local01, objptr
0c780     2B 2A 06 F6 | 	mov	local03, #43
0c784     13 31 02 F6 | 	mov	local06, local01
0c788     14 33 02 F6 | 	mov	local07, local02
0c78c     15 3B 02 F6 | 	mov	local11, local03
0c790     08 00 00 FF 
0c794     1C E4 85 F1 | 	sub	objptr, ##4124
0c798     F2 38 02 FB | 	rdlong	local10, objptr
0c79c     1C 37 02 F6 | 	mov	local09, local10
0c7a0     01 36 66 F0 | 	shl	local09, #1
0c7a4     1C 37 02 F1 | 	add	local09, local10
0c7a8     02 36 66 F0 | 	shl	local09, #2
0c7ac     03 00 00 FF 
0c7b0     00 E4 85 F1 | 	sub	objptr, ##1536
0c7b4     F2 36 02 F1 | 	add	local09, objptr
0c7b8     1B 31 62 FC | 	wrlong	local06, local09
0c7bc     03 00 00 FF 
0c7c0     00 E4 05 F1 | 	add	objptr, ##1536
0c7c4     F2 38 02 FB | 	rdlong	local10, objptr
0c7c8     1C 37 02 F6 | 	mov	local09, local10
0c7cc     01 36 66 F0 | 	shl	local09, #1
0c7d0     1C 37 02 F1 | 	add	local09, local10
0c7d4     02 36 66 F0 | 	shl	local09, #2
0c7d8     03 00 00 FF 
0c7dc     00 E4 85 F1 | 	sub	objptr, ##1536
0c7e0     F2 36 02 F1 | 	add	local09, objptr
0c7e4     04 36 06 F1 | 	add	local09, #4
0c7e8     1B 33 62 FC | 	wrlong	local07, local09
0c7ec     03 00 00 FF 
0c7f0     00 E4 05 F1 | 	add	objptr, ##1536
0c7f4     F2 38 02 FB | 	rdlong	local10, objptr
0c7f8     1C 37 02 F6 | 	mov	local09, local10
0c7fc     01 36 66 F0 | 	shl	local09, #1
0c800     1C 37 02 F1 | 	add	local09, local10
0c804     02 36 66 F0 | 	shl	local09, #2
0c808     03 00 00 FF 
0c80c     00 E4 85 F1 | 	sub	objptr, ##1536
0c810     F2 36 02 F1 | 	add	local09, objptr
0c814     08 36 06 F1 | 	add	local09, #8
0c818     1B 3B 62 FC | 	wrlong	local11, local09
0c81c     03 00 00 FF 
0c820     00 E4 05 F1 | 	add	objptr, ##1536
0c824     F2 30 02 FB | 	rdlong	local06, objptr
0c828     01 30 06 F1 | 	add	local06, #1
0c82c     F2 30 62 FC | 	wrlong	local06, objptr
0c830     13 00 00 FF 
0c834     38 E4 85 F1 | 	sub	objptr, ##9784
0c838     F2 30 02 FB | 	rdlong	local06, objptr
0c83c     01 30 06 F1 | 	add	local06, #1
0c840     F2 30 62 FC | 	wrlong	local06, objptr
0c844     37 00 00 FF 
0c848     44 E4 85 F1 | 	sub	objptr, ##28228
0c84c     DC 01 90 FD | 	jmp	#LR__1023
0c850                 | LR__1019
0c850     2C 2A 06 F6 | 	mov	local03, #44
0c854     37 00 00 FF 
0c858     44 E4 05 F1 | 	add	objptr, ##28228
0c85c     F2 30 02 FB | 	rdlong	local06, objptr
0c860     03 30 66 F0 | 	shl	local06, #3
0c864     02 00 00 FF 
0c868     38 E4 85 F1 | 	sub	objptr, ##1080
0c86c     F2 30 02 F1 | 	add	local06, objptr
0c870     18 13 02 FB | 	rdlong	arg01, local06
0c874     00 14 06 F6 | 	mov	arg02, #0
0c878     35 00 00 FF 
0c87c     0C E4 85 F1 | 	sub	objptr, ##27148
0c880     84 CB B1 FD | 	call	#__system____builtin_atoi
0c884     FD 26 02 F6 | 	mov	local01, result1
0c888     13 31 02 F6 | 	mov	local06, local01
0c88c     14 33 02 F6 | 	mov	local07, local02
0c890     15 3B 02 F6 | 	mov	local11, local03
0c894     4A 00 00 FF 
0c898     7C E4 05 F1 | 	add	objptr, ##38012
0c89c     F2 38 02 FB | 	rdlong	local10, objptr
0c8a0     1C 37 02 F6 | 	mov	local09, local10
0c8a4     01 36 66 F0 | 	shl	local09, #1
0c8a8     1C 37 02 F1 | 	add	local09, local10
0c8ac     02 36 66 F0 | 	shl	local09, #2
0c8b0     03 00 00 FF 
0c8b4     00 E4 85 F1 | 	sub	objptr, ##1536
0c8b8     F2 36 02 F1 | 	add	local09, objptr
0c8bc     1B 31 62 FC | 	wrlong	local06, local09
0c8c0     03 00 00 FF 
0c8c4     00 E4 05 F1 | 	add	objptr, ##1536
0c8c8     F2 38 02 FB | 	rdlong	local10, objptr
0c8cc     1C 37 02 F6 | 	mov	local09, local10
0c8d0     01 36 66 F0 | 	shl	local09, #1
0c8d4     1C 37 02 F1 | 	add	local09, local10
0c8d8     02 36 66 F0 | 	shl	local09, #2
0c8dc     03 00 00 FF 
0c8e0     00 E4 85 F1 | 	sub	objptr, ##1536
0c8e4     F2 36 02 F1 | 	add	local09, objptr
0c8e8     04 36 06 F1 | 	add	local09, #4
0c8ec     1B 33 62 FC | 	wrlong	local07, local09
0c8f0     03 00 00 FF 
0c8f4     00 E4 05 F1 | 	add	objptr, ##1536
0c8f8     F2 38 02 FB | 	rdlong	local10, objptr
0c8fc     1C 37 02 F6 | 	mov	local09, local10
0c900     01 36 66 F0 | 	shl	local09, #1
0c904     1C 37 02 F1 | 	add	local09, local10
0c908     02 36 66 F0 | 	shl	local09, #2
0c90c     03 00 00 FF 
0c910     00 E4 85 F1 | 	sub	objptr, ##1536
0c914     F2 36 02 F1 | 	add	local09, objptr
0c918     08 36 06 F1 | 	add	local09, #8
0c91c     1B 3B 62 FC | 	wrlong	local11, local09
0c920     03 00 00 FF 
0c924     00 E4 05 F1 | 	add	objptr, ##1536
0c928     F2 30 02 FB | 	rdlong	local06, objptr
0c92c     01 30 06 F1 | 	add	local06, #1
0c930     F2 30 62 FC | 	wrlong	local06, objptr
0c934     13 00 00 FF 
0c938     38 E4 85 F1 | 	sub	objptr, ##9784
0c93c     F2 30 02 FB | 	rdlong	local06, objptr
0c940     01 30 06 F1 | 	add	local06, #1
0c944     F2 30 62 FC | 	wrlong	local06, objptr
0c948     37 00 00 FF 
0c94c     44 E4 85 F1 | 	sub	objptr, ##28228
0c950     D8 00 90 FD | 	jmp	#LR__1023
0c954                 | LR__1020
0c954     16 13 02 F6 | 	mov	arg01, local04
0c958     24 04 B0 FD | 	call	#_getvar
0c95c     37 00 00 FF 
0c960     44 E4 05 F1 | 	add	objptr, ##28228
0c964     F2 30 02 FB | 	rdlong	local06, objptr
0c968     01 30 06 F1 | 	add	local06, #1
0c96c     F2 30 62 FC | 	wrlong	local06, objptr
0c970     37 00 00 FF 
0c974     44 E4 85 F1 | 	sub	objptr, ##28228
0c978                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0c978     01 FA 55 F2 | 	cmps	result1, #1 wc
0c97c     B0 00 90 3D |  if_ae	jmp	#LR__1024
0c980     A8 00 90 FD | 	jmp	#LR__1023
0c984                 | LR__1021
0c984     37 00 00 FF 
0c988     44 E4 05 F1 | 	add	objptr, ##28228
0c98c     F2 30 02 FB | 	rdlong	local06, objptr
0c990     01 30 06 F1 | 	add	local06, #1
0c994     F2 30 62 FC | 	wrlong	local06, objptr
0c998     37 00 00 FF 
0c99c     44 E4 85 F1 | 	sub	objptr, ##28228
0c9a0     20 F1 BF FD | 	call	#_expr
0c9a4                 | '     ct+=1
0c9a4                 | '     err=expr() : if err>0 then return err 
0c9a4     01 FA 55 F2 | 	cmps	result1, #1 wc
0c9a8     84 00 90 3D |  if_ae	jmp	#LR__1024
0c9ac                 | '     if lparts(ct).token=token_rpar then ct+=1
0c9ac     37 00 00 FF 
0c9b0     44 E4 05 F1 | 	add	objptr, ##28228
0c9b4     F2 3A 02 FB | 	rdlong	local11, objptr
0c9b8     03 3A 66 F0 | 	shl	local11, #3
0c9bc     02 00 00 FF 
0c9c0     38 E4 85 F1 | 	sub	objptr, ##1080
0c9c4     F2 3A 02 F1 | 	add	local11, objptr
0c9c8     04 3A 06 F1 | 	add	local11, #4
0c9cc     1D 3B 02 FB | 	rdlong	local11, local11
0c9d0     14 3A 0E F2 | 	cmp	local11, #20 wz
0c9d4     35 00 00 FF 
0c9d8     0C E4 85 F1 | 	sub	objptr, ##27148
0c9dc     4C 00 90 5D |  if_ne	jmp	#LR__1023
0c9e0     37 00 00 FF 
0c9e4     44 E4 05 F1 | 	add	objptr, ##28228
0c9e8     F2 30 02 FB | 	rdlong	local06, objptr
0c9ec     01 30 06 F1 | 	add	local06, #1
0c9f0     F2 30 62 FC | 	wrlong	local06, objptr
0c9f4     37 00 00 FF 
0c9f8     44 E4 85 F1 | 	sub	objptr, ##28228
0c9fc     2C 00 90 FD | 	jmp	#LR__1023
0ca00                 | LR__1022
0ca00     16 13 02 F6 | 	mov	arg01, local04
0ca04     34 00 B0 FD | 	call	#_getfun
0ca08     37 00 00 FF 
0ca0c     44 E4 05 F1 | 	add	objptr, ##28228
0ca10     F2 30 02 FB | 	rdlong	local06, objptr
0ca14     01 30 06 F1 | 	add	local06, #1
0ca18     F2 30 62 FC | 	wrlong	local06, objptr
0ca1c     37 00 00 FF 
0ca20     44 E4 85 F1 | 	sub	objptr, ##28228
0ca24                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0ca24     01 FA 55 F2 | 	cmps	result1, #1 wc
0ca28     04 00 90 3D |  if_ae	jmp	#LR__1024
0ca2c                 | LR__1023
0ca2c                 | ' return 0  
0ca2c     00 FA 05 F6 | 	mov	result1, #0
0ca30                 | LR__1024
0ca30     A7 F0 03 F6 | 	mov	ptra, fp
0ca34     B2 00 A0 FD | 	call	#popregs_
0ca38                 | _getvalue_ret
0ca38     2D 00 64 FD | 	ret
0ca3c                 | 
0ca3c                 | ' 
0ca3c                 | ' ' Get a function result 
0ca3c                 | ' 
0ca3c                 | ' function getfun(m as integer) as ulong
0ca3c                 | _getfun
0ca3c     0F 4A 05 F6 | 	mov	COUNT_, #15
0ca40     A8 00 A0 FD | 	call	#pushregs_
0ca44                 | _getfun_enter
0ca44     09 2D 02 F6 | 	mov	local04, arg01
0ca48     37 00 00 FF 
0ca4c     44 E4 05 F1 | 	add	objptr, ##28228
0ca50     F2 2E 02 FB | 	rdlong	local05, objptr
0ca54     17 31 02 F6 | 	mov	local06, local05
0ca58     00 32 06 F6 | 	mov	local07, #0
0ca5c                 | ' oldct=ct
0ca5c                 | ' numpar=0
0ca5c                 | ' if lparts(ct+1).token=token_lpar then
0ca5c     01 2E 06 F1 | 	add	local05, #1
0ca60     03 2E 66 F0 | 	shl	local05, #3
0ca64     02 00 00 FF 
0ca68     38 E4 85 F1 | 	sub	objptr, ##1080
0ca6c     F2 2E 02 F1 | 	add	local05, objptr
0ca70     04 2E 06 F1 | 	add	local05, #4
0ca74     17 2F 02 FB | 	rdlong	local05, local05
0ca78     15 2E 0E F2 | 	cmp	local05, #21 wz
0ca7c     35 00 00 FF 
0ca80     0C E4 85 F1 | 	sub	objptr, ##27148
0ca84     54 01 90 5D |  if_ne	jmp	#LR__1034
0ca88     37 00 00 FF 
0ca8c     44 E4 05 F1 | 	add	objptr, ##28228
0ca90     F2 34 02 FB | 	rdlong	local08, objptr
0ca94     01 34 06 F1 | 	add	local08, #1
0ca98     F2 34 62 FC | 	wrlong	local08, objptr
0ca9c     37 00 00 FF 
0caa0     44 E4 85 F1 | 	sub	objptr, ##28228
0caa4                 | '   ct+=1 											' omit this lpar, this is for expr list
0caa4                 | '   do
0caa4                 | LR__1030
0caa4     37 00 00 FF 
0caa8     44 E4 05 F1 | 	add	objptr, ##28228
0caac     F2 2E 02 FB | 	rdlong	local05, objptr
0cab0     01 2E 06 F1 | 	add	local05, #1
0cab4     F2 2E 62 FC | 	wrlong	local05, objptr
0cab8                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0cab8                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0cab8     03 2E 66 F0 | 	shl	local05, #3
0cabc     02 00 00 FF 
0cac0     38 E4 85 F1 | 	sub	objptr, ##1080
0cac4     F2 2E 02 F1 | 	add	local05, objptr
0cac8     04 2E 06 F1 | 	add	local05, #4
0cacc     17 35 02 FB | 	rdlong	local08, local05
0cad0     15 34 0E F2 | 	cmp	local08, #21 wz
0cad4     35 00 00 FF 
0cad8     0C E4 85 F1 | 	sub	objptr, ##27148
0cadc     44 00 90 5D |  if_ne	jmp	#LR__1031
0cae0     37 00 00 FF 
0cae4     44 E4 05 F1 | 	add	objptr, ##28228
0cae8     F2 34 02 FB | 	rdlong	local08, objptr
0caec     01 34 06 F1 | 	add	local08, #1
0caf0     F2 34 62 FC | 	wrlong	local08, objptr
0caf4     37 00 00 FF 
0caf8     44 E4 85 F1 | 	sub	objptr, ##28228
0cafc     C4 EF BF FD | 	call	#_expr
0cb00     FD 36 02 F6 | 	mov	local09, result1
0cb04     37 00 00 FF 
0cb08     44 E4 05 F1 | 	add	objptr, ##28228
0cb0c     F2 34 02 FB | 	rdlong	local08, objptr
0cb10     01 34 06 F1 | 	add	local08, #1
0cb14     F2 34 62 FC | 	wrlong	local08, objptr
0cb18     37 00 00 FF 
0cb1c     44 E4 85 F1 | 	sub	objptr, ##28228
0cb20     08 00 90 FD | 	jmp	#LR__1032
0cb24                 | LR__1031
0cb24     9C EF BF FD | 	call	#_expr
0cb28     FD 36 02 F6 | 	mov	local09, result1
0cb2c                 | LR__1032
0cb2c                 | '     if err>0 then return err
0cb2c     01 36 16 F2 | 	cmp	local09, #1 wc
0cb30     1B FB 01 36 |  if_ae	mov	result1, local09
0cb34     3C 02 90 3D |  if_ae	jmp	#LR__1036
0cb38     01 32 06 F1 | 	add	local07, #1
0cb3c     37 00 00 FF 
0cb40     44 E4 05 F1 | 	add	objptr, ##28228
0cb44     F2 2E 02 FB | 	rdlong	local05, objptr
0cb48     03 2E 66 F0 | 	shl	local05, #3
0cb4c     02 00 00 FF 
0cb50     38 E4 85 F1 | 	sub	objptr, ##1080
0cb54     F2 2E 02 F1 | 	add	local05, objptr
0cb58     04 2E 06 F1 | 	add	local05, #4
0cb5c     17 37 02 FB | 	rdlong	local09, local05
0cb60     14 36 0E F2 | 	cmp	local09, #20 wz
0cb64     35 00 00 FF 
0cb68     0C E4 85 F1 | 	sub	objptr, ##27148
0cb6c     34 00 90 AD |  if_e	jmp	#LR__1033
0cb70     37 00 00 FF 
0cb74     44 E4 05 F1 | 	add	objptr, ##28228
0cb78     F2 36 02 FB | 	rdlong	local09, objptr
0cb7c     03 36 66 F0 | 	shl	local09, #3
0cb80     02 00 00 FF 
0cb84     38 E4 85 F1 | 	sub	objptr, ##1080
0cb88     F2 36 02 F1 | 	add	local09, objptr
0cb8c     04 36 06 F1 | 	add	local09, #4
0cb90     1B 37 02 FB | 	rdlong	local09, local09
0cb94     FE 37 0E F2 | 	cmp	local09, #510 wz
0cb98     35 00 00 FF 
0cb9c     0C E4 85 F1 | 	sub	objptr, ##27148
0cba0     00 FF 9F 5D |  if_ne	jmp	#LR__1030
0cba4                 | LR__1033
0cba4                 | '   if lparts(ct).token=token_end then return 14
0cba4     37 00 00 FF 
0cba8     44 E4 05 F1 | 	add	objptr, ##28228
0cbac     F2 2E 02 FB | 	rdlong	local05, objptr
0cbb0     03 2E 66 F0 | 	shl	local05, #3
0cbb4     02 00 00 FF 
0cbb8     38 E4 85 F1 | 	sub	objptr, ##1080
0cbbc     F2 2E 02 F1 | 	add	local05, objptr
0cbc0     04 2E 06 F1 | 	add	local05, #4
0cbc4     17 37 02 FB | 	rdlong	local09, local05
0cbc8     FE 37 0E F2 | 	cmp	local09, #510 wz
0cbcc     35 00 00 FF 
0cbd0     0C E4 85 F1 | 	sub	objptr, ##27148
0cbd4     0E FA 05 A6 |  if_e	mov	result1, #14
0cbd8     98 01 90 AD |  if_e	jmp	#LR__1036
0cbdc                 | LR__1034
0cbdc     19 27 02 F6 | 	mov	local01, local07
0cbe0     03 30 66 F0 | 	shl	local06, #3
0cbe4     35 00 00 FF 
0cbe8     0C E4 05 F1 | 	add	objptr, ##27148
0cbec     F2 30 02 F1 | 	add	local06, objptr
0cbf0     04 30 06 F1 | 	add	local06, #4
0cbf4     18 2B 02 FB | 	rdlong	local03, local06
0cbf8     13 35 02 F6 | 	mov	local08, local01
0cbfc     14 39 02 F6 | 	mov	local10, local02
0cc00     15 3B 02 F6 | 	mov	local11, local03
0cc04     15 00 00 FF 
0cc08     70 E4 05 F1 | 	add	objptr, ##10864
0cc0c     F2 3C 02 FB | 	rdlong	local12, objptr
0cc10     1E 3F 02 F6 | 	mov	local13, local12
0cc14     01 3E 66 F0 | 	shl	local13, #1
0cc18     1E 3F 02 F1 | 	add	local13, local12
0cc1c     02 3E 66 F0 | 	shl	local13, #2
0cc20     03 00 00 FF 
0cc24     00 E4 85 F1 | 	sub	objptr, ##1536
0cc28     F2 3E 02 F1 | 	add	local13, objptr
0cc2c     1F 35 62 FC | 	wrlong	local08, local13
0cc30     03 00 00 FF 
0cc34     00 E4 05 F1 | 	add	objptr, ##1536
0cc38     F2 34 02 FB | 	rdlong	local08, objptr
0cc3c     1A 41 02 F6 | 	mov	local14, local08
0cc40     01 40 66 F0 | 	shl	local14, #1
0cc44     1A 41 02 F1 | 	add	local14, local08
0cc48     02 40 66 F0 | 	shl	local14, #2
0cc4c     03 00 00 FF 
0cc50     00 E4 85 F1 | 	sub	objptr, ##1536
0cc54     F2 40 02 F1 | 	add	local14, objptr
0cc58     04 40 06 F1 | 	add	local14, #4
0cc5c     20 39 62 FC | 	wrlong	local10, local14
0cc60     03 00 00 FF 
0cc64     00 E4 05 F1 | 	add	objptr, ##1536
0cc68     F2 34 02 FB | 	rdlong	local08, objptr
0cc6c     1A 43 02 F6 | 	mov	local15, local08
0cc70     01 42 66 F0 | 	shl	local15, #1
0cc74     1A 43 02 F1 | 	add	local15, local08
0cc78     02 42 66 F0 | 	shl	local15, #2
0cc7c     03 00 00 FF 
0cc80     00 E4 85 F1 | 	sub	objptr, ##1536
0cc84     F2 42 02 F1 | 	add	local15, objptr
0cc88     08 42 06 F1 | 	add	local15, #8
0cc8c     21 3B 62 FC | 	wrlong	local11, local15
0cc90     03 00 00 FF 
0cc94     00 E4 05 F1 | 	add	objptr, ##1536
0cc98     F2 34 02 FB | 	rdlong	local08, objptr
0cc9c     01 34 06 F1 | 	add	local08, #1
0cca0     F2 34 62 FC | 	wrlong	local08, objptr
0cca4     4A 00 00 FF 
0cca8     7C E4 85 F1 | 	sub	objptr, ##38012
0ccac                 | ' t2.result.uresult=numpar
0ccac                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0ccac                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0ccac                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0ccac     FF FF 7F FF 
0ccb0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0ccb4     B8 00 90 5D |  if_ne	jmp	#LR__1035
0ccb8     15 2A 06 F6 | 	mov	local03, #21
0ccbc     13 35 02 F6 | 	mov	local08, local01
0ccc0     14 39 02 F6 | 	mov	local10, local02
0ccc4     15 3B 02 F6 | 	mov	local11, local03
0ccc8     4A 00 00 FF 
0cccc     7C E4 05 F1 | 	add	objptr, ##38012
0ccd0     F2 3C 02 FB | 	rdlong	local12, objptr
0ccd4     1E 3F 02 F6 | 	mov	local13, local12
0ccd8     01 3E 66 F0 | 	shl	local13, #1
0ccdc     1E 3F 02 F1 | 	add	local13, local12
0cce0     02 3E 66 F0 | 	shl	local13, #2
0cce4     03 00 00 FF 
0cce8     00 E4 85 F1 | 	sub	objptr, ##1536
0ccec     F2 3E 02 F1 | 	add	local13, objptr
0ccf0     1F 35 62 FC | 	wrlong	local08, local13
0ccf4     03 00 00 FF 
0ccf8     00 E4 05 F1 | 	add	objptr, ##1536
0ccfc     F2 42 02 FB | 	rdlong	local15, objptr
0cd00     21 41 02 F6 | 	mov	local14, local15
0cd04     01 40 66 F0 | 	shl	local14, #1
0cd08     21 41 02 F1 | 	add	local14, local15
0cd0c     02 40 66 F0 | 	shl	local14, #2
0cd10     03 00 00 FF 
0cd14     00 E4 85 F1 | 	sub	objptr, ##1536
0cd18     F2 40 02 F1 | 	add	local14, objptr
0cd1c     04 40 06 F1 | 	add	local14, #4
0cd20     20 39 62 FC | 	wrlong	local10, local14
0cd24     03 00 00 FF 
0cd28     00 E4 05 F1 | 	add	objptr, ##1536
0cd2c     F2 40 02 FB | 	rdlong	local14, objptr
0cd30     20 43 02 F6 | 	mov	local15, local14
0cd34     01 42 66 F0 | 	shl	local15, #1
0cd38     20 43 02 F1 | 	add	local15, local14
0cd3c     02 42 66 F0 | 	shl	local15, #2
0cd40     03 00 00 FF 
0cd44     00 E4 85 F1 | 	sub	objptr, ##1536
0cd48     F2 42 02 F1 | 	add	local15, objptr
0cd4c     08 42 06 F1 | 	add	local15, #8
0cd50     21 3B 62 FC | 	wrlong	local11, local15
0cd54     03 00 00 FF 
0cd58     00 E4 05 F1 | 	add	objptr, ##1536
0cd5c     F2 34 02 FB | 	rdlong	local08, objptr
0cd60     01 34 06 F1 | 	add	local08, #1
0cd64     F2 34 62 FC | 	wrlong	local08, objptr
0cd68     4A 00 00 FF 
0cd6c     7C E4 85 F1 | 	sub	objptr, ##38012
0cd70                 | LR__1035
0cd70                 | ' return 0
0cd70     00 FA 05 F6 | 	mov	result1, #0
0cd74                 | LR__1036
0cd74     A7 F0 03 F6 | 	mov	ptra, fp
0cd78     B2 00 A0 FD | 	call	#popregs_
0cd7c                 | _getfun_ret
0cd7c     2D 00 64 FD | 	ret
0cd80                 | 
0cd80                 | '   
0cd80                 | '   
0cd80                 | ' function getvar(m as integer) as ulong
0cd80                 | _getvar
0cd80     11 4A 05 F6 | 	mov	COUNT_, #17
0cd84     A8 00 A0 FD | 	call	#pushregs_
0cd88                 | _getvar_enter
0cd88     09 2D 02 F6 | 	mov	local04, arg01
0cd8c     37 00 00 FF 
0cd90     44 E4 05 F1 | 	add	objptr, ##28228
0cd94     F2 2E 02 FB | 	rdlong	local05, objptr
0cd98     03 2E 66 F0 | 	shl	local05, #3
0cd9c     02 00 00 FF 
0cda0     38 E4 85 F1 | 	sub	objptr, ##1080
0cda4     F2 2E 02 F1 | 	add	local05, objptr
0cda8     17 31 02 FB | 	rdlong	local06, local05
0cdac     01 32 66 F6 | 	neg	local07, #1
0cdb0                 | ' 
0cdb0                 | ' varname$=lparts(ct).part$
0cdb0                 | ' j=-1
0cdb0                 | ' 
0cdb0                 | ' for i=0 to varnum-1
0cdb0     00 34 06 F6 | 	mov	local08, #0
0cdb4     04 E4 85 F1 | 	sub	objptr, #4
0cdb8     F2 36 02 FB | 	rdlong	local09, objptr
0cdbc     35 00 00 FF 
0cdc0     08 E4 85 F1 | 	sub	objptr, ##27144
0cdc4                 | LR__1040
0cdc4     1B 35 52 F2 | 	cmps	local08, local09 wc
0cdc8     38 00 90 3D |  if_ae	jmp	#LR__1041
0cdcc                 | '   if variables(i).name=varname$ then j=i : exit
0cdcc     1A 2F 02 F6 | 	mov	local05, local08
0cdd0     04 2E 66 F0 | 	shl	local05, #4
0cdd4     14 00 00 FF 
0cdd8     F8 E5 05 F1 | 	add	objptr, ##10744
0cddc     F2 2E 02 F1 | 	add	local05, objptr
0cde0     17 13 02 FB | 	rdlong	arg01, local05
0cde4     18 15 02 F6 | 	mov	arg02, local06
0cde8     14 00 00 FF 
0cdec     F8 E5 85 F1 | 	sub	objptr, ##10744
0cdf0     4C 91 B1 FD | 	call	#__system___string_cmp
0cdf4     00 FA 0D F2 | 	cmp	result1, #0 wz
0cdf8     1A 33 02 A6 |  if_e	mov	local07, local08
0cdfc     01 34 06 51 |  if_ne	add	local08, #1
0ce00     C0 FF 9F 5D |  if_ne	jmp	#LR__1040
0ce04                 | LR__1041
0ce04                 | ' if  j=-1 andalso varnum<maxvars then   
0ce04     FF FF 7F FF 
0ce08     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0ce0c     A8 00 90 5D |  if_ne	jmp	#LR__1042
0ce10     35 00 00 FF 
0ce14     08 E4 05 F1 | 	add	objptr, ##27144
0ce18     F2 36 02 FB | 	rdlong	local09, objptr
0ce1c     35 00 00 FF 
0ce20     08 E4 85 F1 | 	sub	objptr, ##27144
0ce24     02 00 00 FF 
0ce28     00 36 56 F2 | 	cmps	local09, ##1024 wc
0ce2c     88 00 90 3D |  if_ae	jmp	#LR__1042
0ce30     35 00 00 FF 
0ce34     08 E4 05 F1 | 	add	objptr, ##27144
0ce38     F2 2E 02 FB | 	rdlong	local05, objptr
0ce3c     04 2E 66 F0 | 	shl	local05, #4
0ce40     20 00 00 FF 
0ce44     10 E4 85 F1 | 	sub	objptr, ##16400
0ce48     F2 2E 02 F1 | 	add	local05, objptr
0ce4c     17 31 62 FC | 	wrlong	local06, local05
0ce50     20 00 00 FF 
0ce54     10 E4 05 F1 | 	add	objptr, ##16400
0ce58     F2 2E 02 FB | 	rdlong	local05, objptr
0ce5c     04 2E 66 F0 | 	shl	local05, #4
0ce60     20 00 00 FF 
0ce64     10 E4 85 F1 | 	sub	objptr, ##16400
0ce68     F2 2E 02 F1 | 	add	local05, objptr
0ce6c     04 2E 06 F1 | 	add	local05, #4
0ce70     17 01 68 FC | 	wrlong	#0, local05
0ce74     20 00 00 FF 
0ce78     10 E4 05 F1 | 	add	objptr, ##16400
0ce7c     F2 2E 02 FB | 	rdlong	local05, objptr
0ce80     04 2E 66 F0 | 	shl	local05, #4
0ce84     20 00 00 FF 
0ce88     10 E4 85 F1 | 	sub	objptr, ##16400
0ce8c     F2 2E 02 F1 | 	add	local05, objptr
0ce90     0C 2E 06 F1 | 	add	local05, #12
0ce94     17 39 68 FC | 	wrlong	#28, local05
0ce98     20 00 00 FF 
0ce9c     10 E4 05 F1 | 	add	objptr, ##16400
0cea0     F2 36 02 FB | 	rdlong	local09, objptr
0cea4     1B 33 02 F6 | 	mov	local07, local09
0cea8     01 36 06 F1 | 	add	local09, #1
0ceac     F2 36 62 FC | 	wrlong	local09, objptr
0ceb0     35 00 00 FF 
0ceb4     08 E4 85 F1 | 	sub	objptr, ##27144
0ceb8                 | LR__1042
0ceb8     00 36 06 F6 | 	mov	local09, #0
0cebc                 | ' numpar=0
0cebc                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0cebc     37 00 00 FF 
0cec0     44 E4 05 F1 | 	add	objptr, ##28228
0cec4     F2 2E 02 FB | 	rdlong	local05, objptr
0cec8     01 2E 06 F1 | 	add	local05, #1
0cecc     03 2E 66 F0 | 	shl	local05, #3
0ced0     02 00 00 FF 
0ced4     38 E4 85 F1 | 	sub	objptr, ##1080
0ced8     F2 2E 02 F1 | 	add	local05, objptr
0cedc     04 2E 06 F1 | 	add	local05, #4
0cee0     17 35 02 FB | 	rdlong	local08, local05
0cee4     15 34 0E F2 | 	cmp	local08, #21 wz
0cee8     35 00 00 FF 
0ceec     0C E4 85 F1 | 	sub	objptr, ##27148
0cef0     54 01 90 5D |  if_ne	jmp	#LR__1047
0cef4     37 00 00 FF 
0cef8     44 E4 05 F1 | 	add	objptr, ##28228
0cefc     F2 38 02 FB | 	rdlong	local10, objptr
0cf00     01 38 06 F1 | 	add	local10, #1
0cf04     F2 38 62 FC | 	wrlong	local10, objptr
0cf08     37 00 00 FF 
0cf0c     44 E4 85 F1 | 	sub	objptr, ##28228
0cf10                 | '   ct+=1 											' omit this lpar, this is for expr list
0cf10                 | '   do
0cf10                 | LR__1043
0cf10     37 00 00 FF 
0cf14     44 E4 05 F1 | 	add	objptr, ##28228
0cf18     F2 2E 02 FB | 	rdlong	local05, objptr
0cf1c     01 2E 06 F1 | 	add	local05, #1
0cf20     F2 2E 62 FC | 	wrlong	local05, objptr
0cf24                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0cf24                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0cf24     03 2E 66 F0 | 	shl	local05, #3
0cf28     02 00 00 FF 
0cf2c     38 E4 85 F1 | 	sub	objptr, ##1080
0cf30     F2 2E 02 F1 | 	add	local05, objptr
0cf34     04 2E 06 F1 | 	add	local05, #4
0cf38     17 39 02 FB | 	rdlong	local10, local05
0cf3c     15 38 0E F2 | 	cmp	local10, #21 wz
0cf40     35 00 00 FF 
0cf44     0C E4 85 F1 | 	sub	objptr, ##27148
0cf48     44 00 90 5D |  if_ne	jmp	#LR__1044
0cf4c     37 00 00 FF 
0cf50     44 E4 05 F1 | 	add	objptr, ##28228
0cf54     F2 38 02 FB | 	rdlong	local10, objptr
0cf58     01 38 06 F1 | 	add	local10, #1
0cf5c     F2 38 62 FC | 	wrlong	local10, objptr
0cf60     37 00 00 FF 
0cf64     44 E4 85 F1 | 	sub	objptr, ##28228
0cf68     58 EB BF FD | 	call	#_expr
0cf6c     FD 3A 02 F6 | 	mov	local11, result1
0cf70     37 00 00 FF 
0cf74     44 E4 05 F1 | 	add	objptr, ##28228
0cf78     F2 38 02 FB | 	rdlong	local10, objptr
0cf7c     01 38 06 F1 | 	add	local10, #1
0cf80     F2 38 62 FC | 	wrlong	local10, objptr
0cf84     37 00 00 FF 
0cf88     44 E4 85 F1 | 	sub	objptr, ##28228
0cf8c     08 00 90 FD | 	jmp	#LR__1045
0cf90                 | LR__1044
0cf90     30 EB BF FD | 	call	#_expr
0cf94     FD 3A 02 F6 | 	mov	local11, result1
0cf98                 | LR__1045
0cf98                 | '     if err>0 then return err
0cf98     01 3A 56 F2 | 	cmps	local11, #1 wc
0cf9c     1D FB 01 36 |  if_ae	mov	result1, local11
0cfa0     2C 02 90 3D |  if_ae	jmp	#LR__1049
0cfa4     01 36 06 F1 | 	add	local09, #1
0cfa8     37 00 00 FF 
0cfac     44 E4 05 F1 | 	add	objptr, ##28228
0cfb0     F2 2E 02 FB | 	rdlong	local05, objptr
0cfb4     03 2E 66 F0 | 	shl	local05, #3
0cfb8     02 00 00 FF 
0cfbc     38 E4 85 F1 | 	sub	objptr, ##1080
0cfc0     F2 2E 02 F1 | 	add	local05, objptr
0cfc4     04 2E 06 F1 | 	add	local05, #4
0cfc8     17 3B 02 FB | 	rdlong	local11, local05
0cfcc     14 3A 0E F2 | 	cmp	local11, #20 wz
0cfd0     35 00 00 FF 
0cfd4     0C E4 85 F1 | 	sub	objptr, ##27148
0cfd8     34 00 90 AD |  if_e	jmp	#LR__1046
0cfdc     37 00 00 FF 
0cfe0     44 E4 05 F1 | 	add	objptr, ##28228
0cfe4     F2 3A 02 FB | 	rdlong	local11, objptr
0cfe8     03 3A 66 F0 | 	shl	local11, #3
0cfec     02 00 00 FF 
0cff0     38 E4 85 F1 | 	sub	objptr, ##1080
0cff4     F2 3A 02 F1 | 	add	local11, objptr
0cff8     04 3A 06 F1 | 	add	local11, #4
0cffc     1D 3B 02 FB | 	rdlong	local11, local11
0d000     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d004     35 00 00 FF 
0d008     0C E4 85 F1 | 	sub	objptr, ##27148
0d00c     00 FF 9F 5D |  if_ne	jmp	#LR__1043
0d010                 | LR__1046
0d010                 | '     if lparts(ct).token=token_end then return 14
0d010     37 00 00 FF 
0d014     44 E4 05 F1 | 	add	objptr, ##28228
0d018     F2 2E 02 FB | 	rdlong	local05, objptr
0d01c     03 2E 66 F0 | 	shl	local05, #3
0d020     02 00 00 FF 
0d024     38 E4 85 F1 | 	sub	objptr, ##1080
0d028     F2 2E 02 F1 | 	add	local05, objptr
0d02c     04 2E 06 F1 | 	add	local05, #4
0d030     17 3B 02 FB | 	rdlong	local11, local05
0d034     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d038     35 00 00 FF 
0d03c     0C E4 85 F1 | 	sub	objptr, ##27148
0d040     0E FA 05 A6 |  if_e	mov	result1, #14
0d044     88 01 90 AD |  if_e	jmp	#LR__1049
0d048                 | LR__1047
0d048     1B 29 02 F6 | 	mov	local02, local09
0d04c     11 2A 06 F6 | 	mov	local03, #17
0d050     19 27 02 F6 | 	mov	local01, local07
0d054     13 39 02 F6 | 	mov	local10, local01
0d058     14 3D 02 F6 | 	mov	local12, local02
0d05c     15 3F 02 F6 | 	mov	local13, local03
0d060     4A 00 00 FF 
0d064     7C E4 05 F1 | 	add	objptr, ##38012
0d068     F2 40 02 FB | 	rdlong	local14, objptr
0d06c     20 43 02 F6 | 	mov	local15, local14
0d070     01 42 66 F0 | 	shl	local15, #1
0d074     20 43 02 F1 | 	add	local15, local14
0d078     02 42 66 F0 | 	shl	local15, #2
0d07c     03 00 00 FF 
0d080     00 E4 85 F1 | 	sub	objptr, ##1536
0d084     F2 42 02 F1 | 	add	local15, objptr
0d088     21 39 62 FC | 	wrlong	local10, local15
0d08c     03 00 00 FF 
0d090     00 E4 05 F1 | 	add	objptr, ##1536
0d094     F2 38 02 FB | 	rdlong	local10, objptr
0d098     1C 45 02 F6 | 	mov	local16, local10
0d09c     01 44 66 F0 | 	shl	local16, #1
0d0a0     1C 45 02 F1 | 	add	local16, local10
0d0a4     02 44 66 F0 | 	shl	local16, #2
0d0a8     03 00 00 FF 
0d0ac     00 E4 85 F1 | 	sub	objptr, ##1536
0d0b0     F2 44 02 F1 | 	add	local16, objptr
0d0b4     04 44 06 F1 | 	add	local16, #4
0d0b8     22 3D 62 FC | 	wrlong	local12, local16
0d0bc     03 00 00 FF 
0d0c0     00 E4 05 F1 | 	add	objptr, ##1536
0d0c4     F2 38 02 FB | 	rdlong	local10, objptr
0d0c8     1C 47 02 F6 | 	mov	local17, local10
0d0cc     01 46 66 F0 | 	shl	local17, #1
0d0d0     1C 47 02 F1 | 	add	local17, local10
0d0d4     02 46 66 F0 | 	shl	local17, #2
0d0d8     03 00 00 FF 
0d0dc     00 E4 85 F1 | 	sub	objptr, ##1536
0d0e0     F2 46 02 F1 | 	add	local17, objptr
0d0e4     08 46 06 F1 | 	add	local17, #8
0d0e8     23 3F 62 FC | 	wrlong	local13, local17
0d0ec     03 00 00 FF 
0d0f0     00 E4 05 F1 | 	add	objptr, ##1536
0d0f4     F2 38 02 FB | 	rdlong	local10, objptr
0d0f8     01 38 06 F1 | 	add	local10, #1
0d0fc     F2 38 62 FC | 	wrlong	local10, objptr
0d100     4A 00 00 FF 
0d104     7C E4 85 F1 | 	sub	objptr, ##38012
0d108                 | ' t2.result.twowords(1)=numpar
0d108                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d108                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d108                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d108     FF FF 7F FF 
0d10c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d110     B8 00 90 5D |  if_ne	jmp	#LR__1048
0d114     15 2A 06 F6 | 	mov	local03, #21
0d118     13 39 02 F6 | 	mov	local10, local01
0d11c     14 3D 02 F6 | 	mov	local12, local02
0d120     15 3F 02 F6 | 	mov	local13, local03
0d124     4A 00 00 FF 
0d128     7C E4 05 F1 | 	add	objptr, ##38012
0d12c     F2 40 02 FB | 	rdlong	local14, objptr
0d130     20 43 02 F6 | 	mov	local15, local14
0d134     01 42 66 F0 | 	shl	local15, #1
0d138     20 43 02 F1 | 	add	local15, local14
0d13c     02 42 66 F0 | 	shl	local15, #2
0d140     03 00 00 FF 
0d144     00 E4 85 F1 | 	sub	objptr, ##1536
0d148     F2 42 02 F1 | 	add	local15, objptr
0d14c     21 39 62 FC | 	wrlong	local10, local15
0d150     03 00 00 FF 
0d154     00 E4 05 F1 | 	add	objptr, ##1536
0d158     F2 46 02 FB | 	rdlong	local17, objptr
0d15c     23 45 02 F6 | 	mov	local16, local17
0d160     01 44 66 F0 | 	shl	local16, #1
0d164     23 45 02 F1 | 	add	local16, local17
0d168     02 44 66 F0 | 	shl	local16, #2
0d16c     03 00 00 FF 
0d170     00 E4 85 F1 | 	sub	objptr, ##1536
0d174     F2 44 02 F1 | 	add	local16, objptr
0d178     04 44 06 F1 | 	add	local16, #4
0d17c     22 3D 62 FC | 	wrlong	local12, local16
0d180     03 00 00 FF 
0d184     00 E4 05 F1 | 	add	objptr, ##1536
0d188     F2 44 02 FB | 	rdlong	local16, objptr
0d18c     22 47 02 F6 | 	mov	local17, local16
0d190     01 46 66 F0 | 	shl	local17, #1
0d194     22 47 02 F1 | 	add	local17, local16
0d198     02 46 66 F0 | 	shl	local17, #2
0d19c     03 00 00 FF 
0d1a0     00 E4 85 F1 | 	sub	objptr, ##1536
0d1a4     F2 46 02 F1 | 	add	local17, objptr
0d1a8     08 46 06 F1 | 	add	local17, #8
0d1ac     23 3F 62 FC | 	wrlong	local13, local17
0d1b0     03 00 00 FF 
0d1b4     00 E4 05 F1 | 	add	objptr, ##1536
0d1b8     F2 38 02 FB | 	rdlong	local10, objptr
0d1bc     01 38 06 F1 | 	add	local10, #1
0d1c0     F2 38 62 FC | 	wrlong	local10, objptr
0d1c4     4A 00 00 FF 
0d1c8     7C E4 85 F1 | 	sub	objptr, ##38012
0d1cc                 | LR__1048
0d1cc                 | ' return 0
0d1cc     00 FA 05 F6 | 	mov	result1, #0
0d1d0                 | LR__1049
0d1d0     A7 F0 03 F6 | 	mov	ptra, fp
0d1d4     B2 00 A0 FD | 	call	#popregs_
0d1d8                 | _getvar_ret
0d1d8     2D 00 64 FD | 	ret
0d1dc                 | 
0d1dc                 | ' 
0d1dc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d1dc                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d1dc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d1dc                 | ' 
0d1dc                 | ' 
0d1dc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d1dc                 | ' '                                                                                                                                       -
0d1dc                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d1dc                 | ' '                                                                                                                                       -
0d1dc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d1dc                 | ' 
0d1dc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d1dc                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d1dc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d1dc                 | ' 
0d1dc                 | ' function execute_line (astart=0 as integer) as integer
0d1dc                 | _execute_line
0d1dc     04 4A 05 F6 | 	mov	COUNT_, #4
0d1e0     A8 00 A0 FD | 	call	#pushregs_
0d1e4     50 00 00 FF 
0d1e8     BC E4 05 F1 | 	add	objptr, ##41148
0d1ec     F2 00 68 FC | 	wrlong	#0, objptr
0d1f0                 | ' 
0d1f0                 | ' runptr2=0
0d1f0                 | ' for lineptr_e=astart to lineptr-1
0d1f0     06 00 00 FF 
0d1f4     3C E4 85 F1 | 	sub	objptr, ##3132
0d1f8     F2 12 62 FC | 	wrlong	arg01, objptr
0d1fc     04 E4 85 F1 | 	sub	objptr, #4
0d200     F2 26 02 FB | 	rdlong	local01, objptr
0d204     4A 00 00 FF 
0d208     7C E4 85 F1 | 	sub	objptr, ##38012
0d20c                 | LR__1050
0d20c     4A 00 00 FF 
0d210     80 E4 05 F1 | 	add	objptr, ##38016
0d214     F2 FA 01 FB | 	rdlong	result1, objptr
0d218     4A 00 00 FF 
0d21c     80 E4 85 F1 | 	sub	objptr, ##38016
0d220     13 FB 51 F2 | 	cmps	result1, local01 wc
0d224     98 00 90 3D |  if_ae	jmp	#LR__1051
0d228     4A 00 00 FF 
0d22c     80 E4 05 F1 | 	add	objptr, ##38016
0d230     F2 FA 01 FB | 	rdlong	result1, objptr
0d234     FD 28 02 F6 | 	mov	local02, result1
0d238     01 28 66 F0 | 	shl	local02, #1
0d23c     FD 28 02 F1 | 	add	local02, result1
0d240     02 28 66 F0 | 	shl	local02, #2
0d244     03 00 00 FF 
0d248     04 E4 85 F1 | 	sub	objptr, ##1540
0d24c     F2 28 02 F1 | 	add	local02, objptr
0d250     08 28 06 F1 | 	add	local02, #8
0d254     14 29 02 FB | 	rdlong	local02, local02
0d258     14 29 E2 F8 | 	getbyte	local02, local02, #0
0d25c     02 28 66 F0 | 	shl	local02, #2
0d260     04 00 00 FF 
0d264     1C E4 85 F1 | 	sub	objptr, ##2076
0d268     F2 28 02 F1 | 	add	local02, objptr
0d26c     14 29 02 FB | 	rdlong	local02, local02
0d270     14 2B 02 F6 | 	mov	local03, local02
0d274     13 28 46 F7 | 	zerox	local02, #19
0d278     14 2A 46 F0 | 	shr	local03, #20
0d27c     02 2A 66 F0 | 	shl	local03, #2
0d280     ED 2A 02 F1 | 	add	local03, __methods__
0d284     15 2B 02 FB | 	rdlong	local03, local03
0d288     43 00 00 FF 
0d28c     60 E4 85 F1 | 	sub	objptr, ##34400
0d290     F2 2C 02 F6 | 	mov	local04, objptr
0d294     14 E5 01 F6 | 	mov	objptr, local02
0d298     2D 2A 62 FD | 	call	local03
0d29c     16 E5 01 F6 | 	mov	objptr, local04
0d2a0     4A 00 00 FF 
0d2a4     80 E4 05 F1 | 	add	objptr, ##38016
0d2a8     F2 2C 02 FB | 	rdlong	local04, objptr
0d2ac     01 2C 06 F1 | 	add	local04, #1
0d2b0     F2 2C 62 FC | 	wrlong	local04, objptr
0d2b4     4A 00 00 FF 
0d2b8     80 E4 85 F1 | 	sub	objptr, ##38016
0d2bc     4C FF 9F FD | 	jmp	#LR__1050
0d2c0                 | LR__1051
0d2c0                 | ' return runptr2
0d2c0     50 00 00 FF 
0d2c4     BC E4 05 F1 | 	add	objptr, ##41148
0d2c8     F2 FA 01 FB | 	rdlong	result1, objptr
0d2cc     50 00 00 FF 
0d2d0     BC E4 85 F1 | 	sub	objptr, ##41148
0d2d4     A7 F0 03 F6 | 	mov	ptra, fp
0d2d8     B2 00 A0 FD | 	call	#popregs_
0d2dc                 | _execute_line_ret
0d2dc     2D 00 64 FD | 	ret
0d2e0                 | 
0d2e0                 | ' 
0d2e0                 | ' 
0d2e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d2e0                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d2e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d2e0                 | ' 
0d2e0                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d2e0                 | ' 
0d2e0                 | ' function pop() as expr_result
0d2e0                 | _pop
0d2e0                 | ' if stackpointer=0 then
0d2e0     43 00 00 FF 
0d2e4     58 E4 05 F1 | 	add	objptr, ##34392
0d2e8     F2 FA 09 FB | 	rdlong	result1, objptr wz
0d2ec     43 00 00 FF 
0d2f0     58 E4 85 F1 | 	sub	objptr, ##34392
0d2f4     FF 04 06 A6 |  if_e	mov	_var03, #255
0d2f8     18 00 06 A6 |  if_e	mov	_var01, #24
0d2fc     68 00 90 AD |  if_e	jmp	#LR__1060
0d300     43 00 00 FF 
0d304     58 E4 05 F1 | 	add	objptr, ##34392
0d308     F2 FA 01 FB | 	rdlong	result1, objptr
0d30c     01 FA 85 F1 | 	sub	result1, #1
0d310     F2 FA 61 FC | 	wrlong	result1, objptr
0d314     FD FE 01 F6 | 	mov	result3, result1
0d318     01 FE 65 F0 | 	shl	result3, #1
0d31c     FD FE 01 F1 | 	add	result3, result1
0d320     02 FE 65 F0 | 	shl	result3, #2
0d324     0C 00 00 FF 
0d328     0C E4 85 F1 | 	sub	objptr, ##6156
0d32c     F2 FE 01 F1 | 	add	result3, objptr
0d330     FF 00 02 FB | 	rdlong	_var01, result3
0d334     04 FE 05 F1 | 	add	result3, #4
0d338     FF FE 01 FB | 	rdlong	result3, result3
0d33c     FD FC 01 F6 | 	mov	result2, result1
0d340     01 FC 65 F0 | 	shl	result2, #1
0d344     FD FC 01 F1 | 	add	result2, result1
0d348     02 FC 65 F0 | 	shl	result2, #2
0d34c     F2 FC 01 F1 | 	add	result2, objptr
0d350     08 FC 05 F1 | 	add	result2, #8
0d354     FE FA 01 FB | 	rdlong	result1, result2
0d358     FF 02 02 F6 | 	mov	_var02, result3
0d35c     FD 04 02 F6 | 	mov	_var03, result1
0d360     37 00 00 FF 
0d364     4C E4 85 F1 | 	sub	objptr, ##28236
0d368                 | LR__1060
0d368                 | ' return t1
0d368     01 FD 01 F6 | 	mov	result2, _var02
0d36c     02 FF 01 F6 | 	mov	result3, _var03
0d370     00 FB 01 F6 | 	mov	result1, _var01
0d374                 | _pop_ret
0d374     2D 00 64 FD | 	ret
0d378                 | 
0d378                 | ' 
0d378                 | ' sub push(t1 as expr_result )
0d378                 | _push
0d378                 | ' if stackpointer<maxstack then 
0d378     43 00 00 FF 
0d37c     58 E4 05 F1 | 	add	objptr, ##34392
0d380     F2 00 02 FB | 	rdlong	_var01, objptr
0d384     43 00 00 FF 
0d388     58 E4 85 F1 | 	sub	objptr, ##34392
0d38c     01 00 00 FF 
0d390     00 00 56 F2 | 	cmps	_var01, ##512 wc
0d394     BC 00 90 3D |  if_ae	jmp	#LR__1070
0d398     09 01 02 FB | 	rdlong	_var01, arg01
0d39c     04 12 06 F1 | 	add	arg01, #4
0d3a0     09 03 02 FB | 	rdlong	_var02, arg01
0d3a4     04 12 06 F1 | 	add	arg01, #4
0d3a8     09 13 02 FB | 	rdlong	arg01, arg01
0d3ac     43 00 00 FF 
0d3b0     58 E4 05 F1 | 	add	objptr, ##34392
0d3b4     F2 04 02 FB | 	rdlong	_var03, objptr
0d3b8     02 07 02 F6 | 	mov	_var04, _var03
0d3bc     01 06 66 F0 | 	shl	_var04, #1
0d3c0     02 07 02 F1 | 	add	_var04, _var03
0d3c4     02 06 66 F0 | 	shl	_var04, #2
0d3c8     0C 00 00 FF 
0d3cc     0C E4 85 F1 | 	sub	objptr, ##6156
0d3d0     F2 06 02 F1 | 	add	_var04, objptr
0d3d4     03 01 62 FC | 	wrlong	_var01, _var04
0d3d8     0C 00 00 FF 
0d3dc     0C E4 05 F1 | 	add	objptr, ##6156
0d3e0     F2 06 02 FB | 	rdlong	_var04, objptr
0d3e4     03 05 02 F6 | 	mov	_var03, _var04
0d3e8     01 04 66 F0 | 	shl	_var03, #1
0d3ec     03 05 02 F1 | 	add	_var03, _var04
0d3f0     02 04 66 F0 | 	shl	_var03, #2
0d3f4     0C 00 00 FF 
0d3f8     0C E4 85 F1 | 	sub	objptr, ##6156
0d3fc     F2 04 02 F1 | 	add	_var03, objptr
0d400     04 04 06 F1 | 	add	_var03, #4
0d404     02 03 62 FC | 	wrlong	_var02, _var03
0d408     0C 00 00 FF 
0d40c     0C E4 05 F1 | 	add	objptr, ##6156
0d410     F2 06 02 FB | 	rdlong	_var04, objptr
0d414     03 05 02 F6 | 	mov	_var03, _var04
0d418     01 04 66 F0 | 	shl	_var03, #1
0d41c     03 05 02 F1 | 	add	_var03, _var04
0d420     02 04 66 F0 | 	shl	_var03, #2
0d424     0C 00 00 FF 
0d428     0C E4 85 F1 | 	sub	objptr, ##6156
0d42c     F2 04 02 F1 | 	add	_var03, objptr
0d430     08 04 06 F1 | 	add	_var03, #8
0d434     02 13 62 FC | 	wrlong	arg01, _var03
0d438     0C 00 00 FF 
0d43c     0C E4 05 F1 | 	add	objptr, ##6156
0d440     F2 00 02 FB | 	rdlong	_var01, objptr
0d444     01 00 06 F1 | 	add	_var01, #1
0d448     F2 00 62 FC | 	wrlong	_var01, objptr
0d44c     43 00 00 FF 
0d450     58 E4 85 F1 | 	sub	objptr, ##34392
0d454                 | LR__1070
0d454                 | _push_ret
0d454     2D 00 64 FD | 	ret
0d458                 | 
0d458                 | ' 
0d458                 | ' ' -------------------------------- Runtime converting functions
0d458                 | ' 
0d458                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d458                 | ' 
0d458                 | ' function  convertstring(psaddr as ulong) as string
0d458                 | _convertstring
0d458     04 4A 05 F6 | 	mov	COUNT_, #4
0d45c     A8 00 A0 FD | 	call	#pushregs_
0d460     09 27 02 F6 | 	mov	local01, arg01
0d464     94 53 B1 FD | 	call	#_pslpeek
0d468     FD 28 02 F6 | 	mov	local02, result1
0d46c     B0 01 00 FF 
0d470     89 2B 06 F6 | 	mov	local03, ##@LR__5806
0d474                 | ' l=pslpeek(psaddr) 
0d474                 | ' s="" 
0d474                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d474     01 2C 06 F6 | 	mov	local04, #1
0d478     01 28 06 F1 | 	add	local02, #1
0d47c                 | LR__1080
0d47c     14 2D 52 F2 | 	cmps	local04, local02 wc
0d480     30 00 90 3D |  if_ae	jmp	#LR__1081
0d484     13 13 02 F6 | 	mov	arg01, local01
0d488     03 12 06 F1 | 	add	arg01, #3
0d48c     16 13 02 F1 | 	add	arg01, local04
0d490     10 53 B1 FD | 	call	#_pspeek
0d494     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0d498     BC AC B1 FD | 	call	#__system__Chr_S
0d49c     FD 14 02 F6 | 	mov	arg02, result1
0d4a0     15 13 02 F6 | 	mov	arg01, local03
0d4a4     CC 8A B1 FD | 	call	#__system___string_concat
0d4a8     FD 2A 02 F6 | 	mov	local03, result1
0d4ac     01 2C 06 F1 | 	add	local04, #1
0d4b0     C8 FF 9F FD | 	jmp	#LR__1080
0d4b4                 | LR__1081
0d4b4                 | ' return s
0d4b4     15 FB 01 F6 | 	mov	result1, local03
0d4b8     A7 F0 03 F6 | 	mov	ptra, fp
0d4bc     B2 00 A0 FD | 	call	#popregs_
0d4c0                 | _convertstring_ret
0d4c0     2D 00 64 FD | 	ret
0d4c4                 | 
0d4c4                 | ' 
0d4c4                 | ' ' converts a variable to an integer
0d4c4                 | ' 
0d4c4                 | ' function converttoint (t1 as expr_result) as integer 
0d4c4                 | _converttoint
0d4c4     02 4A 05 F6 | 	mov	COUNT_, #2
0d4c8     A8 00 A0 FD | 	call	#pushregs_
0d4cc     09 27 02 F6 | 	mov	local01, arg01
0d4d0                 | ' 
0d4d0                 | ' select case t1.result_type
0d4d0     08 26 06 F1 | 	add	local01, #8
0d4d4     13 29 02 FB | 	rdlong	local02, local01
0d4d8     08 26 86 F1 | 	sub	local01, #8
0d4dc     1C 28 0E F2 | 	cmp	local02, #28 wz
0d4e0     2C 00 90 AD |  if_e	jmp	#LR__1090
0d4e4     1D 28 0E F2 | 	cmp	local02, #29 wz
0d4e8     2C 00 90 AD |  if_e	jmp	#LR__1091
0d4ec     1E 28 0E F2 | 	cmp	local02, #30 wz
0d4f0     2C 00 90 AD |  if_e	jmp	#LR__1092
0d4f4     1F 28 0E F2 | 	cmp	local02, #31 wz
0d4f8     34 00 90 AD |  if_e	jmp	#LR__1093
0d4fc     2B 28 0E F2 | 	cmp	local02, #43 wz
0d500     44 00 90 AD |  if_e	jmp	#LR__1094
0d504     2C 28 0E F2 | 	cmp	local02, #44 wz
0d508     5C 00 90 AD |  if_e	jmp	#LR__1095
0d50c     60 00 90 FD | 	jmp	#LR__1096
0d510                 | LR__1090
0d510     13 FB 01 FB | 	rdlong	result1, local01
0d514     5C 00 90 FD | 	jmp	#LR__1097
0d518                 | LR__1091
0d518     13 FB 01 FB | 	rdlong	result1, local01
0d51c     54 00 90 FD | 	jmp	#LR__1097
0d520                 | LR__1092
0d520     13 13 02 FB | 	rdlong	arg01, local01
0d524     01 14 06 F6 | 	mov	arg02, #1
0d528     2C BD B1 FD | 	call	#__system___float_tointeger
0d52c     44 00 90 FD | 	jmp	#LR__1097
0d530                 | LR__1093
0d530     13 13 02 FB | 	rdlong	arg01, local01
0d534     64 C0 B1 FD | 	call	#__system____builtin_atof
0d538     FD 12 02 F6 | 	mov	arg01, result1
0d53c     01 14 06 F6 | 	mov	arg02, #1
0d540     14 BD B1 FD | 	call	#__system___float_tointeger
0d544     2C 00 90 FD | 	jmp	#LR__1097
0d548                 | LR__1094
0d548     13 13 02 FB | 	rdlong	arg01, local01
0d54c     08 FF BF FD | 	call	#_convertstring
0d550     FD 12 02 F6 | 	mov	arg01, result1
0d554     44 C0 B1 FD | 	call	#__system____builtin_atof
0d558     FD 12 02 F6 | 	mov	arg01, result1
0d55c     01 14 06 F6 | 	mov	arg02, #1
0d560     F4 BC B1 FD | 	call	#__system___float_tointeger
0d564     0C 00 90 FD | 	jmp	#LR__1097
0d568                 | LR__1095
0d568     13 FB 01 FB | 	rdlong	result1, local01
0d56c     04 00 90 FD | 	jmp	#LR__1097
0d570                 | LR__1096
0d570     00 FA 05 F6 | 	mov	result1, #0
0d574                 | LR__1097
0d574     A7 F0 03 F6 | 	mov	ptra, fp
0d578     B2 00 A0 FD | 	call	#popregs_
0d57c                 | _converttoint_ret
0d57c     2D 00 64 FD | 	ret
0d580                 | 
0d580                 | ' 
0d580                 | ' ' converts a variable to float
0d580                 | ' 
0d580                 | ' function converttofloat (t1 as expr_result) as single
0d580                 | _converttofloat
0d580     03 4A 05 F6 | 	mov	COUNT_, #3
0d584     A8 00 A0 FD | 	call	#pushregs_
0d588     09 27 02 F6 | 	mov	local01, arg01
0d58c                 | ' 
0d58c                 | ' select case t1.result_type
0d58c     08 26 06 F1 | 	add	local01, #8
0d590     13 29 02 FB | 	rdlong	local02, local01
0d594     08 26 86 F1 | 	sub	local01, #8
0d598     1C 28 0E F2 | 	cmp	local02, #28 wz
0d59c     24 00 90 AD |  if_e	jmp	#LR__1100
0d5a0     1D 28 0E F2 | 	cmp	local02, #29 wz
0d5a4     38 00 90 AD |  if_e	jmp	#LR__1101
0d5a8     1E 28 0E F2 | 	cmp	local02, #30 wz
0d5ac     3C 00 90 AD |  if_e	jmp	#LR__1102
0d5b0     1F 28 0E F2 | 	cmp	local02, #31 wz
0d5b4     3C 00 90 AD |  if_e	jmp	#LR__1103
0d5b8     2B 28 0E F2 | 	cmp	local02, #43 wz
0d5bc     40 00 90 AD |  if_e	jmp	#LR__1104
0d5c0     50 00 90 FD | 	jmp	#LR__1105
0d5c4                 | LR__1100
0d5c4     13 13 02 FB | 	rdlong	arg01, local01
0d5c8     09 13 52 F6 | 	abs	arg01, arg01 wc
0d5cc     1F 2A C6 C9 |  if_b	decod	local03, #31
0d5d0     00 2A 06 36 |  if_ae	mov	local03, #0
0d5d4     B4 B3 B1 FD | 	call	#__system___float_fromuns
0d5d8     15 FB 61 F5 | 	xor	result1, local03
0d5dc     38 00 90 FD | 	jmp	#LR__1106
0d5e0                 | LR__1101
0d5e0     13 13 02 FB | 	rdlong	arg01, local01
0d5e4     A4 B3 B1 FD | 	call	#__system___float_fromuns
0d5e8     2C 00 90 FD | 	jmp	#LR__1106
0d5ec                 | LR__1102
0d5ec     13 FB 01 FB | 	rdlong	result1, local01
0d5f0     24 00 90 FD | 	jmp	#LR__1106
0d5f4                 | LR__1103
0d5f4     13 13 02 FB | 	rdlong	arg01, local01
0d5f8     A0 BF B1 FD | 	call	#__system____builtin_atof
0d5fc     18 00 90 FD | 	jmp	#LR__1106
0d600                 | LR__1104
0d600     13 13 02 FB | 	rdlong	arg01, local01
0d604     50 FE BF FD | 	call	#_convertstring
0d608     FD 12 02 F6 | 	mov	arg01, result1
0d60c     8C BF B1 FD | 	call	#__system____builtin_atof
0d610     04 00 90 FD | 	jmp	#LR__1106
0d614                 | LR__1105
0d614     00 FA 05 F6 | 	mov	result1, #0
0d618                 | LR__1106
0d618     A7 F0 03 F6 | 	mov	ptra, fp
0d61c     B2 00 A0 FD | 	call	#popregs_
0d620                 | _converttofloat_ret
0d620     2D 00 64 FD | 	ret
0d624                 | 
0d624                 | ' 
0d624                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d624                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d624                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d624                 | ' 
0d624                 | ' 
0d624                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d624                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d624                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d624                 | ' 
0d624                 | ' '-------------------- abs
0d624                 | ' 
0d624                 | ' sub do_abs
0d624                 | _do_abs
0d624     01 4A 05 F6 | 	mov	COUNT_, #1
0d628     A8 00 A0 FD | 	call	#pushregs_
0d62c     0C F0 07 F1 | 	add	ptra, #12
0d630     AC FC BF FD | 	call	#_pop
0d634     FF 26 02 F6 | 	mov	local01, result3
0d638     A7 FA 61 FC | 	wrlong	result1, fp
0d63c     04 4E 05 F1 | 	add	fp, #4
0d640     A7 FC 61 FC | 	wrlong	result2, fp
0d644     04 4E 05 F1 | 	add	fp, #4
0d648     A7 26 62 FC | 	wrlong	local01, fp
0d64c                 | ' 
0d64c                 | ' t1=pop()
0d64c                 | ' if t1.result_type=result_int then 
0d64c     08 4E 85 F1 | 	sub	fp, #8
0d650     1C 26 0E F2 | 	cmp	local01, #28 wz
0d654     A7 12 02 AB |  if_e	rdlong	arg01, fp
0d658     09 27 42 A6 |  if_e	abs	local01, arg01
0d65c     A7 26 62 AC |  if_e	wrlong	local01, fp
0d660     2C 00 90 AD |  if_e	jmp	#LR__1110
0d664     08 4E 05 F1 | 	add	fp, #8
0d668     A7 26 02 FB | 	rdlong	local01, fp
0d66c     08 4E 85 F1 | 	sub	fp, #8
0d670     1E 26 0E F2 | 	cmp	local01, #30 wz
0d674     A7 FA 01 AB |  if_e	rdlong	result1, fp
0d678     1F FA 05 A4 |  if_e	bitl	result1, #31
0d67c     A7 FA 61 AC |  if_e	wrlong	result1, fp
0d680     08 4E 05 51 |  if_ne	add	fp, #8
0d684     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d688     08 4E 85 51 |  if_ne	sub	fp, #8
0d68c     A7 50 68 5C |  if_ne	wrlong	#40, fp
0d690                 | LR__1110
0d690     A7 12 02 F6 | 	mov	arg01, fp
0d694     E0 FC BF FD | 	call	#_push
0d698     A7 F0 03 F6 | 	mov	ptra, fp
0d69c     B2 00 A0 FD | 	call	#popregs_
0d6a0                 | _do_abs_ret
0d6a0     2D 00 64 FD | 	ret
0d6a4                 | 
0d6a4                 | ' 
0d6a4                 | ' '-------------------- acos
0d6a4                 | ' 
0d6a4                 | ' sub do_acos
0d6a4                 | _do_acos
0d6a4     01 4A 05 F6 | 	mov	COUNT_, #1
0d6a8     A8 00 A0 FD | 	call	#pushregs_
0d6ac     10 F0 07 F1 | 	add	ptra, #16
0d6b0     4A 00 00 FF 
0d6b4     80 E4 05 F1 | 	add	objptr, ##38016
0d6b8     F2 26 02 FB | 	rdlong	local01, objptr
0d6bc     13 17 02 F6 | 	mov	arg03, local01
0d6c0     01 16 66 F0 | 	shl	arg03, #1
0d6c4     13 17 02 F1 | 	add	arg03, local01
0d6c8     02 16 66 F0 | 	shl	arg03, #2
0d6cc     03 00 00 FF 
0d6d0     04 E4 85 F1 | 	sub	objptr, ##1540
0d6d4     F2 16 02 F1 | 	add	arg03, objptr
0d6d8     0B 17 02 FB | 	rdlong	arg03, arg03
0d6dc     0C 4E 05 F1 | 	add	fp, #12
0d6e0     A7 16 62 FC | 	wrlong	arg03, fp
0d6e4                 | ' 
0d6e4                 | ' numpar=compiledline(lineptr_e).result.uresult
0d6e4                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0d6e4     0C 4E 85 F1 | 	sub	fp, #12
0d6e8     02 16 16 F2 | 	cmp	arg03, #2 wc
0d6ec     47 00 00 FF 
0d6f0     7C E4 85 F1 | 	sub	objptr, ##36476
0d6f4     0C 4E 05 C1 |  if_b	add	fp, #12
0d6f8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d6fc     0C 4E 85 C1 |  if_b	sub	fp, #12
0d700     40 00 90 4D |  if_c_and_nz	jmp	#LR__1120
0d704     00 12 06 F6 | 	mov	arg01, #0
0d708     34 E5 B1 FD | 	call	#__system___getiolock_0602
0d70c     FD 12 02 F6 | 	mov	arg01, result1
0d710     04 88 B1 FD | 	call	#__system___lockmem
0d714     B0 01 00 FF 
0d718     8A 15 06 F6 | 	mov	arg02, ##@LR__5807
0d71c     00 12 06 F6 | 	mov	arg01, #0
0d720     00 16 06 F6 | 	mov	arg03, #0
0d724     E4 94 B1 FD | 	call	#__system___basic_print_string
0d728     00 12 06 F6 | 	mov	arg01, #0
0d72c     10 E5 B1 FD | 	call	#__system___getiolock_0602
0d730     FD 00 68 FC | 	wrlong	#0, result1
0d734     27 12 06 F6 | 	mov	arg01, #39
0d738     00 14 06 F6 | 	mov	arg02, #0
0d73c     EC 4D B1 FD | 	call	#_printerror
0d740     64 00 90 FD | 	jmp	#LR__1121
0d744                 | LR__1120
0d744     98 FB BF FD | 	call	#_pop
0d748     FF 26 02 F6 | 	mov	local01, result3
0d74c     A7 FA 61 FC | 	wrlong	result1, fp
0d750     04 4E 05 F1 | 	add	fp, #4
0d754     A7 FC 61 FC | 	wrlong	result2, fp
0d758     04 4E 05 F1 | 	add	fp, #4
0d75c     A7 26 62 FC | 	wrlong	local01, fp
0d760     08 4E 85 F1 | 	sub	fp, #8
0d764     A7 12 02 F6 | 	mov	arg01, fp
0d768     14 FE BF FD | 	call	#_converttofloat
0d76c     FD 12 02 F6 | 	mov	arg01, result1
0d770     5C C1 B1 FD | 	call	#__system____builtin_acosf
0d774     FD 12 02 F6 | 	mov	arg01, result1
0d778     52 00 00 FF 
0d77c     AC E4 05 F1 | 	add	objptr, ##42156
0d780     F2 14 02 FB | 	rdlong	arg02, objptr
0d784     52 00 00 FF 
0d788     AC E4 85 F1 | 	sub	objptr, ##42156
0d78c     00 B6 B1 FD | 	call	#__system___float_mul
0d790     A7 FA 61 FC | 	wrlong	result1, fp
0d794     08 4E 05 F1 | 	add	fp, #8
0d798     A7 3C 68 FC | 	wrlong	#30, fp
0d79c     08 4E 85 F1 | 	sub	fp, #8
0d7a0     A7 12 02 F6 | 	mov	arg01, fp
0d7a4     D0 FB BF FD | 	call	#_push
0d7a8                 | LR__1121
0d7a8     A7 F0 03 F6 | 	mov	ptra, fp
0d7ac     B2 00 A0 FD | 	call	#popregs_
0d7b0                 | _do_acos_ret
0d7b0     2D 00 64 FD | 	ret
0d7b4                 | 
0d7b4                 | ' 
0d7b4                 | ' '-------------------- asc
0d7b4                 | ' 
0d7b4                 | ' sub do_asc
0d7b4                 | _do_asc
0d7b4     01 4A 05 F6 | 	mov	COUNT_, #1
0d7b8     A8 00 A0 FD | 	call	#pushregs_
0d7bc     14 F0 07 F1 | 	add	ptra, #20
0d7c0     4A 00 00 FF 
0d7c4     80 E4 05 F1 | 	add	objptr, ##38016
0d7c8     F2 26 02 FB | 	rdlong	local01, objptr
0d7cc     13 17 02 F6 | 	mov	arg03, local01
0d7d0     01 16 66 F0 | 	shl	arg03, #1
0d7d4     13 17 02 F1 | 	add	arg03, local01
0d7d8     02 16 66 F0 | 	shl	arg03, #2
0d7dc     03 00 00 FF 
0d7e0     04 E4 85 F1 | 	sub	objptr, ##1540
0d7e4     F2 16 02 F1 | 	add	arg03, objptr
0d7e8     0B 17 02 FB | 	rdlong	arg03, arg03
0d7ec     0C 4E 05 F1 | 	add	fp, #12
0d7f0     A7 16 62 FC | 	wrlong	arg03, fp
0d7f4                 | ' 
0d7f4                 | ' numpar=compiledline(lineptr_e).result.uresult
0d7f4                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0d7f4     0C 4E 85 F1 | 	sub	fp, #12
0d7f8     02 16 16 F2 | 	cmp	arg03, #2 wc
0d7fc     47 00 00 FF 
0d800     7C E4 85 F1 | 	sub	objptr, ##36476
0d804     0C 4E 05 C1 |  if_b	add	fp, #12
0d808     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d80c     0C 4E 85 C1 |  if_b	sub	fp, #12
0d810     40 00 90 4D |  if_c_and_nz	jmp	#LR__1130
0d814     00 12 06 F6 | 	mov	arg01, #0
0d818     24 E4 B1 FD | 	call	#__system___getiolock_0602
0d81c     FD 12 02 F6 | 	mov	arg01, result1
0d820     F4 86 B1 FD | 	call	#__system___lockmem
0d824     B0 01 00 FF 
0d828     91 15 06 F6 | 	mov	arg02, ##@LR__5808
0d82c     00 12 06 F6 | 	mov	arg01, #0
0d830     00 16 06 F6 | 	mov	arg03, #0
0d834     D4 93 B1 FD | 	call	#__system___basic_print_string
0d838     00 12 06 F6 | 	mov	arg01, #0
0d83c     00 E4 B1 FD | 	call	#__system___getiolock_0602
0d840     FD 00 68 FC | 	wrlong	#0, result1
0d844     27 12 06 F6 | 	mov	arg01, #39
0d848     00 14 06 F6 | 	mov	arg02, #0
0d84c     DC 4C B1 FD | 	call	#_printerror
0d850     B4 00 90 FD | 	jmp	#LR__1133
0d854                 | LR__1130
0d854     88 FA BF FD | 	call	#_pop
0d858     FF 16 02 F6 | 	mov	arg03, result3
0d85c     A7 FA 61 FC | 	wrlong	result1, fp
0d860     04 4E 05 F1 | 	add	fp, #4
0d864     A7 FC 61 FC | 	wrlong	result2, fp
0d868     04 4E 05 F1 | 	add	fp, #4
0d86c     A7 16 62 FC | 	wrlong	arg03, fp
0d870                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0d870     08 4E 85 F1 | 	sub	fp, #8
0d874     2B 16 0E F2 | 	cmp	arg03, #43 wz
0d878     18 00 90 5D |  if_ne	jmp	#LR__1131
0d87c     A7 12 02 FB | 	rdlong	arg01, fp
0d880     D4 FB BF FD | 	call	#_convertstring
0d884     A7 FA 61 FC | 	wrlong	result1, fp
0d888     08 4E 05 F1 | 	add	fp, #8
0d88c     A7 3E 68 FC | 	wrlong	#31, fp
0d890     08 4E 85 F1 | 	sub	fp, #8
0d894                 | LR__1131
0d894                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0d894     08 4E 05 F1 | 	add	fp, #8
0d898     A7 16 02 FB | 	rdlong	arg03, fp
0d89c     08 4E 85 F1 | 	sub	fp, #8
0d8a0     1F 16 0E F2 | 	cmp	arg03, #31 wz
0d8a4     40 00 90 AD |  if_e	jmp	#LR__1132
0d8a8     00 12 06 F6 | 	mov	arg01, #0
0d8ac     90 E3 B1 FD | 	call	#__system___getiolock_0602
0d8b0     FD 12 02 F6 | 	mov	arg01, result1
0d8b4     60 86 B1 FD | 	call	#__system___lockmem
0d8b8     B0 01 00 FF 
0d8bc     97 15 06 F6 | 	mov	arg02, ##@LR__5809
0d8c0     00 12 06 F6 | 	mov	arg01, #0
0d8c4     00 16 06 F6 | 	mov	arg03, #0
0d8c8     40 93 B1 FD | 	call	#__system___basic_print_string
0d8cc     00 12 06 F6 | 	mov	arg01, #0
0d8d0     6C E3 B1 FD | 	call	#__system___getiolock_0602
0d8d4     FD 00 68 FC | 	wrlong	#0, result1
0d8d8     0F 12 06 F6 | 	mov	arg01, #15
0d8dc     00 14 06 F6 | 	mov	arg02, #0
0d8e0     48 4C B1 FD | 	call	#_printerror
0d8e4     20 00 90 FD | 	jmp	#LR__1133
0d8e8                 | LR__1132
0d8e8     A7 26 02 FB | 	rdlong	local01, fp
0d8ec     13 27 C2 FA | 	rdbyte	local01, local01
0d8f0     A7 26 62 FC | 	wrlong	local01, fp
0d8f4     08 4E 05 F1 | 	add	fp, #8
0d8f8     A7 38 68 FC | 	wrlong	#28, fp
0d8fc     08 4E 85 F1 | 	sub	fp, #8
0d900     A7 12 02 F6 | 	mov	arg01, fp
0d904     70 FA BF FD | 	call	#_push
0d908                 | LR__1133
0d908     A7 F0 03 F6 | 	mov	ptra, fp
0d90c     B2 00 A0 FD | 	call	#popregs_
0d910                 | _do_asc_ret
0d910     2D 00 64 FD | 	ret
0d914                 | 
0d914                 | ' 
0d914                 | ' '-------------------- asin
0d914                 | ' 
0d914                 | ' sub do_asin
0d914                 | _do_asin
0d914     01 4A 05 F6 | 	mov	COUNT_, #1
0d918     A8 00 A0 FD | 	call	#pushregs_
0d91c     10 F0 07 F1 | 	add	ptra, #16
0d920     4A 00 00 FF 
0d924     80 E4 05 F1 | 	add	objptr, ##38016
0d928     F2 26 02 FB | 	rdlong	local01, objptr
0d92c     13 17 02 F6 | 	mov	arg03, local01
0d930     01 16 66 F0 | 	shl	arg03, #1
0d934     13 17 02 F1 | 	add	arg03, local01
0d938     02 16 66 F0 | 	shl	arg03, #2
0d93c     03 00 00 FF 
0d940     04 E4 85 F1 | 	sub	objptr, ##1540
0d944     F2 16 02 F1 | 	add	arg03, objptr
0d948     0B 17 02 FB | 	rdlong	arg03, arg03
0d94c     0C 4E 05 F1 | 	add	fp, #12
0d950     A7 16 62 FC | 	wrlong	arg03, fp
0d954                 | ' 
0d954                 | ' numpar=compiledline(lineptr_e).result.uresult
0d954                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0d954     0C 4E 85 F1 | 	sub	fp, #12
0d958     02 16 16 F2 | 	cmp	arg03, #2 wc
0d95c     47 00 00 FF 
0d960     7C E4 85 F1 | 	sub	objptr, ##36476
0d964     0C 4E 05 C1 |  if_b	add	fp, #12
0d968     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d96c     0C 4E 85 C1 |  if_b	sub	fp, #12
0d970     40 00 90 4D |  if_c_and_nz	jmp	#LR__1140
0d974     00 12 06 F6 | 	mov	arg01, #0
0d978     C4 E2 B1 FD | 	call	#__system___getiolock_0602
0d97c     FD 12 02 F6 | 	mov	arg01, result1
0d980     94 85 B1 FD | 	call	#__system___lockmem
0d984     B0 01 00 FF 
0d988     9D 15 06 F6 | 	mov	arg02, ##@LR__5810
0d98c     00 12 06 F6 | 	mov	arg01, #0
0d990     00 16 06 F6 | 	mov	arg03, #0
0d994     74 92 B1 FD | 	call	#__system___basic_print_string
0d998     00 12 06 F6 | 	mov	arg01, #0
0d99c     A0 E2 B1 FD | 	call	#__system___getiolock_0602
0d9a0     FD 00 68 FC | 	wrlong	#0, result1
0d9a4     27 12 06 F6 | 	mov	arg01, #39
0d9a8     00 14 06 F6 | 	mov	arg02, #0
0d9ac     7C 4B B1 FD | 	call	#_printerror
0d9b0     64 00 90 FD | 	jmp	#LR__1141
0d9b4                 | LR__1140
0d9b4     28 F9 BF FD | 	call	#_pop
0d9b8     FF 26 02 F6 | 	mov	local01, result3
0d9bc     A7 FA 61 FC | 	wrlong	result1, fp
0d9c0     04 4E 05 F1 | 	add	fp, #4
0d9c4     A7 FC 61 FC | 	wrlong	result2, fp
0d9c8     04 4E 05 F1 | 	add	fp, #4
0d9cc     A7 26 62 FC | 	wrlong	local01, fp
0d9d0     08 4E 85 F1 | 	sub	fp, #8
0d9d4     A7 12 02 F6 | 	mov	arg01, fp
0d9d8     A4 FB BF FD | 	call	#_converttofloat
0d9dc     FD 12 02 F6 | 	mov	arg01, result1
0d9e0     A0 BE B1 FD | 	call	#__system____builtin_asinf
0d9e4     FD 12 02 F6 | 	mov	arg01, result1
0d9e8     52 00 00 FF 
0d9ec     AC E4 05 F1 | 	add	objptr, ##42156
0d9f0     F2 14 02 FB | 	rdlong	arg02, objptr
0d9f4     52 00 00 FF 
0d9f8     AC E4 85 F1 | 	sub	objptr, ##42156
0d9fc     90 B3 B1 FD | 	call	#__system___float_mul
0da00     A7 FA 61 FC | 	wrlong	result1, fp
0da04     08 4E 05 F1 | 	add	fp, #8
0da08     A7 3C 68 FC | 	wrlong	#30, fp
0da0c     08 4E 85 F1 | 	sub	fp, #8
0da10     A7 12 02 F6 | 	mov	arg01, fp
0da14     60 F9 BF FD | 	call	#_push
0da18                 | LR__1141
0da18     A7 F0 03 F6 | 	mov	ptra, fp
0da1c     B2 00 A0 FD | 	call	#popregs_
0da20                 | _do_asin_ret
0da20     2D 00 64 FD | 	ret
0da24                 | 
0da24                 | ' 
0da24                 | ' '-------------------- atn
0da24                 | ' 
0da24                 | ' sub do_atn
0da24                 | _do_atn
0da24     01 4A 05 F6 | 	mov	COUNT_, #1
0da28     A8 00 A0 FD | 	call	#pushregs_
0da2c     10 F0 07 F1 | 	add	ptra, #16
0da30     4A 00 00 FF 
0da34     80 E4 05 F1 | 	add	objptr, ##38016
0da38     F2 26 02 FB | 	rdlong	local01, objptr
0da3c     13 17 02 F6 | 	mov	arg03, local01
0da40     01 16 66 F0 | 	shl	arg03, #1
0da44     13 17 02 F1 | 	add	arg03, local01
0da48     02 16 66 F0 | 	shl	arg03, #2
0da4c     03 00 00 FF 
0da50     04 E4 85 F1 | 	sub	objptr, ##1540
0da54     F2 16 02 F1 | 	add	arg03, objptr
0da58     0B 17 02 FB | 	rdlong	arg03, arg03
0da5c     0C 4E 05 F1 | 	add	fp, #12
0da60     A7 16 62 FC | 	wrlong	arg03, fp
0da64                 | ' 
0da64                 | ' numpar=compiledline(lineptr_e).result.uresult
0da64                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0da64     0C 4E 85 F1 | 	sub	fp, #12
0da68     02 16 16 F2 | 	cmp	arg03, #2 wc
0da6c     47 00 00 FF 
0da70     7C E4 85 F1 | 	sub	objptr, ##36476
0da74     0C 4E 05 C1 |  if_b	add	fp, #12
0da78     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0da7c     0C 4E 85 C1 |  if_b	sub	fp, #12
0da80     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0da84     00 12 06 F6 | 	mov	arg01, #0
0da88     B4 E1 B1 FD | 	call	#__system___getiolock_0602
0da8c     FD 12 02 F6 | 	mov	arg01, result1
0da90     84 84 B1 FD | 	call	#__system___lockmem
0da94     B0 01 00 FF 
0da98     A4 15 06 F6 | 	mov	arg02, ##@LR__5811
0da9c     00 12 06 F6 | 	mov	arg01, #0
0daa0     00 16 06 F6 | 	mov	arg03, #0
0daa4     64 91 B1 FD | 	call	#__system___basic_print_string
0daa8     00 12 06 F6 | 	mov	arg01, #0
0daac     90 E1 B1 FD | 	call	#__system___getiolock_0602
0dab0     FD 00 68 FC | 	wrlong	#0, result1
0dab4     27 12 06 F6 | 	mov	arg01, #39
0dab8     00 14 06 F6 | 	mov	arg02, #0
0dabc     6C 4A B1 FD | 	call	#_printerror
0dac0     6C 00 90 FD | 	jmp	#LR__1151
0dac4                 | LR__1150
0dac4     18 F8 BF FD | 	call	#_pop
0dac8     FF 26 02 F6 | 	mov	local01, result3
0dacc     A7 FA 61 FC | 	wrlong	result1, fp
0dad0     04 4E 05 F1 | 	add	fp, #4
0dad4     A7 FC 61 FC | 	wrlong	result2, fp
0dad8     04 4E 05 F1 | 	add	fp, #4
0dadc     A7 26 62 FC | 	wrlong	local01, fp
0dae0     08 4E 85 F1 | 	sub	fp, #8
0dae4     A7 12 02 F6 | 	mov	arg01, fp
0dae8     94 FA BF FD | 	call	#_converttofloat
0daec     FD 12 02 F6 | 	mov	arg01, result1
0daf0     00 C0 1F FF 
0daf4     00 14 06 F6 | 	mov	arg02, ##1065353216
0daf8     20 BE B1 FD | 	call	#__system____builtin_atan2f
0dafc     FD 12 02 F6 | 	mov	arg01, result1
0db00     52 00 00 FF 
0db04     AC E4 05 F1 | 	add	objptr, ##42156
0db08     F2 14 02 FB | 	rdlong	arg02, objptr
0db0c     52 00 00 FF 
0db10     AC E4 85 F1 | 	sub	objptr, ##42156
0db14     78 B2 B1 FD | 	call	#__system___float_mul
0db18     A7 FA 61 FC | 	wrlong	result1, fp
0db1c     08 4E 05 F1 | 	add	fp, #8
0db20     A7 3C 68 FC | 	wrlong	#30, fp
0db24     08 4E 85 F1 | 	sub	fp, #8
0db28     A7 12 02 F6 | 	mov	arg01, fp
0db2c     48 F8 BF FD | 	call	#_push
0db30                 | LR__1151
0db30     A7 F0 03 F6 | 	mov	ptra, fp
0db34     B2 00 A0 FD | 	call	#popregs_
0db38                 | _do_atn_ret
0db38     2D 00 64 FD | 	ret
0db3c                 | 
0db3c                 | ' 
0db3c                 | ' '-------------------- beep
0db3c                 | ' 
0db3c                 | ' sub do_beep
0db3c                 | _do_beep
0db3c     02 4A 05 F6 | 	mov	COUNT_, #2
0db40     A8 00 A0 FD | 	call	#pushregs_
0db44     20 F0 07 F1 | 	add	ptra, #32
0db48     94 F7 BF FD | 	call	#_pop
0db4c     FD 26 02 F6 | 	mov	local01, result1
0db50     FE 1C 02 F6 | 	mov	arg06, result2
0db54     FF 28 02 F6 | 	mov	local02, result3
0db58     0C 4E 05 F1 | 	add	fp, #12
0db5c     A7 26 62 FC | 	wrlong	local01, fp
0db60     04 4E 05 F1 | 	add	fp, #4
0db64     A7 1C 62 FC | 	wrlong	arg06, fp
0db68     04 4E 05 F1 | 	add	fp, #4
0db6c     A7 28 62 FC | 	wrlong	local02, fp
0db70     14 4E 85 F1 | 	sub	fp, #20
0db74     68 F7 BF FD | 	call	#_pop
0db78     A7 FA 61 FC | 	wrlong	result1, fp
0db7c     04 4E 05 F1 | 	add	fp, #4
0db80     A7 FC 61 FC | 	wrlong	result2, fp
0db84     04 4E 05 F1 | 	add	fp, #4
0db88     A7 FE 61 FC | 	wrlong	result3, fp
0db8c                 | ' 
0db8c                 | ' t2=pop()
0db8c                 | ' t1=pop()
0db8c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0db8c     08 4E 85 F1 | 	sub	fp, #8
0db90     1C FE 0D F2 | 	cmp	result3, #28 wz
0db94     08 4E 05 51 |  if_ne	add	fp, #8
0db98     A7 28 02 5B |  if_ne	rdlong	local02, fp
0db9c     08 4E 85 51 |  if_ne	sub	fp, #8
0dba0     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0dba4     A7 26 02 AB |  if_e	rdlong	local01, fp
0dba8     18 4E 05 A1 |  if_e	add	fp, #24
0dbac     A7 26 62 AC |  if_e	wrlong	local01, fp
0dbb0     18 4E 85 A1 |  if_e	sub	fp, #24
0dbb4     14 00 90 AD |  if_e	jmp	#LR__1160
0dbb8     A7 12 02 F6 | 	mov	arg01, fp
0dbbc     04 F9 BF FD | 	call	#_converttoint
0dbc0     18 4E 05 F1 | 	add	fp, #24
0dbc4     A7 FA 61 FC | 	wrlong	result1, fp
0dbc8     18 4E 85 F1 | 	sub	fp, #24
0dbcc                 | LR__1160
0dbcc     1C 4E 05 F1 | 	add	fp, #28
0dbd0     A7 FE 48 FC | 	wrbyte	#127, fp
0dbd4     01 4E 05 F1 | 	add	fp, #1
0dbd8     A7 00 49 FC | 	wrbyte	#128, fp
0dbdc     01 4E 85 F1 | 	sub	fp, #1
0dbe0     A7 14 02 F6 | 	mov	arg02, fp
0dbe4     04 4E 85 F1 | 	sub	fp, #4
0dbe8     A7 16 02 FB | 	rdlong	arg03, fp
0dbec     18 4E 85 F1 | 	sub	fp, #24
0dbf0     01 16 66 F0 | 	shl	arg03, #1
0dbf4     07 12 06 F6 | 	mov	arg01, #7
0dbf8     0E 18 C6 F9 | 	decod	arg04, #14
0dbfc     02 1A 06 F6 | 	mov	arg05, #2
0dc00     00 1C 06 F6 | 	mov	arg06, #0
0dc04     0B 00 00 FF 
0dc08     CC E4 05 F1 | 	add	objptr, ##5836
0dc0c     64 7F B1 FD | 	call	#_audio096_spin2_play8
0dc10     0B 00 00 FF 
0dc14     CC E4 85 F1 | 	sub	objptr, ##5836
0dc18     0C 4E 05 F1 | 	add	fp, #12
0dc1c     A7 12 02 F6 | 	mov	arg01, fp
0dc20     0C 4E 85 F1 | 	sub	fp, #12
0dc24     50 F7 BF FD | 	call	#_push
0dc28     F4 DE B0 FD | 	call	#_do_waitms
0dc2c     07 12 06 F6 | 	mov	arg01, #7
0dc30     0B 00 00 FF 
0dc34     CC E4 05 F1 | 	add	objptr, ##5836
0dc38     DC 7F B1 FD | 	call	#_audio096_spin2_stop
0dc3c     0B 00 00 FF 
0dc40     CC E4 85 F1 | 	sub	objptr, ##5836
0dc44     A7 F0 03 F6 | 	mov	ptra, fp
0dc48     B2 00 A0 FD | 	call	#popregs_
0dc4c                 | _do_beep_ret
0dc4c     2D 00 64 FD | 	ret
0dc50                 | 
0dc50                 | ' 
0dc50                 | ' '-------------------- blit
0dc50                 | ' 
0dc50                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0dc50                 | ' sub do_blit
0dc50                 | _do_blit
0dc50     02 4A 05 F6 | 	mov	COUNT_, #2
0dc54     A8 00 A0 FD | 	call	#pushregs_
0dc58     3C F0 07 F1 | 	add	ptra, #60
0dc5c     4A 00 00 FF 
0dc60     80 E4 05 F1 | 	add	objptr, ##38016
0dc64     F2 26 02 FB | 	rdlong	local01, objptr
0dc68     13 25 02 F6 | 	mov	arg10, local01
0dc6c     01 24 66 F0 | 	shl	arg10, #1
0dc70     13 25 02 F1 | 	add	arg10, local01
0dc74     02 24 66 F0 | 	shl	arg10, #2
0dc78     03 00 00 FF 
0dc7c     04 E4 85 F1 | 	sub	objptr, ##1540
0dc80     F2 24 02 F1 | 	add	arg10, objptr
0dc84     12 25 02 FB | 	rdlong	arg10, arg10
0dc88     38 4E 05 F1 | 	add	fp, #56
0dc8c     A7 24 62 FC | 	wrlong	arg10, fp
0dc90                 | ' 
0dc90                 | ' numpar=compiledline(lineptr_e).result.uresult
0dc90                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0dc90     38 4E 85 F1 | 	sub	fp, #56
0dc94     0A 24 0E F2 | 	cmp	arg10, #10 wz
0dc98     47 00 00 FF 
0dc9c     7C E4 85 F1 | 	sub	objptr, ##36476
0dca0     38 4E 05 51 |  if_ne	add	fp, #56
0dca4     A7 26 02 5B |  if_ne	rdlong	local01, fp
0dca8     38 4E 85 51 |  if_ne	sub	fp, #56
0dcac     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0dcb0     50 00 90 AD |  if_e	jmp	#LR__1170
0dcb4     00 12 06 F6 | 	mov	arg01, #0
0dcb8     84 DF B1 FD | 	call	#__system___getiolock_0602
0dcbc     FD 12 02 F6 | 	mov	arg01, result1
0dcc0     54 82 B1 FD | 	call	#__system___lockmem
0dcc4     B0 01 00 FF 
0dcc8     AA 15 06 F6 | 	mov	arg02, ##@LR__5812
0dccc     00 12 06 F6 | 	mov	arg01, #0
0dcd0     00 16 06 F6 | 	mov	arg03, #0
0dcd4     34 8F B1 FD | 	call	#__system___basic_print_string
0dcd8     00 12 06 F6 | 	mov	arg01, #0
0dcdc     60 DF B1 FD | 	call	#__system___getiolock_0602
0dce0     FD 00 68 FC | 	wrlong	#0, result1
0dce4     50 00 00 FF 
0dce8     F0 E4 05 F1 | 	add	objptr, ##41200
0dcec     F2 14 02 FB | 	rdlong	arg02, objptr
0dcf0     50 00 00 FF 
0dcf4     F0 E4 85 F1 | 	sub	objptr, ##41200
0dcf8     27 12 06 F6 | 	mov	arg01, #39
0dcfc     2C 48 B1 FD | 	call	#_printerror
0dd00     44 01 90 FD | 	jmp	#LR__1175
0dd04                 | LR__1170
0dd04                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0dd04     38 4E 05 F1 | 	add	fp, #56
0dd08     A7 28 02 FB | 	rdlong	local02, fp
0dd0c     01 28 86 F1 | 	sub	local02, #1
0dd10     04 4E 85 F1 | 	sub	fp, #4
0dd14     A7 28 62 FC | 	wrlong	local02, fp
0dd18     34 4E 85 F1 | 	sub	fp, #52
0dd1c                 | LR__1171
0dd1c     38 4E 05 F1 | 	add	fp, #56
0dd20     A7 26 02 FB | 	rdlong	local01, fp
0dd24     01 26 86 F1 | 	sub	local01, #1
0dd28     04 4E 85 F1 | 	sub	fp, #4
0dd2c     A7 24 02 FB | 	rdlong	arg10, fp
0dd30     34 4E 85 F1 | 	sub	fp, #52
0dd34     13 25 1A F2 | 	cmp	arg10, local01 wcz
0dd38     54 00 90 1D |  if_a	jmp	#LR__1172
0dd3c     A0 F5 BF FD | 	call	#_pop
0dd40     A7 FA 61 FC | 	wrlong	result1, fp
0dd44     04 4E 05 F1 | 	add	fp, #4
0dd48     A7 FC 61 FC | 	wrlong	result2, fp
0dd4c     04 4E 05 F1 | 	add	fp, #4
0dd50     A7 FE 61 FC | 	wrlong	result3, fp
0dd54     2C 4E 05 F1 | 	add	fp, #44
0dd58     A7 28 02 FB | 	rdlong	local02, fp
0dd5c     02 28 66 F0 | 	shl	local02, #2
0dd60     28 4E 85 F1 | 	sub	fp, #40
0dd64     A7 28 02 F1 | 	add	local02, fp
0dd68     0C 4E 85 F1 | 	sub	fp, #12
0dd6c     A7 12 02 F6 | 	mov	arg01, fp
0dd70     50 F7 BF FD | 	call	#_converttoint
0dd74     14 FB 61 FC | 	wrlong	result1, local02
0dd78     34 4E 05 F1 | 	add	fp, #52
0dd7c     A7 28 02 FB | 	rdlong	local02, fp
0dd80     01 28 86 F1 | 	sub	local02, #1
0dd84     A7 28 62 FC | 	wrlong	local02, fp
0dd88     34 4E 85 F1 | 	sub	fp, #52
0dd8c     8C FF 9F FD | 	jmp	#LR__1171
0dd90                 | LR__1172
0dd90                 | ' if numpar=10 then 
0dd90     38 4E 05 F1 | 	add	fp, #56
0dd94     A7 28 02 FB | 	rdlong	local02, fp
0dd98     38 4E 85 F1 | 	sub	fp, #56
0dd9c     0A 28 0E F2 | 	cmp	local02, #10 wz
0dda0     5C 00 90 5D |  if_ne	jmp	#LR__1173
0dda4     0C 4E 05 F1 | 	add	fp, #12
0dda8     A7 12 02 FB | 	rdlong	arg01, fp
0ddac     04 4E 05 F1 | 	add	fp, #4
0ddb0     A7 14 02 FB | 	rdlong	arg02, fp
0ddb4     04 4E 05 F1 | 	add	fp, #4
0ddb8     A7 16 02 FB | 	rdlong	arg03, fp
0ddbc     04 4E 05 F1 | 	add	fp, #4
0ddc0     A7 18 02 FB | 	rdlong	arg04, fp
0ddc4     04 4E 05 F1 | 	add	fp, #4
0ddc8     A7 1A 02 FB | 	rdlong	arg05, fp
0ddcc     04 4E 05 F1 | 	add	fp, #4
0ddd0     A7 1C 02 FB | 	rdlong	arg06, fp
0ddd4     04 4E 05 F1 | 	add	fp, #4
0ddd8     A7 1E 02 FB | 	rdlong	arg07, fp
0dddc     04 4E 05 F1 | 	add	fp, #4
0dde0     A7 20 02 FB | 	rdlong	arg08, fp
0dde4     04 4E 05 F1 | 	add	fp, #4
0dde8     A7 22 02 FB | 	rdlong	arg09, fp
0ddec     04 4E 05 F1 | 	add	fp, #4
0ddf0     A7 24 02 FB | 	rdlong	arg10, fp
0ddf4     30 4E 85 F1 | 	sub	fp, #48
0ddf8     08 6F B1 FD | 	call	#_hg010b_spin2_blit
0ddfc     48 00 90 FD | 	jmp	#LR__1174
0de00                 | LR__1173
0de00     F2 1E 02 FB | 	rdlong	arg07, objptr
0de04     0C 4E 05 F1 | 	add	fp, #12
0de08     A7 14 02 FB | 	rdlong	arg02, fp
0de0c     04 4E 05 F1 | 	add	fp, #4
0de10     A7 16 02 FB | 	rdlong	arg03, fp
0de14     04 4E 05 F1 | 	add	fp, #4
0de18     A7 18 02 FB | 	rdlong	arg04, fp
0de1c     04 4E 05 F1 | 	add	fp, #4
0de20     A7 1A 02 FB | 	rdlong	arg05, fp
0de24     04 4E 05 F1 | 	add	fp, #4
0de28     A7 20 02 FB | 	rdlong	arg08, fp
0de2c     04 4E 05 F1 | 	add	fp, #4
0de30     A7 22 02 FB | 	rdlong	arg09, fp
0de34     20 4E 85 F1 | 	sub	fp, #32
0de38     0F 13 02 F6 | 	mov	arg01, arg07
0de3c     0A 1C C6 F9 | 	decod	arg06, #10
0de40     0A 24 C6 F9 | 	decod	arg10, #10
0de44     BC 6E B1 FD | 	call	#_hg010b_spin2_blit
0de48                 | LR__1174
0de48                 | LR__1175
0de48     A7 F0 03 F6 | 	mov	ptra, fp
0de4c     B2 00 A0 FD | 	call	#popregs_
0de50                 | _do_blit_ret
0de50     2D 00 64 FD | 	ret
0de54                 | 
0de54                 | ' 
0de54                 | ' 
0de54                 | ' '-------------------- bin$
0de54                 | ' 
0de54                 | ' sub do_bin
0de54                 | _do_bin
0de54     01 4A 05 F6 | 	mov	COUNT_, #1
0de58     A8 00 A0 FD | 	call	#pushregs_
0de5c     18 F0 07 F1 | 	add	ptra, #24
0de60     4A 00 00 FF 
0de64     80 E4 05 F1 | 	add	objptr, ##38016
0de68     F2 26 02 FB | 	rdlong	local01, objptr
0de6c     13 17 02 F6 | 	mov	arg03, local01
0de70     01 16 66 F0 | 	shl	arg03, #1
0de74     13 17 02 F1 | 	add	arg03, local01
0de78     02 16 66 F0 | 	shl	arg03, #2
0de7c     03 00 00 FF 
0de80     04 E4 85 F1 | 	sub	objptr, ##1540
0de84     F2 16 02 F1 | 	add	arg03, objptr
0de88     0B 17 02 FB | 	rdlong	arg03, arg03
0de8c     0C 4E 05 F1 | 	add	fp, #12
0de90     A7 16 62 FC | 	wrlong	arg03, fp
0de94                 | ' 
0de94                 | ' numpar=compiledline(lineptr_e).result.uresult
0de94                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0de94     0C 4E 85 F1 | 	sub	fp, #12
0de98     03 16 16 F2 | 	cmp	arg03, #3 wc
0de9c     47 00 00 FF 
0dea0     7C E4 85 F1 | 	sub	objptr, ##36476
0dea4     0C 4E 05 C1 |  if_b	add	fp, #12
0dea8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0deac     0C 4E 85 C1 |  if_b	sub	fp, #12
0deb0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1180
0deb4     00 12 06 F6 | 	mov	arg01, #0
0deb8     84 DD B1 FD | 	call	#__system___getiolock_0602
0debc     FD 12 02 F6 | 	mov	arg01, result1
0dec0     54 80 B1 FD | 	call	#__system___lockmem
0dec4     B0 01 00 FF 
0dec8     B1 15 06 F6 | 	mov	arg02, ##@LR__5813
0decc     00 12 06 F6 | 	mov	arg01, #0
0ded0     00 16 06 F6 | 	mov	arg03, #0
0ded4     34 8D B1 FD | 	call	#__system___basic_print_string
0ded8     00 12 06 F6 | 	mov	arg01, #0
0dedc     60 DD B1 FD | 	call	#__system___getiolock_0602
0dee0     FD 00 68 FC | 	wrlong	#0, result1
0dee4     27 12 06 F6 | 	mov	arg01, #39
0dee8     00 14 06 F6 | 	mov	arg02, #0
0deec     3C 46 B1 FD | 	call	#_printerror
0def0     B8 00 90 FD | 	jmp	#LR__1183
0def4                 | LR__1180
0def4                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0def4     0C 4E 05 F1 | 	add	fp, #12
0def8     A7 26 02 FB | 	rdlong	local01, fp
0defc     0C 4E 85 F1 | 	sub	fp, #12
0df00     02 26 0E F2 | 	cmp	local01, #2 wz
0df04     38 00 90 5D |  if_ne	jmp	#LR__1181
0df08     D4 F3 BF FD | 	call	#_pop
0df0c     FF 26 02 F6 | 	mov	local01, result3
0df10     A7 FA 61 FC | 	wrlong	result1, fp
0df14     04 4E 05 F1 | 	add	fp, #4
0df18     A7 FC 61 FC | 	wrlong	result2, fp
0df1c     04 4E 05 F1 | 	add	fp, #4
0df20     A7 26 62 FC | 	wrlong	local01, fp
0df24     08 4E 85 F1 | 	sub	fp, #8
0df28     A7 12 02 F6 | 	mov	arg01, fp
0df2c     94 F5 BF FD | 	call	#_converttoint
0df30     14 4E 05 F1 | 	add	fp, #20
0df34     A7 FA 61 FC | 	wrlong	result1, fp
0df38     14 4E 85 F1 | 	sub	fp, #20
0df3c     0C 00 90 FD | 	jmp	#LR__1182
0df40                 | LR__1181
0df40     14 4E 05 F1 | 	add	fp, #20
0df44     A7 00 68 FC | 	wrlong	#0, fp
0df48     14 4E 85 F1 | 	sub	fp, #20
0df4c                 | LR__1182
0df4c     90 F3 BF FD | 	call	#_pop
0df50     FF 26 02 F6 | 	mov	local01, result3
0df54     A7 FA 61 FC | 	wrlong	result1, fp
0df58     04 4E 05 F1 | 	add	fp, #4
0df5c     A7 FC 61 FC | 	wrlong	result2, fp
0df60     04 4E 05 F1 | 	add	fp, #4
0df64     A7 26 62 FC | 	wrlong	local01, fp
0df68     08 4E 85 F1 | 	sub	fp, #8
0df6c     A7 12 02 F6 | 	mov	arg01, fp
0df70     50 F5 BF FD | 	call	#_converttoint
0df74     10 4E 05 F1 | 	add	fp, #16
0df78     A7 FA 61 FC | 	wrlong	result1, fp
0df7c     FD 12 02 F6 | 	mov	arg01, result1
0df80     04 4E 05 F1 | 	add	fp, #4
0df84     A7 14 02 FB | 	rdlong	arg02, fp
0df88     14 4E 85 F1 | 	sub	fp, #20
0df8c     02 16 06 F6 | 	mov	arg03, #2
0df90     54 A2 B1 FD | 	call	#__system__Number_S
0df94     A7 FA 61 FC | 	wrlong	result1, fp
0df98     08 4E 05 F1 | 	add	fp, #8
0df9c     A7 3E 68 FC | 	wrlong	#31, fp
0dfa0     08 4E 85 F1 | 	sub	fp, #8
0dfa4     A7 12 02 F6 | 	mov	arg01, fp
0dfa8     CC F3 BF FD | 	call	#_push
0dfac                 | LR__1183
0dfac     A7 F0 03 F6 | 	mov	ptra, fp
0dfb0     B2 00 A0 FD | 	call	#popregs_
0dfb4                 | _do_bin_ret
0dfb4     2D 00 64 FD | 	ret
0dfb8                 | 
0dfb8                 | ' 
0dfb8                 | ' '-------------------- box
0dfb8                 | ' 
0dfb8                 | ' sub do_box
0dfb8                 | _do_box
0dfb8     03 4A 05 F6 | 	mov	COUNT_, #3
0dfbc     A8 00 A0 FD | 	call	#pushregs_
0dfc0     30 F0 07 F1 | 	add	ptra, #48
0dfc4     18 F3 BF FD | 	call	#_pop
0dfc8     FD 1A 02 F6 | 	mov	arg05, result1
0dfcc     FE 18 02 F6 | 	mov	arg04, result2
0dfd0     FF 16 02 F6 | 	mov	arg03, result3
0dfd4     24 4E 05 F1 | 	add	fp, #36
0dfd8     A7 1A 62 FC | 	wrlong	arg05, fp
0dfdc     04 4E 05 F1 | 	add	fp, #4
0dfe0     A7 18 62 FC | 	wrlong	arg04, fp
0dfe4     04 4E 05 F1 | 	add	fp, #4
0dfe8     A7 16 62 FC | 	wrlong	arg03, fp
0dfec     2C 4E 85 F1 | 	sub	fp, #44
0dff0     EC F2 BF FD | 	call	#_pop
0dff4     FD 1A 02 F6 | 	mov	arg05, result1
0dff8     FE 18 02 F6 | 	mov	arg04, result2
0dffc     FF 16 02 F6 | 	mov	arg03, result3
0e000     18 4E 05 F1 | 	add	fp, #24
0e004     A7 1A 62 FC | 	wrlong	arg05, fp
0e008     04 4E 05 F1 | 	add	fp, #4
0e00c     A7 18 62 FC | 	wrlong	arg04, fp
0e010     04 4E 05 F1 | 	add	fp, #4
0e014     A7 16 62 FC | 	wrlong	arg03, fp
0e018     20 4E 85 F1 | 	sub	fp, #32
0e01c     C0 F2 BF FD | 	call	#_pop
0e020     FD 1A 02 F6 | 	mov	arg05, result1
0e024     FE 18 02 F6 | 	mov	arg04, result2
0e028     FF 26 02 F6 | 	mov	local01, result3
0e02c     0C 4E 05 F1 | 	add	fp, #12
0e030     A7 1A 62 FC | 	wrlong	arg05, fp
0e034     04 4E 05 F1 | 	add	fp, #4
0e038     A7 18 62 FC | 	wrlong	arg04, fp
0e03c     04 4E 05 F1 | 	add	fp, #4
0e040     A7 26 62 FC | 	wrlong	local01, fp
0e044     14 4E 85 F1 | 	sub	fp, #20
0e048     94 F2 BF FD | 	call	#_pop
0e04c     A7 FA 61 FC | 	wrlong	result1, fp
0e050     04 4E 05 F1 | 	add	fp, #4
0e054     A7 FC 61 FC | 	wrlong	result2, fp
0e058     04 4E 05 F1 | 	add	fp, #4
0e05c     A7 FE 61 FC | 	wrlong	result3, fp
0e060                 | ' 
0e060                 | ' t4=pop()
0e060                 | ' t3=pop()
0e060                 | ' t2=pop()
0e060                 | ' t1=pop()
0e060                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e060     FF 1A 02 F6 | 	mov	arg05, result3
0e064     08 4E 85 F1 | 	sub	fp, #8
0e068     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e06c     08 4E 05 51 |  if_ne	add	fp, #8
0e070     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e074     08 4E 85 51 |  if_ne	sub	fp, #8
0e078     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e07c     A8 00 90 5D |  if_ne	jmp	#LR__1190
0e080     14 4E 05 F1 | 	add	fp, #20
0e084     A7 26 02 FB | 	rdlong	local01, fp
0e088     14 4E 85 F1 | 	sub	fp, #20
0e08c     1C 26 0E F2 | 	cmp	local01, #28 wz
0e090     14 4E 05 51 |  if_ne	add	fp, #20
0e094     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e098     14 4E 85 51 |  if_ne	sub	fp, #20
0e09c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e0a0     84 00 90 5D |  if_ne	jmp	#LR__1190
0e0a4     20 4E 05 F1 | 	add	fp, #32
0e0a8     A7 26 02 FB | 	rdlong	local01, fp
0e0ac     20 4E 85 F1 | 	sub	fp, #32
0e0b0     1C 26 0E F2 | 	cmp	local01, #28 wz
0e0b4     20 4E 05 51 |  if_ne	add	fp, #32
0e0b8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e0bc     20 4E 85 51 |  if_ne	sub	fp, #32
0e0c0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e0c4     60 00 90 5D |  if_ne	jmp	#LR__1190
0e0c8     2C 4E 05 F1 | 	add	fp, #44
0e0cc     A7 26 02 FB | 	rdlong	local01, fp
0e0d0     2C 4E 85 F1 | 	sub	fp, #44
0e0d4     1C 26 0E F2 | 	cmp	local01, #28 wz
0e0d8     2C 4E 05 51 |  if_ne	add	fp, #44
0e0dc     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e0e0     2C 4E 85 51 |  if_ne	sub	fp, #44
0e0e4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e0e8     3C 00 90 5D |  if_ne	jmp	#LR__1190
0e0ec     A7 12 02 FB | 	rdlong	arg01, fp
0e0f0     0C 4E 05 F1 | 	add	fp, #12
0e0f4     A7 14 02 FB | 	rdlong	arg02, fp
0e0f8     0C 4E 05 F1 | 	add	fp, #12
0e0fc     A7 16 02 FB | 	rdlong	arg03, fp
0e100     0C 4E 05 F1 | 	add	fp, #12
0e104     A7 18 02 FB | 	rdlong	arg04, fp
0e108     24 4E 85 F1 | 	sub	fp, #36
0e10c     37 00 00 FF 
0e110     28 E4 05 F1 | 	add	objptr, ##28200
0e114     F2 1A 02 FB | 	rdlong	arg05, objptr
0e118     37 00 00 FF 
0e11c     28 E4 85 F1 | 	sub	objptr, ##28200
0e120     A8 5E B1 FD | 	call	#_hg010b_spin2_box
0e124                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e124     6C 00 90 FD | 	jmp	#LR__1191
0e128                 | LR__1190
0e128     A7 12 02 F6 | 	mov	arg01, fp
0e12c     94 F3 BF FD | 	call	#_converttoint
0e130     FD 28 02 F6 | 	mov	local02, result1
0e134     0C 4E 05 F1 | 	add	fp, #12
0e138     A7 12 02 F6 | 	mov	arg01, fp
0e13c     0C 4E 85 F1 | 	sub	fp, #12
0e140     80 F3 BF FD | 	call	#_converttoint
0e144     FD 2A 02 F6 | 	mov	local03, result1
0e148     18 4E 05 F1 | 	add	fp, #24
0e14c     A7 12 02 F6 | 	mov	arg01, fp
0e150     18 4E 85 F1 | 	sub	fp, #24
0e154     6C F3 BF FD | 	call	#_converttoint
0e158     FD 26 02 F6 | 	mov	local01, result1
0e15c     24 4E 05 F1 | 	add	fp, #36
0e160     A7 12 02 F6 | 	mov	arg01, fp
0e164     24 4E 85 F1 | 	sub	fp, #36
0e168     58 F3 BF FD | 	call	#_converttoint
0e16c     FD 18 02 F6 | 	mov	arg04, result1
0e170     37 00 00 FF 
0e174     28 E4 05 F1 | 	add	objptr, ##28200
0e178     F2 1A 02 FB | 	rdlong	arg05, objptr
0e17c     37 00 00 FF 
0e180     28 E4 85 F1 | 	sub	objptr, ##28200
0e184     14 13 02 F6 | 	mov	arg01, local02
0e188     15 15 02 F6 | 	mov	arg02, local03
0e18c     13 17 02 F6 | 	mov	arg03, local01
0e190     38 5E B1 FD | 	call	#_hg010b_spin2_box
0e194                 | LR__1191
0e194     A7 F0 03 F6 | 	mov	ptra, fp
0e198     B2 00 A0 FD | 	call	#popregs_
0e19c                 | _do_box_ret
0e19c     2D 00 64 FD | 	ret
0e1a0                 | 
0e1a0                 | ' 
0e1a0                 | ' '-------------------- brun
0e1a0                 | ' 
0e1a0                 | ' sub do_brun
0e1a0                 | _do_brun
0e1a0     08 4A 05 F6 | 	mov	COUNT_, #8
0e1a4     A8 00 A0 FD | 	call	#pushregs_
0e1a8     34 F1 BF FD | 	call	#_pop
0e1ac     FE 1A 02 F6 | 	mov	arg05, result2
0e1b0     FF 18 02 F6 | 	mov	arg04, result3
0e1b4     FD 26 02 F6 | 	mov	local01, result1
0e1b8     0D 29 02 F6 | 	mov	local02, arg05
0e1bc     0C 2B 02 F6 | 	mov	local03, arg04
0e1c0                 | ' 
0e1c0                 | ' t1=pop() 
0e1c0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e1c0     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e1c4     10 00 90 5D |  if_ne	jmp	#LR__1200
0e1c8     13 13 02 F6 | 	mov	arg01, local01
0e1cc     88 F2 BF FD | 	call	#_convertstring
0e1d0     FD 26 02 F6 | 	mov	local01, result1
0e1d4     1F 2A 06 F6 | 	mov	local03, #31
0e1d8                 | LR__1200
0e1d8                 | ' if t1.result_type=result_string then
0e1d8     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e1dc     EC 01 90 5D |  if_ne	jmp	#LR__1204
0e1e0     13 2D 02 F6 | 	mov	local04, local01
0e1e4                 | '   filename=t1.result.sresult
0e1e4                 | '   if left$(filename,1)="/" then 
0e1e4     16 13 02 F6 | 	mov	arg01, local04
0e1e8     01 14 06 F6 | 	mov	arg02, #1
0e1ec     A4 9D B1 FD | 	call	#__system__Left_S
0e1f0     FD 12 02 F6 | 	mov	arg01, result1
0e1f4     B0 01 00 FF 
0e1f8     B8 15 06 F6 | 	mov	arg02, ##@LR__5814
0e1fc     40 7D B1 FD | 	call	#__system___string_cmp
0e200     00 FA 0D F2 | 	cmp	result1, #0 wz
0e204     16 2F 02 A6 |  if_e	mov	local05, local04
0e208     14 00 90 AD |  if_e	jmp	#LR__1201
0e20c     B0 01 00 FF 
0e210     BA 13 06 F6 | 	mov	arg01, ##@LR__5815
0e214     16 15 02 F6 | 	mov	arg02, local04
0e218     58 7D B1 FD | 	call	#__system___string_concat
0e21c     FD 2E 02 F6 | 	mov	local05, result1
0e220                 | LR__1201
0e220                 | '   open fullfilename for input as #9
0e220     09 12 06 F6 | 	mov	arg01, #9
0e224     17 15 02 F6 | 	mov	arg02, local05
0e228     00 16 06 F6 | 	mov	arg03, #0
0e22c     EC 88 B1 FD | 	call	#__system___basic_open_string
0e230     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e234     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e238     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e23c     FD 30 0A F6 | 	mov	local06, result1 wz
0e240                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e240     8C 00 90 AD |  if_e	jmp	#LR__1202
0e244     00 12 06 F6 | 	mov	arg01, #0
0e248     F4 D9 B1 FD | 	call	#__system___getiolock_0602
0e24c     FD 12 02 F6 | 	mov	arg01, result1
0e250     C4 7C B1 FD | 	call	#__system___lockmem
0e254     B0 01 00 FF 
0e258     C3 15 06 F6 | 	mov	arg02, ##@LR__5816
0e25c     00 12 06 F6 | 	mov	arg01, #0
0e260     00 16 06 F6 | 	mov	arg03, #0
0e264     A4 89 B1 FD | 	call	#__system___basic_print_string
0e268     00 12 06 F6 | 	mov	arg01, #0
0e26c     18 15 02 F6 | 	mov	arg02, local06
0e270     00 16 06 F6 | 	mov	arg03, #0
0e274     0A 18 06 F6 | 	mov	arg04, #10
0e278     D4 89 B1 FD | 	call	#__system___basic_print_integer
0e27c     B0 01 00 FF 
0e280     D1 15 06 F6 | 	mov	arg02, ##@LR__5817
0e284     00 12 06 F6 | 	mov	arg01, #0
0e288     00 16 06 F6 | 	mov	arg03, #0
0e28c     7C 89 B1 FD | 	call	#__system___basic_print_string
0e290     18 13 02 F6 | 	mov	arg01, local06
0e294     0C A6 B1 FD | 	call	#__system___strerror
0e298     FD 14 02 F6 | 	mov	arg02, result1
0e29c     00 12 06 F6 | 	mov	arg01, #0
0e2a0     00 16 06 F6 | 	mov	arg03, #0
0e2a4     64 89 B1 FD | 	call	#__system___basic_print_string
0e2a8     00 12 06 F6 | 	mov	arg01, #0
0e2ac     0A 14 06 F6 | 	mov	arg02, #10
0e2b0     00 16 06 F6 | 	mov	arg03, #0
0e2b4     FC 88 B1 FD | 	call	#__system___basic_print_char
0e2b8     00 12 06 F6 | 	mov	arg01, #0
0e2bc     80 D9 B1 FD | 	call	#__system___getiolock_0602
0e2c0     FD 00 68 FC | 	wrlong	#0, result1
0e2c4     09 12 06 F6 | 	mov	arg01, #9
0e2c8     A4 CF B1 FD | 	call	#__system__close
0e2cc     FC 00 90 FD | 	jmp	#LR__1205
0e2d0                 | LR__1202
0e2d0     01 32 06 F6 | 	mov	local07, #1
0e2d4     00 34 06 F6 | 	mov	local08, #0
0e2d8                 | '   do
0e2d8                 | LR__1203
0e2d8                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e2d8     4E 00 00 FF 
0e2dc     B4 E4 05 F1 | 	add	objptr, ##40116
0e2e0     F2 16 02 F6 | 	mov	arg03, objptr
0e2e4     4E 00 00 FF 
0e2e8     B4 E4 85 F1 | 	sub	objptr, ##40116
0e2ec     09 12 06 F6 | 	mov	arg01, #9
0e2f0     19 15 02 F6 | 	mov	arg02, local07
0e2f4     0A 18 C6 F9 | 	decod	arg04, #10
0e2f8     01 1A 06 F6 | 	mov	arg05, #1
0e2fc     88 8A B1 FD | 	call	#__system___basic_get
0e300     FD 30 02 F6 | 	mov	local06, result1
0e304     FD 32 02 F1 | 	add	local07, result1
0e308     4E 00 00 FF 
0e30c     B4 E4 05 F1 | 	add	objptr, ##40116
0e310     F2 12 02 F6 | 	mov	arg01, objptr
0e314     1A 15 02 F6 | 	mov	arg02, local08
0e318     0A 16 C6 F9 | 	decod	arg03, #10
0e31c     42 00 00 FF 
0e320     E8 E5 85 F1 | 	sub	objptr, ##34280
0e324     04 70 B1 FD | 	call	#_psram_spin2_write
0e328     0B 00 00 FF 
0e32c     CC E4 85 F1 | 	sub	objptr, ##5836
0e330     18 35 02 F1 | 	add	local08, local06
0e334     02 00 00 FF 
0e338     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e33c     E0 03 00 AF 
0e340     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e344     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1203
0e348     36 00 00 FF 
0e34c     FC E5 05 F1 | 	add	objptr, ##28156
0e350     F2 12 02 FB | 	rdlong	arg01, objptr
0e354     03 12 62 FD | 	cogstop	arg01
0e358     04 E4 05 F1 | 	add	objptr, #4
0e35c     F2 12 02 FB | 	rdlong	arg01, objptr
0e360     03 12 62 FD | 	cogstop	arg01
0e364     04 E4 05 F1 | 	add	objptr, #4
0e368     F2 12 02 FB | 	rdlong	arg01, objptr
0e36c     03 12 62 FD | 	cogstop	arg01
0e370     19 00 00 FF 
0e374     3C E5 05 F1 | 	add	objptr, ##13116
0e378     F2 12 02 FB | 	rdlong	arg01, objptr
0e37c     03 12 62 FD | 	cogstop	arg01
0e380     18 00 00 FF 
0e384     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e388     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e38c     18 00 00 FF 
0e390     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e394     19 00 00 FF 
0e398     34 E5 85 F1 | 	sub	objptr, ##13108
0e39c     1E 34 06 F6 | 	mov	local08, #30
0e3a0     28 E4 61 FD | 	setq	objptr
0e3a4     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e3a8     01 34 66 C6 |  if_b	neg	local08, #1
0e3ac     1B 00 00 FF 
0e3b0     0C E5 05 F1 | 	add	objptr, ##14092
0e3b4     F2 34 62 FC | 	wrlong	local08, objptr
0e3b8     52 00 00 FF 
0e3bc     18 E5 85 F1 | 	sub	objptr, ##42264
0e3c0     00 12 06 F6 | 	mov	arg01, #0
0e3c4     01 12 62 FD | 	cogid	arg01
0e3c8     03 12 62 FD | 	cogstop	arg01
0e3cc                 | LR__1204
0e3cc                 | LR__1205
0e3cc     A7 F0 03 F6 | 	mov	ptra, fp
0e3d0     B2 00 A0 FD | 	call	#popregs_
0e3d4                 | _do_brun_ret
0e3d4     2D 00 64 FD | 	ret
0e3d8                 | 
0e3d8                 | ' 
0e3d8                 | ' '-------------------- cd
0e3d8                 | ' 
0e3d8                 | ' sub do_cd
0e3d8                 | _do_cd
0e3d8     06 4A 05 F6 | 	mov	COUNT_, #6
0e3dc     A8 00 A0 FD | 	call	#pushregs_
0e3e0     B0 01 00 FF 
0e3e4     D4 13 06 F6 | 	mov	arg01, ##@LR__5818
0e3e8     31 14 06 F6 | 	mov	arg02, #49
0e3ec     88 D9 B1 FD | 	call	#__system___basic_dir
0e3f0     EC EE BF FD | 	call	#_pop
0e3f4     FE 18 02 F6 | 	mov	arg04, result2
0e3f8     FF 16 02 F6 | 	mov	arg03, result3
0e3fc     FD 26 02 F6 | 	mov	local01, result1
0e400     0C 29 02 F6 | 	mov	local02, arg04
0e404     0B 2B 02 F6 | 	mov	local03, arg03
0e408                 | ' t1=pop()
0e408                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e408     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e40c     10 00 90 5D |  if_ne	jmp	#LR__1210
0e410     13 13 02 F6 | 	mov	arg01, local01
0e414     40 F0 BF FD | 	call	#_convertstring
0e418     FD 26 02 F6 | 	mov	local01, result1
0e41c     1F 2A 06 F6 | 	mov	local03, #31
0e420                 | LR__1210
0e420                 | ' if t1.result_type<>result_string then printerror(15): return
0e420     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e424     10 00 90 AD |  if_e	jmp	#LR__1211
0e428     0F 12 06 F6 | 	mov	arg01, #15
0e42c     00 14 06 F6 | 	mov	arg02, #0
0e430     F8 40 B1 FD | 	call	#_printerror
0e434     48 05 90 FD | 	jmp	#LR__1229
0e438                 | LR__1211
0e438     13 2D 02 F6 | 	mov	local04, local01
0e43c                 | ' newdir$=t1.result.sresult
0e43c                 | ' if newdir$=".." then 
0e43c     B0 01 00 FF 
0e440     D6 15 06 F6 | 	mov	arg02, ##@LR__5819
0e444     16 13 02 F6 | 	mov	arg01, local04
0e448     F4 7A B1 FD | 	call	#__system___string_cmp
0e44c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e450     C4 01 90 5D |  if_ne	jmp	#LR__1218
0e454     4A 00 00 FF 
0e458     94 E4 05 F1 | 	add	objptr, ##38036
0e45c     F2 12 02 FB | 	rdlong	arg01, objptr
0e460     4A 00 00 FF 
0e464     94 E4 85 F1 | 	sub	objptr, ##38036
0e468     09 2F 02 F6 | 	mov	local05, arg01
0e46c     97 06 48 FB | 	callpa	#(@LR__1213-@LR__1212)>>2,fcache_load_ptr_
0e470                 | LR__1212
0e470     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e474     01 2E 06 51 |  if_ne	add	local05, #1
0e478     F4 FF 9F 5D |  if_ne	jmp	#LR__1212
0e47c                 | LR__1213
0e47c     17 13 C2 F2 | 	subr	arg01, local05
0e480     4A 00 00 FF 
0e484     94 E4 05 F1 | 	add	objptr, ##38036
0e488     F2 14 02 FB | 	rdlong	arg02, objptr
0e48c     4A 00 00 FF 
0e490     94 E4 85 F1 | 	sub	objptr, ##38036
0e494     B0 01 00 FF 
0e498     D9 17 06 F6 | 	mov	arg03, ##@LR__5820
0e49c     40 A1 B1 FD | 	call	#__system__InstrRev
0e4a0     FD 2C 02 F6 | 	mov	local04, result1
0e4a4                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e4a4     02 2C 56 F2 | 	cmps	local04, #2 wc
0e4a8     28 00 90 CD |  if_b	jmp	#LR__1214
0e4ac     4A 00 00 FF 
0e4b0     94 E4 05 F1 | 	add	objptr, ##38036
0e4b4     F2 12 02 FB | 	rdlong	arg01, objptr
0e4b8     4A 00 00 FF 
0e4bc     94 E4 85 F1 | 	sub	objptr, ##38036
0e4c0     01 2C 86 F1 | 	sub	local04, #1
0e4c4     16 15 02 F6 | 	mov	arg02, local04
0e4c8     C8 9A B1 FD | 	call	#__system__Left_S
0e4cc     FD 2C 02 F6 | 	mov	local04, result1
0e4d0     08 00 90 FD | 	jmp	#LR__1215
0e4d4                 | LR__1214
0e4d4     B0 01 00 FF 
0e4d8     DB 2D 06 F6 | 	mov	local04, ##@LR__5821
0e4dc                 | LR__1215
0e4dc     16 13 02 F6 | 	mov	arg01, local04
0e4e0     C0 80 B1 FD | 	call	#__system___chdir
0e4e4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e4e8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e4ec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e4f0     FD 30 0A F6 | 	mov	local06, result1 wz
0e4f4                 | '   chdir newdir$
0e4f4                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e4f4     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e4f8     A4 00 90 AD |  if_e	jmp	#LR__1216
0e4fc     00 12 06 F6 | 	mov	arg01, #0
0e500     3C D7 B1 FD | 	call	#__system___getiolock_0602
0e504     FD 12 02 F6 | 	mov	arg01, result1
0e508     0C 7A B1 FD | 	call	#__system___lockmem
0e50c     B0 01 00 FF 
0e510     DD 15 06 F6 | 	mov	arg02, ##@LR__5822
0e514     00 12 06 F6 | 	mov	arg01, #0
0e518     00 16 06 F6 | 	mov	arg03, #0
0e51c     EC 86 B1 FD | 	call	#__system___basic_print_string
0e520     00 12 06 F6 | 	mov	arg01, #0
0e524     18 15 02 F6 | 	mov	arg02, local06
0e528     00 16 06 F6 | 	mov	arg03, #0
0e52c     0A 18 06 F6 | 	mov	arg04, #10
0e530     1C 87 B1 FD | 	call	#__system___basic_print_integer
0e534     B0 01 00 FF 
0e538     EB 15 06 F6 | 	mov	arg02, ##@LR__5823
0e53c     00 12 06 F6 | 	mov	arg01, #0
0e540     00 16 06 F6 | 	mov	arg03, #0
0e544     C4 86 B1 FD | 	call	#__system___basic_print_string
0e548     45 00 00 FF 
0e54c     50 E5 05 F1 | 	add	objptr, ##35664
0e550     F2 14 02 FB | 	rdlong	arg02, objptr
0e554     45 00 00 FF 
0e558     50 E5 85 F1 | 	sub	objptr, ##35664
0e55c     00 12 06 F6 | 	mov	arg01, #0
0e560     00 16 06 F6 | 	mov	arg03, #0
0e564     A4 86 B1 FD | 	call	#__system___basic_print_string
0e568     00 12 06 F6 | 	mov	arg01, #0
0e56c     0A 14 06 F6 | 	mov	arg02, #10
0e570     00 16 06 F6 | 	mov	arg03, #0
0e574     3C 86 B1 FD | 	call	#__system___basic_print_char
0e578     00 12 06 F6 | 	mov	arg01, #0
0e57c     C0 D6 B1 FD | 	call	#__system___getiolock_0602
0e580     FD 00 68 FC | 	wrlong	#0, result1
0e584     4A 00 00 FF 
0e588     94 E4 05 F1 | 	add	objptr, ##38036
0e58c     F2 12 02 FB | 	rdlong	arg01, objptr
0e590     4A 00 00 FF 
0e594     94 E4 85 F1 | 	sub	objptr, ##38036
0e598     08 80 B1 FD | 	call	#__system___chdir
0e59c     14 00 90 FD | 	jmp	#LR__1217
0e5a0                 | LR__1216
0e5a0     4A 00 00 FF 
0e5a4     94 E4 05 F1 | 	add	objptr, ##38036
0e5a8     F2 2C 62 FC | 	wrlong	local04, objptr
0e5ac     4A 00 00 FF 
0e5b0     94 E4 85 F1 | 	sub	objptr, ##38036
0e5b4                 | LR__1217
0e5b4                 | '   print "Current directory: ";currentdir$
0e5b4     00 12 06 F6 | 	mov	arg01, #0
0e5b8     84 D6 B1 FD | 	call	#__system___getiolock_0602
0e5bc     FD 12 02 F6 | 	mov	arg01, result1
0e5c0     54 79 B1 FD | 	call	#__system___lockmem
0e5c4     B0 01 00 FF 
0e5c8     EE 15 06 F6 | 	mov	arg02, ##@LR__5824
0e5cc     00 12 06 F6 | 	mov	arg01, #0
0e5d0     00 16 06 F6 | 	mov	arg03, #0
0e5d4     34 86 B1 FD | 	call	#__system___basic_print_string
0e5d8     4A 00 00 FF 
0e5dc     94 E4 05 F1 | 	add	objptr, ##38036
0e5e0     F2 14 02 FB | 	rdlong	arg02, objptr
0e5e4     4A 00 00 FF 
0e5e8     94 E4 85 F1 | 	sub	objptr, ##38036
0e5ec     00 12 06 F6 | 	mov	arg01, #0
0e5f0     00 16 06 F6 | 	mov	arg03, #0
0e5f4     14 86 B1 FD | 	call	#__system___basic_print_string
0e5f8     00 12 06 F6 | 	mov	arg01, #0
0e5fc     0A 14 06 F6 | 	mov	arg02, #10
0e600     00 16 06 F6 | 	mov	arg03, #0
0e604     AC 85 B1 FD | 	call	#__system___basic_print_char
0e608     00 12 06 F6 | 	mov	arg01, #0
0e60c     30 D6 B1 FD | 	call	#__system___getiolock_0602
0e610     FD 00 68 FC | 	wrlong	#0, result1
0e614                 | '   return
0e614     68 03 90 FD | 	jmp	#LR__1229
0e618                 | LR__1218
0e618                 | ' if left$(newdir$,1)="/" then 
0e618     16 13 02 F6 | 	mov	arg01, local04
0e61c     01 14 06 F6 | 	mov	arg02, #1
0e620     70 99 B1 FD | 	call	#__system__Left_S
0e624     FD 12 02 F6 | 	mov	arg01, result1
0e628     B1 01 00 FF 
0e62c     02 14 06 F6 | 	mov	arg02, ##@LR__5825
0e630     0C 79 B1 FD | 	call	#__system___string_cmp
0e634     00 FA 0D F2 | 	cmp	result1, #0 wz
0e638     3C 01 90 5D |  if_ne	jmp	#LR__1221
0e63c     16 13 02 F6 | 	mov	arg01, local04
0e640     60 7F B1 FD | 	call	#__system___chdir
0e644     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e648     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e64c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e650     FD 30 0A F6 | 	mov	local06, result1 wz
0e654                 | '   chdir(newdir$)
0e654                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e654     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e658     A4 00 90 AD |  if_e	jmp	#LR__1219
0e65c     00 12 06 F6 | 	mov	arg01, #0
0e660     DC D5 B1 FD | 	call	#__system___getiolock_0602
0e664     FD 12 02 F6 | 	mov	arg01, result1
0e668     AC 78 B1 FD | 	call	#__system___lockmem
0e66c     B1 01 00 FF 
0e670     04 14 06 F6 | 	mov	arg02, ##@LR__5826
0e674     00 12 06 F6 | 	mov	arg01, #0
0e678     00 16 06 F6 | 	mov	arg03, #0
0e67c     8C 85 B1 FD | 	call	#__system___basic_print_string
0e680     00 12 06 F6 | 	mov	arg01, #0
0e684     18 15 02 F6 | 	mov	arg02, local06
0e688     00 16 06 F6 | 	mov	arg03, #0
0e68c     0A 18 06 F6 | 	mov	arg04, #10
0e690     BC 85 B1 FD | 	call	#__system___basic_print_integer
0e694     B1 01 00 FF 
0e698     12 14 06 F6 | 	mov	arg02, ##@LR__5827
0e69c     00 12 06 F6 | 	mov	arg01, #0
0e6a0     00 16 06 F6 | 	mov	arg03, #0
0e6a4     64 85 B1 FD | 	call	#__system___basic_print_string
0e6a8     45 00 00 FF 
0e6ac     50 E5 05 F1 | 	add	objptr, ##35664
0e6b0     F2 14 02 FB | 	rdlong	arg02, objptr
0e6b4     45 00 00 FF 
0e6b8     50 E5 85 F1 | 	sub	objptr, ##35664
0e6bc     00 12 06 F6 | 	mov	arg01, #0
0e6c0     00 16 06 F6 | 	mov	arg03, #0
0e6c4     44 85 B1 FD | 	call	#__system___basic_print_string
0e6c8     00 12 06 F6 | 	mov	arg01, #0
0e6cc     0A 14 06 F6 | 	mov	arg02, #10
0e6d0     00 16 06 F6 | 	mov	arg03, #0
0e6d4     DC 84 B1 FD | 	call	#__system___basic_print_char
0e6d8     00 12 06 F6 | 	mov	arg01, #0
0e6dc     60 D5 B1 FD | 	call	#__system___getiolock_0602
0e6e0     FD 00 68 FC | 	wrlong	#0, result1
0e6e4     4A 00 00 FF 
0e6e8     94 E4 05 F1 | 	add	objptr, ##38036
0e6ec     F2 12 02 FB | 	rdlong	arg01, objptr
0e6f0     4A 00 00 FF 
0e6f4     94 E4 85 F1 | 	sub	objptr, ##38036
0e6f8     A8 7E B1 FD | 	call	#__system___chdir
0e6fc     14 00 90 FD | 	jmp	#LR__1220
0e700                 | LR__1219
0e700     4A 00 00 FF 
0e704     94 E4 05 F1 | 	add	objptr, ##38036
0e708     F2 2C 62 FC | 	wrlong	local04, objptr
0e70c     4A 00 00 FF 
0e710     94 E4 85 F1 | 	sub	objptr, ##38036
0e714                 | LR__1220
0e714                 | '   print "Current directory: ";currentdir$
0e714     00 12 06 F6 | 	mov	arg01, #0
0e718     24 D5 B1 FD | 	call	#__system___getiolock_0602
0e71c     FD 12 02 F6 | 	mov	arg01, result1
0e720     F4 77 B1 FD | 	call	#__system___lockmem
0e724     B1 01 00 FF 
0e728     15 14 06 F6 | 	mov	arg02, ##@LR__5828
0e72c     00 12 06 F6 | 	mov	arg01, #0
0e730     00 16 06 F6 | 	mov	arg03, #0
0e734     D4 84 B1 FD | 	call	#__system___basic_print_string
0e738     4A 00 00 FF 
0e73c     94 E4 05 F1 | 	add	objptr, ##38036
0e740     F2 14 02 FB | 	rdlong	arg02, objptr
0e744     4A 00 00 FF 
0e748     94 E4 85 F1 | 	sub	objptr, ##38036
0e74c     00 12 06 F6 | 	mov	arg01, #0
0e750     00 16 06 F6 | 	mov	arg03, #0
0e754     B4 84 B1 FD | 	call	#__system___basic_print_string
0e758     00 12 06 F6 | 	mov	arg01, #0
0e75c     0A 14 06 F6 | 	mov	arg02, #10
0e760     00 16 06 F6 | 	mov	arg03, #0
0e764     4C 84 B1 FD | 	call	#__system___basic_print_char
0e768     00 12 06 F6 | 	mov	arg01, #0
0e76c     D0 D4 B1 FD | 	call	#__system___getiolock_0602
0e770     FD 00 68 FC | 	wrlong	#0, result1
0e774                 | '   return
0e774     08 02 90 FD | 	jmp	#LR__1229
0e778                 | LR__1221
0e778                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0e778     4A 00 00 FF 
0e77c     94 E4 05 F1 | 	add	objptr, ##38036
0e780     F2 12 02 FB | 	rdlong	arg01, objptr
0e784     4A 00 00 FF 
0e788     94 E4 85 F1 | 	sub	objptr, ##38036
0e78c     B1 01 00 FF 
0e790     29 14 06 F6 | 	mov	arg02, ##@LR__5829
0e794     A8 77 B1 FD | 	call	#__system___string_cmp
0e798     00 FA 0D F2 | 	cmp	result1, #0 wz
0e79c     34 00 90 AD |  if_e	jmp	#LR__1222
0e7a0     4A 00 00 FF 
0e7a4     94 E4 05 F1 | 	add	objptr, ##38036
0e7a8     F2 12 02 FB | 	rdlong	arg01, objptr
0e7ac     4A 00 00 FF 
0e7b0     94 E4 85 F1 | 	sub	objptr, ##38036
0e7b4     B1 01 00 FF 
0e7b8     2B 14 06 F6 | 	mov	arg02, ##@LR__5830
0e7bc     B4 77 B1 FD | 	call	#__system___string_concat
0e7c0     FD 12 02 F6 | 	mov	arg01, result1
0e7c4     16 15 02 F6 | 	mov	arg02, local04
0e7c8     A8 77 B1 FD | 	call	#__system___string_concat
0e7cc     FD 2C 02 F6 | 	mov	local04, result1
0e7d0     20 00 90 FD | 	jmp	#LR__1223
0e7d4                 | LR__1222
0e7d4     4A 00 00 FF 
0e7d8     94 E4 05 F1 | 	add	objptr, ##38036
0e7dc     F2 12 02 FB | 	rdlong	arg01, objptr
0e7e0     4A 00 00 FF 
0e7e4     94 E4 85 F1 | 	sub	objptr, ##38036
0e7e8     16 15 02 F6 | 	mov	arg02, local04
0e7ec     84 77 B1 FD | 	call	#__system___string_concat
0e7f0     FD 2C 02 F6 | 	mov	local04, result1
0e7f4                 | LR__1223
0e7f4                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0e7f4     16 13 02 F6 | 	mov	arg01, local04
0e7f8     01 14 06 F6 | 	mov	arg02, #1
0e7fc     1C 98 B1 FD | 	call	#__system__Right_S
0e800     FD 12 02 F6 | 	mov	arg01, result1
0e804     B1 01 00 FF 
0e808     2D 14 06 F6 | 	mov	arg02, ##@LR__5831
0e80c     30 77 B1 FD | 	call	#__system___string_cmp
0e810     00 FA 0D F2 | 	cmp	result1, #0 wz
0e814     30 00 90 5D |  if_ne	jmp	#LR__1226
0e818     16 13 02 F6 | 	mov	arg01, local04
0e81c     09 2F 02 F6 | 	mov	local05, arg01
0e820     97 06 48 FB | 	callpa	#(@LR__1225-@LR__1224)>>2,fcache_load_ptr_
0e824                 | LR__1224
0e824     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e828     01 2E 06 51 |  if_ne	add	local05, #1
0e82c     F4 FF 9F 5D |  if_ne	jmp	#LR__1224
0e830                 | LR__1225
0e830     09 2F 82 F1 | 	sub	local05, arg01
0e834     17 15 02 F6 | 	mov	arg02, local05
0e838     01 14 86 F1 | 	sub	arg02, #1
0e83c     16 13 02 F6 | 	mov	arg01, local04
0e840     50 97 B1 FD | 	call	#__system__Left_S
0e844     FD 2C 02 F6 | 	mov	local04, result1
0e848                 | LR__1226
0e848     16 13 02 F6 | 	mov	arg01, local04
0e84c     54 7D B1 FD | 	call	#__system___chdir
0e850     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e854     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e858     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e85c     FD 30 0A F6 | 	mov	local06, result1 wz
0e860                 | '   chdir(newdir$)
0e860                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e860     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e864     A4 00 90 AD |  if_e	jmp	#LR__1227
0e868     00 12 06 F6 | 	mov	arg01, #0
0e86c     D0 D3 B1 FD | 	call	#__system___getiolock_0602
0e870     FD 12 02 F6 | 	mov	arg01, result1
0e874     A0 76 B1 FD | 	call	#__system___lockmem
0e878     B1 01 00 FF 
0e87c     2F 14 06 F6 | 	mov	arg02, ##@LR__5832
0e880     00 12 06 F6 | 	mov	arg01, #0
0e884     00 16 06 F6 | 	mov	arg03, #0
0e888     80 83 B1 FD | 	call	#__system___basic_print_string
0e88c     00 12 06 F6 | 	mov	arg01, #0
0e890     18 15 02 F6 | 	mov	arg02, local06
0e894     00 16 06 F6 | 	mov	arg03, #0
0e898     0A 18 06 F6 | 	mov	arg04, #10
0e89c     B0 83 B1 FD | 	call	#__system___basic_print_integer
0e8a0     B1 01 00 FF 
0e8a4     3D 14 06 F6 | 	mov	arg02, ##@LR__5833
0e8a8     00 12 06 F6 | 	mov	arg01, #0
0e8ac     00 16 06 F6 | 	mov	arg03, #0
0e8b0     58 83 B1 FD | 	call	#__system___basic_print_string
0e8b4     45 00 00 FF 
0e8b8     50 E5 05 F1 | 	add	objptr, ##35664
0e8bc     F2 14 02 FB | 	rdlong	arg02, objptr
0e8c0     45 00 00 FF 
0e8c4     50 E5 85 F1 | 	sub	objptr, ##35664
0e8c8     00 12 06 F6 | 	mov	arg01, #0
0e8cc     00 16 06 F6 | 	mov	arg03, #0
0e8d0     38 83 B1 FD | 	call	#__system___basic_print_string
0e8d4     00 12 06 F6 | 	mov	arg01, #0
0e8d8     0A 14 06 F6 | 	mov	arg02, #10
0e8dc     00 16 06 F6 | 	mov	arg03, #0
0e8e0     D0 82 B1 FD | 	call	#__system___basic_print_char
0e8e4     00 12 06 F6 | 	mov	arg01, #0
0e8e8     54 D3 B1 FD | 	call	#__system___getiolock_0602
0e8ec     FD 00 68 FC | 	wrlong	#0, result1
0e8f0     4A 00 00 FF 
0e8f4     94 E4 05 F1 | 	add	objptr, ##38036
0e8f8     F2 12 02 FB | 	rdlong	arg01, objptr
0e8fc     4A 00 00 FF 
0e900     94 E4 85 F1 | 	sub	objptr, ##38036
0e904     9C 7C B1 FD | 	call	#__system___chdir
0e908     14 00 90 FD | 	jmp	#LR__1228
0e90c                 | LR__1227
0e90c     4A 00 00 FF 
0e910     94 E4 05 F1 | 	add	objptr, ##38036
0e914     F2 2C 62 FC | 	wrlong	local04, objptr
0e918     4A 00 00 FF 
0e91c     94 E4 85 F1 | 	sub	objptr, ##38036
0e920                 | LR__1228
0e920                 | '   print "Current directory: ";currentdir$
0e920     00 12 06 F6 | 	mov	arg01, #0
0e924     18 D3 B1 FD | 	call	#__system___getiolock_0602
0e928     FD 12 02 F6 | 	mov	arg01, result1
0e92c     E8 75 B1 FD | 	call	#__system___lockmem
0e930     B1 01 00 FF 
0e934     40 14 06 F6 | 	mov	arg02, ##@LR__5834
0e938     00 12 06 F6 | 	mov	arg01, #0
0e93c     00 16 06 F6 | 	mov	arg03, #0
0e940     C8 82 B1 FD | 	call	#__system___basic_print_string
0e944     4A 00 00 FF 
0e948     94 E4 05 F1 | 	add	objptr, ##38036
0e94c     F2 14 02 FB | 	rdlong	arg02, objptr
0e950     4A 00 00 FF 
0e954     94 E4 85 F1 | 	sub	objptr, ##38036
0e958     00 12 06 F6 | 	mov	arg01, #0
0e95c     00 16 06 F6 | 	mov	arg03, #0
0e960     A8 82 B1 FD | 	call	#__system___basic_print_string
0e964     00 12 06 F6 | 	mov	arg01, #0
0e968     0A 14 06 F6 | 	mov	arg02, #10
0e96c     00 16 06 F6 | 	mov	arg03, #0
0e970     40 82 B1 FD | 	call	#__system___basic_print_char
0e974     00 12 06 F6 | 	mov	arg01, #0
0e978     C4 D2 B1 FD | 	call	#__system___getiolock_0602
0e97c     FD 00 68 FC | 	wrlong	#0, result1
0e980                 | LR__1229
0e980     A7 F0 03 F6 | 	mov	ptra, fp
0e984     B2 00 A0 FD | 	call	#popregs_
0e988                 | _do_cd_ret
0e988     2D 00 64 FD | 	ret
0e98c                 | 
0e98c                 | ' 
0e98c                 | ' '-------------------- changefreq
0e98c                 | ' 
0e98c                 | ' sub do_changefreq
0e98c                 | _do_changefreq
0e98c     04 4A 05 F6 | 	mov	COUNT_, #4
0e990     A8 00 A0 FD | 	call	#pushregs_
0e994     28 F0 07 F1 | 	add	ptra, #40
0e998     44 E9 BF FD | 	call	#_pop
0e99c     FF 14 02 F6 | 	mov	arg02, result3
0e9a0     A7 FA 61 FC | 	wrlong	result1, fp
0e9a4     04 4E 05 F1 | 	add	fp, #4
0e9a8     A7 FC 61 FC | 	wrlong	result2, fp
0e9ac     04 4E 05 F1 | 	add	fp, #4
0e9b0     A7 14 62 FC | 	wrlong	arg02, fp
0e9b4     08 4E 85 F1 | 	sub	fp, #8
0e9b8     A7 12 02 F6 | 	mov	arg01, fp
0e9bc     C0 EB BF FD | 	call	#_converttofloat
0e9c0     24 4E 05 F1 | 	add	fp, #36
0e9c4     A7 FA 61 FC | 	wrlong	result1, fp
0e9c8     24 4E 85 F1 | 	sub	fp, #36
0e9cc     FD 14 02 F6 | 	mov	arg02, result1
0e9d0     FC 16 20 FF 
0e9d4     54 12 06 F6 | 	mov	arg01, ##1076754516
0e9d8     84 B3 B1 FD | 	call	#__system____builtin_logbase
0e9dc     FD 26 02 F6 | 	mov	local01, result1
0e9e0     1E 14 C6 F9 | 	decod	arg02, #30
0e9e4     FC 16 20 FF 
0e9e8     54 12 06 F6 | 	mov	arg01, ##1076754516
0e9ec     70 B3 B1 FD | 	call	#__system____builtin_logbase
0e9f0     FD 14 02 F6 | 	mov	arg02, result1
0e9f4     13 13 02 F6 | 	mov	arg01, local01
0e9f8     98 A5 B1 FD | 	call	#__system___float_div
0e9fc     FD 12 02 F6 | 	mov	arg01, result1
0ea00     00 14 06 F6 | 	mov	arg02, #0
0ea04     50 A8 B1 FD | 	call	#__system___float_tointeger
0ea08     10 4E 05 F1 | 	add	fp, #16
0ea0c     A7 FA 61 FC | 	wrlong	result1, fp
0ea10     1E 26 C6 F9 | 	decod	local01, #30
0ea14     FD 12 02 F6 | 	mov	arg01, result1
0ea18     10 4E 85 F1 | 	sub	fp, #16
0ea1c     05 12 06 F1 | 	add	arg01, #5
0ea20     09 13 52 F6 | 	abs	arg01, arg01 wc
0ea24     1F 28 C6 C9 |  if_b	decod	local02, #31
0ea28     00 28 06 36 |  if_ae	mov	local02, #0
0ea2c     5C 9F B1 FD | 	call	#__system___float_fromuns
0ea30     14 FB 61 F5 | 	xor	result1, local02
0ea34     FD 14 02 F6 | 	mov	arg02, result1
0ea38     13 13 02 F6 | 	mov	arg01, local01
0ea3c     58 B2 B1 FD | 	call	#__system____builtin_powf
0ea40     FD 12 02 F6 | 	mov	arg01, result1
0ea44     01 14 06 F6 | 	mov	arg02, #1
0ea48     0C A8 B1 FD | 	call	#__system___float_tointeger
0ea4c     14 4E 05 F1 | 	add	fp, #20
0ea50     A7 FA 61 FC | 	wrlong	result1, fp
0ea54                 | ' skip=round(2^(lfreq+5))
0ea54                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0ea54     14 4E 85 F1 | 	sub	fp, #20
0ea58     40 00 00 FF 
0ea5c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ea60     30 00 90 CD |  if_b	jmp	#LR__1230
0ea64     14 4E 05 F1 | 	add	fp, #20
0ea68     A7 26 02 FB | 	rdlong	local01, fp
0ea6c     13 27 52 F6 | 	abs	local01, local01 wc
0ea70     0F 26 46 F0 | 	shr	local01, #15
0ea74     13 27 82 F6 | 	negc	local01, local01
0ea78     04 4E 05 F1 | 	add	fp, #4
0ea7c     A7 26 62 FC | 	wrlong	local01, fp
0ea80     04 4E 85 F1 | 	sub	fp, #4
0ea84     40 00 80 FF 
0ea88     A7 00 68 FC | 	wrlong	##32768, fp
0ea8c     14 4E 85 F1 | 	sub	fp, #20
0ea90     0C 00 90 FD | 	jmp	#LR__1231
0ea94                 | LR__1230
0ea94     18 4E 05 F1 | 	add	fp, #24
0ea98     A7 02 68 FC | 	wrlong	#1, fp
0ea9c     18 4E 85 F1 | 	sub	fp, #24
0eaa0                 | LR__1231
0eaa0     24 4E 05 F1 | 	add	fp, #36
0eaa4     A7 14 02 FB | 	rdlong	arg02, fp
0eaa8     24 4E 85 F1 | 	sub	fp, #36
0eaac     3E 2C 25 FF 
0eab0     3C 12 06 F6 | 	mov	arg01, ##1247312956
0eab4     DC A4 B1 FD | 	call	#__system___float_div
0eab8     FD 26 02 F6 | 	mov	local01, result1
0eabc     18 4E 05 F1 | 	add	fp, #24
0eac0     A7 12 02 FB | 	rdlong	arg01, fp
0eac4     18 4E 85 F1 | 	sub	fp, #24
0eac8     09 13 52 F6 | 	abs	arg01, arg01 wc
0eacc     1F 28 C6 C9 |  if_b	decod	local02, #31
0ead0     00 28 06 36 |  if_ae	mov	local02, #0
0ead4     B4 9E B1 FD | 	call	#__system___float_fromuns
0ead8     14 FB 61 F5 | 	xor	result1, local02
0eadc     FD 2A 02 F6 | 	mov	local03, result1
0eae0     1E 2C C6 F9 | 	decod	local04, #30
0eae4     0D 12 06 F6 | 	mov	arg01, #13
0eae8     10 4E 05 F1 | 	add	fp, #16
0eaec     A7 14 02 FB | 	rdlong	arg02, fp
0eaf0     10 4E 85 F1 | 	sub	fp, #16
0eaf4     0A 13 82 F1 | 	sub	arg01, arg02
0eaf8     09 13 52 F6 | 	abs	arg01, arg01 wc
0eafc     1F 28 C6 C9 |  if_b	decod	local02, #31
0eb00     00 28 06 36 |  if_ae	mov	local02, #0
0eb04     84 9E B1 FD | 	call	#__system___float_fromuns
0eb08     14 FB 61 F5 | 	xor	result1, local02
0eb0c     FD 14 02 F6 | 	mov	arg02, result1
0eb10     16 13 02 F6 | 	mov	arg01, local04
0eb14     80 B1 B1 FD | 	call	#__system____builtin_powf
0eb18     FD 14 02 F6 | 	mov	arg02, result1
0eb1c     15 13 02 F6 | 	mov	arg01, local03
0eb20     6C A2 B1 FD | 	call	#__system___float_mul
0eb24     FD 14 02 F6 | 	mov	arg02, result1
0eb28     13 13 02 F6 | 	mov	arg01, local01
0eb2c     64 A4 B1 FD | 	call	#__system___float_div
0eb30     FD 12 02 F6 | 	mov	arg01, result1
0eb34     01 14 06 F6 | 	mov	arg02, #1
0eb38     1C A7 B1 FD | 	call	#__system___float_tointeger
0eb3c     FD 26 02 F6 | 	mov	local01, result1
0eb40     1C 4E 05 F1 | 	add	fp, #28
0eb44     A7 26 62 FC | 	wrlong	local01, fp
0eb48     1C 4E 85 F1 | 	sub	fp, #28
0eb4c     90 E7 BF FD | 	call	#_pop
0eb50     FF 2C 02 F6 | 	mov	local04, result3
0eb54     A7 FA 61 FC | 	wrlong	result1, fp
0eb58     04 4E 05 F1 | 	add	fp, #4
0eb5c     A7 FC 61 FC | 	wrlong	result2, fp
0eb60     04 4E 05 F1 | 	add	fp, #4
0eb64     A7 2C 62 FC | 	wrlong	local04, fp
0eb68     08 4E 85 F1 | 	sub	fp, #8
0eb6c     A7 12 02 F6 | 	mov	arg01, fp
0eb70     50 E9 BF FD | 	call	#_converttoint
0eb74     FD 2A 52 F6 | 	abs	local03, result1 wc
0eb78     07 2A 06 F5 | 	and	local03, #7
0eb7c     15 2B 82 F6 | 	negc	local03, local03
0eb80     0C 4E 05 F1 | 	add	fp, #12
0eb84     A7 2A 62 FC | 	wrlong	local03, fp
0eb88     08 4E 05 F1 | 	add	fp, #8
0eb8c     A7 26 02 FB | 	rdlong	local01, fp
0eb90     10 26 66 F0 | 	shl	local01, #16
0eb94     08 4E 05 F1 | 	add	fp, #8
0eb98     A7 2C 02 FB | 	rdlong	local04, fp
0eb9c     16 27 02 F1 | 	add	local01, local04
0eba0     04 4E 05 F1 | 	add	fp, #4
0eba4     A7 26 62 FC | 	wrlong	local01, fp
0eba8                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0eba8     37 00 00 FF 
0ebac     10 E4 05 F1 | 	add	objptr, ##28176
0ebb0     F2 12 02 FB | 	rdlong	arg01, objptr
0ebb4     37 00 00 FF 
0ebb8     10 E4 85 F1 | 	sub	objptr, ##28176
0ebbc     14 4E 85 F1 | 	sub	fp, #20
0ebc0     A7 2C 02 FB | 	rdlong	local04, fp
0ebc4     0C 4E 85 F1 | 	sub	fp, #12
0ebc8     06 2C 66 F0 | 	shl	local04, #6
0ebcc     16 13 02 F1 | 	add	arg01, local04
0ebd0     08 12 06 F1 | 	add	arg01, #8
0ebd4     09 FB 01 FB | 	rdlong	result1, arg01
0ebd8     1B FA 2D F4 | 	testbn	result1, #27 wz
0ebdc     3C 00 90 5D |  if_ne	jmp	#LR__1232
0ebe0     37 00 00 FF 
0ebe4     10 E4 05 F1 | 	add	objptr, ##28176
0ebe8     F2 12 02 FB | 	rdlong	arg01, objptr
0ebec     37 00 00 FF 
0ebf0     10 E4 85 F1 | 	sub	objptr, ##28176
0ebf4     0C 4E 05 F1 | 	add	fp, #12
0ebf8     A7 2C 02 FB | 	rdlong	local04, fp
0ebfc     06 2C 66 F0 | 	shl	local04, #6
0ec00     16 13 02 F1 | 	add	arg01, local04
0ec04     18 12 06 F1 | 	add	arg01, #24
0ec08     14 4E 05 F1 | 	add	fp, #20
0ec0c     A7 14 02 FB | 	rdlong	arg02, fp
0ec10     20 4E 85 F1 | 	sub	fp, #32
0ec14     09 15 62 FC | 	wrlong	arg02, arg01
0ec18     80 00 90 FD | 	jmp	#LR__1233
0ec1c                 | LR__1232
0ec1c     37 00 00 FF 
0ec20     10 E4 05 F1 | 	add	objptr, ##28176
0ec24     F2 26 02 FB | 	rdlong	local01, objptr
0ec28     37 00 00 FF 
0ec2c     10 E4 85 F1 | 	sub	objptr, ##28176
0ec30     0C 4E 05 F1 | 	add	fp, #12
0ec34     A7 2C 02 FB | 	rdlong	local04, fp
0ec38     06 2C 66 F0 | 	shl	local04, #6
0ec3c     16 27 02 F1 | 	add	local01, local04
0ec40     18 26 06 F1 | 	add	local01, #24
0ec44     18 4E 05 F1 | 	add	fp, #24
0ec48     A7 14 02 FB | 	rdlong	arg02, fp
0ec4c     24 4E 85 F1 | 	sub	fp, #36
0ec50     3E 2C 25 FF 
0ec54     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ec58     38 A3 B1 FD | 	call	#__system___float_div
0ec5c     FD 12 02 F6 | 	mov	arg01, result1
0ec60     01 14 06 F6 | 	mov	arg02, #1
0ec64     F0 A5 B1 FD | 	call	#__system___float_tointeger
0ec68     13 FB 51 FC | 	wrword	result1, local01
0ec6c     37 00 00 FF 
0ec70     10 E4 05 F1 | 	add	objptr, ##28176
0ec74     F2 12 02 FB | 	rdlong	arg01, objptr
0ec78     37 00 00 FF 
0ec7c     10 E4 85 F1 | 	sub	objptr, ##28176
0ec80     0C 4E 05 F1 | 	add	fp, #12
0ec84     A7 2C 02 FB | 	rdlong	local04, fp
0ec88     0C 4E 85 F1 | 	sub	fp, #12
0ec8c     06 2C 66 F0 | 	shl	local04, #6
0ec90     16 13 02 F1 | 	add	arg01, local04
0ec94     1A 12 06 F1 | 	add	arg01, #26
0ec98     09 01 5A FC | 	wrword	#256, arg01
0ec9c                 | LR__1233
0ec9c     A7 F0 03 F6 | 	mov	ptra, fp
0eca0     B2 00 A0 FD | 	call	#popregs_
0eca4                 | _do_changefreq_ret
0eca4     2D 00 64 FD | 	ret
0eca8                 | 
0eca8                 | ' 
0eca8                 | ' '-------------------- changepan
0eca8                 | ' 
0eca8                 | ' sub do_changepan
0eca8                 | _do_changepan
0eca8     01 4A 05 F6 | 	mov	COUNT_, #1
0ecac     A8 00 A0 FD | 	call	#pushregs_
0ecb0     14 F0 07 F1 | 	add	ptra, #20
0ecb4     28 E6 BF FD | 	call	#_pop
0ecb8     A7 FA 61 FC | 	wrlong	result1, fp
0ecbc     04 4E 05 F1 | 	add	fp, #4
0ecc0     A7 FC 61 FC | 	wrlong	result2, fp
0ecc4     04 4E 05 F1 | 	add	fp, #4
0ecc8     A7 FE 61 FC | 	wrlong	result3, fp
0eccc     08 4E 85 F1 | 	sub	fp, #8
0ecd0     00 00 23 FF 
0ecd4     00 26 06 F6 | 	mov	local01, ##1174405120
0ecd8     A7 12 02 F6 | 	mov	arg01, fp
0ecdc     A0 E8 BF FD | 	call	#_converttofloat
0ece0     FD 14 02 F6 | 	mov	arg02, result1
0ece4     13 13 02 F6 | 	mov	arg01, local01
0ece8     A4 A0 B1 FD | 	call	#__system___float_mul
0ecec     FD 12 02 F6 | 	mov	arg01, result1
0ecf0     01 14 06 F6 | 	mov	arg02, #1
0ecf4     60 A5 B1 FD | 	call	#__system___float_tointeger
0ecf8     0D 26 C6 F9 | 	decod	local01, #13
0ecfc     FD 26 02 F1 | 	add	local01, result1
0ed00     10 4E 05 F1 | 	add	fp, #16
0ed04     A7 26 62 FC | 	wrlong	local01, fp
0ed08                 | ' 
0ed08                 | ' t1=pop()
0ed08                 | ' pan=8192+round(8192*converttofloat(t1)) 
0ed08                 | ' if pan<0 then pan=0
0ed08     10 4E 85 F1 | 	sub	fp, #16
0ed0c     00 26 56 F2 | 	cmps	local01, #0 wc
0ed10     10 4E 05 C1 |  if_b	add	fp, #16
0ed14     A7 00 68 CC |  if_b	wrlong	#0, fp
0ed18     10 4E 85 C1 |  if_b	sub	fp, #16
0ed1c                 | ' if pan>16384 then pan=16384
0ed1c     10 4E 05 F1 | 	add	fp, #16
0ed20     A7 26 02 FB | 	rdlong	local01, fp
0ed24     10 4E 85 F1 | 	sub	fp, #16
0ed28     20 00 00 FF 
0ed2c     01 26 56 F2 | 	cmps	local01, ##16385 wc
0ed30     10 4E 05 31 |  if_ae	add	fp, #16
0ed34     20 00 80 3F 
0ed38     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0ed3c     10 4E 85 31 |  if_ae	sub	fp, #16
0ed40     9C E5 BF FD | 	call	#_pop
0ed44     FF 26 02 F6 | 	mov	local01, result3
0ed48     A7 FA 61 FC | 	wrlong	result1, fp
0ed4c     04 4E 05 F1 | 	add	fp, #4
0ed50     A7 FC 61 FC | 	wrlong	result2, fp
0ed54     04 4E 05 F1 | 	add	fp, #4
0ed58     A7 26 62 FC | 	wrlong	local01, fp
0ed5c     08 4E 85 F1 | 	sub	fp, #8
0ed60     A7 12 02 F6 | 	mov	arg01, fp
0ed64     5C E7 BF FD | 	call	#_converttoint
0ed68     FD 26 52 F6 | 	abs	local01, result1 wc
0ed6c     07 26 06 F5 | 	and	local01, #7
0ed70     13 27 82 F6 | 	negc	local01, local01
0ed74     0C 4E 05 F1 | 	add	fp, #12
0ed78     A7 26 62 FC | 	wrlong	local01, fp
0ed7c     37 00 00 FF 
0ed80     10 E4 05 F1 | 	add	objptr, ##28176
0ed84     F2 12 02 FB | 	rdlong	arg01, objptr
0ed88     37 00 00 FF 
0ed8c     10 E4 85 F1 | 	sub	objptr, ##28176
0ed90     06 26 66 F0 | 	shl	local01, #6
0ed94     13 13 02 F1 | 	add	arg01, local01
0ed98     16 12 06 F1 | 	add	arg01, #22
0ed9c     04 4E 05 F1 | 	add	fp, #4
0eda0     A7 14 02 FB | 	rdlong	arg02, fp
0eda4     10 4E 85 F1 | 	sub	fp, #16
0eda8     09 15 52 FC | 	wrword	arg02, arg01
0edac     A7 F0 03 F6 | 	mov	ptra, fp
0edb0     B2 00 A0 FD | 	call	#popregs_
0edb4                 | _do_changepan_ret
0edb4     2D 00 64 FD | 	ret
0edb8                 | 
0edb8                 | ' 
0edb8                 | ' '-------------------- changevol
0edb8                 | ' 
0edb8                 | ' sub do_changevol
0edb8                 | _do_changevol
0edb8     00 4A 05 F6 | 	mov	COUNT_, #0
0edbc     A8 00 A0 FD | 	call	#pushregs_
0edc0     14 F0 07 F1 | 	add	ptra, #20
0edc4     18 E5 BF FD | 	call	#_pop
0edc8     FF 14 02 F6 | 	mov	arg02, result3
0edcc     A7 FA 61 FC | 	wrlong	result1, fp
0edd0     04 4E 05 F1 | 	add	fp, #4
0edd4     A7 FC 61 FC | 	wrlong	result2, fp
0edd8     04 4E 05 F1 | 	add	fp, #4
0eddc     A7 14 62 FC | 	wrlong	arg02, fp
0ede0     08 4E 85 F1 | 	sub	fp, #8
0ede4     A7 12 02 F6 | 	mov	arg01, fp
0ede8     94 E7 BF FD | 	call	#_converttofloat
0edec     FD 12 02 F6 | 	mov	arg01, result1
0edf0     00 3D 22 FF 
0edf4     00 14 06 F6 | 	mov	arg02, ##1148846080
0edf8     94 9F B1 FD | 	call	#__system___float_mul
0edfc     FD 12 02 F6 | 	mov	arg01, result1
0ee00     01 14 06 F6 | 	mov	arg02, #1
0ee04     50 A4 B1 FD | 	call	#__system___float_tointeger
0ee08     FD 14 52 F6 | 	abs	arg02, result1 wc
0ee0c     0D 14 46 F7 | 	zerox	arg02, #13
0ee10     0A 15 82 F6 | 	negc	arg02, arg02
0ee14     10 4E 05 F1 | 	add	fp, #16
0ee18     A7 14 62 FC | 	wrlong	arg02, fp
0ee1c     10 4E 85 F1 | 	sub	fp, #16
0ee20     BC E4 BF FD | 	call	#_pop
0ee24     FF 14 02 F6 | 	mov	arg02, result3
0ee28     A7 FA 61 FC | 	wrlong	result1, fp
0ee2c     04 4E 05 F1 | 	add	fp, #4
0ee30     A7 FC 61 FC | 	wrlong	result2, fp
0ee34     04 4E 05 F1 | 	add	fp, #4
0ee38     A7 14 62 FC | 	wrlong	arg02, fp
0ee3c     08 4E 85 F1 | 	sub	fp, #8
0ee40     A7 12 02 F6 | 	mov	arg01, fp
0ee44     7C E6 BF FD | 	call	#_converttoint
0ee48     FD 14 52 F6 | 	abs	arg02, result1 wc
0ee4c     07 14 06 F5 | 	and	arg02, #7
0ee50     0A 15 82 F6 | 	negc	arg02, arg02
0ee54     0C 4E 05 F1 | 	add	fp, #12
0ee58     A7 14 62 FC | 	wrlong	arg02, fp
0ee5c     37 00 00 FF 
0ee60     10 E4 05 F1 | 	add	objptr, ##28176
0ee64     F2 12 02 FB | 	rdlong	arg01, objptr
0ee68     37 00 00 FF 
0ee6c     10 E4 85 F1 | 	sub	objptr, ##28176
0ee70     06 14 66 F0 | 	shl	arg02, #6
0ee74     0A 13 02 F1 | 	add	arg01, arg02
0ee78     14 12 06 F1 | 	add	arg01, #20
0ee7c     04 4E 05 F1 | 	add	fp, #4
0ee80     A7 14 02 FB | 	rdlong	arg02, fp
0ee84     10 4E 85 F1 | 	sub	fp, #16
0ee88     09 15 52 FC | 	wrword	arg02, arg01
0ee8c     A7 F0 03 F6 | 	mov	ptra, fp
0ee90     B2 00 A0 FD | 	call	#popregs_
0ee94                 | _do_changevol_ret
0ee94     2D 00 64 FD | 	ret
0ee98                 | 
0ee98                 | ' 
0ee98                 | ' '-------------------- changewav
0ee98                 | ' 
0ee98                 | ' sub do_changewav
0ee98                 | _do_changewav
0ee98     00 4A 05 F6 | 	mov	COUNT_, #0
0ee9c     A8 00 A0 FD | 	call	#pushregs_
0eea0     14 F0 07 F1 | 	add	ptra, #20
0eea4     38 E4 BF FD | 	call	#_pop
0eea8     FF 14 02 F6 | 	mov	arg02, result3
0eeac     A7 FA 61 FC | 	wrlong	result1, fp
0eeb0     04 4E 05 F1 | 	add	fp, #4
0eeb4     A7 FC 61 FC | 	wrlong	result2, fp
0eeb8     04 4E 05 F1 | 	add	fp, #4
0eebc     A7 14 62 FC | 	wrlong	arg02, fp
0eec0     08 4E 85 F1 | 	sub	fp, #8
0eec4     A7 12 02 F6 | 	mov	arg01, fp
0eec8     F8 E5 BF FD | 	call	#_converttoint
0eecc     10 4E 05 F1 | 	add	fp, #16
0eed0     A7 FA 61 FC | 	wrlong	result1, fp
0eed4                 | ' 
0eed4                 | ' t1=pop()
0eed4                 | ' wave=converttoint(t1)
0eed4                 | ' if wave<0 then wave=0
0eed4     FD 14 02 F6 | 	mov	arg02, result1
0eed8     10 4E 85 F1 | 	sub	fp, #16
0eedc     00 14 56 F2 | 	cmps	arg02, #0 wc
0eee0     10 4E 05 C1 |  if_b	add	fp, #16
0eee4     A7 00 68 CC |  if_b	wrlong	#0, fp
0eee8     10 4E 85 C1 |  if_b	sub	fp, #16
0eeec     F0 E3 BF FD | 	call	#_pop
0eef0     FF 14 02 F6 | 	mov	arg02, result3
0eef4     A7 FA 61 FC | 	wrlong	result1, fp
0eef8     04 4E 05 F1 | 	add	fp, #4
0eefc     A7 FC 61 FC | 	wrlong	result2, fp
0ef00     04 4E 05 F1 | 	add	fp, #4
0ef04     A7 14 62 FC | 	wrlong	arg02, fp
0ef08     08 4E 85 F1 | 	sub	fp, #8
0ef0c     A7 12 02 F6 | 	mov	arg01, fp
0ef10     B0 E5 BF FD | 	call	#_converttoint
0ef14     FD 14 52 F6 | 	abs	arg02, result1 wc
0ef18     07 14 06 F5 | 	and	arg02, #7
0ef1c     0A 15 82 F6 | 	negc	arg02, arg02
0ef20     0C 4E 05 F1 | 	add	fp, #12
0ef24     A7 14 62 FC | 	wrlong	arg02, fp
0ef28                 | ' if wave <32 then 
0ef28     04 4E 05 F1 | 	add	fp, #4
0ef2c     A7 14 02 FB | 	rdlong	arg02, fp
0ef30     10 4E 85 F1 | 	sub	fp, #16
0ef34     20 14 56 F2 | 	cmps	arg02, #32 wc
0ef38     48 00 90 3D |  if_ae	jmp	#LR__1240
0ef3c     37 00 00 FF 
0ef40     10 E4 05 F1 | 	add	objptr, ##28176
0ef44     F2 12 02 FB | 	rdlong	arg01, objptr
0ef48     37 00 00 FF 
0ef4c     10 E4 85 F1 | 	sub	objptr, ##28176
0ef50     0C 4E 05 F1 | 	add	fp, #12
0ef54     A7 14 02 FB | 	rdlong	arg02, fp
0ef58     06 14 66 F0 | 	shl	arg02, #6
0ef5c     0A 13 02 F1 | 	add	arg01, arg02
0ef60     08 12 06 F1 | 	add	arg01, #8
0ef64     04 4E 05 F1 | 	add	fp, #4
0ef68     A7 14 02 FB | 	rdlong	arg02, fp
0ef6c     10 4E 85 F1 | 	sub	fp, #16
0ef70     0B 14 66 F0 | 	shl	arg02, #11
0ef74     00 00 40 FF 
0ef78     00 14 06 F1 | 	add	arg02, ##-2147483648
0ef7c     09 15 62 FC | 	wrlong	arg02, arg01
0ef80     34 00 90 FD | 	jmp	#LR__1241
0ef84                 | LR__1240
0ef84     37 00 00 FF 
0ef88     10 E4 05 F1 | 	add	objptr, ##28176
0ef8c     F2 12 02 FB | 	rdlong	arg01, objptr
0ef90     37 00 00 FF 
0ef94     10 E4 85 F1 | 	sub	objptr, ##28176
0ef98     0C 4E 05 F1 | 	add	fp, #12
0ef9c     A7 14 02 FB | 	rdlong	arg02, fp
0efa0     0C 4E 85 F1 | 	sub	fp, #12
0efa4     06 14 66 F0 | 	shl	arg02, #6
0efa8     0A 13 02 F1 | 	add	arg01, arg02
0efac     08 12 06 F1 | 	add	arg01, #8
0efb0     00 00 C4 FF 
0efb4     09 01 68 FC | 	wrlong	##-2013265920, arg01
0efb8                 | LR__1241
0efb8     A7 F0 03 F6 | 	mov	ptra, fp
0efbc     B2 00 A0 FD | 	call	#popregs_
0efc0                 | _do_changewav_ret
0efc0     2D 00 64 FD | 	ret
0efc4                 | 
0efc4                 | ' 
0efc4                 | ' '-------------------- chr$
0efc4                 | ' 
0efc4                 | ' sub do_chr
0efc4                 | _do_chr
0efc4     01 4A 05 F6 | 	mov	COUNT_, #1
0efc8     A8 00 A0 FD | 	call	#pushregs_
0efcc     14 F0 07 F1 | 	add	ptra, #20
0efd0     4A 00 00 FF 
0efd4     80 E4 05 F1 | 	add	objptr, ##38016
0efd8     F2 26 02 FB | 	rdlong	local01, objptr
0efdc     13 17 02 F6 | 	mov	arg03, local01
0efe0     01 16 66 F0 | 	shl	arg03, #1
0efe4     13 17 02 F1 | 	add	arg03, local01
0efe8     02 16 66 F0 | 	shl	arg03, #2
0efec     03 00 00 FF 
0eff0     04 E4 85 F1 | 	sub	objptr, ##1540
0eff4     F2 16 02 F1 | 	add	arg03, objptr
0eff8     0B 17 02 FB | 	rdlong	arg03, arg03
0effc     0C 4E 05 F1 | 	add	fp, #12
0f000     A7 16 62 FC | 	wrlong	arg03, fp
0f004                 | ' 
0f004                 | ' numpar=compiledline(lineptr_e).result.uresult
0f004                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f004     0C 4E 85 F1 | 	sub	fp, #12
0f008     02 16 16 F2 | 	cmp	arg03, #2 wc
0f00c     47 00 00 FF 
0f010     7C E4 85 F1 | 	sub	objptr, ##36476
0f014     0C 4E 05 C1 |  if_b	add	fp, #12
0f018     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f01c     0C 4E 85 C1 |  if_b	sub	fp, #12
0f020     40 00 90 4D |  if_c_and_nz	jmp	#LR__1250
0f024     00 12 06 F6 | 	mov	arg01, #0
0f028     14 CC B1 FD | 	call	#__system___getiolock_0602
0f02c     FD 12 02 F6 | 	mov	arg01, result1
0f030     E4 6E B1 FD | 	call	#__system___lockmem
0f034     B1 01 00 FF 
0f038     54 14 06 F6 | 	mov	arg02, ##@LR__5835
0f03c     00 12 06 F6 | 	mov	arg01, #0
0f040     00 16 06 F6 | 	mov	arg03, #0
0f044     C4 7B B1 FD | 	call	#__system___basic_print_string
0f048     00 12 06 F6 | 	mov	arg01, #0
0f04c     F0 CB B1 FD | 	call	#__system___getiolock_0602
0f050     FD 00 68 FC | 	wrlong	#0, result1
0f054     27 12 06 F6 | 	mov	arg01, #39
0f058     00 14 06 F6 | 	mov	arg02, #0
0f05c     CC 34 B1 FD | 	call	#_printerror
0f060     54 00 90 FD | 	jmp	#LR__1251
0f064                 | LR__1250
0f064     78 E2 BF FD | 	call	#_pop
0f068     FF 26 02 F6 | 	mov	local01, result3
0f06c     A7 FA 61 FC | 	wrlong	result1, fp
0f070     04 4E 05 F1 | 	add	fp, #4
0f074     A7 FC 61 FC | 	wrlong	result2, fp
0f078     04 4E 05 F1 | 	add	fp, #4
0f07c     A7 26 62 FC | 	wrlong	local01, fp
0f080     08 4E 85 F1 | 	sub	fp, #8
0f084     A7 12 02 F6 | 	mov	arg01, fp
0f088     38 E4 BF FD | 	call	#_converttoint
0f08c     10 4E 05 F1 | 	add	fp, #16
0f090     A7 FA 61 FC | 	wrlong	result1, fp
0f094     FD 12 02 F6 | 	mov	arg01, result1
0f098     10 4E 85 F1 | 	sub	fp, #16
0f09c     B8 90 B1 FD | 	call	#__system__Chr_S
0f0a0     A7 FA 61 FC | 	wrlong	result1, fp
0f0a4     08 4E 05 F1 | 	add	fp, #8
0f0a8     A7 3E 68 FC | 	wrlong	#31, fp
0f0ac     08 4E 85 F1 | 	sub	fp, #8
0f0b0     A7 12 02 F6 | 	mov	arg01, fp
0f0b4     C0 E2 BF FD | 	call	#_push
0f0b8                 | LR__1251
0f0b8     A7 F0 03 F6 | 	mov	ptra, fp
0f0bc     B2 00 A0 FD | 	call	#popregs_
0f0c0                 | _do_chr_ret
0f0c0     2D 00 64 FD | 	ret
0f0c4                 | 
0f0c4                 | ' 
0f0c4                 | ' '-------------------- circle
0f0c4                 | ' 
0f0c4                 | ' sub do_circle
0f0c4                 | _do_circle
0f0c4     02 4A 05 F6 | 	mov	COUNT_, #2
0f0c8     A8 00 A0 FD | 	call	#pushregs_
0f0cc     24 F0 07 F1 | 	add	ptra, #36
0f0d0     0C E2 BF FD | 	call	#_pop
0f0d4     FD 18 02 F6 | 	mov	arg04, result1
0f0d8     FE 16 02 F6 | 	mov	arg03, result2
0f0dc     FF 14 02 F6 | 	mov	arg02, result3
0f0e0     18 4E 05 F1 | 	add	fp, #24
0f0e4     A7 18 62 FC | 	wrlong	arg04, fp
0f0e8     04 4E 05 F1 | 	add	fp, #4
0f0ec     A7 16 62 FC | 	wrlong	arg03, fp
0f0f0     04 4E 05 F1 | 	add	fp, #4
0f0f4     A7 14 62 FC | 	wrlong	arg02, fp
0f0f8     20 4E 85 F1 | 	sub	fp, #32
0f0fc     E0 E1 BF FD | 	call	#_pop
0f100     FD 18 02 F6 | 	mov	arg04, result1
0f104     FE 16 02 F6 | 	mov	arg03, result2
0f108     FF 26 02 F6 | 	mov	local01, result3
0f10c     0C 4E 05 F1 | 	add	fp, #12
0f110     A7 18 62 FC | 	wrlong	arg04, fp
0f114     04 4E 05 F1 | 	add	fp, #4
0f118     A7 16 62 FC | 	wrlong	arg03, fp
0f11c     04 4E 05 F1 | 	add	fp, #4
0f120     A7 26 62 FC | 	wrlong	local01, fp
0f124     14 4E 85 F1 | 	sub	fp, #20
0f128     B4 E1 BF FD | 	call	#_pop
0f12c     A7 FA 61 FC | 	wrlong	result1, fp
0f130     04 4E 05 F1 | 	add	fp, #4
0f134     A7 FC 61 FC | 	wrlong	result2, fp
0f138     04 4E 05 F1 | 	add	fp, #4
0f13c     A7 FE 61 FC | 	wrlong	result3, fp
0f140                 | ' 
0f140                 | ' t3=pop()
0f140                 | ' t2=pop()
0f140                 | ' t1=pop()
0f140                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f140     FF 18 02 F6 | 	mov	arg04, result3
0f144     08 4E 85 F1 | 	sub	fp, #8
0f148     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f14c     08 4E 05 51 |  if_ne	add	fp, #8
0f150     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f154     08 4E 85 51 |  if_ne	sub	fp, #8
0f158     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f15c     7C 00 90 5D |  if_ne	jmp	#LR__1260
0f160     14 4E 05 F1 | 	add	fp, #20
0f164     A7 26 02 FB | 	rdlong	local01, fp
0f168     14 4E 85 F1 | 	sub	fp, #20
0f16c     1C 26 0E F2 | 	cmp	local01, #28 wz
0f170     14 4E 05 51 |  if_ne	add	fp, #20
0f174     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f178     14 4E 85 51 |  if_ne	sub	fp, #20
0f17c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f180     58 00 90 5D |  if_ne	jmp	#LR__1260
0f184     20 4E 05 F1 | 	add	fp, #32
0f188     A7 26 02 FB | 	rdlong	local01, fp
0f18c     20 4E 85 F1 | 	sub	fp, #32
0f190     1C 26 0E F2 | 	cmp	local01, #28 wz
0f194     20 4E 05 51 |  if_ne	add	fp, #32
0f198     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f19c     20 4E 85 51 |  if_ne	sub	fp, #32
0f1a0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f1a4     34 00 90 5D |  if_ne	jmp	#LR__1260
0f1a8     A7 12 02 FB | 	rdlong	arg01, fp
0f1ac     0C 4E 05 F1 | 	add	fp, #12
0f1b0     A7 14 02 FB | 	rdlong	arg02, fp
0f1b4     0C 4E 05 F1 | 	add	fp, #12
0f1b8     A7 16 02 FB | 	rdlong	arg03, fp
0f1bc     18 4E 85 F1 | 	sub	fp, #24
0f1c0     37 00 00 FF 
0f1c4     28 E4 05 F1 | 	add	objptr, ##28200
0f1c8     F2 18 02 FB | 	rdlong	arg04, objptr
0f1cc     37 00 00 FF 
0f1d0     28 E4 85 F1 | 	sub	objptr, ##28200
0f1d4     28 4C B1 FD | 	call	#_hg010b_spin2_circle
0f1d8                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f1d8     54 00 90 FD | 	jmp	#LR__1261
0f1dc                 | LR__1260
0f1dc     A7 12 02 F6 | 	mov	arg01, fp
0f1e0     E0 E2 BF FD | 	call	#_converttoint
0f1e4     FD 26 02 F6 | 	mov	local01, result1
0f1e8     0C 4E 05 F1 | 	add	fp, #12
0f1ec     A7 12 02 F6 | 	mov	arg01, fp
0f1f0     0C 4E 85 F1 | 	sub	fp, #12
0f1f4     CC E2 BF FD | 	call	#_converttoint
0f1f8     FD 28 02 F6 | 	mov	local02, result1
0f1fc     18 4E 05 F1 | 	add	fp, #24
0f200     A7 12 02 F6 | 	mov	arg01, fp
0f204     18 4E 85 F1 | 	sub	fp, #24
0f208     B8 E2 BF FD | 	call	#_converttoint
0f20c     FD 16 02 F6 | 	mov	arg03, result1
0f210     37 00 00 FF 
0f214     28 E4 05 F1 | 	add	objptr, ##28200
0f218     F2 18 02 FB | 	rdlong	arg04, objptr
0f21c     37 00 00 FF 
0f220     28 E4 85 F1 | 	sub	objptr, ##28200
0f224     13 13 02 F6 | 	mov	arg01, local01
0f228     14 15 02 F6 | 	mov	arg02, local02
0f22c     D0 4B B1 FD | 	call	#_hg010b_spin2_circle
0f230                 | LR__1261
0f230     A7 F0 03 F6 | 	mov	ptra, fp
0f234     B2 00 A0 FD | 	call	#popregs_
0f238                 | _do_circle_ret
0f238     2D 00 64 FD | 	ret
0f23c                 | 
0f23c                 | ' 
0f23c                 | ' '-------------------- click
0f23c                 | ' 
0f23c                 | ' sub do_click
0f23c                 | _do_click
0f23c     A0 E0 BF FD | 	call	#_pop
0f240     00 FA 4D F2 | 	cmps	result1, #0 wz
0f244                 | ' 
0f244                 | ' t1=pop()
0f244                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f244     50 00 00 AF 
0f248     3C E5 05 A1 |  if_e	add	objptr, ##41276
0f24c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f250     50 00 00 FF 
0f254     3C E5 C5 F3 | 	sumz	objptr, ##41276
0f258     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f25c     50 00 00 5F 
0f260     3C E5 85 51 |  if_ne	sub	objptr, ##41276
0f264                 | _do_click_ret
0f264     2D 00 64 FD | 	ret
0f268                 | 
0f268                 | ' 
0f268                 | ' '-------------------- close
0f268                 | ' 
0f268                 | ' sub do_close
0f268                 | _do_close
0f268     03 4A 05 F6 | 	mov	COUNT_, #3
0f26c     A8 00 A0 FD | 	call	#pushregs_
0f270     6C E0 BF FD | 	call	#_pop
0f274     FD 26 02 F6 | 	mov	local01, result1
0f278     FF 16 02 F6 | 	mov	arg03, result3
0f27c     FE 28 02 F6 | 	mov	local02, result2
0f280     0B 2B 02 F6 | 	mov	local03, arg03
0f284                 | ' 
0f284                 | ' numpar=compiledline(lineptr_e).result.uresult
0f284                 | ' t1=pop()
0f284                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f284     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f288     44 00 90 AD |  if_e	jmp	#LR__1270
0f28c     00 12 06 F6 | 	mov	arg01, #0
0f290     AC C9 B1 FD | 	call	#__system___getiolock_0602
0f294     FD 12 02 F6 | 	mov	arg01, result1
0f298     7C 6C B1 FD | 	call	#__system___lockmem
0f29c     B1 01 00 FF 
0f2a0     5B 14 06 F6 | 	mov	arg02, ##@LR__5836
0f2a4     00 12 06 F6 | 	mov	arg01, #0
0f2a8     00 16 06 F6 | 	mov	arg03, #0
0f2ac     5C 79 B1 FD | 	call	#__system___basic_print_string
0f2b0     00 12 06 F6 | 	mov	arg01, #0
0f2b4     0A 14 06 F6 | 	mov	arg02, #10
0f2b8     00 16 06 F6 | 	mov	arg03, #0
0f2bc     F4 78 B1 FD | 	call	#__system___basic_print_char
0f2c0     00 12 06 F6 | 	mov	arg01, #0
0f2c4     78 C9 B1 FD | 	call	#__system___getiolock_0602
0f2c8     FD 00 68 FC | 	wrlong	#0, result1
0f2cc     08 00 90 FD | 	jmp	#LR__1271
0f2d0                 | LR__1270
0f2d0                 | ' channel  = t1.result.iresult
0f2d0                 | ' close #channel
0f2d0     13 13 02 F6 | 	mov	arg01, local01
0f2d4     98 BF B1 FD | 	call	#__system__close
0f2d8                 | LR__1271
0f2d8     A7 F0 03 F6 | 	mov	ptra, fp
0f2dc     B2 00 A0 FD | 	call	#popregs_
0f2e0                 | _do_close_ret
0f2e0     2D 00 64 FD | 	ret
0f2e4                 | 
0f2e4                 | ' 
0f2e4                 | ' '-------------------- cls
0f2e4                 | ' 
0f2e4                 | ' sub do_cls
0f2e4                 | _do_cls
0f2e4     37 00 00 FF 
0f2e8     3C E4 05 F1 | 	add	objptr, ##28220
0f2ec     F2 12 02 FB | 	rdlong	arg01, objptr
0f2f0     04 E4 85 F1 | 	sub	objptr, #4
0f2f4     F2 14 02 FB | 	rdlong	arg02, objptr
0f2f8     37 00 00 FF 
0f2fc     38 E4 85 F1 | 	sub	objptr, ##28216
0f300     90 4F B1 FD | 	call	#_hg010b_spin2_cls
0f304     37 00 00 FF 
0f308     3C E4 05 F1 | 	add	objptr, ##28220
0f30c     F2 14 02 FB | 	rdlong	arg02, objptr
0f310     14 E4 85 F1 | 	sub	objptr, #20
0f314     F2 14 62 FC | 	wrlong	arg02, objptr
0f318     37 00 00 FF 
0f31c     28 E4 85 F1 | 	sub	objptr, ##28200
0f320                 | _do_cls_ret
0f320     2D 00 64 FD | 	ret
0f324                 | 
0f324                 | ' 
0f324                 | ' '-------------------- color
0f324                 | ' 
0f324                 | ' sub do_color
0f324                 | _do_color
0f324     03 4A 05 F6 | 	mov	COUNT_, #3
0f328     A8 00 A0 FD | 	call	#pushregs_
0f32c     B0 DF BF FD | 	call	#_pop
0f330     FD 26 02 F6 | 	mov	local01, result1
0f334     FE 28 02 F6 | 	mov	local02, result2
0f338     FF 2A 02 F6 | 	mov	local03, result3
0f33c     37 00 00 FF 
0f340     28 E4 05 F1 | 	add	objptr, ##28200
0f344     F2 26 62 FC | 	wrlong	local01, objptr
0f348     37 00 00 FF 
0f34c     28 E4 85 F1 | 	sub	objptr, ##28200
0f350     A7 F0 03 F6 | 	mov	ptra, fp
0f354     B2 00 A0 FD | 	call	#popregs_
0f358                 | _do_color_ret
0f358     2D 00 64 FD | 	ret
0f35c                 | 
0f35c                 | ' 
0f35c                 | ' '-------------------- cos
0f35c                 | ' 
0f35c                 | ' sub do_cos
0f35c                 | _do_cos
0f35c     01 4A 05 F6 | 	mov	COUNT_, #1
0f360     A8 00 A0 FD | 	call	#pushregs_
0f364     10 F0 07 F1 | 	add	ptra, #16
0f368     4A 00 00 FF 
0f36c     80 E4 05 F1 | 	add	objptr, ##38016
0f370     F2 26 02 FB | 	rdlong	local01, objptr
0f374     13 17 02 F6 | 	mov	arg03, local01
0f378     01 16 66 F0 | 	shl	arg03, #1
0f37c     13 17 02 F1 | 	add	arg03, local01
0f380     02 16 66 F0 | 	shl	arg03, #2
0f384     03 00 00 FF 
0f388     04 E4 85 F1 | 	sub	objptr, ##1540
0f38c     F2 16 02 F1 | 	add	arg03, objptr
0f390     0B 17 02 FB | 	rdlong	arg03, arg03
0f394     0C 4E 05 F1 | 	add	fp, #12
0f398     A7 16 62 FC | 	wrlong	arg03, fp
0f39c                 | ' 
0f39c                 | ' numpar=compiledline(lineptr_e).result.uresult
0f39c                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0f39c     0C 4E 85 F1 | 	sub	fp, #12
0f3a0     02 16 16 F2 | 	cmp	arg03, #2 wc
0f3a4     47 00 00 FF 
0f3a8     7C E4 85 F1 | 	sub	objptr, ##36476
0f3ac     0C 4E 05 C1 |  if_b	add	fp, #12
0f3b0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f3b4     0C 4E 85 C1 |  if_b	sub	fp, #12
0f3b8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1280
0f3bc     00 12 06 F6 | 	mov	arg01, #0
0f3c0     7C C8 B1 FD | 	call	#__system___getiolock_0602
0f3c4     FD 12 02 F6 | 	mov	arg01, result1
0f3c8     4C 6B B1 FD | 	call	#__system___lockmem
0f3cc     B1 01 00 FF 
0f3d0     6D 14 06 F6 | 	mov	arg02, ##@LR__5837
0f3d4     00 12 06 F6 | 	mov	arg01, #0
0f3d8     00 16 06 F6 | 	mov	arg03, #0
0f3dc     2C 78 B1 FD | 	call	#__system___basic_print_string
0f3e0     00 12 06 F6 | 	mov	arg01, #0
0f3e4     58 C8 B1 FD | 	call	#__system___getiolock_0602
0f3e8     FD 00 68 FC | 	wrlong	#0, result1
0f3ec     27 12 06 F6 | 	mov	arg01, #39
0f3f0     00 14 06 F6 | 	mov	arg02, #0
0f3f4     34 31 B1 FD | 	call	#_printerror
0f3f8     78 00 90 FD | 	jmp	#LR__1281
0f3fc                 | LR__1280
0f3fc     E0 DE BF FD | 	call	#_pop
0f400     A7 FA 61 FC | 	wrlong	result1, fp
0f404     04 4E 05 F1 | 	add	fp, #4
0f408     A7 FC 61 FC | 	wrlong	result2, fp
0f40c     04 4E 05 F1 | 	add	fp, #4
0f410     A7 FE 61 FC | 	wrlong	result3, fp
0f414     08 4E 85 F1 | 	sub	fp, #8
0f418     52 00 00 FF 
0f41c     A8 E4 05 F1 | 	add	objptr, ##42152
0f420     F2 26 02 FB | 	rdlong	local01, objptr
0f424     52 00 00 FF 
0f428     A8 E4 85 F1 | 	sub	objptr, ##42152
0f42c     A7 12 02 F6 | 	mov	arg01, fp
0f430     4C E1 BF FD | 	call	#_converttofloat
0f434     FD 14 02 F6 | 	mov	arg02, result1
0f438     13 13 02 F6 | 	mov	arg01, local01
0f43c     50 99 B1 FD | 	call	#__system___float_mul
0f440     FD 14 02 F6 | 	mov	arg02, result1
0f444     87 E4 1F FF 
0f448     DB 13 06 F6 | 	mov	arg01, ##1070141403
0f44c     1F 14 E6 F4 | 	bitnot	arg02, #31
0f450     6C 95 B1 FD | 	call	#__system___float_add
0f454     FD 12 02 F6 | 	mov	arg01, result1
0f458     94 A2 B1 FD | 	call	#__system____builtin_sinf
0f45c     A7 FA 61 FC | 	wrlong	result1, fp
0f460     08 4E 05 F1 | 	add	fp, #8
0f464     A7 3C 68 FC | 	wrlong	#30, fp
0f468     08 4E 85 F1 | 	sub	fp, #8
0f46c     A7 12 02 F6 | 	mov	arg01, fp
0f470     04 DF BF FD | 	call	#_push
0f474                 | LR__1281
0f474     A7 F0 03 F6 | 	mov	ptra, fp
0f478     B2 00 A0 FD | 	call	#popregs_
0f47c                 | _do_cos_ret
0f47c     2D 00 64 FD | 	ret
0f480                 | 
0f480                 | ' 
0f480                 | ' '-------------------- cursor
0f480                 | ' 
0f480                 | ' sub do_cursor
0f480                 | _do_cursor
0f480     5C DE BF FD | 	call	#_pop
0f484     00 FA 4D F2 | 	cmps	result1, #0 wz
0f488                 | ' t1=pop()
0f488                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0f488     14 00 90 5D |  if_ne	jmp	#LR__1290
0f48c     11 12 06 F6 | 	mov	arg01, #17
0f490     00 14 06 F6 | 	mov	arg02, #0
0f494     00 16 06 F6 | 	mov	arg03, #0
0f498     D8 40 B1 FD | 	call	#_hg010b_spin2_setspritesize
0f49c     10 00 90 FD | 	jmp	#LR__1291
0f4a0                 | LR__1290
0f4a0     11 12 06 F6 | 	mov	arg01, #17
0f4a4     08 14 06 F6 | 	mov	arg02, #8
0f4a8     10 16 06 F6 | 	mov	arg03, #16
0f4ac     C4 40 B1 FD | 	call	#_hg010b_spin2_setspritesize
0f4b0                 | LR__1291
0f4b0                 | _do_cursor_ret
0f4b0     2D 00 64 FD | 	ret
0f4b4                 | 
0f4b4                 | ' 
0f4b4                 | ' '-------------------- defenv
0f4b4                 | ' 
0f4b4                 | ' sub do_defenv
0f4b4                 | _do_defenv
0f4b4     08 4A 05 F6 | 	mov	COUNT_, #8
0f4b8     A8 00 A0 FD | 	call	#pushregs_
0f4bc     58 F0 07 F1 | 	add	ptra, #88
0f4c0     4A 00 00 FF 
0f4c4     80 E4 05 F1 | 	add	objptr, ##38016
0f4c8     F2 26 02 FB | 	rdlong	local01, objptr
0f4cc     13 1B 02 F6 | 	mov	arg05, local01
0f4d0     01 1A 66 F0 | 	shl	arg05, #1
0f4d4     13 1B 02 F1 | 	add	arg05, local01
0f4d8     02 1A 66 F0 | 	shl	arg05, #2
0f4dc     03 00 00 FF 
0f4e0     04 E4 85 F1 | 	sub	objptr, ##1540
0f4e4     F2 1A 02 F1 | 	add	arg05, objptr
0f4e8     0D 1B 02 FB | 	rdlong	arg05, arg05
0f4ec     10 4E 05 F1 | 	add	fp, #16
0f4f0     A7 1A 62 FC | 	wrlong	arg05, fp
0f4f4                 | ' 
0f4f4                 | ' numpar=compiledline(lineptr_e).result.uresult
0f4f4                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0f4f4     10 4E 85 F1 | 	sub	fp, #16
0f4f8     02 1A 0E F2 | 	cmp	arg05, #2 wz
0f4fc     47 00 00 FF 
0f500     7C E4 85 F1 | 	sub	objptr, ##36476
0f504     10 4E 05 51 |  if_ne	add	fp, #16
0f508     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f50c     10 4E 85 51 |  if_ne	sub	fp, #16
0f510     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0f514     8C 0A 90 5D |  if_ne	jmp	#LR__1321
0f518                 | ' 
0f518                 | ' if numpar=2 then						' env from .h2 or from a pointer
0f518     10 4E 05 F1 | 	add	fp, #16
0f51c     A7 26 02 FB | 	rdlong	local01, fp
0f520     10 4E 85 F1 | 	sub	fp, #16
0f524     02 26 0E F2 | 	cmp	local01, #2 wz
0f528     24 04 90 5D |  if_ne	jmp	#LR__1313
0f52c     B0 DD BF FD | 	call	#_pop
0f530     FF 1A 02 F6 | 	mov	arg05, result3
0f534     40 4E 05 F1 | 	add	fp, #64
0f538     A7 FA 61 FC | 	wrlong	result1, fp
0f53c     04 4E 05 F1 | 	add	fp, #4
0f540     A7 FC 61 FC | 	wrlong	result2, fp
0f544     04 4E 05 F1 | 	add	fp, #4
0f548     A7 1A 62 FC | 	wrlong	arg05, fp
0f54c                 | '   t1=pop()
0f54c                 | '   if t1.result_type=result_string2 then 
0f54c     48 4E 85 F1 | 	sub	fp, #72
0f550     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0f554     20 00 90 5D |  if_ne	jmp	#LR__1300
0f558     40 4E 05 F1 | 	add	fp, #64
0f55c     A7 12 02 FB | 	rdlong	arg01, fp
0f560     40 4E 85 F1 | 	sub	fp, #64
0f564     F0 DE BF FD | 	call	#_convertstring
0f568     4C 4E 05 F1 | 	add	fp, #76
0f56c     A7 FA 61 FC | 	wrlong	result1, fp
0f570     4C 4E 85 F1 | 	sub	fp, #76
0f574     58 00 90 FD | 	jmp	#LR__1303
0f578                 | LR__1300
0f578     48 4E 05 F1 | 	add	fp, #72
0f57c     A7 26 02 FB | 	rdlong	local01, fp
0f580     48 4E 85 F1 | 	sub	fp, #72
0f584     1F 26 0E F2 | 	cmp	local01, #31 wz
0f588     18 00 90 5D |  if_ne	jmp	#LR__1301
0f58c     40 4E 05 F1 | 	add	fp, #64
0f590     A7 26 02 FB | 	rdlong	local01, fp
0f594     0C 4E 05 F1 | 	add	fp, #12
0f598     A7 26 62 FC | 	wrlong	local01, fp
0f59c     4C 4E 85 F1 | 	sub	fp, #76
0f5a0     2C 00 90 FD | 	jmp	#LR__1302
0f5a4                 | LR__1301
0f5a4     B1 01 00 FF 
0f5a8     73 26 06 F6 | 	mov	local01, ##@LR__5838
0f5ac     4C 4E 05 F1 | 	add	fp, #76
0f5b0     A7 26 62 FC | 	wrlong	local01, fp
0f5b4     0C 4E 85 F1 | 	sub	fp, #12
0f5b8     A7 12 02 F6 | 	mov	arg01, fp
0f5bc     40 4E 85 F1 | 	sub	fp, #64
0f5c0     00 DF BF FD | 	call	#_converttoint
0f5c4     1C 4E 05 F1 | 	add	fp, #28
0f5c8     A7 FA 61 FC | 	wrlong	result1, fp
0f5cc     1C 4E 85 F1 | 	sub	fp, #28
0f5d0                 | LR__1302
0f5d0                 | LR__1303
0f5d0                 | '   if s1<>"" then 
0f5d0     4C 4E 05 F1 | 	add	fp, #76
0f5d4     A7 12 02 FB | 	rdlong	arg01, fp
0f5d8     4C 4E 85 F1 | 	sub	fp, #76
0f5dc     B1 01 00 FF 
0f5e0     74 14 06 F6 | 	mov	arg02, ##@LR__5839
0f5e4     58 69 B1 FD | 	call	#__system___string_cmp
0f5e8     00 FA 0D F2 | 	cmp	result1, #0 wz
0f5ec     24 02 90 AD |  if_e	jmp	#LR__1307
0f5f0     EC DC BF FD | 	call	#_pop
0f5f4     FF 26 02 F6 | 	mov	local01, result3
0f5f8     40 4E 05 F1 | 	add	fp, #64
0f5fc     A7 FA 61 FC | 	wrlong	result1, fp
0f600     04 4E 05 F1 | 	add	fp, #4
0f604     A7 FC 61 FC | 	wrlong	result2, fp
0f608     04 4E 05 F1 | 	add	fp, #4
0f60c     A7 26 62 FC | 	wrlong	local01, fp
0f610     08 4E 85 F1 | 	sub	fp, #8
0f614     A7 12 02 F6 | 	mov	arg01, fp
0f618     40 4E 85 F1 | 	sub	fp, #64
0f61c     A4 DE BF FD | 	call	#_converttoint
0f620     18 4E 05 F1 | 	add	fp, #24
0f624     A7 FA 61 FC | 	wrlong	result1, fp
0f628     18 4E 85 F1 | 	sub	fp, #24
0f62c                 | '     t1=pop()
0f62c                 | '     channel=converttoint(t1) 
0f62c                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0f62c     09 12 06 F6 | 	mov	arg01, #9
0f630     3C BC B1 FD | 	call	#__system__close
0f634     09 26 06 F6 | 	mov	local01, #9
0f638     B1 01 00 FF 
0f63c     75 12 06 F6 | 	mov	arg01, ##@LR__5840
0f640     4C 4E 05 F1 | 	add	fp, #76
0f644     A7 14 02 FB | 	rdlong	arg02, fp
0f648     4C 4E 85 F1 | 	sub	fp, #76
0f64c     24 69 B1 FD | 	call	#__system___string_concat
0f650     FD 14 02 F6 | 	mov	arg02, result1
0f654     13 13 02 F6 | 	mov	arg01, local01
0f658     00 16 06 F6 | 	mov	arg03, #0
0f65c     BC 74 B1 FD | 	call	#__system___basic_open_string
0f660     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f664     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f668     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f66c     0C 4E 05 F1 | 	add	fp, #12
0f670     A7 FA 61 FC | 	wrlong	result1, fp
0f674                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0f674     0C 4E 85 F1 | 	sub	fp, #12
0f678     A0 00 90 AD |  if_e	jmp	#LR__1304
0f67c     00 12 06 F6 | 	mov	arg01, #0
0f680     BC C5 B1 FD | 	call	#__system___getiolock_0602
0f684     FD 12 02 F6 | 	mov	arg01, result1
0f688     8C 68 B1 FD | 	call	#__system___lockmem
0f68c     B1 01 00 FF 
0f690     82 14 06 F6 | 	mov	arg02, ##@LR__5841
0f694     00 12 06 F6 | 	mov	arg01, #0
0f698     00 16 06 F6 | 	mov	arg03, #0
0f69c     6C 75 B1 FD | 	call	#__system___basic_print_string
0f6a0     0C 4E 05 F1 | 	add	fp, #12
0f6a4     A7 14 02 FB | 	rdlong	arg02, fp
0f6a8     0C 4E 85 F1 | 	sub	fp, #12
0f6ac     00 12 06 F6 | 	mov	arg01, #0
0f6b0     00 16 06 F6 | 	mov	arg03, #0
0f6b4     0A 18 06 F6 | 	mov	arg04, #10
0f6b8     94 75 B1 FD | 	call	#__system___basic_print_integer
0f6bc     B1 01 00 FF 
0f6c0     90 14 06 F6 | 	mov	arg02, ##@LR__5842
0f6c4     00 12 06 F6 | 	mov	arg01, #0
0f6c8     00 16 06 F6 | 	mov	arg03, #0
0f6cc     3C 75 B1 FD | 	call	#__system___basic_print_string
0f6d0     00 26 06 F6 | 	mov	local01, #0
0f6d4     0C 4E 05 F1 | 	add	fp, #12
0f6d8     A7 12 02 FB | 	rdlong	arg01, fp
0f6dc     0C 4E 85 F1 | 	sub	fp, #12
0f6e0     C0 91 B1 FD | 	call	#__system___strerror
0f6e4     FD 14 02 F6 | 	mov	arg02, result1
0f6e8     13 13 02 F6 | 	mov	arg01, local01
0f6ec     00 16 06 F6 | 	mov	arg03, #0
0f6f0     18 75 B1 FD | 	call	#__system___basic_print_string
0f6f4     00 12 06 F6 | 	mov	arg01, #0
0f6f8     0A 14 06 F6 | 	mov	arg02, #10
0f6fc     00 16 06 F6 | 	mov	arg03, #0
0f700     B0 74 B1 FD | 	call	#__system___basic_print_char
0f704     00 12 06 F6 | 	mov	arg01, #0
0f708     34 C5 B1 FD | 	call	#__system___getiolock_0602
0f70c     FD 00 68 FC | 	wrlong	#0, result1
0f710     09 12 06 F6 | 	mov	arg01, #9
0f714     58 BB B1 FD | 	call	#__system__close
0f718     88 08 90 FD | 	jmp	#LR__1321
0f71c                 | LR__1304
0f71c                 | '     get #9,17,envbuf8(channel,0),256
0f71c     18 4E 05 F1 | 	add	fp, #24
0f720     A7 1A 02 FB | 	rdlong	arg05, fp
0f724     18 4E 85 F1 | 	sub	fp, #24
0f728     0D 17 02 F6 | 	mov	arg03, arg05
0f72c     09 16 66 F0 | 	shl	arg03, #9
0f730     0D 17 02 F1 | 	add	arg03, arg05
0f734     0C 00 00 FF 
0f738     D8 E4 05 F1 | 	add	objptr, ##6360
0f73c     F2 16 02 F1 | 	add	arg03, objptr
0f740     09 12 06 F6 | 	mov	arg01, #9
0f744     11 14 06 F6 | 	mov	arg02, #17
0f748     00 19 06 F6 | 	mov	arg04, #256
0f74c     01 1A 06 F6 | 	mov	arg05, #1
0f750     0C 00 00 FF 
0f754     D8 E4 85 F1 | 	sub	objptr, ##6360
0f758     2C 76 B1 FD | 	call	#__system___basic_get
0f75c                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0f75c     14 4E 05 F1 | 	add	fp, #20
0f760     A7 FE 69 FC | 	wrlong	#255, fp
0f764     14 4E 85 F1 | 	sub	fp, #20
0f768     0C 00 00 FF 
0f76c     D8 E4 05 F1 | 	add	objptr, ##6360
0f770     97 30 48 FB | 	callpa	#(@LR__1306-@LR__1305)>>2,fcache_load_ptr_
0f774                 | LR__1305
0f774     18 4E 05 F1 | 	add	fp, #24
0f778     A7 16 02 FB | 	rdlong	arg03, fp
0f77c     0B 27 02 F6 | 	mov	local01, arg03
0f780     09 26 66 F0 | 	shl	local01, #9
0f784     F2 26 02 F1 | 	add	local01, objptr
0f788     04 4E 85 F1 | 	sub	fp, #4
0f78c     A7 1A 02 FB | 	rdlong	arg05, fp
0f790     0D 19 02 F6 | 	mov	arg04, arg05
0f794     01 18 66 F0 | 	shl	arg04, #1
0f798     13 19 02 F1 | 	add	arg04, local01
0f79c     0B 27 02 F6 | 	mov	local01, arg03
0f7a0     09 26 66 F0 | 	shl	local01, #9
0f7a4     0B 27 02 F1 | 	add	local01, arg03
0f7a8     F2 26 02 F1 | 	add	local01, objptr
0f7ac     13 1B 02 F1 | 	add	arg05, local01
0f7b0     0D 27 C2 FA | 	rdbyte	local01, arg05
0f7b4     00 27 06 FA | 	mul	local01, #256
0f7b8     0C 27 52 FC | 	wrword	local01, arg04
0f7bc     A7 26 02 FB | 	rdlong	local01, fp
0f7c0     01 26 86 F1 | 	sub	local01, #1
0f7c4     A7 26 62 FC | 	wrlong	local01, fp
0f7c8     14 4E 85 F1 | 	sub	fp, #20
0f7cc     00 26 56 F2 | 	cmps	local01, #0 wc
0f7d0     A0 FF 9F 3D |  if_ae	jmp	#LR__1305
0f7d4                 | LR__1306
0f7d4     0C 00 00 FF 
0f7d8     D8 E4 85 F1 | 	sub	objptr, ##6360
0f7dc                 | '     close #9
0f7dc     09 12 06 F6 | 	mov	arg01, #9
0f7e0     8C BA B1 FD | 	call	#__system__close
0f7e4     18 4E 05 F1 | 	add	fp, #24
0f7e8     A7 26 02 FB | 	rdlong	local01, fp
0f7ec     18 4E 85 F1 | 	sub	fp, #24
0f7f0     09 26 66 F0 | 	shl	local01, #9
0f7f4     0C 00 00 FF 
0f7f8     D8 E4 05 F1 | 	add	objptr, ##6360
0f7fc     F2 26 02 F1 | 	add	local01, objptr
0f800     FE 27 06 F1 | 	add	local01, #510
0f804     13 01 58 FC | 	wrword	#0, local01
0f808                 | '     envbuf(channel,255)=0                                                              
0f808                 | '     return
0f808     0C 00 00 FF 
0f80c     D8 E4 85 F1 | 	sub	objptr, ##6360
0f810     90 07 90 FD | 	jmp	#LR__1321
0f814                 | LR__1307
0f814                 | '     if wptr < $80000 then 
0f814     1C 4E 05 F1 | 	add	fp, #28
0f818     A7 28 02 FB | 	rdlong	local02, fp
0f81c     1C 4E 85 F1 | 	sub	fp, #28
0f820     00 04 00 FF 
0f824     00 28 56 F2 | 	cmps	local02, ##524288 wc
0f828     7C 00 90 3D |  if_ae	jmp	#LR__1310
0f82c                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0f82c     14 4E 05 F1 | 	add	fp, #20
0f830     A7 00 68 FC | 	wrlong	#0, fp
0f834     14 4E 85 F1 | 	sub	fp, #20
0f838     0C 00 00 FF 
0f83c     D8 E4 05 F1 | 	add	objptr, ##6360
0f840     97 2C 48 FB | 	callpa	#(@LR__1309-@LR__1308)>>2,fcache_load_ptr_
0f844                 | LR__1308
0f844     18 4E 05 F1 | 	add	fp, #24
0f848     A7 28 02 FB | 	rdlong	local02, fp
0f84c     09 28 66 F0 | 	shl	local02, #9
0f850     F2 28 02 F1 | 	add	local02, objptr
0f854     04 4E 85 F1 | 	sub	fp, #4
0f858     A7 26 02 FB | 	rdlong	local01, fp
0f85c     13 1B 02 F6 | 	mov	arg05, local01
0f860     01 1A 66 F0 | 	shl	arg05, #1
0f864     14 1B 02 F1 | 	add	arg05, local02
0f868     08 4E 05 F1 | 	add	fp, #8
0f86c     A7 12 02 FB | 	rdlong	arg01, fp
0f870     01 26 66 F0 | 	shl	local01, #1
0f874     13 13 02 F1 | 	add	arg01, local01
0f878     09 FB E1 FA | 	rdword	result1, arg01
0f87c     0D FB 51 FC | 	wrword	result1, arg05
0f880     08 4E 85 F1 | 	sub	fp, #8
0f884     A7 28 02 FB | 	rdlong	local02, fp
0f888     01 28 06 F1 | 	add	local02, #1
0f88c     A7 28 62 FC | 	wrlong	local02, fp
0f890     14 4E 85 F1 | 	sub	fp, #20
0f894     00 29 56 F2 | 	cmps	local02, #256 wc
0f898     A8 FF 9F CD |  if_b	jmp	#LR__1308
0f89c                 | LR__1309
0f89c     0C 00 00 FF 
0f8a0     D8 E4 85 F1 | 	sub	objptr, ##6360
0f8a4     78 00 90 FD | 	jmp	#LR__1312
0f8a8                 | LR__1310
0f8a8                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0f8a8     14 4E 05 F1 | 	add	fp, #20
0f8ac     A7 00 68 FC | 	wrlong	#0, fp
0f8b0     14 4E 85 F1 | 	sub	fp, #20
0f8b4                 | LR__1311
0f8b4     18 4E 05 F1 | 	add	fp, #24
0f8b8     A7 28 02 FB | 	rdlong	local02, fp
0f8bc     09 28 66 F0 | 	shl	local02, #9
0f8c0     0C 00 00 FF 
0f8c4     D8 E4 05 F1 | 	add	objptr, ##6360
0f8c8     F2 28 02 F1 | 	add	local02, objptr
0f8cc     04 4E 85 F1 | 	sub	fp, #4
0f8d0     A7 26 02 FB | 	rdlong	local01, fp
0f8d4     13 2B 02 F6 | 	mov	local03, local01
0f8d8     01 2A 66 F0 | 	shl	local03, #1
0f8dc     14 2B 02 F1 | 	add	local03, local02
0f8e0     08 4E 05 F1 | 	add	fp, #8
0f8e4     A7 12 02 FB | 	rdlong	arg01, fp
0f8e8     1C 4E 85 F1 | 	sub	fp, #28
0f8ec     01 26 66 F0 | 	shl	local01, #1
0f8f0     13 13 02 F1 | 	add	arg01, local01
0f8f4     0C 00 00 FF 
0f8f8     D8 E4 85 F1 | 	sub	objptr, ##6360
0f8fc     54 2F B1 FD | 	call	#_psdpeek
0f900     15 FB 51 FC | 	wrword	result1, local03
0f904     14 4E 05 F1 | 	add	fp, #20
0f908     A7 2A 02 FB | 	rdlong	local03, fp
0f90c     01 2A 06 F1 | 	add	local03, #1
0f910     A7 2A 62 FC | 	wrlong	local03, fp
0f914     14 4E 85 F1 | 	sub	fp, #20
0f918     00 2B 56 F2 | 	cmps	local03, #256 wc
0f91c     94 FF 9F CD |  if_b	jmp	#LR__1311
0f920                 | LR__1312
0f920     18 4E 05 F1 | 	add	fp, #24
0f924     A7 2A 02 FB | 	rdlong	local03, fp
0f928     18 4E 85 F1 | 	sub	fp, #24
0f92c     09 2A 66 F0 | 	shl	local03, #9
0f930     0C 00 00 FF 
0f934     D8 E4 05 F1 | 	add	objptr, ##6360
0f938     F2 2A 02 F1 | 	add	local03, objptr
0f93c     FE 2B 06 F1 | 	add	local03, #510
0f940     15 01 58 FC | 	wrword	#0, local03
0f944                 | '     envbuf(channel,255)=0
0f944                 | '     return   
0f944     0C 00 00 FF 
0f948     D8 E4 85 F1 | 	sub	objptr, ##6360
0f94c     54 06 90 FD | 	jmp	#LR__1321
0f950                 | LR__1313
0f950                 | ' 
0f950                 | ' if numpar=5 then   						 'simple adsr
0f950     10 4E 05 F1 | 	add	fp, #16
0f954     A7 28 02 FB | 	rdlong	local02, fp
0f958     10 4E 85 F1 | 	sub	fp, #16
0f95c     05 28 0E F2 | 	cmp	local02, #5 wz
0f960     14 06 90 5D |  if_ne	jmp	#LR__1320
0f964     78 D9 BF FD | 	call	#_pop
0f968     FF 26 02 F6 | 	mov	local01, result3
0f96c     40 4E 05 F1 | 	add	fp, #64
0f970     A7 FA 61 FC | 	wrlong	result1, fp
0f974     04 4E 05 F1 | 	add	fp, #4
0f978     A7 FC 61 FC | 	wrlong	result2, fp
0f97c     04 4E 05 F1 | 	add	fp, #4
0f980     A7 26 62 FC | 	wrlong	local01, fp
0f984     08 4E 85 F1 | 	sub	fp, #8
0f988     A7 12 02 F6 | 	mov	arg01, fp
0f98c     40 4E 85 F1 | 	sub	fp, #64
0f990     EC DB BF FD | 	call	#_converttofloat
0f994     FD 28 02 F6 | 	mov	local02, result1
0f998     2C 4E 05 F1 | 	add	fp, #44
0f99c     A7 28 62 FC | 	wrlong	local02, fp
0f9a0     2C 4E 85 F1 | 	sub	fp, #44
0f9a4     38 D9 BF FD | 	call	#_pop
0f9a8     FF 26 02 F6 | 	mov	local01, result3
0f9ac     40 4E 05 F1 | 	add	fp, #64
0f9b0     A7 FA 61 FC | 	wrlong	result1, fp
0f9b4     04 4E 05 F1 | 	add	fp, #4
0f9b8     A7 FC 61 FC | 	wrlong	result2, fp
0f9bc     04 4E 05 F1 | 	add	fp, #4
0f9c0     A7 26 62 FC | 	wrlong	local01, fp
0f9c4     08 4E 85 F1 | 	sub	fp, #8
0f9c8     A7 12 02 F6 | 	mov	arg01, fp
0f9cc     40 4E 85 F1 | 	sub	fp, #64
0f9d0     AC DB BF FD | 	call	#_converttofloat
0f9d4     FD 28 02 F6 | 	mov	local02, result1
0f9d8     28 4E 05 F1 | 	add	fp, #40
0f9dc     A7 28 62 FC | 	wrlong	local02, fp
0f9e0     28 4E 85 F1 | 	sub	fp, #40
0f9e4     F8 D8 BF FD | 	call	#_pop
0f9e8     FF 26 02 F6 | 	mov	local01, result3
0f9ec     40 4E 05 F1 | 	add	fp, #64
0f9f0     A7 FA 61 FC | 	wrlong	result1, fp
0f9f4     04 4E 05 F1 | 	add	fp, #4
0f9f8     A7 FC 61 FC | 	wrlong	result2, fp
0f9fc     04 4E 05 F1 | 	add	fp, #4
0fa00     A7 26 62 FC | 	wrlong	local01, fp
0fa04     08 4E 85 F1 | 	sub	fp, #8
0fa08     A7 12 02 F6 | 	mov	arg01, fp
0fa0c     40 4E 85 F1 | 	sub	fp, #64
0fa10     6C DB BF FD | 	call	#_converttofloat
0fa14     FD 28 02 F6 | 	mov	local02, result1
0fa18     24 4E 05 F1 | 	add	fp, #36
0fa1c     A7 28 62 FC | 	wrlong	local02, fp
0fa20     24 4E 85 F1 | 	sub	fp, #36
0fa24     B8 D8 BF FD | 	call	#_pop
0fa28     FF 26 02 F6 | 	mov	local01, result3
0fa2c     40 4E 05 F1 | 	add	fp, #64
0fa30     A7 FA 61 FC | 	wrlong	result1, fp
0fa34     04 4E 05 F1 | 	add	fp, #4
0fa38     A7 FC 61 FC | 	wrlong	result2, fp
0fa3c     04 4E 05 F1 | 	add	fp, #4
0fa40     A7 26 62 FC | 	wrlong	local01, fp
0fa44     08 4E 85 F1 | 	sub	fp, #8
0fa48     A7 12 02 F6 | 	mov	arg01, fp
0fa4c     40 4E 85 F1 | 	sub	fp, #64
0fa50     2C DB BF FD | 	call	#_converttofloat
0fa54     FD 28 02 F6 | 	mov	local02, result1
0fa58     20 4E 05 F1 | 	add	fp, #32
0fa5c     A7 28 62 FC | 	wrlong	local02, fp
0fa60     20 4E 85 F1 | 	sub	fp, #32
0fa64     78 D8 BF FD | 	call	#_pop
0fa68     FF 26 02 F6 | 	mov	local01, result3
0fa6c     40 4E 05 F1 | 	add	fp, #64
0fa70     A7 FA 61 FC | 	wrlong	result1, fp
0fa74     04 4E 05 F1 | 	add	fp, #4
0fa78     A7 FC 61 FC | 	wrlong	result2, fp
0fa7c     04 4E 05 F1 | 	add	fp, #4
0fa80     A7 26 62 FC | 	wrlong	local01, fp
0fa84     08 4E 85 F1 | 	sub	fp, #8
0fa88     A7 12 02 F6 | 	mov	arg01, fp
0fa8c     40 4E 85 F1 | 	sub	fp, #64
0fa90     30 DA BF FD | 	call	#_converttoint
0fa94     18 4E 05 F1 | 	add	fp, #24
0fa98     A7 FA 61 FC | 	wrlong	result1, fp
0fa9c                 | '   t1=pop() : rr=converttofloat(t1)
0fa9c                 | '   t1=pop() : ss=converttofloat(t1) 
0fa9c                 | '   t1=pop() : dd=converttofloat(t1)
0fa9c                 | '   t1=pop() : aa=converttofloat(t1)
0fa9c                 | '   t1=pop() : channel=converttoint(t1)
0fa9c                 | '   if ss<0.0 then ss=0.0 
0fa9c     10 4E 05 F1 | 	add	fp, #16
0faa0     A7 12 02 FB | 	rdlong	arg01, fp
0faa4     28 4E 85 F1 | 	sub	fp, #40
0faa8     00 14 06 F6 | 	mov	arg02, #0
0faac     01 16 06 F6 | 	mov	arg03, #1
0fab0     10 97 B1 FD | 	call	#__system___float_cmp
0fab4     00 FA 55 F2 | 	cmps	result1, #0 wc
0fab8     28 4E 05 C1 |  if_b	add	fp, #40
0fabc     A7 00 68 CC |  if_b	wrlong	#0, fp
0fac0     28 4E 85 C1 |  if_b	sub	fp, #40
0fac4                 | '   if ss>1.0 then ss=1.0
0fac4     28 4E 05 F1 | 	add	fp, #40
0fac8     A7 12 02 FB | 	rdlong	arg01, fp
0facc     28 4E 85 F1 | 	sub	fp, #40
0fad0     00 C0 1F FF 
0fad4     00 14 06 F6 | 	mov	arg02, ##1065353216
0fad8     01 16 66 F6 | 	neg	arg03, #1
0fadc     E4 96 B1 FD | 	call	#__system___float_cmp
0fae0     01 FA 55 F2 | 	cmps	result1, #1 wc
0fae4     28 4E 05 31 |  if_ae	add	fp, #40
0fae8     00 C0 9F 3F 
0faec     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0faf0     28 4E 85 31 |  if_ae	sub	fp, #40
0faf4     20 4E 05 F1 | 	add	fp, #32
0faf8     A7 12 02 FB | 	rdlong	arg01, fp
0fafc     04 4E 05 F1 | 	add	fp, #4
0fb00     A7 14 02 FB | 	rdlong	arg02, fp
0fb04     24 4E 85 F1 | 	sub	fp, #36
0fb08     B4 8E B1 FD | 	call	#__system___float_add
0fb0c     FD 12 02 F6 | 	mov	arg01, result1
0fb10     2C 4E 05 F1 | 	add	fp, #44
0fb14     A7 14 02 FB | 	rdlong	arg02, fp
0fb18     2C 4E 85 F1 | 	sub	fp, #44
0fb1c     A0 8E B1 FD | 	call	#__system___float_add
0fb20     30 4E 05 F1 | 	add	fp, #48
0fb24     A7 FA 61 FC | 	wrlong	result1, fp
0fb28     FD 14 02 F6 | 	mov	arg02, result1
0fb2c     30 4E 85 F1 | 	sub	fp, #48
0fb30     00 C0 21 FF 
0fb34     00 12 06 F6 | 	mov	arg01, ##1132462080
0fb38     58 94 B1 FD | 	call	#__system___float_div
0fb3c     34 4E 05 F1 | 	add	fp, #52
0fb40     A7 FA 61 FC | 	wrlong	result1, fp
0fb44     14 4E 85 F1 | 	sub	fp, #20
0fb48     A7 12 02 FB | 	rdlong	arg01, fp
0fb4c     FD 14 02 F6 | 	mov	arg02, result1
0fb50     20 4E 85 F1 | 	sub	fp, #32
0fb54     38 92 B1 FD | 	call	#__system___float_mul
0fb58     FD 12 02 F6 | 	mov	arg01, result1
0fb5c     01 14 06 F6 | 	mov	arg02, #1
0fb60     F4 96 B1 FD | 	call	#__system___float_tointeger
0fb64     A7 FA 61 FC | 	wrlong	result1, fp
0fb68     24 4E 05 F1 | 	add	fp, #36
0fb6c     A7 12 02 FB | 	rdlong	arg01, fp
0fb70     10 4E 05 F1 | 	add	fp, #16
0fb74     A7 14 02 FB | 	rdlong	arg02, fp
0fb78     34 4E 85 F1 | 	sub	fp, #52
0fb7c     10 92 B1 FD | 	call	#__system___float_mul
0fb80     FD 12 02 F6 | 	mov	arg01, result1
0fb84     01 14 06 F6 | 	mov	arg02, #1
0fb88     CC 96 B1 FD | 	call	#__system___float_tointeger
0fb8c     04 4E 05 F1 | 	add	fp, #4
0fb90     A7 FA 61 FC | 	wrlong	result1, fp
0fb94     28 4E 05 F1 | 	add	fp, #40
0fb98     A7 12 02 FB | 	rdlong	arg01, fp
0fb9c     08 4E 05 F1 | 	add	fp, #8
0fba0     A7 14 02 FB | 	rdlong	arg02, fp
0fba4     34 4E 85 F1 | 	sub	fp, #52
0fba8     E4 91 B1 FD | 	call	#__system___float_mul
0fbac     FD 12 02 F6 | 	mov	arg01, result1
0fbb0     01 14 06 F6 | 	mov	arg02, #1
0fbb4     A0 96 B1 FD | 	call	#__system___float_tointeger
0fbb8     0C 4E 05 F1 | 	add	fp, #12
0fbbc     A7 FA 61 FC | 	wrlong	result1, fp
0fbc0     0C 4E 85 F1 | 	sub	fp, #12
0fbc4     F8 BF 23 FF 
0fbc8     00 28 06 F6 | 	mov	local02, ##1199566848
0fbcc     A7 12 02 FB | 	rdlong	arg01, fp
0fbd0     09 13 52 F6 | 	abs	arg01, arg01 wc
0fbd4     1F 2C C6 C9 |  if_b	decod	local04, #31
0fbd8     00 2C 06 36 |  if_ae	mov	local04, #0
0fbdc     AC 8D B1 FD | 	call	#__system___float_fromuns
0fbe0     16 FB 61 F5 | 	xor	result1, local04
0fbe4     FD 14 02 F6 | 	mov	arg02, result1
0fbe8     14 13 02 F6 | 	mov	arg01, local02
0fbec     A4 93 B1 FD | 	call	#__system___float_div
0fbf0     38 4E 05 F1 | 	add	fp, #56
0fbf4     A7 FA 61 FC | 	wrlong	result1, fp
0fbf8     F8 BF 23 FF 
0fbfc     00 28 06 F6 | 	mov	local02, ##1199566848
0fc00     10 4E 85 F1 | 	sub	fp, #16
0fc04     A7 14 02 FB | 	rdlong	arg02, fp
0fc08     28 4E 85 F1 | 	sub	fp, #40
0fc0c     F8 BF 23 FF 
0fc10     00 12 06 F6 | 	mov	arg01, ##1199566848
0fc14     78 91 B1 FD | 	call	#__system___float_mul
0fc18     FD 14 02 F6 | 	mov	arg02, result1
0fc1c     14 13 02 F6 | 	mov	arg01, local02
0fc20     1F 14 E6 F4 | 	bitnot	arg02, #31
0fc24     98 8D B1 FD | 	call	#__system___float_add
0fc28     FD 28 02 F6 | 	mov	local02, result1
0fc2c     04 4E 05 F1 | 	add	fp, #4
0fc30     A7 12 02 FB | 	rdlong	arg01, fp
0fc34     04 4E 85 F1 | 	sub	fp, #4
0fc38     09 13 52 F6 | 	abs	arg01, arg01 wc
0fc3c     1F 2C C6 C9 |  if_b	decod	local04, #31
0fc40     00 2C 06 36 |  if_ae	mov	local04, #0
0fc44     44 8D B1 FD | 	call	#__system___float_fromuns
0fc48     16 FB 61 F5 | 	xor	result1, local04
0fc4c     FD 14 02 F6 | 	mov	arg02, result1
0fc50     14 13 02 F6 | 	mov	arg01, local02
0fc54     3C 93 B1 FD | 	call	#__system___float_div
0fc58     24 4E 05 F1 | 	add	fp, #36
0fc5c     A7 FA 61 FC | 	wrlong	result1, fp
0fc60     04 4E 05 F1 | 	add	fp, #4
0fc64     A7 14 02 FB | 	rdlong	arg02, fp
0fc68     28 4E 85 F1 | 	sub	fp, #40
0fc6c     F8 BF 23 FF 
0fc70     00 12 06 F6 | 	mov	arg01, ##1199566848
0fc74     18 91 B1 FD | 	call	#__system___float_mul
0fc78     FD 28 02 F6 | 	mov	local02, result1
0fc7c     0C 4E 05 F1 | 	add	fp, #12
0fc80     A7 12 02 FB | 	rdlong	arg01, fp
0fc84     0C 4E 85 F1 | 	sub	fp, #12
0fc88     09 13 52 F6 | 	abs	arg01, arg01 wc
0fc8c     1F 2C C6 C9 |  if_b	decod	local04, #31
0fc90     00 2C 06 36 |  if_ae	mov	local04, #0
0fc94     F4 8C B1 FD | 	call	#__system___float_fromuns
0fc98     16 FB 61 F5 | 	xor	result1, local04
0fc9c     FD 14 02 F6 | 	mov	arg02, result1
0fca0     14 13 02 F6 | 	mov	arg01, local02
0fca4     EC 92 B1 FD | 	call	#__system___float_div
0fca8     3C 4E 05 F1 | 	add	fp, #60
0fcac     A7 FA 61 FC | 	wrlong	result1, fp
0fcb0     24 4E 85 F1 | 	sub	fp, #36
0fcb4     A7 2E 02 FB | 	rdlong	local05, fp
0fcb8     18 4E 85 F1 | 	sub	fp, #24
0fcbc     01 2E 66 F0 | 	shl	local05, #1
0fcc0     52 00 00 FF 
0fcc4     B4 E4 05 F1 | 	add	objptr, ##42164
0fcc8     F2 2E 02 F1 | 	add	local05, objptr
0fccc     A7 30 02 FB | 	rdlong	local06, fp
0fcd0     04 4E 05 F1 | 	add	fp, #4
0fcd4     A7 2A 02 FB | 	rdlong	local03, fp
0fcd8     15 31 02 F1 | 	add	local06, local03
0fcdc     17 31 52 FC | 	wrword	local06, local05
0fce0     1C 4E 05 F1 | 	add	fp, #28
0fce4     A7 00 68 FC | 	wrlong	#0, fp
0fce8                 | '   fulltime=aa+dd+rr
0fce8                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
0fce8                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
0fce8                 | '   suspoints(channel)=a+d
0fce8                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0fce8     0C 4E 85 F1 | 	sub	fp, #12
0fcec     A7 00 68 FC | 	wrlong	#0, fp
0fcf0     14 4E 85 F1 | 	sub	fp, #20
0fcf4     A7 32 02 FB | 	rdlong	local07, fp
0fcf8     52 00 00 FF 
0fcfc     B4 E4 85 F1 | 	sub	objptr, ##42164
0fd00                 | LR__1314
0fd00     14 4E 05 F1 | 	add	fp, #20
0fd04     A7 28 02 FB | 	rdlong	local02, fp
0fd08     14 4E 85 F1 | 	sub	fp, #20
0fd0c     19 29 52 F2 | 	cmps	local02, local07 wc
0fd10     80 00 90 3D |  if_ae	jmp	#LR__1315
0fd14     18 4E 05 F1 | 	add	fp, #24
0fd18     A7 30 02 FB | 	rdlong	local06, fp
0fd1c     09 30 66 F0 | 	shl	local06, #9
0fd20     0C 00 00 FF 
0fd24     D8 E4 05 F1 | 	add	objptr, ##6360
0fd28     F2 30 02 F1 | 	add	local06, objptr
0fd2c     04 4E 85 F1 | 	sub	fp, #4
0fd30     A7 2E 02 FB | 	rdlong	local05, fp
0fd34     01 2E 66 F0 | 	shl	local05, #1
0fd38     18 2F 02 F1 | 	add	local05, local06
0fd3c     0C 4E 05 F1 | 	add	fp, #12
0fd40     A7 12 02 FB | 	rdlong	arg01, fp
0fd44     20 4E 85 F1 | 	sub	fp, #32
0fd48     0C 00 00 FF 
0fd4c     D8 E4 85 F1 | 	sub	objptr, ##6360
0fd50     01 14 06 F6 | 	mov	arg02, #1
0fd54     00 95 B1 FD | 	call	#__system___float_tointeger
0fd58     17 FB 51 FC | 	wrword	result1, local05
0fd5c     20 4E 05 F1 | 	add	fp, #32
0fd60     A7 12 02 FB | 	rdlong	arg01, fp
0fd64     18 4E 05 F1 | 	add	fp, #24
0fd68     A7 14 02 FB | 	rdlong	arg02, fp
0fd6c     38 4E 85 F1 | 	sub	fp, #56
0fd70     4C 8C B1 FD | 	call	#__system___float_add
0fd74     20 4E 05 F1 | 	add	fp, #32
0fd78     A7 FA 61 FC | 	wrlong	result1, fp
0fd7c     0C 4E 85 F1 | 	sub	fp, #12
0fd80     A7 30 02 FB | 	rdlong	local06, fp
0fd84     01 30 06 F1 | 	add	local06, #1
0fd88     A7 30 62 FC | 	wrlong	local06, fp
0fd8c     14 4E 85 F1 | 	sub	fp, #20
0fd90     6C FF 9F FD | 	jmp	#LR__1314
0fd94                 | LR__1315
0fd94                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0fd94     A7 28 02 FB | 	rdlong	local02, fp
0fd98     14 4E 05 F1 | 	add	fp, #20
0fd9c     A7 28 62 FC | 	wrlong	local02, fp
0fda0     14 4E 85 F1 | 	sub	fp, #20
0fda4     A7 34 02 FB | 	rdlong	local08, fp
0fda8     04 4E 05 F1 | 	add	fp, #4
0fdac     A7 28 02 FB | 	rdlong	local02, fp
0fdb0     04 4E 85 F1 | 	sub	fp, #4
0fdb4     14 35 02 F1 | 	add	local08, local02
0fdb8                 | LR__1316
0fdb8     14 4E 05 F1 | 	add	fp, #20
0fdbc     A7 28 02 FB | 	rdlong	local02, fp
0fdc0     14 4E 85 F1 | 	sub	fp, #20
0fdc4     1A 29 52 F2 | 	cmps	local02, local08 wc
0fdc8     A8 00 90 3D |  if_ae	jmp	#LR__1317
0fdcc     18 4E 05 F1 | 	add	fp, #24
0fdd0     A7 32 02 FB | 	rdlong	local07, fp
0fdd4     09 32 66 F0 | 	shl	local07, #9
0fdd8     0C 00 00 FF 
0fddc     D8 E4 05 F1 | 	add	objptr, ##6360
0fde0     F2 32 02 F1 | 	add	local07, objptr
0fde4     04 4E 85 F1 | 	sub	fp, #4
0fde8     A7 30 02 FB | 	rdlong	local06, fp
0fdec     01 30 66 F0 | 	shl	local06, #1
0fdf0     19 31 02 F1 | 	add	local06, local07
0fdf4     0C 4E 05 F1 | 	add	fp, #12
0fdf8     A7 12 02 FB | 	rdlong	arg01, fp
0fdfc     20 4E 85 F1 | 	sub	fp, #32
0fe00     0C 00 00 FF 
0fe04     D8 E4 85 F1 | 	sub	objptr, ##6360
0fe08     01 14 06 F6 | 	mov	arg02, #1
0fe0c     48 94 B1 FD | 	call	#__system___float_tointeger
0fe10     18 FB 51 FC | 	wrword	result1, local06
0fe14     20 4E 05 F1 | 	add	fp, #32
0fe18     A7 12 02 FB | 	rdlong	arg01, fp
0fe1c     04 4E 05 F1 | 	add	fp, #4
0fe20     A7 14 02 FB | 	rdlong	arg02, fp
0fe24     24 4E 85 F1 | 	sub	fp, #36
0fe28     1F 14 E6 F4 | 	bitnot	arg02, #31
0fe2c     90 8B B1 FD | 	call	#__system___float_add
0fe30     20 4E 05 F1 | 	add	fp, #32
0fe34     A7 FA 61 FC | 	wrlong	result1, fp
0fe38     20 4E 85 F1 | 	sub	fp, #32
0fe3c     FD 12 02 F6 | 	mov	arg01, result1
0fe40     00 14 06 F6 | 	mov	arg02, #0
0fe44     01 16 06 F6 | 	mov	arg03, #1
0fe48     78 93 B1 FD | 	call	#__system___float_cmp
0fe4c     00 FA 55 F2 | 	cmps	result1, #0 wc
0fe50     20 4E 05 C1 |  if_b	add	fp, #32
0fe54     A7 00 68 CC |  if_b	wrlong	#0, fp
0fe58     20 4E 85 C1 |  if_b	sub	fp, #32
0fe5c     14 4E 05 F1 | 	add	fp, #20
0fe60     A7 32 02 FB | 	rdlong	local07, fp
0fe64     01 32 06 F1 | 	add	local07, #1
0fe68     A7 32 62 FC | 	wrlong	local07, fp
0fe6c     14 4E 85 F1 | 	sub	fp, #20
0fe70     44 FF 9F FD | 	jmp	#LR__1316
0fe74                 | LR__1317
0fe74                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0fe74     A7 28 02 FB | 	rdlong	local02, fp
0fe78     04 4E 05 F1 | 	add	fp, #4
0fe7c     A7 34 02 FB | 	rdlong	local08, fp
0fe80     1A 29 02 F1 | 	add	local02, local08
0fe84     10 4E 05 F1 | 	add	fp, #16
0fe88     A7 28 62 FC | 	wrlong	local02, fp
0fe8c     14 4E 85 F1 | 	sub	fp, #20
0fe90                 | LR__1318
0fe90     14 4E 05 F1 | 	add	fp, #20
0fe94     A7 2E 02 FB | 	rdlong	local05, fp
0fe98     14 4E 85 F1 | 	sub	fp, #20
0fe9c     00 2F 56 F2 | 	cmps	local05, #256 wc
0fea0     A8 00 90 3D |  if_ae	jmp	#LR__1319
0fea4     18 4E 05 F1 | 	add	fp, #24
0fea8     A7 34 02 FB | 	rdlong	local08, fp
0feac     09 34 66 F0 | 	shl	local08, #9
0feb0     0C 00 00 FF 
0feb4     D8 E4 05 F1 | 	add	objptr, ##6360
0feb8     F2 34 02 F1 | 	add	local08, objptr
0febc     04 4E 85 F1 | 	sub	fp, #4
0fec0     A7 32 02 FB | 	rdlong	local07, fp
0fec4     01 32 66 F0 | 	shl	local07, #1
0fec8     1A 33 02 F1 | 	add	local07, local08
0fecc     0C 4E 05 F1 | 	add	fp, #12
0fed0     A7 12 02 FB | 	rdlong	arg01, fp
0fed4     20 4E 85 F1 | 	sub	fp, #32
0fed8     0C 00 00 FF 
0fedc     D8 E4 85 F1 | 	sub	objptr, ##6360
0fee0     01 14 06 F6 | 	mov	arg02, #1
0fee4     70 93 B1 FD | 	call	#__system___float_tointeger
0fee8     19 FB 51 FC | 	wrword	result1, local07
0feec     20 4E 05 F1 | 	add	fp, #32
0fef0     A7 12 02 FB | 	rdlong	arg01, fp
0fef4     1C 4E 05 F1 | 	add	fp, #28
0fef8     A7 14 02 FB | 	rdlong	arg02, fp
0fefc     3C 4E 85 F1 | 	sub	fp, #60
0ff00     1F 14 E6 F4 | 	bitnot	arg02, #31
0ff04     B8 8A B1 FD | 	call	#__system___float_add
0ff08     20 4E 05 F1 | 	add	fp, #32
0ff0c     A7 FA 61 FC | 	wrlong	result1, fp
0ff10     20 4E 85 F1 | 	sub	fp, #32
0ff14     FD 12 02 F6 | 	mov	arg01, result1
0ff18     00 14 06 F6 | 	mov	arg02, #0
0ff1c     01 16 06 F6 | 	mov	arg03, #1
0ff20     A0 92 B1 FD | 	call	#__system___float_cmp
0ff24     00 FA 55 F2 | 	cmps	result1, #0 wc
0ff28     20 4E 05 C1 |  if_b	add	fp, #32
0ff2c     A7 00 68 CC |  if_b	wrlong	#0, fp
0ff30     20 4E 85 C1 |  if_b	sub	fp, #32
0ff34     14 4E 05 F1 | 	add	fp, #20
0ff38     A7 34 02 FB | 	rdlong	local08, fp
0ff3c     01 34 06 F1 | 	add	local08, #1
0ff40     A7 34 62 FC | 	wrlong	local08, fp
0ff44     14 4E 85 F1 | 	sub	fp, #20
0ff48     44 FF 9F FD | 	jmp	#LR__1318
0ff4c                 | LR__1319
0ff4c     18 4E 05 F1 | 	add	fp, #24
0ff50     A7 2E 02 FB | 	rdlong	local05, fp
0ff54     18 4E 85 F1 | 	sub	fp, #24
0ff58     09 2E 66 F0 | 	shl	local05, #9
0ff5c     0C 00 00 FF 
0ff60     D8 E4 05 F1 | 	add	objptr, ##6360
0ff64     F2 2E 02 F1 | 	add	local05, objptr
0ff68     FE 2F 06 F1 | 	add	local05, #510
0ff6c     17 01 58 FC | 	wrword	#0, local05
0ff70     0C 00 00 FF 
0ff74     D8 E4 85 F1 | 	sub	objptr, ##6360
0ff78                 | LR__1320
0ff78     18 4E 05 F1 | 	add	fp, #24
0ff7c     A7 2E 02 FB | 	rdlong	local05, fp
0ff80     18 4E 85 F1 | 	sub	fp, #24
0ff84     09 2E 66 F0 | 	shl	local05, #9
0ff88     0C 00 00 FF 
0ff8c     D8 E4 05 F1 | 	add	objptr, ##6360
0ff90     F2 2E 02 F1 | 	add	local05, objptr
0ff94     FE 2F 06 F1 | 	add	local05, #510
0ff98     17 01 58 FC | 	wrword	#0, local05
0ff9c     0C 00 00 FF 
0ffa0     D8 E4 85 F1 | 	sub	objptr, ##6360
0ffa4                 | LR__1321
0ffa4     A7 F0 03 F6 | 	mov	ptra, fp
0ffa8     B2 00 A0 FD | 	call	#popregs_
0ffac                 | _do_defenv_ret
0ffac     2D 00 64 FD | 	ret
0ffb0                 | 
0ffb0                 | ' 
0ffb0                 | ' '-------------------- defsnd
0ffb0                 | ' 
0ffb0                 | ' sub do_defsnd
0ffb0                 | _do_defsnd
0ffb0     04 4A 05 F6 | 	mov	COUNT_, #4
0ffb4     A8 00 A0 FD | 	call	#pushregs_
0ffb8     88 F0 07 F1 | 	add	ptra, #136
0ffbc     4A 00 00 FF 
0ffc0     80 E4 05 F1 | 	add	objptr, ##38016
0ffc4     F2 1A 02 FB | 	rdlong	arg05, objptr
0ffc8     0D 19 02 F6 | 	mov	arg04, arg05
0ffcc     01 18 66 F0 | 	shl	arg04, #1
0ffd0     0D 19 02 F1 | 	add	arg04, arg05
0ffd4     02 18 66 F0 | 	shl	arg04, #2
0ffd8     03 00 00 FF 
0ffdc     04 E4 85 F1 | 	sub	objptr, ##1540
0ffe0     F2 18 02 F1 | 	add	arg04, objptr
0ffe4     0C 1B 02 FB | 	rdlong	arg05, arg04
0ffe8     A7 1A 62 FC | 	wrlong	arg05, fp
0ffec                 | ' 
0ffec                 | ' numpar=compiledline(lineptr_e).result.uresult
0ffec                 | ' 
0ffec                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0ffec                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0ffec                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0ffec                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0ffec                 | ' 
0ffec                 | ' if numpar<2 then return
0ffec     02 1A 56 F2 | 	cmps	arg05, #2 wc
0fff0     47 00 00 FF 
0fff4     7C E4 85 F1 | 	sub	objptr, ##36476
0fff8     94 08 90 CD |  if_b	jmp	#LR__1353
0fffc                 | '  
0fffc                 | ' if numpar=2 then
0fffc     A7 1A 02 FB | 	rdlong	arg05, fp
10000     02 1A 0E F2 | 	cmp	arg05, #2 wz
10004     A0 03 90 5D |  if_ne	jmp	#LR__1340
10008     D4 D2 BF FD | 	call	#_pop
1000c     FF 1A 02 F6 | 	mov	arg05, result3
10010     2C 4E 05 F1 | 	add	fp, #44
10014     A7 FA 61 FC | 	wrlong	result1, fp
10018     04 4E 05 F1 | 	add	fp, #4
1001c     A7 FC 61 FC | 	wrlong	result2, fp
10020     04 4E 05 F1 | 	add	fp, #4
10024     A7 1A 62 FC | 	wrlong	arg05, fp
10028                 | '   t1=pop()
10028                 | '   if t1.result_type=result_string2 then 
10028     34 4E 85 F1 | 	sub	fp, #52
1002c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
10030     20 00 90 5D |  if_ne	jmp	#LR__1330
10034     2C 4E 05 F1 | 	add	fp, #44
10038     A7 12 02 FB | 	rdlong	arg01, fp
1003c     2C 4E 85 F1 | 	sub	fp, #44
10040     14 D4 BF FD | 	call	#_convertstring
10044     38 4E 05 F1 | 	add	fp, #56
10048     A7 FA 61 FC | 	wrlong	result1, fp
1004c     38 4E 85 F1 | 	sub	fp, #56
10050     58 00 90 FD | 	jmp	#LR__1333
10054                 | LR__1330
10054     34 4E 05 F1 | 	add	fp, #52
10058     A7 1A 02 FB | 	rdlong	arg05, fp
1005c     34 4E 85 F1 | 	sub	fp, #52
10060     1F 1A 0E F2 | 	cmp	arg05, #31 wz
10064     18 00 90 5D |  if_ne	jmp	#LR__1331
10068     2C 4E 05 F1 | 	add	fp, #44
1006c     A7 1A 02 FB | 	rdlong	arg05, fp
10070     0C 4E 05 F1 | 	add	fp, #12
10074     A7 1A 62 FC | 	wrlong	arg05, fp
10078     38 4E 85 F1 | 	sub	fp, #56
1007c     2C 00 90 FD | 	jmp	#LR__1332
10080                 | LR__1331
10080     B1 01 00 FF 
10084     93 1A 06 F6 | 	mov	arg05, ##@LR__5843
10088     38 4E 05 F1 | 	add	fp, #56
1008c     A7 1A 62 FC | 	wrlong	arg05, fp
10090     0C 4E 85 F1 | 	sub	fp, #12
10094     A7 12 02 F6 | 	mov	arg01, fp
10098     2C 4E 85 F1 | 	sub	fp, #44
1009c     24 D4 BF FD | 	call	#_converttoint
100a0     14 4E 05 F1 | 	add	fp, #20
100a4     A7 FA 61 FC | 	wrlong	result1, fp
100a8     14 4E 85 F1 | 	sub	fp, #20
100ac                 | LR__1332
100ac                 | LR__1333
100ac                 | '   if s<>"" then 
100ac     38 4E 05 F1 | 	add	fp, #56
100b0     A7 12 02 FB | 	rdlong	arg01, fp
100b4     38 4E 85 F1 | 	sub	fp, #56
100b8     B1 01 00 FF 
100bc     94 14 06 F6 | 	mov	arg02, ##@LR__5844
100c0     7C 5E B1 FD | 	call	#__system___string_cmp
100c4     00 FA 0D F2 | 	cmp	result1, #0 wz
100c8     E0 01 90 AD |  if_e	jmp	#LR__1336
100cc     10 D2 BF FD | 	call	#_pop
100d0     FF 1A 02 F6 | 	mov	arg05, result3
100d4     2C 4E 05 F1 | 	add	fp, #44
100d8     A7 FA 61 FC | 	wrlong	result1, fp
100dc     04 4E 05 F1 | 	add	fp, #4
100e0     A7 FC 61 FC | 	wrlong	result2, fp
100e4     04 4E 05 F1 | 	add	fp, #4
100e8     A7 1A 62 FC | 	wrlong	arg05, fp
100ec     08 4E 85 F1 | 	sub	fp, #8
100f0     A7 12 02 F6 | 	mov	arg01, fp
100f4     2C 4E 85 F1 | 	sub	fp, #44
100f8     C8 D3 BF FD | 	call	#_converttoint
100fc     10 4E 05 F1 | 	add	fp, #16
10100     A7 FA 61 FC | 	wrlong	result1, fp
10104                 | '     t1=pop()
10104                 | '     channel=converttoint(t1) : if channel>31 then return
10104     FD 1A 02 F6 | 	mov	arg05, result1
10108     10 4E 85 F1 | 	sub	fp, #16
1010c     20 1A 56 F2 | 	cmps	arg05, #32 wc
10110     7C 07 90 3D |  if_ae	jmp	#LR__1353
10114                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10114     09 12 06 F6 | 	mov	arg01, #9
10118     54 B1 B1 FD | 	call	#__system__close
1011c     09 26 06 F6 | 	mov	local01, #9
10120     B1 01 00 FF 
10124     95 12 06 F6 | 	mov	arg01, ##@LR__5845
10128     38 4E 05 F1 | 	add	fp, #56
1012c     A7 14 02 FB | 	rdlong	arg02, fp
10130     38 4E 85 F1 | 	sub	fp, #56
10134     3C 5E B1 FD | 	call	#__system___string_concat
10138     FD 14 02 F6 | 	mov	arg02, result1
1013c     13 13 02 F6 | 	mov	arg01, local01
10140     00 16 06 F6 | 	mov	arg03, #0
10144     D4 69 B1 FD | 	call	#__system___basic_open_string
10148     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1014c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
10150     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10154     52 00 00 FF 
10158     10 E5 05 F1 | 	add	objptr, ##42256
1015c     F2 FA 61 FC | 	wrlong	result1, objptr
10160                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
10160     52 00 00 FF 
10164     10 E5 85 F1 | 	sub	objptr, ##42256
10168     B0 00 90 AD |  if_e	jmp	#LR__1334
1016c     00 12 06 F6 | 	mov	arg01, #0
10170     CC BA B1 FD | 	call	#__system___getiolock_0602
10174     FD 12 02 F6 | 	mov	arg01, result1
10178     9C 5D B1 FD | 	call	#__system___lockmem
1017c     B1 01 00 FF 
10180     A2 14 06 F6 | 	mov	arg02, ##@LR__5846
10184     00 12 06 F6 | 	mov	arg01, #0
10188     00 16 06 F6 | 	mov	arg03, #0
1018c     7C 6A B1 FD | 	call	#__system___basic_print_string
10190     52 00 00 FF 
10194     10 E5 05 F1 | 	add	objptr, ##42256
10198     F2 14 02 FB | 	rdlong	arg02, objptr
1019c     52 00 00 FF 
101a0     10 E5 85 F1 | 	sub	objptr, ##42256
101a4     00 12 06 F6 | 	mov	arg01, #0
101a8     00 16 06 F6 | 	mov	arg03, #0
101ac     0A 18 06 F6 | 	mov	arg04, #10
101b0     9C 6A B1 FD | 	call	#__system___basic_print_integer
101b4     B1 01 00 FF 
101b8     B0 14 06 F6 | 	mov	arg02, ##@LR__5847
101bc     00 12 06 F6 | 	mov	arg01, #0
101c0     00 16 06 F6 | 	mov	arg03, #0
101c4     44 6A B1 FD | 	call	#__system___basic_print_string
101c8     00 26 06 F6 | 	mov	local01, #0
101cc     52 00 00 FF 
101d0     10 E5 05 F1 | 	add	objptr, ##42256
101d4     F2 12 02 FB | 	rdlong	arg01, objptr
101d8     52 00 00 FF 
101dc     10 E5 85 F1 | 	sub	objptr, ##42256
101e0     C0 86 B1 FD | 	call	#__system___strerror
101e4     FD 14 02 F6 | 	mov	arg02, result1
101e8     13 13 02 F6 | 	mov	arg01, local01
101ec     00 16 06 F6 | 	mov	arg03, #0
101f0     18 6A B1 FD | 	call	#__system___basic_print_string
101f4     00 12 06 F6 | 	mov	arg01, #0
101f8     0A 14 06 F6 | 	mov	arg02, #10
101fc     00 16 06 F6 | 	mov	arg03, #0
10200     B0 69 B1 FD | 	call	#__system___basic_print_char
10204     00 12 06 F6 | 	mov	arg01, #0
10208     34 BA B1 FD | 	call	#__system___getiolock_0602
1020c     FD 00 68 FC | 	wrlong	#0, result1
10210     09 12 06 F6 | 	mov	arg01, #9
10214     58 B0 B1 FD | 	call	#__system__close
10218     74 06 90 FD | 	jmp	#LR__1353
1021c                 | LR__1334
1021c                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
1021c     04 4E 05 F1 | 	add	fp, #4
10220     A7 00 68 FC | 	wrlong	#0, fp
10224                 | LR__1335
10224     A7 26 02 FB | 	rdlong	local01, fp
10228     01 26 66 F0 | 	shl	local01, #1
1022c     11 14 06 F6 | 	mov	arg02, #17
10230     13 15 02 F1 | 	add	arg02, local01
10234     78 4E 05 F1 | 	add	fp, #120
10238     A7 16 02 F6 | 	mov	arg03, fp
1023c     7C 4E 85 F1 | 	sub	fp, #124
10240     09 12 06 F6 | 	mov	arg01, #9
10244     01 18 06 F6 | 	mov	arg04, #1
10248     02 1A 06 F6 | 	mov	arg05, #2
1024c     38 6B B1 FD | 	call	#__system___basic_get
10250     10 4E 05 F1 | 	add	fp, #16
10254     A7 12 02 FB | 	rdlong	arg01, fp
10258     0B 12 66 F0 | 	shl	arg01, #11
1025c     0C 4E 85 F1 | 	sub	fp, #12
10260     A7 26 02 FB | 	rdlong	local01, fp
10264     01 26 66 F0 | 	shl	local01, #1
10268     13 13 02 F1 | 	add	arg01, local01
1026c     78 4E 05 F1 | 	add	fp, #120
10270     A7 14 E2 FA | 	rdword	arg02, fp
10274     7C 4E 85 F1 | 	sub	fp, #124
10278     0F 14 66 F7 | 	signx	arg02, #15
1027c     94 24 B1 FD | 	call	#_psdpoke
10280     04 4E 05 F1 | 	add	fp, #4
10284     A7 26 02 FB | 	rdlong	local01, fp
10288     01 26 06 F1 | 	add	local01, #1
1028c     A7 26 62 FC | 	wrlong	local01, fp
10290     02 00 00 FF 
10294     01 26 56 F2 | 	cmps	local01, ##1025 wc
10298     88 FF 9F CD |  if_b	jmp	#LR__1335
1029c     04 4E 85 F1 | 	sub	fp, #4
102a0                 | '     close #9
102a0     09 12 06 F6 | 	mov	arg01, #9
102a4     C8 AF B1 FD | 	call	#__system__close
102a8                 | '     return
102a8     E4 05 90 FD | 	jmp	#LR__1353
102ac                 | LR__1336
102ac                 | '     if wptr < ($80000 - 2048) then 
102ac     14 4E 05 F1 | 	add	fp, #20
102b0     A7 26 02 FB | 	rdlong	local01, fp
102b4     14 4E 85 F1 | 	sub	fp, #20
102b8     FC 03 00 FF 
102bc     00 26 56 F2 | 	cmps	local01, ##522240 wc
102c0     70 00 90 3D |  if_ae	jmp	#LR__1338
102c4                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
102c4     04 4E 05 F1 | 	add	fp, #4
102c8     A7 00 68 FC | 	wrlong	#0, fp
102cc     04 4E 85 F1 | 	sub	fp, #4
102d0                 | LR__1337
102d0     10 4E 05 F1 | 	add	fp, #16
102d4     A7 26 02 FB | 	rdlong	local01, fp
102d8     0B 26 66 F0 | 	shl	local01, #11
102dc     0C 4E 85 F1 | 	sub	fp, #12
102e0     A7 1A 02 FB | 	rdlong	arg05, fp
102e4     0D 19 02 F6 | 	mov	arg04, arg05
102e8     01 18 66 F0 | 	shl	arg04, #1
102ec     0C 27 02 F1 | 	add	local01, arg04
102f0     10 4E 05 F1 | 	add	fp, #16
102f4     A7 12 02 FB | 	rdlong	arg01, fp
102f8     14 4E 85 F1 | 	sub	fp, #20
102fc     01 1A 66 F0 | 	shl	arg05, #1
10300     0D 13 02 F1 | 	add	arg01, arg05
10304     09 15 E2 FA | 	rdword	arg02, arg01
10308     13 13 02 F6 | 	mov	arg01, local01
1030c     04 24 B1 FD | 	call	#_psdpoke
10310     04 4E 05 F1 | 	add	fp, #4
10314     A7 26 02 FB | 	rdlong	local01, fp
10318     01 26 06 F1 | 	add	local01, #1
1031c     A7 26 62 FC | 	wrlong	local01, fp
10320     04 4E 85 F1 | 	sub	fp, #4
10324     02 00 00 FF 
10328     00 26 56 F2 | 	cmps	local01, ##1024 wc
1032c     A0 FF 9F CD |  if_b	jmp	#LR__1337
10330     5C 05 90 FD | 	jmp	#LR__1353
10334                 | LR__1338
10334                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
10334     04 4E 05 F1 | 	add	fp, #4
10338     A7 00 68 FC | 	wrlong	#0, fp
1033c     04 4E 85 F1 | 	sub	fp, #4
10340                 | LR__1339
10340     10 4E 05 F1 | 	add	fp, #16
10344     A7 26 02 FB | 	rdlong	local01, fp
10348     0B 26 66 F0 | 	shl	local01, #11
1034c     0C 4E 85 F1 | 	sub	fp, #12
10350     A7 1A 02 FB | 	rdlong	arg05, fp
10354     0D 19 02 F6 | 	mov	arg04, arg05
10358     01 18 66 F0 | 	shl	arg04, #1
1035c     0C 27 02 F1 | 	add	local01, arg04
10360     10 4E 05 F1 | 	add	fp, #16
10364     A7 12 02 FB | 	rdlong	arg01, fp
10368     14 4E 85 F1 | 	sub	fp, #20
1036c     01 1A 66 F0 | 	shl	arg05, #1
10370     0D 13 02 F1 | 	add	arg01, arg05
10374     DC 24 B1 FD | 	call	#_psdpeek
10378     FD 14 02 F6 | 	mov	arg02, result1
1037c     13 13 02 F6 | 	mov	arg01, local01
10380     90 23 B1 FD | 	call	#_psdpoke
10384     04 4E 05 F1 | 	add	fp, #4
10388     A7 26 02 FB | 	rdlong	local01, fp
1038c     01 26 06 F1 | 	add	local01, #1
10390     A7 26 62 FC | 	wrlong	local01, fp
10394     04 4E 85 F1 | 	sub	fp, #4
10398     02 00 00 FF 
1039c     00 26 56 F2 | 	cmps	local01, ##1024 wc
103a0     9C FF 9F CD |  if_b	jmp	#LR__1339
103a4                 | '     return 
103a4     E8 04 90 FD | 	jmp	#LR__1353
103a8                 | '   return
103a8                 | LR__1340
103a8                 | ' for i=0 to 15 : harm(i)=0: next i  
103a8     04 4E 05 F1 | 	add	fp, #4
103ac     A7 00 68 FC | 	wrlong	#0, fp
103b0     97 16 48 FB | 	callpa	#(@LR__1342-@LR__1341)>>2,fcache_load_ptr_
103b4                 | LR__1341
103b4     A7 26 02 FB | 	rdlong	local01, fp
103b8     02 26 66 F0 | 	shl	local01, #2
103bc     38 4E 05 F1 | 	add	fp, #56
103c0     A7 26 02 F1 | 	add	local01, fp
103c4     13 01 68 FC | 	wrlong	#0, local01
103c8     38 4E 85 F1 | 	sub	fp, #56
103cc     A7 26 02 FB | 	rdlong	local01, fp
103d0     01 26 06 F1 | 	add	local01, #1
103d4     A7 26 62 FC | 	wrlong	local01, fp
103d8     10 26 56 F2 | 	cmps	local01, #16 wc
103dc     D4 FF 9F CD |  if_b	jmp	#LR__1341
103e0                 | LR__1342
103e0     04 4E 85 F1 | 	sub	fp, #4
103e4                 | ' for i=numpar to 2 step -1 
103e4     A7 26 02 FB | 	rdlong	local01, fp
103e8     04 4E 05 F1 | 	add	fp, #4
103ec     A7 26 62 FC | 	wrlong	local01, fp
103f0     04 4E 85 F1 | 	sub	fp, #4
103f4                 | LR__1343
103f4     E8 CE BF FD | 	call	#_pop
103f8     2C 4E 05 F1 | 	add	fp, #44
103fc     A7 FA 61 FC | 	wrlong	result1, fp
10400     04 4E 05 F1 | 	add	fp, #4
10404     A7 FC 61 FC | 	wrlong	result2, fp
10408     04 4E 05 F1 | 	add	fp, #4
1040c     A7 FE 61 FC | 	wrlong	result3, fp
10410     30 4E 85 F1 | 	sub	fp, #48
10414     A7 26 02 FB | 	rdlong	local01, fp
10418     02 26 86 F1 | 	sub	local01, #2
1041c     02 26 66 F0 | 	shl	local01, #2
10420     38 4E 05 F1 | 	add	fp, #56
10424     A7 26 02 F1 | 	add	local01, fp
10428     10 4E 85 F1 | 	sub	fp, #16
1042c     A7 12 02 F6 | 	mov	arg01, fp
10430     2C 4E 85 F1 | 	sub	fp, #44
10434     48 D1 BF FD | 	call	#_converttofloat
10438     13 FB 61 FC | 	wrlong	result1, local01
1043c     04 4E 05 F1 | 	add	fp, #4
10440     A7 26 02 FB | 	rdlong	local01, fp
10444     01 26 86 F1 | 	sub	local01, #1
10448     A7 26 62 FC | 	wrlong	local01, fp
1044c     04 4E 85 F1 | 	sub	fp, #4
10450     02 26 56 F2 | 	cmps	local01, #2 wc
10454     9C FF 9F 3D |  if_ae	jmp	#LR__1343
10458     84 CE BF FD | 	call	#_pop
1045c     FF 26 02 F6 | 	mov	local01, result3
10460     2C 4E 05 F1 | 	add	fp, #44
10464     A7 FA 61 FC | 	wrlong	result1, fp
10468     04 4E 05 F1 | 	add	fp, #4
1046c     A7 FC 61 FC | 	wrlong	result2, fp
10470     04 4E 05 F1 | 	add	fp, #4
10474     A7 26 62 FC | 	wrlong	local01, fp
10478     08 4E 85 F1 | 	sub	fp, #8
1047c     A7 12 02 F6 | 	mov	arg01, fp
10480     2C 4E 85 F1 | 	sub	fp, #44
10484     3C D0 BF FD | 	call	#_converttoint
10488     10 4E 05 F1 | 	add	fp, #16
1048c     A7 FA 61 FC | 	wrlong	result1, fp
10490                 | ' t1=pop()
10490                 | ' channel=converttoint(t1) : : if channel>31 then return
10490     FD 26 02 F6 | 	mov	local01, result1
10494     10 4E 85 F1 | 	sub	fp, #16
10498     20 26 56 F2 | 	cmps	local01, #32 wc
1049c     F0 03 90 3D |  if_ae	jmp	#LR__1353
104a0     20 4E 05 F1 | 	add	fp, #32
104a4     A7 00 68 FC | 	wrlong	#0, fp
104a8                 | ' max=0
104a8                 | ' if harm(0)<0 then
104a8     1C 4E 05 F1 | 	add	fp, #28
104ac     A7 12 02 FB | 	rdlong	arg01, fp
104b0     3C 4E 85 F1 | 	sub	fp, #60
104b4     00 14 06 F6 | 	mov	arg02, #0
104b8     01 16 06 F6 | 	mov	arg03, #1
104bc     04 8D B1 FD | 	call	#__system___float_cmp
104c0     00 FA 55 F2 | 	cmps	result1, #0 wc
104c4     04 01 90 3D |  if_ae	jmp	#LR__1346
104c8     3C 4E 05 F1 | 	add	fp, #60
104cc     A7 FA 01 FB | 	rdlong	result1, fp
104d0     1F FA 05 F4 | 	bitl	result1, #31
104d4     24 4E 85 F1 | 	sub	fp, #36
104d8     A7 FA 61 FC | 	wrlong	result1, fp
104dc     28 4E 05 F1 | 	add	fp, #40
104e0     A7 FA 01 FB | 	rdlong	result1, fp
104e4     1F FA 05 F4 | 	bitl	result1, #31
104e8     24 4E 85 F1 | 	sub	fp, #36
104ec     A7 FA 61 FC | 	wrlong	result1, fp
104f0     20 4E 05 F1 | 	add	fp, #32
104f4     00 C0 9F FF 
104f8     A7 00 68 FC | 	wrlong	##1065353216, fp
104fc     24 4E 85 F1 | 	sub	fp, #36
10500     A7 26 02 FB | 	rdlong	local01, fp
10504     28 4E 05 F1 | 	add	fp, #40
10508     A7 26 62 FC | 	wrlong	local01, fp
1050c     24 4E 85 F1 | 	sub	fp, #36
10510     A7 26 02 FB | 	rdlong	local01, fp
10514     28 4E 05 F1 | 	add	fp, #40
10518     A7 26 62 FC | 	wrlong	local01, fp
1051c                 | '   harm(0)=1
1051c                 | '   harm(1)=even
1051c                 | '   harm(2)=odd
1051c                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
1051c     40 4E 85 F1 | 	sub	fp, #64
10520     A7 06 68 FC | 	wrlong	#3, fp
10524                 | LR__1344
10524     A7 1A 02 FB | 	rdlong	arg05, fp
10528     0D 29 02 F6 | 	mov	local02, arg05
1052c     02 28 66 F0 | 	shl	local02, #2
10530     38 4E 05 F1 | 	add	fp, #56
10534     A7 28 02 F1 | 	add	local02, fp
10538     02 1A 86 F1 | 	sub	arg05, #2
1053c     02 1A 66 F0 | 	shl	arg05, #2
10540     A7 1A 02 F1 | 	add	arg05, fp
10544     0D 13 02 FB | 	rdlong	arg01, arg05
10548     24 4E 85 F1 | 	sub	fp, #36
1054c     A7 14 02 FB | 	rdlong	arg02, fp
10550     18 4E 85 F1 | 	sub	fp, #24
10554     38 88 B1 FD | 	call	#__system___float_mul
10558     14 FB 61 FC | 	wrlong	result1, local02
1055c     04 4E 05 F1 | 	add	fp, #4
10560     A7 2A 02 FB | 	rdlong	local03, fp
10564     02 2A 06 F1 | 	add	local03, #2
10568     A7 2A 62 FC | 	wrlong	local03, fp
1056c     10 2A 56 F2 | 	cmps	local03, #16 wc
10570     B0 FF 9F CD |  if_b	jmp	#LR__1344
10574                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
10574     A7 08 68 FC | 	wrlong	#4, fp
10578                 | LR__1345
10578     A7 2A 02 FB | 	rdlong	local03, fp
1057c     15 29 02 F6 | 	mov	local02, local03
10580     02 28 66 F0 | 	shl	local02, #2
10584     38 4E 05 F1 | 	add	fp, #56
10588     A7 28 02 F1 | 	add	local02, fp
1058c     02 2A 86 F1 | 	sub	local03, #2
10590     02 2A 66 F0 | 	shl	local03, #2
10594     A7 2A 02 F1 | 	add	local03, fp
10598     15 13 02 FB | 	rdlong	arg01, local03
1059c     20 4E 85 F1 | 	sub	fp, #32
105a0     A7 14 02 FB | 	rdlong	arg02, fp
105a4     1C 4E 85 F1 | 	sub	fp, #28
105a8     E4 87 B1 FD | 	call	#__system___float_mul
105ac     14 FB 61 FC | 	wrlong	result1, local02
105b0     04 4E 05 F1 | 	add	fp, #4
105b4     A7 2A 02 FB | 	rdlong	local03, fp
105b8     02 2A 06 F1 | 	add	local03, #2
105bc     A7 2A 62 FC | 	wrlong	local03, fp
105c0     0F 2A 56 F2 | 	cmps	local03, #15 wc
105c4     B0 FF 9F CD |  if_b	jmp	#LR__1345
105c8     04 4E 85 F1 | 	sub	fp, #4
105cc                 | LR__1346
105cc                 | ' if harm(0)>=0 then ' synthesize with harmonics
105cc     3C 4E 05 F1 | 	add	fp, #60
105d0     A7 12 02 FB | 	rdlong	arg01, fp
105d4     3C 4E 85 F1 | 	sub	fp, #60
105d8     00 14 06 F6 | 	mov	arg02, #0
105dc     01 16 66 F6 | 	neg	arg03, #1
105e0     E0 8B B1 FD | 	call	#__system___float_cmp
105e4     00 FA 55 F2 | 	cmps	result1, #0 wc
105e8     A4 02 90 CD |  if_b	jmp	#LR__1352
105ec                 | '   for i=0 to 1023
105ec     04 4E 05 F1 | 	add	fp, #4
105f0     A7 00 68 FC | 	wrlong	#0, fp
105f4     04 4E 85 F1 | 	sub	fp, #4
105f8                 | LR__1347
105f8     24 4E 05 F1 | 	add	fp, #36
105fc     A7 00 68 FC | 	wrlong	#0, fp
10600                 | '     spl=0
10600                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
10600     1C 4E 85 F1 | 	sub	fp, #28
10604     A7 00 68 FC | 	wrlong	#0, fp
10608                 | LR__1348
10608     A7 28 02 FB | 	rdlong	local02, fp
1060c     02 28 66 F0 | 	shl	local02, #2
10610     34 4E 05 F1 | 	add	fp, #52
10614     A7 28 02 F1 | 	add	local02, fp
10618     14 2B 02 FB | 	rdlong	local03, local02
1061c     87 E4 1D FF 
10620     DB 29 06 F6 | 	mov	local02, ##1003032539
10624     38 4E 85 F1 | 	sub	fp, #56
10628     A7 12 02 FB | 	rdlong	arg01, fp
1062c     04 4E 85 F1 | 	sub	fp, #4
10630     09 13 52 F6 | 	abs	arg01, arg01 wc
10634     1F 2C C6 C9 |  if_b	decod	local04, #31
10638     00 2C 06 36 |  if_ae	mov	local04, #0
1063c     4C 83 B1 FD | 	call	#__system___float_fromuns
10640     16 FB 61 F5 | 	xor	result1, local04
10644     FD 14 02 F6 | 	mov	arg02, result1
10648     14 13 02 F6 | 	mov	arg01, local02
1064c     40 87 B1 FD | 	call	#__system___float_mul
10650     FD 28 02 F6 | 	mov	local02, result1
10654     08 4E 05 F1 | 	add	fp, #8
10658     A7 12 02 FB | 	rdlong	arg01, fp
1065c     08 4E 85 F1 | 	sub	fp, #8
10660     01 12 06 F1 | 	add	arg01, #1
10664     09 13 52 F6 | 	abs	arg01, arg01 wc
10668     1F 2C C6 C9 |  if_b	decod	local04, #31
1066c     00 2C 06 36 |  if_ae	mov	local04, #0
10670     18 83 B1 FD | 	call	#__system___float_fromuns
10674     16 FB 61 F5 | 	xor	result1, local04
10678     FD 14 02 F6 | 	mov	arg02, result1
1067c     14 13 02 F6 | 	mov	arg01, local02
10680     0C 87 B1 FD | 	call	#__system___float_mul
10684     FD 12 02 F6 | 	mov	arg01, result1
10688     64 90 B1 FD | 	call	#__system____builtin_sinf
1068c     FD 14 02 F6 | 	mov	arg02, result1
10690     15 13 02 F6 | 	mov	arg01, local03
10694     F8 86 B1 FD | 	call	#__system___float_mul
10698     FD 14 02 F6 | 	mov	arg02, result1
1069c     24 4E 05 F1 | 	add	fp, #36
106a0     A7 12 02 FB | 	rdlong	arg01, fp
106a4     24 4E 85 F1 | 	sub	fp, #36
106a8     14 83 B1 FD | 	call	#__system___float_add
106ac     24 4E 05 F1 | 	add	fp, #36
106b0     A7 FA 61 FC | 	wrlong	result1, fp
106b4     1C 4E 85 F1 | 	sub	fp, #28
106b8     A7 16 02 FB | 	rdlong	arg03, fp
106bc     01 16 06 F1 | 	add	arg03, #1
106c0     A7 16 62 FC | 	wrlong	arg03, fp
106c4     10 16 56 F2 | 	cmps	arg03, #16 wc
106c8     3C FF 9F CD |  if_b	jmp	#LR__1348
106cc                 | '     if abs(spl)>max then max=abs(spl)  
106cc     1C 4E 05 F1 | 	add	fp, #28
106d0     A7 12 02 FB | 	rdlong	arg01, fp
106d4     1F 12 06 F4 | 	bitl	arg01, #31
106d8     04 4E 85 F1 | 	sub	fp, #4
106dc     A7 14 02 FB | 	rdlong	arg02, fp
106e0     20 4E 85 F1 | 	sub	fp, #32
106e4     01 16 66 F6 | 	neg	arg03, #1
106e8     D8 8A B1 FD | 	call	#__system___float_cmp
106ec     01 FA 55 F2 | 	cmps	result1, #1 wc
106f0     18 00 90 CD |  if_b	jmp	#LR__1349
106f4     24 4E 05 F1 | 	add	fp, #36
106f8     A7 FA 01 FB | 	rdlong	result1, fp
106fc     1F FA 05 F4 | 	bitl	result1, #31
10700     04 4E 85 F1 | 	sub	fp, #4
10704     A7 FA 61 FC | 	wrlong	result1, fp
10708     20 4E 85 F1 | 	sub	fp, #32
1070c                 | LR__1349
1070c     04 4E 05 F1 | 	add	fp, #4
10710     A7 2A 02 FB | 	rdlong	local03, fp
10714     01 2A 06 F1 | 	add	local03, #1
10718     A7 2A 62 FC | 	wrlong	local03, fp
1071c     04 4E 85 F1 | 	sub	fp, #4
10720     02 00 00 FF 
10724     00 2A 56 F2 | 	cmps	local03, ##1024 wc
10728     CC FE 9F CD |  if_b	jmp	#LR__1347
1072c                 | '   for i=0 to 1023
1072c     04 4E 05 F1 | 	add	fp, #4
10730     A7 00 68 FC | 	wrlong	#0, fp
10734     04 4E 85 F1 | 	sub	fp, #4
10738                 | LR__1350
10738     24 4E 05 F1 | 	add	fp, #36
1073c     A7 00 68 FC | 	wrlong	#0, fp
10740                 | '     spl=0
10740                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
10740     1C 4E 85 F1 | 	sub	fp, #28
10744     A7 00 68 FC | 	wrlong	#0, fp
10748                 | LR__1351
10748     A7 2A 02 FB | 	rdlong	local03, fp
1074c     02 2A 66 F0 | 	shl	local03, #2
10750     34 4E 05 F1 | 	add	fp, #52
10754     A7 2A 02 F1 | 	add	local03, fp
10758     15 2B 02 FB | 	rdlong	local03, local03
1075c     1C 4E 85 F1 | 	sub	fp, #28
10760     A7 14 02 FB | 	rdlong	arg02, fp
10764     20 4E 85 F1 | 	sub	fp, #32
10768     58 7F 23 FF 
1076c     00 12 06 F6 | 	mov	arg01, ##1191096320
10770     20 88 B1 FD | 	call	#__system___float_div
10774     FD 14 02 F6 | 	mov	arg02, result1
10778     15 13 02 F6 | 	mov	arg01, local03
1077c     10 86 B1 FD | 	call	#__system___float_mul
10780     FD 2A 02 F6 | 	mov	local03, result1
10784     87 E4 1D FF 
10788     DB 29 06 F6 | 	mov	local02, ##1003032539
1078c     04 4E 05 F1 | 	add	fp, #4
10790     A7 12 02 FB | 	rdlong	arg01, fp
10794     04 4E 85 F1 | 	sub	fp, #4
10798     09 13 52 F6 | 	abs	arg01, arg01 wc
1079c     1F 2C C6 C9 |  if_b	decod	local04, #31
107a0     00 2C 06 36 |  if_ae	mov	local04, #0
107a4     E4 81 B1 FD | 	call	#__system___float_fromuns
107a8     16 FB 61 F5 | 	xor	result1, local04
107ac     FD 14 02 F6 | 	mov	arg02, result1
107b0     14 13 02 F6 | 	mov	arg01, local02
107b4     D8 85 B1 FD | 	call	#__system___float_mul
107b8     FD 28 02 F6 | 	mov	local02, result1
107bc     08 4E 05 F1 | 	add	fp, #8
107c0     A7 12 02 FB | 	rdlong	arg01, fp
107c4     08 4E 85 F1 | 	sub	fp, #8
107c8     01 12 06 F1 | 	add	arg01, #1
107cc     09 13 52 F6 | 	abs	arg01, arg01 wc
107d0     1F 2C C6 C9 |  if_b	decod	local04, #31
107d4     00 2C 06 36 |  if_ae	mov	local04, #0
107d8     B0 81 B1 FD | 	call	#__system___float_fromuns
107dc     16 FB 61 F5 | 	xor	result1, local04
107e0     FD 14 02 F6 | 	mov	arg02, result1
107e4     14 13 02 F6 | 	mov	arg01, local02
107e8     A4 85 B1 FD | 	call	#__system___float_mul
107ec     FD 12 02 F6 | 	mov	arg01, result1
107f0     FC 8E B1 FD | 	call	#__system____builtin_sinf
107f4     FD 14 02 F6 | 	mov	arg02, result1
107f8     15 13 02 F6 | 	mov	arg01, local03
107fc     90 85 B1 FD | 	call	#__system___float_mul
10800     FD 14 02 F6 | 	mov	arg02, result1
10804     24 4E 05 F1 | 	add	fp, #36
10808     A7 12 02 FB | 	rdlong	arg01, fp
1080c     24 4E 85 F1 | 	sub	fp, #36
10810     AC 81 B1 FD | 	call	#__system___float_add
10814     24 4E 05 F1 | 	add	fp, #36
10818     A7 FA 61 FC | 	wrlong	result1, fp
1081c     1C 4E 85 F1 | 	sub	fp, #28
10820     A7 2A 02 FB | 	rdlong	local03, fp
10824     01 2A 06 F1 | 	add	local03, #1
10828     A7 2A 62 FC | 	wrlong	local03, fp
1082c     10 2A 56 F2 | 	cmps	local03, #16 wc
10830     14 FF 9F CD |  if_b	jmp	#LR__1351
10834     08 4E 05 F1 | 	add	fp, #8
10838     A7 2A 02 FB | 	rdlong	local03, fp
1083c     0B 2A 66 F0 | 	shl	local03, #11
10840     0C 4E 85 F1 | 	sub	fp, #12
10844     A7 28 02 FB | 	rdlong	local02, fp
10848     01 28 66 F0 | 	shl	local02, #1
1084c     14 2B 02 F1 | 	add	local03, local02
10850     20 4E 05 F1 | 	add	fp, #32
10854     A7 12 02 FB | 	rdlong	arg01, fp
10858     24 4E 85 F1 | 	sub	fp, #36
1085c     01 14 06 F6 | 	mov	arg02, #1
10860     F4 89 B1 FD | 	call	#__system___float_tointeger
10864     FD 14 02 F6 | 	mov	arg02, result1
10868     15 13 02 F6 | 	mov	arg01, local03
1086c     A4 1E B1 FD | 	call	#_psdpoke
10870     04 4E 05 F1 | 	add	fp, #4
10874     A7 2A 02 FB | 	rdlong	local03, fp
10878     01 2A 06 F1 | 	add	local03, #1
1087c     A7 2A 62 FC | 	wrlong	local03, fp
10880     04 4E 85 F1 | 	sub	fp, #4
10884     02 00 00 FF 
10888     00 2A 56 F2 | 	cmps	local03, ##1024 wc
1088c     A8 FE 9F CD |  if_b	jmp	#LR__1350
10890                 | LR__1352
10890                 | LR__1353
10890     A7 F0 03 F6 | 	mov	ptra, fp
10894     B2 00 A0 FD | 	call	#popregs_
10898                 | _do_defsnd_ret
10898     2D 00 64 FD | 	ret
1089c                 | 
1089c                 | ' 
1089c                 | ' '-------------------- defsprite
1089c                 | ' 
1089c                 | ' sub do_defsprite
1089c                 | _do_defsprite
1089c     07 4A 05 F6 | 	mov	COUNT_, #7
108a0     A8 00 A0 FD | 	call	#pushregs_
108a4     60 F0 07 F1 | 	add	ptra, #96
108a8     34 CA BF FD | 	call	#_pop
108ac     FD 16 02 F6 | 	mov	arg03, result1
108b0     FE 14 02 F6 | 	mov	arg02, result2
108b4     FF 12 02 F6 | 	mov	arg01, result3
108b8     30 4E 05 F1 | 	add	fp, #48
108bc     A7 16 62 FC | 	wrlong	arg03, fp
108c0     04 4E 05 F1 | 	add	fp, #4
108c4     A7 14 62 FC | 	wrlong	arg02, fp
108c8     04 4E 05 F1 | 	add	fp, #4
108cc     A7 12 62 FC | 	wrlong	arg01, fp
108d0     38 4E 85 F1 | 	sub	fp, #56
108d4     08 CA BF FD | 	call	#_pop
108d8     FD 16 02 F6 | 	mov	arg03, result1
108dc     FE 14 02 F6 | 	mov	arg02, result2
108e0     FF 12 02 F6 | 	mov	arg01, result3
108e4     24 4E 05 F1 | 	add	fp, #36
108e8     A7 16 62 FC | 	wrlong	arg03, fp
108ec     04 4E 05 F1 | 	add	fp, #4
108f0     A7 14 62 FC | 	wrlong	arg02, fp
108f4     04 4E 05 F1 | 	add	fp, #4
108f8     A7 12 62 FC | 	wrlong	arg01, fp
108fc     2C 4E 85 F1 | 	sub	fp, #44
10900     DC C9 BF FD | 	call	#_pop
10904     FD 16 02 F6 | 	mov	arg03, result1
10908     FE 14 02 F6 | 	mov	arg02, result2
1090c     FF 12 02 F6 | 	mov	arg01, result3
10910     18 4E 05 F1 | 	add	fp, #24
10914     A7 16 62 FC | 	wrlong	arg03, fp
10918     04 4E 05 F1 | 	add	fp, #4
1091c     A7 14 62 FC | 	wrlong	arg02, fp
10920     04 4E 05 F1 | 	add	fp, #4
10924     A7 12 62 FC | 	wrlong	arg01, fp
10928     20 4E 85 F1 | 	sub	fp, #32
1092c     B0 C9 BF FD | 	call	#_pop
10930     FD 16 02 F6 | 	mov	arg03, result1
10934     FE 14 02 F6 | 	mov	arg02, result2
10938     FF 12 02 F6 | 	mov	arg01, result3
1093c     0C 4E 05 F1 | 	add	fp, #12
10940     A7 16 62 FC | 	wrlong	arg03, fp
10944     04 4E 05 F1 | 	add	fp, #4
10948     A7 14 62 FC | 	wrlong	arg02, fp
1094c     04 4E 05 F1 | 	add	fp, #4
10950     A7 12 62 FC | 	wrlong	arg01, fp
10954     14 4E 85 F1 | 	sub	fp, #20
10958     84 C9 BF FD | 	call	#_pop
1095c     FF 16 02 F6 | 	mov	arg03, result3
10960     A7 FA 61 FC | 	wrlong	result1, fp
10964     04 4E 05 F1 | 	add	fp, #4
10968     A7 FC 61 FC | 	wrlong	result2, fp
1096c     04 4E 05 F1 | 	add	fp, #4
10970     A7 16 62 FC | 	wrlong	arg03, fp
10974     08 4E 85 F1 | 	sub	fp, #8
10978     A7 12 02 F6 | 	mov	arg01, fp
1097c     44 CB BF FD | 	call	#_converttoint
10980     3C 4E 05 F1 | 	add	fp, #60
10984     A7 FA 61 FC | 	wrlong	result1, fp
10988     30 4E 85 F1 | 	sub	fp, #48
1098c     A7 12 02 F6 | 	mov	arg01, fp
10990     0C 4E 85 F1 | 	sub	fp, #12
10994     2C CB BF FD | 	call	#_converttoint
10998     40 4E 05 F1 | 	add	fp, #64
1099c     A7 FA 61 FC | 	wrlong	result1, fp
109a0     28 4E 85 F1 | 	sub	fp, #40
109a4     A7 12 02 F6 | 	mov	arg01, fp
109a8     18 4E 85 F1 | 	sub	fp, #24
109ac     14 CB BF FD | 	call	#_converttoint
109b0     44 4E 05 F1 | 	add	fp, #68
109b4     A7 FA 61 FC | 	wrlong	result1, fp
109b8     20 4E 85 F1 | 	sub	fp, #32
109bc     A7 12 02 F6 | 	mov	arg01, fp
109c0     24 4E 85 F1 | 	sub	fp, #36
109c4     FC CA BF FD | 	call	#_converttoint
109c8     48 4E 05 F1 | 	add	fp, #72
109cc     A7 FA 61 FC | 	wrlong	result1, fp
109d0     18 4E 85 F1 | 	sub	fp, #24
109d4     A7 12 02 F6 | 	mov	arg01, fp
109d8     30 4E 85 F1 | 	sub	fp, #48
109dc     E4 CA BF FD | 	call	#_converttoint
109e0     4C 4E 05 F1 | 	add	fp, #76
109e4     A7 FA 61 FC | 	wrlong	result1, fp
109e8                 | ' 
109e8                 | ' t5=pop()
109e8                 | ' t4=pop()
109e8                 | ' t3=pop()
109e8                 | ' t2=pop()
109e8                 | ' t1=pop()
109e8                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
109e8                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
109e8     10 4E 85 F1 | 	sub	fp, #16
109ec     A7 16 02 FB | 	rdlong	arg03, fp
109f0     3C 4E 85 F1 | 	sub	fp, #60
109f4     02 16 66 F0 | 	shl	arg03, #2
109f8     52 00 00 FF 
109fc     54 E4 05 F1 | 	add	objptr, ##42068
10a00     F2 16 02 F1 | 	add	arg03, objptr
10a04     0B 17 0A FB | 	rdlong	arg03, arg03 wz
10a08     52 00 00 FF 
10a0c     54 E4 85 F1 | 	sub	objptr, ##42068
10a10     2C 00 90 AD |  if_e	jmp	#LR__1360
10a14     3C 4E 05 F1 | 	add	fp, #60
10a18     A7 16 02 FB | 	rdlong	arg03, fp
10a1c     3C 4E 85 F1 | 	sub	fp, #60
10a20     02 16 66 F0 | 	shl	arg03, #2
10a24     52 00 00 FF 
10a28     54 E4 05 F1 | 	add	objptr, ##42068
10a2c     F2 16 02 F1 | 	add	arg03, objptr
10a30     0B 13 02 FB | 	rdlong	arg01, arg03
10a34     52 00 00 FF 
10a38     54 E4 85 F1 | 	sub	objptr, ##42068
10a3c     B4 97 B1 FD | 	call	#__system___gc_free
10a40                 | LR__1360
10a40     3C 4E 05 F1 | 	add	fp, #60
10a44     A7 26 02 FB | 	rdlong	local01, fp
10a48     0C 4E 05 F1 | 	add	fp, #12
10a4c     A7 16 02 FB | 	rdlong	arg03, fp
10a50     04 4E 05 F1 | 	add	fp, #4
10a54     A7 14 02 FB | 	rdlong	arg02, fp
10a58     0A 17 02 FD | 	qmul	arg03, arg02
10a5c     02 26 66 F0 | 	shl	local01, #2
10a60     52 00 00 FF 
10a64     54 E4 05 F1 | 	add	objptr, ##42068
10a68     F2 26 02 F1 | 	add	local01, objptr
10a6c     4C 4E 85 F1 | 	sub	fp, #76
10a70     52 00 00 FF 
10a74     54 E4 85 F1 | 	sub	objptr, ##42068
10a78     18 12 62 FD | 	getqx	arg01
10a7c     38 96 B1 FD | 	call	#__system___gc_alloc_managed
10a80     13 FB 61 FC | 	wrlong	result1, local01
10a84                 | ' for y=a3 to a3+a5-1
10a84     44 4E 05 F1 | 	add	fp, #68
10a88     A7 28 02 FB | 	rdlong	local02, fp
10a8c     0C 4E 05 F1 | 	add	fp, #12
10a90     A7 28 62 FC | 	wrlong	local02, fp
10a94     0C 4E 85 F1 | 	sub	fp, #12
10a98     A7 2A 02 FB | 	rdlong	local03, fp
10a9c     08 4E 05 F1 | 	add	fp, #8
10aa0     A7 2C 02 FB | 	rdlong	local04, fp
10aa4     4C 4E 85 F1 | 	sub	fp, #76
10aa8     16 2B 02 F1 | 	add	local03, local04
10aac                 | LR__1361
10aac     50 4E 05 F1 | 	add	fp, #80
10ab0     A7 28 02 FB | 	rdlong	local02, fp
10ab4     50 4E 85 F1 | 	sub	fp, #80
10ab8     15 29 52 F2 | 	cmps	local02, local03 wc
10abc     F4 00 90 3D |  if_ae	jmp	#LR__1364
10ac0                 | '   for x=a2 to a4+a2-1
10ac0     40 4E 05 F1 | 	add	fp, #64
10ac4     A7 26 02 FB | 	rdlong	local01, fp
10ac8     14 4E 05 F1 | 	add	fp, #20
10acc     A7 26 62 FC | 	wrlong	local01, fp
10ad0     0C 4E 85 F1 | 	sub	fp, #12
10ad4     A7 2E 02 FB | 	rdlong	local05, fp
10ad8     08 4E 85 F1 | 	sub	fp, #8
10adc     A7 30 02 FB | 	rdlong	local06, fp
10ae0     40 4E 85 F1 | 	sub	fp, #64
10ae4     18 2F 02 F1 | 	add	local05, local06
10ae8                 | LR__1362
10ae8     54 4E 05 F1 | 	add	fp, #84
10aec     A7 26 02 FB | 	rdlong	local01, fp
10af0     54 4E 85 F1 | 	sub	fp, #84
10af4     17 27 52 F2 | 	cmps	local01, local05 wc
10af8     A0 00 90 3D |  if_ae	jmp	#LR__1363
10afc     3C 4E 05 F1 | 	add	fp, #60
10b00     A7 30 02 FB | 	rdlong	local06, fp
10b04     18 4E 05 F1 | 	add	fp, #24
10b08     A7 2C 02 FB | 	rdlong	local04, fp
10b0c     14 4E 85 F1 | 	sub	fp, #20
10b10     A7 28 02 FB | 	rdlong	local02, fp
10b14     10 4E 05 F1 | 	add	fp, #16
10b18     A7 26 02 FB | 	rdlong	local01, fp
10b1c     13 17 02 F6 | 	mov	arg03, local01
10b20     0C 4E 85 F1 | 	sub	fp, #12
10b24     A7 14 02 FB | 	rdlong	arg02, fp
10b28     0A 17 82 F1 | 	sub	arg03, arg02
10b2c     04 4E 05 F1 | 	add	fp, #4
10b30     A7 14 02 FB | 	rdlong	arg02, fp
10b34     0A 17 02 FD | 	qmul	arg03, arg02
10b38     02 30 66 F0 | 	shl	local06, #2
10b3c     52 00 00 FF 
10b40     54 E4 05 F1 | 	add	objptr, ##42068
10b44     F2 30 02 F1 | 	add	local06, objptr
10b48     18 31 02 FB | 	rdlong	local06, local06
10b4c     16 33 02 F6 | 	mov	local07, local04
10b50     14 33 82 F1 | 	sub	local07, local02
10b54     52 00 00 FF 
10b58     54 E4 85 F1 | 	sub	objptr, ##42068
10b5c     F2 12 02 FB | 	rdlong	arg01, objptr
10b60     16 13 02 F1 | 	add	arg01, local04
10b64     48 4E 85 F1 | 	sub	fp, #72
10b68     0A 26 66 F0 | 	shl	local01, #10
10b6c     13 13 02 F1 | 	add	arg01, local01
10b70     18 2C 62 FD | 	getqx	local04
10b74     16 33 02 F1 | 	add	local07, local04
10b78     18 33 02 F1 | 	add	local07, local06
10b7c     24 1C B1 FD | 	call	#_pspeek
10b80     19 FB 41 FC | 	wrbyte	result1, local07
10b84     54 4E 05 F1 | 	add	fp, #84
10b88     A7 32 02 FB | 	rdlong	local07, fp
10b8c     01 32 06 F1 | 	add	local07, #1
10b90     A7 32 62 FC | 	wrlong	local07, fp
10b94     54 4E 85 F1 | 	sub	fp, #84
10b98     4C FF 9F FD | 	jmp	#LR__1362
10b9c                 | LR__1363
10b9c     50 4E 05 F1 | 	add	fp, #80
10ba0     A7 32 02 FB | 	rdlong	local07, fp
10ba4     01 32 06 F1 | 	add	local07, #1
10ba8     A7 32 62 FC | 	wrlong	local07, fp
10bac     50 4E 85 F1 | 	sub	fp, #80
10bb0     F8 FE 9F FD | 	jmp	#LR__1361
10bb4                 | LR__1364
10bb4     3C 4E 05 F1 | 	add	fp, #60
10bb8     A7 32 02 FB | 	rdlong	local07, fp
10bbc     19 13 02 F6 | 	mov	arg01, local07
10bc0     3C 4E 85 F1 | 	sub	fp, #60
10bc4     02 32 66 F0 | 	shl	local07, #2
10bc8     52 00 00 FF 
10bcc     54 E4 05 F1 | 	add	objptr, ##42068
10bd0     F2 32 02 F1 | 	add	local07, objptr
10bd4     19 15 02 FB | 	rdlong	arg02, local07
10bd8     52 00 00 FF 
10bdc     54 E4 85 F1 | 	sub	objptr, ##42068
10be0     00 29 B1 FD | 	call	#_hg010b_spin2_setspriteptr
10be4     3C 4E 05 F1 | 	add	fp, #60
10be8     A7 12 02 FB | 	rdlong	arg01, fp
10bec     0C 4E 05 F1 | 	add	fp, #12
10bf0     A7 14 02 FB | 	rdlong	arg02, fp
10bf4     04 4E 05 F1 | 	add	fp, #4
10bf8     A7 16 02 FB | 	rdlong	arg03, fp
10bfc     4C 4E 85 F1 | 	sub	fp, #76
10c00     70 29 B1 FD | 	call	#_hg010b_spin2_setspritesize
10c04     A7 F0 03 F6 | 	mov	ptra, fp
10c08     B2 00 A0 FD | 	call	#popregs_
10c0c                 | _do_defsprite_ret
10c0c     2D 00 64 FD | 	ret
10c10                 | 
10c10                 | ' 
10c10                 | ' '-------------------- deg
10c10                 | ' 
10c10                 | ' sub do_deg
10c10                 | _do_deg
10c10     52 00 00 FF 
10c14     A8 E4 05 F1 | 	add	objptr, ##42152
10c18     7D 47 9E FF 
10c1c     F2 6A 68 FC | 	wrlong	##1016003125, objptr
10c20     04 E4 05 F1 | 	add	objptr, #4
10c24     97 32 A1 FF 
10c28     F2 C2 69 FC | 	wrlong	##1113927393, objptr
10c2c     52 00 00 FF 
10c30     AC E4 85 F1 | 	sub	objptr, ##42156
10c34                 | _do_deg_ret
10c34     2D 00 64 FD | 	ret
10c38                 | 
10c38                 | ' 
10c38                 | ' '-------------------- delete
10c38                 | ' 
10c38                 | ' sub do_delete
10c38                 | _do_delete
10c38     05 4A 05 F6 | 	mov	COUNT_, #5
10c3c     A8 00 A0 FD | 	call	#pushregs_
10c40     9C C6 BF FD | 	call	#_pop
10c44     FE 18 02 F6 | 	mov	arg04, result2
10c48     FF 16 02 F6 | 	mov	arg03, result3
10c4c     FD 26 02 F6 | 	mov	local01, result1
10c50     0C 29 02 F6 | 	mov	local02, arg04
10c54     0B 2B 02 F6 | 	mov	local03, arg03
10c58                 | ' 
10c58                 | ' t1=pop()
10c58                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10c58     2B 2A 0E F2 | 	cmp	local03, #43 wz
10c5c     10 00 90 5D |  if_ne	jmp	#LR__1370
10c60     13 13 02 F6 | 	mov	arg01, local01
10c64     F0 C7 BF FD | 	call	#_convertstring
10c68     FD 26 02 F6 | 	mov	local01, result1
10c6c     1F 2A 06 F6 | 	mov	local03, #31
10c70                 | LR__1370
10c70                 | ' if t1.result_type<>result_string then printerror(15): return
10c70     1F 2A 0E F2 | 	cmp	local03, #31 wz
10c74     10 00 90 AD |  if_e	jmp	#LR__1371
10c78     0F 12 06 F6 | 	mov	arg01, #15
10c7c     00 14 06 F6 | 	mov	arg02, #0
10c80     A8 18 B1 FD | 	call	#_printerror
10c84     E0 00 90 FD | 	jmp	#LR__1375
10c88                 | LR__1371
10c88                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
10c88     4A 00 00 FF 
10c8c     94 E4 05 F1 | 	add	objptr, ##38036
10c90     F2 12 02 FB | 	rdlong	arg01, objptr
10c94     4A 00 00 FF 
10c98     94 E4 85 F1 | 	sub	objptr, ##38036
10c9c     B1 01 00 FF 
10ca0     B3 14 06 F6 | 	mov	arg02, ##@LR__5848
10ca4     98 52 B1 FD | 	call	#__system___string_cmp
10ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
10cac     34 00 90 AD |  if_e	jmp	#LR__1372
10cb0     4A 00 00 FF 
10cb4     94 E4 05 F1 | 	add	objptr, ##38036
10cb8     F2 12 02 FB | 	rdlong	arg01, objptr
10cbc     4A 00 00 FF 
10cc0     94 E4 85 F1 | 	sub	objptr, ##38036
10cc4     B1 01 00 FF 
10cc8     B5 14 06 F6 | 	mov	arg02, ##@LR__5849
10ccc     A4 52 B1 FD | 	call	#__system___string_concat
10cd0     FD 12 02 F6 | 	mov	arg01, result1
10cd4     13 15 02 F6 | 	mov	arg02, local01
10cd8     98 52 B1 FD | 	call	#__system___string_concat
10cdc     FD 2C 02 F6 | 	mov	local04, result1
10ce0     14 00 90 FD | 	jmp	#LR__1373
10ce4                 | LR__1372
10ce4     B1 01 00 FF 
10ce8     B7 12 06 F6 | 	mov	arg01, ##@LR__5850
10cec     13 15 02 F6 | 	mov	arg02, local01
10cf0     80 52 B1 FD | 	call	#__system___string_concat
10cf4     FD 2C 02 F6 | 	mov	local04, result1
10cf8                 | LR__1373
10cf8     16 13 02 F6 | 	mov	arg01, local04
10cfc     E4 79 B1 FD | 	call	#__system___remove
10d00     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10d04     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
10d08     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10d0c     FD 2E 0A F6 | 	mov	local05, result1 wz
10d10                 | ' kill filename$
10d10                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
10d10     54 00 90 AD |  if_e	jmp	#LR__1374
10d14     00 12 06 F6 | 	mov	arg01, #0
10d18     24 AF B1 FD | 	call	#__system___getiolock_0602
10d1c     FD 12 02 F6 | 	mov	arg01, result1
10d20     F4 51 B1 FD | 	call	#__system___lockmem
10d24     B1 01 00 FF 
10d28     B9 14 06 F6 | 	mov	arg02, ##@LR__5851
10d2c     00 12 06 F6 | 	mov	arg01, #0
10d30     00 16 06 F6 | 	mov	arg03, #0
10d34     D4 5E B1 FD | 	call	#__system___basic_print_string
10d38     00 12 06 F6 | 	mov	arg01, #0
10d3c     17 15 02 F6 | 	mov	arg02, local05
10d40     00 16 06 F6 | 	mov	arg03, #0
10d44     0A 18 06 F6 | 	mov	arg04, #10
10d48     04 5F B1 FD | 	call	#__system___basic_print_integer
10d4c     00 12 06 F6 | 	mov	arg01, #0
10d50     0A 14 06 F6 | 	mov	arg02, #10
10d54     00 16 06 F6 | 	mov	arg03, #0
10d58     58 5E B1 FD | 	call	#__system___basic_print_char
10d5c     00 12 06 F6 | 	mov	arg01, #0
10d60     DC AE B1 FD | 	call	#__system___getiolock_0602
10d64     FD 00 68 FC | 	wrlong	#0, result1
10d68                 | LR__1374
10d68                 | LR__1375
10d68     A7 F0 03 F6 | 	mov	ptra, fp
10d6c     B2 00 A0 FD | 	call	#popregs_
10d70                 | _do_delete_ret
10d70     2D 00 64 FD | 	ret
10d74                 | 
10d74                 | ' 
10d74                 | ' '-------------------- dir
10d74                 | ' 
10d74                 | ' sub do_dir
10d74                 | _do_dir
10d74     13 4A 05 F6 | 	mov	COUNT_, #19
10d78     A8 00 A0 FD | 	call	#pushregs_
10d7c     01 00 00 FF 
10d80     38 F0 07 F1 | 	add	ptra, ##568
10d84                 | ' 
10d84                 | ' print "Current directory: "; currentdir$ 
10d84     00 12 06 F6 | 	mov	arg01, #0
10d88     B4 AE B1 FD | 	call	#__system___getiolock_0602
10d8c     FD 12 02 F6 | 	mov	arg01, result1
10d90     84 51 B1 FD | 	call	#__system___lockmem
10d94     B1 01 00 FF 
10d98     F1 14 06 F6 | 	mov	arg02, ##@LR__5852
10d9c     00 12 06 F6 | 	mov	arg01, #0
10da0     00 16 06 F6 | 	mov	arg03, #0
10da4     64 5E B1 FD | 	call	#__system___basic_print_string
10da8     4A 00 00 FF 
10dac     94 E4 05 F1 | 	add	objptr, ##38036
10db0     F2 14 02 FB | 	rdlong	arg02, objptr
10db4     4A 00 00 FF 
10db8     94 E4 85 F1 | 	sub	objptr, ##38036
10dbc     00 12 06 F6 | 	mov	arg01, #0
10dc0     00 16 06 F6 | 	mov	arg03, #0
10dc4     44 5E B1 FD | 	call	#__system___basic_print_string
10dc8     00 12 06 F6 | 	mov	arg01, #0
10dcc     0A 14 06 F6 | 	mov	arg02, #10
10dd0     00 16 06 F6 | 	mov	arg03, #0
10dd4     DC 5D B1 FD | 	call	#__system___basic_print_char
10dd8     01 26 06 F6 | 	mov	local01, #1
10ddc     00 12 06 F6 | 	mov	arg01, #0
10de0     5C AE B1 FD | 	call	#__system___getiolock_0602
10de4     FD 00 68 FC | 	wrlong	#0, result1
10de8     00 28 06 F6 | 	mov	local02, #0
10dec     00 2A 06 F6 | 	mov	local03, #0
10df0                 | ' px=0
10df0                 | ' for i=0 to 127: filelist(i)="" : next i
10df0     00 2C 06 F6 | 	mov	local04, #0
10df4     1C 4E 05 F1 | 	add	fp, #28
10df8     97 12 48 FB | 	callpa	#(@LR__1381-@LR__1380)>>2,fcache_load_ptr_
10dfc                 | LR__1380
10dfc     16 2F 02 F6 | 	mov	local05, local04
10e00     02 2E 66 F0 | 	shl	local05, #2
10e04     A7 2E 02 F1 | 	add	local05, fp
10e08     B1 01 00 FF 
10e0c     05 31 06 F6 | 	mov	local06, ##@LR__5853
10e10     17 31 62 FC | 	wrlong	local06, local05
10e14     01 2C 06 F1 | 	add	local04, #1
10e18     80 2C 56 F2 | 	cmps	local04, #128 wc
10e1c     DC FF 9F CD |  if_b	jmp	#LR__1380
10e20                 | LR__1381
10e20     1C 4E 85 F1 | 	sub	fp, #28
10e24     B1 01 00 FF 
10e28     06 13 06 F6 | 	mov	arg01, ##@LR__5854
10e2c     10 14 06 F6 | 	mov	arg02, #16
10e30     44 AF B1 FD | 	call	#__system___basic_dir
10e34     FD 32 02 F6 | 	mov	local07, result1
10e38     00 34 06 F6 | 	mov	local08, #0
10e3c                 | ' filename=dir$("*", fbDirectory)
10e3c                 | ' n=0
10e3c                 | ' while filename <> "" andalso filename <> nil andalso n<128
10e3c                 | LR__1382
10e3c     B1 01 00 FF 
10e40     08 37 06 F6 | 	mov	local09, ##@LR__5855
10e44     19 13 02 F6 | 	mov	arg01, local07
10e48     1B 15 02 F6 | 	mov	arg02, local09
10e4c     F0 50 B1 FD | 	call	#__system___string_cmp
10e50     00 FA 0D F2 | 	cmp	result1, #0 wz
10e54     68 00 90 AD |  if_e	jmp	#LR__1383
10e58     00 36 06 F6 | 	mov	local09, #0
10e5c     19 13 02 F6 | 	mov	arg01, local07
10e60     00 14 06 F6 | 	mov	arg02, #0
10e64     D8 50 B1 FD | 	call	#__system___string_cmp
10e68     00 FA 0D F2 | 	cmp	result1, #0 wz
10e6c     50 00 90 AD |  if_e	jmp	#LR__1383
10e70     80 34 56 F2 | 	cmps	local08, #128 wc
10e74     48 00 90 3D |  if_ae	jmp	#LR__1383
10e78     B1 01 00 FF 
10e7c     09 13 06 F6 | 	mov	arg01, ##@LR__5856
10e80     19 15 02 F6 | 	mov	arg02, local07
10e84     EC 50 B1 FD | 	call	#__system___string_concat
10e88     FD 32 02 F6 | 	mov	local07, result1
10e8c     1A 2F 02 F6 | 	mov	local05, local08
10e90     02 2E 66 F0 | 	shl	local05, #2
10e94     1C 4E 05 F1 | 	add	fp, #28
10e98     A7 2E 02 F1 | 	add	local05, fp
10e9c     17 33 62 FC | 	wrlong	local07, local05
10ea0     01 34 06 F1 | 	add	local08, #1
10ea4     00 2E 06 F6 | 	mov	local05, #0
10ea8     00 12 06 F6 | 	mov	arg01, #0
10eac     00 14 06 F6 | 	mov	arg02, #0
10eb0     1C 4E 85 F1 | 	sub	fp, #28
10eb4     C0 AE B1 FD | 	call	#__system___basic_dir
10eb8     FD 32 02 F6 | 	mov	local07, result1
10ebc     7C FF 9F FD | 	jmp	#LR__1382
10ec0                 | LR__1383
10ec0                 | ' for i=0 to n-1			' now sort this
10ec0     00 2C 06 F6 | 	mov	local04, #0
10ec4     1A 39 02 F6 | 	mov	local10, local08
10ec8                 | LR__1384
10ec8     1C 2D 52 F2 | 	cmps	local04, local10 wc
10ecc     DC 00 90 3D |  if_ae	jmp	#LR__1388
10ed0     00 3A 06 F6 | 	mov	local11, #0
10ed4                 | '   swapped=false
10ed4                 | '   for j=0 to n-i-2
10ed4     00 3C 06 F6 | 	mov	local12, #0
10ed8     1A 3F 02 F6 | 	mov	local13, local08
10edc     16 3F 82 F1 | 	sub	local13, local04
10ee0     01 3E 86 F1 | 	sub	local13, #1
10ee4                 | LR__1385
10ee4     1F 3D 52 F2 | 	cmps	local12, local13 wc
10ee8     B0 00 90 3D |  if_ae	jmp	#LR__1387
10eec                 | '     if filelist(j) > filelist(j+1) then
10eec     1E 37 02 F6 | 	mov	local09, local12
10ef0     02 36 66 F0 | 	shl	local09, #2
10ef4     1C 4E 05 F1 | 	add	fp, #28
10ef8     A7 36 02 F1 | 	add	local09, fp
10efc     1B 13 02 FB | 	rdlong	arg01, local09
10f00     1E 37 02 F6 | 	mov	local09, local12
10f04     01 36 06 F1 | 	add	local09, #1
10f08     1B 31 02 F6 | 	mov	local06, local09
10f0c     02 30 66 F0 | 	shl	local06, #2
10f10     A7 26 02 F6 | 	mov	local01, fp
10f14     A7 30 02 F1 | 	add	local06, fp
10f18     18 2F 02 FB | 	rdlong	local05, local06
10f1c     17 15 02 F6 | 	mov	arg02, local05
10f20     1C 4E 85 F1 | 	sub	fp, #28
10f24     18 50 B1 FD | 	call	#__system___string_cmp
10f28     01 FA 55 F2 | 	cmps	result1, #1 wc
10f2c     64 00 90 CD |  if_b	jmp	#LR__1386
10f30     1E 37 02 F6 | 	mov	local09, local12
10f34     01 36 06 F1 | 	add	local09, #1
10f38     02 36 66 F0 | 	shl	local09, #2
10f3c     1C 4E 05 F1 | 	add	fp, #28
10f40     A7 36 02 F1 | 	add	local09, fp
10f44     1B 3B 02 FB | 	rdlong	local11, local09
10f48     1E 31 02 F6 | 	mov	local06, local12
10f4c     02 30 66 F0 | 	shl	local06, #2
10f50     A7 30 02 F1 | 	add	local06, fp
10f54     18 2F 02 FB | 	rdlong	local05, local06
10f58     1E 37 02 F6 | 	mov	local09, local12
10f5c     1B 31 02 F6 | 	mov	local06, local09
10f60     02 30 66 F0 | 	shl	local06, #2
10f64     A7 26 02 F6 | 	mov	local01, fp
10f68     A7 30 02 F1 | 	add	local06, fp
10f6c     18 3B 62 FC | 	wrlong	local11, local06
10f70     1E 29 02 F6 | 	mov	local02, local12
10f74     01 28 06 F1 | 	add	local02, #1
10f78     14 41 02 F6 | 	mov	local14, local02
10f7c     02 40 66 F0 | 	shl	local14, #2
10f80     A7 42 02 F6 | 	mov	local15, fp
10f84     A7 40 02 F1 | 	add	local14, fp
10f88     20 2F 62 FC | 	wrlong	local05, local14
10f8c     01 3A 66 F6 | 	neg	local11, #1
10f90     1C 4E 85 F1 | 	sub	fp, #28
10f94                 | LR__1386
10f94     01 3C 06 F1 | 	add	local12, #1
10f98     48 FF 9F FD | 	jmp	#LR__1385
10f9c                 | LR__1387
10f9c                 | ' if not swapped then exit for
10f9c     1D 45 22 F6 | 	not	local16, local11
10fa0     00 44 0E F2 | 	cmp	local16, #0 wz
10fa4     01 2C 06 A1 |  if_e	add	local04, #1
10fa8     1C FF 9F AD |  if_e	jmp	#LR__1384
10fac                 | LR__1388
10fac                 | ' for i=0 to n-1
10fac     00 2C 06 F6 | 	mov	local04, #0
10fb0     1A 47 02 F6 | 	mov	local17, local08
10fb4                 | LR__1389
10fb4     23 2D 52 F2 | 	cmps	local04, local17 wc
10fb8     94 00 90 3D |  if_ae	jmp	#LR__1391
10fbc                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
10fbc     00 12 06 F6 | 	mov	arg01, #0
10fc0     7C AC B1 FD | 	call	#__system___getiolock_0602
10fc4     FD 12 02 F6 | 	mov	arg01, result1
10fc8     4C 4F B1 FD | 	call	#__system___lockmem
10fcc     16 29 02 F6 | 	mov	local02, local04
10fd0     02 28 66 F0 | 	shl	local02, #2
10fd4     1C 4E 05 F1 | 	add	fp, #28
10fd8     A7 40 02 F6 | 	mov	local14, fp
10fdc     A7 28 02 F1 | 	add	local02, fp
10fe0     14 15 02 FB | 	rdlong	arg02, local02
10fe4     00 26 06 F6 | 	mov	local01, #0
10fe8     00 12 06 F6 | 	mov	arg01, #0
10fec     00 16 06 F6 | 	mov	arg03, #0
10ff0     1C 4E 85 F1 | 	sub	fp, #28
10ff4     14 5C B1 FD | 	call	#__system___basic_print_string
10ff8     00 12 06 F6 | 	mov	arg01, #0
10ffc     40 AC B1 FD | 	call	#__system___getiolock_0602
11000     FD 00 68 FC | 	wrlong	#0, result1
11004     40 2A 06 F1 | 	add	local03, #64
11008     15 13 02 F6 | 	mov	arg01, local03
1100c     B0 31 B1 FD | 	call	#_hg010b_spin2_setcursorx
11010     00 2B 56 F2 | 	cmps	local03, #256 wc
11014     30 00 90 CD |  if_b	jmp	#LR__1390
11018     00 2A 06 F6 | 	mov	local03, #0
1101c     00 12 06 F6 | 	mov	arg01, #0
11020     1C AC B1 FD | 	call	#__system___getiolock_0602
11024     FD 12 02 F6 | 	mov	arg01, result1
11028     EC 4E B1 FD | 	call	#__system___lockmem
1102c     00 12 06 F6 | 	mov	arg01, #0
11030     0A 14 06 F6 | 	mov	arg02, #10
11034     00 16 06 F6 | 	mov	arg03, #0
11038     78 5B B1 FD | 	call	#__system___basic_print_char
1103c     00 12 06 F6 | 	mov	arg01, #0
11040     FC AB B1 FD | 	call	#__system___getiolock_0602
11044     FD 00 68 FC | 	wrlong	#0, result1
11048                 | LR__1390
11048     01 2C 06 F1 | 	add	local04, #1
1104c     64 FF 9F FD | 	jmp	#LR__1389
11050                 | LR__1391
11050                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11050     80 34 56 F2 | 	cmps	local08, #128 wc
11054     44 00 90 CD |  if_b	jmp	#LR__1392
11058     00 12 06 F6 | 	mov	arg01, #0
1105c     E0 AB B1 FD | 	call	#__system___getiolock_0602
11060     FD 12 02 F6 | 	mov	arg01, result1
11064     B0 4E B1 FD | 	call	#__system___lockmem
11068     B1 01 00 FF 
1106c     10 15 06 F6 | 	mov	arg02, ##@LR__5857
11070     00 12 06 F6 | 	mov	arg01, #0
11074     00 16 06 F6 | 	mov	arg03, #0
11078     90 5B B1 FD | 	call	#__system___basic_print_string
1107c     00 12 06 F6 | 	mov	arg01, #0
11080     0A 14 06 F6 | 	mov	arg02, #10
11084     00 16 06 F6 | 	mov	arg03, #0
11088     28 5B B1 FD | 	call	#__system___basic_print_char
1108c     00 12 06 F6 | 	mov	arg01, #0
11090     AC AB B1 FD | 	call	#__system___getiolock_0602
11094     FD 00 68 FC | 	wrlong	#0, result1
11098     00 26 06 F6 | 	mov	local01, #0
1109c                 | LR__1392
1109c                 | ' print
1109c     00 12 06 F6 | 	mov	arg01, #0
110a0     9C AB B1 FD | 	call	#__system___getiolock_0602
110a4     FD 12 02 F6 | 	mov	arg01, result1
110a8     6C 4E B1 FD | 	call	#__system___lockmem
110ac     00 12 06 F6 | 	mov	arg01, #0
110b0     0A 14 06 F6 | 	mov	arg02, #10
110b4     00 16 06 F6 | 	mov	arg03, #0
110b8     F8 5A B1 FD | 	call	#__system___basic_print_char
110bc     00 12 06 F6 | 	mov	arg01, #0
110c0     7C AB B1 FD | 	call	#__system___getiolock_0602
110c4     FD 00 68 FC | 	wrlong	#0, result1
110c8     00 30 06 F6 | 	mov	local06, #0
110cc     00 34 06 F6 | 	mov	local08, #0
110d0     00 2A 06 F6 | 	mov	local03, #0
110d4                 | ' return cursor_y
110d4     3E E4 05 F1 | 	add	objptr, #62
110d8     F2 48 C2 FA | 	rdbyte	local18, objptr
110dc     3E E4 85 F1 | 	sub	objptr, #62
110e0     B1 01 00 FF 
110e4     42 13 06 F6 | 	mov	arg01, ##@LR__5858
110e8     21 14 06 F6 | 	mov	arg02, #33
110ec     88 AC B1 FD | 	call	#__system___basic_dir
110f0     FD 32 02 F6 | 	mov	local07, result1
110f4                 | ' n=0
110f4                 | ' px=0: py=v.getcursory()
110f4                 | ' filename = dir$("*", fbNormal )   
110f4                 | ' do while filename <> "" andalso filename <> nil andalso n<128
110f4                 | LR__1393
110f4     B1 01 00 FF 
110f8     44 37 06 F6 | 	mov	local09, ##@LR__5859
110fc     19 13 02 F6 | 	mov	arg01, local07
11100     1B 15 02 F6 | 	mov	arg02, local09
11104     38 4E B1 FD | 	call	#__system___string_cmp
11108     00 FA 0D F2 | 	cmp	result1, #0 wz
1110c     54 00 90 AD |  if_e	jmp	#LR__1394
11110     00 36 06 F6 | 	mov	local09, #0
11114     19 13 02 F6 | 	mov	arg01, local07
11118     00 14 06 F6 | 	mov	arg02, #0
1111c     20 4E B1 FD | 	call	#__system___string_cmp
11120     00 FA 0D F2 | 	cmp	result1, #0 wz
11124     3C 00 90 AD |  if_e	jmp	#LR__1394
11128     80 34 56 F2 | 	cmps	local08, #128 wc
1112c     34 00 90 3D |  if_ae	jmp	#LR__1394
11130     1A 2F 02 F6 | 	mov	local05, local08
11134     02 2E 66 F0 | 	shl	local05, #2
11138     1C 4E 05 F1 | 	add	fp, #28
1113c     A7 2E 02 F1 | 	add	local05, fp
11140     17 33 62 FC | 	wrlong	local07, local05
11144     01 34 06 F1 | 	add	local08, #1
11148     00 2E 06 F6 | 	mov	local05, #0
1114c     00 12 06 F6 | 	mov	arg01, #0
11150     00 14 06 F6 | 	mov	arg02, #0
11154     1C 4E 85 F1 | 	sub	fp, #28
11158     1C AC B1 FD | 	call	#__system___basic_dir
1115c     FD 32 02 F6 | 	mov	local07, result1
11160     90 FF 9F FD | 	jmp	#LR__1393
11164                 | LR__1394
11164                 | ' for i =0 to n-1
11164     00 2C 06 F6 | 	mov	local04, #0
11168                 | LR__1395
11168     1A 2D 52 F2 | 	cmps	local04, local08 wc
1116c     D8 00 90 3D |  if_ae	jmp	#LR__1399
11170     00 3A 06 F6 | 	mov	local11, #0
11174                 | '   swapped=false
11174                 | '   for j=0 to n-i-2
11174     00 3C 06 F6 | 	mov	local12, #0
11178     1A 4B 02 F6 | 	mov	local19, local08
1117c     16 4B 82 F1 | 	sub	local19, local04
11180     01 4A 86 F1 | 	sub	local19, #1
11184                 | LR__1396
11184     25 3D 52 F2 | 	cmps	local12, local19 wc
11188     AC 00 90 3D |  if_ae	jmp	#LR__1398
1118c                 | '     if filelist(j) > filelist(j+1) then
1118c     1E 37 02 F6 | 	mov	local09, local12
11190     02 36 66 F0 | 	shl	local09, #2
11194     1C 4E 05 F1 | 	add	fp, #28
11198     A7 36 02 F1 | 	add	local09, fp
1119c     1B 13 02 FB | 	rdlong	arg01, local09
111a0     1E 37 02 F6 | 	mov	local09, local12
111a4     01 36 06 F1 | 	add	local09, #1
111a8     1B 31 02 F6 | 	mov	local06, local09
111ac     02 30 66 F0 | 	shl	local06, #2
111b0     A7 26 02 F6 | 	mov	local01, fp
111b4     A7 30 02 F1 | 	add	local06, fp
111b8     18 2F 02 FB | 	rdlong	local05, local06
111bc     17 15 02 F6 | 	mov	arg02, local05
111c0     1C 4E 85 F1 | 	sub	fp, #28
111c4     78 4D B1 FD | 	call	#__system___string_cmp
111c8     01 FA 55 F2 | 	cmps	result1, #1 wc
111cc     60 00 90 CD |  if_b	jmp	#LR__1397
111d0     1E 37 02 F6 | 	mov	local09, local12
111d4     01 36 06 F1 | 	add	local09, #1
111d8     02 36 66 F0 | 	shl	local09, #2
111dc     1C 4E 05 F1 | 	add	fp, #28
111e0     A7 36 02 F1 | 	add	local09, fp
111e4     1B 45 02 FB | 	rdlong	local16, local09
111e8     1E 31 02 F6 | 	mov	local06, local12
111ec     02 30 66 F0 | 	shl	local06, #2
111f0     A7 30 02 F1 | 	add	local06, fp
111f4     18 2F 02 FB | 	rdlong	local05, local06
111f8     1E 37 02 F6 | 	mov	local09, local12
111fc     1B 31 02 F6 | 	mov	local06, local09
11200     02 30 66 F0 | 	shl	local06, #2
11204     A7 26 02 F6 | 	mov	local01, fp
11208     A7 30 02 F1 | 	add	local06, fp
1120c     18 45 62 FC | 	wrlong	local16, local06
11210     1E 41 02 F6 | 	mov	local14, local12
11214     01 40 06 F1 | 	add	local14, #1
11218     02 40 66 F0 | 	shl	local14, #2
1121c     A7 42 02 F6 | 	mov	local15, fp
11220     A7 40 02 F1 | 	add	local14, fp
11224     20 2F 62 FC | 	wrlong	local05, local14
11228     01 3A 66 F6 | 	neg	local11, #1
1122c     1C 4E 85 F1 | 	sub	fp, #28
11230                 | LR__1397
11230     01 3C 06 F1 | 	add	local12, #1
11234     4C FF 9F FD | 	jmp	#LR__1396
11238                 | LR__1398
11238                 | ' if not swapped then exit for
11238     1D 45 22 F6 | 	not	local16, local11
1123c     00 44 0E F2 | 	cmp	local16, #0 wz
11240     01 2C 06 A1 |  if_e	add	local04, #1
11244     20 FF 9F AD |  if_e	jmp	#LR__1395
11248                 | LR__1399
11248                 | ' for i=0 to n-1
11248     00 2C 06 F6 | 	mov	local04, #0
1124c                 | LR__1400
1124c     1A 2D 52 F2 | 	cmps	local04, local08 wc
11250     8C 00 90 3D |  if_ae	jmp	#LR__1402
11254                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11254     00 12 06 F6 | 	mov	arg01, #0
11258     E4 A9 B1 FD | 	call	#__system___getiolock_0602
1125c     FD 12 02 F6 | 	mov	arg01, result1
11260     B4 4C B1 FD | 	call	#__system___lockmem
11264     16 29 02 F6 | 	mov	local02, local04
11268     02 28 66 F0 | 	shl	local02, #2
1126c     1C 4E 05 F1 | 	add	fp, #28
11270     A7 28 02 F1 | 	add	local02, fp
11274     14 15 02 FB | 	rdlong	arg02, local02
11278     00 12 06 F6 | 	mov	arg01, #0
1127c     00 16 06 F6 | 	mov	arg03, #0
11280     1C 4E 85 F1 | 	sub	fp, #28
11284     84 59 B1 FD | 	call	#__system___basic_print_string
11288     00 12 06 F6 | 	mov	arg01, #0
1128c     B0 A9 B1 FD | 	call	#__system___getiolock_0602
11290     FD 00 68 FC | 	wrlong	#0, result1
11294     40 2A 06 F1 | 	add	local03, #64
11298     15 13 02 F6 | 	mov	arg01, local03
1129c     20 2F B1 FD | 	call	#_hg010b_spin2_setcursorx
112a0     00 2B 56 F2 | 	cmps	local03, #256 wc
112a4     30 00 90 CD |  if_b	jmp	#LR__1401
112a8     00 2A 06 F6 | 	mov	local03, #0
112ac     00 12 06 F6 | 	mov	arg01, #0
112b0     8C A9 B1 FD | 	call	#__system___getiolock_0602
112b4     FD 12 02 F6 | 	mov	arg01, result1
112b8     5C 4C B1 FD | 	call	#__system___lockmem
112bc     00 12 06 F6 | 	mov	arg01, #0
112c0     0A 14 06 F6 | 	mov	arg02, #10
112c4     00 16 06 F6 | 	mov	arg03, #0
112c8     E8 58 B1 FD | 	call	#__system___basic_print_char
112cc     00 12 06 F6 | 	mov	arg01, #0
112d0     6C A9 B1 FD | 	call	#__system___getiolock_0602
112d4     FD 00 68 FC | 	wrlong	#0, result1
112d8                 | LR__1401
112d8     01 2C 06 F1 | 	add	local04, #1
112dc     6C FF 9F FD | 	jmp	#LR__1400
112e0                 | LR__1402
112e0                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
112e0     80 34 56 F2 | 	cmps	local08, #128 wc
112e4     40 00 90 CD |  if_b	jmp	#LR__1403
112e8     00 12 06 F6 | 	mov	arg01, #0
112ec     50 A9 B1 FD | 	call	#__system___getiolock_0602
112f0     FD 12 02 F6 | 	mov	arg01, result1
112f4     20 4C B1 FD | 	call	#__system___lockmem
112f8     B1 01 00 FF 
112fc     45 15 06 F6 | 	mov	arg02, ##@LR__5860
11300     00 12 06 F6 | 	mov	arg01, #0
11304     00 16 06 F6 | 	mov	arg03, #0
11308     00 59 B1 FD | 	call	#__system___basic_print_string
1130c     00 12 06 F6 | 	mov	arg01, #0
11310     0A 14 06 F6 | 	mov	arg02, #10
11314     00 16 06 F6 | 	mov	arg03, #0
11318     98 58 B1 FD | 	call	#__system___basic_print_char
1131c     00 12 06 F6 | 	mov	arg01, #0
11320     1C A9 B1 FD | 	call	#__system___getiolock_0602
11324     FD 00 68 FC | 	wrlong	#0, result1
11328                 | LR__1403
11328                 | ' print
11328     00 12 06 F6 | 	mov	arg01, #0
1132c     10 A9 B1 FD | 	call	#__system___getiolock_0602
11330     FD 12 02 F6 | 	mov	arg01, result1
11334     E0 4B B1 FD | 	call	#__system___lockmem
11338     00 12 06 F6 | 	mov	arg01, #0
1133c     0A 14 06 F6 | 	mov	arg02, #10
11340     00 16 06 F6 | 	mov	arg03, #0
11344     6C 58 B1 FD | 	call	#__system___basic_print_char
11348     00 12 06 F6 | 	mov	arg01, #0
1134c     F0 A8 B1 FD | 	call	#__system___getiolock_0602
11350     FD 00 68 FC | 	wrlong	#0, result1
11354     A7 F0 03 F6 | 	mov	ptra, fp
11358     B2 00 A0 FD | 	call	#popregs_
1135c                 | _do_dir_ret
1135c     2D 00 64 FD | 	ret
11360                 | 
11360                 | ' 
11360                 | ' '-------------------- dpeek
11360                 | ' 
11360                 | ' sub do_dpeek
11360                 | _do_dpeek
11360     00 4A 05 F6 | 	mov	COUNT_, #0
11364     A8 00 A0 FD | 	call	#pushregs_
11368     14 F0 07 F1 | 	add	ptra, #20
1136c     70 BF BF FD | 	call	#_pop
11370     A7 FA 61 FC | 	wrlong	result1, fp
11374     04 4E 05 F1 | 	add	fp, #4
11378     A7 FC 61 FC | 	wrlong	result2, fp
1137c     04 4E 05 F1 | 	add	fp, #4
11380     A7 FE 61 FC | 	wrlong	result3, fp
11384     08 4E 85 F1 | 	sub	fp, #8
11388     A7 12 02 F6 | 	mov	arg01, fp
1138c     34 C1 BF FD | 	call	#_converttoint
11390     0C 4E 05 F1 | 	add	fp, #12
11394     A7 FA 61 FC | 	wrlong	result1, fp
11398                 | ' 
11398                 | ' t1=pop()
11398                 | ' a=converttoint(t1)
11398                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
11398     0C 4E 85 F1 | 	sub	fp, #12
1139c     00 04 00 FF 
113a0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
113a4     1C 00 90 3D |  if_ae	jmp	#LR__1410
113a8     0C 4E 05 F1 | 	add	fp, #12
113ac     A7 12 02 FB | 	rdlong	arg01, fp
113b0     09 FB E1 FA | 	rdword	result1, arg01
113b4     04 4E 05 F1 | 	add	fp, #4
113b8     A7 FA 61 FC | 	wrlong	result1, fp
113bc     10 4E 85 F1 | 	sub	fp, #16
113c0     1C 00 90 FD | 	jmp	#LR__1411
113c4                 | LR__1410
113c4     0C 4E 05 F1 | 	add	fp, #12
113c8     A7 12 02 FB | 	rdlong	arg01, fp
113cc     0C 4E 85 F1 | 	sub	fp, #12
113d0     80 14 B1 FD | 	call	#_psdpeek
113d4     10 4E 05 F1 | 	add	fp, #16
113d8     A7 FA 61 FC | 	wrlong	result1, fp
113dc     10 4E 85 F1 | 	sub	fp, #16
113e0                 | LR__1411
113e0     08 4E 05 F1 | 	add	fp, #8
113e4     A7 3A 68 FC | 	wrlong	#29, fp
113e8     08 4E 05 F1 | 	add	fp, #8
113ec     A7 12 02 FB | 	rdlong	arg01, fp
113f0     10 4E 85 F1 | 	sub	fp, #16
113f4     A7 12 62 FC | 	wrlong	arg01, fp
113f8     A7 12 02 F6 | 	mov	arg01, fp
113fc     78 BF BF FD | 	call	#_push
11400     A7 F0 03 F6 | 	mov	ptra, fp
11404     B2 00 A0 FD | 	call	#popregs_
11408                 | _do_dpeek_ret
11408     2D 00 64 FD | 	ret
1140c                 | 
1140c                 | ' 
1140c                 | ' '-------------------- dpoke
1140c                 | ' 
1140c                 | ' sub do_dpoke
1140c                 | _do_dpoke
1140c     01 4A 05 F6 | 	mov	COUNT_, #1
11410     A8 00 A0 FD | 	call	#pushregs_
11414     20 F0 07 F1 | 	add	ptra, #32
11418     C4 BE BF FD | 	call	#_pop
1141c     FD 14 02 F6 | 	mov	arg02, result1
11420     FE 12 02 F6 | 	mov	arg01, result2
11424     FF 26 02 F6 | 	mov	local01, result3
11428     A7 14 62 FC | 	wrlong	arg02, fp
1142c     04 4E 05 F1 | 	add	fp, #4
11430     A7 12 62 FC | 	wrlong	arg01, fp
11434     04 4E 05 F1 | 	add	fp, #4
11438     A7 26 62 FC | 	wrlong	local01, fp
1143c     08 4E 85 F1 | 	sub	fp, #8
11440     9C BE BF FD | 	call	#_pop
11444     FF 26 02 F6 | 	mov	local01, result3
11448     0C 4E 05 F1 | 	add	fp, #12
1144c     A7 FA 61 FC | 	wrlong	result1, fp
11450     04 4E 05 F1 | 	add	fp, #4
11454     A7 FC 61 FC | 	wrlong	result2, fp
11458     04 4E 05 F1 | 	add	fp, #4
1145c     A7 26 62 FC | 	wrlong	local01, fp
11460     08 4E 85 F1 | 	sub	fp, #8
11464     A7 12 02 F6 | 	mov	arg01, fp
11468     0C 4E 85 F1 | 	sub	fp, #12
1146c     54 C0 BF FD | 	call	#_converttoint
11470     18 4E 05 F1 | 	add	fp, #24
11474     A7 FA 61 FC | 	wrlong	result1, fp
11478     18 4E 85 F1 | 	sub	fp, #24
1147c     A7 12 02 F6 | 	mov	arg01, fp
11480     40 C0 BF FD | 	call	#_converttoint
11484     1C 4E 05 F1 | 	add	fp, #28
11488     A7 FA 61 FC | 	wrlong	result1, fp
1148c                 | ' 
1148c                 | ' t1=pop() 'value
1148c                 | ' t2=pop() 
1148c                 | ' a=converttoint(t2) : v=converttoint(t1)
1148c                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
1148c     04 4E 85 F1 | 	sub	fp, #4
11490     A7 26 02 FB | 	rdlong	local01, fp
11494     18 4E 85 F1 | 	sub	fp, #24
11498     00 04 00 FF 
1149c     00 26 16 F2 | 	cmp	local01, ##524288 wc
114a0     1C 00 90 3D |  if_ae	jmp	#LR__1420
114a4     18 4E 05 F1 | 	add	fp, #24
114a8     A7 12 02 FB | 	rdlong	arg01, fp
114ac     04 4E 05 F1 | 	add	fp, #4
114b0     A7 14 02 FB | 	rdlong	arg02, fp
114b4     1C 4E 85 F1 | 	sub	fp, #28
114b8     09 15 52 FC | 	wrword	arg02, arg01
114bc     18 00 90 FD | 	jmp	#LR__1421
114c0                 | LR__1420
114c0     18 4E 05 F1 | 	add	fp, #24
114c4     A7 12 02 FB | 	rdlong	arg01, fp
114c8     04 4E 05 F1 | 	add	fp, #4
114cc     A7 14 02 FB | 	rdlong	arg02, fp
114d0     1C 4E 85 F1 | 	sub	fp, #28
114d4     3C 12 B1 FD | 	call	#_psdpoke
114d8                 | LR__1421
114d8     A7 F0 03 F6 | 	mov	ptra, fp
114dc     B2 00 A0 FD | 	call	#popregs_
114e0                 | _do_dpoke_ret
114e0     2D 00 64 FD | 	ret
114e4                 | 
114e4                 | ' '-------------------- draw
114e4                 | ' 
114e4                 | ' sub do_draw
114e4                 | _do_draw
114e4     00 4A 05 F6 | 	mov	COUNT_, #0
114e8     A8 00 A0 FD | 	call	#pushregs_
114ec     20 F0 07 F1 | 	add	ptra, #32
114f0     EC BD BF FD | 	call	#_pop
114f4     FD 1A 02 F6 | 	mov	arg05, result1
114f8     FE 18 02 F6 | 	mov	arg04, result2
114fc     FF 16 02 F6 | 	mov	arg03, result3
11500     0C 4E 05 F1 | 	add	fp, #12
11504     A7 1A 62 FC | 	wrlong	arg05, fp
11508     04 4E 05 F1 | 	add	fp, #4
1150c     A7 18 62 FC | 	wrlong	arg04, fp
11510     04 4E 05 F1 | 	add	fp, #4
11514     A7 16 62 FC | 	wrlong	arg03, fp
11518     14 4E 85 F1 | 	sub	fp, #20
1151c     C0 BD BF FD | 	call	#_pop
11520     FF 1A 02 F6 | 	mov	arg05, result3
11524     A7 FA 61 FC | 	wrlong	result1, fp
11528     04 4E 05 F1 | 	add	fp, #4
1152c     A7 FC 61 FC | 	wrlong	result2, fp
11530     04 4E 05 F1 | 	add	fp, #4
11534     A7 1A 62 FC | 	wrlong	arg05, fp
11538     08 4E 85 F1 | 	sub	fp, #8
1153c     A7 12 02 F6 | 	mov	arg01, fp
11540     80 BF BF FD | 	call	#_converttoint
11544     18 4E 05 F1 | 	add	fp, #24
11548     A7 FA 61 FC | 	wrlong	result1, fp
1154c     0C 4E 85 F1 | 	sub	fp, #12
11550     A7 12 02 F6 | 	mov	arg01, fp
11554     0C 4E 85 F1 | 	sub	fp, #12
11558     68 BF BF FD | 	call	#_converttoint
1155c     1C 4E 05 F1 | 	add	fp, #28
11560     A7 FA 61 FC | 	wrlong	result1, fp
11564     37 00 00 FF 
11568     2C E4 05 F1 | 	add	objptr, ##28204
1156c     F2 12 02 FB | 	rdlong	arg01, objptr
11570     04 E4 05 F1 | 	add	objptr, #4
11574     F2 14 02 FB | 	rdlong	arg02, objptr
11578     04 4E 85 F1 | 	sub	fp, #4
1157c     A7 16 02 FB | 	rdlong	arg03, fp
11580     FD 18 02 F6 | 	mov	arg04, result1
11584     18 4E 85 F1 | 	sub	fp, #24
11588     08 E4 85 F1 | 	sub	objptr, #8
1158c     F2 1A 02 FB | 	rdlong	arg05, objptr
11590     37 00 00 FF 
11594     28 E4 85 F1 | 	sub	objptr, ##28200
11598     D4 22 B1 FD | 	call	#_hg010b_spin2_draw
1159c     18 4E 05 F1 | 	add	fp, #24
115a0     A7 1A 02 FB | 	rdlong	arg05, fp
115a4     37 00 00 FF 
115a8     2C E4 05 F1 | 	add	objptr, ##28204
115ac     F2 1A 62 FC | 	wrlong	arg05, objptr
115b0     04 4E 05 F1 | 	add	fp, #4
115b4     A7 1A 02 FB | 	rdlong	arg05, fp
115b8     1C 4E 85 F1 | 	sub	fp, #28
115bc     04 E4 05 F1 | 	add	objptr, #4
115c0     F2 1A 62 FC | 	wrlong	arg05, objptr
115c4     37 00 00 FF 
115c8     30 E4 85 F1 | 	sub	objptr, ##28208
115cc     A7 F0 03 F6 | 	mov	ptra, fp
115d0     B2 00 A0 FD | 	call	#popregs_
115d4                 | _do_draw_ret
115d4     2D 00 64 FD | 	ret
115d8                 | 
115d8                 | ' 
115d8                 | ' '-------------------- else
115d8                 | ' 
115d8                 | ' sub do_else
115d8                 | _do_else
115d8     4A 00 00 FF 
115dc     7C E4 05 F1 | 	add	objptr, ##38012
115e0     F2 00 02 FB | 	rdlong	_var01, objptr
115e4     01 00 86 F1 | 	sub	_var01, #1
115e8     04 E4 05 F1 | 	add	objptr, #4
115ec     F2 00 62 FC | 	wrlong	_var01, objptr
115f0     4A 00 00 FF 
115f4     80 E4 85 F1 | 	sub	objptr, ##38016
115f8                 | _do_else_ret
115f8     2D 00 64 FD | 	ret
115fc                 | 
115fc                 | ' 
115fc                 | ' '-------------------- end
115fc                 | ' 
115fc                 | ' sub do_end
115fc                 | _do_end
115fc     4A 00 00 FF 
11600     7C E4 05 F1 | 	add	objptr, ##38012
11604     F2 00 02 FB | 	rdlong	_var01, objptr
11608     01 00 86 F1 | 	sub	_var01, #1
1160c     04 E4 05 F1 | 	add	objptr, #4
11610     F2 00 62 FC | 	wrlong	_var01, objptr
11614     06 00 00 FF 
11618     38 E4 05 F1 | 	add	objptr, ##3128
1161c     FF FF BF FF 
11620     F2 FE 6B FC | 	wrlong	##2147483647, objptr
11624     50 00 00 FF 
11628     B8 E4 85 F1 | 	sub	objptr, ##41144
1162c                 | _do_end_ret
1162c     2D 00 64 FD | 	ret
11630                 | 
11630                 | ' 
11630                 | ' '-------------------- enter
11630                 | ' 
11630                 | ' sub do_enter
11630                 | _do_enter
11630     02 00 00 FF 
11634     D2 12 06 F6 | 	mov	arg01, ##1234
11638     A0 2E B0 FD | 	call	#_do_load
1163c                 | _do_enter_ret
1163c     2D 00 64 FD | 	ret
11640                 | 
11640                 | ' 
11640                 | ' '------------------- error processing
11640                 | ' 
11640                 | ' sub do_error
11640                 | _do_error
11640     01 4A 05 F6 | 	mov	COUNT_, #1
11644     A8 00 A0 FD | 	call	#pushregs_
11648     4A 00 00 FF 
1164c     80 E4 05 F1 | 	add	objptr, ##38016
11650     F2 18 02 FB | 	rdlong	arg04, objptr
11654     0C 17 02 F6 | 	mov	arg03, arg04
11658     01 16 66 F0 | 	shl	arg03, #1
1165c     0C 17 02 F1 | 	add	arg03, arg04
11660     02 16 66 F0 | 	shl	arg03, #2
11664     03 00 00 FF 
11668     04 E4 85 F1 | 	sub	objptr, ##1540
1166c     F2 16 02 F1 | 	add	arg03, objptr
11670     0B 27 02 FB | 	rdlong	local01, arg03
11674                 | ' r=compiledline(lineptr_e).result.uresult
11674                 | ' print "Error ";r;": ";errors$(r)
11674     00 12 06 F6 | 	mov	arg01, #0
11678     47 00 00 FF 
1167c     7C E4 85 F1 | 	sub	objptr, ##36476
11680     BC A5 B1 FD | 	call	#__system___getiolock_0602
11684     FD 12 02 F6 | 	mov	arg01, result1
11688     8C 48 B1 FD | 	call	#__system___lockmem
1168c     B1 01 00 FF 
11690     77 15 06 F6 | 	mov	arg02, ##@LR__5861
11694     00 12 06 F6 | 	mov	arg01, #0
11698     00 16 06 F6 | 	mov	arg03, #0
1169c     6C 55 B1 FD | 	call	#__system___basic_print_string
116a0     00 12 06 F6 | 	mov	arg01, #0
116a4     13 15 02 F6 | 	mov	arg02, local01
116a8     00 16 06 F6 | 	mov	arg03, #0
116ac     0A 18 06 F6 | 	mov	arg04, #10
116b0     DC 55 B1 FD | 	call	#__system___basic_print_unsigned
116b4     B1 01 00 FF 
116b8     7E 15 06 F6 | 	mov	arg02, ##@LR__5862
116bc     00 12 06 F6 | 	mov	arg01, #0
116c0     00 16 06 F6 | 	mov	arg03, #0
116c4     44 55 B1 FD | 	call	#__system___basic_print_string
116c8     02 26 66 F0 | 	shl	local01, #2
116cc     45 00 00 FF 
116d0     7C E4 05 F1 | 	add	objptr, ##35452
116d4     F2 26 02 F1 | 	add	local01, objptr
116d8     13 15 02 FB | 	rdlong	arg02, local01
116dc     00 12 06 F6 | 	mov	arg01, #0
116e0     00 16 06 F6 | 	mov	arg03, #0
116e4     45 00 00 FF 
116e8     7C E4 85 F1 | 	sub	objptr, ##35452
116ec     1C 55 B1 FD | 	call	#__system___basic_print_string
116f0     00 12 06 F6 | 	mov	arg01, #0
116f4     0A 14 06 F6 | 	mov	arg02, #10
116f8     00 16 06 F6 | 	mov	arg03, #0
116fc     B4 54 B1 FD | 	call	#__system___basic_print_char
11700     00 12 06 F6 | 	mov	arg01, #0
11704     38 A5 B1 FD | 	call	#__system___getiolock_0602
11708     FD 00 68 FC | 	wrlong	#0, result1
1170c     A7 F0 03 F6 | 	mov	ptra, fp
11710     B2 00 A0 FD | 	call	#popregs_
11714                 | _do_error_ret
11714     2D 00 64 FD | 	ret
11718                 | 
11718                 | ' 
11718                 | ' '-------------------- fcircle
11718                 | ' 
11718                 | ' sub do_fcircle
11718                 | _do_fcircle
11718     02 4A 05 F6 | 	mov	COUNT_, #2
1171c     A8 00 A0 FD | 	call	#pushregs_
11720     24 F0 07 F1 | 	add	ptra, #36
11724     B8 BB BF FD | 	call	#_pop
11728     FD 14 02 F6 | 	mov	arg02, result1
1172c     FE 18 02 F6 | 	mov	arg04, result2
11730     FF 16 02 F6 | 	mov	arg03, result3
11734     18 4E 05 F1 | 	add	fp, #24
11738     A7 14 62 FC | 	wrlong	arg02, fp
1173c     04 4E 05 F1 | 	add	fp, #4
11740     A7 18 62 FC | 	wrlong	arg04, fp
11744     04 4E 05 F1 | 	add	fp, #4
11748     A7 16 62 FC | 	wrlong	arg03, fp
1174c     20 4E 85 F1 | 	sub	fp, #32
11750     8C BB BF FD | 	call	#_pop
11754     FD 14 02 F6 | 	mov	arg02, result1
11758     FE 18 02 F6 | 	mov	arg04, result2
1175c     FF 16 02 F6 | 	mov	arg03, result3
11760     0C 4E 05 F1 | 	add	fp, #12
11764     A7 14 62 FC | 	wrlong	arg02, fp
11768     04 4E 05 F1 | 	add	fp, #4
1176c     A7 18 62 FC | 	wrlong	arg04, fp
11770     04 4E 05 F1 | 	add	fp, #4
11774     A7 16 62 FC | 	wrlong	arg03, fp
11778     14 4E 85 F1 | 	sub	fp, #20
1177c     60 BB BF FD | 	call	#_pop
11780     FF 14 02 F6 | 	mov	arg02, result3
11784     A7 FA 61 FC | 	wrlong	result1, fp
11788     04 4E 05 F1 | 	add	fp, #4
1178c     A7 FC 61 FC | 	wrlong	result2, fp
11790     04 4E 05 F1 | 	add	fp, #4
11794     A7 14 62 FC | 	wrlong	arg02, fp
11798     08 4E 85 F1 | 	sub	fp, #8
1179c     A7 12 02 F6 | 	mov	arg01, fp
117a0     20 BD BF FD | 	call	#_converttoint
117a4     FD 26 02 F6 | 	mov	local01, result1
117a8     0C 4E 05 F1 | 	add	fp, #12
117ac     A7 12 02 F6 | 	mov	arg01, fp
117b0     0C 4E 85 F1 | 	sub	fp, #12
117b4     0C BD BF FD | 	call	#_converttoint
117b8     FD 28 02 F6 | 	mov	local02, result1
117bc     18 4E 05 F1 | 	add	fp, #24
117c0     A7 12 02 F6 | 	mov	arg01, fp
117c4     18 4E 85 F1 | 	sub	fp, #24
117c8     F8 BC BF FD | 	call	#_converttoint
117cc     FD 16 02 F6 | 	mov	arg03, result1
117d0     37 00 00 FF 
117d4     28 E4 05 F1 | 	add	objptr, ##28200
117d8     F2 18 02 FB | 	rdlong	arg04, objptr
117dc     37 00 00 FF 
117e0     28 E4 85 F1 | 	sub	objptr, ##28200
117e4     13 13 02 F6 | 	mov	arg01, local01
117e8     14 15 02 F6 | 	mov	arg02, local02
117ec     04 25 B1 FD | 	call	#_hg010b_spin2_fcircle
117f0     A7 F0 03 F6 | 	mov	ptra, fp
117f4     B2 00 A0 FD | 	call	#popregs_
117f8                 | _do_fcircle_ret
117f8     2D 00 64 FD | 	ret
117fc                 | 
117fc                 | ' 
117fc                 | ' '-------------------- fill
117fc                 | ' 
117fc                 | ' sub do_fill
117fc                 | _do_fill
117fc     03 4A 05 F6 | 	mov	COUNT_, #3
11800     A8 00 A0 FD | 	call	#pushregs_
11804     30 F0 07 F1 | 	add	ptra, #48
11808     D4 BA BF FD | 	call	#_pop
1180c     FD 16 02 F6 | 	mov	arg03, result1
11810     FE 14 02 F6 | 	mov	arg02, result2
11814     FF 18 02 F6 | 	mov	arg04, result3
11818     24 4E 05 F1 | 	add	fp, #36
1181c     A7 16 62 FC | 	wrlong	arg03, fp
11820     04 4E 05 F1 | 	add	fp, #4
11824     A7 14 62 FC | 	wrlong	arg02, fp
11828     04 4E 05 F1 | 	add	fp, #4
1182c     A7 18 62 FC | 	wrlong	arg04, fp
11830     2C 4E 85 F1 | 	sub	fp, #44
11834     A8 BA BF FD | 	call	#_pop
11838     FD 16 02 F6 | 	mov	arg03, result1
1183c     FE 14 02 F6 | 	mov	arg02, result2
11840     FF 18 02 F6 | 	mov	arg04, result3
11844     18 4E 05 F1 | 	add	fp, #24
11848     A7 16 62 FC | 	wrlong	arg03, fp
1184c     04 4E 05 F1 | 	add	fp, #4
11850     A7 14 62 FC | 	wrlong	arg02, fp
11854     04 4E 05 F1 | 	add	fp, #4
11858     A7 18 62 FC | 	wrlong	arg04, fp
1185c     20 4E 85 F1 | 	sub	fp, #32
11860     7C BA BF FD | 	call	#_pop
11864     FD 16 02 F6 | 	mov	arg03, result1
11868     FE 14 02 F6 | 	mov	arg02, result2
1186c     FF 18 02 F6 | 	mov	arg04, result3
11870     0C 4E 05 F1 | 	add	fp, #12
11874     A7 16 62 FC | 	wrlong	arg03, fp
11878     04 4E 05 F1 | 	add	fp, #4
1187c     A7 14 62 FC | 	wrlong	arg02, fp
11880     04 4E 05 F1 | 	add	fp, #4
11884     A7 18 62 FC | 	wrlong	arg04, fp
11888     14 4E 85 F1 | 	sub	fp, #20
1188c     50 BA BF FD | 	call	#_pop
11890     FF 16 02 F6 | 	mov	arg03, result3
11894     A7 FA 61 FC | 	wrlong	result1, fp
11898     04 4E 05 F1 | 	add	fp, #4
1189c     A7 FC 61 FC | 	wrlong	result2, fp
118a0     04 4E 05 F1 | 	add	fp, #4
118a4     A7 16 62 FC | 	wrlong	arg03, fp
118a8     08 4E 85 F1 | 	sub	fp, #8
118ac     A7 12 02 F6 | 	mov	arg01, fp
118b0     10 BC BF FD | 	call	#_converttoint
118b4     FD 26 02 F6 | 	mov	local01, result1
118b8     0C 4E 05 F1 | 	add	fp, #12
118bc     A7 12 02 F6 | 	mov	arg01, fp
118c0     0C 4E 85 F1 | 	sub	fp, #12
118c4     FC BB BF FD | 	call	#_converttoint
118c8     FD 28 02 F6 | 	mov	local02, result1
118cc     18 4E 05 F1 | 	add	fp, #24
118d0     A7 12 02 F6 | 	mov	arg01, fp
118d4     18 4E 85 F1 | 	sub	fp, #24
118d8     E8 BB BF FD | 	call	#_converttoint
118dc     FD 2A 02 F6 | 	mov	local03, result1
118e0     24 4E 05 F1 | 	add	fp, #36
118e4     A7 12 02 F6 | 	mov	arg01, fp
118e8     24 4E 85 F1 | 	sub	fp, #36
118ec     D4 BB BF FD | 	call	#_converttoint
118f0     FD 18 02 F6 | 	mov	arg04, result1
118f4     13 13 02 F6 | 	mov	arg01, local01
118f8     14 15 02 F6 | 	mov	arg02, local02
118fc     15 17 02 F6 | 	mov	arg03, local03
11900     5C 21 B1 FD | 	call	#_hg010b_spin2_fill
11904     A7 F0 03 F6 | 	mov	ptra, fp
11908     B2 00 A0 FD | 	call	#popregs_
1190c                 | _do_fill_ret
1190c     2D 00 64 FD | 	ret
11910                 | 
11910                 | ' 
11910                 | ' '-------------------- font
11910                 | ' 
11910                 | ' sub do_font
11910                 | _do_font
11910     03 4A 05 F6 | 	mov	COUNT_, #3
11914     A8 00 A0 FD | 	call	#pushregs_
11918     C4 B9 BF FD | 	call	#_pop
1191c     FD 26 02 F6 | 	mov	local01, result1
11920     FE 28 02 F6 | 	mov	local02, result2
11924     FF 2A 02 F6 | 	mov	local03, result3
11928                 | ' 
11928                 | ' t1=pop() 
11928                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
11928     1E 2A 0E F2 | 	cmp	local03, #30 wz
1192c     10 00 90 5D |  if_ne	jmp	#LR__1430
11930     13 13 02 F6 | 	mov	arg01, local01
11934     00 14 06 F6 | 	mov	arg02, #0
11938     1C 79 B1 FD | 	call	#__system___float_tointeger
1193c     FD 26 02 F6 | 	mov	local01, result1
11940                 | LR__1430
11940                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
11940     1F 2A 0E F2 | 	cmp	local03, #31 wz
11944     18 00 90 5D |  if_ne	jmp	#LR__1431
11948     13 13 02 F6 | 	mov	arg01, local01
1194c     4C 7C B1 FD | 	call	#__system____builtin_atof
11950     FD 12 02 F6 | 	mov	arg01, result1
11954     00 14 06 F6 | 	mov	arg02, #0
11958     FC 78 B1 FD | 	call	#__system___float_tointeger
1195c     FD 26 02 F6 | 	mov	local01, result1
11960                 | LR__1431
11960     37 00 00 FF 
11964     40 E4 05 F1 | 	add	objptr, ##28224
11968     F2 26 62 FC | 	wrlong	local01, objptr
1196c     37 00 00 FF 
11970     40 E4 85 F1 | 	sub	objptr, ##28224
11974     02 26 66 F0 | 	shl	local01, #2
11978     13 13 02 F6 | 	mov	arg01, local01
1197c     C4 27 B1 FD | 	call	#_hg010b_spin2_setfontfamily
11980     A7 F0 03 F6 | 	mov	ptra, fp
11984     B2 00 A0 FD | 	call	#popregs_
11988                 | _do_font_ret
11988     2D 00 64 FD | 	ret
1198c                 | 
1198c                 | ' 
1198c                 | ' '-------------------- for
1198c                 | ' 
1198c                 | ' sub do_for()
1198c                 | _do_for
1198c     01 4A 05 F6 | 	mov	COUNT_, #1
11990     A8 00 A0 FD | 	call	#pushregs_
11994     10 F0 07 F1 | 	add	ptra, #16
11998     50 00 00 FF 
1199c     30 E5 05 F1 | 	add	objptr, ##41264
119a0     F2 12 02 FB | 	rdlong	arg01, objptr
119a4     01 12 06 F1 | 	add	arg01, #1
119a8     F2 12 62 FC | 	wrlong	arg01, objptr
119ac     50 00 00 FF 
119b0     30 E5 85 F1 | 	sub	objptr, ##41264
119b4     28 B9 BF FD | 	call	#_pop
119b8     A7 FA 61 FC | 	wrlong	result1, fp
119bc     04 4E 05 F1 | 	add	fp, #4
119c0     A7 FC 61 FC | 	wrlong	result2, fp
119c4     04 4E 05 F1 | 	add	fp, #4
119c8     A7 FE 61 FC | 	wrlong	result3, fp
119cc     08 4E 85 F1 | 	sub	fp, #8
119d0     50 00 00 FF 
119d4     30 E5 05 F1 | 	add	objptr, ##41264
119d8     F2 12 02 FB | 	rdlong	arg01, objptr
119dc     09 27 02 F6 | 	mov	local01, arg01
119e0     02 26 66 F0 | 	shl	local01, #2
119e4     09 27 02 F1 | 	add	local01, arg01
119e8     02 26 66 F0 | 	shl	local01, #2
119ec     06 00 00 FF 
119f0     98 E4 85 F1 | 	sub	objptr, ##3224
119f4     F2 26 02 F1 | 	add	local01, objptr
119f8     A7 12 02 FB | 	rdlong	arg01, fp
119fc     08 26 06 F1 | 	add	local01, #8
11a00     13 13 62 FC | 	wrlong	arg01, local01
11a04     4A 00 00 FF 
11a08     98 E4 85 F1 | 	sub	objptr, ##38040
11a0c     D0 B8 BF FD | 	call	#_pop
11a10     A7 FA 61 FC | 	wrlong	result1, fp
11a14     04 4E 05 F1 | 	add	fp, #4
11a18     A7 FC 61 FC | 	wrlong	result2, fp
11a1c     04 4E 05 F1 | 	add	fp, #4
11a20     A7 FE 61 FC | 	wrlong	result3, fp
11a24     08 4E 85 F1 | 	sub	fp, #8
11a28     50 00 00 FF 
11a2c     30 E5 05 F1 | 	add	objptr, ##41264
11a30     F2 12 02 FB | 	rdlong	arg01, objptr
11a34     09 27 02 F6 | 	mov	local01, arg01
11a38     02 26 66 F0 | 	shl	local01, #2
11a3c     09 27 02 F1 | 	add	local01, arg01
11a40     02 26 66 F0 | 	shl	local01, #2
11a44     06 00 00 FF 
11a48     98 E4 85 F1 | 	sub	objptr, ##3224
11a4c     F2 26 02 F1 | 	add	local01, objptr
11a50     A7 12 02 F6 | 	mov	arg01, fp
11a54     4A 00 00 FF 
11a58     98 E4 85 F1 | 	sub	objptr, ##38040
11a5c     64 BA BF FD | 	call	#_converttoint
11a60     FD 12 02 F6 | 	mov	arg01, result1
11a64     0C 26 06 F1 | 	add	local01, #12
11a68     13 13 62 FC | 	wrlong	arg01, local01
11a6c     70 B8 BF FD | 	call	#_pop
11a70     A7 FA 61 FC | 	wrlong	result1, fp
11a74     04 4E 05 F1 | 	add	fp, #4
11a78     A7 FC 61 FC | 	wrlong	result2, fp
11a7c     04 4E 05 F1 | 	add	fp, #4
11a80     A7 FE 61 FC | 	wrlong	result3, fp
11a84     08 4E 85 F1 | 	sub	fp, #8
11a88     50 00 00 FF 
11a8c     30 E5 05 F1 | 	add	objptr, ##41264
11a90     F2 12 02 FB | 	rdlong	arg01, objptr
11a94     09 27 02 F6 | 	mov	local01, arg01
11a98     02 26 66 F0 | 	shl	local01, #2
11a9c     09 27 02 F1 | 	add	local01, arg01
11aa0     02 26 66 F0 | 	shl	local01, #2
11aa4     06 00 00 FF 
11aa8     98 E4 85 F1 | 	sub	objptr, ##3224
11aac     F2 26 02 F1 | 	add	local01, objptr
11ab0     A7 12 02 F6 | 	mov	arg01, fp
11ab4     4A 00 00 FF 
11ab8     98 E4 85 F1 | 	sub	objptr, ##38040
11abc     04 BA BF FD | 	call	#_converttoint
11ac0     10 26 06 F1 | 	add	local01, #16
11ac4     13 FB 61 FC | 	wrlong	result1, local01
11ac8                 | ' fortop+=1
11ac8                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
11ac8                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
11ac8                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
11ac8                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
11ac8     4A 00 00 FF 
11acc     80 E4 05 F1 | 	add	objptr, ##38016
11ad0     F2 12 02 FB | 	rdlong	arg01, objptr
11ad4     09 27 02 F6 | 	mov	local01, arg01
11ad8     01 26 66 F0 | 	shl	local01, #1
11adc     09 27 02 F1 | 	add	local01, arg01
11ae0     02 26 66 F0 | 	shl	local01, #2
11ae4     03 00 00 FF 
11ae8     04 E4 85 F1 | 	sub	objptr, ##1540
11aec     F2 26 02 F1 | 	add	local01, objptr
11af0     08 26 06 F1 | 	add	local01, #8
11af4     13 27 02 FB | 	rdlong	local01, local01
11af8     FE 27 0E F2 | 	cmp	local01, #510 wz
11afc     47 00 00 FF 
11b00     7C E4 85 F1 | 	sub	objptr, ##36476
11b04     70 00 90 5D |  if_ne	jmp	#LR__1440
11b08     50 00 00 FF 
11b0c     30 E5 05 F1 | 	add	objptr, ##41264
11b10     F2 12 02 FB | 	rdlong	arg01, objptr
11b14     09 27 02 F6 | 	mov	local01, arg01
11b18     02 26 66 F0 | 	shl	local01, #2
11b1c     09 27 02 F1 | 	add	local01, arg01
11b20     02 26 66 F0 | 	shl	local01, #2
11b24     06 00 00 FF 
11b28     98 E4 85 F1 | 	sub	objptr, ##3224
11b2c     F2 26 02 F1 | 	add	local01, objptr
11b30     06 00 00 FF 
11b34     20 E4 05 F1 | 	add	objptr, ##3104
11b38     F2 12 02 FB | 	rdlong	arg01, objptr
11b3c     13 13 62 FC | 	wrlong	arg01, local01
11b40     78 E4 05 F1 | 	add	objptr, #120
11b44     F2 12 02 FB | 	rdlong	arg01, objptr
11b48     09 27 02 F6 | 	mov	local01, arg01
11b4c     02 26 66 F0 | 	shl	local01, #2
11b50     09 27 02 F1 | 	add	local01, arg01
11b54     02 26 66 F0 | 	shl	local01, #2
11b58     06 00 00 FF 
11b5c     98 E4 85 F1 | 	sub	objptr, ##3224
11b60     F2 26 02 F1 | 	add	local01, objptr
11b64     04 26 06 F1 | 	add	local01, #4
11b68     13 01 68 FC | 	wrlong	#0, local01
11b6c     4A 00 00 FF 
11b70     98 E4 85 F1 | 	sub	objptr, ##38040
11b74     78 00 90 FD | 	jmp	#LR__1441
11b78                 | LR__1440
11b78     50 00 00 FF 
11b7c     30 E5 05 F1 | 	add	objptr, ##41264
11b80     F2 12 02 FB | 	rdlong	arg01, objptr
11b84     09 27 02 F6 | 	mov	local01, arg01
11b88     02 26 66 F0 | 	shl	local01, #2
11b8c     09 27 02 F1 | 	add	local01, arg01
11b90     02 26 66 F0 | 	shl	local01, #2
11b94     06 00 00 FF 
11b98     98 E4 85 F1 | 	sub	objptr, ##3224
11b9c     F2 26 02 F1 | 	add	local01, objptr
11ba0     06 00 00 FF 
11ba4     28 E4 05 F1 | 	add	objptr, ##3112
11ba8     F2 12 02 FB | 	rdlong	arg01, objptr
11bac     13 13 62 FC | 	wrlong	arg01, local01
11bb0     70 E4 05 F1 | 	add	objptr, #112
11bb4     F2 12 02 FB | 	rdlong	arg01, objptr
11bb8     09 27 02 F6 | 	mov	local01, arg01
11bbc     02 26 66 F0 | 	shl	local01, #2
11bc0     09 27 02 F1 | 	add	local01, arg01
11bc4     02 26 66 F0 | 	shl	local01, #2
11bc8     06 00 00 FF 
11bcc     98 E4 85 F1 | 	sub	objptr, ##3224
11bd0     F2 26 02 F1 | 	add	local01, objptr
11bd4     18 E4 85 F1 | 	sub	objptr, #24
11bd8     F2 12 02 FB | 	rdlong	arg01, objptr
11bdc     4A 00 00 FF 
11be0     80 E4 85 F1 | 	sub	objptr, ##38016
11be4     01 12 06 F1 | 	add	arg01, #1
11be8     04 26 06 F1 | 	add	local01, #4
11bec     13 13 62 FC | 	wrlong	arg01, local01
11bf0                 | LR__1441
11bf0     A7 F0 03 F6 | 	mov	ptra, fp
11bf4     B2 00 A0 FD | 	call	#popregs_
11bf8                 | _do_for_ret
11bf8     2D 00 64 FD | 	ret
11bfc                 | 
11bfc                 | ' 
11bfc                 | ' '-------------------- frame
11bfc                 | ' 
11bfc                 | ' sub do_frame
11bfc                 | _do_frame
11bfc     03 4A 05 F6 | 	mov	COUNT_, #3
11c00     A8 00 A0 FD | 	call	#pushregs_
11c04     30 F0 07 F1 | 	add	ptra, #48
11c08     D4 B6 BF FD | 	call	#_pop
11c0c     FD 16 02 F6 | 	mov	arg03, result1
11c10     FE 14 02 F6 | 	mov	arg02, result2
11c14     FF 1A 02 F6 | 	mov	arg05, result3
11c18     24 4E 05 F1 | 	add	fp, #36
11c1c     A7 16 62 FC | 	wrlong	arg03, fp
11c20     04 4E 05 F1 | 	add	fp, #4
11c24     A7 14 62 FC | 	wrlong	arg02, fp
11c28     04 4E 05 F1 | 	add	fp, #4
11c2c     A7 1A 62 FC | 	wrlong	arg05, fp
11c30     2C 4E 85 F1 | 	sub	fp, #44
11c34     A8 B6 BF FD | 	call	#_pop
11c38     FD 16 02 F6 | 	mov	arg03, result1
11c3c     FE 14 02 F6 | 	mov	arg02, result2
11c40     FF 1A 02 F6 | 	mov	arg05, result3
11c44     18 4E 05 F1 | 	add	fp, #24
11c48     A7 16 62 FC | 	wrlong	arg03, fp
11c4c     04 4E 05 F1 | 	add	fp, #4
11c50     A7 14 62 FC | 	wrlong	arg02, fp
11c54     04 4E 05 F1 | 	add	fp, #4
11c58     A7 1A 62 FC | 	wrlong	arg05, fp
11c5c     20 4E 85 F1 | 	sub	fp, #32
11c60     7C B6 BF FD | 	call	#_pop
11c64     FD 16 02 F6 | 	mov	arg03, result1
11c68     FE 14 02 F6 | 	mov	arg02, result2
11c6c     FF 1A 02 F6 | 	mov	arg05, result3
11c70     0C 4E 05 F1 | 	add	fp, #12
11c74     A7 16 62 FC | 	wrlong	arg03, fp
11c78     04 4E 05 F1 | 	add	fp, #4
11c7c     A7 14 62 FC | 	wrlong	arg02, fp
11c80     04 4E 05 F1 | 	add	fp, #4
11c84     A7 1A 62 FC | 	wrlong	arg05, fp
11c88     14 4E 85 F1 | 	sub	fp, #20
11c8c     50 B6 BF FD | 	call	#_pop
11c90     FF 16 02 F6 | 	mov	arg03, result3
11c94     A7 FA 61 FC | 	wrlong	result1, fp
11c98     04 4E 05 F1 | 	add	fp, #4
11c9c     A7 FC 61 FC | 	wrlong	result2, fp
11ca0     04 4E 05 F1 | 	add	fp, #4
11ca4     A7 16 62 FC | 	wrlong	arg03, fp
11ca8     08 4E 85 F1 | 	sub	fp, #8
11cac     A7 12 02 F6 | 	mov	arg01, fp
11cb0     10 B8 BF FD | 	call	#_converttoint
11cb4     FD 26 02 F6 | 	mov	local01, result1
11cb8     0C 4E 05 F1 | 	add	fp, #12
11cbc     A7 12 02 F6 | 	mov	arg01, fp
11cc0     0C 4E 85 F1 | 	sub	fp, #12
11cc4     FC B7 BF FD | 	call	#_converttoint
11cc8     FD 28 02 F6 | 	mov	local02, result1
11ccc     18 4E 05 F1 | 	add	fp, #24
11cd0     A7 12 02 F6 | 	mov	arg01, fp
11cd4     18 4E 85 F1 | 	sub	fp, #24
11cd8     E8 B7 BF FD | 	call	#_converttoint
11cdc     FD 2A 02 F6 | 	mov	local03, result1
11ce0     24 4E 05 F1 | 	add	fp, #36
11ce4     A7 12 02 F6 | 	mov	arg01, fp
11ce8     24 4E 85 F1 | 	sub	fp, #36
11cec     D4 B7 BF FD | 	call	#_converttoint
11cf0     FD 18 02 F6 | 	mov	arg04, result1
11cf4     37 00 00 FF 
11cf8     28 E4 05 F1 | 	add	objptr, ##28200
11cfc     F2 1A 02 FB | 	rdlong	arg05, objptr
11d00     37 00 00 FF 
11d04     28 E4 85 F1 | 	sub	objptr, ##28200
11d08     13 13 02 F6 | 	mov	arg01, local01
11d0c     14 15 02 F6 | 	mov	arg02, local02
11d10     15 17 02 F6 | 	mov	arg03, local03
11d14     34 22 B1 FD | 	call	#_hg010b_spin2_frame
11d18     A7 F0 03 F6 | 	mov	ptra, fp
11d1c     B2 00 A0 FD | 	call	#popregs_
11d20                 | _do_frame_ret
11d20     2D 00 64 FD | 	ret
11d24                 | 
11d24                 | ' 
11d24                 | ' '-------------------- framebuf
11d24                 | ' 
11d24                 | ' sub do_framebuf
11d24                 | _do_framebuf
11d24     00 4A 05 F6 | 	mov	COUNT_, #0
11d28     A8 00 A0 FD | 	call	#pushregs_
11d2c     0C F0 07 F1 | 	add	ptra, #12
11d30     08 4E 05 F1 | 	add	fp, #8
11d34     A7 3A 68 FC | 	wrlong	#29, fp
11d38     F2 12 02 FB | 	rdlong	arg01, objptr
11d3c     08 4E 85 F1 | 	sub	fp, #8
11d40     A7 12 62 FC | 	wrlong	arg01, fp
11d44     A7 12 02 F6 | 	mov	arg01, fp
11d48     2C B6 BF FD | 	call	#_push
11d4c     A7 F0 03 F6 | 	mov	ptra, fp
11d50     B2 00 A0 FD | 	call	#popregs_
11d54                 | _do_framebuf_ret
11d54     2D 00 64 FD | 	ret
11d58                 | 
11d58                 | ' '-------------------- fre
11d58                 | ' 
11d58                 | ' sub do_fre
11d58                 | _do_fre
11d58     01 4A 05 F6 | 	mov	COUNT_, #1
11d5c     A8 00 A0 FD | 	call	#pushregs_
11d60     0C F0 07 F1 | 	add	ptra, #12
11d64     52 00 00 FF 
11d68     98 E4 05 F1 | 	add	objptr, ##42136
11d6c     F2 12 02 FB | 	rdlong	arg01, objptr
11d70     0F 00 00 FF 
11d74     3C E4 85 F1 | 	sub	objptr, ##7740
11d78     F2 26 02 FB | 	rdlong	local01, objptr
11d7c     13 13 82 F1 | 	sub	arg01, local01
11d80     0F 00 00 FF 
11d84     B4 E4 05 F1 | 	add	objptr, ##7860
11d88     F2 12 62 FC | 	wrlong	arg01, objptr
11d8c     08 4E 05 F1 | 	add	fp, #8
11d90     A7 3A 68 FC | 	wrlong	#29, fp
11d94     08 4E 85 F1 | 	sub	fp, #8
11d98     F2 26 02 FB | 	rdlong	local01, objptr
11d9c     52 00 00 FF 
11da0     10 E5 85 F1 | 	sub	objptr, ##42256
11da4     A7 26 62 FC | 	wrlong	local01, fp
11da8     A7 12 02 F6 | 	mov	arg01, fp
11dac     C8 B5 BF FD | 	call	#_push
11db0     A7 F0 03 F6 | 	mov	ptra, fp
11db4     B2 00 A0 FD | 	call	#popregs_
11db8                 | _do_fre_ret
11db8     2D 00 64 FD | 	ret
11dbc                 | 
11dbc                 | ' 
11dbc                 | ' '-------------------- get
11dbc                 | ' 
11dbc                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
11dbc                 | _do_get
11dbc     09 4A 05 F6 | 	mov	COUNT_, #9
11dc0     A8 00 A0 FD | 	call	#pushregs_
11dc4     40 F0 07 F1 | 	add	ptra, #64
11dc8     4A 00 00 FF 
11dcc     80 E4 05 F1 | 	add	objptr, ##38016
11dd0     F2 1A 02 FB | 	rdlong	arg05, objptr
11dd4     0D 19 02 F6 | 	mov	arg04, arg05
11dd8     01 18 66 F0 | 	shl	arg04, #1
11ddc     0D 19 02 F1 | 	add	arg04, arg05
11de0     02 18 66 F0 | 	shl	arg04, #2
11de4     03 00 00 FF 
11de8     04 E4 85 F1 | 	sub	objptr, ##1540
11dec     F2 18 02 F1 | 	add	arg04, objptr
11df0     0C 1B 02 FB | 	rdlong	arg05, arg04
11df4     A7 1A 62 FC | 	wrlong	arg05, fp
11df8                 | ' 
11df8                 | ' numpar=compiledline(lineptr_e).result.uresult
11df8                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
11df8     04 1A 0E F2 | 	cmp	arg05, #4 wz
11dfc     47 00 00 FF 
11e00     7C E4 85 F1 | 	sub	objptr, ##36476
11e04     48 00 90 5D |  if_ne	jmp	#LR__1450
11e08     D4 B4 BF FD | 	call	#_pop
11e0c     FF 1A 02 F6 | 	mov	arg05, result3
11e10     1C 4E 05 F1 | 	add	fp, #28
11e14     A7 FA 61 FC | 	wrlong	result1, fp
11e18     04 4E 05 F1 | 	add	fp, #4
11e1c     A7 FC 61 FC | 	wrlong	result2, fp
11e20     04 4E 05 F1 | 	add	fp, #4
11e24     A7 1A 62 FC | 	wrlong	arg05, fp
11e28     08 4E 85 F1 | 	sub	fp, #8
11e2c     A7 12 02 F6 | 	mov	arg01, fp
11e30     1C 4E 85 F1 | 	sub	fp, #28
11e34     8C B6 BF FD | 	call	#_converttoint
11e38     52 00 00 FF 
11e3c     0C E5 05 F1 | 	add	objptr, ##42252
11e40     F2 FA 61 FC | 	wrlong	result1, objptr
11e44     52 00 00 FF 
11e48     0C E5 85 F1 | 	sub	objptr, ##42252
11e4c     18 00 90 FD | 	jmp	#LR__1451
11e50                 | LR__1450
11e50     52 00 00 FF 
11e54     0C E5 05 F1 | 	add	objptr, ##42252
11e58     FF FF FF FF 
11e5c     F2 FE 6B FC | 	wrlong	##-1, objptr
11e60     52 00 00 FF 
11e64     0C E5 85 F1 | 	sub	objptr, ##42252
11e68                 | LR__1451
11e68                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
11e68     A7 16 02 FB | 	rdlong	arg03, fp
11e6c     03 16 56 F2 | 	cmps	arg03, #3 wc
11e70     40 00 90 CD |  if_b	jmp	#LR__1452
11e74     68 B4 BF FD | 	call	#_pop
11e78     FF 16 02 F6 | 	mov	arg03, result3
11e7c     1C 4E 05 F1 | 	add	fp, #28
11e80     A7 FA 61 FC | 	wrlong	result1, fp
11e84     04 4E 05 F1 | 	add	fp, #4
11e88     A7 FC 61 FC | 	wrlong	result2, fp
11e8c     04 4E 05 F1 | 	add	fp, #4
11e90     A7 16 62 FC | 	wrlong	arg03, fp
11e94     08 4E 85 F1 | 	sub	fp, #8
11e98     A7 12 02 F6 | 	mov	arg01, fp
11e9c     1C 4E 85 F1 | 	sub	fp, #28
11ea0     20 B6 BF FD | 	call	#_converttoint
11ea4     08 4E 05 F1 | 	add	fp, #8
11ea8     A7 FA 61 FC | 	wrlong	result1, fp
11eac     08 4E 85 F1 | 	sub	fp, #8
11eb0     0C 00 90 FD | 	jmp	#LR__1453
11eb4                 | LR__1452
11eb4     08 4E 05 F1 | 	add	fp, #8
11eb8     A7 02 68 FC | 	wrlong	#1, fp
11ebc     08 4E 85 F1 | 	sub	fp, #8
11ec0                 | LR__1453
11ec0                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
11ec0     A7 16 02 FB | 	rdlong	arg03, fp
11ec4     02 16 56 F2 | 	cmps	arg03, #2 wc
11ec8     3C 00 90 CD |  if_b	jmp	#LR__1454
11ecc     10 B4 BF FD | 	call	#_pop
11ed0     FF 16 02 F6 | 	mov	arg03, result3
11ed4     1C 4E 05 F1 | 	add	fp, #28
11ed8     A7 FA 61 FC | 	wrlong	result1, fp
11edc     04 4E 05 F1 | 	add	fp, #4
11ee0     A7 FC 61 FC | 	wrlong	result2, fp
11ee4     04 4E 05 F1 | 	add	fp, #4
11ee8     A7 16 62 FC | 	wrlong	arg03, fp
11eec     08 4E 85 F1 | 	sub	fp, #8
11ef0     A7 12 02 F6 | 	mov	arg01, fp
11ef4     1C 4E 85 F1 | 	sub	fp, #28
11ef8     C8 B5 BF FD | 	call	#_converttoint
11efc     0C 4E 05 F1 | 	add	fp, #12
11f00     A7 FA 61 FC | 	wrlong	result1, fp
11f04     0C 4E 85 F1 | 	sub	fp, #12
11f08                 | LR__1454
11f08     D4 B3 BF FD | 	call	#_pop
11f0c     FF 16 02 F6 | 	mov	arg03, result3
11f10     1C 4E 05 F1 | 	add	fp, #28
11f14     A7 FA 61 FC | 	wrlong	result1, fp
11f18     04 4E 05 F1 | 	add	fp, #4
11f1c     A7 FC 61 FC | 	wrlong	result2, fp
11f20     04 4E 05 F1 | 	add	fp, #4
11f24     A7 16 62 FC | 	wrlong	arg03, fp
11f28     08 4E 85 F1 | 	sub	fp, #8
11f2c     A7 12 02 F6 | 	mov	arg01, fp
11f30     1C 4E 85 F1 | 	sub	fp, #28
11f34     8C B5 BF FD | 	call	#_converttoint
11f38     04 4E 05 F1 | 	add	fp, #4
11f3c     A7 FA 61 FC | 	wrlong	result1, fp
11f40     10 4E 05 F1 | 	add	fp, #16
11f44     A7 16 02 FB | 	rdlong	arg03, fp
11f48     14 4E 85 F1 | 	sub	fp, #20
11f4c     02 16 66 F0 | 	shl	arg03, #2
11f50     50 00 00 FF 
11f54     C4 E4 05 F1 | 	add	objptr, ##41156
11f58     F2 26 02 F6 | 	mov	local01, objptr
11f5c     F2 16 02 F1 | 	add	arg03, objptr
11f60     0B 01 68 FC | 	wrlong	#0, arg03
11f64                 | ' t1=pop() : channel=converttoint(t1)
11f64                 | ' getres(j)=0
11f64                 | ' if pos>=0 then
11f64     02 00 00 FF 
11f68     48 E4 05 F1 | 	add	objptr, ##1096
11f6c     F2 28 02 FB | 	rdlong	local02, objptr
11f70     52 00 00 FF 
11f74     0C E5 85 F1 | 	sub	objptr, ##42252
11f78     00 28 56 F2 | 	cmps	local02, #0 wc
11f7c     F0 01 90 CD |  if_b	jmp	#LR__1461
11f80                 | '   for i=0 to  amount/1024
11f80     10 4E 05 F1 | 	add	fp, #16
11f84     A7 00 68 FC | 	wrlong	#0, fp
11f88     08 4E 85 F1 | 	sub	fp, #8
11f8c     A7 2A 02 FB | 	rdlong	local03, fp
11f90     08 4E 85 F1 | 	sub	fp, #8
11f94     15 2D 52 F6 | 	abs	local04, local03 wc
11f98     0A 2C 46 F0 | 	shr	local04, #10
11f9c     16 2D 82 F6 | 	negc	local04, local04
11fa0     01 2C 06 F1 | 	add	local04, #1
11fa4                 | LR__1455
11fa4     10 4E 05 F1 | 	add	fp, #16
11fa8     A7 2A 02 FB | 	rdlong	local03, fp
11fac     10 4E 85 F1 | 	sub	fp, #16
11fb0     16 2B 52 F2 | 	cmps	local03, local04 wc
11fb4     9C 03 90 3D |  if_ae	jmp	#LR__1469
11fb8                 | '     get #channel,pos+1,block(0),amount,r
11fb8     04 4E 05 F1 | 	add	fp, #4
11fbc     A7 12 02 FB | 	rdlong	arg01, fp
11fc0     52 00 00 FF 
11fc4     0C E5 05 F1 | 	add	objptr, ##42252
11fc8     F2 14 02 FB | 	rdlong	arg02, objptr
11fcc     01 14 06 F1 | 	add	arg02, #1
11fd0     04 00 00 FF 
11fd4     58 E4 85 F1 | 	sub	objptr, ##2136
11fd8     F2 16 02 F6 | 	mov	arg03, objptr
11fdc     4E 00 00 FF 
11fe0     B4 E4 85 F1 | 	sub	objptr, ##40116
11fe4     04 4E 05 F1 | 	add	fp, #4
11fe8     A7 18 02 FB | 	rdlong	arg04, fp
11fec     08 4E 85 F1 | 	sub	fp, #8
11ff0     01 1A 06 F6 | 	mov	arg05, #1
11ff4     90 4D B1 FD | 	call	#__system___basic_get
11ff8     18 4E 05 F1 | 	add	fp, #24
11ffc     A7 FA 61 FC | 	wrlong	result1, fp
12000                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12000     0C 4E 85 F1 | 	sub	fp, #12
12004     A7 28 02 FB | 	rdlong	local02, fp
12008     0C 4E 85 F1 | 	sub	fp, #12
1200c     00 04 00 FF 
12010     00 28 56 F2 | 	cmps	local02, ##524288 wc
12014     7C 00 90 3D |  if_ae	jmp	#LR__1457
12018     14 4E 05 F1 | 	add	fp, #20
1201c     A7 00 68 FC | 	wrlong	#0, fp
12020     04 4E 05 F1 | 	add	fp, #4
12024     A7 2E 02 FB | 	rdlong	local05, fp
12028     18 4E 85 F1 | 	sub	fp, #24
1202c                 | LR__1456
1202c     14 4E 05 F1 | 	add	fp, #20
12030     A7 28 02 FB | 	rdlong	local02, fp
12034     14 4E 85 F1 | 	sub	fp, #20
12038     17 29 52 F2 | 	cmps	local02, local05 wc
1203c     D8 00 90 3D |  if_ae	jmp	#LR__1460
12040     0C 4E 05 F1 | 	add	fp, #12
12044     A7 12 02 FB | 	rdlong	arg01, fp
12048     04 4E 05 F1 | 	add	fp, #4
1204c     A7 2A 02 FB | 	rdlong	local03, fp
12050     0A 2A 66 F0 | 	shl	local03, #10
12054     15 13 02 F1 | 	add	arg01, local03
12058     04 4E 05 F1 | 	add	fp, #4
1205c     A7 2A 02 FB | 	rdlong	local03, fp
12060     15 13 02 F1 | 	add	arg01, local03
12064     4E 00 00 FF 
12068     B4 E4 05 F1 | 	add	objptr, ##40116
1206c     F2 2A 02 F1 | 	add	local03, objptr
12070     15 15 C2 FA | 	rdbyte	arg02, local03
12074     09 15 42 FC | 	wrbyte	arg02, arg01
12078     4E 00 00 FF 
1207c     B4 E4 85 F1 | 	sub	objptr, ##40116
12080     A7 2A 02 FB | 	rdlong	local03, fp
12084     01 2A 06 F1 | 	add	local03, #1
12088     A7 2A 62 FC | 	wrlong	local03, fp
1208c     14 4E 85 F1 | 	sub	fp, #20
12090     98 FF 9F FD | 	jmp	#LR__1456
12094                 | LR__1457
12094     14 4E 05 F1 | 	add	fp, #20
12098     A7 00 68 FC | 	wrlong	#0, fp
1209c     04 4E 05 F1 | 	add	fp, #4
120a0     A7 30 02 FB | 	rdlong	local06, fp
120a4     18 4E 85 F1 | 	sub	fp, #24
120a8                 | LR__1458
120a8     14 4E 05 F1 | 	add	fp, #20
120ac     A7 28 02 FB | 	rdlong	local02, fp
120b0     14 4E 85 F1 | 	sub	fp, #20
120b4     18 29 52 F2 | 	cmps	local02, local06 wc
120b8     5C 00 90 3D |  if_ae	jmp	#LR__1459
120bc     0C 4E 05 F1 | 	add	fp, #12
120c0     A7 12 02 FB | 	rdlong	arg01, fp
120c4     04 4E 05 F1 | 	add	fp, #4
120c8     A7 2E 02 FB | 	rdlong	local05, fp
120cc     0A 2E 66 F0 | 	shl	local05, #10
120d0     17 13 02 F1 | 	add	arg01, local05
120d4     04 4E 05 F1 | 	add	fp, #4
120d8     A7 2E 02 FB | 	rdlong	local05, fp
120dc     17 13 02 F1 | 	add	arg01, local05
120e0     14 4E 85 F1 | 	sub	fp, #20
120e4     4E 00 00 FF 
120e8     B4 E4 05 F1 | 	add	objptr, ##40116
120ec     F2 2E 02 F1 | 	add	local05, objptr
120f0     17 15 C2 FA | 	rdbyte	arg02, local05
120f4     4E 00 00 FF 
120f8     B4 E4 85 F1 | 	sub	objptr, ##40116
120fc     5C 06 B1 FD | 	call	#_pspoke
12100     14 4E 05 F1 | 	add	fp, #20
12104     A7 2E 02 FB | 	rdlong	local05, fp
12108     01 2E 06 F1 | 	add	local05, #1
1210c     A7 2E 62 FC | 	wrlong	local05, fp
12110     14 4E 85 F1 | 	sub	fp, #20
12114     90 FF 9F FD | 	jmp	#LR__1458
12118                 | LR__1459
12118                 | LR__1460
12118     14 4E 05 F1 | 	add	fp, #20
1211c     A7 30 02 FB | 	rdlong	local06, fp
12120     18 2B 02 F6 | 	mov	local03, local06
12124     02 2A 66 F0 | 	shl	local03, #2
12128     50 00 00 FF 
1212c     C4 E4 05 F1 | 	add	objptr, ##41156
12130     F2 2A 02 F1 | 	add	local03, objptr
12134     02 30 66 F0 | 	shl	local06, #2
12138     F2 30 02 F1 | 	add	local06, objptr
1213c     18 31 02 FB | 	rdlong	local06, local06
12140     04 4E 05 F1 | 	add	fp, #4
12144     A7 2E 02 FB | 	rdlong	local05, fp
12148     17 31 02 F1 | 	add	local06, local05
1214c     15 31 62 FC | 	wrlong	local06, local03
12150     08 4E 85 F1 | 	sub	fp, #8
12154     A7 30 02 FB | 	rdlong	local06, fp
12158     01 30 06 F1 | 	add	local06, #1
1215c     A7 30 62 FC | 	wrlong	local06, fp
12160     10 4E 85 F1 | 	sub	fp, #16
12164     50 00 00 FF 
12168     C4 E4 85 F1 | 	sub	objptr, ##41156
1216c     34 FE 9F FD | 	jmp	#LR__1455
12170                 | LR__1461
12170                 | '   for i=0 to  amount/1024
12170     10 4E 05 F1 | 	add	fp, #16
12174     A7 00 68 FC | 	wrlong	#0, fp
12178     08 4E 85 F1 | 	sub	fp, #8
1217c     A7 2A 02 FB | 	rdlong	local03, fp
12180     08 4E 85 F1 | 	sub	fp, #8
12184     15 33 52 F6 | 	abs	local07, local03 wc
12188     0A 32 46 F0 | 	shr	local07, #10
1218c     19 33 82 F6 | 	negc	local07, local07
12190     01 32 06 F1 | 	add	local07, #1
12194                 | LR__1462
12194     10 4E 05 F1 | 	add	fp, #16
12198     A7 2A 02 FB | 	rdlong	local03, fp
1219c     10 4E 85 F1 | 	sub	fp, #16
121a0     19 2B 52 F2 | 	cmps	local03, local07 wc
121a4     AC 01 90 3D |  if_ae	jmp	#LR__1468
121a8                 | '     get #channel,,block(0),amount,r
121a8     04 4E 05 F1 | 	add	fp, #4
121ac     A7 12 02 FB | 	rdlong	arg01, fp
121b0     4E 00 00 FF 
121b4     B4 E4 05 F1 | 	add	objptr, ##40116
121b8     F2 16 02 F6 | 	mov	arg03, objptr
121bc     4E 00 00 FF 
121c0     B4 E4 85 F1 | 	sub	objptr, ##40116
121c4     04 4E 05 F1 | 	add	fp, #4
121c8     A7 18 02 FB | 	rdlong	arg04, fp
121cc     08 4E 85 F1 | 	sub	fp, #8
121d0     00 14 06 F6 | 	mov	arg02, #0
121d4     01 1A 06 F6 | 	mov	arg05, #1
121d8     AC 4B B1 FD | 	call	#__system___basic_get
121dc     18 4E 05 F1 | 	add	fp, #24
121e0     A7 FA 61 FC | 	wrlong	result1, fp
121e4                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
121e4     0C 4E 85 F1 | 	sub	fp, #12
121e8     A7 28 02 FB | 	rdlong	local02, fp
121ec     0C 4E 85 F1 | 	sub	fp, #12
121f0     00 04 00 FF 
121f4     00 28 56 F2 | 	cmps	local02, ##524288 wc
121f8     7C 00 90 3D |  if_ae	jmp	#LR__1464
121fc     14 4E 05 F1 | 	add	fp, #20
12200     A7 00 68 FC | 	wrlong	#0, fp
12204     04 4E 05 F1 | 	add	fp, #4
12208     A7 34 02 FB | 	rdlong	local08, fp
1220c     18 4E 85 F1 | 	sub	fp, #24
12210                 | LR__1463
12210     14 4E 05 F1 | 	add	fp, #20
12214     A7 28 02 FB | 	rdlong	local02, fp
12218     14 4E 85 F1 | 	sub	fp, #20
1221c     1A 29 52 F2 | 	cmps	local02, local08 wc
12220     D8 00 90 3D |  if_ae	jmp	#LR__1467
12224     0C 4E 05 F1 | 	add	fp, #12
12228     A7 12 02 FB | 	rdlong	arg01, fp
1222c     04 4E 05 F1 | 	add	fp, #4
12230     A7 30 02 FB | 	rdlong	local06, fp
12234     0A 30 66 F0 | 	shl	local06, #10
12238     18 13 02 F1 | 	add	arg01, local06
1223c     04 4E 05 F1 | 	add	fp, #4
12240     A7 30 02 FB | 	rdlong	local06, fp
12244     18 13 02 F1 | 	add	arg01, local06
12248     4E 00 00 FF 
1224c     B4 E4 05 F1 | 	add	objptr, ##40116
12250     F2 30 02 F1 | 	add	local06, objptr
12254     18 15 C2 FA | 	rdbyte	arg02, local06
12258     09 15 42 FC | 	wrbyte	arg02, arg01
1225c     4E 00 00 FF 
12260     B4 E4 85 F1 | 	sub	objptr, ##40116
12264     A7 30 02 FB | 	rdlong	local06, fp
12268     01 30 06 F1 | 	add	local06, #1
1226c     A7 30 62 FC | 	wrlong	local06, fp
12270     14 4E 85 F1 | 	sub	fp, #20
12274     98 FF 9F FD | 	jmp	#LR__1463
12278                 | LR__1464
12278     14 4E 05 F1 | 	add	fp, #20
1227c     A7 00 68 FC | 	wrlong	#0, fp
12280     04 4E 05 F1 | 	add	fp, #4
12284     A7 36 02 FB | 	rdlong	local09, fp
12288     18 4E 85 F1 | 	sub	fp, #24
1228c                 | LR__1465
1228c     14 4E 05 F1 | 	add	fp, #20
12290     A7 28 02 FB | 	rdlong	local02, fp
12294     14 4E 85 F1 | 	sub	fp, #20
12298     1B 29 52 F2 | 	cmps	local02, local09 wc
1229c     5C 00 90 3D |  if_ae	jmp	#LR__1466
122a0     0C 4E 05 F1 | 	add	fp, #12
122a4     A7 12 02 FB | 	rdlong	arg01, fp
122a8     04 4E 05 F1 | 	add	fp, #4
122ac     A7 34 02 FB | 	rdlong	local08, fp
122b0     0A 34 66 F0 | 	shl	local08, #10
122b4     1A 13 02 F1 | 	add	arg01, local08
122b8     04 4E 05 F1 | 	add	fp, #4
122bc     A7 34 02 FB | 	rdlong	local08, fp
122c0     1A 13 02 F1 | 	add	arg01, local08
122c4     14 4E 85 F1 | 	sub	fp, #20
122c8     4E 00 00 FF 
122cc     B4 E4 05 F1 | 	add	objptr, ##40116
122d0     F2 34 02 F1 | 	add	local08, objptr
122d4     1A 15 C2 FA | 	rdbyte	arg02, local08
122d8     4E 00 00 FF 
122dc     B4 E4 85 F1 | 	sub	objptr, ##40116
122e0     78 04 B1 FD | 	call	#_pspoke
122e4     14 4E 05 F1 | 	add	fp, #20
122e8     A7 34 02 FB | 	rdlong	local08, fp
122ec     01 34 06 F1 | 	add	local08, #1
122f0     A7 34 62 FC | 	wrlong	local08, fp
122f4     14 4E 85 F1 | 	sub	fp, #20
122f8     90 FF 9F FD | 	jmp	#LR__1465
122fc                 | LR__1466
122fc                 | LR__1467
122fc     14 4E 05 F1 | 	add	fp, #20
12300     A7 36 02 FB | 	rdlong	local09, fp
12304     1B 31 02 F6 | 	mov	local06, local09
12308     02 30 66 F0 | 	shl	local06, #2
1230c     50 00 00 FF 
12310     C4 E4 05 F1 | 	add	objptr, ##41156
12314     F2 30 02 F1 | 	add	local06, objptr
12318     02 36 66 F0 | 	shl	local09, #2
1231c     F2 36 02 F1 | 	add	local09, objptr
12320     1B 37 02 FB | 	rdlong	local09, local09
12324     04 4E 05 F1 | 	add	fp, #4
12328     A7 34 02 FB | 	rdlong	local08, fp
1232c     1A 37 02 F1 | 	add	local09, local08
12330     18 37 62 FC | 	wrlong	local09, local06
12334     08 4E 85 F1 | 	sub	fp, #8
12338     A7 36 02 FB | 	rdlong	local09, fp
1233c     01 36 06 F1 | 	add	local09, #1
12340     A7 36 62 FC | 	wrlong	local09, fp
12344     10 4E 85 F1 | 	sub	fp, #16
12348     50 00 00 FF 
1234c     C4 E4 85 F1 | 	sub	objptr, ##41156
12350     40 FE 9F FD | 	jmp	#LR__1462
12354                 | LR__1468
12354                 | LR__1469
12354     A7 F0 03 F6 | 	mov	ptra, fp
12358     B2 00 A0 FD | 	call	#popregs_
1235c                 | _do_get_ret
1235c     2D 00 64 FD | 	ret
12360                 | 
12360                 | ' 
12360                 | ' '-------------------- getenvsustain
12360                 | ' 
12360                 | ' sub do_getenvsustain
12360                 | _do_getenvsustain
12360     01 4A 05 F6 | 	mov	COUNT_, #1
12364     A8 00 A0 FD | 	call	#pushregs_
12368     10 F0 07 F1 | 	add	ptra, #16
1236c     4A 00 00 FF 
12370     80 E4 05 F1 | 	add	objptr, ##38016
12374     F2 26 02 FB | 	rdlong	local01, objptr
12378     13 17 02 F6 | 	mov	arg03, local01
1237c     01 16 66 F0 | 	shl	arg03, #1
12380     13 17 02 F1 | 	add	arg03, local01
12384     02 16 66 F0 | 	shl	arg03, #2
12388     03 00 00 FF 
1238c     04 E4 85 F1 | 	sub	objptr, ##1540
12390     F2 16 02 F1 | 	add	arg03, objptr
12394     0B 17 02 FB | 	rdlong	arg03, arg03
12398     0C 4E 05 F1 | 	add	fp, #12
1239c     A7 16 62 FC | 	wrlong	arg03, fp
123a0                 | ' 
123a0                 | ' numpar=compiledline(lineptr_e).result.uresult
123a0                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
123a0     0C 4E 85 F1 | 	sub	fp, #12
123a4     02 16 16 F2 | 	cmp	arg03, #2 wc
123a8     47 00 00 FF 
123ac     7C E4 85 F1 | 	sub	objptr, ##36476
123b0     0C 4E 05 C1 |  if_b	add	fp, #12
123b4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
123b8     0C 4E 85 C1 |  if_b	sub	fp, #12
123bc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1470
123c0     00 12 06 F6 | 	mov	arg01, #0
123c4     78 98 B1 FD | 	call	#__system___getiolock_0602
123c8     FD 12 02 F6 | 	mov	arg01, result1
123cc     48 3B B1 FD | 	call	#__system___lockmem
123d0     B1 01 00 FF 
123d4     81 15 06 F6 | 	mov	arg02, ##@LR__5863
123d8     00 12 06 F6 | 	mov	arg01, #0
123dc     00 16 06 F6 | 	mov	arg03, #0
123e0     28 48 B1 FD | 	call	#__system___basic_print_string
123e4     00 12 06 F6 | 	mov	arg01, #0
123e8     54 98 B1 FD | 	call	#__system___getiolock_0602
123ec     FD 00 68 FC | 	wrlong	#0, result1
123f0     27 12 06 F6 | 	mov	arg01, #39
123f4     00 14 06 F6 | 	mov	arg02, #0
123f8     30 01 B1 FD | 	call	#_printerror
123fc     64 00 90 FD | 	jmp	#LR__1471
12400                 | LR__1470
12400     DC AE BF FD | 	call	#_pop
12404     FD 26 02 F6 | 	mov	local01, result1
12408     FE 16 02 F6 | 	mov	arg03, result2
1240c     A7 26 62 FC | 	wrlong	local01, fp
12410     04 4E 05 F1 | 	add	fp, #4
12414     A7 16 62 FC | 	wrlong	arg03, fp
12418     04 4E 05 F1 | 	add	fp, #4
1241c     A7 FE 61 FC | 	wrlong	result3, fp
12420     08 4E 85 F1 | 	sub	fp, #8
12424     A7 12 02 F6 | 	mov	arg01, fp
12428     98 B0 BF FD | 	call	#_converttoint
1242c     FD 26 02 F6 | 	mov	local01, result1
12430     01 26 66 F0 | 	shl	local01, #1
12434     52 00 00 FF 
12438     B4 E4 05 F1 | 	add	objptr, ##42164
1243c     F2 26 02 F1 | 	add	local01, objptr
12440     13 27 E2 FA | 	rdword	local01, local01
12444     A7 26 62 FC | 	wrlong	local01, fp
12448     08 4E 05 F1 | 	add	fp, #8
1244c     A7 38 68 FC | 	wrlong	#28, fp
12450     08 4E 85 F1 | 	sub	fp, #8
12454     A7 12 02 F6 | 	mov	arg01, fp
12458     52 00 00 FF 
1245c     B4 E4 85 F1 | 	sub	objptr, ##42164
12460     14 AF BF FD | 	call	#_push
12464                 | LR__1471
12464     A7 F0 03 F6 | 	mov	ptra, fp
12468     B2 00 A0 FD | 	call	#popregs_
1246c                 | _do_getenvsustain_ret
1246c     2D 00 64 FD | 	ret
12470                 | 
12470                 | ' 
12470                 | ' '-------------------- getnotevalue
12470                 | ' 
12470                 | ' sub do_getnotevalue
12470                 | _do_getnotevalue
12470     01 4A 05 F6 | 	mov	COUNT_, #1
12474     A8 00 A0 FD | 	call	#pushregs_
12478     1C F0 07 F1 | 	add	ptra, #28
1247c     60 AE BF FD | 	call	#_pop
12480     FF 14 02 F6 | 	mov	arg02, result3
12484     10 4E 05 F1 | 	add	fp, #16
12488     A7 FA 61 FC | 	wrlong	result1, fp
1248c     04 4E 05 F1 | 	add	fp, #4
12490     A7 FC 61 FC | 	wrlong	result2, fp
12494     04 4E 05 F1 | 	add	fp, #4
12498     A7 14 62 FC | 	wrlong	arg02, fp
1249c     08 4E 85 F1 | 	sub	fp, #8
124a0     A7 12 02 F6 | 	mov	arg01, fp
124a4     10 4E 85 F1 | 	sub	fp, #16
124a8     18 B0 BF FD | 	call	#_converttoint
124ac     FD 14 52 F6 | 	abs	arg02, result1 wc
124b0     0C 14 16 FD | 	qdiv	arg02, #12
124b4     0C 4E 05 F1 | 	add	fp, #12
124b8     A7 FA 61 FC | 	wrlong	result1, fp
124bc     14 00 00 FF 
124c0     D8 E4 05 F1 | 	add	objptr, ##10456
124c4     08 4E 85 F1 | 	sub	fp, #8
124c8     19 14 62 FD | 	getqy	arg02
124cc     0A 15 82 F6 | 	negc	arg02, arg02
124d0     02 14 66 F0 | 	shl	arg02, #2
124d4     F2 14 02 F1 | 	add	arg02, objptr
124d8     0A 15 02 FB | 	rdlong	arg02, arg02
124dc     A7 14 62 FC | 	wrlong	arg02, fp
124e0     08 4E 05 F1 | 	add	fp, #8
124e4     A7 14 02 FB | 	rdlong	arg02, fp
124e8     0A 15 52 F6 | 	abs	arg02, arg02 wc
124ec     0C 14 16 FD | 	qdiv	arg02, #12
124f0     0C 4E 85 F1 | 	sub	fp, #12
124f4     14 00 00 FF 
124f8     D8 E4 85 F1 | 	sub	objptr, ##10456
124fc     18 14 62 FD | 	getqx	arg02
12500     0A 13 82 F6 | 	negc	arg01, arg02
12504     09 13 52 F6 | 	abs	arg01, arg01 wc
12508     1F 26 C6 C9 |  if_b	decod	local01, #31
1250c     00 26 06 36 |  if_ae	mov	local01, #0
12510     78 64 B1 FD | 	call	#__system___float_fromuns
12514     13 FB 61 F5 | 	xor	result1, local01
12518     08 4E 05 F1 | 	add	fp, #8
1251c     A7 FA 61 FC | 	wrlong	result1, fp
12520     FD 14 02 F6 | 	mov	arg02, result1
12524     08 4E 85 F1 | 	sub	fp, #8
12528     1E 12 C6 F9 | 	decod	arg01, #30
1252c     68 77 B1 FD | 	call	#__system____builtin_powf
12530     FD 12 02 F6 | 	mov	arg01, result1
12534     04 4E 05 F1 | 	add	fp, #4
12538     A7 14 02 FB | 	rdlong	arg02, fp
1253c     04 4E 85 F1 | 	sub	fp, #4
12540     4C 68 B1 FD | 	call	#__system___float_mul
12544     A7 FA 61 FC | 	wrlong	result1, fp
12548     10 4E 05 F1 | 	add	fp, #16
1254c     A7 FA 61 FC | 	wrlong	result1, fp
12550     08 4E 05 F1 | 	add	fp, #8
12554     A7 3C 68 FC | 	wrlong	#30, fp
12558     08 4E 85 F1 | 	sub	fp, #8
1255c     A7 12 02 F6 | 	mov	arg01, fp
12560     10 4E 85 F1 | 	sub	fp, #16
12564     10 AE BF FD | 	call	#_push
12568     A7 F0 03 F6 | 	mov	ptra, fp
1256c     B2 00 A0 FD | 	call	#popregs_
12570                 | _do_getnotevalue_ret
12570     2D 00 64 FD | 	ret
12574                 | 
12574                 | ' 
12574                 | ' '-------------------- getpixel
12574                 | ' 
12574                 | ' sub do_getpixel
12574                 | _do_getpixel
12574     00 4A 05 F6 | 	mov	COUNT_, #0
12578     A8 00 A0 FD | 	call	#pushregs_
1257c     24 F0 07 F1 | 	add	ptra, #36
12580     4A 00 00 FF 
12584     80 E4 05 F1 | 	add	objptr, ##38016
12588     F2 16 02 FB | 	rdlong	arg03, objptr
1258c     0B 15 02 F6 | 	mov	arg02, arg03
12590     01 14 66 F0 | 	shl	arg02, #1
12594     0B 15 02 F1 | 	add	arg02, arg03
12598     02 14 66 F0 | 	shl	arg02, #2
1259c     03 00 00 FF 
125a0     04 E4 85 F1 | 	sub	objptr, ##1540
125a4     F2 14 02 F1 | 	add	arg02, objptr
125a8     0A 17 02 FB | 	rdlong	arg03, arg02
125ac     18 4E 05 F1 | 	add	fp, #24
125b0     A7 16 62 FC | 	wrlong	arg03, fp
125b4                 | ' 
125b4                 | ' numpar=compiledline(lineptr_e).result.uresult
125b4                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
125b4     18 4E 85 F1 | 	sub	fp, #24
125b8     02 16 0E F2 | 	cmp	arg03, #2 wz
125bc     47 00 00 FF 
125c0     7C E4 85 F1 | 	sub	objptr, ##36476
125c4     40 00 90 AD |  if_e	jmp	#LR__1480
125c8     00 12 06 F6 | 	mov	arg01, #0
125cc     70 96 B1 FD | 	call	#__system___getiolock_0602
125d0     FD 12 02 F6 | 	mov	arg01, result1
125d4     40 39 B1 FD | 	call	#__system___lockmem
125d8     B1 01 00 FF 
125dc     91 15 06 F6 | 	mov	arg02, ##@LR__5864
125e0     00 12 06 F6 | 	mov	arg01, #0
125e4     00 16 06 F6 | 	mov	arg03, #0
125e8     20 46 B1 FD | 	call	#__system___basic_print_string
125ec     00 12 06 F6 | 	mov	arg01, #0
125f0     4C 96 B1 FD | 	call	#__system___getiolock_0602
125f4     FD 00 68 FC | 	wrlong	#0, result1
125f8     27 12 06 F6 | 	mov	arg01, #39
125fc     00 14 06 F6 | 	mov	arg02, #0
12600     28 FF B0 FD | 	call	#_printerror
12604     B4 00 90 FD | 	jmp	#LR__1481
12608                 | LR__1480
12608     D4 AC BF FD | 	call	#_pop
1260c     FD 16 02 F6 | 	mov	arg03, result1
12610     FE 14 02 F6 | 	mov	arg02, result2
12614     FF 12 02 F6 | 	mov	arg01, result3
12618     0C 4E 05 F1 | 	add	fp, #12
1261c     A7 16 62 FC | 	wrlong	arg03, fp
12620     04 4E 05 F1 | 	add	fp, #4
12624     A7 14 62 FC | 	wrlong	arg02, fp
12628     04 4E 05 F1 | 	add	fp, #4
1262c     A7 12 62 FC | 	wrlong	arg01, fp
12630     14 4E 85 F1 | 	sub	fp, #20
12634     A8 AC BF FD | 	call	#_pop
12638     FF 16 02 F6 | 	mov	arg03, result3
1263c     A7 FA 61 FC | 	wrlong	result1, fp
12640     04 4E 05 F1 | 	add	fp, #4
12644     A7 FC 61 FC | 	wrlong	result2, fp
12648     04 4E 05 F1 | 	add	fp, #4
1264c     A7 16 62 FC | 	wrlong	arg03, fp
12650     08 4E 85 F1 | 	sub	fp, #8
12654     A7 12 02 F6 | 	mov	arg01, fp
12658     68 AE BF FD | 	call	#_converttoint
1265c     1C 4E 05 F1 | 	add	fp, #28
12660     A7 FA 61 FC | 	wrlong	result1, fp
12664     10 4E 85 F1 | 	sub	fp, #16
12668     A7 12 02 F6 | 	mov	arg01, fp
1266c     0C 4E 85 F1 | 	sub	fp, #12
12670     50 AE BF FD | 	call	#_converttoint
12674     FD 16 02 F6 | 	mov	arg03, result1
12678     20 4E 05 F1 | 	add	fp, #32
1267c     A7 16 62 FC | 	wrlong	arg03, fp
12680     F2 12 02 FB | 	rdlong	arg01, objptr
12684     04 4E 85 F1 | 	sub	fp, #4
12688     A7 FE 01 FB | 	rdlong	result3, fp
1268c     FF 12 02 F1 | 	add	arg01, result3
12690     1C 4E 85 F1 | 	sub	fp, #28
12694     0A 16 66 F0 | 	shl	arg03, #10
12698     0B 13 02 F1 | 	add	arg01, arg03
1269c     04 01 B1 FD | 	call	#_pspeek
126a0     FD FA E1 F8 | 	getbyte	result1, result1, #0
126a4     A7 FA 61 FC | 	wrlong	result1, fp
126a8     08 4E 05 F1 | 	add	fp, #8
126ac     A7 3A 68 FC | 	wrlong	#29, fp
126b0     08 4E 85 F1 | 	sub	fp, #8
126b4     A7 12 02 F6 | 	mov	arg01, fp
126b8     BC AC BF FD | 	call	#_push
126bc                 | LR__1481
126bc     A7 F0 03 F6 | 	mov	ptra, fp
126c0     B2 00 A0 FD | 	call	#popregs_
126c4                 | _do_getpixel_ret
126c4     2D 00 64 FD | 	ret
126c8                 | 
126c8                 | ' 
126c8                 | ' '-------------------- gettime
126c8                 | ' 
126c8                 | ' sub do_gettime
126c8                 | _do_gettime
126c8     02 4A 05 F6 | 	mov	COUNT_, #2
126cc     A8 00 A0 FD | 	call	#pushregs_
126d0     14 F0 07 F1 | 	add	ptra, #20
126d4                 | ' 
126d4                 | ' const asm 
126d4     1A 26 72 FD | 	getct	local01 wc
126d8     1A 28 62 FD | 	getct	local02
126dc                 | ' return hi1, lo1
126dc     14 FD 01 F6 | 	mov	result2, local02
126e0     A7 26 62 FC | 	wrlong	local01, fp
126e4     04 4E 05 F1 | 	add	fp, #4
126e8     A7 FC 61 FC | 	wrlong	result2, fp
126ec     0C 4E 05 F1 | 	add	fp, #12
126f0     A7 3A 68 FC | 	wrlong	#29, fp
126f4     0C 4E 85 F1 | 	sub	fp, #12
126f8     A7 12 02 FB | 	rdlong	arg01, fp
126fc     04 4E 05 F1 | 	add	fp, #4
12700     A7 12 62 FC | 	wrlong	arg01, fp
12704     08 4E 85 F1 | 	sub	fp, #8
12708     A7 12 02 FB | 	rdlong	arg01, fp
1270c     0C 4E 05 F1 | 	add	fp, #12
12710     A7 12 62 FC | 	wrlong	arg01, fp
12714     04 4E 85 F1 | 	sub	fp, #4
12718     A7 12 02 F6 | 	mov	arg01, fp
1271c     08 4E 85 F1 | 	sub	fp, #8
12720     54 AC BF FD | 	call	#_push
12724     A7 F0 03 F6 | 	mov	ptra, fp
12728     B2 00 A0 FD | 	call	#popregs_
1272c                 | _do_gettime_ret
1272c     2D 00 64 FD | 	ret
12730                 | 
12730                 | ' 
12730                 | ' '-------------------- gosub
12730                 | ' 
12730                 | ' sub do_gosub()
12730                 | _do_gosub
12730     50 00 00 FF 
12734     34 E5 05 F1 | 	add	objptr, ##41268
12738     F2 00 02 FB | 	rdlong	_var01, objptr
1273c     01 00 06 F1 | 	add	_var01, #1
12740     F2 00 62 FC | 	wrlong	_var01, objptr
12744                 | ' gosubtop+=1
12744                 | ' if compiledline(lineptr_e+1).result_type=token_end then
12744     06 00 00 FF 
12748     B4 E4 85 F1 | 	sub	objptr, ##3252
1274c     F2 00 02 FB | 	rdlong	_var01, objptr
12750     01 00 06 F1 | 	add	_var01, #1
12754     00 03 02 F6 | 	mov	_var02, _var01
12758     01 02 66 F0 | 	shl	_var02, #1
1275c     00 03 02 F1 | 	add	_var02, _var01
12760     02 02 66 F0 | 	shl	_var02, #2
12764     03 00 00 FF 
12768     04 E4 85 F1 | 	sub	objptr, ##1540
1276c     F2 02 02 F1 | 	add	_var02, objptr
12770     08 02 06 F1 | 	add	_var02, #8
12774     01 03 02 FB | 	rdlong	_var02, _var02
12778     FE 03 0E F2 | 	cmp	_var02, #510 wz
1277c     47 00 00 FF 
12780     7C E4 85 F1 | 	sub	objptr, ##36476
12784     58 00 90 5D |  if_ne	jmp	#LR__1490
12788     50 00 00 FF 
1278c     34 E5 05 F1 | 	add	objptr, ##41268
12790     F2 02 02 FB | 	rdlong	_var02, objptr
12794     03 02 66 F0 | 	shl	_var02, #3
12798     03 00 00 FF 
1279c     88 E5 85 F1 | 	sub	objptr, ##1928
127a0     F2 02 02 F1 | 	add	_var02, objptr
127a4     03 00 00 FF 
127a8     0C E5 05 F1 | 	add	objptr, ##1804
127ac     F2 00 02 FB | 	rdlong	_var01, objptr
127b0     01 01 62 FC | 	wrlong	_var01, _var02
127b4     7C E4 05 F1 | 	add	objptr, #124
127b8     F2 02 02 FB | 	rdlong	_var02, objptr
127bc     03 02 66 F0 | 	shl	_var02, #3
127c0     03 00 00 FF 
127c4     88 E5 85 F1 | 	sub	objptr, ##1928
127c8     F2 02 02 F1 | 	add	_var02, objptr
127cc     04 02 06 F1 | 	add	_var02, #4
127d0     01 01 68 FC | 	wrlong	#0, _var02
127d4     4C 00 00 FF 
127d8     AC E5 85 F1 | 	sub	objptr, ##39340
127dc     64 00 90 FD | 	jmp	#LR__1491
127e0                 | LR__1490
127e0     50 00 00 FF 
127e4     34 E5 05 F1 | 	add	objptr, ##41268
127e8     F2 02 02 FB | 	rdlong	_var02, objptr
127ec     03 02 66 F0 | 	shl	_var02, #3
127f0     03 00 00 FF 
127f4     88 E5 85 F1 | 	sub	objptr, ##1928
127f8     F2 02 02 F1 | 	add	_var02, objptr
127fc     03 00 00 FF 
12800     14 E5 05 F1 | 	add	objptr, ##1812
12804     F2 00 02 FB | 	rdlong	_var01, objptr
12808     01 01 62 FC | 	wrlong	_var01, _var02
1280c     74 E4 05 F1 | 	add	objptr, #116
12810     F2 02 02 FB | 	rdlong	_var02, objptr
12814     03 02 66 F0 | 	shl	_var02, #3
12818     03 00 00 FF 
1281c     88 E5 85 F1 | 	sub	objptr, ##1928
12820     F2 02 02 F1 | 	add	_var02, objptr
12824     02 00 00 FF 
12828     2C E5 85 F1 | 	sub	objptr, ##1324
1282c     F2 00 02 FB | 	rdlong	_var01, objptr
12830     4A 00 00 FF 
12834     80 E4 85 F1 | 	sub	objptr, ##38016
12838     02 00 06 F1 | 	add	_var01, #2
1283c     04 02 06 F1 | 	add	_var02, #4
12840     01 01 62 FC | 	wrlong	_var01, _var02
12844                 | LR__1491
12844                 | _do_gosub_ret
12844     2D 00 64 FD | 	ret
12848                 | 
12848                 | ' 
12848                 | ' '--------------------- goto
12848                 | ' 
12848                 | ' '------- fast goto
12848                 | ' 
12848                 | ' sub do_fast_goto
12848                 | _do_fast_goto
12848     02 4A 05 F6 | 	mov	COUNT_, #2
1284c     A8 00 A0 FD | 	call	#pushregs_
12850                 | _do_fast_goto_enter
12850     4A 00 00 FF 
12854     80 E4 05 F1 | 	add	objptr, ##38016
12858     F2 12 02 FB | 	rdlong	arg01, objptr
1285c     09 27 02 F6 | 	mov	local01, arg01
12860     01 26 66 F0 | 	shl	local01, #1
12864     09 27 02 F1 | 	add	local01, arg01
12868     02 26 66 F0 | 	shl	local01, #2
1286c     03 00 00 FF 
12870     04 E4 85 F1 | 	sub	objptr, ##1540
12874     F2 26 02 F1 | 	add	local01, objptr
12878     13 29 02 FB | 	rdlong	local02, local01
1287c     14 13 02 F6 | 	mov	arg01, local02
12880     47 00 00 FF 
12884     7C E4 85 F1 | 	sub	objptr, ##36476
12888     70 FF B0 FD | 	call	#_pslpeek
1288c     FD 12 02 F6 | 	mov	arg01, result1
12890                 | ' 
12890                 | ' testptr=compiledline(lineptr_e).result.uresult
12890                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
12890                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
12890     4A 00 00 FF 
12894     80 E4 05 F1 | 	add	objptr, ##38016
12898     F2 FA 01 FB | 	rdlong	result1, objptr
1289c     FD 26 02 F6 | 	mov	local01, result1
128a0     01 26 66 F0 | 	shl	local01, #1
128a4     FD 26 02 F1 | 	add	local01, result1
128a8     02 26 66 F0 | 	shl	local01, #2
128ac     03 00 00 FF 
128b0     04 E4 85 F1 | 	sub	objptr, ##1540
128b4     F2 26 02 F1 | 	add	local01, objptr
128b8     04 26 06 F1 | 	add	local01, #4
128bc     13 27 02 FB | 	rdlong	local01, local01
128c0     13 13 0A F2 | 	cmp	arg01, local01 wz
128c4     47 00 00 FF 
128c8     7C E4 85 F1 | 	sub	objptr, ##36476
128cc     58 00 90 5D |  if_ne	jmp	#LR__1500
128d0     50 00 00 FF 
128d4     B8 E4 05 F1 | 	add	objptr, ##41144
128d8     F2 28 62 FC | 	wrlong	local02, objptr
128dc     06 00 00 FF 
128e0     3C E4 85 F1 | 	sub	objptr, ##3132
128e4     F2 28 02 FB | 	rdlong	local02, objptr
128e8     01 28 86 F1 | 	sub	local02, #1
128ec     04 E4 05 F1 | 	add	objptr, #4
128f0     F2 28 62 FC | 	wrlong	local02, objptr
128f4                 | '   runptr=testptr
128f4                 | '   lineptr_e=lineptr-1
128f4                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
128f4     06 00 00 FF 
128f8     84 E4 05 F1 | 	add	objptr, ##3204
128fc     F2 28 02 FB | 	rdlong	local02, objptr
12900     50 00 00 FF 
12904     04 E5 85 F1 | 	sub	objptr, ##41220
12908     FF FF 3F FF 
1290c     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12910     50 00 00 AF 
12914     04 E5 05 A1 |  if_e	add	objptr, ##41220
12918     F2 00 68 AC |  if_e	wrlong	#0, objptr
1291c     50 00 00 AF 
12920     04 E5 85 A1 |  if_e	sub	objptr, ##41220
12924     04 00 90 FD | 	jmp	#LR__1501
12928                 | LR__1500
12928     0C 00 B0 FD | 	call	#_do_find_goto
1292c                 | LR__1501
1292c     A7 F0 03 F6 | 	mov	ptra, fp
12930     B2 00 A0 FD | 	call	#popregs_
12934                 | _do_fast_goto_ret
12934     2D 00 64 FD | 	ret
12938                 | 
12938                 | ' 
12938                 | ' '------- find goto  
12938                 | ' 
12938                 | ' sub do_find_goto
12938                 | _do_find_goto
12938     03 4A 05 F6 | 	mov	COUNT_, #3
1293c     A8 00 A0 FD | 	call	#pushregs_
12940     24 F0 07 F1 | 	add	ptra, #36
12944                 | _do_find_goto_enter
12944     4A 00 00 FF 
12948     80 E4 05 F1 | 	add	objptr, ##38016
1294c     F2 26 02 FB | 	rdlong	local01, objptr
12950     13 29 02 F6 | 	mov	local02, local01
12954     01 28 66 F0 | 	shl	local02, #1
12958     13 29 02 F1 | 	add	local02, local01
1295c     02 28 66 F0 | 	shl	local02, #2
12960     03 00 00 FF 
12964     04 E4 85 F1 | 	sub	objptr, ##1540
12968     F2 28 02 F1 | 	add	local02, objptr
1296c     04 28 06 F1 | 	add	local02, #4
12970     14 29 02 FB | 	rdlong	local02, local02
12974     A7 28 62 FC | 	wrlong	local02, fp
12978     03 00 00 FF 
1297c     0C E4 05 F1 | 	add	objptr, ##1548
12980     F2 2A 02 FB | 	rdlong	local03, objptr
12984     4A 00 00 FF 
12988     88 E4 85 F1 | 	sub	objptr, ##38024
1298c     04 4E 05 F1 | 	add	fp, #4
12990     A7 2A 62 FC | 	wrlong	local03, fp
12994     04 4E 85 F1 | 	sub	fp, #4
12998                 | ' 
12998                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
12998                 | ' gotoptr=programstart
12998                 | ' do
12998                 | LR__1510
12998     0C 4E 05 F1 | 	add	fp, #12
1299c     A7 12 02 F6 | 	mov	arg01, fp
129a0     08 4E 85 F1 | 	sub	fp, #8
129a4     A7 14 02 FB | 	rdlong	arg02, fp
129a8     04 4E 85 F1 | 	sub	fp, #4
129ac     18 16 06 F6 | 	mov	arg03, #24
129b0     0B 00 00 FF 
129b4     CC E4 05 F1 | 	add	objptr, ##5836
129b8     D4 28 B1 FD | 	call	#_psram_spin2_read1
129bc     0B 00 00 FF 
129c0     CC E4 85 F1 | 	sub	objptr, ##5836
129c4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
129c4                 | '   if gotoheader(0)<>$FFFFFFFF then
129c4     0C 4E 05 F1 | 	add	fp, #12
129c8     A7 2A 02 FB | 	rdlong	local03, fp
129cc     0C 4E 85 F1 | 	sub	fp, #12
129d0     FF FF 7F FF 
129d4     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
129d8     24 00 90 AD |  if_e	jmp	#LR__1511
129dc     04 4E 05 F1 | 	add	fp, #4
129e0     A7 2A 02 FB | 	rdlong	local03, fp
129e4     04 4E 05 F1 | 	add	fp, #4
129e8     A7 2A 62 FC | 	wrlong	local03, fp
129ec     18 4E 05 F1 | 	add	fp, #24
129f0     A7 2A 02 FB | 	rdlong	local03, fp
129f4     1C 4E 85 F1 | 	sub	fp, #28
129f8     A7 2A 62 FC | 	wrlong	local03, fp
129fc     04 4E 85 F1 | 	sub	fp, #4
12a00                 | LR__1511
12a00     20 4E 05 F1 | 	add	fp, #32
12a04     A7 2A 02 FB | 	rdlong	local03, fp
12a08     20 4E 85 F1 | 	sub	fp, #32
12a0c     FF FF 3F FF 
12a10     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
12a14     0C 4E 05 51 |  if_ne	add	fp, #12
12a18     A7 26 02 5B |  if_ne	rdlong	local01, fp
12a1c     0C 4E 85 51 |  if_ne	sub	fp, #12
12a20     FF FF 7F 5F 
12a24     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
12a28     18 00 90 AD |  if_e	jmp	#LR__1512
12a2c     0C 4E 05 F1 | 	add	fp, #12
12a30     A7 2A 02 FB | 	rdlong	local03, fp
12a34     0C 4E 85 F1 | 	sub	fp, #12
12a38     A7 28 02 FB | 	rdlong	local02, fp
12a3c     14 2B 0A F2 | 	cmp	local03, local02 wz
12a40     54 FF 9F 5D |  if_ne	jmp	#LR__1510
12a44                 | LR__1512
12a44                 | ' 
12a44                 | ' if gotoheader(0)=gotoline then
12a44     0C 4E 05 F1 | 	add	fp, #12
12a48     A7 2A 02 FB | 	rdlong	local03, fp
12a4c     0C 4E 85 F1 | 	sub	fp, #12
12a50     A7 26 02 FB | 	rdlong	local01, fp
12a54     13 2B 0A F2 | 	cmp	local03, local01 wz
12a58     D8 00 90 5D |  if_ne	jmp	#LR__1513
12a5c     4A 00 00 FF 
12a60     80 E4 05 F1 | 	add	objptr, ##38016
12a64     F2 26 02 FB | 	rdlong	local01, objptr
12a68     13 29 02 F6 | 	mov	local02, local01
12a6c     01 28 66 F0 | 	shl	local02, #1
12a70     13 29 02 F1 | 	add	local02, local01
12a74     02 28 66 F0 | 	shl	local02, #2
12a78     03 00 00 FF 
12a7c     04 E4 85 F1 | 	sub	objptr, ##1540
12a80     F2 28 02 F1 | 	add	local02, objptr
12a84     08 4E 05 F1 | 	add	fp, #8
12a88     A7 2A 02 FB | 	rdlong	local03, fp
12a8c     14 2B 62 FC | 	wrlong	local03, local02
12a90     03 00 00 FF 
12a94     04 E4 05 F1 | 	add	objptr, ##1540
12a98     F2 26 02 FB | 	rdlong	local01, objptr
12a9c     13 29 02 F6 | 	mov	local02, local01
12aa0     01 28 66 F0 | 	shl	local02, #1
12aa4     13 29 02 F1 | 	add	local02, local01
12aa8     02 28 66 F0 | 	shl	local02, #2
12aac     03 00 00 FF 
12ab0     04 E4 85 F1 | 	sub	objptr, ##1540
12ab4     F2 28 02 F1 | 	add	local02, objptr
12ab8     08 28 06 F1 | 	add	local02, #8
12abc     14 9D 68 FC | 	wrlong	#78, local02
12ac0     03 00 00 FF 
12ac4     04 E4 05 F1 | 	add	objptr, ##1540
12ac8     F2 28 02 FB | 	rdlong	local02, objptr
12acc     14 13 02 F6 | 	mov	arg01, local02
12ad0     01 12 66 F0 | 	shl	arg01, #1
12ad4     14 13 02 F1 | 	add	arg01, local02
12ad8     02 12 66 F0 | 	shl	arg01, #2
12adc     03 00 00 FF 
12ae0     04 E4 85 F1 | 	sub	objptr, ##1540
12ae4     F2 12 02 F1 | 	add	arg01, objptr
12ae8     09 00 00 FF 
12aec     44 E4 05 F1 | 	add	objptr, ##4676
12af0     F2 14 02 FB | 	rdlong	arg02, objptr
12af4     02 2A 06 F6 | 	mov	local03, #2
12af8     14 2B 02 F1 | 	add	local03, local02
12afc     0B 00 00 FF 
12b00     5C E4 85 F1 | 	sub	objptr, ##5724
12b04     F2 16 02 FB | 	rdlong	arg03, objptr
12b08     0B 2B 02 FD | 	qmul	local03, arg03
12b0c     08 4E 85 F1 | 	sub	fp, #8
12b10     39 00 00 FF 
12b14     98 E5 85 F1 | 	sub	objptr, ##29592
12b18     18 2A 62 FD | 	getqx	local03
12b1c     15 15 02 F1 | 	add	arg02, local03
12b20     08 28 B1 FD | 	call	#_psram_spin2_write
12b24     0B 00 00 FF 
12b28     CC E4 85 F1 | 	sub	objptr, ##5836
12b2c     18 FD BF FD | 	call	#_do_fast_goto
12b30     0C 00 90 FD | 	jmp	#LR__1514
12b34                 | LR__1513
12b34     26 12 06 F6 | 	mov	arg01, #38
12b38     00 14 06 F6 | 	mov	arg02, #0
12b3c     EC F9 B0 FD | 	call	#_printerror
12b40                 | LR__1514
12b40     A7 F0 03 F6 | 	mov	ptra, fp
12b44     B2 00 A0 FD | 	call	#popregs_
12b48                 | _do_find_goto_ret
12b48     2D 00 64 FD | 	ret
12b4c                 | 
12b4c                 | ' 
12b4c                 | ' '------- slow goto  
12b4c                 | ' 
12b4c                 | ' sub do_slow_goto
12b4c                 | _do_slow_goto
12b4c     02 4A 05 F6 | 	mov	COUNT_, #2
12b50     A8 00 A0 FD | 	call	#pushregs_
12b54     30 F0 07 F1 | 	add	ptra, #48
12b58     84 A7 BF FD | 	call	#_pop
12b5c     FF 26 02 F6 | 	mov	local01, result3
12b60     24 4E 05 F1 | 	add	fp, #36
12b64     A7 FA 61 FC | 	wrlong	result1, fp
12b68     04 4E 05 F1 | 	add	fp, #4
12b6c     A7 FC 61 FC | 	wrlong	result2, fp
12b70     04 4E 05 F1 | 	add	fp, #4
12b74     A7 26 62 FC | 	wrlong	local01, fp
12b78     08 4E 85 F1 | 	sub	fp, #8
12b7c     A7 12 02 F6 | 	mov	arg01, fp
12b80     24 4E 85 F1 | 	sub	fp, #36
12b84     3C A9 BF FD | 	call	#_converttoint
12b88     A7 FA 61 FC | 	wrlong	result1, fp
12b8c     4A 00 00 FF 
12b90     88 E4 05 F1 | 	add	objptr, ##38024
12b94     F2 28 02 FB | 	rdlong	local02, objptr
12b98     4A 00 00 FF 
12b9c     88 E4 85 F1 | 	sub	objptr, ##38024
12ba0     04 4E 05 F1 | 	add	fp, #4
12ba4     A7 28 62 FC | 	wrlong	local02, fp
12ba8     04 4E 85 F1 | 	sub	fp, #4
12bac                 | ' 
12bac                 | ' t1=pop() : gotoline=converttoint(t1)
12bac                 | ' gotoptr=programstart
12bac                 | ' do
12bac                 | LR__1520
12bac     0C 4E 05 F1 | 	add	fp, #12
12bb0     A7 12 02 F6 | 	mov	arg01, fp
12bb4     08 4E 85 F1 | 	sub	fp, #8
12bb8     A7 14 02 FB | 	rdlong	arg02, fp
12bbc     04 4E 85 F1 | 	sub	fp, #4
12bc0     18 16 06 F6 | 	mov	arg03, #24
12bc4     0B 00 00 FF 
12bc8     CC E4 05 F1 | 	add	objptr, ##5836
12bcc     C0 26 B1 FD | 	call	#_psram_spin2_read1
12bd0     0B 00 00 FF 
12bd4     CC E4 85 F1 | 	sub	objptr, ##5836
12bd8                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12bd8                 | '   if gotoheader(0)<>$FFFFFFFF then
12bd8     0C 4E 05 F1 | 	add	fp, #12
12bdc     A7 28 02 FB | 	rdlong	local02, fp
12be0     0C 4E 85 F1 | 	sub	fp, #12
12be4     FF FF 7F FF 
12be8     FF 29 0E F2 | 	cmp	local02, ##-1 wz
12bec     24 00 90 AD |  if_e	jmp	#LR__1521
12bf0     04 4E 05 F1 | 	add	fp, #4
12bf4     A7 28 02 FB | 	rdlong	local02, fp
12bf8     04 4E 05 F1 | 	add	fp, #4
12bfc     A7 28 62 FC | 	wrlong	local02, fp
12c00     18 4E 05 F1 | 	add	fp, #24
12c04     A7 28 02 FB | 	rdlong	local02, fp
12c08     1C 4E 85 F1 | 	sub	fp, #28
12c0c     A7 28 62 FC | 	wrlong	local02, fp
12c10     04 4E 85 F1 | 	sub	fp, #4
12c14                 | LR__1521
12c14     20 4E 05 F1 | 	add	fp, #32
12c18     A7 28 02 FB | 	rdlong	local02, fp
12c1c     20 4E 85 F1 | 	sub	fp, #32
12c20     FF FF 3F FF 
12c24     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12c28     0C 4E 05 51 |  if_ne	add	fp, #12
12c2c     A7 26 02 5B |  if_ne	rdlong	local01, fp
12c30     0C 4E 85 51 |  if_ne	sub	fp, #12
12c34     FF FF 7F 5F 
12c38     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
12c3c     18 00 90 AD |  if_e	jmp	#LR__1522
12c40     0C 4E 05 F1 | 	add	fp, #12
12c44     A7 28 02 FB | 	rdlong	local02, fp
12c48     0C 4E 85 F1 | 	sub	fp, #12
12c4c     A7 16 02 FB | 	rdlong	arg03, fp
12c50     0B 29 0A F2 | 	cmp	local02, arg03 wz
12c54     54 FF 9F 5D |  if_ne	jmp	#LR__1520
12c58                 | LR__1522
12c58                 | ' if gotoheader(0)=gotoline then  
12c58     0C 4E 05 F1 | 	add	fp, #12
12c5c     A7 28 02 FB | 	rdlong	local02, fp
12c60     0C 4E 85 F1 | 	sub	fp, #12
12c64     A7 26 02 FB | 	rdlong	local01, fp
12c68     13 29 0A F2 | 	cmp	local02, local01 wz
12c6c     60 00 90 5D |  if_ne	jmp	#LR__1523
12c70     08 4E 05 F1 | 	add	fp, #8
12c74     A7 28 02 FB | 	rdlong	local02, fp
12c78     08 4E 85 F1 | 	sub	fp, #8
12c7c     50 00 00 FF 
12c80     B8 E4 05 F1 | 	add	objptr, ##41144
12c84     F2 28 62 FC | 	wrlong	local02, objptr
12c88     06 00 00 FF 
12c8c     3C E4 85 F1 | 	sub	objptr, ##3132
12c90     F2 28 02 FB | 	rdlong	local02, objptr
12c94     01 28 86 F1 | 	sub	local02, #1
12c98     04 E4 05 F1 | 	add	objptr, #4
12c9c     F2 28 62 FC | 	wrlong	local02, objptr
12ca0                 | '    runptr=oldgotoptr
12ca0                 | '    lineptr_e=lineptr-1
12ca0                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
12ca0     06 00 00 FF 
12ca4     84 E4 05 F1 | 	add	objptr, ##3204
12ca8     F2 28 02 FB | 	rdlong	local02, objptr
12cac     50 00 00 FF 
12cb0     04 E5 85 F1 | 	sub	objptr, ##41220
12cb4     FF FF 3F FF 
12cb8     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12cbc     50 00 00 AF 
12cc0     04 E5 05 A1 |  if_e	add	objptr, ##41220
12cc4     F2 00 68 AC |  if_e	wrlong	#0, objptr
12cc8     50 00 00 AF 
12ccc     04 E5 85 A1 |  if_e	sub	objptr, ##41220
12cd0                 | LR__1523
12cd0     A7 F0 03 F6 | 	mov	ptra, fp
12cd4     B2 00 A0 FD | 	call	#popregs_
12cd8                 | _do_slow_goto_ret
12cd8     2D 00 64 FD | 	ret
12cdc                 | 
12cdc                 | ' 
12cdc                 | ' ' ----------------  hex$
12cdc                 | ' 
12cdc                 | ' sub do_hex
12cdc                 | _do_hex
12cdc     01 4A 05 F6 | 	mov	COUNT_, #1
12ce0     A8 00 A0 FD | 	call	#pushregs_
12ce4     18 F0 07 F1 | 	add	ptra, #24
12ce8     4A 00 00 FF 
12cec     80 E4 05 F1 | 	add	objptr, ##38016
12cf0     F2 26 02 FB | 	rdlong	local01, objptr
12cf4     13 17 02 F6 | 	mov	arg03, local01
12cf8     01 16 66 F0 | 	shl	arg03, #1
12cfc     13 17 02 F1 | 	add	arg03, local01
12d00     02 16 66 F0 | 	shl	arg03, #2
12d04     03 00 00 FF 
12d08     04 E4 85 F1 | 	sub	objptr, ##1540
12d0c     F2 16 02 F1 | 	add	arg03, objptr
12d10     0B 17 02 FB | 	rdlong	arg03, arg03
12d14     0C 4E 05 F1 | 	add	fp, #12
12d18     A7 16 62 FC | 	wrlong	arg03, fp
12d1c                 | ' 
12d1c                 | ' numpar=compiledline(lineptr_e).result.uresult
12d1c                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
12d1c     0C 4E 85 F1 | 	sub	fp, #12
12d20     03 16 16 F2 | 	cmp	arg03, #3 wc
12d24     47 00 00 FF 
12d28     7C E4 85 F1 | 	sub	objptr, ##36476
12d2c     0C 4E 05 C1 |  if_b	add	fp, #12
12d30     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12d34     0C 4E 85 C1 |  if_b	sub	fp, #12
12d38     40 00 90 4D |  if_c_and_nz	jmp	#LR__1530
12d3c     00 12 06 F6 | 	mov	arg01, #0
12d40     FC 8E B1 FD | 	call	#__system___getiolock_0602
12d44     FD 12 02 F6 | 	mov	arg01, result1
12d48     CC 31 B1 FD | 	call	#__system___lockmem
12d4c     B1 01 00 FF 
12d50     9C 15 06 F6 | 	mov	arg02, ##@LR__5865
12d54     00 12 06 F6 | 	mov	arg01, #0
12d58     00 16 06 F6 | 	mov	arg03, #0
12d5c     AC 3E B1 FD | 	call	#__system___basic_print_string
12d60     00 12 06 F6 | 	mov	arg01, #0
12d64     D8 8E B1 FD | 	call	#__system___getiolock_0602
12d68     FD 00 68 FC | 	wrlong	#0, result1
12d6c     27 12 06 F6 | 	mov	arg01, #39
12d70     00 14 06 F6 | 	mov	arg02, #0
12d74     B4 F7 B0 FD | 	call	#_printerror
12d78     B8 00 90 FD | 	jmp	#LR__1533
12d7c                 | LR__1530
12d7c                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
12d7c     0C 4E 05 F1 | 	add	fp, #12
12d80     A7 26 02 FB | 	rdlong	local01, fp
12d84     0C 4E 85 F1 | 	sub	fp, #12
12d88     02 26 0E F2 | 	cmp	local01, #2 wz
12d8c     38 00 90 5D |  if_ne	jmp	#LR__1531
12d90     4C A5 BF FD | 	call	#_pop
12d94     FF 26 02 F6 | 	mov	local01, result3
12d98     A7 FA 61 FC | 	wrlong	result1, fp
12d9c     04 4E 05 F1 | 	add	fp, #4
12da0     A7 FC 61 FC | 	wrlong	result2, fp
12da4     04 4E 05 F1 | 	add	fp, #4
12da8     A7 26 62 FC | 	wrlong	local01, fp
12dac     08 4E 85 F1 | 	sub	fp, #8
12db0     A7 12 02 F6 | 	mov	arg01, fp
12db4     0C A7 BF FD | 	call	#_converttoint
12db8     14 4E 05 F1 | 	add	fp, #20
12dbc     A7 FA 61 FC | 	wrlong	result1, fp
12dc0     14 4E 85 F1 | 	sub	fp, #20
12dc4     0C 00 90 FD | 	jmp	#LR__1532
12dc8                 | LR__1531
12dc8     14 4E 05 F1 | 	add	fp, #20
12dcc     A7 10 68 FC | 	wrlong	#8, fp
12dd0     14 4E 85 F1 | 	sub	fp, #20
12dd4                 | LR__1532
12dd4     08 A5 BF FD | 	call	#_pop
12dd8     FF 26 02 F6 | 	mov	local01, result3
12ddc     A7 FA 61 FC | 	wrlong	result1, fp
12de0     04 4E 05 F1 | 	add	fp, #4
12de4     A7 FC 61 FC | 	wrlong	result2, fp
12de8     04 4E 05 F1 | 	add	fp, #4
12dec     A7 26 62 FC | 	wrlong	local01, fp
12df0     08 4E 85 F1 | 	sub	fp, #8
12df4     A7 12 02 F6 | 	mov	arg01, fp
12df8     C8 A6 BF FD | 	call	#_converttoint
12dfc     10 4E 05 F1 | 	add	fp, #16
12e00     A7 FA 61 FC | 	wrlong	result1, fp
12e04     FD 12 02 F6 | 	mov	arg01, result1
12e08     04 4E 05 F1 | 	add	fp, #4
12e0c     A7 14 02 FB | 	rdlong	arg02, fp
12e10     14 4E 85 F1 | 	sub	fp, #20
12e14     10 16 06 F6 | 	mov	arg03, #16
12e18     CC 53 B1 FD | 	call	#__system__Number_S
12e1c     A7 FA 61 FC | 	wrlong	result1, fp
12e20     08 4E 05 F1 | 	add	fp, #8
12e24     A7 3E 68 FC | 	wrlong	#31, fp
12e28     08 4E 85 F1 | 	sub	fp, #8
12e2c     A7 12 02 F6 | 	mov	arg01, fp
12e30     44 A5 BF FD | 	call	#_push
12e34                 | LR__1533
12e34     A7 F0 03 F6 | 	mov	ptra, fp
12e38     B2 00 A0 FD | 	call	#popregs_
12e3c                 | _do_hex_ret
12e3c     2D 00 64 FD | 	ret
12e40                 | 
12e40                 | ' 
12e40                 | ' ' ----------------  if
12e40                 | ' 
12e40                 | ' sub do_if
12e40                 | _do_if
12e40     05 4A 05 F6 | 	mov	COUNT_, #5
12e44     A8 00 A0 FD | 	call	#pushregs_
12e48     94 A4 BF FD | 	call	#_pop
12e4c     FD 26 0A F6 | 	mov	local01, result1 wz
12e50     FE 28 02 F6 | 	mov	local02, result2
12e54     FF 2A 02 F6 | 	mov	local03, result3
12e58                 | ' t1=pop()
12e58                 | ' ' if uresult=0, jump over else
12e58                 | ' if t1.result.uresult = 0 then 
12e58     BC 00 90 5D |  if_ne	jmp	#LR__1542
12e5c                 | '   for i=lineptr_e to lineptr-1
12e5c     4A 00 00 FF 
12e60     80 E4 05 F1 | 	add	objptr, ##38016
12e64     F2 2C 02 FB | 	rdlong	local04, objptr
12e68     04 E4 85 F1 | 	sub	objptr, #4
12e6c     F2 2E 02 FB | 	rdlong	local05, objptr
12e70     4A 00 00 FF 
12e74     7C E4 85 F1 | 	sub	objptr, ##38012
12e78                 | LR__1540
12e78     17 2D 52 F2 | 	cmps	local04, local05 wc
12e7c     78 00 90 3D |  if_ae	jmp	#LR__1541
12e80     16 FF 01 F6 | 	mov	result3, local04
12e84     01 FE 65 F0 | 	shl	result3, #1
12e88     16 FF 01 F1 | 	add	result3, local04
12e8c     02 FE 65 F0 | 	shl	result3, #2
12e90     47 00 00 FF 
12e94     7C E4 05 F1 | 	add	objptr, ##36476
12e98     F2 FE 01 F1 | 	add	result3, objptr
12e9c     FF 26 02 FB | 	rdlong	local01, result3
12ea0     04 FE 05 F1 | 	add	result3, #4
12ea4     FF FC 01 FB | 	rdlong	result2, result3
12ea8     16 FF 01 F6 | 	mov	result3, local04
12eac     01 FE 65 F0 | 	shl	result3, #1
12eb0     16 FF 01 F1 | 	add	result3, local04
12eb4     02 FE 65 F0 | 	shl	result3, #2
12eb8     F2 FE 01 F1 | 	add	result3, objptr
12ebc     08 FE 05 F1 | 	add	result3, #8
12ec0     FF FE 01 FB | 	rdlong	result3, result3
12ec4     FE 28 02 F6 | 	mov	local02, result2
12ec8     FF 2A 02 F6 | 	mov	local03, result3
12ecc                 | '     t1=compiledline(i)
12ecc                 | '     if t1.result_type=token_else then lineptr_e=i : return
12ecc     5A 2A 0E F2 | 	cmp	local03, #90 wz
12ed0     47 00 00 FF 
12ed4     7C E4 85 F1 | 	sub	objptr, ##36476
12ed8     4A 00 00 AF 
12edc     80 E4 05 A1 |  if_e	add	objptr, ##38016
12ee0     F2 2C 62 AC |  if_e	wrlong	local04, objptr
12ee4     4A 00 00 AF 
12ee8     80 E4 85 A1 |  if_e	sub	objptr, ##38016
12eec     28 00 90 AD |  if_e	jmp	#LR__1543
12ef0     01 2C 06 F1 | 	add	local04, #1
12ef4     80 FF 9F FD | 	jmp	#LR__1540
12ef8                 | LR__1541
12ef8     4A 00 00 FF 
12efc     7C E4 05 F1 | 	add	objptr, ##38012
12f00     F2 2E 02 FB | 	rdlong	local05, objptr
12f04     01 2E 86 F1 | 	sub	local05, #1
12f08     04 E4 05 F1 | 	add	objptr, #4
12f0c     F2 2E 62 FC | 	wrlong	local05, objptr
12f10     4A 00 00 FF 
12f14     80 E4 85 F1 | 	sub	objptr, ##38016
12f18                 | LR__1542
12f18                 | LR__1543
12f18     A7 F0 03 F6 | 	mov	ptra, fp
12f1c     B2 00 A0 FD | 	call	#popregs_
12f20                 | _do_if_ret
12f20     2D 00 64 FD | 	ret
12f24                 | 
12f24                 | ' 
12f24                 | ' ' ----------------  inkey$
12f24                 | ' 
12f24                 | ' sub do_inkey
12f24                 | _do_inkey
12f24     02 4A 05 F6 | 	mov	COUNT_, #2
12f28     A8 00 A0 FD | 	call	#pushregs_
12f2c     0C F0 07 F1 | 	add	ptra, #12
12f30     88 27 B1 FD | 	call	#_usbnew_spin2_get_key
12f34     45 00 00 FF 
12f38     74 E4 05 F1 | 	add	objptr, ##35444
12f3c     F2 FA 61 FC | 	wrlong	result1, objptr
12f40                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
12f40     45 00 00 FF 
12f44     74 E4 85 F1 | 	sub	objptr, ##35444
12f48     00 FA 0D F2 | 	cmp	result1, #0 wz
12f4c     94 00 90 AD |  if_e	jmp	#LR__1551
12f50     45 00 00 FF 
12f54     74 E4 05 F1 | 	add	objptr, ##35444
12f58     F2 1C 02 FB | 	rdlong	arg06, objptr
12f5c     45 00 00 FF 
12f60     74 E4 85 F1 | 	sub	objptr, ##35444
12f64     00 00 40 FF 
12f68     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
12f6c     45 00 00 CF 
12f70     74 E4 05 C1 |  if_b	add	objptr, ##35444
12f74     F2 26 02 CB |  if_b	rdlong	local01, objptr
12f78     45 00 00 CF 
12f7c     74 E4 85 C1 |  if_b	sub	objptr, ##35444
12f80     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
12f84     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
12f88     58 00 90 3D |  if_ae	jmp	#LR__1551
12f8c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
12f8c     50 00 00 FF 
12f90     3C E5 05 F1 | 	add	objptr, ##41276
12f94     F2 1C 02 FB | 	rdlong	arg06, objptr
12f98     50 00 00 FF 
12f9c     3C E5 85 F1 | 	sub	objptr, ##41276
12fa0     01 1C 0E F2 | 	cmp	arg06, #1 wz
12fa4     3C 00 90 5D |  if_ne	jmp	#LR__1550
12fa8     52 00 00 FF 
12fac     A4 E4 05 F1 | 	add	objptr, ##42148
12fb0     F2 14 02 FB | 	rdlong	arg02, objptr
12fb4     04 E4 85 F1 | 	sub	objptr, #4
12fb8     F2 1A 02 FB | 	rdlong	arg05, objptr
12fbc     07 12 06 F6 | 	mov	arg01, #7
12fc0     56 00 00 FF 
12fc4     44 16 06 F6 | 	mov	arg03, ##44100
12fc8     0C 18 C6 F9 | 	decod	arg04, #12
12fcc     01 1C 66 F6 | 	neg	arg06, #1
12fd0     46 00 00 FF 
12fd4     D4 E5 85 F1 | 	sub	objptr, ##36308
12fd8     CC 2A B1 FD | 	call	#_audio096_spin2_play
12fdc     0B 00 00 FF 
12fe0     CC E4 85 F1 | 	sub	objptr, ##5836
12fe4                 | LR__1550
12fe4                 | LR__1551
12fe4                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
12fe4     45 00 00 FF 
12fe8     74 E4 05 F1 | 	add	objptr, ##35444
12fec     F2 1C 0A FB | 	rdlong	arg06, objptr wz
12ff0     45 00 00 FF 
12ff4     74 E4 85 F1 | 	sub	objptr, ##35444
12ff8     D4 01 90 AD |  if_e	jmp	#LR__1560
12ffc     45 00 00 FF 
13000     74 E4 05 F1 | 	add	objptr, ##35444
13004     F2 1C 02 FB | 	rdlong	arg06, objptr
13008     45 00 00 FF 
1300c     74 E4 85 F1 | 	sub	objptr, ##35444
13010     00 00 40 FF 
13014     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13018     45 00 00 CF 
1301c     74 E4 05 C1 |  if_b	add	objptr, ##35444
13020     F2 26 02 CB |  if_b	rdlong	local01, objptr
13024     45 00 00 CF 
13028     74 E4 85 C1 |  if_b	sub	objptr, ##35444
1302c     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
13030     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13034     98 01 90 3D |  if_ae	jmp	#LR__1560
13038                 | '   if leds and 2 = 2 then 
13038     52 00 00 FF 
1303c     E0 E4 05 F1 | 	add	objptr, ##42208
13040     F2 26 0A FB | 	rdlong	local01, objptr wz
13044     52 00 00 FF 
13048     E0 E4 85 F1 | 	sub	objptr, ##42208
1304c     58 01 90 AD |  if_e	jmp	#LR__1559
13050                 | '     if key>96 andalso key<123 then
13050     45 00 00 FF 
13054     74 E4 05 F1 | 	add	objptr, ##35444
13058     F2 26 02 FB | 	rdlong	local01, objptr
1305c     45 00 00 FF 
13060     74 E4 85 F1 | 	sub	objptr, ##35444
13064     61 26 16 F2 | 	cmp	local01, #97 wc
13068     3C 00 90 CD |  if_b	jmp	#LR__1552
1306c     45 00 00 FF 
13070     74 E4 05 F1 | 	add	objptr, ##35444
13074     F2 26 02 FB | 	rdlong	local01, objptr
13078     45 00 00 FF 
1307c     74 E4 85 F1 | 	sub	objptr, ##35444
13080     7B 26 16 F2 | 	cmp	local01, #123 wc
13084     20 00 90 3D |  if_ae	jmp	#LR__1552
13088     45 00 00 FF 
1308c     74 E4 05 F1 | 	add	objptr, ##35444
13090     F2 26 02 FB | 	rdlong	local01, objptr
13094     20 26 86 F1 | 	sub	local01, #32
13098     F2 26 62 FC | 	wrlong	local01, objptr
1309c     45 00 00 FF 
130a0     74 E4 85 F1 | 	sub	objptr, ##35444
130a4     00 01 90 FD | 	jmp	#LR__1558
130a8                 | LR__1552
130a8     45 00 00 FF 
130ac     74 E4 05 F1 | 	add	objptr, ##35444
130b0     F2 26 02 FB | 	rdlong	local01, objptr
130b4     45 00 00 FF 
130b8     74 E4 85 F1 | 	sub	objptr, ##35444
130bc     41 26 16 F2 | 	cmp	local01, #65 wc
130c0     3C 00 90 CD |  if_b	jmp	#LR__1553
130c4     45 00 00 FF 
130c8     74 E4 05 F1 | 	add	objptr, ##35444
130cc     F2 26 02 FB | 	rdlong	local01, objptr
130d0     45 00 00 FF 
130d4     74 E4 85 F1 | 	sub	objptr, ##35444
130d8     5B 26 16 F2 | 	cmp	local01, #91 wc
130dc     20 00 90 3D |  if_ae	jmp	#LR__1553
130e0     45 00 00 FF 
130e4     74 E4 05 F1 | 	add	objptr, ##35444
130e8     F2 26 02 FB | 	rdlong	local01, objptr
130ec     20 26 06 F1 | 	add	local01, #32
130f0     F2 26 62 FC | 	wrlong	local01, objptr
130f4     45 00 00 FF 
130f8     74 E4 85 F1 | 	sub	objptr, ##35444
130fc     A8 00 90 FD | 	jmp	#LR__1557
13100                 | LR__1553
13100     45 00 00 FF 
13104     74 E4 05 F1 | 	add	objptr, ##35444
13108     F2 26 02 FB | 	rdlong	local01, objptr
1310c     45 00 00 FF 
13110     74 E4 85 F1 | 	sub	objptr, ##35444
13114     17 26 16 F2 | 	cmp	local01, #23 wc
13118     3C 00 90 CD |  if_b	jmp	#LR__1554
1311c     45 00 00 FF 
13120     74 E4 05 F1 | 	add	objptr, ##35444
13124     F2 26 02 FB | 	rdlong	local01, objptr
13128     45 00 00 FF 
1312c     74 E4 85 F1 | 	sub	objptr, ##35444
13130     20 26 16 F2 | 	cmp	local01, #32 wc
13134     20 00 90 3D |  if_ae	jmp	#LR__1554
13138     45 00 00 FF 
1313c     74 E4 05 F1 | 	add	objptr, ##35444
13140     F2 26 02 FB | 	rdlong	local01, objptr
13144     09 26 86 F1 | 	sub	local01, #9
13148     F2 26 62 FC | 	wrlong	local01, objptr
1314c     45 00 00 FF 
13150     74 E4 85 F1 | 	sub	objptr, ##35444
13154     50 00 90 FD | 	jmp	#LR__1556
13158                 | LR__1554
13158     45 00 00 FF 
1315c     74 E4 05 F1 | 	add	objptr, ##35444
13160     F2 28 02 FB | 	rdlong	local02, objptr
13164     45 00 00 FF 
13168     74 E4 85 F1 | 	sub	objptr, ##35444
1316c     0E 28 16 F2 | 	cmp	local02, #14 wc
13170     34 00 90 CD |  if_b	jmp	#LR__1555
13174     45 00 00 FF 
13178     74 E4 05 F1 | 	add	objptr, ##35444
1317c     F2 26 02 FB | 	rdlong	local01, objptr
13180     45 00 00 FF 
13184     74 E4 85 F1 | 	sub	objptr, ##35444
13188     17 26 16 F2 | 	cmp	local01, #23 wc
1318c     52 00 00 CF 
13190     E4 E4 05 C1 |  if_b	add	objptr, ##42212
13194     F2 28 02 CB |  if_b	rdlong	local02, objptr
13198     27 28 06 C1 |  if_b	add	local02, #39
1319c     F2 28 62 CC |  if_b	wrlong	local02, objptr
131a0     52 00 00 CF 
131a4     E4 E4 85 C1 |  if_b	sub	objptr, ##42212
131a8                 | LR__1555
131a8                 | LR__1556
131a8                 | LR__1557
131a8                 | LR__1558
131a8                 | LR__1559
131a8     45 00 00 FF 
131ac     74 E4 05 F1 | 	add	objptr, ##35444
131b0     F2 12 02 FB | 	rdlong	arg01, objptr
131b4     45 00 00 FF 
131b8     74 E4 85 F1 | 	sub	objptr, ##35444
131bc     EC F6 B0 FD | 	call	#_scantochar
131c0     FD 12 02 F6 | 	mov	arg01, result1
131c4     90 4F B1 FD | 	call	#__system__Chr_S
131c8     A7 FA 61 FC | 	wrlong	result1, fp
131cc     0C 00 90 FD | 	jmp	#LR__1561
131d0                 | LR__1560
131d0     B1 01 00 FF 
131d4     A3 29 06 F6 | 	mov	local02, ##@LR__5866
131d8     A7 28 62 FC | 	wrlong	local02, fp
131dc                 | LR__1561
131dc     08 4E 05 F1 | 	add	fp, #8
131e0     A7 3E 68 FC | 	wrlong	#31, fp
131e4     08 4E 85 F1 | 	sub	fp, #8
131e8     A7 12 02 F6 | 	mov	arg01, fp
131ec     88 A1 BF FD | 	call	#_push
131f0     A7 F0 03 F6 | 	mov	ptra, fp
131f4     B2 00 A0 FD | 	call	#popregs_
131f8                 | _do_inkey_ret
131f8     2D 00 64 FD | 	ret
131fc                 | 
131fc                 | ' 
131fc                 | ' ' ----------------  ink
131fc                 | ' 
131fc                 | ' sub do_ink
131fc                 | _do_ink
131fc     00 4A 05 F6 | 	mov	COUNT_, #0
13200     A8 00 A0 FD | 	call	#pushregs_
13204     0C F0 07 F1 | 	add	ptra, #12
13208     D4 A0 BF FD | 	call	#_pop
1320c     FF 14 02 F6 | 	mov	arg02, result3
13210     A7 FA 61 FC | 	wrlong	result1, fp
13214     04 4E 05 F1 | 	add	fp, #4
13218     A7 FC 61 FC | 	wrlong	result2, fp
1321c     04 4E 05 F1 | 	add	fp, #4
13220     A7 14 62 FC | 	wrlong	arg02, fp
13224     08 4E 85 F1 | 	sub	fp, #8
13228     A7 12 02 F6 | 	mov	arg01, fp
1322c     94 A2 BF FD | 	call	#_converttoint
13230     37 00 00 FF 
13234     3C E4 05 F1 | 	add	objptr, ##28220
13238     F2 FA 61 FC | 	wrlong	result1, objptr
1323c     04 E4 85 F1 | 	sub	objptr, #4
13240     F2 14 02 FB | 	rdlong	arg02, objptr
13244                 | ' 
13244                 | ' write_color:=ff
13244     36 00 00 FF 
13248     F7 E5 85 F1 | 	sub	objptr, ##28151
1324c     F2 FA 61 FC | 	wrlong	result1, objptr
13250                 | ' write_background:=bb
13250     04 E4 05 F1 | 	add	objptr, #4
13254     F2 14 62 FC | 	wrlong	arg02, objptr
13258     36 00 00 FF 
1325c     F7 E5 05 F1 | 	add	objptr, ##28151
13260     F2 12 02 FB | 	rdlong	arg01, objptr
13264     37 00 00 FF 
13268     3C E4 85 F1 | 	sub	objptr, ##28220
1326c     90 FE B0 FD | 	call	#_hg010b_spin2_setcursorcolor
13270     A7 F0 03 F6 | 	mov	ptra, fp
13274     B2 00 A0 FD | 	call	#popregs_
13278                 | _do_ink_ret
13278     2D 00 64 FD | 	ret
1327c                 | 
1327c                 | ' 
1327c                 | ' ' ----------------  int
1327c                 | ' 
1327c                 | ' sub do_int
1327c                 | _do_int
1327c     02 4A 05 F6 | 	mov	COUNT_, #2
13280     A8 00 A0 FD | 	call	#pushregs_
13284     10 F0 07 F1 | 	add	ptra, #16
13288     54 A0 BF FD | 	call	#_pop
1328c     FE 26 02 F6 | 	mov	local01, result2
13290     FF 28 02 F6 | 	mov	local02, result3
13294     A7 FA 61 FC | 	wrlong	result1, fp
13298     04 4E 05 F1 | 	add	fp, #4
1329c     A7 26 62 FC | 	wrlong	local01, fp
132a0     04 4E 05 F1 | 	add	fp, #4
132a4     A7 28 62 FC | 	wrlong	local02, fp
132a8                 | ' 
132a8                 | ' t1=pop()
132a8                 | ' select case t1.result_type
132a8     08 4E 85 F1 | 	sub	fp, #8
132ac     1E 28 0E F2 | 	cmp	local02, #30 wz
132b0     14 00 90 AD |  if_e	jmp	#LR__1570
132b4     1F 28 0E F2 | 	cmp	local02, #31 wz
132b8     20 00 90 AD |  if_e	jmp	#LR__1571
132bc     2B 28 0E F2 | 	cmp	local02, #43 wz
132c0     34 00 90 AD |  if_e	jmp	#LR__1572
132c4     50 00 90 FD | 	jmp	#LR__1573
132c8                 | LR__1570
132c8     A7 12 02 FB | 	rdlong	arg01, fp
132cc     00 14 06 F6 | 	mov	arg02, #0
132d0     84 5F B1 FD | 	call	#__system___float_tointeger
132d4     A7 FA 61 FC | 	wrlong	result1, fp
132d8     3C 00 90 FD | 	jmp	#LR__1573
132dc                 | LR__1571
132dc     A7 12 02 FB | 	rdlong	arg01, fp
132e0     B8 62 B1 FD | 	call	#__system____builtin_atof
132e4     FD 12 02 F6 | 	mov	arg01, result1
132e8     00 14 06 F6 | 	mov	arg02, #0
132ec     68 5F B1 FD | 	call	#__system___float_tointeger
132f0     A7 FA 61 FC | 	wrlong	result1, fp
132f4     20 00 90 FD | 	jmp	#LR__1573
132f8                 | LR__1572
132f8     A7 12 02 FB | 	rdlong	arg01, fp
132fc     58 A1 BF FD | 	call	#_convertstring
13300     FD 12 02 F6 | 	mov	arg01, result1
13304     94 62 B1 FD | 	call	#__system____builtin_atof
13308     FD 12 02 F6 | 	mov	arg01, result1
1330c     00 14 06 F6 | 	mov	arg02, #0
13310     44 5F B1 FD | 	call	#__system___float_tointeger
13314     A7 FA 61 FC | 	wrlong	result1, fp
13318                 | LR__1573
13318     08 4E 05 F1 | 	add	fp, #8
1331c     A7 38 68 FC | 	wrlong	#28, fp
13320     08 4E 85 F1 | 	sub	fp, #8
13324     A7 12 02 F6 | 	mov	arg01, fp
13328     4C A0 BF FD | 	call	#_push
1332c     A7 F0 03 F6 | 	mov	ptra, fp
13330     B2 00 A0 FD | 	call	#popregs_
13334                 | _do_int_ret
13334     2D 00 64 FD | 	ret
13338                 | 
13338                 | ' 
13338                 | ' ' ----------------  input
13338                 | ' 
13338                 | ' sub do_input
13338                 | _do_input
13338     11 4A 05 F6 | 	mov	COUNT_, #17
1333c     A8 00 A0 FD | 	call	#pushregs_
13340     50 F1 07 F1 | 	add	ptra, #336
13344     4A 00 00 FF 
13348     80 E4 05 F1 | 	add	objptr, ##38016
1334c     F2 FE 01 FB | 	rdlong	result3, objptr
13350     FF FC 01 F6 | 	mov	result2, result3
13354     01 FC 65 F0 | 	shl	result2, #1
13358     FF FC 01 F1 | 	add	result2, result3
1335c     02 FC 65 F0 | 	shl	result2, #2
13360     03 00 00 FF 
13364     04 E4 85 F1 | 	sub	objptr, ##1540
13368     F2 FC 01 F1 | 	add	result2, objptr
1336c     FE FC 01 FB | 	rdlong	result2, result2
13370     08 4E 05 F1 | 	add	fp, #8
13374     A7 FC 61 FC | 	wrlong	result2, fp
13378                 | ' 
13378                 | ' numpar=compiledline(lineptr_e).result.uresult
13378                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
13378     08 4E 85 F1 | 	sub	fp, #8
1337c     01 FC 15 F2 | 	cmp	result2, #1 wc
13380     47 00 00 FF 
13384     7C E4 85 F1 | 	sub	objptr, ##36476
13388     14 00 90 CD |  if_b	jmp	#LR__1580
1338c     08 4E 05 F1 | 	add	fp, #8
13390     A7 FC 01 FB | 	rdlong	result2, fp
13394     08 4E 85 F1 | 	sub	fp, #8
13398     41 FC 15 F2 | 	cmp	result2, #65 wc
1339c     50 00 90 CD |  if_b	jmp	#LR__1581
133a0                 | LR__1580
133a0     00 12 06 F6 | 	mov	arg01, #0
133a4     98 88 B1 FD | 	call	#__system___getiolock_0602
133a8     FD 12 02 F6 | 	mov	arg01, result1
133ac     68 2B B1 FD | 	call	#__system___lockmem
133b0     B1 01 00 FF 
133b4     A4 15 06 F6 | 	mov	arg02, ##@LR__5867
133b8     00 12 06 F6 | 	mov	arg01, #0
133bc     00 16 06 F6 | 	mov	arg03, #0
133c0     48 38 B1 FD | 	call	#__system___basic_print_string
133c4     00 12 06 F6 | 	mov	arg01, #0
133c8     74 88 B1 FD | 	call	#__system___getiolock_0602
133cc     FD 00 68 FC | 	wrlong	#0, result1
133d0     50 00 00 FF 
133d4     F0 E4 05 F1 | 	add	objptr, ##41200
133d8     F2 14 02 FB | 	rdlong	arg02, objptr
133dc     50 00 00 FF 
133e0     F0 E4 85 F1 | 	sub	objptr, ##41200
133e4     27 12 06 F6 | 	mov	arg01, #39
133e8     40 F1 B0 FD | 	call	#_printerror
133ec     44 0B 90 FD | 	jmp	#LR__1630
133f0                 | LR__1581
133f0     08 4E 05 F1 | 	add	fp, #8
133f4     A7 FC 01 FB | 	rdlong	result2, fp
133f8     01 FC 85 F1 | 	sub	result2, #1
133fc     28 4F 05 F1 | 	add	fp, #296
13400     A7 FC 61 FC | 	wrlong	result2, fp
13404     3C E4 05 F1 | 	add	objptr, #60
13408     F2 FC E1 FA | 	rdword	result2, objptr
1340c     FE FC 51 F6 | 	abs	result2, result2 wc
13410     01 FC 45 F0 | 	shr	result2, #1
13414     FE FC 81 F6 | 	negc	result2, result2
13418     0C 4E 05 F1 | 	add	fp, #12
1341c     A7 FC 61 FC | 	wrlong	result2, fp
13420     02 E4 05 F1 | 	add	objptr, #2
13424     F2 26 C2 FA | 	rdbyte	local01, objptr
13428     3E E4 85 F1 | 	sub	objptr, #62
1342c     04 4E 05 F1 | 	add	fp, #4
13430     A7 26 62 FC | 	wrlong	local01, fp
13434     40 4F 85 F1 | 	sub	fp, #320
13438                 | ' i=numpar-1
13438                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13438                 | ' do
13438                 | LR__1582
13438     C8 D3 BE FD | 	call	#_edit
1343c     A7 FA 61 FC | 	wrlong	result1, fp
13440                 | ' 
13440                 | '   line$=edit()
13440                 | ' 
13440                 | '   if v.cursor_y=cpy+1 then
13440     3E E4 05 F1 | 	add	objptr, #62
13444     F2 26 C2 FA | 	rdbyte	local01, objptr
13448     3E E4 85 F1 | 	sub	objptr, #62
1344c     40 4F 05 F1 | 	add	fp, #320
13450     A7 16 02 FB | 	rdlong	arg03, fp
13454     40 4F 85 F1 | 	sub	fp, #320
13458     01 16 06 F1 | 	add	arg03, #1
1345c     0B 27 0A F2 | 	cmp	local01, arg03 wz
13460     6C 00 90 5D |  if_ne	jmp	#LR__1585
13464     A7 26 02 FB | 	rdlong	local01, fp
13468     13 13 02 F6 | 	mov	arg01, local01
1346c     09 29 02 F6 | 	mov	local02, arg01
13470     97 06 48 FB | 	callpa	#(@LR__1584-@LR__1583)>>2,fcache_load_ptr_
13474                 | LR__1583
13474     14 FB C9 FA | 	rdbyte	result1, local02 wz
13478     01 28 06 51 |  if_ne	add	local02, #1
1347c     F4 FF 9F 5D |  if_ne	jmp	#LR__1583
13480                 | LR__1584
13480     09 29 82 F1 | 	sub	local02, arg01
13484     14 15 02 F6 | 	mov	arg02, local02
13488     3C 4F 05 F1 | 	add	fp, #316
1348c     A7 16 02 FB | 	rdlong	arg03, fp
13490     3C 4F 85 F1 | 	sub	fp, #316
13494     0B 15 82 F1 | 	sub	arg02, arg03
13498     37 00 00 FF 
1349c     34 E4 05 F1 | 	add	objptr, ##28212
134a0     F2 16 02 FB | 	rdlong	arg03, objptr
134a4     37 00 00 FF 
134a8     34 E4 85 F1 | 	sub	objptr, ##28212
134ac     0B 15 02 F1 | 	add	arg02, arg03
134b0     13 13 02 F6 | 	mov	arg01, local01
134b4     64 4B B1 FD | 	call	#__system__Right_S
134b8     FD 12 02 F6 | 	mov	arg01, result1
134bc     64 4F B1 FD | 	call	#__system__RTrim_S
134c0     FD 12 02 F6 | 	mov	arg01, result1
134c4     9C 4E B1 FD | 	call	#__system__LTrim_S
134c8     A7 FA 61 FC | 	wrlong	result1, fp
134cc     14 00 90 FD | 	jmp	#LR__1586
134d0                 | LR__1585
134d0     A7 12 02 FB | 	rdlong	arg01, fp
134d4     4C 4F B1 FD | 	call	#__system__RTrim_S
134d8     FD 12 02 F6 | 	mov	arg01, result1
134dc     84 4E B1 FD | 	call	#__system__LTrim_S
134e0     A7 FA 61 FC | 	wrlong	result1, fp
134e4                 | LR__1586
134e4                 | '   do
134e4                 | LR__1587
134e4     A7 14 02 FB | 	rdlong	arg02, fp
134e8     B1 01 00 FF 
134ec     AF 17 06 F6 | 	mov	arg03, ##@LR__5868
134f0     01 12 06 F6 | 	mov	arg01, #1
134f4     E4 4F B1 FD | 	call	#__system__Instr
134f8     0C 4E 05 F1 | 	add	fp, #12
134fc     A7 FA 61 FC | 	wrlong	result1, fp
13500                 | '    comma=instr(1,line$,",")  
13500                 | '    if comma>0  then 
13500     0C 4E 85 F1 | 	sub	fp, #12
13504     01 FA 15 F2 | 	cmp	result1, #1 wc
13508     68 00 90 CD |  if_b	jmp	#LR__1590
1350c     A7 12 02 FB | 	rdlong	arg01, fp
13510     0C 4E 05 F1 | 	add	fp, #12
13514     A7 14 02 FB | 	rdlong	arg02, fp
13518     0C 4E 85 F1 | 	sub	fp, #12
1351c     01 14 86 F1 | 	sub	arg02, #1
13520     70 4A B1 FD | 	call	#__system__Left_S
13524     04 4E 05 F1 | 	add	fp, #4
13528     A7 FA 61 FC | 	wrlong	result1, fp
1352c     04 4E 85 F1 | 	sub	fp, #4
13530     A7 26 02 FB | 	rdlong	local01, fp
13534     13 13 02 F6 | 	mov	arg01, local01
13538     09 29 02 F6 | 	mov	local02, arg01
1353c     97 06 48 FB | 	callpa	#(@LR__1589-@LR__1588)>>2,fcache_load_ptr_
13540                 | LR__1588
13540     14 FB C9 FA | 	rdbyte	result1, local02 wz
13544     01 28 06 51 |  if_ne	add	local02, #1
13548     F4 FF 9F 5D |  if_ne	jmp	#LR__1588
1354c                 | LR__1589
1354c     09 29 82 F1 | 	sub	local02, arg01
13550     14 15 02 F6 | 	mov	arg02, local02
13554     0C 4E 05 F1 | 	add	fp, #12
13558     A7 16 02 FB | 	rdlong	arg03, fp
1355c     0C 4E 85 F1 | 	sub	fp, #12
13560     0B 15 82 F1 | 	sub	arg02, arg03
13564     13 13 02 F6 | 	mov	arg01, local01
13568     B0 4A B1 FD | 	call	#__system__Right_S
1356c     A7 FA 61 FC | 	wrlong	result1, fp
13570     28 00 90 FD | 	jmp	#LR__1591
13574                 | LR__1590
13574     A7 12 02 FB | 	rdlong	arg01, fp
13578     A8 4E B1 FD | 	call	#__system__RTrim_S
1357c     FD 12 02 F6 | 	mov	arg01, result1
13580     E0 4D B1 FD | 	call	#__system__LTrim_S
13584     04 4E 05 F1 | 	add	fp, #4
13588     A7 FA 61 FC | 	wrlong	result1, fp
1358c     04 4E 85 F1 | 	sub	fp, #4
13590     B1 01 00 FF 
13594     B1 27 06 F6 | 	mov	local01, ##@LR__5869
13598     A7 26 62 FC | 	wrlong	local01, fp
1359c                 | LR__1591
1359c     30 4F 05 F1 | 	add	fp, #304
135a0     A7 26 02 FB | 	rdlong	local01, fp
135a4     02 26 66 F0 | 	shl	local01, #2
135a8     04 4F 85 F1 | 	sub	fp, #260
135ac     A7 26 02 F1 | 	add	local01, fp
135b0     28 4E 85 F1 | 	sub	fp, #40
135b4     A7 FA 01 FB | 	rdlong	result1, fp
135b8     13 FB 61 FC | 	wrlong	result1, local01
135bc     2C 4F 05 F1 | 	add	fp, #300
135c0     A7 26 02 FB | 	rdlong	local01, fp
135c4     01 26 86 F1 | 	sub	local01, #1
135c8     A7 26 62 FC | 	wrlong	local01, fp
135cc     30 4F 85 F1 | 	sub	fp, #304
135d0     00 26 56 F2 | 	cmps	local01, #0 wc
135d4     18 00 90 CD |  if_b	jmp	#LR__1592
135d8     A7 12 02 FB | 	rdlong	arg01, fp
135dc     B1 01 00 FF 
135e0     B2 15 06 F6 | 	mov	arg02, ##@LR__5870
135e4     58 29 B1 FD | 	call	#__system___string_cmp
135e8     00 FA 0D F2 | 	cmp	result1, #0 wz
135ec     F4 FE 9F 5D |  if_ne	jmp	#LR__1587
135f0                 | LR__1592
135f0     30 4F 05 F1 | 	add	fp, #304
135f4     A7 26 02 FB | 	rdlong	local01, fp
135f8     30 4F 85 F1 | 	sub	fp, #304
135fc     00 26 56 F2 | 	cmps	local01, #0 wc
13600     34 FE 9F 3D |  if_ae	jmp	#LR__1582
13604                 | ' 
13604                 | ' for i=0 to numpar-1
13604     30 4F 05 F1 | 	add	fp, #304
13608     A7 00 68 FC | 	wrlong	#0, fp
1360c     28 4F 85 F1 | 	sub	fp, #296
13610     A7 2A 02 FB | 	rdlong	local03, fp
13614     08 4E 85 F1 | 	sub	fp, #8
13618                 | LR__1593
13618     30 4F 05 F1 | 	add	fp, #304
1361c     A7 2C 02 FB | 	rdlong	local04, fp
13620     30 4F 85 F1 | 	sub	fp, #304
13624     16 27 02 F6 | 	mov	local01, local04
13628     15 27 52 F2 | 	cmps	local01, local03 wc
1362c     04 09 90 3D |  if_ae	jmp	#LR__1629
13630                 | ' 
13630                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
13630     30 4F 05 F1 | 	add	fp, #304
13634     A7 16 02 FB | 	rdlong	arg03, fp
13638     02 16 66 F0 | 	shl	arg03, #2
1363c     04 4F 85 F1 | 	sub	fp, #260
13640     A7 16 02 F1 | 	add	arg03, fp
13644     0B 13 02 FB | 	rdlong	arg01, arg03
13648     2C 4E 85 F1 | 	sub	fp, #44
1364c     3C 2F BF FD | 	call	#_isnum
13650     FD 2E 02 F6 | 	mov	local05, result1
13654     30 4F 05 F1 | 	add	fp, #304
13658     A7 16 02 FB | 	rdlong	arg03, fp
1365c     02 16 66 F0 | 	shl	arg03, #2
13660     04 4F 85 F1 | 	sub	fp, #260
13664     A7 30 02 F6 | 	mov	local06, fp
13668     A7 16 02 F1 | 	add	arg03, fp
1366c     0B 13 02 FB | 	rdlong	arg01, arg03
13670     2C 4E 85 F1 | 	sub	fp, #44
13674     00 33 BF FD | 	call	#_isint
13678     FD 2E 2A F5 | 	andn	local05, result1 wz
1367c     52 00 00 5F 
13680     10 E5 05 51 |  if_ne	add	objptr, ##42256
13684     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
13688     52 00 00 5F 
1368c     10 E5 85 51 |  if_ne	sub	objptr, ##42256
13690                 | '   if isint(args(i)) then r=result_int 
13690     30 4F 05 F1 | 	add	fp, #304
13694     A7 2E 02 FB | 	rdlong	local05, fp
13698     02 2E 66 F0 | 	shl	local05, #2
1369c     04 4F 85 F1 | 	sub	fp, #260
136a0     A7 2E 02 F1 | 	add	local05, fp
136a4     17 13 02 FB | 	rdlong	arg01, local05
136a8     2C 4E 85 F1 | 	sub	fp, #44
136ac     C8 32 BF FD | 	call	#_isint
136b0     00 FA 0D F2 | 	cmp	result1, #0 wz
136b4     52 00 00 5F 
136b8     10 E5 05 51 |  if_ne	add	objptr, ##42256
136bc     F2 38 68 5C |  if_ne	wrlong	#28, objptr
136c0     52 00 00 5F 
136c4     10 E5 85 51 |  if_ne	sub	objptr, ##42256
136c8                 | '   if isdec(args(i)) then r=result_uint 
136c8     30 4F 05 F1 | 	add	fp, #304
136cc     A7 2E 02 FB | 	rdlong	local05, fp
136d0     02 2E 66 F0 | 	shl	local05, #2
136d4     04 4F 85 F1 | 	sub	fp, #260
136d8     A7 2E 02 F1 | 	add	local05, fp
136dc     17 13 02 FB | 	rdlong	arg01, local05
136e0     2C 4E 85 F1 | 	sub	fp, #44
136e4     34 35 BF FD | 	call	#_isdec
136e8     00 FA 0D F2 | 	cmp	result1, #0 wz
136ec     52 00 00 5F 
136f0     10 E5 05 51 |  if_ne	add	objptr, ##42256
136f4     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
136f8     52 00 00 5F 
136fc     10 E5 85 51 |  if_ne	sub	objptr, ##42256
13700                 | '   if not isnum(args(i)) then 
13700     30 4F 05 F1 | 	add	fp, #304
13704     A7 32 02 FB | 	rdlong	local07, fp
13708     19 35 02 F6 | 	mov	local08, local07
1370c     02 34 66 F0 | 	shl	local08, #2
13710     04 4F 85 F1 | 	sub	fp, #260
13714     A7 36 02 F6 | 	mov	local09, fp
13718     A7 34 02 F1 | 	add	local08, fp
1371c     1A 13 02 FB | 	rdlong	arg01, local08
13720     2C 4E 85 F1 | 	sub	fp, #44
13724     64 2E BF FD | 	call	#_isnum
13728     FD 2E 22 F6 | 	not	local05, result1
1372c     00 2E 0E F2 | 	cmp	local05, #0 wz
13730     44 01 90 AD |  if_e	jmp	#LR__1598
13734     52 00 00 FF 
13738     10 E5 05 F1 | 	add	objptr, ##42256
1373c     F2 56 68 FC | 	wrlong	#43, objptr
13740     52 00 00 FF 
13744     10 E5 85 F1 | 	sub	objptr, ##42256
13748     04 4E 05 F1 | 	add	fp, #4
1374c     A7 12 02 FB | 	rdlong	arg01, fp
13750     04 4E 85 F1 | 	sub	fp, #4
13754     09 29 02 F6 | 	mov	local02, arg01
13758     97 06 48 FB | 	callpa	#(@LR__1595-@LR__1594)>>2,fcache_load_ptr_
1375c                 | LR__1594
1375c     14 FB C9 FA | 	rdbyte	result1, local02 wz
13760     01 28 06 51 |  if_ne	add	local02, #1
13764     F4 FF 9F 5D |  if_ne	jmp	#LR__1594
13768                 | LR__1595
13768     09 29 82 F1 | 	sub	local02, arg01
1376c     14 33 02 F6 | 	mov	local07, local02
13770     38 4F 05 F1 | 	add	fp, #312
13774     A7 32 62 FC | 	wrlong	local07, fp
13778     52 00 00 FF 
1377c     98 E4 05 F1 | 	add	objptr, ##42136
13780     F2 12 02 FB | 	rdlong	arg01, objptr
13784     19 13 82 F1 | 	sub	arg01, local07
13788     04 12 86 F1 | 	sub	arg01, #4
1378c     03 12 26 F5 | 	andn	arg01, #3
13790     F2 12 62 FC | 	wrlong	arg01, objptr
13794     52 00 00 FF 
13798     98 E4 85 F1 | 	sub	objptr, ##42136
1379c     A7 14 02 FB | 	rdlong	arg02, fp
137a0     38 4F 85 F1 | 	sub	fp, #312
137a4     24 EF B0 FD | 	call	#_pslpoke
137a8                 | '     pslpoke memtop,l
137a8                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
137a8     34 4F 05 F1 | 	add	fp, #308
137ac     A7 02 68 FC | 	wrlong	#1, fp
137b0     04 4E 05 F1 | 	add	fp, #4
137b4     A7 38 02 FB | 	rdlong	local10, fp
137b8     38 4F 85 F1 | 	sub	fp, #312
137bc     01 38 06 F1 | 	add	local10, #1
137c0                 | LR__1596
137c0     34 4F 05 F1 | 	add	fp, #308
137c4     A7 2E 02 FB | 	rdlong	local05, fp
137c8     34 4F 85 F1 | 	sub	fp, #308
137cc     1C 2F 52 F2 | 	cmps	local05, local10 wc
137d0     84 00 90 3D |  if_ae	jmp	#LR__1597
137d4     52 00 00 FF 
137d8     98 E4 05 F1 | 	add	objptr, ##42136
137dc     F2 32 02 FB | 	rdlong	local07, objptr
137e0     52 00 00 FF 
137e4     98 E4 85 F1 | 	sub	objptr, ##42136
137e8     03 32 06 F1 | 	add	local07, #3
137ec     34 4F 05 F1 | 	add	fp, #308
137f0     A7 3A 02 FB | 	rdlong	local11, fp
137f4     1D 33 02 F1 | 	add	local07, local11
137f8     04 4E 85 F1 | 	sub	fp, #4
137fc     A7 3C 02 FB | 	rdlong	local12, fp
13800     02 3C 66 F0 | 	shl	local12, #2
13804     04 4F 85 F1 | 	sub	fp, #260
13808     A7 3E 02 F6 | 	mov	local13, fp
1380c     A7 3C 02 F1 | 	add	local12, fp
13810     1E 13 02 FB | 	rdlong	arg01, local12
13814     2C 4E 85 F1 | 	sub	fp, #44
13818     01 40 06 F6 | 	mov	local14, #1
1381c     1D 15 02 F6 | 	mov	arg02, local11
13820     01 16 06 F6 | 	mov	arg03, #1
13824     84 48 B1 FD | 	call	#__system__Mid_S
13828     FD 14 C2 FA | 	rdbyte	arg02, result1
1382c     19 13 02 F6 | 	mov	arg01, local07
13830     28 EF B0 FD | 	call	#_pspoke
13834     34 4F 05 F1 | 	add	fp, #308
13838     A7 34 02 FB | 	rdlong	local08, fp
1383c     1A 33 02 F6 | 	mov	local07, local08
13840     1A 31 02 F6 | 	mov	local06, local08
13844     18 37 02 F6 | 	mov	local09, local06
13848     01 36 06 F1 | 	add	local09, #1
1384c     A7 36 62 FC | 	wrlong	local09, fp
13850     34 4F 85 F1 | 	sub	fp, #308
13854     68 FF 9F FD | 	jmp	#LR__1596
13858                 | LR__1597
13858     52 00 00 FF 
1385c     98 E4 05 F1 | 	add	objptr, ##42136
13860     F2 2E 02 FB | 	rdlong	local05, objptr
13864     52 00 00 FF 
13868     98 E4 85 F1 | 	sub	objptr, ##42136
1386c     10 4E 05 F1 | 	add	fp, #16
13870     A7 2E 62 FC | 	wrlong	local05, fp
13874     10 4E 85 F1 | 	sub	fp, #16
13878                 | LR__1598
13878     64 9A BF FD | 	call	#_pop
1387c     FE 2E 02 F6 | 	mov	local05, result2
13880     FF 42 02 F6 | 	mov	local15, result3
13884     1C 4E 05 F1 | 	add	fp, #28
13888     A7 FA 61 FC | 	wrlong	result1, fp
1388c     04 4E 05 F1 | 	add	fp, #4
13890     A7 2E 62 FC | 	wrlong	local05, fp
13894     04 4E 05 F1 | 	add	fp, #4
13898     A7 42 62 FC | 	wrlong	local15, fp
1389c     04 4E 85 F1 | 	sub	fp, #4
138a0     A7 44 02 FB | 	rdlong	local16, fp
138a4     0C 4E 85 F1 | 	sub	fp, #12
138a8     A7 44 62 FC | 	wrlong	local16, fp
138ac                 | '   t1=pop() : vartype=t1.result.twowords(1)
138ac                 | '   select case vartype
138ac     14 4E 85 F1 | 	sub	fp, #20
138b0     22 47 0A F6 | 	mov	local17, local16 wz
138b4     64 00 90 AD |  if_e	jmp	#LR__1599
138b8     00 47 0E F2 | 	cmp	local17, #256 wz
138bc     6C 00 90 AD |  if_e	jmp	#LR__1600
138c0     01 47 0E F2 | 	cmp	local17, #257 wz
138c4     74 00 90 AD |  if_e	jmp	#LR__1601
138c8     02 47 0E F2 | 	cmp	local17, #258 wz
138cc     7C 00 90 AD |  if_e	jmp	#LR__1602
138d0     03 47 0E F2 | 	cmp	local17, #259 wz
138d4     84 00 90 AD |  if_e	jmp	#LR__1603
138d8     04 47 0E F2 | 	cmp	local17, #260 wz
138dc     8C 00 90 AD |  if_e	jmp	#LR__1604
138e0     05 47 0E F2 | 	cmp	local17, #261 wz
138e4     94 00 90 AD |  if_e	jmp	#LR__1605
138e8     06 47 0E F2 | 	cmp	local17, #262 wz
138ec     9C 00 90 AD |  if_e	jmp	#LR__1606
138f0     07 47 0E F2 | 	cmp	local17, #263 wz
138f4     A4 00 90 AD |  if_e	jmp	#LR__1607
138f8     08 47 0E F2 | 	cmp	local17, #264 wz
138fc     AC 00 90 AD |  if_e	jmp	#LR__1608
13900     09 47 0E F2 | 	cmp	local17, #265 wz
13904     B4 00 90 AD |  if_e	jmp	#LR__1609
13908     0A 47 0E F2 | 	cmp	local17, #266 wz
1390c     BC 00 90 AD |  if_e	jmp	#LR__1610
13910     0B 47 0E F2 | 	cmp	local17, #267 wz
13914     C4 00 90 AD |  if_e	jmp	#LR__1611
13918     D0 00 90 FD | 	jmp	#LR__1612
1391c                 | LR__1599
1391c     18 4E 05 F1 | 	add	fp, #24
13920     A7 18 68 FC | 	wrlong	#12, fp
13924     18 4E 85 F1 | 	sub	fp, #24
13928     CC 00 90 FD | 	jmp	#LR__1613
1392c                 | LR__1600
1392c     18 4E 05 F1 | 	add	fp, #24
13930     A7 18 68 FC | 	wrlong	#12, fp
13934     18 4E 85 F1 | 	sub	fp, #24
13938     BC 00 90 FD | 	jmp	#LR__1613
1393c                 | LR__1601
1393c     18 4E 05 F1 | 	add	fp, #24
13940     A7 02 68 FC | 	wrlong	#1, fp
13944     18 4E 85 F1 | 	sub	fp, #24
13948     AC 00 90 FD | 	jmp	#LR__1613
1394c                 | LR__1602
1394c     18 4E 05 F1 | 	add	fp, #24
13950     A7 02 68 FC | 	wrlong	#1, fp
13954     18 4E 85 F1 | 	sub	fp, #24
13958     9C 00 90 FD | 	jmp	#LR__1613
1395c                 | LR__1603
1395c     18 4E 05 F1 | 	add	fp, #24
13960     A7 04 68 FC | 	wrlong	#2, fp
13964     18 4E 85 F1 | 	sub	fp, #24
13968     8C 00 90 FD | 	jmp	#LR__1613
1396c                 | LR__1604
1396c     18 4E 05 F1 | 	add	fp, #24
13970     A7 04 68 FC | 	wrlong	#2, fp
13974     18 4E 85 F1 | 	sub	fp, #24
13978     7C 00 90 FD | 	jmp	#LR__1613
1397c                 | LR__1605
1397c     18 4E 05 F1 | 	add	fp, #24
13980     A7 08 68 FC | 	wrlong	#4, fp
13984     18 4E 85 F1 | 	sub	fp, #24
13988     6C 00 90 FD | 	jmp	#LR__1613
1398c                 | LR__1606
1398c     18 4E 05 F1 | 	add	fp, #24
13990     A7 08 68 FC | 	wrlong	#4, fp
13994     18 4E 85 F1 | 	sub	fp, #24
13998     5C 00 90 FD | 	jmp	#LR__1613
1399c                 | LR__1607
1399c     18 4E 05 F1 | 	add	fp, #24
139a0     A7 10 68 FC | 	wrlong	#8, fp
139a4     18 4E 85 F1 | 	sub	fp, #24
139a8     4C 00 90 FD | 	jmp	#LR__1613
139ac                 | LR__1608
139ac     18 4E 05 F1 | 	add	fp, #24
139b0     A7 10 68 FC | 	wrlong	#8, fp
139b4     18 4E 85 F1 | 	sub	fp, #24
139b8     3C 00 90 FD | 	jmp	#LR__1613
139bc                 | LR__1609
139bc     18 4E 05 F1 | 	add	fp, #24
139c0     A7 0C 68 FC | 	wrlong	#6, fp
139c4     18 4E 85 F1 | 	sub	fp, #24
139c8     2C 00 90 FD | 	jmp	#LR__1613
139cc                 | LR__1610
139cc     18 4E 05 F1 | 	add	fp, #24
139d0     A7 10 68 FC | 	wrlong	#8, fp
139d4     18 4E 85 F1 | 	sub	fp, #24
139d8     1C 00 90 FD | 	jmp	#LR__1613
139dc                 | LR__1611
139dc     18 4E 05 F1 | 	add	fp, #24
139e0     A7 0A 68 FC | 	wrlong	#5, fp
139e4     18 4E 85 F1 | 	sub	fp, #24
139e8     0C 00 90 FD | 	jmp	#LR__1613
139ec                 | LR__1612
139ec     18 4E 05 F1 | 	add	fp, #24
139f0     A7 18 68 FC | 	wrlong	#12, fp
139f4     18 4E 85 F1 | 	sub	fp, #24
139f8                 | LR__1613
139f8                 | '   if esize=12 andalso t1.result.uresult<$80000 then
139f8     18 4E 05 F1 | 	add	fp, #24
139fc     A7 44 02 FB | 	rdlong	local16, fp
13a00     18 4E 85 F1 | 	sub	fp, #24
13a04     0C 44 0E F2 | 	cmp	local16, #12 wz
13a08     74 01 90 5D |  if_ne	jmp	#LR__1618
13a0c     1C 4E 05 F1 | 	add	fp, #28
13a10     A7 32 02 FB | 	rdlong	local07, fp
13a14     1C 4E 85 F1 | 	sub	fp, #28
13a18     00 04 00 FF 
13a1c     00 32 16 F2 | 	cmp	local07, ##524288 wc
13a20     5C 01 90 3D |  if_ae	jmp	#LR__1618
13a24                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
13a24     52 00 00 FF 
13a28     10 E5 05 F1 | 	add	objptr, ##42256
13a2c     F2 44 02 FB | 	rdlong	local16, objptr
13a30     52 00 00 FF 
13a34     10 E5 85 F1 | 	sub	objptr, ##42256
13a38     1C 44 0E F2 | 	cmp	local16, #28 wz
13a3c     38 00 90 5D |  if_ne	jmp	#LR__1614
13a40     1C 4E 05 F1 | 	add	fp, #28
13a44     A7 44 02 FB | 	rdlong	local16, fp
13a48     14 4F 05 F1 | 	add	fp, #276
13a4c     A7 32 02 FB | 	rdlong	local07, fp
13a50     19 35 02 F6 | 	mov	local08, local07
13a54     02 34 66 F0 | 	shl	local08, #2
13a58     04 4F 85 F1 | 	sub	fp, #260
13a5c     A7 36 02 F6 | 	mov	local09, fp
13a60     A7 34 02 F1 | 	add	local08, fp
13a64     1A 13 02 FB | 	rdlong	arg01, local08
13a68     00 14 06 F6 | 	mov	arg02, #0
13a6c     2C 4E 85 F1 | 	sub	fp, #44
13a70     94 59 B1 FD | 	call	#__system____builtin_atoi
13a74     22 FB 61 FC | 	wrlong	result1, local16
13a78                 | LR__1614
13a78                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
13a78     52 00 00 FF 
13a7c     10 E5 05 F1 | 	add	objptr, ##42256
13a80     F2 44 02 FB | 	rdlong	local16, objptr
13a84     52 00 00 FF 
13a88     10 E5 85 F1 | 	sub	objptr, ##42256
13a8c     1D 44 0E F2 | 	cmp	local16, #29 wz
13a90     38 00 90 5D |  if_ne	jmp	#LR__1615
13a94     1C 4E 05 F1 | 	add	fp, #28
13a98     A7 44 02 FB | 	rdlong	local16, fp
13a9c     14 4F 05 F1 | 	add	fp, #276
13aa0     A7 32 02 FB | 	rdlong	local07, fp
13aa4     19 35 02 F6 | 	mov	local08, local07
13aa8     02 34 66 F0 | 	shl	local08, #2
13aac     04 4F 85 F1 | 	sub	fp, #260
13ab0     A7 36 02 F6 | 	mov	local09, fp
13ab4     A7 34 02 F1 | 	add	local08, fp
13ab8     1A 13 02 FB | 	rdlong	arg01, local08
13abc     00 14 06 F6 | 	mov	arg02, #0
13ac0     2C 4E 85 F1 | 	sub	fp, #44
13ac4     40 59 B1 FD | 	call	#__system____builtin_atoi
13ac8     22 FB 61 FC | 	wrlong	result1, local16
13acc                 | LR__1615
13acc                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
13acc     52 00 00 FF 
13ad0     10 E5 05 F1 | 	add	objptr, ##42256
13ad4     F2 44 02 FB | 	rdlong	local16, objptr
13ad8     52 00 00 FF 
13adc     10 E5 85 F1 | 	sub	objptr, ##42256
13ae0     1E 44 0E F2 | 	cmp	local16, #30 wz
13ae4     3C 00 90 5D |  if_ne	jmp	#LR__1616
13ae8     30 4F 05 F1 | 	add	fp, #304
13aec     A7 32 02 FB | 	rdlong	local07, fp
13af0     02 32 66 F0 | 	shl	local07, #2
13af4     04 4F 85 F1 | 	sub	fp, #260
13af8     A7 34 02 F6 | 	mov	local08, fp
13afc     A7 32 02 F1 | 	add	local07, fp
13b00     19 13 02 FB | 	rdlong	arg01, local07
13b04     2C 4E 85 F1 | 	sub	fp, #44
13b08     90 5A B1 FD | 	call	#__system____builtin_atof
13b0c     28 4E 05 F1 | 	add	fp, #40
13b10     A7 FA 61 FC | 	wrlong	result1, fp
13b14     0C 4E 85 F1 | 	sub	fp, #12
13b18     A7 44 02 FB | 	rdlong	local16, fp
13b1c     1C 4E 85 F1 | 	sub	fp, #28
13b20     22 FB 61 FC | 	wrlong	result1, local16
13b24                 | LR__1616
13b24                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
13b24     52 00 00 FF 
13b28     10 E5 05 F1 | 	add	objptr, ##42256
13b2c     F2 44 02 FB | 	rdlong	local16, objptr
13b30     52 00 00 FF 
13b34     10 E5 85 F1 | 	sub	objptr, ##42256
13b38     2B 44 0E F2 | 	cmp	local16, #43 wz
13b3c     18 00 90 5D |  if_ne	jmp	#LR__1617
13b40     1C 4E 05 F1 | 	add	fp, #28
13b44     A7 12 02 FB | 	rdlong	arg01, fp
13b48     0C 4E 85 F1 | 	sub	fp, #12
13b4c     A7 14 02 FB | 	rdlong	arg02, fp
13b50     10 4E 85 F1 | 	sub	fp, #16
13b54     09 15 62 FC | 	wrlong	arg02, arg01
13b58                 | LR__1617
13b58     1C 4E 05 F1 | 	add	fp, #28
13b5c     A7 12 02 FB | 	rdlong	arg01, fp
13b60     1C 4E 85 F1 | 	sub	fp, #28
13b64     08 12 06 F1 | 	add	arg01, #8
13b68     52 00 00 FF 
13b6c     10 E5 05 F1 | 	add	objptr, ##42256
13b70     F2 14 02 FB | 	rdlong	arg02, objptr
13b74     52 00 00 FF 
13b78     10 E5 85 F1 | 	sub	objptr, ##42256
13b7c     09 15 62 FC | 	wrlong	arg02, arg01
13b80                 | LR__1618
13b80                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
13b80     18 4E 05 F1 | 	add	fp, #24
13b84     A7 44 02 FB | 	rdlong	local16, fp
13b88     18 4E 85 F1 | 	sub	fp, #24
13b8c     0C 44 0E F2 | 	cmp	local16, #12 wz
13b90     94 01 90 5D |  if_ne	jmp	#LR__1623
13b94     1C 4E 05 F1 | 	add	fp, #28
13b98     A7 32 02 FB | 	rdlong	local07, fp
13b9c     1C 4E 85 F1 | 	sub	fp, #28
13ba0     00 04 00 FF 
13ba4     00 32 16 F2 | 	cmp	local07, ##524288 wc
13ba8     7C 01 90 CD |  if_b	jmp	#LR__1623
13bac                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
13bac     52 00 00 FF 
13bb0     10 E5 05 F1 | 	add	objptr, ##42256
13bb4     F2 44 02 FB | 	rdlong	local16, objptr
13bb8     52 00 00 FF 
13bbc     10 E5 85 F1 | 	sub	objptr, ##42256
13bc0     1C 44 0E F2 | 	cmp	local16, #28 wz
13bc4     40 00 90 5D |  if_ne	jmp	#LR__1619
13bc8     1C 4E 05 F1 | 	add	fp, #28
13bcc     A7 44 02 FB | 	rdlong	local16, fp
13bd0     14 4F 05 F1 | 	add	fp, #276
13bd4     A7 32 02 FB | 	rdlong	local07, fp
13bd8     19 35 02 F6 | 	mov	local08, local07
13bdc     02 34 66 F0 | 	shl	local08, #2
13be0     04 4F 85 F1 | 	sub	fp, #260
13be4     A7 36 02 F6 | 	mov	local09, fp
13be8     A7 34 02 F1 | 	add	local08, fp
13bec     1A 13 02 FB | 	rdlong	arg01, local08
13bf0     00 14 06 F6 | 	mov	arg02, #0
13bf4     2C 4E 85 F1 | 	sub	fp, #44
13bf8     0C 58 B1 FD | 	call	#__system____builtin_atoi
13bfc     FD 14 02 F6 | 	mov	arg02, result1
13c00     22 13 02 F6 | 	mov	arg01, local16
13c04     C4 EA B0 FD | 	call	#_pslpoke
13c08                 | LR__1619
13c08                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
13c08     52 00 00 FF 
13c0c     10 E5 05 F1 | 	add	objptr, ##42256
13c10     F2 44 02 FB | 	rdlong	local16, objptr
13c14     52 00 00 FF 
13c18     10 E5 85 F1 | 	sub	objptr, ##42256
13c1c     1D 44 0E F2 | 	cmp	local16, #29 wz
13c20     40 00 90 5D |  if_ne	jmp	#LR__1620
13c24     1C 4E 05 F1 | 	add	fp, #28
13c28     A7 44 02 FB | 	rdlong	local16, fp
13c2c     14 4F 05 F1 | 	add	fp, #276
13c30     A7 32 02 FB | 	rdlong	local07, fp
13c34     19 35 02 F6 | 	mov	local08, local07
13c38     02 34 66 F0 | 	shl	local08, #2
13c3c     04 4F 85 F1 | 	sub	fp, #260
13c40     A7 36 02 F6 | 	mov	local09, fp
13c44     A7 34 02 F1 | 	add	local08, fp
13c48     1A 13 02 FB | 	rdlong	arg01, local08
13c4c     00 14 06 F6 | 	mov	arg02, #0
13c50     2C 4E 85 F1 | 	sub	fp, #44
13c54     B0 57 B1 FD | 	call	#__system____builtin_atoi
13c58     FD 14 02 F6 | 	mov	arg02, result1
13c5c     22 13 02 F6 | 	mov	arg01, local16
13c60     68 EA B0 FD | 	call	#_pslpoke
13c64                 | LR__1620
13c64                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13c64     52 00 00 FF 
13c68     10 E5 05 F1 | 	add	objptr, ##42256
13c6c     F2 44 02 FB | 	rdlong	local16, objptr
13c70     52 00 00 FF 
13c74     10 E5 85 F1 | 	sub	objptr, ##42256
13c78     1E 44 0E F2 | 	cmp	local16, #30 wz
13c7c     4C 00 90 5D |  if_ne	jmp	#LR__1621
13c80     30 4F 05 F1 | 	add	fp, #304
13c84     A7 32 02 FB | 	rdlong	local07, fp
13c88     02 32 66 F0 | 	shl	local07, #2
13c8c     04 4F 85 F1 | 	sub	fp, #260
13c90     A7 34 02 F6 | 	mov	local08, fp
13c94     A7 32 02 F1 | 	add	local07, fp
13c98     19 13 02 FB | 	rdlong	arg01, local07
13c9c     2C 4E 85 F1 | 	sub	fp, #44
13ca0     F8 58 B1 FD | 	call	#__system____builtin_atof
13ca4     28 4E 05 F1 | 	add	fp, #40
13ca8     A7 FA 61 FC | 	wrlong	result1, fp
13cac     0C 4E 85 F1 | 	sub	fp, #12
13cb0     A7 44 02 FB | 	rdlong	local16, fp
13cb4     0C 4E 05 F1 | 	add	fp, #12
13cb8     A7 12 02 F6 | 	mov	arg01, fp
13cbc     28 4E 85 F1 | 	sub	fp, #40
13cc0     09 15 02 FB | 	rdlong	arg02, arg01
13cc4     22 13 02 F6 | 	mov	arg01, local16
13cc8     00 EA B0 FD | 	call	#_pslpoke
13ccc                 | LR__1621
13ccc                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
13ccc     52 00 00 FF 
13cd0     10 E5 05 F1 | 	add	objptr, ##42256
13cd4     F2 44 02 FB | 	rdlong	local16, objptr
13cd8     52 00 00 FF 
13cdc     10 E5 85 F1 | 	sub	objptr, ##42256
13ce0     2B 44 0E F2 | 	cmp	local16, #43 wz
13ce4     18 00 90 5D |  if_ne	jmp	#LR__1622
13ce8     1C 4E 05 F1 | 	add	fp, #28
13cec     A7 12 02 FB | 	rdlong	arg01, fp
13cf0     0C 4E 85 F1 | 	sub	fp, #12
13cf4     A7 14 02 FB | 	rdlong	arg02, fp
13cf8     10 4E 85 F1 | 	sub	fp, #16
13cfc     CC E9 B0 FD | 	call	#_pslpoke
13d00                 | LR__1622
13d00     1C 4E 05 F1 | 	add	fp, #28
13d04     A7 12 02 FB | 	rdlong	arg01, fp
13d08     1C 4E 85 F1 | 	sub	fp, #28
13d0c     08 12 06 F1 | 	add	arg01, #8
13d10     52 00 00 FF 
13d14     10 E5 05 F1 | 	add	objptr, ##42256
13d18     F2 14 02 FB | 	rdlong	arg02, objptr
13d1c     52 00 00 FF 
13d20     10 E5 85 F1 | 	sub	objptr, ##42256
13d24     A4 E9 B0 FD | 	call	#_pslpoke
13d28                 | LR__1623
13d28                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
13d28     18 4E 05 F1 | 	add	fp, #24
13d2c     A7 44 02 FB | 	rdlong	local16, fp
13d30     18 4E 85 F1 | 	sub	fp, #24
13d34     05 44 0E F2 | 	cmp	local16, #5 wz
13d38     52 00 00 AF 
13d3c     10 E5 05 A1 |  if_e	add	objptr, ##42256
13d40     F2 42 02 AB |  if_e	rdlong	local15, objptr
13d44     52 00 00 AF 
13d48     10 E5 85 A1 |  if_e	sub	objptr, ##42256
13d4c     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
13d50     18 00 90 5D |  if_ne	jmp	#LR__1624
13d54     1C 4E 05 F1 | 	add	fp, #28
13d58     A7 12 02 FB | 	rdlong	arg01, fp
13d5c     0C 4E 85 F1 | 	sub	fp, #12
13d60     A7 14 02 FB | 	rdlong	arg02, fp
13d64     10 4E 85 F1 | 	sub	fp, #16
13d68     60 E9 B0 FD | 	call	#_pslpoke
13d6c                 | LR__1624
13d6c                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
13d6c     18 4E 05 F1 | 	add	fp, #24
13d70     A7 44 02 FB | 	rdlong	local16, fp
13d74     18 4E 85 F1 | 	sub	fp, #24
13d78     04 44 0E F2 | 	cmp	local16, #4 wz
13d7c     54 00 90 5D |  if_ne	jmp	#LR__1625
13d80     52 00 00 FF 
13d84     10 E5 05 F1 | 	add	objptr, ##42256
13d88     F2 42 02 FB | 	rdlong	local15, objptr
13d8c     52 00 00 FF 
13d90     10 E5 85 F1 | 	sub	objptr, ##42256
13d94     2B 42 0E F2 | 	cmp	local15, #43 wz
13d98     38 00 90 AD |  if_e	jmp	#LR__1625
13d9c     1C 4E 05 F1 | 	add	fp, #28
13da0     A7 44 02 FB | 	rdlong	local16, fp
13da4     14 4F 05 F1 | 	add	fp, #276
13da8     A7 34 02 FB | 	rdlong	local08, fp
13dac     02 34 66 F0 | 	shl	local08, #2
13db0     04 4F 85 F1 | 	sub	fp, #260
13db4     A7 34 02 F1 | 	add	local08, fp
13db8     1A 13 02 FB | 	rdlong	arg01, local08
13dbc     00 14 06 F6 | 	mov	arg02, #0
13dc0     2C 4E 85 F1 | 	sub	fp, #44
13dc4     40 56 B1 FD | 	call	#__system____builtin_atoi
13dc8     FD 14 02 F6 | 	mov	arg02, result1
13dcc     22 13 02 F6 | 	mov	arg01, local16
13dd0     F8 E8 B0 FD | 	call	#_pslpoke
13dd4                 | LR__1625
13dd4                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
13dd4     18 4E 05 F1 | 	add	fp, #24
13dd8     A7 44 02 FB | 	rdlong	local16, fp
13ddc     18 4E 85 F1 | 	sub	fp, #24
13de0     02 44 0E F2 | 	cmp	local16, #2 wz
13de4     54 00 90 5D |  if_ne	jmp	#LR__1626
13de8     52 00 00 FF 
13dec     10 E5 05 F1 | 	add	objptr, ##42256
13df0     F2 42 02 FB | 	rdlong	local15, objptr
13df4     52 00 00 FF 
13df8     10 E5 85 F1 | 	sub	objptr, ##42256
13dfc     2B 42 0E F2 | 	cmp	local15, #43 wz
13e00     38 00 90 AD |  if_e	jmp	#LR__1626
13e04     1C 4E 05 F1 | 	add	fp, #28
13e08     A7 44 02 FB | 	rdlong	local16, fp
13e0c     14 4F 05 F1 | 	add	fp, #276
13e10     A7 34 02 FB | 	rdlong	local08, fp
13e14     02 34 66 F0 | 	shl	local08, #2
13e18     04 4F 85 F1 | 	sub	fp, #260
13e1c     A7 34 02 F1 | 	add	local08, fp
13e20     1A 13 02 FB | 	rdlong	arg01, local08
13e24     00 14 06 F6 | 	mov	arg02, #0
13e28     2C 4E 85 F1 | 	sub	fp, #44
13e2c     D8 55 B1 FD | 	call	#__system____builtin_atoi
13e30     FD 14 02 F6 | 	mov	arg02, result1
13e34     22 13 02 F6 | 	mov	arg01, local16
13e38     D8 E8 B0 FD | 	call	#_psdpoke
13e3c                 | LR__1626
13e3c                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
13e3c     18 4E 05 F1 | 	add	fp, #24
13e40     A7 44 02 FB | 	rdlong	local16, fp
13e44     18 4E 85 F1 | 	sub	fp, #24
13e48     01 44 0E F2 | 	cmp	local16, #1 wz
13e4c     54 00 90 5D |  if_ne	jmp	#LR__1627
13e50     52 00 00 FF 
13e54     10 E5 05 F1 | 	add	objptr, ##42256
13e58     F2 42 02 FB | 	rdlong	local15, objptr
13e5c     52 00 00 FF 
13e60     10 E5 85 F1 | 	sub	objptr, ##42256
13e64     2B 42 0E F2 | 	cmp	local15, #43 wz
13e68     38 00 90 AD |  if_e	jmp	#LR__1627
13e6c     1C 4E 05 F1 | 	add	fp, #28
13e70     A7 44 02 FB | 	rdlong	local16, fp
13e74     14 4F 05 F1 | 	add	fp, #276
13e78     A7 34 02 FB | 	rdlong	local08, fp
13e7c     02 34 66 F0 | 	shl	local08, #2
13e80     04 4F 85 F1 | 	sub	fp, #260
13e84     A7 34 02 F1 | 	add	local08, fp
13e88     1A 13 02 FB | 	rdlong	arg01, local08
13e8c     00 14 06 F6 | 	mov	arg02, #0
13e90     2C 4E 85 F1 | 	sub	fp, #44
13e94     70 55 B1 FD | 	call	#__system____builtin_atoi
13e98     FD 14 02 F6 | 	mov	arg02, result1
13e9c     22 13 02 F6 | 	mov	arg01, local16
13ea0     B8 E8 B0 FD | 	call	#_pspoke
13ea4                 | LR__1627
13ea4                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13ea4     18 4E 05 F1 | 	add	fp, #24
13ea8     A7 44 02 FB | 	rdlong	local16, fp
13eac     18 4E 85 F1 | 	sub	fp, #24
13eb0     06 44 0E F2 | 	cmp	local16, #6 wz
13eb4     64 00 90 5D |  if_ne	jmp	#LR__1628
13eb8     52 00 00 FF 
13ebc     10 E5 05 F1 | 	add	objptr, ##42256
13ec0     F2 42 02 FB | 	rdlong	local15, objptr
13ec4     52 00 00 FF 
13ec8     10 E5 85 F1 | 	sub	objptr, ##42256
13ecc     2B 42 0E F2 | 	cmp	local15, #43 wz
13ed0     48 00 90 AD |  if_e	jmp	#LR__1628
13ed4     30 4F 05 F1 | 	add	fp, #304
13ed8     A7 32 02 FB | 	rdlong	local07, fp
13edc     02 32 66 F0 | 	shl	local07, #2
13ee0     04 4F 85 F1 | 	sub	fp, #260
13ee4     A7 32 02 F1 | 	add	local07, fp
13ee8     19 13 02 FB | 	rdlong	arg01, local07
13eec     2C 4E 85 F1 | 	sub	fp, #44
13ef0     A8 56 B1 FD | 	call	#__system____builtin_atof
13ef4     28 4E 05 F1 | 	add	fp, #40
13ef8     A7 FA 61 FC | 	wrlong	result1, fp
13efc     0C 4E 85 F1 | 	sub	fp, #12
13f00     A7 44 02 FB | 	rdlong	local16, fp
13f04     0C 4E 05 F1 | 	add	fp, #12
13f08     A7 12 02 F6 | 	mov	arg01, fp
13f0c     28 4E 85 F1 | 	sub	fp, #40
13f10     09 15 02 FB | 	rdlong	arg02, arg01
13f14     22 13 02 F6 | 	mov	arg01, local16
13f18     B0 E7 B0 FD | 	call	#_pslpoke
13f1c                 | LR__1628
13f1c     30 4F 05 F1 | 	add	fp, #304
13f20     A7 42 02 FB | 	rdlong	local15, fp
13f24     01 42 06 F1 | 	add	local15, #1
13f28     A7 42 62 FC | 	wrlong	local15, fp
13f2c     30 4F 85 F1 | 	sub	fp, #304
13f30     E4 F6 9F FD | 	jmp	#LR__1593
13f34                 | LR__1629
13f34                 | LR__1630
13f34     A7 F0 03 F6 | 	mov	ptra, fp
13f38     B2 00 A0 FD | 	call	#popregs_
13f3c                 | _do_input_ret
13f3c     2D 00 64 FD | 	ret
13f40                 | 
13f40                 | ' 
13f40                 | ' ' ----------------  left$
13f40                 | ' 
13f40                 | ' sub do_left
13f40                 | _do_left
13f40     00 4A 05 F6 | 	mov	COUNT_, #0
13f44     A8 00 A0 FD | 	call	#pushregs_
13f48     14 F0 07 F1 | 	add	ptra, #20
13f4c     4A 00 00 FF 
13f50     80 E4 05 F1 | 	add	objptr, ##38016
13f54     F2 16 02 FB | 	rdlong	arg03, objptr
13f58     0B 15 02 F6 | 	mov	arg02, arg03
13f5c     01 14 66 F0 | 	shl	arg02, #1
13f60     0B 15 02 F1 | 	add	arg02, arg03
13f64     02 14 66 F0 | 	shl	arg02, #2
13f68     03 00 00 FF 
13f6c     04 E4 85 F1 | 	sub	objptr, ##1540
13f70     F2 14 02 F1 | 	add	arg02, objptr
13f74     0A 17 02 FB | 	rdlong	arg03, arg02
13f78     0C 4E 05 F1 | 	add	fp, #12
13f7c     A7 16 62 FC | 	wrlong	arg03, fp
13f80                 | ' 
13f80                 | ' numpar=compiledline(lineptr_e).result.uresult
13f80                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
13f80     0C 4E 85 F1 | 	sub	fp, #12
13f84     02 16 0E F2 | 	cmp	arg03, #2 wz
13f88     47 00 00 FF 
13f8c     7C E4 85 F1 | 	sub	objptr, ##36476
13f90     40 00 90 AD |  if_e	jmp	#LR__1640
13f94     00 12 06 F6 | 	mov	arg01, #0
13f98     A4 7C B1 FD | 	call	#__system___getiolock_0602
13f9c     FD 12 02 F6 | 	mov	arg01, result1
13fa0     74 1F B1 FD | 	call	#__system___lockmem
13fa4     B1 01 00 FF 
13fa8     B3 15 06 F6 | 	mov	arg02, ##@LR__5871
13fac     00 12 06 F6 | 	mov	arg01, #0
13fb0     00 16 06 F6 | 	mov	arg03, #0
13fb4     54 2C B1 FD | 	call	#__system___basic_print_string
13fb8     00 12 06 F6 | 	mov	arg01, #0
13fbc     80 7C B1 FD | 	call	#__system___getiolock_0602
13fc0     FD 00 68 FC | 	wrlong	#0, result1
13fc4     27 12 06 F6 | 	mov	arg01, #39
13fc8     00 14 06 F6 | 	mov	arg02, #0
13fcc     5C E5 B0 FD | 	call	#_printerror
13fd0     EC 00 90 FD | 	jmp	#LR__1643
13fd4                 | LR__1640
13fd4     08 93 BF FD | 	call	#_pop
13fd8     FF 16 02 F6 | 	mov	arg03, result3
13fdc     A7 FA 61 FC | 	wrlong	result1, fp
13fe0     04 4E 05 F1 | 	add	fp, #4
13fe4     A7 FC 61 FC | 	wrlong	result2, fp
13fe8     04 4E 05 F1 | 	add	fp, #4
13fec     A7 16 62 FC | 	wrlong	arg03, fp
13ff0     08 4E 85 F1 | 	sub	fp, #8
13ff4     A7 12 02 F6 | 	mov	arg01, fp
13ff8     C8 94 BF FD | 	call	#_converttoint
13ffc     FD 16 02 F6 | 	mov	arg03, result1
14000     10 4E 05 F1 | 	add	fp, #16
14004     A7 16 62 FC | 	wrlong	arg03, fp
14008     10 4E 85 F1 | 	sub	fp, #16
1400c     D0 92 BF FD | 	call	#_pop
14010     FF 16 02 F6 | 	mov	arg03, result3
14014     A7 FA 61 FC | 	wrlong	result1, fp
14018     04 4E 05 F1 | 	add	fp, #4
1401c     A7 FC 61 FC | 	wrlong	result2, fp
14020     04 4E 05 F1 | 	add	fp, #4
14024     A7 16 62 FC | 	wrlong	arg03, fp
14028                 | ' t1=pop() : arg=converttoint(t1)
14028                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14028     08 4E 85 F1 | 	sub	fp, #8
1402c     2B 16 0E F2 | 	cmp	arg03, #43 wz
14030     18 00 90 5D |  if_ne	jmp	#LR__1641
14034     A7 12 02 FB | 	rdlong	arg01, fp
14038     1C 94 BF FD | 	call	#_convertstring
1403c     A7 FA 61 FC | 	wrlong	result1, fp
14040     08 4E 05 F1 | 	add	fp, #8
14044     A7 3E 68 FC | 	wrlong	#31, fp
14048     08 4E 85 F1 | 	sub	fp, #8
1404c                 | LR__1641
1404c                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
1404c     08 4E 05 F1 | 	add	fp, #8
14050     A7 16 02 FB | 	rdlong	arg03, fp
14054     08 4E 85 F1 | 	sub	fp, #8
14058     1F 16 0E F2 | 	cmp	arg03, #31 wz
1405c     40 00 90 AD |  if_e	jmp	#LR__1642
14060     00 12 06 F6 | 	mov	arg01, #0
14064     D8 7B B1 FD | 	call	#__system___getiolock_0602
14068     FD 12 02 F6 | 	mov	arg01, result1
1406c     A8 1E B1 FD | 	call	#__system___lockmem
14070     B1 01 00 FF 
14074     BB 15 06 F6 | 	mov	arg02, ##@LR__5872
14078     00 12 06 F6 | 	mov	arg01, #0
1407c     00 16 06 F6 | 	mov	arg03, #0
14080     88 2B B1 FD | 	call	#__system___basic_print_string
14084     00 12 06 F6 | 	mov	arg01, #0
14088     B4 7B B1 FD | 	call	#__system___getiolock_0602
1408c     FD 00 68 FC | 	wrlong	#0, result1
14090     0F 12 06 F6 | 	mov	arg01, #15
14094     00 14 06 F6 | 	mov	arg02, #0
14098     90 E4 B0 FD | 	call	#_printerror
1409c     20 00 90 FD | 	jmp	#LR__1643
140a0                 | LR__1642
140a0     A7 12 02 FB | 	rdlong	arg01, fp
140a4     10 4E 05 F1 | 	add	fp, #16
140a8     A7 14 02 FB | 	rdlong	arg02, fp
140ac     10 4E 85 F1 | 	sub	fp, #16
140b0     E0 3E B1 FD | 	call	#__system__Left_S
140b4     A7 FA 61 FC | 	wrlong	result1, fp
140b8     A7 12 02 F6 | 	mov	arg01, fp
140bc     B8 92 BF FD | 	call	#_push
140c0                 | LR__1643
140c0     A7 F0 03 F6 | 	mov	ptra, fp
140c4     B2 00 A0 FD | 	call	#popregs_
140c8                 | _do_left_ret
140c8     2D 00 64 FD | 	ret
140cc                 | 
140cc                 | ' 
140cc                 | ' ' ----------------  len
140cc                 | ' 
140cc                 | ' sub do_len
140cc                 | _do_len
140cc     02 4A 05 F6 | 	mov	COUNT_, #2
140d0     A8 00 A0 FD | 	call	#pushregs_
140d4     14 F0 07 F1 | 	add	ptra, #20
140d8     4A 00 00 FF 
140dc     80 E4 05 F1 | 	add	objptr, ##38016
140e0     F2 26 02 FB | 	rdlong	local01, objptr
140e4     13 17 02 F6 | 	mov	arg03, local01
140e8     01 16 66 F0 | 	shl	arg03, #1
140ec     13 17 02 F1 | 	add	arg03, local01
140f0     02 16 66 F0 | 	shl	arg03, #2
140f4     03 00 00 FF 
140f8     04 E4 85 F1 | 	sub	objptr, ##1540
140fc     F2 16 02 F1 | 	add	arg03, objptr
14100     0B 17 02 FB | 	rdlong	arg03, arg03
14104     0C 4E 05 F1 | 	add	fp, #12
14108     A7 16 62 FC | 	wrlong	arg03, fp
1410c                 | ' 
1410c                 | ' numpar=compiledline(lineptr_e).result.uresult
1410c                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
1410c     0C 4E 85 F1 | 	sub	fp, #12
14110     02 16 16 F2 | 	cmp	arg03, #2 wc
14114     47 00 00 FF 
14118     7C E4 85 F1 | 	sub	objptr, ##36476
1411c     0C 4E 05 C1 |  if_b	add	fp, #12
14120     A7 26 0A CB |  if_b	rdlong	local01, fp wz
14124     0C 4E 85 C1 |  if_b	sub	fp, #12
14128     40 00 90 4D |  if_c_and_nz	jmp	#LR__1650
1412c     00 12 06 F6 | 	mov	arg01, #0
14130     0C 7B B1 FD | 	call	#__system___getiolock_0602
14134     FD 12 02 F6 | 	mov	arg01, result1
14138     DC 1D B1 FD | 	call	#__system___lockmem
1413c     B1 01 00 FF 
14140     C3 15 06 F6 | 	mov	arg02, ##@LR__5873
14144     00 12 06 F6 | 	mov	arg01, #0
14148     00 16 06 F6 | 	mov	arg03, #0
1414c     BC 2A B1 FD | 	call	#__system___basic_print_string
14150     00 12 06 F6 | 	mov	arg01, #0
14154     E8 7A B1 FD | 	call	#__system___getiolock_0602
14158     FD 00 68 FC | 	wrlong	#0, result1
1415c     27 12 06 F6 | 	mov	arg01, #39
14160     00 14 06 F6 | 	mov	arg02, #0
14164     C4 E3 B0 FD | 	call	#_printerror
14168     C8 00 90 FD | 	jmp	#LR__1655
1416c                 | LR__1650
1416c     70 91 BF FD | 	call	#_pop
14170     FF 16 02 F6 | 	mov	arg03, result3
14174     A7 FA 61 FC | 	wrlong	result1, fp
14178     04 4E 05 F1 | 	add	fp, #4
1417c     A7 FC 61 FC | 	wrlong	result2, fp
14180     04 4E 05 F1 | 	add	fp, #4
14184     A7 16 62 FC | 	wrlong	arg03, fp
14188                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14188     08 4E 85 F1 | 	sub	fp, #8
1418c     2B 16 0E F2 | 	cmp	arg03, #43 wz
14190     18 00 90 5D |  if_ne	jmp	#LR__1651
14194     A7 12 02 FB | 	rdlong	arg01, fp
14198     BC 92 BF FD | 	call	#_convertstring
1419c     A7 FA 61 FC | 	wrlong	result1, fp
141a0     08 4E 05 F1 | 	add	fp, #8
141a4     A7 3E 68 FC | 	wrlong	#31, fp
141a8     08 4E 85 F1 | 	sub	fp, #8
141ac                 | LR__1651
141ac                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
141ac     08 4E 05 F1 | 	add	fp, #8
141b0     A7 16 02 FB | 	rdlong	arg03, fp
141b4     08 4E 85 F1 | 	sub	fp, #8
141b8     1F 16 0E F2 | 	cmp	arg03, #31 wz
141bc     40 00 90 AD |  if_e	jmp	#LR__1652
141c0     00 12 06 F6 | 	mov	arg01, #0
141c4     78 7A B1 FD | 	call	#__system___getiolock_0602
141c8     FD 12 02 F6 | 	mov	arg01, result1
141cc     48 1D B1 FD | 	call	#__system___lockmem
141d0     B1 01 00 FF 
141d4     C9 15 06 F6 | 	mov	arg02, ##@LR__5874
141d8     00 12 06 F6 | 	mov	arg01, #0
141dc     00 16 06 F6 | 	mov	arg03, #0
141e0     28 2A B1 FD | 	call	#__system___basic_print_string
141e4     00 12 06 F6 | 	mov	arg01, #0
141e8     54 7A B1 FD | 	call	#__system___getiolock_0602
141ec     FD 00 68 FC | 	wrlong	#0, result1
141f0     0F 12 06 F6 | 	mov	arg01, #15
141f4     00 14 06 F6 | 	mov	arg02, #0
141f8     30 E3 B0 FD | 	call	#_printerror
141fc     34 00 90 FD | 	jmp	#LR__1655
14200                 | LR__1652
14200     A7 12 02 FB | 	rdlong	arg01, fp
14204     09 29 02 F6 | 	mov	local02, arg01
14208     97 06 48 FB | 	callpa	#(@LR__1654-@LR__1653)>>2,fcache_load_ptr_
1420c                 | LR__1653
1420c     14 FB C9 FA | 	rdbyte	result1, local02 wz
14210     01 28 06 51 |  if_ne	add	local02, #1
14214     F4 FF 9F 5D |  if_ne	jmp	#LR__1653
14218                 | LR__1654
14218     09 29 82 F1 | 	sub	local02, arg01
1421c     A7 28 62 FC | 	wrlong	local02, fp
14220     08 4E 05 F1 | 	add	fp, #8
14224     A7 38 68 FC | 	wrlong	#28, fp
14228     08 4E 85 F1 | 	sub	fp, #8
1422c     A7 12 02 F6 | 	mov	arg01, fp
14230     44 91 BF FD | 	call	#_push
14234                 | LR__1655
14234     A7 F0 03 F6 | 	mov	ptra, fp
14238     B2 00 A0 FD | 	call	#popregs_
1423c                 | _do_len_ret
1423c     2D 00 64 FD | 	ret
14240                 | 
14240                 | ' 
14240                 | ' ' ----------------  list
14240                 | ' 
14240                 | ' sub do_list
14240                 | _do_list
14240     02 4A 05 F6 | 	mov	COUNT_, #2
14244     A8 00 A0 FD | 	call	#pushregs_
14248     B8 F0 07 F1 | 	add	ptra, #184
1424c     04 4E 05 F1 | 	add	fp, #4
14250     A7 00 68 FC | 	wrlong	#0, fp
14254     04 4E 05 F1 | 	add	fp, #4
14258     FF FF BF FF 
1425c     A7 FE 6B FC | 	wrlong	##2147483647, fp
14260     08 4E 85 F1 | 	sub	fp, #8
14264     4A 00 00 FF 
14268     80 E4 05 F1 | 	add	objptr, ##38016
1426c     F2 26 02 FB | 	rdlong	local01, objptr
14270     13 17 02 F6 | 	mov	arg03, local01
14274     01 16 66 F0 | 	shl	arg03, #1
14278     13 17 02 F1 | 	add	arg03, local01
1427c     02 16 66 F0 | 	shl	arg03, #2
14280     03 00 00 FF 
14284     04 E4 85 F1 | 	sub	objptr, ##1540
14288     F2 16 02 F1 | 	add	arg03, objptr
1428c     0B 17 02 FB | 	rdlong	arg03, arg03
14290     A7 16 62 FC | 	wrlong	arg03, fp
14294                 | ' 
14294                 | ' startline=0 : endline=$7FFFFFFF
14294                 | ' numpar=compiledline(lineptr_e).result.uresult
14294                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
14294     01 16 0E F2 | 	cmp	arg03, #1 wz
14298     47 00 00 FF 
1429c     7C E4 85 F1 | 	sub	objptr, ##36476
142a0     3C 00 90 5D |  if_ne	jmp	#LR__1660
142a4     38 90 BF FD | 	call	#_pop
142a8     FF 26 02 F6 | 	mov	local01, result3
142ac     0C 4E 05 F1 | 	add	fp, #12
142b0     A7 FA 61 FC | 	wrlong	result1, fp
142b4     04 4E 05 F1 | 	add	fp, #4
142b8     A7 FC 61 FC | 	wrlong	result2, fp
142bc     04 4E 05 F1 | 	add	fp, #4
142c0     A7 26 62 FC | 	wrlong	local01, fp
142c4     08 4E 85 F1 | 	sub	fp, #8
142c8     A7 12 02 F6 | 	mov	arg01, fp
142cc     0C 4E 85 F1 | 	sub	fp, #12
142d0     F0 91 BF FD | 	call	#_converttoint
142d4     04 4E 05 F1 | 	add	fp, #4
142d8     A7 FA 61 FC | 	wrlong	result1, fp
142dc     04 4E 85 F1 | 	sub	fp, #4
142e0                 | LR__1660
142e0                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
142e0     A7 16 02 FB | 	rdlong	arg03, fp
142e4     02 16 0E F2 | 	cmp	arg03, #2 wz
142e8     7C 00 90 5D |  if_ne	jmp	#LR__1661
142ec     F0 8F BF FD | 	call	#_pop
142f0     FF 26 02 F6 | 	mov	local01, result3
142f4     0C 4E 05 F1 | 	add	fp, #12
142f8     A7 FA 61 FC | 	wrlong	result1, fp
142fc     04 4E 05 F1 | 	add	fp, #4
14300     A7 FC 61 FC | 	wrlong	result2, fp
14304     04 4E 05 F1 | 	add	fp, #4
14308     A7 26 62 FC | 	wrlong	local01, fp
1430c     08 4E 85 F1 | 	sub	fp, #8
14310     A7 12 02 F6 | 	mov	arg01, fp
14314     0C 4E 85 F1 | 	sub	fp, #12
14318     A8 91 BF FD | 	call	#_converttoint
1431c     FD 26 02 F6 | 	mov	local01, result1
14320     08 4E 05 F1 | 	add	fp, #8
14324     A7 26 62 FC | 	wrlong	local01, fp
14328     08 4E 85 F1 | 	sub	fp, #8
1432c     B0 8F BF FD | 	call	#_pop
14330     FF 26 02 F6 | 	mov	local01, result3
14334     0C 4E 05 F1 | 	add	fp, #12
14338     A7 FA 61 FC | 	wrlong	result1, fp
1433c     04 4E 05 F1 | 	add	fp, #4
14340     A7 FC 61 FC | 	wrlong	result2, fp
14344     04 4E 05 F1 | 	add	fp, #4
14348     A7 26 62 FC | 	wrlong	local01, fp
1434c     08 4E 85 F1 | 	sub	fp, #8
14350     A7 12 02 F6 | 	mov	arg01, fp
14354     0C 4E 85 F1 | 	sub	fp, #12
14358     68 91 BF FD | 	call	#_converttoint
1435c     04 4E 05 F1 | 	add	fp, #4
14360     A7 FA 61 FC | 	wrlong	result1, fp
14364     04 4E 85 F1 | 	sub	fp, #4
14368                 | LR__1661
14368                 | ' 
14368                 | ' 
14368                 | ' print
14368     00 12 06 F6 | 	mov	arg01, #0
1436c     D0 78 B1 FD | 	call	#__system___getiolock_0602
14370     FD 12 02 F6 | 	mov	arg01, result1
14374     A0 1B B1 FD | 	call	#__system___lockmem
14378     00 12 06 F6 | 	mov	arg01, #0
1437c     0A 14 06 F6 | 	mov	arg02, #10
14380     00 16 06 F6 | 	mov	arg03, #0
14384     2C 28 B1 FD | 	call	#__system___basic_print_char
14388     00 12 06 F6 | 	mov	arg01, #0
1438c     B0 78 B1 FD | 	call	#__system___getiolock_0602
14390     FD 00 68 FC | 	wrlong	#0, result1
14394     4A 00 00 FF 
14398     88 E4 05 F1 | 	add	objptr, ##38024
1439c     F2 28 02 FB | 	rdlong	local02, objptr
143a0     08 00 00 FF 
143a4     94 E4 05 F1 | 	add	objptr, ##4244
143a8     F2 28 62 FC | 	wrlong	local02, objptr
143ac     52 00 00 FF 
143b0     1C E5 85 F1 | 	sub	objptr, ##42268
143b4                 | ' do 
143b4                 | LR__1662
143b4     20 4E 05 F1 | 	add	fp, #32
143b8     A7 12 02 F6 | 	mov	arg01, fp
143bc     20 4E 85 F1 | 	sub	fp, #32
143c0     52 00 00 FF 
143c4     1C E5 05 F1 | 	add	objptr, ##42268
143c8     F2 14 02 FB | 	rdlong	arg02, objptr
143cc     18 16 06 F6 | 	mov	arg03, #24
143d0     47 00 00 FF 
143d4     50 E4 85 F1 | 	sub	objptr, ##36432
143d8     B4 0E B1 FD | 	call	#_psram_spin2_read1
143dc     0B 00 00 FF 
143e0     CC E4 85 F1 | 	sub	objptr, ##5836
143e4                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
143e4                 | '   
143e4                 | '   if header(0)<> $FFFFFFFF then
143e4     20 4E 05 F1 | 	add	fp, #32
143e8     A7 28 02 FB | 	rdlong	local02, fp
143ec     20 4E 85 F1 | 	sub	fp, #32
143f0     FF FF 7F FF 
143f4     FF 29 0E F2 | 	cmp	local02, ##-1 wz
143f8     A8 00 90 AD |  if_e	jmp	#LR__1664
143fc     38 4E 05 F1 | 	add	fp, #56
14400     3F 16 06 F6 | 	mov	arg03, #63
14404     28 16 62 FD | 	setq	arg03
14408     A7 00 68 FC | 	wrlong	#0, fp
1440c     A7 12 02 F6 | 	mov	arg01, fp
14410     10 4E 85 F1 | 	sub	fp, #16
14414     A7 14 02 FB | 	rdlong	arg02, fp
14418     04 4E 05 F1 | 	add	fp, #4
1441c     A7 16 02 FB | 	rdlong	arg03, fp
14420     2C 4E 85 F1 | 	sub	fp, #44
14424     0B 00 00 FF 
14428     CC E4 05 F1 | 	add	objptr, ##5836
1442c     60 0E B1 FD | 	call	#_psram_spin2_read1
14430     0B 00 00 FF 
14434     CC E4 85 F1 | 	sub	objptr, ##5836
14438                 | '     longfill(linebuf,0,64)
14438                 | '     psram.read1(varptr(linebuf),header(2),header(3))
14438                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
14438     20 4E 05 F1 | 	add	fp, #32
1443c     A7 28 02 FB | 	rdlong	local02, fp
14440     1C 4E 85 F1 | 	sub	fp, #28
14444     A7 26 02 FB | 	rdlong	local01, fp
14448     04 4E 85 F1 | 	sub	fp, #4
1444c     13 29 52 F2 | 	cmps	local02, local01 wc
14450     30 00 90 CD |  if_b	jmp	#LR__1663
14454     20 4E 05 F1 | 	add	fp, #32
14458     A7 28 02 FB | 	rdlong	local02, fp
1445c     18 4E 85 F1 | 	sub	fp, #24
14460     A7 16 02 FB | 	rdlong	arg03, fp
14464     08 4E 85 F1 | 	sub	fp, #8
14468     0B 29 5A F2 | 	cmps	local02, arg03 wcz
1446c     14 00 90 1D |  if_a	jmp	#LR__1663
14470     38 4E 05 F1 | 	add	fp, #56
14474     A7 12 02 F6 | 	mov	arg01, fp
14478     38 4E 85 F1 | 	sub	fp, #56
1447c                 | ' 
1447c                 | ' write(text)
1447c     D4 01 B1 FD | 	call	#_hg010b_spin2_write
14480                 | ' crlf
14480     D0 06 B1 FD | 	call	#_hg010b_spin2_crlf
14484                 | LR__1663
14484     34 4E 05 F1 | 	add	fp, #52
14488     A7 28 02 FB | 	rdlong	local02, fp
1448c     34 4E 85 F1 | 	sub	fp, #52
14490     52 00 00 FF 
14494     1C E5 05 F1 | 	add	objptr, ##42268
14498     F2 28 62 FC | 	wrlong	local02, objptr
1449c     52 00 00 FF 
144a0     1C E5 85 F1 | 	sub	objptr, ##42268
144a4                 | LR__1664
144a4     34 4E 05 F1 | 	add	fp, #52
144a8     A7 28 02 FB | 	rdlong	local02, fp
144ac     34 4E 85 F1 | 	sub	fp, #52
144b0     FF FF 3F FF 
144b4     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
144b8     20 4E 05 51 |  if_ne	add	fp, #32
144bc     A7 26 02 5B |  if_ne	rdlong	local01, fp
144c0     20 4E 85 51 |  if_ne	sub	fp, #32
144c4     FF FF 7F 5F 
144c8     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
144cc     E4 FE 9F 5D |  if_ne	jmp	#LR__1662
144d0     A7 F0 03 F6 | 	mov	ptra, fp
144d4     B2 00 A0 FD | 	call	#popregs_
144d8                 | _do_list_ret
144d8     2D 00 64 FD | 	ret
144dc                 | 
144dc                 | ' 
144dc                 | ' '-------------------- load
144dc                 | ' 
144dc                 | ' sub do_load(amode=0 as integer)  
144dc                 | _do_load
144dc     01 4A 05 F6 | 	mov	COUNT_, #1
144e0     A8 00 A0 FD | 	call	#pushregs_
144e4     AC F0 07 F1 | 	add	ptra, #172
144e8     A7 12 62 FC | 	wrlong	arg01, fp
144ec     52 00 00 FF 
144f0     D4 E4 05 F1 | 	add	objptr, ##42196
144f4     F2 02 68 FC | 	wrlong	#1, objptr
144f8     08 00 00 FF 
144fc     54 E4 85 F1 | 	sub	objptr, ##4180
14500     F2 14 02 FB | 	rdlong	arg02, objptr
14504     0A 13 02 F6 | 	mov	arg01, arg02
14508     01 12 66 F0 | 	shl	arg01, #1
1450c     0A 13 02 F1 | 	add	arg01, arg02
14510     02 12 66 F0 | 	shl	arg01, #2
14514     03 00 00 FF 
14518     04 E4 85 F1 | 	sub	objptr, ##1540
1451c     F2 12 02 F1 | 	add	arg01, objptr
14520     09 15 02 FB | 	rdlong	arg02, arg01
14524     1C 4E 05 F1 | 	add	fp, #28
14528     A7 14 62 FC | 	wrlong	arg02, fp
1452c     8C 4E 05 F1 | 	add	fp, #140
14530     A7 12 02 F6 | 	mov	arg01, fp
14534     47 00 00 FF 
14538     7C E4 85 F1 | 	sub	objptr, ##36476
1453c     80 4E 85 F1 | 	sub	fp, #128
14540     09 4F 61 FC | 	wrlong	fp, arg01
14544                 | ' 
14544                 | ' inload=1
14544                 | ' numpar=compiledline(lineptr_e).result.uresult
14544                 | ' lpoke varptr(line2$),varptr(line2)
14544                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
14544     0C 4E 85 F1 | 	sub	fp, #12
14548     A7 26 02 FB | 	rdlong	local01, fp
1454c     1C 4E 85 F1 | 	sub	fp, #28
14550     01 26 56 F2 | 	cmps	local01, #1 wc
14554     24 00 90 CD |  if_b	jmp	#LR__1670
14558     84 8D BF FD | 	call	#_pop
1455c     04 4E 05 F1 | 	add	fp, #4
14560     A7 FA 61 FC | 	wrlong	result1, fp
14564     04 4E 05 F1 | 	add	fp, #4
14568     A7 FC 61 FC | 	wrlong	result2, fp
1456c     04 4E 05 F1 | 	add	fp, #4
14570     A7 FE 61 FC | 	wrlong	result3, fp
14574     0C 4E 85 F1 | 	sub	fp, #12
14578     28 00 90 FD | 	jmp	#LR__1671
1457c                 | LR__1670
1457c     52 00 00 FF 
14580     C4 E4 05 F1 | 	add	objptr, ##42180
14584     F2 26 02 FB | 	rdlong	local01, objptr
14588     52 00 00 FF 
1458c     C4 E4 85 F1 | 	sub	objptr, ##42180
14590     04 4E 05 F1 | 	add	fp, #4
14594     A7 26 62 FC | 	wrlong	local01, fp
14598     08 4E 05 F1 | 	add	fp, #8
1459c     A7 3E 68 FC | 	wrlong	#31, fp
145a0     0C 4E 85 F1 | 	sub	fp, #12
145a4                 | LR__1671
145a4                 | ' 'print "popped "; t1.result.uresult, t1.result_type
145a4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
145a4     0C 4E 05 F1 | 	add	fp, #12
145a8     A7 26 02 FB | 	rdlong	local01, fp
145ac     0C 4E 85 F1 | 	sub	fp, #12
145b0     2B 26 0E F2 | 	cmp	local01, #43 wz
145b4     24 00 90 5D |  if_ne	jmp	#LR__1672
145b8     04 4E 05 F1 | 	add	fp, #4
145bc     A7 12 02 FB | 	rdlong	arg01, fp
145c0     04 4E 85 F1 | 	sub	fp, #4
145c4     90 8E BF FD | 	call	#_convertstring
145c8     04 4E 05 F1 | 	add	fp, #4
145cc     A7 FA 61 FC | 	wrlong	result1, fp
145d0     08 4E 05 F1 | 	add	fp, #8
145d4     A7 3E 68 FC | 	wrlong	#31, fp
145d8     0C 4E 85 F1 | 	sub	fp, #12
145dc                 | LR__1672
145dc                 | ' if t1.result_type=result_string then
145dc     0C 4E 05 F1 | 	add	fp, #12
145e0     A7 26 02 FB | 	rdlong	local01, fp
145e4     0C 4E 85 F1 | 	sub	fp, #12
145e8     1F 26 0E F2 | 	cmp	local01, #31 wz
145ec     E0 02 90 5D |  if_ne	jmp	#LR__1678
145f0                 | '   if amode<>1234 then do_new
145f0     A7 26 02 FB | 	rdlong	local01, fp
145f4     02 00 00 FF 
145f8     D2 26 0E F2 | 	cmp	local01, ##1234 wz
145fc     08 0E B0 5D |  if_ne	call	#_do_new
14600                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
14600     04 4E 05 F1 | 	add	fp, #4
14604     A7 12 02 FB | 	rdlong	arg01, fp
14608     04 4E 85 F1 | 	sub	fp, #4
1460c     B1 01 00 FF 
14610     CF 15 06 F6 | 	mov	arg02, ##@LR__5875
14614     28 19 B1 FD | 	call	#__system___string_cmp
14618     00 FA 0D F2 | 	cmp	result1, #0 wz
1461c     24 00 90 5D |  if_ne	jmp	#LR__1673
14620     52 00 00 FF 
14624     C4 E4 05 F1 | 	add	objptr, ##42180
14628     F2 26 02 FB | 	rdlong	local01, objptr
1462c     52 00 00 FF 
14630     C4 E4 85 F1 | 	sub	objptr, ##42180
14634     04 4E 05 F1 | 	add	fp, #4
14638     A7 26 62 FC | 	wrlong	local01, fp
1463c     04 4E 85 F1 | 	sub	fp, #4
14640     20 00 90 FD | 	jmp	#LR__1674
14644                 | LR__1673
14644     04 4E 05 F1 | 	add	fp, #4
14648     A7 26 02 FB | 	rdlong	local01, fp
1464c     04 4E 85 F1 | 	sub	fp, #4
14650     52 00 00 FF 
14654     C4 E4 05 F1 | 	add	objptr, ##42180
14658     F2 26 62 FC | 	wrlong	local01, objptr
1465c     52 00 00 FF 
14660     C4 E4 85 F1 | 	sub	objptr, ##42180
14664                 | LR__1674
14664                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
14664     09 12 06 F6 | 	mov	arg01, #9
14668     04 6C B1 FD | 	call	#__system__close
1466c     09 26 06 F6 | 	mov	local01, #9
14670     4A 00 00 FF 
14674     94 E4 05 F1 | 	add	objptr, ##38036
14678     F2 12 02 FB | 	rdlong	arg01, objptr
1467c     4A 00 00 FF 
14680     94 E4 85 F1 | 	sub	objptr, ##38036
14684     B1 01 00 FF 
14688     D0 15 06 F6 | 	mov	arg02, ##@LR__5876
1468c     E4 18 B1 FD | 	call	#__system___string_concat
14690     FD 12 02 F6 | 	mov	arg01, result1
14694     04 4E 05 F1 | 	add	fp, #4
14698     A7 14 02 FB | 	rdlong	arg02, fp
1469c     04 4E 85 F1 | 	sub	fp, #4
146a0     D0 18 B1 FD | 	call	#__system___string_concat
146a4     FD 14 02 F6 | 	mov	arg02, result1
146a8     13 13 02 F6 | 	mov	arg01, local01
146ac     00 16 06 F6 | 	mov	arg03, #0
146b0     68 24 B1 FD | 	call	#__system___basic_open_string
146b4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
146b8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
146bc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
146c0     14 4E 05 F1 | 	add	fp, #20
146c4     A7 FA 61 FC | 	wrlong	result1, fp
146c8                 | '   r=geterr() 
146c8                 | '   if r then 
146c8     14 4E 85 F1 | 	sub	fp, #20
146cc     50 01 90 AD |  if_e	jmp	#LR__1676
146d0                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
146d0     09 12 06 F6 | 	mov	arg01, #9
146d4     98 6B B1 FD | 	call	#__system__close
146d8     09 26 06 F6 | 	mov	local01, #9
146dc     4A 00 00 FF 
146e0     94 E4 05 F1 | 	add	objptr, ##38036
146e4     F2 12 02 FB | 	rdlong	arg01, objptr
146e8     4A 00 00 FF 
146ec     94 E4 85 F1 | 	sub	objptr, ##38036
146f0     B1 01 00 FF 
146f4     D2 15 06 F6 | 	mov	arg02, ##@LR__5877
146f8     78 18 B1 FD | 	call	#__system___string_concat
146fc     FD 12 02 F6 | 	mov	arg01, result1
14700     04 4E 05 F1 | 	add	fp, #4
14704     A7 14 02 FB | 	rdlong	arg02, fp
14708     04 4E 85 F1 | 	sub	fp, #4
1470c     64 18 B1 FD | 	call	#__system___string_concat
14710     FD 12 02 F6 | 	mov	arg01, result1
14714     B1 01 00 FF 
14718     D4 15 06 F6 | 	mov	arg02, ##@LR__5878
1471c     54 18 B1 FD | 	call	#__system___string_concat
14720     FD 14 02 F6 | 	mov	arg02, result1
14724     13 13 02 F6 | 	mov	arg01, local01
14728     00 16 06 F6 | 	mov	arg03, #0
1472c     EC 23 B1 FD | 	call	#__system___basic_open_string
14730     20 E6 05 F1 | 	add	ptr___system__dat__, #32
14734     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
14738     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1473c     14 4E 05 F1 | 	add	fp, #20
14740     A7 FA 61 FC | 	wrlong	result1, fp
14744                 | '     r=geterr() 
14744                 | '     if r then 
14744     14 4E 85 F1 | 	sub	fp, #20
14748     A0 00 90 AD |  if_e	jmp	#LR__1675
1474c                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
1474c     00 12 06 F6 | 	mov	arg01, #0
14750     EC 74 B1 FD | 	call	#__system___getiolock_0602
14754     FD 12 02 F6 | 	mov	arg01, result1
14758     BC 17 B1 FD | 	call	#__system___lockmem
1475c     B1 01 00 FF 
14760     D9 15 06 F6 | 	mov	arg02, ##@LR__5879
14764     00 12 06 F6 | 	mov	arg01, #0
14768     00 16 06 F6 | 	mov	arg03, #0
1476c     9C 24 B1 FD | 	call	#__system___basic_print_string
14770     14 4E 05 F1 | 	add	fp, #20
14774     A7 14 02 FB | 	rdlong	arg02, fp
14778     14 4E 85 F1 | 	sub	fp, #20
1477c     00 12 06 F6 | 	mov	arg01, #0
14780     00 16 06 F6 | 	mov	arg03, #0
14784     0A 18 06 F6 | 	mov	arg04, #10
14788     C4 24 B1 FD | 	call	#__system___basic_print_integer
1478c     B1 01 00 FF 
14790     E7 15 06 F6 | 	mov	arg02, ##@LR__5880
14794     00 12 06 F6 | 	mov	arg01, #0
14798     00 16 06 F6 | 	mov	arg03, #0
1479c     6C 24 B1 FD | 	call	#__system___basic_print_string
147a0     00 26 06 F6 | 	mov	local01, #0
147a4     14 4E 05 F1 | 	add	fp, #20
147a8     A7 12 02 FB | 	rdlong	arg01, fp
147ac     14 4E 85 F1 | 	sub	fp, #20
147b0     F0 40 B1 FD | 	call	#__system___strerror
147b4     FD 14 02 F6 | 	mov	arg02, result1
147b8     13 13 02 F6 | 	mov	arg01, local01
147bc     00 16 06 F6 | 	mov	arg03, #0
147c0     48 24 B1 FD | 	call	#__system___basic_print_string
147c4     00 12 06 F6 | 	mov	arg01, #0
147c8     0A 14 06 F6 | 	mov	arg02, #10
147cc     00 16 06 F6 | 	mov	arg03, #0
147d0     E0 23 B1 FD | 	call	#__system___basic_print_char
147d4     00 12 06 F6 | 	mov	arg01, #0
147d8     64 74 B1 FD | 	call	#__system___getiolock_0602
147dc     FD 00 68 FC | 	wrlong	#0, result1
147e0     09 12 06 F6 | 	mov	arg01, #9
147e4     88 6A B1 FD | 	call	#__system__close
147e8     94 01 90 FD | 	jmp	#LR__1680
147ec                 | LR__1675
147ec     52 00 00 FF 
147f0     C4 E4 05 F1 | 	add	objptr, ##42180
147f4     F2 12 02 FB | 	rdlong	arg01, objptr
147f8     52 00 00 FF 
147fc     C4 E4 85 F1 | 	sub	objptr, ##42180
14800     B1 01 00 FF 
14804     EA 15 06 F6 | 	mov	arg02, ##@LR__5881
14808     68 17 B1 FD | 	call	#__system___string_concat
1480c     52 00 00 FF 
14810     C4 E4 05 F1 | 	add	objptr, ##42180
14814     F2 FA 61 FC | 	wrlong	result1, objptr
14818     52 00 00 FF 
1481c     C4 E4 85 F1 | 	sub	objptr, ##42180
14820                 | LR__1676
14820                 | '   close #9: open currentdir$+"/"+loadname for input as #9
14820     09 12 06 F6 | 	mov	arg01, #9
14824     48 6A B1 FD | 	call	#__system__close
14828     09 26 06 F6 | 	mov	local01, #9
1482c     4A 00 00 FF 
14830     94 E4 05 F1 | 	add	objptr, ##38036
14834     F2 12 02 FB | 	rdlong	arg01, objptr
14838     4A 00 00 FF 
1483c     94 E4 85 F1 | 	sub	objptr, ##38036
14840     B1 01 00 FF 
14844     EF 15 06 F6 | 	mov	arg02, ##@LR__5882
14848     28 17 B1 FD | 	call	#__system___string_concat
1484c     FD 12 02 F6 | 	mov	arg01, result1
14850     52 00 00 FF 
14854     C4 E4 05 F1 | 	add	objptr, ##42180
14858     F2 14 02 FB | 	rdlong	arg02, objptr
1485c     52 00 00 FF 
14860     C4 E4 85 F1 | 	sub	objptr, ##42180
14864     0C 17 B1 FD | 	call	#__system___string_concat
14868     FD 14 02 F6 | 	mov	arg02, result1
1486c     13 13 02 F6 | 	mov	arg01, local01
14870     00 16 06 F6 | 	mov	arg03, #0
14874     A4 22 B1 FD | 	call	#__system___basic_open_string
14878                 | '   do
14878                 | LR__1677
14878     09 12 06 F6 | 	mov	arg01, #9
1487c     A4 18 B1 FD | 	call	#__system___basic_read_line
14880     FD 26 02 F6 | 	mov	local01, result1
14884     37 00 00 FF 
14888     1C E4 05 F1 | 	add	objptr, ##28188
1488c     F2 26 62 FC | 	wrlong	local01, objptr
14890     37 00 00 FF 
14894     1C E4 85 F1 | 	sub	objptr, ##28188
14898     8C CF BE FD | 	call	#_interpret
1489c     37 00 00 FF 
148a0     1C E4 05 F1 | 	add	objptr, ##28188
148a4     F2 12 02 FB | 	rdlong	arg01, objptr
148a8     37 00 00 FF 
148ac     1C E4 85 F1 | 	sub	objptr, ##28188
148b0     B1 01 00 FF 
148b4     F1 15 06 F6 | 	mov	arg02, ##@LR__5883
148b8     84 16 B1 FD | 	call	#__system___string_cmp
148bc     00 FA 0D F2 | 	cmp	result1, #0 wz
148c0     B4 FF 9F 5D |  if_ne	jmp	#LR__1677
148c4                 | '   close #9   
148c4     09 12 06 F6 | 	mov	arg01, #9
148c8     A4 69 B1 FD | 	call	#__system__close
148cc     0C 00 90 FD | 	jmp	#LR__1679
148d0                 | LR__1678
148d0     1E 12 06 F6 | 	mov	arg01, #30
148d4     00 14 06 F6 | 	mov	arg02, #0
148d8     50 DC B0 FD | 	call	#_printerror
148dc                 | LR__1679
148dc                 | ' print "Loaded ";currentdir$+"/"+loadname
148dc     00 12 06 F6 | 	mov	arg01, #0
148e0     5C 73 B1 FD | 	call	#__system___getiolock_0602
148e4     FD 12 02 F6 | 	mov	arg01, result1
148e8     2C 16 B1 FD | 	call	#__system___lockmem
148ec     B1 01 00 FF 
148f0     F2 15 06 F6 | 	mov	arg02, ##@LR__5884
148f4     00 12 06 F6 | 	mov	arg01, #0
148f8     00 16 06 F6 | 	mov	arg03, #0
148fc     0C 23 B1 FD | 	call	#__system___basic_print_string
14900     00 26 06 F6 | 	mov	local01, #0
14904     4A 00 00 FF 
14908     94 E4 05 F1 | 	add	objptr, ##38036
1490c     F2 12 02 FB | 	rdlong	arg01, objptr
14910     4A 00 00 FF 
14914     94 E4 85 F1 | 	sub	objptr, ##38036
14918     B1 01 00 FF 
1491c     FA 15 06 F6 | 	mov	arg02, ##@LR__5885
14920     50 16 B1 FD | 	call	#__system___string_concat
14924     FD 12 02 F6 | 	mov	arg01, result1
14928     52 00 00 FF 
1492c     C4 E4 05 F1 | 	add	objptr, ##42180
14930     F2 14 02 FB | 	rdlong	arg02, objptr
14934     52 00 00 FF 
14938     C4 E4 85 F1 | 	sub	objptr, ##42180
1493c     34 16 B1 FD | 	call	#__system___string_concat
14940     FD 14 02 F6 | 	mov	arg02, result1
14944     13 13 02 F6 | 	mov	arg01, local01
14948     00 16 06 F6 | 	mov	arg03, #0
1494c     BC 22 B1 FD | 	call	#__system___basic_print_string
14950     00 12 06 F6 | 	mov	arg01, #0
14954     0A 14 06 F6 | 	mov	arg02, #10
14958     00 16 06 F6 | 	mov	arg03, #0
1495c     54 22 B1 FD | 	call	#__system___basic_print_char
14960     00 12 06 F6 | 	mov	arg01, #0
14964     D8 72 B1 FD | 	call	#__system___getiolock_0602
14968     FD 00 68 FC | 	wrlong	#0, result1
1496c     52 00 00 FF 
14970     D4 E4 05 F1 | 	add	objptr, ##42196
14974     F2 00 68 FC | 	wrlong	#0, objptr
14978     52 00 00 FF 
1497c     D4 E4 85 F1 | 	sub	objptr, ##42196
14980                 | LR__1680
14980     A7 F0 03 F6 | 	mov	ptra, fp
14984     B2 00 A0 FD | 	call	#popregs_
14988                 | _do_load_ret
14988     2D 00 64 FD | 	ret
1498c                 | 
1498c                 | ' 
1498c                 | ' '-------------------- log
1498c                 | ' 
1498c                 | ' sub do_log
1498c                 | _do_log
1498c     01 4A 05 F6 | 	mov	COUNT_, #1
14990     A8 00 A0 FD | 	call	#pushregs_
14994     14 F0 07 F1 | 	add	ptra, #20
14998     4A 00 00 FF 
1499c     80 E4 05 F1 | 	add	objptr, ##38016
149a0     F2 26 02 FB | 	rdlong	local01, objptr
149a4     13 17 02 F6 | 	mov	arg03, local01
149a8     01 16 66 F0 | 	shl	arg03, #1
149ac     13 17 02 F1 | 	add	arg03, local01
149b0     02 16 66 F0 | 	shl	arg03, #2
149b4     03 00 00 FF 
149b8     04 E4 85 F1 | 	sub	objptr, ##1540
149bc     F2 16 02 F1 | 	add	arg03, objptr
149c0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
149c4     0C 4E 05 F1 | 	add	fp, #12
149c8     A7 16 62 FC | 	wrlong	arg03, fp
149cc                 | ' 
149cc                 | ' numpar=compiledline(lineptr_e).result.uresult
149cc                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
149cc     0C 4E 85 F1 | 	sub	fp, #12
149d0     47 00 00 FF 
149d4     7C E4 85 F1 | 	sub	objptr, ##36476
149d8     0C 4E 05 51 |  if_ne	add	fp, #12
149dc     A7 26 02 5B |  if_ne	rdlong	local01, fp
149e0     0C 4E 85 51 |  if_ne	sub	fp, #12
149e4     03 26 16 52 |  if_ne	cmp	local01, #3 wc
149e8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1690
149ec     00 12 06 F6 | 	mov	arg01, #0
149f0     4C 72 B1 FD | 	call	#__system___getiolock_0602
149f4     FD 12 02 F6 | 	mov	arg01, result1
149f8     1C 15 B1 FD | 	call	#__system___lockmem
149fc     B1 01 00 FF 
14a00     FC 15 06 F6 | 	mov	arg02, ##@LR__5886
14a04     00 12 06 F6 | 	mov	arg01, #0
14a08     00 16 06 F6 | 	mov	arg03, #0
14a0c     FC 21 B1 FD | 	call	#__system___basic_print_string
14a10     00 12 06 F6 | 	mov	arg01, #0
14a14     28 72 B1 FD | 	call	#__system___getiolock_0602
14a18     FD 00 68 FC | 	wrlong	#0, result1
14a1c     27 12 06 F6 | 	mov	arg01, #39
14a20     00 14 06 F6 | 	mov	arg02, #0
14a24     04 DB B0 FD | 	call	#_printerror
14a28     D0 00 90 FD | 	jmp	#LR__1693
14a2c                 | LR__1690
14a2c                 | ' if numpar=2 then 
14a2c     0C 4E 05 F1 | 	add	fp, #12
14a30     A7 26 02 FB | 	rdlong	local01, fp
14a34     0C 4E 85 F1 | 	sub	fp, #12
14a38     02 26 0E F2 | 	cmp	local01, #2 wz
14a3c     48 00 90 5D |  if_ne	jmp	#LR__1691
14a40     9C 88 BF FD | 	call	#_pop
14a44     FF 26 02 F6 | 	mov	local01, result3
14a48     A7 FA 61 FC | 	wrlong	result1, fp
14a4c     04 4E 05 F1 | 	add	fp, #4
14a50     A7 FC 61 FC | 	wrlong	result2, fp
14a54     04 4E 05 F1 | 	add	fp, #4
14a58     A7 26 62 FC | 	wrlong	local01, fp
14a5c     08 4E 85 F1 | 	sub	fp, #8
14a60     A7 12 02 F6 | 	mov	arg01, fp
14a64     18 8B BF FD | 	call	#_converttofloat
14a68     FD 14 02 F6 | 	mov	arg02, result1
14a6c     FC 16 20 FF 
14a70     54 12 06 F6 | 	mov	arg01, ##1076754516
14a74     E8 52 B1 FD | 	call	#__system____builtin_logbase
14a78     10 4E 05 F1 | 	add	fp, #16
14a7c     A7 FA 61 FC | 	wrlong	result1, fp
14a80     10 4E 85 F1 | 	sub	fp, #16
14a84     10 00 90 FD | 	jmp	#LR__1692
14a88                 | LR__1691
14a88     10 4E 05 F1 | 	add	fp, #16
14a8c     00 C0 9F FF 
14a90     A7 00 68 FC | 	wrlong	##1065353216, fp
14a94     10 4E 85 F1 | 	sub	fp, #16
14a98                 | LR__1692
14a98     44 88 BF FD | 	call	#_pop
14a9c     FF 26 02 F6 | 	mov	local01, result3
14aa0     A7 FA 61 FC | 	wrlong	result1, fp
14aa4     04 4E 05 F1 | 	add	fp, #4
14aa8     A7 FC 61 FC | 	wrlong	result2, fp
14aac     04 4E 05 F1 | 	add	fp, #4
14ab0     A7 26 62 FC | 	wrlong	local01, fp
14ab4     08 4E 85 F1 | 	sub	fp, #8
14ab8     A7 12 02 F6 | 	mov	arg01, fp
14abc     C0 8A BF FD | 	call	#_converttofloat
14ac0     FD 14 02 F6 | 	mov	arg02, result1
14ac4     FC 16 20 FF 
14ac8     54 12 06 F6 | 	mov	arg01, ##1076754516
14acc     90 52 B1 FD | 	call	#__system____builtin_logbase
14ad0     FD 12 02 F6 | 	mov	arg01, result1
14ad4     10 4E 05 F1 | 	add	fp, #16
14ad8     A7 14 02 FB | 	rdlong	arg02, fp
14adc     10 4E 85 F1 | 	sub	fp, #16
14ae0     B0 44 B1 FD | 	call	#__system___float_div
14ae4     A7 FA 61 FC | 	wrlong	result1, fp
14ae8     08 4E 05 F1 | 	add	fp, #8
14aec     A7 3C 68 FC | 	wrlong	#30, fp
14af0     08 4E 85 F1 | 	sub	fp, #8
14af4     A7 12 02 F6 | 	mov	arg01, fp
14af8     7C 88 BF FD | 	call	#_push
14afc                 | LR__1693
14afc     A7 F0 03 F6 | 	mov	ptra, fp
14b00     B2 00 A0 FD | 	call	#popregs_
14b04                 | _do_log_ret
14b04     2D 00 64 FD | 	ret
14b08                 | 
14b08                 | ' 
14b08                 | ' '-------------------- lpeek
14b08                 | ' 
14b08                 | ' sub do_lpeek
14b08                 | _do_lpeek
14b08     00 4A 05 F6 | 	mov	COUNT_, #0
14b0c     A8 00 A0 FD | 	call	#pushregs_
14b10     14 F0 07 F1 | 	add	ptra, #20
14b14     C8 87 BF FD | 	call	#_pop
14b18     A7 FA 61 FC | 	wrlong	result1, fp
14b1c     04 4E 05 F1 | 	add	fp, #4
14b20     A7 FC 61 FC | 	wrlong	result2, fp
14b24     04 4E 05 F1 | 	add	fp, #4
14b28     A7 FE 61 FC | 	wrlong	result3, fp
14b2c     08 4E 85 F1 | 	sub	fp, #8
14b30     A7 12 02 F6 | 	mov	arg01, fp
14b34     8C 89 BF FD | 	call	#_converttoint
14b38     0C 4E 05 F1 | 	add	fp, #12
14b3c     A7 FA 61 FC | 	wrlong	result1, fp
14b40                 | ' 
14b40                 | ' t1=pop()
14b40                 | ' a=converttoint(t1)
14b40                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
14b40     0C 4E 85 F1 | 	sub	fp, #12
14b44     00 04 00 FF 
14b48     00 FA 15 F2 | 	cmp	result1, ##524288 wc
14b4c     1C 00 90 3D |  if_ae	jmp	#LR__1700
14b50     0C 4E 05 F1 | 	add	fp, #12
14b54     A7 12 02 FB | 	rdlong	arg01, fp
14b58     09 FB 01 FB | 	rdlong	result1, arg01
14b5c     04 4E 05 F1 | 	add	fp, #4
14b60     A7 FA 61 FC | 	wrlong	result1, fp
14b64     10 4E 85 F1 | 	sub	fp, #16
14b68     1C 00 90 FD | 	jmp	#LR__1701
14b6c                 | LR__1700
14b6c     0C 4E 05 F1 | 	add	fp, #12
14b70     A7 12 02 FB | 	rdlong	arg01, fp
14b74     0C 4E 85 F1 | 	sub	fp, #12
14b78     80 DC B0 FD | 	call	#_pslpeek
14b7c     10 4E 05 F1 | 	add	fp, #16
14b80     A7 FA 61 FC | 	wrlong	result1, fp
14b84     10 4E 85 F1 | 	sub	fp, #16
14b88                 | LR__1701
14b88     08 4E 05 F1 | 	add	fp, #8
14b8c     A7 3A 68 FC | 	wrlong	#29, fp
14b90     08 4E 05 F1 | 	add	fp, #8
14b94     A7 12 02 FB | 	rdlong	arg01, fp
14b98     10 4E 85 F1 | 	sub	fp, #16
14b9c     A7 12 62 FC | 	wrlong	arg01, fp
14ba0     A7 12 02 F6 | 	mov	arg01, fp
14ba4     D0 87 BF FD | 	call	#_push
14ba8     A7 F0 03 F6 | 	mov	ptra, fp
14bac     B2 00 A0 FD | 	call	#popregs_
14bb0                 | _do_lpeek_ret
14bb0     2D 00 64 FD | 	ret
14bb4                 | 
14bb4                 | ' 
14bb4                 | ' '-------------------- lpoke
14bb4                 | ' 
14bb4                 | ' sub do_lpoke
14bb4                 | _do_lpoke
14bb4     01 4A 05 F6 | 	mov	COUNT_, #1
14bb8     A8 00 A0 FD | 	call	#pushregs_
14bbc     20 F0 07 F1 | 	add	ptra, #32
14bc0     1C 87 BF FD | 	call	#_pop
14bc4     FD 14 02 F6 | 	mov	arg02, result1
14bc8     FE 12 02 F6 | 	mov	arg01, result2
14bcc     FF 26 02 F6 | 	mov	local01, result3
14bd0     A7 14 62 FC | 	wrlong	arg02, fp
14bd4     04 4E 05 F1 | 	add	fp, #4
14bd8     A7 12 62 FC | 	wrlong	arg01, fp
14bdc     04 4E 05 F1 | 	add	fp, #4
14be0     A7 26 62 FC | 	wrlong	local01, fp
14be4     08 4E 85 F1 | 	sub	fp, #8
14be8     F4 86 BF FD | 	call	#_pop
14bec     FF 26 02 F6 | 	mov	local01, result3
14bf0     0C 4E 05 F1 | 	add	fp, #12
14bf4     A7 FA 61 FC | 	wrlong	result1, fp
14bf8     04 4E 05 F1 | 	add	fp, #4
14bfc     A7 FC 61 FC | 	wrlong	result2, fp
14c00     04 4E 05 F1 | 	add	fp, #4
14c04     A7 26 62 FC | 	wrlong	local01, fp
14c08     08 4E 85 F1 | 	sub	fp, #8
14c0c     A7 12 02 F6 | 	mov	arg01, fp
14c10     0C 4E 85 F1 | 	sub	fp, #12
14c14     AC 88 BF FD | 	call	#_converttoint
14c18     18 4E 05 F1 | 	add	fp, #24
14c1c     A7 FA 61 FC | 	wrlong	result1, fp
14c20     18 4E 85 F1 | 	sub	fp, #24
14c24     A7 12 02 F6 | 	mov	arg01, fp
14c28     98 88 BF FD | 	call	#_converttoint
14c2c     1C 4E 05 F1 | 	add	fp, #28
14c30     A7 FA 61 FC | 	wrlong	result1, fp
14c34                 | ' 
14c34                 | ' t1=pop() 'value
14c34                 | ' t2=pop() 
14c34                 | ' a=converttoint(t2) : v=converttoint(t1)
14c34                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
14c34     04 4E 85 F1 | 	sub	fp, #4
14c38     A7 26 02 FB | 	rdlong	local01, fp
14c3c     18 4E 85 F1 | 	sub	fp, #24
14c40     00 04 00 FF 
14c44     00 26 16 F2 | 	cmp	local01, ##524288 wc
14c48     1C 00 90 3D |  if_ae	jmp	#LR__1710
14c4c     18 4E 05 F1 | 	add	fp, #24
14c50     A7 12 02 FB | 	rdlong	arg01, fp
14c54     04 4E 05 F1 | 	add	fp, #4
14c58     A7 14 02 FB | 	rdlong	arg02, fp
14c5c     1C 4E 85 F1 | 	sub	fp, #28
14c60     09 15 62 FC | 	wrlong	arg02, arg01
14c64     18 00 90 FD | 	jmp	#LR__1711
14c68                 | LR__1710
14c68     18 4E 05 F1 | 	add	fp, #24
14c6c     A7 12 02 FB | 	rdlong	arg01, fp
14c70     04 4E 05 F1 | 	add	fp, #4
14c74     A7 14 02 FB | 	rdlong	arg02, fp
14c78     1C 4E 85 F1 | 	sub	fp, #28
14c7c     4C DA B0 FD | 	call	#_pslpoke
14c80                 | LR__1711
14c80     A7 F0 03 F6 | 	mov	ptra, fp
14c84     B2 00 A0 FD | 	call	#popregs_
14c88                 | _do_lpoke_ret
14c88     2D 00 64 FD | 	ret
14c8c                 | 
14c8c                 | ' 
14c8c                 | ' '-------------------- mid$
14c8c                 | ' 
14c8c                 | ' sub do_mid
14c8c                 | _do_mid
14c8c     00 4A 05 F6 | 	mov	COUNT_, #0
14c90     A8 00 A0 FD | 	call	#pushregs_
14c94     18 F0 07 F1 | 	add	ptra, #24
14c98     4A 00 00 FF 
14c9c     80 E4 05 F1 | 	add	objptr, ##38016
14ca0     F2 16 02 FB | 	rdlong	arg03, objptr
14ca4     0B 15 02 F6 | 	mov	arg02, arg03
14ca8     01 14 66 F0 | 	shl	arg02, #1
14cac     0B 15 02 F1 | 	add	arg02, arg03
14cb0     02 14 66 F0 | 	shl	arg02, #2
14cb4     03 00 00 FF 
14cb8     04 E4 85 F1 | 	sub	objptr, ##1540
14cbc     F2 14 02 F1 | 	add	arg02, objptr
14cc0     0A 17 02 FB | 	rdlong	arg03, arg02
14cc4     0C 4E 05 F1 | 	add	fp, #12
14cc8     A7 16 62 FC | 	wrlong	arg03, fp
14ccc                 | ' 
14ccc                 | ' numpar=compiledline(lineptr_e).result.uresult
14ccc                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
14ccc     0C 4E 85 F1 | 	sub	fp, #12
14cd0     03 16 0E F2 | 	cmp	arg03, #3 wz
14cd4     47 00 00 FF 
14cd8     7C E4 85 F1 | 	sub	objptr, ##36476
14cdc     40 00 90 AD |  if_e	jmp	#LR__1720
14ce0     00 12 06 F6 | 	mov	arg01, #0
14ce4     58 6F B1 FD | 	call	#__system___getiolock_0602
14ce8     FD 12 02 F6 | 	mov	arg01, result1
14cec     28 12 B1 FD | 	call	#__system___lockmem
14cf0     B2 01 00 FF 
14cf4     02 14 06 F6 | 	mov	arg02, ##@LR__5887
14cf8     00 12 06 F6 | 	mov	arg01, #0
14cfc     00 16 06 F6 | 	mov	arg03, #0
14d00     08 1F B1 FD | 	call	#__system___basic_print_string
14d04     00 12 06 F6 | 	mov	arg01, #0
14d08     34 6F B1 FD | 	call	#__system___getiolock_0602
14d0c     FD 00 68 FC | 	wrlong	#0, result1
14d10     27 12 06 F6 | 	mov	arg01, #39
14d14     00 14 06 F6 | 	mov	arg02, #0
14d18     10 D8 B0 FD | 	call	#_printerror
14d1c     2C 01 90 FD | 	jmp	#LR__1723
14d20                 | LR__1720
14d20     BC 85 BF FD | 	call	#_pop
14d24     FF 16 02 F6 | 	mov	arg03, result3
14d28     A7 FA 61 FC | 	wrlong	result1, fp
14d2c     04 4E 05 F1 | 	add	fp, #4
14d30     A7 FC 61 FC | 	wrlong	result2, fp
14d34     04 4E 05 F1 | 	add	fp, #4
14d38     A7 16 62 FC | 	wrlong	arg03, fp
14d3c     08 4E 85 F1 | 	sub	fp, #8
14d40     A7 12 02 F6 | 	mov	arg01, fp
14d44     7C 87 BF FD | 	call	#_converttoint
14d48     FD 16 02 F6 | 	mov	arg03, result1
14d4c     14 4E 05 F1 | 	add	fp, #20
14d50     A7 16 62 FC | 	wrlong	arg03, fp
14d54     14 4E 85 F1 | 	sub	fp, #20
14d58     84 85 BF FD | 	call	#_pop
14d5c     FF 16 02 F6 | 	mov	arg03, result3
14d60     A7 FA 61 FC | 	wrlong	result1, fp
14d64     04 4E 05 F1 | 	add	fp, #4
14d68     A7 FC 61 FC | 	wrlong	result2, fp
14d6c     04 4E 05 F1 | 	add	fp, #4
14d70     A7 16 62 FC | 	wrlong	arg03, fp
14d74     08 4E 85 F1 | 	sub	fp, #8
14d78     A7 12 02 F6 | 	mov	arg01, fp
14d7c     44 87 BF FD | 	call	#_converttoint
14d80     FD 16 02 F6 | 	mov	arg03, result1
14d84     10 4E 05 F1 | 	add	fp, #16
14d88     A7 16 62 FC | 	wrlong	arg03, fp
14d8c     10 4E 85 F1 | 	sub	fp, #16
14d90     4C 85 BF FD | 	call	#_pop
14d94     FF 16 02 F6 | 	mov	arg03, result3
14d98     A7 FA 61 FC | 	wrlong	result1, fp
14d9c     04 4E 05 F1 | 	add	fp, #4
14da0     A7 FC 61 FC | 	wrlong	result2, fp
14da4     04 4E 05 F1 | 	add	fp, #4
14da8     A7 16 62 FC | 	wrlong	arg03, fp
14dac                 | ' t1=pop() : arg2=converttoint(t1)
14dac                 | ' t1=pop() : arg1=converttoint(t1)
14dac                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14dac     08 4E 85 F1 | 	sub	fp, #8
14db0     2B 16 0E F2 | 	cmp	arg03, #43 wz
14db4     18 00 90 5D |  if_ne	jmp	#LR__1721
14db8     A7 12 02 FB | 	rdlong	arg01, fp
14dbc     98 86 BF FD | 	call	#_convertstring
14dc0     A7 FA 61 FC | 	wrlong	result1, fp
14dc4     08 4E 05 F1 | 	add	fp, #8
14dc8     A7 3E 68 FC | 	wrlong	#31, fp
14dcc     08 4E 85 F1 | 	sub	fp, #8
14dd0                 | LR__1721
14dd0                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
14dd0     08 4E 05 F1 | 	add	fp, #8
14dd4     A7 16 02 FB | 	rdlong	arg03, fp
14dd8     08 4E 85 F1 | 	sub	fp, #8
14ddc     1F 16 0E F2 | 	cmp	arg03, #31 wz
14de0     40 00 90 AD |  if_e	jmp	#LR__1722
14de4     00 12 06 F6 | 	mov	arg01, #0
14de8     54 6E B1 FD | 	call	#__system___getiolock_0602
14dec     FD 12 02 F6 | 	mov	arg01, result1
14df0     24 11 B1 FD | 	call	#__system___lockmem
14df4     B2 01 00 FF 
14df8     09 14 06 F6 | 	mov	arg02, ##@LR__5888
14dfc     00 12 06 F6 | 	mov	arg01, #0
14e00     00 16 06 F6 | 	mov	arg03, #0
14e04     04 1E B1 FD | 	call	#__system___basic_print_string
14e08     00 12 06 F6 | 	mov	arg01, #0
14e0c     30 6E B1 FD | 	call	#__system___getiolock_0602
14e10     FD 00 68 FC | 	wrlong	#0, result1
14e14     0F 12 06 F6 | 	mov	arg01, #15
14e18     00 14 06 F6 | 	mov	arg02, #0
14e1c     0C D7 B0 FD | 	call	#_printerror
14e20     28 00 90 FD | 	jmp	#LR__1723
14e24                 | LR__1722
14e24     A7 12 02 FB | 	rdlong	arg01, fp
14e28     10 4E 05 F1 | 	add	fp, #16
14e2c     A7 14 02 FB | 	rdlong	arg02, fp
14e30     04 4E 05 F1 | 	add	fp, #4
14e34     A7 16 02 FB | 	rdlong	arg03, fp
14e38     14 4E 85 F1 | 	sub	fp, #20
14e3c     6C 32 B1 FD | 	call	#__system__Mid_S
14e40     A7 FA 61 FC | 	wrlong	result1, fp
14e44     A7 12 02 F6 | 	mov	arg01, fp
14e48     2C 85 BF FD | 	call	#_push
14e4c                 | LR__1723
14e4c     A7 F0 03 F6 | 	mov	ptra, fp
14e50     B2 00 A0 FD | 	call	#popregs_
14e54                 | _do_mid_ret
14e54     2D 00 64 FD | 	ret
14e58                 | 
14e58                 | ' 
14e58                 | ' '-------------------- mkdir
14e58                 | ' 
14e58                 | ' sub do_mkdir
14e58                 | _do_mkdir
14e58     04 4A 05 F6 | 	mov	COUNT_, #4
14e5c     A8 00 A0 FD | 	call	#pushregs_
14e60     7C 84 BF FD | 	call	#_pop
14e64     FE 18 02 F6 | 	mov	arg04, result2
14e68     FF 16 02 F6 | 	mov	arg03, result3
14e6c     FD 26 02 F6 | 	mov	local01, result1
14e70     0C 29 02 F6 | 	mov	local02, arg04
14e74     0B 2B 02 F6 | 	mov	local03, arg03
14e78                 | ' 
14e78                 | ' t1=pop()
14e78                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14e78     2B 2A 0E F2 | 	cmp	local03, #43 wz
14e7c     10 00 90 5D |  if_ne	jmp	#LR__1730
14e80     13 13 02 F6 | 	mov	arg01, local01
14e84     D0 85 BF FD | 	call	#_convertstring
14e88     FD 26 02 F6 | 	mov	local01, result1
14e8c     1F 2A 06 F6 | 	mov	local03, #31
14e90                 | LR__1730
14e90                 | ' if t1.result_type<>result_string then printerror(15): return
14e90     1F 2A 0E F2 | 	cmp	local03, #31 wz
14e94     10 00 90 AD |  if_e	jmp	#LR__1731
14e98     0F 12 06 F6 | 	mov	arg01, #15
14e9c     00 14 06 F6 | 	mov	arg02, #0
14ea0     88 D6 B0 FD | 	call	#_printerror
14ea4     64 00 90 FD | 	jmp	#LR__1733
14ea8                 | LR__1731
14ea8     13 13 02 F6 | 	mov	arg01, local01
14eac     38 39 B1 FD | 	call	#__system___mkdir
14eb0     FD 2C 0A F6 | 	mov	local04, result1 wz
14eb4                 | ' filename$=t1.result.sresult
14eb4                 | ' err=mkdir(filename$)
14eb4                 | ' 'err=geterr() : 
14eb4                 | ' if err<>0 then print "Cannot create a directory: system error "; err
14eb4     54 00 90 AD |  if_e	jmp	#LR__1732
14eb8     00 12 06 F6 | 	mov	arg01, #0
14ebc     80 6D B1 FD | 	call	#__system___getiolock_0602
14ec0     FD 12 02 F6 | 	mov	arg01, result1
14ec4     50 10 B1 FD | 	call	#__system___lockmem
14ec8     B2 01 00 FF 
14ecc     10 14 06 F6 | 	mov	arg02, ##@LR__5889
14ed0     00 12 06 F6 | 	mov	arg01, #0
14ed4     00 16 06 F6 | 	mov	arg03, #0
14ed8     30 1D B1 FD | 	call	#__system___basic_print_string
14edc     00 12 06 F6 | 	mov	arg01, #0
14ee0     16 15 02 F6 | 	mov	arg02, local04
14ee4     00 16 06 F6 | 	mov	arg03, #0
14ee8     0A 18 06 F6 | 	mov	arg04, #10
14eec     60 1D B1 FD | 	call	#__system___basic_print_integer
14ef0     00 12 06 F6 | 	mov	arg01, #0
14ef4     0A 14 06 F6 | 	mov	arg02, #10
14ef8     00 16 06 F6 | 	mov	arg03, #0
14efc     B4 1C B1 FD | 	call	#__system___basic_print_char
14f00     00 12 06 F6 | 	mov	arg01, #0
14f04     38 6D B1 FD | 	call	#__system___getiolock_0602
14f08     FD 00 68 FC | 	wrlong	#0, result1
14f0c                 | LR__1732
14f0c                 | LR__1733
14f0c     A7 F0 03 F6 | 	mov	ptra, fp
14f10     B2 00 A0 FD | 	call	#popregs_
14f14                 | _do_mkdir_ret
14f14     2D 00 64 FD | 	ret
14f18                 | 
14f18                 | ' 
14f18                 | ' '-------------------- mode
14f18                 | ' 
14f18                 | ' sub do_mode
14f18                 | _do_mode
14f18     05 4A 05 F6 | 	mov	COUNT_, #5
14f1c     A8 00 A0 FD | 	call	#pushregs_
14f20     BC 83 BF FD | 	call	#_pop
14f24     FD 26 02 F6 | 	mov	local01, result1
14f28     FE 28 02 F6 | 	mov	local02, result2
14f2c     FF 2A 02 F6 | 	mov	local03, result3
14f30                 | ' t1=pop() 
14f30                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
14f30     1E 2A 0E F2 | 	cmp	local03, #30 wz
14f34     10 00 90 5D |  if_ne	jmp	#LR__1740
14f38     13 13 02 F6 | 	mov	arg01, local01
14f3c     00 14 06 F6 | 	mov	arg02, #0
14f40     14 43 B1 FD | 	call	#__system___float_tointeger
14f44     FD 26 02 F6 | 	mov	local01, result1
14f48                 | LR__1740
14f48                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
14f48     1F 2A 0E F2 | 	cmp	local03, #31 wz
14f4c     18 00 90 5D |  if_ne	jmp	#LR__1741
14f50     13 13 02 F6 | 	mov	arg01, local01
14f54     44 46 B1 FD | 	call	#__system____builtin_atof
14f58     FD 12 02 F6 | 	mov	arg01, result1
14f5c     00 14 06 F6 | 	mov	arg02, #0
14f60     F4 42 B1 FD | 	call	#__system___float_tointeger
14f64     FD 26 02 F6 | 	mov	local01, result1
14f68                 | LR__1741
14f68                 | ' select case t1.result.iresult
14f68     13 2D 02 F6 | 	mov	local04, local01
14f6c     05 2C 26 F3 | 	fle	local04, #5
14f70     30 2C 62 FD | 	jmprel	local04
14f74                 | LR__1742
14f74     14 00 90 FD | 	jmp	#LR__1743
14f78     A8 00 90 FD | 	jmp	#LR__1744
14f7c     10 01 90 FD | 	jmp	#LR__1745
14f80     78 01 90 FD | 	jmp	#LR__1746
14f84     E0 01 90 FD | 	jmp	#LR__1747
14f88     70 02 90 FD | 	jmp	#LR__1748
14f8c                 | LR__1743
14f8c     37 00 00 FF 
14f90     40 E4 05 F1 | 	add	objptr, ##28224
14f94     F2 02 68 FC | 	wrlong	#1, objptr
14f98     04 E4 85 F1 | 	sub	objptr, #4
14f9c     F2 34 69 FC | 	wrlong	#154, objptr
14fa0     19 00 00 FF 
14fa4     00 E5 05 F1 | 	add	objptr, ##13056
14fa8     F2 02 68 FC | 	wrlong	#1, objptr
14fac     19 00 00 FF 
14fb0     04 E5 85 F1 | 	sub	objptr, ##13060
14fb4     F2 26 69 FC | 	wrlong	#147, objptr
14fb8     37 00 00 FF 
14fbc     38 E4 85 F1 | 	sub	objptr, ##28216
14fc0     04 12 06 F6 | 	mov	arg01, #4
14fc4     7C F1 B0 FD | 	call	#_hg010b_spin2_setfontfamily
14fc8     37 00 00 FF 
14fcc     3C E4 05 F1 | 	add	objptr, ##28220
14fd0     F2 12 02 FB | 	rdlong	arg01, objptr
14fd4     04 E4 85 F1 | 	sub	objptr, #4
14fd8     F2 14 02 FB | 	rdlong	arg02, objptr
14fdc                 | ' 
14fdc                 | ' write_color:=ff
14fdc     36 00 00 FF 
14fe0     F7 E5 85 F1 | 	sub	objptr, ##28151
14fe4     F2 12 62 FC | 	wrlong	arg01, objptr
14fe8                 | ' write_background:=bb
14fe8     04 E4 05 F1 | 	add	objptr, #4
14fec     F2 14 62 FC | 	wrlong	arg02, objptr
14ff0     01 00 00 FF 
14ff4     00 EA 05 F1 | 	add	ptr__dat__, ##512
14ff8     52 00 00 FF 
14ffc     5F E4 05 F1 | 	add	objptr, ##42079
15000     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15004     04 E4 85 F1 | 	sub	objptr, #4
15008     03 00 80 FF 
1500c     F2 30 69 FC | 	wrlong	##1688, objptr
15010     52 00 00 FF 
15014     A0 E4 85 F1 | 	sub	objptr, ##42144
15018     01 00 00 FF 
1501c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15020     D8 01 90 FD | 	jmp	#LR__1748
15024                 | LR__1744
15024     37 00 00 FF 
15028     40 E4 05 F1 | 	add	objptr, ##28224
1502c     F2 00 68 FC | 	wrlong	#0, objptr
15030     04 E4 85 F1 | 	sub	objptr, #4
15034     F2 2E 68 FC | 	wrlong	#23, objptr
15038     19 00 00 FF 
1503c     00 E5 05 F1 | 	add	objptr, ##13056
15040     F2 00 68 FC | 	wrlong	#0, objptr
15044     19 00 00 FF 
15048     04 E5 85 F1 | 	sub	objptr, ##13060
1504c     F2 00 68 FC | 	wrlong	#0, objptr
15050     37 00 00 FF 
15054     38 E4 85 F1 | 	sub	objptr, ##28216
15058     00 12 06 F6 | 	mov	arg01, #0
1505c     E4 F0 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15060     37 00 00 FF 
15064     3C E4 05 F1 | 	add	objptr, ##28220
15068     F2 12 02 FB | 	rdlong	arg01, objptr
1506c     04 E4 85 F1 | 	sub	objptr, #4
15070     F2 14 02 FB | 	rdlong	arg02, objptr
15074                 | ' 
15074                 | ' write_color:=ff
15074     36 00 00 FF 
15078     F7 E5 85 F1 | 	sub	objptr, ##28151
1507c     F2 12 62 FC | 	wrlong	arg01, objptr
15080                 | ' write_background:=bb
15080     04 E4 05 F1 | 	add	objptr, #4
15084     F2 14 62 FC | 	wrlong	arg02, objptr
15088     45 E4 85 F1 | 	sub	objptr, #69
1508c     6C 01 90 FD | 	jmp	#LR__1748
15090                 | LR__1745
15090     37 00 00 FF 
15094     40 E4 05 F1 | 	add	objptr, ##28224
15098     F2 00 68 FC | 	wrlong	#0, objptr
1509c     04 E4 85 F1 | 	sub	objptr, #4
150a0     F2 6A 69 FC | 	wrlong	#181, objptr
150a4     19 00 00 FF 
150a8     00 E5 05 F1 | 	add	objptr, ##13056
150ac     F2 00 68 FC | 	wrlong	#0, objptr
150b0     19 00 00 FF 
150b4     04 E5 85 F1 | 	sub	objptr, ##13060
150b8     F2 00 68 FC | 	wrlong	#0, objptr
150bc     37 00 00 FF 
150c0     38 E4 85 F1 | 	sub	objptr, ##28216
150c4     00 12 06 F6 | 	mov	arg01, #0
150c8     78 F0 B0 FD | 	call	#_hg010b_spin2_setfontfamily
150cc     37 00 00 FF 
150d0     3C E4 05 F1 | 	add	objptr, ##28220
150d4     F2 12 02 FB | 	rdlong	arg01, objptr
150d8     04 E4 85 F1 | 	sub	objptr, #4
150dc     F2 14 02 FB | 	rdlong	arg02, objptr
150e0                 | ' 
150e0                 | ' write_color:=ff
150e0     36 00 00 FF 
150e4     F7 E5 85 F1 | 	sub	objptr, ##28151
150e8     F2 12 62 FC | 	wrlong	arg01, objptr
150ec                 | ' write_background:=bb
150ec     04 E4 05 F1 | 	add	objptr, #4
150f0     F2 14 62 FC | 	wrlong	arg02, objptr
150f4     45 E4 85 F1 | 	sub	objptr, #69
150f8     00 01 90 FD | 	jmp	#LR__1748
150fc                 | LR__1746
150fc     37 00 00 FF 
15100     40 E4 05 F1 | 	add	objptr, ##28224
15104     F2 00 68 FC | 	wrlong	#0, objptr
15108     04 E4 85 F1 | 	sub	objptr, #4
1510c     F2 1E 68 FC | 	wrlong	#15, objptr
15110     19 00 00 FF 
15114     00 E5 05 F1 | 	add	objptr, ##13056
15118     F2 00 68 FC | 	wrlong	#0, objptr
1511c     19 00 00 FF 
15120     04 E5 85 F1 | 	sub	objptr, ##13060
15124     F2 00 68 FC | 	wrlong	#0, objptr
15128     37 00 00 FF 
1512c     38 E4 85 F1 | 	sub	objptr, ##28216
15130     00 12 06 F6 | 	mov	arg01, #0
15134     0C F0 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15138     37 00 00 FF 
1513c     3C E4 05 F1 | 	add	objptr, ##28220
15140     F2 12 02 FB | 	rdlong	arg01, objptr
15144     04 E4 85 F1 | 	sub	objptr, #4
15148     F2 14 02 FB | 	rdlong	arg02, objptr
1514c                 | ' 
1514c                 | ' write_color:=ff
1514c     36 00 00 FF 
15150     F7 E5 85 F1 | 	sub	objptr, ##28151
15154     F2 12 62 FC | 	wrlong	arg01, objptr
15158                 | ' write_background:=bb
15158     04 E4 05 F1 | 	add	objptr, #4
1515c     F2 14 62 FC | 	wrlong	arg02, objptr
15160     45 E4 85 F1 | 	sub	objptr, #69
15164     94 00 90 FD | 	jmp	#LR__1748
15168                 | LR__1747
15168     37 00 00 FF 
1516c     40 E4 05 F1 | 	add	objptr, ##28224
15170     F2 02 68 FC | 	wrlong	#1, objptr
15174     04 E4 85 F1 | 	sub	objptr, #4
15178     F2 02 68 FC | 	wrlong	#1, objptr
1517c     19 00 00 FF 
15180     00 E5 05 F1 | 	add	objptr, ##13056
15184     F2 02 68 FC | 	wrlong	#1, objptr
15188     19 00 00 FF 
1518c     04 E5 85 F1 | 	sub	objptr, ##13060
15190     F2 1C 68 FC | 	wrlong	#14, objptr
15194     37 00 00 FF 
15198     38 E4 85 F1 | 	sub	objptr, ##28216
1519c     04 12 06 F6 | 	mov	arg01, #4
151a0     A0 EF B0 FD | 	call	#_hg010b_spin2_setfontfamily
151a4     37 00 00 FF 
151a8     3C E4 05 F1 | 	add	objptr, ##28220
151ac     F2 12 02 FB | 	rdlong	arg01, objptr
151b0     04 E4 85 F1 | 	sub	objptr, #4
151b4     F2 14 02 FB | 	rdlong	arg02, objptr
151b8                 | ' 
151b8                 | ' write_color:=ff
151b8     36 00 00 FF 
151bc     F7 E5 85 F1 | 	sub	objptr, ##28151
151c0     F2 12 62 FC | 	wrlong	arg01, objptr
151c4                 | ' write_background:=bb
151c4     04 E4 05 F1 | 	add	objptr, #4
151c8     F2 14 62 FC | 	wrlong	arg02, objptr
151cc     07 00 00 FF 
151d0     82 EB 05 F1 | 	add	ptr__dat__, ##3970
151d4     52 00 00 FF 
151d8     5F E4 05 F1 | 	add	objptr, ##42079
151dc     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
151e0     04 E4 85 F1 | 	sub	objptr, #4
151e4     03 00 80 FF 
151e8     F2 30 69 FC | 	wrlong	##1688, objptr
151ec     52 00 00 FF 
151f0     A0 E4 85 F1 | 	sub	objptr, ##42144
151f4     07 00 00 FF 
151f8     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
151fc                 | LR__1748
151fc     52 00 00 FF 
15200     9C E4 05 F1 | 	add	objptr, ##42140
15204     F2 26 62 FC | 	wrlong	local01, objptr
15208     04 E4 85 F1 | 	sub	objptr, #4
1520c     F2 12 02 FB | 	rdlong	arg01, objptr
15210     0F 00 00 FF 
15214     3C E4 85 F1 | 	sub	objptr, ##7740
15218     F2 2E 02 FB | 	rdlong	local05, objptr
1521c     43 00 00 FF 
15220     5C E4 85 F1 | 	sub	objptr, ##34396
15224     17 13 82 F1 | 	sub	arg01, local05
15228     00 14 06 F6 | 	mov	arg02, #0
1522c     0A 16 06 F6 | 	mov	arg03, #10
15230     B4 2F B1 FD | 	call	#__system__Number_S
15234     FD 12 02 F6 | 	mov	arg01, result1
15238     B2 01 00 FF 
1523c     39 14 06 F6 | 	mov	arg02, ##@LR__5890
15240     30 0D B1 FD | 	call	#__system___string_concat
15244     50 00 00 FF 
15248     38 E5 05 F1 | 	add	objptr, ##41272
1524c     F2 FA 61 FC | 	wrlong	result1, objptr
15250     19 00 00 FF 
15254     FC E4 85 F1 | 	sub	objptr, ##13052
15258     F2 12 02 FB | 	rdlong	arg01, objptr
1525c     04 E4 85 F1 | 	sub	objptr, #4
15260     F2 14 02 FB | 	rdlong	arg02, objptr
15264     37 00 00 FF 
15268     38 E4 85 F1 | 	sub	objptr, ##28216
1526c     24 F0 B0 FD | 	call	#_hg010b_spin2_cls
15270     B2 01 00 FF 
15274     4B 12 06 F6 | 	mov	arg01, ##@LR__5891
15278                 | ' 
15278                 | ' write(text)
15278     D8 F3 B0 FD | 	call	#_hg010b_spin2_write
1527c                 | ' crlf
1527c     D4 F8 B0 FD | 	call	#_hg010b_spin2_crlf
15280     18 00 00 FF 
15284     40 EB 05 F1 | 	add	ptr__dat__, ##12608
15288     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
1528c     18 00 00 FF 
15290     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
15294                 | ' 
15294                 | ' write(text)
15294     BC F3 B0 FD | 	call	#_hg010b_spin2_write
15298                 | ' crlf
15298     B8 F8 B0 FD | 	call	#_hg010b_spin2_crlf
1529c     50 00 00 FF 
152a0     38 E5 05 F1 | 	add	objptr, ##41272
152a4     F2 12 02 FB | 	rdlong	arg01, objptr
152a8     50 00 00 FF 
152ac     38 E5 85 F1 | 	sub	objptr, ##41272
152b0                 | ' 
152b0                 | ' write(text)
152b0     A0 F3 B0 FD | 	call	#_hg010b_spin2_write
152b4                 | ' crlf
152b4     9C F8 B0 FD | 	call	#_hg010b_spin2_crlf
152b8     A7 F0 03 F6 | 	mov	ptra, fp
152bc     B2 00 A0 FD | 	call	#popregs_
152c0                 | _do_mode_ret
152c0     2D 00 64 FD | 	ret
152c4                 | 
152c4                 | ' 
152c4                 | ' '-------------------- mouse
152c4                 | ' 
152c4                 | ' sub do_mouse
152c4                 | _do_mouse
152c4     18 80 BF FD | 	call	#_pop
152c8     00 FA 4D F2 | 	cmps	result1, #0 wz
152cc                 | ' 
152cc                 | ' t1=pop()
152cc                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
152cc     14 00 90 5D |  if_ne	jmp	#LR__1750
152d0     10 12 06 F6 | 	mov	arg01, #16
152d4     00 14 06 F6 | 	mov	arg02, #0
152d8     00 16 06 F6 | 	mov	arg03, #0
152dc     94 E2 B0 FD | 	call	#_hg010b_spin2_setspritesize
152e0     10 00 90 FD | 	jmp	#LR__1751
152e4                 | LR__1750
152e4     10 12 06 F6 | 	mov	arg01, #16
152e8     20 14 06 F6 | 	mov	arg02, #32
152ec     20 16 06 F6 | 	mov	arg03, #32
152f0     80 E2 B0 FD | 	call	#_hg010b_spin2_setspritesize
152f4                 | LR__1751
152f4                 | _do_mouse_ret
152f4     2D 00 64 FD | 	ret
152f8                 | 
152f8                 | ' 
152f8                 | ' '-------------------- mousek
152f8                 | ' 
152f8                 | ' sub do_mousek
152f8                 | _do_mousek
152f8     00 4A 05 F6 | 	mov	COUNT_, #0
152fc     A8 00 A0 FD | 	call	#pushregs_
15300     0C F0 07 F1 | 	add	ptra, #12
15304     08 4E 05 F1 | 	add	fp, #8
15308     A7 3A 68 FC | 	wrlong	#29, fp
1530c     08 4E 85 F1 | 	sub	fp, #8
15310     51 00 00 FF 
15314     50 E5 05 F1 | 	add	objptr, ##41808
15318     F2 12 02 FB | 	rdlong	arg01, objptr
1531c     51 00 00 FF 
15320     50 E5 85 F1 | 	sub	objptr, ##41808
15324     A7 12 62 FC | 	wrlong	arg01, fp
15328     A7 12 02 F6 | 	mov	arg01, fp
1532c     48 80 BF FD | 	call	#_push
15330     A7 F0 03 F6 | 	mov	ptra, fp
15334     B2 00 A0 FD | 	call	#popregs_
15338                 | _do_mousek_ret
15338     2D 00 64 FD | 	ret
1533c                 | 
1533c                 | ' 
1533c                 | ' '-------------------- mousew
1533c                 | ' 
1533c                 | ' sub do_mousew
1533c                 | _do_mousew
1533c     00 4A 05 F6 | 	mov	COUNT_, #0
15340     A8 00 A0 FD | 	call	#pushregs_
15344     0C F0 07 F1 | 	add	ptra, #12
15348     08 4E 05 F1 | 	add	fp, #8
1534c     A7 38 68 FC | 	wrlong	#28, fp
15350     08 4E 85 F1 | 	sub	fp, #8
15354     51 00 00 FF 
15358     54 E5 05 F1 | 	add	objptr, ##41812
1535c     F2 12 02 FB | 	rdlong	arg01, objptr
15360     51 00 00 FF 
15364     54 E5 85 F1 | 	sub	objptr, ##41812
15368     A7 12 62 FC | 	wrlong	arg01, fp
1536c     A7 12 02 F6 | 	mov	arg01, fp
15370     04 80 BF FD | 	call	#_push
15374     A7 F0 03 F6 | 	mov	ptra, fp
15378     B2 00 A0 FD | 	call	#popregs_
1537c                 | _do_mousew_ret
1537c     2D 00 64 FD | 	ret
15380                 | 
15380                 | ' 
15380                 | ' '-------------------- mousex
15380                 | ' 
15380                 | ' sub do_mousex
15380                 | _do_mousex
15380     00 4A 05 F6 | 	mov	COUNT_, #0
15384     A8 00 A0 FD | 	call	#pushregs_
15388     0C F0 07 F1 | 	add	ptra, #12
1538c     08 4E 05 F1 | 	add	fp, #8
15390     A7 3A 68 FC | 	wrlong	#29, fp
15394     08 4E 85 F1 | 	sub	fp, #8
15398     51 00 00 FF 
1539c     48 E5 05 F1 | 	add	objptr, ##41800
153a0     F2 12 02 FB | 	rdlong	arg01, objptr
153a4     51 00 00 FF 
153a8     48 E5 85 F1 | 	sub	objptr, ##41800
153ac     A7 12 62 FC | 	wrlong	arg01, fp
153b0     A7 12 02 F6 | 	mov	arg01, fp
153b4     C0 7F BF FD | 	call	#_push
153b8     A7 F0 03 F6 | 	mov	ptra, fp
153bc     B2 00 A0 FD | 	call	#popregs_
153c0                 | _do_mousex_ret
153c0     2D 00 64 FD | 	ret
153c4                 | 
153c4                 | ' 
153c4                 | ' '-------------------- mousey
153c4                 | ' 
153c4                 | ' sub do_mousey
153c4                 | _do_mousey
153c4     00 4A 05 F6 | 	mov	COUNT_, #0
153c8     A8 00 A0 FD | 	call	#pushregs_
153cc     0C F0 07 F1 | 	add	ptra, #12
153d0     08 4E 05 F1 | 	add	fp, #8
153d4     A7 3A 68 FC | 	wrlong	#29, fp
153d8     08 4E 85 F1 | 	sub	fp, #8
153dc     51 00 00 FF 
153e0     4C E5 05 F1 | 	add	objptr, ##41804
153e4     F2 12 02 FB | 	rdlong	arg01, objptr
153e8     51 00 00 FF 
153ec     4C E5 85 F1 | 	sub	objptr, ##41804
153f0     A7 12 62 FC | 	wrlong	arg01, fp
153f4     A7 12 02 F6 | 	mov	arg01, fp
153f8     7C 7F BF FD | 	call	#_push
153fc     A7 F0 03 F6 | 	mov	ptra, fp
15400     B2 00 A0 FD | 	call	#popregs_
15404                 | _do_mousey_ret
15404     2D 00 64 FD | 	ret
15408                 | 
15408                 | ' 
15408                 | ' '------------------ new
15408                 | ' 
15408                 | ' sub do_new
15408                 | _do_new
15408     03 4A 05 F6 | 	mov	COUNT_, #3
1540c     A8 00 A0 FD | 	call	#pushregs_
15410                 | ' 
15410                 | ' if inrun=1 then inrun=2
15410     50 00 00 FF 
15414     EC E4 05 F1 | 	add	objptr, ##41196
15418     F2 16 02 FB | 	rdlong	arg03, objptr
1541c     50 00 00 FF 
15420     EC E4 85 F1 | 	sub	objptr, ##41196
15424     01 16 0E F2 | 	cmp	arg03, #1 wz
15428     50 00 00 AF 
1542c     EC E4 05 A1 |  if_e	add	objptr, ##41196
15430     F2 04 68 AC |  if_e	wrlong	#2, objptr
15434     50 00 00 AF 
15438     EC E4 85 A1 |  if_e	sub	objptr, ##41196
1543c     13 12 C6 F9 | 	decod	arg01, #19
15440     01 14 66 F6 | 	neg	arg02, #1
15444     84 D2 B0 FD | 	call	#_pslpoke
15448     35 00 00 FF 
1544c     08 E4 05 F1 | 	add	objptr, ##27144
15450     F2 00 68 FC | 	wrlong	#0, objptr
15454                 | ' pslpoke(memlo,$FFFFFFFF)
15454                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
15454     00 26 06 F6 | 	mov	local01, #0
15458     20 00 00 FF 
1545c     10 E4 85 F1 | 	sub	objptr, ##16400
15460     97 1E 48 FB | 	callpa	#(@LR__1761-@LR__1760)>>2,fcache_load_ptr_
15464                 | LR__1760
15464     13 17 02 F6 | 	mov	arg03, local01
15468     04 16 66 F0 | 	shl	arg03, #4
1546c     F2 16 02 F1 | 	add	arg03, objptr
15470     B2 01 00 FF 
15474     4C 14 06 F6 | 	mov	arg02, ##@LR__5892
15478     0B 15 62 FC | 	wrlong	arg02, arg03
1547c     13 29 02 F6 | 	mov	local02, local01
15480     04 28 66 F0 | 	shl	local02, #4
15484     F2 28 02 F1 | 	add	local02, objptr
15488     0C 28 06 F1 | 	add	local02, #12
1548c     14 01 68 FC | 	wrlong	#0, local02
15490     01 26 06 F1 | 	add	local01, #1
15494     02 00 00 FF 
15498     01 26 56 F2 | 	cmps	local01, ##1025 wc
1549c     C4 FF 9F CD |  if_b	jmp	#LR__1760
154a0                 | LR__1761
154a0     35 00 00 FF 
154a4     90 E4 05 F1 | 	add	objptr, ##27280
154a8     00 04 80 FF 
154ac     F2 00 68 FC | 	wrlong	##524288, objptr
154b0     06 00 00 FF 
154b4     30 E4 05 F1 | 	add	objptr, ##3120
154b8     00 04 80 FF 
154bc     F2 00 68 FC | 	wrlong	##524288, objptr
154c0     04 E4 05 F1 | 	add	objptr, #4
154c4     00 04 80 FF 
154c8     F2 00 68 FC | 	wrlong	##524288, objptr
154cc     0D 00 00 FF 
154d0     64 E4 85 F1 | 	sub	objptr, ##6756
154d4     F2 00 68 FC | 	wrlong	#0, objptr
154d8     07 00 00 FF 
154dc     24 E4 05 F1 | 	add	objptr, ##3620
154e0     F2 00 68 FC | 	wrlong	#0, objptr
154e4     07 00 00 FF 
154e8     20 E4 85 F1 | 	sub	objptr, ##3616
154ec     00 04 80 FF 
154f0     F2 00 68 FC | 	wrlong	##524288, objptr
154f4     0D 00 00 FF 
154f8     D0 E4 05 F1 | 	add	objptr, ##6864
154fc     F2 00 68 FC | 	wrlong	#0, objptr
15500     B2 01 00 FF 
15504     4D 2A 06 F6 | 	mov	local03, ##@LR__5893
15508     01 00 00 FF 
1550c     B0 E5 05 F1 | 	add	objptr, ##944
15510     F2 2A 62 FC | 	wrlong	local03, objptr
15514     08 00 00 FF 
15518     50 E4 85 F1 | 	sub	objptr, ##4176
1551c     F2 00 68 FC | 	wrlong	#0, objptr
15520     04 E4 05 F1 | 	add	objptr, #4
15524     FF FF FF FF 
15528     F2 FE 6B FC | 	wrlong	##-1, objptr
1552c     06 00 00 FF 
15530     A0 E4 05 F1 | 	add	objptr, ##3232
15534     F2 00 68 FC | 	wrlong	#0, objptr
15538     04 E4 05 F1 | 	add	objptr, #4
1553c     F2 00 68 FC | 	wrlong	#0, objptr
15540                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
15540                 | ' stackpointer=0
15540                 | ' lineptr=0 
15540                 | ' programptr=memlo ': stringptr=0
15540                 | ' dataptr=0 : readline=""
15540                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
15540                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
15540     00 26 06 F6 | 	mov	local01, #0
15544     06 00 00 FF 
15548     9C E4 85 F1 | 	sub	objptr, ##3228
1554c     97 16 48 FB | 	callpa	#(@LR__1763-@LR__1762)>>2,fcache_load_ptr_
15550                 | LR__1762
15550     13 29 02 F6 | 	mov	local02, local01
15554     02 28 66 F0 | 	shl	local02, #2
15558     13 29 02 F1 | 	add	local02, local01
1555c     02 28 66 F0 | 	shl	local02, #2
15560     F2 28 02 F1 | 	add	local02, objptr
15564     08 28 06 F1 | 	add	local02, #8
15568     FF FF FF FF 
1556c     14 FF 6B FC | 	wrlong	##-1, local02
15570     01 26 06 F1 | 	add	local01, #1
15574     41 26 56 F2 | 	cmps	local01, #65 wc
15578     D4 FF 9F CD |  if_b	jmp	#LR__1762
1557c                 | LR__1763
1557c     4A 00 00 FF 
15580     98 E4 85 F1 | 	sub	objptr, ##38040
15584                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
15584     00 26 06 F6 | 	mov	local01, #0
15588                 | LR__1764
15588     13 29 02 F6 | 	mov	local02, local01
1558c     02 28 66 F0 | 	shl	local02, #2
15590     52 00 00 FF 
15594     54 E4 05 F1 | 	add	objptr, ##42068
15598     F2 28 02 F1 | 	add	local02, objptr
1559c     14 2B 0A FB | 	rdlong	local03, local02 wz
155a0     52 00 00 FF 
155a4     54 E4 85 F1 | 	sub	objptr, ##42068
155a8     34 00 90 AD |  if_e	jmp	#LR__1765
155ac     13 13 02 F6 | 	mov	arg01, local01
155b0     00 14 06 F6 | 	mov	arg02, #0
155b4     00 16 06 F6 | 	mov	arg03, #0
155b8     B8 DF B0 FD | 	call	#_hg010b_spin2_setspritesize
155bc     13 29 02 F6 | 	mov	local02, local01
155c0     02 28 66 F0 | 	shl	local02, #2
155c4     52 00 00 FF 
155c8     54 E4 05 F1 | 	add	objptr, ##42068
155cc     F2 28 02 F1 | 	add	local02, objptr
155d0     14 13 02 FB | 	rdlong	arg01, local02
155d4     52 00 00 FF 
155d8     54 E4 85 F1 | 	sub	objptr, ##42068
155dc     14 4C B1 FD | 	call	#__system___gc_free
155e0                 | LR__1765
155e0     01 26 06 F1 | 	add	local01, #1
155e4     10 26 56 F2 | 	cmps	local01, #16 wc
155e8     9C FF 9F CD |  if_b	jmp	#LR__1764
155ec     52 00 00 FF 
155f0     A8 E4 05 F1 | 	add	objptr, ##42152
155f4     00 C0 9F FF 
155f8     F2 00 68 FC | 	wrlong	##1065353216, objptr
155fc     04 E4 05 F1 | 	add	objptr, #4
15600     00 C0 9F FF 
15604     F2 00 68 FC | 	wrlong	##1065353216, objptr
15608     52 00 00 FF 
1560c     A8 E4 85 F1 | 	sub	objptr, ##42152
15610     F2 2A 02 FB | 	rdlong	local03, objptr
15614     52 00 00 FF 
15618     94 E4 05 F1 | 	add	objptr, ##42132
1561c     F2 2A 62 FC | 	wrlong	local03, objptr
15620     52 00 00 FF 
15624     98 E4 85 F1 | 	sub	objptr, ##42136
15628     11 12 06 F6 | 	mov	arg01, #17
1562c     08 14 06 F6 | 	mov	arg02, #8
15630     10 16 06 F6 | 	mov	arg03, #16
15634     3C DF B0 FD | 	call	#_hg010b_spin2_setspritesize
15638     10 12 06 F6 | 	mov	arg01, #16
1563c     20 14 06 F6 | 	mov	arg02, #32
15640     20 16 06 F6 | 	mov	arg03, #32
15644     2C DF B0 FD | 	call	#_hg010b_spin2_setspritesize
15648     B2 01 00 FF 
1564c     4E 2A 06 F6 | 	mov	local03, ##@LR__5894
15650     52 00 00 FF 
15654     C4 E4 05 F1 | 	add	objptr, ##42180
15658     F2 2A 62 FC | 	wrlong	local03, objptr
1565c     52 00 00 FF 
15660     C4 E4 85 F1 | 	sub	objptr, ##42180
15664     BC C2 B0 FD | 	call	#_init_audio
15668     A7 F0 03 F6 | 	mov	ptra, fp
1566c     B2 00 A0 FD | 	call	#popregs_
15670                 | _do_new_ret
15670     2D 00 64 FD | 	ret
15674                 | 
15674                 | ' 
15674                 | ' '-------------------- next
15674                 | ' 
15674                 | ' sub do_next()
15674                 | _do_next
15674     04 4A 05 F6 | 	mov	COUNT_, #4
15678     A8 00 A0 FD | 	call	#pushregs_
1567c     60 7C BF FD | 	call	#_pop
15680     FD 26 02 F6 | 	mov	local01, result1
15684     FE 28 02 F6 | 	mov	local02, result2
15688     FF 2A 02 F6 | 	mov	local03, result3
1568c                 | ' t1=pop() :varnum=t1.result.uresult
1568c                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
1568c     50 00 00 FF 
15690     30 E5 05 F1 | 	add	objptr, ##41264
15694     F2 14 02 FB | 	rdlong	arg02, objptr
15698     0A 13 02 F6 | 	mov	arg01, arg02
1569c     02 12 66 F0 | 	shl	arg01, #2
156a0     0A 13 02 F1 | 	add	arg01, arg02
156a4     02 12 66 F0 | 	shl	arg01, #2
156a8     06 00 00 FF 
156ac     98 E4 85 F1 | 	sub	objptr, ##3224
156b0     F2 12 02 F1 | 	add	arg01, objptr
156b4     08 12 06 F1 | 	add	arg01, #8
156b8     09 15 02 FB | 	rdlong	arg02, arg01
156bc     13 15 0A F2 | 	cmp	arg02, local01 wz
156c0     4A 00 00 FF 
156c4     98 E4 85 F1 | 	sub	objptr, ##38040
156c8     10 00 90 AD |  if_e	jmp	#LR__1770
156cc     25 12 06 F6 | 	mov	arg01, #37
156d0     00 14 06 F6 | 	mov	arg02, #0
156d4     54 CE B0 FD | 	call	#_printerror
156d8     54 03 90 FD | 	jmp	#LR__1777
156dc                 | LR__1770
156dc                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
156dc     13 15 02 F6 | 	mov	arg02, local01
156e0     04 14 66 F0 | 	shl	arg02, #4
156e4     14 00 00 FF 
156e8     F8 E5 05 F1 | 	add	objptr, ##10744
156ec     F2 14 02 F1 | 	add	arg02, objptr
156f0     0C 14 06 F1 | 	add	arg02, #12
156f4     0A 15 02 FB | 	rdlong	arg02, arg02
156f8     1E 14 0E F2 | 	cmp	arg02, #30 wz
156fc     14 00 00 FF 
15700     F8 E5 85 F1 | 	sub	objptr, ##10744
15704     54 00 90 5D |  if_ne	jmp	#LR__1771
15708     13 15 02 F6 | 	mov	arg02, local01
1570c     04 14 66 F0 | 	shl	arg02, #4
15710     14 00 00 FF 
15714     F8 E5 05 F1 | 	add	objptr, ##10744
15718     F2 14 02 F1 | 	add	arg02, objptr
1571c     0C 14 06 F1 | 	add	arg02, #12
15720     0A 39 68 FC | 	wrlong	#28, arg02
15724     13 2D 02 F6 | 	mov	local04, local01
15728     04 2C 66 F0 | 	shl	local04, #4
1572c     F2 2C 02 F1 | 	add	local04, objptr
15730     13 15 02 F6 | 	mov	arg02, local01
15734     04 14 66 F0 | 	shl	arg02, #4
15738     F2 14 02 F1 | 	add	arg02, objptr
1573c     04 14 06 F1 | 	add	arg02, #4
15740     0A 13 02 FB | 	rdlong	arg01, arg02
15744     14 00 00 FF 
15748     F8 E5 85 F1 | 	sub	objptr, ##10744
1574c     01 14 06 F6 | 	mov	arg02, #1
15750     04 3B B1 FD | 	call	#__system___float_tointeger
15754     04 2C 06 F1 | 	add	local04, #4
15758     16 FB 61 FC | 	wrlong	result1, local04
1575c                 | LR__1771
1575c     50 00 00 FF 
15760     30 E5 05 F1 | 	add	objptr, ##41264
15764     F2 2C 02 FB | 	rdlong	local04, objptr
15768     16 15 02 F6 | 	mov	arg02, local04
1576c     02 14 66 F0 | 	shl	arg02, #2
15770     16 15 02 F1 | 	add	arg02, local04
15774     02 14 66 F0 | 	shl	arg02, #2
15778     06 00 00 FF 
1577c     98 E4 85 F1 | 	sub	objptr, ##3224
15780     F2 14 02 F1 | 	add	arg02, objptr
15784     0C 14 06 F1 | 	add	arg02, #12
15788     0A FF 01 FB | 	rdlong	result3, arg02
1578c     13 2D 02 F6 | 	mov	local04, local01
15790     04 2C 66 F0 | 	shl	local04, #4
15794     35 00 00 FF 
15798     A0 E4 85 F1 | 	sub	objptr, ##27296
1579c     F2 2C 02 F1 | 	add	local04, objptr
157a0     13 15 02 F6 | 	mov	arg02, local01
157a4     04 14 66 F0 | 	shl	arg02, #4
157a8     F2 14 02 F1 | 	add	arg02, objptr
157ac     04 14 06 F1 | 	add	arg02, #4
157b0     0A 13 02 FB | 	rdlong	arg01, arg02
157b4     FF 12 02 F1 | 	add	arg01, result3
157b8     04 2C 06 F1 | 	add	local04, #4
157bc     16 13 62 FC | 	wrlong	arg01, local04
157c0                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
157c0                 | ' if fortable(fortop).stepval>=0 then
157c0     3B 00 00 FF 
157c4     38 E5 05 F1 | 	add	objptr, ##30520
157c8     F2 2C 02 FB | 	rdlong	local04, objptr
157cc     16 13 02 F6 | 	mov	arg01, local04
157d0     02 12 66 F0 | 	shl	arg01, #2
157d4     16 13 02 F1 | 	add	arg01, local04
157d8     02 12 66 F0 | 	shl	arg01, #2
157dc     06 00 00 FF 
157e0     98 E4 85 F1 | 	sub	objptr, ##3224
157e4     F2 12 02 F1 | 	add	arg01, objptr
157e8     0C 12 06 F1 | 	add	arg01, #12
157ec     09 13 02 FB | 	rdlong	arg01, arg01
157f0     00 12 56 F2 | 	cmps	arg01, #0 wc
157f4     4A 00 00 FF 
157f8     98 E4 85 F1 | 	sub	objptr, ##38040
157fc     78 00 90 CD |  if_b	jmp	#LR__1772
15800                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
15800     04 26 66 F0 | 	shl	local01, #4
15804     14 00 00 FF 
15808     F8 E5 05 F1 | 	add	objptr, ##10744
1580c     F2 26 02 F1 | 	add	local01, objptr
15810     3B 00 00 FF 
15814     38 E5 05 F1 | 	add	objptr, ##30520
15818     F2 12 02 FB | 	rdlong	arg01, objptr
1581c     09 2D 02 F6 | 	mov	local04, arg01
15820     02 2C 66 F0 | 	shl	local04, #2
15824     09 2D 02 F1 | 	add	local04, arg01
15828     02 2C 66 F0 | 	shl	local04, #2
1582c     06 00 00 FF 
15830     98 E4 85 F1 | 	sub	objptr, ##3224
15834     F2 2C 02 F1 | 	add	local04, objptr
15838     04 26 06 F1 | 	add	local01, #4
1583c     13 27 02 FB | 	rdlong	local01, local01
15840     10 2C 06 F1 | 	add	local04, #16
15844     16 2D 02 FB | 	rdlong	local04, local04
15848     16 27 5A F2 | 	cmps	local01, local04 wcz
1584c     4A 00 00 FF 
15850     98 E4 85 F1 | 	sub	objptr, ##38040
15854     9C 00 90 ED |  if_be	jmp	#LR__1774
15858     50 00 00 FF 
1585c     30 E5 05 F1 | 	add	objptr, ##41264
15860     F2 2C 02 FB | 	rdlong	local04, objptr
15864     01 2C 86 F1 | 	sub	local04, #1
15868     F2 2C 62 FC | 	wrlong	local04, objptr
1586c     50 00 00 FF 
15870     30 E5 85 F1 | 	sub	objptr, ##41264
15874     B8 01 90 FD | 	jmp	#LR__1777
15878                 | LR__1772
15878                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
15878     13 2D 02 F6 | 	mov	local04, local01
1587c     04 2C 66 F0 | 	shl	local04, #4
15880     14 00 00 FF 
15884     F8 E5 05 F1 | 	add	objptr, ##10744
15888     F2 2C 02 F1 | 	add	local04, objptr
1588c     3B 00 00 FF 
15890     38 E5 05 F1 | 	add	objptr, ##30520
15894     F2 26 02 FB | 	rdlong	local01, objptr
15898     13 13 02 F6 | 	mov	arg01, local01
1589c     02 12 66 F0 | 	shl	arg01, #2
158a0     13 13 02 F1 | 	add	arg01, local01
158a4     02 12 66 F0 | 	shl	arg01, #2
158a8     06 00 00 FF 
158ac     98 E4 85 F1 | 	sub	objptr, ##3224
158b0     F2 12 02 F1 | 	add	arg01, objptr
158b4     04 2C 06 F1 | 	add	local04, #4
158b8     16 2D 02 FB | 	rdlong	local04, local04
158bc     10 12 06 F1 | 	add	arg01, #16
158c0     09 13 02 FB | 	rdlong	arg01, arg01
158c4     09 2D 52 F2 | 	cmps	local04, arg01 wc
158c8     4A 00 00 FF 
158cc     98 E4 85 F1 | 	sub	objptr, ##38040
158d0     20 00 90 3D |  if_ae	jmp	#LR__1773
158d4     50 00 00 FF 
158d8     30 E5 05 F1 | 	add	objptr, ##41264
158dc     F2 2C 02 FB | 	rdlong	local04, objptr
158e0     01 2C 86 F1 | 	sub	local04, #1
158e4     F2 2C 62 FC | 	wrlong	local04, objptr
158e8     50 00 00 FF 
158ec     30 E5 85 F1 | 	sub	objptr, ##41264
158f0     3C 01 90 FD | 	jmp	#LR__1777
158f4                 | LR__1773
158f4                 | LR__1774
158f4                 | ' ' if not returned, goto pointer 
158f4                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
158f4     50 00 00 FF 
158f8     EC E4 05 F1 | 	add	objptr, ##41196
158fc     F2 2C 02 FB | 	rdlong	local04, objptr
15900     50 00 00 FF 
15904     EC E4 85 F1 | 	sub	objptr, ##41196
15908     01 2C 16 F2 | 	cmp	local04, #1 wc
1590c     DC 00 90 CD |  if_b	jmp	#LR__1775
15910     50 00 00 FF 
15914     30 E5 05 F1 | 	add	objptr, ##41264
15918     F2 2C 02 FB | 	rdlong	local04, objptr
1591c     16 27 02 F6 | 	mov	local01, local04
15920     02 26 66 F0 | 	shl	local01, #2
15924     16 27 02 F1 | 	add	local01, local04
15928     02 26 66 F0 | 	shl	local01, #2
1592c     06 00 00 FF 
15930     98 E4 85 F1 | 	sub	objptr, ##3224
15934     F2 26 02 F1 | 	add	local01, objptr
15938     06 00 00 FF 
1593c     20 E4 05 F1 | 	add	objptr, ##3104
15940     F2 2C 02 FB | 	rdlong	local04, objptr
15944     50 00 00 FF 
15948     B8 E4 85 F1 | 	sub	objptr, ##41144
1594c     13 27 02 FB | 	rdlong	local01, local01
15950     13 2D 0A F2 | 	cmp	local04, local01 wz
15954     94 00 90 AD |  if_e	jmp	#LR__1775
15958     50 00 00 FF 
1595c     30 E5 05 F1 | 	add	objptr, ##41264
15960     F2 2C 02 FB | 	rdlong	local04, objptr
15964     16 27 02 F6 | 	mov	local01, local04
15968     02 26 66 F0 | 	shl	local01, #2
1596c     16 27 02 F1 | 	add	local01, local04
15970     02 26 66 F0 | 	shl	local01, #2
15974     06 00 00 FF 
15978     98 E4 85 F1 | 	sub	objptr, ##3224
1597c     F2 26 02 F1 | 	add	local01, objptr
15980     13 27 02 FB | 	rdlong	local01, local01
15984     06 00 00 FF 
15988     20 E4 05 F1 | 	add	objptr, ##3104
1598c     F2 26 62 FC | 	wrlong	local01, objptr
15990     78 E4 05 F1 | 	add	objptr, #120
15994     F2 2C 02 FB | 	rdlong	local04, objptr
15998     16 27 02 F6 | 	mov	local01, local04
1599c     02 26 66 F0 | 	shl	local01, #2
159a0     16 27 02 F1 | 	add	local01, local04
159a4     02 26 66 F0 | 	shl	local01, #2
159a8     06 00 00 FF 
159ac     98 E4 85 F1 | 	sub	objptr, ##3224
159b0     F2 26 02 F1 | 	add	local01, objptr
159b4     04 26 06 F1 | 	add	local01, #4
159b8     13 27 02 FB | 	rdlong	local01, local01
159bc     06 00 00 FF 
159c0     24 E4 05 F1 | 	add	objptr, ##3108
159c4     F2 26 62 FC | 	wrlong	local01, objptr
159c8     06 00 00 FF 
159cc     40 E4 85 F1 | 	sub	objptr, ##3136
159d0     F2 2C 02 FB | 	rdlong	local04, objptr
159d4     01 2C 86 F1 | 	sub	local04, #1
159d8     04 E4 05 F1 | 	add	objptr, #4
159dc     F2 2C 62 FC | 	wrlong	local04, objptr
159e0     4A 00 00 FF 
159e4     80 E4 85 F1 | 	sub	objptr, ##38016
159e8     44 00 90 FD | 	jmp	#LR__1776
159ec                 | LR__1775
159ec     50 00 00 FF 
159f0     30 E5 05 F1 | 	add	objptr, ##41264
159f4     F2 2C 02 FB | 	rdlong	local04, objptr
159f8     16 27 02 F6 | 	mov	local01, local04
159fc     02 26 66 F0 | 	shl	local01, #2
15a00     16 27 02 F1 | 	add	local01, local04
15a04     02 26 66 F0 | 	shl	local01, #2
15a08     06 00 00 FF 
15a0c     98 E4 85 F1 | 	sub	objptr, ##3224
15a10     F2 26 02 F1 | 	add	local01, objptr
15a14     04 26 06 F1 | 	add	local01, #4
15a18     13 27 02 FB | 	rdlong	local01, local01
15a1c     01 26 86 F1 | 	sub	local01, #1
15a20     18 E4 85 F1 | 	sub	objptr, #24
15a24     F2 26 62 FC | 	wrlong	local01, objptr
15a28     4A 00 00 FF 
15a2c     80 E4 85 F1 | 	sub	objptr, ##38016
15a30                 | LR__1776
15a30                 | LR__1777
15a30     A7 F0 03 F6 | 	mov	ptra, fp
15a34     B2 00 A0 FD | 	call	#popregs_
15a38                 | _do_next_ret
15a38     2D 00 64 FD | 	ret
15a3c                 | 
15a3c                 | ' 
15a3c                 | ' '-------------------- no command (print "Unknown command")
15a3c                 | ' 
15a3c                 | ' sub do_no_command
15a3c                 | _do_no_command
15a3c     50 00 00 FF 
15a40     F0 E4 05 F1 | 	add	objptr, ##41200
15a44     F2 14 02 FB | 	rdlong	arg02, objptr
15a48     50 00 00 FF 
15a4c     F0 E4 85 F1 | 	sub	objptr, ##41200
15a50     17 12 06 F6 | 	mov	arg01, #23
15a54     D4 CA B0 FD | 	call	#_printerror
15a58                 | _do_no_command_ret
15a58     2D 00 64 FD | 	ret
15a5c                 | 
15a5c                 | ' 
15a5c                 | ' '-------------------- nothing
15a5c                 | ' 
15a5c                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
15a5c                 | _do_nothing
15a5c                 | _do_nothing_ret
15a5c     2D 00 64 FD | 	ret
15a60                 | 
15a60                 | ' 
15a60                 | ' '-------------------- on
15a60                 | ' 
15a60                 | ' sub do_on
15a60                 | _do_on
15a60     01 4A 05 F6 | 	mov	COUNT_, #1
15a64     A8 00 A0 FD | 	call	#pushregs_
15a68     18 F0 07 F1 | 	add	ptra, #24
15a6c     4A 00 00 FF 
15a70     80 E4 05 F1 | 	add	objptr, ##38016
15a74     F2 12 02 FB | 	rdlong	arg01, objptr
15a78     09 FD 01 F6 | 	mov	result2, arg01
15a7c     01 FC 65 F0 | 	shl	result2, #1
15a80     09 FD 01 F1 | 	add	result2, arg01
15a84     02 FC 65 F0 | 	shl	result2, #2
15a88     03 00 00 FF 
15a8c     04 E4 85 F1 | 	sub	objptr, ##1540
15a90     F2 FC 01 F1 | 	add	result2, objptr
15a94     FE 12 02 FB | 	rdlong	arg01, result2
15a98     14 4E 05 F1 | 	add	fp, #20
15a9c     A7 12 62 FC | 	wrlong	arg01, fp
15aa0     03 00 00 FF 
15aa4     04 E4 05 F1 | 	add	objptr, ##1540
15aa8     F2 12 02 FB | 	rdlong	arg01, objptr
15aac     09 27 02 F6 | 	mov	local01, arg01
15ab0     01 26 66 F0 | 	shl	local01, #1
15ab4     09 27 02 F1 | 	add	local01, arg01
15ab8     02 26 66 F0 | 	shl	local01, #2
15abc     03 00 00 FF 
15ac0     04 E4 85 F1 | 	sub	objptr, ##1540
15ac4     F2 26 02 F1 | 	add	local01, objptr
15ac8     04 26 06 F1 | 	add	local01, #4
15acc     13 27 02 FB | 	rdlong	local01, local01
15ad0     08 4E 85 F1 | 	sub	fp, #8
15ad4     A7 26 62 FC | 	wrlong	local01, fp
15ad8     0C 4E 85 F1 | 	sub	fp, #12
15adc     47 00 00 FF 
15ae0     7C E4 85 F1 | 	sub	objptr, ##36476
15ae4     F8 77 BF FD | 	call	#_pop
15ae8     FF 26 02 F6 | 	mov	local01, result3
15aec     A7 FA 61 FC | 	wrlong	result1, fp
15af0     04 4E 05 F1 | 	add	fp, #4
15af4     A7 FC 61 FC | 	wrlong	result2, fp
15af8     04 4E 05 F1 | 	add	fp, #4
15afc     A7 26 62 FC | 	wrlong	local01, fp
15b00     08 4E 85 F1 | 	sub	fp, #8
15b04     A7 12 02 F6 | 	mov	arg01, fp
15b08     B8 79 BF FD | 	call	#_converttoint
15b0c     10 4E 05 F1 | 	add	fp, #16
15b10     A7 FA 61 FC | 	wrlong	result1, fp
15b14                 | ' 
15b14                 | ' numpar=compiledline(lineptr_e).result.uresult
15b14                 | ' skip=compiledline(lineptr_e).result.twowords(1)
15b14                 | ' t1=pop()
15b14                 | ' t=converttoint(t1)
15b14                 | ' if t<1 orelse t>numpar then return
15b14     10 4E 85 F1 | 	sub	fp, #16
15b18     01 FA 55 F2 | 	cmps	result1, #1 wc
15b1c     58 00 90 CD |  if_b	jmp	#LR__1780
15b20     10 4E 05 F1 | 	add	fp, #16
15b24     A7 26 02 FB | 	rdlong	local01, fp
15b28     04 4E 05 F1 | 	add	fp, #4
15b2c     A7 12 02 FB | 	rdlong	arg01, fp
15b30     14 4E 85 F1 | 	sub	fp, #20
15b34     09 27 5A F2 | 	cmps	local01, arg01 wcz
15b38     3C 00 90 1D |  if_a	jmp	#LR__1780
15b3c     10 4E 05 F1 | 	add	fp, #16
15b40     A7 26 02 FB | 	rdlong	local01, fp
15b44     01 26 86 F1 | 	sub	local01, #1
15b48     04 4E 85 F1 | 	sub	fp, #4
15b4c     A7 12 02 FB | 	rdlong	arg01, fp
15b50     13 13 02 FD | 	qmul	arg01, local01
15b54     4A 00 00 FF 
15b58     80 E4 05 F1 | 	add	objptr, ##38016
15b5c     F2 26 02 FB | 	rdlong	local01, objptr
15b60     0C 4E 85 F1 | 	sub	fp, #12
15b64     18 12 62 FD | 	getqx	arg01
15b68     09 27 02 F1 | 	add	local01, arg01
15b6c     F2 26 62 FC | 	wrlong	local01, objptr
15b70     4A 00 00 FF 
15b74     80 E4 85 F1 | 	sub	objptr, ##38016
15b78                 | LR__1780
15b78     A7 F0 03 F6 | 	mov	ptra, fp
15b7c     B2 00 A0 FD | 	call	#popregs_
15b80                 | _do_on_ret
15b80     2D 00 64 FD | 	ret
15b84                 | 
15b84                 | ' 
15b84                 | ' '-------------------- open
15b84                 | ' 
15b84                 | ' sub do_open
15b84                 | _do_open
15b84     02 4A 05 F6 | 	mov	COUNT_, #2
15b88     A8 00 A0 FD | 	call	#pushregs_
15b8c     20 F0 07 F1 | 	add	ptra, #32
15b90     4A 00 00 FF 
15b94     80 E4 05 F1 | 	add	objptr, ##38016
15b98     F2 16 02 FB | 	rdlong	arg03, objptr
15b9c     0B 15 02 F6 | 	mov	arg02, arg03
15ba0     01 14 66 F0 | 	shl	arg02, #1
15ba4     0B 15 02 F1 | 	add	arg02, arg03
15ba8     02 14 66 F0 | 	shl	arg02, #2
15bac     03 00 00 FF 
15bb0     04 E4 85 F1 | 	sub	objptr, ##1540
15bb4     F2 14 02 F1 | 	add	arg02, objptr
15bb8     0A 17 02 FB | 	rdlong	arg03, arg02
15bbc     10 4E 05 F1 | 	add	fp, #16
15bc0     A7 16 62 FC | 	wrlong	arg03, fp
15bc4     10 4E 85 F1 | 	sub	fp, #16
15bc8     47 00 00 FF 
15bcc     7C E4 85 F1 | 	sub	objptr, ##36476
15bd0     0C 77 BF FD | 	call	#_pop
15bd4     FF 16 02 F6 | 	mov	arg03, result3
15bd8     A7 FA 61 FC | 	wrlong	result1, fp
15bdc     04 4E 05 F1 | 	add	fp, #4
15be0     A7 FC 61 FC | 	wrlong	result2, fp
15be4     04 4E 05 F1 | 	add	fp, #4
15be8     A7 16 62 FC | 	wrlong	arg03, fp
15bec                 | ' 
15bec                 | ' numpar=compiledline(lineptr_e).result.uresult
15bec                 | ' 
15bec                 | ' t1=pop()
15bec                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15bec     08 4E 85 F1 | 	sub	fp, #8
15bf0     2B 16 0E F2 | 	cmp	arg03, #43 wz
15bf4     18 00 90 5D |  if_ne	jmp	#LR__1790
15bf8     A7 12 02 FB | 	rdlong	arg01, fp
15bfc     58 78 BF FD | 	call	#_convertstring
15c00     A7 FA 61 FC | 	wrlong	result1, fp
15c04     08 4E 05 F1 | 	add	fp, #8
15c08     A7 3E 68 FC | 	wrlong	#31, fp
15c0c     08 4E 85 F1 | 	sub	fp, #8
15c10                 | LR__1790
15c10                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
15c10     08 4E 05 F1 | 	add	fp, #8
15c14     A7 16 02 FB | 	rdlong	arg03, fp
15c18     08 4E 85 F1 | 	sub	fp, #8
15c1c     1F 16 0E F2 | 	cmp	arg03, #31 wz
15c20     44 00 90 AD |  if_e	jmp	#LR__1791
15c24     00 12 06 F6 | 	mov	arg01, #0
15c28     14 60 B1 FD | 	call	#__system___getiolock_0602
15c2c     FD 12 02 F6 | 	mov	arg01, result1
15c30     E4 02 B1 FD | 	call	#__system___lockmem
15c34     B2 01 00 FF 
15c38     59 14 06 F6 | 	mov	arg02, ##@LR__5895
15c3c     00 12 06 F6 | 	mov	arg01, #0
15c40     00 16 06 F6 | 	mov	arg03, #0
15c44     C4 0F B1 FD | 	call	#__system___basic_print_string
15c48     00 12 06 F6 | 	mov	arg01, #0
15c4c     0A 14 06 F6 | 	mov	arg02, #10
15c50     00 16 06 F6 | 	mov	arg03, #0
15c54     5C 0F B1 FD | 	call	#__system___basic_print_char
15c58     00 12 06 F6 | 	mov	arg01, #0
15c5c     E0 5F B1 FD | 	call	#__system___getiolock_0602
15c60     FD 00 68 FC | 	wrlong	#0, result1
15c64     28 02 90 FD | 	jmp	#LR__1802
15c68                 | LR__1791
15c68     A7 16 02 FB | 	rdlong	arg03, fp
15c6c     0C 4E 05 F1 | 	add	fp, #12
15c70     A7 16 62 FC | 	wrlong	arg03, fp
15c74     0C 4E 85 F1 | 	sub	fp, #12
15c78     64 76 BF FD | 	call	#_pop
15c7c     FF 16 02 F6 | 	mov	arg03, result3
15c80     A7 FA 61 FC | 	wrlong	result1, fp
15c84     04 4E 05 F1 | 	add	fp, #4
15c88     A7 FC 61 FC | 	wrlong	result2, fp
15c8c     04 4E 05 F1 | 	add	fp, #4
15c90     A7 16 62 FC | 	wrlong	arg03, fp
15c94                 | ' filename=t1.result.sresult
15c94                 | ' t1=pop()
15c94                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15c94     08 4E 85 F1 | 	sub	fp, #8
15c98     2B 16 0E F2 | 	cmp	arg03, #43 wz
15c9c     18 00 90 5D |  if_ne	jmp	#LR__1792
15ca0     A7 12 02 FB | 	rdlong	arg01, fp
15ca4     B0 77 BF FD | 	call	#_convertstring
15ca8     A7 FA 61 FC | 	wrlong	result1, fp
15cac     08 4E 05 F1 | 	add	fp, #8
15cb0     A7 3E 68 FC | 	wrlong	#31, fp
15cb4     08 4E 85 F1 | 	sub	fp, #8
15cb8                 | LR__1792
15cb8     14 4E 05 F1 | 	add	fp, #20
15cbc     A7 00 68 FC | 	wrlong	#0, fp
15cc0                 | ' mode=0
15cc0                 | ' if t1.result_type=result_string then
15cc0     0C 4E 85 F1 | 	sub	fp, #12
15cc4     A7 14 02 FB | 	rdlong	arg02, fp
15cc8     08 4E 85 F1 | 	sub	fp, #8
15ccc     1F 14 0E F2 | 	cmp	arg02, #31 wz
15cd0     64 00 90 5D |  if_ne	jmp	#LR__1793
15cd4                 | '   if t1.result.sresult="read" then mode=1
15cd4     A7 12 02 FB | 	rdlong	arg01, fp
15cd8     B2 01 00 FF 
15cdc     6B 14 06 F6 | 	mov	arg02, ##@LR__5896
15ce0     5C 02 B1 FD | 	call	#__system___string_cmp
15ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
15ce8     14 4E 05 A1 |  if_e	add	fp, #20
15cec     A7 02 68 AC |  if_e	wrlong	#1, fp
15cf0     14 4E 85 A1 |  if_e	sub	fp, #20
15cf4                 | '   if t1.result.sresult="write" then mode=2
15cf4     A7 12 02 FB | 	rdlong	arg01, fp
15cf8     B2 01 00 FF 
15cfc     70 14 06 F6 | 	mov	arg02, ##@LR__5897
15d00     3C 02 B1 FD | 	call	#__system___string_cmp
15d04     00 FA 0D F2 | 	cmp	result1, #0 wz
15d08     14 4E 05 A1 |  if_e	add	fp, #20
15d0c     A7 04 68 AC |  if_e	wrlong	#2, fp
15d10     14 4E 85 A1 |  if_e	sub	fp, #20
15d14                 | '   if t1.result.sresult="append" then mode=4
15d14     A7 12 02 FB | 	rdlong	arg01, fp
15d18     B2 01 00 FF 
15d1c     76 14 06 F6 | 	mov	arg02, ##@LR__5898
15d20     1C 02 B1 FD | 	call	#__system___string_cmp
15d24     00 FA 0D F2 | 	cmp	result1, #0 wz
15d28     14 4E 05 A1 |  if_e	add	fp, #20
15d2c     A7 08 68 AC |  if_e	wrlong	#4, fp
15d30     14 4E 85 A1 |  if_e	sub	fp, #20
15d34     14 00 90 FD | 	jmp	#LR__1794
15d38                 | LR__1793
15d38     A7 12 02 F6 | 	mov	arg01, fp
15d3c     84 77 BF FD | 	call	#_converttoint
15d40     14 4E 05 F1 | 	add	fp, #20
15d44     A7 FA 61 FC | 	wrlong	result1, fp
15d48     14 4E 85 F1 | 	sub	fp, #20
15d4c                 | LR__1794
15d4c     90 75 BF FD | 	call	#_pop
15d50     FF 16 02 F6 | 	mov	arg03, result3
15d54     A7 FA 61 FC | 	wrlong	result1, fp
15d58     04 4E 05 F1 | 	add	fp, #4
15d5c     A7 FC 61 FC | 	wrlong	result2, fp
15d60     04 4E 05 F1 | 	add	fp, #4
15d64     A7 16 62 FC | 	wrlong	arg03, fp
15d68                 | ' t1=pop()
15d68                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
15d68     08 4E 85 F1 | 	sub	fp, #8
15d6c     2C 16 0E F2 | 	cmp	arg03, #44 wz
15d70     44 00 90 AD |  if_e	jmp	#LR__1795
15d74     00 12 06 F6 | 	mov	arg01, #0
15d78     C4 5E B1 FD | 	call	#__system___getiolock_0602
15d7c     FD 12 02 F6 | 	mov	arg01, result1
15d80     94 01 B1 FD | 	call	#__system___lockmem
15d84     B2 01 00 FF 
15d88     7D 14 06 F6 | 	mov	arg02, ##@LR__5899
15d8c     00 12 06 F6 | 	mov	arg01, #0
15d90     00 16 06 F6 | 	mov	arg03, #0
15d94     74 0E B1 FD | 	call	#__system___basic_print_string
15d98     00 12 06 F6 | 	mov	arg01, #0
15d9c     0A 14 06 F6 | 	mov	arg02, #10
15da0     00 16 06 F6 | 	mov	arg03, #0
15da4     0C 0E B1 FD | 	call	#__system___basic_print_char
15da8     00 12 06 F6 | 	mov	arg01, #0
15dac     90 5E B1 FD | 	call	#__system___getiolock_0602
15db0     FD 00 68 FC | 	wrlong	#0, result1
15db4     D8 00 90 FD | 	jmp	#LR__1802
15db8                 | LR__1795
15db8     A7 26 02 FB | 	rdlong	local01, fp
15dbc     18 4E 05 F1 | 	add	fp, #24
15dc0     A7 26 62 FC | 	wrlong	local01, fp
15dc4                 | ' channel  = t1.result.iresult
15dc4                 | ' select case  mode
15dc4     04 4E 85 F1 | 	sub	fp, #4
15dc8     A7 28 02 FB | 	rdlong	local02, fp
15dcc     14 4E 85 F1 | 	sub	fp, #20
15dd0     01 28 86 F1 | 	sub	local02, #1
15dd4     04 28 26 F3 | 	fle	local02, #4
15dd8     30 28 62 FD | 	jmprel	local02
15ddc                 | LR__1796
15ddc     10 00 90 FD | 	jmp	#LR__1797
15de0     2C 00 90 FD | 	jmp	#LR__1798
15de4     68 00 90 FD | 	jmp	#LR__1800
15de8     44 00 90 FD | 	jmp	#LR__1799
15dec     60 00 90 FD | 	jmp	#LR__1800
15df0                 | LR__1797
15df0     18 4E 05 F1 | 	add	fp, #24
15df4     A7 12 02 FB | 	rdlong	arg01, fp
15df8     0C 4E 85 F1 | 	sub	fp, #12
15dfc     A7 14 02 FB | 	rdlong	arg02, fp
15e00     0C 4E 85 F1 | 	sub	fp, #12
15e04     00 16 06 F6 | 	mov	arg03, #0
15e08     10 0D B1 FD | 	call	#__system___basic_open_string
15e0c     80 00 90 FD | 	jmp	#LR__1801
15e10                 | LR__1798
15e10     18 4E 05 F1 | 	add	fp, #24
15e14     A7 12 02 FB | 	rdlong	arg01, fp
15e18     0C 4E 85 F1 | 	sub	fp, #12
15e1c     A7 14 02 FB | 	rdlong	arg02, fp
15e20     0C 4E 85 F1 | 	sub	fp, #12
15e24     0D 16 06 F6 | 	mov	arg03, #13
15e28     F0 0C B1 FD | 	call	#__system___basic_open_string
15e2c     60 00 90 FD | 	jmp	#LR__1801
15e30                 | LR__1799
15e30     18 4E 05 F1 | 	add	fp, #24
15e34     A7 12 02 FB | 	rdlong	arg01, fp
15e38     0C 4E 85 F1 | 	sub	fp, #12
15e3c     A7 14 02 FB | 	rdlong	arg02, fp
15e40     0C 4E 85 F1 | 	sub	fp, #12
15e44     25 16 06 F6 | 	mov	arg03, #37
15e48     D0 0C B1 FD | 	call	#__system___basic_open_string
15e4c     40 00 90 FD | 	jmp	#LR__1801
15e50                 | LR__1800
15e50     00 12 06 F6 | 	mov	arg01, #0
15e54     E8 5D B1 FD | 	call	#__system___getiolock_0602
15e58     FD 12 02 F6 | 	mov	arg01, result1
15e5c     B8 00 B1 FD | 	call	#__system___lockmem
15e60     B2 01 00 FF 
15e64     8F 14 06 F6 | 	mov	arg02, ##@LR__5900
15e68     00 12 06 F6 | 	mov	arg01, #0
15e6c     00 16 06 F6 | 	mov	arg03, #0
15e70     98 0D B1 FD | 	call	#__system___basic_print_string
15e74     00 12 06 F6 | 	mov	arg01, #0
15e78     0A 14 06 F6 | 	mov	arg02, #10
15e7c     00 16 06 F6 | 	mov	arg03, #0
15e80     30 0D B1 FD | 	call	#__system___basic_print_char
15e84     00 12 06 F6 | 	mov	arg01, #0
15e88     B4 5D B1 FD | 	call	#__system___getiolock_0602
15e8c     FD 00 68 FC | 	wrlong	#0, result1
15e90                 | LR__1801
15e90                 | LR__1802
15e90     A7 F0 03 F6 | 	mov	ptra, fp
15e94     B2 00 A0 FD | 	call	#popregs_
15e98                 | _do_open_ret
15e98     2D 00 64 FD | 	ret
15e9c                 | 
15e9c                 | ' 
15e9c                 | ' ' ------------------ padh
15e9c                 | ' 
15e9c                 | ' sub do_padh
15e9c                 | _do_padh
15e9c     01 4A 05 F6 | 	mov	COUNT_, #1
15ea0     A8 00 A0 FD | 	call	#pushregs_
15ea4     14 F0 07 F1 | 	add	ptra, #20
15ea8     4A 00 00 FF 
15eac     80 E4 05 F1 | 	add	objptr, ##38016
15eb0     F2 26 02 FB | 	rdlong	local01, objptr
15eb4     13 17 02 F6 | 	mov	arg03, local01
15eb8     01 16 66 F0 | 	shl	arg03, #1
15ebc     13 17 02 F1 | 	add	arg03, local01
15ec0     02 16 66 F0 | 	shl	arg03, #2
15ec4     03 00 00 FF 
15ec8     04 E4 85 F1 | 	sub	objptr, ##1540
15ecc     F2 16 02 F1 | 	add	arg03, objptr
15ed0     0B 17 02 FB | 	rdlong	arg03, arg03
15ed4     0C 4E 05 F1 | 	add	fp, #12
15ed8     A7 16 62 FC | 	wrlong	arg03, fp
15edc                 | ' 
15edc                 | ' numpar=compiledline(lineptr_e).result.uresult
15edc                 | ' if numpar>1 then print "padh: "; : printerror(39) : return
15edc     0C 4E 85 F1 | 	sub	fp, #12
15ee0     02 16 16 F2 | 	cmp	arg03, #2 wc
15ee4     47 00 00 FF 
15ee8     7C E4 85 F1 | 	sub	objptr, ##36476
15eec     40 00 90 CD |  if_b	jmp	#LR__1810
15ef0     00 12 06 F6 | 	mov	arg01, #0
15ef4     48 5D B1 FD | 	call	#__system___getiolock_0602
15ef8     FD 12 02 F6 | 	mov	arg01, result1
15efc     18 00 B1 FD | 	call	#__system___lockmem
15f00     B2 01 00 FF 
15f04     A2 14 06 F6 | 	mov	arg02, ##@LR__5901
15f08     00 12 06 F6 | 	mov	arg01, #0
15f0c     00 16 06 F6 | 	mov	arg03, #0
15f10     F8 0C B1 FD | 	call	#__system___basic_print_string
15f14     00 12 06 F6 | 	mov	arg01, #0
15f18     24 5D B1 FD | 	call	#__system___getiolock_0602
15f1c     FD 00 68 FC | 	wrlong	#0, result1
15f20     27 12 06 F6 | 	mov	arg01, #39
15f24     00 14 06 F6 | 	mov	arg02, #0
15f28     00 C6 B0 FD | 	call	#_printerror
15f2c     F0 00 90 FD | 	jmp	#LR__1814
15f30                 | LR__1810
15f30                 | ' if numpar=0 then 
15f30     0C 4E 05 F1 | 	add	fp, #12
15f34     A7 FE 09 FB | 	rdlong	result3, fp wz
15f38     0C 4E 85 F1 | 	sub	fp, #12
15f3c     30 00 90 5D |  if_ne	jmp	#LR__1811
15f40     51 00 00 FF 
15f44     AC E5 05 F1 | 	add	objptr, ##41900
15f48     F2 26 02 FB | 	rdlong	local01, objptr
15f4c     51 00 00 FF 
15f50     AC E5 85 F1 | 	sub	objptr, ##41900
15f54     A7 26 62 FC | 	wrlong	local01, fp
15f58     08 4E 05 F1 | 	add	fp, #8
15f5c     A7 38 68 FC | 	wrlong	#28, fp
15f60     08 4E 85 F1 | 	sub	fp, #8
15f64     A7 12 02 F6 | 	mov	arg01, fp
15f68     0C 74 BF FD | 	call	#_push
15f6c                 | '   t1.result.uresult=padh(0): t1.result_type=result_int : push t1 : return
15f6c     B0 00 90 FD | 	jmp	#LR__1814
15f70                 | LR__1811
15f70     6C 73 BF FD | 	call	#_pop
15f74     A7 FA 61 FC | 	wrlong	result1, fp
15f78     04 4E 05 F1 | 	add	fp, #4
15f7c     A7 FC 61 FC | 	wrlong	result2, fp
15f80     04 4E 05 F1 | 	add	fp, #4
15f84     A7 FE 61 FC | 	wrlong	result3, fp
15f88                 | ' t1=pop()
15f88                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
15f88     08 4E 85 F1 | 	sub	fp, #8
15f8c     1C FE 0D F2 | 	cmp	result3, #28 wz
15f90     08 4E 05 51 |  if_ne	add	fp, #8
15f94     A7 26 02 5B |  if_ne	rdlong	local01, fp
15f98     08 4E 85 51 |  if_ne	sub	fp, #8
15f9c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
15fa0     70 00 90 5D |  if_ne	jmp	#LR__1813
15fa4     A7 26 02 FB | 	rdlong	local01, fp
15fa8     52 00 00 FF 
15fac     08 E5 05 F1 | 	add	objptr, ##42248
15fb0     F2 26 62 FC | 	wrlong	local01, objptr
15fb4                 | '   q=t1.result.uresult
15fb4                 | '   if q<7 then 
15fb4     52 00 00 FF 
15fb8     08 E5 85 F1 | 	sub	objptr, ##42248
15fbc     07 26 56 F2 | 	cmps	local01, #7 wc
15fc0     40 00 90 3D |  if_ae	jmp	#LR__1812
15fc4     52 00 00 FF 
15fc8     08 E5 05 F1 | 	add	objptr, ##42248
15fcc     F2 26 02 FB | 	rdlong	local01, objptr
15fd0     02 26 66 F0 | 	shl	local01, #2
15fd4     5C E5 85 F1 | 	sub	objptr, #348
15fd8     F2 26 02 F1 | 	add	local01, objptr
15fdc     13 27 02 FB | 	rdlong	local01, local01
15fe0     A7 26 62 FC | 	wrlong	local01, fp
15fe4     08 4E 05 F1 | 	add	fp, #8
15fe8     A7 38 68 FC | 	wrlong	#28, fp
15fec     08 4E 85 F1 | 	sub	fp, #8
15ff0     A7 12 02 F6 | 	mov	arg01, fp
15ff4     51 00 00 FF 
15ff8     AC E5 85 F1 | 	sub	objptr, ##41900
15ffc     78 73 BF FD | 	call	#_push
16000                 | '     t1.result.uresult=padh(q): t1.result_type=result_int : push t1 : return 
16000     1C 00 90 FD | 	jmp	#LR__1814
16004                 | LR__1812
16004     29 12 06 F6 | 	mov	arg01, #41
16008     00 14 06 F6 | 	mov	arg02, #0
1600c     1C C5 B0 FD | 	call	#_printerror
16010                 | '      printerror(41) : return
16010     0C 00 90 FD | 	jmp	#LR__1814
16014                 | LR__1813
16014     29 12 06 F6 | 	mov	arg01, #41
16018     00 14 06 F6 | 	mov	arg02, #0
1601c     0C C5 B0 FD | 	call	#_printerror
16020                 | LR__1814
16020     A7 F0 03 F6 | 	mov	ptra, fp
16024     B2 00 A0 FD | 	call	#popregs_
16028                 | _do_padh_ret
16028     2D 00 64 FD | 	ret
1602c                 | 
1602c                 | ' 
1602c                 | ' ' ------------------ padrx
1602c                 | ' 
1602c                 | ' sub do_padrx
1602c                 | _do_padrx
1602c     02 4A 05 F6 | 	mov	COUNT_, #2
16030     A8 00 A0 FD | 	call	#pushregs_
16034     14 F0 07 F1 | 	add	ptra, #20
16038     4A 00 00 FF 
1603c     80 E4 05 F1 | 	add	objptr, ##38016
16040     F2 26 02 FB | 	rdlong	local01, objptr
16044     13 17 02 F6 | 	mov	arg03, local01
16048     01 16 66 F0 | 	shl	arg03, #1
1604c     13 17 02 F1 | 	add	arg03, local01
16050     02 16 66 F0 | 	shl	arg03, #2
16054     03 00 00 FF 
16058     04 E4 85 F1 | 	sub	objptr, ##1540
1605c     F2 16 02 F1 | 	add	arg03, objptr
16060     0B 17 02 FB | 	rdlong	arg03, arg03
16064     0C 4E 05 F1 | 	add	fp, #12
16068     A7 16 62 FC | 	wrlong	arg03, fp
1606c                 | ' 
1606c                 | ' numpar=compiledline(lineptr_e).result.uresult
1606c                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
1606c     0C 4E 85 F1 | 	sub	fp, #12
16070     02 16 16 F2 | 	cmp	arg03, #2 wc
16074     47 00 00 FF 
16078     7C E4 85 F1 | 	sub	objptr, ##36476
1607c     40 00 90 CD |  if_b	jmp	#LR__1820
16080     00 12 06 F6 | 	mov	arg01, #0
16084     B8 5B B1 FD | 	call	#__system___getiolock_0602
16088     FD 12 02 F6 | 	mov	arg01, result1
1608c     88 FE B0 FD | 	call	#__system___lockmem
16090     B2 01 00 FF 
16094     A9 14 06 F6 | 	mov	arg02, ##@LR__5902
16098     00 12 06 F6 | 	mov	arg01, #0
1609c     00 16 06 F6 | 	mov	arg03, #0
160a0     68 0B B1 FD | 	call	#__system___basic_print_string
160a4     00 12 06 F6 | 	mov	arg01, #0
160a8     94 5B B1 FD | 	call	#__system___getiolock_0602
160ac     FD 00 68 FC | 	wrlong	#0, result1
160b0     27 12 06 F6 | 	mov	arg01, #39
160b4     00 14 06 F6 | 	mov	arg02, #0
160b8     70 C4 B0 FD | 	call	#_printerror
160bc     E0 01 90 FD | 	jmp	#LR__1824
160c0                 | LR__1820
160c0                 | ' if numpar=0 then 
160c0     0C 4E 05 F1 | 	add	fp, #12
160c4     A7 FE 09 FB | 	rdlong	result3, fp wz
160c8     0C 4E 85 F1 | 	sub	fp, #12
160cc     A8 00 90 5D |  if_ne	jmp	#LR__1821
160d0     00 C0 1B FF 
160d4     00 26 06 F6 | 	mov	local01, ##931135488
160d8     51 00 00 FF 
160dc     C8 E5 05 F1 | 	add	objptr, ##41928
160e0     F2 12 02 FB | 	rdlong	arg01, objptr
160e4     51 00 00 FF 
160e8     C8 E5 85 F1 | 	sub	objptr, ##41928
160ec     09 13 52 F6 | 	abs	arg01, arg01 wc
160f0     1F 28 C6 C9 |  if_b	decod	local02, #31
160f4     00 28 06 36 |  if_ae	mov	local02, #0
160f8     90 28 B1 FD | 	call	#__system___float_fromuns
160fc     14 FB 61 F5 | 	xor	result1, local02
16100     FD 12 02 F6 | 	mov	arg01, result1
16104     FF 7F 23 FF 
16108     00 14 06 F6 | 	mov	arg02, ##1191181824
1610c     84 2E B1 FD | 	call	#__system___float_div
16110     FD 14 02 F6 | 	mov	arg02, result1
16114     13 13 02 F6 | 	mov	arg01, local01
16118     A4 28 B1 FD | 	call	#__system___float_add
1611c     10 4E 05 F1 | 	add	fp, #16
16120     A7 FA 61 FC | 	wrlong	result1, fp
16124                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16124     10 4E 85 F1 | 	sub	fp, #16
16128     1F FA 05 F4 | 	bitl	result1, #31
1612c     FD 12 02 F6 | 	mov	arg01, result1
16130     89 41 1D FF 
16134     6F 14 06 F6 | 	mov	arg02, ##981668463
16138     01 16 06 F6 | 	mov	arg03, #1
1613c     84 30 B1 FD | 	call	#__system___float_cmp
16140     00 FA 55 F2 | 	cmps	result1, #0 wc
16144     10 4E 05 C1 |  if_b	add	fp, #16
16148     A7 00 68 CC |  if_b	wrlong	#0, fp
1614c     10 4E 85 C1 |  if_b	sub	fp, #16
16150     10 4E 05 F1 | 	add	fp, #16
16154     A7 26 02 FB | 	rdlong	local01, fp
16158     10 4E 85 F1 | 	sub	fp, #16
1615c     A7 26 62 FC | 	wrlong	local01, fp
16160     08 4E 05 F1 | 	add	fp, #8
16164     A7 3C 68 FC | 	wrlong	#30, fp
16168     08 4E 85 F1 | 	sub	fp, #8
1616c     A7 12 02 F6 | 	mov	arg01, fp
16170     04 72 BF FD | 	call	#_push
16174                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16174     28 01 90 FD | 	jmp	#LR__1824
16178                 | LR__1821
16178     64 71 BF FD | 	call	#_pop
1617c     A7 FA 61 FC | 	wrlong	result1, fp
16180     04 4E 05 F1 | 	add	fp, #4
16184     A7 FC 61 FC | 	wrlong	result2, fp
16188     04 4E 05 F1 | 	add	fp, #4
1618c     A7 FE 61 FC | 	wrlong	result3, fp
16190                 | ' t1=pop()
16190                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16190     08 4E 85 F1 | 	sub	fp, #8
16194     1C FE 0D F2 | 	cmp	result3, #28 wz
16198     08 4E 05 51 |  if_ne	add	fp, #8
1619c     A7 26 02 5B |  if_ne	rdlong	local01, fp
161a0     08 4E 85 51 |  if_ne	sub	fp, #8
161a4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
161a8     E8 00 90 5D |  if_ne	jmp	#LR__1823
161ac     A7 26 02 FB | 	rdlong	local01, fp
161b0     52 00 00 FF 
161b4     08 E5 05 F1 | 	add	objptr, ##42248
161b8     F2 26 62 FC | 	wrlong	local01, objptr
161bc                 | '   q=t1.result.uresult
161bc                 | '   if q<7 then 
161bc     52 00 00 FF 
161c0     08 E5 85 F1 | 	sub	objptr, ##42248
161c4     07 26 56 F2 | 	cmps	local01, #7 wc
161c8     B8 00 90 3D |  if_ae	jmp	#LR__1822
161cc     00 C0 1B FF 
161d0     00 26 06 F6 | 	mov	local01, ##931135488
161d4     52 00 00 FF 
161d8     08 E5 05 F1 | 	add	objptr, ##42248
161dc     F2 16 02 FB | 	rdlong	arg03, objptr
161e0     02 16 66 F0 | 	shl	arg03, #2
161e4     40 E5 85 F1 | 	sub	objptr, #320
161e8     F2 16 02 F1 | 	add	arg03, objptr
161ec     0B 13 02 FB | 	rdlong	arg01, arg03
161f0     51 00 00 FF 
161f4     C8 E5 85 F1 | 	sub	objptr, ##41928
161f8     09 13 52 F6 | 	abs	arg01, arg01 wc
161fc     1F 28 C6 C9 |  if_b	decod	local02, #31
16200     00 28 06 36 |  if_ae	mov	local02, #0
16204     84 27 B1 FD | 	call	#__system___float_fromuns
16208     14 FB 61 F5 | 	xor	result1, local02
1620c     FD 12 02 F6 | 	mov	arg01, result1
16210     FF 7F 23 FF 
16214     00 14 06 F6 | 	mov	arg02, ##1191181824
16218     78 2D B1 FD | 	call	#__system___float_div
1621c     FD 14 02 F6 | 	mov	arg02, result1
16220     13 13 02 F6 | 	mov	arg01, local01
16224     98 27 B1 FD | 	call	#__system___float_add
16228     10 4E 05 F1 | 	add	fp, #16
1622c     A7 FA 61 FC | 	wrlong	result1, fp
16230                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16230     10 4E 85 F1 | 	sub	fp, #16
16234     1F FA 05 F4 | 	bitl	result1, #31
16238     FD 12 02 F6 | 	mov	arg01, result1
1623c     89 41 1D FF 
16240     6F 14 06 F6 | 	mov	arg02, ##981668463
16244     01 16 06 F6 | 	mov	arg03, #1
16248     78 2F B1 FD | 	call	#__system___float_cmp
1624c     00 FA 55 F2 | 	cmps	result1, #0 wc
16250     10 4E 05 C1 |  if_b	add	fp, #16
16254     A7 00 68 CC |  if_b	wrlong	#0, fp
16258     10 4E 85 C1 |  if_b	sub	fp, #16
1625c     10 4E 05 F1 | 	add	fp, #16
16260     A7 26 02 FB | 	rdlong	local01, fp
16264     10 4E 85 F1 | 	sub	fp, #16
16268     A7 26 62 FC | 	wrlong	local01, fp
1626c     08 4E 05 F1 | 	add	fp, #8
16270     A7 3C 68 FC | 	wrlong	#30, fp
16274     08 4E 85 F1 | 	sub	fp, #8
16278     A7 12 02 F6 | 	mov	arg01, fp
1627c     F8 70 BF FD | 	call	#_push
16280                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16280     1C 00 90 FD | 	jmp	#LR__1824
16284                 | LR__1822
16284     29 12 06 F6 | 	mov	arg01, #41
16288     00 14 06 F6 | 	mov	arg02, #0
1628c     9C C2 B0 FD | 	call	#_printerror
16290                 | '      printerror(41) : return
16290     0C 00 90 FD | 	jmp	#LR__1824
16294                 | LR__1823
16294     29 12 06 F6 | 	mov	arg01, #41
16298     00 14 06 F6 | 	mov	arg02, #0
1629c     8C C2 B0 FD | 	call	#_printerror
162a0                 | LR__1824
162a0     A7 F0 03 F6 | 	mov	ptra, fp
162a4     B2 00 A0 FD | 	call	#popregs_
162a8                 | _do_padrx_ret
162a8     2D 00 64 FD | 	ret
162ac                 | 
162ac                 | ' 
162ac                 | ' ' ------------------ padry
162ac                 | ' 
162ac                 | ' sub do_padry
162ac                 | _do_padry
162ac     02 4A 05 F6 | 	mov	COUNT_, #2
162b0     A8 00 A0 FD | 	call	#pushregs_
162b4     14 F0 07 F1 | 	add	ptra, #20
162b8     4A 00 00 FF 
162bc     80 E4 05 F1 | 	add	objptr, ##38016
162c0     F2 26 02 FB | 	rdlong	local01, objptr
162c4     13 17 02 F6 | 	mov	arg03, local01
162c8     01 16 66 F0 | 	shl	arg03, #1
162cc     13 17 02 F1 | 	add	arg03, local01
162d0     02 16 66 F0 | 	shl	arg03, #2
162d4     03 00 00 FF 
162d8     04 E4 85 F1 | 	sub	objptr, ##1540
162dc     F2 16 02 F1 | 	add	arg03, objptr
162e0     0B 17 02 FB | 	rdlong	arg03, arg03
162e4     0C 4E 05 F1 | 	add	fp, #12
162e8     A7 16 62 FC | 	wrlong	arg03, fp
162ec                 | ' 
162ec                 | ' numpar=compiledline(lineptr_e).result.uresult
162ec                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
162ec     0C 4E 85 F1 | 	sub	fp, #12
162f0     02 16 16 F2 | 	cmp	arg03, #2 wc
162f4     47 00 00 FF 
162f8     7C E4 85 F1 | 	sub	objptr, ##36476
162fc     40 00 90 CD |  if_b	jmp	#LR__1830
16300     00 12 06 F6 | 	mov	arg01, #0
16304     38 59 B1 FD | 	call	#__system___getiolock_0602
16308     FD 12 02 F6 | 	mov	arg01, result1
1630c     08 FC B0 FD | 	call	#__system___lockmem
16310     B2 01 00 FF 
16314     B1 14 06 F6 | 	mov	arg02, ##@LR__5903
16318     00 12 06 F6 | 	mov	arg01, #0
1631c     00 16 06 F6 | 	mov	arg03, #0
16320     E8 08 B1 FD | 	call	#__system___basic_print_string
16324     00 12 06 F6 | 	mov	arg01, #0
16328     14 59 B1 FD | 	call	#__system___getiolock_0602
1632c     FD 00 68 FC | 	wrlong	#0, result1
16330     27 12 06 F6 | 	mov	arg01, #39
16334     00 14 06 F6 | 	mov	arg02, #0
16338     F0 C1 B0 FD | 	call	#_printerror
1633c     E0 01 90 FD | 	jmp	#LR__1834
16340                 | LR__1830
16340                 | ' if numpar=0 then 
16340     0C 4E 05 F1 | 	add	fp, #12
16344     A7 FE 09 FB | 	rdlong	result3, fp wz
16348     0C 4E 85 F1 | 	sub	fp, #12
1634c     A8 00 90 5D |  if_ne	jmp	#LR__1831
16350     00 C0 1B FF 
16354     00 26 06 F6 | 	mov	local01, ##931135488
16358     51 00 00 FF 
1635c     E4 E5 05 F1 | 	add	objptr, ##41956
16360     F2 12 02 FB | 	rdlong	arg01, objptr
16364     51 00 00 FF 
16368     E4 E5 85 F1 | 	sub	objptr, ##41956
1636c     09 13 52 F6 | 	abs	arg01, arg01 wc
16370     1F 28 C6 C9 |  if_b	decod	local02, #31
16374     00 28 06 36 |  if_ae	mov	local02, #0
16378     10 26 B1 FD | 	call	#__system___float_fromuns
1637c     14 FB 61 F5 | 	xor	result1, local02
16380     FD 12 02 F6 | 	mov	arg01, result1
16384     FF 7F 23 FF 
16388     00 14 06 F6 | 	mov	arg02, ##1191181824
1638c     04 2C B1 FD | 	call	#__system___float_div
16390     FD 14 02 F6 | 	mov	arg02, result1
16394     13 13 02 F6 | 	mov	arg01, local01
16398     24 26 B1 FD | 	call	#__system___float_add
1639c     10 4E 05 F1 | 	add	fp, #16
163a0     A7 FA 61 FC | 	wrlong	result1, fp
163a4                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
163a4     10 4E 85 F1 | 	sub	fp, #16
163a8     1F FA 05 F4 | 	bitl	result1, #31
163ac     FD 12 02 F6 | 	mov	arg01, result1
163b0     89 41 1D FF 
163b4     6F 14 06 F6 | 	mov	arg02, ##981668463
163b8     01 16 06 F6 | 	mov	arg03, #1
163bc     04 2E B1 FD | 	call	#__system___float_cmp
163c0     00 FA 55 F2 | 	cmps	result1, #0 wc
163c4     10 4E 05 C1 |  if_b	add	fp, #16
163c8     A7 00 68 CC |  if_b	wrlong	#0, fp
163cc     10 4E 85 C1 |  if_b	sub	fp, #16
163d0     10 4E 05 F1 | 	add	fp, #16
163d4     A7 26 02 FB | 	rdlong	local01, fp
163d8     10 4E 85 F1 | 	sub	fp, #16
163dc     A7 26 62 FC | 	wrlong	local01, fp
163e0     08 4E 05 F1 | 	add	fp, #8
163e4     A7 3C 68 FC | 	wrlong	#30, fp
163e8     08 4E 85 F1 | 	sub	fp, #8
163ec     A7 12 02 F6 | 	mov	arg01, fp
163f0     84 6F BF FD | 	call	#_push
163f4                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
163f4     28 01 90 FD | 	jmp	#LR__1834
163f8                 | LR__1831
163f8     E4 6E BF FD | 	call	#_pop
163fc     A7 FA 61 FC | 	wrlong	result1, fp
16400     04 4E 05 F1 | 	add	fp, #4
16404     A7 FC 61 FC | 	wrlong	result2, fp
16408     04 4E 05 F1 | 	add	fp, #4
1640c     A7 FE 61 FC | 	wrlong	result3, fp
16410                 | ' t1=pop()
16410                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16410     08 4E 85 F1 | 	sub	fp, #8
16414     1C FE 0D F2 | 	cmp	result3, #28 wz
16418     08 4E 05 51 |  if_ne	add	fp, #8
1641c     A7 26 02 5B |  if_ne	rdlong	local01, fp
16420     08 4E 85 51 |  if_ne	sub	fp, #8
16424     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16428     E8 00 90 5D |  if_ne	jmp	#LR__1833
1642c     A7 26 02 FB | 	rdlong	local01, fp
16430     52 00 00 FF 
16434     08 E5 05 F1 | 	add	objptr, ##42248
16438     F2 26 62 FC | 	wrlong	local01, objptr
1643c                 | '   q=t1.result.uresult
1643c                 | '   if q<7 then 
1643c     52 00 00 FF 
16440     08 E5 85 F1 | 	sub	objptr, ##42248
16444     07 26 56 F2 | 	cmps	local01, #7 wc
16448     B8 00 90 3D |  if_ae	jmp	#LR__1832
1644c     00 C0 1B FF 
16450     00 26 06 F6 | 	mov	local01, ##931135488
16454     52 00 00 FF 
16458     08 E5 05 F1 | 	add	objptr, ##42248
1645c     F2 16 02 FB | 	rdlong	arg03, objptr
16460     02 16 66 F0 | 	shl	arg03, #2
16464     24 E5 85 F1 | 	sub	objptr, #292
16468     F2 16 02 F1 | 	add	arg03, objptr
1646c     0B 13 02 FB | 	rdlong	arg01, arg03
16470     51 00 00 FF 
16474     E4 E5 85 F1 | 	sub	objptr, ##41956
16478     09 13 52 F6 | 	abs	arg01, arg01 wc
1647c     1F 28 C6 C9 |  if_b	decod	local02, #31
16480     00 28 06 36 |  if_ae	mov	local02, #0
16484     04 25 B1 FD | 	call	#__system___float_fromuns
16488     14 FB 61 F5 | 	xor	result1, local02
1648c     FD 12 02 F6 | 	mov	arg01, result1
16490     FF 7F 23 FF 
16494     00 14 06 F6 | 	mov	arg02, ##1191181824
16498     F8 2A B1 FD | 	call	#__system___float_div
1649c     FD 14 02 F6 | 	mov	arg02, result1
164a0     13 13 02 F6 | 	mov	arg01, local01
164a4     18 25 B1 FD | 	call	#__system___float_add
164a8     10 4E 05 F1 | 	add	fp, #16
164ac     A7 FA 61 FC | 	wrlong	result1, fp
164b0                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
164b0     10 4E 85 F1 | 	sub	fp, #16
164b4     1F FA 05 F4 | 	bitl	result1, #31
164b8     FD 12 02 F6 | 	mov	arg01, result1
164bc     89 41 1D FF 
164c0     6F 14 06 F6 | 	mov	arg02, ##981668463
164c4     01 16 06 F6 | 	mov	arg03, #1
164c8     F8 2C B1 FD | 	call	#__system___float_cmp
164cc     00 FA 55 F2 | 	cmps	result1, #0 wc
164d0     10 4E 05 C1 |  if_b	add	fp, #16
164d4     A7 00 68 CC |  if_b	wrlong	#0, fp
164d8     10 4E 85 C1 |  if_b	sub	fp, #16
164dc     10 4E 05 F1 | 	add	fp, #16
164e0     A7 26 02 FB | 	rdlong	local01, fp
164e4     10 4E 85 F1 | 	sub	fp, #16
164e8     A7 26 62 FC | 	wrlong	local01, fp
164ec     08 4E 05 F1 | 	add	fp, #8
164f0     A7 3C 68 FC | 	wrlong	#30, fp
164f4     08 4E 85 F1 | 	sub	fp, #8
164f8     A7 12 02 F6 | 	mov	arg01, fp
164fc     78 6E BF FD | 	call	#_push
16500                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16500     1C 00 90 FD | 	jmp	#LR__1834
16504                 | LR__1832
16504     29 12 06 F6 | 	mov	arg01, #41
16508     00 14 06 F6 | 	mov	arg02, #0
1650c     1C C0 B0 FD | 	call	#_printerror
16510                 | '      printerror(41) : return
16510     0C 00 90 FD | 	jmp	#LR__1834
16514                 | LR__1833
16514     29 12 06 F6 | 	mov	arg01, #41
16518     00 14 06 F6 | 	mov	arg02, #0
1651c     0C C0 B0 FD | 	call	#_printerror
16520                 | LR__1834
16520     A7 F0 03 F6 | 	mov	ptra, fp
16524     B2 00 A0 FD | 	call	#popregs_
16528                 | _do_padry_ret
16528     2D 00 64 FD | 	ret
1652c                 | 
1652c                 | ' 
1652c                 | ' ' ------------------ padrz
1652c                 | ' 
1652c                 | ' sub do_padrz
1652c                 | _do_padrz
1652c     02 4A 05 F6 | 	mov	COUNT_, #2
16530     A8 00 A0 FD | 	call	#pushregs_
16534     14 F0 07 F1 | 	add	ptra, #20
16538     4A 00 00 FF 
1653c     80 E4 05 F1 | 	add	objptr, ##38016
16540     F2 26 02 FB | 	rdlong	local01, objptr
16544     13 17 02 F6 | 	mov	arg03, local01
16548     01 16 66 F0 | 	shl	arg03, #1
1654c     13 17 02 F1 | 	add	arg03, local01
16550     02 16 66 F0 | 	shl	arg03, #2
16554     03 00 00 FF 
16558     04 E4 85 F1 | 	sub	objptr, ##1540
1655c     F2 16 02 F1 | 	add	arg03, objptr
16560     0B 17 02 FB | 	rdlong	arg03, arg03
16564     0C 4E 05 F1 | 	add	fp, #12
16568     A7 16 62 FC | 	wrlong	arg03, fp
1656c                 | ' 
1656c                 | ' numpar=compiledline(lineptr_e).result.uresult
1656c                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
1656c     0C 4E 85 F1 | 	sub	fp, #12
16570     02 16 16 F2 | 	cmp	arg03, #2 wc
16574     47 00 00 FF 
16578     7C E4 85 F1 | 	sub	objptr, ##36476
1657c     40 00 90 CD |  if_b	jmp	#LR__1840
16580     00 12 06 F6 | 	mov	arg01, #0
16584     B8 56 B1 FD | 	call	#__system___getiolock_0602
16588     FD 12 02 F6 | 	mov	arg01, result1
1658c     88 F9 B0 FD | 	call	#__system___lockmem
16590     B2 01 00 FF 
16594     B9 14 06 F6 | 	mov	arg02, ##@LR__5904
16598     00 12 06 F6 | 	mov	arg01, #0
1659c     00 16 06 F6 | 	mov	arg03, #0
165a0     68 06 B1 FD | 	call	#__system___basic_print_string
165a4     00 12 06 F6 | 	mov	arg01, #0
165a8     94 56 B1 FD | 	call	#__system___getiolock_0602
165ac     FD 00 68 FC | 	wrlong	#0, result1
165b0     27 12 06 F6 | 	mov	arg01, #39
165b4     00 14 06 F6 | 	mov	arg02, #0
165b8     70 BF B0 FD | 	call	#_printerror
165bc     E0 01 90 FD | 	jmp	#LR__1844
165c0                 | LR__1840
165c0                 | ' if numpar=0 then 
165c0     0C 4E 05 F1 | 	add	fp, #12
165c4     A7 FE 09 FB | 	rdlong	result3, fp wz
165c8     0C 4E 85 F1 | 	sub	fp, #12
165cc     A8 00 90 5D |  if_ne	jmp	#LR__1841
165d0     00 C0 1B FF 
165d4     00 26 06 F6 | 	mov	local01, ##931135488
165d8     52 00 00 FF 
165dc     00 E4 05 F1 | 	add	objptr, ##41984
165e0     F2 12 02 FB | 	rdlong	arg01, objptr
165e4     52 00 00 FF 
165e8     00 E4 85 F1 | 	sub	objptr, ##41984
165ec     09 13 52 F6 | 	abs	arg01, arg01 wc
165f0     1F 28 C6 C9 |  if_b	decod	local02, #31
165f4     00 28 06 36 |  if_ae	mov	local02, #0
165f8     90 23 B1 FD | 	call	#__system___float_fromuns
165fc     14 FB 61 F5 | 	xor	result1, local02
16600     FD 12 02 F6 | 	mov	arg01, result1
16604     FF 7F 23 FF 
16608     00 14 06 F6 | 	mov	arg02, ##1191181824
1660c     84 29 B1 FD | 	call	#__system___float_div
16610     FD 14 02 F6 | 	mov	arg02, result1
16614     13 13 02 F6 | 	mov	arg01, local01
16618     A4 23 B1 FD | 	call	#__system___float_add
1661c     10 4E 05 F1 | 	add	fp, #16
16620     A7 FA 61 FC | 	wrlong	result1, fp
16624                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16624     10 4E 85 F1 | 	sub	fp, #16
16628     1F FA 05 F4 | 	bitl	result1, #31
1662c     FD 12 02 F6 | 	mov	arg01, result1
16630     89 41 1D FF 
16634     6F 14 06 F6 | 	mov	arg02, ##981668463
16638     01 16 06 F6 | 	mov	arg03, #1
1663c     84 2B B1 FD | 	call	#__system___float_cmp
16640     00 FA 55 F2 | 	cmps	result1, #0 wc
16644     10 4E 05 C1 |  if_b	add	fp, #16
16648     A7 00 68 CC |  if_b	wrlong	#0, fp
1664c     10 4E 85 C1 |  if_b	sub	fp, #16
16650     10 4E 05 F1 | 	add	fp, #16
16654     A7 26 02 FB | 	rdlong	local01, fp
16658     10 4E 85 F1 | 	sub	fp, #16
1665c     A7 26 62 FC | 	wrlong	local01, fp
16660     08 4E 05 F1 | 	add	fp, #8
16664     A7 3C 68 FC | 	wrlong	#30, fp
16668     08 4E 85 F1 | 	sub	fp, #8
1666c     A7 12 02 F6 | 	mov	arg01, fp
16670     04 6D BF FD | 	call	#_push
16674                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16674     28 01 90 FD | 	jmp	#LR__1844
16678                 | LR__1841
16678     64 6C BF FD | 	call	#_pop
1667c     A7 FA 61 FC | 	wrlong	result1, fp
16680     04 4E 05 F1 | 	add	fp, #4
16684     A7 FC 61 FC | 	wrlong	result2, fp
16688     04 4E 05 F1 | 	add	fp, #4
1668c     A7 FE 61 FC | 	wrlong	result3, fp
16690                 | ' t1=pop()
16690                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16690     08 4E 85 F1 | 	sub	fp, #8
16694     1C FE 0D F2 | 	cmp	result3, #28 wz
16698     08 4E 05 51 |  if_ne	add	fp, #8
1669c     A7 26 02 5B |  if_ne	rdlong	local01, fp
166a0     08 4E 85 51 |  if_ne	sub	fp, #8
166a4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
166a8     E8 00 90 5D |  if_ne	jmp	#LR__1843
166ac     A7 26 02 FB | 	rdlong	local01, fp
166b0     52 00 00 FF 
166b4     08 E5 05 F1 | 	add	objptr, ##42248
166b8     F2 26 62 FC | 	wrlong	local01, objptr
166bc                 | '   q=t1.result.uresult
166bc                 | '   if q<7 then 
166bc     52 00 00 FF 
166c0     08 E5 85 F1 | 	sub	objptr, ##42248
166c4     07 26 56 F2 | 	cmps	local01, #7 wc
166c8     B8 00 90 3D |  if_ae	jmp	#LR__1842
166cc     00 C0 1B FF 
166d0     00 26 06 F6 | 	mov	local01, ##931135488
166d4     52 00 00 FF 
166d8     08 E5 05 F1 | 	add	objptr, ##42248
166dc     F2 16 02 FB | 	rdlong	arg03, objptr
166e0     02 16 66 F0 | 	shl	arg03, #2
166e4     08 E5 85 F1 | 	sub	objptr, #264
166e8     F2 16 02 F1 | 	add	arg03, objptr
166ec     0B 13 02 FB | 	rdlong	arg01, arg03
166f0     52 00 00 FF 
166f4     00 E4 85 F1 | 	sub	objptr, ##41984
166f8     09 13 52 F6 | 	abs	arg01, arg01 wc
166fc     1F 28 C6 C9 |  if_b	decod	local02, #31
16700     00 28 06 36 |  if_ae	mov	local02, #0
16704     84 22 B1 FD | 	call	#__system___float_fromuns
16708     14 FB 61 F5 | 	xor	result1, local02
1670c     FD 12 02 F6 | 	mov	arg01, result1
16710     FF 7F 23 FF 
16714     00 14 06 F6 | 	mov	arg02, ##1191181824
16718     78 28 B1 FD | 	call	#__system___float_div
1671c     FD 14 02 F6 | 	mov	arg02, result1
16720     13 13 02 F6 | 	mov	arg01, local01
16724     98 22 B1 FD | 	call	#__system___float_add
16728     10 4E 05 F1 | 	add	fp, #16
1672c     A7 FA 61 FC | 	wrlong	result1, fp
16730                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16730     10 4E 85 F1 | 	sub	fp, #16
16734     1F FA 05 F4 | 	bitl	result1, #31
16738     FD 12 02 F6 | 	mov	arg01, result1
1673c     89 41 1D FF 
16740     6F 14 06 F6 | 	mov	arg02, ##981668463
16744     01 16 06 F6 | 	mov	arg03, #1
16748     78 2A B1 FD | 	call	#__system___float_cmp
1674c     00 FA 55 F2 | 	cmps	result1, #0 wc
16750     10 4E 05 C1 |  if_b	add	fp, #16
16754     A7 00 68 CC |  if_b	wrlong	#0, fp
16758     10 4E 85 C1 |  if_b	sub	fp, #16
1675c     10 4E 05 F1 | 	add	fp, #16
16760     A7 26 02 FB | 	rdlong	local01, fp
16764     10 4E 85 F1 | 	sub	fp, #16
16768     A7 26 62 FC | 	wrlong	local01, fp
1676c     08 4E 05 F1 | 	add	fp, #8
16770     A7 3C 68 FC | 	wrlong	#30, fp
16774     08 4E 85 F1 | 	sub	fp, #8
16778     A7 12 02 F6 | 	mov	arg01, fp
1677c     F8 6B BF FD | 	call	#_push
16780                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16780     1C 00 90 FD | 	jmp	#LR__1844
16784                 | LR__1842
16784     29 12 06 F6 | 	mov	arg01, #41
16788     00 14 06 F6 | 	mov	arg02, #0
1678c     9C BD B0 FD | 	call	#_printerror
16790                 | '      printerror(41) : return
16790     0C 00 90 FD | 	jmp	#LR__1844
16794                 | LR__1843
16794     29 12 06 F6 | 	mov	arg01, #41
16798     00 14 06 F6 | 	mov	arg02, #0
1679c     8C BD B0 FD | 	call	#_printerror
167a0                 | LR__1844
167a0     A7 F0 03 F6 | 	mov	ptra, fp
167a4     B2 00 A0 FD | 	call	#popregs_
167a8                 | _do_padrz_ret
167a8     2D 00 64 FD | 	ret
167ac                 | 
167ac                 | ' ' ------------------ padx
167ac                 | ' 
167ac                 | ' sub do_padx
167ac                 | _do_padx
167ac     02 4A 05 F6 | 	mov	COUNT_, #2
167b0     A8 00 A0 FD | 	call	#pushregs_
167b4     14 F0 07 F1 | 	add	ptra, #20
167b8     4A 00 00 FF 
167bc     80 E4 05 F1 | 	add	objptr, ##38016
167c0     F2 26 02 FB | 	rdlong	local01, objptr
167c4     13 17 02 F6 | 	mov	arg03, local01
167c8     01 16 66 F0 | 	shl	arg03, #1
167cc     13 17 02 F1 | 	add	arg03, local01
167d0     02 16 66 F0 | 	shl	arg03, #2
167d4     03 00 00 FF 
167d8     04 E4 85 F1 | 	sub	objptr, ##1540
167dc     F2 16 02 F1 | 	add	arg03, objptr
167e0     0B 17 02 FB | 	rdlong	arg03, arg03
167e4     0C 4E 05 F1 | 	add	fp, #12
167e8     A7 16 62 FC | 	wrlong	arg03, fp
167ec                 | ' 
167ec                 | ' numpar=compiledline(lineptr_e).result.uresult
167ec                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
167ec     0C 4E 85 F1 | 	sub	fp, #12
167f0     02 16 16 F2 | 	cmp	arg03, #2 wc
167f4     47 00 00 FF 
167f8     7C E4 85 F1 | 	sub	objptr, ##36476
167fc     40 00 90 CD |  if_b	jmp	#LR__1850
16800     00 12 06 F6 | 	mov	arg01, #0
16804     38 54 B1 FD | 	call	#__system___getiolock_0602
16808     FD 12 02 F6 | 	mov	arg01, result1
1680c     08 F7 B0 FD | 	call	#__system___lockmem
16810     B2 01 00 FF 
16814     C1 14 06 F6 | 	mov	arg02, ##@LR__5905
16818     00 12 06 F6 | 	mov	arg01, #0
1681c     00 16 06 F6 | 	mov	arg03, #0
16820     E8 03 B1 FD | 	call	#__system___basic_print_string
16824     00 12 06 F6 | 	mov	arg01, #0
16828     14 54 B1 FD | 	call	#__system___getiolock_0602
1682c     FD 00 68 FC | 	wrlong	#0, result1
16830     27 12 06 F6 | 	mov	arg01, #39
16834     00 14 06 F6 | 	mov	arg02, #0
16838     F0 BC B0 FD | 	call	#_printerror
1683c     E0 01 90 FD | 	jmp	#LR__1854
16840                 | LR__1850
16840                 | ' if numpar=0 then 
16840     0C 4E 05 F1 | 	add	fp, #12
16844     A7 FE 09 FB | 	rdlong	result3, fp wz
16848     0C 4E 85 F1 | 	sub	fp, #12
1684c     A8 00 90 5D |  if_ne	jmp	#LR__1851
16850     00 C0 1B FF 
16854     00 26 06 F6 | 	mov	local01, ##931135488
16858     51 00 00 FF 
1685c     58 E5 05 F1 | 	add	objptr, ##41816
16860     F2 12 02 FB | 	rdlong	arg01, objptr
16864     51 00 00 FF 
16868     58 E5 85 F1 | 	sub	objptr, ##41816
1686c     09 13 52 F6 | 	abs	arg01, arg01 wc
16870     1F 28 C6 C9 |  if_b	decod	local02, #31
16874     00 28 06 36 |  if_ae	mov	local02, #0
16878     10 21 B1 FD | 	call	#__system___float_fromuns
1687c     14 FB 61 F5 | 	xor	result1, local02
16880     FD 12 02 F6 | 	mov	arg01, result1
16884     FF 7F 23 FF 
16888     00 14 06 F6 | 	mov	arg02, ##1191181824
1688c     04 27 B1 FD | 	call	#__system___float_div
16890     FD 14 02 F6 | 	mov	arg02, result1
16894     13 13 02 F6 | 	mov	arg01, local01
16898     24 21 B1 FD | 	call	#__system___float_add
1689c     10 4E 05 F1 | 	add	fp, #16
168a0     A7 FA 61 FC | 	wrlong	result1, fp
168a4                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
168a4     10 4E 85 F1 | 	sub	fp, #16
168a8     1F FA 05 F4 | 	bitl	result1, #31
168ac     FD 12 02 F6 | 	mov	arg01, result1
168b0     89 41 1D FF 
168b4     6F 14 06 F6 | 	mov	arg02, ##981668463
168b8     01 16 06 F6 | 	mov	arg03, #1
168bc     04 29 B1 FD | 	call	#__system___float_cmp
168c0     00 FA 55 F2 | 	cmps	result1, #0 wc
168c4     10 4E 05 C1 |  if_b	add	fp, #16
168c8     A7 00 68 CC |  if_b	wrlong	#0, fp
168cc     10 4E 85 C1 |  if_b	sub	fp, #16
168d0     10 4E 05 F1 | 	add	fp, #16
168d4     A7 26 02 FB | 	rdlong	local01, fp
168d8     10 4E 85 F1 | 	sub	fp, #16
168dc     A7 26 62 FC | 	wrlong	local01, fp
168e0     08 4E 05 F1 | 	add	fp, #8
168e4     A7 3C 68 FC | 	wrlong	#30, fp
168e8     08 4E 85 F1 | 	sub	fp, #8
168ec     A7 12 02 F6 | 	mov	arg01, fp
168f0     84 6A BF FD | 	call	#_push
168f4                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
168f4     28 01 90 FD | 	jmp	#LR__1854
168f8                 | LR__1851
168f8     E4 69 BF FD | 	call	#_pop
168fc     A7 FA 61 FC | 	wrlong	result1, fp
16900     04 4E 05 F1 | 	add	fp, #4
16904     A7 FC 61 FC | 	wrlong	result2, fp
16908     04 4E 05 F1 | 	add	fp, #4
1690c     A7 FE 61 FC | 	wrlong	result3, fp
16910                 | ' t1=pop()
16910                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16910     08 4E 85 F1 | 	sub	fp, #8
16914     1C FE 0D F2 | 	cmp	result3, #28 wz
16918     08 4E 05 51 |  if_ne	add	fp, #8
1691c     A7 26 02 5B |  if_ne	rdlong	local01, fp
16920     08 4E 85 51 |  if_ne	sub	fp, #8
16924     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16928     E8 00 90 5D |  if_ne	jmp	#LR__1853
1692c     A7 26 02 FB | 	rdlong	local01, fp
16930     52 00 00 FF 
16934     08 E5 05 F1 | 	add	objptr, ##42248
16938     F2 26 62 FC | 	wrlong	local01, objptr
1693c                 | '   q=t1.result.uresult
1693c                 | '   if q<7 then 
1693c     52 00 00 FF 
16940     08 E5 85 F1 | 	sub	objptr, ##42248
16944     07 26 56 F2 | 	cmps	local01, #7 wc
16948     B8 00 90 3D |  if_ae	jmp	#LR__1852
1694c     00 C0 1B FF 
16950     00 26 06 F6 | 	mov	local01, ##931135488
16954     52 00 00 FF 
16958     08 E5 05 F1 | 	add	objptr, ##42248
1695c     F2 16 02 FB | 	rdlong	arg03, objptr
16960     02 16 66 F0 | 	shl	arg03, #2
16964     B0 E5 85 F1 | 	sub	objptr, #432
16968     F2 16 02 F1 | 	add	arg03, objptr
1696c     0B 13 02 FB | 	rdlong	arg01, arg03
16970     51 00 00 FF 
16974     58 E5 85 F1 | 	sub	objptr, ##41816
16978     09 13 52 F6 | 	abs	arg01, arg01 wc
1697c     1F 28 C6 C9 |  if_b	decod	local02, #31
16980     00 28 06 36 |  if_ae	mov	local02, #0
16984     04 20 B1 FD | 	call	#__system___float_fromuns
16988     14 FB 61 F5 | 	xor	result1, local02
1698c     FD 12 02 F6 | 	mov	arg01, result1
16990     FF 7F 23 FF 
16994     00 14 06 F6 | 	mov	arg02, ##1191181824
16998     F8 25 B1 FD | 	call	#__system___float_div
1699c     FD 14 02 F6 | 	mov	arg02, result1
169a0     13 13 02 F6 | 	mov	arg01, local01
169a4     18 20 B1 FD | 	call	#__system___float_add
169a8     10 4E 05 F1 | 	add	fp, #16
169ac     A7 FA 61 FC | 	wrlong	result1, fp
169b0                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
169b0     10 4E 85 F1 | 	sub	fp, #16
169b4     1F FA 05 F4 | 	bitl	result1, #31
169b8     FD 12 02 F6 | 	mov	arg01, result1
169bc     89 41 1D FF 
169c0     6F 14 06 F6 | 	mov	arg02, ##981668463
169c4     01 16 06 F6 | 	mov	arg03, #1
169c8     F8 27 B1 FD | 	call	#__system___float_cmp
169cc     00 FA 55 F2 | 	cmps	result1, #0 wc
169d0     10 4E 05 C1 |  if_b	add	fp, #16
169d4     A7 00 68 CC |  if_b	wrlong	#0, fp
169d8     10 4E 85 C1 |  if_b	sub	fp, #16
169dc     10 4E 05 F1 | 	add	fp, #16
169e0     A7 26 02 FB | 	rdlong	local01, fp
169e4     10 4E 85 F1 | 	sub	fp, #16
169e8     A7 26 62 FC | 	wrlong	local01, fp
169ec     08 4E 05 F1 | 	add	fp, #8
169f0     A7 3C 68 FC | 	wrlong	#30, fp
169f4     08 4E 85 F1 | 	sub	fp, #8
169f8     A7 12 02 F6 | 	mov	arg01, fp
169fc     78 69 BF FD | 	call	#_push
16a00                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16a00     1C 00 90 FD | 	jmp	#LR__1854
16a04                 | LR__1852
16a04     29 12 06 F6 | 	mov	arg01, #41
16a08     00 14 06 F6 | 	mov	arg02, #0
16a0c     1C BB B0 FD | 	call	#_printerror
16a10                 | '      printerror(41) : return
16a10     0C 00 90 FD | 	jmp	#LR__1854
16a14                 | LR__1853
16a14     29 12 06 F6 | 	mov	arg01, #41
16a18     00 14 06 F6 | 	mov	arg02, #0
16a1c     0C BB B0 FD | 	call	#_printerror
16a20                 | LR__1854
16a20     A7 F0 03 F6 | 	mov	ptra, fp
16a24     B2 00 A0 FD | 	call	#popregs_
16a28                 | _do_padx_ret
16a28     2D 00 64 FD | 	ret
16a2c                 | 
16a2c                 | ' 
16a2c                 | ' ' ------------------ pady
16a2c                 | ' 
16a2c                 | ' sub do_pady
16a2c                 | _do_pady
16a2c     02 4A 05 F6 | 	mov	COUNT_, #2
16a30     A8 00 A0 FD | 	call	#pushregs_
16a34     14 F0 07 F1 | 	add	ptra, #20
16a38     4A 00 00 FF 
16a3c     80 E4 05 F1 | 	add	objptr, ##38016
16a40     F2 26 02 FB | 	rdlong	local01, objptr
16a44     13 17 02 F6 | 	mov	arg03, local01
16a48     01 16 66 F0 | 	shl	arg03, #1
16a4c     13 17 02 F1 | 	add	arg03, local01
16a50     02 16 66 F0 | 	shl	arg03, #2
16a54     03 00 00 FF 
16a58     04 E4 85 F1 | 	sub	objptr, ##1540
16a5c     F2 16 02 F1 | 	add	arg03, objptr
16a60     0B 17 02 FB | 	rdlong	arg03, arg03
16a64     0C 4E 05 F1 | 	add	fp, #12
16a68     A7 16 62 FC | 	wrlong	arg03, fp
16a6c                 | ' 
16a6c                 | ' numpar=compiledline(lineptr_e).result.uresult
16a6c                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
16a6c     0C 4E 85 F1 | 	sub	fp, #12
16a70     02 16 16 F2 | 	cmp	arg03, #2 wc
16a74     47 00 00 FF 
16a78     7C E4 85 F1 | 	sub	objptr, ##36476
16a7c     40 00 90 CD |  if_b	jmp	#LR__1860
16a80     00 12 06 F6 | 	mov	arg01, #0
16a84     B8 51 B1 FD | 	call	#__system___getiolock_0602
16a88     FD 12 02 F6 | 	mov	arg01, result1
16a8c     88 F4 B0 FD | 	call	#__system___lockmem
16a90     B2 01 00 FF 
16a94     C8 14 06 F6 | 	mov	arg02, ##@LR__5906
16a98     00 12 06 F6 | 	mov	arg01, #0
16a9c     00 16 06 F6 | 	mov	arg03, #0
16aa0     68 01 B1 FD | 	call	#__system___basic_print_string
16aa4     00 12 06 F6 | 	mov	arg01, #0
16aa8     94 51 B1 FD | 	call	#__system___getiolock_0602
16aac     FD 00 68 FC | 	wrlong	#0, result1
16ab0     27 12 06 F6 | 	mov	arg01, #39
16ab4     00 14 06 F6 | 	mov	arg02, #0
16ab8     70 BA B0 FD | 	call	#_printerror
16abc     E0 01 90 FD | 	jmp	#LR__1864
16ac0                 | LR__1860
16ac0                 | ' if numpar=0 then 
16ac0     0C 4E 05 F1 | 	add	fp, #12
16ac4     A7 FE 09 FB | 	rdlong	result3, fp wz
16ac8     0C 4E 85 F1 | 	sub	fp, #12
16acc     A8 00 90 5D |  if_ne	jmp	#LR__1861
16ad0     00 C0 1B FF 
16ad4     00 26 06 F6 | 	mov	local01, ##931135488
16ad8     51 00 00 FF 
16adc     74 E5 05 F1 | 	add	objptr, ##41844
16ae0     F2 12 02 FB | 	rdlong	arg01, objptr
16ae4     51 00 00 FF 
16ae8     74 E5 85 F1 | 	sub	objptr, ##41844
16aec     09 13 52 F6 | 	abs	arg01, arg01 wc
16af0     1F 28 C6 C9 |  if_b	decod	local02, #31
16af4     00 28 06 36 |  if_ae	mov	local02, #0
16af8     90 1E B1 FD | 	call	#__system___float_fromuns
16afc     14 FB 61 F5 | 	xor	result1, local02
16b00     FD 12 02 F6 | 	mov	arg01, result1
16b04     FF 7F 23 FF 
16b08     00 14 06 F6 | 	mov	arg02, ##1191181824
16b0c     84 24 B1 FD | 	call	#__system___float_div
16b10     FD 14 02 F6 | 	mov	arg02, result1
16b14     13 13 02 F6 | 	mov	arg01, local01
16b18     A4 1E B1 FD | 	call	#__system___float_add
16b1c     10 4E 05 F1 | 	add	fp, #16
16b20     A7 FA 61 FC | 	wrlong	result1, fp
16b24                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16b24     10 4E 85 F1 | 	sub	fp, #16
16b28     1F FA 05 F4 | 	bitl	result1, #31
16b2c     FD 12 02 F6 | 	mov	arg01, result1
16b30     89 41 1D FF 
16b34     6F 14 06 F6 | 	mov	arg02, ##981668463
16b38     01 16 06 F6 | 	mov	arg03, #1
16b3c     84 26 B1 FD | 	call	#__system___float_cmp
16b40     00 FA 55 F2 | 	cmps	result1, #0 wc
16b44     10 4E 05 C1 |  if_b	add	fp, #16
16b48     A7 00 68 CC |  if_b	wrlong	#0, fp
16b4c     10 4E 85 C1 |  if_b	sub	fp, #16
16b50     10 4E 05 F1 | 	add	fp, #16
16b54     A7 26 02 FB | 	rdlong	local01, fp
16b58     10 4E 85 F1 | 	sub	fp, #16
16b5c     A7 26 62 FC | 	wrlong	local01, fp
16b60     08 4E 05 F1 | 	add	fp, #8
16b64     A7 3C 68 FC | 	wrlong	#30, fp
16b68     08 4E 85 F1 | 	sub	fp, #8
16b6c     A7 12 02 F6 | 	mov	arg01, fp
16b70     04 68 BF FD | 	call	#_push
16b74                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16b74     28 01 90 FD | 	jmp	#LR__1864
16b78                 | LR__1861
16b78     64 67 BF FD | 	call	#_pop
16b7c     A7 FA 61 FC | 	wrlong	result1, fp
16b80     04 4E 05 F1 | 	add	fp, #4
16b84     A7 FC 61 FC | 	wrlong	result2, fp
16b88     04 4E 05 F1 | 	add	fp, #4
16b8c     A7 FE 61 FC | 	wrlong	result3, fp
16b90                 | ' t1=pop()
16b90                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16b90     08 4E 85 F1 | 	sub	fp, #8
16b94     1C FE 0D F2 | 	cmp	result3, #28 wz
16b98     08 4E 05 51 |  if_ne	add	fp, #8
16b9c     A7 26 02 5B |  if_ne	rdlong	local01, fp
16ba0     08 4E 85 51 |  if_ne	sub	fp, #8
16ba4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16ba8     E8 00 90 5D |  if_ne	jmp	#LR__1863
16bac     A7 26 02 FB | 	rdlong	local01, fp
16bb0     52 00 00 FF 
16bb4     08 E5 05 F1 | 	add	objptr, ##42248
16bb8     F2 26 62 FC | 	wrlong	local01, objptr
16bbc                 | '   q=t1.result.uresult
16bbc                 | '   if q<7 then 
16bbc     52 00 00 FF 
16bc0     08 E5 85 F1 | 	sub	objptr, ##42248
16bc4     07 26 56 F2 | 	cmps	local01, #7 wc
16bc8     B8 00 90 3D |  if_ae	jmp	#LR__1862
16bcc     00 C0 1B FF 
16bd0     00 26 06 F6 | 	mov	local01, ##931135488
16bd4     52 00 00 FF 
16bd8     08 E5 05 F1 | 	add	objptr, ##42248
16bdc     F2 16 02 FB | 	rdlong	arg03, objptr
16be0     02 16 66 F0 | 	shl	arg03, #2
16be4     94 E5 85 F1 | 	sub	objptr, #404
16be8     F2 16 02 F1 | 	add	arg03, objptr
16bec     0B 13 02 FB | 	rdlong	arg01, arg03
16bf0     51 00 00 FF 
16bf4     74 E5 85 F1 | 	sub	objptr, ##41844
16bf8     09 13 52 F6 | 	abs	arg01, arg01 wc
16bfc     1F 28 C6 C9 |  if_b	decod	local02, #31
16c00     00 28 06 36 |  if_ae	mov	local02, #0
16c04     84 1D B1 FD | 	call	#__system___float_fromuns
16c08     14 FB 61 F5 | 	xor	result1, local02
16c0c     FD 12 02 F6 | 	mov	arg01, result1
16c10     FF 7F 23 FF 
16c14     00 14 06 F6 | 	mov	arg02, ##1191181824
16c18     78 23 B1 FD | 	call	#__system___float_div
16c1c     FD 14 02 F6 | 	mov	arg02, result1
16c20     13 13 02 F6 | 	mov	arg01, local01
16c24     98 1D B1 FD | 	call	#__system___float_add
16c28     10 4E 05 F1 | 	add	fp, #16
16c2c     A7 FA 61 FC | 	wrlong	result1, fp
16c30                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16c30     10 4E 85 F1 | 	sub	fp, #16
16c34     1F FA 05 F4 | 	bitl	result1, #31
16c38     FD 12 02 F6 | 	mov	arg01, result1
16c3c     89 41 1D FF 
16c40     6F 14 06 F6 | 	mov	arg02, ##981668463
16c44     01 16 06 F6 | 	mov	arg03, #1
16c48     78 25 B1 FD | 	call	#__system___float_cmp
16c4c     00 FA 55 F2 | 	cmps	result1, #0 wc
16c50     10 4E 05 C1 |  if_b	add	fp, #16
16c54     A7 00 68 CC |  if_b	wrlong	#0, fp
16c58     10 4E 85 C1 |  if_b	sub	fp, #16
16c5c     10 4E 05 F1 | 	add	fp, #16
16c60     A7 26 02 FB | 	rdlong	local01, fp
16c64     10 4E 85 F1 | 	sub	fp, #16
16c68     A7 26 62 FC | 	wrlong	local01, fp
16c6c     08 4E 05 F1 | 	add	fp, #8
16c70     A7 3C 68 FC | 	wrlong	#30, fp
16c74     08 4E 85 F1 | 	sub	fp, #8
16c78     A7 12 02 F6 | 	mov	arg01, fp
16c7c     F8 66 BF FD | 	call	#_push
16c80                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16c80     1C 00 90 FD | 	jmp	#LR__1864
16c84                 | LR__1862
16c84     29 12 06 F6 | 	mov	arg01, #41
16c88     00 14 06 F6 | 	mov	arg02, #0
16c8c     9C B8 B0 FD | 	call	#_printerror
16c90                 | '      printerror(41) : return
16c90     0C 00 90 FD | 	jmp	#LR__1864
16c94                 | LR__1863
16c94     29 12 06 F6 | 	mov	arg01, #41
16c98     00 14 06 F6 | 	mov	arg02, #0
16c9c     8C B8 B0 FD | 	call	#_printerror
16ca0                 | LR__1864
16ca0     A7 F0 03 F6 | 	mov	ptra, fp
16ca4     B2 00 A0 FD | 	call	#popregs_
16ca8                 | _do_pady_ret
16ca8     2D 00 64 FD | 	ret
16cac                 | 
16cac                 | ' 
16cac                 | ' ' ------------------ padz
16cac                 | ' 
16cac                 | ' sub do_padz
16cac                 | _do_padz
16cac     02 4A 05 F6 | 	mov	COUNT_, #2
16cb0     A8 00 A0 FD | 	call	#pushregs_
16cb4     14 F0 07 F1 | 	add	ptra, #20
16cb8     4A 00 00 FF 
16cbc     80 E4 05 F1 | 	add	objptr, ##38016
16cc0     F2 26 02 FB | 	rdlong	local01, objptr
16cc4     13 17 02 F6 | 	mov	arg03, local01
16cc8     01 16 66 F0 | 	shl	arg03, #1
16ccc     13 17 02 F1 | 	add	arg03, local01
16cd0     02 16 66 F0 | 	shl	arg03, #2
16cd4     03 00 00 FF 
16cd8     04 E4 85 F1 | 	sub	objptr, ##1540
16cdc     F2 16 02 F1 | 	add	arg03, objptr
16ce0     0B 17 02 FB | 	rdlong	arg03, arg03
16ce4     0C 4E 05 F1 | 	add	fp, #12
16ce8     A7 16 62 FC | 	wrlong	arg03, fp
16cec                 | ' 
16cec                 | ' numpar=compiledline(lineptr_e).result.uresult
16cec                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
16cec     0C 4E 85 F1 | 	sub	fp, #12
16cf0     02 16 16 F2 | 	cmp	arg03, #2 wc
16cf4     47 00 00 FF 
16cf8     7C E4 85 F1 | 	sub	objptr, ##36476
16cfc     40 00 90 CD |  if_b	jmp	#LR__1870
16d00     00 12 06 F6 | 	mov	arg01, #0
16d04     38 4F B1 FD | 	call	#__system___getiolock_0602
16d08     FD 12 02 F6 | 	mov	arg01, result1
16d0c     08 F2 B0 FD | 	call	#__system___lockmem
16d10     B2 01 00 FF 
16d14     CF 14 06 F6 | 	mov	arg02, ##@LR__5907
16d18     00 12 06 F6 | 	mov	arg01, #0
16d1c     00 16 06 F6 | 	mov	arg03, #0
16d20     E8 FE B0 FD | 	call	#__system___basic_print_string
16d24     00 12 06 F6 | 	mov	arg01, #0
16d28     14 4F B1 FD | 	call	#__system___getiolock_0602
16d2c     FD 00 68 FC | 	wrlong	#0, result1
16d30     27 12 06 F6 | 	mov	arg01, #39
16d34     00 14 06 F6 | 	mov	arg02, #0
16d38     F0 B7 B0 FD | 	call	#_printerror
16d3c     E0 01 90 FD | 	jmp	#LR__1874
16d40                 | LR__1870
16d40                 | ' if numpar=0 then 
16d40     0C 4E 05 F1 | 	add	fp, #12
16d44     A7 FE 09 FB | 	rdlong	result3, fp wz
16d48     0C 4E 85 F1 | 	sub	fp, #12
16d4c     A8 00 90 5D |  if_ne	jmp	#LR__1871
16d50     00 C0 1B FF 
16d54     00 26 06 F6 | 	mov	local01, ##931135488
16d58     51 00 00 FF 
16d5c     90 E5 05 F1 | 	add	objptr, ##41872
16d60     F2 12 02 FB | 	rdlong	arg01, objptr
16d64     51 00 00 FF 
16d68     90 E5 85 F1 | 	sub	objptr, ##41872
16d6c     09 13 52 F6 | 	abs	arg01, arg01 wc
16d70     1F 28 C6 C9 |  if_b	decod	local02, #31
16d74     00 28 06 36 |  if_ae	mov	local02, #0
16d78     10 1C B1 FD | 	call	#__system___float_fromuns
16d7c     14 FB 61 F5 | 	xor	result1, local02
16d80     FD 12 02 F6 | 	mov	arg01, result1
16d84     FF 7F 23 FF 
16d88     00 14 06 F6 | 	mov	arg02, ##1191181824
16d8c     04 22 B1 FD | 	call	#__system___float_div
16d90     FD 14 02 F6 | 	mov	arg02, result1
16d94     13 13 02 F6 | 	mov	arg01, local01
16d98     24 1C B1 FD | 	call	#__system___float_add
16d9c     10 4E 05 F1 | 	add	fp, #16
16da0     A7 FA 61 FC | 	wrlong	result1, fp
16da4                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16da4     10 4E 85 F1 | 	sub	fp, #16
16da8     1F FA 05 F4 | 	bitl	result1, #31
16dac     FD 12 02 F6 | 	mov	arg01, result1
16db0     89 41 1D FF 
16db4     6F 14 06 F6 | 	mov	arg02, ##981668463
16db8     01 16 06 F6 | 	mov	arg03, #1
16dbc     04 24 B1 FD | 	call	#__system___float_cmp
16dc0     00 FA 55 F2 | 	cmps	result1, #0 wc
16dc4     10 4E 05 C1 |  if_b	add	fp, #16
16dc8     A7 00 68 CC |  if_b	wrlong	#0, fp
16dcc     10 4E 85 C1 |  if_b	sub	fp, #16
16dd0     10 4E 05 F1 | 	add	fp, #16
16dd4     A7 26 02 FB | 	rdlong	local01, fp
16dd8     10 4E 85 F1 | 	sub	fp, #16
16ddc     A7 26 62 FC | 	wrlong	local01, fp
16de0     08 4E 05 F1 | 	add	fp, #8
16de4     A7 3C 68 FC | 	wrlong	#30, fp
16de8     08 4E 85 F1 | 	sub	fp, #8
16dec     A7 12 02 F6 | 	mov	arg01, fp
16df0     84 65 BF FD | 	call	#_push
16df4                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16df4     28 01 90 FD | 	jmp	#LR__1874
16df8                 | LR__1871
16df8     E4 64 BF FD | 	call	#_pop
16dfc     A7 FA 61 FC | 	wrlong	result1, fp
16e00     04 4E 05 F1 | 	add	fp, #4
16e04     A7 FC 61 FC | 	wrlong	result2, fp
16e08     04 4E 05 F1 | 	add	fp, #4
16e0c     A7 FE 61 FC | 	wrlong	result3, fp
16e10                 | ' t1=pop()
16e10                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16e10     08 4E 85 F1 | 	sub	fp, #8
16e14     1C FE 0D F2 | 	cmp	result3, #28 wz
16e18     08 4E 05 51 |  if_ne	add	fp, #8
16e1c     A7 26 02 5B |  if_ne	rdlong	local01, fp
16e20     08 4E 85 51 |  if_ne	sub	fp, #8
16e24     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16e28     E8 00 90 5D |  if_ne	jmp	#LR__1873
16e2c     A7 26 02 FB | 	rdlong	local01, fp
16e30     52 00 00 FF 
16e34     08 E5 05 F1 | 	add	objptr, ##42248
16e38     F2 26 62 FC | 	wrlong	local01, objptr
16e3c                 | '   q=t1.result.uresult
16e3c                 | '   if q<7 then 
16e3c     52 00 00 FF 
16e40     08 E5 85 F1 | 	sub	objptr, ##42248
16e44     07 26 56 F2 | 	cmps	local01, #7 wc
16e48     B8 00 90 3D |  if_ae	jmp	#LR__1872
16e4c     00 C0 1B FF 
16e50     00 26 06 F6 | 	mov	local01, ##931135488
16e54     52 00 00 FF 
16e58     08 E5 05 F1 | 	add	objptr, ##42248
16e5c     F2 16 02 FB | 	rdlong	arg03, objptr
16e60     02 16 66 F0 | 	shl	arg03, #2
16e64     78 E5 85 F1 | 	sub	objptr, #376
16e68     F2 16 02 F1 | 	add	arg03, objptr
16e6c     0B 13 02 FB | 	rdlong	arg01, arg03
16e70     51 00 00 FF 
16e74     90 E5 85 F1 | 	sub	objptr, ##41872
16e78     09 13 52 F6 | 	abs	arg01, arg01 wc
16e7c     1F 28 C6 C9 |  if_b	decod	local02, #31
16e80     00 28 06 36 |  if_ae	mov	local02, #0
16e84     04 1B B1 FD | 	call	#__system___float_fromuns
16e88     14 FB 61 F5 | 	xor	result1, local02
16e8c     FD 12 02 F6 | 	mov	arg01, result1
16e90     FF 7F 23 FF 
16e94     00 14 06 F6 | 	mov	arg02, ##1191181824
16e98     F8 20 B1 FD | 	call	#__system___float_div
16e9c     FD 14 02 F6 | 	mov	arg02, result1
16ea0     13 13 02 F6 | 	mov	arg01, local01
16ea4     18 1B B1 FD | 	call	#__system___float_add
16ea8     10 4E 05 F1 | 	add	fp, #16
16eac     A7 FA 61 FC | 	wrlong	result1, fp
16eb0                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16eb0     10 4E 85 F1 | 	sub	fp, #16
16eb4     1F FA 05 F4 | 	bitl	result1, #31
16eb8     FD 12 02 F6 | 	mov	arg01, result1
16ebc     89 41 1D FF 
16ec0     6F 14 06 F6 | 	mov	arg02, ##981668463
16ec4     01 16 06 F6 | 	mov	arg03, #1
16ec8     F8 22 B1 FD | 	call	#__system___float_cmp
16ecc     00 FA 55 F2 | 	cmps	result1, #0 wc
16ed0     10 4E 05 C1 |  if_b	add	fp, #16
16ed4     A7 00 68 CC |  if_b	wrlong	#0, fp
16ed8     10 4E 85 C1 |  if_b	sub	fp, #16
16edc     10 4E 05 F1 | 	add	fp, #16
16ee0     A7 26 02 FB | 	rdlong	local01, fp
16ee4     10 4E 85 F1 | 	sub	fp, #16
16ee8     A7 26 62 FC | 	wrlong	local01, fp
16eec     08 4E 05 F1 | 	add	fp, #8
16ef0     A7 3C 68 FC | 	wrlong	#30, fp
16ef4     08 4E 85 F1 | 	sub	fp, #8
16ef8     A7 12 02 F6 | 	mov	arg01, fp
16efc     78 64 BF FD | 	call	#_push
16f00                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16f00     1C 00 90 FD | 	jmp	#LR__1874
16f04                 | LR__1872
16f04     29 12 06 F6 | 	mov	arg01, #41
16f08     00 14 06 F6 | 	mov	arg02, #0
16f0c     1C B6 B0 FD | 	call	#_printerror
16f10                 | '      printerror(41) : return
16f10     0C 00 90 FD | 	jmp	#LR__1874
16f14                 | LR__1873
16f14     29 12 06 F6 | 	mov	arg01, #41
16f18     00 14 06 F6 | 	mov	arg02, #0
16f1c     0C B6 B0 FD | 	call	#_printerror
16f20                 | LR__1874
16f20     A7 F0 03 F6 | 	mov	ptra, fp
16f24     B2 00 A0 FD | 	call	#popregs_
16f28                 | _do_padz_ret
16f28     2D 00 64 FD | 	ret
16f2c                 | 
16f2c                 | ' 
16f2c                 | ' '-------------------- paper
16f2c                 | ' 
16f2c                 | ' sub do_paper
16f2c                 | _do_paper
16f2c     03 4A 05 F6 | 	mov	COUNT_, #3
16f30     A8 00 A0 FD | 	call	#pushregs_
16f34     A8 63 BF FD | 	call	#_pop
16f38     FD 26 02 F6 | 	mov	local01, result1
16f3c     FE 28 02 F6 | 	mov	local02, result2
16f40     FF 2A 02 F6 | 	mov	local03, result3
16f44                 | ' t1=pop() 
16f44                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16f44     1E 2A 0E F2 | 	cmp	local03, #30 wz
16f48     10 00 90 5D |  if_ne	jmp	#LR__1880
16f4c     13 13 02 F6 | 	mov	arg01, local01
16f50     00 14 06 F6 | 	mov	arg02, #0
16f54     00 23 B1 FD | 	call	#__system___float_tointeger
16f58     FD 26 02 F6 | 	mov	local01, result1
16f5c                 | LR__1880
16f5c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16f5c     1F 2A 0E F2 | 	cmp	local03, #31 wz
16f60     18 00 90 5D |  if_ne	jmp	#LR__1881
16f64     13 13 02 F6 | 	mov	arg01, local01
16f68     30 26 B1 FD | 	call	#__system____builtin_atof
16f6c     FD 12 02 F6 | 	mov	arg01, result1
16f70     00 14 06 F6 | 	mov	arg02, #0
16f74     E0 22 B1 FD | 	call	#__system___float_tointeger
16f78     FD 26 02 F6 | 	mov	local01, result1
16f7c                 | LR__1881
16f7c     37 00 00 FF 
16f80     38 E4 05 F1 | 	add	objptr, ##28216
16f84     F2 26 62 FC | 	wrlong	local01, objptr
16f88     04 E4 05 F1 | 	add	objptr, #4
16f8c     F2 12 02 FB | 	rdlong	arg01, objptr
16f90                 | ' 
16f90                 | ' write_color:=ff
16f90     36 00 00 FF 
16f94     FB E5 85 F1 | 	sub	objptr, ##28155
16f98     F2 12 62 FC | 	wrlong	arg01, objptr
16f9c                 | ' write_background:=bb
16f9c     04 E4 05 F1 | 	add	objptr, #4
16fa0     F2 26 62 FC | 	wrlong	local01, objptr
16fa4     45 E4 85 F1 | 	sub	objptr, #69
16fa8     A7 F0 03 F6 | 	mov	ptra, fp
16fac     B2 00 A0 FD | 	call	#popregs_
16fb0                 | _do_paper_ret
16fb0     2D 00 64 FD | 	ret
16fb4                 | 
16fb4                 | ' 
16fb4                 | ' '-------------------- peek
16fb4                 | ' 
16fb4                 | ' sub do_peek
16fb4                 | _do_peek
16fb4     00 4A 05 F6 | 	mov	COUNT_, #0
16fb8     A8 00 A0 FD | 	call	#pushregs_
16fbc     14 F0 07 F1 | 	add	ptra, #20
16fc0     1C 63 BF FD | 	call	#_pop
16fc4     A7 FA 61 FC | 	wrlong	result1, fp
16fc8     04 4E 05 F1 | 	add	fp, #4
16fcc     A7 FC 61 FC | 	wrlong	result2, fp
16fd0     04 4E 05 F1 | 	add	fp, #4
16fd4     A7 FE 61 FC | 	wrlong	result3, fp
16fd8     08 4E 85 F1 | 	sub	fp, #8
16fdc     A7 12 02 F6 | 	mov	arg01, fp
16fe0     E0 64 BF FD | 	call	#_converttoint
16fe4     0C 4E 05 F1 | 	add	fp, #12
16fe8     A7 FA 61 FC | 	wrlong	result1, fp
16fec                 | ' 
16fec                 | ' t1=pop()
16fec                 | ' a=converttoint(t1)
16fec                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
16fec     0C 4E 85 F1 | 	sub	fp, #12
16ff0     00 04 00 FF 
16ff4     00 FA 15 F2 | 	cmp	result1, ##524288 wc
16ff8     1C 00 90 3D |  if_ae	jmp	#LR__1890
16ffc     0C 4E 05 F1 | 	add	fp, #12
17000     A7 12 02 FB | 	rdlong	arg01, fp
17004     09 FB C1 FA | 	rdbyte	result1, arg01
17008     04 4E 05 F1 | 	add	fp, #4
1700c     A7 FA 61 FC | 	wrlong	result1, fp
17010     10 4E 85 F1 | 	sub	fp, #16
17014     20 00 90 FD | 	jmp	#LR__1891
17018                 | LR__1890
17018     0C 4E 05 F1 | 	add	fp, #12
1701c     A7 12 02 FB | 	rdlong	arg01, fp
17020     0C 4E 85 F1 | 	sub	fp, #12
17024     7C B7 B0 FD | 	call	#_pspeek
17028     FD FA E1 F8 | 	getbyte	result1, result1, #0
1702c     10 4E 05 F1 | 	add	fp, #16
17030     A7 FA 61 FC | 	wrlong	result1, fp
17034     10 4E 85 F1 | 	sub	fp, #16
17038                 | LR__1891
17038     08 4E 05 F1 | 	add	fp, #8
1703c     A7 3A 68 FC | 	wrlong	#29, fp
17040     08 4E 05 F1 | 	add	fp, #8
17044     A7 12 02 FB | 	rdlong	arg01, fp
17048     10 4E 85 F1 | 	sub	fp, #16
1704c     A7 12 62 FC | 	wrlong	arg01, fp
17050     A7 12 02 F6 | 	mov	arg01, fp
17054     20 63 BF FD | 	call	#_push
17058     A7 F0 03 F6 | 	mov	ptra, fp
1705c     B2 00 A0 FD | 	call	#popregs_
17060                 | _do_peek_ret
17060     2D 00 64 FD | 	ret
17064                 | 
17064                 | ' 
17064                 | ' '-------------------- pinfloat
17064                 | ' 
17064                 | ' sub do_pinfloat
17064                 | _do_pinfloat
17064     00 4A 05 F6 | 	mov	COUNT_, #0
17068     A8 00 A0 FD | 	call	#pushregs_
1706c     0C F0 07 F1 | 	add	ptra, #12
17070     6C 62 BF FD | 	call	#_pop
17074     A7 FA 61 FC | 	wrlong	result1, fp
17078     04 4E 05 F1 | 	add	fp, #4
1707c     A7 FC 61 FC | 	wrlong	result2, fp
17080     04 4E 05 F1 | 	add	fp, #4
17084     A7 FE 61 FC | 	wrlong	result3, fp
17088     08 4E 85 F1 | 	sub	fp, #8
1708c     A7 12 02 F6 | 	mov	arg01, fp
17090     30 64 BF FD | 	call	#_converttoint
17094     50 FA 61 FD | 	fltl	result1
17098     A7 F0 03 F6 | 	mov	ptra, fp
1709c     B2 00 A0 FD | 	call	#popregs_
170a0                 | _do_pinfloat_ret
170a0     2D 00 64 FD | 	ret
170a4                 | 
170a4                 | ' 
170a4                 | ' '-------------------- pinhi
170a4                 | ' 
170a4                 | ' sub do_pinhi
170a4                 | _do_pinhi
170a4     00 4A 05 F6 | 	mov	COUNT_, #0
170a8     A8 00 A0 FD | 	call	#pushregs_
170ac     0C F0 07 F1 | 	add	ptra, #12
170b0     2C 62 BF FD | 	call	#_pop
170b4     A7 FA 61 FC | 	wrlong	result1, fp
170b8     04 4E 05 F1 | 	add	fp, #4
170bc     A7 FC 61 FC | 	wrlong	result2, fp
170c0     04 4E 05 F1 | 	add	fp, #4
170c4     A7 FE 61 FC | 	wrlong	result3, fp
170c8     08 4E 85 F1 | 	sub	fp, #8
170cc     A7 12 02 F6 | 	mov	arg01, fp
170d0     F0 63 BF FD | 	call	#_converttoint
170d4     59 FA 61 FD | 	drvh	result1
170d8     A7 F0 03 F6 | 	mov	ptra, fp
170dc     B2 00 A0 FD | 	call	#popregs_
170e0                 | _do_pinhi_ret
170e0     2D 00 64 FD | 	ret
170e4                 | 
170e4                 | ' 
170e4                 | ' '-------------------- pinlo
170e4                 | ' 
170e4                 | ' sub do_pinlo
170e4                 | _do_pinlo
170e4     00 4A 05 F6 | 	mov	COUNT_, #0
170e8     A8 00 A0 FD | 	call	#pushregs_
170ec     0C F0 07 F1 | 	add	ptra, #12
170f0     EC 61 BF FD | 	call	#_pop
170f4     A7 FA 61 FC | 	wrlong	result1, fp
170f8     04 4E 05 F1 | 	add	fp, #4
170fc     A7 FC 61 FC | 	wrlong	result2, fp
17100     04 4E 05 F1 | 	add	fp, #4
17104     A7 FE 61 FC | 	wrlong	result3, fp
17108     08 4E 85 F1 | 	sub	fp, #8
1710c     A7 12 02 F6 | 	mov	arg01, fp
17110     B0 63 BF FD | 	call	#_converttoint
17114     58 FA 61 FD | 	drvl	result1
17118     A7 F0 03 F6 | 	mov	ptra, fp
1711c     B2 00 A0 FD | 	call	#popregs_
17120                 | _do_pinlo_ret
17120     2D 00 64 FD | 	ret
17124                 | 
17124                 | ' 
17124                 | ' '-------------------- pinread
17124                 | ' 
17124                 | ' sub do_pinread
17124                 | _do_pinread
17124     00 4A 05 F6 | 	mov	COUNT_, #0
17128     A8 00 A0 FD | 	call	#pushregs_
1712c     0C F0 07 F1 | 	add	ptra, #12
17130     AC 61 BF FD | 	call	#_pop
17134     A7 FA 61 FC | 	wrlong	result1, fp
17138     04 4E 05 F1 | 	add	fp, #4
1713c     A7 FC 61 FC | 	wrlong	result2, fp
17140     04 4E 05 F1 | 	add	fp, #4
17144     A7 FE 61 FC | 	wrlong	result3, fp
17148     08 4E 85 F1 | 	sub	fp, #8
1714c     A7 12 02 F6 | 	mov	arg01, fp
17150     70 63 BF FD | 	call	#_converttoint
17154     FD 12 02 F6 | 	mov	arg01, result1
17158     20 12 CE F7 | 	test	arg01, #32 wz
1715c     FF FB 01 56 |  if_ne	mov	result1, inb
17160     FE FB 01 A6 |  if_e	mov	result1, ina
17164     09 FB 41 F0 | 	shr	result1, arg01
17168     06 12 46 F0 | 	shr	arg01, #6
1716c     09 FB 41 F7 | 	zerox	result1, arg01
17170     52 00 00 FF 
17174     10 E5 05 F1 | 	add	objptr, ##42256
17178     F2 FA 61 FC | 	wrlong	result1, objptr
1717c     52 00 00 FF 
17180     10 E5 85 F1 | 	sub	objptr, ##42256
17184     08 4E 05 F1 | 	add	fp, #8
17188     A7 3A 68 FC | 	wrlong	#29, fp
1718c     08 4E 85 F1 | 	sub	fp, #8
17190     A7 08 68 FC | 	wrlong	#4, fp
17194     A7 12 02 F6 | 	mov	arg01, fp
17198     DC 61 BF FD | 	call	#_push
1719c     A7 F0 03 F6 | 	mov	ptra, fp
171a0     B2 00 A0 FD | 	call	#popregs_
171a4                 | _do_pinread_ret
171a4     2D 00 64 FD | 	ret
171a8                 | 
171a8                 | ' 
171a8                 | ' '-------------------- pinstart
171a8                 | ' 
171a8                 | ' sub do_pinstart
171a8                 | _do_pinstart
171a8     03 4A 05 F6 | 	mov	COUNT_, #3
171ac     A8 00 A0 FD | 	call	#pushregs_
171b0     30 F0 07 F1 | 	add	ptra, #48
171b4     28 61 BF FD | 	call	#_pop
171b8     FD 16 02 F6 | 	mov	arg03, result1
171bc     FE 14 02 F6 | 	mov	arg02, result2
171c0     FF 18 02 F6 | 	mov	arg04, result3
171c4     A7 16 62 FC | 	wrlong	arg03, fp
171c8     04 4E 05 F1 | 	add	fp, #4
171cc     A7 14 62 FC | 	wrlong	arg02, fp
171d0     04 4E 05 F1 | 	add	fp, #4
171d4     A7 18 62 FC | 	wrlong	arg04, fp
171d8     08 4E 85 F1 | 	sub	fp, #8
171dc     00 61 BF FD | 	call	#_pop
171e0     FD 16 02 F6 | 	mov	arg03, result1
171e4     FE 14 02 F6 | 	mov	arg02, result2
171e8     FF 18 02 F6 | 	mov	arg04, result3
171ec     0C 4E 05 F1 | 	add	fp, #12
171f0     A7 16 62 FC | 	wrlong	arg03, fp
171f4     04 4E 05 F1 | 	add	fp, #4
171f8     A7 14 62 FC | 	wrlong	arg02, fp
171fc     04 4E 05 F1 | 	add	fp, #4
17200     A7 18 62 FC | 	wrlong	arg04, fp
17204     14 4E 85 F1 | 	sub	fp, #20
17208     D4 60 BF FD | 	call	#_pop
1720c     FD 16 02 F6 | 	mov	arg03, result1
17210     FE 14 02 F6 | 	mov	arg02, result2
17214     FF 18 02 F6 | 	mov	arg04, result3
17218     18 4E 05 F1 | 	add	fp, #24
1721c     A7 16 62 FC | 	wrlong	arg03, fp
17220     04 4E 05 F1 | 	add	fp, #4
17224     A7 14 62 FC | 	wrlong	arg02, fp
17228     04 4E 05 F1 | 	add	fp, #4
1722c     A7 18 62 FC | 	wrlong	arg04, fp
17230     20 4E 85 F1 | 	sub	fp, #32
17234     A8 60 BF FD | 	call	#_pop
17238     FF 16 02 F6 | 	mov	arg03, result3
1723c     24 4E 05 F1 | 	add	fp, #36
17240     A7 FA 61 FC | 	wrlong	result1, fp
17244     04 4E 05 F1 | 	add	fp, #4
17248     A7 FC 61 FC | 	wrlong	result2, fp
1724c     04 4E 05 F1 | 	add	fp, #4
17250     A7 16 62 FC | 	wrlong	arg03, fp
17254     08 4E 85 F1 | 	sub	fp, #8
17258     A7 12 02 F6 | 	mov	arg01, fp
1725c     24 4E 85 F1 | 	sub	fp, #36
17260     60 62 BF FD | 	call	#_converttoint
17264     FD 26 02 F6 | 	mov	local01, result1
17268     18 4E 05 F1 | 	add	fp, #24
1726c     A7 12 02 F6 | 	mov	arg01, fp
17270     18 4E 85 F1 | 	sub	fp, #24
17274     4C 62 BF FD | 	call	#_converttoint
17278     FD 28 02 F6 | 	mov	local02, result1
1727c     0C 4E 05 F1 | 	add	fp, #12
17280     A7 12 02 F6 | 	mov	arg01, fp
17284     0C 4E 85 F1 | 	sub	fp, #12
17288     38 62 BF FD | 	call	#_converttoint
1728c     FD 2A 02 F6 | 	mov	local03, result1
17290     A7 12 02 F6 | 	mov	arg01, fp
17294     2C 62 BF FD | 	call	#_converttoint
17298     40 26 62 FD | 	dirl	local01
1729c     13 29 02 FC | 	wrpin	local02, local01
172a0     13 2B 12 FC | 	wxpin	local03, local01
172a4     13 FB 21 FC | 	wypin	result1, local01
172a8     41 26 62 FD | 	dirh	local01
172ac     A7 F0 03 F6 | 	mov	ptra, fp
172b0     B2 00 A0 FD | 	call	#popregs_
172b4                 | _do_pinstart_ret
172b4     2D 00 64 FD | 	ret
172b8                 | 
172b8                 | ' 
172b8                 | ' '-------------------- pintoggle
172b8                 | ' 
172b8                 | ' sub do_pintoggle
172b8                 | _do_pintoggle
172b8     00 4A 05 F6 | 	mov	COUNT_, #0
172bc     A8 00 A0 FD | 	call	#pushregs_
172c0     0C F0 07 F1 | 	add	ptra, #12
172c4     18 60 BF FD | 	call	#_pop
172c8     A7 FA 61 FC | 	wrlong	result1, fp
172cc     04 4E 05 F1 | 	add	fp, #4
172d0     A7 FC 61 FC | 	wrlong	result2, fp
172d4     04 4E 05 F1 | 	add	fp, #4
172d8     A7 FE 61 FC | 	wrlong	result3, fp
172dc     08 4E 85 F1 | 	sub	fp, #8
172e0     A7 12 02 F6 | 	mov	arg01, fp
172e4     DC 61 BF FD | 	call	#_converttoint
172e8     5F FA 61 FD | 	drvnot	result1
172ec     A7 F0 03 F6 | 	mov	ptra, fp
172f0     B2 00 A0 FD | 	call	#popregs_
172f4                 | _do_pintoggle_ret
172f4     2D 00 64 FD | 	ret
172f8                 | 
172f8                 | ' 
172f8                 | ' '-------------------- pinwrite
172f8                 | ' 
172f8                 | ' sub do_pinwrite
172f8                 | _do_pinwrite
172f8     01 4A 05 F6 | 	mov	COUNT_, #1
172fc     A8 00 A0 FD | 	call	#pushregs_
17300     18 F0 07 F1 | 	add	ptra, #24
17304     D8 5F BF FD | 	call	#_pop
17308     FD 14 02 F6 | 	mov	arg02, result1
1730c     FE 12 02 F6 | 	mov	arg01, result2
17310     FF 26 02 F6 | 	mov	local01, result3
17314     A7 14 62 FC | 	wrlong	arg02, fp
17318     04 4E 05 F1 | 	add	fp, #4
1731c     A7 12 62 FC | 	wrlong	arg01, fp
17320     04 4E 05 F1 | 	add	fp, #4
17324     A7 26 62 FC | 	wrlong	local01, fp
17328     08 4E 85 F1 | 	sub	fp, #8
1732c     B0 5F BF FD | 	call	#_pop
17330     FF 26 02 F6 | 	mov	local01, result3
17334     0C 4E 05 F1 | 	add	fp, #12
17338     A7 FA 61 FC | 	wrlong	result1, fp
1733c     04 4E 05 F1 | 	add	fp, #4
17340     A7 FC 61 FC | 	wrlong	result2, fp
17344     04 4E 05 F1 | 	add	fp, #4
17348     A7 26 62 FC | 	wrlong	local01, fp
1734c     08 4E 85 F1 | 	sub	fp, #8
17350     A7 12 02 F6 | 	mov	arg01, fp
17354     0C 4E 85 F1 | 	sub	fp, #12
17358     68 61 BF FD | 	call	#_converttoint
1735c     FD 26 02 F6 | 	mov	local01, result1
17360     A7 12 02 F6 | 	mov	arg01, fp
17364     5C 61 BF FD | 	call	#_converttoint
17368     FD 14 02 F6 | 	mov	arg02, result1
1736c     13 13 02 F6 | 	mov	arg01, local01
17370     58 ED B0 FD | 	call	#__system___pinwrite
17374     A7 F0 03 F6 | 	mov	ptra, fp
17378     B2 00 A0 FD | 	call	#popregs_
1737c                 | _do_pinwrite_ret
1737c     2D 00 64 FD | 	ret
17380                 | 
17380                 | ' 
17380                 | ' '-------------------- play
17380                 | ' 
17380                 | ' sub do_play
17380                 | _do_play
17380     08 4A 05 F6 | 	mov	COUNT_, #8
17384     A8 00 A0 FD | 	call	#pushregs_
17388     7C F0 07 F1 | 	add	ptra, #124
1738c     68 4E 05 F1 | 	add	fp, #104
17390     77 CC A1 FF 
17394     A7 7C 6B FC | 	wrlong	##1134096318, fp
17398                 | ' speed_coeff=305.873
17398                 | ' 
17398                 | ' for i=0 to 8 : params(i)=-2.0 : next i
17398     64 4E 85 F1 | 	sub	fp, #100
1739c     A7 00 68 FC | 	wrlong	#0, fp
173a0     97 18 48 FB | 	callpa	#(@LR__1901-@LR__1900)>>2,fcache_load_ptr_
173a4                 | LR__1900
173a4     A7 16 02 FB | 	rdlong	arg03, fp
173a8     02 16 66 F0 | 	shl	arg03, #2
173ac     34 4E 05 F1 | 	add	fp, #52
173b0     A7 16 02 F1 | 	add	arg03, fp
173b4     00 00 E0 FF 
173b8     0B 01 68 FC | 	wrlong	##-1073741824, arg03
173bc     34 4E 85 F1 | 	sub	fp, #52
173c0     A7 26 02 FB | 	rdlong	local01, fp
173c4     01 26 06 F1 | 	add	local01, #1
173c8     A7 26 62 FC | 	wrlong	local01, fp
173cc     09 26 56 F2 | 	cmps	local01, #9 wc
173d0     D0 FF 9F CD |  if_b	jmp	#LR__1900
173d4                 | LR__1901
173d4     04 4E 85 F1 | 	sub	fp, #4
173d8     4A 00 00 FF 
173dc     80 E4 05 F1 | 	add	objptr, ##38016
173e0     F2 28 02 FB | 	rdlong	local02, objptr
173e4     14 2B 02 F6 | 	mov	local03, local02
173e8     01 2A 66 F0 | 	shl	local03, #1
173ec     14 2B 02 F1 | 	add	local03, local02
173f0     02 2A 66 F0 | 	shl	local03, #2
173f4     03 00 00 FF 
173f8     04 E4 85 F1 | 	sub	objptr, ##1540
173fc     F2 2A 02 F1 | 	add	local03, objptr
17400     15 2D 02 FB | 	rdlong	local04, local03
17404     A7 2C 62 FC | 	wrlong	local04, fp
17408                 | ' numpar=compiledline(lineptr_e).result.uresult
17408                 | ' for i=numpar to 1 step -1 
17408     04 4E 05 F1 | 	add	fp, #4
1740c     A7 2C 62 FC | 	wrlong	local04, fp
17410     04 4E 85 F1 | 	sub	fp, #4
17414     47 00 00 FF 
17418     7C E4 85 F1 | 	sub	objptr, ##36476
1741c                 | LR__1902
1741c     C0 5E BF FD | 	call	#_pop
17420     5C 4E 05 F1 | 	add	fp, #92
17424     A7 FA 61 FC | 	wrlong	result1, fp
17428     04 4E 05 F1 | 	add	fp, #4
1742c     A7 FC 61 FC | 	wrlong	result2, fp
17430     04 4E 05 F1 | 	add	fp, #4
17434     A7 FE 61 FC | 	wrlong	result3, fp
17438     60 4E 85 F1 | 	sub	fp, #96
1743c     A7 2A 02 FB | 	rdlong	local03, fp
17440     01 2A 86 F1 | 	sub	local03, #1
17444     02 2A 66 F0 | 	shl	local03, #2
17448     34 4E 05 F1 | 	add	fp, #52
1744c     A7 2A 02 F1 | 	add	local03, fp
17450     24 4E 05 F1 | 	add	fp, #36
17454     A7 2E 02 F6 | 	mov	local05, fp
17458     17 13 02 F6 | 	mov	arg01, local05
1745c     5C 4E 85 F1 | 	sub	fp, #92
17460     1C 61 BF FD | 	call	#_converttofloat
17464     15 FB 61 FC | 	wrlong	result1, local03
17468     04 4E 05 F1 | 	add	fp, #4
1746c     A7 26 02 FB | 	rdlong	local01, fp
17470     01 26 86 F1 | 	sub	local01, #1
17474     A7 26 62 FC | 	wrlong	local01, fp
17478     04 4E 85 F1 | 	sub	fp, #4
1747c     01 26 56 F2 | 	cmps	local01, #1 wc
17480     98 FF 9F 3D |  if_ae	jmp	#LR__1902
17484                 | ' 
17484                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
17484     38 4E 05 F1 | 	add	fp, #56
17488     A7 12 02 FB | 	rdlong	arg01, fp
1748c     38 4E 85 F1 | 	sub	fp, #56
17490     00 14 06 F6 | 	mov	arg02, #0
17494     01 16 06 F6 | 	mov	arg03, #1
17498     28 1D B1 FD | 	call	#__system___float_cmp
1749c     00 FA 55 F2 | 	cmps	result1, #0 wc
174a0     0C 4E 05 C1 |  if_b	add	fp, #12
174a4     A7 00 68 CC |  if_b	wrlong	#0, fp
174a8     0C 4E 85 C1 |  if_b	sub	fp, #12
174ac     2C 00 90 CD |  if_b	jmp	#LR__1903
174b0     38 4E 05 F1 | 	add	fp, #56
174b4     A7 12 02 FB | 	rdlong	arg01, fp
174b8     38 4E 85 F1 | 	sub	fp, #56
174bc     01 14 06 F6 | 	mov	arg02, #1
174c0     94 1D B1 FD | 	call	#__system___float_tointeger
174c4     FD 26 52 F6 | 	abs	local01, result1 wc
174c8     07 26 06 F5 | 	and	local01, #7
174cc     13 27 82 F6 | 	negc	local01, local01
174d0     0C 4E 05 F1 | 	add	fp, #12
174d4     A7 26 62 FC | 	wrlong	local01, fp
174d8     0C 4E 85 F1 | 	sub	fp, #12
174dc                 | LR__1903
174dc                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
174dc     3C 4E 05 F1 | 	add	fp, #60
174e0     A7 12 02 FB | 	rdlong	arg01, fp
174e4     3C 4E 85 F1 | 	sub	fp, #60
174e8     00 14 06 F6 | 	mov	arg02, #0
174ec     01 16 06 F6 | 	mov	arg03, #1
174f0     D0 1C B1 FD | 	call	#__system___float_cmp
174f4     00 FA 55 F2 | 	cmps	result1, #0 wc
174f8     40 00 90 3D |  if_ae	jmp	#LR__1904
174fc     0C 4E 05 F1 | 	add	fp, #12
17500     A7 28 02 FB | 	rdlong	local02, fp
17504     14 2B 02 F6 | 	mov	local03, local02
17508     01 2A 66 F0 | 	shl	local03, #1
1750c     14 2B 02 F1 | 	add	local03, local02
17510     03 2A 66 F0 | 	shl	local03, #3
17514     14 00 00 FF 
17518     38 E5 05 F1 | 	add	objptr, ##10552
1751c     F2 2A 02 F1 | 	add	local03, objptr
17520     15 31 02 FB | 	rdlong	local06, local03
17524     60 4E 05 F1 | 	add	fp, #96
17528     A7 30 62 FC | 	wrlong	local06, fp
1752c     6C 4E 85 F1 | 	sub	fp, #108
17530     14 00 00 FF 
17534     38 E5 85 F1 | 	sub	objptr, ##10552
17538     44 00 90 FD | 	jmp	#LR__1905
1753c                 | LR__1904
1753c     3C 4E 05 F1 | 	add	fp, #60
17540     A7 2C 02 FB | 	rdlong	local04, fp
17544     30 4E 05 F1 | 	add	fp, #48
17548     A7 2C 62 FC | 	wrlong	local04, fp
1754c     60 4E 85 F1 | 	sub	fp, #96
17550     A7 28 02 FB | 	rdlong	local02, fp
17554     14 2B 02 F6 | 	mov	local03, local02
17558     01 2A 66 F0 | 	shl	local03, #1
1755c     14 2B 02 F1 | 	add	local03, local02
17560     03 2A 66 F0 | 	shl	local03, #3
17564     14 00 00 FF 
17568     38 E5 05 F1 | 	add	objptr, ##10552
1756c     F2 2A 02 F1 | 	add	local03, objptr
17570     0C 4E 85 F1 | 	sub	fp, #12
17574     15 2D 62 FC | 	wrlong	local04, local03
17578     14 00 00 FF 
1757c     38 E5 85 F1 | 	sub	objptr, ##10552
17580                 | LR__1905
17580                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
17580     40 4E 05 F1 | 	add	fp, #64
17584     A7 12 02 FB | 	rdlong	arg01, fp
17588     40 4E 85 F1 | 	sub	fp, #64
1758c     00 14 06 F6 | 	mov	arg02, #0
17590     01 16 06 F6 | 	mov	arg03, #1
17594     2C 1C B1 FD | 	call	#__system___float_cmp
17598     00 FA 55 F2 | 	cmps	result1, #0 wc
1759c     24 00 90 CD |  if_b	jmp	#LR__1906
175a0     40 4E 05 F1 | 	add	fp, #64
175a4     A7 12 02 FB | 	rdlong	arg01, fp
175a8     40 4E 85 F1 | 	sub	fp, #64
175ac     20 0E 23 FF 
175b0     00 14 06 F6 | 	mov	arg02, ##1176256512
175b4     01 16 66 F6 | 	neg	arg03, #1
175b8     08 1C B1 FD | 	call	#__system___float_cmp
175bc     01 FA 55 F2 | 	cmps	result1, #1 wc
175c0     48 00 90 CD |  if_b	jmp	#LR__1907
175c4                 | LR__1906
175c4     0C 4E 05 F1 | 	add	fp, #12
175c8     A7 2A 02 FB | 	rdlong	local03, fp
175cc     15 33 02 F6 | 	mov	local07, local03
175d0     01 32 66 F0 | 	shl	local07, #1
175d4     15 33 02 F1 | 	add	local07, local03
175d8     03 32 66 F0 | 	shl	local07, #3
175dc     14 00 00 FF 
175e0     38 E5 05 F1 | 	add	objptr, ##10552
175e4     F2 32 02 F1 | 	add	local07, objptr
175e8     06 32 06 F1 | 	add	local07, #6
175ec     19 2F E2 FA | 	rdword	local05, local07
175f0     17 2D 32 F9 | 	getword	local04, local05, #0
175f4     1C 4E 05 F1 | 	add	fp, #28
175f8     A7 2C 62 FC | 	wrlong	local04, fp
175fc     28 4E 85 F1 | 	sub	fp, #40
17600     14 00 00 FF 
17604     38 E5 85 F1 | 	sub	objptr, ##10552
17608     54 00 90 FD | 	jmp	#LR__1908
1760c                 | LR__1907
1760c     40 4E 05 F1 | 	add	fp, #64
17610     A7 12 02 FB | 	rdlong	arg01, fp
17614     40 4E 85 F1 | 	sub	fp, #64
17618     01 14 06 F6 | 	mov	arg02, #1
1761c     38 1C B1 FD | 	call	#__system___float_tointeger
17620     28 4E 05 F1 | 	add	fp, #40
17624     A7 FA 61 FC | 	wrlong	result1, fp
17628     1C 4E 85 F1 | 	sub	fp, #28
1762c     A7 28 02 FB | 	rdlong	local02, fp
17630     14 2B 02 F6 | 	mov	local03, local02
17634     01 2A 66 F0 | 	shl	local03, #1
17638     14 2B 02 F1 | 	add	local03, local02
1763c     03 2A 66 F0 | 	shl	local03, #3
17640     14 00 00 FF 
17644     38 E5 05 F1 | 	add	objptr, ##10552
17648     F2 2A 02 F1 | 	add	local03, objptr
1764c     0C 4E 85 F1 | 	sub	fp, #12
17650     06 2A 06 F1 | 	add	local03, #6
17654     15 FB 51 FC | 	wrword	result1, local03
17658     14 00 00 FF 
1765c     38 E5 85 F1 | 	sub	objptr, ##10552
17660                 | LR__1908
17660                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
17660     44 4E 05 F1 | 	add	fp, #68
17664     A7 12 02 FB | 	rdlong	arg01, fp
17668     44 4E 85 F1 | 	sub	fp, #68
1766c     00 14 06 F6 | 	mov	arg02, #0
17670     01 16 06 F6 | 	mov	arg03, #1
17674     4C 1B B1 FD | 	call	#__system___float_cmp
17678     00 FA 55 F2 | 	cmps	result1, #0 wc
1767c     24 00 90 CD |  if_b	jmp	#LR__1909
17680     44 4E 05 F1 | 	add	fp, #68
17684     A7 12 02 FB | 	rdlong	arg01, fp
17688     44 4E 85 F1 | 	sub	fp, #68
1768c     89 C1 20 FF 
17690     6F 14 06 F6 | 	mov	arg02, ##1099108975
17694     01 16 66 F6 | 	neg	arg03, #1
17698     28 1B B1 FD | 	call	#__system___float_cmp
1769c     01 FA 55 F2 | 	cmps	result1, #1 wc
176a0     44 00 90 CD |  if_b	jmp	#LR__1910
176a4                 | LR__1909
176a4     0C 4E 05 F1 | 	add	fp, #12
176a8     A7 28 02 FB | 	rdlong	local02, fp
176ac     14 2B 02 F6 | 	mov	local03, local02
176b0     01 2A 66 F0 | 	shl	local03, #1
176b4     14 2B 02 F1 | 	add	local03, local02
176b8     03 2A 66 F0 | 	shl	local03, #3
176bc     14 00 00 FF 
176c0     38 E5 05 F1 | 	add	objptr, ##10552
176c4     F2 2A 02 F1 | 	add	local03, objptr
176c8     0C 2A 06 F1 | 	add	local03, #12
176cc     15 31 02 FB | 	rdlong	local06, local03
176d0     68 4E 05 F1 | 	add	fp, #104
176d4     A7 30 62 FC | 	wrlong	local06, fp
176d8     74 4E 85 F1 | 	sub	fp, #116
176dc     14 00 00 FF 
176e0     38 E5 85 F1 | 	sub	objptr, ##10552
176e4     48 00 90 FD | 	jmp	#LR__1911
176e8                 | LR__1910
176e8     44 4E 05 F1 | 	add	fp, #68
176ec     A7 2C 02 FB | 	rdlong	local04, fp
176f0     30 4E 05 F1 | 	add	fp, #48
176f4     A7 2C 62 FC | 	wrlong	local04, fp
176f8     68 4E 85 F1 | 	sub	fp, #104
176fc     A7 28 02 FB | 	rdlong	local02, fp
17700     14 2B 02 F6 | 	mov	local03, local02
17704     01 2A 66 F0 | 	shl	local03, #1
17708     14 2B 02 F1 | 	add	local03, local02
1770c     03 2A 66 F0 | 	shl	local03, #3
17710     14 00 00 FF 
17714     38 E5 05 F1 | 	add	objptr, ##10552
17718     F2 2A 02 F1 | 	add	local03, objptr
1771c     0C 4E 85 F1 | 	sub	fp, #12
17720     0C 2A 06 F1 | 	add	local03, #12
17724     15 2D 62 FC | 	wrlong	local04, local03
17728     14 00 00 FF 
1772c     38 E5 85 F1 | 	sub	objptr, ##10552
17730                 | LR__1911
17730                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
17730     48 4E 05 F1 | 	add	fp, #72
17734     A7 12 02 FB | 	rdlong	arg01, fp
17738     48 4E 85 F1 | 	sub	fp, #72
1773c     00 14 06 F6 | 	mov	arg02, #0
17740     01 16 06 F6 | 	mov	arg03, #1
17744     7C 1A B1 FD | 	call	#__system___float_cmp
17748     00 FA 55 F2 | 	cmps	result1, #0 wc
1774c     24 00 90 CD |  if_b	jmp	#LR__1912
17750     48 4E 05 F1 | 	add	fp, #72
17754     A7 12 02 FB | 	rdlong	arg01, fp
17758     48 4E 85 F1 | 	sub	fp, #72
1775c     00 00 21 FF 
17760     00 14 06 F6 | 	mov	arg02, ##1107296256
17764     01 16 66 F6 | 	neg	arg03, #1
17768     58 1A B1 FD | 	call	#__system___float_cmp
1776c     01 FA 55 F2 | 	cmps	result1, #1 wc
17770     48 00 90 CD |  if_b	jmp	#LR__1913
17774                 | LR__1912
17774     0C 4E 05 F1 | 	add	fp, #12
17778     A7 2A 02 FB | 	rdlong	local03, fp
1777c     15 33 02 F6 | 	mov	local07, local03
17780     01 32 66 F0 | 	shl	local07, #1
17784     15 33 02 F1 | 	add	local07, local03
17788     03 32 66 F0 | 	shl	local07, #3
1778c     14 00 00 FF 
17790     38 E5 05 F1 | 	add	objptr, ##10552
17794     F2 32 02 F1 | 	add	local07, objptr
17798     04 32 06 F1 | 	add	local07, #4
1779c     19 2F C2 FA | 	rdbyte	local05, local07
177a0     17 2D E2 F8 | 	getbyte	local04, local05, #0
177a4     14 4E 05 F1 | 	add	fp, #20
177a8     A7 2C 62 FC | 	wrlong	local04, fp
177ac     20 4E 85 F1 | 	sub	fp, #32
177b0     14 00 00 FF 
177b4     38 E5 85 F1 | 	sub	objptr, ##10552
177b8     54 00 90 FD | 	jmp	#LR__1914
177bc                 | LR__1913
177bc     48 4E 05 F1 | 	add	fp, #72
177c0     A7 12 02 FB | 	rdlong	arg01, fp
177c4     48 4E 85 F1 | 	sub	fp, #72
177c8     01 14 06 F6 | 	mov	arg02, #1
177cc     88 1A B1 FD | 	call	#__system___float_tointeger
177d0     20 4E 05 F1 | 	add	fp, #32
177d4     A7 FA 61 FC | 	wrlong	result1, fp
177d8     14 4E 85 F1 | 	sub	fp, #20
177dc     A7 28 02 FB | 	rdlong	local02, fp
177e0     14 2B 02 F6 | 	mov	local03, local02
177e4     01 2A 66 F0 | 	shl	local03, #1
177e8     14 2B 02 F1 | 	add	local03, local02
177ec     03 2A 66 F0 | 	shl	local03, #3
177f0     14 00 00 FF 
177f4     38 E5 05 F1 | 	add	objptr, ##10552
177f8     F2 2A 02 F1 | 	add	local03, objptr
177fc     0C 4E 85 F1 | 	sub	fp, #12
17800     04 2A 06 F1 | 	add	local03, #4
17804     15 FB 41 FC | 	wrbyte	result1, local03
17808     14 00 00 FF 
1780c     38 E5 85 F1 | 	sub	objptr, ##10552
17810                 | LR__1914
17810                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
17810     4C 4E 05 F1 | 	add	fp, #76
17814     A7 12 02 FB | 	rdlong	arg01, fp
17818     4C 4E 85 F1 | 	sub	fp, #76
1781c     00 14 06 F6 | 	mov	arg02, #0
17820     01 16 06 F6 | 	mov	arg03, #1
17824     9C 19 B1 FD | 	call	#__system___float_cmp
17828     00 FA 55 F2 | 	cmps	result1, #0 wc
1782c     24 00 90 CD |  if_b	jmp	#LR__1915
17830     4C 4E 05 F1 | 	add	fp, #76
17834     A7 12 02 FB | 	rdlong	arg01, fp
17838     4C 4E 85 F1 | 	sub	fp, #76
1783c     00 80 20 FF 
17840     00 14 06 F6 | 	mov	arg02, ##1090519040
17844     01 16 66 F6 | 	neg	arg03, #1
17848     78 19 B1 FD | 	call	#__system___float_cmp
1784c     01 FA 55 F2 | 	cmps	result1, #1 wc
17850     48 00 90 CD |  if_b	jmp	#LR__1916
17854                 | LR__1915
17854     0C 4E 05 F1 | 	add	fp, #12
17858     A7 2A 02 FB | 	rdlong	local03, fp
1785c     15 33 02 F6 | 	mov	local07, local03
17860     01 32 66 F0 | 	shl	local07, #1
17864     15 33 02 F1 | 	add	local07, local03
17868     03 32 66 F0 | 	shl	local07, #3
1786c     14 00 00 FF 
17870     38 E5 05 F1 | 	add	objptr, ##10552
17874     F2 32 02 F1 | 	add	local07, objptr
17878     05 32 06 F1 | 	add	local07, #5
1787c     19 2F C2 FA | 	rdbyte	local05, local07
17880     17 2D E2 F8 | 	getbyte	local04, local05, #0
17884     18 4E 05 F1 | 	add	fp, #24
17888     A7 2C 62 FC | 	wrlong	local04, fp
1788c     24 4E 85 F1 | 	sub	fp, #36
17890     14 00 00 FF 
17894     38 E5 85 F1 | 	sub	objptr, ##10552
17898     54 00 90 FD | 	jmp	#LR__1917
1789c                 | LR__1916
1789c     4C 4E 05 F1 | 	add	fp, #76
178a0     A7 12 02 FB | 	rdlong	arg01, fp
178a4     4C 4E 85 F1 | 	sub	fp, #76
178a8     01 14 06 F6 | 	mov	arg02, #1
178ac     A8 19 B1 FD | 	call	#__system___float_tointeger
178b0     24 4E 05 F1 | 	add	fp, #36
178b4     A7 FA 61 FC | 	wrlong	result1, fp
178b8     18 4E 85 F1 | 	sub	fp, #24
178bc     A7 28 02 FB | 	rdlong	local02, fp
178c0     14 2B 02 F6 | 	mov	local03, local02
178c4     01 2A 66 F0 | 	shl	local03, #1
178c8     14 2B 02 F1 | 	add	local03, local02
178cc     03 2A 66 F0 | 	shl	local03, #3
178d0     14 00 00 FF 
178d4     38 E5 05 F1 | 	add	objptr, ##10552
178d8     F2 2A 02 F1 | 	add	local03, objptr
178dc     0C 4E 85 F1 | 	sub	fp, #12
178e0     05 2A 06 F1 | 	add	local03, #5
178e4     15 FB 41 FC | 	wrbyte	result1, local03
178e8     14 00 00 FF 
178ec     38 E5 85 F1 | 	sub	objptr, ##10552
178f0                 | LR__1917
178f0                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
178f0     50 4E 05 F1 | 	add	fp, #80
178f4     A7 12 02 FB | 	rdlong	arg01, fp
178f8     50 4E 85 F1 | 	sub	fp, #80
178fc     00 14 06 F6 | 	mov	arg02, #0
17900     01 16 06 F6 | 	mov	arg03, #1
17904     BC 18 B1 FD | 	call	#__system___float_cmp
17908     00 FA 55 F2 | 	cmps	result1, #0 wc
1790c     24 00 90 CD |  if_b	jmp	#LR__1918
17910     50 4E 05 F1 | 	add	fp, #80
17914     A7 12 02 FB | 	rdlong	arg01, fp
17918     50 4E 85 F1 | 	sub	fp, #80
1791c     00 3D 22 FF 
17920     00 14 06 F6 | 	mov	arg02, ##1148846080
17924     01 16 66 F6 | 	neg	arg03, #1
17928     98 18 B1 FD | 	call	#__system___float_cmp
1792c     01 FA 55 F2 | 	cmps	result1, #1 wc
17930     44 00 90 CD |  if_b	jmp	#LR__1919
17934                 | LR__1918
17934     0C 4E 05 F1 | 	add	fp, #12
17938     A7 28 02 FB | 	rdlong	local02, fp
1793c     14 2B 02 F6 | 	mov	local03, local02
17940     01 2A 66 F0 | 	shl	local03, #1
17944     14 2B 02 F1 | 	add	local03, local02
17948     03 2A 66 F0 | 	shl	local03, #3
1794c     14 00 00 FF 
17950     38 E5 05 F1 | 	add	objptr, ##10552
17954     F2 2A 02 F1 | 	add	local03, objptr
17958     08 2A 06 F1 | 	add	local03, #8
1795c     15 31 02 FB | 	rdlong	local06, local03
17960     6C 4E 05 F1 | 	add	fp, #108
17964     A7 30 62 FC | 	wrlong	local06, fp
17968     78 4E 85 F1 | 	sub	fp, #120
1796c     14 00 00 FF 
17970     38 E5 85 F1 | 	sub	objptr, ##10552
17974     48 00 90 FD | 	jmp	#LR__1920
17978                 | LR__1919
17978     50 4E 05 F1 | 	add	fp, #80
1797c     A7 30 02 FB | 	rdlong	local06, fp
17980     28 4E 05 F1 | 	add	fp, #40
17984     A7 30 62 FC | 	wrlong	local06, fp
17988     6C 4E 85 F1 | 	sub	fp, #108
1798c     A7 28 02 FB | 	rdlong	local02, fp
17990     14 2B 02 F6 | 	mov	local03, local02
17994     01 2A 66 F0 | 	shl	local03, #1
17998     14 2B 02 F1 | 	add	local03, local02
1799c     03 2A 66 F0 | 	shl	local03, #3
179a0     14 00 00 FF 
179a4     38 E5 05 F1 | 	add	objptr, ##10552
179a8     F2 2A 02 F1 | 	add	local03, objptr
179ac     0C 4E 85 F1 | 	sub	fp, #12
179b0     08 2A 06 F1 | 	add	local03, #8
179b4     15 31 62 FC | 	wrlong	local06, local03
179b8     14 00 00 FF 
179bc     38 E5 85 F1 | 	sub	objptr, ##10552
179c0                 | LR__1920
179c0                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
179c0     54 4E 05 F1 | 	add	fp, #84
179c4     A7 12 02 FB | 	rdlong	arg01, fp
179c8     54 4E 85 F1 | 	sub	fp, #84
179cc     00 C0 5F FF 
179d0     00 14 06 F6 | 	mov	arg02, ##-1082130432
179d4     01 16 06 F6 | 	mov	arg03, #1
179d8     E8 17 B1 FD | 	call	#__system___float_cmp
179dc     00 FA 55 F2 | 	cmps	result1, #0 wc
179e0     24 00 90 CD |  if_b	jmp	#LR__1921
179e4     54 4E 05 F1 | 	add	fp, #84
179e8     A7 12 02 FB | 	rdlong	arg01, fp
179ec     54 4E 85 F1 | 	sub	fp, #84
179f0     00 C0 1F FF 
179f4     00 14 06 F6 | 	mov	arg02, ##1065353216
179f8     01 16 66 F6 | 	neg	arg03, #1
179fc     C4 17 B1 FD | 	call	#__system___float_cmp
17a00     01 FA 55 F2 | 	cmps	result1, #1 wc
17a04     44 00 90 CD |  if_b	jmp	#LR__1922
17a08                 | LR__1921
17a08     0C 4E 05 F1 | 	add	fp, #12
17a0c     A7 28 02 FB | 	rdlong	local02, fp
17a10     14 2B 02 F6 | 	mov	local03, local02
17a14     01 2A 66 F0 | 	shl	local03, #1
17a18     14 2B 02 F1 | 	add	local03, local02
17a1c     03 2A 66 F0 | 	shl	local03, #3
17a20     14 00 00 FF 
17a24     38 E5 05 F1 | 	add	objptr, ##10552
17a28     F2 2A 02 F1 | 	add	local03, objptr
17a2c     10 2A 06 F1 | 	add	local03, #16
17a30     15 31 02 FB | 	rdlong	local06, local03
17a34     64 4E 05 F1 | 	add	fp, #100
17a38     A7 30 62 FC | 	wrlong	local06, fp
17a3c     70 4E 85 F1 | 	sub	fp, #112
17a40     14 00 00 FF 
17a44     38 E5 85 F1 | 	sub	objptr, ##10552
17a48     48 00 90 FD | 	jmp	#LR__1923
17a4c                 | LR__1922
17a4c     54 4E 05 F1 | 	add	fp, #84
17a50     A7 30 02 FB | 	rdlong	local06, fp
17a54     1C 4E 05 F1 | 	add	fp, #28
17a58     A7 30 62 FC | 	wrlong	local06, fp
17a5c     64 4E 85 F1 | 	sub	fp, #100
17a60     A7 28 02 FB | 	rdlong	local02, fp
17a64     14 2B 02 F6 | 	mov	local03, local02
17a68     01 2A 66 F0 | 	shl	local03, #1
17a6c     14 2B 02 F1 | 	add	local03, local02
17a70     03 2A 66 F0 | 	shl	local03, #3
17a74     14 00 00 FF 
17a78     38 E5 05 F1 | 	add	objptr, ##10552
17a7c     F2 2A 02 F1 | 	add	local03, objptr
17a80     0C 4E 85 F1 | 	sub	fp, #12
17a84     10 2A 06 F1 | 	add	local03, #16
17a88     15 31 62 FC | 	wrlong	local06, local03
17a8c     14 00 00 FF 
17a90     38 E5 85 F1 | 	sub	objptr, ##10552
17a94                 | LR__1923
17a94                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
17a94     58 4E 05 F1 | 	add	fp, #88
17a98     A7 12 02 FB | 	rdlong	arg01, fp
17a9c     58 4E 85 F1 | 	sub	fp, #88
17aa0     00 14 06 F6 | 	mov	arg02, #0
17aa4     01 16 06 F6 | 	mov	arg03, #1
17aa8     18 17 B1 FD | 	call	#__system___float_cmp
17aac     00 FA 55 F2 | 	cmps	result1, #0 wc
17ab0     24 00 90 CD |  if_b	jmp	#LR__1924
17ab4     58 4E 05 F1 | 	add	fp, #88
17ab8     A7 12 02 FB | 	rdlong	arg01, fp
17abc     58 4E 85 F1 | 	sub	fp, #88
17ac0     80 BF 21 FF 
17ac4     00 14 06 F6 | 	mov	arg02, ##1132396544
17ac8     01 16 66 F6 | 	neg	arg03, #1
17acc     F4 16 B1 FD | 	call	#__system___float_cmp
17ad0     01 FA 55 F2 | 	cmps	result1, #1 wc
17ad4     44 00 90 CD |  if_b	jmp	#LR__1925
17ad8                 | LR__1924
17ad8     0C 4E 05 F1 | 	add	fp, #12
17adc     A7 2A 02 FB | 	rdlong	local03, fp
17ae0     15 33 02 F6 | 	mov	local07, local03
17ae4     01 32 66 F0 | 	shl	local07, #1
17ae8     15 33 02 F1 | 	add	local07, local03
17aec     03 32 66 F0 | 	shl	local07, #3
17af0     14 00 00 FF 
17af4     38 E5 05 F1 | 	add	objptr, ##10552
17af8     F2 32 02 F1 | 	add	local07, objptr
17afc     14 32 06 F1 | 	add	local07, #20
17b00     19 2D E2 FA | 	rdword	local04, local07
17b04     20 4E 05 F1 | 	add	fp, #32
17b08     A7 2C 62 FC | 	wrlong	local04, fp
17b0c     2C 4E 85 F1 | 	sub	fp, #44
17b10     14 00 00 FF 
17b14     38 E5 85 F1 | 	sub	objptr, ##10552
17b18     54 00 90 FD | 	jmp	#LR__1926
17b1c                 | LR__1925
17b1c     58 4E 05 F1 | 	add	fp, #88
17b20     A7 12 02 FB | 	rdlong	arg01, fp
17b24     58 4E 85 F1 | 	sub	fp, #88
17b28     01 14 06 F6 | 	mov	arg02, #1
17b2c     28 17 B1 FD | 	call	#__system___float_tointeger
17b30     2C 4E 05 F1 | 	add	fp, #44
17b34     A7 FA 61 FC | 	wrlong	result1, fp
17b38     20 4E 85 F1 | 	sub	fp, #32
17b3c     A7 28 02 FB | 	rdlong	local02, fp
17b40     14 2B 02 F6 | 	mov	local03, local02
17b44     01 2A 66 F0 | 	shl	local03, #1
17b48     14 2B 02 F1 | 	add	local03, local02
17b4c     03 2A 66 F0 | 	shl	local03, #3
17b50     14 00 00 FF 
17b54     38 E5 05 F1 | 	add	objptr, ##10552
17b58     F2 2A 02 F1 | 	add	local03, objptr
17b5c     0C 4E 85 F1 | 	sub	fp, #12
17b60     14 2A 06 F1 | 	add	local03, #20
17b64     15 FB 51 FC | 	wrword	result1, local03
17b68     14 00 00 FF 
17b6c     38 E5 85 F1 | 	sub	objptr, ##10552
17b70                 | LR__1926
17b70     6C 4E 05 F1 | 	add	fp, #108
17b74     A7 14 02 FB | 	rdlong	arg02, fp
17b78     6C 4E 85 F1 | 	sub	fp, #108
17b7c     FC 16 20 FF 
17b80     54 12 06 F6 | 	mov	arg01, ##1076754516
17b84     D8 21 B1 FD | 	call	#__system____builtin_logbase
17b88     FD 2C 02 F6 | 	mov	local04, result1
17b8c     1E 14 C6 F9 | 	decod	arg02, #30
17b90     FC 16 20 FF 
17b94     54 12 06 F6 | 	mov	arg01, ##1076754516
17b98     C4 21 B1 FD | 	call	#__system____builtin_logbase
17b9c     FD 14 02 F6 | 	mov	arg02, result1
17ba0     16 13 02 F6 | 	mov	arg01, local04
17ba4     EC 13 B1 FD | 	call	#__system___float_div
17ba8     FD 12 02 F6 | 	mov	arg01, result1
17bac     00 14 06 F6 | 	mov	arg02, #0
17bb0     A4 16 B1 FD | 	call	#__system___float_tointeger
17bb4     30 4E 05 F1 | 	add	fp, #48
17bb8     A7 FA 61 FC | 	wrlong	result1, fp
17bbc     1E 2C C6 F9 | 	decod	local04, #30
17bc0     FD 12 02 F6 | 	mov	arg01, result1
17bc4     30 4E 85 F1 | 	sub	fp, #48
17bc8     05 12 06 F1 | 	add	arg01, #5
17bcc     09 13 52 F6 | 	abs	arg01, arg01 wc
17bd0     1F 34 C6 C9 |  if_b	decod	local08, #31
17bd4     00 34 06 36 |  if_ae	mov	local08, #0
17bd8     B0 0D B1 FD | 	call	#__system___float_fromuns
17bdc     1A FB 61 F5 | 	xor	result1, local08
17be0     FD 14 02 F6 | 	mov	arg02, result1
17be4     16 13 02 F6 | 	mov	arg01, local04
17be8     AC 20 B1 FD | 	call	#__system____builtin_powf
17bec     FD 12 02 F6 | 	mov	arg01, result1
17bf0     01 14 06 F6 | 	mov	arg02, #1
17bf4     60 16 B1 FD | 	call	#__system___float_tointeger
17bf8     10 4E 05 F1 | 	add	fp, #16
17bfc     A7 FA 61 FC | 	wrlong	result1, fp
17c00                 | ' skip=round(2^(lfreq+5))
17c00                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
17c00     10 4E 85 F1 | 	sub	fp, #16
17c04     40 00 00 FF 
17c08     01 FA 55 F2 | 	cmps	result1, ##32769 wc
17c0c     30 00 90 CD |  if_b	jmp	#LR__1927
17c10     10 4E 05 F1 | 	add	fp, #16
17c14     A7 26 02 FB | 	rdlong	local01, fp
17c18     13 2D 52 F6 | 	abs	local04, local01 wc
17c1c     0F 2C 46 F0 | 	shr	local04, #15
17c20     16 2D 82 F6 | 	negc	local04, local04
17c24     0C 4E 85 F1 | 	sub	fp, #12
17c28     A7 2C 62 FC | 	wrlong	local04, fp
17c2c     0C 4E 05 F1 | 	add	fp, #12
17c30     40 00 80 FF 
17c34     A7 00 68 FC | 	wrlong	##32768, fp
17c38     10 4E 85 F1 | 	sub	fp, #16
17c3c     0C 00 90 FD | 	jmp	#LR__1928
17c40                 | LR__1927
17c40     04 4E 05 F1 | 	add	fp, #4
17c44     A7 02 68 FC | 	wrlong	#1, fp
17c48     04 4E 85 F1 | 	sub	fp, #4
17c4c                 | LR__1928
17c4c     6C 4E 05 F1 | 	add	fp, #108
17c50     A7 14 02 FB | 	rdlong	arg02, fp
17c54     6C 4E 85 F1 | 	sub	fp, #108
17c58     3E 2C 25 FF 
17c5c     3C 12 06 F6 | 	mov	arg01, ##1247312956
17c60     30 13 B1 FD | 	call	#__system___float_div
17c64     FD 2C 02 F6 | 	mov	local04, result1
17c68     04 4E 05 F1 | 	add	fp, #4
17c6c     A7 12 02 FB | 	rdlong	arg01, fp
17c70     04 4E 85 F1 | 	sub	fp, #4
17c74     09 13 52 F6 | 	abs	arg01, arg01 wc
17c78     1F 34 C6 C9 |  if_b	decod	local08, #31
17c7c     00 34 06 36 |  if_ae	mov	local08, #0
17c80     08 0D B1 FD | 	call	#__system___float_fromuns
17c84     1A FB 61 F5 | 	xor	result1, local08
17c88     FD 26 02 F6 | 	mov	local01, result1
17c8c     1E 28 C6 F9 | 	decod	local02, #30
17c90     0D 12 06 F6 | 	mov	arg01, #13
17c94     30 4E 05 F1 | 	add	fp, #48
17c98     A7 30 02 FB | 	rdlong	local06, fp
17c9c     30 4E 85 F1 | 	sub	fp, #48
17ca0     18 13 82 F1 | 	sub	arg01, local06
17ca4     09 13 52 F6 | 	abs	arg01, arg01 wc
17ca8     1F 34 C6 C9 |  if_b	decod	local08, #31
17cac     00 34 06 36 |  if_ae	mov	local08, #0
17cb0     D8 0C B1 FD | 	call	#__system___float_fromuns
17cb4     1A FB 61 F5 | 	xor	result1, local08
17cb8     FD 14 02 F6 | 	mov	arg02, result1
17cbc     14 13 02 F6 | 	mov	arg01, local02
17cc0     D4 1F B1 FD | 	call	#__system____builtin_powf
17cc4     FD 14 02 F6 | 	mov	arg02, result1
17cc8     13 13 02 F6 | 	mov	arg01, local01
17ccc     C0 10 B1 FD | 	call	#__system___float_mul
17cd0     FD 14 02 F6 | 	mov	arg02, result1
17cd4     16 13 02 F6 | 	mov	arg01, local04
17cd8     B8 12 B1 FD | 	call	#__system___float_div
17cdc     FD 12 02 F6 | 	mov	arg01, result1
17ce0     01 14 06 F6 | 	mov	arg02, #1
17ce4     70 15 B1 FD | 	call	#__system___float_tointeger
17ce8     34 4E 05 F1 | 	add	fp, #52
17cec     A7 FA 61 FC | 	wrlong	result1, fp
17cf0     34 4E 05 F1 | 	add	fp, #52
17cf4     A7 12 02 FB | 	rdlong	arg01, fp
17cf8     10 4E 05 F1 | 	add	fp, #16
17cfc     A7 14 02 FB | 	rdlong	arg02, fp
17d00     78 4E 85 F1 | 	sub	fp, #120
17d04     8C 12 B1 FD | 	call	#__system___float_div
17d08     FD 12 02 F6 | 	mov	arg01, result1
17d0c     01 14 06 F6 | 	mov	arg02, #1
17d10     44 15 B1 FD | 	call	#__system___float_tointeger
17d14     FD 2C 02 F6 | 	mov	local04, result1
17d18     14 4E 05 F1 | 	add	fp, #20
17d1c     A7 2C 62 FC | 	wrlong	local04, fp
17d20     5C 4E 05 F1 | 	add	fp, #92
17d24     A7 14 02 FB | 	rdlong	arg02, fp
17d28     70 4E 85 F1 | 	sub	fp, #112
17d2c     00 00 23 FF 
17d30     00 12 06 F6 | 	mov	arg01, ##1174405120
17d34     58 10 B1 FD | 	call	#__system___float_mul
17d38     FD 12 02 F6 | 	mov	arg01, result1
17d3c     01 14 06 F6 | 	mov	arg02, #1
17d40     14 15 B1 FD | 	call	#__system___float_tointeger
17d44     0D 2C C6 F9 | 	decod	local04, #13
17d48     FD 2C 02 F1 | 	add	local04, result1
17d4c     18 4E 05 F1 | 	add	fp, #24
17d50     A7 2C 62 FC | 	wrlong	local04, fp
17d54     5C 4E 05 F1 | 	add	fp, #92
17d58     A7 14 02 FB | 	rdlong	arg02, fp
17d5c     74 4E 85 F1 | 	sub	fp, #116
17d60     00 3D 22 FF 
17d64     00 12 06 F6 | 	mov	arg01, ##1148846080
17d68     24 10 B1 FD | 	call	#__system___float_mul
17d6c     FD 12 02 F6 | 	mov	arg01, result1
17d70     01 14 06 F6 | 	mov	arg02, #1
17d74     E0 14 B1 FD | 	call	#__system___float_tointeger
17d78     1C 4E 05 F1 | 	add	fp, #28
17d7c     A7 FA 61 FC | 	wrlong	result1, fp
17d80     37 00 00 FF 
17d84     10 E4 05 F1 | 	add	objptr, ##28176
17d88     F2 2C 02 FB | 	rdlong	local04, objptr
17d8c     37 00 00 FF 
17d90     10 E4 85 F1 | 	sub	objptr, ##28176
17d94     10 4E 85 F1 | 	sub	fp, #16
17d98     A7 28 02 FB | 	rdlong	local02, fp
17d9c     06 28 66 F0 | 	shl	local02, #6
17da0     14 2D 02 F1 | 	add	local04, local02
17da4     04 4E 85 F1 | 	sub	fp, #4
17da8     A7 2C 62 FC | 	wrlong	local04, fp
17dac                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
17dac                 | ' speed=round(speed_coeff/slen)
17dac                 | ' ipan=8192+round(8192*pan)
17dac                 | ' ivol=round(1000.0*vol)
17dac                 | ' base2=base+64*channel
17dac                 | ' if wave <32 then 
17dac     18 4E 05 F1 | 	add	fp, #24
17db0     A7 2C 02 FB | 	rdlong	local04, fp
17db4     20 4E 85 F1 | 	sub	fp, #32
17db8     20 2C 56 F2 | 	cmps	local04, #32 wc
17dbc     2C 00 90 3D |  if_ae	jmp	#LR__1929
17dc0     08 4E 05 F1 | 	add	fp, #8
17dc4     A7 12 02 FB | 	rdlong	arg01, fp
17dc8     08 12 06 F1 | 	add	arg01, #8
17dcc     18 4E 05 F1 | 	add	fp, #24
17dd0     A7 14 02 FB | 	rdlong	arg02, fp
17dd4     20 4E 85 F1 | 	sub	fp, #32
17dd8     0B 14 66 F0 | 	shl	arg02, #11
17ddc     00 00 60 FF 
17de0     00 14 06 F1 | 	add	arg02, ##-1073741824
17de4     09 15 62 FC | 	wrlong	arg02, arg01
17de8     18 00 90 FD | 	jmp	#LR__1930
17dec                 | LR__1929
17dec     08 4E 05 F1 | 	add	fp, #8
17df0     A7 12 02 FB | 	rdlong	arg01, fp
17df4     08 4E 85 F1 | 	sub	fp, #8
17df8     08 12 06 F1 | 	add	arg01, #8
17dfc     00 00 E4 FF 
17e00     09 01 68 FC | 	wrlong	##-939524096, arg01
17e04                 | LR__1930
17e04     08 4E 05 F1 | 	add	fp, #8
17e08     A7 12 02 FB | 	rdlong	arg01, fp
17e0c     10 12 06 F1 | 	add	arg01, #16
17e10     04 00 80 FF 
17e14     09 01 68 FC | 	wrlong	##2048, arg01
17e18     A7 12 02 FB | 	rdlong	arg01, fp
17e1c     0C 12 06 F1 | 	add	arg01, #12
17e20     09 01 68 FC | 	wrlong	#0, arg01
17e24     A7 12 02 FB | 	rdlong	arg01, fp
17e28     14 12 06 F1 | 	add	arg01, #20
17e2c     14 4E 05 F1 | 	add	fp, #20
17e30     A7 14 02 FB | 	rdlong	arg02, fp
17e34     09 15 52 FC | 	wrword	arg02, arg01
17e38     14 4E 85 F1 | 	sub	fp, #20
17e3c     A7 12 02 FB | 	rdlong	arg01, fp
17e40     16 12 06 F1 | 	add	arg01, #22
17e44     10 4E 05 F1 | 	add	fp, #16
17e48     A7 14 02 FB | 	rdlong	arg02, fp
17e4c     09 15 52 FC | 	wrword	arg02, arg01
17e50                 | ' lpoke base2+16,2048
17e50                 | ' lpoke base2+12,0
17e50                 | ' dpoke base2+20,ivol 
17e50                 | ' dpoke base2+22,ipan 
17e50                 | ' if wave<32 then
17e50     08 4E 05 F1 | 	add	fp, #8
17e54     A7 2C 02 FB | 	rdlong	local04, fp
17e58     20 4E 85 F1 | 	sub	fp, #32
17e5c     20 2C 56 F2 | 	cmps	local04, #32 wc
17e60     38 00 90 3D |  if_ae	jmp	#LR__1931
17e64     08 4E 05 F1 | 	add	fp, #8
17e68     A7 12 02 FB | 	rdlong	arg01, fp
17e6c     18 12 06 F1 | 	add	arg01, #24
17e70     2C 4E 05 F1 | 	add	fp, #44
17e74     A7 14 02 FB | 	rdlong	arg02, fp
17e78     09 15 52 FC | 	wrword	arg02, arg01
17e7c     2C 4E 85 F1 | 	sub	fp, #44
17e80     A7 12 02 FB | 	rdlong	arg01, fp
17e84     1A 12 06 F1 | 	add	arg01, #26
17e88     08 4E 05 F1 | 	add	fp, #8
17e8c     A7 14 02 FB | 	rdlong	arg02, fp
17e90     10 4E 85 F1 | 	sub	fp, #16
17e94     09 15 52 FC | 	wrword	arg02, arg01
17e98     48 00 90 FD | 	jmp	#LR__1932
17e9c                 | LR__1931
17e9c     08 4E 05 F1 | 	add	fp, #8
17ea0     A7 2C 02 FB | 	rdlong	local04, fp
17ea4     18 2C 06 F1 | 	add	local04, #24
17ea8     64 4E 05 F1 | 	add	fp, #100
17eac     A7 14 02 FB | 	rdlong	arg02, fp
17eb0     6C 4E 85 F1 | 	sub	fp, #108
17eb4     3E 2C 25 FF 
17eb8     3C 12 06 F6 | 	mov	arg01, ##1247312956
17ebc     D4 10 B1 FD | 	call	#__system___float_div
17ec0     FD 12 02 F6 | 	mov	arg01, result1
17ec4     01 14 06 F6 | 	mov	arg02, #1
17ec8     8C 13 B1 FD | 	call	#__system___float_tointeger
17ecc     16 FB 51 FC | 	wrword	result1, local04
17ed0     08 4E 05 F1 | 	add	fp, #8
17ed4     A7 12 02 FB | 	rdlong	arg01, fp
17ed8     08 4E 85 F1 | 	sub	fp, #8
17edc     1A 12 06 F1 | 	add	arg01, #26
17ee0     09 01 5A FC | 	wrword	#256, arg01
17ee4                 | LR__1932
17ee4     08 4E 05 F1 | 	add	fp, #8
17ee8     A7 12 02 FB | 	rdlong	arg01, fp
17eec     1C 12 06 F1 | 	add	arg01, #28
17ef0     09 01 68 FC | 	wrlong	#0, arg01
17ef4     A7 12 02 FB | 	rdlong	arg01, fp
17ef8     20 12 06 F1 | 	add	arg01, #32
17efc     09 01 68 FC | 	wrlong	#0, arg01
17f00                 | ' lpoke base2+28,$0000_0000
17f00                 | ' lpoke base2+32,0 
17f00                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
17f00     1C 4E 05 F1 | 	add	fp, #28
17f04     A7 2C 02 FB | 	rdlong	local04, fp
17f08     24 4E 85 F1 | 	sub	fp, #36
17f0c     08 2C 0E F2 | 	cmp	local04, #8 wz
17f10     18 00 90 5D |  if_ne	jmp	#LR__1933
17f14     08 4E 05 F1 | 	add	fp, #8
17f18     A7 12 02 FB | 	rdlong	arg01, fp
17f1c     08 4E 85 F1 | 	sub	fp, #8
17f20     24 12 06 F1 | 	add	arg01, #36
17f24     09 01 68 FC | 	wrlong	#0, arg01
17f28     34 00 90 FD | 	jmp	#LR__1934
17f2c                 | LR__1933
17f2c     08 4E 05 F1 | 	add	fp, #8
17f30     A7 12 02 FB | 	rdlong	arg01, fp
17f34     24 12 06 F1 | 	add	arg01, #36
17f38     1C 4E 05 F1 | 	add	fp, #28
17f3c     A7 14 02 FB | 	rdlong	arg02, fp
17f40     24 4E 85 F1 | 	sub	fp, #36
17f44     09 14 66 F0 | 	shl	arg02, #9
17f48     0C 00 00 FF 
17f4c     D8 E4 05 F1 | 	add	objptr, ##6360
17f50     F2 14 02 F1 | 	add	arg02, objptr
17f54     0C 00 00 FF 
17f58     D8 E4 85 F1 | 	sub	objptr, ##6360
17f5c     09 15 62 FC | 	wrlong	arg02, arg01
17f60                 | LR__1934
17f60     08 4E 05 F1 | 	add	fp, #8
17f64     A7 12 02 FB | 	rdlong	arg01, fp
17f68     28 12 06 F1 | 	add	arg01, #40
17f6c     0C 4E 05 F1 | 	add	fp, #12
17f70     A7 14 02 FB | 	rdlong	arg02, fp
17f74     09 15 62 FC | 	wrlong	arg02, arg01
17f78     0C 4E 85 F1 | 	sub	fp, #12
17f7c     A7 12 02 FB | 	rdlong	arg01, fp
17f80     2C 12 06 F1 | 	add	arg01, #44
17f84     24 4E 05 F1 | 	add	fp, #36
17f88     A7 14 02 FB | 	rdlong	arg02, fp
17f8c     09 15 62 FC | 	wrlong	arg02, arg01
17f90                 | ' lpoke base2+40,speed 
17f90                 | ' lpoke base2+44,sus 
17f90                 | ' if delay>0 then waitms(delay) 
17f90     04 4E 85 F1 | 	sub	fp, #4
17f94     A7 2C 02 FB | 	rdlong	local04, fp
17f98     28 4E 85 F1 | 	sub	fp, #40
17f9c     01 2C 56 F2 | 	cmps	local04, #1 wc
17fa0     28 4E 05 31 |  if_ae	add	fp, #40
17fa4     A7 12 02 3B |  if_ae	rdlong	arg01, fp
17fa8     28 4E 85 31 |  if_ae	sub	fp, #40
17fac     5C E2 B0 3D |  if_ae	call	#__system___waitms
17fb0     A7 F0 03 F6 | 	mov	ptra, fp
17fb4     B2 00 A0 FD | 	call	#popregs_
17fb8                 | _do_play_ret
17fb8     2D 00 64 FD | 	ret
17fbc                 | 
17fbc                 | ' 
17fbc                 | ' '-------------------- plot
17fbc                 | ' 
17fbc                 | ' sub do_plot
17fbc                 | _do_plot
17fbc     00 4A 05 F6 | 	mov	COUNT_, #0
17fc0     A8 00 A0 FD | 	call	#pushregs_
17fc4     20 F0 07 F1 | 	add	ptra, #32
17fc8     14 53 BF FD | 	call	#_pop
17fcc     FD 16 02 F6 | 	mov	arg03, result1
17fd0     FE 14 02 F6 | 	mov	arg02, result2
17fd4     FF 12 02 F6 | 	mov	arg01, result3
17fd8     0C 4E 05 F1 | 	add	fp, #12
17fdc     A7 16 62 FC | 	wrlong	arg03, fp
17fe0     04 4E 05 F1 | 	add	fp, #4
17fe4     A7 14 62 FC | 	wrlong	arg02, fp
17fe8     04 4E 05 F1 | 	add	fp, #4
17fec     A7 12 62 FC | 	wrlong	arg01, fp
17ff0     14 4E 85 F1 | 	sub	fp, #20
17ff4     E8 52 BF FD | 	call	#_pop
17ff8     FF 16 02 F6 | 	mov	arg03, result3
17ffc     A7 FA 61 FC | 	wrlong	result1, fp
18000     04 4E 05 F1 | 	add	fp, #4
18004     A7 FC 61 FC | 	wrlong	result2, fp
18008     04 4E 05 F1 | 	add	fp, #4
1800c     A7 16 62 FC | 	wrlong	arg03, fp
18010     08 4E 85 F1 | 	sub	fp, #8
18014     A7 12 02 F6 | 	mov	arg01, fp
18018     A8 54 BF FD | 	call	#_converttoint
1801c     18 4E 05 F1 | 	add	fp, #24
18020     A7 FA 61 FC | 	wrlong	result1, fp
18024     0C 4E 85 F1 | 	sub	fp, #12
18028     A7 12 02 F6 | 	mov	arg01, fp
1802c     0C 4E 85 F1 | 	sub	fp, #12
18030     90 54 BF FD | 	call	#_converttoint
18034     1C 4E 05 F1 | 	add	fp, #28
18038     A7 FA 61 FC | 	wrlong	result1, fp
1803c     04 4E 85 F1 | 	sub	fp, #4
18040     A7 16 02 FB | 	rdlong	arg03, fp
18044     37 00 00 FF 
18048     2C E4 05 F1 | 	add	objptr, ##28204
1804c     F2 16 62 FC | 	wrlong	arg03, objptr
18050     04 4E 05 F1 | 	add	fp, #4
18054     A7 14 02 FB | 	rdlong	arg02, fp
18058     1C 4E 85 F1 | 	sub	fp, #28
1805c     04 E4 05 F1 | 	add	objptr, #4
18060     F2 14 62 FC | 	wrlong	arg02, objptr
18064     04 E4 85 F1 | 	sub	objptr, #4
18068     F2 12 02 FB | 	rdlong	arg01, objptr
1806c     04 E4 85 F1 | 	sub	objptr, #4
18070     F2 16 02 FB | 	rdlong	arg03, objptr
18074     37 00 00 FF 
18078     28 E4 85 F1 | 	sub	objptr, ##28200
1807c     40 B5 B0 FD | 	call	#_hg010b_spin2_putpixel
18080     A7 F0 03 F6 | 	mov	ptra, fp
18084     B2 00 A0 FD | 	call	#popregs_
18088                 | _do_plot_ret
18088     2D 00 64 FD | 	ret
1808c                 | 
1808c                 | ' 
1808c                 | ' '-------------------- poke
1808c                 | ' 
1808c                 | ' sub do_poke
1808c                 | _do_poke
1808c     01 4A 05 F6 | 	mov	COUNT_, #1
18090     A8 00 A0 FD | 	call	#pushregs_
18094     20 F0 07 F1 | 	add	ptra, #32
18098     44 52 BF FD | 	call	#_pop
1809c     FD 14 02 F6 | 	mov	arg02, result1
180a0     FE 12 02 F6 | 	mov	arg01, result2
180a4     FF 26 02 F6 | 	mov	local01, result3
180a8     A7 14 62 FC | 	wrlong	arg02, fp
180ac     04 4E 05 F1 | 	add	fp, #4
180b0     A7 12 62 FC | 	wrlong	arg01, fp
180b4     04 4E 05 F1 | 	add	fp, #4
180b8     A7 26 62 FC | 	wrlong	local01, fp
180bc     08 4E 85 F1 | 	sub	fp, #8
180c0     1C 52 BF FD | 	call	#_pop
180c4     FF 26 02 F6 | 	mov	local01, result3
180c8     0C 4E 05 F1 | 	add	fp, #12
180cc     A7 FA 61 FC | 	wrlong	result1, fp
180d0     04 4E 05 F1 | 	add	fp, #4
180d4     A7 FC 61 FC | 	wrlong	result2, fp
180d8     04 4E 05 F1 | 	add	fp, #4
180dc     A7 26 62 FC | 	wrlong	local01, fp
180e0     08 4E 85 F1 | 	sub	fp, #8
180e4     A7 12 02 F6 | 	mov	arg01, fp
180e8     0C 4E 85 F1 | 	sub	fp, #12
180ec     D4 53 BF FD | 	call	#_converttoint
180f0     18 4E 05 F1 | 	add	fp, #24
180f4     A7 FA 61 FC | 	wrlong	result1, fp
180f8     18 4E 85 F1 | 	sub	fp, #24
180fc     A7 12 02 F6 | 	mov	arg01, fp
18100     C0 53 BF FD | 	call	#_converttoint
18104     1C 4E 05 F1 | 	add	fp, #28
18108     A7 FA 61 FC | 	wrlong	result1, fp
1810c                 | ' t1=pop() 'value
1810c                 | ' t2=pop() 
1810c                 | ' a=converttoint(t2) : v=converttoint(t1)
1810c                 | ' if a<$80000 then poke a,v else pspoke a,v
1810c     04 4E 85 F1 | 	sub	fp, #4
18110     A7 26 02 FB | 	rdlong	local01, fp
18114     18 4E 85 F1 | 	sub	fp, #24
18118     00 04 00 FF 
1811c     00 26 16 F2 | 	cmp	local01, ##524288 wc
18120     1C 00 90 3D |  if_ae	jmp	#LR__1940
18124     18 4E 05 F1 | 	add	fp, #24
18128     A7 12 02 FB | 	rdlong	arg01, fp
1812c     04 4E 05 F1 | 	add	fp, #4
18130     A7 14 02 FB | 	rdlong	arg02, fp
18134     1C 4E 85 F1 | 	sub	fp, #28
18138     09 15 42 FC | 	wrbyte	arg02, arg01
1813c     18 00 90 FD | 	jmp	#LR__1941
18140                 | LR__1940
18140     18 4E 05 F1 | 	add	fp, #24
18144     A7 12 02 FB | 	rdlong	arg01, fp
18148     04 4E 05 F1 | 	add	fp, #4
1814c     A7 14 02 FB | 	rdlong	arg02, fp
18150     1C 4E 85 F1 | 	sub	fp, #28
18154     04 A6 B0 FD | 	call	#_pspoke
18158                 | LR__1941
18158     A7 F0 03 F6 | 	mov	ptra, fp
1815c     B2 00 A0 FD | 	call	#popregs_
18160                 | _do_poke_ret
18160     2D 00 64 FD | 	ret
18164                 | 
18164                 | ' 
18164                 | ' '-------------------- pop
18164                 | ' 
18164                 | ' sub do_pop()
18164                 | _do_pop
18164                 | ' if gosubtop>0 then  gosubtop -=1 
18164     50 00 00 FF 
18168     34 E5 05 F1 | 	add	objptr, ##41268
1816c     F2 00 02 FB | 	rdlong	_var01, objptr
18170     50 00 00 FF 
18174     34 E5 85 F1 | 	sub	objptr, ##41268
18178     01 00 56 F2 | 	cmps	_var01, #1 wc
1817c     50 00 00 3F 
18180     34 E5 05 31 |  if_ae	add	objptr, ##41268
18184     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
18188     01 00 86 31 |  if_ae	sub	_var01, #1
1818c     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
18190     50 00 00 3F 
18194     34 E5 85 31 |  if_ae	sub	objptr, ##41268
18198                 | _do_pop_ret
18198     2D 00 64 FD | 	ret
1819c                 | 
1819c                 | ' 
1819c                 | ' '-------------------- position
1819c                 | ' 
1819c                 | ' sub do_position
1819c                 | _do_position
1819c     01 4A 05 F6 | 	mov	COUNT_, #1
181a0     A8 00 A0 FD | 	call	#pushregs_
181a4     18 F0 07 F1 | 	add	ptra, #24
181a8     34 51 BF FD | 	call	#_pop
181ac     FD 14 02 F6 | 	mov	arg02, result1
181b0     FE 12 02 F6 | 	mov	arg01, result2
181b4     FF 26 02 F6 | 	mov	local01, result3
181b8     A7 14 62 FC | 	wrlong	arg02, fp
181bc     04 4E 05 F1 | 	add	fp, #4
181c0     A7 12 62 FC | 	wrlong	arg01, fp
181c4     04 4E 05 F1 | 	add	fp, #4
181c8     A7 26 62 FC | 	wrlong	local01, fp
181cc     08 4E 85 F1 | 	sub	fp, #8
181d0     0C 51 BF FD | 	call	#_pop
181d4     FF 26 02 F6 | 	mov	local01, result3
181d8     0C 4E 05 F1 | 	add	fp, #12
181dc     A7 FA 61 FC | 	wrlong	result1, fp
181e0     04 4E 05 F1 | 	add	fp, #4
181e4     A7 FC 61 FC | 	wrlong	result2, fp
181e8     04 4E 05 F1 | 	add	fp, #4
181ec     A7 26 62 FC | 	wrlong	local01, fp
181f0     08 4E 85 F1 | 	sub	fp, #8
181f4     A7 12 02 F6 | 	mov	arg01, fp
181f8     0C 4E 85 F1 | 	sub	fp, #12
181fc     C4 52 BF FD | 	call	#_converttoint
18200     FD 26 02 F6 | 	mov	local01, result1
18204     A7 12 02 F6 | 	mov	arg01, fp
18208     B8 52 BF FD | 	call	#_converttoint
1820c     FD 14 02 F6 | 	mov	arg02, result1
18210     13 13 02 F6 | 	mov	arg01, local01
18214     6C BF B0 FD | 	call	#_hg010b_spin2_setcursorpos
18218     A7 F0 03 F6 | 	mov	ptra, fp
1821c     B2 00 A0 FD | 	call	#popregs_
18220                 | _do_position_ret
18220     2D 00 64 FD | 	ret
18224                 | 
18224                 | ' 
18224                 | ' '-------------------- print
18224                 | ' 
18224                 | ' sub do_print  
18224                 | _do_print
18224     0B 4A 05 F6 | 	mov	COUNT_, #11
18228     A8 00 A0 FD | 	call	#pushregs_
1822c     00 2C 06 F6 | 	mov	local04, #0
18230     AC 50 BF FD | 	call	#_pop
18234     FD 2E 02 F6 | 	mov	local05, result1
18238     FE 30 02 F6 | 	mov	local06, result2
1823c     FF 32 02 F6 | 	mov	local07, result3
18240     17 27 02 F6 | 	mov	local01, local05
18244     18 29 02 F6 | 	mov	local02, local06
18248     19 2B 02 F6 | 	mov	local03, local07
1824c                 | '  
1824c                 | ' r=0
1824c                 | ' t1=pop() 
1824c                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
1824c     21 2A 0E F2 | 	cmp	local03, #33 wz
18250     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
18254     20 00 90 5D |  if_ne	jmp	#LR__1950
18258     15 2D 02 F6 | 	mov	local04, local03
1825c     80 50 BF FD | 	call	#_pop
18260     FD 2E 02 F6 | 	mov	local05, result1
18264     FE 30 02 F6 | 	mov	local06, result2
18268     FF 32 02 F6 | 	mov	local07, result3
1826c     17 27 02 F6 | 	mov	local01, local05
18270     18 29 02 F6 | 	mov	local02, local06
18274     19 2B 02 F6 | 	mov	local03, local07
18278                 | LR__1950
18278                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
18278     20 2A 0E F2 | 	cmp	local03, #32 wz
1827c     15 2D 02 A6 |  if_e	mov	local04, local03
18280                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
18280     FF 2A 0E F2 | 	cmp	local03, #255 wz
18284     10 00 90 5D |  if_ne	jmp	#LR__1951
18288     13 13 02 F6 | 	mov	arg01, local01
1828c     00 14 06 F6 | 	mov	arg02, #0
18290     98 A2 B0 FD | 	call	#_printerror
18294     D4 04 90 FD | 	jmp	#LR__1970
18298                 | LR__1951
18298                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
18298     2B 2A 0E F2 | 	cmp	local03, #43 wz
1829c     14 00 90 5D |  if_ne	jmp	#LR__1952
182a0     13 13 02 F6 | 	mov	arg01, local01
182a4     B0 51 BF FD | 	call	#_convertstring
182a8     FD 2E 02 F6 | 	mov	local05, result1
182ac     17 27 02 F6 | 	mov	local01, local05
182b0     1F 2A 06 F6 | 	mov	local03, #31
182b4                 | LR__1952
182b4                 | ' 
182b4                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
182b4     2C 2A 0E F2 | 	cmp	local03, #44 wz
182b8     80 00 90 5D |  if_ne	jmp	#LR__1953
182bc     00 12 06 F6 | 	mov	arg01, #0
182c0     7C 39 B1 FD | 	call	#__system___getiolock_0602
182c4     FD 12 02 F6 | 	mov	arg01, result1
182c8     4C DC B0 FD | 	call	#__system___lockmem
182cc     B2 01 00 FF 
182d0     D6 14 06 F6 | 	mov	arg02, ##@LR__5908
182d4     00 12 06 F6 | 	mov	arg01, #0
182d8     00 16 06 F6 | 	mov	arg03, #0
182dc     2C E9 B0 FD | 	call	#__system___basic_print_string
182e0     0A 34 06 F6 | 	mov	local08, #10
182e4     00 12 06 F6 | 	mov	arg01, #0
182e8     13 15 02 F6 | 	mov	arg02, local01
182ec     00 16 06 F6 | 	mov	arg03, #0
182f0     0A 18 06 F6 | 	mov	arg04, #10
182f4     58 E9 B0 FD | 	call	#__system___basic_print_integer
182f8     FD 36 02 F6 | 	mov	local09, result1
182fc     00 12 06 F6 | 	mov	arg01, #0
18300     0A 14 06 F6 | 	mov	arg02, #10
18304     00 16 06 F6 | 	mov	arg03, #0
18308     A8 E8 B0 FD | 	call	#__system___basic_print_char
1830c     01 38 06 F6 | 	mov	local10, #1
18310     00 12 06 F6 | 	mov	arg01, #0
18314     28 39 B1 FD | 	call	#__system___getiolock_0602
18318     FD 00 68 FC | 	wrlong	#0, result1
1831c     00 3A 06 F6 | 	mov	local11, #0
18320     BC 4F BF FD | 	call	#_pop
18324     FD 2E 02 F6 | 	mov	local05, result1
18328     FE 30 02 F6 | 	mov	local06, result2
1832c     FF 32 02 F6 | 	mov	local07, result3
18330     17 27 02 F6 | 	mov	local01, local05
18334     18 29 02 F6 | 	mov	local02, local06
18338     19 2B 02 F6 | 	mov	local03, local07
1833c                 | LR__1953
1833c                 | ' 
1833c                 | ' if r=print_mod_comma  then
1833c     21 2C 0E F2 | 	cmp	local04, #33 wz
18340     AC 01 90 5D |  if_ne	jmp	#LR__1958
18344                 | '   if t1.result_type=result_int then print t1.result.iresult,
18344     1C 2A 0E F2 | 	cmp	local03, #28 wz
18348     64 00 90 5D |  if_ne	jmp	#LR__1954
1834c     00 12 06 F6 | 	mov	arg01, #0
18350     EC 38 B1 FD | 	call	#__system___getiolock_0602
18354     FD 12 02 F6 | 	mov	arg01, result1
18358     BC DB B0 FD | 	call	#__system___lockmem
1835c     00 30 06 F6 | 	mov	local06, #0
18360     00 12 06 F6 | 	mov	arg01, #0
18364     13 15 02 F6 | 	mov	arg02, local01
18368     00 16 06 F6 | 	mov	arg03, #0
1836c     0A 18 06 F6 | 	mov	arg04, #10
18370     DC E8 B0 FD | 	call	#__system___basic_print_integer
18374     FD 32 02 F6 | 	mov	local07, result1
18378     18 2F 02 F6 | 	mov	local05, local06
1837c     19 2F 02 F1 | 	add	local05, local07
18380     00 3A 06 F6 | 	mov	local11, #0
18384     00 12 06 F6 | 	mov	arg01, #0
18388     09 14 06 F6 | 	mov	arg02, #9
1838c     00 16 06 F6 | 	mov	arg03, #0
18390     20 E8 B0 FD | 	call	#__system___basic_print_char
18394     FD 36 02 F6 | 	mov	local09, result1
18398     FD 2E 02 F1 | 	add	local05, result1
1839c     00 12 06 F6 | 	mov	arg01, #0
183a0     9C 38 B1 FD | 	call	#__system___getiolock_0602
183a4     FD 00 68 FC | 	wrlong	#0, result1
183a8     00 FA 05 F6 | 	mov	result1, #0
183ac     00 38 06 F6 | 	mov	local10, #0
183b0                 | LR__1954
183b0                 | '   if t1.result_type=result_uint then print t1.result.uresult,
183b0     1D 2A 0E F2 | 	cmp	local03, #29 wz
183b4     64 00 90 5D |  if_ne	jmp	#LR__1955
183b8     00 12 06 F6 | 	mov	arg01, #0
183bc     80 38 B1 FD | 	call	#__system___getiolock_0602
183c0     FD 12 02 F6 | 	mov	arg01, result1
183c4     50 DB B0 FD | 	call	#__system___lockmem
183c8     00 30 06 F6 | 	mov	local06, #0
183cc     00 12 06 F6 | 	mov	arg01, #0
183d0     13 15 02 F6 | 	mov	arg02, local01
183d4     00 16 06 F6 | 	mov	arg03, #0
183d8     0A 18 06 F6 | 	mov	arg04, #10
183dc     B0 E8 B0 FD | 	call	#__system___basic_print_unsigned
183e0     FD 32 02 F6 | 	mov	local07, result1
183e4     18 2F 02 F6 | 	mov	local05, local06
183e8     19 2F 02 F1 | 	add	local05, local07
183ec     00 3A 06 F6 | 	mov	local11, #0
183f0     00 12 06 F6 | 	mov	arg01, #0
183f4     09 14 06 F6 | 	mov	arg02, #9
183f8     00 16 06 F6 | 	mov	arg03, #0
183fc     B4 E7 B0 FD | 	call	#__system___basic_print_char
18400     FD 36 02 F6 | 	mov	local09, result1
18404     FD 2E 02 F1 | 	add	local05, result1
18408     00 12 06 F6 | 	mov	arg01, #0
1840c     30 38 B1 FD | 	call	#__system___getiolock_0602
18410     FD 00 68 FC | 	wrlong	#0, result1
18414     00 FA 05 F6 | 	mov	result1, #0
18418     00 38 06 F6 | 	mov	local10, #0
1841c                 | LR__1955
1841c                 | '   if t1.result_type=result_float then print t1.result.fresult,
1841c     1E 2A 0E F2 | 	cmp	local03, #30 wz
18420     64 00 90 5D |  if_ne	jmp	#LR__1956
18424     00 12 06 F6 | 	mov	arg01, #0
18428     14 38 B1 FD | 	call	#__system___getiolock_0602
1842c     FD 12 02 F6 | 	mov	arg01, result1
18430     E4 DA B0 FD | 	call	#__system___lockmem
18434     00 30 06 F6 | 	mov	local06, #0
18438     00 12 06 F6 | 	mov	arg01, #0
1843c     13 15 02 F6 | 	mov	arg02, local01
18440     00 16 06 F6 | 	mov	arg03, #0
18444     23 18 06 F6 | 	mov	arg04, #35
18448     5C 0F B1 FD | 	call	#__system___basic_print_float
1844c     FD 32 02 F6 | 	mov	local07, result1
18450     18 2F 02 F6 | 	mov	local05, local06
18454     19 2F 02 F1 | 	add	local05, local07
18458     00 3A 06 F6 | 	mov	local11, #0
1845c     00 12 06 F6 | 	mov	arg01, #0
18460     09 14 06 F6 | 	mov	arg02, #9
18464     00 16 06 F6 | 	mov	arg03, #0
18468     48 E7 B0 FD | 	call	#__system___basic_print_char
1846c     FD 36 02 F6 | 	mov	local09, result1
18470     FD 2E 02 F1 | 	add	local05, result1
18474     00 12 06 F6 | 	mov	arg01, #0
18478     C4 37 B1 FD | 	call	#__system___getiolock_0602
1847c     FD 00 68 FC | 	wrlong	#0, result1
18480     00 FA 05 F6 | 	mov	result1, #0
18484     00 38 06 F6 | 	mov	local10, #0
18488                 | LR__1956
18488                 | '   if t1.result_type=result_string then print t1.result.sresult,
18488     1F 2A 0E F2 | 	cmp	local03, #31 wz
1848c     60 00 90 5D |  if_ne	jmp	#LR__1957
18490     00 12 06 F6 | 	mov	arg01, #0
18494     A8 37 B1 FD | 	call	#__system___getiolock_0602
18498     FD 12 02 F6 | 	mov	arg01, result1
1849c     78 DA B0 FD | 	call	#__system___lockmem
184a0     00 30 06 F6 | 	mov	local06, #0
184a4     00 12 06 F6 | 	mov	arg01, #0
184a8     13 15 02 F6 | 	mov	arg02, local01
184ac     00 16 06 F6 | 	mov	arg03, #0
184b0     58 E7 B0 FD | 	call	#__system___basic_print_string
184b4     FD 32 02 F6 | 	mov	local07, result1
184b8     18 2F 02 F6 | 	mov	local05, local06
184bc     19 2F 02 F1 | 	add	local05, local07
184c0     00 3A 06 F6 | 	mov	local11, #0
184c4     00 12 06 F6 | 	mov	arg01, #0
184c8     09 14 06 F6 | 	mov	arg02, #9
184cc     00 16 06 F6 | 	mov	arg03, #0
184d0     E0 E6 B0 FD | 	call	#__system___basic_print_char
184d4     FD 36 02 F6 | 	mov	local09, result1
184d8     FD 2E 02 F1 | 	add	local05, result1
184dc     00 12 06 F6 | 	mov	arg01, #0
184e0     5C 37 B1 FD | 	call	#__system___getiolock_0602
184e4     FD 00 68 FC | 	wrlong	#0, result1
184e8     00 FA 05 F6 | 	mov	result1, #0
184ec     00 38 06 F6 | 	mov	local10, #0
184f0                 | LR__1957
184f0                 | LR__1958
184f0                 | ' if r=print_mod_semicolon then 
184f0     22 2C 0E F2 | 	cmp	local04, #34 wz
184f4     1C 01 90 5D |  if_ne	jmp	#LR__1963
184f8                 | '   if t1.result_type=result_int then print t1.result.iresult;
184f8     1C 2A 0E F2 | 	cmp	local03, #28 wz
184fc     50 00 90 5D |  if_ne	jmp	#LR__1959
18500     00 12 06 F6 | 	mov	arg01, #0
18504     38 37 B1 FD | 	call	#__system___getiolock_0602
18508     FD 12 02 F6 | 	mov	arg01, result1
1850c     08 DA B0 FD | 	call	#__system___lockmem
18510     00 30 06 F6 | 	mov	local06, #0
18514     00 38 06 F6 | 	mov	local10, #0
18518     0A 3A 06 F6 | 	mov	local11, #10
1851c     00 12 06 F6 | 	mov	arg01, #0
18520     13 15 02 F6 | 	mov	arg02, local01
18524     00 16 06 F6 | 	mov	arg03, #0
18528     0A 18 06 F6 | 	mov	arg04, #10
1852c     20 E7 B0 FD | 	call	#__system___basic_print_integer
18530     FD 32 02 F6 | 	mov	local07, result1
18534     18 2F 02 F6 | 	mov	local05, local06
18538     19 2F 02 F1 | 	add	local05, local07
1853c     00 12 06 F6 | 	mov	arg01, #0
18540     FC 36 B1 FD | 	call	#__system___getiolock_0602
18544     FD 00 68 FC | 	wrlong	#0, result1
18548     00 FA 05 F6 | 	mov	result1, #0
1854c     00 36 06 F6 | 	mov	local09, #0
18550                 | LR__1959
18550                 | '   if t1.result_type=result_uint then print t1.result.uresult;
18550     1D 2A 0E F2 | 	cmp	local03, #29 wz
18554     50 00 90 5D |  if_ne	jmp	#LR__1960
18558     00 12 06 F6 | 	mov	arg01, #0
1855c     E0 36 B1 FD | 	call	#__system___getiolock_0602
18560     FD 12 02 F6 | 	mov	arg01, result1
18564     B0 D9 B0 FD | 	call	#__system___lockmem
18568     00 30 06 F6 | 	mov	local06, #0
1856c     00 38 06 F6 | 	mov	local10, #0
18570     0A 3A 06 F6 | 	mov	local11, #10
18574     00 12 06 F6 | 	mov	arg01, #0
18578     13 15 02 F6 | 	mov	arg02, local01
1857c     00 16 06 F6 | 	mov	arg03, #0
18580     0A 18 06 F6 | 	mov	arg04, #10
18584     08 E7 B0 FD | 	call	#__system___basic_print_unsigned
18588     FD 32 02 F6 | 	mov	local07, result1
1858c     18 2F 02 F6 | 	mov	local05, local06
18590     19 2F 02 F1 | 	add	local05, local07
18594     00 12 06 F6 | 	mov	arg01, #0
18598     A4 36 B1 FD | 	call	#__system___getiolock_0602
1859c     FD 00 68 FC | 	wrlong	#0, result1
185a0     00 FA 05 F6 | 	mov	result1, #0
185a4     00 36 06 F6 | 	mov	local09, #0
185a8                 | LR__1960
185a8                 | '   if t1.result_type=result_float then print t1.result.fresult;
185a8     1E 2A 0E F2 | 	cmp	local03, #30 wz
185ac     30 00 90 5D |  if_ne	jmp	#LR__1961
185b0     00 12 06 F6 | 	mov	arg01, #0
185b4     88 36 B1 FD | 	call	#__system___getiolock_0602
185b8     FD 12 02 F6 | 	mov	arg01, result1
185bc     58 D9 B0 FD | 	call	#__system___lockmem
185c0     00 12 06 F6 | 	mov	arg01, #0
185c4     13 15 02 F6 | 	mov	arg02, local01
185c8     00 16 06 F6 | 	mov	arg03, #0
185cc     23 18 06 F6 | 	mov	arg04, #35
185d0     D4 0D B1 FD | 	call	#__system___basic_print_float
185d4     00 12 06 F6 | 	mov	arg01, #0
185d8     64 36 B1 FD | 	call	#__system___getiolock_0602
185dc     FD 00 68 FC | 	wrlong	#0, result1
185e0                 | LR__1961
185e0                 | '   if t1.result_type=result_string then print t1.result.sresult;
185e0     1F 2A 0E F2 | 	cmp	local03, #31 wz
185e4     2C 00 90 5D |  if_ne	jmp	#LR__1962
185e8     00 12 06 F6 | 	mov	arg01, #0
185ec     50 36 B1 FD | 	call	#__system___getiolock_0602
185f0     FD 12 02 F6 | 	mov	arg01, result1
185f4     20 D9 B0 FD | 	call	#__system___lockmem
185f8     00 12 06 F6 | 	mov	arg01, #0
185fc     13 15 02 F6 | 	mov	arg02, local01
18600     00 16 06 F6 | 	mov	arg03, #0
18604     04 E6 B0 FD | 	call	#__system___basic_print_string
18608     00 12 06 F6 | 	mov	arg01, #0
1860c     30 36 B1 FD | 	call	#__system___getiolock_0602
18610     FD 00 68 FC | 	wrlong	#0, result1
18614                 | LR__1962
18614                 | LR__1963
18614                 | ' if r=0 then 
18614     00 2C 0E F2 | 	cmp	local04, #0 wz
18618     1C 01 90 5D |  if_ne	jmp	#LR__1968
1861c                 | '   if t1.result_type=result_int then print t1.result.iresult
1861c     1C 2A 0E F2 | 	cmp	local03, #28 wz
18620     40 00 90 5D |  if_ne	jmp	#LR__1964
18624     00 12 06 F6 | 	mov	arg01, #0
18628     14 36 B1 FD | 	call	#__system___getiolock_0602
1862c     FD 12 02 F6 | 	mov	arg01, result1
18630     E4 D8 B0 FD | 	call	#__system___lockmem
18634     00 12 06 F6 | 	mov	arg01, #0
18638     13 15 02 F6 | 	mov	arg02, local01
1863c     00 16 06 F6 | 	mov	arg03, #0
18640     0A 18 06 F6 | 	mov	arg04, #10
18644     08 E6 B0 FD | 	call	#__system___basic_print_integer
18648     00 12 06 F6 | 	mov	arg01, #0
1864c     0A 14 06 F6 | 	mov	arg02, #10
18650     00 16 06 F6 | 	mov	arg03, #0
18654     5C E5 B0 FD | 	call	#__system___basic_print_char
18658     00 12 06 F6 | 	mov	arg01, #0
1865c     E0 35 B1 FD | 	call	#__system___getiolock_0602
18660     FD 00 68 FC | 	wrlong	#0, result1
18664                 | LR__1964
18664                 | '   if t1.result_type=result_uint then print t1.result.uresult
18664     1D 2A 0E F2 | 	cmp	local03, #29 wz
18668     40 00 90 5D |  if_ne	jmp	#LR__1965
1866c     00 12 06 F6 | 	mov	arg01, #0
18670     CC 35 B1 FD | 	call	#__system___getiolock_0602
18674     FD 12 02 F6 | 	mov	arg01, result1
18678     9C D8 B0 FD | 	call	#__system___lockmem
1867c     00 12 06 F6 | 	mov	arg01, #0
18680     13 15 02 F6 | 	mov	arg02, local01
18684     00 16 06 F6 | 	mov	arg03, #0
18688     0A 18 06 F6 | 	mov	arg04, #10
1868c     00 E6 B0 FD | 	call	#__system___basic_print_unsigned
18690     00 12 06 F6 | 	mov	arg01, #0
18694     0A 14 06 F6 | 	mov	arg02, #10
18698     00 16 06 F6 | 	mov	arg03, #0
1869c     14 E5 B0 FD | 	call	#__system___basic_print_char
186a0     00 12 06 F6 | 	mov	arg01, #0
186a4     98 35 B1 FD | 	call	#__system___getiolock_0602
186a8     FD 00 68 FC | 	wrlong	#0, result1
186ac                 | LR__1965
186ac                 | '   if t1.result_type=result_float then print t1.result.fresult
186ac     1E 2A 0E F2 | 	cmp	local03, #30 wz
186b0     40 00 90 5D |  if_ne	jmp	#LR__1966
186b4     00 12 06 F6 | 	mov	arg01, #0
186b8     84 35 B1 FD | 	call	#__system___getiolock_0602
186bc     FD 12 02 F6 | 	mov	arg01, result1
186c0     54 D8 B0 FD | 	call	#__system___lockmem
186c4     00 12 06 F6 | 	mov	arg01, #0
186c8     13 15 02 F6 | 	mov	arg02, local01
186cc     00 16 06 F6 | 	mov	arg03, #0
186d0     23 18 06 F6 | 	mov	arg04, #35
186d4     D0 0C B1 FD | 	call	#__system___basic_print_float
186d8     00 12 06 F6 | 	mov	arg01, #0
186dc     0A 14 06 F6 | 	mov	arg02, #10
186e0     00 16 06 F6 | 	mov	arg03, #0
186e4     CC E4 B0 FD | 	call	#__system___basic_print_char
186e8     00 12 06 F6 | 	mov	arg01, #0
186ec     50 35 B1 FD | 	call	#__system___getiolock_0602
186f0     FD 00 68 FC | 	wrlong	#0, result1
186f4                 | LR__1966
186f4                 | '   if t1.result_type=result_string then print t1.result.sresult
186f4     1F 2A 0E F2 | 	cmp	local03, #31 wz
186f8     3C 00 90 5D |  if_ne	jmp	#LR__1967
186fc     00 12 06 F6 | 	mov	arg01, #0
18700     3C 35 B1 FD | 	call	#__system___getiolock_0602
18704     FD 12 02 F6 | 	mov	arg01, result1
18708     0C D8 B0 FD | 	call	#__system___lockmem
1870c     00 12 06 F6 | 	mov	arg01, #0
18710     13 15 02 F6 | 	mov	arg02, local01
18714     00 16 06 F6 | 	mov	arg03, #0
18718     F0 E4 B0 FD | 	call	#__system___basic_print_string
1871c     00 12 06 F6 | 	mov	arg01, #0
18720     0A 14 06 F6 | 	mov	arg02, #10
18724     00 16 06 F6 | 	mov	arg03, #0
18728     88 E4 B0 FD | 	call	#__system___basic_print_char
1872c     00 12 06 F6 | 	mov	arg01, #0
18730     0C 35 B1 FD | 	call	#__system___getiolock_0602
18734     FD 00 68 FC | 	wrlong	#0, result1
18738                 | LR__1967
18738                 | LR__1968
18738                 | ' if r=print_mod_empty then print
18738     20 2C 0E F2 | 	cmp	local04, #32 wz
1873c     2C 00 90 5D |  if_ne	jmp	#LR__1969
18740     00 12 06 F6 | 	mov	arg01, #0
18744     F8 34 B1 FD | 	call	#__system___getiolock_0602
18748     FD 12 02 F6 | 	mov	arg01, result1
1874c     C8 D7 B0 FD | 	call	#__system___lockmem
18750     00 12 06 F6 | 	mov	arg01, #0
18754     0A 14 06 F6 | 	mov	arg02, #10
18758     00 16 06 F6 | 	mov	arg03, #0
1875c     54 E4 B0 FD | 	call	#__system___basic_print_char
18760     00 12 06 F6 | 	mov	arg01, #0
18764     D8 34 B1 FD | 	call	#__system___getiolock_0602
18768     FD 00 68 FC | 	wrlong	#0, result1
1876c                 | LR__1969
1876c                 | LR__1970
1876c     A7 F0 03 F6 | 	mov	ptra, fp
18770     B2 00 A0 FD | 	call	#popregs_
18774                 | _do_print_ret
18774     2D 00 64 FD | 	ret
18778                 | 
18778                 | ' 
18778                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
18778                 | ' 
18778                 | ' sub do_push
18778                 | _do_push
18778                 | ' if stackpointer<maxstack then 
18778     43 00 00 FF 
1877c     58 E4 05 F1 | 	add	objptr, ##34392
18780     F2 00 02 FB | 	rdlong	_var01, objptr
18784     43 00 00 FF 
18788     58 E4 85 F1 | 	sub	objptr, ##34392
1878c     01 00 00 FF 
18790     00 00 56 F2 | 	cmps	_var01, ##512 wc
18794     F8 00 90 3D |  if_ae	jmp	#LR__1980
18798     4A 00 00 FF 
1879c     80 E4 05 F1 | 	add	objptr, ##38016
187a0     F2 02 02 FB | 	rdlong	_var02, objptr
187a4     01 05 02 F6 | 	mov	_var03, _var02
187a8     01 04 66 F0 | 	shl	_var03, #1
187ac     01 05 02 F1 | 	add	_var03, _var02
187b0     02 04 66 F0 | 	shl	_var03, #2
187b4     03 00 00 FF 
187b8     04 E4 85 F1 | 	sub	objptr, ##1540
187bc     F2 04 02 F1 | 	add	_var03, objptr
187c0     02 01 02 FB | 	rdlong	_var01, _var03
187c4     04 04 06 F1 | 	add	_var03, #4
187c8     02 07 02 FB | 	rdlong	_var04, _var03
187cc     01 05 02 F6 | 	mov	_var03, _var02
187d0     01 04 66 F0 | 	shl	_var03, #1
187d4     01 05 02 F1 | 	add	_var03, _var02
187d8     02 04 66 F0 | 	shl	_var03, #2
187dc     F2 04 02 F1 | 	add	_var03, objptr
187e0     08 04 06 F1 | 	add	_var03, #8
187e4     02 03 02 FB | 	rdlong	_var02, _var03
187e8     04 00 00 FF 
187ec     24 E4 85 F1 | 	sub	objptr, ##2084
187f0     F2 04 02 FB | 	rdlong	_var03, objptr
187f4     02 09 02 F6 | 	mov	_var05, _var03
187f8     01 08 66 F0 | 	shl	_var05, #1
187fc     02 09 02 F1 | 	add	_var05, _var03
18800     02 08 66 F0 | 	shl	_var05, #2
18804     0C 00 00 FF 
18808     0C E4 85 F1 | 	sub	objptr, ##6156
1880c     F2 08 02 F1 | 	add	_var05, objptr
18810     04 01 62 FC | 	wrlong	_var01, _var05
18814     0C 00 00 FF 
18818     0C E4 05 F1 | 	add	objptr, ##6156
1881c     F2 08 02 FB | 	rdlong	_var05, objptr
18820     04 05 02 F6 | 	mov	_var03, _var05
18824     01 04 66 F0 | 	shl	_var03, #1
18828     04 05 02 F1 | 	add	_var03, _var05
1882c     02 04 66 F0 | 	shl	_var03, #2
18830     0C 00 00 FF 
18834     0C E4 85 F1 | 	sub	objptr, ##6156
18838     F2 04 02 F1 | 	add	_var03, objptr
1883c     04 04 06 F1 | 	add	_var03, #4
18840     02 07 62 FC | 	wrlong	_var04, _var03
18844     0C 00 00 FF 
18848     0C E4 05 F1 | 	add	objptr, ##6156
1884c     F2 08 02 FB | 	rdlong	_var05, objptr
18850     04 07 02 F6 | 	mov	_var04, _var05
18854     01 06 66 F0 | 	shl	_var04, #1
18858     04 07 02 F1 | 	add	_var04, _var05
1885c     02 06 66 F0 | 	shl	_var04, #2
18860     0C 00 00 FF 
18864     0C E4 85 F1 | 	sub	objptr, ##6156
18868     F2 06 02 F1 | 	add	_var04, objptr
1886c     08 06 06 F1 | 	add	_var04, #8
18870     03 03 62 FC | 	wrlong	_var02, _var04
18874     0C 00 00 FF 
18878     0C E4 05 F1 | 	add	objptr, ##6156
1887c     F2 00 02 FB | 	rdlong	_var01, objptr
18880     01 00 06 F1 | 	add	_var01, #1
18884     F2 00 62 FC | 	wrlong	_var01, objptr
18888     43 00 00 FF 
1888c     58 E4 85 F1 | 	sub	objptr, ##34392
18890                 | LR__1980
18890                 | _do_push_ret
18890     2D 00 64 FD | 	ret
18894                 | 
18894                 | ' 
18894                 | ' '-------------------- put
18894                 | ' 
18894                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
18894                 | _do_put
18894     03 4A 05 F6 | 	mov	COUNT_, #3
18898     A8 00 A0 FD | 	call	#pushregs_
1889c     28 F0 07 F1 | 	add	ptra, #40
188a0     4A 00 00 FF 
188a4     80 E4 05 F1 | 	add	objptr, ##38016
188a8     F2 1A 02 FB | 	rdlong	arg05, objptr
188ac     0D 19 02 F6 | 	mov	arg04, arg05
188b0     01 18 66 F0 | 	shl	arg04, #1
188b4     0D 19 02 F1 | 	add	arg04, arg05
188b8     02 18 66 F0 | 	shl	arg04, #2
188bc     03 00 00 FF 
188c0     04 E4 85 F1 | 	sub	objptr, ##1540
188c4     F2 18 02 F1 | 	add	arg04, objptr
188c8     0C 1B 02 FB | 	rdlong	arg05, arg04
188cc     A7 1A 62 FC | 	wrlong	arg05, fp
188d0                 | ' 
188d0                 | ' numpar=compiledline(lineptr_e).result.uresult
188d0                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
188d0     04 1A 0E F2 | 	cmp	arg05, #4 wz
188d4     47 00 00 FF 
188d8     7C E4 85 F1 | 	sub	objptr, ##36476
188dc     48 00 90 5D |  if_ne	jmp	#LR__1990
188e0     FC 49 BF FD | 	call	#_pop
188e4     FF 1A 02 F6 | 	mov	arg05, result3
188e8     1C 4E 05 F1 | 	add	fp, #28
188ec     A7 FA 61 FC | 	wrlong	result1, fp
188f0     04 4E 05 F1 | 	add	fp, #4
188f4     A7 FC 61 FC | 	wrlong	result2, fp
188f8     04 4E 05 F1 | 	add	fp, #4
188fc     A7 1A 62 FC | 	wrlong	arg05, fp
18900     08 4E 85 F1 | 	sub	fp, #8
18904     A7 12 02 F6 | 	mov	arg01, fp
18908     1C 4E 85 F1 | 	sub	fp, #28
1890c     B4 4B BF FD | 	call	#_converttoint
18910     52 00 00 FF 
18914     0C E5 05 F1 | 	add	objptr, ##42252
18918     F2 FA 61 FC | 	wrlong	result1, objptr
1891c     52 00 00 FF 
18920     0C E5 85 F1 | 	sub	objptr, ##42252
18924     18 00 90 FD | 	jmp	#LR__1991
18928                 | LR__1990
18928     52 00 00 FF 
1892c     0C E5 05 F1 | 	add	objptr, ##42252
18930     FF FF FF FF 
18934     F2 FE 6B FC | 	wrlong	##-1, objptr
18938     52 00 00 FF 
1893c     0C E5 85 F1 | 	sub	objptr, ##42252
18940                 | LR__1991
18940                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
18940     A7 1A 02 FB | 	rdlong	arg05, fp
18944     03 1A 56 F2 | 	cmps	arg05, #3 wc
18948     40 00 90 CD |  if_b	jmp	#LR__1992
1894c     90 49 BF FD | 	call	#_pop
18950     FF 1A 02 F6 | 	mov	arg05, result3
18954     1C 4E 05 F1 | 	add	fp, #28
18958     A7 FA 61 FC | 	wrlong	result1, fp
1895c     04 4E 05 F1 | 	add	fp, #4
18960     A7 FC 61 FC | 	wrlong	result2, fp
18964     04 4E 05 F1 | 	add	fp, #4
18968     A7 1A 62 FC | 	wrlong	arg05, fp
1896c     08 4E 85 F1 | 	sub	fp, #8
18970     A7 12 02 F6 | 	mov	arg01, fp
18974     1C 4E 85 F1 | 	sub	fp, #28
18978     48 4B BF FD | 	call	#_converttoint
1897c     08 4E 05 F1 | 	add	fp, #8
18980     A7 FA 61 FC | 	wrlong	result1, fp
18984     08 4E 85 F1 | 	sub	fp, #8
18988     0C 00 90 FD | 	jmp	#LR__1993
1898c                 | LR__1992
1898c     08 4E 05 F1 | 	add	fp, #8
18990     A7 02 68 FC | 	wrlong	#1, fp
18994     08 4E 85 F1 | 	sub	fp, #8
18998                 | LR__1993
18998                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
18998     A7 18 02 FB | 	rdlong	arg04, fp
1899c     02 18 56 F2 | 	cmps	arg04, #2 wc
189a0     3C 00 90 CD |  if_b	jmp	#LR__1994
189a4     38 49 BF FD | 	call	#_pop
189a8     FF 18 02 F6 | 	mov	arg04, result3
189ac     1C 4E 05 F1 | 	add	fp, #28
189b0     A7 FA 61 FC | 	wrlong	result1, fp
189b4     04 4E 05 F1 | 	add	fp, #4
189b8     A7 FC 61 FC | 	wrlong	result2, fp
189bc     04 4E 05 F1 | 	add	fp, #4
189c0     A7 18 62 FC | 	wrlong	arg04, fp
189c4     08 4E 85 F1 | 	sub	fp, #8
189c8     A7 12 02 F6 | 	mov	arg01, fp
189cc     1C 4E 85 F1 | 	sub	fp, #28
189d0     F0 4A BF FD | 	call	#_converttoint
189d4     0C 4E 05 F1 | 	add	fp, #12
189d8     A7 FA 61 FC | 	wrlong	result1, fp
189dc     0C 4E 85 F1 | 	sub	fp, #12
189e0                 | LR__1994
189e0     FC 48 BF FD | 	call	#_pop
189e4     FF 18 02 F6 | 	mov	arg04, result3
189e8     1C 4E 05 F1 | 	add	fp, #28
189ec     A7 FA 61 FC | 	wrlong	result1, fp
189f0     04 4E 05 F1 | 	add	fp, #4
189f4     A7 FC 61 FC | 	wrlong	result2, fp
189f8     04 4E 05 F1 | 	add	fp, #4
189fc     A7 18 62 FC | 	wrlong	arg04, fp
18a00     08 4E 85 F1 | 	sub	fp, #8
18a04     A7 12 02 F6 | 	mov	arg01, fp
18a08     1C 4E 85 F1 | 	sub	fp, #28
18a0c     B4 4A BF FD | 	call	#_converttoint
18a10     04 4E 05 F1 | 	add	fp, #4
18a14     A7 FA 61 FC | 	wrlong	result1, fp
18a18     10 4E 05 F1 | 	add	fp, #16
18a1c     A7 26 02 FB | 	rdlong	local01, fp
18a20     14 4E 85 F1 | 	sub	fp, #20
18a24     02 26 66 F0 | 	shl	local01, #2
18a28     50 00 00 FF 
18a2c     C4 E4 05 F1 | 	add	objptr, ##41156
18a30     F2 26 02 F1 | 	add	local01, objptr
18a34     13 01 68 FC | 	wrlong	#0, local01
18a38                 | ' t1=pop() : channel=converttoint(t1)
18a38                 | ' getres(j)=0
18a38                 | ' if pos>=0 then
18a38     02 00 00 FF 
18a3c     48 E4 05 F1 | 	add	objptr, ##1096
18a40     F2 28 02 FB | 	rdlong	local02, objptr
18a44     52 00 00 FF 
18a48     0C E5 85 F1 | 	sub	objptr, ##42252
18a4c     00 28 56 F2 | 	cmps	local02, #0 wc
18a50     C0 01 90 CD |  if_b	jmp	#LR__2000
18a54     10 4E 05 F1 | 	add	fp, #16
18a58     A7 00 68 FC | 	wrlong	#0, fp
18a5c     10 4E 85 F1 | 	sub	fp, #16
18a60                 | '    i=0: do
18a60                 | LR__1995
18a60     14 4E 05 F1 | 	add	fp, #20
18a64     A7 00 68 FC | 	wrlong	#0, fp
18a68     14 4E 85 F1 | 	sub	fp, #20
18a6c                 | '    j=0: do    
18a6c                 | LR__1996
18a6c                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
18a6c     0C 4E 05 F1 | 	add	fp, #12
18a70     A7 28 02 FB | 	rdlong	local02, fp
18a74     0C 4E 85 F1 | 	sub	fp, #12
18a78     00 04 00 FF 
18a7c     00 28 56 F2 | 	cmps	local02, ##524288 wc
18a80     4C 00 90 3D |  if_ae	jmp	#LR__1997
18a84     14 4E 05 F1 | 	add	fp, #20
18a88     A7 28 02 FB | 	rdlong	local02, fp
18a8c     14 27 02 F6 | 	mov	local01, local02
18a90     4E 00 00 FF 
18a94     B4 E4 05 F1 | 	add	objptr, ##40116
18a98     F2 26 02 F1 | 	add	local01, objptr
18a9c     08 4E 85 F1 | 	sub	fp, #8
18aa0     A7 12 02 FB | 	rdlong	arg01, fp
18aa4     04 4E 05 F1 | 	add	fp, #4
18aa8     A7 18 02 FB | 	rdlong	arg04, fp
18aac     0A 18 66 F0 | 	shl	arg04, #10
18ab0     0C 13 02 F1 | 	add	arg01, arg04
18ab4     10 4E 85 F1 | 	sub	fp, #16
18ab8     14 13 02 F1 | 	add	arg01, local02
18abc     09 FB C1 FA | 	rdbyte	result1, arg01
18ac0     4E 00 00 FF 
18ac4     B4 E4 85 F1 | 	sub	objptr, ##40116
18ac8     13 FB 41 FC | 	wrbyte	result1, local01
18acc     48 00 90 FD | 	jmp	#LR__1998
18ad0                 | LR__1997
18ad0     14 4E 05 F1 | 	add	fp, #20
18ad4     A7 28 02 FB | 	rdlong	local02, fp
18ad8     14 27 02 F6 | 	mov	local01, local02
18adc     4E 00 00 FF 
18ae0     B4 E4 05 F1 | 	add	objptr, ##40116
18ae4     F2 26 02 F1 | 	add	local01, objptr
18ae8     08 4E 85 F1 | 	sub	fp, #8
18aec     A7 12 02 FB | 	rdlong	arg01, fp
18af0     04 4E 05 F1 | 	add	fp, #4
18af4     A7 18 02 FB | 	rdlong	arg04, fp
18af8     0A 18 66 F0 | 	shl	arg04, #10
18afc     0C 13 02 F1 | 	add	arg01, arg04
18b00     10 4E 85 F1 | 	sub	fp, #16
18b04     14 13 02 F1 | 	add	arg01, local02
18b08     4E 00 00 FF 
18b0c     B4 E4 85 F1 | 	sub	objptr, ##40116
18b10     90 9C B0 FD | 	call	#_pspeek
18b14     13 FB 41 FC | 	wrbyte	result1, local01
18b18                 | LR__1998
18b18     14 4E 05 F1 | 	add	fp, #20
18b1c     A7 28 02 FB | 	rdlong	local02, fp
18b20     01 28 06 F1 | 	add	local02, #1
18b24     A7 28 62 FC | 	wrlong	local02, fp
18b28     14 4E 85 F1 | 	sub	fp, #20
18b2c     02 00 00 FF 
18b30     00 28 56 F2 | 	cmps	local02, ##1024 wc
18b34     2C 00 90 3D |  if_ae	jmp	#LR__1999
18b38     10 4E 05 F1 | 	add	fp, #16
18b3c     A7 26 02 FB | 	rdlong	local01, fp
18b40     0A 26 66 F0 | 	shl	local01, #10
18b44     04 4E 05 F1 | 	add	fp, #4
18b48     A7 28 02 FB | 	rdlong	local02, fp
18b4c     14 27 02 F1 | 	add	local01, local02
18b50     0C 4E 85 F1 | 	sub	fp, #12
18b54     A7 28 02 FB | 	rdlong	local02, fp
18b58     08 4E 85 F1 | 	sub	fp, #8
18b5c     14 27 5A F2 | 	cmps	local01, local02 wcz
18b60     08 FF 9F ED |  if_be	jmp	#LR__1996
18b64                 | LR__1999
18b64                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
18b64     04 4E 05 F1 | 	add	fp, #4
18b68     A7 12 02 FB | 	rdlong	arg01, fp
18b6c     52 00 00 FF 
18b70     0C E5 05 F1 | 	add	objptr, ##42252
18b74     F2 14 02 FB | 	rdlong	arg02, objptr
18b78     01 14 06 F1 | 	add	arg02, #1
18b7c     04 00 00 FF 
18b80     58 E4 85 F1 | 	sub	objptr, ##2136
18b84     F2 16 02 F6 | 	mov	arg03, objptr
18b88     4E 00 00 FF 
18b8c     B4 E4 85 F1 | 	sub	objptr, ##40116
18b90     04 4E 05 F1 | 	add	fp, #4
18b94     A7 18 02 FB | 	rdlong	arg04, fp
18b98     08 4E 85 F1 | 	sub	fp, #8
18b9c     01 1A 06 F6 | 	mov	arg05, #1
18ba0     78 E1 B0 FD | 	call	#__system___basic_put
18ba4     18 4E 05 F1 | 	add	fp, #24
18ba8     A7 FA 61 FC | 	wrlong	result1, fp
18bac     14 4E 85 F1 | 	sub	fp, #20
18bb0     A7 26 02 FB | 	rdlong	local01, fp
18bb4     02 26 66 F0 | 	shl	local01, #2
18bb8     50 00 00 FF 
18bbc     C4 E4 05 F1 | 	add	objptr, ##41156
18bc0     F2 26 02 F1 | 	add	local01, objptr
18bc4     13 FB 61 FC | 	wrlong	result1, local01
18bc8                 | '    if 1024*i+j>amount then exit loop
18bc8     0C 4E 05 F1 | 	add	fp, #12
18bcc     A7 28 02 FB | 	rdlong	local02, fp
18bd0     0A 28 66 F0 | 	shl	local02, #10
18bd4     04 4E 05 F1 | 	add	fp, #4
18bd8     A7 26 02 FB | 	rdlong	local01, fp
18bdc     13 29 02 F1 | 	add	local02, local01
18be0     0C 4E 85 F1 | 	sub	fp, #12
18be4     A7 26 02 FB | 	rdlong	local01, fp
18be8     08 4E 85 F1 | 	sub	fp, #8
18bec     13 29 5A F2 | 	cmps	local02, local01 wcz
18bf0     50 00 00 FF 
18bf4     C4 E4 85 F1 | 	sub	objptr, ##41156
18bf8     CC 01 90 1D |  if_a	jmp	#LR__2007
18bfc     10 4E 05 F1 | 	add	fp, #16
18c00     A7 28 02 FB | 	rdlong	local02, fp
18c04     01 28 06 F1 | 	add	local02, #1
18c08     A7 28 62 FC | 	wrlong	local02, fp
18c0c     10 4E 85 F1 | 	sub	fp, #16
18c10     4C FE 9F FD | 	jmp	#LR__1995
18c14                 | LR__2000
18c14     10 4E 05 F1 | 	add	fp, #16
18c18     A7 00 68 FC | 	wrlong	#0, fp
18c1c     10 4E 85 F1 | 	sub	fp, #16
18c20                 | '    i=0: do
18c20                 | LR__2001
18c20     14 4E 05 F1 | 	add	fp, #20
18c24     A7 00 68 FC | 	wrlong	#0, fp
18c28     14 4E 85 F1 | 	sub	fp, #20
18c2c                 | '    j=0: do  
18c2c                 | LR__2002
18c2c                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
18c2c     0C 4E 05 F1 | 	add	fp, #12
18c30     A7 28 02 FB | 	rdlong	local02, fp
18c34     0C 4E 85 F1 | 	sub	fp, #12
18c38     00 04 00 FF 
18c3c     00 28 56 F2 | 	cmps	local02, ##524288 wc
18c40     4C 00 90 3D |  if_ae	jmp	#LR__2003
18c44     14 4E 05 F1 | 	add	fp, #20
18c48     A7 28 02 FB | 	rdlong	local02, fp
18c4c     14 27 02 F6 | 	mov	local01, local02
18c50     4E 00 00 FF 
18c54     B4 E4 05 F1 | 	add	objptr, ##40116
18c58     F2 26 02 F1 | 	add	local01, objptr
18c5c     08 4E 85 F1 | 	sub	fp, #8
18c60     A7 12 02 FB | 	rdlong	arg01, fp
18c64     04 4E 05 F1 | 	add	fp, #4
18c68     A7 18 02 FB | 	rdlong	arg04, fp
18c6c     0A 18 66 F0 | 	shl	arg04, #10
18c70     0C 13 02 F1 | 	add	arg01, arg04
18c74     10 4E 85 F1 | 	sub	fp, #16
18c78     14 13 02 F1 | 	add	arg01, local02
18c7c     09 FB C1 FA | 	rdbyte	result1, arg01
18c80     4E 00 00 FF 
18c84     B4 E4 85 F1 | 	sub	objptr, ##40116
18c88     13 FB 41 FC | 	wrbyte	result1, local01
18c8c     48 00 90 FD | 	jmp	#LR__2004
18c90                 | LR__2003
18c90     14 4E 05 F1 | 	add	fp, #20
18c94     A7 28 02 FB | 	rdlong	local02, fp
18c98     14 27 02 F6 | 	mov	local01, local02
18c9c     4E 00 00 FF 
18ca0     B4 E4 05 F1 | 	add	objptr, ##40116
18ca4     F2 26 02 F1 | 	add	local01, objptr
18ca8     08 4E 85 F1 | 	sub	fp, #8
18cac     A7 12 02 FB | 	rdlong	arg01, fp
18cb0     04 4E 05 F1 | 	add	fp, #4
18cb4     A7 18 02 FB | 	rdlong	arg04, fp
18cb8     0A 18 66 F0 | 	shl	arg04, #10
18cbc     0C 13 02 F1 | 	add	arg01, arg04
18cc0     10 4E 85 F1 | 	sub	fp, #16
18cc4     14 13 02 F1 | 	add	arg01, local02
18cc8     4E 00 00 FF 
18ccc     B4 E4 85 F1 | 	sub	objptr, ##40116
18cd0     D0 9A B0 FD | 	call	#_pspeek
18cd4     13 FB 41 FC | 	wrbyte	result1, local01
18cd8                 | LR__2004
18cd8     14 4E 05 F1 | 	add	fp, #20
18cdc     A7 28 02 FB | 	rdlong	local02, fp
18ce0     01 28 06 F1 | 	add	local02, #1
18ce4     A7 28 62 FC | 	wrlong	local02, fp
18ce8     14 4E 85 F1 | 	sub	fp, #20
18cec     02 00 00 FF 
18cf0     00 28 56 F2 | 	cmps	local02, ##1024 wc
18cf4     2C 00 90 3D |  if_ae	jmp	#LR__2005
18cf8     10 4E 05 F1 | 	add	fp, #16
18cfc     A7 26 02 FB | 	rdlong	local01, fp
18d00     0A 26 66 F0 | 	shl	local01, #10
18d04     04 4E 05 F1 | 	add	fp, #4
18d08     A7 28 02 FB | 	rdlong	local02, fp
18d0c     14 27 02 F1 | 	add	local01, local02
18d10     0C 4E 85 F1 | 	sub	fp, #12
18d14     A7 28 02 FB | 	rdlong	local02, fp
18d18     08 4E 85 F1 | 	sub	fp, #8
18d1c     14 27 5A F2 | 	cmps	local01, local02 wcz
18d20     08 FF 9F ED |  if_be	jmp	#LR__2002
18d24                 | LR__2005
18d24                 | '    put #channel,,block(0),amount, r : getres(channel)=r
18d24     04 4E 05 F1 | 	add	fp, #4
18d28     A7 12 02 FB | 	rdlong	arg01, fp
18d2c     4E 00 00 FF 
18d30     B4 E4 05 F1 | 	add	objptr, ##40116
18d34     F2 16 02 F6 | 	mov	arg03, objptr
18d38     4E 00 00 FF 
18d3c     B4 E4 85 F1 | 	sub	objptr, ##40116
18d40     04 4E 05 F1 | 	add	fp, #4
18d44     A7 18 02 FB | 	rdlong	arg04, fp
18d48     08 4E 85 F1 | 	sub	fp, #8
18d4c     00 14 06 F6 | 	mov	arg02, #0
18d50     01 1A 06 F6 | 	mov	arg05, #1
18d54     C4 DF B0 FD | 	call	#__system___basic_put
18d58     18 4E 05 F1 | 	add	fp, #24
18d5c     A7 FA 61 FC | 	wrlong	result1, fp
18d60     14 4E 85 F1 | 	sub	fp, #20
18d64     A7 26 02 FB | 	rdlong	local01, fp
18d68     02 26 66 F0 | 	shl	local01, #2
18d6c     50 00 00 FF 
18d70     C4 E4 05 F1 | 	add	objptr, ##41156
18d74     F2 26 02 F1 | 	add	local01, objptr
18d78     13 FB 61 FC | 	wrlong	result1, local01
18d7c                 | '    if 1024*i+j>amount then exit loop
18d7c     0C 4E 05 F1 | 	add	fp, #12
18d80     A7 28 02 FB | 	rdlong	local02, fp
18d84     0A 28 66 F0 | 	shl	local02, #10
18d88     04 4E 05 F1 | 	add	fp, #4
18d8c     A7 26 02 FB | 	rdlong	local01, fp
18d90     13 29 02 F1 | 	add	local02, local01
18d94     0C 4E 85 F1 | 	sub	fp, #12
18d98     A7 2A 02 FB | 	rdlong	local03, fp
18d9c     08 4E 85 F1 | 	sub	fp, #8
18da0     15 29 5A F2 | 	cmps	local02, local03 wcz
18da4     50 00 00 FF 
18da8     C4 E4 85 F1 | 	sub	objptr, ##41156
18dac     18 00 90 1D |  if_a	jmp	#LR__2006
18db0     10 4E 05 F1 | 	add	fp, #16
18db4     A7 28 02 FB | 	rdlong	local02, fp
18db8     01 28 06 F1 | 	add	local02, #1
18dbc     A7 28 62 FC | 	wrlong	local02, fp
18dc0     10 4E 85 F1 | 	sub	fp, #16
18dc4     58 FE 9F FD | 	jmp	#LR__2001
18dc8                 | LR__2006
18dc8                 | LR__2007
18dc8     A7 F0 03 F6 | 	mov	ptra, fp
18dcc     B2 00 A0 FD | 	call	#popregs_
18dd0                 | _do_put_ret
18dd0     2D 00 64 FD | 	ret
18dd4                 | 
18dd4                 | ' 
18dd4                 | ' '-------------------- rad
18dd4                 | ' 
18dd4                 | ' sub do_rad
18dd4                 | _do_rad
18dd4     52 00 00 FF 
18dd8     A8 E4 05 F1 | 	add	objptr, ##42152
18ddc     00 C0 9F FF 
18de0     F2 00 68 FC | 	wrlong	##1065353216, objptr
18de4     04 E4 05 F1 | 	add	objptr, #4
18de8     00 C0 9F FF 
18dec     F2 00 68 FC | 	wrlong	##1065353216, objptr
18df0     52 00 00 FF 
18df4     AC E4 85 F1 | 	sub	objptr, ##42156
18df8                 | _do_rad_ret
18df8     2D 00 64 FD | 	ret
18dfc                 | 
18dfc                 | ' 
18dfc                 | ' '-------------------- rdpin
18dfc                 | ' 
18dfc                 | ' sub do_rdpin
18dfc                 | _do_rdpin
18dfc     00 4A 05 F6 | 	mov	COUNT_, #0
18e00     A8 00 A0 FD | 	call	#pushregs_
18e04     0C F0 07 F1 | 	add	ptra, #12
18e08     D4 44 BF FD | 	call	#_pop
18e0c     A7 FA 61 FC | 	wrlong	result1, fp
18e10     04 4E 05 F1 | 	add	fp, #4
18e14     A7 FC 61 FC | 	wrlong	result2, fp
18e18     04 4E 05 F1 | 	add	fp, #4
18e1c     A7 FE 61 FC | 	wrlong	result3, fp
18e20     08 4E 85 F1 | 	sub	fp, #8
18e24     A7 12 02 F6 | 	mov	arg01, fp
18e28     98 46 BF FD | 	call	#_converttoint
18e2c     FD FA 89 FA | 	rdpin	result1, result1
18e30     52 00 00 FF 
18e34     10 E5 05 F1 | 	add	objptr, ##42256
18e38     F2 FA 61 FC | 	wrlong	result1, objptr
18e3c     52 00 00 FF 
18e40     10 E5 85 F1 | 	sub	objptr, ##42256
18e44     08 4E 05 F1 | 	add	fp, #8
18e48     A7 3A 68 FC | 	wrlong	#29, fp
18e4c     08 4E 85 F1 | 	sub	fp, #8
18e50     A7 08 68 FC | 	wrlong	#4, fp
18e54     A7 12 02 F6 | 	mov	arg01, fp
18e58     1C 45 BF FD | 	call	#_push
18e5c     A7 F0 03 F6 | 	mov	ptra, fp
18e60     B2 00 A0 FD | 	call	#popregs_
18e64                 | _do_rdpin_ret
18e64     2D 00 64 FD | 	ret
18e68                 | 
18e68                 | ' 
18e68                 | ' ' ----------------  read
18e68                 | ' 
18e68                 | ' function read_next_line() as string
18e68                 | _read_next_line
18e68     07 4A 05 F6 | 	mov	COUNT_, #7
18e6c     A8 00 A0 FD | 	call	#pushregs_
18e70                 | ' if dataptr=$7FFFFFFF then return("")
18e70     50 00 00 FF 
18e74     2C E5 05 F1 | 	add	objptr, ##41260
18e78     F2 26 02 FB | 	rdlong	local01, objptr
18e7c     50 00 00 FF 
18e80     2C E5 85 F1 | 	sub	objptr, ##41260
18e84     FF FF 3F FF 
18e88     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
18e8c     B2 01 00 AF 
18e90     FD FA 05 A6 |  if_e	mov	result1, ##@LR__5909
18e94     BC 01 90 AD |  if_e	jmp	#LR__2017
18e98                 | ' do
18e98                 | LR__2010
18e98     50 00 00 FF 
18e9c     08 E5 05 F1 | 	add	objptr, ##41224
18ea0     F2 12 02 F6 | 	mov	arg01, objptr
18ea4     24 E4 05 F1 | 	add	objptr, #36
18ea8     F2 14 02 FB | 	rdlong	arg02, objptr
18eac     24 16 06 F6 | 	mov	arg03, #36
18eb0     45 00 00 FF 
18eb4     60 E4 85 F1 | 	sub	objptr, ##35424
18eb8     D4 C3 B0 FD | 	call	#_psram_spin2_read1
18ebc                 | '  ' print dataptr
18ebc                 | '   psram.read1(varptr(dataheader),dataptr,36) 
18ebc                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
18ebc     45 00 00 FF 
18ec0     3C E4 05 F1 | 	add	objptr, ##35388
18ec4     F2 26 02 FB | 	rdlong	local01, objptr
18ec8     50 00 00 FF 
18ecc     08 E5 85 F1 | 	sub	objptr, ##41224
18ed0     FF FF 7F FF 
18ed4     FF 27 0E F2 | 	cmp	local01, ##-1 wz
18ed8     50 00 00 5F 
18edc     1C E5 05 51 |  if_ne	add	objptr, ##41244
18ee0     F2 26 02 5B |  if_ne	rdlong	local01, objptr
18ee4     10 E4 05 51 |  if_ne	add	objptr, #16
18ee8     F2 26 62 5C |  if_ne	wrlong	local01, objptr
18eec     50 00 00 5F 
18ef0     2C E5 85 51 |  if_ne	sub	objptr, ##41260
18ef4     50 00 00 FF 
18ef8     1C E5 05 F1 | 	add	objptr, ##41244
18efc     F2 26 02 FB | 	rdlong	local01, objptr
18f00     50 00 00 FF 
18f04     1C E5 85 F1 | 	sub	objptr, ##41244
18f08     FF FF 3F FF 
18f0c     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
18f10     50 00 00 5F 
18f14     08 E5 05 51 |  if_ne	add	objptr, ##41224
18f18     F2 28 02 5B |  if_ne	rdlong	local02, objptr
18f1c     50 00 00 5F 
18f20     08 E5 85 51 |  if_ne	sub	objptr, ##41224
18f24     FF FF 7F 5F 
18f28     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
18f2c     50 00 00 5F 
18f30     28 E5 05 51 |  if_ne	add	objptr, ##41256
18f34     F2 2A 02 5B |  if_ne	rdlong	local03, objptr
18f38     50 00 00 5F 
18f3c     28 E5 85 51 |  if_ne	sub	objptr, ##41256
18f40     B7 2A 0E 52 |  if_ne	cmp	local03, #183 wz
18f44     50 FF 9F 5D |  if_ne	jmp	#LR__2010
18f48                 | ' if dataheader(8)=token_data then 
18f48     50 00 00 FF 
18f4c     28 E5 05 F1 | 	add	objptr, ##41256
18f50     F2 26 02 FB | 	rdlong	local01, objptr
18f54     50 00 00 FF 
18f58     28 E5 85 F1 | 	sub	objptr, ##41256
18f5c     B7 26 0E F2 | 	cmp	local01, #183 wz
18f60     E0 00 90 5D |  if_ne	jmp	#LR__2015
18f64     50 00 00 FF 
18f68     10 E5 05 F1 | 	add	objptr, ##41232
18f6c     F2 26 02 FB | 	rdlong	local01, objptr
18f70     01 00 00 FF 
18f74     E0 E5 05 F1 | 	add	objptr, ##992
18f78     F2 26 62 FC | 	wrlong	local01, objptr
18f7c     01 00 00 FF 
18f80     DC E5 85 F1 | 	sub	objptr, ##988
18f84     F2 2C 02 FB | 	rdlong	local04, objptr
18f88     01 00 00 FF 
18f8c     D4 E5 05 F1 | 	add	objptr, ##980
18f90     F2 2C 62 FC | 	wrlong	local04, objptr
18f94                 | '  'print "data found at line "; dataheader(0)
18f94                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
18f94     00 2E 06 F6 | 	mov	local05, #0
18f98     52 00 00 FF 
18f9c     E8 E4 85 F1 | 	sub	objptr, ##42216
18fa0                 | LR__2011
18fa0     16 2F 52 F2 | 	cmps	local05, local04 wc
18fa4     3C 00 90 3D |  if_ae	jmp	#LR__2012
18fa8     52 00 00 FF 
18fac     F0 E4 05 F1 | 	add	objptr, ##42224
18fb0     F2 12 02 FB | 	rdlong	arg01, objptr
18fb4     52 00 00 FF 
18fb8     F0 E4 85 F1 | 	sub	objptr, ##42224
18fbc     17 13 02 F1 | 	add	arg01, local05
18fc0     E0 97 B0 FD | 	call	#_pspeek
18fc4     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
18fc8     8C F1 B0 FD | 	call	#__system__Chr_S
18fcc     FD 14 02 F6 | 	mov	arg02, result1
18fd0     18 13 02 F6 | 	mov	arg01, local06
18fd4     9C CF B0 FD | 	call	#__system___string_concat
18fd8     FD 30 02 F6 | 	mov	local06, result1
18fdc     01 2E 06 F1 | 	add	local05, #1
18fe0     BC FF 9F FD | 	jmp	#LR__2011
18fe4                 | LR__2012
18fe4     B2 01 00 FF 
18fe8     FE 16 06 F6 | 	mov	arg03, ##@LR__5910
18fec     01 12 06 F6 | 	mov	arg01, #1
18ff0     18 15 02 F6 | 	mov	arg02, local06
18ff4     E4 F4 B0 FD | 	call	#__system__Instr
18ff8     FD 2E 02 F6 | 	mov	local05, result1
18ffc     18 13 02 F6 | 	mov	arg01, local06
19000     09 33 02 F6 | 	mov	local07, arg01
19004     97 06 48 FB | 	callpa	#(@LR__2014-@LR__2013)>>2,fcache_load_ptr_
19008                 | LR__2013
19008     19 FB C9 FA | 	rdbyte	result1, local07 wz
1900c     01 32 06 51 |  if_ne	add	local07, #1
19010     F4 FF 9F 5D |  if_ne	jmp	#LR__2013
19014                 | LR__2014
19014     09 33 82 F1 | 	sub	local07, arg01
19018     19 15 02 F6 | 	mov	arg02, local07
1901c     17 15 82 F1 | 	sub	arg02, local05
19020     04 14 86 F1 | 	sub	arg02, #4
19024     18 13 02 F6 | 	mov	arg01, local06
19028     F0 EF B0 FD | 	call	#__system__Right_S
1902c     FD 12 02 F6 | 	mov	arg01, result1
19030     F0 F3 B0 FD | 	call	#__system__RTrim_S
19034     FD 12 02 F6 | 	mov	arg01, result1
19038     28 F3 B0 FD | 	call	#__system__LTrim_S
1903c     FD 30 02 F6 | 	mov	local06, result1
19040     0C 00 90 FD | 	jmp	#LR__2016
19044                 | LR__2015
19044                 | '   return ("") 'todo proper err
19044     B2 01 00 FF 
19048     03 FB 05 F6 | 	mov	result1, ##@LR__5911
1904c     04 00 90 FD | 	jmp	#LR__2017
19050                 | LR__2016
19050                 | ' return readline
19050     18 FB 01 F6 | 	mov	result1, local06
19054                 | LR__2017
19054     A7 F0 03 F6 | 	mov	ptra, fp
19058     B2 00 A0 FD | 	call	#popregs_
1905c                 | _read_next_line_ret
1905c     2D 00 64 FD | 	ret
19060                 | 
19060                 | ' 
19060                 | ' sub do_read
19060                 | _do_read
19060     11 4A 05 F6 | 	mov	COUNT_, #17
19064     A8 00 A0 FD | 	call	#pushregs_
19068     58 F1 07 F1 | 	add	ptra, #344
1906c     4A 00 00 FF 
19070     80 E4 05 F1 | 	add	objptr, ##38016
19074     F2 FE 01 FB | 	rdlong	result3, objptr
19078     FF FC 01 F6 | 	mov	result2, result3
1907c     01 FC 65 F0 | 	shl	result2, #1
19080     FF FC 01 F1 | 	add	result2, result3
19084     02 FC 65 F0 | 	shl	result2, #2
19088     03 00 00 FF 
1908c     04 E4 85 F1 | 	sub	objptr, ##1540
19090     F2 FC 01 F1 | 	add	result2, objptr
19094     FE FC 01 FB | 	rdlong	result2, result2
19098     08 4E 05 F1 | 	add	fp, #8
1909c     A7 FC 61 FC | 	wrlong	result2, fp
190a0                 | ' 
190a0                 | ' 
190a0                 | ' numpar=compiledline(lineptr_e).result.uresult
190a0                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
190a0     08 4E 85 F1 | 	sub	fp, #8
190a4     01 FC 15 F2 | 	cmp	result2, #1 wc
190a8     47 00 00 FF 
190ac     7C E4 85 F1 | 	sub	objptr, ##36476
190b0     14 00 90 CD |  if_b	jmp	#LR__2020
190b4     08 4E 05 F1 | 	add	fp, #8
190b8     A7 FC 01 FB | 	rdlong	result2, fp
190bc     08 4E 85 F1 | 	sub	fp, #8
190c0     41 FC 15 F2 | 	cmp	result2, #65 wc
190c4     50 00 90 CD |  if_b	jmp	#LR__2021
190c8                 | LR__2020
190c8     00 12 06 F6 | 	mov	arg01, #0
190cc     70 2B B1 FD | 	call	#__system___getiolock_0602
190d0     FD 12 02 F6 | 	mov	arg01, result1
190d4     40 CE B0 FD | 	call	#__system___lockmem
190d8     B2 01 00 FF 
190dc     04 15 06 F6 | 	mov	arg02, ##@LR__5912
190e0     00 12 06 F6 | 	mov	arg01, #0
190e4     00 16 06 F6 | 	mov	arg03, #0
190e8     20 DB B0 FD | 	call	#__system___basic_print_string
190ec     00 12 06 F6 | 	mov	arg01, #0
190f0     4C 2B B1 FD | 	call	#__system___getiolock_0602
190f4     FD 00 68 FC | 	wrlong	#0, result1
190f8     50 00 00 FF 
190fc     F0 E4 05 F1 | 	add	objptr, ##41200
19100     F2 14 02 FB | 	rdlong	arg02, objptr
19104     50 00 00 FF 
19108     F0 E4 85 F1 | 	sub	objptr, ##41200
1910c     27 12 06 F6 | 	mov	arg01, #39
19110     18 94 B0 FD | 	call	#_printerror
19114     5C 0C 90 FD | 	jmp	#LR__2070
19118                 | LR__2021
19118     08 4E 05 F1 | 	add	fp, #8
1911c     A7 16 02 FB | 	rdlong	arg03, fp
19120     01 16 86 F1 | 	sub	arg03, #1
19124     28 4F 05 F1 | 	add	fp, #296
19128     A7 16 62 FC | 	wrlong	arg03, fp
1912c     30 4F 85 F1 | 	sub	fp, #304
19130                 | ' i=numpar-1
19130                 | ' if readline="" then readline=read_next_line() ': print readline
19130     52 00 00 FF 
19134     DC E4 05 F1 | 	add	objptr, ##42204
19138     F2 12 02 FB | 	rdlong	arg01, objptr
1913c     52 00 00 FF 
19140     DC E4 85 F1 | 	sub	objptr, ##42204
19144     B2 01 00 FF 
19148     0E 15 06 F6 | 	mov	arg02, ##@LR__5913
1914c     F0 CD B0 FD | 	call	#__system___string_cmp
19150     00 FA 0D F2 | 	cmp	result1, #0 wz
19154     18 00 90 5D |  if_ne	jmp	#LR__2022
19158     0C FD BF FD | 	call	#_read_next_line
1915c     52 00 00 FF 
19160     DC E4 05 F1 | 	add	objptr, ##42204
19164     F2 FA 61 FC | 	wrlong	result1, objptr
19168     52 00 00 FF 
1916c     DC E4 85 F1 | 	sub	objptr, ##42204
19170                 | LR__2022
19170                 | ' if readline="" then printerror(55,runheader(0)) :return
19170     52 00 00 FF 
19174     DC E4 05 F1 | 	add	objptr, ##42204
19178     F2 12 02 FB | 	rdlong	arg01, objptr
1917c     52 00 00 FF 
19180     DC E4 85 F1 | 	sub	objptr, ##42204
19184     B2 01 00 FF 
19188     0F 15 06 F6 | 	mov	arg02, ##@LR__5914
1918c     B0 CD B0 FD | 	call	#__system___string_cmp
19190     00 FA 0D F2 | 	cmp	result1, #0 wz
19194     20 00 90 5D |  if_ne	jmp	#LR__2023
19198     50 00 00 FF 
1919c     F0 E4 05 F1 | 	add	objptr, ##41200
191a0     F2 14 02 FB | 	rdlong	arg02, objptr
191a4     50 00 00 FF 
191a8     F0 E4 85 F1 | 	sub	objptr, ##41200
191ac     37 12 06 F6 | 	mov	arg01, #55
191b0     78 93 B0 FD | 	call	#_printerror
191b4     BC 0B 90 FD | 	jmp	#LR__2070
191b8                 | LR__2023
191b8     34 4F 05 F1 | 	add	fp, #308
191bc     A7 00 68 FC | 	wrlong	#0, fp
191c0     2C 4F 85 F1 | 	sub	fp, #300
191c4     A7 26 02 FB | 	rdlong	local01, fp
191c8     01 26 86 F1 | 	sub	local01, #1
191cc     28 4F 05 F1 | 	add	fp, #296
191d0     A7 26 62 FC | 	wrlong	local01, fp
191d4     30 4F 85 F1 | 	sub	fp, #304
191d8                 | ' j=0
191d8                 | ' i=numpar-1
191d8                 | ' do
191d8                 | LR__2024
191d8                 | '   do
191d8                 | LR__2025
191d8     52 00 00 FF 
191dc     DC E4 05 F1 | 	add	objptr, ##42204
191e0     F2 14 02 FB | 	rdlong	arg02, objptr
191e4     52 00 00 FF 
191e8     DC E4 85 F1 | 	sub	objptr, ##42204
191ec     B2 01 00 FF 
191f0     10 17 06 F6 | 	mov	arg03, ##@LR__5915
191f4     01 12 06 F6 | 	mov	arg01, #1
191f8     E0 F2 B0 FD | 	call	#__system__Instr
191fc     0C 4E 05 F1 | 	add	fp, #12
19200     A7 FA 61 FC | 	wrlong	result1, fp
19204                 | '     comma=instr(1,readline,",")  
19204                 | '       if comma>0  then 
19204     0C 4E 85 F1 | 	sub	fp, #12
19208     01 FA 15 F2 | 	cmp	result1, #1 wc
1920c     98 00 90 CD |  if_b	jmp	#LR__2028
19210     52 00 00 FF 
19214     DC E4 05 F1 | 	add	objptr, ##42204
19218     F2 12 02 FB | 	rdlong	arg01, objptr
1921c     52 00 00 FF 
19220     DC E4 85 F1 | 	sub	objptr, ##42204
19224     0C 4E 05 F1 | 	add	fp, #12
19228     A7 14 02 FB | 	rdlong	arg02, fp
1922c     0C 4E 85 F1 | 	sub	fp, #12
19230     01 14 86 F1 | 	sub	arg02, #1
19234     5C ED B0 FD | 	call	#__system__Left_S
19238     04 4E 05 F1 | 	add	fp, #4
1923c     A7 FA 61 FC | 	wrlong	result1, fp
19240     04 4E 85 F1 | 	sub	fp, #4
19244     52 00 00 FF 
19248     DC E4 05 F1 | 	add	objptr, ##42204
1924c     F2 12 02 FB | 	rdlong	arg01, objptr
19250     09 27 02 F6 | 	mov	local01, arg01
19254     52 00 00 FF 
19258     DC E4 85 F1 | 	sub	objptr, ##42204
1925c     09 29 02 F6 | 	mov	local02, arg01
19260     97 06 48 FB | 	callpa	#(@LR__2027-@LR__2026)>>2,fcache_load_ptr_
19264                 | LR__2026
19264     14 FB C9 FA | 	rdbyte	result1, local02 wz
19268     01 28 06 51 |  if_ne	add	local02, #1
1926c     F4 FF 9F 5D |  if_ne	jmp	#LR__2026
19270                 | LR__2027
19270     09 29 82 F1 | 	sub	local02, arg01
19274     14 15 02 F6 | 	mov	arg02, local02
19278     0C 4E 05 F1 | 	add	fp, #12
1927c     A7 16 02 FB | 	rdlong	arg03, fp
19280     0C 4E 85 F1 | 	sub	fp, #12
19284     0B 15 82 F1 | 	sub	arg02, arg03
19288     13 13 02 F6 | 	mov	arg01, local01
1928c     8C ED B0 FD | 	call	#__system__Right_S
19290     52 00 00 FF 
19294     DC E4 05 F1 | 	add	objptr, ##42204
19298     F2 FA 61 FC | 	wrlong	result1, objptr
1929c     52 00 00 FF 
192a0     DC E4 85 F1 | 	sub	objptr, ##42204
192a4     48 00 90 FD | 	jmp	#LR__2029
192a8                 | LR__2028
192a8     52 00 00 FF 
192ac     DC E4 05 F1 | 	add	objptr, ##42204
192b0     F2 12 02 FB | 	rdlong	arg01, objptr
192b4     52 00 00 FF 
192b8     DC E4 85 F1 | 	sub	objptr, ##42204
192bc     64 F1 B0 FD | 	call	#__system__RTrim_S
192c0     FD 12 02 F6 | 	mov	arg01, result1
192c4     9C F0 B0 FD | 	call	#__system__LTrim_S
192c8     04 4E 05 F1 | 	add	fp, #4
192cc     A7 FA 61 FC | 	wrlong	result1, fp
192d0     04 4E 85 F1 | 	sub	fp, #4
192d4     B2 01 00 FF 
192d8     12 27 06 F6 | 	mov	local01, ##@LR__5916
192dc     52 00 00 FF 
192e0     DC E4 05 F1 | 	add	objptr, ##42204
192e4     F2 26 62 FC | 	wrlong	local01, objptr
192e8     52 00 00 FF 
192ec     DC E4 85 F1 | 	sub	objptr, ##42204
192f0                 | LR__2029
192f0                 | '      if part$<>"" then j=j+1
192f0     04 4E 05 F1 | 	add	fp, #4
192f4     A7 12 02 FB | 	rdlong	arg01, fp
192f8     04 4E 85 F1 | 	sub	fp, #4
192fc     B2 01 00 FF 
19300     13 15 06 F6 | 	mov	arg02, ##@LR__5917
19304     38 CC B0 FD | 	call	#__system___string_cmp
19308     00 FA 0D F2 | 	cmp	result1, #0 wz
1930c     34 4F 05 51 |  if_ne	add	fp, #308
19310     A7 26 02 5B |  if_ne	rdlong	local01, fp
19314     01 26 06 51 |  if_ne	add	local01, #1
19318     A7 26 62 5C |  if_ne	wrlong	local01, fp
1931c     34 4F 85 51 |  if_ne	sub	fp, #308
19320     30 4F 05 F1 | 	add	fp, #304
19324     A7 26 02 FB | 	rdlong	local01, fp
19328     02 26 66 F0 | 	shl	local01, #2
1932c     04 4F 85 F1 | 	sub	fp, #260
19330     A7 26 02 F1 | 	add	local01, fp
19334     28 4E 85 F1 | 	sub	fp, #40
19338     A7 FA 01 FB | 	rdlong	result1, fp
1933c     13 FB 61 FC | 	wrlong	result1, local01
19340     2C 4F 05 F1 | 	add	fp, #300
19344     A7 26 02 FB | 	rdlong	local01, fp
19348     01 26 86 F1 | 	sub	local01, #1
1934c     A7 26 62 FC | 	wrlong	local01, fp
19350     30 4F 85 F1 | 	sub	fp, #304
19354                 | '      args(i)=part$  
19354                 | '      i=i-1
19354                 | '     if readline="" then readline=read_next_line() 
19354     52 00 00 FF 
19358     DC E4 05 F1 | 	add	objptr, ##42204
1935c     F2 12 02 FB | 	rdlong	arg01, objptr
19360     52 00 00 FF 
19364     DC E4 85 F1 | 	sub	objptr, ##42204
19368     B2 01 00 FF 
1936c     14 15 06 F6 | 	mov	arg02, ##@LR__5918
19370     CC CB B0 FD | 	call	#__system___string_cmp
19374     00 FA 0D F2 | 	cmp	result1, #0 wz
19378     18 00 90 5D |  if_ne	jmp	#LR__2030
1937c     E8 FA BF FD | 	call	#_read_next_line
19380     52 00 00 FF 
19384     DC E4 05 F1 | 	add	objptr, ##42204
19388     F2 FA 61 FC | 	wrlong	result1, objptr
1938c     52 00 00 FF 
19390     DC E4 85 F1 | 	sub	objptr, ##42204
19394                 | LR__2030
19394     30 4F 05 F1 | 	add	fp, #304
19398     A7 26 02 FB | 	rdlong	local01, fp
1939c     30 4F 85 F1 | 	sub	fp, #304
193a0     00 26 56 F2 | 	cmps	local01, #0 wc
193a4     28 00 90 CD |  if_b	jmp	#LR__2031
193a8     52 00 00 FF 
193ac     DC E4 05 F1 | 	add	objptr, ##42204
193b0     F2 12 02 FB | 	rdlong	arg01, objptr
193b4     52 00 00 FF 
193b8     DC E4 85 F1 | 	sub	objptr, ##42204
193bc     B2 01 00 FF 
193c0     15 15 06 F6 | 	mov	arg02, ##@LR__5919
193c4     78 CB B0 FD | 	call	#__system___string_cmp
193c8     00 FA 0D F2 | 	cmp	result1, #0 wz
193cc     08 FE 9F 5D |  if_ne	jmp	#LR__2025
193d0                 | LR__2031
193d0     30 4F 05 F1 | 	add	fp, #304
193d4     A7 26 02 FB | 	rdlong	local01, fp
193d8     30 4F 85 F1 | 	sub	fp, #304
193dc     00 26 56 F2 | 	cmps	local01, #0 wc
193e0     F4 FD 9F 3D |  if_ae	jmp	#LR__2024
193e4                 | ' if j<numpar then printerror(55,runheader(0))
193e4     34 4F 05 F1 | 	add	fp, #308
193e8     A7 26 02 FB | 	rdlong	local01, fp
193ec     2C 4F 85 F1 | 	sub	fp, #300
193f0     A7 16 02 FB | 	rdlong	arg03, fp
193f4     08 4E 85 F1 | 	sub	fp, #8
193f8     0B 27 52 F2 | 	cmps	local01, arg03 wc
193fc     50 00 00 CF 
19400     F0 E4 05 C1 |  if_b	add	objptr, ##41200
19404     F2 14 02 CB |  if_b	rdlong	arg02, objptr
19408     50 00 00 CF 
1940c     F0 E4 85 C1 |  if_b	sub	objptr, ##41200
19410     37 12 06 C6 |  if_b	mov	arg01, #55
19414     14 91 B0 CD |  if_b	call	#_printerror
19418                 | ' 
19418                 | ' for i=0 to numpar-1
19418     30 4F 05 F1 | 	add	fp, #304
1941c     A7 00 68 FC | 	wrlong	#0, fp
19420     28 4F 85 F1 | 	sub	fp, #296
19424     A7 2A 02 FB | 	rdlong	local03, fp
19428     08 4E 85 F1 | 	sub	fp, #8
1942c                 | LR__2032
1942c     30 4F 05 F1 | 	add	fp, #304
19430     A7 2C 02 FB | 	rdlong	local04, fp
19434     30 4F 85 F1 | 	sub	fp, #304
19438     16 27 02 F6 | 	mov	local01, local04
1943c     15 27 52 F2 | 	cmps	local01, local03 wc
19440     30 09 90 3D |  if_ae	jmp	#LR__2069
19444                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
19444     30 4F 05 F1 | 	add	fp, #304
19448     A7 16 02 FB | 	rdlong	arg03, fp
1944c     02 16 66 F0 | 	shl	arg03, #2
19450     04 4F 85 F1 | 	sub	fp, #260
19454     A7 16 02 F1 | 	add	arg03, fp
19458     0B 13 02 FB | 	rdlong	arg01, arg03
1945c     2C 4E 85 F1 | 	sub	fp, #44
19460     28 D1 BE FD | 	call	#_isnum
19464     FD 2E 02 F6 | 	mov	local05, result1
19468     30 4F 05 F1 | 	add	fp, #304
1946c     A7 16 02 FB | 	rdlong	arg03, fp
19470     02 16 66 F0 | 	shl	arg03, #2
19474     04 4F 85 F1 | 	sub	fp, #260
19478     A7 30 02 F6 | 	mov	local06, fp
1947c     A7 16 02 F1 | 	add	arg03, fp
19480     0B 13 02 FB | 	rdlong	arg01, arg03
19484     2C 4E 85 F1 | 	sub	fp, #44
19488     EC D4 BE FD | 	call	#_isint
1948c     FD 2E 2A F5 | 	andn	local05, result1 wz
19490     52 00 00 5F 
19494     10 E5 05 51 |  if_ne	add	objptr, ##42256
19498     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
1949c     52 00 00 5F 
194a0     10 E5 85 51 |  if_ne	sub	objptr, ##42256
194a4                 | '   if isint(args(i)) then r=result_int 
194a4     30 4F 05 F1 | 	add	fp, #304
194a8     A7 2E 02 FB | 	rdlong	local05, fp
194ac     02 2E 66 F0 | 	shl	local05, #2
194b0     04 4F 85 F1 | 	sub	fp, #260
194b4     A7 2E 02 F1 | 	add	local05, fp
194b8     17 13 02 FB | 	rdlong	arg01, local05
194bc     2C 4E 85 F1 | 	sub	fp, #44
194c0     B4 D4 BE FD | 	call	#_isint
194c4     00 FA 0D F2 | 	cmp	result1, #0 wz
194c8     52 00 00 5F 
194cc     10 E5 05 51 |  if_ne	add	objptr, ##42256
194d0     F2 38 68 5C |  if_ne	wrlong	#28, objptr
194d4     52 00 00 5F 
194d8     10 E5 85 51 |  if_ne	sub	objptr, ##42256
194dc                 | '   if isdec(args(i)) then r=result_uint 
194dc     30 4F 05 F1 | 	add	fp, #304
194e0     A7 2E 02 FB | 	rdlong	local05, fp
194e4     02 2E 66 F0 | 	shl	local05, #2
194e8     04 4F 85 F1 | 	sub	fp, #260
194ec     A7 2E 02 F1 | 	add	local05, fp
194f0     17 13 02 FB | 	rdlong	arg01, local05
194f4     2C 4E 85 F1 | 	sub	fp, #44
194f8     20 D7 BE FD | 	call	#_isdec
194fc     00 FA 0D F2 | 	cmp	result1, #0 wz
19500     52 00 00 5F 
19504     10 E5 05 51 |  if_ne	add	objptr, ##42256
19508     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
1950c     52 00 00 5F 
19510     10 E5 85 51 |  if_ne	sub	objptr, ##42256
19514                 | '   if not isnum(args(i)) then 
19514     30 4F 05 F1 | 	add	fp, #304
19518     A7 2E 02 FB | 	rdlong	local05, fp
1951c     02 2E 66 F0 | 	shl	local05, #2
19520     04 4F 85 F1 | 	sub	fp, #260
19524     A7 2E 02 F1 | 	add	local05, fp
19528     17 13 02 FB | 	rdlong	arg01, local05
1952c     2C 4E 85 F1 | 	sub	fp, #44
19530     58 D0 BE FD | 	call	#_isnum
19534     FD 2E 22 F6 | 	not	local05, result1
19538     00 2E 0E F2 | 	cmp	local05, #0 wz
1953c     4C 01 90 AD |  if_e	jmp	#LR__2037
19540     52 00 00 FF 
19544     10 E5 05 F1 | 	add	objptr, ##42256
19548     F2 56 68 FC | 	wrlong	#43, objptr
1954c     52 00 00 FF 
19550     10 E5 85 F1 | 	sub	objptr, ##42256
19554     30 4F 05 F1 | 	add	fp, #304
19558     A7 16 02 FB | 	rdlong	arg03, fp
1955c     02 16 66 F0 | 	shl	arg03, #2
19560     04 4F 85 F1 | 	sub	fp, #260
19564     A7 16 02 F1 | 	add	arg03, fp
19568     0B 13 02 FB | 	rdlong	arg01, arg03
1956c     2C 4E 85 F1 | 	sub	fp, #44
19570     09 29 02 F6 | 	mov	local02, arg01
19574     97 06 48 FB | 	callpa	#(@LR__2034-@LR__2033)>>2,fcache_load_ptr_
19578                 | LR__2033
19578     14 FB C9 FA | 	rdbyte	result1, local02 wz
1957c     01 28 06 51 |  if_ne	add	local02, #1
19580     F4 FF 9F 5D |  if_ne	jmp	#LR__2033
19584                 | LR__2034
19584     09 29 82 F1 | 	sub	local02, arg01
19588     14 FB 01 F6 | 	mov	result1, local02
1958c     38 4F 05 F1 | 	add	fp, #312
19590     A7 FA 61 FC | 	wrlong	result1, fp
19594     52 00 00 FF 
19598     98 E4 05 F1 | 	add	objptr, ##42136
1959c     F2 12 02 FB | 	rdlong	arg01, objptr
195a0     FD 12 82 F1 | 	sub	arg01, result1
195a4     04 12 86 F1 | 	sub	arg01, #4
195a8     03 12 26 F5 | 	andn	arg01, #3
195ac     F2 12 62 FC | 	wrlong	arg01, objptr
195b0     52 00 00 FF 
195b4     98 E4 85 F1 | 	sub	objptr, ##42136
195b8     A7 14 02 FB | 	rdlong	arg02, fp
195bc     38 4F 85 F1 | 	sub	fp, #312
195c0     08 91 B0 FD | 	call	#_pslpoke
195c4                 | '     pslpoke memtop,l
195c4                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
195c4     34 4F 05 F1 | 	add	fp, #308
195c8     A7 02 68 FC | 	wrlong	#1, fp
195cc     04 4E 05 F1 | 	add	fp, #4
195d0     A7 32 02 FB | 	rdlong	local07, fp
195d4     38 4F 85 F1 | 	sub	fp, #312
195d8     01 32 06 F1 | 	add	local07, #1
195dc                 | LR__2035
195dc     34 4F 05 F1 | 	add	fp, #308
195e0     A7 2E 02 FB | 	rdlong	local05, fp
195e4     34 4F 85 F1 | 	sub	fp, #308
195e8     19 2F 52 F2 | 	cmps	local05, local07 wc
195ec     7C 00 90 3D |  if_ae	jmp	#LR__2036
195f0     52 00 00 FF 
195f4     98 E4 05 F1 | 	add	objptr, ##42136
195f8     F2 30 02 FB | 	rdlong	local06, objptr
195fc     52 00 00 FF 
19600     98 E4 85 F1 | 	sub	objptr, ##42136
19604     03 30 06 F1 | 	add	local06, #3
19608     34 4F 05 F1 | 	add	fp, #308
1960c     A7 34 02 FB | 	rdlong	local08, fp
19610     1A 31 02 F1 | 	add	local06, local08
19614     04 4E 85 F1 | 	sub	fp, #4
19618     A7 36 02 FB | 	rdlong	local09, fp
1961c     02 36 66 F0 | 	shl	local09, #2
19620     04 4F 85 F1 | 	sub	fp, #260
19624     A7 38 02 F6 | 	mov	local10, fp
19628     A7 36 02 F1 | 	add	local09, fp
1962c     1B 13 02 FB | 	rdlong	arg01, local09
19630     2C 4E 85 F1 | 	sub	fp, #44
19634     01 3A 06 F6 | 	mov	local11, #1
19638     1A 15 02 F6 | 	mov	arg02, local08
1963c     01 16 06 F6 | 	mov	arg03, #1
19640     68 EA B0 FD | 	call	#__system__Mid_S
19644     FD 14 C2 FA | 	rdbyte	arg02, result1
19648     18 13 02 F6 | 	mov	arg01, local06
1964c     0C 91 B0 FD | 	call	#_pspoke
19650     34 4F 05 F1 | 	add	fp, #308
19654     A7 30 02 FB | 	rdlong	local06, fp
19658     18 2F 02 F6 | 	mov	local05, local06
1965c     01 2E 06 F1 | 	add	local05, #1
19660     A7 2E 62 FC | 	wrlong	local05, fp
19664     34 4F 85 F1 | 	sub	fp, #308
19668     70 FF 9F FD | 	jmp	#LR__2035
1966c                 | LR__2036
1966c     52 00 00 FF 
19670     98 E4 05 F1 | 	add	objptr, ##42136
19674     F2 2E 02 FB | 	rdlong	local05, objptr
19678     52 00 00 FF 
1967c     98 E4 85 F1 | 	sub	objptr, ##42136
19680     10 4E 05 F1 | 	add	fp, #16
19684     A7 2E 62 FC | 	wrlong	local05, fp
19688     10 4E 85 F1 | 	sub	fp, #16
1968c                 | LR__2037
1968c     50 3C BF FD | 	call	#_pop
19690     1C 4E 05 F1 | 	add	fp, #28
19694     A7 FA 61 FC | 	wrlong	result1, fp
19698     04 4E 05 F1 | 	add	fp, #4
1969c     A7 FC 61 FC | 	wrlong	result2, fp
196a0     04 4E 05 F1 | 	add	fp, #4
196a4     A7 FE 61 FC | 	wrlong	result3, fp
196a8                 | '   t1=pop() 
196a8                 | '   if i>=numpar-j then
196a8     1C 4E 85 F1 | 	sub	fp, #28
196ac     A7 2E 02 FB | 	rdlong	local05, fp
196b0     17 3D 02 F6 | 	mov	local12, local05
196b4     2C 4F 05 F1 | 	add	fp, #300
196b8     A7 3E 02 FB | 	rdlong	local13, fp
196bc     1F 41 02 F6 | 	mov	local14, local13
196c0     20 3D 82 F1 | 	sub	local12, local14
196c4     04 4E 85 F1 | 	sub	fp, #4
196c8     A7 42 02 FB | 	rdlong	local15, fp
196cc     30 4F 85 F1 | 	sub	fp, #304
196d0     21 45 02 F6 | 	mov	local16, local15
196d4     1E 45 52 F2 | 	cmps	local16, local12 wc
196d8     80 06 90 CD |  if_b	jmp	#LR__2068
196dc     20 4E 05 F1 | 	add	fp, #32
196e0     A7 3C 02 FB | 	rdlong	local12, fp
196e4     0C 4E 85 F1 | 	sub	fp, #12
196e8     A7 3C 62 FC | 	wrlong	local12, fp
196ec                 | '     vartype=t1.result.twowords(1)
196ec                 | '     select case vartype
196ec     14 4E 85 F1 | 	sub	fp, #20
196f0     1E 47 0A F6 | 	mov	local17, local12 wz
196f4     64 00 90 AD |  if_e	jmp	#LR__2038
196f8     00 47 0E F2 | 	cmp	local17, #256 wz
196fc     6C 00 90 AD |  if_e	jmp	#LR__2039
19700     01 47 0E F2 | 	cmp	local17, #257 wz
19704     74 00 90 AD |  if_e	jmp	#LR__2040
19708     02 47 0E F2 | 	cmp	local17, #258 wz
1970c     7C 00 90 AD |  if_e	jmp	#LR__2041
19710     03 47 0E F2 | 	cmp	local17, #259 wz
19714     84 00 90 AD |  if_e	jmp	#LR__2042
19718     04 47 0E F2 | 	cmp	local17, #260 wz
1971c     8C 00 90 AD |  if_e	jmp	#LR__2043
19720     05 47 0E F2 | 	cmp	local17, #261 wz
19724     94 00 90 AD |  if_e	jmp	#LR__2044
19728     06 47 0E F2 | 	cmp	local17, #262 wz
1972c     9C 00 90 AD |  if_e	jmp	#LR__2045
19730     07 47 0E F2 | 	cmp	local17, #263 wz
19734     A4 00 90 AD |  if_e	jmp	#LR__2046
19738     08 47 0E F2 | 	cmp	local17, #264 wz
1973c     AC 00 90 AD |  if_e	jmp	#LR__2047
19740     09 47 0E F2 | 	cmp	local17, #265 wz
19744     B4 00 90 AD |  if_e	jmp	#LR__2048
19748     0A 47 0E F2 | 	cmp	local17, #266 wz
1974c     BC 00 90 AD |  if_e	jmp	#LR__2049
19750     0B 47 0E F2 | 	cmp	local17, #267 wz
19754     C4 00 90 AD |  if_e	jmp	#LR__2050
19758     D0 00 90 FD | 	jmp	#LR__2051
1975c                 | LR__2038
1975c     18 4E 05 F1 | 	add	fp, #24
19760     A7 18 68 FC | 	wrlong	#12, fp
19764     18 4E 85 F1 | 	sub	fp, #24
19768     CC 00 90 FD | 	jmp	#LR__2052
1976c                 | LR__2039
1976c     18 4E 05 F1 | 	add	fp, #24
19770     A7 18 68 FC | 	wrlong	#12, fp
19774     18 4E 85 F1 | 	sub	fp, #24
19778     BC 00 90 FD | 	jmp	#LR__2052
1977c                 | LR__2040
1977c     18 4E 05 F1 | 	add	fp, #24
19780     A7 02 68 FC | 	wrlong	#1, fp
19784     18 4E 85 F1 | 	sub	fp, #24
19788     AC 00 90 FD | 	jmp	#LR__2052
1978c                 | LR__2041
1978c     18 4E 05 F1 | 	add	fp, #24
19790     A7 02 68 FC | 	wrlong	#1, fp
19794     18 4E 85 F1 | 	sub	fp, #24
19798     9C 00 90 FD | 	jmp	#LR__2052
1979c                 | LR__2042
1979c     18 4E 05 F1 | 	add	fp, #24
197a0     A7 04 68 FC | 	wrlong	#2, fp
197a4     18 4E 85 F1 | 	sub	fp, #24
197a8     8C 00 90 FD | 	jmp	#LR__2052
197ac                 | LR__2043
197ac     18 4E 05 F1 | 	add	fp, #24
197b0     A7 04 68 FC | 	wrlong	#2, fp
197b4     18 4E 85 F1 | 	sub	fp, #24
197b8     7C 00 90 FD | 	jmp	#LR__2052
197bc                 | LR__2044
197bc     18 4E 05 F1 | 	add	fp, #24
197c0     A7 08 68 FC | 	wrlong	#4, fp
197c4     18 4E 85 F1 | 	sub	fp, #24
197c8     6C 00 90 FD | 	jmp	#LR__2052
197cc                 | LR__2045
197cc     18 4E 05 F1 | 	add	fp, #24
197d0     A7 08 68 FC | 	wrlong	#4, fp
197d4     18 4E 85 F1 | 	sub	fp, #24
197d8     5C 00 90 FD | 	jmp	#LR__2052
197dc                 | LR__2046
197dc     18 4E 05 F1 | 	add	fp, #24
197e0     A7 10 68 FC | 	wrlong	#8, fp
197e4     18 4E 85 F1 | 	sub	fp, #24
197e8     4C 00 90 FD | 	jmp	#LR__2052
197ec                 | LR__2047
197ec     18 4E 05 F1 | 	add	fp, #24
197f0     A7 10 68 FC | 	wrlong	#8, fp
197f4     18 4E 85 F1 | 	sub	fp, #24
197f8     3C 00 90 FD | 	jmp	#LR__2052
197fc                 | LR__2048
197fc     18 4E 05 F1 | 	add	fp, #24
19800     A7 0C 68 FC | 	wrlong	#6, fp
19804     18 4E 85 F1 | 	sub	fp, #24
19808     2C 00 90 FD | 	jmp	#LR__2052
1980c                 | LR__2049
1980c     18 4E 05 F1 | 	add	fp, #24
19810     A7 10 68 FC | 	wrlong	#8, fp
19814     18 4E 85 F1 | 	sub	fp, #24
19818     1C 00 90 FD | 	jmp	#LR__2052
1981c                 | LR__2050
1981c     18 4E 05 F1 | 	add	fp, #24
19820     A7 0A 68 FC | 	wrlong	#5, fp
19824     18 4E 85 F1 | 	sub	fp, #24
19828     0C 00 90 FD | 	jmp	#LR__2052
1982c                 | LR__2051
1982c     18 4E 05 F1 | 	add	fp, #24
19830     A7 18 68 FC | 	wrlong	#12, fp
19834     18 4E 85 F1 | 	sub	fp, #24
19838                 | LR__2052
19838                 | '     if esize=12 andalso t1.result.uresult<$80000 then
19838     18 4E 05 F1 | 	add	fp, #24
1983c     A7 3C 02 FB | 	rdlong	local12, fp
19840     18 4E 85 F1 | 	sub	fp, #24
19844     0C 3C 0E F2 | 	cmp	local12, #12 wz
19848     74 01 90 5D |  if_ne	jmp	#LR__2057
1984c     1C 4E 05 F1 | 	add	fp, #28
19850     A7 3E 02 FB | 	rdlong	local13, fp
19854     1C 4E 85 F1 | 	sub	fp, #28
19858     00 04 00 FF 
1985c     00 3E 16 F2 | 	cmp	local13, ##524288 wc
19860     5C 01 90 3D |  if_ae	jmp	#LR__2057
19864                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
19864     52 00 00 FF 
19868     10 E5 05 F1 | 	add	objptr, ##42256
1986c     F2 3C 02 FB | 	rdlong	local12, objptr
19870     52 00 00 FF 
19874     10 E5 85 F1 | 	sub	objptr, ##42256
19878     1C 3C 0E F2 | 	cmp	local12, #28 wz
1987c     38 00 90 5D |  if_ne	jmp	#LR__2053
19880     1C 4E 05 F1 | 	add	fp, #28
19884     A7 3C 02 FB | 	rdlong	local12, fp
19888     14 4F 05 F1 | 	add	fp, #276
1988c     A7 3E 02 FB | 	rdlong	local13, fp
19890     1F 45 02 F6 | 	mov	local16, local13
19894     02 44 66 F0 | 	shl	local16, #2
19898     04 4F 85 F1 | 	sub	fp, #260
1989c     A7 42 02 F6 | 	mov	local15, fp
198a0     A7 44 02 F1 | 	add	local16, fp
198a4     22 13 02 FB | 	rdlong	arg01, local16
198a8     00 14 06 F6 | 	mov	arg02, #0
198ac     2C 4E 85 F1 | 	sub	fp, #44
198b0     54 FB B0 FD | 	call	#__system____builtin_atoi
198b4     1E FB 61 FC | 	wrlong	result1, local12
198b8                 | LR__2053
198b8                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
198b8     52 00 00 FF 
198bc     10 E5 05 F1 | 	add	objptr, ##42256
198c0     F2 3C 02 FB | 	rdlong	local12, objptr
198c4     52 00 00 FF 
198c8     10 E5 85 F1 | 	sub	objptr, ##42256
198cc     1D 3C 0E F2 | 	cmp	local12, #29 wz
198d0     38 00 90 5D |  if_ne	jmp	#LR__2054
198d4     1C 4E 05 F1 | 	add	fp, #28
198d8     A7 3C 02 FB | 	rdlong	local12, fp
198dc     14 4F 05 F1 | 	add	fp, #276
198e0     A7 3E 02 FB | 	rdlong	local13, fp
198e4     1F 45 02 F6 | 	mov	local16, local13
198e8     02 44 66 F0 | 	shl	local16, #2
198ec     04 4F 85 F1 | 	sub	fp, #260
198f0     A7 42 02 F6 | 	mov	local15, fp
198f4     A7 44 02 F1 | 	add	local16, fp
198f8     22 13 02 FB | 	rdlong	arg01, local16
198fc     00 14 06 F6 | 	mov	arg02, #0
19900     2C 4E 85 F1 | 	sub	fp, #44
19904     00 FB B0 FD | 	call	#__system____builtin_atoi
19908     1E FB 61 FC | 	wrlong	result1, local12
1990c                 | LR__2054
1990c                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
1990c     52 00 00 FF 
19910     10 E5 05 F1 | 	add	objptr, ##42256
19914     F2 3C 02 FB | 	rdlong	local12, objptr
19918     52 00 00 FF 
1991c     10 E5 85 F1 | 	sub	objptr, ##42256
19920     1E 3C 0E F2 | 	cmp	local12, #30 wz
19924     3C 00 90 5D |  if_ne	jmp	#LR__2055
19928     30 4F 05 F1 | 	add	fp, #304
1992c     A7 3E 02 FB | 	rdlong	local13, fp
19930     02 3E 66 F0 | 	shl	local13, #2
19934     04 4F 85 F1 | 	sub	fp, #260
19938     A7 44 02 F6 | 	mov	local16, fp
1993c     A7 3E 02 F1 | 	add	local13, fp
19940     1F 13 02 FB | 	rdlong	arg01, local13
19944     2C 4E 85 F1 | 	sub	fp, #44
19948     50 FC B0 FD | 	call	#__system____builtin_atof
1994c     28 4E 05 F1 | 	add	fp, #40
19950     A7 FA 61 FC | 	wrlong	result1, fp
19954     0C 4E 85 F1 | 	sub	fp, #12
19958     A7 3C 02 FB | 	rdlong	local12, fp
1995c     1C 4E 85 F1 | 	sub	fp, #28
19960     1E FB 61 FC | 	wrlong	result1, local12
19964                 | LR__2055
19964                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
19964     52 00 00 FF 
19968     10 E5 05 F1 | 	add	objptr, ##42256
1996c     F2 3C 02 FB | 	rdlong	local12, objptr
19970     52 00 00 FF 
19974     10 E5 85 F1 | 	sub	objptr, ##42256
19978     2B 3C 0E F2 | 	cmp	local12, #43 wz
1997c     18 00 90 5D |  if_ne	jmp	#LR__2056
19980     1C 4E 05 F1 | 	add	fp, #28
19984     A7 12 02 FB | 	rdlong	arg01, fp
19988     0C 4E 85 F1 | 	sub	fp, #12
1998c     A7 14 02 FB | 	rdlong	arg02, fp
19990     10 4E 85 F1 | 	sub	fp, #16
19994     09 15 62 FC | 	wrlong	arg02, arg01
19998                 | LR__2056
19998     1C 4E 05 F1 | 	add	fp, #28
1999c     A7 12 02 FB | 	rdlong	arg01, fp
199a0     1C 4E 85 F1 | 	sub	fp, #28
199a4     08 12 06 F1 | 	add	arg01, #8
199a8     52 00 00 FF 
199ac     10 E5 05 F1 | 	add	objptr, ##42256
199b0     F2 14 02 FB | 	rdlong	arg02, objptr
199b4     52 00 00 FF 
199b8     10 E5 85 F1 | 	sub	objptr, ##42256
199bc     09 15 62 FC | 	wrlong	arg02, arg01
199c0                 | LR__2057
199c0                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
199c0     18 4E 05 F1 | 	add	fp, #24
199c4     A7 3C 02 FB | 	rdlong	local12, fp
199c8     18 4E 85 F1 | 	sub	fp, #24
199cc     0C 3C 0E F2 | 	cmp	local12, #12 wz
199d0     94 01 90 5D |  if_ne	jmp	#LR__2062
199d4     1C 4E 05 F1 | 	add	fp, #28
199d8     A7 3E 02 FB | 	rdlong	local13, fp
199dc     1C 4E 85 F1 | 	sub	fp, #28
199e0     00 04 00 FF 
199e4     00 3E 16 F2 | 	cmp	local13, ##524288 wc
199e8     7C 01 90 CD |  if_b	jmp	#LR__2062
199ec                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
199ec     52 00 00 FF 
199f0     10 E5 05 F1 | 	add	objptr, ##42256
199f4     F2 3C 02 FB | 	rdlong	local12, objptr
199f8     52 00 00 FF 
199fc     10 E5 85 F1 | 	sub	objptr, ##42256
19a00     1C 3C 0E F2 | 	cmp	local12, #28 wz
19a04     40 00 90 5D |  if_ne	jmp	#LR__2058
19a08     1C 4E 05 F1 | 	add	fp, #28
19a0c     A7 3C 02 FB | 	rdlong	local12, fp
19a10     14 4F 05 F1 | 	add	fp, #276
19a14     A7 3E 02 FB | 	rdlong	local13, fp
19a18     1F 45 02 F6 | 	mov	local16, local13
19a1c     02 44 66 F0 | 	shl	local16, #2
19a20     04 4F 85 F1 | 	sub	fp, #260
19a24     A7 42 02 F6 | 	mov	local15, fp
19a28     A7 44 02 F1 | 	add	local16, fp
19a2c     22 13 02 FB | 	rdlong	arg01, local16
19a30     00 14 06 F6 | 	mov	arg02, #0
19a34     2C 4E 85 F1 | 	sub	fp, #44
19a38     CC F9 B0 FD | 	call	#__system____builtin_atoi
19a3c     FD 14 02 F6 | 	mov	arg02, result1
19a40     1E 13 02 F6 | 	mov	arg01, local12
19a44     84 8C B0 FD | 	call	#_pslpoke
19a48                 | LR__2058
19a48                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
19a48     52 00 00 FF 
19a4c     10 E5 05 F1 | 	add	objptr, ##42256
19a50     F2 3C 02 FB | 	rdlong	local12, objptr
19a54     52 00 00 FF 
19a58     10 E5 85 F1 | 	sub	objptr, ##42256
19a5c     1D 3C 0E F2 | 	cmp	local12, #29 wz
19a60     40 00 90 5D |  if_ne	jmp	#LR__2059
19a64     1C 4E 05 F1 | 	add	fp, #28
19a68     A7 3C 02 FB | 	rdlong	local12, fp
19a6c     14 4F 05 F1 | 	add	fp, #276
19a70     A7 3E 02 FB | 	rdlong	local13, fp
19a74     1F 45 02 F6 | 	mov	local16, local13
19a78     02 44 66 F0 | 	shl	local16, #2
19a7c     04 4F 85 F1 | 	sub	fp, #260
19a80     A7 42 02 F6 | 	mov	local15, fp
19a84     A7 44 02 F1 | 	add	local16, fp
19a88     22 13 02 FB | 	rdlong	arg01, local16
19a8c     00 14 06 F6 | 	mov	arg02, #0
19a90     2C 4E 85 F1 | 	sub	fp, #44
19a94     70 F9 B0 FD | 	call	#__system____builtin_atoi
19a98     FD 14 02 F6 | 	mov	arg02, result1
19a9c     1E 13 02 F6 | 	mov	arg01, local12
19aa0     28 8C B0 FD | 	call	#_pslpoke
19aa4                 | LR__2059
19aa4                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
19aa4     52 00 00 FF 
19aa8     10 E5 05 F1 | 	add	objptr, ##42256
19aac     F2 3C 02 FB | 	rdlong	local12, objptr
19ab0     52 00 00 FF 
19ab4     10 E5 85 F1 | 	sub	objptr, ##42256
19ab8     1E 3C 0E F2 | 	cmp	local12, #30 wz
19abc     4C 00 90 5D |  if_ne	jmp	#LR__2060
19ac0     30 4F 05 F1 | 	add	fp, #304
19ac4     A7 3E 02 FB | 	rdlong	local13, fp
19ac8     02 3E 66 F0 | 	shl	local13, #2
19acc     04 4F 85 F1 | 	sub	fp, #260
19ad0     A7 44 02 F6 | 	mov	local16, fp
19ad4     A7 3E 02 F1 | 	add	local13, fp
19ad8     1F 13 02 FB | 	rdlong	arg01, local13
19adc     2C 4E 85 F1 | 	sub	fp, #44
19ae0     B8 FA B0 FD | 	call	#__system____builtin_atof
19ae4     28 4E 05 F1 | 	add	fp, #40
19ae8     A7 FA 61 FC | 	wrlong	result1, fp
19aec     0C 4E 85 F1 | 	sub	fp, #12
19af0     A7 3C 02 FB | 	rdlong	local12, fp
19af4     0C 4E 05 F1 | 	add	fp, #12
19af8     A7 12 02 F6 | 	mov	arg01, fp
19afc     28 4E 85 F1 | 	sub	fp, #40
19b00     09 15 02 FB | 	rdlong	arg02, arg01
19b04     1E 13 02 F6 | 	mov	arg01, local12
19b08     C0 8B B0 FD | 	call	#_pslpoke
19b0c                 | LR__2060
19b0c                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
19b0c     52 00 00 FF 
19b10     10 E5 05 F1 | 	add	objptr, ##42256
19b14     F2 3C 02 FB | 	rdlong	local12, objptr
19b18     52 00 00 FF 
19b1c     10 E5 85 F1 | 	sub	objptr, ##42256
19b20     2B 3C 0E F2 | 	cmp	local12, #43 wz
19b24     18 00 90 5D |  if_ne	jmp	#LR__2061
19b28     1C 4E 05 F1 | 	add	fp, #28
19b2c     A7 12 02 FB | 	rdlong	arg01, fp
19b30     0C 4E 85 F1 | 	sub	fp, #12
19b34     A7 14 02 FB | 	rdlong	arg02, fp
19b38     10 4E 85 F1 | 	sub	fp, #16
19b3c     8C 8B B0 FD | 	call	#_pslpoke
19b40                 | LR__2061
19b40     1C 4E 05 F1 | 	add	fp, #28
19b44     A7 12 02 FB | 	rdlong	arg01, fp
19b48     1C 4E 85 F1 | 	sub	fp, #28
19b4c     08 12 06 F1 | 	add	arg01, #8
19b50     52 00 00 FF 
19b54     10 E5 05 F1 | 	add	objptr, ##42256
19b58     F2 14 02 FB | 	rdlong	arg02, objptr
19b5c     52 00 00 FF 
19b60     10 E5 85 F1 | 	sub	objptr, ##42256
19b64     64 8B B0 FD | 	call	#_pslpoke
19b68                 | LR__2062
19b68                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
19b68     18 4E 05 F1 | 	add	fp, #24
19b6c     A7 3C 02 FB | 	rdlong	local12, fp
19b70     18 4E 85 F1 | 	sub	fp, #24
19b74     05 3C 0E F2 | 	cmp	local12, #5 wz
19b78     52 00 00 AF 
19b7c     10 E5 05 A1 |  if_e	add	objptr, ##42256
19b80     F2 40 02 AB |  if_e	rdlong	local14, objptr
19b84     52 00 00 AF 
19b88     10 E5 85 A1 |  if_e	sub	objptr, ##42256
19b8c     2B 40 0E A2 |  if_e	cmp	local14, #43 wz
19b90     18 00 90 5D |  if_ne	jmp	#LR__2063
19b94     1C 4E 05 F1 | 	add	fp, #28
19b98     A7 12 02 FB | 	rdlong	arg01, fp
19b9c     0C 4E 85 F1 | 	sub	fp, #12
19ba0     A7 14 02 FB | 	rdlong	arg02, fp
19ba4     10 4E 85 F1 | 	sub	fp, #16
19ba8     20 8B B0 FD | 	call	#_pslpoke
19bac                 | LR__2063
19bac                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
19bac     18 4E 05 F1 | 	add	fp, #24
19bb0     A7 3C 02 FB | 	rdlong	local12, fp
19bb4     18 4E 85 F1 | 	sub	fp, #24
19bb8     04 3C 0E F2 | 	cmp	local12, #4 wz
19bbc     54 00 90 5D |  if_ne	jmp	#LR__2064
19bc0     52 00 00 FF 
19bc4     10 E5 05 F1 | 	add	objptr, ##42256
19bc8     F2 40 02 FB | 	rdlong	local14, objptr
19bcc     52 00 00 FF 
19bd0     10 E5 85 F1 | 	sub	objptr, ##42256
19bd4     2B 40 0E F2 | 	cmp	local14, #43 wz
19bd8     38 00 90 AD |  if_e	jmp	#LR__2064
19bdc     1C 4E 05 F1 | 	add	fp, #28
19be0     A7 3C 02 FB | 	rdlong	local12, fp
19be4     14 4F 05 F1 | 	add	fp, #276
19be8     A7 44 02 FB | 	rdlong	local16, fp
19bec     02 44 66 F0 | 	shl	local16, #2
19bf0     04 4F 85 F1 | 	sub	fp, #260
19bf4     A7 44 02 F1 | 	add	local16, fp
19bf8     22 13 02 FB | 	rdlong	arg01, local16
19bfc     00 14 06 F6 | 	mov	arg02, #0
19c00     2C 4E 85 F1 | 	sub	fp, #44
19c04     00 F8 B0 FD | 	call	#__system____builtin_atoi
19c08     FD 14 02 F6 | 	mov	arg02, result1
19c0c     1E 13 02 F6 | 	mov	arg01, local12
19c10     B8 8A B0 FD | 	call	#_pslpoke
19c14                 | LR__2064
19c14                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
19c14     18 4E 05 F1 | 	add	fp, #24
19c18     A7 3C 02 FB | 	rdlong	local12, fp
19c1c     18 4E 85 F1 | 	sub	fp, #24
19c20     02 3C 0E F2 | 	cmp	local12, #2 wz
19c24     54 00 90 5D |  if_ne	jmp	#LR__2065
19c28     52 00 00 FF 
19c2c     10 E5 05 F1 | 	add	objptr, ##42256
19c30     F2 40 02 FB | 	rdlong	local14, objptr
19c34     52 00 00 FF 
19c38     10 E5 85 F1 | 	sub	objptr, ##42256
19c3c     2B 40 0E F2 | 	cmp	local14, #43 wz
19c40     38 00 90 AD |  if_e	jmp	#LR__2065
19c44     1C 4E 05 F1 | 	add	fp, #28
19c48     A7 3C 02 FB | 	rdlong	local12, fp
19c4c     14 4F 05 F1 | 	add	fp, #276
19c50     A7 44 02 FB | 	rdlong	local16, fp
19c54     02 44 66 F0 | 	shl	local16, #2
19c58     04 4F 85 F1 | 	sub	fp, #260
19c5c     A7 44 02 F1 | 	add	local16, fp
19c60     22 13 02 FB | 	rdlong	arg01, local16
19c64     00 14 06 F6 | 	mov	arg02, #0
19c68     2C 4E 85 F1 | 	sub	fp, #44
19c6c     98 F7 B0 FD | 	call	#__system____builtin_atoi
19c70     FD 14 02 F6 | 	mov	arg02, result1
19c74     1E 13 02 F6 | 	mov	arg01, local12
19c78     98 8A B0 FD | 	call	#_psdpoke
19c7c                 | LR__2065
19c7c                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
19c7c     18 4E 05 F1 | 	add	fp, #24
19c80     A7 3C 02 FB | 	rdlong	local12, fp
19c84     18 4E 85 F1 | 	sub	fp, #24
19c88     01 3C 0E F2 | 	cmp	local12, #1 wz
19c8c     54 00 90 5D |  if_ne	jmp	#LR__2066
19c90     52 00 00 FF 
19c94     10 E5 05 F1 | 	add	objptr, ##42256
19c98     F2 40 02 FB | 	rdlong	local14, objptr
19c9c     52 00 00 FF 
19ca0     10 E5 85 F1 | 	sub	objptr, ##42256
19ca4     2B 40 0E F2 | 	cmp	local14, #43 wz
19ca8     38 00 90 AD |  if_e	jmp	#LR__2066
19cac     1C 4E 05 F1 | 	add	fp, #28
19cb0     A7 3C 02 FB | 	rdlong	local12, fp
19cb4     14 4F 05 F1 | 	add	fp, #276
19cb8     A7 44 02 FB | 	rdlong	local16, fp
19cbc     02 44 66 F0 | 	shl	local16, #2
19cc0     04 4F 85 F1 | 	sub	fp, #260
19cc4     A7 44 02 F1 | 	add	local16, fp
19cc8     22 13 02 FB | 	rdlong	arg01, local16
19ccc     00 14 06 F6 | 	mov	arg02, #0
19cd0     2C 4E 85 F1 | 	sub	fp, #44
19cd4     30 F7 B0 FD | 	call	#__system____builtin_atoi
19cd8     FD 14 02 F6 | 	mov	arg02, result1
19cdc     1E 13 02 F6 | 	mov	arg01, local12
19ce0     78 8A B0 FD | 	call	#_pspoke
19ce4                 | LR__2066
19ce4                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
19ce4     18 4E 05 F1 | 	add	fp, #24
19ce8     A7 3C 02 FB | 	rdlong	local12, fp
19cec     18 4E 85 F1 | 	sub	fp, #24
19cf0     06 3C 0E F2 | 	cmp	local12, #6 wz
19cf4     64 00 90 5D |  if_ne	jmp	#LR__2067
19cf8     52 00 00 FF 
19cfc     10 E5 05 F1 | 	add	objptr, ##42256
19d00     F2 40 02 FB | 	rdlong	local14, objptr
19d04     52 00 00 FF 
19d08     10 E5 85 F1 | 	sub	objptr, ##42256
19d0c     2B 40 0E F2 | 	cmp	local14, #43 wz
19d10     48 00 90 AD |  if_e	jmp	#LR__2067
19d14     30 4F 05 F1 | 	add	fp, #304
19d18     A7 3E 02 FB | 	rdlong	local13, fp
19d1c     02 3E 66 F0 | 	shl	local13, #2
19d20     04 4F 85 F1 | 	sub	fp, #260
19d24     A7 3E 02 F1 | 	add	local13, fp
19d28     1F 13 02 FB | 	rdlong	arg01, local13
19d2c     2C 4E 85 F1 | 	sub	fp, #44
19d30     68 F8 B0 FD | 	call	#__system____builtin_atof
19d34     28 4E 05 F1 | 	add	fp, #40
19d38     A7 FA 61 FC | 	wrlong	result1, fp
19d3c     0C 4E 85 F1 | 	sub	fp, #12
19d40     A7 3C 02 FB | 	rdlong	local12, fp
19d44     0C 4E 05 F1 | 	add	fp, #12
19d48     A7 12 02 F6 | 	mov	arg01, fp
19d4c     28 4E 85 F1 | 	sub	fp, #40
19d50     09 15 02 FB | 	rdlong	arg02, arg01
19d54     1E 13 02 F6 | 	mov	arg01, local12
19d58     70 89 B0 FD | 	call	#_pslpoke
19d5c                 | LR__2067
19d5c                 | LR__2068
19d5c     30 4F 05 F1 | 	add	fp, #304
19d60     A7 40 02 FB | 	rdlong	local14, fp
19d64     01 40 06 F1 | 	add	local14, #1
19d68     A7 40 62 FC | 	wrlong	local14, fp
19d6c     30 4F 85 F1 | 	sub	fp, #304
19d70     B8 F6 9F FD | 	jmp	#LR__2032
19d74                 | LR__2069
19d74                 | LR__2070
19d74     A7 F0 03 F6 | 	mov	ptra, fp
19d78     B2 00 A0 FD | 	call	#popregs_
19d7c                 | _do_read_ret
19d7c     2D 00 64 FD | 	ret
19d80                 | 
19d80                 | ' 
19d80                 | ' '------------------- release
19d80                 | ' 
19d80                 | ' sub do_release
19d80                 | _do_release
19d80     00 4A 05 F6 | 	mov	COUNT_, #0
19d84     A8 00 A0 FD | 	call	#pushregs_
19d88     10 F0 07 F1 | 	add	ptra, #16
19d8c     50 35 BF FD | 	call	#_pop
19d90     FF 14 02 F6 | 	mov	arg02, result3
19d94     A7 FA 61 FC | 	wrlong	result1, fp
19d98     04 4E 05 F1 | 	add	fp, #4
19d9c     A7 FC 61 FC | 	wrlong	result2, fp
19da0     04 4E 05 F1 | 	add	fp, #4
19da4     A7 14 62 FC | 	wrlong	arg02, fp
19da8     08 4E 85 F1 | 	sub	fp, #8
19dac     A7 12 02 F6 | 	mov	arg01, fp
19db0     10 37 BF FD | 	call	#_converttoint
19db4     0C 4E 05 F1 | 	add	fp, #12
19db8     A7 FA 61 FC | 	wrlong	result1, fp
19dbc                 | ' 
19dbc                 | ' t1=pop()
19dbc                 | ' channel=converttoint(t1)
19dbc                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
19dbc     0C 4E 85 F1 | 	sub	fp, #12
19dc0     00 FA 55 F2 | 	cmps	result1, #0 wc
19dc4     44 00 90 CD |  if_b	jmp	#LR__2080
19dc8     0C 4E 05 F1 | 	add	fp, #12
19dcc     A7 14 02 FB | 	rdlong	arg02, fp
19dd0     0C 4E 85 F1 | 	sub	fp, #12
19dd4     08 14 56 F2 | 	cmps	arg02, #8 wc
19dd8     30 00 90 3D |  if_ae	jmp	#LR__2080
19ddc     37 00 00 FF 
19de0     10 E4 05 F1 | 	add	objptr, ##28176
19de4     F2 12 02 FB | 	rdlong	arg01, objptr
19de8     37 00 00 FF 
19dec     10 E4 85 F1 | 	sub	objptr, ##28176
19df0     0C 4E 05 F1 | 	add	fp, #12
19df4     A7 14 02 FB | 	rdlong	arg02, fp
19df8     0C 4E 85 F1 | 	sub	fp, #12
19dfc     06 14 66 F0 | 	shl	arg02, #6
19e00     0A 13 02 F1 | 	add	arg01, arg02
19e04     2C 12 06 F1 | 	add	arg01, #44
19e08     09 FF 69 FC | 	wrlong	#255, arg01
19e0c                 | LR__2080
19e0c     A7 F0 03 F6 | 	mov	ptra, fp
19e10     B2 00 A0 FD | 	call	#popregs_
19e14                 | _do_release_ret
19e14     2D 00 64 FD | 	ret
19e18                 | 
19e18                 | ' 
19e18                 | ' '------------------- restore
19e18                 | ' 
19e18                 | ' sub do_restore()
19e18                 | _do_restore
19e18     4A 00 00 FF 
19e1c     88 E4 05 F1 | 	add	objptr, ##38024
19e20     F2 00 02 FB | 	rdlong	_var01, objptr
19e24     06 00 00 FF 
19e28     A4 E4 05 F1 | 	add	objptr, ##3236
19e2c     F2 00 62 FC | 	wrlong	_var01, objptr
19e30     B2 01 00 FF 
19e34     16 01 06 F6 | 	mov	_var01, ##@LR__5920
19e38     01 00 00 FF 
19e3c     B0 E5 05 F1 | 	add	objptr, ##944
19e40     F2 00 62 FC | 	wrlong	_var01, objptr
19e44     52 00 00 FF 
19e48     DC E4 85 F1 | 	sub	objptr, ##42204
19e4c                 | _do_restore_ret
19e4c     2D 00 64 FD | 	ret
19e50                 | 
19e50                 | ' 
19e50                 | ' '------------------- return
19e50                 | ' 
19e50                 | ' sub do_return()
19e50                 | _do_return
19e50                 | ' if gosubtop>0 then
19e50     50 00 00 FF 
19e54     34 E5 05 F1 | 	add	objptr, ##41268
19e58     F2 00 02 FB | 	rdlong	_var01, objptr
19e5c     50 00 00 FF 
19e60     34 E5 85 F1 | 	sub	objptr, ##41268
19e64     01 00 56 F2 | 	cmps	_var01, #1 wc
19e68     8C 00 90 CD |  if_b	jmp	#LR__2090
19e6c     50 00 00 FF 
19e70     34 E5 05 F1 | 	add	objptr, ##41268
19e74     F2 00 02 FB | 	rdlong	_var01, objptr
19e78     03 00 66 F0 | 	shl	_var01, #3
19e7c     03 00 00 FF 
19e80     88 E5 85 F1 | 	sub	objptr, ##1928
19e84     F2 00 02 F1 | 	add	_var01, objptr
19e88     00 01 02 FB | 	rdlong	_var01, _var01
19e8c     03 00 00 FF 
19e90     0C E5 05 F1 | 	add	objptr, ##1804
19e94     F2 00 62 FC | 	wrlong	_var01, objptr
19e98     7C E4 05 F1 | 	add	objptr, #124
19e9c     F2 00 02 FB | 	rdlong	_var01, objptr
19ea0     03 00 66 F0 | 	shl	_var01, #3
19ea4     03 00 00 FF 
19ea8     88 E5 85 F1 | 	sub	objptr, ##1928
19eac     F2 00 02 F1 | 	add	_var01, objptr
19eb0     04 00 06 F1 | 	add	_var01, #4
19eb4     00 01 02 FB | 	rdlong	_var01, _var01
19eb8     03 00 00 FF 
19ebc     10 E5 05 F1 | 	add	objptr, ##1808
19ec0     F2 00 62 FC | 	wrlong	_var01, objptr
19ec4     06 00 00 FF 
19ec8     40 E4 85 F1 | 	sub	objptr, ##3136
19ecc     F2 00 02 FB | 	rdlong	_var01, objptr
19ed0     01 00 86 F1 | 	sub	_var01, #1
19ed4     04 E4 05 F1 | 	add	objptr, #4
19ed8     F2 00 62 FC | 	wrlong	_var01, objptr
19edc     06 00 00 FF 
19ee0     B4 E4 05 F1 | 	add	objptr, ##3252
19ee4     F2 00 02 FB | 	rdlong	_var01, objptr
19ee8     01 00 86 F1 | 	sub	_var01, #1
19eec     F2 00 62 FC | 	wrlong	_var01, objptr
19ef0     50 00 00 FF 
19ef4     34 E5 85 F1 | 	sub	objptr, ##41268
19ef8                 | LR__2090
19ef8                 | _do_return_ret
19ef8     2D 00 64 FD | 	ret
19efc                 | 
19efc                 | ' 
19efc                 | ' '------------------- right$
19efc                 | ' 
19efc                 | ' sub do_right
19efc                 | _do_right
19efc     00 4A 05 F6 | 	mov	COUNT_, #0
19f00     A8 00 A0 FD | 	call	#pushregs_
19f04     14 F0 07 F1 | 	add	ptra, #20
19f08     4A 00 00 FF 
19f0c     80 E4 05 F1 | 	add	objptr, ##38016
19f10     F2 16 02 FB | 	rdlong	arg03, objptr
19f14     0B 15 02 F6 | 	mov	arg02, arg03
19f18     01 14 66 F0 | 	shl	arg02, #1
19f1c     0B 15 02 F1 | 	add	arg02, arg03
19f20     02 14 66 F0 | 	shl	arg02, #2
19f24     03 00 00 FF 
19f28     04 E4 85 F1 | 	sub	objptr, ##1540
19f2c     F2 14 02 F1 | 	add	arg02, objptr
19f30     0A 17 02 FB | 	rdlong	arg03, arg02
19f34     0C 4E 05 F1 | 	add	fp, #12
19f38     A7 16 62 FC | 	wrlong	arg03, fp
19f3c                 | ' 
19f3c                 | ' numpar=compiledline(lineptr_e).result.uresult
19f3c                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
19f3c     0C 4E 85 F1 | 	sub	fp, #12
19f40     02 16 0E F2 | 	cmp	arg03, #2 wz
19f44     47 00 00 FF 
19f48     7C E4 85 F1 | 	sub	objptr, ##36476
19f4c     40 00 90 AD |  if_e	jmp	#LR__2100
19f50     00 12 06 F6 | 	mov	arg01, #0
19f54     E8 1C B1 FD | 	call	#__system___getiolock_0602
19f58     FD 12 02 F6 | 	mov	arg01, result1
19f5c     B8 BF B0 FD | 	call	#__system___lockmem
19f60     B2 01 00 FF 
19f64     17 15 06 F6 | 	mov	arg02, ##@LR__5921
19f68     00 12 06 F6 | 	mov	arg01, #0
19f6c     00 16 06 F6 | 	mov	arg03, #0
19f70     98 CC B0 FD | 	call	#__system___basic_print_string
19f74     00 12 06 F6 | 	mov	arg01, #0
19f78     C4 1C B1 FD | 	call	#__system___getiolock_0602
19f7c     FD 00 68 FC | 	wrlong	#0, result1
19f80     27 12 06 F6 | 	mov	arg01, #39
19f84     00 14 06 F6 | 	mov	arg02, #0
19f88     A0 85 B0 FD | 	call	#_printerror
19f8c     EC 00 90 FD | 	jmp	#LR__2103
19f90                 | LR__2100
19f90     4C 33 BF FD | 	call	#_pop
19f94     FF 16 02 F6 | 	mov	arg03, result3
19f98     A7 FA 61 FC | 	wrlong	result1, fp
19f9c     04 4E 05 F1 | 	add	fp, #4
19fa0     A7 FC 61 FC | 	wrlong	result2, fp
19fa4     04 4E 05 F1 | 	add	fp, #4
19fa8     A7 16 62 FC | 	wrlong	arg03, fp
19fac     08 4E 85 F1 | 	sub	fp, #8
19fb0     A7 12 02 F6 | 	mov	arg01, fp
19fb4     0C 35 BF FD | 	call	#_converttoint
19fb8     FD 16 02 F6 | 	mov	arg03, result1
19fbc     10 4E 05 F1 | 	add	fp, #16
19fc0     A7 16 62 FC | 	wrlong	arg03, fp
19fc4     10 4E 85 F1 | 	sub	fp, #16
19fc8     14 33 BF FD | 	call	#_pop
19fcc     FF 16 02 F6 | 	mov	arg03, result3
19fd0     A7 FA 61 FC | 	wrlong	result1, fp
19fd4     04 4E 05 F1 | 	add	fp, #4
19fd8     A7 FC 61 FC | 	wrlong	result2, fp
19fdc     04 4E 05 F1 | 	add	fp, #4
19fe0     A7 16 62 FC | 	wrlong	arg03, fp
19fe4                 | ' t1=pop() : arg=converttoint(t1)
19fe4                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
19fe4     08 4E 85 F1 | 	sub	fp, #8
19fe8     2B 16 0E F2 | 	cmp	arg03, #43 wz
19fec     18 00 90 5D |  if_ne	jmp	#LR__2101
19ff0     A7 12 02 FB | 	rdlong	arg01, fp
19ff4     60 34 BF FD | 	call	#_convertstring
19ff8     A7 FA 61 FC | 	wrlong	result1, fp
19ffc     08 4E 05 F1 | 	add	fp, #8
1a000     A7 3E 68 FC | 	wrlong	#31, fp
1a004     08 4E 85 F1 | 	sub	fp, #8
1a008                 | LR__2101
1a008                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1a008     08 4E 05 F1 | 	add	fp, #8
1a00c     A7 16 02 FB | 	rdlong	arg03, fp
1a010     08 4E 85 F1 | 	sub	fp, #8
1a014     1F 16 0E F2 | 	cmp	arg03, #31 wz
1a018     40 00 90 AD |  if_e	jmp	#LR__2102
1a01c     00 12 06 F6 | 	mov	arg01, #0
1a020     1C 1C B1 FD | 	call	#__system___getiolock_0602
1a024     FD 12 02 F6 | 	mov	arg01, result1
1a028     EC BE B0 FD | 	call	#__system___lockmem
1a02c     B2 01 00 FF 
1a030     20 15 06 F6 | 	mov	arg02, ##@LR__5922
1a034     00 12 06 F6 | 	mov	arg01, #0
1a038     00 16 06 F6 | 	mov	arg03, #0
1a03c     CC CB B0 FD | 	call	#__system___basic_print_string
1a040     00 12 06 F6 | 	mov	arg01, #0
1a044     F8 1B B1 FD | 	call	#__system___getiolock_0602
1a048     FD 00 68 FC | 	wrlong	#0, result1
1a04c     0F 12 06 F6 | 	mov	arg01, #15
1a050     00 14 06 F6 | 	mov	arg02, #0
1a054     D4 84 B0 FD | 	call	#_printerror
1a058     20 00 90 FD | 	jmp	#LR__2103
1a05c                 | LR__2102
1a05c     A7 12 02 FB | 	rdlong	arg01, fp
1a060     10 4E 05 F1 | 	add	fp, #16
1a064     A7 14 02 FB | 	rdlong	arg02, fp
1a068     10 4E 85 F1 | 	sub	fp, #16
1a06c     AC DF B0 FD | 	call	#__system__Right_S
1a070     A7 FA 61 FC | 	wrlong	result1, fp
1a074     A7 12 02 F6 | 	mov	arg01, fp
1a078     FC 32 BF FD | 	call	#_push
1a07c                 | LR__2103
1a07c     A7 F0 03 F6 | 	mov	ptra, fp
1a080     B2 00 A0 FD | 	call	#popregs_
1a084                 | _do_right_ret
1a084     2D 00 64 FD | 	ret
1a088                 | 
1a088                 | ' 
1a088                 | ' '------------------- rnd
1a088                 | ' 
1a088                 | ' sub do_rnd
1a088                 | _do_rnd
1a088     01 4A 05 F6 | 	mov	COUNT_, #1
1a08c     A8 00 A0 FD | 	call	#pushregs_
1a090     10 F0 07 F1 | 	add	ptra, #16
1a094     4A 00 00 FF 
1a098     80 E4 05 F1 | 	add	objptr, ##38016
1a09c     F2 26 02 FB | 	rdlong	local01, objptr
1a0a0     13 17 02 F6 | 	mov	arg03, local01
1a0a4     01 16 66 F0 | 	shl	arg03, #1
1a0a8     13 17 02 F1 | 	add	arg03, local01
1a0ac     02 16 66 F0 | 	shl	arg03, #2
1a0b0     03 00 00 FF 
1a0b4     04 E4 85 F1 | 	sub	objptr, ##1540
1a0b8     F2 16 02 F1 | 	add	arg03, objptr
1a0bc     0B 17 02 FB | 	rdlong	arg03, arg03
1a0c0     0C 4E 05 F1 | 	add	fp, #12
1a0c4     A7 16 62 FC | 	wrlong	arg03, fp
1a0c8                 | ' 
1a0c8                 | ' numpar=compiledline(lineptr_e).result.uresult
1a0c8                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1a0c8     0C 4E 85 F1 | 	sub	fp, #12
1a0cc     02 16 16 F2 | 	cmp	arg03, #2 wc
1a0d0     47 00 00 FF 
1a0d4     7C E4 85 F1 | 	sub	objptr, ##36476
1a0d8     40 00 90 CD |  if_b	jmp	#LR__2110
1a0dc     00 12 06 F6 | 	mov	arg01, #0
1a0e0     5C 1B B1 FD | 	call	#__system___getiolock_0602
1a0e4     FD 12 02 F6 | 	mov	arg01, result1
1a0e8     2C BE B0 FD | 	call	#__system___lockmem
1a0ec     B2 01 00 FF 
1a0f0     29 15 06 F6 | 	mov	arg02, ##@LR__5923
1a0f4     00 12 06 F6 | 	mov	arg01, #0
1a0f8     00 16 06 F6 | 	mov	arg03, #0
1a0fc     0C CB B0 FD | 	call	#__system___basic_print_string
1a100     00 12 06 F6 | 	mov	arg01, #0
1a104     38 1B B1 FD | 	call	#__system___getiolock_0602
1a108     FD 00 68 FC | 	wrlong	#0, result1
1a10c     27 12 06 F6 | 	mov	arg01, #39
1a110     00 14 06 F6 | 	mov	arg02, #0
1a114     14 84 B0 FD | 	call	#_printerror
1a118     30 01 90 FD | 	jmp	#LR__2117
1a11c                 | LR__2110
1a11c                 | ' if numpar=0 then
1a11c     0C 4E 05 F1 | 	add	fp, #12
1a120     A7 FE 09 FB | 	rdlong	result3, fp wz
1a124     0C 4E 85 F1 | 	sub	fp, #12
1a128     20 00 90 5D |  if_ne	jmp	#LR__2111
1a12c     08 4E 05 F1 | 	add	fp, #8
1a130     A7 3A 68 FC | 	wrlong	#29, fp
1a134     08 4E 85 F1 | 	sub	fp, #8
1a138     1B FA 61 FD | 	getrnd	result1
1a13c     A7 FA 61 FC | 	wrlong	result1, fp
1a140     A7 12 02 F6 | 	mov	arg01, fp
1a144     30 32 BF FD | 	call	#_push
1a148     00 01 90 FD | 	jmp	#LR__2116
1a14c                 | LR__2111
1a14c     90 31 BF FD | 	call	#_pop
1a150     A7 FA 61 FC | 	wrlong	result1, fp
1a154     04 4E 05 F1 | 	add	fp, #4
1a158     A7 FC 61 FC | 	wrlong	result2, fp
1a15c     04 4E 05 F1 | 	add	fp, #4
1a160     A7 FE 61 FC | 	wrlong	result3, fp
1a164                 | '   t1=pop()
1a164                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1a164     08 4E 85 F1 | 	sub	fp, #8
1a168     1C FE 0D F2 | 	cmp	result3, #28 wz
1a16c     08 4E 05 51 |  if_ne	add	fp, #8
1a170     A7 26 02 5B |  if_ne	rdlong	local01, fp
1a174     08 4E 85 51 |  if_ne	sub	fp, #8
1a178     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1a17c     2C 00 90 5D |  if_ne	jmp	#LR__2112
1a180     1B FA 61 FD | 	getrnd	result1
1a184     A7 26 02 FB | 	rdlong	local01, fp
1a188     13 FB 11 FD | 	qdiv	result1, local01
1a18c     A7 12 02 F6 | 	mov	arg01, fp
1a190     19 26 62 FD | 	getqy	local01
1a194     A7 26 62 FC | 	wrlong	local01, fp
1a198     08 4E 05 F1 | 	add	fp, #8
1a19c     A7 3A 68 FC | 	wrlong	#29, fp
1a1a0     08 4E 85 F1 | 	sub	fp, #8
1a1a4     D0 31 BF FD | 	call	#_push
1a1a8     A0 00 90 FD | 	jmp	#LR__2115
1a1ac                 | LR__2112
1a1ac     08 4E 05 F1 | 	add	fp, #8
1a1b0     A7 26 02 FB | 	rdlong	local01, fp
1a1b4     08 4E 85 F1 | 	sub	fp, #8
1a1b8     1E 26 0E F2 | 	cmp	local01, #30 wz
1a1bc     48 00 90 5D |  if_ne	jmp	#LR__2113
1a1c0     A7 12 02 FB | 	rdlong	arg01, fp
1a1c4     00 C0 24 FF 
1a1c8     00 14 06 F6 | 	mov	arg02, ##1233125376
1a1cc     C4 ED B0 FD | 	call	#__system___float_div
1a1d0     FD 26 02 F6 | 	mov	local01, result1
1a1d4     1B 12 62 FD | 	getrnd	arg01
1a1d8     74 13 06 F4 | 	bitl	arg01, #372
1a1dc     AC E7 B0 FD | 	call	#__system___float_fromuns
1a1e0     FD 14 02 F6 | 	mov	arg02, result1
1a1e4     13 13 02 F6 | 	mov	arg01, local01
1a1e8     A4 EB B0 FD | 	call	#__system___float_mul
1a1ec     A7 FA 61 FC | 	wrlong	result1, fp
1a1f0     08 4E 05 F1 | 	add	fp, #8
1a1f4     A7 3C 68 FC | 	wrlong	#30, fp
1a1f8     08 4E 85 F1 | 	sub	fp, #8
1a1fc     A7 12 02 F6 | 	mov	arg01, fp
1a200     74 31 BF FD | 	call	#_push
1a204     44 00 90 FD | 	jmp	#LR__2114
1a208                 | LR__2113
1a208                 | '     print "rnd: "; : printerror(40) 
1a208     00 12 06 F6 | 	mov	arg01, #0
1a20c     30 1A B1 FD | 	call	#__system___getiolock_0602
1a210     FD 12 02 F6 | 	mov	arg01, result1
1a214     00 BD B0 FD | 	call	#__system___lockmem
1a218     B2 01 00 FF 
1a21c     2F 15 06 F6 | 	mov	arg02, ##@LR__5924
1a220     00 12 06 F6 | 	mov	arg01, #0
1a224     00 16 06 F6 | 	mov	arg03, #0
1a228     E0 C9 B0 FD | 	call	#__system___basic_print_string
1a22c     00 12 06 F6 | 	mov	arg01, #0
1a230     0C 1A B1 FD | 	call	#__system___getiolock_0602
1a234     FD 00 68 FC | 	wrlong	#0, result1
1a238     28 12 06 F6 | 	mov	arg01, #40
1a23c     00 14 06 F6 | 	mov	arg02, #0
1a240     E8 82 B0 FD | 	call	#_printerror
1a244     A7 12 02 F6 | 	mov	arg01, fp
1a248     2C 31 BF FD | 	call	#_push
1a24c                 | LR__2114
1a24c                 | LR__2115
1a24c                 | LR__2116
1a24c                 | LR__2117
1a24c     A7 F0 03 F6 | 	mov	ptra, fp
1a250     B2 00 A0 FD | 	call	#popregs_
1a254                 | _do_rnd_ret
1a254     2D 00 64 FD | 	ret
1a258                 | 
1a258                 | ' 
1a258                 | ' '-------------------- round
1a258                 | ' 
1a258                 | ' sub do_round
1a258                 | _do_round
1a258     00 4A 05 F6 | 	mov	COUNT_, #0
1a25c     A8 00 A0 FD | 	call	#pushregs_
1a260     0C F0 07 F1 | 	add	ptra, #12
1a264     78 30 BF FD | 	call	#_pop
1a268     A7 FA 61 FC | 	wrlong	result1, fp
1a26c     04 4E 05 F1 | 	add	fp, #4
1a270     A7 FC 61 FC | 	wrlong	result2, fp
1a274     04 4E 05 F1 | 	add	fp, #4
1a278     A7 FE 61 FC | 	wrlong	result3, fp
1a27c     08 4E 85 F1 | 	sub	fp, #8
1a280     A7 12 02 F6 | 	mov	arg01, fp
1a284     3C 32 BF FD | 	call	#_converttoint
1a288     A7 FA 61 FC | 	wrlong	result1, fp
1a28c     08 4E 05 F1 | 	add	fp, #8
1a290     A7 38 68 FC | 	wrlong	#28, fp
1a294     08 4E 85 F1 | 	sub	fp, #8
1a298     A7 12 02 F6 | 	mov	arg01, fp
1a29c     D8 30 BF FD | 	call	#_push
1a2a0     A7 F0 03 F6 | 	mov	ptra, fp
1a2a4     B2 00 A0 FD | 	call	#popregs_
1a2a8                 | _do_round_ret
1a2a8     2D 00 64 FD | 	ret
1a2ac                 | 
1a2ac                 | ' 
1a2ac                 | ' '-------------------- rqpin
1a2ac                 | ' 
1a2ac                 | ' sub do_rqpin
1a2ac                 | _do_rqpin
1a2ac     00 4A 05 F6 | 	mov	COUNT_, #0
1a2b0     A8 00 A0 FD | 	call	#pushregs_
1a2b4     0C F0 07 F1 | 	add	ptra, #12
1a2b8     24 30 BF FD | 	call	#_pop
1a2bc     A7 FA 61 FC | 	wrlong	result1, fp
1a2c0     04 4E 05 F1 | 	add	fp, #4
1a2c4     A7 FC 61 FC | 	wrlong	result2, fp
1a2c8     04 4E 05 F1 | 	add	fp, #4
1a2cc     A7 FE 61 FC | 	wrlong	result3, fp
1a2d0     08 4E 85 F1 | 	sub	fp, #8
1a2d4     A7 12 02 F6 | 	mov	arg01, fp
1a2d8     E8 31 BF FD | 	call	#_converttoint
1a2dc     FD 12 02 F6 | 	mov	arg01, result1
1a2e0     00 FA 05 F6 | 	mov	result1, #0
1a2e4     09 FB 81 FA | 	rqpin	result1, arg01
1a2e8     52 00 00 FF 
1a2ec     10 E5 05 F1 | 	add	objptr, ##42256
1a2f0     F2 FA 61 FC | 	wrlong	result1, objptr
1a2f4     52 00 00 FF 
1a2f8     10 E5 85 F1 | 	sub	objptr, ##42256
1a2fc     08 4E 05 F1 | 	add	fp, #8
1a300     A7 3A 68 FC | 	wrlong	#29, fp
1a304     08 4E 85 F1 | 	sub	fp, #8
1a308     A7 08 68 FC | 	wrlong	#4, fp
1a30c     A7 12 02 F6 | 	mov	arg01, fp
1a310     64 30 BF FD | 	call	#_push
1a314     A7 F0 03 F6 | 	mov	ptra, fp
1a318     B2 00 A0 FD | 	call	#popregs_
1a31c                 | _do_rqpin_ret
1a31c     2D 00 64 FD | 	ret
1a320                 | 
1a320                 | ' 
1a320                 | ' ' ------------------ run
1a320                 | ' 
1a320                 | ' sub do_run
1a320                 | _do_run
1a320     04 4A 05 F6 | 	mov	COUNT_, #4
1a324     A8 00 A0 FD | 	call	#pushregs_
1a328     4A 00 00 FF 
1a32c     80 E4 05 F1 | 	add	objptr, ##38016
1a330     F2 26 02 FB | 	rdlong	local01, objptr
1a334     06 00 00 FF 
1a338     38 E4 05 F1 | 	add	objptr, ##3128
1a33c     F2 28 02 FB | 	rdlong	local02, objptr
1a340     04 E4 05 F1 | 	add	objptr, #4
1a344     F2 2A 02 FB | 	rdlong	local03, objptr
1a348     13 19 02 F6 | 	mov	arg04, local01
1a34c     0C 17 02 F6 | 	mov	arg03, arg04
1a350     01 16 66 F0 | 	shl	arg03, #1
1a354     0C 17 02 F1 | 	add	arg03, arg04
1a358     02 16 66 F0 | 	shl	arg03, #2
1a35c     09 00 00 FF 
1a360     40 E4 85 F1 | 	sub	objptr, ##4672
1a364     F2 16 02 F1 | 	add	arg03, objptr
1a368     0B 15 02 FB | 	rdlong	arg02, arg03
1a36c                 | ' 
1a36c                 | ' r_lineptr_e=lineptr_e
1a36c                 | ' r_runptr=runptr
1a36c                 | ' r_runptr2=runptr2
1a36c                 | ' 
1a36c                 | ' numpar=compiledline(lineptr_e).result.uresult
1a36c                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
1a36c     01 14 0E F2 | 	cmp	arg02, #1 wz
1a370     47 00 00 FF 
1a374     7C E4 85 F1 | 	sub	objptr, ##36476
1a378     00 12 06 A6 |  if_e	mov	arg01, #0
1a37c     5C A1 BF AD |  if_e	call	#_do_load
1a380     4A 00 00 FF 
1a384     88 E4 05 F1 | 	add	objptr, ##38024
1a388     F2 18 02 FB | 	rdlong	arg04, objptr
1a38c     06 00 00 FF 
1a390     30 E4 05 F1 | 	add	objptr, ##3120
1a394     F2 18 62 FC | 	wrlong	arg04, objptr
1a398     04 E4 05 F1 | 	add	objptr, #4
1a39c     F2 00 68 FC | 	wrlong	#0, objptr
1a3a0     04 E4 05 F1 | 	add	objptr, #4
1a3a4     FF FF FF FF 
1a3a8     F2 FE 6B FC | 	wrlong	##-1, objptr
1a3ac     06 00 00 FF 
1a3b0     38 E4 85 F1 | 	sub	objptr, ##3128
1a3b4     F2 18 02 FB | 	rdlong	arg04, objptr
1a3b8     06 00 00 FF 
1a3bc     A4 E4 05 F1 | 	add	objptr, ##3236
1a3c0     F2 18 62 FC | 	wrlong	arg04, objptr
1a3c4     B2 01 00 FF 
1a3c8     35 19 06 F6 | 	mov	arg04, ##@LR__5925
1a3cc     01 00 00 FF 
1a3d0     B0 E5 05 F1 | 	add	objptr, ##944
1a3d4     F2 18 62 FC | 	wrlong	arg04, objptr
1a3d8                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
1a3d8                 | ' dataptr=programstart : readline="" ' reset the data pointer
1a3d8                 | ' if inrun>0 then 
1a3d8     01 00 00 FF 
1a3dc     F0 E5 85 F1 | 	sub	objptr, ##1008
1a3e0     F2 18 02 FB | 	rdlong	arg04, objptr
1a3e4     50 00 00 FF 
1a3e8     EC E4 85 F1 | 	sub	objptr, ##41196
1a3ec     01 18 16 F2 | 	cmp	arg04, #1 wc
1a3f0     30 00 90 CD |  if_b	jmp	#LR__2120
1a3f4     50 00 00 FF 
1a3f8     F0 E4 05 F1 | 	add	objptr, ##41200
1a3fc     F2 12 02 F6 | 	mov	arg01, objptr
1a400     38 E4 85 F1 | 	sub	objptr, #56
1a404     F2 14 02 FB | 	rdlong	arg02, objptr
1a408     18 16 06 F6 | 	mov	arg03, #24
1a40c     44 00 00 FF 
1a410     EC E5 85 F1 | 	sub	objptr, ##35308
1a414     78 AE B0 FD | 	call	#_psram_spin2_read1
1a418     0B 00 00 FF 
1a41c     CC E4 85 F1 | 	sub	objptr, ##5836
1a420                 | '   psram.read1(varptr(runheader),runptr,24)  
1a420                 | '   return
1a420     0C 03 90 FD | 	jmp	#LR__2127
1a424                 | LR__2120
1a424     50 00 00 FF 
1a428     EC E4 05 F1 | 	add	objptr, ##41196
1a42c     F2 02 68 FC | 	wrlong	#1, objptr
1a430     04 E4 05 F1 | 	add	objptr, #4
1a434     F2 12 02 F6 | 	mov	arg01, objptr
1a438     38 E4 85 F1 | 	sub	objptr, #56
1a43c     F2 14 02 FB | 	rdlong	arg02, objptr
1a440     18 16 06 F6 | 	mov	arg03, #24
1a444     44 00 00 FF 
1a448     EC E5 85 F1 | 	sub	objptr, ##35308
1a44c     40 AE B0 FD | 	call	#_psram_spin2_read1
1a450                 | ' inrun=1
1a450                 | ' psram.read1(varptr(runheader),runptr,24) 
1a450                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
1a450     45 00 00 FF 
1a454     24 E4 05 F1 | 	add	objptr, ##35364
1a458     F2 2C 02 FB | 	rdlong	local04, objptr
1a45c     50 00 00 FF 
1a460     F0 E4 85 F1 | 	sub	objptr, ##41200
1a464     FF FF 7F FF 
1a468     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
1a46c     50 00 00 AF 
1a470     EC E4 05 A1 |  if_e	add	objptr, ##41196
1a474     F2 00 68 AC |  if_e	wrlong	#0, objptr
1a478     50 00 00 AF 
1a47c     EC E4 85 A1 |  if_e	sub	objptr, ##41196
1a480     AC 02 90 AD |  if_e	jmp	#LR__2127
1a484                 | ' do 
1a484                 | LR__2121
1a484                 | '   if runptr<>oldrunptr then
1a484     50 00 00 FF 
1a488     B8 E4 05 F1 | 	add	objptr, ##41144
1a48c     F2 2C 02 FB | 	rdlong	local04, objptr
1a490     08 E4 05 F1 | 	add	objptr, #8
1a494     F2 18 02 FB | 	rdlong	arg04, objptr
1a498     50 00 00 FF 
1a49c     C0 E4 85 F1 | 	sub	objptr, ##41152
1a4a0     0C 2D 0A F2 | 	cmp	local04, arg04 wz
1a4a4     CC 00 90 AD |  if_e	jmp	#LR__2122
1a4a8     50 00 00 FF 
1a4ac     F0 E4 05 F1 | 	add	objptr, ##41200
1a4b0     F2 12 02 F6 | 	mov	arg01, objptr
1a4b4     38 E4 85 F1 | 	sub	objptr, #56
1a4b8     F2 14 02 FB | 	rdlong	arg02, objptr
1a4bc     18 16 06 F6 | 	mov	arg03, #24
1a4c0     44 00 00 FF 
1a4c4     EC E5 85 F1 | 	sub	objptr, ##35308
1a4c8     C4 AD B0 FD | 	call	#_psram_spin2_read1
1a4cc     3B 00 00 FF 
1a4d0     B0 E5 05 F1 | 	add	objptr, ##30640
1a4d4     F2 12 02 F6 | 	mov	arg01, objptr
1a4d8     09 00 00 FF 
1a4dc     3C E4 05 F1 | 	add	objptr, ##4668
1a4e0     F2 14 02 FB | 	rdlong	arg02, objptr
1a4e4     0B 00 00 FF 
1a4e8     54 E4 85 F1 | 	sub	objptr, ##5716
1a4ec     F2 2C 02 FB | 	rdlong	local04, objptr
1a4f0     01 2C 66 F0 | 	shl	local04, #1
1a4f4     16 15 02 F1 | 	add	arg02, local04
1a4f8     0B 00 00 FF 
1a4fc     94 E4 05 F1 | 	add	objptr, ##5780
1a500     F2 16 02 FB | 	rdlong	arg03, objptr
1a504     40 E4 85 F1 | 	sub	objptr, #64
1a508     F2 2C 02 FB | 	rdlong	local04, objptr
1a50c     16 17 82 F1 | 	sub	arg03, local04
1a510     44 00 00 FF 
1a514     EC E5 85 F1 | 	sub	objptr, ##35308
1a518     74 AD B0 FD | 	call	#_psram_spin2_read1
1a51c     45 00 00 FF 
1a520     2C E4 05 F1 | 	add	objptr, ##35372
1a524     F2 2C 02 FB | 	rdlong	local04, objptr
1a528     40 E4 85 F1 | 	sub	objptr, #64
1a52c     F2 14 02 FB | 	rdlong	arg02, objptr
1a530     0A 2D 82 F1 | 	sub	local04, arg02
1a534     0B 00 00 FF 
1a538     54 E4 85 F1 | 	sub	objptr, ##5716
1a53c     F2 14 02 FB | 	rdlong	arg02, objptr
1a540     0A 2D 12 FD | 	qdiv	local04, arg02
1a544     05 00 00 FF 
1a548     18 E4 05 F1 | 	add	objptr, ##2584
1a54c     18 2C 62 FD | 	getqx	local04
1a550     03 2C 86 F1 | 	sub	local04, #3
1a554     F2 2C 62 FC | 	wrlong	local04, objptr
1a558     06 00 00 FF 
1a55c     3C E4 05 F1 | 	add	objptr, ##3132
1a560     F2 2C 02 FB | 	rdlong	local04, objptr
1a564     08 E4 05 F1 | 	add	objptr, #8
1a568     F2 2C 62 FC | 	wrlong	local04, objptr
1a56c     50 00 00 FF 
1a570     C0 E4 85 F1 | 	sub	objptr, ##41152
1a574                 | LR__2122
1a574     50 00 00 FF 
1a578     04 E5 05 F1 | 	add	objptr, ##41220
1a57c     F2 2C 02 FB | 	rdlong	local04, objptr
1a580     4C E4 85 F1 | 	sub	objptr, #76
1a584     F2 2C 62 FC | 	wrlong	local04, objptr
1a588     04 E4 05 F1 | 	add	objptr, #4
1a58c     F2 12 02 FB | 	rdlong	arg01, objptr
1a590     50 00 00 FF 
1a594     BC E4 85 F1 | 	sub	objptr, ##41148
1a598     40 2C BF FD | 	call	#_execute_line
1a59c     50 00 00 FF 
1a5a0     BC E4 05 F1 | 	add	objptr, ##41148
1a5a4     F2 FA 61 FC | 	wrlong	result1, objptr
1a5a8     04 E4 85 F1 | 	sub	objptr, #4
1a5ac     F2 2C 02 FB | 	rdlong	local04, objptr
1a5b0     50 00 00 FF 
1a5b4     B8 E4 85 F1 | 	sub	objptr, ##41144
1a5b8     FF FF 3F FF 
1a5bc     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1a5c0     4C 00 90 AD |  if_e	jmp	#LR__2125
1a5c4     E0 12 06 F6 | 	mov	arg01, #224
1a5c8     54 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1a5cc     00 FA 0D F2 | 	cmp	result1, #0 wz
1a5d0     10 00 90 5D |  if_ne	jmp	#LR__2123
1a5d4     E4 12 06 F6 | 	mov	arg01, #228
1a5d8     44 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1a5dc     00 FA 0D F2 | 	cmp	result1, #0 wz
1a5e0     10 00 90 AD |  if_e	jmp	#LR__2124
1a5e4                 | LR__2123
1a5e4     06 12 06 F6 | 	mov	arg01, #6
1a5e8     34 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1a5ec     00 FA 0D F2 | 	cmp	result1, #0 wz
1a5f0     1C 00 90 5D |  if_ne	jmp	#LR__2125
1a5f4                 | LR__2124
1a5f4     50 00 00 FF 
1a5f8     EC E4 05 F1 | 	add	objptr, ##41196
1a5fc     F2 2C 02 FB | 	rdlong	local04, objptr
1a600     50 00 00 FF 
1a604     EC E4 85 F1 | 	sub	objptr, ##41196
1a608     02 2C 0E F2 | 	cmp	local04, #2 wz
1a60c     74 FE 9F 5D |  if_ne	jmp	#LR__2121
1a610                 | LR__2125
1a610                 | '   ''do whatever kbm.peek_latest_key()=$106 
1a610                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1a610     50 00 00 FF 
1a614     B8 E4 05 F1 | 	add	objptr, ##41144
1a618     F2 2C 02 FB | 	rdlong	local04, objptr
1a61c     50 00 00 FF 
1a620     B8 E4 85 F1 | 	sub	objptr, ##41144
1a624     FF FF 3F FF 
1a628     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1a62c     AC 00 90 AD |  if_e	jmp	#LR__2126
1a630     50 00 00 FF 
1a634     EC E4 05 F1 | 	add	objptr, ##41196
1a638     F2 2C 02 FB | 	rdlong	local04, objptr
1a63c     50 00 00 FF 
1a640     EC E4 85 F1 | 	sub	objptr, ##41196
1a644     01 2C 0E F2 | 	cmp	local04, #1 wz
1a648     90 00 90 5D |  if_ne	jmp	#LR__2126
1a64c                 | '   print: print "Stopped at line ";runheader(0) 
1a64c     00 12 06 F6 | 	mov	arg01, #0
1a650     EC 15 B1 FD | 	call	#__system___getiolock_0602
1a654     FD 12 02 F6 | 	mov	arg01, result1
1a658     BC B8 B0 FD | 	call	#__system___lockmem
1a65c     00 12 06 F6 | 	mov	arg01, #0
1a660     0A 14 06 F6 | 	mov	arg02, #10
1a664     00 16 06 F6 | 	mov	arg03, #0
1a668     48 C5 B0 FD | 	call	#__system___basic_print_char
1a66c     00 12 06 F6 | 	mov	arg01, #0
1a670     CC 15 B1 FD | 	call	#__system___getiolock_0602
1a674     FD 00 68 FC | 	wrlong	#0, result1
1a678     00 12 06 F6 | 	mov	arg01, #0
1a67c     C0 15 B1 FD | 	call	#__system___getiolock_0602
1a680     FD 12 02 F6 | 	mov	arg01, result1
1a684     90 B8 B0 FD | 	call	#__system___lockmem
1a688     B2 01 00 FF 
1a68c     36 15 06 F6 | 	mov	arg02, ##@LR__5926
1a690     00 12 06 F6 | 	mov	arg01, #0
1a694     00 16 06 F6 | 	mov	arg03, #0
1a698     70 C5 B0 FD | 	call	#__system___basic_print_string
1a69c     50 00 00 FF 
1a6a0     F0 E4 05 F1 | 	add	objptr, ##41200
1a6a4     F2 14 02 FB | 	rdlong	arg02, objptr
1a6a8     50 00 00 FF 
1a6ac     F0 E4 85 F1 | 	sub	objptr, ##41200
1a6b0     00 12 06 F6 | 	mov	arg01, #0
1a6b4     00 16 06 F6 | 	mov	arg03, #0
1a6b8     0A 18 06 F6 | 	mov	arg04, #10
1a6bc     D0 C5 B0 FD | 	call	#__system___basic_print_unsigned
1a6c0     00 12 06 F6 | 	mov	arg01, #0
1a6c4     0A 14 06 F6 | 	mov	arg02, #10
1a6c8     00 16 06 F6 | 	mov	arg03, #0
1a6cc     E4 C4 B0 FD | 	call	#__system___basic_print_char
1a6d0     00 12 06 F6 | 	mov	arg01, #0
1a6d4     68 15 B1 FD | 	call	#__system___getiolock_0602
1a6d8     FD 00 68 FC | 	wrlong	#0, result1
1a6dc                 | LR__2126
1a6dc     50 00 00 FF 
1a6e0     EC E4 05 F1 | 	add	objptr, ##41196
1a6e4     F2 00 68 FC | 	wrlong	#0, objptr
1a6e8     06 00 00 FF 
1a6ec     6C E4 85 F1 | 	sub	objptr, ##3180
1a6f0     F2 26 62 FC | 	wrlong	local01, objptr
1a6f4     06 00 00 FF 
1a6f8     38 E4 05 F1 | 	add	objptr, ##3128
1a6fc     F2 28 62 FC | 	wrlong	local02, objptr
1a700     04 E4 05 F1 | 	add	objptr, #4
1a704     F2 2A 62 FC | 	wrlong	local03, objptr
1a708     50 00 00 FF 
1a70c     BC E4 85 F1 | 	sub	objptr, ##41148
1a710     11 12 06 F6 | 	mov	arg01, #17
1a714     08 14 06 F6 | 	mov	arg02, #8
1a718     10 16 06 F6 | 	mov	arg03, #16
1a71c     54 8E B0 FD | 	call	#_hg010b_spin2_setspritesize
1a720     10 12 06 F6 | 	mov	arg01, #16
1a724     20 14 06 F6 | 	mov	arg02, #32
1a728     20 16 06 F6 | 	mov	arg03, #32
1a72c     44 8E B0 FD | 	call	#_hg010b_spin2_setspritesize
1a730                 | LR__2127
1a730     A7 F0 03 F6 | 	mov	ptra, fp
1a734     B2 00 A0 FD | 	call	#popregs_
1a738                 | _do_run_ret
1a738     2D 00 64 FD | 	ret
1a73c                 | 
1a73c                 | ' 
1a73c                 | ' ' ------------------ save
1a73c                 | ' 
1a73c                 | ' sub do_save                        
1a73c                 | _do_save
1a73c     04 4A 05 F6 | 	mov	COUNT_, #4
1a740     A8 00 A0 FD | 	call	#pushregs_
1a744     B8 F0 07 F1 | 	add	ptra, #184
1a748     4A 00 00 FF 
1a74c     80 E4 05 F1 | 	add	objptr, ##38016
1a750     F2 26 02 FB | 	rdlong	local01, objptr
1a754     13 29 02 F6 | 	mov	local02, local01
1a758     01 28 66 F0 | 	shl	local02, #1
1a75c     13 29 02 F1 | 	add	local02, local01
1a760     02 28 66 F0 | 	shl	local02, #2
1a764     03 00 00 FF 
1a768     04 E4 85 F1 | 	sub	objptr, ##1540
1a76c     F2 28 02 F1 | 	add	local02, objptr
1a770     14 2B 02 FB | 	rdlong	local03, local02
1a774     10 4E 05 F1 | 	add	fp, #16
1a778     A7 2A 62 FC | 	wrlong	local03, fp
1a77c                 | ' 
1a77c                 | ' numpar=compiledline(lineptr_e).result.uresult
1a77c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1a77c     10 4E 85 F1 | 	sub	fp, #16
1a780     01 2A 56 F2 | 	cmps	local03, #1 wc
1a784     47 00 00 FF 
1a788     7C E4 85 F1 | 	sub	objptr, ##36476
1a78c     20 00 90 CD |  if_b	jmp	#LR__2130
1a790     4C 2B BF FD | 	call	#_pop
1a794     A7 FA 61 FC | 	wrlong	result1, fp
1a798     04 4E 05 F1 | 	add	fp, #4
1a79c     A7 FC 61 FC | 	wrlong	result2, fp
1a7a0     04 4E 05 F1 | 	add	fp, #4
1a7a4     A7 FE 61 FC | 	wrlong	result3, fp
1a7a8     08 4E 85 F1 | 	sub	fp, #8
1a7ac     24 00 90 FD | 	jmp	#LR__2131
1a7b0                 | LR__2130
1a7b0     52 00 00 FF 
1a7b4     C4 E4 05 F1 | 	add	objptr, ##42180
1a7b8     F2 2A 02 FB | 	rdlong	local03, objptr
1a7bc     52 00 00 FF 
1a7c0     C4 E4 85 F1 | 	sub	objptr, ##42180
1a7c4     A7 2A 62 FC | 	wrlong	local03, fp
1a7c8     08 4E 05 F1 | 	add	fp, #8
1a7cc     A7 3E 68 FC | 	wrlong	#31, fp
1a7d0     08 4E 85 F1 | 	sub	fp, #8
1a7d4                 | LR__2131
1a7d4                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1a7d4     4A 00 00 FF 
1a7d8     88 E4 05 F1 | 	add	objptr, ##38024
1a7dc     F2 12 02 FB | 	rdlong	arg01, objptr
1a7e0     4A 00 00 FF 
1a7e4     88 E4 85 F1 | 	sub	objptr, ##38024
1a7e8     10 80 B0 FD | 	call	#_pslpeek
1a7ec     FF FF 7F FF 
1a7f0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1a7f4     10 00 90 5D |  if_ne	jmp	#LR__2132
1a7f8     1B 12 06 F6 | 	mov	arg01, #27
1a7fc     00 14 06 F6 | 	mov	arg02, #0
1a800     28 7D B0 FD | 	call	#_printerror
1a804     CC 02 90 FD | 	jmp	#LR__2138
1a808                 | LR__2132
1a808                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1a808     08 4E 05 F1 | 	add	fp, #8
1a80c     A7 2A 02 FB | 	rdlong	local03, fp
1a810     08 4E 85 F1 | 	sub	fp, #8
1a814     2B 2A 0E F2 | 	cmp	local03, #43 wz
1a818     18 00 90 5D |  if_ne	jmp	#LR__2133
1a81c     A7 12 02 FB | 	rdlong	arg01, fp
1a820     34 2C BF FD | 	call	#_convertstring
1a824     A7 FA 61 FC | 	wrlong	result1, fp
1a828     08 4E 05 F1 | 	add	fp, #8
1a82c     A7 3E 68 FC | 	wrlong	#31, fp
1a830     08 4E 85 F1 | 	sub	fp, #8
1a834                 | LR__2133
1a834                 | ' if t1.result_type=result_string then
1a834     08 4E 05 F1 | 	add	fp, #8
1a838     A7 2A 02 FB | 	rdlong	local03, fp
1a83c     08 4E 85 F1 | 	sub	fp, #8
1a840     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a844     8C 02 90 5D |  if_ne	jmp	#LR__2137
1a848                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1a848     A7 12 02 FB | 	rdlong	arg01, fp
1a84c     B2 01 00 FF 
1a850     47 15 06 F6 | 	mov	arg02, ##@LR__5927
1a854     E8 B6 B0 FD | 	call	#__system___string_cmp
1a858     00 FA 0D F2 | 	cmp	result1, #0 wz
1a85c     52 00 00 AF 
1a860     C4 E4 05 A1 |  if_e	add	objptr, ##42180
1a864     F2 2A 02 AB |  if_e	rdlong	local03, objptr
1a868     A7 2A 62 AC |  if_e	wrlong	local03, fp
1a86c     52 00 00 AF 
1a870     C4 E4 85 A1 |  if_e	sub	objptr, ##42180
1a874     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1a878     52 00 00 5F 
1a87c     C4 E4 05 51 |  if_ne	add	objptr, ##42180
1a880     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
1a884     52 00 00 5F 
1a888     C4 E4 85 51 |  if_ne	sub	objptr, ##42180
1a88c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1a88c     09 12 06 F6 | 	mov	arg01, #9
1a890     DC 09 B1 FD | 	call	#__system__close
1a894     09 2A 06 F6 | 	mov	local03, #9
1a898     4A 00 00 FF 
1a89c     94 E4 05 F1 | 	add	objptr, ##38036
1a8a0     F2 12 02 FB | 	rdlong	arg01, objptr
1a8a4     4A 00 00 FF 
1a8a8     94 E4 85 F1 | 	sub	objptr, ##38036
1a8ac     B2 01 00 FF 
1a8b0     48 15 06 F6 | 	mov	arg02, ##@LR__5928
1a8b4     BC B6 B0 FD | 	call	#__system___string_concat
1a8b8     FD 12 02 F6 | 	mov	arg01, result1
1a8bc     A7 14 02 FB | 	rdlong	arg02, fp
1a8c0     B0 B6 B0 FD | 	call	#__system___string_concat
1a8c4     FD 14 02 F6 | 	mov	arg02, result1
1a8c8     15 13 02 F6 | 	mov	arg01, local03
1a8cc     0D 16 06 F6 | 	mov	arg03, #13
1a8d0     48 C2 B0 FD | 	call	#__system___basic_open_string
1a8d4     4A 00 00 FF 
1a8d8     88 E4 05 F1 | 	add	objptr, ##38024
1a8dc     F2 2A 02 FB | 	rdlong	local03, objptr
1a8e0     4A 00 00 FF 
1a8e4     88 E4 85 F1 | 	sub	objptr, ##38024
1a8e8     B0 4E 05 F1 | 	add	fp, #176
1a8ec     A7 2A 62 FC | 	wrlong	local03, fp
1a8f0     B0 4E 85 F1 | 	sub	fp, #176
1a8f4                 | '   saveptr=programstart
1a8f4                 | '   do
1a8f4                 | LR__2134
1a8f4     14 4E 05 F1 | 	add	fp, #20
1a8f8     A7 12 02 F6 | 	mov	arg01, fp
1a8fc     9C 4E 05 F1 | 	add	fp, #156
1a900     A7 14 02 FB | 	rdlong	arg02, fp
1a904     B0 4E 85 F1 | 	sub	fp, #176
1a908     18 16 06 F6 | 	mov	arg03, #24
1a90c     0B 00 00 FF 
1a910     CC E4 05 F1 | 	add	objptr, ##5836
1a914     78 A9 B0 FD | 	call	#_psram_spin2_read1
1a918     2C 4E 05 F1 | 	add	fp, #44
1a91c     A7 12 02 F6 | 	mov	arg01, fp
1a920     10 4E 85 F1 | 	sub	fp, #16
1a924     A7 14 02 FB | 	rdlong	arg02, fp
1a928     04 4E 05 F1 | 	add	fp, #4
1a92c     A7 16 02 FB | 	rdlong	arg03, fp
1a930     20 4E 85 F1 | 	sub	fp, #32
1a934     58 A9 B0 FD | 	call	#_psram_spin2_read1
1a938     0B 00 00 FF 
1a93c     CC E4 85 F1 | 	sub	objptr, ##5836
1a940     B2 01 00 FF 
1a944     4A 2B 06 F6 | 	mov	local03, ##@LR__5929
1a948     AC 4E 05 F1 | 	add	fp, #172
1a94c     A7 2A 62 FC | 	wrlong	local03, fp
1a950                 | '     psram.read1(varptr(header(0)),saveptr,24)
1a950                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1a950                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1a950     A0 4E 85 F1 | 	sub	fp, #160
1a954     A7 02 68 FC | 	wrlong	#1, fp
1a958     14 4E 05 F1 | 	add	fp, #20
1a95c     A7 2C 02 FB | 	rdlong	local04, fp
1a960     20 4E 85 F1 | 	sub	fp, #32
1a964     01 2C 06 F1 | 	add	local04, #1
1a968                 | LR__2135
1a968     0C 4E 05 F1 | 	add	fp, #12
1a96c     A7 2A 02 FB | 	rdlong	local03, fp
1a970     0C 4E 85 F1 | 	sub	fp, #12
1a974     16 2B 52 F2 | 	cmps	local03, local04 wc
1a978     54 00 90 3D |  if_ae	jmp	#LR__2136
1a97c     AC 4E 05 F1 | 	add	fp, #172
1a980     A7 26 02 FB | 	rdlong	local01, fp
1a984     A0 4E 85 F1 | 	sub	fp, #160
1a988     A7 2A 02 FB | 	rdlong	local03, fp
1a98c     01 2A 86 F1 | 	sub	local03, #1
1a990     20 4E 05 F1 | 	add	fp, #32
1a994     A7 2A 02 F1 | 	add	local03, fp
1a998     15 13 C2 FA | 	rdbyte	arg01, local03
1a99c     2C 4E 85 F1 | 	sub	fp, #44
1a9a0     B4 D7 B0 FD | 	call	#__system__Chr_S
1a9a4     FD 14 02 F6 | 	mov	arg02, result1
1a9a8     13 13 02 F6 | 	mov	arg01, local01
1a9ac     C4 B5 B0 FD | 	call	#__system___string_concat
1a9b0     AC 4E 05 F1 | 	add	fp, #172
1a9b4     A7 FA 61 FC | 	wrlong	result1, fp
1a9b8     A0 4E 85 F1 | 	sub	fp, #160
1a9bc     A7 2A 02 FB | 	rdlong	local03, fp
1a9c0     01 2A 06 F1 | 	add	local03, #1
1a9c4     A7 2A 62 FC | 	wrlong	local03, fp
1a9c8     0C 4E 85 F1 | 	sub	fp, #12
1a9cc     98 FF 9F FD | 	jmp	#LR__2135
1a9d0                 | LR__2136
1a9d0                 | '     print #9, saveline$
1a9d0     09 12 06 F6 | 	mov	arg01, #9
1a9d4     68 12 B1 FD | 	call	#__system___getiolock_0602
1a9d8     FD 12 02 F6 | 	mov	arg01, result1
1a9dc     38 B5 B0 FD | 	call	#__system___lockmem
1a9e0     AC 4E 05 F1 | 	add	fp, #172
1a9e4     A7 14 02 FB | 	rdlong	arg02, fp
1a9e8     AC 4E 85 F1 | 	sub	fp, #172
1a9ec     09 12 06 F6 | 	mov	arg01, #9
1a9f0     00 16 06 F6 | 	mov	arg03, #0
1a9f4     14 C2 B0 FD | 	call	#__system___basic_print_string
1a9f8     09 12 06 F6 | 	mov	arg01, #9
1a9fc     0A 14 06 F6 | 	mov	arg02, #10
1aa00     00 16 06 F6 | 	mov	arg03, #0
1aa04     AC C1 B0 FD | 	call	#__system___basic_print_char
1aa08     09 12 06 F6 | 	mov	arg01, #9
1aa0c     30 12 B1 FD | 	call	#__system___getiolock_0602
1aa10     FD 00 68 FC | 	wrlong	#0, result1
1aa14     28 4E 05 F1 | 	add	fp, #40
1aa18     A7 2A 02 FB | 	rdlong	local03, fp
1aa1c     88 4E 05 F1 | 	add	fp, #136
1aa20     A7 2A 62 FC | 	wrlong	local03, fp
1aa24     88 4E 85 F1 | 	sub	fp, #136
1aa28     A7 2A 02 FB | 	rdlong	local03, fp
1aa2c     28 4E 85 F1 | 	sub	fp, #40
1aa30     FF FF 3F FF 
1aa34     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
1aa38     B8 FE 9F 5D |  if_ne	jmp	#LR__2134
1aa3c                 | '   close #9  
1aa3c     09 12 06 F6 | 	mov	arg01, #9
1aa40     2C 08 B1 FD | 	call	#__system__close
1aa44                 | '   print "Saved as ";currentdir$+"/"+loadname
1aa44     00 12 06 F6 | 	mov	arg01, #0
1aa48     F4 11 B1 FD | 	call	#__system___getiolock_0602
1aa4c     FD 12 02 F6 | 	mov	arg01, result1
1aa50     C4 B4 B0 FD | 	call	#__system___lockmem
1aa54     B2 01 00 FF 
1aa58     4B 15 06 F6 | 	mov	arg02, ##@LR__5930
1aa5c     00 12 06 F6 | 	mov	arg01, #0
1aa60     00 16 06 F6 | 	mov	arg03, #0
1aa64     A4 C1 B0 FD | 	call	#__system___basic_print_string
1aa68     00 28 06 F6 | 	mov	local02, #0
1aa6c     4A 00 00 FF 
1aa70     94 E4 05 F1 | 	add	objptr, ##38036
1aa74     F2 12 02 FB | 	rdlong	arg01, objptr
1aa78     4A 00 00 FF 
1aa7c     94 E4 85 F1 | 	sub	objptr, ##38036
1aa80     B2 01 00 FF 
1aa84     55 15 06 F6 | 	mov	arg02, ##@LR__5931
1aa88     E8 B4 B0 FD | 	call	#__system___string_concat
1aa8c     FD 12 02 F6 | 	mov	arg01, result1
1aa90     52 00 00 FF 
1aa94     C4 E4 05 F1 | 	add	objptr, ##42180
1aa98     F2 14 02 FB | 	rdlong	arg02, objptr
1aa9c     52 00 00 FF 
1aaa0     C4 E4 85 F1 | 	sub	objptr, ##42180
1aaa4     CC B4 B0 FD | 	call	#__system___string_concat
1aaa8     FD 14 02 F6 | 	mov	arg02, result1
1aaac     14 13 02 F6 | 	mov	arg01, local02
1aab0     00 16 06 F6 | 	mov	arg03, #0
1aab4     54 C1 B0 FD | 	call	#__system___basic_print_string
1aab8     00 12 06 F6 | 	mov	arg01, #0
1aabc     0A 14 06 F6 | 	mov	arg02, #10
1aac0     00 16 06 F6 | 	mov	arg03, #0
1aac4     EC C0 B0 FD | 	call	#__system___basic_print_char
1aac8     00 12 06 F6 | 	mov	arg01, #0
1aacc     70 11 B1 FD | 	call	#__system___getiolock_0602
1aad0     FD 00 68 FC | 	wrlong	#0, result1
1aad4                 | LR__2137
1aad4                 | LR__2138
1aad4     A7 F0 03 F6 | 	mov	ptra, fp
1aad8     B2 00 A0 FD | 	call	#popregs_
1aadc                 | _do_save_ret
1aadc     2D 00 64 FD | 	ret
1aae0                 | 
1aae0                 | ' 
1aae0                 | ' ' ------------------ setdelay
1aae0                 | ' 
1aae0                 | ' sub do_setdelay
1aae0                 | _do_setdelay
1aae0     02 4A 05 F6 | 	mov	COUNT_, #2
1aae4     A8 00 A0 FD | 	call	#pushregs_
1aae8     18 F0 07 F1 | 	add	ptra, #24
1aaec     F0 27 BF FD | 	call	#_pop
1aaf0     FD 12 02 F6 | 	mov	arg01, result1
1aaf4     FE 26 02 F6 | 	mov	local01, result2
1aaf8     FF 28 02 F6 | 	mov	local02, result3
1aafc     A7 12 62 FC | 	wrlong	arg01, fp
1ab00     04 4E 05 F1 | 	add	fp, #4
1ab04     A7 26 62 FC | 	wrlong	local01, fp
1ab08     04 4E 05 F1 | 	add	fp, #4
1ab0c     A7 28 62 FC | 	wrlong	local02, fp
1ab10     08 4E 85 F1 | 	sub	fp, #8
1ab14     C8 27 BF FD | 	call	#_pop
1ab18     FD 28 02 F6 | 	mov	local02, result1
1ab1c     0C 4E 05 F1 | 	add	fp, #12
1ab20     A7 28 62 FC | 	wrlong	local02, fp
1ab24     04 4E 05 F1 | 	add	fp, #4
1ab28     A7 FC 61 FC | 	wrlong	result2, fp
1ab2c     04 4E 05 F1 | 	add	fp, #4
1ab30     A7 FE 61 FC | 	wrlong	result3, fp
1ab34     08 4E 85 F1 | 	sub	fp, #8
1ab38     A7 12 02 F6 | 	mov	arg01, fp
1ab3c     0C 4E 85 F1 | 	sub	fp, #12
1ab40     80 29 BF FD | 	call	#_converttoint
1ab44     FD 28 02 F6 | 	mov	local02, result1
1ab48     14 27 02 F6 | 	mov	local01, local02
1ab4c     01 26 66 F0 | 	shl	local01, #1
1ab50     14 27 02 F1 | 	add	local01, local02
1ab54     03 26 66 F0 | 	shl	local01, #3
1ab58     14 00 00 FF 
1ab5c     38 E5 05 F1 | 	add	objptr, ##10552
1ab60     F2 26 02 F1 | 	add	local01, objptr
1ab64     A7 12 02 F6 | 	mov	arg01, fp
1ab68     14 00 00 FF 
1ab6c     38 E5 85 F1 | 	sub	objptr, ##10552
1ab70     50 29 BF FD | 	call	#_converttoint
1ab74     06 26 06 F1 | 	add	local01, #6
1ab78     13 FB 51 FC | 	wrword	result1, local01
1ab7c     A7 F0 03 F6 | 	mov	ptra, fp
1ab80     B2 00 A0 FD | 	call	#popregs_
1ab84                 | _do_setdelay_ret
1ab84     2D 00 64 FD | 	ret
1ab88                 | 
1ab88                 | ' 
1ab88                 | ' ' ------------------ setenv
1ab88                 | ' 
1ab88                 | ' sub do_setenv
1ab88                 | _do_setenv
1ab88     02 4A 05 F6 | 	mov	COUNT_, #2
1ab8c     A8 00 A0 FD | 	call	#pushregs_
1ab90     18 F0 07 F1 | 	add	ptra, #24
1ab94     48 27 BF FD | 	call	#_pop
1ab98     FD 12 02 F6 | 	mov	arg01, result1
1ab9c     FE 26 02 F6 | 	mov	local01, result2
1aba0     FF 28 02 F6 | 	mov	local02, result3
1aba4     A7 12 62 FC | 	wrlong	arg01, fp
1aba8     04 4E 05 F1 | 	add	fp, #4
1abac     A7 26 62 FC | 	wrlong	local01, fp
1abb0     04 4E 05 F1 | 	add	fp, #4
1abb4     A7 28 62 FC | 	wrlong	local02, fp
1abb8     08 4E 85 F1 | 	sub	fp, #8
1abbc     20 27 BF FD | 	call	#_pop
1abc0     FD 28 02 F6 | 	mov	local02, result1
1abc4     0C 4E 05 F1 | 	add	fp, #12
1abc8     A7 28 62 FC | 	wrlong	local02, fp
1abcc     04 4E 05 F1 | 	add	fp, #4
1abd0     A7 FC 61 FC | 	wrlong	result2, fp
1abd4     04 4E 05 F1 | 	add	fp, #4
1abd8     A7 FE 61 FC | 	wrlong	result3, fp
1abdc     08 4E 85 F1 | 	sub	fp, #8
1abe0     A7 12 02 F6 | 	mov	arg01, fp
1abe4     0C 4E 85 F1 | 	sub	fp, #12
1abe8     D8 28 BF FD | 	call	#_converttoint
1abec     FD 28 02 F6 | 	mov	local02, result1
1abf0     14 27 02 F6 | 	mov	local01, local02
1abf4     01 26 66 F0 | 	shl	local01, #1
1abf8     14 27 02 F1 | 	add	local01, local02
1abfc     03 26 66 F0 | 	shl	local01, #3
1ac00     14 00 00 FF 
1ac04     38 E5 05 F1 | 	add	objptr, ##10552
1ac08     F2 26 02 F1 | 	add	local01, objptr
1ac0c     A7 12 02 F6 | 	mov	arg01, fp
1ac10     14 00 00 FF 
1ac14     38 E5 85 F1 | 	sub	objptr, ##10552
1ac18     A8 28 BF FD | 	call	#_converttoint
1ac1c     05 26 06 F1 | 	add	local01, #5
1ac20     13 FB 41 FC | 	wrbyte	result1, local01
1ac24     A7 F0 03 F6 | 	mov	ptra, fp
1ac28     B2 00 A0 FD | 	call	#popregs_
1ac2c                 | _do_setenv_ret
1ac2c     2D 00 64 FD | 	ret
1ac30                 | 
1ac30                 | ' 
1ac30                 | ' ' ------------------ setlen
1ac30                 | ' 
1ac30                 | ' sub do_setlen
1ac30                 | _do_setlen
1ac30     02 4A 05 F6 | 	mov	COUNT_, #2
1ac34     A8 00 A0 FD | 	call	#pushregs_
1ac38     18 F0 07 F1 | 	add	ptra, #24
1ac3c     A0 26 BF FD | 	call	#_pop
1ac40     FD 12 02 F6 | 	mov	arg01, result1
1ac44     FE 26 02 F6 | 	mov	local01, result2
1ac48     FF 28 02 F6 | 	mov	local02, result3
1ac4c     A7 12 62 FC | 	wrlong	arg01, fp
1ac50     04 4E 05 F1 | 	add	fp, #4
1ac54     A7 26 62 FC | 	wrlong	local01, fp
1ac58     04 4E 05 F1 | 	add	fp, #4
1ac5c     A7 28 62 FC | 	wrlong	local02, fp
1ac60     08 4E 85 F1 | 	sub	fp, #8
1ac64     78 26 BF FD | 	call	#_pop
1ac68     FD 28 02 F6 | 	mov	local02, result1
1ac6c     0C 4E 05 F1 | 	add	fp, #12
1ac70     A7 28 62 FC | 	wrlong	local02, fp
1ac74     04 4E 05 F1 | 	add	fp, #4
1ac78     A7 FC 61 FC | 	wrlong	result2, fp
1ac7c     04 4E 05 F1 | 	add	fp, #4
1ac80     A7 FE 61 FC | 	wrlong	result3, fp
1ac84     08 4E 85 F1 | 	sub	fp, #8
1ac88     A7 12 02 F6 | 	mov	arg01, fp
1ac8c     0C 4E 85 F1 | 	sub	fp, #12
1ac90     30 28 BF FD | 	call	#_converttoint
1ac94     FD 28 02 F6 | 	mov	local02, result1
1ac98     14 27 02 F6 | 	mov	local01, local02
1ac9c     01 26 66 F0 | 	shl	local01, #1
1aca0     14 27 02 F1 | 	add	local01, local02
1aca4     03 26 66 F0 | 	shl	local01, #3
1aca8     14 00 00 FF 
1acac     38 E5 05 F1 | 	add	objptr, ##10552
1acb0     F2 26 02 F1 | 	add	local01, objptr
1acb4     A7 12 02 F6 | 	mov	arg01, fp
1acb8     14 00 00 FF 
1acbc     38 E5 85 F1 | 	sub	objptr, ##10552
1acc0     BC 28 BF FD | 	call	#_converttofloat
1acc4     08 26 06 F1 | 	add	local01, #8
1acc8     13 FB 61 FC | 	wrlong	result1, local01
1accc     A7 F0 03 F6 | 	mov	ptra, fp
1acd0     B2 00 A0 FD | 	call	#popregs_
1acd4                 | _do_setlen_ret
1acd4     2D 00 64 FD | 	ret
1acd8                 | 
1acd8                 | ' 
1acd8                 | ' ' ------------------ setpan
1acd8                 | ' 
1acd8                 | ' sub do_setpan
1acd8                 | _do_setpan
1acd8     02 4A 05 F6 | 	mov	COUNT_, #2
1acdc     A8 00 A0 FD | 	call	#pushregs_
1ace0     18 F0 07 F1 | 	add	ptra, #24
1ace4     F8 25 BF FD | 	call	#_pop
1ace8     FD 12 02 F6 | 	mov	arg01, result1
1acec     FE 26 02 F6 | 	mov	local01, result2
1acf0     FF 28 02 F6 | 	mov	local02, result3
1acf4     A7 12 62 FC | 	wrlong	arg01, fp
1acf8     04 4E 05 F1 | 	add	fp, #4
1acfc     A7 26 62 FC | 	wrlong	local01, fp
1ad00     04 4E 05 F1 | 	add	fp, #4
1ad04     A7 28 62 FC | 	wrlong	local02, fp
1ad08     08 4E 85 F1 | 	sub	fp, #8
1ad0c     D0 25 BF FD | 	call	#_pop
1ad10     FD 28 02 F6 | 	mov	local02, result1
1ad14     0C 4E 05 F1 | 	add	fp, #12
1ad18     A7 28 62 FC | 	wrlong	local02, fp
1ad1c     04 4E 05 F1 | 	add	fp, #4
1ad20     A7 FC 61 FC | 	wrlong	result2, fp
1ad24     04 4E 05 F1 | 	add	fp, #4
1ad28     A7 FE 61 FC | 	wrlong	result3, fp
1ad2c     08 4E 85 F1 | 	sub	fp, #8
1ad30     A7 12 02 F6 | 	mov	arg01, fp
1ad34     0C 4E 85 F1 | 	sub	fp, #12
1ad38     88 27 BF FD | 	call	#_converttoint
1ad3c     FD 28 02 F6 | 	mov	local02, result1
1ad40     14 27 02 F6 | 	mov	local01, local02
1ad44     01 26 66 F0 | 	shl	local01, #1
1ad48     14 27 02 F1 | 	add	local01, local02
1ad4c     03 26 66 F0 | 	shl	local01, #3
1ad50     14 00 00 FF 
1ad54     38 E5 05 F1 | 	add	objptr, ##10552
1ad58     F2 26 02 F1 | 	add	local01, objptr
1ad5c     A7 12 02 F6 | 	mov	arg01, fp
1ad60     14 00 00 FF 
1ad64     38 E5 85 F1 | 	sub	objptr, ##10552
1ad68     14 28 BF FD | 	call	#_converttofloat
1ad6c     10 26 06 F1 | 	add	local01, #16
1ad70     13 FB 61 FC | 	wrlong	result1, local01
1ad74     A7 F0 03 F6 | 	mov	ptra, fp
1ad78     B2 00 A0 FD | 	call	#popregs_
1ad7c                 | _do_setpan_ret
1ad7c     2D 00 64 FD | 	ret
1ad80                 | 
1ad80                 | ' 
1ad80                 | ' ' ------------------ setsustain
1ad80                 | ' 
1ad80                 | ' sub do_setsustain
1ad80                 | _do_setsustain
1ad80     02 4A 05 F6 | 	mov	COUNT_, #2
1ad84     A8 00 A0 FD | 	call	#pushregs_
1ad88     18 F0 07 F1 | 	add	ptra, #24
1ad8c     50 25 BF FD | 	call	#_pop
1ad90     FD 12 02 F6 | 	mov	arg01, result1
1ad94     FE 26 02 F6 | 	mov	local01, result2
1ad98     FF 28 02 F6 | 	mov	local02, result3
1ad9c     A7 12 62 FC | 	wrlong	arg01, fp
1ada0     04 4E 05 F1 | 	add	fp, #4
1ada4     A7 26 62 FC | 	wrlong	local01, fp
1ada8     04 4E 05 F1 | 	add	fp, #4
1adac     A7 28 62 FC | 	wrlong	local02, fp
1adb0     08 4E 85 F1 | 	sub	fp, #8
1adb4     28 25 BF FD | 	call	#_pop
1adb8     FD 28 02 F6 | 	mov	local02, result1
1adbc     0C 4E 05 F1 | 	add	fp, #12
1adc0     A7 28 62 FC | 	wrlong	local02, fp
1adc4     04 4E 05 F1 | 	add	fp, #4
1adc8     A7 FC 61 FC | 	wrlong	result2, fp
1adcc     04 4E 05 F1 | 	add	fp, #4
1add0     A7 FE 61 FC | 	wrlong	result3, fp
1add4     08 4E 85 F1 | 	sub	fp, #8
1add8     A7 12 02 F6 | 	mov	arg01, fp
1addc     0C 4E 85 F1 | 	sub	fp, #12
1ade0     E0 26 BF FD | 	call	#_converttoint
1ade4     FD 28 02 F6 | 	mov	local02, result1
1ade8     14 27 02 F6 | 	mov	local01, local02
1adec     01 26 66 F0 | 	shl	local01, #1
1adf0     14 27 02 F1 | 	add	local01, local02
1adf4     03 26 66 F0 | 	shl	local01, #3
1adf8     14 00 00 FF 
1adfc     38 E5 05 F1 | 	add	objptr, ##10552
1ae00     F2 26 02 F1 | 	add	local01, objptr
1ae04     A7 12 02 F6 | 	mov	arg01, fp
1ae08     14 00 00 FF 
1ae0c     38 E5 85 F1 | 	sub	objptr, ##10552
1ae10     B0 26 BF FD | 	call	#_converttoint
1ae14     14 26 06 F1 | 	add	local01, #20
1ae18     13 FB 51 FC | 	wrword	result1, local01
1ae1c     A7 F0 03 F6 | 	mov	ptra, fp
1ae20     B2 00 A0 FD | 	call	#popregs_
1ae24                 | _do_setsustain_ret
1ae24     2D 00 64 FD | 	ret
1ae28                 | 
1ae28                 | ' 
1ae28                 | ' ' ------------------ setvol
1ae28                 | ' 
1ae28                 | ' sub do_setvol
1ae28                 | _do_setvol
1ae28     02 4A 05 F6 | 	mov	COUNT_, #2
1ae2c     A8 00 A0 FD | 	call	#pushregs_
1ae30     18 F0 07 F1 | 	add	ptra, #24
1ae34     A8 24 BF FD | 	call	#_pop
1ae38     FD 12 02 F6 | 	mov	arg01, result1
1ae3c     FE 26 02 F6 | 	mov	local01, result2
1ae40     FF 28 02 F6 | 	mov	local02, result3
1ae44     A7 12 62 FC | 	wrlong	arg01, fp
1ae48     04 4E 05 F1 | 	add	fp, #4
1ae4c     A7 26 62 FC | 	wrlong	local01, fp
1ae50     04 4E 05 F1 | 	add	fp, #4
1ae54     A7 28 62 FC | 	wrlong	local02, fp
1ae58     08 4E 85 F1 | 	sub	fp, #8
1ae5c     80 24 BF FD | 	call	#_pop
1ae60     FD 28 02 F6 | 	mov	local02, result1
1ae64     0C 4E 05 F1 | 	add	fp, #12
1ae68     A7 28 62 FC | 	wrlong	local02, fp
1ae6c     04 4E 05 F1 | 	add	fp, #4
1ae70     A7 FC 61 FC | 	wrlong	result2, fp
1ae74     04 4E 05 F1 | 	add	fp, #4
1ae78     A7 FE 61 FC | 	wrlong	result3, fp
1ae7c     08 4E 85 F1 | 	sub	fp, #8
1ae80     A7 12 02 F6 | 	mov	arg01, fp
1ae84     0C 4E 85 F1 | 	sub	fp, #12
1ae88     38 26 BF FD | 	call	#_converttoint
1ae8c     FD 28 02 F6 | 	mov	local02, result1
1ae90     14 27 02 F6 | 	mov	local01, local02
1ae94     01 26 66 F0 | 	shl	local01, #1
1ae98     14 27 02 F1 | 	add	local01, local02
1ae9c     03 26 66 F0 | 	shl	local01, #3
1aea0     14 00 00 FF 
1aea4     38 E5 05 F1 | 	add	objptr, ##10552
1aea8     F2 26 02 F1 | 	add	local01, objptr
1aeac     A7 12 02 F6 | 	mov	arg01, fp
1aeb0     14 00 00 FF 
1aeb4     38 E5 85 F1 | 	sub	objptr, ##10552
1aeb8     C4 26 BF FD | 	call	#_converttofloat
1aebc     0C 26 06 F1 | 	add	local01, #12
1aec0     13 FB 61 FC | 	wrlong	result1, local01
1aec4     A7 F0 03 F6 | 	mov	ptra, fp
1aec8     B2 00 A0 FD | 	call	#popregs_
1aecc                 | _do_setvol_ret
1aecc     2D 00 64 FD | 	ret
1aed0                 | 
1aed0                 | ' 
1aed0                 | ' ' ------------------ setwave
1aed0                 | ' 
1aed0                 | ' sub do_setwave
1aed0                 | _do_setwave
1aed0     02 4A 05 F6 | 	mov	COUNT_, #2
1aed4     A8 00 A0 FD | 	call	#pushregs_
1aed8     18 F0 07 F1 | 	add	ptra, #24
1aedc     00 24 BF FD | 	call	#_pop
1aee0     FD 12 02 F6 | 	mov	arg01, result1
1aee4     FE 26 02 F6 | 	mov	local01, result2
1aee8     FF 28 02 F6 | 	mov	local02, result3
1aeec     A7 12 62 FC | 	wrlong	arg01, fp
1aef0     04 4E 05 F1 | 	add	fp, #4
1aef4     A7 26 62 FC | 	wrlong	local01, fp
1aef8     04 4E 05 F1 | 	add	fp, #4
1aefc     A7 28 62 FC | 	wrlong	local02, fp
1af00     08 4E 85 F1 | 	sub	fp, #8
1af04     D8 23 BF FD | 	call	#_pop
1af08     FD 28 02 F6 | 	mov	local02, result1
1af0c     0C 4E 05 F1 | 	add	fp, #12
1af10     A7 28 62 FC | 	wrlong	local02, fp
1af14     04 4E 05 F1 | 	add	fp, #4
1af18     A7 FC 61 FC | 	wrlong	result2, fp
1af1c     04 4E 05 F1 | 	add	fp, #4
1af20     A7 FE 61 FC | 	wrlong	result3, fp
1af24     08 4E 85 F1 | 	sub	fp, #8
1af28     A7 12 02 F6 | 	mov	arg01, fp
1af2c     0C 4E 85 F1 | 	sub	fp, #12
1af30     90 25 BF FD | 	call	#_converttoint
1af34     FD 28 02 F6 | 	mov	local02, result1
1af38     14 27 02 F6 | 	mov	local01, local02
1af3c     01 26 66 F0 | 	shl	local01, #1
1af40     14 27 02 F1 | 	add	local01, local02
1af44     03 26 66 F0 | 	shl	local01, #3
1af48     14 00 00 FF 
1af4c     38 E5 05 F1 | 	add	objptr, ##10552
1af50     F2 26 02 F1 | 	add	local01, objptr
1af54     A7 12 02 F6 | 	mov	arg01, fp
1af58     14 00 00 FF 
1af5c     38 E5 85 F1 | 	sub	objptr, ##10552
1af60     60 25 BF FD | 	call	#_converttoint
1af64     04 26 06 F1 | 	add	local01, #4
1af68     13 FB 41 FC | 	wrbyte	result1, local01
1af6c     A7 F0 03 F6 | 	mov	ptra, fp
1af70     B2 00 A0 FD | 	call	#popregs_
1af74                 | _do_setwave_ret
1af74     2D 00 64 FD | 	ret
1af78                 | 
1af78                 | ' 
1af78                 | ' ' ------------------ shutup
1af78                 | ' 
1af78                 | ' sub do_shutup
1af78                 | _do_shutup
1af78     03 4A 05 F6 | 	mov	COUNT_, #3
1af7c     A8 00 A0 FD | 	call	#pushregs_
1af80     18 F0 07 F1 | 	add	ptra, #24
1af84     4A 00 00 FF 
1af88     80 E4 05 F1 | 	add	objptr, ##38016
1af8c     F2 26 02 FB | 	rdlong	local01, objptr
1af90     13 29 02 F6 | 	mov	local02, local01
1af94     01 28 66 F0 | 	shl	local02, #1
1af98     13 29 02 F1 | 	add	local02, local01
1af9c     02 28 66 F0 | 	shl	local02, #2
1afa0     03 00 00 FF 
1afa4     04 E4 85 F1 | 	sub	objptr, ##1540
1afa8     F2 28 02 F1 | 	add	local02, objptr
1afac     14 2B 0A FB | 	rdlong	local03, local02 wz
1afb0     14 4E 05 F1 | 	add	fp, #20
1afb4     A7 2A 62 FC | 	wrlong	local03, fp
1afb8                 | ' 
1afb8                 | ' numpar=compiledline(lineptr_e).result.uresult
1afb8                 | ' if numpar=0 then
1afb8     14 4E 85 F1 | 	sub	fp, #20
1afbc     47 00 00 FF 
1afc0     7C E4 85 F1 | 	sub	objptr, ##36476
1afc4     50 00 90 5D |  if_ne	jmp	#LR__2142
1afc8                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1afc8     10 4E 05 F1 | 	add	fp, #16
1afcc     A7 00 68 FC | 	wrlong	#0, fp
1afd0     37 00 00 FF 
1afd4     10 E4 05 F1 | 	add	objptr, ##28176
1afd8     97 16 48 FB | 	callpa	#(@LR__2141-@LR__2140)>>2,fcache_load_ptr_
1afdc                 | LR__2140
1afdc     F2 12 02 FB | 	rdlong	arg01, objptr
1afe0     A7 2A 02 FB | 	rdlong	local03, fp
1afe4     06 2A 66 F0 | 	shl	local03, #6
1afe8     15 13 02 F1 | 	add	arg01, local03
1afec     14 12 06 F1 | 	add	arg01, #20
1aff0     09 01 58 FC | 	wrword	#0, arg01
1aff4     A7 2A 02 FB | 	rdlong	local03, fp
1aff8     01 2A 06 F1 | 	add	local03, #1
1affc     A7 2A 62 FC | 	wrlong	local03, fp
1b000     08 2A 56 F2 | 	cmps	local03, #8 wc
1b004     D4 FF 9F CD |  if_b	jmp	#LR__2140
1b008                 | LR__2141
1b008     37 00 00 FF 
1b00c     10 E4 85 F1 | 	sub	objptr, ##28176
1b010     10 4E 85 F1 | 	sub	fp, #16
1b014     64 00 90 FD | 	jmp	#LR__2143
1b018                 | LR__2142
1b018     C4 22 BF FD | 	call	#_pop
1b01c     FF 26 02 F6 | 	mov	local01, result3
1b020     A7 FA 61 FC | 	wrlong	result1, fp
1b024     04 4E 05 F1 | 	add	fp, #4
1b028     A7 FC 61 FC | 	wrlong	result2, fp
1b02c     04 4E 05 F1 | 	add	fp, #4
1b030     A7 26 62 FC | 	wrlong	local01, fp
1b034     08 4E 85 F1 | 	sub	fp, #8
1b038     A7 12 02 F6 | 	mov	arg01, fp
1b03c     84 24 BF FD | 	call	#_converttoint
1b040     FD 2A 52 F6 | 	abs	local03, result1 wc
1b044     07 2A 06 F5 | 	and	local03, #7
1b048     15 29 82 F6 | 	negc	local02, local03
1b04c     0C 4E 05 F1 | 	add	fp, #12
1b050     A7 28 62 FC | 	wrlong	local02, fp
1b054     37 00 00 FF 
1b058     10 E4 05 F1 | 	add	objptr, ##28176
1b05c     F2 12 02 FB | 	rdlong	arg01, objptr
1b060     37 00 00 FF 
1b064     10 E4 85 F1 | 	sub	objptr, ##28176
1b068     0C 4E 85 F1 | 	sub	fp, #12
1b06c     06 28 66 F0 | 	shl	local02, #6
1b070     14 13 02 F1 | 	add	arg01, local02
1b074     14 12 06 F1 | 	add	arg01, #20
1b078     09 01 58 FC | 	wrword	#0, arg01
1b07c                 | LR__2143
1b07c     A7 F0 03 F6 | 	mov	ptra, fp
1b080     B2 00 A0 FD | 	call	#popregs_
1b084                 | _do_shutup_ret
1b084     2D 00 64 FD | 	ret
1b088                 | 
1b088                 | ' 
1b088                 | ' ' ------------------ sin
1b088                 | ' 
1b088                 | ' sub do_sin
1b088                 | _do_sin
1b088     01 4A 05 F6 | 	mov	COUNT_, #1
1b08c     A8 00 A0 FD | 	call	#pushregs_
1b090     10 F0 07 F1 | 	add	ptra, #16
1b094     4A 00 00 FF 
1b098     80 E4 05 F1 | 	add	objptr, ##38016
1b09c     F2 26 02 FB | 	rdlong	local01, objptr
1b0a0     13 17 02 F6 | 	mov	arg03, local01
1b0a4     01 16 66 F0 | 	shl	arg03, #1
1b0a8     13 17 02 F1 | 	add	arg03, local01
1b0ac     02 16 66 F0 | 	shl	arg03, #2
1b0b0     03 00 00 FF 
1b0b4     04 E4 85 F1 | 	sub	objptr, ##1540
1b0b8     F2 16 02 F1 | 	add	arg03, objptr
1b0bc     0B 17 02 FB | 	rdlong	arg03, arg03
1b0c0     0C 4E 05 F1 | 	add	fp, #12
1b0c4     A7 16 62 FC | 	wrlong	arg03, fp
1b0c8                 | ' 
1b0c8                 | ' numpar=compiledline(lineptr_e).result.uresult
1b0c8                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1b0c8     0C 4E 85 F1 | 	sub	fp, #12
1b0cc     02 16 16 F2 | 	cmp	arg03, #2 wc
1b0d0     47 00 00 FF 
1b0d4     7C E4 85 F1 | 	sub	objptr, ##36476
1b0d8     0C 4E 05 C1 |  if_b	add	fp, #12
1b0dc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1b0e0     0C 4E 85 C1 |  if_b	sub	fp, #12
1b0e4     40 00 90 4D |  if_c_and_nz	jmp	#LR__2150
1b0e8     00 12 06 F6 | 	mov	arg01, #0
1b0ec     50 0B B1 FD | 	call	#__system___getiolock_0602
1b0f0     FD 12 02 F6 | 	mov	arg01, result1
1b0f4     20 AE B0 FD | 	call	#__system___lockmem
1b0f8     B2 01 00 FF 
1b0fc     57 15 06 F6 | 	mov	arg02, ##@LR__5932
1b100     00 12 06 F6 | 	mov	arg01, #0
1b104     00 16 06 F6 | 	mov	arg03, #0
1b108     00 BB B0 FD | 	call	#__system___basic_print_string
1b10c     00 12 06 F6 | 	mov	arg01, #0
1b110     2C 0B B1 FD | 	call	#__system___getiolock_0602
1b114     FD 00 68 FC | 	wrlong	#0, result1
1b118     27 12 06 F6 | 	mov	arg01, #39
1b11c     00 14 06 F6 | 	mov	arg02, #0
1b120     08 74 B0 FD | 	call	#_printerror
1b124     64 00 90 FD | 	jmp	#LR__2151
1b128                 | LR__2150
1b128     B4 21 BF FD | 	call	#_pop
1b12c     A7 FA 61 FC | 	wrlong	result1, fp
1b130     04 4E 05 F1 | 	add	fp, #4
1b134     A7 FC 61 FC | 	wrlong	result2, fp
1b138     04 4E 05 F1 | 	add	fp, #4
1b13c     A7 FE 61 FC | 	wrlong	result3, fp
1b140     08 4E 85 F1 | 	sub	fp, #8
1b144     52 00 00 FF 
1b148     A8 E4 05 F1 | 	add	objptr, ##42152
1b14c     F2 26 02 FB | 	rdlong	local01, objptr
1b150     52 00 00 FF 
1b154     A8 E4 85 F1 | 	sub	objptr, ##42152
1b158     A7 12 02 F6 | 	mov	arg01, fp
1b15c     20 24 BF FD | 	call	#_converttofloat
1b160     FD 14 02 F6 | 	mov	arg02, result1
1b164     13 13 02 F6 | 	mov	arg01, local01
1b168     24 DC B0 FD | 	call	#__system___float_mul
1b16c     FD 12 02 F6 | 	mov	arg01, result1
1b170     7C E5 B0 FD | 	call	#__system____builtin_sinf
1b174     A7 FA 61 FC | 	wrlong	result1, fp
1b178     08 4E 05 F1 | 	add	fp, #8
1b17c     A7 3C 68 FC | 	wrlong	#30, fp
1b180     08 4E 85 F1 | 	sub	fp, #8
1b184     A7 12 02 F6 | 	mov	arg01, fp
1b188     EC 21 BF FD | 	call	#_push
1b18c                 | LR__2151
1b18c     A7 F0 03 F6 | 	mov	ptra, fp
1b190     B2 00 A0 FD | 	call	#popregs_
1b194                 | _do_sin_ret
1b194     2D 00 64 FD | 	ret
1b198                 | 
1b198                 | ' 
1b198                 | ' ' ------------------ skip
1b198                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1b198                 | ' 
1b198                 | ' sub do_skip
1b198                 | _do_skip
1b198     4A 00 00 FF 
1b19c     80 E4 05 F1 | 	add	objptr, ##38016
1b1a0     F2 00 02 FB | 	rdlong	_var01, objptr
1b1a4     00 03 02 F6 | 	mov	_var02, _var01
1b1a8     01 02 66 F0 | 	shl	_var02, #1
1b1ac     00 03 02 F1 | 	add	_var02, _var01
1b1b0     02 02 66 F0 | 	shl	_var02, #2
1b1b4     03 00 00 FF 
1b1b8     04 E4 85 F1 | 	sub	objptr, ##1540
1b1bc     F2 02 02 F1 | 	add	_var02, objptr
1b1c0     01 03 02 FB | 	rdlong	_var02, _var02
1b1c4     01 02 86 F1 | 	sub	_var02, #1
1b1c8     03 00 00 FF 
1b1cc     04 E4 05 F1 | 	add	objptr, ##1540
1b1d0     F2 02 62 FC | 	wrlong	_var02, objptr
1b1d4     4A 00 00 FF 
1b1d8     80 E4 85 F1 | 	sub	objptr, ##38016
1b1dc                 | _do_skip_ret
1b1dc     2D 00 64 FD | 	ret
1b1e0                 | 
1b1e0                 | ' 
1b1e0                 | ' ' ------------------ sprite
1b1e0                 | ' 
1b1e0                 | ' sub do_sprite
1b1e0                 | _do_sprite
1b1e0     00 4A 05 F6 | 	mov	COUNT_, #0
1b1e4     A8 00 A0 FD | 	call	#pushregs_
1b1e8     30 F0 07 F1 | 	add	ptra, #48
1b1ec     F0 20 BF FD | 	call	#_pop
1b1f0     FD 16 02 F6 | 	mov	arg03, result1
1b1f4     FE 14 02 F6 | 	mov	arg02, result2
1b1f8     FF 12 02 F6 | 	mov	arg01, result3
1b1fc     18 4E 05 F1 | 	add	fp, #24
1b200     A7 16 62 FC | 	wrlong	arg03, fp
1b204     04 4E 05 F1 | 	add	fp, #4
1b208     A7 14 62 FC | 	wrlong	arg02, fp
1b20c     04 4E 05 F1 | 	add	fp, #4
1b210     A7 12 62 FC | 	wrlong	arg01, fp
1b214     20 4E 85 F1 | 	sub	fp, #32
1b218     C4 20 BF FD | 	call	#_pop
1b21c     FD 16 02 F6 | 	mov	arg03, result1
1b220     FE 14 02 F6 | 	mov	arg02, result2
1b224     FF 12 02 F6 | 	mov	arg01, result3
1b228     0C 4E 05 F1 | 	add	fp, #12
1b22c     A7 16 62 FC | 	wrlong	arg03, fp
1b230     04 4E 05 F1 | 	add	fp, #4
1b234     A7 14 62 FC | 	wrlong	arg02, fp
1b238     04 4E 05 F1 | 	add	fp, #4
1b23c     A7 12 62 FC | 	wrlong	arg01, fp
1b240     14 4E 85 F1 | 	sub	fp, #20
1b244     98 20 BF FD | 	call	#_pop
1b248     FF 16 02 F6 | 	mov	arg03, result3
1b24c     A7 FA 61 FC | 	wrlong	result1, fp
1b250     04 4E 05 F1 | 	add	fp, #4
1b254     A7 FC 61 FC | 	wrlong	result2, fp
1b258     04 4E 05 F1 | 	add	fp, #4
1b25c     A7 16 62 FC | 	wrlong	arg03, fp
1b260     08 4E 85 F1 | 	sub	fp, #8
1b264     A7 12 02 F6 | 	mov	arg01, fp
1b268     58 22 BF FD | 	call	#_converttoint
1b26c     24 4E 05 F1 | 	add	fp, #36
1b270     A7 FA 61 FC | 	wrlong	result1, fp
1b274     18 4E 85 F1 | 	sub	fp, #24
1b278     A7 12 02 F6 | 	mov	arg01, fp
1b27c     0C 4E 85 F1 | 	sub	fp, #12
1b280     40 22 BF FD | 	call	#_converttoint
1b284     28 4E 05 F1 | 	add	fp, #40
1b288     A7 FA 61 FC | 	wrlong	result1, fp
1b28c     10 4E 85 F1 | 	sub	fp, #16
1b290     A7 12 02 F6 | 	mov	arg01, fp
1b294     18 4E 85 F1 | 	sub	fp, #24
1b298     28 22 BF FD | 	call	#_converttoint
1b29c     2C 4E 05 F1 | 	add	fp, #44
1b2a0     A7 FA 61 FC | 	wrlong	result1, fp
1b2a4     08 4E 85 F1 | 	sub	fp, #8
1b2a8     A7 12 02 FB | 	rdlong	arg01, fp
1b2ac     04 4E 05 F1 | 	add	fp, #4
1b2b0     A7 14 02 FB | 	rdlong	arg02, fp
1b2b4     FD 16 02 F6 | 	mov	arg03, result1
1b2b8     28 4E 85 F1 | 	sub	fp, #40
1b2bc     4C 82 B0 FD | 	call	#_hg010b_spin2_setspritepos
1b2c0     A7 F0 03 F6 | 	mov	ptra, fp
1b2c4     B2 00 A0 FD | 	call	#popregs_
1b2c8                 | _do_sprite_ret
1b2c8     2D 00 64 FD | 	ret
1b2cc                 | 
1b2cc                 | ' 
1b2cc                 | ' ' ------------------ sqr
1b2cc                 | ' 
1b2cc                 | ' sub do_sqr
1b2cc                 | _do_sqr
1b2cc     01 4A 05 F6 | 	mov	COUNT_, #1
1b2d0     A8 00 A0 FD | 	call	#pushregs_
1b2d4     10 F0 07 F1 | 	add	ptra, #16
1b2d8     4A 00 00 FF 
1b2dc     80 E4 05 F1 | 	add	objptr, ##38016
1b2e0     F2 26 02 FB | 	rdlong	local01, objptr
1b2e4     13 17 02 F6 | 	mov	arg03, local01
1b2e8     01 16 66 F0 | 	shl	arg03, #1
1b2ec     13 17 02 F1 | 	add	arg03, local01
1b2f0     02 16 66 F0 | 	shl	arg03, #2
1b2f4     03 00 00 FF 
1b2f8     04 E4 85 F1 | 	sub	objptr, ##1540
1b2fc     F2 16 02 F1 | 	add	arg03, objptr
1b300     0B 17 02 FB | 	rdlong	arg03, arg03
1b304     0C 4E 05 F1 | 	add	fp, #12
1b308     A7 16 62 FC | 	wrlong	arg03, fp
1b30c                 | ' 
1b30c                 | ' numpar=compiledline(lineptr_e).result.uresult
1b30c                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1b30c     0C 4E 85 F1 | 	sub	fp, #12
1b310     02 16 16 F2 | 	cmp	arg03, #2 wc
1b314     47 00 00 FF 
1b318     7C E4 85 F1 | 	sub	objptr, ##36476
1b31c     0C 4E 05 C1 |  if_b	add	fp, #12
1b320     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1b324     0C 4E 85 C1 |  if_b	sub	fp, #12
1b328     40 00 90 4D |  if_c_and_nz	jmp	#LR__2160
1b32c     00 12 06 F6 | 	mov	arg01, #0
1b330     0C 09 B1 FD | 	call	#__system___getiolock_0602
1b334     FD 12 02 F6 | 	mov	arg01, result1
1b338     DC AB B0 FD | 	call	#__system___lockmem
1b33c     B2 01 00 FF 
1b340     5D 15 06 F6 | 	mov	arg02, ##@LR__5933
1b344     00 12 06 F6 | 	mov	arg01, #0
1b348     00 16 06 F6 | 	mov	arg03, #0
1b34c     BC B8 B0 FD | 	call	#__system___basic_print_string
1b350     00 12 06 F6 | 	mov	arg01, #0
1b354     E8 08 B1 FD | 	call	#__system___getiolock_0602
1b358     FD 00 68 FC | 	wrlong	#0, result1
1b35c     27 12 06 F6 | 	mov	arg01, #39
1b360     00 14 06 F6 | 	mov	arg02, #0
1b364     C4 71 B0 FD | 	call	#_printerror
1b368     48 00 90 FD | 	jmp	#LR__2161
1b36c                 | LR__2160
1b36c     70 1F BF FD | 	call	#_pop
1b370     FF 26 02 F6 | 	mov	local01, result3
1b374     A7 FA 61 FC | 	wrlong	result1, fp
1b378     04 4E 05 F1 | 	add	fp, #4
1b37c     A7 FC 61 FC | 	wrlong	result2, fp
1b380     04 4E 05 F1 | 	add	fp, #4
1b384     A7 26 62 FC | 	wrlong	local01, fp
1b388     08 4E 85 F1 | 	sub	fp, #8
1b38c     A7 12 02 F6 | 	mov	arg01, fp
1b390     EC 21 BF FD | 	call	#_converttofloat
1b394     FD 12 02 F6 | 	mov	arg01, result1
1b398     1C D9 B0 FD | 	call	#__system___float_sqrt
1b39c     A7 FA 61 FC | 	wrlong	result1, fp
1b3a0     08 4E 05 F1 | 	add	fp, #8
1b3a4     A7 3C 68 FC | 	wrlong	#30, fp
1b3a8     08 4E 85 F1 | 	sub	fp, #8
1b3ac     A7 12 02 F6 | 	mov	arg01, fp
1b3b0     C4 1F BF FD | 	call	#_push
1b3b4                 | LR__2161
1b3b4     A7 F0 03 F6 | 	mov	ptra, fp
1b3b8     B2 00 A0 FD | 	call	#popregs_
1b3bc                 | _do_sqr_ret
1b3bc     2D 00 64 FD | 	ret
1b3c0                 | 
1b3c0                 | ' 
1b3c0                 | ' ' ------------------ stick
1b3c0                 | ' 
1b3c0                 | ' sub do_stick
1b3c0                 | _do_stick
1b3c0     01 4A 05 F6 | 	mov	COUNT_, #1
1b3c4     A8 00 A0 FD | 	call	#pushregs_
1b3c8     10 F0 07 F1 | 	add	ptra, #16
1b3cc     4A 00 00 FF 
1b3d0     80 E4 05 F1 | 	add	objptr, ##38016
1b3d4     F2 26 02 FB | 	rdlong	local01, objptr
1b3d8     13 17 02 F6 | 	mov	arg03, local01
1b3dc     01 16 66 F0 | 	shl	arg03, #1
1b3e0     13 17 02 F1 | 	add	arg03, local01
1b3e4     02 16 66 F0 | 	shl	arg03, #2
1b3e8     03 00 00 FF 
1b3ec     04 E4 85 F1 | 	sub	objptr, ##1540
1b3f0     F2 16 02 F1 | 	add	arg03, objptr
1b3f4     0B 17 02 FB | 	rdlong	arg03, arg03
1b3f8     0C 4E 05 F1 | 	add	fp, #12
1b3fc     A7 16 62 FC | 	wrlong	arg03, fp
1b400                 | ' 
1b400                 | ' numpar=compiledline(lineptr_e).result.uresult
1b400                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1b400     0C 4E 85 F1 | 	sub	fp, #12
1b404     02 16 16 F2 | 	cmp	arg03, #2 wc
1b408     47 00 00 FF 
1b40c     7C E4 85 F1 | 	sub	objptr, ##36476
1b410     40 00 90 CD |  if_b	jmp	#LR__2170
1b414     00 12 06 F6 | 	mov	arg01, #0
1b418     24 08 B1 FD | 	call	#__system___getiolock_0602
1b41c     FD 12 02 F6 | 	mov	arg01, result1
1b420     F4 AA B0 FD | 	call	#__system___lockmem
1b424     B2 01 00 FF 
1b428     63 15 06 F6 | 	mov	arg02, ##@LR__5934
1b42c     00 12 06 F6 | 	mov	arg01, #0
1b430     00 16 06 F6 | 	mov	arg03, #0
1b434     D4 B7 B0 FD | 	call	#__system___basic_print_string
1b438     00 12 06 F6 | 	mov	arg01, #0
1b43c     00 08 B1 FD | 	call	#__system___getiolock_0602
1b440     FD 00 68 FC | 	wrlong	#0, result1
1b444     27 12 06 F6 | 	mov	arg01, #39
1b448     00 14 06 F6 | 	mov	arg02, #0
1b44c     DC 70 B0 FD | 	call	#_printerror
1b450     F0 00 90 FD | 	jmp	#LR__2174
1b454                 | LR__2170
1b454                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1b454     0C 4E 05 F1 | 	add	fp, #12
1b458     A7 FE 09 FB | 	rdlong	result3, fp wz
1b45c     0C 4E 85 F1 | 	sub	fp, #12
1b460     30 00 90 5D |  if_ne	jmp	#LR__2171
1b464     52 00 00 FF 
1b468     1C E4 05 F1 | 	add	objptr, ##42012
1b46c     F2 26 02 FB | 	rdlong	local01, objptr
1b470     52 00 00 FF 
1b474     1C E4 85 F1 | 	sub	objptr, ##42012
1b478     A7 26 62 FC | 	wrlong	local01, fp
1b47c     08 4E 05 F1 | 	add	fp, #8
1b480     A7 3A 68 FC | 	wrlong	#29, fp
1b484     08 4E 85 F1 | 	sub	fp, #8
1b488     A7 12 02 F6 | 	mov	arg01, fp
1b48c     E8 1E BF FD | 	call	#_push
1b490     B0 00 90 FD | 	jmp	#LR__2174
1b494                 | LR__2171
1b494     48 1E BF FD | 	call	#_pop
1b498     A7 FA 61 FC | 	wrlong	result1, fp
1b49c     04 4E 05 F1 | 	add	fp, #4
1b4a0     A7 FC 61 FC | 	wrlong	result2, fp
1b4a4     04 4E 05 F1 | 	add	fp, #4
1b4a8     A7 FE 61 FC | 	wrlong	result3, fp
1b4ac                 | ' t1=pop()
1b4ac                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1b4ac     08 4E 85 F1 | 	sub	fp, #8
1b4b0     1C FE 0D F2 | 	cmp	result3, #28 wz
1b4b4     08 4E 05 51 |  if_ne	add	fp, #8
1b4b8     A7 26 02 5B |  if_ne	rdlong	local01, fp
1b4bc     08 4E 85 51 |  if_ne	sub	fp, #8
1b4c0     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1b4c4     70 00 90 5D |  if_ne	jmp	#LR__2173
1b4c8     A7 26 02 FB | 	rdlong	local01, fp
1b4cc     52 00 00 FF 
1b4d0     08 E5 05 F1 | 	add	objptr, ##42248
1b4d4     F2 26 62 FC | 	wrlong	local01, objptr
1b4d8                 | '   q=t1.result.uresult
1b4d8                 | '   if q<7 then 
1b4d8     52 00 00 FF 
1b4dc     08 E5 85 F1 | 	sub	objptr, ##42248
1b4e0     07 26 56 F2 | 	cmps	local01, #7 wc
1b4e4     40 00 90 3D |  if_ae	jmp	#LR__2172
1b4e8     52 00 00 FF 
1b4ec     08 E5 05 F1 | 	add	objptr, ##42248
1b4f0     F2 26 02 FB | 	rdlong	local01, objptr
1b4f4     02 26 66 F0 | 	shl	local01, #2
1b4f8     EC E4 85 F1 | 	sub	objptr, #236
1b4fc     F2 26 02 F1 | 	add	local01, objptr
1b500     13 27 02 FB | 	rdlong	local01, local01
1b504     A7 26 62 FC | 	wrlong	local01, fp
1b508     08 4E 05 F1 | 	add	fp, #8
1b50c     A7 3A 68 FC | 	wrlong	#29, fp
1b510     08 4E 85 F1 | 	sub	fp, #8
1b514     A7 12 02 F6 | 	mov	arg01, fp
1b518     52 00 00 FF 
1b51c     1C E4 85 F1 | 	sub	objptr, ##42012
1b520     54 1E BF FD | 	call	#_push
1b524                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1b524     1C 00 90 FD | 	jmp	#LR__2174
1b528                 | LR__2172
1b528     29 12 06 F6 | 	mov	arg01, #41
1b52c     00 14 06 F6 | 	mov	arg02, #0
1b530     F8 6F B0 FD | 	call	#_printerror
1b534                 | '      printerror(41) : return
1b534     0C 00 90 FD | 	jmp	#LR__2174
1b538                 | LR__2173
1b538     29 12 06 F6 | 	mov	arg01, #41
1b53c     00 14 06 F6 | 	mov	arg02, #0
1b540     E8 6F B0 FD | 	call	#_printerror
1b544                 | LR__2174
1b544     A7 F0 03 F6 | 	mov	ptra, fp
1b548     B2 00 A0 FD | 	call	#popregs_
1b54c                 | _do_stick_ret
1b54c     2D 00 64 FD | 	ret
1b550                 | 
1b550                 | ' 
1b550                 | ' ' ------------------ strig
1b550                 | ' 
1b550                 | ' sub do_strig
1b550                 | _do_strig
1b550     01 4A 05 F6 | 	mov	COUNT_, #1
1b554     A8 00 A0 FD | 	call	#pushregs_
1b558     10 F0 07 F1 | 	add	ptra, #16
1b55c     4A 00 00 FF 
1b560     80 E4 05 F1 | 	add	objptr, ##38016
1b564     F2 26 02 FB | 	rdlong	local01, objptr
1b568     13 17 02 F6 | 	mov	arg03, local01
1b56c     01 16 66 F0 | 	shl	arg03, #1
1b570     13 17 02 F1 | 	add	arg03, local01
1b574     02 16 66 F0 | 	shl	arg03, #2
1b578     03 00 00 FF 
1b57c     04 E4 85 F1 | 	sub	objptr, ##1540
1b580     F2 16 02 F1 | 	add	arg03, objptr
1b584     0B 17 02 FB | 	rdlong	arg03, arg03
1b588     0C 4E 05 F1 | 	add	fp, #12
1b58c     A7 16 62 FC | 	wrlong	arg03, fp
1b590                 | ' 
1b590                 | ' numpar=compiledline(lineptr_e).result.uresult
1b590                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1b590     0C 4E 85 F1 | 	sub	fp, #12
1b594     02 16 16 F2 | 	cmp	arg03, #2 wc
1b598     47 00 00 FF 
1b59c     7C E4 85 F1 | 	sub	objptr, ##36476
1b5a0     40 00 90 CD |  if_b	jmp	#LR__2180
1b5a4     00 12 06 F6 | 	mov	arg01, #0
1b5a8     94 06 B1 FD | 	call	#__system___getiolock_0602
1b5ac     FD 12 02 F6 | 	mov	arg01, result1
1b5b0     64 A9 B0 FD | 	call	#__system___lockmem
1b5b4     B2 01 00 FF 
1b5b8     6B 15 06 F6 | 	mov	arg02, ##@LR__5935
1b5bc     00 12 06 F6 | 	mov	arg01, #0
1b5c0     00 16 06 F6 | 	mov	arg03, #0
1b5c4     44 B6 B0 FD | 	call	#__system___basic_print_string
1b5c8     00 12 06 F6 | 	mov	arg01, #0
1b5cc     70 06 B1 FD | 	call	#__system___getiolock_0602
1b5d0     FD 00 68 FC | 	wrlong	#0, result1
1b5d4     27 12 06 F6 | 	mov	arg01, #39
1b5d8     00 14 06 F6 | 	mov	arg02, #0
1b5dc     4C 6F B0 FD | 	call	#_printerror
1b5e0     F0 00 90 FD | 	jmp	#LR__2184
1b5e4                 | LR__2180
1b5e4                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1b5e4     0C 4E 05 F1 | 	add	fp, #12
1b5e8     A7 FE 09 FB | 	rdlong	result3, fp wz
1b5ec     0C 4E 85 F1 | 	sub	fp, #12
1b5f0     30 00 90 5D |  if_ne	jmp	#LR__2181
1b5f4     52 00 00 FF 
1b5f8     38 E4 05 F1 | 	add	objptr, ##42040
1b5fc     F2 26 02 FB | 	rdlong	local01, objptr
1b600     52 00 00 FF 
1b604     38 E4 85 F1 | 	sub	objptr, ##42040
1b608     A7 26 62 FC | 	wrlong	local01, fp
1b60c     08 4E 05 F1 | 	add	fp, #8
1b610     A7 3A 68 FC | 	wrlong	#29, fp
1b614     08 4E 85 F1 | 	sub	fp, #8
1b618     A7 12 02 F6 | 	mov	arg01, fp
1b61c     58 1D BF FD | 	call	#_push
1b620     B0 00 90 FD | 	jmp	#LR__2184
1b624                 | LR__2181
1b624     B8 1C BF FD | 	call	#_pop
1b628     A7 FA 61 FC | 	wrlong	result1, fp
1b62c     04 4E 05 F1 | 	add	fp, #4
1b630     A7 FC 61 FC | 	wrlong	result2, fp
1b634     04 4E 05 F1 | 	add	fp, #4
1b638     A7 FE 61 FC | 	wrlong	result3, fp
1b63c                 | ' t1=pop()
1b63c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1b63c     08 4E 85 F1 | 	sub	fp, #8
1b640     1C FE 0D F2 | 	cmp	result3, #28 wz
1b644     08 4E 05 51 |  if_ne	add	fp, #8
1b648     A7 26 02 5B |  if_ne	rdlong	local01, fp
1b64c     08 4E 85 51 |  if_ne	sub	fp, #8
1b650     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1b654     70 00 90 5D |  if_ne	jmp	#LR__2183
1b658     A7 26 02 FB | 	rdlong	local01, fp
1b65c     52 00 00 FF 
1b660     08 E5 05 F1 | 	add	objptr, ##42248
1b664     F2 26 62 FC | 	wrlong	local01, objptr
1b668                 | '   q=t1.result.uresult
1b668                 | '   if q<7 then 
1b668     52 00 00 FF 
1b66c     08 E5 85 F1 | 	sub	objptr, ##42248
1b670     07 26 56 F2 | 	cmps	local01, #7 wc
1b674     40 00 90 3D |  if_ae	jmp	#LR__2182
1b678     52 00 00 FF 
1b67c     08 E5 05 F1 | 	add	objptr, ##42248
1b680     F2 26 02 FB | 	rdlong	local01, objptr
1b684     02 26 66 F0 | 	shl	local01, #2
1b688     D0 E4 85 F1 | 	sub	objptr, #208
1b68c     F2 26 02 F1 | 	add	local01, objptr
1b690     13 27 02 FB | 	rdlong	local01, local01
1b694     A7 26 62 FC | 	wrlong	local01, fp
1b698     08 4E 05 F1 | 	add	fp, #8
1b69c     A7 3A 68 FC | 	wrlong	#29, fp
1b6a0     08 4E 85 F1 | 	sub	fp, #8
1b6a4     A7 12 02 F6 | 	mov	arg01, fp
1b6a8     52 00 00 FF 
1b6ac     38 E4 85 F1 | 	sub	objptr, ##42040
1b6b0     C4 1C BF FD | 	call	#_push
1b6b4                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1b6b4     1C 00 90 FD | 	jmp	#LR__2184
1b6b8                 | LR__2182
1b6b8     29 12 06 F6 | 	mov	arg01, #41
1b6bc     00 14 06 F6 | 	mov	arg02, #0
1b6c0     68 6E B0 FD | 	call	#_printerror
1b6c4                 | '      printerror(41) : return
1b6c4     0C 00 90 FD | 	jmp	#LR__2184
1b6c8                 | LR__2183
1b6c8     29 12 06 F6 | 	mov	arg01, #41
1b6cc     00 14 06 F6 | 	mov	arg02, #0
1b6d0     58 6E B0 FD | 	call	#_printerror
1b6d4                 | LR__2184
1b6d4     A7 F0 03 F6 | 	mov	ptra, fp
1b6d8     B2 00 A0 FD | 	call	#popregs_
1b6dc                 | _do_strig_ret
1b6dc     2D 00 64 FD | 	ret
1b6e0                 | 
1b6e0                 | ' 
1b6e0                 | ' ' ------------------ tan
1b6e0                 | ' 
1b6e0                 | ' sub do_tan
1b6e0                 | _do_tan
1b6e0     01 4A 05 F6 | 	mov	COUNT_, #1
1b6e4     A8 00 A0 FD | 	call	#pushregs_
1b6e8     10 F0 07 F1 | 	add	ptra, #16
1b6ec     4A 00 00 FF 
1b6f0     80 E4 05 F1 | 	add	objptr, ##38016
1b6f4     F2 26 02 FB | 	rdlong	local01, objptr
1b6f8     13 17 02 F6 | 	mov	arg03, local01
1b6fc     01 16 66 F0 | 	shl	arg03, #1
1b700     13 17 02 F1 | 	add	arg03, local01
1b704     02 16 66 F0 | 	shl	arg03, #2
1b708     03 00 00 FF 
1b70c     04 E4 85 F1 | 	sub	objptr, ##1540
1b710     F2 16 02 F1 | 	add	arg03, objptr
1b714     0B 17 02 FB | 	rdlong	arg03, arg03
1b718     0C 4E 05 F1 | 	add	fp, #12
1b71c     A7 16 62 FC | 	wrlong	arg03, fp
1b720                 | ' 
1b720                 | ' numpar=compiledline(lineptr_e).result.uresult
1b720                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1b720     0C 4E 85 F1 | 	sub	fp, #12
1b724     02 16 16 F2 | 	cmp	arg03, #2 wc
1b728     47 00 00 FF 
1b72c     7C E4 85 F1 | 	sub	objptr, ##36476
1b730     0C 4E 05 C1 |  if_b	add	fp, #12
1b734     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1b738     0C 4E 85 C1 |  if_b	sub	fp, #12
1b73c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2190
1b740     00 12 06 F6 | 	mov	arg01, #0
1b744     F8 04 B1 FD | 	call	#__system___getiolock_0602
1b748     FD 12 02 F6 | 	mov	arg01, result1
1b74c     C8 A7 B0 FD | 	call	#__system___lockmem
1b750     B2 01 00 FF 
1b754     73 15 06 F6 | 	mov	arg02, ##@LR__5936
1b758     00 12 06 F6 | 	mov	arg01, #0
1b75c     00 16 06 F6 | 	mov	arg03, #0
1b760     A8 B4 B0 FD | 	call	#__system___basic_print_string
1b764     00 12 06 F6 | 	mov	arg01, #0
1b768     D4 04 B1 FD | 	call	#__system___getiolock_0602
1b76c     FD 00 68 FC | 	wrlong	#0, result1
1b770     27 12 06 F6 | 	mov	arg01, #39
1b774     00 14 06 F6 | 	mov	arg02, #0
1b778     B0 6D B0 FD | 	call	#_printerror
1b77c     64 00 90 FD | 	jmp	#LR__2191
1b780                 | LR__2190
1b780     5C 1B BF FD | 	call	#_pop
1b784     A7 FA 61 FC | 	wrlong	result1, fp
1b788     04 4E 05 F1 | 	add	fp, #4
1b78c     A7 FC 61 FC | 	wrlong	result2, fp
1b790     04 4E 05 F1 | 	add	fp, #4
1b794     A7 FE 61 FC | 	wrlong	result3, fp
1b798     08 4E 85 F1 | 	sub	fp, #8
1b79c     52 00 00 FF 
1b7a0     A8 E4 05 F1 | 	add	objptr, ##42152
1b7a4     F2 26 02 FB | 	rdlong	local01, objptr
1b7a8     52 00 00 FF 
1b7ac     A8 E4 85 F1 | 	sub	objptr, ##42152
1b7b0     A7 12 02 F6 | 	mov	arg01, fp
1b7b4     C8 1D BF FD | 	call	#_converttofloat
1b7b8     FD 14 02 F6 | 	mov	arg02, result1
1b7bc     13 13 02 F6 | 	mov	arg01, local01
1b7c0     CC D5 B0 FD | 	call	#__system___float_mul
1b7c4     FD 12 02 F6 | 	mov	arg01, result1
1b7c8     70 E0 B0 FD | 	call	#__system____builtin_tanf
1b7cc     A7 FA 61 FC | 	wrlong	result1, fp
1b7d0     08 4E 05 F1 | 	add	fp, #8
1b7d4     A7 3C 68 FC | 	wrlong	#30, fp
1b7d8     08 4E 85 F1 | 	sub	fp, #8
1b7dc     A7 12 02 F6 | 	mov	arg01, fp
1b7e0     94 1B BF FD | 	call	#_push
1b7e4                 | LR__2191
1b7e4     A7 F0 03 F6 | 	mov	ptra, fp
1b7e8     B2 00 A0 FD | 	call	#popregs_
1b7ec                 | _do_tan_ret
1b7ec     2D 00 64 FD | 	ret
1b7f0                 | 
1b7f0                 | ' 
1b7f0                 | ' ' ------------------ val
1b7f0                 | ' 
1b7f0                 | ' sub do_val
1b7f0                 | _do_val
1b7f0     03 4A 05 F6 | 	mov	COUNT_, #3
1b7f4     A8 00 A0 FD | 	call	#pushregs_
1b7f8     20 F0 07 F1 | 	add	ptra, #32
1b7fc     4A 00 00 FF 
1b800     80 E4 05 F1 | 	add	objptr, ##38016
1b804     F2 16 02 FB | 	rdlong	arg03, objptr
1b808     0B 27 02 F6 | 	mov	local01, arg03
1b80c     01 26 66 F0 | 	shl	local01, #1
1b810     0B 27 02 F1 | 	add	local01, arg03
1b814     02 26 66 F0 | 	shl	local01, #2
1b818     03 00 00 FF 
1b81c     04 E4 85 F1 | 	sub	objptr, ##1540
1b820     F2 26 02 F1 | 	add	local01, objptr
1b824     13 17 02 FB | 	rdlong	arg03, local01
1b828     0C 4E 05 F1 | 	add	fp, #12
1b82c     A7 16 62 FC | 	wrlong	arg03, fp
1b830                 | ' 
1b830                 | ' numpar=compiledline(lineptr_e).result.uresult
1b830                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1b830     0C 4E 85 F1 | 	sub	fp, #12
1b834     02 16 16 F2 | 	cmp	arg03, #2 wc
1b838     47 00 00 FF 
1b83c     7C E4 85 F1 | 	sub	objptr, ##36476
1b840     0C 4E 05 C1 |  if_b	add	fp, #12
1b844     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1b848     0C 4E 85 C1 |  if_b	sub	fp, #12
1b84c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2200
1b850     00 12 06 F6 | 	mov	arg01, #0
1b854     E8 03 B1 FD | 	call	#__system___getiolock_0602
1b858     FD 12 02 F6 | 	mov	arg01, result1
1b85c     B8 A6 B0 FD | 	call	#__system___lockmem
1b860     B2 01 00 FF 
1b864     79 15 06 F6 | 	mov	arg02, ##@LR__5937
1b868     00 12 06 F6 | 	mov	arg01, #0
1b86c     00 16 06 F6 | 	mov	arg03, #0
1b870     98 B3 B0 FD | 	call	#__system___basic_print_string
1b874     00 12 06 F6 | 	mov	arg01, #0
1b878     C4 03 B1 FD | 	call	#__system___getiolock_0602
1b87c     FD 00 68 FC | 	wrlong	#0, result1
1b880     27 12 06 F6 | 	mov	arg01, #39
1b884     00 14 06 F6 | 	mov	arg02, #0
1b888     A0 6C B0 FD | 	call	#_printerror
1b88c     60 02 90 FD | 	jmp	#LR__2213
1b890                 | LR__2200
1b890     4C 1A BF FD | 	call	#_pop
1b894     FF 16 02 F6 | 	mov	arg03, result3
1b898     A7 FA 61 FC | 	wrlong	result1, fp
1b89c     04 4E 05 F1 | 	add	fp, #4
1b8a0     A7 FC 61 FC | 	wrlong	result2, fp
1b8a4     04 4E 05 F1 | 	add	fp, #4
1b8a8     A7 16 62 FC | 	wrlong	arg03, fp
1b8ac                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1b8ac     08 4E 85 F1 | 	sub	fp, #8
1b8b0     2B 16 0E F2 | 	cmp	arg03, #43 wz
1b8b4     18 00 90 5D |  if_ne	jmp	#LR__2201
1b8b8     A7 12 02 FB | 	rdlong	arg01, fp
1b8bc     98 1B BF FD | 	call	#_convertstring
1b8c0     A7 FA 61 FC | 	wrlong	result1, fp
1b8c4     08 4E 05 F1 | 	add	fp, #8
1b8c8     A7 3E 68 FC | 	wrlong	#31, fp
1b8cc     08 4E 85 F1 | 	sub	fp, #8
1b8d0                 | LR__2201
1b8d0                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1b8d0     08 4E 05 F1 | 	add	fp, #8
1b8d4     A7 16 02 FB | 	rdlong	arg03, fp
1b8d8     08 4E 85 F1 | 	sub	fp, #8
1b8dc     1F 16 0E F2 | 	cmp	arg03, #31 wz
1b8e0     40 00 90 AD |  if_e	jmp	#LR__2202
1b8e4     00 12 06 F6 | 	mov	arg01, #0
1b8e8     54 03 B1 FD | 	call	#__system___getiolock_0602
1b8ec     FD 12 02 F6 | 	mov	arg01, result1
1b8f0     24 A6 B0 FD | 	call	#__system___lockmem
1b8f4     B2 01 00 FF 
1b8f8     7F 15 06 F6 | 	mov	arg02, ##@LR__5938
1b8fc     00 12 06 F6 | 	mov	arg01, #0
1b900     00 16 06 F6 | 	mov	arg03, #0
1b904     04 B3 B0 FD | 	call	#__system___basic_print_string
1b908     00 12 06 F6 | 	mov	arg01, #0
1b90c     30 03 B1 FD | 	call	#__system___getiolock_0602
1b910     FD 00 68 FC | 	wrlong	#0, result1
1b914     0F 12 06 F6 | 	mov	arg01, #15
1b918     00 14 06 F6 | 	mov	arg02, #0
1b91c     0C 6C B0 FD | 	call	#_printerror
1b920     CC 01 90 FD | 	jmp	#LR__2213
1b924                 | LR__2202
1b924                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1b924     A7 12 02 FB | 	rdlong	arg01, fp
1b928     01 14 06 F6 | 	mov	arg02, #1
1b92c     64 C6 B0 FD | 	call	#__system__Left_S
1b930     FD 12 02 F6 | 	mov	arg01, result1
1b934     B2 01 00 FF 
1b938     85 15 06 F6 | 	mov	arg02, ##@LR__5939
1b93c     00 A6 B0 FD | 	call	#__system___string_cmp
1b940     00 FA 0D F2 | 	cmp	result1, #0 wz
1b944     48 00 90 5D |  if_ne	jmp	#LR__2205
1b948     B2 01 00 FF 
1b94c     87 27 06 F6 | 	mov	local01, ##@LR__5940
1b950     A7 16 02 FB | 	rdlong	arg03, fp
1b954     0B 13 02 F6 | 	mov	arg01, arg03
1b958     09 29 02 F6 | 	mov	local02, arg01
1b95c     97 06 48 FB | 	callpa	#(@LR__2204-@LR__2203)>>2,fcache_load_ptr_
1b960                 | LR__2203
1b960     14 FB C9 FA | 	rdbyte	result1, local02 wz
1b964     01 28 06 51 |  if_ne	add	local02, #1
1b968     F4 FF 9F 5D |  if_ne	jmp	#LR__2203
1b96c                 | LR__2204
1b96c     09 29 82 F1 | 	sub	local02, arg01
1b970     14 15 02 F6 | 	mov	arg02, local02
1b974     01 14 86 F1 | 	sub	arg02, #1
1b978     0B 13 02 F6 | 	mov	arg01, arg03
1b97c     9C C6 B0 FD | 	call	#__system__Right_S
1b980     FD 14 02 F6 | 	mov	arg02, result1
1b984     13 13 02 F6 | 	mov	arg01, local01
1b988     E8 A5 B0 FD | 	call	#__system___string_concat
1b98c     A7 FA 61 FC | 	wrlong	result1, fp
1b990                 | LR__2205
1b990                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1b990     A7 12 02 FB | 	rdlong	arg01, fp
1b994     01 14 06 F6 | 	mov	arg02, #1
1b998     F8 C5 B0 FD | 	call	#__system__Left_S
1b99c     FD 12 02 F6 | 	mov	arg01, result1
1b9a0     B2 01 00 FF 
1b9a4     8A 15 06 F6 | 	mov	arg02, ##@LR__5941
1b9a8     94 A5 B0 FD | 	call	#__system___string_cmp
1b9ac     00 FA 0D F2 | 	cmp	result1, #0 wz
1b9b0     48 00 90 5D |  if_ne	jmp	#LR__2208
1b9b4     B2 01 00 FF 
1b9b8     8C 27 06 F6 | 	mov	local01, ##@LR__5942
1b9bc     A7 16 02 FB | 	rdlong	arg03, fp
1b9c0     0B 13 02 F6 | 	mov	arg01, arg03
1b9c4     09 29 02 F6 | 	mov	local02, arg01
1b9c8     97 06 48 FB | 	callpa	#(@LR__2207-@LR__2206)>>2,fcache_load_ptr_
1b9cc                 | LR__2206
1b9cc     14 FB C9 FA | 	rdbyte	result1, local02 wz
1b9d0     01 28 06 51 |  if_ne	add	local02, #1
1b9d4     F4 FF 9F 5D |  if_ne	jmp	#LR__2206
1b9d8                 | LR__2207
1b9d8     09 29 82 F1 | 	sub	local02, arg01
1b9dc     14 15 02 F6 | 	mov	arg02, local02
1b9e0     01 14 86 F1 | 	sub	arg02, #1
1b9e4     0B 13 02 F6 | 	mov	arg01, arg03
1b9e8     30 C6 B0 FD | 	call	#__system__Right_S
1b9ec     FD 14 02 F6 | 	mov	arg02, result1
1b9f0     13 13 02 F6 | 	mov	arg01, local01
1b9f4     7C A5 B0 FD | 	call	#__system___string_concat
1b9f8     A7 FA 61 FC | 	wrlong	result1, fp
1b9fc                 | LR__2208
1b9fc     A7 12 02 FB | 	rdlong	arg01, fp
1ba00     98 DB B0 FD | 	call	#__system____builtin_atof
1ba04     1C 4E 05 F1 | 	add	fp, #28
1ba08     A7 FA 61 FC | 	wrlong	result1, fp
1ba0c     1C 4E 85 F1 | 	sub	fp, #28
1ba10     A7 12 02 FB | 	rdlong	arg01, fp
1ba14     00 14 06 F6 | 	mov	arg02, #0
1ba18     EC D9 B0 FD | 	call	#__system____builtin_atoi
1ba1c     18 4E 05 F1 | 	add	fp, #24
1ba20     A7 FA 61 FC | 	wrlong	result1, fp
1ba24                 | ' fval=val(t1.result.sresult)
1ba24                 | ' ival=val%(t1.result.sresult)
1ba24                 | ' if fval=ival then
1ba24     04 4E 05 F1 | 	add	fp, #4
1ba28     A7 26 02 FB | 	rdlong	local01, fp
1ba2c     1C 4E 85 F1 | 	sub	fp, #28
1ba30     FD 12 52 F6 | 	abs	arg01, result1 wc
1ba34     1F 2A C6 C9 |  if_b	decod	local03, #31
1ba38     00 2A 06 36 |  if_ae	mov	local03, #0
1ba3c     4C CF B0 FD | 	call	#__system___float_fromuns
1ba40     15 FB 61 F5 | 	xor	result1, local03
1ba44     FD 14 02 F6 | 	mov	arg02, result1
1ba48     13 13 02 F6 | 	mov	arg01, local01
1ba4c     01 16 06 F6 | 	mov	arg03, #1
1ba50     70 D7 B0 FD | 	call	#__system___float_cmp
1ba54     00 FA 0D F2 | 	cmp	result1, #0 wz
1ba58     20 00 90 5D |  if_ne	jmp	#LR__2209
1ba5c     18 4E 05 F1 | 	add	fp, #24
1ba60     A7 26 02 FB | 	rdlong	local01, fp
1ba64     18 4E 85 F1 | 	sub	fp, #24
1ba68     A7 26 62 FC | 	wrlong	local01, fp
1ba6c     08 4E 05 F1 | 	add	fp, #8
1ba70     A7 38 68 FC | 	wrlong	#28, fp
1ba74     08 4E 85 F1 | 	sub	fp, #8
1ba78     6C 00 90 FD | 	jmp	#LR__2212
1ba7c                 | LR__2209
1ba7c                 | '   if fval=0 andalso ival<>0 then
1ba7c     1C 4E 05 F1 | 	add	fp, #28
1ba80     A7 12 02 FB | 	rdlong	arg01, fp
1ba84     1C 4E 85 F1 | 	sub	fp, #28
1ba88     00 14 06 F6 | 	mov	arg02, #0
1ba8c     01 16 06 F6 | 	mov	arg03, #1
1ba90     30 D7 B0 FD | 	call	#__system___float_cmp
1ba94     00 FA 0D F2 | 	cmp	result1, #0 wz
1ba98     30 00 90 5D |  if_ne	jmp	#LR__2210
1ba9c     18 4E 05 F1 | 	add	fp, #24
1baa0     A7 26 0A FB | 	rdlong	local01, fp wz
1baa4     18 4E 85 F1 | 	sub	fp, #24
1baa8     20 00 90 AD |  if_e	jmp	#LR__2210
1baac     18 4E 05 F1 | 	add	fp, #24
1bab0     A7 26 02 FB | 	rdlong	local01, fp
1bab4     18 4E 85 F1 | 	sub	fp, #24
1bab8     A7 26 62 FC | 	wrlong	local01, fp
1babc     08 4E 05 F1 | 	add	fp, #8
1bac0     A7 38 68 FC | 	wrlong	#28, fp
1bac4     08 4E 85 F1 | 	sub	fp, #8
1bac8     1C 00 90 FD | 	jmp	#LR__2211
1bacc                 | LR__2210
1bacc     1C 4E 05 F1 | 	add	fp, #28
1bad0     A7 26 02 FB | 	rdlong	local01, fp
1bad4     1C 4E 85 F1 | 	sub	fp, #28
1bad8     A7 26 62 FC | 	wrlong	local01, fp
1badc     08 4E 05 F1 | 	add	fp, #8
1bae0     A7 3C 68 FC | 	wrlong	#30, fp
1bae4     08 4E 85 F1 | 	sub	fp, #8
1bae8                 | LR__2211
1bae8                 | LR__2212
1bae8     A7 12 02 F6 | 	mov	arg01, fp
1baec     88 18 BF FD | 	call	#_push
1baf0                 | LR__2213
1baf0     A7 F0 03 F6 | 	mov	ptra, fp
1baf4     B2 00 A0 FD | 	call	#popregs_
1baf8                 | _do_val_ret
1baf8     2D 00 64 FD | 	ret
1bafc                 | 
1bafc                 | ' 
1bafc                 | ' ' ------------------ waitclock
1bafc                 | ' 
1bafc                 | ' sub do_waitclock
1bafc                 | _do_waitclock
1bafc     52 00 00 FF 
1bb00     94 E4 05 F1 | 	add	objptr, ##42132
1bb04     F2 00 02 FB | 	rdlong	_var01, objptr
1bb08                 | ' c=hkcnt
1bb08                 | ' do: loop until hkcnt<>c
1bb08                 | LR__2220
1bb08     F2 02 02 FB | 	rdlong	_var02, objptr
1bb0c     00 03 0A F2 | 	cmp	_var02, _var01 wz
1bb10     F4 FF 9F AD |  if_e	jmp	#LR__2220
1bb14     52 00 00 FF 
1bb18     94 E4 85 F1 | 	sub	objptr, ##42132
1bb1c                 | _do_waitclock_ret
1bb1c     2D 00 64 FD | 	ret
1bb20                 | 
1bb20                 | ' 
1bb20                 | ' ' ------------------ waitms
1bb20                 | ' 
1bb20                 | ' sub do_waitms
1bb20                 | _do_waitms
1bb20     01 4A 05 F6 | 	mov	COUNT_, #1
1bb24     A8 00 A0 FD | 	call	#pushregs_
1bb28     18 F0 07 F1 | 	add	ptra, #24
1bb2c     B0 17 BF FD | 	call	#_pop
1bb30     A7 FA 61 FC | 	wrlong	result1, fp
1bb34     04 4E 05 F1 | 	add	fp, #4
1bb38     A7 FC 61 FC | 	wrlong	result2, fp
1bb3c     04 4E 05 F1 | 	add	fp, #4
1bb40     A7 FE 61 FC | 	wrlong	result3, fp
1bb44     08 4E 85 F1 | 	sub	fp, #8
1bb48     A7 12 02 F6 | 	mov	arg01, fp
1bb4c     74 19 BF FD | 	call	#_converttoint
1bb50     0C 4E 05 F1 | 	add	fp, #12
1bb54     A7 FA 61 FC | 	wrlong	result1, fp
1bb58                 | ' 
1bb58                 | ' t1=pop()  
1bb58                 | ' t=converttoint(t1)
1bb58                 | ' if t<0 then return
1bb58     0C 4E 85 F1 | 	sub	fp, #12
1bb5c     00 FA 55 F2 | 	cmps	result1, #0 wc
1bb60     E4 00 90 CD |  if_b	jmp	#LR__2236
1bb64                 | ' if t < 1000 then 
1bb64     0C 4E 05 F1 | 	add	fp, #12
1bb68     A7 12 02 FB | 	rdlong	arg01, fp
1bb6c     0C 4E 85 F1 | 	sub	fp, #12
1bb70     01 00 00 FF 
1bb74     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
1bb78     14 00 90 3D |  if_ae	jmp	#LR__2230
1bb7c     0C 4E 05 F1 | 	add	fp, #12
1bb80     A7 12 02 FB | 	rdlong	arg01, fp
1bb84     0C 4E 85 F1 | 	sub	fp, #12
1bb88     80 A6 B0 FD | 	call	#__system___waitms
1bb8c     B8 00 90 FD | 	jmp	#LR__2235
1bb90                 | LR__2230
1bb90     10 4E 05 F1 | 	add	fp, #16
1bb94     A7 02 68 FC | 	wrlong	#1, fp
1bb98     04 4E 85 F1 | 	sub	fp, #4
1bb9c     A7 12 02 FB | 	rdlong	arg01, fp
1bba0     09 13 52 F6 | 	abs	arg01, arg01 wc
1bba4     01 00 00 FF 
1bba8     E8 13 16 FD | 	qdiv	arg01, ##1000
1bbac                 | '   for i=1 to t/1000
1bbac     0C 4E 85 F1 | 	sub	fp, #12
1bbb0     18 26 62 FD | 	getqx	local01
1bbb4     13 27 82 F6 | 	negc	local01, local01
1bbb8     01 26 06 F1 | 	add	local01, #1
1bbbc                 | LR__2231
1bbbc     10 4E 05 F1 | 	add	fp, #16
1bbc0     A7 12 02 FB | 	rdlong	arg01, fp
1bbc4     10 4E 85 F1 | 	sub	fp, #16
1bbc8     13 13 52 F2 | 	cmps	arg01, local01 wc
1bbcc     54 00 90 3D |  if_ae	jmp	#LR__2234
1bbd0     01 00 00 FF 
1bbd4     E8 13 06 F6 | 	mov	arg01, ##1000
1bbd8     30 A6 B0 FD | 	call	#__system___waitms
1bbdc                 | '     waitms(1000)
1bbdc                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1bbdc     E0 12 06 F6 | 	mov	arg01, #224
1bbe0     3C 9A B0 FD | 	call	#_usbnew_spin2_keystate
1bbe4     00 FA 0D F2 | 	cmp	result1, #0 wz
1bbe8     10 00 90 5D |  if_ne	jmp	#LR__2232
1bbec     E4 12 06 F6 | 	mov	arg01, #228
1bbf0     2C 9A B0 FD | 	call	#_usbnew_spin2_keystate
1bbf4     00 FA 0D F2 | 	cmp	result1, #0 wz
1bbf8     10 00 90 AD |  if_e	jmp	#LR__2233
1bbfc                 | LR__2232
1bbfc     06 12 06 F6 | 	mov	arg01, #6
1bc00     1C 9A B0 FD | 	call	#_usbnew_spin2_keystate
1bc04     00 FA 0D F2 | 	cmp	result1, #0 wz
1bc08     3C 00 90 5D |  if_ne	jmp	#LR__2236
1bc0c                 | LR__2233
1bc0c     10 4E 05 F1 | 	add	fp, #16
1bc10     A7 12 02 FB | 	rdlong	arg01, fp
1bc14     01 12 06 F1 | 	add	arg01, #1
1bc18     A7 12 62 FC | 	wrlong	arg01, fp
1bc1c     10 4E 85 F1 | 	sub	fp, #16
1bc20     98 FF 9F FD | 	jmp	#LR__2231
1bc24                 | LR__2234
1bc24     0C 4E 05 F1 | 	add	fp, #12
1bc28     A7 26 02 FB | 	rdlong	local01, fp
1bc2c     13 27 52 F6 | 	abs	local01, local01 wc
1bc30     01 00 00 FF 
1bc34     E8 27 16 FD | 	qdiv	local01, ##1000
1bc38     0C 4E 85 F1 | 	sub	fp, #12
1bc3c     19 26 62 FD | 	getqy	local01
1bc40     13 13 82 F6 | 	negc	arg01, local01
1bc44     C4 A5 B0 FD | 	call	#__system___waitms
1bc48                 | LR__2235
1bc48                 | LR__2236
1bc48     A7 F0 03 F6 | 	mov	ptra, fp
1bc4c     B2 00 A0 FD | 	call	#popregs_
1bc50                 | _do_waitms_ret
1bc50     2D 00 64 FD | 	ret
1bc54                 | 
1bc54                 | ' 
1bc54                 | ' ' ------------------ waitvbl
1bc54                 | ' 
1bc54                 | ' sub do_waitvbl
1bc54                 | _do_waitvbl
1bc54     01 12 06 F6 | 	mov	arg01, #1
1bc58     C8 85 B0 FD | 	call	#_hg010b_spin2_waitvbl
1bc5c                 | _do_waitvbl_ret
1bc5c     2D 00 64 FD | 	ret
1bc60                 | 
1bc60                 | ' 
1bc60                 | ' ' ------------------ wrpin
1bc60                 | ' 
1bc60                 | ' sub do_wrpin
1bc60                 | _do_wrpin
1bc60     01 4A 05 F6 | 	mov	COUNT_, #1
1bc64     A8 00 A0 FD | 	call	#pushregs_
1bc68     18 F0 07 F1 | 	add	ptra, #24
1bc6c     70 16 BF FD | 	call	#_pop
1bc70     FD 14 02 F6 | 	mov	arg02, result1
1bc74     FE 12 02 F6 | 	mov	arg01, result2
1bc78     FF 26 02 F6 | 	mov	local01, result3
1bc7c     A7 14 62 FC | 	wrlong	arg02, fp
1bc80     04 4E 05 F1 | 	add	fp, #4
1bc84     A7 12 62 FC | 	wrlong	arg01, fp
1bc88     04 4E 05 F1 | 	add	fp, #4
1bc8c     A7 26 62 FC | 	wrlong	local01, fp
1bc90     08 4E 85 F1 | 	sub	fp, #8
1bc94     48 16 BF FD | 	call	#_pop
1bc98     FF 26 02 F6 | 	mov	local01, result3
1bc9c     0C 4E 05 F1 | 	add	fp, #12
1bca0     A7 FA 61 FC | 	wrlong	result1, fp
1bca4     04 4E 05 F1 | 	add	fp, #4
1bca8     A7 FC 61 FC | 	wrlong	result2, fp
1bcac     04 4E 05 F1 | 	add	fp, #4
1bcb0     A7 26 62 FC | 	wrlong	local01, fp
1bcb4     08 4E 85 F1 | 	sub	fp, #8
1bcb8     A7 12 02 F6 | 	mov	arg01, fp
1bcbc     0C 4E 85 F1 | 	sub	fp, #12
1bcc0     00 18 BF FD | 	call	#_converttoint
1bcc4     FD 26 02 F6 | 	mov	local01, result1
1bcc8     A7 12 02 F6 | 	mov	arg01, fp
1bccc     F4 17 BF FD | 	call	#_converttoint
1bcd0     13 FB 01 FC | 	wrpin	result1, local01
1bcd4     A7 F0 03 F6 | 	mov	ptra, fp
1bcd8     B2 00 A0 FD | 	call	#popregs_
1bcdc                 | _do_wrpin_ret
1bcdc     2D 00 64 FD | 	ret
1bce0                 | 
1bce0                 | ' 
1bce0                 | ' ' ------------------ wxpin
1bce0                 | ' 
1bce0                 | ' sub do_wxpin
1bce0                 | _do_wxpin
1bce0     01 4A 05 F6 | 	mov	COUNT_, #1
1bce4     A8 00 A0 FD | 	call	#pushregs_
1bce8     18 F0 07 F1 | 	add	ptra, #24
1bcec     F0 15 BF FD | 	call	#_pop
1bcf0     FD 14 02 F6 | 	mov	arg02, result1
1bcf4     FE 12 02 F6 | 	mov	arg01, result2
1bcf8     FF 26 02 F6 | 	mov	local01, result3
1bcfc     A7 14 62 FC | 	wrlong	arg02, fp
1bd00     04 4E 05 F1 | 	add	fp, #4
1bd04     A7 12 62 FC | 	wrlong	arg01, fp
1bd08     04 4E 05 F1 | 	add	fp, #4
1bd0c     A7 26 62 FC | 	wrlong	local01, fp
1bd10     08 4E 85 F1 | 	sub	fp, #8
1bd14     C8 15 BF FD | 	call	#_pop
1bd18     FF 26 02 F6 | 	mov	local01, result3
1bd1c     0C 4E 05 F1 | 	add	fp, #12
1bd20     A7 FA 61 FC | 	wrlong	result1, fp
1bd24     04 4E 05 F1 | 	add	fp, #4
1bd28     A7 FC 61 FC | 	wrlong	result2, fp
1bd2c     04 4E 05 F1 | 	add	fp, #4
1bd30     A7 26 62 FC | 	wrlong	local01, fp
1bd34     08 4E 85 F1 | 	sub	fp, #8
1bd38     A7 12 02 F6 | 	mov	arg01, fp
1bd3c     0C 4E 85 F1 | 	sub	fp, #12
1bd40     80 17 BF FD | 	call	#_converttoint
1bd44     FD 26 02 F6 | 	mov	local01, result1
1bd48     A7 12 02 F6 | 	mov	arg01, fp
1bd4c     74 17 BF FD | 	call	#_converttoint
1bd50     13 FB 11 FC | 	wxpin	result1, local01
1bd54     A7 F0 03 F6 | 	mov	ptra, fp
1bd58     B2 00 A0 FD | 	call	#popregs_
1bd5c                 | _do_wxpin_ret
1bd5c     2D 00 64 FD | 	ret
1bd60                 | 
1bd60                 | ' 
1bd60                 | ' ' ------------------ wypin
1bd60                 | ' 
1bd60                 | ' sub do_wypin
1bd60                 | _do_wypin
1bd60     01 4A 05 F6 | 	mov	COUNT_, #1
1bd64     A8 00 A0 FD | 	call	#pushregs_
1bd68     18 F0 07 F1 | 	add	ptra, #24
1bd6c     70 15 BF FD | 	call	#_pop
1bd70     FD 14 02 F6 | 	mov	arg02, result1
1bd74     FE 12 02 F6 | 	mov	arg01, result2
1bd78     FF 26 02 F6 | 	mov	local01, result3
1bd7c     A7 14 62 FC | 	wrlong	arg02, fp
1bd80     04 4E 05 F1 | 	add	fp, #4
1bd84     A7 12 62 FC | 	wrlong	arg01, fp
1bd88     04 4E 05 F1 | 	add	fp, #4
1bd8c     A7 26 62 FC | 	wrlong	local01, fp
1bd90     08 4E 85 F1 | 	sub	fp, #8
1bd94     48 15 BF FD | 	call	#_pop
1bd98     FF 26 02 F6 | 	mov	local01, result3
1bd9c     0C 4E 05 F1 | 	add	fp, #12
1bda0     A7 FA 61 FC | 	wrlong	result1, fp
1bda4     04 4E 05 F1 | 	add	fp, #4
1bda8     A7 FC 61 FC | 	wrlong	result2, fp
1bdac     04 4E 05 F1 | 	add	fp, #4
1bdb0     A7 26 62 FC | 	wrlong	local01, fp
1bdb4     08 4E 85 F1 | 	sub	fp, #8
1bdb8     A7 12 02 F6 | 	mov	arg01, fp
1bdbc     0C 4E 85 F1 | 	sub	fp, #12
1bdc0     00 17 BF FD | 	call	#_converttoint
1bdc4     FD 26 02 F6 | 	mov	local01, result1
1bdc8     A7 12 02 F6 | 	mov	arg01, fp
1bdcc     F4 16 BF FD | 	call	#_converttoint
1bdd0     13 FB 21 FC | 	wypin	result1, local01
1bdd4     A7 F0 03 F6 | 	mov	ptra, fp
1bdd8     B2 00 A0 FD | 	call	#popregs_
1bddc                 | _do_wypin_ret
1bddc     2D 00 64 FD | 	ret
1bde0                 | 
1bde0                 | ' 
1bde0                 | ' 
1bde0                 | ' 
1bde0                 | ' 
1bde0                 | ' 
1bde0                 | ' 
1bde0                 | ' 
1bde0                 | ' 
1bde0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1bde0                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1bde0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1bde0                 | ' 
1bde0                 | ' 
1bde0                 | ' '------------------ Assign
1bde0                 | ' 
1bde0                 | ' sub do_assign
1bde0                 | _do_assign
1bde0     05 4A 05 F6 | 	mov	COUNT_, #5
1bde4     A8 00 A0 FD | 	call	#pushregs_
1bde8     44 F0 07 F1 | 	add	ptra, #68
1bdec     4A 00 00 FF 
1bdf0     80 E4 05 F1 | 	add	objptr, ##38016
1bdf4     F2 16 02 FB | 	rdlong	arg03, objptr
1bdf8     0B 15 02 F6 | 	mov	arg02, arg03
1bdfc     01 14 66 F0 | 	shl	arg02, #1
1be00     0B 15 02 F1 | 	add	arg02, arg03
1be04     02 14 66 F0 | 	shl	arg02, #2
1be08     03 00 00 FF 
1be0c     04 E4 85 F1 | 	sub	objptr, ##1540
1be10     F2 14 02 F1 | 	add	arg02, objptr
1be14     0A 15 02 FB | 	rdlong	arg02, arg02
1be18     18 4E 05 F1 | 	add	fp, #24
1be1c     A7 14 62 FC | 	wrlong	arg02, fp
1be20                 | ' 
1be20                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1be20                 | ' if variables(varnum).vartype<array_no_type then 
1be20     18 4E 85 F1 | 	sub	fp, #24
1be24     04 14 66 F0 | 	shl	arg02, #4
1be28     32 00 00 FF 
1be2c     84 E4 85 F1 | 	sub	objptr, ##25732
1be30     F2 14 02 F1 | 	add	arg02, objptr
1be34     0C 14 06 F1 | 	add	arg02, #12
1be38     0A 17 02 FB | 	rdlong	arg03, arg02
1be3c     00 17 16 F2 | 	cmp	arg03, #256 wc
1be40     14 00 00 FF 
1be44     F8 E5 85 F1 | 	sub	objptr, ##10744
1be48     18 01 90 3D |  if_ae	jmp	#LR__2240
1be4c     90 14 BF FD | 	call	#_pop
1be50     A7 FA 61 FC | 	wrlong	result1, fp
1be54     04 4E 05 F1 | 	add	fp, #4
1be58     A7 FC 61 FC | 	wrlong	result2, fp
1be5c     04 4E 05 F1 | 	add	fp, #4
1be60     A7 FE 61 FC | 	wrlong	result3, fp
1be64     08 4E 85 F1 | 	sub	fp, #8
1be68     A7 16 02 FB | 	rdlong	arg03, fp
1be6c     04 4E 05 F1 | 	add	fp, #4
1be70     A7 14 02 FB | 	rdlong	arg02, fp
1be74     14 4E 05 F1 | 	add	fp, #20
1be78     A7 12 02 FB | 	rdlong	arg01, fp
1be7c     04 12 66 F0 | 	shl	arg01, #4
1be80     14 00 00 FF 
1be84     F8 E5 05 F1 | 	add	objptr, ##10744
1be88     F2 12 02 F1 | 	add	arg01, objptr
1be8c     04 12 06 F1 | 	add	arg01, #4
1be90     09 17 62 FC | 	wrlong	arg03, arg01
1be94     A7 16 02 FB | 	rdlong	arg03, fp
1be98     04 16 66 F0 | 	shl	arg03, #4
1be9c     F2 16 02 F1 | 	add	arg03, objptr
1bea0     08 16 06 F1 | 	add	arg03, #8
1bea4     0B 15 62 FC | 	wrlong	arg02, arg03
1bea8     A7 16 02 FB | 	rdlong	arg03, fp
1beac     04 16 66 F0 | 	shl	arg03, #4
1beb0     F2 16 02 F1 | 	add	arg03, objptr
1beb4     10 4E 85 F1 | 	sub	fp, #16
1beb8     A7 14 02 FB | 	rdlong	arg02, fp
1bebc     0C 16 06 F1 | 	add	arg03, #12
1bec0     0B 15 62 FC | 	wrlong	arg02, arg03
1bec4                 | '   t1=pop() 
1bec4                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1bec4                 | '   if variables(varnum).vartype<>result_string2 then return
1bec4     10 4E 05 F1 | 	add	fp, #16
1bec8     A7 16 02 FB | 	rdlong	arg03, fp
1becc     18 4E 85 F1 | 	sub	fp, #24
1bed0     04 16 66 F0 | 	shl	arg03, #4
1bed4     F2 16 02 F1 | 	add	arg03, objptr
1bed8     0C 16 06 F1 | 	add	arg03, #12
1bedc     0B 17 02 FB | 	rdlong	arg03, arg03
1bee0     2B 16 0E F2 | 	cmp	arg03, #43 wz
1bee4     14 00 00 FF 
1bee8     F8 E5 85 F1 | 	sub	objptr, ##10744
1beec     EC 04 90 5D |  if_ne	jmp	#LR__2263
1bef0     18 4E 05 F1 | 	add	fp, #24
1bef4     A7 16 02 FB | 	rdlong	arg03, fp
1bef8     0B 27 02 F6 | 	mov	local01, arg03
1befc     04 26 66 F0 | 	shl	local01, #4
1bf00     14 00 00 FF 
1bf04     F8 E5 05 F1 | 	add	objptr, ##10744
1bf08     F2 26 02 F1 | 	add	local01, objptr
1bf0c     18 4E 85 F1 | 	sub	fp, #24
1bf10     04 16 66 F0 | 	shl	arg03, #4
1bf14     F2 16 02 F1 | 	add	arg03, objptr
1bf18     04 16 06 F1 | 	add	arg03, #4
1bf1c     0B 13 02 FB | 	rdlong	arg01, arg03
1bf20     14 00 00 FF 
1bf24     F8 E5 85 F1 | 	sub	objptr, ##10744
1bf28     2C 15 BF FD | 	call	#_convertstring
1bf2c     04 26 06 F1 | 	add	local01, #4
1bf30     13 FB 61 FC | 	wrlong	result1, local01
1bf34     18 4E 05 F1 | 	add	fp, #24
1bf38     A7 26 02 FB | 	rdlong	local01, fp
1bf3c     18 4E 85 F1 | 	sub	fp, #24
1bf40     04 26 66 F0 | 	shl	local01, #4
1bf44     14 00 00 FF 
1bf48     F8 E5 05 F1 | 	add	objptr, ##10744
1bf4c     F2 26 02 F1 | 	add	local01, objptr
1bf50     0C 26 06 F1 | 	add	local01, #12
1bf54     13 3F 68 FC | 	wrlong	#31, local01
1bf58                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1bf58                 | '   variables(varnum).vartype=result_string
1bf58                 | '   return
1bf58     14 00 00 FF 
1bf5c     F8 E5 85 F1 | 	sub	objptr, ##10744
1bf60     78 04 90 FD | 	jmp	#LR__2263
1bf64                 | LR__2240
1bf64                 | ' for i=0 to 2 : arrid(i)=0 : next i
1bf64     1C 4E 05 F1 | 	add	fp, #28
1bf68     A7 00 68 FC | 	wrlong	#0, fp
1bf6c     97 16 48 FB | 	callpa	#(@LR__2242-@LR__2241)>>2,fcache_load_ptr_
1bf70                 | LR__2241
1bf70     A7 26 02 FB | 	rdlong	local01, fp
1bf74     02 26 66 F0 | 	shl	local01, #2
1bf78     18 4E 05 F1 | 	add	fp, #24
1bf7c     A7 26 02 F1 | 	add	local01, fp
1bf80     13 01 68 FC | 	wrlong	#0, local01
1bf84     18 4E 85 F1 | 	sub	fp, #24
1bf88     A7 26 02 FB | 	rdlong	local01, fp
1bf8c     01 26 06 F1 | 	add	local01, #1
1bf90     A7 26 62 FC | 	wrlong	local01, fp
1bf94     03 26 16 F2 | 	cmp	local01, #3 wc
1bf98     D4 FF 9F CD |  if_b	jmp	#LR__2241
1bf9c                 | LR__2242
1bf9c     4A 00 00 FF 
1bfa0     80 E4 05 F1 | 	add	objptr, ##38016
1bfa4     F2 16 02 FB | 	rdlong	arg03, objptr
1bfa8     0B 27 02 F6 | 	mov	local01, arg03
1bfac     01 26 66 F0 | 	shl	local01, #1
1bfb0     0B 27 02 F1 | 	add	local01, arg03
1bfb4     02 26 66 F0 | 	shl	local01, #2
1bfb8     03 00 00 FF 
1bfbc     04 E4 85 F1 | 	sub	objptr, ##1540
1bfc0     F2 26 02 F1 | 	add	local01, objptr
1bfc4     04 26 06 F1 | 	add	local01, #4
1bfc8     13 29 02 FB | 	rdlong	local02, local01
1bfcc     04 4E 05 F1 | 	add	fp, #4
1bfd0     A7 28 62 FC | 	wrlong	local02, fp
1bfd4     20 4E 85 F1 | 	sub	fp, #32
1bfd8     47 00 00 FF 
1bfdc     7C E4 85 F1 | 	sub	objptr, ##36476
1bfe0     FC 12 BF FD | 	call	#_pop
1bfe4     A7 FA 61 FC | 	wrlong	result1, fp
1bfe8     04 4E 05 F1 | 	add	fp, #4
1bfec     A7 FC 61 FC | 	wrlong	result2, fp
1bff0     04 4E 05 F1 | 	add	fp, #4
1bff4     A7 FE 61 FC | 	wrlong	result3, fp
1bff8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1bff8                 | ' t1=pop() ' var value
1bff8                 | ' if numpar>0 then
1bff8     18 4E 05 F1 | 	add	fp, #24
1bffc     A7 2A 02 FB | 	rdlong	local03, fp
1c000     20 4E 85 F1 | 	sub	fp, #32
1c004     01 2A 16 F2 | 	cmp	local03, #1 wc
1c008     78 00 90 CD |  if_b	jmp	#LR__2245
1c00c                 | '   for i=numpar to 1 step -1
1c00c     20 4E 05 F1 | 	add	fp, #32
1c010     A7 2C 0A FB | 	rdlong	local04, fp wz
1c014     04 4E 85 F1 | 	sub	fp, #4
1c018     A7 2C 62 FC | 	wrlong	local04, fp
1c01c     1C 4E 85 F1 | 	sub	fp, #28
1c020     60 00 90 AD |  if_e	jmp	#LR__2244
1c024                 | LR__2243
1c024     B8 12 BF FD | 	call	#_pop
1c028     0C 4E 05 F1 | 	add	fp, #12
1c02c     A7 FA 61 FC | 	wrlong	result1, fp
1c030     04 4E 05 F1 | 	add	fp, #4
1c034     A7 FC 61 FC | 	wrlong	result2, fp
1c038     04 4E 05 F1 | 	add	fp, #4
1c03c     A7 FE 61 FC | 	wrlong	result3, fp
1c040     08 4E 05 F1 | 	add	fp, #8
1c044     A7 2A 02 FB | 	rdlong	local03, fp
1c048     01 2A 86 F1 | 	sub	local03, #1
1c04c     02 2A 66 F0 | 	shl	local03, #2
1c050     18 4E 05 F1 | 	add	fp, #24
1c054     A7 2A 02 F1 | 	add	local03, fp
1c058     28 4E 85 F1 | 	sub	fp, #40
1c05c     A7 12 02 F6 | 	mov	arg01, fp
1c060     0C 4E 85 F1 | 	sub	fp, #12
1c064     5C 14 BF FD | 	call	#_converttoint
1c068     15 FB 61 FC | 	wrlong	result1, local03
1c06c     1C 4E 05 F1 | 	add	fp, #28
1c070     A7 2C 02 FB | 	rdlong	local04, fp
1c074     01 2C 8E F1 | 	sub	local04, #1 wz
1c078     A7 2C 62 FC | 	wrlong	local04, fp
1c07c     1C 4E 85 F1 | 	sub	fp, #28
1c080     A0 FF 9F 5D |  if_ne	jmp	#LR__2243
1c084                 | LR__2244
1c084                 | LR__2245
1c084     18 4E 05 F1 | 	add	fp, #24
1c088     A7 26 02 FB | 	rdlong	local01, fp
1c08c     04 26 66 F0 | 	shl	local01, #4
1c090     14 00 00 FF 
1c094     F8 E5 05 F1 | 	add	objptr, ##10744
1c098     F2 26 02 F1 | 	add	local01, objptr
1c09c     04 26 06 F1 | 	add	local01, #4
1c0a0     13 13 02 FB | 	rdlong	arg01, local01
1c0a4     0C 4E 05 F1 | 	add	fp, #12
1c0a8     A7 12 62 FC | 	wrlong	arg01, fp
1c0ac     24 4E 85 F1 | 	sub	fp, #36
1c0b0     14 00 00 FF 
1c0b4     F8 E5 85 F1 | 	sub	objptr, ##10744
1c0b8     40 67 B0 FD | 	call	#_pslpeek
1c0bc     FD 2C 32 F9 | 	getword	local04, result1, #0
1c0c0     28 4E 05 F1 | 	add	fp, #40
1c0c4     A7 2C 62 FC | 	wrlong	local04, fp
1c0c8     04 4E 85 F1 | 	sub	fp, #4
1c0cc     A7 12 02 FB | 	rdlong	arg01, fp
1c0d0     24 4E 85 F1 | 	sub	fp, #36
1c0d4     02 12 06 F1 | 	add	arg01, #2
1c0d8     C8 66 B0 FD | 	call	#_pspeek
1c0dc     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c0e0     2C 4E 05 F1 | 	add	fp, #44
1c0e4     A7 FA 61 FC | 	wrlong	result1, fp
1c0e8                 | ' esize=pspeek(arrptr+2)
1c0e8                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1c0e8     08 4E 85 F1 | 	sub	fp, #8
1c0ec     A7 12 02 FB | 	rdlong	arg01, fp
1c0f0     24 4E 85 F1 | 	sub	fp, #36
1c0f4     04 12 06 F1 | 	add	arg01, #4
1c0f8     00 67 B0 FD | 	call	#_pslpeek
1c0fc     FD 2C 02 F6 | 	mov	local04, result1
1c100     34 4E 05 F1 | 	add	fp, #52
1c104     A7 26 02 FB | 	rdlong	local01, fp
1c108     34 4E 85 F1 | 	sub	fp, #52
1c10c     16 27 12 F2 | 	cmp	local01, local04 wc
1c110     54 00 90 3D |  if_ae	jmp	#LR__2246
1c114     24 4E 05 F1 | 	add	fp, #36
1c118     A7 12 02 FB | 	rdlong	arg01, fp
1c11c     24 4E 85 F1 | 	sub	fp, #36
1c120     08 12 06 F1 | 	add	arg01, #8
1c124     D4 66 B0 FD | 	call	#_pslpeek
1c128     FD 26 02 F6 | 	mov	local01, result1
1c12c     38 4E 05 F1 | 	add	fp, #56
1c130     A7 2C 02 FB | 	rdlong	local04, fp
1c134     38 4E 85 F1 | 	sub	fp, #56
1c138     13 2D 12 F2 | 	cmp	local04, local01 wc
1c13c     28 00 90 3D |  if_ae	jmp	#LR__2246
1c140     24 4E 05 F1 | 	add	fp, #36
1c144     A7 12 02 FB | 	rdlong	arg01, fp
1c148     24 4E 85 F1 | 	sub	fp, #36
1c14c     0C 12 06 F1 | 	add	arg01, #12
1c150     A8 66 B0 FD | 	call	#_pslpeek
1c154     3C 4E 05 F1 | 	add	fp, #60
1c158     A7 2C 02 FB | 	rdlong	local04, fp
1c15c     3C 4E 85 F1 | 	sub	fp, #60
1c160     FD 2C 12 F2 | 	cmp	local04, result1 wc
1c164     10 00 90 CD |  if_b	jmp	#LR__2247
1c168                 | LR__2246
1c168     31 12 06 F6 | 	mov	arg01, #49
1c16c     00 14 06 F6 | 	mov	arg02, #0
1c170     B8 63 B0 FD | 	call	#_printerror
1c174     64 02 90 FD | 	jmp	#LR__2263
1c178                 | LR__2247
1c178     24 4E 05 F1 | 	add	fp, #36
1c17c     A7 12 02 FB | 	rdlong	arg01, fp
1c180     09 2D 02 F6 | 	mov	local04, arg01
1c184     10 2C 06 F1 | 	add	local04, #16
1c188     24 4E 85 F1 | 	sub	fp, #36
1c18c     04 12 06 F1 | 	add	arg01, #4
1c190     68 66 B0 FD | 	call	#_pslpeek
1c194     FD 26 02 F6 | 	mov	local01, result1
1c198     38 4E 05 F1 | 	add	fp, #56
1c19c     A7 28 02 FB | 	rdlong	local02, fp
1c1a0     14 27 02 FD | 	qmul	local01, local02
1c1a4     04 4E 85 F1 | 	sub	fp, #4
1c1a8     A7 2A 02 FB | 	rdlong	local03, fp
1c1ac     10 4E 85 F1 | 	sub	fp, #16
1c1b0     A7 12 02 FB | 	rdlong	arg01, fp
1c1b4     24 4E 85 F1 | 	sub	fp, #36
1c1b8     08 12 06 F1 | 	add	arg01, #8
1c1bc     18 28 62 FD | 	getqx	local02
1c1c0     14 2B 02 F1 | 	add	local03, local02
1c1c4     34 66 B0 FD | 	call	#_pslpeek
1c1c8     FD 28 02 F6 | 	mov	local02, result1
1c1cc     24 4E 05 F1 | 	add	fp, #36
1c1d0     A7 12 02 FB | 	rdlong	arg01, fp
1c1d4     24 4E 85 F1 | 	sub	fp, #36
1c1d8     04 12 06 F1 | 	add	arg01, #4
1c1dc     1C 66 B0 FD | 	call	#_pslpeek
1c1e0     FD 28 02 FD | 	qmul	local02, result1
1c1e4     3C 4E 05 F1 | 	add	fp, #60
1c1e8     A7 28 02 FB | 	rdlong	local02, fp
1c1ec     18 26 62 FD | 	getqx	local01
1c1f0     14 27 02 FD | 	qmul	local01, local02
1c1f4     10 4E 85 F1 | 	sub	fp, #16
1c1f8     A7 28 02 FB | 	rdlong	local02, fp
1c1fc     18 26 62 FD | 	getqx	local01
1c200     13 2B 02 F1 | 	add	local03, local01
1c204     15 29 02 FD | 	qmul	local02, local03
1c208     04 4E 05 F1 | 	add	fp, #4
1c20c                 | ' 
1c20c                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1c20c                 | ' select case arrtype
1c20c     18 2A 62 FD | 	getqx	local03
1c210     15 2D 02 F1 | 	add	local04, local03
1c214     A7 2C 62 FC | 	wrlong	local04, fp
1c218     08 4E 85 F1 | 	sub	fp, #8
1c21c     A7 2E 02 FB | 	rdlong	local05, fp
1c220     28 4E 85 F1 | 	sub	fp, #40
1c224     00 2F 86 F1 | 	sub	local05, #256
1c228     0C 2E 26 F3 | 	fle	local05, #12
1c22c     30 2E 62 FD | 	jmprel	local05
1c230                 | LR__2248
1c230     30 00 90 FD | 	jmp	#LR__2249
1c234     58 00 90 FD | 	jmp	#LR__2250
1c238     6C 00 90 FD | 	jmp	#LR__2251
1c23c     80 00 90 FD | 	jmp	#LR__2252
1c240     B0 00 90 FD | 	jmp	#LR__2253
1c244     E0 00 90 FD | 	jmp	#LR__2254
1c248     F4 00 90 FD | 	jmp	#LR__2255
1c24c     08 01 90 FD | 	jmp	#LR__2256
1c250     1C 01 90 FD | 	jmp	#LR__2257
1c254     30 01 90 FD | 	jmp	#LR__2258
1c258     44 01 90 FD | 	jmp	#LR__2259
1c25c     58 01 90 FD | 	jmp	#LR__2260
1c260     6C 01 90 FD | 	jmp	#LR__2261
1c264                 | LR__2249
1c264     A7 12 02 F6 | 	mov	arg01, fp
1c268     30 4E 05 F1 | 	add	fp, #48
1c26c     A7 14 02 FB | 	rdlong	arg02, fp
1c270     30 4E 85 F1 | 	sub	fp, #48
1c274     0C 16 06 F6 | 	mov	arg03, #12
1c278     0B 00 00 FF 
1c27c     CC E4 05 F1 | 	add	objptr, ##5836
1c280     A8 90 B0 FD | 	call	#_psram_spin2_write
1c284     0B 00 00 FF 
1c288     CC E4 85 F1 | 	sub	objptr, ##5836
1c28c     4C 01 90 FD | 	jmp	#LR__2262
1c290                 | LR__2250
1c290     30 4E 05 F1 | 	add	fp, #48
1c294     A7 12 02 FB | 	rdlong	arg01, fp
1c298     30 4E 85 F1 | 	sub	fp, #48
1c29c     A7 14 02 FB | 	rdlong	arg02, fp
1c2a0     B8 64 B0 FD | 	call	#_pspoke
1c2a4     34 01 90 FD | 	jmp	#LR__2262
1c2a8                 | LR__2251
1c2a8     30 4E 05 F1 | 	add	fp, #48
1c2ac     A7 12 02 FB | 	rdlong	arg01, fp
1c2b0     30 4E 85 F1 | 	sub	fp, #48
1c2b4     A7 14 02 FB | 	rdlong	arg02, fp
1c2b8     A0 64 B0 FD | 	call	#_pspoke
1c2bc     1C 01 90 FD | 	jmp	#LR__2262
1c2c0                 | LR__2252
1c2c0     30 4E 05 F1 | 	add	fp, #48
1c2c4     A7 12 02 FB | 	rdlong	arg01, fp
1c2c8     30 4E 85 F1 | 	sub	fp, #48
1c2cc     A7 14 02 FB | 	rdlong	arg02, fp
1c2d0     88 64 B0 FD | 	call	#_pspoke
1c2d4     30 4E 05 F1 | 	add	fp, #48
1c2d8     A7 12 02 FB | 	rdlong	arg01, fp
1c2dc     30 4E 85 F1 | 	sub	fp, #48
1c2e0     01 12 06 F1 | 	add	arg01, #1
1c2e4     A7 14 02 FB | 	rdlong	arg02, fp
1c2e8     08 14 46 F0 | 	shr	arg02, #8
1c2ec     6C 64 B0 FD | 	call	#_pspoke
1c2f0     E8 00 90 FD | 	jmp	#LR__2262
1c2f4                 | LR__2253
1c2f4     30 4E 05 F1 | 	add	fp, #48
1c2f8     A7 12 02 FB | 	rdlong	arg01, fp
1c2fc     30 4E 85 F1 | 	sub	fp, #48
1c300     A7 14 02 FB | 	rdlong	arg02, fp
1c304     54 64 B0 FD | 	call	#_pspoke
1c308     30 4E 05 F1 | 	add	fp, #48
1c30c     A7 12 02 FB | 	rdlong	arg01, fp
1c310     30 4E 85 F1 | 	sub	fp, #48
1c314     01 12 06 F1 | 	add	arg01, #1
1c318     A7 14 02 FB | 	rdlong	arg02, fp
1c31c     08 14 46 F0 | 	shr	arg02, #8
1c320     38 64 B0 FD | 	call	#_pspoke
1c324     B4 00 90 FD | 	jmp	#LR__2262
1c328                 | LR__2254
1c328     30 4E 05 F1 | 	add	fp, #48
1c32c     A7 12 02 FB | 	rdlong	arg01, fp
1c330     30 4E 85 F1 | 	sub	fp, #48
1c334     A7 14 02 FB | 	rdlong	arg02, fp
1c338     90 63 B0 FD | 	call	#_pslpoke
1c33c     9C 00 90 FD | 	jmp	#LR__2262
1c340                 | LR__2255
1c340     30 4E 05 F1 | 	add	fp, #48
1c344     A7 12 02 FB | 	rdlong	arg01, fp
1c348     30 4E 85 F1 | 	sub	fp, #48
1c34c     A7 14 02 FB | 	rdlong	arg02, fp
1c350     78 63 B0 FD | 	call	#_pslpoke
1c354     84 00 90 FD | 	jmp	#LR__2262
1c358                 | LR__2256
1c358     30 4E 05 F1 | 	add	fp, #48
1c35c     A7 12 02 FB | 	rdlong	arg01, fp
1c360     30 4E 85 F1 | 	sub	fp, #48
1c364     A7 14 02 FB | 	rdlong	arg02, fp
1c368     60 63 B0 FD | 	call	#_pslpoke
1c36c     6C 00 90 FD | 	jmp	#LR__2262
1c370                 | LR__2257
1c370     30 4E 05 F1 | 	add	fp, #48
1c374     A7 12 02 FB | 	rdlong	arg01, fp
1c378     30 4E 85 F1 | 	sub	fp, #48
1c37c     A7 14 02 FB | 	rdlong	arg02, fp
1c380     48 63 B0 FD | 	call	#_pslpoke
1c384     54 00 90 FD | 	jmp	#LR__2262
1c388                 | LR__2258
1c388     30 4E 05 F1 | 	add	fp, #48
1c38c     A7 12 02 FB | 	rdlong	arg01, fp
1c390     30 4E 85 F1 | 	sub	fp, #48
1c394     A7 14 02 FB | 	rdlong	arg02, fp
1c398     30 63 B0 FD | 	call	#_pslpoke
1c39c     3C 00 90 FD | 	jmp	#LR__2262
1c3a0                 | LR__2259
1c3a0     30 4E 05 F1 | 	add	fp, #48
1c3a4     A7 12 02 FB | 	rdlong	arg01, fp
1c3a8     30 4E 85 F1 | 	sub	fp, #48
1c3ac     A7 14 02 FB | 	rdlong	arg02, fp
1c3b0     18 63 B0 FD | 	call	#_pslpoke
1c3b4     24 00 90 FD | 	jmp	#LR__2262
1c3b8                 | LR__2260
1c3b8     30 4E 05 F1 | 	add	fp, #48
1c3bc     A7 12 02 FB | 	rdlong	arg01, fp
1c3c0     30 4E 85 F1 | 	sub	fp, #48
1c3c4     A7 14 02 FB | 	rdlong	arg02, fp
1c3c8     00 63 B0 FD | 	call	#_pslpoke
1c3cc     0C 00 90 FD | 	jmp	#LR__2262
1c3d0                 | LR__2261
1c3d0     32 12 06 F6 | 	mov	arg01, #50
1c3d4     00 14 06 F6 | 	mov	arg02, #0
1c3d8     50 61 B0 FD | 	call	#_printerror
1c3dc                 | LR__2262
1c3dc                 | LR__2263
1c3dc     A7 F0 03 F6 | 	mov	ptra, fp
1c3e0     B2 00 A0 FD | 	call	#popregs_
1c3e4                 | _do_assign_ret
1c3e4     2D 00 64 FD | 	ret
1c3e8                 | 
1c3e8                 | ' 
1c3e8                 | ' 
1c3e8                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1c3e8                 | ' 
1c3e8                 | ' sub do_getvar
1c3e8                 | _do_getvar
1c3e8     04 4A 05 F6 | 	mov	COUNT_, #4
1c3ec     A8 00 A0 FD | 	call	#pushregs_
1c3f0     3C F0 07 F1 | 	add	ptra, #60
1c3f4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1c3f4     4A 00 00 FF 
1c3f8     80 E4 05 F1 | 	add	objptr, ##38016
1c3fc     F2 26 02 FB | 	rdlong	local01, objptr
1c400     13 17 02 F6 | 	mov	arg03, local01
1c404     01 16 66 F0 | 	shl	arg03, #1
1c408     13 17 02 F1 | 	add	arg03, local01
1c40c     02 16 66 F0 | 	shl	arg03, #2
1c410     03 00 00 FF 
1c414     04 E4 85 F1 | 	sub	objptr, ##1540
1c418     F2 16 02 F1 | 	add	arg03, objptr
1c41c     04 16 06 F1 | 	add	arg03, #4
1c420     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1c424     47 00 00 FF 
1c428     7C E4 85 F1 | 	sub	objptr, ##36476
1c42c     C4 00 90 5D |  if_ne	jmp	#LR__2271
1c430     4A 00 00 FF 
1c434     80 E4 05 F1 | 	add	objptr, ##38016
1c438     F2 26 02 FB | 	rdlong	local01, objptr
1c43c     13 13 02 F6 | 	mov	arg01, local01
1c440     01 12 66 F0 | 	shl	arg01, #1
1c444     13 13 02 F1 | 	add	arg01, local01
1c448     02 12 66 F0 | 	shl	arg01, #2
1c44c     03 00 00 FF 
1c450     04 E4 85 F1 | 	sub	objptr, ##1540
1c454     F2 12 02 F1 | 	add	arg01, objptr
1c458     09 27 02 FB | 	rdlong	local01, arg01
1c45c     04 26 66 F0 | 	shl	local01, #4
1c460     32 00 00 FF 
1c464     84 E4 85 F1 | 	sub	objptr, ##25732
1c468     F2 26 02 F1 | 	add	local01, objptr
1c46c     04 26 06 F1 | 	add	local01, #4
1c470     13 13 02 FB | 	rdlong	arg01, local01
1c474     04 26 06 F1 | 	add	local01, #4
1c478     13 27 02 FB | 	rdlong	local01, local01
1c47c     A7 12 62 FC | 	wrlong	arg01, fp
1c480     04 4E 05 F1 | 	add	fp, #4
1c484     A7 26 62 FC | 	wrlong	local01, fp
1c488     35 00 00 FF 
1c48c     88 E4 05 F1 | 	add	objptr, ##27272
1c490     F2 26 02 FB | 	rdlong	local01, objptr
1c494     13 13 02 F6 | 	mov	arg01, local01
1c498     01 12 66 F0 | 	shl	arg01, #1
1c49c     13 13 02 F1 | 	add	arg01, local01
1c4a0     02 12 66 F0 | 	shl	arg01, #2
1c4a4     03 00 00 FF 
1c4a8     04 E4 85 F1 | 	sub	objptr, ##1540
1c4ac     F2 12 02 F1 | 	add	arg01, objptr
1c4b0     09 27 02 FB | 	rdlong	local01, arg01
1c4b4     04 26 66 F0 | 	shl	local01, #4
1c4b8     32 00 00 FF 
1c4bc     84 E4 85 F1 | 	sub	objptr, ##25732
1c4c0     F2 26 02 F1 | 	add	local01, objptr
1c4c4     0C 26 06 F1 | 	add	local01, #12
1c4c8     13 27 02 FB | 	rdlong	local01, local01
1c4cc     04 4E 05 F1 | 	add	fp, #4
1c4d0     A7 26 62 FC | 	wrlong	local01, fp
1c4d4                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1c4d4                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1c4d4                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1c4d4     08 4E 85 F1 | 	sub	fp, #8
1c4d8     00 27 16 F2 | 	cmp	local01, #256 wc
1c4dc     14 00 00 FF 
1c4e0     F8 E5 85 F1 | 	sub	objptr, ##10744
1c4e4     0C 00 90 3D |  if_ae	jmp	#LR__2270
1c4e8     A7 12 02 F6 | 	mov	arg01, fp
1c4ec     88 0E BF FD | 	call	#_push
1c4f0     A0 04 90 FD | 	jmp	#LR__2292
1c4f4                 | LR__2270
1c4f4                 | LR__2271
1c4f4     4A 00 00 FF 
1c4f8     80 E4 05 F1 | 	add	objptr, ##38016
1c4fc     F2 16 02 FB | 	rdlong	arg03, objptr
1c500     0B 15 02 F6 | 	mov	arg02, arg03
1c504     01 14 66 F0 | 	shl	arg02, #1
1c508     0B 15 02 F1 | 	add	arg02, arg03
1c50c     02 14 66 F0 | 	shl	arg02, #2
1c510     03 00 00 FF 
1c514     04 E4 85 F1 | 	sub	objptr, ##1540
1c518     F2 14 02 F1 | 	add	arg02, objptr
1c51c     0A 17 02 FB | 	rdlong	arg03, arg02
1c520     04 16 66 F0 | 	shl	arg03, #4
1c524     32 00 00 FF 
1c528     84 E4 85 F1 | 	sub	objptr, ##25732
1c52c     F2 16 02 F1 | 	add	arg03, objptr
1c530     04 16 06 F1 | 	add	arg03, #4
1c534     0B 13 02 FB | 	rdlong	arg01, arg03
1c538     0C 4E 05 F1 | 	add	fp, #12
1c53c     A7 12 62 FC | 	wrlong	arg01, fp
1c540     0C 4E 85 F1 | 	sub	fp, #12
1c544     14 00 00 FF 
1c548     F8 E5 85 F1 | 	sub	objptr, ##10744
1c54c     AC 62 B0 FD | 	call	#_pslpeek
1c550     FD FA 31 F9 | 	getword	result1, result1, #0
1c554     10 4E 05 F1 | 	add	fp, #16
1c558     A7 FA 61 FC | 	wrlong	result1, fp
1c55c     4A 00 00 FF 
1c560     80 E4 05 F1 | 	add	objptr, ##38016
1c564     F2 16 02 FB | 	rdlong	arg03, objptr
1c568     0B 15 02 F6 | 	mov	arg02, arg03
1c56c     01 14 66 F0 | 	shl	arg02, #1
1c570     0B 15 02 F1 | 	add	arg02, arg03
1c574     02 14 66 F0 | 	shl	arg02, #2
1c578     03 00 00 FF 
1c57c     04 E4 85 F1 | 	sub	objptr, ##1540
1c580     F2 14 02 F1 | 	add	arg02, objptr
1c584     04 14 06 F1 | 	add	arg02, #4
1c588     0A 17 02 FB | 	rdlong	arg03, arg02
1c58c     04 4E 05 F1 | 	add	fp, #4
1c590     A7 16 62 FC | 	wrlong	arg03, fp
1c594     08 4E 85 F1 | 	sub	fp, #8
1c598     A7 12 02 FB | 	rdlong	arg01, fp
1c59c     0C 4E 85 F1 | 	sub	fp, #12
1c5a0     02 12 06 F1 | 	add	arg01, #2
1c5a4     47 00 00 FF 
1c5a8     7C E4 85 F1 | 	sub	objptr, ##36476
1c5ac     F4 61 B0 FD | 	call	#_pspeek
1c5b0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c5b4     18 4E 05 F1 | 	add	fp, #24
1c5b8     A7 FA 61 FC | 	wrlong	result1, fp
1c5bc     0C 4E 85 F1 | 	sub	fp, #12
1c5c0     A7 12 02 FB | 	rdlong	arg01, fp
1c5c4     0C 4E 85 F1 | 	sub	fp, #12
1c5c8     04 12 06 F1 | 	add	arg01, #4
1c5cc     2C 62 B0 FD | 	call	#_pslpeek
1c5d0     1C 4E 05 F1 | 	add	fp, #28
1c5d4     A7 FA 61 FC | 	wrlong	result1, fp
1c5d8     10 4E 85 F1 | 	sub	fp, #16
1c5dc     A7 12 02 FB | 	rdlong	arg01, fp
1c5e0     0C 4E 85 F1 | 	sub	fp, #12
1c5e4     08 12 06 F1 | 	add	arg01, #8
1c5e8     10 62 B0 FD | 	call	#_pslpeek
1c5ec     20 4E 05 F1 | 	add	fp, #32
1c5f0     A7 FA 61 FC | 	wrlong	result1, fp
1c5f4     14 4E 85 F1 | 	sub	fp, #20
1c5f8     A7 12 02 FB | 	rdlong	arg01, fp
1c5fc     0C 4E 85 F1 | 	sub	fp, #12
1c600     0C 12 06 F1 | 	add	arg01, #12
1c604     F4 61 B0 FD | 	call	#_pslpeek
1c608     24 4E 05 F1 | 	add	fp, #36
1c60c     A7 FA 61 FC | 	wrlong	result1, fp
1c610                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1c610                 | ' esize=pspeek(arrptr+2)
1c610                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1c610                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1c610                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1c610                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1c610     10 4E 85 F1 | 	sub	fp, #16
1c614     A7 16 02 FB | 	rdlong	arg03, fp
1c618     14 4E 85 F1 | 	sub	fp, #20
1c61c     03 16 16 F2 | 	cmp	arg03, #3 wc
1c620     38 00 90 CD |  if_b	jmp	#LR__2272
1c624     B8 0C BF FD | 	call	#_pop
1c628     FF 16 02 F6 | 	mov	arg03, result3
1c62c     A7 FA 61 FC | 	wrlong	result1, fp
1c630     04 4E 05 F1 | 	add	fp, #4
1c634     A7 FC 61 FC | 	wrlong	result2, fp
1c638     04 4E 05 F1 | 	add	fp, #4
1c63c     A7 16 62 FC | 	wrlong	arg03, fp
1c640     08 4E 85 F1 | 	sub	fp, #8
1c644     A7 12 02 F6 | 	mov	arg01, fp
1c648     78 0E BF FD | 	call	#_converttoint
1c64c     30 4E 05 F1 | 	add	fp, #48
1c650     A7 FA 61 FC | 	wrlong	result1, fp
1c654     30 4E 85 F1 | 	sub	fp, #48
1c658     0C 00 90 FD | 	jmp	#LR__2273
1c65c                 | LR__2272
1c65c     30 4E 05 F1 | 	add	fp, #48
1c660     A7 00 68 FC | 	wrlong	#0, fp
1c664     30 4E 85 F1 | 	sub	fp, #48
1c668                 | LR__2273
1c668                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1c668     14 4E 05 F1 | 	add	fp, #20
1c66c     A7 16 02 FB | 	rdlong	arg03, fp
1c670     14 4E 85 F1 | 	sub	fp, #20
1c674     02 16 16 F2 | 	cmp	arg03, #2 wc
1c678     38 00 90 CD |  if_b	jmp	#LR__2274
1c67c     60 0C BF FD | 	call	#_pop
1c680     FF 16 02 F6 | 	mov	arg03, result3
1c684     A7 FA 61 FC | 	wrlong	result1, fp
1c688     04 4E 05 F1 | 	add	fp, #4
1c68c     A7 FC 61 FC | 	wrlong	result2, fp
1c690     04 4E 05 F1 | 	add	fp, #4
1c694     A7 16 62 FC | 	wrlong	arg03, fp
1c698     08 4E 85 F1 | 	sub	fp, #8
1c69c     A7 12 02 F6 | 	mov	arg01, fp
1c6a0     20 0E BF FD | 	call	#_converttoint
1c6a4     2C 4E 05 F1 | 	add	fp, #44
1c6a8     A7 FA 61 FC | 	wrlong	result1, fp
1c6ac     2C 4E 85 F1 | 	sub	fp, #44
1c6b0     0C 00 90 FD | 	jmp	#LR__2275
1c6b4                 | LR__2274
1c6b4     2C 4E 05 F1 | 	add	fp, #44
1c6b8     A7 00 68 FC | 	wrlong	#0, fp
1c6bc     2C 4E 85 F1 | 	sub	fp, #44
1c6c0                 | LR__2275
1c6c0                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1c6c0     14 4E 05 F1 | 	add	fp, #20
1c6c4     A7 16 02 FB | 	rdlong	arg03, fp
1c6c8     14 4E 85 F1 | 	sub	fp, #20
1c6cc     01 16 16 F2 | 	cmp	arg03, #1 wc
1c6d0     38 00 90 CD |  if_b	jmp	#LR__2276
1c6d4     08 0C BF FD | 	call	#_pop
1c6d8     FF 16 02 F6 | 	mov	arg03, result3
1c6dc     A7 FA 61 FC | 	wrlong	result1, fp
1c6e0     04 4E 05 F1 | 	add	fp, #4
1c6e4     A7 FC 61 FC | 	wrlong	result2, fp
1c6e8     04 4E 05 F1 | 	add	fp, #4
1c6ec     A7 16 62 FC | 	wrlong	arg03, fp
1c6f0     08 4E 85 F1 | 	sub	fp, #8
1c6f4     A7 12 02 F6 | 	mov	arg01, fp
1c6f8     C8 0D BF FD | 	call	#_converttoint
1c6fc     28 4E 05 F1 | 	add	fp, #40
1c700     A7 FA 61 FC | 	wrlong	result1, fp
1c704     28 4E 85 F1 | 	sub	fp, #40
1c708     0C 00 90 FD | 	jmp	#LR__2277
1c70c                 | LR__2276
1c70c     28 4E 05 F1 | 	add	fp, #40
1c710     A7 00 68 FC | 	wrlong	#0, fp
1c714     28 4E 85 F1 | 	sub	fp, #40
1c718                 | LR__2277
1c718     0C 4E 05 F1 | 	add	fp, #12
1c71c     A7 28 02 FB | 	rdlong	local02, fp
1c720     1C 4E 05 F1 | 	add	fp, #28
1c724     A7 2A 02 FB | 	rdlong	local03, fp
1c728     04 4E 05 F1 | 	add	fp, #4
1c72c     A7 FC 01 FB | 	rdlong	result2, fp
1c730     10 4E 85 F1 | 	sub	fp, #16
1c734     A7 FE 01 FB | 	rdlong	result3, fp
1c738     FF FC 01 FD | 	qmul	result2, result3
1c73c     10 28 06 F1 | 	add	local02, #16
1c740     14 4E 05 F1 | 	add	fp, #20
1c744     A7 FC 01 FB | 	rdlong	result2, fp
1c748     18 FA 61 FD | 	getqx	result1
1c74c     FF FC 01 FD | 	qmul	result2, result3
1c750     FD 2A 02 F1 | 	add	local03, result1
1c754     10 4E 85 F1 | 	sub	fp, #16
1c758     A7 FE 01 FB | 	rdlong	result3, fp
1c75c     18 FC 61 FD | 	getqx	result2
1c760     FF FC 01 FD | 	qmul	result2, result3
1c764     08 4E 85 F1 | 	sub	fp, #8
1c768     A7 FE 01 FB | 	rdlong	result3, fp
1c76c     18 FC 61 FD | 	getqx	result2
1c770     FE 2A 02 F1 | 	add	local03, result2
1c774     FF 2A 02 FD | 	qmul	local03, result3
1c778     1C 4E 05 F1 | 	add	fp, #28
1c77c                 | ' 
1c77c                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1c77c                 | ' 
1c77c                 | ' select case vartype
1c77c     18 FC 61 FD | 	getqx	result2
1c780     FE 28 02 F1 | 	add	local02, result2
1c784     A7 28 62 FC | 	wrlong	local02, fp
1c788     24 4E 85 F1 | 	sub	fp, #36
1c78c     A7 2C 02 FB | 	rdlong	local04, fp
1c790     10 4E 85 F1 | 	sub	fp, #16
1c794     00 2D 86 F1 | 	sub	local04, #256
1c798     0C 2C 26 F3 | 	fle	local04, #12
1c79c     30 2C 62 FD | 	jmprel	local04
1c7a0                 | LR__2278
1c7a0     30 00 90 FD | 	jmp	#LR__2279
1c7a4     58 00 90 FD | 	jmp	#LR__2280
1c7a8     8C 00 90 FD | 	jmp	#LR__2281
1c7ac     AC 00 90 FD | 	jmp	#LR__2282
1c7b0     E8 00 90 FD | 	jmp	#LR__2283
1c7b4     08 01 90 FD | 	jmp	#LR__2284
1c7b8     24 01 90 FD | 	jmp	#LR__2285
1c7bc     40 01 90 FD | 	jmp	#LR__2286
1c7c0     50 01 90 FD | 	jmp	#LR__2287
1c7c4     60 01 90 FD | 	jmp	#LR__2288
1c7c8     7C 01 90 FD | 	jmp	#LR__2289
1c7cc     8C 01 90 FD | 	jmp	#LR__2290
1c7d0     B8 01 90 FD | 	jmp	#LR__2291
1c7d4                 | LR__2279
1c7d4     A7 12 02 F6 | 	mov	arg01, fp
1c7d8     34 4E 05 F1 | 	add	fp, #52
1c7dc     A7 14 02 FB | 	rdlong	arg02, fp
1c7e0     34 4E 85 F1 | 	sub	fp, #52
1c7e4     0C 16 06 F6 | 	mov	arg03, #12
1c7e8     0B 00 00 FF 
1c7ec     CC E4 05 F1 | 	add	objptr, ##5836
1c7f0     9C 8A B0 FD | 	call	#_psram_spin2_read1
1c7f4     0B 00 00 FF 
1c7f8     CC E4 85 F1 | 	sub	objptr, ##5836
1c7fc     8C 01 90 FD | 	jmp	#LR__2291
1c800                 | LR__2280
1c800     08 4E 05 F1 | 	add	fp, #8
1c804     A7 38 68 FC | 	wrlong	#28, fp
1c808     2C 4E 05 F1 | 	add	fp, #44
1c80c     A7 12 02 FB | 	rdlong	arg01, fp
1c810     34 4E 85 F1 | 	sub	fp, #52
1c814     8C 5F B0 FD | 	call	#_pspeek
1c818     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c81c     A7 FA 61 FC | 	wrlong	result1, fp
1c820     80 FA 15 F2 | 	cmp	result1, #128 wc
1c824     00 27 66 36 |  if_ae	neg	local01, #256
1c828     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1c82c     15 27 42 35 |  if_ae	or	local01, local03
1c830     A7 26 62 3C |  if_ae	wrlong	local01, fp
1c834     54 01 90 FD | 	jmp	#LR__2291
1c838                 | LR__2281
1c838     08 4E 05 F1 | 	add	fp, #8
1c83c     A7 3A 68 FC | 	wrlong	#29, fp
1c840     2C 4E 05 F1 | 	add	fp, #44
1c844     A7 12 02 FB | 	rdlong	arg01, fp
1c848     34 4E 85 F1 | 	sub	fp, #52
1c84c     54 5F B0 FD | 	call	#_pspeek
1c850     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c854     A7 FA 61 FC | 	wrlong	result1, fp
1c858     30 01 90 FD | 	jmp	#LR__2291
1c85c                 | LR__2282
1c85c     08 4E 05 F1 | 	add	fp, #8
1c860     A7 38 68 FC | 	wrlong	#28, fp
1c864     2C 4E 05 F1 | 	add	fp, #44
1c868     A7 12 02 FB | 	rdlong	arg01, fp
1c86c     34 4E 85 F1 | 	sub	fp, #52
1c870     88 5F B0 FD | 	call	#_pslpeek
1c874     FD FA 31 F9 | 	getword	result1, result1, #0
1c878     A7 FA 61 FC | 	wrlong	result1, fp
1c87c     40 00 00 FF 
1c880     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1c884     FF 7F 00 3F 
1c888     00 27 06 36 |  if_ae	mov	local01, ##16776960
1c88c     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1c890     15 27 42 35 |  if_ae	or	local01, local03
1c894     A7 26 62 3C |  if_ae	wrlong	local01, fp
1c898     F0 00 90 FD | 	jmp	#LR__2291
1c89c                 | LR__2283
1c89c     08 4E 05 F1 | 	add	fp, #8
1c8a0     A7 3A 68 FC | 	wrlong	#29, fp
1c8a4     2C 4E 05 F1 | 	add	fp, #44
1c8a8     A7 12 02 FB | 	rdlong	arg01, fp
1c8ac     34 4E 85 F1 | 	sub	fp, #52
1c8b0     48 5F B0 FD | 	call	#_pslpeek
1c8b4     FD FA 31 F9 | 	getword	result1, result1, #0
1c8b8     A7 FA 61 FC | 	wrlong	result1, fp
1c8bc     CC 00 90 FD | 	jmp	#LR__2291
1c8c0                 | LR__2284
1c8c0     08 4E 05 F1 | 	add	fp, #8
1c8c4     A7 38 68 FC | 	wrlong	#28, fp
1c8c8     2C 4E 05 F1 | 	add	fp, #44
1c8cc     A7 12 02 FB | 	rdlong	arg01, fp
1c8d0     34 4E 85 F1 | 	sub	fp, #52
1c8d4     24 5F B0 FD | 	call	#_pslpeek
1c8d8     A7 FA 61 FC | 	wrlong	result1, fp
1c8dc     AC 00 90 FD | 	jmp	#LR__2291
1c8e0                 | LR__2285
1c8e0     08 4E 05 F1 | 	add	fp, #8
1c8e4     A7 3A 68 FC | 	wrlong	#29, fp
1c8e8     2C 4E 05 F1 | 	add	fp, #44
1c8ec     A7 12 02 FB | 	rdlong	arg01, fp
1c8f0     34 4E 85 F1 | 	sub	fp, #52
1c8f4     04 5F B0 FD | 	call	#_pslpeek
1c8f8     A7 FA 61 FC | 	wrlong	result1, fp
1c8fc     8C 00 90 FD | 	jmp	#LR__2291
1c900                 | LR__2286
1c900     08 4E 05 F1 | 	add	fp, #8
1c904     A7 FE 69 FC | 	wrlong	#255, fp
1c908     08 4E 85 F1 | 	sub	fp, #8
1c90c     A7 60 68 FC | 	wrlong	#48, fp
1c910     78 00 90 FD | 	jmp	#LR__2291
1c914                 | LR__2287
1c914     08 4E 05 F1 | 	add	fp, #8
1c918     A7 FE 69 FC | 	wrlong	#255, fp
1c91c     08 4E 85 F1 | 	sub	fp, #8
1c920     A7 60 68 FC | 	wrlong	#48, fp
1c924     64 00 90 FD | 	jmp	#LR__2291
1c928                 | LR__2288
1c928     08 4E 05 F1 | 	add	fp, #8
1c92c     A7 3C 68 FC | 	wrlong	#30, fp
1c930     2C 4E 05 F1 | 	add	fp, #44
1c934     A7 12 02 FB | 	rdlong	arg01, fp
1c938     34 4E 85 F1 | 	sub	fp, #52
1c93c     BC 5E B0 FD | 	call	#_pslpeek
1c940     A7 FA 61 FC | 	wrlong	result1, fp
1c944     44 00 90 FD | 	jmp	#LR__2291
1c948                 | LR__2289
1c948     08 4E 05 F1 | 	add	fp, #8
1c94c     A7 FE 69 FC | 	wrlong	#255, fp
1c950     08 4E 85 F1 | 	sub	fp, #8
1c954     A7 60 68 FC | 	wrlong	#48, fp
1c958     30 00 90 FD | 	jmp	#LR__2291
1c95c                 | LR__2290
1c95c     08 4E 05 F1 | 	add	fp, #8
1c960     A7 3E 68 FC | 	wrlong	#31, fp
1c964     2C 4E 05 F1 | 	add	fp, #44
1c968     A7 12 02 FB | 	rdlong	arg01, fp
1c96c     34 4E 85 F1 | 	sub	fp, #52
1c970     88 5E B0 FD | 	call	#_pslpeek
1c974     A7 FA 61 FC | 	wrlong	result1, fp
1c978     00 04 00 FF 
1c97c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1c980     08 4E 05 31 |  if_ae	add	fp, #8
1c984     A7 56 68 3C |  if_ae	wrlong	#43, fp
1c988     08 4E 85 31 |  if_ae	sub	fp, #8
1c98c                 | LR__2291
1c98c     A7 12 02 F6 | 	mov	arg01, fp
1c990     E4 09 BF FD | 	call	#_push
1c994                 | LR__2292
1c994     A7 F0 03 F6 | 	mov	ptra, fp
1c998     B2 00 A0 FD | 	call	#popregs_
1c99c                 | _do_getvar_ret
1c99c     2D 00 64 FD | 	ret
1c9a0                 | 
1c9a0                 | ' 
1c9a0                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1c9a0                 | ' 
1c9a0                 | ' sub do_getaddr
1c9a0                 | _do_getaddr
1c9a0     01 4A 05 F6 | 	mov	COUNT_, #1
1c9a4     A8 00 A0 FD | 	call	#pushregs_
1c9a8     38 F0 07 F1 | 	add	ptra, #56
1c9ac                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1c9ac                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1c9ac     4A 00 00 FF 
1c9b0     80 E4 05 F1 | 	add	objptr, ##38016
1c9b4     F2 12 02 FB | 	rdlong	arg01, objptr
1c9b8     09 FD 01 F6 | 	mov	result2, arg01
1c9bc     01 FC 65 F0 | 	shl	result2, #1
1c9c0     09 FD 01 F1 | 	add	result2, arg01
1c9c4     02 FC 65 F0 | 	shl	result2, #2
1c9c8     03 00 00 FF 
1c9cc     04 E4 85 F1 | 	sub	objptr, ##1540
1c9d0     F2 FC 01 F1 | 	add	result2, objptr
1c9d4     04 FC 05 F1 | 	add	result2, #4
1c9d8     FE FC 09 FB | 	rdlong	result2, result2 wz
1c9dc     47 00 00 FF 
1c9e0     7C E4 85 F1 | 	sub	objptr, ##36476
1c9e4     10 01 90 5D |  if_ne	jmp	#LR__2300
1c9e8     4A 00 00 FF 
1c9ec     80 E4 05 F1 | 	add	objptr, ##38016
1c9f0     F2 12 02 FB | 	rdlong	arg01, objptr
1c9f4     09 FD 01 F6 | 	mov	result2, arg01
1c9f8     01 FC 65 F0 | 	shl	result2, #1
1c9fc     09 FD 01 F1 | 	add	result2, arg01
1ca00     02 FC 65 F0 | 	shl	result2, #2
1ca04     03 00 00 FF 
1ca08     04 E4 85 F1 | 	sub	objptr, ##1540
1ca0c     F2 FC 01 F1 | 	add	result2, objptr
1ca10     FE 12 02 FB | 	rdlong	arg01, result2
1ca14     04 12 66 F0 | 	shl	arg01, #4
1ca18     32 00 00 FF 
1ca1c     84 E4 85 F1 | 	sub	objptr, ##25732
1ca20     F2 12 02 F1 | 	add	arg01, objptr
1ca24     0C 12 06 F1 | 	add	arg01, #12
1ca28     09 13 02 FB | 	rdlong	arg01, arg01
1ca2c     08 4E 05 F1 | 	add	fp, #8
1ca30     A7 12 62 FC | 	wrlong	arg01, fp
1ca34                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1ca34                 | '    if t1.result_type>=array_no_type then goto 2200
1ca34     08 4E 85 F1 | 	sub	fp, #8
1ca38     00 13 16 F2 | 	cmp	arg01, #256 wc
1ca3c     14 00 00 FF 
1ca40     F8 E5 85 F1 | 	sub	objptr, ##10744
1ca44     B0 00 90 3D |  if_ae	jmp	#LR__2301
1ca48     4A 00 00 FF 
1ca4c     80 E4 05 F1 | 	add	objptr, ##38016
1ca50     F2 12 02 FB | 	rdlong	arg01, objptr
1ca54     09 FF 01 F6 | 	mov	result3, arg01
1ca58     01 FE 65 F0 | 	shl	result3, #1
1ca5c     09 FF 01 F1 | 	add	result3, arg01
1ca60     02 FE 65 F0 | 	shl	result3, #2
1ca64     03 00 00 FF 
1ca68     04 E4 85 F1 | 	sub	objptr, ##1540
1ca6c     F2 FE 01 F1 | 	add	result3, objptr
1ca70     FF FA 01 FB | 	rdlong	result1, result3
1ca74     04 FA 65 F0 | 	shl	result1, #4
1ca78     32 00 00 FF 
1ca7c     84 E4 85 F1 | 	sub	objptr, ##25732
1ca80     F2 FA 01 F1 | 	add	result1, objptr
1ca84     04 FA 05 F1 | 	add	result1, #4
1ca88     A7 FA 61 FC | 	wrlong	result1, fp
1ca8c     35 00 00 FF 
1ca90     88 E4 05 F1 | 	add	objptr, ##27272
1ca94     F2 FE 01 FB | 	rdlong	result3, objptr
1ca98     FF 12 02 F6 | 	mov	arg01, result3
1ca9c     01 12 66 F0 | 	shl	arg01, #1
1caa0     FF 12 02 F1 | 	add	arg01, result3
1caa4     02 12 66 F0 | 	shl	arg01, #2
1caa8     03 00 00 FF 
1caac     04 E4 85 F1 | 	sub	objptr, ##1540
1cab0     F2 12 02 F1 | 	add	arg01, objptr
1cab4     09 13 02 FB | 	rdlong	arg01, arg01
1cab8     04 12 66 F0 | 	shl	arg01, #4
1cabc     32 00 00 FF 
1cac0     84 E4 85 F1 | 	sub	objptr, ##25732
1cac4     F2 12 02 F1 | 	add	arg01, objptr
1cac8     0C 12 06 F1 | 	add	arg01, #12
1cacc     09 13 02 FB | 	rdlong	arg01, arg01
1cad0     04 4E 05 F1 | 	add	fp, #4
1cad4     A7 12 62 FC | 	wrlong	arg01, fp
1cad8     04 4E 05 F1 | 	add	fp, #4
1cadc     A7 3A 68 FC | 	wrlong	#29, fp
1cae0     08 4E 85 F1 | 	sub	fp, #8
1cae4     A7 12 02 F6 | 	mov	arg01, fp
1cae8     14 00 00 FF 
1caec     F8 E5 85 F1 | 	sub	objptr, ##10744
1caf0     84 08 BF FD | 	call	#_push
1caf4                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1caf4                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1caf4                 | '   t1.result_type=result_uint
1caf4                 | '   push t1 : return
1caf4     2C 03 90 FD | 	jmp	#LR__2310
1caf8                 | LR__2300
1caf8                 | LR__2301
1caf8     4A 00 00 FF 
1cafc     80 E4 05 F1 | 	add	objptr, ##38016
1cb00     F2 FE 01 FB | 	rdlong	result3, objptr
1cb04     FF FC 01 F6 | 	mov	result2, result3
1cb08     01 FC 65 F0 | 	shl	result2, #1
1cb0c     FF FC 01 F1 | 	add	result2, result3
1cb10     02 FC 65 F0 | 	shl	result2, #2
1cb14     03 00 00 FF 
1cb18     04 E4 85 F1 | 	sub	objptr, ##1540
1cb1c     F2 FC 01 F1 | 	add	result2, objptr
1cb20     FE FE 01 FB | 	rdlong	result3, result2
1cb24     04 FE 65 F0 | 	shl	result3, #4
1cb28     32 00 00 FF 
1cb2c     84 E4 85 F1 | 	sub	objptr, ##25732
1cb30     F2 FE 01 F1 | 	add	result3, objptr
1cb34     04 FE 05 F1 | 	add	result3, #4
1cb38     FF FE 01 FB | 	rdlong	result3, result3
1cb3c     0C 4E 05 F1 | 	add	fp, #12
1cb40     A7 FE 61 FC | 	wrlong	result3, fp
1cb44     35 00 00 FF 
1cb48     88 E4 05 F1 | 	add	objptr, ##27272
1cb4c     F2 FE 01 FB | 	rdlong	result3, objptr
1cb50     FF 12 02 F6 | 	mov	arg01, result3
1cb54     01 12 66 F0 | 	shl	arg01, #1
1cb58     FF 12 02 F1 | 	add	arg01, result3
1cb5c     02 12 66 F0 | 	shl	arg01, #2
1cb60     03 00 00 FF 
1cb64     04 E4 85 F1 | 	sub	objptr, ##1540
1cb68     F2 12 02 F1 | 	add	arg01, objptr
1cb6c     09 13 02 FB | 	rdlong	arg01, arg01
1cb70     04 12 66 F0 | 	shl	arg01, #4
1cb74     32 00 00 FF 
1cb78     84 E4 85 F1 | 	sub	objptr, ##25732
1cb7c     F2 12 02 F1 | 	add	arg01, objptr
1cb80     0C 12 06 F1 | 	add	arg01, #12
1cb84     09 13 02 FB | 	rdlong	arg01, arg01
1cb88     08 4E 85 F1 | 	sub	fp, #8
1cb8c     A7 12 62 FC | 	wrlong	arg01, fp
1cb90     08 4E 05 F1 | 	add	fp, #8
1cb94     A7 12 02 FB | 	rdlong	arg01, fp
1cb98     0C 4E 85 F1 | 	sub	fp, #12
1cb9c     14 00 00 FF 
1cba0     F8 E5 85 F1 | 	sub	objptr, ##10744
1cba4     54 5C B0 FD | 	call	#_pslpeek
1cba8     FD FA 31 F9 | 	getword	result1, result1, #0
1cbac     10 4E 05 F1 | 	add	fp, #16
1cbb0     A7 FA 61 FC | 	wrlong	result1, fp
1cbb4     4A 00 00 FF 
1cbb8     80 E4 05 F1 | 	add	objptr, ##38016
1cbbc     F2 FE 01 FB | 	rdlong	result3, objptr
1cbc0     FF 12 02 F6 | 	mov	arg01, result3
1cbc4     01 12 66 F0 | 	shl	arg01, #1
1cbc8     FF 12 02 F1 | 	add	arg01, result3
1cbcc     02 12 66 F0 | 	shl	arg01, #2
1cbd0     03 00 00 FF 
1cbd4     04 E4 85 F1 | 	sub	objptr, ##1540
1cbd8     F2 12 02 F1 | 	add	arg01, objptr
1cbdc     04 12 06 F1 | 	add	arg01, #4
1cbe0     09 13 02 FB | 	rdlong	arg01, arg01
1cbe4     04 4E 05 F1 | 	add	fp, #4
1cbe8     A7 12 62 FC | 	wrlong	arg01, fp
1cbec     08 4E 85 F1 | 	sub	fp, #8
1cbf0     A7 12 02 FB | 	rdlong	arg01, fp
1cbf4     0C 4E 85 F1 | 	sub	fp, #12
1cbf8     02 12 06 F1 | 	add	arg01, #2
1cbfc     47 00 00 FF 
1cc00     7C E4 85 F1 | 	sub	objptr, ##36476
1cc04     9C 5B B0 FD | 	call	#_pspeek
1cc08     FD FA E1 F8 | 	getbyte	result1, result1, #0
1cc0c     18 4E 05 F1 | 	add	fp, #24
1cc10     A7 FA 61 FC | 	wrlong	result1, fp
1cc14     0C 4E 85 F1 | 	sub	fp, #12
1cc18     A7 12 02 FB | 	rdlong	arg01, fp
1cc1c     0C 4E 85 F1 | 	sub	fp, #12
1cc20     04 12 06 F1 | 	add	arg01, #4
1cc24     D4 5B B0 FD | 	call	#_pslpeek
1cc28     1C 4E 05 F1 | 	add	fp, #28
1cc2c     A7 FA 61 FC | 	wrlong	result1, fp
1cc30     10 4E 85 F1 | 	sub	fp, #16
1cc34     A7 12 02 FB | 	rdlong	arg01, fp
1cc38     0C 4E 85 F1 | 	sub	fp, #12
1cc3c     08 12 06 F1 | 	add	arg01, #8
1cc40     B8 5B B0 FD | 	call	#_pslpeek
1cc44     20 4E 05 F1 | 	add	fp, #32
1cc48     A7 FA 61 FC | 	wrlong	result1, fp
1cc4c     14 4E 85 F1 | 	sub	fp, #20
1cc50     A7 12 02 FB | 	rdlong	arg01, fp
1cc54     0C 4E 85 F1 | 	sub	fp, #12
1cc58     0C 12 06 F1 | 	add	arg01, #12
1cc5c     9C 5B B0 FD | 	call	#_pslpeek
1cc60     24 4E 05 F1 | 	add	fp, #36
1cc64     A7 FA 61 FC | 	wrlong	result1, fp
1cc68                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1cc68                 | ' esize=pspeek(arrptr+2)
1cc68                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1cc68                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1cc68                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1cc68                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1cc68     10 4E 85 F1 | 	sub	fp, #16
1cc6c     A7 12 02 FB | 	rdlong	arg01, fp
1cc70     14 4E 85 F1 | 	sub	fp, #20
1cc74     03 12 16 F2 | 	cmp	arg01, #3 wc
1cc78     34 00 90 CD |  if_b	jmp	#LR__2302
1cc7c     60 06 BF FD | 	call	#_pop
1cc80     A7 FA 61 FC | 	wrlong	result1, fp
1cc84     04 4E 05 F1 | 	add	fp, #4
1cc88     A7 FC 61 FC | 	wrlong	result2, fp
1cc8c     04 4E 05 F1 | 	add	fp, #4
1cc90     A7 FE 61 FC | 	wrlong	result3, fp
1cc94     08 4E 85 F1 | 	sub	fp, #8
1cc98     A7 12 02 F6 | 	mov	arg01, fp
1cc9c     24 08 BF FD | 	call	#_converttoint
1cca0     30 4E 05 F1 | 	add	fp, #48
1cca4     A7 FA 61 FC | 	wrlong	result1, fp
1cca8     30 4E 85 F1 | 	sub	fp, #48
1ccac     0C 00 90 FD | 	jmp	#LR__2303
1ccb0                 | LR__2302
1ccb0     30 4E 05 F1 | 	add	fp, #48
1ccb4     A7 00 68 FC | 	wrlong	#0, fp
1ccb8     30 4E 85 F1 | 	sub	fp, #48
1ccbc                 | LR__2303
1ccbc                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1ccbc     14 4E 05 F1 | 	add	fp, #20
1ccc0     A7 12 02 FB | 	rdlong	arg01, fp
1ccc4     14 4E 85 F1 | 	sub	fp, #20
1ccc8     02 12 16 F2 | 	cmp	arg01, #2 wc
1cccc     34 00 90 CD |  if_b	jmp	#LR__2304
1ccd0     0C 06 BF FD | 	call	#_pop
1ccd4     A7 FA 61 FC | 	wrlong	result1, fp
1ccd8     04 4E 05 F1 | 	add	fp, #4
1ccdc     A7 FC 61 FC | 	wrlong	result2, fp
1cce0     04 4E 05 F1 | 	add	fp, #4
1cce4     A7 FE 61 FC | 	wrlong	result3, fp
1cce8     08 4E 85 F1 | 	sub	fp, #8
1ccec     A7 12 02 F6 | 	mov	arg01, fp
1ccf0     D0 07 BF FD | 	call	#_converttoint
1ccf4     2C 4E 05 F1 | 	add	fp, #44
1ccf8     A7 FA 61 FC | 	wrlong	result1, fp
1ccfc     2C 4E 85 F1 | 	sub	fp, #44
1cd00     0C 00 90 FD | 	jmp	#LR__2305
1cd04                 | LR__2304
1cd04     2C 4E 05 F1 | 	add	fp, #44
1cd08     A7 00 68 FC | 	wrlong	#0, fp
1cd0c     2C 4E 85 F1 | 	sub	fp, #44
1cd10                 | LR__2305
1cd10                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1cd10     14 4E 05 F1 | 	add	fp, #20
1cd14     A7 12 02 FB | 	rdlong	arg01, fp
1cd18     14 4E 85 F1 | 	sub	fp, #20
1cd1c     01 12 16 F2 | 	cmp	arg01, #1 wc
1cd20     34 00 90 CD |  if_b	jmp	#LR__2306
1cd24     B8 05 BF FD | 	call	#_pop
1cd28     A7 FA 61 FC | 	wrlong	result1, fp
1cd2c     04 4E 05 F1 | 	add	fp, #4
1cd30     A7 FC 61 FC | 	wrlong	result2, fp
1cd34     04 4E 05 F1 | 	add	fp, #4
1cd38     A7 FE 61 FC | 	wrlong	result3, fp
1cd3c     08 4E 85 F1 | 	sub	fp, #8
1cd40     A7 12 02 F6 | 	mov	arg01, fp
1cd44     7C 07 BF FD | 	call	#_converttoint
1cd48     28 4E 05 F1 | 	add	fp, #40
1cd4c     A7 FA 61 FC | 	wrlong	result1, fp
1cd50     28 4E 85 F1 | 	sub	fp, #40
1cd54     0C 00 90 FD | 	jmp	#LR__2307
1cd58                 | LR__2306
1cd58     28 4E 05 F1 | 	add	fp, #40
1cd5c     A7 00 68 FC | 	wrlong	#0, fp
1cd60     28 4E 85 F1 | 	sub	fp, #40
1cd64                 | LR__2307
1cd64                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1cd64                 | ' if numpar>0 then
1cd64     14 4E 05 F1 | 	add	fp, #20
1cd68     A7 FE 01 FB | 	rdlong	result3, fp
1cd6c     14 4E 85 F1 | 	sub	fp, #20
1cd70     01 FE 15 F2 | 	cmp	result3, #1 wc
1cd74     8C 00 90 CD |  if_b	jmp	#LR__2308
1cd78     0C 4E 05 F1 | 	add	fp, #12
1cd7c     A7 FC 01 FB | 	rdlong	result2, fp
1cd80     1C 4E 05 F1 | 	add	fp, #28
1cd84     A7 FE 01 FB | 	rdlong	result3, fp
1cd88     04 4E 05 F1 | 	add	fp, #4
1cd8c     A7 12 02 FB | 	rdlong	arg01, fp
1cd90     10 4E 85 F1 | 	sub	fp, #16
1cd94     A7 FA 01 FB | 	rdlong	result1, fp
1cd98     FD 12 02 FD | 	qmul	arg01, result1
1cd9c     10 FC 05 F1 | 	add	result2, #16
1cda0     14 4E 05 F1 | 	add	fp, #20
1cda4     A7 26 02 FB | 	rdlong	local01, fp
1cda8     18 12 62 FD | 	getqx	arg01
1cdac     FD 26 02 FD | 	qmul	local01, result1
1cdb0     09 FF 01 F1 | 	add	result3, arg01
1cdb4     10 4E 85 F1 | 	sub	fp, #16
1cdb8     A7 26 02 FB | 	rdlong	local01, fp
1cdbc     18 FA 61 FD | 	getqx	result1
1cdc0     13 FB 01 FD | 	qmul	result1, local01
1cdc4     08 4E 85 F1 | 	sub	fp, #8
1cdc8     A7 26 02 FB | 	rdlong	local01, fp
1cdcc     18 FA 61 FD | 	getqx	result1
1cdd0     FD FE 01 F1 | 	add	result3, result1
1cdd4     13 FF 01 FD | 	qmul	result3, local01
1cdd8     1C 4E 05 F1 | 	add	fp, #28
1cddc     18 26 62 FD | 	getqx	local01
1cde0     13 FD 01 F1 | 	add	result2, local01
1cde4     A7 FC 61 FC | 	wrlong	result2, fp
1cde8     2C 4E 85 F1 | 	sub	fp, #44
1cdec     A7 3A 68 FC | 	wrlong	#29, fp
1cdf0     2C 4E 05 F1 | 	add	fp, #44
1cdf4     A7 26 02 FB | 	rdlong	local01, fp
1cdf8     34 4E 85 F1 | 	sub	fp, #52
1cdfc     A7 26 62 FC | 	wrlong	local01, fp
1ce00     18 00 90 FD | 	jmp	#LR__2309
1ce04                 | LR__2308
1ce04     08 4E 05 F1 | 	add	fp, #8
1ce08     A7 3A 68 FC | 	wrlong	#29, fp
1ce0c     04 4E 05 F1 | 	add	fp, #4
1ce10     A7 26 02 FB | 	rdlong	local01, fp
1ce14     0C 4E 85 F1 | 	sub	fp, #12
1ce18     A7 26 62 FC | 	wrlong	local01, fp
1ce1c                 | LR__2309
1ce1c     A7 12 02 F6 | 	mov	arg01, fp
1ce20     54 05 BF FD | 	call	#_push
1ce24                 | LR__2310
1ce24     A7 F0 03 F6 | 	mov	ptra, fp
1ce28     B2 00 A0 FD | 	call	#popregs_
1ce2c                 | _do_getaddr_ret
1ce2c     2D 00 64 FD | 	ret
1ce30                 | 
1ce30                 | ' 
1ce30                 | ' 
1ce30                 | ' 
1ce30                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1ce30                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1ce30                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1ce30                 | ' 
1ce30                 | ' '--------------------------------- AND 
1ce30                 | ' 
1ce30                 | ' sub do_and 
1ce30                 | _do_and
1ce30     03 4A 05 F6 | 	mov	COUNT_, #3
1ce34     A8 00 A0 FD | 	call	#pushregs_
1ce38     18 F0 07 F1 | 	add	ptra, #24
1ce3c     A0 04 BF FD | 	call	#_pop
1ce40     FD 12 02 F6 | 	mov	arg01, result1
1ce44     FE 26 02 F6 | 	mov	local01, result2
1ce48     FF 28 02 F6 | 	mov	local02, result3
1ce4c     0C 4E 05 F1 | 	add	fp, #12
1ce50     A7 12 62 FC | 	wrlong	arg01, fp
1ce54     04 4E 05 F1 | 	add	fp, #4
1ce58     A7 26 62 FC | 	wrlong	local01, fp
1ce5c     04 4E 05 F1 | 	add	fp, #4
1ce60     A7 28 62 FC | 	wrlong	local02, fp
1ce64     14 4E 85 F1 | 	sub	fp, #20
1ce68     74 04 BF FD | 	call	#_pop
1ce6c     FF 2A 02 F6 | 	mov	local03, result3
1ce70     A7 FA 61 FC | 	wrlong	result1, fp
1ce74     04 4E 05 F1 | 	add	fp, #4
1ce78     A7 FC 61 FC | 	wrlong	result2, fp
1ce7c     04 4E 05 F1 | 	add	fp, #4
1ce80     A7 2A 62 FC | 	wrlong	local03, fp
1ce84                 | ' 
1ce84                 | ' t2=pop()
1ce84                 | ' t1=pop()
1ce84                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1ce84     08 4E 85 F1 | 	sub	fp, #8
1ce88     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ce8c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ce90     A7 2A 62 AC |  if_e	wrlong	local03, fp
1ce94     08 4E 05 A1 |  if_e	add	fp, #8
1ce98     A7 3A 68 AC |  if_e	wrlong	#29, fp
1ce9c     08 4E 85 A1 |  if_e	sub	fp, #8
1cea0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1cea0     14 4E 05 F1 | 	add	fp, #20
1cea4     A7 2A 02 FB | 	rdlong	local03, fp
1cea8     14 4E 85 F1 | 	sub	fp, #20
1ceac     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ceb0     18 00 90 5D |  if_ne	jmp	#LR__2320
1ceb4     0C 4E 05 F1 | 	add	fp, #12
1ceb8     A7 2A 02 FB | 	rdlong	local03, fp
1cebc     A7 2A 62 FC | 	wrlong	local03, fp
1cec0     08 4E 05 F1 | 	add	fp, #8
1cec4     A7 3A 68 FC | 	wrlong	#29, fp
1cec8     14 4E 85 F1 | 	sub	fp, #20
1cecc                 | LR__2320
1cecc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1cecc     08 4E 05 F1 | 	add	fp, #8
1ced0     A7 2A 02 FB | 	rdlong	local03, fp
1ced4     08 4E 85 F1 | 	sub	fp, #8
1ced8     1F 2A 0E F2 | 	cmp	local03, #31 wz
1cedc     14 4E 05 51 |  if_ne	add	fp, #20
1cee0     A7 28 02 5B |  if_ne	rdlong	local02, fp
1cee4     14 4E 85 51 |  if_ne	sub	fp, #20
1cee8     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1ceec     08 4E 05 51 |  if_ne	add	fp, #8
1cef0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1cef4     08 4E 85 51 |  if_ne	sub	fp, #8
1cef8     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1cefc     14 4E 05 51 |  if_ne	add	fp, #20
1cf00     14 4E 85 51 |  if_ne	sub	fp, #20
1cf04     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1cf08     A7 0C 68 AC |  if_e	wrlong	#6, fp
1cf0c     08 4E 05 A1 |  if_e	add	fp, #8
1cf10     A7 FE 69 AC |  if_e	wrlong	#255, fp
1cf14     08 4E 85 A1 |  if_e	sub	fp, #8
1cf18     18 00 90 AD |  if_e	jmp	#LR__2321
1cf1c     A7 2A 02 FB | 	rdlong	local03, fp
1cf20     0C 4E 05 F1 | 	add	fp, #12
1cf24     A7 26 02 FB | 	rdlong	local01, fp
1cf28     0C 4E 85 F1 | 	sub	fp, #12
1cf2c     13 2B 02 F5 | 	and	local03, local01
1cf30     A7 2A 62 FC | 	wrlong	local03, fp
1cf34                 | LR__2321
1cf34     A7 12 02 F6 | 	mov	arg01, fp
1cf38     3C 04 BF FD | 	call	#_push
1cf3c     A7 F0 03 F6 | 	mov	ptra, fp
1cf40     B2 00 A0 FD | 	call	#popregs_
1cf44                 | _do_and_ret
1cf44     2D 00 64 FD | 	ret
1cf48                 | 
1cf48                 | ' 
1cf48                 | ' '--------------------------------- DIV (integer divide)
1cf48                 | ' 
1cf48                 | ' sub do_div 
1cf48                 | _do_div
1cf48     01 4A 05 F6 | 	mov	COUNT_, #1
1cf4c     A8 00 A0 FD | 	call	#pushregs_
1cf50     18 F0 07 F1 | 	add	ptra, #24
1cf54     88 03 BF FD | 	call	#_pop
1cf58     FD 8A 02 F6 | 	mov	muldivb_, result1
1cf5c     FE 88 02 F6 | 	mov	muldiva_, result2
1cf60     FF 26 02 F6 | 	mov	local01, result3
1cf64     0C 4E 05 F1 | 	add	fp, #12
1cf68     A7 8A 62 FC | 	wrlong	muldivb_, fp
1cf6c     04 4E 05 F1 | 	add	fp, #4
1cf70     A7 88 62 FC | 	wrlong	muldiva_, fp
1cf74     04 4E 05 F1 | 	add	fp, #4
1cf78     A7 26 62 FC | 	wrlong	local01, fp
1cf7c     14 4E 85 F1 | 	sub	fp, #20
1cf80     5C 03 BF FD | 	call	#_pop
1cf84     A7 FA 61 FC | 	wrlong	result1, fp
1cf88     04 4E 05 F1 | 	add	fp, #4
1cf8c     A7 FC 61 FC | 	wrlong	result2, fp
1cf90     04 4E 05 F1 | 	add	fp, #4
1cf94     A7 FE 61 FC | 	wrlong	result3, fp
1cf98                 | ' 
1cf98                 | ' t2=pop()
1cf98                 | ' t1=pop()
1cf98                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1cf98     08 4E 85 F1 | 	sub	fp, #8
1cf9c     1F FE 0D F2 | 	cmp	result3, #31 wz
1cfa0     14 4E 05 51 |  if_ne	add	fp, #20
1cfa4     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1cfa8     14 4E 85 51 |  if_ne	sub	fp, #20
1cfac     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1cfb0     A7 14 68 AC |  if_e	wrlong	#10, fp
1cfb4     08 4E 05 A1 |  if_e	add	fp, #8
1cfb8     A7 FE 69 AC |  if_e	wrlong	#255, fp
1cfbc     08 4E 85 A1 |  if_e	sub	fp, #8
1cfc0     90 01 90 AD |  if_e	jmp	#LR__2336
1cfc4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1cfc4     08 4E 05 F1 | 	add	fp, #8
1cfc8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1cfcc     08 4E 85 F1 | 	sub	fp, #8
1cfd0     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1cfd4     1C 00 90 5D |  if_ne	jmp	#LR__2330
1cfd8     08 4E 05 F1 | 	add	fp, #8
1cfdc     A7 38 68 FC | 	wrlong	#28, fp
1cfe0     08 4E 85 F1 | 	sub	fp, #8
1cfe4     A7 12 02 FB | 	rdlong	arg01, fp
1cfe8     00 14 06 F6 | 	mov	arg02, #0
1cfec     68 C2 B0 FD | 	call	#__system___float_tointeger
1cff0     A7 FA 61 FC | 	wrlong	result1, fp
1cff4                 | LR__2330
1cff4                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1cff4     14 4E 05 F1 | 	add	fp, #20
1cff8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1cffc     14 4E 85 F1 | 	sub	fp, #20
1d000     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1d004     28 00 90 5D |  if_ne	jmp	#LR__2331
1d008     14 4E 05 F1 | 	add	fp, #20
1d00c     A7 38 68 FC | 	wrlong	#28, fp
1d010     08 4E 85 F1 | 	sub	fp, #8
1d014     A7 12 02 FB | 	rdlong	arg01, fp
1d018     0C 4E 85 F1 | 	sub	fp, #12
1d01c     00 14 06 F6 | 	mov	arg02, #0
1d020     34 C2 B0 FD | 	call	#__system___float_tointeger
1d024     0C 4E 05 F1 | 	add	fp, #12
1d028     A7 FA 61 FC | 	wrlong	result1, fp
1d02c     0C 4E 85 F1 | 	sub	fp, #12
1d030                 | LR__2331
1d030                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1d030     08 4E 05 F1 | 	add	fp, #8
1d034     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d038     08 4E 85 F1 | 	sub	fp, #8
1d03c     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1d040     14 4E 05 A1 |  if_e	add	fp, #20
1d044     A7 26 02 AB |  if_e	rdlong	local01, fp
1d048     14 4E 85 A1 |  if_e	sub	fp, #20
1d04c     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1d050     20 00 90 5D |  if_ne	jmp	#LR__2332
1d054     0C 4E 05 F1 | 	add	fp, #12
1d058     A7 26 02 FB | 	rdlong	local01, fp
1d05c     0C 4E 85 F1 | 	sub	fp, #12
1d060     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d064     13 8B 12 FD | 	qdiv	muldivb_, local01
1d068     18 26 62 FD | 	getqx	local01
1d06c     A7 26 62 FC | 	wrlong	local01, fp
1d070     E0 00 90 FD | 	jmp	#LR__2336
1d074                 | LR__2332
1d074                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1d074     08 4E 05 F1 | 	add	fp, #8
1d078     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d07c     08 4E 85 F1 | 	sub	fp, #8
1d080     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1d084     14 4E 05 A1 |  if_e	add	fp, #20
1d088     A7 26 02 AB |  if_e	rdlong	local01, fp
1d08c     14 4E 85 A1 |  if_e	sub	fp, #20
1d090     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1d094     2C 00 90 5D |  if_ne	jmp	#LR__2333
1d098     0C 4E 05 F1 | 	add	fp, #12
1d09c     A7 26 02 FB | 	rdlong	local01, fp
1d0a0     0C 4E 85 F1 | 	sub	fp, #12
1d0a4     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d0a8     13 8B 12 FD | 	qdiv	muldivb_, local01
1d0ac     18 26 62 FD | 	getqx	local01
1d0b0     A7 26 62 FC | 	wrlong	local01, fp
1d0b4     08 4E 05 F1 | 	add	fp, #8
1d0b8     A7 38 68 FC | 	wrlong	#28, fp
1d0bc     08 4E 85 F1 | 	sub	fp, #8
1d0c0     90 00 90 FD | 	jmp	#LR__2336
1d0c4                 | LR__2333
1d0c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1d0c4     08 4E 05 F1 | 	add	fp, #8
1d0c8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d0cc     08 4E 85 F1 | 	sub	fp, #8
1d0d0     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1d0d4     14 4E 05 A1 |  if_e	add	fp, #20
1d0d8     A7 26 02 AB |  if_e	rdlong	local01, fp
1d0dc     14 4E 85 A1 |  if_e	sub	fp, #20
1d0e0     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1d0e4     1C 00 90 5D |  if_ne	jmp	#LR__2334
1d0e8     A7 88 02 FB | 	rdlong	muldiva_, fp
1d0ec     0C 4E 05 F1 | 	add	fp, #12
1d0f0     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d0f4     0C 4E 85 F1 | 	sub	fp, #12
1d0f8     BA 00 A0 FD | 	call	#divide_
1d0fc     A7 8A 62 FC | 	wrlong	muldivb_, fp
1d100     50 00 90 FD | 	jmp	#LR__2336
1d104                 | LR__2334
1d104                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1d104     08 4E 05 F1 | 	add	fp, #8
1d108     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d10c     08 4E 85 F1 | 	sub	fp, #8
1d110     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1d114     14 4E 05 A1 |  if_e	add	fp, #20
1d118     A7 26 02 AB |  if_e	rdlong	local01, fp
1d11c     14 4E 85 A1 |  if_e	sub	fp, #20
1d120     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1d124     1C 00 90 5D |  if_ne	jmp	#LR__2335
1d128     A7 88 02 FB | 	rdlong	muldiva_, fp
1d12c     0C 4E 05 F1 | 	add	fp, #12
1d130     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d134     0C 4E 85 F1 | 	sub	fp, #12
1d138     BA 00 A0 FD | 	call	#divide_
1d13c     A7 8A 62 FC | 	wrlong	muldivb_, fp
1d140     10 00 90 FD | 	jmp	#LR__2336
1d144                 | LR__2335
1d144     A7 16 68 FC | 	wrlong	#11, fp
1d148     08 4E 05 F1 | 	add	fp, #8
1d14c     A7 FE 69 FC | 	wrlong	#255, fp
1d150     08 4E 85 F1 | 	sub	fp, #8
1d154                 | LR__2336
1d154     A7 12 02 F6 | 	mov	arg01, fp
1d158     1C 02 BF FD | 	call	#_push
1d15c     A7 F0 03 F6 | 	mov	ptra, fp
1d160     B2 00 A0 FD | 	call	#popregs_
1d164                 | _do_div_ret
1d164     2D 00 64 FD | 	ret
1d168                 | 
1d168                 | ' 
1d168                 | ' '--------------------------------- equal (=)
1d168                 | ' 
1d168                 | ' sub do_eq
1d168                 | _do_eq
1d168     05 4A 05 F6 | 	mov	COUNT_, #5
1d16c     A8 00 A0 FD | 	call	#pushregs_
1d170     18 F0 07 F1 | 	add	ptra, #24
1d174     68 01 BF FD | 	call	#_pop
1d178     FD 26 02 F6 | 	mov	local01, result1
1d17c     FE 28 02 F6 | 	mov	local02, result2
1d180     FF 2A 02 F6 | 	mov	local03, result3
1d184     0C 4E 05 F1 | 	add	fp, #12
1d188     A7 26 62 FC | 	wrlong	local01, fp
1d18c     04 4E 05 F1 | 	add	fp, #4
1d190     A7 28 62 FC | 	wrlong	local02, fp
1d194     04 4E 05 F1 | 	add	fp, #4
1d198     A7 2A 62 FC | 	wrlong	local03, fp
1d19c     14 4E 85 F1 | 	sub	fp, #20
1d1a0     3C 01 BF FD | 	call	#_pop
1d1a4     FF 2A 02 F6 | 	mov	local03, result3
1d1a8     A7 FA 61 FC | 	wrlong	result1, fp
1d1ac     04 4E 05 F1 | 	add	fp, #4
1d1b0     A7 FC 61 FC | 	wrlong	result2, fp
1d1b4     04 4E 05 F1 | 	add	fp, #4
1d1b8     A7 2A 62 FC | 	wrlong	local03, fp
1d1bc                 | ' 
1d1bc                 | ' t2=pop()
1d1bc                 | ' t1=pop()
1d1bc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1d1bc     08 4E 85 F1 | 	sub	fp, #8
1d1c0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d1c4     14 4E 05 A1 |  if_e	add	fp, #20
1d1c8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d1cc     14 4E 85 A1 |  if_e	sub	fp, #20
1d1d0     16 2B 02 A6 |  if_e	mov	local03, local04
1d1d4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d1d8     28 00 90 5D |  if_ne	jmp	#LR__2340
1d1dc     00 26 06 F6 | 	mov	local01, #0
1d1e0     A7 12 02 FB | 	rdlong	arg01, fp
1d1e4     0C 4E 05 F1 | 	add	fp, #12
1d1e8     A7 14 02 FB | 	rdlong	arg02, fp
1d1ec     0C 4E 85 F1 | 	sub	fp, #12
1d1f0     4C 8D B0 FD | 	call	#__system___string_cmp
1d1f4     00 FA 0D F2 | 	cmp	result1, #0 wz
1d1f8     00 26 26 A6 |  if_e	not	local01, #0
1d1fc     A7 26 62 FC | 	wrlong	local01, fp
1d200     20 04 90 FD | 	jmp	#LR__2353
1d204                 | LR__2340
1d204                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1d204     08 4E 05 F1 | 	add	fp, #8
1d208     A7 26 02 FB | 	rdlong	local01, fp
1d20c     08 4E 85 F1 | 	sub	fp, #8
1d210     1E 26 0E F2 | 	cmp	local01, #30 wz
1d214     14 4E 05 A1 |  if_e	add	fp, #20
1d218     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d21c     14 4E 85 A1 |  if_e	sub	fp, #20
1d220     16 2B 02 A6 |  if_e	mov	local03, local04
1d224     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d228     2C 00 90 5D |  if_ne	jmp	#LR__2341
1d22c     00 26 06 F6 | 	mov	local01, #0
1d230     A7 12 02 FB | 	rdlong	arg01, fp
1d234     0C 4E 05 F1 | 	add	fp, #12
1d238     A7 14 02 FB | 	rdlong	arg02, fp
1d23c     0C 4E 85 F1 | 	sub	fp, #12
1d240     01 16 06 F6 | 	mov	arg03, #1
1d244     7C BF B0 FD | 	call	#__system___float_cmp
1d248     00 FA 0D F2 | 	cmp	result1, #0 wz
1d24c     00 26 26 A6 |  if_e	not	local01, #0
1d250     A7 26 62 FC | 	wrlong	local01, fp
1d254     CC 03 90 FD | 	jmp	#LR__2353
1d258                 | LR__2341
1d258                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1d258     08 4E 05 F1 | 	add	fp, #8
1d25c     A7 26 02 FB | 	rdlong	local01, fp
1d260     08 4E 85 F1 | 	sub	fp, #8
1d264     1E 26 0E F2 | 	cmp	local01, #30 wz
1d268     14 4E 05 A1 |  if_e	add	fp, #20
1d26c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d270     14 4E 85 A1 |  if_e	sub	fp, #20
1d274     16 2B 02 A6 |  if_e	mov	local03, local04
1d278     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d27c     48 00 90 5D |  if_ne	jmp	#LR__2342
1d280     00 26 06 F6 | 	mov	local01, #0
1d284     A7 28 02 FB | 	rdlong	local02, fp
1d288     0C 4E 05 F1 | 	add	fp, #12
1d28c     A7 12 02 FB | 	rdlong	arg01, fp
1d290     0C 4E 85 F1 | 	sub	fp, #12
1d294     09 13 52 F6 | 	abs	arg01, arg01 wc
1d298     1F 2E C6 C9 |  if_b	decod	local05, #31
1d29c     00 2E 06 36 |  if_ae	mov	local05, #0
1d2a0     E8 B6 B0 FD | 	call	#__system___float_fromuns
1d2a4     17 FB 61 F5 | 	xor	result1, local05
1d2a8     FD 14 02 F6 | 	mov	arg02, result1
1d2ac     14 13 02 F6 | 	mov	arg01, local02
1d2b0     01 16 06 F6 | 	mov	arg03, #1
1d2b4     0C BF B0 FD | 	call	#__system___float_cmp
1d2b8     00 FA 0D F2 | 	cmp	result1, #0 wz
1d2bc     00 26 26 A6 |  if_e	not	local01, #0
1d2c0     A7 26 62 FC | 	wrlong	local01, fp
1d2c4     5C 03 90 FD | 	jmp	#LR__2353
1d2c8                 | LR__2342
1d2c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1d2c8     08 4E 05 F1 | 	add	fp, #8
1d2cc     A7 26 02 FB | 	rdlong	local01, fp
1d2d0     08 4E 85 F1 | 	sub	fp, #8
1d2d4     1E 26 0E F2 | 	cmp	local01, #30 wz
1d2d8     14 4E 05 A1 |  if_e	add	fp, #20
1d2dc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d2e0     14 4E 85 A1 |  if_e	sub	fp, #20
1d2e4     16 2B 02 A6 |  if_e	mov	local03, local04
1d2e8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d2ec     38 00 90 5D |  if_ne	jmp	#LR__2343
1d2f0     00 26 06 F6 | 	mov	local01, #0
1d2f4     A7 28 02 FB | 	rdlong	local02, fp
1d2f8     0C 4E 05 F1 | 	add	fp, #12
1d2fc     A7 12 02 FB | 	rdlong	arg01, fp
1d300     0C 4E 85 F1 | 	sub	fp, #12
1d304     84 B6 B0 FD | 	call	#__system___float_fromuns
1d308     FD 14 02 F6 | 	mov	arg02, result1
1d30c     14 13 02 F6 | 	mov	arg01, local02
1d310     01 16 06 F6 | 	mov	arg03, #1
1d314     AC BE B0 FD | 	call	#__system___float_cmp
1d318     00 FA 0D F2 | 	cmp	result1, #0 wz
1d31c     00 26 26 A6 |  if_e	not	local01, #0
1d320     A7 26 62 FC | 	wrlong	local01, fp
1d324     FC 02 90 FD | 	jmp	#LR__2353
1d328                 | LR__2343
1d328                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1d328     08 4E 05 F1 | 	add	fp, #8
1d32c     A7 26 02 FB | 	rdlong	local01, fp
1d330     08 4E 85 F1 | 	sub	fp, #8
1d334     1C 26 0E F2 | 	cmp	local01, #28 wz
1d338     14 4E 05 A1 |  if_e	add	fp, #20
1d33c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d340     14 4E 85 A1 |  if_e	sub	fp, #20
1d344     16 2B 02 A6 |  if_e	mov	local03, local04
1d348     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d34c     44 00 90 5D |  if_ne	jmp	#LR__2344
1d350     00 26 06 F6 | 	mov	local01, #0
1d354     A7 12 02 FB | 	rdlong	arg01, fp
1d358     09 13 52 F6 | 	abs	arg01, arg01 wc
1d35c     1F 2E C6 C9 |  if_b	decod	local05, #31
1d360     00 2E 06 36 |  if_ae	mov	local05, #0
1d364     24 B6 B0 FD | 	call	#__system___float_fromuns
1d368     17 FB 61 F5 | 	xor	result1, local05
1d36c     FD 12 02 F6 | 	mov	arg01, result1
1d370     0C 4E 05 F1 | 	add	fp, #12
1d374     A7 14 02 FB | 	rdlong	arg02, fp
1d378     0C 4E 85 F1 | 	sub	fp, #12
1d37c     01 16 06 F6 | 	mov	arg03, #1
1d380     40 BE B0 FD | 	call	#__system___float_cmp
1d384     00 FA 0D F2 | 	cmp	result1, #0 wz
1d388     00 26 26 A6 |  if_e	not	local01, #0
1d38c     A7 26 62 FC | 	wrlong	local01, fp
1d390     90 02 90 FD | 	jmp	#LR__2353
1d394                 | LR__2344
1d394                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1d394     08 4E 05 F1 | 	add	fp, #8
1d398     A7 26 02 FB | 	rdlong	local01, fp
1d39c     08 4E 85 F1 | 	sub	fp, #8
1d3a0     1C 26 0E F2 | 	cmp	local01, #28 wz
1d3a4     14 4E 05 A1 |  if_e	add	fp, #20
1d3a8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d3ac     14 4E 85 A1 |  if_e	sub	fp, #20
1d3b0     16 2B 02 A6 |  if_e	mov	local03, local04
1d3b4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d3b8     24 00 90 5D |  if_ne	jmp	#LR__2345
1d3bc     00 26 06 F6 | 	mov	local01, #0
1d3c0     A7 28 02 FB | 	rdlong	local02, fp
1d3c4     0C 4E 05 F1 | 	add	fp, #12
1d3c8     A7 2A 02 FB | 	rdlong	local03, fp
1d3cc     0C 4E 85 F1 | 	sub	fp, #12
1d3d0     15 29 0A F2 | 	cmp	local02, local03 wz
1d3d4     01 26 66 A6 |  if_e	neg	local01, #1
1d3d8     A7 26 62 FC | 	wrlong	local01, fp
1d3dc     44 02 90 FD | 	jmp	#LR__2353
1d3e0                 | LR__2345
1d3e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1d3e0     08 4E 05 F1 | 	add	fp, #8
1d3e4     A7 26 02 FB | 	rdlong	local01, fp
1d3e8     08 4E 85 F1 | 	sub	fp, #8
1d3ec     1C 26 0E F2 | 	cmp	local01, #28 wz
1d3f0     14 4E 05 A1 |  if_e	add	fp, #20
1d3f4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d3f8     14 4E 85 A1 |  if_e	sub	fp, #20
1d3fc     16 2B 02 A6 |  if_e	mov	local03, local04
1d400     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d404     24 00 90 5D |  if_ne	jmp	#LR__2346
1d408     00 26 06 F6 | 	mov	local01, #0
1d40c     A7 28 02 FB | 	rdlong	local02, fp
1d410     0C 4E 05 F1 | 	add	fp, #12
1d414     A7 2A 02 FB | 	rdlong	local03, fp
1d418     0C 4E 85 F1 | 	sub	fp, #12
1d41c     15 29 0A F2 | 	cmp	local02, local03 wz
1d420     01 26 66 A6 |  if_e	neg	local01, #1
1d424     A7 26 62 FC | 	wrlong	local01, fp
1d428     F8 01 90 FD | 	jmp	#LR__2353
1d42c                 | LR__2346
1d42c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1d42c     08 4E 05 F1 | 	add	fp, #8
1d430     A7 26 02 FB | 	rdlong	local01, fp
1d434     08 4E 85 F1 | 	sub	fp, #8
1d438     1D 26 0E F2 | 	cmp	local01, #29 wz
1d43c     14 4E 05 A1 |  if_e	add	fp, #20
1d440     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d444     14 4E 85 A1 |  if_e	sub	fp, #20
1d448     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1d44c     34 00 90 5D |  if_ne	jmp	#LR__2347
1d450     00 26 06 F6 | 	mov	local01, #0
1d454     A7 12 02 FB | 	rdlong	arg01, fp
1d458     30 B5 B0 FD | 	call	#__system___float_fromuns
1d45c     FD 12 02 F6 | 	mov	arg01, result1
1d460     0C 4E 05 F1 | 	add	fp, #12
1d464     A7 14 02 FB | 	rdlong	arg02, fp
1d468     0C 4E 85 F1 | 	sub	fp, #12
1d46c     01 16 06 F6 | 	mov	arg03, #1
1d470     50 BD B0 FD | 	call	#__system___float_cmp
1d474     00 FA 0D F2 | 	cmp	result1, #0 wz
1d478     00 26 26 A6 |  if_e	not	local01, #0
1d47c     A7 26 62 FC | 	wrlong	local01, fp
1d480     A0 01 90 FD | 	jmp	#LR__2353
1d484                 | LR__2347
1d484                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1d484     08 4E 05 F1 | 	add	fp, #8
1d488     A7 26 02 FB | 	rdlong	local01, fp
1d48c     08 4E 85 F1 | 	sub	fp, #8
1d490     1D 26 0E F2 | 	cmp	local01, #29 wz
1d494     14 4E 05 A1 |  if_e	add	fp, #20
1d498     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d49c     14 4E 85 A1 |  if_e	sub	fp, #20
1d4a0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d4a4     24 00 90 5D |  if_ne	jmp	#LR__2348
1d4a8     00 26 06 F6 | 	mov	local01, #0
1d4ac     A7 28 02 FB | 	rdlong	local02, fp
1d4b0     0C 4E 05 F1 | 	add	fp, #12
1d4b4     A7 2A 02 FB | 	rdlong	local03, fp
1d4b8     0C 4E 85 F1 | 	sub	fp, #12
1d4bc     15 29 0A F2 | 	cmp	local02, local03 wz
1d4c0     01 26 66 A6 |  if_e	neg	local01, #1
1d4c4     A7 26 62 FC | 	wrlong	local01, fp
1d4c8     58 01 90 FD | 	jmp	#LR__2353
1d4cc                 | LR__2348
1d4cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1d4cc     08 4E 05 F1 | 	add	fp, #8
1d4d0     A7 26 02 FB | 	rdlong	local01, fp
1d4d4     08 4E 85 F1 | 	sub	fp, #8
1d4d8     1D 26 0E F2 | 	cmp	local01, #29 wz
1d4dc     14 4E 05 A1 |  if_e	add	fp, #20
1d4e0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d4e4     14 4E 85 A1 |  if_e	sub	fp, #20
1d4e8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d4ec     24 00 90 5D |  if_ne	jmp	#LR__2349
1d4f0     00 26 06 F6 | 	mov	local01, #0
1d4f4     A7 28 02 FB | 	rdlong	local02, fp
1d4f8     0C 4E 05 F1 | 	add	fp, #12
1d4fc     A7 2A 02 FB | 	rdlong	local03, fp
1d500     0C 4E 85 F1 | 	sub	fp, #12
1d504     15 29 0A F2 | 	cmp	local02, local03 wz
1d508     01 26 66 A6 |  if_e	neg	local01, #1
1d50c     A7 26 62 FC | 	wrlong	local01, fp
1d510     10 01 90 FD | 	jmp	#LR__2353
1d514                 | LR__2349
1d514                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1d514     08 4E 05 F1 | 	add	fp, #8
1d518     A7 26 02 FB | 	rdlong	local01, fp
1d51c     08 4E 85 F1 | 	sub	fp, #8
1d520     2B 26 0E F2 | 	cmp	local01, #43 wz
1d524     14 4E 05 A1 |  if_e	add	fp, #20
1d528     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d52c     14 4E 85 A1 |  if_e	sub	fp, #20
1d530     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d534     30 00 90 5D |  if_ne	jmp	#LR__2350
1d538     00 26 06 F6 | 	mov	local01, #0
1d53c     A7 12 02 FB | 	rdlong	arg01, fp
1d540     14 FF BE FD | 	call	#_convertstring
1d544     FD 12 02 F6 | 	mov	arg01, result1
1d548     0C 4E 05 F1 | 	add	fp, #12
1d54c     A7 14 02 FB | 	rdlong	arg02, fp
1d550     0C 4E 85 F1 | 	sub	fp, #12
1d554     E8 89 B0 FD | 	call	#__system___string_cmp
1d558     00 FA 0D F2 | 	cmp	result1, #0 wz
1d55c     00 26 26 A6 |  if_e	not	local01, #0
1d560     A7 26 62 FC | 	wrlong	local01, fp
1d564     BC 00 90 FD | 	jmp	#LR__2353
1d568                 | LR__2350
1d568                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1d568     08 4E 05 F1 | 	add	fp, #8
1d56c     A7 26 02 FB | 	rdlong	local01, fp
1d570     08 4E 85 F1 | 	sub	fp, #8
1d574     1F 26 0E F2 | 	cmp	local01, #31 wz
1d578     14 4E 05 A1 |  if_e	add	fp, #20
1d57c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d580     14 4E 85 A1 |  if_e	sub	fp, #20
1d584     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d588     34 00 90 5D |  if_ne	jmp	#LR__2351
1d58c     00 26 06 F6 | 	mov	local01, #0
1d590     A7 28 02 FB | 	rdlong	local02, fp
1d594     0C 4E 05 F1 | 	add	fp, #12
1d598     A7 12 02 FB | 	rdlong	arg01, fp
1d59c     0C 4E 85 F1 | 	sub	fp, #12
1d5a0     B4 FE BE FD | 	call	#_convertstring
1d5a4     FD 14 02 F6 | 	mov	arg02, result1
1d5a8     14 13 02 F6 | 	mov	arg01, local02
1d5ac     90 89 B0 FD | 	call	#__system___string_cmp
1d5b0     00 FA 0D F2 | 	cmp	result1, #0 wz
1d5b4     00 26 26 A6 |  if_e	not	local01, #0
1d5b8     A7 26 62 FC | 	wrlong	local01, fp
1d5bc     64 00 90 FD | 	jmp	#LR__2353
1d5c0                 | LR__2351
1d5c0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1d5c0     08 4E 05 F1 | 	add	fp, #8
1d5c4     A7 26 02 FB | 	rdlong	local01, fp
1d5c8     08 4E 85 F1 | 	sub	fp, #8
1d5cc     2B 26 0E F2 | 	cmp	local01, #43 wz
1d5d0     14 4E 05 A1 |  if_e	add	fp, #20
1d5d4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d5d8     14 4E 85 A1 |  if_e	sub	fp, #20
1d5dc     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d5e0     3C 00 90 5D |  if_ne	jmp	#LR__2352
1d5e4     00 26 06 F6 | 	mov	local01, #0
1d5e8     A7 12 02 FB | 	rdlong	arg01, fp
1d5ec     68 FE BE FD | 	call	#_convertstring
1d5f0     FD 28 02 F6 | 	mov	local02, result1
1d5f4     0C 4E 05 F1 | 	add	fp, #12
1d5f8     A7 12 02 FB | 	rdlong	arg01, fp
1d5fc     0C 4E 85 F1 | 	sub	fp, #12
1d600     54 FE BE FD | 	call	#_convertstring
1d604     FD 14 02 F6 | 	mov	arg02, result1
1d608     14 13 02 F6 | 	mov	arg01, local02
1d60c     30 89 B0 FD | 	call	#__system___string_cmp
1d610     00 FA 0D F2 | 	cmp	result1, #0 wz
1d614     00 26 26 A6 |  if_e	not	local01, #0
1d618     A7 26 62 FC | 	wrlong	local01, fp
1d61c     04 00 90 FD | 	jmp	#LR__2353
1d620                 | LR__2352
1d620     A7 00 68 FC | 	wrlong	#0, fp
1d624                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d624                 | LR__2353
1d624     08 4E 05 F1 | 	add	fp, #8
1d628     A7 38 68 FC | 	wrlong	#28, fp
1d62c     08 4E 85 F1 | 	sub	fp, #8
1d630     A7 12 02 F6 | 	mov	arg01, fp
1d634     40 FD BE FD | 	call	#_push
1d638     A7 F0 03 F6 | 	mov	ptra, fp
1d63c     B2 00 A0 FD | 	call	#popregs_
1d640                 | _do_eq_ret
1d640     2D 00 64 FD | 	ret
1d644                 | 
1d644                 | ' 
1d644                 | ' '--------------------------------- fdiv (/) - float divide
1d644                 | ' 
1d644                 | ' sub do_fdiv 
1d644                 | _do_fdiv
1d644     02 4A 05 F6 | 	mov	COUNT_, #2
1d648     A8 00 A0 FD | 	call	#pushregs_
1d64c     18 F0 07 F1 | 	add	ptra, #24
1d650     8C FC BE FD | 	call	#_pop
1d654     FD 14 02 F6 | 	mov	arg02, result1
1d658     FE 12 02 F6 | 	mov	arg01, result2
1d65c     FF 26 02 F6 | 	mov	local01, result3
1d660     0C 4E 05 F1 | 	add	fp, #12
1d664     A7 14 62 FC | 	wrlong	arg02, fp
1d668     04 4E 05 F1 | 	add	fp, #4
1d66c     A7 12 62 FC | 	wrlong	arg01, fp
1d670     04 4E 05 F1 | 	add	fp, #4
1d674     A7 26 62 FC | 	wrlong	local01, fp
1d678     14 4E 85 F1 | 	sub	fp, #20
1d67c     60 FC BE FD | 	call	#_pop
1d680     A7 FA 61 FC | 	wrlong	result1, fp
1d684     04 4E 05 F1 | 	add	fp, #4
1d688     A7 FC 61 FC | 	wrlong	result2, fp
1d68c     04 4E 05 F1 | 	add	fp, #4
1d690     A7 FE 61 FC | 	wrlong	result3, fp
1d694                 | ' 
1d694                 | ' t2=pop()
1d694                 | ' t1=pop()
1d694                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1d694     08 4E 85 F1 | 	sub	fp, #8
1d698     1F FE 0D F2 | 	cmp	result3, #31 wz
1d69c     14 4E 05 51 |  if_ne	add	fp, #20
1d6a0     A7 26 02 5B |  if_ne	rdlong	local01, fp
1d6a4     14 4E 85 51 |  if_ne	sub	fp, #20
1d6a8     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1d6ac     A7 14 68 AC |  if_e	wrlong	#10, fp
1d6b0     08 4E 05 A1 |  if_e	add	fp, #8
1d6b4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1d6b8     08 4E 85 A1 |  if_e	sub	fp, #8
1d6bc     38 01 90 AD |  if_e	jmp	#LR__2365
1d6c0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1d6c0     08 4E 05 F1 | 	add	fp, #8
1d6c4     A7 14 02 FB | 	rdlong	arg02, fp
1d6c8     08 4E 85 F1 | 	sub	fp, #8
1d6cc     1C 14 0E F2 | 	cmp	arg02, #28 wz
1d6d0     28 00 90 5D |  if_ne	jmp	#LR__2360
1d6d4     08 4E 05 F1 | 	add	fp, #8
1d6d8     A7 3C 68 FC | 	wrlong	#30, fp
1d6dc     08 4E 85 F1 | 	sub	fp, #8
1d6e0     A7 12 02 FB | 	rdlong	arg01, fp
1d6e4     09 13 52 F6 | 	abs	arg01, arg01 wc
1d6e8     1F 28 C6 C9 |  if_b	decod	local02, #31
1d6ec     00 28 06 36 |  if_ae	mov	local02, #0
1d6f0     98 B2 B0 FD | 	call	#__system___float_fromuns
1d6f4     14 FB 61 F5 | 	xor	result1, local02
1d6f8     A7 FA 61 FC | 	wrlong	result1, fp
1d6fc                 | LR__2360
1d6fc                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1d6fc     08 4E 05 F1 | 	add	fp, #8
1d700     A7 14 02 FB | 	rdlong	arg02, fp
1d704     08 4E 85 F1 | 	sub	fp, #8
1d708     1D 14 0E F2 | 	cmp	arg02, #29 wz
1d70c     18 00 90 5D |  if_ne	jmp	#LR__2361
1d710     08 4E 05 F1 | 	add	fp, #8
1d714     A7 3C 68 FC | 	wrlong	#30, fp
1d718     08 4E 85 F1 | 	sub	fp, #8
1d71c     A7 12 02 FB | 	rdlong	arg01, fp
1d720     68 B2 B0 FD | 	call	#__system___float_fromuns
1d724     A7 FA 61 FC | 	wrlong	result1, fp
1d728                 | LR__2361
1d728                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1d728     14 4E 05 F1 | 	add	fp, #20
1d72c     A7 14 02 FB | 	rdlong	arg02, fp
1d730     14 4E 85 F1 | 	sub	fp, #20
1d734     1C 14 0E F2 | 	cmp	arg02, #28 wz
1d738     34 00 90 5D |  if_ne	jmp	#LR__2362
1d73c     14 4E 05 F1 | 	add	fp, #20
1d740     A7 3C 68 FC | 	wrlong	#30, fp
1d744     08 4E 85 F1 | 	sub	fp, #8
1d748     A7 12 02 FB | 	rdlong	arg01, fp
1d74c     0C 4E 85 F1 | 	sub	fp, #12
1d750     09 13 52 F6 | 	abs	arg01, arg01 wc
1d754     1F 28 C6 C9 |  if_b	decod	local02, #31
1d758     00 28 06 36 |  if_ae	mov	local02, #0
1d75c     2C B2 B0 FD | 	call	#__system___float_fromuns
1d760     14 FB 61 F5 | 	xor	result1, local02
1d764     0C 4E 05 F1 | 	add	fp, #12
1d768     A7 FA 61 FC | 	wrlong	result1, fp
1d76c     0C 4E 85 F1 | 	sub	fp, #12
1d770                 | LR__2362
1d770                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1d770     14 4E 05 F1 | 	add	fp, #20
1d774     A7 14 02 FB | 	rdlong	arg02, fp
1d778     14 4E 85 F1 | 	sub	fp, #20
1d77c     1D 14 0E F2 | 	cmp	arg02, #29 wz
1d780     24 00 90 5D |  if_ne	jmp	#LR__2363
1d784     14 4E 05 F1 | 	add	fp, #20
1d788     A7 3C 68 FC | 	wrlong	#30, fp
1d78c     08 4E 85 F1 | 	sub	fp, #8
1d790     A7 12 02 FB | 	rdlong	arg01, fp
1d794     0C 4E 85 F1 | 	sub	fp, #12
1d798     F0 B1 B0 FD | 	call	#__system___float_fromuns
1d79c     0C 4E 05 F1 | 	add	fp, #12
1d7a0     A7 FA 61 FC | 	wrlong	result1, fp
1d7a4     0C 4E 85 F1 | 	sub	fp, #12
1d7a8                 | LR__2363
1d7a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1d7a8     08 4E 05 F1 | 	add	fp, #8
1d7ac     A7 14 02 FB | 	rdlong	arg02, fp
1d7b0     08 4E 85 F1 | 	sub	fp, #8
1d7b4     1E 14 0E F2 | 	cmp	arg02, #30 wz
1d7b8     14 4E 05 A1 |  if_e	add	fp, #20
1d7bc     A7 26 02 AB |  if_e	rdlong	local01, fp
1d7c0     14 4E 85 A1 |  if_e	sub	fp, #20
1d7c4     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1d7c8     1C 00 90 5D |  if_ne	jmp	#LR__2364
1d7cc     A7 12 02 FB | 	rdlong	arg01, fp
1d7d0     0C 4E 05 F1 | 	add	fp, #12
1d7d4     A7 14 02 FB | 	rdlong	arg02, fp
1d7d8     0C 4E 85 F1 | 	sub	fp, #12
1d7dc     B4 B7 B0 FD | 	call	#__system___float_div
1d7e0     A7 FA 61 FC | 	wrlong	result1, fp
1d7e4     10 00 90 FD | 	jmp	#LR__2365
1d7e8                 | LR__2364
1d7e8     A7 16 68 FC | 	wrlong	#11, fp
1d7ec     08 4E 05 F1 | 	add	fp, #8
1d7f0     A7 FE 69 FC | 	wrlong	#255, fp
1d7f4     08 4E 85 F1 | 	sub	fp, #8
1d7f8                 | LR__2365
1d7f8     A7 12 02 F6 | 	mov	arg01, fp
1d7fc     78 FB BE FD | 	call	#_push
1d800     A7 F0 03 F6 | 	mov	ptra, fp
1d804     B2 00 A0 FD | 	call	#popregs_
1d808                 | _do_fdiv_ret
1d808     2D 00 64 FD | 	ret
1d80c                 | 
1d80c                 | ' 
1d80c                 | ' '--------------------------------- greater or equal (>=)
1d80c                 | ' 
1d80c                 | ' sub do_ge
1d80c                 | _do_ge
1d80c     05 4A 05 F6 | 	mov	COUNT_, #5
1d810     A8 00 A0 FD | 	call	#pushregs_
1d814     18 F0 07 F1 | 	add	ptra, #24
1d818     C4 FA BE FD | 	call	#_pop
1d81c     FD 26 02 F6 | 	mov	local01, result1
1d820     FE 28 02 F6 | 	mov	local02, result2
1d824     FF 2A 02 F6 | 	mov	local03, result3
1d828     0C 4E 05 F1 | 	add	fp, #12
1d82c     A7 26 62 FC | 	wrlong	local01, fp
1d830     04 4E 05 F1 | 	add	fp, #4
1d834     A7 28 62 FC | 	wrlong	local02, fp
1d838     04 4E 05 F1 | 	add	fp, #4
1d83c     A7 2A 62 FC | 	wrlong	local03, fp
1d840     14 4E 85 F1 | 	sub	fp, #20
1d844     98 FA BE FD | 	call	#_pop
1d848     FF 2A 02 F6 | 	mov	local03, result3
1d84c     A7 FA 61 FC | 	wrlong	result1, fp
1d850     04 4E 05 F1 | 	add	fp, #4
1d854     A7 FC 61 FC | 	wrlong	result2, fp
1d858     04 4E 05 F1 | 	add	fp, #4
1d85c     A7 2A 62 FC | 	wrlong	local03, fp
1d860                 | ' 
1d860                 | ' t2=pop()
1d860                 | ' t1=pop()
1d860                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1d860     08 4E 85 F1 | 	sub	fp, #8
1d864     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d868     14 4E 05 A1 |  if_e	add	fp, #20
1d86c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d870     14 4E 85 A1 |  if_e	sub	fp, #20
1d874     16 2B 02 A6 |  if_e	mov	local03, local04
1d878     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d87c     28 00 90 5D |  if_ne	jmp	#LR__2370
1d880     00 26 06 F6 | 	mov	local01, #0
1d884     A7 12 02 FB | 	rdlong	arg01, fp
1d888     0C 4E 05 F1 | 	add	fp, #12
1d88c     A7 14 02 FB | 	rdlong	arg02, fp
1d890     0C 4E 85 F1 | 	sub	fp, #12
1d894     A8 86 B0 FD | 	call	#__system___string_cmp
1d898     00 FA 55 F2 | 	cmps	result1, #0 wc
1d89c     00 26 26 36 |  if_ae	not	local01, #0
1d8a0     A7 26 62 FC | 	wrlong	local01, fp
1d8a4     24 04 90 FD | 	jmp	#LR__2383
1d8a8                 | LR__2370
1d8a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1d8a8     08 4E 05 F1 | 	add	fp, #8
1d8ac     A7 26 02 FB | 	rdlong	local01, fp
1d8b0     08 4E 85 F1 | 	sub	fp, #8
1d8b4     1E 26 0E F2 | 	cmp	local01, #30 wz
1d8b8     14 4E 05 A1 |  if_e	add	fp, #20
1d8bc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d8c0     14 4E 85 A1 |  if_e	sub	fp, #20
1d8c4     16 2B 02 A6 |  if_e	mov	local03, local04
1d8c8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d8cc     2C 00 90 5D |  if_ne	jmp	#LR__2371
1d8d0     00 26 06 F6 | 	mov	local01, #0
1d8d4     A7 12 02 FB | 	rdlong	arg01, fp
1d8d8     0C 4E 05 F1 | 	add	fp, #12
1d8dc     A7 14 02 FB | 	rdlong	arg02, fp
1d8e0     0C 4E 85 F1 | 	sub	fp, #12
1d8e4     01 16 66 F6 | 	neg	arg03, #1
1d8e8     D8 B8 B0 FD | 	call	#__system___float_cmp
1d8ec     00 FA 55 F2 | 	cmps	result1, #0 wc
1d8f0     00 26 26 36 |  if_ae	not	local01, #0
1d8f4     A7 26 62 FC | 	wrlong	local01, fp
1d8f8     D0 03 90 FD | 	jmp	#LR__2383
1d8fc                 | LR__2371
1d8fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1d8fc     08 4E 05 F1 | 	add	fp, #8
1d900     A7 26 02 FB | 	rdlong	local01, fp
1d904     08 4E 85 F1 | 	sub	fp, #8
1d908     1E 26 0E F2 | 	cmp	local01, #30 wz
1d90c     14 4E 05 A1 |  if_e	add	fp, #20
1d910     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d914     14 4E 85 A1 |  if_e	sub	fp, #20
1d918     16 2B 02 A6 |  if_e	mov	local03, local04
1d91c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d920     48 00 90 5D |  if_ne	jmp	#LR__2372
1d924     00 26 06 F6 | 	mov	local01, #0
1d928     A7 28 02 FB | 	rdlong	local02, fp
1d92c     0C 4E 05 F1 | 	add	fp, #12
1d930     A7 12 02 FB | 	rdlong	arg01, fp
1d934     0C 4E 85 F1 | 	sub	fp, #12
1d938     09 13 52 F6 | 	abs	arg01, arg01 wc
1d93c     1F 2E C6 C9 |  if_b	decod	local05, #31
1d940     00 2E 06 36 |  if_ae	mov	local05, #0
1d944     44 B0 B0 FD | 	call	#__system___float_fromuns
1d948     17 FB 61 F5 | 	xor	result1, local05
1d94c     FD 14 02 F6 | 	mov	arg02, result1
1d950     14 13 02 F6 | 	mov	arg01, local02
1d954     01 16 66 F6 | 	neg	arg03, #1
1d958     68 B8 B0 FD | 	call	#__system___float_cmp
1d95c     00 FA 55 F2 | 	cmps	result1, #0 wc
1d960     00 26 26 36 |  if_ae	not	local01, #0
1d964     A7 26 62 FC | 	wrlong	local01, fp
1d968     60 03 90 FD | 	jmp	#LR__2383
1d96c                 | LR__2372
1d96c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1d96c     08 4E 05 F1 | 	add	fp, #8
1d970     A7 26 02 FB | 	rdlong	local01, fp
1d974     08 4E 85 F1 | 	sub	fp, #8
1d978     1E 26 0E F2 | 	cmp	local01, #30 wz
1d97c     14 4E 05 A1 |  if_e	add	fp, #20
1d980     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d984     14 4E 85 A1 |  if_e	sub	fp, #20
1d988     16 2B 02 A6 |  if_e	mov	local03, local04
1d98c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d990     38 00 90 5D |  if_ne	jmp	#LR__2373
1d994     00 26 06 F6 | 	mov	local01, #0
1d998     A7 28 02 FB | 	rdlong	local02, fp
1d99c     0C 4E 05 F1 | 	add	fp, #12
1d9a0     A7 12 02 FB | 	rdlong	arg01, fp
1d9a4     0C 4E 85 F1 | 	sub	fp, #12
1d9a8     E0 AF B0 FD | 	call	#__system___float_fromuns
1d9ac     FD 14 02 F6 | 	mov	arg02, result1
1d9b0     14 13 02 F6 | 	mov	arg01, local02
1d9b4     01 16 66 F6 | 	neg	arg03, #1
1d9b8     08 B8 B0 FD | 	call	#__system___float_cmp
1d9bc     00 FA 55 F2 | 	cmps	result1, #0 wc
1d9c0     00 26 26 36 |  if_ae	not	local01, #0
1d9c4     A7 26 62 FC | 	wrlong	local01, fp
1d9c8     00 03 90 FD | 	jmp	#LR__2383
1d9cc                 | LR__2373
1d9cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1d9cc     08 4E 05 F1 | 	add	fp, #8
1d9d0     A7 26 02 FB | 	rdlong	local01, fp
1d9d4     08 4E 85 F1 | 	sub	fp, #8
1d9d8     1C 26 0E F2 | 	cmp	local01, #28 wz
1d9dc     14 4E 05 A1 |  if_e	add	fp, #20
1d9e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d9e4     14 4E 85 A1 |  if_e	sub	fp, #20
1d9e8     16 2B 02 A6 |  if_e	mov	local03, local04
1d9ec     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d9f0     44 00 90 5D |  if_ne	jmp	#LR__2374
1d9f4     00 26 06 F6 | 	mov	local01, #0
1d9f8     A7 12 02 FB | 	rdlong	arg01, fp
1d9fc     09 13 52 F6 | 	abs	arg01, arg01 wc
1da00     1F 2E C6 C9 |  if_b	decod	local05, #31
1da04     00 2E 06 36 |  if_ae	mov	local05, #0
1da08     80 AF B0 FD | 	call	#__system___float_fromuns
1da0c     17 FB 61 F5 | 	xor	result1, local05
1da10     FD 12 02 F6 | 	mov	arg01, result1
1da14     0C 4E 05 F1 | 	add	fp, #12
1da18     A7 14 02 FB | 	rdlong	arg02, fp
1da1c     0C 4E 85 F1 | 	sub	fp, #12
1da20     01 16 66 F6 | 	neg	arg03, #1
1da24     9C B7 B0 FD | 	call	#__system___float_cmp
1da28     00 FA 55 F2 | 	cmps	result1, #0 wc
1da2c     00 26 26 36 |  if_ae	not	local01, #0
1da30     A7 26 62 FC | 	wrlong	local01, fp
1da34     94 02 90 FD | 	jmp	#LR__2383
1da38                 | LR__2374
1da38                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1da38     08 4E 05 F1 | 	add	fp, #8
1da3c     A7 26 02 FB | 	rdlong	local01, fp
1da40     08 4E 85 F1 | 	sub	fp, #8
1da44     1C 26 0E F2 | 	cmp	local01, #28 wz
1da48     14 4E 05 A1 |  if_e	add	fp, #20
1da4c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1da50     14 4E 85 A1 |  if_e	sub	fp, #20
1da54     16 2B 02 A6 |  if_e	mov	local03, local04
1da58     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1da5c     24 00 90 5D |  if_ne	jmp	#LR__2375
1da60     00 26 06 F6 | 	mov	local01, #0
1da64     A7 28 02 FB | 	rdlong	local02, fp
1da68     0C 4E 05 F1 | 	add	fp, #12
1da6c     A7 2A 02 FB | 	rdlong	local03, fp
1da70     0C 4E 85 F1 | 	sub	fp, #12
1da74     15 29 52 F2 | 	cmps	local02, local03 wc
1da78     01 26 66 36 |  if_ae	neg	local01, #1
1da7c     A7 26 62 FC | 	wrlong	local01, fp
1da80     48 02 90 FD | 	jmp	#LR__2383
1da84                 | LR__2375
1da84                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1da84     08 4E 05 F1 | 	add	fp, #8
1da88     A7 26 02 FB | 	rdlong	local01, fp
1da8c     08 4E 85 F1 | 	sub	fp, #8
1da90     1C 26 0E F2 | 	cmp	local01, #28 wz
1da94     14 4E 05 A1 |  if_e	add	fp, #20
1da98     A7 2C 02 AB |  if_e	rdlong	local04, fp
1da9c     14 4E 85 A1 |  if_e	sub	fp, #20
1daa0     16 2B 02 A6 |  if_e	mov	local03, local04
1daa4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1daa8     24 00 90 5D |  if_ne	jmp	#LR__2376
1daac     00 26 06 F6 | 	mov	local01, #0
1dab0     A7 28 02 FB | 	rdlong	local02, fp
1dab4     0C 4E 05 F1 | 	add	fp, #12
1dab8     A7 2A 02 FB | 	rdlong	local03, fp
1dabc     0C 4E 85 F1 | 	sub	fp, #12
1dac0     15 29 52 F2 | 	cmps	local02, local03 wc
1dac4     01 26 66 36 |  if_ae	neg	local01, #1
1dac8     A7 26 62 FC | 	wrlong	local01, fp
1dacc     FC 01 90 FD | 	jmp	#LR__2383
1dad0                 | LR__2376
1dad0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1dad0     08 4E 05 F1 | 	add	fp, #8
1dad4     A7 26 02 FB | 	rdlong	local01, fp
1dad8     08 4E 85 F1 | 	sub	fp, #8
1dadc     1D 26 0E F2 | 	cmp	local01, #29 wz
1dae0     14 4E 05 A1 |  if_e	add	fp, #20
1dae4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dae8     14 4E 85 A1 |  if_e	sub	fp, #20
1daec     16 2B 02 A6 |  if_e	mov	local03, local04
1daf0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1daf4     34 00 90 5D |  if_ne	jmp	#LR__2377
1daf8     00 26 06 F6 | 	mov	local01, #0
1dafc     A7 12 02 FB | 	rdlong	arg01, fp
1db00     88 AE B0 FD | 	call	#__system___float_fromuns
1db04     FD 12 02 F6 | 	mov	arg01, result1
1db08     0C 4E 05 F1 | 	add	fp, #12
1db0c     A7 14 02 FB | 	rdlong	arg02, fp
1db10     0C 4E 85 F1 | 	sub	fp, #12
1db14     01 16 66 F6 | 	neg	arg03, #1
1db18     A8 B6 B0 FD | 	call	#__system___float_cmp
1db1c     00 FA 55 F2 | 	cmps	result1, #0 wc
1db20     00 26 26 36 |  if_ae	not	local01, #0
1db24     A7 26 62 FC | 	wrlong	local01, fp
1db28     A0 01 90 FD | 	jmp	#LR__2383
1db2c                 | LR__2377
1db2c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1db2c     08 4E 05 F1 | 	add	fp, #8
1db30     A7 26 02 FB | 	rdlong	local01, fp
1db34     08 4E 85 F1 | 	sub	fp, #8
1db38     1D 26 0E F2 | 	cmp	local01, #29 wz
1db3c     14 4E 05 A1 |  if_e	add	fp, #20
1db40     A7 2C 02 AB |  if_e	rdlong	local04, fp
1db44     14 4E 85 A1 |  if_e	sub	fp, #20
1db48     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1db4c     24 00 90 5D |  if_ne	jmp	#LR__2378
1db50     00 26 06 F6 | 	mov	local01, #0
1db54     A7 28 02 FB | 	rdlong	local02, fp
1db58     0C 4E 05 F1 | 	add	fp, #12
1db5c     A7 2A 02 FB | 	rdlong	local03, fp
1db60     0C 4E 85 F1 | 	sub	fp, #12
1db64     15 29 52 F2 | 	cmps	local02, local03 wc
1db68     01 26 66 36 |  if_ae	neg	local01, #1
1db6c     A7 26 62 FC | 	wrlong	local01, fp
1db70     58 01 90 FD | 	jmp	#LR__2383
1db74                 | LR__2378
1db74                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1db74     08 4E 05 F1 | 	add	fp, #8
1db78     A7 26 02 FB | 	rdlong	local01, fp
1db7c     08 4E 85 F1 | 	sub	fp, #8
1db80     1D 26 0E F2 | 	cmp	local01, #29 wz
1db84     14 4E 05 A1 |  if_e	add	fp, #20
1db88     A7 2A 02 AB |  if_e	rdlong	local03, fp
1db8c     14 4E 85 A1 |  if_e	sub	fp, #20
1db90     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1db94     24 00 90 5D |  if_ne	jmp	#LR__2379
1db98     00 26 06 F6 | 	mov	local01, #0
1db9c     A7 28 02 FB | 	rdlong	local02, fp
1dba0     0C 4E 05 F1 | 	add	fp, #12
1dba4     A7 2A 02 FB | 	rdlong	local03, fp
1dba8     0C 4E 85 F1 | 	sub	fp, #12
1dbac     15 29 12 F2 | 	cmp	local02, local03 wc
1dbb0     01 26 66 36 |  if_ae	neg	local01, #1
1dbb4     A7 26 62 FC | 	wrlong	local01, fp
1dbb8     10 01 90 FD | 	jmp	#LR__2383
1dbbc                 | LR__2379
1dbbc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1dbbc     08 4E 05 F1 | 	add	fp, #8
1dbc0     A7 26 02 FB | 	rdlong	local01, fp
1dbc4     08 4E 85 F1 | 	sub	fp, #8
1dbc8     2B 26 0E F2 | 	cmp	local01, #43 wz
1dbcc     14 4E 05 A1 |  if_e	add	fp, #20
1dbd0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dbd4     14 4E 85 A1 |  if_e	sub	fp, #20
1dbd8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1dbdc     30 00 90 5D |  if_ne	jmp	#LR__2380
1dbe0     00 26 06 F6 | 	mov	local01, #0
1dbe4     A7 12 02 FB | 	rdlong	arg01, fp
1dbe8     6C F8 BE FD | 	call	#_convertstring
1dbec     FD 12 02 F6 | 	mov	arg01, result1
1dbf0     0C 4E 05 F1 | 	add	fp, #12
1dbf4     A7 14 02 FB | 	rdlong	arg02, fp
1dbf8     0C 4E 85 F1 | 	sub	fp, #12
1dbfc     40 83 B0 FD | 	call	#__system___string_cmp
1dc00     00 FA 55 F2 | 	cmps	result1, #0 wc
1dc04     00 26 26 36 |  if_ae	not	local01, #0
1dc08     A7 26 62 FC | 	wrlong	local01, fp
1dc0c     BC 00 90 FD | 	jmp	#LR__2383
1dc10                 | LR__2380
1dc10                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1dc10     08 4E 05 F1 | 	add	fp, #8
1dc14     A7 26 02 FB | 	rdlong	local01, fp
1dc18     08 4E 85 F1 | 	sub	fp, #8
1dc1c     1F 26 0E F2 | 	cmp	local01, #31 wz
1dc20     14 4E 05 A1 |  if_e	add	fp, #20
1dc24     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dc28     14 4E 85 A1 |  if_e	sub	fp, #20
1dc2c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1dc30     34 00 90 5D |  if_ne	jmp	#LR__2381
1dc34     00 26 06 F6 | 	mov	local01, #0
1dc38     A7 28 02 FB | 	rdlong	local02, fp
1dc3c     0C 4E 05 F1 | 	add	fp, #12
1dc40     A7 12 02 FB | 	rdlong	arg01, fp
1dc44     0C 4E 85 F1 | 	sub	fp, #12
1dc48     0C F8 BE FD | 	call	#_convertstring
1dc4c     FD 14 02 F6 | 	mov	arg02, result1
1dc50     14 13 02 F6 | 	mov	arg01, local02
1dc54     E8 82 B0 FD | 	call	#__system___string_cmp
1dc58     00 FA 55 F2 | 	cmps	result1, #0 wc
1dc5c     00 26 26 36 |  if_ae	not	local01, #0
1dc60     A7 26 62 FC | 	wrlong	local01, fp
1dc64     64 00 90 FD | 	jmp	#LR__2383
1dc68                 | LR__2381
1dc68                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1dc68     08 4E 05 F1 | 	add	fp, #8
1dc6c     A7 26 02 FB | 	rdlong	local01, fp
1dc70     08 4E 85 F1 | 	sub	fp, #8
1dc74     2B 26 0E F2 | 	cmp	local01, #43 wz
1dc78     14 4E 05 A1 |  if_e	add	fp, #20
1dc7c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dc80     14 4E 85 A1 |  if_e	sub	fp, #20
1dc84     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1dc88     3C 00 90 5D |  if_ne	jmp	#LR__2382
1dc8c     00 26 06 F6 | 	mov	local01, #0
1dc90     A7 12 02 FB | 	rdlong	arg01, fp
1dc94     C0 F7 BE FD | 	call	#_convertstring
1dc98     FD 28 02 F6 | 	mov	local02, result1
1dc9c     0C 4E 05 F1 | 	add	fp, #12
1dca0     A7 12 02 FB | 	rdlong	arg01, fp
1dca4     0C 4E 85 F1 | 	sub	fp, #12
1dca8     AC F7 BE FD | 	call	#_convertstring
1dcac     FD 14 02 F6 | 	mov	arg02, result1
1dcb0     14 13 02 F6 | 	mov	arg01, local02
1dcb4     88 82 B0 FD | 	call	#__system___string_cmp
1dcb8     00 FA 55 F2 | 	cmps	result1, #0 wc
1dcbc     00 26 26 36 |  if_ae	not	local01, #0
1dcc0     A7 26 62 FC | 	wrlong	local01, fp
1dcc4     04 00 90 FD | 	jmp	#LR__2383
1dcc8                 | LR__2382
1dcc8     A7 00 68 FC | 	wrlong	#0, fp
1dccc                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1dccc                 | LR__2383
1dccc     08 4E 05 F1 | 	add	fp, #8
1dcd0     A7 38 68 FC | 	wrlong	#28, fp
1dcd4     08 4E 85 F1 | 	sub	fp, #8
1dcd8                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1dcd8     A7 26 0A FB | 	rdlong	local01, fp wz
1dcdc     A7 02 68 5C |  if_ne	wrlong	#1, fp
1dce0     A7 12 02 F6 | 	mov	arg01, fp
1dce4     90 F6 BE FD | 	call	#_push
1dce8     A7 F0 03 F6 | 	mov	ptra, fp
1dcec     B2 00 A0 FD | 	call	#popregs_
1dcf0                 | _do_ge_ret
1dcf0     2D 00 64 FD | 	ret
1dcf4                 | 
1dcf4                 | ' 
1dcf4                 | ' '--------------------------------- greater than (>)
1dcf4                 | ' 
1dcf4                 | ' sub do_gt
1dcf4                 | _do_gt
1dcf4     05 4A 05 F6 | 	mov	COUNT_, #5
1dcf8     A8 00 A0 FD | 	call	#pushregs_
1dcfc     18 F0 07 F1 | 	add	ptra, #24
1dd00     DC F5 BE FD | 	call	#_pop
1dd04     FD 26 02 F6 | 	mov	local01, result1
1dd08     FE 28 02 F6 | 	mov	local02, result2
1dd0c     FF 2A 02 F6 | 	mov	local03, result3
1dd10     0C 4E 05 F1 | 	add	fp, #12
1dd14     A7 26 62 FC | 	wrlong	local01, fp
1dd18     04 4E 05 F1 | 	add	fp, #4
1dd1c     A7 28 62 FC | 	wrlong	local02, fp
1dd20     04 4E 05 F1 | 	add	fp, #4
1dd24     A7 2A 62 FC | 	wrlong	local03, fp
1dd28     14 4E 85 F1 | 	sub	fp, #20
1dd2c     B0 F5 BE FD | 	call	#_pop
1dd30     FF 2A 02 F6 | 	mov	local03, result3
1dd34     A7 FA 61 FC | 	wrlong	result1, fp
1dd38     04 4E 05 F1 | 	add	fp, #4
1dd3c     A7 FC 61 FC | 	wrlong	result2, fp
1dd40     04 4E 05 F1 | 	add	fp, #4
1dd44     A7 2A 62 FC | 	wrlong	local03, fp
1dd48                 | ' 
1dd48                 | ' t2=pop()
1dd48                 | ' t1=pop()
1dd48                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1dd48     08 4E 85 F1 | 	sub	fp, #8
1dd4c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1dd50     14 4E 05 A1 |  if_e	add	fp, #20
1dd54     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dd58     14 4E 85 A1 |  if_e	sub	fp, #20
1dd5c     16 2B 02 A6 |  if_e	mov	local03, local04
1dd60     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1dd64     28 00 90 5D |  if_ne	jmp	#LR__2390
1dd68     00 26 06 F6 | 	mov	local01, #0
1dd6c     A7 12 02 FB | 	rdlong	arg01, fp
1dd70     0C 4E 05 F1 | 	add	fp, #12
1dd74     A7 14 02 FB | 	rdlong	arg02, fp
1dd78     0C 4E 85 F1 | 	sub	fp, #12
1dd7c     C0 81 B0 FD | 	call	#__system___string_cmp
1dd80     01 FA 55 F2 | 	cmps	result1, #1 wc
1dd84     00 26 26 36 |  if_ae	not	local01, #0
1dd88     A7 26 62 FC | 	wrlong	local01, fp
1dd8c     20 04 90 FD | 	jmp	#LR__2403
1dd90                 | LR__2390
1dd90                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1dd90     08 4E 05 F1 | 	add	fp, #8
1dd94     A7 26 02 FB | 	rdlong	local01, fp
1dd98     08 4E 85 F1 | 	sub	fp, #8
1dd9c     1E 26 0E F2 | 	cmp	local01, #30 wz
1dda0     14 4E 05 A1 |  if_e	add	fp, #20
1dda4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dda8     14 4E 85 A1 |  if_e	sub	fp, #20
1ddac     16 2B 02 A6 |  if_e	mov	local03, local04
1ddb0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ddb4     2C 00 90 5D |  if_ne	jmp	#LR__2391
1ddb8     00 26 06 F6 | 	mov	local01, #0
1ddbc     A7 12 02 FB | 	rdlong	arg01, fp
1ddc0     0C 4E 05 F1 | 	add	fp, #12
1ddc4     A7 14 02 FB | 	rdlong	arg02, fp
1ddc8     0C 4E 85 F1 | 	sub	fp, #12
1ddcc     01 16 66 F6 | 	neg	arg03, #1
1ddd0     F0 B3 B0 FD | 	call	#__system___float_cmp
1ddd4     01 FA 55 F2 | 	cmps	result1, #1 wc
1ddd8     00 26 26 36 |  if_ae	not	local01, #0
1dddc     A7 26 62 FC | 	wrlong	local01, fp
1dde0     CC 03 90 FD | 	jmp	#LR__2403
1dde4                 | LR__2391
1dde4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1dde4     08 4E 05 F1 | 	add	fp, #8
1dde8     A7 26 02 FB | 	rdlong	local01, fp
1ddec     08 4E 85 F1 | 	sub	fp, #8
1ddf0     1E 26 0E F2 | 	cmp	local01, #30 wz
1ddf4     14 4E 05 A1 |  if_e	add	fp, #20
1ddf8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ddfc     14 4E 85 A1 |  if_e	sub	fp, #20
1de00     16 2B 02 A6 |  if_e	mov	local03, local04
1de04     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1de08     48 00 90 5D |  if_ne	jmp	#LR__2392
1de0c     00 26 06 F6 | 	mov	local01, #0
1de10     A7 28 02 FB | 	rdlong	local02, fp
1de14     0C 4E 05 F1 | 	add	fp, #12
1de18     A7 12 02 FB | 	rdlong	arg01, fp
1de1c     0C 4E 85 F1 | 	sub	fp, #12
1de20     09 13 52 F6 | 	abs	arg01, arg01 wc
1de24     1F 2E C6 C9 |  if_b	decod	local05, #31
1de28     00 2E 06 36 |  if_ae	mov	local05, #0
1de2c     5C AB B0 FD | 	call	#__system___float_fromuns
1de30     17 FB 61 F5 | 	xor	result1, local05
1de34     FD 14 02 F6 | 	mov	arg02, result1
1de38     14 13 02 F6 | 	mov	arg01, local02
1de3c     01 16 66 F6 | 	neg	arg03, #1
1de40     80 B3 B0 FD | 	call	#__system___float_cmp
1de44     01 FA 55 F2 | 	cmps	result1, #1 wc
1de48     00 26 26 36 |  if_ae	not	local01, #0
1de4c     A7 26 62 FC | 	wrlong	local01, fp
1de50     5C 03 90 FD | 	jmp	#LR__2403
1de54                 | LR__2392
1de54                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1de54     08 4E 05 F1 | 	add	fp, #8
1de58     A7 26 02 FB | 	rdlong	local01, fp
1de5c     08 4E 85 F1 | 	sub	fp, #8
1de60     1E 26 0E F2 | 	cmp	local01, #30 wz
1de64     14 4E 05 A1 |  if_e	add	fp, #20
1de68     A7 2C 02 AB |  if_e	rdlong	local04, fp
1de6c     14 4E 85 A1 |  if_e	sub	fp, #20
1de70     16 2B 02 A6 |  if_e	mov	local03, local04
1de74     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1de78     38 00 90 5D |  if_ne	jmp	#LR__2393
1de7c     00 26 06 F6 | 	mov	local01, #0
1de80     A7 28 02 FB | 	rdlong	local02, fp
1de84     0C 4E 05 F1 | 	add	fp, #12
1de88     A7 12 02 FB | 	rdlong	arg01, fp
1de8c     0C 4E 85 F1 | 	sub	fp, #12
1de90     F8 AA B0 FD | 	call	#__system___float_fromuns
1de94     FD 14 02 F6 | 	mov	arg02, result1
1de98     14 13 02 F6 | 	mov	arg01, local02
1de9c     01 16 66 F6 | 	neg	arg03, #1
1dea0     20 B3 B0 FD | 	call	#__system___float_cmp
1dea4     01 FA 55 F2 | 	cmps	result1, #1 wc
1dea8     00 26 26 36 |  if_ae	not	local01, #0
1deac     A7 26 62 FC | 	wrlong	local01, fp
1deb0     FC 02 90 FD | 	jmp	#LR__2403
1deb4                 | LR__2393
1deb4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1deb4     08 4E 05 F1 | 	add	fp, #8
1deb8     A7 26 02 FB | 	rdlong	local01, fp
1debc     08 4E 85 F1 | 	sub	fp, #8
1dec0     1C 26 0E F2 | 	cmp	local01, #28 wz
1dec4     14 4E 05 A1 |  if_e	add	fp, #20
1dec8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1decc     14 4E 85 A1 |  if_e	sub	fp, #20
1ded0     16 2B 02 A6 |  if_e	mov	local03, local04
1ded4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ded8     44 00 90 5D |  if_ne	jmp	#LR__2394
1dedc     00 26 06 F6 | 	mov	local01, #0
1dee0     A7 12 02 FB | 	rdlong	arg01, fp
1dee4     09 13 52 F6 | 	abs	arg01, arg01 wc
1dee8     1F 2E C6 C9 |  if_b	decod	local05, #31
1deec     00 2E 06 36 |  if_ae	mov	local05, #0
1def0     98 AA B0 FD | 	call	#__system___float_fromuns
1def4     17 FB 61 F5 | 	xor	result1, local05
1def8     FD 12 02 F6 | 	mov	arg01, result1
1defc     0C 4E 05 F1 | 	add	fp, #12
1df00     A7 14 02 FB | 	rdlong	arg02, fp
1df04     0C 4E 85 F1 | 	sub	fp, #12
1df08     01 16 66 F6 | 	neg	arg03, #1
1df0c     B4 B2 B0 FD | 	call	#__system___float_cmp
1df10     01 FA 55 F2 | 	cmps	result1, #1 wc
1df14     00 26 26 36 |  if_ae	not	local01, #0
1df18     A7 26 62 FC | 	wrlong	local01, fp
1df1c     90 02 90 FD | 	jmp	#LR__2403
1df20                 | LR__2394
1df20                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1df20     08 4E 05 F1 | 	add	fp, #8
1df24     A7 26 02 FB | 	rdlong	local01, fp
1df28     08 4E 85 F1 | 	sub	fp, #8
1df2c     1C 26 0E F2 | 	cmp	local01, #28 wz
1df30     14 4E 05 A1 |  if_e	add	fp, #20
1df34     A7 2C 02 AB |  if_e	rdlong	local04, fp
1df38     14 4E 85 A1 |  if_e	sub	fp, #20
1df3c     16 2B 02 A6 |  if_e	mov	local03, local04
1df40     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1df44     24 00 90 5D |  if_ne	jmp	#LR__2395
1df48     00 26 06 F6 | 	mov	local01, #0
1df4c     A7 28 02 FB | 	rdlong	local02, fp
1df50     0C 4E 05 F1 | 	add	fp, #12
1df54     A7 2A 02 FB | 	rdlong	local03, fp
1df58     0C 4E 85 F1 | 	sub	fp, #12
1df5c     15 29 5A F2 | 	cmps	local02, local03 wcz
1df60     01 26 66 16 |  if_a	neg	local01, #1
1df64     A7 26 62 FC | 	wrlong	local01, fp
1df68     44 02 90 FD | 	jmp	#LR__2403
1df6c                 | LR__2395
1df6c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1df6c     08 4E 05 F1 | 	add	fp, #8
1df70     A7 26 02 FB | 	rdlong	local01, fp
1df74     08 4E 85 F1 | 	sub	fp, #8
1df78     1C 26 0E F2 | 	cmp	local01, #28 wz
1df7c     14 4E 05 A1 |  if_e	add	fp, #20
1df80     A7 2C 02 AB |  if_e	rdlong	local04, fp
1df84     14 4E 85 A1 |  if_e	sub	fp, #20
1df88     16 2B 02 A6 |  if_e	mov	local03, local04
1df8c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1df90     24 00 90 5D |  if_ne	jmp	#LR__2396
1df94     00 26 06 F6 | 	mov	local01, #0
1df98     A7 28 02 FB | 	rdlong	local02, fp
1df9c     0C 4E 05 F1 | 	add	fp, #12
1dfa0     A7 2A 02 FB | 	rdlong	local03, fp
1dfa4     0C 4E 85 F1 | 	sub	fp, #12
1dfa8     15 29 5A F2 | 	cmps	local02, local03 wcz
1dfac     01 26 66 16 |  if_a	neg	local01, #1
1dfb0     A7 26 62 FC | 	wrlong	local01, fp
1dfb4     F8 01 90 FD | 	jmp	#LR__2403
1dfb8                 | LR__2396
1dfb8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1dfb8     08 4E 05 F1 | 	add	fp, #8
1dfbc     A7 26 02 FB | 	rdlong	local01, fp
1dfc0     08 4E 85 F1 | 	sub	fp, #8
1dfc4     1D 26 0E F2 | 	cmp	local01, #29 wz
1dfc8     14 4E 05 A1 |  if_e	add	fp, #20
1dfcc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dfd0     14 4E 85 A1 |  if_e	sub	fp, #20
1dfd4     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1dfd8     34 00 90 5D |  if_ne	jmp	#LR__2397
1dfdc     00 26 06 F6 | 	mov	local01, #0
1dfe0     A7 12 02 FB | 	rdlong	arg01, fp
1dfe4     A4 A9 B0 FD | 	call	#__system___float_fromuns
1dfe8     FD 12 02 F6 | 	mov	arg01, result1
1dfec     0C 4E 05 F1 | 	add	fp, #12
1dff0     A7 14 02 FB | 	rdlong	arg02, fp
1dff4     0C 4E 85 F1 | 	sub	fp, #12
1dff8     01 16 66 F6 | 	neg	arg03, #1
1dffc     C4 B1 B0 FD | 	call	#__system___float_cmp
1e000     01 FA 55 F2 | 	cmps	result1, #1 wc
1e004     00 26 26 36 |  if_ae	not	local01, #0
1e008     A7 26 62 FC | 	wrlong	local01, fp
1e00c     A0 01 90 FD | 	jmp	#LR__2403
1e010                 | LR__2397
1e010                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1e010     08 4E 05 F1 | 	add	fp, #8
1e014     A7 26 02 FB | 	rdlong	local01, fp
1e018     08 4E 85 F1 | 	sub	fp, #8
1e01c     1D 26 0E F2 | 	cmp	local01, #29 wz
1e020     14 4E 05 A1 |  if_e	add	fp, #20
1e024     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e028     14 4E 85 A1 |  if_e	sub	fp, #20
1e02c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e030     24 00 90 5D |  if_ne	jmp	#LR__2398
1e034     00 26 06 F6 | 	mov	local01, #0
1e038     A7 28 02 FB | 	rdlong	local02, fp
1e03c     0C 4E 05 F1 | 	add	fp, #12
1e040     A7 2A 02 FB | 	rdlong	local03, fp
1e044     0C 4E 85 F1 | 	sub	fp, #12
1e048     15 29 5A F2 | 	cmps	local02, local03 wcz
1e04c     01 26 66 16 |  if_a	neg	local01, #1
1e050     A7 26 62 FC | 	wrlong	local01, fp
1e054     58 01 90 FD | 	jmp	#LR__2403
1e058                 | LR__2398
1e058                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1e058     08 4E 05 F1 | 	add	fp, #8
1e05c     A7 26 02 FB | 	rdlong	local01, fp
1e060     08 4E 85 F1 | 	sub	fp, #8
1e064     1D 26 0E F2 | 	cmp	local01, #29 wz
1e068     14 4E 05 A1 |  if_e	add	fp, #20
1e06c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e070     14 4E 85 A1 |  if_e	sub	fp, #20
1e074     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e078     24 00 90 5D |  if_ne	jmp	#LR__2399
1e07c     00 26 06 F6 | 	mov	local01, #0
1e080     A7 28 02 FB | 	rdlong	local02, fp
1e084     0C 4E 05 F1 | 	add	fp, #12
1e088     A7 2A 02 FB | 	rdlong	local03, fp
1e08c     0C 4E 85 F1 | 	sub	fp, #12
1e090     15 29 1A F2 | 	cmp	local02, local03 wcz
1e094     01 26 66 16 |  if_a	neg	local01, #1
1e098     A7 26 62 FC | 	wrlong	local01, fp
1e09c     10 01 90 FD | 	jmp	#LR__2403
1e0a0                 | LR__2399
1e0a0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1e0a0     08 4E 05 F1 | 	add	fp, #8
1e0a4     A7 26 02 FB | 	rdlong	local01, fp
1e0a8     08 4E 85 F1 | 	sub	fp, #8
1e0ac     2B 26 0E F2 | 	cmp	local01, #43 wz
1e0b0     14 4E 05 A1 |  if_e	add	fp, #20
1e0b4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e0b8     14 4E 85 A1 |  if_e	sub	fp, #20
1e0bc     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e0c0     30 00 90 5D |  if_ne	jmp	#LR__2400
1e0c4     00 26 06 F6 | 	mov	local01, #0
1e0c8     A7 12 02 FB | 	rdlong	arg01, fp
1e0cc     88 F3 BE FD | 	call	#_convertstring
1e0d0     FD 12 02 F6 | 	mov	arg01, result1
1e0d4     0C 4E 05 F1 | 	add	fp, #12
1e0d8     A7 14 02 FB | 	rdlong	arg02, fp
1e0dc     0C 4E 85 F1 | 	sub	fp, #12
1e0e0     5C 7E B0 FD | 	call	#__system___string_cmp
1e0e4     01 FA 55 F2 | 	cmps	result1, #1 wc
1e0e8     00 26 26 36 |  if_ae	not	local01, #0
1e0ec     A7 26 62 FC | 	wrlong	local01, fp
1e0f0     BC 00 90 FD | 	jmp	#LR__2403
1e0f4                 | LR__2400
1e0f4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1e0f4     08 4E 05 F1 | 	add	fp, #8
1e0f8     A7 26 02 FB | 	rdlong	local01, fp
1e0fc     08 4E 85 F1 | 	sub	fp, #8
1e100     1F 26 0E F2 | 	cmp	local01, #31 wz
1e104     14 4E 05 A1 |  if_e	add	fp, #20
1e108     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e10c     14 4E 85 A1 |  if_e	sub	fp, #20
1e110     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e114     34 00 90 5D |  if_ne	jmp	#LR__2401
1e118     00 26 06 F6 | 	mov	local01, #0
1e11c     A7 28 02 FB | 	rdlong	local02, fp
1e120     0C 4E 05 F1 | 	add	fp, #12
1e124     A7 12 02 FB | 	rdlong	arg01, fp
1e128     0C 4E 85 F1 | 	sub	fp, #12
1e12c     28 F3 BE FD | 	call	#_convertstring
1e130     FD 14 02 F6 | 	mov	arg02, result1
1e134     14 13 02 F6 | 	mov	arg01, local02
1e138     04 7E B0 FD | 	call	#__system___string_cmp
1e13c     01 FA 55 F2 | 	cmps	result1, #1 wc
1e140     00 26 26 36 |  if_ae	not	local01, #0
1e144     A7 26 62 FC | 	wrlong	local01, fp
1e148     64 00 90 FD | 	jmp	#LR__2403
1e14c                 | LR__2401
1e14c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1e14c     08 4E 05 F1 | 	add	fp, #8
1e150     A7 26 02 FB | 	rdlong	local01, fp
1e154     08 4E 85 F1 | 	sub	fp, #8
1e158     2B 26 0E F2 | 	cmp	local01, #43 wz
1e15c     14 4E 05 A1 |  if_e	add	fp, #20
1e160     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e164     14 4E 85 A1 |  if_e	sub	fp, #20
1e168     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e16c     3C 00 90 5D |  if_ne	jmp	#LR__2402
1e170     00 26 06 F6 | 	mov	local01, #0
1e174     A7 12 02 FB | 	rdlong	arg01, fp
1e178     DC F2 BE FD | 	call	#_convertstring
1e17c     FD 28 02 F6 | 	mov	local02, result1
1e180     0C 4E 05 F1 | 	add	fp, #12
1e184     A7 12 02 FB | 	rdlong	arg01, fp
1e188     0C 4E 85 F1 | 	sub	fp, #12
1e18c     C8 F2 BE FD | 	call	#_convertstring
1e190     FD 14 02 F6 | 	mov	arg02, result1
1e194     14 13 02 F6 | 	mov	arg01, local02
1e198     A4 7D B0 FD | 	call	#__system___string_cmp
1e19c     01 FA 55 F2 | 	cmps	result1, #1 wc
1e1a0     00 26 26 36 |  if_ae	not	local01, #0
1e1a4     A7 26 62 FC | 	wrlong	local01, fp
1e1a8     04 00 90 FD | 	jmp	#LR__2403
1e1ac                 | LR__2402
1e1ac     A7 00 68 FC | 	wrlong	#0, fp
1e1b0                 | LR__2403
1e1b0     08 4E 05 F1 | 	add	fp, #8
1e1b4     A7 38 68 FC | 	wrlong	#28, fp
1e1b8     08 4E 85 F1 | 	sub	fp, #8
1e1bc                 | ' t1.result.uresult=0
1e1bc                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e1bc     A7 26 0A FB | 	rdlong	local01, fp wz
1e1c0     A7 02 68 5C |  if_ne	wrlong	#1, fp
1e1c4     A7 12 02 F6 | 	mov	arg01, fp
1e1c8     AC F1 BE FD | 	call	#_push
1e1cc     A7 F0 03 F6 | 	mov	ptra, fp
1e1d0     B2 00 A0 FD | 	call	#popregs_
1e1d4                 | _do_gt_ret
1e1d4     2D 00 64 FD | 	ret
1e1d8                 | 
1e1d8                 | ' 
1e1d8                 | ' '--------------------------------- less or equal (<=)
1e1d8                 | ' 
1e1d8                 | ' sub do_le
1e1d8                 | _do_le
1e1d8     05 4A 05 F6 | 	mov	COUNT_, #5
1e1dc     A8 00 A0 FD | 	call	#pushregs_
1e1e0     18 F0 07 F1 | 	add	ptra, #24
1e1e4     F8 F0 BE FD | 	call	#_pop
1e1e8     FD 26 02 F6 | 	mov	local01, result1
1e1ec     FE 28 02 F6 | 	mov	local02, result2
1e1f0     FF 2A 02 F6 | 	mov	local03, result3
1e1f4     0C 4E 05 F1 | 	add	fp, #12
1e1f8     A7 26 62 FC | 	wrlong	local01, fp
1e1fc     04 4E 05 F1 | 	add	fp, #4
1e200     A7 28 62 FC | 	wrlong	local02, fp
1e204     04 4E 05 F1 | 	add	fp, #4
1e208     A7 2A 62 FC | 	wrlong	local03, fp
1e20c     14 4E 85 F1 | 	sub	fp, #20
1e210     CC F0 BE FD | 	call	#_pop
1e214     FF 2A 02 F6 | 	mov	local03, result3
1e218     A7 FA 61 FC | 	wrlong	result1, fp
1e21c     04 4E 05 F1 | 	add	fp, #4
1e220     A7 FC 61 FC | 	wrlong	result2, fp
1e224     04 4E 05 F1 | 	add	fp, #4
1e228     A7 2A 62 FC | 	wrlong	local03, fp
1e22c                 | ' 
1e22c                 | ' t2=pop()
1e22c                 | ' t1=pop()
1e22c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1e22c     08 4E 85 F1 | 	sub	fp, #8
1e230     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e234     14 4E 05 A1 |  if_e	add	fp, #20
1e238     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e23c     14 4E 85 A1 |  if_e	sub	fp, #20
1e240     16 2B 02 A6 |  if_e	mov	local03, local04
1e244     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e248     28 00 90 5D |  if_ne	jmp	#LR__2410
1e24c     00 26 06 F6 | 	mov	local01, #0
1e250     A7 12 02 FB | 	rdlong	arg01, fp
1e254     0C 4E 05 F1 | 	add	fp, #12
1e258     A7 14 02 FB | 	rdlong	arg02, fp
1e25c     0C 4E 85 F1 | 	sub	fp, #12
1e260     DC 7C B0 FD | 	call	#__system___string_cmp
1e264     01 FA 55 F2 | 	cmps	result1, #1 wc
1e268     00 26 26 C6 |  if_b	not	local01, #0
1e26c     A7 26 62 FC | 	wrlong	local01, fp
1e270     20 04 90 FD | 	jmp	#LR__2423
1e274                 | LR__2410
1e274                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1e274     08 4E 05 F1 | 	add	fp, #8
1e278     A7 26 02 FB | 	rdlong	local01, fp
1e27c     08 4E 85 F1 | 	sub	fp, #8
1e280     1E 26 0E F2 | 	cmp	local01, #30 wz
1e284     14 4E 05 A1 |  if_e	add	fp, #20
1e288     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e28c     14 4E 85 A1 |  if_e	sub	fp, #20
1e290     16 2B 02 A6 |  if_e	mov	local03, local04
1e294     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e298     2C 00 90 5D |  if_ne	jmp	#LR__2411
1e29c     00 26 06 F6 | 	mov	local01, #0
1e2a0     A7 12 02 FB | 	rdlong	arg01, fp
1e2a4     0C 4E 05 F1 | 	add	fp, #12
1e2a8     A7 14 02 FB | 	rdlong	arg02, fp
1e2ac     0C 4E 85 F1 | 	sub	fp, #12
1e2b0     01 16 06 F6 | 	mov	arg03, #1
1e2b4     0C AF B0 FD | 	call	#__system___float_cmp
1e2b8     01 FA 55 F2 | 	cmps	result1, #1 wc
1e2bc     00 26 26 C6 |  if_b	not	local01, #0
1e2c0     A7 26 62 FC | 	wrlong	local01, fp
1e2c4     CC 03 90 FD | 	jmp	#LR__2423
1e2c8                 | LR__2411
1e2c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1e2c8     08 4E 05 F1 | 	add	fp, #8
1e2cc     A7 26 02 FB | 	rdlong	local01, fp
1e2d0     08 4E 85 F1 | 	sub	fp, #8
1e2d4     1E 26 0E F2 | 	cmp	local01, #30 wz
1e2d8     14 4E 05 A1 |  if_e	add	fp, #20
1e2dc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e2e0     14 4E 85 A1 |  if_e	sub	fp, #20
1e2e4     16 2B 02 A6 |  if_e	mov	local03, local04
1e2e8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e2ec     48 00 90 5D |  if_ne	jmp	#LR__2412
1e2f0     00 26 06 F6 | 	mov	local01, #0
1e2f4     A7 28 02 FB | 	rdlong	local02, fp
1e2f8     0C 4E 05 F1 | 	add	fp, #12
1e2fc     A7 12 02 FB | 	rdlong	arg01, fp
1e300     0C 4E 85 F1 | 	sub	fp, #12
1e304     09 13 52 F6 | 	abs	arg01, arg01 wc
1e308     1F 2E C6 C9 |  if_b	decod	local05, #31
1e30c     00 2E 06 36 |  if_ae	mov	local05, #0
1e310     78 A6 B0 FD | 	call	#__system___float_fromuns
1e314     17 FB 61 F5 | 	xor	result1, local05
1e318     FD 14 02 F6 | 	mov	arg02, result1
1e31c     14 13 02 F6 | 	mov	arg01, local02
1e320     01 16 06 F6 | 	mov	arg03, #1
1e324     9C AE B0 FD | 	call	#__system___float_cmp
1e328     01 FA 55 F2 | 	cmps	result1, #1 wc
1e32c     00 26 26 C6 |  if_b	not	local01, #0
1e330     A7 26 62 FC | 	wrlong	local01, fp
1e334     5C 03 90 FD | 	jmp	#LR__2423
1e338                 | LR__2412
1e338                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1e338     08 4E 05 F1 | 	add	fp, #8
1e33c     A7 26 02 FB | 	rdlong	local01, fp
1e340     08 4E 85 F1 | 	sub	fp, #8
1e344     1E 26 0E F2 | 	cmp	local01, #30 wz
1e348     14 4E 05 A1 |  if_e	add	fp, #20
1e34c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e350     14 4E 85 A1 |  if_e	sub	fp, #20
1e354     16 2B 02 A6 |  if_e	mov	local03, local04
1e358     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e35c     38 00 90 5D |  if_ne	jmp	#LR__2413
1e360     00 26 06 F6 | 	mov	local01, #0
1e364     A7 28 02 FB | 	rdlong	local02, fp
1e368     0C 4E 05 F1 | 	add	fp, #12
1e36c     A7 12 02 FB | 	rdlong	arg01, fp
1e370     0C 4E 85 F1 | 	sub	fp, #12
1e374     14 A6 B0 FD | 	call	#__system___float_fromuns
1e378     FD 14 02 F6 | 	mov	arg02, result1
1e37c     14 13 02 F6 | 	mov	arg01, local02
1e380     01 16 06 F6 | 	mov	arg03, #1
1e384     3C AE B0 FD | 	call	#__system___float_cmp
1e388     01 FA 55 F2 | 	cmps	result1, #1 wc
1e38c     00 26 26 C6 |  if_b	not	local01, #0
1e390     A7 26 62 FC | 	wrlong	local01, fp
1e394     FC 02 90 FD | 	jmp	#LR__2423
1e398                 | LR__2413
1e398                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1e398     08 4E 05 F1 | 	add	fp, #8
1e39c     A7 26 02 FB | 	rdlong	local01, fp
1e3a0     08 4E 85 F1 | 	sub	fp, #8
1e3a4     1C 26 0E F2 | 	cmp	local01, #28 wz
1e3a8     14 4E 05 A1 |  if_e	add	fp, #20
1e3ac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e3b0     14 4E 85 A1 |  if_e	sub	fp, #20
1e3b4     16 2B 02 A6 |  if_e	mov	local03, local04
1e3b8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e3bc     44 00 90 5D |  if_ne	jmp	#LR__2414
1e3c0     00 26 06 F6 | 	mov	local01, #0
1e3c4     A7 12 02 FB | 	rdlong	arg01, fp
1e3c8     09 13 52 F6 | 	abs	arg01, arg01 wc
1e3cc     1F 2E C6 C9 |  if_b	decod	local05, #31
1e3d0     00 2E 06 36 |  if_ae	mov	local05, #0
1e3d4     B4 A5 B0 FD | 	call	#__system___float_fromuns
1e3d8     17 FB 61 F5 | 	xor	result1, local05
1e3dc     FD 12 02 F6 | 	mov	arg01, result1
1e3e0     0C 4E 05 F1 | 	add	fp, #12
1e3e4     A7 14 02 FB | 	rdlong	arg02, fp
1e3e8     0C 4E 85 F1 | 	sub	fp, #12
1e3ec     01 16 06 F6 | 	mov	arg03, #1
1e3f0     D0 AD B0 FD | 	call	#__system___float_cmp
1e3f4     01 FA 55 F2 | 	cmps	result1, #1 wc
1e3f8     00 26 26 C6 |  if_b	not	local01, #0
1e3fc     A7 26 62 FC | 	wrlong	local01, fp
1e400     90 02 90 FD | 	jmp	#LR__2423
1e404                 | LR__2414
1e404                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1e404     08 4E 05 F1 | 	add	fp, #8
1e408     A7 26 02 FB | 	rdlong	local01, fp
1e40c     08 4E 85 F1 | 	sub	fp, #8
1e410     1C 26 0E F2 | 	cmp	local01, #28 wz
1e414     14 4E 05 A1 |  if_e	add	fp, #20
1e418     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e41c     14 4E 85 A1 |  if_e	sub	fp, #20
1e420     16 2B 02 A6 |  if_e	mov	local03, local04
1e424     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e428     24 00 90 5D |  if_ne	jmp	#LR__2415
1e42c     00 26 06 F6 | 	mov	local01, #0
1e430     A7 28 02 FB | 	rdlong	local02, fp
1e434     0C 4E 05 F1 | 	add	fp, #12
1e438     A7 2A 02 FB | 	rdlong	local03, fp
1e43c     0C 4E 85 F1 | 	sub	fp, #12
1e440     15 29 5A F2 | 	cmps	local02, local03 wcz
1e444     01 26 66 E6 |  if_be	neg	local01, #1
1e448     A7 26 62 FC | 	wrlong	local01, fp
1e44c     44 02 90 FD | 	jmp	#LR__2423
1e450                 | LR__2415
1e450                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1e450     08 4E 05 F1 | 	add	fp, #8
1e454     A7 26 02 FB | 	rdlong	local01, fp
1e458     08 4E 85 F1 | 	sub	fp, #8
1e45c     1C 26 0E F2 | 	cmp	local01, #28 wz
1e460     14 4E 05 A1 |  if_e	add	fp, #20
1e464     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e468     14 4E 85 A1 |  if_e	sub	fp, #20
1e46c     16 2B 02 A6 |  if_e	mov	local03, local04
1e470     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e474     24 00 90 5D |  if_ne	jmp	#LR__2416
1e478     00 26 06 F6 | 	mov	local01, #0
1e47c     A7 28 02 FB | 	rdlong	local02, fp
1e480     0C 4E 05 F1 | 	add	fp, #12
1e484     A7 2A 02 FB | 	rdlong	local03, fp
1e488     0C 4E 85 F1 | 	sub	fp, #12
1e48c     15 29 5A F2 | 	cmps	local02, local03 wcz
1e490     01 26 66 E6 |  if_be	neg	local01, #1
1e494     A7 26 62 FC | 	wrlong	local01, fp
1e498     F8 01 90 FD | 	jmp	#LR__2423
1e49c                 | LR__2416
1e49c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1e49c     08 4E 05 F1 | 	add	fp, #8
1e4a0     A7 26 02 FB | 	rdlong	local01, fp
1e4a4     08 4E 85 F1 | 	sub	fp, #8
1e4a8     1D 26 0E F2 | 	cmp	local01, #29 wz
1e4ac     14 4E 05 A1 |  if_e	add	fp, #20
1e4b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e4b4     14 4E 85 A1 |  if_e	sub	fp, #20
1e4b8     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1e4bc     34 00 90 5D |  if_ne	jmp	#LR__2417
1e4c0     00 26 06 F6 | 	mov	local01, #0
1e4c4     A7 12 02 FB | 	rdlong	arg01, fp
1e4c8     C0 A4 B0 FD | 	call	#__system___float_fromuns
1e4cc     FD 12 02 F6 | 	mov	arg01, result1
1e4d0     0C 4E 05 F1 | 	add	fp, #12
1e4d4     A7 14 02 FB | 	rdlong	arg02, fp
1e4d8     0C 4E 85 F1 | 	sub	fp, #12
1e4dc     01 16 06 F6 | 	mov	arg03, #1
1e4e0     E0 AC B0 FD | 	call	#__system___float_cmp
1e4e4     01 FA 55 F2 | 	cmps	result1, #1 wc
1e4e8     00 26 26 C6 |  if_b	not	local01, #0
1e4ec     A7 26 62 FC | 	wrlong	local01, fp
1e4f0     A0 01 90 FD | 	jmp	#LR__2423
1e4f4                 | LR__2417
1e4f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1e4f4     08 4E 05 F1 | 	add	fp, #8
1e4f8     A7 26 02 FB | 	rdlong	local01, fp
1e4fc     08 4E 85 F1 | 	sub	fp, #8
1e500     1D 26 0E F2 | 	cmp	local01, #29 wz
1e504     14 4E 05 A1 |  if_e	add	fp, #20
1e508     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e50c     14 4E 85 A1 |  if_e	sub	fp, #20
1e510     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e514     24 00 90 5D |  if_ne	jmp	#LR__2418
1e518     00 26 06 F6 | 	mov	local01, #0
1e51c     A7 28 02 FB | 	rdlong	local02, fp
1e520     0C 4E 05 F1 | 	add	fp, #12
1e524     A7 2A 02 FB | 	rdlong	local03, fp
1e528     0C 4E 85 F1 | 	sub	fp, #12
1e52c     15 29 5A F2 | 	cmps	local02, local03 wcz
1e530     01 26 66 E6 |  if_be	neg	local01, #1
1e534     A7 26 62 FC | 	wrlong	local01, fp
1e538     58 01 90 FD | 	jmp	#LR__2423
1e53c                 | LR__2418
1e53c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1e53c     08 4E 05 F1 | 	add	fp, #8
1e540     A7 26 02 FB | 	rdlong	local01, fp
1e544     08 4E 85 F1 | 	sub	fp, #8
1e548     1D 26 0E F2 | 	cmp	local01, #29 wz
1e54c     14 4E 05 A1 |  if_e	add	fp, #20
1e550     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e554     14 4E 85 A1 |  if_e	sub	fp, #20
1e558     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e55c     24 00 90 5D |  if_ne	jmp	#LR__2419
1e560     00 26 06 F6 | 	mov	local01, #0
1e564     A7 28 02 FB | 	rdlong	local02, fp
1e568     0C 4E 05 F1 | 	add	fp, #12
1e56c     A7 2A 02 FB | 	rdlong	local03, fp
1e570     0C 4E 85 F1 | 	sub	fp, #12
1e574     15 29 1A F2 | 	cmp	local02, local03 wcz
1e578     01 26 66 E6 |  if_be	neg	local01, #1
1e57c     A7 26 62 FC | 	wrlong	local01, fp
1e580     10 01 90 FD | 	jmp	#LR__2423
1e584                 | LR__2419
1e584                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1e584     08 4E 05 F1 | 	add	fp, #8
1e588     A7 26 02 FB | 	rdlong	local01, fp
1e58c     08 4E 85 F1 | 	sub	fp, #8
1e590     2B 26 0E F2 | 	cmp	local01, #43 wz
1e594     14 4E 05 A1 |  if_e	add	fp, #20
1e598     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e59c     14 4E 85 A1 |  if_e	sub	fp, #20
1e5a0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e5a4     30 00 90 5D |  if_ne	jmp	#LR__2420
1e5a8     00 26 06 F6 | 	mov	local01, #0
1e5ac     A7 12 02 FB | 	rdlong	arg01, fp
1e5b0     A4 EE BE FD | 	call	#_convertstring
1e5b4     FD 12 02 F6 | 	mov	arg01, result1
1e5b8     0C 4E 05 F1 | 	add	fp, #12
1e5bc     A7 14 02 FB | 	rdlong	arg02, fp
1e5c0     0C 4E 85 F1 | 	sub	fp, #12
1e5c4     78 79 B0 FD | 	call	#__system___string_cmp
1e5c8     01 FA 55 F2 | 	cmps	result1, #1 wc
1e5cc     00 26 26 C6 |  if_b	not	local01, #0
1e5d0     A7 26 62 FC | 	wrlong	local01, fp
1e5d4     BC 00 90 FD | 	jmp	#LR__2423
1e5d8                 | LR__2420
1e5d8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1e5d8     08 4E 05 F1 | 	add	fp, #8
1e5dc     A7 26 02 FB | 	rdlong	local01, fp
1e5e0     08 4E 85 F1 | 	sub	fp, #8
1e5e4     1F 26 0E F2 | 	cmp	local01, #31 wz
1e5e8     14 4E 05 A1 |  if_e	add	fp, #20
1e5ec     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e5f0     14 4E 85 A1 |  if_e	sub	fp, #20
1e5f4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e5f8     34 00 90 5D |  if_ne	jmp	#LR__2421
1e5fc     00 26 06 F6 | 	mov	local01, #0
1e600     A7 28 02 FB | 	rdlong	local02, fp
1e604     0C 4E 05 F1 | 	add	fp, #12
1e608     A7 12 02 FB | 	rdlong	arg01, fp
1e60c     0C 4E 85 F1 | 	sub	fp, #12
1e610     44 EE BE FD | 	call	#_convertstring
1e614     FD 14 02 F6 | 	mov	arg02, result1
1e618     14 13 02 F6 | 	mov	arg01, local02
1e61c     20 79 B0 FD | 	call	#__system___string_cmp
1e620     01 FA 55 F2 | 	cmps	result1, #1 wc
1e624     00 26 26 C6 |  if_b	not	local01, #0
1e628     A7 26 62 FC | 	wrlong	local01, fp
1e62c     64 00 90 FD | 	jmp	#LR__2423
1e630                 | LR__2421
1e630                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1e630     08 4E 05 F1 | 	add	fp, #8
1e634     A7 26 02 FB | 	rdlong	local01, fp
1e638     08 4E 85 F1 | 	sub	fp, #8
1e63c     2B 26 0E F2 | 	cmp	local01, #43 wz
1e640     14 4E 05 A1 |  if_e	add	fp, #20
1e644     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e648     14 4E 85 A1 |  if_e	sub	fp, #20
1e64c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e650     3C 00 90 5D |  if_ne	jmp	#LR__2422
1e654     00 26 06 F6 | 	mov	local01, #0
1e658     A7 12 02 FB | 	rdlong	arg01, fp
1e65c     F8 ED BE FD | 	call	#_convertstring
1e660     FD 28 02 F6 | 	mov	local02, result1
1e664     0C 4E 05 F1 | 	add	fp, #12
1e668     A7 12 02 FB | 	rdlong	arg01, fp
1e66c     0C 4E 85 F1 | 	sub	fp, #12
1e670     E4 ED BE FD | 	call	#_convertstring
1e674     FD 14 02 F6 | 	mov	arg02, result1
1e678     14 13 02 F6 | 	mov	arg01, local02
1e67c     C0 78 B0 FD | 	call	#__system___string_cmp
1e680     01 FA 55 F2 | 	cmps	result1, #1 wc
1e684     00 26 26 C6 |  if_b	not	local01, #0
1e688     A7 26 62 FC | 	wrlong	local01, fp
1e68c     04 00 90 FD | 	jmp	#LR__2423
1e690                 | LR__2422
1e690     A7 00 68 FC | 	wrlong	#0, fp
1e694                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e694                 | LR__2423
1e694     08 4E 05 F1 | 	add	fp, #8
1e698     A7 38 68 FC | 	wrlong	#28, fp
1e69c     08 4E 85 F1 | 	sub	fp, #8
1e6a0     A7 12 02 F6 | 	mov	arg01, fp
1e6a4     D0 EC BE FD | 	call	#_push
1e6a8     A7 F0 03 F6 | 	mov	ptra, fp
1e6ac     B2 00 A0 FD | 	call	#popregs_
1e6b0                 | _do_le_ret
1e6b0     2D 00 64 FD | 	ret
1e6b4                 | 
1e6b4                 | ' 
1e6b4                 | ' '--------------------------------- less than (<)
1e6b4                 | ' 
1e6b4                 | ' sub do_lt
1e6b4                 | _do_lt
1e6b4     05 4A 05 F6 | 	mov	COUNT_, #5
1e6b8     A8 00 A0 FD | 	call	#pushregs_
1e6bc     18 F0 07 F1 | 	add	ptra, #24
1e6c0     1C EC BE FD | 	call	#_pop
1e6c4     FD 26 02 F6 | 	mov	local01, result1
1e6c8     FE 28 02 F6 | 	mov	local02, result2
1e6cc     FF 2A 02 F6 | 	mov	local03, result3
1e6d0     0C 4E 05 F1 | 	add	fp, #12
1e6d4     A7 26 62 FC | 	wrlong	local01, fp
1e6d8     04 4E 05 F1 | 	add	fp, #4
1e6dc     A7 28 62 FC | 	wrlong	local02, fp
1e6e0     04 4E 05 F1 | 	add	fp, #4
1e6e4     A7 2A 62 FC | 	wrlong	local03, fp
1e6e8     14 4E 85 F1 | 	sub	fp, #20
1e6ec     F0 EB BE FD | 	call	#_pop
1e6f0     FF 2A 02 F6 | 	mov	local03, result3
1e6f4     A7 FA 61 FC | 	wrlong	result1, fp
1e6f8     04 4E 05 F1 | 	add	fp, #4
1e6fc     A7 FC 61 FC | 	wrlong	result2, fp
1e700     04 4E 05 F1 | 	add	fp, #4
1e704     A7 2A 62 FC | 	wrlong	local03, fp
1e708                 | ' 
1e708                 | ' t2=pop()
1e708                 | ' t1=pop()
1e708                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1e708     08 4E 85 F1 | 	sub	fp, #8
1e70c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e710     14 4E 05 A1 |  if_e	add	fp, #20
1e714     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e718     14 4E 85 A1 |  if_e	sub	fp, #20
1e71c     16 2B 02 A6 |  if_e	mov	local03, local04
1e720     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e724     28 00 90 5D |  if_ne	jmp	#LR__2430
1e728     00 26 06 F6 | 	mov	local01, #0
1e72c     A7 12 02 FB | 	rdlong	arg01, fp
1e730     0C 4E 05 F1 | 	add	fp, #12
1e734     A7 14 02 FB | 	rdlong	arg02, fp
1e738     0C 4E 85 F1 | 	sub	fp, #12
1e73c     00 78 B0 FD | 	call	#__system___string_cmp
1e740     00 FA 55 F2 | 	cmps	result1, #0 wc
1e744     00 26 26 C6 |  if_b	not	local01, #0
1e748     A7 26 62 FC | 	wrlong	local01, fp
1e74c     10 04 90 FD | 	jmp	#LR__2443
1e750                 | LR__2430
1e750                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1e750     08 4E 05 F1 | 	add	fp, #8
1e754     A7 26 02 FB | 	rdlong	local01, fp
1e758     08 4E 85 F1 | 	sub	fp, #8
1e75c     1E 26 0E F2 | 	cmp	local01, #30 wz
1e760     14 4E 05 A1 |  if_e	add	fp, #20
1e764     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e768     14 4E 85 A1 |  if_e	sub	fp, #20
1e76c     16 2B 02 A6 |  if_e	mov	local03, local04
1e770     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e774     2C 00 90 5D |  if_ne	jmp	#LR__2431
1e778     00 26 06 F6 | 	mov	local01, #0
1e77c     A7 12 02 FB | 	rdlong	arg01, fp
1e780     0C 4E 05 F1 | 	add	fp, #12
1e784     A7 14 02 FB | 	rdlong	arg02, fp
1e788     0C 4E 85 F1 | 	sub	fp, #12
1e78c     01 16 06 F6 | 	mov	arg03, #1
1e790     30 AA B0 FD | 	call	#__system___float_cmp
1e794     00 FA 55 F2 | 	cmps	result1, #0 wc
1e798     00 26 26 C6 |  if_b	not	local01, #0
1e79c     A7 26 62 FC | 	wrlong	local01, fp
1e7a0     BC 03 90 FD | 	jmp	#LR__2443
1e7a4                 | LR__2431
1e7a4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1e7a4     08 4E 05 F1 | 	add	fp, #8
1e7a8     A7 26 02 FB | 	rdlong	local01, fp
1e7ac     08 4E 85 F1 | 	sub	fp, #8
1e7b0     1E 26 0E F2 | 	cmp	local01, #30 wz
1e7b4     14 4E 05 A1 |  if_e	add	fp, #20
1e7b8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e7bc     14 4E 85 A1 |  if_e	sub	fp, #20
1e7c0     16 2B 02 A6 |  if_e	mov	local03, local04
1e7c4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e7c8     48 00 90 5D |  if_ne	jmp	#LR__2432
1e7cc     00 26 06 F6 | 	mov	local01, #0
1e7d0     A7 28 02 FB | 	rdlong	local02, fp
1e7d4     0C 4E 05 F1 | 	add	fp, #12
1e7d8     A7 12 02 FB | 	rdlong	arg01, fp
1e7dc     0C 4E 85 F1 | 	sub	fp, #12
1e7e0     09 13 52 F6 | 	abs	arg01, arg01 wc
1e7e4     1F 2E C6 C9 |  if_b	decod	local05, #31
1e7e8     00 2E 06 36 |  if_ae	mov	local05, #0
1e7ec     9C A1 B0 FD | 	call	#__system___float_fromuns
1e7f0     17 FB 61 F5 | 	xor	result1, local05
1e7f4     FD 14 02 F6 | 	mov	arg02, result1
1e7f8     14 13 02 F6 | 	mov	arg01, local02
1e7fc     01 16 06 F6 | 	mov	arg03, #1
1e800     C0 A9 B0 FD | 	call	#__system___float_cmp
1e804     00 FA 55 F2 | 	cmps	result1, #0 wc
1e808     00 26 26 C6 |  if_b	not	local01, #0
1e80c     A7 26 62 FC | 	wrlong	local01, fp
1e810     4C 03 90 FD | 	jmp	#LR__2443
1e814                 | LR__2432
1e814                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1e814     08 4E 05 F1 | 	add	fp, #8
1e818     A7 26 02 FB | 	rdlong	local01, fp
1e81c     08 4E 85 F1 | 	sub	fp, #8
1e820     1E 26 0E F2 | 	cmp	local01, #30 wz
1e824     14 4E 05 A1 |  if_e	add	fp, #20
1e828     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e82c     14 4E 85 A1 |  if_e	sub	fp, #20
1e830     16 2B 02 A6 |  if_e	mov	local03, local04
1e834     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e838     38 00 90 5D |  if_ne	jmp	#LR__2433
1e83c     00 26 06 F6 | 	mov	local01, #0
1e840     A7 28 02 FB | 	rdlong	local02, fp
1e844     0C 4E 05 F1 | 	add	fp, #12
1e848     A7 12 02 FB | 	rdlong	arg01, fp
1e84c     0C 4E 85 F1 | 	sub	fp, #12
1e850     38 A1 B0 FD | 	call	#__system___float_fromuns
1e854     FD 14 02 F6 | 	mov	arg02, result1
1e858     14 13 02 F6 | 	mov	arg01, local02
1e85c     01 16 06 F6 | 	mov	arg03, #1
1e860     60 A9 B0 FD | 	call	#__system___float_cmp
1e864     00 FA 55 F2 | 	cmps	result1, #0 wc
1e868     00 26 26 C6 |  if_b	not	local01, #0
1e86c     A7 26 62 FC | 	wrlong	local01, fp
1e870     EC 02 90 FD | 	jmp	#LR__2443
1e874                 | LR__2433
1e874                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1e874     08 4E 05 F1 | 	add	fp, #8
1e878     A7 26 02 FB | 	rdlong	local01, fp
1e87c     08 4E 85 F1 | 	sub	fp, #8
1e880     1C 26 0E F2 | 	cmp	local01, #28 wz
1e884     14 4E 05 A1 |  if_e	add	fp, #20
1e888     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e88c     14 4E 85 A1 |  if_e	sub	fp, #20
1e890     16 2B 02 A6 |  if_e	mov	local03, local04
1e894     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e898     44 00 90 5D |  if_ne	jmp	#LR__2434
1e89c     00 26 06 F6 | 	mov	local01, #0
1e8a0     A7 12 02 FB | 	rdlong	arg01, fp
1e8a4     09 13 52 F6 | 	abs	arg01, arg01 wc
1e8a8     1F 2E C6 C9 |  if_b	decod	local05, #31
1e8ac     00 2E 06 36 |  if_ae	mov	local05, #0
1e8b0     D8 A0 B0 FD | 	call	#__system___float_fromuns
1e8b4     17 FB 61 F5 | 	xor	result1, local05
1e8b8     FD 12 02 F6 | 	mov	arg01, result1
1e8bc     0C 4E 05 F1 | 	add	fp, #12
1e8c0     A7 14 02 FB | 	rdlong	arg02, fp
1e8c4     0C 4E 85 F1 | 	sub	fp, #12
1e8c8     01 16 06 F6 | 	mov	arg03, #1
1e8cc     F4 A8 B0 FD | 	call	#__system___float_cmp
1e8d0     00 FA 55 F2 | 	cmps	result1, #0 wc
1e8d4     00 26 26 C6 |  if_b	not	local01, #0
1e8d8     A7 26 62 FC | 	wrlong	local01, fp
1e8dc     80 02 90 FD | 	jmp	#LR__2443
1e8e0                 | LR__2434
1e8e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1e8e0     08 4E 05 F1 | 	add	fp, #8
1e8e4     A7 26 02 FB | 	rdlong	local01, fp
1e8e8     08 4E 85 F1 | 	sub	fp, #8
1e8ec     1C 26 0E F2 | 	cmp	local01, #28 wz
1e8f0     14 4E 05 A1 |  if_e	add	fp, #20
1e8f4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e8f8     14 4E 85 A1 |  if_e	sub	fp, #20
1e8fc     16 2B 02 A6 |  if_e	mov	local03, local04
1e900     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e904     20 00 90 5D |  if_ne	jmp	#LR__2435
1e908     A7 28 02 FB | 	rdlong	local02, fp
1e90c     0C 4E 05 F1 | 	add	fp, #12
1e910     A7 2A 02 FB | 	rdlong	local03, fp
1e914     0C 4E 85 F1 | 	sub	fp, #12
1e918     15 29 52 F2 | 	cmps	local02, local03 wc
1e91c     13 27 A2 F1 | 	subx	local01, local01
1e920     A7 26 62 FC | 	wrlong	local01, fp
1e924     38 02 90 FD | 	jmp	#LR__2443
1e928                 | LR__2435
1e928                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1e928     08 4E 05 F1 | 	add	fp, #8
1e92c     A7 26 02 FB | 	rdlong	local01, fp
1e930     08 4E 85 F1 | 	sub	fp, #8
1e934     1C 26 0E F2 | 	cmp	local01, #28 wz
1e938     14 4E 05 A1 |  if_e	add	fp, #20
1e93c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e940     14 4E 85 A1 |  if_e	sub	fp, #20
1e944     16 2B 02 A6 |  if_e	mov	local03, local04
1e948     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e94c     20 00 90 5D |  if_ne	jmp	#LR__2436
1e950     A7 28 02 FB | 	rdlong	local02, fp
1e954     0C 4E 05 F1 | 	add	fp, #12
1e958     A7 2A 02 FB | 	rdlong	local03, fp
1e95c     0C 4E 85 F1 | 	sub	fp, #12
1e960     15 29 52 F2 | 	cmps	local02, local03 wc
1e964     13 27 A2 F1 | 	subx	local01, local01
1e968     A7 26 62 FC | 	wrlong	local01, fp
1e96c     F0 01 90 FD | 	jmp	#LR__2443
1e970                 | LR__2436
1e970                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1e970     08 4E 05 F1 | 	add	fp, #8
1e974     A7 26 02 FB | 	rdlong	local01, fp
1e978     08 4E 85 F1 | 	sub	fp, #8
1e97c     1D 26 0E F2 | 	cmp	local01, #29 wz
1e980     14 4E 05 A1 |  if_e	add	fp, #20
1e984     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e988     14 4E 85 A1 |  if_e	sub	fp, #20
1e98c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1e990     34 00 90 5D |  if_ne	jmp	#LR__2437
1e994     00 26 06 F6 | 	mov	local01, #0
1e998     A7 12 02 FB | 	rdlong	arg01, fp
1e99c     EC 9F B0 FD | 	call	#__system___float_fromuns
1e9a0     FD 12 02 F6 | 	mov	arg01, result1
1e9a4     0C 4E 05 F1 | 	add	fp, #12
1e9a8     A7 14 02 FB | 	rdlong	arg02, fp
1e9ac     0C 4E 85 F1 | 	sub	fp, #12
1e9b0     01 16 06 F6 | 	mov	arg03, #1
1e9b4     0C A8 B0 FD | 	call	#__system___float_cmp
1e9b8     00 FA 55 F2 | 	cmps	result1, #0 wc
1e9bc     00 26 26 C6 |  if_b	not	local01, #0
1e9c0     A7 26 62 FC | 	wrlong	local01, fp
1e9c4     98 01 90 FD | 	jmp	#LR__2443
1e9c8                 | LR__2437
1e9c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1e9c8     08 4E 05 F1 | 	add	fp, #8
1e9cc     A7 26 02 FB | 	rdlong	local01, fp
1e9d0     08 4E 85 F1 | 	sub	fp, #8
1e9d4     1D 26 0E F2 | 	cmp	local01, #29 wz
1e9d8     14 4E 05 A1 |  if_e	add	fp, #20
1e9dc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e9e0     14 4E 85 A1 |  if_e	sub	fp, #20
1e9e4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e9e8     20 00 90 5D |  if_ne	jmp	#LR__2438
1e9ec     A7 28 02 FB | 	rdlong	local02, fp
1e9f0     0C 4E 05 F1 | 	add	fp, #12
1e9f4     A7 2A 02 FB | 	rdlong	local03, fp
1e9f8     0C 4E 85 F1 | 	sub	fp, #12
1e9fc     15 29 52 F2 | 	cmps	local02, local03 wc
1ea00     13 27 A2 F1 | 	subx	local01, local01
1ea04     A7 26 62 FC | 	wrlong	local01, fp
1ea08     54 01 90 FD | 	jmp	#LR__2443
1ea0c                 | LR__2438
1ea0c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1ea0c     08 4E 05 F1 | 	add	fp, #8
1ea10     A7 26 02 FB | 	rdlong	local01, fp
1ea14     08 4E 85 F1 | 	sub	fp, #8
1ea18     1D 26 0E F2 | 	cmp	local01, #29 wz
1ea1c     14 4E 05 A1 |  if_e	add	fp, #20
1ea20     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ea24     14 4E 85 A1 |  if_e	sub	fp, #20
1ea28     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ea2c     20 00 90 5D |  if_ne	jmp	#LR__2439
1ea30     A7 28 02 FB | 	rdlong	local02, fp
1ea34     0C 4E 05 F1 | 	add	fp, #12
1ea38     A7 2A 02 FB | 	rdlong	local03, fp
1ea3c     0C 4E 85 F1 | 	sub	fp, #12
1ea40     15 29 12 F2 | 	cmp	local02, local03 wc
1ea44     13 27 A2 F1 | 	subx	local01, local01
1ea48     A7 26 62 FC | 	wrlong	local01, fp
1ea4c     10 01 90 FD | 	jmp	#LR__2443
1ea50                 | LR__2439
1ea50                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1ea50     08 4E 05 F1 | 	add	fp, #8
1ea54     A7 26 02 FB | 	rdlong	local01, fp
1ea58     08 4E 85 F1 | 	sub	fp, #8
1ea5c     2B 26 0E F2 | 	cmp	local01, #43 wz
1ea60     14 4E 05 A1 |  if_e	add	fp, #20
1ea64     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ea68     14 4E 85 A1 |  if_e	sub	fp, #20
1ea6c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ea70     30 00 90 5D |  if_ne	jmp	#LR__2440
1ea74     00 26 06 F6 | 	mov	local01, #0
1ea78     A7 12 02 FB | 	rdlong	arg01, fp
1ea7c     D8 E9 BE FD | 	call	#_convertstring
1ea80     FD 12 02 F6 | 	mov	arg01, result1
1ea84     0C 4E 05 F1 | 	add	fp, #12
1ea88     A7 14 02 FB | 	rdlong	arg02, fp
1ea8c     0C 4E 85 F1 | 	sub	fp, #12
1ea90     AC 74 B0 FD | 	call	#__system___string_cmp
1ea94     00 FA 55 F2 | 	cmps	result1, #0 wc
1ea98     00 26 26 C6 |  if_b	not	local01, #0
1ea9c     A7 26 62 FC | 	wrlong	local01, fp
1eaa0     BC 00 90 FD | 	jmp	#LR__2443
1eaa4                 | LR__2440
1eaa4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1eaa4     08 4E 05 F1 | 	add	fp, #8
1eaa8     A7 26 02 FB | 	rdlong	local01, fp
1eaac     08 4E 85 F1 | 	sub	fp, #8
1eab0     1F 26 0E F2 | 	cmp	local01, #31 wz
1eab4     14 4E 05 A1 |  if_e	add	fp, #20
1eab8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eabc     14 4E 85 A1 |  if_e	sub	fp, #20
1eac0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1eac4     34 00 90 5D |  if_ne	jmp	#LR__2441
1eac8     00 26 06 F6 | 	mov	local01, #0
1eacc     A7 28 02 FB | 	rdlong	local02, fp
1ead0     0C 4E 05 F1 | 	add	fp, #12
1ead4     A7 12 02 FB | 	rdlong	arg01, fp
1ead8     0C 4E 85 F1 | 	sub	fp, #12
1eadc     78 E9 BE FD | 	call	#_convertstring
1eae0     FD 14 02 F6 | 	mov	arg02, result1
1eae4     14 13 02 F6 | 	mov	arg01, local02
1eae8     54 74 B0 FD | 	call	#__system___string_cmp
1eaec     00 FA 55 F2 | 	cmps	result1, #0 wc
1eaf0     00 26 26 C6 |  if_b	not	local01, #0
1eaf4     A7 26 62 FC | 	wrlong	local01, fp
1eaf8     64 00 90 FD | 	jmp	#LR__2443
1eafc                 | LR__2441
1eafc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1eafc     08 4E 05 F1 | 	add	fp, #8
1eb00     A7 26 02 FB | 	rdlong	local01, fp
1eb04     08 4E 85 F1 | 	sub	fp, #8
1eb08     2B 26 0E F2 | 	cmp	local01, #43 wz
1eb0c     14 4E 05 A1 |  if_e	add	fp, #20
1eb10     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eb14     14 4E 85 A1 |  if_e	sub	fp, #20
1eb18     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1eb1c     3C 00 90 5D |  if_ne	jmp	#LR__2442
1eb20     00 26 06 F6 | 	mov	local01, #0
1eb24     A7 12 02 FB | 	rdlong	arg01, fp
1eb28     2C E9 BE FD | 	call	#_convertstring
1eb2c     FD 28 02 F6 | 	mov	local02, result1
1eb30     0C 4E 05 F1 | 	add	fp, #12
1eb34     A7 12 02 FB | 	rdlong	arg01, fp
1eb38     0C 4E 85 F1 | 	sub	fp, #12
1eb3c     18 E9 BE FD | 	call	#_convertstring
1eb40     FD 14 02 F6 | 	mov	arg02, result1
1eb44     14 13 02 F6 | 	mov	arg01, local02
1eb48     F4 73 B0 FD | 	call	#__system___string_cmp
1eb4c     00 FA 55 F2 | 	cmps	result1, #0 wc
1eb50     00 26 26 C6 |  if_b	not	local01, #0
1eb54     A7 26 62 FC | 	wrlong	local01, fp
1eb58     04 00 90 FD | 	jmp	#LR__2443
1eb5c                 | LR__2442
1eb5c     A7 00 68 FC | 	wrlong	#0, fp
1eb60                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1eb60                 | LR__2443
1eb60     08 4E 05 F1 | 	add	fp, #8
1eb64     A7 38 68 FC | 	wrlong	#28, fp
1eb68     08 4E 85 F1 | 	sub	fp, #8
1eb6c     A7 12 02 F6 | 	mov	arg01, fp
1eb70     04 E8 BE FD | 	call	#_push
1eb74     A7 F0 03 F6 | 	mov	ptra, fp
1eb78     B2 00 A0 FD | 	call	#popregs_
1eb7c                 | _do_lt_ret
1eb7c     2D 00 64 FD | 	ret
1eb80                 | 
1eb80                 | ' 
1eb80                 | ' '--------------------------------- minus (-)
1eb80                 | ' 
1eb80                 | ' sub do_minus
1eb80                 | _do_minus
1eb80     05 4A 05 F6 | 	mov	COUNT_, #5
1eb84     A8 00 A0 FD | 	call	#pushregs_
1eb88     18 F0 07 F1 | 	add	ptra, #24
1eb8c     50 E7 BE FD | 	call	#_pop
1eb90     FD 26 02 F6 | 	mov	local01, result1
1eb94     FE 28 02 F6 | 	mov	local02, result2
1eb98     FF 2A 02 F6 | 	mov	local03, result3
1eb9c     0C 4E 05 F1 | 	add	fp, #12
1eba0     A7 26 62 FC | 	wrlong	local01, fp
1eba4     04 4E 05 F1 | 	add	fp, #4
1eba8     A7 28 62 FC | 	wrlong	local02, fp
1ebac     04 4E 05 F1 | 	add	fp, #4
1ebb0     A7 2A 62 FC | 	wrlong	local03, fp
1ebb4     14 4E 85 F1 | 	sub	fp, #20
1ebb8     24 E7 BE FD | 	call	#_pop
1ebbc     FF 2A 02 F6 | 	mov	local03, result3
1ebc0     A7 FA 61 FC | 	wrlong	result1, fp
1ebc4     04 4E 05 F1 | 	add	fp, #4
1ebc8     A7 FC 61 FC | 	wrlong	result2, fp
1ebcc     04 4E 05 F1 | 	add	fp, #4
1ebd0     A7 2A 62 FC | 	wrlong	local03, fp
1ebd4                 | ' 
1ebd4                 | ' t2=pop()
1ebd4                 | ' t1=pop()
1ebd4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1ebd4     08 4E 85 F1 | 	sub	fp, #8
1ebd8     1D 2A 0E F2 | 	cmp	local03, #29 wz
1ebdc     14 4E 05 A1 |  if_e	add	fp, #20
1ebe0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ebe4     14 4E 85 A1 |  if_e	sub	fp, #20
1ebe8     16 2B 02 A6 |  if_e	mov	local03, local04
1ebec     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ebf0     5C 00 90 5D |  if_ne	jmp	#LR__2451
1ebf4                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1ebf4     0C 4E 05 F1 | 	add	fp, #12
1ebf8     A7 26 02 FB | 	rdlong	local01, fp
1ebfc     0C 4E 85 F1 | 	sub	fp, #12
1ec00     A7 2A 02 FB | 	rdlong	local03, fp
1ec04     15 27 12 F2 | 	cmp	local01, local03 wc
1ec08     1C 00 90 3D |  if_ae	jmp	#LR__2450
1ec0c     A7 26 02 FB | 	rdlong	local01, fp
1ec10     0C 4E 05 F1 | 	add	fp, #12
1ec14     A7 28 02 FB | 	rdlong	local02, fp
1ec18     0C 4E 85 F1 | 	sub	fp, #12
1ec1c     14 27 82 F1 | 	sub	local01, local02
1ec20     A7 26 62 FC | 	wrlong	local01, fp
1ec24     F4 02 90 FD | 	jmp	#LR__2460
1ec28                 | LR__2450
1ec28     A7 26 02 FB | 	rdlong	local01, fp
1ec2c     0C 4E 05 F1 | 	add	fp, #12
1ec30     A7 28 02 FB | 	rdlong	local02, fp
1ec34     0C 4E 85 F1 | 	sub	fp, #12
1ec38     14 27 82 F1 | 	sub	local01, local02
1ec3c     A7 26 62 FC | 	wrlong	local01, fp
1ec40     08 4E 05 F1 | 	add	fp, #8
1ec44     A7 38 68 FC | 	wrlong	#28, fp
1ec48     08 4E 85 F1 | 	sub	fp, #8
1ec4c     CC 02 90 FD | 	jmp	#LR__2460
1ec50                 | LR__2451
1ec50                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1ec50     08 4E 05 F1 | 	add	fp, #8
1ec54     A7 26 02 FB | 	rdlong	local01, fp
1ec58     08 4E 85 F1 | 	sub	fp, #8
1ec5c     1D 26 0E F2 | 	cmp	local01, #29 wz
1ec60     14 4E 05 A1 |  if_e	add	fp, #20
1ec64     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ec68     14 4E 85 A1 |  if_e	sub	fp, #20
1ec6c     16 2B 02 A6 |  if_e	mov	local03, local04
1ec70     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ec74     28 00 90 5D |  if_ne	jmp	#LR__2452
1ec78     A7 26 02 FB | 	rdlong	local01, fp
1ec7c     0C 4E 05 F1 | 	add	fp, #12
1ec80     A7 28 02 FB | 	rdlong	local02, fp
1ec84     0C 4E 85 F1 | 	sub	fp, #12
1ec88     14 27 82 F1 | 	sub	local01, local02
1ec8c     A7 26 62 FC | 	wrlong	local01, fp
1ec90     08 4E 05 F1 | 	add	fp, #8
1ec94     A7 38 68 FC | 	wrlong	#28, fp
1ec98     08 4E 85 F1 | 	sub	fp, #8
1ec9c     7C 02 90 FD | 	jmp	#LR__2460
1eca0                 | LR__2452
1eca0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1eca0     08 4E 05 F1 | 	add	fp, #8
1eca4     A7 26 02 FB | 	rdlong	local01, fp
1eca8     08 4E 85 F1 | 	sub	fp, #8
1ecac     1D 26 0E F2 | 	cmp	local01, #29 wz
1ecb0     14 4E 05 A1 |  if_e	add	fp, #20
1ecb4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ecb8     14 4E 85 A1 |  if_e	sub	fp, #20
1ecbc     16 2B 02 A6 |  if_e	mov	local03, local04
1ecc0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ecc4     34 00 90 5D |  if_ne	jmp	#LR__2453
1ecc8     A7 12 02 FB | 	rdlong	arg01, fp
1eccc     BC 9C B0 FD | 	call	#__system___float_fromuns
1ecd0     FD 12 02 F6 | 	mov	arg01, result1
1ecd4     0C 4E 05 F1 | 	add	fp, #12
1ecd8     A7 14 02 FB | 	rdlong	arg02, fp
1ecdc     0C 4E 85 F1 | 	sub	fp, #12
1ece0     1F 14 E6 F4 | 	bitnot	arg02, #31
1ece4     D8 9C B0 FD | 	call	#__system___float_add
1ece8     A7 FA 61 FC | 	wrlong	result1, fp
1ecec     08 4E 05 F1 | 	add	fp, #8
1ecf0     A7 3C 68 FC | 	wrlong	#30, fp
1ecf4     08 4E 85 F1 | 	sub	fp, #8
1ecf8     20 02 90 FD | 	jmp	#LR__2460
1ecfc                 | LR__2453
1ecfc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1ecfc     08 4E 05 F1 | 	add	fp, #8
1ed00     A7 26 02 FB | 	rdlong	local01, fp
1ed04     08 4E 85 F1 | 	sub	fp, #8
1ed08     1C 26 0E F2 | 	cmp	local01, #28 wz
1ed0c     14 4E 05 A1 |  if_e	add	fp, #20
1ed10     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed14     14 4E 85 A1 |  if_e	sub	fp, #20
1ed18     16 2B 02 A6 |  if_e	mov	local03, local04
1ed1c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ed20     1C 00 90 5D |  if_ne	jmp	#LR__2454
1ed24     A7 26 02 FB | 	rdlong	local01, fp
1ed28     0C 4E 05 F1 | 	add	fp, #12
1ed2c     A7 28 02 FB | 	rdlong	local02, fp
1ed30     0C 4E 85 F1 | 	sub	fp, #12
1ed34     14 27 82 F1 | 	sub	local01, local02
1ed38     A7 26 62 FC | 	wrlong	local01, fp
1ed3c     DC 01 90 FD | 	jmp	#LR__2460
1ed40                 | LR__2454
1ed40                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1ed40     08 4E 05 F1 | 	add	fp, #8
1ed44     A7 26 02 FB | 	rdlong	local01, fp
1ed48     08 4E 85 F1 | 	sub	fp, #8
1ed4c     1C 26 0E F2 | 	cmp	local01, #28 wz
1ed50     14 4E 05 A1 |  if_e	add	fp, #20
1ed54     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed58     14 4E 85 A1 |  if_e	sub	fp, #20
1ed5c     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1ed60     1C 00 90 5D |  if_ne	jmp	#LR__2455
1ed64     A7 26 02 FB | 	rdlong	local01, fp
1ed68     0C 4E 05 F1 | 	add	fp, #12
1ed6c     A7 28 02 FB | 	rdlong	local02, fp
1ed70     0C 4E 85 F1 | 	sub	fp, #12
1ed74     14 27 82 F1 | 	sub	local01, local02
1ed78     A7 26 62 FC | 	wrlong	local01, fp
1ed7c     9C 01 90 FD | 	jmp	#LR__2460
1ed80                 | LR__2455
1ed80                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1ed80     08 4E 05 F1 | 	add	fp, #8
1ed84     A7 26 02 FB | 	rdlong	local01, fp
1ed88     08 4E 85 F1 | 	sub	fp, #8
1ed8c     1C 26 0E F2 | 	cmp	local01, #28 wz
1ed90     14 4E 05 A1 |  if_e	add	fp, #20
1ed94     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ed98     14 4E 85 A1 |  if_e	sub	fp, #20
1ed9c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1eda0     44 00 90 5D |  if_ne	jmp	#LR__2456
1eda4     A7 12 02 FB | 	rdlong	arg01, fp
1eda8     09 13 52 F6 | 	abs	arg01, arg01 wc
1edac     1F 2E C6 C9 |  if_b	decod	local05, #31
1edb0     00 2E 06 36 |  if_ae	mov	local05, #0
1edb4     D4 9B B0 FD | 	call	#__system___float_fromuns
1edb8     17 FB 61 F5 | 	xor	result1, local05
1edbc     FD 12 02 F6 | 	mov	arg01, result1
1edc0     0C 4E 05 F1 | 	add	fp, #12
1edc4     A7 14 02 FB | 	rdlong	arg02, fp
1edc8     0C 4E 85 F1 | 	sub	fp, #12
1edcc     1F 14 E6 F4 | 	bitnot	arg02, #31
1edd0     EC 9B B0 FD | 	call	#__system___float_add
1edd4     A7 FA 61 FC | 	wrlong	result1, fp
1edd8     08 4E 05 F1 | 	add	fp, #8
1eddc     A7 3C 68 FC | 	wrlong	#30, fp
1ede0     08 4E 85 F1 | 	sub	fp, #8
1ede4     34 01 90 FD | 	jmp	#LR__2460
1ede8                 | LR__2456
1ede8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1ede8     08 4E 05 F1 | 	add	fp, #8
1edec     A7 26 02 FB | 	rdlong	local01, fp
1edf0     08 4E 85 F1 | 	sub	fp, #8
1edf4     1E 26 0E F2 | 	cmp	local01, #30 wz
1edf8     14 4E 05 A1 |  if_e	add	fp, #20
1edfc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ee00     14 4E 85 A1 |  if_e	sub	fp, #20
1ee04     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ee08     2C 00 90 5D |  if_ne	jmp	#LR__2457
1ee0c     A7 26 02 FB | 	rdlong	local01, fp
1ee10     0C 4E 05 F1 | 	add	fp, #12
1ee14     A7 12 02 FB | 	rdlong	arg01, fp
1ee18     0C 4E 85 F1 | 	sub	fp, #12
1ee1c     6C 9B B0 FD | 	call	#__system___float_fromuns
1ee20     FD 14 02 F6 | 	mov	arg02, result1
1ee24     13 13 02 F6 | 	mov	arg01, local01
1ee28     1F 14 E6 F4 | 	bitnot	arg02, #31
1ee2c     90 9B B0 FD | 	call	#__system___float_add
1ee30     A7 FA 61 FC | 	wrlong	result1, fp
1ee34     E4 00 90 FD | 	jmp	#LR__2460
1ee38                 | LR__2457
1ee38                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1ee38     08 4E 05 F1 | 	add	fp, #8
1ee3c     A7 26 02 FB | 	rdlong	local01, fp
1ee40     08 4E 85 F1 | 	sub	fp, #8
1ee44     1E 26 0E F2 | 	cmp	local01, #30 wz
1ee48     14 4E 05 A1 |  if_e	add	fp, #20
1ee4c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ee50     14 4E 85 A1 |  if_e	sub	fp, #20
1ee54     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ee58     3C 00 90 5D |  if_ne	jmp	#LR__2458
1ee5c     A7 26 02 FB | 	rdlong	local01, fp
1ee60     0C 4E 05 F1 | 	add	fp, #12
1ee64     A7 12 02 FB | 	rdlong	arg01, fp
1ee68     0C 4E 85 F1 | 	sub	fp, #12
1ee6c     09 13 52 F6 | 	abs	arg01, arg01 wc
1ee70     1F 2E C6 C9 |  if_b	decod	local05, #31
1ee74     00 2E 06 36 |  if_ae	mov	local05, #0
1ee78     10 9B B0 FD | 	call	#__system___float_fromuns
1ee7c     17 FB 61 F5 | 	xor	result1, local05
1ee80     FD 14 02 F6 | 	mov	arg02, result1
1ee84     13 13 02 F6 | 	mov	arg01, local01
1ee88     1F 14 E6 F4 | 	bitnot	arg02, #31
1ee8c     30 9B B0 FD | 	call	#__system___float_add
1ee90     A7 FA 61 FC | 	wrlong	result1, fp
1ee94     84 00 90 FD | 	jmp	#LR__2460
1ee98                 | LR__2458
1ee98                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1ee98     08 4E 05 F1 | 	add	fp, #8
1ee9c     A7 26 02 FB | 	rdlong	local01, fp
1eea0     08 4E 85 F1 | 	sub	fp, #8
1eea4     1E 26 0E F2 | 	cmp	local01, #30 wz
1eea8     14 4E 05 A1 |  if_e	add	fp, #20
1eeac     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eeb0     14 4E 85 A1 |  if_e	sub	fp, #20
1eeb4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1eeb8     20 00 90 5D |  if_ne	jmp	#LR__2459
1eebc     A7 12 02 FB | 	rdlong	arg01, fp
1eec0     0C 4E 05 F1 | 	add	fp, #12
1eec4     A7 14 02 FB | 	rdlong	arg02, fp
1eec8     0C 4E 85 F1 | 	sub	fp, #12
1eecc     1F 14 E6 F4 | 	bitnot	arg02, #31
1eed0     EC 9A B0 FD | 	call	#__system___float_add
1eed4     A7 FA 61 FC | 	wrlong	result1, fp
1eed8     40 00 90 FD | 	jmp	#LR__2460
1eedc                 | LR__2459
1eedc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1eedc     08 4E 05 F1 | 	add	fp, #8
1eee0     A7 26 02 FB | 	rdlong	local01, fp
1eee4     08 4E 85 F1 | 	sub	fp, #8
1eee8     1F 26 0E F2 | 	cmp	local01, #31 wz
1eeec     14 4E 05 51 |  if_ne	add	fp, #20
1eef0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1eef4     14 4E 85 51 |  if_ne	sub	fp, #20
1eef8     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1eefc     A7 06 68 AC |  if_e	wrlong	#3, fp
1ef00     08 4E 05 A1 |  if_e	add	fp, #8
1ef04     A7 FE 69 AC |  if_e	wrlong	#255, fp
1ef08     08 4E 85 A1 |  if_e	sub	fp, #8
1ef0c     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1ef10     08 4E 05 51 |  if_ne	add	fp, #8
1ef14     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1ef18     08 4E 85 51 |  if_ne	sub	fp, #8
1ef1c                 | LR__2460
1ef1c     A7 12 02 F6 | 	mov	arg01, fp
1ef20     54 E4 BE FD | 	call	#_push
1ef24     A7 F0 03 F6 | 	mov	ptra, fp
1ef28     B2 00 A0 FD | 	call	#popregs_
1ef2c                 | _do_minus_ret
1ef2c     2D 00 64 FD | 	ret
1ef30                 | 
1ef30                 | ' 
1ef30                 | ' '--------------------------------- negative (-), one argument negative
1ef30                 | ' 
1ef30                 | ' sub do_negative
1ef30                 | _do_negative
1ef30     02 4A 05 F6 | 	mov	COUNT_, #2
1ef34     A8 00 A0 FD | 	call	#pushregs_
1ef38     0C F0 07 F1 | 	add	ptra, #12
1ef3c     A0 E3 BE FD | 	call	#_pop
1ef40     FF 26 02 F6 | 	mov	local01, result3
1ef44     A7 FA 61 FC | 	wrlong	result1, fp
1ef48     04 4E 05 F1 | 	add	fp, #4
1ef4c     A7 FC 61 FC | 	wrlong	result2, fp
1ef50     04 4E 05 F1 | 	add	fp, #4
1ef54     A7 26 62 FC | 	wrlong	local01, fp
1ef58                 | ' 
1ef58                 | ' t1=pop()
1ef58                 | ' if t1.result_type=result_int then 
1ef58     08 4E 85 F1 | 	sub	fp, #8
1ef5c     1C 26 0E F2 | 	cmp	local01, #28 wz
1ef60     A7 28 02 AB |  if_e	rdlong	local02, fp
1ef64     14 27 62 A6 |  if_e	neg	local01, local02
1ef68     A7 26 62 AC |  if_e	wrlong	local01, fp
1ef6c     5C 00 90 AD |  if_e	jmp	#LR__2472
1ef70     08 4E 05 F1 | 	add	fp, #8
1ef74     A7 26 02 FB | 	rdlong	local01, fp
1ef78     08 4E 85 F1 | 	sub	fp, #8
1ef7c     1D 26 0E F2 | 	cmp	local01, #29 wz
1ef80     1C 00 90 5D |  if_ne	jmp	#LR__2470
1ef84     A7 28 02 FB | 	rdlong	local02, fp
1ef88     14 27 62 F6 | 	neg	local01, local02
1ef8c     A7 26 62 FC | 	wrlong	local01, fp
1ef90     08 4E 05 F1 | 	add	fp, #8
1ef94     A7 38 68 FC | 	wrlong	#28, fp
1ef98     08 4E 85 F1 | 	sub	fp, #8
1ef9c     2C 00 90 FD | 	jmp	#LR__2471
1efa0                 | LR__2470
1efa0     08 4E 05 F1 | 	add	fp, #8
1efa4     A7 26 02 FB | 	rdlong	local01, fp
1efa8     08 4E 85 F1 | 	sub	fp, #8
1efac     1E 26 0E F2 | 	cmp	local01, #30 wz
1efb0     A7 FA 01 AB |  if_e	rdlong	result1, fp
1efb4     1F FA E5 A4 |  if_e	bitnot	result1, #31
1efb8     A7 FA 61 AC |  if_e	wrlong	result1, fp
1efbc     08 4E 05 51 |  if_ne	add	fp, #8
1efc0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1efc4     08 4E 85 51 |  if_ne	sub	fp, #8
1efc8     A7 50 68 5C |  if_ne	wrlong	#40, fp
1efcc                 | LR__2471
1efcc                 | LR__2472
1efcc     A7 12 02 F6 | 	mov	arg01, fp
1efd0     A4 E3 BE FD | 	call	#_push
1efd4     A7 F0 03 F6 | 	mov	ptra, fp
1efd8     B2 00 A0 FD | 	call	#popregs_
1efdc                 | _do_negative_ret
1efdc     2D 00 64 FD | 	ret
1efe0                 | 
1efe0                 | ' 
1efe0                 | ' '--------------------------------- MOD (modulo)
1efe0                 | ' 
1efe0                 | ' sub do_mod 
1efe0                 | _do_mod
1efe0     01 4A 05 F6 | 	mov	COUNT_, #1
1efe4     A8 00 A0 FD | 	call	#pushregs_
1efe8     18 F0 07 F1 | 	add	ptra, #24
1efec     F0 E2 BE FD | 	call	#_pop
1eff0     FD 8A 02 F6 | 	mov	muldivb_, result1
1eff4     FE 88 02 F6 | 	mov	muldiva_, result2
1eff8     FF 26 02 F6 | 	mov	local01, result3
1effc     0C 4E 05 F1 | 	add	fp, #12
1f000     A7 8A 62 FC | 	wrlong	muldivb_, fp
1f004     04 4E 05 F1 | 	add	fp, #4
1f008     A7 88 62 FC | 	wrlong	muldiva_, fp
1f00c     04 4E 05 F1 | 	add	fp, #4
1f010     A7 26 62 FC | 	wrlong	local01, fp
1f014     14 4E 85 F1 | 	sub	fp, #20
1f018     C4 E2 BE FD | 	call	#_pop
1f01c     A7 FA 61 FC | 	wrlong	result1, fp
1f020     04 4E 05 F1 | 	add	fp, #4
1f024     A7 FC 61 FC | 	wrlong	result2, fp
1f028     04 4E 05 F1 | 	add	fp, #4
1f02c     A7 FE 61 FC | 	wrlong	result3, fp
1f030                 | ' 
1f030                 | ' t2=pop()
1f030                 | ' t1=pop()
1f030                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1f030     08 4E 85 F1 | 	sub	fp, #8
1f034     1F FE 0D F2 | 	cmp	result3, #31 wz
1f038     14 4E 05 51 |  if_ne	add	fp, #20
1f03c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1f040     14 4E 85 51 |  if_ne	sub	fp, #20
1f044     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1f048     A7 14 68 AC |  if_e	wrlong	#10, fp
1f04c     08 4E 05 A1 |  if_e	add	fp, #8
1f050     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f054     08 4E 85 A1 |  if_e	sub	fp, #8
1f058     90 01 90 AD |  if_e	jmp	#LR__2486
1f05c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1f05c     08 4E 05 F1 | 	add	fp, #8
1f060     A7 8A 02 FB | 	rdlong	muldivb_, fp
1f064     08 4E 85 F1 | 	sub	fp, #8
1f068     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1f06c     1C 00 90 5D |  if_ne	jmp	#LR__2480
1f070     08 4E 05 F1 | 	add	fp, #8
1f074     A7 38 68 FC | 	wrlong	#28, fp
1f078     08 4E 85 F1 | 	sub	fp, #8
1f07c     A7 12 02 FB | 	rdlong	arg01, fp
1f080     00 14 06 F6 | 	mov	arg02, #0
1f084     D0 A1 B0 FD | 	call	#__system___float_tointeger
1f088     A7 FA 61 FC | 	wrlong	result1, fp
1f08c                 | LR__2480
1f08c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1f08c     14 4E 05 F1 | 	add	fp, #20
1f090     A7 8A 02 FB | 	rdlong	muldivb_, fp
1f094     14 4E 85 F1 | 	sub	fp, #20
1f098     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1f09c     28 00 90 5D |  if_ne	jmp	#LR__2481
1f0a0     14 4E 05 F1 | 	add	fp, #20
1f0a4     A7 38 68 FC | 	wrlong	#28, fp
1f0a8     08 4E 85 F1 | 	sub	fp, #8
1f0ac     A7 12 02 FB | 	rdlong	arg01, fp
1f0b0     0C 4E 85 F1 | 	sub	fp, #12
1f0b4     00 14 06 F6 | 	mov	arg02, #0
1f0b8     9C A1 B0 FD | 	call	#__system___float_tointeger
1f0bc     0C 4E 05 F1 | 	add	fp, #12
1f0c0     A7 FA 61 FC | 	wrlong	result1, fp
1f0c4     0C 4E 85 F1 | 	sub	fp, #12
1f0c8                 | LR__2481
1f0c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1f0c8     08 4E 05 F1 | 	add	fp, #8
1f0cc     A7 8A 02 FB | 	rdlong	muldivb_, fp
1f0d0     08 4E 85 F1 | 	sub	fp, #8
1f0d4     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1f0d8     14 4E 05 A1 |  if_e	add	fp, #20
1f0dc     A7 26 02 AB |  if_e	rdlong	local01, fp
1f0e0     14 4E 85 A1 |  if_e	sub	fp, #20
1f0e4     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1f0e8     20 00 90 5D |  if_ne	jmp	#LR__2482
1f0ec     0C 4E 05 F1 | 	add	fp, #12
1f0f0     A7 26 02 FB | 	rdlong	local01, fp
1f0f4     0C 4E 85 F1 | 	sub	fp, #12
1f0f8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1f0fc     13 8B 12 FD | 	qdiv	muldivb_, local01
1f100     19 26 62 FD | 	getqy	local01
1f104     A7 26 62 FC | 	wrlong	local01, fp
1f108     E0 00 90 FD | 	jmp	#LR__2486
1f10c                 | LR__2482
1f10c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1f10c     08 4E 05 F1 | 	add	fp, #8
1f110     A7 8A 02 FB | 	rdlong	muldivb_, fp
1f114     08 4E 85 F1 | 	sub	fp, #8
1f118     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1f11c     14 4E 05 A1 |  if_e	add	fp, #20
1f120     A7 26 02 AB |  if_e	rdlong	local01, fp
1f124     14 4E 85 A1 |  if_e	sub	fp, #20
1f128     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1f12c     2C 00 90 5D |  if_ne	jmp	#LR__2483
1f130     0C 4E 05 F1 | 	add	fp, #12
1f134     A7 26 02 FB | 	rdlong	local01, fp
1f138     0C 4E 85 F1 | 	sub	fp, #12
1f13c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1f140     13 8B 12 FD | 	qdiv	muldivb_, local01
1f144     19 26 62 FD | 	getqy	local01
1f148     A7 26 62 FC | 	wrlong	local01, fp
1f14c     08 4E 05 F1 | 	add	fp, #8
1f150     A7 38 68 FC | 	wrlong	#28, fp
1f154     08 4E 85 F1 | 	sub	fp, #8
1f158     90 00 90 FD | 	jmp	#LR__2486
1f15c                 | LR__2483
1f15c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1f15c     08 4E 05 F1 | 	add	fp, #8
1f160     A7 8A 02 FB | 	rdlong	muldivb_, fp
1f164     08 4E 85 F1 | 	sub	fp, #8
1f168     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1f16c     14 4E 05 A1 |  if_e	add	fp, #20
1f170     A7 26 02 AB |  if_e	rdlong	local01, fp
1f174     14 4E 85 A1 |  if_e	sub	fp, #20
1f178     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1f17c     1C 00 90 5D |  if_ne	jmp	#LR__2484
1f180     A7 88 02 FB | 	rdlong	muldiva_, fp
1f184     0C 4E 05 F1 | 	add	fp, #12
1f188     A7 8A 02 FB | 	rdlong	muldivb_, fp
1f18c     0C 4E 85 F1 | 	sub	fp, #12
1f190     BA 00 A0 FD | 	call	#divide_
1f194     A7 88 62 FC | 	wrlong	muldiva_, fp
1f198     50 00 90 FD | 	jmp	#LR__2486
1f19c                 | LR__2484
1f19c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1f19c     08 4E 05 F1 | 	add	fp, #8
1f1a0     A7 8A 02 FB | 	rdlong	muldivb_, fp
1f1a4     08 4E 85 F1 | 	sub	fp, #8
1f1a8     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1f1ac     14 4E 05 A1 |  if_e	add	fp, #20
1f1b0     A7 26 02 AB |  if_e	rdlong	local01, fp
1f1b4     14 4E 85 A1 |  if_e	sub	fp, #20
1f1b8     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1f1bc     1C 00 90 5D |  if_ne	jmp	#LR__2485
1f1c0     A7 88 02 FB | 	rdlong	muldiva_, fp
1f1c4     0C 4E 05 F1 | 	add	fp, #12
1f1c8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1f1cc     0C 4E 85 F1 | 	sub	fp, #12
1f1d0     BA 00 A0 FD | 	call	#divide_
1f1d4     A7 88 62 FC | 	wrlong	muldiva_, fp
1f1d8     10 00 90 FD | 	jmp	#LR__2486
1f1dc                 | LR__2485
1f1dc     A7 16 68 FC | 	wrlong	#11, fp
1f1e0     08 4E 05 F1 | 	add	fp, #8
1f1e4     A7 FE 69 FC | 	wrlong	#255, fp
1f1e8     08 4E 85 F1 | 	sub	fp, #8
1f1ec                 | LR__2486
1f1ec     A7 12 02 F6 | 	mov	arg01, fp
1f1f0     84 E1 BE FD | 	call	#_push
1f1f4     A7 F0 03 F6 | 	mov	ptra, fp
1f1f8     B2 00 A0 FD | 	call	#popregs_
1f1fc                 | _do_mod_ret
1f1fc     2D 00 64 FD | 	ret
1f200                 | 
1f200                 | ' 
1f200                 | ' '--------------------------------- mul (*)
1f200                 | ' 
1f200                 | ' sub do_mul
1f200                 | _do_mul
1f200     05 4A 05 F6 | 	mov	COUNT_, #5
1f204     A8 00 A0 FD | 	call	#pushregs_
1f208     18 F0 07 F1 | 	add	ptra, #24
1f20c     D0 E0 BE FD | 	call	#_pop
1f210     FD 26 02 F6 | 	mov	local01, result1
1f214     FE 28 02 F6 | 	mov	local02, result2
1f218     FF 2A 02 F6 | 	mov	local03, result3
1f21c     0C 4E 05 F1 | 	add	fp, #12
1f220     A7 26 62 FC | 	wrlong	local01, fp
1f224     04 4E 05 F1 | 	add	fp, #4
1f228     A7 28 62 FC | 	wrlong	local02, fp
1f22c     04 4E 05 F1 | 	add	fp, #4
1f230     A7 2A 62 FC | 	wrlong	local03, fp
1f234     14 4E 85 F1 | 	sub	fp, #20
1f238     A4 E0 BE FD | 	call	#_pop
1f23c     FF 2A 02 F6 | 	mov	local03, result3
1f240     A7 FA 61 FC | 	wrlong	result1, fp
1f244     04 4E 05 F1 | 	add	fp, #4
1f248     A7 FC 61 FC | 	wrlong	result2, fp
1f24c     04 4E 05 F1 | 	add	fp, #4
1f250     A7 2A 62 FC | 	wrlong	local03, fp
1f254                 | ' 
1f254                 | ' t2=pop()
1f254                 | ' t1=pop()
1f254                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1f254     08 4E 85 F1 | 	sub	fp, #8
1f258     1D 2A 0E F2 | 	cmp	local03, #29 wz
1f25c     14 4E 05 A1 |  if_e	add	fp, #20
1f260     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f264     14 4E 85 A1 |  if_e	sub	fp, #20
1f268     16 2B 02 A6 |  if_e	mov	local03, local04
1f26c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f270     20 00 90 5D |  if_ne	jmp	#LR__2490
1f274     A7 28 02 FB | 	rdlong	local02, fp
1f278     0C 4E 05 F1 | 	add	fp, #12
1f27c     A7 2A 02 FB | 	rdlong	local03, fp
1f280     15 29 02 FD | 	qmul	local02, local03
1f284     0C 4E 85 F1 | 	sub	fp, #12
1f288     18 26 62 FD | 	getqx	local01
1f28c     A7 26 62 FC | 	wrlong	local01, fp
1f290     C4 02 90 FD | 	jmp	#LR__2499
1f294                 | LR__2490
1f294                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1f294     08 4E 05 F1 | 	add	fp, #8
1f298     A7 26 02 FB | 	rdlong	local01, fp
1f29c     08 4E 85 F1 | 	sub	fp, #8
1f2a0     1D 26 0E F2 | 	cmp	local01, #29 wz
1f2a4     14 4E 05 A1 |  if_e	add	fp, #20
1f2a8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f2ac     14 4E 85 A1 |  if_e	sub	fp, #20
1f2b0     16 2B 02 A6 |  if_e	mov	local03, local04
1f2b4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f2b8     2C 00 90 5D |  if_ne	jmp	#LR__2491
1f2bc     A7 28 02 FB | 	rdlong	local02, fp
1f2c0     0C 4E 05 F1 | 	add	fp, #12
1f2c4     A7 2A 02 FB | 	rdlong	local03, fp
1f2c8     15 29 02 FD | 	qmul	local02, local03
1f2cc     0C 4E 85 F1 | 	sub	fp, #12
1f2d0     18 26 62 FD | 	getqx	local01
1f2d4     A7 26 62 FC | 	wrlong	local01, fp
1f2d8     08 4E 05 F1 | 	add	fp, #8
1f2dc     A7 38 68 FC | 	wrlong	#28, fp
1f2e0     08 4E 85 F1 | 	sub	fp, #8
1f2e4     70 02 90 FD | 	jmp	#LR__2499
1f2e8                 | LR__2491
1f2e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1f2e8     08 4E 05 F1 | 	add	fp, #8
1f2ec     A7 26 02 FB | 	rdlong	local01, fp
1f2f0     08 4E 85 F1 | 	sub	fp, #8
1f2f4     1D 26 0E F2 | 	cmp	local01, #29 wz
1f2f8     14 4E 05 A1 |  if_e	add	fp, #20
1f2fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f300     14 4E 85 A1 |  if_e	sub	fp, #20
1f304     16 2B 02 A6 |  if_e	mov	local03, local04
1f308     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f30c     30 00 90 5D |  if_ne	jmp	#LR__2492
1f310     A7 12 02 FB | 	rdlong	arg01, fp
1f314     74 96 B0 FD | 	call	#__system___float_fromuns
1f318     FD 12 02 F6 | 	mov	arg01, result1
1f31c     0C 4E 05 F1 | 	add	fp, #12
1f320     A7 14 02 FB | 	rdlong	arg02, fp
1f324     0C 4E 85 F1 | 	sub	fp, #12
1f328     64 9A B0 FD | 	call	#__system___float_mul
1f32c     A7 FA 61 FC | 	wrlong	result1, fp
1f330     08 4E 05 F1 | 	add	fp, #8
1f334     A7 3C 68 FC | 	wrlong	#30, fp
1f338     08 4E 85 F1 | 	sub	fp, #8
1f33c     18 02 90 FD | 	jmp	#LR__2499
1f340                 | LR__2492
1f340                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1f340     08 4E 05 F1 | 	add	fp, #8
1f344     A7 26 02 FB | 	rdlong	local01, fp
1f348     08 4E 85 F1 | 	sub	fp, #8
1f34c     1C 26 0E F2 | 	cmp	local01, #28 wz
1f350     14 4E 05 A1 |  if_e	add	fp, #20
1f354     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f358     14 4E 85 A1 |  if_e	sub	fp, #20
1f35c     16 2B 02 A6 |  if_e	mov	local03, local04
1f360     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f364     20 00 90 5D |  if_ne	jmp	#LR__2493
1f368     A7 28 02 FB | 	rdlong	local02, fp
1f36c     0C 4E 05 F1 | 	add	fp, #12
1f370     A7 2A 02 FB | 	rdlong	local03, fp
1f374     15 29 02 FD | 	qmul	local02, local03
1f378     0C 4E 85 F1 | 	sub	fp, #12
1f37c     18 26 62 FD | 	getqx	local01
1f380     A7 26 62 FC | 	wrlong	local01, fp
1f384     D0 01 90 FD | 	jmp	#LR__2499
1f388                 | LR__2493
1f388                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1f388     08 4E 05 F1 | 	add	fp, #8
1f38c     A7 26 02 FB | 	rdlong	local01, fp
1f390     08 4E 85 F1 | 	sub	fp, #8
1f394     1C 26 0E F2 | 	cmp	local01, #28 wz
1f398     14 4E 05 A1 |  if_e	add	fp, #20
1f39c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f3a0     14 4E 85 A1 |  if_e	sub	fp, #20
1f3a4     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1f3a8     20 00 90 5D |  if_ne	jmp	#LR__2494
1f3ac     A7 28 02 FB | 	rdlong	local02, fp
1f3b0     0C 4E 05 F1 | 	add	fp, #12
1f3b4     A7 2A 02 FB | 	rdlong	local03, fp
1f3b8     15 29 02 FD | 	qmul	local02, local03
1f3bc     0C 4E 85 F1 | 	sub	fp, #12
1f3c0     18 26 62 FD | 	getqx	local01
1f3c4     A7 26 62 FC | 	wrlong	local01, fp
1f3c8     8C 01 90 FD | 	jmp	#LR__2499
1f3cc                 | LR__2494
1f3cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1f3cc     08 4E 05 F1 | 	add	fp, #8
1f3d0     A7 26 02 FB | 	rdlong	local01, fp
1f3d4     08 4E 85 F1 | 	sub	fp, #8
1f3d8     1C 26 0E F2 | 	cmp	local01, #28 wz
1f3dc     14 4E 05 A1 |  if_e	add	fp, #20
1f3e0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f3e4     14 4E 85 A1 |  if_e	sub	fp, #20
1f3e8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f3ec     40 00 90 5D |  if_ne	jmp	#LR__2495
1f3f0     A7 12 02 FB | 	rdlong	arg01, fp
1f3f4     09 13 52 F6 | 	abs	arg01, arg01 wc
1f3f8     1F 2E C6 C9 |  if_b	decod	local05, #31
1f3fc     00 2E 06 36 |  if_ae	mov	local05, #0
1f400     88 95 B0 FD | 	call	#__system___float_fromuns
1f404     17 FB 61 F5 | 	xor	result1, local05
1f408     FD 12 02 F6 | 	mov	arg01, result1
1f40c     0C 4E 05 F1 | 	add	fp, #12
1f410     A7 14 02 FB | 	rdlong	arg02, fp
1f414     0C 4E 85 F1 | 	sub	fp, #12
1f418     74 99 B0 FD | 	call	#__system___float_mul
1f41c     A7 FA 61 FC | 	wrlong	result1, fp
1f420     08 4E 05 F1 | 	add	fp, #8
1f424     A7 3C 68 FC | 	wrlong	#30, fp
1f428     08 4E 85 F1 | 	sub	fp, #8
1f42c     28 01 90 FD | 	jmp	#LR__2499
1f430                 | LR__2495
1f430                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1f430     08 4E 05 F1 | 	add	fp, #8
1f434     A7 26 02 FB | 	rdlong	local01, fp
1f438     08 4E 85 F1 | 	sub	fp, #8
1f43c     1E 26 0E F2 | 	cmp	local01, #30 wz
1f440     14 4E 05 A1 |  if_e	add	fp, #20
1f444     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f448     14 4E 85 A1 |  if_e	sub	fp, #20
1f44c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f450     28 00 90 5D |  if_ne	jmp	#LR__2496
1f454     A7 26 02 FB | 	rdlong	local01, fp
1f458     0C 4E 05 F1 | 	add	fp, #12
1f45c     A7 12 02 FB | 	rdlong	arg01, fp
1f460     0C 4E 85 F1 | 	sub	fp, #12
1f464     24 95 B0 FD | 	call	#__system___float_fromuns
1f468     FD 14 02 F6 | 	mov	arg02, result1
1f46c     13 13 02 F6 | 	mov	arg01, local01
1f470     1C 99 B0 FD | 	call	#__system___float_mul
1f474     A7 FA 61 FC | 	wrlong	result1, fp
1f478     DC 00 90 FD | 	jmp	#LR__2499
1f47c                 | LR__2496
1f47c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1f47c     08 4E 05 F1 | 	add	fp, #8
1f480     A7 26 02 FB | 	rdlong	local01, fp
1f484     08 4E 85 F1 | 	sub	fp, #8
1f488     1E 26 0E F2 | 	cmp	local01, #30 wz
1f48c     14 4E 05 A1 |  if_e	add	fp, #20
1f490     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f494     14 4E 85 A1 |  if_e	sub	fp, #20
1f498     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f49c     38 00 90 5D |  if_ne	jmp	#LR__2497
1f4a0     A7 26 02 FB | 	rdlong	local01, fp
1f4a4     0C 4E 05 F1 | 	add	fp, #12
1f4a8     A7 12 02 FB | 	rdlong	arg01, fp
1f4ac     0C 4E 85 F1 | 	sub	fp, #12
1f4b0     09 13 52 F6 | 	abs	arg01, arg01 wc
1f4b4     1F 2E C6 C9 |  if_b	decod	local05, #31
1f4b8     00 2E 06 36 |  if_ae	mov	local05, #0
1f4bc     CC 94 B0 FD | 	call	#__system___float_fromuns
1f4c0     17 FB 61 F5 | 	xor	result1, local05
1f4c4     FD 14 02 F6 | 	mov	arg02, result1
1f4c8     13 13 02 F6 | 	mov	arg01, local01
1f4cc     C0 98 B0 FD | 	call	#__system___float_mul
1f4d0     A7 FA 61 FC | 	wrlong	result1, fp
1f4d4     80 00 90 FD | 	jmp	#LR__2499
1f4d8                 | LR__2497
1f4d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1f4d8     08 4E 05 F1 | 	add	fp, #8
1f4dc     A7 26 02 FB | 	rdlong	local01, fp
1f4e0     08 4E 85 F1 | 	sub	fp, #8
1f4e4     1E 26 0E F2 | 	cmp	local01, #30 wz
1f4e8     14 4E 05 A1 |  if_e	add	fp, #20
1f4ec     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f4f0     14 4E 85 A1 |  if_e	sub	fp, #20
1f4f4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f4f8     1C 00 90 5D |  if_ne	jmp	#LR__2498
1f4fc     A7 12 02 FB | 	rdlong	arg01, fp
1f500     0C 4E 05 F1 | 	add	fp, #12
1f504     A7 14 02 FB | 	rdlong	arg02, fp
1f508     0C 4E 85 F1 | 	sub	fp, #12
1f50c     80 98 B0 FD | 	call	#__system___float_mul
1f510     A7 FA 61 FC | 	wrlong	result1, fp
1f514     40 00 90 FD | 	jmp	#LR__2499
1f518                 | LR__2498
1f518                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1f518     08 4E 05 F1 | 	add	fp, #8
1f51c     A7 26 02 FB | 	rdlong	local01, fp
1f520     08 4E 85 F1 | 	sub	fp, #8
1f524     1F 26 0E F2 | 	cmp	local01, #31 wz
1f528     14 4E 05 51 |  if_ne	add	fp, #20
1f52c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1f530     14 4E 85 51 |  if_ne	sub	fp, #20
1f534     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1f538     A7 10 68 AC |  if_e	wrlong	#8, fp
1f53c     08 4E 05 A1 |  if_e	add	fp, #8
1f540     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f544     08 4E 85 A1 |  if_e	sub	fp, #8
1f548     A7 12 68 5C |  if_ne	wrlong	#9, fp
1f54c     08 4E 05 51 |  if_ne	add	fp, #8
1f550     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1f554     08 4E 85 51 |  if_ne	sub	fp, #8
1f558                 | LR__2499
1f558     A7 12 02 F6 | 	mov	arg01, fp
1f55c     18 DE BE FD | 	call	#_push
1f560     A7 F0 03 F6 | 	mov	ptra, fp
1f564     B2 00 A0 FD | 	call	#popregs_
1f568                 | _do_mul_ret
1f568     2D 00 64 FD | 	ret
1f56c                 | 
1f56c                 | ' 
1f56c                 | ' '--------------------------------- not equal (<>)
1f56c                 | ' 
1f56c                 | ' sub do_ne
1f56c                 | _do_ne
1f56c     05 4A 05 F6 | 	mov	COUNT_, #5
1f570     A8 00 A0 FD | 	call	#pushregs_
1f574     18 F0 07 F1 | 	add	ptra, #24
1f578     64 DD BE FD | 	call	#_pop
1f57c     FD 26 02 F6 | 	mov	local01, result1
1f580     FE 28 02 F6 | 	mov	local02, result2
1f584     FF 2A 02 F6 | 	mov	local03, result3
1f588     0C 4E 05 F1 | 	add	fp, #12
1f58c     A7 26 62 FC | 	wrlong	local01, fp
1f590     04 4E 05 F1 | 	add	fp, #4
1f594     A7 28 62 FC | 	wrlong	local02, fp
1f598     04 4E 05 F1 | 	add	fp, #4
1f59c     A7 2A 62 FC | 	wrlong	local03, fp
1f5a0     14 4E 85 F1 | 	sub	fp, #20
1f5a4     38 DD BE FD | 	call	#_pop
1f5a8     FF 2A 02 F6 | 	mov	local03, result3
1f5ac     A7 FA 61 FC | 	wrlong	result1, fp
1f5b0     04 4E 05 F1 | 	add	fp, #4
1f5b4     A7 FC 61 FC | 	wrlong	result2, fp
1f5b8     04 4E 05 F1 | 	add	fp, #4
1f5bc     A7 2A 62 FC | 	wrlong	local03, fp
1f5c0                 | ' 
1f5c0                 | ' t2=pop()
1f5c0                 | ' t1=pop()
1f5c0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1f5c0     08 4E 85 F1 | 	sub	fp, #8
1f5c4     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f5c8     14 4E 05 A1 |  if_e	add	fp, #20
1f5cc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f5d0     14 4E 85 A1 |  if_e	sub	fp, #20
1f5d4     16 2B 02 A6 |  if_e	mov	local03, local04
1f5d8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f5dc     28 00 90 5D |  if_ne	jmp	#LR__2500
1f5e0     00 26 06 F6 | 	mov	local01, #0
1f5e4     A7 12 02 FB | 	rdlong	arg01, fp
1f5e8     0C 4E 05 F1 | 	add	fp, #12
1f5ec     A7 14 02 FB | 	rdlong	arg02, fp
1f5f0     0C 4E 85 F1 | 	sub	fp, #12
1f5f4     48 69 B0 FD | 	call	#__system___string_cmp
1f5f8     00 FA 0D F2 | 	cmp	result1, #0 wz
1f5fc     00 26 26 56 |  if_ne	not	local01, #0
1f600     A7 26 62 FC | 	wrlong	local01, fp
1f604     20 04 90 FD | 	jmp	#LR__2513
1f608                 | LR__2500
1f608                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1f608     08 4E 05 F1 | 	add	fp, #8
1f60c     A7 26 02 FB | 	rdlong	local01, fp
1f610     08 4E 85 F1 | 	sub	fp, #8
1f614     1E 26 0E F2 | 	cmp	local01, #30 wz
1f618     14 4E 05 A1 |  if_e	add	fp, #20
1f61c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f620     14 4E 85 A1 |  if_e	sub	fp, #20
1f624     16 2B 02 A6 |  if_e	mov	local03, local04
1f628     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f62c     2C 00 90 5D |  if_ne	jmp	#LR__2501
1f630     00 26 06 F6 | 	mov	local01, #0
1f634     A7 12 02 FB | 	rdlong	arg01, fp
1f638     0C 4E 05 F1 | 	add	fp, #12
1f63c     A7 14 02 FB | 	rdlong	arg02, fp
1f640     0C 4E 85 F1 | 	sub	fp, #12
1f644     01 16 06 F6 | 	mov	arg03, #1
1f648     78 9B B0 FD | 	call	#__system___float_cmp
1f64c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f650     00 26 26 56 |  if_ne	not	local01, #0
1f654     A7 26 62 FC | 	wrlong	local01, fp
1f658     CC 03 90 FD | 	jmp	#LR__2513
1f65c                 | LR__2501
1f65c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1f65c     08 4E 05 F1 | 	add	fp, #8
1f660     A7 26 02 FB | 	rdlong	local01, fp
1f664     08 4E 85 F1 | 	sub	fp, #8
1f668     1E 26 0E F2 | 	cmp	local01, #30 wz
1f66c     14 4E 05 A1 |  if_e	add	fp, #20
1f670     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f674     14 4E 85 A1 |  if_e	sub	fp, #20
1f678     16 2B 02 A6 |  if_e	mov	local03, local04
1f67c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f680     48 00 90 5D |  if_ne	jmp	#LR__2502
1f684     00 26 06 F6 | 	mov	local01, #0
1f688     A7 28 02 FB | 	rdlong	local02, fp
1f68c     0C 4E 05 F1 | 	add	fp, #12
1f690     A7 12 02 FB | 	rdlong	arg01, fp
1f694     0C 4E 85 F1 | 	sub	fp, #12
1f698     09 13 52 F6 | 	abs	arg01, arg01 wc
1f69c     1F 2E C6 C9 |  if_b	decod	local05, #31
1f6a0     00 2E 06 36 |  if_ae	mov	local05, #0
1f6a4     E4 92 B0 FD | 	call	#__system___float_fromuns
1f6a8     17 FB 61 F5 | 	xor	result1, local05
1f6ac     FD 14 02 F6 | 	mov	arg02, result1
1f6b0     14 13 02 F6 | 	mov	arg01, local02
1f6b4     01 16 06 F6 | 	mov	arg03, #1
1f6b8     08 9B B0 FD | 	call	#__system___float_cmp
1f6bc     00 FA 0D F2 | 	cmp	result1, #0 wz
1f6c0     00 26 26 56 |  if_ne	not	local01, #0
1f6c4     A7 26 62 FC | 	wrlong	local01, fp
1f6c8     5C 03 90 FD | 	jmp	#LR__2513
1f6cc                 | LR__2502
1f6cc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1f6cc     08 4E 05 F1 | 	add	fp, #8
1f6d0     A7 26 02 FB | 	rdlong	local01, fp
1f6d4     08 4E 85 F1 | 	sub	fp, #8
1f6d8     1E 26 0E F2 | 	cmp	local01, #30 wz
1f6dc     14 4E 05 A1 |  if_e	add	fp, #20
1f6e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f6e4     14 4E 85 A1 |  if_e	sub	fp, #20
1f6e8     16 2B 02 A6 |  if_e	mov	local03, local04
1f6ec     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f6f0     38 00 90 5D |  if_ne	jmp	#LR__2503
1f6f4     00 26 06 F6 | 	mov	local01, #0
1f6f8     A7 28 02 FB | 	rdlong	local02, fp
1f6fc     0C 4E 05 F1 | 	add	fp, #12
1f700     A7 12 02 FB | 	rdlong	arg01, fp
1f704     0C 4E 85 F1 | 	sub	fp, #12
1f708     80 92 B0 FD | 	call	#__system___float_fromuns
1f70c     FD 14 02 F6 | 	mov	arg02, result1
1f710     14 13 02 F6 | 	mov	arg01, local02
1f714     01 16 06 F6 | 	mov	arg03, #1
1f718     A8 9A B0 FD | 	call	#__system___float_cmp
1f71c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f720     00 26 26 56 |  if_ne	not	local01, #0
1f724     A7 26 62 FC | 	wrlong	local01, fp
1f728     FC 02 90 FD | 	jmp	#LR__2513
1f72c                 | LR__2503
1f72c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1f72c     08 4E 05 F1 | 	add	fp, #8
1f730     A7 26 02 FB | 	rdlong	local01, fp
1f734     08 4E 85 F1 | 	sub	fp, #8
1f738     1C 26 0E F2 | 	cmp	local01, #28 wz
1f73c     14 4E 05 A1 |  if_e	add	fp, #20
1f740     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f744     14 4E 85 A1 |  if_e	sub	fp, #20
1f748     16 2B 02 A6 |  if_e	mov	local03, local04
1f74c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f750     44 00 90 5D |  if_ne	jmp	#LR__2504
1f754     00 26 06 F6 | 	mov	local01, #0
1f758     A7 12 02 FB | 	rdlong	arg01, fp
1f75c     09 13 52 F6 | 	abs	arg01, arg01 wc
1f760     1F 2E C6 C9 |  if_b	decod	local05, #31
1f764     00 2E 06 36 |  if_ae	mov	local05, #0
1f768     20 92 B0 FD | 	call	#__system___float_fromuns
1f76c     17 FB 61 F5 | 	xor	result1, local05
1f770     FD 12 02 F6 | 	mov	arg01, result1
1f774     0C 4E 05 F1 | 	add	fp, #12
1f778     A7 14 02 FB | 	rdlong	arg02, fp
1f77c     0C 4E 85 F1 | 	sub	fp, #12
1f780     01 16 06 F6 | 	mov	arg03, #1
1f784     3C 9A B0 FD | 	call	#__system___float_cmp
1f788     00 FA 0D F2 | 	cmp	result1, #0 wz
1f78c     00 26 26 56 |  if_ne	not	local01, #0
1f790     A7 26 62 FC | 	wrlong	local01, fp
1f794     90 02 90 FD | 	jmp	#LR__2513
1f798                 | LR__2504
1f798                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1f798     08 4E 05 F1 | 	add	fp, #8
1f79c     A7 26 02 FB | 	rdlong	local01, fp
1f7a0     08 4E 85 F1 | 	sub	fp, #8
1f7a4     1C 26 0E F2 | 	cmp	local01, #28 wz
1f7a8     14 4E 05 A1 |  if_e	add	fp, #20
1f7ac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f7b0     14 4E 85 A1 |  if_e	sub	fp, #20
1f7b4     16 2B 02 A6 |  if_e	mov	local03, local04
1f7b8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f7bc     24 00 90 5D |  if_ne	jmp	#LR__2505
1f7c0     00 26 06 F6 | 	mov	local01, #0
1f7c4     A7 28 02 FB | 	rdlong	local02, fp
1f7c8     0C 4E 05 F1 | 	add	fp, #12
1f7cc     A7 2A 02 FB | 	rdlong	local03, fp
1f7d0     0C 4E 85 F1 | 	sub	fp, #12
1f7d4     15 29 0A F2 | 	cmp	local02, local03 wz
1f7d8     01 26 66 56 |  if_ne	neg	local01, #1
1f7dc     A7 26 62 FC | 	wrlong	local01, fp
1f7e0     44 02 90 FD | 	jmp	#LR__2513
1f7e4                 | LR__2505
1f7e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1f7e4     08 4E 05 F1 | 	add	fp, #8
1f7e8     A7 26 02 FB | 	rdlong	local01, fp
1f7ec     08 4E 85 F1 | 	sub	fp, #8
1f7f0     1C 26 0E F2 | 	cmp	local01, #28 wz
1f7f4     14 4E 05 A1 |  if_e	add	fp, #20
1f7f8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f7fc     14 4E 85 A1 |  if_e	sub	fp, #20
1f800     16 2B 02 A6 |  if_e	mov	local03, local04
1f804     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f808     24 00 90 5D |  if_ne	jmp	#LR__2506
1f80c     00 26 06 F6 | 	mov	local01, #0
1f810     A7 28 02 FB | 	rdlong	local02, fp
1f814     0C 4E 05 F1 | 	add	fp, #12
1f818     A7 2A 02 FB | 	rdlong	local03, fp
1f81c     0C 4E 85 F1 | 	sub	fp, #12
1f820     15 29 0A F2 | 	cmp	local02, local03 wz
1f824     01 26 66 56 |  if_ne	neg	local01, #1
1f828     A7 26 62 FC | 	wrlong	local01, fp
1f82c     F8 01 90 FD | 	jmp	#LR__2513
1f830                 | LR__2506
1f830                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1f830     08 4E 05 F1 | 	add	fp, #8
1f834     A7 26 02 FB | 	rdlong	local01, fp
1f838     08 4E 85 F1 | 	sub	fp, #8
1f83c     1D 26 0E F2 | 	cmp	local01, #29 wz
1f840     14 4E 05 A1 |  if_e	add	fp, #20
1f844     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f848     14 4E 85 A1 |  if_e	sub	fp, #20
1f84c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f850     34 00 90 5D |  if_ne	jmp	#LR__2507
1f854     00 26 06 F6 | 	mov	local01, #0
1f858     A7 12 02 FB | 	rdlong	arg01, fp
1f85c     2C 91 B0 FD | 	call	#__system___float_fromuns
1f860     FD 12 02 F6 | 	mov	arg01, result1
1f864     0C 4E 05 F1 | 	add	fp, #12
1f868     A7 14 02 FB | 	rdlong	arg02, fp
1f86c     0C 4E 85 F1 | 	sub	fp, #12
1f870     01 16 06 F6 | 	mov	arg03, #1
1f874     4C 99 B0 FD | 	call	#__system___float_cmp
1f878     00 FA 0D F2 | 	cmp	result1, #0 wz
1f87c     00 26 26 56 |  if_ne	not	local01, #0
1f880     A7 26 62 FC | 	wrlong	local01, fp
1f884     A0 01 90 FD | 	jmp	#LR__2513
1f888                 | LR__2507
1f888                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1f888     08 4E 05 F1 | 	add	fp, #8
1f88c     A7 26 02 FB | 	rdlong	local01, fp
1f890     08 4E 85 F1 | 	sub	fp, #8
1f894     1D 26 0E F2 | 	cmp	local01, #29 wz
1f898     14 4E 05 A1 |  if_e	add	fp, #20
1f89c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f8a0     14 4E 85 A1 |  if_e	sub	fp, #20
1f8a4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f8a8     24 00 90 5D |  if_ne	jmp	#LR__2508
1f8ac     00 26 06 F6 | 	mov	local01, #0
1f8b0     A7 28 02 FB | 	rdlong	local02, fp
1f8b4     0C 4E 05 F1 | 	add	fp, #12
1f8b8     A7 2A 02 FB | 	rdlong	local03, fp
1f8bc     0C 4E 85 F1 | 	sub	fp, #12
1f8c0     15 29 0A F2 | 	cmp	local02, local03 wz
1f8c4     01 26 66 56 |  if_ne	neg	local01, #1
1f8c8     A7 26 62 FC | 	wrlong	local01, fp
1f8cc     58 01 90 FD | 	jmp	#LR__2513
1f8d0                 | LR__2508
1f8d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1f8d0     08 4E 05 F1 | 	add	fp, #8
1f8d4     A7 26 02 FB | 	rdlong	local01, fp
1f8d8     08 4E 85 F1 | 	sub	fp, #8
1f8dc     1D 26 0E F2 | 	cmp	local01, #29 wz
1f8e0     14 4E 05 A1 |  if_e	add	fp, #20
1f8e4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f8e8     14 4E 85 A1 |  if_e	sub	fp, #20
1f8ec     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f8f0     24 00 90 5D |  if_ne	jmp	#LR__2509
1f8f4     00 26 06 F6 | 	mov	local01, #0
1f8f8     A7 28 02 FB | 	rdlong	local02, fp
1f8fc     0C 4E 05 F1 | 	add	fp, #12
1f900     A7 2A 02 FB | 	rdlong	local03, fp
1f904     0C 4E 85 F1 | 	sub	fp, #12
1f908     15 29 0A F2 | 	cmp	local02, local03 wz
1f90c     01 26 66 56 |  if_ne	neg	local01, #1
1f910     A7 26 62 FC | 	wrlong	local01, fp
1f914     10 01 90 FD | 	jmp	#LR__2513
1f918                 | LR__2509
1f918                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1f918     08 4E 05 F1 | 	add	fp, #8
1f91c     A7 26 02 FB | 	rdlong	local01, fp
1f920     08 4E 85 F1 | 	sub	fp, #8
1f924     2B 26 0E F2 | 	cmp	local01, #43 wz
1f928     14 4E 05 A1 |  if_e	add	fp, #20
1f92c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f930     14 4E 85 A1 |  if_e	sub	fp, #20
1f934     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f938     30 00 90 5D |  if_ne	jmp	#LR__2510
1f93c     00 26 06 F6 | 	mov	local01, #0
1f940     A7 12 02 FB | 	rdlong	arg01, fp
1f944     10 DB BE FD | 	call	#_convertstring
1f948     FD 12 02 F6 | 	mov	arg01, result1
1f94c     0C 4E 05 F1 | 	add	fp, #12
1f950     A7 14 02 FB | 	rdlong	arg02, fp
1f954     0C 4E 85 F1 | 	sub	fp, #12
1f958     E4 65 B0 FD | 	call	#__system___string_cmp
1f95c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f960     00 26 26 56 |  if_ne	not	local01, #0
1f964     A7 26 62 FC | 	wrlong	local01, fp
1f968     BC 00 90 FD | 	jmp	#LR__2513
1f96c                 | LR__2510
1f96c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1f96c     08 4E 05 F1 | 	add	fp, #8
1f970     A7 26 02 FB | 	rdlong	local01, fp
1f974     08 4E 85 F1 | 	sub	fp, #8
1f978     1F 26 0E F2 | 	cmp	local01, #31 wz
1f97c     14 4E 05 A1 |  if_e	add	fp, #20
1f980     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f984     14 4E 85 A1 |  if_e	sub	fp, #20
1f988     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f98c     34 00 90 5D |  if_ne	jmp	#LR__2511
1f990     00 26 06 F6 | 	mov	local01, #0
1f994     A7 28 02 FB | 	rdlong	local02, fp
1f998     0C 4E 05 F1 | 	add	fp, #12
1f99c     A7 12 02 FB | 	rdlong	arg01, fp
1f9a0     0C 4E 85 F1 | 	sub	fp, #12
1f9a4     B0 DA BE FD | 	call	#_convertstring
1f9a8     FD 14 02 F6 | 	mov	arg02, result1
1f9ac     14 13 02 F6 | 	mov	arg01, local02
1f9b0     8C 65 B0 FD | 	call	#__system___string_cmp
1f9b4     00 FA 0D F2 | 	cmp	result1, #0 wz
1f9b8     00 26 26 56 |  if_ne	not	local01, #0
1f9bc     A7 26 62 FC | 	wrlong	local01, fp
1f9c0     64 00 90 FD | 	jmp	#LR__2513
1f9c4                 | LR__2511
1f9c4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1f9c4     08 4E 05 F1 | 	add	fp, #8
1f9c8     A7 26 02 FB | 	rdlong	local01, fp
1f9cc     08 4E 85 F1 | 	sub	fp, #8
1f9d0     2B 26 0E F2 | 	cmp	local01, #43 wz
1f9d4     14 4E 05 A1 |  if_e	add	fp, #20
1f9d8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f9dc     14 4E 85 A1 |  if_e	sub	fp, #20
1f9e0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f9e4     3C 00 90 5D |  if_ne	jmp	#LR__2512
1f9e8     00 26 06 F6 | 	mov	local01, #0
1f9ec     A7 12 02 FB | 	rdlong	arg01, fp
1f9f0     64 DA BE FD | 	call	#_convertstring
1f9f4     FD 28 02 F6 | 	mov	local02, result1
1f9f8     0C 4E 05 F1 | 	add	fp, #12
1f9fc     A7 12 02 FB | 	rdlong	arg01, fp
1fa00     0C 4E 85 F1 | 	sub	fp, #12
1fa04     50 DA BE FD | 	call	#_convertstring
1fa08     FD 14 02 F6 | 	mov	arg02, result1
1fa0c     14 13 02 F6 | 	mov	arg01, local02
1fa10     2C 65 B0 FD | 	call	#__system___string_cmp
1fa14     00 FA 0D F2 | 	cmp	result1, #0 wz
1fa18     00 26 26 56 |  if_ne	not	local01, #0
1fa1c     A7 26 62 FC | 	wrlong	local01, fp
1fa20     04 00 90 FD | 	jmp	#LR__2513
1fa24                 | LR__2512
1fa24     A7 00 68 FC | 	wrlong	#0, fp
1fa28                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1fa28                 | LR__2513
1fa28     08 4E 05 F1 | 	add	fp, #8
1fa2c     A7 38 68 FC | 	wrlong	#28, fp
1fa30     08 4E 85 F1 | 	sub	fp, #8
1fa34     A7 12 02 F6 | 	mov	arg01, fp
1fa38     3C D9 BE FD | 	call	#_push
1fa3c     A7 F0 03 F6 | 	mov	ptra, fp
1fa40     B2 00 A0 FD | 	call	#popregs_
1fa44                 | _do_ne_ret
1fa44     2D 00 64 FD | 	ret
1fa48                 | 
1fa48                 | ' 
1fa48                 | ' '--------------------------------- OR
1fa48                 | ' 
1fa48                 | ' sub do_or 
1fa48                 | _do_or
1fa48     03 4A 05 F6 | 	mov	COUNT_, #3
1fa4c     A8 00 A0 FD | 	call	#pushregs_
1fa50     18 F0 07 F1 | 	add	ptra, #24
1fa54     88 D8 BE FD | 	call	#_pop
1fa58     FD 12 02 F6 | 	mov	arg01, result1
1fa5c     FE 26 02 F6 | 	mov	local01, result2
1fa60     FF 28 02 F6 | 	mov	local02, result3
1fa64     0C 4E 05 F1 | 	add	fp, #12
1fa68     A7 12 62 FC | 	wrlong	arg01, fp
1fa6c     04 4E 05 F1 | 	add	fp, #4
1fa70     A7 26 62 FC | 	wrlong	local01, fp
1fa74     04 4E 05 F1 | 	add	fp, #4
1fa78     A7 28 62 FC | 	wrlong	local02, fp
1fa7c     14 4E 85 F1 | 	sub	fp, #20
1fa80     5C D8 BE FD | 	call	#_pop
1fa84     FF 2A 02 F6 | 	mov	local03, result3
1fa88     A7 FA 61 FC | 	wrlong	result1, fp
1fa8c     04 4E 05 F1 | 	add	fp, #4
1fa90     A7 FC 61 FC | 	wrlong	result2, fp
1fa94     04 4E 05 F1 | 	add	fp, #4
1fa98     A7 2A 62 FC | 	wrlong	local03, fp
1fa9c                 | ' 
1fa9c                 | ' t2=pop()
1fa9c                 | ' t1=pop()
1fa9c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1fa9c     08 4E 85 F1 | 	sub	fp, #8
1faa0     1C 2A 0E F2 | 	cmp	local03, #28 wz
1faa4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1faa8     A7 2A 62 AC |  if_e	wrlong	local03, fp
1faac     08 4E 05 A1 |  if_e	add	fp, #8
1fab0     A7 3A 68 AC |  if_e	wrlong	#29, fp
1fab4     08 4E 85 A1 |  if_e	sub	fp, #8
1fab8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1fab8     14 4E 05 F1 | 	add	fp, #20
1fabc     A7 2A 02 FB | 	rdlong	local03, fp
1fac0     14 4E 85 F1 | 	sub	fp, #20
1fac4     1C 2A 0E F2 | 	cmp	local03, #28 wz
1fac8     18 00 90 5D |  if_ne	jmp	#LR__2520
1facc     0C 4E 05 F1 | 	add	fp, #12
1fad0     A7 2A 02 FB | 	rdlong	local03, fp
1fad4     A7 2A 62 FC | 	wrlong	local03, fp
1fad8     08 4E 05 F1 | 	add	fp, #8
1fadc     A7 3A 68 FC | 	wrlong	#29, fp
1fae0     14 4E 85 F1 | 	sub	fp, #20
1fae4                 | LR__2520
1fae4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1fae4     08 4E 05 F1 | 	add	fp, #8
1fae8     A7 2A 02 FB | 	rdlong	local03, fp
1faec     08 4E 85 F1 | 	sub	fp, #8
1faf0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1faf4     14 4E 05 51 |  if_ne	add	fp, #20
1faf8     A7 28 02 5B |  if_ne	rdlong	local02, fp
1fafc     14 4E 85 51 |  if_ne	sub	fp, #20
1fb00     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1fb04     08 4E 05 51 |  if_ne	add	fp, #8
1fb08     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1fb0c     08 4E 85 51 |  if_ne	sub	fp, #8
1fb10     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1fb14     14 4E 05 51 |  if_ne	add	fp, #20
1fb18     14 4E 85 51 |  if_ne	sub	fp, #20
1fb1c     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1fb20     A7 0C 68 AC |  if_e	wrlong	#6, fp
1fb24     08 4E 05 A1 |  if_e	add	fp, #8
1fb28     A7 FE 69 AC |  if_e	wrlong	#255, fp
1fb2c     08 4E 85 A1 |  if_e	sub	fp, #8
1fb30     18 00 90 AD |  if_e	jmp	#LR__2521
1fb34     A7 2A 02 FB | 	rdlong	local03, fp
1fb38     0C 4E 05 F1 | 	add	fp, #12
1fb3c     A7 26 02 FB | 	rdlong	local01, fp
1fb40     0C 4E 85 F1 | 	sub	fp, #12
1fb44     13 2B 42 F5 | 	or	local03, local01
1fb48     A7 2A 62 FC | 	wrlong	local03, fp
1fb4c                 | LR__2521
1fb4c     A7 12 02 F6 | 	mov	arg01, fp
1fb50     24 D8 BE FD | 	call	#_push
1fb54     A7 F0 03 F6 | 	mov	ptra, fp
1fb58     B2 00 A0 FD | 	call	#popregs_
1fb5c                 | _do_or_ret
1fb5c     2D 00 64 FD | 	ret
1fb60                 | 
1fb60                 | ' 
1fb60                 | ' '--------------------------------- plus (+)
1fb60                 | ' 
1fb60                 | ' sub do_plus 
1fb60                 | _do_plus
1fb60     05 4A 05 F6 | 	mov	COUNT_, #5
1fb64     A8 00 A0 FD | 	call	#pushregs_
1fb68     18 F0 07 F1 | 	add	ptra, #24
1fb6c     70 D7 BE FD | 	call	#_pop
1fb70     FD 26 02 F6 | 	mov	local01, result1
1fb74     FE 28 02 F6 | 	mov	local02, result2
1fb78     FF 2A 02 F6 | 	mov	local03, result3
1fb7c     0C 4E 05 F1 | 	add	fp, #12
1fb80     A7 26 62 FC | 	wrlong	local01, fp
1fb84     04 4E 05 F1 | 	add	fp, #4
1fb88     A7 28 62 FC | 	wrlong	local02, fp
1fb8c     04 4E 05 F1 | 	add	fp, #4
1fb90     A7 2A 62 FC | 	wrlong	local03, fp
1fb94     14 4E 85 F1 | 	sub	fp, #20
1fb98     44 D7 BE FD | 	call	#_pop
1fb9c     FF 2A 02 F6 | 	mov	local03, result3
1fba0     A7 FA 61 FC | 	wrlong	result1, fp
1fba4     04 4E 05 F1 | 	add	fp, #4
1fba8     A7 FC 61 FC | 	wrlong	result2, fp
1fbac     04 4E 05 F1 | 	add	fp, #4
1fbb0     A7 2A 62 FC | 	wrlong	local03, fp
1fbb4                 | ' 
1fbb4                 | ' t2=pop()
1fbb4                 | ' t1=pop()
1fbb4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1fbb4     08 4E 85 F1 | 	sub	fp, #8
1fbb8     1D 2A 0E F2 | 	cmp	local03, #29 wz
1fbbc     14 4E 05 A1 |  if_e	add	fp, #20
1fbc0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fbc4     14 4E 85 A1 |  if_e	sub	fp, #20
1fbc8     16 2B 02 A6 |  if_e	mov	local03, local04
1fbcc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fbd0     1C 00 90 5D |  if_ne	jmp	#LR__2530
1fbd4     A7 26 02 FB | 	rdlong	local01, fp
1fbd8     0C 4E 05 F1 | 	add	fp, #12
1fbdc     A7 28 02 FB | 	rdlong	local02, fp
1fbe0     0C 4E 85 F1 | 	sub	fp, #12
1fbe4     14 27 02 F1 | 	add	local01, local02
1fbe8     A7 26 62 FC | 	wrlong	local01, fp
1fbec     48 04 90 FD | 	jmp	#LR__2545
1fbf0                 | LR__2530
1fbf0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1fbf0     08 4E 05 F1 | 	add	fp, #8
1fbf4     A7 26 02 FB | 	rdlong	local01, fp
1fbf8     08 4E 85 F1 | 	sub	fp, #8
1fbfc     1D 26 0E F2 | 	cmp	local01, #29 wz
1fc00     14 4E 05 A1 |  if_e	add	fp, #20
1fc04     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fc08     14 4E 85 A1 |  if_e	sub	fp, #20
1fc0c     16 2B 02 A6 |  if_e	mov	local03, local04
1fc10     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fc14     28 00 90 5D |  if_ne	jmp	#LR__2531
1fc18     A7 26 02 FB | 	rdlong	local01, fp
1fc1c     0C 4E 05 F1 | 	add	fp, #12
1fc20     A7 28 02 FB | 	rdlong	local02, fp
1fc24     0C 4E 85 F1 | 	sub	fp, #12
1fc28     14 27 02 F1 | 	add	local01, local02
1fc2c     A7 26 62 FC | 	wrlong	local01, fp
1fc30     08 4E 05 F1 | 	add	fp, #8
1fc34     A7 38 68 FC | 	wrlong	#28, fp
1fc38     08 4E 85 F1 | 	sub	fp, #8
1fc3c     F8 03 90 FD | 	jmp	#LR__2545
1fc40                 | LR__2531
1fc40                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1fc40     08 4E 05 F1 | 	add	fp, #8
1fc44     A7 26 02 FB | 	rdlong	local01, fp
1fc48     08 4E 85 F1 | 	sub	fp, #8
1fc4c     1D 26 0E F2 | 	cmp	local01, #29 wz
1fc50     14 4E 05 A1 |  if_e	add	fp, #20
1fc54     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fc58     14 4E 85 A1 |  if_e	sub	fp, #20
1fc5c     16 2B 02 A6 |  if_e	mov	local03, local04
1fc60     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fc64     30 00 90 5D |  if_ne	jmp	#LR__2532
1fc68     A7 12 02 FB | 	rdlong	arg01, fp
1fc6c     1C 8D B0 FD | 	call	#__system___float_fromuns
1fc70     FD 12 02 F6 | 	mov	arg01, result1
1fc74     0C 4E 05 F1 | 	add	fp, #12
1fc78     A7 14 02 FB | 	rdlong	arg02, fp
1fc7c     0C 4E 85 F1 | 	sub	fp, #12
1fc80     3C 8D B0 FD | 	call	#__system___float_add
1fc84     A7 FA 61 FC | 	wrlong	result1, fp
1fc88     08 4E 05 F1 | 	add	fp, #8
1fc8c     A7 3C 68 FC | 	wrlong	#30, fp
1fc90     08 4E 85 F1 | 	sub	fp, #8
1fc94     A0 03 90 FD | 	jmp	#LR__2545
1fc98                 | LR__2532
1fc98                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1fc98     08 4E 05 F1 | 	add	fp, #8
1fc9c     A7 26 02 FB | 	rdlong	local01, fp
1fca0     08 4E 85 F1 | 	sub	fp, #8
1fca4     1C 26 0E F2 | 	cmp	local01, #28 wz
1fca8     14 4E 05 A1 |  if_e	add	fp, #20
1fcac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fcb0     14 4E 85 A1 |  if_e	sub	fp, #20
1fcb4     16 2B 02 A6 |  if_e	mov	local03, local04
1fcb8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fcbc     1C 00 90 5D |  if_ne	jmp	#LR__2533
1fcc0     A7 26 02 FB | 	rdlong	local01, fp
1fcc4     0C 4E 05 F1 | 	add	fp, #12
1fcc8     A7 28 02 FB | 	rdlong	local02, fp
1fccc     0C 4E 85 F1 | 	sub	fp, #12
1fcd0     14 27 02 F1 | 	add	local01, local02
1fcd4     A7 26 62 FC | 	wrlong	local01, fp
1fcd8     5C 03 90 FD | 	jmp	#LR__2545
1fcdc                 | LR__2533
1fcdc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1fcdc     08 4E 05 F1 | 	add	fp, #8
1fce0     A7 26 02 FB | 	rdlong	local01, fp
1fce4     08 4E 85 F1 | 	sub	fp, #8
1fce8     1C 26 0E F2 | 	cmp	local01, #28 wz
1fcec     14 4E 05 A1 |  if_e	add	fp, #20
1fcf0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fcf4     14 4E 85 A1 |  if_e	sub	fp, #20
1fcf8     16 2B 02 A6 |  if_e	mov	local03, local04
1fcfc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fd00     1C 00 90 5D |  if_ne	jmp	#LR__2534
1fd04     A7 26 02 FB | 	rdlong	local01, fp
1fd08     0C 4E 05 F1 | 	add	fp, #12
1fd0c     A7 28 02 FB | 	rdlong	local02, fp
1fd10     0C 4E 85 F1 | 	sub	fp, #12
1fd14     14 27 02 F1 | 	add	local01, local02
1fd18     A7 26 62 FC | 	wrlong	local01, fp
1fd1c     18 03 90 FD | 	jmp	#LR__2545
1fd20                 | LR__2534
1fd20                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1fd20     08 4E 05 F1 | 	add	fp, #8
1fd24     A7 26 02 FB | 	rdlong	local01, fp
1fd28     08 4E 85 F1 | 	sub	fp, #8
1fd2c     1C 26 0E F2 | 	cmp	local01, #28 wz
1fd30     14 4E 05 A1 |  if_e	add	fp, #20
1fd34     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fd38     14 4E 85 A1 |  if_e	sub	fp, #20
1fd3c     16 2B 02 A6 |  if_e	mov	local03, local04
1fd40     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fd44     40 00 90 5D |  if_ne	jmp	#LR__2535
1fd48     A7 12 02 FB | 	rdlong	arg01, fp
1fd4c     09 13 52 F6 | 	abs	arg01, arg01 wc
1fd50     1F 2E C6 C9 |  if_b	decod	local05, #31
1fd54     00 2E 06 36 |  if_ae	mov	local05, #0
1fd58     30 8C B0 FD | 	call	#__system___float_fromuns
1fd5c     17 FB 61 F5 | 	xor	result1, local05
1fd60     FD 12 02 F6 | 	mov	arg01, result1
1fd64     0C 4E 05 F1 | 	add	fp, #12
1fd68     A7 14 02 FB | 	rdlong	arg02, fp
1fd6c     0C 4E 85 F1 | 	sub	fp, #12
1fd70     4C 8C B0 FD | 	call	#__system___float_add
1fd74     A7 FA 61 FC | 	wrlong	result1, fp
1fd78     08 4E 05 F1 | 	add	fp, #8
1fd7c     A7 3C 68 FC | 	wrlong	#30, fp
1fd80     08 4E 85 F1 | 	sub	fp, #8
1fd84     B0 02 90 FD | 	jmp	#LR__2545
1fd88                 | LR__2535
1fd88                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1fd88     08 4E 05 F1 | 	add	fp, #8
1fd8c     A7 26 02 FB | 	rdlong	local01, fp
1fd90     08 4E 85 F1 | 	sub	fp, #8
1fd94     1E 26 0E F2 | 	cmp	local01, #30 wz
1fd98     14 4E 05 A1 |  if_e	add	fp, #20
1fd9c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fda0     14 4E 85 A1 |  if_e	sub	fp, #20
1fda4     16 2B 02 A6 |  if_e	mov	local03, local04
1fda8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fdac     28 00 90 5D |  if_ne	jmp	#LR__2536
1fdb0     A7 26 02 FB | 	rdlong	local01, fp
1fdb4     0C 4E 05 F1 | 	add	fp, #12
1fdb8     A7 12 02 FB | 	rdlong	arg01, fp
1fdbc     0C 4E 85 F1 | 	sub	fp, #12
1fdc0     C8 8B B0 FD | 	call	#__system___float_fromuns
1fdc4     FD 14 02 F6 | 	mov	arg02, result1
1fdc8     13 13 02 F6 | 	mov	arg01, local01
1fdcc     F0 8B B0 FD | 	call	#__system___float_add
1fdd0     A7 FA 61 FC | 	wrlong	result1, fp
1fdd4     60 02 90 FD | 	jmp	#LR__2545
1fdd8                 | LR__2536
1fdd8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1fdd8     08 4E 05 F1 | 	add	fp, #8
1fddc     A7 26 02 FB | 	rdlong	local01, fp
1fde0     08 4E 85 F1 | 	sub	fp, #8
1fde4     1E 26 0E F2 | 	cmp	local01, #30 wz
1fde8     14 4E 05 A1 |  if_e	add	fp, #20
1fdec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fdf0     14 4E 85 A1 |  if_e	sub	fp, #20
1fdf4     16 2B 02 A6 |  if_e	mov	local03, local04
1fdf8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fdfc     38 00 90 5D |  if_ne	jmp	#LR__2537
1fe00     A7 26 02 FB | 	rdlong	local01, fp
1fe04     0C 4E 05 F1 | 	add	fp, #12
1fe08     A7 12 02 FB | 	rdlong	arg01, fp
1fe0c     0C 4E 85 F1 | 	sub	fp, #12
1fe10     09 13 52 F6 | 	abs	arg01, arg01 wc
1fe14     1F 2E C6 C9 |  if_b	decod	local05, #31
1fe18     00 2E 06 36 |  if_ae	mov	local05, #0
1fe1c     6C 8B B0 FD | 	call	#__system___float_fromuns
1fe20     17 FB 61 F5 | 	xor	result1, local05
1fe24     FD 14 02 F6 | 	mov	arg02, result1
1fe28     13 13 02 F6 | 	mov	arg01, local01
1fe2c     90 8B B0 FD | 	call	#__system___float_add
1fe30     A7 FA 61 FC | 	wrlong	result1, fp
1fe34     00 02 90 FD | 	jmp	#LR__2545
1fe38                 | LR__2537
1fe38                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1fe38     08 4E 05 F1 | 	add	fp, #8
1fe3c     A7 26 02 FB | 	rdlong	local01, fp
1fe40     08 4E 85 F1 | 	sub	fp, #8
1fe44     1E 26 0E F2 | 	cmp	local01, #30 wz
1fe48     14 4E 05 A1 |  if_e	add	fp, #20
1fe4c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fe50     14 4E 85 A1 |  if_e	sub	fp, #20
1fe54     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1fe58     1C 00 90 5D |  if_ne	jmp	#LR__2538
1fe5c     A7 12 02 FB | 	rdlong	arg01, fp
1fe60     0C 4E 05 F1 | 	add	fp, #12
1fe64     A7 14 02 FB | 	rdlong	arg02, fp
1fe68     0C 4E 85 F1 | 	sub	fp, #12
1fe6c     50 8B B0 FD | 	call	#__system___float_add
1fe70     A7 FA 61 FC | 	wrlong	result1, fp
1fe74     C0 01 90 FD | 	jmp	#LR__2545
1fe78                 | LR__2538
1fe78                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1fe78     08 4E 05 F1 | 	add	fp, #8
1fe7c     A7 26 02 FB | 	rdlong	local01, fp
1fe80     08 4E 85 F1 | 	sub	fp, #8
1fe84     1F 26 0E F2 | 	cmp	local01, #31 wz
1fe88     24 00 90 5D |  if_ne	jmp	#LR__2539
1fe8c     14 4E 05 F1 | 	add	fp, #20
1fe90     A7 2A 02 FB | 	rdlong	local03, fp
1fe94     14 4E 85 F1 | 	sub	fp, #20
1fe98     1F 2A 0E F2 | 	cmp	local03, #31 wz
1fe9c     A7 04 68 5C |  if_ne	wrlong	#2, fp
1fea0     08 4E 05 51 |  if_ne	add	fp, #8
1fea4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1fea8     08 4E 85 51 |  if_ne	sub	fp, #8
1feac     88 01 90 5D |  if_ne	jmp	#LR__2545
1feb0                 | LR__2539
1feb0                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1feb0     14 4E 05 F1 | 	add	fp, #20
1feb4     A7 26 02 FB | 	rdlong	local01, fp
1feb8     14 4E 85 F1 | 	sub	fp, #20
1febc     1F 26 0E F2 | 	cmp	local01, #31 wz
1fec0     24 00 90 5D |  if_ne	jmp	#LR__2540
1fec4     08 4E 05 F1 | 	add	fp, #8
1fec8     A7 2A 02 FB | 	rdlong	local03, fp
1fecc     08 4E 85 F1 | 	sub	fp, #8
1fed0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1fed4     A7 04 68 5C |  if_ne	wrlong	#2, fp
1fed8     08 4E 05 51 |  if_ne	add	fp, #8
1fedc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1fee0     08 4E 85 51 |  if_ne	sub	fp, #8
1fee4     50 01 90 5D |  if_ne	jmp	#LR__2545
1fee8                 | LR__2540
1fee8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1fee8     08 4E 05 F1 | 	add	fp, #8
1feec     A7 26 02 FB | 	rdlong	local01, fp
1fef0     08 4E 85 F1 | 	sub	fp, #8
1fef4     1F 26 0E F2 | 	cmp	local01, #31 wz
1fef8     14 4E 05 A1 |  if_e	add	fp, #20
1fefc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ff00     14 4E 85 A1 |  if_e	sub	fp, #20
1ff04     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ff08     1C 00 90 5D |  if_ne	jmp	#LR__2541
1ff0c     A7 12 02 FB | 	rdlong	arg01, fp
1ff10     0C 4E 05 F1 | 	add	fp, #12
1ff14     A7 14 02 FB | 	rdlong	arg02, fp
1ff18     0C 4E 85 F1 | 	sub	fp, #12
1ff1c     54 60 B0 FD | 	call	#__system___string_concat
1ff20     A7 FA 61 FC | 	wrlong	result1, fp
1ff24     10 01 90 FD | 	jmp	#LR__2545
1ff28                 | LR__2541
1ff28                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1ff28     08 4E 05 F1 | 	add	fp, #8
1ff2c     A7 26 02 FB | 	rdlong	local01, fp
1ff30     08 4E 85 F1 | 	sub	fp, #8
1ff34     2B 26 0E F2 | 	cmp	local01, #43 wz
1ff38     14 4E 05 A1 |  if_e	add	fp, #20
1ff3c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ff40     14 4E 85 A1 |  if_e	sub	fp, #20
1ff44     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ff48     30 00 90 5D |  if_ne	jmp	#LR__2542
1ff4c     A7 12 02 FB | 	rdlong	arg01, fp
1ff50     04 D5 BE FD | 	call	#_convertstring
1ff54     FD 12 02 F6 | 	mov	arg01, result1
1ff58     0C 4E 05 F1 | 	add	fp, #12
1ff5c     A7 14 02 FB | 	rdlong	arg02, fp
1ff60     0C 4E 85 F1 | 	sub	fp, #12
1ff64     0C 60 B0 FD | 	call	#__system___string_concat
1ff68     A7 FA 61 FC | 	wrlong	result1, fp
1ff6c     08 4E 05 F1 | 	add	fp, #8
1ff70     A7 3E 68 FC | 	wrlong	#31, fp
1ff74     08 4E 85 F1 | 	sub	fp, #8
1ff78     BC 00 90 FD | 	jmp	#LR__2545
1ff7c                 | LR__2542
1ff7c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1ff7c     08 4E 05 F1 | 	add	fp, #8
1ff80     A7 26 02 FB | 	rdlong	local01, fp
1ff84     08 4E 85 F1 | 	sub	fp, #8
1ff88     1F 26 0E F2 | 	cmp	local01, #31 wz
1ff8c     14 4E 05 A1 |  if_e	add	fp, #20
1ff90     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ff94     14 4E 85 A1 |  if_e	sub	fp, #20
1ff98     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ff9c     28 00 90 5D |  if_ne	jmp	#LR__2543
1ffa0     A7 26 02 FB | 	rdlong	local01, fp
1ffa4     0C 4E 05 F1 | 	add	fp, #12
1ffa8     A7 12 02 FB | 	rdlong	arg01, fp
1ffac     0C 4E 85 F1 | 	sub	fp, #12
1ffb0     A4 D4 BE FD | 	call	#_convertstring
1ffb4     FD 14 02 F6 | 	mov	arg02, result1
1ffb8     13 13 02 F6 | 	mov	arg01, local01
1ffbc     B4 5F B0 FD | 	call	#__system___string_concat
1ffc0     A7 FA 61 FC | 	wrlong	result1, fp
1ffc4     70 00 90 FD | 	jmp	#LR__2545
1ffc8                 | LR__2543
1ffc8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1ffc8     08 4E 05 F1 | 	add	fp, #8
1ffcc     A7 26 02 FB | 	rdlong	local01, fp
1ffd0     08 4E 85 F1 | 	sub	fp, #8
1ffd4     2B 26 0E F2 | 	cmp	local01, #43 wz
1ffd8     14 4E 05 A1 |  if_e	add	fp, #20
1ffdc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ffe0     14 4E 85 A1 |  if_e	sub	fp, #20
1ffe4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ffe8     3C 00 90 5D |  if_ne	jmp	#LR__2544
1ffec     A7 12 02 FB | 	rdlong	arg01, fp
1fff0     64 D4 BE FD | 	call	#_convertstring
1fff4     FD 26 02 F6 | 	mov	local01, result1
1fff8     0C 4E 05 F1 | 	add	fp, #12
1fffc     A7 12 02 FB | 	rdlong	arg01, fp
20000     0C 4E 85 F1 | 	sub	fp, #12
20004     50 D4 BE FD | 	call	#_convertstring
20008     FD 14 02 F6 | 	mov	arg02, result1
2000c     13 13 02 F6 | 	mov	arg01, local01
20010     60 5F B0 FD | 	call	#__system___string_concat
20014     A7 FA 61 FC | 	wrlong	result1, fp
20018     08 4E 05 F1 | 	add	fp, #8
2001c     A7 3E 68 FC | 	wrlong	#31, fp
20020     08 4E 85 F1 | 	sub	fp, #8
20024     10 00 90 FD | 	jmp	#LR__2545
20028                 | LR__2544
20028     A7 08 68 FC | 	wrlong	#4, fp
2002c     08 4E 05 F1 | 	add	fp, #8
20030     A7 FE 69 FC | 	wrlong	#255, fp
20034     08 4E 85 F1 | 	sub	fp, #8
20038                 | LR__2545
20038     A7 12 02 F6 | 	mov	arg01, fp
2003c     38 D3 BE FD | 	call	#_push
20040     A7 F0 03 F6 | 	mov	ptra, fp
20044     B2 00 A0 FD | 	call	#popregs_
20048                 | _do_plus_ret
20048     2D 00 64 FD | 	ret
2004c                 | 
2004c                 | ' 
2004c                 | ' '--------------------------------- power (^)
2004c                 | ' 
2004c                 | ' sub do_power 
2004c                 | _do_power
2004c     02 4A 05 F6 | 	mov	COUNT_, #2
20050     A8 00 A0 FD | 	call	#pushregs_
20054     18 F0 07 F1 | 	add	ptra, #24
20058     84 D2 BE FD | 	call	#_pop
2005c     FD 14 02 F6 | 	mov	arg02, result1
20060     FE 12 02 F6 | 	mov	arg01, result2
20064     FF 26 02 F6 | 	mov	local01, result3
20068     0C 4E 05 F1 | 	add	fp, #12
2006c     A7 14 62 FC | 	wrlong	arg02, fp
20070     04 4E 05 F1 | 	add	fp, #4
20074     A7 12 62 FC | 	wrlong	arg01, fp
20078     04 4E 05 F1 | 	add	fp, #4
2007c     A7 26 62 FC | 	wrlong	local01, fp
20080     14 4E 85 F1 | 	sub	fp, #20
20084     58 D2 BE FD | 	call	#_pop
20088     A7 FA 61 FC | 	wrlong	result1, fp
2008c     04 4E 05 F1 | 	add	fp, #4
20090     A7 FC 61 FC | 	wrlong	result2, fp
20094     04 4E 05 F1 | 	add	fp, #4
20098     A7 FE 61 FC | 	wrlong	result3, fp
2009c                 | ' 
2009c                 | ' t2=pop()
2009c                 | ' t1=pop()
2009c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
2009c     08 4E 85 F1 | 	sub	fp, #8
200a0     1F FE 0D F2 | 	cmp	result3, #31 wz
200a4     14 4E 05 51 |  if_ne	add	fp, #20
200a8     A7 26 02 5B |  if_ne	rdlong	local01, fp
200ac     14 4E 85 51 |  if_ne	sub	fp, #20
200b0     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
200b4     A7 18 68 AC |  if_e	wrlong	#12, fp
200b8     08 4E 05 A1 |  if_e	add	fp, #8
200bc     A7 FE 69 AC |  if_e	wrlong	#255, fp
200c0     08 4E 85 A1 |  if_e	sub	fp, #8
200c4     38 01 90 AD |  if_e	jmp	#LR__2555
200c8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
200c8     08 4E 05 F1 | 	add	fp, #8
200cc     A7 14 02 FB | 	rdlong	arg02, fp
200d0     08 4E 85 F1 | 	sub	fp, #8
200d4     1C 14 0E F2 | 	cmp	arg02, #28 wz
200d8     28 00 90 5D |  if_ne	jmp	#LR__2550
200dc     08 4E 05 F1 | 	add	fp, #8
200e0     A7 3C 68 FC | 	wrlong	#30, fp
200e4     08 4E 85 F1 | 	sub	fp, #8
200e8     A7 12 02 FB | 	rdlong	arg01, fp
200ec     09 13 52 F6 | 	abs	arg01, arg01 wc
200f0     1F 28 C6 C9 |  if_b	decod	local02, #31
200f4     00 28 06 36 |  if_ae	mov	local02, #0
200f8     90 88 B0 FD | 	call	#__system___float_fromuns
200fc     14 FB 61 F5 | 	xor	result1, local02
20100     A7 FA 61 FC | 	wrlong	result1, fp
20104                 | LR__2550
20104                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
20104     08 4E 05 F1 | 	add	fp, #8
20108     A7 14 02 FB | 	rdlong	arg02, fp
2010c     08 4E 85 F1 | 	sub	fp, #8
20110     1D 14 0E F2 | 	cmp	arg02, #29 wz
20114     18 00 90 5D |  if_ne	jmp	#LR__2551
20118     08 4E 05 F1 | 	add	fp, #8
2011c     A7 3C 68 FC | 	wrlong	#30, fp
20120     08 4E 85 F1 | 	sub	fp, #8
20124     A7 12 02 FB | 	rdlong	arg01, fp
20128     60 88 B0 FD | 	call	#__system___float_fromuns
2012c     A7 FA 61 FC | 	wrlong	result1, fp
20130                 | LR__2551
20130                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
20130     14 4E 05 F1 | 	add	fp, #20
20134     A7 14 02 FB | 	rdlong	arg02, fp
20138     14 4E 85 F1 | 	sub	fp, #20
2013c     1C 14 0E F2 | 	cmp	arg02, #28 wz
20140     34 00 90 5D |  if_ne	jmp	#LR__2552
20144     14 4E 05 F1 | 	add	fp, #20
20148     A7 3C 68 FC | 	wrlong	#30, fp
2014c     08 4E 85 F1 | 	sub	fp, #8
20150     A7 12 02 FB | 	rdlong	arg01, fp
20154     0C 4E 85 F1 | 	sub	fp, #12
20158     09 13 52 F6 | 	abs	arg01, arg01 wc
2015c     1F 28 C6 C9 |  if_b	decod	local02, #31
20160     00 28 06 36 |  if_ae	mov	local02, #0
20164     24 88 B0 FD | 	call	#__system___float_fromuns
20168     14 FB 61 F5 | 	xor	result1, local02
2016c     0C 4E 05 F1 | 	add	fp, #12
20170     A7 FA 61 FC | 	wrlong	result1, fp
20174     0C 4E 85 F1 | 	sub	fp, #12
20178                 | LR__2552
20178                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
20178     14 4E 05 F1 | 	add	fp, #20
2017c     A7 14 02 FB | 	rdlong	arg02, fp
20180     14 4E 85 F1 | 	sub	fp, #20
20184     1D 14 0E F2 | 	cmp	arg02, #29 wz
20188     24 00 90 5D |  if_ne	jmp	#LR__2553
2018c     14 4E 05 F1 | 	add	fp, #20
20190     A7 3C 68 FC | 	wrlong	#30, fp
20194     08 4E 85 F1 | 	sub	fp, #8
20198     A7 12 02 FB | 	rdlong	arg01, fp
2019c     0C 4E 85 F1 | 	sub	fp, #12
201a0     E8 87 B0 FD | 	call	#__system___float_fromuns
201a4     0C 4E 05 F1 | 	add	fp, #12
201a8     A7 FA 61 FC | 	wrlong	result1, fp
201ac     0C 4E 85 F1 | 	sub	fp, #12
201b0                 | LR__2553
201b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
201b0     08 4E 05 F1 | 	add	fp, #8
201b4     A7 14 02 FB | 	rdlong	arg02, fp
201b8     08 4E 85 F1 | 	sub	fp, #8
201bc     1E 14 0E F2 | 	cmp	arg02, #30 wz
201c0     14 4E 05 A1 |  if_e	add	fp, #20
201c4     A7 26 02 AB |  if_e	rdlong	local01, fp
201c8     14 4E 85 A1 |  if_e	sub	fp, #20
201cc     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
201d0     1C 00 90 5D |  if_ne	jmp	#LR__2554
201d4     A7 12 02 FB | 	rdlong	arg01, fp
201d8     0C 4E 05 F1 | 	add	fp, #12
201dc     A7 14 02 FB | 	rdlong	arg02, fp
201e0     0C 4E 85 F1 | 	sub	fp, #12
201e4     B0 9A B0 FD | 	call	#__system____builtin_powf
201e8     A7 FA 61 FC | 	wrlong	result1, fp
201ec     10 00 90 FD | 	jmp	#LR__2555
201f0                 | LR__2554
201f0     A7 1A 68 FC | 	wrlong	#13, fp
201f4     08 4E 05 F1 | 	add	fp, #8
201f8     A7 FE 69 FC | 	wrlong	#255, fp
201fc     08 4E 85 F1 | 	sub	fp, #8
20200                 | LR__2555
20200     A7 12 02 F6 | 	mov	arg01, fp
20204     70 D1 BE FD | 	call	#_push
20208     A7 F0 03 F6 | 	mov	ptra, fp
2020c     B2 00 A0 FD | 	call	#popregs_
20210                 | _do_power_ret
20210     2D 00 64 FD | 	ret
20214                 | 
20214                 | ' 
20214                 | ' '--------------------------------- SHL
20214                 | ' 
20214                 | ' sub do_shl 
20214                 | _do_shl
20214     03 4A 05 F6 | 	mov	COUNT_, #3
20218     A8 00 A0 FD | 	call	#pushregs_
2021c     18 F0 07 F1 | 	add	ptra, #24
20220     BC D0 BE FD | 	call	#_pop
20224     FD 12 02 F6 | 	mov	arg01, result1
20228     FE 26 02 F6 | 	mov	local01, result2
2022c     FF 28 02 F6 | 	mov	local02, result3
20230     0C 4E 05 F1 | 	add	fp, #12
20234     A7 12 62 FC | 	wrlong	arg01, fp
20238     04 4E 05 F1 | 	add	fp, #4
2023c     A7 26 62 FC | 	wrlong	local01, fp
20240     04 4E 05 F1 | 	add	fp, #4
20244     A7 28 62 FC | 	wrlong	local02, fp
20248     14 4E 85 F1 | 	sub	fp, #20
2024c     90 D0 BE FD | 	call	#_pop
20250     FF 2A 02 F6 | 	mov	local03, result3
20254     A7 FA 61 FC | 	wrlong	result1, fp
20258     04 4E 05 F1 | 	add	fp, #4
2025c     A7 FC 61 FC | 	wrlong	result2, fp
20260     04 4E 05 F1 | 	add	fp, #4
20264     A7 2A 62 FC | 	wrlong	local03, fp
20268                 | ' 
20268                 | ' t2=pop()
20268                 | ' t1=pop()
20268                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
20268     08 4E 85 F1 | 	sub	fp, #8
2026c     1C 2A 0E F2 | 	cmp	local03, #28 wz
20270     A7 2A 02 AB |  if_e	rdlong	local03, fp
20274     A7 2A 62 AC |  if_e	wrlong	local03, fp
20278     08 4E 05 A1 |  if_e	add	fp, #8
2027c     A7 3A 68 AC |  if_e	wrlong	#29, fp
20280     08 4E 85 A1 |  if_e	sub	fp, #8
20284                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
20284     14 4E 05 F1 | 	add	fp, #20
20288     A7 2A 02 FB | 	rdlong	local03, fp
2028c     14 4E 85 F1 | 	sub	fp, #20
20290     1C 2A 0E F2 | 	cmp	local03, #28 wz
20294     18 00 90 5D |  if_ne	jmp	#LR__2560
20298     0C 4E 05 F1 | 	add	fp, #12
2029c     A7 2A 02 FB | 	rdlong	local03, fp
202a0     A7 2A 62 FC | 	wrlong	local03, fp
202a4     08 4E 05 F1 | 	add	fp, #8
202a8     A7 3A 68 FC | 	wrlong	#29, fp
202ac     14 4E 85 F1 | 	sub	fp, #20
202b0                 | LR__2560
202b0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
202b0     08 4E 05 F1 | 	add	fp, #8
202b4     A7 2A 02 FB | 	rdlong	local03, fp
202b8     08 4E 85 F1 | 	sub	fp, #8
202bc     1F 2A 0E F2 | 	cmp	local03, #31 wz
202c0     14 4E 05 51 |  if_ne	add	fp, #20
202c4     A7 28 02 5B |  if_ne	rdlong	local02, fp
202c8     14 4E 85 51 |  if_ne	sub	fp, #20
202cc     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
202d0     08 4E 05 51 |  if_ne	add	fp, #8
202d4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
202d8     08 4E 85 51 |  if_ne	sub	fp, #8
202dc     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
202e0     14 4E 05 51 |  if_ne	add	fp, #20
202e4     14 4E 85 51 |  if_ne	sub	fp, #20
202e8     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
202ec     A7 0C 68 AC |  if_e	wrlong	#6, fp
202f0     08 4E 05 A1 |  if_e	add	fp, #8
202f4     A7 FE 69 AC |  if_e	wrlong	#255, fp
202f8     08 4E 85 A1 |  if_e	sub	fp, #8
202fc     18 00 90 AD |  if_e	jmp	#LR__2561
20300     A7 2A 02 FB | 	rdlong	local03, fp
20304     0C 4E 05 F1 | 	add	fp, #12
20308     A7 26 02 FB | 	rdlong	local01, fp
2030c     0C 4E 85 F1 | 	sub	fp, #12
20310     13 2B 62 F0 | 	shl	local03, local01
20314     A7 2A 62 FC | 	wrlong	local03, fp
20318                 | LR__2561
20318     A7 12 02 F6 | 	mov	arg01, fp
2031c     58 D0 BE FD | 	call	#_push
20320     A7 F0 03 F6 | 	mov	ptra, fp
20324     B2 00 A0 FD | 	call	#popregs_
20328                 | _do_shl_ret
20328     2D 00 64 FD | 	ret
2032c                 | 
2032c                 | ' 
2032c                 | ' '--------------------------------- SHR
2032c                 | ' 
2032c                 | ' sub do_shr 
2032c                 | _do_shr
2032c     03 4A 05 F6 | 	mov	COUNT_, #3
20330     A8 00 A0 FD | 	call	#pushregs_
20334     18 F0 07 F1 | 	add	ptra, #24
20338     A4 CF BE FD | 	call	#_pop
2033c     FD 12 02 F6 | 	mov	arg01, result1
20340     FE 26 02 F6 | 	mov	local01, result2
20344     FF 28 02 F6 | 	mov	local02, result3
20348     0C 4E 05 F1 | 	add	fp, #12
2034c     A7 12 62 FC | 	wrlong	arg01, fp
20350     04 4E 05 F1 | 	add	fp, #4
20354     A7 26 62 FC | 	wrlong	local01, fp
20358     04 4E 05 F1 | 	add	fp, #4
2035c     A7 28 62 FC | 	wrlong	local02, fp
20360     14 4E 85 F1 | 	sub	fp, #20
20364     78 CF BE FD | 	call	#_pop
20368     FF 2A 02 F6 | 	mov	local03, result3
2036c     A7 FA 61 FC | 	wrlong	result1, fp
20370     04 4E 05 F1 | 	add	fp, #4
20374     A7 FC 61 FC | 	wrlong	result2, fp
20378     04 4E 05 F1 | 	add	fp, #4
2037c     A7 2A 62 FC | 	wrlong	local03, fp
20380                 | ' 
20380                 | ' t2=pop()
20380                 | ' t1=pop()
20380                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
20380     08 4E 85 F1 | 	sub	fp, #8
20384     1C 2A 0E F2 | 	cmp	local03, #28 wz
20388     A7 2A 02 AB |  if_e	rdlong	local03, fp
2038c     A7 2A 62 AC |  if_e	wrlong	local03, fp
20390     08 4E 05 A1 |  if_e	add	fp, #8
20394     A7 3A 68 AC |  if_e	wrlong	#29, fp
20398     08 4E 85 A1 |  if_e	sub	fp, #8
2039c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
2039c     14 4E 05 F1 | 	add	fp, #20
203a0     A7 2A 02 FB | 	rdlong	local03, fp
203a4     14 4E 85 F1 | 	sub	fp, #20
203a8     1C 2A 0E F2 | 	cmp	local03, #28 wz
203ac     18 00 90 5D |  if_ne	jmp	#LR__2570
203b0     0C 4E 05 F1 | 	add	fp, #12
203b4     A7 2A 02 FB | 	rdlong	local03, fp
203b8     A7 2A 62 FC | 	wrlong	local03, fp
203bc     08 4E 05 F1 | 	add	fp, #8
203c0     A7 3A 68 FC | 	wrlong	#29, fp
203c4     14 4E 85 F1 | 	sub	fp, #20
203c8                 | LR__2570
203c8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
203c8     08 4E 05 F1 | 	add	fp, #8
203cc     A7 2A 02 FB | 	rdlong	local03, fp
203d0     08 4E 85 F1 | 	sub	fp, #8
203d4     1F 2A 0E F2 | 	cmp	local03, #31 wz
203d8     14 4E 05 51 |  if_ne	add	fp, #20
203dc     A7 28 02 5B |  if_ne	rdlong	local02, fp
203e0     14 4E 85 51 |  if_ne	sub	fp, #20
203e4     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
203e8     08 4E 05 51 |  if_ne	add	fp, #8
203ec     A7 2A 02 5B |  if_ne	rdlong	local03, fp
203f0     08 4E 85 51 |  if_ne	sub	fp, #8
203f4     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
203f8     14 4E 05 51 |  if_ne	add	fp, #20
203fc     14 4E 85 51 |  if_ne	sub	fp, #20
20400     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
20404     A7 0C 68 AC |  if_e	wrlong	#6, fp
20408     08 4E 05 A1 |  if_e	add	fp, #8
2040c     A7 FE 69 AC |  if_e	wrlong	#255, fp
20410     08 4E 85 A1 |  if_e	sub	fp, #8
20414     18 00 90 AD |  if_e	jmp	#LR__2571
20418     A7 2A 02 FB | 	rdlong	local03, fp
2041c     0C 4E 05 F1 | 	add	fp, #12
20420     A7 26 02 FB | 	rdlong	local01, fp
20424     0C 4E 85 F1 | 	sub	fp, #12
20428     13 2B 42 F0 | 	shr	local03, local01
2042c     A7 2A 62 FC | 	wrlong	local03, fp
20430                 | LR__2571
20430     A7 12 02 F6 | 	mov	arg01, fp
20434     40 CF BE FD | 	call	#_push
20438     A7 F0 03 F6 | 	mov	ptra, fp
2043c     B2 00 A0 FD | 	call	#popregs_
20440                 | _do_shr_ret
20440     2D 00 64 FD | 	ret
20444                 | 
20444                 | ' 
20444                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
20444                 | ' 
20444                 | ' ''----------------------------------------------------------------------------------------------------
20444                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
20444                 | ' ''----------------------------------------------------------------------------------------------------
20444                 | ' 
20444                 | ' ''--------------------------- Command function pointers
20444                 | ' 
20444                 | ' sub init_commands
20444                 | _init_commands
20444                 | ' 
20444                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
20444     00 00 06 F6 | 	mov	_var01, #0
20448     97 16 48 FB | 	callpa	#(@LR__2581-@LR__2580)>>2,fcache_load_ptr_
2044c                 | LR__2580
2044c     00 FB 01 F6 | 	mov	result1, _var01
20450     02 FA 65 F0 | 	shl	result1, #2
20454     43 00 00 FF 
20458     60 E4 05 F1 | 	add	objptr, ##34400
2045c     F2 FA 01 F1 | 	add	result1, objptr
20460     43 00 00 FF 
20464     60 E4 85 F1 | 	sub	objptr, ##34400
20468     FD E4 61 FC | 	wrlong	objptr, result1
2046c     01 00 06 F1 | 	add	_var01, #1
20470     00 01 56 F2 | 	cmps	_var01, #256 wc
20474     D4 FF 9F CD |  if_b	jmp	#LR__2580
20478                 | LR__2581
20478     F2 FA 01 F6 | 	mov	result1, objptr
2047c     14 FA 25 F4 | 	bith	result1, #20
20480     43 00 00 FF 
20484     64 E4 05 F1 | 	add	objptr, ##34404
20488     F2 FA 61 FC | 	wrlong	result1, objptr
2048c     43 00 00 FF 
20490     64 E4 85 F1 | 	sub	objptr, ##34404
20494     F2 FA 01 F6 | 	mov	result1, objptr
20498     15 FA 25 F4 | 	bith	result1, #21
2049c     43 00 00 FF 
204a0     68 E4 05 F1 | 	add	objptr, ##34408
204a4     F2 FA 61 FC | 	wrlong	result1, objptr
204a8     43 00 00 FF 
204ac     68 E4 85 F1 | 	sub	objptr, ##34408
204b0     F2 FA 01 F6 | 	mov	result1, objptr
204b4     34 FA 25 F4 | 	bith	result1, #52
204b8     43 00 00 FF 
204bc     6C E4 05 F1 | 	add	objptr, ##34412
204c0     F2 FA 61 FC | 	wrlong	result1, objptr
204c4     43 00 00 FF 
204c8     6C E4 85 F1 | 	sub	objptr, ##34412
204cc     F2 FA 01 F6 | 	mov	result1, objptr
204d0     16 FA 25 F4 | 	bith	result1, #22
204d4     43 00 00 FF 
204d8     74 E4 05 F1 | 	add	objptr, ##34420
204dc     F2 FA 61 FC | 	wrlong	result1, objptr
204e0     43 00 00 FF 
204e4     74 E4 85 F1 | 	sub	objptr, ##34420
204e8     F2 FA 01 F6 | 	mov	result1, objptr
204ec     00 28 00 FF 
204f0     00 FA 45 F5 | 	or	result1, ##5242880
204f4     43 00 00 FF 
204f8     78 E4 05 F1 | 	add	objptr, ##34424
204fc     F2 FA 61 FC | 	wrlong	result1, objptr
20500     43 00 00 FF 
20504     78 E4 85 F1 | 	sub	objptr, ##34424
20508     F2 FA 01 F6 | 	mov	result1, objptr
2050c     35 FA 25 F4 | 	bith	result1, #53
20510     43 00 00 FF 
20514     7C E4 05 F1 | 	add	objptr, ##34428
20518     F2 FA 61 FC | 	wrlong	result1, objptr
2051c     43 00 00 FF 
20520     7C E4 85 F1 | 	sub	objptr, ##34428
20524     F2 FA 01 F6 | 	mov	result1, objptr
20528     54 FA 25 F4 | 	bith	result1, #84
2052c     43 00 00 FF 
20530     80 E4 05 F1 | 	add	objptr, ##34432
20534     F2 FA 61 FC | 	wrlong	result1, objptr
20538     43 00 00 FF 
2053c     80 E4 85 F1 | 	sub	objptr, ##34432
20540     F2 FA 01 F6 | 	mov	result1, objptr
20544     17 FA 25 F4 | 	bith	result1, #23
20548     43 00 00 FF 
2054c     84 E4 05 F1 | 	add	objptr, ##34436
20550     F2 FA 61 FC | 	wrlong	result1, objptr
20554     43 00 00 FF 
20558     84 E4 85 F1 | 	sub	objptr, ##34436
2055c     F2 FA 01 F6 | 	mov	result1, objptr
20560     00 48 00 FF 
20564     00 FA 45 F5 | 	or	result1, ##9437184
20568     43 00 00 FF 
2056c     88 E4 05 F1 | 	add	objptr, ##34440
20570     F2 FA 61 FC | 	wrlong	result1, objptr
20574     43 00 00 FF 
20578     88 E4 85 F1 | 	sub	objptr, ##34440
2057c     F2 FA 01 F6 | 	mov	result1, objptr
20580     00 50 00 FF 
20584     00 FA 45 F5 | 	or	result1, ##10485760
20588     43 00 00 FF 
2058c     8C E4 05 F1 | 	add	objptr, ##34444
20590     F2 FA 61 FC | 	wrlong	result1, objptr
20594     43 00 00 FF 
20598     8C E4 85 F1 | 	sub	objptr, ##34444
2059c     F2 FA 01 F6 | 	mov	result1, objptr
205a0     00 58 00 FF 
205a4     00 FA 45 F5 | 	or	result1, ##11534336
205a8     43 00 00 FF 
205ac     90 E4 05 F1 | 	add	objptr, ##34448
205b0     F2 FA 61 FC | 	wrlong	result1, objptr
205b4     43 00 00 FF 
205b8     90 E4 85 F1 | 	sub	objptr, ##34448
205bc     F2 FA 01 F6 | 	mov	result1, objptr
205c0     36 FA 25 F4 | 	bith	result1, #54
205c4     43 00 00 FF 
205c8     A4 E4 05 F1 | 	add	objptr, ##34468
205cc     F2 FA 61 FC | 	wrlong	result1, objptr
205d0     43 00 00 FF 
205d4     A4 E4 85 F1 | 	sub	objptr, ##34468
205d8     F2 FA 01 F6 | 	mov	result1, objptr
205dc     00 68 00 FF 
205e0     00 FA 45 F5 | 	or	result1, ##13631488
205e4     43 00 00 FF 
205e8     D4 E4 05 F1 | 	add	objptr, ##34516
205ec     F2 FA 61 FC | 	wrlong	result1, objptr
205f0     43 00 00 FF 
205f4     D4 E4 85 F1 | 	sub	objptr, ##34516
205f8     F2 FA 01 F6 | 	mov	result1, objptr
205fc     00 68 00 FF 
20600     00 FA 45 F5 | 	or	result1, ##13631488
20604     43 00 00 FF 
20608     D0 E4 05 F1 | 	add	objptr, ##34512
2060c     F2 FA 61 FC | 	wrlong	result1, objptr
20610     43 00 00 FF 
20614     D0 E4 85 F1 | 	sub	objptr, ##34512
20618     F2 FA 01 F6 | 	mov	result1, objptr
2061c     00 68 00 FF 
20620     00 FA 45 F5 | 	or	result1, ##13631488
20624     43 00 00 FF 
20628     D8 E4 05 F1 | 	add	objptr, ##34520
2062c     F2 FA 61 FC | 	wrlong	result1, objptr
20630     43 00 00 FF 
20634     D8 E4 85 F1 | 	sub	objptr, ##34520
20638     F2 FA 01 F6 | 	mov	result1, objptr
2063c     00 68 00 FF 
20640     00 FA 45 F5 | 	or	result1, ##13631488
20644     43 00 00 FF 
20648     DC E4 05 F1 | 	add	objptr, ##34524
2064c     F2 FA 61 FC | 	wrlong	result1, objptr
20650     43 00 00 FF 
20654     DC E4 85 F1 | 	sub	objptr, ##34524
20658     F2 FA 01 F6 | 	mov	result1, objptr
2065c     00 68 00 FF 
20660     00 FA 45 F5 | 	or	result1, ##13631488
20664     43 00 00 FF 
20668     0C E5 05 F1 | 	add	objptr, ##34572
2066c     F2 FA 61 FC | 	wrlong	result1, objptr
20670     43 00 00 FF 
20674     0C E5 85 F1 | 	sub	objptr, ##34572
20678     F2 FA 01 F6 | 	mov	result1, objptr
2067c     55 FA 25 F4 | 	bith	result1, #85
20680     43 00 00 FF 
20684     BC E4 05 F1 | 	add	objptr, ##34492
20688     F2 FA 61 FC | 	wrlong	result1, objptr
2068c     43 00 00 FF 
20690     BC E4 85 F1 | 	sub	objptr, ##34492
20694     F2 FA 01 F6 | 	mov	result1, objptr
20698     00 68 00 FF 
2069c     00 FA 45 F5 | 	or	result1, ##13631488
206a0     43 00 00 FF 
206a4     10 E5 05 F1 | 	add	objptr, ##34576
206a8     F2 FA 61 FC | 	wrlong	result1, objptr
206ac     43 00 00 FF 
206b0     10 E5 85 F1 | 	sub	objptr, ##34576
206b4     F2 FA 01 F6 | 	mov	result1, objptr
206b8     00 68 00 FF 
206bc     00 FA 45 F5 | 	or	result1, ##13631488
206c0     43 00 00 FF 
206c4     E0 E4 05 F1 | 	add	objptr, ##34528
206c8     F2 FA 61 FC | 	wrlong	result1, objptr
206cc     43 00 00 FF 
206d0     E0 E4 85 F1 | 	sub	objptr, ##34528
206d4     F2 FA 01 F6 | 	mov	result1, objptr
206d8     00 68 00 FF 
206dc     00 FA 45 F5 | 	or	result1, ##13631488
206e0     43 00 00 FF 
206e4     E4 E4 05 F1 | 	add	objptr, ##34532
206e8     F2 FA 61 FC | 	wrlong	result1, objptr
206ec     43 00 00 FF 
206f0     E4 E4 85 F1 | 	sub	objptr, ##34532
206f4     F2 FA 01 F6 | 	mov	result1, objptr
206f8     00 68 00 FF 
206fc     00 FA 45 F5 | 	or	result1, ##13631488
20700     43 00 00 FF 
20704     E8 E4 05 F1 | 	add	objptr, ##34536
20708     F2 FA 61 FC | 	wrlong	result1, objptr
2070c     43 00 00 FF 
20710     E8 E4 85 F1 | 	sub	objptr, ##34536
20714     F2 FA 01 F6 | 	mov	result1, objptr
20718     74 FA 25 F4 | 	bith	result1, #116
2071c     43 00 00 FF 
20720     60 E5 05 F1 | 	add	objptr, ##34656
20724     F2 FA 61 FC | 	wrlong	result1, objptr
20728     43 00 00 FF 
2072c     60 E5 85 F1 | 	sub	objptr, ##34656
20730     F2 FA 01 F6 | 	mov	result1, objptr
20734     18 FA 25 F4 | 	bith	result1, #24
20738     43 00 00 FF 
2073c     64 E5 05 F1 | 	add	objptr, ##34660
20740     F2 FA 61 FC | 	wrlong	result1, objptr
20744     43 00 00 FF 
20748     64 E5 85 F1 | 	sub	objptr, ##34660
2074c     F2 FA 01 F6 | 	mov	result1, objptr
20750     00 88 00 FF 
20754     00 FA 45 F5 | 	or	result1, ##17825792
20758     43 00 00 FF 
2075c     68 E5 05 F1 | 	add	objptr, ##34664
20760     F2 FA 61 FC | 	wrlong	result1, objptr
20764     43 00 00 FF 
20768     68 E5 85 F1 | 	sub	objptr, ##34664
2076c     F2 FA 01 F6 | 	mov	result1, objptr
20770     00 90 00 FF 
20774     00 FA 45 F5 | 	or	result1, ##18874368
20778     43 00 00 FF 
2077c     6C E5 05 F1 | 	add	objptr, ##34668
20780     F2 FA 61 FC | 	wrlong	result1, objptr
20784     43 00 00 FF 
20788     6C E5 85 F1 | 	sub	objptr, ##34668
2078c     F2 FA 01 F6 | 	mov	result1, objptr
20790     00 98 00 FF 
20794     00 FA 45 F5 | 	or	result1, ##19922944
20798     43 00 00 FF 
2079c     70 E5 05 F1 | 	add	objptr, ##34672
207a0     F2 FA 61 FC | 	wrlong	result1, objptr
207a4     43 00 00 FF 
207a8     70 E5 85 F1 | 	sub	objptr, ##34672
207ac     F2 FA 01 F6 | 	mov	result1, objptr
207b0     00 A0 00 FF 
207b4     00 FA 45 F5 | 	or	result1, ##20971520
207b8     43 00 00 FF 
207bc     74 E5 05 F1 | 	add	objptr, ##34676
207c0     F2 FA 61 FC | 	wrlong	result1, objptr
207c4     43 00 00 FF 
207c8     74 E5 85 F1 | 	sub	objptr, ##34676
207cc     F2 FA 01 F6 | 	mov	result1, objptr
207d0     00 A8 00 FF 
207d4     00 FA 45 F5 | 	or	result1, ##22020096
207d8     43 00 00 FF 
207dc     78 E5 05 F1 | 	add	objptr, ##34680
207e0     F2 FA 61 FC | 	wrlong	result1, objptr
207e4     43 00 00 FF 
207e8     78 E5 85 F1 | 	sub	objptr, ##34680
207ec     F2 FA 01 F6 | 	mov	result1, objptr
207f0     00 B0 00 FF 
207f4     00 FA 45 F5 | 	or	result1, ##23068672
207f8     43 00 00 FF 
207fc     7C E5 05 F1 | 	add	objptr, ##34684
20800     F2 FA 61 FC | 	wrlong	result1, objptr
20804     43 00 00 FF 
20808     7C E5 85 F1 | 	sub	objptr, ##34684
2080c     F2 FA 01 F6 | 	mov	result1, objptr
20810     00 B8 00 FF 
20814     00 FA 45 F5 | 	or	result1, ##24117248
20818     43 00 00 FF 
2081c     80 E5 05 F1 | 	add	objptr, ##34688
20820     F2 FA 61 FC | 	wrlong	result1, objptr
20824     43 00 00 FF 
20828     80 E5 85 F1 | 	sub	objptr, ##34688
2082c     F2 FA 01 F6 | 	mov	result1, objptr
20830     37 FA 25 F4 | 	bith	result1, #55
20834     43 00 00 FF 
20838     84 E5 05 F1 | 	add	objptr, ##34692
2083c     F2 FA 61 FC | 	wrlong	result1, objptr
20840     43 00 00 FF 
20844     84 E5 85 F1 | 	sub	objptr, ##34692
20848     F2 FA 01 F6 | 	mov	result1, objptr
2084c     00 C8 00 FF 
20850     00 FA 45 F5 | 	or	result1, ##26214400
20854     43 00 00 FF 
20858     88 E5 05 F1 | 	add	objptr, ##34696
2085c     F2 FA 61 FC | 	wrlong	result1, objptr
20860     43 00 00 FF 
20864     88 E5 85 F1 | 	sub	objptr, ##34696
20868     F2 FA 01 F6 | 	mov	result1, objptr
2086c     00 D0 00 FF 
20870     00 FA 45 F5 | 	or	result1, ##27262976
20874     43 00 00 FF 
20878     8C E5 05 F1 | 	add	objptr, ##34700
2087c     F2 FA 61 FC | 	wrlong	result1, objptr
20880     43 00 00 FF 
20884     8C E5 85 F1 | 	sub	objptr, ##34700
20888     F2 FA 01 F6 | 	mov	result1, objptr
2088c     00 D8 00 FF 
20890     00 FA 45 F5 | 	or	result1, ##28311552
20894     43 00 00 FF 
20898     90 E5 05 F1 | 	add	objptr, ##34704
2089c     F2 FA 61 FC | 	wrlong	result1, objptr
208a0     43 00 00 FF 
208a4     90 E5 85 F1 | 	sub	objptr, ##34704
208a8     F2 FA 01 F6 | 	mov	result1, objptr
208ac     56 FA 25 F4 | 	bith	result1, #86
208b0     43 00 00 FF 
208b4     94 E5 05 F1 | 	add	objptr, ##34708
208b8     F2 FA 61 FC | 	wrlong	result1, objptr
208bc     43 00 00 FF 
208c0     94 E5 85 F1 | 	sub	objptr, ##34708
208c4     F2 FA 01 F6 | 	mov	result1, objptr
208c8     00 E8 00 FF 
208cc     00 FA 45 F5 | 	or	result1, ##30408704
208d0     45 00 00 FF 
208d4     5C E4 05 F1 | 	add	objptr, ##35420
208d8     F2 FA 61 FC | 	wrlong	result1, objptr
208dc     45 00 00 FF 
208e0     5C E4 85 F1 | 	sub	objptr, ##35420
208e4     F2 FA 01 F6 | 	mov	result1, objptr
208e8     75 FA 25 F4 | 	bith	result1, #117
208ec     43 00 00 FF 
208f0     98 E5 05 F1 | 	add	objptr, ##34712
208f4     F2 FA 61 FC | 	wrlong	result1, objptr
208f8     43 00 00 FF 
208fc     98 E5 85 F1 | 	sub	objptr, ##34712
20900     F2 FA 01 F6 | 	mov	result1, objptr
20904     94 FA 25 F4 | 	bith	result1, #148
20908     43 00 00 FF 
2090c     AC E5 05 F1 | 	add	objptr, ##34732
20910     F2 FA 61 FC | 	wrlong	result1, objptr
20914     43 00 00 FF 
20918     AC E5 85 F1 | 	sub	objptr, ##34732
2091c     F2 FA 01 F6 | 	mov	result1, objptr
20920     19 FA 25 F4 | 	bith	result1, #25
20924     43 00 00 FF 
20928     9C E5 05 F1 | 	add	objptr, ##34716
2092c     F2 FA 61 FC | 	wrlong	result1, objptr
20930     43 00 00 FF 
20934     9C E5 85 F1 | 	sub	objptr, ##34716
20938     F2 FA 01 F6 | 	mov	result1, objptr
2093c     00 08 01 FF 
20940     00 FA 45 F5 | 	or	result1, ##34603008
20944     43 00 00 FF 
20948     B8 E4 05 F1 | 	add	objptr, ##34488
2094c     F2 FA 61 FC | 	wrlong	result1, objptr
20950     43 00 00 FF 
20954     B8 E4 85 F1 | 	sub	objptr, ##34488
20958     F2 FA 01 F6 | 	mov	result1, objptr
2095c     00 10 01 FF 
20960     00 FA 45 F5 | 	or	result1, ##35651584
20964     43 00 00 FF 
20968     A4 E5 05 F1 | 	add	objptr, ##34724
2096c     F2 FA 61 FC | 	wrlong	result1, objptr
20970     43 00 00 FF 
20974     A4 E5 85 F1 | 	sub	objptr, ##34724
20978     F2 FA 01 F6 | 	mov	result1, objptr
2097c     00 18 01 FF 
20980     00 FA 45 F5 | 	or	result1, ##36700160
20984     43 00 00 FF 
20988     A8 E5 05 F1 | 	add	objptr, ##34728
2098c     F2 FA 61 FC | 	wrlong	result1, objptr
20990     43 00 00 FF 
20994     A8 E5 85 F1 | 	sub	objptr, ##34728
20998     F2 FA 01 F6 | 	mov	result1, objptr
2099c     00 20 01 FF 
209a0     00 FA 45 F5 | 	or	result1, ##37748736
209a4     43 00 00 FF 
209a8     B4 E5 05 F1 | 	add	objptr, ##34740
209ac     F2 FA 61 FC | 	wrlong	result1, objptr
209b0     43 00 00 FF 
209b4     B4 E5 85 F1 | 	sub	objptr, ##34740
209b8     F2 FA 01 F6 | 	mov	result1, objptr
209bc     00 28 01 FF 
209c0     00 FA 45 F5 | 	or	result1, ##38797312
209c4     43 00 00 FF 
209c8     B8 E5 05 F1 | 	add	objptr, ##34744
209cc     F2 FA 61 FC | 	wrlong	result1, objptr
209d0     43 00 00 FF 
209d4     B8 E5 85 F1 | 	sub	objptr, ##34744
209d8     F2 FA 01 F6 | 	mov	result1, objptr
209dc     00 30 01 FF 
209e0     00 FA 45 F5 | 	or	result1, ##39845888
209e4     43 00 00 FF 
209e8     BC E5 05 F1 | 	add	objptr, ##34748
209ec     F2 FA 61 FC | 	wrlong	result1, objptr
209f0     43 00 00 FF 
209f4     BC E5 85 F1 | 	sub	objptr, ##34748
209f8     F2 FA 01 F6 | 	mov	result1, objptr
209fc     00 38 01 FF 
20a00     00 FA 45 F5 | 	or	result1, ##40894464
20a04     43 00 00 FF 
20a08     C0 E5 05 F1 | 	add	objptr, ##34752
20a0c     F2 FA 61 FC | 	wrlong	result1, objptr
20a10     43 00 00 FF 
20a14     C0 E5 85 F1 | 	sub	objptr, ##34752
20a18     F2 FA 01 F6 | 	mov	result1, objptr
20a1c     00 40 01 FF 
20a20     00 FA 45 F5 | 	or	result1, ##41943040
20a24     43 00 00 FF 
20a28     C8 E5 05 F1 | 	add	objptr, ##34760
20a2c     F2 FA 61 FC | 	wrlong	result1, objptr
20a30     43 00 00 FF 
20a34     C8 E5 85 F1 | 	sub	objptr, ##34760
20a38     F2 FA 01 F6 | 	mov	result1, objptr
20a3c     00 08 01 FF 
20a40     00 FA 45 F5 | 	or	result1, ##34603008
20a44     43 00 00 FF 
20a48     CC E5 05 F1 | 	add	objptr, ##34764
20a4c     F2 FA 61 FC | 	wrlong	result1, objptr
20a50     43 00 00 FF 
20a54     CC E5 85 F1 | 	sub	objptr, ##34764
20a58     F2 FA 01 F6 | 	mov	result1, objptr
20a5c     00 48 01 FF 
20a60     00 FA 45 F5 | 	or	result1, ##42991616
20a64     43 00 00 FF 
20a68     CC E4 05 F1 | 	add	objptr, ##34508
20a6c     F2 FA 61 FC | 	wrlong	result1, objptr
20a70     43 00 00 FF 
20a74     CC E4 85 F1 | 	sub	objptr, ##34508
20a78     F2 FA 01 F6 | 	mov	result1, objptr
20a7c     00 50 01 FF 
20a80     00 FA 45 F5 | 	or	result1, ##44040192
20a84     43 00 00 FF 
20a88     FC E4 05 F1 | 	add	objptr, ##34556
20a8c     F2 FA 61 FC | 	wrlong	result1, objptr
20a90     43 00 00 FF 
20a94     FC E4 85 F1 | 	sub	objptr, ##34556
20a98     F2 FA 01 F6 | 	mov	result1, objptr
20a9c     00 58 01 FF 
20aa0     00 FA 45 F5 | 	or	result1, ##45088768
20aa4     43 00 00 FF 
20aa8     F8 E4 05 F1 | 	add	objptr, ##34552
20aac     F2 FA 61 FC | 	wrlong	result1, objptr
20ab0     43 00 00 FF 
20ab4     F8 E4 85 F1 | 	sub	objptr, ##34552
20ab8     F2 FA 01 F6 | 	mov	result1, objptr
20abc     00 60 01 FF 
20ac0     00 FA 45 F5 | 	or	result1, ##46137344
20ac4     43 00 00 FF 
20ac8     9C E4 05 F1 | 	add	objptr, ##34460
20acc     F2 FA 61 FC | 	wrlong	result1, objptr
20ad0     43 00 00 FF 
20ad4     9C E4 85 F1 | 	sub	objptr, ##34460
20ad8     F2 FA 01 F6 | 	mov	result1, objptr
20adc     00 68 01 FF 
20ae0     00 FA 45 F5 | 	or	result1, ##47185920
20ae4     43 00 00 FF 
20ae8     A0 E4 05 F1 | 	add	objptr, ##34464
20aec     F2 FA 61 FC | 	wrlong	result1, objptr
20af0     43 00 00 FF 
20af4     A0 E4 85 F1 | 	sub	objptr, ##34464
20af8     F2 FA 01 F6 | 	mov	result1, objptr
20afc     00 70 01 FF 
20b00     00 FA 45 F5 | 	or	result1, ##48234496
20b04     43 00 00 FF 
20b08     08 E5 05 F1 | 	add	objptr, ##34568
20b0c     F2 FA 61 FC | 	wrlong	result1, objptr
20b10     43 00 00 FF 
20b14     08 E5 85 F1 | 	sub	objptr, ##34568
20b18     F2 FA 01 F6 | 	mov	result1, objptr
20b1c     00 78 01 FF 
20b20     00 FA 45 F5 | 	or	result1, ##49283072
20b24     43 00 00 FF 
20b28     B0 E5 05 F1 | 	add	objptr, ##34736
20b2c     F2 FA 61 FC | 	wrlong	result1, objptr
20b30     43 00 00 FF 
20b34     B0 E5 85 F1 | 	sub	objptr, ##34736
20b38     F2 FA 01 F6 | 	mov	result1, objptr
20b3c     38 FA 25 F4 | 	bith	result1, #56
20b40     43 00 00 FF 
20b44     C4 E5 05 F1 | 	add	objptr, ##34756
20b48     F2 FA 61 FC | 	wrlong	result1, objptr
20b4c     43 00 00 FF 
20b50     C4 E5 85 F1 | 	sub	objptr, ##34756
20b54     F2 FA 01 F6 | 	mov	result1, objptr
20b58     00 88 01 FF 
20b5c     00 FA 45 F5 | 	or	result1, ##51380224
20b60     43 00 00 FF 
20b64     D0 E5 05 F1 | 	add	objptr, ##34768
20b68     F2 FA 61 FC | 	wrlong	result1, objptr
20b6c     43 00 00 FF 
20b70     D0 E5 85 F1 | 	sub	objptr, ##34768
20b74     F2 FA 01 F6 | 	mov	result1, objptr
20b78     00 90 01 FF 
20b7c     00 FA 45 F5 | 	or	result1, ##52428800
20b80     43 00 00 FF 
20b84     D4 E5 05 F1 | 	add	objptr, ##34772
20b88     F2 FA 61 FC | 	wrlong	result1, objptr
20b8c     43 00 00 FF 
20b90     D4 E5 85 F1 | 	sub	objptr, ##34772
20b94     F2 FA 01 F6 | 	mov	result1, objptr
20b98     00 98 01 FF 
20b9c     00 FA 45 F5 | 	or	result1, ##53477376
20ba0     43 00 00 FF 
20ba4     D8 E5 05 F1 | 	add	objptr, ##34776
20ba8     F2 FA 61 FC | 	wrlong	result1, objptr
20bac     43 00 00 FF 
20bb0     D8 E5 85 F1 | 	sub	objptr, ##34776
20bb4     F2 FA 01 F6 | 	mov	result1, objptr
20bb8     00 A0 01 FF 
20bbc     00 FA 45 F5 | 	or	result1, ##54525952
20bc0     43 00 00 FF 
20bc4     DC E5 05 F1 | 	add	objptr, ##34780
20bc8     F2 FA 61 FC | 	wrlong	result1, objptr
20bcc     43 00 00 FF 
20bd0     DC E5 85 F1 | 	sub	objptr, ##34780
20bd4     F2 FA 01 F6 | 	mov	result1, objptr
20bd8     00 A8 01 FF 
20bdc     00 FA 45 F5 | 	or	result1, ##55574528
20be0     43 00 00 FF 
20be4     E0 E5 05 F1 | 	add	objptr, ##34784
20be8     F2 FA 61 FC | 	wrlong	result1, objptr
20bec     43 00 00 FF 
20bf0     E0 E5 85 F1 | 	sub	objptr, ##34784
20bf4     F2 FA 01 F6 | 	mov	result1, objptr
20bf8     00 B0 01 FF 
20bfc     00 FA 45 F5 | 	or	result1, ##56623104
20c00     43 00 00 FF 
20c04     E4 E5 05 F1 | 	add	objptr, ##34788
20c08     F2 FA 61 FC | 	wrlong	result1, objptr
20c0c     43 00 00 FF 
20c10     E4 E5 85 F1 | 	sub	objptr, ##34788
20c14     F2 FA 01 F6 | 	mov	result1, objptr
20c18     94 FA 25 F4 | 	bith	result1, #148
20c1c     43 00 00 FF 
20c20     AC E5 05 F1 | 	add	objptr, ##34732
20c24     F2 FA 61 FC | 	wrlong	result1, objptr
20c28     43 00 00 FF 
20c2c     AC E5 85 F1 | 	sub	objptr, ##34732
20c30     F2 FA 01 F6 | 	mov	result1, objptr
20c34     00 B8 01 FF 
20c38     00 FA 45 F5 | 	or	result1, ##57671680
20c3c     43 00 00 FF 
20c40     EC E5 05 F1 | 	add	objptr, ##34796
20c44     F2 FA 61 FC | 	wrlong	result1, objptr
20c48     43 00 00 FF 
20c4c     EC E5 85 F1 | 	sub	objptr, ##34796
20c50     F2 FA 01 F6 | 	mov	result1, objptr
20c54     57 FA 25 F4 | 	bith	result1, #87
20c58     43 00 00 FF 
20c5c     E8 E5 05 F1 | 	add	objptr, ##34792
20c60     F2 FA 61 FC | 	wrlong	result1, objptr
20c64     43 00 00 FF 
20c68     E8 E5 85 F1 | 	sub	objptr, ##34792
20c6c     F2 FA 01 F6 | 	mov	result1, objptr
20c70     00 C8 01 FF 
20c74     00 FA 45 F5 | 	or	result1, ##59768832
20c78     44 00 00 FF 
20c7c     00 E4 05 F1 | 	add	objptr, ##34816
20c80     F2 FA 61 FC | 	wrlong	result1, objptr
20c84     44 00 00 FF 
20c88     00 E4 85 F1 | 	sub	objptr, ##34816
20c8c     F2 FA 01 F6 | 	mov	result1, objptr
20c90     00 D0 01 FF 
20c94     00 FA 45 F5 | 	or	result1, ##60817408
20c98     44 00 00 FF 
20c9c     04 E4 05 F1 | 	add	objptr, ##34820
20ca0     F2 FA 61 FC | 	wrlong	result1, objptr
20ca4     44 00 00 FF 
20ca8     04 E4 85 F1 | 	sub	objptr, ##34820
20cac     F2 FA 01 F6 | 	mov	result1, objptr
20cb0     00 D8 01 FF 
20cb4     00 FA 45 F5 | 	or	result1, ##61865984
20cb8     43 00 00 FF 
20cbc     F0 E5 05 F1 | 	add	objptr, ##34800
20cc0     F2 FA 61 FC | 	wrlong	result1, objptr
20cc4     43 00 00 FF 
20cc8     F0 E5 85 F1 | 	sub	objptr, ##34800
20ccc     F2 FA 01 F6 | 	mov	result1, objptr
20cd0     76 FA 25 F4 | 	bith	result1, #118
20cd4     43 00 00 FF 
20cd8     F4 E5 05 F1 | 	add	objptr, ##34804
20cdc     F2 FA 61 FC | 	wrlong	result1, objptr
20ce0     43 00 00 FF 
20ce4     F4 E5 85 F1 | 	sub	objptr, ##34804
20ce8     F2 FA 01 F6 | 	mov	result1, objptr
20cec     00 E8 01 FF 
20cf0     00 FA 45 F5 | 	or	result1, ##63963136
20cf4     43 00 00 FF 
20cf8     F8 E5 05 F1 | 	add	objptr, ##34808
20cfc     F2 FA 61 FC | 	wrlong	result1, objptr
20d00     43 00 00 FF 
20d04     F8 E5 85 F1 | 	sub	objptr, ##34808
20d08     F2 FA 01 F6 | 	mov	result1, objptr
20d0c     95 FA 25 F4 | 	bith	result1, #149
20d10     43 00 00 FF 
20d14     FC E5 05 F1 | 	add	objptr, ##34812
20d18     F2 FA 61 FC | 	wrlong	result1, objptr
20d1c     43 00 00 FF 
20d20     FC E5 85 F1 | 	sub	objptr, ##34812
20d24     F2 FA 01 F6 | 	mov	result1, objptr
20d28     B4 FA 25 F4 | 	bith	result1, #180
20d2c     44 00 00 FF 
20d30     0C E4 05 F1 | 	add	objptr, ##34828
20d34     F2 FA 61 FC | 	wrlong	result1, objptr
20d38     44 00 00 FF 
20d3c     0C E4 85 F1 | 	sub	objptr, ##34828
20d40     F2 FA 01 F6 | 	mov	result1, objptr
20d44     1A FA 25 F4 | 	bith	result1, #26
20d48     44 00 00 FF 
20d4c     08 E4 05 F1 | 	add	objptr, ##34824
20d50     F2 FA 61 FC | 	wrlong	result1, objptr
20d54     44 00 00 FF 
20d58     08 E4 85 F1 | 	sub	objptr, ##34824
20d5c     F2 FA 01 F6 | 	mov	result1, objptr
20d60     00 08 02 FF 
20d64     00 FA 45 F5 | 	or	result1, ##68157440
20d68     44 00 00 FF 
20d6c     18 E4 05 F1 | 	add	objptr, ##34840
20d70     F2 FA 61 FC | 	wrlong	result1, objptr
20d74     44 00 00 FF 
20d78     18 E4 85 F1 | 	sub	objptr, ##34840
20d7c     F2 FA 01 F6 | 	mov	result1, objptr
20d80     00 10 02 FF 
20d84     00 FA 45 F5 | 	or	result1, ##69206016
20d88     44 00 00 FF 
20d8c     14 E4 05 F1 | 	add	objptr, ##34836
20d90     F2 FA 61 FC | 	wrlong	result1, objptr
20d94     44 00 00 FF 
20d98     14 E4 85 F1 | 	sub	objptr, ##34836
20d9c     F2 FA 01 F6 | 	mov	result1, objptr
20da0     00 18 02 FF 
20da4     00 FA 45 F5 | 	or	result1, ##70254592
20da8     44 00 00 FF 
20dac     10 E4 05 F1 | 	add	objptr, ##34832
20db0     F2 FA 61 FC | 	wrlong	result1, objptr
20db4     44 00 00 FF 
20db8     10 E4 85 F1 | 	sub	objptr, ##34832
20dbc     F2 FA 01 F6 | 	mov	result1, objptr
20dc0     00 20 02 FF 
20dc4     00 FA 45 F5 | 	or	result1, ##71303168
20dc8     44 00 00 FF 
20dcc     1C E4 05 F1 | 	add	objptr, ##34844
20dd0     F2 FA 61 FC | 	wrlong	result1, objptr
20dd4     44 00 00 FF 
20dd8     1C E4 85 F1 | 	sub	objptr, ##34844
20ddc     F2 FA 01 F6 | 	mov	result1, objptr
20de0     00 28 02 FF 
20de4     00 FA 45 F5 | 	or	result1, ##72351744
20de8     44 00 00 FF 
20dec     20 E4 05 F1 | 	add	objptr, ##34848
20df0     F2 FA 61 FC | 	wrlong	result1, objptr
20df4     44 00 00 FF 
20df8     20 E4 85 F1 | 	sub	objptr, ##34848
20dfc     F2 FA 01 F6 | 	mov	result1, objptr
20e00     00 30 02 FF 
20e04     00 FA 45 F5 | 	or	result1, ##73400320
20e08     43 00 00 FF 
20e0c     B4 E4 05 F1 | 	add	objptr, ##34484
20e10     F2 FA 61 FC | 	wrlong	result1, objptr
20e14     43 00 00 FF 
20e18     B4 E4 85 F1 | 	sub	objptr, ##34484
20e1c     F2 FA 01 F6 | 	mov	result1, objptr
20e20     00 38 02 FF 
20e24     00 FA 45 F5 | 	or	result1, ##74448896
20e28     44 00 00 FF 
20e2c     38 E4 05 F1 | 	add	objptr, ##34872
20e30     F2 FA 61 FC | 	wrlong	result1, objptr
20e34     44 00 00 FF 
20e38     38 E4 85 F1 | 	sub	objptr, ##34872
20e3c     F2 FA 01 F6 | 	mov	result1, objptr
20e40     00 40 02 FF 
20e44     00 FA 45 F5 | 	or	result1, ##75497472
20e48     44 00 00 FF 
20e4c     48 E4 05 F1 | 	add	objptr, ##34888
20e50     F2 FA 61 FC | 	wrlong	result1, objptr
20e54     44 00 00 FF 
20e58     48 E4 85 F1 | 	sub	objptr, ##34888
20e5c     F2 FA 01 F6 | 	mov	result1, objptr
20e60     00 48 02 FF 
20e64     00 FA 45 F5 | 	or	result1, ##76546048
20e68     44 00 00 FF 
20e6c     4C E4 05 F1 | 	add	objptr, ##34892
20e70     F2 FA 61 FC | 	wrlong	result1, objptr
20e74     44 00 00 FF 
20e78     4C E4 85 F1 | 	sub	objptr, ##34892
20e7c     F2 FA 01 F6 | 	mov	result1, objptr
20e80     00 50 02 FF 
20e84     00 FA 45 F5 | 	or	result1, ##77594624
20e88     44 00 00 FF 
20e8c     44 E4 05 F1 | 	add	objptr, ##34884
20e90     F2 FA 61 FC | 	wrlong	result1, objptr
20e94     44 00 00 FF 
20e98     44 E4 85 F1 | 	sub	objptr, ##34884
20e9c     F2 FA 01 F6 | 	mov	result1, objptr
20ea0     00 58 02 FF 
20ea4     00 FA 45 F5 | 	or	result1, ##78643200
20ea8     44 00 00 FF 
20eac     3C E4 05 F1 | 	add	objptr, ##34876
20eb0     F2 FA 61 FC | 	wrlong	result1, objptr
20eb4     44 00 00 FF 
20eb8     3C E4 85 F1 | 	sub	objptr, ##34876
20ebc     F2 FA 01 F6 | 	mov	result1, objptr
20ec0     00 60 02 FF 
20ec4     00 FA 45 F5 | 	or	result1, ##79691776
20ec8     44 00 00 FF 
20ecc     40 E4 05 F1 | 	add	objptr, ##34880
20ed0     F2 FA 61 FC | 	wrlong	result1, objptr
20ed4     44 00 00 FF 
20ed8     40 E4 85 F1 | 	sub	objptr, ##34880
20edc     F2 FA 01 F6 | 	mov	result1, objptr
20ee0     00 68 02 FF 
20ee4     00 FA 45 F5 | 	or	result1, ##80740352
20ee8     44 00 00 FF 
20eec     50 E4 05 F1 | 	add	objptr, ##34896
20ef0     F2 FA 61 FC | 	wrlong	result1, objptr
20ef4     44 00 00 FF 
20ef8     50 E4 85 F1 | 	sub	objptr, ##34896
20efc     F2 FA 01 F6 | 	mov	result1, objptr
20f00     00 70 02 FF 
20f04     00 FA 45 F5 | 	or	result1, ##81788928
20f08     44 00 00 FF 
20f0c     54 E4 05 F1 | 	add	objptr, ##34900
20f10     F2 FA 61 FC | 	wrlong	result1, objptr
20f14     44 00 00 FF 
20f18     54 E4 85 F1 | 	sub	objptr, ##34900
20f1c     F2 FA 01 F6 | 	mov	result1, objptr
20f20     00 78 02 FF 
20f24     00 FA 45 F5 | 	or	result1, ##82837504
20f28     44 00 00 FF 
20f2c     58 E4 05 F1 | 	add	objptr, ##34904
20f30     F2 FA 61 FC | 	wrlong	result1, objptr
20f34     44 00 00 FF 
20f38     58 E4 85 F1 | 	sub	objptr, ##34904
20f3c     F2 FA 01 F6 | 	mov	result1, objptr
20f40     00 80 02 FF 
20f44     00 FA 45 F5 | 	or	result1, ##83886080
20f48     44 00 00 FF 
20f4c     5C E4 05 F1 | 	add	objptr, ##34908
20f50     F2 FA 61 FC | 	wrlong	result1, objptr
20f54     44 00 00 FF 
20f58     5C E4 85 F1 | 	sub	objptr, ##34908
20f5c     F2 FA 01 F6 | 	mov	result1, objptr
20f60     00 88 02 FF 
20f64     00 FA 45 F5 | 	or	result1, ##84934656
20f68     44 00 00 FF 
20f6c     60 E4 05 F1 | 	add	objptr, ##34912
20f70     F2 FA 61 FC | 	wrlong	result1, objptr
20f74     44 00 00 FF 
20f78     60 E4 85 F1 | 	sub	objptr, ##34912
20f7c     F2 FA 01 F6 | 	mov	result1, objptr
20f80     00 90 02 FF 
20f84     00 FA 45 F5 | 	or	result1, ##85983232
20f88     44 00 00 FF 
20f8c     64 E4 05 F1 | 	add	objptr, ##34916
20f90     F2 FA 61 FC | 	wrlong	result1, objptr
20f94     44 00 00 FF 
20f98     64 E4 85 F1 | 	sub	objptr, ##34916
20f9c     F2 FA 01 F6 | 	mov	result1, objptr
20fa0     00 98 02 FF 
20fa4     00 FA 45 F5 | 	or	result1, ##87031808
20fa8     44 00 00 FF 
20fac     68 E4 05 F1 | 	add	objptr, ##34920
20fb0     F2 FA 61 FC | 	wrlong	result1, objptr
20fb4     44 00 00 FF 
20fb8     68 E4 85 F1 | 	sub	objptr, ##34920
20fbc     F2 FA 01 F6 | 	mov	result1, objptr
20fc0     00 A0 02 FF 
20fc4     00 FA 45 F5 | 	or	result1, ##88080384
20fc8     44 00 00 FF 
20fcc     6C E4 05 F1 | 	add	objptr, ##34924
20fd0     F2 FA 61 FC | 	wrlong	result1, objptr
20fd4     44 00 00 FF 
20fd8     6C E4 85 F1 | 	sub	objptr, ##34924
20fdc     F2 FA 01 F6 | 	mov	result1, objptr
20fe0     00 A8 02 FF 
20fe4     00 FA 45 F5 | 	or	result1, ##89128960
20fe8     44 00 00 FF 
20fec     78 E4 05 F1 | 	add	objptr, ##34936
20ff0     F2 FA 61 FC | 	wrlong	result1, objptr
20ff4     44 00 00 FF 
20ff8     78 E4 85 F1 | 	sub	objptr, ##34936
20ffc     F2 FA 01 F6 | 	mov	result1, objptr
21000     00 B0 02 FF 
21004     00 FA 45 F5 | 	or	result1, ##90177536
21008     44 00 00 FF 
2100c     70 E4 05 F1 | 	add	objptr, ##34928
21010     F2 FA 61 FC | 	wrlong	result1, objptr
21014     44 00 00 FF 
21018     70 E4 85 F1 | 	sub	objptr, ##34928
2101c     F2 FA 01 F6 | 	mov	result1, objptr
21020     00 B8 02 FF 
21024     00 FA 45 F5 | 	or	result1, ##91226112
21028     44 00 00 FF 
2102c     74 E4 05 F1 | 	add	objptr, ##34932
21030     F2 FA 61 FC | 	wrlong	result1, objptr
21034     44 00 00 FF 
21038     74 E4 85 F1 | 	sub	objptr, ##34932
2103c     F2 FA 01 F6 | 	mov	result1, objptr
21040     00 C0 02 FF 
21044     00 FA 45 F5 | 	or	result1, ##92274688
21048     44 00 00 FF 
2104c     7C E4 05 F1 | 	add	objptr, ##34940
21050     F2 FA 61 FC | 	wrlong	result1, objptr
21054     44 00 00 FF 
21058     7C E4 85 F1 | 	sub	objptr, ##34940
2105c     F2 FA 01 F6 | 	mov	result1, objptr
21060     00 C8 02 FF 
21064     00 FA 45 F5 | 	or	result1, ##93323264
21068     44 00 00 FF 
2106c     24 E4 05 F1 | 	add	objptr, ##34852
21070     F2 FA 61 FC | 	wrlong	result1, objptr
21074     44 00 00 FF 
21078     24 E4 85 F1 | 	sub	objptr, ##34852
2107c     F2 FA 01 F6 | 	mov	result1, objptr
21080     00 D0 02 FF 
21084     00 FA 45 F5 | 	or	result1, ##94371840
21088     44 00 00 FF 
2108c     2C E4 05 F1 | 	add	objptr, ##34860
21090     F2 FA 61 FC | 	wrlong	result1, objptr
21094     44 00 00 FF 
21098     2C E4 85 F1 | 	sub	objptr, ##34860
2109c     F2 FA 01 F6 | 	mov	result1, objptr
210a0     00 D8 02 FF 
210a4     00 FA 45 F5 | 	or	result1, ##95420416
210a8     44 00 00 FF 
210ac     30 E4 05 F1 | 	add	objptr, ##34864
210b0     F2 FA 61 FC | 	wrlong	result1, objptr
210b4     44 00 00 FF 
210b8     30 E4 85 F1 | 	sub	objptr, ##34864
210bc     F2 FA 01 F6 | 	mov	result1, objptr
210c0     00 E0 02 FF 
210c4     00 FA 45 F5 | 	or	result1, ##96468992
210c8     44 00 00 FF 
210cc     80 E4 05 F1 | 	add	objptr, ##34944
210d0     F2 FA 61 FC | 	wrlong	result1, objptr
210d4     44 00 00 FF 
210d8     80 E4 85 F1 | 	sub	objptr, ##34944
210dc     F2 FA 01 F6 | 	mov	result1, objptr
210e0     00 E8 02 FF 
210e4     00 FA 45 F5 | 	or	result1, ##97517568
210e8     44 00 00 FF 
210ec     84 E4 05 F1 | 	add	objptr, ##34948
210f0     F2 FA 61 FC | 	wrlong	result1, objptr
210f4     44 00 00 FF 
210f8     84 E4 85 F1 | 	sub	objptr, ##34948
210fc     F2 FA 01 F6 | 	mov	result1, objptr
21100     00 F0 02 FF 
21104     00 FA 45 F5 | 	or	result1, ##98566144
21108     44 00 00 FF 
2110c     88 E4 05 F1 | 	add	objptr, ##34952
21110     F2 FA 61 FC | 	wrlong	result1, objptr
21114     44 00 00 FF 
21118     88 E4 85 F1 | 	sub	objptr, ##34952
2111c     F2 FA 01 F6 | 	mov	result1, objptr
21120     00 F8 02 FF 
21124     00 FA 45 F5 | 	or	result1, ##99614720
21128     44 00 00 FF 
2112c     34 E4 05 F1 | 	add	objptr, ##34868
21130     F2 FA 61 FC | 	wrlong	result1, objptr
21134     44 00 00 FF 
21138     34 E4 85 F1 | 	sub	objptr, ##34868
2113c     F2 FA 01 F6 | 	mov	result1, objptr
21140     39 FA 25 F4 | 	bith	result1, #57
21144     44 00 00 FF 
21148     98 E4 05 F1 | 	add	objptr, ##34968
2114c     F2 FA 61 FC | 	wrlong	result1, objptr
21150     44 00 00 FF 
21154     98 E4 85 F1 | 	sub	objptr, ##34968
21158     F2 FA 01 F6 | 	mov	result1, objptr
2115c     00 08 03 FF 
21160     00 FA 45 F5 | 	or	result1, ##101711872
21164     44 00 00 FF 
21168     A0 E4 05 F1 | 	add	objptr, ##34976
2116c     F2 FA 61 FC | 	wrlong	result1, objptr
21170     44 00 00 FF 
21174     A0 E4 85 F1 | 	sub	objptr, ##34976
21178     F2 FA 01 F6 | 	mov	result1, objptr
2117c     00 10 03 FF 
21180     00 FA 45 F5 | 	or	result1, ##102760448
21184     44 00 00 FF 
21188     94 E4 05 F1 | 	add	objptr, ##34964
2118c     F2 FA 61 FC | 	wrlong	result1, objptr
21190     44 00 00 FF 
21194     94 E4 85 F1 | 	sub	objptr, ##34964
21198     F2 FA 01 F6 | 	mov	result1, objptr
2119c     00 18 03 FF 
211a0     00 FA 45 F5 | 	or	result1, ##103809024
211a4     44 00 00 FF 
211a8     90 E4 05 F1 | 	add	objptr, ##34960
211ac     F2 FA 61 FC | 	wrlong	result1, objptr
211b0     44 00 00 FF 
211b4     90 E4 85 F1 | 	sub	objptr, ##34960
211b8     F2 FA 01 F6 | 	mov	result1, objptr
211bc     00 20 03 FF 
211c0     00 FA 45 F5 | 	or	result1, ##104857600
211c4     44 00 00 FF 
211c8     8C E4 05 F1 | 	add	objptr, ##34956
211cc     F2 FA 61 FC | 	wrlong	result1, objptr
211d0     44 00 00 FF 
211d4     8C E4 85 F1 | 	sub	objptr, ##34956
211d8     F2 FA 01 F6 | 	mov	result1, objptr
211dc     00 28 03 FF 
211e0     00 FA 45 F5 | 	or	result1, ##105906176
211e4     44 00 00 FF 
211e8     9C E4 05 F1 | 	add	objptr, ##34972
211ec     F2 FA 61 FC | 	wrlong	result1, objptr
211f0     44 00 00 FF 
211f4     9C E4 85 F1 | 	sub	objptr, ##34972
211f8     F2 FA 01 F6 | 	mov	result1, objptr
211fc     00 30 03 FF 
21200     00 FA 45 F5 | 	or	result1, ##106954752
21204     44 00 00 FF 
21208     A4 E4 05 F1 | 	add	objptr, ##34980
2120c     F2 FA 61 FC | 	wrlong	result1, objptr
21210     44 00 00 FF 
21214     A4 E4 85 F1 | 	sub	objptr, ##34980
21218     F2 FA 01 F6 | 	mov	result1, objptr
2121c     00 38 03 FF 
21220     00 FA 45 F5 | 	or	result1, ##108003328
21224     44 00 00 FF 
21228     A8 E4 05 F1 | 	add	objptr, ##34984
2122c     F2 FA 61 FC | 	wrlong	result1, objptr
21230     44 00 00 FF 
21234     A8 E4 85 F1 | 	sub	objptr, ##34984
21238     F2 FA 01 F6 | 	mov	result1, objptr
2123c     00 40 03 FF 
21240     00 FA 45 F5 | 	or	result1, ##109051904
21244     44 00 00 FF 
21248     AC E4 05 F1 | 	add	objptr, ##34988
2124c     F2 FA 61 FC | 	wrlong	result1, objptr
21250     44 00 00 FF 
21254     AC E4 85 F1 | 	sub	objptr, ##34988
21258     F2 FA 01 F6 | 	mov	result1, objptr
2125c     00 48 03 FF 
21260     00 FA 45 F5 | 	or	result1, ##110100480
21264     44 00 00 FF 
21268     B4 E4 05 F1 | 	add	objptr, ##34996
2126c     F2 FA 61 FC | 	wrlong	result1, objptr
21270     44 00 00 FF 
21274     B4 E4 85 F1 | 	sub	objptr, ##34996
21278     F2 FA 01 F6 | 	mov	result1, objptr
2127c     00 50 03 FF 
21280     00 FA 45 F5 | 	or	result1, ##111149056
21284     44 00 00 FF 
21288     B8 E4 05 F1 | 	add	objptr, ##35000
2128c     F2 FA 61 FC | 	wrlong	result1, objptr
21290     44 00 00 FF 
21294     B8 E4 85 F1 | 	sub	objptr, ##35000
21298     F2 FA 01 F6 | 	mov	result1, objptr
2129c     00 58 03 FF 
212a0     00 FA 45 F5 | 	or	result1, ##112197632
212a4     44 00 00 FF 
212a8     BC E4 05 F1 | 	add	objptr, ##35004
212ac     F2 FA 61 FC | 	wrlong	result1, objptr
212b0     44 00 00 FF 
212b4     BC E4 85 F1 | 	sub	objptr, ##35004
212b8     F2 FA 01 F6 | 	mov	result1, objptr
212bc     00 60 03 FF 
212c0     00 FA 45 F5 | 	or	result1, ##113246208
212c4     44 00 00 FF 
212c8     C0 E4 05 F1 | 	add	objptr, ##35008
212cc     F2 FA 61 FC | 	wrlong	result1, objptr
212d0     44 00 00 FF 
212d4     C0 E4 85 F1 | 	sub	objptr, ##35008
212d8     F2 FA 01 F6 | 	mov	result1, objptr
212dc     00 68 03 FF 
212e0     00 FA 45 F5 | 	or	result1, ##114294784
212e4     44 00 00 FF 
212e8     C4 E4 05 F1 | 	add	objptr, ##35012
212ec     F2 FA 61 FC | 	wrlong	result1, objptr
212f0     44 00 00 FF 
212f4     C4 E4 85 F1 | 	sub	objptr, ##35012
212f8     F2 FA 01 F6 | 	mov	result1, objptr
212fc     00 70 03 FF 
21300     00 FA 45 F5 | 	or	result1, ##115343360
21304     44 00 00 FF 
21308     C8 E4 05 F1 | 	add	objptr, ##35016
2130c     F2 FA 61 FC | 	wrlong	result1, objptr
21310     44 00 00 FF 
21314     C8 E4 85 F1 | 	sub	objptr, ##35016
21318     F2 FA 01 F6 | 	mov	result1, objptr
2131c     00 08 01 FF 
21320     00 FA 45 F5 | 	or	result1, ##34603008
21324     44 00 00 FF 
21328     CC E4 05 F1 | 	add	objptr, ##35020
2132c     F2 FA 61 FC | 	wrlong	result1, objptr
21330     44 00 00 FF 
21334     CC E4 85 F1 | 	sub	objptr, ##35020
21338     F2 FA 01 F6 | 	mov	result1, objptr
2133c     00 78 03 FF 
21340     00 FA 45 F5 | 	or	result1, ##116391936
21344     44 00 00 FF 
21348     D0 E4 05 F1 | 	add	objptr, ##35024
2134c     F2 FA 61 FC | 	wrlong	result1, objptr
21350     44 00 00 FF 
21354     D0 E4 85 F1 | 	sub	objptr, ##35024
21358     F2 FA 01 F6 | 	mov	result1, objptr
2135c     58 FA 25 F4 | 	bith	result1, #88
21360     44 00 00 FF 
21364     B0 E4 05 F1 | 	add	objptr, ##34992
21368     F2 FA 61 FC | 	wrlong	result1, objptr
2136c     44 00 00 FF 
21370     B0 E4 85 F1 | 	sub	objptr, ##34992
21374     F2 FA 01 F6 | 	mov	result1, objptr
21378     00 88 03 FF 
2137c     00 FA 45 F5 | 	or	result1, ##118489088
21380     43 00 00 FF 
21384     A8 E4 05 F1 | 	add	objptr, ##34472
21388     F2 FA 61 FC | 	wrlong	result1, objptr
2138c     43 00 00 FF 
21390     A8 E4 85 F1 | 	sub	objptr, ##34472
21394     F2 FA 01 F6 | 	mov	result1, objptr
21398     00 90 03 FF 
2139c     00 FA 45 F5 | 	or	result1, ##119537664
213a0     44 00 00 FF 
213a4     D4 E4 05 F1 | 	add	objptr, ##35028
213a8     F2 FA 61 FC | 	wrlong	result1, objptr
213ac     44 00 00 FF 
213b0     D4 E4 85 F1 | 	sub	objptr, ##35028
213b4     F2 FA 01 F6 | 	mov	result1, objptr
213b8     00 98 03 FF 
213bc     00 FA 45 F5 | 	or	result1, ##120586240
213c0     44 00 00 FF 
213c4     D8 E4 05 F1 | 	add	objptr, ##35032
213c8     F2 FA 61 FC | 	wrlong	result1, objptr
213cc     44 00 00 FF 
213d0     D8 E4 85 F1 | 	sub	objptr, ##35032
213d4     F2 FA 01 F6 | 	mov	result1, objptr
213d8     00 A0 03 FF 
213dc     00 FA 45 F5 | 	or	result1, ##121634816
213e0     44 00 00 FF 
213e4     EC E4 05 F1 | 	add	objptr, ##35052
213e8     F2 FA 61 FC | 	wrlong	result1, objptr
213ec     44 00 00 FF 
213f0     EC E4 85 F1 | 	sub	objptr, ##35052
213f4     F2 FA 01 F6 | 	mov	result1, objptr
213f8     00 A8 03 FF 
213fc     00 FA 45 F5 | 	or	result1, ##122683392
21400     44 00 00 FF 
21404     E8 E4 05 F1 | 	add	objptr, ##35048
21408     F2 FA 61 FC | 	wrlong	result1, objptr
2140c     44 00 00 FF 
21410     E8 E4 85 F1 | 	sub	objptr, ##35048
21414     F2 FA 01 F6 | 	mov	result1, objptr
21418     00 B0 03 FF 
2141c     00 FA 45 F5 | 	or	result1, ##123731968
21420     44 00 00 FF 
21424     E0 E4 05 F1 | 	add	objptr, ##35040
21428     F2 FA 61 FC | 	wrlong	result1, objptr
2142c     44 00 00 FF 
21430     E0 E4 85 F1 | 	sub	objptr, ##35040
21434     F2 FA 01 F6 | 	mov	result1, objptr
21438     00 B8 03 FF 
2143c     00 FA 45 F5 | 	or	result1, ##124780544
21440     44 00 00 FF 
21444     DC E4 05 F1 | 	add	objptr, ##35036
21448     F2 FA 61 FC | 	wrlong	result1, objptr
2144c     44 00 00 FF 
21450     DC E4 85 F1 | 	sub	objptr, ##35036
21454     F2 FA 01 F6 | 	mov	result1, objptr
21458     77 FA 25 F4 | 	bith	result1, #119
2145c     44 00 00 FF 
21460     FC E4 05 F1 | 	add	objptr, ##35068
21464     F2 FA 61 FC | 	wrlong	result1, objptr
21468     44 00 00 FF 
2146c     FC E4 85 F1 | 	sub	objptr, ##35068
21470     F2 FA 01 F6 | 	mov	result1, objptr
21474     00 C8 03 FF 
21478     00 FA 45 F5 | 	or	result1, ##126877696
2147c     44 00 00 FF 
21480     F0 E4 05 F1 | 	add	objptr, ##35056
21484     F2 FA 61 FC | 	wrlong	result1, objptr
21488     44 00 00 FF 
2148c     F0 E4 85 F1 | 	sub	objptr, ##35056
21490     F2 FA 01 F6 | 	mov	result1, objptr
21494     00 D0 03 FF 
21498     00 FA 45 F5 | 	or	result1, ##127926272
2149c     44 00 00 FF 
214a0     F4 E4 05 F1 | 	add	objptr, ##35060
214a4     F2 FA 61 FC | 	wrlong	result1, objptr
214a8     44 00 00 FF 
214ac     F4 E4 85 F1 | 	sub	objptr, ##35060
214b0     F2 FA 01 F6 | 	mov	result1, objptr
214b4     00 D8 03 FF 
214b8     00 FA 45 F5 | 	or	result1, ##128974848
214bc     44 00 00 FF 
214c0     F8 E4 05 F1 | 	add	objptr, ##35064
214c4     F2 FA 61 FC | 	wrlong	result1, objptr
214c8     44 00 00 FF 
214cc     F8 E4 85 F1 | 	sub	objptr, ##35064
214d0     F2 FA 01 F6 | 	mov	result1, objptr
214d4     96 FA 25 F4 | 	bith	result1, #150
214d8     44 00 00 FF 
214dc     00 E5 05 F1 | 	add	objptr, ##35072
214e0     F2 FA 61 FC | 	wrlong	result1, objptr
214e4     44 00 00 FF 
214e8     00 E5 85 F1 | 	sub	objptr, ##35072
214ec     F2 FA 01 F6 | 	mov	result1, objptr
214f0     00 E8 03 FF 
214f4     00 FA 45 F5 | 	or	result1, ##131072000
214f8     44 00 00 FF 
214fc     04 E5 05 F1 | 	add	objptr, ##35076
21500     F2 FA 61 FC | 	wrlong	result1, objptr
21504     44 00 00 FF 
21508     04 E5 85 F1 | 	sub	objptr, ##35076
2150c     F2 FA 01 F6 | 	mov	result1, objptr
21510     B5 FA 25 F4 | 	bith	result1, #181
21514     44 00 00 FF 
21518     08 E5 05 F1 | 	add	objptr, ##35080
2151c     F2 FA 61 FC | 	wrlong	result1, objptr
21520     44 00 00 FF 
21524     08 E5 85 F1 | 	sub	objptr, ##35080
21528     F2 FA 01 F6 | 	mov	result1, objptr
2152c     D4 FA 25 F4 | 	bith	result1, #212
21530     44 00 00 FF 
21534     0C E5 05 F1 | 	add	objptr, ##35084
21538     F2 FA 61 FC | 	wrlong	result1, objptr
2153c     44 00 00 FF 
21540     0C E5 85 F1 | 	sub	objptr, ##35084
21544     F2 FA 01 F6 | 	mov	result1, objptr
21548     1B FA 25 F4 | 	bith	result1, #27
2154c     44 00 00 FF 
21550     10 E5 05 F1 | 	add	objptr, ##35088
21554     F2 FA 61 FC | 	wrlong	result1, objptr
21558     44 00 00 FF 
2155c     10 E5 85 F1 | 	sub	objptr, ##35088
21560     F2 FA 01 F6 | 	mov	result1, objptr
21564     00 08 04 FF 
21568     00 FA 45 F5 | 	or	result1, ##135266304
2156c     44 00 00 FF 
21570     14 E5 05 F1 | 	add	objptr, ##35092
21574     F2 FA 61 FC | 	wrlong	result1, objptr
21578     44 00 00 FF 
2157c     14 E5 85 F1 | 	sub	objptr, ##35092
21580     F2 FA 01 F6 | 	mov	result1, objptr
21584     00 10 04 FF 
21588     00 FA 45 F5 | 	or	result1, ##136314880
2158c     44 00 00 FF 
21590     1C E5 05 F1 | 	add	objptr, ##35100
21594     F2 FA 61 FC | 	wrlong	result1, objptr
21598     44 00 00 FF 
2159c     1C E5 85 F1 | 	sub	objptr, ##35100
215a0     F2 FA 01 F6 | 	mov	result1, objptr
215a4     00 18 04 FF 
215a8     00 FA 45 F5 | 	or	result1, ##137363456
215ac     44 00 00 FF 
215b0     20 E5 05 F1 | 	add	objptr, ##35104
215b4     F2 FA 61 FC | 	wrlong	result1, objptr
215b8     44 00 00 FF 
215bc     20 E5 85 F1 | 	sub	objptr, ##35104
215c0     F2 FA 01 F6 | 	mov	result1, objptr
215c4     00 20 04 FF 
215c8     00 FA 45 F5 | 	or	result1, ##138412032
215cc     44 00 00 FF 
215d0     24 E5 05 F1 | 	add	objptr, ##35108
215d4     F2 FA 61 FC | 	wrlong	result1, objptr
215d8     44 00 00 FF 
215dc     24 E5 85 F1 | 	sub	objptr, ##35108
215e0     F2 FA 01 F6 | 	mov	result1, objptr
215e4     00 28 04 FF 
215e8     00 FA 45 F5 | 	or	result1, ##139460608
215ec     44 00 00 FF 
215f0     18 E5 05 F1 | 	add	objptr, ##35096
215f4     F2 FA 61 FC | 	wrlong	result1, objptr
215f8     44 00 00 FF 
215fc     18 E5 85 F1 | 	sub	objptr, ##35096
21600     F2 FA 01 F6 | 	mov	result1, objptr
21604     00 30 04 FF 
21608     00 FA 45 F5 | 	or	result1, ##140509184
2160c     44 00 00 FF 
21610     28 E5 05 F1 | 	add	objptr, ##35112
21614     F2 FA 61 FC | 	wrlong	result1, objptr
21618     44 00 00 FF 
2161c     28 E5 85 F1 | 	sub	objptr, ##35112
21620     F2 FA 01 F6 | 	mov	result1, objptr
21624     00 38 04 FF 
21628     00 FA 45 F5 | 	or	result1, ##141557760
2162c     44 00 00 FF 
21630     5C E5 05 F1 | 	add	objptr, ##35164
21634     F2 FA 61 FC | 	wrlong	result1, objptr
21638     44 00 00 FF 
2163c     5C E5 85 F1 | 	sub	objptr, ##35164
21640     F2 FA 01 F6 | 	mov	result1, objptr
21644     00 40 04 FF 
21648     00 FA 45 F5 | 	or	result1, ##142606336
2164c     44 00 00 FF 
21650     54 E5 05 F1 | 	add	objptr, ##35156
21654     F2 FA 61 FC | 	wrlong	result1, objptr
21658     44 00 00 FF 
2165c     54 E5 85 F1 | 	sub	objptr, ##35156
21660     F2 FA 01 F6 | 	mov	result1, objptr
21664     00 48 04 FF 
21668     00 FA 45 F5 | 	or	result1, ##143654912
2166c     44 00 00 FF 
21670     2C E5 05 F1 | 	add	objptr, ##35116
21674     F2 FA 61 FC | 	wrlong	result1, objptr
21678     44 00 00 FF 
2167c     2C E5 85 F1 | 	sub	objptr, ##35116
21680     F2 FA 01 F6 | 	mov	result1, objptr
21684     00 50 04 FF 
21688     00 FA 45 F5 | 	or	result1, ##144703488
2168c     44 00 00 FF 
21690     30 E5 05 F1 | 	add	objptr, ##35120
21694     F2 FA 61 FC | 	wrlong	result1, objptr
21698     44 00 00 FF 
2169c     30 E5 85 F1 | 	sub	objptr, ##35120
216a0     F2 FA 01 F6 | 	mov	result1, objptr
216a4     00 58 04 FF 
216a8     00 FA 45 F5 | 	or	result1, ##145752064
216ac     44 00 00 FF 
216b0     4C E5 05 F1 | 	add	objptr, ##35148
216b4     F2 FA 61 FC | 	wrlong	result1, objptr
216b8     44 00 00 FF 
216bc     4C E5 85 F1 | 	sub	objptr, ##35148
216c0     F2 FA 01 F6 | 	mov	result1, objptr
216c4     00 60 04 FF 
216c8     00 FA 45 F5 | 	or	result1, ##146800640
216cc     44 00 00 FF 
216d0     50 E5 05 F1 | 	add	objptr, ##35152
216d4     F2 FA 61 FC | 	wrlong	result1, objptr
216d8     44 00 00 FF 
216dc     50 E5 85 F1 | 	sub	objptr, ##35152
216e0     F2 FA 01 F6 | 	mov	result1, objptr
216e4     00 68 04 FF 
216e8     00 FA 45 F5 | 	or	result1, ##147849216
216ec     44 00 00 FF 
216f0     6C E5 05 F1 | 	add	objptr, ##35180
216f4     F2 FA 61 FC | 	wrlong	result1, objptr
216f8     44 00 00 FF 
216fc     6C E5 85 F1 | 	sub	objptr, ##35180
21700     F2 FA 01 F6 | 	mov	result1, objptr
21704     00 70 04 FF 
21708     00 FA 45 F5 | 	or	result1, ##148897792
2170c     44 00 00 FF 
21710     68 E5 05 F1 | 	add	objptr, ##35176
21714     F2 FA 61 FC | 	wrlong	result1, objptr
21718     44 00 00 FF 
2171c     68 E5 85 F1 | 	sub	objptr, ##35176
21720     F2 FA 01 F6 | 	mov	result1, objptr
21724     00 78 04 FF 
21728     00 FA 45 F5 | 	or	result1, ##149946368
2172c     44 00 00 FF 
21730     78 E5 05 F1 | 	add	objptr, ##35192
21734     F2 FA 61 FC | 	wrlong	result1, objptr
21738     44 00 00 FF 
2173c     78 E5 85 F1 | 	sub	objptr, ##35192
21740     F2 FA 01 F6 | 	mov	result1, objptr
21744     00 80 04 FF 
21748     00 FA 45 F5 | 	or	result1, ##150994944
2174c     44 00 00 FF 
21750     44 E5 05 F1 | 	add	objptr, ##35140
21754     F2 FA 61 FC | 	wrlong	result1, objptr
21758     44 00 00 FF 
2175c     44 E5 85 F1 | 	sub	objptr, ##35140
21760     F2 FA 01 F6 | 	mov	result1, objptr
21764     00 88 04 FF 
21768     00 FA 45 F5 | 	or	result1, ##152043520
2176c     44 00 00 FF 
21770     74 E5 05 F1 | 	add	objptr, ##35188
21774     F2 FA 61 FC | 	wrlong	result1, objptr
21778     44 00 00 FF 
2177c     74 E5 85 F1 | 	sub	objptr, ##35188
21780     F2 FA 01 F6 | 	mov	result1, objptr
21784     00 90 04 FF 
21788     00 FA 45 F5 | 	or	result1, ##153092096
2178c     44 00 00 FF 
21790     64 E5 05 F1 | 	add	objptr, ##35172
21794     F2 FA 61 FC | 	wrlong	result1, objptr
21798     44 00 00 FF 
2179c     64 E5 85 F1 | 	sub	objptr, ##35172
217a0     F2 FA 01 F6 | 	mov	result1, objptr
217a4     00 98 04 FF 
217a8     00 FA 45 F5 | 	or	result1, ##154140672
217ac     43 00 00 FF 
217b0     14 E5 05 F1 | 	add	objptr, ##34580
217b4     F2 FA 61 FC | 	wrlong	result1, objptr
217b8     43 00 00 FF 
217bc     14 E5 85 F1 | 	sub	objptr, ##34580
217c0     F2 FA 01 F6 | 	mov	result1, objptr
217c4     00 A0 04 FF 
217c8     00 FA 45 F5 | 	or	result1, ##155189248
217cc     44 00 00 FF 
217d0     34 E5 05 F1 | 	add	objptr, ##35124
217d4     F2 FA 61 FC | 	wrlong	result1, objptr
217d8     44 00 00 FF 
217dc     34 E5 85 F1 | 	sub	objptr, ##35124
217e0     F2 FA 01 F6 | 	mov	result1, objptr
217e4     00 08 01 FF 
217e8     00 FA 45 F5 | 	or	result1, ##34603008
217ec     44 00 00 FF 
217f0     3C E5 05 F1 | 	add	objptr, ##35132
217f4     F2 FA 61 FC | 	wrlong	result1, objptr
217f8     44 00 00 FF 
217fc     3C E5 85 F1 | 	sub	objptr, ##35132
21800     F2 FA 01 F6 | 	mov	result1, objptr
21804     00 A8 04 FF 
21808     00 FA 45 F5 | 	or	result1, ##156237824
2180c     44 00 00 FF 
21810     38 E5 05 F1 | 	add	objptr, ##35128
21814     F2 FA 61 FC | 	wrlong	result1, objptr
21818     44 00 00 FF 
2181c     38 E5 85 F1 | 	sub	objptr, ##35128
21820     F2 FA 01 F6 | 	mov	result1, objptr
21824     00 B0 04 FF 
21828     00 FA 45 F5 | 	or	result1, ##157286400
2182c     44 00 00 FF 
21830     7C E5 05 F1 | 	add	objptr, ##35196
21834     F2 FA 61 FC | 	wrlong	result1, objptr
21838     44 00 00 FF 
2183c     7C E5 85 F1 | 	sub	objptr, ##35196
21840     F2 FA 01 F6 | 	mov	result1, objptr
21844     00 B8 04 FF 
21848     00 FA 45 F5 | 	or	result1, ##158334976
2184c     44 00 00 FF 
21850     80 E5 05 F1 | 	add	objptr, ##35200
21854     F2 FA 61 FC | 	wrlong	result1, objptr
21858     44 00 00 FF 
2185c     80 E5 85 F1 | 	sub	objptr, ##35200
21860     F2 FA 01 F6 | 	mov	result1, objptr
21864     00 C0 04 FF 
21868     00 FA 45 F5 | 	or	result1, ##159383552
2186c     44 00 00 FF 
21870     84 E5 05 F1 | 	add	objptr, ##35204
21874     F2 FA 61 FC | 	wrlong	result1, objptr
21878     44 00 00 FF 
2187c     84 E5 85 F1 | 	sub	objptr, ##35204
21880     F2 FA 01 F6 | 	mov	result1, objptr
21884     00 C8 04 FF 
21888     00 FA 45 F5 | 	or	result1, ##160432128
2188c     44 00 00 FF 
21890     88 E5 05 F1 | 	add	objptr, ##35208
21894     F2 FA 61 FC | 	wrlong	result1, objptr
21898     44 00 00 FF 
2189c     88 E5 85 F1 | 	sub	objptr, ##35208
218a0     F2 FA 01 F6 | 	mov	result1, objptr
218a4     00 D0 04 FF 
218a8     00 FA 45 F5 | 	or	result1, ##161480704
218ac     44 00 00 FF 
218b0     90 E5 05 F1 | 	add	objptr, ##35216
218b4     F2 FA 61 FC | 	wrlong	result1, objptr
218b8     44 00 00 FF 
218bc     90 E5 85 F1 | 	sub	objptr, ##35216
218c0     F2 FA 01 F6 | 	mov	result1, objptr
218c4     00 D8 04 FF 
218c8     00 FA 45 F5 | 	or	result1, ##162529280
218cc     44 00 00 FF 
218d0     94 E5 05 F1 | 	add	objptr, ##35220
218d4     F2 FA 61 FC | 	wrlong	result1, objptr
218d8     44 00 00 FF 
218dc     94 E5 85 F1 | 	sub	objptr, ##35220
218e0     F2 FA 01 F6 | 	mov	result1, objptr
218e4     00 E0 04 FF 
218e8     00 FA 45 F5 | 	or	result1, ##163577856
218ec     44 00 00 FF 
218f0     98 E5 05 F1 | 	add	objptr, ##35224
218f4     F2 FA 61 FC | 	wrlong	result1, objptr
218f8     44 00 00 FF 
218fc     98 E5 85 F1 | 	sub	objptr, ##35224
21900     F2 FA 01 F6 | 	mov	result1, objptr
21904     00 E8 04 FF 
21908     00 FA 45 F5 | 	or	result1, ##164626432
2190c     44 00 00 FF 
21910     8C E5 05 F1 | 	add	objptr, ##35212
21914     F2 FA 61 FC | 	wrlong	result1, objptr
21918     44 00 00 FF 
2191c     8C E5 85 F1 | 	sub	objptr, ##35212
21920                 | _init_commands_ret
21920     2D 00 64 FD | 	ret
21924                 | 
21924                 | ' 
21924                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
21924                 | ' 
21924                 | ' sub init_audio
21924                 | _init_audio
21924     06 4A 05 F6 | 	mov	COUNT_, #6
21928     A8 00 A0 FD | 	call	#pushregs_
2192c     00 C0 1F FF 
21930     00 26 06 F6 | 	mov	local01, ##1065353216
21934                 | ' 
21934                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
21934     00 28 06 F6 | 	mov	local02, #0
21938                 | LR__2590
21938     14 2B 02 F6 | 	mov	local03, local02
2193c     01 2A 66 F0 | 	shl	local03, #1
21940     58 7F 23 FF 
21944     00 2C 06 F6 | 	mov	local04, ##1191096320
21948     14 13 52 F6 | 	abs	arg01, local02 wc
2194c     1F 2E C6 C9 |  if_b	decod	local05, #31
21950     00 2E 06 36 |  if_ae	mov	local05, #0
21954     34 70 B0 FD | 	call	#__system___float_fromuns
21958     17 FB 61 F5 | 	xor	result1, local05
2195c     FD 12 02 F6 | 	mov	arg01, result1
21960     87 24 20 FF 
21964     DB 15 06 F6 | 	mov	arg02, ##1078530011
21968     24 74 B0 FD | 	call	#__system___float_mul
2196c     FD 12 02 F6 | 	mov	arg01, result1
21970     00 00 22 FF 
21974     00 14 06 F6 | 	mov	arg02, ##1140850688
21978     18 76 B0 FD | 	call	#__system___float_div
2197c     FD 12 02 F6 | 	mov	arg01, result1
21980     6C 7D B0 FD | 	call	#__system____builtin_sinf
21984     FD 14 02 F6 | 	mov	arg02, result1
21988     16 13 02 F6 | 	mov	arg01, local04
2198c     00 74 B0 FD | 	call	#__system___float_mul
21990     FD 12 02 F6 | 	mov	arg01, result1
21994     01 14 06 F6 | 	mov	arg02, #1
21998     BC 78 B0 FD | 	call	#__system___float_tointeger
2199c     FD 14 02 F6 | 	mov	arg02, result1
219a0     15 13 02 F6 | 	mov	arg01, local03
219a4     6C 0D B0 FD | 	call	#_psdpoke
219a8     01 28 06 F1 | 	add	local02, #1
219ac     02 00 00 FF 
219b0     00 28 56 F2 | 	cmps	local02, ##1024 wc
219b4     80 FF 9F CD |  if_b	jmp	#LR__2590
219b8                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
219b8     00 28 06 F6 | 	mov	local02, #0
219bc                 | LR__2591
219bc     14 15 02 F6 | 	mov	arg02, local02
219c0     01 14 66 F0 | 	shl	arg02, #1
219c4     0B 12 C6 F9 | 	decod	arg01, #11
219c8     0A 13 02 F1 | 	add	arg01, arg02
219cc     14 2D 02 F6 | 	mov	local04, local02
219d0     07 2C 66 F0 | 	shl	local04, #7
219d4     14 2D 82 F1 | 	sub	local04, local02
219d8     C0 FF 7F FF 
219dc     00 15 06 F6 | 	mov	arg02, ##-32512
219e0     16 15 02 F1 | 	add	arg02, local04
219e4     2C 0D B0 FD | 	call	#_psdpoke
219e8     09 2C C6 F9 | 	decod	local04, #9
219ec     14 2D 02 F1 | 	add	local04, local02
219f0     01 2C 66 F0 | 	shl	local04, #1
219f4     0B 12 C6 F9 | 	decod	arg01, #11
219f8     16 13 02 F1 | 	add	arg01, local04
219fc     14 2F 02 F6 | 	mov	local05, local02
21a00     07 2E 66 F0 | 	shl	local05, #7
21a04     14 2F 82 F1 | 	sub	local05, local02
21a08     3F 00 00 FF 
21a0c     00 15 06 F6 | 	mov	arg02, ##32512
21a10     17 15 82 F1 | 	sub	arg02, local05
21a14     FC 0C B0 FD | 	call	#_psdpoke
21a18     01 28 06 F1 | 	add	local02, #1
21a1c     01 00 00 FF 
21a20     00 28 56 F2 | 	cmps	local02, ##512 wc
21a24     94 FF 9F CD |  if_b	jmp	#LR__2591
21a28                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
21a28     00 28 06 F6 | 	mov	local02, #0
21a2c                 | LR__2592
21a2c     14 2F 02 F6 | 	mov	local05, local02
21a30     01 2E 66 F0 | 	shl	local05, #1
21a34     0C 12 C6 F9 | 	decod	arg01, #12
21a38     17 13 02 F1 | 	add	arg01, local05
21a3c     14 2F 02 F6 | 	mov	local05, local02
21a40     06 2E 66 F0 | 	shl	local05, #6
21a44     14 2F 82 F1 | 	sub	local05, local02
21a48     C1 FF 7F FF 
21a4c     00 14 06 F6 | 	mov	arg02, ##-32256
21a50     17 15 02 F1 | 	add	arg02, local05
21a54     BC 0C B0 FD | 	call	#_psdpoke
21a58     01 28 06 F1 | 	add	local02, #1
21a5c     02 00 00 FF 
21a60     00 28 56 F2 | 	cmps	local02, ##1024 wc
21a64     C4 FF 9F CD |  if_b	jmp	#LR__2592
21a68                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
21a68     00 28 06 F6 | 	mov	local02, #0
21a6c                 | LR__2593
21a6c     14 2F 02 F6 | 	mov	local05, local02
21a70     01 2E 66 F0 | 	shl	local05, #1
21a74     0C 00 00 FF 
21a78     00 12 06 F6 | 	mov	arg01, ##6144
21a7c     17 13 02 F1 | 	add	arg01, local05
21a80     C0 FF 7F FF 
21a84     A8 14 06 F6 | 	mov	arg02, ##-32600
21a88     88 0C B0 FD | 	call	#_psdpoke
21a8c     01 28 06 F1 | 	add	local02, #1
21a90     80 28 56 F2 | 	cmps	local02, #128 wc
21a94     D4 FF 9F CD |  if_b	jmp	#LR__2593
21a98     80 28 06 F6 | 	mov	local02, #128
21a9c                 | LR__2594
21a9c     14 2F 02 F6 | 	mov	local05, local02
21aa0     01 2E 66 F0 | 	shl	local05, #1
21aa4     0C 00 00 FF 
21aa8     00 12 06 F6 | 	mov	arg01, ##6144
21aac     17 13 02 F1 | 	add	arg01, local05
21ab0     3F 00 00 FF 
21ab4     58 15 06 F6 | 	mov	arg02, ##32600
21ab8     58 0C B0 FD | 	call	#_psdpoke
21abc     01 28 06 F1 | 	add	local02, #1
21ac0     02 00 00 FF 
21ac4     00 28 16 F2 | 	cmp	local02, ##1024 wc
21ac8     D0 FF 9F CD |  if_b	jmp	#LR__2594
21acc                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
21acc     00 28 06 F6 | 	mov	local02, #0
21ad0                 | LR__2595
21ad0     14 2F 02 F6 | 	mov	local05, local02
21ad4     01 2E 66 F0 | 	shl	local05, #1
21ad8     0D 12 C6 F9 | 	decod	arg01, #13
21adc     17 13 02 F1 | 	add	arg01, local05
21ae0     C0 FF 7F FF 
21ae4     A8 14 06 F6 | 	mov	arg02, ##-32600
21ae8     28 0C B0 FD | 	call	#_psdpoke
21aec     01 28 06 F1 | 	add	local02, #1
21af0     01 00 00 FF 
21af4     00 28 56 F2 | 	cmps	local02, ##512 wc
21af8     D4 FF 9F CD |  if_b	jmp	#LR__2595
21afc     09 28 C6 F9 | 	decod	local02, #9
21b00                 | LR__2596
21b00     14 2F 02 F6 | 	mov	local05, local02
21b04     01 2E 66 F0 | 	shl	local05, #1
21b08     0D 12 C6 F9 | 	decod	arg01, #13
21b0c     17 13 02 F1 | 	add	arg01, local05
21b10     3F 00 00 FF 
21b14     58 15 06 F6 | 	mov	arg02, ##32600
21b18     F8 0B B0 FD | 	call	#_psdpoke
21b1c     01 28 06 F1 | 	add	local02, #1
21b20     02 00 00 FF 
21b24     00 28 16 F2 | 	cmp	local02, ##1024 wc
21b28     D4 FF 9F CD |  if_b	jmp	#LR__2596
21b2c                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
21b2c     00 28 06 F6 | 	mov	local02, #0
21b30                 | LR__2597
21b30     14 2F 02 F6 | 	mov	local05, local02
21b34     01 2E 66 F0 | 	shl	local05, #1
21b38     14 00 00 FF 
21b3c     00 12 06 F6 | 	mov	arg01, ##10240
21b40     17 13 02 F1 | 	add	arg01, local05
21b44     C0 FF 7F FF 
21b48     A8 14 06 F6 | 	mov	arg02, ##-32600
21b4c     C4 0B B0 FD | 	call	#_psdpoke
21b50     01 28 06 F1 | 	add	local02, #1
21b54     00 29 56 F2 | 	cmps	local02, #256 wc
21b58     D4 FF 9F CD |  if_b	jmp	#LR__2597
21b5c     00 29 06 F6 | 	mov	local02, #256
21b60                 | LR__2598
21b60     14 2F 02 F6 | 	mov	local05, local02
21b64     01 2E 66 F0 | 	shl	local05, #1
21b68     14 00 00 FF 
21b6c     00 12 06 F6 | 	mov	arg01, ##10240
21b70     17 13 02 F1 | 	add	arg01, local05
21b74     3F 00 00 FF 
21b78     58 15 06 F6 | 	mov	arg02, ##32600
21b7c     94 0B B0 FD | 	call	#_psdpoke
21b80     01 28 06 F1 | 	add	local02, #1
21b84     02 00 00 FF 
21b88     00 28 16 F2 | 	cmp	local02, ##1024 wc
21b8c     D0 FF 9F CD |  if_b	jmp	#LR__2598
21b90                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
21b90     18 00 00 FF 
21b94     00 28 06 F6 | 	mov	local02, ##12288
21b98                 | LR__2599
21b98     14 13 02 F6 | 	mov	arg01, local02
21b9c     00 14 06 F6 | 	mov	arg02, #0
21ba0     28 0B B0 FD | 	call	#_pslpoke
21ba4     04 28 06 F1 | 	add	local02, #4
21ba8     77 00 00 FF 
21bac     FD 29 56 F2 | 	cmps	local02, ##61437 wc
21bb0     E4 FF 9F CD |  if_b	jmp	#LR__2599
21bb4                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
21bb4     00 28 06 F6 | 	mov	local02, #0
21bb8                 | LR__2600
21bb8     14 2F 02 F6 | 	mov	local05, local02
21bbc     01 2E 66 F0 | 	shl	local05, #1
21bc0     78 00 00 FF 
21bc4     00 2A 06 F6 | 	mov	local03, ##61440
21bc8     17 2B 02 F1 | 	add	local03, local05
21bcc     12 00 00 FF 
21bd0     BA EA 05 F1 | 	add	ptr__dat__, ##9402
21bd4     F5 12 02 F6 | 	mov	arg01, ptr__dat__
21bd8     12 00 00 FF 
21bdc     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
21be0     10 12 06 F1 | 	add	arg01, #16
21be4     14 15 02 F6 | 	mov	arg02, local02
21be8     01 14 66 F0 | 	shl	arg02, #1
21bec     0A 13 02 F1 | 	add	arg01, arg02
21bf0     09 15 E2 FA | 	rdword	arg02, arg01
21bf4     15 13 02 F6 | 	mov	arg01, local03
21bf8     18 0B B0 FD | 	call	#_psdpoke
21bfc     01 28 06 F1 | 	add	local02, #1
21c00     02 00 00 FF 
21c04     00 28 56 F2 | 	cmps	local02, ##1024 wc
21c08     AC FF 9F CD |  if_b	jmp	#LR__2600
21c0c                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
21c0c     00 28 06 F6 | 	mov	local02, #0
21c10                 | LR__2601
21c10     14 2F 02 F6 | 	mov	local05, local02
21c14     01 2E 66 F0 | 	shl	local05, #1
21c18     7C 00 00 FF 
21c1c     00 2A 06 F6 | 	mov	local03, ##63488
21c20     17 2B 02 F1 | 	add	local03, local05
21c24     0E 00 00 FF 
21c28     AA EA 05 F1 | 	add	ptr__dat__, ##7338
21c2c     F5 12 02 F6 | 	mov	arg01, ptr__dat__
21c30     0E 00 00 FF 
21c34     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
21c38     10 12 06 F1 | 	add	arg01, #16
21c3c     14 15 02 F6 | 	mov	arg02, local02
21c40     01 14 66 F0 | 	shl	arg02, #1
21c44     0A 13 02 F1 | 	add	arg01, arg02
21c48     09 15 E2 FA | 	rdword	arg02, arg01
21c4c     15 13 02 F6 | 	mov	arg01, local03
21c50     C0 0A B0 FD | 	call	#_psdpoke
21c54     01 28 06 F1 | 	add	local02, #1
21c58     02 00 00 FF 
21c5c     00 28 56 F2 | 	cmps	local02, ##1024 wc
21c60     AC FF 9F CD |  if_b	jmp	#LR__2601
21c64                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
21c64     00 28 06 F6 | 	mov	local02, #0
21c68     0C 00 00 FF 
21c6c     D8 E4 05 F1 | 	add	objptr, ##6360
21c70     97 18 48 FB | 	callpa	#(@LR__2603-@LR__2602)>>2,fcache_load_ptr_
21c74                 | LR__2602
21c74     14 2F 02 F6 | 	mov	local05, local02
21c78     01 2E 66 F0 | 	shl	local05, #1
21c7c     F2 2E 02 F1 | 	add	local05, objptr
21c80     14 2B 02 F6 | 	mov	local03, local02
21c84     08 2A 66 F0 | 	shl	local03, #8
21c88     7F 00 00 FF 
21c8c     00 31 06 F6 | 	mov	local06, ##65280
21c90     15 31 82 F1 | 	sub	local06, local03
21c94     17 31 52 FC | 	wrword	local06, local05
21c98     01 28 06 F1 | 	add	local02, #1
21c9c     00 29 56 F2 | 	cmps	local02, #256 wc
21ca0     D0 FF 9F CD |  if_b	jmp	#LR__2602
21ca4                 | LR__2603
21ca4     0C 00 00 FF 
21ca8     D8 E4 85 F1 | 	sub	objptr, ##6360
21cac                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
21cac     00 28 06 F6 | 	mov	local02, #0
21cb0                 | LR__2604
21cb0     14 2F 02 F6 | 	mov	local05, local02
21cb4     01 2E 66 F0 | 	shl	local05, #1
21cb8     0D 00 00 FF 
21cbc     D8 E4 05 F1 | 	add	objptr, ##6872
21cc0     F2 2E 02 F1 | 	add	local05, objptr
21cc4     80 BF 23 FF 
21cc8     00 12 06 F6 | 	mov	arg01, ##1199505408
21ccc     13 15 02 F6 | 	mov	arg02, local01
21cd0     0D 00 00 FF 
21cd4     D8 E4 85 F1 | 	sub	objptr, ##6872
21cd8     B4 70 B0 FD | 	call	#__system___float_mul
21cdc     FD 12 02 F6 | 	mov	arg01, result1
21ce0     01 14 06 F6 | 	mov	arg02, #1
21ce4     70 75 B0 FD | 	call	#__system___float_tointeger
21ce8     17 FB 51 FC | 	wrword	result1, local05
21cec     13 13 02 F6 | 	mov	arg01, local01
21cf0     CC BC 1F FF 
21cf4     9A 15 06 F6 | 	mov	arg02, ##1064933786
21cf8     94 70 B0 FD | 	call	#__system___float_mul
21cfc     FD 26 02 F6 | 	mov	local01, result1
21d00     01 28 06 F1 | 	add	local02, #1
21d04     00 29 56 F2 | 	cmps	local02, #256 wc
21d08     A4 FF 9F CD |  if_b	jmp	#LR__2604
21d0c     0E 00 00 FF 
21d10     D6 E4 05 F1 | 	add	objptr, ##7382
21d14     F2 00 58 FC | 	wrword	#0, objptr
21d18                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
21d18     00 28 06 F6 | 	mov	local02, #0
21d1c     02 E4 05 F1 | 	add	objptr, #2
21d20     97 10 48 FB | 	callpa	#(@LR__2606-@LR__2605)>>2,fcache_load_ptr_
21d24                 | LR__2605
21d24     14 2F 02 F6 | 	mov	local05, local02
21d28     01 2E 66 F0 | 	shl	local05, #1
21d2c     F2 2E 02 F1 | 	add	local05, objptr
21d30     7F 00 80 FF 
21d34     17 01 5A FC | 	wrword	##65280, local05
21d38     01 28 06 F1 | 	add	local02, #1
21d3c     FF 28 56 F2 | 	cmps	local02, #255 wc
21d40     E0 FF 9F CD |  if_b	jmp	#LR__2605
21d44                 | LR__2606
21d44     FE E5 05 F1 | 	add	objptr, #510
21d48     F2 00 58 FC | 	wrword	#0, objptr
21d4c                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
21d4c     00 28 06 F6 | 	mov	local02, #0
21d50     02 E4 05 F1 | 	add	objptr, #2
21d54     97 52 48 FB | 	callpa	#(@LR__2611-@LR__2607)>>2,fcache_load_ptr_
21d58                 | LR__2607
21d58     14 2F 02 F6 | 	mov	local05, local02
21d5c     01 2E 66 F0 | 	shl	local05, #1
21d60     F2 2E 02 F1 | 	add	local05, objptr
21d64     14 31 02 F6 | 	mov	local06, local02
21d68     0C 30 66 F0 | 	shl	local06, #12
21d6c     17 31 52 FC | 	wrword	local06, local05
21d70     01 28 06 F1 | 	add	local02, #1
21d74     10 28 56 F2 | 	cmps	local02, #16 wc
21d78     DC FF 9F CD |  if_b	jmp	#LR__2607
21d7c                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
21d7c     10 28 06 F6 | 	mov	local02, #16
21d80                 | LR__2608
21d80     14 2F 02 F6 | 	mov	local05, local02
21d84     01 2E 66 F0 | 	shl	local05, #1
21d88     F2 2E 02 F1 | 	add	local05, objptr
21d8c     7F 00 80 FF 
21d90     17 01 5A FC | 	wrword	##65280, local05
21d94     01 28 06 F1 | 	add	local02, #1
21d98     F0 28 16 F2 | 	cmp	local02, #240 wc
21d9c     E0 FF 9F CD |  if_b	jmp	#LR__2608
21da0                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
21da0     F0 28 06 F6 | 	mov	local02, #240
21da4                 | LR__2609
21da4     14 2F 02 F6 | 	mov	local05, local02
21da8     01 2E 66 F0 | 	shl	local05, #1
21dac     F2 2E 02 F1 | 	add	local05, objptr
21db0     FF 2A 06 F6 | 	mov	local03, #255
21db4     14 2B 82 F1 | 	sub	local03, local02
21db8     0C 2A 66 F0 | 	shl	local03, #12
21dbc     17 2B 52 FC | 	wrword	local03, local05
21dc0     01 28 06 F1 | 	add	local02, #1
21dc4     00 29 16 F2 | 	cmp	local02, #256 wc
21dc8     D8 FF 9F CD |  if_b	jmp	#LR__2609
21dcc                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
21dcc     00 28 06 F6 | 	mov	local02, #0
21dd0     01 00 00 FF 
21dd4     00 E4 05 F1 | 	add	objptr, ##512
21dd8                 | LR__2610
21dd8     14 2F 02 F6 | 	mov	local05, local02
21ddc     01 2E 66 F0 | 	shl	local05, #1
21de0     F2 2E 02 F1 | 	add	local05, objptr
21de4     14 31 02 F6 | 	mov	local06, local02
21de8     08 30 66 F0 | 	shl	local06, #8
21dec     17 31 52 FC | 	wrword	local06, local05
21df0     01 28 06 F1 | 	add	local02, #1
21df4     00 29 56 F2 | 	cmps	local02, #256 wc
21df8     DC FF 9F CD |  if_b	jmp	#LR__2610
21dfc                 | LR__2611
21dfc     FE E5 05 F1 | 	add	objptr, #510
21e00     F2 00 58 FC | 	wrword	#0, objptr
21e04                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
21e04     00 28 06 F6 | 	mov	local02, #0
21e08     02 E4 05 F1 | 	add	objptr, #2
21e0c     97 6A 48 FB | 	callpa	#(@LR__2616-@LR__2612)>>2,fcache_load_ptr_
21e10                 | LR__2612
21e10     14 2F 02 F6 | 	mov	local05, local02
21e14     01 2E 66 F0 | 	shl	local05, #1
21e18     F2 2E 02 F1 | 	add	local05, objptr
21e1c     14 31 02 F6 | 	mov	local06, local02
21e20     04 30 66 F0 | 	shl	local06, #4
21e24     14 31 02 F1 | 	add	local06, local02
21e28     04 30 66 F0 | 	shl	local06, #4
21e2c     17 31 52 FC | 	wrword	local06, local05
21e30     01 28 06 F1 | 	add	local02, #1
21e34     F0 28 56 F2 | 	cmps	local02, #240 wc
21e38     D4 FF 9F CD |  if_b	jmp	#LR__2612
21e3c     F0 28 06 F6 | 	mov	local02, #240
21e40                 | LR__2613
21e40     14 2F 02 F6 | 	mov	local05, local02
21e44     01 2E 66 F0 | 	shl	local05, #1
21e48     F2 2E 02 F1 | 	add	local05, objptr
21e4c     FF 2A 06 F6 | 	mov	local03, #255
21e50     14 2B 82 F1 | 	sub	local03, local02
21e54     0C 2A 66 F0 | 	shl	local03, #12
21e58     17 2B 52 FC | 	wrword	local03, local05
21e5c     01 28 06 F1 | 	add	local02, #1
21e60     00 29 16 F2 | 	cmp	local02, #256 wc
21e64     D8 FF 9F CD |  if_b	jmp	#LR__2613
21e68                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
21e68     00 28 06 F6 | 	mov	local02, #0
21e6c     01 00 00 FF 
21e70     00 E4 05 F1 | 	add	objptr, ##512
21e74                 | LR__2614
21e74     14 2F 02 F6 | 	mov	local05, local02
21e78     01 2E 66 F0 | 	shl	local05, #1
21e7c     F2 2E 02 F1 | 	add	local05, objptr
21e80     14 31 02 F6 | 	mov	local06, local02
21e84     09 30 66 F0 | 	shl	local06, #9
21e88     17 31 52 FC | 	wrword	local06, local05
21e8c     FF 2E 06 F6 | 	mov	local05, #255
21e90     14 2F 82 F1 | 	sub	local05, local02
21e94     01 2E 66 F0 | 	shl	local05, #1
21e98     F2 2E 02 F1 | 	add	local05, objptr
21e9c     14 31 02 F6 | 	mov	local06, local02
21ea0     09 30 66 F0 | 	shl	local06, #9
21ea4     17 31 52 FC | 	wrword	local06, local05
21ea8     01 28 06 F1 | 	add	local02, #1
21eac     80 28 56 F2 | 	cmps	local02, #128 wc
21eb0     C0 FF 9F CD |  if_b	jmp	#LR__2614
21eb4                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
21eb4     00 28 06 F6 | 	mov	local02, #0
21eb8     01 00 00 FF 
21ebc     00 E4 05 F1 | 	add	objptr, ##512
21ec0                 | LR__2615
21ec0     14 2F 02 F6 | 	mov	local05, local02
21ec4     01 2E 66 F0 | 	shl	local05, #1
21ec8     F2 2E 02 F1 | 	add	local05, objptr
21ecc     14 31 02 F6 | 	mov	local06, local02
21ed0     0D 30 66 F0 | 	shl	local06, #13
21ed4     17 31 52 FC | 	wrword	local06, local05
21ed8     01 28 06 F1 | 	add	local02, #1
21edc     08 28 56 F2 | 	cmps	local02, #8 wc
21ee0     DC FF 9F CD |  if_b	jmp	#LR__2615
21ee4                 | LR__2616
21ee4                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
21ee4     08 28 06 F6 | 	mov	local02, #8
21ee8     97 42 48 FB | 	callpa	#(@LR__2620-@LR__2617)>>2,fcache_load_ptr_
21eec                 | LR__2617
21eec     14 2F 02 F6 | 	mov	local05, local02
21ef0     01 2E 66 F0 | 	shl	local05, #1
21ef4     F2 2E 02 F1 | 	add	local05, objptr
21ef8     14 27 02 F6 | 	mov	local01, local02
21efc     08 26 86 F1 | 	sub	local01, #8
21f00     0B 26 66 F0 | 	shl	local01, #11
21f04     7F 00 00 FF 
21f08     00 31 06 F6 | 	mov	local06, ##65280
21f0c     13 31 82 F1 | 	sub	local06, local01
21f10     17 31 52 FC | 	wrword	local06, local05
21f14     01 28 06 F1 | 	add	local02, #1
21f18     18 28 16 F2 | 	cmp	local02, #24 wc
21f1c     CC FF 9F CD |  if_b	jmp	#LR__2617
21f20                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
21f20     18 28 06 F6 | 	mov	local02, #24
21f24                 | LR__2618
21f24     14 2F 02 F6 | 	mov	local05, local02
21f28     01 2E 66 F0 | 	shl	local05, #1
21f2c     F2 2E 02 F1 | 	add	local05, objptr
21f30     40 00 80 FF 
21f34     17 01 58 FC | 	wrword	##32768, local05
21f38     01 28 06 F1 | 	add	local02, #1
21f3c     81 28 16 F2 | 	cmp	local02, #129 wc
21f40     E0 FF 9F CD |  if_b	jmp	#LR__2618
21f44                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
21f44     81 28 06 F6 | 	mov	local02, #129
21f48                 | LR__2619
21f48     14 2F 02 F6 | 	mov	local05, local02
21f4c     01 2E 66 F0 | 	shl	local05, #1
21f50     F2 2E 02 F1 | 	add	local05, objptr
21f54     FF 2A 06 F6 | 	mov	local03, #255
21f58     14 2B 82 F1 | 	sub	local03, local02
21f5c     08 2A 66 F0 | 	shl	local03, #8
21f60     17 2B 52 FC | 	wrword	local03, local05
21f64     01 28 06 F1 | 	add	local02, #1
21f68     00 29 16 F2 | 	cmp	local02, #256 wc
21f6c     D8 FF 9F CD |  if_b	jmp	#LR__2619
21f70                 | LR__2620
21f70     3E 00 00 FF 
21f74     EA E5 05 F1 | 	add	objptr, ##32234
21f78     F2 00 59 FC | 	wrword	#128, objptr
21f7c     52 00 00 FF 
21f80     C2 E4 85 F1 | 	sub	objptr, ##42178
21f84                 | ' for i=0 to 7
21f84     00 28 06 F6 | 	mov	local02, #0
21f88     97 8E 48 FB | 	callpa	#(@LR__2622-@LR__2621)>>2,fcache_load_ptr_
21f8c                 | LR__2621
21f8c     14 2F 02 F6 | 	mov	local05, local02
21f90     01 2E 66 F0 | 	shl	local05, #1
21f94     14 2F 02 F1 | 	add	local05, local02
21f98     03 2E 66 F0 | 	shl	local05, #3
21f9c     14 00 00 FF 
21fa0     38 E5 05 F1 | 	add	objptr, ##10552
21fa4     F2 2E 02 F1 | 	add	local05, objptr
21fa8     00 EE A1 FF 
21fac     17 01 68 FC | 	wrlong	##1138491392, local05
21fb0     14 2F 02 F6 | 	mov	local05, local02
21fb4     01 2E 66 F0 | 	shl	local05, #1
21fb8     14 2F 02 F1 | 	add	local05, local02
21fbc     03 2E 66 F0 | 	shl	local05, #3
21fc0     F2 2E 02 F1 | 	add	local05, objptr
21fc4     04 2E 06 F1 | 	add	local05, #4
21fc8     17 29 42 FC | 	wrbyte	local02, local05
21fcc     14 2F 02 F6 | 	mov	local05, local02
21fd0     01 2E 66 F0 | 	shl	local05, #1
21fd4     14 2F 02 F1 | 	add	local05, local02
21fd8     03 2E 66 F0 | 	shl	local05, #3
21fdc     F2 2E 02 F1 | 	add	local05, objptr
21fe0     05 2E 06 F1 | 	add	local05, #5
21fe4     17 29 42 FC | 	wrbyte	local02, local05
21fe8     14 2F 02 F6 | 	mov	local05, local02
21fec     01 2E 66 F0 | 	shl	local05, #1
21ff0     14 2F 02 F1 | 	add	local05, local02
21ff4     03 2E 66 F0 | 	shl	local05, #3
21ff8     F2 2E 02 F1 | 	add	local05, objptr
21ffc     06 2E 06 F1 | 	add	local05, #6
22000     17 01 58 FC | 	wrword	#0, local05
22004     14 2F 02 F6 | 	mov	local05, local02
22008     01 2E 66 F0 | 	shl	local05, #1
2200c     14 2F 02 F1 | 	add	local05, local02
22010     03 2E 66 F0 | 	shl	local05, #3
22014     F2 2E 02 F1 | 	add	local05, objptr
22018     08 2E 06 F1 | 	add	local05, #8
2201c     00 C0 9F FF 
22020     17 01 68 FC | 	wrlong	##1065353216, local05
22024     14 2F 02 F6 | 	mov	local05, local02
22028     01 2E 66 F0 | 	shl	local05, #1
2202c     14 2F 02 F1 | 	add	local05, local02
22030     03 2E 66 F0 | 	shl	local05, #3
22034     F2 2E 02 F1 | 	add	local05, objptr
22038     0C 2E 06 F1 | 	add	local05, #12
2203c     00 40 A0 FF 
22040     17 01 68 FC | 	wrlong	##1082130432, local05
22044     14 2F 02 F6 | 	mov	local05, local02
22048     01 2E 66 F0 | 	shl	local05, #1
2204c     14 2F 02 F1 | 	add	local05, local02
22050     03 2E 66 F0 | 	shl	local05, #3
22054     F2 2E 02 F1 | 	add	local05, objptr
22058     10 2E 06 F1 | 	add	local05, #16
2205c     17 01 68 FC | 	wrlong	#0, local05
22060     14 2F 02 F6 | 	mov	local05, local02
22064     01 2E 66 F0 | 	shl	local05, #1
22068     14 2F 02 F1 | 	add	local05, local02
2206c     03 2E 66 F0 | 	shl	local05, #3
22070     F2 2E 02 F1 | 	add	local05, objptr
22074     14 2E 06 F1 | 	add	local05, #20
22078     17 FF 59 FC | 	wrword	#255, local05
2207c     14 2F 02 F6 | 	mov	local05, local02
22080     01 2E 66 F0 | 	shl	local05, #1
22084     3D 00 00 FF 
22088     7C E5 05 F1 | 	add	objptr, ##31612
2208c     F2 2E 02 F1 | 	add	local05, objptr
22090     17 FF 59 FC | 	wrword	#255, local05
22094     01 28 06 F1 | 	add	local02, #1
22098     08 28 56 F2 | 	cmps	local02, #8 wc
2209c     52 00 00 FF 
220a0     B4 E4 85 F1 | 	sub	objptr, ##42164
220a4     E4 FE 9F CD |  if_b	jmp	#LR__2621
220a8                 | LR__2622
220a8     00 6E 20 FF 
220ac     00 30 06 F6 | 	mov	local06, ##1088159744
220b0                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
220b0     03 2E 06 F6 | 	mov	local05, #3
220b4                 | LR__2623
220b4     18 13 02 F6 | 	mov	arg01, local06
220b8     CE C3 1F FF 
220bc     7D 14 06 F6 | 	mov	arg02, ##1065852029
220c0     CC 6C B0 FD | 	call	#__system___float_mul
220c4     FD 30 02 F6 | 	mov	local06, result1
220c8     FA 2F 6E FB | 	djnz	local05, #LR__2623
220cc     00 28 06 F6 | 	mov	local02, #0
220d0                 | LR__2624
220d0     14 2D 02 F6 | 	mov	local04, local02
220d4     02 2C 66 F0 | 	shl	local04, #2
220d8     14 00 00 FF 
220dc     D8 E4 05 F1 | 	add	objptr, ##10456
220e0     F2 2C 02 F1 | 	add	local04, objptr
220e4     16 31 62 FC | 	wrlong	local06, local04
220e8     18 13 02 F6 | 	mov	arg01, local06
220ec     CE C3 1F FF 
220f0     7D 14 06 F6 | 	mov	arg02, ##1065852029
220f4     14 00 00 FF 
220f8     D8 E4 85 F1 | 	sub	objptr, ##10456
220fc     90 6C B0 FD | 	call	#__system___float_mul
22100     FD 30 02 F6 | 	mov	local06, result1
22104     01 28 06 F1 | 	add	local02, #1
22108     0C 28 56 F2 | 	cmps	local02, #12 wc
2210c     C0 FF 9F CD |  if_b	jmp	#LR__2624
22110     14 00 00 FF 
22114     08 E5 05 F1 | 	add	objptr, ##10504
22118     F2 50 6B FC | 	wrlong	#424, objptr
2211c     04 E4 05 F1 | 	add	objptr, #4
22120     F2 20 6B FC | 	wrlong	#400, objptr
22124     04 E4 05 F1 | 	add	objptr, #4
22128     F2 F2 6A FC | 	wrlong	#377, objptr
2212c     04 E4 05 F1 | 	add	objptr, #4
22130     F2 C8 6A FC | 	wrlong	#356, objptr
22134     04 E4 05 F1 | 	add	objptr, #4
22138     F2 A0 6A FC | 	wrlong	#336, objptr
2213c     04 E4 05 F1 | 	add	objptr, #4
22140     F2 7A 6A FC | 	wrlong	#317, objptr
22144     04 E4 05 F1 | 	add	objptr, #4
22148     F2 58 6A FC | 	wrlong	#300, objptr
2214c     04 E4 05 F1 | 	add	objptr, #4
22150     F2 36 6A FC | 	wrlong	#283, objptr
22154     04 E4 05 F1 | 	add	objptr, #4
22158     F2 16 6A FC | 	wrlong	#267, objptr
2215c     04 E4 05 F1 | 	add	objptr, #4
22160     F2 F8 69 FC | 	wrlong	#252, objptr
22164     04 E4 05 F1 | 	add	objptr, #4
22168     F2 DC 69 FC | 	wrlong	#238, objptr
2216c     04 E4 05 F1 | 	add	objptr, #4
22170     F2 C0 69 FC | 	wrlong	#224, objptr
22174     3D 00 00 FF 
22178     8E E5 05 F1 | 	add	objptr, ##31630
2217c     F2 00 59 FC | 	wrword	#128, objptr
22180     02 E4 85 F1 | 	sub	objptr, #2
22184     F2 00 59 FC | 	wrword	#128, objptr
22188     52 00 00 FF 
2218c     C0 E4 85 F1 | 	sub	objptr, ##42176
22190     A7 F0 03 F6 | 	mov	ptra, fp
22194     B2 00 A0 FD | 	call	#popregs_
22198                 | _init_audio_ret
22198     2D 00 64 FD | 	ret
2219c                 | 
2219c                 | ' 
2219c                 | ' '------------------- Error messages
2219c                 | ' 
2219c                 | ' sub init_error_strings
2219c                 | _init_error_strings
2219c     B2 01 00 FF 
221a0     8F 01 06 F6 | 	mov	_var01, ##@LR__5943
221a4     45 00 00 FF 
221a8     7C E4 05 F1 | 	add	objptr, ##35452
221ac     F2 00 62 FC | 	wrlong	_var01, objptr
221b0     B2 01 00 FF 
221b4     90 01 06 F6 | 	mov	_var01, ##@LR__5944
221b8     04 E4 05 F1 | 	add	objptr, #4
221bc     F2 00 62 FC | 	wrlong	_var01, objptr
221c0     B2 01 00 FF 
221c4     B4 01 06 F6 | 	mov	_var01, ##@LR__5945
221c8     04 E4 05 F1 | 	add	objptr, #4
221cc     F2 00 62 FC | 	wrlong	_var01, objptr
221d0     B2 01 00 FF 
221d4     D4 01 06 F6 | 	mov	_var01, ##@LR__5946
221d8     04 E4 05 F1 | 	add	objptr, #4
221dc     F2 00 62 FC | 	wrlong	_var01, objptr
221e0     B2 01 00 FF 
221e4     ED 01 06 F6 | 	mov	_var01, ##@LR__5947
221e8     04 E4 05 F1 | 	add	objptr, #4
221ec     F2 00 62 FC | 	wrlong	_var01, objptr
221f0     B3 01 00 FF 
221f4     08 00 06 F6 | 	mov	_var01, ##@LR__5948
221f8     04 E4 05 F1 | 	add	objptr, #4
221fc     F2 00 62 FC | 	wrlong	_var01, objptr
22200     B3 01 00 FF 
22204     29 00 06 F6 | 	mov	_var01, ##@LR__5949
22208     04 E4 05 F1 | 	add	objptr, #4
2220c     F2 00 62 FC | 	wrlong	_var01, objptr
22210     B3 01 00 FF 
22214     56 00 06 F6 | 	mov	_var01, ##@LR__5950
22218     04 E4 05 F1 | 	add	objptr, #4
2221c     F2 00 62 FC | 	wrlong	_var01, objptr
22220     B3 01 00 FF 
22224     80 00 06 F6 | 	mov	_var01, ##@LR__5951
22228     04 E4 05 F1 | 	add	objptr, #4
2222c     F2 00 62 FC | 	wrlong	_var01, objptr
22230     B3 01 00 FF 
22234     98 00 06 F6 | 	mov	_var01, ##@LR__5952
22238     04 E4 05 F1 | 	add	objptr, #4
2223c     F2 00 62 FC | 	wrlong	_var01, objptr
22240     B3 01 00 FF 
22244     B8 00 06 F6 | 	mov	_var01, ##@LR__5953
22248     04 E4 05 F1 | 	add	objptr, #4
2224c     F2 00 62 FC | 	wrlong	_var01, objptr
22250     B3 01 00 FF 
22254     CE 00 06 F6 | 	mov	_var01, ##@LR__5954
22258     04 E4 05 F1 | 	add	objptr, #4
2225c     F2 00 62 FC | 	wrlong	_var01, objptr
22260     B3 01 00 FF 
22264     EB 00 06 F6 | 	mov	_var01, ##@LR__5955
22268     04 E4 05 F1 | 	add	objptr, #4
2226c     F2 00 62 FC | 	wrlong	_var01, objptr
22270     B3 01 00 FF 
22274     0E 01 06 F6 | 	mov	_var01, ##@LR__5956
22278     04 E4 05 F1 | 	add	objptr, #4
2227c     F2 00 62 FC | 	wrlong	_var01, objptr
22280     B3 01 00 FF 
22284     34 01 06 F6 | 	mov	_var01, ##@LR__5957
22288     04 E4 05 F1 | 	add	objptr, #4
2228c     F2 00 62 FC | 	wrlong	_var01, objptr
22290     B3 01 00 FF 
22294     4F 01 06 F6 | 	mov	_var01, ##@LR__5958
22298     04 E4 05 F1 | 	add	objptr, #4
2229c     F2 00 62 FC | 	wrlong	_var01, objptr
222a0     B3 01 00 FF 
222a4     5F 01 06 F6 | 	mov	_var01, ##@LR__5959
222a8     04 E4 05 F1 | 	add	objptr, #4
222ac     F2 00 62 FC | 	wrlong	_var01, objptr
222b0     B3 01 00 FF 
222b4     6E 01 06 F6 | 	mov	_var01, ##@LR__5960
222b8     04 E4 05 F1 | 	add	objptr, #4
222bc     F2 00 62 FC | 	wrlong	_var01, objptr
222c0     B3 01 00 FF 
222c4     88 01 06 F6 | 	mov	_var01, ##@LR__5961
222c8     04 E4 05 F1 | 	add	objptr, #4
222cc     F2 00 62 FC | 	wrlong	_var01, objptr
222d0     B3 01 00 FF 
222d4     99 01 06 F6 | 	mov	_var01, ##@LR__5962
222d8     04 E4 05 F1 | 	add	objptr, #4
222dc     F2 00 62 FC | 	wrlong	_var01, objptr
222e0     B3 01 00 FF 
222e4     B0 01 06 F6 | 	mov	_var01, ##@LR__5963
222e8     04 E4 05 F1 | 	add	objptr, #4
222ec     F2 00 62 FC | 	wrlong	_var01, objptr
222f0     B3 01 00 FF 
222f4     C3 01 06 F6 | 	mov	_var01, ##@LR__5964
222f8     04 E4 05 F1 | 	add	objptr, #4
222fc     F2 00 62 FC | 	wrlong	_var01, objptr
22300     B3 01 00 FF 
22304     D2 01 06 F6 | 	mov	_var01, ##@LR__5965
22308     04 E4 05 F1 | 	add	objptr, #4
2230c     F2 00 62 FC | 	wrlong	_var01, objptr
22310     B3 01 00 FF 
22314     EE 01 06 F6 | 	mov	_var01, ##@LR__5966
22318     04 E4 05 F1 | 	add	objptr, #4
2231c     F2 00 62 FC | 	wrlong	_var01, objptr
22320     B3 01 00 FF 
22324     FE 01 06 F6 | 	mov	_var01, ##@LR__5967
22328     04 E4 05 F1 | 	add	objptr, #4
2232c     F2 00 62 FC | 	wrlong	_var01, objptr
22330     B4 01 00 FF 
22334     0E 00 06 F6 | 	mov	_var01, ##@LR__5968
22338     04 E4 05 F1 | 	add	objptr, #4
2233c     F2 00 62 FC | 	wrlong	_var01, objptr
22340     B4 01 00 FF 
22344     41 00 06 F6 | 	mov	_var01, ##@LR__5969
22348     04 E4 05 F1 | 	add	objptr, #4
2234c     F2 00 62 FC | 	wrlong	_var01, objptr
22350     B4 01 00 FF 
22354     5C 00 06 F6 | 	mov	_var01, ##@LR__5970
22358     04 E4 05 F1 | 	add	objptr, #4
2235c     F2 00 62 FC | 	wrlong	_var01, objptr
22360     B4 01 00 FF 
22364     71 00 06 F6 | 	mov	_var01, ##@LR__5971
22368     04 E4 05 F1 | 	add	objptr, #4
2236c     F2 00 62 FC | 	wrlong	_var01, objptr
22370     B4 01 00 FF 
22374     7D 00 06 F6 | 	mov	_var01, ##@LR__5972
22378     04 E4 05 F1 | 	add	objptr, #4
2237c     F2 00 62 FC | 	wrlong	_var01, objptr
22380     B4 01 00 FF 
22384     8E 00 06 F6 | 	mov	_var01, ##@LR__5973
22388     04 E4 05 F1 | 	add	objptr, #4
2238c     F2 00 62 FC | 	wrlong	_var01, objptr
22390     B4 01 00 FF 
22394     9E 00 06 F6 | 	mov	_var01, ##@LR__5974
22398     04 E4 05 F1 | 	add	objptr, #4
2239c     F2 00 62 FC | 	wrlong	_var01, objptr
223a0     B4 01 00 FF 
223a4     B9 00 06 F6 | 	mov	_var01, ##@LR__5975
223a8     04 E4 05 F1 | 	add	objptr, #4
223ac     F2 00 62 FC | 	wrlong	_var01, objptr
223b0     B4 01 00 FF 
223b4     C9 00 06 F6 | 	mov	_var01, ##@LR__5976
223b8     04 E4 05 F1 | 	add	objptr, #4
223bc     F2 00 62 FC | 	wrlong	_var01, objptr
223c0     B4 01 00 FF 
223c4     D7 00 06 F6 | 	mov	_var01, ##@LR__5977
223c8     04 E4 05 F1 | 	add	objptr, #4
223cc     F2 00 62 FC | 	wrlong	_var01, objptr
223d0     B4 01 00 FF 
223d4     F1 00 06 F6 | 	mov	_var01, ##@LR__5978
223d8     04 E4 05 F1 | 	add	objptr, #4
223dc     F2 00 62 FC | 	wrlong	_var01, objptr
223e0     B4 01 00 FF 
223e4     24 01 06 F6 | 	mov	_var01, ##@LR__5979
223e8     04 E4 05 F1 | 	add	objptr, #4
223ec     F2 00 62 FC | 	wrlong	_var01, objptr
223f0     B4 01 00 FF 
223f4     3C 01 06 F6 | 	mov	_var01, ##@LR__5980
223f8     04 E4 05 F1 | 	add	objptr, #4
223fc     F2 00 62 FC | 	wrlong	_var01, objptr
22400     B4 01 00 FF 
22404     57 01 06 F6 | 	mov	_var01, ##@LR__5981
22408     04 E4 05 F1 | 	add	objptr, #4
2240c     F2 00 62 FC | 	wrlong	_var01, objptr
22410     B4 01 00 FF 
22414     74 01 06 F6 | 	mov	_var01, ##@LR__5982
22418     04 E4 05 F1 | 	add	objptr, #4
2241c     F2 00 62 FC | 	wrlong	_var01, objptr
22420     B4 01 00 FF 
22424     8D 01 06 F6 | 	mov	_var01, ##@LR__5983
22428     04 E4 05 F1 | 	add	objptr, #4
2242c     F2 00 62 FC | 	wrlong	_var01, objptr
22430     B4 01 00 FF 
22434     AC 01 06 F6 | 	mov	_var01, ##@LR__5984
22438     04 E4 05 F1 | 	add	objptr, #4
2243c     F2 00 62 FC | 	wrlong	_var01, objptr
22440     B4 01 00 FF 
22444     BA 01 06 F6 | 	mov	_var01, ##@LR__5985
22448     04 E4 05 F1 | 	add	objptr, #4
2244c     F2 00 62 FC | 	wrlong	_var01, objptr
22450     B4 01 00 FF 
22454     E7 01 06 F6 | 	mov	_var01, ##@LR__5986
22458     04 E4 05 F1 | 	add	objptr, #4
2245c     F2 00 62 FC | 	wrlong	_var01, objptr
22460     B4 01 00 FF 
22464     F4 01 06 F6 | 	mov	_var01, ##@LR__5987
22468     04 E4 05 F1 | 	add	objptr, #4
2246c     F2 00 62 FC | 	wrlong	_var01, objptr
22470     B5 01 00 FF 
22474     08 00 06 F6 | 	mov	_var01, ##@LR__5988
22478     04 E4 05 F1 | 	add	objptr, #4
2247c     F2 00 62 FC | 	wrlong	_var01, objptr
22480     B5 01 00 FF 
22484     2C 00 06 F6 | 	mov	_var01, ##@LR__5989
22488     04 E4 05 F1 | 	add	objptr, #4
2248c     F2 00 62 FC | 	wrlong	_var01, objptr
22490     B5 01 00 FF 
22494     43 00 06 F6 | 	mov	_var01, ##@LR__5990
22498     04 E4 05 F1 | 	add	objptr, #4
2249c     F2 00 62 FC | 	wrlong	_var01, objptr
224a0     B5 01 00 FF 
224a4     56 00 06 F6 | 	mov	_var01, ##@LR__5991
224a8     04 E4 05 F1 | 	add	objptr, #4
224ac     F2 00 62 FC | 	wrlong	_var01, objptr
224b0     B5 01 00 FF 
224b4     6D 00 06 F6 | 	mov	_var01, ##@LR__5992
224b8     04 E4 05 F1 | 	add	objptr, #4
224bc     F2 00 62 FC | 	wrlong	_var01, objptr
224c0     B5 01 00 FF 
224c4     86 00 06 F6 | 	mov	_var01, ##@LR__5993
224c8     04 E4 05 F1 | 	add	objptr, #4
224cc     F2 00 62 FC | 	wrlong	_var01, objptr
224d0     B5 01 00 FF 
224d4     A8 00 06 F6 | 	mov	_var01, ##@LR__5994
224d8     04 E4 05 F1 | 	add	objptr, #4
224dc     F2 00 62 FC | 	wrlong	_var01, objptr
224e0     B5 01 00 FF 
224e4     BB 00 06 F6 | 	mov	_var01, ##@LR__5995
224e8     04 E4 05 F1 | 	add	objptr, #4
224ec     F2 00 62 FC | 	wrlong	_var01, objptr
224f0     B5 01 00 FF 
224f4     CB 00 06 F6 | 	mov	_var01, ##@LR__5996
224f8     04 E4 05 F1 | 	add	objptr, #4
224fc     F2 00 62 FC | 	wrlong	_var01, objptr
22500     B5 01 00 FF 
22504     E3 00 06 F6 | 	mov	_var01, ##@LR__5997
22508     04 E4 05 F1 | 	add	objptr, #4
2250c     F2 00 62 FC | 	wrlong	_var01, objptr
22510     B5 01 00 FF 
22514     FA 00 06 F6 | 	mov	_var01, ##@LR__5998
22518     04 E4 05 F1 | 	add	objptr, #4
2251c     F2 00 62 FC | 	wrlong	_var01, objptr
22520     45 00 00 FF 
22524     58 E5 85 F1 | 	sub	objptr, ##35672
22528                 | _init_error_strings_ret
22528     2D 00 64 FD | 	ret
2252c                 | 
2252c                 | '         
2252c                 | ' sub printerror(err as integer, linenum=0 as integer)
2252c                 | _printerror
2252c     02 4A 05 F6 | 	mov	COUNT_, #2
22530     A8 00 A0 FD | 	call	#pushregs_
22534     09 27 02 F6 | 	mov	local01, arg01
22538     0A 29 02 F6 | 	mov	local02, arg02
2253c     B5 01 00 FF 
22540     07 13 06 F6 | 	mov	arg01, ##@LR__5999
22544     0C 21 B0 FD | 	call	#_hg010b_spin2_write
22548     13 13 02 F6 | 	mov	arg01, local01
2254c     A8 26 B0 FD | 	call	#_hg010b_spin2_inttostr
22550     FD 12 02 F6 | 	mov	arg01, result1
22554     FC 20 B0 FD | 	call	#_hg010b_spin2_write
22558     B5 01 00 FF 
2255c     0E 13 06 F6 | 	mov	arg01, ##@LR__6000
22560     F0 20 B0 FD | 	call	#_hg010b_spin2_write
22564     02 26 66 F0 | 	shl	local01, #2
22568     45 00 00 FF 
2256c     7C E4 05 F1 | 	add	objptr, ##35452
22570     F2 26 02 F1 | 	add	local01, objptr
22574     13 13 02 FB | 	rdlong	arg01, local01
22578     45 00 00 FF 
2257c     7C E4 85 F1 | 	sub	objptr, ##35452
22580     D0 20 B0 FD | 	call	#_hg010b_spin2_write
22584                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
22584                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
22584     01 28 56 F2 | 	cmps	local02, #1 wc
22588     24 00 90 CD |  if_b	jmp	#LR__2630
2258c     B5 01 00 FF 
22590     12 13 06 F6 | 	mov	arg01, ##@LR__6001
22594     BC 20 B0 FD | 	call	#_hg010b_spin2_write
22598     14 13 02 F6 | 	mov	arg01, local02
2259c     58 26 B0 FD | 	call	#_hg010b_spin2_inttostr
225a0     FD 12 02 F6 | 	mov	arg01, result1
225a4                 | ' 
225a4                 | ' write(text)
225a4     AC 20 B0 FD | 	call	#_hg010b_spin2_write
225a8                 | ' crlf
225a8     A8 25 B0 FD | 	call	#_hg010b_spin2_crlf
225ac     10 00 90 FD | 	jmp	#LR__2631
225b0                 | LR__2630
225b0     B5 01 00 FF 
225b4     1C 13 06 F6 | 	mov	arg01, ##@LR__6002
225b8                 | ' 
225b8                 | ' write(text)
225b8     98 20 B0 FD | 	call	#_hg010b_spin2_write
225bc                 | ' crlf
225bc     94 25 B0 FD | 	call	#_hg010b_spin2_crlf
225c0                 | LR__2631
225c0     A7 F0 03 F6 | 	mov	ptra, fp
225c4     B2 00 A0 FD | 	call	#popregs_
225c8                 | _printerror_ret
225c8     2D 00 64 FD | 	ret
225cc                 | 
225cc                 | ' 
225cc                 | ' '' ------------------------------- Hardware start/stop/initialization 
225cc                 | ' 
225cc                 | ' sub startpsram
225cc                 | _startpsram
225cc     00 12 06 F6 | 	mov	arg01, #0
225d0     0A 14 C6 F9 | 	decod	arg02, #10
225d4     0B 16 06 F6 | 	mov	arg03, #11
225d8     07 18 06 F6 | 	mov	arg04, #7
225dc     0B 00 00 FF 
225e0     CC E4 05 F1 | 	add	objptr, ##5836
225e4     7C 2A B0 FD | 	call	#_psram_spin2_startx
225e8     2B 00 00 FF 
225ec     3C E5 05 F1 | 	add	objptr, ##22332
225f0     F2 FA 61 FC | 	wrlong	result1, objptr
225f4                 | '     return $7FF00 + cog*12
225f4     0C E4 05 F1 | 	add	objptr, #12
225f8     FF 03 80 FF 
225fc     F2 00 6A FC | 	wrlong	##524032, objptr
22600     37 00 00 FF 
22604     14 E4 85 F1 | 	sub	objptr, ##28180
22608                 | _startpsram_ret
22608     2D 00 64 FD | 	ret
2260c                 | 
2260c                 | ' 
2260c                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
2260c                 | _startvideo
2260c     01 4A 05 F6 | 	mov	COUNT_, #1
22610     A8 00 A0 FD | 	call	#pushregs_
22614     37 00 00 FF 
22618     14 E4 05 F1 | 	add	objptr, ##28180
2261c     F2 18 02 FB | 	rdlong	arg04, objptr
22620     37 00 00 FF 
22624     14 E4 85 F1 | 	sub	objptr, ##28180
22628     0A 13 02 F6 | 	mov	arg01, arg02
2262c     0C 15 02 F6 | 	mov	arg02, arg04
22630     18 08 B0 FD | 	call	#_hg010b_spin2_start
22634     37 00 00 FF 
22638     00 E4 05 F1 | 	add	objptr, ##28160
2263c     F2 FA 61 FC | 	wrlong	result1, objptr
22640                 | ' 
22640                 | ' videocog=v.start(pin,mbox)
22640                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
22640     00 26 06 F6 | 	mov	local01, #0
22644     2B 00 00 FF 
22648     34 E5 85 F1 | 	sub	objptr, ##22324
2264c                 | LR__2640
2264c     13 13 02 F6 | 	mov	arg01, local01
22650     00 28 00 FF 
22654     00 14 06 F6 | 	mov	arg02, ##5242880
22658     60 2E B0 FD | 	call	#_psram_spin2_setQos
2265c     01 26 06 F1 | 	add	local01, #1
22660     08 26 56 F2 | 	cmps	local01, #8 wc
22664     E4 FF 9F CD |  if_b	jmp	#LR__2640
22668     2B 00 00 FF 
2266c     34 E5 05 F1 | 	add	objptr, ##22324
22670     F2 12 02 FB | 	rdlong	arg01, objptr
22674     7A 00 02 FF 
22678     00 14 06 F6 | 	mov	arg02, ##67171328
2267c     2B 00 00 FF 
22680     34 E5 85 F1 | 	sub	objptr, ##22324
22684     34 2E B0 FD | 	call	#_psram_spin2_setQos
22688     0B 00 00 FF 
2268c     CC E4 85 F1 | 	sub	objptr, ##5836
22690                 | ' psram.setQoS(videocog, $0400f400) 
22690                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
22690     F2 14 02 F6 | 	mov	arg02, objptr
22694     00 F0 04 FF 
22698     00 14 46 F5 | 	or	arg02, ##165675008
2269c     00 16 06 F6 | 	mov	arg03, #0
226a0     00 18 06 F6 | 	mov	arg04, #0
226a4     00 12 06 F6 | 	mov	arg01, #0
226a8     14 43 B0 FD | 	call	#__system___basic_open
226ac                 | ' return videocog
226ac     37 00 00 FF 
226b0     00 E4 05 F1 | 	add	objptr, ##28160
226b4     F2 FA 01 FB | 	rdlong	result1, objptr
226b8     37 00 00 FF 
226bc     00 E4 85 F1 | 	sub	objptr, ##28160
226c0     A7 F0 03 F6 | 	mov	ptra, fp
226c4     B2 00 A0 FD | 	call	#popregs_
226c8                 | _startvideo_ret
226c8     2D 00 64 FD | 	ret
226cc                 | 
226cc                 | ' 
226cc                 | ' 
226cc                 | ' 
226cc                 | ' '' ------------------------------- Convenient psram peek/poke
226cc                 | ' 
226cc                 | ' sub pslpoke(addr as ulong,value as ulong)
226cc                 | _pslpoke
226cc     00 4A 05 F6 | 	mov	COUNT_, #0
226d0     A8 00 A0 FD | 	call	#pushregs_
226d4     08 F0 07 F1 | 	add	ptra, #8
226d8     A7 12 62 FC | 	wrlong	arg01, fp
226dc     04 4E 05 F1 | 	add	fp, #4
226e0     A7 14 62 FC | 	wrlong	arg02, fp
226e4     A7 12 02 F6 | 	mov	arg01, fp
226e8     04 4E 85 F1 | 	sub	fp, #4
226ec     A7 14 02 FB | 	rdlong	arg02, fp
226f0     04 16 06 F6 | 	mov	arg03, #4
226f4     0B 00 00 FF 
226f8     CC E4 05 F1 | 	add	objptr, ##5836
226fc     2C 2C B0 FD | 	call	#_psram_spin2_write
22700     0B 00 00 FF 
22704     CC E4 85 F1 | 	sub	objptr, ##5836
22708     A7 F0 03 F6 | 	mov	ptra, fp
2270c     B2 00 A0 FD | 	call	#popregs_
22710                 | _pslpoke_ret
22710     2D 00 64 FD | 	ret
22714                 | 
22714                 | ' 
22714                 | ' sub psdpoke(addr as ulong,value as ulong)
22714                 | _psdpoke
22714     00 4A 05 F6 | 	mov	COUNT_, #0
22718     A8 00 A0 FD | 	call	#pushregs_
2271c     08 F0 07 F1 | 	add	ptra, #8
22720     A7 12 62 FC | 	wrlong	arg01, fp
22724     04 4E 05 F1 | 	add	fp, #4
22728     A7 14 62 FC | 	wrlong	arg02, fp
2272c     A7 12 02 F6 | 	mov	arg01, fp
22730     04 4E 85 F1 | 	sub	fp, #4
22734     A7 14 02 FB | 	rdlong	arg02, fp
22738     02 16 06 F6 | 	mov	arg03, #2
2273c     0B 00 00 FF 
22740     CC E4 05 F1 | 	add	objptr, ##5836
22744     E4 2B B0 FD | 	call	#_psram_spin2_write
22748     0B 00 00 FF 
2274c     CC E4 85 F1 | 	sub	objptr, ##5836
22750     A7 F0 03 F6 | 	mov	ptra, fp
22754     B2 00 A0 FD | 	call	#popregs_
22758                 | _psdpoke_ret
22758     2D 00 64 FD | 	ret
2275c                 | 
2275c                 | ' 
2275c                 | ' sub pspoke(addr as ulong,value as ulong)
2275c                 | _pspoke
2275c     00 4A 05 F6 | 	mov	COUNT_, #0
22760     A8 00 A0 FD | 	call	#pushregs_
22764     08 F0 07 F1 | 	add	ptra, #8
22768     A7 12 62 FC | 	wrlong	arg01, fp
2276c     04 4E 05 F1 | 	add	fp, #4
22770     A7 14 62 FC | 	wrlong	arg02, fp
22774     A7 12 02 F6 | 	mov	arg01, fp
22778     04 4E 85 F1 | 	sub	fp, #4
2277c     A7 14 02 FB | 	rdlong	arg02, fp
22780     01 16 06 F6 | 	mov	arg03, #1
22784     0B 00 00 FF 
22788     CC E4 05 F1 | 	add	objptr, ##5836
2278c     9C 2B B0 FD | 	call	#_psram_spin2_write
22790     0B 00 00 FF 
22794     CC E4 85 F1 | 	sub	objptr, ##5836
22798     A7 F0 03 F6 | 	mov	ptra, fp
2279c     B2 00 A0 FD | 	call	#popregs_
227a0                 | _pspoke_ret
227a0     2D 00 64 FD | 	ret
227a4                 | 
227a4                 | ' 
227a4                 | ' function pspeek(adr as ulong) as ubyte
227a4                 | _pspeek
227a4     00 4A 05 F6 | 	mov	COUNT_, #0
227a8     A8 00 A0 FD | 	call	#pushregs_
227ac     0C F0 07 F1 | 	add	ptra, #12
227b0     04 4E 05 F1 | 	add	fp, #4
227b4     A7 12 62 FC | 	wrlong	arg01, fp
227b8     04 4E 05 F1 | 	add	fp, #4
227bc     A7 12 02 F6 | 	mov	arg01, fp
227c0     04 4E 85 F1 | 	sub	fp, #4
227c4     A7 14 02 FB | 	rdlong	arg02, fp
227c8     04 4E 85 F1 | 	sub	fp, #4
227cc     01 16 06 F6 | 	mov	arg03, #1
227d0     0B 00 00 FF 
227d4     CC E4 05 F1 | 	add	objptr, ##5836
227d8     B4 2A B0 FD | 	call	#_psram_spin2_read1
227dc     0B 00 00 FF 
227e0     CC E4 85 F1 | 	sub	objptr, ##5836
227e4                 | ' psram.read1(varptr(res),adr,1)
227e4                 | ' return res
227e4     08 4E 05 F1 | 	add	fp, #8
227e8     A7 FA C1 FA | 	rdbyte	result1, fp
227ec     08 4E 85 F1 | 	sub	fp, #8
227f0     A7 F0 03 F6 | 	mov	ptra, fp
227f4     B2 00 A0 FD | 	call	#popregs_
227f8                 | _pspeek_ret
227f8     2D 00 64 FD | 	ret
227fc                 | 
227fc                 | ' 
227fc                 | ' function pslpeek(adr as ulong) as ulong
227fc                 | _pslpeek
227fc     00 4A 05 F6 | 	mov	COUNT_, #0
22800     A8 00 A0 FD | 	call	#pushregs_
22804     0C F0 07 F1 | 	add	ptra, #12
22808     04 4E 05 F1 | 	add	fp, #4
2280c     A7 12 62 FC | 	wrlong	arg01, fp
22810     04 4E 05 F1 | 	add	fp, #4
22814     A7 12 02 F6 | 	mov	arg01, fp
22818     04 4E 85 F1 | 	sub	fp, #4
2281c     A7 14 02 FB | 	rdlong	arg02, fp
22820     04 4E 85 F1 | 	sub	fp, #4
22824     04 16 06 F6 | 	mov	arg03, #4
22828     0B 00 00 FF 
2282c     CC E4 05 F1 | 	add	objptr, ##5836
22830     5C 2A B0 FD | 	call	#_psram_spin2_read1
22834     0B 00 00 FF 
22838     CC E4 85 F1 | 	sub	objptr, ##5836
2283c                 | ' psram.read1(varptr(res),adr,4)
2283c                 | ' return res
2283c     08 4E 05 F1 | 	add	fp, #8
22840     A7 FA 01 FB | 	rdlong	result1, fp
22844     08 4E 85 F1 | 	sub	fp, #8
22848     A7 F0 03 F6 | 	mov	ptra, fp
2284c     B2 00 A0 FD | 	call	#popregs_
22850                 | _pslpeek_ret
22850     2D 00 64 FD | 	ret
22854                 | 
22854                 | ' 
22854                 | ' function psdpeek(adr as ulong) as ulong
22854                 | _psdpeek
22854     00 4A 05 F6 | 	mov	COUNT_, #0
22858     A8 00 A0 FD | 	call	#pushregs_
2285c     0C F0 07 F1 | 	add	ptra, #12
22860     04 4E 05 F1 | 	add	fp, #4
22864     A7 12 62 FC | 	wrlong	arg01, fp
22868     04 4E 05 F1 | 	add	fp, #4
2286c     A7 12 02 F6 | 	mov	arg01, fp
22870     04 4E 85 F1 | 	sub	fp, #4
22874     A7 14 02 FB | 	rdlong	arg02, fp
22878     04 4E 85 F1 | 	sub	fp, #4
2287c     02 16 06 F6 | 	mov	arg03, #2
22880     0B 00 00 FF 
22884     CC E4 05 F1 | 	add	objptr, ##5836
22888     04 2A B0 FD | 	call	#_psram_spin2_read1
2288c     0B 00 00 FF 
22890     CC E4 85 F1 | 	sub	objptr, ##5836
22894                 | ' psram.read1(varptr(res),adr,2)
22894                 | ' return res
22894     08 4E 05 F1 | 	add	fp, #8
22898     A7 FA E1 FA | 	rdword	result1, fp
2289c     08 4E 85 F1 | 	sub	fp, #8
228a0     A7 F0 03 F6 | 	mov	ptra, fp
228a4     B2 00 A0 FD | 	call	#popregs_
228a8                 | _psdpeek_ret
228a8     2D 00 64 FD | 	ret
228ac                 | 
228ac                 | ' 
228ac                 | ' '' ------------------------------- USB keyboard scan to char translator
228ac                 | ' 
228ac                 | ' function scantochar(key)
228ac                 | _scantochar
228ac                 | ' 
228ac                 | ' select case (key shr 8) and 255
228ac     09 01 02 F6 | 	mov	_var01, arg01
228b0     08 00 C6 F0 | 	sar	_var01, #8
228b4     FF 00 0E F5 | 	and	_var01, #255 wz
228b8     24 00 90 AD |  if_e	jmp	#LR__2650
228bc     02 00 0E F2 | 	cmp	_var01, #2 wz
228c0     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
228c4     30 00 90 AD |  if_e	jmp	#LR__2651
228c8     40 00 0E F2 | 	cmp	_var01, #64 wz
228cc     44 00 90 AD |  if_e	jmp	#LR__2652
228d0     42 00 0E F2 | 	cmp	_var01, #66 wz
228d4     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
228d8     70 00 90 5D |  if_ne	jmp	#LR__2654
228dc     50 00 90 FD | 	jmp	#LR__2653
228e0                 | LR__2650
228e0     09 FB 01 F6 | 	mov	result1, arg01
228e4     7F FA 05 F5 | 	and	result1, #127
228e8     02 FA 65 F0 | 	shl	result1, #2
228ec     F5 FA 01 F1 | 	add	result1, ptr__dat__
228f0     FD FA C1 FA | 	rdbyte	result1, result1
228f4     54 00 90 FD | 	jmp	#_scantochar_ret
228f8                 | LR__2651
228f8     09 FB 01 F6 | 	mov	result1, arg01
228fc     7F FA 05 F5 | 	and	result1, #127
22900     02 FA 65 F0 | 	shl	result1, #2
22904     01 FA 05 F1 | 	add	result1, #1
22908     F5 FA 01 F1 | 	add	result1, ptr__dat__
2290c     FD FA C1 FA | 	rdbyte	result1, result1
22910     38 00 90 FD | 	jmp	#_scantochar_ret
22914                 | LR__2652
22914     09 FB 01 F6 | 	mov	result1, arg01
22918     7F FA 05 F5 | 	and	result1, #127
2291c     02 FA 65 F0 | 	shl	result1, #2
22920     02 FA 05 F1 | 	add	result1, #2
22924     F5 FA 01 F1 | 	add	result1, ptr__dat__
22928     FD FA C1 FA | 	rdbyte	result1, result1
2292c     1C 00 90 FD | 	jmp	#_scantochar_ret
22930                 | LR__2653
22930     09 FB 01 F6 | 	mov	result1, arg01
22934     7F FA 05 F5 | 	and	result1, #127
22938     02 FA 65 F0 | 	shl	result1, #2
2293c     03 FA 05 F1 | 	add	result1, #3
22940     F5 FA 01 F1 | 	add	result1, ptr__dat__
22944     FD FA C1 FA | 	rdbyte	result1, result1
22948     00 00 90 FD | 	jmp	#_scantochar_ret
2294c                 | LR__2654
2294c                 | _scantochar_ret
2294c     2D 00 64 FD | 	ret
22950                 | 
22950                 | _program
22950     01 4A 05 F6 | 	mov	COUNT_, #1
22954     A8 00 A0 FD | 	call	#pushregs_
22958     70 FC BF FD | 	call	#_startpsram
2295c     40 12 06 F6 | 	mov	arg01, #64
22960     00 14 06 F6 | 	mov	arg02, #0
22964     00 16 06 F6 | 	mov	arg03, #0
22968     A0 FC BF FD | 	call	#_startvideo
2296c     37 00 00 FF 
22970     14 E4 05 F1 | 	add	objptr, ##28180
22974     F2 12 02 FB | 	rdlong	arg01, objptr
22978     00 14 06 F6 | 	mov	arg02, #0
2297c     FB 03 00 FF 
22980     00 17 06 F6 | 	mov	arg03, ##521984
22984     2B 00 00 FF 
22988     48 E5 85 F1 | 	sub	objptr, ##22344
2298c     24 2F B0 FD | 	call	#_audio096_spin2_start
22990     FE 16 02 F6 | 	mov	arg03, result2
22994     2B 00 00 FF 
22998     30 E5 05 F1 | 	add	objptr, ##22320
2299c     F2 FA 61 FC | 	wrlong	result1, objptr
229a0     14 E4 05 F1 | 	add	objptr, #20
229a4     F2 16 62 FC | 	wrlong	arg03, objptr
229a8     37 00 00 FF 
229ac     10 E4 85 F1 | 	sub	objptr, ##28176
229b0     32 12 06 F6 | 	mov	arg01, #50
229b4     54 38 B0 FD | 	call	#__system___waitms
229b8     37 00 00 FF 
229bc     10 E4 05 F1 | 	add	objptr, ##28176
229c0     F2 12 02 FB | 	rdlong	arg01, objptr
229c4     37 00 00 FF 
229c8     10 E4 85 F1 | 	sub	objptr, ##28176
229cc     14 12 06 F1 | 	add	arg01, #20
229d0     20 00 80 FF 
229d4     09 01 58 FC | 	wrword	##16384, arg01
229d8     E8 2B B0 FD | 	call	#_usbnew_spin2_start
229dc     37 00 00 FF 
229e0     04 E4 05 F1 | 	add	objptr, ##28164
229e4     F2 FA 61 FC | 	wrlong	result1, objptr
229e8                 | '   mouse_limits[0] := xlim
229e8     0F 00 00 FF 
229ec     B8 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7864
229f0     01 00 80 FF 
229f4     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
229f8                 | '   mouse_limits[1] := ylim
229f8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
229fc     01 00 80 FF 
22a00     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
22a04     36 00 00 FF 
22a08     F3 E4 85 F1 | 	sub	objptr, ##27891
22a0c     F2 12 02 F6 | 	mov	arg01, objptr
22a10     11 E5 85 F1 | 	sub	objptr, #273
22a14     C4 12 06 F1 | 	add	arg01, #196
22a18                 | '   mouse_outptr := ptr
22a18     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
22a1c     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
22a20     0F 00 00 FF 
22a24     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
22a28     16 00 00 FF 
22a2c     CA EA 05 F1 | 	add	ptr__dat__, ##11466
22a30     F5 14 02 F6 | 	mov	arg02, ptr__dat__
22a34     16 00 00 FF 
22a38     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
22a3c     10 12 06 F6 | 	mov	arg01, #16
22a40     A0 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
22a44     10 12 06 F6 | 	mov	arg01, #16
22a48     20 14 06 F6 | 	mov	arg02, #32
22a4c     20 16 06 F6 | 	mov	arg03, #32
22a50     20 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
22a54     09 12 C6 F9 | 	decod	arg01, #9
22a58     2C 15 06 F6 | 	mov	arg02, #300
22a5c     BC 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
22a60     F2 16 02 F6 | 	mov	arg03, objptr
22a64     50 00 00 FF 
22a68     44 E5 05 F1 | 	add	objptr, ##41284
22a6c     F2 14 02 F6 | 	mov	arg02, objptr
22a70     0A 17 62 FC | 	wrlong	arg03, arg02
22a74     04 14 06 F1 | 	add	arg02, #4
22a78     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
22a7c     EF 14 02 F6 | 	mov	arg02, entryptr__
22a80     1E FA 05 F6 | 	mov	result1, #30
22a84     28 E4 61 FD | 	setq	objptr
22a88     0A FB F1 FC | 	coginit	result1, arg02 wc
22a8c     01 FA 65 C6 |  if_b	neg	result1, #1
22a90     04 E4 85 F1 | 	sub	objptr, #4
22a94     F2 FA 61 FC | 	wrlong	result1, objptr
22a98     01 00 00 FF 
22a9c     54 E5 05 F1 | 	add	objptr, ##852
22aa0     F2 00 68 FC | 	wrlong	#0, objptr
22aa4     1B 00 00 FF 
22aa8     60 E4 85 F1 | 	sub	objptr, ##13920
22aac     F2 04 68 FC | 	wrlong	#2, objptr
22ab0     04 E4 05 F1 | 	add	objptr, #4
22ab4     F2 26 69 FC | 	wrlong	#147, objptr
22ab8     04 E4 05 F1 | 	add	objptr, #4
22abc     F2 34 69 FC | 	wrlong	#154, objptr
22ac0     04 E4 05 F1 | 	add	objptr, #4
22ac4     F2 08 68 FC | 	wrlong	#4, objptr
22ac8     04 E4 85 F1 | 	sub	objptr, #4
22acc     F2 16 02 FB | 	rdlong	arg03, objptr
22ad0     14 E4 85 F1 | 	sub	objptr, #20
22ad4     F2 16 62 FC | 	wrlong	arg03, objptr
22ad8     04 E4 05 F1 | 	add	objptr, #4
22adc     F2 00 68 FC | 	wrlong	#0, objptr
22ae0     04 E4 05 F1 | 	add	objptr, #4
22ae4     F2 00 68 FC | 	wrlong	#0, objptr
22ae8     19 00 00 FF 
22aec     0C E5 05 F1 | 	add	objptr, ##13068
22af0     F2 02 68 FC | 	wrlong	#1, objptr
22af4     01 00 00 FF 
22af8     60 E5 05 F1 | 	add	objptr, ##864
22afc     F2 00 68 FC | 	wrlong	#0, objptr
22b00     01 00 00 FF 
22b04     00 EA 05 F1 | 	add	ptr__dat__, ##512
22b08     08 E4 05 F1 | 	add	objptr, #8
22b0c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
22b10     04 E4 85 F1 | 	sub	objptr, #4
22b14     03 00 80 FF 
22b18     F2 3C 69 FC | 	wrlong	##1694, objptr
22b1c     0D 00 00 FF 
22b20     3C E4 85 F1 | 	sub	objptr, ##6716
22b24     F2 18 68 FC | 	wrlong	#12, objptr
22b28     45 00 00 FF 
22b2c     64 E4 85 F1 | 	sub	objptr, ##35428
22b30     01 00 00 FF 
22b34     00 EA 85 F1 | 	sub	ptr__dat__, ##512
22b38     08 D9 BF FD | 	call	#_init_commands
22b3c     5C F6 BF FD | 	call	#_init_error_strings
22b40     E0 ED BF FD | 	call	#_init_audio
22b44     C0 28 BF FD | 	call	#_do_new
22b48     37 00 00 FF 
22b4c     3C E4 05 F1 | 	add	objptr, ##28220
22b50     F2 12 02 FB | 	rdlong	arg01, objptr
22b54     04 E4 85 F1 | 	sub	objptr, #4
22b58     F2 14 02 FB | 	rdlong	arg02, objptr
22b5c     37 00 00 FF 
22b60     38 E4 85 F1 | 	sub	objptr, ##28216
22b64     2C 17 B0 FD | 	call	#_hg010b_spin2_cls
22b68     37 00 00 FF 
22b6c     40 E4 05 F1 | 	add	objptr, ##28224
22b70     F2 12 02 FB | 	rdlong	arg01, objptr
22b74     37 00 00 FF 
22b78     40 E4 85 F1 | 	sub	objptr, ##28224
22b7c     C4 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
22b80                 | ' 
22b80                 | ' leading_spaces:=amount
22b80     01 00 00 FF 
22b84     B6 E4 05 F1 | 	add	objptr, ##694
22b88     F2 04 68 FC | 	wrlong	#2, objptr
22b8c     01 00 00 FF 
22b90     B6 E4 85 F1 | 	sub	objptr, ##694
22b94     B5 01 00 FF 
22b98     1D 27 06 F6 | 	mov	local01, ##@LR__6003
22b9c     3D 12 06 F6 | 	mov	arg01, #61
22ba0     3C 14 06 F6 | 	mov	arg02, #60
22ba4     3B 16 06 F6 | 	mov	arg03, #59
22ba8     3A 18 06 F6 | 	mov	arg04, #58
22bac     EC 80 B0 FD | 	call	#__system___vfs_open_sdcardx
22bb0     FD 14 02 F6 | 	mov	arg02, result1
22bb4     13 13 02 F6 | 	mov	arg01, local01
22bb8     28 37 B0 FD | 	call	#__system___mount
22bbc     B5 01 00 FF 
22bc0     21 13 06 F6 | 	mov	arg01, ##@LR__6004
22bc4     DC 39 B0 FD | 	call	#__system___chdir
22bc8     B5 01 00 FF 
22bcc     29 27 06 F6 | 	mov	local01, ##@LR__6005
22bd0     4A 00 00 FF 
22bd4     94 E4 05 F1 | 	add	objptr, ##38036
22bd8     F2 26 62 FC | 	wrlong	local01, objptr
22bdc     13 00 00 FF 
22be0     60 E4 85 F1 | 	sub	objptr, ##9824
22be4     F2 12 02 FB | 	rdlong	arg01, objptr
22be8     37 00 00 FF 
22bec     34 E4 85 F1 | 	sub	objptr, ##28212
22bf0     01 12 66 F0 | 	shl	arg01, #1
22bf4     01 14 06 F6 | 	mov	arg02, #1
22bf8     88 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
22bfc                 | ' init_commands
22bfc                 | ' init_error_strings
22bfc                 | ' init_audio
22bfc                 | ' do_new
22bfc                 | ' cls(ink, paper)
22bfc                 | ' v.setfontfamily(font) 				' use ST Mono font
22bfc                 | ' v.setleadingspaces(2)
22bfc                 | ' mount "/sd", _vfs_open_sdcard()
22bfc                 | ' chdir "/sd/bas"
22bfc                 | ' currentdir$="/sd/bas"
22bfc                 | ' position 2*editor_spaces,1 : print ver$
22bfc     00 12 06 F6 | 	mov	arg01, #0
22c00     3C 90 B0 FD | 	call	#__system___getiolock_0602
22c04     FD 12 02 F6 | 	mov	arg01, result1
22c08     0C 33 B0 FD | 	call	#__system___lockmem
22c0c     18 00 00 FF 
22c10     40 EB 05 F1 | 	add	ptr__dat__, ##12608
22c14     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
22c18     18 00 00 FF 
22c1c     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
22c20     00 12 06 F6 | 	mov	arg01, #0
22c24     00 16 06 F6 | 	mov	arg03, #0
22c28     E0 3F B0 FD | 	call	#__system___basic_print_string
22c2c     00 12 06 F6 | 	mov	arg01, #0
22c30     0A 14 06 F6 | 	mov	arg02, #10
22c34     00 16 06 F6 | 	mov	arg03, #0
22c38     78 3F B0 FD | 	call	#__system___basic_print_char
22c3c     00 12 06 F6 | 	mov	arg01, #0
22c40     FC 8F B0 FD | 	call	#__system___getiolock_0602
22c44     FD 00 68 FC | 	wrlong	#0, result1
22c48     52 00 00 FF 
22c4c     98 E4 05 F1 | 	add	objptr, ##42136
22c50     F2 12 02 FB | 	rdlong	arg01, objptr
22c54     0F 00 00 FF 
22c58     3C E4 85 F1 | 	sub	objptr, ##7740
22c5c     F2 26 02 FB | 	rdlong	local01, objptr
22c60     43 00 00 FF 
22c64     5C E4 85 F1 | 	sub	objptr, ##34396
22c68     13 13 82 F1 | 	sub	arg01, local01
22c6c     00 14 06 F6 | 	mov	arg02, #0
22c70     0A 16 06 F6 | 	mov	arg03, #10
22c74     70 55 B0 FD | 	call	#__system__Number_S
22c78     FD 12 02 F6 | 	mov	arg01, result1
22c7c     B5 01 00 FF 
22c80     31 15 06 F6 | 	mov	arg02, ##@LR__6006
22c84     EC 32 B0 FD | 	call	#__system___string_concat
22c88     FD 26 02 F6 | 	mov	local01, result1
22c8c     50 00 00 FF 
22c90     38 E5 05 F1 | 	add	objptr, ##41272
22c94     F2 26 62 FC | 	wrlong	local01, objptr
22c98     50 00 00 FF 
22c9c     38 E5 85 F1 | 	sub	objptr, ##41272
22ca0                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
22ca0     00 12 06 F6 | 	mov	arg01, #0
22ca4     98 8F B0 FD | 	call	#__system___getiolock_0602
22ca8     FD 12 02 F6 | 	mov	arg01, result1
22cac     68 32 B0 FD | 	call	#__system___lockmem
22cb0     50 00 00 FF 
22cb4     38 E5 05 F1 | 	add	objptr, ##41272
22cb8     F2 14 02 FB | 	rdlong	arg02, objptr
22cbc     50 00 00 FF 
22cc0     38 E5 85 F1 | 	sub	objptr, ##41272
22cc4     00 12 06 F6 | 	mov	arg01, #0
22cc8     00 16 06 F6 | 	mov	arg03, #0
22ccc     3C 3F B0 FD | 	call	#__system___basic_print_string
22cd0     00 12 06 F6 | 	mov	arg01, #0
22cd4     0A 14 06 F6 | 	mov	arg02, #10
22cd8     00 16 06 F6 | 	mov	arg03, #0
22cdc     D4 3E B0 FD | 	call	#__system___basic_print_char
22ce0     00 12 06 F6 | 	mov	arg01, #0
22ce4     58 8F B0 FD | 	call	#__system___getiolock_0602
22ce8     FD 00 68 FC | 	wrlong	#0, result1
22cec     37 00 00 FF 
22cf0     34 E4 05 F1 | 	add	objptr, ##28212
22cf4     F2 12 02 FB | 	rdlong	arg01, objptr
22cf8     37 00 00 FF 
22cfc     34 E4 85 F1 | 	sub	objptr, ##28212
22d00     01 12 66 F0 | 	shl	arg01, #1
22d04     04 14 06 F6 | 	mov	arg02, #4
22d08     78 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
22d0c                 | ' position 2*editor_spaces,4 : print "Ready"
22d0c     00 12 06 F6 | 	mov	arg01, #0
22d10     2C 8F B0 FD | 	call	#__system___getiolock_0602
22d14     FD 12 02 F6 | 	mov	arg01, result1
22d18     FC 31 B0 FD | 	call	#__system___lockmem
22d1c     B5 01 00 FF 
22d20     43 15 06 F6 | 	mov	arg02, ##@LR__6007
22d24     00 12 06 F6 | 	mov	arg01, #0
22d28     00 16 06 F6 | 	mov	arg03, #0
22d2c     DC 3E B0 FD | 	call	#__system___basic_print_string
22d30     00 12 06 F6 | 	mov	arg01, #0
22d34     0A 14 06 F6 | 	mov	arg02, #10
22d38     00 16 06 F6 | 	mov	arg03, #0
22d3c     74 3E B0 FD | 	call	#__system___basic_print_char
22d40     00 12 06 F6 | 	mov	arg01, #0
22d44     F8 8E B0 FD | 	call	#__system___getiolock_0602
22d48     FD 00 68 FC | 	wrlong	#0, result1
22d4c     00 14 06 F6 | 	mov	arg02, #0
22d50     01 14 D6 F7 | 	test	arg02, #1 wc
22d54     5A 4C 64 FD | 	drvc	#38
22d58     01 14 D6 F7 | 	test	arg02, #1 wc
22d5c     5A 4E 64 FD | 	drvc	#39
22d60     B5 01 00 FF 
22d64     49 27 06 F6 | 	mov	local01, ##@LR__6008
22d68     52 00 00 FF 
22d6c     C4 E4 05 F1 | 	add	objptr, ##42180
22d70     F2 26 62 FC | 	wrlong	local01, objptr
22d74     04 E4 05 F1 | 	add	objptr, #4
22d78     FF FF FF FF 
22d7c     F2 FE 6B FC | 	wrlong	##-1, objptr
22d80     0C E4 05 F1 | 	add	objptr, #12
22d84     F2 00 68 FC | 	wrlong	#0, objptr
22d88     52 00 00 FF 
22d8c     D4 E4 85 F1 | 	sub	objptr, ##42196
22d90                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
22d90                 | ' loadname="noname.bas"
22d90                 | ' do_insert=-1
22d90                 | ' inload=0
22d90                 | ' 
22d90                 | ' open "/sd/bas/autorun.bas" for input as #9
22d90     B5 01 00 FF 
22d94     54 15 06 F6 | 	mov	arg02, ##@LR__6009
22d98     09 12 06 F6 | 	mov	arg01, #9
22d9c     00 16 06 F6 | 	mov	arg03, #0
22da0     78 3D B0 FD | 	call	#__system___basic_open_string
22da4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22da8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
22dac     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22db0     52 00 00 FF 
22db4     D8 E4 05 F1 | 	add	objptr, ##42200
22db8     F2 FA 61 FC | 	wrlong	result1, objptr
22dbc     52 00 00 FF 
22dc0     D8 E4 85 F1 | 	sub	objptr, ##42200
22dc4                 | ' err=geterr()
22dc4                 | ' close #9
22dc4     09 12 06 F6 | 	mov	arg01, #9
22dc8     A4 84 B0 FD | 	call	#__system__close
22dcc                 | ' if err=0 then line$="run autorun.bas" : interpret
22dcc     52 00 00 FF 
22dd0     D8 E4 05 F1 | 	add	objptr, ##42200
22dd4     F2 26 0A FB | 	rdlong	local01, objptr wz
22dd8     52 00 00 FF 
22ddc     D8 E4 85 F1 | 	sub	objptr, ##42200
22de0     B5 01 00 AF 
22de4     68 27 06 A6 |  if_e	mov	local01, ##@LR__6010
22de8     37 00 00 AF 
22dec     1C E4 05 A1 |  if_e	add	objptr, ##28188
22df0     F2 26 62 AC |  if_e	wrlong	local01, objptr
22df4     37 00 00 AF 
22df8     1C E4 85 A1 |  if_e	sub	objptr, ##28188
22dfc     28 EA BD AD |  if_e	call	#_interpret
22e00                 | ' 
22e00                 | ' 
22e00                 | ' '-------------------------------------------------------------------------------------------------------- 
22e00                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
22e00                 | ' '--------------------------------------------------------------------------------------------------------
22e00                 | ' 
22e00                 | ' do
22e00                 | LR__2660
22e00     00 DA BD FD | 	call	#_edit
22e04     FD 26 02 F6 | 	mov	local01, result1
22e08     37 00 00 FF 
22e0c     1C E4 05 F1 | 	add	objptr, ##28188
22e10     F2 26 62 FC | 	wrlong	local01, objptr
22e14     37 00 00 FF 
22e18     1C E4 85 F1 | 	sub	objptr, ##28188
22e1c     08 EA BD FD | 	call	#_interpret
22e20     B5 01 00 FF 
22e24     78 27 06 F6 | 	mov	local01, ##@LR__6011
22e28     37 00 00 FF 
22e2c     1C E4 05 F1 | 	add	objptr, ##28188
22e30     F2 26 62 FC | 	wrlong	local01, objptr
22e34     37 00 00 FF 
22e38     1C E4 85 F1 | 	sub	objptr, ##28188
22e3c     C0 FF 9F FD | 	jmp	#LR__2660
22e40     A7 F0 03 F6 | 	mov	ptra, fp
22e44     B2 00 A0 FD | 	call	#popregs_
22e48                 | _program_ret
22e48     2D 00 64 FD | 	ret
22e4c                 | 
22e4c                 | ' '' this is not a main program.
22e4c                 | ' 
22e4c                 | ' '****************************************************************************************************************
22e4c                 | ' '                                                                                                             	*
22e4c                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
22e4c                 | ' '                                                                                                            	*
22e4c                 | ' ' base - HDMI base pin												*
22e4c                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
22e4c                 | ' '														*
22e4c                 | ' '														*
22e4c                 | ' '****************************************************************************************************************
22e4c                 | ' 
22e4c                 | ' pub start(base,mb):result |i
22e4c                 | _hg010b_spin2_start
22e4c                 | ' 
22e4c                 | ' '--------------------------- initialize pointers and variables
22e4c                 | ' 
22e4c                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
22e4c     34 E4 05 F1 | 	add	objptr, #52
22e50     F2 FA 01 F6 | 	mov	result1, objptr
22e54     28 E4 85 F1 | 	sub	objptr, #40
22e58     F2 FA 61 FC | 	wrlong	result1, objptr
22e5c                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
22e5c                 | ' hdmibase:=base							' HDMI base pin, 8*n
22e5c     18 E4 05 F1 | 	add	objptr, #24
22e60     F2 12 62 FC | 	wrlong	arg01, objptr
22e64                 | ' mailbox_ptr:=mb		
22e64     04 E4 05 F1 | 	add	objptr, #4
22e68     F2 14 62 FC | 	wrlong	arg02, objptr
22e6c                 | ' mailbox0:=mb				' PSRAM mailbox pointer
22e6c     C1 E5 05 F1 | 	add	objptr, #449
22e70     F2 14 62 FC | 	wrlong	arg02, objptr
22e74                 | ' sprite_ptr:=@spr1ptr
22e74     D8 E4 85 F1 | 	sub	objptr, #216
22e78     F2 FA 01 F6 | 	mov	result1, objptr
22e7c     E5 E4 85 F1 | 	sub	objptr, #229
22e80     F2 FA 61 FC | 	wrlong	result1, objptr
22e84                 | ' 
22e84                 | ' 		'
22e84                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
22e84     E5 E4 05 F1 | 	add	objptr, #229
22e88     F2 FA 01 FB | 	rdlong	result1, objptr
22e8c     D0 FA 05 F1 | 	add	result1, #208
22e90     FD 10 58 FC | 	wrword	#8, result1
22e94                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
22e94     F2 16 02 FB | 	rdlong	arg03, objptr
22e98     D2 16 06 F1 | 	add	arg03, #210
22e9c     0B 21 58 FC | 	wrword	#16, arg03
22ea0                 | ' leading_spaces:=0				'
22ea0     A5 E5 05 F1 | 	add	objptr, #421
22ea4     F2 00 68 FC | 	wrlong	#0, objptr
22ea8                 | ' 
22ea8                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
22ea8     99 E4 85 F1 | 	sub	objptr, #153
22eac     00 00 A0 FF 
22eb0     F2 0E 68 FC | 	wrlong	##1073741831, objptr
22eb4                 | ' emptydl[1]:=0
22eb4     04 E4 05 F1 | 	add	objptr, #4
22eb8     F2 00 68 FC | 	wrlong	#0, objptr
22ebc                 | ' 
22ebc                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
22ebc                 | ' 
22ebc                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
22ebc     28 E5 85 F1 | 	sub	objptr, #296
22ec0     F2 02 68 FC | 	wrlong	#1, objptr
22ec4                 | ' if s_debug<>0
22ec4                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
22ec4     20 00 80 FF 
22ec8     F2 00 68 FC | 	wrlong	##16384, objptr
22ecc     F9 E4 85 F1 | 	sub	objptr, #249
22ed0                 | ' setmode()							' set the mode, see below
22ed0     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
22ed4                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
22ed4     49 E4 05 F1 | 	add	objptr, #73
22ed8     F2 FA 01 F6 | 	mov	result1, objptr
22edc     35 E4 85 F1 | 	sub	objptr, #53
22ee0     F2 FA 61 FC | 	wrlong	result1, objptr
22ee4                 | ' cursor_ptr:=@cursor_x						
22ee4     28 E4 05 F1 | 	add	objptr, #40
22ee8     F2 16 02 F6 | 	mov	arg03, objptr
22eec     2C E4 85 F1 | 	sub	objptr, #44
22ef0     F2 16 62 FC | 	wrlong	arg03, objptr
22ef4                 | ' fontnum:=0  							' start with a PC type font 
22ef4     55 E4 05 F1 | 	add	objptr, #85
22ef8     F2 00 68 FC | 	wrlong	#0, objptr
22efc                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
22efc     1C E4 05 F1 | 	add	objptr, #28
22f00     F2 12 02 F6 | 	mov	arg01, objptr
22f04     81 E4 85 F1 | 	sub	objptr, #129
22f08     10 00 00 FF 
22f0c     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
22f10     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
22f14     10 00 00 FF 
22f18     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
22f1c     10 16 06 F6 | 	mov	arg03, #16
22f20     14 2F B0 FD | 	call	#__system____builtin_memmove
22f24                 | ' leading_spaces:=0
22f24     01 00 00 FF 
22f28     B6 E4 05 F1 | 	add	objptr, ##694
22f2c     F2 00 68 FC | 	wrlong	#0, objptr
22f30     01 00 00 FF 
22f34     B6 E4 85 F1 | 	sub	objptr, ##694
22f38                 | ' '---------------------------- initialize a cursor (MSDOS type)
22f38                 | ' 
22f38                 | ' initcursor(154)
22f38     9A 12 06 F6 | 	mov	arg01, #154
22f3c     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
22f40                 | ' 
22f40                 | ' '---------------------------- start the cog
22f40                 | ' 
22f40                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
22f40     10 00 00 FF 
22f44     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
22f48     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
22f4c     10 00 00 FF 
22f50     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
22f54     14 E4 05 F1 | 	add	objptr, #20
22f58     10 FA 05 F6 | 	mov	result1, #16
22f5c     28 E4 61 FD | 	setq	objptr
22f60     0A FB F1 FC | 	coginit	result1, arg02 wc
22f64     01 FA 65 C6 |  if_b	neg	result1, #1
22f68     1C E4 05 F1 | 	add	objptr, #28
22f6c     F2 FA 61 FC | 	wrlong	result1, objptr
22f70     30 E4 85 F1 | 	sub	objptr, #48
22f74                 | ' waitms(40)							' wait for stabilize
22f74     28 12 06 F6 | 	mov	arg01, #40
22f78     90 32 B0 FD | 	call	#__system___waitms
22f7c                 | ' return cog							' return the driver's cog #
22f7c     30 E4 05 F1 | 	add	objptr, #48
22f80     F2 FA 01 FB | 	rdlong	result1, objptr
22f84     30 E4 85 F1 | 	sub	objptr, #48
22f88                 | _hg010b_spin2_start_ret
22f88     2D 00 64 FD | 	ret
22f8c                 | 
22f8c                 | ' 
22f8c                 | ' 
22f8c                 | ' '**************************************************************************************************************** 
22f8c                 | ' '                                                                                                             	*
22f8c                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
22f8c                 | ' '  Mode number - see start() above or bits below								*
22f8c                 | ' '                                                                                                             	*
22f8c                 | ' '****************************************************************************************************************
22f8c                 | ' 
22f8c                 | ' '---------------------------- initialize a cursor (MSDOS type)
22f8c                 | ' pub initcursor(color) |i
22f8c                 | _hg010b_spin2_initcursor
22f8c     03 4A 05 F6 | 	mov	COUNT_, #3
22f90     A8 00 A0 FD | 	call	#pushregs_
22f94     09 27 02 F6 | 	mov	local01, arg01
22f98                 | ' 
22f98                 | ' cursor_x:=0							' place the cursor at 0:0
22f98     3C E4 05 F1 | 	add	objptr, #60
22f9c     F2 00 58 FC | 	wrword	#0, objptr
22fa0                 | ' cursor_y:=0
22fa0     02 E4 05 F1 | 	add	objptr, #2
22fa4     F2 00 48 FC | 	wrbyte	#0, objptr
22fa8                 | ' repeat i from 0 to 111
22fa8     00 28 06 F6 | 	mov	local02, #0
22fac     F8 E5 05 F1 | 	add	objptr, #504
22fb0     97 1A 48 FB | 	callpa	#(@LR__2672-@LR__2670)>>2,fcache_load_ptr_
22fb4                 | LR__2670
22fb4                 | '   cursor[i]:=0
22fb4     14 2B 02 F6 | 	mov	local03, local02
22fb8     F2 2A 02 F1 | 	add	local03, objptr
22fbc     15 01 48 FC | 	wrbyte	#0, local03
22fc0     01 28 06 F1 | 	add	local02, #1
22fc4     70 28 56 F2 | 	cmps	local02, #112 wc
22fc8     E8 FF 9F CD |  if_b	jmp	#LR__2670
22fcc                 | ' repeat i from 112 to 127
22fcc     70 28 06 F6 | 	mov	local02, #112
22fd0                 | LR__2671
22fd0                 | '   cursor[i]:=color  
22fd0     14 2B 02 F6 | 	mov	local03, local02
22fd4     F2 2A 02 F1 | 	add	local03, objptr
22fd8     15 27 42 FC | 	wrbyte	local01, local03
22fdc     01 28 06 F1 | 	add	local02, #1
22fe0     80 28 16 F2 | 	cmp	local02, #128 wc
22fe4     E8 FF 9F CD |  if_b	jmp	#LR__2671
22fe8                 | LR__2672
22fe8                 | ' 'repeat i from 0 to 127
22fe8                 | ' '  if ((i/8)//2)
22fe8                 | ' '    cursor[i]:=15
22fe8                 | ' '  else
22fe8                 | ' '    cursor[i]:=0
22fe8                 | ' '  if i>=120    
22fe8                 | ' '    cursor[i]:=40
22fe8                 | ' setspriteptr(17,@cursor)
22fe8     F2 14 02 F6 | 	mov	arg02, objptr
22fec     01 00 00 FF 
22ff0     36 E4 85 F1 | 	sub	objptr, ##566
22ff4     11 12 06 F6 | 	mov	arg01, #17
22ff8     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
22ffc                 | ' setspritesize(17,8,16)
22ffc     11 12 06 F6 | 	mov	arg01, #17
23000     08 14 06 F6 | 	mov	arg02, #8
23004     10 16 06 F6 | 	mov	arg03, #16
23008     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
2300c                 | ' setspritepos(17,0,0)
2300c     11 12 06 F6 | 	mov	arg01, #17
23010     00 14 06 F6 | 	mov	arg02, #0
23014     00 16 06 F6 | 	mov	arg03, #0
23018     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
2301c                 | ' cursorshape:=14
2301c     0B 00 00 FF 
23020     C6 E4 05 F1 | 	add	objptr, ##5830
23024     F2 1C 68 FC | 	wrlong	#14, objptr
23028                 | ' cursorcolor:=color
23028     04 E4 85 F1 | 	sub	objptr, #4
2302c     F2 26 62 FC | 	wrlong	local01, objptr
23030     0B 00 00 FF 
23034     C2 E4 85 F1 | 	sub	objptr, ##5826
23038     A7 F0 03 F6 | 	mov	ptra, fp
2303c     B2 00 A0 FD | 	call	#popregs_
23040                 | _hg010b_spin2_initcursor_ret
23040     2D 00 64 FD | 	ret
23044                 | 
23044                 | ' 
23044                 | ' pub setcursorshape(shape) | i
23044                 | _hg010b_spin2_setcursorshape
23044                 | ' 
23044                 | ' cursorshape:=shape
23044     0B 00 00 FF 
23048     C6 E4 05 F1 | 	add	objptr, ##5830
2304c     F2 12 62 FC | 	wrlong	arg01, objptr
23050                 | ' repeat i from 0 to (8*cursorshape)-1
23050     00 00 06 F6 | 	mov	_var01, #0
23054     09 03 02 F6 | 	mov	_var02, arg01
23058     03 02 66 F0 | 	shl	_var02, #3
2305c     01 02 86 F1 | 	sub	_var02, #1
23060     00 02 56 F2 | 	cmps	_var02, #0 wc
23064     01 04 86 F6 | 	negc	_var03, #1
23068     02 07 02 F6 | 	mov	_var04, _var03
2306c     02 03 02 F1 | 	add	_var02, _var03
23070     0A 00 00 FF 
23074     90 E4 85 F1 | 	sub	objptr, ##5264
23078     97 0C 48 FB | 	callpa	#(@LR__2681-@LR__2680)>>2,fcache_load_ptr_
2307c                 | LR__2680
2307c                 | '   cursor[i]:=0
2307c     00 05 02 F6 | 	mov	_var03, _var01
23080     F2 04 02 F1 | 	add	_var03, objptr
23084     02 01 48 FC | 	wrbyte	#0, _var03
23088     03 01 02 F1 | 	add	_var01, _var04
2308c     01 01 0A F2 | 	cmp	_var01, _var02 wz
23090     E8 FF 9F 5D |  if_ne	jmp	#LR__2680
23094                 | LR__2681
23094                 | ' repeat i from 8*cursorshape to 127
23094     0A 00 00 FF 
23098     90 E4 05 F1 | 	add	objptr, ##5264
2309c     F2 06 02 FB | 	rdlong	_var04, objptr
230a0     03 01 02 F6 | 	mov	_var01, _var04
230a4     03 00 66 F0 | 	shl	_var01, #3
230a8     0B 00 00 FF 
230ac     C6 E4 85 F1 | 	sub	objptr, ##5830
230b0     03 06 66 F0 | 	shl	_var04, #3
230b4     80 06 56 F2 | 	cmps	_var04, #128 wc
230b8     01 04 A6 F6 | 	negnc	_var03, #1
230bc     7F 02 06 F6 | 	mov	_var02, #127
230c0     02 03 02 F1 | 	add	_var02, _var03
230c4     97 1A 48 FB | 	callpa	#(@LR__2683-@LR__2682)>>2,fcache_load_ptr_
230c8                 | LR__2682
230c8                 | '   cursor[i]:=cursorcolor
230c8     00 07 02 F6 | 	mov	_var04, _var01
230cc     01 00 00 FF 
230d0     36 E4 05 F1 | 	add	objptr, ##566
230d4     F2 06 02 F1 | 	add	_var04, objptr
230d8     0A 00 00 FF 
230dc     8C E4 05 F1 | 	add	objptr, ##5260
230e0     F2 12 02 FB | 	rdlong	arg01, objptr
230e4     0B 00 00 FF 
230e8     C2 E4 85 F1 | 	sub	objptr, ##5826
230ec     03 13 42 FC | 	wrbyte	arg01, _var04
230f0     02 01 02 F1 | 	add	_var01, _var03
230f4     01 01 0A F2 | 	cmp	_var01, _var02 wz
230f8     CC FF 9F 5D |  if_ne	jmp	#LR__2682
230fc                 | LR__2683
230fc                 | _hg010b_spin2_setcursorshape_ret
230fc     2D 00 64 FD | 	ret
23100                 | 
23100                 | ' 
23100                 | ' pub setcursorcolor(color) | i
23100                 | _hg010b_spin2_setcursorcolor
23100                 | ' 
23100                 | ' cursorcolor:=color
23100     0B 00 00 FF 
23104     C2 E4 05 F1 | 	add	objptr, ##5826
23108     F2 12 62 FC | 	wrlong	arg01, objptr
2310c                 | ' repeat i from 0 to (8*cursorshape)-1
2310c     00 12 06 F6 | 	mov	arg01, #0
23110     04 E4 05 F1 | 	add	objptr, #4
23114     F2 00 02 FB | 	rdlong	_var01, objptr
23118     03 00 66 F0 | 	shl	_var01, #3
2311c     01 00 86 F1 | 	sub	_var01, #1
23120     00 00 56 F2 | 	cmps	_var01, #0 wc
23124     01 02 86 F6 | 	negc	_var02, #1
23128     01 05 02 F6 | 	mov	_var03, _var02
2312c     01 01 02 F1 | 	add	_var01, _var02
23130     0A 00 00 FF 
23134     90 E4 85 F1 | 	sub	objptr, ##5264
23138     97 0C 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
2313c                 | LR__2690
2313c                 | '   cursor[i]:=0
2313c     09 03 02 F6 | 	mov	_var02, arg01
23140     F2 02 02 F1 | 	add	_var02, objptr
23144     01 01 48 FC | 	wrbyte	#0, _var02
23148     02 13 02 F1 | 	add	arg01, _var03
2314c     00 13 0A F2 | 	cmp	arg01, _var01 wz
23150     E8 FF 9F 5D |  if_ne	jmp	#LR__2690
23154                 | LR__2691
23154                 | ' repeat i from 8*cursorshape to 127
23154     0A 00 00 FF 
23158     90 E4 05 F1 | 	add	objptr, ##5264
2315c     F2 04 02 FB | 	rdlong	_var03, objptr
23160     02 13 02 F6 | 	mov	arg01, _var03
23164     03 12 66 F0 | 	shl	arg01, #3
23168     0B 00 00 FF 
2316c     C6 E4 85 F1 | 	sub	objptr, ##5830
23170     03 04 66 F0 | 	shl	_var03, #3
23174     80 04 56 F2 | 	cmps	_var03, #128 wc
23178     01 02 A6 F6 | 	negnc	_var02, #1
2317c     7F 00 06 F6 | 	mov	_var01, #127
23180     01 01 02 F1 | 	add	_var01, _var02
23184     97 1A 48 FB | 	callpa	#(@LR__2693-@LR__2692)>>2,fcache_load_ptr_
23188                 | LR__2692
23188                 | '   cursor[i]:=cursorcolor
23188     09 05 02 F6 | 	mov	_var03, arg01
2318c     01 00 00 FF 
23190     36 E4 05 F1 | 	add	objptr, ##566
23194     F2 04 02 F1 | 	add	_var03, objptr
23198     0A 00 00 FF 
2319c     8C E4 05 F1 | 	add	objptr, ##5260
231a0     F2 06 02 FB | 	rdlong	_var04, objptr
231a4     0B 00 00 FF 
231a8     C2 E4 85 F1 | 	sub	objptr, ##5826
231ac     02 07 42 FC | 	wrbyte	_var04, _var03
231b0     01 13 02 F1 | 	add	arg01, _var02
231b4     00 13 0A F2 | 	cmp	arg01, _var01 wz
231b8     CC FF 9F 5D |  if_ne	jmp	#LR__2692
231bc                 | LR__2693
231bc                 | _hg010b_spin2_setcursorcolor_ret
231bc     2D 00 64 FD | 	ret
231c0                 | 
231c0                 | '   
231c0                 | '   
231c0                 | '   
231c0                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
231c0                 | _hg010b_spin2_setmode
231c0     02 4A 05 F6 | 	mov	COUNT_, #2
231c4     A8 00 A0 FD | 	call	#pushregs_
231c8                 | ' 
231c8                 | ' 
231c8                 | ' dl_ptr:=@emptydl[0]
231c8     01 00 00 FF 
231cc     1D E4 05 F1 | 	add	objptr, ##541
231d0     F2 1A 02 F6 | 	mov	arg05, objptr
231d4     FD E5 85 F1 | 	sub	objptr, #509
231d8     F2 1A 62 FC | 	wrlong	arg05, objptr
231dc                 | ' 
231dc                 | ' if cog>0 
231dc     10 E4 05 F1 | 	add	objptr, #16
231e0     F2 1A 02 FB | 	rdlong	arg05, objptr
231e4     30 E4 85 F1 | 	sub	objptr, #48
231e8     01 1A 56 F2 | 	cmps	arg05, #1 wc
231ec                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
231ec     01 12 06 36 |  if_ae	mov	arg01, #1
231f0     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
231f4                 | ' xres:=1024
231f4     01 00 00 FF 
231f8     26 E4 05 F1 | 	add	objptr, ##550
231fc     02 00 80 FF 
23200     F2 00 68 FC | 	wrlong	##1024, objptr
23204                 | ' yres:=600
23204     04 E4 05 F1 | 	add	objptr, #4
23208     01 00 80 FF 
2320c     F2 B0 68 FC | 	wrlong	##600, objptr
23210                 | ' ppl:=(timings[3])
23210     10 00 00 FF 
23214     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
23218     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
2321c     51 E5 85 F1 | 	sub	objptr, #337
23220     F2 1A 62 FC | 	wrlong	arg05, objptr
23224                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
23224     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
23228     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
2322c     01 26 66 F0 | 	shl	local01, #1
23230     80 E4 85 F1 | 	sub	objptr, #128
23234     F2 26 62 FC | 	wrlong	local01, objptr
23238                 | ' cpl1:=cpl '' todo remove
23238     04 E4 05 F1 | 	add	objptr, #4
2323c     F2 26 62 FC | 	wrlong	local01, objptr
23240                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
23240     02 00 00 FF 
23244     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
23248     41 E4 85 F1 | 	sub	objptr, #65
2324c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
23250                 | ' repeat i from 0 to 3
23250     00 28 06 F6 | 	mov	local02, #0
23254     02 00 00 FF 
23258     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
2325c     08 E4 05 F1 | 	add	objptr, #8
23260     97 20 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
23264                 | LR__2700
23264                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
23264     14 27 02 F6 | 	mov	local01, local02
23268     02 26 66 F0 | 	shl	local01, #2
2326c     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
23270     F2 1A 02 FB | 	rdlong	arg05, objptr
23274     11 1A 66 F0 | 	shl	arg05, #17
23278     13 27 02 FB | 	rdlong	local01, local01
2327c     0D 27 02 F1 | 	add	local01, arg05
23280     80 40 38 FF 
23284     00 26 06 F1 | 	add	local01, ##1887502336
23288     14 1B 02 F6 | 	mov	arg05, local02
2328c     02 1A 66 F0 | 	shl	arg05, #2
23290     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
23294     0D 27 62 FC | 	wrlong	local01, arg05
23298     01 28 06 F1 | 	add	local02, #1
2329c     04 28 56 F2 | 	cmps	local02, #4 wc
232a0     C0 FF 9F CD |  if_b	jmp	#LR__2700
232a4                 | LR__2701
232a4     24 E4 85 F1 | 	sub	objptr, #36
232a8                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
232a8     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
232ac     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
232b0     14 26 66 FC | 	wrlong	local01, #20
232b4                 | ' hubset(timings[10])
232b4     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
232b8     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
232bc     10 00 00 FF 
232c0     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
232c4     00 12 62 FD | 	hubset	arg01
232c8                 | ' waitms(1)                                                   	' wait for stabilization
232c8     01 12 06 F6 | 	mov	arg01, #1
232cc     3C 2F B0 FD | 	call	#__system___waitms
232d0     10 00 00 FF 
232d4     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
232d8     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
232dc     61 E4 05 F1 | 	add	objptr, #97
232e0     F2 28 62 FC | 	wrlong	local02, objptr
232e4     14 27 52 F6 | 	abs	local01, local02 wc
232e8     04 26 46 F0 | 	shr	local01, #4
232ec     13 27 82 F6 | 	negc	local01, local01
232f0     9C E4 05 F1 | 	add	objptr, #156
232f4     F2 26 62 FC | 	wrlong	local01, objptr
232f8     A4 E4 85 F1 | 	sub	objptr, #164
232fc     F2 28 02 FB | 	rdlong	local02, objptr
23300     08 E4 05 F1 | 	add	objptr, #8
23304     F2 26 02 FB | 	rdlong	local01, objptr
23308     13 29 02 FD | 	qmul	local02, local01
2330c                 | ' lines:=timings[11]
2330c                 | ' t_lines:=lines/16
2330c                 | ' buflen:=cpl*lines						' framebuffer length in longs
2330c     29 E4 85 F1 | 	sub	objptr, #41
23310     19 26 C6 F9 | 	decod	local01, #25
23314     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
23318     18 28 62 FD | 	getqx	local02
2331c     F2 28 62 FC | 	wrlong	local02, objptr
23320     38 E4 85 F1 | 	sub	objptr, #56
23324     02 28 66 F0 | 	shl	local02, #2
23328     14 27 82 F1 | 	sub	local01, local02
2332c     F2 26 62 FC | 	wrlong	local01, objptr
23330     FD E4 05 F1 | 	add	objptr, #253
23334     F2 28 02 FB | 	rdlong	local02, objptr
23338     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
2333c     0D 29 02 FD | 	qmul	local02, arg05
23340                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
23340                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
23340     F9 E4 85 F1 | 	sub	objptr, #249
23344                 | ' mode_ptr:=@timings						' set pointers to timings
23344     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
23348                 | ' graphmode:=1024+512+192+48							' det global variable
23348                 | ' makedl(graphmode)							' make a DL for the mode
23348     03 00 00 FF 
2334c     F0 12 06 F6 | 	mov	arg01, ##1776
23350     18 28 62 FD | 	getqx	local02
23354     14 27 82 F1 | 	sub	local01, local02
23358     F2 26 62 FC | 	wrlong	local01, objptr
2335c     14 E4 05 F1 | 	add	objptr, #20
23360     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
23364     79 E4 05 F1 | 	add	objptr, #121
23368     03 00 80 FF 
2336c     F2 E0 69 FC | 	wrlong	##1776, objptr
23370     91 E4 85 F1 | 	sub	objptr, #145
23374     10 00 00 FF 
23378     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
2337c     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
23380                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
23380     F2 26 02 FB | 	rdlong	local01, objptr
23384     DD E4 05 F1 | 	add	objptr, #221
23388     F2 26 62 FC | 	wrlong	local01, objptr
2338c                 | ' s_font_ptr:=font_ptr
2338c     D5 E4 85 F1 | 	sub	objptr, #213
23390     F2 26 02 FB | 	rdlong	local01, objptr
23394     D9 E4 05 F1 | 	add	objptr, #217
23398     F2 26 62 FC | 	wrlong	local01, objptr
2339c                 | ' s_lines:=lines
2339c     80 E4 85 F1 | 	sub	objptr, #128
233a0     F2 26 02 FB | 	rdlong	local01, objptr
233a4     84 E4 05 F1 | 	add	objptr, #132
233a8     F2 26 62 FC | 	wrlong	local01, objptr
233ac                 | ' s_buflen:=buflen
233ac     AD E4 85 F1 | 	sub	objptr, #173
233b0     F2 26 02 FB | 	rdlong	local01, objptr
233b4     B5 E4 05 F1 | 	add	objptr, #181
233b8     F2 26 62 FC | 	wrlong	local01, objptr
233bc                 | ' s_cpl:=cpl
233bc     94 E4 85 F1 | 	sub	objptr, #148
233c0     F2 26 02 FB | 	rdlong	local01, objptr
233c4     90 E4 05 F1 | 	add	objptr, #144
233c8     F2 26 62 FC | 	wrlong	local01, objptr
233cc                 | ' s_cpl1:=cpl
233cc     90 E4 85 F1 | 	sub	objptr, #144
233d0     F2 26 02 FB | 	rdlong	local01, objptr
233d4     98 E4 05 F1 | 	add	objptr, #152
233d8     F2 26 62 FC | 	wrlong	local01, objptr
233dc                 | ' st_lines:=t_lines
233dc     0C E4 05 F1 | 	add	objptr, #12
233e0     F2 26 02 FB | 	rdlong	local01, objptr
233e4     04 E4 05 F1 | 	add	objptr, #4
233e8     F2 26 62 FC | 	wrlong	local01, objptr
233ec                 | ' ppl:=ppl/xzoom  
233ec     28 E4 85 F1 | 	sub	objptr, #40
233f0     F2 88 02 FB | 	rdlong	muldiva_, objptr
233f4     2C E4 05 F1 | 	add	objptr, #44
233f8     F2 8A 02 FB | 	rdlong	muldivb_, objptr
233fc     05 E5 85 F1 | 	sub	objptr, #261
23400     BA 00 A0 FD | 	call	#divide_
23404     D9 E4 05 F1 | 	add	objptr, #217
23408     F2 8A 62 FC | 	wrlong	muldivb_, objptr
2340c                 | ' s_ppl:=ppl
2340c     1C E4 05 F1 | 	add	objptr, #28
23410     F2 8A 62 FC | 	wrlong	muldivb_, objptr
23414     F5 E4 85 F1 | 	sub	objptr, #245
23418                 | ' waitms(20)							' wait 
23418     14 12 06 F6 | 	mov	arg01, #20
2341c     EC 2D B0 FD | 	call	#__system___waitms
23420                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
23420     04 E4 05 F1 | 	add	objptr, #4
23424     F2 12 02 FB | 	rdlong	arg01, objptr
23428     04 E4 85 F1 | 	sub	objptr, #4
2342c     F2 16 02 FB | 	rdlong	arg03, objptr
23430     09 17 82 F1 | 	sub	arg03, arg01
23434     20 14 06 F6 | 	mov	arg02, #32
23438     00 18 06 F6 | 	mov	arg04, #0
2343c     01 1A 06 F6 | 	mov	arg05, #1
23440     0B 00 00 FF 
23444     CC E4 05 F1 | 	add	objptr, ##5836
23448     7C 1F B0 FD | 	call	#_psram_spin2_fill
2344c     0B 00 00 FF 
23450     CC E4 85 F1 | 	sub	objptr, ##5836
23454     A7 F0 03 F6 | 	mov	ptra, fp
23458     B2 00 A0 FD | 	call	#popregs_
2345c                 | _hg010b_spin2_setmode_ret
2345c     2D 00 64 FD | 	ret
23460                 | 
23460                 | ' 
23460                 | ' '****************************************************************************************************************
23460                 | ' '                                                                                                             	*
23460                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
23460                 | ' '                                                                                                             	*
23460                 | ' '****************************************************************************************************************
23460                 | ' 
23460                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
23460                 | _hg010b_spin2_makedl
23460                 | ' 
23460                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
23460                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
23460                 | ' repeat i from 0 to 11                                                           ' clear DL
23460     00 00 06 F6 | 	mov	_var01, #0
23464     ED E5 05 F1 | 	add	objptr, #493
23468     97 0E 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
2346c                 | LR__2710
2346c                 | '   displaylist[i]:=0 
2346c     00 03 02 F6 | 	mov	_var02, _var01
23470     02 02 66 F0 | 	shl	_var02, #2
23474     F2 02 02 F1 | 	add	_var02, objptr
23478     01 01 68 FC | 	wrlong	#0, _var02
2347c     01 00 06 F1 | 	add	_var01, #1
23480     0C 00 56 F2 | 	cmps	_var01, #12 wc
23484     E4 FF 9F CD |  if_b	jmp	#LR__2710
23488                 | LR__2711
23488                 | '                         ' 
23488                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
23488     8C E5 85 F1 | 	sub	objptr, #396
2348c     F2 02 02 FB | 	rdlong	_var02, objptr
23490     14 02 66 F0 | 	shl	_var02, #20
23494     01 02 06 F1 | 	add	_var02, #1
23498     04 E4 85 F1 | 	sub	objptr, #4
2349c     F2 00 02 FB | 	rdlong	_var01, objptr
234a0     02 00 66 F0 | 	shl	_var01, #2
234a4     04 00 66 F0 | 	shl	_var01, #4
234a8     00 03 02 F1 | 	add	_var02, _var01
234ac     90 E5 05 F1 | 	add	objptr, #400
234b0     F2 02 62 FC | 	wrlong	_var02, objptr
234b4     ED E5 85 F1 | 	sub	objptr, #493
234b8                 | ' displaylist[1]:=buf_ptr<<4+%10  
234b8     F2 02 02 FB | 	rdlong	_var02, objptr
234bc     04 02 66 F0 | 	shl	_var02, #4
234c0     02 02 06 F1 | 	add	_var02, #2
234c4     F1 E5 05 F1 | 	add	objptr, #497
234c8     F2 02 62 FC | 	wrlong	_var02, objptr
234cc                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
234cc     04 E4 85 F1 | 	sub	objptr, #4
234d0     F2 02 02 F6 | 	mov	_var02, objptr
234d4     CD E5 85 F1 | 	sub	objptr, #461
234d8     F2 02 62 FC | 	wrlong	_var02, objptr
234dc     20 E4 85 F1 | 	sub	objptr, #32
234e0                 | _hg010b_spin2_makedl_ret
234e0     2D 00 64 FD | 	ret
234e4                 | 
234e4                 | ' 
234e4                 | ' 
234e4                 | ' '****************************************************************************************************************
234e4                 | ' '                                                                        					*
234e4                 | ' '  Graphic primitives                                                    					*
234e4                 | ' '                                                                        					*
234e4                 | ' '****************************************************************************************************************
234e4                 | ' 
234e4                 | ' pub setspriteptr(num,ptr)
234e4                 | _hg010b_spin2_setspriteptr
234e4                 | ' long[@spr1ptr+12*num]:=ptr
234e4     11 E5 05 F1 | 	add	objptr, #273
234e8     F2 00 02 F6 | 	mov	_var01, objptr
234ec     09 03 02 F6 | 	mov	_var02, arg01
234f0     01 02 66 F0 | 	shl	_var02, #1
234f4     09 03 02 F1 | 	add	_var02, arg01
234f8     02 02 66 F0 | 	shl	_var02, #2
234fc     01 01 02 F1 | 	add	_var01, _var02
23500     00 15 62 FC | 	wrlong	arg02, _var01
23504     11 E5 85 F1 | 	sub	objptr, #273
23508                 | _hg010b_spin2_setspriteptr_ret
23508     2D 00 64 FD | 	ret
2350c                 | 
2350c                 | ' 
2350c                 | ' pub setspritepos(num,x,y)
2350c                 | _hg010b_spin2_setspritepos
2350c                 | ' if y>601
2350c     01 00 00 FF 
23510     5A 16 56 F2 | 	cmps	arg03, ##602 wc
23514                 | '   y:=601
23514     01 00 00 3F 
23518     59 16 06 36 |  if_ae	mov	arg03, ##601
2351c                 | ' if x>1024
2351c     02 00 00 FF 
23520     01 14 56 F2 | 	cmps	arg02, ##1025 wc
23524                 | '   x:=1024
23524     0A 14 C6 39 |  if_ae	decod	arg02, #10
23528                 | ' word[@spr1ptr+12*num+4]:=x
23528     11 E5 05 F1 | 	add	objptr, #273
2352c     F2 00 02 F6 | 	mov	_var01, objptr
23530     09 03 02 F6 | 	mov	_var02, arg01
23534     01 02 66 F0 | 	shl	_var02, #1
23538     09 03 02 F1 | 	add	_var02, arg01
2353c     02 02 66 F0 | 	shl	_var02, #2
23540     01 01 02 F1 | 	add	_var01, _var02
23544     04 00 06 F1 | 	add	_var01, #4
23548     00 15 52 FC | 	wrword	arg02, _var01
2354c                 | ' word[@spr1ptr+12*num+6]:=y
2354c     F2 00 02 F6 | 	mov	_var01, objptr
23550     09 03 02 F6 | 	mov	_var02, arg01
23554     01 02 66 F0 | 	shl	_var02, #1
23558     09 03 02 F1 | 	add	_var02, arg01
2355c     02 02 66 F0 | 	shl	_var02, #2
23560     01 01 02 F1 | 	add	_var01, _var02
23564     06 00 06 F1 | 	add	_var01, #6
23568     00 17 52 FC | 	wrword	arg03, _var01
2356c     11 E5 85 F1 | 	sub	objptr, #273
23570                 | _hg010b_spin2_setspritepos_ret
23570     2D 00 64 FD | 	ret
23574                 | 
23574                 | ' 
23574                 | ' pub setspritesize(num,w,h)
23574                 | _hg010b_spin2_setspritesize
23574                 | ' word[@spr1ptr+12*num+8]:=w
23574     11 E5 05 F1 | 	add	objptr, #273
23578     F2 00 02 F6 | 	mov	_var01, objptr
2357c     09 03 02 F6 | 	mov	_var02, arg01
23580     01 02 66 F0 | 	shl	_var02, #1
23584     09 03 02 F1 | 	add	_var02, arg01
23588     02 02 66 F0 | 	shl	_var02, #2
2358c     01 01 02 F1 | 	add	_var01, _var02
23590     08 00 06 F1 | 	add	_var01, #8
23594     00 15 52 FC | 	wrword	arg02, _var01
23598                 | ' word[@spr1ptr+12*num+10]:=h
23598     F2 00 02 F6 | 	mov	_var01, objptr
2359c     09 03 02 F6 | 	mov	_var02, arg01
235a0     01 02 66 F0 | 	shl	_var02, #1
235a4     09 03 02 F1 | 	add	_var02, arg01
235a8     02 02 66 F0 | 	shl	_var02, #2
235ac     01 01 02 F1 | 	add	_var01, _var02
235b0     0A 00 06 F1 | 	add	_var01, #10
235b4     00 17 52 FC | 	wrword	arg03, _var01
235b8     11 E5 85 F1 | 	sub	objptr, #273
235bc                 | _hg010b_spin2_setspritesize_ret
235bc     2D 00 64 FD | 	ret
235c0                 | 
235c0                 | ' 
235c0                 | ' 
235c0                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
235c0                 | ' 
235c0                 | ' 
235c0                 | ' pub putpixel(x,y,c)
235c0                 | _hg010b_spin2_putpixel
235c0     04 4A 05 F6 | 	mov	COUNT_, #4
235c4     A8 00 A0 FD | 	call	#pushregs_
235c8     09 27 02 F6 | 	mov	local01, arg01
235cc                 | ' 
235cc                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
235cc     00 28 06 F6 | 	mov	local02, #0
235d0     00 26 56 F2 | 	cmps	local01, #0 wc
235d4     01 28 66 36 |  if_ae	neg	local02, #1
235d8     E9 E4 05 F1 | 	add	objptr, #233
235dc     F2 1A 02 FB | 	rdlong	arg05, objptr
235e0     02 1A 66 F0 | 	shl	arg05, #2
235e4     0D 27 52 F2 | 	cmps	local01, arg05 wc
235e8     15 2B A2 F1 | 	subx	local03, local03
235ec     15 29 02 F5 | 	and	local02, local03
235f0     00 2A 06 F6 | 	mov	local03, #0
235f4     00 14 56 F2 | 	cmps	arg02, #0 wc
235f8     01 2A 66 36 |  if_ae	neg	local03, #1
235fc     15 29 02 F5 | 	and	local02, local03
23600     04 E4 85 F1 | 	sub	objptr, #4
23604     F2 2A 02 FB | 	rdlong	local03, objptr
23608     E5 E4 85 F1 | 	sub	objptr, #229
2360c     15 15 52 F2 | 	cmps	arg02, local03 wc
23610     16 2D A2 F1 | 	subx	local04, local04
23614     16 29 CA F7 | 	test	local02, local04 wz
23618     48 00 90 AD |  if_e	jmp	#LR__2720
2361c     DD E4 05 F1 | 	add	objptr, #221
23620     F2 12 02 FB | 	rdlong	arg01, objptr
23624     14 E4 05 F1 | 	add	objptr, #20
23628     F2 2C 02 FB | 	rdlong	local04, objptr
2362c     02 2C 66 F0 | 	shl	local04, #2
23630     0A 2D 02 FD | 	qmul	local04, arg02
23634                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
23634     0B 15 02 F6 | 	mov	arg02, arg03
23638     01 16 06 F6 | 	mov	arg03, #1
2363c     00 18 06 F6 | 	mov	arg04, #0
23640     01 1A 06 F6 | 	mov	arg05, #1
23644     0A 00 00 FF 
23648     DB E5 05 F1 | 	add	objptr, ##5595
2364c     18 2C 62 FD | 	getqx	local04
23650     13 2D 02 F1 | 	add	local04, local01
23654     16 13 02 F1 | 	add	arg01, local04
23658     6C 1D B0 FD | 	call	#_psram_spin2_fill
2365c     0B 00 00 FF 
23660     CC E4 85 F1 | 	sub	objptr, ##5836
23664                 | LR__2720
23664     A7 F0 03 F6 | 	mov	ptra, fp
23668     B2 00 A0 FD | 	call	#popregs_
2366c                 | _hg010b_spin2_putpixel_ret
2366c     2D 00 64 FD | 	ret
23670                 | 
23670                 | ' 
23670                 | ' pub putpixel2(x,y,c)
23670                 | _hg010b_spin2_putpixel2
23670     02 4A 05 F6 | 	mov	COUNT_, #2
23674     A8 00 A0 FD | 	call	#pushregs_
23678     DD E4 05 F1 | 	add	objptr, #221
2367c     F2 26 02 FB | 	rdlong	local01, objptr
23680     14 E4 05 F1 | 	add	objptr, #20
23684     F2 1A 02 FB | 	rdlong	arg05, objptr
23688     02 1A 66 F0 | 	shl	arg05, #2
2368c     0A 1B 02 FD | 	qmul	arg05, arg02
23690                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
23690     0B 15 02 F6 | 	mov	arg02, arg03
23694     01 16 06 F6 | 	mov	arg03, #1
23698     00 18 06 F6 | 	mov	arg04, #0
2369c     01 1A 06 F6 | 	mov	arg05, #1
236a0     0A 00 00 FF 
236a4     DB E5 05 F1 | 	add	objptr, ##5595
236a8     18 28 62 FD | 	getqx	local02
236ac     09 29 02 F1 | 	add	local02, arg01
236b0     14 27 02 F1 | 	add	local01, local02
236b4     13 13 02 F6 | 	mov	arg01, local01
236b8     0C 1D B0 FD | 	call	#_psram_spin2_fill
236bc     0B 00 00 FF 
236c0     CC E4 85 F1 | 	sub	objptr, ##5836
236c4     A7 F0 03 F6 | 	mov	ptra, fp
236c8     B2 00 A0 FD | 	call	#popregs_
236cc                 | _hg010b_spin2_putpixel2_ret
236cc     2D 00 64 FD | 	ret
236d0                 | 
236d0                 | ' 
236d0                 | ' pub getpixel2(x,y): c 
236d0                 | _hg010b_spin2_getpixel2
236d0     02 4A 05 F6 | 	mov	COUNT_, #2
236d4     A8 00 A0 FD | 	call	#pushregs_
236d8     0C F0 07 F1 | 	add	ptra, #12
236dc     04 4E 05 F1 | 	add	fp, #4
236e0     A7 12 62 FC | 	wrlong	arg01, fp
236e4     04 4E 05 F1 | 	add	fp, #4
236e8     A7 14 62 FC | 	wrlong	arg02, fp
236ec     08 4E 85 F1 | 	sub	fp, #8
236f0     A7 00 68 FC | 	wrlong	#0, fp
236f4     A7 12 02 F6 | 	mov	arg01, fp
236f8     DD E4 05 F1 | 	add	objptr, #221
236fc     F2 14 02 FB | 	rdlong	arg02, objptr
23700     14 E4 05 F1 | 	add	objptr, #20
23704     F2 16 02 FB | 	rdlong	arg03, objptr
23708     02 16 66 F0 | 	shl	arg03, #2
2370c     08 4E 05 F1 | 	add	fp, #8
23710     A7 FA 01 FB | 	rdlong	result1, fp
23714     FD 16 02 FD | 	qmul	arg03, result1
23718                 | ' 
23718                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
23718     04 4E 85 F1 | 	sub	fp, #4
2371c     A7 26 02 FB | 	rdlong	local01, fp
23720     04 4E 85 F1 | 	sub	fp, #4
23724     01 16 06 F6 | 	mov	arg03, #1
23728     0A 00 00 FF 
2372c     DB E5 05 F1 | 	add	objptr, ##5595
23730     18 28 62 FD | 	getqx	local02
23734     13 29 02 F1 | 	add	local02, local01
23738     14 15 02 F1 | 	add	arg02, local02
2373c     50 1B B0 FD | 	call	#_psram_spin2_read1
23740     0B 00 00 FF 
23744     CC E4 85 F1 | 	sub	objptr, ##5836
23748                 | ' return c
23748     A7 FA 01 FB | 	rdlong	result1, fp
2374c     A7 F0 03 F6 | 	mov	ptra, fp
23750     B2 00 A0 FD | 	call	#popregs_
23754                 | _hg010b_spin2_getpixel2_ret
23754     2D 00 64 FD | 	ret
23758                 | 
23758                 | '   
23758                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
23758                 | ' 
23758                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
23758                 | _hg010b_spin2_fastline
23758     02 4A 05 F6 | 	mov	COUNT_, #2
2375c     A8 00 A0 FD | 	call	#pushregs_
23760     09 27 02 F6 | 	mov	local01, arg01
23764     0A 29 02 F6 | 	mov	local02, arg02
23768                 | ' 
23768                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
23768     00 16 56 F2 | 	cmps	arg03, #0 wc
2376c     F4 00 90 CD |  if_b	jmp	#LR__2730
23770     01 00 00 FF 
23774     2A E4 05 F1 | 	add	objptr, ##554
23778     F2 1A 02 FB | 	rdlong	arg05, objptr
2377c     01 00 00 FF 
23780     2A E4 85 F1 | 	sub	objptr, ##554
23784     0D 17 52 F2 | 	cmps	arg03, arg05 wc
23788     D8 00 90 3D |  if_ae	jmp	#LR__2730
2378c     00 26 56 F2 | 	cmps	local01, #0 wc
23790     00 28 56 C2 |  if_b	cmps	local02, #0 wc
23794     CC 00 90 CD |  if_b	jmp	#LR__2730
23798     01 00 00 FF 
2379c     26 E4 05 F1 | 	add	objptr, ##550
237a0     F2 1A 02 FB | 	rdlong	arg05, objptr
237a4     01 00 00 FF 
237a8     26 E4 85 F1 | 	sub	objptr, ##550
237ac     0D 27 5A F2 | 	cmps	local01, arg05 wcz
237b0     01 00 00 1F 
237b4     26 E4 05 11 |  if_a	add	objptr, ##550
237b8     F2 12 02 1B |  if_a	rdlong	arg01, objptr
237bc     01 00 00 1F 
237c0     26 E4 85 11 |  if_a	sub	objptr, ##550
237c4     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
237c8                 | '   return
237c8     98 00 90 1D |  if_a	jmp	#LR__2730
237cc     14 27 5A F2 | 	cmps	local01, local02 wcz
237d0     13 1B 02 16 |  if_a	mov	arg05, local01
237d4     14 27 02 16 |  if_a	mov	local01, local02
237d8     0D 29 02 16 |  if_a	mov	local02, arg05
237dc     00 26 56 F2 | 	cmps	local01, #0 wc
237e0     00 26 06 C6 |  if_b	mov	local01, #0
237e4     01 00 00 FF 
237e8     26 E4 05 F1 | 	add	objptr, ##550
237ec     F2 1A 02 FB | 	rdlong	arg05, objptr
237f0     01 00 00 FF 
237f4     26 E4 85 F1 | 	sub	objptr, ##550
237f8     0D 29 52 F2 | 	cmps	local02, arg05 wc
237fc     01 00 00 3F 
23800     26 E4 05 31 |  if_ae	add	objptr, ##550
23804     F2 28 02 3B |  if_ae	rdlong	local02, objptr
23808     01 00 00 3F 
2380c     26 E4 85 31 |  if_ae	sub	objptr, ##550
23810     DD E4 05 F1 | 	add	objptr, #221
23814     F2 12 02 FB | 	rdlong	arg01, objptr
23818     14 E4 05 F1 | 	add	objptr, #20
2381c     F2 1A 02 FB | 	rdlong	arg05, objptr
23820     02 1A 66 F0 | 	shl	arg05, #2
23824     0B 1B 02 FD | 	qmul	arg05, arg03
23828                 | ' if x1>x2
23828                 | '   x1,x2:=x2,x1
23828                 | ' if x1<0 
23828                 | '   x1:=0
23828                 | ' if x2>=xres
23828                 | '   x2:=xres-1  
23828     01 28 86 31 |  if_ae	sub	local02, #1
2382c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
2382c     01 16 06 F6 | 	mov	arg03, #1
23830     14 17 02 F1 | 	add	arg03, local02
23834     13 17 82 F1 | 	sub	arg03, local01
23838     0C 15 02 F6 | 	mov	arg02, arg04
2383c     00 18 06 F6 | 	mov	arg04, #0
23840     01 1A 06 F6 | 	mov	arg05, #1
23844     0A 00 00 FF 
23848     DB E5 05 F1 | 	add	objptr, ##5595
2384c     18 28 62 FD | 	getqx	local02
23850     13 29 02 F1 | 	add	local02, local01
23854     14 13 02 F1 | 	add	arg01, local02
23858     6C 1B B0 FD | 	call	#_psram_spin2_fill
2385c     0B 00 00 FF 
23860     CC E4 85 F1 | 	sub	objptr, ##5836
23864                 | LR__2730
23864     A7 F0 03 F6 | 	mov	ptra, fp
23868     B2 00 A0 FD | 	call	#popregs_
2386c                 | _hg010b_spin2_fastline_ret
2386c     2D 00 64 FD | 	ret
23870                 | 
23870                 | ' 
23870                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
23870                 | _hg010b_spin2_draw
23870     0E 4A 05 F6 | 	mov	COUNT_, #14
23874     A8 00 A0 FD | 	call	#pushregs_
23878     09 27 02 F6 | 	mov	local01, arg01
2387c     0A 29 02 F6 | 	mov	local02, arg02
23880     0B 2B 02 F6 | 	mov	local03, arg03
23884     0C 2D 02 F6 | 	mov	local04, arg04
23888     0D 2F 02 F6 | 	mov	local05, arg05
2388c                 | ' 
2388c                 | ' if (y1==y2)
2388c     16 29 0A F2 | 	cmp	local02, local04 wz
23890     18 00 90 5D |  if_ne	jmp	#LR__2740
23894                 | '   fastline(x1,x2,y1,c)
23894     13 13 02 F6 | 	mov	arg01, local01
23898     15 15 02 F6 | 	mov	arg02, local03
2389c     14 17 02 F6 | 	mov	arg03, local02
238a0     17 19 02 F6 | 	mov	arg04, local05
238a4     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
238a8     F8 00 90 FD | 	jmp	#LR__2746
238ac                 | LR__2740
238ac                 | ' else  
238ac                 | '   x:=x1
238ac     13 31 02 F6 | 	mov	local06, local01
238b0                 | '   y:=y1
238b0     14 33 02 F6 | 	mov	local07, local02
238b4                 | ' 
238b4                 | '   if (x1<x2) 
238b4     15 27 52 F2 | 	cmps	local01, local03 wc
238b8                 | '     xi:=1
238b8     01 34 06 C6 |  if_b	mov	local08, #1
238bc                 | '     dx:=x2-x1
238bc     15 37 02 C6 |  if_b	mov	local09, local03
238c0     13 37 82 C1 |  if_b	sub	local09, local01
238c4                 | '   else
238c4                 | '     xi:=-1
238c4     01 34 66 36 |  if_ae	neg	local08, #1
238c8                 | '     dx:=x1-x2
238c8     15 27 82 31 |  if_ae	sub	local01, local03
238cc     13 37 02 36 |  if_ae	mov	local09, local01
238d0                 | '   
238d0                 | '   if (y1<y2) 
238d0     16 29 52 F2 | 	cmps	local02, local04 wc
238d4                 | '     yi:=1
238d4     01 38 06 C6 |  if_b	mov	local10, #1
238d8                 | '     dy:=y2-y1
238d8     16 3B 02 C6 |  if_b	mov	local11, local04
238dc     14 3B 82 C1 |  if_b	sub	local11, local02
238e0                 | '   else
238e0                 | '     yi:=-1
238e0     01 38 66 36 |  if_ae	neg	local10, #1
238e4                 | '     dy:=y1-y2
238e4     16 29 82 31 |  if_ae	sub	local02, local04
238e8     14 3B 02 36 |  if_ae	mov	local11, local02
238ec                 | ' 
238ec                 | '   putpixel(x,y,c)
238ec     17 17 02 F6 | 	mov	arg03, local05
238f0     18 13 02 F6 | 	mov	arg01, local06
238f4     19 15 02 F6 | 	mov	arg02, local07
238f8     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
238fc                 | ' 
238fc                 | '   if (dx>dy)
238fc     1D 37 5A F2 | 	cmps	local09, local11 wcz
23900     50 00 90 ED |  if_be	jmp	#LR__2742
23904                 | '     ai:=(dy-dx)*2
23904     1D 3D 02 F6 | 	mov	local12, local11
23908     1B 3D 82 F1 | 	sub	local12, local09
2390c     01 3C 66 F0 | 	shl	local12, #1
23910                 | '     bi:=dy*2
23910     01 3A 66 F0 | 	shl	local11, #1
23914     1D 3F 02 F6 | 	mov	local13, local11
23918                 | '     d:= bi-dx
23918     1F 41 02 F6 | 	mov	local14, local13
2391c     1B 41 82 F1 | 	sub	local14, local09
23920                 | '     repeat while (x<>x2) 
23920                 | LR__2741
23920     15 31 0A F2 | 	cmp	local06, local03 wz
23924     7C 00 90 AD |  if_e	jmp	#LR__2745
23928                 | '       if (d>=0) 
23928     00 40 56 F2 | 	cmps	local14, #0 wc
2392c                 | '         x+=xi
2392c     1A 31 02 31 |  if_ae	add	local06, local08
23930                 | '         y+=yi
23930     1C 33 02 31 |  if_ae	add	local07, local10
23934                 | '         d+=ai
23934     1E 41 02 31 |  if_ae	add	local14, local12
23938                 | '       else
23938                 | '         d+=bi
23938     1F 41 02 C1 |  if_b	add	local14, local13
2393c                 | '         x+=xi
2393c     1A 31 02 C1 |  if_b	add	local06, local08
23940                 | '       putpixel(x,y,c)
23940     18 13 02 F6 | 	mov	arg01, local06
23944     19 15 02 F6 | 	mov	arg02, local07
23948     17 17 02 F6 | 	mov	arg03, local05
2394c     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
23950     CC FF 9F FD | 	jmp	#LR__2741
23954                 | LR__2742
23954                 | '   else
23954                 | '     ai:=(dx-dy)*2
23954     1B 3D 02 F6 | 	mov	local12, local09
23958     1D 3D 82 F1 | 	sub	local12, local11
2395c     01 3C 66 F0 | 	shl	local12, #1
23960                 | '     bi:=dx*2
23960     01 36 66 F0 | 	shl	local09, #1
23964     1B 3F 02 F6 | 	mov	local13, local09
23968                 | '     d:=bi-dy
23968     1F 41 02 F6 | 	mov	local14, local13
2396c     1D 41 82 F1 | 	sub	local14, local11
23970                 | '     repeat while (y<>y2)
23970                 | LR__2743
23970     16 33 0A F2 | 	cmp	local07, local04 wz
23974     2C 00 90 AD |  if_e	jmp	#LR__2744
23978                 | '       if (d>=0)
23978     00 40 56 F2 | 	cmps	local14, #0 wc
2397c                 | '         x+=xi
2397c     1A 31 02 31 |  if_ae	add	local06, local08
23980                 | '         y+=yi
23980     1C 33 02 31 |  if_ae	add	local07, local10
23984                 | '         d+=ai
23984     1E 41 02 31 |  if_ae	add	local14, local12
23988                 | '       else
23988                 | '         d+=bi
23988     1F 41 02 C1 |  if_b	add	local14, local13
2398c                 | '         y+=yi
2398c     1C 33 02 C1 |  if_b	add	local07, local10
23990                 | '       putpixel(x, y,c)
23990     18 13 02 F6 | 	mov	arg01, local06
23994     19 15 02 F6 | 	mov	arg02, local07
23998     17 17 02 F6 | 	mov	arg03, local05
2399c     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
239a0     CC FF 9F FD | 	jmp	#LR__2743
239a4                 | LR__2744
239a4                 | LR__2745
239a4                 | LR__2746
239a4     A7 F0 03 F6 | 	mov	ptra, fp
239a8     B2 00 A0 FD | 	call	#popregs_
239ac                 | _hg010b_spin2_draw_ret
239ac     2D 00 64 FD | 	ret
239b0                 | 
239b0                 | '  
239b0                 | ' pub fillpush(val) 
239b0                 | _hg010b_spin2_fillpush
239b0                 | ' fillstack[fillptr]:=val
239b0     0B 00 00 FF 
239b4     BA E4 05 F1 | 	add	objptr, ##5818
239b8     F2 00 02 FB | 	rdlong	_var01, objptr
239bc     02 00 66 F0 | 	shl	_var01, #2
239c0     0A 00 00 FF 
239c4     00 E4 85 F1 | 	sub	objptr, ##5120
239c8     F2 00 02 F1 | 	add	_var01, objptr
239cc     00 13 62 FC | 	wrlong	arg01, _var01
239d0                 | ' fillptr+=1   
239d0     0A 00 00 FF 
239d4     00 E4 05 F1 | 	add	objptr, ##5120
239d8     F2 00 02 FB | 	rdlong	_var01, objptr
239dc     01 00 06 F1 | 	add	_var01, #1
239e0     F2 00 62 FC | 	wrlong	_var01, objptr
239e4     0B 00 00 FF 
239e8     BA E4 85 F1 | 	sub	objptr, ##5818
239ec                 | _hg010b_spin2_fillpush_ret
239ec     2D 00 64 FD | 	ret
239f0                 | 
239f0                 | ' 
239f0                 | '     
239f0                 | ' pub fillpop() : val
239f0                 | _hg010b_spin2_fillpop
239f0                 | ' 
239f0                 | ' fillptr-=1
239f0     0B 00 00 FF 
239f4     BA E4 05 F1 | 	add	objptr, ##5818
239f8     F2 FA 01 FB | 	rdlong	result1, objptr
239fc     01 FA 85 F1 | 	sub	result1, #1
23a00     F2 FA 61 FC | 	wrlong	result1, objptr
23a04                 | ' if fillptr<0
23a04     0B 00 00 FF 
23a08     BA E4 85 F1 | 	sub	objptr, ##5818
23a0c     00 FA 55 F2 | 	cmps	result1, #0 wc
23a10                 | '   fillptr:=0
23a10     0B 00 00 CF 
23a14     BA E4 05 C1 |  if_b	add	objptr, ##5818
23a18     F2 00 68 CC |  if_b	wrlong	#0, objptr
23a1c     0B 00 00 CF 
23a20     BA E4 85 C1 |  if_b	sub	objptr, ##5818
23a24                 | '   val:=-12345
23a24     E7 FF 7F CF 
23a28     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
23a2c     28 00 90 CD |  if_b	jmp	#LR__2750
23a30                 | ' else 
23a30                 | '   val:=fillstack[fillptr]
23a30     0B 00 00 FF 
23a34     BA E4 05 F1 | 	add	objptr, ##5818
23a38     F2 00 02 FB | 	rdlong	_var01, objptr
23a3c     02 00 66 F0 | 	shl	_var01, #2
23a40     0A 00 00 FF 
23a44     00 E4 85 F1 | 	sub	objptr, ##5120
23a48     F2 00 02 F1 | 	add	_var01, objptr
23a4c     00 01 02 FB | 	rdlong	_var01, _var01
23a50     01 00 00 FF 
23a54     BA E4 85 F1 | 	sub	objptr, ##698
23a58                 | LR__2750
23a58                 | ' return val
23a58     00 FB 01 F6 | 	mov	result1, _var01
23a5c                 | _hg010b_spin2_fillpop_ret
23a5c     2D 00 64 FD | 	ret
23a60                 | 
23a60                 | ' 
23a60                 | '       
23a60                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
23a60                 | _hg010b_spin2_fill
23a60     0B 4A 05 F6 | 	mov	COUNT_, #11
23a64     A8 00 A0 FD | 	call	#pushregs_
23a68                 | ' 
23a68                 | ' newcolor:=newcolor & 255
23a68     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
23a6c                 | ' oldcolor:=oldcolor & 255
23a6c     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
23a70                 | ' 
23a70                 | ' if (oldcolor == newcolor) 
23a70     13 29 0A F2 | 	cmp	local02, local01 wz
23a74                 | '   return
23a74     70 02 90 AD |  if_e	jmp	#LR__2769
23a78                 | ' 
23a78                 | ' fillptr:=0
23a78     0B 00 00 FF 
23a7c     BA E4 05 F1 | 	add	objptr, ##5818
23a80     F2 00 68 FC | 	wrlong	#0, objptr
23a84                 | ' fillmax:=0
23a84     04 E4 05 F1 | 	add	objptr, #4
23a88     F2 00 68 FC | 	wrlong	#0, objptr
23a8c     0B 00 00 FF 
23a90     BE E4 85 F1 | 	sub	objptr, ##5822
23a94                 | ' fillpush(x)
23a94     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
23a98                 | ' fillpush(y)
23a98     0A 13 02 F6 | 	mov	arg01, arg02
23a9c     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
23aa0                 | ' y:=fillpop()
23aa0     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
23aa4     FD 2A 02 F6 | 	mov	local03, result1
23aa8                 | ' x:=fillpop()
23aa8     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
23aac     FD 2C 02 F6 | 	mov	local04, result1
23ab0                 | ' 'pinhigh(38)
23ab0                 | ' repeat while (x>-1)       
23ab0                 | LR__2760
23ab0     00 2C 56 F2 | 	cmps	local04, #0 wc
23ab4     30 02 90 CD |  if_b	jmp	#LR__2768
23ab8                 | '  ' pintoggle(39)
23ab8                 | '   x1 := x
23ab8     16 2F 02 F6 | 	mov	local05, local04
23abc                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
23abc                 | LR__2761
23abc     00 30 06 F6 | 	mov	local06, #0
23ac0     00 32 06 F6 | 	mov	local07, #0
23ac4     00 2E 56 F2 | 	cmps	local05, #0 wc
23ac8     01 32 66 36 |  if_ae	neg	local07, #1
23acc     00 32 0E F2 | 	cmp	local07, #0 wz
23ad0     00 30 26 56 |  if_ne	not	local06, #0
23ad4     00 34 06 F6 | 	mov	local08, #0
23ad8     00 36 06 F6 | 	mov	local09, #0
23adc     15 15 02 F6 | 	mov	arg02, local03
23ae0     17 13 02 F6 | 	mov	arg01, local05
23ae4     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
23ae8     14 FB 09 F2 | 	cmp	result1, local02 wz
23aec     00 36 26 A6 |  if_e	not	local09, #0
23af0     00 36 0E F2 | 	cmp	local09, #0 wz
23af4     00 34 26 56 |  if_ne	not	local08, #0
23af8     1A 31 CA F7 | 	test	local06, local08 wz
23afc                 | '     x1--
23afc     01 2E 86 51 |  if_ne	sub	local05, #1
23b00     B8 FF 9F 5D |  if_ne	jmp	#LR__2761
23b04                 | '   x1++
23b04     01 2E 06 F1 | 	add	local05, #1
23b08                 | '   spanabove := 0
23b08     00 38 06 F6 | 	mov	local10, #0
23b0c                 | '   spanbelow := 0
23b0c     00 3A 06 F6 | 	mov	local11, #0
23b10                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
23b10                 | LR__2762
23b10     00 30 06 F6 | 	mov	local06, #0
23b14     02 00 00 FF 
23b18     00 2E 56 F2 | 	cmps	local05, ##1024 wc
23b1c     00 30 26 C6 |  if_b	not	local06, #0
23b20     00 34 06 F6 | 	mov	local08, #0
23b24     00 36 06 F6 | 	mov	local09, #0
23b28     15 15 02 F6 | 	mov	arg02, local03
23b2c     17 13 02 F6 | 	mov	arg01, local05
23b30     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
23b34     14 FB 09 F2 | 	cmp	result1, local02 wz
23b38     00 36 26 A6 |  if_e	not	local09, #0
23b3c     00 36 0E F2 | 	cmp	local09, #0 wz
23b40     00 34 26 56 |  if_ne	not	local08, #0
23b44     1A 31 CA F7 | 	test	local06, local08 wz
23b48     88 01 90 AD |  if_e	jmp	#LR__2767
23b4c                 | '     putpixel2 (x1,y, newcolor & 255)
23b4c     13 17 E2 F8 | 	getbyte	arg03, local01, #0
23b50     17 13 02 F6 | 	mov	arg01, local05
23b54     15 15 02 F6 | 	mov	arg02, local03
23b58     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
23b5c                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
23b5c     00 30 06 F6 | 	mov	local06, #0
23b60     00 32 06 F6 | 	mov	local07, #0
23b64     00 38 0E F2 | 	cmp	local10, #0 wz
23b68     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
23b6c     01 32 66 26 |  if_nc_and_z	neg	local07, #1
23b70     00 32 0E F2 | 	cmp	local07, #0 wz
23b74     00 30 26 56 |  if_ne	not	local06, #0
23b78     00 34 06 F6 | 	mov	local08, #0
23b7c     00 36 06 F6 | 	mov	local09, #0
23b80     15 15 02 F6 | 	mov	arg02, local03
23b84     01 14 86 F1 | 	sub	arg02, #1
23b88     17 13 02 F6 | 	mov	arg01, local05
23b8c     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
23b90     14 FB 09 F2 | 	cmp	result1, local02 wz
23b94     00 36 26 A6 |  if_e	not	local09, #0
23b98     00 36 0E F2 | 	cmp	local09, #0 wz
23b9c     00 34 26 56 |  if_ne	not	local08, #0
23ba0     1A 31 CA F7 | 	test	local06, local08 wz
23ba4     1C 00 90 AD |  if_e	jmp	#LR__2763
23ba8                 | '       fillpush(x1)
23ba8     17 13 02 F6 | 	mov	arg01, local05
23bac     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
23bb0                 | '       fillpush(y-1)
23bb0     15 13 02 F6 | 	mov	arg01, local03
23bb4     01 12 86 F1 | 	sub	arg01, #1
23bb8     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
23bbc                 | '       spanabove := 1 
23bbc     01 38 06 F6 | 	mov	local10, #1
23bc0     4C 00 90 FD | 	jmp	#LR__2764
23bc4                 | LR__2763
23bc4                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
23bc4     00 30 06 F6 | 	mov	local06, #0
23bc8     00 32 06 F6 | 	mov	local07, #0
23bcc     00 38 0E F2 | 	cmp	local10, #0 wz
23bd0     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
23bd4     01 32 66 16 |  if_a	neg	local07, #1
23bd8     00 32 0E F2 | 	cmp	local07, #0 wz
23bdc     00 30 26 56 |  if_ne	not	local06, #0
23be0     00 34 06 F6 | 	mov	local08, #0
23be4     00 36 06 F6 | 	mov	local09, #0
23be8     15 15 02 F6 | 	mov	arg02, local03
23bec     01 14 86 F1 | 	sub	arg02, #1
23bf0     17 13 02 F6 | 	mov	arg01, local05
23bf4     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
23bf8     14 FB 09 F2 | 	cmp	result1, local02 wz
23bfc     00 36 26 56 |  if_ne	not	local09, #0
23c00     00 36 0E F2 | 	cmp	local09, #0 wz
23c04     00 34 26 56 |  if_ne	not	local08, #0
23c08     1A 31 CA F7 | 	test	local06, local08 wz
23c0c                 | '       spanabove := 0 
23c0c     00 38 06 56 |  if_ne	mov	local10, #0
23c10                 | LR__2764
23c10                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
23c10     00 30 06 F6 | 	mov	local06, #0
23c14     00 32 06 F6 | 	mov	local07, #0
23c18     00 3A 0E F2 | 	cmp	local11, #0 wz
23c1c     01 00 00 AF 
23c20     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
23c24     01 32 66 86 |  if_c_and_z	neg	local07, #1
23c28     00 32 0E F2 | 	cmp	local07, #0 wz
23c2c     00 30 26 56 |  if_ne	not	local06, #0
23c30     00 34 06 F6 | 	mov	local08, #0
23c34     00 36 06 F6 | 	mov	local09, #0
23c38     15 15 02 F6 | 	mov	arg02, local03
23c3c     01 14 06 F1 | 	add	arg02, #1
23c40     17 13 02 F6 | 	mov	arg01, local05
23c44     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
23c48     14 FB 09 F2 | 	cmp	result1, local02 wz
23c4c     00 36 26 A6 |  if_e	not	local09, #0
23c50     00 36 0E F2 | 	cmp	local09, #0 wz
23c54     00 34 26 56 |  if_ne	not	local08, #0
23c58     1A 31 CA F7 | 	test	local06, local08 wz
23c5c     1C 00 90 AD |  if_e	jmp	#LR__2765
23c60                 | '       fillpush(x1)
23c60     17 13 02 F6 | 	mov	arg01, local05
23c64     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
23c68                 | '       fillpush(y + 1)
23c68     15 13 02 F6 | 	mov	arg01, local03
23c6c     01 12 06 F1 | 	add	arg01, #1
23c70     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
23c74                 | '       spanBelow := 1
23c74     01 3A 06 F6 | 	mov	local11, #1
23c78     50 00 90 FD | 	jmp	#LR__2766
23c7c                 | LR__2765
23c7c                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
23c7c     00 30 06 F6 | 	mov	local06, #0
23c80     00 32 06 F6 | 	mov	local07, #0
23c84     00 3A 0E F2 | 	cmp	local11, #0 wz
23c88     01 00 00 5F 
23c8c     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
23c90     01 32 66 46 |  if_c_and_nz	neg	local07, #1
23c94     00 32 0E F2 | 	cmp	local07, #0 wz
23c98     00 30 26 56 |  if_ne	not	local06, #0
23c9c     00 34 06 F6 | 	mov	local08, #0
23ca0     00 36 06 F6 | 	mov	local09, #0
23ca4     15 15 02 F6 | 	mov	arg02, local03
23ca8     01 14 06 F1 | 	add	arg02, #1
23cac     17 13 02 F6 | 	mov	arg01, local05
23cb0     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
23cb4     14 FB 09 F2 | 	cmp	result1, local02 wz
23cb8     00 36 26 56 |  if_ne	not	local09, #0
23cbc     00 36 0E F2 | 	cmp	local09, #0 wz
23cc0     00 34 26 56 |  if_ne	not	local08, #0
23cc4     1A 31 CA F7 | 	test	local06, local08 wz
23cc8                 | '       spanbelow := 0
23cc8     00 3A 06 56 |  if_ne	mov	local11, #0
23ccc                 | LR__2766
23ccc                 | '     x1++
23ccc     01 2E 06 F1 | 	add	local05, #1
23cd0     3C FE 9F FD | 	jmp	#LR__2762
23cd4                 | LR__2767
23cd4                 | '   y:=fillpop()
23cd4     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
23cd8     FD 2A 02 F6 | 	mov	local03, result1
23cdc                 | '   x:=fillpop()
23cdc     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
23ce0     FD 2C 02 F6 | 	mov	local04, result1
23ce4     C8 FD 9F FD | 	jmp	#LR__2760
23ce8                 | LR__2768
23ce8                 | LR__2769
23ce8     A7 F0 03 F6 | 	mov	ptra, fp
23cec     B2 00 A0 FD | 	call	#popregs_
23cf0                 | _hg010b_spin2_fill_ret
23cf0     2D 00 64 FD | 	ret
23cf4                 | 
23cf4                 | ' 'pinlow(38)    
23cf4                 | ' 
23cf4                 | ' '-- A filled circle -----------------------------------------------------
23cf4                 | ' 
23cf4                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
23cf4                 | _hg010b_spin2_fcircle
23cf4     08 4A 05 F6 | 	mov	COUNT_, #8
23cf8     A8 00 A0 FD | 	call	#pushregs_
23cfc     0B 27 02 F6 | 	mov	local01, arg03
23d00     FF FF 7F FF 
23d04     FE 27 06 FD | 	qmul	local01, ##-2
23d08     09 29 02 F6 | 	mov	local02, arg01
23d0c     0A 2B 02 F6 | 	mov	local03, arg02
23d10     0C 2D 02 F6 | 	mov	local04, arg04
23d14                 | ' 
23d14                 | ' d:=5-4*r
23d14     13 19 02 F6 | 	mov	arg04, local01
23d18     02 18 66 F0 | 	shl	arg04, #2
23d1c     05 2E 06 F6 | 	mov	local05, #5
23d20     0C 2F 82 F1 | 	sub	local05, arg04
23d24                 | ' x:=0
23d24     00 30 06 F6 | 	mov	local06, #0
23d28                 | ' y:=r
23d28                 | ' da:=(-2*r+5)*4
23d28                 | ' db:=3*4
23d28     0C 32 06 F6 | 	mov	local07, #12
23d2c                 | ' repeat while (x<=y) 
23d2c     18 34 62 FD | 	getqx	local08
23d30     05 34 06 F1 | 	add	local08, #5
23d34     02 34 66 F0 | 	shl	local08, #2
23d38                 | LR__2770
23d38     13 31 5A F2 | 	cmps	local06, local01 wcz
23d3c     B4 00 90 1D |  if_a	jmp	#LR__2772
23d40                 | '   fastline(x0-x,x0+x,y0-y,c)
23d40     14 13 02 F6 | 	mov	arg01, local02
23d44     18 13 82 F1 | 	sub	arg01, local06
23d48     14 15 02 F6 | 	mov	arg02, local02
23d4c     18 15 02 F1 | 	add	arg02, local06
23d50     15 17 02 F6 | 	mov	arg03, local03
23d54     13 17 82 F1 | 	sub	arg03, local01
23d58     16 19 02 F6 | 	mov	arg04, local04
23d5c     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
23d60                 | '   fastline(x0-x,x0+x,y0+y,c)
23d60     14 13 02 F6 | 	mov	arg01, local02
23d64     18 13 82 F1 | 	sub	arg01, local06
23d68     14 15 02 F6 | 	mov	arg02, local02
23d6c     18 15 02 F1 | 	add	arg02, local06
23d70     15 17 02 F6 | 	mov	arg03, local03
23d74     13 17 02 F1 | 	add	arg03, local01
23d78     16 19 02 F6 | 	mov	arg04, local04
23d7c     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
23d80                 | '   fastline(x0-y,x0+y,y0-x,c)
23d80     14 13 02 F6 | 	mov	arg01, local02
23d84     13 13 82 F1 | 	sub	arg01, local01
23d88     14 15 02 F6 | 	mov	arg02, local02
23d8c     13 15 02 F1 | 	add	arg02, local01
23d90     15 17 02 F6 | 	mov	arg03, local03
23d94     18 17 82 F1 | 	sub	arg03, local06
23d98     16 19 02 F6 | 	mov	arg04, local04
23d9c     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
23da0                 | '   fastline(x0-y,x0+y,y0+x,c)
23da0     14 13 02 F6 | 	mov	arg01, local02
23da4     13 13 82 F1 | 	sub	arg01, local01
23da8     14 15 02 F6 | 	mov	arg02, local02
23dac     13 15 02 F1 | 	add	arg02, local01
23db0     15 17 02 F6 | 	mov	arg03, local03
23db4     18 17 02 F1 | 	add	arg03, local06
23db8     16 19 02 F6 | 	mov	arg04, local04
23dbc     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
23dc0                 | '   if d>0 
23dc0     01 2E 56 F2 | 	cmps	local05, #1 wc
23dc4     18 00 90 CD |  if_b	jmp	#LR__2771
23dc8                 | '     d+=da
23dc8     1A 2F 02 F1 | 	add	local05, local08
23dcc                 | '     y-=1
23dcc     01 26 86 F1 | 	sub	local01, #1
23dd0                 | '     x+=1
23dd0     01 30 06 F1 | 	add	local06, #1
23dd4                 | '     da+=4*4
23dd4     10 34 06 F1 | 	add	local08, #16
23dd8                 | '     db+=2*4
23dd8     08 32 06 F1 | 	add	local07, #8
23ddc     58 FF 9F FD | 	jmp	#LR__2770
23de0                 | LR__2771
23de0                 | '   else
23de0                 | '     d+=db
23de0     19 2F 02 F1 | 	add	local05, local07
23de4                 | '     x+=1
23de4     01 30 06 F1 | 	add	local06, #1
23de8                 | '     da+=2*4
23de8     08 34 06 F1 | 	add	local08, #8
23dec                 | '     db+=2*4
23dec     08 32 06 F1 | 	add	local07, #8
23df0     44 FF 9F FD | 	jmp	#LR__2770
23df4                 | LR__2772
23df4     A7 F0 03 F6 | 	mov	ptra, fp
23df8     B2 00 A0 FD | 	call	#popregs_
23dfc                 | _hg010b_spin2_fcircle_ret
23dfc     2D 00 64 FD | 	ret
23e00                 | 
23e00                 | '  
23e00                 | ' '-- A circle ------------------------------------------------------------ 
23e00                 | '  
23e00                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
23e00                 | _hg010b_spin2_circle
23e00     08 4A 05 F6 | 	mov	COUNT_, #8
23e04     A8 00 A0 FD | 	call	#pushregs_
23e08     0B 27 02 F6 | 	mov	local01, arg03
23e0c     FF FF 7F FF 
23e10     FE 27 06 FD | 	qmul	local01, ##-2
23e14     09 29 02 F6 | 	mov	local02, arg01
23e18     0A 2B 02 F6 | 	mov	local03, arg02
23e1c     0C 2D 02 F6 | 	mov	local04, arg04
23e20                 | ' 
23e20                 | '  
23e20                 | ' d:=5-4*r
23e20     13 19 02 F6 | 	mov	arg04, local01
23e24     02 18 66 F0 | 	shl	arg04, #2
23e28     05 2E 06 F6 | 	mov	local05, #5
23e2c     0C 2F 82 F1 | 	sub	local05, arg04
23e30                 | ' x:=0
23e30     00 30 06 F6 | 	mov	local06, #0
23e34                 | ' y:=r
23e34                 | ' da:=(-2*r+5)*4
23e34                 | ' db:=3*4
23e34     0C 32 06 F6 | 	mov	local07, #12
23e38                 | ' repeat while (x<=y) 
23e38     18 34 62 FD | 	getqx	local08
23e3c     05 34 06 F1 | 	add	local08, #5
23e40     02 34 66 F0 | 	shl	local08, #2
23e44                 | LR__2780
23e44     13 31 5A F2 | 	cmps	local06, local01 wcz
23e48     F4 00 90 1D |  if_a	jmp	#LR__2782
23e4c                 | '   putpixel(x0-x,y0-y,c)
23e4c     14 13 02 F6 | 	mov	arg01, local02
23e50     18 13 82 F1 | 	sub	arg01, local06
23e54     15 15 02 F6 | 	mov	arg02, local03
23e58     13 15 82 F1 | 	sub	arg02, local01
23e5c     16 17 02 F6 | 	mov	arg03, local04
23e60     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
23e64                 | '   putpixel(x0-x,y0+y,c)
23e64     14 13 02 F6 | 	mov	arg01, local02
23e68     18 13 82 F1 | 	sub	arg01, local06
23e6c     15 15 02 F6 | 	mov	arg02, local03
23e70     13 15 02 F1 | 	add	arg02, local01
23e74     16 17 02 F6 | 	mov	arg03, local04
23e78     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
23e7c                 | '   putpixel(x0+x,y0-y,c)
23e7c     14 13 02 F6 | 	mov	arg01, local02
23e80     18 13 02 F1 | 	add	arg01, local06
23e84     15 15 02 F6 | 	mov	arg02, local03
23e88     13 15 82 F1 | 	sub	arg02, local01
23e8c     16 17 02 F6 | 	mov	arg03, local04
23e90     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
23e94                 | '   putpixel(x0+x,y0+y,c)
23e94     14 13 02 F6 | 	mov	arg01, local02
23e98     18 13 02 F1 | 	add	arg01, local06
23e9c     15 15 02 F6 | 	mov	arg02, local03
23ea0     13 15 02 F1 | 	add	arg02, local01
23ea4     16 17 02 F6 | 	mov	arg03, local04
23ea8     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
23eac                 | '   putpixel(x0-y,y0-x,c)
23eac     14 13 02 F6 | 	mov	arg01, local02
23eb0     13 13 82 F1 | 	sub	arg01, local01
23eb4     15 15 02 F6 | 	mov	arg02, local03
23eb8     18 15 82 F1 | 	sub	arg02, local06
23ebc     16 17 02 F6 | 	mov	arg03, local04
23ec0     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
23ec4                 | '   putpixel(x0-y,y0+x,c)
23ec4     14 13 02 F6 | 	mov	arg01, local02
23ec8     13 13 82 F1 | 	sub	arg01, local01
23ecc     15 15 02 F6 | 	mov	arg02, local03
23ed0     18 15 02 F1 | 	add	arg02, local06
23ed4     16 17 02 F6 | 	mov	arg03, local04
23ed8     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
23edc                 | '   putpixel(x0+y,y0-x,c)
23edc     14 13 02 F6 | 	mov	arg01, local02
23ee0     13 13 02 F1 | 	add	arg01, local01
23ee4     15 15 02 F6 | 	mov	arg02, local03
23ee8     18 15 82 F1 | 	sub	arg02, local06
23eec     16 17 02 F6 | 	mov	arg03, local04
23ef0     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
23ef4                 | '   putpixel(x0+y,y0+x,c)
23ef4     14 13 02 F6 | 	mov	arg01, local02
23ef8     13 13 02 F1 | 	add	arg01, local01
23efc     15 15 02 F6 | 	mov	arg02, local03
23f00     18 15 02 F1 | 	add	arg02, local06
23f04     16 17 02 F6 | 	mov	arg03, local04
23f08     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
23f0c                 | '   if d>0 
23f0c     01 2E 56 F2 | 	cmps	local05, #1 wc
23f10     18 00 90 CD |  if_b	jmp	#LR__2781
23f14                 | '     d+=da
23f14     1A 2F 02 F1 | 	add	local05, local08
23f18                 | '     y-=1
23f18     01 26 86 F1 | 	sub	local01, #1
23f1c                 | '     x+=1
23f1c     01 30 06 F1 | 	add	local06, #1
23f20                 | '     da+=4*4
23f20     10 34 06 F1 | 	add	local08, #16
23f24                 | '     db+=2*4
23f24     08 32 06 F1 | 	add	local07, #8
23f28     18 FF 9F FD | 	jmp	#LR__2780
23f2c                 | LR__2781
23f2c                 | '   else
23f2c                 | '     d+=db
23f2c     19 2F 02 F1 | 	add	local05, local07
23f30                 | '     x+=1
23f30     01 30 06 F1 | 	add	local06, #1
23f34                 | '     da+=2*4
23f34     08 34 06 F1 | 	add	local08, #8
23f38                 | '     db+=2*4
23f38     08 32 06 F1 | 	add	local07, #8
23f3c     04 FF 9F FD | 	jmp	#LR__2780
23f40                 | LR__2782
23f40     A7 F0 03 F6 | 	mov	ptra, fp
23f44     B2 00 A0 FD | 	call	#popregs_
23f48                 | _hg010b_spin2_circle_ret
23f48     2D 00 64 FD | 	ret
23f4c                 | 
23f4c                 | '     
23f4c                 | ' '-- A frame (an empty rectangle) ---------------------------------------
23f4c                 | ' 
23f4c                 | ' pub frame(x1,y1,x2,y2,c)
23f4c                 | _hg010b_spin2_frame
23f4c     05 4A 05 F6 | 	mov	COUNT_, #5
23f50     A8 00 A0 FD | 	call	#pushregs_
23f54     09 27 02 F6 | 	mov	local01, arg01
23f58     0A 29 02 F6 | 	mov	local02, arg02
23f5c     0B 2B 02 F6 | 	mov	local03, arg03
23f60     0C 2D 02 F6 | 	mov	local04, arg04
23f64     0D 2F 02 F6 | 	mov	local05, arg05
23f68                 | ' 
23f68                 | ' fastline(x1,x2,y1,c)
23f68     13 13 02 F6 | 	mov	arg01, local01
23f6c     15 15 02 F6 | 	mov	arg02, local03
23f70     14 17 02 F6 | 	mov	arg03, local02
23f74     17 19 02 F6 | 	mov	arg04, local05
23f78     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
23f7c                 | ' fastline(x1,x2,y2,c)
23f7c     13 13 02 F6 | 	mov	arg01, local01
23f80     15 15 02 F6 | 	mov	arg02, local03
23f84     16 17 02 F6 | 	mov	arg03, local04
23f88     17 19 02 F6 | 	mov	arg04, local05
23f8c     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
23f90                 | ' line(x1,y1,x1,y2,c)
23f90     13 13 02 F6 | 	mov	arg01, local01
23f94     14 15 02 F6 | 	mov	arg02, local02
23f98     13 17 02 F6 | 	mov	arg03, local01
23f9c     16 19 02 F6 | 	mov	arg04, local04
23fa0     17 1B 02 F6 | 	mov	arg05, local05
23fa4                 | ' draw(x1,y1,x2,y2,c)
23fa4     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
23fa8                 | ' line(x2,y1,x2,y2,c)
23fa8     15 13 02 F6 | 	mov	arg01, local03
23fac     14 15 02 F6 | 	mov	arg02, local02
23fb0     15 17 02 F6 | 	mov	arg03, local03
23fb4     16 19 02 F6 | 	mov	arg04, local04
23fb8     17 1B 02 F6 | 	mov	arg05, local05
23fbc                 | ' draw(x1,y1,x2,y2,c)
23fbc     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
23fc0     A7 F0 03 F6 | 	mov	ptra, fp
23fc4     B2 00 A0 FD | 	call	#popregs_
23fc8                 | _hg010b_spin2_frame_ret
23fc8     2D 00 64 FD | 	ret
23fcc                 | 
23fcc                 | ' 
23fcc                 | ' '-- A box (a filled rectangle) ----------------------------------------
23fcc                 | ' 
23fcc                 | ' pub box(x1,y1,x2,y2,c) |yy
23fcc                 | _hg010b_spin2_box
23fcc     06 4A 05 F6 | 	mov	COUNT_, #6
23fd0     A8 00 A0 FD | 	call	#pushregs_
23fd4     09 27 02 F6 | 	mov	local01, arg01
23fd8     0A 29 02 F6 | 	mov	local02, arg02
23fdc     0B 2B 02 F6 | 	mov	local03, arg03
23fe0     0C 2D 02 F6 | 	mov	local04, arg04
23fe4     0D 2F 02 F6 | 	mov	local05, arg05
23fe8                 | ' 
23fe8                 | ' repeat yy from y1 to y2
23fe8     14 2D 52 F2 | 	cmps	local04, local02 wc
23fec     01 30 86 F6 | 	negc	local06, #1
23ff0     18 2D 02 F1 | 	add	local04, local06
23ff4                 | LR__2790
23ff4                 | '   fastline(x1,x2,yy,c)
23ff4     13 13 02 F6 | 	mov	arg01, local01
23ff8     15 15 02 F6 | 	mov	arg02, local03
23ffc     17 19 02 F6 | 	mov	arg04, local05
24000     14 17 02 F6 | 	mov	arg03, local02
24004     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
24008     18 29 02 F1 | 	add	local02, local06
2400c     16 29 0A F2 | 	cmp	local02, local04 wz
24010     E0 FF 9F 5D |  if_ne	jmp	#LR__2790
24014     A7 F0 03 F6 | 	mov	ptra, fp
24018     B2 00 A0 FD | 	call	#popregs_
2401c                 | _hg010b_spin2_box_ret
2401c     2D 00 64 FD | 	ret
24020                 | 
24020                 | '       
24020                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
24020                 | _hg010b_spin2_putcharxycgf
24020                 | ' 
24020                 | '  
24020                 | ' repeat yy from 0 to 15
24020     00 00 06 F6 | 	mov	_var01, #0
24024     97 8C 48 FB | 	callpa	#(@LR__2802-@LR__2800)>>2,fcache_load_ptr_
24028                 | LR__2800
24028                 | ' 
24028                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
24028     95 E4 05 F1 | 	add	objptr, #149
2402c     F2 02 02 FB | 	rdlong	_var02, objptr
24030     0A 02 66 F0 | 	shl	_var02, #10
24034     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
24038     01 05 02 F1 | 	add	_var03, _var02
2403c     0B 03 02 F6 | 	mov	_var02, arg03
24040     04 02 66 F0 | 	shl	_var02, #4
24044     01 05 02 F1 | 	add	_var03, _var02
24048     00 05 02 F1 | 	add	_var03, _var01
2404c     02 05 C2 FA | 	rdbyte	_var03, _var03
24050                 | '   asm
24050     00 04 0E F4 | 	testb	_var03, #0 wz
24054     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
24058     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
2405c     01 04 0E F4 | 	testb	_var03, #1 wz
24060     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
24064     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
24068     02 04 0E F4 | 	testb	_var03, #2 wz
2406c     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
24070     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
24074     03 04 0E F4 | 	testb	_var03, #3 wz
24078     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
2407c     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
24080     04 04 0E F4 | 	testb	_var03, #4 wz
24084     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
24088     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
2408c     05 04 0E F4 | 	testb	_var03, #5 wz
24090     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
24094     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
24098     06 04 0E F4 | 	testb	_var03, #6 wz
2409c     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
240a0     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
240a4     07 04 0E F4 | 	testb	_var03, #7 wz
240a8     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
240ac     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
240b0                 | '   
240b0                 | '   ccc[0]:=c1
240b0     99 E5 05 F1 | 	add	objptr, #409
240b4     F2 06 62 FC | 	wrlong	_var04, objptr
240b8                 | '   ccc[1]:=c2 
240b8     04 E4 05 F1 | 	add	objptr, #4
240bc     F2 08 62 FC | 	wrlong	_var05, objptr
240c0                 | '   long[mailbox0][2]:=8
240c0     49 E4 85 F1 | 	sub	objptr, #73
240c4     F2 04 02 FB | 	rdlong	_var03, objptr
240c8     08 04 06 F1 | 	add	_var03, #8
240cc     02 11 68 FC | 	wrlong	#8, _var03
240d0                 | '   long[mailbox0][1]:=@ccc
240d0     45 E4 05 F1 | 	add	objptr, #69
240d4     F2 04 02 F6 | 	mov	_var03, objptr
240d8     45 E4 85 F1 | 	sub	objptr, #69
240dc     F2 02 02 FB | 	rdlong	_var02, objptr
240e0     04 02 06 F1 | 	add	_var02, #4
240e4     01 05 62 FC | 	wrlong	_var03, _var02
240e8                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
240e8     0C E5 85 F1 | 	sub	objptr, #268
240ec     F2 04 02 FB | 	rdlong	_var03, objptr
240f0     0A 03 02 F6 | 	mov	_var02, arg02
240f4     00 03 02 F1 | 	add	_var02, _var01
240f8     0A 02 66 F0 | 	shl	_var02, #10
240fc     09 0B 02 F6 | 	mov	_var06, arg01
24100     02 0A 66 F0 | 	shl	_var06, #2
24104     05 03 02 F1 | 	add	_var02, _var06
24108     01 05 02 F1 | 	add	_var03, _var02
2410c     00 00 78 FF 
24110     00 04 06 F1 | 	add	_var03, ##-268435456
24114     0C E5 05 F1 | 	add	objptr, #268
24118     F2 0A 02 FB | 	rdlong	_var06, objptr
2411c     05 05 62 FC | 	wrlong	_var03, _var06
24120                 | '   repeat
24120                 | LR__2801
24120     F2 04 02 FB | 	rdlong	_var03, objptr
24124     02 03 02 FB | 	rdlong	_var02, _var03
24128     00 02 56 F2 | 	cmps	_var02, #0 wc
2412c     F0 FF 9F CD |  if_b	jmp	#LR__2801
24130     E9 E5 85 F1 | 	sub	objptr, #489
24134     01 00 06 F1 | 	add	_var01, #1
24138     10 00 56 F2 | 	cmps	_var01, #16 wc
2413c     E8 FE 9F CD |  if_b	jmp	#LR__2800
24140                 | LR__2802
24140                 | _hg010b_spin2_putcharxycgf_ret
24140     2D 00 64 FD | 	ret
24144                 | 
24144                 | ' 
24144                 | ' 
24144                 | ' '**********************************************************************r***
24144                 | ' '                                                                        *
24144                 | ' ' Font related functions                                                 *
24144                 | ' '                                                                        *
24144                 | ' '*************************************************************************
24144                 | ' 
24144                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
24144                 | ' 
24144                 | ' pub setfontfamily(afontnum)
24144                 | _hg010b_spin2_setfontfamily
24144                 | ' 
24144                 | ' font_family:=afontnum
24144     95 E4 05 F1 | 	add	objptr, #149
24148     F2 12 62 FC | 	wrlong	arg01, objptr
2414c     95 E4 85 F1 | 	sub	objptr, #149
24150                 | ' 'if afontnum==8
24150                 | ' '  font_ptr:=@amiga_font
24150                 | ' 
24150                 | ' if afontnum==4
24150     04 12 0E F2 | 	cmp	arg01, #4 wz
24154                 | '   font_ptr:=@st_font
24154     08 00 00 AF 
24158     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
2415c     08 E4 05 A1 |  if_e	add	objptr, #8
24160     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
24164     08 E4 85 A1 |  if_e	sub	objptr, #8
24168     08 00 00 AF 
2416c     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
24170                 | ' if afontnum==0
24170     00 12 0E F2 | 	cmp	arg01, #0 wz
24174                 | '   font_ptr:=@vga_font
24174     08 E4 05 A1 |  if_e	add	objptr, #8
24178     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
2417c     08 E4 85 A1 |  if_e	sub	objptr, #8
24180                 | _hg010b_spin2_setfontfamily_ret
24180     2D 00 64 FD | 	ret
24184                 | 
24184                 | ' 
24184                 | ' '*************************************************************************
24184                 | ' '                                                                        *
24184                 | ' '  Cursor functions                                                      *
24184                 | ' '                                                                        *
24184                 | ' '*************************************************************************
24184                 | ' 
24184                 | ' 
24184                 | ' pub setcursorpos(x,y)
24184                 | _hg010b_spin2_setcursorpos
24184                 | ' 
24184                 | ' ''---------- Set the (x,y) position of cursor
24184                 | ' 
24184                 | ' cursor_x:=x
24184     3C E4 05 F1 | 	add	objptr, #60
24188     F2 12 52 FC | 	wrword	arg01, objptr
2418c                 | ' cursor_y:=y
2418c     02 E4 05 F1 | 	add	objptr, #2
24190     F2 14 42 FC | 	wrbyte	arg02, objptr
24194                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
24194     02 E4 85 F1 | 	sub	objptr, #2
24198     F2 14 E2 FA | 	rdword	arg02, objptr
2419c     02 14 66 F0 | 	shl	arg02, #2
241a0     02 E4 05 F1 | 	add	objptr, #2
241a4     F2 16 C2 FA | 	rdbyte	arg03, objptr
241a8     3E E4 85 F1 | 	sub	objptr, #62
241ac     04 16 66 F0 | 	shl	arg03, #4
241b0     04 16 06 F1 | 	add	arg03, #4
241b4     11 12 06 F6 | 	mov	arg01, #17
241b8     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
241bc                 | _hg010b_spin2_setcursorpos_ret
241bc     2D 00 64 FD | 	ret
241c0                 | 
241c0                 | ' 
241c0                 | ' pub setcursorx(x)
241c0                 | _hg010b_spin2_setcursorx
241c0                 | ' cursor_x:=x
241c0     3C E4 05 F1 | 	add	objptr, #60
241c4     F2 12 52 FC | 	wrword	arg01, objptr
241c8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
241c8     F2 14 E2 FA | 	rdword	arg02, objptr
241cc     02 14 66 F0 | 	shl	arg02, #2
241d0     02 E4 05 F1 | 	add	objptr, #2
241d4     F2 16 C2 FA | 	rdbyte	arg03, objptr
241d8     3E E4 85 F1 | 	sub	objptr, #62
241dc     04 16 66 F0 | 	shl	arg03, #4
241e0     04 16 06 F1 | 	add	arg03, #4
241e4     11 12 06 F6 | 	mov	arg01, #17
241e8     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
241ec                 | _hg010b_spin2_setcursorx_ret
241ec     2D 00 64 FD | 	ret
241f0                 | 
241f0                 | ' 
241f0                 | ' pub setcursory(y) 
241f0                 | _hg010b_spin2_setcursory
241f0                 | ' cursor_y:=y
241f0     3E E4 05 F1 | 	add	objptr, #62
241f4     F2 12 42 FC | 	wrbyte	arg01, objptr
241f8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
241f8     02 E4 85 F1 | 	sub	objptr, #2
241fc     F2 14 E2 FA | 	rdword	arg02, objptr
24200     02 14 66 F0 | 	shl	arg02, #2
24204     02 E4 05 F1 | 	add	objptr, #2
24208     F2 16 C2 FA | 	rdbyte	arg03, objptr
2420c     3E E4 85 F1 | 	sub	objptr, #62
24210     04 16 66 F0 | 	shl	arg03, #4
24214     04 16 06 F1 | 	add	arg03, #4
24218     11 12 06 F6 | 	mov	arg01, #17
2421c     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
24220                 | _hg010b_spin2_setcursory_ret
24220     2D 00 64 FD | 	ret
24224                 | 
24224                 | ' 
24224                 | ' '*************************************************************************
24224                 | ' '                                                                        *
24224                 | ' '  VBlank functions                                                      *
24224                 | ' '                                                                        *
24224                 | ' '*************************************************************************
24224                 | ' 
24224                 | ' pub waitvbl(amount) | i
24224                 | _hg010b_spin2_waitvbl
24224     03 4A 05 F6 | 	mov	COUNT_, #3
24228     A8 00 A0 FD | 	call	#pushregs_
2422c     09 27 02 F6 | 	mov	local01, arg01
24230                 | ' 
24230                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
24230                 | ' 
24230                 | ' repeat i from 1 to amount
24230     01 28 06 F6 | 	mov	local02, #1
24234     01 26 56 F2 | 	cmps	local01, #1 wc
24238     01 2A 86 F6 | 	negc	local03, #1
2423c     15 27 02 F1 | 	add	local01, local03
24240                 | LR__2810
24240                 | '   repeat until vblank==0
24240                 | LR__2811
24240     49 E4 05 F1 | 	add	objptr, #73
24244     F2 12 0A FB | 	rdlong	arg01, objptr wz
24248     49 E4 85 F1 | 	sub	objptr, #73
2424c     0C 00 90 AD |  if_e	jmp	#LR__2812
24250                 | '     waitus(100)
24250     64 12 06 F6 | 	mov	arg01, #100
24254     20 20 B0 FD | 	call	#__system___waitus
24258     E4 FF 9F FD | 	jmp	#LR__2811
2425c                 | LR__2812
2425c                 | '   repeat until vblank==1
2425c                 | LR__2813
2425c     49 E4 05 F1 | 	add	objptr, #73
24260     F2 12 02 FB | 	rdlong	arg01, objptr
24264     49 E4 85 F1 | 	sub	objptr, #73
24268     01 12 0E F2 | 	cmp	arg01, #1 wz
2426c     0C 00 90 AD |  if_e	jmp	#LR__2814
24270                 | '     waitus(100)
24270     64 12 06 F6 | 	mov	arg01, #100
24274     00 20 B0 FD | 	call	#__system___waitus
24278     E0 FF 9F FD | 	jmp	#LR__2813
2427c                 | LR__2814
2427c     15 29 02 F1 | 	add	local02, local03
24280     13 29 0A F2 | 	cmp	local02, local01 wz
24284     B8 FF 9F 5D |  if_ne	jmp	#LR__2810
24288     A7 F0 03 F6 | 	mov	ptra, fp
2428c     B2 00 A0 FD | 	call	#popregs_
24290                 | _hg010b_spin2_waitvbl_ret
24290     2D 00 64 FD | 	ret
24294                 | 
24294                 | ' 
24294                 | ' 
24294                 | ' pub cls(fc,bc)   :c,i
24294                 | _hg010b_spin2_cls
24294     02 4A 05 F6 | 	mov	COUNT_, #2
24298     A8 00 A0 FD | 	call	#pushregs_
2429c     09 27 02 F6 | 	mov	local01, arg01
242a0     0A 29 02 F6 | 	mov	local02, arg02
242a4                 | ' 
242a4                 | ' c:=bc
242a4                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
242a4     DD E4 05 F1 | 	add	objptr, #221
242a8     F2 12 02 FB | 	rdlong	arg01, objptr
242ac     A5 E4 85 F1 | 	sub	objptr, #165
242b0     F2 16 02 FB | 	rdlong	arg03, objptr
242b4     02 16 66 F0 | 	shl	arg03, #2
242b8     14 15 02 F6 | 	mov	arg02, local02
242bc     00 18 06 F6 | 	mov	arg04, #0
242c0     01 1A 06 F6 | 	mov	arg05, #1
242c4     0B 00 00 FF 
242c8     94 E4 05 F1 | 	add	objptr, ##5780
242cc     F8 10 B0 FD | 	call	#_psram_spin2_fill
242d0                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
242d0     0B 00 00 FF 
242d4     C8 E4 85 F1 | 	sub	objptr, ##5832
242d8     F2 12 02 FB | 	rdlong	arg01, objptr
242dc     04 E4 85 F1 | 	sub	objptr, #4
242e0     F2 16 02 FB | 	rdlong	arg03, objptr
242e4     09 17 82 F1 | 	sub	arg03, arg01
242e8     20 14 06 F6 | 	mov	arg02, #32
242ec     00 18 06 F6 | 	mov	arg04, #0
242f0     01 1A 06 F6 | 	mov	arg05, #1
242f4     0B 00 00 FF 
242f8     CC E4 05 F1 | 	add	objptr, ##5836
242fc     C8 10 B0 FD | 	call	#_psram_spin2_fill
24300                 | ' setwritecolors(fc,bc)
24300                 | ' 
24300                 | ' write_color:=ff
24300     0B 00 00 FF 
24304     8B E4 85 F1 | 	sub	objptr, ##5771
24308     F2 26 62 FC | 	wrlong	local01, objptr
2430c                 | ' write_background:=bb
2430c     04 E4 05 F1 | 	add	objptr, #4
24310     F2 28 62 FC | 	wrlong	local02, objptr
24314                 | ' cursor_x:=0
24314     09 E4 85 F1 | 	sub	objptr, #9
24318     F2 00 58 FC | 	wrword	#0, objptr
2431c                 | ' cursor_y:=0
2431c     02 E4 05 F1 | 	add	objptr, #2
24320     F2 00 48 FC | 	wrbyte	#0, objptr
24324                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
24324     02 E4 85 F1 | 	sub	objptr, #2
24328     F2 14 E2 FA | 	rdword	arg02, objptr
2432c     02 14 66 F0 | 	shl	arg02, #2
24330     02 E4 05 F1 | 	add	objptr, #2
24334     F2 16 C2 FA | 	rdbyte	arg03, objptr
24338     3E E4 85 F1 | 	sub	objptr, #62
2433c     04 16 66 F0 | 	shl	arg03, #4
24340     04 16 06 F1 | 	add	arg03, #4
24344     11 12 06 F6 | 	mov	arg01, #17
24348     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
2434c                 | ' setcursorcolor(fc)
2434c     13 13 02 F6 | 	mov	arg01, local01
24350     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
24354     14 FB 01 F6 | 	mov	result1, local02
24358     00 FC 05 F6 | 	mov	result2, #0
2435c     A7 F0 03 F6 | 	mov	ptra, fp
24360     B2 00 A0 FD | 	call	#popregs_
24364                 | _hg010b_spin2_cls_ret
24364     2D 00 64 FD | 	ret
24368                 | 
24368                 | ' 
24368                 | ' ''---------- Output a char at the cursor position, move the cursor 
24368                 | ' 
24368                 | ' pub putchar(achar) | c,x,y,l,newcpl
24368                 | _hg010b_spin2_putchar
24368     02 4A 05 F6 | 	mov	COUNT_, #2
2436c     A8 00 A0 FD | 	call	#pushregs_
24370     09 27 02 F6 | 	mov	local01, arg01
24374                 | ' 
24374                 | ' if achar==10
24374     0A 26 0E F2 | 	cmp	local01, #10 wz
24378                 | '   crlf()
24378     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
2437c                 | ' if achar==9
2437c     09 26 0E F2 | 	cmp	local01, #9 wz
24380     18 00 90 5D |  if_ne	jmp	#LR__2820
24384                 | '   cursor_x:=(cursor_x& %11110000)+16
24384     3C E4 05 F1 | 	add	objptr, #60
24388     F2 16 E2 FA | 	rdword	arg03, objptr
2438c     F0 16 06 F5 | 	and	arg03, #240
24390     10 16 06 F1 | 	add	arg03, #16
24394     F2 16 52 FC | 	wrword	arg03, objptr
24398     3C E4 85 F1 | 	sub	objptr, #60
2439c                 | LR__2820
2439c                 | '   
2439c                 | ' if (achar<>9) && (achar<>10) 
2439c     09 26 0E F2 | 	cmp	local01, #9 wz
243a0     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
243a4     A8 00 90 AD |  if_e	jmp	#LR__2821
243a8                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
243a8     3C E4 05 F1 | 	add	objptr, #60
243ac     F2 12 E2 FA | 	rdword	arg01, objptr
243b0     02 E4 05 F1 | 	add	objptr, #2
243b4     F2 14 C2 FA | 	rdbyte	arg02, objptr
243b8     04 14 66 F0 | 	shl	arg02, #4
243bc     04 14 06 F1 | 	add	arg02, #4
243c0     03 E4 05 F1 | 	add	objptr, #3
243c4     F2 18 02 FB | 	rdlong	arg04, objptr
243c8     04 E4 05 F1 | 	add	objptr, #4
243cc     F2 1A 02 FB | 	rdlong	arg05, objptr
243d0     45 E4 85 F1 | 	sub	objptr, #69
243d4     13 17 02 F6 | 	mov	arg03, local01
243d8     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
243dc     04 E4 05 F1 | 	add	objptr, #4
243e0     F2 12 02 FB | 	rdlong	arg01, objptr
243e4     10 00 00 FF 
243e8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
243ec     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
243f0     3A E4 05 F1 | 	add	objptr, #58
243f4     F2 1A C2 FA | 	rdbyte	arg05, objptr
243f8     0D 17 02 FD | 	qmul	arg03, arg05
243fc                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
243fc     10 00 00 FF 
24400     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
24404     02 E4 85 F1 | 	sub	objptr, #2
24408     F2 28 E2 FA | 	rdword	local02, objptr
2440c     01 28 46 F0 | 	shr	local02, #1
24410     13 15 02 F6 | 	mov	arg02, local01
24414     01 16 06 F6 | 	mov	arg03, #1
24418     00 18 06 F6 | 	mov	arg04, #0
2441c     01 1A 06 F6 | 	mov	arg05, #1
24420     0B 00 00 FF 
24424     90 E4 05 F1 | 	add	objptr, ##5776
24428     18 26 62 FD | 	getqx	local01
2442c     14 27 02 F1 | 	add	local01, local02
24430     13 13 02 F1 | 	add	arg01, local01
24434     90 0F B0 FD | 	call	#_psram_spin2_fill
24438                 | '   cursor_x+=2
24438     0B 00 00 FF 
2443c     90 E4 85 F1 | 	sub	objptr, ##5776
24440     F2 28 E2 FA | 	rdword	local02, objptr
24444     02 28 06 F1 | 	add	local02, #2
24448     F2 28 52 FC | 	wrword	local02, objptr
2444c     3C E4 85 F1 | 	sub	objptr, #60
24450                 | LR__2821
24450                 | ' 
24450                 | ' if cursor_x>=256
24450     3C E4 05 F1 | 	add	objptr, #60
24454     F2 28 E2 FA | 	rdword	local02, objptr
24458     3C E4 85 F1 | 	sub	objptr, #60
2445c     00 29 56 F2 | 	cmps	local02, #256 wc
24460     64 00 90 CD |  if_b	jmp	#LR__2823
24464                 | '   cursor_x:=0
24464     3C E4 05 F1 | 	add	objptr, #60
24468     F2 00 58 FC | 	wrword	#0, objptr
2446c                 | '   cursor_y+=1
2446c     02 E4 05 F1 | 	add	objptr, #2
24470     F2 28 C2 FA | 	rdbyte	local02, objptr
24474     01 28 06 F1 | 	add	local02, #1
24478     F2 28 42 FC | 	wrbyte	local02, objptr
2447c                 | '   if cursor_y>st_lines-1
2447c     C3 E4 05 F1 | 	add	objptr, #195
24480     F2 28 02 FB | 	rdlong	local02, objptr
24484     01 28 86 F1 | 	sub	local02, #1
24488     C3 E4 85 F1 | 	sub	objptr, #195
2448c     F2 16 C2 FA | 	rdbyte	arg03, objptr
24490     3E E4 85 F1 | 	sub	objptr, #62
24494     14 17 5A F2 | 	cmps	arg03, local02 wcz
24498     2C 00 90 ED |  if_be	jmp	#LR__2822
2449c                 | '     scrollup2()
2449c     00 12 06 F6 | 	mov	arg01, #0
244a0     01 00 00 FF 
244a4     58 14 06 F6 | 	mov	arg02, ##600
244a8     10 16 06 F6 | 	mov	arg03, #16
244ac     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
244b0                 | '     cursor_y:=st_lines-1
244b0     01 E5 05 F1 | 	add	objptr, #257
244b4     F2 28 02 FB | 	rdlong	local02, objptr
244b8     01 28 86 F1 | 	sub	local02, #1
244bc     C3 E4 85 F1 | 	sub	objptr, #195
244c0     F2 28 42 FC | 	wrbyte	local02, objptr
244c4     3E E4 85 F1 | 	sub	objptr, #62
244c8                 | LR__2822
244c8                 | LR__2823
244c8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
244c8     3C E4 05 F1 | 	add	objptr, #60
244cc     F2 14 E2 FA | 	rdword	arg02, objptr
244d0     02 14 66 F0 | 	shl	arg02, #2
244d4     02 E4 05 F1 | 	add	objptr, #2
244d8     F2 16 C2 FA | 	rdbyte	arg03, objptr
244dc     3E E4 85 F1 | 	sub	objptr, #62
244e0     04 16 66 F0 | 	shl	arg03, #4
244e4     04 16 06 F1 | 	add	arg03, #4
244e8     11 12 06 F6 | 	mov	arg01, #17
244ec     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
244f0     A7 F0 03 F6 | 	mov	ptra, fp
244f4     B2 00 A0 FD | 	call	#popregs_
244f8                 | _hg010b_spin2_putchar_ret
244f8     2D 00 64 FD | 	ret
244fc                 | 
244fc                 | '     
244fc                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
244fc                 | ' 
244fc                 | ' pub putchar2(achar) | c,x,y,l,newcpl
244fc                 | _hg010b_spin2_putchar2
244fc     02 4A 05 F6 | 	mov	COUNT_, #2
24500     A8 00 A0 FD | 	call	#pushregs_
24504     09 27 02 F6 | 	mov	local01, arg01
24508                 | ' 
24508                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
24508     3C E4 05 F1 | 	add	objptr, #60
2450c     F2 12 E2 FA | 	rdword	arg01, objptr
24510     02 E4 05 F1 | 	add	objptr, #2
24514     F2 14 C2 FA | 	rdbyte	arg02, objptr
24518     04 14 66 F0 | 	shl	arg02, #4
2451c     04 14 06 F1 | 	add	arg02, #4
24520     03 E4 05 F1 | 	add	objptr, #3
24524     F2 18 02 FB | 	rdlong	arg04, objptr
24528     04 E4 05 F1 | 	add	objptr, #4
2452c     F2 1A 02 FB | 	rdlong	arg05, objptr
24530     45 E4 85 F1 | 	sub	objptr, #69
24534     13 17 02 F6 | 	mov	arg03, local01
24538     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
2453c     04 E4 05 F1 | 	add	objptr, #4
24540     F2 12 02 FB | 	rdlong	arg01, objptr
24544     10 00 00 FF 
24548     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
2454c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
24550     3A E4 05 F1 | 	add	objptr, #58
24554     F2 1A C2 FA | 	rdbyte	arg05, objptr
24558     0D 17 02 FD | 	qmul	arg03, arg05
2455c                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
2455c     10 00 00 FF 
24560     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
24564     02 E4 85 F1 | 	sub	objptr, #2
24568     F2 28 E2 FA | 	rdword	local02, objptr
2456c     01 28 46 F0 | 	shr	local02, #1
24570     13 15 02 F6 | 	mov	arg02, local01
24574     01 16 06 F6 | 	mov	arg03, #1
24578     00 18 06 F6 | 	mov	arg04, #0
2457c     01 1A 06 F6 | 	mov	arg05, #1
24580     0B 00 00 FF 
24584     90 E4 05 F1 | 	add	objptr, ##5776
24588     18 26 62 FD | 	getqx	local01
2458c     14 27 02 F1 | 	add	local01, local02
24590     13 13 02 F1 | 	add	arg01, local01
24594     30 0E B0 FD | 	call	#_psram_spin2_fill
24598                 | ' 
24598                 | ' cursor_x+=2
24598     0B 00 00 FF 
2459c     90 E4 85 F1 | 	sub	objptr, ##5776
245a0     F2 28 E2 FA | 	rdword	local02, objptr
245a4     02 28 06 F1 | 	add	local02, #2
245a8     F2 28 52 FC | 	wrword	local02, objptr
245ac                 | ' if cursor_x>=256
245ac     F2 28 E2 FA | 	rdword	local02, objptr
245b0     3C E4 85 F1 | 	sub	objptr, #60
245b4     00 29 56 F2 | 	cmps	local02, #256 wc
245b8     64 00 90 CD |  if_b	jmp	#LR__2831
245bc                 | '   cursor_x:=0
245bc     3C E4 05 F1 | 	add	objptr, #60
245c0     F2 00 58 FC | 	wrword	#0, objptr
245c4                 | '   cursor_y+=1
245c4     02 E4 05 F1 | 	add	objptr, #2
245c8     F2 28 C2 FA | 	rdbyte	local02, objptr
245cc     01 28 06 F1 | 	add	local02, #1
245d0     F2 28 42 FC | 	wrbyte	local02, objptr
245d4                 | '   if cursor_y>st_lines-1
245d4     C3 E4 05 F1 | 	add	objptr, #195
245d8     F2 28 02 FB | 	rdlong	local02, objptr
245dc     01 28 86 F1 | 	sub	local02, #1
245e0     C3 E4 85 F1 | 	sub	objptr, #195
245e4     F2 16 C2 FA | 	rdbyte	arg03, objptr
245e8     3E E4 85 F1 | 	sub	objptr, #62
245ec     14 17 5A F2 | 	cmps	arg03, local02 wcz
245f0     2C 00 90 ED |  if_be	jmp	#LR__2830
245f4                 | '     scrollup2()
245f4     00 12 06 F6 | 	mov	arg01, #0
245f8     01 00 00 FF 
245fc     58 14 06 F6 | 	mov	arg02, ##600
24600     10 16 06 F6 | 	mov	arg03, #16
24604     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
24608                 | '     cursor_y:=st_lines-1
24608     01 E5 05 F1 | 	add	objptr, #257
2460c     F2 28 02 FB | 	rdlong	local02, objptr
24610     01 28 86 F1 | 	sub	local02, #1
24614     C3 E4 85 F1 | 	sub	objptr, #195
24618     F2 28 42 FC | 	wrbyte	local02, objptr
2461c     3E E4 85 F1 | 	sub	objptr, #62
24620                 | LR__2830
24620                 | LR__2831
24620                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
24620     3C E4 05 F1 | 	add	objptr, #60
24624     F2 14 E2 FA | 	rdword	arg02, objptr
24628     02 14 66 F0 | 	shl	arg02, #2
2462c     02 E4 05 F1 | 	add	objptr, #2
24630     F2 16 C2 FA | 	rdbyte	arg03, objptr
24634     3E E4 85 F1 | 	sub	objptr, #62
24638     04 16 66 F0 | 	shl	arg03, #4
2463c     04 16 06 F1 | 	add	arg03, #4
24640     11 12 06 F6 | 	mov	arg01, #17
24644     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
24648     A7 F0 03 F6 | 	mov	ptra, fp
2464c     B2 00 A0 FD | 	call	#popregs_
24650                 | _hg010b_spin2_putchar2_ret
24650     2D 00 64 FD | 	ret
24654                 | 
24654                 | ' ''--------- Output a string at the cursor position, move the cursor  
24654                 | ' 
24654                 | ' pub write(text) | iii,c,ncx,ncy
24654                 | _hg010b_spin2_write
24654     04 4A 05 F6 | 	mov	COUNT_, #4
24658     A8 00 A0 FD | 	call	#pushregs_
2465c     09 27 02 F6 | 	mov	local01, arg01
24660                 | ' 
24660                 | ' repeat iii from 0 to strsize(text)-1
24660     00 28 06 F6 | 	mov	local02, #0
24664     13 13 02 F6 | 	mov	arg01, local01
24668     09 2B 02 F6 | 	mov	local03, arg01
2466c     97 06 48 FB | 	callpa	#(@LR__2841-@LR__2840)>>2,fcache_load_ptr_
24670                 | LR__2840
24670     15 FB C9 FA | 	rdbyte	result1, local03 wz
24674     01 2A 06 51 |  if_ne	add	local03, #1
24678     F4 FF 9F 5D |  if_ne	jmp	#LR__2840
2467c                 | LR__2841
2467c     09 2B 82 F1 | 	sub	local03, arg01
24680     01 2A 86 F1 | 	sub	local03, #1
24684     00 2A 56 F2 | 	cmps	local03, #0 wc
24688     01 2C 86 F6 | 	negc	local04, #1
2468c     16 2B 02 F1 | 	add	local03, local04
24690                 | LR__2842
24690                 | '   putchar2(byte[text+iii])
24690     13 13 02 F6 | 	mov	arg01, local01
24694     14 13 02 F1 | 	add	arg01, local02
24698     09 13 C2 FA | 	rdbyte	arg01, arg01
2469c     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
246a0     16 29 02 F1 | 	add	local02, local04
246a4     15 29 0A F2 | 	cmp	local02, local03 wz
246a8     E4 FF 9F 5D |  if_ne	jmp	#LR__2842
246ac     A7 F0 03 F6 | 	mov	ptra, fp
246b0     B2 00 A0 FD | 	call	#popregs_
246b4                 | _hg010b_spin2_write_ret
246b4     2D 00 64 FD | 	ret
246b8                 | 
246b8                 | '    
246b8                 | ' ' a version for text scrolling in Basic shifted 4 lines down
246b8                 | ' 
246b8                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
246b8                 | _hg010b_spin2_scrollup2
246b8     03 4A 05 F6 | 	mov	COUNT_, #3
246bc     A8 00 A0 FD | 	call	#pushregs_
246c0                 | ' 	
246c0                 | ' repeat i from 4 to 579 
246c0     04 26 06 F6 | 	mov	local01, #4
246c4                 | LR__2850
246c4     F9 E4 05 F1 | 	add	objptr, #249
246c8     F2 1A 02 FB | 	rdlong	arg05, objptr
246cc     1C E4 85 F1 | 	sub	objptr, #28
246d0     F2 14 02 FB | 	rdlong	arg02, objptr
246d4     13 19 02 F6 | 	mov	arg04, local01
246d8     10 18 06 F1 | 	add	arg04, #16
246dc     02 18 66 F0 | 	shl	arg04, #2
246e0     14 E4 05 F1 | 	add	objptr, #20
246e4     F2 16 02 FB | 	rdlong	arg03, objptr
246e8     0B 19 02 FD | 	qmul	arg04, arg03
246ec                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
246ec     F6 03 00 FF 
246f0     00 12 06 F6 | 	mov	arg01, ##519168
246f4     0D 13 82 F1 | 	sub	arg01, arg05
246f8     02 16 66 F0 | 	shl	arg03, #2
246fc     0A 00 00 FF 
24700     DB E5 05 F1 | 	add	objptr, ##5595
24704     18 1A 62 FD | 	getqx	arg05
24708     0D 15 02 F1 | 	add	arg02, arg05
2470c     80 0B B0 FD | 	call	#_psram_spin2_read1
24710     0A 00 00 FF 
24714     D3 E5 85 F1 | 	sub	objptr, ##5587
24718     F2 1A 02 FB | 	rdlong	arg05, objptr
2471c     1C E4 85 F1 | 	sub	objptr, #28
24720     F2 14 02 FB | 	rdlong	arg02, objptr
24724     13 19 02 F6 | 	mov	arg04, local01
24728     02 18 66 F0 | 	shl	arg04, #2
2472c     14 E4 05 F1 | 	add	objptr, #20
24730     F2 16 02 FB | 	rdlong	arg03, objptr
24734     0B 19 02 FD | 	qmul	arg04, arg03
24738                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
24738     F6 03 00 FF 
2473c     00 12 06 F6 | 	mov	arg01, ##519168
24740     0D 13 82 F1 | 	sub	arg01, arg05
24744     02 16 66 F0 | 	shl	arg03, #2
24748     0A 00 00 FF 
2474c     DB E5 05 F1 | 	add	objptr, ##5595
24750     18 1A 62 FD | 	getqx	arg05
24754     0D 15 02 F1 | 	add	arg02, arg05
24758     D0 0B B0 FD | 	call	#_psram_spin2_write
2475c     0B 00 00 FF 
24760     CC E4 85 F1 | 	sub	objptr, ##5836
24764     01 26 06 F1 | 	add	local01, #1
24768     01 00 00 FF 
2476c     44 26 16 F2 | 	cmp	local01, ##580 wc
24770     50 FF 9F CD |  if_b	jmp	#LR__2850
24774                 | ' 
24774                 | ' repeat i from 580 to 599
24774     01 00 00 FF 
24778     44 26 06 F6 | 	mov	local01, ##580
2477c                 | LR__2851
2477c                 | '    fastline(0,1023,i,write_background)   
2477c     45 E4 05 F1 | 	add	objptr, #69
24780     F2 18 02 FB | 	rdlong	arg04, objptr
24784     45 E4 85 F1 | 	sub	objptr, #69
24788     00 12 06 F6 | 	mov	arg01, #0
2478c     09 14 CE F9 | 	bmask	arg02, #9
24790     13 17 02 F6 | 	mov	arg03, local01
24794     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
24798     01 26 06 F1 | 	add	local01, #1
2479c     01 00 00 FF 
247a0     58 26 16 F2 | 	cmp	local01, ##600 wc
247a4     D4 FF 9F CD |  if_b	jmp	#LR__2851
247a8                 | ' repeat i from 0 to 3
247a8     00 26 06 F6 | 	mov	local01, #0
247ac                 | LR__2852
247ac                 | '    fastline(0,1023,i,write_background)      
247ac     45 E4 05 F1 | 	add	objptr, #69
247b0     F2 18 02 FB | 	rdlong	arg04, objptr
247b4     45 E4 85 F1 | 	sub	objptr, #69
247b8     00 12 06 F6 | 	mov	arg01, #0
247bc     09 14 CE F9 | 	bmask	arg02, #9
247c0     13 17 02 F6 | 	mov	arg03, local01
247c4     90 EF BF FD | 	call	#_hg010b_spin2_fastline
247c8     01 26 06 F1 | 	add	local01, #1
247cc     04 26 56 F2 | 	cmps	local01, #4 wc
247d0     D8 FF 9F CD |  if_b	jmp	#LR__2852
247d4                 | ' 
247d4                 | ' repeat i from 0 to 35
247d4     00 26 06 F6 | 	mov	local01, #0
247d8                 | LR__2853
247d8     13 1B 02 F6 | 	mov	arg05, local01
247dc     01 1A 06 F1 | 	add	arg05, #1
247e0     10 00 00 FF 
247e4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
247e8     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
247ec     0B 1B 02 FD | 	qmul	arg05, arg03
247f0                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
247f0     F6 03 00 FF 
247f4     00 12 06 F6 | 	mov	arg01, ##519168
247f8     F9 E4 05 F1 | 	add	objptr, #249
247fc     F2 1A 02 FB | 	rdlong	arg05, objptr
24800     0D 13 82 F1 | 	sub	arg01, arg05
24804     F5 E4 85 F1 | 	sub	objptr, #245
24808     F2 14 02 FB | 	rdlong	arg02, objptr
2480c     10 00 00 FF 
24810     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
24814     0B 00 00 FF 
24818     C8 E4 05 F1 | 	add	objptr, ##5832
2481c     18 1A 62 FD | 	getqx	arg05
24820     0D 15 02 F1 | 	add	arg02, arg05
24824     68 0A B0 FD | 	call	#_psram_spin2_read1
24828     10 00 00 FF 
2482c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
24830     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
24834     0B 27 02 FD | 	qmul	local01, arg03
24838                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
24838     F6 03 00 FF 
2483c     00 12 06 F6 | 	mov	arg01, ##519168
24840     0A 00 00 FF 
24844     D3 E5 85 F1 | 	sub	objptr, ##5587
24848     F2 1A 02 FB | 	rdlong	arg05, objptr
2484c     0D 13 82 F1 | 	sub	arg01, arg05
24850     F5 E4 85 F1 | 	sub	objptr, #245
24854     F2 14 02 FB | 	rdlong	arg02, objptr
24858     10 00 00 FF 
2485c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
24860     0B 00 00 FF 
24864     C8 E4 05 F1 | 	add	objptr, ##5832
24868     18 1A 62 FD | 	getqx	arg05
2486c     0D 15 02 F1 | 	add	arg02, arg05
24870     B8 0A B0 FD | 	call	#_psram_spin2_write
24874     0B 00 00 FF 
24878     CC E4 85 F1 | 	sub	objptr, ##5836
2487c     01 26 06 F1 | 	add	local01, #1
24880     24 26 56 F2 | 	cmps	local01, #36 wc
24884     50 FF 9F CD |  if_b	jmp	#LR__2853
24888                 | ' repeat i from 0 to timings[7]-1
24888     00 26 06 F6 | 	mov	local01, #0
2488c     10 00 00 FF 
24890     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
24894     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
24898     10 00 00 FF 
2489c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
248a0     01 28 86 F1 | 	sub	local02, #1
248a4     00 28 56 F2 | 	cmps	local02, #0 wc
248a8     01 2A 86 F6 | 	negc	local03, #1
248ac     15 29 02 F1 | 	add	local02, local03
248b0                 | LR__2854
248b0                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
248b0     04 E4 05 F1 | 	add	objptr, #4
248b4     F2 12 02 FB | 	rdlong	arg01, objptr
248b8     10 00 00 FF 
248bc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
248c0     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
248c4     10 00 00 FF 
248c8     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
248cc     0D 19 02 F6 | 	mov	arg04, arg05
248d0     03 18 66 F0 | 	shl	arg04, #3
248d4     0D 19 02 F1 | 	add	arg04, arg05
248d8     02 18 66 F0 | 	shl	arg04, #2
248dc     13 19 02 F1 | 	add	arg04, local01
248e0     0C 13 02 F1 | 	add	arg01, arg04
248e4     20 14 06 F6 | 	mov	arg02, #32
248e8     01 16 06 F6 | 	mov	arg03, #1
248ec     00 18 06 F6 | 	mov	arg04, #0
248f0     01 1A 06 F6 | 	mov	arg05, #1
248f4     0B 00 00 FF 
248f8     C8 E4 05 F1 | 	add	objptr, ##5832
248fc     C8 0A B0 FD | 	call	#_psram_spin2_fill
24900     0B 00 00 FF 
24904     CC E4 85 F1 | 	sub	objptr, ##5836
24908     15 27 02 F1 | 	add	local01, local03
2490c     14 27 0A F2 | 	cmp	local01, local02 wz
24910     9C FF 9F 5D |  if_ne	jmp	#LR__2854
24914     A7 F0 03 F6 | 	mov	ptra, fp
24918     B2 00 A0 FD | 	call	#popregs_
2491c                 | _hg010b_spin2_scrollup2_ret
2491c     2D 00 64 FD | 	ret
24920                 | 
24920                 | '  
24920                 | ' ''----------- Scroll the screen one line down 
24920                 | ' 
24920                 | ' pub scrolldown(start=0) | i
24920                 | _hg010b_spin2_scrolldown
24920     05 4A 05 F6 | 	mov	COUNT_, #5
24924     A8 00 A0 FD | 	call	#pushregs_
24928     09 27 02 F6 | 	mov	local01, arg01
2492c                 | ' 
2492c                 | ' repeat i from 579 to (start*16)+4
2492c     01 00 00 FF 
24930     43 28 06 F6 | 	mov	local02, ##579
24934     13 2B 02 F6 | 	mov	local03, local01
24938     04 2A 66 F0 | 	shl	local03, #4
2493c     04 2A 06 F1 | 	add	local03, #4
24940     01 00 00 FF 
24944     43 2A 56 F2 | 	cmps	local03, ##579 wc
24948     01 2C 86 F6 | 	negc	local04, #1
2494c     16 2F 02 F6 | 	mov	local05, local04
24950     16 2B 02 F1 | 	add	local03, local04
24954                 | LR__2860
24954     F9 E4 05 F1 | 	add	objptr, #249
24958     F2 2C 02 FB | 	rdlong	local04, objptr
2495c     1C E4 85 F1 | 	sub	objptr, #28
24960     F2 14 02 FB | 	rdlong	arg02, objptr
24964     14 1B 02 F6 | 	mov	arg05, local02
24968     02 1A 66 F0 | 	shl	arg05, #2
2496c     14 E4 05 F1 | 	add	objptr, #20
24970     F2 16 02 FB | 	rdlong	arg03, objptr
24974     0B 1B 02 FD | 	qmul	arg05, arg03
24978                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
24978     F6 03 00 FF 
2497c     00 12 06 F6 | 	mov	arg01, ##519168
24980     16 13 82 F1 | 	sub	arg01, local04
24984     02 16 66 F0 | 	shl	arg03, #2
24988     0A 00 00 FF 
2498c     DB E5 05 F1 | 	add	objptr, ##5595
24990     18 2C 62 FD | 	getqx	local04
24994     16 15 02 F1 | 	add	arg02, local04
24998     F4 08 B0 FD | 	call	#_psram_spin2_read1
2499c     0A 00 00 FF 
249a0     D3 E5 85 F1 | 	sub	objptr, ##5587
249a4     F2 2C 02 FB | 	rdlong	local04, objptr
249a8     1C E4 85 F1 | 	sub	objptr, #28
249ac     F2 14 02 FB | 	rdlong	arg02, objptr
249b0     14 1B 02 F6 | 	mov	arg05, local02
249b4     10 1A 06 F1 | 	add	arg05, #16
249b8     02 1A 66 F0 | 	shl	arg05, #2
249bc     14 E4 05 F1 | 	add	objptr, #20
249c0     F2 16 02 FB | 	rdlong	arg03, objptr
249c4     0B 1B 02 FD | 	qmul	arg05, arg03
249c8                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
249c8     F6 03 00 FF 
249cc     00 12 06 F6 | 	mov	arg01, ##519168
249d0     16 13 82 F1 | 	sub	arg01, local04
249d4     02 16 66 F0 | 	shl	arg03, #2
249d8     0A 00 00 FF 
249dc     DB E5 05 F1 | 	add	objptr, ##5595
249e0     18 2C 62 FD | 	getqx	local04
249e4     16 15 02 F1 | 	add	arg02, local04
249e8     40 09 B0 FD | 	call	#_psram_spin2_write
249ec     0B 00 00 FF 
249f0     CC E4 85 F1 | 	sub	objptr, ##5836
249f4     17 29 02 F1 | 	add	local02, local05
249f8     15 29 0A F2 | 	cmp	local02, local03 wz
249fc     54 FF 9F 5D |  if_ne	jmp	#LR__2860
24a00                 | ' 
24a00                 | ' repeat i from (start*16)+4 to (start*16)+19
24a00     13 29 02 F6 | 	mov	local02, local01
24a04     04 28 66 F0 | 	shl	local02, #4
24a08     04 28 06 F1 | 	add	local02, #4
24a0c     13 2F 02 F6 | 	mov	local05, local01
24a10     04 2E 66 F0 | 	shl	local05, #4
24a14     13 2E 06 F1 | 	add	local05, #19
24a18     13 2D 02 F6 | 	mov	local04, local01
24a1c     04 2C 66 F0 | 	shl	local04, #4
24a20     04 2C 06 F1 | 	add	local04, #4
24a24     16 2F 52 F2 | 	cmps	local05, local04 wc
24a28     01 2C 86 F6 | 	negc	local04, #1
24a2c     16 2B 02 F6 | 	mov	local03, local04
24a30     16 2F 02 F1 | 	add	local05, local04
24a34                 | LR__2861
24a34                 | '    fastline(0,1023,i,write_background)    
24a34     45 E4 05 F1 | 	add	objptr, #69
24a38     F2 18 02 FB | 	rdlong	arg04, objptr
24a3c     45 E4 85 F1 | 	sub	objptr, #69
24a40     00 12 06 F6 | 	mov	arg01, #0
24a44     09 14 CE F9 | 	bmask	arg02, #9
24a48     14 17 02 F6 | 	mov	arg03, local02
24a4c     08 ED BF FD | 	call	#_hg010b_spin2_fastline
24a50     15 29 02 F1 | 	add	local02, local03
24a54     17 29 0A F2 | 	cmp	local02, local05 wz
24a58     D8 FF 9F 5D |  if_ne	jmp	#LR__2861
24a5c                 | '    
24a5c                 | ' repeat i from 35 to start
24a5c     23 28 06 F6 | 	mov	local02, #35
24a60     23 26 56 F2 | 	cmps	local01, #35 wc
24a64     01 2C 86 F6 | 	negc	local04, #1
24a68     13 2F 02 F6 | 	mov	local05, local01
24a6c     16 2F 02 F1 | 	add	local05, local04
24a70                 | LR__2862
24a70                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
24a70     F6 03 00 FF 
24a74     00 12 06 F6 | 	mov	arg01, ##519168
24a78     F9 E4 05 F1 | 	add	objptr, #249
24a7c     F2 2A 02 FB | 	rdlong	local03, objptr
24a80     15 13 82 F1 | 	sub	arg01, local03
24a84     F5 E4 85 F1 | 	sub	objptr, #245
24a88     F2 14 02 FB | 	rdlong	arg02, objptr
24a8c     14 2B 02 F6 | 	mov	local03, local02
24a90     07 2A 66 F0 | 	shl	local03, #7
24a94     15 15 02 F1 | 	add	arg02, local03
24a98     80 16 06 F6 | 	mov	arg03, #128
24a9c     0B 00 00 FF 
24aa0     C8 E4 05 F1 | 	add	objptr, ##5832
24aa4     E8 07 B0 FD | 	call	#_psram_spin2_read1
24aa8                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
24aa8     F6 03 00 FF 
24aac     00 12 06 F6 | 	mov	arg01, ##519168
24ab0     0A 00 00 FF 
24ab4     D3 E5 85 F1 | 	sub	objptr, ##5587
24ab8     F2 2A 02 FB | 	rdlong	local03, objptr
24abc     15 13 82 F1 | 	sub	arg01, local03
24ac0     F5 E4 85 F1 | 	sub	objptr, #245
24ac4     F2 14 02 FB | 	rdlong	arg02, objptr
24ac8     14 2B 02 F6 | 	mov	local03, local02
24acc     01 2A 06 F1 | 	add	local03, #1
24ad0     07 2A 66 F0 | 	shl	local03, #7
24ad4     15 15 02 F1 | 	add	arg02, local03
24ad8     80 16 06 F6 | 	mov	arg03, #128
24adc     0B 00 00 FF 
24ae0     C8 E4 05 F1 | 	add	objptr, ##5832
24ae4     44 08 B0 FD | 	call	#_psram_spin2_write
24ae8     0B 00 00 FF 
24aec     CC E4 85 F1 | 	sub	objptr, ##5836
24af0     16 29 02 F1 | 	add	local02, local04
24af4     17 29 0A F2 | 	cmp	local02, local05 wz
24af8     74 FF 9F 5D |  if_ne	jmp	#LR__2862
24afc                 | ' repeat i from 0 to 127
24afc     00 28 06 F6 | 	mov	local02, #0
24b00                 | LR__2863
24b00                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
24b00     04 E4 05 F1 | 	add	objptr, #4
24b04     F2 12 02 FB | 	rdlong	arg01, objptr
24b08     13 2F 02 F6 | 	mov	local05, local01
24b0c     07 2E 66 F0 | 	shl	local05, #7
24b10     17 13 02 F1 | 	add	arg01, local05
24b14     14 13 02 F1 | 	add	arg01, local02
24b18     20 14 06 F6 | 	mov	arg02, #32
24b1c     01 16 06 F6 | 	mov	arg03, #1
24b20     00 18 06 F6 | 	mov	arg04, #0
24b24     01 1A 06 F6 | 	mov	arg05, #1
24b28     0B 00 00 FF 
24b2c     C8 E4 05 F1 | 	add	objptr, ##5832
24b30     94 08 B0 FD | 	call	#_psram_spin2_fill
24b34     0B 00 00 FF 
24b38     CC E4 85 F1 | 	sub	objptr, ##5836
24b3c     01 28 06 F1 | 	add	local02, #1
24b40     80 28 56 F2 | 	cmps	local02, #128 wc
24b44     B8 FF 9F CD |  if_b	jmp	#LR__2863
24b48     A7 F0 03 F6 | 	mov	ptra, fp
24b4c     B2 00 A0 FD | 	call	#popregs_
24b50                 | _hg010b_spin2_scrolldown_ret
24b50     2D 00 64 FD | 	ret
24b54                 | 
24b54                 | ' 
24b54                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
24b54                 | ' 
24b54                 | ' pub crlf()
24b54                 | _hg010b_spin2_crlf
24b54                 | ' 
24b54                 | ' cursor_x:=leading_spaces*2
24b54     01 00 00 FF 
24b58     B6 E4 05 F1 | 	add	objptr, ##694
24b5c     F2 16 02 FB | 	rdlong	arg03, objptr
24b60     01 16 66 F0 | 	shl	arg03, #1
24b64     01 00 00 FF 
24b68     7A E4 85 F1 | 	sub	objptr, ##634
24b6c     F2 16 52 FC | 	wrword	arg03, objptr
24b70                 | ' cursor_y+=1
24b70     02 E4 05 F1 | 	add	objptr, #2
24b74     F2 16 C2 FA | 	rdbyte	arg03, objptr
24b78     01 16 06 F1 | 	add	arg03, #1
24b7c     F2 16 42 FC | 	wrbyte	arg03, objptr
24b80                 | ' if cursor_y>st_lines-1
24b80     C3 E4 05 F1 | 	add	objptr, #195
24b84     F2 16 02 FB | 	rdlong	arg03, objptr
24b88     01 16 86 F1 | 	sub	arg03, #1
24b8c     C3 E4 85 F1 | 	sub	objptr, #195
24b90     F2 14 C2 FA | 	rdbyte	arg02, objptr
24b94     3E E4 85 F1 | 	sub	objptr, #62
24b98     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
24b9c     2C 00 90 ED |  if_be	jmp	#LR__2870
24ba0                 | '   scrollup2()
24ba0     00 12 06 F6 | 	mov	arg01, #0
24ba4     01 00 00 FF 
24ba8     58 14 06 F6 | 	mov	arg02, ##600
24bac     10 16 06 F6 | 	mov	arg03, #16
24bb0     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
24bb4                 | '   cursor_y:=st_lines-1
24bb4     01 E5 05 F1 | 	add	objptr, #257
24bb8     F2 16 02 FB | 	rdlong	arg03, objptr
24bbc     01 16 86 F1 | 	sub	arg03, #1
24bc0     C3 E4 85 F1 | 	sub	objptr, #195
24bc4     F2 16 42 FC | 	wrbyte	arg03, objptr
24bc8     3E E4 85 F1 | 	sub	objptr, #62
24bcc                 | LR__2870
24bcc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
24bcc     3C E4 05 F1 | 	add	objptr, #60
24bd0     F2 14 E2 FA | 	rdword	arg02, objptr
24bd4     02 14 66 F0 | 	shl	arg02, #2
24bd8     02 E4 05 F1 | 	add	objptr, #2
24bdc     F2 16 C2 FA | 	rdbyte	arg03, objptr
24be0     3E E4 85 F1 | 	sub	objptr, #62
24be4     04 16 66 F0 | 	shl	arg03, #4
24be8     04 16 06 F1 | 	add	arg03, #4
24bec     11 12 06 F6 | 	mov	arg01, #17
24bf0     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
24bf4                 | _hg010b_spin2_crlf_ret
24bf4     2D 00 64 FD | 	ret
24bf8                 | 
24bf8                 | ' 
24bf8                 | ' 
24bf8                 | ' '*************************************************************************
24bf8                 | ' '                                                                        *
24bf8                 | ' '  Conversions                                                           *
24bf8                 | ' '                                                                        *
24bf8                 | ' '*************************************************************************
24bf8                 | ' 
24bf8                 | ' ''---------- Convert a integer to dec string, return a pointer
24bf8                 | ' 
24bf8                 | ' pub inttostr(i):result |q,pos,k,j
24bf8                 | _hg010b_spin2_inttostr
24bf8     03 4A 05 F6 | 	mov	COUNT_, #3
24bfc     A8 00 A0 FD | 	call	#pushregs_
24c00     09 27 0A F6 | 	mov	local01, arg01 wz
24c04                 | ' 
24c04                 | ' j:=i
24c04                 | ' pos:=10
24c04     0A 28 06 F6 | 	mov	local02, #10
24c08                 | ' k:=0
24c08     00 2A 06 F6 | 	mov	local03, #0
24c0c                 | ' 
24c0c                 | ' if (j==0)
24c0c     18 00 90 5D |  if_ne	jmp	#LR__2880
24c10                 | '   n_string[0]:=48
24c10     4D E4 05 F1 | 	add	objptr, #77
24c14     F2 60 48 FC | 	wrbyte	#48, objptr
24c18                 | '   n_string[1]:=0
24c18     01 E4 05 F1 | 	add	objptr, #1
24c1c     F2 00 48 FC | 	wrbyte	#0, objptr
24c20     4E E4 85 F1 | 	sub	objptr, #78
24c24     C4 00 90 FD | 	jmp	#LR__2887
24c28                 | LR__2880
24c28                 | ' 
24c28                 | ' else
24c28                 | '   if (j<0)
24c28     13 27 52 F6 | 	abs	local01, local01 wc
24c2c                 | '     j:=0-j
24c2c                 | '     k:=45
24c2c     2D 2A 06 C6 |  if_b	mov	local03, #45
24c30                 | ' 
24c30                 | '   n_string[11]:=0
24c30     58 E4 05 F1 | 	add	objptr, #88
24c34     F2 00 48 FC | 	wrbyte	#0, objptr
24c38     58 E4 85 F1 | 	sub	objptr, #88
24c3c     97 24 48 FB | 	callpa	#(@LR__2882-@LR__2881)>>2,fcache_load_ptr_
24c40                 | '   repeat while (pos>-1)
24c40                 | LR__2881
24c40     00 28 56 F2 | 	cmps	local02, #0 wc
24c44     40 00 90 CD |  if_b	jmp	#LR__2883
24c48     13 FB 51 F6 | 	abs	result1, local01 wc
24c4c     0A FA 15 FD | 	qdiv	result1, #10
24c50                 | '     q:=j//10
24c50     19 FA 61 FD | 	getqy	result1
24c54     FD FA 81 F6 | 	negc	result1, result1
24c58     13 27 52 F6 | 	abs	local01, local01 wc
24c5c     0A 26 16 FD | 	qdiv	local01, #10
24c60                 | '     q:=48+q
24c60     30 FA 05 F1 | 	add	result1, #48
24c64                 | '     n_string[pos]:=q
24c64     14 27 02 F6 | 	mov	local01, local02
24c68     4D E4 05 F1 | 	add	objptr, #77
24c6c     F2 26 02 F1 | 	add	local01, objptr
24c70     13 FB 41 FC | 	wrbyte	result1, local01
24c74                 | '     j:=j/10
24c74     4D E4 85 F1 | 	sub	objptr, #77
24c78                 | '     pos-=1
24c78     01 28 86 F1 | 	sub	local02, #1
24c7c     18 26 62 FD | 	getqx	local01
24c80     13 27 82 F6 | 	negc	local01, local01
24c84     B8 FF 9F FD | 	jmp	#LR__2881
24c88                 | LR__2882
24c88                 | LR__2883
24c88                 | '   repeat while n_string[0]==48
24c88                 | LR__2884
24c88     4D E4 05 F1 | 	add	objptr, #77
24c8c     F2 16 C2 FA | 	rdbyte	arg03, objptr
24c90     4D E4 85 F1 | 	sub	objptr, #77
24c94     30 16 0E F2 | 	cmp	arg03, #48 wz
24c98     20 00 90 5D |  if_ne	jmp	#LR__2885
24c9c                 | '     bytemove(@n_string,@n_string+1,12)
24c9c     4D E4 05 F1 | 	add	objptr, #77
24ca0     F2 12 02 F6 | 	mov	arg01, objptr
24ca4     F2 14 02 F6 | 	mov	arg02, objptr
24ca8     4D E4 85 F1 | 	sub	objptr, #77
24cac     01 14 06 F1 | 	add	arg02, #1
24cb0     0C 16 06 F6 | 	mov	arg03, #12
24cb4     80 11 B0 FD | 	call	#__system____builtin_memmove
24cb8     CC FF 9F FD | 	jmp	#LR__2884
24cbc                 | LR__2885
24cbc                 | ' 
24cbc                 | '   if k==45
24cbc     2D 2A 0E F2 | 	cmp	local03, #45 wz
24cc0     28 00 90 5D |  if_ne	jmp	#LR__2886
24cc4                 | '      bytemove(@n_string+1,@n_string,12)
24cc4     4D E4 05 F1 | 	add	objptr, #77
24cc8     F2 12 02 F6 | 	mov	arg01, objptr
24ccc     01 12 06 F1 | 	add	arg01, #1
24cd0     F2 14 02 F6 | 	mov	arg02, objptr
24cd4     4D E4 85 F1 | 	sub	objptr, #77
24cd8     0C 16 06 F6 | 	mov	arg03, #12
24cdc     58 11 B0 FD | 	call	#__system____builtin_memmove
24ce0                 | '      n_string[0]:=k
24ce0     4D E4 05 F1 | 	add	objptr, #77
24ce4     F2 2A 42 FC | 	wrbyte	local03, objptr
24ce8     4D E4 85 F1 | 	sub	objptr, #77
24cec                 | LR__2886
24cec                 | LR__2887
24cec                 | ' 
24cec                 | ' q:=@n_string
24cec     4D E4 05 F1 | 	add	objptr, #77
24cf0     F2 FA 01 F6 | 	mov	result1, objptr
24cf4     4D E4 85 F1 | 	sub	objptr, #77
24cf8                 | ' return q
24cf8     A7 F0 03 F6 | 	mov	ptra, fp
24cfc     B2 00 A0 FD | 	call	#popregs_
24d00                 | _hg010b_spin2_inttostr_ret
24d00     2D 00 64 FD | 	ret
24d04                 | 
24d04                 | ' 
24d04                 | ' '**********************************************************************************
24d04                 | ' '
24d04                 | ' '        Blitting
24d04                 | ' '
24d04                 | ' '**********************************************************************************
24d04                 | ' 
24d04                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
24d04                 | _hg010b_spin2_blit
24d04     18 4A 05 F6 | 	mov	COUNT_, #24
24d08     A8 00 A0 FD | 	call	#pushregs_
24d0c     09 27 02 F6 | 	mov	local01, arg01
24d10     0A 29 02 F6 | 	mov	local02, arg02
24d14     0B 2B 02 F6 | 	mov	local03, arg03
24d18     0C 2D 02 F6 | 	mov	local04, arg04
24d1c     0D 2F 02 F6 | 	mov	local05, arg05
24d20     0E 31 02 F6 | 	mov	local06, arg06
24d24     0F 33 02 F6 | 	mov	local07, arg07
24d28     10 35 02 F6 | 	mov	local08, arg08
24d2c     11 37 02 F6 | 	mov	local09, arg09
24d30     12 39 02 F6 | 	mov	local10, arg10
24d34                 | ' 
24d34                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
24d34     00 04 00 FF 
24d38     00 26 56 F2 | 	cmps	local01, ##524288 wc
24d3c     00 04 00 3F 
24d40     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
24d44     7C 01 90 CD |  if_b	jmp	#LR__2894
24d48     16 29 5A F2 | 	cmps	local02, local04 wcz
24d4c     14 3B 02 16 |  if_a	mov	local11, local02
24d50     16 29 02 16 |  if_a	mov	local02, local04
24d54     1D 2D 02 16 |  if_a	mov	local04, local11
24d58     17 2B 5A F2 | 	cmps	local03, local05 wcz
24d5c     15 3B 02 16 |  if_a	mov	local11, local03
24d60     17 2B 02 16 |  if_a	mov	local03, local05
24d64     18 2B 02 FD | 	qmul	local03, local06
24d68                 | '   if x1a>x2a
24d68                 | '     x1a,x2a:=x2a,x1a
24d68                 | '   if y1a>y2a
24d68                 | '     y1a,y2a:=y2a,y1a  
24d68     1D 2F 02 16 |  if_a	mov	local05, local11
24d6c                 | ' 
24d6c                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
24d6c     19 3D 02 F6 | 	mov	local12, local07
24d70     14 3D 02 F1 | 	add	local12, local02
24d74     18 3A 62 FD | 	getqx	local11
24d78     1C 37 02 FD | 	qmul	local09, local10
24d7c     1D 3D 02 F1 | 	add	local12, local11
24d80     13 3F 02 F6 | 	mov	local13, local01
24d84     1A 3F 02 F1 | 	add	local13, local08
24d88     18 3A 62 FD | 	getqx	local11
24d8c     1D 3F 02 F1 | 	add	local13, local11
24d90     1F 3D 5A F2 | 	cmps	local12, local13 wcz
24d94     98 00 90 ED |  if_be	jmp	#LR__2891
24d98                 | '     repeat y from y1a to y2a
24d98     15 41 02 F6 | 	mov	local14, local03
24d9c     15 2F 52 F2 | 	cmps	local05, local03 wc
24da0     01 42 86 F6 | 	negc	local15, #1
24da4     17 45 02 F6 | 	mov	local16, local05
24da8     21 45 02 F1 | 	add	local16, local15
24dac     0B 00 00 FF 
24db0     CC E4 05 F1 | 	add	objptr, ##5836
24db4                 | LR__2890
24db4     18 41 02 FD | 	qmul	local14, local06
24db8                 | '   '    writeln(string("I am here"))
24db8                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
24db8     13 15 02 F6 | 	mov	arg02, local01
24dbc     16 17 02 F6 | 	mov	arg03, local04
24dc0     14 17 82 F1 | 	sub	arg03, local02
24dc4     01 16 06 F1 | 	add	arg03, #1
24dc8     F6 03 00 FF 
24dcc     00 12 06 F6 | 	mov	arg01, ##519168
24dd0     18 3E 62 FD | 	getqx	local13
24dd4     1F 15 02 F1 | 	add	arg02, local13
24dd8     14 15 02 F1 | 	add	arg02, local02
24ddc     B0 04 B0 FD | 	call	#_psram_spin2_read1
24de0     1B 3F 02 F6 | 	mov	local13, local09
24de4     15 3F 82 F1 | 	sub	local13, local03
24de8     20 3F 02 F1 | 	add	local13, local14
24dec     1C 3F 02 FD | 	qmul	local13, local10
24df0                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
24df0     19 15 02 F6 | 	mov	arg02, local07
24df4     16 17 02 F6 | 	mov	arg03, local04
24df8     14 17 82 F1 | 	sub	arg03, local02
24dfc     01 16 06 F1 | 	add	arg03, #1
24e00     F6 03 00 FF 
24e04     00 12 06 F6 | 	mov	arg01, ##519168
24e08     18 3E 62 FD | 	getqx	local13
24e0c     1F 15 02 F1 | 	add	arg02, local13
24e10     1A 15 02 F1 | 	add	arg02, local08
24e14     14 05 B0 FD | 	call	#_psram_spin2_write
24e18     21 41 02 F1 | 	add	local14, local15
24e1c     22 41 0A F2 | 	cmp	local14, local16 wz
24e20     90 FF 9F 5D |  if_ne	jmp	#LR__2890
24e24     0B 00 00 FF 
24e28     CC E4 85 F1 | 	sub	objptr, ##5836
24e2c     94 00 90 FD | 	jmp	#LR__2893
24e30                 | LR__2891
24e30                 | '   else
24e30                 | '     repeat y from y2a to y1a
24e30     17 41 02 F6 | 	mov	local14, local05
24e34     17 2B 52 F2 | 	cmps	local03, local05 wc
24e38     01 46 86 F6 | 	negc	local17, #1
24e3c     15 49 02 F6 | 	mov	local18, local03
24e40     23 49 02 F1 | 	add	local18, local17
24e44     0B 00 00 FF 
24e48     CC E4 05 F1 | 	add	objptr, ##5836
24e4c                 | LR__2892
24e4c     18 41 02 FD | 	qmul	local14, local06
24e50                 | '  '     writeln(string("I am there"))
24e50                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
24e50     13 15 02 F6 | 	mov	arg02, local01
24e54     16 17 02 F6 | 	mov	arg03, local04
24e58     14 17 82 F1 | 	sub	arg03, local02
24e5c     01 16 06 F1 | 	add	arg03, #1
24e60     F6 03 00 FF 
24e64     00 12 06 F6 | 	mov	arg01, ##519168
24e68     18 44 62 FD | 	getqx	local16
24e6c     22 15 02 F1 | 	add	arg02, local16
24e70     14 15 02 F1 | 	add	arg02, local02
24e74     18 04 B0 FD | 	call	#_psram_spin2_read1
24e78     1B 45 02 F6 | 	mov	local16, local09
24e7c     15 45 82 F1 | 	sub	local16, local03
24e80     20 45 02 F1 | 	add	local16, local14
24e84     1C 45 02 FD | 	qmul	local16, local10
24e88                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
24e88     19 15 02 F6 | 	mov	arg02, local07
24e8c     16 17 02 F6 | 	mov	arg03, local04
24e90     14 17 82 F1 | 	sub	arg03, local02
24e94     01 16 06 F1 | 	add	arg03, #1
24e98     F6 03 00 FF 
24e9c     00 12 06 F6 | 	mov	arg01, ##519168
24ea0     18 44 62 FD | 	getqx	local16
24ea4     22 15 02 F1 | 	add	arg02, local16
24ea8     1A 15 02 F1 | 	add	arg02, local08
24eac     7C 04 B0 FD | 	call	#_psram_spin2_write
24eb0     23 41 02 F1 | 	add	local14, local17
24eb4     24 41 0A F2 | 	cmp	local14, local18 wz
24eb8     90 FF 9F 5D |  if_ne	jmp	#LR__2892
24ebc     0B 00 00 FF 
24ec0     CC E4 85 F1 | 	sub	objptr, ##5836
24ec4                 | LR__2893
24ec4                 | LR__2894
24ec4                 | '     
24ec4                 | ' if ((f>=$80000) && (t<$80000)) 
24ec4     00 04 00 FF 
24ec8     00 26 56 F2 | 	cmps	local01, ##524288 wc
24ecc     80 00 90 CD |  if_b	jmp	#LR__2896
24ed0     00 04 00 FF 
24ed4     00 32 56 F2 | 	cmps	local07, ##524288 wc
24ed8     74 00 90 3D |  if_ae	jmp	#LR__2896
24edc                 | '   repeat y from y1a to y2a
24edc     15 41 02 F6 | 	mov	local14, local03
24ee0     15 2F 52 F2 | 	cmps	local05, local03 wc
24ee4     01 4A 86 F6 | 	negc	local19, #1
24ee8     17 4D 02 F6 | 	mov	local20, local05
24eec     25 4D 02 F1 | 	add	local20, local19
24ef0     0B 00 00 FF 
24ef4     CC E4 05 F1 | 	add	objptr, ##5836
24ef8                 | LR__2895
24ef8     1B 49 02 F6 | 	mov	local18, local09
24efc     15 49 82 F1 | 	sub	local18, local03
24f00     20 49 02 F1 | 	add	local18, local14
24f04     1C 49 02 FD | 	qmul	local18, local10
24f08                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
24f08     19 13 02 F6 | 	mov	arg01, local07
24f0c     18 48 62 FD | 	getqx	local18
24f10     18 41 02 FD | 	qmul	local14, local06
24f14     24 13 02 F1 | 	add	arg01, local18
24f18     1A 13 02 F1 | 	add	arg01, local08
24f1c     13 15 02 F6 | 	mov	arg02, local01
24f20     16 17 02 F6 | 	mov	arg03, local04
24f24     14 17 82 F1 | 	sub	arg03, local02
24f28     01 16 06 F1 | 	add	arg03, #1
24f2c     18 48 62 FD | 	getqx	local18
24f30     24 15 02 F1 | 	add	arg02, local18
24f34     14 15 02 F1 | 	add	arg02, local02
24f38     54 03 B0 FD | 	call	#_psram_spin2_read1
24f3c     25 41 02 F1 | 	add	local14, local19
24f40     26 41 0A F2 | 	cmp	local14, local20 wz
24f44     B0 FF 9F 5D |  if_ne	jmp	#LR__2895
24f48     0B 00 00 FF 
24f4c     CC E4 85 F1 | 	sub	objptr, ##5836
24f50                 | LR__2896
24f50                 | '     
24f50                 | ' if ((f<$80000) && (t>=$80000)) 
24f50     00 04 00 FF 
24f54     00 26 56 F2 | 	cmps	local01, ##524288 wc
24f58     84 00 90 3D |  if_ae	jmp	#LR__2898
24f5c     00 04 00 FF 
24f60     00 32 56 F2 | 	cmps	local07, ##524288 wc
24f64     78 00 90 CD |  if_b	jmp	#LR__2898
24f68                 | '   t:=t & $FFFFFFF
24f68     7C 32 06 F4 | 	bitl	local07, #124
24f6c                 | '   repeat y from y1a to y2a
24f6c     15 41 02 F6 | 	mov	local14, local03
24f70     15 2F 52 F2 | 	cmps	local05, local03 wc
24f74     01 4E 86 F6 | 	negc	local21, #1
24f78     17 51 02 F6 | 	mov	local22, local05
24f7c     27 51 02 F1 | 	add	local22, local21
24f80     0B 00 00 FF 
24f84     CC E4 05 F1 | 	add	objptr, ##5836
24f88                 | LR__2897
24f88     18 41 02 FD | 	qmul	local14, local06
24f8c                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
24f8c     13 13 02 F6 | 	mov	arg01, local01
24f90     1B 4D 02 F6 | 	mov	local20, local09
24f94     15 4D 82 F1 | 	sub	local20, local03
24f98     20 4D 02 F1 | 	add	local20, local14
24f9c     18 4A 62 FD | 	getqx	local19
24fa0     1C 4D 02 FD | 	qmul	local20, local10
24fa4     25 13 02 F1 | 	add	arg01, local19
24fa8     14 13 02 F1 | 	add	arg01, local02
24fac     19 15 02 F6 | 	mov	arg02, local07
24fb0     16 17 02 F6 | 	mov	arg03, local04
24fb4     14 17 82 F1 | 	sub	arg03, local02
24fb8     01 16 06 F1 | 	add	arg03, #1
24fbc     18 4C 62 FD | 	getqx	local20
24fc0     26 15 02 F1 | 	add	arg02, local20
24fc4     1A 15 02 F1 | 	add	arg02, local08
24fc8     60 03 B0 FD | 	call	#_psram_spin2_write
24fcc     27 41 02 F1 | 	add	local14, local21
24fd0     28 41 0A F2 | 	cmp	local14, local22 wz
24fd4     B0 FF 9F 5D |  if_ne	jmp	#LR__2897
24fd8     0B 00 00 FF 
24fdc     CC E4 85 F1 | 	sub	objptr, ##5836
24fe0                 | LR__2898
24fe0                 | '     
24fe0                 | ' if ((f<$80000) && (t<$80000)) 
24fe0     00 04 00 FF 
24fe4     00 26 56 F2 | 	cmps	local01, ##524288 wc
24fe8     00 04 00 CF 
24fec     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
24ff0     64 00 90 3D |  if_ae	jmp	#LR__2900
24ff4                 | '   repeat y from y1a to y2a
24ff4     15 41 02 F6 | 	mov	local14, local03
24ff8     15 2F 52 F2 | 	cmps	local05, local03 wc
24ffc     01 52 86 F6 | 	negc	local23, #1
25000     17 55 02 F6 | 	mov	local24, local05
25004     29 55 02 F1 | 	add	local24, local23
25008                 | LR__2899
25008     18 41 02 FD | 	qmul	local14, local06
2500c                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
2500c     13 13 02 F6 | 	mov	arg01, local01
25010     1B 51 02 F6 | 	mov	local22, local09
25014     15 51 82 F1 | 	sub	local22, local03
25018     20 51 02 F1 | 	add	local22, local14
2501c     18 4E 62 FD | 	getqx	local21
25020     1C 51 02 FD | 	qmul	local22, local10
25024     27 13 02 F1 | 	add	arg01, local21
25028     14 13 02 F1 | 	add	arg01, local02
2502c     19 15 02 F6 | 	mov	arg02, local07
25030     16 17 02 F6 | 	mov	arg03, local04
25034     14 17 82 F1 | 	sub	arg03, local02
25038     01 16 06 F1 | 	add	arg03, #1
2503c     18 50 62 FD | 	getqx	local22
25040     28 15 02 F1 | 	add	arg02, local22
25044     1A 15 02 F1 | 	add	arg02, local08
25048     EC 0D B0 FD | 	call	#__system____builtin_memmove
2504c     29 41 02 F1 | 	add	local14, local23
25050     2A 41 0A F2 | 	cmp	local14, local24 wz
25054     B0 FF 9F 5D |  if_ne	jmp	#LR__2899
25058                 | LR__2900
25058     A7 F0 03 F6 | 	mov	ptra, fp
2505c     B2 00 A0 FD | 	call	#popregs_
25060                 | _hg010b_spin2_blit_ret
25060     2D 00 64 FD | 	ret
25064                 | 
25064                 | ' 
25064                 | ' '..............................................................................
25064                 | ' 
25064                 | ' {{
25064                 | ' }}
25064                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
25064                 | _psram_spin2_startx
25064     04 4A 05 F6 | 	mov	COUNT_, #4
25068     A8 00 A0 FD | 	call	#pushregs_
2506c     09 27 02 F6 | 	mov	local01, arg01
25070     0B 29 02 F6 | 	mov	local02, arg03
25074     0C 2B 02 F6 | 	mov	local03, arg04
25078                 | '     stop() ' restart driver if required
25078     54 01 B0 FD | 	call	#_psram_spin2_stop
2507c     00 26 0E F2 | 	cmp	local01, #0 wz
25080     14 26 06 AB |  if_e	rdlong	local01, #20
25084     13 15 52 F6 | 	abs	arg02, local01 wc
25088     A1 07 00 FF 
2508c     40 14 16 FD | 	qdiv	arg02, ##1000000
25090                 | ' 
25090                 | '     ' use current frequency if none specified
25090                 | ' 
25090                 | '     if freq == 0 
25090                 | '         freq := clkfreq 
25090                 | ' 
25090                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
25090                 | ' 
25090                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
25090                 | '     if burst < 0
25090                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
25090     18 14 62 FD | 	getqx	arg02
25094     0A 19 82 F6 | 	negc	arg04, arg02
25098     03 18 66 F0 | 	shl	arg04, #3
2509c     84 18 86 F1 | 	sub	arg04, #132
250a0     04 18 46 F0 | 	shr	arg04, #4
250a4     04 18 66 F0 | 	shl	arg04, #4
250a8     00 18 56 F2 | 	cmps	arg04, #0 wc
250ac     0E FA 65 C6 |  if_b	neg	result1, #14
250b0     10 01 90 CD |  if_b	jmp	#LR__2913
250b4                 | ' 
250b4                 | '     ' compute the input delay
250b4                 | ' 
250b4                 | '     if delay <= 0
250b4     01 28 56 F2 | 	cmps	local02, #1 wc
250b8     10 00 90 3D |  if_ae	jmp	#LR__2910
250bc                 | '         delay := lookupDelay(freq)
250bc     13 13 02 F6 | 	mov	arg01, local01
250c0     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
250c4     FD 28 02 F6 | 	mov	local02, result1
250c8     04 00 90 FD | 	jmp	#LR__2911
250cc                 | LR__2910
250cc                 | '     else
250cc                 | '         delay <#= $f ' limit to 15
250cc     0F 28 66 F3 | 	fles	local02, #15
250d0                 | LR__2911
250d0                 | ' 
250d0                 | '     ' create our lock
250d0                 | ' 
250d0                 | '     driverlock := LOCKNEW()  
250d0     00 FA 05 F6 | 	mov	result1, #0
250d4     04 FA 61 FD | 	locknew	result1
250d8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
250dc     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
250e0                 | '     if driverlock == -1
250e0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
250e4     FF FF 7F FF 
250e8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
250ec                 | '         return ERR_NO_LOCK
250ec     1A FA 65 A6 |  if_e	neg	result1, #26
250f0     D0 00 90 AD |  if_e	jmp	#LR__2913
250f4                 | ' 
250f4                 | '     ' patch in the proper data and HUB addresses to the startup structure
250f4                 | ' 
250f4                 | '     long[@startupData][0]:=clkfreq
250f4     14 26 06 FB | 	rdlong	local01, #20
250f8     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
250fc     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
25100                 | ' '    long[@startupData][1]:=$1000_0000
25100                 | '     long[@startupData][5]:=@deviceData
25100     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
25104     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
25108     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
2510c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
25110     14 14 06 F1 | 	add	arg02, #20
25114     0A 27 62 FC | 	wrlong	local01, arg02
25118                 | '     long[@startupData][6]:=@qosData
25118     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
2511c     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
25120     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
25124     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
25128     18 14 06 F1 | 	add	arg02, #24
2512c     0A 27 62 FC | 	wrlong	local01, arg02
25130                 | '     long[@startupData][7]:=$7FF00
25130     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
25134     1C 26 06 F1 | 	add	local01, #28
25138     FF 03 80 FF 
2513c     13 01 6A FC | 	wrlong	##524032, local01
25140                 | ' 
25140                 | '     ' setup some default bank and QoS parameter values
25140                 | ' 
25140                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
25140     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
25144     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
25148     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
2514c     10 18 66 F0 | 	shl	arg04, #16
25150     0C 28 66 F0 | 	shl	local02, #12
25154     14 19 42 F5 | 	or	arg04, local02
25158     18 18 46 F5 | 	or	arg04, #24
2515c     0C 15 02 F6 | 	mov	arg02, arg04
25160     02 16 06 F6 | 	mov	arg03, #2
25164     A0 00 A0 FD | 	call	#\builtin_longfill_
25168                 | '     longfill(@qosData, $FFFF0000, 8)
25168     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
2516c     07 16 06 F6 | 	mov	arg03, #7
25170     28 16 62 FD | 	setq	arg03
25174     80 FF FF FF 
25178     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
2517c                 | ' 
2517c                 | '     ' get the address of the PSRAM memory driver so we can start it
2517c                 | ' 
2517c                 | '     driverAddr:= driver.getDriverAddr()
2517c                 | '     return @driver_start
2517c     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
25180     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
25184     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
25188                 | ' 
25188                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
25188                 | ' 
25188                 | '     if desiredcog < 0
25188     00 2A 56 F2 | 	cmps	local03, #0 wc
2518c                 | '         desiredcog := NEWCOG
2518c     10 2A 06 C6 |  if_b	mov	local03, #16
25190                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
25190     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
25194     15 2D 02 F6 | 	mov	local04, local03
25198     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
2519c     0A 2D F2 FC | 	coginit	local04, arg02 wc
251a0     01 2C 66 C6 |  if_b	neg	local04, #1
251a4     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
251a8     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
251ac                 | '     repeat until long[@startupData] == 0 
251ac     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
251b0                 | LR__2912
251b0     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
251b4     F8 FF 9F 5D |  if_ne	jmp	#LR__2912
251b8                 | ' 
251b8                 | '     return drivercog
251b8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
251bc     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
251c0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
251c4                 | LR__2913
251c4     A7 F0 03 F6 | 	mov	ptra, fp
251c8     B2 00 A0 FD | 	call	#popregs_
251cc                 | _psram_spin2_startx_ret
251cc     2D 00 64 FD | 	ret
251d0                 | 
251d0                 | ' 
251d0                 | ' '..............................................................................
251d0                 | ' 
251d0                 | ' {{
251d0                 | ' }}
251d0                 | ' PUB stop() : i
251d0                 | _psram_spin2_stop
251d0     00 00 06 F6 | 	mov	_var01, #0
251d4                 | '     if drivercog <> -1
251d4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
251d8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
251dc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
251e0     FF FF 7F FF 
251e4     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
251e8     70 00 90 AD |  if_e	jmp	#LR__2923
251ec                 | '         cogstop(drivercog) ' a rather brutal stop
251ec     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
251f0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
251f4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
251f8     03 12 62 FD | 	cogstop	arg01
251fc     97 26 48 FB | 	callpa	#(@LR__2922-@LR__2920)>>2,fcache_load_ptr_
25200                 | '         repeat i from 0 to 7
25200                 | LR__2920
25200                 | '             if long[$7FF00][i*3] < 0
25200     00 FB 01 F6 | 	mov	result1, _var01
25204     01 FA 65 F0 | 	shl	result1, #1
25208     00 FB 01 F1 | 	add	result1, _var01
2520c     02 FA 65 F0 | 	shl	result1, #2
25210     FF 03 00 FF 
25214     00 FB 05 F1 | 	add	result1, ##524032
25218     FD FA 01 FB | 	rdlong	result1, result1
2521c     00 FA 55 F2 | 	cmps	result1, #0 wc
25220     1C 00 90 3D |  if_ae	jmp	#LR__2921
25224                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
25224     00 FB 01 F6 | 	mov	result1, _var01
25228     01 FA 65 F0 | 	shl	result1, #1
2522c     00 FB 01 F1 | 	add	result1, _var01
25230     02 FA 65 F0 | 	shl	result1, #2
25234     FF 03 00 FF 
25238     00 FB 05 F1 | 	add	result1, ##524032
2523c     FD 20 68 FC | 	wrlong	#16, result1
25240                 | LR__2921
25240     01 00 06 F1 | 	add	_var01, #1
25244     08 00 56 F2 | 	cmps	_var01, #8 wc
25248     B4 FF 9F CD |  if_b	jmp	#LR__2920
2524c                 | LR__2922
2524c                 | '         drivercog := -1
2524c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25250     FF FF FF FF 
25254     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
25258     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2525c                 | LR__2923
2525c                 | '     if driverlock <> -1
2525c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
25260     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
25264     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25268     FF FF 7F FF 
2526c     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
25270                 | '         LOCKRET(driverlock)
25270     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
25274     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
25278     05 12 62 5D |  if_ne	lockret	arg01
2527c                 | '         driverlock := -1
2527c     FF FF FF 5F 
25280     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
25284     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
25288     00 FB 01 F6 | 	mov	result1, _var01
2528c                 | _psram_spin2_stop_ret
2528c     2D 00 64 FD | 	ret
25290                 | 
25290                 | ' 
25290                 | ' '..............................................................................
25290                 | ' 
25290                 | ' {{
25290                 | ' }}
25290                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
25290                 | _psram_spin2_read1
25290                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
25290                 | '     if drivercog == -1 ' driver must be running
25290     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25294     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
25298     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2529c     FF FF 7F FF 
252a0     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
252a4                 | '         return ERR_INACTIVE
252a4     0F FA 65 A6 |  if_e	neg	result1, #15
252a8     7C 00 90 AD |  if_e	jmp	#LR__2931
252ac                 | '     if count == 0 ' don't even bother reading
252ac     00 16 0E F2 | 	cmp	arg03, #0 wz
252b0                 | '         return 0
252b0     00 FA 05 A6 |  if_e	mov	result1, #0
252b4     70 00 90 AD |  if_e	jmp	#LR__2931
252b8                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
252b8     00 FA 05 F6 | 	mov	result1, #0
252bc     01 FA 61 FD | 	cogid	result1
252c0     FD 00 02 F6 | 	mov	_var01, result1
252c4     01 00 66 F0 | 	shl	_var01, #1
252c8     FD 00 02 F1 | 	add	_var01, result1
252cc     02 00 66 F0 | 	shl	_var01, #2
252d0     FF 03 00 FF 
252d4     00 03 06 F6 | 	mov	_var02, ##524032
252d8     00 03 02 F1 | 	add	_var02, _var01
252dc                 | '     if long[mailbox] < 0
252dc     01 01 02 FB | 	rdlong	_var01, _var02
252e0     00 00 56 F2 | 	cmps	_var01, #0 wc
252e4                 | '         return ERR_MAILBOX_BUSY
252e4     1C FA 65 C6 |  if_b	neg	result1, #28
252e8     3C 00 90 CD |  if_b	jmp	#LR__2931
252ec                 | '     long[mailbox][2] := count
252ec     08 02 06 F1 | 	add	_var02, #8
252f0     01 17 62 FC | 	wrlong	arg03, _var02
252f4                 | '     long[mailbox][1] := dstHubAddr
252f4     04 02 86 F1 | 	sub	_var02, #4
252f8     01 13 62 FC | 	wrlong	arg01, _var02
252fc     04 02 86 F1 | 	sub	_var02, #4
25300                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
25300     0A 05 02 F6 | 	mov	_var03, arg02
25304     D9 04 06 F4 | 	bitl	_var03, #217
25308     00 00 58 FF 
2530c     00 00 06 F6 | 	mov	_var01, ##-1342177280
25310     02 01 02 F1 | 	add	_var01, _var03
25314     01 01 62 FC | 	wrlong	_var01, _var02
25318                 | '     repeat
25318                 | LR__2930
25318                 | '         result := long[mailbox]    
25318     01 05 02 FB | 	rdlong	_var03, _var02
2531c     00 04 56 F2 | 	cmps	_var03, #0 wc
25320     F4 FF 9F CD |  if_b	jmp	#LR__2930
25324                 | '     while result < 0   
25324                 | '     return -result                       'return success or error
25324     02 FB 61 F6 | 	neg	result1, _var03
25328                 | LR__2931
25328                 | _psram_spin2_read1_ret
25328     2D 00 64 FD | 	ret
2532c                 | 
2532c                 | ' 
2532c                 | ' '..............................................................................
2532c                 | ' 
2532c                 | ' {{
2532c                 | ' }}
2532c                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
2532c                 | _psram_spin2_write
2532c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
2532c                 | '     if drivercog == -1 ' driver must be running
2532c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25330     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
25334     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25338     FF FF 7F FF 
2533c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
25340                 | '         return ERR_INACTIVE
25340     0F FA 65 A6 |  if_e	neg	result1, #15
25344     7C 00 90 AD |  if_e	jmp	#LR__2941
25348                 | '     if count == 0 ' don't even bother writing
25348     00 16 0E F2 | 	cmp	arg03, #0 wz
2534c                 | '         return 0
2534c     00 FA 05 A6 |  if_e	mov	result1, #0
25350     70 00 90 AD |  if_e	jmp	#LR__2941
25354                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
25354     00 FA 05 F6 | 	mov	result1, #0
25358     01 FA 61 FD | 	cogid	result1
2535c     FD 00 02 F6 | 	mov	_var01, result1
25360     01 00 66 F0 | 	shl	_var01, #1
25364     FD 00 02 F1 | 	add	_var01, result1
25368     02 00 66 F0 | 	shl	_var01, #2
2536c     FF 03 00 FF 
25370     00 03 06 F6 | 	mov	_var02, ##524032
25374     00 03 02 F1 | 	add	_var02, _var01
25378                 | '     if long[mailbox] < 0
25378     01 01 02 FB | 	rdlong	_var01, _var02
2537c     00 00 56 F2 | 	cmps	_var01, #0 wc
25380                 | '         return ERR_MAILBOX_BUSY
25380     1C FA 65 C6 |  if_b	neg	result1, #28
25384     3C 00 90 CD |  if_b	jmp	#LR__2941
25388                 | '     long[mailbox][2] := count
25388     08 02 06 F1 | 	add	_var02, #8
2538c     01 17 62 FC | 	wrlong	arg03, _var02
25390                 | '     long[mailbox][1] := srcHubAddr
25390     04 02 86 F1 | 	sub	_var02, #4
25394     01 13 62 FC | 	wrlong	arg01, _var02
25398     04 02 86 F1 | 	sub	_var02, #4
2539c                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
2539c     0A 05 02 F6 | 	mov	_var03, arg02
253a0     D9 04 06 F4 | 	bitl	_var03, #217
253a4     00 00 78 FF 
253a8     00 00 06 F6 | 	mov	_var01, ##-268435456
253ac     02 01 02 F1 | 	add	_var01, _var03
253b0     01 01 62 FC | 	wrlong	_var01, _var02
253b4                 | '     repeat
253b4                 | LR__2940
253b4                 | '         result := long[mailbox]    
253b4     01 05 02 FB | 	rdlong	_var03, _var02
253b8     00 04 56 F2 | 	cmps	_var03, #0 wc
253bc     F4 FF 9F CD |  if_b	jmp	#LR__2940
253c0                 | '     while result < 0   
253c0                 | '     return -result                       'return success or error
253c0     02 FB 61 F6 | 	neg	result1, _var03
253c4                 | LR__2941
253c4                 | _psram_spin2_write_ret
253c4     2D 00 64 FD | 	ret
253c8                 | 
253c8                 | ' 
253c8                 | ' ' generalized fill
253c8                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
253c8                 | _psram_spin2_fill
253c8     09 01 02 F6 | 	mov	_var01, arg01
253cc     0A 03 02 F6 | 	mov	_var02, arg02
253d0     0B 05 02 F6 | 	mov	_var03, arg03
253d4     0D 07 02 F6 | 	mov	_var04, arg05
253d8                 | '     case datasize 
253d8     01 06 86 F1 | 	sub	_var04, #1
253dc     04 06 26 F3 | 	fle	_var04, #4
253e0     30 06 62 FD | 	jmprel	_var04
253e4                 | LR__2950
253e4     10 00 90 FD | 	jmp	#LR__2951
253e8     18 00 90 FD | 	jmp	#LR__2952
253ec     2C 00 90 FD | 	jmp	#LR__2954
253f0     1C 00 90 FD | 	jmp	#LR__2953
253f4     24 00 90 FD | 	jmp	#LR__2954
253f8                 | LR__2951
253f8                 | '         1: req := driver.R_WRITEBYTE
253f8     00 00 60 FF 
253fc     00 08 06 F6 | 	mov	_var05, ##-1073741824
25400     20 00 90 FD | 	jmp	#LR__2955
25404                 | LR__2952
25404                 | '         2: req := driver.R_WRITEWORD
25404     00 00 68 FF 
25408     00 08 06 F6 | 	mov	_var05, ##-805306368
2540c     14 00 90 FD | 	jmp	#LR__2955
25410                 | LR__2953
25410                 | '         4: req := driver.R_WRITELONG
25410     00 00 70 FF 
25414     00 08 06 F6 | 	mov	_var05, ##-536870912
25418     08 00 90 FD | 	jmp	#LR__2955
2541c                 | LR__2954
2541c                 | '         other : return ERR_INVALID
2541c     06 FA 65 F6 | 	neg	result1, #6
25420     94 00 90 FD | 	jmp	#LR__2957
25424                 | LR__2955
25424                 | '     if count == 0   ' nothing to do
25424     00 04 0E F2 | 	cmp	_var03, #0 wz
25428                 | '         return 0
25428     00 FA 05 A6 |  if_e	mov	result1, #0
2542c     88 00 90 AD |  if_e	jmp	#LR__2957
25430                 | '     if drivercog == -1
25430     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25434     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
25438     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2543c     FF FF 7F FF 
25440     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
25444                 | '         return ERR_INACTIVE
25444     0F FA 65 A6 |  if_e	neg	result1, #15
25448     6C 00 90 AD |  if_e	jmp	#LR__2957
2544c                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
2544c     00 FA 05 F6 | 	mov	result1, #0
25450     01 FA 61 FD | 	cogid	result1
25454     FD 06 02 F6 | 	mov	_var04, result1
25458     01 06 66 F0 | 	shl	_var04, #1
2545c     FD 06 02 F1 | 	add	_var04, result1
25460     02 06 66 F0 | 	shl	_var04, #2
25464     FF 03 00 FF 
25468     00 0B 06 F6 | 	mov	_var06, ##524032
2546c     03 0B 02 F1 | 	add	_var06, _var04
25470                 | '     if long[mailbox] < 0
25470     05 07 02 FB | 	rdlong	_var04, _var06
25474     00 06 56 F2 | 	cmps	_var04, #0 wc
25478                 | '         return ERR_MAILBOX_BUSY
25478     1C FA 65 C6 |  if_b	neg	result1, #28
2547c     38 00 90 CD |  if_b	jmp	#LR__2957
25480                 | '     long[mailbox][2] := count
25480     08 0A 06 F1 | 	add	_var06, #8
25484     05 05 62 FC | 	wrlong	_var03, _var06
25488                 | '     long[mailbox][1] := pattern
25488     04 0A 86 F1 | 	sub	_var06, #4
2548c     05 03 62 FC | 	wrlong	_var02, _var06
25490     04 0A 86 F1 | 	sub	_var06, #4
25494                 | '     long[mailbox] := req + (addr & $1ffffff)
25494     04 0D 02 F6 | 	mov	_var07, _var05
25498     00 0F 02 F6 | 	mov	_var08, _var01
2549c     D9 0E 06 F4 | 	bitl	_var08, #217
254a0     07 0D 02 F1 | 	add	_var07, _var08
254a4     05 0D 62 FC | 	wrlong	_var07, _var06
254a8                 | '     repeat
254a8                 | LR__2956
254a8                 | '         r := long[mailbox]
254a8     05 0F 02 FB | 	rdlong	_var08, _var06
254ac     00 0E 56 F2 | 	cmps	_var08, #0 wc
254b0     F4 FF 9F CD |  if_b	jmp	#LR__2956
254b4                 | '     while r < 0
254b4                 | '     return -r                  ' return 0 for success or negated error code
254b4     07 FB 61 F6 | 	neg	result1, _var08
254b8                 | LR__2957
254b8                 | _psram_spin2_fill_ret
254b8     2D 00 64 FD | 	ret
254bc                 | 
254bc                 | ' 
254bc                 | ' '..............................................................................
254bc                 | ' 
254bc                 | ' {{
254bc                 | ' }}
254bc                 | ' PUB setQos(cog, qos) : result | mailbox
254bc                 | _psram_spin2_setQos
254bc     09 01 02 F6 | 	mov	_var01, arg01
254c0                 | '     if drivercog == -1 ' driver must be running
254c0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
254c4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
254c8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
254cc     FF FF 7F FF 
254d0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
254d4                 | '         return ERR_INACTIVE
254d4     0F FA 65 A6 |  if_e	neg	result1, #15
254d8     9C 00 90 AD |  if_e	jmp	#LR__2964
254dc                 | '     if cog < 0 or cog > 7 ' enforce cog id range
254dc     00 00 56 F2 | 	cmps	_var01, #0 wc
254e0     08 00 90 CD |  if_b	jmp	#LR__2960
254e4     08 00 56 F2 | 	cmps	_var01, #8 wc
254e8     08 00 90 CD |  if_b	jmp	#LR__2961
254ec                 | LR__2960
254ec                 | '         return ERR_INVALID
254ec     06 FA 65 F6 | 	neg	result1, #6
254f0     84 00 90 FD | 	jmp	#LR__2964
254f4                 | LR__2961
254f4                 | '     long[@qosData][cog] := qos & !$1ff
254f4     FF 15 26 F5 | 	andn	arg02, #511
254f8     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
254fc     02 00 66 F0 | 	shl	_var01, #2
25500     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
25504     00 15 62 FC | 	wrlong	arg02, _var01
25508                 | '     mailbox := $7FF00 + drivercog*12
25508     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
2550c     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
25510     02 07 02 F6 | 	mov	_var04, _var03
25514     01 06 66 F0 | 	shl	_var04, #1
25518     02 07 02 F1 | 	add	_var04, _var03
2551c     02 06 66 F0 | 	shl	_var04, #2
25520     FF 03 00 FF 
25524     00 09 06 F6 | 	mov	_var05, ##524032
25528     03 09 02 F1 | 	add	_var05, _var04
2552c                 | '     repeat until LOCKTRY(driverlock)
2552c     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
25530                 | LR__2962
25530     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
25534     06 12 72 FD | 	locktry	arg01 wc
25538     F4 FF 9F 3D |  if_ae	jmp	#LR__2962
2553c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25540                 | '     long[mailbox] := driver.R_CONFIG + cogid()
25540     00 06 06 F6 | 	mov	_var04, #0
25544     01 06 62 FD | 	cogid	_var04
25548     00 00 78 FF 
2554c     00 02 06 F6 | 	mov	_var02, ##-268435456
25550     03 03 02 F1 | 	add	_var02, _var04
25554     04 03 62 FC | 	wrlong	_var02, _var05
25558                 | '     repeat while long[mailbox] < 0
25558                 | LR__2963
25558     04 03 02 FB | 	rdlong	_var02, _var05
2555c     00 02 56 F2 | 	cmps	_var02, #0 wc
25560     F4 FF 9F CD |  if_b	jmp	#LR__2963
25564                 | '     LOCKREL(driverlock)
25564     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
25568     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
2556c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25570     07 12 72 FD | 	lockrel	arg01 wc
25574     00 FA 05 F6 | 	mov	result1, #0
25578                 | LR__2964
25578                 | _psram_spin2_setQos_ret
25578     2D 00 64 FD | 	ret
2557c                 | 
2557c                 | ' 
2557c                 | ' '..............................................................................
2557c                 | ' 
2557c                 | ' {{
2557c                 | ' }}
2557c                 | ' PRI lookupDelay(freq) : delay | profile
2557c                 | _psram_spin2_lookupDelay
2557c                 | '     profile := @delayTable
2557c     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
25580     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
25584                 | '     delay := long[profile][0]
25584     00 03 02 FB | 	rdlong	_var02, _var01
25588                 | '     repeat while long[profile][1] 
25588     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
2558c     97 16 48 FB | 	callpa	#(@LR__2971-@LR__2970)>>2,fcache_load_ptr_
25590                 | LR__2970
25590     04 00 06 F1 | 	add	_var01, #4
25594     00 FB 09 FB | 	rdlong	result1, _var01 wz
25598     04 00 86 F1 | 	sub	_var01, #4
2559c     1C 00 90 AD |  if_e	jmp	#LR__2972
255a0                 | '         if freq +< long[profile][1] 
255a0     04 00 06 F1 | 	add	_var01, #4
255a4     00 FB 01 FB | 	rdlong	result1, _var01
255a8     04 00 86 F1 | 	sub	_var01, #4
255ac     FD 12 12 F2 | 	cmp	arg01, result1 wc
255b0                 | '             quit
255b0                 | '         profile += 4
255b0     04 00 06 31 |  if_ae	add	_var01, #4
255b4                 | '         delay++
255b4     01 02 06 31 |  if_ae	add	_var02, #1
255b8     D4 FF 9F 3D |  if_ae	jmp	#LR__2970
255bc                 | LR__2971
255bc                 | LR__2972
255bc     01 FB 01 F6 | 	mov	result1, _var02
255c0                 | _psram_spin2_lookupDelay_ret
255c0     2D 00 64 FD | 	ret
255c4                 | 
255c4                 | ' 
255c4                 | ' PUB start() : r
255c4                 | _usbnew_spin2_start
255c4     00 00 06 F6 | 	mov	_var01, #0
255c8                 | '   ifnot driver_cog
255c8     15 00 00 FF 
255cc     47 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10823
255d0     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
255d4     15 00 00 FF 
255d8     47 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10823
255dc     38 00 90 5D |  if_ne	jmp	#LR__2980
255e0                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
255e0     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
255e4     10 00 06 F6 | 	mov	_var01, #16
255e8     00 16 06 F6 | 	mov	arg03, #0
255ec     28 16 62 FD | 	setq	arg03
255f0     0A 01 F2 FC | 	coginit	_var01, arg02 wc
255f4     01 00 66 C6 |  if_b	neg	_var01, #1
255f8                 | '     if r >= 0
255f8     00 00 56 F2 | 	cmps	_var01, #0 wc
255fc                 | '       driver_cog := r+1
255fc     00 03 02 36 |  if_ae	mov	_var02, _var01
25600     01 02 06 31 |  if_ae	add	_var02, #1
25604     15 00 00 3F 
25608     47 F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10823
2560c     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
25610     15 00 00 3F 
25614     47 F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10823
25618                 | LR__2980
25618     00 FB 01 F6 | 	mov	result1, _var01
2561c                 | _usbnew_spin2_start_ret
2561c     2D 00 64 FD | 	ret
25620                 | 
25620                 | '     '' (Always enabled)
25620                 | ' 
25620                 | ' '' Get current pressed state of a keyboard key
25620                 | ' PUB keystate(key) : r | buf[2],tmp
25620                 | _usbnew_spin2_keystate
25620     00 04 06 F6 | 	mov	_var03, #0
25624                 | '   if key >= $E0 && key < $E8
25624     E0 12 56 F2 | 	cmps	arg01, #224 wc
25628     34 00 90 CD |  if_b	jmp	#LR__2990
2562c     E8 12 56 F2 | 	cmps	arg01, #232 wc
25630     2C 00 90 3D |  if_ae	jmp	#LR__2990
25634                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
25634     00 FA 05 F6 | 	mov	result1, #0
25638     13 00 00 FF 
2563c     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
25640     09 07 02 F6 | 	mov	_var04, arg01
25644     E0 06 86 F1 | 	sub	_var04, #224
25648     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
2564c     03 09 4A F0 | 	shr	_var05, _var04 wz
25650     13 00 00 FF 
25654     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
25658     01 FA 65 56 |  if_ne	neg	result1, #1
2565c     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
25660                 | LR__2990
25660                 | '   else
25660                 | '     '' Do this in inline ASM to ensure atomicity
25660                 | '     tmp := @hkbd_report
25660     13 00 00 FF 
25664     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
25668     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
2566c                 | '     org
2566c     13 00 00 FF 
25670     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
25674     97 1E 48 FB | 	callpa	#(@LR__2992-@LR__2991)>>2,fcache_load_ptr_
25678                 | LR__2991
25678 000             | 	org	0
25678 000 28 02 64 FD | 	setq	#1
2567c 001 04 01 02 FB | 	rdlong	_var01, _var05
25680 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
25684 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
25688 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
2568c 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
25690 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
25694 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
25698 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
2569c 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
256a0 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
256a4 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
256a8 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
256ac 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
256b0 00e 01 04 66 A6 |  if_e	neg	_var03, #1
256b4 00f             | LR__2992
256b4                 | 	orgh
256b4     02 FB 01 F6 | 	mov	result1, _var03
256b8                 | _usbnew_spin2_keystate_ret
256b8     2D 00 64 FD | 	ret
256bc                 | 
256bc                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
256bc                 | ' 
256bc                 | ' '' Return key event from buffer if there is one
256bc                 | ' PUB get_key() : r | tail
256bc                 | _usbnew_spin2_get_key
256bc                 | '   tail := keyq_tail
256bc     0F 00 00 FF 
256c0     C5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7877
256c4     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
256c8                 | '   if keyq_head == tail
256c8     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
256cc     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
256d0     0F 00 00 FF 
256d4     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
256d8     00 03 0A F2 | 	cmp	_var02, _var01 wz
256dc                 | '     return 0 ' No event
256dc     00 FA 05 A6 |  if_e	mov	result1, #0
256e0     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
256e4                 | '   r := keyq_data[tail]
256e4     00 03 02 F6 | 	mov	_var02, _var01
256e8     02 02 66 F0 | 	shl	_var02, #2
256ec     0F 00 00 FF 
256f0     C6 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7878
256f4     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
256f8     01 FB 01 FB | 	rdlong	result1, _var02
256fc                 | '   if ++tail == KEYQUEUE_SIZE
256fc     01 00 06 F1 | 	add	_var01, #1
25700     80 00 0E F2 | 	cmp	_var01, #128 wz
25704                 | '     tail := 0
25704     00 00 06 A6 |  if_e	mov	_var01, #0
25708                 | '   keyq_tail := tail
25708     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
2570c     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
25710     0F 00 00 FF 
25714     C5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7877
25718                 | _usbnew_spin2_get_key_ret
25718     2D 00 64 FD | 	ret
2571c                 | 
2571c                 | ' 
2571c                 | ' '' Emulate mouse movement
2571c                 | ' PUB mouse_move(x,y)
2571c                 | _usbnew_spin2_mouse_move
2571c     02 4A 05 F6 | 	mov	COUNT_, #2
25720     A8 00 A0 FD | 	call	#pushregs_
25724     09 27 02 F6 | 	mov	local01, arg01
25728     0A 29 02 F6 | 	mov	local02, arg02
2572c                 | '   mouse_lock := 1
2572c     14 00 00 FF 
25730     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
25734     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
25738     14 00 00 FF 
2573c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
25740                 | '   waitus(2) ' hope driver is now done
25740     02 12 06 F6 | 	mov	arg01, #2
25744     30 0B B0 FD | 	call	#__system___waitus
25748                 | '   mouse_xacc := x
25748     14 00 00 FF 
2574c     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
25750     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
25754                 | '   mouse_yacc := y
25754     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
25758     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
2575c                 | '   if mouse_outptr
2575c     04 00 00 FF 
25760     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
25764     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
25768     0F 00 00 FF 
2576c     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
25770     24 00 90 AD |  if_e	jmp	#LR__3000
25774                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
25774     10 28 66 F0 | 	shl	local02, #16
25778     13 27 32 F9 | 	getword	local01, local01, #0
2577c     13 29 42 F5 | 	or	local02, local01
25780     0F 00 00 FF 
25784     C0 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7872
25788     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
2578c     0F 00 00 FF 
25790     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
25794     13 29 62 FC | 	wrlong	local02, local01
25798                 | LR__3000
25798                 | '   mouse_lock := 0
25798     14 00 00 FF 
2579c     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
257a0     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
257a4     14 00 00 FF 
257a8     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
257ac     A7 F0 03 F6 | 	mov	ptra, fp
257b0     B2 00 A0 FD | 	call	#popregs_
257b4                 | _usbnew_spin2_mouse_move_ret
257b4     2D 00 64 FD | 	ret
257b8                 | 
257b8                 | '     '' Set HAVE_HIDPAD to enable.
257b8                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
257b8                 | ' 
257b8                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
257b8                 | ' PUB hidpad_id(dev) : r
257b8                 | _usbnew_spin2_hidpad_id
257b8                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
257b8     13 00 00 FF 
257bc     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
257c0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
257c4     09 01 02 F6 | 	mov	_var01, arg01
257c8     03 00 66 F0 | 	shl	_var01, #3
257cc     09 01 82 F1 | 	sub	_var01, arg01
257d0     02 00 66 F0 | 	shl	_var01, #2
257d4     00 FB 01 F1 | 	add	result1, _var01
257d8     FD FA 01 FB | 	rdlong	result1, result1
257dc     13 00 00 FF 
257e0     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
257e4                 | _usbnew_spin2_hidpad_id_ret
257e4     2D 00 64 FD | 	ret
257e8                 | 
257e8                 | ' 
257e8                 | ' '' Get all button states for a device
257e8                 | ' PUB hidpad_buttons(dev) : r 
257e8                 | _usbnew_spin2_hidpad_buttons
257e8                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
257e8     13 00 00 FF 
257ec     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
257f0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
257f4     09 01 02 F6 | 	mov	_var01, arg01
257f8     03 00 66 F0 | 	shl	_var01, #3
257fc     09 01 82 F1 | 	sub	_var01, arg01
25800     02 00 66 F0 | 	shl	_var01, #2
25804     00 FB 01 F1 | 	add	result1, _var01
25808     14 FA 05 F1 | 	add	result1, #20
2580c     FD FA 01 FB | 	rdlong	result1, result1
25810     13 00 00 FF 
25814     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
25818                 | _usbnew_spin2_hidpad_buttons_ret
25818     2D 00 64 FD | 	ret
2581c                 | 
2581c                 | ' 
2581c                 | ' '' Get state of an axis (normalized between -32768 and 32767)
2581c                 | ' PUB hidpad_axis(dev,axnum) : r
2581c                 | _usbnew_spin2_hidpad_axis
2581c                 | '   if axnum +>= 6
2581c     06 14 16 F2 | 	cmp	arg02, #6 wc
25820                 | '     return 0
25820     00 FA 05 36 |  if_ae	mov	result1, #0
25824     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
25828                 | '   else 
25828                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
25828     13 00 00 FF 
2582c     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
25830     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
25834     09 01 02 F6 | 	mov	_var01, arg01
25838     03 00 66 F0 | 	shl	_var01, #3
2583c     09 01 82 F1 | 	sub	_var01, arg01
25840     02 00 66 F0 | 	shl	_var01, #2
25844     00 FB 01 F1 | 	add	result1, _var01
25848     04 00 06 F6 | 	mov	_var01, #4
2584c     0A 01 02 F1 | 	add	_var01, arg02
25850     01 00 66 F0 | 	shl	_var01, #1
25854     FD 00 02 F1 | 	add	_var01, result1
25858     00 FB E1 FA | 	rdword	result1, _var01
2585c     0F FA 65 F7 | 	signx	result1, #15
25860     13 00 00 FF 
25864     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
25868                 | _usbnew_spin2_hidpad_axis_ret
25868     2D 00 64 FD | 	ret
2586c                 | 
2586c                 | ' 
2586c                 | ' '' Get state of a hat
2586c                 | ' PUB hidpad_hat(dev,hatnum) : r
2586c                 | _usbnew_spin2_hidpad_hat
2586c                 | '   if hatnum +>= 4
2586c     04 14 16 F2 | 	cmp	arg02, #4 wc
25870                 | '     return 0
25870     00 FA 05 36 |  if_ae	mov	result1, #0
25874     38 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
25878                 | '   else 
25878                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6*4+hatnum]
25878     13 00 00 FF 
2587c     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
25880     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
25884     09 01 02 F6 | 	mov	_var01, arg01
25888     03 00 66 F0 | 	shl	_var01, #3
2588c     09 01 82 F1 | 	sub	_var01, arg01
25890     02 00 66 F0 | 	shl	_var01, #2
25894     00 FB 01 F1 | 	add	result1, _var01
25898     18 00 06 F6 | 	mov	_var01, #24
2589c     0A 01 02 F1 | 	add	_var01, arg02
258a0     FD 00 02 F1 | 	add	_var01, result1
258a4     00 FB C1 FA | 	rdbyte	result1, _var01
258a8     13 00 00 FF 
258ac     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
258b0                 | _usbnew_spin2_hidpad_hat_ret
258b0     2D 00 64 FD | 	ret
258b4                 | 
258b4                 | ' 
258b4                 | ' 
258b4                 | ' '--------------------------------------------------------------
258b4                 | ' '---------- Init the variables, start the cog. ----------------
258b4                 | ' '--------------------------------------------------------------
258b4                 | ' 
258b4                 | ' pub start(mbox,scope,cache) :cog,base | iii
258b4                 | _audio096_spin2_start
258b4     04 4A 05 F6 | 	mov	COUNT_, #4
258b8     A8 00 A0 FD | 	call	#pushregs_
258bc     09 27 02 F6 | 	mov	local01, arg01
258c0                 | ' 
258c0                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
258c0                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
258c0                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
258c0                 | ' 
258c0                 | ' mailboxaddr:=mbox 
258c0     F2 26 62 FC | 	wrlong	local01, objptr
258c4                 | ' scope_ptr:=scope
258c4     04 E4 05 F1 | 	add	objptr, #4
258c8     F2 14 62 FC | 	wrlong	arg02, objptr
258cc                 | ' cache_ptr:=cache
258cc     04 E4 05 F1 | 	add	objptr, #4
258d0     F2 16 62 FC | 	wrlong	arg03, objptr
258d4                 | ' base:=@channel1[0]
258d4     04 E4 05 F1 | 	add	objptr, #4
258d8     F2 28 02 F6 | 	mov	local02, objptr
258dc                 | ' long[$40]:=mbox
258dc     40 26 66 FC | 	wrlong	local01, #64
258e0                 | ' repeat iii from 0 to 7
258e0     00 2A 06 F6 | 	mov	local03, #0
258e4     02 00 00 FF 
258e8     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
258ec     0C E4 85 F1 | 	sub	objptr, #12
258f0     97 BC 48 FB | 	callpa	#(@LR__3011-@LR__3010)>>2,fcache_load_ptr_
258f4                 | LR__3010
258f4                 | '   long[base+64*iii]:=0
258f4     14 27 02 F6 | 	mov	local01, local02
258f8     15 FD 01 F6 | 	mov	result2, local03
258fc     06 FC 65 F0 | 	shl	result2, #6
25900     FE 26 02 F1 | 	add	local01, result2
25904     13 01 68 FC | 	wrlong	#0, local01
25908                 | '   long[base+64*iii+4]:=0
25908     14 27 02 F6 | 	mov	local01, local02
2590c     15 FD 01 F6 | 	mov	result2, local03
25910     06 FC 65 F0 | 	shl	result2, #6
25914     FE 26 02 F1 | 	add	local01, result2
25918     04 26 06 F1 | 	add	local01, #4
2591c     13 01 68 FC | 	wrlong	#0, local01
25920                 | '   long[base+64*iii+12]:=0
25920     14 2D 02 F6 | 	mov	local04, local02
25924     15 27 02 F6 | 	mov	local01, local03
25928     06 26 66 F0 | 	shl	local01, #6
2592c     13 2D 02 F1 | 	add	local04, local01
25930     0C 2C 06 F1 | 	add	local04, #12
25934     16 01 68 FC | 	wrlong	#0, local04
25938                 | '   long[base+64*iii+16]:=2 
25938     14 2D 02 F6 | 	mov	local04, local02
2593c     15 27 02 F6 | 	mov	local01, local03
25940     06 26 66 F0 | 	shl	local01, #6
25944     13 2D 02 F1 | 	add	local04, local01
25948     10 2C 06 F1 | 	add	local04, #16
2594c     16 05 68 FC | 	wrlong	#2, local04
25950                 | '   word[base+64*iii+20]:=0
25950     14 2D 02 F6 | 	mov	local04, local02
25954     15 27 02 F6 | 	mov	local01, local03
25958     06 26 66 F0 | 	shl	local01, #6
2595c     13 2D 02 F1 | 	add	local04, local01
25960     14 2C 06 F1 | 	add	local04, #20
25964     16 01 58 FC | 	wrword	#0, local04
25968                 | '   word[base+64*iii+22]:=8192
25968     14 2D 02 F6 | 	mov	local04, local02
2596c     15 27 02 F6 | 	mov	local01, local03
25970     06 26 66 F0 | 	shl	local01, #6
25974     13 2D 02 F1 | 	add	local04, local01
25978     16 2C 06 F1 | 	add	local04, #22
2597c     10 00 80 FF 
25980     16 01 58 FC | 	wrword	##8192, local04
25984                 | '   word[base+64*iii+24]:=4000+2*iii
25984     15 2D 02 F6 | 	mov	local04, local03
25988     01 2C 66 F0 | 	shl	local04, #1
2598c     07 00 00 FF 
25990     A0 27 06 F6 | 	mov	local01, ##4000
25994     16 27 02 F1 | 	add	local01, local04
25998     14 2D 02 F6 | 	mov	local04, local02
2599c     15 FD 01 F6 | 	mov	result2, local03
259a0     06 FC 65 F0 | 	shl	result2, #6
259a4     FE 2C 02 F1 | 	add	local04, result2
259a8     18 2C 06 F1 | 	add	local04, #24
259ac     16 27 52 FC | 	wrword	local01, local04
259b0                 | '   word[base+64*iii+26]:=2
259b0     14 2D 02 F6 | 	mov	local04, local02
259b4     15 27 02 F6 | 	mov	local01, local03
259b8     06 26 66 F0 | 	shl	local01, #6
259bc     13 2D 02 F1 | 	add	local04, local01
259c0     1A 2C 06 F1 | 	add	local04, #26
259c4     16 05 58 FC | 	wrword	#2, local04
259c8                 | '   long [base+64*iii+8]:=@null | $C0000000
259c8     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
259cc     3E 26 26 F4 | 	bith	local01, #62
259d0     14 2D 02 F6 | 	mov	local04, local02
259d4     15 17 02 F6 | 	mov	arg03, local03
259d8     06 16 66 F0 | 	shl	arg03, #6
259dc     0B 2D 02 F1 | 	add	local04, arg03
259e0     08 2C 06 F1 | 	add	local04, #8
259e4     16 27 62 FC | 	wrlong	local01, local04
259e8                 | '   long[base+64*iii+32]:=0
259e8     14 2D 02 F6 | 	mov	local04, local02
259ec     15 27 02 F6 | 	mov	local01, local03
259f0     06 26 66 F0 | 	shl	local01, #6
259f4     13 2D 02 F1 | 	add	local04, local01
259f8     20 2C 06 F1 | 	add	local04, #32
259fc     16 01 68 FC | 	wrlong	#0, local04
25a00                 | '   long[base+64*iii+36]:=0
25a00     14 2D 02 F6 | 	mov	local04, local02
25a04     15 27 02 F6 | 	mov	local01, local03
25a08     06 26 66 F0 | 	shl	local01, #6
25a0c     13 2D 02 F1 | 	add	local04, local01
25a10     24 2C 06 F1 | 	add	local04, #36
25a14     16 01 68 FC | 	wrlong	#0, local04
25a18                 | '   long[base+64*iii+40]:=0
25a18     14 2D 02 F6 | 	mov	local04, local02
25a1c     15 27 02 F6 | 	mov	local01, local03
25a20     06 26 66 F0 | 	shl	local01, #6
25a24     13 2D 02 F1 | 	add	local04, local01
25a28     28 2C 06 F1 | 	add	local04, #40
25a2c     16 01 68 FC | 	wrlong	#0, local04
25a30                 | '   long[base+64*iii+44]:=0
25a30     14 2D 02 F6 | 	mov	local04, local02
25a34     15 27 02 F6 | 	mov	local01, local03
25a38     06 26 66 F0 | 	shl	local01, #6
25a3c     13 2D 02 F1 | 	add	local04, local01
25a40     2C 2C 06 F1 | 	add	local04, #44
25a44     16 01 68 FC | 	wrlong	#0, local04
25a48                 | '   long[base+64*iii+28]:=0
25a48     14 2D 02 F6 | 	mov	local04, local02
25a4c     15 27 02 F6 | 	mov	local01, local03
25a50     06 26 66 F0 | 	shl	local01, #6
25a54     13 2D 02 F1 | 	add	local04, local01
25a58     1C 2C 06 F1 | 	add	local04, #28
25a5c     16 01 68 FC | 	wrlong	#0, local04
25a60     01 2A 06 F1 | 	add	local03, #1
25a64     08 2A 56 F2 | 	cmps	local03, #8 wc
25a68     88 FE 9F CD |  if_b	jmp	#LR__3010
25a6c                 | LR__3011
25a6c     02 00 00 FF 
25a70     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
25a74                 | '   
25a74                 | ' cog:=coginit(16,@audio,@mailboxaddr)
25a74     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
25a78     F2 16 02 F6 | 	mov	arg03, objptr
25a7c     10 2C 06 F6 | 	mov	local04, #16
25a80     28 16 62 FD | 	setq	arg03
25a84     0A 2D F2 FC | 	coginit	local04, arg02 wc
25a88     01 2C 66 C6 |  if_b	neg	local04, #1
25a8c                 | ' waitms(100)
25a8c     64 12 06 F6 | 	mov	arg01, #100
25a90     78 07 B0 FD | 	call	#__system___waitms
25a94                 | ' return cog,base
25a94     14 FD 01 F6 | 	mov	result2, local02
25a98     16 FB 01 F6 | 	mov	result1, local04
25a9c     A7 F0 03 F6 | 	mov	ptra, fp
25aa0     B2 00 A0 FD | 	call	#popregs_
25aa4                 | _audio096_spin2_start_ret
25aa4     2D 00 64 FD | 	ret
25aa8                 | 
25aa8                 | ' 
25aa8                 | ' ' a simple play procedure to not poke everything. 
25aa8                 | ' 
25aa8                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
25aa8                 | _audio096_spin2_play
25aa8     0C E4 05 F1 | 	add	objptr, #12
25aac     F2 00 02 F6 | 	mov	_var01, objptr
25ab0     06 12 66 F0 | 	shl	arg01, #6
25ab4     09 01 02 F1 | 	add	_var01, arg01
25ab8     00 13 02 F6 | 	mov	arg01, _var01
25abc     0C 12 06 F1 | 	add	arg01, #12
25ac0     09 1B 62 FC | 	wrlong	arg05, arg01
25ac4     00 1C 56 F2 | 	cmps	arg06, #0 wc
25ac8     00 13 02 36 |  if_ae	mov	arg01, _var01
25acc     10 12 06 31 |  if_ae	add	arg01, #16
25ad0     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
25ad4     02 1A 06 C1 |  if_b	add	arg05, #2
25ad8     00 13 02 C6 |  if_b	mov	arg01, _var01
25adc     10 12 06 C1 |  if_b	add	arg01, #16
25ae0     09 1B 62 CC |  if_b	wrlong	arg05, arg01
25ae4     0B 13 52 F6 | 	abs	arg01, arg03 wc
25ae8     0F 1B 80 FF 
25aec     09 1F 1A FD | 	qdiv	##3546895, arg01
25af0                 | ' 
25af0                 | ' base2:=@channel1[0]+64*channel
25af0                 | ' 
25af0                 | ' 
25af0                 | ' long[base2+12]:= len
25af0                 | ' if loop >=0 
25af0                 | '   long[base2+16]:= loop
25af0     0C E4 85 F1 | 	sub	objptr, #12
25af4                 | ' else
25af4                 | '   long[base2+16]:= len+2
25af4                 | ' word[base2+20]:=vol
25af4     00 13 02 F6 | 	mov	arg01, _var01
25af8     14 12 06 F1 | 	add	arg01, #20
25afc     09 19 52 FC | 	wrword	arg04, arg01
25b00                 | ' word[base2+24]:= 3546895/splfreq 
25b00     00 19 02 F6 | 	mov	arg04, _var01
25b04     18 18 06 F1 | 	add	arg04, #24
25b08                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
25b08                 | ' long[base2+28]:=$40000000    
25b08                 | ' long[base2+32]:=0    
25b08                 | ' long[base2+36]:=0    
25b08                 | ' long[base2+40]:=0    
25b08                 | ' long[base2+44]:=0    
25b08                 | ' long[base2+8]:=sample+$C0000000     
25b08     00 00 60 FF 
25b0c     00 14 06 F1 | 	add	arg02, ##-1073741824
25b10     18 12 62 FD | 	getqx	arg01
25b14     09 13 82 F6 | 	negc	arg01, arg01
25b18     0C 13 52 FC | 	wrword	arg01, arg04
25b1c     00 13 02 F6 | 	mov	arg01, _var01
25b20     1A 12 06 F1 | 	add	arg01, #26
25b24     09 01 5A FC | 	wrword	#256, arg01
25b28     00 13 02 F6 | 	mov	arg01, _var01
25b2c     1C 12 06 F1 | 	add	arg01, #28
25b30     00 00 A0 FF 
25b34     09 01 68 FC | 	wrlong	##1073741824, arg01
25b38     00 13 02 F6 | 	mov	arg01, _var01
25b3c     20 12 06 F1 | 	add	arg01, #32
25b40     09 01 68 FC | 	wrlong	#0, arg01
25b44     00 13 02 F6 | 	mov	arg01, _var01
25b48     24 12 06 F1 | 	add	arg01, #36
25b4c     09 01 68 FC | 	wrlong	#0, arg01
25b50     00 13 02 F6 | 	mov	arg01, _var01
25b54     28 12 06 F1 | 	add	arg01, #40
25b58     09 01 68 FC | 	wrlong	#0, arg01
25b5c     00 13 02 F6 | 	mov	arg01, _var01
25b60     2C 12 06 F1 | 	add	arg01, #44
25b64     09 01 68 FC | 	wrlong	#0, arg01
25b68     08 00 06 F1 | 	add	_var01, #8
25b6c     00 15 62 FC | 	wrlong	arg02, _var01
25b70                 | _audio096_spin2_play_ret
25b70     2D 00 64 FD | 	ret
25b74                 | 
25b74                 | ' 
25b74                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
25b74                 | _audio096_spin2_play8
25b74                 | ' 
25b74                 | ' base2:=@channel1[0]+64*channel
25b74     0C E4 05 F1 | 	add	objptr, #12
25b78     F2 00 02 F6 | 	mov	_var01, objptr
25b7c     06 12 66 F0 | 	shl	arg01, #6
25b80     09 01 02 F1 | 	add	_var01, arg01
25b84                 | ' long[base2]:=0
25b84     00 01 68 FC | 	wrlong	#0, _var01
25b88                 | ' long[base2+8]:=sample+$40000000 
25b88     00 00 20 FF 
25b8c     00 14 06 F1 | 	add	arg02, ##1073741824
25b90     00 13 02 F6 | 	mov	arg01, _var01
25b94     08 12 06 F1 | 	add	arg01, #8
25b98     09 15 62 FC | 	wrlong	arg02, arg01
25b9c                 | ' if loop>=0
25b9c     00 1C 56 F2 | 	cmps	arg06, #0 wc
25ba0     0C E4 85 F1 | 	sub	objptr, #12
25ba4     1C 00 90 CD |  if_b	jmp	#LR__3020
25ba8                 | '   long[base2+12]:=loop
25ba8     00 15 02 F6 | 	mov	arg02, _var01
25bac     0C 14 06 F1 | 	add	arg02, #12
25bb0     0A 1D 62 FC | 	wrlong	arg06, arg02
25bb4                 | '   long[base2+16]:= len
25bb4     00 1D 02 F6 | 	mov	arg06, _var01
25bb8     10 1C 06 F1 | 	add	arg06, #16
25bbc     0E 1B 62 FC | 	wrlong	arg05, arg06
25bc0     1C 00 90 FD | 	jmp	#LR__3021
25bc4                 | LR__3020
25bc4                 | ' else
25bc4                 | '   long[base2+12]:= len
25bc4     00 1D 02 F6 | 	mov	arg06, _var01
25bc8     0C 1C 06 F1 | 	add	arg06, #12
25bcc     0E 1B 62 FC | 	wrlong	arg05, arg06
25bd0                 | '   long[base2+16]:= len+1
25bd0     01 1A 06 F1 | 	add	arg05, #1
25bd4     00 13 02 F6 | 	mov	arg01, _var01
25bd8     10 12 06 F1 | 	add	arg01, #16
25bdc     09 1B 62 FC | 	wrlong	arg05, arg01
25be0                 | LR__3021
25be0     0B 17 52 F6 | 	abs	arg03, arg03 wc
25be4     0F 1B 80 FF 
25be8     0B 1F 1A FD | 	qdiv	##3546895, arg03
25bec                 | ' word[base2+20]:=vol
25bec     00 17 02 F6 | 	mov	arg03, _var01
25bf0     14 16 06 F1 | 	add	arg03, #20
25bf4     0B 19 52 FC | 	wrword	arg04, arg03
25bf8                 | ' word[base2+24]:= 3546895 /splfreq 
25bf8     00 13 02 F6 | 	mov	arg01, _var01
25bfc     18 12 06 F1 | 	add	arg01, #24
25c00                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
25c00     1A 00 06 F1 | 	add	_var01, #26
25c04     18 18 62 FD | 	getqx	arg04
25c08     0C 19 82 F6 | 	negc	arg04, arg04
25c0c     09 19 52 FC | 	wrword	arg04, arg01
25c10     00 01 5A FC | 	wrword	#256, _var01
25c14                 | _audio096_spin2_play8_ret
25c14     2D 00 64 FD | 	ret
25c18                 | 
25c18                 | ' 'long[base2+28]:=$40000000
25c18                 | ' 
25c18                 | '     
25c18                 | ' pub stop(channel) 'silence it
25c18                 | _audio096_spin2_stop
25c18                 | ' 
25c18                 | ' word[@channel1[0]+64*channel+20]:=0
25c18     0C E4 05 F1 | 	add	objptr, #12
25c1c     F2 00 02 F6 | 	mov	_var01, objptr
25c20     09 03 02 F6 | 	mov	_var02, arg01
25c24     06 02 66 F0 | 	shl	_var02, #6
25c28     01 01 02 F1 | 	add	_var01, _var02
25c2c     14 00 06 F1 | 	add	_var01, #20
25c30     00 01 58 FC | 	wrword	#0, _var01
25c34                 | ' word[@channel1[0]+64*channel+20]:=0
25c34     F2 00 02 F6 | 	mov	_var01, objptr
25c38     06 12 66 F0 | 	shl	arg01, #6
25c3c     09 01 02 F1 | 	add	_var01, arg01
25c40     14 00 06 F1 | 	add	_var01, #20
25c44     00 01 58 FC | 	wrword	#0, _var01
25c48     0C E4 85 F1 | 	sub	objptr, #12
25c4c                 | _audio096_spin2_stop_ret
25c4c     2D 00 64 FD | 	ret
25c50                 | hubexit
25c50     81 00 80 FD | 	jmp	#cogexit
25c54                 | 
25c54                 | __system___setbaud
25c54     14 88 06 FB | 	rdlong	muldiva_, #20
25c58     09 8B 02 F6 | 	mov	muldivb_, arg01
25c5c     BA 00 A0 FD | 	call	#divide_
25c60     97 06 48 FB | 	callpa	#(@LR__3031-@LR__3030)>>2,fcache_load_ptr_
25c64                 | LR__3030
25c64     3E FA 9D FA | 	rdpin	result1, #62 wc
25c68     FE FC A1 F1 | 	subx	result2, result2
25c6c     F4 FF 9F CD |  if_b	jmp	#LR__3030
25c70                 | LR__3031
25c70     40 7C 64 FD | 	dirl	#62
25c74     40 7E 64 FD | 	dirl	#63
25c78     F3 8A 62 FC | 	wrlong	muldivb_, ptr___system__dat__
25c7c     10 8A 66 F0 | 	shl	muldivb_, #16
25c80     07 14 06 F6 | 	mov	arg02, #7
25c84     45 15 02 F1 | 	add	arg02, muldivb_
25c88     3E F8 0C FC | 	wrpin	#124, #62
25c8c     3E 14 16 FC | 	wxpin	arg02, #62
25c90     3F 7C 0C FC | 	wrpin	#62, #63
25c94     14 14 06 F1 | 	add	arg02, #20
25c98     3F 14 16 FC | 	wxpin	arg02, #63
25c9c     41 7C 64 FD | 	dirh	#62
25ca0     41 7E 64 FD | 	dirh	#63
25ca4                 | __system___setbaud_ret
25ca4     2D 00 64 FD | 	ret
25ca8                 | 
25ca8                 | __system___txraw
25ca8     01 4A 05 F6 | 	mov	COUNT_, #1
25cac     A8 00 A0 FD | 	call	#pushregs_
25cb0     09 27 02 F6 | 	mov	local01, arg01
25cb4     97 06 48 FB | 	callpa	#(@LR__3041-@LR__3040)>>2,fcache_load_ptr_
25cb8                 | LR__3040
25cb8     3E FA 9D FA | 	rdpin	result1, #62 wc
25cbc     FE FC A1 F1 | 	subx	result2, result2
25cc0     F4 FF 9F CD |  if_b	jmp	#LR__3040
25cc4                 | LR__3041
25cc4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
25cc8     C2 01 00 AF 
25ccc     00 12 06 A6 |  if_e	mov	arg01, ##230400
25cd0     80 FF BF AD |  if_e	call	#__system___setbaud
25cd4     58 7C 64 FD | 	drvl	#62
25cd8     3E 26 26 FC | 	wypin	local01, #62
25cdc     01 FA 05 F6 | 	mov	result1, #1
25ce0     A7 F0 03 F6 | 	mov	ptra, fp
25ce4     B2 00 A0 FD | 	call	#popregs_
25ce8                 | __system___txraw_ret
25ce8     2D 00 64 FD | 	ret
25cec                 | 
25cec                 | __system___rxraw
25cec     0D 4A 05 F6 | 	mov	COUNT_, #13
25cf0     A8 00 A0 FD | 	call	#pushregs_
25cf4     09 27 02 F6 | 	mov	local01, arg01
25cf8     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
25cfc     C2 01 00 AF 
25d00     00 12 06 A6 |  if_e	mov	arg01, ##230400
25d04     4C FF BF AD |  if_e	call	#__system___setbaud
25d08     00 26 0E F2 | 	cmp	local01, #0 wz
25d0c     20 00 90 AD |  if_e	jmp	#LR__3050
25d10     14 2A 06 FB | 	rdlong	local03, #20
25d14     0A 2A 46 F0 | 	shr	local03, #10
25d18     15 27 02 FD | 	qmul	local01, local03
25d1c     1A FA 61 FD | 	getct	result1
25d20     18 2C 62 FD | 	getqx	local04
25d24     16 FB 01 F1 | 	add	result1, local04
25d28     FD 2E 02 F6 | 	mov	local05, result1
25d2c     04 00 90 FD | 	jmp	#LR__3051
25d30                 | LR__3050
25d30     00 2E 06 F6 | 	mov	local05, #0
25d34                 | LR__3051
25d34     01 30 66 F6 | 	neg	local06, #1
25d38     3F 32 06 F6 | 	mov	local07, #63
25d3c     00 34 06 F6 | 	mov	local08, #0
25d40     04 E6 05 F1 | 	add	ptr___system__dat__, #4
25d44     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
25d48     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
25d4c                 | LR__3052
25d4c     08 36 16 F4 | 	testb	local09, #8 wc
25d50     09 36 76 F4 | 	testbn	local09, #9 andc
25d54     0A 36 46 F0 | 	shr	local09, #10
25d58     01 34 06 C6 |  if_b	mov	local08, #1
25d5c     40 7E 6C 3D |  if_ae	testp	#63 wz
25d60     01 34 06 26 |  if_nc_and_z	mov	local08, #1
25d64     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
25d68     04 36 46 20 |  if_nc_and_z	shr	local09, #4
25d6c                 | LR__3053
25d6c     00 28 06 F6 | 	mov	local02, #0
25d70     00 34 0E F2 | 	cmp	local08, #0 wz
25d74     01 28 66 56 |  if_ne	neg	local02, #1
25d78     00 38 06 F6 | 	mov	local10, #0
25d7c     00 2A 06 F6 | 	mov	local03, #0
25d80     00 26 0E F2 | 	cmp	local01, #0 wz
25d84     01 2A 66 56 |  if_ne	neg	local03, #1
25d88     00 2C 06 F6 | 	mov	local04, #0
25d8c     00 3A 06 F6 | 	mov	local11, #0
25d90     17 3D 02 F6 | 	mov	local12, local05
25d94     1A FA 61 FD | 	getct	result1
25d98     FD 3E 02 F6 | 	mov	local13, result1
25d9c     1F 3D 82 F1 | 	sub	local12, local13
25da0     00 3C 56 F2 | 	cmps	local12, #0 wc
25da4     00 3A 26 C6 |  if_b	not	local11, #0
25da8     00 3A 0E F2 | 	cmp	local11, #0 wz
25dac     00 2C 26 56 |  if_ne	not	local04, #0
25db0     16 2B CA F7 | 	test	local03, local04 wz
25db4     00 38 26 56 |  if_ne	not	local10, #0
25db8     1C 29 4A F5 | 	or	local02, local10 wz
25dbc     8C FF 9F AD |  if_e	jmp	#LR__3052
25dc0     00 34 0E F2 | 	cmp	local08, #0 wz
25dc4     1B 31 02 56 |  if_ne	mov	local06, local09
25dc8     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
25dcc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
25dd0     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
25dd4     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
25dd8     18 FB 01 F6 | 	mov	result1, local06
25ddc     A7 F0 03 F6 | 	mov	ptra, fp
25de0     B2 00 A0 FD | 	call	#popregs_
25de4                 | __system___rxraw_ret
25de4     2D 00 64 FD | 	ret
25de8                 | 
25de8                 | __system___getus
25de8     1A FC 71 FD | 	getct	result2 wc
25dec     1A 00 62 FD | 	getct	_var01
25df0     10 E6 05 F1 | 	add	ptr___system__dat__, #16
25df4     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
25df8     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
25dfc     20 00 90 5D |  if_ne	jmp	#LR__3060
25e00     14 02 06 FB | 	rdlong	_var02, #20
25e04     A1 07 00 FF 
25e08     40 02 16 FD | 	qdiv	_var02, ##1000000
25e0c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
25e10     18 FA 61 FD | 	getqx	result1
25e14     FD 02 02 F6 | 	mov	_var02, result1
25e18     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
25e1c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
25e20                 | LR__3060
25e20     01 FD 11 FD | 	qdiv	result2, _var02
25e24     19 FC 61 FD | 	getqy	result2
25e28     28 FC 61 FD | 	setq	result2
25e2c     01 01 12 FD | 	qdiv	_var01, _var02
25e30     18 FA 61 FD | 	getqx	result1
25e34                 | __system___getus_ret
25e34     2D 00 64 FD | 	ret
25e38                 | 
25e38                 | __system____builtin_memmove
25e38     09 01 02 F6 | 	mov	_var01, arg01
25e3c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
25e40     10 00 90 CD |  if_b	jmp	#LR__3070
25e44     0A 03 02 F6 | 	mov	_var02, arg02
25e48     0B 03 02 F1 | 	add	_var02, arg03
25e4c     01 13 52 F2 | 	cmps	arg01, _var02 wc
25e50     48 00 90 CD |  if_b	jmp	#LR__3076
25e54                 | LR__3070
25e54     0B 05 02 F6 | 	mov	_var03, arg03
25e58     02 04 4E F0 | 	shr	_var03, #2 wz
25e5c     18 00 90 AD |  if_e	jmp	#LR__3075
25e60     97 0A 48 FB | 	callpa	#(@LR__3073-@LR__3071)>>2,fcache_load_ptr_
25e64                 | LR__3071
25e64     02 09 D8 FC | 	rep	@LR__3074, _var03
25e68                 | LR__3072
25e68     0A 05 02 FB | 	rdlong	_var03, arg02
25e6c     09 05 62 FC | 	wrlong	_var03, arg01
25e70     04 12 06 F1 | 	add	arg01, #4
25e74     04 14 06 F1 | 	add	arg02, #4
25e78                 | LR__3073
25e78                 | LR__3074
25e78                 | LR__3075
25e78     02 16 CE F7 | 	test	arg03, #2 wz
25e7c     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
25e80     09 03 52 5C |  if_ne	wrword	_var02, arg01
25e84     02 12 06 51 |  if_ne	add	arg01, #2
25e88     02 14 06 51 |  if_ne	add	arg02, #2
25e8c     01 16 CE F7 | 	test	arg03, #1 wz
25e90     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
25e94     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
25e98     28 00 90 FD | 	jmp	#LR__3082
25e9c                 | LR__3076
25e9c     0B 13 02 F1 | 	add	arg01, arg03
25ea0     0B 15 02 F1 | 	add	arg02, arg03
25ea4     0B 07 0A F6 | 	mov	_var04, arg03 wz
25ea8     18 00 90 AD |  if_e	jmp	#LR__3081
25eac     97 0A 48 FB | 	callpa	#(@LR__3079-@LR__3077)>>2,fcache_load_ptr_
25eb0                 | LR__3077
25eb0     03 09 D8 FC | 	rep	@LR__3080, _var04
25eb4                 | LR__3078
25eb4     01 12 86 F1 | 	sub	arg01, #1
25eb8     01 14 86 F1 | 	sub	arg02, #1
25ebc     0A 03 C2 FA | 	rdbyte	_var02, arg02
25ec0     09 03 42 FC | 	wrbyte	_var02, arg01
25ec4                 | LR__3079
25ec4                 | LR__3080
25ec4                 | LR__3081
25ec4                 | LR__3082
25ec4     00 FB 01 F6 | 	mov	result1, _var01
25ec8                 | __system____builtin_memmove_ret
25ec8     2D 00 64 FD | 	ret
25ecc                 | 
25ecc                 | __system____builtin_strcpy
25ecc     09 01 02 F6 | 	mov	_var01, arg01
25ed0     97 0A 48 FB | 	callpa	#(@LR__3091-@LR__3090)>>2,fcache_load_ptr_
25ed4                 | LR__3090
25ed4     0A FB C9 FA | 	rdbyte	result1, arg02 wz
25ed8     09 FB 41 FC | 	wrbyte	result1, arg01
25edc     01 14 06 F1 | 	add	arg02, #1
25ee0     01 12 06 F1 | 	add	arg01, #1
25ee4     EC FF 9F 5D |  if_ne	jmp	#LR__3090
25ee8                 | LR__3091
25ee8     00 FB 01 F6 | 	mov	result1, _var01
25eec                 | __system____builtin_strcpy_ret
25eec     2D 00 64 FD | 	ret
25ef0                 | 
25ef0                 | __system____topofstack
25ef0     00 4A 05 F6 | 	mov	COUNT_, #0
25ef4     A8 00 A0 FD | 	call	#pushregs_
25ef8     08 F0 07 F1 | 	add	ptra, #8
25efc     04 4E 05 F1 | 	add	fp, #4
25f00     A7 12 62 FC | 	wrlong	arg01, fp
25f04     A7 FA 01 F6 | 	mov	result1, fp
25f08     04 4E 85 F1 | 	sub	fp, #4
25f0c     A7 F0 03 F6 | 	mov	ptra, fp
25f10     B2 00 A0 FD | 	call	#popregs_
25f14                 | __system____topofstack_ret
25f14     2D 00 64 FD | 	ret
25f18                 | 
25f18                 | __system___lockmem
25f18     00 FA 05 F6 | 	mov	result1, #0
25f1c     01 FA 61 FD | 	cogid	result1
25f20     00 FB 05 F1 | 	add	result1, #256
25f24                 | LR__3100
25f24     09 01 0A FB | 	rdlong	_var01, arg01 wz
25f28     09 FB 61 AC |  if_e	wrlong	result1, arg01
25f2c     09 01 02 AB |  if_e	rdlong	_var01, arg01
25f30     09 01 02 AB |  if_e	rdlong	_var01, arg01
25f34     FD 00 0A F2 | 	cmp	_var01, result1 wz
25f38     E8 FF 9F 5D |  if_ne	jmp	#LR__3100
25f3c                 | __system___lockmem_ret
25f3c     2D 00 64 FD | 	ret
25f40                 | 
25f40                 | __system___string_cmp
25f40     97 14 48 FB | 	callpa	#(@LR__3111-@LR__3110)>>2,fcache_load_ptr_
25f44                 | LR__3110
25f44     09 01 C2 FA | 	rdbyte	_var01, arg01
25f48     0A 03 C2 FA | 	rdbyte	_var02, arg02
25f4c     00 05 02 F6 | 	mov	_var03, _var01
25f50     01 05 8A F1 | 	sub	_var03, _var02 wz
25f54     01 12 06 F1 | 	add	arg01, #1
25f58     01 14 06 F1 | 	add	arg02, #1
25f5c     0C 00 90 5D |  if_ne	jmp	#LR__3112
25f60     00 00 0E F2 | 	cmp	_var01, #0 wz
25f64     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
25f68     D8 FF 9F 5D |  if_ne	jmp	#LR__3110
25f6c                 | LR__3111
25f6c                 | LR__3112
25f6c     02 FB 01 F6 | 	mov	result1, _var03
25f70                 | __system___string_cmp_ret
25f70     2D 00 64 FD | 	ret
25f74                 | 
25f74                 | __system___string_concat
25f74     05 4A 05 F6 | 	mov	COUNT_, #5
25f78     A8 00 A0 FD | 	call	#pushregs_
25f7c     09 27 02 F6 | 	mov	local01, arg01
25f80     0A 29 02 F6 | 	mov	local02, arg02
25f84     13 13 02 F6 | 	mov	arg01, local01
25f88     09 2B 02 F6 | 	mov	local03, arg01
25f8c     97 06 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
25f90                 | LR__3120
25f90     15 FB C9 FA | 	rdbyte	result1, local03 wz
25f94     01 2A 06 51 |  if_ne	add	local03, #1
25f98     F4 FF 9F 5D |  if_ne	jmp	#LR__3120
25f9c                 | LR__3121
25f9c     09 2B 82 F1 | 	sub	local03, arg01
25fa0     15 2D 02 F6 | 	mov	local04, local03
25fa4     14 13 02 F6 | 	mov	arg01, local02
25fa8     09 2B 02 F6 | 	mov	local03, arg01
25fac     97 06 48 FB | 	callpa	#(@LR__3123-@LR__3122)>>2,fcache_load_ptr_
25fb0                 | LR__3122
25fb0     15 FB C9 FA | 	rdbyte	result1, local03 wz
25fb4     01 2A 06 51 |  if_ne	add	local03, #1
25fb8     F4 FF 9F 5D |  if_ne	jmp	#LR__3122
25fbc                 | LR__3123
25fbc     09 2B 82 F1 | 	sub	local03, arg01
25fc0     16 13 02 F6 | 	mov	arg01, local04
25fc4     15 13 02 F1 | 	add	arg01, local03
25fc8     01 12 06 F1 | 	add	arg01, #1
25fcc     E8 40 B0 FD | 	call	#__system___gc_alloc_managed
25fd0     FD 2E 0A F6 | 	mov	local05, result1 wz
25fd4     28 00 90 AD |  if_e	jmp	#LR__3124
25fd8     17 13 02 F6 | 	mov	arg01, local05
25fdc     13 15 02 F6 | 	mov	arg02, local01
25fe0     16 17 02 F6 | 	mov	arg03, local04
25fe4     50 FE BF FD | 	call	#__system____builtin_memmove
25fe8     17 13 02 F6 | 	mov	arg01, local05
25fec     16 13 02 F1 | 	add	arg01, local04
25ff0     01 2A 06 F1 | 	add	local03, #1
25ff4     14 15 02 F6 | 	mov	arg02, local02
25ff8     15 17 02 F6 | 	mov	arg03, local03
25ffc     38 FE BF FD | 	call	#__system____builtin_memmove
26000                 | LR__3124
26000     17 FB 01 F6 | 	mov	result1, local05
26004     A7 F0 03 F6 | 	mov	ptra, fp
26008     B2 00 A0 FD | 	call	#popregs_
2600c                 | __system___string_concat_ret
2600c     2D 00 64 FD | 	ret
26010                 | 
26010                 | __system___tx
26010     02 4A 05 F6 | 	mov	COUNT_, #2
26014     A8 00 A0 FD | 	call	#pushregs_
26018     09 27 02 F6 | 	mov	local01, arg01
2601c     0A 26 0E F2 | 	cmp	local01, #10 wz
26020     18 00 90 5D |  if_ne	jmp	#LR__3130
26024     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26028     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
2602c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26030     02 28 CE F7 | 	test	local02, #2 wz
26034     0D 12 06 56 |  if_ne	mov	arg01, #13
26038     6C FC BF 5D |  if_ne	call	#__system___txraw
2603c                 | LR__3130
2603c     13 13 02 F6 | 	mov	arg01, local01
26040     64 FC BF FD | 	call	#__system___txraw
26044     A7 F0 03 F6 | 	mov	ptra, fp
26048     B2 00 A0 FD | 	call	#popregs_
2604c                 | __system___tx_ret
2604c     2D 00 64 FD | 	ret
26050                 | 
26050                 | __system___rx
26050     01 4A 05 F6 | 	mov	COUNT_, #1
26054     A8 00 A0 FD | 	call	#pushregs_
26058                 | LR__3140
26058     00 12 06 F6 | 	mov	arg01, #0
2605c     8C FC BF FD | 	call	#__system___rxraw
26060     FD 26 02 F6 | 	mov	local01, result1
26064     FF FF 7F FF 
26068     FF 27 0E F2 | 	cmp	local01, ##-1 wz
2606c     E8 FF 9F AD |  if_e	jmp	#LR__3140
26070     0D 26 0E F2 | 	cmp	local01, #13 wz
26074     14 00 90 5D |  if_ne	jmp	#LR__3141
26078     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2607c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
26080     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26084     02 FA CD F7 | 	test	result1, #2 wz
26088     0A 26 06 56 |  if_ne	mov	local01, #10
2608c                 | LR__3141
2608c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26090     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
26094     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26098     01 12 CE F7 | 	test	arg01, #1 wz
2609c     1C 00 90 AD |  if_e	jmp	#LR__3144
260a0     7F 26 0E F2 | 	cmp	local01, #127 wz
260a4     0C 00 90 5D |  if_ne	jmp	#LR__3142
260a8     08 12 06 F6 | 	mov	arg01, #8
260ac     60 FF BF FD | 	call	#__system___tx
260b0     08 00 90 FD | 	jmp	#LR__3143
260b4                 | LR__3142
260b4     13 13 02 F6 | 	mov	arg01, local01
260b8     54 FF BF FD | 	call	#__system___tx
260bc                 | LR__3143
260bc                 | LR__3144
260bc     13 FB 01 F6 | 	mov	result1, local01
260c0     A7 F0 03 F6 | 	mov	ptra, fp
260c4     B2 00 A0 FD | 	call	#popregs_
260c8                 | __system___rx_ret
260c8     2D 00 64 FD | 	ret
260cc                 | 
260cc                 | __system___pinwrite
260cc     09 01 02 F6 | 	mov	_var01, arg01
260d0     1F 00 06 F5 | 	and	_var01, #31
260d4     20 12 CE F7 | 	test	arg01, #32 wz
260d8     06 12 46 F0 | 	shr	arg01, #6
260dc     09 13 CA F9 | 	bmask	arg01, arg01
260e0     00 13 62 F0 | 	shl	arg01, _var01
260e4     00 15 62 F0 | 	shl	arg02, _var01
260e8     1C 00 90 AD |  if_e	jmp	#LR__3150
260ec     09 F7 43 F5 | 	or	dirb, arg01
260f0     FD 01 02 F6 | 	mov	_var01, outb
260f4     09 01 22 F5 | 	andn	_var01, arg01
260f8     09 15 02 F5 | 	and	arg02, arg01
260fc     0A 01 42 F5 | 	or	_var01, arg02
26100     00 FB 03 F6 | 	mov	outb, _var01
26104     18 00 90 FD | 	jmp	#LR__3151
26108                 | LR__3150
26108     09 F5 43 F5 | 	or	dira, arg01
2610c     FC 01 02 F6 | 	mov	_var01, outa
26110     09 01 22 F5 | 	andn	_var01, arg01
26114     09 15 02 F5 | 	and	arg02, arg01
26118     0A 01 42 F5 | 	or	_var01, arg02
2611c     00 F9 03 F6 | 	mov	outa, _var01
26120                 | LR__3151
26120                 | __system___pinwrite_ret
26120     2D 00 64 FD | 	ret
26124                 | 
26124                 | __system___basic_read_line
26124     06 4A 05 F6 | 	mov	COUNT_, #6
26128     A8 00 A0 FD | 	call	#pushregs_
2612c     09 27 02 F6 | 	mov	local01, arg01
26130     00 28 06 F6 | 	mov	local02, #0
26134     18 2A 06 F6 | 	mov	local03, #24
26138     00 2C 06 F6 | 	mov	local04, #0
2613c     18 12 06 F6 | 	mov	arg01, #24
26140     74 3F B0 FD | 	call	#__system___gc_alloc_managed
26144     FD 2E 0A F6 | 	mov	local05, result1 wz
26148     17 FB 01 A6 |  if_e	mov	result1, local05
2614c     B0 00 90 AD |  if_e	jmp	#LR__3163
26150                 | LR__3160
26150     13 13 02 F6 | 	mov	arg01, local01
26154     78 0B B0 FD | 	call	#__system___basic_get_char
26158     FD 30 02 F6 | 	mov	local06, result1
2615c     01 30 56 F2 | 	cmps	local06, #1 wc
26160     8C 00 90 CD |  if_b	jmp	#LR__3162
26164     0A 30 0E F2 | 	cmp	local06, #10 wz
26168     10 00 90 5D |  if_ne	jmp	#LR__3161
2616c     00 2C 0E F2 | 	cmp	local04, #0 wz
26170     01 28 56 52 |  if_ne	cmps	local02, #1 wc
26174     01 28 86 11 |  if_a	sub	local02, #1
26178     74 00 90 FD | 	jmp	#LR__3162
2617c                 | LR__3161
2617c     0D 30 0E F2 | 	cmp	local06, #13 wz
26180     01 2C 06 A6 |  if_e	mov	local04, #1
26184     00 2C 06 56 |  if_ne	mov	local04, #0
26188     08 30 0E F2 | 	cmp	local06, #8 wz
2618c     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
26190     01 28 56 A2 |  if_e	cmps	local02, #1 wc
26194     01 28 86 21 |  if_nc_and_z	sub	local02, #1
26198     B4 FF 9F AD |  if_e	jmp	#LR__3160
2619c     17 17 02 F6 | 	mov	arg03, local05
261a0     14 17 02 F1 | 	add	arg03, local02
261a4     0B 31 42 FC | 	wrbyte	local06, arg03
261a8     01 28 06 F1 | 	add	local02, #1
261ac     15 29 0A F2 | 	cmp	local02, local03 wz
261b0     9C FF 9F 5D |  if_ne	jmp	#LR__3160
261b4     15 13 02 F6 | 	mov	arg01, local03
261b8     20 12 06 F1 | 	add	arg01, #32
261bc     F8 3E B0 FD | 	call	#__system___gc_alloc_managed
261c0     FD 30 0A F6 | 	mov	local06, result1 wz
261c4     18 FB 01 A6 |  if_e	mov	result1, local06
261c8     34 00 90 AD |  if_e	jmp	#LR__3163
261cc     18 13 02 F6 | 	mov	arg01, local06
261d0     17 15 02 F6 | 	mov	arg02, local05
261d4     15 17 02 F6 | 	mov	arg03, local03
261d8     5C FC BF FD | 	call	#__system____builtin_memmove
261dc     20 2A 06 F1 | 	add	local03, #32
261e0     17 13 02 F6 | 	mov	arg01, local05
261e4     0C 40 B0 FD | 	call	#__system___gc_free
261e8     18 2F 02 F6 | 	mov	local05, local06
261ec     60 FF 9F FD | 	jmp	#LR__3160
261f0                 | LR__3162
261f0     17 31 02 F6 | 	mov	local06, local05
261f4     14 31 02 F1 | 	add	local06, local02
261f8     18 01 48 FC | 	wrbyte	#0, local06
261fc     17 FB 01 F6 | 	mov	result1, local05
26200                 | LR__3163
26200     A7 F0 03 F6 | 	mov	ptra, fp
26204     B2 00 A0 FD | 	call	#popregs_
26208                 | __system___basic_read_line_ret
26208     2D 00 64 FD | 	ret
2620c                 | 
2620c                 | __system___waitms
2620c     09 01 02 F6 | 	mov	_var01, arg01
26210     1A 02 62 FD | 	getct	_var02
26214     14 04 06 FB | 	rdlong	_var03, #20
26218     97 14 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
2621c                 | LR__3170
2621c     01 00 00 FF 
26220     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
26224     1C 00 90 CD |  if_b	jmp	#LR__3172
26228     02 03 02 F1 | 	add	_var02, _var03
2622c     01 13 02 F6 | 	mov	arg01, _var02
26230     00 12 66 FA | 	addct1	arg01, #0
26234     24 22 60 FD | 	waitct1
26238     01 00 00 FF 
2623c     E8 01 86 F1 | 	sub	_var01, ##1000
26240     D8 FF 9F FD | 	jmp	#LR__3170
26244                 | LR__3171
26244                 | LR__3172
26244     01 00 56 F2 | 	cmps	_var01, #1 wc
26248     28 00 90 CD |  if_b	jmp	#LR__3173
2624c     02 01 02 FD | 	qmul	_var01, _var03
26250     01 00 00 FF 
26254     E8 17 06 F6 | 	mov	arg03, ##1000
26258     19 FA 61 FD | 	getqy	result1
2625c     18 12 62 FD | 	getqx	arg01
26260     28 FA 61 FD | 	setq	result1
26264     0B 13 12 FD | 	qdiv	arg01, arg03
26268     18 12 62 FD | 	getqx	arg01
2626c     01 13 62 FA | 	addct1	arg01, _var02
26270     24 22 60 FD | 	waitct1
26274                 | LR__3173
26274                 | __system___waitms_ret
26274     2D 00 64 FD | 	ret
26278                 | 
26278                 | __system___waitus
26278     09 01 02 F6 | 	mov	_var01, arg01
2627c     1A 02 62 FD | 	getct	_var02
26280     14 04 06 FB | 	rdlong	_var03, #20
26284     97 14 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
26288                 | LR__3180
26288     A1 07 00 FF 
2628c     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
26290     1C 00 90 CD |  if_b	jmp	#LR__3182
26294     02 03 02 F1 | 	add	_var02, _var03
26298     01 13 02 F6 | 	mov	arg01, _var02
2629c     00 12 66 FA | 	addct1	arg01, #0
262a0     24 22 60 FD | 	waitct1
262a4     A1 07 00 FF 
262a8     40 00 86 F1 | 	sub	_var01, ##1000000
262ac     D8 FF 9F FD | 	jmp	#LR__3180
262b0                 | LR__3181
262b0                 | LR__3182
262b0     01 00 56 F2 | 	cmps	_var01, #1 wc
262b4     28 00 90 CD |  if_b	jmp	#LR__3183
262b8     02 01 02 FD | 	qmul	_var01, _var03
262bc     A1 07 00 FF 
262c0     40 16 06 F6 | 	mov	arg03, ##1000000
262c4     19 FA 61 FD | 	getqy	result1
262c8     18 12 62 FD | 	getqx	arg01
262cc     28 FA 61 FD | 	setq	result1
262d0     0B 13 12 FD | 	qdiv	arg01, arg03
262d4     18 FA 61 FD | 	getqx	result1
262d8     FD 02 62 FA | 	addct1	_var02, result1
262dc     24 22 60 FD | 	waitct1
262e0                 | LR__3183
262e0                 | __system___waitus_ret
262e0     2D 00 64 FD | 	ret
262e4                 | 
262e4                 | __system___mount
262e4     0B 4A 05 F6 | 	mov	COUNT_, #11
262e8     A8 00 A0 FD | 	call	#pushregs_
262ec     09 27 02 F6 | 	mov	local01, arg01
262f0     0A 29 0A F6 | 	mov	local02, arg02 wz
262f4     01 2A 66 F6 | 	neg	local03, #1
262f8     01 FA 65 A6 |  if_e	neg	result1, #1
262fc     98 02 90 AD |  if_e	jmp	#LR__3205
26300     13 FB C1 FA | 	rdbyte	result1, local01
26304     2F FA 0D F2 | 	cmp	result1, #47 wz
26308     28 00 90 5D |  if_ne	jmp	#LR__3192
2630c     13 13 02 F6 | 	mov	arg01, local01
26310     09 2D 02 F6 | 	mov	local04, arg01
26314     97 06 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
26318                 | LR__3190
26318     16 FB C9 FA | 	rdbyte	result1, local04 wz
2631c     01 2C 06 51 |  if_ne	add	local04, #1
26320     F4 FF 9F 5D |  if_ne	jmp	#LR__3190
26324                 | LR__3191
26324     09 2D 82 F1 | 	sub	local04, arg01
26328     16 FB 01 F6 | 	mov	result1, local04
2632c     10 FA 55 F2 | 	cmps	result1, #16 wc
26330     14 00 90 CD |  if_b	jmp	#LR__3193
26334                 | LR__3192
26334     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26338     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2633c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26340     01 FA 65 F6 | 	neg	result1, #1
26344     50 02 90 FD | 	jmp	#LR__3205
26348                 | LR__3193
26348     00 2E 06 F6 | 	mov	local05, #0
2634c                 | LR__3194
2634c     04 2E 56 F2 | 	cmps	local05, #4 wc
26350     B0 00 90 3D |  if_ae	jmp	#LR__3199
26354     17 13 02 F6 | 	mov	arg01, local05
26358     02 12 66 F0 | 	shl	arg01, #2
2635c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26360     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
26364     09 FB 09 FB | 	rdlong	result1, arg01 wz
26368     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2636c     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
26370     17 2B 02 86 |  if_c_and_z	mov	local03, local05
26374     84 00 90 8D |  if_c_and_z	jmp	#LR__3198
26378     17 13 02 F6 | 	mov	arg01, local05
2637c     02 12 66 F0 | 	shl	arg01, #2
26380     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26384     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
26388     09 13 02 FB | 	rdlong	arg01, arg01
2638c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26390     09 2D 02 F6 | 	mov	local04, arg01
26394     97 06 48 FB | 	callpa	#(@LR__3196-@LR__3195)>>2,fcache_load_ptr_
26398                 | LR__3195
26398     16 FB C9 FA | 	rdbyte	result1, local04 wz
2639c     01 2C 06 51 |  if_ne	add	local04, #1
263a0     F4 FF 9F 5D |  if_ne	jmp	#LR__3195
263a4                 | LR__3196
263a4     09 2D 82 F1 | 	sub	local04, arg01
263a8     16 31 02 F6 | 	mov	local06, local04
263ac     18 13 02 F6 | 	mov	arg01, local06
263b0     13 13 02 F1 | 	add	arg01, local01
263b4     09 FB C1 FA | 	rdbyte	result1, arg01
263b8     2F FA 0D F2 | 	cmp	result1, #47 wz
263bc     18 33 02 56 |  if_ne	mov	local07, local06
263c0     13 33 02 51 |  if_ne	add	local07, local01
263c4     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
263c8     30 00 90 5D |  if_ne	jmp	#LR__3197
263cc     17 17 02 F6 | 	mov	arg03, local05
263d0     02 16 66 F0 | 	shl	arg03, #2
263d4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
263d8     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
263dc     0B 15 02 FB | 	rdlong	arg02, arg03
263e0     13 13 02 F6 | 	mov	arg01, local01
263e4     18 17 02 F6 | 	mov	arg03, local06
263e8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
263ec     48 51 B0 FD | 	call	#__system__strncmp
263f0     00 FA 0D F2 | 	cmp	result1, #0 wz
263f4     17 2B 02 A6 |  if_e	mov	local03, local05
263f8     08 00 90 AD |  if_e	jmp	#LR__3199
263fc                 | LR__3197
263fc                 | LR__3198
263fc     01 2E 06 F1 | 	add	local05, #1
26400     48 FF 9F FD | 	jmp	#LR__3194
26404                 | LR__3199
26404     FF FF 7F FF 
26408     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
2640c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26410     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
26414     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26418     01 FA 65 A6 |  if_e	neg	result1, #1
2641c     78 01 90 AD |  if_e	jmp	#LR__3205
26420     15 2F 02 F6 | 	mov	local05, local03
26424     17 33 02 F6 | 	mov	local07, local05
26428     02 32 66 F0 | 	shl	local07, #2
2642c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
26430     F3 32 02 F1 | 	add	local07, ptr___system__dat__
26434     19 31 0A FB | 	rdlong	local06, local07 wz
26438     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2643c     58 00 90 AD |  if_e	jmp	#LR__3200
26440     4C 30 06 F1 | 	add	local06, #76
26444     18 33 0A FB | 	rdlong	local07, local06 wz
26448     4C 30 86 F1 | 	sub	local06, #76
2644c     48 00 90 AD |  if_e	jmp	#LR__3200
26450     4C 30 06 F1 | 	add	local06, #76
26454     18 33 02 FB | 	rdlong	local07, local06
26458     19 2B 02 F6 | 	mov	local03, local07
2645c     13 32 46 F7 | 	zerox	local07, #19
26460     14 2A 46 F0 | 	shr	local03, #20
26464     02 2A 66 F0 | 	shl	local03, #2
26468     ED 2A 02 F1 | 	add	local03, __methods__
2646c     15 2B 02 FB | 	rdlong	local03, local03
26470     17 31 02 F6 | 	mov	local06, local05
26474     02 30 66 F0 | 	shl	local06, #2
26478     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2647c     F3 30 02 F1 | 	add	local06, ptr___system__dat__
26480     18 13 02 FB | 	rdlong	arg01, local06
26484     F2 30 02 F6 | 	mov	local06, objptr
26488     19 E5 01 F6 | 	mov	objptr, local07
2648c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26490     2D 2A 62 FD | 	call	local03
26494     18 E5 01 F6 | 	mov	objptr, local06
26498                 | LR__3200
26498     17 35 02 F6 | 	mov	local08, local05
2649c     02 34 66 F0 | 	shl	local08, #2
264a0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
264a4     F3 34 02 F1 | 	add	local08, ptr___system__dat__
264a8     1A 29 62 FC | 	wrlong	local02, local08
264ac     00 28 0E F2 | 	cmp	local02, #0 wz
264b0     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
264b4     18 00 90 5D |  if_ne	jmp	#LR__3201
264b8     02 2E 66 F0 | 	shl	local05, #2
264bc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
264c0     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
264c4     17 01 68 FC | 	wrlong	#0, local05
264c8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
264cc     C4 00 90 FD | 	jmp	#LR__3204
264d0                 | LR__3201
264d0     17 37 02 F6 | 	mov	local09, local05
264d4     04 36 66 F0 | 	shl	local09, #4
264d8     24 E6 05 F1 | 	add	ptr___system__dat__, #36
264dc     F3 36 02 F1 | 	add	local09, ptr___system__dat__
264e0     1B 13 02 F6 | 	mov	arg01, local09
264e4     13 15 02 F6 | 	mov	arg02, local01
264e8     10 16 06 F6 | 	mov	arg03, #16
264ec     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
264f0     98 4F B0 FD | 	call	#__system__strncpy
264f4     48 28 06 F1 | 	add	local02, #72
264f8     14 35 0A FB | 	rdlong	local08, local02 wz
264fc     48 28 86 F1 | 	sub	local02, #72
26500     7C 00 90 AD |  if_e	jmp	#LR__3203
26504     48 28 06 F1 | 	add	local02, #72
26508     14 35 02 FB | 	rdlong	local08, local02
2650c     1A 39 02 F6 | 	mov	local10, local08
26510     13 34 46 F7 | 	zerox	local08, #19
26514     14 38 46 F0 | 	shr	local10, #20
26518     02 38 66 F0 | 	shl	local10, #2
2651c     ED 38 02 F1 | 	add	local10, __methods__
26520     1C 39 02 FB | 	rdlong	local10, local10
26524     1B 13 02 F6 | 	mov	arg01, local09
26528     F2 3A 02 F6 | 	mov	local11, objptr
2652c     1A E5 01 F6 | 	mov	objptr, local08
26530     2D 38 62 FD | 	call	local10
26534     1D E5 01 F6 | 	mov	objptr, local11
26538     FD 12 0A F6 | 	mov	arg01, result1 wz
2653c     40 00 90 AD |  if_e	jmp	#LR__3202
26540     17 35 02 F6 | 	mov	local08, local05
26544     02 34 66 F0 | 	shl	local08, #2
26548     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2654c     F3 34 02 F1 | 	add	local08, ptr___system__dat__
26550     1A 01 68 FC | 	wrlong	#0, local08
26554     02 2E 66 F0 | 	shl	local05, #2
26558     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
2655c     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
26560     17 01 68 FC | 	wrlong	#0, local05
26564     09 13 6A F6 | 	neg	arg01, arg01 wz
26568     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
2656c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26570     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26574     01 FA 65 56 |  if_ne	neg	result1, #1
26578     00 FA 05 A6 |  if_e	mov	result1, #0
2657c     18 00 90 FD | 	jmp	#LR__3205
26580                 | LR__3202
26580                 | LR__3203
26580     02 2E 66 F0 | 	shl	local05, #2
26584     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26588     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
2658c     17 37 62 FC | 	wrlong	local09, local05
26590     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26594                 | LR__3204
26594     00 FA 05 F6 | 	mov	result1, #0
26598                 | LR__3205
26598     A7 F0 03 F6 | 	mov	ptra, fp
2659c     B2 00 A0 FD | 	call	#popregs_
265a0                 | __system___mount_ret
265a0     2D 00 64 FD | 	ret
265a4                 | 
265a4                 | __system___chdir
265a4     00 4A 05 F6 | 	mov	COUNT_, #0
265a8     A8 00 A0 FD | 	call	#pushregs_
265ac     40 F0 07 F1 | 	add	ptra, #64
265b0     04 4E 05 F1 | 	add	fp, #4
265b4     A7 12 62 FC | 	wrlong	arg01, fp
265b8     04 4E 05 F1 | 	add	fp, #4
265bc     A7 14 02 F6 | 	mov	arg02, fp
265c0     08 4E 85 F1 | 	sub	fp, #8
265c4     68 4B B0 FD | 	call	#__system__stat
265c8     3C 4E 05 F1 | 	add	fp, #60
265cc     A7 FA 61 FC | 	wrlong	result1, fp
265d0     3C 4E 85 F1 | 	sub	fp, #60
265d4     00 FA 0D F2 | 	cmp	result1, #0 wz
265d8     3C 4E 05 51 |  if_ne	add	fp, #60
265dc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
265e0     3C 4E 85 51 |  if_ne	sub	fp, #60
265e4     BC 00 90 5D |  if_ne	jmp	#LR__3212
265e8     10 4E 05 F1 | 	add	fp, #16
265ec     A7 12 02 FB | 	rdlong	arg01, fp
265f0     10 4E 85 F1 | 	sub	fp, #16
265f4     78 00 00 FF 
265f8     00 12 06 F5 | 	and	arg01, ##61440
265fc     08 00 00 FF 
26600     00 12 0E F2 | 	cmp	arg01, ##4096 wz
26604     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
26608     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
2660c     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
26610     01 FA 65 56 |  if_ne	neg	result1, #1
26614     8C 00 90 5D |  if_ne	jmp	#LR__3212
26618     04 4E 05 F1 | 	add	fp, #4
2661c     A7 16 02 FB | 	rdlong	arg03, fp
26620     04 4E 85 F1 | 	sub	fp, #4
26624     0B 17 C2 FA | 	rdbyte	arg03, arg03
26628     2F 16 0E F2 | 	cmp	arg03, #47 wz
2662c     24 00 90 5D |  if_ne	jmp	#LR__3210
26630     84 E6 05 F1 | 	add	ptr___system__dat__, #132
26634     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
26638     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2663c     04 4E 05 F1 | 	add	fp, #4
26640     A7 14 02 FB | 	rdlong	arg02, fp
26644     04 4E 85 F1 | 	sub	fp, #4
26648     00 17 06 F6 | 	mov	arg03, #256
2664c     3C 4E B0 FD | 	call	#__system__strncpy
26650     4C 00 90 FD | 	jmp	#LR__3211
26654                 | LR__3210
26654     84 E7 05 F1 | 	add	ptr___system__dat__, #388
26658     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2665c     38 4E 05 F1 | 	add	fp, #56
26660     A7 12 62 FC | 	wrlong	arg01, fp
26664     38 4E 85 F1 | 	sub	fp, #56
26668     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
2666c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
26670     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
26674     00 17 06 F6 | 	mov	arg03, #256
26678     10 4E B0 FD | 	call	#__system__strncpy
2667c     38 4E 05 F1 | 	add	fp, #56
26680     A7 12 02 FB | 	rdlong	arg01, fp
26684     34 4E 85 F1 | 	sub	fp, #52
26688     A7 14 02 FB | 	rdlong	arg02, fp
2668c     04 4E 85 F1 | 	sub	fp, #4
26690     84 E6 05 F1 | 	add	ptr___system__dat__, #132
26694     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
26698     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2669c     10 00 B0 FD | 	call	#__system____getvfsforfile
266a0                 | LR__3211
266a0     00 FA 05 F6 | 	mov	result1, #0
266a4                 | LR__3212
266a4     A7 F0 03 F6 | 	mov	ptra, fp
266a8     B2 00 A0 FD | 	call	#popregs_
266ac                 | __system___chdir_ret
266ac     2D 00 64 FD | 	ret
266b0                 | 
266b0                 | __system____getvfsforfile
266b0     0E 4A 05 F6 | 	mov	COUNT_, #14
266b4     A8 00 A0 FD | 	call	#pushregs_
266b8     09 27 02 F6 | 	mov	local01, arg01
266bc     0A 29 02 F6 | 	mov	local02, arg02
266c0     0B 2B 02 F6 | 	mov	local03, arg03
266c4     97 10 48 FB | 	callpa	#(@LR__3221-@LR__3220)>>2,fcache_load_ptr_
266c8                 | LR__3220
266c8     14 FB C1 FA | 	rdbyte	result1, local02
266cc     2F FA 0D F2 | 	cmp	result1, #47 wz
266d0     01 28 06 A1 |  if_e	add	local02, #1
266d4     14 2D C2 AA |  if_e	rdbyte	local04, local02
266d8     01 28 86 A1 |  if_e	sub	local02, #1
266dc     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
266e0     01 28 06 A1 |  if_e	add	local02, #1
266e4     E0 FF 9F AD |  if_e	jmp	#LR__3220
266e8                 | LR__3221
266e8     14 2D C2 FA | 	rdbyte	local04, local02
266ec     2F 2C 0E F2 | 	cmp	local04, #47 wz
266f0     14 00 90 5D |  if_ne	jmp	#LR__3222
266f4     13 13 02 F6 | 	mov	arg01, local01
266f8     14 15 02 F6 | 	mov	arg02, local02
266fc     00 17 06 F6 | 	mov	arg03, #256
26700     88 4D B0 FD | 	call	#__system__strncpy
26704     7C 00 90 FD | 	jmp	#LR__3224
26708                 | LR__3222
26708     84 E6 05 F1 | 	add	ptr___system__dat__, #132
2670c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
26710     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
26714     13 13 02 F6 | 	mov	arg01, local01
26718     00 17 06 F6 | 	mov	arg03, #256
2671c     6C 4D B0 FD | 	call	#__system__strncpy
26720     14 2D CA FA | 	rdbyte	local04, local02 wz
26724     5C 00 90 AD |  if_e	jmp	#LR__3223
26728     14 2D C2 FA | 	rdbyte	local04, local02
2672c     2E 2C 0E F2 | 	cmp	local04, #46 wz
26730     01 28 06 A1 |  if_e	add	local02, #1
26734     14 2F C2 AA |  if_e	rdbyte	local05, local02
26738     01 28 86 A1 |  if_e	sub	local02, #1
2673c     17 31 02 A6 |  if_e	mov	local06, local05
26740     07 30 4E A7 |  if_e	zerox	local06, #7 wz
26744     3C 00 90 AD |  if_e	jmp	#LR__3223
26748     13 2F C2 FA | 	rdbyte	local05, local01
2674c     2F 2E 0E F2 | 	cmp	local05, #47 wz
26750     01 26 06 A1 |  if_e	add	local01, #1
26754     13 2D C2 AA |  if_e	rdbyte	local04, local01
26758     01 26 86 A1 |  if_e	sub	local01, #1
2675c     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
26760     AD 01 00 5F 
26764     24 14 06 56 |  if_ne	mov	arg02, ##@LR__5350
26768     13 13 02 56 |  if_ne	mov	arg01, local01
2676c     00 17 06 56 |  if_ne	mov	arg03, #256
26770     64 4D B0 5D |  if_ne	call	#__system__strncat
26774     13 13 02 F6 | 	mov	arg01, local01
26778     14 15 02 F6 | 	mov	arg02, local02
2677c     00 17 06 F6 | 	mov	arg03, #256
26780     54 4D B0 FD | 	call	#__system__strncat
26784                 | LR__3223
26784                 | LR__3224
26784     13 13 02 F6 | 	mov	arg01, local01
26788     0C 4F B0 FD | 	call	#__system___normalizeName
2678c     13 2D CA FA | 	rdbyte	local04, local01 wz
26790     1C 00 90 AD |  if_e	jmp	#LR__3225
26794     13 2D C2 FA | 	rdbyte	local04, local01
26798     2F 2C 0E F2 | 	cmp	local04, #47 wz
2679c     01 26 06 A1 |  if_e	add	local01, #1
267a0     13 31 C2 AA |  if_e	rdbyte	local06, local01
267a4     01 26 86 A1 |  if_e	sub	local01, #1
267a8     00 30 4E A2 |  if_e	cmps	local06, #0 wz
267ac     18 00 90 5D |  if_ne	jmp	#LR__3226
267b0                 | LR__3225
267b0     01 00 00 FF 
267b4     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
267b8     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
267bc     01 00 00 FF 
267c0     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
267c4     EC 01 90 FD | 	jmp	#LR__3240
267c8                 | LR__3226
267c8     00 32 06 F6 | 	mov	local07, #0
267cc                 | LR__3227
267cc     04 32 56 F2 | 	cmps	local07, #4 wc
267d0     CC 01 90 3D |  if_ae	jmp	#LR__3239
267d4     19 31 02 F6 | 	mov	local06, local07
267d8     02 30 66 F0 | 	shl	local06, #2
267dc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
267e0     F3 30 02 F1 | 	add	local06, ptr___system__dat__
267e4     18 31 0A FB | 	rdlong	local06, local06 wz
267e8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
267ec     A8 01 90 AD |  if_e	jmp	#LR__3238
267f0     19 2D 02 F6 | 	mov	local04, local07
267f4     02 2C 66 F0 | 	shl	local04, #2
267f8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
267fc     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
26800     16 13 02 FB | 	rdlong	arg01, local04
26804     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26808     09 35 02 F6 | 	mov	local08, arg01
2680c     97 06 48 FB | 	callpa	#(@LR__3229-@LR__3228)>>2,fcache_load_ptr_
26810                 | LR__3228
26810     1A FB C9 FA | 	rdbyte	result1, local08 wz
26814     01 34 06 51 |  if_ne	add	local08, #1
26818     F4 FF 9F 5D |  if_ne	jmp	#LR__3228
2681c                 | LR__3229
2681c     09 35 82 F1 | 	sub	local08, arg01
26820     1A 37 02 F6 | 	mov	local09, local08
26824     1B 2D 02 F6 | 	mov	local04, local09
26828     13 2D 02 F1 | 	add	local04, local01
2682c     16 31 C2 FA | 	rdbyte	local06, local04
26830     2F 30 0E F2 | 	cmp	local06, #47 wz
26834     1B 39 02 56 |  if_ne	mov	local10, local09
26838     13 39 02 51 |  if_ne	add	local10, local01
2683c     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
26840     54 01 90 5D |  if_ne	jmp	#LR__3237
26844     19 17 02 F6 | 	mov	arg03, local07
26848     02 16 66 F0 | 	shl	arg03, #2
2684c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26850     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
26854     0B 15 02 FB | 	rdlong	arg02, arg03
26858     1B 17 02 F6 | 	mov	arg03, local09
2685c     13 13 02 F6 | 	mov	arg01, local01
26860     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26864     D0 4C B0 FD | 	call	#__system__strncmp
26868     00 FA 4D F2 | 	cmps	result1, #0 wz
2686c     28 01 90 5D |  if_ne	jmp	#LR__3237
26870     19 3B 02 F6 | 	mov	local11, local07
26874     02 3A 66 F0 | 	shl	local11, #2
26878     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2687c     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
26880     1D 3D 02 FB | 	rdlong	local12, local11
26884     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
26888     97 22 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
2688c                 | LR__3230
2688c     1B 31 02 F6 | 	mov	local06, local09
26890     01 30 06 F1 | 	add	local06, #1
26894     13 31 02 F1 | 	add	local06, local01
26898     18 3B C2 FA | 	rdbyte	local11, local06
2689c     2E 3A 0E F2 | 	cmp	local11, #46 wz
268a0     2C 00 90 5D |  if_ne	jmp	#LR__3232
268a4     1B 3B 02 F6 | 	mov	local11, local09
268a8     02 3A 06 F1 | 	add	local11, #2
268ac     13 3B 02 F1 | 	add	local11, local01
268b0     1D 39 C2 FA | 	rdbyte	local10, local11
268b4     2F 38 0E F2 | 	cmp	local10, #47 wz
268b8     1B 3F 02 56 |  if_ne	mov	local13, local09
268bc     02 3E 06 51 |  if_ne	add	local13, #2
268c0     13 3F 02 51 |  if_ne	add	local13, local01
268c4     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
268c8     01 36 06 A1 |  if_e	add	local09, #1
268cc     BC FF 9F AD |  if_e	jmp	#LR__3230
268d0                 | LR__3231
268d0                 | LR__3232
268d0     00 2A 0E F2 | 	cmp	local03, #0 wz
268d4     15 13 02 56 |  if_ne	mov	arg01, local03
268d8     13 15 02 56 |  if_ne	mov	arg02, local01
268dc     00 17 06 56 |  if_ne	mov	arg03, #256
268e0     A8 4B B0 5D |  if_ne	call	#__system__strncpy
268e4     13 15 02 F6 | 	mov	arg02, local01
268e8     1B 15 02 F1 | 	add	arg02, local09
268ec     01 14 06 F1 | 	add	arg02, #1
268f0     13 13 02 F6 | 	mov	arg01, local01
268f4     D4 F5 BF FD | 	call	#__system____builtin_strcpy
268f8     13 13 02 F6 | 	mov	arg01, local01
268fc     09 35 02 F6 | 	mov	local08, arg01
26900     97 06 48 FB | 	callpa	#(@LR__3234-@LR__3233)>>2,fcache_load_ptr_
26904                 | LR__3233
26904     1A FB C9 FA | 	rdbyte	result1, local08 wz
26908     01 34 06 51 |  if_ne	add	local08, #1
2690c     F4 FF 9F 5D |  if_ne	jmp	#LR__3233
26910                 | LR__3234
26910     09 35 82 F1 | 	sub	local08, arg01
26914     1A 37 02 F6 | 	mov	local09, local08
26918                 | LR__3235
26918     01 36 56 F2 | 	cmps	local09, #1 wc
2691c     70 00 90 CD |  if_b	jmp	#LR__3236
26920     1B 2D 02 F6 | 	mov	local04, local09
26924     13 2D 02 F1 | 	add	local04, local01
26928     16 3B C2 FA | 	rdbyte	local11, local04
2692c     2F 3A 0E F2 | 	cmp	local11, #47 wz
26930     1B 3B 02 A6 |  if_e	mov	local11, local09
26934     13 3B 02 A1 |  if_e	add	local11, local01
26938     1D 01 48 AC |  if_e	wrbyte	#0, local11
2693c     01 36 86 A1 |  if_e	sub	local09, #1
26940     D4 FF 9F AD |  if_e	jmp	#LR__3235
26944     1B 2D 02 F6 | 	mov	local04, local09
26948     13 2D 02 F1 | 	add	local04, local01
2694c     16 3B C2 FA | 	rdbyte	local11, local04
26950     2E 3A 0E F2 | 	cmp	local11, #46 wz
26954     38 00 90 5D |  if_ne	jmp	#LR__3236
26958     02 36 56 F2 | 	cmps	local09, #2 wc
2695c     30 00 90 CD |  if_b	jmp	#LR__3236
26960     1B 41 02 F6 | 	mov	local14, local09
26964     01 40 86 F1 | 	sub	local14, #1
26968     13 41 02 F1 | 	add	local14, local01
2696c     20 2F C2 FA | 	rdbyte	local05, local14
26970     2F 2E 0E F2 | 	cmp	local05, #47 wz
26974     18 00 90 5D |  if_ne	jmp	#LR__3236
26978     1B 2D 02 F6 | 	mov	local04, local09
2697c     01 2C 86 F1 | 	sub	local04, #1
26980     13 2D 02 F1 | 	add	local04, local01
26984     16 01 48 FC | 	wrbyte	#0, local04
26988     02 36 86 F1 | 	sub	local09, #2
2698c     88 FF 9F FD | 	jmp	#LR__3235
26990                 | LR__3236
26990     1E FB 01 F6 | 	mov	result1, local12
26994     1C 00 90 FD | 	jmp	#LR__3240
26998                 | LR__3237
26998                 | LR__3238
26998     01 32 06 F1 | 	add	local07, #1
2699c     2C FE 9F FD | 	jmp	#LR__3227
269a0                 | LR__3239
269a0     02 00 00 FF 
269a4     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
269a8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
269ac     02 00 00 FF 
269b0     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
269b4                 | LR__3240
269b4     A7 F0 03 F6 | 	mov	ptra, fp
269b8     B2 00 A0 FD | 	call	#popregs_
269bc                 | __system____getvfsforfile_ret
269bc     2D 00 64 FD | 	ret
269c0                 | 
269c0                 | __system___basic_open
269c0     05 4A 05 F6 | 	mov	COUNT_, #5
269c4     A8 00 A0 FD | 	call	#pushregs_
269c8     0A 27 02 F6 | 	mov	local01, arg02
269cc     0B 29 02 F6 | 	mov	local02, arg03
269d0     0C 2B 02 F6 | 	mov	local03, arg04
269d4     00 2C 06 F6 | 	mov	local04, #0
269d8     88 4A B0 FD | 	call	#__system____getftab
269dc     FD 2E 0A F6 | 	mov	local05, result1 wz
269e0     18 00 90 5D |  if_ne	jmp	#LR__3250
269e4     EE 12 02 F6 | 	mov	arg01, abortchain
269e8     0C 14 06 F6 | 	mov	arg02, #12
269ec     01 16 06 F6 | 	mov	arg03, #1
269f0     DA 00 A0 FD | 	call	#__longjmp
269f4     01 FA 65 F6 | 	neg	result1, #1
269f8     14 01 90 FD | 	jmp	#LR__3259
269fc                 | LR__3250
269fc     08 2E 06 F1 | 	add	local05, #8
26a00     17 FB 09 FB | 	rdlong	result1, local05 wz
26a04     08 2E 86 F1 | 	sub	local05, #8
26a08     17 13 02 56 |  if_ne	mov	arg01, local05
26a0c     A8 41 B0 5D |  if_ne	call	#__system___closeraw
26a10     00 26 0E F2 | 	cmp	local01, #0 wz
26a14     00 28 0E A2 |  if_e	cmp	local02, #0 wz
26a18     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
26a1c     3C 00 90 AD |  if_e	jmp	#LR__3252
26a20     0C 12 06 F6 | 	mov	arg01, #12
26a24     90 36 B0 FD | 	call	#__system___gc_alloc_managed
26a28     FD 2C 0A F6 | 	mov	local04, result1 wz
26a2c     18 00 90 5D |  if_ne	jmp	#LR__3251
26a30     EE 12 02 F6 | 	mov	arg01, abortchain
26a34     07 14 06 F6 | 	mov	arg02, #7
26a38     01 16 06 F6 | 	mov	arg03, #1
26a3c     DA 00 A0 FD | 	call	#__longjmp
26a40     01 FA 65 F6 | 	neg	result1, #1
26a44     C8 00 90 FD | 	jmp	#LR__3259
26a48                 | LR__3251
26a48     16 01 68 FC | 	wrlong	#0, local04
26a4c     04 2C 06 F1 | 	add	local04, #4
26a50     16 01 68 FC | 	wrlong	#0, local04
26a54     04 2C 86 F1 | 	sub	local04, #4
26a58     17 2D 62 FC | 	wrlong	local04, local05
26a5c                 | LR__3252
26a5c     00 26 0E F2 | 	cmp	local01, #0 wz
26a60     20 00 90 AD |  if_e	jmp	#LR__3253
26a64     16 27 62 FC | 	wrlong	local01, local04
26a68     16 FB 01 F6 | 	mov	result1, local04
26a6c     00 F8 04 FF 
26a70     00 FA 45 F5 | 	or	result1, ##166723584
26a74     1C 2E 06 F1 | 	add	local05, #28
26a78     17 FB 61 FC | 	wrlong	result1, local05
26a7c     1C 2E 86 F1 | 	sub	local05, #28
26a80     0C 00 90 FD | 	jmp	#LR__3254
26a84                 | LR__3253
26a84     1C 2E 06 F1 | 	add	local05, #28
26a88     17 01 68 FC | 	wrlong	#0, local05
26a8c     1C 2E 86 F1 | 	sub	local05, #28
26a90                 | LR__3254
26a90     00 28 0E F2 | 	cmp	local02, #0 wz
26a94     28 00 90 AD |  if_e	jmp	#LR__3255
26a98     04 2C 06 F1 | 	add	local04, #4
26a9c     16 29 62 FC | 	wrlong	local02, local04
26aa0     04 2C 86 F1 | 	sub	local04, #4
26aa4     16 FB 01 F6 | 	mov	result1, local04
26aa8     00 00 05 FF 
26aac     00 FA 45 F5 | 	or	result1, ##167772160
26ab0     20 2E 06 F1 | 	add	local05, #32
26ab4     17 FB 61 FC | 	wrlong	result1, local05
26ab8     20 2E 86 F1 | 	sub	local05, #32
26abc     0C 00 90 FD | 	jmp	#LR__3256
26ac0                 | LR__3255
26ac0     20 2E 06 F1 | 	add	local05, #32
26ac4     17 01 68 FC | 	wrlong	#0, local05
26ac8     20 2E 86 F1 | 	sub	local05, #32
26acc                 | LR__3256
26acc     00 2A 0E F2 | 	cmp	local03, #0 wz
26ad0     24 00 90 AD |  if_e	jmp	#LR__3257
26ad4     08 2C 06 F1 | 	add	local04, #8
26ad8     16 2B 62 FC | 	wrlong	local03, local04
26adc     08 2C 86 F1 | 	sub	local04, #8
26ae0     00 08 05 FF 
26ae4     00 2C 46 F5 | 	or	local04, ##168820736
26ae8     24 2E 06 F1 | 	add	local05, #36
26aec     17 2D 62 FC | 	wrlong	local04, local05
26af0     24 2E 86 F1 | 	sub	local05, #36
26af4     0C 00 90 FD | 	jmp	#LR__3258
26af8                 | LR__3257
26af8     24 2E 06 F1 | 	add	local05, #36
26afc     17 01 68 FC | 	wrlong	#0, local05
26b00     24 2E 86 F1 | 	sub	local05, #36
26b04                 | LR__3258
26b04     08 2E 06 F1 | 	add	local05, #8
26b08     17 0F 68 FC | 	wrlong	#7, local05
26b0c     00 FA 05 F6 | 	mov	result1, #0
26b10                 | LR__3259
26b10     A7 F0 03 F6 | 	mov	ptra, fp
26b14     B2 00 A0 FD | 	call	#popregs_
26b18                 | __system___basic_open_ret
26b18     2D 00 64 FD | 	ret
26b1c                 | 
26b1c                 | __system___basic_open_string
26b1c     04 4A 05 F6 | 	mov	COUNT_, #4
26b20     A8 00 A0 FD | 	call	#pushregs_
26b24     0A 27 02 F6 | 	mov	local01, arg02
26b28     0B 29 02 F6 | 	mov	local02, arg03
26b2c     34 49 B0 FD | 	call	#__system____getftab
26b30     FD 2A 0A F6 | 	mov	local03, result1 wz
26b34     18 00 90 5D |  if_ne	jmp	#LR__3260
26b38     EE 12 02 F6 | 	mov	arg01, abortchain
26b3c     0C 14 06 F6 | 	mov	arg02, #12
26b40     01 16 06 F6 | 	mov	arg03, #1
26b44     DA 00 A0 FD | 	call	#__longjmp
26b48     01 FA 65 F6 | 	neg	result1, #1
26b4c     58 00 90 FD | 	jmp	#LR__3262
26b50                 | LR__3260
26b50     08 2A 06 F1 | 	add	local03, #8
26b54     15 19 0A FB | 	rdlong	arg04, local03 wz
26b58     08 2A 86 F1 | 	sub	local03, #8
26b5c     15 13 02 56 |  if_ne	mov	arg01, local03
26b60     54 40 B0 5D |  if_ne	call	#__system___closeraw
26b64     13 15 02 F6 | 	mov	arg02, local01
26b68     14 17 02 F6 | 	mov	arg03, local02
26b6c     15 13 02 F6 | 	mov	arg01, local03
26b70     B6 19 06 F6 | 	mov	arg04, #438
26b74     3C 3D B0 FD | 	call	#__system___openraw
26b78     FD 2C 02 F6 | 	mov	local04, result1
26b7c     00 2C 56 F2 | 	cmps	local04, #0 wc
26b80     20 00 90 3D |  if_ae	jmp	#LR__3261
26b84     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26b88     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
26b8c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26b90     EE 12 02 F6 | 	mov	arg01, abortchain
26b94     01 16 06 F6 | 	mov	arg03, #1
26b98     DA 00 A0 FD | 	call	#__longjmp
26b9c     01 FA 65 F6 | 	neg	result1, #1
26ba0     04 00 90 FD | 	jmp	#LR__3262
26ba4                 | LR__3261
26ba4     16 FB 01 F6 | 	mov	result1, local04
26ba8                 | LR__3262
26ba8     A7 F0 03 F6 | 	mov	ptra, fp
26bac     B2 00 A0 FD | 	call	#popregs_
26bb0                 | __system___basic_open_string_ret
26bb0     2D 00 64 FD | 	ret
26bb4                 | 
26bb4                 | __system___basic_print_char
26bb4     03 4A 05 F6 | 	mov	COUNT_, #3
26bb8     A8 00 A0 FD | 	call	#pushregs_
26bbc     0A 27 02 F6 | 	mov	local01, arg02
26bc0     F4 4F B0 FD | 	call	#__system___gettxfunc
26bc4     FD 28 0A F6 | 	mov	local02, result1 wz
26bc8     00 FA 05 A6 |  if_e	mov	result1, #0
26bcc     30 00 90 AD |  if_e	jmp	#LR__3270
26bd0     14 2B 02 F6 | 	mov	local03, local02
26bd4     13 28 46 F7 | 	zerox	local02, #19
26bd8     14 2A 46 F0 | 	shr	local03, #20
26bdc     02 2A 66 F0 | 	shl	local03, #2
26be0     ED 2A 02 F1 | 	add	local03, __methods__
26be4     15 2B 02 FB | 	rdlong	local03, local03
26be8     13 13 02 F6 | 	mov	arg01, local01
26bec     F2 26 02 F6 | 	mov	local01, objptr
26bf0     14 E5 01 F6 | 	mov	objptr, local02
26bf4     2D 2A 62 FD | 	call	local03
26bf8     13 E5 01 F6 | 	mov	objptr, local01
26bfc     01 FA 05 F6 | 	mov	result1, #1
26c00                 | LR__3270
26c00     A7 F0 03 F6 | 	mov	ptra, fp
26c04     B2 00 A0 FD | 	call	#popregs_
26c08                 | __system___basic_print_char_ret
26c08     2D 00 64 FD | 	ret
26c0c                 | 
26c0c                 | __system___basic_print_string
26c0c     03 4A 05 F6 | 	mov	COUNT_, #3
26c10     A8 00 A0 FD | 	call	#pushregs_
26c14     0A 27 02 F6 | 	mov	local01, arg02
26c18     0B 29 02 F6 | 	mov	local02, arg03
26c1c     98 4F B0 FD | 	call	#__system___gettxfunc
26c20     FD 2A 0A F6 | 	mov	local03, result1 wz
26c24     00 FA 05 A6 |  if_e	mov	result1, #0
26c28     18 00 90 AD |  if_e	jmp	#LR__3280
26c2c     00 26 0E F2 | 	cmp	local01, #0 wz
26c30     00 FA 05 A6 |  if_e	mov	result1, #0
26c34     15 13 02 56 |  if_ne	mov	arg01, local03
26c38     14 15 02 56 |  if_ne	mov	arg02, local02
26c3c     13 17 02 56 |  if_ne	mov	arg03, local01
26c40     08 02 B0 5D |  if_ne	call	#__system___fmtstr
26c44                 | LR__3280
26c44     A7 F0 03 F6 | 	mov	ptra, fp
26c48     B2 00 A0 FD | 	call	#popregs_
26c4c                 | __system___basic_print_string_ret
26c4c     2D 00 64 FD | 	ret
26c50                 | 
26c50                 | __system___basic_print_integer
26c50     04 4A 05 F6 | 	mov	COUNT_, #4
26c54     A8 00 A0 FD | 	call	#pushregs_
26c58     0A 27 02 F6 | 	mov	local01, arg02
26c5c     0B 29 02 F6 | 	mov	local02, arg03
26c60     0C 2B 02 F6 | 	mov	local03, arg04
26c64     50 4F B0 FD | 	call	#__system___gettxfunc
26c68     FD 2C 0A F6 | 	mov	local04, result1 wz
26c6c     00 FA 05 A6 |  if_e	mov	result1, #0
26c70     16 13 02 56 |  if_ne	mov	arg01, local04
26c74     14 15 02 56 |  if_ne	mov	arg02, local02
26c78     13 17 02 56 |  if_ne	mov	arg03, local01
26c7c     15 19 02 56 |  if_ne	mov	arg04, local03
26c80     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
26c84     A7 F0 03 F6 | 	mov	ptra, fp
26c88     B2 00 A0 FD | 	call	#popregs_
26c8c                 | __system___basic_print_integer_ret
26c8c     2D 00 64 FD | 	ret
26c90                 | 
26c90                 | __system___basic_print_unsigned
26c90     03 4A 05 F6 | 	mov	COUNT_, #3
26c94     A8 00 A0 FD | 	call	#pushregs_
26c98     0A 27 02 F6 | 	mov	local01, arg02
26c9c     0B 29 02 F6 | 	mov	local02, arg03
26ca0     0C 2B 02 F6 | 	mov	local03, arg04
26ca4     10 4F B0 FD | 	call	#__system___gettxfunc
26ca8     FD 12 0A F6 | 	mov	arg01, result1 wz
26cac     00 FA 05 A6 |  if_e	mov	result1, #0
26cb0     3A 28 26 54 |  if_ne	bith	local02, #58
26cb4     14 15 02 56 |  if_ne	mov	arg02, local02
26cb8     13 17 02 56 |  if_ne	mov	arg03, local01
26cbc     15 19 02 56 |  if_ne	mov	arg04, local03
26cc0     74 02 B0 5D |  if_ne	call	#__system___fmtnum
26cc4     A7 F0 03 F6 | 	mov	ptra, fp
26cc8     B2 00 A0 FD | 	call	#popregs_
26ccc                 | __system___basic_print_unsigned_ret
26ccc     2D 00 64 FD | 	ret
26cd0                 | 
26cd0                 | __system___basic_get_char
26cd0     03 4A 05 F6 | 	mov	COUNT_, #3
26cd4     A8 00 A0 FD | 	call	#pushregs_
26cd8     20 4F B0 FD | 	call	#__system___getrxfunc
26cdc     FD 26 0A F6 | 	mov	local01, result1 wz
26ce0     01 FA 65 A6 |  if_e	neg	result1, #1
26ce4     28 00 90 AD |  if_e	jmp	#LR__3290
26ce8     13 29 02 F6 | 	mov	local02, local01
26cec     13 26 46 F7 | 	zerox	local01, #19
26cf0     14 28 46 F0 | 	shr	local02, #20
26cf4     02 28 66 F0 | 	shl	local02, #2
26cf8     ED 28 02 F1 | 	add	local02, __methods__
26cfc     14 29 02 FB | 	rdlong	local02, local02
26d00     F2 2A 02 F6 | 	mov	local03, objptr
26d04     13 E5 01 F6 | 	mov	objptr, local01
26d08     2D 28 62 FD | 	call	local02
26d0c     15 E5 01 F6 | 	mov	objptr, local03
26d10                 | LR__3290
26d10     A7 F0 03 F6 | 	mov	ptra, fp
26d14     B2 00 A0 FD | 	call	#popregs_
26d18                 | __system___basic_get_char_ret
26d18     2D 00 64 FD | 	ret
26d1c                 | 
26d1c                 | __system___basic_put
26d1c     04 4A 05 F6 | 	mov	COUNT_, #4
26d20     A8 00 A0 FD | 	call	#pushregs_
26d24     0D 27 02 F6 | 	mov	local01, arg05
26d28     13 19 02 FD | 	qmul	arg04, local01
26d2c     09 29 02 F6 | 	mov	local02, arg01
26d30     0B 2B 02 F6 | 	mov	local03, arg03
26d34     00 14 0E F2 | 	cmp	arg02, #0 wz
26d38     01 14 86 51 |  if_ne	sub	arg02, #1
26d3c     14 13 02 56 |  if_ne	mov	arg01, local02
26d40     00 16 06 56 |  if_ne	mov	arg03, #0
26d44     18 2C 62 FD | 	getqx	local04
26d48     60 45 B0 5D |  if_ne	call	#__system__lseek
26d4c     15 15 02 F6 | 	mov	arg02, local03
26d50     16 17 02 F6 | 	mov	arg03, local04
26d54     14 13 02 F6 | 	mov	arg01, local02
26d58     9C 44 B0 FD | 	call	#__system__write
26d5c     FD 2C 02 F6 | 	mov	local04, result1
26d60     01 2C 56 F2 | 	cmps	local04, #1 wc
26d64     10 00 90 CD |  if_b	jmp	#LR__3300
26d68     16 89 02 F6 | 	mov	muldiva_, local04
26d6c     13 8B 02 F6 | 	mov	muldivb_, local01
26d70     BA 00 A0 FD | 	call	#divide_
26d74     45 2D 02 F6 | 	mov	local04, muldivb_
26d78                 | LR__3300
26d78     16 FB 01 F6 | 	mov	result1, local04
26d7c     A7 F0 03 F6 | 	mov	ptra, fp
26d80     B2 00 A0 FD | 	call	#popregs_
26d84                 | __system___basic_put_ret
26d84     2D 00 64 FD | 	ret
26d88                 | 
26d88                 | __system___basic_get
26d88     04 4A 05 F6 | 	mov	COUNT_, #4
26d8c     A8 00 A0 FD | 	call	#pushregs_
26d90     0D 27 02 F6 | 	mov	local01, arg05
26d94     13 19 02 FD | 	qmul	arg04, local01
26d98     09 29 02 F6 | 	mov	local02, arg01
26d9c     0B 2B 02 F6 | 	mov	local03, arg03
26da0     00 14 0E F2 | 	cmp	arg02, #0 wz
26da4     01 14 86 51 |  if_ne	sub	arg02, #1
26da8     14 13 02 56 |  if_ne	mov	arg01, local02
26dac     00 16 06 56 |  if_ne	mov	arg03, #0
26db0     18 2C 62 FD | 	getqx	local04
26db4     F4 44 B0 5D |  if_ne	call	#__system__lseek
26db8     15 15 02 F6 | 	mov	arg02, local03
26dbc     16 17 02 F6 | 	mov	arg03, local04
26dc0     14 13 02 F6 | 	mov	arg01, local02
26dc4     6C 44 B0 FD | 	call	#__system__read
26dc8     FD 2C 02 F6 | 	mov	local04, result1
26dcc     01 2C 56 F2 | 	cmps	local04, #1 wc
26dd0     10 00 90 CD |  if_b	jmp	#LR__3310
26dd4     16 89 02 F6 | 	mov	muldiva_, local04
26dd8     13 8B 02 F6 | 	mov	muldivb_, local01
26ddc     BA 00 A0 FD | 	call	#divide_
26de0     45 2D 02 F6 | 	mov	local04, muldivb_
26de4                 | LR__3310
26de4     16 FB 01 F6 | 	mov	result1, local04
26de8     A7 F0 03 F6 | 	mov	ptra, fp
26dec     B2 00 A0 FD | 	call	#popregs_
26df0                 | __system___basic_get_ret
26df0     2D 00 64 FD | 	ret
26df4                 | 
26df4                 | __system___fmtchar
26df4     00 4A 05 F6 | 	mov	COUNT_, #0
26df8     A8 00 A0 FD | 	call	#pushregs_
26dfc     10 F0 07 F1 | 	add	ptra, #16
26e00     04 4E 05 F1 | 	add	fp, #4
26e04     A7 12 62 FC | 	wrlong	arg01, fp
26e08     04 4E 05 F1 | 	add	fp, #4
26e0c     A7 14 62 FC | 	wrlong	arg02, fp
26e10     04 4E 05 F1 | 	add	fp, #4
26e14     A7 16 62 FC | 	wrlong	arg03, fp
26e18     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
26e1c     A7 16 62 FC | 	wrlong	arg03, fp
26e20     08 4E 85 F1 | 	sub	fp, #8
26e24     A7 12 02 FB | 	rdlong	arg01, fp
26e28     04 4E 05 F1 | 	add	fp, #4
26e2c     A7 14 02 FB | 	rdlong	arg02, fp
26e30     04 4E 05 F1 | 	add	fp, #4
26e34     A7 16 02 F6 | 	mov	arg03, fp
26e38     0C 4E 85 F1 | 	sub	fp, #12
26e3c     0C 00 B0 FD | 	call	#__system___fmtstr
26e40     A7 F0 03 F6 | 	mov	ptra, fp
26e44     B2 00 A0 FD | 	call	#popregs_
26e48                 | __system___fmtchar_ret
26e48     2D 00 64 FD | 	ret
26e4c                 | 
26e4c                 | __system___fmtstr
26e4c     09 4A 05 F6 | 	mov	COUNT_, #9
26e50     A8 00 A0 FD | 	call	#pushregs_
26e54     09 27 02 F6 | 	mov	local01, arg01
26e58     0A 29 02 F6 | 	mov	local02, arg02
26e5c     0B 2B 02 F6 | 	mov	local03, arg03
26e60     14 19 E2 F8 | 	getbyte	arg04, local02, #0
26e64     15 13 02 F6 | 	mov	arg01, local03
26e68     09 2D 02 F6 | 	mov	local04, arg01
26e6c     97 06 48 FB | 	callpa	#(@LR__3321-@LR__3320)>>2,fcache_load_ptr_
26e70                 | LR__3320
26e70     16 FB C9 FA | 	rdbyte	result1, local04 wz
26e74     01 2C 06 51 |  if_ne	add	local04, #1
26e78     F4 FF 9F 5D |  if_ne	jmp	#LR__3320
26e7c                 | LR__3321
26e7c     09 2D 82 F1 | 	sub	local04, arg01
26e80     00 18 0E F2 | 	cmp	arg04, #0 wz
26e84     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
26e88     14 15 02 F6 | 	mov	arg02, local02
26e8c     16 17 02 F6 | 	mov	arg03, local04
26e90     13 13 02 F6 | 	mov	arg01, local01
26e94     02 18 06 F6 | 	mov	arg04, #2
26e98     BC 49 B0 FD | 	call	#__system___fmtpad
26e9c     FD 2E 02 F6 | 	mov	local05, result1
26ea0     00 2E 56 F2 | 	cmps	local05, #0 wc
26ea4     17 FB 01 C6 |  if_b	mov	result1, local05
26ea8     80 00 90 CD |  if_b	jmp	#LR__3324
26eac     01 2C 56 F2 | 	cmps	local04, #1 wc
26eb0     50 00 90 CD |  if_b	jmp	#LR__3323
26eb4     16 31 02 F6 | 	mov	local06, local04
26eb8                 | LR__3322
26eb8     13 33 02 F6 | 	mov	local07, local01
26ebc     13 35 02 F6 | 	mov	local08, local01
26ec0     13 32 46 F7 | 	zerox	local07, #19
26ec4     14 34 46 F0 | 	shr	local08, #20
26ec8     02 34 66 F0 | 	shl	local08, #2
26ecc     ED 34 02 F1 | 	add	local08, __methods__
26ed0     1A 35 02 FB | 	rdlong	local08, local08
26ed4     15 13 C2 FA | 	rdbyte	arg01, local03
26ed8     F2 36 02 F6 | 	mov	local09, objptr
26edc     19 E5 01 F6 | 	mov	objptr, local07
26ee0     01 2A 06 F1 | 	add	local03, #1
26ee4     2D 34 62 FD | 	call	local08
26ee8     1B E5 01 F6 | 	mov	objptr, local09
26eec     FD 36 02 F6 | 	mov	local09, result1
26ef0     00 36 56 F2 | 	cmps	local09, #0 wc
26ef4     1B FB 01 C6 |  if_b	mov	result1, local09
26ef8     30 00 90 CD |  if_b	jmp	#LR__3324
26efc     1B 2F 02 F1 | 	add	local05, local09
26f00     ED 31 6E FB | 	djnz	local06, #LR__3322
26f04                 | LR__3323
26f04     14 15 02 F6 | 	mov	arg02, local02
26f08     16 17 02 F6 | 	mov	arg03, local04
26f0c     13 13 02 F6 | 	mov	arg01, local01
26f10     01 18 06 F6 | 	mov	arg04, #1
26f14     40 49 B0 FD | 	call	#__system___fmtpad
26f18     FD 36 02 F6 | 	mov	local09, result1
26f1c     00 36 56 F2 | 	cmps	local09, #0 wc
26f20     1B FB 01 C6 |  if_b	mov	result1, local09
26f24     1B 2F 02 31 |  if_ae	add	local05, local09
26f28     17 FB 01 36 |  if_ae	mov	result1, local05
26f2c                 | LR__3324
26f2c     A7 F0 03 F6 | 	mov	ptra, fp
26f30     B2 00 A0 FD | 	call	#popregs_
26f34                 | __system___fmtstr_ret
26f34     2D 00 64 FD | 	ret
26f38                 | 
26f38                 | __system___fmtnum
26f38     0B 4A 05 F6 | 	mov	COUNT_, #11
26f3c     A8 00 A0 FD | 	call	#pushregs_
26f40     09 27 02 F6 | 	mov	local01, arg01
26f44     0A 29 02 F6 | 	mov	local02, arg02
26f48     0B 2B 02 F6 | 	mov	local03, arg03
26f4c     0C 2D 02 F6 | 	mov	local04, arg04
26f50     F8 2F 02 F6 | 	mov	local05, ptra
26f54     17 31 02 F6 | 	mov	local06, local05
26f58     00 32 06 F6 | 	mov	local07, #0
26f5c     14 35 02 F6 | 	mov	local08, local02
26f60     10 34 46 F0 | 	shr	local08, #16
26f64     3F 34 06 F5 | 	and	local08, #63
26f68     14 37 E2 F8 | 	getbyte	local09, local02, #0
26f6c     14 39 02 F6 | 	mov	local10, local02
26f70     1A 38 46 F0 | 	shr	local10, #26
26f74     03 38 06 F5 | 	and	local10, #3
26f78     1C 3B 02 F6 | 	mov	local11, local10
26f7c     01 34 56 F2 | 	cmps	local08, #1 wc
26f80     44 F0 07 F1 | 	add	ptra, #68
26f84     01 34 86 31 |  if_ae	sub	local08, #1
26f88     41 36 56 F2 | 	cmps	local09, #65 wc
26f8c     00 36 0E C2 |  if_b	cmp	local09, #0 wz
26f90     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
26f94     03 3A 0E F2 | 	cmp	local11, #3 wz
26f98     00 3A 06 A6 |  if_e	mov	local11, #0
26f9c     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
26fa0     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
26fa4     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
26fa8     00 3A 0E F2 | 	cmp	local11, #0 wz
26fac     4C 00 90 AD |  if_e	jmp	#LR__3333
26fb0     01 32 06 F6 | 	mov	local07, #1
26fb4     1B 35 0A F2 | 	cmp	local08, local09 wz
26fb8     18 00 90 5D |  if_ne	jmp	#LR__3331
26fbc     05 34 6E FB | 	djnz	local08, #LR__3330
26fc0     13 13 02 F6 | 	mov	arg01, local01
26fc4     14 15 02 F6 | 	mov	arg02, local02
26fc8     23 16 06 F6 | 	mov	arg03, #35
26fcc     24 FE BF FD | 	call	#__system___fmtchar
26fd0     88 00 90 FD | 	jmp	#LR__3337
26fd4                 | LR__3330
26fd4                 | LR__3331
26fd4     02 3A 0E F2 | 	cmp	local11, #2 wz
26fd8     18 39 02 A6 |  if_e	mov	local10, local06
26fdc     01 30 06 A1 |  if_e	add	local06, #1
26fe0     1C 41 48 AC |  if_e	wrbyte	#32, local10
26fe4     14 00 90 AD |  if_e	jmp	#LR__3332
26fe8     04 3A 0E F2 | 	cmp	local11, #4 wz
26fec     18 5B 48 AC |  if_e	wrbyte	#45, local06
26ff0     01 30 06 A1 |  if_e	add	local06, #1
26ff4     18 57 48 5C |  if_ne	wrbyte	#43, local06
26ff8     01 30 06 51 |  if_ne	add	local06, #1
26ffc                 | LR__3332
26ffc                 | LR__3333
26ffc     18 13 02 F6 | 	mov	arg01, local06
27000     15 15 02 F6 | 	mov	arg02, local03
27004     16 17 02 F6 | 	mov	arg03, local04
27008     1A 19 02 F6 | 	mov	arg04, local08
2700c     00 1A 06 F6 | 	mov	arg05, #0
27010     1D 28 2E F4 | 	testbn	local02, #29 wz
27014     01 1A 06 56 |  if_ne	mov	arg05, #1
27018     04 49 B0 FD | 	call	#__system___uitoa
2701c     FD 32 02 F1 | 	add	local07, result1
27020     1B 33 5A F2 | 	cmps	local07, local09 wcz
27024     24 00 90 ED |  if_be	jmp	#LR__3336
27028     97 0E 48 FB | 	callpa	#(@LR__3335-@LR__3334)>>2,fcache_load_ptr_
2702c                 | LR__3334
2702c     1B 39 02 F6 | 	mov	local10, local09
27030     01 38 56 F2 | 	cmps	local10, #1 wc
27034     01 36 86 F1 | 	sub	local09, #1
27038     18 39 02 36 |  if_ae	mov	local10, local06
2703c     01 30 06 31 |  if_ae	add	local06, #1
27040     1C 47 48 3C |  if_ae	wrbyte	#35, local10
27044     E4 FF 9F 3D |  if_ae	jmp	#LR__3334
27048                 | LR__3335
27048     18 01 48 FC | 	wrbyte	#0, local06
2704c                 | LR__3336
2704c     13 13 02 F6 | 	mov	arg01, local01
27050     14 15 02 F6 | 	mov	arg02, local02
27054     17 17 02 F6 | 	mov	arg03, local05
27058     F0 FD BF FD | 	call	#__system___fmtstr
2705c                 | LR__3337
2705c     A7 F0 03 F6 | 	mov	ptra, fp
27060     B2 00 A0 FD | 	call	#popregs_
27064                 | __system___fmtnum_ret
27064     2D 00 64 FD | 	ret
27068                 | 
27068                 | __system___fmtfloat
27068     10 4A 05 F6 | 	mov	COUNT_, #16
2706c     A8 00 A0 FD | 	call	#pushregs_
27070     24 F1 07 F1 | 	add	ptra, #292
27074     04 4E 05 F1 | 	add	fp, #4
27078     A7 12 62 FC | 	wrlong	arg01, fp
2707c     04 4E 05 F1 | 	add	fp, #4
27080     A7 14 62 FC | 	wrlong	arg02, fp
27084     04 4E 05 F1 | 	add	fp, #4
27088     A7 16 62 FC | 	wrlong	arg03, fp
2708c     04 4E 05 F1 | 	add	fp, #4
27090     A7 18 62 FC | 	wrlong	arg04, fp
27094     0C 4E 05 F1 | 	add	fp, #12
27098     A7 14 68 FC | 	wrlong	#10, fp
2709c     08 4E 05 F1 | 	add	fp, #8
270a0     A7 00 68 FC | 	wrlong	#0, fp
270a4     08 4E 05 F1 | 	add	fp, #8
270a8     A7 00 68 FC | 	wrlong	#0, fp
270ac     08 4E 05 F1 | 	add	fp, #8
270b0     A7 00 68 FC | 	wrlong	#0, fp
270b4     04 4E 05 F1 | 	add	fp, #4
270b8     A7 04 68 FC | 	wrlong	#2, fp
270bc     04 4E 05 F1 | 	add	fp, #4
270c0     A7 00 68 FC | 	wrlong	#0, fp
270c4     04 4E 05 F1 | 	add	fp, #4
270c8     A7 00 68 FC | 	wrlong	#0, fp
270cc     04 4E 05 F1 | 	add	fp, #4
270d0     A7 00 68 FC | 	wrlong	#0, fp
270d4     04 4E 05 F1 | 	add	fp, #4
270d8     A7 00 68 FC | 	wrlong	#0, fp
270dc     18 4E 05 F1 | 	add	fp, #24
270e0     A7 00 68 FC | 	wrlong	#0, fp
270e4     68 4E 05 F1 | 	add	fp, #104
270e8     A7 26 02 F6 | 	mov	local01, fp
270ec     08 4E 85 F1 | 	sub	fp, #8
270f0     A7 26 62 FC | 	wrlong	local01, fp
270f4     04 4E 05 F1 | 	add	fp, #4
270f8     A7 26 62 FC | 	wrlong	local01, fp
270fc     BC 4E 85 F1 | 	sub	fp, #188
27100     A7 26 02 FB | 	rdlong	local01, fp
27104     10 26 46 F0 | 	shr	local01, #16
27108     3F 26 06 F5 | 	and	local01, #63
2710c     B0 4E 05 F1 | 	add	fp, #176
27110     A7 26 62 FC | 	wrlong	local01, fp
27114     B0 4E 85 F1 | 	sub	fp, #176
27118     A7 26 02 FB | 	rdlong	local01, fp
2711c     1C 26 46 F0 | 	shr	local01, #28
27120     01 26 06 F5 | 	and	local01, #1
27124     08 4F 05 F1 | 	add	fp, #264
27128     A7 26 62 FC | 	wrlong	local01, fp
2712c     58 4E 85 F1 | 	sub	fp, #88
27130     A7 26 0A FB | 	rdlong	local01, fp wz
27134     B8 4E 85 F1 | 	sub	fp, #184
27138     3C 00 90 5D |  if_ne	jmp	#LR__3341
2713c     10 4E 05 F1 | 	add	fp, #16
27140     A7 26 02 FB | 	rdlong	local01, fp
27144     10 4E 85 F1 | 	sub	fp, #16
27148     61 26 0E F2 | 	cmp	local01, #97 wz
2714c     18 00 90 5D |  if_ne	jmp	#LR__3340
27150     B8 4E 05 F1 | 	add	fp, #184
27154     A7 1A 68 FC | 	wrlong	#13, fp
27158     84 4E 85 F1 | 	sub	fp, #132
2715c     A7 02 68 FC | 	wrlong	#1, fp
27160     34 4E 85 F1 | 	sub	fp, #52
27164     24 00 90 FD | 	jmp	#LR__3342
27168                 | LR__3340
27168     B8 4E 05 F1 | 	add	fp, #184
2716c     A7 0C 68 FC | 	wrlong	#6, fp
27170     B8 4E 85 F1 | 	sub	fp, #184
27174     14 00 90 FD | 	jmp	#LR__3342
27178                 | LR__3341
27178     B8 4E 05 F1 | 	add	fp, #184
2717c     A7 26 02 FB | 	rdlong	local01, fp
27180     01 26 86 F1 | 	sub	local01, #1
27184     A7 26 62 FC | 	wrlong	local01, fp
27188     B8 4E 85 F1 | 	sub	fp, #184
2718c                 | LR__3342
2718c     08 4E 05 F1 | 	add	fp, #8
27190     A7 26 02 FB | 	rdlong	local01, fp
27194     16 26 46 F0 | 	shr	local01, #22
27198     03 26 06 F5 | 	and	local01, #3
2719c     04 4F 05 F1 | 	add	fp, #260
271a0     A7 26 62 FC | 	wrlong	local01, fp
271a4     04 4F 85 F1 | 	sub	fp, #260
271a8     A7 26 02 FB | 	rdlong	local01, fp
271ac     1D 26 46 F0 | 	shr	local01, #29
271b0     01 26 06 F5 | 	and	local01, #1
271b4     B4 4E 05 F1 | 	add	fp, #180
271b8     A7 26 62 FC | 	wrlong	local01, fp
271bc     B4 4E 85 F1 | 	sub	fp, #180
271c0     A7 26 02 FB | 	rdlong	local01, fp
271c4     13 27 EA F8 | 	getbyte	local01, local01, #1
271c8     60 4E 05 F1 | 	add	fp, #96
271cc     A7 26 62 FC | 	wrlong	local01, fp
271d0     60 4E 85 F1 | 	sub	fp, #96
271d4     A7 26 02 FB | 	rdlong	local01, fp
271d8     13 27 E2 F8 | 	getbyte	local01, local01, #0
271dc     64 4E 05 F1 | 	add	fp, #100
271e0     A7 26 62 FC | 	wrlong	local01, fp
271e4     00 26 06 F6 | 	mov	local01, #0
271e8     5C 4E 85 F1 | 	sub	fp, #92
271ec     A7 1A 02 FB | 	rdlong	arg05, fp
271f0     65 1A 0E F2 | 	cmp	arg05, #101 wz
271f4     01 26 06 A6 |  if_e	mov	local01, #1
271f8     14 4E 05 F1 | 	add	fp, #20
271fc     A7 26 62 FC | 	wrlong	local01, fp
27200     98 4E 05 F1 | 	add	fp, #152
27204     A7 28 0A FB | 	rdlong	local02, fp wz
27208     45 26 06 56 |  if_ne	mov	local01, #69
2720c     65 26 06 A6 |  if_e	mov	local01, #101
27210     8C 4E 85 F1 | 	sub	fp, #140
27214     A7 26 62 FC | 	wrlong	local01, fp
27218     20 4E 85 F1 | 	sub	fp, #32
2721c     A7 26 02 FB | 	rdlong	local01, fp
27220     10 4E 85 F1 | 	sub	fp, #16
27224     61 26 0E F2 | 	cmp	local01, #97 wz
27228     4C 00 90 5D |  if_ne	jmp	#LR__3343
2722c     24 4E 05 F1 | 	add	fp, #36
27230     A7 02 68 FC | 	wrlong	#1, fp
27234     98 4E 05 F1 | 	add	fp, #152
27238     A7 28 0A FB | 	rdlong	local02, fp wz
2723c     50 26 06 56 |  if_ne	mov	local01, #80
27240     70 26 06 A6 |  if_e	mov	local01, #112
27244     8C 4E 85 F1 | 	sub	fp, #140
27248     A7 26 62 FC | 	wrlong	local01, fp
2724c     14 4E 85 F1 | 	sub	fp, #20
27250     A7 04 68 FC | 	wrlong	#2, fp
27254     1C 4E 05 F1 | 	add	fp, #28
27258     A7 02 68 FC | 	wrlong	#1, fp
2725c     84 4E 05 F1 | 	add	fp, #132
27260     A7 28 0A FB | 	rdlong	local02, fp wz
27264     58 26 06 56 |  if_ne	mov	local01, #88
27268     78 26 06 A6 |  if_e	mov	local01, #120
2726c     7C 4E 85 F1 | 	sub	fp, #124
27270     A7 26 62 FC | 	wrlong	local01, fp
27274     40 4E 85 F1 | 	sub	fp, #64
27278                 | LR__3343
27278     10 4E 05 F1 | 	add	fp, #16
2727c     A7 26 02 FB | 	rdlong	local01, fp
27280     10 4E 85 F1 | 	sub	fp, #16
27284     23 26 0E F2 | 	cmp	local01, #35 wz
27288     3C 00 90 5D |  if_ne	jmp	#LR__3346
2728c     48 4E 05 F1 | 	add	fp, #72
27290     A7 02 68 FC | 	wrlong	#1, fp
27294     C8 4E 05 F1 | 	add	fp, #200
27298     A7 26 0A FB | 	rdlong	local01, fp wz
2729c     10 4F 85 F1 | 	sub	fp, #272
272a0     18 00 90 AD |  if_e	jmp	#LR__3344
272a4     10 4E 05 F1 | 	add	fp, #16
272a8     A7 CC 68 FC | 	wrlong	#102, fp
272ac     00 4F 05 F1 | 	add	fp, #256
272b0     A7 00 68 FC | 	wrlong	#0, fp
272b4     10 4F 85 F1 | 	sub	fp, #272
272b8     0C 00 90 FD | 	jmp	#LR__3345
272bc                 | LR__3344
272bc     10 4F 05 F1 | 	add	fp, #272
272c0     A7 02 68 FC | 	wrlong	#1, fp
272c4     10 4F 85 F1 | 	sub	fp, #272
272c8                 | LR__3345
272c8                 | LR__3346
272c8     08 4E 05 F1 | 	add	fp, #8
272cc     A7 26 02 FB | 	rdlong	local01, fp
272d0     1A 26 46 F0 | 	shr	local01, #26
272d4     03 26 06 F5 | 	and	local01, #3
272d8     5C 4E 05 F1 | 	add	fp, #92
272dc     A7 26 62 FC | 	wrlong	local01, fp
272e0     58 4E 85 F1 | 	sub	fp, #88
272e4     A7 FA 01 FB | 	rdlong	result1, fp
272e8     0C 4E 85 F1 | 	sub	fp, #12
272ec     1F FA 4D F0 | 	shr	result1, #31 wz
272f0     20 00 90 AD |  if_e	jmp	#LR__3347
272f4     2C 4E 05 F1 | 	add	fp, #44
272f8     A7 5A 68 FC | 	wrlong	#45, fp
272fc     20 4E 85 F1 | 	sub	fp, #32
27300     A7 FA 01 FB | 	rdlong	result1, fp
27304     1F FA E5 F4 | 	bitnot	result1, #31
27308     A7 FA 61 FC | 	wrlong	result1, fp
2730c     0C 4E 85 F1 | 	sub	fp, #12
27310     3C 00 90 FD | 	jmp	#LR__3349
27314                 | LR__3347
27314     64 4E 05 F1 | 	add	fp, #100
27318     A7 26 02 FB | 	rdlong	local01, fp
2731c     64 4E 85 F1 | 	sub	fp, #100
27320     01 26 0E F2 | 	cmp	local01, #1 wz
27324     2C 4E 05 A1 |  if_e	add	fp, #44
27328     A7 56 68 AC |  if_e	wrlong	#43, fp
2732c     2C 4E 85 A1 |  if_e	sub	fp, #44
27330     1C 00 90 AD |  if_e	jmp	#LR__3348
27334     64 4E 05 F1 | 	add	fp, #100
27338     A7 26 02 FB | 	rdlong	local01, fp
2733c     64 4E 85 F1 | 	sub	fp, #100
27340     02 26 0E F2 | 	cmp	local01, #2 wz
27344     2C 4E 05 A1 |  if_e	add	fp, #44
27348     A7 40 68 AC |  if_e	wrlong	#32, fp
2734c     2C 4E 85 A1 |  if_e	sub	fp, #44
27350                 | LR__3348
27350                 | LR__3349
27350     08 4E 05 F1 | 	add	fp, #8
27354     A7 26 02 FB | 	rdlong	local01, fp
27358     18 26 46 F0 | 	shr	local01, #24
2735c     03 26 06 F5 | 	and	local01, #3
27360     3C 4E 05 F1 | 	add	fp, #60
27364     A7 26 62 FC | 	wrlong	local01, fp
27368     00 26 06 F6 | 	mov	local01, #0
2736c     18 4E 85 F1 | 	sub	fp, #24
27370     A7 2A 0A FB | 	rdlong	local03, fp wz
27374     2C 4E 85 F1 | 	sub	fp, #44
27378     18 00 90 5D |  if_ne	jmp	#LR__3350
2737c     1C 4E 05 F1 | 	add	fp, #28
27380     A7 2C 02 FB | 	rdlong	local04, fp
27384     1C 4E 85 F1 | 	sub	fp, #28
27388     16 2F 02 F6 | 	mov	local05, local04
2738c     0A 2E 0E F2 | 	cmp	local05, #10 wz
27390     04 00 90 AD |  if_e	jmp	#LR__3351
27394                 | LR__3350
27394     01 26 66 F5 | 	xor	local01, #1
27398                 | LR__3351
27398     3C 4E 05 F1 | 	add	fp, #60
2739c     A7 26 62 FC | 	wrlong	local01, fp
273a0     3C 4E 85 F1 | 	sub	fp, #60
273a4     00 26 0E F2 | 	cmp	local01, #0 wz
273a8     0C 01 90 AD |  if_e	jmp	#LR__3353
273ac     44 4E 05 F1 | 	add	fp, #68
273b0     A7 2E 02 FB | 	rdlong	local05, fp
273b4     44 4E 85 F1 | 	sub	fp, #68
273b8     17 2B 02 F6 | 	mov	local03, local05
273bc     02 2A 0E F2 | 	cmp	local03, #2 wz
273c0     F4 00 90 5D |  if_ne	jmp	#LR__3353
273c4     0C 4F 05 F1 | 	add	fp, #268
273c8     A7 30 02 FB | 	rdlong	local06, fp
273cc     0C 4F 85 F1 | 	sub	fp, #268
273d0     18 2D 02 F6 | 	mov	local04, local06
273d4     02 2C 0E F2 | 	cmp	local04, #2 wz
273d8     DC 00 90 AD |  if_e	jmp	#LR__3353
273dc     C0 4E 05 F1 | 	add	fp, #192
273e0     A7 12 02 FB | 	rdlong	arg01, fp
273e4     94 4E 85 F1 | 	sub	fp, #148
273e8     A7 14 02 FB | 	rdlong	arg02, fp
273ec     14 4E 05 F1 | 	add	fp, #20
273f0     A7 16 02 FB | 	rdlong	arg03, fp
273f4     40 4E 85 F1 | 	sub	fp, #64
273f8     8C 47 B0 FD | 	call	#__system__emitsign_0562
273fc     14 4F 05 F1 | 	add	fp, #276
27400     A7 FA 61 FC | 	wrlong	result1, fp
27404     14 4F 85 F1 | 	sub	fp, #276
27408     00 FA 55 F2 | 	cmps	result1, #0 wc
2740c     14 4F 05 C1 |  if_b	add	fp, #276
27410     A7 FA 01 CB |  if_b	rdlong	result1, fp
27414     14 4F 85 C1 |  if_b	sub	fp, #276
27418     6C 0B 90 CD |  if_b	jmp	#LR__3403
2741c     C0 4E 05 F1 | 	add	fp, #192
27420     A7 26 02 FB | 	rdlong	local01, fp
27424     54 4E 05 F1 | 	add	fp, #84
27428     A7 2E 02 FB | 	rdlong	local05, fp
2742c     17 2B 02 F6 | 	mov	local03, local05
27430     17 27 02 F1 | 	add	local01, local05
27434     54 4E 85 F1 | 	sub	fp, #84
27438     A7 26 62 FC | 	wrlong	local01, fp
2743c     58 4E 85 F1 | 	sub	fp, #88
27440     A7 26 0A FB | 	rdlong	local01, fp wz
27444     68 4E 85 F1 | 	sub	fp, #104
27448     60 00 90 AD |  if_e	jmp	#LR__3352
2744c     68 4E 05 F1 | 	add	fp, #104
27450     A7 26 02 FB | 	rdlong	local01, fp
27454     AC 4E 05 F1 | 	add	fp, #172
27458     A7 2A 02 FB | 	rdlong	local03, fp
2745c     15 27 82 F1 | 	sub	local01, local03
27460     AC 4E 85 F1 | 	sub	fp, #172
27464     A7 26 62 FC | 	wrlong	local01, fp
27468     68 4E 85 F1 | 	sub	fp, #104
2746c     00 26 56 F2 | 	cmps	local01, #0 wc
27470     68 4E 05 C1 |  if_b	add	fp, #104
27474     A7 00 68 CC |  if_b	wrlong	#0, fp
27478     68 4E 85 C1 |  if_b	sub	fp, #104
2747c     08 4E 05 F1 | 	add	fp, #8
27480     A7 26 02 FB | 	rdlong	local01, fp
27484     E8 26 06 F4 | 	bitl	local01, #232
27488     A7 26 62 FC | 	wrlong	local01, fp
2748c     60 4E 05 F1 | 	add	fp, #96
27490     A7 2E 02 FB | 	rdlong	local05, fp
27494     17 2B 02 F6 | 	mov	local03, local05
27498     08 2A 66 F0 | 	shl	local03, #8
2749c     15 27 42 F5 | 	or	local01, local03
274a0     60 4E 85 F1 | 	sub	fp, #96
274a4     A7 26 62 FC | 	wrlong	local01, fp
274a8     08 4E 85 F1 | 	sub	fp, #8
274ac                 | LR__3352
274ac     3C 4E 05 F1 | 	add	fp, #60
274b0     A7 00 68 FC | 	wrlong	#0, fp
274b4     3C 4E 85 F1 | 	sub	fp, #60
274b8                 | LR__3353
274b8     0C 4E 05 F1 | 	add	fp, #12
274bc     A7 12 02 FB | 	rdlong	arg01, fp
274c0     0C 4E 85 F1 | 	sub	fp, #12
274c4     EC 21 B0 FD | 	call	#__system____builtin_ilogb
274c8     FF FF 3F FF 
274cc     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
274d0     50 00 90 5D |  if_ne	jmp	#LR__3355
274d4     2C 4E 05 F1 | 	add	fp, #44
274d8     A7 26 0A FB | 	rdlong	local01, fp wz
274dc     2C 4E 85 F1 | 	sub	fp, #44
274e0     24 00 90 AD |  if_e	jmp	#LR__3354
274e4     C0 4E 05 F1 | 	add	fp, #192
274e8     A7 28 02 FB | 	rdlong	local02, fp
274ec     14 2B 02 F6 | 	mov	local03, local02
274f0     01 2A 06 F1 | 	add	local03, #1
274f4     A7 2A 62 FC | 	wrlong	local03, fp
274f8     94 4E 85 F1 | 	sub	fp, #148
274fc     A7 2C 02 FB | 	rdlong	local04, fp
27500     2C 4E 85 F1 | 	sub	fp, #44
27504     14 2D 42 FC | 	wrbyte	local04, local02
27508                 | LR__3354
27508     C0 4E 05 F1 | 	add	fp, #192
2750c     A7 12 02 FB | 	rdlong	arg01, fp
27510     C0 4E 85 F1 | 	sub	fp, #192
27514     AD 01 00 FF 
27518     26 14 06 F6 | 	mov	arg02, ##@LR__5351
2751c     AC E9 BF FD | 	call	#__system____builtin_strcpy
27520     A4 08 90 FD | 	jmp	#LR__3391
27524                 | LR__3355
27524     0C 4E 05 F1 | 	add	fp, #12
27528     A7 28 02 FB | 	rdlong	local02, fp
2752c     0C 4E 85 F1 | 	sub	fp, #12
27530     14 13 02 F6 | 	mov	arg01, local02
27534     7C 21 B0 FD | 	call	#__system____builtin_ilogb
27538     00 00 40 FF 
2753c     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
27540     50 00 90 5D |  if_ne	jmp	#LR__3357
27544     2C 4E 05 F1 | 	add	fp, #44
27548     A7 26 0A FB | 	rdlong	local01, fp wz
2754c     2C 4E 85 F1 | 	sub	fp, #44
27550     24 00 90 AD |  if_e	jmp	#LR__3356
27554     C0 4E 05 F1 | 	add	fp, #192
27558     A7 28 02 FB | 	rdlong	local02, fp
2755c     14 2B 02 F6 | 	mov	local03, local02
27560     01 2A 06 F1 | 	add	local03, #1
27564     A7 2A 62 FC | 	wrlong	local03, fp
27568     94 4E 85 F1 | 	sub	fp, #148
2756c     A7 2C 02 FB | 	rdlong	local04, fp
27570     2C 4E 85 F1 | 	sub	fp, #44
27574     14 2D 42 FC | 	wrbyte	local04, local02
27578                 | LR__3356
27578     C0 4E 05 F1 | 	add	fp, #192
2757c     A7 12 02 FB | 	rdlong	arg01, fp
27580     C0 4E 85 F1 | 	sub	fp, #192
27584     AD 01 00 FF 
27588     2A 14 06 F6 | 	mov	arg02, ##@LR__5352
2758c     3C E9 BF FD | 	call	#__system____builtin_strcpy
27590     34 08 90 FD | 	jmp	#LR__3391
27594                 | LR__3357
27594     10 4E 05 F1 | 	add	fp, #16
27598     A7 26 02 FB | 	rdlong	local01, fp
2759c     10 4E 85 F1 | 	sub	fp, #16
275a0     67 26 0E F2 | 	cmp	local01, #103 wz
275a4     10 4E 05 51 |  if_ne	add	fp, #16
275a8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
275ac     10 4E 85 51 |  if_ne	sub	fp, #16
275b0     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
275b4     94 01 90 5D |  if_ne	jmp	#LR__3362
275b8     0C 4E 05 F1 | 	add	fp, #12
275bc     A7 12 02 FB | 	rdlong	arg01, fp
275c0     08 4E 05 F1 | 	add	fp, #8
275c4     A7 14 02 F6 | 	mov	arg02, fp
275c8     0C 4E 05 F1 | 	add	fp, #12
275cc     A7 16 02 F6 | 	mov	arg03, fp
275d0     98 4E 05 F1 | 	add	fp, #152
275d4     A7 18 02 FB | 	rdlong	arg04, fp
275d8     9C 4E 85 F1 | 	sub	fp, #156
275dc     A7 1A 02 FB | 	rdlong	arg05, fp
275e0     1C 4E 85 F1 | 	sub	fp, #28
275e4     AC 43 B0 FD | 	call	#__system__disassemble_0560
275e8     10 4E 05 F1 | 	add	fp, #16
275ec     A7 26 02 FB | 	rdlong	local01, fp
275f0     10 4E 85 F1 | 	sub	fp, #16
275f4     23 26 0E F2 | 	cmp	local01, #35 wz
275f8     A0 00 90 5D |  if_ne	jmp	#LR__3359
275fc     20 4E 05 F1 | 	add	fp, #32
27600     A7 26 02 FB | 	rdlong	local01, fp
27604     98 4E 05 F1 | 	add	fp, #152
27608     A7 2A 02 FB | 	rdlong	local03, fp
2760c     B8 4E 85 F1 | 	sub	fp, #184
27610     15 27 5A F2 | 	cmps	local01, local03 wcz
27614     24 4E 05 11 |  if_a	add	fp, #36
27618     A7 02 68 1C |  if_a	wrlong	#1, fp
2761c     24 4E 85 11 |  if_a	sub	fp, #36
27620     A4 01 90 1D |  if_a	jmp	#LR__3365
27624     20 4E 05 F1 | 	add	fp, #32
27628     A7 26 02 FB | 	rdlong	local01, fp
2762c     20 4E 85 F1 | 	sub	fp, #32
27630     00 26 56 F2 | 	cmps	local01, #0 wc
27634     2C 00 90 3D |  if_ae	jmp	#LR__3358
27638     B8 4E 05 F1 | 	add	fp, #184
2763c     A7 26 02 FB | 	rdlong	local01, fp
27640     13 27 62 F6 | 	neg	local01, local01
27644     98 4E 85 F1 | 	sub	fp, #152
27648     A7 2A 02 FB | 	rdlong	local03, fp
2764c     20 4E 85 F1 | 	sub	fp, #32
27650     13 2B 5A F2 | 	cmps	local03, local01 wcz
27654     24 4E 05 E1 |  if_be	add	fp, #36
27658     A7 02 68 EC |  if_be	wrlong	#1, fp
2765c     24 4E 85 E1 |  if_be	sub	fp, #36
27660     64 01 90 FD | 	jmp	#LR__3365
27664                 | LR__3358
27664     20 4E 05 F1 | 	add	fp, #32
27668     A7 26 02 FB | 	rdlong	local01, fp
2766c     20 4E 85 F1 | 	sub	fp, #32
27670     01 26 56 F2 | 	cmps	local01, #1 wc
27674     50 01 90 CD |  if_b	jmp	#LR__3365
27678     B8 4E 05 F1 | 	add	fp, #184
2767c     A7 26 02 FB | 	rdlong	local01, fp
27680     98 4E 85 F1 | 	sub	fp, #152
27684     A7 2A 02 FB | 	rdlong	local03, fp
27688     15 27 82 F1 | 	sub	local01, local03
2768c     98 4E 05 F1 | 	add	fp, #152
27690     A7 26 62 FC | 	wrlong	local01, fp
27694     B8 4E 85 F1 | 	sub	fp, #184
27698     2C 01 90 FD | 	jmp	#LR__3365
2769c                 | LR__3359
2769c     00 26 06 F6 | 	mov	local01, #0
276a0     08 4E 05 F1 | 	add	fp, #8
276a4     A7 28 02 FB | 	rdlong	local02, fp
276a8     1C 28 46 F0 | 	shr	local02, #28
276ac     01 28 0E F5 | 	and	local02, #1 wz
276b0     01 26 06 A6 |  if_e	mov	local01, #1
276b4     2C 4E 05 F1 | 	add	fp, #44
276b8     A7 26 62 FC | 	wrlong	local01, fp
276bc     14 4E 85 F1 | 	sub	fp, #20
276c0     A7 26 02 FB | 	rdlong	local01, fp
276c4     98 4E 05 F1 | 	add	fp, #152
276c8     A7 2A 02 FB | 	rdlong	local03, fp
276cc     B8 4E 85 F1 | 	sub	fp, #184
276d0     15 27 52 F2 | 	cmps	local01, local03 wc
276d4     18 00 90 3D |  if_ae	jmp	#LR__3360
276d8     20 4E 05 F1 | 	add	fp, #32
276dc     A7 2C 02 FB | 	rdlong	local04, fp
276e0     20 4E 85 F1 | 	sub	fp, #32
276e4     FF FF 7F FF 
276e8     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
276ec     10 00 90 3D |  if_ae	jmp	#LR__3361
276f0                 | LR__3360
276f0     24 4E 05 F1 | 	add	fp, #36
276f4     A7 02 68 FC | 	wrlong	#1, fp
276f8     24 4E 85 F1 | 	sub	fp, #36
276fc     C8 00 90 FD | 	jmp	#LR__3365
27700                 | LR__3361
27700     B8 4E 05 F1 | 	add	fp, #184
27704     A7 2C 02 FB | 	rdlong	local04, fp
27708     98 4E 85 F1 | 	sub	fp, #152
2770c     A7 2A 02 FB | 	rdlong	local03, fp
27710     15 2D 82 F1 | 	sub	local04, local03
27714     98 4E 05 F1 | 	add	fp, #152
27718     A7 2C 62 FC | 	wrlong	local04, fp
2771c     AC 4E 85 F1 | 	sub	fp, #172
27720     A7 12 02 FB | 	rdlong	arg01, fp
27724     08 4E 05 F1 | 	add	fp, #8
27728     A7 14 02 F6 | 	mov	arg02, fp
2772c     0C 4E 05 F1 | 	add	fp, #12
27730     A7 16 02 F6 | 	mov	arg03, fp
27734     16 19 62 F6 | 	neg	arg04, local04
27738     04 4E 85 F1 | 	sub	fp, #4
2773c     A7 1A 02 FB | 	rdlong	arg05, fp
27740     1C 4E 85 F1 | 	sub	fp, #28
27744     4C 42 B0 FD | 	call	#__system__disassemble_0560
27748     7C 00 90 FD | 	jmp	#LR__3365
2774c                 | LR__3362
2774c     24 4E 05 F1 | 	add	fp, #36
27750     A7 26 0A FB | 	rdlong	local01, fp wz
27754     24 4E 85 F1 | 	sub	fp, #36
27758     34 00 90 AD |  if_e	jmp	#LR__3363
2775c     0C 4E 05 F1 | 	add	fp, #12
27760     A7 12 02 FB | 	rdlong	arg01, fp
27764     08 4E 05 F1 | 	add	fp, #8
27768     A7 14 02 F6 | 	mov	arg02, fp
2776c     0C 4E 05 F1 | 	add	fp, #12
27770     A7 16 02 F6 | 	mov	arg03, fp
27774     98 4E 05 F1 | 	add	fp, #152
27778     A7 18 02 FB | 	rdlong	arg04, fp
2777c     9C 4E 85 F1 | 	sub	fp, #156
27780     A7 1A 02 FB | 	rdlong	arg05, fp
27784     1C 4E 85 F1 | 	sub	fp, #28
27788     08 42 B0 FD | 	call	#__system__disassemble_0560
2778c     38 00 90 FD | 	jmp	#LR__3364
27790                 | LR__3363
27790     0C 4E 05 F1 | 	add	fp, #12
27794     A7 12 02 FB | 	rdlong	arg01, fp
27798     08 4E 05 F1 | 	add	fp, #8
2779c     A7 14 02 F6 | 	mov	arg02, fp
277a0     0C 4E 05 F1 | 	add	fp, #12
277a4     A7 16 02 F6 | 	mov	arg03, fp
277a8     98 4E 05 F1 | 	add	fp, #152
277ac     A7 2C 02 FB | 	rdlong	local04, fp
277b0     01 2C 06 F1 | 	add	local04, #1
277b4     16 19 62 F6 | 	neg	arg04, local04
277b8     9C 4E 85 F1 | 	sub	fp, #156
277bc     A7 1A 02 FB | 	rdlong	arg05, fp
277c0     1C 4E 85 F1 | 	sub	fp, #28
277c4     CC 41 B0 FD | 	call	#__system__disassemble_0560
277c8                 | LR__3364
277c8                 | LR__3365
277c8     1C 4E 05 F1 | 	add	fp, #28
277cc     A7 26 02 FB | 	rdlong	local01, fp
277d0     1C 4E 85 F1 | 	sub	fp, #28
277d4     02 26 0E F2 | 	cmp	local01, #2 wz
277d8     4C 00 90 5D |  if_ne	jmp	#LR__3368
277dc     1C 4E 05 F1 | 	add	fp, #28
277e0     A7 20 68 FC | 	wrlong	#16, fp
277e4     1C 4E 85 F1 | 	sub	fp, #28
277e8                 | LR__3366
277e8     14 4E 05 F1 | 	add	fp, #20
277ec     A7 26 0A FB | 	rdlong	local01, fp wz
277f0     14 4E 85 F1 | 	sub	fp, #20
277f4     30 00 90 AD |  if_e	jmp	#LR__3367
277f8     14 4E 05 F1 | 	add	fp, #20
277fc     A7 2A 02 FB | 	rdlong	local03, fp
27800     14 4E 85 F1 | 	sub	fp, #20
27804     00 80 00 FF 
27808     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
2780c     18 00 90 3D |  if_ae	jmp	#LR__3367
27810     14 4E 05 F1 | 	add	fp, #20
27814     A7 26 02 FB | 	rdlong	local01, fp
27818     01 26 66 F0 | 	shl	local01, #1
2781c     A7 26 62 FC | 	wrlong	local01, fp
27820     14 4E 85 F1 | 	sub	fp, #20
27824     C0 FF 9F FD | 	jmp	#LR__3366
27828                 | LR__3367
27828                 | LR__3368
27828     70 4E 05 F1 | 	add	fp, #112
2782c     A7 12 02 F6 | 	mov	arg01, fp
27830     5C 4E 85 F1 | 	sub	fp, #92
27834     A7 14 02 FB | 	rdlong	arg02, fp
27838     08 4E 05 F1 | 	add	fp, #8
2783c     A7 16 02 FB | 	rdlong	arg03, fp
27840     A0 4E 05 F1 | 	add	fp, #160
27844     A7 1A 02 FB | 	rdlong	arg05, fp
27848     BC 4E 85 F1 | 	sub	fp, #188
2784c     01 18 06 F6 | 	mov	arg04, #1
27850     CC 40 B0 FD | 	call	#__system___uitoa
27854     58 4E 05 F1 | 	add	fp, #88
27858     A7 FA 61 FC | 	wrlong	result1, fp
2785c     38 4E 85 F1 | 	sub	fp, #56
27860     A7 26 02 FB | 	rdlong	local01, fp
27864     20 4E 85 F1 | 	sub	fp, #32
27868     00 26 56 F2 | 	cmps	local01, #0 wc
2786c     50 00 90 3D |  if_ae	jmp	#LR__3369
27870     60 4E 05 F1 | 	add	fp, #96
27874     A7 5A 68 FC | 	wrlong	#45, fp
27878     50 4E 05 F1 | 	add	fp, #80
2787c     A7 12 02 F6 | 	mov	arg01, fp
27880     90 4E 85 F1 | 	sub	fp, #144
27884     A7 2A 02 FB | 	rdlong	local03, fp
27888     15 15 62 F6 | 	neg	arg02, local03
2788c     18 4E 05 F1 | 	add	fp, #24
27890     A7 18 02 FB | 	rdlong	arg04, fp
27894     84 4E 05 F1 | 	add	fp, #132
27898     A7 30 02 FB | 	rdlong	local06, fp
2789c     BC 4E 85 F1 | 	sub	fp, #188
278a0     18 2D 02 F6 | 	mov	local04, local06
278a4     0A 16 06 F6 | 	mov	arg03, #10
278a8     16 1B 02 F6 | 	mov	arg05, local04
278ac     70 40 B0 FD | 	call	#__system___uitoa
278b0     5C 4E 05 F1 | 	add	fp, #92
278b4     A7 FA 61 FC | 	wrlong	result1, fp
278b8     5C 4E 85 F1 | 	sub	fp, #92
278bc     48 00 90 FD | 	jmp	#LR__3370
278c0                 | LR__3369
278c0     60 4E 05 F1 | 	add	fp, #96
278c4     A7 56 68 FC | 	wrlong	#43, fp
278c8     50 4E 05 F1 | 	add	fp, #80
278cc     A7 12 02 F6 | 	mov	arg01, fp
278d0     90 4E 85 F1 | 	sub	fp, #144
278d4     A7 14 02 FB | 	rdlong	arg02, fp
278d8     18 4E 05 F1 | 	add	fp, #24
278dc     A7 18 02 FB | 	rdlong	arg04, fp
278e0     84 4E 05 F1 | 	add	fp, #132
278e4     A7 30 02 FB | 	rdlong	local06, fp
278e8     BC 4E 85 F1 | 	sub	fp, #188
278ec     18 2D 02 F6 | 	mov	local04, local06
278f0     0A 16 06 F6 | 	mov	arg03, #10
278f4     16 1B 02 F6 | 	mov	arg05, local04
278f8     24 40 B0 FD | 	call	#__system___uitoa
278fc     5C 4E 05 F1 | 	add	fp, #92
27900     A7 FA 61 FC | 	wrlong	result1, fp
27904     5C 4E 85 F1 | 	sub	fp, #92
27908                 | LR__3370
27908     24 4E 05 F1 | 	add	fp, #36
2790c     A7 26 0A FB | 	rdlong	local01, fp wz
27910     24 4E 85 F1 | 	sub	fp, #36
27914     2C 00 90 AD |  if_e	jmp	#LR__3371
27918     50 4E 05 F1 | 	add	fp, #80
2791c     A7 00 68 FC | 	wrlong	#0, fp
27920     04 4E 85 F1 | 	sub	fp, #4
27924     A7 00 68 FC | 	wrlong	#0, fp
27928     6C 4E 05 F1 | 	add	fp, #108
2792c     A7 26 02 FB | 	rdlong	local01, fp
27930     01 26 06 F1 | 	add	local01, #1
27934     64 4E 85 F1 | 	sub	fp, #100
27938     A7 26 62 FC | 	wrlong	local01, fp
2793c     54 4E 85 F1 | 	sub	fp, #84
27940     88 00 90 FD | 	jmp	#LR__3374
27944                 | LR__3371
27944     20 4E 05 F1 | 	add	fp, #32
27948     A7 26 02 FB | 	rdlong	local01, fp
2794c     20 4E 85 F1 | 	sub	fp, #32
27950     00 26 56 F2 | 	cmps	local01, #0 wc
27954     40 00 90 3D |  if_ae	jmp	#LR__3372
27958     20 4E 05 F1 | 	add	fp, #32
2795c     A7 28 02 FB | 	rdlong	local02, fp
27960     30 4E 05 F1 | 	add	fp, #48
27964     A7 28 62 FC | 	wrlong	local02, fp
27968     04 4E 85 F1 | 	sub	fp, #4
2796c     A7 28 62 FC | 	wrlong	local02, fp
27970     2C 4E 85 F1 | 	sub	fp, #44
27974     A7 26 02 FB | 	rdlong	local01, fp
27978     98 4E 05 F1 | 	add	fp, #152
2797c     A7 2A 02 FB | 	rdlong	local03, fp
27980     15 27 02 F1 | 	add	local01, local03
27984     01 26 06 F1 | 	add	local01, #1
27988     64 4E 85 F1 | 	sub	fp, #100
2798c     A7 26 62 FC | 	wrlong	local01, fp
27990     54 4E 85 F1 | 	sub	fp, #84
27994     34 00 90 FD | 	jmp	#LR__3373
27998                 | LR__3372
27998     4C 4E 05 F1 | 	add	fp, #76
2799c     A7 00 68 FC | 	wrlong	#0, fp
279a0     2C 4E 85 F1 | 	sub	fp, #44
279a4     A7 26 02 FB | 	rdlong	local01, fp
279a8     30 4E 05 F1 | 	add	fp, #48
279ac     A7 26 62 FC | 	wrlong	local01, fp
279b0     68 4E 05 F1 | 	add	fp, #104
279b4     A7 2A 02 FB | 	rdlong	local03, fp
279b8     15 27 02 F1 | 	add	local01, local03
279bc     01 26 06 F1 | 	add	local01, #1
279c0     64 4E 85 F1 | 	sub	fp, #100
279c4     A7 26 62 FC | 	wrlong	local01, fp
279c8     54 4E 85 F1 | 	sub	fp, #84
279cc                 | LR__3373
279cc                 | LR__3374
279cc     54 4E 05 F1 | 	add	fp, #84
279d0     A7 26 02 FB | 	rdlong	local01, fp
279d4     08 4E 85 F1 | 	sub	fp, #8
279d8     A7 2A 02 FB | 	rdlong	local03, fp
279dc     15 27 82 F1 | 	sub	local01, local03
279e0     01 26 06 F1 | 	add	local01, #1
279e4     24 4E 85 F1 | 	sub	fp, #36
279e8     A7 26 62 FC | 	wrlong	local01, fp
279ec     04 4E 05 F1 | 	add	fp, #4
279f0     A7 26 0A FB | 	rdlong	local01, fp wz
279f4     2C 4E 85 F1 | 	sub	fp, #44
279f8     28 4E 05 51 |  if_ne	add	fp, #40
279fc     A7 2A 02 5B |  if_ne	rdlong	local03, fp
27a00     01 2A 06 51 |  if_ne	add	local03, #1
27a04     A7 2A 62 5C |  if_ne	wrlong	local03, fp
27a08     28 4E 85 51 |  if_ne	sub	fp, #40
27a0c     1C 4E 05 F1 | 	add	fp, #28
27a10     A7 26 02 FB | 	rdlong	local01, fp
27a14     1C 4E 85 F1 | 	sub	fp, #28
27a18     10 26 0E F2 | 	cmp	local01, #16 wz
27a1c     28 4E 05 A1 |  if_e	add	fp, #40
27a20     A7 26 02 AB |  if_e	rdlong	local01, fp
27a24     02 26 06 A1 |  if_e	add	local01, #2
27a28     A7 26 62 AC |  if_e	wrlong	local01, fp
27a2c     28 4E 85 A1 |  if_e	sub	fp, #40
27a30     24 4E 05 F1 | 	add	fp, #36
27a34     A7 26 0A FB | 	rdlong	local01, fp wz
27a38     24 4E 85 F1 | 	sub	fp, #36
27a3c     28 00 90 AD |  if_e	jmp	#LR__3375
27a40     28 4E 05 F1 | 	add	fp, #40
27a44     A7 26 02 FB | 	rdlong	local01, fp
27a48     02 2A 06 F6 | 	mov	local03, #2
27a4c     34 4E 05 F1 | 	add	fp, #52
27a50     A7 2E 02 FB | 	rdlong	local05, fp
27a54     17 2B 02 F1 | 	add	local03, local05
27a58     15 27 02 F1 | 	add	local01, local03
27a5c     34 4E 85 F1 | 	sub	fp, #52
27a60     A7 26 62 FC | 	wrlong	local01, fp
27a64     28 4E 85 F1 | 	sub	fp, #40
27a68                 | LR__3375
27a68     28 4E 05 F1 | 	add	fp, #40
27a6c     A7 26 02 FB | 	rdlong	local01, fp
27a70     28 4E 85 F1 | 	sub	fp, #40
27a74     41 26 56 F2 | 	cmps	local01, #65 wc
27a78     01 FA 65 36 |  if_ae	neg	result1, #1
27a7c     08 05 90 3D |  if_ae	jmp	#LR__3403
27a80     3C 4E 05 F1 | 	add	fp, #60
27a84     A7 26 0A FB | 	rdlong	local01, fp wz
27a88     3C 4E 85 F1 | 	sub	fp, #60
27a8c     60 00 90 AD |  if_e	jmp	#LR__3376
27a90     C0 4E 05 F1 | 	add	fp, #192
27a94     A7 12 02 FB | 	rdlong	arg01, fp
27a98     94 4E 85 F1 | 	sub	fp, #148
27a9c     A7 14 02 FB | 	rdlong	arg02, fp
27aa0     14 4E 05 F1 | 	add	fp, #20
27aa4     A7 16 02 FB | 	rdlong	arg03, fp
27aa8     40 4E 85 F1 | 	sub	fp, #64
27aac     D8 40 B0 FD | 	call	#__system__emitsign_0562
27ab0     18 4F 05 F1 | 	add	fp, #280
27ab4     A7 FA 61 FC | 	wrlong	result1, fp
27ab8     18 4F 85 F1 | 	sub	fp, #280
27abc     00 FA 55 F2 | 	cmps	result1, #0 wc
27ac0     18 4F 05 C1 |  if_b	add	fp, #280
27ac4     A7 FA 01 CB |  if_b	rdlong	result1, fp
27ac8     18 4F 85 C1 |  if_b	sub	fp, #280
27acc     B8 04 90 CD |  if_b	jmp	#LR__3403
27ad0     C0 4E 05 F1 | 	add	fp, #192
27ad4     A7 26 02 FB | 	rdlong	local01, fp
27ad8     58 4E 05 F1 | 	add	fp, #88
27adc     A7 2A 02 FB | 	rdlong	local03, fp
27ae0     15 27 02 F1 | 	add	local01, local03
27ae4     58 4E 85 F1 | 	sub	fp, #88
27ae8     A7 26 62 FC | 	wrlong	local01, fp
27aec     C0 4E 85 F1 | 	sub	fp, #192
27af0                 | LR__3376
27af0     4C 4E 05 F1 | 	add	fp, #76
27af4     A7 26 02 FB | 	rdlong	local01, fp
27af8     34 4E 85 F1 | 	sub	fp, #52
27afc     A7 26 62 FC | 	wrlong	local01, fp
27b00     18 4E 85 F1 | 	sub	fp, #24
27b04     97 9E 48 FB | 	callpa	#(@LR__3382-@LR__3377)>>2,fcache_load_ptr_
27b08                 | LR__3377
27b08     18 4E 05 F1 | 	add	fp, #24
27b0c     A7 28 02 FB | 	rdlong	local02, fp
27b10     3C 4E 05 F1 | 	add	fp, #60
27b14     A7 2E 02 FB | 	rdlong	local05, fp
27b18     54 4E 85 F1 | 	sub	fp, #84
27b1c     17 29 52 F2 | 	cmps	local02, local05 wc
27b20     20 01 90 3D |  if_ae	jmp	#LR__3383
27b24     18 4E 05 F1 | 	add	fp, #24
27b28     A7 30 02 FB | 	rdlong	local06, fp
27b2c     18 4E 85 F1 | 	sub	fp, #24
27b30     00 30 56 F2 | 	cmps	local06, #0 wc
27b34     58 00 90 CD |  if_b	jmp	#LR__3378
27b38     18 4E 05 F1 | 	add	fp, #24
27b3c     A7 30 02 FB | 	rdlong	local06, fp
27b40     40 4E 05 F1 | 	add	fp, #64
27b44     A7 32 02 FB | 	rdlong	local07, fp
27b48     58 4E 85 F1 | 	sub	fp, #88
27b4c     19 31 52 F2 | 	cmps	local06, local07 wc
27b50     3C 00 90 3D |  if_ae	jmp	#LR__3378
27b54     C0 4E 05 F1 | 	add	fp, #192
27b58     A7 34 02 FB | 	rdlong	local08, fp
27b5c     1A 33 02 F6 | 	mov	local07, local08
27b60     01 32 06 F1 | 	add	local07, #1
27b64     A7 32 62 FC | 	wrlong	local07, fp
27b68     A8 4E 85 F1 | 	sub	fp, #168
27b6c     A7 32 02 FB | 	rdlong	local07, fp
27b70     19 37 02 F6 | 	mov	local09, local07
27b74     58 4E 05 F1 | 	add	fp, #88
27b78     A7 38 02 F6 | 	mov	local10, fp
27b7c     A7 36 02 F1 | 	add	local09, fp
27b80     1B 3B C2 FA | 	rdbyte	local11, local09
27b84     1A 3B 42 FC | 	wrbyte	local11, local08
27b88     70 4E 85 F1 | 	sub	fp, #112
27b8c     20 00 90 FD | 	jmp	#LR__3379
27b90                 | LR__3378
27b90     C0 4E 05 F1 | 	add	fp, #192
27b94     A7 34 02 FB | 	rdlong	local08, fp
27b98     1A 37 02 F6 | 	mov	local09, local08
27b9c     01 36 06 F1 | 	add	local09, #1
27ba0     A7 36 62 FC | 	wrlong	local09, fp
27ba4     C0 4E 85 F1 | 	sub	fp, #192
27ba8     30 36 06 F6 | 	mov	local09, #48
27bac     1A 61 48 FC | 	wrbyte	#48, local08
27bb0                 | LR__3379
27bb0     18 4E 05 F1 | 	add	fp, #24
27bb4     A7 30 02 FB | 	rdlong	local06, fp
27bb8     38 4E 05 F1 | 	add	fp, #56
27bbc     A7 3C 02 FB | 	rdlong	local12, fp
27bc0     50 4E 85 F1 | 	sub	fp, #80
27bc4     1E 31 0A F2 | 	cmp	local06, local12 wz
27bc8     5C 00 90 5D |  if_ne	jmp	#LR__3381
27bcc     10 4F 05 F1 | 	add	fp, #272
27bd0     A7 32 02 FB | 	rdlong	local07, fp
27bd4     10 4F 85 F1 | 	sub	fp, #272
27bd8     19 37 0A F6 | 	mov	local09, local07 wz
27bdc     28 00 90 5D |  if_ne	jmp	#LR__3380
27be0     54 4E 05 F1 | 	add	fp, #84
27be4     A7 3A 02 FB | 	rdlong	local11, fp
27be8     1D 39 02 F6 | 	mov	local10, local11
27bec     01 38 86 F1 | 	sub	local10, #1
27bf0     3C 4E 85 F1 | 	sub	fp, #60
27bf4     A7 3E 02 FB | 	rdlong	local13, fp
27bf8     18 4E 85 F1 | 	sub	fp, #24
27bfc     1F 41 02 F6 | 	mov	local14, local13
27c00     1C 41 52 F2 | 	cmps	local14, local10 wc
27c04     20 00 90 3D |  if_ae	jmp	#LR__3381
27c08                 | LR__3380
27c08     C0 4E 05 F1 | 	add	fp, #192
27c0c     A7 34 02 FB | 	rdlong	local08, fp
27c10     1A 3D 02 F6 | 	mov	local12, local08
27c14     01 3C 06 F1 | 	add	local12, #1
27c18     A7 3C 62 FC | 	wrlong	local12, fp
27c1c     C0 4E 85 F1 | 	sub	fp, #192
27c20     2E 36 06 F6 | 	mov	local09, #46
27c24     1A 5D 48 FC | 	wrbyte	#46, local08
27c28                 | LR__3381
27c28     18 4E 05 F1 | 	add	fp, #24
27c2c     A7 42 02 FB | 	rdlong	local15, fp
27c30     21 3D 02 F6 | 	mov	local12, local15
27c34     01 3C 06 F1 | 	add	local12, #1
27c38     A7 3C 62 FC | 	wrlong	local12, fp
27c3c     18 4E 85 F1 | 	sub	fp, #24
27c40     C4 FE 9F FD | 	jmp	#LR__3377
27c44                 | LR__3382
27c44                 | LR__3383
27c44     34 4E 05 F1 | 	add	fp, #52
27c48     A7 26 0A FB | 	rdlong	local01, fp wz
27c4c     34 4E 85 F1 | 	sub	fp, #52
27c50     A0 00 90 AD |  if_e	jmp	#LR__3387
27c54     C0 4E 05 F1 | 	add	fp, #192
27c58     A7 26 02 FB | 	rdlong	local01, fp
27c5c     01 26 86 F1 | 	sub	local01, #1
27c60     A7 26 62 FC | 	wrlong	local01, fp
27c64     C0 4E 85 F1 | 	sub	fp, #192
27c68     97 26 48 FB | 	callpa	#(@LR__3385-@LR__3384)>>2,fcache_load_ptr_
27c6c                 | LR__3384
27c6c     C0 4E 05 F1 | 	add	fp, #192
27c70     A7 26 02 FB | 	rdlong	local01, fp
27c74     04 4E 05 F1 | 	add	fp, #4
27c78     A7 2A 02 FB | 	rdlong	local03, fp
27c7c     C4 4E 85 F1 | 	sub	fp, #196
27c80     15 27 5A F2 | 	cmps	local01, local03 wcz
27c84     30 00 90 ED |  if_be	jmp	#LR__3386
27c88     C0 4E 05 F1 | 	add	fp, #192
27c8c     A7 30 02 FB | 	rdlong	local06, fp
27c90     C0 4E 85 F1 | 	sub	fp, #192
27c94     18 2D C2 FA | 	rdbyte	local04, local06
27c98     30 2C 0E F2 | 	cmp	local04, #48 wz
27c9c     18 00 90 5D |  if_ne	jmp	#LR__3386
27ca0     C0 4E 05 F1 | 	add	fp, #192
27ca4     A7 26 02 FB | 	rdlong	local01, fp
27ca8     01 26 86 F1 | 	sub	local01, #1
27cac     A7 26 62 FC | 	wrlong	local01, fp
27cb0     C0 4E 85 F1 | 	sub	fp, #192
27cb4     B4 FF 9F FD | 	jmp	#LR__3384
27cb8                 | LR__3385
27cb8                 | LR__3386
27cb8     C0 4E 05 F1 | 	add	fp, #192
27cbc     A7 28 02 FB | 	rdlong	local02, fp
27cc0     C0 4E 85 F1 | 	sub	fp, #192
27cc4     14 27 C2 FA | 	rdbyte	local01, local02
27cc8     2E 26 0E F2 | 	cmp	local01, #46 wz
27ccc     C0 4E 05 A1 |  if_e	add	fp, #192
27cd0     A7 26 02 AB |  if_e	rdlong	local01, fp
27cd4     01 26 86 A1 |  if_e	sub	local01, #1
27cd8     A7 26 62 AC |  if_e	wrlong	local01, fp
27cdc     C0 4E 85 A1 |  if_e	sub	fp, #192
27ce0     C0 4E 05 F1 | 	add	fp, #192
27ce4     A7 2A 02 FB | 	rdlong	local03, fp
27ce8     01 2A 06 F1 | 	add	local03, #1
27cec     A7 2A 62 FC | 	wrlong	local03, fp
27cf0     C0 4E 85 F1 | 	sub	fp, #192
27cf4                 | LR__3387
27cf4     24 4E 05 F1 | 	add	fp, #36
27cf8     A7 26 0A FB | 	rdlong	local01, fp wz
27cfc     24 4E 85 F1 | 	sub	fp, #36
27d00     B4 00 90 AD |  if_e	jmp	#LR__3390
27d04     C0 4E 05 F1 | 	add	fp, #192
27d08     A7 28 02 FB | 	rdlong	local02, fp
27d0c     14 2B 02 F6 | 	mov	local03, local02
27d10     01 2A 06 F1 | 	add	local03, #1
27d14     A7 2A 62 FC | 	wrlong	local03, fp
27d18     90 4E 85 F1 | 	sub	fp, #144
27d1c     A7 2C 02 FB | 	rdlong	local04, fp
27d20     14 2D 42 FC | 	wrbyte	local04, local02
27d24     90 4E 05 F1 | 	add	fp, #144
27d28     A7 28 02 FB | 	rdlong	local02, fp
27d2c     14 2B 02 F6 | 	mov	local03, local02
27d30     01 2A 06 F1 | 	add	local03, #1
27d34     A7 2A 62 FC | 	wrlong	local03, fp
27d38     60 4E 85 F1 | 	sub	fp, #96
27d3c     A7 2C 02 FB | 	rdlong	local04, fp
27d40     14 2D 42 FC | 	wrbyte	local04, local02
27d44     48 4E 85 F1 | 	sub	fp, #72
27d48     A7 00 68 FC | 	wrlong	#0, fp
27d4c     18 4E 85 F1 | 	sub	fp, #24
27d50                 | LR__3388
27d50     18 4E 05 F1 | 	add	fp, #24
27d54     A7 28 02 FB | 	rdlong	local02, fp
27d58     44 4E 05 F1 | 	add	fp, #68
27d5c     A7 2E 02 FB | 	rdlong	local05, fp
27d60     5C 4E 85 F1 | 	sub	fp, #92
27d64     17 29 52 F2 | 	cmps	local02, local05 wc
27d68     4C 00 90 3D |  if_ae	jmp	#LR__3389
27d6c     C0 4E 05 F1 | 	add	fp, #192
27d70     A7 34 02 FB | 	rdlong	local08, fp
27d74     1A 3D 02 F6 | 	mov	local12, local08
27d78     01 3C 06 F1 | 	add	local12, #1
27d7c     A7 3C 62 FC | 	wrlong	local12, fp
27d80     A8 4E 85 F1 | 	sub	fp, #168
27d84     A7 32 02 FB | 	rdlong	local07, fp
27d88     19 37 02 F6 | 	mov	local09, local07
27d8c     98 4E 05 F1 | 	add	fp, #152
27d90     A7 38 02 F6 | 	mov	local10, fp
27d94     A7 36 02 F1 | 	add	local09, fp
27d98     1B 3B C2 FA | 	rdbyte	local11, local09
27d9c     1A 3B 42 FC | 	wrbyte	local11, local08
27da0     98 4E 85 F1 | 	sub	fp, #152
27da4     A7 3C 02 FB | 	rdlong	local12, fp
27da8     01 3C 06 F1 | 	add	local12, #1
27dac     A7 3C 62 FC | 	wrlong	local12, fp
27db0     18 4E 85 F1 | 	sub	fp, #24
27db4     98 FF 9F FD | 	jmp	#LR__3388
27db8                 | LR__3389
27db8                 | LR__3390
27db8     C0 4E 05 F1 | 	add	fp, #192
27dbc     A7 26 02 FB | 	rdlong	local01, fp
27dc0     C0 4E 85 F1 | 	sub	fp, #192
27dc4     13 01 48 FC | 	wrbyte	#0, local01
27dc8                 | LR__3391
27dc8     6C 4E 05 F1 | 	add	fp, #108
27dcc     A7 26 0A FB | 	rdlong	local01, fp wz
27dd0     6C 4E 85 F1 | 	sub	fp, #108
27dd4     90 01 90 AD |  if_e	jmp	#LR__3402
27dd8     48 4E 05 F1 | 	add	fp, #72
27ddc     A7 2A 0A FB | 	rdlong	local03, fp wz
27de0     48 4E 85 F1 | 	sub	fp, #72
27de4     80 01 90 AD |  if_e	jmp	#LR__3402
27de8     C4 4E 05 F1 | 	add	fp, #196
27dec     A7 12 02 FB | 	rdlong	arg01, fp
27df0     C4 4E 85 F1 | 	sub	fp, #196
27df4     09 45 02 F6 | 	mov	local16, arg01
27df8     97 06 48 FB | 	callpa	#(@LR__3393-@LR__3392)>>2,fcache_load_ptr_
27dfc                 | LR__3392
27dfc     22 FB C9 FA | 	rdbyte	result1, local16 wz
27e00     01 44 06 51 |  if_ne	add	local16, #1
27e04     F4 FF 9F 5D |  if_ne	jmp	#LR__3392
27e08                 | LR__3393
27e08     09 45 82 F1 | 	sub	local16, arg01
27e0c     22 2D 02 F6 | 	mov	local04, local16
27e10     6C 4E 05 F1 | 	add	fp, #108
27e14     A7 30 02 FB | 	rdlong	local06, fp
27e18     6C 4E 85 F1 | 	sub	fp, #108
27e1c     18 2D 5A F2 | 	cmps	local04, local06 wcz
27e20     44 01 90 ED |  if_be	jmp	#LR__3402
27e24     C4 4E 05 F1 | 	add	fp, #196
27e28     A7 26 02 FB | 	rdlong	local01, fp
27e2c     5C 4E 05 F1 | 	add	fp, #92
27e30     A7 26 62 FC | 	wrlong	local01, fp
27e34     FC 4E 85 F1 | 	sub	fp, #252
27e38     A7 26 0A FB | 	rdlong	local01, fp wz
27e3c     24 4E 85 F1 | 	sub	fp, #36
27e40     20 00 90 AD |  if_e	jmp	#LR__3394
27e44     B8 4E 05 F1 | 	add	fp, #184
27e48     A7 00 68 FC | 	wrlong	#0, fp
27e4c     4C 4E 85 F1 | 	sub	fp, #76
27e50     A7 26 02 FB | 	rdlong	local01, fp
27e54     B0 4E 05 F1 | 	add	fp, #176
27e58     A7 26 62 FC | 	wrlong	local01, fp
27e5c     1C 4F 85 F1 | 	sub	fp, #284
27e60     24 00 90 FD | 	jmp	#LR__3395
27e64                 | LR__3394
27e64     6C 4E 05 F1 | 	add	fp, #108
27e68     A7 26 02 FB | 	rdlong	local01, fp
27e6c     01 26 86 F1 | 	sub	local01, #1
27e70     4C 4E 05 F1 | 	add	fp, #76
27e74     A7 2A 02 FB | 	rdlong	local03, fp
27e78     15 27 82 F1 | 	sub	local01, local03
27e7c     64 4E 05 F1 | 	add	fp, #100
27e80     A7 26 62 FC | 	wrlong	local01, fp
27e84     1C 4F 85 F1 | 	sub	fp, #284
27e88                 | LR__3395
27e88     97 20 48 FB | 	callpa	#(@LR__3397-@LR__3396)>>2,fcache_load_ptr_
27e8c                 | LR__3396
27e8c     1C 4F 05 F1 | 	add	fp, #284
27e90     A7 26 0A FB | 	rdlong	local01, fp wz
27e94     1C 4F 85 F1 | 	sub	fp, #284
27e98     30 00 90 AD |  if_e	jmp	#LR__3398
27e9c     20 4F 05 F1 | 	add	fp, #288
27ea0     A7 28 02 FB | 	rdlong	local02, fp
27ea4     14 2B 02 F6 | 	mov	local03, local02
27ea8     01 2A 06 F1 | 	add	local03, #1
27eac     A7 2A 62 FC | 	wrlong	local03, fp
27eb0     14 55 48 FC | 	wrbyte	#42, local02
27eb4     04 4E 85 F1 | 	sub	fp, #4
27eb8     A7 26 02 FB | 	rdlong	local01, fp
27ebc     01 26 86 F1 | 	sub	local01, #1
27ec0     A7 26 62 FC | 	wrlong	local01, fp
27ec4     1C 4F 85 F1 | 	sub	fp, #284
27ec8     C0 FF 9F FD | 	jmp	#LR__3396
27ecc                 | LR__3397
27ecc                 | LR__3398
27ecc     B8 4E 05 F1 | 	add	fp, #184
27ed0     A7 26 0A FB | 	rdlong	local01, fp wz
27ed4     B8 4E 85 F1 | 	sub	fp, #184
27ed8     70 00 90 AD |  if_e	jmp	#LR__3401
27edc     20 4F 05 F1 | 	add	fp, #288
27ee0     A7 28 02 FB | 	rdlong	local02, fp
27ee4     14 2B 02 F6 | 	mov	local03, local02
27ee8     01 2A 06 F1 | 	add	local03, #1
27eec     A7 2A 62 FC | 	wrlong	local03, fp
27ef0     14 5D 48 FC | 	wrbyte	#46, local02
27ef4     04 4E 85 F1 | 	sub	fp, #4
27ef8     A7 00 68 FC | 	wrlong	#0, fp
27efc     1C 4F 85 F1 | 	sub	fp, #284
27f00                 | LR__3399
27f00     1C 4F 05 F1 | 	add	fp, #284
27f04     A7 28 02 FB | 	rdlong	local02, fp
27f08     64 4E 85 F1 | 	sub	fp, #100
27f0c     A7 2E 02 FB | 	rdlong	local05, fp
27f10     B8 4E 85 F1 | 	sub	fp, #184
27f14     17 29 52 F2 | 	cmps	local02, local05 wc
27f18     30 00 90 3D |  if_ae	jmp	#LR__3400
27f1c     20 4F 05 F1 | 	add	fp, #288
27f20     A7 34 02 FB | 	rdlong	local08, fp
27f24     1A 3D 02 F6 | 	mov	local12, local08
27f28     01 3C 06 F1 | 	add	local12, #1
27f2c     A7 3C 62 FC | 	wrlong	local12, fp
27f30     1A 55 48 FC | 	wrbyte	#42, local08
27f34     04 4E 85 F1 | 	sub	fp, #4
27f38     A7 3C 02 FB | 	rdlong	local12, fp
27f3c     01 3C 06 F1 | 	add	local12, #1
27f40     A7 3C 62 FC | 	wrlong	local12, fp
27f44     1C 4F 85 F1 | 	sub	fp, #284
27f48     B4 FF 9F FD | 	jmp	#LR__3399
27f4c                 | LR__3400
27f4c                 | LR__3401
27f4c     20 4F 05 F1 | 	add	fp, #288
27f50     A7 28 02 FB | 	rdlong	local02, fp
27f54     14 2B 02 F6 | 	mov	local03, local02
27f58     01 2A 06 F1 | 	add	local03, #1
27f5c     A7 2A 62 FC | 	wrlong	local03, fp
27f60     20 4F 85 F1 | 	sub	fp, #288
27f64     14 01 48 FC | 	wrbyte	#0, local02
27f68                 | LR__3402
27f68     04 4E 05 F1 | 	add	fp, #4
27f6c     A7 12 02 FB | 	rdlong	arg01, fp
27f70     04 4E 05 F1 | 	add	fp, #4
27f74     A7 14 02 FB | 	rdlong	arg02, fp
27f78     BC 4E 05 F1 | 	add	fp, #188
27f7c     A7 16 02 FB | 	rdlong	arg03, fp
27f80     C4 4E 85 F1 | 	sub	fp, #196
27f84     C4 EE BF FD | 	call	#__system___fmtstr
27f88                 | LR__3403
27f88     A7 F0 03 F6 | 	mov	ptra, fp
27f8c     B2 00 A0 FD | 	call	#popregs_
27f90                 | __system___fmtfloat_ret
27f90     2D 00 64 FD | 	ret
27f94                 | 
27f94                 | __system__Left_S
27f94     04 4A 05 F6 | 	mov	COUNT_, #4
27f98     A8 00 A0 FD | 	call	#pushregs_
27f9c     09 27 02 F6 | 	mov	local01, arg01
27fa0     0A 29 02 F6 | 	mov	local02, arg02
27fa4     01 28 56 F2 | 	cmps	local02, #1 wc
27fa8     AD 01 00 CF 
27fac     2E FA 05 C6 |  if_b	mov	result1, ##@LR__5353
27fb0     5C 00 90 CD |  if_b	jmp	#LR__3413
27fb4     13 13 02 F6 | 	mov	arg01, local01
27fb8     09 2B 02 F6 | 	mov	local03, arg01
27fbc     97 06 48 FB | 	callpa	#(@LR__3411-@LR__3410)>>2,fcache_load_ptr_
27fc0                 | LR__3410
27fc0     15 FB C9 FA | 	rdbyte	result1, local03 wz
27fc4     01 2A 06 51 |  if_ne	add	local03, #1
27fc8     F4 FF 9F 5D |  if_ne	jmp	#LR__3410
27fcc                 | LR__3411
27fcc     09 2B 82 F1 | 	sub	local03, arg01
27fd0     15 FB 01 F6 | 	mov	result1, local03
27fd4     14 FB 59 F2 | 	cmps	result1, local02 wcz
27fd8     13 FB 01 E6 |  if_be	mov	result1, local01
27fdc     30 00 90 ED |  if_be	jmp	#LR__3413
27fe0     14 13 02 F6 | 	mov	arg01, local02
27fe4     02 12 06 F1 | 	add	arg01, #2
27fe8     CC 20 B0 FD | 	call	#__system___gc_alloc_managed
27fec     FD 2C 0A F6 | 	mov	local04, result1 wz
27ff0     18 00 90 AD |  if_e	jmp	#LR__3412
27ff4     16 13 02 F6 | 	mov	arg01, local04
27ff8     13 15 02 F6 | 	mov	arg02, local01
27ffc     14 17 02 F6 | 	mov	arg03, local02
28000     34 DE BF FD | 	call	#__system____builtin_memmove
28004     16 29 02 F1 | 	add	local02, local04
28008     14 01 48 FC | 	wrbyte	#0, local02
2800c                 | LR__3412
2800c     16 FB 01 F6 | 	mov	result1, local04
28010                 | LR__3413
28010     A7 F0 03 F6 | 	mov	ptra, fp
28014     B2 00 A0 FD | 	call	#popregs_
28018                 | __system__Left_S_ret
28018     2D 00 64 FD | 	ret
2801c                 | 
2801c                 | __system__Right_S
2801c     05 4A 05 F6 | 	mov	COUNT_, #5
28020     A8 00 A0 FD | 	call	#pushregs_
28024     09 27 02 F6 | 	mov	local01, arg01
28028     0A 29 02 F6 | 	mov	local02, arg02
2802c     01 28 56 F2 | 	cmps	local02, #1 wc
28030     AD 01 00 CF 
28034     2F FA 05 C6 |  if_b	mov	result1, ##@LR__5354
28038     64 00 90 CD |  if_b	jmp	#LR__3423
2803c     13 13 02 F6 | 	mov	arg01, local01
28040     09 2B 02 F6 | 	mov	local03, arg01
28044     97 06 48 FB | 	callpa	#(@LR__3421-@LR__3420)>>2,fcache_load_ptr_
28048                 | LR__3420
28048     15 FB C9 FA | 	rdbyte	result1, local03 wz
2804c     01 2A 06 51 |  if_ne	add	local03, #1
28050     F4 FF 9F 5D |  if_ne	jmp	#LR__3420
28054                 | LR__3421
28054     09 2B 82 F1 | 	sub	local03, arg01
28058     15 FB 01 F6 | 	mov	result1, local03
2805c     FD 2C 02 F6 | 	mov	local04, result1
28060     14 2D 5A F2 | 	cmps	local04, local02 wcz
28064     13 FB 01 E6 |  if_be	mov	result1, local01
28068     34 00 90 ED |  if_be	jmp	#LR__3423
2806c     14 13 02 F6 | 	mov	arg01, local02
28070     02 12 06 F1 | 	add	arg01, #2
28074     40 20 B0 FD | 	call	#__system___gc_alloc_managed
28078     FD 2E 0A F6 | 	mov	local05, result1 wz
2807c     1C 00 90 AD |  if_e	jmp	#LR__3422
28080     14 2D 82 F1 | 	sub	local04, local02
28084     13 2D 02 F1 | 	add	local04, local01
28088     01 28 06 F1 | 	add	local02, #1
2808c     17 13 02 F6 | 	mov	arg01, local05
28090     16 15 02 F6 | 	mov	arg02, local04
28094     14 17 02 F6 | 	mov	arg03, local02
28098     9C DD BF FD | 	call	#__system____builtin_memmove
2809c                 | LR__3422
2809c     17 FB 01 F6 | 	mov	result1, local05
280a0                 | LR__3423
280a0     A7 F0 03 F6 | 	mov	ptra, fp
280a4     B2 00 A0 FD | 	call	#popregs_
280a8                 | __system__Right_S_ret
280a8     2D 00 64 FD | 	ret
280ac                 | 
280ac                 | __system__Mid_S
280ac     05 4A 05 F6 | 	mov	COUNT_, #5
280b0     A8 00 A0 FD | 	call	#pushregs_
280b4     09 27 02 F6 | 	mov	local01, arg01
280b8     0A 29 02 F6 | 	mov	local02, arg02
280bc     01 16 56 F2 | 	cmps	arg03, #1 wc
280c0     AD 01 00 CF 
280c4     30 FA 05 C6 |  if_b	mov	result1, ##@LR__5355
280c8     80 00 90 CD |  if_b	jmp	#LR__3433
280cc     01 28 86 F1 | 	sub	local02, #1
280d0     00 28 56 F3 | 	fges	local02, #0 wc
280d4     13 13 02 F6 | 	mov	arg01, local01
280d8     09 2B 02 F6 | 	mov	local03, arg01
280dc     97 06 48 FB | 	callpa	#(@LR__3431-@LR__3430)>>2,fcache_load_ptr_
280e0                 | LR__3430
280e0     15 FB C9 FA | 	rdbyte	result1, local03 wz
280e4     01 2A 06 51 |  if_ne	add	local03, #1
280e8     F4 FF 9F 5D |  if_ne	jmp	#LR__3430
280ec                 | LR__3431
280ec     09 2B 82 F1 | 	sub	local03, arg01
280f0     15 FB 01 F6 | 	mov	result1, local03
280f4     FD 14 02 F6 | 	mov	arg02, result1
280f8     14 15 52 F2 | 	cmps	arg02, local02 wc
280fc     AD 01 00 CF 
28100     31 FA 05 C6 |  if_b	mov	result1, ##@LR__5356
28104     44 00 90 CD |  if_b	jmp	#LR__3433
28108     0A 2D 02 F6 | 	mov	local04, arg02
2810c     14 2D 82 F1 | 	sub	local04, local02
28110     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
28114     0B 2D 02 16 |  if_a	mov	local04, arg03
28118     16 13 02 F6 | 	mov	arg01, local04
2811c     02 12 06 F1 | 	add	arg01, #2
28120     94 1F B0 FD | 	call	#__system___gc_alloc_managed
28124     FD 2E 0A F6 | 	mov	local05, result1 wz
28128     1C 00 90 AD |  if_e	jmp	#LR__3432
2812c     13 29 02 F1 | 	add	local02, local01
28130     17 13 02 F6 | 	mov	arg01, local05
28134     14 15 02 F6 | 	mov	arg02, local02
28138     16 17 02 F6 | 	mov	arg03, local04
2813c     F8 DC BF FD | 	call	#__system____builtin_memmove
28140     17 2D 02 F1 | 	add	local04, local05
28144     16 01 48 FC | 	wrbyte	#0, local04
28148                 | LR__3432
28148     17 FB 01 F6 | 	mov	result1, local05
2814c                 | LR__3433
2814c     A7 F0 03 F6 | 	mov	ptra, fp
28150     B2 00 A0 FD | 	call	#popregs_
28154                 | __system__Mid_S_ret
28154     2D 00 64 FD | 	ret
28158                 | 
28158                 | __system__Chr_S
28158     01 4A 05 F6 | 	mov	COUNT_, #1
2815c     A8 00 A0 FD | 	call	#pushregs_
28160     09 27 02 F6 | 	mov	local01, arg01
28164     03 12 06 F6 | 	mov	arg01, #3
28168     4C 1F B0 FD | 	call	#__system___gc_alloc_managed
2816c     00 FA 4D F2 | 	cmps	result1, #0 wz
28170     FD 26 42 5C |  if_ne	wrbyte	local01, result1
28174     01 FA 05 51 |  if_ne	add	result1, #1
28178     FD 00 48 5C |  if_ne	wrbyte	#0, result1
2817c     01 FA 85 51 |  if_ne	sub	result1, #1
28180     A7 F0 03 F6 | 	mov	ptra, fp
28184     B2 00 A0 FD | 	call	#popregs_
28188                 | __system__Chr_S_ret
28188     2D 00 64 FD | 	ret
2818c                 | 
2818c                 | __system__str_S
2818c     02 4A 05 F6 | 	mov	COUNT_, #2
28190     A8 00 A0 FD | 	call	#pushregs_
28194     09 27 02 F6 | 	mov	local01, arg01
28198     10 12 06 F6 | 	mov	arg01, #16
2819c     18 1F B0 FD | 	call	#__system___gc_alloc_managed
281a0     FD 28 0A F6 | 	mov	local02, result1 wz
281a4     30 00 90 AD |  if_e	jmp	#LR__3440
281a8     F8 13 02 F6 | 	mov	arg01, ptra
281ac     08 F0 07 F1 | 	add	ptra, #8
281b0     09 29 62 FC | 	wrlong	local02, arg01
281b4     04 12 06 F1 | 	add	arg01, #4
281b8     09 01 68 FC | 	wrlong	#0, arg01
281bc     04 12 86 F1 | 	sub	arg01, #4
281c0     00 20 05 FF 
281c4     00 12 46 F5 | 	or	arg01, ##171966464
281c8     00 14 06 F6 | 	mov	arg02, #0
281cc     13 17 02 F6 | 	mov	arg03, local01
281d0     67 18 06 F6 | 	mov	arg04, #103
281d4     90 EE BF FD | 	call	#__system___fmtfloat
281d8                 | LR__3440
281d8     14 FB 01 F6 | 	mov	result1, local02
281dc     A7 F0 03 F6 | 	mov	ptra, fp
281e0     B2 00 A0 FD | 	call	#popregs_
281e4                 | __system__str_S_ret
281e4     2D 00 64 FD | 	ret
281e8                 | 
281e8                 | __system__Number_S
281e8     08 4A 05 F6 | 	mov	COUNT_, #8
281ec     A8 00 A0 FD | 	call	#pushregs_
281f0     09 27 02 F6 | 	mov	local01, arg01
281f4     0A 29 0A F6 | 	mov	local02, arg02 wz
281f8     0B 2B 02 F6 | 	mov	local03, arg03
281fc     3C 00 90 5D |  if_ne	jmp	#LR__3452
28200     01 28 06 F6 | 	mov	local02, #1
28204     15 2D 02 F6 | 	mov	local04, local03
28208     01 2E 06 F6 | 	mov	local05, #1
2820c     97 16 48 FB | 	callpa	#(@LR__3451-@LR__3450)>>2,fcache_load_ptr_
28210                 | LR__3450
28210     00 30 06 F6 | 	mov	local06, #0
28214     13 2D 1A F2 | 	cmp	local04, local01 wcz
28218     01 30 66 E6 |  if_be	neg	local06, #1
2821c     16 2F 12 F2 | 	cmp	local05, local04 wc
28220     19 33 A2 F1 | 	subx	local07, local07
28224     19 31 CA F7 | 	test	local06, local07 wz
28228     15 2D 02 5D |  if_ne	qmul	local04, local03
2822c     16 2F 02 56 |  if_ne	mov	local05, local04
28230     01 28 06 51 |  if_ne	add	local02, #1
28234     18 2C 62 5D |  if_ne	getqx	local04
28238     D4 FF 9F 5D |  if_ne	jmp	#LR__3450
2823c                 | LR__3451
2823c                 | LR__3452
2823c     20 28 36 F3 | 	fle	local02, #32 wc
28240     14 13 02 F6 | 	mov	arg01, local02
28244     02 12 06 F1 | 	add	arg01, #2
28248     6C 1E B0 FD | 	call	#__system___gc_alloc_managed
2824c     FD 30 02 F6 | 	mov	local06, result1
28250     14 33 02 F6 | 	mov	local07, local02
28254     18 33 02 F1 | 	add	local07, local06
28258     19 01 48 FC | 	wrbyte	#0, local07
2825c     97 1A 48 FB | 	callpa	#(@LR__3454-@LR__3453)>>2,fcache_load_ptr_
28260                 | LR__3453
28260     01 28 16 F2 | 	cmp	local02, #1 wc
28264     2C 00 90 CD |  if_b	jmp	#LR__3455
28268     15 27 12 FD | 	qdiv	local01, local03
2826c     01 28 86 F1 | 	sub	local02, #1
28270     14 33 02 F6 | 	mov	local07, local02
28274     18 33 02 F1 | 	add	local07, local06
28278     19 34 62 FD | 	getqy	local08
2827c     0A 34 16 F2 | 	cmp	local08, #10 wc
28280     30 34 06 C1 |  if_b	add	local08, #48
28284     37 34 06 31 |  if_ae	add	local08, #55
28288     19 35 42 FC | 	wrbyte	local08, local07
2828c     18 26 62 FD | 	getqx	local01
28290     CC FF 9F FD | 	jmp	#LR__3453
28294                 | LR__3454
28294                 | LR__3455
28294     18 FB 01 F6 | 	mov	result1, local06
28298     A7 F0 03 F6 | 	mov	ptra, fp
2829c     B2 00 A0 FD | 	call	#popregs_
282a0                 | __system__Number_S_ret
282a0     2D 00 64 FD | 	ret
282a4                 | 
282a4                 | __system__LCase_S
282a4     07 4A 05 F6 | 	mov	COUNT_, #7
282a8     A8 00 A0 FD | 	call	#pushregs_
282ac     09 27 02 F6 | 	mov	local01, arg01
282b0     09 29 02 F6 | 	mov	local02, arg01
282b4     97 06 48 FB | 	callpa	#(@LR__3461-@LR__3460)>>2,fcache_load_ptr_
282b8                 | LR__3460
282b8     14 FB C9 FA | 	rdbyte	result1, local02 wz
282bc     01 28 06 51 |  if_ne	add	local02, #1
282c0     F4 FF 9F 5D |  if_ne	jmp	#LR__3460
282c4                 | LR__3461
282c4     09 29 82 F1 | 	sub	local02, arg01
282c8     14 FB 01 F6 | 	mov	result1, local02
282cc     FD 28 0A F6 | 	mov	local02, result1 wz
282d0     AD 01 00 AF 
282d4     32 FA 05 A6 |  if_e	mov	result1, ##@LR__5357
282d8     7C 00 90 AD |  if_e	jmp	#LR__3467
282dc     14 13 02 F6 | 	mov	arg01, local02
282e0     02 12 06 F1 | 	add	arg01, #2
282e4     D0 1D B0 FD | 	call	#__system___gc_alloc_managed
282e8     FD 2A 0A F6 | 	mov	local03, result1 wz
282ec     64 00 90 AD |  if_e	jmp	#LR__3466
282f0     01 2C 66 F6 | 	neg	local04, #1
282f4     97 26 48 FB | 	callpa	#(@LR__3465-@LR__3462)>>2,fcache_load_ptr_
282f8                 | LR__3462
282f8     01 2C 06 F1 | 	add	local04, #1
282fc     16 2F 02 F6 | 	mov	local05, local04
28300     13 2F 02 F1 | 	add	local05, local01
28304     17 31 C2 FA | 	rdbyte	local06, local05
28308     41 30 56 F2 | 	cmps	local06, #65 wc
2830c     18 00 90 CD |  if_b	jmp	#LR__3463
28310     5B 30 56 F2 | 	cmps	local06, #91 wc
28314     16 33 02 C6 |  if_b	mov	local07, local04
28318     15 33 02 C1 |  if_b	add	local07, local03
2831c     20 30 06 C1 |  if_b	add	local06, #32
28320     19 31 42 CC |  if_b	wrbyte	local06, local07
28324     0C 00 90 CD |  if_b	jmp	#LR__3464
28328                 | LR__3463
28328     16 33 02 F6 | 	mov	local07, local04
2832c     15 33 02 F1 | 	add	local07, local03
28330     19 31 42 FC | 	wrbyte	local06, local07
28334                 | LR__3464
28334     14 31 02 F6 | 	mov	local06, local02
28338     01 30 86 F1 | 	sub	local06, #1
2833c     18 2D 0A F2 | 	cmp	local04, local06 wz
28340     B4 FF 9F 5D |  if_ne	jmp	#LR__3462
28344                 | LR__3465
28344     15 29 02 F1 | 	add	local02, local03
28348     14 01 48 FC | 	wrbyte	#0, local02
2834c     15 FB 01 F6 | 	mov	result1, local03
28350     04 00 90 FD | 	jmp	#LR__3467
28354                 | LR__3466
28354     15 FB 01 F6 | 	mov	result1, local03
28358                 | LR__3467
28358     A7 F0 03 F6 | 	mov	ptra, fp
2835c     B2 00 A0 FD | 	call	#popregs_
28360                 | __system__LCase_S_ret
28360     2D 00 64 FD | 	ret
28364                 | 
28364                 | __system__LTrim_S
28364     05 4A 05 F6 | 	mov	COUNT_, #5
28368     A8 00 A0 FD | 	call	#pushregs_
2836c     09 27 02 F6 | 	mov	local01, arg01
28370     09 29 02 F6 | 	mov	local02, arg01
28374     97 06 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
28378                 | LR__3470
28378     14 FB C9 FA | 	rdbyte	result1, local02 wz
2837c     01 28 06 51 |  if_ne	add	local02, #1
28380     F4 FF 9F 5D |  if_ne	jmp	#LR__3470
28384                 | LR__3471
28384     09 29 82 F1 | 	sub	local02, arg01
28388     14 FB 01 F6 | 	mov	result1, local02
2838c     FD 28 0A F6 | 	mov	local02, result1 wz
28390     AD 01 00 AF 
28394     33 FA 05 A6 |  if_e	mov	result1, ##@LR__5358
28398     7C 00 90 AD |  if_e	jmp	#LR__3476
2839c     00 2A 06 F6 | 	mov	local03, #0
283a0     14 2D 02 F6 | 	mov	local04, local02
283a4                 | LR__3472
283a4     16 2B 52 F2 | 	cmps	local03, local04 wc
283a8     68 00 90 3D |  if_ae	jmp	#LR__3475
283ac     15 17 02 F6 | 	mov	arg03, local03
283b0     13 17 02 F1 | 	add	arg03, local01
283b4     0B 17 C2 FA | 	rdbyte	arg03, arg03
283b8     20 16 0E F2 | 	cmp	arg03, #32 wz
283bc     4C 00 90 AD |  if_e	jmp	#LR__3474
283c0     14 13 02 F6 | 	mov	arg01, local02
283c4     15 13 82 F1 | 	sub	arg01, local03
283c8     02 12 06 F1 | 	add	arg01, #2
283cc     E8 1C B0 FD | 	call	#__system___gc_alloc_managed
283d0     FD 2E 0A F6 | 	mov	local05, result1 wz
283d4     2C 00 90 AD |  if_e	jmp	#LR__3473
283d8     15 15 02 F6 | 	mov	arg02, local03
283dc     13 15 02 F1 | 	add	arg02, local01
283e0     14 17 02 F6 | 	mov	arg03, local02
283e4     15 17 82 F1 | 	sub	arg03, local03
283e8     17 13 02 F6 | 	mov	arg01, local05
283ec     48 DA BF FD | 	call	#__system____builtin_memmove
283f0     15 29 82 F1 | 	sub	local02, local03
283f4     17 29 02 F1 | 	add	local02, local05
283f8     14 01 48 FC | 	wrbyte	#0, local02
283fc     17 FB 01 F6 | 	mov	result1, local05
28400     14 00 90 FD | 	jmp	#LR__3476
28404                 | LR__3473
28404     17 FB 01 F6 | 	mov	result1, local05
28408     0C 00 90 FD | 	jmp	#LR__3476
2840c                 | LR__3474
2840c     01 2A 06 F1 | 	add	local03, #1
28410     90 FF 9F FD | 	jmp	#LR__3472
28414                 | LR__3475
28414     13 FB 01 F6 | 	mov	result1, local01
28418                 | LR__3476
28418     A7 F0 03 F6 | 	mov	ptra, fp
2841c     B2 00 A0 FD | 	call	#popregs_
28420                 | __system__LTrim_S_ret
28420     2D 00 64 FD | 	ret
28424                 | 
28424                 | __system__RTrim_S
28424     04 4A 05 F6 | 	mov	COUNT_, #4
28428     A8 00 A0 FD | 	call	#pushregs_
2842c     09 27 02 F6 | 	mov	local01, arg01
28430     09 29 02 F6 | 	mov	local02, arg01
28434     97 06 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
28438                 | LR__3480
28438     14 FB C9 FA | 	rdbyte	result1, local02 wz
2843c     01 28 06 51 |  if_ne	add	local02, #1
28440     F4 FF 9F 5D |  if_ne	jmp	#LR__3480
28444                 | LR__3481
28444     09 29 82 F1 | 	sub	local02, arg01
28448     14 FB 01 F6 | 	mov	result1, local02
2844c     FD 28 0A F6 | 	mov	local02, result1 wz
28450     AD 01 00 AF 
28454     34 FA 05 A6 |  if_e	mov	result1, ##@LR__5359
28458     74 00 90 AD |  if_e	jmp	#LR__3485
2845c     14 2B 02 F6 | 	mov	local03, local02
28460     01 2A 86 F1 | 	sub	local03, #1
28464                 | LR__3482
28464     15 15 02 F6 | 	mov	arg02, local03
28468     13 15 02 F1 | 	add	arg02, local01
2846c     0A 29 C2 FA | 	rdbyte	local02, arg02
28470     20 28 0E F2 | 	cmp	local02, #32 wz
28474     44 00 90 AD |  if_e	jmp	#LR__3484
28478     15 13 02 F6 | 	mov	arg01, local03
2847c     02 12 06 F1 | 	add	arg01, #2
28480     34 1C B0 FD | 	call	#__system___gc_alloc_managed
28484     FD 2C 0A F6 | 	mov	local04, result1 wz
28488     28 00 90 AD |  if_e	jmp	#LR__3483
2848c     15 17 02 F6 | 	mov	arg03, local03
28490     01 16 06 F1 | 	add	arg03, #1
28494     16 13 02 F6 | 	mov	arg01, local04
28498     13 15 02 F6 | 	mov	arg02, local01
2849c     98 D9 BF FD | 	call	#__system____builtin_memmove
284a0     01 2A 06 F1 | 	add	local03, #1
284a4     16 2B 02 F1 | 	add	local03, local04
284a8     15 01 48 FC | 	wrbyte	#0, local03
284ac     16 FB 01 F6 | 	mov	result1, local04
284b0     1C 00 90 FD | 	jmp	#LR__3485
284b4                 | LR__3483
284b4     16 FB 01 F6 | 	mov	result1, local04
284b8     14 00 90 FD | 	jmp	#LR__3485
284bc                 | LR__3484
284bc     01 2A 86 F1 | 	sub	local03, #1
284c0     00 2A 56 F2 | 	cmps	local03, #0 wc
284c4     9C FF 9F 3D |  if_ae	jmp	#LR__3482
284c8     AD 01 00 FF 
284cc     35 FA 05 F6 | 	mov	result1, ##@LR__5360
284d0                 | LR__3485
284d0     A7 F0 03 F6 | 	mov	ptra, fp
284d4     B2 00 A0 FD | 	call	#popregs_
284d8                 | __system__RTrim_S_ret
284d8     2D 00 64 FD | 	ret
284dc                 | 
284dc                 | __system__Instr
284dc     07 4A 05 F6 | 	mov	COUNT_, #7
284e0     A8 00 A0 FD | 	call	#pushregs_
284e4     09 27 02 F6 | 	mov	local01, arg01
284e8     0A 29 02 F6 | 	mov	local02, arg02
284ec     0B 2B 02 F6 | 	mov	local03, arg03
284f0     15 13 02 F6 | 	mov	arg01, local03
284f4     09 2D 02 F6 | 	mov	local04, arg01
284f8     97 06 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
284fc                 | LR__3490
284fc     16 FB C9 FA | 	rdbyte	result1, local04 wz
28500     01 2C 06 51 |  if_ne	add	local04, #1
28504     F4 FF 9F 5D |  if_ne	jmp	#LR__3490
28508                 | LR__3491
28508     09 2D 82 F1 | 	sub	local04, arg01
2850c     16 2F 02 F6 | 	mov	local05, local04
28510     14 13 02 F6 | 	mov	arg01, local02
28514     09 2D 02 F6 | 	mov	local04, arg01
28518     97 06 48 FB | 	callpa	#(@LR__3493-@LR__3492)>>2,fcache_load_ptr_
2851c                 | LR__3492
2851c     16 FB C9 FA | 	rdbyte	result1, local04 wz
28520     01 2C 06 51 |  if_ne	add	local04, #1
28524     F4 FF 9F 5D |  if_ne	jmp	#LR__3492
28528                 | LR__3493
28528     09 2D 82 F1 | 	sub	local04, arg01
2852c     16 FB 01 F6 | 	mov	result1, local04
28530     FD 18 0A F6 | 	mov	arg04, result1 wz
28534     00 FA 05 A6 |  if_e	mov	result1, #0
28538     98 00 90 AD |  if_e	jmp	#LR__3497
2853c     00 2E 0E F2 | 	cmp	local05, #0 wz
28540     00 FA 05 A6 |  if_e	mov	result1, #0
28544     8C 00 90 AD |  if_e	jmp	#LR__3497
28548     0C 27 5A F2 | 	cmps	local01, arg04 wcz
2854c     00 FA 05 16 |  if_a	mov	result1, #0
28550     80 00 90 1D |  if_a	jmp	#LR__3497
28554     01 26 56 F2 | 	cmps	local01, #1 wc
28558     01 26 06 C6 |  if_b	mov	local01, #1
2855c     15 31 C2 FA | 	rdbyte	local06, local03
28560     01 2E 0E F2 | 	cmp	local05, #1 wz
28564     18 00 90 5D |  if_ne	jmp	#LR__3494
28568     14 13 02 F6 | 	mov	arg01, local02
2856c     18 15 02 F6 | 	mov	arg02, local06
28570     13 17 02 F6 | 	mov	arg03, local01
28574     00 18 06 F6 | 	mov	arg04, #0
28578     14 37 B0 FD | 	call	#__system____ScanForChar
2857c     54 00 90 FD | 	jmp	#LR__3497
28580                 | LR__3494
28580     13 33 02 F6 | 	mov	local07, local01
28584                 | LR__3495
28584     14 13 02 F6 | 	mov	arg01, local02
28588     18 15 02 F6 | 	mov	arg02, local06
2858c     19 17 02 F6 | 	mov	arg03, local07
28590     00 18 06 F6 | 	mov	arg04, #0
28594     F8 36 B0 FD | 	call	#__system____ScanForChar
28598     FD 32 0A F6 | 	mov	local07, result1 wz
2859c     30 00 90 AD |  if_e	jmp	#LR__3496
285a0     17 17 02 F6 | 	mov	arg03, local05
285a4     14 13 02 F6 | 	mov	arg01, local02
285a8     19 15 02 F6 | 	mov	arg02, local07
285ac     FC FA BF FD | 	call	#__system__Mid_S
285b0     FD 12 02 F6 | 	mov	arg01, result1
285b4     15 15 02 F6 | 	mov	arg02, local03
285b8     84 D9 BF FD | 	call	#__system___string_cmp
285bc     00 FA 0D F2 | 	cmp	result1, #0 wz
285c0     19 FB 01 A6 |  if_e	mov	result1, local07
285c4     0C 00 90 AD |  if_e	jmp	#LR__3497
285c8     17 33 02 F1 | 	add	local07, local05
285cc     B4 FF 9F FD | 	jmp	#LR__3495
285d0                 | LR__3496
285d0     00 FA 05 F6 | 	mov	result1, #0
285d4                 | LR__3497
285d4     A7 F0 03 F6 | 	mov	ptra, fp
285d8     B2 00 A0 FD | 	call	#popregs_
285dc                 | __system__Instr_ret
285dc     2D 00 64 FD | 	ret
285e0                 | 
285e0                 | __system__InstrRev
285e0     07 4A 05 F6 | 	mov	COUNT_, #7
285e4     A8 00 A0 FD | 	call	#pushregs_
285e8     09 27 02 F6 | 	mov	local01, arg01
285ec     0A 29 02 F6 | 	mov	local02, arg02
285f0     0B 2B 02 F6 | 	mov	local03, arg03
285f4     15 13 02 F6 | 	mov	arg01, local03
285f8     09 2D 02 F6 | 	mov	local04, arg01
285fc     97 06 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
28600                 | LR__3500
28600     16 FB C9 FA | 	rdbyte	result1, local04 wz
28604     01 2C 06 51 |  if_ne	add	local04, #1
28608     F4 FF 9F 5D |  if_ne	jmp	#LR__3500
2860c                 | LR__3501
2860c     09 2D 82 F1 | 	sub	local04, arg01
28610     16 2F 02 F6 | 	mov	local05, local04
28614     14 13 02 F6 | 	mov	arg01, local02
28618     09 2D 02 F6 | 	mov	local04, arg01
2861c     97 06 48 FB | 	callpa	#(@LR__3503-@LR__3502)>>2,fcache_load_ptr_
28620                 | LR__3502
28620     16 FB C9 FA | 	rdbyte	result1, local04 wz
28624     01 2C 06 51 |  if_ne	add	local04, #1
28628     F4 FF 9F 5D |  if_ne	jmp	#LR__3502
2862c                 | LR__3503
2862c     09 2D 82 F1 | 	sub	local04, arg01
28630     16 FB 01 F6 | 	mov	result1, local04
28634     FD 18 0A F6 | 	mov	arg04, result1 wz
28638     00 FA 05 A6 |  if_e	mov	result1, #0
2863c     98 00 90 AD |  if_e	jmp	#LR__3507
28640     00 2E 0E F2 | 	cmp	local05, #0 wz
28644     00 FA 05 A6 |  if_e	mov	result1, #0
28648     8C 00 90 AD |  if_e	jmp	#LR__3507
2864c     0C 27 5A F2 | 	cmps	local01, arg04 wcz
28650     0C 27 02 16 |  if_a	mov	local01, arg04
28654     01 26 56 F2 | 	cmps	local01, #1 wc
28658     01 26 06 C6 |  if_b	mov	local01, #1
2865c     15 31 C2 FA | 	rdbyte	local06, local03
28660     01 2E 0E F2 | 	cmp	local05, #1 wz
28664     18 00 90 5D |  if_ne	jmp	#LR__3504
28668     14 13 02 F6 | 	mov	arg01, local02
2866c     18 15 02 F6 | 	mov	arg02, local06
28670     13 17 02 F6 | 	mov	arg03, local01
28674     01 18 06 F6 | 	mov	arg04, #1
28678     14 36 B0 FD | 	call	#__system____ScanForChar
2867c     58 00 90 FD | 	jmp	#LR__3507
28680                 | LR__3504
28680     17 33 02 F6 | 	mov	local07, local05
28684     01 32 86 F1 | 	sub	local07, #1
28688                 | LR__3505
28688     14 13 02 F6 | 	mov	arg01, local02
2868c     18 15 02 F6 | 	mov	arg02, local06
28690     19 17 02 F6 | 	mov	arg03, local07
28694     01 18 06 F6 | 	mov	arg04, #1
28698     F4 35 B0 FD | 	call	#__system____ScanForChar
2869c     FD 32 0A F6 | 	mov	local07, result1 wz
286a0     30 00 90 AD |  if_e	jmp	#LR__3506
286a4     17 17 02 F6 | 	mov	arg03, local05
286a8     14 13 02 F6 | 	mov	arg01, local02
286ac     19 15 02 F6 | 	mov	arg02, local07
286b0     F8 F9 BF FD | 	call	#__system__Mid_S
286b4     FD 12 02 F6 | 	mov	arg01, result1
286b8     15 15 02 F6 | 	mov	arg02, local03
286bc     80 D8 BF FD | 	call	#__system___string_cmp
286c0     00 FA 0D F2 | 	cmp	result1, #0 wz
286c4     19 FB 01 A6 |  if_e	mov	result1, local07
286c8     0C 00 90 AD |  if_e	jmp	#LR__3507
286cc     17 33 82 F1 | 	sub	local07, local05
286d0     B4 FF 9F FD | 	jmp	#LR__3505
286d4                 | LR__3506
286d4     00 FA 05 F6 | 	mov	result1, #0
286d8                 | LR__3507
286d8     A7 F0 03 F6 | 	mov	ptra, fp
286dc     B2 00 A0 FD | 	call	#popregs_
286e0                 | __system__InstrRev_ret
286e0     2D 00 64 FD | 	ret
286e4                 | 
286e4                 | __system___remove
286e4     06 4A 05 F6 | 	mov	COUNT_, #6
286e8     A8 00 A0 FD | 	call	#pushregs_
286ec     84 E7 05 F1 | 	add	ptr___system__dat__, #388
286f0     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
286f4     09 15 02 F6 | 	mov	arg02, arg01
286f8     13 13 02 F6 | 	mov	arg01, local01
286fc     00 16 06 F6 | 	mov	arg03, #0
28700     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
28704     A8 DF BF FD | 	call	#__system____getvfsforfile
28708     FD 28 0A F6 | 	mov	local02, result1 wz
2870c     10 00 90 AD |  if_e	jmp	#LR__3510
28710     20 28 06 F1 | 	add	local02, #32
28714     14 13 0A FB | 	rdlong	arg01, local02 wz
28718     20 28 86 F1 | 	sub	local02, #32
2871c     14 00 90 5D |  if_ne	jmp	#LR__3511
28720                 | LR__3510
28720     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28724     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
28728     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2872c     01 FA 65 F6 | 	neg	result1, #1
28730     A8 00 90 FD | 	jmp	#LR__3514
28734                 | LR__3511
28734     40 28 06 F1 | 	add	local02, #64
28738     14 2B 02 FB | 	rdlong	local03, local02
2873c     15 2D 02 F6 | 	mov	local04, local03
28740     40 28 86 F1 | 	sub	local02, #64
28744     13 2C 46 F7 | 	zerox	local04, #19
28748     14 2A 46 F0 | 	shr	local03, #20
2874c     02 2A 66 F0 | 	shl	local03, #2
28750     ED 2A 02 F1 | 	add	local03, __methods__
28754     15 2B 02 FB | 	rdlong	local03, local03
28758     13 13 02 F6 | 	mov	arg01, local01
2875c     F2 2E 02 F6 | 	mov	local05, objptr
28760     16 E5 01 F6 | 	mov	objptr, local04
28764     2D 2A 62 FD | 	call	local03
28768     17 E5 01 F6 | 	mov	objptr, local05
2876c     FD 30 02 F6 | 	mov	local06, result1
28770     FF FF 7F FF 
28774     F2 31 0E F2 | 	cmp	local06, ##-14 wz
28778     38 00 90 5D |  if_ne	jmp	#LR__3512
2877c     3C 28 06 F1 | 	add	local02, #60
28780     14 31 02 FB | 	rdlong	local06, local02
28784     18 2B 02 F6 | 	mov	local03, local06
28788     13 30 46 F7 | 	zerox	local06, #19
2878c     14 2A 46 F0 | 	shr	local03, #20
28790     02 2A 66 F0 | 	shl	local03, #2
28794     ED 2A 02 F1 | 	add	local03, __methods__
28798     15 2B 02 FB | 	rdlong	local03, local03
2879c     13 13 02 F6 | 	mov	arg01, local01
287a0     F2 2E 02 F6 | 	mov	local05, objptr
287a4     18 E5 01 F6 | 	mov	objptr, local06
287a8     2D 2A 62 FD | 	call	local03
287ac     17 E5 01 F6 | 	mov	objptr, local05
287b0     FD 30 02 F6 | 	mov	local06, result1
287b4                 | LR__3512
287b4     00 30 0E F2 | 	cmp	local06, #0 wz
287b8     1C 00 90 AD |  if_e	jmp	#LR__3513
287bc     18 13 6A F6 | 	neg	arg01, local06 wz
287c0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
287c4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
287c8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
287cc     01 FA 65 56 |  if_ne	neg	result1, #1
287d0     00 FA 05 A6 |  if_e	mov	result1, #0
287d4     04 00 90 FD | 	jmp	#LR__3514
287d8                 | LR__3513
287d8     00 FA 05 F6 | 	mov	result1, #0
287dc                 | LR__3514
287dc     A7 F0 03 F6 | 	mov	ptra, fp
287e0     B2 00 A0 FD | 	call	#popregs_
287e4                 | __system___remove_ret
287e4     2D 00 64 FD | 	ret
287e8                 | 
287e8                 | __system___mkdir
287e8     05 4A 05 F6 | 	mov	COUNT_, #5
287ec     A8 00 A0 FD | 	call	#pushregs_
287f0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
287f4     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
287f8     09 15 02 F6 | 	mov	arg02, arg01
287fc     13 13 02 F6 | 	mov	arg01, local01
28800     00 16 06 F6 | 	mov	arg03, #0
28804     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
28808     A4 DE BF FD | 	call	#__system____getvfsforfile
2880c     FD 28 0A F6 | 	mov	local02, result1 wz
28810     10 00 90 AD |  if_e	jmp	#LR__3520
28814     20 28 06 F1 | 	add	local02, #32
28818     14 15 0A FB | 	rdlong	arg02, local02 wz
2881c     20 28 86 F1 | 	sub	local02, #32
28820     14 00 90 5D |  if_ne	jmp	#LR__3521
28824                 | LR__3520
28824     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28828     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2882c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28830     01 FA 65 F6 | 	neg	result1, #1
28834     60 00 90 FD | 	jmp	#LR__3523
28838                 | LR__3521
28838     38 28 06 F1 | 	add	local02, #56
2883c     14 2B 02 FB | 	rdlong	local03, local02
28840     15 2D 02 F6 | 	mov	local04, local03
28844     13 2A 46 F7 | 	zerox	local03, #19
28848     14 2C 46 F0 | 	shr	local04, #20
2884c     02 2C 66 F0 | 	shl	local04, #2
28850     ED 2C 02 F1 | 	add	local04, __methods__
28854     16 2D 02 FB | 	rdlong	local04, local04
28858     13 13 02 F6 | 	mov	arg01, local01
2885c     FF 15 06 F6 | 	mov	arg02, #511
28860     F2 2E 02 F6 | 	mov	local05, objptr
28864     15 E5 01 F6 | 	mov	objptr, local03
28868     2D 2C 62 FD | 	call	local04
2886c     17 E5 01 F6 | 	mov	objptr, local05
28870     FD 12 0A F6 | 	mov	arg01, result1 wz
28874     1C 00 90 AD |  if_e	jmp	#LR__3522
28878     09 13 6A F6 | 	neg	arg01, arg01 wz
2887c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28880     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
28884     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28888     01 FA 65 56 |  if_ne	neg	result1, #1
2888c     00 FA 05 A6 |  if_e	mov	result1, #0
28890     04 00 90 FD | 	jmp	#LR__3523
28894                 | LR__3522
28894     00 FA 05 F6 | 	mov	result1, #0
28898                 | LR__3523
28898     A7 F0 03 F6 | 	mov	ptra, fp
2889c     B2 00 A0 FD | 	call	#popregs_
288a0                 | __system___mkdir_ret
288a0     2D 00 64 FD | 	ret
288a4                 | 
288a4                 | __system___strerror
288a4     00 12 56 F2 | 	cmps	arg01, #0 wc
288a8     08 00 90 CD |  if_b	jmp	#LR__3530
288ac     1A 12 56 F2 | 	cmps	arg01, #26 wc
288b0     04 00 90 CD |  if_b	jmp	#LR__3531
288b4                 | LR__3530
288b4     19 12 06 F6 | 	mov	arg01, #25
288b8                 | LR__3531
288b8     02 12 66 F0 | 	shl	arg01, #2
288bc     01 00 00 FF 
288c0     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
288c4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
288c8     09 FB 01 FB | 	rdlong	result1, arg01
288cc     01 00 00 FF 
288d0     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
288d4                 | __system___strerror_ret
288d4     2D 00 64 FD | 	ret
288d8                 | 
288d8                 | __system___int64_shl
288d8     20 16 CE F7 | 	test	arg03, #32 wz
288dc     09 15 02 56 |  if_ne	mov	arg02, arg01
288e0     00 12 06 56 |  if_ne	mov	arg01, #0
288e4     1F 16 CE F7 | 	test	arg03, #31 wz
288e8     18 00 90 AD |  if_e	jmp	#LR__3540
288ec     0B 15 62 F0 | 	shl	arg02, arg03
288f0     09 FB 01 F6 | 	mov	result1, arg01
288f4     0B FD 61 F6 | 	neg	result2, arg03
288f8     FE FA 41 F0 | 	shr	result1, result2
288fc     FD 14 42 F5 | 	or	arg02, result1
28900     0B 13 62 F0 | 	shl	arg01, arg03
28904                 | LR__3540
28904     0A FD 01 F6 | 	mov	result2, arg02
28908     09 FB 01 F6 | 	mov	result1, arg01
2890c                 | __system___int64_shl_ret
2890c     2D 00 64 FD | 	ret
28910                 | 
28910                 | __system___usepins
28910     14 E6 05 F1 | 	add	ptr___system__dat__, #20
28914     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
28918     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
2891c     00 13 CA F7 | 	test	arg01, _var01 wz
28920     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
28924     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
28928     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
2892c     01 15 CA A7 |  if_e	test	arg02, _var02 wz
28930     00 FA 05 56 |  if_ne	mov	result1, #0
28934     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
28938     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2893c     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
28940     09 03 42 F5 | 	or	_var02, arg01
28944     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
28948     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2894c     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
28950     0A 03 42 F5 | 	or	_var02, arg02
28954     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
28958     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
2895c     01 FA 65 F6 | 	neg	result1, #1
28960                 | __system___usepins_ret
28960     2D 00 64 FD | 	ret
28964                 | 
28964                 | __system___freepins
28964     14 E6 05 F1 | 	add	ptr___system__dat__, #20
28968     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2896c     09 01 22 F5 | 	andn	_var01, arg01
28970     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
28974     04 E6 05 F1 | 	add	ptr___system__dat__, #4
28978     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2897c     0A 01 22 F5 | 	andn	_var01, arg02
28980     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
28984     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
28988                 | __system___freepins_ret
28988     2D 00 64 FD | 	ret
2898c                 | 
2898c                 | __system___float_fromuns
2898c     09 17 0A F6 | 	mov	arg03, arg01 wz
28990     0B FB 01 A6 |  if_e	mov	result1, arg03
28994     24 00 90 AD |  if_e	jmp	#LR__3550
28998     0B 15 92 F7 | 	encod	arg02, arg03 wc
2899c     01 14 06 C1 |  if_b	add	arg02, #1
289a0     01 14 86 F1 | 	sub	arg02, #1
289a4     1F 12 06 F6 | 	mov	arg01, #31
289a8     0A 13 82 F1 | 	sub	arg01, arg02
289ac     09 17 62 F0 | 	shl	arg03, arg01
289b0     02 16 46 F0 | 	shr	arg03, #2
289b4     00 12 06 F6 | 	mov	arg01, #0
289b8     4C 09 B0 FD | 	call	#__system___float_Pack
289bc                 | LR__3550
289bc                 | __system___float_fromuns_ret
289bc     2D 00 64 FD | 	ret
289c0                 | 
289c0                 | __system___float_add
289c0     0F 4A 05 F6 | 	mov	COUNT_, #15
289c4     A8 00 A0 FD | 	call	#pushregs_
289c8     09 27 02 F6 | 	mov	local01, arg01
289cc     0A 29 02 F6 | 	mov	local02, arg02
289d0     00 2A 06 F6 | 	mov	local03, #0
289d4     13 2D 02 F6 | 	mov	local04, local01
289d8     16 2F 02 F6 | 	mov	local05, local04
289dc     16 2E 46 F7 | 	zerox	local05, #22
289e0     16 31 02 F6 | 	mov	local06, local04
289e4     01 30 66 F0 | 	shl	local06, #1
289e8     18 30 46 F0 | 	shr	local06, #24
289ec     1F 2C 46 F0 | 	shr	local04, #31
289f0     14 13 02 F6 | 	mov	arg01, local02
289f4     09 FB 01 F6 | 	mov	result1, arg01
289f8     FD 32 02 F6 | 	mov	local07, result1
289fc     19 35 02 F6 | 	mov	local08, local07
28a00     16 34 46 F7 | 	zerox	local08, #22
28a04     19 37 02 F6 | 	mov	local09, local07
28a08     01 36 66 F0 | 	shl	local09, #1
28a0c     18 36 46 F0 | 	shr	local09, #24
28a10     1B 39 02 F6 | 	mov	local10, local09
28a14     1F 32 46 F0 | 	shr	local07, #31
28a18     00 3A 06 F6 | 	mov	local11, #0
28a1c     00 3C 06 F6 | 	mov	local12, #0
28a20     1C 31 12 F2 | 	cmp	local06, local10 wc
28a24     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
28a28     2C 00 90 1D |  if_a	jmp	#LR__3560
28a2c     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
28a30     24 00 90 3D |  if_ae	jmp	#LR__3560
28a34     17 3F 02 F6 | 	mov	local13, local05
28a38     1A 2F 02 F6 | 	mov	local05, local08
28a3c     1F 35 02 F6 | 	mov	local08, local13
28a40     18 3F 02 F6 | 	mov	local13, local06
28a44     1C 31 02 F6 | 	mov	local06, local10
28a48     1F 39 02 F6 | 	mov	local10, local13
28a4c     16 3F 02 F6 | 	mov	local13, local04
28a50     19 2D 02 F6 | 	mov	local04, local07
28a54     1F 33 02 F6 | 	mov	local07, local13
28a58                 | LR__3560
28a58     FF 30 0E F2 | 	cmp	local06, #255 wz
28a5c     70 01 90 AD |  if_e	jmp	#LR__3575
28a60     00 30 0E F2 | 	cmp	local06, #0 wz
28a64     AC 01 90 AD |  if_e	jmp	#LR__3577
28a68     17 2E 26 F4 | 	bith	local05, #23
28a6c                 | LR__3561
28a6c     00 38 0E F2 | 	cmp	local10, #0 wz
28a70     F0 01 90 AD |  if_e	jmp	#LR__3581
28a74     17 34 26 F4 | 	bith	local08, #23
28a78                 | LR__3562
28a78     7F 30 86 F1 | 	sub	local06, #127
28a7c     7F 38 86 F1 | 	sub	local10, #127
28a80     18 41 02 F6 | 	mov	local14, local06
28a84     1C 41 82 F1 | 	sub	local14, local10
28a88     97 14 48 FB | 	callpa	#(@LR__3564-@LR__3563)>>2,fcache_load_ptr_
28a8c                 | LR__3563
28a8c     20 40 56 F2 | 	cmps	local14, #32 wc
28a90     20 00 90 CD |  if_b	jmp	#LR__3565
28a94     1A 37 02 F6 | 	mov	local09, local08
28a98     00 3A 0E F2 | 	cmp	local11, #0 wz
28a9c     6F 3A 62 FD | 	wrnz	local11
28aa0     1D 37 42 F5 | 	or	local09, local11
28aa4     1B 3B 02 F6 | 	mov	local11, local09
28aa8     00 34 06 F6 | 	mov	local08, #0
28aac     20 40 86 F1 | 	sub	local14, #32
28ab0     D8 FF 9F FD | 	jmp	#LR__3563
28ab4                 | LR__3564
28ab4                 | LR__3565
28ab4     00 40 0E F2 | 	cmp	local14, #0 wz
28ab8     38 00 90 AD |  if_e	jmp	#LR__3566
28abc     1A 3F 02 F6 | 	mov	local13, local08
28ac0     20 38 06 F6 | 	mov	local10, #32
28ac4     20 39 82 F1 | 	sub	local10, local14
28ac8     1C 3F 62 F0 | 	shl	local13, local10
28acc     1D 39 02 F6 | 	mov	local10, local11
28ad0     20 36 06 F6 | 	mov	local09, #32
28ad4     20 37 82 F1 | 	sub	local09, local14
28ad8     1B 39 6A F0 | 	shl	local10, local09 wz
28adc     20 3B 42 F0 | 	shr	local11, local14
28ae0     20 35 42 F0 | 	shr	local08, local14
28ae4     1F 3B 42 F5 | 	or	local11, local13
28ae8     00 42 06 F6 | 	mov	local15, #0
28aec     01 42 06 56 |  if_ne	mov	local15, #1
28af0     21 3B 42 F5 | 	or	local11, local15
28af4                 | LR__3566
28af4     16 43 02 F6 | 	mov	local15, local04
28af8     19 43 62 F5 | 	xor	local15, local07
28afc     01 42 CE F7 | 	test	local15, #1 wz
28b00     18 00 90 AD |  if_e	jmp	#LR__3567
28b04     1A 35 22 F6 | 	not	local08, local08
28b08     1D 3B 22 F6 | 	not	local11, local11
28b0c     01 3A 0E F1 | 	add	local11, #1 wz
28b10     00 42 06 F6 | 	mov	local15, #0
28b14     01 42 06 A6 |  if_e	mov	local15, #1
28b18     21 35 02 F1 | 	add	local08, local15
28b1c                 | LR__3567
28b1c     1D 3D 12 F1 | 	add	local12, local11 wc
28b20     1A 2F 22 F1 | 	addx	local05, local08
28b24     00 2E 56 F2 | 	cmps	local05, #0 wc
28b28     1C 00 90 3D |  if_ae	jmp	#LR__3568
28b2c     01 2C 66 F5 | 	xor	local04, #1
28b30     17 2F 22 F6 | 	not	local05, local05
28b34     1E 3D 22 F6 | 	not	local12, local12
28b38     01 3C 0E F1 | 	add	local12, #1 wz
28b3c     00 42 06 F6 | 	mov	local15, #0
28b40     01 42 06 A6 |  if_e	mov	local15, #1
28b44     21 2F 02 F1 | 	add	local05, local15
28b48                 | LR__3568
28b48     00 80 00 FF 
28b4c     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
28b50     28 00 90 CD |  if_b	jmp	#LR__3569
28b54     01 30 06 F1 | 	add	local06, #1
28b58     1E 41 02 F6 | 	mov	local14, local12
28b5c     01 40 06 F5 | 	and	local14, #1
28b60     01 3C 46 F0 | 	shr	local12, #1
28b64     17 43 02 F6 | 	mov	local15, local05
28b68     1F 42 66 F0 | 	shl	local15, #31
28b6c     21 3D 42 F5 | 	or	local12, local15
28b70     20 3D 42 F5 | 	or	local12, local14
28b74     01 2E 46 F0 | 	shr	local05, #1
28b78     3C 00 90 FD | 	jmp	#LR__3574
28b7c                 | LR__3569
28b7c     00 40 00 FF 
28b80     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
28b84     30 00 90 3D |  if_ae	jmp	#LR__3573
28b88     00 2E 0E F2 | 	cmp	local05, #0 wz
28b8c     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
28b90     08 2C 46 A5 |  if_e	or	local04, #8
28b94     01 2C 26 A5 |  if_e	andn	local04, #1
28b98     1C 00 90 AD |  if_e	jmp	#LR__3572
28b9c                 | LR__3570
28b9c     00 40 00 FF 
28ba0     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
28ba4     10 00 90 3D |  if_ae	jmp	#LR__3571
28ba8     1E 3D 12 F1 | 	add	local12, local12 wc
28bac     17 2F 22 F1 | 	addx	local05, local05
28bb0     01 30 86 F1 | 	sub	local06, #1
28bb4     E4 FF 9F FD | 	jmp	#LR__3570
28bb8                 | LR__3571
28bb8                 | LR__3572
28bb8                 | LR__3573
28bb8                 | LR__3574
28bb8     17 13 02 F6 | 	mov	arg01, local05
28bbc     1E 15 02 F6 | 	mov	arg02, local12
28bc0     18 17 02 F6 | 	mov	arg03, local06
28bc4     16 19 02 F6 | 	mov	arg04, local04
28bc8     08 35 B0 FD | 	call	#__system__pack_0674
28bcc     DC 00 90 FD | 	jmp	#LR__3585
28bd0                 | LR__3575
28bd0     FF 38 0E F2 | 	cmp	local10, #255 wz
28bd4     10 00 90 5D |  if_ne	jmp	#LR__3576
28bd8     16 33 0A F2 | 	cmp	local07, local04 wz
28bdc     00 F8 3F 5F 
28be0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
28be4     C4 00 90 5D |  if_ne	jmp	#LR__3585
28be8                 | LR__3576
28be8     00 2E 0E F2 | 	cmp	local05, #0 wz
28bec     00 F8 3F 5F 
28bf0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
28bf4     B4 00 90 5D |  if_ne	jmp	#LR__3585
28bf8     1E 15 02 F6 | 	mov	arg02, local12
28bfc     18 17 02 F6 | 	mov	arg03, local06
28c00     16 19 02 F6 | 	mov	arg04, local04
28c04     02 18 46 F5 | 	or	arg04, #2
28c08     17 13 02 F6 | 	mov	arg01, local05
28c0c     C4 34 B0 FD | 	call	#__system__pack_0674
28c10     98 00 90 FD | 	jmp	#LR__3585
28c14                 | LR__3577
28c14     00 2E 0E F2 | 	cmp	local05, #0 wz
28c18     28 00 90 AD |  if_e	jmp	#LR__3580
28c1c     01 2E 66 F0 | 	shl	local05, #1
28c20     97 0E 48 FB | 	callpa	#(@LR__3579-@LR__3578)>>2,fcache_load_ptr_
28c24                 | LR__3578
28c24     00 40 00 FF 
28c28     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
28c2c     18 43 02 C6 |  if_b	mov	local15, local06
28c30     01 42 86 C1 |  if_b	sub	local15, #1
28c34     21 31 02 C6 |  if_b	mov	local06, local15
28c38     01 2E 66 C0 |  if_b	shl	local05, #1
28c3c     E4 FF 9F CD |  if_b	jmp	#LR__3578
28c40                 | LR__3579
28c40     28 FE 9F FD | 	jmp	#LR__3561
28c44                 | LR__3580
28c44     19 2D 02 F5 | 	and	local04, local07
28c48     16 19 02 F6 | 	mov	arg04, local04
28c4c     08 18 46 F5 | 	or	arg04, #8
28c50     00 12 06 F6 | 	mov	arg01, #0
28c54     00 14 06 F6 | 	mov	arg02, #0
28c58     00 16 06 F6 | 	mov	arg03, #0
28c5c     74 34 B0 FD | 	call	#__system__pack_0674
28c60     48 00 90 FD | 	jmp	#LR__3585
28c64                 | LR__3581
28c64     00 34 0E F2 | 	cmp	local08, #0 wz
28c68     28 00 90 AD |  if_e	jmp	#LR__3584
28c6c     01 34 66 F0 | 	shl	local08, #1
28c70     97 0E 48 FB | 	callpa	#(@LR__3583-@LR__3582)>>2,fcache_load_ptr_
28c74                 | LR__3582
28c74     00 40 00 FF 
28c78     00 34 16 F2 | 	cmp	local08, ##8388608 wc
28c7c     1C 43 02 C6 |  if_b	mov	local15, local10
28c80     01 42 86 C1 |  if_b	sub	local15, #1
28c84     21 39 02 C6 |  if_b	mov	local10, local15
28c88     01 34 66 C0 |  if_b	shl	local08, #1
28c8c     E4 FF 9F CD |  if_b	jmp	#LR__3582
28c90                 | LR__3583
28c90     E4 FD 9F FD | 	jmp	#LR__3562
28c94                 | LR__3584
28c94     7F 30 86 F1 | 	sub	local06, #127
28c98     17 13 02 F6 | 	mov	arg01, local05
28c9c     1E 15 02 F6 | 	mov	arg02, local12
28ca0     18 17 02 F6 | 	mov	arg03, local06
28ca4     16 19 02 F6 | 	mov	arg04, local04
28ca8     28 34 B0 FD | 	call	#__system__pack_0674
28cac                 | LR__3585
28cac     A7 F0 03 F6 | 	mov	ptra, fp
28cb0     B2 00 A0 FD | 	call	#popregs_
28cb4                 | __system___float_add_ret
28cb4     2D 00 64 FD | 	ret
28cb8                 | 
28cb8                 | __system___float_sqrt
28cb8     04 4A 05 F6 | 	mov	COUNT_, #4
28cbc     A8 00 A0 FD | 	call	#pushregs_
28cc0     09 27 02 F6 | 	mov	local01, arg01
28cc4     09 FB 01 F6 | 	mov	result1, arg01
28cc8     FD 28 02 F6 | 	mov	local02, result1
28ccc     14 2B 02 F6 | 	mov	local03, local02
28cd0     16 2A 46 F7 | 	zerox	local03, #22
28cd4     14 2D 02 F6 | 	mov	local04, local02
28cd8     01 2C 66 F0 | 	shl	local04, #1
28cdc     18 2C 4E F0 | 	shr	local04, #24 wz
28ce0     1F 28 46 F0 | 	shr	local02, #31
28ce4     70 00 90 AD |  if_e	jmp	#LR__3591
28ce8     17 2A 26 F4 | 	bith	local03, #23
28cec                 | LR__3590
28cec     00 28 0E F2 | 	cmp	local02, #0 wz
28cf0     00 F8 3F 5F 
28cf4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
28cf8     88 00 90 5D |  if_ne	jmp	#LR__3594
28cfc     FF 2C 0E F2 | 	cmp	local04, #255 wz
28d00     13 FB 01 A6 |  if_e	mov	result1, local01
28d04     7C 00 90 AD |  if_e	jmp	#LR__3594
28d08     7F 2C 86 F1 | 	sub	local04, #127
28d0c     01 2C CE F7 | 	test	local04, #1 wz
28d10     01 2A 66 50 |  if_ne	shl	local03, #1
28d14     05 2A 66 F0 | 	shl	local03, #5
28d18     15 01 38 FD | 	qsqrt	#0, local03
28d1c     01 2C 86 51 |  if_ne	sub	local04, #1
28d20     16 2D 52 F6 | 	abs	local04, local04 wc
28d24     01 2C 46 F0 | 	shr	local04, #1
28d28     16 17 82 F6 | 	negc	arg03, local04
28d2c     14 19 02 F6 | 	mov	arg04, local02
28d30     18 12 62 FD | 	getqx	arg01
28d34     09 15 02 F6 | 	mov	arg02, arg01
28d38     19 14 66 F0 | 	shl	arg02, #25
28d3c     07 12 46 F0 | 	shr	arg01, #7
28d40     00 80 00 FF 
28d44     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
28d48     01 16 06 31 |  if_ae	add	arg03, #1
28d4c     01 12 46 30 |  if_ae	shr	arg01, #1
28d50     80 33 B0 FD | 	call	#__system__pack_0674
28d54     2C 00 90 FD | 	jmp	#LR__3594
28d58                 | LR__3591
28d58     00 2A 0E F2 | 	cmp	local03, #0 wz
28d5c     13 FB 01 A6 |  if_e	mov	result1, local01
28d60     20 00 90 AD |  if_e	jmp	#LR__3594
28d64     01 2A 66 F0 | 	shl	local03, #1
28d68     97 0A 48 FB | 	callpa	#(@LR__3593-@LR__3592)>>2,fcache_load_ptr_
28d6c                 | LR__3592
28d6c     00 40 00 FF 
28d70     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
28d74     01 2C 86 C1 |  if_b	sub	local04, #1
28d78     01 2A 66 C0 |  if_b	shl	local03, #1
28d7c     EC FF 9F CD |  if_b	jmp	#LR__3592
28d80                 | LR__3593
28d80     68 FF 9F FD | 	jmp	#LR__3590
28d84                 | LR__3594
28d84     A7 F0 03 F6 | 	mov	ptra, fp
28d88     B2 00 A0 FD | 	call	#popregs_
28d8c                 | __system___float_sqrt_ret
28d8c     2D 00 64 FD | 	ret
28d90                 | 
28d90                 | __system___float_mul
28d90     0B 4A 05 F6 | 	mov	COUNT_, #11
28d94     A8 00 A0 FD | 	call	#pushregs_
28d98     09 27 02 F6 | 	mov	local01, arg01
28d9c     0A 29 02 F6 | 	mov	local02, arg02
28da0     13 2B 02 F6 | 	mov	local03, local01
28da4     15 2D 02 F6 | 	mov	local04, local03
28da8     16 2C 46 F7 | 	zerox	local04, #22
28dac     15 2F 02 F6 | 	mov	local05, local03
28db0     01 2E 66 F0 | 	shl	local05, #1
28db4     18 2E 46 F0 | 	shr	local05, #24
28db8     1F 2A 46 F0 | 	shr	local03, #31
28dbc     14 FB 01 F6 | 	mov	result1, local02
28dc0     FD 30 02 F6 | 	mov	local06, result1
28dc4     18 33 02 F6 | 	mov	local07, local06
28dc8     16 32 46 F7 | 	zerox	local07, #22
28dcc     18 35 02 F6 | 	mov	local08, local06
28dd0     01 34 66 F0 | 	shl	local08, #1
28dd4     18 34 46 F0 | 	shr	local08, #24
28dd8     1F 30 46 F0 | 	shr	local06, #31
28ddc     18 2B 62 F5 | 	xor	local03, local06
28de0     FF 2E 0E F2 | 	cmp	local05, #255 wz
28de4     90 00 90 AD |  if_e	jmp	#LR__3603
28de8     FF 34 0E F2 | 	cmp	local08, #255 wz
28dec     D8 00 90 AD |  if_e	jmp	#LR__3605
28df0     00 2E 0E F2 | 	cmp	local05, #0 wz
28df4     0C 01 90 AD |  if_e	jmp	#LR__3606
28df8     17 2C 26 F4 | 	bith	local04, #23
28dfc                 | LR__3600
28dfc     00 34 0E F2 | 	cmp	local08, #0 wz
28e00     44 01 90 AD |  if_e	jmp	#LR__3610
28e04     17 32 26 F4 | 	bith	local07, #23
28e08                 | LR__3601
28e08     16 29 02 F6 | 	mov	local02, local04
28e0c     04 28 66 F0 | 	shl	local02, #4
28e10     19 31 02 F6 | 	mov	local06, local07
28e14     05 30 66 F0 | 	shl	local06, #5
28e18     18 29 02 FD | 	qmul	local02, local06
28e1c     1A 2F 02 F1 | 	add	local05, local08
28e20     FE 2E 86 F1 | 	sub	local05, #254
28e24     17 37 02 F6 | 	mov	local09, local05
28e28     04 2C 66 F0 | 	shl	local04, #4
28e2c     05 32 66 F0 | 	shl	local07, #5
28e30     18 38 62 FD | 	getqx	local10
28e34     19 2D 02 FD | 	qmul	local04, local07
28e38     19 3A 62 FD | 	getqy	local11
28e3c     00 80 00 FF 
28e40     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
28e44     18 00 90 CD |  if_b	jmp	#LR__3602
28e48     01 36 06 F1 | 	add	local09, #1
28e4c     01 38 46 F0 | 	shr	local10, #1
28e50     1D 35 02 F6 | 	mov	local08, local11
28e54     1F 34 66 F0 | 	shl	local08, #31
28e58     1A 39 42 F5 | 	or	local10, local08
28e5c     01 3A 46 F0 | 	shr	local11, #1
28e60                 | LR__3602
28e60     1D 13 02 F6 | 	mov	arg01, local11
28e64     1C 15 02 F6 | 	mov	arg02, local10
28e68     1B 17 02 F6 | 	mov	arg03, local09
28e6c     15 19 02 F6 | 	mov	arg04, local03
28e70     60 32 B0 FD | 	call	#__system__pack_0674
28e74     10 01 90 FD | 	jmp	#LR__3614
28e78                 | LR__3603
28e78     00 2C 0E F2 | 	cmp	local04, #0 wz
28e7c     13 FB 01 56 |  if_ne	mov	result1, local01
28e80     04 01 90 5D |  if_ne	jmp	#LR__3614
28e84     FF 34 56 F2 | 	cmps	local08, #255 wc
28e88     00 34 0E C2 |  if_b	cmp	local08, #0 wz
28e8c     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
28e90     18 00 90 4D |  if_c_and_nz	jmp	#LR__3604
28e94     00 F8 3F CF 
28e98     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
28e9c     E8 00 90 CD |  if_b	jmp	#LR__3614
28ea0     00 32 0E F2 | 	cmp	local07, #0 wz
28ea4     14 FB 01 56 |  if_ne	mov	result1, local02
28ea8     DC 00 90 5D |  if_ne	jmp	#LR__3614
28eac                 | LR__3604
28eac     02 2A 46 F5 | 	or	local03, #2
28eb0     00 12 06 F6 | 	mov	arg01, #0
28eb4     00 14 06 F6 | 	mov	arg02, #0
28eb8     17 17 02 F6 | 	mov	arg03, local05
28ebc     15 19 02 F6 | 	mov	arg04, local03
28ec0     10 32 B0 FD | 	call	#__system__pack_0674
28ec4     C0 00 90 FD | 	jmp	#LR__3614
28ec8                 | LR__3605
28ec8     00 2E 0E F2 | 	cmp	local05, #0 wz
28ecc     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
28ed0     00 F8 3F AF 
28ed4     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
28ed8     AC 00 90 AD |  if_e	jmp	#LR__3614
28edc     00 32 0E F2 | 	cmp	local07, #0 wz
28ee0     14 FB 01 56 |  if_ne	mov	result1, local02
28ee4     A0 00 90 5D |  if_ne	jmp	#LR__3614
28ee8     1A 17 02 F6 | 	mov	arg03, local08
28eec     15 19 02 F6 | 	mov	arg04, local03
28ef0     02 18 46 F5 | 	or	arg04, #2
28ef4     00 12 06 F6 | 	mov	arg01, #0
28ef8     00 14 06 F6 | 	mov	arg02, #0
28efc     D4 31 B0 FD | 	call	#__system__pack_0674
28f00     84 00 90 FD | 	jmp	#LR__3614
28f04                 | LR__3606
28f04     00 2C 0E F2 | 	cmp	local04, #0 wz
28f08     20 00 90 AD |  if_e	jmp	#LR__3609
28f0c     01 2C 66 F0 | 	shl	local04, #1
28f10     97 0A 48 FB | 	callpa	#(@LR__3608-@LR__3607)>>2,fcache_load_ptr_
28f14                 | LR__3607
28f14     00 40 00 FF 
28f18     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
28f1c     01 2E 86 C1 |  if_b	sub	local05, #1
28f20     01 2C 66 C0 |  if_b	shl	local04, #1
28f24     EC FF 9F CD |  if_b	jmp	#LR__3607
28f28                 | LR__3608
28f28     D0 FE 9F FD | 	jmp	#LR__3600
28f2c                 | LR__3609
28f2c     08 2A 46 F5 | 	or	local03, #8
28f30     00 12 06 F6 | 	mov	arg01, #0
28f34     00 14 06 F6 | 	mov	arg02, #0
28f38     00 16 06 F6 | 	mov	arg03, #0
28f3c     15 19 02 F6 | 	mov	arg04, local03
28f40     90 31 B0 FD | 	call	#__system__pack_0674
28f44     40 00 90 FD | 	jmp	#LR__3614
28f48                 | LR__3610
28f48     00 32 0E F2 | 	cmp	local07, #0 wz
28f4c     20 00 90 AD |  if_e	jmp	#LR__3613
28f50     01 32 66 F0 | 	shl	local07, #1
28f54     97 0A 48 FB | 	callpa	#(@LR__3612-@LR__3611)>>2,fcache_load_ptr_
28f58                 | LR__3611
28f58     00 40 00 FF 
28f5c     00 32 16 F2 | 	cmp	local07, ##8388608 wc
28f60     01 34 86 C1 |  if_b	sub	local08, #1
28f64     01 32 66 C0 |  if_b	shl	local07, #1
28f68     EC FF 9F CD |  if_b	jmp	#LR__3611
28f6c                 | LR__3612
28f6c     98 FE 9F FD | 	jmp	#LR__3601
28f70                 | LR__3613
28f70     08 2A 46 F5 | 	or	local03, #8
28f74     00 12 06 F6 | 	mov	arg01, #0
28f78     00 14 06 F6 | 	mov	arg02, #0
28f7c     00 16 06 F6 | 	mov	arg03, #0
28f80     15 19 02 F6 | 	mov	arg04, local03
28f84     4C 31 B0 FD | 	call	#__system__pack_0674
28f88                 | LR__3614
28f88     A7 F0 03 F6 | 	mov	ptra, fp
28f8c     B2 00 A0 FD | 	call	#popregs_
28f90                 | __system___float_mul_ret
28f90     2D 00 64 FD | 	ret
28f94                 | 
28f94                 | __system___float_div
28f94     0E 4A 05 F6 | 	mov	COUNT_, #14
28f98     A8 00 A0 FD | 	call	#pushregs_
28f9c     09 2B 02 F6 | 	mov	local03, arg01
28fa0     0A 2D 02 F6 | 	mov	local04, arg02
28fa4     15 2F 02 F6 | 	mov	local05, local03
28fa8     17 31 02 F6 | 	mov	local06, local05
28fac     16 30 46 F7 | 	zerox	local06, #22
28fb0     17 33 02 F6 | 	mov	local07, local05
28fb4     01 32 66 F0 | 	shl	local07, #1
28fb8     18 32 46 F0 | 	shr	local07, #24
28fbc     1F 2E 46 F0 | 	shr	local05, #31
28fc0     16 FB 01 F6 | 	mov	result1, local04
28fc4     FD 34 02 F6 | 	mov	local08, result1
28fc8     1A 37 02 F6 | 	mov	local09, local08
28fcc     16 36 46 F7 | 	zerox	local09, #22
28fd0     1A 39 02 F6 | 	mov	local10, local08
28fd4     01 38 66 F0 | 	shl	local10, #1
28fd8     18 38 46 F0 | 	shr	local10, #24
28fdc     1F 34 46 F0 | 	shr	local08, #31
28fe0     1A 2F 62 F5 | 	xor	local05, local08
28fe4     FF 32 0E F2 | 	cmp	local07, #255 wz
28fe8     D4 00 90 AD |  if_e	jmp	#LR__3625
28fec     FF 38 0E F2 | 	cmp	local10, #255 wz
28ff0     04 01 90 AD |  if_e	jmp	#LR__3626
28ff4     00 32 0E F2 | 	cmp	local07, #0 wz
28ff8     24 01 90 AD |  if_e	jmp	#LR__3627
28ffc     17 30 26 F4 | 	bith	local06, #23
29000                 | LR__3620
29000     00 38 0E F2 | 	cmp	local10, #0 wz
29004     70 01 90 AD |  if_e	jmp	#LR__3631
29008     17 36 26 F4 | 	bith	local09, #23
2900c                 | LR__3621
2900c     1C 33 82 F1 | 	sub	local07, local10
29010     19 3B 02 F6 | 	mov	local11, local07
29014     18 13 02 F6 | 	mov	arg01, local06
29018     02 12 46 F0 | 	shr	arg01, #2
2901c     1E 30 66 F0 | 	shl	local06, #30
29020     18 15 02 F6 | 	mov	arg02, local06
29024     1B 17 02 F6 | 	mov	arg03, local09
29028     28 12 62 FD | 	setq	arg01
2902c     0B 15 12 FD | 	qdiv	arg02, arg03
29030     00 3C 06 F6 | 	mov	local12, #0
29034     18 26 62 FD | 	getqx	local01
29038     19 FC 61 FD | 	getqy	result2
2903c     FE 28 02 F6 | 	mov	local02, result2
29040     13 3F 02 F6 | 	mov	local13, local01
29044     00 28 4E F2 | 	cmps	local02, #0 wz
29048     1F 41 02 F6 | 	mov	local14, local13
2904c     19 40 66 F0 | 	shl	local14, #25
29050     01 3C 06 56 |  if_ne	mov	local12, #1
29054     1E 41 42 F5 | 	or	local14, local12
29058     07 3E 46 F0 | 	shr	local13, #7
2905c     00 80 00 FF 
29060     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
29064     1C 00 90 CD |  if_b	jmp	#LR__3622
29068     01 3A 06 F1 | 	add	local11, #1
2906c     01 40 46 F0 | 	shr	local14, #1
29070     1F 3D 02 F6 | 	mov	local12, local13
29074     1F 3C 66 F0 | 	shl	local12, #31
29078     1E 41 42 F5 | 	or	local14, local12
2907c     01 3E 46 F0 | 	shr	local13, #1
29080     24 00 90 FD | 	jmp	#LR__3624
29084                 | LR__3622
29084     00 40 00 FF 
29088     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
2908c     18 00 90 3D |  if_ae	jmp	#LR__3623
29090     01 3A 86 F1 | 	sub	local11, #1
29094     01 3E 66 F0 | 	shl	local13, #1
29098     20 3D 02 F6 | 	mov	local12, local14
2909c     1F 3C 46 F0 | 	shr	local12, #31
290a0     1E 3F 42 F5 | 	or	local13, local12
290a4     01 40 66 F0 | 	shl	local14, #1
290a8                 | LR__3623
290a8                 | LR__3624
290a8     1F 13 02 F6 | 	mov	arg01, local13
290ac     20 15 02 F6 | 	mov	arg02, local14
290b0     1D 17 02 F6 | 	mov	arg03, local11
290b4     17 19 02 F6 | 	mov	arg04, local05
290b8     18 30 B0 FD | 	call	#__system__pack_0674
290bc     F8 00 90 FD | 	jmp	#LR__3635
290c0                 | LR__3625
290c0     00 30 0E F2 | 	cmp	local06, #0 wz
290c4     15 FB 01 56 |  if_ne	mov	result1, local03
290c8     EC 00 90 5D |  if_ne	jmp	#LR__3635
290cc     FF 38 0E F2 | 	cmp	local10, #255 wz
290d0     00 F8 3F AF 
290d4     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
290d8     DC 00 90 AD |  if_e	jmp	#LR__3635
290dc     02 2E 46 F5 | 	or	local05, #2
290e0     00 12 06 F6 | 	mov	arg01, #0
290e4     00 14 06 F6 | 	mov	arg02, #0
290e8     19 17 02 F6 | 	mov	arg03, local07
290ec     17 19 02 F6 | 	mov	arg04, local05
290f0     E0 2F B0 FD | 	call	#__system__pack_0674
290f4     C0 00 90 FD | 	jmp	#LR__3635
290f8                 | LR__3626
290f8     00 36 0E F2 | 	cmp	local09, #0 wz
290fc     16 FB 01 56 |  if_ne	mov	result1, local04
29100     B4 00 90 5D |  if_ne	jmp	#LR__3635
29104     17 19 02 F6 | 	mov	arg04, local05
29108     08 18 46 F5 | 	or	arg04, #8
2910c     00 12 06 F6 | 	mov	arg01, #0
29110     00 14 06 F6 | 	mov	arg02, #0
29114     00 16 06 F6 | 	mov	arg03, #0
29118     B8 2F B0 FD | 	call	#__system__pack_0674
2911c     98 00 90 FD | 	jmp	#LR__3635
29120                 | LR__3627
29120     00 30 0E F2 | 	cmp	local06, #0 wz
29124     20 00 90 AD |  if_e	jmp	#LR__3630
29128     01 30 66 F0 | 	shl	local06, #1
2912c     97 0A 48 FB | 	callpa	#(@LR__3629-@LR__3628)>>2,fcache_load_ptr_
29130                 | LR__3628
29130     00 40 00 FF 
29134     00 30 16 F2 | 	cmp	local06, ##8388608 wc
29138     01 32 86 C1 |  if_b	sub	local07, #1
2913c     01 30 66 C0 |  if_b	shl	local06, #1
29140     EC FF 9F CD |  if_b	jmp	#LR__3628
29144                 | LR__3629
29144     B8 FE 9F FD | 	jmp	#LR__3620
29148                 | LR__3630
29148     00 38 0E F2 | 	cmp	local10, #0 wz
2914c     00 36 0E A2 |  if_e	cmp	local09, #0 wz
29150     00 F8 3F AF 
29154     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
29158     5C 00 90 AD |  if_e	jmp	#LR__3635
2915c     17 19 02 F6 | 	mov	arg04, local05
29160     08 18 46 F5 | 	or	arg04, #8
29164     00 12 06 F6 | 	mov	arg01, #0
29168     00 14 06 F6 | 	mov	arg02, #0
2916c     00 16 06 F6 | 	mov	arg03, #0
29170     60 2F B0 FD | 	call	#__system__pack_0674
29174     40 00 90 FD | 	jmp	#LR__3635
29178                 | LR__3631
29178     00 36 0E F2 | 	cmp	local09, #0 wz
2917c     20 00 90 AD |  if_e	jmp	#LR__3634
29180     01 36 66 F0 | 	shl	local09, #1
29184     97 0A 48 FB | 	callpa	#(@LR__3633-@LR__3632)>>2,fcache_load_ptr_
29188                 | LR__3632
29188     00 40 00 FF 
2918c     00 36 16 F2 | 	cmp	local09, ##8388608 wc
29190     01 38 86 C1 |  if_b	sub	local10, #1
29194     01 36 66 C0 |  if_b	shl	local09, #1
29198     EC FF 9F CD |  if_b	jmp	#LR__3632
2919c                 | LR__3633
2919c     6C FE 9F FD | 	jmp	#LR__3621
291a0                 | LR__3634
291a0     02 2E 46 F5 | 	or	local05, #2
291a4     00 12 06 F6 | 	mov	arg01, #0
291a8     00 14 06 F6 | 	mov	arg02, #0
291ac     00 16 06 F6 | 	mov	arg03, #0
291b0     17 19 02 F6 | 	mov	arg04, local05
291b4     1C 2F B0 FD | 	call	#__system__pack_0674
291b8                 | LR__3635
291b8     A7 F0 03 F6 | 	mov	ptra, fp
291bc     B2 00 A0 FD | 	call	#popregs_
291c0                 | __system___float_div_ret
291c0     2D 00 64 FD | 	ret
291c4                 | 
291c4                 | __system___float_cmp
291c4     00 C0 3F FF 
291c8     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
291cc     00 C0 3F CF 
291d0     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
291d4     0B FB 01 36 |  if_ae	mov	result1, arg03
291d8     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
291dc     00 C0 7F FF 
291e0     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
291e4     00 C0 7F CF 
291e8     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
291ec     0B FB 01 36 |  if_ae	mov	result1, arg03
291f0     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
291f4     00 12 56 F2 | 	cmps	arg01, #0 wc
291f8     2C 00 90 3D |  if_ae	jmp	#LR__3640
291fc     00 14 56 F2 | 	cmps	arg02, #0 wc
29200     0A FB 01 C6 |  if_b	mov	result1, arg02
29204     09 FB 81 C1 |  if_b	sub	result1, arg01
29208     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
2920c     00 14 0E F2 | 	cmp	arg02, #0 wz
29210     00 00 40 AF 
29214     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
29218     00 FA 05 A6 |  if_e	mov	result1, #0
2921c     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
29220     01 FA 65 F6 | 	neg	result1, #1
29224     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
29228                 | LR__3640
29228     00 14 56 F2 | 	cmps	arg02, #0 wc
2922c     1C 00 90 3D |  if_ae	jmp	#LR__3641
29230     00 12 0E F2 | 	cmp	arg01, #0 wz
29234     00 00 40 AF 
29238     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
2923c     00 FA 05 A6 |  if_e	mov	result1, #0
29240     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
29244     01 FA 05 F6 | 	mov	result1, #1
29248     08 00 90 FD | 	jmp	#__system___float_cmp_ret
2924c                 | LR__3641
2924c     0A 13 82 F1 | 	sub	arg01, arg02
29250     09 FB 01 F6 | 	mov	result1, arg01
29254                 | __system___float_cmp_ret
29254     2D 00 64 FD | 	ret
29258                 | 
29258                 | __system___float_tointeger
29258     02 4A 05 F6 | 	mov	COUNT_, #2
2925c     A8 00 A0 FD | 	call	#pushregs_
29260     50 00 B0 FD | 	call	#__system___float_Unpack
29264     FF FF 7F FF 
29268     FF FD 55 F2 | 	cmps	result2, ##-1 wc
2926c     34 00 90 CD |  if_b	jmp	#LR__3650
29270     1F FC 55 F2 | 	cmps	result2, #31 wc
29274     2C 00 90 3D |  if_ae	jmp	#LR__3650
29278     02 FE 65 F0 | 	shl	result3, #2
2927c     1E 26 06 F6 | 	mov	local01, #30
29280     FE 26 82 F1 | 	sub	local01, result2
29284     13 FF 41 F0 | 	shr	result3, local01
29288     FF 28 02 F6 | 	mov	local02, result3
2928c     0A 29 02 F1 | 	add	local02, arg02
29290     01 28 46 F0 | 	shr	local02, #1
29294     00 FA 0D F2 | 	cmp	result1, #0 wz
29298     14 29 62 56 |  if_ne	neg	local02, local02
2929c     14 FB 01 F6 | 	mov	result1, local02
292a0     04 00 90 FD | 	jmp	#LR__3651
292a4                 | LR__3650
292a4     00 FA 05 F6 | 	mov	result1, #0
292a8                 | LR__3651
292a8     A7 F0 03 F6 | 	mov	ptra, fp
292ac     B2 00 A0 FD | 	call	#popregs_
292b0                 | __system___float_tointeger_ret
292b0     2D 00 64 FD | 	ret
292b4                 | 
292b4                 | __system___float_Unpack
292b4     09 01 02 F6 | 	mov	_var01, arg01
292b8     1F 00 46 F0 | 	shr	_var01, #31
292bc     09 03 02 F6 | 	mov	_var02, arg01
292c0     01 02 66 F0 | 	shl	_var02, #1
292c4     18 02 4E F0 | 	shr	_var02, #24 wz
292c8     17 13 06 F4 | 	bitl	arg01, #279
292cc     06 12 66 50 |  if_ne	shl	arg01, #6
292d0     1D 12 26 54 |  if_ne	bith	arg01, #29
292d4     1C 00 90 5D |  if_ne	jmp	#LR__3660
292d8     09 05 92 F7 | 	encod	_var03, arg01 wc
292dc     01 04 06 C1 |  if_b	add	_var03, #1
292e0     17 04 86 F1 | 	sub	_var03, #23
292e4     02 03 02 F6 | 	mov	_var02, _var03
292e8     07 FC 05 F6 | 	mov	result2, #7
292ec     02 FD 81 F1 | 	sub	result2, _var03
292f0     FE 12 62 F0 | 	shl	arg01, result2
292f4                 | LR__3660
292f4     7F 02 86 F1 | 	sub	_var02, #127
292f8     09 FF 01 F6 | 	mov	result3, arg01
292fc     00 FB 01 F6 | 	mov	result1, _var01
29300     01 FD 01 F6 | 	mov	result2, _var02
29304                 | __system___float_Unpack_ret
29304     2D 00 64 FD | 	ret
29308                 | 
29308                 | __system___float_Pack
29308     00 00 06 F6 | 	mov	_var01, #0
2930c     00 16 0E F2 | 	cmp	arg03, #0 wz
29310     8C 00 90 AD |  if_e	jmp	#LR__3671
29314     0B 03 92 F7 | 	encod	_var02, arg03 wc
29318     01 02 06 C1 |  if_b	add	_var02, #1
2931c     21 00 06 F6 | 	mov	_var01, #33
29320     01 01 82 F1 | 	sub	_var01, _var02
29324     00 17 62 F0 | 	shl	arg03, _var01
29328     03 02 06 F6 | 	mov	_var02, #3
2932c     00 03 82 F1 | 	sub	_var02, _var01
29330     01 15 02 F1 | 	add	arg02, _var02
29334     0A 05 02 F6 | 	mov	_var03, arg02
29338     00 17 06 F1 | 	add	arg03, #256
2933c     0B 03 02 F6 | 	mov	_var02, arg03
29340     FF 02 2E F5 | 	andn	_var02, #255 wz
29344     01 04 06 A1 |  if_e	add	_var03, #1
29348     7F 04 06 F1 | 	add	_var03, #127
2934c     FF FF 7F FF 
29350     E9 05 46 F3 | 	fges	_var03, ##-23
29354     FF 04 66 F3 | 	fles	_var03, #255
29358     01 04 56 F2 | 	cmps	_var03, #1 wc
2935c     1C 00 90 3D |  if_ae	jmp	#LR__3670
29360     01 16 46 F0 | 	shr	arg03, #1
29364     1F 02 C6 F9 | 	decod	_var02, #31
29368     0B 03 02 F1 | 	add	_var02, arg03
2936c     02 05 62 F6 | 	neg	_var03, _var03
29370     02 03 42 F0 | 	shr	_var02, _var03
29374     01 17 02 F6 | 	mov	arg03, _var02
29378     00 04 06 F6 | 	mov	_var03, #0
2937c                 | LR__3670
2937c     09 FB 01 F6 | 	mov	result1, arg01
29380     1F FA 65 F0 | 	shl	result1, #31
29384     02 03 02 F6 | 	mov	_var02, _var03
29388     17 02 66 F0 | 	shl	_var02, #23
2938c     01 FB 41 F5 | 	or	result1, _var02
29390     0B 07 02 F6 | 	mov	_var04, arg03
29394     09 06 46 F0 | 	shr	_var04, #9
29398     03 FB 41 F5 | 	or	result1, _var04
2939c     04 00 90 FD | 	jmp	#__system___float_Pack_ret
293a0                 | LR__3671
293a0     00 FB 01 F6 | 	mov	result1, _var01
293a4                 | __system___float_Pack_ret
293a4     2D 00 64 FD | 	ret
293a8                 | 
293a8                 | __system___basic_print_float
293a8     05 4A 05 F6 | 	mov	COUNT_, #5
293ac     A8 00 A0 FD | 	call	#pushregs_
293b0     09 27 02 F6 | 	mov	local01, arg01
293b4     0A 29 02 F6 | 	mov	local02, arg02
293b8     0B 2B 0A F6 | 	mov	local03, arg03 wz
293bc     0C 2D 02 F6 | 	mov	local04, arg04
293c0     14 00 90 5D |  if_ne	jmp	#LR__3680
293c4     23 2C 0E F2 | 	cmp	local04, #35 wz
293c8     80 02 10 AF 
293cc     00 2E 06 A6 |  if_e	mov	local05, ##537198592
293d0     1D 2E C6 59 |  if_ne	decod	local05, #29
293d4     17 2B 02 F6 | 	mov	local03, local05
293d8                 | LR__3680
293d8     13 13 02 F6 | 	mov	arg01, local01
293dc     D8 27 B0 FD | 	call	#__system___gettxfunc
293e0     FD 2E 0A F6 | 	mov	local05, result1 wz
293e4     00 FA 05 A6 |  if_e	mov	result1, #0
293e8     17 13 02 56 |  if_ne	mov	arg01, local05
293ec     15 15 02 56 |  if_ne	mov	arg02, local03
293f0     14 17 02 56 |  if_ne	mov	arg03, local02
293f4     16 19 02 56 |  if_ne	mov	arg04, local04
293f8     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
293fc     A7 F0 03 F6 | 	mov	ptra, fp
29400     B2 00 A0 FD | 	call	#popregs_
29404                 | __system___basic_print_float_ret
29404     2D 00 64 FD | 	ret
29408                 | 
29408                 | __system____builtin_atoi
29408     07 4A 05 F6 | 	mov	COUNT_, #7
2940c     A8 00 A0 FD | 	call	#pushregs_
29410                 | __system____builtin_atoi_enter
29410     09 27 02 F6 | 	mov	local01, arg01
29414     0A 29 02 F6 | 	mov	local02, arg02
29418     00 2A 06 F6 | 	mov	local03, #0
2941c     00 2C 06 F6 | 	mov	local04, #0
29420     00 2E 06 F6 | 	mov	local05, #0
29424     97 1C 48 FB | 	callpa	#(@LR__3692-@LR__3690)>>2,fcache_load_ptr_
29428                 | LR__3690
29428     13 31 C2 FA | 	rdbyte	local06, local01
2942c     20 30 0E F2 | 	cmp	local06, #32 wz
29430     01 26 06 A1 |  if_e	add	local01, #1
29434     F0 FF 9F AD |  if_e	jmp	#LR__3690
29438     13 33 C2 FA | 	rdbyte	local07, local01
2943c                 | LR__3691
2943c     2D 32 0E F2 | 	cmp	local07, #45 wz
29440     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
29444     18 00 90 5D |  if_ne	jmp	#LR__3693
29448     01 26 06 F1 | 	add	local01, #1
2944c     2D 32 0E F2 | 	cmp	local07, #45 wz
29450     01 30 06 A6 |  if_e	mov	local06, #1
29454     18 2F C2 A2 |  if_e	subr	local05, local06
29458     13 33 C2 FA | 	rdbyte	local07, local01
2945c     DC FF 9F FD | 	jmp	#LR__3691
29460                 | LR__3692
29460                 | LR__3693
29460     00 28 0E F2 | 	cmp	local02, #0 wz
29464     1C 00 90 5D |  if_ne	jmp	#LR__3695
29468     24 32 0E F2 | 	cmp	local07, #36 wz
2946c     10 28 06 A6 |  if_e	mov	local02, #16
29470     01 26 06 A1 |  if_e	add	local01, #1
29474     0C 00 90 AD |  if_e	jmp	#LR__3694
29478     25 32 0E F2 | 	cmp	local07, #37 wz
2947c     02 28 06 A6 |  if_e	mov	local02, #2
29480     01 26 06 A1 |  if_e	add	local01, #1
29484                 | LR__3694
29484                 | LR__3695
29484     97 48 48 FB | 	callpa	#(@LR__3703-@LR__3696)>>2,fcache_load_ptr_
29488                 | LR__3696
29488                 | LR__3697
29488     13 33 C2 FA | 	rdbyte	local07, local01
2948c     5F 32 0E F2 | 	cmp	local07, #95 wz
29490     01 26 06 F1 | 	add	local01, #1
29494     F0 FF 9F AD |  if_e	jmp	#LR__3697
29498     30 32 0E F2 | 	cmp	local07, #48 wz
2949c     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
294a0     00 2C 06 A6 |  if_e	mov	local04, #0
294a4     60 00 90 AD |  if_e	jmp	#LR__3702
294a8     31 32 56 F2 | 	cmps	local07, #49 wc
294ac     18 00 90 CD |  if_b	jmp	#LR__3698
294b0     3A 32 56 F2 | 	cmps	local07, #58 wc
294b4     19 2D 02 C6 |  if_b	mov	local04, local07
294b8     30 2C 86 C1 |  if_b	sub	local04, #48
294bc     00 28 0E C2 |  if_b	cmp	local02, #0 wz
294c0     0A 28 06 86 |  if_c_and_z	mov	local02, #10
294c4     40 00 90 CD |  if_b	jmp	#LR__3701
294c8                 | LR__3698
294c8     0B 28 56 F2 | 	cmps	local02, #11 wc
294cc     61 32 56 32 |  if_ae	cmps	local07, #97 wc
294d0     14 00 90 CD |  if_b	jmp	#LR__3699
294d4     67 32 56 F2 | 	cmps	local07, #103 wc
294d8     61 32 86 C1 |  if_b	sub	local07, #97
294dc     0A 2C 06 C6 |  if_b	mov	local04, #10
294e0     19 2D 02 C1 |  if_b	add	local04, local07
294e4     20 00 90 CD |  if_b	jmp	#LR__3700
294e8                 | LR__3699
294e8     0B 28 56 F2 | 	cmps	local02, #11 wc
294ec     41 32 56 32 |  if_ae	cmps	local07, #65 wc
294f0     24 00 90 CD |  if_b	jmp	#LR__3704
294f4     47 32 56 F2 | 	cmps	local07, #71 wc
294f8     41 32 86 C1 |  if_b	sub	local07, #65
294fc     0A 2C 06 C6 |  if_b	mov	local04, #10
29500     19 2D 02 C1 |  if_b	add	local04, local07
29504     10 00 90 3D |  if_ae	jmp	#LR__3704
29508                 | LR__3700
29508                 | LR__3701
29508                 | LR__3702
29508     15 29 02 FD | 	qmul	local02, local03
2950c     18 2A 62 FD | 	getqx	local03
29510     16 2B 02 F1 | 	add	local03, local04
29514     70 FF 9F FD | 	jmp	#LR__3696
29518                 | LR__3703
29518                 | LR__3704
29518     00 28 0E F2 | 	cmp	local02, #0 wz
2951c     64 00 90 5D |  if_ne	jmp	#LR__3710
29520     78 32 0E F2 | 	cmp	local07, #120 wz
29524     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
29528     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
2952c     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
29530     14 00 90 5D |  if_ne	jmp	#LR__3705
29534     13 13 02 F6 | 	mov	arg01, local01
29538     10 14 06 F6 | 	mov	arg02, #16
2953c     C8 FE BF FD | 	call	#__system____builtin_atoi
29540     FD 2A 02 F6 | 	mov	local03, result1
29544     3C 00 90 FD | 	jmp	#LR__3709
29548                 | LR__3705
29548     62 32 0E F2 | 	cmp	local07, #98 wz
2954c     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
29550     14 00 90 5D |  if_ne	jmp	#LR__3706
29554     13 13 02 F6 | 	mov	arg01, local01
29558     02 14 06 F6 | 	mov	arg02, #2
2955c     A8 FE BF FD | 	call	#__system____builtin_atoi
29560     FD 2A 02 F6 | 	mov	local03, result1
29564     1C 00 90 FD | 	jmp	#LR__3708
29568                 | LR__3706
29568     6F 32 0E F2 | 	cmp	local07, #111 wz
2956c     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
29570     10 00 90 5D |  if_ne	jmp	#LR__3707
29574     13 13 02 F6 | 	mov	arg01, local01
29578     08 14 06 F6 | 	mov	arg02, #8
2957c     88 FE BF FD | 	call	#__system____builtin_atoi
29580     FD 2A 02 F6 | 	mov	local03, result1
29584                 | LR__3707
29584                 | LR__3708
29584                 | LR__3709
29584                 | LR__3710
29584     00 2E 0E F2 | 	cmp	local05, #0 wz
29588     15 2B 62 56 |  if_ne	neg	local03, local03
2958c     15 FB 01 F6 | 	mov	result1, local03
29590     A7 F0 03 F6 | 	mov	ptra, fp
29594     B2 00 A0 FD | 	call	#popregs_
29598                 | __system____builtin_atoi_ret
29598     2D 00 64 FD | 	ret
2959c                 | 
2959c                 | __system____builtin_atof
2959c     07 4A 05 F6 | 	mov	COUNT_, #7
295a0     A8 00 A0 FD | 	call	#pushregs_
295a4     09 27 02 F6 | 	mov	local01, arg01
295a8     00 28 06 F6 | 	mov	local02, #0
295ac     00 2A 06 F6 | 	mov	local03, #0
295b0     00 2C 06 F6 | 	mov	local04, #0
295b4     00 2E 06 F6 | 	mov	local05, #0
295b8     97 08 48 FB | 	callpa	#(@LR__3721-@LR__3720)>>2,fcache_load_ptr_
295bc                 | LR__3720
295bc     13 17 C2 FA | 	rdbyte	arg03, local01
295c0     20 16 0E F2 | 	cmp	arg03, #32 wz
295c4     01 26 06 A1 |  if_e	add	local01, #1
295c8     F0 FF 9F AD |  if_e	jmp	#LR__3720
295cc                 | LR__3721
295cc     13 31 C2 FA | 	rdbyte	local06, local01
295d0                 | LR__3722
295d0     2B 30 0E F2 | 	cmp	local06, #43 wz
295d4     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
295d8     14 00 90 5D |  if_ne	jmp	#LR__3723
295dc     2D 30 0E F2 | 	cmp	local06, #45 wz
295e0     1F 2C E6 A4 |  if_e	bitnot	local04, #31
295e4     01 26 06 F1 | 	add	local01, #1
295e8     13 31 C2 FA | 	rdbyte	local06, local01
295ec     E0 FF 9F FD | 	jmp	#LR__3722
295f0                 | LR__3723
295f0                 | LR__3724
295f0     97 08 48 FB | 	callpa	#(@LR__3726-@LR__3725)>>2,fcache_load_ptr_
295f4                 | LR__3725
295f4     13 31 C2 FA | 	rdbyte	local06, local01
295f8     5F 30 0E F2 | 	cmp	local06, #95 wz
295fc     01 26 06 F1 | 	add	local01, #1
29600     F0 FF 9F AD |  if_e	jmp	#LR__3725
29604                 | LR__3726
29604     00 30 0E F2 | 	cmp	local06, #0 wz
29608     5C 00 90 AD |  if_e	jmp	#LR__3728
2960c     30 30 56 F2 | 	cmps	local06, #48 wc
29610     44 00 90 CD |  if_b	jmp	#LR__3727
29614     3A 30 56 F2 | 	cmps	local06, #58 wc
29618     3C 00 90 3D |  if_ae	jmp	#LR__3727
2961c     14 13 02 F6 | 	mov	arg01, local02
29620     00 90 20 FF 
29624     00 14 06 F6 | 	mov	arg02, ##1092616192
29628     64 F7 BF FD | 	call	#__system___float_mul
2962c     FD 28 02 F6 | 	mov	local02, result1
29630     30 30 86 F1 | 	sub	local06, #48
29634     18 13 02 F6 | 	mov	arg01, local06
29638     50 F3 BF FD | 	call	#__system___float_fromuns
2963c     FD 14 02 F6 | 	mov	arg02, result1
29640     14 13 02 F6 | 	mov	arg01, local02
29644     78 F3 BF FD | 	call	#__system___float_add
29648     FD 28 02 F6 | 	mov	local02, result1
2964c     00 2E 0E F2 | 	cmp	local05, #0 wz
29650     01 2A 86 51 |  if_ne	sub	local03, #1
29654     98 FF 9F FD | 	jmp	#LR__3724
29658                 | LR__3727
29658     2E 30 0E F2 | 	cmp	local06, #46 wz
2965c     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
29660     01 2E 06 A6 |  if_e	mov	local05, #1
29664     88 FF 9F AD |  if_e	jmp	#LR__3724
29668                 | LR__3728
29668     45 30 0E F2 | 	cmp	local06, #69 wz
2966c     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
29670     18 00 90 5D |  if_ne	jmp	#LR__3729
29674     13 13 02 F6 | 	mov	arg01, local01
29678     00 14 06 F6 | 	mov	arg02, #0
2967c     88 FD BF FD | 	call	#__system____builtin_atoi
29680     15 FB 01 F1 | 	add	result1, local03
29684     FD 32 02 F6 | 	mov	local07, result1
29688     04 00 90 FD | 	jmp	#LR__3730
2968c                 | LR__3729
2968c     15 33 02 F6 | 	mov	local07, local03
29690                 | LR__3730
29690     19 17 02 F6 | 	mov	arg03, local07
29694     14 13 02 F6 | 	mov	arg01, local02
29698     00 90 20 FF 
2969c     00 14 06 F6 | 	mov	arg02, ##1092616192
296a0     F4 06 B0 FD | 	call	#__system___float_pow_n
296a4     16 FB 61 F5 | 	xor	result1, local04
296a8     A7 F0 03 F6 | 	mov	ptra, fp
296ac     B2 00 A0 FD | 	call	#popregs_
296b0                 | __system____builtin_atof_ret
296b0     2D 00 64 FD | 	ret
296b4                 | 
296b4                 | __system____builtin_ilogb
296b4     FC FB BF FD | 	call	#__system___float_Unpack
296b8     00 FE 0D F2 | 	cmp	result3, #0 wz
296bc     00 00 40 AF 
296c0     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
296c4     24 00 90 AD |  if_e	jmp	#LR__3741
296c8     80 FC 0D F2 | 	cmp	result2, #128 wz
296cc     18 00 90 5D |  if_ne	jmp	#LR__3740
296d0     00 00 10 FF 
296d4     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
296d8     1E FA CD A9 |  if_e	bmask	result1, #30
296dc     0C 00 90 AD |  if_e	jmp	#LR__3741
296e0     1F FA C5 F9 | 	decod	result1, #31
296e4     04 00 90 FD | 	jmp	#LR__3741
296e8                 | LR__3740
296e8     FE FA 01 F6 | 	mov	result1, result2
296ec                 | LR__3741
296ec                 | __system____builtin_ilogb_ret
296ec     2D 00 64 FD | 	ret
296f0                 | 
296f0                 | __system____builtin_sinf
296f0     03 4A 05 F6 | 	mov	COUNT_, #3
296f4     A8 00 A0 FD | 	call	#pushregs_
296f8     09 27 02 F6 | 	mov	local01, arg01
296fc     87 64 20 FF 
29700     DB 15 06 F6 | 	mov	arg02, ##1086918619
29704     8C F8 BF FD | 	call	#__system___float_div
29708     FD 12 02 F6 | 	mov	arg01, result1
2970c     00 14 06 F6 | 	mov	arg02, #0
29710     44 FB BF FD | 	call	#__system___float_tointeger
29714     FD 16 0A F6 | 	mov	arg03, result1 wz
29718     44 00 90 AD |  if_e	jmp	#LR__3750
2971c     0B 13 52 F6 | 	abs	arg01, arg03 wc
29720     1F 28 C6 C9 |  if_b	decod	local02, #31
29724     00 28 06 36 |  if_ae	mov	local02, #0
29728     60 F2 BF FD | 	call	#__system___float_fromuns
2972c     14 FB 61 F5 | 	xor	result1, local02
29730     FD 12 02 F6 | 	mov	arg01, result1
29734     1E 14 C6 F9 | 	decod	arg02, #30
29738     54 F6 BF FD | 	call	#__system___float_mul
2973c     FD 12 02 F6 | 	mov	arg01, result1
29740     87 24 20 FF 
29744     DB 15 06 F6 | 	mov	arg02, ##1078530011
29748     44 F6 BF FD | 	call	#__system___float_mul
2974c     FD 14 02 F6 | 	mov	arg02, result1
29750     13 13 02 F6 | 	mov	arg01, local01
29754     1F 14 E6 F4 | 	bitnot	arg02, #31
29758     64 F2 BF FD | 	call	#__system___float_add
2975c     FD 26 02 F6 | 	mov	local01, result1
29760                 | LR__3750
29760     13 13 02 F6 | 	mov	arg01, local01
29764     66 E6 1E FF 
29768     CD 14 06 F6 | 	mov	arg02, ##1036831949
2976c     01 16 06 F6 | 	mov	arg03, #1
29770     50 FA BF FD | 	call	#__system___float_cmp
29774     00 FA 55 F2 | 	cmps	result1, #0 wc
29778     5C 00 90 3D |  if_ae	jmp	#LR__3751
2977c     13 13 02 F6 | 	mov	arg01, local01
29780     66 E6 5E FF 
29784     CD 14 06 F6 | 	mov	arg02, ##-1110651699
29788     01 16 66 F6 | 	neg	arg03, #1
2978c     34 FA BF FD | 	call	#__system___float_cmp
29790     01 FA 55 F2 | 	cmps	result1, #1 wc
29794     40 00 90 CD |  if_b	jmp	#LR__3751
29798     13 13 02 F6 | 	mov	arg01, local01
2979c     13 15 02 F6 | 	mov	arg02, local01
297a0     EC F5 BF FD | 	call	#__system___float_mul
297a4     FD 12 02 F6 | 	mov	arg01, result1
297a8     13 15 02 F6 | 	mov	arg02, local01
297ac     E0 F5 BF FD | 	call	#__system___float_mul
297b0     FD 12 02 F6 | 	mov	arg01, result1
297b4     00 60 20 FF 
297b8     00 14 06 F6 | 	mov	arg02, ##1086324736
297bc     D4 F7 BF FD | 	call	#__system___float_div
297c0     FD 14 02 F6 | 	mov	arg02, result1
297c4     13 13 02 F6 | 	mov	arg01, local01
297c8     1F 14 E6 F4 | 	bitnot	arg02, #31
297cc     F0 F1 BF FD | 	call	#__system___float_add
297d0     FD 2A 02 F6 | 	mov	local03, result1
297d4     54 00 90 FD | 	jmp	#LR__3752
297d8                 | LR__3751
297d8     13 13 02 F6 | 	mov	arg01, local01
297dc     7C 91 26 FF 
297e0     83 15 06 F6 | 	mov	arg02, ##1294137731
297e4     A8 F5 BF FD | 	call	#__system___float_mul
297e8     FD 12 02 F6 | 	mov	arg01, result1
297ec     00 14 06 F6 | 	mov	arg02, #0
297f0     64 FA BF FD | 	call	#__system___float_tointeger
297f4     02 FA 65 F0 | 	shl	result1, #2
297f8     00 00 A0 FF 
297fc     FD 00 48 FD | 	qrotate	##1073741824, result1
29800     19 12 62 FD | 	getqy	arg01
29804     09 13 52 F6 | 	abs	arg01, arg01 wc
29808     1F 28 C6 C9 |  if_b	decod	local02, #31
2980c     00 28 06 36 |  if_ae	mov	local02, #0
29810     78 F1 BF FD | 	call	#__system___float_fromuns
29814     14 FB 61 F5 | 	xor	result1, local02
29818     FD 12 02 F6 | 	mov	arg01, result1
2981c     00 40 27 FF 
29820     00 14 06 F6 | 	mov	arg02, ##1317011456
29824     6C F7 BF FD | 	call	#__system___float_div
29828     FD 2A 02 F6 | 	mov	local03, result1
2982c                 | LR__3752
2982c     15 FB 01 F6 | 	mov	result1, local03
29830     A7 F0 03 F6 | 	mov	ptra, fp
29834     B2 00 A0 FD | 	call	#popregs_
29838                 | __system____builtin_sinf_ret
29838     2D 00 64 FD | 	ret
2983c                 | 
2983c                 | __system____builtin_tanf
2983c     02 4A 05 F6 | 	mov	COUNT_, #2
29840     A8 00 A0 FD | 	call	#pushregs_
29844     09 27 02 F6 | 	mov	local01, arg01
29848     A4 FE BF FD | 	call	#__system____builtin_sinf
2984c     FD 28 02 F6 | 	mov	local02, result1
29850     13 15 02 F6 | 	mov	arg02, local01
29854     87 E4 1F FF 
29858     DB 13 06 F6 | 	mov	arg01, ##1070141403
2985c     1F 14 E6 F4 | 	bitnot	arg02, #31
29860     5C F1 BF FD | 	call	#__system___float_add
29864     FD 12 02 F6 | 	mov	arg01, result1
29868     84 FE BF FD | 	call	#__system____builtin_sinf
2986c     FD 14 02 F6 | 	mov	arg02, result1
29870     14 13 02 F6 | 	mov	arg01, local02
29874     1C F7 BF FD | 	call	#__system___float_div
29878     A7 F0 03 F6 | 	mov	ptra, fp
2987c     B2 00 A0 FD | 	call	#popregs_
29880                 | __system____builtin_tanf_ret
29880     2D 00 64 FD | 	ret
29884                 | 
29884                 | __system____builtin_asinf
29884     01 4A 05 F6 | 	mov	COUNT_, #1
29888     A8 00 A0 FD | 	call	#pushregs_
2988c     09 27 02 F6 | 	mov	local01, arg01
29890     13 15 02 F6 | 	mov	arg02, local01
29894     13 13 02 F6 | 	mov	arg01, local01
29898     F4 F4 BF FD | 	call	#__system___float_mul
2989c     FD 14 02 F6 | 	mov	arg02, result1
298a0     00 C0 1F FF 
298a4     00 12 06 F6 | 	mov	arg01, ##1065353216
298a8     1F 14 E6 F4 | 	bitnot	arg02, #31
298ac     10 F1 BF FD | 	call	#__system___float_add
298b0     FD 12 02 F6 | 	mov	arg01, result1
298b4     00 F4 BF FD | 	call	#__system___float_sqrt
298b8     FD 14 02 F6 | 	mov	arg02, result1
298bc     13 13 02 F6 | 	mov	arg01, local01
298c0     58 00 B0 FD | 	call	#__system____builtin_atan2f
298c4     A7 F0 03 F6 | 	mov	ptra, fp
298c8     B2 00 A0 FD | 	call	#popregs_
298cc                 | __system____builtin_asinf_ret
298cc     2D 00 64 FD | 	ret
298d0                 | 
298d0                 | __system____builtin_acosf
298d0     01 4A 05 F6 | 	mov	COUNT_, #1
298d4     A8 00 A0 FD | 	call	#pushregs_
298d8     09 27 02 F6 | 	mov	local01, arg01
298dc     13 15 02 F6 | 	mov	arg02, local01
298e0     13 13 02 F6 | 	mov	arg01, local01
298e4     A8 F4 BF FD | 	call	#__system___float_mul
298e8     FD 14 02 F6 | 	mov	arg02, result1
298ec     00 C0 1F FF 
298f0     00 12 06 F6 | 	mov	arg01, ##1065353216
298f4     1F 14 E6 F4 | 	bitnot	arg02, #31
298f8     C4 F0 BF FD | 	call	#__system___float_add
298fc     FD 12 02 F6 | 	mov	arg01, result1
29900     B4 F3 BF FD | 	call	#__system___float_sqrt
29904     FD 12 02 F6 | 	mov	arg01, result1
29908     13 15 02 F6 | 	mov	arg02, local01
2990c     0C 00 B0 FD | 	call	#__system____builtin_atan2f
29910     A7 F0 03 F6 | 	mov	ptra, fp
29914     B2 00 A0 FD | 	call	#popregs_
29918                 | __system____builtin_acosf_ret
29918     2D 00 64 FD | 	ret
2991c                 | 
2991c                 | __system____builtin_atan2f
2991c     04 4A 05 F6 | 	mov	COUNT_, #4
29920     A8 00 A0 FD | 	call	#pushregs_
29924     09 27 02 F6 | 	mov	local01, arg01
29928     0A 29 02 F6 | 	mov	local02, arg02
2992c     13 13 02 F6 | 	mov	arg01, local01
29930     00 14 06 F6 | 	mov	arg02, #0
29934     01 16 06 F6 | 	mov	arg03, #1
29938     88 F8 BF FD | 	call	#__system___float_cmp
2993c     00 FA 0D F2 | 	cmp	result1, #0 wz
29940     28 00 90 5D |  if_ne	jmp	#LR__3760
29944     14 13 02 F6 | 	mov	arg01, local02
29948     00 14 06 F6 | 	mov	arg02, #0
2994c     01 16 06 F6 | 	mov	arg03, #1
29950     70 F8 BF FD | 	call	#__system___float_cmp
29954     00 FA 55 F2 | 	cmps	result1, #0 wc
29958     87 24 60 CF 
2995c     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
29960     DC 00 90 CD |  if_b	jmp	#LR__3761
29964     00 FA 05 F6 | 	mov	result1, #0
29968     D4 00 90 FD | 	jmp	#LR__3761
2996c                 | LR__3760
2996c     14 13 02 F6 | 	mov	arg01, local02
29970     14 15 02 F6 | 	mov	arg02, local02
29974     18 F4 BF FD | 	call	#__system___float_mul
29978     FD 2A 02 F6 | 	mov	local03, result1
2997c     13 13 02 F6 | 	mov	arg01, local01
29980     13 15 02 F6 | 	mov	arg02, local01
29984     08 F4 BF FD | 	call	#__system___float_mul
29988     FD 14 02 F6 | 	mov	arg02, result1
2998c     15 13 02 F6 | 	mov	arg01, local03
29990     2C F0 BF FD | 	call	#__system___float_add
29994     FD 12 02 F6 | 	mov	arg01, result1
29998     1C F3 BF FD | 	call	#__system___float_sqrt
2999c     FD 2A 02 F6 | 	mov	local03, result1
299a0     14 13 02 F6 | 	mov	arg01, local02
299a4     15 15 02 F6 | 	mov	arg02, local03
299a8     E8 F5 BF FD | 	call	#__system___float_div
299ac     FD 28 02 F6 | 	mov	local02, result1
299b0     13 13 02 F6 | 	mov	arg01, local01
299b4     15 15 02 F6 | 	mov	arg02, local03
299b8     D8 F5 BF FD | 	call	#__system___float_div
299bc     FD 26 02 F6 | 	mov	local01, result1
299c0     00 40 27 FF 
299c4     00 12 06 F6 | 	mov	arg01, ##1317011456
299c8     14 15 02 F6 | 	mov	arg02, local02
299cc     C0 F3 BF FD | 	call	#__system___float_mul
299d0     FD 12 02 F6 | 	mov	arg01, result1
299d4     00 14 06 F6 | 	mov	arg02, #0
299d8     7C F8 BF FD | 	call	#__system___float_tointeger
299dc     FD 2A 02 F6 | 	mov	local03, result1
299e0     00 40 27 FF 
299e4     00 12 06 F6 | 	mov	arg01, ##1317011456
299e8     13 15 02 F6 | 	mov	arg02, local01
299ec     A0 F3 BF FD | 	call	#__system___float_mul
299f0     FD 12 02 F6 | 	mov	arg01, result1
299f4     00 14 06 F6 | 	mov	arg02, #0
299f8     5C F8 BF FD | 	call	#__system___float_tointeger
299fc     FD 2A 52 FD | 	qvector	local03, result1
29a00     87 24 20 FF 
29a04     DB 2B 06 F6 | 	mov	local03, ##1078530011
29a08     19 12 62 FD | 	getqy	arg01
29a0c     01 12 C6 F0 | 	sar	arg01, #1
29a10     09 13 52 F6 | 	abs	arg01, arg01 wc
29a14     1F 2C C6 C9 |  if_b	decod	local04, #31
29a18     00 2C 06 36 |  if_ae	mov	local04, #0
29a1c     6C EF BF FD | 	call	#__system___float_fromuns
29a20     16 FB 61 F5 | 	xor	result1, local04
29a24     FD 12 02 F6 | 	mov	arg01, result1
29a28     00 40 27 FF 
29a2c     00 14 06 F6 | 	mov	arg02, ##1317011456
29a30     60 F5 BF FD | 	call	#__system___float_div
29a34     FD 14 02 F6 | 	mov	arg02, result1
29a38     15 13 02 F6 | 	mov	arg01, local03
29a3c     50 F3 BF FD | 	call	#__system___float_mul
29a40                 | LR__3761
29a40     A7 F0 03 F6 | 	mov	ptra, fp
29a44     B2 00 A0 FD | 	call	#popregs_
29a48                 | __system____builtin_atan2f_ret
29a48     2D 00 64 FD | 	ret
29a4c                 | 
29a4c                 | __system____builtin_exp2f
29a4c     04 4A 05 F6 | 	mov	COUNT_, #4
29a50     A8 00 A0 FD | 	call	#pushregs_
29a54     09 27 02 F6 | 	mov	local01, arg01
29a58     00 7F 21 FF 
29a5c     00 14 06 F6 | 	mov	arg02, ##1123942400
29a60     01 16 66 F6 | 	neg	arg03, #1
29a64     5C F7 BF FD | 	call	#__system___float_cmp
29a68     00 FA 55 F2 | 	cmps	result1, #0 wc
29a6c     00 C0 3F 3F 
29a70     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
29a74     DC 00 90 3D |  if_ae	jmp	#LR__3771
29a78     13 13 02 F6 | 	mov	arg01, local01
29a7c     00 7F 61 FF 
29a80     00 14 06 F6 | 	mov	arg02, ##-1023541248
29a84     01 16 06 F6 | 	mov	arg03, #1
29a88     38 F7 BF FD | 	call	#__system___float_cmp
29a8c     00 FA 55 F2 | 	cmps	result1, #0 wc
29a90     00 FA 05 C6 |  if_b	mov	result1, #0
29a94     BC 00 90 CD |  if_b	jmp	#LR__3771
29a98     13 13 02 F6 | 	mov	arg01, local01
29a9c     00 14 06 F6 | 	mov	arg02, #0
29aa0     B4 F7 BF FD | 	call	#__system___float_tointeger
29aa4     FD 28 02 F6 | 	mov	local02, result1
29aa8     14 13 52 F6 | 	abs	arg01, local02 wc
29aac     1F 2A C6 C9 |  if_b	decod	local03, #31
29ab0     00 2A 06 36 |  if_ae	mov	local03, #0
29ab4     D4 EE BF FD | 	call	#__system___float_fromuns
29ab8     15 FB 61 F5 | 	xor	result1, local03
29abc     FD 14 02 F6 | 	mov	arg02, result1
29ac0     13 13 02 F6 | 	mov	arg01, local01
29ac4     1F 14 E6 F4 | 	bitnot	arg02, #31
29ac8     F4 EE BF FD | 	call	#__system___float_add
29acc     FD 2C 02 F6 | 	mov	local04, result1
29ad0     16 13 02 F6 | 	mov	arg01, local04
29ad4     00 14 06 F6 | 	mov	arg02, #0
29ad8     01 16 06 F6 | 	mov	arg03, #1
29adc     E4 F6 BF FD | 	call	#__system___float_cmp
29ae0     00 FA 55 F2 | 	cmps	result1, #0 wc
29ae4     18 00 90 3D |  if_ae	jmp	#LR__3770
29ae8     16 13 02 F6 | 	mov	arg01, local04
29aec     00 C0 1F FF 
29af0     00 14 06 F6 | 	mov	arg02, ##1065353216
29af4     C8 EE BF FD | 	call	#__system___float_add
29af8     FD 2C 02 F6 | 	mov	local04, result1
29afc     01 28 86 F1 | 	sub	local02, #1
29b00                 | LR__3770
29b00     7F 28 06 F1 | 	add	local02, #127
29b04     17 28 66 F0 | 	shl	local02, #23
29b08     16 13 02 F6 | 	mov	arg01, local04
29b0c     00 80 26 FF 
29b10     00 14 06 F6 | 	mov	arg02, ##1291845632
29b14     78 F2 BF FD | 	call	#__system___float_mul
29b18     FD 12 02 F6 | 	mov	arg01, result1
29b1c     00 14 06 F6 | 	mov	arg02, #0
29b20     34 F7 BF FD | 	call	#__system___float_tointeger
29b24     FD 2C 0A F6 | 	mov	local04, result1 wz
29b28     14 FB 01 A6 |  if_e	mov	result1, local02
29b2c     24 00 90 AD |  if_e	jmp	#LR__3771
29b30     3E 2C 26 F4 | 	bith	local04, #62
29b34     0F 2C 62 FD | 	qexp	local04
29b38     14 13 02 F6 | 	mov	arg01, local02
29b3c     18 14 62 FD | 	getqx	arg02
29b40     01 14 06 F1 | 	add	arg02, #1
29b44     01 14 46 F0 | 	shr	arg02, #1
29b48     00 80 1F FF 
29b4c     00 14 06 F1 | 	add	arg02, ##1056964608
29b50     3C F2 BF FD | 	call	#__system___float_mul
29b54                 | LR__3771
29b54     A7 F0 03 F6 | 	mov	ptra, fp
29b58     B2 00 A0 FD | 	call	#popregs_
29b5c                 | __system____builtin_exp2f_ret
29b5c     2D 00 64 FD | 	ret
29b60                 | 
29b60                 | __system____builtin_log2f
29b60     06 4A 05 F6 | 	mov	COUNT_, #6
29b64     A8 00 A0 FD | 	call	#pushregs_
29b68     09 27 02 F6 | 	mov	local01, arg01
29b6c     09 29 0A F6 | 	mov	local02, arg01 wz
29b70     00 00 40 5F 
29b74     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
29b78     00 40 00 AF 
29b7c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
29b80     08 01 90 AD |  if_e	jmp	#LR__3784
29b84     00 28 56 F2 | 	cmps	local02, #0 wc
29b88     00 E0 3F CF 
29b8c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
29b90     F8 00 90 CD |  if_b	jmp	#LR__3784
29b94     13 13 02 F6 | 	mov	arg01, local01
29b98     00 90 20 FF 
29b9c     00 14 06 F6 | 	mov	arg02, ##1092616192
29ba0     01 16 06 F6 | 	mov	arg03, #1
29ba4     1C F6 BF FD | 	call	#__system___float_cmp
29ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
29bac     4D 2A 20 AF 
29bb0     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
29bb4     D4 00 90 AD |  if_e	jmp	#LR__3784
29bb8     13 13 02 F6 | 	mov	arg01, local01
29bbc     FC 16 20 FF 
29bc0     54 14 06 F6 | 	mov	arg02, ##1076754516
29bc4     01 16 06 F6 | 	mov	arg03, #1
29bc8     F8 F5 BF FD | 	call	#__system___float_cmp
29bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
29bd0     55 DC 1F AF 
29bd4     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
29bd8     B0 00 90 AD |  if_e	jmp	#LR__3784
29bdc     14 2B 02 F6 | 	mov	local03, local02
29be0     17 2A 46 F0 | 	shr	local03, #23
29be4     15 2B E2 F8 | 	getbyte	local03, local03, #0
29be8     17 29 06 F4 | 	bitl	local02, #279
29bec     14 2D 02 F6 | 	mov	local04, local02
29bf0     FF 2A 0E F2 | 	cmp	local03, #255 wz
29bf4     1C 00 90 5D |  if_ne	jmp	#LR__3780
29bf8     00 2C 0E F2 | 	cmp	local04, #0 wz
29bfc     00 C0 3F 5F 
29c00     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
29c04     00 E0 3F AF 
29c08     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
29c0c     17 FB 01 F6 | 	mov	result1, local05
29c10     78 00 90 FD | 	jmp	#LR__3784
29c14                 | LR__3780
29c14     00 2A 0E F2 | 	cmp	local03, #0 wz
29c18     17 2C 26 54 |  if_ne	bith	local04, #23
29c1c     7F 2A 86 51 |  if_ne	sub	local03, #127
29c20     28 00 90 5D |  if_ne	jmp	#LR__3783
29c24     00 2C 0E F2 | 	cmp	local04, #0 wz
29c28     00 40 00 AF 
29c2c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
29c30     58 00 90 AD |  if_e	jmp	#LR__3784
29c34     7E 2A 66 F6 | 	neg	local03, #126
29c38     97 08 48 FB | 	callpa	#(@LR__3782-@LR__3781)>>2,fcache_load_ptr_
29c3c                 | LR__3781
29c3c     17 2C 2E F4 | 	testbn	local04, #23 wz
29c40     01 2C 66 A0 |  if_e	shl	local04, #1
29c44     01 2A 06 A1 |  if_e	add	local03, #1
29c48     F0 FF 9F AD |  if_e	jmp	#LR__3781
29c4c                 | LR__3782
29c4c                 | LR__3783
29c4c     0E 2C 62 FD | 	qlog	local04
29c50     01 2A 86 F1 | 	sub	local03, #1
29c54     15 13 52 F6 | 	abs	arg01, local03 wc
29c58     1F 30 C6 C9 |  if_b	decod	local06, #31
29c5c     00 30 06 36 |  if_ae	mov	local06, #0
29c60     18 2E 62 FD | 	getqx	local05
29c64     9B 2E 06 F4 | 	bitl	local05, #155
29c68     08 2E 06 F1 | 	add	local05, #8
29c6c     04 2E 46 F0 | 	shr	local05, #4
29c70     00 C0 1F FF 
29c74     00 2E 06 F1 | 	add	local05, ##1065353216
29c78     10 ED BF FD | 	call	#__system___float_fromuns
29c7c     18 FB 61 F5 | 	xor	result1, local06
29c80     FD 14 02 F6 | 	mov	arg02, result1
29c84     17 13 02 F6 | 	mov	arg01, local05
29c88     34 ED BF FD | 	call	#__system___float_add
29c8c                 | LR__3784
29c8c     A7 F0 03 F6 | 	mov	ptra, fp
29c90     B2 00 A0 FD | 	call	#popregs_
29c94                 | __system____builtin_log2f_ret
29c94     2D 00 64 FD | 	ret
29c98                 | 
29c98                 | __system____builtin_powf
29c98     04 4A 05 F6 | 	mov	COUNT_, #4
29c9c     A8 00 A0 FD | 	call	#pushregs_
29ca0     09 27 02 F6 | 	mov	local01, arg01
29ca4     0A 29 02 F6 | 	mov	local02, arg02
29ca8     14 13 02 F6 | 	mov	arg01, local02
29cac     00 14 06 F6 | 	mov	arg02, #0
29cb0     A4 F5 BF FD | 	call	#__system___float_tointeger
29cb4     FD 2A 02 F6 | 	mov	local03, result1
29cb8     15 13 52 F6 | 	abs	arg01, local03 wc
29cbc     1F 2C C6 C9 |  if_b	decod	local04, #31
29cc0     00 2C 06 36 |  if_ae	mov	local04, #0
29cc4     C4 EC BF FD | 	call	#__system___float_fromuns
29cc8     16 FB 61 F5 | 	xor	result1, local04
29ccc     FD 12 02 F6 | 	mov	arg01, result1
29cd0     14 15 02 F6 | 	mov	arg02, local02
29cd4     01 16 06 F6 | 	mov	arg03, #1
29cd8     E8 F4 BF FD | 	call	#__system___float_cmp
29cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
29ce0     18 00 90 5D |  if_ne	jmp	#LR__3790
29ce4     00 C0 1F FF 
29ce8     00 12 06 F6 | 	mov	arg01, ##1065353216
29cec     13 15 02 F6 | 	mov	arg02, local01
29cf0     15 17 02 F6 | 	mov	arg03, local03
29cf4     A0 00 B0 FD | 	call	#__system___float_pow_n
29cf8     58 00 90 FD | 	jmp	#LR__3791
29cfc                 | LR__3790
29cfc     13 13 02 F6 | 	mov	arg01, local01
29d00     00 14 06 F6 | 	mov	arg02, #0
29d04     01 16 06 F6 | 	mov	arg03, #1
29d08     B8 F4 BF FD | 	call	#__system___float_cmp
29d0c     00 FA 55 F2 | 	cmps	result1, #0 wc
29d10     00 E0 3F CF 
29d14     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
29d18     38 00 90 CD |  if_b	jmp	#LR__3791
29d1c     13 13 02 F6 | 	mov	arg01, local01
29d20     00 14 06 F6 | 	mov	arg02, #0
29d24     01 16 06 F6 | 	mov	arg03, #1
29d28     98 F4 BF FD | 	call	#__system___float_cmp
29d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
29d30     00 FA 05 A6 |  if_e	mov	result1, #0
29d34     1C 00 90 AD |  if_e	jmp	#LR__3791
29d38     13 13 02 F6 | 	mov	arg01, local01
29d3c     20 FE BF FD | 	call	#__system____builtin_log2f
29d40     FD 12 02 F6 | 	mov	arg01, result1
29d44     14 15 02 F6 | 	mov	arg02, local02
29d48     44 F0 BF FD | 	call	#__system___float_mul
29d4c     FD 12 02 F6 | 	mov	arg01, result1
29d50     F8 FC BF FD | 	call	#__system____builtin_exp2f
29d54                 | LR__3791
29d54     A7 F0 03 F6 | 	mov	ptra, fp
29d58     B2 00 A0 FD | 	call	#popregs_
29d5c                 | __system____builtin_powf_ret
29d5c     2D 00 64 FD | 	ret
29d60                 | 
29d60                 | __system____builtin_logbase
29d60     02 4A 05 F6 | 	mov	COUNT_, #2
29d64     A8 00 A0 FD | 	call	#pushregs_
29d68     09 27 02 F6 | 	mov	local01, arg01
29d6c     0A 13 02 F6 | 	mov	arg01, arg02
29d70     EC FD BF FD | 	call	#__system____builtin_log2f
29d74     FD 28 02 F6 | 	mov	local02, result1
29d78     13 13 02 F6 | 	mov	arg01, local01
29d7c     E0 FD BF FD | 	call	#__system____builtin_log2f
29d80     FD 14 02 F6 | 	mov	arg02, result1
29d84     14 13 02 F6 | 	mov	arg01, local02
29d88     08 F2 BF FD | 	call	#__system___float_div
29d8c     A7 F0 03 F6 | 	mov	ptra, fp
29d90     B2 00 A0 FD | 	call	#popregs_
29d94                 | __system____builtin_logbase_ret
29d94     2D 00 64 FD | 	ret
29d98                 | 
29d98                 | __system___float_pow_n
29d98     05 4A 05 F6 | 	mov	COUNT_, #5
29d9c     A8 00 A0 FD | 	call	#pushregs_
29da0     09 27 02 F6 | 	mov	local01, arg01
29da4     0A 29 02 F6 | 	mov	local02, arg02
29da8     0B 2B 02 F6 | 	mov	local03, arg03
29dac     00 2A 56 F2 | 	cmps	local03, #0 wc
29db0     18 00 90 3D |  if_ae	jmp	#LR__3800
29db4     01 2C 06 F6 | 	mov	local04, #1
29db8     15 2B 62 F6 | 	neg	local03, local03
29dbc     00 2A 56 F2 | 	cmps	local03, #0 wc
29dc0     00 FA 05 C6 |  if_b	mov	result1, #0
29dc4     94 00 90 CD |  if_b	jmp	#LR__3808
29dc8     04 00 90 FD | 	jmp	#LR__3801
29dcc                 | LR__3800
29dcc     00 2C 06 F6 | 	mov	local04, #0
29dd0                 | LR__3801
29dd0     00 C0 1F FF 
29dd4     00 2E 06 F6 | 	mov	local05, ##1065353216
29dd8                 | LR__3802
29dd8     01 2A 56 F2 | 	cmps	local03, #1 wc
29ddc     30 00 90 CD |  if_b	jmp	#LR__3804
29de0     01 2A CE F7 | 	test	local03, #1 wz
29de4     10 00 90 AD |  if_e	jmp	#LR__3803
29de8     17 13 02 F6 | 	mov	arg01, local05
29dec     14 15 02 F6 | 	mov	arg02, local02
29df0     9C EF BF FD | 	call	#__system___float_mul
29df4     FD 2E 02 F6 | 	mov	local05, result1
29df8                 | LR__3803
29df8     01 2A C6 F0 | 	sar	local03, #1
29dfc     14 13 02 F6 | 	mov	arg01, local02
29e00     14 15 02 F6 | 	mov	arg02, local02
29e04     88 EF BF FD | 	call	#__system___float_mul
29e08     FD 28 02 F6 | 	mov	local02, result1
29e0c     C8 FF 9F FD | 	jmp	#LR__3802
29e10                 | LR__3804
29e10     00 2C 0E F2 | 	cmp	local04, #0 wz
29e14     14 00 90 AD |  if_e	jmp	#LR__3805
29e18     13 13 02 F6 | 	mov	arg01, local01
29e1c     17 15 02 F6 | 	mov	arg02, local05
29e20     70 F1 BF FD | 	call	#__system___float_div
29e24     FD 2E 02 F6 | 	mov	local05, result1
29e28     2C 00 90 FD | 	jmp	#LR__3807
29e2c                 | LR__3805
29e2c     13 13 02 F6 | 	mov	arg01, local01
29e30     00 C0 1F FF 
29e34     00 14 06 F6 | 	mov	arg02, ##1065353216
29e38     01 16 06 F6 | 	mov	arg03, #1
29e3c     84 F3 BF FD | 	call	#__system___float_cmp
29e40     00 FA 0D F2 | 	cmp	result1, #0 wz
29e44     10 00 90 AD |  if_e	jmp	#LR__3806
29e48     13 13 02 F6 | 	mov	arg01, local01
29e4c     17 15 02 F6 | 	mov	arg02, local05
29e50     3C EF BF FD | 	call	#__system___float_mul
29e54     FD 2E 02 F6 | 	mov	local05, result1
29e58                 | LR__3806
29e58                 | LR__3807
29e58     17 FB 01 F6 | 	mov	result1, local05
29e5c                 | LR__3808
29e5c     A7 F0 03 F6 | 	mov	ptra, fp
29e60     B2 00 A0 FD | 	call	#popregs_
29e64                 | __system___float_pow_n_ret
29e64     2D 00 64 FD | 	ret
29e68                 | 
29e68                 | __system___gc_ptrs
29e68     EC 00 02 F6 | 	mov	_var01, __heap_ptr
29e6c     00 03 02 F6 | 	mov	_var02, _var01
29e70     BB 00 00 FF 
29e74     F8 02 06 F1 | 	add	_var02, ##95992
29e78     00 FD 09 FB | 	rdlong	result2, _var01 wz
29e7c     74 00 90 5D |  if_ne	jmp	#LR__3810
29e80     01 FD 01 F6 | 	mov	result2, _var02
29e84     00 FD 81 F1 | 	sub	result2, _var01
29e88     00 03 58 FC | 	wrword	#1, _var01
29e8c     00 FB 01 F6 | 	mov	result1, _var01
29e90     02 FA 05 F1 | 	add	result1, #2
29e94     36 00 80 FF 
29e98     FD 20 59 FC | 	wrword	##27792, result1
29e9c     00 FB 01 F6 | 	mov	result1, _var01
29ea0     04 FA 05 F1 | 	add	result1, #4
29ea4     FD 00 58 FC | 	wrword	#0, result1
29ea8     00 FB 01 F6 | 	mov	result1, _var01
29eac     06 FA 05 F1 | 	add	result1, #6
29eb0     FD 02 58 FC | 	wrword	#1, result1
29eb4     10 00 06 F1 | 	add	_var01, #16
29eb8     FE FC 51 F6 | 	abs	result2, result2 wc
29ebc     04 FC 45 F0 | 	shr	result2, #4
29ec0     FE FC 81 F6 | 	negc	result2, result2
29ec4     00 FD 51 FC | 	wrword	result2, _var01
29ec8     00 FD 01 F6 | 	mov	result2, _var01
29ecc     02 FC 05 F1 | 	add	result2, #2
29ed0     36 00 80 FF 
29ed4     FE 1E 59 FC | 	wrword	##27791, result2
29ed8     00 FD 01 F6 | 	mov	result2, _var01
29edc     04 FC 05 F1 | 	add	result2, #4
29ee0     FE 00 58 FC | 	wrword	#0, result2
29ee4     00 FD 01 F6 | 	mov	result2, _var01
29ee8     06 FC 05 F1 | 	add	result2, #6
29eec     FE 00 58 FC | 	wrword	#0, result2
29ef0     10 00 86 F1 | 	sub	_var01, #16
29ef4                 | LR__3810
29ef4     00 FB 01 F6 | 	mov	result1, _var01
29ef8     01 FD 01 F6 | 	mov	result2, _var02
29efc                 | __system___gc_ptrs_ret
29efc     2D 00 64 FD | 	ret
29f00                 | 
29f00                 | __system___gc_tryalloc
29f00     0B 4A 05 F6 | 	mov	COUNT_, #11
29f04     A8 00 A0 FD | 	call	#pushregs_
29f08     09 27 02 F6 | 	mov	local01, arg01
29f0c     0A 29 02 F6 | 	mov	local02, arg02
29f10     54 FF BF FD | 	call	#__system___gc_ptrs
29f14     FD 2A 02 F6 | 	mov	local03, result1
29f18     FE 2C 02 F6 | 	mov	local04, result2
29f1c     15 2F 02 F6 | 	mov	local05, local03
29f20     00 30 06 F6 | 	mov	local06, #0
29f24     97 1E 48 FB | 	callpa	#(@LR__3821-@LR__3820)>>2,fcache_load_ptr_
29f28                 | LR__3820
29f28     17 33 02 F6 | 	mov	local07, local05
29f2c     06 2E 06 F1 | 	add	local05, #6
29f30     17 15 EA FA | 	rdword	arg02, local05 wz
29f34     15 13 02 F6 | 	mov	arg01, local03
29f38     00 FA 05 A6 |  if_e	mov	result1, #0
29f3c     04 14 66 50 |  if_ne	shl	arg02, #4
29f40     0A 13 02 51 |  if_ne	add	arg01, arg02
29f44     09 FB 01 56 |  if_ne	mov	result1, arg01
29f48     FD 2E 0A F6 | 	mov	local05, result1 wz
29f4c     17 31 E2 5A |  if_ne	rdword	local06, local05
29f50     00 2E 0E F2 | 	cmp	local05, #0 wz
29f54     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
29f58     08 00 90 1D |  if_a	jmp	#LR__3822
29f5c     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
29f60     C4 FF 9F 1D |  if_a	jmp	#LR__3820
29f64                 | LR__3821
29f64                 | LR__3822
29f64     00 2E 0E F2 | 	cmp	local05, #0 wz
29f68     17 FB 01 A6 |  if_e	mov	result1, local05
29f6c     3C 01 90 AD |  if_e	jmp	#LR__3825
29f70     17 FD 01 F6 | 	mov	result2, local05
29f74     06 FC 05 F1 | 	add	result2, #6
29f78     FE 34 E2 FA | 	rdword	local08, result2
29f7c     18 27 52 F2 | 	cmps	local01, local06 wc
29f80     C0 00 90 3D |  if_ae	jmp	#LR__3824
29f84     17 27 52 FC | 	wrword	local01, local05
29f88     17 13 02 F6 | 	mov	arg01, local05
29f8c     13 35 02 F6 | 	mov	local08, local01
29f90     04 34 66 F0 | 	shl	local08, #4
29f94     1A 13 02 F1 | 	add	arg01, local08
29f98     13 31 82 F1 | 	sub	local06, local01
29f9c     09 31 52 FC | 	wrword	local06, arg01
29fa0     09 35 02 F6 | 	mov	local08, arg01
29fa4     02 34 06 F1 | 	add	local08, #2
29fa8     36 00 80 FF 
29fac     1A 1F 59 FC | 	wrword	##27791, local08
29fb0     17 15 0A F6 | 	mov	arg02, local05 wz
29fb4     00 FA 05 A6 |  if_e	mov	result1, #0
29fb8     15 15 82 51 |  if_ne	sub	arg02, local03
29fbc     04 14 46 50 |  if_ne	shr	arg02, #4
29fc0     0A FB 01 56 |  if_ne	mov	result1, arg02
29fc4     09 35 02 F6 | 	mov	local08, arg01
29fc8     04 34 06 F1 | 	add	local08, #4
29fcc     1A FB 51 FC | 	wrword	result1, local08
29fd0     17 35 02 F6 | 	mov	local08, local05
29fd4     06 34 06 F1 | 	add	local08, #6
29fd8     09 15 02 F6 | 	mov	arg02, arg01
29fdc     1A 35 E2 FA | 	rdword	local08, local08
29fe0     06 14 06 F1 | 	add	arg02, #6
29fe4     0A 35 52 FC | 	wrword	local08, arg02
29fe8     09 37 02 F6 | 	mov	local09, arg01
29fec     1B 15 0A F6 | 	mov	arg02, local09 wz
29ff0     00 FA 05 A6 |  if_e	mov	result1, #0
29ff4     15 15 82 51 |  if_ne	sub	arg02, local03
29ff8     04 14 46 50 |  if_ne	shr	arg02, #4
29ffc     0A FB 01 56 |  if_ne	mov	result1, arg02
2a000     FD 34 02 F6 | 	mov	local08, result1
2a004     09 39 EA FA | 	rdword	local10, arg01 wz
2a008     00 FA 05 A6 |  if_e	mov	result1, #0
2a00c     04 38 66 50 |  if_ne	shl	local10, #4
2a010     1C 13 02 51 |  if_ne	add	arg01, local10
2a014     09 FB 01 56 |  if_ne	mov	result1, arg01
2a018     FD 3A 0A F6 | 	mov	local11, result1 wz
2a01c     24 00 90 AD |  if_e	jmp	#LR__3823
2a020     16 3B 52 F2 | 	cmps	local11, local04 wc
2a024     1C 00 90 3D |  if_ae	jmp	#LR__3823
2a028     1B 15 0A F6 | 	mov	arg02, local09 wz
2a02c     00 FA 05 A6 |  if_e	mov	result1, #0
2a030     15 15 82 51 |  if_ne	sub	arg02, local03
2a034     04 14 46 50 |  if_ne	shr	arg02, #4
2a038     0A FB 01 56 |  if_ne	mov	result1, arg02
2a03c     04 3A 06 F1 | 	add	local11, #4
2a040     1D FB 51 FC | 	wrword	result1, local11
2a044                 | LR__3823
2a044                 | LR__3824
2a044     06 32 06 F1 | 	add	local07, #6
2a048     19 35 52 FC | 	wrword	local08, local07
2a04c     36 00 00 FF 
2a050     80 36 06 F6 | 	mov	local09, ##27776
2a054     14 37 42 F5 | 	or	local09, local02
2a058     00 FA 05 F6 | 	mov	result1, #0
2a05c     01 FA 61 FD | 	cogid	result1
2a060     FD 36 42 F5 | 	or	local09, result1
2a064     17 3B 02 F6 | 	mov	local11, local05
2a068     02 3A 06 F1 | 	add	local11, #2
2a06c     1D 37 52 FC | 	wrword	local09, local11
2a070     15 37 02 F6 | 	mov	local09, local03
2a074     08 36 06 F1 | 	add	local09, #8
2a078     17 3B 02 F6 | 	mov	local11, local05
2a07c     1B 37 E2 FA | 	rdword	local09, local09
2a080     06 3A 06 F1 | 	add	local11, #6
2a084     1D 37 52 FC | 	wrword	local09, local11
2a088     17 15 0A F6 | 	mov	arg02, local05 wz
2a08c     00 FA 05 A6 |  if_e	mov	result1, #0
2a090     15 15 82 51 |  if_ne	sub	arg02, local03
2a094     04 14 46 50 |  if_ne	shr	arg02, #4
2a098     0A FB 01 56 |  if_ne	mov	result1, arg02
2a09c     08 2A 06 F1 | 	add	local03, #8
2a0a0     15 FB 51 FC | 	wrword	result1, local03
2a0a4     08 2E 06 F1 | 	add	local05, #8
2a0a8     17 FB 01 F6 | 	mov	result1, local05
2a0ac                 | LR__3825
2a0ac     A7 F0 03 F6 | 	mov	ptra, fp
2a0b0     B2 00 A0 FD | 	call	#popregs_
2a0b4                 | __system___gc_tryalloc_ret
2a0b4     2D 00 64 FD | 	ret
2a0b8                 | 
2a0b8                 | __system___gc_alloc_managed
2a0b8     01 4A 05 F6 | 	mov	COUNT_, #1
2a0bc     A8 00 A0 FD | 	call	#pushregs_
2a0c0     09 27 02 F6 | 	mov	local01, arg01
2a0c4     00 14 06 F6 | 	mov	arg02, #0
2a0c8     1C 00 B0 FD | 	call	#__system___gc_doalloc
2a0cc     FD 14 0A F6 | 	mov	arg02, result1 wz
2a0d0     01 26 56 A2 |  if_e	cmps	local01, #1 wc
2a0d4     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
2a0d8     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2a0dc     A7 F0 03 F6 | 	mov	ptra, fp
2a0e0     B2 00 A0 FD | 	call	#popregs_
2a0e4                 | __system___gc_alloc_managed_ret
2a0e4     2D 00 64 FD | 	ret
2a0e8                 | 
2a0e8                 | __system___gc_doalloc
2a0e8     06 4A 05 F6 | 	mov	COUNT_, #6
2a0ec     A8 00 A0 FD | 	call	#pushregs_
2a0f0     09 27 0A F6 | 	mov	local01, arg01 wz
2a0f4     0A 29 02 F6 | 	mov	local02, arg02
2a0f8     00 FA 05 A6 |  if_e	mov	result1, #0
2a0fc     8C 00 90 AD |  if_e	jmp	#LR__3837
2a100     17 26 06 F1 | 	add	local01, #23
2a104     0F 26 26 F5 | 	andn	local01, #15
2a108     04 26 46 F0 | 	shr	local01, #4
2a10c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2a110     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2a114     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2a118     FC BD BF FD | 	call	#__system___lockmem
2a11c     13 13 02 F6 | 	mov	arg01, local01
2a120     14 15 02 F6 | 	mov	arg02, local02
2a124     D8 FD BF FD | 	call	#__system___gc_tryalloc
2a128     FD 2A 0A F6 | 	mov	local03, result1 wz
2a12c     14 00 90 5D |  if_ne	jmp	#LR__3830
2a130     70 03 B0 FD | 	call	#__system___gc_docollect
2a134     13 13 02 F6 | 	mov	arg01, local01
2a138     14 15 02 F6 | 	mov	arg02, local02
2a13c     C0 FD BF FD | 	call	#__system___gc_tryalloc
2a140     FD 2A 02 F6 | 	mov	local03, result1
2a144                 | LR__3830
2a144     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2a148     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2a14c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2a150     09 01 68 FC | 	wrlong	#0, arg01
2a154     00 2A 0E F2 | 	cmp	local03, #0 wz
2a158     2C 00 90 AD |  if_e	jmp	#LR__3836
2a15c     04 26 66 F0 | 	shl	local01, #4
2a160     08 26 86 F1 | 	sub	local01, #8
2a164     13 2D 52 F6 | 	abs	local04, local01 wc
2a168     02 2C 46 F0 | 	shr	local04, #2
2a16c     16 2F 8A F6 | 	negc	local05, local04 wz
2a170     15 31 02 F6 | 	mov	local06, local03
2a174     10 00 90 AD |  if_e	jmp	#LR__3835
2a178     97 06 48 FB | 	callpa	#(@LR__3833-@LR__3831)>>2,fcache_load_ptr_
2a17c                 | LR__3831
2a17c     17 05 D8 FC | 	rep	@LR__3834, local05
2a180                 | LR__3832
2a180     18 01 68 FC | 	wrlong	#0, local06
2a184     04 30 06 F1 | 	add	local06, #4
2a188                 | LR__3833
2a188                 | LR__3834
2a188                 | LR__3835
2a188                 | LR__3836
2a188     15 FB 01 F6 | 	mov	result1, local03
2a18c                 | LR__3837
2a18c     A7 F0 03 F6 | 	mov	ptra, fp
2a190     B2 00 A0 FD | 	call	#popregs_
2a194                 | __system___gc_doalloc_ret
2a194     2D 00 64 FD | 	ret
2a198                 | 
2a198                 | __system___gc_isvalidptr
2a198     F8 16 06 F4 | 	bitl	arg03, #248
2a19c     08 16 86 F1 | 	sub	arg03, #8
2a1a0     09 17 52 F2 | 	cmps	arg03, arg01 wc
2a1a4     08 00 90 CD |  if_b	jmp	#LR__3840
2a1a8     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2a1ac     08 00 90 CD |  if_b	jmp	#LR__3841
2a1b0                 | LR__3840
2a1b0     00 FA 05 F6 | 	mov	result1, #0
2a1b4     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
2a1b8                 | LR__3841
2a1b8     0B 01 02 F6 | 	mov	_var01, arg03
2a1bc     09 01 62 F5 | 	xor	_var01, arg01
2a1c0     0F 00 CE F7 | 	test	_var01, #15 wz
2a1c4     00 FA 05 56 |  if_ne	mov	result1, #0
2a1c8     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2a1cc     0B 01 02 F6 | 	mov	_var01, arg03
2a1d0     02 00 06 F1 | 	add	_var01, #2
2a1d4     00 01 E2 FA | 	rdword	_var01, _var01
2a1d8     7F 00 00 FF 
2a1dc     C0 01 06 F5 | 	and	_var01, ##65472
2a1e0     36 00 00 FF 
2a1e4     80 00 0E F2 | 	cmp	_var01, ##27776 wz
2a1e8     00 FA 05 56 |  if_ne	mov	result1, #0
2a1ec     0B FB 01 A6 |  if_e	mov	result1, arg03
2a1f0                 | __system___gc_isvalidptr_ret
2a1f0     2D 00 64 FD | 	ret
2a1f4                 | 
2a1f4                 | __system___gc_free
2a1f4     09 17 02 F6 | 	mov	arg03, arg01
2a1f8     6C FC BF FD | 	call	#__system___gc_ptrs
2a1fc     FD 12 02 F6 | 	mov	arg01, result1
2a200     FE 14 02 F6 | 	mov	arg02, result2
2a204     90 FF BF FD | 	call	#__system___gc_isvalidptr
2a208     FD 14 0A F6 | 	mov	arg02, result1 wz
2a20c     28 00 90 AD |  if_e	jmp	#LR__3850
2a210     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2a214     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2a218     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2a21c     F8 BC BF FD | 	call	#__system___lockmem
2a220     0A 13 02 F6 | 	mov	arg01, arg02
2a224     14 00 B0 FD | 	call	#__system___gc_dofree
2a228     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2a22c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2a230     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2a234     09 01 68 FC | 	wrlong	#0, arg01
2a238                 | LR__3850
2a238                 | __system___gc_free_ret
2a238     2D 00 64 FD | 	ret
2a23c                 | 
2a23c                 | __system___gc_dofree
2a23c     06 4A 05 F6 | 	mov	COUNT_, #6
2a240     A8 00 A0 FD | 	call	#pushregs_
2a244     09 27 02 F6 | 	mov	local01, arg01
2a248     1C FC BF FD | 	call	#__system___gc_ptrs
2a24c     FD 28 02 F6 | 	mov	local02, result1
2a250     FE 2A 02 F6 | 	mov	local03, result2
2a254     13 15 02 F6 | 	mov	arg02, local01
2a258     02 14 06 F1 | 	add	arg02, #2
2a25c     36 00 80 FF 
2a260     0A 1F 59 FC | 	wrword	##27791, arg02
2a264     13 2D 02 F6 | 	mov	local04, local01
2a268     13 13 02 F6 | 	mov	arg01, local01
2a26c     09 2F EA FA | 	rdword	local05, arg01 wz
2a270     00 FA 05 A6 |  if_e	mov	result1, #0
2a274     04 2E 66 50 |  if_ne	shl	local05, #4
2a278     17 13 02 51 |  if_ne	add	arg01, local05
2a27c     09 FB 01 56 |  if_ne	mov	result1, arg01
2a280     FD 30 02 F6 | 	mov	local06, result1
2a284     97 24 48 FB | 	callpa	#(@LR__3861-@LR__3860)>>2,fcache_load_ptr_
2a288                 | LR__3860
2a288     04 2C 06 F1 | 	add	local04, #4
2a28c     16 15 EA FA | 	rdword	arg02, local04 wz
2a290     14 13 02 F6 | 	mov	arg01, local02
2a294     00 FA 05 A6 |  if_e	mov	result1, #0
2a298     04 14 66 50 |  if_ne	shl	arg02, #4
2a29c     0A 13 02 51 |  if_ne	add	arg01, arg02
2a2a0     09 FB 01 56 |  if_ne	mov	result1, arg01
2a2a4     FD 2C 0A F6 | 	mov	local04, result1 wz
2a2a8     24 00 90 AD |  if_e	jmp	#LR__3862
2a2ac     16 13 02 F6 | 	mov	arg01, local04
2a2b0     00 FA 05 F6 | 	mov	result1, #0
2a2b4     02 12 06 F1 | 	add	arg01, #2
2a2b8     09 13 E2 FA | 	rdword	arg01, arg01
2a2bc     36 00 00 FF 
2a2c0     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2a2c4     01 FA 65 A6 |  if_e	neg	result1, #1
2a2c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2a2cc     B8 FF 9F AD |  if_e	jmp	#LR__3860
2a2d0                 | LR__3861
2a2d0                 | LR__3862
2a2d0     00 2C 0E F2 | 	cmp	local04, #0 wz
2a2d4     14 2D 02 A6 |  if_e	mov	local04, local02
2a2d8     16 15 02 F6 | 	mov	arg02, local04
2a2dc     06 14 06 F1 | 	add	arg02, #6
2a2e0     13 13 02 F6 | 	mov	arg01, local01
2a2e4     0A 15 E2 FA | 	rdword	arg02, arg02
2a2e8     06 12 06 F1 | 	add	arg01, #6
2a2ec     09 15 52 FC | 	wrword	arg02, arg01
2a2f0     13 15 0A F6 | 	mov	arg02, local01 wz
2a2f4     00 FA 05 A6 |  if_e	mov	result1, #0
2a2f8     14 15 82 51 |  if_ne	sub	arg02, local02
2a2fc     04 14 46 50 |  if_ne	shr	arg02, #4
2a300     0A FB 01 56 |  if_ne	mov	result1, arg02
2a304     16 15 02 F6 | 	mov	arg02, local04
2a308     06 14 06 F1 | 	add	arg02, #6
2a30c     0A FB 51 FC | 	wrword	result1, arg02
2a310     14 2D 0A F2 | 	cmp	local04, local02 wz
2a314     A4 00 90 AD |  if_e	jmp	#LR__3865
2a318     16 13 02 F6 | 	mov	arg01, local04
2a31c     09 2F EA FA | 	rdword	local05, arg01 wz
2a320     00 FA 05 A6 |  if_e	mov	result1, #0
2a324     04 2E 66 50 |  if_ne	shl	local05, #4
2a328     17 13 02 51 |  if_ne	add	arg01, local05
2a32c     09 FB 01 56 |  if_ne	mov	result1, arg01
2a330     13 FB 09 F2 | 	cmp	result1, local01 wz
2a334     84 00 90 5D |  if_ne	jmp	#LR__3864
2a338     16 31 E2 FA | 	rdword	local06, local04
2a33c     13 15 E2 FA | 	rdword	arg02, local01
2a340     0A 31 02 F1 | 	add	local06, arg02
2a344     16 31 52 FC | 	wrword	local06, local04
2a348     13 31 02 F6 | 	mov	local06, local01
2a34c     02 30 06 F1 | 	add	local06, #2
2a350     18 01 58 FC | 	wrword	#0, local06
2a354     13 13 02 F6 | 	mov	arg01, local01
2a358     09 2F EA FA | 	rdword	local05, arg01 wz
2a35c     00 FA 05 A6 |  if_e	mov	result1, #0
2a360     04 2E 66 50 |  if_ne	shl	local05, #4
2a364     17 13 02 51 |  if_ne	add	arg01, local05
2a368     09 FB 01 56 |  if_ne	mov	result1, arg01
2a36c     FD 30 02 F6 | 	mov	local06, result1
2a370     15 31 52 F2 | 	cmps	local06, local03 wc
2a374     20 00 90 3D |  if_ae	jmp	#LR__3863
2a378     16 15 0A F6 | 	mov	arg02, local04 wz
2a37c     00 FA 05 A6 |  if_e	mov	result1, #0
2a380     14 15 82 51 |  if_ne	sub	arg02, local02
2a384     04 14 46 50 |  if_ne	shr	arg02, #4
2a388     0A FB 01 56 |  if_ne	mov	result1, arg02
2a38c     18 15 02 F6 | 	mov	arg02, local06
2a390     04 14 06 F1 | 	add	arg02, #4
2a394     0A FB 51 FC | 	wrword	result1, arg02
2a398                 | LR__3863
2a398     13 15 02 F6 | 	mov	arg02, local01
2a39c     06 14 06 F1 | 	add	arg02, #6
2a3a0     16 FD 01 F6 | 	mov	result2, local04
2a3a4     0A 15 E2 FA | 	rdword	arg02, arg02
2a3a8     06 FC 05 F1 | 	add	result2, #6
2a3ac     FE 14 52 FC | 	wrword	arg02, result2
2a3b0     06 26 06 F1 | 	add	local01, #6
2a3b4     13 01 58 FC | 	wrword	#0, local01
2a3b8     16 27 02 F6 | 	mov	local01, local04
2a3bc                 | LR__3864
2a3bc                 | LR__3865
2a3bc     13 13 02 F6 | 	mov	arg01, local01
2a3c0     09 2F EA FA | 	rdword	local05, arg01 wz
2a3c4     00 FA 05 A6 |  if_e	mov	result1, #0
2a3c8     04 2E 66 50 |  if_ne	shl	local05, #4
2a3cc     17 13 02 51 |  if_ne	add	arg01, local05
2a3d0     09 FB 01 56 |  if_ne	mov	result1, arg01
2a3d4     FD 14 0A F6 | 	mov	arg02, result1 wz
2a3d8     B8 00 90 AD |  if_e	jmp	#LR__3867
2a3dc     15 15 52 F2 | 	cmps	arg02, local03 wc
2a3e0     B0 00 90 3D |  if_ae	jmp	#LR__3867
2a3e4     0A 13 02 F6 | 	mov	arg01, arg02
2a3e8     00 FA 05 F6 | 	mov	result1, #0
2a3ec     02 12 06 F1 | 	add	arg01, #2
2a3f0     09 13 E2 FA | 	rdword	arg01, arg01
2a3f4     36 00 00 FF 
2a3f8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2a3fc     01 FA 65 A6 |  if_e	neg	result1, #1
2a400     00 FA 0D F2 | 	cmp	result1, #0 wz
2a404     8C 00 90 AD |  if_e	jmp	#LR__3867
2a408     13 2D 02 F6 | 	mov	local04, local01
2a40c     16 31 E2 FA | 	rdword	local06, local04
2a410     0A 13 02 F6 | 	mov	arg01, arg02
2a414     09 27 E2 FA | 	rdword	local01, arg01
2a418     13 31 02 F1 | 	add	local06, local01
2a41c     16 31 52 FC | 	wrword	local06, local04
2a420     09 31 02 F6 | 	mov	local06, arg01
2a424     06 30 06 F1 | 	add	local06, #6
2a428     16 27 02 F6 | 	mov	local01, local04
2a42c     18 31 E2 FA | 	rdword	local06, local06
2a430     06 26 06 F1 | 	add	local01, #6
2a434     13 31 52 FC | 	wrword	local06, local01
2a438     09 31 02 F6 | 	mov	local06, arg01
2a43c     02 30 06 F1 | 	add	local06, #2
2a440     18 55 59 FC | 	wrword	#170, local06
2a444     09 31 02 F6 | 	mov	local06, arg01
2a448     06 30 06 F1 | 	add	local06, #6
2a44c     18 01 58 FC | 	wrword	#0, local06
2a450     09 2F EA FA | 	rdword	local05, arg01 wz
2a454     00 FA 05 A6 |  if_e	mov	result1, #0
2a458     04 2E 66 50 |  if_ne	shl	local05, #4
2a45c     17 13 02 51 |  if_ne	add	arg01, local05
2a460     09 FB 01 56 |  if_ne	mov	result1, arg01
2a464     FD 30 0A F6 | 	mov	local06, result1 wz
2a468     28 00 90 AD |  if_e	jmp	#LR__3866
2a46c     15 31 52 F2 | 	cmps	local06, local03 wc
2a470     20 00 90 3D |  if_ae	jmp	#LR__3866
2a474     16 15 0A F6 | 	mov	arg02, local04 wz
2a478     00 FA 05 A6 |  if_e	mov	result1, #0
2a47c     14 15 82 51 |  if_ne	sub	arg02, local02
2a480     04 14 46 50 |  if_ne	shr	arg02, #4
2a484     0A FB 01 56 |  if_ne	mov	result1, arg02
2a488     18 2D 02 F6 | 	mov	local04, local06
2a48c     04 2C 06 F1 | 	add	local04, #4
2a490     16 FB 51 FC | 	wrword	result1, local04
2a494                 | LR__3866
2a494                 | LR__3867
2a494     18 FB 01 F6 | 	mov	result1, local06
2a498     A7 F0 03 F6 | 	mov	ptra, fp
2a49c     B2 00 A0 FD | 	call	#popregs_
2a4a0                 | __system___gc_dofree_ret
2a4a0     2D 00 64 FD | 	ret
2a4a4                 | 
2a4a4                 | __system___gc_docollect
2a4a4     05 4A 05 F6 | 	mov	COUNT_, #5
2a4a8     A8 00 A0 FD | 	call	#pushregs_
2a4ac     B8 F9 BF FD | 	call	#__system___gc_ptrs
2a4b0     FE 26 02 F6 | 	mov	local01, result2
2a4b4     FD 28 02 F6 | 	mov	local02, result1
2a4b8     14 13 02 F6 | 	mov	arg01, local02
2a4bc     09 2B EA FA | 	rdword	local03, arg01 wz
2a4c0     00 FA 05 A6 |  if_e	mov	result1, #0
2a4c4     04 2A 66 50 |  if_ne	shl	local03, #4
2a4c8     15 13 02 51 |  if_ne	add	arg01, local03
2a4cc     09 FB 01 56 |  if_ne	mov	result1, arg01
2a4d0     FD 2C 0A F6 | 	mov	local04, result1 wz
2a4d4     00 FA 05 F6 | 	mov	result1, #0
2a4d8     01 FA 61 FD | 	cogid	result1
2a4dc     FD 2E 02 F6 | 	mov	local05, result1
2a4e0     48 00 90 AD |  if_e	jmp	#LR__3872
2a4e4     97 22 48 FB | 	callpa	#(@LR__3871-@LR__3870)>>2,fcache_load_ptr_
2a4e8                 | LR__3870
2a4e8     13 2D 52 F2 | 	cmps	local04, local01 wc
2a4ec     3C 00 90 3D |  if_ae	jmp	#LR__3872
2a4f0     16 15 02 F6 | 	mov	arg02, local04
2a4f4     02 14 06 F1 | 	add	arg02, #2
2a4f8     0A 15 E2 FA | 	rdword	arg02, arg02
2a4fc     20 14 26 F5 | 	andn	arg02, #32
2a500     16 13 02 F6 | 	mov	arg01, local04
2a504     02 12 06 F1 | 	add	arg01, #2
2a508     09 15 52 FC | 	wrword	arg02, arg01
2a50c     16 13 02 F6 | 	mov	arg01, local04
2a510     09 2B EA FA | 	rdword	local03, arg01 wz
2a514     00 FA 05 A6 |  if_e	mov	result1, #0
2a518     04 2A 66 50 |  if_ne	shl	local03, #4
2a51c     15 13 02 51 |  if_ne	add	arg01, local03
2a520     09 FB 01 56 |  if_ne	mov	result1, arg01
2a524     FD 2C 0A F6 | 	mov	local04, result1 wz
2a528     BC FF 9F 5D |  if_ne	jmp	#LR__3870
2a52c                 | LR__3871
2a52c                 | LR__3872
2a52c     00 2A 06 F6 | 	mov	local03, #0
2a530     00 12 06 F6 | 	mov	arg01, #0
2a534     B8 B9 BF FD | 	call	#__system____topofstack
2a538     FD 14 02 F6 | 	mov	arg02, result1
2a53c     15 13 02 F6 | 	mov	arg01, local03
2a540     90 00 B0 FD | 	call	#__system___gc_markhub
2a544     1C 01 B0 FD | 	call	#__system___gc_markcog
2a548     14 13 02 F6 | 	mov	arg01, local02
2a54c     09 2B EA FA | 	rdword	local03, arg01 wz
2a550     00 FA 05 A6 |  if_e	mov	result1, #0
2a554     04 2A 66 50 |  if_ne	shl	local03, #4
2a558     15 13 02 51 |  if_ne	add	arg01, local03
2a55c     09 FB 01 56 |  if_ne	mov	result1, arg01
2a560     FD 28 0A F6 | 	mov	local02, result1 wz
2a564     60 00 90 AD |  if_e	jmp	#LR__3876
2a568                 | LR__3873
2a568     14 2D 02 F6 | 	mov	local04, local02
2a56c     16 13 02 F6 | 	mov	arg01, local04
2a570     09 2B EA FA | 	rdword	local03, arg01 wz
2a574     00 FA 05 A6 |  if_e	mov	result1, #0
2a578     04 2A 66 50 |  if_ne	shl	local03, #4
2a57c     15 13 02 51 |  if_ne	add	arg01, local03
2a580     09 FB 01 56 |  if_ne	mov	result1, arg01
2a584     FD 28 02 F6 | 	mov	local02, result1
2a588     16 15 02 F6 | 	mov	arg02, local04
2a58c     02 14 06 F1 | 	add	arg02, #2
2a590     0A 15 E2 FA | 	rdword	arg02, arg02
2a594     20 14 CE F7 | 	test	arg02, #32 wz
2a598     10 14 CE A7 |  if_e	test	arg02, #16 wz
2a59c     1C 00 90 5D |  if_ne	jmp	#LR__3875
2a5a0     0A 15 42 F8 | 	getnib	arg02, arg02, #0
2a5a4     17 15 0A F2 | 	cmp	arg02, local05 wz
2a5a8     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
2a5ac     0C 00 90 5D |  if_ne	jmp	#LR__3874
2a5b0     16 13 02 F6 | 	mov	arg01, local04
2a5b4     84 FC BF FD | 	call	#__system___gc_dofree
2a5b8     FD 28 02 F6 | 	mov	local02, result1
2a5bc                 | LR__3874
2a5bc                 | LR__3875
2a5bc     00 28 0E F2 | 	cmp	local02, #0 wz
2a5c0     13 29 52 52 |  if_ne	cmps	local02, local01 wc
2a5c4     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3873
2a5c8                 | LR__3876
2a5c8     A7 F0 03 F6 | 	mov	ptra, fp
2a5cc     B2 00 A0 FD | 	call	#popregs_
2a5d0                 | __system___gc_docollect_ret
2a5d0     2D 00 64 FD | 	ret
2a5d4                 | 
2a5d4                 | __system___gc_markhub
2a5d4     04 4A 05 F6 | 	mov	COUNT_, #4
2a5d8     A8 00 A0 FD | 	call	#pushregs_
2a5dc     09 27 02 F6 | 	mov	local01, arg01
2a5e0     0A 29 02 F6 | 	mov	local02, arg02
2a5e4     80 F8 BF FD | 	call	#__system___gc_ptrs
2a5e8     FD 2A 02 F6 | 	mov	local03, result1
2a5ec     FE 2C 02 F6 | 	mov	local04, result2
2a5f0                 | LR__3880
2a5f0     14 27 52 F2 | 	cmps	local01, local02 wc
2a5f4     60 00 90 3D |  if_ae	jmp	#LR__3881
2a5f8     13 17 02 FB | 	rdlong	arg03, local01
2a5fc     04 26 06 F1 | 	add	local01, #4
2a600     16 15 02 F6 | 	mov	arg02, local04
2a604     15 13 02 F6 | 	mov	arg01, local03
2a608     8C FB BF FD | 	call	#__system___gc_isvalidptr
2a60c     FD 16 0A F6 | 	mov	arg03, result1 wz
2a610     DC FF 9F AD |  if_e	jmp	#LR__3880
2a614     0B 13 02 F6 | 	mov	arg01, arg03
2a618     00 FA 05 F6 | 	mov	result1, #0
2a61c     02 12 06 F1 | 	add	arg01, #2
2a620     09 13 E2 FA | 	rdword	arg01, arg01
2a624     36 00 00 FF 
2a628     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2a62c     01 FA 65 A6 |  if_e	neg	result1, #1
2a630     00 FA 0D F2 | 	cmp	result1, #0 wz
2a634     B8 FF 9F 5D |  if_ne	jmp	#LR__3880
2a638     0B FD 01 F6 | 	mov	result2, arg03
2a63c     02 FC 05 F1 | 	add	result2, #2
2a640     FE FC E1 FA | 	rdword	result2, result2
2a644     0F FC 25 F5 | 	andn	result2, #15
2a648     2E FC 45 F5 | 	or	result2, #46
2a64c     02 16 06 F1 | 	add	arg03, #2
2a650     0B FD 51 FC | 	wrword	result2, arg03
2a654     98 FF 9F FD | 	jmp	#LR__3880
2a658                 | LR__3881
2a658     A7 F0 03 F6 | 	mov	ptra, fp
2a65c     B2 00 A0 FD | 	call	#popregs_
2a660                 | __system___gc_markhub_ret
2a660     2D 00 64 FD | 	ret
2a664                 | 
2a664                 | __system___gc_markcog
2a664     04 4A 05 F6 | 	mov	COUNT_, #4
2a668     A8 00 A0 FD | 	call	#pushregs_
2a66c     F8 F7 BF FD | 	call	#__system___gc_ptrs
2a670     FD 26 02 F6 | 	mov	local01, result1
2a674     FE 28 02 F6 | 	mov	local02, result2
2a678     EF 2B 06 F6 | 	mov	local03, #495
2a67c                 | LR__3890
2a67c                 | 	'.live	local03
2a67c     00 2A 96 F9 | 	alts	local03, #0
2a680     15 2D 02 F6 | 	mov	local04, local03
2a684     13 13 02 F6 | 	mov	arg01, local01
2a688     14 15 02 F6 | 	mov	arg02, local02
2a68c     16 17 02 F6 | 	mov	arg03, local04
2a690     04 FB BF FD | 	call	#__system___gc_isvalidptr
2a694     00 FA 0D F2 | 	cmp	result1, #0 wz
2a698     18 00 90 AD |  if_e	jmp	#LR__3891
2a69c     FD 2C 02 F6 | 	mov	local04, result1
2a6a0     02 2C 06 F1 | 	add	local04, #2
2a6a4     16 2D E2 FA | 	rdword	local04, local04
2a6a8     20 2C 46 F5 | 	or	local04, #32
2a6ac     02 FA 05 F1 | 	add	result1, #2
2a6b0     FD 2C 52 FC | 	wrword	local04, result1
2a6b4                 | LR__3891
2a6b4     01 2A 86 F1 | 	sub	local03, #1
2a6b8     00 2A 56 F2 | 	cmps	local03, #0 wc
2a6bc     BC FF 9F 3D |  if_ae	jmp	#LR__3890
2a6c0     A7 F0 03 F6 | 	mov	ptra, fp
2a6c4     B2 00 A0 FD | 	call	#popregs_
2a6c8                 | __system___gc_markcog_ret
2a6c8     2D 00 64 FD | 	ret
2a6cc                 | 
2a6cc                 | __system__opendir
2a6cc     06 4A 05 F6 | 	mov	COUNT_, #6
2a6d0     A8 00 A0 FD | 	call	#pushregs_
2a6d4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2a6d8     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2a6dc     09 15 02 F6 | 	mov	arg02, arg01
2a6e0     13 13 02 F6 | 	mov	arg01, local01
2a6e4     00 16 06 F6 | 	mov	arg03, #0
2a6e8     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2a6ec     C0 BF BF FD | 	call	#__system____getvfsforfile
2a6f0     FD 28 0A F6 | 	mov	local02, result1 wz
2a6f4     10 00 90 AD |  if_e	jmp	#LR__3900
2a6f8     28 28 06 F1 | 	add	local02, #40
2a6fc     14 17 0A FB | 	rdlong	arg03, local02 wz
2a700     28 28 86 F1 | 	sub	local02, #40
2a704     14 00 90 5D |  if_ne	jmp	#LR__3901
2a708                 | LR__3900
2a708     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a70c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2a710     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a714     00 FA 05 F6 | 	mov	result1, #0
2a718     90 00 90 FD | 	jmp	#LR__3903
2a71c                 | LR__3901
2a71c     5C 12 06 F6 | 	mov	arg01, #92
2a720     10 14 06 F6 | 	mov	arg02, #16
2a724     C0 F9 BF FD | 	call	#__system___gc_doalloc
2a728     FD 2A 0A F6 | 	mov	local03, result1 wz
2a72c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a730     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2a734     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a738     00 FA 05 A6 |  if_e	mov	result1, #0
2a73c     6C 00 90 AD |  if_e	jmp	#LR__3903
2a740     28 28 06 F1 | 	add	local02, #40
2a744     14 2D 02 FB | 	rdlong	local04, local02
2a748     16 2F 02 F6 | 	mov	local05, local04
2a74c     28 28 86 F1 | 	sub	local02, #40
2a750     13 2E 46 F7 | 	zerox	local05, #19
2a754     14 2C 46 F0 | 	shr	local04, #20
2a758     02 2C 66 F0 | 	shl	local04, #2
2a75c     ED 2C 02 F1 | 	add	local04, __methods__
2a760     16 2D 02 FB | 	rdlong	local04, local04
2a764     15 13 02 F6 | 	mov	arg01, local03
2a768     13 15 02 F6 | 	mov	arg02, local01
2a76c     F2 30 02 F6 | 	mov	local06, objptr
2a770     17 E5 01 F6 | 	mov	objptr, local05
2a774     2D 2C 62 FD | 	call	local04
2a778     18 E5 01 F6 | 	mov	objptr, local06
2a77c     FD 16 0A F6 | 	mov	arg03, result1 wz
2a780     20 00 90 AD |  if_e	jmp	#LR__3902
2a784     00 16 4E F2 | 	cmps	arg03, #0 wz
2a788     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a78c     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2a790     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a794     15 13 02 F6 | 	mov	arg01, local03
2a798     58 FA BF FD | 	call	#__system___gc_free
2a79c     00 FA 05 F6 | 	mov	result1, #0
2a7a0     08 00 90 FD | 	jmp	#LR__3903
2a7a4                 | LR__3902
2a7a4     15 29 62 FC | 	wrlong	local02, local03
2a7a8     15 FB 01 F6 | 	mov	result1, local03
2a7ac                 | LR__3903
2a7ac     A7 F0 03 F6 | 	mov	ptra, fp
2a7b0     B2 00 A0 FD | 	call	#popregs_
2a7b4                 | __system__opendir_ret
2a7b4     2D 00 64 FD | 	ret
2a7b8                 | 
2a7b8                 | __system__closedir
2a7b8     04 4A 05 F6 | 	mov	COUNT_, #4
2a7bc     A8 00 A0 FD | 	call	#pushregs_
2a7c0     09 27 02 F6 | 	mov	local01, arg01
2a7c4     13 13 02 FB | 	rdlong	arg01, local01
2a7c8     2C 12 06 F1 | 	add	arg01, #44
2a7cc     09 29 02 FB | 	rdlong	local02, arg01
2a7d0     14 2B 02 F6 | 	mov	local03, local02
2a7d4     13 2A 46 F7 | 	zerox	local03, #19
2a7d8     14 28 46 F0 | 	shr	local02, #20
2a7dc     02 28 66 F0 | 	shl	local02, #2
2a7e0     ED 28 02 F1 | 	add	local02, __methods__
2a7e4     14 29 02 FB | 	rdlong	local02, local02
2a7e8     13 13 02 F6 | 	mov	arg01, local01
2a7ec     F2 2C 02 F6 | 	mov	local04, objptr
2a7f0     15 E5 01 F6 | 	mov	objptr, local03
2a7f4     2D 28 62 FD | 	call	local02
2a7f8     16 E5 01 F6 | 	mov	objptr, local04
2a7fc     FD 2C 02 F6 | 	mov	local04, result1
2a800     13 13 02 F6 | 	mov	arg01, local01
2a804     EC F9 BF FD | 	call	#__system___gc_free
2a808     00 2C 4E F2 | 	cmps	local04, #0 wz
2a80c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a810     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
2a814     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a818     01 FA 65 56 |  if_ne	neg	result1, #1
2a81c     00 FA 05 A6 |  if_e	mov	result1, #0
2a820     A7 F0 03 F6 | 	mov	ptra, fp
2a824     B2 00 A0 FD | 	call	#popregs_
2a828                 | __system__closedir_ret
2a828     2D 00 64 FD | 	ret
2a82c                 | 
2a82c                 | __system__readdir
2a82c     04 4A 05 F6 | 	mov	COUNT_, #4
2a830     A8 00 A0 FD | 	call	#pushregs_
2a834     09 15 0A FB | 	rdlong	arg02, arg01 wz
2a838     08 12 06 F1 | 	add	arg01, #8
2a83c     09 27 02 F6 | 	mov	local01, arg01
2a840     08 12 86 F1 | 	sub	arg01, #8
2a844     00 FA 05 A6 |  if_e	mov	result1, #0
2a848     5C 00 90 AD |  if_e	jmp	#LR__3911
2a84c     30 14 06 F1 | 	add	arg02, #48
2a850     0A 29 02 FB | 	rdlong	local02, arg02
2a854     14 2B 02 F6 | 	mov	local03, local02
2a858     13 2A 46 F7 | 	zerox	local03, #19
2a85c     14 28 46 F0 | 	shr	local02, #20
2a860     02 28 66 F0 | 	shl	local02, #2
2a864     ED 28 02 F1 | 	add	local02, __methods__
2a868     14 29 02 FB | 	rdlong	local02, local02
2a86c     13 15 02 F6 | 	mov	arg02, local01
2a870     F2 2C 02 F6 | 	mov	local04, objptr
2a874     15 E5 01 F6 | 	mov	objptr, local03
2a878     2D 28 62 FD | 	call	local02
2a87c     16 E5 01 F6 | 	mov	objptr, local04
2a880     00 FA 4D F2 | 	cmps	result1, #0 wz
2a884     1C 00 90 AD |  if_e	jmp	#LR__3910
2a888     01 FA 55 F2 | 	cmps	result1, #1 wc
2a88c     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2a890     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2a894     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
2a898     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2a89c     00 FA 05 F6 | 	mov	result1, #0
2a8a0     04 00 90 FD | 	jmp	#LR__3911
2a8a4                 | LR__3910
2a8a4     13 FB 01 F6 | 	mov	result1, local01
2a8a8                 | LR__3911
2a8a8     A7 F0 03 F6 | 	mov	ptra, fp
2a8ac     B2 00 A0 FD | 	call	#popregs_
2a8b0                 | __system__readdir_ret
2a8b0     2D 00 64 FD | 	ret
2a8b4                 | 
2a8b4                 | __system___openraw
2a8b4     15 4A 05 F6 | 	mov	COUNT_, #21
2a8b8     A8 00 A0 FD | 	call	#pushregs_
2a8bc     09 27 02 F6 | 	mov	local01, arg01
2a8c0     0A 29 02 F6 | 	mov	local02, arg02
2a8c4     0B 2B 02 F6 | 	mov	local03, arg03
2a8c8     0C 2D 02 F6 | 	mov	local04, arg04
2a8cc     04 2E 06 F6 | 	mov	local05, #4
2a8d0     13 31 02 F6 | 	mov	local06, local01
2a8d4     00 32 06 F6 | 	mov	local07, #0
2a8d8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2a8dc     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
2a8e0     1A 13 02 F6 | 	mov	arg01, local08
2a8e4     14 15 02 F6 | 	mov	arg02, local02
2a8e8     00 16 06 F6 | 	mov	arg03, #0
2a8ec     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2a8f0     BC BD BF FD | 	call	#__system____getvfsforfile
2a8f4     FD 36 0A F6 | 	mov	local09, result1 wz
2a8f8     10 00 90 AD |  if_e	jmp	#LR__3920
2a8fc     20 36 06 F1 | 	add	local09, #32
2a900     1B FB 09 FB | 	rdlong	result1, local09 wz
2a904     20 36 86 F1 | 	sub	local09, #32
2a908     14 00 90 5D |  if_ne	jmp	#LR__3921
2a90c                 | LR__3920
2a90c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a910     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2a914     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a918     01 FA 65 F6 | 	neg	result1, #1
2a91c     8C 02 90 FD | 	jmp	#LR__3934
2a920                 | LR__3921
2a920     18 13 02 F6 | 	mov	arg01, local06
2a924     00 14 06 F6 | 	mov	arg02, #0
2a928     34 16 06 F6 | 	mov	arg03, #52
2a92c     09 39 02 F6 | 	mov	local10, arg01
2a930     98 00 A0 FD | 	call	#\builtin_bytefill_
2a934     20 36 06 F1 | 	add	local09, #32
2a938     1B 3B 02 FB | 	rdlong	local11, local09
2a93c     1D 3D 02 F6 | 	mov	local12, local11
2a940     1D 3F 02 F6 | 	mov	local13, local11
2a944     20 36 86 F1 | 	sub	local09, #32
2a948     1F 41 02 F6 | 	mov	local14, local13
2a94c     13 3C 46 F7 | 	zerox	local12, #19
2a950     14 40 46 F0 | 	shr	local14, #20
2a954     02 40 66 F0 | 	shl	local14, #2
2a958     ED 40 02 F1 | 	add	local14, __methods__
2a95c     20 41 02 FB | 	rdlong	local14, local14
2a960     18 43 02 F6 | 	mov	local15, local06
2a964     1A 45 02 F6 | 	mov	local16, local08
2a968     15 47 02 F6 | 	mov	local17, local03
2a96c     21 13 02 F6 | 	mov	arg01, local15
2a970     22 15 02 F6 | 	mov	arg02, local16
2a974     23 17 02 F6 | 	mov	arg03, local17
2a978     F2 48 02 F6 | 	mov	local18, objptr
2a97c     1E E5 01 F6 | 	mov	objptr, local12
2a980     2D 40 62 FD | 	call	local14
2a984     24 E5 01 F6 | 	mov	objptr, local18
2a988     FD 4A 0A F6 | 	mov	local19, result1 wz
2a98c     04 2A CE 57 |  if_ne	test	local03, #4 wz
2a990     58 00 90 AD |  if_e	jmp	#LR__3922
2a994     24 36 06 F1 | 	add	local09, #36
2a998     1B 3B 02 FB | 	rdlong	local11, local09
2a99c     1D 3D 02 F6 | 	mov	local12, local11
2a9a0     1D 3F 02 F6 | 	mov	local13, local11
2a9a4     24 36 86 F1 | 	sub	local09, #36
2a9a8     1F 41 02 F6 | 	mov	local14, local13
2a9ac     13 3C 46 F7 | 	zerox	local12, #19
2a9b0     14 40 46 F0 | 	shr	local14, #20
2a9b4     02 40 66 F0 | 	shl	local14, #2
2a9b8     ED 40 02 F1 | 	add	local14, __methods__
2a9bc     20 41 02 FB | 	rdlong	local14, local14
2a9c0     18 43 02 F6 | 	mov	local15, local06
2a9c4     1A 45 02 F6 | 	mov	local16, local08
2a9c8     16 47 02 F6 | 	mov	local17, local04
2a9cc     21 13 02 F6 | 	mov	arg01, local15
2a9d0     22 15 02 F6 | 	mov	arg02, local16
2a9d4     23 17 02 F6 | 	mov	arg03, local17
2a9d8     F2 48 02 F6 | 	mov	local18, objptr
2a9dc     1E E5 01 F6 | 	mov	objptr, local12
2a9e0     2D 40 62 FD | 	call	local14
2a9e4     24 E5 01 F6 | 	mov	objptr, local18
2a9e8     FD 4A 02 F6 | 	mov	local19, result1
2a9ec                 | LR__3922
2a9ec     00 4A 0E F2 | 	cmp	local19, #0 wz
2a9f0     8C 01 90 5D |  if_ne	jmp	#LR__3932
2a9f4     15 4D 02 F6 | 	mov	local20, local03
2a9f8     03 4C 0E F5 | 	and	local20, #3 wz
2a9fc     02 2E 46 55 |  if_ne	or	local05, #2
2aa00     01 4C 0E F2 | 	cmp	local20, #1 wz
2aa04     01 2E 46 55 |  if_ne	or	local05, #1
2aa08     20 2A CE F7 | 	test	local03, #32 wz
2aa0c     C0 2E 46 55 |  if_ne	or	local05, #192
2aa10     08 30 06 F1 | 	add	local06, #8
2aa14     18 2F 62 FC | 	wrlong	local05, local06
2aa18     0C 30 06 F1 | 	add	local06, #12
2aa1c     18 4F 0A FB | 	rdlong	local21, local06 wz
2aa20     14 30 86 F1 | 	sub	local06, #20
2aa24     18 00 90 5D |  if_ne	jmp	#LR__3923
2aa28     04 36 06 F1 | 	add	local09, #4
2aa2c     1B 4F 02 FB | 	rdlong	local21, local09
2aa30     04 36 86 F1 | 	sub	local09, #4
2aa34     14 30 06 F1 | 	add	local06, #20
2aa38     18 4F 62 FC | 	wrlong	local21, local06
2aa3c     14 30 86 F1 | 	sub	local06, #20
2aa40                 | LR__3923
2aa40     18 30 06 F1 | 	add	local06, #24
2aa44     18 4F 0A FB | 	rdlong	local21, local06 wz
2aa48     18 30 86 F1 | 	sub	local06, #24
2aa4c     18 00 90 5D |  if_ne	jmp	#LR__3924
2aa50     08 36 06 F1 | 	add	local09, #8
2aa54     1B 4F 02 FB | 	rdlong	local21, local09
2aa58     08 36 86 F1 | 	sub	local09, #8
2aa5c     18 30 06 F1 | 	add	local06, #24
2aa60     18 4F 62 FC | 	wrlong	local21, local06
2aa64     18 30 86 F1 | 	sub	local06, #24
2aa68                 | LR__3924
2aa68     24 30 06 F1 | 	add	local06, #36
2aa6c     18 4F 0A FB | 	rdlong	local21, local06 wz
2aa70     24 30 86 F1 | 	sub	local06, #36
2aa74     1B 4F 02 AB |  if_e	rdlong	local21, local09
2aa78     24 30 06 A1 |  if_e	add	local06, #36
2aa7c     18 4F 62 AC |  if_e	wrlong	local21, local06
2aa80     24 30 86 A1 |  if_e	sub	local06, #36
2aa84     28 30 06 F1 | 	add	local06, #40
2aa88     18 4F 0A FB | 	rdlong	local21, local06 wz
2aa8c     28 30 86 F1 | 	sub	local06, #40
2aa90     18 00 90 5D |  if_ne	jmp	#LR__3925
2aa94     10 36 06 F1 | 	add	local09, #16
2aa98     1B 4F 02 FB | 	rdlong	local21, local09
2aa9c     10 36 86 F1 | 	sub	local09, #16
2aaa0     28 30 06 F1 | 	add	local06, #40
2aaa4     18 4F 62 FC | 	wrlong	local21, local06
2aaa8     28 30 86 F1 | 	sub	local06, #40
2aaac                 | LR__3925
2aaac     30 30 06 F1 | 	add	local06, #48
2aab0     18 4F 0A FB | 	rdlong	local21, local06 wz
2aab4     30 30 86 F1 | 	sub	local06, #48
2aab8     18 00 90 5D |  if_ne	jmp	#LR__3926
2aabc     0C 36 06 F1 | 	add	local09, #12
2aac0     1B 4F 02 FB | 	rdlong	local21, local09
2aac4     0C 36 86 F1 | 	sub	local09, #12
2aac8     30 30 06 F1 | 	add	local06, #48
2aacc     18 4F 62 FC | 	wrlong	local21, local06
2aad0     30 30 86 F1 | 	sub	local06, #48
2aad4                 | LR__3926
2aad4     1C 30 06 F1 | 	add	local06, #28
2aad8     18 4F 0A FB | 	rdlong	local21, local06 wz
2aadc     1C 30 86 F1 | 	sub	local06, #28
2aae0     1C 00 90 5D |  if_ne	jmp	#LR__3927
2aae4     01 32 06 F6 | 	mov	local07, #1
2aae8     F2 12 02 F6 | 	mov	arg01, objptr
2aaec     00 48 05 FF 
2aaf0     00 12 46 F5 | 	or	arg01, ##177209344
2aaf4     1C 30 06 F1 | 	add	local06, #28
2aaf8     18 13 62 FC | 	wrlong	arg01, local06
2aafc     1C 30 86 F1 | 	sub	local06, #28
2ab00                 | LR__3927
2ab00     20 30 06 F1 | 	add	local06, #32
2ab04     18 4F 0A FB | 	rdlong	local21, local06 wz
2ab08     20 30 86 F1 | 	sub	local06, #32
2ab0c     1C 00 90 5D |  if_ne	jmp	#LR__3928
2ab10     01 32 06 F6 | 	mov	local07, #1
2ab14     F2 12 02 F6 | 	mov	arg01, objptr
2ab18     00 50 05 FF 
2ab1c     00 12 46 F5 | 	or	arg01, ##178257920
2ab20     20 30 06 F1 | 	add	local06, #32
2ab24     18 13 62 FC | 	wrlong	arg01, local06
2ab28     20 30 86 F1 | 	sub	local06, #32
2ab2c                 | LR__3928
2ab2c     2C 30 06 F1 | 	add	local06, #44
2ab30     18 4F 0A FB | 	rdlong	local21, local06 wz
2ab34     2C 30 86 F1 | 	sub	local06, #44
2ab38     44 00 90 5D |  if_ne	jmp	#LR__3931
2ab3c     14 36 06 F1 | 	add	local09, #20
2ab40     1B 4F 0A FB | 	rdlong	local21, local09 wz
2ab44     14 36 86 F1 | 	sub	local09, #20
2ab48     18 00 90 AD |  if_e	jmp	#LR__3929
2ab4c     14 36 06 F1 | 	add	local09, #20
2ab50     1B 4F 02 FB | 	rdlong	local21, local09
2ab54     2C 30 06 F1 | 	add	local06, #44
2ab58     18 4F 62 FC | 	wrlong	local21, local06
2ab5c     2C 30 86 F1 | 	sub	local06, #44
2ab60     1C 00 90 FD | 	jmp	#LR__3930
2ab64                 | LR__3929
2ab64     01 32 06 F6 | 	mov	local07, #1
2ab68     F2 12 02 F6 | 	mov	arg01, objptr
2ab6c     00 58 05 FF 
2ab70     00 12 46 F5 | 	or	arg01, ##179306496
2ab74     2C 30 06 F1 | 	add	local06, #44
2ab78     18 13 62 FC | 	wrlong	arg01, local06
2ab7c     2C 30 86 F1 | 	sub	local06, #44
2ab80                 | LR__3930
2ab80                 | LR__3931
2ab80                 | LR__3932
2ab80     00 32 0E F2 | 	cmp	local07, #0 wz
2ab84     18 13 02 56 |  if_ne	mov	arg01, local06
2ab88     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2ab8c     00 4A 0E F2 | 	cmp	local19, #0 wz
2ab90     00 12 06 A6 |  if_e	mov	arg01, #0
2ab94     10 00 90 5D |  if_ne	jmp	#LR__3933
2ab98     00 12 4E F2 | 	cmps	arg01, #0 wz
2ab9c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2aba0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2aba4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2aba8                 | LR__3933
2aba8     25 FB 01 F6 | 	mov	result1, local19
2abac                 | LR__3934
2abac     A7 F0 03 F6 | 	mov	ptra, fp
2abb0     B2 00 A0 FD | 	call	#popregs_
2abb4                 | __system___openraw_ret
2abb4     2D 00 64 FD | 	ret
2abb8                 | 
2abb8                 | __system___closeraw
2abb8     05 4A 05 F6 | 	mov	COUNT_, #5
2abbc     A8 00 A0 FD | 	call	#pushregs_
2abc0     09 27 02 F6 | 	mov	local01, arg01
2abc4     00 28 06 F6 | 	mov	local02, #0
2abc8     08 26 06 F1 | 	add	local01, #8
2abcc     13 FB 09 FB | 	rdlong	result1, local01 wz
2abd0     08 26 86 F1 | 	sub	local01, #8
2abd4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2abd8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2abdc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2abe0     01 FA 65 A6 |  if_e	neg	result1, #1
2abe4     A8 00 90 AD |  if_e	jmp	#LR__3942
2abe8     2C 26 06 F1 | 	add	local01, #44
2abec     13 FB 09 FB | 	rdlong	result1, local01 wz
2abf0     2C 26 86 F1 | 	sub	local01, #44
2abf4     38 00 90 AD |  if_e	jmp	#LR__3940
2abf8     2C 26 06 F1 | 	add	local01, #44
2abfc     13 2B 02 FB | 	rdlong	local03, local01
2ac00     15 2D 02 F6 | 	mov	local04, local03
2ac04     2C 26 86 F1 | 	sub	local01, #44
2ac08     13 2C 46 F7 | 	zerox	local04, #19
2ac0c     14 2A 46 F0 | 	shr	local03, #20
2ac10     02 2A 66 F0 | 	shl	local03, #2
2ac14     ED 2A 02 F1 | 	add	local03, __methods__
2ac18     15 2B 02 FB | 	rdlong	local03, local03
2ac1c     13 13 02 F6 | 	mov	arg01, local01
2ac20     F2 2E 02 F6 | 	mov	local05, objptr
2ac24     16 E5 01 F6 | 	mov	objptr, local04
2ac28     2D 2A 62 FD | 	call	local03
2ac2c     17 E5 01 F6 | 	mov	objptr, local05
2ac30                 | LR__3940
2ac30     24 26 06 F1 | 	add	local01, #36
2ac34     13 2F 0A FB | 	rdlong	local05, local01 wz
2ac38     24 26 86 F1 | 	sub	local01, #36
2ac3c     3C 00 90 AD |  if_e	jmp	#LR__3941
2ac40     24 26 06 F1 | 	add	local01, #36
2ac44     13 2B 02 FB | 	rdlong	local03, local01
2ac48     15 2D 02 F6 | 	mov	local04, local03
2ac4c     24 26 86 F1 | 	sub	local01, #36
2ac50     13 2C 46 F7 | 	zerox	local04, #19
2ac54     14 2A 46 F0 | 	shr	local03, #20
2ac58     02 2A 66 F0 | 	shl	local03, #2
2ac5c     ED 2A 02 F1 | 	add	local03, __methods__
2ac60     15 2B 02 FB | 	rdlong	local03, local03
2ac64     13 13 02 F6 | 	mov	arg01, local01
2ac68     F2 2E 02 F6 | 	mov	local05, objptr
2ac6c     16 E5 01 F6 | 	mov	objptr, local04
2ac70     2D 2A 62 FD | 	call	local03
2ac74     17 E5 01 F6 | 	mov	objptr, local05
2ac78     FD 28 02 F6 | 	mov	local02, result1
2ac7c                 | LR__3941
2ac7c     13 13 02 F6 | 	mov	arg01, local01
2ac80     00 14 06 F6 | 	mov	arg02, #0
2ac84     34 16 06 F6 | 	mov	arg03, #52
2ac88     98 00 A0 FD | 	call	#\builtin_bytefill_
2ac8c     14 FB 01 F6 | 	mov	result1, local02
2ac90                 | LR__3942
2ac90     A7 F0 03 F6 | 	mov	ptra, fp
2ac94     B2 00 A0 FD | 	call	#popregs_
2ac98                 | __system___closeraw_ret
2ac98     2D 00 64 FD | 	ret
2ac9c                 | 
2ac9c                 | __system___vfs_open_sdcardx
2ac9c     0B 4A 05 F6 | 	mov	COUNT_, #11
2aca0     A8 00 A0 FD | 	call	#pushregs_
2aca4     09 2B 02 F6 | 	mov	local03, arg01
2aca8     0A 2D 02 F6 | 	mov	local04, arg02
2acac     0B 2F 02 F6 | 	mov	local05, arg03
2acb0     0C 31 02 F6 | 	mov	local06, arg04
2acb4     01 00 00 FF 
2acb8     24 12 06 F6 | 	mov	arg01, ##548
2acbc     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
2acc0     FD 32 02 F6 | 	mov	local07, result1
2acc4     01 00 00 FF 
2acc8     34 12 06 F6 | 	mov	arg01, ##564
2accc     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
2acd0     FD 34 02 F6 | 	mov	local08, result1
2acd4     15 19 02 F6 | 	mov	arg04, local03
2acd8     1F 18 C6 F0 | 	sar	arg04, #31
2acdc     15 17 02 F6 | 	mov	arg03, local03
2ace0     01 12 06 F6 | 	mov	arg01, #1
2ace4     00 14 06 F6 | 	mov	arg02, #0
2ace8     EC DB BF FD | 	call	#__system___int64_shl
2acec     FD 26 02 F6 | 	mov	local01, result1
2acf0     FE 36 02 F6 | 	mov	local09, result2
2acf4     16 19 02 F6 | 	mov	arg04, local04
2acf8     1F 18 C6 F0 | 	sar	arg04, #31
2acfc     16 17 02 F6 | 	mov	arg03, local04
2ad00     01 12 06 F6 | 	mov	arg01, #1
2ad04     00 14 06 F6 | 	mov	arg02, #0
2ad08     CC DB BF FD | 	call	#__system___int64_shl
2ad0c     FD 26 42 F5 | 	or	local01, result1
2ad10     FE 36 42 F5 | 	or	local09, result2
2ad14     17 19 02 F6 | 	mov	arg04, local05
2ad18     1F 18 C6 F0 | 	sar	arg04, #31
2ad1c     17 17 02 F6 | 	mov	arg03, local05
2ad20     01 12 06 F6 | 	mov	arg01, #1
2ad24     00 14 06 F6 | 	mov	arg02, #0
2ad28     AC DB BF FD | 	call	#__system___int64_shl
2ad2c     FD 26 42 F5 | 	or	local01, result1
2ad30     FE 36 42 F5 | 	or	local09, result2
2ad34     18 19 02 F6 | 	mov	arg04, local06
2ad38     1F 18 C6 F0 | 	sar	arg04, #31
2ad3c     18 17 02 F6 | 	mov	arg03, local06
2ad40     01 12 06 F6 | 	mov	arg01, #1
2ad44     00 14 06 F6 | 	mov	arg02, #0
2ad48     8C DB BF FD | 	call	#__system___int64_shl
2ad4c     1B 15 02 F6 | 	mov	arg02, local09
2ad50     FD 26 42 F5 | 	or	local01, result1
2ad54     0A FD 41 F5 | 	or	result2, arg02
2ad58     FE 28 02 F6 | 	mov	local02, result2
2ad5c     13 13 02 F6 | 	mov	arg01, local01
2ad60     14 15 02 F6 | 	mov	arg02, local02
2ad64     A8 DB BF FD | 	call	#__system___usepins
2ad68     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad6c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ad70     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2ad74     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ad78     00 FA 05 A6 |  if_e	mov	result1, #0
2ad7c     B4 00 90 AD |  if_e	jmp	#LR__3952
2ad80     13 39 02 F6 | 	mov	local10, local01
2ad84     14 37 02 F6 | 	mov	local09, local02
2ad88     01 00 00 FF 
2ad8c     08 32 06 F1 | 	add	local07, ##520
2ad90     19 39 62 FC | 	wrlong	local10, local07
2ad94     04 32 06 F1 | 	add	local07, #4
2ad98     19 37 62 FC | 	wrlong	local09, local07
2ad9c     01 00 00 FF 
2ada0     0C 32 86 F1 | 	sub	local07, ##524
2ada4     18 1B 02 F6 | 	mov	arg05, local06
2ada8     00 12 06 F6 | 	mov	arg01, #0
2adac     15 15 02 F6 | 	mov	arg02, local03
2adb0     16 17 02 F6 | 	mov	arg03, local04
2adb4     17 19 02 F6 | 	mov	arg04, local05
2adb8     F2 38 02 F6 | 	mov	local10, objptr
2adbc     19 E5 01 F6 | 	mov	objptr, local07
2adc0     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
2adc4     1C E5 01 F6 | 	mov	objptr, local10
2adc8     FD 3A 0A F6 | 	mov	local11, result1 wz
2adcc     24 00 90 5D |  if_ne	jmp	#LR__3950
2add0     AD 01 00 FF 
2add4     8E 14 06 F6 | 	mov	arg02, ##@LR__5367
2add8     1A 13 02 F6 | 	mov	arg01, local08
2addc     00 16 06 F6 | 	mov	arg03, #0
2ade0     F2 3A 02 F6 | 	mov	local11, objptr
2ade4     19 E5 01 F6 | 	mov	objptr, local07
2ade8     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
2adec     1D E5 01 F6 | 	mov	objptr, local11
2adf0     FD 3A 02 F6 | 	mov	local11, result1
2adf4                 | LR__3950
2adf4     00 3A 0E F2 | 	cmp	local11, #0 wz
2adf8     24 00 90 AD |  if_e	jmp	#LR__3951
2adfc     13 13 02 F6 | 	mov	arg01, local01
2ae00     14 15 02 F6 | 	mov	arg02, local02
2ae04     5C DB BF FD | 	call	#__system___freepins
2ae08     1D 13 6A F6 | 	neg	arg01, local11 wz
2ae0c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ae10     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2ae14     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2ae18     00 FA 05 F6 | 	mov	result1, #0
2ae1c     14 00 90 FD | 	jmp	#LR__3952
2ae20                 | LR__3951
2ae20     19 13 02 F6 | 	mov	arg01, local07
2ae24     F2 3A 02 F6 | 	mov	local11, objptr
2ae28     19 E5 01 F6 | 	mov	objptr, local07
2ae2c     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
2ae30     1D E5 01 F6 | 	mov	objptr, local11
2ae34                 | LR__3952
2ae34     A7 F0 03 F6 | 	mov	ptra, fp
2ae38     B2 00 A0 FD | 	call	#popregs_
2ae3c                 | __system___vfs_open_sdcardx_ret
2ae3c     2D 00 64 FD | 	ret
2ae40                 | 
2ae40                 | __system____default_getc
2ae40     03 4A 05 F6 | 	mov	COUNT_, #3
2ae44     A8 00 A0 FD | 	call	#pushregs_
2ae48     09 27 02 F6 | 	mov	local01, arg01
2ae4c     13 29 02 FB | 	rdlong	local02, local01
2ae50     08 28 06 F1 | 	add	local02, #8
2ae54     14 2B 02 FB | 	rdlong	local03, local02
2ae58     02 2A CE F7 | 	test	local03, #2 wz
2ae5c     13 13 02 56 |  if_ne	mov	arg01, local01
2ae60     00 01 B0 5D |  if_ne	call	#__system____default_flush
2ae64     14 2B 02 FB | 	rdlong	local03, local02
2ae68     01 2A 46 F5 | 	or	local03, #1
2ae6c     14 2B 62 FC | 	wrlong	local03, local02
2ae70     08 28 86 F1 | 	sub	local02, #8
2ae74     14 2B 0A FB | 	rdlong	local03, local02 wz
2ae78     0C 00 90 5D |  if_ne	jmp	#LR__3960
2ae7c     13 13 02 F6 | 	mov	arg01, local01
2ae80     68 18 B0 FD | 	call	#__system____default_filbuf
2ae84     FD 2A 02 F6 | 	mov	local03, result1
2ae88                 | LR__3960
2ae88     01 2A 56 F2 | 	cmps	local03, #1 wc
2ae8c     01 FA 65 C6 |  if_b	neg	result1, #1
2ae90     1C 00 90 CD |  if_b	jmp	#LR__3961
2ae94     01 2A 86 F1 | 	sub	local03, #1
2ae98     14 2B 62 FC | 	wrlong	local03, local02
2ae9c     04 28 06 F1 | 	add	local02, #4
2aea0     14 2B 02 FB | 	rdlong	local03, local02
2aea4     15 FB C1 FA | 	rdbyte	result1, local03
2aea8     01 2A 06 F1 | 	add	local03, #1
2aeac     14 2B 62 FC | 	wrlong	local03, local02
2aeb0                 | LR__3961
2aeb0     A7 F0 03 F6 | 	mov	ptra, fp
2aeb4     B2 00 A0 FD | 	call	#popregs_
2aeb8                 | __system____default_getc_ret
2aeb8     2D 00 64 FD | 	ret
2aebc                 | 
2aebc                 | __system____default_putc
2aebc     06 4A 05 F6 | 	mov	COUNT_, #6
2aec0     A8 00 A0 FD | 	call	#pushregs_
2aec4     09 27 02 F6 | 	mov	local01, arg01
2aec8     0A 29 02 F6 | 	mov	local02, arg02
2aecc     14 2B 02 FB | 	rdlong	local03, local02
2aed0     08 2A 06 F1 | 	add	local03, #8
2aed4     15 FB 01 FB | 	rdlong	result1, local03
2aed8     01 FA CD F7 | 	test	result1, #1 wz
2aedc     14 13 02 56 |  if_ne	mov	arg01, local02
2aee0     80 00 B0 5D |  if_ne	call	#__system____default_flush
2aee4     15 2D 02 FB | 	rdlong	local04, local03
2aee8     02 2C 46 F5 | 	or	local04, #2
2aeec     15 2D 62 FC | 	wrlong	local04, local03
2aef0     08 2A 86 F1 | 	sub	local03, #8
2aef4     15 2F 02 FB | 	rdlong	local05, local03
2aef8     10 2A 06 F1 | 	add	local03, #16
2aefc     15 15 02 FB | 	rdlong	arg02, local03
2af00     10 2A 86 F1 | 	sub	local03, #16
2af04     17 FB 01 F6 | 	mov	result1, local05
2af08     0A FB 01 F1 | 	add	result1, arg02
2af0c     FD 26 42 FC | 	wrbyte	local01, result1
2af10     13 27 E2 F8 | 	getbyte	local01, local01, #0
2af14     01 2E 06 F1 | 	add	local05, #1
2af18     15 2F 62 FC | 	wrlong	local05, local03
2af1c     06 28 06 F1 | 	add	local02, #6
2af20     14 31 EA FA | 	rdword	local06, local02 wz
2af24     06 28 86 F1 | 	sub	local02, #6
2af28     0C 2A 06 51 |  if_ne	add	local03, #12
2af2c     15 2D 02 5B |  if_ne	rdlong	local04, local03
2af30     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
2af34     0C 00 90 AD |  if_e	jmp	#LR__3970
2af38     0A 26 0E F2 | 	cmp	local01, #10 wz
2af3c     01 30 0E A2 |  if_e	cmp	local06, #1 wz
2af40     10 00 90 5D |  if_ne	jmp	#LR__3971
2af44                 | LR__3970
2af44     14 13 02 F6 | 	mov	arg01, local02
2af48     18 00 B0 FD | 	call	#__system____default_flush
2af4c     00 FA 0D F2 | 	cmp	result1, #0 wz
2af50     01 26 66 56 |  if_ne	neg	local01, #1
2af54                 | LR__3971
2af54     13 FB 01 F6 | 	mov	result1, local01
2af58     A7 F0 03 F6 | 	mov	ptra, fp
2af5c     B2 00 A0 FD | 	call	#popregs_
2af60                 | __system____default_putc_ret
2af60     2D 00 64 FD | 	ret
2af64                 | 
2af64                 | __system____default_flush
2af64     06 4A 05 F6 | 	mov	COUNT_, #6
2af68     A8 00 A0 FD | 	call	#pushregs_
2af6c     09 27 02 F6 | 	mov	local01, arg01
2af70     13 29 02 FB | 	rdlong	local02, local01
2af74     14 2B 02 FB | 	rdlong	local03, local02
2af78     08 28 06 F1 | 	add	local02, #8
2af7c     14 FB 01 FB | 	rdlong	result1, local02
2af80     08 28 86 F1 | 	sub	local02, #8
2af84     02 FA CD F7 | 	test	result1, #2 wz
2af88     D0 00 90 AD |  if_e	jmp	#LR__3982
2af8c     01 2A 56 F2 | 	cmps	local03, #1 wc
2af90     20 01 90 CD |  if_b	jmp	#LR__3984
2af94     08 26 06 F1 | 	add	local01, #8
2af98     13 FB 01 FB | 	rdlong	result1, local01
2af9c     08 26 86 F1 | 	sub	local01, #8
2afa0     40 FA CD F7 | 	test	result1, #64 wz
2afa4     68 00 90 AD |  if_e	jmp	#LR__3981
2afa8     08 26 06 F1 | 	add	local01, #8
2afac     13 17 02 FB | 	rdlong	arg03, local01
2afb0     08 26 86 F1 | 	sub	local01, #8
2afb4     80 16 CE F7 | 	test	arg03, #128 wz
2afb8     54 00 90 AD |  if_e	jmp	#LR__3980
2afbc     30 26 06 F1 | 	add	local01, #48
2afc0     13 2D 02 FB | 	rdlong	local04, local01
2afc4     16 2F 02 F6 | 	mov	local05, local04
2afc8     30 26 86 F1 | 	sub	local01, #48
2afcc     13 2E 46 F7 | 	zerox	local05, #19
2afd0     14 2C 46 F0 | 	shr	local04, #20
2afd4     02 2C 66 F0 | 	shl	local04, #2
2afd8     ED 2C 02 F1 | 	add	local04, __methods__
2afdc     16 2D 02 FB | 	rdlong	local04, local04
2afe0     13 13 02 F6 | 	mov	arg01, local01
2afe4     00 14 06 F6 | 	mov	arg02, #0
2afe8     02 16 06 F6 | 	mov	arg03, #2
2afec     F2 30 02 F6 | 	mov	local06, objptr
2aff0     17 E5 01 F6 | 	mov	objptr, local05
2aff4     2D 2C 62 FD | 	call	local04
2aff8     18 E5 01 F6 | 	mov	objptr, local06
2affc     08 26 06 F1 | 	add	local01, #8
2b000     13 31 02 FB | 	rdlong	local06, local01
2b004     80 30 26 F5 | 	andn	local06, #128
2b008     13 31 62 FC | 	wrlong	local06, local01
2b00c     08 26 86 F1 | 	sub	local01, #8
2b010                 | LR__3980
2b010                 | LR__3981
2b010     18 26 06 F1 | 	add	local01, #24
2b014     13 2D 02 FB | 	rdlong	local04, local01
2b018     16 2F 02 F6 | 	mov	local05, local04
2b01c     18 26 86 F1 | 	sub	local01, #24
2b020     13 2E 46 F7 | 	zerox	local05, #19
2b024     14 2C 46 F0 | 	shr	local04, #20
2b028     02 2C 66 F0 | 	shl	local04, #2
2b02c     ED 2C 02 F1 | 	add	local04, __methods__
2b030     16 2D 02 FB | 	rdlong	local04, local04
2b034     10 28 06 F1 | 	add	local02, #16
2b038     14 15 02 FB | 	rdlong	arg02, local02
2b03c     10 28 86 F1 | 	sub	local02, #16
2b040     13 13 02 F6 | 	mov	arg01, local01
2b044     15 17 02 F6 | 	mov	arg03, local03
2b048     F2 30 02 F6 | 	mov	local06, objptr
2b04c     17 E5 01 F6 | 	mov	objptr, local05
2b050     2D 2C 62 FD | 	call	local04
2b054     18 E5 01 F6 | 	mov	objptr, local06
2b058     58 00 90 FD | 	jmp	#LR__3984
2b05c                 | LR__3982
2b05c     08 28 06 F1 | 	add	local02, #8
2b060     14 31 02 FB | 	rdlong	local06, local02
2b064     08 28 86 F1 | 	sub	local02, #8
2b068     01 30 CE F7 | 	test	local06, #1 wz
2b06c     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2b070     40 00 90 AD |  if_e	jmp	#LR__3983
2b074     30 26 06 F1 | 	add	local01, #48
2b078     13 2D 02 FB | 	rdlong	local04, local01
2b07c     16 2F 02 F6 | 	mov	local05, local04
2b080     30 26 86 F1 | 	sub	local01, #48
2b084     13 2E 46 F7 | 	zerox	local05, #19
2b088     14 2C 46 F0 | 	shr	local04, #20
2b08c     02 2C 66 F0 | 	shl	local04, #2
2b090     ED 2C 02 F1 | 	add	local04, __methods__
2b094     16 2D 02 FB | 	rdlong	local04, local04
2b098     13 13 02 F6 | 	mov	arg01, local01
2b09c     15 15 62 F6 | 	neg	arg02, local03
2b0a0     01 16 06 F6 | 	mov	arg03, #1
2b0a4     F2 30 02 F6 | 	mov	local06, objptr
2b0a8     17 E5 01 F6 | 	mov	objptr, local05
2b0ac     2D 2C 62 FD | 	call	local04
2b0b0     18 E5 01 F6 | 	mov	objptr, local06
2b0b4                 | LR__3983
2b0b4                 | LR__3984
2b0b4     14 01 68 FC | 	wrlong	#0, local02
2b0b8     04 28 06 F1 | 	add	local02, #4
2b0bc     14 01 68 FC | 	wrlong	#0, local02
2b0c0     04 28 06 F1 | 	add	local02, #4
2b0c4     14 01 68 FC | 	wrlong	#0, local02
2b0c8     00 FA 05 F6 | 	mov	result1, #0
2b0cc     A7 F0 03 F6 | 	mov	ptra, fp
2b0d0     B2 00 A0 FD | 	call	#popregs_
2b0d4                 | __system____default_flush_ret
2b0d4     2D 00 64 FD | 	ret
2b0d8                 | 
2b0d8                 | __system____default_buffer_init
2b0d8     02 4A 05 F6 | 	mov	COUNT_, #2
2b0dc     A8 00 A0 FD | 	call	#pushregs_
2b0e0     09 27 02 F6 | 	mov	local01, arg01
2b0e4     13 29 02 FB | 	rdlong	local02, local01
2b0e8     13 13 02 F6 | 	mov	arg01, local01
2b0ec     34 03 B0 FD | 	call	#__system___isatty
2b0f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2b0f4     06 26 06 51 |  if_ne	add	local01, #6
2b0f8     13 0B 58 5C |  if_ne	wrword	#5, local01
2b0fc     06 26 06 A1 |  if_e	add	local01, #6
2b100     13 0D 58 AC |  if_e	wrword	#6, local01
2b104     14 28 06 F1 | 	add	local02, #20
2b108     14 27 02 F6 | 	mov	local01, local02
2b10c     04 28 86 F1 | 	sub	local02, #4
2b110     14 27 62 FC | 	wrlong	local01, local02
2b114     04 28 86 F1 | 	sub	local02, #4
2b118     02 00 80 FF 
2b11c     14 01 68 FC | 	wrlong	##1024, local02
2b120     00 FA 05 F6 | 	mov	result1, #0
2b124     A7 F0 03 F6 | 	mov	ptra, fp
2b128     B2 00 A0 FD | 	call	#popregs_
2b12c                 | __system____default_buffer_init_ret
2b12c     2D 00 64 FD | 	ret
2b130                 | 
2b130                 | __system__stat
2b130     04 4A 05 F6 | 	mov	COUNT_, #4
2b134     A8 00 A0 FD | 	call	#pushregs_
2b138     0A 27 02 F6 | 	mov	local01, arg02
2b13c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2b140     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2b144     09 15 02 F6 | 	mov	arg02, arg01
2b148     14 13 02 F6 | 	mov	arg01, local02
2b14c     00 16 06 F6 | 	mov	arg03, #0
2b150     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2b154     58 B5 BF FD | 	call	#__system____getvfsforfile
2b158     FD 2A 0A F6 | 	mov	local03, result1 wz
2b15c     10 00 90 AD |  if_e	jmp	#LR__3990
2b160     34 2A 06 F1 | 	add	local03, #52
2b164     15 17 0A FB | 	rdlong	arg03, local03 wz
2b168     34 2A 86 F1 | 	sub	local03, #52
2b16c     14 00 90 5D |  if_ne	jmp	#LR__3991
2b170                 | LR__3990
2b170     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b174     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2b178     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b17c     01 FA 65 F6 | 	neg	result1, #1
2b180     68 00 90 FD | 	jmp	#LR__3992
2b184                 | LR__3991
2b184     13 13 02 F6 | 	mov	arg01, local01
2b188     00 14 06 F6 | 	mov	arg02, #0
2b18c     30 16 06 F6 | 	mov	arg03, #48
2b190     09 2D 02 F6 | 	mov	local04, arg01
2b194     98 00 A0 FD | 	call	#\builtin_bytefill_
2b198     16 FB 01 F6 | 	mov	result1, local04
2b19c     14 13 CA FA | 	rdbyte	arg01, local02 wz
2b1a0     08 26 06 A1 |  if_e	add	local01, #8
2b1a4     08 00 80 AF 
2b1a8     13 FF 6B AC |  if_e	wrlong	##4607, local01
2b1ac     00 FA 05 A6 |  if_e	mov	result1, #0
2b1b0     38 00 90 AD |  if_e	jmp	#LR__3992
2b1b4     34 2A 06 F1 | 	add	local03, #52
2b1b8     15 2B 02 FB | 	rdlong	local03, local03
2b1bc     15 2D 02 F6 | 	mov	local04, local03
2b1c0     13 2A 46 F7 | 	zerox	local03, #19
2b1c4     14 2C 46 F0 | 	shr	local04, #20
2b1c8     02 2C 66 F0 | 	shl	local04, #2
2b1cc     ED 2C 02 F1 | 	add	local04, __methods__
2b1d0     16 2D 02 FB | 	rdlong	local04, local04
2b1d4     14 13 02 F6 | 	mov	arg01, local02
2b1d8     13 15 02 F6 | 	mov	arg02, local01
2b1dc     F2 28 02 F6 | 	mov	local02, objptr
2b1e0     15 E5 01 F6 | 	mov	objptr, local03
2b1e4     2D 2C 62 FD | 	call	local04
2b1e8     14 E5 01 F6 | 	mov	objptr, local02
2b1ec                 | LR__3992
2b1ec     A7 F0 03 F6 | 	mov	ptra, fp
2b1f0     B2 00 A0 FD | 	call	#popregs_
2b1f4                 | __system__stat_ret
2b1f4     2D 00 64 FD | 	ret
2b1f8                 | 
2b1f8                 | __system__write
2b1f8     0A 12 16 F2 | 	cmp	arg01, #10 wc
2b1fc     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2b200     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2b204     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2b208     01 FA 65 36 |  if_ae	neg	result1, #1
2b20c     20 00 90 3D |  if_ae	jmp	#LR__4000
2b210     34 12 06 FD | 	qmul	arg01, #52
2b214     02 00 00 FF 
2b218     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2b21c     18 12 62 FD | 	getqx	arg01
2b220     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2b224     02 00 00 FF 
2b228     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2b22c     0C 10 B0 FD | 	call	#__system___vfswrite
2b230                 | LR__4000
2b230                 | __system__write_ret
2b230     2D 00 64 FD | 	ret
2b234                 | 
2b234                 | __system__read
2b234     0A 12 16 F2 | 	cmp	arg01, #10 wc
2b238     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2b23c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2b240     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2b244     01 FA 65 36 |  if_ae	neg	result1, #1
2b248     20 00 90 3D |  if_ae	jmp	#LR__4010
2b24c     34 12 06 FD | 	qmul	arg01, #52
2b250     02 00 00 FF 
2b254     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2b258     18 12 62 FD | 	getqx	arg01
2b25c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2b260     02 00 00 FF 
2b264     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2b268     98 11 B0 FD | 	call	#__system___vfsread
2b26c                 | LR__4010
2b26c                 | __system__read_ret
2b26c     2D 00 64 FD | 	ret
2b270                 | 
2b270                 | __system__close
2b270     0A 12 16 F2 | 	cmp	arg01, #10 wc
2b274     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2b278     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2b27c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2b280     01 FA 65 36 |  if_ae	neg	result1, #1
2b284     20 00 90 3D |  if_ae	jmp	#LR__4020
2b288     34 12 06 FD | 	qmul	arg01, #52
2b28c     02 00 00 FF 
2b290     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2b294     18 12 62 FD | 	getqx	arg01
2b298     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2b29c     02 00 00 FF 
2b2a0     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2b2a4     10 F9 BF FD | 	call	#__system___closeraw
2b2a8                 | LR__4020
2b2a8                 | __system__close_ret
2b2a8     2D 00 64 FD | 	ret
2b2ac                 | 
2b2ac                 | __system__lseek
2b2ac     06 4A 05 F6 | 	mov	COUNT_, #6
2b2b0     A8 00 A0 FD | 	call	#pushregs_
2b2b4     0A 12 16 F2 | 	cmp	arg01, #10 wc
2b2b8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2b2bc     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2b2c0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2b2c4     01 FA 65 36 |  if_ae	neg	result1, #1
2b2c8     C4 00 90 3D |  if_ae	jmp	#LR__4031
2b2cc     34 12 06 FD | 	qmul	arg01, #52
2b2d0     02 00 00 FF 
2b2d4     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2b2d8     18 26 62 FD | 	getqx	local01
2b2dc     F3 26 02 F1 | 	add	local01, ptr___system__dat__
2b2e0     30 26 06 F1 | 	add	local01, #48
2b2e4     13 13 0A FB | 	rdlong	arg01, local01 wz
2b2e8     30 26 86 F1 | 	sub	local01, #48
2b2ec     02 00 00 FF 
2b2f0     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2b2f4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b2f8     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2b2fc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b300     01 FA 65 A6 |  if_e	neg	result1, #1
2b304     88 00 90 AD |  if_e	jmp	#LR__4031
2b308     08 26 06 F1 | 	add	local01, #8
2b30c     13 29 02 FB | 	rdlong	local02, local01
2b310     08 26 86 F1 | 	sub	local01, #8
2b314     40 28 CE F7 | 	test	local02, #64 wz
2b318     08 26 06 51 |  if_ne	add	local01, #8
2b31c     13 29 02 5B |  if_ne	rdlong	local02, local01
2b320     80 28 46 55 |  if_ne	or	local02, #128
2b324     13 29 62 5C |  if_ne	wrlong	local02, local01
2b328     08 26 86 51 |  if_ne	sub	local01, #8
2b32c     30 26 06 F1 | 	add	local01, #48
2b330     13 2B 02 FB | 	rdlong	local03, local01
2b334     15 2D 02 F6 | 	mov	local04, local03
2b338     30 26 86 F1 | 	sub	local01, #48
2b33c     13 2C 46 F7 | 	zerox	local04, #19
2b340     14 2A 46 F0 | 	shr	local03, #20
2b344     02 2A 66 F0 | 	shl	local03, #2
2b348     ED 2A 02 F1 | 	add	local03, __methods__
2b34c     15 2B 02 FB | 	rdlong	local03, local03
2b350     13 13 02 F6 | 	mov	arg01, local01
2b354     F2 2E 02 F6 | 	mov	local05, objptr
2b358     16 E5 01 F6 | 	mov	objptr, local04
2b35c     2D 2A 62 FD | 	call	local03
2b360     17 E5 01 F6 | 	mov	objptr, local05
2b364     FD 30 02 F6 | 	mov	local06, result1
2b368     00 30 56 F2 | 	cmps	local06, #0 wc
2b36c     1C 00 90 3D |  if_ae	jmp	#LR__4030
2b370     18 13 6A F6 | 	neg	arg01, local06 wz
2b374     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b378     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2b37c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b380     01 FA 65 56 |  if_ne	neg	result1, #1
2b384     00 FA 05 A6 |  if_e	mov	result1, #0
2b388     04 00 90 FD | 	jmp	#LR__4031
2b38c                 | LR__4030
2b38c     18 FB 01 F6 | 	mov	result1, local06
2b390                 | LR__4031
2b390     A7 F0 03 F6 | 	mov	ptra, fp
2b394     B2 00 A0 FD | 	call	#popregs_
2b398                 | __system__lseek_ret
2b398     2D 00 64 FD | 	ret
2b39c                 | 
2b39c                 | __system___ioctl
2b39c     03 4A 05 F6 | 	mov	COUNT_, #3
2b3a0     A8 00 A0 FD | 	call	#pushregs_
2b3a4     00 12 4E F2 | 	cmps	arg01, #0 wz
2b3a8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b3ac     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2b3b0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b3b4     01 FA 65 A6 |  if_e	neg	result1, #1
2b3b8     5C 00 90 AD |  if_e	jmp	#LR__4041
2b3bc     28 12 06 F1 | 	add	arg01, #40
2b3c0     09 27 02 FB | 	rdlong	local01, arg01
2b3c4     13 29 02 F6 | 	mov	local02, local01
2b3c8     28 12 86 F1 | 	sub	arg01, #40
2b3cc     13 28 46 F7 | 	zerox	local02, #19
2b3d0     14 26 46 F0 | 	shr	local01, #20
2b3d4     02 26 66 F0 | 	shl	local01, #2
2b3d8     ED 26 02 F1 | 	add	local01, __methods__
2b3dc     13 27 02 FB | 	rdlong	local01, local01
2b3e0     F2 2A 02 F6 | 	mov	local03, objptr
2b3e4     14 E5 01 F6 | 	mov	objptr, local02
2b3e8     2D 26 62 FD | 	call	local01
2b3ec     15 E5 01 F6 | 	mov	objptr, local03
2b3f0     FD 12 0A F6 | 	mov	arg01, result1 wz
2b3f4     1C 00 90 AD |  if_e	jmp	#LR__4040
2b3f8     00 12 4E F2 | 	cmps	arg01, #0 wz
2b3fc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b400     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2b404     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b408     01 FA 65 56 |  if_ne	neg	result1, #1
2b40c     00 FA 05 A6 |  if_e	mov	result1, #0
2b410     04 00 90 FD | 	jmp	#LR__4041
2b414                 | LR__4040
2b414     00 FA 05 F6 | 	mov	result1, #0
2b418                 | LR__4041
2b418     A7 F0 03 F6 | 	mov	ptra, fp
2b41c     B2 00 A0 FD | 	call	#popregs_
2b420                 | __system___ioctl_ret
2b420     2D 00 64 FD | 	ret
2b424                 | 
2b424                 | __system___isatty
2b424     00 4A 05 F6 | 	mov	COUNT_, #0
2b428     A8 00 A0 FD | 	call	#pushregs_
2b42c     0C F0 07 F1 | 	add	ptra, #12
2b430     04 4E 05 F1 | 	add	fp, #4
2b434     A7 12 62 FC | 	wrlong	arg01, fp
2b438     04 4E 05 F1 | 	add	fp, #4
2b43c     A7 16 02 F6 | 	mov	arg03, fp
2b440     08 4E 85 F1 | 	sub	fp, #8
2b444     00 15 06 F6 | 	mov	arg02, #256
2b448     50 FF BF FD | 	call	#__system___ioctl
2b44c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b450     01 FA 05 A6 |  if_e	mov	result1, #1
2b454     00 FA 05 56 |  if_ne	mov	result1, #0
2b458     A7 F0 03 F6 | 	mov	ptra, fp
2b45c     B2 00 A0 FD | 	call	#popregs_
2b460                 | __system___isatty_ret
2b460     2D 00 64 FD | 	ret
2b464                 | 
2b464                 | __system____getftab
2b464     0A 12 16 F2 | 	cmp	arg01, #10 wc
2b468     34 12 06 CD |  if_b	qmul	arg01, #52
2b46c     00 FA 05 36 |  if_ae	mov	result1, #0
2b470     02 00 00 CF 
2b474     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
2b478     18 FA 61 CD |  if_b	getqx	result1
2b47c     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2b480     02 00 00 CF 
2b484     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
2b488                 | __system____getftab_ret
2b488     2D 00 64 FD | 	ret
2b48c                 | 
2b48c                 | __system__strncpy
2b48c     09 01 02 F6 | 	mov	_var01, arg01
2b490                 | LR__4050
2b490     01 16 86 F1 | 	sub	arg03, #1
2b494     00 16 56 F2 | 	cmps	arg03, #0 wc
2b498     18 00 90 CD |  if_b	jmp	#LR__4051
2b49c     0A FB C1 FA | 	rdbyte	result1, arg02
2b4a0     00 FB 41 FC | 	wrbyte	result1, _var01
2b4a4     01 14 06 F1 | 	add	arg02, #1
2b4a8     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2b4ac     01 00 06 F1 | 	add	_var01, #1
2b4b0     DC FF 9F 5D |  if_ne	jmp	#LR__4050
2b4b4                 | LR__4051
2b4b4     97 0C 48 FB | 	callpa	#(@LR__4053-@LR__4052)>>2,fcache_load_ptr_
2b4b8                 | LR__4052
2b4b8     01 16 86 F1 | 	sub	arg03, #1
2b4bc     00 16 56 F2 | 	cmps	arg03, #0 wc
2b4c0     00 03 02 36 |  if_ae	mov	_var02, _var01
2b4c4     01 00 06 31 |  if_ae	add	_var01, #1
2b4c8     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2b4cc     E8 FF 9F 3D |  if_ae	jmp	#LR__4052
2b4d0                 | LR__4053
2b4d0     09 FB 01 F6 | 	mov	result1, arg01
2b4d4                 | __system__strncpy_ret
2b4d4     2D 00 64 FD | 	ret
2b4d8                 | 
2b4d8                 | __system__strncat
2b4d8     00 14 4E F2 | 	cmps	arg02, #0 wz
2b4dc     50 00 90 AD |  if_e	jmp	#LR__4064
2b4e0     01 16 16 F2 | 	cmp	arg03, #1 wc
2b4e4     48 00 90 CD |  if_b	jmp	#LR__4064
2b4e8     09 01 02 F6 | 	mov	_var01, arg01
2b4ec     97 1E 48 FB | 	callpa	#(@LR__4062-@LR__4060)>>2,fcache_load_ptr_
2b4f0                 | LR__4060
2b4f0     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2b4f4     01 00 06 51 |  if_ne	add	_var01, #1
2b4f8     F4 FF 9F 5D |  if_ne	jmp	#LR__4060
2b4fc     0B 03 02 F6 | 	mov	_var02, arg03
2b500                 | LR__4061
2b500     0A 05 C2 FA | 	rdbyte	_var03, arg02
2b504     02 07 02 F6 | 	mov	_var04, _var03
2b508     07 06 4E F7 | 	zerox	_var04, #7 wz
2b50c     01 14 06 F1 | 	add	arg02, #1
2b510     18 00 90 AD |  if_e	jmp	#LR__4063
2b514     01 02 86 F1 | 	sub	_var02, #1
2b518     00 02 56 F2 | 	cmps	_var02, #0 wc
2b51c     00 07 02 36 |  if_ae	mov	_var04, _var01
2b520     01 00 06 31 |  if_ae	add	_var01, #1
2b524     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
2b528     D4 FF 9F 3D |  if_ae	jmp	#LR__4061
2b52c                 | LR__4062
2b52c                 | LR__4063
2b52c     00 01 48 FC | 	wrbyte	#0, _var01
2b530                 | LR__4064
2b530     09 FB 01 F6 | 	mov	result1, arg01
2b534                 | __system__strncat_ret
2b534     2D 00 64 FD | 	ret
2b538                 | 
2b538                 | __system__strncmp
2b538     09 01 0A F6 | 	mov	_var01, arg01 wz
2b53c     14 00 90 5D |  if_ne	jmp	#LR__4070
2b540     00 14 0E F2 | 	cmp	arg02, #0 wz
2b544     01 02 66 56 |  if_ne	neg	_var02, #1
2b548     00 02 06 A6 |  if_e	mov	_var02, #0
2b54c     01 FB 01 F6 | 	mov	result1, _var02
2b550     74 00 90 FD | 	jmp	#__system__strncmp_ret
2b554                 | LR__4070
2b554     00 14 0E F2 | 	cmp	arg02, #0 wz
2b558     01 FA 05 A6 |  if_e	mov	result1, #1
2b55c     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2b560     0B 05 02 F6 | 	mov	_var03, arg03
2b564     97 16 48 FB | 	callpa	#(@LR__4072-@LR__4071)>>2,fcache_load_ptr_
2b568                 | LR__4071
2b568     00 07 C2 FA | 	rdbyte	_var04, _var01
2b56c     0A 09 02 F6 | 	mov	_var05, arg02
2b570     04 0B C2 FA | 	rdbyte	_var06, _var05
2b574     01 04 86 F1 | 	sub	_var03, #1
2b578     00 04 56 F2 | 	cmps	_var03, #0 wc
2b57c     01 00 06 F1 | 	add	_var01, #1
2b580     01 14 06 F1 | 	add	arg02, #1
2b584     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2b588     08 00 90 2D |  if_nc_and_z	jmp	#LR__4073
2b58c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2b590     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4071
2b594                 | LR__4072
2b594                 | LR__4073
2b594     00 04 56 F2 | 	cmps	_var03, #0 wc
2b598     00 FA 05 C6 |  if_b	mov	result1, #0
2b59c     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2b5a0     05 07 0A F2 | 	cmp	_var04, _var06 wz
2b5a4     00 FA 05 A6 |  if_e	mov	result1, #0
2b5a8     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2b5ac     00 06 0E F2 | 	cmp	_var04, #0 wz
2b5b0     01 FA 65 A6 |  if_e	neg	result1, #1
2b5b4     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2b5b8     00 0A 0E F2 | 	cmp	_var06, #0 wz
2b5bc     01 FA 05 A6 |  if_e	mov	result1, #1
2b5c0     03 FB 01 56 |  if_ne	mov	result1, _var04
2b5c4     05 FB 81 51 |  if_ne	sub	result1, _var06
2b5c8                 | __system__strncmp_ret
2b5c8     2D 00 64 FD | 	ret
2b5cc                 | 
2b5cc                 | __system____root_opendir
2b5cc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2b5d0     04 12 06 F1 | 	add	arg01, #4
2b5d4     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
2b5d8     00 FA 05 F6 | 	mov	result1, #0
2b5dc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2b5e0                 | __system____root_opendir_ret
2b5e0     2D 00 64 FD | 	ret
2b5e4                 | 
2b5e4                 | __system____root_readdir
2b5e4     03 4A 05 F6 | 	mov	COUNT_, #3
2b5e8     A8 00 A0 FD | 	call	#pushregs_
2b5ec     09 27 02 F6 | 	mov	local01, arg01
2b5f0     0A 29 02 F6 | 	mov	local02, arg02
2b5f4     04 26 06 F1 | 	add	local01, #4
2b5f8     13 2B 02 FB | 	rdlong	local03, local01
2b5fc     04 26 86 F1 | 	sub	local01, #4
2b600                 | LR__4080
2b600     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2b604     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
2b608     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2b60c     01 FA 65 A6 |  if_e	neg	result1, #1
2b610     48 00 90 AD |  if_e	jmp	#LR__4081
2b614     15 17 0A FB | 	rdlong	arg03, local03 wz
2b618     04 2A 06 A1 |  if_e	add	local03, #4
2b61c     E0 FF 9F AD |  if_e	jmp	#LR__4080
2b620     15 15 02 FB | 	rdlong	arg02, local03
2b624     01 14 06 F1 | 	add	arg02, #1
2b628     14 13 02 F6 | 	mov	arg01, local02
2b62c     40 16 06 F6 | 	mov	arg03, #64
2b630     58 FE BF FD | 	call	#__system__strncpy
2b634     50 28 06 F1 | 	add	local02, #80
2b638     14 03 48 FC | 	wrbyte	#1, local02
2b63c     08 28 86 F1 | 	sub	local02, #8
2b640     14 01 68 FC | 	wrlong	#0, local02
2b644     04 28 06 F1 | 	add	local02, #4
2b648     14 01 68 FC | 	wrlong	#0, local02
2b64c     04 2A 06 F1 | 	add	local03, #4
2b650     04 26 06 F1 | 	add	local01, #4
2b654     13 2B 62 FC | 	wrlong	local03, local01
2b658     00 FA 05 F6 | 	mov	result1, #0
2b65c                 | LR__4081
2b65c     A7 F0 03 F6 | 	mov	ptra, fp
2b660     B2 00 A0 FD | 	call	#popregs_
2b664                 | __system____root_readdir_ret
2b664     2D 00 64 FD | 	ret
2b668                 | 
2b668                 | __system____root_closedir
2b668     00 FA 05 F6 | 	mov	result1, #0
2b66c                 | __system____root_closedir_ret
2b66c     2D 00 64 FD | 	ret
2b670                 | 
2b670                 | __system____root_stat
2b670     0A 01 02 F6 | 	mov	_var01, arg02
2b674     00 13 02 F6 | 	mov	arg01, _var01
2b678     00 14 06 F6 | 	mov	arg02, #0
2b67c     30 16 06 F6 | 	mov	arg03, #48
2b680     98 00 A0 FD | 	call	#\builtin_bytefill_
2b684     08 00 06 F1 | 	add	_var01, #8
2b688     08 00 80 FF 
2b68c     00 FF 6B FC | 	wrlong	##4607, _var01
2b690     00 FA 05 F6 | 	mov	result1, #0
2b694                 | __system____root_stat_ret
2b694     2D 00 64 FD | 	ret
2b698                 | 
2b698                 | __system___normalizeName
2b698     00 00 06 F6 | 	mov	_var01, #0
2b69c     09 03 02 F6 | 	mov	_var02, arg01
2b6a0     01 05 02 F6 | 	mov	_var03, _var02
2b6a4                 | LR__4090
2b6a4     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2b6a8     5C 01 90 AD |  if_e	jmp	#LR__4109
2b6ac     00 00 0E F2 | 	cmp	_var01, #0 wz
2b6b0     02 07 02 56 |  if_ne	mov	_var04, _var03
2b6b4     01 04 06 51 |  if_ne	add	_var03, #1
2b6b8     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2b6bc     00 00 06 56 |  if_ne	mov	_var01, #0
2b6c0     01 07 C2 FA | 	rdbyte	_var04, _var02
2b6c4     2E 06 0E F2 | 	cmp	_var04, #46 wz
2b6c8     D8 00 90 5D |  if_ne	jmp	#LR__4102
2b6cc     01 02 06 F1 | 	add	_var02, #1
2b6d0     01 07 C2 FA | 	rdbyte	_var04, _var02
2b6d4     01 02 86 F1 | 	sub	_var02, #1
2b6d8     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b6dc     18 00 90 AD |  if_e	jmp	#LR__4091
2b6e0     01 02 06 F1 | 	add	_var02, #1
2b6e4     01 09 C2 FA | 	rdbyte	_var05, _var02
2b6e8     01 02 86 F1 | 	sub	_var02, #1
2b6ec     04 0B 02 F6 | 	mov	_var06, _var05
2b6f0     07 0A 4E F7 | 	zerox	_var06, #7 wz
2b6f4     10 00 90 5D |  if_ne	jmp	#LR__4092
2b6f8                 | LR__4091
2b6f8     01 0D 02 F6 | 	mov	_var07, _var02
2b6fc     01 0C 06 F1 | 	add	_var07, #1
2b700     06 03 02 F6 | 	mov	_var02, _var07
2b704     E0 00 90 FD | 	jmp	#LR__4106
2b708                 | LR__4092
2b708     01 02 06 F1 | 	add	_var02, #1
2b70c     01 0D C2 FA | 	rdbyte	_var07, _var02
2b710     01 02 86 F1 | 	sub	_var02, #1
2b714     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2b718     2E 06 0E F2 | 	cmp	_var04, #46 wz
2b71c     84 00 90 5D |  if_ne	jmp	#LR__4101
2b720     02 02 06 F1 | 	add	_var02, #2
2b724     01 0D C2 FA | 	rdbyte	_var07, _var02
2b728     02 02 86 F1 | 	sub	_var02, #2
2b72c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2b730     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b734     18 00 90 AD |  if_e	jmp	#LR__4093
2b738     02 02 06 F1 | 	add	_var02, #2
2b73c     01 09 C2 FA | 	rdbyte	_var05, _var02
2b740     02 02 86 F1 | 	sub	_var02, #2
2b744     04 0B 02 F6 | 	mov	_var06, _var05
2b748     07 0A 4E F7 | 	zerox	_var06, #7 wz
2b74c     54 00 90 5D |  if_ne	jmp	#LR__4100
2b750                 | LR__4093
2b750     02 02 06 F1 | 	add	_var02, #2
2b754     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2b758     40 00 90 ED |  if_be	jmp	#LR__4099
2b75c     02 0F 02 F6 | 	mov	_var08, _var03
2b760     01 0E 86 F1 | 	sub	_var08, #1
2b764                 | LR__4094
2b764     07 07 C2 FA | 	rdbyte	_var04, _var08
2b768     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b76c     0C 00 90 5D |  if_ne	jmp	#LR__4095
2b770     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2b774     01 0E 86 11 |  if_a	sub	_var08, #1
2b778     E8 FF 9F 1D |  if_a	jmp	#LR__4094
2b77c                 | LR__4095
2b77c     97 0C 48 FB | 	callpa	#(@LR__4097-@LR__4096)>>2,fcache_load_ptr_
2b780                 | LR__4096
2b780     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2b784     10 00 90 ED |  if_be	jmp	#LR__4098
2b788     07 07 C2 FA | 	rdbyte	_var04, _var08
2b78c     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b790     01 0E 86 51 |  if_ne	sub	_var08, #1
2b794     E8 FF 9F 5D |  if_ne	jmp	#LR__4096
2b798                 | LR__4097
2b798                 | LR__4098
2b798     07 05 02 F6 | 	mov	_var03, _var08
2b79c                 | LR__4099
2b79c     01 00 06 F6 | 	mov	_var01, #1
2b7a0     44 00 90 FD | 	jmp	#LR__4106
2b7a4                 | LR__4100
2b7a4                 | LR__4101
2b7a4                 | LR__4102
2b7a4     97 18 48 FB | 	callpa	#(@LR__4104-@LR__4103)>>2,fcache_load_ptr_
2b7a8                 | LR__4103
2b7a8     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2b7ac     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2b7b0     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2b7b4     20 00 90 AD |  if_e	jmp	#LR__4105
2b7b8     01 0B 02 F6 | 	mov	_var06, _var02
2b7bc     01 09 02 F6 | 	mov	_var05, _var02
2b7c0     01 08 06 F1 | 	add	_var05, #1
2b7c4     05 11 C2 FA | 	rdbyte	_var09, _var06
2b7c8     04 03 02 F6 | 	mov	_var02, _var05
2b7cc     02 11 42 FC | 	wrbyte	_var09, _var03
2b7d0     01 04 06 F1 | 	add	_var03, #1
2b7d4     D0 FF 9F FD | 	jmp	#LR__4103
2b7d8                 | LR__4104
2b7d8                 | LR__4105
2b7d8     01 07 C2 FA | 	rdbyte	_var04, _var02
2b7dc     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b7e0     C0 FE 9F 5D |  if_ne	jmp	#LR__4090
2b7e4     01 00 06 F6 | 	mov	_var01, #1
2b7e8                 | LR__4106
2b7e8     97 0C 48 FB | 	callpa	#(@LR__4108-@LR__4107)>>2,fcache_load_ptr_
2b7ec                 | LR__4107
2b7ec     01 07 C2 FA | 	rdbyte	_var04, _var02
2b7f0     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b7f4     01 0D 02 A6 |  if_e	mov	_var07, _var02
2b7f8     01 0C 06 A1 |  if_e	add	_var07, #1
2b7fc     06 03 02 A6 |  if_e	mov	_var02, _var07
2b800     E8 FF 9F AD |  if_e	jmp	#LR__4107
2b804                 | LR__4108
2b804     9C FE 9F FD | 	jmp	#LR__4090
2b808                 | LR__4109
2b808     02 01 48 FC | 	wrbyte	#0, _var03
2b80c                 | __system___normalizeName_ret
2b80c     2D 00 64 FD | 	ret
2b810                 | 
2b810                 | __system___strrev
2b810     09 01 CA FA | 	rdbyte	_var01, arg01 wz
2b814     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
2b818     09 03 02 F6 | 	mov	_var02, arg01
2b81c     97 1A 48 FB | 	callpa	#(@LR__4112-@LR__4110)>>2,fcache_load_ptr_
2b820                 | LR__4110
2b820     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2b824     01 02 06 51 |  if_ne	add	_var02, #1
2b828     F4 FF 9F 5D |  if_ne	jmp	#LR__4110
2b82c     01 02 86 F1 | 	sub	_var02, #1
2b830                 | LR__4111
2b830     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2b834     1C 00 90 ED |  if_be	jmp	#LR__4113
2b838     09 01 C2 FA | 	rdbyte	_var01, arg01
2b83c     01 05 C2 FA | 	rdbyte	_var03, _var02
2b840     09 05 42 FC | 	wrbyte	_var03, arg01
2b844     01 01 42 FC | 	wrbyte	_var01, _var02
2b848     01 12 06 F1 | 	add	arg01, #1
2b84c     01 02 86 F1 | 	sub	_var02, #1
2b850     DC FF 9F FD | 	jmp	#LR__4111
2b854                 | LR__4112
2b854                 | LR__4113
2b854                 | __system___strrev_ret
2b854     2D 00 64 FD | 	ret
2b858                 | 
2b858                 | __system___fmtpad
2b858     06 4A 05 F6 | 	mov	COUNT_, #6
2b85c     A8 00 A0 FD | 	call	#pushregs_
2b860     09 27 02 F6 | 	mov	local01, arg01
2b864     0A 29 02 F6 | 	mov	local02, arg02
2b868     0B 2B 02 F6 | 	mov	local03, arg03
2b86c     14 13 EA F8 | 	getbyte	arg01, local02, #1
2b870     16 28 46 F0 | 	shr	local02, #22
2b874     03 28 0E F5 | 	and	local02, #3 wz
2b878     00 2C 06 F6 | 	mov	local04, #0
2b87c     01 28 06 A6 |  if_e	mov	local02, #1
2b880     0C 29 CA F7 | 	test	local02, arg04 wz
2b884     00 FA 05 A6 |  if_e	mov	result1, #0
2b888     88 00 90 AD |  if_e	jmp	#LR__4123
2b88c     09 2B C2 F2 | 	subr	local03, arg01
2b890     01 2A 56 F2 | 	cmps	local03, #1 wc
2b894     00 FA 05 C6 |  if_b	mov	result1, #0
2b898     78 00 90 CD |  if_b	jmp	#LR__4123
2b89c     03 28 0E F2 | 	cmp	local02, #3 wz
2b8a0     18 00 90 5D |  if_ne	jmp	#LR__4120
2b8a4     01 18 0E F2 | 	cmp	arg04, #1 wz
2b8a8     6E 28 62 FD | 	wrz	local02
2b8ac     14 2B 02 F1 | 	add	local03, local02
2b8b0     15 2B 52 F6 | 	abs	local03, local03 wc
2b8b4     01 2A 46 F0 | 	shr	local03, #1
2b8b8     15 2B 82 F6 | 	negc	local03, local03
2b8bc                 | LR__4120
2b8bc     01 2A 56 F2 | 	cmps	local03, #1 wc
2b8c0     4C 00 90 CD |  if_b	jmp	#LR__4122
2b8c4     15 2F 02 F6 | 	mov	local05, local03
2b8c8                 | LR__4121
2b8c8     13 29 02 F6 | 	mov	local02, local01
2b8cc     13 31 02 F6 | 	mov	local06, local01
2b8d0     13 28 46 F7 | 	zerox	local02, #19
2b8d4     14 30 46 F0 | 	shr	local06, #20
2b8d8     02 30 66 F0 | 	shl	local06, #2
2b8dc     ED 30 02 F1 | 	add	local06, __methods__
2b8e0     18 31 02 FB | 	rdlong	local06, local06
2b8e4     20 12 06 F6 | 	mov	arg01, #32
2b8e8     F2 2A 02 F6 | 	mov	local03, objptr
2b8ec     14 E5 01 F6 | 	mov	objptr, local02
2b8f0     2D 30 62 FD | 	call	local06
2b8f4     15 E5 01 F6 | 	mov	objptr, local03
2b8f8     FD 30 02 F6 | 	mov	local06, result1
2b8fc     00 30 56 F2 | 	cmps	local06, #0 wc
2b900     18 FB 01 C6 |  if_b	mov	result1, local06
2b904     0C 00 90 CD |  if_b	jmp	#LR__4123
2b908     18 2D 02 F1 | 	add	local04, local06
2b90c     EE 2F 6E FB | 	djnz	local05, #LR__4121
2b910                 | LR__4122
2b910     16 FB 01 F6 | 	mov	result1, local04
2b914                 | LR__4123
2b914     A7 F0 03 F6 | 	mov	ptra, fp
2b918     B2 00 A0 FD | 	call	#popregs_
2b91c                 | __system___fmtpad_ret
2b91c     2D 00 64 FD | 	ret
2b920                 | 
2b920                 | __system___uitoa
2b920     04 4A 05 F6 | 	mov	COUNT_, #4
2b924     A8 00 A0 FD | 	call	#pushregs_
2b928     09 27 02 F6 | 	mov	local01, arg01
2b92c     00 1A 4E F2 | 	cmps	arg05, #0 wz
2b930     13 1B 02 F6 | 	mov	arg05, local01
2b934     00 28 06 F6 | 	mov	local02, #0
2b938     37 2A 06 56 |  if_ne	mov	local03, #55
2b93c     57 2A 06 A6 |  if_e	mov	local03, #87
2b940                 | LR__4130
2b940     0B 15 12 FD | 	qdiv	arg02, arg03
2b944     19 2C 62 FD | 	getqy	local04
2b948     0B 15 12 FD | 	qdiv	arg02, arg03
2b94c     0A 2C 16 F2 | 	cmp	local04, #10 wc
2b950     30 2C 06 C1 |  if_b	add	local04, #48
2b954     15 2D 02 31 |  if_ae	add	local04, local03
2b958     0D 2D 42 FC | 	wrbyte	local04, arg05
2b95c     01 1A 06 F1 | 	add	arg05, #1
2b960     01 28 06 F1 | 	add	local02, #1
2b964     18 14 62 FD | 	getqx	arg02
2b968     00 14 0E F2 | 	cmp	arg02, #0 wz
2b96c     D0 FF 9F 5D |  if_ne	jmp	#LR__4130
2b970     0C 29 12 F2 | 	cmp	local02, arg04 wc
2b974     C8 FF 9F CD |  if_b	jmp	#LR__4130
2b978     0D 01 48 FC | 	wrbyte	#0, arg05
2b97c     13 13 02 F6 | 	mov	arg01, local01
2b980     8C FE BF FD | 	call	#__system___strrev
2b984     14 FB 01 F6 | 	mov	result1, local02
2b988     A7 F0 03 F6 | 	mov	ptra, fp
2b98c     B2 00 A0 FD | 	call	#popregs_
2b990                 | __system___uitoa_ret
2b990     2D 00 64 FD | 	ret
2b994                 | 
2b994                 | __system__disassemble_0560
2b994     10 4A 05 F6 | 	mov	COUNT_, #16
2b998     A8 00 A0 FD | 	call	#pushregs_
2b99c     09 27 02 F6 | 	mov	local01, arg01
2b9a0     0A 29 02 F6 | 	mov	local02, arg02
2b9a4     0B 2B 02 F6 | 	mov	local03, arg03
2b9a8     0C 2D 02 F6 | 	mov	local04, arg04
2b9ac     0D 2F 02 F6 | 	mov	local05, arg05
2b9b0     17 13 52 F6 | 	abs	arg01, local05 wc
2b9b4     1F 30 C6 C9 |  if_b	decod	local06, #31
2b9b8     00 30 06 36 |  if_ae	mov	local06, #0
2b9bc     CC CF BF FD | 	call	#__system___float_fromuns
2b9c0     18 FB 61 F5 | 	xor	result1, local06
2b9c4     FD 32 02 F6 | 	mov	local07, result1
2b9c8     00 34 06 F6 | 	mov	local08, #0
2b9cc     13 13 02 F6 | 	mov	arg01, local01
2b9d0     00 14 06 F6 | 	mov	arg02, #0
2b9d4     01 16 06 F6 | 	mov	arg03, #1
2b9d8     E8 D7 BF FD | 	call	#__system___float_cmp
2b9dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2b9e0     00 36 06 A6 |  if_e	mov	local09, #0
2b9e4     14 01 68 AC |  if_e	wrlong	#0, local02
2b9e8     15 37 62 AC |  if_e	wrlong	local09, local03
2b9ec     8C 01 90 AD |  if_e	jmp	#LR__4152
2b9f0     13 13 02 F6 | 	mov	arg01, local01
2b9f4     BC DC BF FD | 	call	#__system____builtin_ilogb
2b9f8     FD 38 02 F6 | 	mov	local10, result1
2b9fc     0A 2E 0E F2 | 	cmp	local05, #10 wz
2ba00     24 00 90 5D |  if_ne	jmp	#LR__4140
2ba04     1C 37 02 F6 | 	mov	local09, local10
2ba08     01 36 66 F0 | 	shl	local09, #1
2ba0c     1C 37 02 F1 | 	add	local09, local10
2ba10     1B 39 52 F6 | 	abs	local10, local09 wc
2ba14     0A 38 16 FD | 	qdiv	local10, #10
2ba18     09 3A 06 F6 | 	mov	local11, #9
2ba1c     18 38 62 FD | 	getqx	local10
2ba20     1C 39 82 F6 | 	negc	local10, local10
2ba24     04 00 90 FD | 	jmp	#LR__4141
2ba28                 | LR__4140
2ba28     18 3A 06 F6 | 	mov	local11, #24
2ba2c                 | LR__4141
2ba2c                 | LR__4142
2ba2c     08 34 56 F2 | 	cmps	local08, #8 wc
2ba30     01 34 06 F1 | 	add	local08, #1
2ba34     60 00 90 3D |  if_ae	jmp	#LR__4143
2ba38     00 C0 1F FF 
2ba3c     00 12 06 F6 | 	mov	arg01, ##1065353216
2ba40     19 15 02 F6 | 	mov	arg02, local07
2ba44     1C 17 02 F6 | 	mov	arg03, local10
2ba48     4C E3 BF FD | 	call	#__system___float_pow_n
2ba4c     FD 14 02 F6 | 	mov	arg02, result1
2ba50     13 13 02 F6 | 	mov	arg01, local01
2ba54     3C D5 BF FD | 	call	#__system___float_div
2ba58     FD 3C 02 F6 | 	mov	local12, result1
2ba5c     1E 13 02 F6 | 	mov	arg01, local12
2ba60     00 C0 1F FF 
2ba64     00 14 06 F6 | 	mov	arg02, ##1065353216
2ba68     01 16 06 F6 | 	mov	arg03, #1
2ba6c     54 D7 BF FD | 	call	#__system___float_cmp
2ba70     00 FA 55 F2 | 	cmps	result1, #0 wc
2ba74     01 38 86 C1 |  if_b	sub	local10, #1
2ba78     B0 FF 9F CD |  if_b	jmp	#LR__4142
2ba7c     19 15 02 F6 | 	mov	arg02, local07
2ba80     1E 13 02 F6 | 	mov	arg01, local12
2ba84     01 16 66 F6 | 	neg	arg03, #1
2ba88     38 D7 BF FD | 	call	#__system___float_cmp
2ba8c     00 FA 55 F2 | 	cmps	result1, #0 wc
2ba90     01 38 06 31 |  if_ae	add	local10, #1
2ba94     94 FF 9F 3D |  if_ae	jmp	#LR__4142
2ba98                 | LR__4143
2ba98     1E 13 02 F6 | 	mov	arg01, local12
2ba9c     14 DC BF FD | 	call	#__system____builtin_ilogb
2baa0     FD 3E 02 F6 | 	mov	local13, result1
2baa4     1E 41 02 F6 | 	mov	local14, local12
2baa8     17 41 06 F4 | 	bitl	local14, #279
2baac     17 40 26 F4 | 	bith	local14, #23
2bab0     1F 41 62 F0 | 	shl	local14, local13
2bab4     02 2E 0E F2 | 	cmp	local05, #2 wz
2bab8     02 2C 66 A0 |  if_e	shl	local04, #2
2babc     00 42 06 F6 | 	mov	local15, #0
2bac0     00 2C 56 F2 | 	cmps	local04, #0 wc
2bac4     10 00 90 3D |  if_ae	jmp	#LR__4144
2bac8     1C 2D C2 F2 | 	subr	local04, local10
2bacc     00 2C 56 F2 | 	cmps	local04, #0 wc
2bad0     A0 00 90 CD |  if_b	jmp	#LR__4151
2bad4     04 00 90 FD | 	jmp	#LR__4145
2bad8                 | LR__4144
2bad8     01 2C 06 F1 | 	add	local04, #1
2badc                 | LR__4145
2badc     1D 2D 7A F3 | 	fles	local04, local11 wcz
2bae0     01 44 06 F6 | 	mov	local16, #1
2bae4     97 22 48 FB | 	callpa	#(@LR__4147-@LR__4146)>>2,fcache_load_ptr_
2bae8                 | LR__4146
2bae8     00 40 00 FF 
2baec     00 42 16 F2 | 	cmp	local15, ##8388608 wc
2baf0     38 00 90 3D |  if_ae	jmp	#LR__4148
2baf4     01 2C 56 F2 | 	cmps	local04, #1 wc
2baf8     01 2C 86 F1 | 	sub	local04, #1
2bafc     2C 00 90 CD |  if_b	jmp	#LR__4148
2bb00     17 43 02 FD | 	qmul	local15, local05
2bb04     20 3F 02 F6 | 	mov	local13, local14
2bb08     17 3E 46 F0 | 	shr	local13, #23
2bb0c     17 41 06 F4 | 	bitl	local14, #279
2bb10     18 42 62 FD | 	getqx	local15
2bb14     17 45 02 FD | 	qmul	local16, local05
2bb18     18 44 62 FD | 	getqx	local16
2bb1c     17 41 02 FD | 	qmul	local14, local05
2bb20     1F 43 02 F1 | 	add	local15, local13
2bb24     18 40 62 FD | 	getqx	local14
2bb28     BC FF 9F FD | 	jmp	#LR__4146
2bb2c                 | LR__4147
2bb2c                 | LR__4148
2bb2c     17 37 02 F6 | 	mov	local09, local05
2bb30     17 36 66 F0 | 	shl	local09, #23
2bb34     1B 3F 52 F6 | 	abs	local13, local09 wc
2bb38     01 3E 46 F0 | 	shr	local13, #1
2bb3c     1F 3F 82 F6 | 	negc	local13, local13
2bb40     1F 41 1A F2 | 	cmp	local14, local13 wcz
2bb44     20 00 90 1D |  if_a	jmp	#LR__4149
2bb48     17 2E 66 F0 | 	shl	local05, #23
2bb4c     17 3F 52 F6 | 	abs	local13, local05 wc
2bb50     01 3E 46 F0 | 	shr	local13, #1
2bb54     1F 3F 82 F6 | 	negc	local13, local13
2bb58     1F 41 0A F2 | 	cmp	local14, local13 wz
2bb5c     14 00 90 5D |  if_ne	jmp	#LR__4150
2bb60     01 42 CE F7 | 	test	local15, #1 wz
2bb64     0C 00 90 AD |  if_e	jmp	#LR__4150
2bb68                 | LR__4149
2bb68     01 42 06 F1 | 	add	local15, #1
2bb6c     22 43 0A F2 | 	cmp	local15, local16 wz
2bb70     01 38 06 A1 |  if_e	add	local10, #1
2bb74                 | LR__4150
2bb74                 | LR__4151
2bb74     14 43 62 FC | 	wrlong	local15, local02
2bb78     15 39 62 FC | 	wrlong	local10, local03
2bb7c                 | LR__4152
2bb7c     A7 F0 03 F6 | 	mov	ptra, fp
2bb80     B2 00 A0 FD | 	call	#popregs_
2bb84                 | __system__disassemble_0560_ret
2bb84     2D 00 64 FD | 	ret
2bb88                 | 
2bb88                 | __system__emitsign_0562
2bb88     00 FA 05 F6 | 	mov	result1, #0
2bb8c     00 14 0E F2 | 	cmp	arg02, #0 wz
2bb90     09 01 02 56 |  if_ne	mov	_var01, arg01
2bb94     01 12 06 51 |  if_ne	add	arg01, #1
2bb98     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2bb9c     01 FA 05 56 |  if_ne	mov	result1, #1
2bba0     00 16 0E F2 | 	cmp	arg03, #0 wz
2bba4     09 61 48 5C |  if_ne	wrbyte	#48, arg01
2bba8     01 12 06 51 |  if_ne	add	arg01, #1
2bbac     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2bbb0     02 FA 05 51 |  if_ne	add	result1, #2
2bbb4                 | __system__emitsign_0562_ret
2bbb4     2D 00 64 FD | 	ret
2bbb8                 | 
2bbb8                 | __system___gettxfunc
2bbb8     01 4A 05 F6 | 	mov	COUNT_, #1
2bbbc     A8 00 A0 FD | 	call	#pushregs_
2bbc0     A0 F8 BF FD | 	call	#__system____getftab
2bbc4     FD 26 0A F6 | 	mov	local01, result1 wz
2bbc8     10 00 90 AD |  if_e	jmp	#LR__4160
2bbcc     08 26 06 F1 | 	add	local01, #8
2bbd0     13 15 0A FB | 	rdlong	arg02, local01 wz
2bbd4     08 26 86 F1 | 	sub	local01, #8
2bbd8     08 00 90 5D |  if_ne	jmp	#LR__4161
2bbdc                 | LR__4160
2bbdc     00 FA 05 F6 | 	mov	result1, #0
2bbe0     0C 00 90 FD | 	jmp	#LR__4162
2bbe4                 | LR__4161
2bbe4     00 10 05 FF 
2bbe8     00 26 46 F5 | 	or	local01, ##169869312
2bbec     13 FB 01 F6 | 	mov	result1, local01
2bbf0                 | LR__4162
2bbf0     A7 F0 03 F6 | 	mov	ptra, fp
2bbf4     B2 00 A0 FD | 	call	#popregs_
2bbf8                 | __system___gettxfunc_ret
2bbf8     2D 00 64 FD | 	ret
2bbfc                 | 
2bbfc                 | __system___getrxfunc
2bbfc     01 4A 05 F6 | 	mov	COUNT_, #1
2bc00     A8 00 A0 FD | 	call	#pushregs_
2bc04     5C F8 BF FD | 	call	#__system____getftab
2bc08     FD 26 0A F6 | 	mov	local01, result1 wz
2bc0c     10 00 90 AD |  if_e	jmp	#LR__4170
2bc10     08 26 06 F1 | 	add	local01, #8
2bc14     13 15 0A FB | 	rdlong	arg02, local01 wz
2bc18     08 26 86 F1 | 	sub	local01, #8
2bc1c     08 00 90 5D |  if_ne	jmp	#LR__4171
2bc20                 | LR__4170
2bc20     00 FA 05 F6 | 	mov	result1, #0
2bc24     0C 00 90 FD | 	jmp	#LR__4172
2bc28                 | LR__4171
2bc28     00 18 05 FF 
2bc2c     00 26 46 F5 | 	or	local01, ##170917888
2bc30     13 FB 01 F6 | 	mov	result1, local01
2bc34                 | LR__4172
2bc34     A7 F0 03 F6 | 	mov	ptra, fp
2bc38     B2 00 A0 FD | 	call	#popregs_
2bc3c                 | __system___getrxfunc_ret
2bc3c     2D 00 64 FD | 	ret
2bc40                 | 
2bc40                 | __system___getiolock_0602
2bc40     01 4A 05 F6 | 	mov	COUNT_, #1
2bc44     A8 00 A0 FD | 	call	#pushregs_
2bc48     18 F8 BF FD | 	call	#__system____getftab
2bc4c     FD 26 0A F6 | 	mov	local01, result1 wz
2bc50     10 00 90 AD |  if_e	jmp	#LR__4180
2bc54     08 26 06 F1 | 	add	local01, #8
2bc58     13 FB 09 FB | 	rdlong	result1, local01 wz
2bc5c     08 26 86 F1 | 	sub	local01, #8
2bc60     18 00 90 5D |  if_ne	jmp	#LR__4181
2bc64                 | LR__4180
2bc64     01 00 00 FF 
2bc68     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2bc6c     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2bc70     01 00 00 FF 
2bc74     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
2bc78     08 00 90 FD | 	jmp	#LR__4182
2bc7c                 | LR__4181
2bc7c     0C 26 06 F1 | 	add	local01, #12
2bc80     13 FB 01 F6 | 	mov	result1, local01
2bc84                 | LR__4182
2bc84     A7 F0 03 F6 | 	mov	ptra, fp
2bc88     B2 00 A0 FD | 	call	#popregs_
2bc8c                 | __system___getiolock_0602_ret
2bc8c     2D 00 64 FD | 	ret
2bc90                 | 
2bc90                 | __system____ScanForChar
2bc90     09 01 02 F6 | 	mov	_var01, arg01
2bc94     09 03 02 F6 | 	mov	_var02, arg01
2bc98     97 06 48 FB | 	callpa	#(@LR__4191-@LR__4190)>>2,fcache_load_ptr_
2bc9c                 | LR__4190
2bc9c     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2bca0     01 02 06 51 |  if_ne	add	_var02, #1
2bca4     F4 FF 9F 5D |  if_ne	jmp	#LR__4190
2bca8                 | LR__4191
2bca8     09 03 82 F1 | 	sub	_var02, arg01
2bcac     01 FB 01 F6 | 	mov	result1, _var02
2bcb0     FD 12 0A F6 | 	mov	arg01, result1 wz
2bcb4     00 FA 05 A6 |  if_e	mov	result1, #0
2bcb8     B8 00 90 AD |  if_e	jmp	#LR__4198
2bcbc     0A 05 02 F6 | 	mov	_var03, arg02
2bcc0     07 04 4E F7 | 	zerox	_var03, #7 wz
2bcc4     00 FA 05 A6 |  if_e	mov	result1, #0
2bcc8     A8 00 90 AD |  if_e	jmp	#LR__4198
2bccc     01 16 16 F2 | 	cmp	arg03, #1 wc
2bcd0     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2bcd4     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2bcd8     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2bcdc     94 00 90 4D |  if_c_and_nz	jmp	#LR__4198
2bce0     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2bce4     10 00 90 ED |  if_be	jmp	#LR__4192
2bce8     00 18 0E F2 | 	cmp	arg04, #0 wz
2bcec     00 FA 05 A6 |  if_e	mov	result1, #0
2bcf0     80 00 90 AD |  if_e	jmp	#LR__4198
2bcf4     09 17 02 F6 | 	mov	arg03, arg01
2bcf8                 | LR__4192
2bcf8     01 16 86 F1 | 	sub	arg03, #1
2bcfc     00 18 0E F2 | 	cmp	arg04, #0 wz
2bd00     38 00 90 5D |  if_ne	jmp	#LR__4194
2bd04     0B 07 02 F6 | 	mov	_var04, arg03
2bd08     09 09 02 F6 | 	mov	_var05, arg01
2bd0c                 | LR__4193
2bd0c     04 07 12 F2 | 	cmp	_var04, _var05 wc
2bd10     5C 00 90 3D |  if_ae	jmp	#LR__4197
2bd14     03 05 02 F6 | 	mov	_var03, _var04
2bd18     00 05 02 F1 | 	add	_var03, _var01
2bd1c     02 05 C2 FA | 	rdbyte	_var03, _var03
2bd20     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2bd24     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2bd28     01 06 06 A1 |  if_e	add	_var04, #1
2bd2c     03 FB 01 A6 |  if_e	mov	result1, _var04
2bd30     40 00 90 AD |  if_e	jmp	#LR__4198
2bd34     01 06 06 F1 | 	add	_var04, #1
2bd38     D0 FF 9F FD | 	jmp	#LR__4193
2bd3c                 | LR__4194
2bd3c     0B 07 02 F6 | 	mov	_var04, arg03
2bd40                 | LR__4195
2bd40     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2bd44     28 00 90 1D |  if_a	jmp	#LR__4196
2bd48     03 09 02 F6 | 	mov	_var05, _var04
2bd4c     00 09 02 F1 | 	add	_var05, _var01
2bd50     04 05 C2 FA | 	rdbyte	_var03, _var05
2bd54     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2bd58     04 05 0A F2 | 	cmp	_var03, _var05 wz
2bd5c     01 06 06 A1 |  if_e	add	_var04, #1
2bd60     03 FB 01 A6 |  if_e	mov	result1, _var04
2bd64     0C 00 90 AD |  if_e	jmp	#LR__4198
2bd68     01 06 86 F1 | 	sub	_var04, #1
2bd6c     D0 FF 9F FD | 	jmp	#LR__4195
2bd70                 | LR__4196
2bd70                 | LR__4197
2bd70     00 FA 05 F6 | 	mov	result1, #0
2bd74                 | LR__4198
2bd74                 | __system____ScanForChar_ret
2bd74     2D 00 64 FD | 	ret
2bd78                 | 
2bd78                 | __system___basic_dir
2bd78     05 4A 05 F6 | 	mov	COUNT_, #5
2bd7c     A8 00 A0 FD | 	call	#pushregs_
2bd80     4C F0 07 F1 | 	add	ptra, #76
2bd84     04 4E 05 F1 | 	add	fp, #4
2bd88     A7 12 62 FC | 	wrlong	arg01, fp
2bd8c     04 4E 05 F1 | 	add	fp, #4
2bd90     A7 14 62 FC | 	wrlong	arg02, fp
2bd94     04 4E 85 F1 | 	sub	fp, #4
2bd98     A7 14 0A FB | 	rdlong	arg02, fp wz
2bd9c     04 4E 85 F1 | 	sub	fp, #4
2bda0     04 4E 05 51 |  if_ne	add	fp, #4
2bda4     A7 26 02 5B |  if_ne	rdlong	local01, fp
2bda8     04 4E 85 51 |  if_ne	sub	fp, #4
2bdac     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
2bdb0     70 00 90 AD |  if_e	jmp	#LR__4200
2bdb4     03 00 00 FF 
2bdb8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2bdbc     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2bdc0     03 00 00 FF 
2bdc4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2bdc8     03 00 00 5F 
2bdcc     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
2bdd0     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2bdd4     03 00 00 5F 
2bdd8     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2bddc     D8 E9 BF 5D |  if_ne	call	#__system__closedir
2bde0     AD 01 00 FF 
2bde4     90 12 06 F6 | 	mov	arg01, ##@LR__5368
2bde8     E0 E8 BF FD | 	call	#__system__opendir
2bdec     03 00 00 FF 
2bdf0     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2bdf4     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2bdf8     08 4E 05 F1 | 	add	fp, #8
2bdfc     A7 28 02 FB | 	rdlong	local02, fp
2be00     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2be04     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2be08     04 4E 85 F1 | 	sub	fp, #4
2be0c     A7 28 02 FB | 	rdlong	local02, fp
2be10     04 4E 85 F1 | 	sub	fp, #4
2be14     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2be18     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2be1c     03 00 00 FF 
2be20     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2be24                 | LR__4200
2be24     03 00 00 FF 
2be28     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2be2c     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2be30     03 00 00 FF 
2be34     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2be38     AD 01 00 AF 
2be3c     92 FA 05 A6 |  if_e	mov	result1, ##@LR__5369
2be40     84 02 90 AD |  if_e	jmp	#LR__4213
2be44                 | LR__4201
2be44     03 00 00 FF 
2be48     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2be4c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2be50     03 00 00 FF 
2be54     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2be58     D0 E9 BF FD | 	call	#__system__readdir
2be5c     0C 4E 05 F1 | 	add	fp, #12
2be60     A7 FA 61 FC | 	wrlong	result1, fp
2be64     0C 4E 85 F1 | 	sub	fp, #12
2be68     00 FA 0D F2 | 	cmp	result1, #0 wz
2be6c     38 00 90 5D |  if_ne	jmp	#LR__4202
2be70     03 00 00 FF 
2be74     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2be78     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2be7c     03 00 00 FF 
2be80     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2be84     30 E9 BF FD | 	call	#__system__closedir
2be88     03 00 00 FF 
2be8c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2be90     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2be94     03 00 00 FF 
2be98     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2be9c     AD 01 00 FF 
2bea0     94 FA 05 F6 | 	mov	result1, ##@LR__5370
2bea4     20 02 90 FD | 	jmp	#LR__4213
2bea8                 | LR__4202
2bea8     0C 4E 05 F1 | 	add	fp, #12
2beac     A7 12 02 FB | 	rdlong	arg01, fp
2beb0     0C 4E 85 F1 | 	sub	fp, #12
2beb4     03 00 00 FF 
2beb8     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2bebc     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2bec0     03 00 00 FF 
2bec4     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2bec8     10 09 B0 FD | 	call	#__system___pat_match
2becc     00 FA 0D F2 | 	cmp	result1, #0 wz
2bed0     70 FF 9F AD |  if_e	jmp	#LR__4201
2bed4     03 00 00 FF 
2bed8     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2bedc     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2bee0     03 00 00 FF 
2bee4     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2bee8     78 01 90 AD |  if_e	jmp	#LR__4209
2beec     0C 4E 05 F1 | 	add	fp, #12
2bef0     A7 12 02 FB | 	rdlong	arg01, fp
2bef4     04 4E 05 F1 | 	add	fp, #4
2bef8     A7 14 02 F6 | 	mov	arg02, fp
2befc     10 4E 85 F1 | 	sub	fp, #16
2bf00     2C F2 BF FD | 	call	#__system__stat
2bf04     40 4E 05 F1 | 	add	fp, #64
2bf08     A7 FA 61 FC | 	wrlong	result1, fp
2bf0c     40 4E 85 F1 | 	sub	fp, #64
2bf10     00 FA 0D F2 | 	cmp	result1, #0 wz
2bf14     AD 01 00 5F 
2bf18     96 FA 05 56 |  if_ne	mov	result1, ##@LR__5371
2bf1c     A8 01 90 5D |  if_ne	jmp	#LR__4213
2bf20     18 4E 05 F1 | 	add	fp, #24
2bf24     A7 28 02 FB | 	rdlong	local02, fp
2bf28     78 00 00 FF 
2bf2c     00 28 06 F5 | 	and	local02, ##61440
2bf30     2C 4E 05 F1 | 	add	fp, #44
2bf34     A7 28 62 FC | 	wrlong	local02, fp
2bf38     38 4E 85 F1 | 	sub	fp, #56
2bf3c     A7 28 02 FB | 	rdlong	local02, fp
2bf40     0C 4E 85 F1 | 	sub	fp, #12
2bf44     14 29 C2 FA | 	rdbyte	local02, local02
2bf48     2E 28 0E F2 | 	cmp	local02, #46 wz
2bf4c     08 4E 05 A1 |  if_e	add	fp, #8
2bf50     A7 04 68 AC |  if_e	wrlong	#2, fp
2bf54     08 4E C5 F3 | 	sumz	fp, #8
2bf58     A7 00 68 5C |  if_ne	wrlong	#0, fp
2bf5c     08 4E 85 51 |  if_ne	sub	fp, #8
2bf60     44 4E 05 F1 | 	add	fp, #68
2bf64     A7 28 02 FB | 	rdlong	local02, fp
2bf68     44 4E 85 F1 | 	sub	fp, #68
2bf6c     08 00 00 FF 
2bf70     00 28 0E F2 | 	cmp	local02, ##4096 wz
2bf74     18 00 90 5D |  if_ne	jmp	#LR__4203
2bf78     08 4E 05 F1 | 	add	fp, #8
2bf7c     A7 28 02 FB | 	rdlong	local02, fp
2bf80     10 28 46 F5 | 	or	local02, #16
2bf84     A7 28 62 FC | 	wrlong	local02, fp
2bf88     08 4E 85 F1 | 	sub	fp, #8
2bf8c     AC 00 90 FD | 	jmp	#LR__4208
2bf90                 | LR__4203
2bf90     44 4E 05 F1 | 	add	fp, #68
2bf94     A7 28 02 FB | 	rdlong	local02, fp
2bf98     44 4E 85 F1 | 	sub	fp, #68
2bf9c     10 00 00 FF 
2bfa0     00 28 0E F2 | 	cmp	local02, ##8192 wz
2bfa4     44 4E 05 51 |  if_ne	add	fp, #68
2bfa8     A7 26 02 5B |  if_ne	rdlong	local01, fp
2bfac     44 4E 85 51 |  if_ne	sub	fp, #68
2bfb0     18 00 00 5F 
2bfb4     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
2bfb8     44 4E 05 51 |  if_ne	add	fp, #68
2bfbc     13 2B 02 56 |  if_ne	mov	local03, local01
2bfc0     44 4E 85 51 |  if_ne	sub	fp, #68
2bfc4     20 00 00 5F 
2bfc8     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
2bfcc     18 00 90 5D |  if_ne	jmp	#LR__4204
2bfd0     08 4E 05 F1 | 	add	fp, #8
2bfd4     A7 28 02 FB | 	rdlong	local02, fp
2bfd8     04 28 46 F5 | 	or	local02, #4
2bfdc     A7 28 62 FC | 	wrlong	local02, fp
2bfe0     08 4E 85 F1 | 	sub	fp, #8
2bfe4     54 00 90 FD | 	jmp	#LR__4207
2bfe8                 | LR__4204
2bfe8     18 4E 05 F1 | 	add	fp, #24
2bfec     A7 28 02 FB | 	rdlong	local02, fp
2bff0     18 4E 85 F1 | 	sub	fp, #24
2bff4     92 28 CE F7 | 	test	local02, #146 wz
2bff8     18 00 90 5D |  if_ne	jmp	#LR__4205
2bffc     08 4E 05 F1 | 	add	fp, #8
2c000     A7 28 02 FB | 	rdlong	local02, fp
2c004     01 28 46 F5 | 	or	local02, #1
2c008     A7 28 62 FC | 	wrlong	local02, fp
2c00c     08 4E 85 F1 | 	sub	fp, #8
2c010     28 00 90 FD | 	jmp	#LR__4206
2c014                 | LR__4205
2c014     44 4E 05 F1 | 	add	fp, #68
2c018     A7 2C 02 FB | 	rdlong	local04, fp
2c01c     44 4E 85 F1 | 	sub	fp, #68
2c020     08 00 00 FF 
2c024     00 2C 0E F2 | 	cmp	local04, ##4096 wz
2c028     08 4E 05 51 |  if_ne	add	fp, #8
2c02c     A7 2C 02 5B |  if_ne	rdlong	local04, fp
2c030     20 2C 46 55 |  if_ne	or	local04, #32
2c034     A7 2C 62 5C |  if_ne	wrlong	local04, fp
2c038     08 4E 85 51 |  if_ne	sub	fp, #8
2c03c                 | LR__4206
2c03c                 | LR__4207
2c03c                 | LR__4208
2c03c     08 4E 05 F1 | 	add	fp, #8
2c040     A7 2C 02 FB | 	rdlong	local04, fp
2c044     08 4E 85 F1 | 	sub	fp, #8
2c048     03 00 00 FF 
2c04c     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2c050     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2c054     03 00 00 FF 
2c058     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2c05c     13 2D CA F7 | 	test	local04, local01 wz
2c060     E0 FD 9F AD |  if_e	jmp	#LR__4201
2c064                 | LR__4209
2c064     0C 4E 05 F1 | 	add	fp, #12
2c068     A7 12 02 FB | 	rdlong	arg01, fp
2c06c     0C 4E 85 F1 | 	sub	fp, #12
2c070     09 2F 02 F6 | 	mov	local05, arg01
2c074     97 06 48 FB | 	callpa	#(@LR__4211-@LR__4210)>>2,fcache_load_ptr_
2c078                 | LR__4210
2c078     17 FB C9 FA | 	rdbyte	result1, local05 wz
2c07c     01 2E 06 51 |  if_ne	add	local05, #1
2c080     F4 FF 9F 5D |  if_ne	jmp	#LR__4210
2c084                 | LR__4211
2c084     17 13 C2 F2 | 	subr	arg01, local05
2c088     01 12 06 F1 | 	add	arg01, #1
2c08c     28 E0 BF FD | 	call	#__system___gc_alloc_managed
2c090     48 4E 05 F1 | 	add	fp, #72
2c094     A7 FA 61 FC | 	wrlong	result1, fp
2c098     48 4E 85 F1 | 	sub	fp, #72
2c09c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c0a0     18 00 90 AD |  if_e	jmp	#LR__4212
2c0a4     48 4E 05 F1 | 	add	fp, #72
2c0a8     A7 12 02 FB | 	rdlong	arg01, fp
2c0ac     3C 4E 85 F1 | 	sub	fp, #60
2c0b0     A7 14 02 FB | 	rdlong	arg02, fp
2c0b4     0C 4E 85 F1 | 	sub	fp, #12
2c0b8     10 9E BF FD | 	call	#__system____builtin_strcpy
2c0bc                 | LR__4212
2c0bc     48 4E 05 F1 | 	add	fp, #72
2c0c0     A7 FA 01 FB | 	rdlong	result1, fp
2c0c4     48 4E 85 F1 | 	sub	fp, #72
2c0c8                 | LR__4213
2c0c8     A7 F0 03 F6 | 	mov	ptra, fp
2c0cc     B2 00 A0 FD | 	call	#popregs_
2c0d0                 | __system___basic_dir_ret
2c0d0     2D 00 64 FD | 	ret
2c0d4                 | 
2c0d4                 | __system__pack_0674
2c0d4     09 01 02 F6 | 	mov	_var01, arg01
2c0d8     7F 16 06 F1 | 	add	arg03, #127
2c0dc     04 18 CE F7 | 	test	arg04, #4 wz
2c0e0     10 00 90 AD |  if_e	jmp	#LR__4220
2c0e4     00 00 0E F2 | 	cmp	_var01, #0 wz
2c0e8     16 00 C6 A9 |  if_e	decod	_var01, #22
2c0ec     F7 00 26 F4 | 	bith	_var01, #247
2c0f0     B4 00 90 FD | 	jmp	#LR__4229
2c0f4                 | LR__4220
2c0f4     02 18 CE F7 | 	test	arg04, #2 wz
2c0f8     00 C0 3F 5F 
2c0fc     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2c100     00 14 06 56 |  if_ne	mov	arg02, #0
2c104     A0 00 90 5D |  if_ne	jmp	#LR__4228
2c108     08 18 CE F7 | 	test	arg04, #8 wz
2c10c     00 00 06 56 |  if_ne	mov	_var01, #0
2c110     94 00 90 5D |  if_ne	jmp	#LR__4227
2c114     FF 16 56 F2 | 	cmps	arg03, #255 wc
2c118     00 C0 3F 3F 
2c11c     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2c120     00 14 06 36 |  if_ae	mov	arg02, #0
2c124     80 00 90 3D |  if_ae	jmp	#LR__4226
2c128     01 16 56 F2 | 	cmps	arg03, #1 wc
2c12c     6C 00 90 3D |  if_ae	jmp	#LR__4224
2c130     01 14 46 F0 | 	shr	arg02, #1
2c134     00 03 02 F6 | 	mov	_var02, _var01
2c138     01 02 06 F5 | 	and	_var02, #1
2c13c     1F 02 66 F0 | 	shl	_var02, #31
2c140     01 15 42 F5 | 	or	arg02, _var02
2c144     01 00 46 F0 | 	shr	_var01, #1
2c148     97 1E 48 FB | 	callpa	#(@LR__4222-@LR__4221)>>2,fcache_load_ptr_
2c14c                 | LR__4221
2c14c     00 16 56 F2 | 	cmps	arg03, #0 wc
2c150     34 00 90 3D |  if_ae	jmp	#LR__4223
2c154     00 00 0E F2 | 	cmp	_var01, #0 wz
2c158     2C 00 90 AD |  if_e	jmp	#LR__4223
2c15c     0A 13 02 F6 | 	mov	arg01, arg02
2c160     01 12 06 F5 | 	and	arg01, #1
2c164     01 16 06 F1 | 	add	arg03, #1
2c168     01 14 46 F0 | 	shr	arg02, #1
2c16c     00 03 02 F6 | 	mov	_var02, _var01
2c170     01 02 06 F5 | 	and	_var02, #1
2c174     1F 02 66 F0 | 	shl	_var02, #31
2c178     01 15 42 F5 | 	or	arg02, _var02
2c17c     09 15 42 F5 | 	or	arg02, arg01
2c180     01 00 46 F0 | 	shr	_var01, #1
2c184     C4 FF 9F FD | 	jmp	#LR__4221
2c188                 | LR__4222
2c188                 | LR__4223
2c188     00 16 56 F2 | 	cmps	arg03, #0 wc
2c18c     18 00 90 3D |  if_ae	jmp	#LR__4225
2c190     00 14 0E F2 | 	cmp	arg02, #0 wz
2c194     6F 14 62 FD | 	wrnz	arg02
2c198     0C 00 90 FD | 	jmp	#LR__4225
2c19c                 | LR__4224
2c19c     17 01 06 F4 | 	bitl	_var01, #279
2c1a0     17 16 66 F0 | 	shl	arg03, #23
2c1a4     0B 01 42 F5 | 	or	_var01, arg03
2c1a8                 | LR__4225
2c1a8                 | LR__4226
2c1a8                 | LR__4227
2c1a8                 | LR__4228
2c1a8                 | LR__4229
2c1a8     01 00 CE F7 | 	test	_var01, #1 wz
2c1ac     01 14 46 55 |  if_ne	or	arg02, #1
2c1b0     0A 17 02 F6 | 	mov	arg03, arg02
2c1b4     00 02 06 F6 | 	mov	_var02, #0
2c1b8     FF FF 3F FF 
2c1bc     FF 15 06 F1 | 	add	arg02, ##2147483647
2c1c0     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2c1c4     01 02 06 C6 |  if_b	mov	_var02, #1
2c1c8     01 01 02 F1 | 	add	_var01, _var02
2c1cc     01 18 CE F7 | 	test	arg04, #1 wz
2c1d0     1F 00 26 54 |  if_ne	bith	_var01, #31
2c1d4     00 FB 01 F6 | 	mov	result1, _var01
2c1d8                 | __system__pack_0674_ret
2c1d8     2D 00 64 FD | 	ret
2c1dc                 | 
2c1dc                 | __system___rxtxioctl_0764
2c1dc     00 15 0E F2 | 	cmp	arg02, #256 wz
2c1e0     0C 00 90 AD |  if_e	jmp	#LR__4230
2c1e4     01 15 0E F2 | 	cmp	arg02, #257 wz
2c1e8     1C 00 90 AD |  if_e	jmp	#LR__4231
2c1ec     30 00 90 FD | 	jmp	#LR__4232
2c1f0                 | LR__4230
2c1f0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2c1f4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2c1f8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2c1fc     0B FB 61 FC | 	wrlong	result1, arg03
2c200     00 FA 05 F6 | 	mov	result1, #0
2c204     28 00 90 FD | 	jmp	#LR__4233
2c208                 | LR__4231
2c208     0B 13 02 FB | 	rdlong	arg01, arg03
2c20c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2c210     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2c214     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2c218     00 FA 05 F6 | 	mov	result1, #0
2c21c     10 00 90 FD | 	jmp	#LR__4233
2c220                 | LR__4232
2c220     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c224     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2c228     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c22c     01 FA 65 F6 | 	neg	result1, #1
2c230                 | LR__4233
2c230                 | __system___rxtxioctl_0764_ret
2c230     2D 00 64 FD | 	ret
2c234                 | 
2c234                 | __system____dummy_flush_0765
2c234     00 FA 05 F6 | 	mov	result1, #0
2c238                 | __system____dummy_flush_0765_ret
2c238     2D 00 64 FD | 	ret
2c23c                 | 
2c23c                 | __system___vfswrite
2c23c     09 4A 05 F6 | 	mov	COUNT_, #9
2c240     A8 00 A0 FD | 	call	#pushregs_
2c244     09 27 02 F6 | 	mov	local01, arg01
2c248     0A 29 02 F6 | 	mov	local02, arg02
2c24c     0B 2B 02 F6 | 	mov	local03, arg03
2c250     14 2D 02 F6 | 	mov	local04, local02
2c254     08 26 06 F1 | 	add	local01, #8
2c258     13 13 02 FB | 	rdlong	arg01, local01
2c25c     08 26 86 F1 | 	sub	local01, #8
2c260     02 12 CE F7 | 	test	arg01, #2 wz
2c264     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c268     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2c26c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c270     01 FA 65 A6 |  if_e	neg	result1, #1
2c274     80 01 90 AD |  if_e	jmp	#LR__4246
2c278     08 26 06 F1 | 	add	local01, #8
2c27c     13 FB 01 FB | 	rdlong	result1, local01
2c280     08 26 86 F1 | 	sub	local01, #8
2c284     40 FA CD F7 | 	test	result1, #64 wz
2c288     68 00 90 AD |  if_e	jmp	#LR__4241
2c28c     08 26 06 F1 | 	add	local01, #8
2c290     13 15 02 FB | 	rdlong	arg02, local01
2c294     08 26 86 F1 | 	sub	local01, #8
2c298     80 14 CE F7 | 	test	arg02, #128 wz
2c29c     54 00 90 AD |  if_e	jmp	#LR__4240
2c2a0     30 26 06 F1 | 	add	local01, #48
2c2a4     13 2F 02 FB | 	rdlong	local05, local01
2c2a8     17 31 02 F6 | 	mov	local06, local05
2c2ac     30 26 86 F1 | 	sub	local01, #48
2c2b0     13 30 46 F7 | 	zerox	local06, #19
2c2b4     14 2E 46 F0 | 	shr	local05, #20
2c2b8     02 2E 66 F0 | 	shl	local05, #2
2c2bc     ED 2E 02 F1 | 	add	local05, __methods__
2c2c0     17 2F 02 FB | 	rdlong	local05, local05
2c2c4     13 13 02 F6 | 	mov	arg01, local01
2c2c8     00 14 06 F6 | 	mov	arg02, #0
2c2cc     02 16 06 F6 | 	mov	arg03, #2
2c2d0     F2 32 02 F6 | 	mov	local07, objptr
2c2d4     18 E5 01 F6 | 	mov	objptr, local06
2c2d8     2D 2E 62 FD | 	call	local05
2c2dc     19 E5 01 F6 | 	mov	objptr, local07
2c2e0     08 26 06 F1 | 	add	local01, #8
2c2e4     13 33 02 FB | 	rdlong	local07, local01
2c2e8     80 32 26 F5 | 	andn	local07, #128
2c2ec     13 33 62 FC | 	wrlong	local07, local01
2c2f0     08 26 86 F1 | 	sub	local01, #8
2c2f4                 | LR__4240
2c2f4                 | LR__4241
2c2f4     18 26 06 F1 | 	add	local01, #24
2c2f8     13 33 0A FB | 	rdlong	local07, local01 wz
2c2fc     18 26 86 F1 | 	sub	local01, #24
2c300     80 00 90 AD |  if_e	jmp	#LR__4243
2c304     18 26 06 F1 | 	add	local01, #24
2c308     13 2F 02 FB | 	rdlong	local05, local01
2c30c     17 31 02 F6 | 	mov	local06, local05
2c310     18 26 86 F1 | 	sub	local01, #24
2c314     13 30 46 F7 | 	zerox	local06, #19
2c318     14 2E 46 F0 | 	shr	local05, #20
2c31c     02 2E 66 F0 | 	shl	local05, #2
2c320     ED 2E 02 F1 | 	add	local05, __methods__
2c324     17 2F 02 FB | 	rdlong	local05, local05
2c328     14 15 02 F6 | 	mov	arg02, local02
2c32c     15 17 02 F6 | 	mov	arg03, local03
2c330     13 13 02 F6 | 	mov	arg01, local01
2c334     F2 32 02 F6 | 	mov	local07, objptr
2c338     18 E5 01 F6 | 	mov	objptr, local06
2c33c     2D 2E 62 FD | 	call	local05
2c340     19 E5 01 F6 | 	mov	objptr, local07
2c344     FD 34 02 F6 | 	mov	local08, result1
2c348     00 34 56 F2 | 	cmps	local08, #0 wc
2c34c     2C 00 90 3D |  if_ae	jmp	#LR__4242
2c350     08 26 06 F1 | 	add	local01, #8
2c354     13 33 02 FB | 	rdlong	local07, local01
2c358     20 32 46 F5 | 	or	local07, #32
2c35c     13 33 62 FC | 	wrlong	local07, local01
2c360     00 34 4E F2 | 	cmps	local08, #0 wz
2c364     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c368     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2c36c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c370     01 FA 65 56 |  if_ne	neg	result1, #1
2c374     00 FA 05 A6 |  if_e	mov	result1, #0
2c378     7C 00 90 FD | 	jmp	#LR__4246
2c37c                 | LR__4242
2c37c     1A FB 01 F6 | 	mov	result1, local08
2c380     74 00 90 FD | 	jmp	#LR__4246
2c384                 | LR__4243
2c384     1C 26 06 F1 | 	add	local01, #28
2c388     13 37 0A FB | 	rdlong	local09, local01 wz
2c38c     1C 26 86 F1 | 	sub	local01, #28
2c390     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c394     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2c398     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c39c     01 FA 65 A6 |  if_e	neg	result1, #1
2c3a0     54 00 90 AD |  if_e	jmp	#LR__4246
2c3a4     00 34 06 F6 | 	mov	local08, #0
2c3a8                 | LR__4244
2c3a8     01 2A 16 F2 | 	cmp	local03, #1 wc
2c3ac     44 00 90 CD |  if_b	jmp	#LR__4245
2c3b0     1B 31 02 F6 | 	mov	local06, local09
2c3b4     1B 2F 02 F6 | 	mov	local05, local09
2c3b8     13 30 46 F7 | 	zerox	local06, #19
2c3bc     14 2E 46 F0 | 	shr	local05, #20
2c3c0     02 2E 66 F0 | 	shl	local05, #2
2c3c4     ED 2E 02 F1 | 	add	local05, __methods__
2c3c8     17 2F 02 FB | 	rdlong	local05, local05
2c3cc     16 13 C2 FA | 	rdbyte	arg01, local04
2c3d0     13 15 02 F6 | 	mov	arg02, local01
2c3d4     F2 32 02 F6 | 	mov	local07, objptr
2c3d8     18 E5 01 F6 | 	mov	objptr, local06
2c3dc     01 2C 06 F1 | 	add	local04, #1
2c3e0     2D 2E 62 FD | 	call	local05
2c3e4     19 E5 01 F6 | 	mov	objptr, local07
2c3e8     FD 34 02 F1 | 	add	local08, result1
2c3ec     01 2A 86 F1 | 	sub	local03, #1
2c3f0     B4 FF 9F FD | 	jmp	#LR__4244
2c3f4                 | LR__4245
2c3f4     1A FB 01 F6 | 	mov	result1, local08
2c3f8                 | LR__4246
2c3f8     A7 F0 03 F6 | 	mov	ptra, fp
2c3fc     B2 00 A0 FD | 	call	#popregs_
2c400                 | __system___vfswrite_ret
2c400     2D 00 64 FD | 	ret
2c404                 | 
2c404                 | __system___vfsread
2c404     03 4A 05 F6 | 	mov	COUNT_, #3
2c408     A8 00 A0 FD | 	call	#pushregs_
2c40c     28 F0 07 F1 | 	add	ptra, #40
2c410     04 4E 05 F1 | 	add	fp, #4
2c414     A7 12 62 FC | 	wrlong	arg01, fp
2c418     04 4E 05 F1 | 	add	fp, #4
2c41c     A7 14 62 FC | 	wrlong	arg02, fp
2c420     04 4E 05 F1 | 	add	fp, #4
2c424     A7 16 62 FC | 	wrlong	arg03, fp
2c428     04 4E 85 F1 | 	sub	fp, #4
2c42c     A7 FA 01 FB | 	rdlong	result1, fp
2c430     14 4E 05 F1 | 	add	fp, #20
2c434     A7 FA 61 FC | 	wrlong	result1, fp
2c438     04 4E 05 F1 | 	add	fp, #4
2c43c     A7 00 68 FC | 	wrlong	#0, fp
2c440     1C 4E 85 F1 | 	sub	fp, #28
2c444     A7 12 02 FB | 	rdlong	arg01, fp
2c448     04 4E 85 F1 | 	sub	fp, #4
2c44c     08 12 06 F1 | 	add	arg01, #8
2c450     09 FB 01 FB | 	rdlong	result1, arg01
2c454     01 FA CD F7 | 	test	result1, #1 wz
2c458     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c45c     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2c460     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c464     01 FA 65 A6 |  if_e	neg	result1, #1
2c468     74 02 90 AD |  if_e	jmp	#LR__4256
2c46c     04 4E 05 F1 | 	add	fp, #4
2c470     A7 12 02 FB | 	rdlong	arg01, fp
2c474     04 4E 85 F1 | 	sub	fp, #4
2c478     14 12 06 F1 | 	add	arg01, #20
2c47c     09 FB 09 FB | 	rdlong	result1, arg01 wz
2c480     B8 00 90 AD |  if_e	jmp	#LR__4251
2c484     04 4E 05 F1 | 	add	fp, #4
2c488     A7 12 02 FB | 	rdlong	arg01, fp
2c48c     09 17 02 F6 | 	mov	arg03, arg01
2c490     14 16 06 F1 | 	add	arg03, #20
2c494     0B 27 02 FB | 	rdlong	local01, arg03
2c498     13 29 02 F6 | 	mov	local02, local01
2c49c     13 26 46 F7 | 	zerox	local01, #19
2c4a0     14 28 46 F0 | 	shr	local02, #20
2c4a4     02 28 66 F0 | 	shl	local02, #2
2c4a8     ED 28 02 F1 | 	add	local02, __methods__
2c4ac     14 29 02 FB | 	rdlong	local02, local02
2c4b0     04 4E 05 F1 | 	add	fp, #4
2c4b4     A7 14 02 FB | 	rdlong	arg02, fp
2c4b8     04 4E 05 F1 | 	add	fp, #4
2c4bc     A7 16 02 FB | 	rdlong	arg03, fp
2c4c0     0C 4E 85 F1 | 	sub	fp, #12
2c4c4     F2 2A 02 F6 | 	mov	local03, objptr
2c4c8     13 E5 01 F6 | 	mov	objptr, local01
2c4cc     2D 28 62 FD | 	call	local02
2c4d0     15 E5 01 F6 | 	mov	objptr, local03
2c4d4     10 4E 05 F1 | 	add	fp, #16
2c4d8     A7 FA 61 FC | 	wrlong	result1, fp
2c4dc     10 4E 85 F1 | 	sub	fp, #16
2c4e0     00 FA 55 F2 | 	cmps	result1, #0 wc
2c4e4     44 00 90 3D |  if_ae	jmp	#LR__4250
2c4e8     04 4E 05 F1 | 	add	fp, #4
2c4ec     A7 2A 02 FB | 	rdlong	local03, fp
2c4f0     15 27 02 F6 | 	mov	local01, local03
2c4f4     08 2A 06 F1 | 	add	local03, #8
2c4f8     15 29 02 FB | 	rdlong	local02, local03
2c4fc     20 28 46 F5 | 	or	local02, #32
2c500     08 26 06 F1 | 	add	local01, #8
2c504     13 29 62 FC | 	wrlong	local02, local01
2c508     0C 4E 05 F1 | 	add	fp, #12
2c50c     A7 12 0A FB | 	rdlong	arg01, fp wz
2c510     10 4E 85 F1 | 	sub	fp, #16
2c514     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c518     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2c51c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c520     01 FA 65 56 |  if_ne	neg	result1, #1
2c524     00 FA 05 A6 |  if_e	mov	result1, #0
2c528     B4 01 90 FD | 	jmp	#LR__4256
2c52c                 | LR__4250
2c52c     10 4E 05 F1 | 	add	fp, #16
2c530     A7 FA 01 FB | 	rdlong	result1, fp
2c534     10 4E 85 F1 | 	sub	fp, #16
2c538     A4 01 90 FD | 	jmp	#LR__4256
2c53c                 | LR__4251
2c53c     04 4E 05 F1 | 	add	fp, #4
2c540     A7 12 02 FB | 	rdlong	arg01, fp
2c544     20 12 06 F1 | 	add	arg01, #32
2c548     09 13 0A FB | 	rdlong	arg01, arg01 wz
2c54c     14 4E 05 F1 | 	add	fp, #20
2c550     A7 12 62 FC | 	wrlong	arg01, fp
2c554     18 4E 85 F1 | 	sub	fp, #24
2c558     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c55c     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2c560     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c564     01 FA 65 A6 |  if_e	neg	result1, #1
2c568     74 01 90 AD |  if_e	jmp	#LR__4256
2c56c     04 4E 05 F1 | 	add	fp, #4
2c570     A7 2A 02 FB | 	rdlong	local03, fp
2c574     04 4E 85 F1 | 	sub	fp, #4
2c578     28 2A 06 F1 | 	add	local03, #40
2c57c     15 29 0A FB | 	rdlong	local02, local03 wz
2c580     7C 00 90 AD |  if_e	jmp	#LR__4253
2c584     04 4E 05 F1 | 	add	fp, #4
2c588     A7 12 02 FB | 	rdlong	arg01, fp
2c58c     09 2B 02 F6 | 	mov	local03, arg01
2c590     28 2A 06 F1 | 	add	local03, #40
2c594     15 27 02 FB | 	rdlong	local01, local03
2c598     13 29 02 F6 | 	mov	local02, local01
2c59c     13 26 46 F7 | 	zerox	local01, #19
2c5a0     14 28 46 F0 | 	shr	local02, #20
2c5a4     02 28 66 F0 | 	shl	local02, #2
2c5a8     ED 28 02 F1 | 	add	local02, __methods__
2c5ac     14 29 02 FB | 	rdlong	local02, local02
2c5b0     20 4E 05 F1 | 	add	fp, #32
2c5b4     A7 16 02 F6 | 	mov	arg03, fp
2c5b8     24 4E 85 F1 | 	sub	fp, #36
2c5bc     00 15 06 F6 | 	mov	arg02, #256
2c5c0     F2 2A 02 F6 | 	mov	local03, objptr
2c5c4     13 E5 01 F6 | 	mov	objptr, local01
2c5c8     2D 28 62 FD | 	call	local02
2c5cc     15 E5 01 F6 | 	mov	objptr, local03
2c5d0     10 4E 05 F1 | 	add	fp, #16
2c5d4     A7 FA 61 FC | 	wrlong	result1, fp
2c5d8     00 FA 4D F2 | 	cmps	result1, #0 wz
2c5dc     10 4E 85 F1 | 	sub	fp, #16
2c5e0     1C 00 90 5D |  if_ne	jmp	#LR__4252
2c5e4     24 4E 05 F1 | 	add	fp, #36
2c5e8     A7 28 02 FB | 	rdlong	local02, fp
2c5ec     24 4E 85 F1 | 	sub	fp, #36
2c5f0     02 28 CE F7 | 	test	local02, #2 wz
2c5f4     20 4E 05 51 |  if_ne	add	fp, #32
2c5f8     A7 02 68 5C |  if_ne	wrlong	#1, fp
2c5fc     20 4E 85 51 |  if_ne	sub	fp, #32
2c600                 | LR__4252
2c600                 | LR__4253
2c600     10 4E 05 F1 | 	add	fp, #16
2c604     A7 00 68 FC | 	wrlong	#0, fp
2c608     10 4E 85 F1 | 	sub	fp, #16
2c60c                 | LR__4254
2c60c     0C 4E 05 F1 | 	add	fp, #12
2c610     A7 2A 02 FB | 	rdlong	local03, fp
2c614     0C 4E 85 F1 | 	sub	fp, #12
2c618     01 2A 16 F2 | 	cmp	local03, #1 wc
2c61c     B4 00 90 CD |  if_b	jmp	#LR__4255
2c620     18 4E 05 F1 | 	add	fp, #24
2c624     A7 28 02 FB | 	rdlong	local02, fp
2c628     14 2B 02 F6 | 	mov	local03, local02
2c62c     13 2A 46 F7 | 	zerox	local03, #19
2c630     14 28 46 F0 | 	shr	local02, #20
2c634     02 28 66 F0 | 	shl	local02, #2
2c638     ED 28 02 F1 | 	add	local02, __methods__
2c63c     14 29 02 FB | 	rdlong	local02, local02
2c640     14 4E 85 F1 | 	sub	fp, #20
2c644     A7 12 02 FB | 	rdlong	arg01, fp
2c648     04 4E 85 F1 | 	sub	fp, #4
2c64c     F2 26 02 F6 | 	mov	local01, objptr
2c650     15 E5 01 F6 | 	mov	objptr, local03
2c654     2D 28 62 FD | 	call	local02
2c658     13 E5 01 F6 | 	mov	objptr, local01
2c65c     14 4E 05 F1 | 	add	fp, #20
2c660     A7 FA 61 FC | 	wrlong	result1, fp
2c664     14 4E 85 F1 | 	sub	fp, #20
2c668     00 FA 55 F2 | 	cmps	result1, #0 wc
2c66c     64 00 90 CD |  if_b	jmp	#LR__4255
2c670     1C 4E 05 F1 | 	add	fp, #28
2c674     A7 2A 02 FB | 	rdlong	local03, fp
2c678     15 29 02 F6 | 	mov	local02, local03
2c67c     01 28 06 F1 | 	add	local02, #1
2c680     A7 28 62 FC | 	wrlong	local02, fp
2c684     08 4E 85 F1 | 	sub	fp, #8
2c688     A7 28 02 FB | 	rdlong	local02, fp
2c68c     15 29 42 FC | 	wrbyte	local02, local03
2c690     04 4E 85 F1 | 	sub	fp, #4
2c694     A7 2A 02 FB | 	rdlong	local03, fp
2c698     01 2A 06 F1 | 	add	local03, #1
2c69c     A7 2A 62 FC | 	wrlong	local03, fp
2c6a0     04 4E 85 F1 | 	sub	fp, #4
2c6a4     A7 2A 02 FB | 	rdlong	local03, fp
2c6a8     01 2A 86 F1 | 	sub	local03, #1
2c6ac     A7 2A 62 FC | 	wrlong	local03, fp
2c6b0     14 4E 05 F1 | 	add	fp, #20
2c6b4     A7 2A 0A FB | 	rdlong	local03, fp wz
2c6b8     20 4E 85 F1 | 	sub	fp, #32
2c6bc     4C FF 9F AD |  if_e	jmp	#LR__4254
2c6c0     14 4E 05 F1 | 	add	fp, #20
2c6c4     A7 28 02 FB | 	rdlong	local02, fp
2c6c8     14 4E 85 F1 | 	sub	fp, #20
2c6cc     0A 28 0E F2 | 	cmp	local02, #10 wz
2c6d0     38 FF 9F 5D |  if_ne	jmp	#LR__4254
2c6d4                 | LR__4255
2c6d4     10 4E 05 F1 | 	add	fp, #16
2c6d8     A7 FA 01 FB | 	rdlong	result1, fp
2c6dc     10 4E 85 F1 | 	sub	fp, #16
2c6e0                 | LR__4256
2c6e0     A7 F0 03 F6 | 	mov	ptra, fp
2c6e4     B2 00 A0 FD | 	call	#popregs_
2c6e8                 | __system___vfsread_ret
2c6e8     2D 00 64 FD | 	ret
2c6ec                 | 
2c6ec                 | __system____default_filbuf
2c6ec     04 4A 05 F6 | 	mov	COUNT_, #4
2c6f0     A8 00 A0 FD | 	call	#pushregs_
2c6f4     09 27 02 F6 | 	mov	local01, arg01
2c6f8     13 29 02 FB | 	rdlong	local02, local01
2c6fc     0C 28 06 F1 | 	add	local02, #12
2c700     14 FB 09 FB | 	rdlong	result1, local02 wz
2c704     0C 28 86 F1 | 	sub	local02, #12
2c708     20 00 90 5D |  if_ne	jmp	#LR__4260
2c70c     14 28 06 F1 | 	add	local02, #20
2c710     14 FB 01 F6 | 	mov	result1, local02
2c714     04 28 86 F1 | 	sub	local02, #4
2c718     14 FB 61 FC | 	wrlong	result1, local02
2c71c     04 28 86 F1 | 	sub	local02, #4
2c720     02 00 80 FF 
2c724     14 01 68 FC | 	wrlong	##1024, local02
2c728     0C 28 86 F1 | 	sub	local02, #12
2c72c                 | LR__4260
2c72c     14 26 06 F1 | 	add	local01, #20
2c730     13 2B 02 FB | 	rdlong	local03, local01
2c734     15 2D 02 F6 | 	mov	local04, local03
2c738     14 26 86 F1 | 	sub	local01, #20
2c73c     13 2C 46 F7 | 	zerox	local04, #19
2c740     14 2A 46 F0 | 	shr	local03, #20
2c744     02 2A 66 F0 | 	shl	local03, #2
2c748     ED 2A 02 F1 | 	add	local03, __methods__
2c74c     15 2B 02 FB | 	rdlong	local03, local03
2c750     10 28 06 F1 | 	add	local02, #16
2c754     14 15 02 FB | 	rdlong	arg02, local02
2c758     04 28 86 F1 | 	sub	local02, #4
2c75c     14 17 02 FB | 	rdlong	arg03, local02
2c760     0C 28 86 F1 | 	sub	local02, #12
2c764     13 13 02 F6 | 	mov	arg01, local01
2c768     F2 26 02 F6 | 	mov	local01, objptr
2c76c     16 E5 01 F6 | 	mov	objptr, local04
2c770     2D 2A 62 FD | 	call	local03
2c774     13 E5 01 F6 | 	mov	objptr, local01
2c778     FD 2C 02 F6 | 	mov	local04, result1
2c77c     00 2C 56 F2 | 	cmps	local04, #0 wc
2c780     01 FA 65 C6 |  if_b	neg	result1, #1
2c784     28 00 90 CD |  if_b	jmp	#LR__4261
2c788     14 2D 62 FC | 	wrlong	local04, local02
2c78c     10 28 06 F1 | 	add	local02, #16
2c790     14 2B 02 FB | 	rdlong	local03, local02
2c794     0C 28 86 F1 | 	sub	local02, #12
2c798     14 2B 62 FC | 	wrlong	local03, local02
2c79c     04 28 06 F1 | 	add	local02, #4
2c7a0     14 2B 02 FB | 	rdlong	local03, local02
2c7a4     01 2A 46 F5 | 	or	local03, #1
2c7a8     14 2B 62 FC | 	wrlong	local03, local02
2c7ac     16 FB 01 F6 | 	mov	result1, local04
2c7b0                 | LR__4261
2c7b0     A7 F0 03 F6 | 	mov	ptra, fp
2c7b4     B2 00 A0 FD | 	call	#popregs_
2c7b8                 | __system____default_filbuf_ret
2c7b8     2D 00 64 FD | 	ret
2c7bc                 | 
2c7bc                 | __system__getlower_1154
2c7bc     41 12 56 F2 | 	cmps	arg01, #65 wc
2c7c0     10 00 90 CD |  if_b	jmp	#LR__4270
2c7c4     5B 12 56 F2 | 	cmps	arg01, #91 wc
2c7c8     09 FB 01 C6 |  if_b	mov	result1, arg01
2c7cc     20 FA 05 C1 |  if_b	add	result1, #32
2c7d0     04 00 90 CD |  if_b	jmp	#__system__getlower_1154_ret
2c7d4                 | LR__4270
2c7d4     09 FB 01 F6 | 	mov	result1, arg01
2c7d8                 | __system__getlower_1154_ret
2c7d8     2D 00 64 FD | 	ret
2c7dc                 | 
2c7dc                 | __system___pat_match
2c7dc     08 4A 05 F6 | 	mov	COUNT_, #8
2c7e0     A8 00 A0 FD | 	call	#pushregs_
2c7e4     09 27 02 F6 | 	mov	local01, arg01
2c7e8                 | LR__4280
2c7e8     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2c7ec     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2c7f0     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2c7f4     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2c7f8     2C 00 90 AD |  if_e	jmp	#LR__4281
2c7fc     0A 13 C2 FA | 	rdbyte	arg01, arg02
2c800     B8 FF BF FD | 	call	#__system__getlower_1154
2c804     FD 2A 02 F6 | 	mov	local03, result1
2c808     13 13 C2 FA | 	rdbyte	arg01, local01
2c80c     AC FF BF FD | 	call	#__system__getlower_1154
2c810     15 FB 09 F2 | 	cmp	result1, local03 wz
2c814     00 FA 05 56 |  if_ne	mov	result1, #0
2c818     FC 00 90 5D |  if_ne	jmp	#LR__4289
2c81c     01 26 06 F1 | 	add	local01, #1
2c820     01 14 06 F1 | 	add	arg02, #1
2c824     C0 FF 9F FD | 	jmp	#LR__4280
2c828                 | LR__4281
2c828     0A 2B C2 FA | 	rdbyte	local03, arg02
2c82c     2A 2A 0E F2 | 	cmp	local03, #42 wz
2c830     D4 00 90 5D |  if_ne	jmp	#LR__4288
2c834     01 14 06 F1 | 	add	arg02, #1
2c838     0A 29 C2 FA | 	rdbyte	local02, arg02
2c83c     01 14 86 F1 | 	sub	arg02, #1
2c840     2E 28 0E F2 | 	cmp	local02, #46 wz
2c844     28 00 90 5D |  if_ne	jmp	#LR__4282
2c848     02 14 06 F1 | 	add	arg02, #2
2c84c     0A 29 C2 FA | 	rdbyte	local02, arg02
2c850     02 14 86 F1 | 	sub	arg02, #2
2c854     2A 28 0E F2 | 	cmp	local02, #42 wz
2c858     03 14 06 A1 |  if_e	add	arg02, #3
2c85c     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2c860     03 14 86 A1 |  if_e	sub	arg02, #3
2c864     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2c868     01 FA 05 A6 |  if_e	mov	result1, #1
2c86c     A8 00 90 AD |  if_e	jmp	#LR__4289
2c870                 | LR__4282
2c870     01 14 06 F1 | 	add	arg02, #1
2c874     00 30 06 F6 | 	mov	local06, #0
2c878     97 1E 48 FB | 	callpa	#(@LR__4285-@LR__4283)>>2,fcache_load_ptr_
2c87c                 | LR__4283
2c87c     18 33 02 F6 | 	mov	local07, local06
2c880     0A 33 02 F1 | 	add	local07, arg02
2c884     19 33 CA FA | 	rdbyte	local07, local07 wz
2c888     18 2F 02 56 |  if_ne	mov	local05, local06
2c88c     01 2E 06 51 |  if_ne	add	local05, #1
2c890     17 31 02 56 |  if_ne	mov	local06, local05
2c894     E4 FF 9F 5D |  if_ne	jmp	#LR__4283
2c898     00 34 06 F6 | 	mov	local08, #0
2c89c                 | LR__4284
2c89c     1A 33 02 F6 | 	mov	local07, local08
2c8a0     13 33 02 F1 | 	add	local07, local01
2c8a4     19 33 CA FA | 	rdbyte	local07, local07 wz
2c8a8     1A 2F 02 56 |  if_ne	mov	local05, local08
2c8ac     01 2E 06 51 |  if_ne	add	local05, #1
2c8b0     17 35 02 56 |  if_ne	mov	local08, local05
2c8b4     E4 FF 9F 5D |  if_ne	jmp	#LR__4284
2c8b8                 | LR__4285
2c8b8     18 35 52 F2 | 	cmps	local08, local06 wc
2c8bc     00 FA 05 C6 |  if_b	mov	result1, #0
2c8c0     54 00 90 CD |  if_b	jmp	#LR__4289
2c8c4     1A 29 02 F6 | 	mov	local02, local08
2c8c8     18 29 82 F1 | 	sub	local02, local06
2c8cc     14 27 02 F1 | 	add	local01, local02
2c8d0                 | LR__4286
2c8d0     01 30 56 F2 | 	cmps	local06, #1 wc
2c8d4     30 00 90 CD |  if_b	jmp	#LR__4287
2c8d8     13 13 C2 FA | 	rdbyte	arg01, local01
2c8dc     DC FE BF FD | 	call	#__system__getlower_1154
2c8e0     FD 34 02 F6 | 	mov	local08, result1
2c8e4     0A 13 C2 FA | 	rdbyte	arg01, arg02
2c8e8     D0 FE BF FD | 	call	#__system__getlower_1154
2c8ec     FD 34 0A F2 | 	cmp	local08, result1 wz
2c8f0     00 FA 05 56 |  if_ne	mov	result1, #0
2c8f4     20 00 90 5D |  if_ne	jmp	#LR__4289
2c8f8     01 26 06 F1 | 	add	local01, #1
2c8fc     01 14 06 F1 | 	add	arg02, #1
2c900     01 30 86 F1 | 	sub	local06, #1
2c904     C8 FF 9F FD | 	jmp	#LR__4286
2c908                 | LR__4287
2c908                 | LR__4288
2c908     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2c90c     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2c910     01 FA 05 A6 |  if_e	mov	result1, #1
2c914     00 FA 05 56 |  if_ne	mov	result1, #0
2c918                 | LR__4289
2c918     A7 F0 03 F6 | 	mov	ptra, fp
2c91c     B2 00 A0 FD | 	call	#popregs_
2c920                 | __system___pat_match_ret
2c920     2D 00 64 FD | 	ret
2c924                 | 
2c924                 | _fatfs_cc_ff_uni2oem
2c924     00 00 06 F6 | 	mov	_var01, #0
2c928     80 12 16 F2 | 	cmp	arg01, #128 wc
2c92c     09 01 02 C6 |  if_b	mov	_var01, arg01
2c930     58 00 90 CD |  if_b	jmp	#LR__4294
2c934     80 00 00 FF 
2c938     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2c93c     4C 00 90 3D |  if_ae	jmp	#LR__4293
2c940     0A FB 31 F9 | 	getword	result1, arg02, #0
2c944     01 00 00 FF 
2c948     52 FB 0D F2 | 	cmp	result1, ##850 wz
2c94c     3C 00 90 5D |  if_ne	jmp	#LR__4293
2c950                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2c950     00 00 06 F6 | 	mov	_var01, #0
2c954     97 14 48 FB | 	callpa	#(@LR__4291-@LR__4290)>>2,fcache_load_ptr_
2c958                 | LR__4290
2c958     00 FB 31 F9 | 	getword	result1, _var01, #0
2c95c     80 FA 15 F2 | 	cmp	result1, #128 wc
2c960     1C 00 90 3D |  if_ae	jmp	#LR__4292
2c964     00 FB 31 F9 | 	getword	result1, _var01, #0
2c968     01 FA 65 F0 | 	shl	result1, #1
2c96c     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2c970     FD FA E1 FA | 	rdword	result1, result1
2c974     FD 12 0A F2 | 	cmp	arg01, result1 wz
2c978     01 00 06 51 |  if_ne	add	_var01, #1
2c97c     D8 FF 9F 5D |  if_ne	jmp	#LR__4290
2c980                 | LR__4291
2c980                 | LR__4292
2c980     00 01 32 F9 | 	getword	_var01, _var01, #0
2c984     80 00 06 F1 | 	add	_var01, #128
2c988     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2c98c                 | LR__4293
2c98c                 | LR__4294
2c98c                 | ' 			c = (c + 0x80) & 0xFF;
2c98c                 | ' 		}
2c98c                 | ' 	}
2c98c                 | ' 
2c98c                 | ' 	return c;
2c98c     00 FB 01 F6 | 	mov	result1, _var01
2c990                 | _fatfs_cc_ff_uni2oem_ret
2c990     2D 00 64 FD | 	ret
2c994                 | 
2c994                 | _fatfs_cc_ff_oem2uni
2c994     00 00 06 F6 | 	mov	_var01, #0
2c998     09 FB 31 F9 | 	getword	result1, arg01, #0
2c99c     80 FA 15 F2 | 	cmp	result1, #128 wc
2c9a0     09 01 02 C6 |  if_b	mov	_var01, arg01
2c9a4     2C 00 90 CD |  if_b	jmp	#LR__4301
2c9a8     0A 15 32 F9 | 	getword	arg02, arg02, #0
2c9ac     01 00 00 FF 
2c9b0     52 15 0E F2 | 	cmp	arg02, ##850 wz
2c9b4     1C 00 90 5D |  if_ne	jmp	#LR__4300
2c9b8     09 FB 31 F9 | 	getword	result1, arg01, #0
2c9bc     00 FB 15 F2 | 	cmp	result1, #256 wc
2c9c0     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2c9c4     80 12 86 C1 |  if_b	sub	arg01, #128
2c9c8     01 12 66 C0 |  if_b	shl	arg01, #1
2c9cc     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2c9d0     09 01 E2 CA |  if_b	rdword	_var01, arg01
2c9d4                 | LR__4300
2c9d4                 | LR__4301
2c9d4                 | ' 		}
2c9d4                 | ' 	}
2c9d4                 | ' 
2c9d4                 | ' 	return c;
2c9d4     00 FB 01 F6 | 	mov	result1, _var01
2c9d8                 | _fatfs_cc_ff_oem2uni_ret
2c9d8     2D 00 64 FD | 	ret
2c9dc                 | 
2c9dc                 | _fatfs_cc_ff_wtoupper
2c9dc     09 01 02 F6 | 	mov	_var01, arg01
2c9e0     80 00 00 FF 
2c9e4     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2c9e8     60 01 90 3D |  if_ae	jmp	#LR__4323
2c9ec     00 03 02 F6 | 	mov	_var02, _var01
2c9f0     01 01 32 F9 | 	getword	_var01, _var02, #0
2c9f4     08 00 00 FF 
2c9f8     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2c9fc     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2ca00     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2ca04     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2ca08     01 00 00 3F 
2ca0c     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2ca10     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2ca14     01 00 00 3F 
2ca18     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2ca1c     02 07 02 F6 | 	mov	_var04, _var03
2ca20                 | ' 		uc = (WORD)uni;
2ca20                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2ca20                 | ' 		for (;;) {
2ca20                 | LR__4310
2ca20     03 09 E2 FA | 	rdword	_var05, _var04
2ca24     04 05 02 F6 | 	mov	_var03, _var05
2ca28     0F 04 4E F7 | 	zerox	_var03, #15 wz
2ca2c     02 06 06 F1 | 	add	_var04, #2
2ca30     14 01 90 AD |  if_e	jmp	#LR__4322
2ca34     01 05 32 F9 | 	getword	_var03, _var02, #0
2ca38     04 01 32 F9 | 	getword	_var01, _var05, #0
2ca3c     00 05 12 F2 | 	cmp	_var03, _var01 wc
2ca40     04 01 90 CD |  if_b	jmp	#LR__4322
2ca44     03 0B E2 FA | 	rdword	_var06, _var04
2ca48     05 0D 32 F9 | 	getword	_var07, _var06, #0
2ca4c     08 0C 46 F0 | 	shr	_var07, #8
2ca50     05 0B 32 F9 | 	getword	_var06, _var06, #0
2ca54     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2ca58     01 05 32 F9 | 	getword	_var03, _var02, #0
2ca5c     04 0F 32 F9 | 	getword	_var08, _var05, #0
2ca60     05 01 32 F9 | 	getword	_var01, _var06, #0
2ca64     00 0F 02 F1 | 	add	_var08, _var01
2ca68     07 05 52 F2 | 	cmps	_var03, _var08 wc
2ca6c     02 06 06 F1 | 	add	_var04, #2
2ca70     C4 00 90 3D |  if_ae	jmp	#LR__4321
2ca74                 | ' 				switch (cmd) {
2ca74     06 11 32 F9 | 	getword	_var09, _var07, #0
2ca78     09 10 26 F3 | 	fle	_var09, #9
2ca7c     30 10 62 FD | 	jmprel	_var09
2ca80                 | LR__4311
2ca80     24 00 90 FD | 	jmp	#LR__4312
2ca84     3C 00 90 FD | 	jmp	#LR__4313
2ca88     54 00 90 FD | 	jmp	#LR__4314
2ca8c     5C 00 90 FD | 	jmp	#LR__4315
2ca90     64 00 90 FD | 	jmp	#LR__4316
2ca94     6C 00 90 FD | 	jmp	#LR__4317
2ca98     74 00 90 FD | 	jmp	#LR__4318
2ca9c     7C 00 90 FD | 	jmp	#LR__4319
2caa0     84 00 90 FD | 	jmp	#LR__4320
2caa4     A0 00 90 FD | 	jmp	#LR__4322
2caa8                 | LR__4312
2caa8     01 03 32 F9 | 	getword	_var02, _var02, #0
2caac     04 09 32 F9 | 	getword	_var05, _var05, #0
2cab0     04 03 82 F1 | 	sub	_var02, _var05
2cab4     01 02 66 F0 | 	shl	_var02, #1
2cab8     03 03 02 F1 | 	add	_var02, _var04
2cabc     01 03 E2 FA | 	rdword	_var02, _var02
2cac0     84 00 90 FD | 	jmp	#LR__4322
2cac4                 | LR__4313
2cac4     01 05 32 F9 | 	getword	_var03, _var02, #0
2cac8     01 03 32 F9 | 	getword	_var02, _var02, #0
2cacc     04 09 32 F9 | 	getword	_var05, _var05, #0
2cad0     04 03 82 F1 | 	sub	_var02, _var05
2cad4     01 02 06 F5 | 	and	_var02, #1
2cad8     02 03 C2 F2 | 	subr	_var02, _var03
2cadc     68 00 90 FD | 	jmp	#LR__4322
2cae0                 | LR__4314
2cae0     01 03 32 F9 | 	getword	_var02, _var02, #0
2cae4     10 02 86 F1 | 	sub	_var02, #16
2cae8     5C 00 90 FD | 	jmp	#LR__4322
2caec                 | LR__4315
2caec     01 03 32 F9 | 	getword	_var02, _var02, #0
2caf0     20 02 86 F1 | 	sub	_var02, #32
2caf4     50 00 90 FD | 	jmp	#LR__4322
2caf8                 | LR__4316
2caf8     01 03 32 F9 | 	getword	_var02, _var02, #0
2cafc     30 02 86 F1 | 	sub	_var02, #48
2cb00     44 00 90 FD | 	jmp	#LR__4322
2cb04                 | LR__4317
2cb04     01 03 32 F9 | 	getword	_var02, _var02, #0
2cb08     1A 02 86 F1 | 	sub	_var02, #26
2cb0c     38 00 90 FD | 	jmp	#LR__4322
2cb10                 | LR__4318
2cb10     01 03 32 F9 | 	getword	_var02, _var02, #0
2cb14     08 02 06 F1 | 	add	_var02, #8
2cb18     2C 00 90 FD | 	jmp	#LR__4322
2cb1c                 | LR__4319
2cb1c     01 03 32 F9 | 	getword	_var02, _var02, #0
2cb20     50 02 86 F1 | 	sub	_var02, #80
2cb24     20 00 90 FD | 	jmp	#LR__4322
2cb28                 | LR__4320
2cb28     01 03 32 F9 | 	getword	_var02, _var02, #0
2cb2c     0E 00 00 FF 
2cb30     60 02 86 F1 | 	sub	_var02, ##7264
2cb34                 | ' 				}
2cb34                 | ' 				break;
2cb34     10 00 90 FD | 	jmp	#LR__4322
2cb38                 | LR__4321
2cb38     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2cb3c     02 0A 06 AA |  if_e	mul	_var06, #2
2cb40     05 07 02 A1 |  if_e	add	_var04, _var06
2cb44     D8 FE 9F FD | 	jmp	#LR__4310
2cb48                 | LR__4322
2cb48     01 01 32 F9 | 	getword	_var01, _var02, #0
2cb4c                 | LR__4323
2cb4c                 | ' 		}
2cb4c                 | ' 		uni = uc;
2cb4c                 | ' 	}
2cb4c                 | ' 
2cb4c                 | ' 	return uni;
2cb4c     00 FB 01 F6 | 	mov	result1, _var01
2cb50                 | _fatfs_cc_ff_wtoupper_ret
2cb50     2D 00 64 FD | 	ret
2cb54                 | 
2cb54                 | _fatfs_cc_strncpy
2cb54     09 01 02 F6 | 	mov	_var01, arg01
2cb58     97 12 48 FB | 	callpa	#(@LR__4331-@LR__4330)>>2,fcache_load_ptr_
2cb5c                 | ' 
2cb5c                 | ' 	dscan = dst;
2cb5c                 | ' 	sscan = src;
2cb5c                 | ' 	count = n;
2cb5c                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2cb5c                 | LR__4330
2cb5c     01 16 86 F1 | 	sub	arg03, #1
2cb60     00 16 56 F2 | 	cmps	arg03, #0 wc
2cb64     18 00 90 CD |  if_b	jmp	#LR__4332
2cb68     0A FB C1 FA | 	rdbyte	result1, arg02
2cb6c     00 FB 41 FC | 	wrbyte	result1, _var01
2cb70     01 14 06 F1 | 	add	arg02, #1
2cb74     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2cb78                 | ' 		continue;
2cb78     01 00 06 F1 | 	add	_var01, #1
2cb7c     DC FF 9F 5D |  if_ne	jmp	#LR__4330
2cb80                 | LR__4331
2cb80                 | LR__4332
2cb80     97 0C 48 FB | 	callpa	#(@LR__4334-@LR__4333)>>2,fcache_load_ptr_
2cb84                 | ' 	while (--count >= 0)
2cb84                 | LR__4333
2cb84     01 16 86 F1 | 	sub	arg03, #1
2cb88     00 16 56 F2 | 	cmps	arg03, #0 wc
2cb8c     00 03 02 36 |  if_ae	mov	_var02, _var01
2cb90     01 00 06 31 |  if_ae	add	_var01, #1
2cb94     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2cb98     E8 FF 9F 3D |  if_ae	jmp	#LR__4333
2cb9c                 | LR__4334
2cb9c                 | ' 		*dscan++ = '\0';
2cb9c                 | ' 	return(dst);
2cb9c     09 FB 01 F6 | 	mov	result1, arg01
2cba0                 | _fatfs_cc_strncpy_ret
2cba0     2D 00 64 FD | 	ret
2cba4                 | 
2cba4                 | _fatfs_cc_memcmp
2cba4                 | ' 	for (n = size; n > 0; n--)
2cba4     00 16 0E F2 | 	cmp	arg03, #0 wz
2cba8     28 00 90 AD |  if_e	jmp	#LR__4341
2cbac                 | LR__4340
2cbac     09 01 C2 FA | 	rdbyte	_var01, arg01
2cbb0     0A 03 C2 FA | 	rdbyte	_var02, arg02
2cbb4     01 01 0A F2 | 	cmp	_var01, _var02 wz
2cbb8     01 12 06 A1 |  if_e	add	arg01, #1
2cbbc     01 14 06 A1 |  if_e	add	arg02, #1
2cbc0                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2cbc0     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2cbc4     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2cbc8     01 FB 81 51 |  if_ne	sub	result1, _var02
2cbcc     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2cbd0     F6 17 6E FB | 	djnz	arg03, #LR__4340
2cbd4                 | LR__4341
2cbd4                 | ' 
2cbd4                 | ' 	return(0);
2cbd4     00 FA 05 F6 | 	mov	result1, #0
2cbd8                 | _fatfs_cc_memcmp_ret
2cbd8     2D 00 64 FD | 	ret
2cbdc                 | 
2cbdc                 | _fatfs_cc_strncmp
2cbdc     09 01 0A F6 | 	mov	_var01, arg01 wz
2cbe0     14 00 90 5D |  if_ne	jmp	#LR__4350
2cbe4                 | ' 		return scan2 ? -1 : 0;
2cbe4     00 14 0E F2 | 	cmp	arg02, #0 wz
2cbe8     01 02 66 56 |  if_ne	neg	_var02, #1
2cbec     00 02 06 A6 |  if_e	mov	_var02, #0
2cbf0     01 FB 01 F6 | 	mov	result1, _var02
2cbf4     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2cbf8                 | LR__4350
2cbf8     00 14 0E F2 | 	cmp	arg02, #0 wz
2cbfc     01 FA 05 A6 |  if_e	mov	result1, #1
2cc00     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2cc04     0B 05 02 F6 | 	mov	_var03, arg03
2cc08     97 16 48 FB | 	callpa	#(@LR__4352-@LR__4351)>>2,fcache_load_ptr_
2cc0c                 | ' 	count = n;
2cc0c                 | ' 	do {
2cc0c                 | LR__4351
2cc0c     00 07 C2 FA | 	rdbyte	_var04, _var01
2cc10     0A 09 02 F6 | 	mov	_var05, arg02
2cc14     04 0B C2 FA | 	rdbyte	_var06, _var05
2cc18     01 04 86 F1 | 	sub	_var03, #1
2cc1c     00 04 56 F2 | 	cmps	_var03, #0 wc
2cc20     01 00 06 F1 | 	add	_var01, #1
2cc24     01 14 06 F1 | 	add	arg02, #1
2cc28     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2cc2c     08 00 90 2D |  if_nc_and_z	jmp	#LR__4353
2cc30     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2cc34     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4351
2cc38                 | LR__4352
2cc38                 | LR__4353
2cc38     00 04 56 F2 | 	cmps	_var03, #0 wc
2cc3c                 | ' 		return(0);
2cc3c     00 FA 05 C6 |  if_b	mov	result1, #0
2cc40     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2cc44     05 07 0A F2 | 	cmp	_var04, _var06 wz
2cc48                 | ' 		return(0);
2cc48     00 FA 05 A6 |  if_e	mov	result1, #0
2cc4c     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2cc50     00 06 0E F2 | 	cmp	_var04, #0 wz
2cc54                 | ' 		return(-1);
2cc54     01 FA 65 A6 |  if_e	neg	result1, #1
2cc58     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2cc5c     00 0A 0E F2 | 	cmp	_var06, #0 wz
2cc60                 | ' 		return(1);
2cc60     01 FA 05 A6 |  if_e	mov	result1, #1
2cc64                 | ' 		return(c1 - c2);
2cc64     03 FB 01 56 |  if_ne	mov	result1, _var04
2cc68     05 FB 81 51 |  if_ne	sub	result1, _var06
2cc6c                 | _fatfs_cc_strncmp_ret
2cc6c     2D 00 64 FD | 	ret
2cc70                 | 
2cc70                 | _fatfs_cc_strchr
2cc70                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
2cc70                 | ' 	while ((c = *s++) != (char) charwanted)
2cc70                 | LR__4360
2cc70     09 01 02 F6 | 	mov	_var01, arg01
2cc74     00 03 C2 FA | 	rdbyte	_var02, _var01
2cc78     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2cc7c     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2cc80     03 05 0A F2 | 	cmp	_var03, _var04 wz
2cc84     01 12 06 F1 | 	add	arg01, #1
2cc88     14 00 90 AD |  if_e	jmp	#LR__4361
2cc8c     01 05 02 F6 | 	mov	_var03, _var02
2cc90     07 04 4E F7 | 	zerox	_var03, #7 wz
2cc94     00 FA 05 A6 |  if_e	mov	result1, #0
2cc98     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2cc9c     D0 FF 9F FD | 	jmp	#LR__4360
2cca0                 | LR__4361
2cca0                 | ' 	return((char *)--s);
2cca0     01 12 86 F1 | 	sub	arg01, #1
2cca4     09 FB 01 F6 | 	mov	result1, arg01
2cca8                 | _fatfs_cc_strchr_ret
2cca8     2D 00 64 FD | 	ret
2ccac                 | 
2ccac                 | _fatfs_cc_disk_initialize
2ccac     04 4A 05 F6 | 	mov	COUNT_, #4
2ccb0     A8 00 A0 FD | 	call	#pushregs_
2ccb4     40 F0 07 F1 | 	add	ptra, #64
2ccb8     04 4E 05 F1 | 	add	fp, #4
2ccbc     A7 12 42 FC | 	wrbyte	arg01, fp
2ccc0     01 00 00 FF 
2ccc4     14 E4 05 F1 | 	add	objptr, ##532
2ccc8     F2 18 02 FB | 	rdlong	arg04, objptr
2cccc     2C 4E 05 F1 | 	add	fp, #44
2ccd0     A7 18 62 FC | 	wrlong	arg04, fp
2ccd4     04 E4 85 F1 | 	sub	objptr, #4
2ccd8     F2 18 02 FB | 	rdlong	arg04, objptr
2ccdc     04 4E 05 F1 | 	add	fp, #4
2cce0     A7 18 62 FC | 	wrlong	arg04, fp
2cce4     08 E4 05 F1 | 	add	objptr, #8
2cce8     F2 18 02 FB | 	rdlong	arg04, objptr
2ccec     04 4E 05 F1 | 	add	fp, #4
2ccf0     A7 18 62 FC | 	wrlong	arg04, fp
2ccf4     04 E4 05 F1 | 	add	objptr, #4
2ccf8     F2 18 02 FB | 	rdlong	arg04, objptr
2ccfc     04 4E 05 F1 | 	add	fp, #4
2cd00     A7 18 62 FC | 	wrlong	arg04, fp
2cd04     04 E4 05 F1 | 	add	objptr, #4
2cd08     F2 02 48 FC | 	wrbyte	#1, objptr
2cd0c     01 00 00 FF 
2cd10     20 E4 85 F1 | 	sub	objptr, ##544
2cd14     38 4E 85 F1 | 	sub	fp, #56
2cd18     A7 18 CA FA | 	rdbyte	arg04, fp wz
2cd1c     04 4E 85 F1 | 	sub	fp, #4
2cd20                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2cd20                 | '             return RES_NOTRDY;
2cd20     03 FA 05 56 |  if_ne	mov	result1, #3
2cd24     D8 05 90 5D |  if_ne	jmp	#LR__4388
2cd28     13 00 00 FF 
2cd2c     10 13 06 F6 | 	mov	arg01, ##10000
2cd30     44 95 BF FD | 	call	#__system___waitus
2cd34     30 4E 05 F1 | 	add	fp, #48
2cd38     A7 12 02 FB | 	rdlong	arg01, fp
2cd3c     09 01 08 FC | 	wrpin	#0, arg01
2cd40     04 4E 05 F1 | 	add	fp, #4
2cd44     A7 12 02 FB | 	rdlong	arg01, fp
2cd48     09 01 08 FC | 	wrpin	#0, arg01
2cd4c     04 4E 05 F1 | 	add	fp, #4
2cd50     A7 12 02 FB | 	rdlong	arg01, fp
2cd54     09 01 08 FC | 	wrpin	#0, arg01
2cd58     04 4E 05 F1 | 	add	fp, #4
2cd5c     A7 12 02 FB | 	rdlong	arg01, fp
2cd60     09 00 80 FF 
2cd64     09 01 08 FC | 	wrpin	##4608, arg01
2cd68     0C 4E 85 F1 | 	sub	fp, #12
2cd6c     A7 12 02 FB | 	rdlong	arg01, fp
2cd70     59 12 62 FD | 	drvh	arg01
2cd74     04 4E 05 F1 | 	add	fp, #4
2cd78     A7 12 02 FB | 	rdlong	arg01, fp
2cd7c     59 12 62 FD | 	drvh	arg01
2cd80     04 4E 05 F1 | 	add	fp, #4
2cd84     A7 12 02 FB | 	rdlong	arg01, fp
2cd88     59 12 62 FD | 	drvh	arg01
2cd8c     04 4E 05 F1 | 	add	fp, #4
2cd90     A7 12 02 FB | 	rdlong	arg01, fp
2cd94     59 12 62 FD | 	drvh	arg01
2cd98     20 4E 85 F1 | 	sub	fp, #32
2cd9c     00 04 80 FF 
2cda0     A7 20 68 FC | 	wrlong	##524304, fp
2cda4     04 4E 05 F1 | 	add	fp, #4
2cda8     20 03 80 FF 
2cdac     A7 90 68 FC | 	wrlong	##409672, fp
2cdb0     14 4E 05 F1 | 	add	fp, #20
2cdb4     A7 26 02 FB | 	rdlong	local01, fp
2cdb8     18 4E 85 F1 | 	sub	fp, #24
2cdbc     A7 16 02 FB | 	rdlong	arg03, fp
2cdc0     40 26 62 FD | 	dirl	local01
2cdc4     A0 03 80 FF 
2cdc8     13 91 08 FC | 	wrpin	##475208, local01
2cdcc     13 17 12 FC | 	wxpin	arg03, local01
2cdd0     13 01 28 FC | 	wypin	#0, local01
2cdd4     41 26 62 FD | 	dirh	local01
2cdd8     1C 4E 05 F1 | 	add	fp, #28
2cddc     A7 28 02 FB | 	rdlong	local02, fp
2cde0     14 27 82 F1 | 	sub	local01, local02
2cde4     07 26 06 F5 | 	and	local01, #7
2cde8     18 26 66 F0 | 	shl	local01, #24
2cdec     78 14 06 F6 | 	mov	arg02, #120
2cdf0     13 15 42 F5 | 	or	arg02, local01
2cdf4     14 4E 85 F1 | 	sub	fp, #20
2cdf8     A7 14 62 FC | 	wrlong	arg02, fp
2cdfc     14 4E 05 F1 | 	add	fp, #20
2ce00     A7 12 02 FB | 	rdlong	arg01, fp
2ce04     10 14 26 F4 | 	bith	arg02, #16
2ce08     40 12 62 FD | 	dirl	arg01
2ce0c     09 15 02 FC | 	wrpin	arg02, arg01
2ce10     09 3F 18 FC | 	wxpin	#31, arg01
2ce14     FF FF FF FF 
2ce18     09 FF 2B FC | 	wypin	##-1, arg01
2ce1c     41 12 62 FD | 	dirh	arg01
2ce20     04 4E 85 F1 | 	sub	fp, #4
2ce24     A7 14 02 FB | 	rdlong	arg02, fp
2ce28     08 4E 05 F1 | 	add	fp, #8
2ce2c     A7 2A 02 FB | 	rdlong	local03, fp
2ce30     15 15 82 F1 | 	sub	arg02, local03
2ce34     07 14 06 F5 | 	and	arg02, #7
2ce38     18 14 66 F0 | 	shl	arg02, #24
2ce3c     14 4E 85 F1 | 	sub	fp, #20
2ce40     A7 14 62 FC | 	wrlong	arg02, fp
2ce44     29 00 00 FF 
2ce48     7A 14 46 F5 | 	or	arg02, ##21114
2ce4c     A7 14 62 FC | 	wrlong	arg02, fp
2ce50     14 4E 05 F1 | 	add	fp, #20
2ce54     A7 12 02 FB | 	rdlong	arg01, fp
2ce58     40 12 62 FD | 	dirl	arg01
2ce5c     09 15 02 FC | 	wrpin	arg02, arg01
2ce60     09 4F 18 FC | 	wxpin	#39, arg01
2ce64     09 01 28 FC | 	wypin	#0, arg01
2ce68     41 12 62 FD | 	dirh	arg01
2ce6c     28 4E 85 F1 | 	sub	fp, #40
2ce70     A7 12 02 F6 | 	mov	arg01, fp
2ce74     14 4E 85 F1 | 	sub	fp, #20
2ce78     0A 14 06 F6 | 	mov	arg02, #10
2ce7c     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1188
2ce80     00 12 06 F6 | 	mov	arg01, #0
2ce84     00 14 06 F6 | 	mov	arg02, #0
2ce88     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1212
2ce8c     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1198
2ce90     64 12 06 F6 | 	mov	arg01, #100
2ce94     E0 93 BF FD | 	call	#__system___waitus
2ce98     14 4E 05 F1 | 	add	fp, #20
2ce9c     A7 12 02 F6 | 	mov	arg01, fp
2cea0     14 4E 85 F1 | 	sub	fp, #20
2cea4     0A 14 06 F6 | 	mov	arg02, #10
2cea8     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1188
2ceac     0C 4E 05 F1 | 	add	fp, #12
2ceb0     A7 00 48 FC | 	wrbyte	#0, fp
2ceb4     0C 4E 85 F1 | 	sub	fp, #12
2ceb8     00 12 06 F6 | 	mov	arg01, #0
2cebc     00 14 06 F6 | 	mov	arg02, #0
2cec0     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1212
2cec4     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2cec8     01 18 0E F2 | 	cmp	arg04, #1 wz
2cecc     B8 03 90 5D |  if_ne	jmp	#LR__4387
2ced0     08 12 06 F6 | 	mov	arg01, #8
2ced4     AA 15 06 F6 | 	mov	arg02, #426
2ced8     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1212
2cedc     FD FA E1 F8 | 	getbyte	result1, result1, #0
2cee0     01 FA 0D F2 | 	cmp	result1, #1 wz
2cee4     98 01 90 5D |  if_ne	jmp	#LR__4373
2cee8     14 4E 05 F1 | 	add	fp, #20
2ceec     A7 12 02 F6 | 	mov	arg01, fp
2cef0     14 4E 85 F1 | 	sub	fp, #20
2cef4     04 14 06 F6 | 	mov	arg02, #4
2cef8     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1188
2cefc     16 4E 05 F1 | 	add	fp, #22
2cf00     A7 2C C2 FA | 	rdbyte	local04, fp
2cf04     16 4E 85 F1 | 	sub	fp, #22
2cf08     01 2C 0E F2 | 	cmp	local04, #1 wz
2cf0c     17 4E 05 A1 |  if_e	add	fp, #23
2cf10     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2cf14     17 4E 85 A1 |  if_e	sub	fp, #23
2cf18     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2cf1c     68 03 90 5D |  if_ne	jmp	#LR__4386
2cf20                 | ' 				for (tmr = 1000; tmr; tmr--) {
2cf20     18 4E 05 F1 | 	add	fp, #24
2cf24     01 00 80 FF 
2cf28     A7 D0 6B FC | 	wrlong	##1000, fp
2cf2c     18 4E 85 F1 | 	sub	fp, #24
2cf30                 | LR__4370
2cf30     18 4E 05 F1 | 	add	fp, #24
2cf34     A7 26 0A FB | 	rdlong	local01, fp wz
2cf38     18 4E 85 F1 | 	sub	fp, #24
2cf3c     3C 00 90 AD |  if_e	jmp	#LR__4371
2cf40     A9 12 06 F6 | 	mov	arg01, #169
2cf44     1E 14 C6 F9 | 	decod	arg02, #30
2cf48     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1212
2cf4c     FD 2C 02 F6 | 	mov	local04, result1
2cf50     07 2C 4E F7 | 	zerox	local04, #7 wz
2cf54     24 00 90 AD |  if_e	jmp	#LR__4371
2cf58     01 00 00 FF 
2cf5c     E8 13 06 F6 | 	mov	arg01, ##1000
2cf60     14 93 BF FD | 	call	#__system___waitus
2cf64     18 4E 05 F1 | 	add	fp, #24
2cf68     A7 2C 02 FB | 	rdlong	local04, fp
2cf6c     01 2C 86 F1 | 	sub	local04, #1
2cf70     A7 2C 62 FC | 	wrlong	local04, fp
2cf74     18 4E 85 F1 | 	sub	fp, #24
2cf78     B4 FF 9F FD | 	jmp	#LR__4370
2cf7c                 | LR__4371
2cf7c     18 4E 05 F1 | 	add	fp, #24
2cf80     A7 2C 0A FB | 	rdlong	local04, fp wz
2cf84     18 4E 85 F1 | 	sub	fp, #24
2cf88     4C 00 90 AD |  if_e	jmp	#LR__4372
2cf8c     3A 12 06 F6 | 	mov	arg01, #58
2cf90     00 14 06 F6 | 	mov	arg02, #0
2cf94     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1212
2cf98     FD 2A 02 F6 | 	mov	local03, result1
2cf9c     07 2A 4E F7 | 	zerox	local03, #7 wz
2cfa0     34 00 90 5D |  if_ne	jmp	#LR__4372
2cfa4     14 4E 05 F1 | 	add	fp, #20
2cfa8     A7 12 02 F6 | 	mov	arg01, fp
2cfac     14 4E 85 F1 | 	sub	fp, #20
2cfb0     04 14 06 F6 | 	mov	arg02, #4
2cfb4     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1188
2cfb8     14 4E 05 F1 | 	add	fp, #20
2cfbc     A7 26 C2 FA | 	rdbyte	local01, fp
2cfc0     40 26 CE F7 | 	test	local01, #64 wz
2cfc4     0C 2C 06 56 |  if_ne	mov	local04, #12
2cfc8     04 2C 06 A6 |  if_e	mov	local04, #4
2cfcc     08 4E 85 F1 | 	sub	fp, #8
2cfd0     A7 2C 42 FC | 	wrbyte	local04, fp
2cfd4     0C 4E 85 F1 | 	sub	fp, #12
2cfd8                 | LR__4372
2cfd8     14 2C 06 FB | 	rdlong	local04, #20
2cfdc     18 4E 05 F1 | 	add	fp, #24
2cfe0     A7 2C 62 FC | 	wrlong	local04, fp
2cfe4     0C 4E 05 F1 | 	add	fp, #12
2cfe8     A7 2C 02 FB | 	rdlong	local04, fp
2cfec     1B 2C 26 F4 | 	bith	local04, #27
2cff0     A7 2C 62 FC | 	wrlong	local04, fp
2cff4     0C 4E 85 F1 | 	sub	fp, #12
2cff8     A7 2C 02 FB | 	rdlong	local04, fp
2cffc     18 4E 85 F1 | 	sub	fp, #24
2d000     68 78 04 FF 
2d004     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2d008     1C 4E 05 C1 |  if_b	add	fp, #28
2d00c     00 01 80 CF 
2d010     A7 08 68 CC |  if_b	wrlong	##131076, fp
2d014     1C 4E 85 C1 |  if_b	sub	fp, #28
2d018     6C 02 90 CD |  if_b	jmp	#LR__4386
2d01c     18 4E 05 F1 | 	add	fp, #24
2d020     A7 2C 02 FB | 	rdlong	local04, fp
2d024     18 4E 85 F1 | 	sub	fp, #24
2d028     E1 F5 05 FF 
2d02c     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2d030     1C 4E 05 C1 |  if_b	add	fp, #28
2d034     00 01 80 CF 
2d038     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2d03c     1C 4E 85 C1 |  if_b	sub	fp, #28
2d040     44 02 90 CD |  if_b	jmp	#LR__4386
2d044     18 4E 05 F1 | 	add	fp, #24
2d048     A7 2C 02 FB | 	rdlong	local04, fp
2d04c     18 4E 85 F1 | 	sub	fp, #24
2d050     3B 58 08 FF 
2d054     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2d058     1C 4E 05 C1 |  if_b	add	fp, #28
2d05c     00 01 80 CF 
2d060     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2d064     1C 4E 85 C1 |  if_b	sub	fp, #28
2d068     1C 02 90 CD |  if_b	jmp	#LR__4386
2d06c     1C 4E 05 F1 | 	add	fp, #28
2d070     80 01 80 FF 
2d074     A7 10 68 FC | 	wrlong	##196616, fp
2d078     1C 4E 85 F1 | 	sub	fp, #28
2d07c     08 02 90 FD | 	jmp	#LR__4386
2d080                 | LR__4373
2d080     A9 12 06 F6 | 	mov	arg01, #169
2d084     00 14 06 F6 | 	mov	arg02, #0
2d088     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1212
2d08c     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2d090     02 2C 16 F2 | 	cmp	local04, #2 wc
2d094     18 00 90 3D |  if_ae	jmp	#LR__4374
2d098     0C 4E 05 F1 | 	add	fp, #12
2d09c     A7 04 48 FC | 	wrbyte	#2, fp
2d0a0     04 4E 05 F1 | 	add	fp, #4
2d0a4     A7 52 49 FC | 	wrbyte	#169, fp
2d0a8     10 4E 85 F1 | 	sub	fp, #16
2d0ac     14 00 90 FD | 	jmp	#LR__4375
2d0b0                 | LR__4374
2d0b0     0C 4E 05 F1 | 	add	fp, #12
2d0b4     A7 02 48 FC | 	wrbyte	#1, fp
2d0b8     04 4E 05 F1 | 	add	fp, #4
2d0bc     A7 02 48 FC | 	wrbyte	#1, fp
2d0c0     10 4E 85 F1 | 	sub	fp, #16
2d0c4                 | LR__4375
2d0c4                 | ' 				ty =  0x01 ; cmd =  (1) ;
2d0c4                 | ' 			}
2d0c4                 | ' 			for (tmr = 1000; tmr; tmr--) {
2d0c4     18 4E 05 F1 | 	add	fp, #24
2d0c8     01 00 80 FF 
2d0cc     A7 D0 6B FC | 	wrlong	##1000, fp
2d0d0     18 4E 85 F1 | 	sub	fp, #24
2d0d4                 | LR__4376
2d0d4     18 4E 05 F1 | 	add	fp, #24
2d0d8     A7 2A 0A FB | 	rdlong	local03, fp wz
2d0dc     18 4E 85 F1 | 	sub	fp, #24
2d0e0     44 00 90 AD |  if_e	jmp	#LR__4377
2d0e4     10 4E 05 F1 | 	add	fp, #16
2d0e8     A7 12 C2 FA | 	rdbyte	arg01, fp
2d0ec     10 4E 85 F1 | 	sub	fp, #16
2d0f0     00 14 06 F6 | 	mov	arg02, #0
2d0f4     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1212
2d0f8     FD 2C 02 F6 | 	mov	local04, result1
2d0fc     07 2C 4E F7 | 	zerox	local04, #7 wz
2d100     24 00 90 AD |  if_e	jmp	#LR__4377
2d104     01 00 00 FF 
2d108     E8 13 06 F6 | 	mov	arg01, ##1000
2d10c     68 91 BF FD | 	call	#__system___waitus
2d110     18 4E 05 F1 | 	add	fp, #24
2d114     A7 2C 02 FB | 	rdlong	local04, fp
2d118     01 2C 86 F1 | 	sub	local04, #1
2d11c     A7 2C 62 FC | 	wrlong	local04, fp
2d120     18 4E 85 F1 | 	sub	fp, #24
2d124     AC FF 9F FD | 	jmp	#LR__4376
2d128                 | LR__4377
2d128     18 4E 05 F1 | 	add	fp, #24
2d12c     A7 2C 0A FB | 	rdlong	local04, fp wz
2d130     18 4E 85 F1 | 	sub	fp, #24
2d134     14 00 90 AD |  if_e	jmp	#LR__4378
2d138     10 12 06 F6 | 	mov	arg01, #16
2d13c     09 14 C6 F9 | 	decod	arg02, #9
2d140     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1212
2d144     07 FA 4D F7 | 	zerox	result1, #7 wz
2d148     0C 00 90 AD |  if_e	jmp	#LR__4379
2d14c                 | LR__4378
2d14c     0C 4E 05 F1 | 	add	fp, #12
2d150     A7 00 48 FC | 	wrbyte	#0, fp
2d154     0C 4E 85 F1 | 	sub	fp, #12
2d158                 | LR__4379
2d158     14 2C 06 FB | 	rdlong	local04, #20
2d15c     18 4E 05 F1 | 	add	fp, #24
2d160     A7 2C 62 FC | 	wrlong	local04, fp
2d164     18 4E 85 F1 | 	sub	fp, #24
2d168     F0 FA 02 FF 
2d16c     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2d170     18 00 90 3D |  if_ae	jmp	#LR__4380
2d174     24 4E 05 F1 | 	add	fp, #36
2d178     A7 2C 02 FB | 	rdlong	local04, fp
2d17c     1B 2C 26 F4 | 	bith	local04, #27
2d180     A7 2C 62 FC | 	wrlong	local04, fp
2d184     24 4E 85 F1 | 	sub	fp, #36
2d188     2C 00 90 FD | 	jmp	#LR__4381
2d18c                 | LR__4380
2d18c     18 4E 05 F1 | 	add	fp, #24
2d190     A7 2C 02 FB | 	rdlong	local04, fp
2d194     18 4E 85 F1 | 	sub	fp, #24
2d198     E1 F5 05 FF 
2d19c     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2d1a0     24 4E 05 C1 |  if_b	add	fp, #36
2d1a4     A7 2C 02 CB |  if_b	rdlong	local04, fp
2d1a8     80 00 04 CF 
2d1ac     00 2C 46 C5 |  if_b	or	local04, ##134283264
2d1b0     A7 2C 62 CC |  if_b	wrlong	local04, fp
2d1b4     24 4E 85 C1 |  if_b	sub	fp, #36
2d1b8                 | LR__4381
2d1b8     18 4E 05 F1 | 	add	fp, #24
2d1bc     A7 2C 02 FB | 	rdlong	local04, fp
2d1c0     18 4E 85 F1 | 	sub	fp, #24
2d1c4     F0 FA 02 FF 
2d1c8     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2d1cc     1C 4E 05 C1 |  if_b	add	fp, #28
2d1d0     00 01 80 CF 
2d1d4     A7 08 68 CC |  if_b	wrlong	##131076, fp
2d1d8     1C 4E 85 C1 |  if_b	sub	fp, #28
2d1dc     A8 00 90 CD |  if_b	jmp	#LR__4385
2d1e0     18 4E 05 F1 | 	add	fp, #24
2d1e4     A7 2C 02 FB | 	rdlong	local04, fp
2d1e8     18 4E 85 F1 | 	sub	fp, #24
2d1ec     68 78 04 FF 
2d1f0     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2d1f4     1C 4E 05 C1 |  if_b	add	fp, #28
2d1f8     80 01 80 CF 
2d1fc     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2d200     1C 4E 85 C1 |  if_b	sub	fp, #28
2d204     80 00 90 CD |  if_b	jmp	#LR__4384
2d208     18 4E 05 F1 | 	add	fp, #24
2d20c     A7 2C 02 FB | 	rdlong	local04, fp
2d210     18 4E 85 F1 | 	sub	fp, #24
2d214     E1 F5 05 FF 
2d218     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2d21c     1C 4E 05 C1 |  if_b	add	fp, #28
2d220     00 02 80 CF 
2d224     A7 10 68 CC |  if_b	wrlong	##262152, fp
2d228     1C 4E 85 C1 |  if_b	sub	fp, #28
2d22c     58 00 90 CD |  if_b	jmp	#LR__4383
2d230     18 4E 05 F1 | 	add	fp, #24
2d234     A7 2C 02 FB | 	rdlong	local04, fp
2d238     18 4E 85 F1 | 	sub	fp, #24
2d23c     59 73 07 FF 
2d240     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2d244     1C 4E 05 C1 |  if_b	add	fp, #28
2d248     80 02 80 CF 
2d24c     A7 14 68 CC |  if_b	wrlong	##327690, fp
2d250     1C 4E 85 C1 |  if_b	sub	fp, #28
2d254     30 00 90 CD |  if_b	jmp	#LR__4382
2d258     18 4E 05 F1 | 	add	fp, #24
2d25c     A7 2C 02 FB | 	rdlong	local04, fp
2d260     18 4E 85 F1 | 	sub	fp, #24
2d264     D1 F0 08 FF 
2d268     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2d26c     1C 4E 05 C1 |  if_b	add	fp, #28
2d270     00 03 80 CF 
2d274     A7 18 68 CC |  if_b	wrlong	##393228, fp
2d278     1C 4E 85 F3 | 	sumc	fp, #28
2d27c     80 03 80 3F 
2d280     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2d284     1C 4E 85 31 |  if_ae	sub	fp, #28
2d288                 | LR__4382
2d288                 | LR__4383
2d288                 | LR__4384
2d288                 | LR__4385
2d288                 | LR__4386
2d288                 | LR__4387
2d288     0C 4E 05 F1 | 	add	fp, #12
2d28c     A7 2C C2 FA | 	rdbyte	local04, fp
2d290     01 00 00 FF 
2d294     21 E4 05 F1 | 	add	objptr, ##545
2d298     F2 2C 42 FC | 	wrbyte	local04, objptr
2d29c     A7 26 CA FA | 	rdbyte	local01, fp wz
2d2a0     00 2C 06 56 |  if_ne	mov	local04, #0
2d2a4     01 2C 06 A6 |  if_e	mov	local04, #1
2d2a8     20 4E 05 F1 | 	add	fp, #32
2d2ac     A7 2C 42 FC | 	wrbyte	local04, fp
2d2b0     A7 2C C2 FA | 	rdbyte	local04, fp
2d2b4     2C 4E 85 F1 | 	sub	fp, #44
2d2b8     01 E4 85 F1 | 	sub	objptr, #1
2d2bc     F2 2C 42 FC | 	wrbyte	local04, objptr
2d2c0     01 00 00 FF 
2d2c4     20 E4 85 F1 | 	sub	objptr, ##544
2d2c8     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1198
2d2cc     34 4E 05 F1 | 	add	fp, #52
2d2d0     A7 12 02 FB | 	rdlong	arg01, fp
2d2d4     18 4E 85 F1 | 	sub	fp, #24
2d2d8     A7 14 02 FB | 	rdlong	arg02, fp
2d2dc     09 15 12 FC | 	wxpin	arg02, arg01
2d2e0     1C 4E 05 F1 | 	add	fp, #28
2d2e4     A7 12 02 FB | 	rdlong	arg01, fp
2d2e8     14 4E 85 F1 | 	sub	fp, #20
2d2ec     A7 14 02 FB | 	rdlong	arg02, fp
2d2f0     09 15 02 FC | 	wrpin	arg02, arg01
2d2f4                 | ' 
2d2f4                 | ' 		}
2d2f4                 | ' 	}
2d2f4                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2d2f4                 | ' 	CardType = ty;
2d2f4                 | ' 	s = ty ? 0 :  0x01 ;
2d2f4                 | ' 	Stat = s;
2d2f4                 | ' 
2d2f4                 | ' 	deselect();
2d2f4                 | ' 
2d2f4                 | ' 
2d2f4                 | ' 	_wxpin( PIN_CLK, ck_div );
2d2f4                 | ' 	_wrpin( PIN_DI, spm_tx );
2d2f4                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2d2f4                 | ' 	return s;
2d2f4     08 4E 05 F1 | 	add	fp, #8
2d2f8     A7 FA C1 FA | 	rdbyte	result1, fp
2d2fc     2C 4E 85 F1 | 	sub	fp, #44
2d300                 | LR__4388
2d300     A7 F0 03 F6 | 	mov	ptra, fp
2d304     B2 00 A0 FD | 	call	#popregs_
2d308                 | _fatfs_cc_disk_initialize_ret
2d308     2D 00 64 FD | 	ret
2d30c                 | 
2d30c                 | _fatfs_cc_disk_read
2d30c     05 4A 05 F6 | 	mov	COUNT_, #5
2d310     A8 00 A0 FD | 	call	#pushregs_
2d314     0A 27 02 F6 | 	mov	local01, arg02
2d318     0B 29 02 F6 | 	mov	local02, arg03
2d31c     0C 2B 02 F6 | 	mov	local03, arg04
2d320     00 12 0E F2 | 	cmp	arg01, #0 wz
2d324     01 FA 05 56 |  if_ne	mov	result1, #1
2d328                 | ' 
2d328                 | ' 	return Stat;
2d328     01 00 00 AF 
2d32c     20 E4 05 A1 |  if_e	add	objptr, ##544
2d330     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2d334     01 00 00 AF 
2d338     20 E4 85 A1 |  if_e	sub	objptr, ##544
2d33c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2d340     01 FA CD F7 | 	test	result1, #1 wz
2d344     03 FA 05 56 |  if_ne	mov	result1, #3
2d348     84 00 90 5D |  if_ne	jmp	#LR__4392
2d34c     01 00 00 FF 
2d350     21 E4 05 F1 | 	add	objptr, ##545
2d354     F2 2C C2 FA | 	rdbyte	local04, objptr
2d358     01 00 00 FF 
2d35c     21 E4 85 F1 | 	sub	objptr, ##545
2d360     08 2C CE F7 | 	test	local04, #8 wz
2d364     09 28 66 A0 |  if_e	shl	local02, #9
2d368     02 2A 16 F2 | 	cmp	local03, #2 wc
2d36c     12 2C 06 36 |  if_ae	mov	local04, #18
2d370     11 2C 06 C6 |  if_b	mov	local04, #17
2d374     14 15 02 F6 | 	mov	arg02, local02
2d378     16 13 02 F6 | 	mov	arg01, local04
2d37c     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1212
2d380     FD 2E 02 F6 | 	mov	local05, result1
2d384     07 2E 4E F7 | 	zerox	local05, #7 wz
2d388     30 00 90 5D |  if_ne	jmp	#LR__4391
2d38c                 | ' 		do {
2d38c                 | LR__4390
2d38c     13 13 02 F6 | 	mov	arg01, local01
2d390     09 14 C6 F9 | 	decod	arg02, #9
2d394     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1206
2d398     00 FA 0D F2 | 	cmp	result1, #0 wz
2d39c     01 00 00 5F 
2d3a0     00 26 06 51 |  if_ne	add	local01, ##512
2d3a4     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4390
2d3a8     16 2D E2 F8 | 	getbyte	local04, local04, #0
2d3ac     12 2C 0E F2 | 	cmp	local04, #18 wz
2d3b0     0C 12 06 A6 |  if_e	mov	arg01, #12
2d3b4     00 14 06 A6 |  if_e	mov	arg02, #0
2d3b8     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1212
2d3bc                 | LR__4391
2d3bc     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1198
2d3c0                 | ' 	}
2d3c0                 | ' 	deselect();
2d3c0                 | ' 
2d3c0                 | ' 	return count ? RES_ERROR : RES_OK;
2d3c0     00 2A 0E F2 | 	cmp	local03, #0 wz
2d3c4     01 2E 06 56 |  if_ne	mov	local05, #1
2d3c8     00 2E 06 A6 |  if_e	mov	local05, #0
2d3cc     17 FB 01 F6 | 	mov	result1, local05
2d3d0                 | LR__4392
2d3d0     A7 F0 03 F6 | 	mov	ptra, fp
2d3d4     B2 00 A0 FD | 	call	#popregs_
2d3d8                 | _fatfs_cc_disk_read_ret
2d3d8     2D 00 64 FD | 	ret
2d3dc                 | 
2d3dc                 | _fatfs_cc_disk_write
2d3dc     04 4A 05 F6 | 	mov	COUNT_, #4
2d3e0     A8 00 A0 FD | 	call	#pushregs_
2d3e4     0A 27 02 F6 | 	mov	local01, arg02
2d3e8     0C 29 02 F6 | 	mov	local02, arg04
2d3ec     0B 2B 02 F6 | 	mov	local03, arg03
2d3f0     00 12 0E F2 | 	cmp	arg01, #0 wz
2d3f4     01 FA 05 56 |  if_ne	mov	result1, #1
2d3f8                 | ' 
2d3f8                 | ' 	return Stat;
2d3f8     01 00 00 AF 
2d3fc     20 E4 05 A1 |  if_e	add	objptr, ##544
2d400     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2d404     01 00 00 AF 
2d408     20 E4 85 A1 |  if_e	sub	objptr, ##544
2d40c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2d410     01 FA CD F7 | 	test	result1, #1 wz
2d414     03 FA 05 56 |  if_ne	mov	result1, #3
2d418     D4 00 90 5D |  if_ne	jmp	#LR__4404
2d41c     01 00 00 FF 
2d420     21 E4 05 F1 | 	add	objptr, ##545
2d424     F2 16 C2 FA | 	rdbyte	arg03, objptr
2d428     01 00 00 FF 
2d42c     21 E4 85 F1 | 	sub	objptr, ##545
2d430     08 16 CE F7 | 	test	arg03, #8 wz
2d434     09 2A 66 A0 |  if_e	shl	local03, #9
2d438     01 28 0E F2 | 	cmp	local02, #1 wz
2d43c     30 00 90 5D |  if_ne	jmp	#LR__4400
2d440     18 12 06 F6 | 	mov	arg01, #24
2d444     15 15 02 F6 | 	mov	arg02, local03
2d448     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1212
2d44c     FD 2C 02 F6 | 	mov	local04, result1
2d450     07 2C 4E F7 | 	zerox	local04, #7 wz
2d454     84 00 90 5D |  if_ne	jmp	#LR__4403
2d458     13 13 02 F6 | 	mov	arg01, local01
2d45c     FE 14 06 F6 | 	mov	arg02, #254
2d460     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1208
2d464     00 FA 0D F2 | 	cmp	result1, #0 wz
2d468     00 28 06 56 |  if_ne	mov	local02, #0
2d46c     6C 00 90 FD | 	jmp	#LR__4403
2d470                 | LR__4400
2d470     01 00 00 FF 
2d474     21 E4 05 F1 | 	add	objptr, ##545
2d478     F2 2C C2 FA | 	rdbyte	local04, objptr
2d47c     01 00 00 FF 
2d480     21 E4 85 F1 | 	sub	objptr, ##545
2d484     06 2C CE F7 | 	test	local04, #6 wz
2d488     97 12 06 56 |  if_ne	mov	arg01, #151
2d48c     14 15 02 56 |  if_ne	mov	arg02, local02
2d490     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1212
2d494     15 15 02 F6 | 	mov	arg02, local03
2d498     19 12 06 F6 | 	mov	arg01, #25
2d49c     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1212
2d4a0     FD 2C 02 F6 | 	mov	local04, result1
2d4a4     07 2C 4E F7 | 	zerox	local04, #7 wz
2d4a8     30 00 90 5D |  if_ne	jmp	#LR__4402
2d4ac                 | ' 			do {
2d4ac                 | LR__4401
2d4ac     13 13 02 F6 | 	mov	arg01, local01
2d4b0     FC 14 06 F6 | 	mov	arg02, #252
2d4b4     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1208
2d4b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2d4bc     01 00 00 5F 
2d4c0     00 26 06 51 |  if_ne	add	local01, ##512
2d4c4     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4401
2d4c8     00 12 06 F6 | 	mov	arg01, #0
2d4cc     FD 14 06 F6 | 	mov	arg02, #253
2d4d0     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1208
2d4d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d4d8     01 28 06 A6 |  if_e	mov	local02, #1
2d4dc                 | LR__4402
2d4dc                 | LR__4403
2d4dc     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1198
2d4e0                 | ' 				count = 1;
2d4e0                 | ' 		}
2d4e0                 | ' 	}
2d4e0                 | ' 	deselect();
2d4e0                 | ' 
2d4e0                 | ' 	return count ? RES_ERROR : RES_OK;
2d4e0     00 28 0E F2 | 	cmp	local02, #0 wz
2d4e4     01 2C 06 56 |  if_ne	mov	local04, #1
2d4e8     00 2C 06 A6 |  if_e	mov	local04, #0
2d4ec     16 FB 01 F6 | 	mov	result1, local04
2d4f0                 | LR__4404
2d4f0     A7 F0 03 F6 | 	mov	ptra, fp
2d4f4     B2 00 A0 FD | 	call	#popregs_
2d4f8                 | _fatfs_cc_disk_write_ret
2d4f8     2D 00 64 FD | 	ret
2d4fc                 | 
2d4fc                 | _fatfs_cc_disk_ioctl
2d4fc     01 4A 05 F6 | 	mov	COUNT_, #1
2d500     A8 00 A0 FD | 	call	#pushregs_
2d504     30 F0 07 F1 | 	add	ptra, #48
2d508     04 4E 05 F1 | 	add	fp, #4
2d50c     A7 12 42 FC | 	wrbyte	arg01, fp
2d510     04 4E 05 F1 | 	add	fp, #4
2d514     A7 14 42 FC | 	wrbyte	arg02, fp
2d518     04 4E 05 F1 | 	add	fp, #4
2d51c     A7 16 62 FC | 	wrlong	arg03, fp
2d520     08 4E 85 F1 | 	sub	fp, #8
2d524     A7 12 CA FA | 	rdbyte	arg01, fp wz
2d528     04 4E 85 F1 | 	sub	fp, #4
2d52c     01 FA 05 56 |  if_ne	mov	result1, #1
2d530                 | ' 
2d530                 | ' 	return Stat;
2d530     01 00 00 AF 
2d534     20 E4 05 A1 |  if_e	add	objptr, ##544
2d538     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2d53c     01 00 00 AF 
2d540     20 E4 85 A1 |  if_e	sub	objptr, ##544
2d544     FD FA E1 F8 | 	getbyte	result1, result1, #0
2d548     01 FA CD F7 | 	test	result1, #1 wz
2d54c     03 FA 05 56 |  if_ne	mov	result1, #3
2d550     E4 01 90 5D |  if_ne	jmp	#LR__4418
2d554     10 4E 05 F1 | 	add	fp, #16
2d558     A7 02 68 FC | 	wrlong	#1, fp
2d55c                 | ' 
2d55c                 | ' 	res = RES_ERROR;
2d55c                 | ' 	switch (ctrl) {
2d55c     08 4E 85 F1 | 	sub	fp, #8
2d560     A7 26 C2 FA | 	rdbyte	local01, fp
2d564     08 4E 85 F1 | 	sub	fp, #8
2d568     04 26 26 F3 | 	fle	local01, #4
2d56c     30 26 62 FD | 	jmprel	local01
2d570                 | LR__4410
2d570     10 00 90 FD | 	jmp	#LR__4411
2d574     24 00 90 FD | 	jmp	#LR__4412
2d578     A0 01 90 FD | 	jmp	#LR__4416
2d57c     80 01 90 FD | 	jmp	#LR__4415
2d580     98 01 90 FD | 	jmp	#LR__4416
2d584                 | LR__4411
2d584     B4 79 B0 FD | 	call	#_fatfs_cc_select_1202
2d588     00 FA 0D F2 | 	cmp	result1, #0 wz
2d58c     10 4E 05 51 |  if_ne	add	fp, #16
2d590     A7 00 68 5C |  if_ne	wrlong	#0, fp
2d594     10 4E 85 51 |  if_ne	sub	fp, #16
2d598                 | ' 			break;
2d598     8C 01 90 FD | 	jmp	#LR__4417
2d59c                 | LR__4412
2d59c     09 12 06 F6 | 	mov	arg01, #9
2d5a0     00 14 06 F6 | 	mov	arg02, #0
2d5a4     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1212
2d5a8     FD 26 02 F6 | 	mov	local01, result1
2d5ac     07 26 4E F7 | 	zerox	local01, #7 wz
2d5b0     74 01 90 5D |  if_ne	jmp	#LR__4417
2d5b4     18 4E 05 F1 | 	add	fp, #24
2d5b8     A7 12 02 F6 | 	mov	arg01, fp
2d5bc     18 4E 85 F1 | 	sub	fp, #24
2d5c0     10 14 06 F6 | 	mov	arg02, #16
2d5c4     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1206
2d5c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2d5cc     58 01 90 AD |  if_e	jmp	#LR__4417
2d5d0     18 4E 05 F1 | 	add	fp, #24
2d5d4     A7 26 C2 FA | 	rdbyte	local01, fp
2d5d8     18 4E 85 F1 | 	sub	fp, #24
2d5dc     06 26 46 F0 | 	shr	local01, #6
2d5e0     01 26 0E F2 | 	cmp	local01, #1 wz
2d5e4     5C 00 90 5D |  if_ne	jmp	#LR__4413
2d5e8     21 4E 05 F1 | 	add	fp, #33
2d5ec     A7 26 C2 FA | 	rdbyte	local01, fp
2d5f0     01 4E 85 F1 | 	sub	fp, #1
2d5f4     A7 FA C1 FA | 	rdbyte	result1, fp
2d5f8     FD FA 31 F9 | 	getword	result1, result1, #0
2d5fc     08 FA 65 F0 | 	shl	result1, #8
2d600     FD 26 02 F1 | 	add	local01, result1
2d604     01 4E 85 F1 | 	sub	fp, #1
2d608     A7 FA C1 FA | 	rdbyte	result1, fp
2d60c     3F FA 05 F5 | 	and	result1, #63
2d610     10 FA 65 F0 | 	shl	result1, #16
2d614     FD 26 02 F1 | 	add	local01, result1
2d618     01 26 06 F1 | 	add	local01, #1
2d61c     09 4E 05 F1 | 	add	fp, #9
2d620     A7 26 62 FC | 	wrlong	local01, fp
2d624     1C 4E 85 F1 | 	sub	fp, #28
2d628     A7 26 02 FB | 	rdlong	local01, fp
2d62c     1C 4E 05 F1 | 	add	fp, #28
2d630     A7 FA 01 FB | 	rdlong	result1, fp
2d634     28 4E 85 F1 | 	sub	fp, #40
2d638     0A FA 65 F0 | 	shl	result1, #10
2d63c     13 FB 61 FC | 	wrlong	result1, local01
2d640     AC 00 90 FD | 	jmp	#LR__4414
2d644                 | LR__4413
2d644     1D 4E 05 F1 | 	add	fp, #29
2d648     A7 26 C2 FA | 	rdbyte	local01, fp
2d64c     13 27 42 F8 | 	getnib	local01, local01, #0
2d650     05 4E 05 F1 | 	add	fp, #5
2d654     A7 FA C1 FA | 	rdbyte	result1, fp
2d658     80 FA 05 F5 | 	and	result1, #128
2d65c     07 FA C5 F0 | 	sar	result1, #7
2d660     FD 26 02 F1 | 	add	local01, result1
2d664     01 4E 85 F1 | 	sub	fp, #1
2d668     A7 FA C1 FA | 	rdbyte	result1, fp
2d66c     03 FA 05 F5 | 	and	result1, #3
2d670     01 FA 65 F0 | 	shl	result1, #1
2d674     FD 26 02 F1 | 	add	local01, result1
2d678     02 26 06 F1 | 	add	local01, #2
2d67c     0D 4E 85 F1 | 	sub	fp, #13
2d680     A7 26 42 FC | 	wrbyte	local01, fp
2d684     0C 4E 05 F1 | 	add	fp, #12
2d688     A7 26 C2 FA | 	rdbyte	local01, fp
2d68c     06 26 46 F0 | 	shr	local01, #6
2d690     01 4E 85 F1 | 	sub	fp, #1
2d694     A7 FA C1 FA | 	rdbyte	result1, fp
2d698     FD FA 31 F9 | 	getword	result1, result1, #0
2d69c     02 FA 65 F0 | 	shl	result1, #2
2d6a0     FD 26 02 F1 | 	add	local01, result1
2d6a4     01 4E 85 F1 | 	sub	fp, #1
2d6a8     A7 FA C1 FA | 	rdbyte	result1, fp
2d6ac     03 FA 05 F5 | 	and	result1, #3
2d6b0     FD FA 31 F9 | 	getword	result1, result1, #0
2d6b4     0A FA 65 F0 | 	shl	result1, #10
2d6b8     FD 26 02 F1 | 	add	local01, result1
2d6bc     01 26 06 F1 | 	add	local01, #1
2d6c0     0A 4E 05 F1 | 	add	fp, #10
2d6c4     A7 26 62 FC | 	wrlong	local01, fp
2d6c8     1C 4E 85 F1 | 	sub	fp, #28
2d6cc     A7 26 02 FB | 	rdlong	local01, fp
2d6d0     1C 4E 05 F1 | 	add	fp, #28
2d6d4     A7 FA 01 FB | 	rdlong	result1, fp
2d6d8     14 4E 85 F1 | 	sub	fp, #20
2d6dc     A7 16 C2 FA | 	rdbyte	arg03, fp
2d6e0     14 4E 85 F1 | 	sub	fp, #20
2d6e4     09 16 86 F1 | 	sub	arg03, #9
2d6e8     0B FB 61 F0 | 	shl	result1, arg03
2d6ec     13 FB 61 FC | 	wrlong	result1, local01
2d6f0                 | LR__4414
2d6f0     10 4E 05 F1 | 	add	fp, #16
2d6f4     A7 00 68 FC | 	wrlong	#0, fp
2d6f8     10 4E 85 F1 | 	sub	fp, #16
2d6fc                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2d6fc                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2d6fc                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2d6fc                 | ' 				}
2d6fc                 | ' 				res = RES_OK;
2d6fc                 | ' 			}
2d6fc                 | ' 			break;
2d6fc     28 00 90 FD | 	jmp	#LR__4417
2d700                 | LR__4415
2d700     0C 4E 05 F1 | 	add	fp, #12
2d704     A7 26 02 FB | 	rdlong	local01, fp
2d708     13 01 69 FC | 	wrlong	#128, local01
2d70c     04 4E 05 F1 | 	add	fp, #4
2d710     A7 00 68 FC | 	wrlong	#0, fp
2d714     10 4E 85 F1 | 	sub	fp, #16
2d718                 | ' 			*(DWORD*)buff = 128;
2d718                 | ' 			res = RES_OK;
2d718                 | ' 			break;
2d718     0C 00 90 FD | 	jmp	#LR__4417
2d71c                 | LR__4416
2d71c     10 4E 05 F1 | 	add	fp, #16
2d720     A7 08 68 FC | 	wrlong	#4, fp
2d724     10 4E 85 F1 | 	sub	fp, #16
2d728                 | LR__4417
2d728     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1198
2d72c                 | ' 			res = RES_PARERR;
2d72c                 | ' 	}
2d72c                 | ' 
2d72c                 | ' 	deselect();
2d72c                 | ' 
2d72c                 | ' 	return res;
2d72c     10 4E 05 F1 | 	add	fp, #16
2d730     A7 FA 01 FB | 	rdlong	result1, fp
2d734     10 4E 85 F1 | 	sub	fp, #16
2d738                 | LR__4418
2d738     A7 F0 03 F6 | 	mov	ptra, fp
2d73c     B2 00 A0 FD | 	call	#popregs_
2d740                 | _fatfs_cc_disk_ioctl_ret
2d740     2D 00 64 FD | 	ret
2d744                 | 
2d744                 | _fatfs_cc_disk_setpins
2d744     00 12 0E F2 | 	cmp	arg01, #0 wz
2d748     01 FA 65 56 |  if_ne	neg	result1, #1
2d74c     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2d750     01 00 00 FF 
2d754     10 E4 05 F1 | 	add	objptr, ##528
2d758     F2 14 62 FC | 	wrlong	arg02, objptr
2d75c     04 E4 05 F1 | 	add	objptr, #4
2d760     F2 16 62 FC | 	wrlong	arg03, objptr
2d764     04 E4 05 F1 | 	add	objptr, #4
2d768     F2 18 62 FC | 	wrlong	arg04, objptr
2d76c     04 E4 05 F1 | 	add	objptr, #4
2d770     F2 1A 62 FC | 	wrlong	arg05, objptr
2d774     01 00 00 FF 
2d778     1C E4 85 F1 | 	sub	objptr, ##540
2d77c     00 FA 05 F6 | 	mov	result1, #0
2d780                 | _fatfs_cc_disk_setpins_ret
2d780     2D 00 64 FD | 	ret
2d784                 | 
2d784                 | _fatfs_cc_tchar2uni
2d784     09 01 02 FB | 	rdlong	_var01, arg01
2d788     00 03 02 F6 | 	mov	_var02, _var01
2d78c     01 00 06 F1 | 	add	_var01, #1
2d790     00 05 02 F6 | 	mov	_var03, _var01
2d794     01 07 C2 FA | 	rdbyte	_var04, _var02
2d798     80 06 CE F7 | 	test	_var04, #128 wz
2d79c     E8 00 90 AD |  if_e	jmp	#LR__4427
2d7a0     03 09 02 F6 | 	mov	_var05, _var04
2d7a4     E0 08 06 F5 | 	and	_var05, #224
2d7a8     C0 08 0E F2 | 	cmp	_var05, #192 wz
2d7ac     1F 06 06 A5 |  if_e	and	_var04, #31
2d7b0     01 0A 06 A6 |  if_e	mov	_var06, #1
2d7b4     34 00 90 AD |  if_e	jmp	#LR__4421
2d7b8     03 09 02 F6 | 	mov	_var05, _var04
2d7bc     F0 08 06 F5 | 	and	_var05, #240
2d7c0     E0 08 0E F2 | 	cmp	_var05, #224 wz
2d7c4     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2d7c8     02 0A 06 A6 |  if_e	mov	_var06, #2
2d7cc     1C 00 90 AD |  if_e	jmp	#LR__4420
2d7d0     03 09 02 F6 | 	mov	_var05, _var04
2d7d4     F8 08 06 F5 | 	and	_var05, #248
2d7d8     F0 08 0E F2 | 	cmp	_var05, #240 wz
2d7dc     07 06 06 A5 |  if_e	and	_var04, #7
2d7e0     03 0A 06 A6 |  if_e	mov	_var06, #3
2d7e4                 | ' 			return 0xFFFFFFFF;
2d7e4     01 FA 65 56 |  if_ne	neg	result1, #1
2d7e8     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2d7ec                 | LR__4420
2d7ec                 | LR__4421
2d7ec                 | ' 		}
2d7ec                 | ' 		do {
2d7ec                 | LR__4422
2d7ec     02 0D C2 FA | 	rdbyte	_var07, _var03
2d7f0     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2d7f4     C0 08 06 F5 | 	and	_var05, #192
2d7f8     80 08 0E F2 | 	cmp	_var05, #128 wz
2d7fc     01 04 06 F1 | 	add	_var03, #1
2d800     01 FA 65 56 |  if_ne	neg	result1, #1
2d804     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2d808     06 06 66 F0 | 	shl	_var04, #6
2d80c     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2d810     3F 02 06 F5 | 	and	_var02, #63
2d814     01 07 42 F5 | 	or	_var04, _var02
2d818     F4 0B 6E FB | 	djnz	_var06, #LR__4422
2d81c     80 06 16 F2 | 	cmp	_var04, #128 wc
2d820     24 00 90 CD |  if_b	jmp	#LR__4424
2d824     6C 00 00 FF 
2d828     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2d82c     0C 00 90 CD |  if_b	jmp	#LR__4423
2d830     70 00 00 FF 
2d834     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2d838     0C 00 90 CD |  if_b	jmp	#LR__4424
2d83c                 | LR__4423
2d83c     80 08 00 FF 
2d840     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2d844     08 00 90 CD |  if_b	jmp	#LR__4425
2d848                 | LR__4424
2d848     01 FA 65 F6 | 	neg	result1, #1
2d84c     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2d850                 | LR__4425
2d850     80 00 00 FF 
2d854     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2d858     2C 00 90 CD |  if_b	jmp	#LR__4426
2d85c     03 03 02 F6 | 	mov	_var02, _var04
2d860     80 00 00 FF 
2d864     00 02 86 F1 | 	sub	_var02, ##65536
2d868     06 02 66 F0 | 	shl	_var02, #6
2d86c     80 FF 01 FF 
2d870     00 02 06 F5 | 	and	_var02, ##67043328
2d874     6E 00 6C FF 
2d878     00 08 06 F6 | 	mov	_var05, ##-671032320
2d87c     01 09 42 F5 | 	or	_var05, _var02
2d880     09 06 46 F7 | 	zerox	_var04, #9
2d884     04 07 42 F5 | 	or	_var04, _var05
2d888                 | LR__4426
2d888                 | LR__4427
2d888     09 05 62 FC | 	wrlong	_var03, arg01
2d88c                 | ' 	}
2d88c                 | ' #line 811 "ff.c"
2d88c                 | ' 	*str = p;
2d88c                 | ' 	return uc;
2d88c     03 FB 01 F6 | 	mov	result1, _var04
2d890                 | _fatfs_cc_tchar2uni_ret
2d890     2D 00 64 FD | 	ret
2d894                 | 
2d894                 | _fatfs_cc_put_utf
2d894     80 12 16 F2 | 	cmp	arg01, #128 wc
2d898     18 00 90 3D |  if_ae	jmp	#LR__4430
2d89c     01 16 16 F2 | 	cmp	arg03, #1 wc
2d8a0     00 FA 05 C6 |  if_b	mov	result1, #0
2d8a4     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2d8a8     0A 13 42 FC | 	wrbyte	arg01, arg02
2d8ac                 | ' 		*buf = (TCHAR)chr;
2d8ac                 | ' 		return 1;
2d8ac     01 FA 05 F6 | 	mov	result1, #1
2d8b0     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2d8b4                 | LR__4430
2d8b4     04 00 00 FF 
2d8b8     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2d8bc     40 00 90 3D |  if_ae	jmp	#LR__4431
2d8c0     02 16 16 F2 | 	cmp	arg03, #2 wc
2d8c4     00 FA 05 C6 |  if_b	mov	result1, #0
2d8c8     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2d8cc     09 FB 01 F6 | 	mov	result1, arg01
2d8d0     06 FA 45 F0 | 	shr	result1, #6
2d8d4     1F FA 05 F5 | 	and	result1, #31
2d8d8     C0 16 06 F6 | 	mov	arg03, #192
2d8dc     FD 16 42 F5 | 	or	arg03, result1
2d8e0     0A 17 42 FC | 	wrbyte	arg03, arg02
2d8e4     01 14 06 F1 | 	add	arg02, #1
2d8e8     3F 12 06 F5 | 	and	arg01, #63
2d8ec     80 FA 05 F6 | 	mov	result1, #128
2d8f0     09 FB 41 F5 | 	or	result1, arg01
2d8f4     0A FB 41 FC | 	wrbyte	result1, arg02
2d8f8                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2d8f8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2d8f8                 | ' 		return 2;
2d8f8     02 FA 05 F6 | 	mov	result1, #2
2d8fc     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2d900                 | LR__4431
2d900     80 00 00 FF 
2d904     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2d908     70 00 90 3D |  if_ae	jmp	#LR__4434
2d90c     03 16 16 F2 | 	cmp	arg03, #3 wc
2d910     18 00 90 CD |  if_b	jmp	#LR__4432
2d914     6C 00 00 FF 
2d918     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2d91c     14 00 90 CD |  if_b	jmp	#LR__4433
2d920     70 00 00 FF 
2d924     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2d928     08 00 90 3D |  if_ae	jmp	#LR__4433
2d92c                 | LR__4432
2d92c     00 FA 05 F6 | 	mov	result1, #0
2d930     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2d934                 | LR__4433
2d934     09 FB 59 F8 | 	getnib	result1, arg01, #3
2d938     E0 16 06 F6 | 	mov	arg03, #224
2d93c     FD 16 42 F5 | 	or	arg03, result1
2d940     0A 17 42 FC | 	wrbyte	arg03, arg02
2d944     01 14 06 F1 | 	add	arg02, #1
2d948     09 FB 01 F6 | 	mov	result1, arg01
2d94c     06 FA 45 F0 | 	shr	result1, #6
2d950     3F FA 05 F5 | 	and	result1, #63
2d954     80 16 06 F6 | 	mov	arg03, #128
2d958     FD 16 42 F5 | 	or	arg03, result1
2d95c     0A 17 42 FC | 	wrbyte	arg03, arg02
2d960     01 14 06 F1 | 	add	arg02, #1
2d964     3F 12 06 F5 | 	and	arg01, #63
2d968     80 FA 05 F6 | 	mov	result1, #128
2d96c     09 FB 41 F5 | 	or	result1, arg01
2d970     0A FB 41 FC | 	wrbyte	result1, arg02
2d974                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2d974                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2d974                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2d974                 | ' 		return 3;
2d974     03 FA 05 F6 | 	mov	result1, #3
2d978     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2d97c                 | LR__4434
2d97c     04 16 16 F2 | 	cmp	arg03, #4 wc
2d980     00 FA 05 C6 |  if_b	mov	result1, #0
2d984     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2d988     09 01 02 F6 | 	mov	_var01, arg01
2d98c     E0 01 06 F4 | 	bitl	_var01, #480
2d990     00 00 6C FF 
2d994     00 00 86 F1 | 	sub	_var01, ##-671088640
2d998     06 00 46 F0 | 	shr	_var01, #6
2d99c     09 13 32 F9 | 	getword	arg01, arg01, #0
2d9a0     6E 00 00 FF 
2d9a4     00 12 86 F1 | 	sub	arg01, ##56320
2d9a8     00 08 00 FF 
2d9ac     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2d9b0     02 00 00 CF 
2d9b4     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2d9b8     00 FA 05 36 |  if_ae	mov	result1, #0
2d9bc     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2d9c0     09 01 42 F5 | 	or	_var01, arg01
2d9c4     80 00 00 FF 
2d9c8     00 00 06 F1 | 	add	_var01, ##65536
2d9cc     00 FB 01 F6 | 	mov	result1, _var01
2d9d0     12 FA 45 F0 | 	shr	result1, #18
2d9d4     07 FA 05 F5 | 	and	result1, #7
2d9d8     F0 16 06 F6 | 	mov	arg03, #240
2d9dc     FD 16 42 F5 | 	or	arg03, result1
2d9e0     0A 17 42 FC | 	wrbyte	arg03, arg02
2d9e4     01 14 06 F1 | 	add	arg02, #1
2d9e8     00 FB 01 F6 | 	mov	result1, _var01
2d9ec     0C FA 45 F0 | 	shr	result1, #12
2d9f0     3F FA 05 F5 | 	and	result1, #63
2d9f4     80 16 06 F6 | 	mov	arg03, #128
2d9f8     FD 16 42 F5 | 	or	arg03, result1
2d9fc     0A 17 42 FC | 	wrbyte	arg03, arg02
2da00     01 14 06 F1 | 	add	arg02, #1
2da04     00 FB 01 F6 | 	mov	result1, _var01
2da08     06 FA 45 F0 | 	shr	result1, #6
2da0c     3F FA 05 F5 | 	and	result1, #63
2da10     80 16 06 F6 | 	mov	arg03, #128
2da14     FD 16 42 F5 | 	or	arg03, result1
2da18     0A 17 42 FC | 	wrbyte	arg03, arg02
2da1c     01 14 06 F1 | 	add	arg02, #1
2da20     3F 00 06 F5 | 	and	_var01, #63
2da24     80 FA 05 F6 | 	mov	result1, #128
2da28     00 FB 41 F5 | 	or	result1, _var01
2da2c     0A FB 41 FC | 	wrbyte	result1, arg02
2da30                 | ' 	chr = (hc | chr) + 0x10000;
2da30                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2da30                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2da30                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2da30                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2da30                 | ' 	return 4;
2da30     04 FA 05 F6 | 	mov	result1, #4
2da34                 | _fatfs_cc_put_utf_ret
2da34     2D 00 64 FD | 	ret
2da38                 | 
2da38                 | _fatfs_cc_sync_window
2da38     02 4A 05 F6 | 	mov	COUNT_, #2
2da3c     A8 00 A0 FD | 	call	#pushregs_
2da40     09 27 02 F6 | 	mov	local01, arg01
2da44     00 28 06 F6 | 	mov	local02, #0
2da48     03 26 06 F1 | 	add	local01, #3
2da4c     13 FB C9 FA | 	rdbyte	result1, local01 wz
2da50     03 26 86 F1 | 	sub	local01, #3
2da54     A4 00 90 AD |  if_e	jmp	#LR__4442
2da58     01 26 06 F1 | 	add	local01, #1
2da5c     13 13 C2 FA | 	rdbyte	arg01, local01
2da60     33 26 06 F1 | 	add	local01, #51
2da64     13 15 02 F6 | 	mov	arg02, local01
2da68     04 26 86 F1 | 	sub	local01, #4
2da6c     13 17 02 FB | 	rdlong	arg03, local01
2da70     30 26 86 F1 | 	sub	local01, #48
2da74     01 18 06 F6 | 	mov	arg04, #1
2da78     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2da7c     00 FA 0D F2 | 	cmp	result1, #0 wz
2da80     74 00 90 5D |  if_ne	jmp	#LR__4440
2da84     03 26 06 F1 | 	add	local01, #3
2da88     13 01 48 FC | 	wrbyte	#0, local01
2da8c     2D 26 06 F1 | 	add	local01, #45
2da90     13 FB 01 FB | 	rdlong	result1, local01
2da94     0C 26 86 F1 | 	sub	local01, #12
2da98     13 19 02 FB | 	rdlong	arg04, local01
2da9c     0C FB 81 F1 | 	sub	result1, arg04
2daa0     08 26 86 F1 | 	sub	local01, #8
2daa4     13 19 02 FB | 	rdlong	arg04, local01
2daa8     1C 26 86 F1 | 	sub	local01, #28
2daac     0C FB 11 F2 | 	cmp	result1, arg04 wc
2dab0     48 00 90 3D |  if_ae	jmp	#LR__4441
2dab4     02 26 06 F1 | 	add	local01, #2
2dab8     13 19 C2 FA | 	rdbyte	arg04, local01
2dabc     02 26 86 F1 | 	sub	local01, #2
2dac0     02 18 0E F2 | 	cmp	arg04, #2 wz
2dac4     34 00 90 5D |  if_ne	jmp	#LR__4441
2dac8     01 26 06 F1 | 	add	local01, #1
2dacc     13 13 C2 FA | 	rdbyte	arg01, local01
2dad0     33 26 06 F1 | 	add	local01, #51
2dad4     13 15 02 F6 | 	mov	arg02, local01
2dad8     04 26 86 F1 | 	sub	local01, #4
2dadc     13 17 02 FB | 	rdlong	arg03, local01
2dae0     14 26 86 F1 | 	sub	local01, #20
2dae4     13 27 02 FB | 	rdlong	local01, local01
2dae8     13 17 02 F1 | 	add	arg03, local01
2daec     01 18 06 F6 | 	mov	arg04, #1
2daf0     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2daf4     04 00 90 FD | 	jmp	#LR__4441
2daf8                 | LR__4440
2daf8     01 28 06 F6 | 	mov	local02, #1
2dafc                 | LR__4441
2dafc                 | LR__4442
2dafc                 | ' 			res = FR_DISK_ERR;
2dafc                 | ' 		}
2dafc                 | ' 	}
2dafc                 | ' 	return res;
2dafc     14 FB 01 F6 | 	mov	result1, local02
2db00     A7 F0 03 F6 | 	mov	ptra, fp
2db04     B2 00 A0 FD | 	call	#popregs_
2db08                 | _fatfs_cc_sync_window_ret
2db08     2D 00 64 FD | 	ret
2db0c                 | 
2db0c                 | _fatfs_cc_move_window
2db0c     03 4A 05 F6 | 	mov	COUNT_, #3
2db10     A8 00 A0 FD | 	call	#pushregs_
2db14     09 27 02 F6 | 	mov	local01, arg01
2db18     0A 29 02 F6 | 	mov	local02, arg02
2db1c     00 2A 06 F6 | 	mov	local03, #0
2db20     30 26 06 F1 | 	add	local01, #48
2db24     13 19 02 FB | 	rdlong	arg04, local01
2db28     30 26 86 F1 | 	sub	local01, #48
2db2c     0C 29 0A F2 | 	cmp	local02, arg04 wz
2db30     40 00 90 AD |  if_e	jmp	#LR__4451
2db34     13 13 02 F6 | 	mov	arg01, local01
2db38     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2db3c     FD 2A 0A F6 | 	mov	local03, result1 wz
2db40     30 00 90 5D |  if_ne	jmp	#LR__4450
2db44     01 26 06 F1 | 	add	local01, #1
2db48     13 13 C2 FA | 	rdbyte	arg01, local01
2db4c     33 26 06 F1 | 	add	local01, #51
2db50     13 15 02 F6 | 	mov	arg02, local01
2db54     14 17 02 F6 | 	mov	arg03, local02
2db58     01 18 06 F6 | 	mov	arg04, #1
2db5c     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2db60     00 FA 0D F2 | 	cmp	result1, #0 wz
2db64     01 28 66 56 |  if_ne	neg	local02, #1
2db68     01 2A 06 56 |  if_ne	mov	local03, #1
2db6c     04 26 86 F1 | 	sub	local01, #4
2db70     13 29 62 FC | 	wrlong	local02, local01
2db74                 | LR__4450
2db74                 | LR__4451
2db74                 | ' 				sect = (LBA_t)0 - 1;
2db74                 | ' 				res = FR_DISK_ERR;
2db74                 | ' 			}
2db74                 | ' 			fs->winsect = sect;
2db74                 | ' 		}
2db74                 | ' 	}
2db74                 | ' 	return res;
2db74     15 FB 01 F6 | 	mov	result1, local03
2db78     A7 F0 03 F6 | 	mov	ptra, fp
2db7c     B2 00 A0 FD | 	call	#popregs_
2db80                 | _fatfs_cc_move_window_ret
2db80     2D 00 64 FD | 	ret
2db84                 | 
2db84                 | _fatfs_cc_sync_fs
2db84     02 4A 05 F6 | 	mov	COUNT_, #2
2db88     A8 00 A0 FD | 	call	#pushregs_
2db8c     09 27 02 F6 | 	mov	local01, arg01
2db90     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2db94     FD 28 0A F6 | 	mov	local02, result1 wz
2db98     D8 00 90 5D |  if_ne	jmp	#LR__4461
2db9c     13 19 C2 FA | 	rdbyte	arg04, local01
2dba0     03 18 0E F2 | 	cmp	arg04, #3 wz
2dba4     04 26 06 A1 |  if_e	add	local01, #4
2dba8     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2dbac     04 26 86 A1 |  if_e	sub	local01, #4
2dbb0     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2dbb4     A0 00 90 5D |  if_ne	jmp	#LR__4460
2dbb8     34 26 06 F1 | 	add	local01, #52
2dbbc     13 13 02 F6 | 	mov	arg01, local01
2dbc0     00 14 06 F6 | 	mov	arg02, #0
2dbc4     09 16 C6 F9 | 	decod	arg03, #9
2dbc8     98 00 A0 FD | 	call	#\builtin_bytefill_
2dbcc     13 13 02 F6 | 	mov	arg01, local01
2dbd0     FE 13 06 F1 | 	add	arg01, #510
2dbd4     55 00 80 FF 
2dbd8     09 AB 58 FC | 	wrword	##43605, arg01
2dbdc     A9 B0 A0 FF 
2dbe0     13 A5 68 FC | 	wrlong	##1096897106, local01
2dbe4     13 13 02 F6 | 	mov	arg01, local01
2dbe8     E4 13 06 F1 | 	add	arg01, #484
2dbec     B9 A0 B0 FF 
2dbf0     09 E5 68 FC | 	wrlong	##1631679090, arg01
2dbf4     13 13 02 F6 | 	mov	arg01, local01
2dbf8     E8 13 06 F1 | 	add	arg01, #488
2dbfc     20 26 86 F1 | 	sub	local01, #32
2dc00     13 15 02 FB | 	rdlong	arg02, local01
2dc04     09 15 62 FC | 	wrlong	arg02, arg01
2dc08     20 26 06 F1 | 	add	local01, #32
2dc0c     13 13 02 F6 | 	mov	arg01, local01
2dc10     EC 13 06 F1 | 	add	arg01, #492
2dc14     24 26 86 F1 | 	sub	local01, #36
2dc18     13 15 02 FB | 	rdlong	arg02, local01
2dc1c     09 15 62 FC | 	wrlong	arg02, arg01
2dc20     10 26 06 F1 | 	add	local01, #16
2dc24     13 17 02 FB | 	rdlong	arg03, local01
2dc28     01 16 06 F1 | 	add	arg03, #1
2dc2c     10 26 06 F1 | 	add	local01, #16
2dc30     13 17 62 FC | 	wrlong	arg03, local01
2dc34     2F 26 86 F1 | 	sub	local01, #47
2dc38     13 13 C2 FA | 	rdbyte	arg01, local01
2dc3c     33 26 06 F1 | 	add	local01, #51
2dc40     13 15 02 F6 | 	mov	arg02, local01
2dc44     01 18 06 F6 | 	mov	arg04, #1
2dc48     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2dc4c     30 26 86 F1 | 	sub	local01, #48
2dc50     13 01 48 FC | 	wrbyte	#0, local01
2dc54     04 26 86 F1 | 	sub	local01, #4
2dc58                 | LR__4460
2dc58     01 26 06 F1 | 	add	local01, #1
2dc5c     13 13 C2 FA | 	rdbyte	arg01, local01
2dc60     00 14 06 F6 | 	mov	arg02, #0
2dc64     00 16 06 F6 | 	mov	arg03, #0
2dc68     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2dc6c     00 FA 0D F2 | 	cmp	result1, #0 wz
2dc70     01 28 06 56 |  if_ne	mov	local02, #1
2dc74                 | LR__4461
2dc74                 | ' 	}
2dc74                 | ' 
2dc74                 | ' 	return res;
2dc74     14 FB 01 F6 | 	mov	result1, local02
2dc78     A7 F0 03 F6 | 	mov	ptra, fp
2dc7c     B2 00 A0 FD | 	call	#popregs_
2dc80                 | _fatfs_cc_sync_fs_ret
2dc80     2D 00 64 FD | 	ret
2dc84                 | 
2dc84                 | _fatfs_cc_clst2sect
2dc84     02 14 86 F1 | 	sub	arg02, #2
2dc88     18 12 06 F1 | 	add	arg01, #24
2dc8c     09 01 02 FB | 	rdlong	_var01, arg01
2dc90     18 12 86 F1 | 	sub	arg01, #24
2dc94     02 00 86 F1 | 	sub	_var01, #2
2dc98     00 15 12 F2 | 	cmp	arg02, _var01 wc
2dc9c     00 FA 05 36 |  if_ae	mov	result1, #0
2dca0     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2dca4     0A 12 06 F1 | 	add	arg01, #10
2dca8     09 01 E2 FA | 	rdword	_var01, arg01
2dcac     0A 01 02 FD | 	qmul	_var01, arg02
2dcb0                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2dcb0     22 12 06 F1 | 	add	arg01, #34
2dcb4     09 FB 01 FB | 	rdlong	result1, arg01
2dcb8     18 00 62 FD | 	getqx	_var01
2dcbc     00 FB 01 F1 | 	add	result1, _var01
2dcc0                 | _fatfs_cc_clst2sect_ret
2dcc0     2D 00 64 FD | 	ret
2dcc4                 | 
2dcc4                 | _fatfs_cc_get_fat
2dcc4     07 4A 05 F6 | 	mov	COUNT_, #7
2dcc8     A8 00 A0 FD | 	call	#pushregs_
2dccc     0A 27 02 F6 | 	mov	local01, arg02
2dcd0     09 29 02 FB | 	rdlong	local02, arg01
2dcd4     02 26 16 F2 | 	cmp	local01, #2 wc
2dcd8     14 00 90 CD |  if_b	jmp	#LR__4470
2dcdc     18 28 06 F1 | 	add	local02, #24
2dce0     14 2B 02 FB | 	rdlong	local03, local02
2dce4     18 28 86 F1 | 	sub	local02, #24
2dce8     15 27 12 F2 | 	cmp	local01, local03 wc
2dcec     08 00 90 CD |  if_b	jmp	#LR__4471
2dcf0                 | LR__4470
2dcf0     01 2C 06 F6 | 	mov	local04, #1
2dcf4     60 01 90 FD | 	jmp	#LR__4478
2dcf8                 | LR__4471
2dcf8     01 2C 66 F6 | 	neg	local04, #1
2dcfc                 | ' 		val = 0xFFFFFFFF;
2dcfc                 | ' 
2dcfc                 | ' 		switch (fs->fs_type) {
2dcfc     14 2F C2 FA | 	rdbyte	local05, local02
2dd00     01 2E 86 F1 | 	sub	local05, #1
2dd04     03 2E 26 F3 | 	fle	local05, #3
2dd08     30 2E 62 FD | 	jmprel	local05
2dd0c                 | LR__4472
2dd0c     0C 00 90 FD | 	jmp	#LR__4473
2dd10     B8 00 90 FD | 	jmp	#LR__4474
2dd14     F8 00 90 FD | 	jmp	#LR__4475
2dd18     38 01 90 FD | 	jmp	#LR__4476
2dd1c                 | LR__4473
2dd1c     13 2F 02 F6 | 	mov	local05, local01
2dd20     13 13 02 F6 | 	mov	arg01, local01
2dd24     01 12 46 F0 | 	shr	arg01, #1
2dd28     09 2F 02 F1 | 	add	local05, arg01
2dd2c     14 13 02 F6 | 	mov	arg01, local02
2dd30     17 31 02 F6 | 	mov	local06, local05
2dd34     09 30 46 F0 | 	shr	local06, #9
2dd38     24 28 06 F1 | 	add	local02, #36
2dd3c     14 15 02 FB | 	rdlong	arg02, local02
2dd40     24 28 86 F1 | 	sub	local02, #36
2dd44     18 15 02 F1 | 	add	arg02, local06
2dd48     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2dd4c     00 FA 0D F2 | 	cmp	result1, #0 wz
2dd50     04 01 90 5D |  if_ne	jmp	#LR__4477
2dd54     17 31 02 F6 | 	mov	local06, local05
2dd58     FF 31 06 F5 | 	and	local06, #511
2dd5c     34 28 06 F1 | 	add	local02, #52
2dd60     14 31 02 F1 | 	add	local06, local02
2dd64     18 33 C2 FA | 	rdbyte	local07, local06
2dd68     34 28 86 F1 | 	sub	local02, #52
2dd6c     14 13 02 F6 | 	mov	arg01, local02
2dd70     01 2E 06 F1 | 	add	local05, #1
2dd74     17 31 02 F6 | 	mov	local06, local05
2dd78     09 30 46 F0 | 	shr	local06, #9
2dd7c     24 28 06 F1 | 	add	local02, #36
2dd80     14 15 02 FB | 	rdlong	arg02, local02
2dd84     24 28 86 F1 | 	sub	local02, #36
2dd88     18 15 02 F1 | 	add	arg02, local06
2dd8c     7C FD BF FD | 	call	#_fatfs_cc_move_window
2dd90     00 FA 0D F2 | 	cmp	result1, #0 wz
2dd94     C0 00 90 5D |  if_ne	jmp	#LR__4477
2dd98     FF 2F 06 F5 | 	and	local05, #511
2dd9c     34 28 06 F1 | 	add	local02, #52
2dda0     14 2F 02 F1 | 	add	local05, local02
2dda4     17 31 C2 FA | 	rdbyte	local06, local05
2dda8     08 30 66 F0 | 	shl	local06, #8
2ddac     18 33 42 F5 | 	or	local07, local06
2ddb0     01 26 CE F7 | 	test	local01, #1 wz
2ddb4     04 32 46 50 |  if_ne	shr	local07, #4
2ddb8     19 2B 02 56 |  if_ne	mov	local03, local07
2ddbc     0B 32 46 A7 |  if_e	zerox	local07, #11
2ddc0     19 2B 02 A6 |  if_e	mov	local03, local07
2ddc4     15 2D 02 F6 | 	mov	local04, local03
2ddc8                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2ddc8                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2ddc8                 | ' 			break;
2ddc8     8C 00 90 FD | 	jmp	#LR__4477
2ddcc                 | LR__4474
2ddcc     14 13 02 F6 | 	mov	arg01, local02
2ddd0     13 31 02 F6 | 	mov	local06, local01
2ddd4     08 30 46 F0 | 	shr	local06, #8
2ddd8     24 28 06 F1 | 	add	local02, #36
2dddc     14 15 02 FB | 	rdlong	arg02, local02
2dde0     24 28 86 F1 | 	sub	local02, #36
2dde4     18 15 02 F1 | 	add	arg02, local06
2dde8     20 FD BF FD | 	call	#_fatfs_cc_move_window
2ddec     00 FA 0D F2 | 	cmp	result1, #0 wz
2ddf0     64 00 90 5D |  if_ne	jmp	#LR__4477
2ddf4     34 28 06 F1 | 	add	local02, #52
2ddf8     01 26 66 F0 | 	shl	local01, #1
2ddfc     FF 27 06 F5 | 	and	local01, #511
2de00     13 29 02 F1 | 	add	local02, local01
2de04                 | ' {
2de04                 | ' 
2de04                 | ' 	return *((WORD*)ptr);
2de04     14 FB E1 FA | 	rdword	result1, local02
2de08     FD 2C 32 F9 | 	getword	local04, result1, #0
2de0c                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2de0c                 | ' 			break;
2de0c     48 00 90 FD | 	jmp	#LR__4477
2de10                 | LR__4475
2de10     14 13 02 F6 | 	mov	arg01, local02
2de14     13 31 02 F6 | 	mov	local06, local01
2de18     07 30 46 F0 | 	shr	local06, #7
2de1c     24 28 06 F1 | 	add	local02, #36
2de20     14 15 02 FB | 	rdlong	arg02, local02
2de24     24 28 86 F1 | 	sub	local02, #36
2de28     18 15 02 F1 | 	add	arg02, local06
2de2c     DC FC BF FD | 	call	#_fatfs_cc_move_window
2de30     00 FA 0D F2 | 	cmp	result1, #0 wz
2de34     20 00 90 5D |  if_ne	jmp	#LR__4477
2de38     34 28 06 F1 | 	add	local02, #52
2de3c     02 26 66 F0 | 	shl	local01, #2
2de40     FF 27 06 F5 | 	and	local01, #511
2de44     13 29 02 F1 | 	add	local02, local01
2de48                 | ' {
2de48                 | ' 
2de48                 | ' 	return *((DWORD*)ptr);
2de48     14 2D 02 FB | 	rdlong	local04, local02
2de4c     7C 2C 06 F4 | 	bitl	local04, #124
2de50                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2de50                 | ' 			break;
2de50     04 00 90 FD | 	jmp	#LR__4477
2de54                 | LR__4476
2de54     01 2C 06 F6 | 	mov	local04, #1
2de58                 | LR__4477
2de58                 | LR__4478
2de58                 | ' 			val = 1;
2de58                 | ' 		}
2de58                 | ' 	}
2de58                 | ' 
2de58                 | ' 	return val;
2de58     16 FB 01 F6 | 	mov	result1, local04
2de5c     A7 F0 03 F6 | 	mov	ptra, fp
2de60     B2 00 A0 FD | 	call	#popregs_
2de64                 | _fatfs_cc_get_fat_ret
2de64     2D 00 64 FD | 	ret
2de68                 | 
2de68                 | _fatfs_cc_put_fat
2de68     08 4A 05 F6 | 	mov	COUNT_, #8
2de6c     A8 00 A0 FD | 	call	#pushregs_
2de70     09 27 02 F6 | 	mov	local01, arg01
2de74     0A 29 02 F6 | 	mov	local02, arg02
2de78     0B 2B 02 F6 | 	mov	local03, arg03
2de7c     02 2C 06 F6 | 	mov	local04, #2
2de80     02 28 16 F2 | 	cmp	local02, #2 wc
2de84     E0 01 90 CD |  if_b	jmp	#LR__4487
2de88     18 26 06 F1 | 	add	local01, #24
2de8c     13 2F 02 FB | 	rdlong	local05, local01
2de90     18 26 86 F1 | 	sub	local01, #24
2de94     17 29 12 F2 | 	cmp	local02, local05 wc
2de98     CC 01 90 3D |  if_ae	jmp	#LR__4487
2de9c                 | ' 		switch (fs->fs_type) {
2de9c     13 31 C2 FA | 	rdbyte	local06, local01
2dea0     01 30 86 F1 | 	sub	local06, #1
2dea4     03 30 26 F3 | 	fle	local06, #3
2dea8     30 30 62 FD | 	jmprel	local06
2deac                 | LR__4480
2deac     0C 00 90 FD | 	jmp	#LR__4481
2deb0     F8 00 90 FD | 	jmp	#LR__4484
2deb4     40 01 90 FD | 	jmp	#LR__4485
2deb8     AC 01 90 FD | 	jmp	#LR__4486
2debc                 | LR__4481
2debc     14 33 02 F6 | 	mov	local07, local02
2dec0     14 2F 02 F6 | 	mov	local05, local02
2dec4     01 2E 46 F0 | 	shr	local05, #1
2dec8     17 33 02 F1 | 	add	local07, local05
2decc     13 13 02 F6 | 	mov	arg01, local01
2ded0     19 31 02 F6 | 	mov	local06, local07
2ded4     09 30 46 F0 | 	shr	local06, #9
2ded8     24 26 06 F1 | 	add	local01, #36
2dedc     13 15 02 FB | 	rdlong	arg02, local01
2dee0     24 26 86 F1 | 	sub	local01, #36
2dee4     18 15 02 F1 | 	add	arg02, local06
2dee8     20 FC BF FD | 	call	#_fatfs_cc_move_window
2deec     FD 2C 0A F6 | 	mov	local04, result1 wz
2def0     74 01 90 5D |  if_ne	jmp	#LR__4486
2def4     34 26 06 F1 | 	add	local01, #52
2def8     13 35 02 F6 | 	mov	local08, local01
2defc     19 2F 02 F6 | 	mov	local05, local07
2df00     FF 2F 06 F5 | 	and	local05, #511
2df04     17 35 02 F1 | 	add	local08, local05
2df08     01 28 CE F7 | 	test	local02, #1 wz
2df0c     34 26 86 F1 | 	sub	local01, #52
2df10     01 32 06 F1 | 	add	local07, #1
2df14     18 00 90 AD |  if_e	jmp	#LR__4482
2df18     1A 2F C2 FA | 	rdbyte	local05, local08
2df1c     17 2F 42 F8 | 	getnib	local05, local05, #0
2df20     15 31 E2 F8 | 	getbyte	local06, local03, #0
2df24     04 30 66 F0 | 	shl	local06, #4
2df28     18 2F 42 F5 | 	or	local05, local06
2df2c     04 00 90 FD | 	jmp	#LR__4483
2df30                 | LR__4482
2df30     15 2F 02 F6 | 	mov	local05, local03
2df34                 | LR__4483
2df34     1A 2F 42 FC | 	wrbyte	local05, local08
2df38     03 26 06 F1 | 	add	local01, #3
2df3c     13 03 48 FC | 	wrbyte	#1, local01
2df40     03 26 86 F1 | 	sub	local01, #3
2df44     13 13 02 F6 | 	mov	arg01, local01
2df48     19 35 02 F6 | 	mov	local08, local07
2df4c     09 34 46 F0 | 	shr	local08, #9
2df50     24 26 06 F1 | 	add	local01, #36
2df54     13 15 02 FB | 	rdlong	arg02, local01
2df58     24 26 86 F1 | 	sub	local01, #36
2df5c     1A 15 02 F1 | 	add	arg02, local08
2df60     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2df64     FD 2C 0A F6 | 	mov	local04, result1 wz
2df68     FC 00 90 5D |  if_ne	jmp	#LR__4486
2df6c     34 26 06 F1 | 	add	local01, #52
2df70     13 35 02 F6 | 	mov	local08, local01
2df74     FF 33 06 F5 | 	and	local07, #511
2df78     19 35 02 F1 | 	add	local08, local07
2df7c     01 28 CE F7 | 	test	local02, #1 wz
2df80     04 2A 46 50 |  if_ne	shr	local03, #4
2df84     15 2F 02 56 |  if_ne	mov	local05, local03
2df88     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2df8c     F0 2E 06 A5 |  if_e	and	local05, #240
2df90     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2df94     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2df98     15 2F 42 A5 |  if_e	or	local05, local03
2df9c     1A 2F 42 FC | 	wrbyte	local05, local08
2dfa0     31 26 86 F1 | 	sub	local01, #49
2dfa4     13 03 48 FC | 	wrbyte	#1, local01
2dfa8                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2dfa8                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2dfa8                 | ' 			fs->wflag = 1;
2dfa8                 | ' 			break;
2dfa8     BC 00 90 FD | 	jmp	#LR__4486
2dfac                 | LR__4484
2dfac     13 13 02 F6 | 	mov	arg01, local01
2dfb0     14 35 02 F6 | 	mov	local08, local02
2dfb4     08 34 46 F0 | 	shr	local08, #8
2dfb8     24 26 06 F1 | 	add	local01, #36
2dfbc     13 15 02 FB | 	rdlong	arg02, local01
2dfc0     24 26 86 F1 | 	sub	local01, #36
2dfc4     1A 15 02 F1 | 	add	arg02, local08
2dfc8     40 FB BF FD | 	call	#_fatfs_cc_move_window
2dfcc     FD 2C 0A F6 | 	mov	local04, result1 wz
2dfd0     94 00 90 5D |  if_ne	jmp	#LR__4486
2dfd4     34 26 06 F1 | 	add	local01, #52
2dfd8     13 13 02 F6 | 	mov	arg01, local01
2dfdc     01 28 66 F0 | 	shl	local02, #1
2dfe0     FF 29 06 F5 | 	and	local02, #511
2dfe4     14 13 02 F1 | 	add	arg01, local02
2dfe8     09 2B 52 FC | 	wrword	local03, arg01
2dfec     31 26 86 F1 | 	sub	local01, #49
2dff0     13 03 48 FC | 	wrbyte	#1, local01
2dff4                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2dff4                 | ' 			fs->wflag = 1;
2dff4                 | ' 			break;
2dff4     70 00 90 FD | 	jmp	#LR__4486
2dff8                 | LR__4485
2dff8     13 13 02 F6 | 	mov	arg01, local01
2dffc     14 35 02 F6 | 	mov	local08, local02
2e000     07 34 46 F0 | 	shr	local08, #7
2e004     24 26 06 F1 | 	add	local01, #36
2e008     13 15 02 FB | 	rdlong	arg02, local01
2e00c     24 26 86 F1 | 	sub	local01, #36
2e010     1A 15 02 F1 | 	add	arg02, local08
2e014     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2e018     FD 2C 0A F6 | 	mov	local04, result1 wz
2e01c     48 00 90 5D |  if_ne	jmp	#LR__4486
2e020     7C 2A 06 F4 | 	bitl	local03, #124
2e024     34 26 06 F1 | 	add	local01, #52
2e028     14 35 02 F6 | 	mov	local08, local02
2e02c     02 34 66 F0 | 	shl	local08, #2
2e030     FF 35 06 F5 | 	and	local08, #511
2e034     13 13 02 F6 | 	mov	arg01, local01
2e038     1A 13 02 F1 | 	add	arg01, local08
2e03c                 | ' {
2e03c                 | ' 
2e03c                 | ' 	return *((DWORD*)ptr);
2e03c     09 35 02 FB | 	rdlong	local08, arg01
2e040     00 00 78 FF 
2e044     00 34 06 F5 | 	and	local08, ##-268435456
2e048     1A 2B 42 F5 | 	or	local03, local08
2e04c     13 13 02 F6 | 	mov	arg01, local01
2e050     02 28 66 F0 | 	shl	local02, #2
2e054     FF 29 06 F5 | 	and	local02, #511
2e058     14 13 02 F1 | 	add	arg01, local02
2e05c     09 2B 62 FC | 	wrlong	local03, arg01
2e060     31 26 86 F1 | 	sub	local01, #49
2e064     13 03 48 FC | 	wrbyte	#1, local01
2e068                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2e068                 | ' 			}
2e068                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2e068                 | ' 			fs->wflag = 1;
2e068                 | ' 			break;
2e068                 | LR__4486
2e068                 | LR__4487
2e068                 | ' 		}
2e068                 | ' 	}
2e068                 | ' 	return res;
2e068     16 FB 01 F6 | 	mov	result1, local04
2e06c     A7 F0 03 F6 | 	mov	ptra, fp
2e070     B2 00 A0 FD | 	call	#popregs_
2e074                 | _fatfs_cc_put_fat_ret
2e074     2D 00 64 FD | 	ret
2e078                 | 
2e078                 | _fatfs_cc_remove_chain
2e078     05 4A 05 F6 | 	mov	COUNT_, #5
2e07c     A8 00 A0 FD | 	call	#pushregs_
2e080     09 27 02 F6 | 	mov	local01, arg01
2e084     0A 29 02 F6 | 	mov	local02, arg02
2e088     0B 2B 02 F6 | 	mov	local03, arg03
2e08c     13 2D 02 FB | 	rdlong	local04, local01
2e090     02 28 16 F2 | 	cmp	local02, #2 wc
2e094     14 00 90 CD |  if_b	jmp	#LR__4490
2e098     18 2C 06 F1 | 	add	local04, #24
2e09c     16 FB 01 FB | 	rdlong	result1, local04
2e0a0     18 2C 86 F1 | 	sub	local04, #24
2e0a4     FD 28 12 F2 | 	cmp	local02, result1 wc
2e0a8     08 00 90 CD |  if_b	jmp	#LR__4491
2e0ac                 | LR__4490
2e0ac     02 FA 05 F6 | 	mov	result1, #2
2e0b0     CC 00 90 FD | 	jmp	#LR__4496
2e0b4                 | LR__4491
2e0b4     00 2A 0E F2 | 	cmp	local03, #0 wz
2e0b8     18 00 90 AD |  if_e	jmp	#LR__4492
2e0bc     15 15 02 F6 | 	mov	arg02, local03
2e0c0     16 13 02 F6 | 	mov	arg01, local04
2e0c4     01 16 66 F6 | 	neg	arg03, #1
2e0c8     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2e0cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2e0d0     AC 00 90 5D |  if_ne	jmp	#LR__4496
2e0d4                 | LR__4492
2e0d4                 | ' 	}
2e0d4                 | ' 
2e0d4                 | ' 
2e0d4                 | ' 	do {
2e0d4                 | LR__4493
2e0d4     14 15 02 F6 | 	mov	arg02, local02
2e0d8     13 13 02 F6 | 	mov	arg01, local01
2e0dc     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2e0e0     FD 2E 0A F6 | 	mov	local05, result1 wz
2e0e4     94 00 90 AD |  if_e	jmp	#LR__4495
2e0e8     01 2E 0E F2 | 	cmp	local05, #1 wz
2e0ec     02 FA 05 A6 |  if_e	mov	result1, #2
2e0f0     8C 00 90 AD |  if_e	jmp	#LR__4496
2e0f4     FF FF 7F FF 
2e0f8     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2e0fc     01 FA 05 A6 |  if_e	mov	result1, #1
2e100     7C 00 90 AD |  if_e	jmp	#LR__4496
2e104     14 15 02 F6 | 	mov	arg02, local02
2e108     16 13 02 F6 | 	mov	arg01, local04
2e10c     00 16 06 F6 | 	mov	arg03, #0
2e110     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2e114     FD 2A 0A F6 | 	mov	local03, result1 wz
2e118     15 FB 01 56 |  if_ne	mov	result1, local03
2e11c     60 00 90 5D |  if_ne	jmp	#LR__4496
2e120     18 2C 06 F1 | 	add	local04, #24
2e124     16 2B 02 FB | 	rdlong	local03, local04
2e128     02 2A 86 F1 | 	sub	local03, #2
2e12c     04 2C 86 F1 | 	sub	local04, #4
2e130     16 29 02 FB | 	rdlong	local02, local04
2e134     14 2C 86 F1 | 	sub	local04, #20
2e138     15 29 12 F2 | 	cmp	local02, local03 wc
2e13c     24 00 90 3D |  if_ae	jmp	#LR__4494
2e140     14 2C 06 F1 | 	add	local04, #20
2e144     16 2B 02 FB | 	rdlong	local03, local04
2e148     01 2A 06 F1 | 	add	local03, #1
2e14c     16 2B 62 FC | 	wrlong	local03, local04
2e150     10 2C 86 F1 | 	sub	local04, #16
2e154     16 2B C2 FA | 	rdbyte	local03, local04
2e158     01 2A 46 F5 | 	or	local03, #1
2e15c     16 2B 42 FC | 	wrbyte	local03, local04
2e160     04 2C 86 F1 | 	sub	local04, #4
2e164                 | LR__4494
2e164     17 29 02 F6 | 	mov	local02, local05
2e168     18 2C 06 F1 | 	add	local04, #24
2e16c     16 2F 02 FB | 	rdlong	local05, local04
2e170     18 2C 86 F1 | 	sub	local04, #24
2e174     17 29 12 F2 | 	cmp	local02, local05 wc
2e178     58 FF 9F CD |  if_b	jmp	#LR__4493
2e17c                 | LR__4495
2e17c                 | ' #line 1500 "ff.c"
2e17c                 | ' 	return FR_OK;
2e17c     00 FA 05 F6 | 	mov	result1, #0
2e180                 | LR__4496
2e180     A7 F0 03 F6 | 	mov	ptra, fp
2e184     B2 00 A0 FD | 	call	#popregs_
2e188                 | _fatfs_cc_remove_chain_ret
2e188     2D 00 64 FD | 	ret
2e18c                 | 
2e18c                 | _fatfs_cc_create_chain
2e18c     09 4A 05 F6 | 	mov	COUNT_, #9
2e190     A8 00 A0 FD | 	call	#pushregs_
2e194     09 27 02 F6 | 	mov	local01, arg01
2e198     0A 29 0A F6 | 	mov	local02, arg02 wz
2e19c     13 2B 02 FB | 	rdlong	local03, local01
2e1a0     28 00 90 5D |  if_ne	jmp	#LR__4500
2e1a4     10 2A 06 F1 | 	add	local03, #16
2e1a8     15 2D 0A FB | 	rdlong	local04, local03 wz
2e1ac     10 2A 86 F1 | 	sub	local03, #16
2e1b0     18 2A 06 51 |  if_ne	add	local03, #24
2e1b4     15 2F 02 5B |  if_ne	rdlong	local05, local03
2e1b8     18 2A 86 51 |  if_ne	sub	local03, #24
2e1bc     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2e1c0     50 00 90 4D |  if_c_and_nz	jmp	#LR__4501
2e1c4     01 2C 06 F6 | 	mov	local04, #1
2e1c8     48 00 90 FD | 	jmp	#LR__4501
2e1cc                 | LR__4500
2e1cc     14 15 02 F6 | 	mov	arg02, local02
2e1d0     13 13 02 F6 | 	mov	arg01, local01
2e1d4     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2e1d8     FD 2C 02 F6 | 	mov	local04, result1
2e1dc     02 2C 16 F2 | 	cmp	local04, #2 wc
2e1e0     01 FA 05 C6 |  if_b	mov	result1, #1
2e1e4     BC 01 90 CD |  if_b	jmp	#LR__4511
2e1e8     FF FF 7F FF 
2e1ec     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2e1f0     16 FB 01 A6 |  if_e	mov	result1, local04
2e1f4     AC 01 90 AD |  if_e	jmp	#LR__4511
2e1f8     18 2A 06 F1 | 	add	local03, #24
2e1fc     15 2F 02 FB | 	rdlong	local05, local03
2e200     18 2A 86 F1 | 	sub	local03, #24
2e204     17 2D 12 F2 | 	cmp	local04, local05 wc
2e208     16 FB 01 C6 |  if_b	mov	result1, local04
2e20c     94 01 90 CD |  if_b	jmp	#LR__4511
2e210     14 2D 02 F6 | 	mov	local04, local02
2e214                 | LR__4501
2e214     14 2A 06 F1 | 	add	local03, #20
2e218     15 2F 0A FB | 	rdlong	local05, local03 wz
2e21c     14 2A 86 F1 | 	sub	local03, #20
2e220     00 FA 05 A6 |  if_e	mov	result1, #0
2e224     7C 01 90 AD |  if_e	jmp	#LR__4511
2e228     00 30 06 F6 | 	mov	local06, #0
2e22c     14 2D 0A F2 | 	cmp	local04, local02 wz
2e230     74 00 90 5D |  if_ne	jmp	#LR__4504
2e234     16 31 02 F6 | 	mov	local06, local04
2e238     01 30 06 F1 | 	add	local06, #1
2e23c     18 2A 06 F1 | 	add	local03, #24
2e240     15 2F 02 FB | 	rdlong	local05, local03
2e244     18 2A 86 F1 | 	sub	local03, #24
2e248     17 31 12 F2 | 	cmp	local06, local05 wc
2e24c     02 30 06 36 |  if_ae	mov	local06, #2
2e250     18 15 02 F6 | 	mov	arg02, local06
2e254     13 13 02 F6 | 	mov	arg01, local01
2e258     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2e25c     FD 2E 02 F6 | 	mov	local05, result1
2e260     01 2E 0E F2 | 	cmp	local05, #1 wz
2e264     FF FF 7F 5F 
2e268     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2e26c     17 FB 01 A6 |  if_e	mov	result1, local05
2e270     30 01 90 AD |  if_e	jmp	#LR__4511
2e274     00 2E 0E F2 | 	cmp	local05, #0 wz
2e278     2C 00 90 AD |  if_e	jmp	#LR__4503
2e27c     10 2A 06 F1 | 	add	local03, #16
2e280     15 33 02 FB | 	rdlong	local07, local03
2e284     10 2A 86 F1 | 	sub	local03, #16
2e288     02 32 16 F2 | 	cmp	local07, #2 wc
2e28c     14 00 90 CD |  if_b	jmp	#LR__4502
2e290     18 2A 06 F1 | 	add	local03, #24
2e294     15 2F 02 FB | 	rdlong	local05, local03
2e298     18 2A 86 F1 | 	sub	local03, #24
2e29c     17 33 12 F2 | 	cmp	local07, local05 wc
2e2a0     19 2D 02 C6 |  if_b	mov	local04, local07
2e2a4                 | LR__4502
2e2a4     00 30 06 F6 | 	mov	local06, #0
2e2a8                 | LR__4503
2e2a8                 | LR__4504
2e2a8     00 30 0E F2 | 	cmp	local06, #0 wz
2e2ac     60 00 90 5D |  if_ne	jmp	#LR__4507
2e2b0     16 31 02 F6 | 	mov	local06, local04
2e2b4                 | ' 			ncl = scl;
2e2b4                 | ' 			for (;;) {
2e2b4                 | LR__4505
2e2b4     01 30 06 F1 | 	add	local06, #1
2e2b8     18 2A 06 F1 | 	add	local03, #24
2e2bc     15 2F 02 FB | 	rdlong	local05, local03
2e2c0     18 2A 86 F1 | 	sub	local03, #24
2e2c4     17 31 12 F2 | 	cmp	local06, local05 wc
2e2c8     02 30 06 36 |  if_ae	mov	local06, #2
2e2cc     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2e2d0     00 FA 05 16 |  if_a	mov	result1, #0
2e2d4     CC 00 90 1D |  if_a	jmp	#LR__4511
2e2d8     18 15 02 F6 | 	mov	arg02, local06
2e2dc     13 13 02 F6 | 	mov	arg01, local01
2e2e0     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2e2e4     FD 32 0A F6 | 	mov	local07, result1 wz
2e2e8     24 00 90 AD |  if_e	jmp	#LR__4506
2e2ec     01 32 0E F2 | 	cmp	local07, #1 wz
2e2f0     FF FF 7F 5F 
2e2f4     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2e2f8     19 FB 01 A6 |  if_e	mov	result1, local07
2e2fc     A4 00 90 AD |  if_e	jmp	#LR__4511
2e300     16 31 0A F2 | 	cmp	local06, local04 wz
2e304     00 FA 05 A6 |  if_e	mov	result1, #0
2e308     98 00 90 AD |  if_e	jmp	#LR__4511
2e30c     A4 FF 9F FD | 	jmp	#LR__4505
2e310                 | LR__4506
2e310                 | LR__4507
2e310     15 13 02 F6 | 	mov	arg01, local03
2e314     18 15 02 F6 | 	mov	arg02, local06
2e318     01 16 66 F6 | 	neg	arg03, #1
2e31c     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2e320     FD 34 0A F6 | 	mov	local08, result1 wz
2e324     1C 00 90 5D |  if_ne	jmp	#LR__4508
2e328     00 28 0E F2 | 	cmp	local02, #0 wz
2e32c     14 00 90 AD |  if_e	jmp	#LR__4508
2e330     15 13 02 F6 | 	mov	arg01, local03
2e334     14 15 02 F6 | 	mov	arg02, local02
2e338     18 17 02 F6 | 	mov	arg03, local06
2e33c     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2e340     FD 34 02 F6 | 	mov	local08, result1
2e344                 | LR__4508
2e344     00 34 0E F2 | 	cmp	local08, #0 wz
2e348     4C 00 90 5D |  if_ne	jmp	#LR__4509
2e34c     10 2A 06 F1 | 	add	local03, #16
2e350     15 31 62 FC | 	wrlong	local06, local03
2e354     08 2A 06 F1 | 	add	local03, #8
2e358     15 2F 02 FB | 	rdlong	local05, local03
2e35c     02 2E 86 F1 | 	sub	local05, #2
2e360     04 2A 86 F1 | 	sub	local03, #4
2e364     15 37 02 FB | 	rdlong	local09, local03
2e368     14 2A 86 F1 | 	sub	local03, #20
2e36c     17 37 1A F2 | 	cmp	local09, local05 wcz
2e370     14 2A 06 E1 |  if_be	add	local03, #20
2e374     15 37 02 EB |  if_be	rdlong	local09, local03
2e378     01 36 86 E1 |  if_be	sub	local09, #1
2e37c     15 37 62 EC |  if_be	wrlong	local09, local03
2e380     14 2A 86 E1 |  if_be	sub	local03, #20
2e384     04 2A 06 F1 | 	add	local03, #4
2e388     15 2F C2 FA | 	rdbyte	local05, local03
2e38c     01 2E 46 F5 | 	or	local05, #1
2e390     15 2F 42 FC | 	wrbyte	local05, local03
2e394     08 00 90 FD | 	jmp	#LR__4510
2e398                 | LR__4509
2e398     01 34 0E F2 | 	cmp	local08, #1 wz
2e39c     01 30 C6 F6 | 	negz	local06, #1
2e3a0                 | LR__4510
2e3a0                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2e3a0                 | ' 	}
2e3a0                 | ' 
2e3a0                 | ' 	return ncl;
2e3a0     18 FB 01 F6 | 	mov	result1, local06
2e3a4                 | LR__4511
2e3a4     A7 F0 03 F6 | 	mov	ptra, fp
2e3a8     B2 00 A0 FD | 	call	#popregs_
2e3ac                 | _fatfs_cc_create_chain_ret
2e3ac     2D 00 64 FD | 	ret
2e3b0                 | 
2e3b0                 | _fatfs_cc_dir_clear
2e3b0     06 4A 05 F6 | 	mov	COUNT_, #6
2e3b4     A8 00 A0 FD | 	call	#pushregs_
2e3b8     09 27 02 F6 | 	mov	local01, arg01
2e3bc     0A 29 02 F6 | 	mov	local02, arg02
2e3c0     13 13 02 F6 | 	mov	arg01, local01
2e3c4     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2e3c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e3cc     01 FA 05 56 |  if_ne	mov	result1, #1
2e3d0     90 00 90 5D |  if_ne	jmp	#LR__4522
2e3d4     13 13 02 F6 | 	mov	arg01, local01
2e3d8     14 15 02 F6 | 	mov	arg02, local02
2e3dc     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2e3e0     FD 2A 02 F6 | 	mov	local03, result1
2e3e4     30 26 06 F1 | 	add	local01, #48
2e3e8     13 2B 62 FC | 	wrlong	local03, local01
2e3ec     04 26 06 F1 | 	add	local01, #4
2e3f0     13 13 02 F6 | 	mov	arg01, local01
2e3f4     00 14 06 F6 | 	mov	arg02, #0
2e3f8     09 16 C6 F9 | 	decod	arg03, #9
2e3fc     98 00 A0 FD | 	call	#\builtin_bytefill_
2e400     13 2D 02 F6 | 	mov	local04, local01
2e404                 | ' #line 1667 "ff.c"
2e404                 | ' 	{
2e404                 | ' 		ibuf = fs->win; szb = 1;
2e404                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2e404     00 2E 06 F6 | 	mov	local05, #0
2e408     34 26 86 F1 | 	sub	local01, #52
2e40c                 | LR__4520
2e40c     0A 26 06 F1 | 	add	local01, #10
2e410     13 31 E2 FA | 	rdword	local06, local01
2e414     0A 26 86 F1 | 	sub	local01, #10
2e418     18 2F 12 F2 | 	cmp	local05, local06 wc
2e41c     2C 00 90 3D |  if_ae	jmp	#LR__4521
2e420     01 26 06 F1 | 	add	local01, #1
2e424     13 13 C2 FA | 	rdbyte	arg01, local01
2e428     01 26 86 F1 | 	sub	local01, #1
2e42c     16 15 02 F6 | 	mov	arg02, local04
2e430     15 17 02 F6 | 	mov	arg03, local03
2e434     17 17 02 F1 | 	add	arg03, local05
2e438     01 18 06 F6 | 	mov	arg04, #1
2e43c     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2e440     00 FA 0D F2 | 	cmp	result1, #0 wz
2e444     01 2E 06 A1 |  if_e	add	local05, #1
2e448     C0 FF 9F AD |  if_e	jmp	#LR__4520
2e44c                 | LR__4521
2e44c                 | ' 	}
2e44c                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2e44c     0A 26 06 F1 | 	add	local01, #10
2e450     13 2D E2 FA | 	rdword	local04, local01
2e454     16 2F 0A F2 | 	cmp	local05, local04 wz
2e458     00 30 06 A6 |  if_e	mov	local06, #0
2e45c     01 30 06 56 |  if_ne	mov	local06, #1
2e460     18 FB 01 F6 | 	mov	result1, local06
2e464                 | LR__4522
2e464     A7 F0 03 F6 | 	mov	ptra, fp
2e468     B2 00 A0 FD | 	call	#popregs_
2e46c                 | _fatfs_cc_dir_clear_ret
2e46c     2D 00 64 FD | 	ret
2e470                 | 
2e470                 | _fatfs_cc_dir_sdi
2e470     06 4A 05 F6 | 	mov	COUNT_, #6
2e474     A8 00 A0 FD | 	call	#pushregs_
2e478     09 27 02 F6 | 	mov	local01, arg01
2e47c     0A 29 02 F6 | 	mov	local02, arg02
2e480     13 2B 02 FB | 	rdlong	local03, local01
2e484     00 10 00 FF 
2e488     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2e48c     1F 28 CE C7 |  if_b	test	local02, #31 wz
2e490                 | ' 		return FR_INT_ERR;
2e490     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2e494     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4536
2e498     10 26 06 F1 | 	add	local01, #16
2e49c     13 29 62 FC | 	wrlong	local02, local01
2e4a0     08 26 86 F1 | 	sub	local01, #8
2e4a4     13 2D 0A FB | 	rdlong	local04, local01 wz
2e4a8     08 26 86 F1 | 	sub	local01, #8
2e4ac     15 2F C2 AA |  if_e	rdbyte	local05, local03
2e4b0     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2e4b4     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2e4b8     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2e4bc     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2e4c0     00 2C 0E F2 | 	cmp	local04, #0 wz
2e4c4     3C 00 90 5D |  if_ne	jmp	#LR__4530
2e4c8     14 2F 02 F6 | 	mov	local05, local02
2e4cc     05 2E 46 F0 | 	shr	local05, #5
2e4d0     08 2A 06 F1 | 	add	local03, #8
2e4d4     15 15 E2 FA | 	rdword	arg02, local03
2e4d8     08 2A 86 F1 | 	sub	local03, #8
2e4dc     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2e4e0     02 FA 05 36 |  if_ae	mov	result1, #2
2e4e4     E4 00 90 3D |  if_ae	jmp	#LR__4536
2e4e8     28 2A 06 F1 | 	add	local03, #40
2e4ec     15 2F 02 FB | 	rdlong	local05, local03
2e4f0     28 2A 86 F1 | 	sub	local03, #40
2e4f4     18 26 06 F1 | 	add	local01, #24
2e4f8     13 2F 62 FC | 	wrlong	local05, local01
2e4fc     18 26 86 F1 | 	sub	local01, #24
2e500     7C 00 90 FD | 	jmp	#LR__4535
2e504                 | LR__4530
2e504     0A 2A 06 F1 | 	add	local03, #10
2e508     15 31 E2 FA | 	rdword	local06, local03
2e50c     0A 2A 86 F1 | 	sub	local03, #10
2e510     09 30 66 F0 | 	shl	local06, #9
2e514                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2e514                 | ' 		while (ofs >= csz) {
2e514                 | LR__4531
2e514     18 29 12 F2 | 	cmp	local02, local06 wc
2e518     4C 00 90 CD |  if_b	jmp	#LR__4534
2e51c     13 13 02 F6 | 	mov	arg01, local01
2e520     16 15 02 F6 | 	mov	arg02, local04
2e524     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2e528     FD 2C 02 F6 | 	mov	local04, result1
2e52c     FF FF 7F FF 
2e530     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2e534     01 FA 05 A6 |  if_e	mov	result1, #1
2e538     90 00 90 AD |  if_e	jmp	#LR__4536
2e53c     02 2C 16 F2 | 	cmp	local04, #2 wc
2e540     14 00 90 CD |  if_b	jmp	#LR__4532
2e544     18 2A 06 F1 | 	add	local03, #24
2e548     15 2F 02 FB | 	rdlong	local05, local03
2e54c     18 2A 86 F1 | 	sub	local03, #24
2e550     17 2D 12 F2 | 	cmp	local04, local05 wc
2e554     08 00 90 CD |  if_b	jmp	#LR__4533
2e558                 | LR__4532
2e558     02 FA 05 F6 | 	mov	result1, #2
2e55c     6C 00 90 FD | 	jmp	#LR__4536
2e560                 | LR__4533
2e560     18 29 82 F1 | 	sub	local02, local06
2e564     AC FF 9F FD | 	jmp	#LR__4531
2e568                 | LR__4534
2e568     15 13 02 F6 | 	mov	arg01, local03
2e56c     16 15 02 F6 | 	mov	arg02, local04
2e570     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2e574     18 26 06 F1 | 	add	local01, #24
2e578     13 FB 61 FC | 	wrlong	result1, local01
2e57c     18 26 86 F1 | 	sub	local01, #24
2e580                 | LR__4535
2e580     14 26 06 F1 | 	add	local01, #20
2e584     13 2D 62 FC | 	wrlong	local04, local01
2e588     04 26 06 F1 | 	add	local01, #4
2e58c     13 2F 0A FB | 	rdlong	local05, local01 wz
2e590     18 26 86 F1 | 	sub	local01, #24
2e594     02 FA 05 A6 |  if_e	mov	result1, #2
2e598     30 00 90 AD |  if_e	jmp	#LR__4536
2e59c     14 31 02 F6 | 	mov	local06, local02
2e5a0     09 30 46 F0 | 	shr	local06, #9
2e5a4     18 26 06 F1 | 	add	local01, #24
2e5a8     13 2F 02 FB | 	rdlong	local05, local01
2e5ac     18 2F 02 F1 | 	add	local05, local06
2e5b0     13 2F 62 FC | 	wrlong	local05, local01
2e5b4     34 2A 06 F1 | 	add	local03, #52
2e5b8     FF 29 06 F5 | 	and	local02, #511
2e5bc     14 2B 02 F1 | 	add	local03, local02
2e5c0     04 26 06 F1 | 	add	local01, #4
2e5c4     13 2B 62 FC | 	wrlong	local03, local01
2e5c8                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2e5c8                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2e5c8                 | ' 
2e5c8                 | ' 	return FR_OK;
2e5c8     00 FA 05 F6 | 	mov	result1, #0
2e5cc                 | LR__4536
2e5cc     A7 F0 03 F6 | 	mov	ptra, fp
2e5d0     B2 00 A0 FD | 	call	#popregs_
2e5d4                 | _fatfs_cc_dir_sdi_ret
2e5d4     2D 00 64 FD | 	ret
2e5d8                 | 
2e5d8                 | _fatfs_cc_dir_next
2e5d8     05 4A 05 F6 | 	mov	COUNT_, #5
2e5dc     A8 00 A0 FD | 	call	#pushregs_
2e5e0     09 27 02 F6 | 	mov	local01, arg01
2e5e4     0A 29 02 F6 | 	mov	local02, arg02
2e5e8     13 2B 02 FB | 	rdlong	local03, local01
2e5ec     10 26 06 F1 | 	add	local01, #16
2e5f0     13 2D 02 FB | 	rdlong	local04, local01
2e5f4     10 26 86 F1 | 	sub	local01, #16
2e5f8     20 2C 06 F1 | 	add	local04, #32
2e5fc     00 10 00 FF 
2e600     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2e604     18 26 06 31 |  if_ae	add	local01, #24
2e608     13 01 68 3C |  if_ae	wrlong	#0, local01
2e60c     18 26 86 31 |  if_ae	sub	local01, #24
2e610     18 26 06 F1 | 	add	local01, #24
2e614     13 15 0A FB | 	rdlong	arg02, local01 wz
2e618     18 26 86 F1 | 	sub	local01, #24
2e61c     04 FA 05 A6 |  if_e	mov	result1, #4
2e620     64 01 90 AD |  if_e	jmp	#LR__4545
2e624     FF 2D CE F7 | 	test	local04, #511 wz
2e628     3C 01 90 5D |  if_ne	jmp	#LR__4544
2e62c     18 26 06 F1 | 	add	local01, #24
2e630     13 15 02 FB | 	rdlong	arg02, local01
2e634     01 14 06 F1 | 	add	arg02, #1
2e638     13 15 62 FC | 	wrlong	arg02, local01
2e63c     04 26 86 F1 | 	sub	local01, #4
2e640     13 15 0A FB | 	rdlong	arg02, local01 wz
2e644     14 26 86 F1 | 	sub	local01, #20
2e648     2C 00 90 5D |  if_ne	jmp	#LR__4540
2e64c     16 15 02 F6 | 	mov	arg02, local04
2e650     05 14 46 F0 | 	shr	arg02, #5
2e654     08 2A 06 F1 | 	add	local03, #8
2e658     15 29 E2 FA | 	rdword	local02, local03
2e65c     08 2A 86 F1 | 	sub	local03, #8
2e660     14 15 12 F2 | 	cmp	arg02, local02 wc
2e664     18 26 06 31 |  if_ae	add	local01, #24
2e668     13 01 68 3C |  if_ae	wrlong	#0, local01
2e66c                 | ' 				dp->sect = 0; return FR_NO_FILE;
2e66c     04 FA 05 36 |  if_ae	mov	result1, #4
2e670     14 01 90 3D |  if_ae	jmp	#LR__4545
2e674     F0 00 90 FD | 	jmp	#LR__4543
2e678                 | LR__4540
2e678     16 13 02 F6 | 	mov	arg01, local04
2e67c     09 12 46 F0 | 	shr	arg01, #9
2e680     0A 2A 06 F1 | 	add	local03, #10
2e684     15 15 E2 FA | 	rdword	arg02, local03
2e688     0A 2A 86 F1 | 	sub	local03, #10
2e68c     01 14 86 F1 | 	sub	arg02, #1
2e690     0A 13 CA F7 | 	test	arg01, arg02 wz
2e694     D0 00 90 5D |  if_ne	jmp	#LR__4542
2e698     13 13 02 F6 | 	mov	arg01, local01
2e69c     14 26 06 F1 | 	add	local01, #20
2e6a0     13 15 02 FB | 	rdlong	arg02, local01
2e6a4     14 26 86 F1 | 	sub	local01, #20
2e6a8     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2e6ac     FD 2E 02 F6 | 	mov	local05, result1
2e6b0     02 2E 16 F2 | 	cmp	local05, #2 wc
2e6b4     02 FA 05 C6 |  if_b	mov	result1, #2
2e6b8     CC 00 90 CD |  if_b	jmp	#LR__4545
2e6bc     FF FF 7F FF 
2e6c0     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2e6c4     01 FA 05 A6 |  if_e	mov	result1, #1
2e6c8     BC 00 90 AD |  if_e	jmp	#LR__4545
2e6cc     18 2A 06 F1 | 	add	local03, #24
2e6d0     15 15 02 FB | 	rdlong	arg02, local03
2e6d4     18 2A 86 F1 | 	sub	local03, #24
2e6d8     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2e6dc     68 00 90 CD |  if_b	jmp	#LR__4541
2e6e0     00 28 0E F2 | 	cmp	local02, #0 wz
2e6e4     18 26 06 A1 |  if_e	add	local01, #24
2e6e8     13 01 68 AC |  if_e	wrlong	#0, local01
2e6ec                 | ' 						dp->sect = 0; return FR_NO_FILE;
2e6ec     04 FA 05 A6 |  if_e	mov	result1, #4
2e6f0     94 00 90 AD |  if_e	jmp	#LR__4545
2e6f4     13 13 02 F6 | 	mov	arg01, local01
2e6f8     14 26 06 F1 | 	add	local01, #20
2e6fc     13 15 02 FB | 	rdlong	arg02, local01
2e700     14 26 86 F1 | 	sub	local01, #20
2e704     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2e708     FD 2E 0A F6 | 	mov	local05, result1 wz
2e70c     07 FA 05 A6 |  if_e	mov	result1, #7
2e710     74 00 90 AD |  if_e	jmp	#LR__4545
2e714     01 2E 0E F2 | 	cmp	local05, #1 wz
2e718     02 FA 05 A6 |  if_e	mov	result1, #2
2e71c     68 00 90 AD |  if_e	jmp	#LR__4545
2e720     FF FF 7F FF 
2e724     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2e728     01 FA 05 A6 |  if_e	mov	result1, #1
2e72c     58 00 90 AD |  if_e	jmp	#LR__4545
2e730     17 15 02 F6 | 	mov	arg02, local05
2e734     15 13 02 F6 | 	mov	arg01, local03
2e738     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2e73c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e740     01 FA 05 56 |  if_ne	mov	result1, #1
2e744     40 00 90 5D |  if_ne	jmp	#LR__4545
2e748                 | LR__4541
2e748     14 26 06 F1 | 	add	local01, #20
2e74c     13 2F 62 FC | 	wrlong	local05, local01
2e750     15 13 02 F6 | 	mov	arg01, local03
2e754     17 15 02 F6 | 	mov	arg02, local05
2e758     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2e75c     04 26 06 F1 | 	add	local01, #4
2e760     13 FB 61 FC | 	wrlong	result1, local01
2e764     18 26 86 F1 | 	sub	local01, #24
2e768                 | LR__4542
2e768                 | LR__4543
2e768                 | LR__4544
2e768     10 26 06 F1 | 	add	local01, #16
2e76c     13 2D 62 FC | 	wrlong	local04, local01
2e770     34 2A 06 F1 | 	add	local03, #52
2e774     FF 2D 06 F5 | 	and	local04, #511
2e778     16 2B 02 F1 | 	add	local03, local04
2e77c     0C 26 06 F1 | 	add	local01, #12
2e780     13 2B 62 FC | 	wrlong	local03, local01
2e784                 | ' #line 1771 "ff.c"
2e784                 | ' 				}
2e784                 | ' 				dp->clust = clst;
2e784                 | ' 				dp->sect = clst2sect(fs, clst);
2e784                 | ' 			}
2e784                 | ' 		}
2e784                 | ' 	}
2e784                 | ' 	dp->dptr = ofs;
2e784                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2e784                 | ' 
2e784                 | ' 	return FR_OK;
2e784     00 FA 05 F6 | 	mov	result1, #0
2e788                 | LR__4545
2e788     A7 F0 03 F6 | 	mov	ptra, fp
2e78c     B2 00 A0 FD | 	call	#popregs_
2e790                 | _fatfs_cc_dir_next_ret
2e790     2D 00 64 FD | 	ret
2e794                 | 
2e794                 | _fatfs_cc_dir_alloc
2e794     08 4A 05 F6 | 	mov	COUNT_, #8
2e798     A8 00 A0 FD | 	call	#pushregs_
2e79c     09 27 02 F6 | 	mov	local01, arg01
2e7a0     0A 29 02 F6 | 	mov	local02, arg02
2e7a4     13 2B 02 FB | 	rdlong	local03, local01
2e7a8     13 13 02 F6 | 	mov	arg01, local01
2e7ac     00 14 06 F6 | 	mov	arg02, #0
2e7b0     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2e7b4     FD 2C 0A F6 | 	mov	local04, result1 wz
2e7b8     70 00 90 5D |  if_ne	jmp	#LR__4554
2e7bc     00 2E 06 F6 | 	mov	local05, #0
2e7c0                 | ' 		n = 0;
2e7c0                 | ' 		do {
2e7c0                 | LR__4550
2e7c0     18 26 06 F1 | 	add	local01, #24
2e7c4     13 15 02 FB | 	rdlong	arg02, local01
2e7c8     18 26 86 F1 | 	sub	local01, #24
2e7cc     15 13 02 F6 | 	mov	arg01, local03
2e7d0     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2e7d4     FD 2C 0A F6 | 	mov	local04, result1 wz
2e7d8     50 00 90 5D |  if_ne	jmp	#LR__4553
2e7dc     1C 26 06 F1 | 	add	local01, #28
2e7e0     13 31 02 FB | 	rdlong	local06, local01
2e7e4     1C 26 86 F1 | 	sub	local01, #28
2e7e8     18 31 C2 FA | 	rdbyte	local06, local06
2e7ec     E5 30 0E F2 | 	cmp	local06, #229 wz
2e7f0     1C 26 06 51 |  if_ne	add	local01, #28
2e7f4     13 33 02 5B |  if_ne	rdlong	local07, local01
2e7f8     1C 26 86 51 |  if_ne	sub	local01, #28
2e7fc     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2e800     10 00 90 5D |  if_ne	jmp	#LR__4551
2e804     01 2E 06 F1 | 	add	local05, #1
2e808     14 2F 0A F2 | 	cmp	local05, local02 wz
2e80c     1C 00 90 AD |  if_e	jmp	#LR__4553
2e810     04 00 90 FD | 	jmp	#LR__4552
2e814                 | LR__4551
2e814     00 2E 06 F6 | 	mov	local05, #0
2e818                 | LR__4552
2e818     13 13 02 F6 | 	mov	arg01, local01
2e81c     01 14 06 F6 | 	mov	arg02, #1
2e820     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2e824     FD 2C 0A F6 | 	mov	local04, result1 wz
2e828     94 FF 9F AD |  if_e	jmp	#LR__4550
2e82c                 | LR__4553
2e82c                 | LR__4554
2e82c     04 2C 0E F2 | 	cmp	local04, #4 wz
2e830     07 2C 06 A6 |  if_e	mov	local04, #7
2e834                 | ' 	return res;
2e834     16 FB 01 F6 | 	mov	result1, local04
2e838     A7 F0 03 F6 | 	mov	ptra, fp
2e83c     B2 00 A0 FD | 	call	#popregs_
2e840                 | _fatfs_cc_dir_alloc_ret
2e840     2D 00 64 FD | 	ret
2e844                 | 
2e844                 | _fatfs_cc_ld_clust
2e844     09 01 02 F6 | 	mov	_var01, arg01
2e848     0A 13 02 F6 | 	mov	arg01, arg02
2e84c     1A 12 06 F1 | 	add	arg01, #26
2e850                 | ' {
2e850                 | ' 
2e850                 | ' 	return *((WORD*)ptr);
2e850     09 FB E1 FA | 	rdword	result1, arg01
2e854     FD 12 32 F9 | 	getword	arg01, result1, #0
2e858     00 01 C2 FA | 	rdbyte	_var01, _var01
2e85c     03 00 0E F2 | 	cmp	_var01, #3 wz
2e860     14 14 06 A1 |  if_e	add	arg02, #20
2e864                 | ' {
2e864                 | ' 
2e864                 | ' 	return *((WORD*)ptr);
2e864     0A FB E1 AA |  if_e	rdword	result1, arg02
2e868     10 FA 65 A0 |  if_e	shl	result1, #16
2e86c     FD 12 42 A5 |  if_e	or	arg01, result1
2e870                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2e870                 | ' 	}
2e870                 | ' 
2e870                 | ' 	return cl;
2e870     09 FB 01 F6 | 	mov	result1, arg01
2e874                 | _fatfs_cc_ld_clust_ret
2e874     2D 00 64 FD | 	ret
2e878                 | 
2e878                 | _fatfs_cc_st_clust
2e878     09 01 02 F6 | 	mov	_var01, arg01
2e87c     0A 13 02 F6 | 	mov	arg01, arg02
2e880     1A 12 06 F1 | 	add	arg01, #26
2e884     09 17 52 FC | 	wrword	arg03, arg01
2e888     00 01 C2 FA | 	rdbyte	_var01, _var01
2e88c     03 00 0E F2 | 	cmp	_var01, #3 wz
2e890     14 14 06 A1 |  if_e	add	arg02, #20
2e894     10 16 46 A0 |  if_e	shr	arg03, #16
2e898     0A 17 52 AC |  if_e	wrword	arg03, arg02
2e89c                 | _fatfs_cc_st_clust_ret
2e89c     2D 00 64 FD | 	ret
2e8a0                 | 
2e8a0                 | _fatfs_cc_cmp_lfn
2e8a0     07 4A 05 F6 | 	mov	COUNT_, #7
2e8a4     A8 00 A0 FD | 	call	#pushregs_
2e8a8     09 27 02 F6 | 	mov	local01, arg01
2e8ac     0A 13 02 F6 | 	mov	arg01, arg02
2e8b0     1A 12 06 F1 | 	add	arg01, #26
2e8b4                 | ' {
2e8b4                 | ' 
2e8b4                 | ' 	return *((WORD*)ptr);
2e8b4     09 FB E9 FA | 	rdword	result1, arg01 wz
2e8b8     00 FA 05 56 |  if_ne	mov	result1, #0
2e8bc     E0 00 90 5D |  if_ne	jmp	#LR__4566
2e8c0     0A 29 C2 FA | 	rdbyte	local02, arg02
2e8c4     3F 28 06 F5 | 	and	local02, #63
2e8c8     01 28 86 F1 | 	sub	local02, #1
2e8cc     0D 28 06 FD | 	qmul	local02, #13
2e8d0                 | ' 
2e8d0                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2e8d0                 | ' 
2e8d0                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2e8d0     01 2A 06 F6 | 	mov	local03, #1
2e8d4     00 2C 06 F6 | 	mov	local04, #0
2e8d8     18 2E 62 FD | 	getqx	local05
2e8dc                 | LR__4560
2e8dc     0D 2C 16 F2 | 	cmp	local04, #13 wc
2e8e0     9C 00 90 3D |  if_ae	jmp	#LR__4565
2e8e4     0A 13 02 F6 | 	mov	arg01, arg02
2e8e8     16 29 02 F6 | 	mov	local02, local04
2e8ec     01 00 00 FF 
2e8f0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2e8f4     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2e8f8     14 29 C2 FA | 	rdbyte	local02, local02
2e8fc     01 28 06 FA | 	mul	local02, #1
2e900     14 13 02 F1 | 	add	arg01, local02
2e904     01 00 00 FF 
2e908     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2e90c                 | ' {
2e90c                 | ' 
2e90c                 | ' 	return *((WORD*)ptr);
2e90c     09 FB E1 FA | 	rdword	result1, arg01
2e910     FD 30 02 F6 | 	mov	local06, result1
2e914     15 29 02 F6 | 	mov	local02, local03
2e918     0F 28 4E F7 | 	zerox	local02, #15 wz
2e91c     44 00 90 AD |  if_e	jmp	#LR__4563
2e920     00 2F 16 F2 | 	cmp	local05, #256 wc
2e924     2C 00 90 3D |  if_ae	jmp	#LR__4561
2e928     18 13 32 F9 | 	getword	arg01, local06, #0
2e92c     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2e930     FD 28 02 F6 | 	mov	local02, result1
2e934     17 2B 02 F6 | 	mov	local03, local05
2e938     01 2A 66 F0 | 	shl	local03, #1
2e93c     13 2B 02 F1 | 	add	local03, local01
2e940     15 13 E2 FA | 	rdword	arg01, local03
2e944     01 2E 06 F1 | 	add	local05, #1
2e948     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2e94c     FD 28 0A F2 | 	cmp	local02, result1 wz
2e950     08 00 90 AD |  if_e	jmp	#LR__4562
2e954                 | LR__4561
2e954                 | ' 				return 0;
2e954     00 FA 05 F6 | 	mov	result1, #0
2e958     44 00 90 FD | 	jmp	#LR__4566
2e95c                 | LR__4562
2e95c     18 2B 02 F6 | 	mov	local03, local06
2e960     14 00 90 FD | 	jmp	#LR__4564
2e964                 | LR__4563
2e964     18 31 32 F9 | 	getword	local06, local06, #0
2e968     7F 00 00 FF 
2e96c     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2e970     00 FA 05 56 |  if_ne	mov	result1, #0
2e974     28 00 90 5D |  if_ne	jmp	#LR__4566
2e978                 | LR__4564
2e978     01 2C 06 F1 | 	add	local04, #1
2e97c     5C FF 9F FD | 	jmp	#LR__4560
2e980                 | LR__4565
2e980     0A 29 C2 FA | 	rdbyte	local02, arg02
2e984     40 28 CE F7 | 	test	local02, #64 wz
2e988     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2e98c     01 2E 66 50 |  if_ne	shl	local05, #1
2e990     13 2F 02 51 |  if_ne	add	local05, local01
2e994     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2e998     00 FA 05 56 |  if_ne	mov	result1, #0
2e99c                 | ' 
2e99c                 | ' 	return 1;
2e99c     01 FA 05 A6 |  if_e	mov	result1, #1
2e9a0                 | LR__4566
2e9a0     A7 F0 03 F6 | 	mov	ptra, fp
2e9a4     B2 00 A0 FD | 	call	#popregs_
2e9a8                 | _fatfs_cc_cmp_lfn_ret
2e9a8     2D 00 64 FD | 	ret
2e9ac                 | 
2e9ac                 | _fatfs_cc_pick_lfn
2e9ac     09 01 02 F6 | 	mov	_var01, arg01
2e9b0     0A 13 02 F6 | 	mov	arg01, arg02
2e9b4     1A 12 06 F1 | 	add	arg01, #26
2e9b8                 | ' {
2e9b8                 | ' 
2e9b8                 | ' 	return *((WORD*)ptr);
2e9b8     09 FB E9 FA | 	rdword	result1, arg01 wz
2e9bc     00 FA 05 56 |  if_ne	mov	result1, #0
2e9c0     D4 00 90 5D |  if_ne	jmp	#LR__4575
2e9c4     0A 03 C2 FA | 	rdbyte	_var02, arg02
2e9c8     40 02 26 F5 | 	andn	_var02, #64
2e9cc     01 02 86 F1 | 	sub	_var02, #1
2e9d0     0D 02 06 FD | 	qmul	_var02, #13
2e9d4                 | ' 
2e9d4                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2e9d4                 | ' 
2e9d4                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2e9d4     01 04 06 F6 | 	mov	_var03, #1
2e9d8     00 06 06 F6 | 	mov	_var04, #0
2e9dc     18 08 62 FD | 	getqx	_var05
2e9e0                 | LR__4570
2e9e0     0D 06 16 F2 | 	cmp	_var04, #13 wc
2e9e4     80 00 90 3D |  if_ae	jmp	#LR__4573
2e9e8     0A 13 02 F6 | 	mov	arg01, arg02
2e9ec     03 03 02 F6 | 	mov	_var02, _var04
2e9f0     01 00 00 FF 
2e9f4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2e9f8     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2e9fc     01 03 C2 FA | 	rdbyte	_var02, _var02
2ea00     01 02 06 FA | 	mul	_var02, #1
2ea04     01 13 02 F1 | 	add	arg01, _var02
2ea08     01 00 00 FF 
2ea0c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2ea10                 | ' {
2ea10                 | ' 
2ea10                 | ' 	return *((WORD*)ptr);
2ea10     09 FB E1 FA | 	rdword	result1, arg01
2ea14     FD 0A 02 F6 | 	mov	_var06, result1
2ea18     02 03 02 F6 | 	mov	_var02, _var03
2ea1c     0F 02 4E F7 | 	zerox	_var02, #15 wz
2ea20     28 00 90 AD |  if_e	jmp	#LR__4571
2ea24     00 09 16 F2 | 	cmp	_var05, #256 wc
2ea28     00 FA 05 36 |  if_ae	mov	result1, #0
2ea2c     68 00 90 3D |  if_ae	jmp	#LR__4575
2ea30     04 03 02 F6 | 	mov	_var02, _var05
2ea34     01 02 66 F0 | 	shl	_var02, #1
2ea38     00 03 02 F1 | 	add	_var02, _var01
2ea3c     05 05 02 F6 | 	mov	_var03, _var06
2ea40     01 05 52 FC | 	wrword	_var03, _var02
2ea44     01 08 06 F1 | 	add	_var05, #1
2ea48     14 00 90 FD | 	jmp	#LR__4572
2ea4c                 | LR__4571
2ea4c     05 0B 32 F9 | 	getword	_var06, _var06, #0
2ea50     7F 00 00 FF 
2ea54     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2ea58     00 FA 05 56 |  if_ne	mov	result1, #0
2ea5c     38 00 90 5D |  if_ne	jmp	#LR__4575
2ea60                 | LR__4572
2ea60     01 06 06 F1 | 	add	_var04, #1
2ea64     78 FF 9F FD | 	jmp	#LR__4570
2ea68                 | LR__4573
2ea68     0A 03 C2 FA | 	rdbyte	_var02, arg02
2ea6c     40 02 CE F7 | 	test	_var02, #64 wz
2ea70     02 0D 02 56 |  if_ne	mov	_var07, _var03
2ea74     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2ea78     18 00 90 AD |  if_e	jmp	#LR__4574
2ea7c     00 09 16 F2 | 	cmp	_var05, #256 wc
2ea80     00 FA 05 36 |  if_ae	mov	result1, #0
2ea84     10 00 90 3D |  if_ae	jmp	#LR__4575
2ea88     01 08 66 F0 | 	shl	_var05, #1
2ea8c     00 09 02 F1 | 	add	_var05, _var01
2ea90     04 01 58 FC | 	wrword	#0, _var05
2ea94                 | LR__4574
2ea94                 | ' 		lfnbuf[i] = 0;
2ea94                 | ' 	}
2ea94                 | ' 
2ea94                 | ' 	return 1;
2ea94     01 FA 05 F6 | 	mov	result1, #1
2ea98                 | LR__4575
2ea98                 | _fatfs_cc_pick_lfn_ret
2ea98     2D 00 64 FD | 	ret
2ea9c                 | 
2ea9c                 | _fatfs_cc_put_lfn
2ea9c     0D 14 06 F1 | 	add	arg02, #13
2eaa0     0A 19 42 FC | 	wrbyte	arg04, arg02
2eaa4     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2eaa8     01 18 86 F1 | 	sub	arg04, #1
2eaac     0D 18 06 FD | 	qmul	arg04, #13
2eab0     09 01 02 F6 | 	mov	_var01, arg01
2eab4     02 14 86 F1 | 	sub	arg02, #2
2eab8     0A 1F 48 FC | 	wrbyte	#15, arg02
2eabc     01 14 06 F1 | 	add	arg02, #1
2eac0     0A 01 48 FC | 	wrbyte	#0, arg02
2eac4     0C 14 86 F1 | 	sub	arg02, #12
2eac8     0A 13 02 F6 | 	mov	arg01, arg02
2eacc     1A 12 06 F1 | 	add	arg01, #26
2ead0     09 01 58 FC | 	wrword	#0, arg01
2ead4     00 02 06 F6 | 	mov	_var02, #0
2ead8     00 04 06 F6 | 	mov	_var03, #0
2eadc                 | ' 	BYTE* dir,
2eadc                 | ' 	BYTE ord,
2eadc                 | ' 	BYTE sum
2eadc                 | ' )
2eadc                 | ' {
2eadc                 | ' 	UINT i, s;
2eadc                 | ' 	WCHAR wc;
2eadc                 | ' 
2eadc                 | ' 
2eadc                 | ' 	dir[ 13 ] = sum;
2eadc                 | ' 	dir[ 11 ] =  0x0F ;
2eadc                 | ' 	dir[ 12 ] = 0;
2eadc                 | ' 	st_word(dir +  26 , 0);
2eadc                 | ' 
2eadc                 | ' 	i = (ord - 1) * 13;
2eadc                 | ' 	s = wc = 0;
2eadc                 | ' 	do {
2eadc     01 00 00 FF 
2eae0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2eae4     18 06 62 FD | 	getqx	_var04
2eae8     97 2A 48 FB | 	callpa	#(@LR__4581-@LR__4580)>>2,fcache_load_ptr_
2eaec                 | LR__4580
2eaec     01 19 32 F9 | 	getword	arg04, _var02, #0
2eaf0     7F 00 00 FF 
2eaf4     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2eaf8     03 13 02 56 |  if_ne	mov	arg01, _var04
2eafc     01 06 06 51 |  if_ne	add	_var04, #1
2eb00     01 12 66 50 |  if_ne	shl	arg01, #1
2eb04     00 13 02 51 |  if_ne	add	arg01, _var01
2eb08     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2eb0c     0A 13 02 F6 | 	mov	arg01, arg02
2eb10     02 19 02 F6 | 	mov	arg04, _var03
2eb14     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2eb18     0C 19 C2 FA | 	rdbyte	arg04, arg04
2eb1c     01 18 06 FA | 	mul	arg04, #1
2eb20     0C 13 02 F1 | 	add	arg01, arg04
2eb24     09 03 52 FC | 	wrword	_var02, arg01
2eb28     01 19 02 F6 | 	mov	arg04, _var02
2eb2c     0F 18 4E F7 | 	zerox	arg04, #15 wz
2eb30     0F 02 CE A9 |  if_e	bmask	_var02, #15
2eb34     01 04 06 F1 | 	add	_var03, #1
2eb38     0D 04 16 F2 | 	cmp	_var03, #13 wc
2eb3c     AC FF 9F CD |  if_b	jmp	#LR__4580
2eb40                 | LR__4581
2eb40     01 00 00 FF 
2eb44     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2eb48     01 03 32 F9 | 	getword	_var02, _var02, #0
2eb4c     7F 00 00 FF 
2eb50     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2eb54     01 06 66 50 |  if_ne	shl	_var04, #1
2eb58     00 07 02 51 |  if_ne	add	_var04, _var01
2eb5c     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2eb60     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2eb64     40 16 46 A5 |  if_e	or	arg03, #64
2eb68     0A 17 42 FC | 	wrbyte	arg03, arg02
2eb6c                 | _fatfs_cc_put_lfn_ret
2eb6c     2D 00 64 FD | 	ret
2eb70                 | 
2eb70                 | _fatfs_cc_gen_numname
2eb70     08 4A 05 F6 | 	mov	COUNT_, #8
2eb74     A8 00 A0 FD | 	call	#pushregs_
2eb78     2C F0 07 F1 | 	add	ptra, #44
2eb7c     09 27 02 F6 | 	mov	local01, arg01
2eb80     0A 29 02 F6 | 	mov	local02, arg02
2eb84     0B 2B 02 F6 | 	mov	local03, arg03
2eb88     0C 2D 02 F6 | 	mov	local04, arg04
2eb8c     13 13 02 F6 | 	mov	arg01, local01
2eb90     14 15 02 F6 | 	mov	arg02, local02
2eb94     0B 16 06 F6 | 	mov	arg03, #11
2eb98     9C 72 BF FD | 	call	#__system____builtin_memmove
2eb9c     06 2C 16 F2 | 	cmp	local04, #6 wc
2eba0     48 00 90 CD |  if_b	jmp	#LR__4595
2eba4     16 2F 02 F6 | 	mov	local05, local04
2eba8     97 1E 48 FB | 	callpa	#(@LR__4593-@LR__4590)>>2,fcache_load_ptr_
2ebac                 | ' 		sreg = seq;
2ebac                 | ' 		while (*lfn) {
2ebac                 | LR__4590
2ebac     15 31 EA FA | 	rdword	local06, local03 wz
2ebb0     34 00 90 AD |  if_e	jmp	#LR__4594
2ebb4     15 33 E2 FA | 	rdword	local07, local03
2ebb8                 | ' 			wc = *lfn++;
2ebb8                 | ' 			for (i = 0; i < 16; i++) {
2ebb8     02 2A 06 F1 | 	add	local03, #2
2ebbc     10 12 DC FC | 	rep	@LR__4592, #16
2ebc0                 | LR__4591
2ebc0     01 2E 66 F0 | 	shl	local05, #1
2ebc4     19 31 32 F9 | 	getword	local06, local07, #0
2ebc8     01 30 06 F5 | 	and	local06, #1
2ebcc     18 2F 02 F1 | 	add	local05, local06
2ebd0     19 33 32 F9 | 	getword	local07, local07, #0
2ebd4     01 32 46 F0 | 	shr	local07, #1
2ebd8     10 2E 2E F4 | 	testbn	local05, #16 wz
2ebdc     88 00 00 5F 
2ebe0     21 2E 66 55 |  if_ne	xor	local05, ##69665
2ebe4                 | LR__4592
2ebe4     C4 FF 9F FD | 	jmp	#LR__4590
2ebe8                 | LR__4593
2ebe8                 | LR__4594
2ebe8     17 2D 02 F6 | 	mov	local04, local05
2ebec                 | LR__4595
2ebec     07 32 06 F6 | 	mov	local07, #7
2ebf0                 | ' 			}
2ebf0                 | ' 		}
2ebf0                 | ' 		seq = (UINT)sreg;
2ebf0                 | ' 	}
2ebf0                 | ' 
2ebf0                 | ' 
2ebf0                 | ' 	i = 7;
2ebf0                 | ' 	do {
2ebf0     10 4E 05 F1 | 	add	fp, #16
2ebf4     97 1A 48 FB | 	callpa	#(@LR__4597-@LR__4596)>>2,fcache_load_ptr_
2ebf8                 | LR__4596
2ebf8     16 2F 42 F8 | 	getnib	local05, local04, #0
2ebfc     30 2E 06 F1 | 	add	local05, #48
2ec00     04 2C 46 F0 | 	shr	local04, #4
2ec04     17 31 E2 F8 | 	getbyte	local06, local05, #0
2ec08     3A 30 16 F2 | 	cmp	local06, #58 wc
2ec0c     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2ec10     07 2E 06 31 |  if_ae	add	local05, #7
2ec14     19 31 02 F6 | 	mov	local06, local07
2ec18     01 32 8E F1 | 	sub	local07, #1 wz
2ec1c     A7 30 02 F1 | 	add	local06, fp
2ec20     18 2F 42 FC | 	wrbyte	local05, local06
2ec24     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2ec28     CC FF 9F 5D |  if_ne	jmp	#LR__4596
2ec2c                 | LR__4597
2ec2c     19 31 02 F6 | 	mov	local06, local07
2ec30     A7 30 02 F1 | 	add	local06, fp
2ec34     18 FD 48 FC | 	wrbyte	#126, local06
2ec38                 | ' 	ns[i] = '~';
2ec38                 | ' 
2ec38                 | ' 
2ec38                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2ec38     00 2E 06 F6 | 	mov	local05, #0
2ec3c     10 4E 85 F1 | 	sub	fp, #16
2ec40     97 2A 48 FB | 	callpa	#(@LR__4600-@LR__4598)>>2,fcache_load_ptr_
2ec44                 | LR__4598
2ec44     19 2F 12 F2 | 	cmp	local05, local07 wc
2ec48     4C 00 90 3D |  if_ae	jmp	#LR__4601
2ec4c     17 31 02 F6 | 	mov	local06, local05
2ec50     13 31 02 F1 | 	add	local06, local01
2ec54     18 31 C2 FA | 	rdbyte	local06, local06
2ec58     20 30 0E F2 | 	cmp	local06, #32 wz
2ec5c     38 00 90 AD |  if_e	jmp	#LR__4601
2ec60     17 13 02 F6 | 	mov	arg01, local05
2ec64     13 13 02 F1 | 	add	arg01, local01
2ec68     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2ec6c     00 FA 05 56 |  if_ne	mov	result1, #0
2ec70                 | ' 
2ec70                 | ' 	return 0;
2ec70     00 FA 05 A6 |  if_e	mov	result1, #0
2ec74     00 FA 0D F2 | 	cmp	result1, #0 wz
2ec78     14 00 90 AD |  if_e	jmp	#LR__4599
2ec7c     19 31 02 F6 | 	mov	local06, local07
2ec80     01 30 86 F1 | 	sub	local06, #1
2ec84     18 2F 0A F2 | 	cmp	local05, local06 wz
2ec88     0C 00 90 AD |  if_e	jmp	#LR__4601
2ec8c     01 2E 06 F1 | 	add	local05, #1
2ec90                 | LR__4599
2ec90     01 2E 06 F1 | 	add	local05, #1
2ec94     AC FF 9F FD | 	jmp	#LR__4598
2ec98                 | LR__4600
2ec98                 | LR__4601
2ec98     97 20 48 FB | 	callpa	#(@LR__4605-@LR__4602)>>2,fcache_load_ptr_
2ec9c                 | ' 			j++;
2ec9c                 | ' 		}
2ec9c                 | ' 	}
2ec9c                 | ' 	do {
2ec9c                 | LR__4602
2ec9c     17 31 02 F6 | 	mov	local06, local05
2eca0     13 31 02 F1 | 	add	local06, local01
2eca4     08 32 16 F2 | 	cmp	local07, #8 wc
2eca8     01 2E 06 F1 | 	add	local05, #1
2ecac     1C 00 90 3D |  if_ae	jmp	#LR__4603
2ecb0     19 2D 02 F6 | 	mov	local04, local07
2ecb4     10 4E 05 F1 | 	add	fp, #16
2ecb8     A7 2C 02 F1 | 	add	local04, fp
2ecbc     16 35 C2 FA | 	rdbyte	local08, local04
2ecc0     01 32 06 F1 | 	add	local07, #1
2ecc4     10 4E 85 F1 | 	sub	fp, #16
2ecc8     04 00 90 FD | 	jmp	#LR__4604
2eccc                 | LR__4603
2eccc     20 34 06 F6 | 	mov	local08, #32
2ecd0                 | LR__4604
2ecd0     18 35 42 FC | 	wrbyte	local08, local06
2ecd4     08 2E 16 F2 | 	cmp	local05, #8 wc
2ecd8     C0 FF 9F CD |  if_b	jmp	#LR__4602
2ecdc                 | LR__4605
2ecdc     A7 F0 03 F6 | 	mov	ptra, fp
2ece0     B2 00 A0 FD | 	call	#popregs_
2ece4                 | _fatfs_cc_gen_numname_ret
2ece4     2D 00 64 FD | 	ret
2ece8                 | 
2ece8                 | _fatfs_cc_sum_sfn
2ece8     00 00 06 F6 | 	mov	_var01, #0
2ecec                 | ' )
2ecec                 | ' {
2ecec                 | ' 	BYTE sum = 0;
2ecec                 | ' 	UINT n = 11;
2ecec                 | ' 
2ecec                 | ' 	do {
2ecec     97 12 48 FB | 	callpa	#(@LR__4612-@LR__4610)>>2,fcache_load_ptr_
2ecf0                 | LR__4610
2ecf0     0B 10 DC FC | 	rep	@LR__4613, #11
2ecf4                 | LR__4611
2ecf4     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2ecf8     01 FA 45 F0 | 	shr	result1, #1
2ecfc     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2ed00     07 00 66 F0 | 	shl	_var01, #7
2ed04     00 FB 01 F1 | 	add	result1, _var01
2ed08     09 01 C2 FA | 	rdbyte	_var01, arg01
2ed0c     FD 00 02 F1 | 	add	_var01, result1
2ed10     01 12 06 F1 | 	add	arg01, #1
2ed14                 | LR__4612
2ed14                 | LR__4613
2ed14                 | ' 	return sum;
2ed14     00 FB 01 F6 | 	mov	result1, _var01
2ed18                 | _fatfs_cc_sum_sfn_ret
2ed18     2D 00 64 FD | 	ret
2ed1c                 | 
2ed1c                 | _fatfs_cc_dir_read
2ed1c     0C 4A 05 F6 | 	mov	COUNT_, #12
2ed20     A8 00 A0 FD | 	call	#pushregs_
2ed24     09 27 02 F6 | 	mov	local01, arg01
2ed28     0A 29 02 F6 | 	mov	local02, arg02
2ed2c     04 2A 06 F6 | 	mov	local03, #4
2ed30     13 2D 02 FB | 	rdlong	local04, local01
2ed34     FF 2E 06 F6 | 	mov	local05, #255
2ed38     FF 30 06 F6 | 	mov	local06, #255
2ed3c                 | ' )
2ed3c                 | ' {
2ed3c                 | ' 	FRESULT res = FR_NO_FILE;
2ed3c                 | ' 	FATFS *fs = dp->obj.fs;
2ed3c                 | ' 	BYTE attr, b;
2ed3c                 | ' 
2ed3c                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2ed3c                 | ' 
2ed3c                 | ' 
2ed3c                 | ' 	while (dp->sect) {
2ed3c                 | LR__4620
2ed3c     18 26 06 F1 | 	add	local01, #24
2ed40     13 FB 09 FB | 	rdlong	result1, local01 wz
2ed44     18 26 86 F1 | 	sub	local01, #24
2ed48     AC 01 90 AD |  if_e	jmp	#LR__4630
2ed4c     18 26 06 F1 | 	add	local01, #24
2ed50     13 15 02 FB | 	rdlong	arg02, local01
2ed54     18 26 86 F1 | 	sub	local01, #24
2ed58     16 13 02 F6 | 	mov	arg01, local04
2ed5c     AC ED BF FD | 	call	#_fatfs_cc_move_window
2ed60     FD 2A 0A F6 | 	mov	local03, result1 wz
2ed64     90 01 90 5D |  if_ne	jmp	#LR__4630
2ed68     1C 26 06 F1 | 	add	local01, #28
2ed6c     13 FB 01 FB | 	rdlong	result1, local01
2ed70     1C 26 86 F1 | 	sub	local01, #28
2ed74     FD 32 C2 FA | 	rdbyte	local07, result1
2ed78     19 FB 01 F6 | 	mov	result1, local07
2ed7c     07 FA 4D F7 | 	zerox	result1, #7 wz
2ed80     04 2A 06 A6 |  if_e	mov	local03, #4
2ed84                 | ' 			res = FR_NO_FILE; break;
2ed84     70 01 90 AD |  if_e	jmp	#LR__4630
2ed88     1C 26 06 F1 | 	add	local01, #28
2ed8c     13 35 02 FB | 	rdlong	local08, local01
2ed90     0B 34 06 F1 | 	add	local08, #11
2ed94     1A 37 C2 FA | 	rdbyte	local09, local08
2ed98     3F 36 06 F5 | 	and	local09, #63
2ed9c     16 26 86 F1 | 	sub	local01, #22
2eda0     13 37 42 FC | 	wrbyte	local09, local01
2eda4     06 26 86 F1 | 	sub	local01, #6
2eda8     19 FB E1 F8 | 	getbyte	result1, local07, #0
2edac     E5 FA 0D F2 | 	cmp	result1, #229 wz
2edb0     19 35 02 56 |  if_ne	mov	local08, local07
2edb4     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2edb8     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2edbc     1C 00 90 AD |  if_e	jmp	#LR__4621
2edc0     00 38 06 F6 | 	mov	local10, #0
2edc4     1B 35 E2 F8 | 	getbyte	local08, local09, #0
2edc8     20 34 26 F5 | 	andn	local08, #32
2edcc     08 34 0E F2 | 	cmp	local08, #8 wz
2edd0     01 38 06 A6 |  if_e	mov	local10, #1
2edd4     14 39 0A F2 | 	cmp	local10, local02 wz
2edd8     08 00 90 AD |  if_e	jmp	#LR__4622
2eddc                 | LR__4621
2eddc     FF 2E 06 F6 | 	mov	local05, #255
2ede0     00 01 90 FD | 	jmp	#LR__4629
2ede4                 | LR__4622
2ede4     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2ede8     0F 36 0E F2 | 	cmp	local09, #15 wz
2edec     B4 00 90 5D |  if_ne	jmp	#LR__4626
2edf0     19 3B E2 F8 | 	getbyte	local11, local07, #0
2edf4     40 3A CE F7 | 	test	local11, #64 wz
2edf8     30 00 90 AD |  if_e	jmp	#LR__4623
2edfc     1C 26 06 F1 | 	add	local01, #28
2ee00     13 3B 02 FB | 	rdlong	local11, local01
2ee04     0D 3A 06 F1 | 	add	local11, #13
2ee08     1D 31 C2 FA | 	rdbyte	local06, local11
2ee0c     19 33 E2 F8 | 	getbyte	local07, local07, #0
2ee10     BF 32 06 F5 | 	and	local07, #191
2ee14     19 2F 02 F6 | 	mov	local05, local07
2ee18     0C 26 86 F1 | 	sub	local01, #12
2ee1c     13 3B 02 FB | 	rdlong	local11, local01
2ee20     1C 26 06 F1 | 	add	local01, #28
2ee24     13 3B 62 FC | 	wrlong	local11, local01
2ee28     2C 26 86 F1 | 	sub	local01, #44
2ee2c                 | LR__4623
2ee2c     19 35 E2 F8 | 	getbyte	local08, local07, #0
2ee30     17 39 E2 F8 | 	getbyte	local10, local05, #0
2ee34     1C 35 0A F2 | 	cmp	local08, local10 wz
2ee38     5C 00 90 5D |  if_ne	jmp	#LR__4624
2ee3c     18 39 E2 F8 | 	getbyte	local10, local06, #0
2ee40     1C 26 06 F1 | 	add	local01, #28
2ee44     13 37 02 FB | 	rdlong	local09, local01
2ee48     1C 26 86 F1 | 	sub	local01, #28
2ee4c     0D 36 06 F1 | 	add	local09, #13
2ee50     1B 35 C2 FA | 	rdbyte	local08, local09
2ee54     1A 37 E2 F8 | 	getbyte	local09, local08, #0
2ee58     1B 39 0A F2 | 	cmp	local10, local09 wz
2ee5c     38 00 90 5D |  if_ne	jmp	#LR__4624
2ee60     0C 2C 06 F1 | 	add	local04, #12
2ee64     16 13 02 FB | 	rdlong	arg01, local04
2ee68     0C 2C 86 F1 | 	sub	local04, #12
2ee6c     1C 26 06 F1 | 	add	local01, #28
2ee70     13 3D 02 FB | 	rdlong	local12, local01
2ee74     1C 26 86 F1 | 	sub	local01, #28
2ee78     1E 15 02 F6 | 	mov	arg02, local12
2ee7c     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2ee80     00 FA 4D F2 | 	cmps	result1, #0 wz
2ee84     17 3D 02 56 |  if_ne	mov	local12, local05
2ee88     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
2ee8c     01 3C 86 51 |  if_ne	sub	local12, #1
2ee90     1E 3B 02 56 |  if_ne	mov	local11, local12
2ee94     04 00 90 5D |  if_ne	jmp	#LR__4625
2ee98                 | LR__4624
2ee98     FF 3A 06 F6 | 	mov	local11, #255
2ee9c                 | LR__4625
2ee9c     1D 2F 02 F6 | 	mov	local05, local11
2eea0     40 00 90 FD | 	jmp	#LR__4628
2eea4                 | LR__4626
2eea4     17 3B 02 F6 | 	mov	local11, local05
2eea8     07 3A 4E F7 | 	zerox	local11, #7 wz
2eeac     20 00 90 5D |  if_ne	jmp	#LR__4627
2eeb0     18 31 E2 F8 | 	getbyte	local06, local06, #0
2eeb4     1C 26 06 F1 | 	add	local01, #28
2eeb8     13 13 02 FB | 	rdlong	arg01, local01
2eebc     1C 26 86 F1 | 	sub	local01, #28
2eec0     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2eec4     FD FA E1 F8 | 	getbyte	result1, result1, #0
2eec8     FD 30 0A F2 | 	cmp	local06, result1 wz
2eecc     28 00 90 AD |  if_e	jmp	#LR__4630
2eed0                 | LR__4627
2eed0     2C 26 06 F1 | 	add	local01, #44
2eed4     FF FF FF FF 
2eed8     13 FF 6B FC | 	wrlong	##-1, local01
2eedc     2C 26 86 F1 | 	sub	local01, #44
2eee0                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2eee0                 | ' 					}
2eee0                 | ' 					break;
2eee0     14 00 90 FD | 	jmp	#LR__4630
2eee4                 | LR__4628
2eee4                 | LR__4629
2eee4     13 13 02 F6 | 	mov	arg01, local01
2eee8     00 14 06 F6 | 	mov	arg02, #0
2eeec     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2eef0     FD 2A 0A F6 | 	mov	local03, result1 wz
2eef4     44 FE 9F AD |  if_e	jmp	#LR__4620
2eef8                 | LR__4630
2eef8     00 2A 0E F2 | 	cmp	local03, #0 wz
2eefc     18 26 06 51 |  if_ne	add	local01, #24
2ef00     13 01 68 5C |  if_ne	wrlong	#0, local01
2ef04                 | ' 	return res;
2ef04     15 FB 01 F6 | 	mov	result1, local03
2ef08     A7 F0 03 F6 | 	mov	ptra, fp
2ef0c     B2 00 A0 FD | 	call	#popregs_
2ef10                 | _fatfs_cc_dir_read_ret
2ef10     2D 00 64 FD | 	ret
2ef14                 | 
2ef14                 | _fatfs_cc_dir_find
2ef14     0B 4A 05 F6 | 	mov	COUNT_, #11
2ef18     A8 00 A0 FD | 	call	#pushregs_
2ef1c     09 27 02 F6 | 	mov	local01, arg01
2ef20     13 29 02 FB | 	rdlong	local02, local01
2ef24     13 13 02 F6 | 	mov	arg01, local01
2ef28     00 14 06 F6 | 	mov	arg02, #0
2ef2c     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2ef30     00 FA 0D F2 | 	cmp	result1, #0 wz
2ef34     18 02 90 5D |  if_ne	jmp	#LR__4652
2ef38     FF 2A 06 F6 | 	mov	local03, #255
2ef3c     FF 2C 06 F6 | 	mov	local04, #255
2ef40     2C 26 06 F1 | 	add	local01, #44
2ef44     FF FF FF FF 
2ef48     13 FF 6B FC | 	wrlong	##-1, local01
2ef4c     2C 26 86 F1 | 	sub	local01, #44
2ef50                 | ' #line 2404 "ff.c"
2ef50                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2ef50                 | ' 
2ef50                 | ' 	do {
2ef50                 | LR__4640
2ef50     18 26 06 F1 | 	add	local01, #24
2ef54     13 15 02 FB | 	rdlong	arg02, local01
2ef58     18 26 86 F1 | 	sub	local01, #24
2ef5c     14 13 02 F6 | 	mov	arg01, local02
2ef60     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2ef64     FD 2E 0A F6 | 	mov	local05, result1 wz
2ef68     E0 01 90 5D |  if_ne	jmp	#LR__4651
2ef6c     1C 26 06 F1 | 	add	local01, #28
2ef70     13 17 02 FB | 	rdlong	arg03, local01
2ef74     1C 26 86 F1 | 	sub	local01, #28
2ef78     0B 31 C2 FA | 	rdbyte	local06, arg03
2ef7c     18 17 02 F6 | 	mov	arg03, local06
2ef80     07 16 4E F7 | 	zerox	arg03, #7 wz
2ef84     04 2E 06 A6 |  if_e	mov	local05, #4
2ef88     C0 01 90 AD |  if_e	jmp	#LR__4651
2ef8c     1C 26 06 F1 | 	add	local01, #28
2ef90     13 33 02 FB | 	rdlong	local07, local01
2ef94     19 17 02 F6 | 	mov	arg03, local07
2ef98     0B 16 06 F1 | 	add	arg03, #11
2ef9c     0B 35 C2 FA | 	rdbyte	local08, arg03
2efa0     3F 34 06 F5 | 	and	local08, #63
2efa4     16 26 86 F1 | 	sub	local01, #22
2efa8     13 35 42 FC | 	wrbyte	local08, local01
2efac     06 26 86 F1 | 	sub	local01, #6
2efb0     18 17 E2 F8 | 	getbyte	arg03, local06, #0
2efb4     E5 16 0E F2 | 	cmp	arg03, #229 wz
2efb8     18 00 90 AD |  if_e	jmp	#LR__4641
2efbc     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
2efc0     08 16 CE F7 | 	test	arg03, #8 wz
2efc4     1A 33 02 56 |  if_ne	mov	local07, local08
2efc8     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
2efcc     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
2efd0     18 00 90 AD |  if_e	jmp	#LR__4642
2efd4                 | LR__4641
2efd4     FF 2C 06 F6 | 	mov	local04, #255
2efd8     2C 26 06 F1 | 	add	local01, #44
2efdc     FF FF FF FF 
2efe0     13 FF 6B FC | 	wrlong	##-1, local01
2efe4     2C 26 86 F1 | 	sub	local01, #44
2efe8     4C 01 90 FD | 	jmp	#LR__4650
2efec                 | LR__4642
2efec     1A 35 E2 F8 | 	getbyte	local08, local08, #0
2eff0     0F 34 0E F2 | 	cmp	local08, #15 wz
2eff4     C8 00 90 5D |  if_ne	jmp	#LR__4646
2eff8     2B 26 06 F1 | 	add	local01, #43
2effc     13 35 C2 FA | 	rdbyte	local08, local01
2f000     2B 26 86 F1 | 	sub	local01, #43
2f004     40 34 CE F7 | 	test	local08, #64 wz
2f008     2C 01 90 5D |  if_ne	jmp	#LR__4649
2f00c     18 37 E2 F8 | 	getbyte	local09, local06, #0
2f010     40 36 CE F7 | 	test	local09, #64 wz
2f014     30 00 90 AD |  if_e	jmp	#LR__4643
2f018     1C 26 06 F1 | 	add	local01, #28
2f01c     13 37 02 FB | 	rdlong	local09, local01
2f020     0D 36 06 F1 | 	add	local09, #13
2f024     1B 2B C2 FA | 	rdbyte	local03, local09
2f028     18 31 E2 F8 | 	getbyte	local06, local06, #0
2f02c     BF 30 06 F5 | 	and	local06, #191
2f030     18 2D 02 F6 | 	mov	local04, local06
2f034     0C 26 86 F1 | 	sub	local01, #12
2f038     13 37 02 FB | 	rdlong	local09, local01
2f03c     1C 26 06 F1 | 	add	local01, #28
2f040     13 37 62 FC | 	wrlong	local09, local01
2f044     2C 26 86 F1 | 	sub	local01, #44
2f048                 | LR__4643
2f048     18 39 E2 F8 | 	getbyte	local10, local06, #0
2f04c     16 33 E2 F8 | 	getbyte	local07, local04, #0
2f050     19 39 0A F2 | 	cmp	local10, local07 wz
2f054     5C 00 90 5D |  if_ne	jmp	#LR__4644
2f058     15 35 E2 F8 | 	getbyte	local08, local03, #0
2f05c     1C 26 06 F1 | 	add	local01, #28
2f060     13 33 02 FB | 	rdlong	local07, local01
2f064     1C 26 86 F1 | 	sub	local01, #28
2f068     0D 32 06 F1 | 	add	local07, #13
2f06c     19 31 C2 FA | 	rdbyte	local06, local07
2f070     18 33 E2 F8 | 	getbyte	local07, local06, #0
2f074     19 35 0A F2 | 	cmp	local08, local07 wz
2f078     38 00 90 5D |  if_ne	jmp	#LR__4644
2f07c     0C 28 06 F1 | 	add	local02, #12
2f080     14 13 02 FB | 	rdlong	arg01, local02
2f084     0C 28 86 F1 | 	sub	local02, #12
2f088     1C 26 06 F1 | 	add	local01, #28
2f08c     13 3B 02 FB | 	rdlong	local11, local01
2f090     1C 26 86 F1 | 	sub	local01, #28
2f094     1D 15 02 F6 | 	mov	arg02, local11
2f098     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2f09c     00 FA 4D F2 | 	cmps	result1, #0 wz
2f0a0     16 3B 02 56 |  if_ne	mov	local11, local04
2f0a4     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
2f0a8     01 3A 86 51 |  if_ne	sub	local11, #1
2f0ac     1D 37 02 56 |  if_ne	mov	local09, local11
2f0b0     04 00 90 5D |  if_ne	jmp	#LR__4645
2f0b4                 | LR__4644
2f0b4     FF 36 06 F6 | 	mov	local09, #255
2f0b8                 | LR__4645
2f0b8     1B 2D 02 F6 | 	mov	local04, local09
2f0bc     78 00 90 FD | 	jmp	#LR__4649
2f0c0                 | LR__4646
2f0c0     16 37 02 F6 | 	mov	local09, local04
2f0c4     07 36 4E F7 | 	zerox	local09, #7 wz
2f0c8     20 00 90 5D |  if_ne	jmp	#LR__4647
2f0cc     15 39 E2 F8 | 	getbyte	local10, local03, #0
2f0d0     1C 26 06 F1 | 	add	local01, #28
2f0d4     13 13 02 FB | 	rdlong	arg01, local01
2f0d8     1C 26 86 F1 | 	sub	local01, #28
2f0dc     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2f0e0     FD FA E1 F8 | 	getbyte	result1, result1, #0
2f0e4     FD 38 0A F2 | 	cmp	local10, result1 wz
2f0e8     60 00 90 AD |  if_e	jmp	#LR__4651
2f0ec                 | LR__4647
2f0ec     2B 26 06 F1 | 	add	local01, #43
2f0f0     13 37 C2 FA | 	rdbyte	local09, local01
2f0f4     2B 26 86 F1 | 	sub	local01, #43
2f0f8     01 36 CE F7 | 	test	local09, #1 wz
2f0fc     24 00 90 5D |  if_ne	jmp	#LR__4648
2f100     1C 26 06 F1 | 	add	local01, #28
2f104     13 13 02 FB | 	rdlong	arg01, local01
2f108     04 26 06 F1 | 	add	local01, #4
2f10c     13 15 02 F6 | 	mov	arg02, local01
2f110     20 26 86 F1 | 	sub	local01, #32
2f114     0B 16 06 F6 | 	mov	arg03, #11
2f118     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2f11c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f120     28 00 90 AD |  if_e	jmp	#LR__4651
2f124                 | LR__4648
2f124     FF 2C 06 F6 | 	mov	local04, #255
2f128     2C 26 06 F1 | 	add	local01, #44
2f12c     FF FF FF FF 
2f130     13 FF 6B FC | 	wrlong	##-1, local01
2f134     2C 26 86 F1 | 	sub	local01, #44
2f138                 | LR__4649
2f138                 | LR__4650
2f138     13 13 02 F6 | 	mov	arg01, local01
2f13c     00 14 06 F6 | 	mov	arg02, #0
2f140     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2f144     FD 2E 0A F6 | 	mov	local05, result1 wz
2f148     04 FE 9F AD |  if_e	jmp	#LR__4640
2f14c                 | LR__4651
2f14c                 | ' 
2f14c                 | ' 	return res;
2f14c     17 FB 01 F6 | 	mov	result1, local05
2f150                 | LR__4652
2f150     A7 F0 03 F6 | 	mov	ptra, fp
2f154     B2 00 A0 FD | 	call	#popregs_
2f158                 | _fatfs_cc_dir_find_ret
2f158     2D 00 64 FD | 	ret
2f15c                 | 
2f15c                 | _fatfs_cc_dir_register
2f15c     0A 4A 05 F6 | 	mov	COUNT_, #10
2f160     A8 00 A0 FD | 	call	#pushregs_
2f164     2C F0 07 F1 | 	add	ptra, #44
2f168     04 4E 05 F1 | 	add	fp, #4
2f16c     A7 12 62 FC | 	wrlong	arg01, fp
2f170     09 27 02 FB | 	rdlong	local01, arg01
2f174     08 4E 05 F1 | 	add	fp, #8
2f178     A7 26 62 FC | 	wrlong	local01, fp
2f17c     08 4E 85 F1 | 	sub	fp, #8
2f180     A7 28 02 FB | 	rdlong	local02, fp
2f184     04 4E 85 F1 | 	sub	fp, #4
2f188     2B 28 06 F1 | 	add	local02, #43
2f18c     14 29 C2 FA | 	rdbyte	local02, local02
2f190     A0 28 CE F7 | 	test	local02, #160 wz
2f194     06 FA 05 56 |  if_ne	mov	result1, #6
2f198     F8 03 90 5D |  if_ne	jmp	#LR__4675
2f19c                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2f19c     14 4E 05 F1 | 	add	fp, #20
2f1a0     A7 00 68 FC | 	wrlong	#0, fp
2f1a4     14 4E 85 F1 | 	sub	fp, #20
2f1a8     97 28 48 FB | 	callpa	#(@LR__4661-@LR__4660)>>2,fcache_load_ptr_
2f1ac                 | LR__4660
2f1ac     0C 4E 05 F1 | 	add	fp, #12
2f1b0     A7 28 02 FB | 	rdlong	local02, fp
2f1b4     0C 28 06 F1 | 	add	local02, #12
2f1b8     14 2B 02 FB | 	rdlong	local03, local02
2f1bc     08 4E 05 F1 | 	add	fp, #8
2f1c0     A7 2C 02 FB | 	rdlong	local04, fp
2f1c4     14 4E 85 F1 | 	sub	fp, #20
2f1c8     01 2C 66 F0 | 	shl	local04, #1
2f1cc     15 2D 02 F1 | 	add	local04, local03
2f1d0     16 29 EA FA | 	rdword	local02, local04 wz
2f1d4     24 00 90 AD |  if_e	jmp	#LR__4662
2f1d8     14 4E 05 F1 | 	add	fp, #20
2f1dc     A7 2E 02 FB | 	rdlong	local05, fp
2f1e0     17 31 02 F6 | 	mov	local06, local05
2f1e4     17 33 02 F6 | 	mov	local07, local05
2f1e8     19 35 02 F6 | 	mov	local08, local07
2f1ec     01 34 06 F1 | 	add	local08, #1
2f1f0     A7 34 62 FC | 	wrlong	local08, fp
2f1f4     14 4E 85 F1 | 	sub	fp, #20
2f1f8     B0 FF 9F FD | 	jmp	#LR__4660
2f1fc                 | LR__4661
2f1fc                 | LR__4662
2f1fc     1C 4E 05 F1 | 	add	fp, #28
2f200     A7 12 02 F6 | 	mov	arg01, fp
2f204     18 4E 85 F1 | 	sub	fp, #24
2f208     A7 14 02 FB | 	rdlong	arg02, fp
2f20c     04 4E 85 F1 | 	sub	fp, #4
2f210     20 14 06 F1 | 	add	arg02, #32
2f214     0C 16 06 F6 | 	mov	arg03, #12
2f218     1C 6C BF FD | 	call	#__system____builtin_memmove
2f21c     27 4E 05 F1 | 	add	fp, #39
2f220     A7 36 C2 FA | 	rdbyte	local09, fp
2f224     27 4E 85 F1 | 	sub	fp, #39
2f228     01 36 CE F7 | 	test	local09, #1 wz
2f22c     F4 00 90 AD |  if_e	jmp	#LR__4665
2f230     04 4E 05 F1 | 	add	fp, #4
2f234     A7 38 02 FB | 	rdlong	local10, fp
2f238     2B 38 06 F1 | 	add	local10, #43
2f23c     1C 81 48 FC | 	wrbyte	#64, local10
2f240                 | ' 		dp->fn[ 11 ] =  0x40 ;
2f240                 | ' 		for (n = 1; n < 100; n++) {
2f240     0C 4E 05 F1 | 	add	fp, #12
2f244     A7 02 68 FC | 	wrlong	#1, fp
2f248     10 4E 85 F1 | 	sub	fp, #16
2f24c                 | LR__4663
2f24c     10 4E 05 F1 | 	add	fp, #16
2f250     A7 28 02 FB | 	rdlong	local02, fp
2f254     10 4E 85 F1 | 	sub	fp, #16
2f258     64 28 16 F2 | 	cmp	local02, #100 wc
2f25c     70 00 90 3D |  if_ae	jmp	#LR__4664
2f260     04 4E 05 F1 | 	add	fp, #4
2f264     A7 12 02 FB | 	rdlong	arg01, fp
2f268     20 12 06 F1 | 	add	arg01, #32
2f26c     18 4E 05 F1 | 	add	fp, #24
2f270     A7 14 02 F6 | 	mov	arg02, fp
2f274     10 4E 85 F1 | 	sub	fp, #16
2f278     A7 38 02 FB | 	rdlong	local10, fp
2f27c     0C 38 06 F1 | 	add	local10, #12
2f280     1C 17 02 FB | 	rdlong	arg03, local10
2f284     04 4E 05 F1 | 	add	fp, #4
2f288     A7 18 02 FB | 	rdlong	arg04, fp
2f28c     10 4E 85 F1 | 	sub	fp, #16
2f290     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2f294     04 4E 05 F1 | 	add	fp, #4
2f298     A7 12 02 FB | 	rdlong	arg01, fp
2f29c     04 4E 85 F1 | 	sub	fp, #4
2f2a0     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2f2a4     08 4E 05 F1 | 	add	fp, #8
2f2a8     A7 FA 61 FC | 	wrlong	result1, fp
2f2ac     00 FA 4D F2 | 	cmps	result1, #0 wz
2f2b0     08 4E 85 F1 | 	sub	fp, #8
2f2b4     18 00 90 5D |  if_ne	jmp	#LR__4664
2f2b8     10 4E 05 F1 | 	add	fp, #16
2f2bc     A7 38 02 FB | 	rdlong	local10, fp
2f2c0     01 38 06 F1 | 	add	local10, #1
2f2c4     A7 38 62 FC | 	wrlong	local10, fp
2f2c8     10 4E 85 F1 | 	sub	fp, #16
2f2cc     7C FF 9F FD | 	jmp	#LR__4663
2f2d0                 | LR__4664
2f2d0     10 4E 05 F1 | 	add	fp, #16
2f2d4     A7 38 02 FB | 	rdlong	local10, fp
2f2d8     10 4E 85 F1 | 	sub	fp, #16
2f2dc     64 38 0E F2 | 	cmp	local10, #100 wz
2f2e0     07 FA 05 A6 |  if_e	mov	result1, #7
2f2e4     AC 02 90 AD |  if_e	jmp	#LR__4675
2f2e8     08 4E 05 F1 | 	add	fp, #8
2f2ec     A7 38 02 FB | 	rdlong	local10, fp
2f2f0     08 4E 85 F1 | 	sub	fp, #8
2f2f4     04 38 0E F2 | 	cmp	local10, #4 wz
2f2f8     08 4E 05 51 |  if_ne	add	fp, #8
2f2fc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2f300     08 4E 85 51 |  if_ne	sub	fp, #8
2f304     8C 02 90 5D |  if_ne	jmp	#LR__4675
2f308     04 4E 05 F1 | 	add	fp, #4
2f30c     A7 38 02 FB | 	rdlong	local10, fp
2f310     23 4E 05 F1 | 	add	fp, #35
2f314     A7 26 C2 FA | 	rdbyte	local01, fp
2f318     27 4E 85 F1 | 	sub	fp, #39
2f31c     2B 38 06 F1 | 	add	local10, #43
2f320     1C 27 42 FC | 	wrbyte	local01, local10
2f324                 | LR__4665
2f324     27 4E 05 F1 | 	add	fp, #39
2f328     A7 28 C2 FA | 	rdbyte	local02, fp
2f32c     27 4E 85 F1 | 	sub	fp, #39
2f330     02 28 CE F7 | 	test	local02, #2 wz
2f334     20 00 90 AD |  if_e	jmp	#LR__4666
2f338     14 4E 05 F1 | 	add	fp, #20
2f33c     A7 38 02 FB | 	rdlong	local10, fp
2f340     0C 38 06 F1 | 	add	local10, #12
2f344     0D 38 16 FD | 	qdiv	local10, #13
2f348     14 4E 85 F1 | 	sub	fp, #20
2f34c     18 38 62 FD | 	getqx	local10
2f350     01 38 06 F1 | 	add	local10, #1
2f354     04 00 90 FD | 	jmp	#LR__4667
2f358                 | LR__4666
2f358     01 38 06 F6 | 	mov	local10, #1
2f35c                 | LR__4667
2f35c     18 4E 05 F1 | 	add	fp, #24
2f360     A7 38 62 FC | 	wrlong	local10, fp
2f364     14 4E 85 F1 | 	sub	fp, #20
2f368     A7 12 02 FB | 	rdlong	arg01, fp
2f36c     1C 15 02 F6 | 	mov	arg02, local10
2f370     04 4E 85 F1 | 	sub	fp, #4
2f374     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2f378     08 4E 05 F1 | 	add	fp, #8
2f37c     A7 FA 61 FC | 	wrlong	result1, fp
2f380     08 4E 85 F1 | 	sub	fp, #8
2f384     00 FA 0D F2 | 	cmp	result1, #0 wz
2f388     38 01 90 5D |  if_ne	jmp	#LR__4672
2f38c     18 4E 05 F1 | 	add	fp, #24
2f390     A7 38 02 FB | 	rdlong	local10, fp
2f394     01 38 8E F1 | 	sub	local10, #1 wz
2f398     A7 38 62 FC | 	wrlong	local10, fp
2f39c     18 4E 85 F1 | 	sub	fp, #24
2f3a0     20 01 90 AD |  if_e	jmp	#LR__4672
2f3a4     04 4E 05 F1 | 	add	fp, #4
2f3a8     A7 38 02 FB | 	rdlong	local10, fp
2f3ac     1C 13 02 F6 | 	mov	arg01, local10
2f3b0     14 4E 05 F1 | 	add	fp, #20
2f3b4     A7 18 02 FB | 	rdlong	arg04, fp
2f3b8     18 4E 85 F1 | 	sub	fp, #24
2f3bc     05 18 66 F0 | 	shl	arg04, #5
2f3c0     10 38 06 F1 | 	add	local10, #16
2f3c4     1C 15 02 FB | 	rdlong	arg02, local10
2f3c8     0C 15 82 F1 | 	sub	arg02, arg04
2f3cc     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2f3d0     08 4E 05 F1 | 	add	fp, #8
2f3d4     A7 FA 61 FC | 	wrlong	result1, fp
2f3d8     08 4E 85 F1 | 	sub	fp, #8
2f3dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2f3e0     E0 00 90 5D |  if_ne	jmp	#LR__4671
2f3e4     04 4E 05 F1 | 	add	fp, #4
2f3e8     A7 12 02 FB | 	rdlong	arg01, fp
2f3ec     04 4E 85 F1 | 	sub	fp, #4
2f3f0     20 12 06 F1 | 	add	arg01, #32
2f3f4     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2f3f8     FD 38 02 F6 | 	mov	local10, result1
2f3fc     28 4E 05 F1 | 	add	fp, #40
2f400     A7 38 42 FC | 	wrbyte	local10, fp
2f404     28 4E 85 F1 | 	sub	fp, #40
2f408                 | ' 			sum = sum_sfn(dp->fn);
2f408                 | ' 			do {
2f408                 | LR__4668
2f408     0C 4E 05 F1 | 	add	fp, #12
2f40c     A7 12 02 FB | 	rdlong	arg01, fp
2f410     08 4E 85 F1 | 	sub	fp, #8
2f414     A7 26 02 FB | 	rdlong	local01, fp
2f418     04 4E 85 F1 | 	sub	fp, #4
2f41c     18 26 06 F1 | 	add	local01, #24
2f420     13 15 02 FB | 	rdlong	arg02, local01
2f424     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2f428     08 4E 05 F1 | 	add	fp, #8
2f42c     A7 FA 61 FC | 	wrlong	result1, fp
2f430     00 FA 4D F2 | 	cmps	result1, #0 wz
2f434     08 4E 85 F1 | 	sub	fp, #8
2f438     88 00 90 5D |  if_ne	jmp	#LR__4670
2f43c     0C 4E 05 F1 | 	add	fp, #12
2f440     A7 28 02 FB | 	rdlong	local02, fp
2f444     0C 28 06 F1 | 	add	local02, #12
2f448     14 13 02 FB | 	rdlong	arg01, local02
2f44c     08 4E 85 F1 | 	sub	fp, #8
2f450     A7 26 02 FB | 	rdlong	local01, fp
2f454     1C 26 06 F1 | 	add	local01, #28
2f458     13 15 02 FB | 	rdlong	arg02, local01
2f45c     14 4E 05 F1 | 	add	fp, #20
2f460     A7 16 02 FB | 	rdlong	arg03, fp
2f464     10 4E 05 F1 | 	add	fp, #16
2f468     A7 18 C2 FA | 	rdbyte	arg04, fp
2f46c     28 4E 85 F1 | 	sub	fp, #40
2f470     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2f474     0C 4E 05 F1 | 	add	fp, #12
2f478     A7 38 02 FB | 	rdlong	local10, fp
2f47c     03 38 06 F1 | 	add	local10, #3
2f480     1C 03 48 FC | 	wrbyte	#1, local10
2f484     08 4E 85 F1 | 	sub	fp, #8
2f488     A7 12 02 FB | 	rdlong	arg01, fp
2f48c     04 4E 85 F1 | 	sub	fp, #4
2f490     00 14 06 F6 | 	mov	arg02, #0
2f494     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2f498     08 4E 05 F1 | 	add	fp, #8
2f49c     A7 FA 61 FC | 	wrlong	result1, fp
2f4a0     00 FA 4D F2 | 	cmps	result1, #0 wz
2f4a4     08 4E 85 F1 | 	sub	fp, #8
2f4a8     18 00 90 5D |  if_ne	jmp	#LR__4669
2f4ac     18 4E 05 F1 | 	add	fp, #24
2f4b0     A7 38 02 FB | 	rdlong	local10, fp
2f4b4     01 38 8E F1 | 	sub	local10, #1 wz
2f4b8     A7 38 62 FC | 	wrlong	local10, fp
2f4bc     18 4E 85 F1 | 	sub	fp, #24
2f4c0     44 FF 9F 5D |  if_ne	jmp	#LR__4668
2f4c4                 | LR__4669
2f4c4                 | LR__4670
2f4c4                 | LR__4671
2f4c4                 | LR__4672
2f4c4     08 4E 05 F1 | 	add	fp, #8
2f4c8     A7 38 0A FB | 	rdlong	local10, fp wz
2f4cc     08 4E 85 F1 | 	sub	fp, #8
2f4d0     B4 00 90 5D |  if_ne	jmp	#LR__4674
2f4d4     0C 4E 05 F1 | 	add	fp, #12
2f4d8     A7 12 02 FB | 	rdlong	arg01, fp
2f4dc     08 4E 85 F1 | 	sub	fp, #8
2f4e0     A7 26 02 FB | 	rdlong	local01, fp
2f4e4     04 4E 85 F1 | 	sub	fp, #4
2f4e8     18 26 06 F1 | 	add	local01, #24
2f4ec     13 15 02 FB | 	rdlong	arg02, local01
2f4f0     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2f4f4     08 4E 05 F1 | 	add	fp, #8
2f4f8     A7 FA 61 FC | 	wrlong	result1, fp
2f4fc     08 4E 85 F1 | 	sub	fp, #8
2f500     00 FA 0D F2 | 	cmp	result1, #0 wz
2f504     80 00 90 5D |  if_ne	jmp	#LR__4673
2f508     04 4E 05 F1 | 	add	fp, #4
2f50c     A7 28 02 FB | 	rdlong	local02, fp
2f510     04 4E 85 F1 | 	sub	fp, #4
2f514     1C 28 06 F1 | 	add	local02, #28
2f518     14 13 02 FB | 	rdlong	arg01, local02
2f51c     00 14 06 F6 | 	mov	arg02, #0
2f520     20 16 06 F6 | 	mov	arg03, #32
2f524     98 00 A0 FD | 	call	#\builtin_bytefill_
2f528     04 4E 05 F1 | 	add	fp, #4
2f52c     A7 14 02 FB | 	rdlong	arg02, fp
2f530     0A 27 02 F6 | 	mov	local01, arg02
2f534     1C 26 06 F1 | 	add	local01, #28
2f538     13 13 02 FB | 	rdlong	arg01, local01
2f53c     04 4E 85 F1 | 	sub	fp, #4
2f540     20 14 06 F1 | 	add	arg02, #32
2f544     0B 16 06 F6 | 	mov	arg03, #11
2f548     EC 68 BF FD | 	call	#__system____builtin_memmove
2f54c     04 4E 05 F1 | 	add	fp, #4
2f550     A7 36 02 FB | 	rdlong	local09, fp
2f554     1B 39 02 F6 | 	mov	local10, local09
2f558     1C 38 06 F1 | 	add	local10, #28
2f55c     1C 27 02 FB | 	rdlong	local01, local10
2f560     2B 36 06 F1 | 	add	local09, #43
2f564     1B 39 C2 FA | 	rdbyte	local10, local09
2f568     18 38 06 F5 | 	and	local10, #24
2f56c     0C 26 06 F1 | 	add	local01, #12
2f570     13 39 42 FC | 	wrbyte	local10, local01
2f574     08 4E 05 F1 | 	add	fp, #8
2f578     A7 38 02 FB | 	rdlong	local10, fp
2f57c     0C 4E 85 F1 | 	sub	fp, #12
2f580     03 38 06 F1 | 	add	local10, #3
2f584     1C 03 48 FC | 	wrbyte	#1, local10
2f588                 | LR__4673
2f588                 | LR__4674
2f588                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2f588                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2f588                 | ' 
2f588                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2f588                 | ' 
2f588                 | ' 			fs->wflag = 1;
2f588                 | ' 		}
2f588                 | ' 	}
2f588                 | ' 
2f588                 | ' 	return res;
2f588     08 4E 05 F1 | 	add	fp, #8
2f58c     A7 FA 01 FB | 	rdlong	result1, fp
2f590     08 4E 85 F1 | 	sub	fp, #8
2f594                 | LR__4675
2f594     A7 F0 03 F6 | 	mov	ptra, fp
2f598     B2 00 A0 FD | 	call	#popregs_
2f59c                 | _fatfs_cc_dir_register_ret
2f59c     2D 00 64 FD | 	ret
2f5a0                 | 
2f5a0                 | _fatfs_cc_dir_remove
2f5a0     05 4A 05 F6 | 	mov	COUNT_, #5
2f5a4     A8 00 A0 FD | 	call	#pushregs_
2f5a8     09 27 02 F6 | 	mov	local01, arg01
2f5ac     13 29 02 FB | 	rdlong	local02, local01
2f5b0     10 26 06 F1 | 	add	local01, #16
2f5b4     13 2B 02 FB | 	rdlong	local03, local01
2f5b8     1C 26 06 F1 | 	add	local01, #28
2f5bc     13 15 02 FB | 	rdlong	arg02, local01
2f5c0     2C 26 86 F1 | 	sub	local01, #44
2f5c4     FF FF 7F FF 
2f5c8     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2f5cc     00 2C 06 A6 |  if_e	mov	local04, #0
2f5d0     18 00 90 AD |  if_e	jmp	#LR__4680
2f5d4     13 13 02 F6 | 	mov	arg01, local01
2f5d8     2C 26 06 F1 | 	add	local01, #44
2f5dc     13 15 02 FB | 	rdlong	arg02, local01
2f5e0     2C 26 86 F1 | 	sub	local01, #44
2f5e4     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2f5e8     FD 2C 02 F6 | 	mov	local04, result1
2f5ec                 | LR__4680
2f5ec     16 2F 0A F6 | 	mov	local05, local04 wz
2f5f0     64 00 90 5D |  if_ne	jmp	#LR__4683
2f5f4                 | ' 		do {
2f5f4                 | LR__4681
2f5f4     18 26 06 F1 | 	add	local01, #24
2f5f8     13 15 02 FB | 	rdlong	arg02, local01
2f5fc     18 26 86 F1 | 	sub	local01, #24
2f600     14 13 02 F6 | 	mov	arg01, local02
2f604     04 E5 BF FD | 	call	#_fatfs_cc_move_window
2f608     FD 2E 0A F6 | 	mov	local05, result1 wz
2f60c     40 00 90 5D |  if_ne	jmp	#LR__4682
2f610     1C 26 06 F1 | 	add	local01, #28
2f614     13 2D 02 FB | 	rdlong	local04, local01
2f618     16 CB 49 FC | 	wrbyte	#229, local04
2f61c     03 28 06 F1 | 	add	local02, #3
2f620     14 03 48 FC | 	wrbyte	#1, local02
2f624     03 28 86 F1 | 	sub	local02, #3
2f628     0C 26 86 F1 | 	sub	local01, #12
2f62c     13 2D 02 FB | 	rdlong	local04, local01
2f630     10 26 86 F1 | 	sub	local01, #16
2f634     15 2D 12 F2 | 	cmp	local04, local03 wc
2f638     14 00 90 3D |  if_ae	jmp	#LR__4682
2f63c     13 13 02 F6 | 	mov	arg01, local01
2f640     00 14 06 F6 | 	mov	arg02, #0
2f644     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2f648     FD 2E 0A F6 | 	mov	local05, result1 wz
2f64c     A4 FF 9F AD |  if_e	jmp	#LR__4681
2f650                 | LR__4682
2f650     04 2E 0E F2 | 	cmp	local05, #4 wz
2f654     02 2E 06 A6 |  if_e	mov	local05, #2
2f658                 | LR__4683
2f658                 | ' 	}
2f658                 | ' #line 2590 "ff.c"
2f658                 | ' 	return res;
2f658     17 FB 01 F6 | 	mov	result1, local05
2f65c     A7 F0 03 F6 | 	mov	ptra, fp
2f660     B2 00 A0 FD | 	call	#popregs_
2f664                 | _fatfs_cc_dir_remove_ret
2f664     2D 00 64 FD | 	ret
2f668                 | 
2f668                 | _fatfs_cc_get_fileinfo
2f668     0F 4A 05 F6 | 	mov	COUNT_, #15
2f66c     A8 00 A0 FD | 	call	#pushregs_
2f670     09 27 02 F6 | 	mov	local01, arg01
2f674     0A 29 02 F6 | 	mov	local02, arg02
2f678     13 2B 02 FB | 	rdlong	local03, local01
2f67c     1C 28 06 F1 | 	add	local02, #28
2f680     14 01 48 FC | 	wrbyte	#0, local02
2f684     1C 28 86 F1 | 	sub	local02, #28
2f688     18 26 06 F1 | 	add	local01, #24
2f68c     13 2D 0A FB | 	rdlong	local04, local01 wz
2f690     18 26 86 F1 | 	sub	local01, #24
2f694     90 03 90 AD |  if_e	jmp	#LR__4704
2f698     2C 26 06 F1 | 	add	local01, #44
2f69c     13 2D 02 FB | 	rdlong	local04, local01
2f6a0     2C 26 86 F1 | 	sub	local01, #44
2f6a4     FF FF 7F FF 
2f6a8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2f6ac     D8 00 90 AD |  if_e	jmp	#LR__4693
2f6b0     00 2E 06 F6 | 	mov	local05, #0
2f6b4     00 30 06 F6 | 	mov	local06, #0
2f6b8     00 32 06 F6 | 	mov	local07, #0
2f6bc                 | ' 			si = di = 0;
2f6bc                 | ' 			hs = 0;
2f6bc                 | ' 			while (fs->lfnbuf[si] != 0) {
2f6bc                 | LR__4690
2f6bc     0C 2A 06 F1 | 	add	local03, #12
2f6c0     15 2D 02 FB | 	rdlong	local04, local03
2f6c4     0C 2A 86 F1 | 	sub	local03, #12
2f6c8     18 35 02 F6 | 	mov	local08, local06
2f6cc     01 34 66 F0 | 	shl	local08, #1
2f6d0     16 35 02 F1 | 	add	local08, local04
2f6d4     1A 2D EA FA | 	rdword	local04, local08 wz
2f6d8     90 00 90 AD |  if_e	jmp	#LR__4692
2f6dc     0C 2A 06 F1 | 	add	local03, #12
2f6e0     15 37 02 FB | 	rdlong	local09, local03
2f6e4     0C 2A 86 F1 | 	sub	local03, #12
2f6e8     18 39 02 F6 | 	mov	local10, local06
2f6ec     01 38 66 F0 | 	shl	local10, #1
2f6f0     1B 39 02 F1 | 	add	local10, local09
2f6f4     1C 3B E2 FA | 	rdword	local11, local10
2f6f8     19 2D 02 F6 | 	mov	local04, local07
2f6fc     0F 2C 4E F7 | 	zerox	local04, #15 wz
2f700     01 30 06 F1 | 	add	local06, #1
2f704     24 00 90 5D |  if_ne	jmp	#LR__4691
2f708     1D 3D 32 F9 | 	getword	local12, local11, #0
2f70c     6C 00 00 FF 
2f710     00 3C 16 F2 | 	cmp	local12, ##55296 wc
2f714     14 00 90 CD |  if_b	jmp	#LR__4691
2f718     1D 3F 32 F9 | 	getword	local13, local11, #0
2f71c     70 00 00 FF 
2f720     00 3E 16 F2 | 	cmp	local13, ##57344 wc
2f724     1D 33 02 C6 |  if_b	mov	local07, local11
2f728                 | ' 					hs = wc; continue;
2f728     90 FF 9F CD |  if_b	jmp	#LR__4690
2f72c                 | LR__4691
2f72c     19 13 32 F9 | 	getword	arg01, local07, #0
2f730     10 12 66 F0 | 	shl	arg01, #16
2f734     1D 3B 32 F9 | 	getword	local11, local11, #0
2f738     1D 13 42 F5 | 	or	arg01, local11
2f73c     17 15 02 F6 | 	mov	arg02, local05
2f740     1C 28 06 F1 | 	add	local02, #28
2f744     14 15 02 F1 | 	add	arg02, local02
2f748     FF 16 06 F6 | 	mov	arg03, #255
2f74c     17 17 82 F1 | 	sub	arg03, local05
2f750     1C 28 86 F1 | 	sub	local02, #28
2f754     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2f758     FD 40 0A F6 | 	mov	local14, result1 wz
2f75c     00 2E 06 A6 |  if_e	mov	local05, #0
2f760     20 2F 02 51 |  if_ne	add	local05, local14
2f764     00 32 06 56 |  if_ne	mov	local07, #0
2f768     50 FF 9F 5D |  if_ne	jmp	#LR__4690
2f76c                 | LR__4692
2f76c     19 2D 02 F6 | 	mov	local04, local07
2f770     0F 2C 4E F7 | 	zerox	local04, #15 wz
2f774     00 2E 06 56 |  if_ne	mov	local05, #0
2f778     1C 28 06 F1 | 	add	local02, #28
2f77c     14 2F 02 F1 | 	add	local05, local02
2f780     17 01 48 FC | 	wrbyte	#0, local05
2f784     1C 28 86 F1 | 	sub	local02, #28
2f788                 | LR__4693
2f788     00 2E 06 F6 | 	mov	local05, #0
2f78c     00 30 06 F6 | 	mov	local06, #0
2f790                 | ' 			fno->fname[di] = 0;
2f790                 | ' 		}
2f790                 | ' 	}
2f790                 | ' 
2f790                 | ' 	si = di = 0;
2f790                 | ' 	while (si < 11) {
2f790                 | LR__4694
2f790     0B 30 16 F2 | 	cmp	local06, #11 wc
2f794     20 01 90 3D |  if_ae	jmp	#LR__4697
2f798     1C 26 06 F1 | 	add	local01, #28
2f79c     13 37 02 FB | 	rdlong	local09, local01
2f7a0     1C 26 86 F1 | 	sub	local01, #28
2f7a4     18 39 02 F6 | 	mov	local10, local06
2f7a8     1B 39 02 F1 | 	add	local10, local09
2f7ac     1C 3B C2 FA | 	rdbyte	local11, local10
2f7b0     1D 2D 32 F9 | 	getword	local04, local11, #0
2f7b4     20 2C 0E F2 | 	cmp	local04, #32 wz
2f7b8     01 30 06 F1 | 	add	local06, #1
2f7bc     D0 FF 9F AD |  if_e	jmp	#LR__4694
2f7c0     1D 2D 32 F9 | 	getword	local04, local11, #0
2f7c4     05 2C 0E F2 | 	cmp	local04, #5 wz
2f7c8     E5 3A 06 A6 |  if_e	mov	local11, #229
2f7cc     09 30 0E F2 | 	cmp	local06, #9 wz
2f7d0     20 00 90 5D |  if_ne	jmp	#LR__4695
2f7d4     0C 2E 16 F2 | 	cmp	local05, #12 wc
2f7d8     18 00 90 3D |  if_ae	jmp	#LR__4695
2f7dc     17 3F 02 F6 | 	mov	local13, local05
2f7e0     0C 28 06 F1 | 	add	local02, #12
2f7e4     14 3F 02 F1 | 	add	local13, local02
2f7e8     1F 5D 48 FC | 	wrbyte	#46, local13
2f7ec     01 2E 06 F1 | 	add	local05, #1
2f7f0     0C 28 86 F1 | 	sub	local02, #12
2f7f4                 | LR__4695
2f7f4     1D 13 32 F9 | 	getword	arg01, local11, #0
2f7f8     07 12 4E F7 | 	zerox	arg01, #7 wz
2f7fc     00 FA 05 56 |  if_ne	mov	result1, #0
2f800                 | ' 
2f800                 | ' 	return 0;
2f800     00 FA 05 A6 |  if_e	mov	result1, #0
2f804     00 FA 0D F2 | 	cmp	result1, #0 wz
2f808     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
2f80c     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
2f810     50 00 90 AD |  if_e	jmp	#LR__4696
2f814     1C 26 06 F1 | 	add	local01, #28
2f818     13 39 02 FB | 	rdlong	local10, local01
2f81c     1C 26 86 F1 | 	sub	local01, #28
2f820     18 35 02 F6 | 	mov	local08, local06
2f824     1C 35 02 F1 | 	add	local08, local10
2f828     1A 13 CA FA | 	rdbyte	arg01, local08 wz
2f82c     00 FA 05 56 |  if_ne	mov	result1, #0
2f830                 | ' 
2f830                 | ' 	return 0;
2f830     00 FA 05 A6 |  if_e	mov	result1, #0
2f834     00 FA 0D F2 | 	cmp	result1, #0 wz
2f838     28 00 90 AD |  if_e	jmp	#LR__4696
2f83c     1D 3B 32 F9 | 	getword	local11, local11, #0
2f840     08 3A 66 F0 | 	shl	local11, #8
2f844     1C 26 06 F1 | 	add	local01, #28
2f848     13 41 02 FB | 	rdlong	local14, local01
2f84c     1C 26 86 F1 | 	sub	local01, #28
2f850     18 37 02 F6 | 	mov	local09, local06
2f854     20 37 02 F1 | 	add	local09, local14
2f858     1B 3D C2 FA | 	rdbyte	local12, local09
2f85c     1E 3B 42 F5 | 	or	local11, local12
2f860     01 30 06 F1 | 	add	local06, #1
2f864                 | LR__4696
2f864     1D 13 02 F6 | 	mov	arg01, local11
2f868     01 00 00 FF 
2f86c     52 15 06 F6 | 	mov	arg02, ##850
2f870     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2f874     FD 3A 02 F6 | 	mov	local11, result1
2f878     1D 2D 02 F6 | 	mov	local04, local11
2f87c     0F 2C 4E F7 | 	zerox	local04, #15 wz
2f880     00 2E 06 A6 |  if_e	mov	local05, #0
2f884     30 00 90 AD |  if_e	jmp	#LR__4697
2f888     1D 13 32 F9 | 	getword	arg01, local11, #0
2f88c     17 15 02 F6 | 	mov	arg02, local05
2f890     0C 28 06 F1 | 	add	local02, #12
2f894     14 15 02 F1 | 	add	arg02, local02
2f898     0C 16 06 F6 | 	mov	arg03, #12
2f89c     17 17 82 F1 | 	sub	arg03, local05
2f8a0     0C 28 86 F1 | 	sub	local02, #12
2f8a4     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2f8a8     FD 40 0A F6 | 	mov	local14, result1 wz
2f8ac     00 2E 06 A6 |  if_e	mov	local05, #0
2f8b0     20 2F 02 51 |  if_ne	add	local05, local14
2f8b4     D8 FE 9F 5D |  if_ne	jmp	#LR__4694
2f8b8                 | LR__4697
2f8b8     17 2D 02 F6 | 	mov	local04, local05
2f8bc     0C 28 06 F1 | 	add	local02, #12
2f8c0     14 2D 02 F1 | 	add	local04, local02
2f8c4     16 01 48 FC | 	wrbyte	#0, local04
2f8c8     10 28 06 F1 | 	add	local02, #16
2f8cc     14 2D CA FA | 	rdbyte	local04, local02 wz
2f8d0     1C 28 86 F1 | 	sub	local02, #28
2f8d4     F8 00 90 5D |  if_ne	jmp	#LR__4703
2f8d8     00 2E 0E F2 | 	cmp	local05, #0 wz
2f8dc     1C 00 90 5D |  if_ne	jmp	#LR__4698
2f8e0     17 3F 02 F6 | 	mov	local13, local05
2f8e4     1C 28 06 F1 | 	add	local02, #28
2f8e8     14 3F 02 F1 | 	add	local13, local02
2f8ec     1F 7F 48 FC | 	wrbyte	#63, local13
2f8f0     01 2E 06 F1 | 	add	local05, #1
2f8f4     1C 28 86 F1 | 	sub	local02, #28
2f8f8     A4 00 90 FD | 	jmp	#LR__4702
2f8fc                 | LR__4698
2f8fc                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2f8fc     00 2E 06 F6 | 	mov	local05, #0
2f900     00 30 06 F6 | 	mov	local06, #0
2f904     08 42 06 F6 | 	mov	local15, #8
2f908                 | LR__4699
2f908     18 2D 02 F6 | 	mov	local04, local06
2f90c     0C 28 06 F1 | 	add	local02, #12
2f910     14 2D 02 F1 | 	add	local04, local02
2f914     16 3F CA FA | 	rdbyte	local13, local04 wz
2f918     0C 28 86 F1 | 	sub	local02, #12
2f91c     80 00 90 AD |  if_e	jmp	#LR__4701
2f920     18 35 02 F6 | 	mov	local08, local06
2f924     0C 28 06 F1 | 	add	local02, #12
2f928     14 35 02 F1 | 	add	local08, local02
2f92c     1A 3B C2 FA | 	rdbyte	local11, local08
2f930     1D 41 32 F9 | 	getword	local14, local11, #0
2f934     2E 40 0E F2 | 	cmp	local14, #46 wz
2f938     0C 28 86 F1 | 	sub	local02, #12
2f93c     10 42 06 A6 |  if_e	mov	local15, #16
2f940     1D 41 32 F9 | 	getword	local14, local11, #0
2f944     41 40 16 F2 | 	cmp	local14, #65 wc
2f948     30 00 90 CD |  if_b	jmp	#LR__4700
2f94c     1D 35 32 F9 | 	getword	local08, local11, #0
2f950     5B 34 16 F2 | 	cmp	local08, #91 wc
2f954     24 00 90 3D |  if_ae	jmp	#LR__4700
2f958     1C 26 06 F1 | 	add	local01, #28
2f95c     13 37 02 FB | 	rdlong	local09, local01
2f960     1C 26 86 F1 | 	sub	local01, #28
2f964     0C 36 06 F1 | 	add	local09, #12
2f968     1B 39 C2 FA | 	rdbyte	local10, local09
2f96c     21 41 E2 F8 | 	getbyte	local14, local15, #0
2f970     20 39 CA F7 | 	test	local10, local14 wz
2f974     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
2f978     20 3A 06 51 |  if_ne	add	local11, #32
2f97c                 | LR__4700
2f97c     17 41 02 F6 | 	mov	local14, local05
2f980     1C 28 06 F1 | 	add	local02, #28
2f984     14 41 02 F1 | 	add	local14, local02
2f988     1D 3B 32 F9 | 	getword	local11, local11, #0
2f98c     20 3B 42 FC | 	wrbyte	local11, local14
2f990     01 30 06 F1 | 	add	local06, #1
2f994     01 2E 06 F1 | 	add	local05, #1
2f998     1C 28 86 F1 | 	sub	local02, #28
2f99c     68 FF 9F FD | 	jmp	#LR__4699
2f9a0                 | LR__4701
2f9a0                 | LR__4702
2f9a0     1C 28 06 F1 | 	add	local02, #28
2f9a4     14 2F 02 F1 | 	add	local05, local02
2f9a8     17 01 48 FC | 	wrbyte	#0, local05
2f9ac     1C 26 06 F1 | 	add	local01, #28
2f9b0     13 2D 02 FB | 	rdlong	local04, local01
2f9b4     1C 26 86 F1 | 	sub	local01, #28
2f9b8     0C 2C 06 F1 | 	add	local04, #12
2f9bc     16 3F CA FA | 	rdbyte	local13, local04 wz
2f9c0     1C 28 86 F1 | 	sub	local02, #28
2f9c4     0C 28 06 A1 |  if_e	add	local02, #12
2f9c8     14 01 48 AC |  if_e	wrbyte	#0, local02
2f9cc     0C 28 86 A1 |  if_e	sub	local02, #12
2f9d0                 | LR__4703
2f9d0     1C 26 06 F1 | 	add	local01, #28
2f9d4     13 3D 02 FB | 	rdlong	local12, local01
2f9d8     0B 3C 06 F1 | 	add	local12, #11
2f9dc     1E 2D C2 FA | 	rdbyte	local04, local12
2f9e0     3F 2C 06 F5 | 	and	local04, #63
2f9e4     08 28 06 F1 | 	add	local02, #8
2f9e8     14 2D 42 FC | 	wrbyte	local04, local02
2f9ec     08 28 86 F1 | 	sub	local02, #8
2f9f0     13 13 02 FB | 	rdlong	arg01, local01
2f9f4     1C 12 06 F1 | 	add	arg01, #28
2f9f8                 | ' {
2f9f8                 | ' 
2f9f8                 | ' 	return *((DWORD*)ptr);
2f9f8     09 FB 01 FB | 	rdlong	result1, arg01
2f9fc     14 FB 61 FC | 	wrlong	result1, local02
2fa00     13 13 02 FB | 	rdlong	arg01, local01
2fa04     16 12 06 F1 | 	add	arg01, #22
2fa08                 | ' {
2fa08                 | ' 
2fa08                 | ' 	return *((WORD*)ptr);
2fa08     09 FB E1 FA | 	rdword	result1, arg01
2fa0c     06 28 06 F1 | 	add	local02, #6
2fa10     14 FB 51 FC | 	wrword	result1, local02
2fa14     13 13 02 FB | 	rdlong	arg01, local01
2fa18     18 12 06 F1 | 	add	arg01, #24
2fa1c                 | ' {
2fa1c                 | ' 
2fa1c                 | ' 	return *((WORD*)ptr);
2fa1c     09 FB E1 FA | 	rdword	result1, arg01
2fa20     02 28 86 F1 | 	sub	local02, #2
2fa24     14 FB 51 FC | 	wrword	result1, local02
2fa28                 | LR__4704
2fa28     A7 F0 03 F6 | 	mov	ptra, fp
2fa2c     B2 00 A0 FD | 	call	#popregs_
2fa30                 | _fatfs_cc_get_fileinfo_ret
2fa30     2D 00 64 FD | 	ret
2fa34                 | 
2fa34                 | _fatfs_cc_create_name
2fa34     0D 4A 05 F6 | 	mov	COUNT_, #13
2fa38     A8 00 A0 FD | 	call	#pushregs_
2fa3c     34 F0 07 F1 | 	add	ptra, #52
2fa40     04 4E 05 F1 | 	add	fp, #4
2fa44     A7 12 62 FC | 	wrlong	arg01, fp
2fa48     04 4E 05 F1 | 	add	fp, #4
2fa4c     A7 14 62 FC | 	wrlong	arg02, fp
2fa50     0A FB 01 FB | 	rdlong	result1, arg02
2fa54     28 4E 05 F1 | 	add	fp, #40
2fa58     A7 FA 61 FC | 	wrlong	result1, fp
2fa5c     2C 4E 85 F1 | 	sub	fp, #44
2fa60     A7 FA 01 FB | 	rdlong	result1, fp
2fa64     FD 26 02 FB | 	rdlong	local01, result1
2fa68     0C 26 06 F1 | 	add	local01, #12
2fa6c     13 29 02 FB | 	rdlong	local02, local01
2fa70     14 4E 05 F1 | 	add	fp, #20
2fa74     A7 28 62 FC | 	wrlong	local02, fp
2fa78     14 4E 05 F1 | 	add	fp, #20
2fa7c     A7 00 68 FC | 	wrlong	#0, fp
2fa80     2C 4E 85 F1 | 	sub	fp, #44
2fa84                 | ' 
2fa84                 | ' 
2fa84                 | ' 
2fa84                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2fa84                 | ' 	for (;;) {
2fa84                 | LR__4710
2fa84     30 4E 05 F1 | 	add	fp, #48
2fa88     A7 12 02 F6 | 	mov	arg01, fp
2fa8c     30 4E 85 F1 | 	sub	fp, #48
2fa90     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2fa94     1C 4E 05 F1 | 	add	fp, #28
2fa98     A7 FA 61 FC | 	wrlong	result1, fp
2fa9c     1C 4E 85 F1 | 	sub	fp, #28
2faa0     FF FF 7F FF 
2faa4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2faa8     06 FA 05 A6 |  if_e	mov	result1, #6
2faac     74 08 90 AD |  if_e	jmp	#LR__4750
2fab0     1C 4E 05 F1 | 	add	fp, #28
2fab4     A7 26 02 FB | 	rdlong	local01, fp
2fab8     1C 4E 85 F1 | 	sub	fp, #28
2fabc     80 00 00 FF 
2fac0     00 26 16 F2 | 	cmp	local01, ##65536 wc
2fac4     3C 00 90 CD |  if_b	jmp	#LR__4711
2fac8     18 4E 05 F1 | 	add	fp, #24
2facc     A7 2A 02 FB | 	rdlong	local03, fp
2fad0     14 4E 05 F1 | 	add	fp, #20
2fad4     A7 26 02 FB | 	rdlong	local01, fp
2fad8     13 2D 02 F6 | 	mov	local04, local01
2fadc     01 2C 06 F1 | 	add	local04, #1
2fae0     A7 2C 62 FC | 	wrlong	local04, fp
2fae4     01 26 66 F0 | 	shl	local01, #1
2fae8     15 27 02 F1 | 	add	local01, local03
2faec     10 4E 85 F1 | 	sub	fp, #16
2faf0     A7 2E 02 FB | 	rdlong	local05, fp
2faf4     1C 4E 85 F1 | 	sub	fp, #28
2faf8     17 31 02 F6 | 	mov	local06, local05
2fafc     10 30 46 F0 | 	shr	local06, #16
2fb00     13 31 52 FC | 	wrword	local06, local01
2fb04                 | LR__4711
2fb04     1C 4E 05 F1 | 	add	fp, #28
2fb08     A7 26 02 FB | 	rdlong	local01, fp
2fb0c     08 4E 85 F1 | 	sub	fp, #8
2fb10     A7 26 52 FC | 	wrword	local01, fp
2fb14     A7 26 E2 FA | 	rdword	local01, fp
2fb18     14 4E 85 F1 | 	sub	fp, #20
2fb1c     20 26 16 F2 | 	cmp	local01, #32 wc
2fb20     B0 00 90 CD |  if_b	jmp	#LR__4713
2fb24     14 4E 05 F1 | 	add	fp, #20
2fb28     A7 26 E2 FA | 	rdword	local01, fp
2fb2c     14 4E 85 F1 | 	sub	fp, #20
2fb30     2F 26 0E F2 | 	cmp	local01, #47 wz
2fb34     14 4E 05 51 |  if_ne	add	fp, #20
2fb38     A7 2C E2 5A |  if_ne	rdword	local04, fp
2fb3c     14 4E 85 51 |  if_ne	sub	fp, #20
2fb40     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
2fb44     8C 00 90 AD |  if_e	jmp	#LR__4713
2fb48     14 4E 05 F1 | 	add	fp, #20
2fb4c     A7 12 E2 FA | 	rdword	arg01, fp
2fb50     14 4E 85 F1 | 	sub	fp, #20
2fb54     80 12 16 F2 | 	cmp	arg01, #128 wc
2fb58     24 00 90 3D |  if_ae	jmp	#LR__4712
2fb5c     AD 01 00 FF 
2fb60     98 12 06 F6 | 	mov	arg01, ##@LR__5372
2fb64     14 4E 05 F1 | 	add	fp, #20
2fb68     A7 14 E2 FA | 	rdword	arg02, fp
2fb6c     14 4E 85 F1 | 	sub	fp, #20
2fb70     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2fb74     00 FA 0D F2 | 	cmp	result1, #0 wz
2fb78     06 FA 05 56 |  if_ne	mov	result1, #6
2fb7c     A4 07 90 5D |  if_ne	jmp	#LR__4750
2fb80                 | LR__4712
2fb80     2C 4E 05 F1 | 	add	fp, #44
2fb84     A7 30 02 FB | 	rdlong	local06, fp
2fb88     2C 4E 85 F1 | 	sub	fp, #44
2fb8c     FF 30 16 F2 | 	cmp	local06, #255 wc
2fb90     06 FA 05 36 |  if_ae	mov	result1, #6
2fb94     8C 07 90 3D |  if_ae	jmp	#LR__4750
2fb98     18 4E 05 F1 | 	add	fp, #24
2fb9c     A7 2A 02 FB | 	rdlong	local03, fp
2fba0     14 4E 05 F1 | 	add	fp, #20
2fba4     A7 28 02 FB | 	rdlong	local02, fp
2fba8     14 2D 02 F6 | 	mov	local04, local02
2fbac     01 2C 06 F1 | 	add	local04, #1
2fbb0     A7 2C 62 FC | 	wrlong	local04, fp
2fbb4     14 27 02 F6 | 	mov	local01, local02
2fbb8     01 26 66 F0 | 	shl	local01, #1
2fbbc     15 27 02 F1 | 	add	local01, local03
2fbc0     18 4E 85 F1 | 	sub	fp, #24
2fbc4     A7 30 E2 FA | 	rdword	local06, fp
2fbc8     14 4E 85 F1 | 	sub	fp, #20
2fbcc     13 31 52 FC | 	wrword	local06, local01
2fbd0     B0 FE 9F FD | 	jmp	#LR__4710
2fbd4                 | LR__4713
2fbd4     14 4E 05 F1 | 	add	fp, #20
2fbd8     A7 32 E2 FA | 	rdword	local07, fp
2fbdc     14 4E 85 F1 | 	sub	fp, #20
2fbe0     20 32 16 F2 | 	cmp	local07, #32 wc
2fbe4     10 4E 05 C1 |  if_b	add	fp, #16
2fbe8     A7 08 48 CC |  if_b	wrbyte	#4, fp
2fbec     10 4E 85 C1 |  if_b	sub	fp, #16
2fbf0     74 00 90 CD |  if_b	jmp	#LR__4718
2fbf4     97 24 48 FB | 	callpa	#(@LR__4716-@LR__4714)>>2,fcache_load_ptr_
2fbf8                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2fbf8                 | LR__4714
2fbf8     30 4E 05 F1 | 	add	fp, #48
2fbfc     A7 2C 02 FB | 	rdlong	local04, fp
2fc00     30 4E 85 F1 | 	sub	fp, #48
2fc04     16 33 C2 FA | 	rdbyte	local07, local04
2fc08     2F 32 0E F2 | 	cmp	local07, #47 wz
2fc0c     18 00 90 AD |  if_e	jmp	#LR__4715
2fc10     30 4E 05 F1 | 	add	fp, #48
2fc14     A7 2C 02 FB | 	rdlong	local04, fp
2fc18     30 4E 85 F1 | 	sub	fp, #48
2fc1c     16 29 C2 FA | 	rdbyte	local02, local04
2fc20     5C 28 0E F2 | 	cmp	local02, #92 wz
2fc24     18 00 90 5D |  if_ne	jmp	#LR__4717
2fc28                 | LR__4715
2fc28     30 4E 05 F1 | 	add	fp, #48
2fc2c     A7 26 02 FB | 	rdlong	local01, fp
2fc30     01 26 06 F1 | 	add	local01, #1
2fc34     A7 26 62 FC | 	wrlong	local01, fp
2fc38     30 4E 85 F1 | 	sub	fp, #48
2fc3c     B8 FF 9F FD | 	jmp	#LR__4714
2fc40                 | LR__4716
2fc40                 | LR__4717
2fc40     10 4E 05 F1 | 	add	fp, #16
2fc44     A7 00 48 FC | 	wrbyte	#0, fp
2fc48     20 4E 05 F1 | 	add	fp, #32
2fc4c     A7 30 02 FB | 	rdlong	local06, fp
2fc50     30 4E 85 F1 | 	sub	fp, #48
2fc54     18 33 C2 FA | 	rdbyte	local07, local06
2fc58     20 32 16 F2 | 	cmp	local07, #32 wc
2fc5c     10 4E 05 C1 |  if_b	add	fp, #16
2fc60     A7 08 48 CC |  if_b	wrbyte	#4, fp
2fc64     10 4E 85 C1 |  if_b	sub	fp, #16
2fc68                 | LR__4718
2fc68     08 4E 05 F1 | 	add	fp, #8
2fc6c     A7 32 02 FB | 	rdlong	local07, fp
2fc70     28 4E 05 F1 | 	add	fp, #40
2fc74     A7 26 02 FB | 	rdlong	local01, fp
2fc78     30 4E 85 F1 | 	sub	fp, #48
2fc7c     19 27 62 FC | 	wrlong	local01, local07
2fc80     97 38 48 FB | 	callpa	#(@LR__4720-@LR__4719)>>2,fcache_load_ptr_
2fc84                 | ' 	}
2fc84                 | ' 	*path = p;
2fc84                 | ' #line 2862 "ff.c"
2fc84                 | ' 	while (di) {
2fc84                 | LR__4719
2fc84     2C 4E 05 F1 | 	add	fp, #44
2fc88     A7 32 0A FB | 	rdlong	local07, fp wz
2fc8c     2C 4E 85 F1 | 	sub	fp, #44
2fc90     60 00 90 AD |  if_e	jmp	#LR__4721
2fc94     18 4E 05 F1 | 	add	fp, #24
2fc98     A7 30 02 FB | 	rdlong	local06, fp
2fc9c     14 4E 05 F1 | 	add	fp, #20
2fca0     A7 2C 02 FB | 	rdlong	local04, fp
2fca4     01 2C 86 F1 | 	sub	local04, #1
2fca8     01 2C 66 F0 | 	shl	local04, #1
2fcac     18 2D 02 F1 | 	add	local04, local06
2fcb0     16 31 E2 FA | 	rdword	local06, local04
2fcb4     18 4E 85 F1 | 	sub	fp, #24
2fcb8     A7 30 52 FC | 	wrword	local06, fp
2fcbc     A7 32 E2 FA | 	rdword	local07, fp
2fcc0     14 4E 85 F1 | 	sub	fp, #20
2fcc4     20 32 0E F2 | 	cmp	local07, #32 wz
2fcc8     14 4E 05 51 |  if_ne	add	fp, #20
2fccc     A7 26 E2 5A |  if_ne	rdword	local01, fp
2fcd0     14 4E 85 51 |  if_ne	sub	fp, #20
2fcd4     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
2fcd8     18 00 90 5D |  if_ne	jmp	#LR__4721
2fcdc     2C 4E 05 F1 | 	add	fp, #44
2fce0     A7 26 02 FB | 	rdlong	local01, fp
2fce4     01 26 86 F1 | 	sub	local01, #1
2fce8     A7 26 62 FC | 	wrlong	local01, fp
2fcec     2C 4E 85 F1 | 	sub	fp, #44
2fcf0     90 FF 9F FD | 	jmp	#LR__4719
2fcf4                 | LR__4720
2fcf4                 | LR__4721
2fcf4     18 4E 05 F1 | 	add	fp, #24
2fcf8     A7 34 02 FB | 	rdlong	local08, fp
2fcfc     14 4E 05 F1 | 	add	fp, #20
2fd00     A7 2C 02 FB | 	rdlong	local04, fp
2fd04     01 2C 66 F0 | 	shl	local04, #1
2fd08     1A 2D 02 F1 | 	add	local04, local08
2fd0c     16 01 58 FC | 	wrword	#0, local04
2fd10     A7 32 0A FB | 	rdlong	local07, fp wz
2fd14     2C 4E 85 F1 | 	sub	fp, #44
2fd18     06 FA 05 A6 |  if_e	mov	result1, #6
2fd1c     04 06 90 AD |  if_e	jmp	#LR__4750
2fd20                 | ' 
2fd20                 | ' 
2fd20                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2fd20     28 4E 05 F1 | 	add	fp, #40
2fd24     A7 00 68 FC | 	wrlong	#0, fp
2fd28     28 4E 85 F1 | 	sub	fp, #40
2fd2c     97 22 48 FB | 	callpa	#(@LR__4723-@LR__4722)>>2,fcache_load_ptr_
2fd30                 | LR__4722
2fd30     18 4E 05 F1 | 	add	fp, #24
2fd34     A7 36 02 FB | 	rdlong	local09, fp
2fd38     10 4E 05 F1 | 	add	fp, #16
2fd3c     A7 38 02 FB | 	rdlong	local10, fp
2fd40     28 4E 85 F1 | 	sub	fp, #40
2fd44     01 38 66 F0 | 	shl	local10, #1
2fd48     1B 39 02 F1 | 	add	local10, local09
2fd4c     1C 3B E2 FA | 	rdword	local11, local10
2fd50     20 3A 0E F2 | 	cmp	local11, #32 wz
2fd54     1C 00 90 5D |  if_ne	jmp	#LR__4724
2fd58     28 4E 05 F1 | 	add	fp, #40
2fd5c     A7 3C 02 FB | 	rdlong	local12, fp
2fd60     1E 2F 02 F6 | 	mov	local05, local12
2fd64     01 2E 06 F1 | 	add	local05, #1
2fd68     A7 2E 62 FC | 	wrlong	local05, fp
2fd6c     28 4E 85 F1 | 	sub	fp, #40
2fd70     BC FF 9F FD | 	jmp	#LR__4722
2fd74                 | LR__4723
2fd74                 | LR__4724
2fd74     28 4E 05 F1 | 	add	fp, #40
2fd78     A7 32 02 FB | 	rdlong	local07, fp
2fd7c     28 4E 85 F1 | 	sub	fp, #40
2fd80     01 32 16 F2 | 	cmp	local07, #1 wc
2fd84     28 00 90 3D |  if_ae	jmp	#LR__4725
2fd88     18 4E 05 F1 | 	add	fp, #24
2fd8c     A7 2A 02 FB | 	rdlong	local03, fp
2fd90     10 4E 05 F1 | 	add	fp, #16
2fd94     A7 36 02 FB | 	rdlong	local09, fp
2fd98     28 4E 85 F1 | 	sub	fp, #40
2fd9c     01 36 66 F0 | 	shl	local09, #1
2fda0     15 37 02 F1 | 	add	local09, local03
2fda4     1B 27 E2 FA | 	rdword	local01, local09
2fda8     2E 26 0E F2 | 	cmp	local01, #46 wz
2fdac     14 00 90 5D |  if_ne	jmp	#LR__4726
2fdb0                 | LR__4725
2fdb0     10 4E 05 F1 | 	add	fp, #16
2fdb4     A7 32 C2 FA | 	rdbyte	local07, fp
2fdb8     03 32 46 F5 | 	or	local07, #3
2fdbc     A7 32 42 FC | 	wrbyte	local07, fp
2fdc0     10 4E 85 F1 | 	sub	fp, #16
2fdc4                 | LR__4726
2fdc4     97 2C 48 FB | 	callpa	#(@LR__4728-@LR__4727)>>2,fcache_load_ptr_
2fdc8                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2fdc8                 | LR__4727
2fdc8     2C 4E 05 F1 | 	add	fp, #44
2fdcc     A7 32 02 FB | 	rdlong	local07, fp
2fdd0     2C 4E 85 F1 | 	sub	fp, #44
2fdd4     01 32 16 F2 | 	cmp	local07, #1 wc
2fdd8     44 00 90 CD |  if_b	jmp	#LR__4729
2fddc     18 4E 05 F1 | 	add	fp, #24
2fde0     A7 30 02 FB | 	rdlong	local06, fp
2fde4     14 4E 05 F1 | 	add	fp, #20
2fde8     A7 2A 02 FB | 	rdlong	local03, fp
2fdec     2C 4E 85 F1 | 	sub	fp, #44
2fdf0     01 2A 86 F1 | 	sub	local03, #1
2fdf4     01 2A 66 F0 | 	shl	local03, #1
2fdf8     18 2B 02 F1 | 	add	local03, local06
2fdfc     15 27 E2 FA | 	rdword	local01, local03
2fe00     2E 26 0E F2 | 	cmp	local01, #46 wz
2fe04     18 00 90 AD |  if_e	jmp	#LR__4729
2fe08     2C 4E 05 F1 | 	add	fp, #44
2fe0c     A7 26 02 FB | 	rdlong	local01, fp
2fe10     01 26 86 F1 | 	sub	local01, #1
2fe14     A7 26 62 FC | 	wrlong	local01, fp
2fe18     2C 4E 85 F1 | 	sub	fp, #44
2fe1c     A8 FF 9F FD | 	jmp	#LR__4727
2fe20                 | LR__4728
2fe20                 | LR__4729
2fe20     04 4E 05 F1 | 	add	fp, #4
2fe24     A7 12 02 FB | 	rdlong	arg01, fp
2fe28     04 4E 85 F1 | 	sub	fp, #4
2fe2c     20 12 06 F1 | 	add	arg01, #32
2fe30     20 14 06 F6 | 	mov	arg02, #32
2fe34     0B 16 06 F6 | 	mov	arg03, #11
2fe38     09 3F 02 F6 | 	mov	local13, arg01
2fe3c     98 00 A0 FD | 	call	#\builtin_bytefill_
2fe40     1F FB 01 F6 | 	mov	result1, local13
2fe44     0C 4E 05 F1 | 	add	fp, #12
2fe48     A7 00 48 FC | 	wrbyte	#0, fp
2fe4c     A7 32 C2 FA | 	rdbyte	local07, fp
2fe50     14 4E 05 F1 | 	add	fp, #20
2fe54     A7 32 62 FC | 	wrlong	local07, fp
2fe58     04 4E 05 F1 | 	add	fp, #4
2fe5c     A7 10 68 FC | 	wrlong	#8, fp
2fe60     24 4E 85 F1 | 	sub	fp, #36
2fe64                 | ' 
2fe64                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2fe64                 | ' 	i = b = 0; ni = 8;
2fe64                 | ' 	for (;;) {
2fe64                 | LR__4730
2fe64     18 4E 05 F1 | 	add	fp, #24
2fe68     A7 2A 02 FB | 	rdlong	local03, fp
2fe6c     10 4E 05 F1 | 	add	fp, #16
2fe70     A7 36 02 FB | 	rdlong	local09, fp
2fe74     1B 2D 02 F6 | 	mov	local04, local09
2fe78     01 2C 06 F1 | 	add	local04, #1
2fe7c     A7 2C 62 FC | 	wrlong	local04, fp
2fe80     01 36 66 F0 | 	shl	local09, #1
2fe84     15 37 02 F1 | 	add	local09, local03
2fe88     1B 31 E2 FA | 	rdword	local06, local09
2fe8c     14 4E 85 F1 | 	sub	fp, #20
2fe90     A7 30 52 FC | 	wrword	local06, fp
2fe94     A7 32 EA FA | 	rdword	local07, fp wz
2fe98     14 4E 85 F1 | 	sub	fp, #20
2fe9c     74 03 90 AD |  if_e	jmp	#LR__4746
2fea0     14 4E 05 F1 | 	add	fp, #20
2fea4     A7 32 E2 FA | 	rdword	local07, fp
2fea8     14 4E 85 F1 | 	sub	fp, #20
2feac     20 32 0E F2 | 	cmp	local07, #32 wz
2feb0     30 00 90 AD |  if_e	jmp	#LR__4731
2feb4     14 4E 05 F1 | 	add	fp, #20
2feb8     A7 26 E2 FA | 	rdword	local01, fp
2febc     14 4E 85 F1 | 	sub	fp, #20
2fec0     2E 26 0E F2 | 	cmp	local01, #46 wz
2fec4     34 00 90 5D |  if_ne	jmp	#LR__4732
2fec8     28 4E 05 F1 | 	add	fp, #40
2fecc     A7 2C 02 FB | 	rdlong	local04, fp
2fed0     04 4E 05 F1 | 	add	fp, #4
2fed4     A7 38 02 FB | 	rdlong	local10, fp
2fed8     2C 4E 85 F1 | 	sub	fp, #44
2fedc     1C 2D 0A F2 | 	cmp	local04, local10 wz
2fee0     18 00 90 AD |  if_e	jmp	#LR__4732
2fee4                 | LR__4731
2fee4     10 4E 05 F1 | 	add	fp, #16
2fee8     A7 32 C2 FA | 	rdbyte	local07, fp
2feec     03 32 46 F5 | 	or	local07, #3
2fef0     A7 32 42 FC | 	wrbyte	local07, fp
2fef4     10 4E 85 F1 | 	sub	fp, #16
2fef8                 | ' 			cf |=  0x01  |  0x02 ;
2fef8                 | ' 			continue;
2fef8     68 FF 9F FD | 	jmp	#LR__4730
2fefc                 | LR__4732
2fefc     20 4E 05 F1 | 	add	fp, #32
2ff00     A7 32 02 FB | 	rdlong	local07, fp
2ff04     04 4E 05 F1 | 	add	fp, #4
2ff08     A7 26 02 FB | 	rdlong	local01, fp
2ff0c     24 4E 85 F1 | 	sub	fp, #36
2ff10     13 33 12 F2 | 	cmp	local07, local01 wc
2ff14     1C 00 90 3D |  if_ae	jmp	#LR__4733
2ff18     28 4E 05 F1 | 	add	fp, #40
2ff1c     A7 34 02 FB | 	rdlong	local08, fp
2ff20     04 4E 05 F1 | 	add	fp, #4
2ff24     A7 38 02 FB | 	rdlong	local10, fp
2ff28     2C 4E 85 F1 | 	sub	fp, #44
2ff2c     1C 35 0A F2 | 	cmp	local08, local10 wz
2ff30     B0 00 90 5D |  if_ne	jmp	#LR__4735
2ff34                 | LR__4733
2ff34     24 4E 05 F1 | 	add	fp, #36
2ff38     A7 32 02 FB | 	rdlong	local07, fp
2ff3c     24 4E 85 F1 | 	sub	fp, #36
2ff40     0B 32 0E F2 | 	cmp	local07, #11 wz
2ff44     18 00 90 5D |  if_ne	jmp	#LR__4734
2ff48     10 4E 05 F1 | 	add	fp, #16
2ff4c     A7 32 C2 FA | 	rdbyte	local07, fp
2ff50     03 32 46 F5 | 	or	local07, #3
2ff54     A7 32 42 FC | 	wrbyte	local07, fp
2ff58     10 4E 85 F1 | 	sub	fp, #16
2ff5c                 | ' 				cf |=  0x01  |  0x02 ;
2ff5c                 | ' 				break;
2ff5c     B4 02 90 FD | 	jmp	#LR__4746
2ff60                 | LR__4734
2ff60     28 4E 05 F1 | 	add	fp, #40
2ff64     A7 32 02 FB | 	rdlong	local07, fp
2ff68     04 4E 05 F1 | 	add	fp, #4
2ff6c     A7 26 02 FB | 	rdlong	local01, fp
2ff70     2C 4E 85 F1 | 	sub	fp, #44
2ff74     13 33 0A F2 | 	cmp	local07, local01 wz
2ff78     10 4E 05 51 |  if_ne	add	fp, #16
2ff7c     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2ff80     03 32 46 55 |  if_ne	or	local07, #3
2ff84     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2ff88     10 4E 85 51 |  if_ne	sub	fp, #16
2ff8c     28 4E 05 F1 | 	add	fp, #40
2ff90     A7 32 02 FB | 	rdlong	local07, fp
2ff94     04 4E 05 F1 | 	add	fp, #4
2ff98     A7 28 02 FB | 	rdlong	local02, fp
2ff9c     2C 4E 85 F1 | 	sub	fp, #44
2ffa0     14 33 1A F2 | 	cmp	local07, local02 wcz
2ffa4     6C 02 90 1D |  if_a	jmp	#LR__4746
2ffa8     2C 4E 05 F1 | 	add	fp, #44
2ffac     A7 32 02 FB | 	rdlong	local07, fp
2ffb0     04 4E 85 F1 | 	sub	fp, #4
2ffb4     A7 32 62 FC | 	wrlong	local07, fp
2ffb8     08 4E 85 F1 | 	sub	fp, #8
2ffbc     A7 10 68 FC | 	wrlong	#8, fp
2ffc0     04 4E 05 F1 | 	add	fp, #4
2ffc4     A7 16 68 FC | 	wrlong	#11, fp
2ffc8     18 4E 85 F1 | 	sub	fp, #24
2ffcc     A7 3A C2 FA | 	rdbyte	local11, fp
2ffd0     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2ffd4     02 32 66 F0 | 	shl	local07, #2
2ffd8     A7 32 42 FC | 	wrbyte	local07, fp
2ffdc     0C 4E 85 F1 | 	sub	fp, #12
2ffe0                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2ffe0                 | ' 			continue;
2ffe0     80 FE 9F FD | 	jmp	#LR__4730
2ffe4                 | LR__4735
2ffe4     14 4E 05 F1 | 	add	fp, #20
2ffe8     A7 32 E2 FA | 	rdword	local07, fp
2ffec     14 4E 85 F1 | 	sub	fp, #20
2fff0     80 32 16 F2 | 	cmp	local07, #128 wc
2fff4     6C 00 90 CD |  if_b	jmp	#LR__4737
2fff8     10 4E 05 F1 | 	add	fp, #16
2fffc     A7 32 C2 FA | 	rdbyte	local07, fp
30000     02 32 46 F5 | 	or	local07, #2
30004     A7 32 42 FC | 	wrbyte	local07, fp
30008     04 4E 05 F1 | 	add	fp, #4
3000c     A7 12 E2 FA | 	rdword	arg01, fp
30010     14 4E 85 F1 | 	sub	fp, #20
30014     01 00 00 FF 
30018     52 15 06 F6 | 	mov	arg02, ##850
3001c     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
30020     14 4E 05 F1 | 	add	fp, #20
30024     A7 FA 51 FC | 	wrword	result1, fp
30028     A7 32 E2 FA | 	rdword	local07, fp
3002c     14 4E 85 F1 | 	sub	fp, #20
30030     80 32 CE F7 | 	test	local07, #128 wz
30034     2C 00 90 AD |  if_e	jmp	#LR__4736
30038     14 4E 05 F1 | 	add	fp, #20
3003c     A7 28 E2 FA | 	rdword	local02, fp
30040     7F 28 06 F5 | 	and	local02, #127
30044     01 00 00 FF 
30048     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
3004c     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
30050     14 33 C2 FA | 	rdbyte	local07, local02
30054     A7 32 52 FC | 	wrword	local07, fp
30058     14 4E 85 F1 | 	sub	fp, #20
3005c     01 00 00 FF 
30060     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
30064                 | LR__4736
30064                 | LR__4737
30064     14 4E 05 F1 | 	add	fp, #20
30068     A7 32 E2 FA | 	rdword	local07, fp
3006c     14 4E 85 F1 | 	sub	fp, #20
30070     00 33 16 F2 | 	cmp	local07, #256 wc
30074     88 00 90 CD |  if_b	jmp	#LR__4739
30078     24 4E 05 F1 | 	add	fp, #36
3007c     A7 32 02 FB | 	rdlong	local07, fp
30080     01 32 86 F1 | 	sub	local07, #1
30084     04 4E 85 F1 | 	sub	fp, #4
30088     A7 28 02 FB | 	rdlong	local02, fp
3008c     20 4E 85 F1 | 	sub	fp, #32
30090     19 29 12 F2 | 	cmp	local02, local07 wc
30094     2C 00 90 CD |  if_b	jmp	#LR__4738
30098     10 4E 05 F1 | 	add	fp, #16
3009c     A7 3A C2 FA | 	rdbyte	local11, fp
300a0     1D 33 E2 F8 | 	getbyte	local07, local11, #0
300a4     03 32 46 F5 | 	or	local07, #3
300a8     A7 32 42 FC | 	wrbyte	local07, fp
300ac     14 4E 05 F1 | 	add	fp, #20
300b0     A7 32 02 FB | 	rdlong	local07, fp
300b4     04 4E 85 F1 | 	sub	fp, #4
300b8     A7 32 62 FC | 	wrlong	local07, fp
300bc     20 4E 85 F1 | 	sub	fp, #32
300c0                 | ' 				cf |=  0x01  |  0x02 ;
300c0                 | ' 				i = ni; continue;
300c0     A0 FD 9F FD | 	jmp	#LR__4730
300c4                 | LR__4738
300c4     04 4E 05 F1 | 	add	fp, #4
300c8     A7 36 02 FB | 	rdlong	local09, fp
300cc     1C 4E 05 F1 | 	add	fp, #28
300d0     A7 38 02 FB | 	rdlong	local10, fp
300d4     1C 2D 02 F6 | 	mov	local04, local10
300d8     01 2C 06 F1 | 	add	local04, #1
300dc     A7 2C 62 FC | 	wrlong	local04, fp
300e0     20 36 06 F1 | 	add	local09, #32
300e4     1B 39 02 F1 | 	add	local10, local09
300e8     0C 4E 85 F1 | 	sub	fp, #12
300ec     A7 2A E2 FA | 	rdword	local03, fp
300f0     14 4E 85 F1 | 	sub	fp, #20
300f4     08 2A 46 F0 | 	shr	local03, #8
300f8     1C 2B 42 FC | 	wrbyte	local03, local10
300fc     D4 00 90 FD | 	jmp	#LR__4745
30100                 | LR__4739
30100     14 4E 05 F1 | 	add	fp, #20
30104     A7 32 EA FA | 	rdword	local07, fp wz
30108     14 4E 85 F1 | 	sub	fp, #20
3010c     20 00 90 AD |  if_e	jmp	#LR__4740
30110     AD 01 00 FF 
30114     A1 12 06 F6 | 	mov	arg01, ##@LR__5373
30118     14 4E 05 F1 | 	add	fp, #20
3011c     A7 14 E2 FA | 	rdword	arg02, fp
30120     14 4E 85 F1 | 	sub	fp, #20
30124     48 CB BF FD | 	call	#_fatfs_cc_strchr
30128     00 FA 0D F2 | 	cmp	result1, #0 wz
3012c     20 00 90 AD |  if_e	jmp	#LR__4741
30130                 | LR__4740
30130     14 4E 05 F1 | 	add	fp, #20
30134     A7 BE 58 FC | 	wrword	#95, fp
30138     04 4E 85 F1 | 	sub	fp, #4
3013c     A7 32 C2 FA | 	rdbyte	local07, fp
30140     03 32 46 F5 | 	or	local07, #3
30144     A7 32 42 FC | 	wrbyte	local07, fp
30148     10 4E 85 F1 | 	sub	fp, #16
3014c     84 00 90 FD | 	jmp	#LR__4744
30150                 | LR__4741
30150     14 4E 05 F1 | 	add	fp, #20
30154     A7 32 E2 FA | 	rdword	local07, fp
30158     14 4E 85 F1 | 	sub	fp, #20
3015c     41 32 16 F2 | 	cmp	local07, #65 wc
30160     24 00 90 CD |  if_b	jmp	#LR__4742
30164     14 4E 05 F1 | 	add	fp, #20
30168     A7 26 E2 FA | 	rdword	local01, fp
3016c     14 4E 85 F1 | 	sub	fp, #20
30170     5B 26 16 F2 | 	cmp	local01, #91 wc
30174     0C 4E 05 C1 |  if_b	add	fp, #12
30178     A7 32 C2 CA |  if_b	rdbyte	local07, fp
3017c     02 32 46 C5 |  if_b	or	local07, #2
30180     A7 32 42 CC |  if_b	wrbyte	local07, fp
30184     0C 4E 85 C1 |  if_b	sub	fp, #12
30188                 | LR__4742
30188     14 4E 05 F1 | 	add	fp, #20
3018c     A7 32 E2 FA | 	rdword	local07, fp
30190     14 4E 85 F1 | 	sub	fp, #20
30194     61 32 16 F2 | 	cmp	local07, #97 wc
30198     38 00 90 CD |  if_b	jmp	#LR__4743
3019c     14 4E 05 F1 | 	add	fp, #20
301a0     A7 26 E2 FA | 	rdword	local01, fp
301a4     14 4E 85 F1 | 	sub	fp, #20
301a8     7B 26 16 F2 | 	cmp	local01, #123 wc
301ac     24 00 90 3D |  if_ae	jmp	#LR__4743
301b0     0C 4E 05 F1 | 	add	fp, #12
301b4     A7 32 C2 FA | 	rdbyte	local07, fp
301b8     01 32 46 F5 | 	or	local07, #1
301bc     A7 32 42 FC | 	wrbyte	local07, fp
301c0     08 4E 05 F1 | 	add	fp, #8
301c4     A7 32 E2 FA | 	rdword	local07, fp
301c8     20 32 86 F1 | 	sub	local07, #32
301cc     A7 32 52 FC | 	wrword	local07, fp
301d0     14 4E 85 F1 | 	sub	fp, #20
301d4                 | LR__4743
301d4                 | LR__4744
301d4                 | LR__4745
301d4     04 4E 05 F1 | 	add	fp, #4
301d8     A7 3A 02 FB | 	rdlong	local11, fp
301dc     1D 37 02 F6 | 	mov	local09, local11
301e0     1C 4E 05 F1 | 	add	fp, #28
301e4     A7 28 02 FB | 	rdlong	local02, fp
301e8     14 2D 02 F6 | 	mov	local04, local02
301ec     01 2C 06 F1 | 	add	local04, #1
301f0     A7 2C 62 FC | 	wrlong	local04, fp
301f4     14 39 02 F6 | 	mov	local10, local02
301f8     20 36 06 F1 | 	add	local09, #32
301fc     1B 39 02 F1 | 	add	local10, local09
30200     0C 4E 85 F1 | 	sub	fp, #12
30204     A7 2A E2 FA | 	rdword	local03, fp
30208     14 4E 85 F1 | 	sub	fp, #20
3020c     1C 2B 42 FC | 	wrbyte	local03, local10
30210     50 FC 9F FD | 	jmp	#LR__4730
30214                 | LR__4746
30214     04 4E 05 F1 | 	add	fp, #4
30218     A7 3A 02 FB | 	rdlong	local11, fp
3021c     04 4E 85 F1 | 	sub	fp, #4
30220     20 3A 06 F1 | 	add	local11, #32
30224     1D 33 C2 FA | 	rdbyte	local07, local11
30228     E5 32 0E F2 | 	cmp	local07, #229 wz
3022c     04 4E 05 A1 |  if_e	add	fp, #4
30230     A7 32 02 AB |  if_e	rdlong	local07, fp
30234     04 4E 85 A1 |  if_e	sub	fp, #4
30238     20 32 06 A1 |  if_e	add	local07, #32
3023c     19 0B 48 AC |  if_e	wrbyte	#5, local07
30240     24 4E 05 F1 | 	add	fp, #36
30244     A7 32 02 FB | 	rdlong	local07, fp
30248     24 4E 85 F1 | 	sub	fp, #36
3024c     08 32 0E F2 | 	cmp	local07, #8 wz
30250     0C 4E 05 A1 |  if_e	add	fp, #12
30254     A7 32 C2 AA |  if_e	rdbyte	local07, fp
30258     02 32 66 A0 |  if_e	shl	local07, #2
3025c     A7 32 42 AC |  if_e	wrbyte	local07, fp
30260     0C 4E 85 A1 |  if_e	sub	fp, #12
30264     0C 4E 05 F1 | 	add	fp, #12
30268     A7 32 C2 FA | 	rdbyte	local07, fp
3026c     0C 4E 85 F1 | 	sub	fp, #12
30270     0C 32 06 F5 | 	and	local07, #12
30274     0C 32 0E F2 | 	cmp	local07, #12 wz
30278     18 00 90 AD |  if_e	jmp	#LR__4747
3027c     0C 4E 05 F1 | 	add	fp, #12
30280     A7 26 C2 FA | 	rdbyte	local01, fp
30284     0C 4E 85 F1 | 	sub	fp, #12
30288     03 26 06 F5 | 	and	local01, #3
3028c     03 26 0E F2 | 	cmp	local01, #3 wz
30290     14 00 90 5D |  if_ne	jmp	#LR__4748
30294                 | LR__4747
30294     10 4E 05 F1 | 	add	fp, #16
30298     A7 32 C2 FA | 	rdbyte	local07, fp
3029c     02 32 46 F5 | 	or	local07, #2
302a0     A7 32 42 FC | 	wrbyte	local07, fp
302a4     10 4E 85 F1 | 	sub	fp, #16
302a8                 | LR__4748
302a8     10 4E 05 F1 | 	add	fp, #16
302ac     A7 32 C2 FA | 	rdbyte	local07, fp
302b0     10 4E 85 F1 | 	sub	fp, #16
302b4     02 32 CE F7 | 	test	local07, #2 wz
302b8     48 00 90 5D |  if_ne	jmp	#LR__4749
302bc     0C 4E 05 F1 | 	add	fp, #12
302c0     A7 32 C2 FA | 	rdbyte	local07, fp
302c4     0C 4E 85 F1 | 	sub	fp, #12
302c8     01 32 CE F7 | 	test	local07, #1 wz
302cc     10 4E 05 51 |  if_ne	add	fp, #16
302d0     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
302d4     10 32 46 55 |  if_ne	or	local07, #16
302d8     A7 32 42 5C |  if_ne	wrbyte	local07, fp
302dc     10 4E 85 51 |  if_ne	sub	fp, #16
302e0     0C 4E 05 F1 | 	add	fp, #12
302e4     A7 32 C2 FA | 	rdbyte	local07, fp
302e8     0C 4E 85 F1 | 	sub	fp, #12
302ec     04 32 CE F7 | 	test	local07, #4 wz
302f0     10 4E 05 51 |  if_ne	add	fp, #16
302f4     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
302f8     08 32 46 55 |  if_ne	or	local07, #8
302fc     A7 32 42 5C |  if_ne	wrbyte	local07, fp
30300     10 4E 85 51 |  if_ne	sub	fp, #16
30304                 | LR__4749
30304     04 4E 05 F1 | 	add	fp, #4
30308     A7 32 02 FB | 	rdlong	local07, fp
3030c     0C 4E 05 F1 | 	add	fp, #12
30310     A7 26 C2 FA | 	rdbyte	local01, fp
30314     10 4E 85 F1 | 	sub	fp, #16
30318     2B 32 06 F1 | 	add	local07, #43
3031c     19 27 42 FC | 	wrbyte	local01, local07
30320                 | ' 	}
30320                 | ' 
30320                 | ' 	dp->fn[ 11 ] = cf;
30320                 | ' 
30320                 | ' 	return FR_OK;
30320     00 FA 05 F6 | 	mov	result1, #0
30324                 | LR__4750
30324     A7 F0 03 F6 | 	mov	ptra, fp
30328     B2 00 A0 FD | 	call	#popregs_
3032c                 | _fatfs_cc_create_name_ret
3032c     2D 00 64 FD | 	ret
30330                 | 
30330                 | _fatfs_cc_follow_path
30330     02 4A 05 F6 | 	mov	COUNT_, #2
30334     A8 00 A0 FD | 	call	#pushregs_
30338     18 F0 07 F1 | 	add	ptra, #24
3033c     04 4E 05 F1 | 	add	fp, #4
30340     A7 12 62 FC | 	wrlong	arg01, fp
30344     04 4E 05 F1 | 	add	fp, #4
30348     A7 14 62 FC | 	wrlong	arg02, fp
3034c     04 4E 85 F1 | 	sub	fp, #4
30350     A7 FA 01 FB | 	rdlong	result1, fp
30354     FD 26 02 FB | 	rdlong	local01, result1
30358     10 4E 05 F1 | 	add	fp, #16
3035c     A7 26 62 FC | 	wrlong	local01, fp
30360     14 4E 85 F1 | 	sub	fp, #20
30364     97 24 48 FB | 	callpa	#(@LR__4762-@LR__4760)>>2,fcache_load_ptr_
30368                 | ' )
30368                 | ' {
30368                 | ' 	FRESULT res;
30368                 | ' 	BYTE ns;
30368                 | ' 	FATFS *fs = dp->obj.fs;
30368                 | ' #line 3034 "ff.c"
30368                 | ' 	{
30368                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
30368                 | LR__4760
30368     08 4E 05 F1 | 	add	fp, #8
3036c     A7 26 02 FB | 	rdlong	local01, fp
30370     08 4E 85 F1 | 	sub	fp, #8
30374     13 27 C2 FA | 	rdbyte	local01, local01
30378     2F 26 0E F2 | 	cmp	local01, #47 wz
3037c     18 00 90 AD |  if_e	jmp	#LR__4761
30380     08 4E 05 F1 | 	add	fp, #8
30384     A7 26 02 FB | 	rdlong	local01, fp
30388     08 4E 85 F1 | 	sub	fp, #8
3038c     13 27 C2 FA | 	rdbyte	local01, local01
30390     5C 26 0E F2 | 	cmp	local01, #92 wz
30394     18 00 90 5D |  if_ne	jmp	#LR__4763
30398                 | LR__4761
30398     08 4E 05 F1 | 	add	fp, #8
3039c     A7 26 02 FB | 	rdlong	local01, fp
303a0     01 26 06 F1 | 	add	local01, #1
303a4     A7 26 62 FC | 	wrlong	local01, fp
303a8     08 4E 85 F1 | 	sub	fp, #8
303ac     B8 FF 9F FD | 	jmp	#LR__4760
303b0                 | LR__4762
303b0                 | LR__4763
303b0     04 4E 05 F1 | 	add	fp, #4
303b4     A7 26 02 FB | 	rdlong	local01, fp
303b8     08 26 06 F1 | 	add	local01, #8
303bc     13 01 68 FC | 	wrlong	#0, local01
303c0     04 4E 05 F1 | 	add	fp, #4
303c4     A7 26 02 FB | 	rdlong	local01, fp
303c8     08 4E 85 F1 | 	sub	fp, #8
303cc     13 27 C2 FA | 	rdbyte	local01, local01
303d0     20 26 16 F2 | 	cmp	local01, #32 wc
303d4     30 00 90 3D |  if_ae	jmp	#LR__4764
303d8     04 4E 05 F1 | 	add	fp, #4
303dc     A7 26 02 FB | 	rdlong	local01, fp
303e0     2B 26 06 F1 | 	add	local01, #43
303e4     13 01 49 FC | 	wrbyte	#128, local01
303e8     A7 12 02 FB | 	rdlong	arg01, fp
303ec     04 4E 85 F1 | 	sub	fp, #4
303f0     00 14 06 F6 | 	mov	arg02, #0
303f4     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
303f8     0C 4E 05 F1 | 	add	fp, #12
303fc     A7 FA 61 FC | 	wrlong	result1, fp
30400     0C 4E 85 F1 | 	sub	fp, #12
30404     1C 01 90 FD | 	jmp	#LR__4768
30408                 | LR__4764
30408                 | ' 		for (;;) {
30408                 | LR__4765
30408     04 4E 05 F1 | 	add	fp, #4
3040c     A7 12 02 FB | 	rdlong	arg01, fp
30410     04 4E 05 F1 | 	add	fp, #4
30414     A7 14 02 F6 | 	mov	arg02, fp
30418     08 4E 85 F1 | 	sub	fp, #8
3041c     14 F6 BF FD | 	call	#_fatfs_cc_create_name
30420     0C 4E 05 F1 | 	add	fp, #12
30424     A7 FA 61 FC | 	wrlong	result1, fp
30428     00 FA 4D F2 | 	cmps	result1, #0 wz
3042c     0C 4E 85 F1 | 	sub	fp, #12
30430     F0 00 90 5D |  if_ne	jmp	#LR__4767
30434     04 4E 05 F1 | 	add	fp, #4
30438     A7 12 02 FB | 	rdlong	arg01, fp
3043c     04 4E 85 F1 | 	sub	fp, #4
30440     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
30444     0C 4E 05 F1 | 	add	fp, #12
30448     A7 FA 61 FC | 	wrlong	result1, fp
3044c     08 4E 85 F1 | 	sub	fp, #8
30450     A7 26 02 FB | 	rdlong	local01, fp
30454     2B 26 06 F1 | 	add	local01, #43
30458     13 27 C2 FA | 	rdbyte	local01, local01
3045c     0C 4E 05 F1 | 	add	fp, #12
30460     A7 26 42 FC | 	wrbyte	local01, fp
30464     04 4E 85 F1 | 	sub	fp, #4
30468     A7 26 0A FB | 	rdlong	local01, fp wz
3046c     0C 4E 85 F1 | 	sub	fp, #12
30470     34 00 90 AD |  if_e	jmp	#LR__4766
30474     0C 4E 05 F1 | 	add	fp, #12
30478     A7 26 02 FB | 	rdlong	local01, fp
3047c     0C 4E 85 F1 | 	sub	fp, #12
30480     04 26 0E F2 | 	cmp	local01, #4 wz
30484     9C 00 90 5D |  if_ne	jmp	#LR__4767
30488     10 4E 05 F1 | 	add	fp, #16
3048c     A7 26 C2 FA | 	rdbyte	local01, fp
30490     10 4E 85 F1 | 	sub	fp, #16
30494     04 26 CE F7 | 	test	local01, #4 wz
30498     0C 4E 05 A1 |  if_e	add	fp, #12
3049c     A7 0A 68 AC |  if_e	wrlong	#5, fp
304a0     0C 4E 85 A1 |  if_e	sub	fp, #12
304a4                 | ' 					}
304a4                 | ' 				}
304a4                 | ' 				break;
304a4     7C 00 90 FD | 	jmp	#LR__4767
304a8                 | LR__4766
304a8     10 4E 05 F1 | 	add	fp, #16
304ac     A7 26 C2 FA | 	rdbyte	local01, fp
304b0     10 4E 85 F1 | 	sub	fp, #16
304b4     04 26 CE F7 | 	test	local01, #4 wz
304b8     68 00 90 5D |  if_ne	jmp	#LR__4767
304bc     04 4E 05 F1 | 	add	fp, #4
304c0     A7 26 02 FB | 	rdlong	local01, fp
304c4     04 4E 85 F1 | 	sub	fp, #4
304c8     06 26 06 F1 | 	add	local01, #6
304cc     13 27 C2 FA | 	rdbyte	local01, local01
304d0     10 26 CE F7 | 	test	local01, #16 wz
304d4     0C 4E 05 A1 |  if_e	add	fp, #12
304d8     A7 0A 68 AC |  if_e	wrlong	#5, fp
304dc     0C 4E 85 A1 |  if_e	sub	fp, #12
304e0                 | ' 				res = FR_NO_PATH; break;
304e0     40 00 90 AD |  if_e	jmp	#LR__4767
304e4     04 4E 05 F1 | 	add	fp, #4
304e8     A7 28 02 FB | 	rdlong	local02, fp
304ec     14 27 02 F6 | 	mov	local01, local02
304f0     10 4E 05 F1 | 	add	fp, #16
304f4     A7 14 02 FB | 	rdlong	arg02, fp
304f8     0A 13 02 F6 | 	mov	arg01, arg02
304fc     34 14 06 F1 | 	add	arg02, #52
30500     14 4E 85 F1 | 	sub	fp, #20
30504     10 28 06 F1 | 	add	local02, #16
30508     14 29 02 FB | 	rdlong	local02, local02
3050c     FF 29 06 F5 | 	and	local02, #511
30510     14 15 02 F1 | 	add	arg02, local02
30514     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
30518     08 26 06 F1 | 	add	local01, #8
3051c     13 FB 61 FC | 	wrlong	result1, local01
30520     E4 FE 9F FD | 	jmp	#LR__4765
30524                 | LR__4767
30524                 | LR__4768
30524                 | ' 			}
30524                 | ' #line 3090 "ff.c"
30524                 | ' 			{
30524                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
30524                 | ' 			}
30524                 | ' 		}
30524                 | ' 	}
30524                 | ' 
30524                 | ' 	return res;
30524     0C 4E 05 F1 | 	add	fp, #12
30528     A7 FA 01 FB | 	rdlong	result1, fp
3052c     0C 4E 85 F1 | 	sub	fp, #12
30530     A7 F0 03 F6 | 	mov	ptra, fp
30534     B2 00 A0 FD | 	call	#popregs_
30538                 | _fatfs_cc_follow_path_ret
30538     2D 00 64 FD | 	ret
3053c                 | 
3053c                 | _fatfs_cc_get_ldnumber
3053c     01 00 66 F6 | 	neg	_var01, #1
30540     09 03 0A FB | 	rdlong	_var02, arg01 wz
30544     01 05 02 F6 | 	mov	_var03, _var02
30548     01 FA 65 A6 |  if_e	neg	result1, #1
3054c     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
30550     97 10 48 FB | 	callpa	#(@LR__4771-@LR__4770)>>2,fcache_load_ptr_
30554                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
30554                 | LR__4770
30554     02 07 C2 FA | 	rdbyte	_var04, _var03
30558     03 FB E1 F8 | 	getbyte	result1, _var04, #0
3055c     20 FA 15 F2 | 	cmp	result1, #32 wc
30560     01 04 06 F1 | 	add	_var03, #1
30564     03 09 02 36 |  if_ae	mov	_var05, _var04
30568     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
3056c     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
30570     E0 FF 9F 1D |  if_a	jmp	#LR__4770
30574                 | LR__4771
30574     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
30578     3A 06 0E F2 | 	cmp	_var04, #58 wz
3057c     40 00 90 5D |  if_ne	jmp	#LR__4773
30580     01 0A 06 F6 | 	mov	_var06, #1
30584     01 09 C2 FA | 	rdbyte	_var05, _var02
30588     30 08 16 F2 | 	cmp	_var05, #48 wc
3058c     1C 00 90 CD |  if_b	jmp	#LR__4772
30590     01 09 C2 FA | 	rdbyte	_var05, _var02
30594     3A 08 16 F2 | 	cmp	_var05, #58 wc
30598     01 0D 02 C6 |  if_b	mov	_var07, _var02
3059c     02 0C 06 C1 |  if_b	add	_var07, #2
305a0     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
305a4     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
305a8     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
305ac                 | LR__4772
305ac     01 0A 56 F2 | 	cmps	_var06, #1 wc
305b0     05 01 02 C6 |  if_b	mov	_var01, _var06
305b4     09 05 62 CC |  if_b	wrlong	_var03, arg01
305b8                 | ' 			vol = i;
305b8                 | ' 			*path = tt;
305b8                 | ' 		}
305b8                 | ' 		return vol;
305b8     00 FB 01 F6 | 	mov	result1, _var01
305bc     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
305c0                 | LR__4773
305c0                 | ' 	}
305c0                 | ' #line 3170 "ff.c"
305c0                 | ' 	vol = 0;
305c0                 | ' 
305c0                 | ' 	return vol;
305c0     00 FA 05 F6 | 	mov	result1, #0
305c4                 | _fatfs_cc_get_ldnumber_ret
305c4     2D 00 64 FD | 	ret
305c8                 | 
305c8                 | _fatfs_cc_check_fs
305c8     04 4A 05 F6 | 	mov	COUNT_, #4
305cc     A8 00 A0 FD | 	call	#pushregs_
305d0     09 27 02 F6 | 	mov	local01, arg01
305d4     03 26 06 F1 | 	add	local01, #3
305d8     13 01 48 FC | 	wrbyte	#0, local01
305dc     2D 26 06 F1 | 	add	local01, #45
305e0     FF FF FF FF 
305e4     13 FF 6B FC | 	wrlong	##-1, local01
305e8     30 26 86 F1 | 	sub	local01, #48
305ec     13 13 02 F6 | 	mov	arg01, local01
305f0     18 D5 BF FD | 	call	#_fatfs_cc_move_window
305f4     00 FA 0D F2 | 	cmp	result1, #0 wz
305f8     04 FA 05 56 |  if_ne	mov	result1, #4
305fc     94 01 90 5D |  if_ne	jmp	#LR__4784
30600     34 26 06 F1 | 	add	local01, #52
30604     13 13 02 F6 | 	mov	arg01, local01
30608     FE 13 06 F1 | 	add	arg01, #510
3060c                 | ' {
3060c                 | ' 
3060c                 | ' 	return *((WORD*)ptr);
3060c     09 29 E2 FA | 	rdword	local02, arg01
30610     13 2B C2 FA | 	rdbyte	local03, local01
30614     34 26 86 F1 | 	sub	local01, #52
30618     15 2D E2 F8 | 	getbyte	local04, local03, #0
3061c     EB 2C 0E F2 | 	cmp	local04, #235 wz
30620     15 17 02 56 |  if_ne	mov	arg03, local03
30624     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
30628     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
3062c     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
30630     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
30634     44 01 90 5D |  if_ne	jmp	#LR__4783
30638     14 2D 32 F9 | 	getword	local04, local02, #0
3063c     55 00 00 FF 
30640     55 2C 0E F2 | 	cmp	local04, ##43605 wz
30644     2C 00 90 5D |  if_ne	jmp	#LR__4780
30648     34 26 06 F1 | 	add	local01, #52
3064c     13 13 02 F6 | 	mov	arg01, local01
30650     34 26 86 F1 | 	sub	local01, #52
30654     52 12 06 F1 | 	add	arg01, #82
30658     AD 01 00 FF 
3065c     A8 14 06 F6 | 	mov	arg02, ##@LR__5374
30660     08 16 06 F6 | 	mov	arg03, #8
30664     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
30668     00 FA 0D F2 | 	cmp	result1, #0 wz
3066c                 | ' 			return 0;
3066c     00 FA 05 A6 |  if_e	mov	result1, #0
30670     20 01 90 AD |  if_e	jmp	#LR__4784
30674                 | LR__4780
30674     34 26 06 F1 | 	add	local01, #52
30678     13 13 02 F6 | 	mov	arg01, local01
3067c     0B 12 06 F1 | 	add	arg01, #11
30680                 | ' {
30680                 | ' 
30680                 | ' 	return *((WORD*)ptr);
30680     09 FB E1 FA | 	rdword	result1, arg01
30684     0D 26 06 F1 | 	add	local01, #13
30688     13 2B C2 FA | 	rdbyte	local03, local01
3068c     41 26 86 F1 | 	sub	local01, #65
30690     FD 2C 32 F9 | 	getword	local04, result1, #0
30694     FD 14 32 F9 | 	getword	arg02, result1, #0
30698     01 14 86 F1 | 	sub	arg02, #1
3069c     0A 2D CA F7 | 	test	local04, arg02 wz
306a0     D8 00 90 5D |  if_ne	jmp	#LR__4782
306a4     FD 14 32 F9 | 	getword	arg02, result1, #0
306a8     01 00 00 FF 
306ac     00 14 16 F2 | 	cmp	arg02, ##512 wc
306b0     C8 00 90 CD |  if_b	jmp	#LR__4782
306b4     FD 14 32 F9 | 	getword	arg02, result1, #0
306b8     01 00 00 FF 
306bc     01 14 16 F2 | 	cmp	arg02, ##513 wc
306c0     B8 00 90 3D |  if_ae	jmp	#LR__4782
306c4     15 13 02 F6 | 	mov	arg01, local03
306c8     07 12 4E F7 | 	zerox	arg01, #7 wz
306cc     AC 00 90 AD |  if_e	jmp	#LR__4782
306d0     15 13 E2 F8 | 	getbyte	arg01, local03, #0
306d4     15 2B E2 F8 | 	getbyte	local03, local03, #0
306d8     01 2A 86 F1 | 	sub	local03, #1
306dc     15 13 CA F7 | 	test	arg01, local03 wz
306e0     98 00 90 5D |  if_ne	jmp	#LR__4782
306e4     34 26 06 F1 | 	add	local01, #52
306e8     13 13 02 F6 | 	mov	arg01, local01
306ec     34 26 86 F1 | 	sub	local01, #52
306f0     0E 12 06 F1 | 	add	arg01, #14
306f4                 | ' {
306f4                 | ' 
306f4                 | ' 	return *((WORD*)ptr);
306f4     09 FB E9 FA | 	rdword	result1, arg01 wz
306f8     80 00 90 AD |  if_e	jmp	#LR__4782
306fc     44 26 06 F1 | 	add	local01, #68
30700     13 13 C2 FA | 	rdbyte	arg01, local01
30704     44 26 86 F1 | 	sub	local01, #68
30708     01 12 86 F1 | 	sub	arg01, #1
3070c     02 12 16 F2 | 	cmp	arg01, #2 wc
30710     68 00 90 3D |  if_ae	jmp	#LR__4782
30714     34 26 06 F1 | 	add	local01, #52
30718     13 13 02 F6 | 	mov	arg01, local01
3071c     34 26 86 F1 | 	sub	local01, #52
30720     11 12 06 F1 | 	add	arg01, #17
30724                 | ' {
30724                 | ' 
30724                 | ' 	return *((WORD*)ptr);
30724     09 FB E9 FA | 	rdword	result1, arg01 wz
30728     50 00 90 AD |  if_e	jmp	#LR__4782
3072c     34 26 06 F1 | 	add	local01, #52
30730     13 13 02 F6 | 	mov	arg01, local01
30734     34 26 86 F1 | 	sub	local01, #52
30738     13 12 06 F1 | 	add	arg01, #19
3073c                 | ' {
3073c                 | ' 
3073c                 | ' 	return *((WORD*)ptr);
3073c     09 FB E1 FA | 	rdword	result1, arg01
30740     FD 2A 32 F9 | 	getword	local03, result1, #0
30744     80 2A 16 F2 | 	cmp	local03, #128 wc
30748     20 00 90 3D |  if_ae	jmp	#LR__4781
3074c     34 26 06 F1 | 	add	local01, #52
30750     13 13 02 F6 | 	mov	arg01, local01
30754     34 26 86 F1 | 	sub	local01, #52
30758     20 12 06 F1 | 	add	arg01, #32
3075c                 | ' {
3075c                 | ' 
3075c                 | ' 	return *((DWORD*)ptr);
3075c     09 FB 01 FB | 	rdlong	result1, arg01
30760     80 00 00 FF 
30764     00 FA 15 F2 | 	cmp	result1, ##65536 wc
30768     10 00 90 CD |  if_b	jmp	#LR__4782
3076c                 | LR__4781
3076c     4A 26 06 F1 | 	add	local01, #74
30770                 | ' {
30770                 | ' 
30770                 | ' 	return *((WORD*)ptr);
30770     13 FB E9 FA | 	rdword	result1, local01 wz
30774                 | ' 			&& b != 0 && (b & (b - 1)) == 0
30774                 | ' 			&& ld_word(fs->win +  14 ) != 0
30774                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
30774                 | ' 			&& ld_word(fs->win +  17 ) != 0
30774                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
30774                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
30774                 | ' 				return 0;
30774     00 FA 05 56 |  if_ne	mov	result1, #0
30778     18 00 90 5D |  if_ne	jmp	#LR__4784
3077c                 | LR__4782
3077c                 | LR__4783
3077c                 | ' 		}
3077c                 | ' 	}
3077c                 | ' 	return sign == 0xAA55 ? 2 : 3;
3077c     14 2B 32 F9 | 	getword	local03, local02, #0
30780     55 00 00 FF 
30784     55 2A 0E F2 | 	cmp	local03, ##43605 wz
30788     02 2C 06 A6 |  if_e	mov	local04, #2
3078c     03 2C 06 56 |  if_ne	mov	local04, #3
30790     16 FB 01 F6 | 	mov	result1, local04
30794                 | LR__4784
30794     A7 F0 03 F6 | 	mov	ptra, fp
30798     B2 00 A0 FD | 	call	#popregs_
3079c                 | _fatfs_cc_check_fs_ret
3079c     2D 00 64 FD | 	ret
307a0                 | 
307a0                 | _fatfs_cc_find_volume
307a0     05 4A 05 F6 | 	mov	COUNT_, #5
307a4     A8 00 A0 FD | 	call	#pushregs_
307a8     24 F0 07 F1 | 	add	ptra, #36
307ac     09 27 02 F6 | 	mov	local01, arg01
307b0     0A 29 02 F6 | 	mov	local02, arg02
307b4     13 13 02 F6 | 	mov	arg01, local01
307b8     00 14 06 F6 | 	mov	arg02, #0
307bc     08 FE BF FD | 	call	#_fatfs_cc_check_fs
307c0     02 FA 0D F2 | 	cmp	result1, #2 wz
307c4     0C 00 90 AD |  if_e	jmp	#LR__4790
307c8     03 FA 15 F2 | 	cmp	result1, #3 wc
307cc     00 28 0E C2 |  if_b	cmp	local02, #0 wz
307d0     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4798
307d4                 | LR__4790
307d4                 | ' 	for (i = 0; i < 4; i++) {
307d4     00 2A 06 F6 | 	mov	local03, #0
307d8     97 26 48 FB | 	callpa	#(@LR__4792-@LR__4791)>>2,fcache_load_ptr_
307dc                 | LR__4791
307dc     04 2A 16 F2 | 	cmp	local03, #4 wc
307e0     44 00 90 3D |  if_ae	jmp	#LR__4793
307e4     15 2D 02 F6 | 	mov	local04, local03
307e8     02 2C 66 F0 | 	shl	local04, #2
307ec     14 4E 05 F1 | 	add	fp, #20
307f0     A7 2C 02 F1 | 	add	local04, fp
307f4     34 26 06 F1 | 	add	local01, #52
307f8     13 13 02 F6 | 	mov	arg01, local01
307fc     34 26 86 F1 | 	sub	local01, #52
30800     BE 13 06 F1 | 	add	arg01, #446
30804     15 15 02 F6 | 	mov	arg02, local03
30808     04 14 66 F0 | 	shl	arg02, #4
3080c     0A 13 02 F1 | 	add	arg01, arg02
30810     08 12 06 F1 | 	add	arg01, #8
30814                 | ' {
30814                 | ' 
30814                 | ' 	return *((DWORD*)ptr);
30814     09 FB 01 FB | 	rdlong	result1, arg01
30818     14 4E 85 F1 | 	sub	fp, #20
3081c     16 FB 61 FC | 	wrlong	result1, local04
30820     01 2A 06 F1 | 	add	local03, #1
30824     B4 FF 9F FD | 	jmp	#LR__4791
30828                 | LR__4792
30828                 | LR__4793
30828     00 28 0E F2 | 	cmp	local02, #0 wz
3082c     14 2D 02 56 |  if_ne	mov	local04, local02
30830     01 2C 86 51 |  if_ne	sub	local04, #1
30834     00 2C 06 A6 |  if_e	mov	local04, #0
30838     16 2B 02 F6 | 	mov	local03, local04
3083c                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
3083c                 | ' 	}
3083c                 | ' 	i = part ? part - 1 : 0;
3083c                 | ' 	do {
3083c                 | LR__4794
3083c     15 2D 02 F6 | 	mov	local04, local03
30840     02 2C 66 F0 | 	shl	local04, #2
30844     14 4E 05 F1 | 	add	fp, #20
30848     A7 2C 02 F1 | 	add	local04, fp
3084c     16 2D 0A FB | 	rdlong	local04, local04 wz
30850     14 4E 85 F1 | 	sub	fp, #20
30854     28 00 90 AD |  if_e	jmp	#LR__4795
30858     15 2D 02 F6 | 	mov	local04, local03
3085c     02 2C 66 F0 | 	shl	local04, #2
30860     14 4E 05 F1 | 	add	fp, #20
30864     A7 2C 02 F1 | 	add	local04, fp
30868     16 15 02 FB | 	rdlong	arg02, local04
3086c     13 13 02 F6 | 	mov	arg01, local01
30870     14 4E 85 F1 | 	sub	fp, #20
30874     50 FD BF FD | 	call	#_fatfs_cc_check_fs
30878     FD 2C 02 F6 | 	mov	local04, result1
3087c     04 00 90 FD | 	jmp	#LR__4796
30880                 | LR__4795
30880     03 2C 06 F6 | 	mov	local04, #3
30884                 | LR__4796
30884     16 2F 02 F6 | 	mov	local05, local04
30888     00 28 0E F2 | 	cmp	local02, #0 wz
3088c     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
30890     0C 00 90 8D |  if_c_and_z	jmp	#LR__4797
30894     01 2A 06 A1 |  if_e	add	local03, #1
30898     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
3089c     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4794
308a0                 | LR__4797
308a0                 | ' 	return fmt;
308a0     17 FB 01 F6 | 	mov	result1, local05
308a4                 | LR__4798
308a4     A7 F0 03 F6 | 	mov	ptra, fp
308a8     B2 00 A0 FD | 	call	#popregs_
308ac                 | _fatfs_cc_find_volume_ret
308ac     2D 00 64 FD | 	ret
308b0                 | 
308b0                 | _fatfs_cc_mount_volume
308b0     0B 4A 05 F6 | 	mov	COUNT_, #11
308b4     A8 00 A0 FD | 	call	#pushregs_
308b8     0A 27 02 F6 | 	mov	local01, arg02
308bc     0B 29 02 F6 | 	mov	local02, arg03
308c0     13 01 68 FC | 	wrlong	#0, local01
308c4     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
308c8     FD 2A 02 F6 | 	mov	local03, result1
308cc     00 2A 56 F2 | 	cmps	local03, #0 wc
308d0     0B FA 05 C6 |  if_b	mov	result1, #11
308d4     3C 05 90 CD |  if_b	jmp	#LR__4810
308d8     15 17 02 F6 | 	mov	arg03, local03
308dc     02 16 66 F0 | 	shl	arg03, #2
308e0     F2 16 02 F1 | 	add	arg03, objptr
308e4     0B 2D 0A FB | 	rdlong	local04, arg03 wz
308e8     0C FA 05 A6 |  if_e	mov	result1, #12
308ec     24 05 90 AD |  if_e	jmp	#LR__4810
308f0     13 2D 62 FC | 	wrlong	local04, local01
308f4     14 29 E2 F8 | 	getbyte	local02, local02, #0
308f8     FE 28 06 F5 | 	and	local02, #254
308fc     16 17 CA FA | 	rdbyte	arg03, local04 wz
30900     4C 00 90 AD |  if_e	jmp	#LR__4801
30904     01 2C 06 F1 | 	add	local04, #1
30908     16 13 CA FA | 	rdbyte	arg01, local04 wz
3090c     01 2C 86 F1 | 	sub	local04, #1
30910     01 FA 05 56 |  if_ne	mov	result1, #1
30914                 | ' 
30914                 | ' 	return Stat;
30914     01 00 00 AF 
30918     20 E4 05 A1 |  if_e	add	objptr, ##544
3091c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
30920     01 00 00 AF 
30924     20 E4 85 A1 |  if_e	sub	objptr, ##544
30928     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
3092c     01 16 CE F7 | 	test	arg03, #1 wz
30930     1C 00 90 5D |  if_ne	jmp	#LR__4800
30934     00 28 0E F2 | 	cmp	local02, #0 wz
30938     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
3093c     04 FA CD 57 |  if_ne	test	result1, #4 wz
30940                 | ' 				return FR_WRITE_PROTECTED;
30940     0A FA 05 56 |  if_ne	mov	result1, #10
30944     CC 04 90 5D |  if_ne	jmp	#LR__4810
30948                 | ' 			}
30948                 | ' 			return FR_OK;
30948     00 FA 05 F6 | 	mov	result1, #0
3094c     C4 04 90 FD | 	jmp	#LR__4810
30950                 | LR__4800
30950                 | LR__4801
30950     16 01 48 FC | 	wrbyte	#0, local04
30954     01 2C 06 F1 | 	add	local04, #1
30958     16 2B 42 FC | 	wrbyte	local03, local04
3095c     16 13 C2 FA | 	rdbyte	arg01, local04
30960     01 2C 86 F1 | 	sub	local04, #1
30964     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
30968     FD 16 02 F6 | 	mov	arg03, result1
3096c     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
30970     01 2E CE F7 | 	test	local05, #1 wz
30974                 | ' 		return FR_NOT_READY;
30974     03 FA 05 56 |  if_ne	mov	result1, #3
30978     98 04 90 5D |  if_ne	jmp	#LR__4810
3097c     00 28 0E F2 | 	cmp	local02, #0 wz
30980     0B 2F 02 56 |  if_ne	mov	local05, arg03
30984     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
30988     04 2E CE 57 |  if_ne	test	local05, #4 wz
3098c                 | ' 		return FR_WRITE_PROTECTED;
3098c     0A FA 05 56 |  if_ne	mov	result1, #10
30990     80 04 90 5D |  if_ne	jmp	#LR__4810
30994     16 13 02 F6 | 	mov	arg01, local04
30998     00 14 06 F6 | 	mov	arg02, #0
3099c     00 FE BF FD | 	call	#_fatfs_cc_find_volume
309a0     FD 12 02 F6 | 	mov	arg01, result1
309a4     04 12 0E F2 | 	cmp	arg01, #4 wz
309a8     01 FA 05 A6 |  if_e	mov	result1, #1
309ac     64 04 90 AD |  if_e	jmp	#LR__4810
309b0     02 12 16 F2 | 	cmp	arg01, #2 wc
309b4     0D FA 05 36 |  if_ae	mov	result1, #13
309b8     58 04 90 3D |  if_ae	jmp	#LR__4810
309bc     30 2C 06 F1 | 	add	local04, #48
309c0     16 31 02 FB | 	rdlong	local06, local04
309c4     04 2C 06 F1 | 	add	local04, #4
309c8     16 13 02 F6 | 	mov	arg01, local04
309cc     34 2C 86 F1 | 	sub	local04, #52
309d0     0B 12 06 F1 | 	add	arg01, #11
309d4                 | ' {
309d4                 | ' 
309d4                 | ' 	return *((WORD*)ptr);
309d4     09 FB E1 FA | 	rdword	result1, arg01
309d8     01 00 00 FF 
309dc     00 FA 0D F2 | 	cmp	result1, ##512 wz
309e0     0D FA 05 56 |  if_ne	mov	result1, #13
309e4     2C 04 90 5D |  if_ne	jmp	#LR__4810
309e8     34 2C 06 F1 | 	add	local04, #52
309ec     16 13 02 F6 | 	mov	arg01, local04
309f0     34 2C 86 F1 | 	sub	local04, #52
309f4     16 12 06 F1 | 	add	arg01, #22
309f8                 | ' {
309f8                 | ' 
309f8                 | ' 	return *((WORD*)ptr);
309f8     09 FB E1 FA | 	rdword	result1, arg01
309fc     FD 32 0A F6 | 	mov	local07, result1 wz
30a00     18 00 90 5D |  if_ne	jmp	#LR__4802
30a04     34 2C 06 F1 | 	add	local04, #52
30a08     16 13 02 F6 | 	mov	arg01, local04
30a0c     34 2C 86 F1 | 	sub	local04, #52
30a10     24 12 06 F1 | 	add	arg01, #36
30a14                 | ' {
30a14                 | ' 
30a14                 | ' 	return *((DWORD*)ptr);
30a14     09 FB 01 FB | 	rdlong	result1, arg01
30a18     FD 32 02 F6 | 	mov	local07, result1
30a1c                 | LR__4802
30a1c     1C 2C 06 F1 | 	add	local04, #28
30a20     16 33 62 FC | 	wrlong	local07, local04
30a24     28 2C 06 F1 | 	add	local04, #40
30a28     16 2F C2 FA | 	rdbyte	local05, local04
30a2c     42 2C 86 F1 | 	sub	local04, #66
30a30     16 2F 42 FC | 	wrbyte	local05, local04
30a34     16 2F C2 FA | 	rdbyte	local05, local04
30a38     02 2C 86 F1 | 	sub	local04, #2
30a3c     01 2E 0E F2 | 	cmp	local05, #1 wz
30a40     02 2C 06 51 |  if_ne	add	local04, #2
30a44     16 2F C2 5A |  if_ne	rdbyte	local05, local04
30a48     02 2C 86 51 |  if_ne	sub	local04, #2
30a4c     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
30a50     0D FA 05 56 |  if_ne	mov	result1, #13
30a54     BC 03 90 5D |  if_ne	jmp	#LR__4810
30a58     02 2C 06 F1 | 	add	local04, #2
30a5c     16 2F C2 FA | 	rdbyte	local05, local04
30a60     17 33 02 FD | 	qmul	local07, local05
30a64     3F 2C 06 F1 | 	add	local04, #63
30a68     16 2F C2 FA | 	rdbyte	local05, local04
30a6c     37 2C 86 F1 | 	sub	local04, #55
30a70     16 2F 52 FC | 	wrword	local05, local04
30a74     16 2F EA FA | 	rdword	local05, local04 wz
30a78     0A 2C 86 F1 | 	sub	local04, #10
30a7c     18 32 62 FD | 	getqx	local07
30a80     20 00 90 AD |  if_e	jmp	#LR__4803
30a84     0A 2C 06 F1 | 	add	local04, #10
30a88     16 2F E2 FA | 	rdword	local05, local04
30a8c     17 2B 32 F9 | 	getword	local03, local05, #0
30a90     0A 2C 86 F1 | 	sub	local04, #10
30a94     17 2F 32 F9 | 	getword	local05, local05, #0
30a98     01 2E 86 F1 | 	sub	local05, #1
30a9c     17 2B CA F7 | 	test	local03, local05 wz
30aa0     08 00 90 AD |  if_e	jmp	#LR__4804
30aa4                 | LR__4803
30aa4     0D FA 05 F6 | 	mov	result1, #13
30aa8     68 03 90 FD | 	jmp	#LR__4810
30aac                 | LR__4804
30aac     34 2C 06 F1 | 	add	local04, #52
30ab0     16 13 02 F6 | 	mov	arg01, local04
30ab4     11 12 06 F1 | 	add	arg01, #17
30ab8                 | ' {
30ab8                 | ' 
30ab8                 | ' 	return *((WORD*)ptr);
30ab8     09 FB E1 FA | 	rdword	result1, arg01
30abc     2C 2C 86 F1 | 	sub	local04, #44
30ac0     16 FB 51 FC | 	wrword	result1, local04
30ac4     16 2F E2 FA | 	rdword	local05, local04
30ac8     08 2C 86 F1 | 	sub	local04, #8
30acc     17 13 52 F6 | 	abs	arg01, local05 wc
30ad0     09 13 42 F8 | 	getnib	arg01, arg01, #0
30ad4     09 13 8A F6 | 	negc	arg01, arg01 wz
30ad8     0D FA 05 56 |  if_ne	mov	result1, #13
30adc     34 03 90 5D |  if_ne	jmp	#LR__4810
30ae0     34 2C 06 F1 | 	add	local04, #52
30ae4     16 13 02 F6 | 	mov	arg01, local04
30ae8     34 2C 86 F1 | 	sub	local04, #52
30aec     13 12 06 F1 | 	add	arg01, #19
30af0                 | ' {
30af0                 | ' 
30af0                 | ' 	return *((WORD*)ptr);
30af0     09 FB E1 FA | 	rdword	result1, arg01
30af4     FD 34 0A F6 | 	mov	local08, result1 wz
30af8     34 2C 06 A1 |  if_e	add	local04, #52
30afc     16 13 02 A6 |  if_e	mov	arg01, local04
30b00     34 2C 86 A1 |  if_e	sub	local04, #52
30b04     20 12 06 A1 |  if_e	add	arg01, #32
30b08                 | ' {
30b08                 | ' 
30b08                 | ' 	return *((DWORD*)ptr);
30b08     09 35 02 AB |  if_e	rdlong	local08, arg01
30b0c     34 2C 06 F1 | 	add	local04, #52
30b10     16 13 02 F6 | 	mov	arg01, local04
30b14     34 2C 86 F1 | 	sub	local04, #52
30b18     0E 12 06 F1 | 	add	arg01, #14
30b1c                 | ' {
30b1c                 | ' 
30b1c                 | ' 	return *((WORD*)ptr);
30b1c     09 FB E1 FA | 	rdword	result1, arg01
30b20     FD 12 02 F6 | 	mov	arg01, result1
30b24     09 2F 02 F6 | 	mov	local05, arg01
30b28     0F 2E 4E F7 | 	zerox	local05, #15 wz
30b2c     0D FA 05 A6 |  if_e	mov	result1, #13
30b30     E0 02 90 AD |  if_e	jmp	#LR__4810
30b34     09 37 32 F9 | 	getword	local09, arg01, #0
30b38     19 37 02 F1 | 	add	local09, local07
30b3c     08 2C 06 F1 | 	add	local04, #8
30b40     16 2F E2 FA | 	rdword	local05, local04
30b44     08 2C 86 F1 | 	sub	local04, #8
30b48     17 2F 52 F6 | 	abs	local05, local05 wc
30b4c     04 2E 46 F0 | 	shr	local05, #4
30b50     17 37 82 F3 | 	sumc	local09, local05
30b54     1B 35 12 F2 | 	cmp	local08, local09 wc
30b58     0D FA 05 C6 |  if_b	mov	result1, #13
30b5c     B4 02 90 CD |  if_b	jmp	#LR__4810
30b60     1B 35 82 F1 | 	sub	local08, local09
30b64     0A 2C 06 F1 | 	add	local04, #10
30b68     16 2F E2 FA | 	rdword	local05, local04
30b6c     17 35 12 FD | 	qdiv	local08, local05
30b70     0A 2C 86 F1 | 	sub	local04, #10
30b74     18 2E 62 FD | 	getqx	local05
30b78     00 2E 0E F2 | 	cmp	local05, #0 wz
30b7c     0D FA 05 A6 |  if_e	mov	result1, #13
30b80     90 02 90 AD |  if_e	jmp	#LR__4810
30b84     00 38 06 F6 | 	mov	local10, #0
30b88     FF FF 07 FF 
30b8c     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
30b90     03 38 06 C6 |  if_b	mov	local10, #3
30b94     7F 00 00 FF 
30b98     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
30b9c     02 38 06 C6 |  if_b	mov	local10, #2
30ba0     07 00 00 FF 
30ba4     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
30ba8     01 38 06 C6 |  if_b	mov	local10, #1
30bac     00 38 0E F2 | 	cmp	local10, #0 wz
30bb0     0D FA 05 A6 |  if_e	mov	result1, #13
30bb4     5C 02 90 AD |  if_e	jmp	#LR__4810
30bb8     02 2E 06 F1 | 	add	local05, #2
30bbc     18 2C 06 F1 | 	add	local04, #24
30bc0     16 2F 62 FC | 	wrlong	local05, local04
30bc4     08 2C 06 F1 | 	add	local04, #8
30bc8     16 31 62 FC | 	wrlong	local06, local04
30bcc     18 2F 02 F6 | 	mov	local05, local06
30bd0     09 13 32 F9 | 	getword	arg01, arg01, #0
30bd4     09 2F 02 F1 | 	add	local05, arg01
30bd8     04 2C 06 F1 | 	add	local04, #4
30bdc     16 2F 62 FC | 	wrlong	local05, local04
30be0     18 2F 02 F6 | 	mov	local05, local06
30be4     1B 2F 02 F1 | 	add	local05, local09
30be8     08 2C 06 F1 | 	add	local04, #8
30bec     16 2F 62 FC | 	wrlong	local05, local04
30bf0     2C 2C 86 F1 | 	sub	local04, #44
30bf4     03 38 0E F2 | 	cmp	local10, #3 wz
30bf8     5C 00 90 5D |  if_ne	jmp	#LR__4805
30bfc     34 2C 06 F1 | 	add	local04, #52
30c00     16 13 02 F6 | 	mov	arg01, local04
30c04     34 2C 86 F1 | 	sub	local04, #52
30c08     2A 12 06 F1 | 	add	arg01, #42
30c0c                 | ' {
30c0c                 | ' 
30c0c                 | ' 	return *((WORD*)ptr);
30c0c     09 FB E9 FA | 	rdword	result1, arg01 wz
30c10     0D FA 05 56 |  if_ne	mov	result1, #13
30c14     FC 01 90 5D |  if_ne	jmp	#LR__4810
30c18     08 2C 06 F1 | 	add	local04, #8
30c1c     16 2F EA FA | 	rdword	local05, local04 wz
30c20     08 2C 86 F1 | 	sub	local04, #8
30c24     0D FA 05 56 |  if_ne	mov	result1, #13
30c28     E8 01 90 5D |  if_ne	jmp	#LR__4810
30c2c     34 2C 06 F1 | 	add	local04, #52
30c30     16 13 02 F6 | 	mov	arg01, local04
30c34     2C 12 06 F1 | 	add	arg01, #44
30c38                 | ' {
30c38                 | ' 
30c38                 | ' 	return *((DWORD*)ptr);
30c38     09 FB 01 FB | 	rdlong	result1, arg01
30c3c     0C 2C 86 F1 | 	sub	local04, #12
30c40     16 FB 61 FC | 	wrlong	result1, local04
30c44     10 2C 86 F1 | 	sub	local04, #16
30c48     16 3B 02 FB | 	rdlong	local11, local04
30c4c     18 2C 86 F1 | 	sub	local04, #24
30c50     02 3A 66 F0 | 	shl	local11, #2
30c54     6C 00 90 FD | 	jmp	#LR__4807
30c58                 | LR__4805
30c58     08 2C 06 F1 | 	add	local04, #8
30c5c     16 2F EA FA | 	rdword	local05, local04 wz
30c60     08 2C 86 F1 | 	sub	local04, #8
30c64     0D FA 05 A6 |  if_e	mov	result1, #13
30c68     A8 01 90 AD |  if_e	jmp	#LR__4810
30c6c     24 2C 06 F1 | 	add	local04, #36
30c70     16 2F 02 FB | 	rdlong	local05, local04
30c74     19 2F 02 F1 | 	add	local05, local07
30c78     04 2C 06 F1 | 	add	local04, #4
30c7c     16 2F 62 FC | 	wrlong	local05, local04
30c80     28 2C 86 F1 | 	sub	local04, #40
30c84     02 38 0E F2 | 	cmp	local10, #2 wz
30c88     18 2C 06 A1 |  if_e	add	local04, #24
30c8c     16 2F 02 AB |  if_e	rdlong	local05, local04
30c90     18 2C 86 A1 |  if_e	sub	local04, #24
30c94     01 2E 66 A0 |  if_e	shl	local05, #1
30c98     24 00 90 AD |  if_e	jmp	#LR__4806
30c9c     18 2C 06 F1 | 	add	local04, #24
30ca0     16 3B 02 FB | 	rdlong	local11, local04
30ca4     1D 2F 02 F6 | 	mov	local05, local11
30ca8     01 2E 66 F0 | 	shl	local05, #1
30cac     1D 2F 02 F1 | 	add	local05, local11
30cb0     01 2E 46 F0 | 	shr	local05, #1
30cb4     18 2C 86 F1 | 	sub	local04, #24
30cb8     01 3A 06 F5 | 	and	local11, #1
30cbc     1D 2F 02 F1 | 	add	local05, local11
30cc0                 | LR__4806
30cc0     17 3B 02 F6 | 	mov	local11, local05
30cc4                 | LR__4807
30cc4     FF 3B 06 F1 | 	add	local11, #511
30cc8     09 3A 46 F0 | 	shr	local11, #9
30ccc     1C 2C 06 F1 | 	add	local04, #28
30cd0     16 17 02 FB | 	rdlong	arg03, local04
30cd4     1C 2C 86 F1 | 	sub	local04, #28
30cd8     1D 17 12 F2 | 	cmp	arg03, local11 wc
30cdc     0D FA 05 C6 |  if_b	mov	result1, #13
30ce0     30 01 90 CD |  if_b	jmp	#LR__4810
30ce4     14 2C 06 F1 | 	add	local04, #20
30ce8     FF FF FF FF 
30cec     16 FF 6B FC | 	wrlong	##-1, local04
30cf0     04 2C 86 F1 | 	sub	local04, #4
30cf4     FF FF FF FF 
30cf8     16 FF 6B FC | 	wrlong	##-1, local04
30cfc     0C 2C 86 F1 | 	sub	local04, #12
30d00     16 01 49 FC | 	wrbyte	#128, local04
30d04     04 2C 86 F1 | 	sub	local04, #4
30d08     03 38 0E F2 | 	cmp	local10, #3 wz
30d0c     D0 00 90 5D |  if_ne	jmp	#LR__4809
30d10     34 2C 06 F1 | 	add	local04, #52
30d14     16 13 02 F6 | 	mov	arg01, local04
30d18     34 2C 86 F1 | 	sub	local04, #52
30d1c     30 12 06 F1 | 	add	arg01, #48
30d20                 | ' {
30d20                 | ' 
30d20                 | ' 	return *((WORD*)ptr);
30d20     09 FB E1 FA | 	rdword	result1, arg01
30d24     FD 2E 32 F9 | 	getword	local05, result1, #0
30d28     01 2E 0E F2 | 	cmp	local05, #1 wz
30d2c     B0 00 90 5D |  if_ne	jmp	#LR__4809
30d30     01 30 06 F1 | 	add	local06, #1
30d34     16 13 02 F6 | 	mov	arg01, local04
30d38     18 15 02 F6 | 	mov	arg02, local06
30d3c     CC CD BF FD | 	call	#_fatfs_cc_move_window
30d40     00 FA 0D F2 | 	cmp	result1, #0 wz
30d44     98 00 90 5D |  if_ne	jmp	#LR__4809
30d48     04 2C 06 F1 | 	add	local04, #4
30d4c     16 01 48 FC | 	wrbyte	#0, local04
30d50     30 2C 06 F1 | 	add	local04, #48
30d54     16 13 02 F6 | 	mov	arg01, local04
30d58     34 2C 86 F1 | 	sub	local04, #52
30d5c     FE 13 06 F1 | 	add	arg01, #510
30d60                 | ' {
30d60                 | ' 
30d60                 | ' 	return *((WORD*)ptr);
30d60     09 FB E1 FA | 	rdword	result1, arg01
30d64     FD 2E 32 F9 | 	getword	local05, result1, #0
30d68     55 00 00 FF 
30d6c     55 2E 0E F2 | 	cmp	local05, ##43605 wz
30d70     34 2C 06 A1 |  if_e	add	local04, #52
30d74     16 13 02 A6 |  if_e	mov	arg01, local04
30d78     34 2C 86 A1 |  if_e	sub	local04, #52
30d7c                 | ' {
30d7c                 | ' 
30d7c                 | ' 	return *((DWORD*)ptr);
30d7c     09 FB 01 AB |  if_e	rdlong	result1, arg01
30d80     A9 B0 20 AF 
30d84     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
30d88     54 00 90 5D |  if_ne	jmp	#LR__4808
30d8c     34 2C 06 F1 | 	add	local04, #52
30d90     16 13 02 F6 | 	mov	arg01, local04
30d94     34 2C 86 F1 | 	sub	local04, #52
30d98     E4 13 06 F1 | 	add	arg01, #484
30d9c                 | ' {
30d9c                 | ' 
30d9c                 | ' 	return *((DWORD*)ptr);
30d9c     09 FB 01 FB | 	rdlong	result1, arg01
30da0     B9 A0 30 FF 
30da4     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
30da8     34 00 90 5D |  if_ne	jmp	#LR__4808
30dac     34 2C 06 F1 | 	add	local04, #52
30db0     16 13 02 F6 | 	mov	arg01, local04
30db4     E8 13 06 F1 | 	add	arg01, #488
30db8                 | ' {
30db8                 | ' 
30db8                 | ' 	return *((DWORD*)ptr);
30db8     09 FB 01 FB | 	rdlong	result1, arg01
30dbc     20 2C 86 F1 | 	sub	local04, #32
30dc0     16 FB 61 FC | 	wrlong	result1, local04
30dc4     20 2C 06 F1 | 	add	local04, #32
30dc8     16 13 02 F6 | 	mov	arg01, local04
30dcc     EC 13 06 F1 | 	add	arg01, #492
30dd0                 | ' {
30dd0                 | ' 
30dd0                 | ' 	return *((DWORD*)ptr);
30dd0     09 FB 01 FB | 	rdlong	result1, arg01
30dd4     24 2C 86 F1 | 	sub	local04, #36
30dd8     16 FB 61 FC | 	wrlong	result1, local04
30ddc     10 2C 86 F1 | 	sub	local04, #16
30de0                 | LR__4808
30de0                 | LR__4809
30de0     16 39 42 FC | 	wrbyte	local10, local04
30de4     04 E4 05 F1 | 	add	objptr, #4
30de8     F2 2E E2 FA | 	rdword	local05, objptr
30dec     01 2E 06 F1 | 	add	local05, #1
30df0     F2 2E 52 FC | 	wrword	local05, objptr
30df4     F2 3A E2 FA | 	rdword	local11, objptr
30df8     06 2C 06 F1 | 	add	local04, #6
30dfc     16 3B 52 FC | 	wrword	local11, local04
30e00     04 E4 05 F1 | 	add	objptr, #4
30e04     06 2C 06 F1 | 	add	local04, #6
30e08     16 E5 61 FC | 	wrlong	objptr, local04
30e0c                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
30e0c                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
30e0c                 | ' 			{
30e0c                 | ' 
30e0c                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
30e0c                 | ' 
30e0c                 | ' 
30e0c                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
30e0c                 | ' 
30e0c                 | ' 			}
30e0c                 | ' 		}
30e0c                 | ' 
30e0c                 | ' 
30e0c                 | ' 	}
30e0c                 | ' 
30e0c                 | ' 	fs->fs_type = (BYTE)fmt;
30e0c                 | ' 	fs->id = ++Fsid;
30e0c                 | ' 
30e0c                 | ' 	fs->lfnbuf = LfnBuf;
30e0c                 | ' #line 3567 "ff.c"
30e0c                 | ' 	return FR_OK;
30e0c     00 FA 05 F6 | 	mov	result1, #0
30e10     08 E4 85 F1 | 	sub	objptr, #8
30e14                 | LR__4810
30e14     A7 F0 03 F6 | 	mov	ptra, fp
30e18     B2 00 A0 FD | 	call	#popregs_
30e1c                 | _fatfs_cc_mount_volume_ret
30e1c     2D 00 64 FD | 	ret
30e20                 | 
30e20                 | _fatfs_cc_validate
30e20     09 01 0A F6 | 	mov	_var01, arg01 wz
30e24     09 02 06 F6 | 	mov	_var02, #9
30e28     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
30e2c     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
30e30     50 00 90 AD |  if_e	jmp	#LR__4820
30e34     04 00 06 F1 | 	add	_var01, #4
30e38     00 07 E2 FA | 	rdword	_var04, _var01
30e3c     04 00 86 F1 | 	sub	_var01, #4
30e40     00 13 02 FB | 	rdlong	arg01, _var01
30e44     06 12 06 F1 | 	add	arg01, #6
30e48     09 FB E1 FA | 	rdword	result1, arg01
30e4c     FD 06 0A F2 | 	cmp	_var04, result1 wz
30e50     30 00 90 5D |  if_ne	jmp	#LR__4820
30e54     00 07 02 FB | 	rdlong	_var04, _var01
30e58     01 06 06 F1 | 	add	_var04, #1
30e5c     03 13 CA FA | 	rdbyte	arg01, _var04 wz
30e60     01 FA 05 56 |  if_ne	mov	result1, #1
30e64                 | ' 
30e64                 | ' 	return Stat;
30e64     01 00 00 AF 
30e68     20 E4 05 A1 |  if_e	add	objptr, ##544
30e6c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
30e70     01 00 00 AF 
30e74     20 E4 85 A1 |  if_e	sub	objptr, ##544
30e78     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
30e7c     01 04 CE F7 | 	test	_var03, #1 wz
30e80     00 02 06 A6 |  if_e	mov	_var02, #0
30e84                 | LR__4820
30e84     00 02 0E F2 | 	cmp	_var02, #0 wz
30e88     00 05 02 AB |  if_e	rdlong	_var03, _var01
30e8c     00 04 06 56 |  if_ne	mov	_var03, #0
30e90     0A 05 62 FC | 	wrlong	_var03, arg02
30e94                 | ' 			res = FR_OK;
30e94                 | ' 		}
30e94                 | ' 
30e94                 | ' 	}
30e94                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
30e94                 | ' 	return res;
30e94     01 FB 01 F6 | 	mov	result1, _var02
30e98                 | _fatfs_cc_validate_ret
30e98     2D 00 64 FD | 	ret
30e9c                 | 
30e9c                 | _fatfs_cc_f_mount
30e9c     01 4A 05 F6 | 	mov	COUNT_, #1
30ea0     A8 00 A0 FD | 	call	#pushregs_
30ea4     20 F0 07 F1 | 	add	ptra, #32
30ea8     04 4E 05 F1 | 	add	fp, #4
30eac     A7 12 62 FC | 	wrlong	arg01, fp
30eb0     04 4E 05 F1 | 	add	fp, #4
30eb4     A7 14 62 FC | 	wrlong	arg02, fp
30eb8     04 4E 05 F1 | 	add	fp, #4
30ebc     A7 16 42 FC | 	wrbyte	arg03, fp
30ec0     04 4E 85 F1 | 	sub	fp, #4
30ec4     A7 16 02 FB | 	rdlong	arg03, fp
30ec8     14 4E 05 F1 | 	add	fp, #20
30ecc     A7 16 62 FC | 	wrlong	arg03, fp
30ed0     A7 12 02 F6 | 	mov	arg01, fp
30ed4     1C 4E 85 F1 | 	sub	fp, #28
30ed8     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
30edc     14 4E 05 F1 | 	add	fp, #20
30ee0     A7 FA 61 FC | 	wrlong	result1, fp
30ee4     14 4E 85 F1 | 	sub	fp, #20
30ee8     00 FA 55 F2 | 	cmps	result1, #0 wc
30eec     0B FA 05 C6 |  if_b	mov	result1, #11
30ef0     C0 00 90 CD |  if_b	jmp	#LR__4831
30ef4     14 4E 05 F1 | 	add	fp, #20
30ef8     A7 16 02 FB | 	rdlong	arg03, fp
30efc     02 16 66 F0 | 	shl	arg03, #2
30f00     F2 16 02 F1 | 	add	arg03, objptr
30f04     0B 17 0A FB | 	rdlong	arg03, arg03 wz
30f08     04 4E 85 F1 | 	sub	fp, #4
30f0c     A7 16 62 FC | 	wrlong	arg03, fp
30f10     10 4E 85 F1 | 	sub	fp, #16
30f14     28 00 90 AD |  if_e	jmp	#LR__4830
30f18     10 4E 05 F1 | 	add	fp, #16
30f1c     A7 16 02 FB | 	rdlong	arg03, fp
30f20     10 4E 85 F1 | 	sub	fp, #16
30f24     01 16 06 F1 | 	add	arg03, #1
30f28     0B 13 C2 FA | 	rdbyte	arg01, arg03
30f2c     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
30f30     10 4E 05 F1 | 	add	fp, #16
30f34     A7 16 02 FB | 	rdlong	arg03, fp
30f38     10 4E 85 F1 | 	sub	fp, #16
30f3c     0B 01 48 FC | 	wrbyte	#0, arg03
30f40                 | LR__4830
30f40     04 4E 05 F1 | 	add	fp, #4
30f44     A7 26 0A FB | 	rdlong	local01, fp wz
30f48     04 4E 85 F1 | 	sub	fp, #4
30f4c     04 4E 05 51 |  if_ne	add	fp, #4
30f50     A7 26 02 5B |  if_ne	rdlong	local01, fp
30f54     04 4E 85 51 |  if_ne	sub	fp, #4
30f58     13 01 48 5C |  if_ne	wrbyte	#0, local01
30f5c     14 4E 05 F1 | 	add	fp, #20
30f60     A7 26 02 FB | 	rdlong	local01, fp
30f64     02 26 66 F0 | 	shl	local01, #2
30f68     F2 26 02 F1 | 	add	local01, objptr
30f6c     10 4E 85 F1 | 	sub	fp, #16
30f70     A7 16 02 FB | 	rdlong	arg03, fp
30f74     13 17 62 FC | 	wrlong	arg03, local01
30f78     08 4E 05 F1 | 	add	fp, #8
30f7c     A7 26 CA FA | 	rdbyte	local01, fp wz
30f80     0C 4E 85 F1 | 	sub	fp, #12
30f84     00 FA 05 A6 |  if_e	mov	result1, #0
30f88     28 00 90 AD |  if_e	jmp	#LR__4831
30f8c     08 4E 05 F1 | 	add	fp, #8
30f90     A7 12 02 F6 | 	mov	arg01, fp
30f94     04 4E 85 F1 | 	sub	fp, #4
30f98     A7 14 02 F6 | 	mov	arg02, fp
30f9c     04 4E 85 F1 | 	sub	fp, #4
30fa0     00 16 06 F6 | 	mov	arg03, #0
30fa4     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
30fa8     18 4E 05 F1 | 	add	fp, #24
30fac     A7 FA 61 FC | 	wrlong	result1, fp
30fb0                 | ' 
30fb0                 | ' 	res = mount_volume(&path, &fs, 0);
30fb0                 | ' 	return res ;
30fb0     18 4E 85 F1 | 	sub	fp, #24
30fb4                 | LR__4831
30fb4     A7 F0 03 F6 | 	mov	ptra, fp
30fb8     B2 00 A0 FD | 	call	#popregs_
30fbc                 | _fatfs_cc_f_mount_ret
30fbc     2D 00 64 FD | 	ret
30fc0                 | 
30fc0                 | _fatfs_cc_f_open
30fc0     02 4A 05 F6 | 	mov	COUNT_, #2
30fc4     A8 00 A0 FD | 	call	#pushregs_
30fc8     60 F0 07 F1 | 	add	ptra, #96
30fcc     04 4E 05 F1 | 	add	fp, #4
30fd0     A7 12 62 FC | 	wrlong	arg01, fp
30fd4     04 4E 05 F1 | 	add	fp, #4
30fd8     A7 14 62 FC | 	wrlong	arg02, fp
30fdc     04 4E 05 F1 | 	add	fp, #4
30fe0     A7 16 42 FC | 	wrbyte	arg03, fp
30fe4     08 4E 85 F1 | 	sub	fp, #8
30fe8     A7 18 0A FB | 	rdlong	arg04, fp wz
30fec     04 4E 85 F1 | 	sub	fp, #4
30ff0     09 FA 05 A6 |  if_e	mov	result1, #9
30ff4     98 06 90 AD |  if_e	jmp	#LR__4857
30ff8     0C 4E 05 F1 | 	add	fp, #12
30ffc     A7 18 C2 FA | 	rdbyte	arg04, fp
31000     3F 18 06 F5 | 	and	arg04, #63
31004     A7 18 42 FC | 	wrbyte	arg04, fp
31008     04 4E 85 F1 | 	sub	fp, #4
3100c     A7 12 02 F6 | 	mov	arg01, fp
31010     3C 4E 05 F1 | 	add	fp, #60
31014     A7 14 02 F6 | 	mov	arg02, fp
31018     38 4E 85 F1 | 	sub	fp, #56
3101c     A7 16 C2 FA | 	rdbyte	arg03, fp
31020     0C 4E 85 F1 | 	sub	fp, #12
31024     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
31028     10 4E 05 F1 | 	add	fp, #16
3102c     A7 FA 61 FC | 	wrlong	result1, fp
31030     10 4E 85 F1 | 	sub	fp, #16
31034     00 FA 0D F2 | 	cmp	result1, #0 wz
31038     2C 06 90 5D |  if_ne	jmp	#LR__4856
3103c     44 4E 05 F1 | 	add	fp, #68
31040     A7 18 02 FB | 	rdlong	arg04, fp
31044     30 4E 85 F1 | 	sub	fp, #48
31048     A7 18 62 FC | 	wrlong	arg04, fp
3104c     A7 12 02 F6 | 	mov	arg01, fp
31050     0C 4E 85 F1 | 	sub	fp, #12
31054     A7 26 02 FB | 	rdlong	local01, fp
31058     08 4E 85 F1 | 	sub	fp, #8
3105c     13 15 02 F6 | 	mov	arg02, local01
31060     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
31064     10 4E 05 F1 | 	add	fp, #16
31068     A7 FA 61 FC | 	wrlong	result1, fp
3106c     10 4E 85 F1 | 	sub	fp, #16
31070     00 FA 0D F2 | 	cmp	result1, #0 wz
31074     1C 00 90 5D |  if_ne	jmp	#LR__4840
31078     3F 4E 05 F1 | 	add	fp, #63
3107c     A7 18 C2 FA | 	rdbyte	arg04, fp
31080     3F 4E 85 F1 | 	sub	fp, #63
31084     80 18 CE F7 | 	test	arg04, #128 wz
31088     10 4E 05 51 |  if_ne	add	fp, #16
3108c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
31090     10 4E 85 51 |  if_ne	sub	fp, #16
31094                 | LR__4840
31094     0C 4E 05 F1 | 	add	fp, #12
31098     A7 18 C2 FA | 	rdbyte	arg04, fp
3109c     0C 4E 85 F1 | 	sub	fp, #12
310a0     1C 18 CE F7 | 	test	arg04, #28 wz
310a4     F0 01 90 AD |  if_e	jmp	#LR__4845
310a8     10 4E 05 F1 | 	add	fp, #16
310ac     A7 26 0A FB | 	rdlong	local01, fp wz
310b0     10 4E 85 F1 | 	sub	fp, #16
310b4     48 00 90 AD |  if_e	jmp	#LR__4842
310b8     10 4E 05 F1 | 	add	fp, #16
310bc     A7 18 02 FB | 	rdlong	arg04, fp
310c0     10 4E 85 F1 | 	sub	fp, #16
310c4     04 18 0E F2 | 	cmp	arg04, #4 wz
310c8     1C 00 90 5D |  if_ne	jmp	#LR__4841
310cc     14 4E 05 F1 | 	add	fp, #20
310d0     A7 12 02 F6 | 	mov	arg01, fp
310d4     14 4E 85 F1 | 	sub	fp, #20
310d8     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
310dc     10 4E 05 F1 | 	add	fp, #16
310e0     A7 FA 61 FC | 	wrlong	result1, fp
310e4     10 4E 85 F1 | 	sub	fp, #16
310e8                 | LR__4841
310e8     0C 4E 05 F1 | 	add	fp, #12
310ec     A7 26 C2 FA | 	rdbyte	local01, fp
310f0     08 26 46 F5 | 	or	local01, #8
310f4     A7 26 42 FC | 	wrbyte	local01, fp
310f8     0C 4E 85 F1 | 	sub	fp, #12
310fc     3C 00 90 FD | 	jmp	#LR__4844
31100                 | LR__4842
31100     1A 4E 05 F1 | 	add	fp, #26
31104     A7 26 C2 FA | 	rdbyte	local01, fp
31108     1A 4E 85 F1 | 	sub	fp, #26
3110c     11 26 CE F7 | 	test	local01, #17 wz
31110     10 4E 05 51 |  if_ne	add	fp, #16
31114     A7 0E 68 5C |  if_ne	wrlong	#7, fp
31118     10 4E 85 51 |  if_ne	sub	fp, #16
3111c     1C 00 90 5D |  if_ne	jmp	#LR__4843
31120     0C 4E 05 F1 | 	add	fp, #12
31124     A7 26 C2 FA | 	rdbyte	local01, fp
31128     0C 4E 85 F1 | 	sub	fp, #12
3112c     04 26 CE F7 | 	test	local01, #4 wz
31130     10 4E 05 51 |  if_ne	add	fp, #16
31134     A7 10 68 5C |  if_ne	wrlong	#8, fp
31138     10 4E 85 51 |  if_ne	sub	fp, #16
3113c                 | LR__4843
3113c                 | LR__4844
3113c     10 4E 05 F1 | 	add	fp, #16
31140     A7 26 0A FB | 	rdlong	local01, fp wz
31144     10 4E 85 F1 | 	sub	fp, #16
31148     A8 01 90 5D |  if_ne	jmp	#LR__4848
3114c     0C 4E 05 F1 | 	add	fp, #12
31150     A7 26 C2 FA | 	rdbyte	local01, fp
31154     0C 4E 85 F1 | 	sub	fp, #12
31158     08 26 CE F7 | 	test	local01, #8 wz
3115c     94 01 90 AD |  if_e	jmp	#LR__4848
31160     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
31164     54 4E 05 F1 | 	add	fp, #84
31168     A7 FA 61 FC | 	wrlong	result1, fp
3116c     24 4E 85 F1 | 	sub	fp, #36
31170     A7 12 02 FB | 	rdlong	arg01, fp
31174     0E 12 06 F1 | 	add	arg01, #14
31178     09 FB 61 FC | 	wrlong	result1, arg01
3117c     A7 12 02 FB | 	rdlong	arg01, fp
31180     16 12 06 F1 | 	add	arg01, #22
31184     24 4E 05 F1 | 	add	fp, #36
31188     A7 14 02 FB | 	rdlong	arg02, fp
3118c     09 15 62 FC | 	wrlong	arg02, arg01
31190     10 4E 85 F1 | 	sub	fp, #16
31194     A7 12 02 FB | 	rdlong	arg01, fp
31198     14 4E 85 F1 | 	sub	fp, #20
3119c     A7 14 02 FB | 	rdlong	arg02, fp
311a0     30 4E 85 F1 | 	sub	fp, #48
311a4     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
311a8     48 4E 05 F1 | 	add	fp, #72
311ac     A7 FA 61 FC | 	wrlong	result1, fp
311b0     18 4E 85 F1 | 	sub	fp, #24
311b4     A7 26 02 FB | 	rdlong	local01, fp
311b8     0B 26 06 F1 | 	add	local01, #11
311bc     13 41 48 FC | 	wrbyte	#32, local01
311c0     14 4E 05 F1 | 	add	fp, #20
311c4     A7 12 02 FB | 	rdlong	arg01, fp
311c8     14 4E 85 F1 | 	sub	fp, #20
311cc     A7 14 02 FB | 	rdlong	arg02, fp
311d0     30 4E 85 F1 | 	sub	fp, #48
311d4     00 16 06 F6 | 	mov	arg03, #0
311d8     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
311dc     30 4E 05 F1 | 	add	fp, #48
311e0     A7 12 02 FB | 	rdlong	arg01, fp
311e4     1C 12 06 F1 | 	add	arg01, #28
311e8     09 01 68 FC | 	wrlong	#0, arg01
311ec     14 4E 05 F1 | 	add	fp, #20
311f0     A7 26 02 FB | 	rdlong	local01, fp
311f4     03 26 06 F1 | 	add	local01, #3
311f8     13 03 48 FC | 	wrbyte	#1, local01
311fc     04 4E 05 F1 | 	add	fp, #4
31200     A7 26 0A FB | 	rdlong	local01, fp wz
31204     48 4E 85 F1 | 	sub	fp, #72
31208     E8 00 90 AD |  if_e	jmp	#LR__4848
3120c     44 4E 05 F1 | 	add	fp, #68
31210     A7 26 02 FB | 	rdlong	local01, fp
31214     30 26 06 F1 | 	add	local01, #48
31218     13 27 02 FB | 	rdlong	local01, local01
3121c     14 4E 05 F1 | 	add	fp, #20
31220     A7 26 62 FC | 	wrlong	local01, fp
31224     44 4E 85 F1 | 	sub	fp, #68
31228     A7 12 02 F6 | 	mov	arg01, fp
3122c     34 4E 05 F1 | 	add	fp, #52
31230     A7 14 02 FB | 	rdlong	arg02, fp
31234     48 4E 85 F1 | 	sub	fp, #72
31238     00 16 06 F6 | 	mov	arg03, #0
3123c     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
31240     10 4E 05 F1 | 	add	fp, #16
31244     A7 FA 61 FC | 	wrlong	result1, fp
31248     10 4E 85 F1 | 	sub	fp, #16
3124c     00 FA 0D F2 | 	cmp	result1, #0 wz
31250     A0 00 90 5D |  if_ne	jmp	#LR__4848
31254     44 4E 05 F1 | 	add	fp, #68
31258     A7 12 02 FB | 	rdlong	arg01, fp
3125c     14 4E 05 F1 | 	add	fp, #20
31260     A7 14 02 FB | 	rdlong	arg02, fp
31264     58 4E 85 F1 | 	sub	fp, #88
31268     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
3126c     10 4E 05 F1 | 	add	fp, #16
31270     A7 FA 61 FC | 	wrlong	result1, fp
31274     34 4E 05 F1 | 	add	fp, #52
31278     A7 18 02 FB | 	rdlong	arg04, fp
3127c     04 4E 05 F1 | 	add	fp, #4
31280     A7 26 02 FB | 	rdlong	local01, fp
31284     48 4E 85 F1 | 	sub	fp, #72
31288     01 26 86 F1 | 	sub	local01, #1
3128c     10 18 06 F1 | 	add	arg04, #16
31290     0C 27 62 FC | 	wrlong	local01, arg04
31294     5C 00 90 FD | 	jmp	#LR__4848
31298                 | LR__4845
31298     10 4E 05 F1 | 	add	fp, #16
3129c     A7 18 0A FB | 	rdlong	arg04, fp wz
312a0     10 4E 85 F1 | 	sub	fp, #16
312a4     4C 00 90 5D |  if_ne	jmp	#LR__4847
312a8     1A 4E 05 F1 | 	add	fp, #26
312ac     A7 18 C2 FA | 	rdbyte	arg04, fp
312b0     1A 4E 85 F1 | 	sub	fp, #26
312b4     10 18 CE F7 | 	test	arg04, #16 wz
312b8     10 4E 05 51 |  if_ne	add	fp, #16
312bc     A7 08 68 5C |  if_ne	wrlong	#4, fp
312c0     10 4E 85 51 |  if_ne	sub	fp, #16
312c4     2C 00 90 5D |  if_ne	jmp	#LR__4846
312c8     0C 4E 05 F1 | 	add	fp, #12
312cc     A7 18 C2 FA | 	rdbyte	arg04, fp
312d0     0C 4E 85 F1 | 	sub	fp, #12
312d4     02 18 CE F7 | 	test	arg04, #2 wz
312d8     1A 4E 05 51 |  if_ne	add	fp, #26
312dc     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
312e0     1A 4E 85 51 |  if_ne	sub	fp, #26
312e4     01 26 CE 57 |  if_ne	test	local01, #1 wz
312e8     10 4E 05 51 |  if_ne	add	fp, #16
312ec     A7 0E 68 5C |  if_ne	wrlong	#7, fp
312f0     10 4E 85 51 |  if_ne	sub	fp, #16
312f4                 | LR__4846
312f4                 | LR__4847
312f4                 | LR__4848
312f4     10 4E 05 F1 | 	add	fp, #16
312f8     A7 26 0A FB | 	rdlong	local01, fp wz
312fc     10 4E 85 F1 | 	sub	fp, #16
31300     60 00 90 5D |  if_ne	jmp	#LR__4849
31304     0C 4E 05 F1 | 	add	fp, #12
31308     A7 28 C2 FA | 	rdbyte	local02, fp
3130c     0C 4E 85 F1 | 	sub	fp, #12
31310     08 28 CE F7 | 	test	local02, #8 wz
31314     0C 4E 05 51 |  if_ne	add	fp, #12
31318     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
3131c     40 28 46 55 |  if_ne	or	local02, #64
31320     A7 28 42 5C |  if_ne	wrbyte	local02, fp
31324     0C 4E 85 51 |  if_ne	sub	fp, #12
31328     04 4E 05 F1 | 	add	fp, #4
3132c     A7 28 02 FB | 	rdlong	local02, fp
31330     40 4E 05 F1 | 	add	fp, #64
31334     A7 26 02 FB | 	rdlong	local01, fp
31338     30 26 06 F1 | 	add	local01, #48
3133c     13 27 02 FB | 	rdlong	local01, local01
31340     20 28 06 F1 | 	add	local02, #32
31344     14 27 62 FC | 	wrlong	local01, local02
31348     40 4E 85 F1 | 	sub	fp, #64
3134c     A7 28 02 FB | 	rdlong	local02, fp
31350     2C 4E 05 F1 | 	add	fp, #44
31354     A7 26 02 FB | 	rdlong	local01, fp
31358     30 4E 85 F1 | 	sub	fp, #48
3135c     24 28 06 F1 | 	add	local02, #36
31360     14 27 62 FC | 	wrlong	local01, local02
31364                 | LR__4849
31364     10 4E 05 F1 | 	add	fp, #16
31368     A7 28 0A FB | 	rdlong	local02, fp wz
3136c     10 4E 85 F1 | 	sub	fp, #16
31370     F4 02 90 5D |  if_ne	jmp	#LR__4855
31374     04 4E 05 F1 | 	add	fp, #4
31378     A7 28 02 FB | 	rdlong	local02, fp
3137c     40 4E 05 F1 | 	add	fp, #64
31380     A7 12 02 FB | 	rdlong	arg01, fp
31384     14 4E 85 F1 | 	sub	fp, #20
31388     A7 14 02 FB | 	rdlong	arg02, fp
3138c     30 4E 85 F1 | 	sub	fp, #48
31390     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
31394     08 28 06 F1 | 	add	local02, #8
31398     14 FB 61 FC | 	wrlong	result1, local02
3139c     04 4E 05 F1 | 	add	fp, #4
313a0     A7 28 02 FB | 	rdlong	local02, fp
313a4     2C 4E 05 F1 | 	add	fp, #44
313a8     A7 12 02 FB | 	rdlong	arg01, fp
313ac     1C 12 06 F1 | 	add	arg01, #28
313b0                 | ' {
313b0                 | ' 
313b0                 | ' 	return *((DWORD*)ptr);
313b0     09 FB 01 FB | 	rdlong	result1, arg01
313b4     0C 28 06 F1 | 	add	local02, #12
313b8     14 FB 61 FC | 	wrlong	result1, local02
313bc     2C 4E 85 F1 | 	sub	fp, #44
313c0     A7 28 02 FB | 	rdlong	local02, fp
313c4     40 4E 05 F1 | 	add	fp, #64
313c8     A7 26 02 FB | 	rdlong	local01, fp
313cc     14 27 62 FC | 	wrlong	local01, local02
313d0     40 4E 85 F1 | 	sub	fp, #64
313d4     A7 28 02 FB | 	rdlong	local02, fp
313d8     40 4E 05 F1 | 	add	fp, #64
313dc     A7 26 02 FB | 	rdlong	local01, fp
313e0     06 26 06 F1 | 	add	local01, #6
313e4     13 27 E2 FA | 	rdword	local01, local01
313e8     04 28 06 F1 | 	add	local02, #4
313ec     14 27 52 FC | 	wrword	local01, local02
313f0     40 4E 85 F1 | 	sub	fp, #64
313f4     A7 28 02 FB | 	rdlong	local02, fp
313f8     08 4E 05 F1 | 	add	fp, #8
313fc     A7 26 C2 FA | 	rdbyte	local01, fp
31400     10 28 06 F1 | 	add	local02, #16
31404     14 27 42 FC | 	wrbyte	local01, local02
31408     08 4E 85 F1 | 	sub	fp, #8
3140c     A7 28 02 FB | 	rdlong	local02, fp
31410     11 28 06 F1 | 	add	local02, #17
31414     14 01 48 FC | 	wrbyte	#0, local02
31418     A7 28 02 FB | 	rdlong	local02, fp
3141c     1C 28 06 F1 | 	add	local02, #28
31420     14 01 68 FC | 	wrlong	#0, local02
31424     A7 28 02 FB | 	rdlong	local02, fp
31428     14 28 06 F1 | 	add	local02, #20
3142c     14 01 68 FC | 	wrlong	#0, local02
31430     A7 12 02 FB | 	rdlong	arg01, fp
31434     04 4E 85 F1 | 	sub	fp, #4
31438     28 12 06 F1 | 	add	arg01, #40
3143c     00 14 06 F6 | 	mov	arg02, #0
31440     09 16 C6 F9 | 	decod	arg03, #9
31444     98 00 A0 FD | 	call	#\builtin_bytefill_
31448     0C 4E 05 F1 | 	add	fp, #12
3144c     A7 28 C2 FA | 	rdbyte	local02, fp
31450     0C 4E 85 F1 | 	sub	fp, #12
31454     20 28 CE F7 | 	test	local02, #32 wz
31458     0C 02 90 AD |  if_e	jmp	#LR__4854
3145c     04 4E 05 F1 | 	add	fp, #4
31460     A7 26 02 FB | 	rdlong	local01, fp
31464     04 4E 85 F1 | 	sub	fp, #4
31468     0C 26 06 F1 | 	add	local01, #12
3146c     13 29 02 FB | 	rdlong	local02, local01
31470     01 28 16 F2 | 	cmp	local02, #1 wc
31474     F0 01 90 CD |  if_b	jmp	#LR__4854
31478     04 4E 05 F1 | 	add	fp, #4
3147c     A7 26 02 FB | 	rdlong	local01, fp
31480     13 29 02 F6 | 	mov	local02, local01
31484     0C 26 06 F1 | 	add	local01, #12
31488     13 27 02 FB | 	rdlong	local01, local01
3148c     14 28 06 F1 | 	add	local02, #20
31490     14 27 62 FC | 	wrlong	local01, local02
31494     40 4E 05 F1 | 	add	fp, #64
31498     A7 28 02 FB | 	rdlong	local02, fp
3149c     0A 28 06 F1 | 	add	local02, #10
314a0     14 29 E2 FA | 	rdword	local02, local02
314a4     09 28 66 F0 | 	shl	local02, #9
314a8     08 4E 05 F1 | 	add	fp, #8
314ac     A7 28 62 FC | 	wrlong	local02, fp
314b0     48 4E 85 F1 | 	sub	fp, #72
314b4     A7 28 02 FB | 	rdlong	local02, fp
314b8     08 28 06 F1 | 	add	local02, #8
314bc     14 27 02 FB | 	rdlong	local01, local02
314c0     4C 4E 05 F1 | 	add	fp, #76
314c4     A7 26 62 FC | 	wrlong	local01, fp
314c8                 | ' 				fp->fptr = fp->obj.objsize;
314c8                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
314c8                 | ' 				clst = fp->obj.sclust;
314c8                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
314c8     4C 4E 85 F1 | 	sub	fp, #76
314cc     A7 28 02 FB | 	rdlong	local02, fp
314d0     0C 28 06 F1 | 	add	local02, #12
314d4     14 27 02 FB | 	rdlong	local01, local02
314d8     58 4E 05 F1 | 	add	fp, #88
314dc     A7 26 62 FC | 	wrlong	local01, fp
314e0     5C 4E 85 F1 | 	sub	fp, #92
314e4                 | LR__4850
314e4     10 4E 05 F1 | 	add	fp, #16
314e8     A7 28 0A FB | 	rdlong	local02, fp wz
314ec     10 4E 85 F1 | 	sub	fp, #16
314f0     94 00 90 5D |  if_ne	jmp	#LR__4851
314f4     5C 4E 05 F1 | 	add	fp, #92
314f8     A7 28 02 FB | 	rdlong	local02, fp
314fc     10 4E 85 F1 | 	sub	fp, #16
31500     A7 26 02 FB | 	rdlong	local01, fp
31504     4C 4E 85 F1 | 	sub	fp, #76
31508     13 29 1A F2 | 	cmp	local02, local01 wcz
3150c     78 00 90 ED |  if_be	jmp	#LR__4851
31510     04 4E 05 F1 | 	add	fp, #4
31514     A7 12 02 FB | 	rdlong	arg01, fp
31518     4C 4E 05 F1 | 	add	fp, #76
3151c     A7 14 02 FB | 	rdlong	arg02, fp
31520     50 4E 85 F1 | 	sub	fp, #80
31524     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
31528     50 4E 05 F1 | 	add	fp, #80
3152c     A7 FA 61 FC | 	wrlong	result1, fp
31530     50 4E 85 F1 | 	sub	fp, #80
31534     02 FA 15 F2 | 	cmp	result1, #2 wc
31538     10 4E 05 C1 |  if_b	add	fp, #16
3153c     A7 04 68 CC |  if_b	wrlong	#2, fp
31540     10 4E 85 C1 |  if_b	sub	fp, #16
31544     50 4E 05 F1 | 	add	fp, #80
31548     A7 28 02 FB | 	rdlong	local02, fp
3154c     50 4E 85 F1 | 	sub	fp, #80
31550     FF FF 7F FF 
31554     FF 29 0E F2 | 	cmp	local02, ##-1 wz
31558     10 4E 05 A1 |  if_e	add	fp, #16
3155c     A7 02 68 AC |  if_e	wrlong	#1, fp
31560     10 4E 85 A1 |  if_e	sub	fp, #16
31564     5C 4E 05 F1 | 	add	fp, #92
31568     A7 28 02 FB | 	rdlong	local02, fp
3156c     10 4E 85 F1 | 	sub	fp, #16
31570     A7 26 02 FB | 	rdlong	local01, fp
31574     13 29 82 F1 | 	sub	local02, local01
31578     10 4E 05 F1 | 	add	fp, #16
3157c     A7 28 62 FC | 	wrlong	local02, fp
31580     5C 4E 85 F1 | 	sub	fp, #92
31584     5C FF 9F FD | 	jmp	#LR__4850
31588                 | LR__4851
31588     04 4E 05 F1 | 	add	fp, #4
3158c     A7 28 02 FB | 	rdlong	local02, fp
31590     4C 4E 05 F1 | 	add	fp, #76
31594     A7 26 02 FB | 	rdlong	local01, fp
31598     18 28 06 F1 | 	add	local02, #24
3159c     14 27 62 FC | 	wrlong	local01, local02
315a0     40 4E 85 F1 | 	sub	fp, #64
315a4     A7 28 0A FB | 	rdlong	local02, fp wz
315a8     10 4E 85 F1 | 	sub	fp, #16
315ac     B8 00 90 5D |  if_ne	jmp	#LR__4853
315b0     5C 4E 05 F1 | 	add	fp, #92
315b4     A7 26 02 FB | 	rdlong	local01, fp
315b8     5C 4E 85 F1 | 	sub	fp, #92
315bc     FF 27 CE F7 | 	test	local01, #511 wz
315c0     A4 00 90 AD |  if_e	jmp	#LR__4853
315c4     44 4E 05 F1 | 	add	fp, #68
315c8     A7 12 02 FB | 	rdlong	arg01, fp
315cc     0C 4E 05 F1 | 	add	fp, #12
315d0     A7 14 02 FB | 	rdlong	arg02, fp
315d4     50 4E 85 F1 | 	sub	fp, #80
315d8     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
315dc     58 4E 05 F1 | 	add	fp, #88
315e0     A7 FA 61 FC | 	wrlong	result1, fp
315e4     00 FA 4D F2 | 	cmps	result1, #0 wz
315e8     58 4E 85 F1 | 	sub	fp, #88
315ec     10 4E 05 A1 |  if_e	add	fp, #16
315f0     A7 04 68 AC |  if_e	wrlong	#2, fp
315f4     10 4E 85 A1 |  if_e	sub	fp, #16
315f8     6C 00 90 AD |  if_e	jmp	#LR__4852
315fc     04 4E 05 F1 | 	add	fp, #4
31600     A7 28 02 FB | 	rdlong	local02, fp
31604     54 4E 05 F1 | 	add	fp, #84
31608     A7 26 02 FB | 	rdlong	local01, fp
3160c     04 4E 05 F1 | 	add	fp, #4
31610     A7 18 02 FB | 	rdlong	arg04, fp
31614     09 18 46 F0 | 	shr	arg04, #9
31618     0C 27 02 F1 | 	add	local01, arg04
3161c     1C 28 06 F1 | 	add	local02, #28
31620     14 27 62 FC | 	wrlong	local01, local02
31624     18 4E 85 F1 | 	sub	fp, #24
31628     A7 28 02 FB | 	rdlong	local02, fp
3162c     01 28 06 F1 | 	add	local02, #1
31630     14 13 C2 FA | 	rdbyte	arg01, local02
31634     40 4E 85 F1 | 	sub	fp, #64
31638     A7 28 02 FB | 	rdlong	local02, fp
3163c     14 15 02 F6 | 	mov	arg02, local02
31640     28 14 06 F1 | 	add	arg02, #40
31644     04 4E 85 F1 | 	sub	fp, #4
31648     1C 28 06 F1 | 	add	local02, #28
3164c     14 17 02 FB | 	rdlong	arg03, local02
31650     01 18 06 F6 | 	mov	arg04, #1
31654     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
31658     00 FA 0D F2 | 	cmp	result1, #0 wz
3165c     10 4E 05 51 |  if_ne	add	fp, #16
31660     A7 02 68 5C |  if_ne	wrlong	#1, fp
31664     10 4E 85 51 |  if_ne	sub	fp, #16
31668                 | LR__4852
31668                 | LR__4853
31668                 | LR__4854
31668                 | LR__4855
31668                 | LR__4856
31668     10 4E 05 F1 | 	add	fp, #16
3166c     A7 28 0A FB | 	rdlong	local02, fp wz
31670     10 4E 85 F1 | 	sub	fp, #16
31674     04 4E 05 51 |  if_ne	add	fp, #4
31678     A7 28 02 5B |  if_ne	rdlong	local02, fp
3167c     04 4E 85 51 |  if_ne	sub	fp, #4
31680     14 01 68 5C |  if_ne	wrlong	#0, local02
31684                 | ' 
31684                 | ' 	return res ;
31684     10 4E 05 F1 | 	add	fp, #16
31688     A7 FA 01 FB | 	rdlong	result1, fp
3168c     10 4E 85 F1 | 	sub	fp, #16
31690                 | LR__4857
31690     A7 F0 03 F6 | 	mov	ptra, fp
31694     B2 00 A0 FD | 	call	#popregs_
31698                 | _fatfs_cc_f_open_ret
31698     2D 00 64 FD | 	ret
3169c                 | 
3169c                 | _fatfs_cc_f_read
3169c     0E 4A 05 F6 | 	mov	COUNT_, #14
316a0     A8 00 A0 FD | 	call	#pushregs_
316a4     38 F0 07 F1 | 	add	ptra, #56
316a8     04 4E 05 F1 | 	add	fp, #4
316ac     A7 12 62 FC | 	wrlong	arg01, fp
316b0     04 4E 05 F1 | 	add	fp, #4
316b4     A7 14 62 FC | 	wrlong	arg02, fp
316b8     04 4E 05 F1 | 	add	fp, #4
316bc     A7 16 62 FC | 	wrlong	arg03, fp
316c0     04 4E 05 F1 | 	add	fp, #4
316c4     A7 18 62 FC | 	wrlong	arg04, fp
316c8     08 4E 85 F1 | 	sub	fp, #8
316cc     A7 FA 01 FB | 	rdlong	result1, fp
316d0     2C 4E 05 F1 | 	add	fp, #44
316d4     A7 FA 61 FC | 	wrlong	result1, fp
316d8     24 4E 85 F1 | 	sub	fp, #36
316dc     A7 FA 01 FB | 	rdlong	result1, fp
316e0     FD 00 68 FC | 	wrlong	#0, result1
316e4     0C 4E 85 F1 | 	sub	fp, #12
316e8     A7 12 02 FB | 	rdlong	arg01, fp
316ec     14 4E 05 F1 | 	add	fp, #20
316f0     A7 14 02 F6 | 	mov	arg02, fp
316f4     18 4E 85 F1 | 	sub	fp, #24
316f8     24 F7 BF FD | 	call	#_fatfs_cc_validate
316fc     14 4E 05 F1 | 	add	fp, #20
31700     A7 FA 61 FC | 	wrlong	result1, fp
31704     00 FA 4D F2 | 	cmps	result1, #0 wz
31708     14 4E 85 F1 | 	sub	fp, #20
3170c     20 00 90 5D |  if_ne	jmp	#LR__4860
31710     04 4E 05 F1 | 	add	fp, #4
31714     A7 14 02 FB | 	rdlong	arg02, fp
31718     11 14 06 F1 | 	add	arg02, #17
3171c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
31720     10 4E 05 F1 | 	add	fp, #16
31724     A7 14 62 FC | 	wrlong	arg02, fp
31728     14 4E 85 F1 | 	sub	fp, #20
3172c     10 00 90 AD |  if_e	jmp	#LR__4861
31730                 | LR__4860
31730     14 4E 05 F1 | 	add	fp, #20
31734     A7 FA 01 FB | 	rdlong	result1, fp
31738     14 4E 85 F1 | 	sub	fp, #20
3173c     EC 05 90 FD | 	jmp	#LR__4880
31740                 | LR__4861
31740     04 4E 05 F1 | 	add	fp, #4
31744     A7 18 02 FB | 	rdlong	arg04, fp
31748     04 4E 85 F1 | 	sub	fp, #4
3174c     10 18 06 F1 | 	add	arg04, #16
31750     0C 19 C2 FA | 	rdbyte	arg04, arg04
31754     01 18 CE F7 | 	test	arg04, #1 wz
31758     07 FA 05 A6 |  if_e	mov	result1, #7
3175c     CC 05 90 AD |  if_e	jmp	#LR__4880
31760     04 4E 05 F1 | 	add	fp, #4
31764     A7 26 02 FB | 	rdlong	local01, fp
31768     13 29 02 F6 | 	mov	local02, local01
3176c     0C 28 06 F1 | 	add	local02, #12
31770     14 2B 02 FB | 	rdlong	local03, local02
31774     14 26 06 F1 | 	add	local01, #20
31778     13 27 02 FB | 	rdlong	local01, local01
3177c     13 2B 82 F1 | 	sub	local03, local01
31780     20 4E 05 F1 | 	add	fp, #32
31784     A7 2A 62 FC | 	wrlong	local03, fp
31788     18 4E 85 F1 | 	sub	fp, #24
3178c     A7 2C 02 FB | 	rdlong	local04, fp
31790     0C 4E 85 F1 | 	sub	fp, #12
31794     15 2D 1A F2 | 	cmp	local04, local03 wcz
31798     24 4E 05 11 |  if_a	add	fp, #36
3179c     A7 2C 02 1B |  if_a	rdlong	local04, fp
317a0     18 4E 85 11 |  if_a	sub	fp, #24
317a4     A7 2C 62 1C |  if_a	wrlong	local04, fp
317a8     0C 4E 85 11 |  if_a	sub	fp, #12
317ac                 | ' 
317ac                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
317ac                 | LR__4862
317ac     0C 4E 05 F1 | 	add	fp, #12
317b0     A7 28 02 FB | 	rdlong	local02, fp
317b4     0C 4E 85 F1 | 	sub	fp, #12
317b8     14 2D 02 F6 | 	mov	local04, local02
317bc     01 2C 16 F2 | 	cmp	local04, #1 wc
317c0     64 05 90 CD |  if_b	jmp	#LR__4879
317c4     04 4E 05 F1 | 	add	fp, #4
317c8     A7 2A 02 FB | 	rdlong	local03, fp
317cc     04 4E 85 F1 | 	sub	fp, #4
317d0     14 2A 06 F1 | 	add	local03, #20
317d4     15 2B 02 FB | 	rdlong	local03, local03
317d8     FF 2B CE F7 | 	test	local03, #511 wz
317dc     3C 04 90 5D |  if_ne	jmp	#LR__4877
317e0     04 4E 05 F1 | 	add	fp, #4
317e4     A7 26 02 FB | 	rdlong	local01, fp
317e8     14 26 06 F1 | 	add	local01, #20
317ec     13 2B 02 FB | 	rdlong	local03, local01
317f0     09 2A 46 F0 | 	shr	local03, #9
317f4     14 4E 05 F1 | 	add	fp, #20
317f8     A7 2E 02 FB | 	rdlong	local05, fp
317fc     17 31 02 F6 | 	mov	local06, local05
31800     0A 30 06 F1 | 	add	local06, #10
31804     18 33 E2 FA | 	rdword	local07, local06
31808     0A 30 86 F1 | 	sub	local06, #10
3180c     19 35 32 F9 | 	getword	local08, local07, #0
31810     01 34 86 F1 | 	sub	local08, #1
31814     1A 2B 0A F5 | 	and	local03, local08 wz
31818     18 4E 05 F1 | 	add	fp, #24
3181c     A7 2A 62 FC | 	wrlong	local03, fp
31820     30 4E 85 F1 | 	sub	fp, #48
31824     E0 00 90 5D |  if_ne	jmp	#LR__4867
31828     04 4E 05 F1 | 	add	fp, #4
3182c     A7 2A 02 FB | 	rdlong	local03, fp
31830     04 4E 85 F1 | 	sub	fp, #4
31834     14 2A 06 F1 | 	add	local03, #20
31838     15 2B 0A FB | 	rdlong	local03, local03 wz
3183c     20 00 90 5D |  if_ne	jmp	#LR__4863
31840     04 4E 05 F1 | 	add	fp, #4
31844     A7 2A 02 FB | 	rdlong	local03, fp
31848     08 2A 06 F1 | 	add	local03, #8
3184c     15 2B 02 FB | 	rdlong	local03, local03
31850     18 4E 05 F1 | 	add	fp, #24
31854     A7 2A 62 FC | 	wrlong	local03, fp
31858     1C 4E 85 F1 | 	sub	fp, #28
3185c     28 00 90 FD | 	jmp	#LR__4864
31860                 | LR__4863
31860     04 4E 05 F1 | 	add	fp, #4
31864     A7 34 02 FB | 	rdlong	local08, fp
31868     1A 13 02 F6 | 	mov	arg01, local08
3186c     04 4E 85 F1 | 	sub	fp, #4
31870     18 34 06 F1 | 	add	local08, #24
31874     1A 15 02 FB | 	rdlong	arg02, local08
31878     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
3187c     1C 4E 05 F1 | 	add	fp, #28
31880     A7 FA 61 FC | 	wrlong	result1, fp
31884     1C 4E 85 F1 | 	sub	fp, #28
31888                 | LR__4864
31888     1C 4E 05 F1 | 	add	fp, #28
3188c     A7 2A 02 FB | 	rdlong	local03, fp
31890     1C 4E 85 F1 | 	sub	fp, #28
31894     02 2A 16 F2 | 	cmp	local03, #2 wc
31898     1C 00 90 3D |  if_ae	jmp	#LR__4865
3189c     04 4E 05 F1 | 	add	fp, #4
318a0     A7 2A 02 FB | 	rdlong	local03, fp
318a4     04 4E 85 F1 | 	sub	fp, #4
318a8     11 2A 06 F1 | 	add	local03, #17
318ac     15 05 48 FC | 	wrbyte	#2, local03
318b0     02 FA 05 F6 | 	mov	result1, #2
318b4     74 04 90 FD | 	jmp	#LR__4880
318b8                 | LR__4865
318b8     1C 4E 05 F1 | 	add	fp, #28
318bc     A7 2A 02 FB | 	rdlong	local03, fp
318c0     1C 4E 85 F1 | 	sub	fp, #28
318c4     FF FF 7F FF 
318c8     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
318cc     1C 00 90 5D |  if_ne	jmp	#LR__4866
318d0     04 4E 05 F1 | 	add	fp, #4
318d4     A7 2A 02 FB | 	rdlong	local03, fp
318d8     04 4E 85 F1 | 	sub	fp, #4
318dc     11 2A 06 F1 | 	add	local03, #17
318e0     15 03 48 FC | 	wrbyte	#1, local03
318e4     01 FA 05 F6 | 	mov	result1, #1
318e8     40 04 90 FD | 	jmp	#LR__4880
318ec                 | LR__4866
318ec     04 4E 05 F1 | 	add	fp, #4
318f0     A7 2A 02 FB | 	rdlong	local03, fp
318f4     18 4E 05 F1 | 	add	fp, #24
318f8     A7 34 02 FB | 	rdlong	local08, fp
318fc     1C 4E 85 F1 | 	sub	fp, #28
31900     18 2A 06 F1 | 	add	local03, #24
31904     15 35 62 FC | 	wrlong	local08, local03
31908                 | LR__4867
31908     18 4E 05 F1 | 	add	fp, #24
3190c     A7 12 02 FB | 	rdlong	arg01, fp
31910     14 4E 85 F1 | 	sub	fp, #20
31914     A7 2A 02 FB | 	rdlong	local03, fp
31918     04 4E 85 F1 | 	sub	fp, #4
3191c     18 2A 06 F1 | 	add	local03, #24
31920     15 15 02 FB | 	rdlong	arg02, local03
31924     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
31928     20 4E 05 F1 | 	add	fp, #32
3192c     A7 FA 61 FC | 	wrlong	result1, fp
31930     20 4E 85 F1 | 	sub	fp, #32
31934     00 FA 0D F2 | 	cmp	result1, #0 wz
31938     1C 00 90 5D |  if_ne	jmp	#LR__4868
3193c     04 4E 05 F1 | 	add	fp, #4
31940     A7 2A 02 FB | 	rdlong	local03, fp
31944     04 4E 85 F1 | 	sub	fp, #4
31948     11 2A 06 F1 | 	add	local03, #17
3194c     15 05 48 FC | 	wrbyte	#2, local03
31950     02 FA 05 F6 | 	mov	result1, #2
31954     D4 03 90 FD | 	jmp	#LR__4880
31958                 | LR__4868
31958     20 4E 05 F1 | 	add	fp, #32
3195c     A7 2A 02 FB | 	rdlong	local03, fp
31960     10 4E 05 F1 | 	add	fp, #16
31964     A7 34 02 FB | 	rdlong	local08, fp
31968     1A 2B 02 F1 | 	add	local03, local08
3196c     10 4E 85 F1 | 	sub	fp, #16
31970     A7 2A 62 FC | 	wrlong	local03, fp
31974     14 4E 85 F1 | 	sub	fp, #20
31978     A7 2A 02 FB | 	rdlong	local03, fp
3197c     09 2A 46 F0 | 	shr	local03, #9
31980     20 4E 05 F1 | 	add	fp, #32
31984     A7 2A 62 FC | 	wrlong	local03, fp
31988     2C 4E 85 F1 | 	sub	fp, #44
3198c     01 2A 16 F2 | 	cmp	local03, #1 wc
31990     5C 01 90 CD |  if_b	jmp	#LR__4872
31994     30 4E 05 F1 | 	add	fp, #48
31998     A7 2A 02 FB | 	rdlong	local03, fp
3199c     04 4E 85 F1 | 	sub	fp, #4
319a0     A7 34 02 FB | 	rdlong	local08, fp
319a4     1A 2B 02 F1 | 	add	local03, local08
319a8     14 4E 85 F1 | 	sub	fp, #20
319ac     A7 34 02 FB | 	rdlong	local08, fp
319b0     18 4E 85 F1 | 	sub	fp, #24
319b4     0A 34 06 F1 | 	add	local08, #10
319b8     1A 35 E2 FA | 	rdword	local08, local08
319bc     1A 2B 1A F2 | 	cmp	local03, local08 wcz
319c0     28 00 90 ED |  if_be	jmp	#LR__4869
319c4     18 4E 05 F1 | 	add	fp, #24
319c8     A7 26 02 FB | 	rdlong	local01, fp
319cc     0A 26 06 F1 | 	add	local01, #10
319d0     13 2B E2 FA | 	rdword	local03, local01
319d4     18 4E 05 F1 | 	add	fp, #24
319d8     A7 34 02 FB | 	rdlong	local08, fp
319dc     1A 2B 82 F1 | 	sub	local03, local08
319e0     04 4E 85 F1 | 	sub	fp, #4
319e4     A7 2A 62 FC | 	wrlong	local03, fp
319e8     2C 4E 85 F1 | 	sub	fp, #44
319ec                 | LR__4869
319ec     18 4E 05 F1 | 	add	fp, #24
319f0     A7 26 02 FB | 	rdlong	local01, fp
319f4     01 26 06 F1 | 	add	local01, #1
319f8     13 13 C2 FA | 	rdbyte	arg01, local01
319fc     1C 4E 05 F1 | 	add	fp, #28
31a00     A7 14 02 FB | 	rdlong	arg02, fp
31a04     14 4E 85 F1 | 	sub	fp, #20
31a08     A7 16 02 FB | 	rdlong	arg03, fp
31a0c     0C 4E 05 F1 | 	add	fp, #12
31a10     A7 18 02 FB | 	rdlong	arg04, fp
31a14     2C 4E 85 F1 | 	sub	fp, #44
31a18     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
31a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
31a20     1C 00 90 AD |  if_e	jmp	#LR__4870
31a24     04 4E 05 F1 | 	add	fp, #4
31a28     A7 2A 02 FB | 	rdlong	local03, fp
31a2c     04 4E 85 F1 | 	sub	fp, #4
31a30     11 2A 06 F1 | 	add	local03, #17
31a34     15 03 48 FC | 	wrbyte	#1, local03
31a38     01 FA 05 F6 | 	mov	result1, #1
31a3c     EC 02 90 FD | 	jmp	#LR__4880
31a40                 | LR__4870
31a40     04 4E 05 F1 | 	add	fp, #4
31a44     A7 26 02 FB | 	rdlong	local01, fp
31a48     04 4E 85 F1 | 	sub	fp, #4
31a4c     10 26 06 F1 | 	add	local01, #16
31a50     13 2B C2 FA | 	rdbyte	local03, local01
31a54     80 2A CE F7 | 	test	local03, #128 wz
31a58     78 00 90 AD |  if_e	jmp	#LR__4871
31a5c     04 4E 05 F1 | 	add	fp, #4
31a60     A7 34 02 FB | 	rdlong	local08, fp
31a64     1C 34 06 F1 | 	add	local08, #28
31a68     1A 35 02 FB | 	rdlong	local08, local08
31a6c     1C 4E 05 F1 | 	add	fp, #28
31a70     A7 36 02 FB | 	rdlong	local09, fp
31a74     1B 35 82 F1 | 	sub	local08, local09
31a78     0C 4E 05 F1 | 	add	fp, #12
31a7c     A7 38 02 FB | 	rdlong	local10, fp
31a80     2C 4E 85 F1 | 	sub	fp, #44
31a84     1C 3B 02 F6 | 	mov	local11, local10
31a88     1D 35 12 F2 | 	cmp	local08, local11 wc
31a8c     44 00 90 3D |  if_ae	jmp	#LR__4871
31a90     34 4E 05 F1 | 	add	fp, #52
31a94     A7 12 02 FB | 	rdlong	arg01, fp
31a98     30 4E 85 F1 | 	sub	fp, #48
31a9c     A7 14 02 FB | 	rdlong	arg02, fp
31aa0     0A 3B 02 F6 | 	mov	local11, arg02
31aa4     1C 3A 06 F1 | 	add	local11, #28
31aa8     1D 37 02 FB | 	rdlong	local09, local11
31aac     1C 4E 05 F1 | 	add	fp, #28
31ab0     A7 2E 02 FB | 	rdlong	local05, fp
31ab4     17 37 82 F1 | 	sub	local09, local05
31ab8     09 36 66 F0 | 	shl	local09, #9
31abc     1B 3B 02 F6 | 	mov	local11, local09
31ac0     1B 13 02 F1 | 	add	arg01, local09
31ac4     20 4E 85 F1 | 	sub	fp, #32
31ac8     28 14 06 F1 | 	add	arg02, #40
31acc     09 16 C6 F9 | 	decod	arg03, #9
31ad0     64 43 BF FD | 	call	#__system____builtin_memmove
31ad4                 | LR__4871
31ad4     2C 4E 05 F1 | 	add	fp, #44
31ad8     A7 2A 02 FB | 	rdlong	local03, fp
31adc     09 2A 66 F0 | 	shl	local03, #9
31ae0     04 4E 85 F1 | 	sub	fp, #4
31ae4     A7 2A 62 FC | 	wrlong	local03, fp
31ae8     28 4E 85 F1 | 	sub	fp, #40
31aec                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
31aec                 | ' 				}
31aec                 | ' 
31aec                 | ' 
31aec                 | ' 				rcnt =  ((UINT) 512 )  * cc;
31aec                 | ' 				continue;
31aec     B4 01 90 FD | 	jmp	#LR__4878
31af0                 | LR__4872
31af0     04 4E 05 F1 | 	add	fp, #4
31af4     A7 2A 02 FB | 	rdlong	local03, fp
31af8     1C 2A 06 F1 | 	add	local03, #28
31afc     15 2B 02 FB | 	rdlong	local03, local03
31b00     1C 4E 05 F1 | 	add	fp, #28
31b04     A7 26 02 FB | 	rdlong	local01, fp
31b08     20 4E 85 F1 | 	sub	fp, #32
31b0c     13 2B 0A F2 | 	cmp	local03, local01 wz
31b10     EC 00 90 AD |  if_e	jmp	#LR__4876
31b14     04 4E 05 F1 | 	add	fp, #4
31b18     A7 26 02 FB | 	rdlong	local01, fp
31b1c     04 4E 85 F1 | 	sub	fp, #4
31b20     10 26 06 F1 | 	add	local01, #16
31b24     13 2B C2 FA | 	rdbyte	local03, local01
31b28     80 2A CE F7 | 	test	local03, #128 wz
31b2c     7C 00 90 AD |  if_e	jmp	#LR__4874
31b30     18 4E 05 F1 | 	add	fp, #24
31b34     A7 26 02 FB | 	rdlong	local01, fp
31b38     01 26 06 F1 | 	add	local01, #1
31b3c     13 13 C2 FA | 	rdbyte	arg01, local01
31b40     14 4E 85 F1 | 	sub	fp, #20
31b44     A7 2A 02 FB | 	rdlong	local03, fp
31b48     15 15 02 F6 | 	mov	arg02, local03
31b4c     28 14 06 F1 | 	add	arg02, #40
31b50     04 4E 85 F1 | 	sub	fp, #4
31b54     1C 2A 06 F1 | 	add	local03, #28
31b58     15 17 02 FB | 	rdlong	arg03, local03
31b5c     01 18 06 F6 | 	mov	arg04, #1
31b60     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
31b64     00 FA 0D F2 | 	cmp	result1, #0 wz
31b68     1C 00 90 AD |  if_e	jmp	#LR__4873
31b6c     04 4E 05 F1 | 	add	fp, #4
31b70     A7 2A 02 FB | 	rdlong	local03, fp
31b74     04 4E 85 F1 | 	sub	fp, #4
31b78     11 2A 06 F1 | 	add	local03, #17
31b7c     15 03 48 FC | 	wrbyte	#1, local03
31b80     01 FA 05 F6 | 	mov	result1, #1
31b84     A4 01 90 FD | 	jmp	#LR__4880
31b88                 | LR__4873
31b88     04 4E 05 F1 | 	add	fp, #4
31b8c     A7 3A 02 FB | 	rdlong	local11, fp
31b90     1D 2B 02 F6 | 	mov	local03, local11
31b94     04 4E 85 F1 | 	sub	fp, #4
31b98     10 3A 06 F1 | 	add	local11, #16
31b9c     1D 3B C2 FA | 	rdbyte	local11, local11
31ba0     7F 3A 06 F5 | 	and	local11, #127
31ba4     10 2A 06 F1 | 	add	local03, #16
31ba8     15 3B 42 FC | 	wrbyte	local11, local03
31bac                 | LR__4874
31bac     18 4E 05 F1 | 	add	fp, #24
31bb0     A7 26 02 FB | 	rdlong	local01, fp
31bb4     01 26 06 F1 | 	add	local01, #1
31bb8     13 13 C2 FA | 	rdbyte	arg01, local01
31bbc     14 4E 85 F1 | 	sub	fp, #20
31bc0     A7 14 02 FB | 	rdlong	arg02, fp
31bc4     28 14 06 F1 | 	add	arg02, #40
31bc8     1C 4E 05 F1 | 	add	fp, #28
31bcc     A7 16 02 FB | 	rdlong	arg03, fp
31bd0     20 4E 85 F1 | 	sub	fp, #32
31bd4     01 18 06 F6 | 	mov	arg04, #1
31bd8     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
31bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
31be0     1C 00 90 AD |  if_e	jmp	#LR__4875
31be4     04 4E 05 F1 | 	add	fp, #4
31be8     A7 2A 02 FB | 	rdlong	local03, fp
31bec     04 4E 85 F1 | 	sub	fp, #4
31bf0     11 2A 06 F1 | 	add	local03, #17
31bf4     15 03 48 FC | 	wrbyte	#1, local03
31bf8     01 FA 05 F6 | 	mov	result1, #1
31bfc     2C 01 90 FD | 	jmp	#LR__4880
31c00                 | LR__4875
31c00                 | LR__4876
31c00     04 4E 05 F1 | 	add	fp, #4
31c04     A7 2A 02 FB | 	rdlong	local03, fp
31c08     1C 4E 05 F1 | 	add	fp, #28
31c0c     A7 3A 02 FB | 	rdlong	local11, fp
31c10     20 4E 85 F1 | 	sub	fp, #32
31c14     1C 2A 06 F1 | 	add	local03, #28
31c18     15 3B 62 FC | 	wrlong	local11, local03
31c1c                 | LR__4877
31c1c     04 4E 05 F1 | 	add	fp, #4
31c20     A7 26 02 FB | 	rdlong	local01, fp
31c24     14 26 06 F1 | 	add	local01, #20
31c28     13 3B 02 FB | 	rdlong	local11, local01
31c2c     FF 3B 06 F5 | 	and	local11, #511
31c30     09 2A C6 F9 | 	decod	local03, #9
31c34     1D 2B 82 F1 | 	sub	local03, local11
31c38     24 4E 05 F1 | 	add	fp, #36
31c3c     A7 2A 62 FC | 	wrlong	local03, fp
31c40     1C 4E 85 F1 | 	sub	fp, #28
31c44     A7 3A 02 FB | 	rdlong	local11, fp
31c48     0C 4E 85 F1 | 	sub	fp, #12
31c4c     1D 2B 1A F2 | 	cmp	local03, local11 wcz
31c50     0C 4E 05 11 |  if_a	add	fp, #12
31c54     A7 2A 02 1B |  if_a	rdlong	local03, fp
31c58     1C 4E 05 11 |  if_a	add	fp, #28
31c5c     A7 2A 62 1C |  if_a	wrlong	local03, fp
31c60     28 4E 85 11 |  if_a	sub	fp, #40
31c64     34 4E 05 F1 | 	add	fp, #52
31c68     A7 12 02 FB | 	rdlong	arg01, fp
31c6c     30 4E 85 F1 | 	sub	fp, #48
31c70     A7 30 02 FB | 	rdlong	local06, fp
31c74     18 15 02 F6 | 	mov	arg02, local06
31c78     28 14 06 F1 | 	add	arg02, #40
31c7c     14 30 06 F1 | 	add	local06, #20
31c80     18 3B 02 FB | 	rdlong	local11, local06
31c84     1D 37 02 F6 | 	mov	local09, local11
31c88     1B 39 02 F6 | 	mov	local10, local09
31c8c     FF 39 06 F5 | 	and	local10, #511
31c90     1C 15 02 F1 | 	add	arg02, local10
31c94     24 4E 05 F1 | 	add	fp, #36
31c98     A7 16 02 FB | 	rdlong	arg03, fp
31c9c     28 4E 85 F1 | 	sub	fp, #40
31ca0     94 41 BF FD | 	call	#__system____builtin_memmove
31ca4                 | LR__4878
31ca4     0C 4E 05 F1 | 	add	fp, #12
31ca8     A7 2A 02 FB | 	rdlong	local03, fp
31cac     1C 4E 05 F1 | 	add	fp, #28
31cb0     A7 34 02 FB | 	rdlong	local08, fp
31cb4     1A 2B 82 F1 | 	sub	local03, local08
31cb8     1C 4E 85 F1 | 	sub	fp, #28
31cbc     A7 2A 62 FC | 	wrlong	local03, fp
31cc0     04 4E 05 F1 | 	add	fp, #4
31cc4     A7 26 02 FB | 	rdlong	local01, fp
31cc8     13 33 02 FB | 	rdlong	local07, local01
31ccc     18 4E 05 F1 | 	add	fp, #24
31cd0     A7 34 02 FB | 	rdlong	local08, fp
31cd4     1A 33 02 F1 | 	add	local07, local08
31cd8     13 33 62 FC | 	wrlong	local07, local01
31cdc     0C 4E 05 F1 | 	add	fp, #12
31ce0     A7 2A 02 FB | 	rdlong	local03, fp
31ce4     0C 4E 85 F1 | 	sub	fp, #12
31ce8     A7 3C 02 FB | 	rdlong	local12, fp
31cec     1E 2B 02 F1 | 	add	local03, local12
31cf0     0C 4E 05 F1 | 	add	fp, #12
31cf4     A7 2A 62 FC | 	wrlong	local03, fp
31cf8     30 4E 85 F1 | 	sub	fp, #48
31cfc     A7 3E 02 FB | 	rdlong	local13, fp
31d00     1F 2B 02 F6 | 	mov	local03, local13
31d04     14 3E 06 F1 | 	add	local13, #20
31d08     1F 41 02 FB | 	rdlong	local14, local13
31d0c     24 4E 05 F1 | 	add	fp, #36
31d10     A7 30 02 FB | 	rdlong	local06, fp
31d14     28 4E 85 F1 | 	sub	fp, #40
31d18     18 41 02 F1 | 	add	local14, local06
31d1c     14 2A 06 F1 | 	add	local03, #20
31d20     15 41 62 FC | 	wrlong	local14, local03
31d24     84 FA 9F FD | 	jmp	#LR__4862
31d28                 | LR__4879
31d28                 | ' 
31d28                 | ' 
31d28                 | ' 
31d28                 | ' 
31d28                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
31d28                 | ' 
31d28                 | ' 	}
31d28                 | ' 
31d28                 | ' 	return FR_OK ;
31d28     00 FA 05 F6 | 	mov	result1, #0
31d2c                 | LR__4880
31d2c     A7 F0 03 F6 | 	mov	ptra, fp
31d30     B2 00 A0 FD | 	call	#popregs_
31d34                 | _fatfs_cc_f_read_ret
31d34     2D 00 64 FD | 	ret
31d38                 | 
31d38                 | _fatfs_cc_f_write
31d38     15 4A 05 F6 | 	mov	COUNT_, #21
31d3c     A8 00 A0 FD | 	call	#pushregs_
31d40     34 F0 07 F1 | 	add	ptra, #52
31d44     04 4E 05 F1 | 	add	fp, #4
31d48     A7 12 62 FC | 	wrlong	arg01, fp
31d4c     04 4E 05 F1 | 	add	fp, #4
31d50     A7 14 62 FC | 	wrlong	arg02, fp
31d54     04 4E 05 F1 | 	add	fp, #4
31d58     A7 16 62 FC | 	wrlong	arg03, fp
31d5c     04 4E 05 F1 | 	add	fp, #4
31d60     A7 18 62 FC | 	wrlong	arg04, fp
31d64     08 4E 85 F1 | 	sub	fp, #8
31d68     A7 FA 01 FB | 	rdlong	result1, fp
31d6c     28 4E 05 F1 | 	add	fp, #40
31d70     A7 FA 61 FC | 	wrlong	result1, fp
31d74     20 4E 85 F1 | 	sub	fp, #32
31d78     A7 FA 01 FB | 	rdlong	result1, fp
31d7c     FD 00 68 FC | 	wrlong	#0, result1
31d80     0C 4E 85 F1 | 	sub	fp, #12
31d84     A7 12 02 FB | 	rdlong	arg01, fp
31d88     14 4E 05 F1 | 	add	fp, #20
31d8c     A7 14 02 F6 | 	mov	arg02, fp
31d90     18 4E 85 F1 | 	sub	fp, #24
31d94     88 F0 BF FD | 	call	#_fatfs_cc_validate
31d98     14 4E 05 F1 | 	add	fp, #20
31d9c     A7 FA 61 FC | 	wrlong	result1, fp
31da0     00 FA 4D F2 | 	cmps	result1, #0 wz
31da4     14 4E 85 F1 | 	sub	fp, #20
31da8     20 00 90 5D |  if_ne	jmp	#LR__4890
31dac     04 4E 05 F1 | 	add	fp, #4
31db0     A7 14 02 FB | 	rdlong	arg02, fp
31db4     11 14 06 F1 | 	add	arg02, #17
31db8     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
31dbc     10 4E 05 F1 | 	add	fp, #16
31dc0     A7 14 62 FC | 	wrlong	arg02, fp
31dc4     14 4E 85 F1 | 	sub	fp, #20
31dc8     10 00 90 AD |  if_e	jmp	#LR__4891
31dcc                 | LR__4890
31dcc     14 4E 05 F1 | 	add	fp, #20
31dd0     A7 FA 01 FB | 	rdlong	result1, fp
31dd4     14 4E 85 F1 | 	sub	fp, #20
31dd8     44 07 90 FD | 	jmp	#LR__4913
31ddc                 | LR__4891
31ddc     04 4E 05 F1 | 	add	fp, #4
31de0     A7 14 02 FB | 	rdlong	arg02, fp
31de4     04 4E 85 F1 | 	sub	fp, #4
31de8     10 14 06 F1 | 	add	arg02, #16
31dec     0A 15 C2 FA | 	rdbyte	arg02, arg02
31df0     02 14 CE F7 | 	test	arg02, #2 wz
31df4     07 FA 05 A6 |  if_e	mov	result1, #7
31df8     24 07 90 AD |  if_e	jmp	#LR__4913
31dfc     04 4E 05 F1 | 	add	fp, #4
31e00     A7 14 02 FB | 	rdlong	arg02, fp
31e04     0A 13 02 F6 | 	mov	arg01, arg02
31e08     14 12 06 F1 | 	add	arg01, #20
31e0c     09 13 02 FB | 	rdlong	arg01, arg01
31e10     08 4E 05 F1 | 	add	fp, #8
31e14     A7 FA 01 FB | 	rdlong	result1, fp
31e18     FD 12 02 F1 | 	add	arg01, result1
31e1c     0C 4E 85 F1 | 	sub	fp, #12
31e20     14 14 06 F1 | 	add	arg02, #20
31e24     0A FB 01 FB | 	rdlong	result1, arg02
31e28     FD 12 12 F2 | 	cmp	arg01, result1 wc
31e2c     24 00 90 3D |  if_ae	jmp	#LR__4892
31e30     04 4E 05 F1 | 	add	fp, #4
31e34     A7 14 02 FB | 	rdlong	arg02, fp
31e38     01 FA 65 F6 | 	neg	result1, #1
31e3c     14 14 06 F1 | 	add	arg02, #20
31e40     0A 15 02 FB | 	rdlong	arg02, arg02
31e44     0A FB 81 F1 | 	sub	result1, arg02
31e48     08 4E 05 F1 | 	add	fp, #8
31e4c     A7 FA 61 FC | 	wrlong	result1, fp
31e50     0C 4E 85 F1 | 	sub	fp, #12
31e54                 | LR__4892
31e54                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
31e54                 | ' 	}
31e54                 | ' 
31e54                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
31e54                 | LR__4893
31e54     0C 4E 05 F1 | 	add	fp, #12
31e58     A7 FA 01 FB | 	rdlong	result1, fp
31e5c     0C 4E 85 F1 | 	sub	fp, #12
31e60     01 FA 15 F2 | 	cmp	result1, #1 wc
31e64     90 06 90 CD |  if_b	jmp	#LR__4912
31e68     04 4E 05 F1 | 	add	fp, #4
31e6c     A7 FA 01 FB | 	rdlong	result1, fp
31e70     04 4E 85 F1 | 	sub	fp, #4
31e74     14 FA 05 F1 | 	add	result1, #20
31e78     FD FA 01 FB | 	rdlong	result1, result1
31e7c     FF FB CD F7 | 	test	result1, #511 wz
31e80     D8 04 90 5D |  if_ne	jmp	#LR__4908
31e84     04 4E 05 F1 | 	add	fp, #4
31e88     A7 FA 01 FB | 	rdlong	result1, fp
31e8c     14 FA 05 F1 | 	add	result1, #20
31e90     FD FA 01 FB | 	rdlong	result1, result1
31e94     09 FA 45 F0 | 	shr	result1, #9
31e98     14 4E 05 F1 | 	add	fp, #20
31e9c     A7 14 02 FB | 	rdlong	arg02, fp
31ea0     0A 14 06 F1 | 	add	arg02, #10
31ea4     0A 19 E2 FA | 	rdword	arg04, arg02
31ea8     0C 15 32 F9 | 	getword	arg02, arg04, #0
31eac     01 14 86 F1 | 	sub	arg02, #1
31eb0     0A FB 09 F5 | 	and	result1, arg02 wz
31eb4     14 4E 05 F1 | 	add	fp, #20
31eb8     A7 FA 61 FC | 	wrlong	result1, fp
31ebc     2C 4E 85 F1 | 	sub	fp, #44
31ec0     44 01 90 5D |  if_ne	jmp	#LR__4899
31ec4     04 4E 05 F1 | 	add	fp, #4
31ec8     A7 FA 01 FB | 	rdlong	result1, fp
31ecc     04 4E 85 F1 | 	sub	fp, #4
31ed0     14 FA 05 F1 | 	add	result1, #20
31ed4     FD 14 0A FB | 	rdlong	arg02, result1 wz
31ed8     44 00 90 5D |  if_ne	jmp	#LR__4894
31edc     04 4E 05 F1 | 	add	fp, #4
31ee0     A7 14 02 FB | 	rdlong	arg02, fp
31ee4     08 14 06 F1 | 	add	arg02, #8
31ee8     0A 15 0A FB | 	rdlong	arg02, arg02 wz
31eec     18 4E 05 F1 | 	add	fp, #24
31ef0     A7 14 62 FC | 	wrlong	arg02, fp
31ef4     1C 4E 85 F1 | 	sub	fp, #28
31ef8     4C 00 90 5D |  if_ne	jmp	#LR__4895
31efc     04 4E 05 F1 | 	add	fp, #4
31f00     A7 12 02 FB | 	rdlong	arg01, fp
31f04     04 4E 85 F1 | 	sub	fp, #4
31f08     00 14 06 F6 | 	mov	arg02, #0
31f0c     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
31f10     1C 4E 05 F1 | 	add	fp, #28
31f14     A7 FA 61 FC | 	wrlong	result1, fp
31f18     1C 4E 85 F1 | 	sub	fp, #28
31f1c     28 00 90 FD | 	jmp	#LR__4895
31f20                 | LR__4894
31f20     04 4E 05 F1 | 	add	fp, #4
31f24     A7 18 02 FB | 	rdlong	arg04, fp
31f28     0C 13 02 F6 | 	mov	arg01, arg04
31f2c     04 4E 85 F1 | 	sub	fp, #4
31f30     18 18 06 F1 | 	add	arg04, #24
31f34     0C 15 02 FB | 	rdlong	arg02, arg04
31f38     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
31f3c     1C 4E 05 F1 | 	add	fp, #28
31f40     A7 FA 61 FC | 	wrlong	result1, fp
31f44     1C 4E 85 F1 | 	sub	fp, #28
31f48                 | LR__4895
31f48     1C 4E 05 F1 | 	add	fp, #28
31f4c     A7 FA 09 FB | 	rdlong	result1, fp wz
31f50     1C 4E 85 F1 | 	sub	fp, #28
31f54     A0 05 90 AD |  if_e	jmp	#LR__4912
31f58     1C 4E 05 F1 | 	add	fp, #28
31f5c     A7 FA 01 FB | 	rdlong	result1, fp
31f60     1C 4E 85 F1 | 	sub	fp, #28
31f64     01 FA 0D F2 | 	cmp	result1, #1 wz
31f68     1C 00 90 5D |  if_ne	jmp	#LR__4896
31f6c     04 4E 05 F1 | 	add	fp, #4
31f70     A7 FA 01 FB | 	rdlong	result1, fp
31f74     04 4E 85 F1 | 	sub	fp, #4
31f78     11 FA 05 F1 | 	add	result1, #17
31f7c     FD 04 48 FC | 	wrbyte	#2, result1
31f80     02 FA 05 F6 | 	mov	result1, #2
31f84     98 05 90 FD | 	jmp	#LR__4913
31f88                 | LR__4896
31f88     1C 4E 05 F1 | 	add	fp, #28
31f8c     A7 FA 01 FB | 	rdlong	result1, fp
31f90     1C 4E 85 F1 | 	sub	fp, #28
31f94     FF FF 7F FF 
31f98     FF FB 0D F2 | 	cmp	result1, ##-1 wz
31f9c     1C 00 90 5D |  if_ne	jmp	#LR__4897
31fa0     04 4E 05 F1 | 	add	fp, #4
31fa4     A7 FA 01 FB | 	rdlong	result1, fp
31fa8     04 4E 85 F1 | 	sub	fp, #4
31fac     11 FA 05 F1 | 	add	result1, #17
31fb0     FD 02 48 FC | 	wrbyte	#1, result1
31fb4     01 FA 05 F6 | 	mov	result1, #1
31fb8     64 05 90 FD | 	jmp	#LR__4913
31fbc                 | LR__4897
31fbc     04 4E 05 F1 | 	add	fp, #4
31fc0     A7 FA 01 FB | 	rdlong	result1, fp
31fc4     18 4E 05 F1 | 	add	fp, #24
31fc8     A7 18 02 FB | 	rdlong	arg04, fp
31fcc     18 FA 05 F1 | 	add	result1, #24
31fd0     FD 18 62 FC | 	wrlong	arg04, result1
31fd4     18 4E 85 F1 | 	sub	fp, #24
31fd8     A7 FA 01 FB | 	rdlong	result1, fp
31fdc     04 4E 85 F1 | 	sub	fp, #4
31fe0     08 FA 05 F1 | 	add	result1, #8
31fe4     FD FA 09 FB | 	rdlong	result1, result1 wz
31fe8     1C 00 90 5D |  if_ne	jmp	#LR__4898
31fec     04 4E 05 F1 | 	add	fp, #4
31ff0     A7 18 02 FB | 	rdlong	arg04, fp
31ff4     18 4E 05 F1 | 	add	fp, #24
31ff8     A7 FA 01 FB | 	rdlong	result1, fp
31ffc     1C 4E 85 F1 | 	sub	fp, #28
32000     08 18 06 F1 | 	add	arg04, #8
32004     0C FB 61 FC | 	wrlong	result1, arg04
32008                 | LR__4898
32008                 | LR__4899
32008     04 4E 05 F1 | 	add	fp, #4
3200c     A7 18 02 FB | 	rdlong	arg04, fp
32010     04 4E 85 F1 | 	sub	fp, #4
32014     10 18 06 F1 | 	add	arg04, #16
32018     0C 19 C2 FA | 	rdbyte	arg04, arg04
3201c     80 18 CE F7 | 	test	arg04, #128 wz
32020     7C 00 90 AD |  if_e	jmp	#LR__4901
32024     18 4E 05 F1 | 	add	fp, #24
32028     A7 18 02 FB | 	rdlong	arg04, fp
3202c     01 18 06 F1 | 	add	arg04, #1
32030     0C 13 C2 FA | 	rdbyte	arg01, arg04
32034     14 4E 85 F1 | 	sub	fp, #20
32038     A7 18 02 FB | 	rdlong	arg04, fp
3203c     0C 15 02 F6 | 	mov	arg02, arg04
32040     28 14 06 F1 | 	add	arg02, #40
32044     04 4E 85 F1 | 	sub	fp, #4
32048     1C 18 06 F1 | 	add	arg04, #28
3204c     0C 17 02 FB | 	rdlong	arg03, arg04
32050     01 18 06 F6 | 	mov	arg04, #1
32054     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
32058     00 FA 0D F2 | 	cmp	result1, #0 wz
3205c     1C 00 90 AD |  if_e	jmp	#LR__4900
32060     04 4E 05 F1 | 	add	fp, #4
32064     A7 FA 01 FB | 	rdlong	result1, fp
32068     04 4E 85 F1 | 	sub	fp, #4
3206c     11 FA 05 F1 | 	add	result1, #17
32070     FD 02 48 FC | 	wrbyte	#1, result1
32074     01 FA 05 F6 | 	mov	result1, #1
32078     A4 04 90 FD | 	jmp	#LR__4913
3207c                 | LR__4900
3207c     04 4E 05 F1 | 	add	fp, #4
32080     A7 18 02 FB | 	rdlong	arg04, fp
32084     0C FB 01 F6 | 	mov	result1, arg04
32088     04 4E 85 F1 | 	sub	fp, #4
3208c     10 18 06 F1 | 	add	arg04, #16
32090     0C 19 C2 FA | 	rdbyte	arg04, arg04
32094     7F 18 06 F5 | 	and	arg04, #127
32098     10 FA 05 F1 | 	add	result1, #16
3209c     FD 18 42 FC | 	wrbyte	arg04, result1
320a0                 | LR__4901
320a0     18 4E 05 F1 | 	add	fp, #24
320a4     A7 12 02 FB | 	rdlong	arg01, fp
320a8     14 4E 85 F1 | 	sub	fp, #20
320ac     A7 14 02 FB | 	rdlong	arg02, fp
320b0     04 4E 85 F1 | 	sub	fp, #4
320b4     18 14 06 F1 | 	add	arg02, #24
320b8     0A 15 02 FB | 	rdlong	arg02, arg02
320bc     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
320c0     20 4E 05 F1 | 	add	fp, #32
320c4     A7 FA 61 FC | 	wrlong	result1, fp
320c8     20 4E 85 F1 | 	sub	fp, #32
320cc     00 FA 0D F2 | 	cmp	result1, #0 wz
320d0     1C 00 90 5D |  if_ne	jmp	#LR__4902
320d4     04 4E 05 F1 | 	add	fp, #4
320d8     A7 FA 01 FB | 	rdlong	result1, fp
320dc     04 4E 85 F1 | 	sub	fp, #4
320e0     11 FA 05 F1 | 	add	result1, #17
320e4     FD 04 48 FC | 	wrbyte	#2, result1
320e8     02 FA 05 F6 | 	mov	result1, #2
320ec     30 04 90 FD | 	jmp	#LR__4913
320f0                 | LR__4902
320f0     20 4E 05 F1 | 	add	fp, #32
320f4     A7 FA 01 FB | 	rdlong	result1, fp
320f8     0C 4E 05 F1 | 	add	fp, #12
320fc     A7 26 02 FB | 	rdlong	local01, fp
32100     13 FB 01 F1 | 	add	result1, local01
32104     0C 4E 85 F1 | 	sub	fp, #12
32108     A7 FA 61 FC | 	wrlong	result1, fp
3210c     14 4E 85 F1 | 	sub	fp, #20
32110     A7 FA 01 FB | 	rdlong	result1, fp
32114     09 FA 45 F0 | 	shr	result1, #9
32118     1C 4E 05 F1 | 	add	fp, #28
3211c     A7 FA 61 FC | 	wrlong	result1, fp
32120     28 4E 85 F1 | 	sub	fp, #40
32124     01 FA 15 F2 | 	cmp	result1, #1 wc
32128     60 01 90 CD |  if_b	jmp	#LR__4906
3212c     2C 4E 05 F1 | 	add	fp, #44
32130     A7 FA 01 FB | 	rdlong	result1, fp
32134     04 4E 85 F1 | 	sub	fp, #4
32138     A7 18 02 FB | 	rdlong	arg04, fp
3213c     0C FB 01 F1 | 	add	result1, arg04
32140     10 4E 85 F1 | 	sub	fp, #16
32144     A7 18 02 FB | 	rdlong	arg04, fp
32148     18 4E 85 F1 | 	sub	fp, #24
3214c     0A 18 06 F1 | 	add	arg04, #10
32150     0C 19 E2 FA | 	rdword	arg04, arg04
32154     0C FB 19 F2 | 	cmp	result1, arg04 wcz
32158     28 00 90 ED |  if_be	jmp	#LR__4903
3215c     18 4E 05 F1 | 	add	fp, #24
32160     A7 FA 01 FB | 	rdlong	result1, fp
32164     0A FA 05 F1 | 	add	result1, #10
32168     FD FA E1 FA | 	rdword	result1, result1
3216c     14 4E 05 F1 | 	add	fp, #20
32170     A7 18 02 FB | 	rdlong	arg04, fp
32174     0C FB 81 F1 | 	sub	result1, arg04
32178     04 4E 85 F1 | 	sub	fp, #4
3217c     A7 FA 61 FC | 	wrlong	result1, fp
32180     28 4E 85 F1 | 	sub	fp, #40
32184                 | LR__4903
32184     18 4E 05 F1 | 	add	fp, #24
32188     A7 18 02 FB | 	rdlong	arg04, fp
3218c     01 18 06 F1 | 	add	arg04, #1
32190     0C 13 C2 FA | 	rdbyte	arg01, arg04
32194     18 4E 05 F1 | 	add	fp, #24
32198     A7 14 02 FB | 	rdlong	arg02, fp
3219c     10 4E 85 F1 | 	sub	fp, #16
321a0     A7 16 02 FB | 	rdlong	arg03, fp
321a4     08 4E 05 F1 | 	add	fp, #8
321a8     A7 18 02 FB | 	rdlong	arg04, fp
321ac     28 4E 85 F1 | 	sub	fp, #40
321b0     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
321b4     00 FA 0D F2 | 	cmp	result1, #0 wz
321b8     1C 00 90 AD |  if_e	jmp	#LR__4904
321bc     04 4E 05 F1 | 	add	fp, #4
321c0     A7 26 02 FB | 	rdlong	local01, fp
321c4     04 4E 85 F1 | 	sub	fp, #4
321c8     11 26 06 F1 | 	add	local01, #17
321cc     13 03 48 FC | 	wrbyte	#1, local01
321d0     01 FA 05 F6 | 	mov	result1, #1
321d4     48 03 90 FD | 	jmp	#LR__4913
321d8                 | LR__4904
321d8     04 4E 05 F1 | 	add	fp, #4
321dc     A7 FA 01 FB | 	rdlong	result1, fp
321e0     1C FA 05 F1 | 	add	result1, #28
321e4     FD FA 01 FB | 	rdlong	result1, result1
321e8     1C 4E 05 F1 | 	add	fp, #28
321ec     A7 28 02 FB | 	rdlong	local02, fp
321f0     14 FB 81 F1 | 	sub	result1, local02
321f4     08 4E 05 F1 | 	add	fp, #8
321f8     A7 18 02 FB | 	rdlong	arg04, fp
321fc     28 4E 85 F1 | 	sub	fp, #40
32200     0C FB 11 F2 | 	cmp	result1, arg04 wc
32204     68 00 90 3D |  if_ae	jmp	#LR__4905
32208     04 4E 05 F1 | 	add	fp, #4
3220c     A7 12 02 FB | 	rdlong	arg01, fp
32210     28 12 06 F1 | 	add	arg01, #40
32214     2C 4E 05 F1 | 	add	fp, #44
32218     A7 14 02 FB | 	rdlong	arg02, fp
3221c     2C 4E 85 F1 | 	sub	fp, #44
32220     A7 FA 01 FB | 	rdlong	result1, fp
32224     1C FA 05 F1 | 	add	result1, #28
32228     FD 2A 02 FB | 	rdlong	local03, result1
3222c     1C 4E 05 F1 | 	add	fp, #28
32230     A7 18 02 FB | 	rdlong	arg04, fp
32234     20 4E 85 F1 | 	sub	fp, #32
32238     0C 2B 82 F1 | 	sub	local03, arg04
3223c     09 2A 66 F0 | 	shl	local03, #9
32240     15 15 02 F1 | 	add	arg02, local03
32244     09 16 C6 F9 | 	decod	arg03, #9
32248     EC 3B BF FD | 	call	#__system____builtin_memmove
3224c     04 4E 05 F1 | 	add	fp, #4
32250     A7 18 02 FB | 	rdlong	arg04, fp
32254     0C FB 01 F6 | 	mov	result1, arg04
32258     04 4E 85 F1 | 	sub	fp, #4
3225c     10 18 06 F1 | 	add	arg04, #16
32260     0C 19 C2 FA | 	rdbyte	arg04, arg04
32264     7F 18 06 F5 | 	and	arg04, #127
32268     10 FA 05 F1 | 	add	result1, #16
3226c     FD 18 42 FC | 	wrbyte	arg04, result1
32270                 | LR__4905
32270     28 4E 05 F1 | 	add	fp, #40
32274     A7 FA 01 FB | 	rdlong	result1, fp
32278     09 FA 65 F0 | 	shl	result1, #9
3227c     04 4E 85 F1 | 	sub	fp, #4
32280     A7 FA 61 FC | 	wrlong	result1, fp
32284     24 4E 85 F1 | 	sub	fp, #36
32288                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
32288                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
32288                 | ' 				}
32288                 | ' 
32288                 | ' 
32288                 | ' 				wcnt =  ((UINT) 512 )  * cc;
32288                 | ' 				continue;
32288     74 01 90 FD | 	jmp	#LR__4909
3228c                 | LR__4906
3228c     04 4E 05 F1 | 	add	fp, #4
32290     A7 28 02 FB | 	rdlong	local02, fp
32294     1C 28 06 F1 | 	add	local02, #28
32298     14 FB 01 FB | 	rdlong	result1, local02
3229c     1C 4E 05 F1 | 	add	fp, #28
322a0     A7 28 02 FB | 	rdlong	local02, fp
322a4     20 4E 85 F1 | 	sub	fp, #32
322a8     14 FB 09 F2 | 	cmp	result1, local02 wz
322ac     90 00 90 AD |  if_e	jmp	#LR__4907
322b0     04 4E 05 F1 | 	add	fp, #4
322b4     A7 FA 01 FB | 	rdlong	result1, fp
322b8     FD 2A 02 F6 | 	mov	local03, result1
322bc     04 4E 85 F1 | 	sub	fp, #4
322c0     14 2A 06 F1 | 	add	local03, #20
322c4     15 2B 02 FB | 	rdlong	local03, local03
322c8     0C FA 05 F1 | 	add	result1, #12
322cc     FD 2C 02 FB | 	rdlong	local04, result1
322d0     16 2F 02 F6 | 	mov	local05, local04
322d4     17 2B 12 F2 | 	cmp	local03, local05 wc
322d8     64 00 90 3D |  if_ae	jmp	#LR__4907
322dc     18 4E 05 F1 | 	add	fp, #24
322e0     A7 18 02 FB | 	rdlong	arg04, fp
322e4     01 18 06 F1 | 	add	arg04, #1
322e8     0C 13 C2 FA | 	rdbyte	arg01, arg04
322ec     14 4E 85 F1 | 	sub	fp, #20
322f0     A7 30 02 FB | 	rdlong	local06, fp
322f4     28 30 06 F1 | 	add	local06, #40
322f8     18 33 02 F6 | 	mov	local07, local06
322fc     1C 4E 05 F1 | 	add	fp, #28
32300     A7 34 02 FB | 	rdlong	local08, fp
32304     20 4E 85 F1 | 	sub	fp, #32
32308     01 36 06 F6 | 	mov	local09, #1
3230c     19 15 02 F6 | 	mov	arg02, local07
32310     1A 17 02 F6 | 	mov	arg03, local08
32314     01 18 06 F6 | 	mov	arg04, #1
32318     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
3231c     FD 38 0A F6 | 	mov	local10, result1 wz
32320     1C 00 90 AD |  if_e	jmp	#LR__4907
32324     04 4E 05 F1 | 	add	fp, #4
32328     A7 38 02 FB | 	rdlong	local10, fp
3232c     04 4E 85 F1 | 	sub	fp, #4
32330     11 38 06 F1 | 	add	local10, #17
32334     1C 03 48 FC | 	wrbyte	#1, local10
32338                 | ' 				fp->fptr < fp->obj.objsize &&
32338                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
32338                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
32338     01 FA 05 F6 | 	mov	result1, #1
3233c     E0 01 90 FD | 	jmp	#LR__4913
32340                 | LR__4907
32340     04 4E 05 F1 | 	add	fp, #4
32344     A7 18 02 FB | 	rdlong	arg04, fp
32348     1C 4E 05 F1 | 	add	fp, #28
3234c     A7 FA 01 FB | 	rdlong	result1, fp
32350     20 4E 85 F1 | 	sub	fp, #32
32354     1C 18 06 F1 | 	add	arg04, #28
32358     0C FB 61 FC | 	wrlong	result1, arg04
3235c                 | LR__4908
3235c     04 4E 05 F1 | 	add	fp, #4
32360     A7 FA 01 FB | 	rdlong	result1, fp
32364     14 FA 05 F1 | 	add	result1, #20
32368     FD FA 01 FB | 	rdlong	result1, result1
3236c     FF FB 05 F5 | 	and	result1, #511
32370     09 3A C6 F9 | 	decod	local11, #9
32374     FD 3A 82 F1 | 	sub	local11, result1
32378     20 4E 05 F1 | 	add	fp, #32
3237c     A7 3A 62 FC | 	wrlong	local11, fp
32380     18 4E 85 F1 | 	sub	fp, #24
32384     A7 FA 01 FB | 	rdlong	result1, fp
32388     0C 4E 85 F1 | 	sub	fp, #12
3238c     FD 3A 1A F2 | 	cmp	local11, result1 wcz
32390     0C 4E 05 11 |  if_a	add	fp, #12
32394     A7 3A 02 1B |  if_a	rdlong	local11, fp
32398     18 4E 05 11 |  if_a	add	fp, #24
3239c     A7 3A 62 1C |  if_a	wrlong	local11, fp
323a0     24 4E 85 11 |  if_a	sub	fp, #36
323a4     04 4E 05 F1 | 	add	fp, #4
323a8     A7 3A 02 FB | 	rdlong	local11, fp
323ac     1D 13 02 F6 | 	mov	arg01, local11
323b0     28 12 06 F1 | 	add	arg01, #40
323b4     14 3A 06 F1 | 	add	local11, #20
323b8     1D 3B 02 FB | 	rdlong	local11, local11
323bc     FF 3B 06 F5 | 	and	local11, #511
323c0     1D 13 02 F1 | 	add	arg01, local11
323c4     2C 4E 05 F1 | 	add	fp, #44
323c8     A7 14 02 FB | 	rdlong	arg02, fp
323cc     0C 4E 85 F1 | 	sub	fp, #12
323d0     A7 16 02 FB | 	rdlong	arg03, fp
323d4     24 4E 85 F1 | 	sub	fp, #36
323d8     5C 3A BF FD | 	call	#__system____builtin_memmove
323dc     04 4E 05 F1 | 	add	fp, #4
323e0     A7 FA 01 FB | 	rdlong	result1, fp
323e4     FD 3A 02 F6 | 	mov	local11, result1
323e8     04 4E 85 F1 | 	sub	fp, #4
323ec     10 FA 05 F1 | 	add	result1, #16
323f0     FD FA C1 FA | 	rdbyte	result1, result1
323f4     80 FA 45 F5 | 	or	result1, #128
323f8     10 3A 06 F1 | 	add	local11, #16
323fc     1D FB 41 FC | 	wrbyte	result1, local11
32400                 | LR__4909
32400     0C 4E 05 F1 | 	add	fp, #12
32404     A7 3A 02 FB | 	rdlong	local11, fp
32408     18 4E 05 F1 | 	add	fp, #24
3240c     A7 FA 01 FB | 	rdlong	result1, fp
32410     FD 3A 82 F1 | 	sub	local11, result1
32414     18 4E 85 F1 | 	sub	fp, #24
32418     A7 3A 62 FC | 	wrlong	local11, fp
3241c     04 4E 05 F1 | 	add	fp, #4
32420     A7 3C 02 FB | 	rdlong	local12, fp
32424     1E 3B 02 FB | 	rdlong	local11, local12
32428     14 4E 05 F1 | 	add	fp, #20
3242c     A7 3E 02 FB | 	rdlong	local13, fp
32430     1F 3B 02 F1 | 	add	local11, local13
32434     1E 3B 62 FC | 	wrlong	local11, local12
32438     0C 4E 05 F1 | 	add	fp, #12
3243c     A7 3A 02 FB | 	rdlong	local11, fp
32440     0C 4E 85 F1 | 	sub	fp, #12
32444     A7 40 02 FB | 	rdlong	local14, fp
32448     20 3B 02 F1 | 	add	local11, local14
3244c     0C 4E 05 F1 | 	add	fp, #12
32450     A7 3A 62 FC | 	wrlong	local11, fp
32454     2C 4E 85 F1 | 	sub	fp, #44
32458     A7 42 02 FB | 	rdlong	local15, fp
3245c     21 3B 02 F6 | 	mov	local11, local15
32460     14 42 06 F1 | 	add	local15, #20
32464     21 43 02 FB | 	rdlong	local15, local15
32468     20 4E 05 F1 | 	add	fp, #32
3246c     A7 44 02 FB | 	rdlong	local16, fp
32470     22 43 02 F1 | 	add	local15, local16
32474     14 3A 06 F1 | 	add	local11, #20
32478     1D 43 62 FC | 	wrlong	local15, local11
3247c     20 4E 85 F1 | 	sub	fp, #32
32480     A7 46 02 FB | 	rdlong	local17, fp
32484     23 3B 02 F6 | 	mov	local11, local17
32488     23 49 02 F6 | 	mov	local18, local17
3248c     04 4E 85 F1 | 	sub	fp, #4
32490     14 46 06 F1 | 	add	local17, #20
32494     23 4B 02 FB | 	rdlong	local19, local17
32498     0C 48 06 F1 | 	add	local18, #12
3249c     24 4D 02 FB | 	rdlong	local20, local18
324a0     26 4B 1A F2 | 	cmp	local19, local20 wcz
324a4     24 00 90 ED |  if_be	jmp	#LR__4910
324a8     04 4E 05 F1 | 	add	fp, #4
324ac     A7 2E 02 FB | 	rdlong	local05, fp
324b0     04 4E 85 F1 | 	sub	fp, #4
324b4     17 2B 02 F6 | 	mov	local03, local05
324b8     14 2A 06 F1 | 	add	local03, #20
324bc     15 2D 02 FB | 	rdlong	local04, local03
324c0     14 2A 86 F1 | 	sub	local03, #20
324c4     16 4F 02 F6 | 	mov	local21, local04
324c8     20 00 90 FD | 	jmp	#LR__4911
324cc                 | LR__4910
324cc     04 4E 05 F1 | 	add	fp, #4
324d0     A7 32 02 FB | 	rdlong	local07, fp
324d4     04 4E 85 F1 | 	sub	fp, #4
324d8     19 39 02 F6 | 	mov	local10, local07
324dc     0C 38 06 F1 | 	add	local10, #12
324e0     1C 35 02 FB | 	rdlong	local08, local10
324e4     0C 38 86 F1 | 	sub	local10, #12
324e8     1A 4F 02 F6 | 	mov	local21, local08
324ec                 | LR__4911
324ec     0C 3A 06 F1 | 	add	local11, #12
324f0     1D 4F 62 FC | 	wrlong	local21, local11
324f4     5C F9 9F FD | 	jmp	#LR__4893
324f8                 | LR__4912
324f8     04 4E 05 F1 | 	add	fp, #4
324fc     A7 3C 02 FB | 	rdlong	local12, fp
32500     1E 27 02 F6 | 	mov	local01, local12
32504     04 4E 85 F1 | 	sub	fp, #4
32508     10 3C 06 F1 | 	add	local12, #16
3250c     1E 3B C2 FA | 	rdbyte	local11, local12
32510     40 3A 46 F5 | 	or	local11, #64
32514     10 26 06 F1 | 	add	local01, #16
32518     13 3B 42 FC | 	wrbyte	local11, local01
3251c                 | ' 
3251c                 | ' 
3251c                 | ' 
3251c                 | ' 
3251c                 | ' 
3251c                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
3251c                 | ' 		fp->flag |=  0x80 ;
3251c                 | ' 
3251c                 | ' 	}
3251c                 | ' 
3251c                 | ' 	fp->flag |=  0x40 ;
3251c                 | ' 
3251c                 | ' 	return FR_OK ;
3251c     00 FA 05 F6 | 	mov	result1, #0
32520                 | LR__4913
32520     A7 F0 03 F6 | 	mov	ptra, fp
32524     B2 00 A0 FD | 	call	#popregs_
32528                 | _fatfs_cc_f_write_ret
32528     2D 00 64 FD | 	ret
3252c                 | 
3252c                 | _fatfs_cc_f_sync
3252c     00 4A 05 F6 | 	mov	COUNT_, #0
32530     A8 00 A0 FD | 	call	#pushregs_
32534     18 F0 07 F1 | 	add	ptra, #24
32538     04 4E 05 F1 | 	add	fp, #4
3253c     A7 12 62 FC | 	wrlong	arg01, fp
32540     08 4E 05 F1 | 	add	fp, #8
32544     A7 14 02 F6 | 	mov	arg02, fp
32548     0C 4E 85 F1 | 	sub	fp, #12
3254c     D0 E8 BF FD | 	call	#_fatfs_cc_validate
32550     08 4E 05 F1 | 	add	fp, #8
32554     A7 FA 61 FC | 	wrlong	result1, fp
32558     08 4E 85 F1 | 	sub	fp, #8
3255c     00 FA 0D F2 | 	cmp	result1, #0 wz
32560     C0 01 90 5D |  if_ne	jmp	#LR__4923
32564     04 4E 05 F1 | 	add	fp, #4
32568     A7 18 02 FB | 	rdlong	arg04, fp
3256c     04 4E 85 F1 | 	sub	fp, #4
32570     10 18 06 F1 | 	add	arg04, #16
32574     0C 19 C2 FA | 	rdbyte	arg04, arg04
32578     40 18 CE F7 | 	test	arg04, #64 wz
3257c     A4 01 90 AD |  if_e	jmp	#LR__4922
32580     04 4E 05 F1 | 	add	fp, #4
32584     A7 18 02 FB | 	rdlong	arg04, fp
32588     04 4E 85 F1 | 	sub	fp, #4
3258c     10 18 06 F1 | 	add	arg04, #16
32590     0C 19 C2 FA | 	rdbyte	arg04, arg04
32594     80 18 CE F7 | 	test	arg04, #128 wz
32598     64 00 90 AD |  if_e	jmp	#LR__4920
3259c     0C 4E 05 F1 | 	add	fp, #12
325a0     A7 18 02 FB | 	rdlong	arg04, fp
325a4     01 18 06 F1 | 	add	arg04, #1
325a8     0C 13 C2 FA | 	rdbyte	arg01, arg04
325ac     08 4E 85 F1 | 	sub	fp, #8
325b0     A7 18 02 FB | 	rdlong	arg04, fp
325b4     0C 15 02 F6 | 	mov	arg02, arg04
325b8     28 14 06 F1 | 	add	arg02, #40
325bc     04 4E 85 F1 | 	sub	fp, #4
325c0     1C 18 06 F1 | 	add	arg04, #28
325c4     0C 17 02 FB | 	rdlong	arg03, arg04
325c8     01 18 06 F6 | 	mov	arg04, #1
325cc     0C AE BF FD | 	call	#_fatfs_cc_disk_write
325d0     00 FA 0D F2 | 	cmp	result1, #0 wz
325d4     01 FA 05 56 |  if_ne	mov	result1, #1
325d8     54 01 90 5D |  if_ne	jmp	#LR__4924
325dc     04 4E 05 F1 | 	add	fp, #4
325e0     A7 18 02 FB | 	rdlong	arg04, fp
325e4     0C 17 02 F6 | 	mov	arg03, arg04
325e8     04 4E 85 F1 | 	sub	fp, #4
325ec     10 18 06 F1 | 	add	arg04, #16
325f0     0C 19 C2 FA | 	rdbyte	arg04, arg04
325f4     7F 18 06 F5 | 	and	arg04, #127
325f8     10 16 06 F1 | 	add	arg03, #16
325fc     0B 19 42 FC | 	wrbyte	arg04, arg03
32600                 | LR__4920
32600     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
32604     10 4E 05 F1 | 	add	fp, #16
32608     A7 FA 61 FC | 	wrlong	result1, fp
3260c     04 4E 85 F1 | 	sub	fp, #4
32610     A7 12 02 FB | 	rdlong	arg01, fp
32614     08 4E 85 F1 | 	sub	fp, #8
32618     A7 18 02 FB | 	rdlong	arg04, fp
3261c     04 4E 85 F1 | 	sub	fp, #4
32620     20 18 06 F1 | 	add	arg04, #32
32624     0C 15 02 FB | 	rdlong	arg02, arg04
32628     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
3262c     08 4E 05 F1 | 	add	fp, #8
32630     A7 FA 61 FC | 	wrlong	result1, fp
32634     08 4E 85 F1 | 	sub	fp, #8
32638     00 FA 0D F2 | 	cmp	result1, #0 wz
3263c     E4 00 90 5D |  if_ne	jmp	#LR__4921
32640     04 4E 05 F1 | 	add	fp, #4
32644     A7 18 02 FB | 	rdlong	arg04, fp
32648     24 18 06 F1 | 	add	arg04, #36
3264c     0C 19 02 FB | 	rdlong	arg04, arg04
32650     10 4E 05 F1 | 	add	fp, #16
32654     A7 18 62 FC | 	wrlong	arg04, fp
32658     0C 17 02 F6 | 	mov	arg03, arg04
3265c     0B 16 06 F1 | 	add	arg03, #11
32660     0B 17 C2 FA | 	rdbyte	arg03, arg03
32664     20 16 46 F5 | 	or	arg03, #32
32668     0B 18 06 F1 | 	add	arg04, #11
3266c     0C 17 42 FC | 	wrbyte	arg03, arg04
32670     10 4E 85 F1 | 	sub	fp, #16
32674     A7 18 02 FB | 	rdlong	arg04, fp
32678     0C 13 02 FB | 	rdlong	arg01, arg04
3267c     10 4E 05 F1 | 	add	fp, #16
32680     A7 14 02 FB | 	rdlong	arg02, fp
32684     14 4E 85 F1 | 	sub	fp, #20
32688     08 18 06 F1 | 	add	arg04, #8
3268c     0C 17 02 FB | 	rdlong	arg03, arg04
32690     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
32694     14 4E 05 F1 | 	add	fp, #20
32698     A7 12 02 FB | 	rdlong	arg01, fp
3269c     1C 12 06 F1 | 	add	arg01, #28
326a0     10 4E 85 F1 | 	sub	fp, #16
326a4     A7 18 02 FB | 	rdlong	arg04, fp
326a8     0C 18 06 F1 | 	add	arg04, #12
326ac     0C 15 02 FB | 	rdlong	arg02, arg04
326b0     09 15 62 FC | 	wrlong	arg02, arg01
326b4     10 4E 05 F1 | 	add	fp, #16
326b8     A7 12 02 FB | 	rdlong	arg01, fp
326bc     16 12 06 F1 | 	add	arg01, #22
326c0     04 4E 85 F1 | 	sub	fp, #4
326c4     A7 14 02 FB | 	rdlong	arg02, fp
326c8     09 15 62 FC | 	wrlong	arg02, arg01
326cc     04 4E 05 F1 | 	add	fp, #4
326d0     A7 12 02 FB | 	rdlong	arg01, fp
326d4     12 12 06 F1 | 	add	arg01, #18
326d8     09 01 58 FC | 	wrword	#0, arg01
326dc     08 4E 85 F1 | 	sub	fp, #8
326e0     A7 18 02 FB | 	rdlong	arg04, fp
326e4     03 18 06 F1 | 	add	arg04, #3
326e8     0C 03 48 FC | 	wrbyte	#1, arg04
326ec     A7 12 02 FB | 	rdlong	arg01, fp
326f0     0C 4E 85 F1 | 	sub	fp, #12
326f4     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
326f8     08 4E 05 F1 | 	add	fp, #8
326fc     A7 FA 61 FC | 	wrlong	result1, fp
32700     04 4E 85 F1 | 	sub	fp, #4
32704     A7 18 02 FB | 	rdlong	arg04, fp
32708     0C 17 02 F6 | 	mov	arg03, arg04
3270c     04 4E 85 F1 | 	sub	fp, #4
32710     10 18 06 F1 | 	add	arg04, #16
32714     0C 19 C2 FA | 	rdbyte	arg04, arg04
32718     BF 18 06 F5 | 	and	arg04, #191
3271c     10 16 06 F1 | 	add	arg03, #16
32720     0B 19 42 FC | 	wrbyte	arg04, arg03
32724                 | LR__4921
32724                 | LR__4922
32724                 | LR__4923
32724                 | ' 					dir = fp->dir_ptr;
32724                 | ' 					dir[ 11 ] |=  0x20 ;
32724                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
32724                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
32724                 | ' 					st_dword(dir +  22 , tm);
32724                 | ' 					st_word(dir +  18 , 0);
32724                 | ' 					fs->wflag = 1;
32724                 | ' 					res = sync_fs(fs);
32724                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
32724                 | ' 				}
32724                 | ' 			}
32724                 | ' 		}
32724                 | ' 	}
32724                 | ' 
32724                 | ' 	return res ;
32724     08 4E 05 F1 | 	add	fp, #8
32728     A7 FA 01 FB | 	rdlong	result1, fp
3272c     08 4E 85 F1 | 	sub	fp, #8
32730                 | LR__4924
32730     A7 F0 03 F6 | 	mov	ptra, fp
32734     B2 00 A0 FD | 	call	#popregs_
32738                 | _fatfs_cc_f_sync_ret
32738     2D 00 64 FD | 	ret
3273c                 | 
3273c                 | _fatfs_cc_f_close
3273c     01 4A 05 F6 | 	mov	COUNT_, #1
32740     A8 00 A0 FD | 	call	#pushregs_
32744     10 F0 07 F1 | 	add	ptra, #16
32748     04 4E 05 F1 | 	add	fp, #4
3274c     A7 12 62 FC | 	wrlong	arg01, fp
32750     04 4E 85 F1 | 	sub	fp, #4
32754     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
32758     08 4E 05 F1 | 	add	fp, #8
3275c     A7 FA 61 FC | 	wrlong	result1, fp
32760     08 4E 85 F1 | 	sub	fp, #8
32764     00 FA 0D F2 | 	cmp	result1, #0 wz
32768     38 00 90 5D |  if_ne	jmp	#LR__4930
3276c     04 4E 05 F1 | 	add	fp, #4
32770     A7 12 02 FB | 	rdlong	arg01, fp
32774     08 4E 05 F1 | 	add	fp, #8
32778     A7 14 02 F6 | 	mov	arg02, fp
3277c     0C 4E 85 F1 | 	sub	fp, #12
32780     9C E6 BF FD | 	call	#_fatfs_cc_validate
32784     08 4E 05 F1 | 	add	fp, #8
32788     A7 FA 61 FC | 	wrlong	result1, fp
3278c     08 4E 85 F1 | 	sub	fp, #8
32790     00 FA 0D F2 | 	cmp	result1, #0 wz
32794     04 4E 05 A1 |  if_e	add	fp, #4
32798     A7 26 02 AB |  if_e	rdlong	local01, fp
3279c     04 4E 85 A1 |  if_e	sub	fp, #4
327a0     13 01 68 AC |  if_e	wrlong	#0, local01
327a4                 | LR__4930
327a4                 | ' 
327a4                 | ' 
327a4                 | ' 
327a4                 | ' 
327a4                 | ' 			fp->obj.fs = 0;
327a4                 | ' #line 4192 "ff.c"
327a4                 | ' 		}
327a4                 | ' 	}
327a4                 | ' 	return res;
327a4     08 4E 05 F1 | 	add	fp, #8
327a8     A7 FA 01 FB | 	rdlong	result1, fp
327ac     08 4E 85 F1 | 	sub	fp, #8
327b0     A7 F0 03 F6 | 	mov	ptra, fp
327b4     B2 00 A0 FD | 	call	#popregs_
327b8                 | _fatfs_cc_f_close_ret
327b8     2D 00 64 FD | 	ret
327bc                 | 
327bc                 | _fatfs_cc_f_lseek
327bc     00 4A 05 F6 | 	mov	COUNT_, #0
327c0     A8 00 A0 FD | 	call	#pushregs_
327c4     24 F0 07 F1 | 	add	ptra, #36
327c8     04 4E 05 F1 | 	add	fp, #4
327cc     A7 12 62 FC | 	wrlong	arg01, fp
327d0     04 4E 05 F1 | 	add	fp, #4
327d4     A7 14 62 FC | 	wrlong	arg02, fp
327d8     04 4E 85 F1 | 	sub	fp, #4
327dc     A7 12 02 FB | 	rdlong	arg01, fp
327e0     0C 4E 05 F1 | 	add	fp, #12
327e4     A7 14 02 F6 | 	mov	arg02, fp
327e8     10 4E 85 F1 | 	sub	fp, #16
327ec     30 E6 BF FD | 	call	#_fatfs_cc_validate
327f0     0C 4E 05 F1 | 	add	fp, #12
327f4     A7 FA 61 FC | 	wrlong	result1, fp
327f8     0C 4E 85 F1 | 	sub	fp, #12
327fc     00 FA 0D F2 | 	cmp	result1, #0 wz
32800     1C 00 90 5D |  if_ne	jmp	#LR__4940
32804     04 4E 05 F1 | 	add	fp, #4
32808     A7 18 02 FB | 	rdlong	arg04, fp
3280c     11 18 06 F1 | 	add	arg04, #17
32810     0C 19 C2 FA | 	rdbyte	arg04, arg04
32814     08 4E 05 F1 | 	add	fp, #8
32818     A7 18 62 FC | 	wrlong	arg04, fp
3281c     0C 4E 85 F1 | 	sub	fp, #12
32820                 | LR__4940
32820     0C 4E 05 F1 | 	add	fp, #12
32824     A7 18 0A FB | 	rdlong	arg04, fp wz
32828     0C 4E 85 F1 | 	sub	fp, #12
3282c     0C 4E 05 51 |  if_ne	add	fp, #12
32830     A7 FA 01 5B |  if_ne	rdlong	result1, fp
32834     0C 4E 85 51 |  if_ne	sub	fp, #12
32838     40 06 90 5D |  if_ne	jmp	#LR__4963
3283c     04 4E 05 F1 | 	add	fp, #4
32840     A7 18 02 FB | 	rdlong	arg04, fp
32844     04 4E 05 F1 | 	add	fp, #4
32848     A7 16 02 FB | 	rdlong	arg03, fp
3284c     08 4E 85 F1 | 	sub	fp, #8
32850     0C 18 06 F1 | 	add	arg04, #12
32854     0C 19 02 FB | 	rdlong	arg04, arg04
32858     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
3285c     3C 00 90 ED |  if_be	jmp	#LR__4941
32860     04 4E 05 F1 | 	add	fp, #4
32864     A7 16 02 FB | 	rdlong	arg03, fp
32868     04 4E 85 F1 | 	sub	fp, #4
3286c     10 16 06 F1 | 	add	arg03, #16
32870     0B 17 C2 FA | 	rdbyte	arg03, arg03
32874     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
32878     02 16 CE F7 | 	test	arg03, #2 wz
3287c     1C 00 90 5D |  if_ne	jmp	#LR__4941
32880     04 4E 05 F1 | 	add	fp, #4
32884     A7 16 02 FB | 	rdlong	arg03, fp
32888     0C 16 06 F1 | 	add	arg03, #12
3288c     0B 17 02 FB | 	rdlong	arg03, arg03
32890     04 4E 05 F1 | 	add	fp, #4
32894     A7 16 62 FC | 	wrlong	arg03, fp
32898     08 4E 85 F1 | 	sub	fp, #8
3289c                 | LR__4941
3289c     04 4E 05 F1 | 	add	fp, #4
328a0     A7 16 02 FB | 	rdlong	arg03, fp
328a4     14 16 06 F1 | 	add	arg03, #20
328a8     0B 17 02 FB | 	rdlong	arg03, arg03
328ac     1C 4E 05 F1 | 	add	fp, #28
328b0     A7 16 62 FC | 	wrlong	arg03, fp
328b4     1C 4E 85 F1 | 	sub	fp, #28
328b8     A7 16 02 FB | 	rdlong	arg03, fp
328bc     18 4E 05 F1 | 	add	fp, #24
328c0     A7 00 68 FC | 	wrlong	#0, fp
328c4     14 16 06 F1 | 	add	arg03, #20
328c8     0B 01 68 FC | 	wrlong	#0, arg03
328cc     14 4E 85 F1 | 	sub	fp, #20
328d0     A7 16 02 FB | 	rdlong	arg03, fp
328d4     08 4E 85 F1 | 	sub	fp, #8
328d8     01 16 16 F2 | 	cmp	arg03, #1 wc
328dc     E4 03 90 CD |  if_b	jmp	#LR__4957
328e0     10 4E 05 F1 | 	add	fp, #16
328e4     A7 16 02 FB | 	rdlong	arg03, fp
328e8     0A 16 06 F1 | 	add	arg03, #10
328ec     0B 19 E2 FA | 	rdword	arg04, arg03
328f0     09 18 66 F0 | 	shl	arg04, #9
328f4     08 4E 05 F1 | 	add	fp, #8
328f8     A7 18 62 FC | 	wrlong	arg04, fp
328fc     08 4E 05 F1 | 	add	fp, #8
32900     A7 18 02 FB | 	rdlong	arg04, fp
32904     20 4E 85 F1 | 	sub	fp, #32
32908     01 18 16 F2 | 	cmp	arg04, #1 wc
3290c     AC 00 90 CD |  if_b	jmp	#LR__4942
32910     08 4E 05 F1 | 	add	fp, #8
32914     A7 18 02 FB | 	rdlong	arg04, fp
32918     01 18 86 F1 | 	sub	arg04, #1
3291c     10 4E 05 F1 | 	add	fp, #16
32920     A7 16 02 FB | 	rdlong	arg03, fp
32924     0B 19 12 FD | 	qdiv	arg04, arg03
32928     08 4E 05 F1 | 	add	fp, #8
3292c     A7 FA 01 FB | 	rdlong	result1, fp
32930     01 FA 85 F1 | 	sub	result1, #1
32934     18 18 62 FD | 	getqx	arg04
32938     0B FB 11 FD | 	qdiv	result1, arg03
3293c     20 4E 85 F1 | 	sub	fp, #32
32940     18 16 62 FD | 	getqx	arg03
32944     0B 19 12 F2 | 	cmp	arg04, arg03 wc
32948     70 00 90 CD |  if_b	jmp	#LR__4942
3294c     04 4E 05 F1 | 	add	fp, #4
32950     A7 16 02 FB | 	rdlong	arg03, fp
32954     1C 4E 05 F1 | 	add	fp, #28
32958     A7 FA 01 FB | 	rdlong	result1, fp
3295c     01 FA 85 F1 | 	sub	result1, #1
32960     08 4E 85 F1 | 	sub	fp, #8
32964     A7 18 02 FB | 	rdlong	arg04, fp
32968     01 18 86 F1 | 	sub	arg04, #1
3296c     0C FB 21 F5 | 	andn	result1, arg04
32970     14 16 06 F1 | 	add	arg03, #20
32974     0B FB 61 FC | 	wrlong	result1, arg03
32978     10 4E 85 F1 | 	sub	fp, #16
3297c     A7 16 02 FB | 	rdlong	arg03, fp
32980     04 4E 85 F1 | 	sub	fp, #4
32984     A7 18 02 FB | 	rdlong	arg04, fp
32988     14 18 06 F1 | 	add	arg04, #20
3298c     0C 19 02 FB | 	rdlong	arg04, arg04
32990     0C 17 82 F1 | 	sub	arg03, arg04
32994     04 4E 05 F1 | 	add	fp, #4
32998     A7 16 62 FC | 	wrlong	arg03, fp
3299c     04 4E 85 F1 | 	sub	fp, #4
329a0     A7 16 02 FB | 	rdlong	arg03, fp
329a4     18 16 06 F1 | 	add	arg03, #24
329a8     0B 17 02 FB | 	rdlong	arg03, arg03
329ac     10 4E 05 F1 | 	add	fp, #16
329b0     A7 16 62 FC | 	wrlong	arg03, fp
329b4     14 4E 85 F1 | 	sub	fp, #20
329b8     D0 00 90 FD | 	jmp	#LR__4946
329bc                 | LR__4942
329bc     04 4E 05 F1 | 	add	fp, #4
329c0     A7 16 02 FB | 	rdlong	arg03, fp
329c4     08 16 06 F1 | 	add	arg03, #8
329c8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
329cc     10 4E 05 F1 | 	add	fp, #16
329d0     A7 16 62 FC | 	wrlong	arg03, fp
329d4     14 4E 85 F1 | 	sub	fp, #20
329d8     94 00 90 5D |  if_ne	jmp	#LR__4945
329dc     04 4E 05 F1 | 	add	fp, #4
329e0     A7 12 02 FB | 	rdlong	arg01, fp
329e4     04 4E 85 F1 | 	sub	fp, #4
329e8     00 14 06 F6 | 	mov	arg02, #0
329ec     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
329f0     14 4E 05 F1 | 	add	fp, #20
329f4     A7 FA 61 FC | 	wrlong	result1, fp
329f8     14 4E 85 F1 | 	sub	fp, #20
329fc     01 FA 0D F2 | 	cmp	result1, #1 wz
32a00     1C 00 90 5D |  if_ne	jmp	#LR__4943
32a04     04 4E 05 F1 | 	add	fp, #4
32a08     A7 16 02 FB | 	rdlong	arg03, fp
32a0c     04 4E 85 F1 | 	sub	fp, #4
32a10     11 16 06 F1 | 	add	arg03, #17
32a14     0B 05 48 FC | 	wrbyte	#2, arg03
32a18     02 FA 05 F6 | 	mov	result1, #2
32a1c     5C 04 90 FD | 	jmp	#LR__4963
32a20                 | LR__4943
32a20     14 4E 05 F1 | 	add	fp, #20
32a24     A7 FA 01 FB | 	rdlong	result1, fp
32a28     14 4E 85 F1 | 	sub	fp, #20
32a2c     FF FF 7F FF 
32a30     FF FB 0D F2 | 	cmp	result1, ##-1 wz
32a34     1C 00 90 5D |  if_ne	jmp	#LR__4944
32a38     04 4E 05 F1 | 	add	fp, #4
32a3c     A7 16 02 FB | 	rdlong	arg03, fp
32a40     04 4E 85 F1 | 	sub	fp, #4
32a44     11 16 06 F1 | 	add	arg03, #17
32a48     0B 03 48 FC | 	wrbyte	#1, arg03
32a4c     01 FA 05 F6 | 	mov	result1, #1
32a50     28 04 90 FD | 	jmp	#LR__4963
32a54                 | LR__4944
32a54     04 4E 05 F1 | 	add	fp, #4
32a58     A7 16 02 FB | 	rdlong	arg03, fp
32a5c     10 4E 05 F1 | 	add	fp, #16
32a60     A7 18 02 FB | 	rdlong	arg04, fp
32a64     14 4E 85 F1 | 	sub	fp, #20
32a68     08 16 06 F1 | 	add	arg03, #8
32a6c     0B 19 62 FC | 	wrlong	arg04, arg03
32a70                 | LR__4945
32a70     04 4E 05 F1 | 	add	fp, #4
32a74     A7 16 02 FB | 	rdlong	arg03, fp
32a78     10 4E 05 F1 | 	add	fp, #16
32a7c     A7 18 02 FB | 	rdlong	arg04, fp
32a80     14 4E 85 F1 | 	sub	fp, #20
32a84     18 16 06 F1 | 	add	arg03, #24
32a88     0B 19 62 FC | 	wrlong	arg04, arg03
32a8c                 | LR__4946
32a8c     14 4E 05 F1 | 	add	fp, #20
32a90     A7 16 0A FB | 	rdlong	arg03, fp wz
32a94     14 4E 85 F1 | 	sub	fp, #20
32a98     28 02 90 AD |  if_e	jmp	#LR__4956
32a9c                 | ' 				while (ofs > bcs) {
32a9c                 | LR__4947
32a9c     08 4E 05 F1 | 	add	fp, #8
32aa0     A7 18 02 FB | 	rdlong	arg04, fp
32aa4     10 4E 05 F1 | 	add	fp, #16
32aa8     A7 16 02 FB | 	rdlong	arg03, fp
32aac     18 4E 85 F1 | 	sub	fp, #24
32ab0     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
32ab4     68 01 90 ED |  if_be	jmp	#LR__4953
32ab8     08 4E 05 F1 | 	add	fp, #8
32abc     A7 18 02 FB | 	rdlong	arg04, fp
32ac0     10 4E 05 F1 | 	add	fp, #16
32ac4     A7 16 02 FB | 	rdlong	arg03, fp
32ac8     0B 19 82 F1 | 	sub	arg04, arg03
32acc     10 4E 85 F1 | 	sub	fp, #16
32ad0     A7 18 62 FC | 	wrlong	arg04, fp
32ad4     04 4E 85 F1 | 	sub	fp, #4
32ad8     A7 18 02 FB | 	rdlong	arg04, fp
32adc     0C FB 01 F6 | 	mov	result1, arg04
32ae0     14 18 06 F1 | 	add	arg04, #20
32ae4     0C 19 02 FB | 	rdlong	arg04, arg04
32ae8     14 4E 05 F1 | 	add	fp, #20
32aec     A7 16 02 FB | 	rdlong	arg03, fp
32af0     0B 19 02 F1 | 	add	arg04, arg03
32af4     14 FA 05 F1 | 	add	result1, #20
32af8     FD 18 62 FC | 	wrlong	arg04, result1
32afc     14 4E 85 F1 | 	sub	fp, #20
32b00     A7 16 02 FB | 	rdlong	arg03, fp
32b04     04 4E 85 F1 | 	sub	fp, #4
32b08     10 16 06 F1 | 	add	arg03, #16
32b0c     0B 17 C2 FA | 	rdbyte	arg03, arg03
32b10     02 16 CE F7 | 	test	arg03, #2 wz
32b14     3C 00 90 AD |  if_e	jmp	#LR__4948
32b18     04 4E 05 F1 | 	add	fp, #4
32b1c     A7 12 02 FB | 	rdlong	arg01, fp
32b20     10 4E 05 F1 | 	add	fp, #16
32b24     A7 14 02 FB | 	rdlong	arg02, fp
32b28     14 4E 85 F1 | 	sub	fp, #20
32b2c     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
32b30     14 4E 05 F1 | 	add	fp, #20
32b34     A7 FA 61 FC | 	wrlong	result1, fp
32b38     00 FA 4D F2 | 	cmps	result1, #0 wz
32b3c     14 4E 85 F1 | 	sub	fp, #20
32b40     08 4E 05 A1 |  if_e	add	fp, #8
32b44     A7 00 68 AC |  if_e	wrlong	#0, fp
32b48     08 4E 85 A1 |  if_e	sub	fp, #8
32b4c                 | ' 							ofs = 0; break;
32b4c     D0 00 90 AD |  if_e	jmp	#LR__4953
32b50     24 00 90 FD | 	jmp	#LR__4949
32b54                 | LR__4948
32b54     04 4E 05 F1 | 	add	fp, #4
32b58     A7 12 02 FB | 	rdlong	arg01, fp
32b5c     10 4E 05 F1 | 	add	fp, #16
32b60     A7 14 02 FB | 	rdlong	arg02, fp
32b64     14 4E 85 F1 | 	sub	fp, #20
32b68     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
32b6c     14 4E 05 F1 | 	add	fp, #20
32b70     A7 FA 61 FC | 	wrlong	result1, fp
32b74     14 4E 85 F1 | 	sub	fp, #20
32b78                 | LR__4949
32b78     14 4E 05 F1 | 	add	fp, #20
32b7c     A7 16 02 FB | 	rdlong	arg03, fp
32b80     14 4E 85 F1 | 	sub	fp, #20
32b84     FF FF 7F FF 
32b88     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
32b8c     1C 00 90 5D |  if_ne	jmp	#LR__4950
32b90     04 4E 05 F1 | 	add	fp, #4
32b94     A7 16 02 FB | 	rdlong	arg03, fp
32b98     04 4E 85 F1 | 	sub	fp, #4
32b9c     11 16 06 F1 | 	add	arg03, #17
32ba0     0B 03 48 FC | 	wrbyte	#1, arg03
32ba4     01 FA 05 F6 | 	mov	result1, #1
32ba8     D0 02 90 FD | 	jmp	#LR__4963
32bac                 | LR__4950
32bac     14 4E 05 F1 | 	add	fp, #20
32bb0     A7 16 02 FB | 	rdlong	arg03, fp
32bb4     14 4E 85 F1 | 	sub	fp, #20
32bb8     02 16 16 F2 | 	cmp	arg03, #2 wc
32bbc     24 00 90 CD |  if_b	jmp	#LR__4951
32bc0     10 4E 05 F1 | 	add	fp, #16
32bc4     A7 18 02 FB | 	rdlong	arg04, fp
32bc8     04 4E 05 F1 | 	add	fp, #4
32bcc     A7 16 02 FB | 	rdlong	arg03, fp
32bd0     14 4E 85 F1 | 	sub	fp, #20
32bd4     18 18 06 F1 | 	add	arg04, #24
32bd8     0C 19 02 FB | 	rdlong	arg04, arg04
32bdc     0C 17 12 F2 | 	cmp	arg03, arg04 wc
32be0     1C 00 90 CD |  if_b	jmp	#LR__4952
32be4                 | LR__4951
32be4     04 4E 05 F1 | 	add	fp, #4
32be8     A7 16 02 FB | 	rdlong	arg03, fp
32bec     04 4E 85 F1 | 	sub	fp, #4
32bf0     11 16 06 F1 | 	add	arg03, #17
32bf4     0B 05 48 FC | 	wrbyte	#2, arg03
32bf8     02 FA 05 F6 | 	mov	result1, #2
32bfc     7C 02 90 FD | 	jmp	#LR__4963
32c00                 | LR__4952
32c00     04 4E 05 F1 | 	add	fp, #4
32c04     A7 18 02 FB | 	rdlong	arg04, fp
32c08     10 4E 05 F1 | 	add	fp, #16
32c0c     A7 16 02 FB | 	rdlong	arg03, fp
32c10     14 4E 85 F1 | 	sub	fp, #20
32c14     18 18 06 F1 | 	add	arg04, #24
32c18     0C 17 62 FC | 	wrlong	arg03, arg04
32c1c     7C FE 9F FD | 	jmp	#LR__4947
32c20                 | LR__4953
32c20     04 4E 05 F1 | 	add	fp, #4
32c24     A7 16 02 FB | 	rdlong	arg03, fp
32c28     0B 13 02 F6 | 	mov	arg01, arg03
32c2c     14 16 06 F1 | 	add	arg03, #20
32c30     0B 15 02 FB | 	rdlong	arg02, arg03
32c34     04 4E 05 F1 | 	add	fp, #4
32c38     A7 16 02 FB | 	rdlong	arg03, fp
32c3c     0B 15 02 F1 | 	add	arg02, arg03
32c40     14 12 06 F1 | 	add	arg01, #20
32c44     09 15 62 FC | 	wrlong	arg02, arg01
32c48     A7 16 02 FB | 	rdlong	arg03, fp
32c4c     08 4E 85 F1 | 	sub	fp, #8
32c50     FF 17 CE F7 | 	test	arg03, #511 wz
32c54     6C 00 90 AD |  if_e	jmp	#LR__4955
32c58     10 4E 05 F1 | 	add	fp, #16
32c5c     A7 12 02 FB | 	rdlong	arg01, fp
32c60     04 4E 05 F1 | 	add	fp, #4
32c64     A7 14 02 FB | 	rdlong	arg02, fp
32c68     14 4E 85 F1 | 	sub	fp, #20
32c6c     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
32c70     1C 4E 05 F1 | 	add	fp, #28
32c74     A7 FA 61 FC | 	wrlong	result1, fp
32c78     1C 4E 85 F1 | 	sub	fp, #28
32c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
32c80     1C 00 90 5D |  if_ne	jmp	#LR__4954
32c84     04 4E 05 F1 | 	add	fp, #4
32c88     A7 16 02 FB | 	rdlong	arg03, fp
32c8c     04 4E 85 F1 | 	sub	fp, #4
32c90     11 16 06 F1 | 	add	arg03, #17
32c94     0B 05 48 FC | 	wrbyte	#2, arg03
32c98     02 FA 05 F6 | 	mov	result1, #2
32c9c     DC 01 90 FD | 	jmp	#LR__4963
32ca0                 | LR__4954
32ca0     1C 4E 05 F1 | 	add	fp, #28
32ca4     A7 18 02 FB | 	rdlong	arg04, fp
32ca8     14 4E 85 F1 | 	sub	fp, #20
32cac     A7 16 02 FB | 	rdlong	arg03, fp
32cb0     09 16 46 F0 | 	shr	arg03, #9
32cb4     0B 19 02 F1 | 	add	arg04, arg03
32cb8     14 4E 05 F1 | 	add	fp, #20
32cbc     A7 18 62 FC | 	wrlong	arg04, fp
32cc0     1C 4E 85 F1 | 	sub	fp, #28
32cc4                 | LR__4955
32cc4                 | LR__4956
32cc4                 | LR__4957
32cc4     04 4E 05 F1 | 	add	fp, #4
32cc8     A7 18 02 FB | 	rdlong	arg04, fp
32ccc     0C 17 02 F6 | 	mov	arg03, arg04
32cd0     04 4E 85 F1 | 	sub	fp, #4
32cd4     14 16 06 F1 | 	add	arg03, #20
32cd8     0B 17 02 FB | 	rdlong	arg03, arg03
32cdc     0C 18 06 F1 | 	add	arg04, #12
32ce0     0C 19 02 FB | 	rdlong	arg04, arg04
32ce4     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
32ce8     3C 00 90 ED |  if_be	jmp	#LR__4958
32cec     04 4E 05 F1 | 	add	fp, #4
32cf0     A7 18 02 FB | 	rdlong	arg04, fp
32cf4     0C 17 02 F6 | 	mov	arg03, arg04
32cf8     14 18 06 F1 | 	add	arg04, #20
32cfc     0C 19 02 FB | 	rdlong	arg04, arg04
32d00     0C 16 06 F1 | 	add	arg03, #12
32d04     0B 19 62 FC | 	wrlong	arg04, arg03
32d08     A7 18 02 FB | 	rdlong	arg04, fp
32d0c     0C 17 02 F6 | 	mov	arg03, arg04
32d10     04 4E 85 F1 | 	sub	fp, #4
32d14     10 18 06 F1 | 	add	arg04, #16
32d18     0C 19 C2 FA | 	rdbyte	arg04, arg04
32d1c     40 18 46 F5 | 	or	arg04, #64
32d20     10 16 06 F1 | 	add	arg03, #16
32d24     0B 19 42 FC | 	wrbyte	arg04, arg03
32d28                 | LR__4958
32d28     04 4E 05 F1 | 	add	fp, #4
32d2c     A7 16 02 FB | 	rdlong	arg03, fp
32d30     04 4E 85 F1 | 	sub	fp, #4
32d34     14 16 06 F1 | 	add	arg03, #20
32d38     0B 17 02 FB | 	rdlong	arg03, arg03
32d3c     FF 17 CE F7 | 	test	arg03, #511 wz
32d40     2C 01 90 AD |  if_e	jmp	#LR__4962
32d44     04 4E 05 F1 | 	add	fp, #4
32d48     A7 18 02 FB | 	rdlong	arg04, fp
32d4c     18 4E 05 F1 | 	add	fp, #24
32d50     A7 16 02 FB | 	rdlong	arg03, fp
32d54     1C 4E 85 F1 | 	sub	fp, #28
32d58     1C 18 06 F1 | 	add	arg04, #28
32d5c     0C 19 02 FB | 	rdlong	arg04, arg04
32d60     0C 17 0A F2 | 	cmp	arg03, arg04 wz
32d64     08 01 90 AD |  if_e	jmp	#LR__4962
32d68     04 4E 05 F1 | 	add	fp, #4
32d6c     A7 16 02 FB | 	rdlong	arg03, fp
32d70     04 4E 85 F1 | 	sub	fp, #4
32d74     10 16 06 F1 | 	add	arg03, #16
32d78     0B 17 C2 FA | 	rdbyte	arg03, arg03
32d7c     80 16 CE F7 | 	test	arg03, #128 wz
32d80     7C 00 90 AD |  if_e	jmp	#LR__4960
32d84     10 4E 05 F1 | 	add	fp, #16
32d88     A7 16 02 FB | 	rdlong	arg03, fp
32d8c     01 16 06 F1 | 	add	arg03, #1
32d90     0B 13 C2 FA | 	rdbyte	arg01, arg03
32d94     0C 4E 85 F1 | 	sub	fp, #12
32d98     A7 16 02 FB | 	rdlong	arg03, fp
32d9c     0B 15 02 F6 | 	mov	arg02, arg03
32da0     28 14 06 F1 | 	add	arg02, #40
32da4     04 4E 85 F1 | 	sub	fp, #4
32da8     1C 16 06 F1 | 	add	arg03, #28
32dac     0B 17 02 FB | 	rdlong	arg03, arg03
32db0     01 18 06 F6 | 	mov	arg04, #1
32db4     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
32db8     00 FA 0D F2 | 	cmp	result1, #0 wz
32dbc     1C 00 90 AD |  if_e	jmp	#LR__4959
32dc0     04 4E 05 F1 | 	add	fp, #4
32dc4     A7 16 02 FB | 	rdlong	arg03, fp
32dc8     04 4E 85 F1 | 	sub	fp, #4
32dcc     11 16 06 F1 | 	add	arg03, #17
32dd0     0B 03 48 FC | 	wrbyte	#1, arg03
32dd4     01 FA 05 F6 | 	mov	result1, #1
32dd8     A0 00 90 FD | 	jmp	#LR__4963
32ddc                 | LR__4959
32ddc     04 4E 05 F1 | 	add	fp, #4
32de0     A7 18 02 FB | 	rdlong	arg04, fp
32de4     0C 17 02 F6 | 	mov	arg03, arg04
32de8     04 4E 85 F1 | 	sub	fp, #4
32dec     10 18 06 F1 | 	add	arg04, #16
32df0     0C 19 C2 FA | 	rdbyte	arg04, arg04
32df4     7F 18 06 F5 | 	and	arg04, #127
32df8     10 16 06 F1 | 	add	arg03, #16
32dfc     0B 19 42 FC | 	wrbyte	arg04, arg03
32e00                 | LR__4960
32e00     10 4E 05 F1 | 	add	fp, #16
32e04     A7 16 02 FB | 	rdlong	arg03, fp
32e08     01 16 06 F1 | 	add	arg03, #1
32e0c     0B 13 C2 FA | 	rdbyte	arg01, arg03
32e10     0C 4E 85 F1 | 	sub	fp, #12
32e14     A7 14 02 FB | 	rdlong	arg02, fp
32e18     28 14 06 F1 | 	add	arg02, #40
32e1c     18 4E 05 F1 | 	add	fp, #24
32e20     A7 16 02 FB | 	rdlong	arg03, fp
32e24     1C 4E 85 F1 | 	sub	fp, #28
32e28     01 18 06 F6 | 	mov	arg04, #1
32e2c     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
32e30     00 FA 0D F2 | 	cmp	result1, #0 wz
32e34     1C 00 90 AD |  if_e	jmp	#LR__4961
32e38     04 4E 05 F1 | 	add	fp, #4
32e3c     A7 16 02 FB | 	rdlong	arg03, fp
32e40     04 4E 85 F1 | 	sub	fp, #4
32e44     11 16 06 F1 | 	add	arg03, #17
32e48     0B 03 48 FC | 	wrbyte	#1, arg03
32e4c     01 FA 05 F6 | 	mov	result1, #1
32e50     28 00 90 FD | 	jmp	#LR__4963
32e54                 | LR__4961
32e54     04 4E 05 F1 | 	add	fp, #4
32e58     A7 18 02 FB | 	rdlong	arg04, fp
32e5c     18 4E 05 F1 | 	add	fp, #24
32e60     A7 16 02 FB | 	rdlong	arg03, fp
32e64     1C 4E 85 F1 | 	sub	fp, #28
32e68     1C 18 06 F1 | 	add	arg04, #28
32e6c     0C 17 62 FC | 	wrlong	arg03, arg04
32e70                 | LR__4962
32e70                 | ' 
32e70                 | ' 			fp->sect = nsect;
32e70                 | ' 		}
32e70                 | ' 	}
32e70                 | ' 
32e70                 | ' 	return res ;
32e70     0C 4E 05 F1 | 	add	fp, #12
32e74     A7 FA 01 FB | 	rdlong	result1, fp
32e78     0C 4E 85 F1 | 	sub	fp, #12
32e7c                 | LR__4963
32e7c     A7 F0 03 F6 | 	mov	ptra, fp
32e80     B2 00 A0 FD | 	call	#popregs_
32e84                 | _fatfs_cc_f_lseek_ret
32e84     2D 00 64 FD | 	ret
32e88                 | 
32e88                 | _fatfs_cc_f_opendir
32e88     01 4A 05 F6 | 	mov	COUNT_, #1
32e8c     A8 00 A0 FD | 	call	#pushregs_
32e90     14 F0 07 F1 | 	add	ptra, #20
32e94     04 4E 05 F1 | 	add	fp, #4
32e98     A7 12 62 FC | 	wrlong	arg01, fp
32e9c     04 4E 05 F1 | 	add	fp, #4
32ea0     A7 14 62 FC | 	wrlong	arg02, fp
32ea4     04 4E 85 F1 | 	sub	fp, #4
32ea8     A7 16 0A FB | 	rdlong	arg03, fp wz
32eac     04 4E 85 F1 | 	sub	fp, #4
32eb0     09 FA 05 A6 |  if_e	mov	result1, #9
32eb4     78 01 90 AD |  if_e	jmp	#LR__4976
32eb8     08 4E 05 F1 | 	add	fp, #8
32ebc     A7 12 02 F6 | 	mov	arg01, fp
32ec0     08 4E 05 F1 | 	add	fp, #8
32ec4     A7 14 02 F6 | 	mov	arg02, fp
32ec8     10 4E 85 F1 | 	sub	fp, #16
32ecc     00 16 06 F6 | 	mov	arg03, #0
32ed0     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
32ed4     0C 4E 05 F1 | 	add	fp, #12
32ed8     A7 FA 61 FC | 	wrlong	result1, fp
32edc     0C 4E 85 F1 | 	sub	fp, #12
32ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
32ee4     20 01 90 5D |  if_ne	jmp	#LR__4975
32ee8     04 4E 05 F1 | 	add	fp, #4
32eec     A7 16 02 FB | 	rdlong	arg03, fp
32ef0     0C 4E 05 F1 | 	add	fp, #12
32ef4     A7 FA 01 FB | 	rdlong	result1, fp
32ef8     0B FB 61 FC | 	wrlong	result1, arg03
32efc     0C 4E 85 F1 | 	sub	fp, #12
32f00     A7 12 02 FB | 	rdlong	arg01, fp
32f04     04 4E 05 F1 | 	add	fp, #4
32f08     A7 14 02 FB | 	rdlong	arg02, fp
32f0c     08 4E 85 F1 | 	sub	fp, #8
32f10     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
32f14     0C 4E 05 F1 | 	add	fp, #12
32f18     A7 FA 61 FC | 	wrlong	result1, fp
32f1c     0C 4E 85 F1 | 	sub	fp, #12
32f20     00 FA 0D F2 | 	cmp	result1, #0 wz
32f24     C4 00 90 5D |  if_ne	jmp	#LR__4974
32f28     04 4E 05 F1 | 	add	fp, #4
32f2c     A7 16 02 FB | 	rdlong	arg03, fp
32f30     04 4E 85 F1 | 	sub	fp, #4
32f34     2B 16 06 F1 | 	add	arg03, #43
32f38     0B 17 C2 FA | 	rdbyte	arg03, arg03
32f3c     80 16 CE F7 | 	test	arg03, #128 wz
32f40     58 00 90 5D |  if_ne	jmp	#LR__4972
32f44     04 4E 05 F1 | 	add	fp, #4
32f48     A7 16 02 FB | 	rdlong	arg03, fp
32f4c     04 4E 85 F1 | 	sub	fp, #4
32f50     06 16 06 F1 | 	add	arg03, #6
32f54     0B 17 C2 FA | 	rdbyte	arg03, arg03
32f58     10 16 CE F7 | 	test	arg03, #16 wz
32f5c     30 00 90 AD |  if_e	jmp	#LR__4970
32f60     04 4E 05 F1 | 	add	fp, #4
32f64     A7 16 02 FB | 	rdlong	arg03, fp
32f68     0B 27 02 F6 | 	mov	local01, arg03
32f6c     0C 4E 05 F1 | 	add	fp, #12
32f70     A7 12 02 FB | 	rdlong	arg01, fp
32f74     10 4E 85 F1 | 	sub	fp, #16
32f78     1C 16 06 F1 | 	add	arg03, #28
32f7c     0B 15 02 FB | 	rdlong	arg02, arg03
32f80     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
32f84     08 26 06 F1 | 	add	local01, #8
32f88     13 FB 61 FC | 	wrlong	result1, local01
32f8c     0C 00 90 FD | 	jmp	#LR__4971
32f90                 | LR__4970
32f90     0C 4E 05 F1 | 	add	fp, #12
32f94     A7 0A 68 FC | 	wrlong	#5, fp
32f98     0C 4E 85 F1 | 	sub	fp, #12
32f9c                 | LR__4971
32f9c                 | LR__4972
32f9c     0C 4E 05 F1 | 	add	fp, #12
32fa0     A7 26 0A FB | 	rdlong	local01, fp wz
32fa4     0C 4E 85 F1 | 	sub	fp, #12
32fa8     40 00 90 5D |  if_ne	jmp	#LR__4973
32fac     04 4E 05 F1 | 	add	fp, #4
32fb0     A7 26 02 FB | 	rdlong	local01, fp
32fb4     0C 4E 05 F1 | 	add	fp, #12
32fb8     A7 16 02 FB | 	rdlong	arg03, fp
32fbc     06 16 06 F1 | 	add	arg03, #6
32fc0     0B 17 E2 FA | 	rdword	arg03, arg03
32fc4     04 26 06 F1 | 	add	local01, #4
32fc8     13 17 52 FC | 	wrword	arg03, local01
32fcc     0C 4E 85 F1 | 	sub	fp, #12
32fd0     A7 12 02 FB | 	rdlong	arg01, fp
32fd4     04 4E 85 F1 | 	sub	fp, #4
32fd8     00 14 06 F6 | 	mov	arg02, #0
32fdc     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
32fe0     0C 4E 05 F1 | 	add	fp, #12
32fe4     A7 FA 61 FC | 	wrlong	result1, fp
32fe8     0C 4E 85 F1 | 	sub	fp, #12
32fec                 | LR__4973
32fec                 | LR__4974
32fec     0C 4E 05 F1 | 	add	fp, #12
32ff0     A7 26 02 FB | 	rdlong	local01, fp
32ff4     0C 4E 85 F1 | 	sub	fp, #12
32ff8     04 26 0E F2 | 	cmp	local01, #4 wz
32ffc     0C 4E 05 A1 |  if_e	add	fp, #12
33000     A7 0A 68 AC |  if_e	wrlong	#5, fp
33004     0C 4E 85 A1 |  if_e	sub	fp, #12
33008                 | LR__4975
33008     0C 4E 05 F1 | 	add	fp, #12
3300c     A7 26 0A FB | 	rdlong	local01, fp wz
33010     0C 4E 85 F1 | 	sub	fp, #12
33014     04 4E 05 51 |  if_ne	add	fp, #4
33018     A7 26 02 5B |  if_ne	rdlong	local01, fp
3301c     04 4E 85 51 |  if_ne	sub	fp, #4
33020     13 01 68 5C |  if_ne	wrlong	#0, local01
33024                 | ' 
33024                 | ' 	return res ;
33024     0C 4E 05 F1 | 	add	fp, #12
33028     A7 FA 01 FB | 	rdlong	result1, fp
3302c     0C 4E 85 F1 | 	sub	fp, #12
33030                 | LR__4976
33030     A7 F0 03 F6 | 	mov	ptra, fp
33034     B2 00 A0 FD | 	call	#popregs_
33038                 | _fatfs_cc_f_opendir_ret
33038     2D 00 64 FD | 	ret
3303c                 | 
3303c                 | _fatfs_cc_f_closedir
3303c     00 4A 05 F6 | 	mov	COUNT_, #0
33040     A8 00 A0 FD | 	call	#pushregs_
33044     10 F0 07 F1 | 	add	ptra, #16
33048     04 4E 05 F1 | 	add	fp, #4
3304c     A7 12 62 FC | 	wrlong	arg01, fp
33050     08 4E 05 F1 | 	add	fp, #8
33054     A7 14 02 F6 | 	mov	arg02, fp
33058     0C 4E 85 F1 | 	sub	fp, #12
3305c     C0 DD BF FD | 	call	#_fatfs_cc_validate
33060     08 4E 05 F1 | 	add	fp, #8
33064     A7 FA 61 FC | 	wrlong	result1, fp
33068     08 4E 85 F1 | 	sub	fp, #8
3306c     00 FA 0D F2 | 	cmp	result1, #0 wz
33070     04 4E 05 A1 |  if_e	add	fp, #4
33074     A7 FA 01 AB |  if_e	rdlong	result1, fp
33078     04 4E 85 A1 |  if_e	sub	fp, #4
3307c     FD 00 68 AC |  if_e	wrlong	#0, result1
33080                 | ' 
33080                 | ' 
33080                 | ' 
33080                 | ' 
33080                 | ' 		dp->obj.fs = 0;
33080                 | ' #line 4633 "ff.c"
33080                 | ' 	}
33080                 | ' 	return res;
33080     08 4E 05 F1 | 	add	fp, #8
33084     A7 FA 01 FB | 	rdlong	result1, fp
33088     08 4E 85 F1 | 	sub	fp, #8
3308c     A7 F0 03 F6 | 	mov	ptra, fp
33090     B2 00 A0 FD | 	call	#popregs_
33094                 | _fatfs_cc_f_closedir_ret
33094     2D 00 64 FD | 	ret
33098                 | 
33098                 | _fatfs_cc_f_readdir
33098     00 4A 05 F6 | 	mov	COUNT_, #0
3309c     A8 00 A0 FD | 	call	#pushregs_
330a0     14 F0 07 F1 | 	add	ptra, #20
330a4     04 4E 05 F1 | 	add	fp, #4
330a8     A7 12 62 FC | 	wrlong	arg01, fp
330ac     04 4E 05 F1 | 	add	fp, #4
330b0     A7 14 62 FC | 	wrlong	arg02, fp
330b4     04 4E 85 F1 | 	sub	fp, #4
330b8     A7 12 02 FB | 	rdlong	arg01, fp
330bc     0C 4E 05 F1 | 	add	fp, #12
330c0     A7 14 02 F6 | 	mov	arg02, fp
330c4     10 4E 85 F1 | 	sub	fp, #16
330c8     54 DD BF FD | 	call	#_fatfs_cc_validate
330cc     0C 4E 05 F1 | 	add	fp, #12
330d0     A7 FA 61 FC | 	wrlong	result1, fp
330d4     0C 4E 85 F1 | 	sub	fp, #12
330d8     00 FA 0D F2 | 	cmp	result1, #0 wz
330dc     BC 00 90 5D |  if_ne	jmp	#LR__4983
330e0     08 4E 05 F1 | 	add	fp, #8
330e4     A7 FA 09 FB | 	rdlong	result1, fp wz
330e8     08 4E 85 F1 | 	sub	fp, #8
330ec     24 00 90 5D |  if_ne	jmp	#LR__4980
330f0     04 4E 05 F1 | 	add	fp, #4
330f4     A7 12 02 FB | 	rdlong	arg01, fp
330f8     04 4E 85 F1 | 	sub	fp, #4
330fc     00 14 06 F6 | 	mov	arg02, #0
33100     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
33104     0C 4E 05 F1 | 	add	fp, #12
33108     A7 FA 61 FC | 	wrlong	result1, fp
3310c     0C 4E 85 F1 | 	sub	fp, #12
33110     88 00 90 FD | 	jmp	#LR__4982
33114                 | LR__4980
33114     04 4E 05 F1 | 	add	fp, #4
33118     A7 12 02 FB | 	rdlong	arg01, fp
3311c     04 4E 85 F1 | 	sub	fp, #4
33120     00 14 06 F6 | 	mov	arg02, #0
33124     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
33128     0C 4E 05 F1 | 	add	fp, #12
3312c     A7 FA 61 FC | 	wrlong	result1, fp
33130     0C 4E 85 F1 | 	sub	fp, #12
33134     04 FA 0D F2 | 	cmp	result1, #4 wz
33138     0C 4E 05 A1 |  if_e	add	fp, #12
3313c     A7 00 68 AC |  if_e	wrlong	#0, fp
33140     0C 4E 85 A1 |  if_e	sub	fp, #12
33144     0C 4E 05 F1 | 	add	fp, #12
33148     A7 FA 09 FB | 	rdlong	result1, fp wz
3314c     0C 4E 85 F1 | 	sub	fp, #12
33150     48 00 90 5D |  if_ne	jmp	#LR__4981
33154     04 4E 05 F1 | 	add	fp, #4
33158     A7 12 02 FB | 	rdlong	arg01, fp
3315c     04 4E 05 F1 | 	add	fp, #4
33160     A7 14 02 FB | 	rdlong	arg02, fp
33164     08 4E 85 F1 | 	sub	fp, #8
33168     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
3316c     04 4E 05 F1 | 	add	fp, #4
33170     A7 12 02 FB | 	rdlong	arg01, fp
33174     04 4E 85 F1 | 	sub	fp, #4
33178     00 14 06 F6 | 	mov	arg02, #0
3317c     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
33180     0C 4E 05 F1 | 	add	fp, #12
33184     A7 FA 61 FC | 	wrlong	result1, fp
33188     0C 4E 85 F1 | 	sub	fp, #12
3318c     04 FA 0D F2 | 	cmp	result1, #4 wz
33190     0C 4E 05 A1 |  if_e	add	fp, #12
33194     A7 00 68 AC |  if_e	wrlong	#0, fp
33198     0C 4E 85 A1 |  if_e	sub	fp, #12
3319c                 | LR__4981
3319c                 | LR__4982
3319c                 | LR__4983
3319c                 | ' 			}
3319c                 | ' 			;
3319c                 | ' 		}
3319c                 | ' 	}
3319c                 | ' 	return res ;
3319c     0C 4E 05 F1 | 	add	fp, #12
331a0     A7 FA 01 FB | 	rdlong	result1, fp
331a4     0C 4E 85 F1 | 	sub	fp, #12
331a8     A7 F0 03 F6 | 	mov	ptra, fp
331ac     B2 00 A0 FD | 	call	#popregs_
331b0                 | _fatfs_cc_f_readdir_ret
331b0     2D 00 64 FD | 	ret
331b4                 | 
331b4                 | _fatfs_cc_f_stat
331b4     00 4A 05 F6 | 	mov	COUNT_, #0
331b8     A8 00 A0 FD | 	call	#pushregs_
331bc     40 F0 07 F1 | 	add	ptra, #64
331c0     04 4E 05 F1 | 	add	fp, #4
331c4     A7 12 62 FC | 	wrlong	arg01, fp
331c8     04 4E 05 F1 | 	add	fp, #4
331cc     A7 14 62 FC | 	wrlong	arg02, fp
331d0     04 4E 85 F1 | 	sub	fp, #4
331d4     A7 12 02 F6 | 	mov	arg01, fp
331d8     0C 4E 05 F1 | 	add	fp, #12
331dc     A7 14 02 F6 | 	mov	arg02, fp
331e0     10 4E 85 F1 | 	sub	fp, #16
331e4     00 16 06 F6 | 	mov	arg03, #0
331e8     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
331ec     0C 4E 05 F1 | 	add	fp, #12
331f0     A7 FA 61 FC | 	wrlong	result1, fp
331f4     0C 4E 85 F1 | 	sub	fp, #12
331f8     00 FA 0D F2 | 	cmp	result1, #0 wz
331fc     74 00 90 5D |  if_ne	jmp	#LR__4993
33200     10 4E 05 F1 | 	add	fp, #16
33204     A7 12 02 F6 | 	mov	arg01, fp
33208     0C 4E 85 F1 | 	sub	fp, #12
3320c     A7 14 02 FB | 	rdlong	arg02, fp
33210     04 4E 85 F1 | 	sub	fp, #4
33214     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
33218     0C 4E 05 F1 | 	add	fp, #12
3321c     A7 FA 61 FC | 	wrlong	result1, fp
33220     0C 4E 85 F1 | 	sub	fp, #12
33224     00 FA 0D F2 | 	cmp	result1, #0 wz
33228     48 00 90 5D |  if_ne	jmp	#LR__4992
3322c     3B 4E 05 F1 | 	add	fp, #59
33230     A7 FA C1 FA | 	rdbyte	result1, fp
33234     3B 4E 85 F1 | 	sub	fp, #59
33238     80 FA CD F7 | 	test	result1, #128 wz
3323c     0C 4E 05 51 |  if_ne	add	fp, #12
33240     A7 0C 68 5C |  if_ne	wrlong	#6, fp
33244     0C 4E 85 51 |  if_ne	sub	fp, #12
33248     28 00 90 5D |  if_ne	jmp	#LR__4991
3324c     08 4E 05 F1 | 	add	fp, #8
33250     A7 FA 09 FB | 	rdlong	result1, fp wz
33254     08 4E 85 F1 | 	sub	fp, #8
33258     18 00 90 AD |  if_e	jmp	#LR__4990
3325c     10 4E 05 F1 | 	add	fp, #16
33260     A7 12 02 F6 | 	mov	arg01, fp
33264     08 4E 85 F1 | 	sub	fp, #8
33268     A7 14 02 FB | 	rdlong	arg02, fp
3326c     08 4E 85 F1 | 	sub	fp, #8
33270     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
33274                 | LR__4990
33274                 | LR__4991
33274                 | LR__4992
33274                 | LR__4993
33274                 | ' 			}
33274                 | ' 		}
33274                 | ' 		;
33274                 | ' 	}
33274                 | ' 
33274                 | ' 	return res ;
33274     0C 4E 05 F1 | 	add	fp, #12
33278     A7 FA 01 FB | 	rdlong	result1, fp
3327c     0C 4E 85 F1 | 	sub	fp, #12
33280     A7 F0 03 F6 | 	mov	ptra, fp
33284     B2 00 A0 FD | 	call	#popregs_
33288                 | _fatfs_cc_f_stat_ret
33288     2D 00 64 FD | 	ret
3328c                 | 
3328c                 | _fatfs_cc_f_unlink
3328c     00 4A 05 F6 | 	mov	COUNT_, #0
33290     A8 00 A0 FD | 	call	#pushregs_
33294     74 F0 07 F1 | 	add	ptra, #116
33298     04 4E 05 F1 | 	add	fp, #4
3329c     A7 12 62 FC | 	wrlong	arg01, fp
332a0     68 4E 05 F1 | 	add	fp, #104
332a4     A7 00 68 FC | 	wrlong	#0, fp
332a8     68 4E 85 F1 | 	sub	fp, #104
332ac     A7 12 02 F6 | 	mov	arg01, fp
332b0     6C 4E 05 F1 | 	add	fp, #108
332b4     A7 14 02 F6 | 	mov	arg02, fp
332b8     70 4E 85 F1 | 	sub	fp, #112
332bc     02 16 06 F6 | 	mov	arg03, #2
332c0     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
332c4     08 4E 05 F1 | 	add	fp, #8
332c8     A7 FA 61 FC | 	wrlong	result1, fp
332cc     08 4E 85 F1 | 	sub	fp, #8
332d0     00 FA 0D F2 | 	cmp	result1, #0 wz
332d4     E4 01 90 5D |  if_ne	jmp	#LR__5008
332d8     70 4E 05 F1 | 	add	fp, #112
332dc     A7 16 02 FB | 	rdlong	arg03, fp
332e0     64 4E 85 F1 | 	sub	fp, #100
332e4     A7 16 62 FC | 	wrlong	arg03, fp
332e8     A7 12 02 F6 | 	mov	arg01, fp
332ec     08 4E 85 F1 | 	sub	fp, #8
332f0     A7 14 02 FB | 	rdlong	arg02, fp
332f4     04 4E 85 F1 | 	sub	fp, #4
332f8     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
332fc     08 4E 05 F1 | 	add	fp, #8
33300     A7 FA 61 FC | 	wrlong	result1, fp
33304     00 FA 4D F2 | 	cmps	result1, #0 wz
33308     08 4E 85 F1 | 	sub	fp, #8
3330c     AC 01 90 5D |  if_ne	jmp	#LR__5007
33310     37 4E 05 F1 | 	add	fp, #55
33314     A7 FA C1 FA | 	rdbyte	result1, fp
33318     37 4E 85 F1 | 	sub	fp, #55
3331c     80 FA CD F7 | 	test	result1, #128 wz
33320     08 4E 05 51 |  if_ne	add	fp, #8
33324     A7 0C 68 5C |  if_ne	wrlong	#6, fp
33328     08 4E 85 51 |  if_ne	sub	fp, #8
3332c     1C 00 90 5D |  if_ne	jmp	#LR__5000
33330     12 4E 05 F1 | 	add	fp, #18
33334     A7 FA C1 FA | 	rdbyte	result1, fp
33338     12 4E 85 F1 | 	sub	fp, #18
3333c     01 FA CD F7 | 	test	result1, #1 wz
33340     08 4E 05 51 |  if_ne	add	fp, #8
33344     A7 0E 68 5C |  if_ne	wrlong	#7, fp
33348     08 4E 85 51 |  if_ne	sub	fp, #8
3334c                 | LR__5000
3334c     08 4E 05 F1 | 	add	fp, #8
33350     A7 FA 09 FB | 	rdlong	result1, fp wz
33354     08 4E 85 F1 | 	sub	fp, #8
33358     C8 00 90 5D |  if_ne	jmp	#LR__5003
3335c     70 4E 05 F1 | 	add	fp, #112
33360     A7 12 02 FB | 	rdlong	arg01, fp
33364     48 4E 85 F1 | 	sub	fp, #72
33368     A7 14 02 FB | 	rdlong	arg02, fp
3336c     28 4E 85 F1 | 	sub	fp, #40
33370     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
33374     6C 4E 05 F1 | 	add	fp, #108
33378     A7 FA 61 FC | 	wrlong	result1, fp
3337c     5A 4E 85 F1 | 	sub	fp, #90
33380     A7 FA C1 FA | 	rdbyte	result1, fp
33384     12 4E 85 F1 | 	sub	fp, #18
33388     10 FA CD F7 | 	test	result1, #16 wz
3338c     94 00 90 AD |  if_e	jmp	#LR__5002
33390     70 4E 05 F1 | 	add	fp, #112
33394     A7 FA 01 FB | 	rdlong	result1, fp
33398     34 4E 85 F1 | 	sub	fp, #52
3339c     A7 FA 61 FC | 	wrlong	result1, fp
333a0     30 4E 05 F1 | 	add	fp, #48
333a4     A7 16 02 FB | 	rdlong	arg03, fp
333a8     28 4E 85 F1 | 	sub	fp, #40
333ac     A7 16 62 FC | 	wrlong	arg03, fp
333b0     08 4E 85 F1 | 	sub	fp, #8
333b4     A7 12 02 F6 | 	mov	arg01, fp
333b8     3C 4E 85 F1 | 	sub	fp, #60
333bc     00 14 06 F6 | 	mov	arg02, #0
333c0     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
333c4     08 4E 05 F1 | 	add	fp, #8
333c8     A7 FA 61 FC | 	wrlong	result1, fp
333cc     08 4E 85 F1 | 	sub	fp, #8
333d0     00 FA 0D F2 | 	cmp	result1, #0 wz
333d4     4C 00 90 5D |  if_ne	jmp	#LR__5001
333d8     3C 4E 05 F1 | 	add	fp, #60
333dc     A7 12 02 F6 | 	mov	arg01, fp
333e0     3C 4E 85 F1 | 	sub	fp, #60
333e4     00 14 06 F6 | 	mov	arg02, #0
333e8     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
333ec     08 4E 05 F1 | 	add	fp, #8
333f0     A7 FA 61 FC | 	wrlong	result1, fp
333f4     00 FA 4D F2 | 	cmps	result1, #0 wz
333f8     08 4E 85 F1 | 	sub	fp, #8
333fc     08 4E 05 A1 |  if_e	add	fp, #8
33400     A7 0E 68 AC |  if_e	wrlong	#7, fp
33404     08 4E 85 A1 |  if_e	sub	fp, #8
33408     08 4E 05 F1 | 	add	fp, #8
3340c     A7 FA 01 FB | 	rdlong	result1, fp
33410     08 4E 85 F1 | 	sub	fp, #8
33414     04 FA 0D F2 | 	cmp	result1, #4 wz
33418     08 4E 05 A1 |  if_e	add	fp, #8
3341c     A7 00 68 AC |  if_e	wrlong	#0, fp
33420     08 4E 85 A1 |  if_e	sub	fp, #8
33424                 | LR__5001
33424                 | LR__5002
33424                 | LR__5003
33424     08 4E 05 F1 | 	add	fp, #8
33428     A7 FA 09 FB | 	rdlong	result1, fp wz
3342c     08 4E 85 F1 | 	sub	fp, #8
33430     88 00 90 5D |  if_ne	jmp	#LR__5006
33434     0C 4E 05 F1 | 	add	fp, #12
33438     A7 12 02 F6 | 	mov	arg01, fp
3343c     0C 4E 85 F1 | 	sub	fp, #12
33440     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
33444     08 4E 05 F1 | 	add	fp, #8
33448     A7 FA 61 FC | 	wrlong	result1, fp
3344c     08 4E 85 F1 | 	sub	fp, #8
33450     00 FA 0D F2 | 	cmp	result1, #0 wz
33454     38 00 90 5D |  if_ne	jmp	#LR__5004
33458     6C 4E 05 F1 | 	add	fp, #108
3345c     A7 FA 09 FB | 	rdlong	result1, fp wz
33460     6C 4E 85 F1 | 	sub	fp, #108
33464     28 00 90 AD |  if_e	jmp	#LR__5004
33468     0C 4E 05 F1 | 	add	fp, #12
3346c     A7 12 02 F6 | 	mov	arg01, fp
33470     60 4E 05 F1 | 	add	fp, #96
33474     A7 14 02 FB | 	rdlong	arg02, fp
33478     6C 4E 85 F1 | 	sub	fp, #108
3347c     00 16 06 F6 | 	mov	arg03, #0
33480     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
33484     08 4E 05 F1 | 	add	fp, #8
33488     A7 FA 61 FC | 	wrlong	result1, fp
3348c     08 4E 85 F1 | 	sub	fp, #8
33490                 | LR__5004
33490     08 4E 05 F1 | 	add	fp, #8
33494     A7 FA 09 FB | 	rdlong	result1, fp wz
33498     08 4E 85 F1 | 	sub	fp, #8
3349c     1C 00 90 5D |  if_ne	jmp	#LR__5005
334a0     70 4E 05 F1 | 	add	fp, #112
334a4     A7 12 02 FB | 	rdlong	arg01, fp
334a8     70 4E 85 F1 | 	sub	fp, #112
334ac     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
334b0     08 4E 05 F1 | 	add	fp, #8
334b4     A7 FA 61 FC | 	wrlong	result1, fp
334b8     08 4E 85 F1 | 	sub	fp, #8
334bc                 | LR__5005
334bc                 | LR__5006
334bc                 | LR__5007
334bc                 | LR__5008
334bc                 | ' 			}
334bc                 | ' 		}
334bc                 | ' 		;
334bc                 | ' 	}
334bc                 | ' 
334bc                 | ' 	return res ;
334bc     08 4E 05 F1 | 	add	fp, #8
334c0     A7 FA 01 FB | 	rdlong	result1, fp
334c4     08 4E 85 F1 | 	sub	fp, #8
334c8     A7 F0 03 F6 | 	mov	ptra, fp
334cc     B2 00 A0 FD | 	call	#popregs_
334d0                 | _fatfs_cc_f_unlink_ret
334d0     2D 00 64 FD | 	ret
334d4                 | 
334d4                 | _fatfs_cc_f_mkdir
334d4     00 4A 05 F6 | 	mov	COUNT_, #0
334d8     A8 00 A0 FD | 	call	#pushregs_
334dc     5C F0 07 F1 | 	add	ptra, #92
334e0     04 4E 05 F1 | 	add	fp, #4
334e4     A7 12 62 FC | 	wrlong	arg01, fp
334e8     A7 12 02 F6 | 	mov	arg01, fp
334ec     48 4E 05 F1 | 	add	fp, #72
334f0     A7 14 02 F6 | 	mov	arg02, fp
334f4     4C 4E 85 F1 | 	sub	fp, #76
334f8     02 16 06 F6 | 	mov	arg03, #2
334fc     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
33500     08 4E 05 F1 | 	add	fp, #8
33504     A7 FA 61 FC | 	wrlong	result1, fp
33508     08 4E 85 F1 | 	sub	fp, #8
3350c     00 FA 0D F2 | 	cmp	result1, #0 wz
33510     C4 02 90 5D |  if_ne	jmp	#LR__5015
33514     4C 4E 05 F1 | 	add	fp, #76
33518     A7 16 02 FB | 	rdlong	arg03, fp
3351c     40 4E 85 F1 | 	sub	fp, #64
33520     A7 16 62 FC | 	wrlong	arg03, fp
33524     A7 12 02 F6 | 	mov	arg01, fp
33528     08 4E 85 F1 | 	sub	fp, #8
3352c     A7 14 02 FB | 	rdlong	arg02, fp
33530     04 4E 85 F1 | 	sub	fp, #4
33534     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
33538     08 4E 05 F1 | 	add	fp, #8
3353c     A7 FA 61 FC | 	wrlong	result1, fp
33540     00 FA 4D F2 | 	cmps	result1, #0 wz
33544     08 4E 85 F1 | 	sub	fp, #8
33548     08 4E 05 A1 |  if_e	add	fp, #8
3354c     A7 10 68 AC |  if_e	wrlong	#8, fp
33550     08 4E 85 A1 |  if_e	sub	fp, #8
33554     08 4E 05 F1 | 	add	fp, #8
33558     A7 FA 01 FB | 	rdlong	result1, fp
3355c     08 4E 85 F1 | 	sub	fp, #8
33560     04 FA 0D F2 | 	cmp	result1, #4 wz
33564     70 02 90 5D |  if_ne	jmp	#LR__5014
33568     4C 4E 05 F1 | 	add	fp, #76
3356c     A7 16 02 FB | 	rdlong	arg03, fp
33570     10 4E 85 F1 | 	sub	fp, #16
33574     A7 16 62 FC | 	wrlong	arg03, fp
33578     A7 12 02 F6 | 	mov	arg01, fp
3357c     3C 4E 85 F1 | 	sub	fp, #60
33580     00 14 06 F6 | 	mov	arg02, #0
33584     04 AC BF FD | 	call	#_fatfs_cc_create_chain
33588     50 4E 05 F1 | 	add	fp, #80
3358c     A7 FA 61 FC | 	wrlong	result1, fp
33590     48 4E 85 F1 | 	sub	fp, #72
33594     A7 00 68 FC | 	wrlong	#0, fp
33598     48 4E 05 F1 | 	add	fp, #72
3359c     A7 FA 09 FB | 	rdlong	result1, fp wz
335a0     50 4E 85 F1 | 	sub	fp, #80
335a4     08 4E 05 A1 |  if_e	add	fp, #8
335a8     A7 0E 68 AC |  if_e	wrlong	#7, fp
335ac     08 4E 85 A1 |  if_e	sub	fp, #8
335b0     50 4E 05 F1 | 	add	fp, #80
335b4     A7 FA 01 FB | 	rdlong	result1, fp
335b8     50 4E 85 F1 | 	sub	fp, #80
335bc     01 FA 0D F2 | 	cmp	result1, #1 wz
335c0     08 4E 05 A1 |  if_e	add	fp, #8
335c4     A7 04 68 AC |  if_e	wrlong	#2, fp
335c8     08 4E 85 A1 |  if_e	sub	fp, #8
335cc     50 4E 05 F1 | 	add	fp, #80
335d0     A7 16 02 FB | 	rdlong	arg03, fp
335d4     50 4E 85 F1 | 	sub	fp, #80
335d8     FF FF 7F FF 
335dc     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
335e0     08 4E 05 A1 |  if_e	add	fp, #8
335e4     A7 02 68 AC |  if_e	wrlong	#1, fp
335e8     08 4E 85 A1 |  if_e	sub	fp, #8
335ec     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
335f0     58 4E 05 F1 | 	add	fp, #88
335f4     A7 FA 61 FC | 	wrlong	result1, fp
335f8     50 4E 85 F1 | 	sub	fp, #80
335fc     A7 FA 09 FB | 	rdlong	result1, fp wz
33600     08 4E 85 F1 | 	sub	fp, #8
33604     1C 01 90 5D |  if_ne	jmp	#LR__5011
33608     4C 4E 05 F1 | 	add	fp, #76
3360c     A7 12 02 FB | 	rdlong	arg01, fp
33610     04 4E 05 F1 | 	add	fp, #4
33614     A7 14 02 FB | 	rdlong	arg02, fp
33618     50 4E 85 F1 | 	sub	fp, #80
3361c     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
33620     08 4E 05 F1 | 	add	fp, #8
33624     A7 FA 61 FC | 	wrlong	result1, fp
33628     00 FA 4D F2 | 	cmps	result1, #0 wz
3362c     08 4E 85 F1 | 	sub	fp, #8
33630     F0 00 90 5D |  if_ne	jmp	#LR__5010
33634     4C 4E 05 F1 | 	add	fp, #76
33638     A7 12 02 FB | 	rdlong	arg01, fp
3363c     4C 4E 85 F1 | 	sub	fp, #76
33640     34 12 06 F1 | 	add	arg01, #52
33644     20 14 06 F6 | 	mov	arg02, #32
33648     0B 16 06 F6 | 	mov	arg03, #11
3364c     98 00 A0 FD | 	call	#\builtin_bytefill_
33650     4C 4E 05 F1 | 	add	fp, #76
33654     A7 FA 01 FB | 	rdlong	result1, fp
33658     34 FA 05 F1 | 	add	result1, #52
3365c     FD 5C 48 FC | 	wrbyte	#46, result1
33660     A7 16 02 FB | 	rdlong	arg03, fp
33664     3F 16 06 F1 | 	add	arg03, #63
33668     0B 21 48 FC | 	wrbyte	#16, arg03
3366c     A7 12 02 FB | 	rdlong	arg01, fp
33670     4A 12 06 F1 | 	add	arg01, #74
33674     0C 4E 05 F1 | 	add	fp, #12
33678     A7 14 02 FB | 	rdlong	arg02, fp
3367c     09 15 62 FC | 	wrlong	arg02, arg01
33680     0C 4E 85 F1 | 	sub	fp, #12
33684     A7 14 02 FB | 	rdlong	arg02, fp
33688     0A 13 02 F6 | 	mov	arg01, arg02
3368c     34 14 06 F1 | 	add	arg02, #52
33690     04 4E 05 F1 | 	add	fp, #4
33694     A7 16 02 FB | 	rdlong	arg03, fp
33698     50 4E 85 F1 | 	sub	fp, #80
3369c     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
336a0     4C 4E 05 F1 | 	add	fp, #76
336a4     A7 14 02 FB | 	rdlong	arg02, fp
336a8     0A 13 02 F6 | 	mov	arg01, arg02
336ac     54 12 06 F1 | 	add	arg01, #84
336b0     4C 4E 85 F1 | 	sub	fp, #76
336b4     34 14 06 F1 | 	add	arg02, #52
336b8     20 16 06 F6 | 	mov	arg03, #32
336bc     78 27 BF FD | 	call	#__system____builtin_memmove
336c0     4C 4E 05 F1 | 	add	fp, #76
336c4     A7 16 02 FB | 	rdlong	arg03, fp
336c8     55 16 06 F1 | 	add	arg03, #85
336cc     0B 5D 48 FC | 	wrbyte	#46, arg03
336d0     38 4E 85 F1 | 	sub	fp, #56
336d4     A7 16 02 FB | 	rdlong	arg03, fp
336d8     40 4E 05 F1 | 	add	fp, #64
336dc     A7 16 62 FC | 	wrlong	arg03, fp
336e0     08 4E 85 F1 | 	sub	fp, #8
336e4     A7 14 02 FB | 	rdlong	arg02, fp
336e8     0A 13 02 F6 | 	mov	arg01, arg02
336ec     54 14 06 F1 | 	add	arg02, #84
336f0     4C 4E 85 F1 | 	sub	fp, #76
336f4     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
336f8     4C 4E 05 F1 | 	add	fp, #76
336fc     A7 16 02 FB | 	rdlong	arg03, fp
33700     03 16 06 F1 | 	add	arg03, #3
33704     0B 03 48 FC | 	wrbyte	#1, arg03
33708     40 4E 85 F1 | 	sub	fp, #64
3370c     A7 12 02 F6 | 	mov	arg01, fp
33710     0C 4E 85 F1 | 	sub	fp, #12
33714     44 BA BF FD | 	call	#_fatfs_cc_dir_register
33718     08 4E 05 F1 | 	add	fp, #8
3371c     A7 FA 61 FC | 	wrlong	result1, fp
33720     08 4E 85 F1 | 	sub	fp, #8
33724                 | LR__5010
33724                 | LR__5011
33724     08 4E 05 F1 | 	add	fp, #8
33728     A7 FA 09 FB | 	rdlong	result1, fp wz
3372c     08 4E 85 F1 | 	sub	fp, #8
33730     88 00 90 5D |  if_ne	jmp	#LR__5012
33734     28 4E 05 F1 | 	add	fp, #40
33738     A7 12 02 FB | 	rdlong	arg01, fp
3373c     16 12 06 F1 | 	add	arg01, #22
33740     30 4E 05 F1 | 	add	fp, #48
33744     A7 14 02 FB | 	rdlong	arg02, fp
33748     09 15 62 FC | 	wrlong	arg02, arg01
3374c     0C 4E 85 F1 | 	sub	fp, #12
33750     A7 12 02 FB | 	rdlong	arg01, fp
33754     24 4E 85 F1 | 	sub	fp, #36
33758     A7 14 02 FB | 	rdlong	arg02, fp
3375c     28 4E 05 F1 | 	add	fp, #40
33760     A7 16 02 FB | 	rdlong	arg03, fp
33764     50 4E 85 F1 | 	sub	fp, #80
33768     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
3376c     28 4E 05 F1 | 	add	fp, #40
33770     A7 FA 01 FB | 	rdlong	result1, fp
33774     0B FA 05 F1 | 	add	result1, #11
33778     FD 20 48 FC | 	wrbyte	#16, result1
3377c     24 4E 05 F1 | 	add	fp, #36
33780     A7 FA 01 FB | 	rdlong	result1, fp
33784     03 FA 05 F1 | 	add	result1, #3
33788     FD 02 48 FC | 	wrbyte	#1, result1
3378c     44 4E 85 F1 | 	sub	fp, #68
33790     A7 FA 09 FB | 	rdlong	result1, fp wz
33794     08 4E 85 F1 | 	sub	fp, #8
33798     3C 00 90 5D |  if_ne	jmp	#LR__5013
3379c     4C 4E 05 F1 | 	add	fp, #76
337a0     A7 12 02 FB | 	rdlong	arg01, fp
337a4     4C 4E 85 F1 | 	sub	fp, #76
337a8     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
337ac     08 4E 05 F1 | 	add	fp, #8
337b0     A7 FA 61 FC | 	wrlong	result1, fp
337b4     08 4E 85 F1 | 	sub	fp, #8
337b8     1C 00 90 FD | 	jmp	#LR__5013
337bc                 | LR__5012
337bc     3C 4E 05 F1 | 	add	fp, #60
337c0     A7 12 02 F6 | 	mov	arg01, fp
337c4     14 4E 05 F1 | 	add	fp, #20
337c8     A7 14 02 FB | 	rdlong	arg02, fp
337cc     50 4E 85 F1 | 	sub	fp, #80
337d0     00 16 06 F6 | 	mov	arg03, #0
337d4     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
337d8                 | LR__5013
337d8                 | LR__5014
337d8                 | LR__5015
337d8                 | ' 				remove_chain(&sobj, dcl, 0);
337d8                 | ' 			}
337d8                 | ' 		}
337d8                 | ' 		;
337d8                 | ' 	}
337d8                 | ' 
337d8                 | ' 	return res ;
337d8     08 4E 05 F1 | 	add	fp, #8
337dc     A7 FA 01 FB | 	rdlong	result1, fp
337e0     08 4E 85 F1 | 	sub	fp, #8
337e4     A7 F0 03 F6 | 	mov	ptra, fp
337e8     B2 00 A0 FD | 	call	#popregs_
337ec                 | _fatfs_cc_f_mkdir_ret
337ec     2D 00 64 FD | 	ret
337f0                 | 
337f0                 | _fatfs_cc_f_rename
337f0     01 4A 05 F6 | 	mov	COUNT_, #1
337f4     A8 00 A0 FD | 	call	#pushregs_
337f8     9C F0 07 F1 | 	add	ptra, #156
337fc     04 4E 05 F1 | 	add	fp, #4
33800     A7 12 62 FC | 	wrlong	arg01, fp
33804     04 4E 05 F1 | 	add	fp, #4
33808     A7 14 62 FC | 	wrlong	arg02, fp
3380c     A7 12 02 F6 | 	mov	arg01, fp
33810     08 4E 85 F1 | 	sub	fp, #8
33814     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
33818     04 4E 05 F1 | 	add	fp, #4
3381c     A7 12 02 F6 | 	mov	arg01, fp
33820     6C 4E 05 F1 | 	add	fp, #108
33824     A7 14 02 F6 | 	mov	arg02, fp
33828     70 4E 85 F1 | 	sub	fp, #112
3382c     02 16 06 F6 | 	mov	arg03, #2
33830     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
33834     0C 4E 05 F1 | 	add	fp, #12
33838     A7 FA 61 FC | 	wrlong	result1, fp
3383c     0C 4E 85 F1 | 	sub	fp, #12
33840     00 FA 0D F2 | 	cmp	result1, #0 wz
33844     44 03 90 5D |  if_ne	jmp	#LR__5033
33848     70 4E 05 F1 | 	add	fp, #112
3384c     A7 16 02 FB | 	rdlong	arg03, fp
33850     60 4E 85 F1 | 	sub	fp, #96
33854     A7 16 62 FC | 	wrlong	arg03, fp
33858     A7 12 02 F6 | 	mov	arg01, fp
3385c     0C 4E 85 F1 | 	sub	fp, #12
33860     A7 14 02 FB | 	rdlong	arg02, fp
33864     04 4E 85 F1 | 	sub	fp, #4
33868     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
3386c     0C 4E 05 F1 | 	add	fp, #12
33870     A7 FA 61 FC | 	wrlong	result1, fp
33874     00 FA 4D F2 | 	cmps	result1, #0 wz
33878     0C 4E 85 F1 | 	sub	fp, #12
3387c     1C 00 90 5D |  if_ne	jmp	#LR__5020
33880     3B 4E 05 F1 | 	add	fp, #59
33884     A7 FA C1 FA | 	rdbyte	result1, fp
33888     3B 4E 85 F1 | 	sub	fp, #59
3388c     A0 FA CD F7 | 	test	result1, #160 wz
33890     0C 4E 05 51 |  if_ne	add	fp, #12
33894     A7 0C 68 5C |  if_ne	wrlong	#6, fp
33898     0C 4E 85 51 |  if_ne	sub	fp, #12
3389c                 | LR__5020
3389c     0C 4E 05 F1 | 	add	fp, #12
338a0     A7 26 0A FB | 	rdlong	local01, fp wz
338a4     0C 4E 85 F1 | 	sub	fp, #12
338a8     E0 02 90 5D |  if_ne	jmp	#LR__5032
338ac     74 4E 05 F1 | 	add	fp, #116
338b0     A7 12 02 F6 | 	mov	arg01, fp
338b4     48 4E 85 F1 | 	sub	fp, #72
338b8     A7 14 02 FB | 	rdlong	arg02, fp
338bc     2C 4E 85 F1 | 	sub	fp, #44
338c0     20 16 06 F6 | 	mov	arg03, #32
338c4     70 25 BF FD | 	call	#__system____builtin_memmove
338c8     40 4E 05 F1 | 	add	fp, #64
338cc     A7 12 02 F6 | 	mov	arg01, fp
338d0     30 4E 85 F1 | 	sub	fp, #48
338d4     A7 14 02 F6 | 	mov	arg02, fp
338d8     10 4E 85 F1 | 	sub	fp, #16
338dc     30 16 06 F6 | 	mov	arg03, #48
338e0     54 25 BF FD | 	call	#__system____builtin_memmove
338e4     40 4E 05 F1 | 	add	fp, #64
338e8     A7 12 02 F6 | 	mov	arg01, fp
338ec     38 4E 85 F1 | 	sub	fp, #56
338f0     A7 14 02 FB | 	rdlong	arg02, fp
338f4     08 4E 85 F1 | 	sub	fp, #8
338f8     34 CA BF FD | 	call	#_fatfs_cc_follow_path
338fc     0C 4E 05 F1 | 	add	fp, #12
33900     A7 FA 61 FC | 	wrlong	result1, fp
33904     0C 4E 85 F1 | 	sub	fp, #12
33908     00 FA 0D F2 | 	cmp	result1, #0 wz
3390c     4C 00 90 5D |  if_ne	jmp	#LR__5023
33910     48 4E 05 F1 | 	add	fp, #72
33914     A7 FA 01 FB | 	rdlong	result1, fp
33918     30 4E 85 F1 | 	sub	fp, #48
3391c     A7 16 02 FB | 	rdlong	arg03, fp
33920     18 4E 85 F1 | 	sub	fp, #24
33924     0B FB 09 F2 | 	cmp	result1, arg03 wz
33928     20 00 90 5D |  if_ne	jmp	#LR__5021
3392c     50 4E 05 F1 | 	add	fp, #80
33930     A7 FA 01 FB | 	rdlong	result1, fp
33934     30 4E 85 F1 | 	sub	fp, #48
33938     A7 16 02 FB | 	rdlong	arg03, fp
3393c     20 4E 85 F1 | 	sub	fp, #32
33940     0B FB 09 F2 | 	cmp	result1, arg03 wz
33944     04 26 06 A6 |  if_e	mov	local01, #4
33948     04 00 90 AD |  if_e	jmp	#LR__5022
3394c                 | LR__5021
3394c     08 26 06 F6 | 	mov	local01, #8
33950                 | LR__5022
33950     0C 4E 05 F1 | 	add	fp, #12
33954     A7 26 62 FC | 	wrlong	local01, fp
33958     0C 4E 85 F1 | 	sub	fp, #12
3395c                 | LR__5023
3395c     0C 4E 05 F1 | 	add	fp, #12
33960     A7 26 02 FB | 	rdlong	local01, fp
33964     0C 4E 85 F1 | 	sub	fp, #12
33968     04 26 0E F2 | 	cmp	local01, #4 wz
3396c     CC 01 90 5D |  if_ne	jmp	#LR__5029
33970     40 4E 05 F1 | 	add	fp, #64
33974     A7 12 02 F6 | 	mov	arg01, fp
33978     40 4E 85 F1 | 	sub	fp, #64
3397c     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
33980     0C 4E 05 F1 | 	add	fp, #12
33984     A7 FA 61 FC | 	wrlong	result1, fp
33988     0C 4E 85 F1 | 	sub	fp, #12
3398c     00 FA 0D F2 | 	cmp	result1, #0 wz
33990     A8 01 90 5D |  if_ne	jmp	#LR__5028
33994     5C 4E 05 F1 | 	add	fp, #92
33998     A7 12 02 FB | 	rdlong	arg01, fp
3399c     38 4E 05 F1 | 	add	fp, #56
339a0     A7 12 62 FC | 	wrlong	arg01, fp
339a4     0D 12 06 F1 | 	add	arg01, #13
339a8     20 4E 85 F1 | 	sub	fp, #32
339ac     A7 14 02 F6 | 	mov	arg02, fp
339b0     74 4E 85 F1 | 	sub	fp, #116
339b4     0D 14 06 F1 | 	add	arg02, #13
339b8     13 16 06 F6 | 	mov	arg03, #19
339bc     78 24 BF FD | 	call	#__system____builtin_memmove
339c0     94 4E 05 F1 | 	add	fp, #148
339c4     A7 26 02 FB | 	rdlong	local01, fp
339c8     15 4E 85 F1 | 	sub	fp, #21
339cc     A7 FA C1 FA | 	rdbyte	result1, fp
339d0     0B 26 06 F1 | 	add	local01, #11
339d4     13 FB 41 FC | 	wrbyte	result1, local01
339d8     15 4E 05 F1 | 	add	fp, #21
339dc     A7 26 02 FB | 	rdlong	local01, fp
339e0     94 4E 85 F1 | 	sub	fp, #148
339e4     0B 26 06 F1 | 	add	local01, #11
339e8     13 27 C2 FA | 	rdbyte	local01, local01
339ec     10 26 CE F7 | 	test	local01, #16 wz
339f0     24 00 90 5D |  if_ne	jmp	#LR__5024
339f4     94 4E 05 F1 | 	add	fp, #148
339f8     A7 FA 01 FB | 	rdlong	result1, fp
339fc     FD 26 02 F6 | 	mov	local01, result1
33a00     94 4E 85 F1 | 	sub	fp, #148
33a04     0B FA 05 F1 | 	add	result1, #11
33a08     FD FA C1 FA | 	rdbyte	result1, result1
33a0c     20 FA 45 F5 | 	or	result1, #32
33a10     0B 26 06 F1 | 	add	local01, #11
33a14     13 FB 41 FC | 	wrbyte	result1, local01
33a18                 | LR__5024
33a18     70 4E 05 F1 | 	add	fp, #112
33a1c     A7 26 02 FB | 	rdlong	local01, fp
33a20     03 26 06 F1 | 	add	local01, #3
33a24     13 03 48 FC | 	wrbyte	#1, local01
33a28     24 4E 05 F1 | 	add	fp, #36
33a2c     A7 26 02 FB | 	rdlong	local01, fp
33a30     94 4E 85 F1 | 	sub	fp, #148
33a34     0B 26 06 F1 | 	add	local01, #11
33a38     13 27 C2 FA | 	rdbyte	local01, local01
33a3c     10 26 CE F7 | 	test	local01, #16 wz
33a40     F8 00 90 AD |  if_e	jmp	#LR__5027
33a44     18 4E 05 F1 | 	add	fp, #24
33a48     A7 16 02 FB | 	rdlong	arg03, fp
33a4c     30 4E 05 F1 | 	add	fp, #48
33a50     A7 26 02 FB | 	rdlong	local01, fp
33a54     48 4E 85 F1 | 	sub	fp, #72
33a58     13 17 0A F2 | 	cmp	arg03, local01 wz
33a5c     DC 00 90 AD |  if_e	jmp	#LR__5027
33a60     70 4E 05 F1 | 	add	fp, #112
33a64     A7 12 02 FB | 	rdlong	arg01, fp
33a68     09 27 02 F6 | 	mov	local01, arg01
33a6c     24 4E 05 F1 | 	add	fp, #36
33a70     A7 14 02 FB | 	rdlong	arg02, fp
33a74     94 4E 85 F1 | 	sub	fp, #148
33a78     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
33a7c     FD 14 02 F6 | 	mov	arg02, result1
33a80     13 13 02 F6 | 	mov	arg01, local01
33a84     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
33a88     98 4E 05 F1 | 	add	fp, #152
33a8c     A7 FA 61 FC | 	wrlong	result1, fp
33a90     00 FA 4D F2 | 	cmps	result1, #0 wz
33a94     98 4E 85 F1 | 	sub	fp, #152
33a98     0C 4E 05 A1 |  if_e	add	fp, #12
33a9c     A7 04 68 AC |  if_e	wrlong	#2, fp
33aa0     0C 4E 85 A1 |  if_e	sub	fp, #12
33aa4     94 00 90 AD |  if_e	jmp	#LR__5026
33aa8     70 4E 05 F1 | 	add	fp, #112
33aac     A7 12 02 FB | 	rdlong	arg01, fp
33ab0     28 4E 05 F1 | 	add	fp, #40
33ab4     A7 14 02 FB | 	rdlong	arg02, fp
33ab8     98 4E 85 F1 | 	sub	fp, #152
33abc     4C A0 BF FD | 	call	#_fatfs_cc_move_window
33ac0     0C 4E 05 F1 | 	add	fp, #12
33ac4     A7 FA 61 FC | 	wrlong	result1, fp
33ac8     64 4E 05 F1 | 	add	fp, #100
33acc     A7 26 02 FB | 	rdlong	local01, fp
33ad0     54 26 06 F1 | 	add	local01, #84
33ad4     24 4E 05 F1 | 	add	fp, #36
33ad8     A7 26 62 FC | 	wrlong	local01, fp
33adc     88 4E 85 F1 | 	sub	fp, #136
33ae0     A7 26 0A FB | 	rdlong	local01, fp wz
33ae4     0C 4E 85 F1 | 	sub	fp, #12
33ae8     50 00 90 5D |  if_ne	jmp	#LR__5025
33aec     94 4E 05 F1 | 	add	fp, #148
33af0     A7 26 02 FB | 	rdlong	local01, fp
33af4     94 4E 85 F1 | 	sub	fp, #148
33af8     01 26 06 F1 | 	add	local01, #1
33afc     13 27 C2 FA | 	rdbyte	local01, local01
33b00     2E 26 0E F2 | 	cmp	local01, #46 wz
33b04     34 00 90 5D |  if_ne	jmp	#LR__5025
33b08     70 4E 05 F1 | 	add	fp, #112
33b0c     A7 12 02 FB | 	rdlong	arg01, fp
33b10     24 4E 05 F1 | 	add	fp, #36
33b14     A7 14 02 FB | 	rdlong	arg02, fp
33b18     4C 4E 85 F1 | 	sub	fp, #76
33b1c     A7 16 02 FB | 	rdlong	arg03, fp
33b20     48 4E 85 F1 | 	sub	fp, #72
33b24     50 AD BF FD | 	call	#_fatfs_cc_st_clust
33b28     70 4E 05 F1 | 	add	fp, #112
33b2c     A7 26 02 FB | 	rdlong	local01, fp
33b30     70 4E 85 F1 | 	sub	fp, #112
33b34     03 26 06 F1 | 	add	local01, #3
33b38     13 03 48 FC | 	wrbyte	#1, local01
33b3c                 | LR__5025
33b3c                 | LR__5026
33b3c                 | LR__5027
33b3c                 | LR__5028
33b3c                 | LR__5029
33b3c     0C 4E 05 F1 | 	add	fp, #12
33b40     A7 26 0A FB | 	rdlong	local01, fp wz
33b44     0C 4E 85 F1 | 	sub	fp, #12
33b48     40 00 90 5D |  if_ne	jmp	#LR__5031
33b4c     10 4E 05 F1 | 	add	fp, #16
33b50     A7 12 02 F6 | 	mov	arg01, fp
33b54     10 4E 85 F1 | 	sub	fp, #16
33b58     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
33b5c     0C 4E 05 F1 | 	add	fp, #12
33b60     A7 FA 61 FC | 	wrlong	result1, fp
33b64     0C 4E 85 F1 | 	sub	fp, #12
33b68     00 FA 0D F2 | 	cmp	result1, #0 wz
33b6c     1C 00 90 5D |  if_ne	jmp	#LR__5030
33b70     70 4E 05 F1 | 	add	fp, #112
33b74     A7 12 02 FB | 	rdlong	arg01, fp
33b78     70 4E 85 F1 | 	sub	fp, #112
33b7c     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
33b80     0C 4E 05 F1 | 	add	fp, #12
33b84     A7 FA 61 FC | 	wrlong	result1, fp
33b88     0C 4E 85 F1 | 	sub	fp, #12
33b8c                 | LR__5030
33b8c                 | LR__5031
33b8c                 | LR__5032
33b8c                 | LR__5033
33b8c                 | ' 					res = sync_fs(fs);
33b8c                 | ' 				}
33b8c                 | ' 			}
33b8c                 | ' 
33b8c                 | ' 		}
33b8c                 | ' 		;
33b8c                 | ' 	}
33b8c                 | ' 
33b8c                 | ' 	return res ;
33b8c     0C 4E 05 F1 | 	add	fp, #12
33b90     A7 FA 01 FB | 	rdlong	result1, fp
33b94     0C 4E 85 F1 | 	sub	fp, #12
33b98     A7 F0 03 F6 | 	mov	ptra, fp
33b9c     B2 00 A0 FD | 	call	#popregs_
33ba0                 | _fatfs_cc_f_rename_ret
33ba0     2D 00 64 FD | 	ret
33ba4                 | 
33ba4                 | _fatfs_cc_time
33ba4     00 4A 05 F6 | 	mov	COUNT_, #0
33ba8     A8 00 A0 FD | 	call	#pushregs_
33bac     14 F0 07 F1 | 	add	ptra, #20
33bb0     04 4E 05 F1 | 	add	fp, #4
33bb4     A7 12 62 FC | 	wrlong	arg01, fp
33bb8     04 4E 05 F1 | 	add	fp, #4
33bbc     A7 12 02 F6 | 	mov	arg01, fp
33bc0     08 4E 85 F1 | 	sub	fp, #8
33bc4     00 14 06 F6 | 	mov	arg02, #0
33bc8     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
33bcc     08 4E 05 F1 | 	add	fp, #8
33bd0     A7 FA 01 FB | 	rdlong	result1, fp
33bd4     08 4E 05 F1 | 	add	fp, #8
33bd8     A7 FA 61 FC | 	wrlong	result1, fp
33bdc     0C 4E 85 F1 | 	sub	fp, #12
33be0     A7 FA 09 FB | 	rdlong	result1, fp wz
33be4     04 4E 85 F1 | 	sub	fp, #4
33be8     18 00 90 AD |  if_e	jmp	#LR__5040
33bec     04 4E 05 F1 | 	add	fp, #4
33bf0     A7 FA 01 FB | 	rdlong	result1, fp
33bf4     0C 4E 05 F1 | 	add	fp, #12
33bf8     A7 14 02 FB | 	rdlong	arg02, fp
33bfc     10 4E 85 F1 | 	sub	fp, #16
33c00     FD 14 62 FC | 	wrlong	arg02, result1
33c04                 | LR__5040
33c04                 | '         *tp = now;
33c04                 | '     return now;
33c04     10 4E 05 F1 | 	add	fp, #16
33c08     A7 FA 01 FB | 	rdlong	result1, fp
33c0c     10 4E 85 F1 | 	sub	fp, #16
33c10     A7 F0 03 F6 | 	mov	ptra, fp
33c14     B2 00 A0 FD | 	call	#popregs_
33c18                 | _fatfs_cc_time_ret
33c18     2D 00 64 FD | 	ret
33c1c                 | 
33c1c                 | _fatfs_cc_mktime
33c1c     06 4A 05 F6 | 	mov	COUNT_, #6
33c20     A8 00 A0 FD | 	call	#pushregs_
33c24     09 27 02 F6 | 	mov	local01, arg01
33c28     14 26 06 F1 | 	add	local01, #20
33c2c     13 13 02 FB | 	rdlong	arg01, local01
33c30     14 26 86 F1 | 	sub	local01, #20
33c34     46 12 56 F2 | 	cmps	arg01, #70 wc
33c38                 | '                 return (time_t) -1;
33c38     01 FA 65 C6 |  if_b	neg	result1, #1
33c3c     7C 01 90 CD |  if_b	jmp	#LR__5054
33c40     03 00 00 FF 
33c44     6C 29 06 F6 | 	mov	local02, ##1900
33c48     14 26 06 F1 | 	add	local01, #20
33c4c     13 FB 01 FB | 	rdlong	result1, local01
33c50     FD 28 02 F1 | 	add	local02, result1
33c54     08 26 86 F1 | 	sub	local01, #8
33c58     13 2B 02 FB | 	rdlong	local03, local01
33c5c     01 2A 86 F1 | 	sub	local03, #1
33c60     04 26 06 F1 | 	add	local01, #4
33c64     13 13 02 FB | 	rdlong	arg01, local01
33c68     10 26 86 F1 | 	sub	local01, #16
33c6c     02 12 66 F0 | 	shl	arg01, #2
33c70     02 00 00 FF 
33c74     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
33c78     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
33c7c     09 FB 01 FB | 	rdlong	result1, arg01
33c80     FD 2A 02 F1 | 	add	local03, result1
33c84     14 13 02 F6 | 	mov	arg01, local02
33c88     02 00 00 FF 
33c8c     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
33c90     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
33c94     00 FA 0D F2 | 	cmp	result1, #0 wz
33c98     1C 00 90 AD |  if_e	jmp	#LR__5050
33c9c     00 2C 06 F6 | 	mov	local04, #0
33ca0     10 26 06 F1 | 	add	local01, #16
33ca4     13 FB 01 FB | 	rdlong	result1, local01
33ca8     10 26 86 F1 | 	sub	local01, #16
33cac     02 FA 55 F2 | 	cmps	result1, #2 wc
33cb0     01 2C 06 36 |  if_ae	mov	local04, #1
33cb4     04 00 90 FD | 	jmp	#LR__5051
33cb8                 | LR__5050
33cb8     00 2C 06 F6 | 	mov	local04, #0
33cbc                 | LR__5051
33cbc     04 26 06 F1 | 	add	local01, #4
33cc0     13 FB 01 FB | 	rdlong	result1, local01
33cc4     04 26 86 F1 | 	sub	local01, #4
33cc8     13 2F 02 FB | 	rdlong	local05, local01
33ccc     08 26 06 F1 | 	add	local01, #8
33cd0     13 13 02 FB | 	rdlong	arg01, local01
33cd4     07 00 00 FF 
33cd8     10 12 06 FD | 	qmul	arg01, ##3600
33cdc     16 2B 02 F1 | 	add	local03, local04
33ce0     FD 2C 02 F6 | 	mov	local04, result1
33ce4     04 2C 66 F0 | 	shl	local04, #4
33ce8     FD 2C 82 F1 | 	sub	local04, result1
33cec     02 2C 66 F0 | 	shl	local04, #2
33cf0     16 2F 02 F1 | 	add	local05, local04
33cf4     08 26 86 F1 | 	sub	local01, #8
33cf8     18 2C 62 FD | 	getqx	local04
33cfc     A8 00 00 FF 
33d00     80 2B 06 FD | 	qmul	local03, ##86400
33d04     16 2F 02 F1 | 	add	local05, local04
33d08     14 2B 02 F6 | 	mov	local03, local02
33d0c     03 00 00 FF 
33d10     B2 2B 86 F1 | 	sub	local03, ##1970
33d14     18 2C 62 FD | 	getqx	local04
33d18     99 F0 00 FF 
33d1c     80 2B 06 FD | 	qmul	local03, ##31536000
33d20     16 2F 02 F1 | 	add	local05, local04
33d24     14 2B 02 F6 | 	mov	local03, local02
33d28     03 00 00 FF 
33d2c     B1 2B 86 F1 | 	sub	local03, ##1969
33d30     15 31 52 F6 | 	abs	local06, local03 wc
33d34     02 30 46 F0 | 	shr	local06, #2
33d38     18 31 82 F6 | 	negc	local06, local06
33d3c     03 00 00 FF 
33d40     D1 29 56 F2 | 	cmps	local02, ##2001 wc
33d44     18 2C 62 FD | 	getqx	local04
33d48     16 2F 02 F1 | 	add	local05, local04
33d4c     18 00 90 CD |  if_b	jmp	#LR__5052
33d50     03 00 00 FF 
33d54     D0 29 86 F1 | 	sub	local02, ##2000
33d58     14 2D 52 F6 | 	abs	local04, local02 wc
33d5c     64 2C 16 FD | 	qdiv	local04, #100
33d60     18 2C 62 FD | 	getqx	local04
33d64     16 31 A2 F3 | 	sumnc	local06, local04
33d68                 | LR__5052
33d68     A8 00 00 FF 
33d6c     80 31 06 FD | 	qmul	local06, ##86400
33d70     18 30 62 FD | 	getqx	local06
33d74     18 2F 02 F1 | 	add	local05, local06
33d78     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
33d7c     02 00 00 FF 
33d80     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
33d84     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
33d88     18 2F 02 F1 | 	add	local05, local06
33d8c     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
33d90     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
33d94     02 00 00 FF 
33d98     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
33d9c     01 2A 0E F2 | 	cmp	local03, #1 wz
33da0     14 00 90 5D |  if_ne	jmp	#LR__5053
33da4     13 13 02 F6 | 	mov	arg01, local01
33da8     DC 19 B0 FD | 	call	#_fatfs_cc___indst
33dac     00 FA 0D F2 | 	cmp	result1, #0 wz
33db0     07 00 00 5F 
33db4     10 2E 86 51 |  if_ne	sub	local05, ##3600
33db8                 | LR__5053
33db8                 | '                 s -=  (3600L) ;
33db8                 | ' 
33db8                 | '         return s;
33db8     17 FB 01 F6 | 	mov	result1, local05
33dbc                 | LR__5054
33dbc     A7 F0 03 F6 | 	mov	ptra, fp
33dc0     B2 00 A0 FD | 	call	#popregs_
33dc4                 | _fatfs_cc_mktime_ret
33dc4     2D 00 64 FD | 	ret
33dc8                 | 
33dc8                 | _fatfs_cc__gmtime_r
33dc8     03 4A 05 F6 | 	mov	COUNT_, #3
33dcc     A8 00 A0 FD | 	call	#pushregs_
33dd0     09 27 02 FB | 	rdlong	local01, arg01
33dd4     A8 00 00 FF 
33dd8     80 27 16 FD | 	qdiv	local01, ##86400
33ddc     18 FA 61 FD | 	getqx	result1
33de0     04 FA 05 F1 | 	add	result1, #4
33de4     07 FA 15 FD | 	qdiv	result1, #7
33de8     18 14 06 F1 | 	add	arg02, #24
33dec     D1 7F 27 FF 
33df0     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
33df4     D1 7F 27 3F 
33df8     00 26 86 31 |  if_ae	sub	local01, ##1325376000
33dfc     03 00 00 3F 
33e00     DC 29 06 36 |  if_ae	mov	local02, ##2012
33e04     03 00 00 CF 
33e08     B2 29 06 C6 |  if_b	mov	local02, ##1970
33e0c                 | ' 	  year = 1970;
33e0c                 | ' 	}
33e0c                 | ' 
33e0c                 | ' 	for(;;) {
33e0c     19 FA 61 FD | 	getqy	result1
33e10     0A FB 61 FC | 	wrlong	result1, arg02
33e14     18 14 86 F1 | 	sub	arg02, #24
33e18                 | LR__5060
33e18     14 13 02 F6 | 	mov	arg01, local02
33e1c     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
33e20     00 FA 0D F2 | 	cmp	result1, #0 wz
33e24     42 F1 00 5F 
33e28     00 2B 06 56 |  if_ne	mov	local03, ##31622400
33e2c     99 F0 00 AF 
33e30     80 2B 06 A6 |  if_e	mov	local03, ##31536000
33e34     15 27 12 F2 | 	cmp	local01, local03 wc
33e38                 | ' 	    break;
33e38     01 28 06 31 |  if_ae	add	local02, #1
33e3c     15 27 82 31 |  if_ae	sub	local01, local03
33e40     D4 FF 9F 3D |  if_ae	jmp	#LR__5060
33e44     A8 00 00 FF 
33e48     80 27 16 FD | 	qdiv	local01, ##86400
33e4c     14 2B 02 F6 | 	mov	local03, local02
33e50     03 00 00 FF 
33e54     6C 2B 86 F1 | 	sub	local03, ##1900
33e58     14 14 06 F1 | 	add	arg02, #20
33e5c     0A 2B 62 FC | 	wrlong	local03, arg02
33e60     08 14 06 F1 | 	add	arg02, #8
33e64     14 13 02 F6 | 	mov	arg01, local02
33e68     18 28 62 FD | 	getqx	local02
33e6c     0A 29 62 FC | 	wrlong	local02, arg02
33e70     1C 14 86 F1 | 	sub	arg02, #28
33e74     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
33e78     00 FA 0D F2 | 	cmp	result1, #0 wz
33e7c     1D 2A 06 56 |  if_ne	mov	local03, #29
33e80     1C 2A 06 A6 |  if_e	mov	local03, #28
33e84     02 00 00 FF 
33e88     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
33e8c     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
33e90     02 00 00 FF 
33e94     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
33e98                 | ' 
33e98                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
33e98                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
33e98     00 12 06 F6 | 	mov	arg01, #0
33e9c     97 2A 48 FB | 	callpa	#(@LR__5062-@LR__5061)>>2,fcache_load_ptr_
33ea0                 | LR__5061
33ea0     09 2B 02 F6 | 	mov	local03, arg01
33ea4     02 2A 66 F0 | 	shl	local03, #2
33ea8     02 00 00 FF 
33eac     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
33eb0     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
33eb4     15 2B 02 FB | 	rdlong	local03, local03
33eb8     15 29 52 F2 | 	cmps	local02, local03 wc
33ebc     02 00 00 FF 
33ec0     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
33ec4     2C 00 90 CD |  if_b	jmp	#LR__5063
33ec8     09 2B 02 F6 | 	mov	local03, arg01
33ecc     02 2A 66 F0 | 	shl	local03, #2
33ed0     02 00 00 FF 
33ed4     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
33ed8     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
33edc     15 2B 02 FB | 	rdlong	local03, local03
33ee0     15 29 82 F1 | 	sub	local02, local03
33ee4     01 12 06 F1 | 	add	arg01, #1
33ee8     02 00 00 FF 
33eec     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
33ef0     AC FF 9F FD | 	jmp	#LR__5061
33ef4                 | LR__5062
33ef4                 | LR__5063
33ef4     A8 00 00 FF 
33ef8     80 27 16 FD | 	qdiv	local01, ##86400
33efc     10 14 06 F1 | 	add	arg02, #16
33f00     0A 13 62 FC | 	wrlong	arg01, arg02
33f04     01 28 06 F1 | 	add	local02, #1
33f08     04 14 86 F1 | 	sub	arg02, #4
33f0c     0A 29 62 FC | 	wrlong	local02, arg02
33f10     19 26 62 FD | 	getqy	local01
33f14     07 00 00 FF 
33f18     10 26 16 FD | 	qdiv	local01, ##3600
33f1c     18 2A 62 FD | 	getqx	local03
33f20     07 00 00 FF 
33f24     10 26 16 FD | 	qdiv	local01, ##3600
33f28     04 14 86 F1 | 	sub	arg02, #4
33f2c     0A 2B 62 FC | 	wrlong	local03, arg02
33f30     19 26 62 FD | 	getqy	local01
33f34     3C 26 16 FD | 	qdiv	local01, #60
33f38     18 2A 62 FD | 	getqx	local03
33f3c     3C 26 16 FD | 	qdiv	local01, #60
33f40     04 14 86 F1 | 	sub	arg02, #4
33f44     0A 2B 62 FC | 	wrlong	local03, arg02
33f48     04 14 86 F1 | 	sub	arg02, #4
33f4c                 | '         stm->tm_isdst = 0;
33f4c                 | ' 
33f4c                 | ' ;
33f4c                 | '         return stm;
33f4c     0A FB 01 F6 | 	mov	result1, arg02
33f50     19 2A 62 FD | 	getqy	local03
33f54     0A 2B 62 FC | 	wrlong	local03, arg02
33f58     20 14 06 F1 | 	add	arg02, #32
33f5c     0A 01 68 FC | 	wrlong	#0, arg02
33f60     A7 F0 03 F6 | 	mov	ptra, fp
33f64     B2 00 A0 FD | 	call	#popregs_
33f68                 | _fatfs_cc__gmtime_r_ret
33f68     2D 00 64 FD | 	ret
33f6c                 | 
33f6c                 | _fatfs_cc__tzset
33f6c     AD 01 00 FF 
33f70     B1 12 06 F6 | 	mov	arg01, ##@LR__5375
33f74     34 00 B0 FD | 	call	#_fatfs_cc_getenv
33f78     FD 12 02 F6 | 	mov	arg01, result1
33f7c     02 00 00 FF 
33f80     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
33f84     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
33f88     02 00 00 FF 
33f8c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
33f90     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
33f94     02 00 00 FF 
33f98     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
33f9c     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
33fa0     02 00 00 FF 
33fa4     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
33fa8                 | _fatfs_cc__tzset_ret
33fa8     2D 00 64 FD | 	ret
33fac                 | 
33fac                 | _fatfs_cc_getenv
33fac     06 4A 05 F6 | 	mov	COUNT_, #6
33fb0     A8 00 A0 FD | 	call	#pushregs_
33fb4     09 27 02 F6 | 	mov	local01, arg01
33fb8     09 29 02 F6 | 	mov	local02, arg01
33fbc     97 06 48 FB | 	callpa	#(@LR__5071-@LR__5070)>>2,fcache_load_ptr_
33fc0                 | LR__5070
33fc0     14 FB C9 FA | 	rdbyte	result1, local02 wz
33fc4     01 28 06 51 |  if_ne	add	local02, #1
33fc8     F4 FF 9F 5D |  if_ne	jmp	#LR__5070
33fcc                 | LR__5071
33fcc     09 29 82 F1 | 	sub	local02, arg01
33fd0     14 FB 01 F6 | 	mov	result1, local02
33fd4     02 00 00 FF 
33fd8     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
33fdc     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
33fe0     02 00 00 FF 
33fe4     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
33fe8                 | '             return 0;
33fe8     00 FA 05 A6 |  if_e	mov	result1, #0
33fec     5C 00 90 AD |  if_e	jmp	#LR__5074
33ff0                 | ' 
33ff0                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
33ff0     02 00 00 FF 
33ff4     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
33ff8     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
33ffc     02 00 00 FF 
34000     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
34004                 | LR__5072
34004     15 2D 0A FB | 	rdlong	local04, local03 wz
34008     3C 00 90 AD |  if_e	jmp	#LR__5073
3400c     16 13 02 F6 | 	mov	arg01, local04
34010     13 15 02 F6 | 	mov	arg02, local01
34014     14 17 02 F6 | 	mov	arg03, local02
34018     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
3401c     00 FA 0D F2 | 	cmp	result1, #0 wz
34020     14 2F 02 A6 |  if_e	mov	local05, local02
34024     16 2F 02 A1 |  if_e	add	local05, local04
34028     17 31 C2 AA |  if_e	rdbyte	local06, local05
3402c     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
34030                 | ' 			return name+len+1;
34030     14 2D 02 A1 |  if_e	add	local04, local02
34034     01 2C 06 A1 |  if_e	add	local04, #1
34038     16 FB 01 A6 |  if_e	mov	result1, local04
3403c     0C 00 90 AD |  if_e	jmp	#LR__5074
34040     04 2A 06 F1 | 	add	local03, #4
34044     BC FF 9F FD | 	jmp	#LR__5072
34048                 | LR__5073
34048                 | ' 	}
34048                 | ' 	return 0;
34048     00 FA 05 F6 | 	mov	result1, #0
3404c                 | LR__5074
3404c     A7 F0 03 F6 | 	mov	ptra, fp
34050     B2 00 A0 FD | 	call	#popregs_
34054                 | _fatfs_cc_getenv_ret
34054     2D 00 64 FD | 	ret
34058                 | 
34058                 | _fatfs_cc__get_fattime
34058     00 4A 05 F6 | 	mov	COUNT_, #0
3405c     A8 00 A0 FD | 	call	#pushregs_
34060     34 F0 07 F1 | 	add	ptra, #52
34064     00 12 06 F6 | 	mov	arg01, #0
34068     38 FB BF FD | 	call	#_fatfs_cc_time
3406c     04 4E 05 F1 | 	add	fp, #4
34070     A7 FA 61 FC | 	wrlong	result1, fp
34074     A7 12 02 F6 | 	mov	arg01, fp
34078     0C 4E 05 F1 | 	add	fp, #12
3407c     A7 14 02 F6 | 	mov	arg02, fp
34080     10 4E 85 F1 | 	sub	fp, #16
34084     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
34088     24 4E 05 F1 | 	add	fp, #36
3408c     A7 14 02 FB | 	rdlong	arg02, fp
34090     50 14 86 F1 | 	sub	arg02, #80
34094     09 14 66 F0 | 	shl	arg02, #9
34098     04 4E 85 F1 | 	sub	fp, #4
3409c     A7 FA 01 FB | 	rdlong	result1, fp
340a0     01 FA 05 F1 | 	add	result1, #1
340a4     05 FA 65 F0 | 	shl	result1, #5
340a8     FD 14 42 F5 | 	or	arg02, result1
340ac     04 4E 85 F1 | 	sub	fp, #4
340b0     A7 FA 01 FB | 	rdlong	result1, fp
340b4     FD 14 42 F5 | 	or	arg02, result1
340b8     14 4E 85 F1 | 	sub	fp, #20
340bc     A7 14 62 FC | 	wrlong	arg02, fp
340c0     10 4E 05 F1 | 	add	fp, #16
340c4     A7 14 02 FB | 	rdlong	arg02, fp
340c8     0B 14 66 F0 | 	shl	arg02, #11
340cc     04 4E 85 F1 | 	sub	fp, #4
340d0     A7 FA 01 FB | 	rdlong	result1, fp
340d4     05 FA 65 F0 | 	shl	result1, #5
340d8     FD 14 42 F5 | 	or	arg02, result1
340dc     04 4E 85 F1 | 	sub	fp, #4
340e0     A7 FA 01 FB | 	rdlong	result1, fp
340e4     FD 14 42 F5 | 	or	arg02, result1
340e8     04 4E 85 F1 | 	sub	fp, #4
340ec     A7 14 62 FC | 	wrlong	arg02, fp
340f0                 | ' 
340f0                 | '     now = time(0);
340f0                 | '     _gmtime_r (&now, &date);
340f0                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
340f0                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
340f0                 | '     return (ffdate << 16) | fftime;
340f0     04 4E 85 F1 | 	sub	fp, #4
340f4     A7 FA 01 FB | 	rdlong	result1, fp
340f8     10 FA 65 F0 | 	shl	result1, #16
340fc     08 4E 85 F1 | 	sub	fp, #8
34100     0A FB 41 F5 | 	or	result1, arg02
34104     A7 F0 03 F6 | 	mov	ptra, fp
34108     B2 00 A0 FD | 	call	#popregs_
3410c                 | _fatfs_cc__get_fattime_ret
3410c     2D 00 64 FD | 	ret
34110                 | 
34110                 | _fatfs_cc_unixtime_1028
34110     00 4A 05 F6 | 	mov	COUNT_, #0
34114     A8 00 A0 FD | 	call	#pushregs_
34118     34 F0 07 F1 | 	add	ptra, #52
3411c     04 4E 05 F1 | 	add	fp, #4
34120     A7 12 62 FC | 	wrlong	arg01, fp
34124     04 4E 05 F1 | 	add	fp, #4
34128     A7 14 62 FC | 	wrlong	arg02, fp
3412c     04 4E 85 F1 | 	sub	fp, #4
34130     A7 14 02 FB | 	rdlong	arg02, fp
34134     09 14 46 F0 | 	shr	arg02, #9
34138     7F 14 06 F5 | 	and	arg02, #127
3413c     50 FA 05 F6 | 	mov	result1, #80
34140     0A FB 01 F1 | 	add	result1, arg02
34144     20 4E 05 F1 | 	add	fp, #32
34148     A7 FA 61 FC | 	wrlong	result1, fp
3414c     20 4E 85 F1 | 	sub	fp, #32
34150     A7 FA 01 FB | 	rdlong	result1, fp
34154     05 FA 45 F0 | 	shr	result1, #5
34158     FD FA 41 F8 | 	getnib	result1, result1, #0
3415c     01 FA 85 F1 | 	sub	result1, #1
34160     1C 4E 05 F1 | 	add	fp, #28
34164     A7 FA 61 FC | 	wrlong	result1, fp
34168     1C 4E 85 F1 | 	sub	fp, #28
3416c     A7 FA 01 FB | 	rdlong	result1, fp
34170     1F FA 05 F5 | 	and	result1, #31
34174     18 4E 05 F1 | 	add	fp, #24
34178     A7 FA 61 FC | 	wrlong	result1, fp
3417c     14 4E 85 F1 | 	sub	fp, #20
34180     A7 FA 01 FB | 	rdlong	result1, fp
34184     0B FA 45 F0 | 	shr	result1, #11
34188     1F FA 05 F5 | 	and	result1, #31
3418c     10 4E 05 F1 | 	add	fp, #16
34190     A7 FA 61 FC | 	wrlong	result1, fp
34194     10 4E 85 F1 | 	sub	fp, #16
34198     A7 FA 01 FB | 	rdlong	result1, fp
3419c     05 FA 45 F0 | 	shr	result1, #5
341a0     3F FA 05 F5 | 	and	result1, #63
341a4     0C 4E 05 F1 | 	add	fp, #12
341a8     A7 FA 61 FC | 	wrlong	result1, fp
341ac     0C 4E 85 F1 | 	sub	fp, #12
341b0     A7 14 02 FB | 	rdlong	arg02, fp
341b4     1F 14 06 F5 | 	and	arg02, #31
341b8     01 14 66 F0 | 	shl	arg02, #1
341bc     08 4E 05 F1 | 	add	fp, #8
341c0     A7 14 62 FC | 	wrlong	arg02, fp
341c4     A7 12 02 F6 | 	mov	arg01, fp
341c8     10 4E 85 F1 | 	sub	fp, #16
341cc     4C FA BF FD | 	call	#_fatfs_cc_mktime
341d0     0C 4E 05 F1 | 	add	fp, #12
341d4     A7 FA 61 FC | 	wrlong	result1, fp
341d8                 | ' 
341d8                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
341d8                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
341d8                 | '     date.tm_mday = (dosdate & 0x1f);
341d8                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
341d8                 | '     date.tm_min = (dostime >> 5) & 0x3f;
341d8                 | '     date.tm_sec = (dostime & 0x1f) << 1;
341d8                 | ' 
341d8                 | '     t = mktime(&date);
341d8                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
341d8                 | '     return t;
341d8     0C 4E 85 F1 | 	sub	fp, #12
341dc     A7 F0 03 F6 | 	mov	ptra, fp
341e0     B2 00 A0 FD | 	call	#popregs_
341e4                 | _fatfs_cc_unixtime_1028_ret
341e4     2D 00 64 FD | 	ret
341e8                 | 
341e8                 | _fatfs_cc__set_dos_error_1030
341e8     09 01 02 F6 | 	mov	_var01, arg01
341ec                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
341ec                 | '     switch (derr) {
341ec     14 00 26 F3 | 	fle	_var01, #20
341f0     30 00 62 FD | 	jmprel	_var01
341f4                 | LR__5080
341f4     50 00 90 FD | 	jmp	#LR__5081
341f8     84 00 90 FD | 	jmp	#LR__5095
341fc     80 00 90 FD | 	jmp	#LR__5096
34200     7C 00 90 FD | 	jmp	#LR__5097
34204     48 00 90 FD | 	jmp	#LR__5082
34208     44 00 90 FD | 	jmp	#LR__5083
3420c     40 00 90 FD | 	jmp	#LR__5084
34210     44 00 90 FD | 	jmp	#LR__5085
34214     48 00 90 FD | 	jmp	#LR__5087
34218     54 00 90 FD | 	jmp	#LR__5090
3421c     38 00 90 FD | 	jmp	#LR__5086
34220     4C 00 90 FD | 	jmp	#LR__5091
34224     48 00 90 FD | 	jmp	#LR__5092
34228     44 00 90 FD | 	jmp	#LR__5093
3422c     50 00 90 FD | 	jmp	#LR__5098
34230     4C 00 90 FD | 	jmp	#LR__5098
34234     48 00 90 FD | 	jmp	#LR__5098
34238     2C 00 90 FD | 	jmp	#LR__5088
3423c     38 00 90 FD | 	jmp	#LR__5094
34240     2C 00 90 FD | 	jmp	#LR__5089
34244     38 00 90 FD | 	jmp	#LR__5098
34248                 | LR__5081
34248     00 02 06 F6 | 	mov	_var02, #0
3424c                 | '         r = 0;
3424c                 | '         break;
3424c     34 00 90 FD | 	jmp	#LR__5099
34250                 | LR__5082
34250                 | LR__5083
34250                 | LR__5084
34250     04 02 06 F6 | 	mov	_var02, #4
34254                 | '         r =  4 ;
34254                 | '         break;
34254     2C 00 90 FD | 	jmp	#LR__5099
34258                 | LR__5085
34258                 | LR__5086
34258     06 02 06 F6 | 	mov	_var02, #6
3425c                 | '         r =  6 ;
3425c                 | '         break;
3425c     24 00 90 FD | 	jmp	#LR__5099
34260                 | LR__5087
34260     09 02 06 F6 | 	mov	_var02, #9
34264                 | '         r =  9 ;
34264                 | '         break;
34264     1C 00 90 FD | 	jmp	#LR__5099
34268                 | LR__5088
34268     07 02 06 F6 | 	mov	_var02, #7
3426c                 | '         r =  7 ;
3426c                 | '         break;
3426c     14 00 90 FD | 	jmp	#LR__5099
34270                 | LR__5089
34270                 | LR__5090
34270                 | LR__5091
34270                 | LR__5092
34270                 | LR__5093
34270     0A 02 06 F6 | 	mov	_var02, #10
34274                 | '         r =  10 ;
34274                 | '         break;
34274     0C 00 90 FD | 	jmp	#LR__5099
34278                 | LR__5094
34278     0B 02 06 F6 | 	mov	_var02, #11
3427c                 | '         r =  11 ;
3427c                 | '         break;
3427c     04 00 90 FD | 	jmp	#LR__5099
34280                 | LR__5095
34280                 | LR__5096
34280                 | LR__5097
34280                 | LR__5098
34280     0C 02 06 F6 | 	mov	_var02, #12
34284                 | '         r =  12 ;
34284                 | '         break;
34284                 | LR__5099
34284                 | '     }
34284                 | '     return _seterror(r);
34284     00 02 4E F2 | 	cmps	_var02, #0 wz
34288     20 E6 05 F1 | 	add	ptr___system__dat__, #32
3428c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
34290     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
34294     01 FA 65 56 |  if_ne	neg	result1, #1
34298     00 FA 05 A6 |  if_e	mov	result1, #0
3429c                 | _fatfs_cc__set_dos_error_1030_ret
3429c     2D 00 64 FD | 	ret
342a0                 | 
342a0                 | _fatfs_cc_v_creat
342a0     04 4A 05 F6 | 	mov	COUNT_, #4
342a4     A8 00 A0 FD | 	call	#pushregs_
342a8     09 27 02 F6 | 	mov	local01, arg01
342ac     0A 29 02 F6 | 	mov	local02, arg02
342b0     03 00 00 FF 
342b4     3C 12 06 F6 | 	mov	arg01, ##1596
342b8                 | '     return _gc_alloc(size);
342b8     10 14 06 F6 | 	mov	arg02, #16
342bc     28 5E BF FD | 	call	#__system___gc_doalloc
342c0     FD 2A 0A F6 | 	mov	local03, result1 wz
342c4                 | '       return _seterror( 7 );
342c4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
342c8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
342cc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
342d0     01 FA 65 A6 |  if_e	neg	result1, #1
342d4     58 00 90 AD |  if_e	jmp	#LR__5101
342d8     15 13 02 F6 | 	mov	arg01, local03
342dc     00 14 06 F6 | 	mov	arg02, #0
342e0     03 00 00 FF 
342e4     3C 16 06 F6 | 	mov	arg03, ##1596
342e8     98 00 A0 FD | 	call	#\builtin_bytefill_
342ec     02 00 00 FF 
342f0     14 2A 06 F1 | 	add	local03, ##1044
342f4     15 13 02 F6 | 	mov	arg01, local03
342f8     02 00 00 FF 
342fc     14 2A 86 F1 | 	sub	local03, ##1044
34300     14 15 02 F6 | 	mov	arg02, local02
34304     07 16 06 F6 | 	mov	arg03, #7
34308     B4 CC BF FD | 	call	#_fatfs_cc_f_open
3430c     FD 2C 0A F6 | 	mov	local04, result1 wz
34310     14 00 90 AD |  if_e	jmp	#LR__5100
34314     15 13 02 F6 | 	mov	arg01, local03
34318                 | '     return _gc_free(ptr);
34318     D8 5E BF FD | 	call	#__system___gc_free
3431c                 | '     free(f);
3431c                 | '     return _set_dos_error(r);
3431c     16 13 02 F6 | 	mov	arg01, local04
34320     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1030
34324     08 00 90 FD | 	jmp	#LR__5101
34328                 | LR__5100
34328     13 2B 62 FC | 	wrlong	local03, local01
3432c                 | '   }
3432c                 | '   fil->vfsdata = f;
3432c                 | '   return 0;
3432c     00 FA 05 F6 | 	mov	result1, #0
34330                 | LR__5101
34330     A7 F0 03 F6 | 	mov	ptra, fp
34334     B2 00 A0 FD | 	call	#popregs_
34338                 | _fatfs_cc_v_creat_ret
34338     2D 00 64 FD | 	ret
3433c                 | 
3433c                 | _fatfs_cc_v_close
3433c     02 4A 05 F6 | 	mov	COUNT_, #2
34340     A8 00 A0 FD | 	call	#pushregs_
34344     09 27 02 FB | 	rdlong	local01, arg01
34348     02 00 00 FF 
3434c     14 26 06 F1 | 	add	local01, ##1044
34350     13 13 02 F6 | 	mov	arg01, local01
34354     02 00 00 FF 
34358     14 26 86 F1 | 	sub	local01, ##1044
3435c     DC E3 BF FD | 	call	#_fatfs_cc_f_close
34360     FD 28 02 F6 | 	mov	local02, result1
34364     13 13 02 F6 | 	mov	arg01, local01
34368                 | '     return _gc_free(ptr);
34368     88 5E BF FD | 	call	#__system___gc_free
3436c                 | '     FAT_FIL *f = fil->vfsdata;
3436c                 | '     r=f_close(&f->fil);
3436c                 | '     free(f);
3436c                 | '     return _set_dos_error(r);
3436c     14 13 02 F6 | 	mov	arg01, local02
34370     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1030
34374     A7 F0 03 F6 | 	mov	ptra, fp
34378     B2 00 A0 FD | 	call	#popregs_
3437c                 | _fatfs_cc_v_close_ret
3437c     2D 00 64 FD | 	ret
34380                 | 
34380                 | _fatfs_cc_v_opendir
34380     04 4A 05 F6 | 	mov	COUNT_, #4
34384     A8 00 A0 FD | 	call	#pushregs_
34388     09 27 02 F6 | 	mov	local01, arg01
3438c     0A 29 02 F6 | 	mov	local02, arg02
34390     30 12 06 F6 | 	mov	arg01, #48
34394                 | '     return _gc_alloc(size);
34394     10 14 06 F6 | 	mov	arg02, #16
34398     4C 5D BF FD | 	call	#__system___gc_doalloc
3439c     FD 2A 0A F6 | 	mov	local03, result1 wz
343a0                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
343a0                 | '       return _seterror( 7 );
343a0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
343a4     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
343a8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
343ac     01 FA 65 A6 |  if_e	neg	result1, #1
343b0     34 00 90 AD |  if_e	jmp	#LR__5111
343b4     14 15 02 F6 | 	mov	arg02, local02
343b8     15 13 02 F6 | 	mov	arg01, local03
343bc     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
343c0     FD 2C 0A F6 | 	mov	local04, result1 wz
343c4     14 00 90 AD |  if_e	jmp	#LR__5110
343c8     15 13 02 F6 | 	mov	arg01, local03
343cc                 | '     return _gc_free(ptr);
343cc     24 5E BF FD | 	call	#__system___gc_free
343d0                 | '         free(f);
343d0                 | '         return _set_dos_error(r);
343d0     16 13 02 F6 | 	mov	arg01, local04
343d4     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1030
343d8     0C 00 90 FD | 	jmp	#LR__5111
343dc                 | LR__5110
343dc     04 26 06 F1 | 	add	local01, #4
343e0     13 2B 62 FC | 	wrlong	local03, local01
343e4                 | '     }
343e4                 | '     dir->vfsdata = f;
343e4                 | '     return 0;
343e4     00 FA 05 F6 | 	mov	result1, #0
343e8                 | LR__5111
343e8     A7 F0 03 F6 | 	mov	ptra, fp
343ec     B2 00 A0 FD | 	call	#popregs_
343f0                 | _fatfs_cc_v_opendir_ret
343f0     2D 00 64 FD | 	ret
343f4                 | 
343f4                 | _fatfs_cc_v_closedir
343f4     02 4A 05 F6 | 	mov	COUNT_, #2
343f8     A8 00 A0 FD | 	call	#pushregs_
343fc     04 12 06 F1 | 	add	arg01, #4
34400     09 27 02 FB | 	rdlong	local01, arg01
34404     13 13 02 F6 | 	mov	arg01, local01
34408     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
3440c     FD 28 02 F6 | 	mov	local02, result1
34410     13 13 02 F6 | 	mov	arg01, local01
34414                 | '     return _gc_free(ptr);
34414     DC 5D BF FD | 	call	#__system___gc_free
34418     00 28 0E F2 | 	cmp	local02, #0 wz
3441c     14 13 02 56 |  if_ne	mov	arg01, local02
34420     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1030
34424                 | '     return r;
34424     14 FB 01 F6 | 	mov	result1, local02
34428     A7 F0 03 F6 | 	mov	ptra, fp
3442c     B2 00 A0 FD | 	call	#popregs_
34430                 | _fatfs_cc_v_closedir_ret
34430     2D 00 64 FD | 	ret
34434                 | 
34434                 | _fatfs_cc_v_readdir
34434     01 4A 05 F6 | 	mov	COUNT_, #1
34438     A8 00 A0 FD | 	call	#pushregs_
3443c     2C F1 07 F1 | 	add	ptra, #300
34440     04 4E 05 F1 | 	add	fp, #4
34444     A7 12 62 FC | 	wrlong	arg01, fp
34448     04 4E 05 F1 | 	add	fp, #4
3444c     A7 14 62 FC | 	wrlong	arg02, fp
34450     04 4E 85 F1 | 	sub	fp, #4
34454     A7 16 02 FB | 	rdlong	arg03, fp
34458     04 16 06 F1 | 	add	arg03, #4
3445c     0B 13 02 FB | 	rdlong	arg01, arg03
34460     08 4E 05 F1 | 	add	fp, #8
34464     A7 14 02 F6 | 	mov	arg02, fp
34468     0C 4E 85 F1 | 	sub	fp, #12
3446c     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
34470     28 4F 05 F1 | 	add	fp, #296
34474     A7 FA 61 FC | 	wrlong	result1, fp
34478     28 4F 85 F1 | 	sub	fp, #296
3447c     00 FA 0D F2 | 	cmp	result1, #0 wz
34480     14 00 90 AD |  if_e	jmp	#LR__5120
34484                 | '         return _set_dos_error(r);
34484     28 4F 05 F1 | 	add	fp, #296
34488     A7 12 02 FB | 	rdlong	arg01, fp
3448c     28 4F 85 F1 | 	sub	fp, #296
34490     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1030
34494     C4 00 90 FD | 	jmp	#LR__5123
34498                 | LR__5120
34498     28 4E 05 F1 | 	add	fp, #40
3449c     A7 16 CA FA | 	rdbyte	arg03, fp wz
344a0     28 4E 85 F1 | 	sub	fp, #40
344a4                 | '         return -1;
344a4     01 FA 65 A6 |  if_e	neg	result1, #1
344a8     B0 00 90 AD |  if_e	jmp	#LR__5123
344ac     08 4E 05 F1 | 	add	fp, #8
344b0     A7 12 02 FB | 	rdlong	arg01, fp
344b4     20 4E 05 F1 | 	add	fp, #32
344b8     A7 14 02 F6 | 	mov	arg02, fp
344bc     28 4E 85 F1 | 	sub	fp, #40
344c0     3F 16 06 F6 | 	mov	arg03, #63
344c4     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
344c8     08 4E 05 F1 | 	add	fp, #8
344cc     A7 16 02 FB | 	rdlong	arg03, fp
344d0     3F 16 06 F1 | 	add	arg03, #63
344d4     0B 01 48 FC | 	wrbyte	#0, arg03
344d8     0C 4E 05 F1 | 	add	fp, #12
344dc     A7 16 C2 FA | 	rdbyte	arg03, fp
344e0     14 4E 85 F1 | 	sub	fp, #20
344e4     10 16 CE F7 | 	test	arg03, #16 wz
344e8     18 00 90 AD |  if_e	jmp	#LR__5121
344ec     08 4E 05 F1 | 	add	fp, #8
344f0     A7 16 02 FB | 	rdlong	arg03, fp
344f4     08 4E 85 F1 | 	sub	fp, #8
344f8     50 16 06 F1 | 	add	arg03, #80
344fc     0B 03 48 FC | 	wrbyte	#1, arg03
34500     14 00 90 FD | 	jmp	#LR__5122
34504                 | LR__5121
34504     08 4E 05 F1 | 	add	fp, #8
34508     A7 16 02 FB | 	rdlong	arg03, fp
3450c     08 4E 85 F1 | 	sub	fp, #8
34510     50 16 06 F1 | 	add	arg03, #80
34514     0B 01 48 FC | 	wrbyte	#0, arg03
34518                 | LR__5122
34518     08 4E 05 F1 | 	add	fp, #8
3451c     A7 16 02 FB | 	rdlong	arg03, fp
34520     04 4E 05 F1 | 	add	fp, #4
34524     A7 14 02 FB | 	rdlong	arg02, fp
34528     48 16 06 F1 | 	add	arg03, #72
3452c     0B 15 62 FC | 	wrlong	arg02, arg03
34530     04 4E 85 F1 | 	sub	fp, #4
34534     A7 26 02 FB | 	rdlong	local01, fp
34538     08 4E 05 F1 | 	add	fp, #8
3453c     A7 12 E2 FA | 	rdword	arg01, fp
34540     02 4E 05 F1 | 	add	fp, #2
34544     A7 14 E2 FA | 	rdword	arg02, fp
34548     12 4E 85 F1 | 	sub	fp, #18
3454c     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_1028
34550     4C 26 06 F1 | 	add	local01, #76
34554     13 FB 61 FC | 	wrlong	result1, local01
34558                 | '         ent->d_type =  (0) ;
34558                 | '     }
34558                 | '     ent->d_size = finfo.fsize;
34558                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
34558                 | '     return 0;
34558     00 FA 05 F6 | 	mov	result1, #0
3455c                 | LR__5123
3455c     A7 F0 03 F6 | 	mov	ptra, fp
34560     B2 00 A0 FD | 	call	#popregs_
34564                 | _fatfs_cc_v_readdir_ret
34564     2D 00 64 FD | 	ret
34568                 | 
34568                 | _fatfs_cc_v_stat
34568     03 4A 05 F6 | 	mov	COUNT_, #3
3456c     A8 00 A0 FD | 	call	#pushregs_
34570     30 F1 07 F1 | 	add	ptra, #304
34574     04 4E 05 F1 | 	add	fp, #4
34578     A7 12 62 FC | 	wrlong	arg01, fp
3457c     04 4E 05 F1 | 	add	fp, #4
34580     A7 14 62 FC | 	wrlong	arg02, fp
34584     08 4E 85 F1 | 	sub	fp, #8
34588     0A 13 02 F6 | 	mov	arg01, arg02
3458c     00 14 06 F6 | 	mov	arg02, #0
34590     30 16 06 F6 | 	mov	arg03, #48
34594     98 00 A0 FD | 	call	#\builtin_bytefill_
34598     04 4E 05 F1 | 	add	fp, #4
3459c     A7 FA 01 FB | 	rdlong	result1, fp
345a0     04 4E 85 F1 | 	sub	fp, #4
345a4     FD FA C9 FA | 	rdbyte	result1, result1 wz
345a8     2C 00 90 AD |  if_e	jmp	#LR__5130
345ac     04 4E 05 F1 | 	add	fp, #4
345b0     A7 FA 01 FB | 	rdlong	result1, fp
345b4     04 4E 85 F1 | 	sub	fp, #4
345b8     FD FA C1 FA | 	rdbyte	result1, result1
345bc     2E FA 0D F2 | 	cmp	result1, #46 wz
345c0     04 4E 05 A1 |  if_e	add	fp, #4
345c4     A7 26 02 AB |  if_e	rdlong	local01, fp
345c8     04 4E 85 A1 |  if_e	sub	fp, #4
345cc     01 26 06 A1 |  if_e	add	local01, #1
345d0     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
345d4     18 00 90 5D |  if_ne	jmp	#LR__5131
345d8                 | LR__5130
345d8     18 4E 05 F1 | 	add	fp, #24
345dc     A7 20 48 FC | 	wrbyte	#16, fp
345e0     0C 4E 85 F1 | 	sub	fp, #12
345e4     A7 00 68 FC | 	wrlong	#0, fp
345e8     0C 4E 85 F1 | 	sub	fp, #12
345ec     24 00 90 FD | 	jmp	#LR__5132
345f0                 | LR__5131
345f0     04 4E 05 F1 | 	add	fp, #4
345f4     A7 12 02 FB | 	rdlong	arg01, fp
345f8     0C 4E 05 F1 | 	add	fp, #12
345fc     A7 14 02 F6 | 	mov	arg02, fp
34600     10 4E 85 F1 | 	sub	fp, #16
34604     AC EB BF FD | 	call	#_fatfs_cc_f_stat
34608     0C 4E 05 F1 | 	add	fp, #12
3460c     A7 FA 61 FC | 	wrlong	result1, fp
34610     0C 4E 85 F1 | 	sub	fp, #12
34614                 | LR__5132
34614     0C 4E 05 F1 | 	add	fp, #12
34618     A7 28 0A FB | 	rdlong	local02, fp wz
3461c     0C 4E 85 F1 | 	sub	fp, #12
34620     14 00 90 AD |  if_e	jmp	#LR__5133
34624                 | '         return _set_dos_error(r);
34624     0C 4E 05 F1 | 	add	fp, #12
34628     A7 12 02 FB | 	rdlong	arg01, fp
3462c     0C 4E 85 F1 | 	sub	fp, #12
34630     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1030
34634     14 01 90 FD | 	jmp	#LR__5134
34638                 | LR__5133
34638     2C 4F 05 F1 | 	add	fp, #300
3463c     A7 48 6A FC | 	wrlong	#292, fp
34640     14 4F 85 F1 | 	sub	fp, #276
34644     A7 2A C2 FA | 	rdbyte	local03, fp
34648     18 4E 85 F1 | 	sub	fp, #24
3464c     01 2A CE F7 | 	test	local03, #1 wz
34650     2C 4F 05 A1 |  if_e	add	fp, #300
34654     A7 2A 02 AB |  if_e	rdlong	local03, fp
34658     92 2A 46 A5 |  if_e	or	local03, #146
3465c     A7 2A 62 AC |  if_e	wrlong	local03, fp
34660     2C 4F 85 A1 |  if_e	sub	fp, #300
34664     18 4E 05 F1 | 	add	fp, #24
34668     A7 2A C2 FA | 	rdbyte	local03, fp
3466c     18 4E 85 F1 | 	sub	fp, #24
34670     10 2A CE F7 | 	test	local03, #16 wz
34674     2C 4F 05 51 |  if_ne	add	fp, #300
34678     A7 2A 02 5B |  if_ne	rdlong	local03, fp
3467c     08 00 00 5F 
34680     49 2A 46 55 |  if_ne	or	local03, ##4169
34684     A7 2A 62 5C |  if_ne	wrlong	local03, fp
34688     2C 4F 85 51 |  if_ne	sub	fp, #300
3468c     08 4E 05 F1 | 	add	fp, #8
34690     A7 2A 02 FB | 	rdlong	local03, fp
34694     24 4F 05 F1 | 	add	fp, #292
34698     A7 28 02 FB | 	rdlong	local02, fp
3469c     08 2A 06 F1 | 	add	local03, #8
346a0     15 29 62 FC | 	wrlong	local02, local03
346a4     24 4F 85 F1 | 	sub	fp, #292
346a8     A7 2A 02 FB | 	rdlong	local03, fp
346ac     0C 2A 06 F1 | 	add	local03, #12
346b0     15 03 68 FC | 	wrlong	#1, local03
346b4     A7 2A 02 FB | 	rdlong	local03, fp
346b8     08 4E 05 F1 | 	add	fp, #8
346bc     A7 28 02 FB | 	rdlong	local02, fp
346c0     18 2A 06 F1 | 	add	local03, #24
346c4     15 29 62 FC | 	wrlong	local02, local03
346c8     08 4E 85 F1 | 	sub	fp, #8
346cc     A7 2A 02 FB | 	rdlong	local03, fp
346d0     1C 2A 06 F1 | 	add	local03, #28
346d4     01 00 80 FF 
346d8     15 01 68 FC | 	wrlong	##512, local03
346dc     A7 28 02 FB | 	rdlong	local02, fp
346e0     14 2B 02 F6 | 	mov	local03, local02
346e4     18 28 06 F1 | 	add	local02, #24
346e8     14 29 02 FB | 	rdlong	local02, local02
346ec     FF 29 06 F1 | 	add	local02, #511
346f0     14 29 52 F6 | 	abs	local02, local02 wc
346f4     09 28 46 F0 | 	shr	local02, #9
346f8     14 29 82 F6 | 	negc	local02, local02
346fc     20 2A 06 F1 | 	add	local03, #32
34700     15 29 62 FC | 	wrlong	local02, local03
34704     A7 28 02 FB | 	rdlong	local02, fp
34708     14 2B 02 F6 | 	mov	local03, local02
3470c     14 27 02 F6 | 	mov	local01, local02
34710     0C 4E 05 F1 | 	add	fp, #12
34714     A7 12 E2 FA | 	rdword	arg01, fp
34718     02 4E 05 F1 | 	add	fp, #2
3471c     A7 14 E2 FA | 	rdword	arg02, fp
34720     16 4E 85 F1 | 	sub	fp, #22
34724     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_1028
34728     2C 26 06 F1 | 	add	local01, #44
3472c     13 FB 61 FC | 	wrlong	result1, local01
34730     28 28 06 F1 | 	add	local02, #40
34734     14 FB 61 FC | 	wrlong	result1, local02
34738     24 2A 06 F1 | 	add	local03, #36
3473c     15 FB 61 FC | 	wrlong	result1, local03
34740                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
34740                 | '     }
34740                 | '     buf->st_mode = mode;
34740                 | '     buf->st_nlink = 1;
34740                 | '     buf->st_size = finfo.fsize;
34740                 | '     buf->st_blksize = 512;
34740                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
34740                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
34740                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34740                 | '     return r;
34740     0C 4E 05 F1 | 	add	fp, #12
34744     A7 FA 01 FB | 	rdlong	result1, fp
34748     0C 4E 85 F1 | 	sub	fp, #12
3474c                 | LR__5134
3474c     A7 F0 03 F6 | 	mov	ptra, fp
34750     B2 00 A0 FD | 	call	#popregs_
34754                 | _fatfs_cc_v_stat_ret
34754     2D 00 64 FD | 	ret
34758                 | 
34758                 | _fatfs_cc_v_read
34758     00 4A 05 F6 | 	mov	COUNT_, #0
3475c     A8 00 A0 FD | 	call	#pushregs_
34760     1C F0 07 F1 | 	add	ptra, #28
34764     04 4E 05 F1 | 	add	fp, #4
34768     A7 12 62 FC | 	wrlong	arg01, fp
3476c     04 4E 05 F1 | 	add	fp, #4
34770     A7 14 62 FC | 	wrlong	arg02, fp
34774     04 4E 05 F1 | 	add	fp, #4
34778     A7 16 62 FC | 	wrlong	arg03, fp
3477c     08 4E 85 F1 | 	sub	fp, #8
34780     A7 12 02 FB | 	rdlong	arg01, fp
34784     09 13 0A FB | 	rdlong	arg01, arg01 wz
34788     0C 4E 05 F1 | 	add	fp, #12
3478c     A7 12 62 FC | 	wrlong	arg01, fp
34790     10 4E 85 F1 | 	sub	fp, #16
34794                 | '         return _seterror( 5 );
34794     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34798     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
3479c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
347a0     01 FA 65 A6 |  if_e	neg	result1, #1
347a4     B8 00 90 AD |  if_e	jmp	#LR__5142
347a8     10 4E 05 F1 | 	add	fp, #16
347ac     A7 12 02 FB | 	rdlong	arg01, fp
347b0     02 00 00 FF 
347b4     14 12 06 F1 | 	add	arg01, ##1044
347b8     08 4E 85 F1 | 	sub	fp, #8
347bc     A7 14 02 FB | 	rdlong	arg02, fp
347c0     04 4E 05 F1 | 	add	fp, #4
347c4     A7 16 02 FB | 	rdlong	arg03, fp
347c8     0C 4E 05 F1 | 	add	fp, #12
347cc     A7 18 02 F6 | 	mov	arg04, fp
347d0     18 4E 85 F1 | 	sub	fp, #24
347d4     C4 CE BF FD | 	call	#_fatfs_cc_f_read
347d8     14 4E 05 F1 | 	add	fp, #20
347dc     A7 FA 61 FC | 	wrlong	result1, fp
347e0     14 4E 85 F1 | 	sub	fp, #20
347e4     00 FA 0D F2 | 	cmp	result1, #0 wz
347e8     34 00 90 AD |  if_e	jmp	#LR__5140
347ec     04 4E 05 F1 | 	add	fp, #4
347f0     A7 18 02 FB | 	rdlong	arg04, fp
347f4     0C 17 02 F6 | 	mov	arg03, arg04
347f8     08 18 06 F1 | 	add	arg04, #8
347fc     0C 19 02 FB | 	rdlong	arg04, arg04
34800     20 18 46 F5 | 	or	arg04, #32
34804     08 16 06 F1 | 	add	arg03, #8
34808     0B 19 62 FC | 	wrlong	arg04, arg03
3480c                 | '         fil->state |=  (0x20) ;
3480c                 | '         return _set_dos_error(r);
3480c     10 4E 05 F1 | 	add	fp, #16
34810     A7 12 02 FB | 	rdlong	arg01, fp
34814     14 4E 85 F1 | 	sub	fp, #20
34818     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1030
3481c     40 00 90 FD | 	jmp	#LR__5142
34820                 | LR__5140
34820     18 4E 05 F1 | 	add	fp, #24
34824     A7 FA 09 FB | 	rdlong	result1, fp wz
34828     18 4E 85 F1 | 	sub	fp, #24
3482c     24 00 90 5D |  if_ne	jmp	#LR__5141
34830     04 4E 05 F1 | 	add	fp, #4
34834     A7 FA 01 FB | 	rdlong	result1, fp
34838     FD 18 02 F6 | 	mov	arg04, result1
3483c     04 4E 85 F1 | 	sub	fp, #4
34840     08 FA 05 F1 | 	add	result1, #8
34844     FD FA 01 FB | 	rdlong	result1, result1
34848     10 FA 45 F5 | 	or	result1, #16
3484c     08 18 06 F1 | 	add	arg04, #8
34850     0C FB 61 FC | 	wrlong	result1, arg04
34854                 | LR__5141
34854                 | '         fil->state |=  (0x10) ;
34854                 | '     }
34854                 | '     return x;
34854     18 4E 05 F1 | 	add	fp, #24
34858     A7 FA 01 FB | 	rdlong	result1, fp
3485c     18 4E 85 F1 | 	sub	fp, #24
34860                 | LR__5142
34860     A7 F0 03 F6 | 	mov	ptra, fp
34864     B2 00 A0 FD | 	call	#popregs_
34868                 | _fatfs_cc_v_read_ret
34868     2D 00 64 FD | 	ret
3486c                 | 
3486c                 | _fatfs_cc_v_write
3486c     00 4A 05 F6 | 	mov	COUNT_, #0
34870     A8 00 A0 FD | 	call	#pushregs_
34874     1C F0 07 F1 | 	add	ptra, #28
34878     04 4E 05 F1 | 	add	fp, #4
3487c     A7 12 62 FC | 	wrlong	arg01, fp
34880     04 4E 05 F1 | 	add	fp, #4
34884     A7 14 62 FC | 	wrlong	arg02, fp
34888     04 4E 05 F1 | 	add	fp, #4
3488c     A7 16 62 FC | 	wrlong	arg03, fp
34890     08 4E 85 F1 | 	sub	fp, #8
34894     A7 12 02 FB | 	rdlong	arg01, fp
34898     09 13 0A FB | 	rdlong	arg01, arg01 wz
3489c     0C 4E 05 F1 | 	add	fp, #12
348a0     A7 12 62 FC | 	wrlong	arg01, fp
348a4     10 4E 85 F1 | 	sub	fp, #16
348a8                 | '         return _seterror( 5 );
348a8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
348ac     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
348b0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
348b4     01 FA 65 A6 |  if_e	neg	result1, #1
348b8     84 00 90 AD |  if_e	jmp	#LR__5151
348bc     10 4E 05 F1 | 	add	fp, #16
348c0     A7 12 02 FB | 	rdlong	arg01, fp
348c4     02 00 00 FF 
348c8     14 12 06 F1 | 	add	arg01, ##1044
348cc     08 4E 85 F1 | 	sub	fp, #8
348d0     A7 14 02 FB | 	rdlong	arg02, fp
348d4     04 4E 05 F1 | 	add	fp, #4
348d8     A7 16 02 FB | 	rdlong	arg03, fp
348dc     0C 4E 05 F1 | 	add	fp, #12
348e0     A7 18 02 F6 | 	mov	arg04, fp
348e4     18 4E 85 F1 | 	sub	fp, #24
348e8     4C D4 BF FD | 	call	#_fatfs_cc_f_write
348ec     14 4E 05 F1 | 	add	fp, #20
348f0     A7 FA 61 FC | 	wrlong	result1, fp
348f4     14 4E 85 F1 | 	sub	fp, #20
348f8     00 FA 0D F2 | 	cmp	result1, #0 wz
348fc     34 00 90 AD |  if_e	jmp	#LR__5150
34900     04 4E 05 F1 | 	add	fp, #4
34904     A7 18 02 FB | 	rdlong	arg04, fp
34908     0C 17 02 F6 | 	mov	arg03, arg04
3490c     08 18 06 F1 | 	add	arg04, #8
34910     0C 19 02 FB | 	rdlong	arg04, arg04
34914     20 18 46 F5 | 	or	arg04, #32
34918     08 16 06 F1 | 	add	arg03, #8
3491c     0B 19 62 FC | 	wrlong	arg04, arg03
34920                 | '         fil->state |=  (0x20) ;
34920                 | '         return _set_dos_error(r);
34920     10 4E 05 F1 | 	add	fp, #16
34924     A7 12 02 FB | 	rdlong	arg01, fp
34928     14 4E 85 F1 | 	sub	fp, #20
3492c     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1030
34930     0C 00 90 FD | 	jmp	#LR__5151
34934                 | LR__5150
34934                 | '     }
34934                 | '     return x;
34934     18 4E 05 F1 | 	add	fp, #24
34938     A7 FA 01 FB | 	rdlong	result1, fp
3493c     18 4E 85 F1 | 	sub	fp, #24
34940                 | LR__5151
34940     A7 F0 03 F6 | 	mov	ptra, fp
34944     B2 00 A0 FD | 	call	#popregs_
34948                 | _fatfs_cc_v_write_ret
34948     2D 00 64 FD | 	ret
3494c                 | 
3494c                 | _fatfs_cc_v_lseek
3494c     04 4A 05 F6 | 	mov	COUNT_, #4
34950     A8 00 A0 FD | 	call	#pushregs_
34954     0A 27 02 F6 | 	mov	local01, arg02
34958     0B 29 02 F6 | 	mov	local02, arg03
3495c     09 2B 02 FB | 	rdlong	local03, arg01
34960     02 00 00 FF 
34964     14 2A 0E F1 | 	add	local03, ##1044 wz
34968                 | '         return _seterror( 5 );
34968     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
3496c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
34970     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34974     01 FA 65 A6 |  if_e	neg	result1, #1
34978     4C 00 90 AD |  if_e	jmp	#LR__5162
3497c     00 28 0E F2 | 	cmp	local02, #0 wz
34980     24 00 90 AD |  if_e	jmp	#LR__5160
34984     01 28 0E F2 | 	cmp	local02, #1 wz
34988     14 2A 06 A1 |  if_e	add	local03, #20
3498c     15 2D 02 AB |  if_e	rdlong	local04, local03
34990     14 2A 86 A1 |  if_e	sub	local03, #20
34994     16 27 02 A1 |  if_e	add	local01, local04
34998     0C 2A 06 51 |  if_ne	add	local03, #12
3499c     15 2D 02 5B |  if_ne	rdlong	local04, local03
349a0     0C 2A 86 51 |  if_ne	sub	local03, #12
349a4     16 27 02 51 |  if_ne	add	local01, local04
349a8                 | LR__5160
349a8     13 15 02 F6 | 	mov	arg02, local01
349ac     15 13 02 F6 | 	mov	arg01, local03
349b0     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
349b4     FD 12 0A F6 | 	mov	arg01, result1 wz
349b8     08 00 90 AD |  if_e	jmp	#LR__5161
349bc                 | '         return _set_dos_error(result);
349bc     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1030
349c0     04 00 90 FD | 	jmp	#LR__5162
349c4                 | LR__5161
349c4                 | '     }
349c4                 | '     return offset;
349c4     13 FB 01 F6 | 	mov	result1, local01
349c8                 | LR__5162
349c8     A7 F0 03 F6 | 	mov	ptra, fp
349cc     B2 00 A0 FD | 	call	#popregs_
349d0                 | _fatfs_cc_v_lseek_ret
349d0     2D 00 64 FD | 	ret
349d4                 | 
349d4                 | _fatfs_cc_v_ioctl
349d4                 | ' {
349d4                 | '     return _seterror( 10 );
349d4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
349d8     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
349dc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
349e0     01 FA 65 F6 | 	neg	result1, #1
349e4                 | _fatfs_cc_v_ioctl_ret
349e4     2D 00 64 FD | 	ret
349e8                 | 
349e8                 | _fatfs_cc_v_mkdir
349e8     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
349ec     FD 12 02 F6 | 	mov	arg01, result1
349f0                 | ' 
349f0                 | '     r = f_mkdir(name);
349f0                 | '     return _set_dos_error(r);
349f0     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1030
349f4                 | _fatfs_cc_v_mkdir_ret
349f4     2D 00 64 FD | 	ret
349f8                 | 
349f8                 | _fatfs_cc_v_remove
349f8     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
349fc     FD 12 02 F6 | 	mov	arg01, result1
34a00                 | ' 
34a00                 | '     r = f_unlink(name);
34a00                 | '     return _set_dos_error(r);
34a00     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1030
34a04                 | _fatfs_cc_v_remove_ret
34a04     2D 00 64 FD | 	ret
34a08                 | 
34a08                 | _fatfs_cc_v_rmdir
34a08     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
34a0c     FD 12 02 F6 | 	mov	arg01, result1
34a10                 | ' 
34a10                 | '     r = f_unlink(name);
34a10                 | '     return _set_dos_error(r);
34a10     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1030
34a14                 | _fatfs_cc_v_rmdir_ret
34a14     2D 00 64 FD | 	ret
34a18                 | 
34a18                 | _fatfs_cc_v_rename
34a18     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
34a1c     FD 12 02 F6 | 	mov	arg01, result1
34a20                 | '     return _set_dos_error(r);
34a20     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1030
34a24                 | _fatfs_cc_v_rename_ret
34a24     2D 00 64 FD | 	ret
34a28                 | 
34a28                 | _fatfs_cc_v_open
34a28     07 4A 05 F6 | 	mov	COUNT_, #7
34a2c     A8 00 A0 FD | 	call	#pushregs_
34a30     09 27 02 F6 | 	mov	local01, arg01
34a34     0A 29 02 F6 | 	mov	local02, arg02
34a38     0B 2B 02 F6 | 	mov	local03, arg03
34a3c     03 00 00 FF 
34a40     3C 12 06 F6 | 	mov	arg01, ##1596
34a44                 | '     return _gc_alloc(size);
34a44     10 14 06 F6 | 	mov	arg02, #16
34a48     9C 56 BF FD | 	call	#__system___gc_doalloc
34a4c     FD 2C 0A F6 | 	mov	local04, result1 wz
34a50                 | '       return _seterror( 7 );
34a50     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34a54     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
34a58     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34a5c     01 FA 65 A6 |  if_e	neg	result1, #1
34a60     98 00 90 AD |  if_e	jmp	#LR__5176
34a64     16 13 02 F6 | 	mov	arg01, local04
34a68     00 14 06 F6 | 	mov	arg02, #0
34a6c     03 00 00 FF 
34a70     3C 16 06 F6 | 	mov	arg03, ##1596
34a74     98 00 A0 FD | 	call	#\builtin_bytefill_
34a78                 | '   switch (flags & 3) {
34a78     15 2F 02 F6 | 	mov	local05, local03
34a7c     03 2E 0E F5 | 	and	local05, #3 wz
34a80     0C 00 90 AD |  if_e	jmp	#LR__5170
34a84     01 2E 0E F2 | 	cmp	local05, #1 wz
34a88     0C 00 90 AD |  if_e	jmp	#LR__5171
34a8c     10 00 90 FD | 	jmp	#LR__5172
34a90                 | LR__5170
34a90     01 30 06 F6 | 	mov	local06, #1
34a94                 | '       fs_flags =  0x01 ;
34a94                 | '       break;
34a94     0C 00 90 FD | 	jmp	#LR__5173
34a98                 | LR__5171
34a98     02 30 06 F6 | 	mov	local06, #2
34a9c                 | '       fs_flags =  0x02 ;
34a9c                 | '       break;
34a9c     04 00 90 FD | 	jmp	#LR__5173
34aa0                 | LR__5172
34aa0     03 30 06 F6 | 	mov	local06, #3
34aa4                 | '       fs_flags =  0x01  |  0x02 ;
34aa4                 | '       break;
34aa4                 | LR__5173
34aa4     08 2A CE F7 | 	test	local03, #8 wz
34aa8     18 30 46 55 |  if_ne	or	local06, #24
34aac     08 00 90 5D |  if_ne	jmp	#LR__5174
34ab0     20 2A CE F7 | 	test	local03, #32 wz
34ab4     30 30 46 55 |  if_ne	or	local06, #48
34ab8                 | LR__5174
34ab8     02 00 00 FF 
34abc     14 2C 06 F1 | 	add	local04, ##1044
34ac0     16 13 02 F6 | 	mov	arg01, local04
34ac4     02 00 00 FF 
34ac8     14 2C 86 F1 | 	sub	local04, ##1044
34acc     14 15 02 F6 | 	mov	arg02, local02
34ad0     18 17 02 F6 | 	mov	arg03, local06
34ad4     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
34ad8     FD 32 0A F6 | 	mov	local07, result1 wz
34adc     14 00 90 AD |  if_e	jmp	#LR__5175
34ae0     16 13 02 F6 | 	mov	arg01, local04
34ae4                 | '     return _gc_free(ptr);
34ae4     0C 57 BF FD | 	call	#__system___gc_free
34ae8                 | '     free(f);
34ae8                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34ae8                 | '     return _set_dos_error(r);
34ae8     19 13 02 F6 | 	mov	arg01, local07
34aec     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1030
34af0     08 00 90 FD | 	jmp	#LR__5176
34af4                 | LR__5175
34af4     13 2D 62 FC | 	wrlong	local04, local01
34af8                 | '   }
34af8                 | '   fil->vfsdata = f;
34af8                 | '   return 0;
34af8     00 FA 05 F6 | 	mov	result1, #0
34afc                 | LR__5176
34afc     A7 F0 03 F6 | 	mov	ptra, fp
34b00     B2 00 A0 FD | 	call	#popregs_
34b04                 | _fatfs_cc_v_open_ret
34b04     2D 00 64 FD | 	ret
34b08                 | 
34b08                 | _fatfs_cc_v_flush
34b08     09 13 02 FB | 	rdlong	arg01, arg01
34b0c     02 00 00 FF 
34b10     14 12 0E F1 | 	add	arg01, ##1044 wz
34b14                 | '         return _seterror( 5 );
34b14     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34b18     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
34b1c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34b20     01 FA 65 A6 |  if_e	neg	result1, #1
34b24     0C 00 90 AD |  if_e	jmp	#LR__5180
34b28     00 DA BF FD | 	call	#_fatfs_cc_f_sync
34b2c     FD 12 02 F6 | 	mov	arg01, result1
34b30                 | '     }
34b30                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34b30                 | '     result = f_sync(f);
34b30                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34b30                 | '     return _set_dos_error(result);
34b30     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1030
34b34                 | LR__5180
34b34                 | _fatfs_cc_v_flush_ret
34b34     2D 00 64 FD | 	ret
34b38                 | 
34b38                 | _fatfs_cc_v_init
34b38                 | ' {
34b38                 | '     return 0;
34b38     00 FA 05 F6 | 	mov	result1, #0
34b3c                 | _fatfs_cc_v_init_ret
34b3c     2D 00 64 FD | 	ret
34b40                 | 
34b40                 | _fatfs_cc_v_deinit
34b40     AD 01 00 FF 
34b44     B4 14 06 F6 | 	mov	arg02, ##@LR__5376
34b48     00 12 06 F6 | 	mov	arg01, #0
34b4c     00 16 06 F6 | 	mov	arg03, #0
34b50     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
34b54     01 00 00 FF 
34b58     08 E4 05 F1 | 	add	objptr, ##520
34b5c     F2 12 02 FB | 	rdlong	arg01, objptr
34b60     04 E4 05 F1 | 	add	objptr, #4
34b64     F2 14 02 FB | 	rdlong	arg02, objptr
34b68     01 00 00 FF 
34b6c     0C E4 85 F1 | 	sub	objptr, ##524
34b70     F0 3D BF FD | 	call	#__system___freepins
34b74                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34b74                 | '     _freepins(f_pinmask);
34b74                 | '     return 0;
34b74     00 FA 05 F6 | 	mov	result1, #0
34b78                 | _fatfs_cc_v_deinit_ret
34b78     2D 00 64 FD | 	ret
34b7c                 | 
34b7c                 | _fatfs_cc_get_vfs
34b7c     01 4A 05 F6 | 	mov	COUNT_, #1
34b80     A8 00 A0 FD | 	call	#pushregs_
34b84     09 27 02 F6 | 	mov	local01, arg01
34b88     50 12 06 F6 | 	mov	arg01, #80
34b8c     28 55 BF FD | 	call	#__system___gc_alloc_managed
34b90     FD 12 02 F6 | 	mov	arg01, result1
34b94     F2 FA 01 F6 | 	mov	result1, objptr
34b98     00 60 05 FF 
34b9c     00 FA 45 F5 | 	or	result1, ##180355072
34ba0     09 FB 61 FC | 	wrlong	result1, arg01
34ba4     F2 FA 01 F6 | 	mov	result1, objptr
34ba8     00 68 05 FF 
34bac     00 FA 45 F5 | 	or	result1, ##181403648
34bb0     04 12 06 F1 | 	add	arg01, #4
34bb4     09 FB 61 FC | 	wrlong	result1, arg01
34bb8     F2 FA 01 F6 | 	mov	result1, objptr
34bbc     00 70 05 FF 
34bc0     00 FA 45 F5 | 	or	result1, ##182452224
34bc4     04 12 06 F1 | 	add	arg01, #4
34bc8     09 FB 61 FC | 	wrlong	result1, arg01
34bcc     F2 FA 01 F6 | 	mov	result1, objptr
34bd0     00 78 05 FF 
34bd4     00 FA 45 F5 | 	or	result1, ##183500800
34bd8     04 12 06 F1 | 	add	arg01, #4
34bdc     09 FB 61 FC | 	wrlong	result1, arg01
34be0     F2 FA 01 F6 | 	mov	result1, objptr
34be4     00 80 05 FF 
34be8     00 FA 45 F5 | 	or	result1, ##184549376
34bec     04 12 06 F1 | 	add	arg01, #4
34bf0     09 FB 61 FC | 	wrlong	result1, arg01
34bf4     04 12 06 F1 | 	add	arg01, #4
34bf8     09 01 68 FC | 	wrlong	#0, arg01
34bfc     04 12 06 F1 | 	add	arg01, #4
34c00     09 27 62 FC | 	wrlong	local01, arg01
34c04     04 12 06 F1 | 	add	arg01, #4
34c08     09 01 68 FC | 	wrlong	#0, arg01
34c0c     F2 FA 01 F6 | 	mov	result1, objptr
34c10     00 88 05 FF 
34c14     00 FA 45 F5 | 	or	result1, ##185597952
34c18     04 12 06 F1 | 	add	arg01, #4
34c1c     09 FB 61 FC | 	wrlong	result1, arg01
34c20     F2 FA 01 F6 | 	mov	result1, objptr
34c24     00 90 05 FF 
34c28     00 FA 45 F5 | 	or	result1, ##186646528
34c2c     04 12 06 F1 | 	add	arg01, #4
34c30     09 FB 61 FC | 	wrlong	result1, arg01
34c34     F2 FA 01 F6 | 	mov	result1, objptr
34c38     00 98 05 FF 
34c3c     00 FA 45 F5 | 	or	result1, ##187695104
34c40     04 12 06 F1 | 	add	arg01, #4
34c44     09 FB 61 FC | 	wrlong	result1, arg01
34c48     F2 FA 01 F6 | 	mov	result1, objptr
34c4c     00 A0 05 FF 
34c50     00 FA 45 F5 | 	or	result1, ##188743680
34c54     04 12 06 F1 | 	add	arg01, #4
34c58     09 FB 61 FC | 	wrlong	result1, arg01
34c5c     F2 FA 01 F6 | 	mov	result1, objptr
34c60     00 A8 05 FF 
34c64     00 FA 45 F5 | 	or	result1, ##189792256
34c68     04 12 06 F1 | 	add	arg01, #4
34c6c     09 FB 61 FC | 	wrlong	result1, arg01
34c70     F2 FA 01 F6 | 	mov	result1, objptr
34c74     00 B0 05 FF 
34c78     00 FA 45 F5 | 	or	result1, ##190840832
34c7c     04 12 06 F1 | 	add	arg01, #4
34c80     09 FB 61 FC | 	wrlong	result1, arg01
34c84     F2 FA 01 F6 | 	mov	result1, objptr
34c88     00 B8 05 FF 
34c8c     00 FA 45 F5 | 	or	result1, ##191889408
34c90     04 12 06 F1 | 	add	arg01, #4
34c94     09 FB 61 FC | 	wrlong	result1, arg01
34c98     F2 FA 01 F6 | 	mov	result1, objptr
34c9c     00 C0 05 FF 
34ca0     00 FA 45 F5 | 	or	result1, ##192937984
34ca4     04 12 06 F1 | 	add	arg01, #4
34ca8     09 FB 61 FC | 	wrlong	result1, arg01
34cac     F2 FA 01 F6 | 	mov	result1, objptr
34cb0     00 C8 05 FF 
34cb4     00 FA 45 F5 | 	or	result1, ##193986560
34cb8     04 12 06 F1 | 	add	arg01, #4
34cbc     09 FB 61 FC | 	wrlong	result1, arg01
34cc0     F2 FA 01 F6 | 	mov	result1, objptr
34cc4     00 D0 05 FF 
34cc8     00 FA 45 F5 | 	or	result1, ##195035136
34ccc     04 12 06 F1 | 	add	arg01, #4
34cd0     09 FB 61 FC | 	wrlong	result1, arg01
34cd4     F2 FA 01 F6 | 	mov	result1, objptr
34cd8     00 D8 05 FF 
34cdc     00 FA 45 F5 | 	or	result1, ##196083712
34ce0     04 12 06 F1 | 	add	arg01, #4
34ce4     09 FB 61 FC | 	wrlong	result1, arg01
34ce8     F2 FA 01 F6 | 	mov	result1, objptr
34cec     00 E0 05 FF 
34cf0     00 FA 45 F5 | 	or	result1, ##197132288
34cf4     04 12 06 F1 | 	add	arg01, #4
34cf8     09 FB 61 FC | 	wrlong	result1, arg01
34cfc     4C 12 86 F1 | 	sub	arg01, #76
34d00                 | ' 
34d00                 | '     v->close = &v_close;
34d00                 | '     v->read = &v_read;
34d00                 | '     v->write = &v_write;
34d00                 | '     v->lseek = &v_lseek;
34d00                 | '     v->ioctl = &v_ioctl;
34d00                 | '     v->flush = 0;
34d00                 | '     v->vfs_data = ptr;
34d00                 | '     v->reserved = 0;
34d00                 | ' 
34d00                 | '     v->open = &v_open;
34d00                 | '     v->creat = &v_creat;
34d00                 | '     v->opendir = &v_opendir;
34d00                 | '     v->closedir = &v_closedir;
34d00                 | '     v->readdir = &v_readdir;
34d00                 | '     v->stat = &v_stat;
34d00                 | ' 
34d00                 | '     v->mkdir = &v_mkdir;
34d00                 | '     v->rmdir = &v_rmdir;
34d00                 | ' 
34d00                 | '     v->remove = &v_remove;
34d00                 | '     v->rename = &v_rename;
34d00                 | ' 
34d00                 | '     v->init = &v_init;
34d00                 | '     v->deinit = &v_deinit;
34d00                 | ' 
34d00                 | '     return v;
34d00     09 FB 01 F6 | 	mov	result1, arg01
34d04     A7 F0 03 F6 | 	mov	ptra, fp
34d08     B2 00 A0 FD | 	call	#popregs_
34d0c                 | _fatfs_cc_get_vfs_ret
34d0c     2D 00 64 FD | 	ret
34d10                 | 
34d10                 | _fatfs_cc_xmit_mmc_1181
34d10     01 00 00 FF 
34d14     10 E4 05 F1 | 	add	objptr, ##528
34d18     F2 00 02 FB | 	rdlong	_var01, objptr
34d1c     08 E4 05 F1 | 	add	objptr, #8
34d20     F2 02 02 FB | 	rdlong	_var02, objptr
34d24     01 00 00 FF 
34d28     18 E4 85 F1 | 	sub	objptr, ##536
34d2c     40 02 62 FD | 	dirl	_var02
34d30     28 02 64 FD | 	setq	#1
34d34     09 05 02 FB | 	rdlong	_var03, arg01
34d38     69 04 62 FD | 	rev	_var03
34d3c     1B 04 FE F9 | 	movbyts	_var03, #27
34d40     01 05 22 FC | 	wypin	_var03, _var02
34d44     0A 05 02 F6 | 	mov	_var03, arg02
34d48     02 14 4E F0 | 	shr	arg02, #2 wz
34d4c     03 04 66 F0 | 	shl	_var03, #3
34d50     00 05 22 FC | 	wypin	_var03, _var01
34d54     41 02 62 FD | 	dirh	_var02
34d58     08 12 06 F1 | 	add	arg01, #8
34d5c     69 06 62 FD | 	rev	_var04
34d60     1B 06 FE F9 | 	movbyts	_var04, #27
34d64                 | LR__5190
34d64     01 07 22 5C |  if_ne	wypin	_var04, _var02
34d68     09 07 02 5B |  if_ne	rdlong	_var04, arg01
34d6c     04 12 06 51 |  if_ne	add	arg01, #4
34d70     69 06 62 5D |  if_ne	rev	_var04
34d74     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
34d78                 | LR__5191
34d78     40 02 72 5D |  if_ne	testp	_var02 wc
34d7c     F8 FF 9F 1D |  if_a	jmp	#LR__5191
34d80     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5190
34d84                 | LR__5192
34d84     40 00 72 FD | 	testp	_var01 wc
34d88     F8 FF 9F 3D |  if_ae	jmp	#LR__5192
34d8c     40 02 62 FD | 	dirl	_var02
34d90     FF FF FF FF 
34d94     01 FF 2B FC | 	wypin	##-1, _var02
34d98     41 02 62 FD | 	dirh	_var02
34d9c                 | _fatfs_cc_xmit_mmc_1181_ret
34d9c     2D 00 64 FD | 	ret
34da0                 | 
34da0                 | _fatfs_cc_rcvr_mmc_1188
34da0     01 00 00 FF 
34da4     10 E4 05 F1 | 	add	objptr, ##528
34da8     F2 00 02 FB | 	rdlong	_var01, objptr
34dac     0C E4 05 F1 | 	add	objptr, #12
34db0     F2 02 02 FB | 	rdlong	_var02, objptr
34db4     01 00 00 FF 
34db8     1C E4 85 F1 | 	sub	objptr, ##540
34dbc     01 03 08 FC | 	akpin	_var02
34dc0     0A 05 0A F6 | 	mov	_var03, arg02 wz
34dc4     02 04 4E F0 | 	shr	_var03, #2 wz
34dc8     30 00 90 AD |  if_e	jmp	#LR__5202
34dcc     02 07 02 F6 | 	mov	_var04, _var03
34dd0     05 06 66 F0 | 	shl	_var04, #5
34dd4     00 07 22 FC | 	wypin	_var04, _var01
34dd8     01 7F 18 FC | 	wxpin	#63, _var02
34ddc                 | LR__5200
34ddc                 | LR__5201
34ddc     40 02 72 FD | 	testp	_var02 wc
34de0     F8 FF 9F 3D |  if_ae	jmp	#LR__5201
34de4     01 07 8A FA | 	rdpin	_var04, _var02
34de8     69 06 62 FD | 	rev	_var04
34dec     1B 06 FE F9 | 	movbyts	_var04, #27
34df0     09 07 62 FC | 	wrlong	_var04, arg01
34df4     04 12 06 F1 | 	add	arg01, #4
34df8     F8 05 6E FB | 	djnz	_var03, #LR__5200
34dfc                 | LR__5202
34dfc     03 14 0E F5 | 	and	arg02, #3 wz
34e00     24 00 90 AD |  if_e	jmp	#LR__5205
34e04     01 4F 18 FC | 	wxpin	#39, _var02
34e08                 | LR__5203
34e08     00 11 28 FC | 	wypin	#8, _var01
34e0c                 | LR__5204
34e0c     40 02 72 FD | 	testp	_var02 wc
34e10     F8 FF 9F 3D |  if_ae	jmp	#LR__5204
34e14     01 07 8A FA | 	rdpin	_var04, _var02
34e18     69 06 62 FD | 	rev	_var04
34e1c     09 07 42 FC | 	wrbyte	_var04, arg01
34e20     01 12 06 F1 | 	add	arg01, #1
34e24     F8 15 6E FB | 	djnz	arg02, #LR__5203
34e28                 | LR__5205
34e28                 | _fatfs_cc_rcvr_mmc_1188_ret
34e28     2D 00 64 FD | 	ret
34e2c                 | 
34e2c                 | _fatfs_cc_wait_ready_1192
34e2c     01 4A 05 F6 | 	mov	COUNT_, #1
34e30     A8 00 A0 FD | 	call	#pushregs_
34e34     10 F0 07 F1 | 	add	ptra, #16
34e38     1A FA 61 FD | 	getct	result1
34e3c     08 4E 05 F1 | 	add	fp, #8
34e40     A7 FA 61 FC | 	wrlong	result1, fp
34e44     14 26 06 FB | 	rdlong	local01, #20
34e48     01 26 46 F0 | 	shr	local01, #1
34e4c     04 4E 05 F1 | 	add	fp, #4
34e50     A7 26 62 FC | 	wrlong	local01, fp
34e54     0C 4E 85 F1 | 	sub	fp, #12
34e58                 | ' {
34e58                 | ' 	BYTE d;
34e58                 | ' 	UINT tmr, tmout;
34e58                 | ' 
34e58                 | ' 	tmr = _cnt();
34e58                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
34e58                 | ' 	for(;;) {
34e58                 | LR__5210
34e58     04 4E 05 F1 | 	add	fp, #4
34e5c     A7 12 02 F6 | 	mov	arg01, fp
34e60     04 4E 85 F1 | 	sub	fp, #4
34e64     01 14 06 F6 | 	mov	arg02, #1
34e68     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1188
34e6c     04 4E 05 F1 | 	add	fp, #4
34e70     A7 26 C2 FA | 	rdbyte	local01, fp
34e74     04 4E 85 F1 | 	sub	fp, #4
34e78     FF 26 0E F2 | 	cmp	local01, #255 wz
34e7c     01 FA 05 A6 |  if_e	mov	result1, #1
34e80     28 00 90 AD |  if_e	jmp	#LR__5211
34e84     1A FA 61 FD | 	getct	result1
34e88     08 4E 05 F1 | 	add	fp, #8
34e8c     A7 26 02 FB | 	rdlong	local01, fp
34e90     13 FB 81 F1 | 	sub	result1, local01
34e94     04 4E 05 F1 | 	add	fp, #4
34e98     A7 26 02 FB | 	rdlong	local01, fp
34e9c     0C 4E 85 F1 | 	sub	fp, #12
34ea0     13 FB 11 F2 | 	cmp	result1, local01 wc
34ea4     00 FA 05 36 |  if_ae	mov	result1, #0
34ea8     AC FF 9F CD |  if_b	jmp	#LR__5210
34eac                 | LR__5211
34eac     A7 F0 03 F6 | 	mov	ptra, fp
34eb0     B2 00 A0 FD | 	call	#popregs_
34eb4                 | _fatfs_cc_wait_ready_1192_ret
34eb4     2D 00 64 FD | 	ret
34eb8                 | 
34eb8                 | _fatfs_cc_deselect_1198
34eb8     00 4A 05 F6 | 	mov	COUNT_, #0
34ebc     A8 00 A0 FD | 	call	#pushregs_
34ec0     14 F0 07 F1 | 	add	ptra, #20
34ec4     01 00 00 FF 
34ec8     14 E4 05 F1 | 	add	objptr, ##532
34ecc     F2 14 02 FB | 	rdlong	arg02, objptr
34ed0     04 4E 05 F1 | 	add	fp, #4
34ed4     A7 14 62 FC | 	wrlong	arg02, fp
34ed8     04 E4 85 F1 | 	sub	objptr, #4
34edc     F2 14 02 FB | 	rdlong	arg02, objptr
34ee0     04 4E 05 F1 | 	add	fp, #4
34ee4     A7 14 62 FC | 	wrlong	arg02, fp
34ee8     08 E4 05 F1 | 	add	objptr, #8
34eec     F2 14 02 FB | 	rdlong	arg02, objptr
34ef0     04 4E 05 F1 | 	add	fp, #4
34ef4     A7 14 62 FC | 	wrlong	arg02, fp
34ef8     04 E4 05 F1 | 	add	objptr, #4
34efc     F2 14 02 FB | 	rdlong	arg02, objptr
34f00     01 00 00 FF 
34f04     1C E4 85 F1 | 	sub	objptr, ##540
34f08     04 4E 05 F1 | 	add	fp, #4
34f0c     A7 14 62 FC | 	wrlong	arg02, fp
34f10     0C 4E 85 F1 | 	sub	fp, #12
34f14     A7 12 02 FB | 	rdlong	arg01, fp
34f18     04 4E 85 F1 | 	sub	fp, #4
34f1c     59 12 62 FD | 	drvh	arg01
34f20     1F 20 64 FD | 	waitx	#16
34f24     A7 12 02 F6 | 	mov	arg01, fp
34f28     01 14 06 F6 | 	mov	arg02, #1
34f2c     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1188
34f30     A7 F0 03 F6 | 	mov	ptra, fp
34f34     B2 00 A0 FD | 	call	#popregs_
34f38                 | _fatfs_cc_deselect_1198_ret
34f38     2D 00 64 FD | 	ret
34f3c                 | 
34f3c                 | _fatfs_cc_select_1202
34f3c     00 4A 05 F6 | 	mov	COUNT_, #0
34f40     A8 00 A0 FD | 	call	#pushregs_
34f44     10 F0 07 F1 | 	add	ptra, #16
34f48     01 00 00 FF 
34f4c     14 E4 05 F1 | 	add	objptr, ##532
34f50     F2 14 02 FB | 	rdlong	arg02, objptr
34f54     08 4E 05 F1 | 	add	fp, #8
34f58     A7 14 62 FC | 	wrlong	arg02, fp
34f5c     08 E4 05 F1 | 	add	objptr, #8
34f60     F2 12 02 FB | 	rdlong	arg01, objptr
34f64     01 00 00 FF 
34f68     1C E4 85 F1 | 	sub	objptr, ##540
34f6c     04 4E 05 F1 | 	add	fp, #4
34f70     A7 12 62 FC | 	wrlong	arg01, fp
34f74     50 12 62 FD | 	fltl	arg01
34f78     04 4E 85 F1 | 	sub	fp, #4
34f7c     A7 12 02 FB | 	rdlong	arg01, fp
34f80     58 12 62 FD | 	drvl	arg01
34f84     1F 20 64 FD | 	waitx	#16
34f88     04 4E 05 F1 | 	add	fp, #4
34f8c     A7 12 02 FB | 	rdlong	arg01, fp
34f90     41 12 62 FD | 	dirh	arg01
34f94     08 4E 85 F1 | 	sub	fp, #8
34f98     A7 12 02 F6 | 	mov	arg01, fp
34f9c     04 4E 85 F1 | 	sub	fp, #4
34fa0     01 14 06 F6 | 	mov	arg02, #1
34fa4     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1188
34fa8     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1192
34fac     00 FA 0D F2 | 	cmp	result1, #0 wz
34fb0     01 FA 05 56 |  if_ne	mov	result1, #1
34fb4     08 00 90 5D |  if_ne	jmp	#LR__5220
34fb8     FC FE BF FD | 	call	#_fatfs_cc_deselect_1198
34fbc                 | ' 
34fbc                 | ' 	deselect();
34fbc                 | ' 	return 0;
34fbc     00 FA 05 F6 | 	mov	result1, #0
34fc0                 | LR__5220
34fc0     A7 F0 03 F6 | 	mov	ptra, fp
34fc4     B2 00 A0 FD | 	call	#popregs_
34fc8                 | _fatfs_cc_select_1202_ret
34fc8     2D 00 64 FD | 	ret
34fcc                 | 
34fcc                 | _fatfs_cc_rcvr_datablock_1206
34fcc     01 4A 05 F6 | 	mov	COUNT_, #1
34fd0     A8 00 A0 FD | 	call	#pushregs_
34fd4     18 F0 07 F1 | 	add	ptra, #24
34fd8     04 4E 05 F1 | 	add	fp, #4
34fdc     A7 12 62 FC | 	wrlong	arg01, fp
34fe0     04 4E 05 F1 | 	add	fp, #4
34fe4     A7 14 62 FC | 	wrlong	arg02, fp
34fe8     1A FA 61 FD | 	getct	result1
34fec     08 4E 05 F1 | 	add	fp, #8
34ff0     A7 FA 61 FC | 	wrlong	result1, fp
34ff4     14 26 06 FB | 	rdlong	local01, #20
34ff8     03 26 46 F0 | 	shr	local01, #3
34ffc     04 4E 05 F1 | 	add	fp, #4
35000     A7 26 62 FC | 	wrlong	local01, fp
35004     14 4E 85 F1 | 	sub	fp, #20
35008                 | ' 	BYTE *buff,
35008                 | ' 	UINT btr
35008                 | ' )
35008                 | ' {
35008                 | ' 	BYTE d[2];
35008                 | ' 	UINT tmr, tmout;
35008                 | ' 
35008                 | ' 	tmr = _cnt();
35008                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
35008                 | ' 	for(;;) {
35008                 | LR__5230
35008     0C 4E 05 F1 | 	add	fp, #12
3500c     A7 12 02 F6 | 	mov	arg01, fp
35010     0C 4E 85 F1 | 	sub	fp, #12
35014     01 14 06 F6 | 	mov	arg02, #1
35018     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1188
3501c     0C 4E 05 F1 | 	add	fp, #12
35020     A7 26 C2 FA | 	rdbyte	local01, fp
35024     0C 4E 85 F1 | 	sub	fp, #12
35028     FF 26 0E F2 | 	cmp	local01, #255 wz
3502c     28 00 90 5D |  if_ne	jmp	#LR__5231
35030     1A FA 61 FD | 	getct	result1
35034     FD 26 02 F6 | 	mov	local01, result1
35038     10 4E 05 F1 | 	add	fp, #16
3503c     A7 14 02 FB | 	rdlong	arg02, fp
35040     0A 27 82 F1 | 	sub	local01, arg02
35044     04 4E 05 F1 | 	add	fp, #4
35048     A7 14 02 FB | 	rdlong	arg02, fp
3504c     14 4E 85 F1 | 	sub	fp, #20
35050     0A 27 12 F2 | 	cmp	local01, arg02 wc
35054     B0 FF 9F CD |  if_b	jmp	#LR__5230
35058                 | LR__5231
35058     0C 4E 05 F1 | 	add	fp, #12
3505c     A7 26 C2 FA | 	rdbyte	local01, fp
35060     0C 4E 85 F1 | 	sub	fp, #12
35064     FE 26 0E F2 | 	cmp	local01, #254 wz
35068     00 FA 05 56 |  if_ne	mov	result1, #0
3506c     30 00 90 5D |  if_ne	jmp	#LR__5232
35070     04 4E 05 F1 | 	add	fp, #4
35074     A7 12 02 FB | 	rdlong	arg01, fp
35078     04 4E 05 F1 | 	add	fp, #4
3507c     A7 14 02 FB | 	rdlong	arg02, fp
35080     08 4E 85 F1 | 	sub	fp, #8
35084     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1188
35088     0C 4E 05 F1 | 	add	fp, #12
3508c     A7 12 02 F6 | 	mov	arg01, fp
35090     0C 4E 85 F1 | 	sub	fp, #12
35094     02 14 06 F6 | 	mov	arg02, #2
35098     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1188
3509c                 | ' 
3509c                 | ' 	rcvr_mmc(buff, btr);
3509c                 | ' 	rcvr_mmc(d, 2);
3509c                 | ' 
3509c                 | ' 	return 1;
3509c     01 FA 05 F6 | 	mov	result1, #1
350a0                 | LR__5232
350a0     A7 F0 03 F6 | 	mov	ptra, fp
350a4     B2 00 A0 FD | 	call	#popregs_
350a8                 | _fatfs_cc_rcvr_datablock_1206_ret
350a8     2D 00 64 FD | 	ret
350ac                 | 
350ac                 | _fatfs_cc_xmit_datablock_1208
350ac     00 4A 05 F6 | 	mov	COUNT_, #0
350b0     A8 00 A0 FD | 	call	#pushregs_
350b4     10 F0 07 F1 | 	add	ptra, #16
350b8     04 4E 05 F1 | 	add	fp, #4
350bc     A7 12 62 FC | 	wrlong	arg01, fp
350c0     04 4E 05 F1 | 	add	fp, #4
350c4     A7 14 42 FC | 	wrbyte	arg02, fp
350c8     08 4E 85 F1 | 	sub	fp, #8
350cc     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1192
350d0     00 FA 0D F2 | 	cmp	result1, #0 wz
350d4     00 FA 05 A6 |  if_e	mov	result1, #0
350d8     90 00 90 AD |  if_e	jmp	#LR__5241
350dc     08 4E 05 F1 | 	add	fp, #8
350e0     A7 14 C2 FA | 	rdbyte	arg02, fp
350e4     04 4E 05 F1 | 	add	fp, #4
350e8     A7 14 42 FC | 	wrbyte	arg02, fp
350ec     A7 12 02 F6 | 	mov	arg01, fp
350f0     0C 4E 85 F1 | 	sub	fp, #12
350f4     01 14 06 F6 | 	mov	arg02, #1
350f8     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1181
350fc     08 4E 05 F1 | 	add	fp, #8
35100     A7 14 C2 FA | 	rdbyte	arg02, fp
35104     08 4E 85 F1 | 	sub	fp, #8
35108     FD 14 0E F2 | 	cmp	arg02, #253 wz
3510c     58 00 90 AD |  if_e	jmp	#LR__5240
35110     04 4E 05 F1 | 	add	fp, #4
35114     A7 12 02 FB | 	rdlong	arg01, fp
35118     04 4E 85 F1 | 	sub	fp, #4
3511c     09 14 C6 F9 | 	decod	arg02, #9
35120     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1181
35124     0C 4E 05 F1 | 	add	fp, #12
35128     A7 12 02 F6 | 	mov	arg01, fp
3512c     0C 4E 85 F1 | 	sub	fp, #12
35130     02 14 06 F6 | 	mov	arg02, #2
35134     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1188
35138     0C 4E 05 F1 | 	add	fp, #12
3513c     A7 12 02 F6 | 	mov	arg01, fp
35140     0C 4E 85 F1 | 	sub	fp, #12
35144     01 14 06 F6 | 	mov	arg02, #1
35148     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1188
3514c     0C 4E 05 F1 | 	add	fp, #12
35150     A7 14 C2 FA | 	rdbyte	arg02, fp
35154     0C 4E 85 F1 | 	sub	fp, #12
35158     1F 14 06 F5 | 	and	arg02, #31
3515c     05 14 0E F2 | 	cmp	arg02, #5 wz
35160                 | ' 			return 0;
35160     00 FA 05 56 |  if_ne	mov	result1, #0
35164     04 00 90 5D |  if_ne	jmp	#LR__5241
35168                 | LR__5240
35168                 | ' 	}
35168                 | ' 
35168                 | ' 	return 1;
35168     01 FA 05 F6 | 	mov	result1, #1
3516c                 | LR__5241
3516c     A7 F0 03 F6 | 	mov	ptra, fp
35170     B2 00 A0 FD | 	call	#popregs_
35174                 | _fatfs_cc_xmit_datablock_1208_ret
35174     2D 00 64 FD | 	ret
35178                 | 
35178                 | _fatfs_cc_send_cmd_1212
35178     01 4A 05 F6 | 	mov	COUNT_, #1
3517c     A8 00 A0 FD | 	call	#pushregs_
35180     1C F0 07 F1 | 	add	ptra, #28
35184                 | _fatfs_cc_send_cmd_1212_enter
35184     04 4E 05 F1 | 	add	fp, #4
35188     A7 12 42 FC | 	wrbyte	arg01, fp
3518c     04 4E 05 F1 | 	add	fp, #4
35190     A7 14 62 FC | 	wrlong	arg02, fp
35194     04 4E 85 F1 | 	sub	fp, #4
35198     A7 FA C1 FA | 	rdbyte	result1, fp
3519c     04 4E 85 F1 | 	sub	fp, #4
351a0     80 FA CD F7 | 	test	result1, #128 wz
351a4     44 00 90 AD |  if_e	jmp	#LR__5250
351a8     04 4E 05 F1 | 	add	fp, #4
351ac     A7 14 C2 FA | 	rdbyte	arg02, fp
351b0     7F 14 06 F5 | 	and	arg02, #127
351b4     A7 14 42 FC | 	wrbyte	arg02, fp
351b8     04 4E 85 F1 | 	sub	fp, #4
351bc     37 12 06 F6 | 	mov	arg01, #55
351c0     00 14 06 F6 | 	mov	arg02, #0
351c4     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1212
351c8     0C 4E 05 F1 | 	add	fp, #12
351cc     A7 FA 41 FC | 	wrbyte	result1, fp
351d0     A7 14 C2 FA | 	rdbyte	arg02, fp
351d4     0C 4E 85 F1 | 	sub	fp, #12
351d8     02 14 16 F2 | 	cmp	arg02, #2 wc
351dc     0C 4E 05 31 |  if_ae	add	fp, #12
351e0     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
351e4     0C 4E 85 31 |  if_ae	sub	fp, #12
351e8     6C 01 90 3D |  if_ae	jmp	#LR__5254
351ec                 | LR__5250
351ec     04 4E 05 F1 | 	add	fp, #4
351f0     A7 14 C2 FA | 	rdbyte	arg02, fp
351f4     04 4E 85 F1 | 	sub	fp, #4
351f8     0C 14 0E F2 | 	cmp	arg02, #12 wz
351fc     14 00 90 AD |  if_e	jmp	#LR__5251
35200     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1198
35204     34 FD BF FD | 	call	#_fatfs_cc_select_1202
35208     00 FA 0D F2 | 	cmp	result1, #0 wz
3520c     FF FA 05 A6 |  if_e	mov	result1, #255
35210     44 01 90 AD |  if_e	jmp	#LR__5254
35214                 | LR__5251
35214     04 4E 05 F1 | 	add	fp, #4
35218     A7 14 C2 FA | 	rdbyte	arg02, fp
3521c     40 FA 05 F6 | 	mov	result1, #64
35220     0A FB 41 F5 | 	or	result1, arg02
35224     10 4E 05 F1 | 	add	fp, #16
35228     A7 FA 41 FC | 	wrbyte	result1, fp
3522c     0C 4E 85 F1 | 	sub	fp, #12
35230     A7 FA 01 FB | 	rdlong	result1, fp
35234     18 FA 45 F0 | 	shr	result1, #24
35238     0D 4E 05 F1 | 	add	fp, #13
3523c     A7 FA 41 FC | 	wrbyte	result1, fp
35240     0D 4E 85 F1 | 	sub	fp, #13
35244     A7 FA 01 FB | 	rdlong	result1, fp
35248     10 FA 45 F0 | 	shr	result1, #16
3524c     0E 4E 05 F1 | 	add	fp, #14
35250     A7 FA 41 FC | 	wrbyte	result1, fp
35254     0E 4E 85 F1 | 	sub	fp, #14
35258     A7 FA 01 FB | 	rdlong	result1, fp
3525c     08 FA 45 F0 | 	shr	result1, #8
35260     0F 4E 05 F1 | 	add	fp, #15
35264     A7 FA 41 FC | 	wrbyte	result1, fp
35268     0F 4E 85 F1 | 	sub	fp, #15
3526c     A7 FA 01 FB | 	rdlong	result1, fp
35270     10 4E 05 F1 | 	add	fp, #16
35274     A7 FA 41 FC | 	wrbyte	result1, fp
35278     0C 4E 85 F1 | 	sub	fp, #12
3527c     A7 02 48 FC | 	wrbyte	#1, fp
35280     08 4E 85 F1 | 	sub	fp, #8
35284     A7 FA C9 FA | 	rdbyte	result1, fp wz
35288     04 4E 85 F1 | 	sub	fp, #4
3528c     0C 4E 05 A1 |  if_e	add	fp, #12
35290     A7 2A 49 AC |  if_e	wrbyte	#149, fp
35294     0C 4E 85 A1 |  if_e	sub	fp, #12
35298     04 4E 05 F1 | 	add	fp, #4
3529c     A7 FA C1 FA | 	rdbyte	result1, fp
352a0     04 4E 85 F1 | 	sub	fp, #4
352a4     08 FA 0D F2 | 	cmp	result1, #8 wz
352a8     0C 4E 05 A1 |  if_e	add	fp, #12
352ac     A7 0E 49 AC |  if_e	wrbyte	#135, fp
352b0     0C 4E 85 A1 |  if_e	sub	fp, #12
352b4     0C 4E 05 F1 | 	add	fp, #12
352b8     A7 14 C2 FA | 	rdbyte	arg02, fp
352bc     0D 4E 05 F1 | 	add	fp, #13
352c0     A7 14 42 FC | 	wrbyte	arg02, fp
352c4     05 4E 85 F1 | 	sub	fp, #5
352c8     A7 12 02 F6 | 	mov	arg01, fp
352cc     14 4E 85 F1 | 	sub	fp, #20
352d0     06 14 06 F6 | 	mov	arg02, #6
352d4     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1181
352d8     04 4E 05 F1 | 	add	fp, #4
352dc     A7 26 C2 FA | 	rdbyte	local01, fp
352e0     04 4E 85 F1 | 	sub	fp, #4
352e4     0C 26 0E F2 | 	cmp	local01, #12 wz
352e8     10 4E 05 A1 |  if_e	add	fp, #16
352ec     A7 12 02 A6 |  if_e	mov	arg01, fp
352f0     10 4E 85 A1 |  if_e	sub	fp, #16
352f4     01 14 06 A6 |  if_e	mov	arg02, #1
352f8     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1188
352fc     0C 4E 05 F1 | 	add	fp, #12
35300     A7 14 48 FC | 	wrbyte	#10, fp
35304     0C 4E 85 F1 | 	sub	fp, #12
35308                 | ' 	n = 10;
35308                 | ' 	do
35308                 | LR__5252
35308     10 4E 05 F1 | 	add	fp, #16
3530c     A7 12 02 F6 | 	mov	arg01, fp
35310     10 4E 85 F1 | 	sub	fp, #16
35314     01 14 06 F6 | 	mov	arg02, #1
35318     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1188
3531c     10 4E 05 F1 | 	add	fp, #16
35320     A7 26 C2 FA | 	rdbyte	local01, fp
35324     10 4E 85 F1 | 	sub	fp, #16
35328     80 26 CE F7 | 	test	local01, #128 wz
3532c     1C 00 90 AD |  if_e	jmp	#LR__5253
35330     0C 4E 05 F1 | 	add	fp, #12
35334     A7 26 C2 FA | 	rdbyte	local01, fp
35338     01 26 86 F1 | 	sub	local01, #1
3533c     A7 26 42 FC | 	wrbyte	local01, fp
35340     A7 26 CA FA | 	rdbyte	local01, fp wz
35344     0C 4E 85 F1 | 	sub	fp, #12
35348     BC FF 9F 5D |  if_ne	jmp	#LR__5252
3534c                 | LR__5253
3534c                 | ' 
3534c                 | ' 	return d;
3534c     10 4E 05 F1 | 	add	fp, #16
35350     A7 FA C1 FA | 	rdbyte	result1, fp
35354     10 4E 85 F1 | 	sub	fp, #16
35358                 | LR__5254
35358     A7 F0 03 F6 | 	mov	ptra, fp
3535c     B2 00 A0 FD | 	call	#popregs_
35360                 | _fatfs_cc_send_cmd_1212_ret
35360     2D 00 64 FD | 	ret
35364                 | 
35364                 | _fatfs_cc_disk_deinitialize
35364     03 4A 05 F6 | 	mov	COUNT_, #3
35368     A8 00 A0 FD | 	call	#pushregs_
3536c     00 12 4E F2 | 	cmps	arg01, #0 wz
35370     01 00 00 FF 
35374     14 E4 05 F1 | 	add	objptr, ##532
35378     F2 12 02 FB | 	rdlong	arg01, objptr
3537c     04 E4 85 F1 | 	sub	objptr, #4
35380     F2 26 02 FB | 	rdlong	local01, objptr
35384     08 E4 05 F1 | 	add	objptr, #8
35388     F2 28 02 FB | 	rdlong	local02, objptr
3538c     04 E4 05 F1 | 	add	objptr, #4
35390     F2 2A 02 FB | 	rdlong	local03, objptr
35394     01 00 00 FF 
35398     1C E4 85 F1 | 	sub	objptr, ##540
3539c                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
3539c                 | '         return RES_NOTRDY;
3539c     03 FA 05 56 |  if_ne	mov	result1, #3
353a0     2C 00 90 5D |  if_ne	jmp	#LR__5260
353a4     50 12 62 FD | 	fltl	arg01
353a8     09 01 08 FC | 	wrpin	#0, arg01
353ac     50 26 62 FD | 	fltl	local01
353b0     13 01 08 FC | 	wrpin	#0, local01
353b4     50 28 62 FD | 	fltl	local02
353b8     14 01 08 FC | 	wrpin	#0, local02
353bc     50 2A 62 FD | 	fltl	local03
353c0     15 01 08 FC | 	wrpin	#0, local03
353c4     0A 12 06 F6 | 	mov	arg01, #10
353c8     40 0E BF FD | 	call	#__system___waitms
353cc                 | '     }
353cc                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
353cc                 | '     _pinclear(PIN_SS);
353cc                 | '     _pinclear(PIN_CLK);
353cc                 | '     _pinclear(PIN_DI);
353cc                 | '     _pinclear(PIN_DO);
353cc                 | ' 
353cc                 | '     _waitms(10);
353cc                 | ' 
353cc                 | '     return 0;
353cc     00 FA 05 F6 | 	mov	result1, #0
353d0                 | LR__5260
353d0     A7 F0 03 F6 | 	mov	ptra, fp
353d4     B2 00 A0 FD | 	call	#popregs_
353d8                 | _fatfs_cc_disk_deinitialize_ret
353d8     2D 00 64 FD | 	ret
353dc                 | 
353dc                 | _fatfs_cc_gettimeofday
353dc     04 4A 05 F6 | 	mov	COUNT_, #4
353e0     A8 00 A0 FD | 	call	#pushregs_
353e4     09 27 02 F6 | 	mov	local01, arg01
353e8     FC 09 BF FD | 	call	#__system___getus
353ec     FD 12 02 F6 | 	mov	arg01, result1
353f0     02 00 00 FF 
353f4     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
353f8     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
353fc     09 FB 01 F6 | 	mov	result1, arg01
35400     14 FB 81 F1 | 	sub	result1, local02
35404     A1 07 00 FF 
35408     40 FA 15 FD | 	qdiv	result1, ##1000000
3540c     02 00 00 FF 
35410     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
35414     18 28 62 FD | 	getqx	local02
35418     A1 07 00 FF 
3541c     40 FA 15 FD | 	qdiv	result1, ##1000000
35420     00 28 0E F2 | 	cmp	local02, #0 wz
35424     19 2A 62 FD | 	getqy	local03
35428     28 00 90 AD |  if_e	jmp	#LR__5270
3542c     02 00 00 FF 
35430     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
35434     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
35438     14 2D 02 F1 | 	add	local04, local02
3543c     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
35440     15 13 82 F1 | 	sub	arg01, local03
35444     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
35448     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
3544c     02 00 00 FF 
35450     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
35454                 | LR__5270
35454     02 00 00 FF 
35458     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
3545c     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
35460     02 00 00 FF 
35464     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
35468     13 2D 62 FC | 	wrlong	local04, local01
3546c     04 26 06 F1 | 	add	local01, #4
35470     13 2B 62 FC | 	wrlong	local03, local01
35474                 | '         lastsec += secs;
35474                 | '         lastus = now - leftover;
35474                 | '     }
35474                 | '     tv->tv_sec = lastsec;
35474                 | '     tv->tv_usec = leftover;
35474                 | '     return 0;
35474     00 FA 05 F6 | 	mov	result1, #0
35478     A7 F0 03 F6 | 	mov	ptra, fp
3547c     B2 00 A0 FD | 	call	#popregs_
35480                 | _fatfs_cc_gettimeofday_ret
35480     2D 00 64 FD | 	ret
35484                 | 
35484                 | _fatfs_cc__is_leap_year
35484     09 FB 51 F6 | 	abs	result1, arg01 wc
35488     03 FA 05 F5 | 	and	result1, #3
3548c     FD FA 89 F6 | 	negc	result1, result1 wz
35490     38 00 90 5D |  if_ne	jmp	#LR__5281
35494     09 FB 51 F6 | 	abs	result1, arg01 wc
35498     64 FA 15 FD | 	qdiv	result1, #100
3549c     19 FA 61 FD | 	getqy	result1
354a0     FD FA 89 F6 | 	negc	result1, result1 wz
354a4     1C 00 90 5D |  if_ne	jmp	#LR__5280
354a8     09 FB 51 F6 | 	abs	result1, arg01 wc
354ac     90 FB 15 FD | 	qdiv	result1, #400
354b0                 | '       return (0 == y % 400);
354b0     00 FA 05 F6 | 	mov	result1, #0
354b4     19 00 62 FD | 	getqy	_var01
354b8     00 01 8A F6 | 	negc	_var01, _var01 wz
354bc     01 FA 05 A6 |  if_e	mov	result1, #1
354c0     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
354c4                 | LR__5280
354c4                 | '     return 1;
354c4     01 FA 05 F6 | 	mov	result1, #1
354c8     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
354cc                 | LR__5281
354cc                 | '   }
354cc                 | '   return 0;
354cc     00 FA 05 F6 | 	mov	result1, #0
354d0                 | _fatfs_cc__is_leap_year_ret
354d0     2D 00 64 FD | 	ret
354d4                 | 
354d4                 | _fatfs_cc___tzoffset
354d4     09 01 0A F6 | 	mov	_var01, arg01 wz
354d8     FF FF FF FF 
354dc     0A FF 6B FC | 	wrlong	##-1, arg02
354e0     01 02 06 F6 | 	mov	_var02, #1
354e4     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
354e8                 | '                 return 0;
354e8     00 FA 05 A6 |  if_e	mov	result1, #0
354ec     94 02 90 AD |  if_e	jmp	#LR__5307
354f0     0A 01 68 FC | 	wrlong	#0, arg02
354f4     02 00 00 FF 
354f8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
354fc     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
35500                 | ' 
35500                 | '        *hasdst = 0;
35500                 | ' 
35500                 | ' 	n = stdname;
35500                 | '         while (*s && isalpha(*s)) {
35500     02 00 00 FF 
35504     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
35508     97 28 48 FB | 	callpa	#(@LR__5291-@LR__5290)>>2,fcache_load_ptr_
3550c                 | LR__5290
3550c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
35510     48 00 90 AD |  if_e	jmp	#LR__5292
35514     00 13 C2 FA | 	rdbyte	arg01, _var01
35518                 | ' {
35518                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
35518     80 12 36 F3 | 	fle	arg01, #128 wc
3551c                 | '     return __ctype[c];
3551c     02 00 00 FF 
35520     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
35524     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35528     09 FB C1 FA | 	rdbyte	result1, arg01
3552c     02 00 00 FF 
35530     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
35534     0C FA CD F7 | 	test	result1, #12 wz
35538     20 00 90 AD |  if_e	jmp	#LR__5292
3553c     00 09 02 F6 | 	mov	_var05, _var01
35540     00 0B 02 F6 | 	mov	_var06, _var01
35544     01 0A 06 F1 | 	add	_var06, #1
35548     04 0D C2 FA | 	rdbyte	_var07, _var05
3554c     05 01 02 F6 | 	mov	_var01, _var06
35550     03 0D 42 FC | 	wrbyte	_var07, _var04
35554     01 06 06 F1 | 	add	_var04, #1
35558     B0 FF 9F FD | 	jmp	#LR__5290
3555c                 | LR__5291
3555c                 | LR__5292
3555c     03 01 48 FC | 	wrbyte	#0, _var04
35560     00 0E 06 F6 | 	mov	_var08, #0
35564     00 05 C2 FA | 	rdbyte	_var03, _var01
35568     2D 04 0E F2 | 	cmp	_var03, #45 wz
3556c     01 02 66 A6 |  if_e	neg	_var02, #1
35570     01 00 06 A1 |  if_e	add	_var01, #1
35574     97 28 48 FB | 	callpa	#(@LR__5294-@LR__5293)>>2,fcache_load_ptr_
35578                 | '                 sgn = -1;
35578                 | '                 s++;
35578                 | '         }
35578                 | '         while (isdigit(*s)) {
35578                 | LR__5293
35578     00 13 C2 FA | 	rdbyte	arg01, _var01
3557c                 | ' {
3557c                 | '   return  (__ctype_get(c) & 0x02 ) ;
3557c     80 12 36 F3 | 	fle	arg01, #128 wc
35580                 | '     return __ctype[c];
35580     02 00 00 FF 
35584     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
35588     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
3558c     09 FB C1 FA | 	rdbyte	result1, arg01
35590     02 00 00 FF 
35594     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
35598     02 FA CD F7 | 	test	result1, #2 wz
3559c     28 00 90 AD |  if_e	jmp	#LR__5295
355a0     07 05 02 F6 | 	mov	_var03, _var08
355a4     02 04 66 F0 | 	shl	_var03, #2
355a8     07 05 02 F1 | 	add	_var03, _var08
355ac     01 04 66 F0 | 	shl	_var03, #1
355b0     00 09 C2 FA | 	rdbyte	_var05, _var01
355b4     30 08 86 F1 | 	sub	_var05, #48
355b8     04 05 02 F1 | 	add	_var03, _var05
355bc     02 0F 02 F6 | 	mov	_var08, _var03
355c0     01 00 06 F1 | 	add	_var01, #1
355c4     B0 FF 9F FD | 	jmp	#LR__5293
355c8                 | LR__5294
355c8                 | LR__5295
355c8     07 00 00 FF 
355cc     10 0E 06 FD | 	qmul	_var08, ##3600
355d0     00 05 C2 FA | 	rdbyte	_var03, _var01
355d4     3A 04 0E F2 | 	cmp	_var03, #58 wz
355d8     18 10 62 FD | 	getqx	_var09
355dc     70 00 90 5D |  if_ne	jmp	#LR__5299
355e0     00 0E 06 F6 | 	mov	_var08, #0
355e4     01 00 06 F1 | 	add	_var01, #1
355e8     97 28 48 FB | 	callpa	#(@LR__5297-@LR__5296)>>2,fcache_load_ptr_
355ec                 | '                 x = 0;
355ec                 | '                 s++;
355ec                 | '                 while (isdigit(*s)) {
355ec                 | LR__5296
355ec     00 13 C2 FA | 	rdbyte	arg01, _var01
355f0                 | ' {
355f0                 | '   return  (__ctype_get(c) & 0x02 ) ;
355f0     80 12 36 F3 | 	fle	arg01, #128 wc
355f4                 | '     return __ctype[c];
355f4     02 00 00 FF 
355f8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
355fc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35600     09 FB C1 FA | 	rdbyte	result1, arg01
35604     02 00 00 FF 
35608     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
3560c     02 FA CD F7 | 	test	result1, #2 wz
35610     28 00 90 AD |  if_e	jmp	#LR__5298
35614     07 05 02 F6 | 	mov	_var03, _var08
35618     02 04 66 F0 | 	shl	_var03, #2
3561c     07 05 02 F1 | 	add	_var03, _var08
35620     01 04 66 F0 | 	shl	_var03, #1
35624     00 09 C2 FA | 	rdbyte	_var05, _var01
35628     30 08 86 F1 | 	sub	_var05, #48
3562c     04 05 02 F1 | 	add	_var03, _var05
35630     02 0F 02 F6 | 	mov	_var08, _var03
35634     01 00 06 F1 | 	add	_var01, #1
35638     B0 FF 9F FD | 	jmp	#LR__5296
3563c                 | LR__5297
3563c                 | LR__5298
3563c     07 0D 02 F6 | 	mov	_var07, _var08
35640     04 0C 66 F0 | 	shl	_var07, #4
35644     07 0D 82 F1 | 	sub	_var07, _var08
35648     02 0C 66 F0 | 	shl	_var07, #2
3564c     06 11 02 F1 | 	add	_var09, _var07
35650                 | LR__5299
35650     02 00 00 FF 
35654     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
35658     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
3565c     00 13 C2 FA | 	rdbyte	arg01, _var01
35660                 | ' {
35660                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
35660     80 12 36 F3 | 	fle	arg01, #128 wc
35664                 | '     return __ctype[c];
35664     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
35668     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
3566c     09 FB C1 FA | 	rdbyte	result1, arg01
35670     02 00 00 FF 
35674     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
35678     0C FA CD F7 | 	test	result1, #12 wz
3567c     50 00 90 AD |  if_e	jmp	#LR__5302
35680     0A 03 68 FC | 	wrlong	#1, arg02
35684                 | '                 *hasdst = 1;
35684                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
35684                 | LR__5300
35684     00 05 CA FA | 	rdbyte	_var03, _var01 wz
35688     44 00 90 AD |  if_e	jmp	#LR__5301
3568c     00 13 C2 FA | 	rdbyte	arg01, _var01
35690                 | ' {
35690                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
35690     80 12 36 F3 | 	fle	arg01, #128 wc
35694                 | '     return __ctype[c];
35694     02 00 00 FF 
35698     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
3569c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
356a0     09 FB C1 FA | 	rdbyte	result1, arg01
356a4     02 00 00 FF 
356a8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
356ac     0C FA CD F7 | 	test	result1, #12 wz
356b0     1C 00 90 AD |  if_e	jmp	#LR__5301
356b4     00 0B 02 F6 | 	mov	_var06, _var01
356b8     01 0A 06 F1 | 	add	_var06, #1
356bc     00 0D C2 FA | 	rdbyte	_var07, _var01
356c0     05 01 02 F6 | 	mov	_var01, _var06
356c4     03 0D 42 FC | 	wrbyte	_var07, _var04
356c8     01 06 06 F1 | 	add	_var04, #1
356cc     B4 FF 9F FD | 	jmp	#LR__5300
356d0                 | LR__5301
356d0                 | LR__5302
356d0     03 01 48 FC | 	wrbyte	#0, _var04
356d4     02 00 00 FF 
356d8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
356dc     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
356e0     02 00 00 FF 
356e4     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
356e8     20 00 90 AD |  if_e	jmp	#LR__5303
356ec     02 00 00 FF 
356f0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
356f4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
356f8     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
356fc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
35700     02 00 00 FF 
35704     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
35708     1C 00 90 FD | 	jmp	#LR__5304
3570c                 | LR__5303
3570c     02 00 00 FF 
35710     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
35714     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
35718     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
3571c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
35720     02 00 00 FF 
35724     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
35728                 | LR__5304
35728     02 00 00 FF 
3572c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
35730     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
35734     02 00 00 FF 
35738     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
3573c     20 00 90 AD |  if_e	jmp	#LR__5305
35740     02 00 00 FF 
35744     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
35748     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3574c     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
35750     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
35754     02 00 00 FF 
35758     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
3575c     1C 00 90 FD | 	jmp	#LR__5306
35760                 | LR__5305
35760     02 00 00 FF 
35764     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
35768     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3576c     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
35770     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
35774     02 00 00 FF 
35778     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
3577c                 | LR__5306
3577c     08 03 02 FD | 	qmul	_var02, _var09
35780                 | ' 		_tzname[1] = stdname;
35780                 | ' 
35780                 | '         return sgn * off;
35780     18 FA 61 FD | 	getqx	result1
35784                 | LR__5307
35784                 | _fatfs_cc___tzoffset_ret
35784     2D 00 64 FD | 	ret
35788                 | 
35788                 | _fatfs_cc___indst
35788     10 12 06 F1 | 	add	arg01, #16
3578c     09 01 02 FB | 	rdlong	_var01, arg01
35790     10 12 86 F1 | 	sub	arg01, #16
35794     02 00 0E F2 | 	cmp	_var01, #2 wz
35798     30 00 90 5D |  if_ne	jmp	#LR__5310
3579c     07 00 06 F6 | 	mov	_var01, #7
357a0     18 12 06 F1 | 	add	arg01, #24
357a4     09 03 02 FB | 	rdlong	_var02, arg01
357a8     01 01 02 F1 | 	add	_var01, _var02
357ac     0C 12 86 F1 | 	sub	arg01, #12
357b0     09 05 02 FB | 	rdlong	_var03, arg01
357b4     02 01 82 F1 | 	sub	_var01, _var03
357b8     00 00 56 F2 | 	cmps	_var01, #0 wc
357bc                 | '                         return 1;
357bc     01 FA 05 C6 |  if_b	mov	result1, #1
357c0     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
357c4                 | '                 return 0;
357c4     00 FA 05 F6 | 	mov	result1, #0
357c8     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
357cc                 | LR__5310
357cc     10 12 06 F1 | 	add	arg01, #16
357d0     09 01 02 FB | 	rdlong	_var01, arg01
357d4     10 12 86 F1 | 	sub	arg01, #16
357d8     0A 00 0E F2 | 	cmp	_var01, #10 wz
357dc     28 00 90 5D |  if_ne	jmp	#LR__5311
357e0     18 12 06 F1 | 	add	arg01, #24
357e4     09 01 02 FB | 	rdlong	_var01, arg01
357e8     0C 12 86 F1 | 	sub	arg01, #12
357ec     09 07 02 FB | 	rdlong	_var04, arg01
357f0     03 01 82 F1 | 	sub	_var01, _var04
357f4     00 00 56 F2 | 	cmps	_var01, #0 wc
357f8                 | '                         return 0;
357f8     00 FA 05 C6 |  if_b	mov	result1, #0
357fc     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
35800                 | '                 return 1;
35800     01 FA 05 F6 | 	mov	result1, #1
35804     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
35808                 | LR__5311
35808                 | '         }
35808                 | ' 
35808                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
35808     00 00 06 F6 | 	mov	_var01, #0
3580c     10 12 06 F1 | 	add	arg01, #16
35810     09 03 02 FB | 	rdlong	_var02, arg01
35814     10 12 86 F1 | 	sub	arg01, #16
35818     03 02 56 F2 | 	cmps	_var02, #3 wc
3581c     10 00 90 CD |  if_b	jmp	#LR__5312
35820     10 12 06 F1 | 	add	arg01, #16
35824     09 05 02 FB | 	rdlong	_var03, arg01
35828     0A 04 56 F2 | 	cmps	_var03, #10 wc
3582c     01 00 06 C6 |  if_b	mov	_var01, #1
35830                 | LR__5312
35830     00 FB 01 F6 | 	mov	result1, _var01
35834                 | _fatfs_cc___indst_ret
35834     2D 00 64 FD | 	ret
35838                 | 
35838                 | ' 	
35838                 | ' 	FUNCTION pfunc(c as integer) as integer
35838                 | ___strs_cl_pfunc
35838                 | ' 		if (i < 16) then
35838     04 E4 05 F1 | 	add	objptr, #4
3583c     F2 FA 01 FB | 	rdlong	result1, objptr
35840     04 E4 85 F1 | 	sub	objptr, #4
35844     10 FA 55 F2 | 	cmps	result1, #16 wc
35848     2C 00 90 3D |  if_ae	jmp	#LR__5320
3584c     F2 FA 01 FB | 	rdlong	result1, objptr
35850     04 E4 05 F1 | 	add	objptr, #4
35854     F2 00 02 FB | 	rdlong	_var01, objptr
35858     FD 00 02 F1 | 	add	_var01, result1
3585c     00 13 42 FC | 	wrbyte	arg01, _var01
35860     F2 FA 01 FB | 	rdlong	result1, objptr
35864     01 FA 05 F1 | 	add	result1, #1
35868     F2 FA 61 FC | 	wrlong	result1, objptr
3586c     04 E4 85 F1 | 	sub	objptr, #4
35870                 | ' 			p(i) = c
35870                 | ' 			i = i+1
35870                 | ' 			return 1
35870     01 FA 05 F6 | 	mov	result1, #1
35874     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
35878                 | LR__5320
35878                 | ' 			return -1
35878     01 FA 65 F6 | 	neg	result1, #1
3587c                 | ___strs_cl_pfunc_ret
3587c     2D 00 64 FD | 	ret
35880                 | 
35880                 | __struct__s_vfs_file_t_putchar
35880     04 4A 05 F6 | 	mov	COUNT_, #4
35884     A8 00 A0 FD | 	call	#pushregs_
35888     1C E4 05 F1 | 	add	objptr, #28
3588c     F2 26 0A FB | 	rdlong	local01, objptr wz
35890     1C E4 85 F1 | 	sub	objptr, #28
35894     00 FA 05 A6 |  if_e	mov	result1, #0
35898     48 00 90 AD |  if_e	jmp	#LR__5330
3589c     1C E4 05 F1 | 	add	objptr, #28
358a0     F2 28 02 FB | 	rdlong	local02, objptr
358a4     14 2B 02 F6 | 	mov	local03, local02
358a8     1C E4 85 F1 | 	sub	objptr, #28
358ac     13 2A 46 F7 | 	zerox	local03, #19
358b0     14 28 46 F0 | 	shr	local02, #20
358b4     02 28 66 F0 | 	shl	local02, #2
358b8     ED 28 02 F1 | 	add	local02, __methods__
358bc     14 29 02 FB | 	rdlong	local02, local02
358c0     F2 14 02 F6 | 	mov	arg02, objptr
358c4     F2 2C 02 F6 | 	mov	local04, objptr
358c8     15 E5 01 F6 | 	mov	objptr, local03
358cc     2D 28 62 FD | 	call	local02
358d0     16 E5 01 F6 | 	mov	objptr, local04
358d4                 | '     return (i < 0) ? 0 : 1;
358d4     00 FA 55 F2 | 	cmps	result1, #0 wc
358d8     00 26 06 C6 |  if_b	mov	local01, #0
358dc     01 26 06 36 |  if_ae	mov	local01, #1
358e0     13 FB 01 F6 | 	mov	result1, local01
358e4                 | LR__5330
358e4     A7 F0 03 F6 | 	mov	ptra, fp
358e8     B2 00 A0 FD | 	call	#popregs_
358ec                 | __struct__s_vfs_file_t_putchar_ret
358ec     2D 00 64 FD | 	ret
358f0                 | 
358f0                 | __struct__s_vfs_file_t_getchar
358f0     03 4A 05 F6 | 	mov	COUNT_, #3
358f4     A8 00 A0 FD | 	call	#pushregs_
358f8     20 E4 05 F1 | 	add	objptr, #32
358fc     F2 12 0A FB | 	rdlong	arg01, objptr wz
35900     20 E4 85 F1 | 	sub	objptr, #32
35904     01 FA 65 A6 |  if_e	neg	result1, #1
35908     38 00 90 AD |  if_e	jmp	#LR__5340
3590c                 | '     return getcf(__this);
3590c     20 E4 05 F1 | 	add	objptr, #32
35910     F2 26 02 FB | 	rdlong	local01, objptr
35914     13 29 02 F6 | 	mov	local02, local01
35918     20 E4 85 F1 | 	sub	objptr, #32
3591c     13 28 46 F7 | 	zerox	local02, #19
35920     14 26 46 F0 | 	shr	local01, #20
35924     02 26 66 F0 | 	shl	local01, #2
35928     ED 26 02 F1 | 	add	local01, __methods__
3592c     13 27 02 FB | 	rdlong	local01, local01
35930     F2 12 02 F6 | 	mov	arg01, objptr
35934     F2 2A 02 F6 | 	mov	local03, objptr
35938     14 E5 01 F6 | 	mov	objptr, local02
3593c     2D 26 62 FD | 	call	local01
35940     15 E5 01 F6 | 	mov	objptr, local03
35944                 | LR__5340
35944     A7 F0 03 F6 | 	mov	ptra, fp
35948     B2 00 A0 FD | 	call	#popregs_
3594c                 | __struct__s_vfs_file_t_getchar_ret
3594c     2D 00 64 FD | 	ret
35950                 | 
35950                 | __struct___bas_wrap_sender_tx
35950     03 4A 05 F6 | 	mov	COUNT_, #3
35954     A8 00 A0 FD | 	call	#pushregs_
35958     F2 26 02 FB | 	rdlong	local01, objptr
3595c     13 29 02 F6 | 	mov	local02, local01
35960     13 26 46 F7 | 	zerox	local01, #19
35964     14 28 46 F0 | 	shr	local02, #20
35968     02 28 66 F0 | 	shl	local02, #2
3596c     ED 28 02 F1 | 	add	local02, __methods__
35970     14 29 02 FB | 	rdlong	local02, local02
35974     F2 2A 02 F6 | 	mov	local03, objptr
35978     13 E5 01 F6 | 	mov	objptr, local01
3597c     2D 28 62 FD | 	call	local02
35980     15 E5 01 F6 | 	mov	objptr, local03
35984     01 FA 05 F6 | 	mov	result1, #1
35988     A7 F0 03 F6 | 	mov	ptra, fp
3598c     B2 00 A0 FD | 	call	#popregs_
35990                 | __struct___bas_wrap_sender_tx_ret
35990     2D 00 64 FD | 	ret
35994                 | 
35994                 | __struct___bas_wrap_sender_rx
35994     03 4A 05 F6 | 	mov	COUNT_, #3
35998     A8 00 A0 FD | 	call	#pushregs_
3599c     04 E4 05 F1 | 	add	objptr, #4
359a0     F2 26 02 FB | 	rdlong	local01, objptr
359a4     13 29 02 F6 | 	mov	local02, local01
359a8     04 E4 85 F1 | 	sub	objptr, #4
359ac     13 28 46 F7 | 	zerox	local02, #19
359b0     14 26 46 F0 | 	shr	local01, #20
359b4     02 26 66 F0 | 	shl	local01, #2
359b8     ED 26 02 F1 | 	add	local01, __methods__
359bc     13 27 02 FB | 	rdlong	local01, local01
359c0     F2 2A 02 F6 | 	mov	local03, objptr
359c4     14 E5 01 F6 | 	mov	objptr, local02
359c8     2D 26 62 FD | 	call	local01
359cc     15 E5 01 F6 | 	mov	objptr, local03
359d0     A7 F0 03 F6 | 	mov	ptra, fp
359d4     B2 00 A0 FD | 	call	#popregs_
359d8                 | __struct___bas_wrap_sender_rx_ret
359d8     2D 00 64 FD | 	ret
359dc                 | 
359dc                 | __struct___bas_wrap_sender_close
359dc     03 4A 05 F6 | 	mov	COUNT_, #3
359e0     A8 00 A0 FD | 	call	#pushregs_
359e4     08 E4 05 F1 | 	add	objptr, #8
359e8     F2 26 02 FB | 	rdlong	local01, objptr
359ec     13 29 02 F6 | 	mov	local02, local01
359f0     08 E4 85 F1 | 	sub	objptr, #8
359f4     13 28 46 F7 | 	zerox	local02, #19
359f8     14 26 46 F0 | 	shr	local01, #20
359fc     02 26 66 F0 | 	shl	local01, #2
35a00     ED 26 02 F1 | 	add	local01, __methods__
35a04     13 27 02 FB | 	rdlong	local01, local01
35a08     F2 2A 02 F6 | 	mov	local03, objptr
35a0c     14 E5 01 F6 | 	mov	objptr, local02
35a10     2D 26 62 FD | 	call	local01
35a14     15 E5 01 F6 | 	mov	objptr, local03
35a18     A7 F0 03 F6 | 	mov	ptra, fp
35a1c     B2 00 A0 FD | 	call	#popregs_
35a20                 | __struct___bas_wrap_sender_close_ret
35a20     2D 00 64 FD | 	ret
35a24                 | 
35a24                 | LR__5350
35a24     2F          | 	byte	"/"
35a25     00          | 	byte	0
35a26                 | LR__5351
35a26     69 6E 66    | 	byte	"inf"
35a29     00          | 	byte	0
35a2a                 | LR__5352
35a2a     6E 61 6E    | 	byte	"nan"
35a2d     00          | 	byte	0
35a2e                 | LR__5353
35a2e                 | 	byte	
35a2e     00          | 	byte	0
35a2f                 | LR__5354
35a2f                 | 	byte	
35a2f     00          | 	byte	0
35a30                 | LR__5355
35a30                 | 	byte	
35a30     00          | 	byte	0
35a31                 | LR__5356
35a31                 | 	byte	
35a31     00          | 	byte	0
35a32                 | LR__5357
35a32                 | 	byte	
35a32     00          | 	byte	0
35a33                 | LR__5358
35a33                 | 	byte	
35a33     00          | 	byte	0
35a34                 | LR__5359
35a34                 | 	byte	
35a34     00          | 	byte	0
35a35                 | LR__5360
35a35                 | 	byte	
35a35     00          | 	byte	0
35a36                 | LR__5361
35a36     00          | 	byte	0
35a37     00          | 	byte	0
35a38                 | LR__5362
35a38     00          | 	byte	0
35a39     00          | 	byte	0
35a3a                 | LR__5363
35a3a     00          | 	byte	0
35a3b     00          | 	byte	0
35a3c                 | LR__5364
35a3c     20 21 21 21 
35a40     20 63 6F 72 
35a44     72 75 70 74 
35a48     65 64 20 68 
35a4c     65 61 70 3F 
35a50     3F 3F 20 21 
35a54     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
35a57     00          | 	byte	0
35a58                 | LR__5365
35a58     20 21 21 21 
35a5c     20 6F 75 74 
35a60     20 6F 66 20 
35a64     68 65 61 70 
35a68     20 6D 65 6D 
35a6c     6F 72 79 20 
35a70     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
35a74     00          | 	byte	0
35a75                 | LR__5366
35a75     20 21 21 21 
35a79     20 63 6F 72 
35a7d     72 75 70 74 
35a81     65 64 20 68 
35a85     65 61 70 20 
35a89     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
35a8d     00          | 	byte	0
35a8e                 | LR__5367
35a8e     00          | 	byte	0
35a8f     00          | 	byte	0
35a90                 | LR__5368
35a90     2E          | 	byte	"."
35a91     00          | 	byte	0
35a92                 | LR__5369
35a92     00          | 	byte	0
35a93     00          | 	byte	0
35a94                 | LR__5370
35a94     00          | 	byte	0
35a95     00          | 	byte	0
35a96                 | LR__5371
35a96     00          | 	byte	0
35a97     00          | 	byte	0
35a98                 | LR__5372
35a98     2A 3A 3C 3E 
35a9c     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
35aa0     00          | 	byte	0
35aa1                 | LR__5373
35aa1     2B 2C 3B 3D 
35aa5     5B 5D       | 	byte	"+,;=[]"
35aa7     00          | 	byte	0
35aa8                 | LR__5374
35aa8     46 41 54 33 
35aac     32 20 20 20 | 	byte	"FAT32   "
35ab0     00          | 	byte	0
35ab1                 | LR__5375
35ab1     54 5A       | 	byte	"TZ"
35ab3     00          | 	byte	0
35ab4                 | LR__5376
35ab4     00          | 	byte	0
35ab5     00          | 	byte	0
35ab6                 | LR__5377
35ab6                 | 	byte	
35ab6     00          | 	byte	0
35ab7                 | LR__5378
35ab7                 | 	byte	
35ab7     00          | 	byte	0
35ab8                 | LR__5379
35ab8                 | 	byte	
35ab8     00          | 	byte	0
35ab9                 | LR__5380
35ab9                 | 	byte	
35ab9     00          | 	byte	0
35aba                 | LR__5381
35aba     22          | 	byte	34
35abb     00          | 	byte	0
35abc                 | LR__5382
35abc     22          | 	byte	34
35abd     00          | 	byte	0
35abe                 | LR__5383
35abe     3A          | 	byte	":"
35abf     00          | 	byte	0
35ac0                 | LR__5384
35ac0                 | 	byte	
35ac0     00          | 	byte	0
35ac1                 | LR__5385
35ac1                 | 	byte	
35ac1     00          | 	byte	0
35ac2                 | LR__5386
35ac2                 | 	byte	
35ac2     00          | 	byte	0
35ac3                 | LR__5387
35ac3                 | 	byte	
35ac3     00          | 	byte	0
35ac4                 | LR__5388
35ac4                 | 	byte	
35ac4     00          | 	byte	0
35ac5                 | LR__5389
35ac5                 | 	byte	
35ac5     00          | 	byte	0
35ac6                 | LR__5390
35ac6                 | 	byte	
35ac6     00          | 	byte	0
35ac7                 | LR__5391
35ac7     30          | 	byte	"0"
35ac8     00          | 	byte	0
35ac9                 | LR__5392
35ac9     22          | 	byte	34
35aca     00          | 	byte	0
35acb                 | LR__5393
35acb     22          | 	byte	34
35acc     00          | 	byte	0
35acd                 | LR__5394
35acd     22          | 	byte	34
35ace     00          | 	byte	0
35acf                 | LR__5395
35acf     22          | 	byte	34
35ad0     00          | 	byte	0
35ad1                 | LR__5396
35ad1     22          | 	byte	34
35ad2     00          | 	byte	0
35ad3                 | LR__5397
35ad3     3E          | 	byte	">"
35ad4     00          | 	byte	0
35ad5                 | LR__5398
35ad5     3C          | 	byte	"<"
35ad6     00          | 	byte	0
35ad7                 | LR__5399
35ad7     2B          | 	byte	"+"
35ad8     00          | 	byte	0
35ad9                 | LR__5400
35ad9     2D          | 	byte	"-"
35ada     00          | 	byte	0
35adb                 | LR__5401
35adb     2A          | 	byte	"*"
35adc     00          | 	byte	0
35add                 | LR__5402
35add     2F          | 	byte	"/"
35ade     00          | 	byte	0
35adf                 | LR__5403
35adf     5E          | 	byte	"^"
35ae0     00          | 	byte	0
35ae1                 | LR__5404
35ae1     3D          | 	byte	"="
35ae2     00          | 	byte	0
35ae3                 | LR__5405
35ae3     2B          | 	byte	"+"
35ae4     00          | 	byte	0
35ae5                 | LR__5406
35ae5     2B          | 	byte	"+"
35ae6     00          | 	byte	0
35ae7                 | LR__5407
35ae7     2D          | 	byte	"-"
35ae8     00          | 	byte	0
35ae9                 | LR__5408
35ae9     2D          | 	byte	"-"
35aea     00          | 	byte	0
35aeb                 | LR__5409
35aeb     3C          | 	byte	"<"
35aec     00          | 	byte	0
35aed                 | LR__5410
35aed     3E          | 	byte	">"
35aee     00          | 	byte	0
35aef                 | LR__5411
35aef     22          | 	byte	34
35af0     00          | 	byte	0
35af1                 | LR__5412
35af1     22          | 	byte	34
35af2     00          | 	byte	0
35af3                 | LR__5413
35af3     65 6C 73 65 | 	byte	"else"
35af7     00          | 	byte	0
35af8                 | LR__5414
35af8     74 68 65 6E | 	byte	"then"
35afc     00          | 	byte	0
35afd                 | LR__5415
35afd     3F          | 	byte	"?"
35afe     00          | 	byte	0
35aff                 | LR__5416
35aff     3F          | 	byte	"?"
35b00     00          | 	byte	0
35b01                 | LR__5417
35b01     2E          | 	byte	"."
35b02     00          | 	byte	0
35b03                 | LR__5418
35b03     6D 6F 75 73 
35b07     65          | 	byte	"mouse"
35b08     00          | 	byte	0
35b09                 | LR__5419
35b09     63 75 72 73 
35b0d     6F 72       | 	byte	"cursor"
35b0f     00          | 	byte	0
35b10                 | LR__5420
35b10     63 6C 69 63 
35b14     6B          | 	byte	"click"
35b15     00          | 	byte	0
35b16                 | LR__5421
35b16     6F 6E       | 	byte	"on"
35b18     00          | 	byte	0
35b19                 | LR__5422
35b19     31          | 	byte	"1"
35b1a     00          | 	byte	0
35b1b                 | LR__5423
35b1b     6F 66 66    | 	byte	"off"
35b1e     00          | 	byte	0
35b1f                 | LR__5424
35b1f     30          | 	byte	"0"
35b20     00          | 	byte	0
35b21                 | LR__5425
35b21     6D 6F 64 65 | 	byte	"mode"
35b25     00          | 	byte	0
35b26                 | LR__5426
35b26     6D 2E       | 	byte	"m."
35b28     00          | 	byte	0
35b29                 | LR__5427
35b29     61 74 61 72 
35b2d     69          | 	byte	"atari"
35b2e     00          | 	byte	0
35b2f                 | LR__5428
35b2f     30          | 	byte	"0"
35b30     00          | 	byte	0
35b31                 | LR__5429
35b31     70 63 5F 61 
35b35     6D 62 65 72 | 	byte	"pc_amber"
35b39     00          | 	byte	0
35b3a                 | LR__5430
35b3a     31          | 	byte	"1"
35b3b     00          | 	byte	0
35b3c                 | LR__5431
35b3c     70 63 5F 67 
35b40     72 65 65 6E | 	byte	"pc_green"
35b44     00          | 	byte	0
35b45                 | LR__5432
35b45     32          | 	byte	"2"
35b46     00          | 	byte	0
35b47                 | LR__5433
35b47     70 63 5F 77 
35b4b     68 69 74 65 | 	byte	"pc_white"
35b4f     00          | 	byte	0
35b50                 | LR__5434
35b50     33          | 	byte	"3"
35b51     00          | 	byte	0
35b52                 | LR__5435
35b52     73 74       | 	byte	"st"
35b54     00          | 	byte	0
35b55                 | LR__5436
35b55     34          | 	byte	"4"
35b56     00          | 	byte	0
35b57                 | LR__5437
35b57                 | 	byte	
35b57     00          | 	byte	0
35b58                 | LR__5438
35b58     6C 6F 61 64 | 	byte	"load"
35b5c     00          | 	byte	0
35b5d                 | LR__5439
35b5d     73 61 76 65 | 	byte	"save"
35b61     00          | 	byte	0
35b62                 | LR__5440
35b62     62 72 75 6E | 	byte	"brun"
35b66     00          | 	byte	0
35b67                 | LR__5441
35b67     72 75 6E    | 	byte	"run"
35b6a     00          | 	byte	0
35b6b                 | LR__5442
35b6b     6C 6F 2E    | 	byte	"lo."
35b6e     00          | 	byte	0
35b6f                 | LR__5443
35b6f     73 2E       | 	byte	"s."
35b71     00          | 	byte	0
35b72                 | LR__5444
35b72     62 72 2E    | 	byte	"br."
35b75     00          | 	byte	0
35b76                 | LR__5445
35b76     65 6E 74 65 
35b7a     72          | 	byte	"enter"
35b7b     00          | 	byte	0
35b7c                 | LR__5446
35b7c     65 2E       | 	byte	"e."
35b7e     00          | 	byte	0
35b7f                 | LR__5447
35b7f     64 65 6C 65 
35b83     74 65       | 	byte	"delete"
35b85     00          | 	byte	0
35b86                 | LR__5448
35b86     6D 6B 64 69 
35b8a     72          | 	byte	"mkdir"
35b8b     00          | 	byte	0
35b8c                 | LR__5449
35b8c     63 64       | 	byte	"cd"
35b8e     00          | 	byte	0
35b8f                 | LR__5450
35b8f     63 64 2E    | 	byte	"cd."
35b92     00          | 	byte	0
35b93                 | LR__5451
35b93     2E          | 	byte	"."
35b94     00          | 	byte	0
35b95                 | LR__5452
35b95     2E 2E       | 	byte	".."
35b97     00          | 	byte	0
35b98                 | LR__5453
35b98     63 64       | 	byte	"cd"
35b9a     00          | 	byte	0
35b9b                 | LR__5454
35b9b     2F          | 	byte	"/"
35b9c     00          | 	byte	0
35b9d                 | LR__5455
35b9d                 | 	byte	
35b9d     00          | 	byte	0
35b9e                 | LR__5456
35b9e                 | 	byte	
35b9e     00          | 	byte	0
35b9f                 | LR__5457
35b9f                 | 	byte	
35b9f     00          | 	byte	0
35ba0                 | LR__5458
35ba0                 | 	byte	
35ba0     00          | 	byte	0
35ba1                 | LR__5459
35ba1                 | 	byte	
35ba1     00          | 	byte	0
35ba2                 | LR__5460
35ba2     52 65 61 64 
35ba6     79          | 	byte	"Ready"
35ba7     00          | 	byte	0
35ba8                 | LR__5461
35ba8     2B          | 	byte	"+"
35ba9     00          | 	byte	0
35baa                 | LR__5462
35baa     2D          | 	byte	"-"
35bab     00          | 	byte	0
35bac                 | LR__5463
35bac     6F 72       | 	byte	"or"
35bae     00          | 	byte	0
35baf                 | LR__5464
35baf     78 6F 72    | 	byte	"xor"
35bb2     00          | 	byte	0
35bb3                 | LR__5465
35bb3     2A          | 	byte	"*"
35bb4     00          | 	byte	0
35bb5                 | LR__5466
35bb5     2F          | 	byte	"/"
35bb6     00          | 	byte	0
35bb7                 | LR__5467
35bb7     61 6E 64    | 	byte	"and"
35bba     00          | 	byte	0
35bbb                 | LR__5468
35bbb     64 69 76    | 	byte	"div"
35bbe     00          | 	byte	0
35bbf                 | LR__5469
35bbf     6D 6F 64    | 	byte	"mod"
35bc2     00          | 	byte	0
35bc3                 | LR__5470
35bc3     73 68 6C    | 	byte	"shl"
35bc6     00          | 	byte	0
35bc7                 | LR__5471
35bc7     73 68 72    | 	byte	"shr"
35bca     00          | 	byte	0
35bcb                 | LR__5472
35bcb     5E          | 	byte	"^"
35bcc     00          | 	byte	0
35bcd                 | LR__5473
35bcd     6E 6F 74    | 	byte	"not"
35bd0     00          | 	byte	0
35bd1                 | LR__5474
35bd1     40          | 	byte	"@"
35bd2     00          | 	byte	0
35bd3                 | LR__5475
35bd3     3D          | 	byte	"="
35bd4     00          | 	byte	0
35bd5                 | LR__5476
35bd5     3E 3D       | 	byte	">="
35bd7     00          | 	byte	0
35bd8                 | LR__5477
35bd8     3C 3D       | 	byte	"<="
35bda     00          | 	byte	0
35bdb                 | LR__5478
35bdb     3C          | 	byte	"<"
35bdc     00          | 	byte	0
35bdd                 | LR__5479
35bdd     3E          | 	byte	">"
35bde     00          | 	byte	0
35bdf                 | LR__5480
35bdf     3C 3E       | 	byte	"<>"
35be1     00          | 	byte	0
35be2                 | LR__5481
35be2     2B 2B       | 	byte	"++"
35be4     00          | 	byte	0
35be5                 | LR__5482
35be5     2D 2D       | 	byte	"--"
35be7     00          | 	byte	0
35be8                 | LR__5483
35be8     23          | 	byte	"#"
35be9     00          | 	byte	0
35bea                 | LR__5484
35bea     30          | 	byte	"0"
35beb     00          | 	byte	0
35bec                 | LR__5485
35bec     39          | 	byte	"9"
35bed     00          | 	byte	0
35bee                 | LR__5486
35bee     23 72 65 61 
35bf2     64          | 	byte	"#read"
35bf3     00          | 	byte	0
35bf4                 | LR__5487
35bf4     23 77 72 69 
35bf8     74 65       | 	byte	"#write"
35bfa     00          | 	byte	0
35bfb                 | LR__5488
35bfb     23 61 70 70 
35bff     65 6E 64    | 	byte	"#append"
35c02     00          | 	byte	0
35c03                 | LR__5489
35c03     23          | 	byte	"#"
35c04     00          | 	byte	0
35c05                 | LR__5490
35c05     23          | 	byte	"#"
35c06     00          | 	byte	0
35c07                 | LR__5491
35c07     2D          | 	byte	"-"
35c08     00          | 	byte	0
35c09                 | LR__5492
35c09     30          | 	byte	"0"
35c0a     00          | 	byte	0
35c0b                 | LR__5493
35c0b     63          | 	byte	"c"
35c0c     00          | 	byte	0
35c0d                 | LR__5494
35c0d     63 23       | 	byte	"c#"
35c0f     00          | 	byte	0
35c10                 | LR__5495
35c10     64          | 	byte	"d"
35c11     00          | 	byte	0
35c12                 | LR__5496
35c12     64 23       | 	byte	"d#"
35c14     00          | 	byte	0
35c15                 | LR__5497
35c15     65          | 	byte	"e"
35c16     00          | 	byte	0
35c17                 | LR__5498
35c17     66          | 	byte	"f"
35c18     00          | 	byte	0
35c19                 | LR__5499
35c19     66 23       | 	byte	"f#"
35c1b     00          | 	byte	0
35c1c                 | LR__5500
35c1c     67          | 	byte	"g"
35c1d     00          | 	byte	0
35c1e                 | LR__5501
35c1e     67 23       | 	byte	"g#"
35c20     00          | 	byte	0
35c21                 | LR__5502
35c21     61          | 	byte	"a"
35c22     00          | 	byte	0
35c23                 | LR__5503
35c23     61 23       | 	byte	"a#"
35c25     00          | 	byte	0
35c26                 | LR__5504
35c26     68          | 	byte	"h"
35c27     00          | 	byte	0
35c28                 | LR__5505
35c28     62          | 	byte	"b"
35c29     00          | 	byte	0
35c2a                 | LR__5506
35c2a     2B          | 	byte	"+"
35c2b     00          | 	byte	0
35c2c                 | LR__5507
35c2c     2D          | 	byte	"-"
35c2d     00          | 	byte	0
35c2e                 | LR__5508
35c2e     3D          | 	byte	"="
35c2f     00          | 	byte	0
35c30                 | LR__5509
35c30     2C          | 	byte	","
35c31     00          | 	byte	0
35c32                 | LR__5510
35c32     2A          | 	byte	"*"
35c33     00          | 	byte	0
35c34                 | LR__5511
35c34     2F          | 	byte	"/"
35c35     00          | 	byte	0
35c36                 | LR__5512
35c36     3B          | 	byte	";"
35c37     00          | 	byte	0
35c38                 | LR__5513
35c38     22          | 	byte	34
35c39     00          | 	byte	0
35c3a                 | LR__5514
35c3a     5E          | 	byte	"^"
35c3b     00          | 	byte	0
35c3c                 | LR__5515
35c3c     29          | 	byte	")"
35c3d     00          | 	byte	0
35c3e                 | LR__5516
35c3e     28          | 	byte	"("
35c3f     00          | 	byte	0
35c40                 | LR__5517
35c40     3A          | 	byte	":"
35c41     00          | 	byte	0
35c42                 | LR__5518
35c42     20          | 	byte	" "
35c43     00          | 	byte	0
35c44                 | LR__5519
35c44     3E          | 	byte	">"
35c45     00          | 	byte	0
35c46                 | LR__5520
35c46     3C          | 	byte	"<"
35c47     00          | 	byte	0
35c48                 | LR__5521
35c48     3D          | 	byte	"="
35c49     00          | 	byte	0
35c4a                 | LR__5522
35c4a     62 65 65 70 | 	byte	"beep"
35c4e     00          | 	byte	0
35c4f                 | LR__5523
35c4f     62 2E       | 	byte	"b."
35c51     00          | 	byte	0
35c52                 | LR__5524
35c52     62 6C 69 74 | 	byte	"blit"
35c56     00          | 	byte	0
35c57                 | LR__5525
35c57     62 6F 78    | 	byte	"box"
35c5a     00          | 	byte	0
35c5b                 | LR__5526
35c5b     62 72 75 6E | 	byte	"brun"
35c5f     00          | 	byte	0
35c60                 | LR__5527
35c60     62 72 2E    | 	byte	"br."
35c63     00          | 	byte	0
35c64                 | LR__5528
35c64     63 64       | 	byte	"cd"
35c66     00          | 	byte	0
35c67                 | LR__5529
35c67     63 68 61 6E 
35c6b     67 65 66 72 
35c6f     65 71       | 	byte	"changefreq"
35c71     00          | 	byte	0
35c72                 | LR__5530
35c72     63 66 2E    | 	byte	"cf."
35c75     00          | 	byte	0
35c76                 | LR__5531
35c76     63 68 61 6E 
35c7a     67 65 70 61 
35c7e     6E          | 	byte	"changepan"
35c7f     00          | 	byte	0
35c80                 | LR__5532
35c80     63 70 2E    | 	byte	"cp."
35c83     00          | 	byte	0
35c84                 | LR__5533
35c84     63 68 61 6E 
35c88     67 65 76 6F 
35c8c     6C          | 	byte	"changevol"
35c8d     00          | 	byte	0
35c8e                 | LR__5534
35c8e     63 76 2E    | 	byte	"cv."
35c91     00          | 	byte	0
35c92                 | LR__5535
35c92     63 68 61 6E 
35c96     67 65 77 61 
35c9a     76 65       | 	byte	"changewave"
35c9c     00          | 	byte	0
35c9d                 | LR__5536
35c9d     63 77 2E    | 	byte	"cw."
35ca0     00          | 	byte	0
35ca1                 | LR__5537
35ca1     63 69 72 63 
35ca5     6C 65       | 	byte	"circle"
35ca7     00          | 	byte	0
35ca8                 | LR__5538
35ca8     63 69 2E    | 	byte	"ci."
35cab     00          | 	byte	0
35cac                 | LR__5539
35cac     63 6C 69 63 
35cb0     6B          | 	byte	"click"
35cb1     00          | 	byte	0
35cb2                 | LR__5540
35cb2     63 6C 6F 73 
35cb6     65          | 	byte	"close"
35cb7     00          | 	byte	0
35cb8                 | LR__5541
35cb8     63 6C 73    | 	byte	"cls"
35cbb     00          | 	byte	0
35cbc                 | LR__5542
35cbc     63 6F 67 69 
35cc0     6E 69 74    | 	byte	"coginit"
35cc3     00          | 	byte	0
35cc4                 | LR__5543
35cc4     63 6F 6C 6F 
35cc8     72          | 	byte	"color"
35cc9     00          | 	byte	0
35cca                 | LR__5544
35cca     63 2E       | 	byte	"c."
35ccc     00          | 	byte	0
35ccd                 | LR__5545
35ccd     63 6F 70 79 | 	byte	"copy"
35cd1     00          | 	byte	0
35cd2                 | LR__5546
35cd2     63 75 72 73 
35cd6     6F 72       | 	byte	"cursor"
35cd8     00          | 	byte	0
35cd9                 | LR__5547
35cd9     64 61 74 61 | 	byte	"data"
35cdd     00          | 	byte	0
35cde                 | LR__5548
35cde     64 65 66 73 
35ce2     6E 64       | 	byte	"defsnd"
35ce4     00          | 	byte	0
35ce5                 | LR__5549
35ce5     64 65 66 65 
35ce9     6E 76       | 	byte	"defenv"
35ceb     00          | 	byte	0
35cec                 | LR__5550
35cec     64 65 66 73 
35cf0     70 72 69 74 
35cf4     65          | 	byte	"defsprite"
35cf5     00          | 	byte	0
35cf6                 | LR__5551
35cf6     64 73 2E    | 	byte	"ds."
35cf9     00          | 	byte	0
35cfa                 | LR__5552
35cfa     64 65 67    | 	byte	"deg"
35cfd     00          | 	byte	0
35cfe                 | LR__5553
35cfe     64 65 6C 65 
35d02     74 65       | 	byte	"delete"
35d04     00          | 	byte	0
35d05                 | LR__5554
35d05     64 69 6D    | 	byte	"dim"
35d08     00          | 	byte	0
35d09                 | LR__5555
35d09     64 69 72    | 	byte	"dir"
35d0c     00          | 	byte	0
35d0d                 | LR__5556
35d0d     64 70 6F 6B 
35d11     65          | 	byte	"dpoke"
35d12     00          | 	byte	0
35d13                 | LR__5557
35d13     64 72 61 77 | 	byte	"draw"
35d17     00          | 	byte	0
35d18                 | LR__5558
35d18     64 72 61 77 
35d1c     74 6F       | 	byte	"drawto"
35d1e     00          | 	byte	0
35d1f                 | LR__5559
35d1f     64 72 2E    | 	byte	"dr."
35d22     00          | 	byte	0
35d23                 | LR__5560
35d23     65 6C 73 65 | 	byte	"else"
35d27     00          | 	byte	0
35d28                 | LR__5561
35d28     65 6E 64    | 	byte	"end"
35d2b     00          | 	byte	0
35d2c                 | LR__5562
35d2c     65 6E 74 65 
35d30     72          | 	byte	"enter"
35d31     00          | 	byte	0
35d32                 | LR__5563
35d32     65 2E       | 	byte	"e."
35d34     00          | 	byte	0
35d35                 | LR__5564
35d35     66 63 69 72 
35d39     63 6C 65    | 	byte	"fcircle"
35d3c     00          | 	byte	0
35d3d                 | LR__5565
35d3d     66 63 2E    | 	byte	"fc."
35d40     00          | 	byte	0
35d41                 | LR__5566
35d41     66 69 6C 6C | 	byte	"fill"
35d45     00          | 	byte	0
35d46                 | LR__5567
35d46     66 69 2E    | 	byte	"fi."
35d49     00          | 	byte	0
35d4a                 | LR__5568
35d4a     66 6F 6E 74 | 	byte	"font"
35d4e     00          | 	byte	0
35d4f                 | LR__5569
35d4f     66 6F 72    | 	byte	"for"
35d52     00          | 	byte	0
35d53                 | LR__5570
35d53     66 2E       | 	byte	"f."
35d55     00          | 	byte	0
35d56                 | LR__5571
35d56     66 72 61 6D 
35d5a     65          | 	byte	"frame"
35d5b     00          | 	byte	0
35d5c                 | LR__5572
35d5c     66 72 2E    | 	byte	"fr."
35d5f     00          | 	byte	0
35d60                 | LR__5573
35d60     67 65 74    | 	byte	"get"
35d63     00          | 	byte	0
35d64                 | LR__5574
35d64     67 6F 73 75 
35d68     62          | 	byte	"gosub"
35d69     00          | 	byte	0
35d6a                 | LR__5575
35d6a     67 6F 74 6F | 	byte	"goto"
35d6e     00          | 	byte	0
35d6f                 | LR__5576
35d6f     67 2E       | 	byte	"g."
35d71     00          | 	byte	0
35d72                 | LR__5577
35d72     69 66       | 	byte	"if"
35d74     00          | 	byte	0
35d75                 | LR__5578
35d75     69 6E 6B    | 	byte	"ink"
35d78     00          | 	byte	0
35d79                 | LR__5579
35d79     69 2E       | 	byte	"i."
35d7b     00          | 	byte	0
35d7c                 | LR__5580
35d7c     69 6E 70 75 
35d80     74          | 	byte	"input"
35d81     00          | 	byte	0
35d82                 | LR__5581
35d82     6C 69 73 74 | 	byte	"list"
35d86     00          | 	byte	0
35d87                 | LR__5582
35d87     6C 2E       | 	byte	"l."
35d89     00          | 	byte	0
35d8a                 | LR__5583
35d8a     6C 6F 61 64 | 	byte	"load"
35d8e     00          | 	byte	0
35d8f                 | LR__5584
35d8f     6C 6F 2E    | 	byte	"lo."
35d92     00          | 	byte	0
35d93                 | LR__5585
35d93     6C 70 6F 6B 
35d97     65          | 	byte	"lpoke"
35d98     00          | 	byte	0
35d99                 | LR__5586
35d99     6D 6B 64 69 
35d9d     72          | 	byte	"mkdir"
35d9e     00          | 	byte	0
35d9f                 | LR__5587
35d9f     6D 6F 64 65 | 	byte	"mode"
35da3     00          | 	byte	0
35da4                 | LR__5588
35da4     6D 2E       | 	byte	"m."
35da6     00          | 	byte	0
35da7                 | LR__5589
35da7     6D 6F 75 73 
35dab     65          | 	byte	"mouse"
35dac     00          | 	byte	0
35dad                 | LR__5590
35dad     6E 65 77    | 	byte	"new"
35db0     00          | 	byte	0
35db1                 | LR__5591
35db1     6E 65 78 74 | 	byte	"next"
35db5     00          | 	byte	0
35db6                 | LR__5592
35db6     6E 2E       | 	byte	"n."
35db8     00          | 	byte	0
35db9                 | LR__5593
35db9     6F 6E       | 	byte	"on"
35dbb     00          | 	byte	0
35dbc                 | LR__5594
35dbc     6F 70 65 6E | 	byte	"open"
35dc0     00          | 	byte	0
35dc1                 | LR__5595
35dc1     70 61 70 65 
35dc5     72          | 	byte	"paper"
35dc6     00          | 	byte	0
35dc7                 | LR__5596
35dc7     70 61 2E    | 	byte	"pa."
35dca     00          | 	byte	0
35dcb                 | LR__5597
35dcb     70 69 6E 66 
35dcf     6C 6F 61 74 | 	byte	"pinfloat"
35dd3     00          | 	byte	0
35dd4                 | LR__5598
35dd4     70 69 6E 68 
35dd8     69          | 	byte	"pinhi"
35dd9     00          | 	byte	0
35dda                 | LR__5599
35dda     70 69 6E 6C 
35dde     6F          | 	byte	"pinlo"
35ddf     00          | 	byte	0
35de0                 | LR__5600
35de0     70 69 6E 73 
35de4     74 61 72 74 | 	byte	"pinstart"
35de8     00          | 	byte	0
35de9                 | LR__5601
35de9     70 69 6E 74 
35ded     6F 67 67 6C 
35df1     65          | 	byte	"pintoggle"
35df2     00          | 	byte	0
35df3                 | LR__5602
35df3     70 69 6E 77 
35df7     72 69 74 65 | 	byte	"pinwrite"
35dfb     00          | 	byte	0
35dfc                 | LR__5603
35dfc     70 6C 61 79 | 	byte	"play"
35e00     00          | 	byte	0
35e01                 | LR__5604
35e01     70 2E       | 	byte	"p."
35e03     00          | 	byte	0
35e04                 | LR__5605
35e04     70 6C 61 79 
35e08     73 61 6D 70 
35e0c     6C 65       | 	byte	"playsample"
35e0e     00          | 	byte	0
35e0f                 | LR__5606
35e0f     70 6C 6F 74 | 	byte	"plot"
35e13     00          | 	byte	0
35e14                 | LR__5607
35e14     70 6C 2E    | 	byte	"pl."
35e17     00          | 	byte	0
35e18                 | LR__5608
35e18     70 6F 6B 65 | 	byte	"poke"
35e1c     00          | 	byte	0
35e1d                 | LR__5609
35e1d     70 6F 70    | 	byte	"pop"
35e20     00          | 	byte	0
35e21                 | LR__5610
35e21     70 6F 73 69 
35e25     74 69 6F 6E | 	byte	"position"
35e29     00          | 	byte	0
35e2a                 | LR__5611
35e2a     70 6F 73 2E | 	byte	"pos."
35e2e     00          | 	byte	0
35e2f                 | LR__5612
35e2f     70 72 69 6E 
35e33     74          | 	byte	"print"
35e34     00          | 	byte	0
35e35                 | LR__5613
35e35     3F          | 	byte	"?"
35e36     00          | 	byte	0
35e37                 | LR__5614
35e37     70 75 74    | 	byte	"put"
35e3a     00          | 	byte	0
35e3b                 | LR__5615
35e3b     72 61 64    | 	byte	"rad"
35e3e     00          | 	byte	0
35e3f                 | LR__5616
35e3f     72 65 61 64 | 	byte	"read"
35e43     00          | 	byte	0
35e44                 | LR__5617
35e44     72 65 6C 65 
35e48     61 73 65    | 	byte	"release"
35e4b     00          | 	byte	0
35e4c                 | LR__5618
35e4c     72 65 6D    | 	byte	"rem"
35e4f     00          | 	byte	0
35e50                 | LR__5619
35e50     27          | 	byte	"'"
35e51     00          | 	byte	0
35e52                 | LR__5620
35e52     72 65 73 74 
35e56     6F 72 65    | 	byte	"restore"
35e59     00          | 	byte	0
35e5a                 | LR__5621
35e5a     72 65 74 75 
35e5e     72 6E       | 	byte	"return"
35e60     00          | 	byte	0
35e61                 | LR__5622
35e61     72 75 6E    | 	byte	"run"
35e64     00          | 	byte	0
35e65                 | LR__5623
35e65     73 61 76 65 | 	byte	"save"
35e69     00          | 	byte	0
35e6a                 | LR__5624
35e6a     73 2E       | 	byte	"s."
35e6c     00          | 	byte	0
35e6d                 | LR__5625
35e6d     73 65 74 64 
35e71     65 6C 61 79 | 	byte	"setdelay"
35e75     00          | 	byte	0
35e76                 | LR__5626
35e76     73 64 2E    | 	byte	"sd."
35e79     00          | 	byte	0
35e7a                 | LR__5627
35e7a     73 65 74 65 
35e7e     6E 76       | 	byte	"setenv"
35e80     00          | 	byte	0
35e81                 | LR__5628
35e81     73 65 2E    | 	byte	"se."
35e84     00          | 	byte	0
35e85                 | LR__5629
35e85     73 65 74 6C 
35e89     65 6E       | 	byte	"setlen"
35e8b     00          | 	byte	0
35e8c                 | LR__5630
35e8c     73 6C 2E    | 	byte	"sl."
35e8f     00          | 	byte	0
35e90                 | LR__5631
35e90     73 65 74 70 
35e94     61 6E       | 	byte	"setpan"
35e96     00          | 	byte	0
35e97                 | LR__5632
35e97     73 70 2E    | 	byte	"sp."
35e9a     00          | 	byte	0
35e9b                 | LR__5633
35e9b     73 65 74 73 
35e9f     75 73 74 61 
35ea3     69 6E       | 	byte	"setsustain"
35ea5     00          | 	byte	0
35ea6                 | LR__5634
35ea6     73 73 2E    | 	byte	"ss."
35ea9     00          | 	byte	0
35eaa                 | LR__5635
35eaa     73 65 74 76 
35eae     6F 6C       | 	byte	"setvol"
35eb0     00          | 	byte	0
35eb1                 | LR__5636
35eb1     73 76 2E    | 	byte	"sv."
35eb4     00          | 	byte	0
35eb5                 | LR__5637
35eb5     73 65 74 77 
35eb9     61 76 65    | 	byte	"setwave"
35ebc     00          | 	byte	0
35ebd                 | LR__5638
35ebd     73 77 2E    | 	byte	"sw."
35ec0     00          | 	byte	0
35ec1                 | LR__5639
35ec1     73 65 74 77 
35ec5     61 76       | 	byte	"setwav"
35ec7     00          | 	byte	0
35ec8                 | LR__5640
35ec8     73 68 75 74 
35ecc     75 70       | 	byte	"shutup"
35ece     00          | 	byte	0
35ecf                 | LR__5641
35ecf     73 68 2E    | 	byte	"sh."
35ed2     00          | 	byte	0
35ed3                 | LR__5642
35ed3     73 6F 75 6E 
35ed7     64          | 	byte	"sound"
35ed8     00          | 	byte	0
35ed9                 | LR__5643
35ed9     73 6F 2E    | 	byte	"so."
35edc     00          | 	byte	0
35edd                 | LR__5644
35edd     73 70 72 69 
35ee1     74 65       | 	byte	"sprite"
35ee3     00          | 	byte	0
35ee4                 | LR__5645
35ee4     73 70 72 2E | 	byte	"spr."
35ee8     00          | 	byte	0
35ee9                 | LR__5646
35ee9     74 68 65 6E | 	byte	"then"
35eed     00          | 	byte	0
35eee                 | LR__5647
35eee     77 61 69 74 
35ef2     6D 73       | 	byte	"waitms"
35ef4     00          | 	byte	0
35ef5                 | LR__5648
35ef5     77 2E       | 	byte	"w."
35ef7     00          | 	byte	0
35ef8                 | LR__5649
35ef8     77 61 69 74 
35efc     63 6C 6F 63 
35f00     6B          | 	byte	"waitclock"
35f01     00          | 	byte	0
35f02                 | LR__5650
35f02     77 63 2E    | 	byte	"wc."
35f05     00          | 	byte	0
35f06                 | LR__5651
35f06     77 61 69 74 
35f0a     76 62 6C    | 	byte	"waitvbl"
35f0d     00          | 	byte	0
35f0e                 | LR__5652
35f0e     77 76 2E    | 	byte	"wv."
35f11     00          | 	byte	0
35f12                 | LR__5653
35f12     77 72 70 69 
35f16     6E          | 	byte	"wrpin"
35f17     00          | 	byte	0
35f18                 | LR__5654
35f18     77 78 70 69 
35f1c     6E          | 	byte	"wxpin"
35f1d     00          | 	byte	0
35f1e                 | LR__5655
35f1e     77 79 70 69 
35f22     6E          | 	byte	"wypin"
35f23     00          | 	byte	0
35f24                 | LR__5656
35f24     61 62 73    | 	byte	"abs"
35f27     00          | 	byte	0
35f28                 | LR__5657
35f28     61 63 6F 73 | 	byte	"acos"
35f2c     00          | 	byte	0
35f2d                 | LR__5658
35f2d     61 64 72    | 	byte	"adr"
35f30     00          | 	byte	0
35f31                 | LR__5659
35f31     61 64 64 72 | 	byte	"addr"
35f35     00          | 	byte	0
35f36                 | LR__5660
35f36     61 73 63    | 	byte	"asc"
35f39     00          | 	byte	0
35f3a                 | LR__5661
35f3a     61 73 69 6E | 	byte	"asin"
35f3e     00          | 	byte	0
35f3f                 | LR__5662
35f3f     61 74 6E    | 	byte	"atn"
35f42     00          | 	byte	0
35f43                 | LR__5663
35f43     62 69 6E 24 | 	byte	"bin$"
35f47     00          | 	byte	0
35f48                 | LR__5664
35f48     63 68 72 24 | 	byte	"chr$"
35f4c     00          | 	byte	0
35f4d                 | LR__5665
35f4d     63 6F 73    | 	byte	"cos"
35f50     00          | 	byte	0
35f51                 | LR__5666
35f51     64 70 65 65 
35f55     6B          | 	byte	"dpeek"
35f56     00          | 	byte	0
35f57                 | LR__5667
35f57     66 72 61 6D 
35f5b     65 62 75 66 | 	byte	"framebuf"
35f5f     00          | 	byte	0
35f60                 | LR__5668
35f60     66 62 2E    | 	byte	"fb."
35f63     00          | 	byte	0
35f64                 | LR__5669
35f64     66 72 65    | 	byte	"fre"
35f67     00          | 	byte	0
35f68                 | LR__5670
35f68     67 65 74 70 
35f6c     69 78 65 6C | 	byte	"getpixel"
35f70     00          | 	byte	0
35f71                 | LR__5671
35f71     67 65 2E    | 	byte	"ge."
35f74     00          | 	byte	0
35f75                 | LR__5672
35f75     67 65 74 65 
35f79     6E 76 73 75 
35f7d     73 74 61 69 
35f81     6E          | 	byte	"getenvsustain"
35f82     00          | 	byte	0
35f83                 | LR__5673
35f83     67 65 74 6E 
35f87     6F 74 65 76 
35f8b     61 6C 75 65 | 	byte	"getnotevalue"
35f8f     00          | 	byte	0
35f90                 | LR__5674
35f90     67 65 74 74 
35f94     69 6D 65    | 	byte	"gettime"
35f97     00          | 	byte	0
35f98                 | LR__5675
35f98     68 65 78 24 | 	byte	"hex$"
35f9c     00          | 	byte	0
35f9d                 | LR__5676
35f9d     69 6E 6B 65 
35fa1     79 24       | 	byte	"inkey$"
35fa3     00          | 	byte	0
35fa4                 | LR__5677
35fa4     69 6E 74    | 	byte	"int"
35fa7     00          | 	byte	0
35fa8                 | LR__5678
35fa8     6C 65 66 74 
35fac     24          | 	byte	"left$"
35fad     00          | 	byte	0
35fae                 | LR__5679
35fae     6C 65 6E    | 	byte	"len"
35fb1     00          | 	byte	0
35fb2                 | LR__5680
35fb2     6C 6F 67    | 	byte	"log"
35fb5     00          | 	byte	0
35fb6                 | LR__5681
35fb6     6C 70 65 65 
35fba     6B          | 	byte	"lpeek"
35fbb     00          | 	byte	0
35fbc                 | LR__5682
35fbc     6D 69 64 24 | 	byte	"mid$"
35fc0     00          | 	byte	0
35fc1                 | LR__5683
35fc1     6D 6F 75 73 
35fc5     65 6B       | 	byte	"mousek"
35fc7     00          | 	byte	0
35fc8                 | LR__5684
35fc8     6D 6F 75 73 
35fcc     65 77       | 	byte	"mousew"
35fce     00          | 	byte	0
35fcf                 | LR__5685
35fcf     6D 6F 75 73 
35fd3     65 78       | 	byte	"mousex"
35fd5     00          | 	byte	0
35fd6                 | LR__5686
35fd6     6D 6F 75 73 
35fda     65 79       | 	byte	"mousey"
35fdc     00          | 	byte	0
35fdd                 | LR__5687
35fdd     70 61 64 78 | 	byte	"padx"
35fe1     00          | 	byte	0
35fe2                 | LR__5688
35fe2     70 61 64 79 | 	byte	"pady"
35fe6     00          | 	byte	0
35fe7                 | LR__5689
35fe7     70 61 64 7A | 	byte	"padz"
35feb     00          | 	byte	0
35fec                 | LR__5690
35fec     70 61 64 72 
35ff0     78          | 	byte	"padrx"
35ff1     00          | 	byte	0
35ff2                 | LR__5691
35ff2     70 61 64 72 
35ff6     79          | 	byte	"padry"
35ff7     00          | 	byte	0
35ff8                 | LR__5692
35ff8     70 61 64 72 
35ffc     7A          | 	byte	"padrz"
35ffd     00          | 	byte	0
35ffe                 | LR__5693
35ffe     70 61 64 68 | 	byte	"padh"
36002     00          | 	byte	0
36003                 | LR__5694
36003     70 65 65 6B | 	byte	"peek"
36007     00          | 	byte	0
36008                 | LR__5695
36008     70 69 6E 72 
3600c     65 61 64    | 	byte	"pinread"
3600f     00          | 	byte	0
36010                 | LR__5696
36010     72 64 70 69 
36014     6E          | 	byte	"rdpin"
36015     00          | 	byte	0
36016                 | LR__5697
36016     72 69 67 68 
3601a     74 24       | 	byte	"right$"
3601c     00          | 	byte	0
3601d                 | LR__5698
3601d     72 71 70 69 
36021     6E          | 	byte	"rqpin"
36022     00          | 	byte	0
36023                 | LR__5699
36023     72 6F 75 6E 
36027     64          | 	byte	"round"
36028     00          | 	byte	0
36029                 | LR__5700
36029     72 6E 64    | 	byte	"rnd"
3602c     00          | 	byte	0
3602d                 | LR__5701
3602d     73 69 6E    | 	byte	"sin"
36030     00          | 	byte	0
36031                 | LR__5702
36031     73 71 72    | 	byte	"sqr"
36034     00          | 	byte	0
36035                 | LR__5703
36035     73 74 69 63 
36039     6B          | 	byte	"stick"
3603a     00          | 	byte	0
3603b                 | LR__5704
3603b     73 74 72 69 
3603f     67          | 	byte	"strig"
36040     00          | 	byte	0
36041                 | LR__5705
36041     73 74 72 24 | 	byte	"str$"
36045     00          | 	byte	0
36046                 | LR__5706
36046     74 61 6E    | 	byte	"tan"
36049     00          | 	byte	0
3604a                 | LR__5707
3604a     76 61 6C    | 	byte	"val"
3604d     00          | 	byte	0
3604e                 | LR__5708
3604e     76 61 72 70 
36052     74 72       | 	byte	"varptr"
36054     00          | 	byte	0
36055                 | LR__5709
36055     61          | 	byte	"a"
36056     00          | 	byte	0
36057                 | LR__5710
36057     7A          | 	byte	"z"
36058     00          | 	byte	0
36059                 | LR__5711
36059     5F          | 	byte	"_"
3605a     00          | 	byte	0
3605b                 | LR__5712
3605b     61          | 	byte	"a"
3605c     00          | 	byte	0
3605d                 | LR__5713
3605d     7A          | 	byte	"z"
3605e     00          | 	byte	0
3605f                 | LR__5714
3605f     30          | 	byte	"0"
36060     00          | 	byte	0
36061                 | LR__5715
36061     39          | 	byte	"9"
36062     00          | 	byte	0
36063                 | LR__5716
36063     5F          | 	byte	"_"
36064     00          | 	byte	0
36065                 | LR__5717
36065     2E          | 	byte	"."
36066     00          | 	byte	0
36067                 | LR__5718
36067     61          | 	byte	"a"
36068     00          | 	byte	0
36069                 | LR__5719
36069     7A          | 	byte	"z"
3606a     00          | 	byte	0
3606b                 | LR__5720
3606b     30          | 	byte	"0"
3606c     00          | 	byte	0
3606d                 | LR__5721
3606d     39          | 	byte	"9"
3606e     00          | 	byte	0
3606f                 | LR__5722
3606f     5F          | 	byte	"_"
36070     00          | 	byte	0
36071                 | LR__5723
36071     24          | 	byte	"$"
36072     00          | 	byte	0
36073                 | LR__5724
36073     25          | 	byte	"%"
36074     00          | 	byte	0
36075                 | LR__5725
36075     21          | 	byte	"!"
36076     00          | 	byte	0
36077                 | LR__5726
36077     30          | 	byte	"0"
36078     00          | 	byte	0
36079                 | LR__5727
36079     39          | 	byte	"9"
3607a     00          | 	byte	0
3607b                 | LR__5728
3607b     2E          | 	byte	"."
3607c     00          | 	byte	0
3607d                 | LR__5729
3607d     24          | 	byte	"$"
3607e     00          | 	byte	0
3607f                 | LR__5730
3607f     25          | 	byte	"%"
36080     00          | 	byte	0
36081                 | LR__5731
36081     2D          | 	byte	"-"
36082     00          | 	byte	0
36083                 | LR__5732
36083     2E          | 	byte	"."
36084     00          | 	byte	0
36085                 | LR__5733
36085     24          | 	byte	"$"
36086     00          | 	byte	0
36087                 | LR__5734
36087     25          | 	byte	"%"
36088     00          | 	byte	0
36089                 | LR__5735
36089     30          | 	byte	"0"
3608a     00          | 	byte	0
3608b                 | LR__5736
3608b     39          | 	byte	"9"
3608c     00          | 	byte	0
3608d                 | LR__5737
3608d     5F          | 	byte	"_"
3608e     00          | 	byte	0
3608f                 | LR__5738
3608f     2E          | 	byte	"."
36090     00          | 	byte	0
36091                 | LR__5739
36091     45          | 	byte	"E"
36092     00          | 	byte	0
36093                 | LR__5740
36093     65          | 	byte	"e"
36094     00          | 	byte	0
36095                 | LR__5741
36095     2D          | 	byte	"-"
36096     00          | 	byte	0
36097                 | LR__5742
36097     61          | 	byte	"a"
36098     00          | 	byte	0
36099                 | LR__5743
36099     66          | 	byte	"f"
3609a     00          | 	byte	0
3609b                 | LR__5744
3609b     30          | 	byte	"0"
3609c     00          | 	byte	0
3609d                 | LR__5745
3609d     31          | 	byte	"1"
3609e     00          | 	byte	0
3609f                 | LR__5746
3609f     5F          | 	byte	"_"
360a0     00          | 	byte	0
360a1                 | LR__5747
360a1     2D          | 	byte	"-"
360a2     00          | 	byte	0
360a3                 | LR__5748
360a3     65          | 	byte	"e"
360a4     00          | 	byte	0
360a5                 | LR__5749
360a5     2E          | 	byte	"."
360a6     00          | 	byte	0
360a7                 | LR__5750
360a7     45          | 	byte	"E"
360a8     00          | 	byte	0
360a9                 | LR__5751
360a9     65          | 	byte	"e"
360aa     00          | 	byte	0
360ab                 | LR__5752
360ab     30          | 	byte	"0"
360ac     00          | 	byte	0
360ad                 | LR__5753
360ad     39          | 	byte	"9"
360ae     00          | 	byte	0
360af                 | LR__5754
360af     24          | 	byte	"$"
360b0     00          | 	byte	0
360b1                 | LR__5755
360b1     25          | 	byte	"%"
360b2     00          | 	byte	0
360b3                 | LR__5756
360b3     2D          | 	byte	"-"
360b4     00          | 	byte	0
360b5                 | LR__5757
360b5     24          | 	byte	"$"
360b6     00          | 	byte	0
360b7                 | LR__5758
360b7     25          | 	byte	"%"
360b8     00          | 	byte	0
360b9                 | LR__5759
360b9     30          | 	byte	"0"
360ba     00          | 	byte	0
360bb                 | LR__5760
360bb     39          | 	byte	"9"
360bc     00          | 	byte	0
360bd                 | LR__5761
360bd     5F          | 	byte	"_"
360be     00          | 	byte	0
360bf                 | LR__5762
360bf     30          | 	byte	"0"
360c0     00          | 	byte	0
360c1                 | LR__5763
360c1     39          | 	byte	"9"
360c2     00          | 	byte	0
360c3                 | LR__5764
360c3     61          | 	byte	"a"
360c4     00          | 	byte	0
360c5                 | LR__5765
360c5     66          | 	byte	"f"
360c6     00          | 	byte	0
360c7                 | LR__5766
360c7     5F          | 	byte	"_"
360c8     00          | 	byte	0
360c9                 | LR__5767
360c9     30          | 	byte	"0"
360ca     00          | 	byte	0
360cb                 | LR__5768
360cb     31          | 	byte	"1"
360cc     00          | 	byte	0
360cd                 | LR__5769
360cd     5F          | 	byte	"_"
360ce     00          | 	byte	0
360cf                 | LR__5770
360cf     30          | 	byte	"0"
360d0     00          | 	byte	0
360d1                 | LR__5771
360d1     39          | 	byte	"9"
360d2     00          | 	byte	0
360d3                 | LR__5772
360d3     5F          | 	byte	"_"
360d4     00          | 	byte	0
360d5                 | LR__5773
360d5     22          | 	byte	34
360d6     00          | 	byte	0
360d7                 | LR__5774
360d7     22          | 	byte	34
360d8     00          | 	byte	0
360d9                 | LR__5775
360d9     44 69 6D 3A 
360dd     20 61 74 20 
360e1     6C 69 6E 65 
360e5     20          | 	byte	"Dim: at line "
360e6     00          | 	byte	0
360e7                 | LR__5776
360e7     3A 20 77 61 
360eb     72 6E 69 6E 
360ef     67 3A 20 74 
360f3     68 65 20 76 
360f7     61 72 69 61 
360fb     62 6C 65 20 
360ff     65 78 69 73 
36103     74 65 64 2E | 	byte	": warning: the variable existed."
36107     00          | 	byte	0
36108                 | LR__5777
36108     28          | 	byte	"("
36109     00          | 	byte	0
3610a                 | LR__5778
3610a     61 73       | 	byte	"as"
3610c     00          | 	byte	0
3610d                 | LR__5779
3610d     61 73       | 	byte	"as"
3610f     00          | 	byte	0
36110                 | LR__5780
36110     2C          | 	byte	","
36111     00          | 	byte	0
36112                 | LR__5781
36112     29          | 	byte	")"
36113     00          | 	byte	0
36114                 | LR__5782
36114     29          | 	byte	")"
36115     00          | 	byte	0
36116                 | LR__5783
36116     61 73       | 	byte	"as"
36118     00          | 	byte	0
36119                 | LR__5784
36119     62 79 74 65 | 	byte	"byte"
3611d     00          | 	byte	0
3611e                 | LR__5785
3611e     75 62 79 74 
36122     65          | 	byte	"ubyte"
36123     00          | 	byte	0
36124                 | LR__5786
36124     73 68 6F 72 
36128     74          | 	byte	"short"
36129     00          | 	byte	0
3612a                 | LR__5787
3612a     75 73 68 6F 
3612e     72 74       | 	byte	"ushort"
36130     00          | 	byte	0
36131                 | LR__5788
36131     6C 6F 6E 67 | 	byte	"long"
36135     00          | 	byte	0
36136                 | LR__5789
36136     69 6E 74 65 
3613a     67 65 72    | 	byte	"integer"
3613d     00          | 	byte	0
3613e                 | LR__5790
3613e     75 6C 6F 6E 
36142     67          | 	byte	"ulong"
36143     00          | 	byte	0
36144                 | LR__5791
36144     69 6E 74 36 
36148     34          | 	byte	"int64"
36149     00          | 	byte	0
3614a                 | LR__5792
3614a     75 69 6E 74 
3614e     36 34       | 	byte	"uint64"
36150     00          | 	byte	0
36151                 | LR__5793
36151     73 69 6E 67 
36155     6C 65       | 	byte	"single"
36157     00          | 	byte	0
36158                 | LR__5794
36158     64 6F 75 62 
3615c     6C 65       | 	byte	"double"
3615e     00          | 	byte	0
3615f                 | LR__5795
3615f     73 74 72 69 
36163     6E 67       | 	byte	"string"
36165     00          | 	byte	0
36166                 | LR__5796
36166     74 6F       | 	byte	"to"
36168     00          | 	byte	0
36169                 | LR__5797
36169     73 74 65 70 | 	byte	"step"
3616d     00          | 	byte	0
3616e                 | LR__5798
3616e     73 2E       | 	byte	"s."
36170     00          | 	byte	0
36171                 | LR__5799
36171     73 2E       | 	byte	"s."
36173     00          | 	byte	0
36174                 | LR__5800
36174     67 6F 74 6F | 	byte	"goto"
36178     00          | 	byte	0
36179                 | LR__5801
36179     67 6F 73 75 
3617d     62          | 	byte	"gosub"
3617e     00          | 	byte	0
3617f                 | LR__5802
3617f     24          | 	byte	"$"
36180     00          | 	byte	0
36181                 | LR__5803
36181     26 68       | 	byte	"&h"
36183     00          | 	byte	0
36184                 | LR__5804
36184     25          | 	byte	"%"
36185     00          | 	byte	0
36186                 | LR__5805
36186     26 62       | 	byte	"&b"
36188     00          | 	byte	0
36189                 | LR__5806
36189                 | 	byte	
36189     00          | 	byte	0
3618a                 | LR__5807
3618a     61 63 6F 73 
3618e     3A 20       | 	byte	"acos: "
36190     00          | 	byte	0
36191                 | LR__5808
36191     61 73 63 3A 
36195     20          | 	byte	"asc: "
36196     00          | 	byte	0
36197                 | LR__5809
36197     61 73 63 3A 
3619b     20          | 	byte	"asc: "
3619c     00          | 	byte	0
3619d                 | LR__5810
3619d     61 73 69 6E 
361a1     3A 20       | 	byte	"asin: "
361a3     00          | 	byte	0
361a4                 | LR__5811
361a4     61 74 6E 3A 
361a8     20          | 	byte	"atn: "
361a9     00          | 	byte	0
361aa                 | LR__5812
361aa     62 6C 69 74 
361ae     3A 20       | 	byte	"blit: "
361b0     00          | 	byte	0
361b1                 | LR__5813
361b1     62 69 6E 24 
361b5     3A 20       | 	byte	"bin$: "
361b7     00          | 	byte	0
361b8                 | LR__5814
361b8     2F          | 	byte	"/"
361b9     00          | 	byte	0
361ba                 | LR__5815
361ba     2F 73 64 2F 
361be     62 69 6E 2F | 	byte	"/sd/bin/"
361c2     00          | 	byte	0
361c3                 | LR__5816
361c3     53 79 73 74 
361c7     65 6D 20 65 
361cb     72 72 6F 72 
361cf     20          | 	byte	"System error "
361d0     00          | 	byte	0
361d1                 | LR__5817
361d1     3A 20       | 	byte	": "
361d3     00          | 	byte	0
361d4                 | LR__5818
361d4     2A          | 	byte	"*"
361d5     00          | 	byte	0
361d6                 | LR__5819
361d6     2E 2E       | 	byte	".."
361d8     00          | 	byte	0
361d9                 | LR__5820
361d9     2F          | 	byte	"/"
361da     00          | 	byte	0
361db                 | LR__5821
361db     2F          | 	byte	"/"
361dc     00          | 	byte	0
361dd                 | LR__5822
361dd     53 79 73 74 
361e1     65 6D 20 65 
361e5     72 72 6F 72 
361e9     20          | 	byte	"System error "
361ea     00          | 	byte	0
361eb                 | LR__5823
361eb     3A 20       | 	byte	": "
361ed     00          | 	byte	0
361ee                 | LR__5824
361ee     43 75 72 72 
361f2     65 6E 74 20 
361f6     64 69 72 65 
361fa     63 74 6F 72 
361fe     79 3A 20    | 	byte	"Current directory: "
36201     00          | 	byte	0
36202                 | LR__5825
36202     2F          | 	byte	"/"
36203     00          | 	byte	0
36204                 | LR__5826
36204     53 79 73 74 
36208     65 6D 20 65 
3620c     72 72 6F 72 
36210     20          | 	byte	"System error "
36211     00          | 	byte	0
36212                 | LR__5827
36212     3A 20       | 	byte	": "
36214     00          | 	byte	0
36215                 | LR__5828
36215     43 75 72 72 
36219     65 6E 74 20 
3621d     64 69 72 65 
36221     63 74 6F 72 
36225     79 3A 20    | 	byte	"Current directory: "
36228     00          | 	byte	0
36229                 | LR__5829
36229     2F          | 	byte	"/"
3622a     00          | 	byte	0
3622b                 | LR__5830
3622b     2F          | 	byte	"/"
3622c     00          | 	byte	0
3622d                 | LR__5831
3622d     2F          | 	byte	"/"
3622e     00          | 	byte	0
3622f                 | LR__5832
3622f     53 79 73 74 
36233     65 6D 20 65 
36237     72 72 6F 72 
3623b     20          | 	byte	"System error "
3623c     00          | 	byte	0
3623d                 | LR__5833
3623d     3A 20       | 	byte	": "
3623f     00          | 	byte	0
36240                 | LR__5834
36240     43 75 72 72 
36244     65 6E 74 20 
36248     64 69 72 65 
3624c     63 74 6F 72 
36250     79 3A 20    | 	byte	"Current directory: "
36253     00          | 	byte	0
36254                 | LR__5835
36254     63 68 72 24 
36258     3A 20       | 	byte	"chr$: "
3625a     00          | 	byte	0
3625b                 | LR__5836
3625b     63 68 61 6E 
3625f     6E 65 6C 23 
36263     20 65 78 70 
36267     65 63 74 65 
3626b     64          | 	byte	"channel# expected"
3626c     00          | 	byte	0
3626d                 | LR__5837
3626d     63 6F 73 3A 
36271     20          | 	byte	"cos: "
36272     00          | 	byte	0
36273                 | LR__5838
36273                 | 	byte	
36273     00          | 	byte	0
36274                 | LR__5839
36274                 | 	byte	
36274     00          | 	byte	0
36275                 | LR__5840
36275     2F 73 64 2F 
36279     6D 65 64 69 
3627d     61 2F 68 2F | 	byte	"/sd/media/h/"
36281     00          | 	byte	0
36282                 | LR__5841
36282     53 79 73 74 
36286     65 6D 20 65 
3628a     72 72 6F 72 
3628e     20          | 	byte	"System error "
3628f     00          | 	byte	0
36290                 | LR__5842
36290     3A 20       | 	byte	": "
36292     00          | 	byte	0
36293                 | LR__5843
36293                 | 	byte	
36293     00          | 	byte	0
36294                 | LR__5844
36294                 | 	byte	
36294     00          | 	byte	0
36295                 | LR__5845
36295     2F 73 64 2F 
36299     6D 65 64 69 
3629d     61 2F 73 2F | 	byte	"/sd/media/s/"
362a1     00          | 	byte	0
362a2                 | LR__5846
362a2     53 79 73 74 
362a6     65 6D 20 65 
362aa     72 72 6F 72 
362ae     20          | 	byte	"System error "
362af     00          | 	byte	0
362b0                 | LR__5847
362b0     3A 20       | 	byte	": "
362b2     00          | 	byte	0
362b3                 | LR__5848
362b3     2F          | 	byte	"/"
362b4     00          | 	byte	0
362b5                 | LR__5849
362b5     2F          | 	byte	"/"
362b6     00          | 	byte	0
362b7                 | LR__5850
362b7     2F          | 	byte	"/"
362b8     00          | 	byte	0
362b9                 | LR__5851
362b9     43 61 6E 6E 
362bd     6F 74 20 64 
362c1     65 6C 65 74 
362c5     65 20 66 69 
362c9     6C 65 20 6F 
362cd     72 20 66 69 
362d1     6C 65 20 64 
362d5     6F 65 73 6E 
362d9     27 74 20 65 
362dd     78 69 73 74 
362e1     3A 20 73 79 
362e5     73 74 65 6D 
362e9     20 65 72 72 
362ed     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
362f0     00          | 	byte	0
362f1                 | LR__5852
362f1     43 75 72 72 
362f5     65 6E 74 20 
362f9     64 69 72 65 
362fd     63 74 6F 72 
36301     79 3A 20    | 	byte	"Current directory: "
36304     00          | 	byte	0
36305                 | LR__5853
36305                 | 	byte	
36305     00          | 	byte	0
36306                 | LR__5854
36306     2A          | 	byte	"*"
36307     00          | 	byte	0
36308                 | LR__5855
36308                 | 	byte	
36308     00          | 	byte	0
36309                 | LR__5856
36309     5B 64 69 72 
3630d     5D 20       | 	byte	"[dir] "
3630f     00          | 	byte	0
36310                 | LR__5857
36310     4D 6F 72 65 
36314     20 74 68 61 
36318     6E 20 31 32 
3631c     38 20 65 6E 
36320     74 72 69 65 
36324     73 20 66 6F 
36328     75 6E 64 3A 
3632c     20 63 6C 65 
36330     61 6E 20 79 
36334     6F 75 72 20 
36338     64 69 72 65 
3633c     63 74 6F 72 
36340     79          | 	byte	"More than 128 entries found: clean your directory"
36341     00          | 	byte	0
36342                 | LR__5858
36342     2A          | 	byte	"*"
36343     00          | 	byte	0
36344                 | LR__5859
36344                 | 	byte	
36344     00          | 	byte	0
36345                 | LR__5860
36345     4D 6F 72 65 
36349     20 74 68 61 
3634d     6E 20 31 32 
36351     38 20 65 6E 
36355     74 72 69 65 
36359     73 20 66 6F 
3635d     75 6E 64 3A 
36361     20 63 6C 65 
36365     61 6E 20 79 
36369     6F 75 72 20 
3636d     64 69 72 65 
36371     63 74 6F 72 
36375     79          | 	byte	"More than 128 entries found: clean your directory"
36376     00          | 	byte	0
36377                 | LR__5861
36377     45 72 72 6F 
3637b     72 20       | 	byte	"Error "
3637d     00          | 	byte	0
3637e                 | LR__5862
3637e     3A 20       | 	byte	": "
36380     00          | 	byte	0
36381                 | LR__5863
36381     67 65 74 65 
36385     6E 76 73 75 
36389     73 74 61 69 
3638d     6E 3A 20    | 	byte	"getenvsustain: "
36390     00          | 	byte	0
36391                 | LR__5864
36391     67 65 74 70 
36395     69 78 65 6C 
36399     3A 20       | 	byte	"getpixel: "
3639b     00          | 	byte	0
3639c                 | LR__5865
3639c     68 65 78 24 
363a0     3A 20       | 	byte	"hex$: "
363a2     00          | 	byte	0
363a3                 | LR__5866
363a3                 | 	byte	
363a3     00          | 	byte	0
363a4                 | LR__5867
363a4     49 6E 20 69 
363a8     6E 70 75 74 
363ac     3A 20       | 	byte	"In input: "
363ae     00          | 	byte	0
363af                 | LR__5868
363af     2C          | 	byte	","
363b0     00          | 	byte	0
363b1                 | LR__5869
363b1                 | 	byte	
363b1     00          | 	byte	0
363b2                 | LR__5870
363b2                 | 	byte	
363b2     00          | 	byte	0
363b3                 | LR__5871
363b3     6C 65 66 74 
363b7     24 3A 20    | 	byte	"left$: "
363ba     00          | 	byte	0
363bb                 | LR__5872
363bb     6C 65 66 74 
363bf     24 3A 20    | 	byte	"left$: "
363c2     00          | 	byte	0
363c3                 | LR__5873
363c3     6C 65 6E 3A 
363c7     20          | 	byte	"len: "
363c8     00          | 	byte	0
363c9                 | LR__5874
363c9     6C 65 6E 3A 
363cd     20          | 	byte	"len: "
363ce     00          | 	byte	0
363cf                 | LR__5875
363cf                 | 	byte	
363cf     00          | 	byte	0
363d0                 | LR__5876
363d0     2F          | 	byte	"/"
363d1     00          | 	byte	0
363d2                 | LR__5877
363d2     2F          | 	byte	"/"
363d3     00          | 	byte	0
363d4                 | LR__5878
363d4     2E 62 61 73 | 	byte	".bas"
363d8     00          | 	byte	0
363d9                 | LR__5879
363d9     53 79 73 74 
363dd     65 6D 20 65 
363e1     72 72 6F 72 
363e5     20          | 	byte	"System error "
363e6     00          | 	byte	0
363e7                 | LR__5880
363e7     3A 20       | 	byte	": "
363e9     00          | 	byte	0
363ea                 | LR__5881
363ea     2E 62 61 73 | 	byte	".bas"
363ee     00          | 	byte	0
363ef                 | LR__5882
363ef     2F          | 	byte	"/"
363f0     00          | 	byte	0
363f1                 | LR__5883
363f1                 | 	byte	
363f1     00          | 	byte	0
363f2                 | LR__5884
363f2     4C 6F 61 64 
363f6     65 64 20    | 	byte	"Loaded "
363f9     00          | 	byte	0
363fa                 | LR__5885
363fa     2F          | 	byte	"/"
363fb     00          | 	byte	0
363fc                 | LR__5886
363fc     6C 6F 67 3A 
36400     20          | 	byte	"log: "
36401     00          | 	byte	0
36402                 | LR__5887
36402     6D 69 64 24 
36406     3A 20       | 	byte	"mid$: "
36408     00          | 	byte	0
36409                 | LR__5888
36409     6D 69 64 24 
3640d     3A 20       | 	byte	"mid$: "
3640f     00          | 	byte	0
36410                 | LR__5889
36410     43 61 6E 6E 
36414     6F 74 20 63 
36418     72 65 61 74 
3641c     65 20 61 20 
36420     64 69 72 65 
36424     63 74 6F 72 
36428     79 3A 20 73 
3642c     79 73 74 65 
36430     6D 20 65 72 
36434     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
36438     00          | 	byte	0
36439                 | LR__5890
36439     20 42 41 53 
3643d     49 43 20 62 
36441     79 74 65 73 
36445     20 66 72 65 
36449     65          | 	byte	" BASIC bytes free"
3644a     00          | 	byte	0
3644b                 | LR__5891
3644b                 | 	byte	
3644b     00          | 	byte	0
3644c                 | LR__5892
3644c                 | 	byte	
3644c     00          | 	byte	0
3644d                 | LR__5893
3644d                 | 	byte	
3644d     00          | 	byte	0
3644e                 | LR__5894
3644e     6E 6F 6E 61 
36452     6D 65 2E 62 
36456     61 73       | 	byte	"noname.bas"
36458     00          | 	byte	0
36459                 | LR__5895
36459     66 69 6C 65 
3645d     6E 61 6D 65 
36461     20 65 78 70 
36465     65 63 74 65 
36469     64          | 	byte	"filename expected"
3646a     00          | 	byte	0
3646b                 | LR__5896
3646b     72 65 61 64 | 	byte	"read"
3646f     00          | 	byte	0
36470                 | LR__5897
36470     77 72 69 74 
36474     65          | 	byte	"write"
36475     00          | 	byte	0
36476                 | LR__5898
36476     61 70 70 65 
3647a     6E 64       | 	byte	"append"
3647c     00          | 	byte	0
3647d                 | LR__5899
3647d     63 68 61 6E 
36481     6E 65 6C 23 
36485     20 65 78 70 
36489     65 63 74 65 
3648d     64          | 	byte	"channel# expected"
3648e     00          | 	byte	0
3648f                 | LR__5900
3648f     4F 70 65 6E 
36493     3A 20 69 6E 
36497     76 61 6C 69 
3649b     64 20 6D 6F 
3649f     64 65       | 	byte	"Open: invalid mode"
364a1     00          | 	byte	0
364a2                 | LR__5901
364a2     70 61 64 68 
364a6     3A 20       | 	byte	"padh: "
364a8     00          | 	byte	0
364a9                 | LR__5902
364a9     70 61 64 72 
364ad     78 3A 20    | 	byte	"padrx: "
364b0     00          | 	byte	0
364b1                 | LR__5903
364b1     70 61 64 72 
364b5     79 3A 20    | 	byte	"padry: "
364b8     00          | 	byte	0
364b9                 | LR__5904
364b9     70 61 64 72 
364bd     7A 3A 20    | 	byte	"padrz: "
364c0     00          | 	byte	0
364c1                 | LR__5905
364c1     70 61 64 78 
364c5     3A 20       | 	byte	"padx: "
364c7     00          | 	byte	0
364c8                 | LR__5906
364c8     70 61 64 79 
364cc     3A 20       | 	byte	"pady: "
364ce     00          | 	byte	0
364cf                 | LR__5907
364cf     70 61 64 7A 
364d3     3A 20       | 	byte	"padz: "
364d5     00          | 	byte	0
364d6                 | LR__5908
364d6     50 72 69 6E 
364da     74 20 74 6F 
364de     20 63 68 61 
364e2     6E 6E 65 6C 
364e6     20 28 6E 6F 
364ea     74 20 79 65 
364ee     74 20 69 6D 
364f2     70 6C 65 6D 
364f6     65 6E 74 65 
364fa     64 29       | 	byte	"Print to channel (not yet implemented)"
364fc     00          | 	byte	0
364fd                 | LR__5909
364fd                 | 	byte	
364fd     00          | 	byte	0
364fe                 | LR__5910
364fe     64 61 74 61 | 	byte	"data"
36502     00          | 	byte	0
36503                 | LR__5911
36503                 | 	byte	
36503     00          | 	byte	0
36504                 | LR__5912
36504     49 6E 20 72 
36508     65 61 64 3A 
3650c     20          | 	byte	"In read: "
3650d     00          | 	byte	0
3650e                 | LR__5913
3650e                 | 	byte	
3650e     00          | 	byte	0
3650f                 | LR__5914
3650f                 | 	byte	
3650f     00          | 	byte	0
36510                 | LR__5915
36510     2C          | 	byte	","
36511     00          | 	byte	0
36512                 | LR__5916
36512                 | 	byte	
36512     00          | 	byte	0
36513                 | LR__5917
36513                 | 	byte	
36513     00          | 	byte	0
36514                 | LR__5918
36514                 | 	byte	
36514     00          | 	byte	0
36515                 | LR__5919
36515                 | 	byte	
36515     00          | 	byte	0
36516                 | LR__5920
36516                 | 	byte	
36516     00          | 	byte	0
36517                 | LR__5921
36517     72 69 67 68 
3651b     74 24 3A 20 | 	byte	"right$: "
3651f     00          | 	byte	0
36520                 | LR__5922
36520     72 69 67 68 
36524     74 24 3A 20 | 	byte	"right$: "
36528     00          | 	byte	0
36529                 | LR__5923
36529     72 6E 64 3A 
3652d     20          | 	byte	"rnd: "
3652e     00          | 	byte	0
3652f                 | LR__5924
3652f     72 6E 64 3A 
36533     20          | 	byte	"rnd: "
36534     00          | 	byte	0
36535                 | LR__5925
36535                 | 	byte	
36535     00          | 	byte	0
36536                 | LR__5926
36536     53 74 6F 70 
3653a     70 65 64 20 
3653e     61 74 20 6C 
36542     69 6E 65 20 | 	byte	"Stopped at line "
36546     00          | 	byte	0
36547                 | LR__5927
36547                 | 	byte	
36547     00          | 	byte	0
36548                 | LR__5928
36548     2F          | 	byte	"/"
36549     00          | 	byte	0
3654a                 | LR__5929
3654a                 | 	byte	
3654a     00          | 	byte	0
3654b                 | LR__5930
3654b     53 61 76 65 
3654f     64 20 61 73 
36553     20          | 	byte	"Saved as "
36554     00          | 	byte	0
36555                 | LR__5931
36555     2F          | 	byte	"/"
36556     00          | 	byte	0
36557                 | LR__5932
36557     73 69 6E 3A 
3655b     20          | 	byte	"sin: "
3655c     00          | 	byte	0
3655d                 | LR__5933
3655d     73 71 72 3A 
36561     20          | 	byte	"sqr: "
36562     00          | 	byte	0
36563                 | LR__5934
36563     73 74 69 63 
36567     6B 3A 20    | 	byte	"stick: "
3656a     00          | 	byte	0
3656b                 | LR__5935
3656b     73 74 72 69 
3656f     67 3A 20    | 	byte	"strig: "
36572     00          | 	byte	0
36573                 | LR__5936
36573     74 61 6E 3A 
36577     20          | 	byte	"tan: "
36578     00          | 	byte	0
36579                 | LR__5937
36579     76 61 6C 3A 
3657d     20          | 	byte	"val: "
3657e     00          | 	byte	0
3657f                 | LR__5938
3657f     76 61 6C 3A 
36583     20          | 	byte	"val: "
36584     00          | 	byte	0
36585                 | LR__5939
36585     24          | 	byte	"$"
36586     00          | 	byte	0
36587                 | LR__5940
36587     26 68       | 	byte	"&h"
36589     00          | 	byte	0
3658a                 | LR__5941
3658a     25          | 	byte	"%"
3658b     00          | 	byte	0
3658c                 | LR__5942
3658c     26 62       | 	byte	"&b"
3658e     00          | 	byte	0
3658f                 | LR__5943
3658f                 | 	byte	
3658f     00          | 	byte	0
36590                 | LR__5944
36590     45 78 70 65 
36594     63 74 65 64 
36598     20 6E 75 6D 
3659c     62 65 72 2C 
365a0     20 67 6F 74 
365a4     20 73 6F 6D 
365a8     65 74 68 69 
365ac     6E 67 20 65 
365b0     6C 73 65    | 	byte	"Expected number, got something else"
365b3     00          | 	byte	0
365b4                 | LR__5945
365b4     43 61 6E 6E 
365b8     6F 74 20 61 
365bc     64 64 20 61 
365c0     20 6E 75 6D 
365c4     62 65 72 20 
365c8     74 6F 20 61 
365cc     20 73 74 72 
365d0     69 6E 67    | 	byte	"Cannot add a number to a string"
365d3     00          | 	byte	0
365d4                 | LR__5946
365d4     43 61 6E 6E 
365d8     6F 74 20 73 
365dc     75 62 73 74 
365e0     72 61 63 74 
365e4     20 73 74 72 
365e8     69 6E 67 73 | 	byte	"Cannot substract strings"
365ec     00          | 	byte	0
365ed                 | LR__5947
365ed     55 6E 6B 6E 
365f1     6F 77 6E 20 
365f5     65 72 72 6F 
365f9     72 20 77 68 
365fd     69 6C 65 20 
36601     61 64 64 69 
36605     6E 67       | 	byte	"Unknown error while adding"
36607     00          | 	byte	0
36608                 | LR__5948
36608     55 6E 6B 6E 
3660c     6F 77 6E 20 
36610     65 72 72 6F 
36614     72 20 77 68 
36618     69 6C 65 20 
3661c     73 75 62 73 
36620     74 72 61 63 
36624     74 69 6E 67 | 	byte	"Unknown error while substracting"
36628     00          | 	byte	0
36629                 | LR__5949
36629     43 61 6E 6E 
3662d     6F 74 20 64 
36631     6F 20 6C 6F 
36635     67 69 63 20 
36639     6F 70 65 72 
3663d     61 74 69 6F 
36641     6E 20 6F 6E 
36645     20 73 74 72 
36649     69 6E 67 20 
3664d     6F 72 20 66 
36651     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
36655     00          | 	byte	0
36656                 | LR__5950
36656     55 6E 6B 6E 
3665a     6F 77 6E 20 
3665e     65 72 72 6F 
36662     72 20 77 68 
36666     69 6C 65 20 
3666a     64 6F 69 6E 
3666e     67 20 6C 6F 
36672     67 69 63 20 
36676     6F 70 65 72 
3667a     61 74 69 6F 
3667e     6E          | 	byte	"Unknown error while doing logic operation"
3667f     00          | 	byte	0
36680                 | LR__5951
36680     43 61 6E 6E 
36684     6F 74 20 6D 
36688     75 6C 74 69 
3668c     70 6C 79 20 
36690     73 74 72 69 
36694     6E 67 73    | 	byte	"Cannot multiply strings"
36697     00          | 	byte	0
36698                 | LR__5952
36698     55 6E 6B 6E 
3669c     6F 77 6E 20 
366a0     65 72 72 6F 
366a4     72 20 77 68 
366a8     69 6C 65 20 
366ac     6D 75 6C 74 
366b0     69 70 6C 79 
366b4     69 6E 67    | 	byte	"Unknown error while multiplying"
366b7     00          | 	byte	0
366b8                 | LR__5953
366b8     43 61 6E 6E 
366bc     6F 74 20 64 
366c0     69 76 69 64 
366c4     65 20 73 74 
366c8     72 69 6E 67 
366cc     73          | 	byte	"Cannot divide strings"
366cd     00          | 	byte	0
366ce                 | LR__5954
366ce     55 6E 6B 6E 
366d2     6F 77 6E 20 
366d6     65 72 72 6F 
366da     72 20 77 68 
366de     69 6C 65 20 
366e2     64 69 76 69 
366e6     64 69 6E 67 | 	byte	"Unknown error while dividing"
366ea     00          | 	byte	0
366eb                 | LR__5955
366eb     43 61 6E 6E 
366ef     6F 74 20 63 
366f3     6F 6D 70 75 
366f7     74 65 20 61 
366fb     20 70 6F 77 
366ff     65 72 20 6F 
36703     66 20 61 20 
36707     73 74 72 69 
3670b     6E 67       | 	byte	"Cannot compute a power of a string"
3670d     00          | 	byte	0
3670e                 | LR__5956
3670e     55 6E 6B 6E 
36712     6F 77 6E 20 
36716     65 72 72 6F 
3671a     72 20 77 68 
3671e     69 6C 65 20 
36722     63 6F 6D 70 
36726     75 74 69 6E 
3672a     67 20 61 20 
3672e     70 6F 77 65 
36732     72          | 	byte	"Unknown error while computing a power"
36733     00          | 	byte	0
36734                 | LR__5957
36734     52 69 67 68 
36738     74 20 70 61 
3673c     72 65 6E 74 
36740     68 65 73 69 
36744     73 20 65 78 
36748     70 65 63 74 
3674c     65 64       | 	byte	"Right parenthesis expected"
3674e     00          | 	byte	0
3674f                 | LR__5958
3674f     45 78 70 65 
36753     63 74 65 64 
36757     20 73 74 72 
3675b     69 6E 67    | 	byte	"Expected string"
3675e     00          | 	byte	0
3675f                 | LR__5959
3675f     45 78 70 65 
36763     63 74 65 64 
36767     20 66 6C 6F 
3676b     61 74       | 	byte	"Expected float"
3676d     00          | 	byte	0
3676e                 | LR__5960
3676e     45 78 70 65 
36772     63 74 65 64 
36776     20 75 6E 73 
3677a     69 67 6E 65 
3677e     64 20 69 6E 
36782     74 65 67 65 
36786     72          | 	byte	"Expected unsigned integer"
36787     00          | 	byte	0
36788                 | LR__5961
36788     45 78 70 65 
3678c     63 74 65 64 
36790     20 69 6E 74 
36794     65 67 65 72 | 	byte	"Expected integer"
36798     00          | 	byte	0
36799                 | LR__5962
36799     4E 6F 20 6D 
3679d     6F 72 65 20 
367a1     76 61 72 69 
367a5     61 62 6C 65 
367a9     20 73 6C 6F 
367ad     74 73       | 	byte	"No more variable slots"
367af     00          | 	byte	0
367b0                 | LR__5963
367b0     56 61 72 69 
367b4     61 62 6C 65 
367b8     20 6E 6F 74 
367bc     20 66 6F 75 
367c0     6E 64       | 	byte	"Variable not found"
367c2     00          | 	byte	0
367c3                 | LR__5964
367c3     43 6F 6D 6D 
367c7     61 20 65 78 
367cb     70 65 63 74 
367cf     65 64       | 	byte	"Comma expected"
367d1     00          | 	byte	0
367d2                 | LR__5965
367d2     43 6F 6D 6D 
367d6     61 20 6F 72 
367da     20 73 65 6D 
367de     69 63 6F 6C 
367e2     6F 6E 20 65 
367e6     78 70 65 63 
367ea     74 65 64    | 	byte	"Comma or semicolon expected"
367ed     00          | 	byte	0
367ee                 | LR__5966
367ee     55 6E 6B 6E 
367f2     6F 77 6E 20 
367f6     63 6F 6D 6D 
367fa     61 6E 64    | 	byte	"Unknown command"
367fd     00          | 	byte	0
367fe                 | LR__5967
367fe     53 74 61 63 
36802     6B 20 75 6E 
36806     64 65 72 66 
3680a     6C 6F 77    | 	byte	"Stack underflow"
3680d     00          | 	byte	0
3680e                 | LR__5968
3680e     43 61 6E 6E 
36812     6F 74 20 65 
36816     78 65 63 75 
3681a     74 65 20 67 
3681e     6F 74 6F 20 
36822     6F 72 20 67 
36826     6F 73 75 62 
3682a     20 69 6E 20 
3682e     74 68 65 20 
36832     69 6D 6D 65 
36836     64 69 61 74 
3683a     65 20 6D 6F 
3683e     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
36840     00          | 	byte	0
36841                 | LR__5969
36841     43 61 6E 6E 
36845     6F 74 20 6C 
36849     6F 61 64 20 
3684d     66 72 6F 6D 
36851     20 74 68 69 
36855     73 20 66 69 
36859     6C 65       | 	byte	"Cannot load from this file"
3685b     00          | 	byte	0
3685c                 | LR__5970
3685c     54 68 65 20 
36860     70 72 6F 67 
36864     72 61 6D 20 
36868     69 73 20 65 
3686c     6D 70 74 79 | 	byte	"The program is empty"
36870     00          | 	byte	0
36871                 | LR__5971
36871     49 66 20 61 
36875     66 74 65 72 
36879     20 69 66    | 	byte	"If after if"
3687c     00          | 	byte	0
3687d                 | LR__5972
3687d     45 6D 70 74 
36881     79 20 65 78 
36885     70 72 65 73 
36889     73 69 6F 6E | 	byte	"Empty expression"
3688d     00          | 	byte	0
3688e                 | LR__5973
3688e     53 74 72 69 
36892     6E 67 20 65 
36896     78 70 65 63 
3689a     74 65 64    | 	byte	"String expected"
3689d     00          | 	byte	0
3689e                 | LR__5974
3689e     49 6E 74 65 
368a2     72 70 72 65 
368a6     74 65 72 20 
368aa     69 6E 74 65 
368ae     72 6E 61 6C 
368b2     20 65 72 72 
368b6     6F 72       | 	byte	"Interpreter internal error"
368b8     00          | 	byte	0
368b9                 | LR__5975
368b9     45 78 70 65 
368bd     63 74 65 64 
368c1     20 61 73 73 
368c5     69 67 6E    | 	byte	"Expected assign"
368c8     00          | 	byte	0
368c9                 | LR__5976
368c9     45 78 70 65 
368cd     63 74 65 64 
368d1     20 27 74 6F 
368d5     27          | 	byte	"Expected 'to'"
368d6     00          | 	byte	0
368d7                 | LR__5977
368d7     45 78 70 65 
368db     63 74 65 64 
368df     20 69 6E 74 
368e3     65 67 65 72 
368e7     20 76 61 72 
368eb     69 61 62 6C 
368ef     65          | 	byte	"Expected integer variable"
368f0     00          | 	byte	0
368f1                 | LR__5978
368f1     55 6E 69 6E 
368f5     69 74 69 61 
368f9     6C 69 7A 65 
368fd     64 20 76 61 
36901     72 69 61 62 
36905     6C 65 20 69 
36909     6E 20 27 6E 
3690d     65 78 74 27 
36911     2C 20 75 73 
36915     65 20 27 66 
36919     6F 72 27 20 
3691d     62 65 66 6F 
36921     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
36923     00          | 	byte	0
36924                 | LR__5979
36924     4E 6F 20 6D 
36928     6F 72 65 20 
3692c     73 6C 6F 74 
36930     73 20 66 6F 
36934     72 20 27 66 
36938     6F 72 27    | 	byte	"No more slots for 'for'"
3693b     00          | 	byte	0
3693c                 | LR__5980
3693c     27 4E 65 78 
36940     74 27 20 64 
36944     6F 65 73 6E 
36948     27 74 20 6D 
3694c     61 74 63 68 
36950     20 27 66 6F 
36954     72 27       | 	byte	"'Next' doesn't match 'for'"
36956     00          | 	byte	0
36957                 | LR__5981
36957     27 47 6F 74 
3695b     6F 27 20 74 
3695f     61 72 67 65 
36963     74 20 6C 69 
36967     6E 65 20 6E 
3696b     6F 74 20 66 
3696f     6F 75 6E 64 | 	byte	"'Goto' target line not found"
36973     00          | 	byte	0
36974                 | LR__5982
36974     42 61 64 20 
36978     6E 75 6D 62 
3697c     65 72 20 6F 
36980     66 20 70 61 
36984     72 61 6D 65 
36988     74 65 72 73 | 	byte	"Bad number of parameters"
3698c     00          | 	byte	0
3698d                 | LR__5983
3698d     46 75 6E 63 
36991     74 69 6F 6E 
36995     20 75 6E 64 
36999     65 66 69 6E 
3699d     65 64 20 66 
369a1     6F 72 20 73 
369a5     74 72 69 6E 
369a9     67 73       | 	byte	"Function undefined for strings"
369ab     00          | 	byte	0
369ac                 | LR__5984
369ac     42 61 64 20 
369b0     70 61 72 61 
369b4     6D 65 74 65 
369b8     72          | 	byte	"Bad parameter"
369b9     00          | 	byte	0
369ba                 | LR__5985
369ba     43 61 6E 6E 
369be     6F 74 20 64 
369c2     65 63 6C 61 
369c6     72 65 20 61 
369ca     6E 20 61 72 
369ce     72 61 79 3A 
369d2     20 74 68 65 
369d6     20 76 61 72 
369da     69 61 62 6C 
369de     65 20 65 78 
369e2     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
369e6     00          | 	byte	0
369e7                 | LR__5986
369e7     45 78 70 65 
369eb     63 74 65 64 
369ef     20 27 28 27 | 	byte	"Expected '('"
369f3     00          | 	byte	0
369f4                 | LR__5987
369f4     45 78 70 65 
369f8     63 74 65 64 
369fc     20 27 29 27 
36a00     20 6F 72 20 
36a04     27 2C 27    | 	byte	"Expected ')' or ','"
36a07     00          | 	byte	0
36a08                 | LR__5988
36a08     4E 6F 20 6D 
36a0c     6F 72 65 20 
36a10     74 68 61 6E 
36a14     20 33 20 64 
36a18     69 6D 65 6E 
36a1c     73 69 6F 6E 
36a20     73 20 73 75 
36a24     70 70 6F 72 
36a28     74 65 64    | 	byte	"No more than 3 dimensions supported"
36a2b     00          | 	byte	0
36a2c                 | LR__5989
36a2c     56 61 72 69 
36a30     61 62 6C 65 
36a34     20 6E 61 6D 
36a38     65 20 65 78 
36a3c     70 65 63 74 
36a40     65 64       | 	byte	"Variable name expected"
36a42     00          | 	byte	0
36a43                 | LR__5990
36a43     54 79 70 65 
36a47     20 6E 61 6D 
36a4b     65 20 65 78 
36a4f     70 65 63 74 
36a53     65 64       | 	byte	"Type name expected"
36a55     00          | 	byte	0
36a56                 | LR__5991
36a56     54 79 70 65 
36a5a     20 6E 6F 74 
36a5e     20 73 75 70 
36a62     70 6F 72 74 
36a66     65 64 20 79 
36a6a     65 74       | 	byte	"Type not supported yet"
36a6c     00          | 	byte	0
36a6d                 | LR__5992
36a6d     41 72 72 61 
36a71     79 20 69 6E 
36a75     64 65 78 20 
36a79     6F 75 74 20 
36a7d     6F 66 20 72 
36a81     61 6E 67 65 | 	byte	"Array index out of range"
36a85     00          | 	byte	0
36a86                 | LR__5993
36a86     42 61 64 20 
36a8a     74 79 70 65 
36a8e     20 77 68 69 
36a92     6C 65 20 61 
36a96     73 73 69 67 
36a9a     6E 69 6E 67 
36a9e     20 74 6F 20 
36aa2     61 72 72 61 
36aa6     79          | 	byte	"Bad type while assigning to array"
36aa7     00          | 	byte	0
36aa8                 | LR__5994
36aa8     54 6F 6F 20 
36aac     6D 61 6E 79 
36ab0     20 76 61 72 
36ab4     69 61 62 6C 
36ab8     65 73       | 	byte	"Too many variables"
36aba     00          | 	byte	0
36abb                 | LR__5995
36abb     27 54 68 65 
36abf     6E 27 20 65 
36ac3     78 70 65 63 
36ac7     74 65 64    | 	byte	"'Then' expected"
36aca     00          | 	byte	0
36acb                 | LR__5996
36acb     44 69 72 65 
36acf     63 74 6F 72 
36ad3     79 20 64 6F 
36ad7     65 73 6E 27 
36adb     74 20 65 78 
36adf     69 73 74    | 	byte	"Directory doesn't exist"
36ae2     00          | 	byte	0
36ae3                 | LR__5997
36ae3     55 6E 65 78 
36ae7     70 65 63 74 
36aeb     65 64 20 65 
36aef     6E 64 20 6F 
36af3     66 20 6C 69 
36af7     6E 65       | 	byte	"Unexpected end of line"
36af9     00          | 	byte	0
36afa                 | LR__5998
36afa     4E 6F 20 6D 
36afe     6F 72 65 20 
36b02     64 61 74 61 | 	byte	"No more data"
36b06     00          | 	byte	0
36b07                 | LR__5999
36b07     45 72 72 6F 
36b0b     72 20       | 	byte	"Error "
36b0d     00          | 	byte	0
36b0e                 | LR__6000
36b0e     20 2D 20    | 	byte	" - "
36b11     00          | 	byte	0
36b12                 | LR__6001
36b12     20 69 6E 20 
36b16     6C 69 6E 65 
36b1a     20          | 	byte	" in line "
36b1b     00          | 	byte	0
36b1c                 | LR__6002
36b1c                 | 	byte	
36b1c     00          | 	byte	0
36b1d                 | LR__6003
36b1d     2F 73 64    | 	byte	"/sd"
36b20     00          | 	byte	0
36b21                 | LR__6004
36b21     2F 73 64 2F 
36b25     62 61 73    | 	byte	"/sd/bas"
36b28     00          | 	byte	0
36b29                 | LR__6005
36b29     2F 73 64 2F 
36b2d     62 61 73    | 	byte	"/sd/bas"
36b30     00          | 	byte	0
36b31                 | LR__6006
36b31     20 42 41 53 
36b35     49 43 20 62 
36b39     79 74 65 73 
36b3d     20 66 72 65 
36b41     65          | 	byte	" BASIC bytes free"
36b42     00          | 	byte	0
36b43                 | LR__6007
36b43     52 65 61 64 
36b47     79          | 	byte	"Ready"
36b48     00          | 	byte	0
36b49                 | LR__6008
36b49     6E 6F 6E 61 
36b4d     6D 65 2E 62 
36b51     61 73       | 	byte	"noname.bas"
36b53     00          | 	byte	0
36b54                 | LR__6009
36b54     2F 73 64 2F 
36b58     62 61 73 2F 
36b5c     61 75 74 6F 
36b60     72 75 6E 2E 
36b64     62 61 73    | 	byte	"/sd/bas/autorun.bas"
36b67     00          | 	byte	0
36b68                 | LR__6010
36b68     72 75 6E 20 
36b6c     61 75 74 6F 
36b70     72 75 6E 2E 
36b74     62 61 73    | 	byte	"run autorun.bas"
36b77     00          | 	byte	0
36b78                 | LR__6011
36b78                 | 	byte	
36b78     00          | 	byte	0
36b79     00 00 00    | 	alignl
36b7c                 | _dat_
36b7c     00 00 00 00 
36b80     00 00 00 00 
36b84     00 00 00 00 
36b88     00 00 00 00 | 	byte	$00[16]
36b8c     61 41 17 0E 
36b90     62 42 00 00 
36b94     63 43 19 10 
36b98     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
36b9c     65 45 18 0F 
36ba0     66 46 00 00 
36ba4     67 47 00 00 
36ba8     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
36bac     69 49 00 00 
36bb0     6A 4A 00 00 
36bb4     6B 4B 00 00 
36bb8     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
36bbc     6D 4D 00 00 
36bc0     6E 4E 1A 11 
36bc4     6F 4F 1E 15 
36bc8     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
36bcc     71 51 00 00 
36bd0     72 52 00 00 
36bd4     73 53 1B 12 
36bd8     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
36bdc     75 55 00 00 
36be0     76 56 00 00 
36be4     77 57 00 00 
36be8     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
36bec     79 59 00 00 
36bf0     7A 5A 1D 14 
36bf4     31 21 04 00 
36bf8     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
36bfc     33 23 06 00 
36c00     34 24 07 00 
36c04     35 25 08 00 
36c08     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
36c0c     37 26 0A 00 
36c10     38 2A 0B 00 
36c14     39 28 0C 00 
36c18     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
36c1c     8D 8D 00 00 
36c20     9B 9B 00 00 
36c24     88 88 00 00 
36c28     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
36c2c     20 20 00 00 
36c30     2D 5F 00 00 
36c34     3D 2B 00 00 
36c38     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
36c3c     5D 7D 00 00 
36c40     5C 7C 00 00 
36c44     23 7E 00 00 
36c48     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
36c4c     27 22 00 00 
36c50     60 7E 03 00 
36c54     2C 3C 00 00 
36c58     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
36c5c     2F 3F 00 00 
36c60     B9 B9 00 00 
36c64     BA 00 00 00 
36c68     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
36c6c     BC 00 00 00 
36c70     BD 00 00 00 
36c74     BE 00 00 00 
36c78     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
36c7c     C0 00 00 00 
36c80     C1 00 00 00 
36c84     C2 00 00 00 
36c88     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
36c8c     C4 00 00 00 
36c90     C5 00 00 00 
36c94     C6 00 00 00 
36c98     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
36c9c     C8 00 00 00 
36ca0     C9 00 00 00 
36ca4     CA 00 00 00 
36ca8     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
36cac     7F 7F 00 00 
36cb0     CC 00 00 00 
36cb4     CD 00 00 00 
36cb8     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
36cbc     CF 00 00 00 
36cc0     D0 00 00 00 
36cc4     D1 00 00 00 
36cc8     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
36ccc     2F 2F 00 00 
36cd0     2A 2A 00 00 
36cd4     2D 2D 00 00 
36cd8     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
36cdc     8D 8D 00 00 
36ce0     31 31 00 00 
36ce4     32 32 00 00 
36ce8     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
36cec     34 34 00 00 
36cf0     35 35 00 00 
36cf4     36 36 00 00 
36cf8     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
36cfc     38 38 00 00 
36d00     39 39 00 00 
36d04     30 30 00 00 
36d08     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
36d0c     5C 7C 00 00 
36d10     00 00 00 00 
36d14     00 00 00 00 
36d18     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
36d1c     00 00 00 00 
      ...             
36d74     00 00 00 00 
36d78     00 00 00 00 | 	byte	$00[96]
36d7c     2B 00 A6 F2 
36d80     24 A7 09 80 
36d84     5B 88 4D 89 
36d88     80 88 A5 88 | atari_spl file "atari.spl"
36d8c     6D 88 B8 88 
36d90     80 88 CB 88 
36d94     92 88 A5 88 
36d98     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
36d9c     A5 88 CA 88 
36da0     A6 88 DD 88 
36da4     B8 88 AB 89 
36da8     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
36dac     C8 AD C6 F1 
36db0     91 06 B6 FF 
36db4     13 00 4A 00 
36db8     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
36dbc     5D 00 5E 00 
36dc0     5D 00 5E 00 
36dc4     5E 00 5D 00 
36dc8     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
36dcc     38 00 83 00 
36dd0     25 00 83 00 
36dd4     C3 FE D1 04 
36dd8     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
36ddc     48 88 38 85 
36de0     41 8A CB 88 
36de4     28 89 B8 88 
36de8     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
36dec     15 89 03 89 
36df0     02 89 15 89 
36df4     16 89 15 89 
36df8     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
36dfc     15 89 3A 89 
36e00     72 89 E3 89 
36e04     52 83 AD 97 
36e08     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
36e0c     0C 02 B6 FF 
36e10     E1 00 A8 00 
36e14     F3 00 A8 00 
36e18     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
36e1c     CE 00 CD 00 
36e20     CD 00 BA 00 
36e24     E1 00 BB 00 
36e28     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
36e2c     DF 00 C9 FF 
36e30     E6 01 B6 06 
36e34     EE DD 8D 98 
36e38     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
36e3c     97 89 73 89 
36e40     3B 89 60 89 
36e44     60 89 60 89 
36e48     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
36e4c     73 89 72 89 
36e50     85 89 73 89 
36e54     AA 89 60 89 
36e58     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
36e5c     E8 8A 18 86 
36e60     92 88 A5 C2 
36e64     E0 00 C3 05 
36e68     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
36e6c     F2 00 64 01 
36e70     06 01 3E 01 
36e74     2B 01 2B 01 
36e78     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
36e7c     2B 01 2A 01 
36e80     2B 01 2B 01 
36e84     2B 01 18 01 
36e88     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
36e8c     39 07 61 F3 
36e90     C0 AF 37 85 
36e94     0F 88 8B 8A 
36e98     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
36e9c     AB 89 D0 89 
36ea0     AB 89 D0 89 
36ea4     D0 89 CF 89 
36ea8     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
36eac     D0 89 F5 89 
36eb0     BD 89 08 8A 
36eb4     CF 89 E8 8A 
36eb8     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
36ebc     53 B3 0D F8 
36ec0     F4 07 38 00 
36ec4     63 01 63 01 
36ec8     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
36ecc     88 01 88 01 
36ed0     76 01 88 01 
36ed4     88 01 89 01 
36ed8     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
36edc     75 01 AE 01 
36ee0     76 01 88 01 
36ee4     4A 00 46 06 
36ee8     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
36eec     08 8A 9A 86 
36ef0     33 8B 08 8A 
36ef4     2D 8A F5 89 
36ef8     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
36efc     2D 8A 2D 8A 
36f00     2E 8A 1B 8A 
36f04     40 8A 2D 8A 
36f08     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
36f0c     2E 8A 79 8A 
36f10     66 8A C8 8B 
36f14     72 82 2B 97 
36f18     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
36f1c     1D 02 05 01 
36f20     F8 01 C0 01 
36f24     0B 02 C0 01 
36f28     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
36f2c     F9 01 D3 01 
36f30     F8 01 D3 01 
36f34     F8 01 D2 01 
36f38     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
36f3c     E6 01 2B 01 
36f40     8E 02 5F 07 
36f44     F7 E2 ED 9C 
36f48     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
36f4c     E8 8A 78 8A 
36f50     78 8A 65 8A 
36f54     8B 8A 78 8A 
36f58     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
36f5c     8B 8A 9D 8A 
36f60     9D 8A 8B 8A 
36f64     C2 8A 78 8A 
36f68     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
36f6c     70 8C 18 86 
36f70     8B 8A 23 C9 
36f74     CB 03 C4 05 
36f78     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
36f7c     0B 02 7B 02 
36f80     1E 02 55 02 
36f84     30 02 43 02 
36f88     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
36f8c     43 02 44 02 
36f90     43 02 30 02 
36f94     68 02 31 02 
36f98     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
36f9c     07 08 3F F7 
36fa0     73 B2 13 85 
36fa4     15 89 ED 8B 
36fa8     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
36fac     B0 8A FB 8A 
36fb0     D5 8A FA 8A 
36fb4     E8 8A FB 8A 
36fb8     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
36fbc     E8 8A 21 8B 
36fc0     E7 8A 33 8B 
36fc4     E8 8A 26 8C 
36fc8     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
36fcc     8D B0 27 F6 
36fd0     9C 08 AD 01 
36fd4     7B 02 8D 02 
36fd8     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
36fdc     A1 02 A0 02 
36fe0     A1 02 A0 02 
36fe4     A0 02 A0 02 
36fe8     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
36fec     7B 02 D8 02 
36ff0     7B 02 C6 02 
36ff4     3E 01 C3 05 
36ff8     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
36ffc     00 8C 2A 86 
37000     E0 8C FA 8A 
37004     6A 8B FB 8A 
37008     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
3700c     45 8B 45 8B 
37010     45 8B 6B 8B 
37014     46 8B 59 8B 
37018     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
3701c     6B 8B 6B 8B 
37020     6B 8B 6B 8B 
37024     7D 8B 7D 8B 
37028     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
3702c     90 8B 91 8B 
37030     90 8B 90 8B 
37034     A3 8B A3 8B 
37038     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
3703c     B5 8B B6 8B 
37040     B5 8B B5 8B 
37044     B6 8B C8 8B 
37048     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
3704c     C8 8B DA 8B 
37050     DB 8B DB 8B 
37054     DB 8B DC 8B 
37058     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
3705c     EE 8B EE 8B 
37060     00 8C 01 8C 
37064     00 8C 01 8C 
37068     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
3706c     12 8C 13 8C 
37070     13 8C 26 8C 
37074     26 8C 26 8C 
37078     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
3707c     38 8C 38 8C 
37080     38 8C 38 8C 
37084     4B 8C 4B 8C 
37088     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
3708c     5E 8C 5E 8C 
37090     5E 8C 5E 8C 
37094     70 8C 70 8C 
37098     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
3709c     70 8C 83 8C 
370a0     83 8C 83 8C 
370a4     83 8C 96 8C 
370a8     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
370ac     95 8C A9 8C 
370b0     A9 8C A8 8C 
370b4     A8 8C A8 8C 
370b8     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
370bc     BB 8C BB 8C 
370c0     BB 8C CE 8C 
370c4     CE 8C CE 8C 
370c8     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
370cc     E0 8C E1 8C 
370d0     E1 8C E0 8C 
370d4     F4 8C F2 8C 
370d8     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
370dc     05 8D 05 8D 
370e0     06 8D 06 8D 
370e4     19 8D 19 8D 
370e8     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
370ec     18 8D 2B 8D 
370f0     2B 8D 2B 8D 
370f4     2A 8D 3E 8D 
370f8     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
370fc     3E 8D 51 8D 
37100     50 8D 50 8D 
37104     50 8D 51 8D 
37108     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
3710c     63 8D 64 8D 
37110     76 8D 75 8D 
37114     75 8D 76 8D 
37118     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
3711c     88 8D 88 8D 
37120     89 8D 9B 8D 
37124     9A 8D 9B 8D 
37128     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
3712c     AD 8D AE 8D 
37130     AD 8D AE 8D 
37134     C1 8D C1 8D 
37138     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
3713c     D3 8D D3 8D 
37140     D3 8D D3 8D 
37144     D3 8D E6 8D 
37148     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
3714c     E6 8D E6 8D 
37150     F9 8D F9 8D 
37154     F9 8D F8 8D 
37158     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
3715c     0B 8E 0B 8E 
37160     1D 8E 1D 8E 
37164     1E 8E 1E 8E 
37168     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
3716c     31 8E 31 8E 
37170     31 8E 42 8E 
37174     43 8E 43 8E 
37178     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
3717c     56 8E 56 8E 
37180     55 8E 56 8E 
37184     68 8E 69 8E 
37188     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
3718c     69 8E 7B 8E 
37190     7C 8E 7B 8E 
37194     7B 8E 8D 8E 
37198     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
3719c     8D 8E A1 8E 
371a0     A0 8E A1 8E 
371a4     A1 8E A0 8E 
371a8     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
371ac     B3 8E B3 8E 
371b0     C6 8E C5 8E 
371b4     C6 8E C6 8E 
371b8     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
371bc     D8 8E D9 8E 
371c0     D8 8E EC 8E 
371c4     EB 8E EC 8E 
371c8     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
371cc     FE 8E FE 8E 
371d0     FE 8E FE 8E 
371d4     10 8F 10 8F 
371d8     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
371dc     11 8F 23 8F 
371e0     24 8F 23 8F 
371e4     24 8F 37 8F 
371e8     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
371ec     36 8F 36 8F 
371f0     48 8F 49 8F 
371f4     49 8F 49 8F 
371f8     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
371fc     5B 8F 5C 8F 
37200     5B 8F 6E 8F 
37204     6E 8F 6E 8F 
37208     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
3720c     81 8F 81 8F 
37210     81 8F 81 8F 
37214     93 8F 93 8F 
37218     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
3721c     93 8F A6 8F 
37220     A6 8F A6 8F 
37224     A6 8F B9 8F 
37228     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
3722c     B9 8F B9 8F 
37230     CC 8F CB 8F 
37234     CB 8F CC 8F 
37238     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
3723c     DF 8F DE 8F 
37240     DE 8F F1 8F 
37244     F1 8F F1 8F 
37248     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
3724c     03 90 04 90 
37250     04 90 04 90 
37254     16 90 17 90 
37258     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
3725c     29 90 28 90 
37260     29 90 28 90 
37264     29 90 3C 90 
37268     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
3726c     3C 90 4F 90 
37270     4E 90 4E 90 
37274     4E 90 4E 90 
37278     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
3727c     61 90 61 90 
37280     73 90 74 90 
37284     74 90 74 90 
37288     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
3728c     87 90 86 90 
37290     87 90 86 90 
37294     99 90 99 90 
37298     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
3729c     AB 90 AB 90 
372a0     AC 90 AB 90 
372a4     AB 90 BF 90 
372a8     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
372ac     BE 90 D1 90 
372b0     D0 90 D1 90 
372b4     D1 90 D1 90 
372b8     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
372bc     E3 90 E4 90 
372c0     F6 90 F6 90 
372c4     F6 90 F6 90 
372c8     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
372cc     09 91 0A 91 
372d0     0A 91 1C 91 
372d4     1C 91 1C 91 
372d8     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
372dc     2F 91 2E 91 
372e0     2F 91 2F 91 
372e4     2E 91 41 91 
372e8     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
372ec     41 91 53 91 
372f0     54 91 54 91 
372f4     53 91 54 91 
372f8     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
372fc     67 91 67 91 
37300     79 91 7A 91 
37304     79 91 78 91 
37308     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
3730c     8C 91 8B 91 
37310     8C 91 8C 91 
37314     9E 91 9E 91 
37318     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
3731c     B1 91 B1 91 
37320     B2 91 B1 91 
37324     B1 91 C4 91 
37328     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
3732c     C4 91 D6 91 
37330     D7 91 D7 91 
37334     D7 91 D6 91 
37338     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
3733c     EA 91 EA 91 
37340     EA 91 FC 91 
37344     FC 91 FB 91 
37348     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
3734c     0E 92 0F 92 
37350     0F 92 0E 92 
37354     21 92 21 92 
37358     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
3735c     21 92 34 92 
37360     33 92 34 92 
37364     34 92 47 92 
37368     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
3736c     46 92 47 92 
37370     59 92 59 92 
37374     59 92 59 92 
37378     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
3737c     6C 92 6C 92 
37380     6B 92 7E 92 
37384     7E 92 7E 92 
37388     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
3738c     92 92 91 92 
37390     91 92 90 92 
37394     91 92 A4 92 
37398     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
3739c     A3 92 B6 92 
373a0     B6 92 B7 92 
373a4     B7 92 B6 92 
373a8     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
373ac     CA 92 C9 92 
373b0     CA 92 DC 92 
373b4     DC 92 DC 92 
373b8     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
373bc     EF 92 EF 92 
373c0     EF 92 EF 92 
373c4     01 93 01 93 
373c8     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
373cc     15 93 14 93 
373d0     14 93 14 93 
373d4     14 93 27 93 
373d8     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
373dc     27 93 39 93 
373e0     3A 93 39 93 
373e4     39 93 39 93 
373e8     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
373ec     4B 93 4C 93 
373f0     5F 93 5F 93 
373f4     5F 93 5E 93 
373f8     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
373fc     5F 93 84 93 
37400     4C 93 96 93 
37404     5F 93 AE 94 
37408     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
3740c     7B C1 00 00 
37410     00 00 00 00 
37414     00 00 00 00 
37418     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3741c     00 00 00 00 | 	byte	$00, $00, $00, $00
37420     7A D7 00 80 
37424     87 8A 48 8F 
37428     EC 8C 76 8D 
3742c     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
37430     3C 8D 82 8D 
37434     42 8D 88 8D 
37438     8C 8D 8E 8D 
3743c     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
37440     97 8D DE 8D 
37444     E1 8D F1 8E 
37448     D8 8C A3 83 
3744c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
37450     65 71 C9 65 
37454     FC 64 C4 65 
37458     C1 65 BF 65 
3745c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
37460     B6 65 B4 65 
37464     B2 65 AE 65 
37468     AC 65 ED 65 
3746c     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
37470     5E 65 25 66 
37474     FA 62 23 6B 
37478     B5 6C 61 0A 
3747c     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
37480     5D 90 BE 8D 
37484     47 8E C3 8D 
37488     09 8E C9 8D 
3748c     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
37490     15 8E 19 8E 
37494     1B 8E 62 8E 
37498     64 8E 68 8E 
3749c     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
374a0     B5 8E 4C 90 
374a4     FA 84 3C 9D 
374a8     98 13 79 6D 
374ac     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
374b0     D9 66 50 66 
374b4     D4 66 4B 66 
374b8     8C 66 46 66 
374bc     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
374c0     81 66 3A 66 
374c4     7C 66 36 66 
374c8     76 66 30 66 
374cc     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
374d0     6B 66 88 72 
374d4     BF 37 E7 B7 
374d8     75 83 8B 8E 
374dc     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
374e0     94 8E 96 8E 
374e4     DD 8E 9C 8E 
374e8     E2 8E A2 8E 
374ec     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
374f0     EE 8E AE 8E 
374f4     38 8F B5 8E 
374f8     3F 8F FD 8E 
374fc     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
37500     A5 87 1E E3 
37504     6D 5D FA 71 
37508     41 64 25 67 
3750c     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
37510     D9 66 1A 67 
37514     18 67 15 67 
37518     12 67 0F 67 
3751c     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
37520     07 67 C0 66 
37524     01 67 BC 66 
37528     B8 66 DE 64 
3752c     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
37530     43 E5 1F 8B 
37534     14 8A F1 90 
37538     1C 8F 63 8F 
3753c     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
37540     29 8F 6E 8F 
37544     72 8F 75 8F 
37548     34 8F BE 8F 
3754c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
37550     84 8F 87 8F 
37554     CC 8F 56 90 
37558     67 91 49 80 
3755c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
37560     46 77 A6 66 
37564     E8 66 B0 67 
37568     AD 67 ED 67 
3756c     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
37570     A2 67 E3 67 
37574     9D 67 9A 67 
37578     98 67 94 67 
3757c     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
37580     49 67 CD 67 
37584     28 65 5F 6E 
37588     82 67 3A 01 
3758c     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
37590     C2 91 A9 8F 
37594     EF 8F AE 8F 
37598     F4 8F B5 8F 
3759c     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
375a0     01 90 03 90 
375a4     07 90 09 90 
375a8     0C 90 53 90 
375ac     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
375b0     18 90 44 93 
375b4     85 84 D6 9D 
375b8     87 1F 2F 75 
375bc     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
375c0     C4 68 F6 67 
375c4     BE 68 F1 67 
375c8     76 68 2E 68 
375cc     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
375d0     27 68 24 68 
375d4     64 68 1E 68 
375d8     5F 68 19 68 
375dc     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
375e0     DC 68 56 72 
375e4     7E 36 C2 B8 
375e8     D7 84 73 90 
375ec     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
375f0     7B 90 7F 90 
375f4     82 90 84 90 
375f8     CB 90 8B 90 
375fc     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
37600     D7 90 96 90 
37604     20 91 59 90 
37608     25 91 A2 90 
3760c     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
37610     D0 89 40 EE 
37614     12 64 C4 71 
37618     29 66 0C 69 
3761c     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
37620     C0 68 02 69 
37624     FE 68 FB 68 
37628     F9 68 F6 68 
3762c     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
37630     EE 68 A8 68 
37634     2C 69 5F 68 
37638     E2 68 81 66 
3763c     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
37640     1E EB A6 8A 
37644     73 8B 5E 93 
37648     7B 90 48 91 
3764c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
37650     0D 91 11 91 
37654     14 91 16 91 
37658     5C 91 1C 91 
3765c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
37660     68 91 AF 91 
37664     2A 91 B5 91 
37668     75 91 1A 94 
3766c     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
37670     70 0E CB 6C 
37674     5D 6E C4 67 
37678     99 69 54 69 
3767c     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
37680     D2 69 49 69 
37684     89 69 86 69 
37688     40 69 C4 69 
3768c     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
37690     35 69 76 69 
37694     58 67 EB 6D 
37698     E9 6D 89 0F 
3769c     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
376a0     33 94 94 91 
376a4     D9 91 56 91 
376a8     E0 91 9F 91 
376ac     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
376b0     EC 91 EE 91 
376b4     F1 91 F4 91 
376b8     F7 91 3D 92 
376bc     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
376c0     46 92 21 94 
376c4     11 89 A4 9D 
376c8     FD 0E 8F 6C 
376cc     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
376d0     28 6A E1 69 
376d4     65 6A 1F 6A 
376d8     5F 6A 1A 6A 
376dc     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
376e0     54 6A 0F 6A 
376e4     4F 6A 09 6A 
376e8     06 6A 03 6A 
376ec     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
376f0     23 68 69 77 
376f4     3A 4D 38 CA 
376f8     38 86 4E 91 
376fc     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
37700     64 92 24 92 
37704     6A 92 2A 92 
37708     70 92 30 92 
3770c     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
37710     7B 92 7E 92 
37714     C5 92 84 92 
37718     CB 92 8A 92 
3771c     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
37720     4D 8D F9 E2 
37724     97 59 FE 74 
37728     DB 68 6D 6A 
3772c     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
37730     A8 6A A5 6A 
37734     A3 6A 9F 6A 
37738     9D 6A 9B 6A 
3773c     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
37740     D6 6A 8F 6A 
37744     CF 6A 46 6A 
37748     CA 6A E1 67 
3774c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
37750     D3 F7 15 92 
37754     90 8C BF 94 
37758     A6 92 EB 92 
3775c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
37760     B1 92 F7 92 
37764     FA 92 FD 92 
37768     00 93 02 93 
3776c     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
37770     4F 93 52 93 
37774     54 93 22 94 
37778     5A 93 8F 88 
3777c     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
37780     1C 77 07 6C 
37784     E8 69 7A 6B 
37788     34 6B 75 6B 
3778c     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
37790     29 6B 26 6B 
37794     24 6B 21 6B 
37798     1D 6B 5E 6B 
3779c     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
377a0     12 6B 52 6B 
377a4     34 69 34 6E 
377a8     BA 73 A4 24 
377ac     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
377b0     7A 94 B3 93 
377b4     72 93 31 93 
377b8     78 93 7A 93 
377bc     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
377c0     83 93 86 93 
377c4     89 93 D0 93 
377c8     D2 93 D5 93 
377cc     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
377d0     DD 93 40 96 
377d4     30 8B 99 9C 
377d8     52 10 94 71 
377dc     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
377e0     46 6C 79 6B 
377e4     40 6C B7 6B 
377e8     F7 6B B1 6B 
377ec     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
377f0     EC 6B A5 6B 
377f4     A2 6B 9F 6B 
377f8     9D 6B 9A 6B 
377fc     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
37800     C8 6A E4 76 
37804     20 4B F9 CE 
37808     2E 8A 1A 92 
3780c     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
37810     FB 93 BA 93 
37814     01 94 03 94 
37818     4A 94 09 94 
3781c     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
37820     55 94 14 94 
37824     9E 94 1A 94 
37828     61 94 20 94 
3782c     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
37830     3E 87 E5 CD 
37834     5F 50 6C 78 
37838     B5 6A 04 6C 
3783c     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
37840     83 6C 7F 6C 
37844     7C 6C 36 6C 
37848     76 6C 74 6C 
3784c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
37850     6B 6C 25 6C 
37854     66 6C 1F 6C 
37858     1D 6C 41 6A 
3785c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
37860     BA FA FC 94 
37864     5B 8D 97 96 
37868     3B 94 C5 94 
3786c     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
37870     89 94 8C 94 
37874     8F 94 92 94 
37878     94 94 DB 94 
3787c     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
37880     E4 94 E7 94 
37884     2D 95 74 95 
37888     C8 96 15 89 
3788c     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
37890     CB 75 31 6F 
37894     7E 6B 10 6D 
37898     C9 6C 0A 6D 
3789c     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
378a0     BD 6C FF 6C 
378a4     FB 6C F9 6C 
378a8     B2 6C F3 6C 
378ac     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
378b0     A7 6C E8 6C 
378b4     0D 6B 85 6F 
378b8     C7 74 10 28 
378bc     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
378c0     96 96 47 95 
378c4     06 95 0A 95 
378c8     0C 95 0F 95 
378cc     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
378d0     17 95 5E 95 
378d4     61 95 63 95 
378d8     22 95 AC 95 
378dc     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
378e0     72 95 17 98 
378e4     59 8E 01 96 
378e8     CF FC 5A 68 
378ec     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
378f0     96 6D 50 6D 
378f4     D5 6D 4A 6D 
378f8     8C 6D 89 6D 
378fc     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
37900     80 6D 3A 6D 
37904     7A 6D 77 6D 
37908     75 6D 71 6D 
3790c     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
37910     18 6C BC 78 
37914     9A 4F 7E CF 
37918     1F 89 F1 93 
3791c     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
37920     D2 95 4E 95 
37924     D7 95 53 95 
37928     DD 95 E0 95 
3792c     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
37930     A5 95 EB 95 
37934     EE 95 F0 95 
37938     37 96 B3 95 
3793c     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
37940     1A 98 D5 8D 
37944     C5 9F CD 0F 
37948     0F 71 F3 73 
3794c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
37950     D9 6D 5E 6E 
37954     D3 6D 58 6E 
37958     12 6E 0F 6E 
3795c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
37960     49 6E BF 6D 
37964     87 6E 76 6D 
37968     81 6E 11 6B 
3796c     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
37970     3F 09 44 95 
37974     E5 8D 3F 99 
37978     D4 95 A2 96 
3797c     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
37980     23 96 69 96 
37984     6B 96 6E 96 
37988     71 96 74 96 
3798c     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
37990     BF 96 3C 96 
37994     C6 96 C8 96 
37998     A3 98 51 8D 
3799c     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
379a0     CF 75 29 73 
379a4     90 6C EC 6E 
379a8     62 6E E7 6E 
379ac     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
379b0     9A 6E 98 6E 
379b4     95 6E 91 6E 
379b8     8E 6E CF 6E 
379bc     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
379c0     40 6E C3 6E 
379c4     E8 6C 45 6F 
379c8     A5 7B C9 35 
379cc     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
379d0     2D 98 23 97 
379d4     E1 96 A0 96 
379d8     A4 96 EA 96 
379dc     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
379e0     AF 96 F4 96 
379e4     F8 96 3E 97 
379e8     FD 96 43 97 
379ec     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
379f0     08 97 6B 99 
379f4     D6 92 88 91 
379f8     D8 EE 84 66 
379fc     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
37a00     2E 6F E7 6E 
37a04     6C 6F 24 6F 
37a08     21 6F 1F 6F 
37a0c     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
37a10     17 6F 13 6F 
37a14     54 6F 0E 6F 
37a18     0B 6F 4B 6F 
37a1c     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
37a20     27 6D 1C 7B 
37a24     19 59 9F DB 
37a28     66 8E BC 94 
37a2c     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
37a30     67 97 26 97 
37a34     6D 97 2B 97 
37a38     72 97 32 97 
37a3c     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
37a40     C1 97 7F 97 
37a44     C6 97 85 97 
37a48     CB 97 CE 97 
37a4c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
37a50     EC 8A C4 C6 
37a54     68 4C F4 7D 
37a58     63 6E E8 6E 
37a5c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
37a60     ED 6F A7 6F 
37a64     E7 6F A0 6F 
37a68     E1 6F 9B 6F 
37a6c     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
37a70     D5 6F 8F 6F 
37a74     CE 6F 45 6F 
37a78     86 6F 68 6D 
37a7c     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
37a80     C0 13 AD A2 
37a84     A7 8E 79 99 
37a88     E6 97 E8 97 
37a8c     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
37a90     F1 97 F3 97 
37a94     F6 97 F9 97 
37a98     FB 97 FE 97 
37a9c     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
37aa0     4A 98 0A 98 
37aa4     93 98 0F 98 
37aa8     7F 9B BF 8C 
37aac     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
37ab0     91 7B 62 73 
37ab4     1A 6E B9 70 
37ab8     EB 6F B3 70 
37abc     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
37ac0     25 70 20 70 
37ac4     1E 70 1B 70 
37ac8     18 70 15 70 
37acc     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
37ad0     0D 70 09 70 
37ad4     07 70 03 70 
37ad8     01 70 FD 6F 
37adc     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
37ae0     F6 6F F2 6F 
37ae4     EF 6F EC 6F 
37ae8     2C 70 E6 6F 
37aec     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
37af0     DD 6F 97 6F 
37af4     D7 6F 84 6E 
37af8     8F 6F 3F 7D 
37afc     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
37afe     FF FF FF FF 
37b02     FF FF       | atarist_spl file "atarist.spl" '512
37b04     00 00 00 00 
37b08     00 00 00 00 
37b0c     00 00       | 	byte	$00[10]
37b0e     17 7F F2 7F 
37b12     B2 7F 72 7F 
37b16     33 7F F4 7E 
37b1a     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
37b1e     36 7E F5 7D 
37b22     E9 51 F2 0D 
37b26     8E 00 F3 FD 
37b2a     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
37b2e     57 FD 58 FD 
37b32     5B FD 5C FD 
37b36     5C FD 60 7D 
37b3a     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
37b3e     D6 7C 98 7C 
37b42     59 7C 1A 7C 
37b46     DC 7B 9E 7B 
37b4a     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
37b4e     F3 05 00 FD 
37b52     41 FB EA FA 
37b56     D9 FA DB FA 
37b5a     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
37b5e     E4 FA 9B 36 
37b62     F8 7A C0 7A 
37b66     84 7A 45 7A 
37b6a     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
37b6e     8E 79 51 79 
37b72     15 79 D7 78 
37b76     3C 1F EB FF 
37b7a     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
37b7e     6D F8 65 F8 
37b82     68 F8 6D F8 
37b86     70 F8 74 F8 
37b8a     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
37b8e     AB 60 79 60 
37b92     4B 60 1A 60 
37b96     E9 5F B9 5F 
37b9a     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
37b9e     FB 59 B2 0B 
37ba2     92 FA 3A F7 
37ba6     96 F6 79 F6 
37baa     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
37bae     82 F6 86 F6 
37bb2     8C F6 DB 5D 
37bb6     F1 5E C1 5E 
37bba     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
37bbe     34 5E 04 5E 
37bc2     D6 5D A6 5D 
37bc6     78 5D D4 3E 
37bca     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
37bce     27 F5 BA F4 
37bd2     AB F4 AD F4 
37bd6     B2 F4 B8 F4 
37bda     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
37bde     26 5D 2B 5D 
37be2     FC 5C CD 5C 
37be6     9F 5C 70 5C 
37bea     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
37bee     E5 5B B8 5B 
37bf2     DB 24 A7 FC 
37bf6     D1 F4 4D F3 
37bfa     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
37bfe     04 F3 0B F3 
37c02     11 F3 16 F3 
37c06     DE 18 98 5B 
37c0a     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
37c0e     4E 4A 29 48 
37c12     A0 47 6A 47 
37c16     43 47 20 47 
37c1a     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
37c1e     E2 F6 98 F2 
37c22     C5 F1 A3 F1 
37c26     A3 F1 A8 F1 
37c2a     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
37c2e     BF F1 00 3D 
37c32     EF 46 CD 46 
37c36     AA 46 86 46 
37c3a     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
37c3e     1C 46 F9 45 
37c42     D7 45 EE 43 
37c46     DE 02 E8 F3 
37c4a     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
37c4e     61 F0 65 F0 
37c52     6D F0 74 F0 
37c56     7C F0 84 F0 
37c5a     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
37c5e     8E 45 6D 45 
37c62     49 45 27 45 
37c66     05 45 E1 44 
37c6a     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
37c6e     F1 2F A9 FB 
37c72     8B F1 9B EF 
37c76     40 EF 36 EF 
37c7a     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
37c7e     4D EF 56 EF 
37c82     5E EF 7B 44 
37c86     8C 44 69 44 
37c8a     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
37c8e     03 44 E1 43 
37c92     C0 43 F5 37 
37c96     69 33 0F 11 
37c9a     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
37c9e     66 EE 37 EE 
37ca2     38 EE 40 EE 
37ca6     48 EE 51 EE 
37caa     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
37cae     7D 32 6A 32 
37cb2     51 32 37 32 
37cb6     1F 32 05 32 
37cba     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
37cbe     B9 31 A1 31 
37cc2     F1 04 F4 F1 
37cc6     50 EE A0 ED 
37cca     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
37cce     93 ED 9A ED 
37cd2     A4 ED AD ED 
37cd6     F4 27 C1 31 
37cda     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
37cde     78 31 5F 31 
37ce2     46 31 2E 31 
37ce6     15 31 FC 30 
37cea     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
37cee     C4 EF 4A ED 
37cf2     DC EC CB EC 
37cf6     D2 EC DA EC 
37cfa     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
37cfe     F9 EC 64 2F 
37d02     0A 31 F1 30 
37d06     D9 30 C0 30 
37d0a     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
37d0e     78 30 5F 30 
37d12     46 30 38 23 
37d16     A6 F6 19 EE 
37d1a     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
37d1e     20 EC 28 EC 
37d22     32 EC 3C EC 
37d26     47 EC 51 EC 
37d2a     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
37d2e     A3 22 93 22 
37d32     7F 22 6E 22 
37d36     5D 22 4C 22 
37d3a     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
37d3e     77 09 76 F1 
37d42     CC EC F0 EB 
37d46     CD EB CE EB 
37d4a     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
37d4e     ED EB F5 EB 
37d52     3E F6 6B 22 
37d56     5F 22 4E 22 
37d5a     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
37d5e     1B 22 0B 22 
37d62     FA 21 E9 21 
37d66     D8 21 4D FF 
37d6a     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
37d6e     92 EB 7B EB 
37d72     82 EB 8C EB 
37d76     97 EB A1 EB 
37d7a     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
37d7e     15 22 04 22 
37d82     F3 21 E3 21 
37d86     D2 21 C0 21 
37d8a     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
37d8e     8E 21 7D 21 
37d92     9A F8 A4 ED 
37d96     8E EB 2F EB 
37d9a     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
37d9e     37 EB 42 EB 
37da2     4C EB 57 EB 
37da6     B2 17 22 19 
37daa     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
37dae     FD 18 EF 18 
37db2     E3 18 D6 18 
37db6     CA 18 BD 18 
37dba     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
37dbe     60 EC 35 EB 
37dc2     01 EB 01 EB 
37dc6     0C EB 16 EB 
37dca     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
37dce     34 EB D0 18 
37dd2     00 19 F4 18 
37dd6     E8 18 DA 18 
37dda     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
37dde     B6 18 A9 18 
37de2     9D 18 91 05 
37de6     F0 EF CA EB 
37dea     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
37dee     E8 EA F2 EA 
37df2     FE EA 07 EB 
37df6     12 EB C2 EF 
37dfa     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
37dfe     D9 18 CD 18 
37e02     C0 18 B3 18 
37e06     A7 18 9B 18 
37e0a     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
37e0e     B8 FC 30 EE 
37e12     61 EB DC EA 
37e16     CD EA D2 EA 
37e1a     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
37e1e     F3 EA FE EA 
37e22     D2 09 D1 18 
37e26     C3 18 17 18 
37e2a     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
37e2e     66 11 52 11 
37e32     49 11 41 11 
37e36     38 11 E0 F4 
37e3a     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
37e3e     C9 EA C5 EA 
37e42     CF EA DB EA 
37e46     E6 EA EF EA 
37e4a     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
37e4e     89 11 80 11 
37e52     78 11 6E 11 
37e56     67 11 5D 11 
37e5a     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
37e5e     43 11 32 0D 
37e62     9C F1 07 EC 
37e66     F8 EA CD EA 
37e6a     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
37e6e     E4 EA ED EA 
37e72     F8 EA 02 EB 
37e76     55 11 91 11 
37e7a     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
37e7e     75 11 6E 11 
37e82     64 11 5E 11 
37e86     54 11 4A 11 
37e8a     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
37e8e     A8 EB F1 EA 
37e92     D9 EA DC EA 
37e96     E8 EA F1 EA 
37e9a     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
37e9e     A6 EB 9E 11 
37ea2     A0 11 96 11 
37ea6     8D 11 85 11 
37eaa     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
37eae     6A 11 CA 0D 
37eb2     36 0B 57 F8 
37eb6     6C ED 57 EB 
37eba     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
37ebe     F4 EA FF EA 
37ec2     09 EB 15 EB 
37ec6     1E EB 1A FD 
37eca     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
37ece     ED 0A E8 0A 
37ed2     E2 0A DC 0A 
37ed6     D6 0A D1 0A 
37eda     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
37ede     F8 F3 BC EC 
37ee2     57 EB 1E EB 
37ee6     18 EB 24 EB 
37eea     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
37eee     42 EB 4D EB 
37ef2     08 09 20 0B 
37ef6     1A 0B 14 0B 
37efa     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
37efe     04 0B FE 0A 
37f02     F9 0A F2 0A 
37f06     84 08 3A F1 
37f0a     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
37f0e     42 EB 42 EB 
37f12     4E EB 57 EB 
37f16     62 EB 6B EB 
37f1a     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
37f1e     48 0B 43 0B 
37f22     3C 0B 36 0B 
37f26     31 0B 2C 0B 
37f2a     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
37f2e     1B 0B 5C 00 
37f32     6A EF 1B EC 
37f36     81 EB 6A EB 
37f3a     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
37f3e     85 EB 8E EB 
37f42     99 EB A3 EB 
37f46     DD 05 E5 05 
37f4a     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
37f4e     DB 05 D8 05 
37f52     D5 05 D1 05 
37f56     D0 05 CB 05 
37f5a     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
37f5e     0C EC BB EB 
37f62     B3 EB BB EB 
37f66     C5 EB D0 EB 
37f6a     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
37f6e     E4 F7 2C 06 
37f72     28 06 24 06 
37f76     22 06 1F 06 
37f7a     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
37f7e     16 06 14 06 
37f82     0F 06 D0 F3 
37f86     65 ED 2D EC 
37f8a     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
37f8e     01 EC 0A EC 
37f92     14 EC 1E EC 
37f96     29 EC FB 03 
37f9a     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
37f9e     63 06 60 06 
37fa2     5E 06 59 06 
37fa6     58 06 54 06 
37faa     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
37fae     69 F1 21 ED 
37fb2     55 EC 33 EC 
37fb6     36 EC 40 EC 
37fba     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
37fbe     5C EC 68 EC 
37fc2     92 02 D9 02 
37fc6     D7 02 D7 02 
37fca     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
37fce     D1 02 D1 02 
37fd2     CE 02 CD 02 
37fd6     5D FC 80 EF 
37fda     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
37fde     83 EC 8A EC 
37fe2     93 EC 9C EC 
37fe6     A5 EC B1 EC 
37fea     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
37fee     2B 03 2A 03 
37ff2     29 03 26 03 
37ff6     25 03 24 03 
37ffa     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
37ffe     1F 03 70 F7 
38002     D0 EE 27 ED 
38006     DB EC D4 EC 
3800a     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3800e     F0 EC FA EC 
38012     02 ED F9 F4 
38016     7B 03 7C 03 
3801a     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
3801e     75 03 73 03 
38022     72 03 70 03 
38026     6D 03 6C 03 
3802a     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
3802e     54 ED 22 ED 
38032     22 ED 2C ED 
38036     35 ED 3F ED 
3803a     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
3803e     14 01 C3 03 
38042     C1 03 C0 03 
38046     5F 01 A5 00 
3804a     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
3804e     7B 00 7C 00 
38052     20 00 85 F1 
38056     2A EE 89 ED 
3805a     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
3805e     80 ED 87 ED 
38062     90 ED 9A ED 
38066     A3 ED 73 00 
3806a     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
3806e     D0 00 D0 00 
38072     D0 00 D0 00 
38076     D0 00 CF 00 
3807a     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
3807e     80 F0 3D EE 
38082     D5 ED C7 ED 
38086     CD ED D6 ED 
3808a     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
3808e     F2 ED FA ED 
38092     1D 01 29 01 
38096     27 01 27 01 
3809a     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
3809e     25 01 26 01 
380a2     26 01 23 01 
380a6     D0 F7 EC EF 
380aa     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
380ae     1C EE 24 EE 
380b2     2D EE 37 EE 
380b6     40 EE 47 EE 
380ba     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
380be     7D 01 7B 01 
380c2     7A 01 7A 01 
380c6     79 01 78 01 
380ca     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
380ce     84 FE DE F3 
380d2     6C EF 93 EE 
380d6     72 EE 72 EE 
380da     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
380de     8B EE 95 EE 
380e2     9E EE 15 FC 
380e6     67 FE 67 FE 
380ea     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
380ee     6B FE 6B FE 
380f2     6D FE 6D FE 
380f6     6D FE 6F FE 
380fa     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
380fe     DF EE CC EE 
38102     CF EE D9 EE 
38106     E1 EE EA EE 
3810a     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3810e     5A FE C4 FE 
38112     C3 FE C5 FE 
38116     C6 FE C6 FE 
3811a     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
3811e     C8 FE C7 FE 
38122     DA FB 85 F1 
38126     8D EF 31 EF 
3812a     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
3812e     34 EF 3E EF 
38132     46 EF 4F EF 
38136     57 EF 0D FF 
3813a     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
3813e     1F FF 1F FF 
38142     21 FF 21 FF 
38146     21 FF 21 FF 
3814a     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
3814e     15 F1 BE EF 
38152     84 EF 7E EF 
38156     88 EF 8F EF 
3815a     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
3815e     A9 EF 06 F2 
38162     A6 FC AB FC 
38166     AD FC AE FC 
3816a     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
3816e     B2 FC B4 FC 
38172     B6 FC B7 FC 
38176     8B F4 BD F0 
3817a     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
3817e     E4 EF EE EF 
38182     F6 EF FD EF 
38186     04 F0 0E F0 
3818a     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
3818e     0B FD 0D FD 
38192     0F FD 11 FD 
38196     11 FD 13 FD 
3819a     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
3819e     17 FD 64 F3 
381a2     CD F0 52 F0 
381a6     41 F0 45 F0 
381aa     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
381ae     5B F0 64 F0 
381b2     6D F0 FB FC 
381b6     65 FD 68 FD 
381ba     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
381be     6C FD 6D FD 
381c2     6F FD 70 FD 
381c6     72 FD B3 FB 
381ca     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
381ce     A4 F0 99 F0 
381d2     A0 F0 A8 F0 
381d6     AE F0 B9 F0 
381da     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
381de     CB FB DD FB 
381e2     DE FB E0 FB 
381e6     E3 FB E3 FB 
381ea     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
381ee     E9 FB EC FB 
381f2     62 F7 27 F2 
381f6     2A F1 FF F0 
381fa     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
381fe     0C F1 13 F1 
38202     1B F1 23 F1 
38206     33 F2 3C FC 
3820a     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
3820e     42 FC 45 FC 
38212     47 FC 48 FC 
38216     4A FC 4C FC 
3821a     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
3821e     20 F2 77 F1 
38222     5C F1 5F F1 
38226     64 F1 6C F1 
3822a     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
3822e     83 F1 DC F8 
38232     9A FC 9A FC 
38236     9B FC 9E FC 
3823a     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
3823e     A3 FC A4 FC 
38242     A6 FC A9 FC 
38246     90 F4 33 F2 
3824a     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
3824e     BA F1 BF F1 
38252     C7 F1 CE F1 
38256     D6 F1 DC F1 
3825a     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
3825e     F3 FC F5 FC 
38262     FE FB 79 FB 
38266     62 FB 5F FB 
3826a     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
3826e     6F FA AF F3 
38272     53 F2 12 F2 
38276     0F F2 15 F2 
3827a     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
3827e     2A F2 32 F2 
38282     38 F2 9A FB 
38286     AF FB B1 FB 
3828a     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3828e     B7 FB B8 FB 
38292     BA FB BC FB 
38296     C1 FB 3B F8 
3829a     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
3829e     6E F2 6C F2 
382a2     74 F2 7A F2 
382a6     81 F2 87 F2 
382aa     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
382ae     06 FC 09 FC 
382b2     0C FC 0E FC 
382b6     0F FC 12 FC 
382ba     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
382be     17 FC 1A FC 
382c2     B2 F6 7B F3 
382c6     DD F2 C5 F2 
382ca     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
382ce     D4 F2 DB F2 
382d2     E0 F2 E8 F2 
382d6     28 F8 60 FC 
382da     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
382de     64 FC 66 FC 
382e2     68 FC 6A FC 
382e6     6D FC 52 FC 
382ea     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
382ee     78 F3 24 F3 
382f2     1A F3 1E F3 
382f6     24 F3 2A F3 
382fa     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
382fe     3D F3 80 FA 
38302     0C FB 0F FB 
38306     10 FB 14 FB 
3830a     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
3830e     1B FB 1D FB 
38312     1F FB 92 FA 
38316     DE F4 AE F3 
3831a     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3831e     79 F3 7E F3 
38322     84 F3 8C F3 
38326     92 F3 97 F3 
3832a     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3832e     67 FB 69 FB 
38332     6B FB 6F FB 
38336     71 FB 72 FB 
3833a     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3833e     E3 F8 BA F4 
38342     EE F3 CC F3 
38346     CA F3 CF F3 
3834a     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3834e     E2 F3 E8 F3 
38352     ED F3 B7 FB 
38356     BC FB BE FB 
3835a     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3835e     C4 FB C6 FB 
38362     C8 FB C9 FB 
38366     CC FB 8F F7 
3836a     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
3836e     1E F4 1E F4 
38372     24 F4 2A F4 
38376     30 F4 38 F4 
3837a     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
3837e     AD FA B1 FA 
38382     B4 FA B6 FA 
38386     BA FA BB FA 
3838a     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
3838e     C2 FA C6 FA 
38392     55 F6 C6 F4 
38396     7D F4 72 F4 
3839a     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
3839e     83 F4 89 F4 
383a2     8F F4 94 F4 
383a6     66 FA 03 FB 
383aa     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
383ae     0A FB 0E FB 
383b2     10 FB 11 FB 
383b6     16 FB 18 FB 
383ba     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
383be     F9 F4 CA F4 
383c2     C5 F4 CB F4 
383c6     D1 F4 D7 F4 
383ca     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
383ce     E8 F4 3F FB 
383d2     56 FB 58 FB 
383d6     5A FB 5E FB 
383da     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
383de     64 FB 64 FB 
383e2     69 FB 99 F9 
383e6     E9 F5 33 F5 
383ea     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
383ee     1D F5 22 F5 
383f2     27 F5 2E F5 
383f6     32 F5 37 F5 
383fa     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
383fe     BC FA BC FA 
38402     C1 FA C2 FA 
38406     C4 FA C8 FA 
3840a     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
3840e     F9 F7 DB F5 
38412     78 F5 69 F5 
38416     6A F5 70 F5 
3841a     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
3841e     7F F5 85 F5 
38422     6E F7 06 FB 
38426     0A FB 0B FB 
3842a     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
3842e     14 FB 15 FB 
38432     18 FB 1B FB 
38436     1D FB 70 F7 
3843a     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
3843e     B6 F5 BB F5 
38442     C0 F5 C6 F5 
38446     CA F5 CF F5 
3844a     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
3844e     54 FB 56 FB 
38452     5A FB 5B FB 
38456     5E FB 5F FB 
3845a     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
3845e     67 FB 52 FB 
38462     29 F7 33 F6 
38466     06 F6 02 F6 
3846a     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
3846e     10 F6 16 F6 
38472     1A F6 1F F6 
38476     81 FB 9F FB 
3847a     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
3847e     51 FB F2 FA 
38482     E3 FA E3 FA 
38486     E5 FA E9 FA 
3848a     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
3848e     64 F6 4D F6 
38492     4D F6 53 F6 
38496     57 F6 5C F6 
3849a     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
3849e     6A F6 19 FB 
384a2     1E FB 22 FB 
384a6     23 FB 24 FB 
384aa     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
384ae     2C FB 2E FB 
384b2     32 FB F0 F8 
384b6     01 F7 A5 F6 
384ba     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
384be     9F F6 A3 F6 
384c2     A6 F6 AC F6 
384c6     B0 F6 EB F7 
384ca     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
384ce     68 FB 6C FB 
384d2     6E FB 71 FB 
384d6     72 FB 74 FB 
384da     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
384de     71 F8 21 F7 
384e2     E5 F6 DD F6 
384e6     E1 F6 E6 F6 
384ea     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
384ee     F5 F6 F7 F6 
384f2     F7 FA AB FB 
384f6     AD FB AF FB 
384fa     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
384fe     B6 FB B9 FB 
38502     BB FB BC FB 
38506     21 FB 07 F8 
3850a     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
3850e     22 F7 26 F7 
38512     2B F7 2E F7 
38516     34 F7 38 F7 
3851a     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
3851e     13 FB 16 FB 
38522     17 FB 1B FB 
38526     1E FB 20 FB 
3852a     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
3852e     26 FB 77 FA 
38532     F3 F7 7C F7 
38536     67 F7 6A F7 
3853a     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
3853e     74 F7 7A F7 
38542     7E F7 82 F7 
38546     53 FB 5A FB 
3854a     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
3854e     5F FB 63 FB 
38552     65 FB 67 FB 
38556     69 FB 6A FB 
3855a     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
3855e     B5 F7 A9 F7 
38562     AD F7 B0 F7 
38566     B5 F7 B8 F7 
3856a     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
3856e     6E F8 99 FB 
38572     9C FB 9D FB 
38576     9F FB A4 FB 
3857a     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
3857e     A9 FB AB FB 
38582     AD FB 46 F9 
38586     26 F8 F0 F7 
3858a     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
3858e     F4 F7 F8 F7 
38592     FB F7 FF F7 
38596     03 F8 65 FA 
3859a     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
3859e     2B FB 2F FB 
385a2     30 FB 32 FB 
385a6     34 FB 38 FB 
385aa     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
385ae     E9 F8 4A F8 
385b2     2E F8 2C F8 
385b6     2F F8 36 F8 
385ba     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
385be     41 F8 44 F8 
385c2     4A FB 67 FB 
385c6     68 FB 6B FB 
385ca     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
385ce     73 FB 74 FB 
385d2     78 FB 7A FB 
385d6     14 FB E7 F8 
385da     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
385de     6D F8 70 F8 
385e2     73 F8 78 F8 
385e6     7C F8 80 F8 
385ea     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
385ee     A6 FB A7 FB 
385f2     A9 FB AC FB 
385f6     AF FB B1 FB 
385fa     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
385fe     B7 FB 73 FA 
38602     F8 F8 B4 F8 
38606     A9 F8 AB F8 
3860a     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
3860e     B4 F8 B8 F8 
38612     BB F8 FA F8 
38616     64 FB 65 FB 
3861a     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
3861e     6D FB 6F FB 
38622     70 FB 74 FB 
38626     77 FB 77 FB 
3862a     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
3862e     E9 F8 E4 F8 
38632     E8 F8 EB F8 
38636     EE F8 F2 F8 
3863a     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
3863e     B5 FA 9F FB 
38642     A1 FB A4 FB 
38646     A5 FB A9 FB 
3864a     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
3864e     AE FB B1 FB 
38652     B2 FB C7 F9 
38656     39 F9 22 F9 
3865a     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
3865e     26 F9 2A F9 
38662     2E F9 32 F9 
38666     33 F9 BA FB 
3866a     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
3866e     DE FB E1 FB 
38672     E2 FB E4 FB 
38676     E5 FB E7 FB 
3867a     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
3867e     C5 F9 67 F9 
38682     57 F9 56 F9 
38686     5B F9 5F F9 
3868a     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
3868e     68 F9 6C F9 
38692     0B FC 11 FC 
38696     14 FC 15 FC 
3869a     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
3869e     B5 FB B5 FB 
386a2     B6 FB B8 FB 
386a6     E9 FA C8 F9 
386aa     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
386ae     90 F9 94 F9 
386b2     95 F9 99 F9 
386b6     9D F9 9F F9 
386ba     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
386be     DE FB DF FB 
386c2     E2 FB E4 FB 
386c6     E6 FB E8 FB 
386ca     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
386ce     EF FB AC FA 
386d2     E9 F9 C7 F9 
386d6     C3 F9 C8 F9 
386da     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
386de     D0 F9 D4 F9 
386e2     D6 F9 0E FB 
386e6     11 FC 13 FC 
386ea     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
386ee     19 FC 1B FC 
386f2     1D FC 1E FC 
386f6     21 FC 22 FC 
386fa     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
386fe     F7 F9 F7 F9 
38702     FB F9 FE F9 
38706     00 FA 03 FA 
3870a     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
3870e     1B FC 45 FC 
38712     46 FC 48 FC 
38716     4A FC 4B FC 
3871a     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
3871e     52 FC 54 FC 
38722     F3 FB 82 FA 
38726     35 FA 28 FA 
3872a     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
3872e     31 FA 32 FA 
38732     37 FA 37 FA 
38736     3C FA 00 FC 
3873a     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
3873e     09 FC 0B FC 
38742     0F FC 12 FC 
38746     12 FC 15 FC 
3874a     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
3874e     8D FA 60 FA 
38752     5B FA 5C FA 
38756     60 FA 61 FA 
3875a     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
3875e     6C FA 6D FA 
38762     37 FC 3A FC 
38766     3B FC 3D FC 
3876a     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
3876e     43 FC 44 FC 
38772     45 FC 47 FC 
38776     51 FB AB FA 
3877a     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
3877e     8E FA 91 FA 
38782     93 FA 95 FA 
38786     98 FA 9B FA 
3878a     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
3878e     68 FC 6A FC 
38792     6C FC 6E FC 
38796     70 FC 72 FC 
3879a     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
3879e     76 FC 3B FB 
387a2     D0 FA BB FA 
387a6     B9 FA BD FA 
387aa     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
387ae     C4 FA C6 FA 
387b2     CA FA 13 FC 
387b6     3A FC 3A FC 
387ba     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
387be     41 FC 43 FC 
387c2     44 FC 47 FC 
387c6     48 FC 3C FC 
387ca     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
387ce     E6 FA E8 FA 
387d2     EB FA EE FA 
387d6     F0 FA F2 FA 
387da     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
387de     61 FC 66 FC 
387e2     68 FC 6B FC 
387e6     6C FC 6E FC 
387ea     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
387ee     73 FC 75 FC 
387f2     13 FC 3F FB 
387f6     17 FB 12 FB 
387fa     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
387fe     1A FB 1D FB 
38802     1F FB 20 FB 
38806     23 FB 92 FC 
3880a     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
3880e     96 FC 97 FC 
38812     9A FC 9C FC 
38816     9E FC 9F FC 
3881a     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
3881e     5A FB 41 FB 
38822     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
38826     73 32 00 04 
3882a     00 00 10 00 
3882e     00 00 00 00 
38832     00 00 00 00 | atari2 file "atari2.s2"
38836     43 87 43 87 
3883a     43 87 44 87 
3883e     43 87 44 87 
38842     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
38846     43 87 43 87 
3884a     43 87 44 87 
3884e     43 87 43 87 
38852     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
38856     44 87 43 87 
3885a     44 87 43 87 
3885e     43 87 43 87 
38862     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
38866     43 87 43 87 
3886a     44 87 43 87 
3886e     44 87 44 87 
38872     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
38876     43 87 43 87 
3887a     44 87 43 87 
3887e     43 87 42 87 
38882     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
38886     43 87 43 87 
3888a     43 87 43 87 
3888e     44 87 43 87 
38892     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
38896     44 87 44 87 
3889a     43 87 44 87 
3889e     43 87 44 87 
388a2     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
388a6     44 87 43 87 
388aa     44 87 44 87 
388ae     43 87 43 87 
388b2     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
388b6     43 87 44 87 
388ba     44 87 43 87 
388be     43 87 44 87 
388c2     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
388c6     43 87 43 87 
388ca     43 87 43 87 
388ce     43 87 43 87 
388d2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
388d6     42 87 43 87 
388da     44 87 42 87 
388de     43 87 43 87 
388e2     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
388e6     43 87 44 87 
388ea     44 87 43 87 
388ee     43 87 43 87 
388f2     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
388f6     43 87 5C 87 
388fa     EE 86 AC 87 
388fe     4C 7C A3 78 
38902     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
38906     BC 78 BB 78 
3890a     BD 78 BC 78 
3890e     BB 78 BD 78 
38912     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
38916     BB 78 BB 78 
3891a     BC 78 BC 78 
3891e     BC 78 BB 78 
38922     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
38926     BC 78 BC 78 
3892a     BC 78 BC 78 
3892e     BC 78 BC 78 
38932     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
38936     BB 78 BC 78 
3893a     A0 78 4C 7C 
3893e     11 7A 29 89 
38942     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
38946     44 87 43 87 
3894a     44 87 43 87 
3894e     43 87 42 87 
38952     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
38956     43 87 43 87 
3895a     44 87 ED 85 
3895e     71 85 52 79 
38962     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
38966     BC 78 BC 78 
3896a     BC 78 BC 78 
3896e     BC 78 BC 78 
38972     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
38976     BC 78 BC 78 
3897a     BC 78 A0 78 
3897e     CF 7A B9 81 
38982     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
38986     44 87 43 87 
3898a     43 87 44 87 
3898e     43 87 44 87 
38992     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
38996     43 87 43 87 
3899a     43 87 43 87 
3899e     44 87 43 87 
389a2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
389a6     43 87 43 87 
389aa     44 87 43 87 
389ae     44 87 43 87 
389b2     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
389b6     44 87 43 87 
389ba     43 87 43 87 
389be     5A 87 39 81 
389c2     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
389c6     A5 78 BC 78 
389ca     BB 78 BC 78 
389ce     BB 78 BC 78 
389d2     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
389d6     BC 78 BC 78 
389da     BC 78 BC 78 
389de     BC 78 8F 79 
389e2     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
389e6     09 85 47 87 
389ea     43 87 43 87 
389ee     42 87 42 87 
389f2     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
389f6     43 87 43 87 
389fa     43 87 43 87 
389fe     43 87 44 87 
38a02     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
38a06     43 87 43 87 
38a0a     44 87 43 87 
38a0e     42 87 43 87 
38a12     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
38a16     44 87 43 87 
38a1a     43 87 43 87 
38a1e     44 87 44 87 
38a22     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
38a26     94 78 55 7A 
38a2a     B9 78 BC 78 
38a2e     BC 78 BC 78 
38a32     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
38a36     BC 78 BB 78 
38a3a     BC 78 BC 78 
38a3e     BC 78 BC 78 
38a42     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
38a46     BB 78 BC 78 
38a4a     BC 78 BC 78 
38a4e     BB 78 BC 78 
38a52     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
38a56     BC 78 BC 78 
38a5a     BD 78 BC 78 
38a5e     BC 78 BB 78 
38a62     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
38a66     94 78 B3 84 
38a6a     36 84 4A 87 
38a6e     43 87 43 87 
38a72     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
38a76     43 87 44 87 
38a7a     43 87 43 87 
38a7e     43 87 43 87 
38a82     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
38a86     43 87 44 87 
38a8a     43 87 44 87 
38a8e     43 87 43 87 
38a92     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
38a96     43 87 43 87 
38a9a     43 87 45 87 
38a9e     43 87 43 87 
38aa2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
38aa6     43 87 44 87 
38aaa     44 87 44 87 
38aae     43 87 43 87 
38ab2     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
38ab6     43 87 42 87 
38aba     43 87 43 87 
38abe     44 87 43 87 
38ac2     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
38ac6     54 87 3C 82 
38aca     36 83 52 79 
38ace     C6 78 BC 78 
38ad2     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
38ad6     BB 78 BB 78 
38ada     BC 78 BC 78 
38ade     BC 78 BC 78 
38ae2     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
38ae6     BD 78 ED 78 
38aea     1B 79 F4 83 
38aee     4D 83 4E 87 
38af2     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
38af6     44 87 43 87 
38afa     42 87 44 87 
38afe     43 87 42 87 
38b02     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
38b06     43 87 54 87 
38b0a     26 82 B3 84 
38b0e     D6 77 BB 78 
38b12     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
38b16     BC 78 BB 78 
38b1a     BB 78 BB 78 
38b1e     BB 78 BB 78 
38b22     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
38b26     BC 78 BC 78 
38b2a     26 79 18 75 
38b2e     36 83 1F 84 
38b32     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
38b36     43 87 43 87 
38b3a     43 87 43 87 
38b3e     43 87 44 87 
38b42     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
38b46     43 87 44 87 
38b4a     44 87 43 87 
38b4e     43 87 43 87 
38b52     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
38b56     43 87 43 87 
38b5a     43 87 43 87 
38b5e     44 87 44 87 
38b62     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
38b66     44 87 43 87 
38b6a     43 87 43 87 
38b6e     43 87 44 87 
38b72     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
38b76     44 87 44 87 
38b7a     44 87 43 87 
38b7e     44 87 43 87 
38b82     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
38b86     43 87 43 87 
38b8a     43 87 44 87 
38b8e     44 87 43 87 
38b92     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
38b96     43 87 43 87 
38b9a     43 87 43 87 
38b9e     43 87 44 87 
38ba2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
38ba6     43 87 44 87 
38baa     43 87 44 87 
38bae     19 87 7D 86 
38bb2     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
38bb6     B1 78 BC 78 
38bba     BC 78 BC 78 
38bbe     BC 78 BC 78 
38bc2     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
38bc6     BC 78 BC 78 
38bca     BD 78 BC 78 
38bce     B7 78 3B 7B 
38bd2     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
38bd6     96 86 44 87 
38bda     43 87 43 87 
38bde     43 87 43 87 
38be2     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
38be6     44 87 44 87 
38bea     43 87 44 87 
38bee     43 87 44 87 
38bf2     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
38bf6     43 87 44 87 
38bfa     43 87 44 87 
38bfe     43 87 44 87 
38c02     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
38c06     43 87 44 87 
38c0a     43 87 43 87 
38c0e     44 87 43 87 
38c12     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
38c16     44 87 44 87 
38c1a     43 87 43 87 
38c1e     43 87 44 87 
38c22     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
38c26     43 87 43 87 
38c2a     43 87 43 87 
38c2e     44 87 44 87 
38c32     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
38c36     36 83 CF 7A 
38c3a     AB 78 BB 78 
38c3e     BC 78 BC 78 
38c42     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
38c46     BB 78 BC 78 
38c4a     BC 78 BC 78 
38c4e     BC 78 BC 78 
38c52     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
38c56     BC 78 BC 78 
38c5a     BC 78 BB 78 
38c5e     BC 78 BC 78 
38c62     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
38c66     BB 78 BC 78 
38c6a     BB 78 BC 78 
38c6e     BC 78 BD 78 
38c72     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
38c76     BC 78 BC 78 
38c7a     BC 78 BC 78 
38c7e     BC 78 BD 78 
38c82     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
38c86     BC 78 BB 78 
38c8a     BC 78 BB 78 
38c8e     BB 78 BC 78 
38c92     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
38c96     BC 78 BC 78 
38c9a     BC 78 BC 78 
38c9e     BC 78 BB 78 
38ca2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
38ca6     BC 78 BC 78 
38caa     BC 78 BD 78 
38cae     BB 78 BC 78 
38cb2     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
38cb6     BC 78 BC 78 
38cba     BC 78 BB 78 
38cbe     BC 78 BB 78 
38cc2     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
38cc6     BB 78 BC 78 
38cca     BC 78 BC 78 
38cce     BC 78 BB 78 
38cd2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
38cd6     BC 78 BC 78 
38cda     BC 78 BB 78 
38cde     BC 78 BB 78 
38ce2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
38ce6     BC 78 BC 78 
38cea     BC 78 BC 78 
38cee     BB 78 BC 78 
38cf2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
38cf6     BC 78 9F 78 
38cfa     52 79 B3 84 
38cfe     2F 86 60 87 
38d02     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
38d06     44 87 43 87 
38d0a     43 87 43 87 
38d0e     43 87 43 87 
38d12     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
38d16     43 87 43 87 
38d1a     43 87 44 87 
38d1e     43 87 43 87 
38d22     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
38d26     43 87 43 87 
38d2a     43 87 43 87 
38d2e     43 87 44 87 
38d32     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
38d36     44 87 44 87 
38d3a     5E 87 BC 80 
38d3e     FB 80 94 78 
38d42     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
38d46     BD 78 BC 78 
38d4a     BB 78 BC 78 
38d4e     BB 78 BB 78 
38d52     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
38d56     BC 78 BB 78 
38d5a     BB 78 6B 79 
38d5e     D6 77 AC 87 
38d62     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
38d66     43 87 44 87 
38d6a     43 87 43 87 
38d6e     44 87 43 87 
38d72     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
38d76     43 87 44 87 
38d7a     43 87 5C 87 
38d7e     E7 80 00 80 
38d82     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
38d86     BC 78 BD 78 
38d8a     BC 78 BC 78 
38d8e     BC 78 BB 78 
38d92     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
38d96     BC 78 BC 78 
38d9a     BB 78 BC 78 
38d9e     BB 78 BC 78 
38da2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
38da6     BB 78 BC 78 
38daa     BC 78 BC 78 
38dae     BC 78 BC 78 
38db2     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
38db6     BC 78 BC 78 
38dba     BC 78 BC 78 
38dbe     A0 78 8D 7B 
38dc2     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
38dc6     60 87 43 87 
38dca     44 87 44 87 
38dce     43 87 43 87 
38dd2     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
38dd6     44 87 43 87 
38dda     43 87 43 87 
38dde     44 87 73 86 
38de2     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
38de6     51 7B B6 78 
38dea     BC 78 BD 78 
38dee     BC 78 BC 78 
38df2     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
38df6     BB 78 BC 78 
38dfa     BD 78 BB 78 
38dfe     BC 78 BB 78 
38e02     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
38e06     BC 78 BC 78 
38e0a     BC 78 BC 78 
38e0e     BB 78 BC 78 
38e12     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
38e16     BC 78 BB 78 
38e1a     BB 78 BC 78 
38e1e     BC 78 BB 78 
38e22     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
38e26     22 8C AF 84 
38e2a     48 87 43 87 
38e2e     44 87 43 87 
38e32     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
38e36     43 87 42 87 
38e3a     43 87 43 87 
38e3e     44 87 43 87 
38e42     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
38e46     43 87 43 87 
38e4a     44 87 44 87 
38e4e     43 87 43 87 
38e52     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
38e56     43 87 43 87 
38e5a     43 87 43 87 
38e5e     44 87 43 87 
38e62     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
38e66     9F 8B D6 77 
38e6a     16 7C B3 78 
38e6e     BC 78 BB 78 
38e72     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
38e76     BB 78 BC 78 
38e7a     BB 78 BC 78 
38e7e     BC 78 BC 78 
38e82     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
38e86     BC 78 BB 78 
38e8a     BB 78 BC 78 
38e8e     BB 78 BC 78 
38e92     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
38e96     BB 78 BB 78 
38e9a     BC 78 BC 78 
38e9e     BC 78 BB 78 
38ea2     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
38ea6     BC 78 BC 78 
38eaa     BC 78 BD 78 
38eae     BB 78 BC 78 
38eb2     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
38eb6     BC 78 BC 78 
38eba     BC 78 BB 78 
38ebe     BC 78 BC 78 
38ec2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
38ec6     A8 78 54 7E 
38eca     F4 83 17 82 
38ece     50 87 43 87 
38ed2     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
38ed6     44 87 43 87 
38eda     44 87 43 87 
38ede     43 87 44 87 
38ee2     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
38ee6     43 87 28 87 
38eea     20 85 CF 7A 
38eee     70 7D AD 78 
38ef2     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
38ef6     BB 78 BC 78 
38efa     BC 78 BC 78 
38efe     BB 78 BB 78 
38f02     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
38f06     BB 78 B2 78 
38f0a     9A 7C CF 7A 
38f0e     4A 87 0D 87 
38f12     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
38f16     43 87 44 87 
38f1a     43 87 44 87 
38f1e     43 87 43 87 
38f22     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
38f26     44 87 43 87 
38f2a     28 87 51 85 
38f2e     11 7A 1E 7D 
38f32     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
38f36     BC 78 BB 78 
38f3a     BC 78 BC 78 
38f3e     BC 78 BC 78 
38f42     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
38f46     BB 78 BC 78 
38f4a     BB 78 BC 78 
38f4e     BC 78 BC 78 
38f52     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
38f56     BB 78 BC 78 
38f5a     BC 78 BC 78 
38f5e     BD 78 BB 78 
38f62     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
38f66     BC 78 BB 78 
38f6a     BC 78 BC 78 
38f6e     BC 78 BB 78 
38f72     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
38f76     BC 78 BC 78 
38f7a     BC 78 BC 78 
38f7e     BB 78 BC 78 
38f82     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
38f86     BC 78 BD 78 
38f8a     BC 78 BC 78 
38f8e     BC 78 BB 78 
38f92     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
38f96     BC 78 BB 78 
38f9a     BB 78 BC 78 
38f9e     BC 78 BB 78 
38fa2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
38fa6     BB 78 BB 78 
38faa     BB 78 BC 78 
38fae     B6 78 48 7D 
38fb2     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
38fb6     56 87 43 87 
38fba     42 87 44 87 
38fbe     44 87 43 87 
38fc2     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
38fc6     43 87 44 87 
38fca     43 87 44 87 
38fce     4C 87 7E 83 
38fd2     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
38fd6     F7 78 BC 78 
38fda     BC 78 BB 78 
38fde     BB 78 BC 78 
38fe2     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
38fe6     BC 78 BB 78 
38fea     BC 78 BC 78 
38fee     BB 78 BC 78 
38ff2     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
38ff6     BB 78 BC 78 
38ffa     BC 78 BC 78 
38ffe     BC 78 BB 78 
39002     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39006     BC 78 BC 78 
3900a     BC 78 BC 78 
3900e     BC 78 BB 78 
39012     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39016     BC 78 BB 78 
3901a     BB 78 BC 78 
3901e     BC 78 BB 78 
39022     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39026     BC 78 BC 78 
3902a     BB 78 BC 78 
3902e     BC 78 BC 78 
39032     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
39036     73 32 00 04 
3903a     00 00 10 00 
3903e     00 00 00 00 
39042     00 00 00 00 | atari12 file "atari12.s2"
39046     00 6D 00 6D 
3904a     00 6D 00 6D 
3904e     00 6D 00 6D 
39052     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39056     00 6D 00 6D 
3905a     00 6D 00 6D 
3905e     00 6D 00 6D 
39062     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39066     00 6D 00 6D 
3906a     00 6D 00 6D 
3906e     00 6D 00 6D 
39072     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39076     00 6D 00 6D 
3907a     00 6D 00 6D 
3907e     00 6D 00 6D 
39082     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39086     00 6D 00 6D 
3908a     00 6D 00 6D 
3908e     00 6D 00 6D 
39092     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
39096     00 6C 00 6C 
3909a     00 6C 00 6C 
3909e     00 6C 00 6C 
390a2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
390a6     00 6C 00 6C 
390aa     00 6C 00 6C 
390ae     00 6C 00 6C 
390b2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
390b6     00 6C 00 6C 
390ba     00 6C 00 6C 
390be     00 6C 00 6C 
390c2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
390c6     00 6C 00 6C 
390ca     00 6C 00 6C 
390ce     00 6C 00 6C 
390d2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
390d6     00 6C 00 6C 
390da     00 6C 00 6C 
390de     00 6C 00 6C 
390e2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
390e6     00 6C 00 6C 
390ea     00 6C 00 6C 
390ee     00 6C 00 6C 
390f2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
390f6     00 6C 00 6C 
390fa     00 6C 00 6C 
390fe     00 6C 00 6C 
39102     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39106     00 6C 00 6C 
3910a     00 6C 00 6C 
3910e     00 6C 00 6C 
39112     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39116     00 6C 00 6C 
3911a     00 6C 00 6C 
3911e     00 6C 00 6C 
39122     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39126     00 6C 00 6C 
3912a     00 6C 00 6C 
3912e     00 6C 00 6C 
39132     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39136     00 6C 00 6C 
3913a     00 6C 00 6C 
3913e     00 6C 00 6C 
39142     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39146     00 6C 00 6B 
3914a     00 6B 00 6B 
3914e     00 6B 00 6B 
39152     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39156     00 6B 00 6B 
3915a     00 6B 00 6B 
3915e     00 6B 00 6B 
39162     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39166     00 6B 00 6B 
3916a     00 6B 00 6B 
3916e     00 6B 00 6B 
39172     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39176     00 6B 00 6B 
3917a     00 6B 00 6B 
3917e     00 6B 00 6B 
39182     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39186     00 6B 00 6B 
3918a     00 6B 00 6B 
3918e     00 6B 00 6B 
39192     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39196     00 6B 00 6B 
3919a     00 6B 00 6B 
3919e     00 6B 00 6B 
391a2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
391a6     00 6B 00 6B 
391aa     00 6B 00 6B 
391ae     00 6B 00 6B 
391b2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
391b6     00 6B 00 6B 
391ba     00 6B 00 6B 
391be     00 6B 00 6B 
391c2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
391c6     00 6B 00 6B 
391ca     00 6B 00 6B 
391ce     00 6B 00 6B 
391d2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
391d6     00 6B 00 6B 
391da     00 6B 00 6B 
391de     00 6A 00 9D 
391e2     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
391e6     00 9E 00 9E 
391ea     00 9E 00 9E 
391ee     00 9E 00 9E 
391f2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
391f6     00 9E 00 9E 
391fa     00 9E 00 9E 
391fe     00 9E 00 9E 
39202     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39206     00 9E 00 9E 
3920a     00 9E 00 9E 
3920e     00 9E 00 9E 
39212     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39216     00 9E 00 9E 
3921a     00 9E 00 9E 
3921e     00 9E 00 9E 
39222     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39226     00 9E 00 9E 
3922a     00 9E 00 9E 
3922e     00 9E 00 9E 
39232     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39236     00 9E 00 9E 
3923a     00 9E 00 9E 
3923e     00 9E 00 9E 
39242     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39246     00 9E 00 9E 
3924a     00 9E 00 9E 
3924e     00 9E 00 9E 
39252     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39256     00 9E 00 9E 
3925a     00 9E 00 9E 
3925e     00 9E 00 9E 
39262     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39266     00 9E 00 9E 
3926a     00 9E 00 9E 
3926e     00 9E 00 9E 
39272     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
39276     00 9F 00 9F 
3927a     00 9F 00 9F 
3927e     00 9F 00 9F 
39282     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39286     00 9F 00 9F 
3928a     00 9F 00 9F 
3928e     00 9F 00 9F 
39292     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39296     00 9F 00 9F 
3929a     00 9F 00 9F 
3929e     00 9F 00 9F 
392a2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
392a6     00 9F 00 9F 
392aa     00 9F 00 9F 
392ae     00 9F 00 9F 
392b2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
392b6     00 9F 00 9F 
392ba     00 9F 00 9F 
392be     00 9F 00 9F 
392c2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
392c6     00 9F 00 9F 
392ca     00 9F 00 9F 
392ce     00 9F 00 9F 
392d2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
392d6     00 9F 00 9F 
392da     00 9F 00 9F 
392de     00 9F 00 9F 
392e2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
392e6     00 9F 00 9F 
392ea     00 9F 00 9F 
392ee     00 9F 00 9F 
392f2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
392f6     00 9F 00 9F 
392fa     00 9F 00 9F 
392fe     00 9F 00 9F 
39302     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39306     00 9F 00 9F 
3930a     00 9F 00 9F 
3930e     00 9F 00 9F 
39312     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39316     00 9F 00 9F 
3931a     00 9F 00 9F 
3931e     00 9F 00 9F 
39322     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39326     00 9F 00 9F 
3932a     00 9F 00 9F 
3932e     00 9F 00 9F 
39332     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39336     00 9F 00 9F 
3933a     00 9F 00 A0 
3933e     00 A0 00 A0 
39342     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39346     00 A0 00 A0 
3934a     00 A0 00 A0 
3934e     00 A0 00 A0 
39352     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39356     00 A0 00 A0 
3935a     00 A0 00 A0 
3935e     00 A0 00 A0 
39362     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39366     00 A0 00 A0 
3936a     00 A0 00 A0 
3936e     00 A0 00 A0 
39372     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39376     00 A0 00 A0 
3937a     00 A0 00 A0 
3937e     00 A0 00 A0 
39382     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39386     00 A0 00 A0 
3938a     00 A0 00 A0 
3938e     00 A0 00 A0 
39392     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39396     00 A0 00 A0 
3939a     00 A0 00 A0 
3939e     00 A0 00 A0 
393a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
393a6     00 A0 00 A0 
393aa     00 A0 00 A0 
393ae     00 A0 00 A0 
393b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
393b6     00 A0 00 A0 
393ba     00 A0 00 A0 
393be     00 A0 00 A0 
393c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
393c6     00 A0 00 A0 
393ca     00 A0 00 A0 
393ce     00 A0 00 A0 
393d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
393d6     00 A0 00 A0 
393da     00 A0 00 A0 
393de     00 A0 00 A0 
393e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
393e6     00 A0 00 A0 
393ea     00 A0 00 A0 
393ee     00 A0 00 A0 
393f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
393f6     00 A0 00 A0 
393fa     00 A0 00 A0 
393fe     00 A0 00 A0 
39402     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
39406     00 6D 00 6D 
3940a     00 6D 00 6D 
3940e     00 6D 00 6D 
39412     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39416     00 6D 00 6D 
3941a     00 6D 00 6D 
3941e     00 6D 00 6D 
39422     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39426     00 6D 00 6D 
3942a     00 6D 00 6D 
3942e     00 6D 00 6D 
39432     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39436     00 6D 00 6D 
3943a     00 6D 00 6D 
3943e     00 6D 00 6D 
39442     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39446     00 6D 00 6D 
3944a     00 6D 00 6D 
3944e     00 6D 00 6D 
39452     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39456     00 6D 00 6D 
3945a     00 6D 00 6D 
3945e     00 6D 00 6D 
39462     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39466     00 6D 00 6D 
3946a     00 6D 00 6D 
3946e     00 6D 00 6D 
39472     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39476     00 6D 00 6D 
3947a     00 6D 00 6D 
3947e     00 6D 00 6D 
39482     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39486     00 6D 00 6D 
3948a     00 A0 00 A0 
3948e     00 A0 00 A0 
39492     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39496     00 A0 00 A0 
3949a     00 A0 00 A0 
3949e     00 A0 00 A0 
394a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
394a6     00 A0 00 A0 
394aa     00 A0 00 A0 
394ae     00 A0 00 A0 
394b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
394b6     00 A0 00 A0 
394ba     00 A0 00 A0 
394be     00 A0 00 A0 
394c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
394c6     00 A0 00 A0 
394ca     00 A0 00 A0 
394ce     00 A0 00 A0 
394d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
394d6     00 A0 00 A0 
394da     00 A0 00 A0 
394de     00 A0 00 A0 
394e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
394e6     00 A0 00 A0 
394ea     00 A0 00 A0 
394ee     00 A0 00 A0 
394f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
394f6     00 A0 00 A0 
394fa     00 A0 00 A0 
394fe     00 A0 00 A0 
39502     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39506     00 A0 00 A0 
3950a     00 A0 00 A0 
3950e     00 A0 00 A0 
39512     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
39516     00 6D 00 6D 
3951a     00 6D 00 6D 
3951e     00 6D 00 6D 
39522     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39526     00 6D 00 6D 
3952a     00 6D 00 6D 
3952e     00 6D 00 6D 
39532     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39536     00 6D 00 6D 
3953a     00 6D 00 6D 
3953e     00 6D 00 6D 
39542     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39546     00 6D 00 6D 
3954a     00 6D 00 6D 
3954e     00 6D 00 6D 
39552     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39556     00 6D 00 6D 
3955a     00 6D 00 6D 
3955e     00 6D 00 6D 
39562     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39566     00 6D 00 6D 
3956a     00 6D 00 6D 
3956e     00 6D 00 6D 
39572     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39576     00 6D 00 6D 
3957a     00 6D 00 6D 
3957e     00 6D 00 6D 
39582     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39586     00 6D 00 6D 
3958a     00 6D 00 6D 
3958e     00 6D 00 6D 
39592     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39596     00 6D 00 6D 
3959a     00 6C 00 A0 
3959e     00 9F 00 A0 
395a2     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
395a6     00 A0 00 A0 
395aa     00 A0 00 A0 
395ae     00 A0 00 A0 
395b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
395b6     00 A0 00 A0 
395ba     00 A0 00 A0 
395be     00 A0 00 A0 
395c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
395c6     00 A0 00 A0 
395ca     00 A0 00 A0 
395ce     00 A0 00 A0 
395d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
395d6     00 A0 00 A0 
395da     00 A0 00 A0 
395de     00 A0 00 A0 
395e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
395e6     00 A0 00 A0 
395ea     00 A0 00 A0 
395ee     00 A0 00 A0 
395f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
395f6     00 A0 00 A0 
395fa     00 A0 00 A0 
395fe     00 A0 00 A0 
39602     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39606     00 A0 00 A0 
3960a     00 A0 00 A0 
3960e     00 A0 00 A0 
39612     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39616     00 A0 00 A0 
3961a     00 A0 00 A0 
3961e     00 A0 00 A0 
39622     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39626     00 A0 00 A0 
3962a     00 A0 00 A0 
3962e     00 A0 00 A0 
39632     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39636     00 A0 00 A0 
3963a     00 A0 00 A0 
3963e     00 A0 00 A0 
39642     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39646     00 A0 00 A0 
3964a     00 A0 00 A0 
3964e     00 A0 00 A0 
39652     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
39656     00 A1 00 A1 
3965a     00 A1 00 A1 
3965e     00 A1 00 A1 
39662     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
39666     00 A1 00 A1 
3966a     00 A1 00 A1 
3966e     00 A1 00 A1 
39672     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
39676     00 A1 00 A1 
3967a     00 A1 00 A1 
3967e     00 A1 00 A1 
39682     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
39686     00 A1 00 A1 
3968a     00 A1 00 A1 
3968e     00 A1 00 A1 
39692     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
39696     00 A1 00 A1 
3969a     00 A1 00 A1 
3969e     00 A1 00 A1 
396a2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
396a6     00 A1 00 A1 
396aa     00 A1 00 A1 
396ae     00 6E 00 6E 
396b2     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
396b6     00 6E 00 6E 
396ba     00 6E 00 6E 
396be     00 6E 00 6E 
396c2     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
396c6     00 6E 00 6E 
396ca     00 6E 00 6E 
396ce     00 6E 00 6E 
396d2     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
396d6     00 6E 00 6E 
396da     00 6E 00 6E 
396de     00 6E 00 6E 
396e2     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
396e6     00 6E 00 6D 
396ea     00 6D 00 6D 
396ee     00 6D 00 6D 
396f2     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
396f6     00 6D 00 6D 
396fa     00 6D 00 6D 
396fe     00 6D 00 6D 
39702     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39706     00 6D 00 6D 
3970a     00 6D 00 6D 
3970e     00 6D 00 6D 
39712     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39716     00 6D 00 6D 
3971a     00 6D 00 6D 
3971e     00 6D 00 6D 
39722     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39726     00 6D 00 6D 
3972a     00 6D 00 6D 
3972e     00 6D 00 6D 
39732     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39736     00 6D 00 6D 
3973a     00 6D 00 6D 
3973e     00 6D 00 6D 
39742     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39746     00 6D 00 6D 
3974a     00 6D 00 6D 
3974e     00 6D 00 6D 
39752     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39756     00 6D 00 6D 
3975a     00 6D 00 6D 
3975e     00 6D 00 6D 
39762     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39766     00 6D 00 6D 
3976a     00 6D 00 6D 
3976e     00 6D 00 6D 
39772     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39776     00 6D 00 6D 
3977a     00 6D 00 6D 
3977e     00 6D 00 6D 
39782     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39786     00 6D 00 6D 
3978a     00 6D 00 6D 
3978e     00 6D 00 6D 
39792     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39796     00 6D 00 6D 
3979a     00 6C 00 6C 
3979e     00 6C 00 6C 
397a2     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
397a6     00 6C 00 6C 
397aa     00 6C 00 6C 
397ae     00 6C 00 6C 
397b2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
397b6     00 6C 00 6C 
397ba     00 6C 00 6C 
397be     00 9D 00 9F 
397c2     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
397c6     00 9F 00 9F 
397ca     00 9F 00 9F 
397ce     00 A0 00 A0 
397d2     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
397d6     00 A0 00 A0 
397da     00 A0 00 A0 
397de     00 A0 00 A0 
397e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
397e6     00 A0 00 A0 
397ea     00 A0 00 A0 
397ee     00 A0 00 A0 
397f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
397f6     00 A0 00 A0 
397fa     00 A0 00 A0 
397fe     00 A0 00 A0 
39802     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39806     00 A0 00 A0 
3980a     00 A0 00 A0 
3980e     00 A0 00 A0 
39812     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39816     00 A0 00 A0 
3981a     00 A0 00 A0 
3981e     00 A0 00 A0 
39822     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39826     00 A0 00 A0 
3982a     00 A0 00 A0 
3982e     00 A0 00 A0 
39832     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39836     00 A0 00 A0 
3983a     00 A0 00 A0 
3983e     00 A0 00 A0 
39842     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39846     01 00 00 00 
3984a     00 00 00 00 
3984e     00 00 00 00 
39852     00 00 00 00 | mouse  file "mouse2.def"
39856     00 00 00 00 
3985a     00 00 00 00 
3985e     00 00 00 00 
39862     00 00 00 00 | 	byte	$00[16]
39866     01 01 00 00 
3986a     00 00 00 00 
3986e     00 00 00 00 
39872     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39876     00 00 00 00 
3987a     00 00 00 00 
3987e     00 00 00 00 
39882     00 00 00 00 | 	byte	$00[16]
39886     01 0D 01 00 
3988a     00 00 00 00 
3988e     00 00 00 00 
39892     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39896     00 00 00 00 
3989a     00 00 00 00 
3989e     00 00 00 00 
398a2     00 00 00 00 | 	byte	$00[16]
398a6     01 0D 0D 01 
398aa     00 00 00 00 
398ae     00 00 00 00 
398b2     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
398b6     00 00 00 00 
398ba     00 00 00 00 
398be     00 00 00 00 
398c2     00 00 00 00 | 	byte	$00[16]
398c6     01 0D 0D 0D 
398ca     01 00 00 00 
398ce     00 00 00 00 
398d2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
398d6     00 00 00 00 
398da     00 00 00 00 
398de     00 00 00 00 
398e2     00 00 00 00 | 	byte	$00[16]
398e6     01 0D 0D 0D 
398ea     0D 01 00 00 
398ee     00 00 00 00 
398f2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
398f6     00 00 00 00 
398fa     00 00 00 00 
398fe     00 00 00 00 
39902     00 00 00 00 | 	byte	$00[16]
39906     01 0D 0D 0D 
3990a     0D 0D 01 00 
3990e     00 00 00 00 
39912     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
39916     00 00 00 00 
3991a     00 00 00 00 
3991e     00 00 00 00 
39922     00 00 00 00 | 	byte	$00[16]
39926     01 0D 0D 0D 
3992a     0D 0D 0D 01 
3992e     00 00 00 00 
39932     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
39936     00 00 00 00 
3993a     00 00 00 00 
3993e     00 00 00 00 
39942     00 00 00 00 | 	byte	$00[16]
39946     01 0D 0D 0D 
3994a     0D 0D 0D 0C 
3994e     01 00 00 00 
39952     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
39956     00 00 00 00 
3995a     00 00 00 00 
3995e     00 00 00 00 
39962     00 00 00 00 | 	byte	$00[16]
39966     01 0D 0D 0D 
3996a     0D 0D 0D 0D 
3996e     0C 01 00 00 
39972     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
39976     00 00 00 00 
3997a     00 00 00 00 
3997e     00 00 00 00 
39982     00 00 00 00 | 	byte	$00[16]
39986     01 0D 0D 0D 
3998a     0D 0D 0D 0D 
3998e     0D 0C 01 00 
39992     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
39996     00 00 00 00 
3999a     00 00 00 00 
3999e     00 00 00 00 
399a2     00 00 00 00 | 	byte	$00[16]
399a6     01 0D 0D 0D 
399aa     0D 0D 0D 0D 
399ae     0D 0D 0B 01 
399b2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
399b6     00 00 00 00 
399ba     00 00 00 00 
399be     00 00 00 00 
399c2     00 00 00 00 | 	byte	$00[16]
399c6     01 0D 0D 0D 
399ca     0C 0D 0D 03 
399ce     01 01 01 01 
399d2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
399d6     00 00 00 00 
399da     00 00 00 00 
399de     00 00 00 00 
399e2     00 00 00 00 | 	byte	$00[16]
399e6     01 0D 0D 0C 
399ea     01 09 0D 03 
399ee     00 00 00 00 
399f2     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
399f6     00 00 00 00 
399fa     00 00 00 00 
399fe     00 00 00 00 
39a02     00 00 00 00 | 	byte	$00[16]
39a06     01 0D 0C 01 
39a0a     00 01 0D 0B 
39a0e     01 00 00 00 
39a12     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
39a16     00 00 00 00 
39a1a     00 00 00 00 
39a1e     00 00 00 00 
39a22     00 00 00 00 | 	byte	$00[16]
39a26     01 0C 01 00 
39a2a     00 01 0A 0D 
39a2e     01 00 00 00 
39a32     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
39a36     00 00 00 00 
39a3a     00 00 00 00 
39a3e     00 00 00 00 
39a42     00 00 00 00 | 	byte	$00[16]
39a46     01 01 00 00 
39a4a     00 00 01 0D 
39a4e     0B 01 00 00 
39a52     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
39a56     00 00 00 00 
39a5a     00 00 00 00 
39a5e     00 00 00 00 
39a62     00 00 00 00 
39a66     00 00 00 00 
39a6a     00 00       | 	byte	$00[22]
39a6c     01 0B 0D 01 
39a70     00 00 00 00 
39a74     00 00 00 00 
39a78     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39a7c     00 00 00 00 
39a80     00 00 00 00 
39a84     00 00 00 00 
39a88     00 00 00 00 
39a8c     00          | 	byte	$00[17]
39a8d     01 01 00 00 
39a91     00 00 00 00 
39a95     00 00 00 00 
39a99     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39a9d     00 00 00 00 
      ...             
39c41     00 00 00 00 
39c45     00          | 	byte	$00[425]
39c46                 | 
39c46     00 00       |              	org
39c48 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
39c4c 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
39c50 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
39c54 003             | 
39c54 003 00 30 04 F6 |                 mov     psramaddr,#0
39c58 004             | 
39c58 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
39c5c 005 20 00 00 FF 
39c60 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
39c64 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
39c68 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
39c6c 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
39c70 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
39c74 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
39c78 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
39c7c 00d             | 
39c7c 00d 20 00 00 FF 
39c80 00e 00 30 04 F1 |                 add 	psramaddr,##16384
39c84 00f E0 03 00 FF 
39c88 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
39c8c 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
39c90 012             | 
39c90 012             |                 
39c90 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
39c94 013             |     
39c94 013 01 2C 60 FD |                 cogid 	t11				' get id
39c98 014 00 00 EC FC |                 coginit #0,#0				' start the new program
39c9c 015 03 2C 60 FD |                 cogstop t11				' stop the loader
39ca0 016             | 
39ca0 016 00 00 00 00 | t11 		long 	0
39ca4 017 00 FF 07 00 | mailbox 	long 	$7FF00
39ca8 018 00 00 00 00 | psramaddr 	long 	0
39cac 019 00 00 00 00 | pslockval	long 	0
39cb0 01a 00 00 00 00 | cmd             long    0
39cb4 01b 00 00 00 00 | buf1            long    0
39cb8 01c 00 40 00 00 | buf2            long    16384
39cbc 01d C0 9C 03 00 | 	long	@@@_dat_ + 12612
39cc0 01e 50 32 20 52 
39cc4 01f 65 74 72 6F 
39cc8 020 6D 61 63 68 
39ccc 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
39cd0 022 42 41 53 49 
39cd4 023 43 20 76 65 
39cd8 024 72 73 69 6F 
39cdc 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
39ce0 026 33 33 00 00 | 	byte	$33, $33, $00, $00
39ce4 027             | 	alignl
39ce4 027             | _hg010b_spin2_dat_
39ce4 027             | 
39ce4 027 00 00 00 00 
39ce8 028 00 00 00 00 
39cec 029 00 00 00 00 
39cf0 02a 00 00 00 00 
39cf4 02b 00 00 00    | vga_font       file "vgafont.def"
39cf7 02b 7E 81 A5 81 
39cfb 02c 81 BD 99 81 
39cff 02d 81 7E 00 00 
39d03 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
39d07 02f 7E FF DB FF 
39d0b 030 FF C3 E7 FF 
39d0f 031 FF 7E 00 00 
39d13 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
39d17 033 00 36 7F 7F 
39d1b 034 7F 7F 3E 1C 
39d1f 035 08 00 00 00 
39d23 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
39d27 037 00 08 1C 3E 
39d2b 038 7F 3E 1C 08 
39d2f 039 00 00 00 00 
39d33 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
39d37 03b 18 3C 3C E7 
39d3b 03c E7 E7 18 18 
39d3f 03d 3C 00 00 00 
39d43 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
39d47 03f 18 3C 7E FF 
39d4b 040 FF 7E 18 18 
39d4f 041 3C 00 00 00 
39d53 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
39d57 043 00 00 00 18 
39d5b 044 3C 3C 18 00 
39d5f 045 00 00 00 00 
39d63 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
39d67 047 FF FF FF E7 
39d6b 048 C3 C3 E7 FF 
39d6f 049 FF FF FF FF 
39d73 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
39d77 04b 00 00 3C 66 
39d7b 04c 42 42 66 3C 
39d7f 04d 00 00 00 00 
39d83 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
39d87 04f FF FF C3 99 
39d8b 050 BD BD 99 C3 
39d8f 051 FF FF FF FF 
39d93 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
39d97 053 78 70 58 4C 
39d9b 054 1E 33 33 33 
39d9f 055 33 1E 00 00 
39da3 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
39da7 057 3C 66 66 66 
39dab 058 66 3C 18 7E 
39daf 059 18 18 00 00 
39db3 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
39db7 05b FC CC FC 0C 
39dbb 05c 0C 0C 0C 0E 
39dbf 05d 0F 07 00 00 
39dc3 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
39dc7 05f FE C6 FE C6 
39dcb 060 C6 C6 C6 E6 
39dcf 061 E7 67 03 00 
39dd3 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
39dd7 063 18 18 DB 3C 
39ddb 064 E7 3C DB 18 
39ddf 065 18 00 00 00 
39de3 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
39de7 067 03 07 0F 1F 
39deb 068 7F 1F 0F 07 
39def 069 03 01 00 00 
39df3 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
39df7 06b 60 70 78 7C 
39dfb 06c 7F 7C 78 70 
39dff 06d 60 40 00 00 
39e03 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
39e07 06f 18 3C 7E 18 
39e0b 070 18 18 7E 3C 
39e0f 071 18 00 00 00 
39e13 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
39e17 073 66 66 66 66 
39e1b 074 66 66 66    | 	byte	$66[7]
39e1e 075 00 66 66 00 
39e22 076 00 00 00 00 
39e26 077 00 FE DB DB 
39e2a 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
39e2e 079 D8 D8 D8 00 
39e32 07a 00 00 00 3E 
39e36 07b 63 06 1C 36 
39e3a 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
39e3e 07d 30 63 3E 00 
39e42 07e 00 00 00 00 
39e46 07f 00 00 00 00 
39e4a 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
39e4e 081 7F 7F 7F 00 
39e52 082 00 00 00 00 
39e56 083 00 18 3C 7E 
39e5a 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
39e5e 085 3C 18 7E 00 
39e62 086 00 00 00 00 
39e66 087 00 18 3C 7E 
39e6a 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
39e6e 089 18 18 18 00 
39e72 08a 00 00 00 00 
39e76 08b 00 18 18 18 
39e7a 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
39e7e 08d 7E 3C 18 00 
39e82 08e 00 00 00 00 
39e86 08f 00 00 00 18 
39e8a 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
39e8e 091 00 00 00 00 
39e92 092 00 00 00 00 
39e96 093 00 00 00    | 	byte	$00[11]
39e99 094 0C 06 7F 06 
39e9d 095 0C 00 00 00 
39ea1 096 00 00 00 00 
39ea5 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39ea9 098 00 03 03 03 
39ead 099 7F 00 00 00 
39eb1 09a 00 00 00 00 
39eb5 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39eb9 09c 14 36 7F 36 
39ebd 09d 14 00 00 00 
39ec1 09e 00 00 00 00 
39ec5 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
39ec9 0a0 1C 1C 3E 3E 
39ecd 0a1 7F 7F 00 00 
39ed1 0a2 00 00 00 00 
39ed5 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
39ed9 0a4 7F 3E 3E 1C 
39edd 0a5 1C 08 00 00 
39ee1 0a6 00 00 00 00 
39ee5 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39ee9 0a8 00 00 00 00 
39eed 0a9 00 00 00 00 
39ef1 0aa 00 00 00 00 
39ef5 0ab 00 00       | 	byte	$00[14]
39ef7 0ab 18 3C 3C 3C 
39efb 0ac 18 18 18 00 
39eff 0ad 18 18 00 00 
39f03 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
39f07 0af 66 24 00 00 
39f0b 0b0 00 00 00 00 
39f0f 0b1 00 00 00 00 
39f13 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39f17 0b3 00 36 36 7F 
39f1b 0b4 36 36 36 7F 
39f1f 0b5 36 36 00 00 
39f23 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
39f27 0b7 3E 63 43 03 
39f2b 0b8 3E 60 60 61 
39f2f 0b9 63 3E 18 18 
39f33 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
39f37 0bb 00 00 43 63 
39f3b 0bc 30 18 0C 06 
39f3f 0bd 63 61 00 00 
39f43 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
39f47 0bf 1C 36 36 1C 
39f4b 0c0 6E 3B 33 33 
39f4f 0c1 33 6E 00 00 
39f53 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
39f57 0c3 0C 0C 0C 06 
39f5b 0c4 00 00 00 00 
39f5f 0c5 00 00 00 00 
39f63 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39f67 0c7 30 18 0C 0C 
39f6b 0c8 0C 0C 0C 0C 
39f6f 0c9 18 30 00 00 
39f73 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
39f77 0cb 0C 18 30 30 
39f7b 0cc 30 30 30 30 
39f7f 0cd 18 0C 00 00 
39f83 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
39f87 0cf 00 00 00 66 
39f8b 0d0 3C FF 3C 66 
39f8f 0d1 00 00 00 00 
39f93 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
39f97 0d3 00 00 00 18 
39f9b 0d4 18 7E 18 18 
39f9f 0d5 00 00 00 00 
39fa3 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
39fa7 0d7 00 00 00 00 
39fab 0d8 00 00 00 00 | 	byte	$00[8]
39faf 0d9 18 18 18 0C 
39fb3 0da 00 00 00 00 
39fb7 0db 00 00 00 00 
39fbb 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
39fbf 0dd 00 00 00 00 
39fc3 0de 00 00 00 00 
39fc7 0df 00 00 00 00 
39fcb 0e0 00 00 00 00 | 	byte	$00[16]
39fcf 0e1 18 18 00 00 
39fd3 0e2 00 00 00 00 
39fd7 0e3 00 00 40 60 
39fdb 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
39fdf 0e5 03 01 00 00 
39fe3 0e6 00 00 00 00 
39fe7 0e7 1C 36 63 63 
39feb 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
39fef 0e9 36 1C 00 00 
39ff3 0ea 00 00 00 00 
39ff7 0eb 18 1C 1E 18 
39ffb 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
39fff 0ed 18 7E 00 00 
3a003 0ee 00 00 00 00 
3a007 0ef 3E 63 60 30 
3a00b 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3a00f 0f1 63 7F 00 00 
3a013 0f2 00 00 00 00 
3a017 0f3 3E 63 60 60 
3a01b 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3a01f 0f5 63 3E 00 00 
3a023 0f6 00 00 00 00 
3a027 0f7 30 38 3C 36 
3a02b 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3a02f 0f9 30 78 00 00 
3a033 0fa 00 00 00 00 
3a037 0fb 7F 03 03 03 
3a03b 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3a03f 0fd 63 3E 00 00 
3a043 0fe 00 00 00 00 
3a047 0ff 1C 06 03 03 
3a04b 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3a04f 101 63 3E 00 00 
3a053 102 00 00 00 00 
3a057 103 7F 63 60 60 
3a05b 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3a05f 105 0C 0C 00 00 
3a063 106 00 00 00 00 
3a067 107 3E 63 63 63 
3a06b 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3a06f 109 63 3E 00 00 
3a073 10a 00 00 00 00 
3a077 10b 3E 63 63 63 
3a07b 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3a07f 10d 30 1E 00 00 
3a083 10e 00 00 00 00 
3a087 10f 00 00 00 18 
3a08b 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3a08f 111 18 18 00 00 
3a093 112 00 00 00 00 
3a097 113 00 00 00 18 
3a09b 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3a09f 115 18 18 0C 00 
3a0a3 116 00 00 00 00 
3a0a7 117 00 60 30 18 
3a0ab 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3a0af 119 30 60 00 00 
3a0b3 11a 00 00 00 00 
3a0b7 11b 00 00 00 7E 
3a0bb 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3a0bf 11d 00 00 00 00 
3a0c3 11e 00 00 00 00 
3a0c7 11f 00          | 	byte	$00[9]
3a0c8 120 06 0C 18 30 
3a0cc 121 60 30 18 0C 
3a0d0 122 06 00 00 00 
3a0d4 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
3a0d8 124 63 63 30 18 
3a0dc 125 18 18 00 18 
3a0e0 126 18 00 00 00 
3a0e4 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3a0e8 128 3E 63 63 7B 
3a0ec 129 7B 7B 3B 03 
3a0f0 12a 3E 00 00 00 
3a0f4 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3a0f8 12c 1C 36 63 63 
3a0fc 12d 7F 63 63 63 
3a100 12e 63 00 00 00 
3a104 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3a108 130 66 66 66 3E 
3a10c 131 66 66 66 66 
3a110 132 3F 00 00 00 
3a114 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3a118 134 66 43 03 03 
3a11c 135 03 03 43 66 
3a120 136 3C 00 00 00 
3a124 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
3a128 138 36 66 66 66 
3a12c 139 66 66 66 36 
3a130 13a 1F 00 00 00 
3a134 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
3a138 13c 66 46 16 1E 
3a13c 13d 16 06 46 66 
3a140 13e 7F 00 00 00 
3a144 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
3a148 140 66 46 16 1E 
3a14c 141 16 06 06 06 
3a150 142 0F 00 00 00 
3a154 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
3a158 144 66 43 03 03 
3a15c 145 7B 63 63 66 
3a160 146 5C 00 00 00 
3a164 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
3a168 148 63 63 63 7F 
3a16c 149 63 63 63 63 
3a170 14a 63 00 00 00 
3a174 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
3a178 14c 18 18 18 18 
3a17c 14d 18 18 18 18 | 	byte	$18[8]
3a180 14e 3C 00 00 00 
3a184 14f 00 00 00 78 
3a188 150 30 30 30 30 
3a18c 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
3a190 152 1E 00 00 00 
3a194 153 00 00 00 67 
3a198 154 66 66 36 1E 
3a19c 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
3a1a0 156 67 00 00 00 
3a1a4 157 00 00 00 0F 
3a1a8 158 06 06 06 06 
3a1ac 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3a1b0 15a 7F 00 00 00 
3a1b4 15b 00 00 00 63 
3a1b8 15c 77 7F 7F 6B 
3a1bc 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3a1c0 15e 63 00 00 00 
3a1c4 15f 00 00 00 63 
3a1c8 160 67 6F 7F 7B 
3a1cc 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3a1d0 162 63 00 00 00 
3a1d4 163 00 00 00 3E 
3a1d8 164 63 63 63 63 
3a1dc 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3a1e0 166 3E 00 00 00 
3a1e4 167 00 00 00 3F 
3a1e8 168 66 66 66 3E 
3a1ec 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3a1f0 16a 0F 00 00 00 
3a1f4 16b 00 00 00 3E 
3a1f8 16c 63 63 63 63 
3a1fc 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
3a200 16e 3E 30 70 00 
3a204 16f 00 00 00 3F 
3a208 170 66 66 66 3E 
3a20c 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
3a210 172 67 00 00 00 
3a214 173 00 00 00 3E 
3a218 174 63 63 06 1C 
3a21c 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3a220 176 3E 00 00 00 
3a224 177 00 00 00 7E 
3a228 178 7E 5A 18 18 
3a22c 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3a230 17a 3C 00 00 00 
3a234 17b 00 00 00 63 
3a238 17c 63 63 63 63 
3a23c 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3a240 17e 3E 00 00 00 
3a244 17f 00 00 00 63 
3a248 180 63 63 63 63 
3a24c 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
3a250 182 08 00 00 00 
3a254 183 00 00 00 63 
3a258 184 63 63 63 6B 
3a25c 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
3a260 186 36 00 00 00 
3a264 187 00 00 00 63 
3a268 188 63 36 3E 1C 
3a26c 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
3a270 18a 63 00 00 00 
3a274 18b 00 00 00 66 
3a278 18c 66 66 66 3C 
3a27c 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
3a280 18e 3C 00 00 00 
3a284 18f 00 00 00 7F 
3a288 190 63 61 30 18 
3a28c 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3a290 192 7F 00 00 00 
3a294 193 00 00 00 3C 
3a298 194 0C 0C 0C 0C 
3a29c 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3a2a0 196 3C 00 00 00 
3a2a4 197 00 00 00 00 
3a2a8 198 01 03 07 0E 
3a2ac 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3a2b0 19a 40 00 00 00 
3a2b4 19b 00 00 00 3C 
3a2b8 19c 30 30 30 30 
3a2bc 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3a2c0 19e 3C 00 00 00 
3a2c4 19f 1C 36 00 00 
3a2c8 1a0 00 00 00 00 
3a2cc 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a2d0 1a2 00 00 00 00 
3a2d4 1a3 00 00 00 00 
3a2d8 1a4 00 00 00 00 
3a2dc 1a5 00 00 00 00 
3a2e0 1a6 00          | 	byte	$00[17]
3a2e1 1a6 FF 00 00 0C 
3a2e5 1a7 18 00 00 00 
3a2e9 1a8 00 00 00 00 
3a2ed 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a2f1 1aa 00 00 00 00 
3a2f5 1ab 00 00 00 00 
3a2f9 1ac 00          | 	byte	$00[9]
3a2fa 1ac 1E 30 3E 33 
3a2fe 1ad 33 33 6E 00 
3a302 1ae 00 00 00 00 
3a306 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3a30a 1b0 1E 36 66 66 
3a30e 1b1 66 66 3E 00 
3a312 1b2 00 00 00 00 
3a316 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a31a 1b4 3E 63 03 03 
3a31e 1b5 03 63 3E 00 
3a322 1b6 00 00 00 00 
3a326 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3a32a 1b8 3C 36 33 33 
3a32e 1b9 33 33 6E 00 
3a332 1ba 00 00 00 00 
3a336 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a33a 1bc 3E 63 7F 03 
3a33e 1bd 03 63 3E 00 
3a342 1be 00 00 00 00 
3a346 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3a34a 1c0 0C 1E 0C 0C 
3a34e 1c1 0C 0C 1E 00 
3a352 1c2 00 00 00 00 
3a356 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a35a 1c4 6E 33 33 33 
3a35e 1c5 33 33 3E 30 
3a362 1c6 33 1E 00 00 
3a366 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3a36a 1c8 36 6E 66 66 
3a36e 1c9 66 66 67 00 
3a372 1ca 00 00 00 00 
3a376 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3a37a 1cc 1C 18 18 18 
3a37e 1cd 18 18 3C 00 
3a382 1ce 00 00 00 00 
3a386 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3a38a 1d0 70 60 60 60 
3a38e 1d1 60 60 60 66 
3a392 1d2 66 3C 00 00 
3a396 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3a39a 1d4 66 36 1E 1E 
3a39e 1d5 36 66 67 00 
3a3a2 1d6 00 00 00 00 
3a3a6 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3a3aa 1d8 18 18 18 18 
3a3ae 1d9 18 18       | 	byte	$18[6]
3a3b0 1da 3C 00 00 00 
3a3b4 1db 00 00 00 00 
3a3b8 1dc 00 00 37 7F 
3a3bc 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
3a3c0 1de 63 00 00 00 
3a3c4 1df 00 00 00 00 
3a3c8 1e0 00 00 3B 66 
3a3cc 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3a3d0 1e2 66 00 00 00 
3a3d4 1e3 00 00 00 00 
3a3d8 1e4 00 00 3E 63 
3a3dc 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3a3e0 1e6 3E 00 00 00 
3a3e4 1e7 00 00 00 00 
3a3e8 1e8 00 00 3B 66 
3a3ec 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3a3f0 1ea 3E 06 06 0F 
3a3f4 1eb 00 00 00 00 
3a3f8 1ec 00 00 6E 33 
3a3fc 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
3a400 1ee 3E 30 30 78 
3a404 1ef 00 00 00 00 
3a408 1f0 00 00 3B 6E 
3a40c 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
3a410 1f2 0F 00 00 00 
3a414 1f3 00 00 00 00 
3a418 1f4 00 00 3E 63 
3a41c 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
3a420 1f6 3E 00 00 00 
3a424 1f7 00 00 00 08 
3a428 1f8 0C 0C 3F 0C 
3a42c 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3a430 1fa 38 00 00 00 
3a434 1fb 00 00 00 00 
3a438 1fc 00 00 33 33 
3a43c 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
3a440 1fe 6E 00 00 00 
3a444 1ff 00 00 00 00 
3a448 200 00 00 63 63 
3a44c 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
3a450 202 1C 00 00 00 
3a454 203 00 00 00 00 
3a458 204 00 00 63 63 
3a45c 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
3a460 206 36 00 00 00 
3a464 207 00 00 00 00 
3a468 208 00 00 63 36 
3a46c 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
3a470 20a 63 00 00 00 
3a474 20b 00 00 00 00 
3a478 20c 00 00 63 63 
3a47c 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
3a480 20e 7E 60 30 1F 
3a484 20f 00 00 00 00 
3a488 210 00 00 7F 33 
3a48c 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
3a490 212 7F 00 00 00 
3a494 213 00 00 00 70 
3a498 214 18 18 18 0E 
3a49c 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
3a4a0 216 70 00 00 00 
3a4a4 217 00 00 00 18 
3a4a8 218 18 18 18 18 
3a4ac 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
3a4b0 21a 18 00 00 00 
3a4b4 21b 00 00 00 0E 
3a4b8 21c 18 18 18 70 
3a4bc 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
3a4c0 21e 0E 00 00 00 
3a4c4 21f 6E 3B 00 00 
3a4c8 220 00 00 00 00 
3a4cc 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a4d0 222 00 00 00 00 
3a4d4 223 00 00 00 00 
3a4d8 224 00 00       | 	byte	$00[10]
3a4da 224 08 1C 36 63 
3a4de 225 63 63 7F 00 
3a4e2 226 00 00 00 00 
3a4e6 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3a4ea 228 03 03 03 03 
3a4ee 229 43 66 3C 18 
3a4f2 22a 30 1E 00 00 
3a4f6 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3a4fa 22c 33 33 33 33 
3a4fe 22d 33 33       | 	byte	$33[6]
3a500 22e 6E 00 00 00 
3a504 22f 00 00 60 30 
3a508 230 18 00 3E 63 
3a50c 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
3a510 232 3E 00 00 00 
3a514 233 00 00 08 1C 
3a518 234 36 00 1E 30 
3a51c 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
3a520 236 6E 00 00 00 
3a524 237 00 00 00 00 
3a528 238 33 00 1E 30 
3a52c 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
3a530 23a 6E 00 00 00 
3a534 23b 00 00 1C 36 
3a538 23c 1C 00 33 33 
3a53c 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
3a540 23e 6E 00 00 00 
3a544 23f 00 00 60 30 
3a548 240 18 00 3E 63 
3a54c 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
3a550 242 3E 00 00 00 
3a554 243 00 00 00 00 
3a558 244 00 00 3E 63 
3a55c 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
3a560 246 3E 18 30 1E 
3a564 247 00 00 00 1C 
3a568 248 58 78 38 18 
3a56c 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
3a570 24a 3C 00 00 00 
3a574 24b 00 00 00 00 
3a578 24c 63 00 3E 63 
3a57c 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
3a580 24e 3E 00 00 00 
3a584 24f 66 33 00 3E 
3a588 250 63 63 63 63 
3a58c 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3a590 252 3E 00 00 00 
3a594 253 00 00 CC 66 
3a598 254 33 00 3E 63 
3a59c 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
3a5a0 256 3E 00 00 00 
3a5a4 257 00 00 18 3C 
3a5a8 258 66 00 1C 18 
3a5ac 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
3a5b0 25a 3C 00 00 00 
3a5b4 25b 30 18 00 7F 
3a5b8 25c 63 61 30 18 
3a5bc 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3a5c0 25e 7F 00 00 00 
3a5c4 25f 00 63 00 08 
3a5c8 260 1C 36 63 63 
3a5cc 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
3a5d0 262 63 00 00 00 
3a5d4 263 30 18 00 3C 
3a5d8 264 66 43 03 03 
3a5dc 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
3a5e0 266 3C 00 00 00 
3a5e4 267 30 18 00 7F 
3a5e8 268 66 46 16 1E 
3a5ec 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
3a5f0 26a 7F 00 00 00 
3a5f4 26b 0C 06 00 0F 
3a5f8 26c 06 06 06 06 
3a5fc 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3a600 26e 7F 00 00 00 
3a604 26f 30 18 00 1C 
3a608 270 18 18 18 18 
3a60c 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
3a610 272 3C 00 00 00 
3a614 273 00 00 08 1C 
3a618 274 36 00 3E 63 
3a61c 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
3a620 276 3E 00 00 00 
3a624 277 00 00 00 00 
3a628 278 63 00 3E 63 
3a62c 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
3a630 27a 3E 00 00 00 
3a634 27b 00 00 00 6F 
3a638 27c 46 26 06 06 
3a63c 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
3a640 27e 7F 00 00 00 
3a644 27f 00 00 00 6E 
3a648 280 4C 2C 0C 0C 
3a64c 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
3a650 282 1E 00 00 00 
3a654 283 30 18 00 3E 
3a658 284 63 63 06 1C 
3a65c 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3a660 286 3E 00 00 00 
3a664 287 00 00 60 30 
3a668 288 18 00 3E 63 
3a66c 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3a670 28a 3E 00 00 00 
3a674 28b 00 63 00 3E 
3a678 28c 63 63 63 63 
3a67c 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3a680 28e 3E 00 00 00 
3a684 28f 00 63 00 63 
3a688 290 63 63 63 63 
3a68c 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3a690 292 3E 00 00 00 
3a694 293 6C 38 00 7E 
3a698 294 7E 5A 18 18 
3a69c 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3a6a0 296 3C 00 00 00 
3a6a4 297 00 00 60 48 
3a6a8 298 2C 0C 3F 0C 
3a6ac 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3a6b0 29a 38 00 00 00 
3a6b4 29b 00 00 00 0F 
3a6b8 29c 26 36 1E 0E 
3a6bc 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3a6c0 29e 7F 00 00 00 
3a6c4 29f 00 00 00 00 
3a6c8 2a0 00 63 36 1C 
3a6cc 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3a6d0 2a2 00 00 00 00 
3a6d4 2a3 00 00       | 	byte	$00[6]
3a6d6 2a3 36 1C 08 00 
3a6da 2a4 3E 63 03 03 
3a6de 2a5 03 63 3E 00 
3a6e2 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3a6e6 2a7 30 18 0C 00 
3a6ea 2a8 1E 30 3E 33 
3a6ee 2a9 33 33 6E 00 
3a6f2 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3a6f6 2ab 60 30 18 00 
3a6fa 2ac 1C 18 18 18 
3a6fe 2ad 18 18 3C 00 
3a702 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3a706 2af 60 30 18 00 
3a70a 2b0 3E 63 63 63 
3a70e 2b1 63 63 3E 00 
3a712 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3a716 2b3 30 18 0C 00 
3a71a 2b4 33 33 33 33 
3a71e 2b5 33 33 6E 00 
3a722 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3a726 2b7 00 08 1C 36 
3a72a 2b8 63 63 7F 63 
3a72e 2b9 63 63 63 18 
3a732 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3a736 2bb 00 00 00 00 
3a73a 2bc 1E 30 3E 33 
3a73e 2bd 33 33 6E 18 
3a742 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3a746 2bf 00 7F 63 61 
3a74a 2c0 30 18 0C 06 
3a74e 2c1 43 63 7F 00 
3a752 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3a756 2c3 36 1C 08 00 
3a75a 2c4 7F 33 18 0C 
3a75e 2c5 06 63 7F 00 
3a762 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3a766 2c7 00 7F 66 46 
3a76a 2c8 16 1E 16 06 
3a76e 2c9 46 66 7F 18 
3a772 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3a776 2cb 00 00 00 00 
3a77a 2cc 3E 63 7F 03 
3a77e 2cd 03 63 3E 18 
3a782 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3a786 2cf 00 3C 66 03 
3a78a 2d0 1F 03 0F 03 
3a78e 2d1 03 66 3C 00 
3a792 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3a796 2d3 60 30 18 00 
3a79a 2d4 7F 33 18 0C 
3a79e 2d5 06 63 7F 00 
3a7a2 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3a7a6 2d7 00 3C 66 43 
3a7aa 2d8 03 03 03 03 
3a7ae 2d9 43 66 3C 00 
3a7b2 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3a7b6 2db 00 00 00 00 
3a7ba 2dc 3E 63 06 1C 
3a7be 2dd 30 63 3E 18 
3a7c2 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3a7c6 2df 00 00 00 00 
3a7ca 2e0 00 00       | 	byte	$00[6]
3a7cc 2e1 6C 36 1B 36 
3a7d0 2e2 6C 00 00 00 
3a7d4 2e3 00 00 00 00 
3a7d8 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a7dc 2e5 1B 36 6C 36 
3a7e0 2e6 1B 00 00 00 
3a7e4 2e7 88 22 88 22 
3a7e8 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
3a7ec 2e9 88 22 88 22 
3a7f0 2ea 88 22 88 22 
3a7f4 2eb AA 55 AA 55 
3a7f8 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
3a7fc 2ed AA 55 AA 55 
3a800 2ee AA 55 AA 55 
3a804 2ef BB EE BB EE 
3a808 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
3a80c 2f1 BB EE BB EE 
3a810 2f2 BB EE BB EE 
3a814 2f3 18 18 18 18 
3a818 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
3a81c 2f5 18 18 18 18 
3a820 2f6 18 18 18 18 
3a824 2f7 18 18 18 18 
3a828 2f8 18 18 18    | 	byte	$18[15]
3a82b 2f8 1F 18 18 18 
3a82f 2f9 18 18 18 18 
3a833 2fa 18 30 18 00 
3a837 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3a83b 2fc 63 7F 63 63 
3a83f 2fd 63 63 00 00 
3a843 2fe 00 1C 36 00 
3a847 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3a84b 300 63 7F 63 63 
3a84f 301 63 63 00 00 
3a853 302 00 36 1C 00 
3a857 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3a85b 304 1E 16 06 46 
3a85f 305 66 7F 00 00 
3a863 306 00 00 00 00 
3a867 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3a86b 308 1C 30 60 63 
3a86f 309 63 3E 18 30 
3a873 30a 1E 6C 6C 6C 
3a877 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3a87b 30c 6F 6C 6C 6C 
3a87f 30d 6C 6C 6C 6C 
3a883 30e 6C 6C 6C 6C 
3a887 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3a88b 310 6C 6C 6C 6C 
3a88f 311 6C 6C 6C 6C 
3a893 312 6C          | 	byte	$6c[9]
3a894 313 00 00 00 00 
3a898 314 00          | 	byte	$00[5]
3a899 314 7F 60 6F 6C 
3a89d 315 6C 6C 6C 6C 
3a8a1 316 6C 6C 6C 6C 
3a8a5 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3a8a9 318 6F 60 7F 00 
3a8ad 319 00 00 00 00 
3a8b1 31a 00 00 00 18 
3a8b5 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3a8b9 31c 61 30 18 0C 
3a8bd 31d 06 43 63 7F 
3a8c1 31e 00 00 00 00 
3a8c5 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3a8c9 320 00 7F 33 18 
3a8cd 321 0C 06 63 7F 
3a8d1 322 00 00 00 00 
3a8d5 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3a8d9 324 00 00 1F 18 
3a8dd 325 18 18 18 18 
3a8e1 326 18 18 18 18 
3a8e5 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3a8e9 328 18 18 F8 00 
3a8ed 329 00 00 00 00 
3a8f1 32a 00 00 00 18 
3a8f5 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3a8f9 32c 18 18 FF 00 
3a8fd 32d 00 00 00 00 
3a901 32e 00 00 00 00 
3a905 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a909 330 00 00 FF 18 
3a90d 331 18 18 18 18 
3a911 332 18 18 18 18 
3a915 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3a919 334 18 18 F8 18 
3a91d 335 18 18 18 18 
3a921 336 18 18 18 00 
3a925 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3a929 338 00 00 FF 00 
3a92d 339 00 00 00 00 
3a931 33a 00 00 00 18 
3a935 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3a939 33c 18 18 FF 18 
3a93d 33d 18 18 18 18 
3a941 33e 18 18 18 63 
3a945 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3a949 340 36 63 63 7F 
3a94d 341 63 63 63 63 
3a951 342 00 00 00 00 
3a955 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3a959 344 00 1E 30 3E 
3a95d 345 33 33 33 6E 
3a961 346 00 00 00 6C 
3a965 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3a969 348 EC 0C FC 00 
3a96d 349 00 00 00 00 
3a971 34a 00 00 00 00 
3a975 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a979 34c FC 0C EC 6C 
3a97d 34d 6C 6C 6C 6C 
3a981 34e 6C 6C 6C 6C 
3a985 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3a989 350 EF 00 FF 00 
3a98d 351 00 00 00 00 
3a991 352 00 00 00 00 
3a995 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a999 354 FF 00 EF 6C 
3a99d 355 6C 6C 6C 6C 
3a9a1 356 6C 6C 6C 6C 
3a9a5 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3a9a9 358 EC 0C EC 6C 
3a9ad 359 6C 6C 6C 6C 
3a9b1 35a 6C 6C 6C 00 
3a9b5 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3a9b9 35c FF 00 FF 00 
3a9bd 35d 00 00 00 00 
3a9c1 35e 00 00 00 6C 
3a9c5 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3a9c9 360 EF 00 EF 6C 
3a9cd 361 6C 6C 6C 6C 
3a9d1 362 6C 6C 6C 00 
3a9d5 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3a9d9 364 63 3E 63 63 
3a9dd 365 63 63 3E 63 
3a9e1 366 00 00 00 00 
3a9e5 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3a9e9 368 30 3C 36 33 
3a9ed 369 33 33 33 6E 
3a9f1 36a 00 00 00 00 
3a9f5 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3a9f9 36c 66 66 6F 66 
3a9fd 36d 66 66 36 1F 
3aa01 36e 00 00 00 36 
3aa05 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3aa09 370 66 66 66 66 
3aa0d 371 66 66       | 	byte	$66[6]
3aa0f 371 36 1F 00 00 
3aa13 372 00 00 63 00 
3aa17 373 7F 66 46 16 
3aa1b 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3aa1f 375 66 7F 00 00 
3aa23 376 00 6C 38 00 
3aa27 377 38 30 30 3C 
3aa2b 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
3aa2f 379 33 6E 00 00 
3aa33 37a 00 36 1C 00 
3aa37 37b 63 67 6F 7F 
3aa3b 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
3aa3f 37d 63 63 00 00 
3aa43 37e 00 30 18 00 
3aa47 37f 3C 18 18 18 
3aa4b 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3aa4f 381 18 3C 00 00 
3aa53 382 00 3C 66 00 
3aa57 383 3C 18 18 18 
3aa5b 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3aa5f 385 18 3C 00 00 
3aa63 386 00 00 00 36 
3aa67 387 1C 08 00 3E 
3aa6b 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3aa6f 389 63 3E 00 00 
3aa73 38a 00 18 18 18 
3aa77 38b 18 18 18 18 
3aa7b 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3aa7f 38d 00 00 00 00 
3aa83 38e 00 00 00 00 
3aa87 38f 00 00 00 00 | 	byte	$00[12]
3aa8b 390 F8 18 18 18 
3aa8f 391 18 18 18 18 
3aa93 392 18 FF FF FF 
3aa97 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3aa9b 394 FF FF FF FF 
3aa9f 395 FF FF FF FF 
3aaa3 396 FF          | 	byte	$ff[9]
3aaa4 397 00 00 00 00 
3aaa8 398 00 00 00    | 	byte	$00[7]
3aaab 398 FF FF FF FF 
3aaaf 399 FF FF FF FF 
3aab3 39a FF          | 	byte	$ff[9]
3aab4 39b 00 00 00 7E 
3aab8 39c 7E 5A 18 18 
3aabc 39d 18 18 18 18 
3aac0 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
3aac4 39f 1C 36 1C 63 
3aac8 3a0 63 63 63 63 
3aacc 3a1 63 63 63 63 
3aad0 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3aad4 3a3 FF FF FF FF 
3aad8 3a4 FF FF FF    | 	byte	$ff[7]
3aadb 3a4 00 00 00 00 
3aadf 3a5 00 00 00 00 
3aae3 3a6 00          | 	byte	$00[9]
3aae4 3a7 30 18 00 3E 
3aae8 3a8 63 63 63 63 
3aaec 3a9 63 63 63 63 
3aaf0 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3aaf4 3ab 00 00 00 1E 
3aaf8 3ac 33 33 33 1B 
3aafc 3ad 33 63 63 63 
3ab00 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
3ab04 3af 1C 36 00 3E 
3ab08 3b0 63 63 63 63 
3ab0c 3b1 63 63 63 63 
3ab10 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3ab14 3b3 30 18 00 63 
3ab18 3b4 67 6F 7F 7B 
3ab1c 3b5 73 63 63 63 
3ab20 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3ab24 3b7 00 00 60 30 
3ab28 3b8 18 00 3B 66 
3ab2c 3b9 66 66 66 66 
3ab30 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3ab34 3bb 00 00 36 1C 
3ab38 3bc 08 00 3B 66 
3ab3c 3bd 66 66 66 66 
3ab40 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3ab44 3bf 36 1C 00 3E 
3ab48 3c0 63 63 06 1C 
3ab4c 3c1 30 60 63 63 
3ab50 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3ab54 3c3 00 00 36 1C 
3ab58 3c4 08 00 3E 63 
3ab5c 3c5 06 1C 30 63 
3ab60 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3ab64 3c7 30 18 00 3F 
3ab68 3c8 66 66 66 3E 
3ab6c 3c9 36 66 66 66 
3ab70 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3ab74 3cb 30 18 00 63 
3ab78 3cc 63 63 63 63 
3ab7c 3cd 63 63 63 63 
3ab80 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3ab84 3cf 00 00 60 30 
3ab88 3d0 18 00 3B 6E 
3ab8c 3d1 66 06 06 06 
3ab90 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3ab94 3d3 66 33 00 63 
3ab98 3d4 63 63 63 63 
3ab9c 3d5 63 63 63 63 
3aba0 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3aba4 3d7 00 00 60 30 
3aba8 3d8 18 00 63 63 
3abac 3d9 63 63 63 63 
3abb0 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
3abb4 3db 30 18 00 66 
3abb8 3dc 66 66 66 3C 
3abbc 3dd 18 18 18 18 
3abc0 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
3abc4 3df 00 00 00 08 
3abc8 3e0 0C 0C 3F 0C 
3abcc 3e1 0C 0C 0C 6C 
3abd0 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
3abd4 3e3 30 18 00 00 
3abd8 3e4 00 00 00 00 
3abdc 3e5 00 00 00 00 
3abe0 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3abe4 3e7 00 00 00 00 
3abe8 3e8 00 00 00 00 | 	byte	$00[8]
3abec 3e9 7F 00 00 00 
3abf0 3ea 00 00 00 00 
3abf4 3eb 66 33 00 00 
3abf8 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3abfc 3ed 00 00 00 00 
3ac00 3ee 00 00 00 00 
3ac04 3ef 00 00 00 00 
3ac08 3f0 00 00 00 00 
3ac0c 3f1 00 00 00 00 
3ac10 3f2 00          | 	byte	$00[21]
3ac11 3f2 0C 06 3C 36 
3ac15 3f3 1C 00 00 00 
3ac19 3f4 00 00 00 00 
3ac1d 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ac21 3f6 00 00 00 63 
3ac25 3f7 3E 00 00 00 
3ac29 3f8 00 00 00 00 
3ac2d 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ac31 3fa 00 00 00 00 
3ac35 3fb 3E 63 06 1C 
3ac39 3fc 36 63 63 36 
3ac3d 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
3ac41 3fe 00 00 00 00 
3ac45 3ff 00 00 00 00 | 	byte	$00[8]
3ac49 400 18 00 7E 00 
3ac4d 401 18 00 00 00 
3ac51 402 00 00 00 00 
3ac55 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ac59 404 00 00 00 00 
3ac5d 405 00 00 00 00 | 	byte	$00[8]
3ac61 406 18 30 1E 00 
3ac65 407 00 00 1C 36 
3ac69 408 36 1C 00 00 
3ac6d 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
3ac71 40a 00 00 00 00 
3ac75 40b 63 00 00 00 
3ac79 40c 00 00 00 00 
3ac7d 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ac81 40e 00 00 00 18 
3ac85 40f 18 00 00 00 
3ac89 410 00 00 00 00 
3ac8d 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ac91 412 00 00 00 00 
3ac95 413 00          | 	byte	$00[5]
3ac96 413 CC 66 33 00 
3ac9a 414 33 33 33 33 
3ac9e 415 33 33 6E 00 
3aca2 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3aca6 417 00 3F 66 66 
3acaa 418 66 3E 36 66 
3acae 419 66 66 6F 00 
3acb2 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3acb6 41b 36 1C 08 00 
3acba 41c 3B 6E 66 06 
3acbe 41d 06 06 0F 00 
3acc2 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3acc6 41f 00 00 00 7E 
3acca 420 7E 7E 7E 7E 
3acce 421 7E 7E 00 00 
3acd2 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3acd6 423 00 00 00 00 
3acda 424 00 00 00 00 
3acde 425 00 00 00 00 
3ace2 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ace4 427             | 'vga_font       file "vgafont.def"
3ace4 427 00 00 00 00 
      ...             
3ad14 433 00 00 00 00 
3ad18 434 00 00 00    | st_font        file "st4font.def"
3ad1b 434 FF FF 00 00 
3ad1f 435 00 00 00 00 
3ad23 436 00 18 18 18 
3ad27 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3ad2b 438 18 18 18 18 
3ad2f 439 18 18 18 18 
3ad33 43a 18          | 	byte	$18[9]
3ad34 43b 00 00 00 00 
3ad38 43c 00 00 00    | 	byte	$00[7]
3ad3b 43c FF FF 18 18 
3ad3f 43d 18 18 18 18 
3ad43 43e 18 18 18 18 
3ad47 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3ad4b 440 FF FF 00 00 
3ad4f 441 00 00 00 00 
3ad53 442 00 18 18 18 
3ad57 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3ad5b 444 1F 1F 18 18 
3ad5f 445 18 18 18 18 
3ad63 446 18 18 18 18 
3ad67 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3ad6b 448 F8 F8 18 18 
3ad6f 449 18 18 18 18 
3ad73 44a 18 00 00 00 
3ad77 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3ad7b 44c 1F 1F 18 18 
3ad7f 44d 18 18 18 18 
3ad83 44e 18 00 00 00 
3ad87 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3ad8b 450 F8 F8 18 18 
3ad8f 451 18 18 18 18 
3ad93 452 18 18 18 18 
3ad97 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3ad9b 454 1F 1F 00 00 
3ad9f 455 00 00 00 00 
3ada3 456 00 18 18 18 
3ada7 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3adab 458 F8 F8 00 00 
3adaf 459 00 00 00 00 
3adb3 45a 00 18 18 18 
3adb7 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3adbb 45c FF FF 18 18 
3adbf 45d 18 18 18 18 
3adc3 45e 18 00 00 18 
3adc7 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3adcb 460 66 7E 7E 66 
3adcf 461 66 66 66 30 
3add3 462 18 00 00 7E 
3add7 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3addb 464 3E 06 06 06 
3addf 465 06 7E 7E 18 
3ade3 466 0C 30 18 3C 
3ade7 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3adeb 468 06 06 06 66 
3adef 469 66 7E 3C 00 
3adf3 46a 00 30 18 66 
3adf7 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3adfb 46c 7E 7E 76 76 
3adff 46d 66 66 66 00 
3ae03 46e 00 30 18 7C 
3ae07 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3ae0b 470 1C 38 70 60 
3ae0f 471 60 7E 3E 00 
3ae13 472 00 30 18 7E 
3ae17 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3ae1b 474 18 0C 0C 06 
3ae1f 475 06 7E 7E 00 
3ae23 476 00 18 18 00 
3ae27 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3ae2b 478 18 18 0C 0C 
3ae2f 479 06 7E 7E 00 
3ae33 47a 00 30 18 3C 
3ae37 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3ae3b 47c 66 66 66 66 
3ae3f 47d 66          | 	byte	$66[5]
3ae40 47e 7E 3C 00 00 
3ae44 47f 00 00 06 06 
3ae48 480 06 06 16 1E 
3ae4c 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
3ae50 482 7E 7E 00 00 
3ae54 483 00 00 00 00 
3ae58 484 00 3C 7C 60 
3ae5c 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3ae60 486 7E 7C 30 18 
3ae64 487 00 00 00 00 
3ae68 488 00 3C 7E 66 
3ae6c 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
3ae70 48a 7E 7C 18 0C 
3ae74 48b 00 00 30 18 
3ae78 48c 00 3C 3E 06 
3ae7c 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3ae80 48e 7E 7C 00 00 
3ae84 48f 00 00 30 18 
3ae88 490 00 3E 7E 66 
3ae8c 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3ae90 492 66 66 00 00 
3ae94 493 00 00 30 18 
3ae98 494 00 7C 7E 06 
3ae9c 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3aea0 496 7E 3E 00 00 
3aea4 497 00 00 30 18 
3aea8 498 00 7E 7E 30 
3aeac 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3aeb0 49a 7E 7E 00 00 
3aeb4 49b 00 00 18 18 
3aeb8 49c 00 7E 7E 30 
3aebc 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3aec0 49e 7E 7E 00 00 
3aec4 49f 00 00 30 18 
3aec8 4a0 00 3C 7E 66 
3aecc 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3aed0 4a2 7E 3C 00 00 
3aed4 4a3 00 00 1C 1C 
3aed8 4a4 18 18 38 3C 
3aedc 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3aee0 4a6 3C 3C 00 00 
3aee4 4a7 00 00 00 00 
3aee8 4a8 00 00 00 00 
3aeec 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aef0 4aa 00 00 00 00 
3aef4 4ab 00 00       | 	byte	$00[6]
3aef6 4ab 18 18 18 18 
3aefa 4ac 18 18 18 18 | 	byte	$18[8]
3aefe 4ad 00 00 18 18 
3af02 4ae 00 00 00 00 
3af06 4af 66 66 66 66 
3af0a 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3af0e 4b1 00 00 00 00 
3af12 4b2 00 00 00 00 
3af16 4b3 00          | 	byte	$00[9]
3af17 4b3 66 66 FF FF 
3af1b 4b4 66 66 FF FF 
3af1f 4b5 66 66 00 00 
3af23 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3af27 4b7 7C 7E 06 06 
3af2b 4b8 3E 7C 60 60 
3af2f 4b9 7E 3E 18 18 
3af33 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3af37 4bb 66 30 30 18 
3af3b 4bc 18 0C 0C 66 
3af3f 4bd 66 00 00 00 
3af43 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3af47 4bf 66 66 3C 1C 
3af4b 4c0 1C FC FE 66 
3af4f 4c1 66 FE FC 00 
3af53 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3af57 4c3 18 18 18 18 
3af5b 4c4 00 00 00 00 
3af5f 4c5 00 00 00 00 
3af63 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3af67 4c7 18 1C 0C 0C 
3af6b 4c8 0C 0C 0C 0C 
3af6f 4c9 1C 18 30 00 
3af73 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3af77 4cb 18 38 30 30 
3af7b 4cc 30 30 30 30 
3af7f 4cd 38 18 0C 00 
3af83 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3af87 4cf 66 66 3C 3C 
3af8b 4d0 FF FF 3C 3C 
3af8f 4d1 66 66 00 00 
3af93 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3af97 4d3 00 18 18 18 
3af9b 4d4 7E 7E 18 18 
3af9f 4d5 18 00 00 00 
3afa3 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3afa7 4d7 00 00 00 00 
3afab 4d8 00 00       | 	byte	$00[6]
3afad 4d9 18 18 18 18 
3afb1 4da 18          | 	byte	$18[5]
3afb2 4da 0C 04 00 00 
3afb6 4db 00 00 00 00 
3afba 4dc 7E 7E 00 00 
3afbe 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3afc2 4de 00 00 00 00 
3afc6 4df 00 00 00 00 
3afca 4e0 00 00 00 00 
3afce 4e1 00          | 	byte	$00[13]
3afcf 4e1 18 18 18 00 
3afd3 4e2 00 00 00 60 
3afd7 4e3 60 60 30 30 
3afdb 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3afdf 4e5 06 06 06 00 
3afe3 4e6 00 00 00 3C 
3afe7 4e7 7E 66 66 66 
3afeb 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3afef 4e9 66 7E 3C 00 
3aff3 4ea 00 00 00 18 
3aff7 4eb 18 1C 1C 18 
3affb 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3afff 4ed 18 7E 7E 00 
3b003 4ee 00 00 00 3C 
3b007 4ef 7E 66 66 30 
3b00b 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3b00f 4f1 0C 7E 7E 00 
3b013 4f2 00 00 00 7E 
3b017 4f3 7E 30 30 18 
3b01b 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3b01f 4f5 66 7E 3C 00 
3b023 4f6 00 00 00 30 
3b027 4f7 30 38 38 3C 
3b02b 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3b02f 4f9 7E 30 30 00 
3b033 4fa 00 00 00 7E 
3b037 4fb 7E 06 06 3E 
3b03b 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3b03f 4fd 66 7E 3C 00 
3b043 4fe 00 00 00 38 
3b047 4ff 3C 0E 06 06 
3b04b 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3b04f 501 66 7E 3C 00 
3b053 502 00 00 00 7E 
3b057 503 7E 60 60 30 
3b05b 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3b05f 505 0C 0C 0C 00 
3b063 506 00 00 00 3C 
3b067 507 7E 66 66 3C 
3b06b 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3b06f 509 66 7E 3C 00 
3b073 50a 00 00 00 3C 
3b077 50b 7E 66 66 7E 
3b07b 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3b07f 50d 70 3C 1C 00 
3b083 50e 00 00 00 00 
3b087 50f 00 00 18 18 
3b08b 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3b08f 511 18 18 18 00 
3b093 512 00 00 00 00 
3b097 513 00 00 18 18 
3b09b 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3b09f 515 18 18 18 0C 
3b0a3 516 04 00 00 00 
3b0a7 517 70 38 1C 0E 
3b0ab 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3b0af 519 70 00 00 00 
3b0b3 51a 00 00 00 00 
3b0b7 51b 00 00 7E 7E 
3b0bb 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3b0bf 51d 00 00 00 00 
3b0c3 51e 00 00 00 00 | 	byte	$00[8]
3b0c7 51f 0E 1C 38 70 
3b0cb 520 E0 70 38 1C 
3b0cf 521 0E 00 00 00 
3b0d3 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3b0d7 523 7E 66 66 30 
3b0db 524 30 18 18 18 
3b0df 525 00 18 18 00 
3b0e3 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3b0e7 527 7E 66 66 66 
3b0eb 528 66 36 06 66 
3b0ef 529 66 7E 3C 00 
3b0f3 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3b0f7 52b 3C 7E 66 66 
3b0fb 52c 66 7E 7E 66 
3b0ff 52d 66 66 66 00 
3b103 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3b107 52f 7E 66 66 7E 
3b10b 530 3E 66 66 66 
3b10f 531 66 7E 3E 00 
3b113 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3b117 533 7E 66 66 06 
3b11b 534 06 06 06 66 
3b11f 535 66 7E 3C 00 
3b123 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3b127 537 7E 66 66 66 
3b12b 538 66 66 66 66 
3b12f 539 66 7E 3E 00 
3b133 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3b137 53b 7E 06 06 3E 
3b13b 53c 3E 06 06 06 
3b13f 53d 06 7E 7E 00 
3b143 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3b147 53f 7E 06 06 3E 
3b14b 540 3E 06 06 06 
3b14f 541 06 06 06 00 
3b153 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3b157 543 7E 06 06 76 
3b15b 544 76 66 66 66 
3b15f 545 66 7E 3C 00 
3b163 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3b167 547 66 66 66 7E 
3b16b 548 7E 66 66 66 
3b16f 549 66 66 66 00 
3b173 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3b177 54b 7E 18 18 18 
3b17b 54c 18 18 18 18 
3b17f 54d 18 7E 7E 00 
3b183 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3b187 54f 60 60 60 60 
3b18b 550 60 60 60    | 	byte	$60[7]
3b18e 551 66 66 7E 3C 
3b192 552 00 00 00 00 
3b196 553 66 66 36 36 
3b19a 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3b19e 555 66 66 C6 C6 
3b1a2 556 00 00 00 00 
3b1a6 557 06 06 06 06 
3b1aa 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3b1ae 559 06 06 7E 7E 
3b1b2 55a 00 00 00 00 
3b1b6 55b C6 C6 EE EE 
3b1ba 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3b1be 55d C6 C6 C6 C6 
3b1c2 55e 00 00 00 00 
3b1c6 55f 66 66 66 6E 
3b1ca 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3b1ce 561 76 66 66 66 
3b1d2 562 00 00 00 00 
3b1d6 563 3C 7E 66 66 
3b1da 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3b1de 565 66 66 7E 3C 
3b1e2 566 00 00 00 00 
3b1e6 567 3E 7E 66 66 
3b1ea 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3b1ee 569 06 06 06 06 
3b1f2 56a 00 00 00 00 
3b1f6 56b 3C 7E 66 66 
3b1fa 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3b1fe 56d 66 56 3E 6C 
3b202 56e 00 00 00 00 
3b206 56f 3E 7E 66 66 
3b20a 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3b20e 571 66 66 C6 C6 
3b212 572 00 00 00 00 
3b216 573 7C 7E 06 06 
3b21a 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3b21e 575 60 60 7E 3E 
3b222 576 00 00 00 00 
3b226 577 7E 7E 18 18 
3b22a 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3b22e 579 18 18 18 18 
3b232 57a 00 00 00 00 
3b236 57b 66 66 66 66 
3b23a 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3b23e 57d 66 66 7E 3C 
3b242 57e 00 00 00 00 
3b246 57f 66 66 66 66 
3b24a 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3b24e 581 3C 3C 18 18 
3b252 582 00 00 00 00 
3b256 583 C6 C6 C6 C6 
3b25a 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3b25e 585 FE EE C6 82 
3b262 586 00 00 00 00 
3b266 587 66 66 66 3C 
3b26a 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3b26e 589 3C 66 66 66 
3b272 58a 00 00 00 00 
3b276 58b 66 66 66 66 
3b27a 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3b27e 58d 18 18 18 18 
3b282 58e 00 00 00 00 
3b286 58f 7E 7E 30 30 
3b28a 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3b28e 591 06 06 7E 7E 
3b292 592 00 00 00 00 
3b296 593 3C 3C 0C 0C 
3b29a 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3b29e 595 0C 0C 3C 3C 
3b2a2 596 00 00 00 00 
3b2a6 597 06 06 0C 0C 
3b2aa 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3b2ae 599 60 60 C0 C0 
3b2b2 59a 00 00 00 00 
3b2b6 59b 3C 3C 30 30 
3b2ba 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3b2be 59d 30 30 3C 3C 
3b2c2 59e 00 00 00 00 
3b2c6 59f 18 18 3C 3C 
3b2ca 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3b2ce 5a1 00 00 00 00 
3b2d2 5a2 00 00 00 00 
3b2d6 5a3 00 00 00 00 
3b2da 5a4 00 00 00 00 
3b2de 5a5 00 00       | 	byte	$00[18]
3b2e0 5a6 FE FE 00 00 
3b2e4 5a7 00 00 0C 0C 
3b2e8 5a8 18 18 00 00 
3b2ec 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3b2f0 5aa 00 00 00 00 
3b2f4 5ab 00 00 00 00 
3b2f8 5ac 00          | 	byte	$00[9]
3b2f9 5ac 3C 7C 60 7C 
3b2fd 5ad 7E 66 66 7E 
3b301 5ae 7C 00 00 00 
3b305 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3b309 5b0 3E 7E 66 66 
3b30d 5b1 66 66 66 7E 
3b311 5b2 3E 00 00 00 
3b315 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3b319 5b4 3C 3E 06 06 
3b31d 5b5 06 06 06 7E 
3b321 5b6 7C 00 00 00 
3b325 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3b329 5b8 7C 7E 66 66 
3b32d 5b9 66 66 66 7E 
3b331 5ba 7C 00 00 00 
3b335 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3b339 5bc 3C 7E 66 66 
3b33d 5bd 7E 06 06 7E 
3b341 5be 7C 00 00 00 
3b345 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3b349 5c0 18 7E 7E 18 
3b34d 5c1 18 18 18 18 
3b351 5c2 18 00 00 00 
3b355 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3b359 5c4 7C 7E 66 66 
3b35d 5c5 66 66 7E 7C 
3b361 5c6 60 7E 3E 00 
3b365 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3b369 5c8 3E 7E 66 66 
3b36d 5c9 66 66 66 66 
3b371 5ca 66 00 00 00 
3b375 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3b379 5cc 1C 1C 18 18 
3b37d 5cd 18 18 18 3C 
3b381 5ce 3C 00 00 00 
3b385 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3b389 5d0 30 30 30 30 
3b38d 5d1 30 30 30 30 
3b391 5d2 30          | 	byte	$30[9]
3b392 5d2 3E 1E 00 00 
3b396 5d3 06 06 06 36 
3b39a 5d4 36 1E 1E 1E 
3b39e 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3b3a2 5d6 00 00 00 00 
3b3a6 5d7 1C 1C 18 18 
3b3aa 5d8 18 18 18 18 
3b3ae 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3b3b2 5da 00 00 00 00 
3b3b6 5db 00 00 00    | 	byte	$00[7]
3b3b9 5dc 6C FE FE D6 
3b3bd 5dd D6 C6 C6 C6 
3b3c1 5de C6 00 00 00 
3b3c5 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3b3c9 5e0 3E 7E 66 66 
3b3cd 5e1 66 66 66 66 
3b3d1 5e2 66 00 00 00 
3b3d5 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3b3d9 5e4 3C 7E 66 66 
3b3dd 5e5 66 66 66 7E 
3b3e1 5e6 3C 00 00 00 
3b3e5 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3b3e9 5e8 3E 7E 66 66 
3b3ed 5e9 66 66 66 7E 
3b3f1 5ea 3E 06 06 00 
3b3f5 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3b3f9 5ec 7C 7E 66 66 
3b3fd 5ed 66 66 66 7E 
3b401 5ee 7C 60 60 00 
3b405 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3b409 5f0 3E 7E 66 06 
3b40d 5f1 06 06 06 06 
3b411 5f2 06 00 00 00 
3b415 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3b419 5f4 7C 7E 06 0E 
3b41d 5f5 3C 70 60 7E 
3b421 5f6 3E 00 00 00 
3b425 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3b429 5f8 7E 7E 18 18 
3b42d 5f9 18 18 18 78 
3b431 5fa 70 00 00 00 
3b435 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3b439 5fc 66 66 66 66 
3b43d 5fd 66 66 66    | 	byte	$66[7]
3b440 5fe 7E 7C 00 00 
3b444 5ff 00 00 00 00 
3b448 600 00 66 66 66 
3b44c 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
3b450 602 18 18 00 00 
3b454 603 00 00 00 00 
3b458 604 00 C6 C6 D6 
3b45c 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3b460 606 C6 82 00 00 
3b464 607 00 00 00 00 
3b468 608 00 66 66 3C 
3b46c 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3b470 60a 66 66 00 00 
3b474 60b 00 00 00 00 
3b478 60c 00 66 66 66 
3b47c 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3b480 60e 7C 60 7E 3E 
3b484 60f 00 00 00 00 
3b488 610 00 7E 7E 30 
3b48c 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3b490 612 7E 7E 00 00 
3b494 613 00 00 30 18 
3b498 614 18 18 18 0C 
3b49c 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3b4a0 616 18 30 00 00 
3b4a4 617 00 00 18 18 
3b4a8 618 18 18 18 18 
3b4ac 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b4b0 61a 18 18 00 00 
3b4b4 61b 00 00 0C 18 
3b4b8 61c 18 18 18 30 
3b4bc 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3b4c0 61e 18 0C 00 00 
3b4c4 61f 00 00 6C 7E 
3b4c8 620 36 00 00 00 
3b4cc 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3b4d0 622 00 00 00 00 
3b4d4 623 00 00 00 00 
3b4d8 624 00          | 	byte	$00[9]
3b4d9 624 18 18 18 18 
3b4dd 625 18 18 00 00 
3b4e1 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3b4e4 627             | 'amiga_font     file "amigafont.def"
3b4e4 627 00 6C FE FE 
3b4e8 628 7C 38 10 00 
3b4ec 629 18 18 18 F8 
3b4f0 62a F8 18 18 18 | a8_font        file "atari8.fnt"
3b4f4 62b C0 C0 C0 C0 
3b4f8 62c C0 C0 C0 C0 | 	byte	$c0[8]
3b4fc 62d 18 18 18 1F 
3b500 62e 1F 00 00 00 
3b504 62f 18 18 18 1F 
3b508 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3b50c 631 00 00 00 1F 
3b510 632 1F 18 18 18 
3b514 633 C0 E0 70 38 
3b518 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3b51c 635 03 07 0E 1C 
3b520 636 38 70 E0 C0 
3b524 637 80 C0 E0 F0 
3b528 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3b52c 639 00 00 00 00 
3b530 63a F0 F0 F0 F0 
3b534 63b 01 03 07 0F 
3b538 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3b53c 63d F0 F0 F0 F0 
3b540 63e 00 00 00 00 
3b544 63f 0F 0F 0F 0F 
3b548 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3b54c 641 FF FF 00 00 
3b550 642 00 00 00 00 
3b554 643 00 00 00 00 
3b558 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3b55c 645 00 00 00 00 
3b560 646 0F 0F 0F 0F 
3b564 647 00 38 38 EE 
3b568 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3b56c 649 00 00 00 F8 
3b570 64a F8 18 18 18 
3b574 64b 00 00 00 FF 
3b578 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3b57c 64d 18 18 18 FF 
3b580 64e FF 18 18 18 
3b584 64f 00 00 3C 7E 
3b588 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3b58c 651 00 00 00 00 
3b590 652 FF FF FF FF 
3b594 653 03 03 03 03 
3b598 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3b59c 655 00 00 00 FF 
3b5a0 656 FF 18 18 18 
3b5a4 657 18 18 18 FF 
3b5a8 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3b5ac 659 0F 0F 0F 0F 
3b5b0 65a 0F 0F 0F 0F | 	byte	$0f[8]
3b5b4 65b 18 18 18 F8 
3b5b8 65c F8 00 00 00 
3b5bc 65d 1E 06 1E 06 
3b5c0 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3b5c4 65f 00 18 3C 7E 
3b5c8 660 18 18 18 00 
3b5cc 661 00 18 18 18 
3b5d0 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3b5d4 663 00 18 0C 7E 
3b5d8 664 0C 18 00 00 
3b5dc 665 00 18 30 7E 
3b5e0 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3b5e4 667 00 00 00 00 
3b5e8 668 00 00 00 00 
3b5ec 669 00          | 	byte	$00[9]
3b5ed 669 18 18 18 18 
3b5f1 66a 00 18 00 00 
3b5f5 66b 66 66 66 00 
3b5f9 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3b5fd 66d 66 FF 66 66 
3b601 66e FF 66 00 18 
3b605 66f 7C 06 3C 60 
3b609 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3b60d 671 66 36 18 0C 
3b611 672 66 62 00 38 
3b615 673 6C 38 1C F6 
3b619 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3b61d 675 18 18 18 00 
3b621 676 00 00 00 00 
3b625 677 70 38 18 18 
3b629 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3b62d 679 0E 1C 18 18 
3b631 67a 1C 0E 00 00 
3b635 67b 66 3C FF 3C 
3b639 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3b63d 67d 18 18 7E 18 
3b641 67e 18 00 00 00 
3b645 67f 00 00 00 00 
3b649 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3b64d 681 00 00 7E 00 
3b651 682 00 00 00 00 
3b655 683 00 00 00 00 
3b659 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3b65d 685 60 30 18 0C 
3b661 686 06 02 00 00 
3b665 687 3C 66 76 6E 
3b669 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3b66d 689 18 1C 18 18 
3b671 68a 18 7E 00 00 
3b675 68b 3C 66 30 18 
3b679 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3b67d 68d 7E 30 18 30 
3b681 68e 66 3C 00 00 
3b685 68f 30 38 3C 36 
3b689 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3b68d 691 7E 06 3E 60 
3b691 692 66 3C 00 00 
3b695 693 3C 06 3E 66 
3b699 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3b69d 695 7E 60 30 18 
3b6a1 696 0C 0C 00 00 
3b6a5 697 3C 66 3C 66 
3b6a9 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3b6ad 699 3C 66 7C 60 
3b6b1 69a 30 1C 00 00 
3b6b5 69b 00 18 18 00 
3b6b9 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3b6bd 69d 00 18 18 00 
3b6c1 69e 18 18 0C 60 
3b6c5 69f 30 18 0C 18 
3b6c9 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3b6cd 6a1 00 7E 00 00 
3b6d1 6a2 7E 00 00 06 
3b6d5 6a3 0C 18 30 18 
3b6d9 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3b6dd 6a5 3C 66 30 18 
3b6e1 6a6 00 18 00 00 
3b6e5 6a7 3C 66 76 76 
3b6e9 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3b6ed 6a9 18 3C 66 66 
3b6f1 6aa 7E 66 00 00 
3b6f5 6ab 3E 66 3E 66 
3b6f9 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3b6fd 6ad 3C 66 06 06 
3b701 6ae 66 3C 00 00 
3b705 6af 1E 36 66 66 
3b709 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3b70d 6b1 7E 06 3E 06 
3b711 6b2 06 7E 00 00 
3b715 6b3 7E 06 3E 06 
3b719 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3b71d 6b5 7C 06 06 76 
3b721 6b6 66 7C 00 00 
3b725 6b7 66 66 7E 66 
3b729 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3b72d 6b9 7E 18 18 18 
3b731 6ba 18 7E 00 00 
3b735 6bb 60 60 60 60 
3b739 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3b73d 6bd 66 36 1E 1E 
3b741 6be 36 66 00 00 
3b745 6bf 06 06 06 06 
3b749 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3b74d 6c1 C6 EE FE D6 
3b751 6c2 C6 C6 00 00 
3b755 6c3 66 6E 7E 7E 
3b759 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3b75d 6c5 3C 66 66 66 
3b761 6c6 66 3C 00 00 
3b765 6c7 3E 66 66 3E 
3b769 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3b76d 6c9 3C 66 66 66 
3b771 6ca 36 6C 00 00 
3b775 6cb 3E 66 66 3E 
3b779 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3b77d 6cd 3C 06 3C 60 
3b781 6ce 60 3C 00 00 
3b785 6cf 7E 18 18 18 
3b789 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3b78d 6d1 66 66 66 66 
3b791 6d2 66          | 	byte	$66[5]
3b792 6d2 7E 00 00 66 
3b796 6d3 66 66 66 3C 
3b79a 6d4 18 00 00 C6 
3b79e 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3b7a2 6d6 C6 00 00 66 
3b7a6 6d7 66 3C 3C 66 
3b7aa 6d8 66 00 00 66 
3b7ae 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3b7b2 6da 18 00 00 7E 
3b7b6 6db 30 18 0C 06 
3b7ba 6dc 7E 00 00 78 
3b7be 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3b7c2 6de 78 00 00 02 
3b7c6 6df 06 0C 18 30 
3b7ca 6e0 60 00 00 1E 
3b7ce 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3b7d2 6e2 1E 00 00 10 
3b7d6 6e3 38 6C C6 00 
3b7da 6e4 00 00 00 00 
3b7de 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b7e2 6e6 FF 00 00 18 
3b7e6 6e7 3C 7E 7E 3C 
3b7ea 6e8 18 00 00 00 
3b7ee 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3b7f2 6ea 7C 00 00 06 
3b7f6 6eb 06 3E 66 66 
3b7fa 6ec 3E 00 00 00 
3b7fe 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3b802 6ee 3C 00 00 60 
3b806 6ef 60 7C 66 66 
3b80a 6f0 7C 00 00 00 
3b80e 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3b812 6f2 3C 00 00 70 
3b816 6f3 18 7C 18 18 
3b81a 6f4 18 00 00 00 
3b81e 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3b822 6f6 60 3E 00 06 
3b826 6f7 06 3E 66 66 
3b82a 6f8 66 00 00 18 
3b82e 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3b832 6fa 3C 00 00 60 
3b836 6fb 00 60 60 60 
3b83a 6fc 60 3C 00 06 
3b83e 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3b842 6fe 66 00 00 1C 
3b846 6ff 18 18 18 18 
3b84a 700 3C 00 00 00 
3b84e 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3b852 702 C6 00 00 00 
3b856 703 3E 66 66 66 
3b85a 704 66 00 00 00 
3b85e 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3b862 706 3C 00 00 00 
3b866 707 3E 66 66 3E 
3b86a 708 06 06 00 00 
3b86e 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3b872 70a 60 60 00 00 
3b876 70b 3E 66 06 06 
3b87a 70c 06 00 00 00 
3b87e 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3b882 70e 3E 00 00 18 
3b886 70f 7E 18 18 18 
3b88a 710 70 00 00 00 
3b88e 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3b892 712 7C 00 00 00 
3b896 713 66 66 66 3C 
3b89a 714 18 00 00 00 
3b89e 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3b8a2 716 6C 00 00 00 
3b8a6 717 66 3C 18 3C 
3b8aa 718 66 00 00 00 
3b8ae 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3b8b2 71a 30 1E 00 00 
3b8b6 71b 7E 30 18 0C 
3b8ba 71c 7E 00 00 18 
3b8be 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3b8c2 71e 3C 00 18 18 
3b8c6 71f 18 18 18 18 
3b8ca 720 18 18 00 7E 
3b8ce 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3b8d2 722 60 00 10 18 
3b8d6 723 1C 1E 1C 18 
3b8da 724 10 00 08 18 
3b8de 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3b8e2 726 08 00       | 	byte	$08, $00
3b8e4 727 00 00 00 00 
3b8e8 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3b8e9 728 80 00 00 00 
3b8ed 729 00 80 00 00 
3b8f1 72a 80 80 00 00 
3b8f5 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3b8f9 72c 80 00 80 00 
3b8fd 72d 00 40 80 00 
3b901 72e AA AA AA 00 
3b905 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3b909 730 FF 00 00 00 
3b90d 731 00 FF 00 00 
3b911 732 FF FF 00 00 
3b915 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3b919 734 FF 00 FF 00 
3b91d 735 00 FF FF 00 
3b921 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3b924 737 00 00 00 00 
3b928 738 00          | ataripalette   file "ataripalettep2.def"
3b929 738 11 11 11 00 
3b92d 739 22 22 22 00 
3b931 73a 33 33 33 00 
3b935 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3b939 73c 55 55 55 00 
3b93d 73d 66 66 66 00 
3b941 73e 77 77 77 00 
3b945 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3b949 740 99 99 99 00 
3b94d 741 AA AA AA 00 
3b951 742 BB BB BB 00 
3b955 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3b959 744 DD DD DD 00 
3b95d 745 EE EE EE 00 
3b961 746 FF FF FF 00 
3b965 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3b969 748 00 14 40 00 
3b96d 749 00 1E 60 00 
3b971 74a 00 28 80 00 
3b975 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3b979 74c 00 3C BF 00 
3b97d 74d 00 46 DF 00 
3b981 74e 00 50 FF 00 
3b985 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3b989 750 39 77 FF 00 
3b98d 751 55 8A FF 00 
3b991 752 71 9E FF 00 
3b995 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3b999 754 AA C5 FF 00 
3b99d 755 C6 D8 FF 00 
3b9a1 756 E3 EC FF 00 
3b9a5 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3b9a9 758 00 00 40 00 
3b9ad 759 00 00 60 00 
3b9b1 75a 00 00 80 00 
3b9b5 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3b9b9 75c 00 00 BF 00 
3b9bd 75d 00 00 DF 00 
3b9c1 75e 00 00 FF 00 
3b9c5 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3b9c9 760 39 39 FF 00 
3b9cd 761 55 55 FF 00 
3b9d1 762 71 71 FF 00 
3b9d5 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3b9d9 764 AA AA FF 00 
3b9dd 765 C6 C6 FF 00 
3b9e1 766 E3 E3 FF 00 
3b9e5 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3b9e9 768 20 00 40 00 
3b9ed 769 30 00 60 00 
3b9f1 76a 40 00 80 00 
3b9f5 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3b9f9 76c 60 00 BF 00 
3b9fd 76d 70 00 DF 00 
3ba01 76e 80 00 FF 00 
3ba05 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3ba09 770 9C 39 FF 00 
3ba0d 771 AA 55 FF 00 
3ba11 772 B8 71 FF 00 
3ba15 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3ba19 774 D5 AA FF 00 
3ba1d 775 E3 C6 FF 00 
3ba21 776 F1 E3 FF 00 
3ba25 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3ba29 778 40 00 40 00 
3ba2d 779 60 00 60 00 
3ba31 77a 80 00 80 00 
3ba35 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3ba39 77c BF 00 BF 00 
3ba3d 77d DF 00 DF 00 
3ba41 77e FF 00 FF 00 
3ba45 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3ba49 780 FF 39 FF 00 
3ba4d 781 FF 55 FF 00 
3ba51 782 FF 71 FF 00 
3ba55 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3ba59 784 FF AA FF 00 
3ba5d 785 FF C6 FF 00 
3ba61 786 FF E3 FF 00 
3ba65 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3ba69 788 40 00 20 00 
3ba6d 789 60 00 30 00 
3ba71 78a 80 00 40 00 
3ba75 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3ba79 78c BF 00 60 00 
3ba7d 78d DF 00 70 00 
3ba81 78e FF 00 80 00 
3ba85 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3ba89 790 FF 39 9C 00 
3ba8d 791 FF 55 AA 00 
3ba91 792 FF 71 B8 00 
3ba95 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3ba99 794 FF AA D5 00 
3ba9d 795 FF C6 E3 00 
3baa1 796 FF E3 F1 00 
3baa5 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3baa9 798 40 00 00 00 
3baad 799 60 00 00 00 
3bab1 79a 80 00 00 00 
3bab5 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3bab9 79c BF 00 00 00 
3babd 79d DF 00 00 00 
3bac1 79e FF 00 00 00 
3bac5 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3bac9 7a0 FF 39 39 00 
3bacd 7a1 FF 55 55 00 
3bad1 7a2 FF 71 71 00 
3bad5 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3bad9 7a4 FF AA AA 00 
3badd 7a5 FF C6 C6 00 
3bae1 7a6 FF E3 E3 00 
3bae5 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3bae9 7a8 40 10 00 00 
3baed 7a9 60 18 00 00 
3baf1 7aa 80 20 00 00 
3baf5 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3baf9 7ac BF 30 00 00 
3bafd 7ad DF 38 00 00 
3bb01 7ae FF 40 00 00 
3bb05 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3bb09 7b0 FF 6A 39 00 
3bb0d 7b1 FF 80 55 00 
3bb11 7b2 FF 95 71 00 
3bb15 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3bb19 7b4 FF BF AA 00 
3bb1d 7b5 FF D5 C6 00 
3bb21 7b6 FF EA E3 00 
3bb25 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3bb29 7b8 40 20 00 00 
3bb2d 7b9 60 30 00 00 
3bb31 7ba 80 40 00 00 
3bb35 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3bb39 7bc BF 60 00 00 
3bb3d 7bd DF 70 00 00 
3bb41 7be FF 80 00 00 
3bb45 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3bb49 7c0 FF 9C 39 00 
3bb4d 7c1 FF AA 55 00 
3bb51 7c2 FF B8 71 00 
3bb55 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3bb59 7c4 FF D5 AA 00 
3bb5d 7c5 FF E3 C6 00 
3bb61 7c6 FF F1 E3 00 
3bb65 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3bb69 7c8 40 30 00 00 
3bb6d 7c9 60 48 00 00 
3bb71 7ca 80 60 00 00 
3bb75 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3bb79 7cc BF 90 00 00 
3bb7d 7cd DF A8 00 00 
3bb81 7ce FF C0 00 00 
3bb85 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3bb89 7d0 FF CE 39 00 
3bb8d 7d1 FF D5 55 00 
3bb91 7d2 FF DC 71 00 
3bb95 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3bb99 7d4 FF EA AA 00 
3bb9d 7d5 FF F1 C6 00 
3bba1 7d6 FF F8 E3 00 
3bba5 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3bba9 7d8 30 40 00 00 
3bbad 7d9 48 60 00 00 
3bbb1 7da 60 80 00 00 
3bbb5 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3bbb9 7dc 90 BF 00 00 
3bbbd 7dd A8 DF 00 00 
3bbc1 7de C0 FF 00 00 
3bbc5 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3bbc9 7e0 CE FF 39 00 
3bbcd 7e1 D5 FF 55 00 
3bbd1 7e2 DC FF 71 00 
3bbd5 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3bbd9 7e4 EA FF AA 00 
3bbdd 7e5 F1 FF C6 00 
3bbe1 7e6 F8 FF E3 00 
3bbe5 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3bbe9 7e8 00 40 00 00 
3bbed 7e9 00 60 00 00 
3bbf1 7ea 00 80 00 00 
3bbf5 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3bbf9 7ec 00 BF 00 00 
3bbfd 7ed 00 DF 00 00 
3bc01 7ee 00 FF 00 00 
3bc05 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3bc09 7f0 39 FF 39 00 
3bc0d 7f1 55 FF 55 00 
3bc11 7f2 71 FF 71 00 
3bc15 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3bc19 7f4 AA FF AA 00 
3bc1d 7f5 C6 FF C6 00 
3bc21 7f6 E3 FF E3 00 
3bc25 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3bc29 7f8 00 40 14 00 
3bc2d 7f9 00 60 1E 00 
3bc31 7fa 00 80 28 00 
3bc35 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3bc39 7fc 00 BF 3C 00 
3bc3d 7fd 00 DF 46 00 
3bc41 7fe 00 FF 50 00 
3bc45 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3bc49 800 39 FF 77 00 
3bc4d 801 55 FF 8A 00 
3bc51 802 71 FF 9E 00 
3bc55 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3bc59 804 AA FF C5 00 
3bc5d 805 C6 FF D8 00 
3bc61 806 E3 FF EC 00 
3bc65 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3bc69 808 00 40 28 00 
3bc6d 809 00 60 3C 00 
3bc71 80a 00 80 50 00 
3bc75 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3bc79 80c 00 BF 78 00 
3bc7d 80d 00 DF 8C 00 
3bc81 80e 00 FF A0 00 
3bc85 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3bc89 810 39 FF B5 00 
3bc8d 811 55 FF C0 00 
3bc91 812 71 FF CA 00 
3bc95 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3bc99 814 AA FF DF 00 
3bc9d 815 C6 FF EA 00 
3bca1 816 E3 FF F4 00 
3bca5 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3bca9 818 00 40 40 00 
3bcad 819 00 60 60 00 
3bcb1 81a 00 80 80 00 
3bcb5 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3bcb9 81c 00 BF BF 00 
3bcbd 81d 00 DF DF 00 
3bcc1 81e 00 FF FF 00 
3bcc5 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3bcc9 820 39 FF FF 00 
3bccd 821 55 FF FF 00 
3bcd1 822 71 FF FF 00 
3bcd5 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3bcd9 824 AA FF FF 00 
3bcdd 825 C6 FF FF 00 
3bce1 826 E3 FF FF 00 
3bce5 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3bce9 828 00 28 40 00 
3bced 829 00 3C 60 00 
3bcf1 82a 00 50 80 00 
3bcf5 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3bcf9 82c 00 78 BF 00 
3bcfd 82d 00 8C DF 00 
3bd01 82e 00 A0 FF 00 
3bd05 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3bd09 830 39 B5 FF 00 
3bd0d 831 55 C0 FF 00 
3bd11 832 71 CA FF 00 
3bd15 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3bd19 834 AA DF FF 00 
3bd1d 835 C6 EA FF 00 
3bd21 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3bd24 837             | 
3bd24 837             | '**********************************************************************************
3bd24 837             | '
3bd24 837             | '        Timings and colors definitions
3bd24 837             | '
3bd24 837             | '**********************************************************************************
3bd24 837             | 
3bd24 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3bd24 837 08 00 00 00 
3bd28 838 3C 00 00 00 
3bd2c 839 08 00 00 00 
3bd30 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3bd34 83b 07 00 00 00 
3bd38 83c 04 00 00 00 
3bd3c 83d 01 00 00 00 
3bd40 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3bd44 83f 58 02 00 00 
3bd48 840 20 9E 4B 14 
3bd4c 841 FB A8 9E 01 
3bd50 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3bd54 843 00 00 00 00 
3bd58 844 C0 00 00 00 
3bd5c 845 00 00 00 00 
3bd60 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bd64 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3bd64 847 00 75 C7 97 
3bd68 848 27 47 F6 0A 
3bd6c 849 05 79 CB 9B 
3bd70 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3bd74 84b             | 
3bd74 84b             | ''--------  Initialization  ----------------------------------------------------------------
3bd74 84b             | 
3bd74 84b 28 0C 64 FD | hdmi            setq    #6
3bd78 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3bd7c 84d 28 10 64 FD |                 setq    #8
3bd80 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3bd84 84f             | 
3bd84 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3bd88 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3bd8c 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3bd90 852 D6 C6 01 F1 |                 add     t1,hbase
3bd94 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3bd98 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3bd9c 855 7B 0B 80 5F 
3bda0 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3bda4 857 66 66 86 FF 
3bda8 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3bdac 859             | '
3bdac 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
3bdb0 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
3bdb4 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3bdb8 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3bdbc 85d             | 
3bdbc 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3bdc0 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3bdc4 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3bdc8 860             | 
3bdc8 860             | ''--------  frame rendering main loop  ---------------------------------------------------
3bdc8 860             | 
3bdc8 860 28 06 64 FD | p101            setq 	#3
3bdcc 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
3bdd0 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3bdd4 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3bdd8 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3bddc 865 00 A0 05 F6 |                 mov     dlinum, #0
3bde0 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3bde4 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3bde8 868             | 
3bde8 868             | 
3bde8 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3bdec 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3bdf0 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3bdf4 86b             |                 
3bdf4 86b             | 
3bdf4 86b             | 
3bdf4 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3bdf4 86b             |   
3bdf4 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3bdf8 86c 29 FE 65 3D |          if_nc  setq2   #255
3bdfc 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3be00 86e             | 
3be00 86e             | '' -----   up porch (before the picture)
3be00 86e             | 
3be00 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3be04 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3be08 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3be0c 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3be10 872             |  
3be10 872             |    
3be10 872             |  
3be10 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3be14 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
3be18 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3be1c 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3be20 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
3be24 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3be28 878             | 
3be28 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3be2c 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
3be30 87a 48 00 B0 FD | 		call    #dli
3be34 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
3be38 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
3be3c 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3be40 87e             |                 	
3be40 87e             |                 
3be40 87e             | 
3be40 87e             |  
3be40 87e             | '' ------- the main screen drawing starts here
3be40 87e             | 
3be40 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3be44 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3be48 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3be4c 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
3be50 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3be54 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3be58 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3be5c 885             |               
3be5c 885             | 
3be5c 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3be60 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3be64 887             | 
3be64 887             | ' ---------------- All visible lines displayed now, start vblank  
3be64 887             | 
3be64 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3be68 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3be6c 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3be70 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
3be74 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3be78 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3be7c 88d             | 
3be7c 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3be7c 88d             | 
3be7c 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3be7c 88d             | 
3be7c 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3be80 88e             | 
3be80 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3be84 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
3be88 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3be8c 891             | 
3be8c 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3be90 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3be94 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3be98 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3be9c 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3bea0 896             | 
3bea0 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3bea4 897 DD C6 41 F8 |                 getnib  t1,dl,#0
3bea8 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3beac 899 70 00 90 AD |     if_z        jmp     #preload
3beb0 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3beb4 89b 94 00 90 AD |     if_z        jmp     #preload2
3beb8 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3bebc 89d 0C 00 90 AD |     if_z        jmp     #p390
3bec0 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3bec4 89f 28 00 90 AD |     if_z        jmp     #p391  
3bec8 8a0             | 
3bec8 8a0 2D 00 64 FD | p308            ret
3becc 8a1             |    
3becc 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3bed0 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3bed4 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3bed8 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3bedc 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3bee0 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3bee4 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3bee8 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3beec 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3bef0 8aa             |  
3bef0 8aa             | '' --------  Reload palette. To do 
3bef0 8aa             | 
3bef0 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3bef4 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3bef8 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3befc 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3bf00 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3bf04 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
3bf08 8b0 70 FF 9F FD |         	jmp     #dli                
3bf0c 8b1             |       
3bf0c 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3bf0c 8b1             | 
3bf0c 8b1             | 
3bf0c 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3bf0c 8b1             | 
3bf0c 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3bf10 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
3bf14 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3bf18 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
3bf1c 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3bf20 8b6             |         
3bf20 8b6             | '' -------------- Preload a line from PSRAM        
3bf20 8b6             |         
3bf20 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3bf24 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3bf28 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3bf2c 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
3bf30 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
3bf34 8bb             | 
3bf34 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3bf38 8bc 32 B7 01 F6 |                 mov     buf2,a1024
3bf3c 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3bf40 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3bf44 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3bf48 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3bf4c 8c1             |  
3bf4c 8c1             |  
3bf4c 8c1             | preload2      '  incmod  dlinum,#3
3bf4c 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
3bf50 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
3bf54 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3bf58 8c4 28 02 64 FD |                 setq	#1
3bf5c 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3bf60 8c6             |                 
3bf60 8c6             | 
3bf60 8c6             | '' -------------- Draw sprites
3bf60 8c6             | 
3bf60 8c6 CF 5C 02 F6 | sprite          mov t8,frames
3bf64 8c7 10 5C 0E F5 | 		and t8,#16 wz
3bf68 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
3bf6c 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
3bf70 8ca             | 		
3bf70 8ca             | 
3bf70 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3bf74 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3bf78 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
3bf7c 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3bf80 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3bf84 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
3bf88 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3bf8c 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
3bf90 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
3bf94 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3bf98 8d4 01 52 86 F1 |                 sub     sprite_h,#1
3bf9c 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3bfa0 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3bfa4 8d7             | 
3bfa4 8d7             | 
3bfa4 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3bfa8 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3bfac 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3bfb0 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3bfb4 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3bfb8 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3bfbc 8dd 00 5E 06 F6 |                 mov 	t9,#0
3bfc0 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3bfc4 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3bfc8 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3bfcc 8e1             |      
3bfcc 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3bfd0 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3bfd4 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3bfd8 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3bfdc 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3bfe0 8e6             |                 
3bfe0 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3bfe4 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3bfe8 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3bfec 8e9             |   		
3bfec 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3bff0 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3bff4 8eb             | 
3bff4 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3bff8 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3bffc 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3c000 8ee             |  
3c000 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3c004 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3c008 8f0 10 00 90 CD |      if_c 	jmp     #p899		
3c00c 8f1             | 	
3c00c 8f1             | 	
3c00c 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3c010 8f2 28 CD 01 F1 | 		add	t4,sprite_w
3c014 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3c018 8f4             | 
3c018 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3c01c 8f5             | 
3c01c 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
3c020 8f6 01 58 86 F1 | 	 	sub     t6,#1
3c024 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3c028 8f8             | 
3c028 8f8 28 58 62 FD |                 setq   	t6
3c02c 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3c030 8fa 28 5D 02 F6 |                 mov t8,sprite_w
3c034 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3c038 8fc 24 00 90 AD |         if_z    jmp #p898
3c03c 8fd             |          
3c03c 8fd             |         
3c03c 8fd 70 5F 06 F6 |                 mov  t9,#368
3c040 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3c044 8ff             | 
3c044 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3c048 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
3c04c 901 FF FF 7F FF 
3c050 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3c054 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3c058 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
3c05c 905 2D 01 00 F5 |                 and 0-0, t7
3c060 906             |                
3c060 906             | 
3c060 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3c064 907 E5 E0 7A FA |                 wmlong 368,t3				
3c068 908             |                 
3c068 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3c06c 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3c070 90a 2D 00 64 FD |                 ret
3c074 90b             | 	
3c074 90b             | 	
3c074 90b             |                
3c074 90b             |  
3c074 90b             | '' -------------- Graphics line ------------------------------------------------------------
3c074 90b             |  
3c074 90b             | 
3c074 90b             | '' consts and vars
3c074 90b             | 
3c074 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3c078 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3c07c 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3c080 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3c084 90f             | 
3c084 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3c088 910             | 
3c088 910             | '------ these longs will be set by setmode function
3c088 910             | 
3c088 910 00 00 00 00 | m_bs            long    0        'blanks before sync
3c08c 911 00 00 00 00 | m_sn            long    0        'sync
3c090 912 00 00 00 00 | m_bv            long    0        'blanks before visible
3c094 913 00 00 00 00 | m_vi            long    0        'visible pixels #
3c098 914             | 'm_border        long    0        'left/right borders
3c098 914 00 00 00 00 | i_upporch       long    0        'up porch lines
3c09c 915 00 00 00 00 | i_vsync         long    0        'vsync lines
3c0a0 916 00 00 00 00 | i_downporch     long    0        'down porch lines
3c0a4 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3c0a8 918 00 00 00 00 | i_totalvis      long    0
3c0ac 919             | 
3c0ac 919             | '-------------------------------------
3c0ac 919             |  
3c0ac 919 00 00 00 00 | linenum         long    0
3c0b0 91a 00 00 00 00 | frames          long    0
3c0b4 91b 00 00 00 00 | dlinum long 0
3c0b8 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3c0bc 91d             | 
3c0bc 91d 00 00 00 00 | vblankptr       long    0
3c0c0 91e 00 00 00 00 | modeptr         long    0
3c0c4 91f 00 00 00 00 | paletteptr      long    0
3c0c8 920 00 00 00 00 | dlptr           long    0
3c0cc 921 01 00 00 00 | hbase           long    1
3c0d0 922 00 00 00 00 | mailbox         long    0
3c0d4 923 00 00 00 00 | spriteptr          long 0
3c0d8 924             | 
3c0d8 924 00 00 00 00 | cmd             long    0
3c0dc 925 00 B0 07 00 | buf1            long    $80000-16384-4096
3c0e0 926 00 04 00 00 | buf2            long    1024
3c0e4 927 01 00 00 00 | dlptr2          long    1
3c0e8 928 01 00 00 00 | dl              long    1
3c0ec 929             | 
3c0ec 929 00 00 00 00 | buf1c long 0
3c0f0 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
3c0f4 92b 01 00 00 00 | framebuf2       long    1
3c0f8 92c 01 00 00 00 | hsync0          long    1
3c0fc 92d 01 00 00 00 | hsync1          long    1
3c100 92e             | 
3c100 92e 01 00 00 00 | t1              long    1
3c104 92f 00 00 00 00 | t2 long 0
3c108 930 00 00 00 00 | t3 long 0
3c10c 931 00 00 00 00 | t4 long 0
3c110 932             | 
3c110 932 00 00 00 00 | rcnt            long    0  'dl repeat count
3c114 933 00 00 00 00 | rcnt2           long    0
3c118 934 00 00 00 00 | rcnt2a          long    0
3c11c 935 00 00 00 00 | roffset         long    0
3c120 936 00 00 00 00 | rdl             long    0  'dl repeat line
3c124 937 00 00 00 00 | dlc             long    0  'dl command
3c128 938             | 
3c128 938 FF FF FF FF | affffffff       long    $ffffffff
3c12c 939 00 00 00 00 | sprite1pointer long 0
3c130 93a 00 00 00 00 | sprite1xy      long 0
3c134 93b 00 00 00 00 | sprite1wh      long 0
3c138 93c 00 00 00 00 | sprite2pointer long 0
3c13c 93d 00 00 00 00 | sprite2xy      long 0
3c140 93e 00 00 00 00 | sprite2wh      long 0
3c144 93f 00 00 00 00 | sprite3pointer long 0
3c148 940 00 00 00 00 | sprite3xy      long 0
3c14c 941 00 00 00 00 | sprite3wh      long 0
3c150 942 00 00 00 00 | sprite4pointer long 0
3c154 943 00 00 00 00 | sprite4xy      long 0
3c158 944 00 00 00 00 | sprite4wh      long 0
3c15c 945 00 00 00 00 | sprite5pointer long 0
3c160 946 00 00 00 00 | sprite5xy      long 0
3c164 947 00 00 00 00 | sprite5wh      long 0
3c168 948 00 00 00 00 | sprite6pointer long 0
3c16c 949 00 00 00 00 | sprite6xy      long 0
3c170 94a 00 00 00 00 | sprite6wh      long 0
3c174 94b 00 00 00 00 | sprite7pointer long 0
3c178 94c 00 00 00 00 | sprite7xy      long 0
3c17c 94d 00 00 00 00 | sprite7wh      long 0
3c180 94e 00 00 00 00 | sprite8pointer long 0
3c184 94f 00 00 00 00 | sprite8xy      long 0
3c188 950 00 00 00 00 | sprite8wh      long 0
3c18c 951 00 00 00 00 | sprite9pointer long 0
3c190 952 00 00 00 00 | sprite9xy      long 0
3c194 953 00 00 00 00 | sprite9wh      long 0
3c198 954 00 00 00 00 | sprite10pointer long 0
3c19c 955 00 00 00 00 | sprite10xy      long 0
3c1a0 956 00 00 00 00 | sprite10wh      long 0
3c1a4 957 00 00 00 00 | sprite11pointer long 0
3c1a8 958 00 00 00 00 | sprite11xy      long 0
3c1ac 959 00 00 00 00 | sprite11wh      long 0
3c1b0 95a 00 00 00 00 | sprite12pointer long 0
3c1b4 95b 00 00 00 00 | sprite12xy      long 0
3c1b8 95c 00 00 00 00 | sprite12wh      long 0
3c1bc 95d 00 00 00 00 | sprite13pointer long 0
3c1c0 95e 00 00 00 00 | sprite13xy      long 0
3c1c4 95f 00 00 00 00 | sprite13wh      long 0
3c1c8 960 00 00 00 00 | sprite14pointer long 0
3c1cc 961 00 00 00 00 | sprite14xy      long 0
3c1d0 962 00 00 00 00 | sprite14wh      long 0
3c1d4 963 00 00 00 00 | sprite15pointer long 0
3c1d8 964 00 00 00 00 | sprite15xy      long 0
3c1dc 965 00 00 00 00 | sprite15wh      long 0
3c1e0 966 00 00 00 00 | sprite16pointer long 0
3c1e4 967 00 00 00 00 | sprite16xy      long 0
3c1e8 968 00 00 00 00 | sprite16wh      long 0
3c1ec 969 00 00 00 00 | sprite17pointer long 0
3c1f0 96a 00 00 00 00 | sprite17xy      long 0
3c1f4 96b 00 00 00 00 | sprite17wh      long 0
3c1f8 96c 00 00 00 00 | sprite18pointer long 0
3c1fc 96d 00 00 00 00 | sprite18xy      long 0
3c200 96e 00 00 00 00 | sprite18wh      long 0
3c204 96f 00 00 00 00 | spritenum long 0
3c208 970             | 
3c208 970 00 00 00 00 | spriteline long 0
3c20c 971 84 03 00 00 | sprite_x long 900
3c210 972 00 00 00 00 | sprite_y long 0
3c214 973 10 00 00 00 | sprite_w long 16
3c218 974 40 00 00 00 | sprite_h long 64
3c21c 975 00 00 00 00 | l2 long 0
3c220 976 00 00 00 00 | t5 long 0
3c224 977 00 00 00 00 | t6 long 0
3c228 978 00 00 00 00 | t7 long 0
3c22c 979 00 00 00 00 | t8 long 0
3c230 97a 00 00 00 00 | t9 long 0
3c234 97b 00 00 00 00 | preloadaddr long 0
3c238 97c 00 00 00 00 | preloadlineaddr long 0
3c23c 97d 00 04 00 00 | a1024 long 1024
3c240 97e             | 
3c240 97e E0 03 00 00 | aa long 992
3c244 97f FF 03 00 00 | a1023 long 1023
3c248 980 00 10 00 00 | a4096 long 4096
3c24c 981             |  fit 368
3c24c 981             | _psram_spin2_dat_
3c24c 981 00 00 00 00 
      ...             
3c344 9bf 00 00 00 00 
3c348 9c0 00 00 00 00 |     listdata long 0[8*8]
3c34c 9c1             |             orgh
3c34c                 | 
3c34c                 | ' driver state
3c34c     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3c350     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3c354                 | 
3c354                 | ' delay profile
3c354     07 00 00 00 
3c358     00 CF 7B 05 
3c35c     80 D1 F0 08 
3c360     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3c364     80 C4 60 0F 
3c368     80 39 7A 12 
3c36c     40 2D D9 13 
3c370     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3c374                 | 
3c374                 | ' data to be passed to driver when starting it
3c374                 | startupData
3c374     00 00 00 00 |     long    0           ' current frequency
3c378     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3c37c     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3c380     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3c384     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3c388     94 C3 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3c38c     14 C4 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3c390     34 C4 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3c394                 | 
3c394                 | ' data for memory
3c394                 | deviceData
3c394                 |     ' 16 bank parameters follow (16MB per bank)
3c394     00 00 00 00 
      ...             
3c3cc     00 00 00 00 
3c3d0     00 00 00 00 |     long    0[16]                               ' banks 0-15
3c3d4                 |     ' 16 banks of pin parameters follow
3c3d4     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3c3d8     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3c3dc     FF FF FF FF 
      ...             
3c40c     FF FF FF FF 
3c410     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3c414                 | 
3c414                 | ' data for COG polling
3c414                 | qosData 
3c414     00 00 FF FF 
3c418     00 00 FF FF 
3c41c     00 00 FF FF 
3c420     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3c424     00 00 FF FF 
3c428     00 00 FF FF 
3c42c     00 00 FF FF 
3c430     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3c434                 |     
3c434                 | ' mailbox storage
3c434                 | 
3c434                 | mailboxes
3c434     00 00 00 00 
      ...             
3c48c     00 00 00 00 
3c490     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3c494                 | 	alignl
3c494                 | _psram16drv_spin2_dat_
3c494                 |                             orgh
3c494     00 00 00 00 
      ...             
3c4ac     00 00 00 00 
3c4b0     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3c4b4                 | 
3c4b4                 | driver_start
3c4b4                 |                             org
3c4b4 000             | '..................................................................................................
3c4b4 000             | ' Memory layout for COG RAM once operational:
3c4b4 000             | '
3c4b4 000             | '  COG RAM address      Usage
3c4b4 000             | '  ---------------      ----
3c4b4 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3c4b4 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3c4b4 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3c4b4 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3c4b4 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3c4b4 000             | '  ~$198-$1F3           State and register variables
3c4b4 000             | '
3c4b4 000             | ' Also during driver COG startup:
3c4b4 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3c4b4 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3c4b4 000             | '..................................................................................................
3c4b4 000             |                             
3c4b4 000             | ' Mailbox storage after vector initialization
3c4b4 000             | 
3c4b4 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3c4b8 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3c4bc 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3c4c0 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3c4c4 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3c4c8 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3c4cc 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3c4d0 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3c4d4 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3c4d8 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3c4dc 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3c4e0 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3c4e4 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3c4e8 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3c4ec 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3c4f0 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3c4f4 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3c4f8 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3c4fc 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3c500 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3c504 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3c508 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3c50c 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3c510 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3c514 018             | 
3c514 018             | ' Mailbox parameter addresses per COG once patched
3c514 018             |                             
3c514 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3c518 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3c51c 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3c520 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3c524 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3c528 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3c52c 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3c530 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3c534 020             | 
3c534 020             | '..................................................................................................
3c534 020             | ' Per COG request and state setup and service branching
3c534 020             |         
3c534 020             | cog0                 
3c534 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3c538 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3c53c 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3c540 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3c544 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c548 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c54c 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3c550 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3c554 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3c558 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c55c 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c560 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3c564 02c             | cog1                        
3c564 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3c568 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3c56c 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3c570 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3c574 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c578 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c57c 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3c580 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3c584 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3c588 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c58c 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c590 037 33 CA 63 FD |                             execf   request-0               'jump to service
3c594 038             | cog2                         
3c594 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3c598 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3c59c 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3c5a0 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3c5a4 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c5a8 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c5ac 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3c5b0 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3c5b4 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3c5b8 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c5bc 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c5c0 043 33 CA 63 FD |                             execf   request-0               'jump to service
3c5c4 044             | cog3                        
3c5c4 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3c5c8 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3c5cc 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3c5d0 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3c5d4 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c5d8 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c5dc 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3c5e0 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3c5e4 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3c5e8 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c5ec 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c5f0 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3c5f4 050             | cog4                        
3c5f4 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3c5f8 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3c5fc 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3c600 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3c604 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c608 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c60c 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3c610 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3c614 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3c618 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c61c 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c620 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3c624 05c             | cog5                        
3c624 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3c628 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3c62c 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3c630 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3c634 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c638 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c63c 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3c640 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3c644 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3c648 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c64c 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c650 067 33 CA 63 FD |                             execf   request-0               'jump to service
3c654 068             | cog6                        
3c654 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3c658 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3c65c 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3c660 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3c664 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c668 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c66c 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3c670 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3c674 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3c678 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c67c 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c680 073 33 CA 63 FD |                             execf   request-0               'jump to service
3c684 074             | cog7                        
3c684 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3c688 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3c68c 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3c690 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3c694 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c698 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c69c 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3c6a0 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3c6a4 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3c6a8 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c6ac 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c6b0 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3c6b4 080             |                             fit     128
3c6b4 080             | 
3c6b4 080             |                             fit     128
3c6b4 080             | pad                         long    0[128-$]                'align init code to $80
3c6b4 080             | 
3c6b4 080             | '..................................................................................................
3c6b4 080             | 
3c6b4 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3c6b4 080             | 
3c6b4 080             | init                        
3c6b4 080             |                             ' get driver scratch long address in hub
3c6b4 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3c6b8 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3c6bc 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3c6c0 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3c6c4 084             |                     
3c6c4 084             |                             ' read in the additional LUT RAM code
3c6c4 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3c6c8 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3c6cc 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3c6d0 087             | 
3c6d0 087             |                             ' read the startup parameters
3c6d0 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3c6d4 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3c6d8 089             | 
3c6d8 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3c6d8 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3c6dc 08a             | 
3c6dc 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3c6e0 08b 01 00 00 5F 
3c6e4 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3c6e8 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3c6ec 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3c6f0 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3c6f4 090             | 
3c6f4 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3c6f4 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3c6f8 091 01 00 00 FF 
3c6fc 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3c700 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3c704 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3c708 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3c70c 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3c710 097 08 DE 47 F5 |                             or      a, #8
3c714 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3c718 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3c71c 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3c720 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3c724 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3c728 09d 01 DE 07 F1 |                             add     a, #1
3c72c 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3c730 09f             |  
3c730 09f             |                             ' setup device control pin states
3c730 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3c734 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3c738 0a1 01 00 00 FF 
3c73c 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3c740 0a3             | 
3c740 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3c744 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3c748 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3c74c 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3c750 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3c754 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3c758 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3c75c 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3c760 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3c764 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3c768 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3c76c 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3c770 0af             | pinloop
3c770 0af             |                             ' generate minimum CE high time before access
3c770 0af A1 07 00 FF 
3c774 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3c778 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3c77c 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3c780 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3c784 0b4 1F DE 63 FD |                             waitx   a                       'delay
3c788 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3c78c 0b6             | 
3c78c 0b6             |                             ' setup the COG mailboxes and addresses 
3c78c 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3c790 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3c794 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3c798 0b9             | 
3c798 0b9 28 2E 64 FD |                             setq    #24-1
3c79c 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3c7a0 0bb             | 
3c7a0 0bb             |                             ' setup the polling loop for active COGs 
3c7a0 0bb 01 C2 63 FD |                             cogid   id
3c7a4 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3c7a8 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3c7ac 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3c7b0 0bf 0A F0 07 F6 |                             mov     ptra, #10
3c7b4 0c0 E1 F1 03 FA |                             mul     ptra, id
3c7b8 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3c7bc 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3c7c0 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3c7c4 0c4 03 C2 07 FA |                             mul     id, #3
3c7c8 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3c7cc 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3c7d0 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3c7d4 0c8 D8 01 B0 FD |                             call    #reloadcogs
3c7d8 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3c7dc 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3c7e0 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3c7e0 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3c7e4 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3c7e8 0cd 08 04 DC FC |                             rep     #2, #8
3c7ec 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3c7f0 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3c7f4 0d0             | 
3c7f4 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3c7f4 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3c7f4 0d0 01 C2 63 FD |                             cogid   id
3c7f8 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3c7fc 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3c800 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3c804 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3c808 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3c80c 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3c810 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3c814 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3c818 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3c81c 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3c820 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3c824 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3c828 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3c82c 0de A5 E5 03 F1 |                             add     d, const512
3c830 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3c834 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3c838 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3c83c 0e2             |                             
3c83c 0e2             |                             ' setup register values for control vector loop setup after we return
3c83c 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3c840 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3c844 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3c848 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3c84c 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3c850 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3c854 0e8 D0 C3 8F F9 |                             altd    id, #id0
3c858 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3c85c 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3c860 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3c864 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3c868 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3c86c 0ee             |  
3c86c 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3c870 0ef 07 CA 07 F5 |                             and     request, #7
3c874 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3c878 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3c87c 0f2             |                             fit     $100                    'ensure all init code fits this space
3c87c 0f2             | 
3c87c 0f2             |                             fit     $100                    'ensure all init code fits this space
3c87c 0f2             | 
3c87c 0f2 00 00 00 00 
      ...             
3c8ac 0fe 00 00 00 00 
3c8b0 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3c8b4 100             | 
3c8b4 100             | '..................................................................................................
3c8b4 100             | ' Error result handling and COG notification of request completion
3c8b4 100             | 
3c8b4 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3c8b8 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3c8bc 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3c8c0 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3c8c4 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3c8c8 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3c8cc 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3c8d0 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3c8d4 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3c8d8 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3c8dc 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3c8e0 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3c8e4 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3c8e8 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3c8ec 10e             | ' Poller re-starts here after a COG is serviced
3c8ec 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3c8f0 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3c8f4 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3c8f8 111             | ' Main dynamic polling loop repeats until a request arrives
3c8f8 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3c8fc 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3c900 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3c904 114             | 
3c904 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3c908 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3c90c 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3c910 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3c914 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3c918 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3c91c 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3c920 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3c924 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3c928 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3c92c 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3c930 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3c934 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3c938 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3c93c 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3c940 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3c944 124             | 
3c944 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3c948 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3c94c 126             |  
3c94c 126             | '..................................................................................................
3c94c 126             | ' List handler                               
3c94c 126             | 
3c94c 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3c950 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3c954 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3c958 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3c95c 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3c960 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3c964 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3c968 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3c96c 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3c970 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3c974 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3c978 131 33 00 60 FD |                             execf   0-0                     'process the request 
3c97c 132             | 
3c97c 132             | '..................................................................................................
3c97c 132             | ' Restoring per COG state and resuming where we left off
3c97c 132             | 
3c97c 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3c980 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3c984 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3c988 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3c98c 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3c990 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3c994 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3c998 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3c99c 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3c9a0 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3c9a4 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3c9a8 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3c9ac 13e             |                    
3c9ac 13e             | '..................................................................................................
3c9ac 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3c9ac 13e             | 
3c9ac 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3c9b0 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3c9b4 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3c9b8 141 D0 DF B7 F9 |                             setd    a, #id0
3c9bc 142 D8 DF BF F9 |                             sets    a, #addr1
3c9c0 143 FE FF FF FF 
3c9c4 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3c9c8 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3c9cc 146 3F DE A7 F9 |                             alti    a, #%111_111 
3c9d0 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3c9d4 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3c9d8 149 01 E2 63 FD |                             cogid   c
3c9dc 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3c9e0 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3c9e4 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3c9e8 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3c9ec 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3c9f0 14f 00 E0 03 F6 |                             mov     b, 0-0
3c9f4 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3c9f8 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3c9fc 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3ca00 153 0C 00 90 AD |             if_z            jmp     #excluded               
3ca04 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3ca08 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3ca0c 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3ca10 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3ca14 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3ca18 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3ca1c 15a             | 
3ca1c 15a             | 'determine priority cogs and build instructions for the polling sequence
3ca1c 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3ca20 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3ca24 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3ca28 15d             | 
3ca28 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3ca2c 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3ca30 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3ca34 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3ca38 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3ca3c 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3ca40 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3ca44 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3ca48 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3ca4c 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3ca50 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3ca54 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3ca58 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3ca5c 16a             | endprioloop
3ca5c 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3ca60 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3ca64 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3ca68 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3ca6c 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3ca70 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3ca74 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3ca78 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3ca7c 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3ca80 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3ca84 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3ca88 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3ca8c 176             | 
3ca8c 176             | ' populate the round robin COG polling instructions
3ca8c 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3ca90 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3ca94 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3ca98 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3ca9c 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3caa0 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3caa4 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3caa8 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3caac 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3cab0 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3cab4 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3cab8 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3cabc 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3cac0 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3cac4 184             | '..................................................................................................
3cac4 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3cac4 184             | 
3cac4 184             | set_latency                                                 '            (a) set latency
3cac4 184             | get_latency                                                 '            (b) get latency
3cac4 184             | set_burst                                                   '            (c) set burst size of bank
3cac4 184             | get_burst                                                   '            (d) get burst size of bank
3cac4 184             |                                                             '            (e) dump state
3cac4 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3cac8 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3cacc 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3cad0 187             |                                                             ' | | | | e  account for following AUGS
3cad0 187 04 00 00 FF 
3cad4 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3cad8 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3cadc 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3cae0 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3cae4 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3cae8 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3caec 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3caf0 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3caf4 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3caf8 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3cafc 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3cb00 193             | 
3cb00 193             | '..................................................................................................
3cb00 193             | ' Misc EXECF code
3cb00 193             | 
3cb00 193 33 72 63 FD | start_read_exec             execf   newburstr
3cb04 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3cb08 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3cb0c 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3cb10 197             | 
3cb10 197             | '..................................................................................................
3cb10 197             | ' Variables
3cb10 197             | 
3cb10 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3cb14 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3cb18 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3cb1c 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3cb20 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3cb24 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3cb28 19d             | 
3cb28 19d 00 00 00 80 | xfreq1          long    $80000000
3cb2c 19e 00 00 00 40 | xfreq2          long    $40000000
3cb30 19f 03 00 00 00 | delay           long    3
3cb34 1a0             | 
3cb34 1a0             | lutcodeaddr                 
3cb34 1a0             | startupparams
3cb34 1a0             | excludedcogs                                    'careful: shared register use!
3cb34 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3cb38 1a1 00 00 00 00 | flags           long    0
3cb3c 1a2             | mask                                            'careful: shared register use!
3cb3c 1a2 00 00 00 00 | resetmaskA      long    0
3cb40 1a3             | limit                                           'careful: shared register use!
3cb40 1a3 00 00 00 00 | resetmaskB      long    0
3cb44 1a4 00 00 00 00 | datapins        long    0
3cb48 1a5             | const512                                        'careful: shared register use!
3cb48 1a5 00 00 00 00 | devicelist      long    0
3cb4c 1a6 00 00 00 00 | coglist         long    0
3cb50 1a7 00 00 00 00 | mbox            long    0 
3cb54 1a8             | 
3cb54 1a8             | clkpin                                          'shared with code patched during init
3cb54 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3cb58 1a9             | cspin                                           'shared with code patched during init
3cb58 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3cb5c 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3cb60 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3cb64 1ac 01 00 00 00 | clkdelay        long    1
3cb68 1ad 00 00 00 00 | regdatabus      long    0
3cb6c 1ae             | 
3cb6c 1ae 10 00 00 00 | deviceaddr      long    $10
3cb70 1af             | rrcounter
3cb70 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3cb74 1b0             | 
3cb74 1b0             | ' jump addresses for the per COG handlers
3cb74 1b0 20 00 00 00 | cog0_handler    long    cog0
3cb78 1b1 2C 00 00 00 | cog1_handler    long    cog1
3cb7c 1b2 38 00 00 00 | cog2_handler    long    cog2
3cb80 1b3 44 00 00 00 | cog3_handler    long    cog3
3cb84 1b4 50 00 00 00 | cog4_handler    long    cog4
3cb88 1b5 5C 00 00 00 | cog5_handler    long    cog5
3cb8c 1b6 68 00 00 00 | cog6_handler    long    cog6
3cb90 1b7 74 00 00 00 | cog7_handler    long    cog7
3cb94 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3cb98 1b9             | 
3cb98 1b9             | ' EXECF sequences
3cb98 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3cb9c 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3cba0 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3cba4 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3cba8 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3cbac 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3cbb0 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3cbb4 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3cbb4 1c0             | 
3cbb4 1c0             | 
3cbb4 1c0             | ' SKIPF sequences
3cbb4 1c0             | skiptable
3cbb4 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3cbb8 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3cbbc 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3cbc0 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3cbc4 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3cbc8 1c5 00 00 00 00 | pattern2        long    0
3cbcc 1c6 00 00 00 00 | pattern3        long    0
3cbd0 1c7 77 02 00 00 | singlelong      long    %1001110111  
3cbd4 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3cbd8 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3cbdc 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3cbe0 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3cbe4 1cc             | 
3cbe4 1cc             | ' LUT RAM address values
3cbe4 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3cbe8 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3cbec 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3cbf0 1cf F6 02 00 00 | noread          long    noread_lut
3cbf4 1d0             | 
3cbf4 1d0 00 00 00 00 | id0             long    0
3cbf8 1d1 01 00 00 00 | id1             long    1
3cbfc 1d2 02 00 00 00 | id2             long    2
3cc00 1d3 03 00 00 00 | id3             long    3
3cc04 1d4 04 00 00 00 | id4             long    4
3cc08 1d5 05 00 00 00 | id5             long    5
3cc0c 1d6 06 00 00 00 | id6             long    6
3cc10 1d7 07 00 00 00 | id7             long    7
3cc14 1d8             | 
3cc14 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3cc14 1d8             | 'and COG updates and need to follow immediately after id0-id7
3cc14 1d8 00 00 00 00 | addr1           long    0
3cc18 1d9 00 00 00 00 | hubdata         long    0
3cc1c 1da 00 00 00 00 | count           long    0
3cc20 1db 00 00 00 00 | addr2           long    0
3cc24 1dc 00 00 00 00 | total           long    0
3cc28 1dd 00 00 00 00 | offset1         long    0
3cc2c 1de 00 00 00 00 | offset2         long    0
3cc30 1df 00 00 00 00 | link            long    0
3cc34 1e0             | 
3cc34 1e0             | burstwrite                                      'note shared register use during init
3cc34 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3cc38 1e1 00 00 00 00 | id              long    0
3cc3c 1e2             | 
3cc3c 1e2 00 00 00 00 | header          long    0
3cc40 1e3 00 00 00 00 | trailer         long    0
3cc44 1e4 00 00 00 00 | cmdaddr         long    0
3cc48 1e5 00 00 00 00 | request         long    0
3cc4c 1e6 00 00 00 00 | rrlimit         long    0
3cc50 1e7 00 00 00 00 | pinconfig       long    0
3cc54 1e8 00 00 00 00 | clks            long    0
3cc58 1e9 00 00 00 00 | resume          long    0
3cc5c 1ea 00 00 00 00 | orighubsize     long    0
3cc60 1eb 00 00 00 00 | wrclks          long    0
3cc64 1ec             | 
3cc64 1ec 00 00 00 00 | pattern         long    0
3cc68 1ed 00 00 00 00 | hubscratch      long    0
3cc6c 1ee 00 10 00 00 | val4k           long    4096
3cc70 1ef             | 
3cc70 1ef             | ' temporary general purpose regs
3cc70 1ef 00 00 00 00 | a               long    0
3cc74 1f0 00 00 00 00 | b               long    0
3cc78 1f1 00 00 00 00 | c               long    0
3cc7c 1f2 00 00 00 00 | d               long    0
3cc80 1f3             |                 fit     502
3cc80 1f3             | 
3cc80 1f3             |                 fit     502
3cc80 1f3             | 
3cc80 1f3             | '..................................................................................................
3cc80 1f3             | 
3cc80 1f3             |             orgh
3cc80                 | 
3cc80                 | lut_code
3cc80                 | 'HW init code up to 80 longs
3cc80                 | 
3cc80                 | '..................................................................................................
3cc80                 | ' Memory layout for LUT RAM once operational:
3cc80                 | '
3cc80                 | '  LUT RAM address      Usage
3cc80                 | '  ---------------      ----
3cc80                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3cc80                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3cc80                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3cc80                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3cc80                 | '
3cc80                 | ' Also during driver COG startup:
3cc80                 | ' $230-$24F is used for HW init setup
3cc80                 | ' $250-$26F is used as temporary vector storage 
3cc80                 | '..................................................................................................
3cc80                 | 
3cc80                 |                 org $230    
3cc80 230             | 
3cc80 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3cc80 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3cc84 231 24 16 60 FD |                             pollxfi
3cc88 232 FF AA 2A FF 
3cc8c 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3cc90 234 28 00 B0 FD |                             call    #sendqspi
3cc94 235 07 F8 07 FF 
3cc98 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3cc9c 237 28 00 B0 FD |                             call    #sendspi
3cca0 238 F8 07 78 FF 
3cca4 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3cca8 23a 1C 00 B0 FD |                             call    #sendspi
3ccac 23b 7F 78 78 FF 
3ccb0 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3ccb4 23d 10 00 B0 FD |                             call    #sendspi 
3ccb8 23e 2D 00 64 FD |                             ret
3ccbc 23f             | 
3ccbc 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3ccc0 240 32 0C 64 FD |                             skipf   #%110
3ccc4 241 9C EF 03 F6 |                             mov     pb, xsendimm
3ccc8 242             | 
3ccc8 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3cccc 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3ccd0 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3ccd4 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3ccd8 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3ccdc 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3cce0 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3cce4 249 50 48 63 FD |                             fltl    datapins                'float data bus
3cce8 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3ccec 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3ccf0 24c             | 
3ccf0 24c 00 00 00 00 
3ccf4 24d 00 00 00 00 
3ccf8 24e 00 00 00 00 
3ccfc 24f 00 00 00 00 |                 long    0[$270-32-$]
3cd00 250             |                 fit     $270-32  ' keep room for 32 vector longs
3cd00 250             |     
3cd00 250             |                 fit     $270-32  ' keep room for 32 vector longs
3cd00 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3cd00 250             | rw_vect ' PSRAM jump vectors
3cd00 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3cd04 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3cd08 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3cd0c 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3cd10 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3cd14 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3cd18 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3cd1c 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3cd20 258             | ro_vect ' R/O PSRAM jump vectors
3cd20 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3cd24 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3cd28 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3cd2c 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3cd30 25c 00 01 00 00 |                 long    unsupported
3cd34 25d 00 01 00 00 |                 long    unsupported
3cd38 25e 00 01 00 00 |                 long    unsupported
3cd3c 25f 00 01 00 00 |                 long    unsupported
3cd40 260             | ctrl_vect ' Control jump vectors
3cd40 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3cd44 261 00 01 00 00 |                 long    unsupported
3cd48 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3cd4c 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3cd50 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3cd54 265 00 01 00 00 |                 long    unsupported
3cd58 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3cd5c 267 3E 01 00 00 |                 long    reconfig 
3cd60 268             | no_vect ' Invalid bank jump vectors
3cd60 268 01 01 00 00 |                 long    invalidbank
3cd64 269 01 01 00 00 |                 long    invalidbank
3cd68 26a 01 01 00 00 |                 long    invalidbank
3cd6c 26b 01 01 00 00 |                 long    invalidbank
3cd70 26c 01 01 00 00 |                 long    invalidbank
3cd74 26d 01 01 00 00 |                 long    invalidbank
3cd78 26e 01 01 00 00 |                 long    invalidbank
3cd7c 26f 01 01 00 00 |                 long    invalidbank
3cd80 270             |                 fit     $270
3cd80 270             | 
3cd80 270             |                 fit     $270
3cd80 270             | '..................................................................................................
3cd80 270             | ' PSRAM READS
3cd80 270             |                                                             ' a b c d e f
3cd80 270             |                                                             ' B W L B R L  (a) byte read
3cd80 270             |                                                             ' Y O O U E O  (b) word read
3cd80 270             |                                                             ' T R N R S C  (c) long read
3cd80 270             |                                                             ' E D G S U K  (d) new burst read
3cd80 270             |                                                             '       T M E  (e) resumed sub-burst
3cd80 270             |                                                             '         E D  (f) locked sub-burst
3cd80 270             | 
3cd80 270             | 
3cd80 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3cd84 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3cd88 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3cd8c 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3cd90 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3cd94 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3cd98 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3cd9c 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3cda0 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3cda4 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3cda8 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3cdac 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3cdb0 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3cdb4 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3cdb8 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3cdbc 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3cdc0 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3cdc4 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3cdc8 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3cdcc 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3cdd0 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3cdd4 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3cdd8 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3cddc 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3cde0 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3cde4 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3cde8 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3cdec 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3cdf0 28c             | 
3cdf0 28c             |                             ' fall through to read bursts
3cdf0 28c             |                         
3cdf0 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3cdf0 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3cdf4 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3cdf8 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3cdfc 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3ce00 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3ce04 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3ce08 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3ce0c 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3ce10 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3ce14 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3ce18 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3ce1c 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3ce20 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3ce24 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3ce28 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3ce2c 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3ce30 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3ce34 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3ce38 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3ce3c 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3ce40 2a0 E8 D1 03 F1 |                             add     clks, clks
3ce44 2a1             | readcommon
3ce44 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3ce48 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3ce4c 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3ce50 2a4             | 
3ce50 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3ce54 2a5 69 C8 63 FD |                             rev     cmdaddr
3ce58 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3ce5c 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3ce60 2a8             | 
3ce60 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3ce64 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3ce68 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3ce68 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3ce6c 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3ce70 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3ce74 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3ce78 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3ce78 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3ce7c 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3ce80 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3ce84 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3ce88 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3ce8c 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3ce90 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3ce90 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3ce94 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3ce98 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3ce9c 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3cea0 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3cea4 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3cea8 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3ceac 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3ceb0 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3ceb4 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3ceb8 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3cebc 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3cec0 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3cec4 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3cec8 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3cec8 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3cecc 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3ced0 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3ced4 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3ced8 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3cedc 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3cee0 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3cee4 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3cee8 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3ceec 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3cef0 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3cef4 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3cef8 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3cefc 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3cf00 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3cf04 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3cf08 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3cf0c 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3cf10 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3cf14 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3cf18 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3cf1c 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3cf20 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3cf24 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3cf28 2da 10 03 90 FD |                             jmp     #writecommon
3cf2c 2db             | 
3cf2c 2db             | '..................................................................................................
3cf2c 2db             | ' Burst continuation testing
3cf2c 2db             | 
3cf2c 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3cf30 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3cf34 2dd             | continue_read_lut          
3cf34 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3cf38 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3cf3c 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3cf40 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3cf44 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3cf48 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3cf4c 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3cf50 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3cf54 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3cf58 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3cf5c 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3cf60 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3cf64 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3cf68 2ea             | 
3cf68 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3cf6c 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3cf70 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3cf74 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3cf78 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3cf7c 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3cf80 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3cf84 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3cf88 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3cf8c 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3cf90 2f4 2A 1C 66 0D |             _ret_           push    #poller
3cf94 2f5             | 
3cf94 2f5             | 
3cf94 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3cf98 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3cf98 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3cf9c 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3cfa0 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3cfa4 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3cfa8 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3cfac 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3cfb0 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3cfb4 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3cfb8 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3cfbc 2ff             | '..................................................................................................
3cfbc 2ff             | ' Completion of requests
3cfbc 2ff             | 
3cfbc 2ff             | complete_rw_lut             
3cfbc 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3cfc0 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3cfc4 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3cfc8 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3cfcc 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3cfd0 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3cfd4 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3cfd8 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3cfdc 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3cfe0 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3cfe4 309 32 62 64 AD |             if_z            skipf   #%110001
3cfe8 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3cfec 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3cff0 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3cff4 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3cff8 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3cffc 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3d000 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3d004 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3d008 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3d00c 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3d010 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3d014 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3d018 316             |                                                             ' skipcase (a) gfx copy to/from hub
3d018 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3d018 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3d018 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3d01c 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3d020 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3d024 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3d028 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3d02c 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3d030 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3d034 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3d038 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3d03c 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3d040 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3d044 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3d048 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3d04c 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3d050 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3d054 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3d058 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3d05c 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3d060 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3d064 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3d068 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3d06c 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3d070 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3d074 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3d078 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3d07c 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3d080 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3d084 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3d088 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3d08c 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3d090 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3d094 335 DF B7 03 A6 |             if_z            mov     addr2, link
3d098 336 34 FF 9F AD |             if_z            jmp     #checknext
3d09c 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3d0a0 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3d0a4 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3d0a8 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3d0ac 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3d0b0 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3d0b4 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3d0b8 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3d0bc 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3d0c0 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3d0c4 341             | 
3d0c4 341             | '..................................................................................................
3d0c4 341             | ' PSRAM WRITES
3d0c4 341             |                                                             '  a b c d e f g h
3d0c4 341             | 
3d0c4 341             |                                                             '  B W L F B R L L (a) byte write(s)
3d0c4 341             |                                                             '  Y O O I U E O O (b) word write(s)
3d0c4 341             |                                                             '  T R N L R S C C (c) long write(s)
3d0c4 341             |                                                             '  E D G L S U K K (d) resumed fill
3d0c4 341             |                                                             '          T M E E (e) new burst write
3d0c4 341             |                                                             '            E D D (f) resumed burst
3d0c4 341             |                                                             '              F B (g) locked fill
3d0c4 341             |                                                             '              I U (h) locked burst write
3d0c4 341             |                                                             '              L R 
3d0c4 341             |                                                             '              L S 
3d0c4 341             |                                                             '                T 
3d0c4 341             | 
3d0c4 341             | w_single                   
3d0c4 341             | w_fill_cont           
3d0c4 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3d0c8 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3d0cc 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3d0d0 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3d0d4 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3d0d8 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3d0dc 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3d0e0 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3d0e4 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3d0e8 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3d0ec 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3d0f0 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3d0f4 34d             |                ' disable call to r_resume_burst for single longs when z=0
3d0f4 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3d0f8 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3d0fc 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3d100 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3d104 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3d108 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3d10c 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3d110 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3d114 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3d118 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3d11c 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3d120 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3d124 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3d128 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3d12c 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3d130 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3d134 35d             |         
3d134 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3d134 35d             |             '
3d134 35d             |             '  At least one of these 3 optional components will be sent
3d134 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3d134 35d             |             '     body - N x full longs of data
3d134 35d             |             '     trailer - last partial long of data
3d134 35d             |             '
3d134 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3d134 35d             |             '
3d134 35d             |             'Case    Type                           Sends
3d134 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3d134 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3d134 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3d134 35d             |             ' 4)     Multiple long fill             body only
3d134 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3d134 35d             | 
3d134 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3d134 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3d138 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3d13c 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3d140 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3d144 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3d148 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3d14c 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3d150 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3d154 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3d158 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3d15c 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3d160 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3d164 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3d168 36a             |                             
3d168 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3d16c 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3d170 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3d174 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3d178 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3d17c 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3d180 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3d184 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3d188 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3d18c 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3d190 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3d194 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3d198 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3d19c 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3d1a0 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3d1a4 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3d1a8 37a             | 
3d1a8 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3d1ac 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3d1b0 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3d1b4 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3d1b8 37e             |                  
3d1b8 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3d1bc 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3d1c0 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3d1c4 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3d1c8 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3d1cc 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3d1d0 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3d1d4 385             | 
3d1d4 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3d1d8 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3d1dc 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3d1e0 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3d1e4 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3d1e8 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3d1ec 38b             | 
3d1ec 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3d1ec 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3d1f0 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3d1f4 38d 2A B0 63 FD |                             push    addr1                   'save address
3d1f8 38e             | 
3d1f8 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3d1f8 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3d1fc 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3d200 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3d204 391             |             
3d204 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3d208 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3d20c 393 2B B0 63 FD |                             pop     addr1                   'restore address
3d210 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3d214 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3d218 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3d21c 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3d220 398             | 
3d220 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3d224 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3d228 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3d22c 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3d230 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3d234 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3d238 39e             | 
3d238 39e             |                             'trailer is done
3d238 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3d23c 39f             | 
3d23c 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3d240 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3d244 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3d248 3a2             | 
3d248 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3d24c 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3d250 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3d254 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3d258 3a6             |                             
3d258 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3d25c 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3d260 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3d264 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3d268 3aa             |                                                          
3d268 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3d26c 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3d270 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3d274 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3d278 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3d27c 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3d280 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3d284 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3d288 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3d28c 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3d290 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3d294 3b5             |  
3d294 3b5 59 52 63 FD |                             drvh    cspin
3d298 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3d29c 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3d2a0 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3d2a4 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3d2a8 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3d2ac 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3d2b0 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3d2b4 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3d2b8 3be EA E5 03 F6 |                             mov     d, orighubsize
3d2bc 3bf EF E5 63 F0 |                             shl     d, a
3d2c0 3c0 F2 E3 83 F1 |                             sub     c, d
3d2c4 3c1 DD E3 03 F1 |                             add     c, offset1
3d2c8 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3d2cc 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3d2d0 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3d2d4 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3d2d8 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3d2dc 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3d2e0 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3d2e4 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3d2e8 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3d2ec 3cb BB D3 03 F6 |                             mov     resume, restorefill
3d2f0 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3d2f4 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3d2f8 3ce 6C FC BF CD |             if_c            call    #yield
3d2fc 3cf 2D 00 64 FD |                             ret
3d300 3d0             |                            
3d300 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3d300 3d0             |                       '     rczl    pa                      'rotate left into address offset
3d300 3d0             |                       '     rczl    c wcz                   'restore count and flags
3d300 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3d304 3d1 02 EC 67 F0 |                             shl     pa, #2
3d308 3d2 28 06 64 AD |             if_z            setq    #3
3d30c 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3d310 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3d314 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3d318 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3d31c 3d7             | 
3d31c 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3d320 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3d324 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3d328 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3d32c 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3d330 3dc             |                 fit 1024-32
3d330 3dc             |         
3d330 3dc             | 
3d330 3dc             | '..................................................................................................
3d330 3dc             | 
3d330 3dc             |                 fit 1024-32
3d330 3dc 00 00 00 00 
3d334 3dd 00 00 00 00 
3d338 3de 00 00 00 00 
3d33c 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3d340 3e0             |                 org 1024-32
3d340 000             | 
3d340 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3d340 000 00 00 00 00 |                 long $0000
3d344 001 11 11 00 00 |                 long $1111
3d348 002 22 22 00 00 |                 long $2222
3d34c 003 33 33 00 00 |                 long $3333
3d350 004 44 44 00 00 |                 long $4444
3d354 005 55 55 00 00 |                 long $5555
3d358 006 66 66 00 00 |                 long $6666
3d35c 007 77 77 00 00 |                 long $7777
3d360 008 88 88 00 00 |                 long $8888
3d364 009 99 99 00 00 |                 long $9999
3d368 00a AA AA 00 00 |                 long $aaaa
3d36c 00b BB BB 00 00 |                 long $bbbb
3d370 00c CC CC 00 00 |                 long $cccc
3d374 00d DD DD 00 00 |                 long $dddd
3d378 00e EE EE 00 00 |                 long $eeee
3d37c 00f FF FF 00 00 |                 long $ffff
3d380 010             | 
3d380 010             | 'masks
3d380 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3d384 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3d388 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3d38c 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3d390 014             | 
3d390 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3d394 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3d398 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3d39c 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3d3a0 018             | 
3d3a0 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3d3a4 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3d3a8 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3d3ac 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3d3b0 01c             | 
3d3b0 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3d3b4 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3d3b8 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3d3bc 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3d3c0 020             |         fit 1024
3d3c0 020             | 
3d3c0 020             |         fit 1024
3d3c0 020             | 
3d3c0 020             | '--------------------------------------------------------------------------------------------------
3d3c0 020             |         orgh
3d3c0                 | 
3d3c0                 | gfxexpansion
3d3c0                 |                             'simple line drawing graphics expansion of memory driver
3d3c0                 |                             'jmp     #donerepeats                'just return for now
3d3c0                 | 
3d3c0     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3d3c4     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3d3c8     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3d3cc     DD E1 03 F6 |                             mov     b, offset1              'get error term
3d3d0     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3d3d4     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3d3d8     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3d3dc     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3d3e0     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3d3e4     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3d3e8     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3d3ec     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3d3f0     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3d3f4     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3d3f8     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3d3fc     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3d400     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3d404     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3d408     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3d40c     DC E5 33 F9 |                             getword d, total, #0            'get line width
3d410     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3d414     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3d418     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3d41c     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3d420     C3 03 80 FD |                             jmp     #readmask               'continue filling
3d424                 | 	alignl
3d424                 | _usbnew_spin2_dat_
3d424                 |                 org     $000
3d424 000             | 
3d424 000             | usb_host_start
3d424 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3d428 001             | 
3d428 001 03 00 00 FF 
3d42c 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3d430 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3d434 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3d438 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3d43c 006 29 70 63 FD |                 setq2   htmp
3d440 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3d444 008             | 
3d444 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3d448 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3d44c 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3d450 00b             | 
3d450 00b             | '------------------------------------------------------------------------------
3d450 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3d450 00b             | ' special because the receiving function must not respond with either STALL or
3d450 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3d450 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3d450 00b             | ' corrupt packet, it must ignore the transaction
3d450 00b             | '------------------------------------------------------------------------------
3d450 00b             | ' On entry:
3d450 00b             | '   PTRA - start address of the SETUP data struct.
3d450 00b             | ' On exit:
3d450 00b             | '   retval - PID_ACK on success, otherwise error code.
3d450 00b             | '------------------------------------------------------------------------------
3d450 00b             | txn_setup
3d450 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3d454 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3d458 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3d45c 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3d460 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3d464 010             | .setup
3d464 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3d468 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d46c 012 2D 00 64 AD |         if_z    ret
3d470 013 7C 0B B0 FD |                 call    #retry_wait
3d474 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3d478 015 2D 00 64 AD |         if_z    ret
3d47c 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3d480 017 E0 FF 9F FD |                 jmp     #.setup
3d484 018             | 
3d484 018             | '------------------------------------------------------------------------------
3d484 018             | ' IN/INTERRUPT transaction.
3d484 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3d484 018             | '------------------------------------------------------------------------------
3d484 018             | ' On entry:
3d484 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3d484 018             | '     CRC(b19..23).
3d484 018             | ' On exit:
3d484 018             | '------------------------------------------------------------------------------
3d484 018             | txn_in
3d484 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3d488 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3d48c 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3d490 01b             | 
3d490 01b             |                 ' Fall through to urx_packet
3d490 01b             | 
3d490 01b             | '------------------------------------------------------------------------------
3d490 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3d490 01b             | ' received are handshakes and IN DATAx.
3d490 01b             | '------------------------------------------------------------------------------
3d490 01b             | ' On entry:
3d490 01b             | ' On exit:
3d490 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3d490 01b             | '     returned.
3d490 01b             | '------------------------------------------------------------------------------
3d490 01b             | urx_packet
3d490 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3d494 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3d498 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3d49c 01e 1A 92 63 FD |                 getct   hct2
3d4a0 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3d4a4 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3d4a8 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3d4ac 022             | .wait_sop
3d4ac 022 22 A7 8A FA |                 rdpin   urx, dm
3d4b0 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3d4b4 024 08 00 90 CD |         if_c    jmp     #.get_pid
3d4b8 025 FC 25 CC FB |                 jnct2   #.wait_sop
3d4bc 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3d4c0 027             | .get_pid
3d4c0 027 28 02 B0 FD |                 call    #urx_next
3d4c4 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3d4c8 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3d4cc 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3d4d0 02b             | .chk_pid
3d4d0 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d4d4 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3d4d8 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3d4dc 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3d4e0 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3d4e4 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3d4e8 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3d4ec 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3d4f0 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3d4f4 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3d4f8 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3d4fc 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3d500 037             | .ack_resend
3d500 037 22 A7 82 FA |                 rqpin   urx, dm
3d504 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3d508 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3d50c 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3d510 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3d514 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3d518 03d             | .chk_eop
3d518 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3d51c 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3d520 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3d524 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3d528 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3d52c 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3d530 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3d534 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3d538 045 2D 00 64 FD |                 ret
3d53c 046             | .idle
3d53c 046 22 A7 82 FA |                 rqpin   urx, dm
3d540 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3d544 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3d548 049 2D 00 64 FD |                 ret
3d54c 04a             | 
3d54c 04a             | '------------------------------------------------------------------------------
3d54c 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3d54c 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3d54c 04a             | ' if one is required.
3d54c 04a             | '------------------------------------------------------------------------------
3d54c 04a             | ' On entry:
3d54c 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3d54c 04a             | ' On exit:
3d54c 04a             | '------------------------------------------------------------------------------
3d54c 04a             | utx_token
3d54c 04a 22 A7 82 FA |                 rqpin   urx, dm
3d550 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3d554 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3d558 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3d55c 04e 34 0D B0 CD |         if_c    call    #utx_pre
3d560 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3d564 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3d568 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3d56c 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3d570 053             | .next_byte
3d570 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3d574 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3d578 055             | .wait
3d578 055 40 46 72 FD |                 testp   dp                      wc
3d57c 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3d580 057 23 03 08 FC |                 akpin   dp
3d584 058 22 A5 22 FC |                 wypin   utx, dm
3d588 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3d58c 05a             | 
3d58c 05a             | '------------------------------------------------------------------------------
3d58c 05a             | ' SETUP/OUT/INTERRUPT transaction.
3d58c 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3d58c 05a             | '------------------------------------------------------------------------------
3d58c 05a             | ' On entry:
3d58c 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3d58c 05a             | '     CRC(b19..23).
3d58c 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3d58c 05a             | '   pkt_data - count of DATAx payload bytes to send.
3d58c 05a             | ' On exit:
3d58c 05a             | '------------------------------------------------------------------------------
3d58c 05a             | txn_out
3d58c 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3d590 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3d594 05c 00 00 C0 FF 
3d598 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3d59c 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3d5a0 05f             | 
3d5a0 05f             |                 ' Fall through to utx_data
3d5a0 05f             | 
3d5a0 05f             | '------------------------------------------------------------------------------
3d5a0 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3d5a0 05f             | ' calculated while the data byte is being shifted out. Since data stage
3d5a0 05f             | ' success/fail is not determined until the status stage of the transaction,
3d5a0 05f             | ' this routine is only concerned about the current DATAx packet.
3d5a0 05f             | '------------------------------------------------------------------------------
3d5a0 05f             | ' On entry:
3d5a0 05f             | '   PTRA - hub start address of the data to read.
3d5a0 05f             | '   pkt_cnt - data payload size.
3d5a0 05f             | ' On exit:
3d5a0 05f             | '------------------------------------------------------------------------------
3d5a0 05f             | utx_data
3d5a0 05f 22 A7 82 FA |                 rqpin   urx, dm
3d5a4 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3d5a8 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3d5ac 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3d5b0 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3d5b4 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3d5b8 065 D8 0C B0 CD |         if_c    call    #utx_pre
3d5bc 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3d5c0 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3d5c4 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3d5c8 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3d5cc 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3d5d0 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3d5d4 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3d5d8 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3d5dc 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3d5e0 06f             | .read_byte
3d5e0 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3d5e4 070 F0 00 B0 FD |                 call    #utx_byte
3d5e8 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3d5ec 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3d5f0 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3d5f4 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3d5f8 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3d5fc 076             | .send_crc
3d5fc 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3d600 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3d604 078 D0 00 B0 FD |                 call    #utx_byte
3d608 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3d60c 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3d610 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3d614 07c             | 
3d614 07c             | '------------------------------------------------------------------------------
3d614 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3d614 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3d614 07c             | ' expects that the packet includes at least the CRC word.
3d614 07c             | '
3d614 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3d614 07c             | ' was requested, which makes it difficult to determine where the data stops
3d614 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3d614 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3d614 07c             | ' USB-16 expected residual value of 0xB001.
3d614 07c             | '
3d614 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3d614 07c             | ' so the caller can verify IN success before writing the data to its final
3d614 07c             | ' destination.
3d614 07c             | '------------------------------------------------------------------------------
3d614 07c             | ' On entry:
3d614 07c             | '   pkt_data - max byte count expected to be in the packet.
3d614 07c             | '   newb_flg - signals new byte ready when toggled.
3d614 07c             | ' On exit:
3d614 07c             | '   pkt_cnt - actual number of bytes read.
3d614 07c             | '------------------------------------------------------------------------------
3d614 07c             | urx_data
3d614 07c F7 75 03 F6 |                 mov     htmp2, pb
3d618 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3d61c 07e 00 00 C0 FF 
3d620 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3d624 080 BA EF 03 F6 |                 mov     pb, htmp2
3d628 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3d62c 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3d630 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3d634 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3d638 085             | .wait_byte
3d638 085             | ' In-line rx for max speed
3d638 085 22 A7 82 FA |                 rqpin   urx, dm
3d63c 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3d640 087 53 A5 02 F5 |                 and     utx, urx
3d644 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3d648 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3d64c 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3d650 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3d654 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3d658 08d DC FF 9F FD |                 jmp     #.wait_byte
3d65c 08e             | .get_byte
3d65c 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3d660 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3d664 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3d668 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3d66c 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3d670 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3d674 094             | .end_crc
3d674 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3d678 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3d67c 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3d680 097 2D 00 64 1D |         if_a    ret
3d684 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3d684 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3d684 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3d684 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3d684 098 22 A7 82 FA |                 rqpin   urx, dm
3d688 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3d68c 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3d690 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3d690 09b             | .chk_crc
3d690 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3d694 09c 58 00 00 FF 
3d698 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3d69c 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3d6a0 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3d6a4 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3d6a8 0a1 34 09 B0 FD |                 call    #poll_waitx
3d6ac 0a2             | 
3d6ac 0a2             |                 ' Fall through to utx_handshake
3d6ac 0a2             | 
3d6ac 0a2             | '------------------------------------------------------------------------------
3d6ac 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3d6ac 0a2             | ' the appropriate IP delay has been inserted.
3d6ac 0a2             | '------------------------------------------------------------------------------
3d6ac 0a2             | ' On entry:
3d6ac 0a2             | '   retval - handshake PID to send.
3d6ac 0a2             | ' On exit:
3d6ac 0a2             | '   retval unchanged.
3d6ac 0a2             | '------------------------------------------------------------------------------
3d6ac 0a2             | utx_handshake
3d6ac 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3d6b0 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3d6b4 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3d6b8 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3d6bc 0a6 5F A5 02 F6 |                 mov     utx, retval
3d6c0 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3d6c4 0a8             | .idle
3d6c4 0a8 22 A7 82 FA |                 rqpin   urx, dm
3d6c8 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3d6cc 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3d6d0 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3d6d4 0ac 08 09 90 FD |                 jmp     #poll_waitx
3d6d8 0ad             | 
3d6d8 0ad             | '------------------------------------------------------------------------------
3d6d8 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3d6d8 0ad             | '------------------------------------------------------------------------------
3d6d8 0ad             | ' On entry:
3d6d8 0ad             | '   utx - byte to transmit.
3d6d8 0ad             | ' On exit:
3d6d8 0ad             | '------------------------------------------------------------------------------
3d6d8 0ad             | utx_byte
3d6d8 0ad 40 46 72 FD |                 testp   dp                      wc
3d6dc 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3d6e0 0af 23 03 08 FC |                 akpin   dp
3d6e4 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3d6e8 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3d6ec 0b2             | 
3d6ec 0b2             | '------------------------------------------------------------------------------
3d6ec 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3d6ec 0b2             | '------------------------------------------------------------------------------
3d6ec 0b2             | ' On entry:
3d6ec 0b2             | ' On exit:
3d6ec 0b2             | '   retval - the byte read.
3d6ec 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3d6ec 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3d6ec 0b2             | '     received.
3d6ec 0b2             | '------------------------------------------------------------------------------
3d6ec 0b2             | urx_next
3d6ec 0b2 22 A7 8A FA |                 rdpin   urx, dm
3d6f0 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3d6f4 0b4 53 A5 02 F5 |                 and     utx, urx
3d6f8 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3d6fc 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3d700 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3d704 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3d708 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3d70c 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3d710 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3d714 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3d718 0bd 2D 00 64 FD |                 ret
3d71c 0be             | 
3d71c 0be             | '------------------------------------------------------------------------------
3d71c 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3d71c 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3d71c 0be             | ' length, and the PID is not included in the CRC calculation:
3d71c 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3d71c 0be             | '  CRC5  ENDP ADDRESS PID
3d71c 0be             | ' %00000_1111_1111111_xxxxxxxx
3d71c 0be             | '------------------------------------------------------------------------------
3d71c 0be             | ' On entry:
3d71c 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3d71c 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3d71c 0be             | ' On exit:
3d71c 0be             | '   ep_addr_pid - CRC value appended to the packet.
3d71c 0be             | '------------------------------------------------------------------------------
3d71c 0be             | calc_crc5
3d71c 0be FF 03 00 FF 
3d720 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3d724 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
3d728 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3d72c 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3d730 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
3d734 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3d738 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3d73c 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3d740 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3d744 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3d748 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
3d74c 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3d750 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
3d754 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3d758 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3d75c 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3d760 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3d764 0d0             | 
3d764 0d0             | '------------------------------------------------------------------------------
3d764 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3d764 0d0             | '------------------------------------------------------------------------------
3d764 0d0             | isr1_fsframe
3d764 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3d768 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3d76c 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3d770 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3d774 0d4             | .wait
3d774 0d4 40 46 72 FD |                 testp   dp                      wc
3d778 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3d77c 0d6 23 03 08 FC |                 akpin   dp
3d780 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3d784 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3d788 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3d78c 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3d790 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3d794 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3d798 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3d79c 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3d7a0 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3d7a4 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3d7a8 0e1 2C FF BF FD |                 call    #utx_byte
3d7ac 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3d7b0 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3d7b4 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3d7b8 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3d7bc 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3d7c0 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3d7c4 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3d7c8 0e9 5B A5 42 F5 |                 or      utx, icrc
3d7cc 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3d7d0 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3d7d4 0ec 20 00 90 FD |                 jmp     #isr1_wait
3d7d8 0ed             | isr1_lsframe
3d7d8 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3d7dc 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3d7e0 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3d7e4 0f0             | .wait
3d7e4 0f0 40 46 72 FD |                 testp   dp                      wc
3d7e8 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3d7ec 0f2 23 03 08 FC |                 akpin   dp
3d7f0 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3d7f4 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3d7f8 0f5             | isr1_wait
3d7f8 0f5 22 A5 82 FA |                 rqpin   utx, dm
3d7fc 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3d800 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3d804 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3d808 0f9 03 00 00 FF 
3d80c 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3d810 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3d814 0fc F5 FF 3B FB |                 reti1
3d818 0fd             | 
3d818 0fd             | '------------------------------------------------------------------------------
3d818 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3d818 0fd             | ' transaction will complete before the next frame is triggered.
3d818 0fd             | '------------------------------------------------------------------------------
3d818 0fd             | ' On entry:
3d818 0fd             | ' On exit:
3d818 0fd             | '------------------------------------------------------------------------------
3d818 0fd             | wait_txn_ok
3d818 0fd 1A 74 63 FD |                 getct   htmp2
3d81c 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
3d820 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3d824 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3d828 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3d82c 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3d830 103 2D 00 64 FD |                 ret
3d834 104             | 
3d834 104             | '------------------------------------------------------------------------------
3d834 104             | ' A device connection was detected, or a bus reset was requested by the USB
3d834 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3d834 104             | ' and perform a reset sequence prior to device enumeration.
3d834 104             | '------------------------------------------------------------------------------
3d834 104             | dev_reset
3d834 104 22 A7 82 FA |                 rqpin   urx, dm
3d838 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3d83c 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3d840 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3d844 108             | reset
3d844 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3d848 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3d84c 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3d850 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3d854 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3d858 10d 1A 92 62 FD |                 getct   iframe_ct_base
3d85c 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3d860 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3d864 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3d868 111 24 70 07 F1 |                 add     htmp, #36
3d86c 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3d870 113             | .framewait
3d870 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
3d874 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3d878 115 2D 00 64 FD |                 ret
3d87c 116             | 
3d87c 116             | '------------------------------------------------------------------------------
3d87c 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3d87c 116             | '------------------------------------------------------------------------------
3d87c 116             | ' On entry:
3d87c 116             | '   PTRA - source address.
3d87c 116             | '   PB - destination address.
3d87c 116             | '   hr0 - length of copy, in bytes.
3d87c 116             | ' On exit:
3d87c 116             | '------------------------------------------------------------------------------
3d87c 116             | hmemcpy
3d87c 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
3d880 117 F7 71 43 FC |                 wrbyte  htmp, pb
3d884 118 01 EE 07 F1 |                 add     pb, #1
3d888 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3d88c 11a             | 
3d88c 11a             | '------------------------------------------------------------------------------
3d88c 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3d88c 11a             | ' loop until the errant device is disconnected.
3d88c 11a             | '------------------------------------------------------------------------------
3d88c 11a             | ' On entry:
3d88c 11a             | ' On exit:
3d88c 11a             | '------------------------------------------------------------------------------
3d88c 11a             | host_error
3d88c 11a             |           if ERROR_LED >= 0
3d88c 11a             |           end
3d88c 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3d890 11b             | 
3d890 11b             | '------------------------------------------------------------------------------
3d890 11b             | ' Get HID descriptor buffer for current port
3d890 11b             | '------------------------------------------------------------------------------
3d890 11b             | ' On entry:
3d890 11b             | ' On exit:
3d890 11b             | '   PB - HID descriptor buffer pointer
3d890 11b             | '------------------------------------------------------------------------------
3d890 11b             | get_hid_descr_buffer
3d890 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3d894 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3d898 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3d89c 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3d8a0 11f             | 
3d8a0 11f             | 
3d8a0 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3d8a4 120             | 
3d8a4 120             | ' USB commands and error codes
3d8a4 120 00 00 00 00 | cmd_data        long    0
3d8a8 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3d8ac 122             | 
3d8ac 122             | ' Parameters block assigned at cog startup
3d8ac 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3d8b0 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3d8b4 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3d8b8 125             | if ACTIVITY_LED >= 0
3d8b8 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3d8b8 125             | end
3d8b8 125             | if ERROR_LED >= 0
3d8b8 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3d8b8 125             | end
3d8b8 125 00 00 00 00 | hid_descr_p     long    0
3d8bc 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3d8bc 126             | 'hkbd_report_p   long    0
3d8bc 126 00 00 00 00 | hub_descr_p     long    0
3d8c0 127 00 00 00 00 | urx_buff_p      long    0
3d8c4 128 00 00 00 00 | dev_desc_buff_p long    0
3d8c8 129 00 00 00 00 | con_desc_buff_p long    0
3d8cc 12a 00 00 00 00 | cache_start_p   long    0
3d8d0 12b 00 00 00 00 | cache_end_p     long    0
3d8d4 12c             | if EMUPAD_MAX_PLAYER > 0
3d8d4 12c             | emupad_out_ptr  long    0
3d8d4 12c             | end
3d8d4 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3d8d8 12d             | 
3d8d8 12d             | hdev_init_start
3d8d8 12d             | hdev_port       res     1
3d8d8 12d             | hdev_port       res     1
3d8d8 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3d8d8 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3d8d8 12d             | kbm_next_datax  res     1
3d8d8 12d             | kbm_next_datax  res     1
3d8d8 12d             | hub_intf_num    res     1
3d8d8 12d             | hub_intf_num    res     1
3d8d8 12d             | hub_next_datax  res     1
3d8d8 12d             | hub_next_datax  res     1
3d8d8 12d             | hub_status_chg  res     1
3d8d8 12d             | hub_status_chg  res     1
3d8d8 12d             | hub_port_status res     1
3d8d8 12d             | hub_port_status res     1
3d8d8 12d             | if HAVE_MOUSE
3d8d8 12d             | ms_intf_num     res     1
3d8d8 12d             | ms_intf_num     res     1
3d8d8 12d             | ms_in_max_pkt   res     1
3d8d8 12d             | ms_in_max_pkt   res     1
3d8d8 12d             | end
3d8d8 12d             | kb_intf_num     res     1
3d8d8 12d             | kb_intf_num     res     1
3d8d8 12d             | kb_interval     res     1
3d8d8 12d             | kb_interval     res     1
3d8d8 12d             | kb_in_max_pkt   res     1
3d8d8 12d             | kb_in_max_pkt   res     1
3d8d8 12d             | kb_max_index    res     1
3d8d8 12d             | kb_max_index    res     1
3d8d8 12d             | kb_led_states   res     1
3d8d8 12d             | kb_led_states   res     1
3d8d8 12d             | gp_intf_num     res     1
3d8d8 12d             | gp_intf_num     res     1
3d8d8 12d             | gp_interval     res     1
3d8d8 12d             | gp_interval     res     1
3d8d8 12d             | gp_max_index    res     1
3d8d8 12d             | gp_max_index    res     1
3d8d8 12d             | gp_descr_len    res     1+MAX_DEVICES
3d8d8 12d             | gp_descr_len    res     1+MAX_DEVICES
3d8d8 12d             | hdev_init_end
3d8d8 12d             | 
3d8d8 12d             | ' Initialized at cog startup:
3d8d8 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3d8d8 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3d8d8 12d             | iframe_ct_new   res     1
3d8d8 12d             | iframe_ct_new   res     1
3d8d8 12d             | iframe_ct_base  res     1
3d8d8 12d             | iframe_ct_base  res     1
3d8d8 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3d8d8 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3d8d8 12d             | 
3d8d8 12d             | ' This register block is reset to zero when a USB device connects
3d8d8 12d             | hreg_init_start
3d8d8 12d             | hstatus         res     1         ' Host status flags
3d8d8 12d             | hstatus         res     1         ' Host status flags
3d8d8 12d             | hctwait         res     1         ' Poll-based wait clocks
3d8d8 12d             | hctwait         res     1         ' Poll-based wait clocks
3d8d8 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3d8d8 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3d8d8 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3d8d8 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3d8d8 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3d8d8 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3d8d8 12d             | xfer_retry      res     1         ' Control transfer retry count
3d8d8 12d             | xfer_retry      res     1         ' Control transfer retry count
3d8d8 12d             | retry           res     1         ' Transaction retry count
3d8d8 12d             | retry           res     1         ' Transaction retry count
3d8d8 12d             | utx             res     1         ' Byte to transmit on USB
3d8d8 12d             | utx             res     1         ' Byte to transmit on USB
3d8d8 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3d8d8 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3d8d8 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3d8d8 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3d8d8 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3d8d8 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3d8d8 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3d8d8 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3d8d8 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3d8d8 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3d8d8 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3d8d8 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3d8d8 12d             | frame           res     1         ' USB 1ms frame counter value
3d8d8 12d             | frame           res     1         ' USB 1ms frame counter value
3d8d8 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3d8d8 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3d8d8 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3d8d8 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3d8d8 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3d8d8 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3d8d8 12d             | crc             res     1         ' Used for CRC16 calculation
3d8d8 12d             | crc             res     1         ' Used for CRC16 calculation
3d8d8 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3d8d8 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3d8d8 12d             | retval          res     1         ' Global success/fail return parameter
3d8d8 12d             | retval          res     1         ' Global success/fail return parameter
3d8d8 12d             | context_retval  res     1         ' Operation contextual return parameter
3d8d8 12d             | context_retval  res     1         ' Operation contextual return parameter
3d8d8 12d             | ' Device stuff
3d8d8 12d             | hdev_id         res     1+MAX_DEVICES
3d8d8 12d             | hdev_id         res     1+MAX_DEVICES
3d8d8 12d             | hdev_bcd        res     1
3d8d8 12d             | hdev_bcd        res     1
3d8d8 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3d8d8 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3d8d8 12d             | ' Keyboard/mouse stuff
3d8d8 12d             | hctrl_ep_addr   res     1
3d8d8 12d             | hctrl_ep_addr   res     1
3d8d8 12d             | hctrl_max_pkt   res     1
3d8d8 12d             | hctrl_max_pkt   res     1
3d8d8 12d             | hconfig_base    res     1
3d8d8 12d             | hconfig_base    res     1
3d8d8 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3d8d8 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3d8d8 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3d8d8 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3d8d8 12d             | hdev_class      res     1
3d8d8 12d             | hdev_class      res     1
3d8d8 12d             | hdev_subclass   res     1
3d8d8 12d             | hdev_subclass   res     1
3d8d8 12d             | hdev_protocol   res     1
3d8d8 12d             | hdev_protocol   res     1
3d8d8 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3d8d8 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3d8d8 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3d8d8 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3d8d8 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3d8d8 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3d8d8 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3d8d8 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3d8d8 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3d8d8 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3d8d8 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3d8d8 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3d8d8 12d             | if HAVE_MOUSE
3d8d8 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3d8d8 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3d8d8 12d             | end
3d8d8 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3d8d8 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3d8d8 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3d8d8 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3d8d8 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3d8d8 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3d8d8 12d             | hdev_out_addr   res     1
3d8d8 12d             | hdev_out_addr   res     1
3d8d8 12d             | 
3d8d8 12d             | if EMUPAD_MAX_PLAYER > 0
3d8d8 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3d8d8 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3d8d8 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3d8d8 12d             | end
3d8d8 12d             | 
3d8d8 12d             | hreg_init_end
3d8d8 12d             | 
3d8d8 12d             | hidr_start
3d8d8 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3d8d8 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3d8d8 12d             | hidr_flags      res     1
3d8d8 12d             | hidr_flags      res     1
3d8d8 12d             | hidr_axis       res     3
3d8d8 12d             | hidr_axis       res     3
3d8d8 12d             | hidr_buttons    res     1
3d8d8 12d             | hidr_buttons    res     1
3d8d8 12d             | hidr_hats       res     1
3d8d8 12d             | hidr_hats       res     1
3d8d8 12d             | '' Above are actually useful values, 6 longs
3d8d8 12d             | hidr_id         res     1
3d8d8 12d             | hidr_id         res     1
3d8d8 12d             | hidr_state      res     1
3d8d8 12d             | hidr_state      res     1
3d8d8 12d             | hidr_size       res     1
3d8d8 12d             | hidr_size       res     1
3d8d8 12d             | hidr_count      res     1
3d8d8 12d             | hidr_count      res     1
3d8d8 12d             | hidr_offset     res     1
3d8d8 12d             | hidr_offset     res     1
3d8d8 12d             | hidr_usage_idx  res     1
3d8d8 12d             | hidr_usage_idx  res     1
3d8d8 12d             | hidr_lminmax    res     1
3d8d8 12d             | hidr_lminmax    res     1
3d8d8 12d             | hidr_pminmax    res     1
3d8d8 12d             | hidr_pminmax    res     1
3d8d8 12d             | hidr_type       res     1
3d8d8 12d             | hidr_type       res     1
3d8d8 12d             | hidr_end
3d8d8 12d             | 
3d8d8 12d             | ' Variables dependent on the system freqency
3d8d8 12d             | _var_64_lower_  res     1
3d8d8 12d             | _var_64_lower_  res     1
3d8d8 12d             | _var_64_upper_  res     1
3d8d8 12d             | _var_64_upper_  res     1
3d8d8 12d             | _12Mbps_        res     1
3d8d8 12d             | _12Mbps_        res     1
3d8d8 12d             | _1_5Mbps_       res     1
3d8d8 12d             | _1_5Mbps_       res     1
3d8d8 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3d8d8 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3d8d8 12d             | _1us_           res     1         ' 1us
3d8d8 12d             | _1us_           res     1         ' 1us
3d8d8 12d             | _10us_          res     1         ' 10us
3d8d8 12d             | _10us_          res     1         ' 10us
3d8d8 12d             | _33us_          res     1         ' 33us
3d8d8 12d             | _33us_          res     1         ' 33us
3d8d8 12d             | _txn_err_       res     1         ' 250us
3d8d8 12d             | _txn_err_       res     1         ' 250us
3d8d8 12d             | _500us_         res     1         ' 500us
3d8d8 12d             | _500us_         res     1         ' 500us
3d8d8 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3d8d8 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3d8d8 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3d8d8 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3d8d8 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3d8d8 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3d8d8 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3d8d8 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3d8d8 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3d8d8 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3d8d8 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3d8d8 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3d8d8 12d             | _preamble_wait_ res     1
3d8d8 12d             | _preamble_wait_ res     1
3d8d8 12d             | _1ms_           res     1         ' 1ms
3d8d8 12d             | _1ms_           res     1         ' 1ms
3d8d8 12d             | _2ms_           res     1         ' 2ms
3d8d8 12d             | _2ms_           res     1         ' 2ms
3d8d8 12d             | _suspend_wait_  res     1         ' 3ms
3d8d8 12d             | _suspend_wait_  res     1         ' 3ms
3d8d8 12d             | _4ms_           res     1         ' 4ms
3d8d8 12d             | _4ms_           res     1         ' 4ms
3d8d8 12d             | _xfer_wait_     res     1         ' 5ms
3d8d8 12d             | _xfer_wait_     res     1         ' 5ms
3d8d8 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3d8d8 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3d8d8 12d             | _reset_hold_    res     1         ' 15ms
3d8d8 12d             | _reset_hold_    res     1         ' 15ms
3d8d8 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3d8d8 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3d8d8 12d             | _21ms_          res     1         ' 21ms
3d8d8 12d             | _21ms_          res     1         ' 21ms
3d8d8 12d             | _100ms_         res     1         ' 100ms
3d8d8 12d             | _100ms_         res     1         ' 100ms
3d8d8 12d             | _500ms_         res     1         ' 500ms
3d8d8 12d             | _500ms_         res     1         ' 500ms
3d8d8 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3d8d8 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3d8d8 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3d8d8 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3d8d8 12d             | '------------------------------------------------------------------------------
3d8d8 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3d8d8 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3d8d8 12d             | _usb_d_ls_nco_  res     1
3d8d8 12d             | _usb_d_ls_nco_  res     1
3d8d8 12d             | _usb_h_fs_nco_  res     1
3d8d8 12d             | _usb_h_fs_nco_  res     1
3d8d8 12d             | _usb_d_fs_nco_  res     1
3d8d8 12d             | _usb_d_fs_nco_  res     1
3d8d8 12d             | '------------------------------------------------------------------------------
3d8d8 12d             | ' Scratch registers
3d8d8 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3d8d8 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3d8d8 12d             | htmp1           res     1
3d8d8 12d             | htmp1           res     1
3d8d8 12d             | htmp2           res     1
3d8d8 12d             | htmp2           res     1
3d8d8 12d             | htmp3           res     1
3d8d8 12d             | htmp3           res     1
3d8d8 12d             | hrep            res     1         ' Repeat count
3d8d8 12d             | hrep            res     1         ' Repeat count
3d8d8 12d             | hsave0          res     1         ' Subroutine parameter saves
3d8d8 12d             | hsave0          res     1         ' Subroutine parameter saves
3d8d8 12d             | hsave1          res     1
3d8d8 12d             | hsave1          res     1
3d8d8 12d             | hsave2          res     1
3d8d8 12d             | hsave2          res     1
3d8d8 12d             | isrtmp1         res     1
3d8d8 12d             | isrtmp1         res     1
3d8d8 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3d8d8 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3d8d8 12d             | hr0             res     1         ' Multi-purpose registers
3d8d8 12d             | hr0             res     1         ' Multi-purpose registers
3d8d8 12d             | hr1             res     1
3d8d8 12d             | hr1             res     1
3d8d8 12d             | hr2             res     1
3d8d8 12d             | hr2             res     1
3d8d8 12d             | hr3             res     1
3d8d8 12d             | hr3             res     1
3d8d8 12d             | hpar1           res     1         ' Routine entry/exit parameters
3d8d8 12d             | hpar1           res     1         ' Routine entry/exit parameters
3d8d8 12d             | hpar2           res     1
3d8d8 12d             | hpar2           res     1
3d8d8 12d             | hpar3           res     1
3d8d8 12d             | hpar3           res     1
3d8d8 12d             | hct2            res     1         ' Function response bus turn-around timer
3d8d8 12d             | hct2            res     1         ' Function response bus turn-around timer
3d8d8 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3d8d8 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3d8d8 12d             | mod_cnt         res     1         ' Used in idle loops
3d8d8 12d             | mod_cnt         res     1         ' Used in idle loops
3d8d8 12d             |                 fit     $1F0
3d8d8 12d             |                 org     $200
3d8d8 200             | hlut_start
3d8d8 200             | 
3d8d8 200             | '------------------------------------------------------------------------------
3d8d8 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3d8d8 200             | ' settings to startup defaults.
3d8d8 200             | '------------------------------------------------------------------------------
3d8d8 200             | ' On entry:
3d8d8 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3d8d8 200             | '------------------------------------------------------------------------------
3d8d8 200             | set_speed_full
3d8d8 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3d8dc 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3d8e0 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3d8e4 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3d8e8 204             | '                ret                             wcz     ' Restore caller flags on exit
3d8e8 204             | 
3d8e8 204             | '------------------------------------------------------------------------------
3d8e8 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3d8e8 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3d8e8 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3d8e8 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3d8e8 204             | ' putting the smart pins into reset.
3d8e8 204             | '------------------------------------------------------------------------------
3d8e8 204             | ' On entry:
3d8e8 204             | ' On exit: CZ flags restored to caller states
3d8e8 204             | '------------------------------------------------------------------------------
3d8e8 204             | set_speed_low
3d8e8 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3d8ec 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3d8f0 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3d8f4 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3d8f8 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3d8fc 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3d900 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3d904 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3d908 20c             | 
3d908 20c             | '------------------------------------------------------------------------------
3d908 20c             | ' Perform configuration stuff required when a device intitially connects.
3d908 20c             | '------------------------------------------------------------------------------
3d908 20c             | ' On entry:
3d908 20c             | ' On exit:
3d908 20c             | '------------------------------------------------------------------------------
3d908 20c             | on_connect
3d908 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3d90c 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3d910 20e             | .retry
3d910 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3d914 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3d918 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3d91c 211 00 08 00 FF 
3d920 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3d924 213 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3d928 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3d92c 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3d930 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3d934 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3d938 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d93c 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3d940 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3d944 21b 4C 03 B0 FD |                 call    #poll_waitx
3d948 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3d94c 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3d950 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3d954 21f B8 FF 9F FD |                 jmp     #.retry
3d958 220             | .get_dev_desc
3d958 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3d95c 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3d960 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3d964 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
3d968 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3d96c 225 88 FB BF FD |                 call    #reset
3d970 226 30 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3d974 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3d978 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3d97c 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3d980 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d984 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3d988 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
3d98c 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3d990 22e 04 00 00 FF 
3d994 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3d998 230 34 FA BF FD |                 call    #calc_crc5
3d99c 231 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3d9a0 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3d9a4 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3d9a8 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3d9ac 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3d9b0 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3d9b4 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d9b8 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3d9bc 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3d9c0 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3d9c4 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3d9c8 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
3d9cc 23d C4 02 B0 FD |                 call    #poll_waitx
3d9d0 23e 20 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3d9d4 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3d9d8 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3d9dc 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3d9e0 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3d9e4 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d9e8 244 2D 00 64 5D |         if_nz   ret
3d9ec 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3d9f0 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3d9f4 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3d9f8 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3d9fc 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3da00 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3da04 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3da08 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3da0c 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3da10 24e 2C FB 9F CD |         if_b    jmp     #host_error
3da14 24f 10 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3da18 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3da1c 251 2D EC 63 FD |                 call    pa
3da20 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3da24 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3da28 254 2C EC 63 FD |                 jmp     pa
3da2c 255             | 
3da2c 255             | '------------------------------------------------------------------------------
3da2c 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3da2c 255             | ' Status reporting is always in the function-to-host direction.
3da2c 255             | '------------------------------------------------------------------------------
3da2c 255             | ' On entry:
3da2c 255             | '   PTRA - start address of the SETUP data in hub.
3da2c 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3da2c 255             | '     stage.
3da2c 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3da2c 255             | ' On exit:
3da2c 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3da2c 255             | '     contains the count of data stage bytes actually received, which must
3da2c 255             | '     always be <= the count requested.
3da2c 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3da2c 255             | '     more specific USB operation error code.
3da2c 255             | '------------------------------------------------------------------------------
3da2c 255             | control_read
3da2c 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3da30 256 F8 8F 03 F6 |                 mov     hpar2, ptra
3da34 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3da38 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3da3c 259             | .xfer_start
3da3c 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3da40 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3da44 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3da48 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3da4c 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3da50 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3da54 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3da58 260 61 00 00 FF 
3da5c 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3da60 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3da64 263             | .data
3da64 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3da68 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3da6c 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3da70 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3da74 267             | .nak_retry
3da74 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3da78 268             | .in_retry
3da78 268 BC F6 BF FD |                 call    #txn_in
3da7c 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3da80 26a 28 00 90 AD |         if_z    jmp     #.commit
3da84 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3da88 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3da8c 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3da90 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3da94 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3da98 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3da9c 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3daa0 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3daa4 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3daa8 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3daac 275             | .commit
3daac 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3dab0 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3dab4 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3dab8 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
3dabc 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3dac0 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3dac4 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3dac8 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3dacc 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3dad0 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3dad4 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3dad8 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3dadc 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3dae0 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3dae4 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3dae8 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3daec 285             | .pre_status
3daec 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3daf0 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3daf4 287 00 B0 06 F6 |                 mov     pkt_data, #0
3daf8 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3dafc 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3db00 28a 61 00 00 FF 
3db04 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3db08 28c             | .out_retry
3db08 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3db0c 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3db10 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3db14 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3db18 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3db1c 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3db20 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3db24 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3db28 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3db2c 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3db30 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3db34 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3db34 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3db34 297             | ' ControlRead() transfer gets things unstuck most of the time...
3db34 297             | .xfer_retry
3db34 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
3db38 298 58 01 B0 FD |                 call    #poll_waitx
3db3c 299 8C F9 BF FD |                 call    #wait_txn_ok
3db40 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3db44 29b C7 F1 03 F6 |                 mov     ptra, hpar2
3db48 29c C8 EF 03 F6 |                 mov     pb, hpar3
3db4c 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3db50 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3db54 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3db58 2a0             | 
3db58 2a0             | '------------------------------------------------------------------------------
3db58 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3db58 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3db58 2a0             | ' the SETUP data struct is filled with the required values.
3db58 2a0             | '------------------------------------------------------------------------------
3db58 2a0             | ' On entry:
3db58 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3db58 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3db58 2a0             | '     stage.
3db58 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3db58 2a0             | ' On exit:
3db58 2a0             | '   retval - used to convey the success/failure of each stage.
3db58 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3db58 2a0             | '     more specific USB operation error code.
3db58 2a0             | '------------------------------------------------------------------------------
3db58 2a0             | control_write
3db58 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3db5c 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3db60 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3db64 2a3             | 
3db64 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3db68 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
3db6c 2a5 F7 91 03 F6 |                 mov     hpar3, pb
3db70 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3db74 2a7             | .xfer_start
3db74 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3db78 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3db7c 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3db80 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3db84 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3db88 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3db8c 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3db90 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3db94 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3db98 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3db9c 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3dba0 2b2             | .data
3dba0 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3dba4 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3dba8 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3dbac 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3dbb0 2b6             | .out_retry
3dbb0 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3dbb4 2b7 88 F6 BF FD |                 call    #txn_out
3dbb8 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3dbbc 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3dbc0 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3dbc4 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3dbc8 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3dbcc 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3dbd0 2be             | .commit
3dbd0 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3dbd4 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3dbd8 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3dbdc 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3dbe0 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3dbe4 2c3             | pre_status_in
3dbe4 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3dbe8 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3dbec 2c5             | .status_retry
3dbec 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3dbf0 2c6 44 F5 BF FD |                 call    #txn_in
3dbf4 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3dbf8 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3dbfc 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3dc00 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3dc04 2cb 2D 00 64 AD |         if_z    ret
3dc08 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3dc0c 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3dc10 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3dc14 2cf             | '               ret                                     ' Caller must handle transfer retirement
3dc14 2cf             | 
3dc14 2cf             | '------------------------------------------------------------------------------
3dc14 2cf             | ' Execute an IN interrupt transaction.
3dc14 2cf             | '------------------------------------------------------------------------------
3dc14 2cf             | ' On entry:
3dc14 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3dc14 2cf             | '   hpar2 - Address of the IN data buffer
3dc14 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3dc14 2cf             | ' On exit:
3dc14 2cf             | '   retval - the result of the operation.
3dc14 2cf             | '   hpar3 - the count of IN data bytes actually received.
3dc14 2cf             | '------------------------------------------------------------------------------
3dc14 2cf             | do_int_in
3dc14 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3dc18 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3dc1c 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3dc20 2d2             | 
3dc20 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
3dc24 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3dc28 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3dc2c 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3dc30 2d6             | .retry
3dc30 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3dc34 2d7 00 F5 BF FD |                 call    #txn_in
3dc38 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3dc3c 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3dc40 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3dc44 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3dc48 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3dc4c 2dd 54 00 B0 FD |                 call    #retry_wait
3dc50 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3dc54 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3dc58 2e0 D4 FF 9F FD |                 jmp     #.retry
3dc5c 2e1             | .commit
3dc5c 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3dc60 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3dc64 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3dc68 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3dc6c 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3dc70 2e6             | .post_ret
3dc70 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3dc74 2e7             | 
3dc74 2e7             | 
3dc74 2e7             | '------------------------------------------------------------------------------
3dc74 2e7             | ' Resets the downstream hub port to FS
3dc74 2e7             | '------------------------------------------------------------------------------
3dc74 2e7             | dwnstream_reset
3dc74 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3dc78 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3dc7c 2e9             | 
3dc7c 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3dc80 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3dc84 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3dc88 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3dc8c 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3dc90 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3dc94 2ef             | 
3dc94 2ef             | '------------------------------------------------------------------------------
3dc94 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3dc94 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3dc94 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3dc94 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3dc94 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3dc94 2ef             | '------------------------------------------------------------------------------
3dc94 2ef             | ' On entry:
3dc94 2ef             | '   hctwait - wait interval in sysclocks.
3dc94 2ef             | ' On exit:
3dc94 2ef             | '------------------------------------------------------------------------------
3dc94 2ef             | poll_waitx
3dc94 2ef 1A 92 63 FD |                 getct   hct2
3dc98 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
3dc9c 2f1             | .wait
3dc9c 2f1 FF 25 CC FB |                 jnct2   #.wait
3dca0 2f2 2D 00 64 FD |                 ret
3dca4 2f3             | 
3dca4 2f3             | '------------------------------------------------------------------------------
3dca4 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3dca4 2f3             | '------------------------------------------------------------------------------
3dca4 2f3             | ' On entry:
3dca4 2f3             | '   retval - transaction response PID or error code.
3dca4 2f3             | ' On exit:
3dca4 2f3             | '------------------------------------------------------------------------------
3dca4 2f3             | retry_wait
3dca4 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3dca8 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3dcac 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3dcb0 2f6 14 00 90 AD |         if_z    jmp     #.nak
3dcb4 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3dcb8 2f8 D8 FF BF FD |                 call    #poll_waitx
3dcbc 2f9             | .dec
3dcbc 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3dcc0 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3dcc4 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3dcc8 2fc             | .nak
3dcc8 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3dccc 2fd C4 FF BF FD |                 call    #poll_waitx
3dcd0 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3dcd4 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3dcd8 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3dcdc 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3dce0 302 2D 00 64 FD |                 ret
3dce4 303             | 
3dce4 303             | host_reset
3dce4 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3dce8 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3dcec 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3dcec 305 BD 01 05 FF 
3dcf0 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3dcf4 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3dcf8 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3dcfc 309             | ' Check to see if the system clock has been changed.
3dcfc 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3dd00 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3dd04 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3dd08 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3dd0c 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3dd10 30e 40 46 62 FD |                 dirl    dp
3dd14 30f             | 
3dd14 30f 28 02 64 FD |                 setq    #1
3dd18 310 80 00 80 FF 
3dd1c 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3dd20 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3dd24 313             | .enable
3dd24 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3dd28 314 41 46 62 FD |                 dirh    dp
3dd2c 315 1F 36 63 FD |                 waitx   _1us_
3dd30 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3dd34 317             | 
3dd34 317             |                 ' Handle Port protection enable and startup delay
3dd34 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
3dd38 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3dd3c 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3dd40 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3dd44 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3dd48 31c             | 
3dd48 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3dd4c 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3dd50 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3dd54 31f 00 00 04 F6 |                 mov     0-0, #0
3dd58 320             | .regloop
3dd58 320             | 
3dd58 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3dd58 320             | 
3dd58 320             | discon_entry
3dd58 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3dd5c 321             | 
3dd5c 321             |               
3dd5c 321             |         if HAVE_HIDPAD
3dd5c 321 D4 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3dd60 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3dd64 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3dd68 324 F7 01 68 FC |                 wrlong  #0,pb
3dd6c 325             |         end
3dd6c 325             |         if EMUPAD_MAX_PLAYER > 0
3dd6c 325             |         end
3dd6c 325             | 
3dd6c 325             |                 ' Fall through to disconnected loop
3dd6c 325             | 
3dd6c 325             | '-----------------------------------------------------------------------------------------------------------------
3dd6c 325             | ' Device connect handling (Section 7.1.7.3).
3dd6c 325             | '-----------------------------------------------------------------------------------------------------------------
3dd6c 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3dd6c 325             | ' device to connect (Section 7.1.7.3).
3dd6c 325             | '-----------------------------------------------------------------------------------------------------------------
3dd6c 325             | disconnected
3dd6c 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3dd70 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3dd74 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3dd78 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3dd7c 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3dd80 32a             |         if ACTIVITY_LED >= 0
3dd80 32a             |         end
3dd80 32a 22 A7 82 FA |                 rqpin   urx, dm
3dd84 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3dd88 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3dd8c 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3dd90 32e             | .se1_test
3dd90 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3dd94 32f FC FE BF FD |                 call    #poll_waitx
3dd98 330 22 A7 82 FA |                 rqpin   urx, dm
3dd9c 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3dda0 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3dda4 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3dda8 334             | .se1            'SE1 is a fatal error condition
3dda8 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
3ddac 335 E4 FE BF FD |                 call    #poll_waitx
3ddb0 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3ddb4 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3ddb8 338             | .connect_test                                           ' Test lines until stable J/K state seen
3ddb8 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3ddbc 339 22 A7 82 FA |                 rqpin   urx, dm
3ddc0 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3ddc4 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3ddc8 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3ddcc 33d             | connected
3ddcc 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3ddd0 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3ddd4 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3ddd8 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3dddc 341             | .set_pulse
3dddc 341 1A 64 63 FD |                 getct   _pulse_time_
3dde0 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3dde4 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3dde4 343             | ' of 1ms and make a correction, if necessary.
3dde4 343             | '                mov     htmp, _1ms_
3dde4 343             | '                subs    htmp, iframe_delta
3dde4 343             | '                adds    _frame1ms_clks_, htmp
3dde4 343             | '                debug(udec(_frame1ms_clks_))
3dde4 343             | 
3dde4 343             |                 ' Fall through to idle/processing loop
3dde4 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3dde8 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3ddec 345             | 
3ddec 345             | hidle
3ddec 345 22 A7 82 FA |                 rqpin   urx, dm
3ddf0 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3ddf4 347 98 00 90 CD |         if_c    jmp     #.se0_test
3ddf8 348 24 06 70 FD |                 pollct3                         wc
3ddfc 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3de00 34a 1A 94 63 FD |                 getct   hct3
3de04 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3de08 34c             | 
3de08 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3de0c 34d 00 70 E3 F8 |                 getbyte htmp
3de10 34e             | 
3de10 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
3de14 34f 84 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3de18 350 40 00 90 AD |         if_z    jmp     #.poll
3de1c 351             | 
3de1c 351             |         if _HAVE_GAMEPAD
3de1c 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
3de20 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3de24 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3de28 354 0C 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3de2c 355 2C 00 90 AD |         if_z    jmp     #.poll
3de30 356             |         end
3de30 356             | 
3de30 356             |         if HAVE_MOUSE
3de30 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3de34 357 30 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3de38 358 20 00 90 AD |         if_z    jmp     #.poll
3de3c 359             |         end
3de3c 359             | 
3de3c 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
3de40 35a 98 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3de44 35b 14 00 90 AD |         if_z    jmp     #.poll
3de48 35c             | 
3de48 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
3de4c 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3de50 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3de54 35f 98 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3de58 360             |         if HAVE_MOUSE
3de58 360 30 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3de5c 361             |         else
3de5c 361             |         end
3de5c 361             | 
3de5c 361             | .poll
3de5c 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3de60 362 2D EC 63 FD |                 call    pa
3de64 363             | .skip_poll
3de64 363             | 
3de64 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3de68 364             | 
3de68 364             | .nopoll
3de68 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3de6c 365 44 00 90 AD |         if_z    jmp     #hsuspend
3de70 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3de74 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3de78 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3de7c 369 1A 84 63 FD |                 getct   hr0
3de80 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3de84 36b             |         if ACTIVITY_LED >= 0
3de84 36b             |         end
3de84 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
3de88 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
3de8c 36d 5C FF 9F FD |                 jmp     #hidle
3de90 36e             | ' Check for extended SE0 state on the bus
3de90 36e             | .se0_test
3de90 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
3de94 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3de98 370 22 A7 82 FA |                 rqpin   urx, dm
3de9c 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3dea0 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3dea4 373 24 F6 BF FD |                 call    #wait_txn_ok
3dea8 374 00 00 80 FF 
3deac 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3deb0 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3deb0 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3deb4 377             | 
3deb4 377             | hsuspend
3deb4 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3deb8 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3debc 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3dec0 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3dec4 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3dec8 37c 00 96 07 F6 |                 mov     mod_cnt, #0
3decc 37d             | 
3decc 37d             |                 ' Fall through to resume wait loop
3decc 37d             | 
3decc 37d             | hwait_resume
3decc 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3ded0 37e 02 86 47 F0 |                 shr     hr1, #2
3ded4 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3ded8 380             |         if ACTIVITY_LED >= 0
3ded8 380             |         end
3ded8 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3dedc 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3dee0 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3dee4 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3dee8 384 18 00 90 AD |         if_z    jmp     #.resume
3deec 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3def0 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3def4 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3def8 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3defc 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3df00 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3df04 38b             | .resume
3df04 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3df08 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3df0c 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3df10 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
3df14 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3df18 390 1F 70 63 FD |                 waitx   htmp
3df1c 391 22 07 28 FC |                 wypin   #OUT_J, dm
3df20 392 01 70 47 F0 |                 shr     htmp, #1
3df24 393 1F 70 63 FD |                 waitx   htmp
3df28 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3df2c 395 1A 92 62 FD |                 getct   iframe_ct_base
3df30 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3df34 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3df38 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3df3c 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
3df40 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3df44 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3df48 39c             | 
3df48 39c             | '------------------------------------------------------------------------------
3df48 39c             | ' Send preamble to enable low-speed HUB ports
3df48 39c             | '------------------------------------------------------------------------------
3df48 39c             | ' On entry:
3df48 39c             | ' On exit:
3df48 39c             | '   USB baud rate set to low-speed
3df48 39c             | '------------------------------------------------------------------------------
3df48 39c             | utx_pre
3df48 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3df4c 39d 40 46 62 FD |                 dirl    dp
3df50 39e 28 02 64 FD |                 setq    #1
3df54 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3df58 3a0 58 44 62 FD |                 drvl    dm
3df5c 3a1 59 46 62 FD |                 drvh    dp
3df60 3a2             | 
3df60 3a2 1E 00 00 FF 
3df64 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3df68 3a4             | 
3df68 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3df6c 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
3df70 3a6 28 02 64 3D |         if_nc   setq    #1
3df74 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3df78 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
3df7c 3a9             | .l1
3df7c 3a9             | 
3df7c 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3df80 3aa 40 46 62 FD |                 dirl    dp
3df84 3ab 28 02 64 FD |                 setq    #1
3df88 3ac 80 00 80 FF 
3df8c 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3df90 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3df94 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3df98 3b0 41 46 62 FD |                 dirh    dp
3df9c 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3dfa0 3b2             | 
3dfa0 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3dfa4 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3dfa8 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3dfac 3b5             | 
3dfac 3b5             | hlut_end
3dfac 3b5             |                 fit     $400
3dfac 3b5             |                 orgh
3dfac                 | if OVERLAP_MEMORY
3dfac                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3dfac                 | end
3dfac                 | '------------------------------------------------------------------------------
3dfac                 | ' Routines called from cog space.
3dfac                 | '------------------------------------------------------------------------------
3dfac                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3dfac                 | '------------------------------------------------------------------------------
3dfac                 | 
3dfac                 | '------------------------------------------------------------------------------
3dfac                 | ' USB host cog initialization.
3dfac                 | '------------------------------------------------------------------------------
3dfac                 | usb_host_init
3dfac                 |                 ' Initialize buffer pointers
3dfac                 |         if OVERLAP_MEMORY
3dfac                 |         else
3dfac     3C 15 B0 FE |                 loc     pb, #hid_descr
3dfb0                 |         end
3dfb0     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3dfb4                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3dfb4                 |                 {
3dfb4                 |                 }
3dfb4                 |         
3dfb4                 |                 {
3dfb4                 |                 }
3dfb4                 |                 'loc     pb,#hkbd_report
3dfb4                 |                 'mov     hkbd_report_p,pb
3dfb4                 | 
3dfb4     04 1D B0 FE |                 loc     pb, #hub_descr
3dfb8     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3dfbc     19 1D B0 FE |                 loc     pb, #urx_buff
3dfc0     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3dfc4     91 1D B0 FE |                 loc     pb, #dev_desc_buff
3dfc8     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3dfcc     9B 1D B0 FE |                 loc     pb, #con_desc_buff
3dfd0     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3dfd4     14 15 B0 FE |                 loc     pb, #usb_cache_start
3dfd8     F7 55 02 F6 |                 mov     cache_start_p, pb
3dfdc     E5 1C B0 FE |                 loc     pb, #usb_cache_end
3dfe0     F7 57 02 F6 |                 mov     cache_end_p, pb
3dfe4                 | 
3dfe4                 |         if ERROR_LED >= 0
3dfe4                 |         end
3dfe4                 | 
3dfe4                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3dfe4                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3dfe4                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3dfe4                 | ' Configure and enable the Serial Host USB port.
3dfe4     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3dfe8                 | 
3dfe8                 | '------------------------------------------------------------------------------
3dfe8                 | ' Timing calculations happen before any interrupt(s) are enabled.
3dfe8                 | '------------------------------------------------------------------------------
3dfe8                 | ' On entry:
3dfe8                 | '   htmp - current CLKFREQ value.
3dfe8                 | '------------------------------------------------------------------------------
3dfe8                 | hinit_usb_timings
3dfe8                 | '                getct   htmp2
3dfe8     B8 59 02 F6 |                 mov     save_sysclk, htmp
3dfec     8D 5B 80 FF 
3dff0     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3dff4     18 30 63 FD |                 getqx   _12Mbps_
3dff8     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3dffc     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3e000     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3e004     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3e008     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3e00c     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3e010     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
3e014     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3e018     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3e01c     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3e020     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3e024     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
3e028     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3e02c     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3e030     80 00 00 FF 
3e034     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3e038     18 2C 63 FD |                 getqx   _var_64_lower_
3e03c     19 2E 63 FD |                 getqy   _var_64_upper_
3e040     28 2C 63 FD |                 setq    _var_64_lower_
3e044     65 CD 1D FF 
3e048     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3e04c     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3e050     01 00 00 FF 
3e054     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3e058     18 2C 63 FD |                 getqx   _var_64_lower_
3e05c     19 2E 63 FD |                 getqy   _var_64_upper_
3e060     28 2C 63 FD |                 setq    _var_64_lower_
3e064     A1 07 00 FF 
3e068     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
3e06c     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3e070     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3e074     09 36 57 F0 |                 shr     _1us_, #9               wc
3e078     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3e07c     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3e080     18 38 63 FD |                 getqx   _10us_
3e084     09 38 57 F0 |                 shr     _10us_, #9              wc
3e088     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
3e08c     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3e090     18 3A 63 FD |                 getqx   _33us_
3e094     09 3A 57 F0 |                 shr     _33us_, #9              wc
3e098     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
3e09c     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3e0a0     18 3C 63 FD |                 getqx   _txn_err_
3e0a4     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
3e0a8     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3e0ac     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3e0b0     18 3E 63 FD |                 getqx   _500us_
3e0b4     09 3E 57 F0 |                 shr     _500us_, #9             wc
3e0b8     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
3e0bc     01 00 00 FF 
3e0c0     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3e0c4     18 40 63 FD |                 getqx   _txn_ok_ls_
3e0c8     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3e0cc     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3e0d0     01 00 00 FF 
3e0d4     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3e0d8     18 42 63 FD |                 getqx   _txn_ok_fs_
3e0dc     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3e0e0     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3e0e4     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3e0e8     05 00 00 FF 
3e0ec     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3e0f0     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3e0f4     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
3e0f8     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3e0fc     1C 00 00 FF 
3e100     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3e104     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3e108     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3e10c     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3e110     00 00 00 FF 
3e114     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3e118     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3e11c     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
3e120     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3e124     04 00 00 FF 
3e128     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3e12c     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3e130     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
3e134     8D 5B 00 FF 
3e138     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3e13c     18 4C 63 FD |                 getqx   _preamble_wait_
3e140     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3e144     01 00 00 FF 
3e148     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3e14c     18 2C 63 FD |                 getqx   _var_64_lower_
3e150     19 2E 63 FD |                 getqy   _var_64_upper_
3e154     28 2C 63 FD |                 setq    _var_64_lower_
3e158     01 00 00 FF 
3e15c     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3e160     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3e164     09 4E 57 F0 |                 shr     _1ms_, #9               wc
3e168     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3e16c     FF FF 7F FF 
3e170     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
3e174     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3e178     A7 51 03 F6 |                 mov     _2ms_, _1ms_
3e17c     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3e180     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
3e184     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3e188     A7 55 03 F6 |                 mov     _4ms_, _1ms_
3e18c     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3e190     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
3e194     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3e198     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3e19c     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
3e1a0     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3e1a4     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3e1a8     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3e1ac     A7 59 03 F6 |                 mov     _8ms_, _1ms_
3e1b0     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3e1b4     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3e1b8     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3e1bc     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3e1c0     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3e1c4     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3e1c8     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3e1cc     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3e1d0     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3e1d4     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3e1d8     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3e1dc                 | '        _ret_   mov     _1sec_, save_sysclk
3e1dc                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3e1dc                 | '                ret
3e1dc                 | {
3e1dc                 | }
3e1dc                 | 
3e1dc                 | '------------------------------------------------------------------------------
3e1dc                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3e1dc                 | ' one. If it is, start the task progression that will configure the device for
3e1dc                 | ' use.
3e1dc                 | '------------------------------------------------------------------------------
3e1dc                 | ' On entry:
3e1dc                 | '   hconfig_base - start address of the cached config descriptor chain.
3e1dc                 | ' On exit:
3e1dc                 | '------------------------------------------------------------------------------
3e1dc                 | hparse_con_desc
3e1dc     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3e1e0     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3e1e4     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3e1e8     4E 70 FF F9 |                 movbyts htmp,#%%1032
3e1ec     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3e1f0                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3e1f0                 | 
3e1f0     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3e1f4     6E ED 03 F1 |                 add     pa, hconfig_base
3e1f8     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3e1fc                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3e1fc                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3e1fc                 | ' that defines a keyboard and/or mouse.
3e1fc     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3e200                 | .next_intf
3e200     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3e204     B8 01 90 3D |         if_ae   jmp     #hset_config
3e208     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3e20c     75 F3 03 F1 |                 add     ptrb, hnext_desc
3e210     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3e214     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3e218     0C 00 90 AD |         if_z    jmp     #.intf
3e21c     80 71 C7 FA |                 rdbyte  htmp, ptrb
3e220     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3e224     D8 FF 9F FD |                 jmp     #.next_intf
3e228                 | .intf
3e228     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3e22c     00 90 07 F6 |                 mov     hpar3, #0
3e230     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3e234     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3e238     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3e23c     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3e240                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3e240                 | 
3e240                 | .endp
3e240     80 71 C7 FA |                 rdbyte  htmp, ptrb
3e244     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3e248     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3e24c     78 00 90 3D |         if_ae   jmp     #.get_device
3e250     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3e254     75 F3 03 F1 |                 add     ptrb, hnext_desc
3e258     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3e25c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3e260     64 00 90 AD |         if_z    jmp     #.get_device
3e264     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3e268     04 00 90 AD |         if_z    jmp     #.get_ep
3e26c     D0 FF 9F FD |                 jmp     #.endp
3e270                 | .get_ep
3e270     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3e274     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3e278     0F 86 67 F0 |                 shl     hr1, #8 + 7
3e27c     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
3e280     3F 00 00 FF 
3e284     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
3e288     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
3e28c     00 8E 0F F2 |                 cmp     hpar2, #0               wz
3e290     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3e294     00 90 0F F2 |                 cmp     hpar3, #0               wz
3e298     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3e29c     A0 FF 9F FD |                 jmp     #.endp
3e2a0                 | .in_ep
3e2a0     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3e2a4     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3e2a8                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3e2a8     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3e2ac     C2 89 DB F8 |                 setbyte hr2, hr0, #3
3e2b0     8C FF 9F FD |                 jmp     #.endp
3e2b4                 | .out_ep
3e2b4     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3e2b8     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3e2bc                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3e2bc     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3e2c0     C2 8B DB F8 |                 setbyte hr3, hr0, #3
3e2c4     78 FF 9F FD |                 jmp     #.endp
3e2c8                 | 
3e2c8                 | .get_device
3e2c8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3e2cc     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3e2d0     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3e2d4     64 00 90 AD |         if_z    jmp     #.gamepad
3e2d8     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3e2dc     A8 00 90 AD |         if_z    jmp     #.hub
3e2e0     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3e2e4     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3e2e8                 |  '               cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3e2e8     00 E6 0E F2 |            cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3e2ec     4C 00 90 AD |         if_z    jmp     #.gamepad
3e2f0     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3e2f4     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3e2f8                 | .keyboard
3e2f8     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3e2fc                 |         if HAVE_MOUSE
3e2fc     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3e300                 |         else
3e300                 |         end
3e300     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3e304     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
3e308     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3e30c     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
3e310     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3e314     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3e318                 |                 'debug(udec(kb_intf_num))
3e318                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3e318     E4 FE 9F FD |                 jmp     #.next_intf
3e31c                 | if HAVE_MOUSE
3e31c                 | .mouse
3e31c     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3e320     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3e324     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3e328     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
3e32c     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3e330                 |                 'getbyte ms_interval, hr2, #3
3e330     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3e334     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3e338                 |                 'debug(udec(kb_intf_num))
3e338                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3e338     C4 FE 9F FD |                 jmp     #.next_intf
3e33c                 | end
3e33c                 | .gamepad
3e33c     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3e340     C7 71 63 F5 |                 xor     htmp, hpar2
3e344     3F 00 00 FF 
3e348     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3e34c     B0 FE 9F AD |         if_z    jmp     #.next_intf
3e350                 |         if HAVE_MOUSE
3e350     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3e354     C7 71 63 F5 |                 xor     htmp, hpar2
3e358     3F 00 00 FF 
3e35c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3e360     9C FE 9F AD |         if_z    jmp     #.next_intf
3e364                 |         end
3e364     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3e368     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3e36c     90 FE 9F 5D |         if_nz   jmp     #.next_intf
3e370                 | 
3e370     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3e374     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3e378     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3e37c     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3e380     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3e384                 |                 'debug(udec(gp_intf_num))
3e384                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3e384     78 FE 9F FD |                 jmp     #.next_intf
3e388                 | .hub
3e388     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3e38c     70 FE 9F 5D |         if_nz   jmp     #.next_intf
3e390     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3e394     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3e398     64 FE 9F 5D |         if_nz   jmp     #.next_intf
3e39c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3e3a0     5C FE 9F 5D |         if_nz   jmp     #.next_intf
3e3a4     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3e3a8     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3e3ac     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3e3b0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3e3b4     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3e3b8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3e3bc                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3e3bc     40 FE 9F FD |                 jmp     #.next_intf
3e3c0                 | 
3e3c0                 | '------------------------------------------------------------------------------
3e3c0                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3e3c0                 | ' it according to its function, or functions. In the case of this boot protocol
3e3c0                 | ' keyboard/mouse class driver:
3e3c0                 | ' - SetConfiguration(config_num)
3e3c0                 | ' - SetProtocol(boot)
3e3c0                 | ' - SetIdle(indefinite)
3e3c0                 | ' - Enter the device interrupt IN polling task stage.
3e3c0                 | '------------------------------------------------------------------------------
3e3c0                 | ' On entry:
3e3c0                 | ' On exit:
3e3c0                 | '------------------------------------------------------------------------------
3e3c0                 | hset_config
3e3c0                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3e3c0                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3e3c0     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3e3c4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3e3c8     00 00 0C F2 |                 cmp     0-0, #0                 wz
3e3cc     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3e3d0                 |         if HAVE_MOUSE
3e3d0     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3e3d4                 |         end
3e3d4     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3e3d8     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3e3dc                 | .set_config
3e3dc     6C 0E D0 FE |                 loc     ptra, #set_config
3e3e0     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3e3e4     6E ED 03 F1 |                 add     pa, hconfig_base
3e3e8     F6 8D C3 FA |                 rdbyte  hpar1, pa
3e3ec     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3e3f0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3e3f4     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3e3f8     A0 02 A0 FD |                 call    #control_write
3e3fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e400     2D 00 64 5D |         if_nz   ret
3e404                 | .kbd_config
3e404     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3e408     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3e40c                 | 
3e40c     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3e410     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3e414     3F 00 00 FF 
3e418     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3e41c     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3e420                 | 
3e420     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3e424     34 0E D0 FE |                 loc     ptra, #set_protocol
3e428     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3e42c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3e430     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3e434     A0 02 A0 FD |                 call    #control_write
3e438     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e43c     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3e440     E4 02 90 5D |         if_nz   jmp     #.notify_client
3e444     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3e448     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3e44c     30 03 B0 FD |                 call    #hset_idle
3e450                 |                 'cmp     retval, #PID_ACK        wz
3e450                 |         'if_nz   mov     hkbd_ep_addr, #0
3e450                 |         'if_nz   jmp     #.notify_client
3e450     A8 99 02 F6 |                 mov     hctwait, _2ms_
3e454     EF 02 A0 FD |                 call    #poll_waitx
3e458     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3e45c     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3e460     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3e464     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3e468     2C 03 B0 FD |                 call    #hset_kbdled_report
3e46c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e470     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3e474     B0 02 90 5D |         if_nz   jmp     #.notify_client
3e478     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3e47c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3e480     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3e484     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3e488     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3e48c     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3e490     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3e494     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3e498     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3e49c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3e4a0     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3e4a4                 |         if !!HAVE_MOUSE
3e4a4                 |         end
3e4a4                 | 
3e4a4                 | .mouse_config
3e4a4                 | if HAVE_MOUSE
3e4a4     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3e4a8     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3e4ac     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3e4b0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3e4b4     3F 00 00 FF 
3e4b8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3e4bc     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3e4c0                 | 
3e4c0                 |                 debug("mouse passed addr check")
3e4c0                 | 
3e4c0     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3e4c4     00 00 80 FF 
3e4c8     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3e4cc     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3e4d0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3e4d4     55 02 A0 FD |                 call    #control_read
3e4d8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e4dc     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3e4e0     44 02 90 5D |         if_nz   jmp     #.notify_client
3e4e4     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3e4e8     56 01 00 F6 |                 mov     0-0, total_data
3e4ec     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3e4f0                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3e4f0                 | 
3e4f0     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3e4f4     64 0D D0 FE |                 loc     ptra, #set_protocol
3e4f8     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3e4fc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3e500     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3e504     A0 02 A0 FD |                 call    #control_write
3e508     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e50c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3e510     14 02 90 5D |         if_nz   jmp     #.notify_client
3e514                 |                 debug("mouse passed SetProtocol")
3e514     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3e518     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3e51c     60 02 B0 FD |                 call    #hset_idle
3e520                 |                 'cmp     retval, #PID_ACK        wz
3e520                 |         'if_nz   mov     hmouse_ep_addr, #0
3e520                 |         'if_nz   jmp     #.notify_client
3e520                 |                 debug("mouse passed SetIdle")
3e520     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3e524     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3e528     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3e52c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3e530     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3e534     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3e538     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3e53c     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3e540     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
3e544     3F 00 00 FF 
3e548     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3e54c     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3e550     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3e554     D0 01 90 FD |                 jmp     #.notify_client
3e558                 | end
3e558                 | .gamepad_config
3e558                 | if _HAVE_GAMEPAD
3e558     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3e55c     00 00 0C F2 |                 cmp     0-0, #0                 wz
3e560     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3e564     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3e568     00 70 03 F6 |                 mov     htmp, 0-0
3e56c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3e570     3F 00 00 FF 
3e574     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3e578     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3e57c                 | 
3e57c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3e580     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3e584     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3e588     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3e58c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3e590     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3e594     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3e598     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3e59c     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3e5a0     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3e5a4     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3e5a8     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3e5ac     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3e5b0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3e5b4                 | 
3e5b4                 |                 if EMUPAD_MAX_PLAYER > 0
3e5b4                 |                 
3e5b4                 | .rule_loop           
3e5b4                 |                 end
3e5b4                 | 
3e5b4     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3e5b8     5C 00 90 AD |         if_e    jmp     #.xinput
3e5bc     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3e5c0     00 70 03 F6 |                 mov     htmp,0-0
3e5c4     01 A6 02 FF 
3e5c8     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3e5cc     7C 00 90 AD |         if_e    jmp     #.ps3
3e5d0                 | 
3e5d0     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3e5d4     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3e5d8     00 00 80 5F 
3e5dc     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3e5e0     03 00 80 AF 
3e5e4     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3e5e8     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3e5ec     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3e5f0     55 02 A0 FD |                 call    #control_read
3e5f4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e5f8     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3e5fc     00 00 04 56 |         if_nz   mov     0-0, #0
3e600     24 01 90 5D |         if_nz   jmp     #.notify_client
3e604     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3e608     56 01 00 F6 |                 mov     0-0, total_data
3e60c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3e610                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3e610                 | 
3e610     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3e614     10 01 90 FD |                 jmp     #.notify_client
3e618                 | .xinput
3e618     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3e61c     2D EF 03 F6 |                 mov     pb,hdev_port
3e620     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3e624     03 EE 27 F3 |                 fle     pb,#3
3e628     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3e62c     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3e630                 | 
3e630     03 B0 06 F6 |                 mov     pkt_data, #3
3e634     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3e638     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3e63c     5A 00 A0 FD |                 call    #txn_out
3e640     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3e644                 | 
3e644     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
3e648     DC 00 90 FD |                 jmp     #.notify_client
3e64c                 | .ps3
3e64c     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3e650     2D EF 03 F6 |                 mov     pb,hdev_port
3e654     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3e658     04 EE 27 F3 |                 fle     pb,#4
3e65c     F7 EF C3 F9 |                 decod   pb
3e660     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3e664                 | 
3e664     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3e668     00 0C D0 FE |                 loc     ptra, #set_report
3e66c     01 00 80 FF 
3e670     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3e674     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3e678     03 61 5C FC |                 wrword  #48, ptra[wLength]
3e67c     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3e680     A0 02 A0 FD |                 call    #control_write
3e684                 | 
3e684     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3e688     E0 0B D0 FE |                 loc     ptra, #set_report
3e68c     01 00 80 FF 
3e690     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3e694     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3e698     03 09 5C FC |                 wrword  #4, ptra[wLength]
3e69c     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3e6a0     A0 02 A0 FD |                 call    #control_write
3e6a4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3e6a8     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3e6ac     00 00 04 56 |         if_nz   mov     0-0, #0
3e6b0     74 00 90 5D |         if_nz   jmp     #.notify_client
3e6b4                 | 
3e6b4     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3e6b8     6C 00 90 FD |                 jmp     #.notify_client
3e6bc                 | end
3e6bc                 | 
3e6bc                 | .hub_config
3e6bc     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3e6c0     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3e6c4     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
3e6c8     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3e6cc     3F 00 00 FF 
3e6d0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3e6d4     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3e6d8                 | 
3e6d8     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3e6dc     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3e6e0     26 EF 03 F6 |                 mov     pb, hub_descr_p
3e6e4     55 02 A0 FD |                 call    #control_read
3e6e8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e6ec     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3e6f0     34 00 90 5D |         if_nz   jmp     #.notify_client
3e6f4                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3e6f4                 | 
3e6f4     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3e6f8     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3e6fc     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3e700                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3e700                 | .pwr_loop
3e700     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3e704     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3e708     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
3e70c     A0 02 A0 FD |                 call    #control_write
3e710     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
3e714                 | 
3e714     B1 99 02 F6 |                 mov     hctwait, _500ms_
3e718     B0 99 02 F1 |                 add     hctwait, _100ms_
3e71c     EF 02 A0 FD |                 call    #poll_waitx
3e720                 | 
3e720     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3e724     00 00 90 FD |                 jmp     #.notify_client
3e728                 | 
3e728                 | .notify_client
3e728     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3e72c     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3e730                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3e730                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3e730     2D 00 64 FD |                 ret
3e734                 | 
3e734                 | '------------------------------------------------------------------------------
3e734                 | ' Initialize the keyboard/mouse data area to start-up values.
3e734                 | '------------------------------------------------------------------------------
3e734                 | ' On entry:
3e734                 | ' On exit:
3e734                 | '------------------------------------------------------------------------------
3e734                 | init_kbdm_data
3e734     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3e738     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3e73c                 | 
3e73c     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3e740     2B ED 03 F6 |                 mov     pa, cache_end_p
3e744                 | .loop
3e744     61 01 4C FC |                 wrbyte  #0, ptra++
3e748     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3e74c     F4 FF 9F CD |         if_b    jmp     #.loop
3e750                 |         
3e750                 |         if EMUPAD_MAX_PLAYER > 0
3e750                 |         end
3e750                 | 
3e750                 | 
3e750     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3e754                 | .regloop
3e754     00 EC 8F F9 |                 altd    pa
3e758     00 00 04 F6 |                 mov     0-0, #0
3e75c     01 EC 07 F1 |                 add     pa, #1
3e760     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3e764     EC FF 9F 5D |         if_nz   jmp     #.regloop
3e768                 | 
3e768     E1 E1 61 FF 
3e76c     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3e770     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3e774     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3e778     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3e77c                 | 
3e77c     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3e780                 | 
3e780                 | '------------------------------------------------------------------------------
3e780                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3e780                 | ' function.
3e780                 | '------------------------------------------------------------------------------
3e780                 | ' On entry:
3e780                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3e780                 | '   hpar2 - index number of the target interface.
3e780                 | ' On exit:
3e780                 | '------------------------------------------------------------------------------
3e780                 | hset_idle
3e780     A8 99 02 F6 |                 mov     hctwait, _2ms_
3e784     EF 02 A0 FD |                 call    #poll_waitx
3e788     D8 0A D0 FE |                 loc     ptra, #set_idle
3e78c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
3e790     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
3e794     A0 02 80 FD |                 jmp     #control_write
3e798                 | 
3e798                 | '------------------------------------------------------------------------------
3e798                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3e798                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3e798                 | '------------------------------------------------------------------------------
3e798                 | ' On entry:
3e798                 | '   ep_addr_pid - device address and enpoint for the request.
3e798                 | ' On exit:
3e798                 | '   retval - transaction result.
3e798                 | '------------------------------------------------------------------------------
3e798                 | hset_kbdled_report
3e798     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3e79c     CC 0A D0 FE |                 loc     ptra, #set_report
3e7a0     01 00 80 FF 
3e7a4     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3e7a8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3e7ac     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3e7b0     27 EF 03 F6 |                 mov     pb, urx_buff_p
3e7b4     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3e7b8     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3e7bc                 | 
3e7bc                 | '------------------------------------------------------------------------------
3e7bc                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3e7bc                 | '------------------------------------------------------------------------------
3e7bc                 | ' On entry:
3e7bc                 | ' On exit:
3e7bc                 | '------------------------------------------------------------------------------
3e7bc                 | hget_kbd_in_report
3e7bc     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3e7c0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3e7c4     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3e7c8     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3e7cc     CF 02 A0 FD |                 call    #do_int_in
3e7d0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e7d4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3e7d8                 | 
3e7d8     00 90 0F F2 |                 cmp     hpar3, #0               wz
3e7dc     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3e7e0                 | 
3e7e0     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3e7e4     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3e7e8     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3e7ec     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3e7f0                 | 
3e7f0     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3e7f4     18 00 B0 FD |                 call    #hkbd_compare
3e7f8                 |         if EMUPAD_MAX_PLAYER > 0
3e7f8                 |         end
3e7f8                 | 
3e7f8                 | .led_check
3e7f8     3B 71 03 F6 |                 mov     htmp, kb_led_states
3e7fc     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3e800     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3e804     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3e808     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3e80c     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3e810                 | 
3e810                 | '------------------------------------------------------------------------------
3e810                 | ' Compare current and previous keyboard data buffers for keypress changes.
3e810                 | '------------------------------------------------------------------------------
3e810                 | hkbd_compare
3e810     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3e814     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
3e818     61 73 07 FB |                 rdlong  htmp1, ptra++
3e81c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3e820     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
3e824     61 73 07 FB |                 rdlong  htmp1, ptra++
3e828     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3e82c     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3e830     2D 00 64 AD |         if_z    ret
3e834                 | 
3e834     B4 13 D0 FE |                 loc     ptra, #hkbd_report
3e838                 | 
3e838                 |                 ' Handle modifiers
3e838     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
3e83c     00 87 C7 FA |                 rdbyte  hr1, ptra
3e840     C7 87 43 F9 |                 rolword hr1,hpar2,#0
3e844     63 86 63 FD |                 mergew  hr1
3e848     08 EC 07 F6 |                 mov     pa,#8
3e84c                 | .modloop
3e84c     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3e850     E8 8C 07 F6 |                 mov     hpar1,#$E8
3e854     F6 8D 83 F1 |                 sub     hpar1,pa
3e858     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3e85c     FB ED 6F FB |                 djnz    pa,#.modloop
3e860                 | 
3e860     6F E0 75 FD | .release        modc    _set    wc
3e864                 |                 'alts    hdev_port, #hid_report_p
3e864                 |                 'mov     ptra, hid_report_p
3e864     02 F0 07 F1 |                 add     ptra, #2
3e868     06 EC 07 F6 |                 mov     pa, #6
3e86c     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3e870     20 00 90 AD |         if_z    jmp     #.rl3
3e874     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3e878     02 F2 07 F1 |                 add     ptrb, #2
3e87c     06 EE 07 F6 |                 mov     pb, #6
3e880     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
3e884     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3e888     08 00 90 AD |         if_z    jmp     #.rl3
3e88c     FC EF 6F FB |                 djnz    pb, #.rl2
3e890     68 00 B0 FD |                 call    #hkbd_translate
3e894     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3e898                 | 
3e898     00 90 07 F6 |                 mov     hpar3, #0
3e89c     1F 90 27 F4 |                 bith    hpar3, #31
3e8a0                 | 
3e8a0     6F 00 74 FD | .press          modc    _clr    wc
3e8a4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3e8a8     02 F0 07 F1 |                 add     ptra, #2
3e8ac     06 EC 07 F6 |                 mov     pa, #6
3e8b0     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3e8b4     20 00 90 AD |         if_z    jmp     #.pl3
3e8b8     30 13 F0 FE |                 loc     ptrb, #hkbd_report
3e8bc     02 F2 07 F1 |                 add     ptrb, #2
3e8c0     06 EE 07 F6 |                 mov     pb, #6
3e8c4     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
3e8c8     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3e8cc     08 00 90 AD |         if_z    jmp     #.pl3
3e8d0     FC EF 6F FB |                 djnz    pb, #.pl2
3e8d4     24 00 B0 FD |                 call    #hkbd_translate
3e8d8     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3e8dc                 | 
3e8dc     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3e8e0     08 13 F0 FE |                 loc     ptrb, #hkbd_report
3e8e4     28 02 64 FD |                 setq #1
3e8e8     61 73 07 FB |                 rdlong  htmp1, ptra++
3e8ec     28 02 64 FD |                 setq #1
3e8f0     E1 73 67 FC |                 wrlong  htmp1, ptrb++
3e8f4     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3e8f8                 | 
3e8f8     2D 00 64 FD |                 ret
3e8fc                 | 
3e8fc                 | '------------------------------------------------------------------------------
3e8fc                 | ' Translate keyboard scancode to ASCII
3e8fc                 | '------------------------------------------------------------------------------
3e8fc                 | ' On entry:
3e8fc                 | '   hpar1 - scancode
3e8fc                 | '   hpar2 - key modifiers state
3e8fc                 | '       c - pressed (0) or released (1) flag
3e8fc                 | ' On exit:
3e8fc                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3e8fc                 | '               30..17 = unused
3e8fc                 | '                   18 = scroll-lock state 
3e8fc                 | '                   17 = caps-lock state
3e8fc                 | '                   16 = num-lock state 
3e8fc                 | '                15..8 = key modifiers state
3e8fc                 | '                 7..0 = scancode
3e8fc                 | '------------------------------------------------------------------------------
3e8fc                 | hkbd_translate
3e8fc     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3e900     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3e904     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3e908     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3e90c     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3e910     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3e914                 | 
3e914                 |         if EMUPAD_MAX_PLAYER > 0
3e914                 | 
3e914                 |         if EMUPAD_BT0_BIT >= 0
3e914                 |         end
3e914                 |         if EMUPAD_BT1_BIT >= 0
3e914                 |         end
3e914                 |         if EMUPAD_BT2_BIT >= 0
3e914                 |         end
3e914                 |         if EMUPAD_BT3_BIT >= 0
3e914                 |         end
3e914                 |         if EMUPAD_BT4_BIT >= 0
3e914                 |         end
3e914                 |         if EMUPAD_BT5_BIT >= 0
3e914                 |         end
3e914                 |         if EMUPAD_BT6_BIT >= 0
3e914                 |         end
3e914                 |         if EMUPAD_BT7_BIT >= 0
3e914                 |         end
3e914                 |         if EMUPAD_BT8_BIT >= 0
3e914                 |         end
3e914                 |         if EMUPAD_BT9_BIT >= 0
3e914                 |         end
3e914                 | 
3e914                 |         end
3e914     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
3e918     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3e91c     1F 8C 47 F4 |                 bitc    hpar1, #31
3e920                 |         if KEYQUEUE_SIZE > 0
3e920     C4 09 B0 FE |                 loc pb,#keyq_head
3e924     F7 71 E3 FA |                 rdword htmp,pb
3e928     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3e92c     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3e930     B8 75 03 F6 |                 mov htmp2,htmp
3e934     04 74 07 FA |                 mul htmp2,#4
3e938     F7 75 03 F1 |                 add htmp2,pb
3e93c     02 74 07 F1 |                 add htmp2,#2
3e940     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3e944     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3e948     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
3e94c     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3e950                 |         end
3e950     2D 00 7C FD |                 ret wcz
3e954                 | 
3e954                 | if HAVE_MOUSE
3e954                 | '------------------------------------------------------------------------------
3e954                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3e954                 | '------------------------------------------------------------------------------
3e954                 | ' On entry:
3e954                 | ' On exit:
3e954                 | '------------------------------------------------------------------------------
3e954                 | hget_mouse_in_report
3e954     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3e958     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3e95c     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3e960     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3e964     CF 02 A0 FD |                 call    #do_int_in
3e968     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e96c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3e970                 | 
3e970     00 90 0F F2 |                 cmp     hpar3, #0               wz
3e974     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3e978                 | 
3e978     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3e97c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3e980     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3e984     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3e988                 | 
3e988     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3e98c     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
3e990     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
3e994     01 90 87 31 |         if_ae   sub     hpar3, #1
3e998                 | 
3e998     40 09 90 FE |                 loc     pa, #mouse_limits
3e99c     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
3e9a0                 | 
3e9a0                 |                 ' load xacc,yacc,zacc
3e9a0     28 04 64 FD |                 setq    #3-1
3e9a4     80 87 07 FB |                 rdlong  hr1,ptrb
3e9a8                 |                 ' load limits and outptr
3e9a8     28 04 64 FD |                 setq    #3-1
3e9ac     F6 73 03 FB |                 rdlong  htmp1,pa
3e9b0                 | 
3e9b0     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
3e9b4     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
3e9b8     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
3e9bc     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
3e9c0     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
3e9c4     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
3e9c8     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
3e9cc     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
3e9d0                 |               
3e9d0                 | 
3e9d0     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
3e9d4     07 70 67 F7 |                 signx   htmp, #7
3e9d8     B8 87 03 F1 |                 add     hr1,htmp
3e9dc     00 72 0F F2 |                 cmp     htmp1,#0 wz
3e9e0     B9 87 63 53 |         if_ne   fles    hr1,htmp1
3e9e4     00 86 47 53 |         if_ne   fges    hr1,#0
3e9e8                 | 
3e9e8     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
3e9ec     07 70 67 F7 |                 signx   htmp, #7
3e9f0     B8 89 03 F1 |                 add     hr2,htmp
3e9f4     00 74 0F F2 |                 cmp     htmp2,#0 wz
3e9f8     BA 89 63 53 |         if_ne   fles    hr2,htmp2
3e9fc     00 88 47 53 |         if_ne   fges    hr2,#0
3ea00                 |                 
3ea00                 | 
3ea00     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
3ea04     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
3ea08     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
3ea0c     B8 8B 03 A1 |         if_z    add     hr3,htmp
3ea10                 | 
3ea10     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3ea14     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3ea18                 | 
3ea18                 |                 ' write back accumulators
3ea18     28 04 64 FD |                 setq    #3-1
3ea1c     80 87 67 FC |                 wrlong  hr1,ptrb
3ea20                 |                 ' if outptr set, write X/Y words
3ea20     00 76 0F F2 |                 cmp htmp3,#0                    wz
3ea24     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
3ea28     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
3ea2c     2D 00 64 FD |                 ret
3ea30                 | end
3ea30                 | 
3ea30                 | '------------------------------------------------------------------------------
3ea30                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3ea30                 | '------------------------------------------------------------------------------
3ea30                 | ' On entry:
3ea30                 | ' On exit:
3ea30                 | '------------------------------------------------------------------------------
3ea30                 | if _HAVE_GAMEPAD
3ea30                 | hget_gp_in_report
3ea30     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3ea34     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3ea38                 | 
3ea38     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3ea3c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3ea40     00 90 E3 F8 |                 getbyte hpar3
3ea44     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3ea48     CF 02 A0 FD |                 call    #do_int_in
3ea4c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ea50     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3ea54                 | 
3ea54     00 90 0F F2 |                 cmp     hpar3, #0               wz
3ea58     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3ea5c                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3ea5c                 | 
3ea5c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3ea60     00 70 E3 F8 |                 getbyte htmp                            ' |
3ea64     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3ea68     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3ea6c     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3ea70     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3ea74     B8 01 C0 F8 |                 setbyte htmp                            ' |
3ea78                 | 
3ea78                 | ' Note: the following code compares the current and previous reports
3ea78                 | ' and process the data if there are changes to ease the debug output.
3ea78                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3ea78                 | ' gpPreReport buffer.
3ea78                 | 
3ea78                 |                 ' ----- start of block to remove
3ea78                 |                 {
3ea78                 |                 }
3ea78                 |                 ' ----- end of block to remove
3ea78     F4 04 90 FE |                 loc pa,#hpad_translate
3ea7c     2A EC 63 FD |                 push pa
3ea80                 | 
3ea80                 |                 ' FALL THROUGH !!!!
3ea80                 | 
3ea80                 | '------------------------------------------------------------------------------
3ea80                 | ' Decode controller report
3ea80                 | '------------------------------------------------------------------------------
3ea80                 | hid_decode
3ea80                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3ea80     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3ea84     00 04 00 FF 
3ea88     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3ea8c                 | 
3ea8c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3ea90                 | 
3ea90     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3ea94     00 2A E3 F8 |                 getbyte hidr_type
3ea98     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3ea9c     34 02 90 AD |         if_z    jmp     #hpad_xinput
3eaa0     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3eaa4     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3eaa8     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3eaac     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3eab0     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3eab4                 |                 
3eab4                 | 
3eab4                 | '------------------------------------------------------------------------------
3eab4                 | ' Handle HID controller (or mouse now
3eab4                 | ' On entry:
3eab4                 | '   ptrb - controller report
3eab4                 | '------------------------------------------------------------------------------
3eab4                 | hpad_hid
3eab4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3eab8     F7 F1 03 F6 |                 mov     ptra, pb
3eabc     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3eac0     00 EC 03 F6 |                 mov     pa, 0-0
3eac4                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3eac4     19 2A 3B FF 
3eac8     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3eacc                 | 
3eacc                 | .next
3eacc     00 EC 5F F2 |                 cmps    pa, #0      wcz
3ead0     2D 00 7C ED |         if_be   ret     wcz
3ead4                 | 
3ead4     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3ead8     01 EC 87 F1 |                 sub     pa, #1
3eadc     00 8E 07 F6 |                 mov     hpar2, #0
3eae0                 | 
3eae0     C6 71 03 F6 |                 mov     htmp, hpar1
3eae4     03 70 07 F5 |                 and     htmp, #$03
3eae8     01 70 0F F2 |                 cmp     htmp, #1    wz
3eaec     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3eaf0     07 8E 67 A7 |         if_z    signx   hpar2,#7
3eaf4     01 EC 87 A1 |         if_z    sub     pa, #1
3eaf8     02 70 0F F2 |                 cmp     htmp, #2    wz
3eafc     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3eb00     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3eb04     02 EC 87 A1 |         if_z    sub     pa, #2
3eb08     03 70 0F F2 |                 cmp     htmp, #3    wz
3eb0c     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3eb10     04 EC 87 A1 |         if_z    sub     pa, #4
3eb14                 | 
3eb14     FC 8C 07 F5 |                 and     hpar1, #$FC
3eb18                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3eb18                 | 
3eb18     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3eb1c     0C 01 90 AD |         if_z    jmp     #.report_id
3eb20     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3eb24     24 01 90 AD |         if_z    jmp     #.usage_page
3eb28     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3eb2c     2C 01 90 AD |         if_z    jmp     #.usage
3eb30     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3eb34     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3eb38     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3eb3c     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3eb40     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3eb44     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3eb48     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3eb4c     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3eb50     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3eb54     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3eb58     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3eb5c     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3eb60     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3eb64     64 FF 9F 5D |         if_nz   jmp     #.next
3eb68                 | 
3eb68     D8 1D A7 FB |                 tjf     hidr_state,#.next
3eb6c                 | 
3eb6c     03 8E 07 F5 |                 and     hpar2, #$03
3eb70     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3eb74     18 00 90 5D |         if_nz   jmp     #.skip
3eb78                 | 
3eb78     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
3eb7c     20 00 90 AD |         if_z    jmp     #.axes
3eb80     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3eb84     5C 00 90 AD |         if_z    jmp     #.hats
3eb88     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3eb8c     70 00 90 AD |         if_z    jmp     #.buttons
3eb90                 | .skip
3eb90     8F 71 03 F6 |                 mov     htmp, hidr_size
3eb94     90 71 03 FA |                 mul     htmp, hidr_count
3eb98     B8 23 03 F1 |                 add     hidr_offset, htmp
3eb9c     2C FF 9F FD |                 jmp     #.next
3eba0                 | .axes
3eba0                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3eba0     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3eba4     90 87 03 F6 |                 mov     hr1, hidr_count
3eba8                 | .l1
3eba8     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3ebac     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3ebb0     04 03 B0 FD |                 call    #hpad_getbits
3ebb4     64 03 B0 FD |                 call    #hpad_normalize
3ebb8     06 84 1F F2 |                 cmp     hr0, #6         wcz
3ebbc     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3ebc0     00 88 43 C8 |         if_b    getnib  hr2
3ebc4     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3ebc8     5F 01 20 C9 |         if_b    setword retval
3ebcc     01 84 07 C1 |         if_b    add     hr0, #1
3ebd0     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3ebd4     F4 87 6F FB |                 djnz    hr1, #.l1
3ebd8                 | 
3ebd8     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3ebdc     01 1C 07 F6 |                 mov     hidr_state, #1
3ebe0     E8 FE 9F FD |                 jmp     #.next
3ebe4                 | .hats
3ebe4                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3ebe4     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3ebe8     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3ebec     C8 02 B0 FD |                 call    #hpad_getbits
3ebf0     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3ebf4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3ebf8     01 1C 07 F6 |                 mov     hidr_state, #1
3ebfc     90 FF 9F FD |                 jmp     #.skip
3ec00                 | .buttons
3ec00                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3ec00     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3ec04     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3ec08     90 8F 03 FA |                 mul     hpar2, hidr_count
3ec0c     A8 02 B0 FD |                 call    #hpad_getbits
3ec10     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3ec14     B8 BF 62 F0 |                 shl     retval, htmp
3ec18     5F 17 43 F5 |                 or      hidr_buttons, retval
3ec1c     90 71 03 F1 |                 add     htmp, hidr_count
3ec20     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3ec24     01 1C 07 F6 |                 mov     hidr_state, #1
3ec28     64 FF 9F FD |                 jmp     #.skip
3ec2c                 | .report_id
3ec2c     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3ec30     2D 00 7C 5D |         if_nz   ret     wcz
3ec34     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3ec38     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3ec3c     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3ec40     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3ec44     01 F2 87 51 |         if_nz   sub     ptrb,#1
3ec48     80 FE 9F FD |                 jmp     #.next
3ec4c                 | .usage_page
3ec4c     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3ec50     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3ec54     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3ec58     70 FE 9F FD |                 jmp     #.next
3ec5c                 | .usage
3ec5c     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3ec60     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3ec64     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3ec68     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3ec6c     5C FE 9F AD |         if_z    jmp     #.next
3ec70     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3ec74     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3ec78     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3ec7c     4C FE 9F AD |         if_z    jmp     #.next
3ec80     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3ec84     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
3ec88     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3ec8c     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3ec90     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3ec94     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3ec98     10 00 90 AD |         if_z    jmp     #.usage_axis
3ec9c     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3eca0     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3eca4     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3eca8     20 FE 9F FD |                 jmp     #.next
3ecac                 | .usage_axis
3ecac     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3ecb0     18 FE 9F CD |         if_b    jmp     #.next
3ecb4     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3ecb8     C7 01 00 F8 |                 setnib  hpar2
3ecbc                 | 
3ecbc     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3ecc0     C7 8F C3 F9 |                 decod   hpar2
3ecc4     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3ecc8                 | 
3ecc8     01 24 07 F1 |                 add     hidr_usage_idx, #1
3eccc     02 1C 07 F6 |                 mov     hidr_state, #2
3ecd0     F8 FD 9F FD |                 jmp     #.next
3ecd4                 | 
3ecd4                 | '------------------------------------------------------------------------------
3ecd4                 | ' Handle XInput controller
3ecd4                 | ' On entry:
3ecd4                 | '   ptrb - controller report
3ecd4                 | '------------------------------------------------------------------------------
3ecd4                 | '   Default implementation translates the report to a pseudo-defacto hid
3ecd4                 | '   standard and jumps to hpad_translate for actions.
3ecd4                 | '   Implementors may take specific actions for this kind of controller.
3ecd4                 | '------------------------------------------------------------------------------
3ecd4                 | hpad_xinput
3ecd4     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3ecd8     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3ecdc     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3ece0     14 70 0F F2 |                 cmp     htmp, #$14      wz
3ece4     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3ece8                 | 
3ece8                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3ece8                 | 
3ece8     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3ecec     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3ecf0                 | 
3ecf0     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3ecf4     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3ecf8     5F BF 22 F6 |                 not     retval
3ecfc     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3ed00     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3ed04     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3ed08     5F BF 22 F6 |                 not     retval
3ed0c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3ed10                 | 
3ed10     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3ed14     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3ed18     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3ed1c     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3ed20     F8 01 B0 FD |                 call    #hpad_normalize
3ed24     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3ed28     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3ed2c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3ed30     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3ed34     E4 01 B0 FD |                 call    #hpad_normalize
3ed38     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3ed3c                 | 
3ed3c     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3ed40     81 BF E6 FA |                 rdword  retval, ptrb[1]
3ed44     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3ed48     00 16 47 F4 |                 bitc    hidr_buttons, #0
3ed4c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3ed50     01 16 47 F4 |                 bitc    hidr_buttons, #1
3ed54     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3ed58     02 16 47 F4 |                 bitc    hidr_buttons, #2
3ed5c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3ed60     03 16 47 F4 |                 bitc    hidr_buttons, #3
3ed64     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3ed68     04 16 47 F4 |                 bitc    hidr_buttons, #4
3ed6c     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3ed70     05 16 47 F4 |                 bitc    hidr_buttons, #5
3ed74     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3ed78     08 16 47 F4 |                 bitc    hidr_buttons, #8
3ed7c     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3ed80     09 16 47 F4 |                 bitc    hidr_buttons, #9
3ed84     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3ed88     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3ed8c     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3ed90     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3ed94     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3ed98     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3ed9c                 | 
3ed9c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3eda0     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3eda4     7A BB 7A FF 
3eda8     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3edac     F9 FF 7F FF 
3edb0     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3edb4     B9 71 5F F9 |                 altgn   htmp, #htmp1
3edb8     00 70 43 F8 |                 getnib  htmp
3edbc     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3edc0                 | 
3edc0     AC 01 90 FD |                 jmp     #hpad_translate
3edc4                 | 
3edc4                 | '------------------------------------------------------------------------------
3edc4                 | ' Handle PS3 controller
3edc4                 | ' On entry:
3edc4                 | '   ptrb - controller report
3edc4                 | '------------------------------------------------------------------------------
3edc4                 | '   Default implementation translates the report to a pseudo-defacto hid
3edc4                 | '   standard and jumps to hpad_translate for actions.
3edc4                 | '   Implementors may take specific actions for this kind of controller.
3edc4                 | '------------------------------------------------------------------------------
3edc4                 | hpad_ps3
3edc4     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3edc8     01 70 0F F2 |                 cmp     htmp, #$01      wz
3edcc     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3edd0                 | 
3edd0                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3edd0                 | 
3edd0     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3edd4     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3edd8     40 01 B0 FD |                 call    #hpad_normalize
3eddc     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3ede0     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3ede4     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3ede8     30 01 B0 FD |                 call    #hpad_normalize
3edec     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3edf0     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3edf4     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3edf8     20 01 B0 FD |                 call    #hpad_normalize
3edfc     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3ee00     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3ee04     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3ee08     10 01 B0 FD |                 call    #hpad_normalize
3ee0c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3ee10     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3ee14     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3ee18                 | 
3ee18     08 8C 07 F6 |                 mov     hpar1, #8
3ee1c     13 8E 07 F6 |                 mov     hpar2, #19
3ee20     94 00 B0 FD |                 call    #hpad_getbits
3ee24                 | 
3ee24     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3ee28     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3ee2c     00 16 47 F4 |                 bitc    hidr_buttons, #0
3ee30     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3ee34     01 16 47 F4 |                 bitc    hidr_buttons, #1
3ee38     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3ee3c     02 16 47 F4 |                 bitc    hidr_buttons, #2
3ee40     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3ee44     03 16 47 F4 |                 bitc    hidr_buttons, #3
3ee48     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3ee4c     04 16 47 F4 |                 bitc    hidr_buttons, #4
3ee50     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3ee54     05 16 47 F4 |                 bitc    hidr_buttons, #5
3ee58     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3ee5c     06 16 47 F4 |                 bitc    hidr_buttons, #6
3ee60     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3ee64     07 16 47 F4 |                 bitc    hidr_buttons, #7
3ee68     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3ee6c     08 16 47 F4 |                 bitc    hidr_buttons, #8
3ee70     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3ee74     09 16 47 F4 |                 bitc    hidr_buttons, #9
3ee78     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3ee7c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3ee80     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3ee84     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3ee88     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3ee8c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3ee90                 | 
3ee90     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3ee94     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3ee98     09 FA 79 FF 
3ee9c     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3eea0     FF FA 7F FF 
3eea4     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3eea8     B9 71 5F F9 |                 altgn   htmp, #htmp1
3eeac     00 70 43 F8 |                 getnib  htmp
3eeb0     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3eeb4                 | 
3eeb4     B8 00 90 FD |                 jmp     #hpad_translate
3eeb8                 | 
3eeb8                 | '------------------------------------------------------------------------------
3eeb8                 | ' Read bits from report data buffer
3eeb8                 | '------------------------------------------------------------------------------
3eeb8                 | ' On entry:
3eeb8                 | '   PTRB - report buffer
3eeb8                 | '   hpar1 - start bit
3eeb8                 | '   hpar2 - number of bits
3eeb8                 | ' On exit:
3eeb8                 | '   retval - bits
3eeb8                 | '------------------------------------------------------------------------------
3eeb8                 | hpad_getbits
3eeb8     C6 71 03 F6 |                 mov     htmp, hpar1
3eebc     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3eec0     F9 71 03 F1 |                 add     htmp, ptrb
3eec4     B8 BF 02 FB |                 rdlong  retval, htmp
3eec8                 | 
3eec8     C6 73 03 F6 |                 mov     htmp1, hpar1
3eecc     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3eed0     B9 BF 42 F0 |                 shr     retval, htmp1
3eed4                 | 
3eed4     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3eed8     10 00 90 1D |         if_a    jmp     #.l1
3eedc                 | 
3eedc     C7 8F C3 F9 |                 decod   hpar2
3eee0     01 8E 87 F1 |                 sub     hpar2, #1
3eee4     C7 BF 02 F5 |                 and     retval, hpar2
3eee8     2D 00 64 FD |                 ret
3eeec                 | .l1
3eeec     FF 7F 00 FF 
3eef0     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3eef4     03 70 07 F1 |                 add     htmp, #3
3eef8     B8 75 03 FB |                 rdlong  htmp2, htmp
3eefc     18 8E 87 F1 |                 sub     hpar2, #24
3ef00     C7 8F C3 F9 |                 decod   hpar2
3ef04     01 8E 87 F1 |                 sub     hpar2, #1
3ef08     B9 75 43 F0 |                 shr     htmp2, htmp1
3ef0c     C7 75 03 F5 |                 and     htmp2, hpar2
3ef10     18 74 67 F0 |                 shl     htmp2, #24
3ef14     BA BF 42 F5 |                 or      retval, htmp2
3ef18     2D 00 64 FD |                 ret
3ef1c                 | 
3ef1c                 | '------------------------------------------------------------------------------
3ef1c                 | ' Normalize value to signed word (-32768 / 32767)
3ef1c                 | '------------------------------------------------------------------------------
3ef1c                 | ' On entry:
3ef1c                 | '   retval - value to normalize
3ef1c                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3ef1c                 | '   - or -
3ef1c                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3ef1c                 | '   hidr_size - value bits length
3ef1c                 | ' On exit:
3ef1c                 | '   retval - normalized value
3ef1c                 | '------------------------------------------------------------------------------
3ef1c                 | hpad_normalize
3ef1c     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3ef20     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3ef24     2D 00 64 AD |         if_z    ret
3ef28     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3ef2c     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3ef30     0F 72 77 F7 |                 signx   htmp1, #15      wc
3ef34     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3ef38     00 BE 66 C7 |         if_c    signx   retval, #0-0
3ef3c     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3ef40     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3ef44     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3ef48     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3ef4c     B8 71 53 F6 |                 abs     htmp            wc
3ef50     1F BE 0E F4 |                 testb   retval, #31     wz
3ef54     5F BF 42 F6 |                 abs     retval
3ef58     B8 BF 12 FD |                 qdiv    retval, htmp
3ef5c     18 BE 62 FD |                 getqx   retval
3ef60     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3ef64     C0 FF 7F FF 
3ef68     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3ef6c     2D 00 64 FD |                 ret
3ef70                 | 
3ef70                 | '------------------------------------------------------------------------------
3ef70                 | ' Perform controller actions
3ef70                 | ' On entry:
3ef70                 | '    hidr_id        report id
3ef70                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3ef70                 | '                      X = hidr_axis+0, #0
3ef70                 | '                      Y = hidr_axis+0, #1
3ef70                 | '                      Z = hidr_axis+1, #0
3ef70                 | '                     RX = hidr_axis+1, #1
3ef70                 | '                     RY = hidr_axis+2, #0
3ef70                 | '                     RZ = hidr_axis+2, #1
3ef70                 | '    hidr_buttons   buttons state (bits 0 to 31)
3ef70                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3ef70                 | '
3ef70                 | '                     -------3 -------2 -------1 -------0 byte
3ef70                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3ef70                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3ef70                 | '                                zyx||| |||||||| ++++++++ n. buttons
3ef70                 | '                                |||||| ||||++++--------- n. axes
3ef70                 | '                                |||||| ++++------------- n. hats
3ef70                 | '                                ++++++------------------ valid axes
3ef70                 | '------------------------------------------------------------------------------
3ef70                 | hpad_translate
3ef70                 | 
3ef70                 | 
3ef70                 |         if HAVE_HIDPAD
3ef70     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3ef74     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3ef78     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3ef7c     01 70 E7 F2 |                 cmpsub  htmp,#1
3ef80     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3ef84     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3ef88     2D 00 7C 3D |         if_ae   ret     wcz
3ef8c     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3ef90     B8 F3 03 F1 |                 add     ptrb,htmp
3ef94     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3ef98     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3ef9c     28 0C 64 FD |                 setq    #7-1
3efa0     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3efa4                 |         end
3efa4                 | 
3efa4                 | 
3efa4                 |         if EMUPAD_MAX_PLAYER > 0
3efa4                 | .emupad_no_hat
3efa4                 |         if EMUPAD_BT0_BIT >= 0
3efa4                 |         end
3efa4                 |         if EMUPAD_BT1_BIT >= 0
3efa4                 |         end
3efa4                 |         if EMUPAD_BT2_BIT >= 0
3efa4                 |         end
3efa4                 |         if EMUPAD_BT3_BIT >= 0
3efa4                 |         end
3efa4                 |         if EMUPAD_BT4_BIT >= 0
3efa4                 |         end
3efa4                 |         if EMUPAD_BT5_BIT >= 0
3efa4                 |         end
3efa4                 |         if EMUPAD_BT6_BIT >= 0
3efa4                 |         end
3efa4                 |         if EMUPAD_BT7_BIT >= 0
3efa4                 |         end
3efa4                 |         if EMUPAD_BT8_BIT >= 0
3efa4                 |         end
3efa4                 |         if EMUPAD_BT9_BIT >= 0
3efa4                 |         end
3efa4                 | .emupad_slot_over
3efa4                 |         end
3efa4                 | 
3efa4                 |         if 0
3efa4                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3efa4                 | 
3efa4                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3efa4                 | 
3efa4                 |         end
3efa4     2D 00 64 FD |                 ret
3efa8                 | end
3efa8                 | 
3efa8                 | if EMUPAD_MAX_PLAYER > 0
3efa8                 | '------------------------------------------------------------------------------
3efa8                 | ' Clear EmuPad state
3efa8                 | '------------------------------------------------------------------------------
3efa8                 | emupad_reset
3efa8                 | 
3efa8                 | '------------------------------------------------------------------------------
3efa8                 | ' Get EmuPad Player number for current device (into retval)
3efa8                 | ' Z flag is also set if current device is valid
3efa8                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3efa8                 | '------------------------------------------------------------------------------
3efa8                 | emupad_getnum
3efa8                 | .loop
3efa8                 | '------------------------------------------------------------------------------
3efa8                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3efa8                 | '------------------------------------------------------------------------------
3efa8                 | emupad_discon
3efa8                 | .loop         
3efa8                 |         
3efa8                 |         ' FALL THROUGH!!!
3efa8                 | 
3efa8                 | '------------------------------------------------------------------------------
3efa8                 | ' Update EmuPad reports (all of them...)
3efa8                 | '------------------------------------------------------------------------------
3efa8                 | emupad_write_reports
3efa8                 | .devloop
3efa8                 | 
3efa8                 | end
3efa8                 | 
3efa8                 | 
3efa8                 | '------------------------------------------------------------------------------
3efa8                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3efa8                 | '------------------------------------------------------------------------------
3efa8                 | ' On entry:
3efa8                 | ' On exit:
3efa8                 | '------------------------------------------------------------------------------
3efa8                 | hget_hub_status
3efa8     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3efac     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3efb0     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3efb4     01 90 2F F9 |                 setword hpar3, #1, #1
3efb8     CF 02 A0 FD |                 call    #do_int_in
3efbc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3efc0     0C 00 90 AD |         if_z    jmp     #.data
3efc4     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3efc8     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3efcc     2D 00 64 FD |                 ret
3efd0                 | .data
3efd0     00 90 0F F2 |                 cmp     hpar3, #0               wz
3efd4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3efd8                 | 
3efd8     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3efdc     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3efe0     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3efe4     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3efe8                 |                 debug(ubin_long(hub_status_chg))
3efe8                 | 
3efe8     01 5A 06 F6 |                 mov     hdev_port, #1
3efec                 | .loop
3efec     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3eff0     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3eff4     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3eff8     F0 FF 9F 3D |         if_nc   jmp     #.loop
3effc     2D 00 64 FD |                 ret
3f000                 | 
3f000                 | hub_port_handler
3f000     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3f004     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3f008     27 EF 03 F6 |                 mov     pb, urx_buff_p
3f00c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3f010     55 02 A0 FD |                 call    #control_read
3f014     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3f018                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3f018                 | 
3f018     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3f01c     50 01 90 5D |         if_x0   jmp     #.other
3f020     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3f024     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3f028     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3f02c     A0 02 A0 FD |                 call    #control_write
3f030     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3f034     7C 01 90 5D |         if_x0   jmp     #.disconnect
3f038     B0 99 02 F6 |                 mov     hctwait, _100ms_
3f03c     EF 02 A0 FD |                 call    #poll_waitx
3f040                 | 
3f040     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3f044     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3f048     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3f04c     A0 02 A0 FD |                 call    #control_write
3f050                 | 
3f050     02 76 07 F6 |                 mov     htmp3, #2
3f054                 | .wait_reset
3f054     AC 99 02 F6 |                 mov     hctwait, _8ms_
3f058     EF 02 A0 FD |                 call    #poll_waitx
3f05c     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3f060     27 EF 03 F6 |                 mov     pb, urx_buff_p
3f064     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3f068     55 02 A0 FD |                 call    #control_read
3f06c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3f070     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3f074     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3f078                 | 
3f078     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3f07c     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3f080     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3f084     A0 02 A0 FD |                 call    #control_write
3f088                 | 
3f088     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3f08c                 | .wait_recover
3f08c     A7 99 02 F6 |                 mov     hctwait, _1ms_
3f090     EF 02 A0 FD |                 call    #poll_waitx
3f094     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3f098                 | 
3f098     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3f09c     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3f0a0     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3f0a4                 | 
3f0a4     00 08 00 FF 
3f0a8     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3f0ac     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3f0b0     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3f0b4     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3f0b8     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3f0bc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f0c0     48 01 90 5D |         if_nz   jmp     #.done
3f0c4                 | .get_dev_desc
3f0c4     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3f0c8     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3f0cc     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3f0d0     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3f0d4     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3f0d8     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3f0dc     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3f0e0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f0e4     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3f0e8     AC 99 02 F6 |                 mov     hctwait, _8ms_
3f0ec     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3f0f0     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3f0f4     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3f0f8     BE 00 A0 FD |                 call    #calc_crc5
3f0fc     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3f100     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3f104     F7 AD C2 FA |                 rdbyte  total_data, pb
3f108     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3f10c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3f110     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f114     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3f118     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3f11c     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3f120                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3f120     9F 99 02 F6 |                 mov     hctwait, _500us_
3f124     EF 02 A0 FD |                 call    #poll_waitx
3f128     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3f12c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3f130     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3f134     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3f138     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f13c     CC 00 90 5D |         if_nz   jmp     #.done
3f140     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3f144     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3f148     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3f14c     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3f150     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3f154     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3f158     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3f15c     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3f160     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3f164     A4 00 90 CD |         if_b    jmp     #.done
3f168     70 F0 BF FD |                 call    #hparse_con_desc
3f16c     9C 00 90 FD |                 jmp     #.done
3f170                 | 
3f170                 | .other
3f170     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3f174     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3f178     28 00 90 AD |         if_x1   jmp     #.reset_feature
3f17c     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3f180     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3f184     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3f188     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3f18c     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3f190     10 00 90 AD |         if_x1   jmp     #.reset_feature
3f194     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3f198     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3f19c     04 00 90 AD |         if_x1   jmp     #.reset_feature
3f1a0     68 00 90 FD |                 jmp     #.done
3f1a4                 | .reset_feature
3f1a4     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3f1a8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3f1ac     A0 02 A0 FD |                 call    #control_write
3f1b0     58 00 90 FD |                 jmp     #.done
3f1b4                 | .disconnect
3f1b4                 | 
3f1b4     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3f1b8     00 70 E3 F8 |                 getbyte htmp
3f1bc     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3f1c0     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3f1c4     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3f1c8     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3f1cc     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3f1d0     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3f1d4                 |         if EMUPAD_MAX_PLAYER > 0
3f1d4                 |         end
3f1d4                 |         if HAVE_MOUSE
3f1d4     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3f1d8     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3f1dc     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3f1e0                 |         end
3f1e0                 |         if HAVE_HIDPAD
3f1e0     14 0A F0 FE |                 loc ptrb,#hidpad_report
3f1e4     2D 71 03 F6 |                 mov htmp,hdev_port
3f1e8     01 70 E7 F2 |                 cmpsub htmp,#1
3f1ec     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3f1f0     B8 F3 03 F1 |                 add ptrb,htmp
3f1f4     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3f1f8     80 01 6C FC |                 wrlong #0,ptrb
3f1fc                 |         end
3f1fc                 | 
3f1fc     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3f200     00 00 C4 F8 |                 setbyte #0
3f204     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3f208     00 00 04 F6 |                 mov     0-0, #0
3f20c                 | 
3f20c                 | .done
3f20c     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3f210     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3f214     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3f218     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3f21c     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3f220     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3f224                 | 
3f224     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3f228     27 EF 03 F6 |                 mov     pb, urx_buff_p
3f22c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3f230     55 02 A0 FD |                 call    #control_read
3f234     00 69 06 FB |                 rdlong  hub_port_status, ptra
3f238                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3f238     2D 00 64 FD |                 ret
3f23c                 | 
3f23c                 | '------------------------------------------------------------------------------
3f23c                 | ' Partially populated SETUP packets
3f23c                 | '------------------------------------------------------------------------------
3f23c     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3f23d     06          |                 byte    REQ_GET_DESC
3f23e     00 01       |                 word    TYPE_DEVICE << 8
3f240     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3f242     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3f244     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3f245     06          |                 byte    REQ_GET_DESC
3f246     00 02       |                 word    TYPE_CONFIG << 8
3f248     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3f24a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3f24c     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3f24d     09          |                 byte    REQ_SET_CONFIG
3f24e     00 00       |                 word    0       ' Configuration value
3f250     00 00       |                 word    0       ' Zero
3f252     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3f254     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3f255     05          |                 byte    REQ_SET_ADDR
3f256     00 00       |                 word    0       ' Zero
3f258     00 00       |                 word    0       ' Zero
3f25a     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3f25c                 | '------------------------------------------------------------------------------
3f25c                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3f25c                 | ' wValue field dictates which protocol should be used.
3f25c                 | '
3f25c                 | ' When initialized, all devices default to report protocol. However the host
3f25c                 | ' should not make any assumptions about the device state and should set the
3f25c                 | ' desired protocol whenever initializing a device.
3f25c                 | '------------------------------------------------------------------------------
3f25c     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3f25d     0B          |                 byte    HID_SET_PROTO
3f25e     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3f260                 |                                                 ' (HID 1.11 Section 7.2.6).
3f260     00 00       |                 word    0               ' Interface index number.
3f262     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3f264                 | '------------------------------------------------------------------------------
3f264     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3f265     0A          |                 byte    HID_SET_IDLE
3f266     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3f268                 |                                         ' reporting until a change is detected in the report data
3f268                 | 
3f268                 |                                         ' (HID 1.11 Section 7.2.4).
3f268     00 00       |                 word    0       ' Interface index number.
3f26a     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3f26c     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3f26d     09          |                 byte    HID_SET_REPORT
3f26e     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3f270                 |                                         ' (HID 1.11 Section 7.2.2).
3f270     00 00       |                 word    0       ' Interface index number.
3f272     00 00       |                 word    0       ' Size of the report, in bytes.
3f274     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3f275     06          |                 byte    REQ_GET_DESC
3f276     00 22       |                 word    TYPE_REPORT << 8
3f278     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3f27a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3f27c                 | '------------------------------------------------------------------------------
3f27c     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3f27d     06          |                 byte    REQ_GET_DESC
3f27e     00 29       |                 word    TYPE_HUB << 8
3f280     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3f282     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3f284     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3f285     03          |                 byte    REQ_SET_FEATURE
3f286     00 00       |                 word    0       ' port power
3f288     01 00       |                 word    1       ' Port index number (1+)
3f28a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3f28c     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3f28d     01          |                 byte    REQ_CLEAR_FEATURE
3f28e     00 00       |                 word    0       ' port power
3f290     01 00       |                 word    1       ' Port index number (1+)
3f292     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3f294     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3f295     00          |                 byte    REQ_GET_STATUS
3f296     00 00       |                 word    0
3f298     01 00       |                 word    1       ' Port index number (1+)
3f29a     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3f29c                 | '------------------------------------------------------------------------------
3f29c                 | if _HAVE_GAMEPAD
3f29c     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3f2a0                 | ps3_command_buff
3f2a0     00 00 00 00 
3f2a4     00          |                 byte    $00, $00, $00, $00, $00
3f2a5     00 00 00 00 
3f2a9     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3f2aa     FF 27 10 00 
3f2ae     32          |                 byte    $FF, $27, $10, $00, $32
3f2af     FF 27 10 00 
3f2b3     32          |                 byte    $FF, $27, $10, $00, $32
3f2b4     FF 27 10 00 
3f2b8     32          |                 byte    $FF, $27, $10, $00, $32
3f2b9     FF 27 10 00 
3f2bd     32          |                 byte    $FF, $27, $10, $00, $32
3f2be     00 00 00 00 
3f2c2     00          |                 byte    $00, $00, $00, $00, $00
3f2c3     00 00 00 00 
3f2c7     00          |                 byte    $00, $00, $00, $00, $00
3f2c8     00 00 00 00 
3f2cc     00          |                 byte    $00, $00, $00, $00, $00
3f2cd     00 00 00    |                 byte    $00, $00, $00
3f2d0                 | '------------------------------------------------------------------------------
3f2d0     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3f2d3                 |                                         ' 0x01 All blinking
3f2d3                 |                                         ' 0x02 1 flashes, then on
3f2d3                 |                                         ' 0x03 2 flashes, then on
3f2d3                 |                                         ' 0x04 3 flashes, then on
3f2d3                 |                                         ' 0x05 4 flashes, then on
3f2d3                 |                                         ' 0x06 1 on
3f2d3                 |                                         ' 0x07 2 on
3f2d3                 |                                         ' 0x08 3 on
3f2d3                 |                                         ' 0x09 4 on
3f2d3                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3f2d3                 |                                         ' 0x0B Blinking*
3f2d3                 |                                         ' 0x0C Slow blinking*
3f2d3                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3f2d3     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3f2d6     00          |                 byte    $00             ' Left rumble
3f2d7     00          |                 byte    $00             ' Right rumble
3f2d8     00 00 00    |                 byte    $00, $00, $00
3f2db     00          | end
3f2dc                 | alignl
3f2dc                 | 
3f2dc                 | if HAVE_MOUSE
3f2dc     00 00 00 00 
3f2e0     00 00 00 00 | mouse_limits long 0[2]
3f2e4     00 00 00 00 | mouse_outptr long 0
3f2e8                 | end
3f2e8                 | 
3f2e8                 | if KEYQUEUE_SIZE > 0
3f2e8     00          | keyq_head byte 0
3f2e9     00          | keyq_tail byte 0
3f2ea     00 00 00 00 
      ...             
3f4e6     00 00 00 00 
3f4ea     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3f4ec                 | alignl
3f4ec                 | end
3f4ec                 | 
3f4ec                 | if EMUPAD_MAX_PLAYER > 0
3f4ec                 | emupad_rule_buffer
3f4ec                 | if EMUPAD_BUILTIN_RULES
3f4ec                 | file "padmap_builtin.dat"
3f4ec                 | end
3f4ec                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3f4ec                 | '' Default rule directly follows!
3f4ec                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3f4ec                 | end
3f4ec                 | 
3f4ec                 | '------------------------------------------------------------------------------
3f4ec                 | ' The USB data cache area gets zero-filled at every device disconnect
3f4ec                 | '------------------------------------------------------------------------------
3f4ec                 | usb_cache_start
3f4ec                 | 
3f4ec                 | ' HID descriptor and report buffers
3f4ec                 | if !!OVERLAP_MEMORY
3f4ec     00 00 00 00 
      ...             
3fbe4     00 00 00 00 
3fbe8     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3fbec                 | end
3fbec     00 00 00 00 
3fbf0     00 00 00 00 | hkbd_report     byte    0[8]
3fbf4     00 00 00 00 | hkbd_led_rep    byte    0
3fbf8                 | alignl
3fbf8                 | 
3fbf8                 | if HAVE_HIDPAD
3fbf8     00 00 00 00 
      ...             
3fcb4     00 00 00 00 
3fcb8     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3fcbc                 | end
3fcbc                 | 
3fcbc                 | ' HUB descriptor
3fcbc     00          | hub_descr       byte    0   ' bDescLength
3fcbd     00          |                 byte    0   ' bDescriptorType
3fcbe     00          |                 byte    0   ' bNbrPorts
3fcbf     00 00       |                 word    0   ' wHubCharacteristics
3fcc1     00          |                 byte    0   ' bPwrOn2PwrGood
3fcc2     00          |                 byte    0   ' bHubContrCurrent
3fcc3     00          |                 byte    0   ' DeviceRemoveable
3fcc4     00          |                 byte    0   ' PortPwrCtrlMask
3fcc5                 | 
3fcc5                 | usb_cache_end
3fcc5                 | 
3fcc5                 | if HAVE_MOUSE
3fcc5     00 00 00 00 | mouse_xacc      long 0
3fcc9     00 00 00 00 | mouse_yacc      long 0
3fccd     00 00 00 00 | mouse_zacc      long 0
3fcd1     00          | mouse_bstate    byte 0
3fcd2     00          | mouse_lpending  byte 0
3fcd3     00          | mouse_rpending  byte 0
3fcd4     00          | mouse_mpending  byte 0
3fcd5     00          | mouse_lock      byte 0
3fcd6     00 00 00    |                 byte 0[3] ' padding
3fcd9                 | end
3fcd9                 | 
3fcd9     00 00 00 00 
      ...             
3fd51     00 00 00 00 
3fd55     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3fd59     00 00 00 00 
3fd5d     00 00 00 00 
3fd61     00 00 00 00 
3fd65     00 00 00 00 
3fd69     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3fd6b     00 00 00 00 
      ...             
3fe63     00 00 00 00 
3fe67     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3fe6b                 | 
3fe6b     00          | driver_cog      byte    0                       ' Current driver cog + 1
3fe6c                 | 	alignl
3fe6c                 | _audio096_spin2_dat_
3fe6c                 | 
3fe6c                 | audio       org     0
3fe6c                 | 
3fe6c     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3fe70     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3fe74     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3fe78                 |  
3fe78     01 EC 63 FD |             cogid   pa                   ' compute cogid
3fe7c     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3fe80     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3fe84     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3fe88                 | 
3fe88     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3fe8c     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3fe90     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3fe94     0F 24 06 FC |             wrpin   dac2,#right
3fe98     0F 00 1E FC |             wxpin   #256,#right    
3fe9c     41 9C 64 FD |             dirh    #left addpins 1
3fea0     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3fea4     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3fea8     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3feac                 |             
3feac                 | '---------------------------------------------------------------------------------        
3feac                 | '----------------- The main loop -------------------------------------------------
3feac                 | '---------------------------------------------------------------------------------
3feac                 | 
3feac     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3feb0     10 00 90 CD |       if_c  jmp     #loop1
3feb4                 |   
3feb4     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3feb8     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3febc     D5 00 80 F1 |             sub     0-0,a40000000
3fec0     FD 01 6E FB |             djnz    cn,#p402
3fec4                 |     
3fec4     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3fec8     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3fecc     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3fed0     01 00 06 C6 |     if_c    mov     cn,#1
3fed4     DA 02 3A F3 |             fle     ct,time3 wcz
3fed8     02 00 06 C6 |     if_c    mov     cn,#2     
3fedc     DB 02 3A F3 |             fle     ct,time4 wcz
3fee0     03 00 06 C6 |     if_c    mov     cn,#3
3fee4     DC 02 3A F3 |             fle     ct,time5 wcz
3fee8     04 00 06 C6 |     if_c    mov     cn,#4
3feec     DD 02 3A F3 |             fle     ct,time6 wcz
3fef0     05 00 06 C6 |     if_c    mov     cn,#5
3fef4     DE 02 3A F3 |             fle     ct,time7 wcz
3fef8     06 00 06 C6 |     if_c    mov     cn,#6
3fefc     DF 02 3A F3 |             fle     ct,time8 wcz
3ff00     07 00 06 C6 |     if_c    mov     cn,#7
3ff04                 | 
3ff04                 | 
3ff04                 | '----------------------------------------------------------------------------------
3ff04                 | '------------- Compute channel samples --------------------------------------------
3ff04                 | '----------------------------------------------------------------------------------
3ff04                 | 
3ff04                 | 
3ff04     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3ff08     06 C0 65 F0 |             shl     channeladd,#6
3ff0c     E0 F0 03 F1 |             add     ptra,channeladd
3ff10                 | 
3ff10     28 16 64 FD |             setq    #11                        	' read parameters
3ff14     00 D7 05 FB |             rdlong  pointer0,ptra
3ff18                 |     	    
3ff18     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3ff1c     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3ff20     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3ff24     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3ff28     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3ff2c     00 C4 0D F2 |             cmp     qq,#0 wz                         
3ff30     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3ff34     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3ff38                 |             
3ff38     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3ff3c     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3ff40     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3ff44                 | 
3ff44     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3ff48     EC 08 3A F9 |             getword oldrs,sample0,#1
3ff4c     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3ff50     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3ff54     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3ff58     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3ff5c                 | 
3ff5c     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3ff60     00 04 02 F6 |             mov     dt0,0-0    
3ff64     D7 04 82 F1 |             sub     dt0,time0
3ff68                 |             
3ff68     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3ff6c     FB 00 00 F1 |             add     0-0,afreq0  	
3ff70                 |             
3ff70                 | '---- envelopes
3ff70                 |             
3ff70     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3ff74     20 00 00 AF 
3ff78     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3ff7c     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3ff80                 | 
3ff80     FB 48 02 F6 |             mov     envs1,afreq0
3ff84     F5 48 02 FA |             mul     envs1,envspd0
3ff88     24 E7 01 F1 |             add     envph0,envs1 
3ff8c                 | 
3ff8c     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3ff90     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3ff94     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3ff98     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3ff9c     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3ffa0     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3ffa4     00 46 06 36 |     if_ge   mov     envlo,#0
3ffa8     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3ffac     16 E6 65 30 |     if_ge   shl     envph0,#22
3ffb0                 | 
3ffb0     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3ffb4     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3ffb8     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3ffbc     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3ffc0     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3ffc4     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3ffc8     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3ffcc     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3ffd0     23 49 02 FA |             mul     envs1,envlo
3ffd4     25 49 02 F1 |             add     envs1,envs2
3ffd8     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3ffdc                 |             
3ffdc     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3ffe0     1B C6 61 AD |     if_z    getrnd  spl
3ffe4     58 00 90 AD |     if_z    jmp     #p406
3ffe8                 |  
3ffe8     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3ffec     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3fff0     08 D6 45 F0 |             shr     pointer0,#8
3fff4                 |          
3fff4     1F DA 0D F4 |             testb   sstart0,#31 wz            
3fff8     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3fffc     1C DA 0D F4 |             testb   sstart0,#28 wz            
40000     01 D6 65 A0 |     if_z    shl     pointer0,#1        
40004                 |         
40004     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
40008     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
4000c     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
40010                 |             
40010     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
40014     ED C4 01 F1 |             add     qq,sstart0            
40018                 | 
40018     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
4001c     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
40020     1C 01 B0 1D |     if_gt   call    #cache_read
40024                 |          
40024     1F DA 0D F4 |             testb   sstart0,#31 wz 
40028     08 C6 65 50 |     if_nz   shl     spl,#8
4002c     08 D6 65 50 |     if_nz   shl     pointer0,#8
40030     07 D6 65 A0 |     if_z    shl     pointer0,#7
40034     1C DA 0D F4 |             testb   sstart0,#28 wz            
40038     01 D6 45 A0 |     if_z    shr     pointer0,#1    
4003c     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
40040                 | 
40040                 | 
40040     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
40044     00 C6 01 F6 |             mov     spl,0-0
40048     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
4004c     00 C6 01 F6 |             mov     spl,0-0
40050                 | 
40050     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
40054     00 0A 02 F6 |             mov     ls0,0-0
40058     20 00 00 FF 
4005c     00 C4 05 F6 |             mov     qq,##16384
40060     FE C4 81 F1 |             sub     qq,apan0
40064     E2 C6 31 FA |             scas    spl,qq
40068     00 0C 02 F6 |             mov     rs0, 0-0
4006c                 | 
4006c     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
40070     06 11 02 F1 |             add     rs,rs0
40074     03 0F 82 F1 |             sub     ls,oldls
40078     05 0F 02 F1 |             add     ls,ls0
4007c                 |    
4007c     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
40080     05 D9 21 F9 |             setword sample0,ls0,#0
40084                 |             
40084     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
40088     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
4008c     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
40090                 |   '  if_z    mov     sample0,#0
40090     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
40094     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
40098     04 00 00 AF 
4009c     00 B0 05 A1 |     if_z    add     time1,##2048
400a0     D8 B2 01 A6 |     if_z    mov     time2,time1
400a4     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
400a8                 | 
400a8     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
400ac     00 D7 65 FC |             wrlong  pointer0,ptra
400b0     08 E7 65 FC |             wrlong  envph0,ptra[8]
400b4     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
400b8                 |                       
400b8     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
400bc     FF C3 25 A7 |     if_z    decmod  front, #511          
400c0                 |          
400c0     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
400c4     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
400c8     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
400cc     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
400d0                 | 	    
400d0                 | 		    
400d0     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
400d4     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
400d8     04 15 02 F6 |             mov     newsample, oldrs       
400dc                 | 
400dc     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
400e0     02 AF 01 F1 |             add     time0,dt0    
400e4                 |                                      
400e4     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
400e8     D8 FD 9F AD |     if_z    jmp     #loop1
400ec     02 C5 01 F6 |             mov     qq,dt0
400f0                 | 
400f0                 |     
400f0                 |             
400f0     01 4E 36 F0 | p301        rol     dropper,#1 wc
400f4     40 00 90 3D |     if_nc   jmp     #p399
400f8     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
400fc     00 C2 9D F2 |             cmpr    front, #0-0 wcz
40100     F4 FF 9F AD |     if_e    jmp     #p398   
40104                 | 		
40104     00 1A 0E F2 | 	    cmp     scbase,#0 wz
40108     20 00 90 AD |     if_z    jmp     #p302	   
4010c                 |   
4010c     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
40110     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
40114     02 1E 66 C0 |     if_c    shl     scptr2,#2
40118     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
4011c     60 1E 66 FC |             wrlong  scptr2,#$60
40120     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
40124     01 00 00 CF 
40128     7F 1C 06 C7 |     if_c    incmod  scptr,##639
4012c                 | 			    
4012c     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
40130     00 00 00 FF 
40134     FF C3 05 F7 |             incmod  front, ##511
40138     ED C5 6D FB | p399        djnz    qq,#p301
4013c                 |             
4013c     6C FD 9F FD |             jmp     #loop            'loop
40140                 | 
40140                 | '----------------------------------------------------------------------------------
40140                 | '------------- This is the end of the main loop -----------------------------------
40140                 | '----------------------------------------------------------------------------------
40140                 | 
40140                 | '----------------------------------------------------------------------------------
40140                 | '------------- PSRAM cache ----------- --------------------------------------------
40140                 | '----------------------------------------------------------------------------------
40140                 | 
40140                 | ' There are 8 cache pointers for 8 channels
40140                 | ' if 24 higher bits of address=cache, then get a word from the cache
40140                 | ' else load the cache from PSRAM, update the pointer, then read a sample
40140                 | 
40140                 | 
40140     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
40144                 |             
40144     E2 40 02 F6 | 	    mov     addrhi,qq		
40148     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
4014c     14 01 96 F9 | 	    alts    cn,#cache1            
40150     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
40154     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
40158                 | 	
40158     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
4015c     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
40160     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
40164     08 38 66 F0 | 	    shl     cmd,#8
40168     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
4016c     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
40170     08 3A 66 F0 |             shl     hubaddr,#8                  '
40174     13 3B 02 F1 |             add     hubaddr,hubptr 
40178     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
4017c     28 04 64 FD |             setq    #2                          ' write 3 longs
40180     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
40184     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
40188     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
4018c                 |             
4018c                 | 	
4018c     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
40190     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
40194     13 C5 01 F1 | 	    add     qq,hubptr
40198     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
4019c     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
401a0                 |           
401a0                 | 
401a0                 | '--------------------------------------------------------------------------
401a0                 | '------ Interrupt service -------------------------------------------------
401a0                 | '------ Output the sample, get the next one if exists ---------------------
401a0                 | '--------------------------------------------------------------------------
401a0                 | 
401a0     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
401a4     0F D0 25 FC |             wypin   rsample,#right       '4
401a8     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
401ac     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
401b0     FF F3 07 57 |     if_ne   incmod  ptrb,#511
401b4     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
401b8     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
401bc                 |     
401bc     F5 FF 3B FB |             reti1                        '17/19 
401c0                 |           
401c0                 | '---------------------------------------------------------------------------
401c0                 | '-------- End of interrupt -------------------------------------------------
401c0                 | '---------------------------------------------------------------------------    
401c0                 | 
401c0                 | 
401c0                 | '---------------------------------------------------------------------------
401c0                 | '------- Variables ---------------------------------------------------------
401c0                 | '---------------------------------------------------------------------------
401c0                 | 
401c0                 | ' constants
401c0                 | 
401c0     00 00 00 40 | a40000000   long $40000000
401c4     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
401c8                 | 
401c8                 | ' Time variables
401c8                 | 
401c8     00 00 00 00 | time0       long 0    ' Global sample computing time
401cc     01 00 00 00 | time1       long 1    ' Local channels time
401d0     02 00 00 00 | time2       long 2
401d4     03 00 00 00 | time3       long 3
401d8     04 00 00 00 | time4       long 4
401dc     05 00 00 00 | time5       long 5
401e0     06 00 00 00 | time6       long 6
401e4     07 00 00 00 | time7       long 7
401e8     08 00 00 00 | time8       long 8
401ec                 | 
401ec     00 00 00 00 | channeladd long 0
401f0                 | 
401f0     00 00 00 00 | front       long 0
401f4                 | 
401f4                 | ' temporary variables 
401f4     00 00 00 00 | qq          long 0
401f8     00 00 00 00 | spl         long 0
401fc     00 00 00 00 | zero        long 0
40200     00 00 00 00 | mailbox     long 0
40204     00 00 00 00 | mailbox2 long 0
40208                 | 
40208                 | ' Interrupt ISR variables
40208                 | 
40208     00 00 00 00 | lsample     long 0
4020c     00 00 00 00 | rsample     long 0
40210     00 00 00 00 | lsnext      long 0
40214     00 00 00 00 | rsnext      long 0 
40218                 | 
40218                 | ' channel parameter block
40218                 | 
40218     00 00 00 00 | pointer0    long 0     
4021c     00 00 00 00 | sample0     long 0
40220     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
40224     00 00 00 00 | lstart0     long 0
40228     00 00 00 00 | lend0       long 0
4022c     00 00 00 00 | volpan0     long 0
40230     00 00 00 00 | freqskip0   long 0
40234     00 00 00 00 | command0    long 0
40238     00 00 00 00 | envph0	    long 0
4023c     00 00 00 00 | envptr0	    long 0
40240     00 00 00 00 | envspd0	    long 0
40244     00 00 00 00 | envlen0	    long 0
40248     00 00 00 00 | res5	    long 0
4024c     00 00 00 00 | res6	    long 0
40250     00 00 00 00 | res7	    long 0
40254     00 00 00 00 | res8	    long 0
40258                 | 
40258     00 00 00 00 | afreq0      long 0
4025c     00 00 00 00 | askip0      long 0
40260     00 00 00 00 | avol0       long 0
40264     00 00 00 00 | apan0       long 0
40268                 | 
40268     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
4026c     00 00 00 00 | cn          long 0
40270     00 00 00 00 | ct          long 0
40274     00 00 00 00 | dt0         long 0
40278                 | 
40278                 | ' Samples
40278     00 00 00 00 | oldls       long 0
4027c     00 00 00 00 | oldrs       long 0
40280                 | 
40280     00 00 00 00 | ls0         long 0
40284     00 00 00 00 | rs0         long 0
40288                 | 
40288     00 00 00 00 | ls          long 0    
4028c     00 00 00 00 | rs          long 0
40290                 | 
40290     00 00 00 00 | oldsample   long 0
40294     00 00 00 00 | newsample   long 0
40298                 | 
40298     00 00 00 00 | nrsample    long 0
4029c     00 00 00 00 | nlsample    long 0
402a0                 | 
402a0     00 00 00 00 | scbase long 0
402a4     00 00 00 00 | scptr long 0
402a8     00 00 00 00 | scptr2 long 0
402ac     00 00 00 00 | scope long 0
402b0                 | 
402b0     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
402b4     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
402b8                 | 
402b8     00 18 07 00 | hubptr      long $71800
402bc     00 00 00 00 | cache1      long 0
402c0     00 00 00 00 | cache2      long 0
402c4     00 00 00 00 | cache3      long 0
402c8     00 00 00 00 | cache4      long 0
402cc     00 00 00 00 | cache5      long 0
402d0     00 00 00 00 | cache6      long 0
402d4     00 00 00 00 | cache7      long 0
402d8     00 00 00 00 | cache8      long 0
402dc                 | 
402dc                 | 
402dc     00 00 00 00 | cmd         long 0
402e0     00 00 00 00 | hubaddr     long 0
402e4     00 01 00 00 | count       long 256
402e8     00 00 00 00 | addrlo long 0
402ec     00 00 00 00 | addrhi long 0
402f0     00 00 00 00 | pointer00 long 0
402f4     00 00 00 00 | envhi long 0
402f8     00 00 00 00 | envlo long 0
402fc     00 00 00 00 | envs1 long 0
40300     00 00 00 00 | envs2 long 0
40304     00 00 00 00 | noise0 long 0
40308     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
4030c     00 00 00 00 
40310     00 00 00 00 | null  			long 	0,0           ' for channel reset
40314                 | 	alignl
40314                 | __system__dat_
40314     00 00 00 00 
40318     00 00 00 00 | 	byte	$00[8]
4031c     03 00 00 00 
40320     00 00 00 00 
40324     00 00 00 00 
40328     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
4032c     00 00 00 00 
      ...             
405b8     00 00 00 00 
405bc     00 00 00 00 | 	byte	$00[660]
405c0     00 00 50 0A | 	long	(165 {__system____root_opendir})<<20
405c4     00 00 60 0A | 	long	(166 {__system____root_closedir})<<20
405c8     00 00 70 0A | 	long	(167 {__system____root_readdir})<<20
405cc     00 00 80 0A | 	long	(168 {__system____root_stat})<<20
405d0     00 00 00 00 
405d4     00 00 00 00 
405d8     00 00 00 00 
405dc     00 00 00 00 
405e0     00 00 00 00 
405e4     00 00 00 00 
405e8     00 00 00 00 | 	byte	$00[28]
405ec     54 06 04 00 | 	long	@@@__system__dat_ + 832
405f0     57 06 04 00 | 	long	@@@__system__dat_ + 835
405f4     78 06 04 00 | 	long	@@@__system__dat_ + 868
405f8     91 06 04 00 | 	long	@@@__system__dat_ + 893
405fc     AC 06 04 00 | 	long	@@@__system__dat_ + 920
40600     C6 06 04 00 | 	long	@@@__system__dat_ + 946
40604     D6 06 04 00 | 	long	@@@__system__dat_ + 962
40608     E8 06 04 00 | 	long	@@@__system__dat_ + 980
4060c     FA 06 04 00 | 	long	@@@__system__dat_ + 998
40610     0C 07 04 00 | 	long	@@@__system__dat_ + 1016
40614     18 07 04 00 | 	long	@@@__system__dat_ + 1028
40618     29 07 04 00 | 	long	@@@__system__dat_ + 1045
4061c     3D 07 04 00 | 	long	@@@__system__dat_ + 1065
40620     47 07 04 00 | 	long	@@@__system__dat_ + 1075
40624     57 07 04 00 | 	long	@@@__system__dat_ + 1091
40628     66 07 04 00 | 	long	@@@__system__dat_ + 1106
4062c     7C 07 04 00 | 	long	@@@__system__dat_ + 1128
40630     95 07 04 00 | 	long	@@@__system__dat_ + 1153
40634     A9 07 04 00 | 	long	@@@__system__dat_ + 1173
40638     B7 07 04 00 | 	long	@@@__system__dat_ + 1187
4063c     CB 07 04 00 | 	long	@@@__system__dat_ + 1207
40640     D7 07 04 00 | 	long	@@@__system__dat_ + 1219
40644     E9 07 04 00 | 	long	@@@__system__dat_ + 1237
40648     01 08 04 00 | 	long	@@@__system__dat_ + 1261
4064c     13 08 04 00 | 	long	@@@__system__dat_ + 1279
40650     26 08 04 00 | 	long	@@@__system__dat_ + 1298
40654     4F 4B 00 4E 
40658     75 6D 65 72 
4065c     69 63 61 6C 
40660     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
40664     75 6D 65 6E 
40668     74 20 6F 75 
4066c     74 20 6F 66 
40670     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
40674     61 69 6E 00 
40678     52 65 73 75 
4067c     6C 74 20 6E 
40680     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
40684     65 70 72 65 
40688     73 65 6E 74 
4068c     61 62 6C 65 
40690     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
40694     65 67 61 6C 
40698     20 6D 75 6C 
4069c     74 69 62 79 
406a0     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
406a4     65 71 75 65 
406a8     6E 63 65 00 
406ac     4E 6F 20 73 
406b0     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
406b4     66 69 6C 65 
406b8     20 6F 72 20 
406bc     64 69 72 65 
406c0     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
406c4     79 00 42 61 
406c8     64 20 66 69 
406cc     6C 65 20 6E 
406d0     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
406d4     72 00 50 65 
406d8     72 6D 69 73 
406dc     73 69 6F 6E 
406e0     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
406e4     69 65 64 00 
406e8     4E 6F 74 20 
406ec     65 6E 6F 75 
406f0     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
406f4     65 6D 6F 72 
406f8     79 00 54 65 
406fc     6D 70 6F 72 
40700     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
40704     66 61 69 6C 
40708     75 72 65 00 
4070c     46 69 6C 65 
40710     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
40714     73 74 73 00 
40718     49 6E 76 61 
4071c     6C 69 64 20 
40720     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
40724     6D 65 6E 74 
40728     00 54 6F 6F 
4072c     20 6D 61 6E 
40730     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
40734     65 6E 20 66 
40738     69 6C 65 73 
4073c     00 49 2F 4F 
40740     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
40744     6F 72 00 4E 
40748     6F 74 20 61 
4074c     20 64 69 72 
40750     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
40754     72 79 00 49 
40758     73 20 61 20 
4075c     64 69 72 65 
40760     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
40764     79 00 52 65 
40768     61 64 20 6F 
4076c     6E 6C 79 20 
40770     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
40774     20 73 79 73 
40778     74 65 6D 00 
4077c     46 75 6E 63 
40780     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
40784     20 6E 6F 74 
40788     20 69 6D 70 
4078c     6C 65 6D 65 
40790     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
40794     00 44 69 72 
40798     65 63 74 6F 
4079c     72 79 20 6E 
407a0     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
407a4     6D 70 74 79 
407a8     00 4E 61 6D 
407ac     65 20 74 6F 
407b0     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
407b4     6E 67 00 44 
407b8     65 76 69 63 
407bc     65 20 6E 6F 
407c0     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
407c4     65 6B 61 62 
407c8     6C 65 00 42 
407cc     61 64 20 61 
407d0     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
407d4     73 73 00 42 
407d8     72 6F 6B 65 
407dc     6E 20 63 6F 
407e0     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
407e4     74 69 6F 6E 
407e8     00 44 65 76 
407ec     69 63 65 20 
407f0     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
407f4     65 73 6F 75 
407f8     72 63 65 20 
407fc     62 75 73 79 
40800     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
40804     73 73 20 64 
40808     65 76 69 63 
4080c     65 20 6C 69 
40810     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
40814     6F 20 73 70 
40818     61 63 65 20 
4081c     6F 6E 20 64 
40820     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
40824     65 00 55 6E 
40828     6B 6E 6F 77 
4082c     6E 20 65 72 
40830     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
40834     00 00 00 00 
40838     00 00 00 00 
4083c     00 00 00 00 | 	byte	$00[12]
40840     05 00 00 00 
40844     00 00 00 00 
40848     00 00 00 00 
4084c     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
40850     00 00 00 00 | 	byte	$00, $00, $00, $00
40854     00 00 D0 0B | 	long	(189 {__system___tx})<<20
40858     00 00 E0 0B | 	long	(190 {__system___rx})<<20
4085c     00 00 00 00 | 	byte	$00, $00, $00, $00
40860     00 00 F0 0B | 	long	(191 {__system___rxtxioctl_0764})<<20
40864     00 00 00 0C | 	long	(192 {__system____dummy_flush_0765})<<20
40868     00 00 00 00 
4086c     00 00 00 00 | 	byte	$00[8]
40870     01 00 00 00 
40874     06 00 00 00 
40878     00 00 00 00 
4087c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
40880     00 00 00 00 
40884     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
40888     00 00 D0 0B | 	long	(189 {__system___tx})<<20
4088c     00 00 E0 0B | 	long	(190 {__system___rx})<<20
40890     00 00 00 00 | 	byte	$00, $00, $00, $00
40894     00 00 F0 0B | 	long	(191 {__system___rxtxioctl_0764})<<20
40898     00 00 00 0C | 	long	(192 {__system____dummy_flush_0765})<<20
4089c     00 00 00 00 
408a0     00 00 00 00 | 	byte	$00[8]
408a4     01 00 00 00 
408a8     06 00 00 00 
408ac     00 00 00 00 
408b0     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
408b4     00 00 00 00 
408b8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
408bc     00 00 D0 0B | 	long	(189 {__system___tx})<<20
408c0     00 00 E0 0B | 	long	(190 {__system___rx})<<20
408c4     00 00 00 00 | 	byte	$00, $00, $00, $00
408c8     00 00 F0 0B | 	long	(191 {__system___rxtxioctl_0764})<<20
408cc     00 00 00 0C | 	long	(192 {__system____dummy_flush_0765})<<20
408d0     00 00 00 00 
      ...             
40a40     00 00 00 00 
40a44     00 00 00 00 | 	byte	$00[376]
40a48     4C 0A 04 00 | 	long	@@@__system__dat_ + 1848
40a4c     00 00 00 00 
40a50     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
40a54                 | 	alignl
40a54                 | _fatfs_cc_dat_
40a54     C7 00 FC 00 
40a58     E9 00 E2 00 
40a5c     E4 00 E0 00 
40a60     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
40a64     EA 00 EB 00 
40a68     E8 00 EF 00 
40a6c     EE 00 EC 00 
40a70     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
40a74     C9 00 E6 00 
40a78     C6 00 F4 00 
40a7c     F6 00 F2 00 
40a80     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
40a84     FF 00 D6 00 
40a88     DC 00 F8 00 
40a8c     A3 00 D8 00 
40a90     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
40a94     E1 00 ED 00 
40a98     F3 00 FA 00 
40a9c     F1 00 D1 00 
40aa0     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
40aa4     BF 00 AE 00 
40aa8     AC 00 BD 00 
40aac     BC 00 A1 00 
40ab0     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
40ab4     91 25 92 25 
40ab8     93 25 02 25 
40abc     24 25 C1 00 
40ac0     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
40ac4     A9 00 63 25 
40ac8     51 25 57 25 
40acc     5D 25 A2 00 
40ad0     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
40ad4     14 25 34 25 
40ad8     2C 25 1C 25 
40adc     00 25 3C 25 
40ae0     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
40ae4     5A 25 54 25 
40ae8     69 25 66 25 
40aec     60 25 50 25 
40af0     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
40af4     F0 00 D0 00 
40af8     CA 00 CB 00 
40afc     C8 00 31 01 
40b00     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
40b04     CF 00 18 25 
40b08     0C 25 88 25 
40b0c     84 25 A6 00 
40b10     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
40b14     D3 00 DF 00 
40b18     D4 00 D2 00 
40b1c     F5 00 D5 00 
40b20     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
40b24     DE 00 DA 00 
40b28     DB 00 D9 00 
40b2c     FD 00 DD 00 
40b30     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
40b34     AD 00 B1 00 
40b38     17 20 BE 00 
40b3c     B6 00 A7 00 
40b40     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
40b44     B0 00 A8 00 
40b48     B7 00 B9 00 
40b4c     B3 00 B2 00 
40b50     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
40b54     61 00 1A 03 
40b58     E0 00 17 03 
40b5c     F8 00 07 03 
40b60     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
40b64     78 01 00 01 
40b68     30 01 32 01 
40b6c     06 01 39 01 
40b70     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
40b74     2E 01 79 01 
40b78     06 01 80 01 
40b7c     4D 00 43 02 
40b80     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
40b84     82 01 84 01 
40b88     84 01 86 01 
40b8c     87 01 87 01 
40b90     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
40b94     8B 01 8B 01 
40b98     8D 01 8E 01 
40b9c     8F 01 90 01 
40ba0     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
40ba4     93 01 94 01 
40ba8     F6 01 96 01 
40bac     97 01 98 01 
40bb0     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
40bb4     9B 01 9C 01 
40bb8     9D 01 20 02 
40bbc     9F 01 A0 01 
40bc0     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
40bc4     A2 01 A4 01 
40bc8     A4 01 A6 01 
40bcc     A7 01 A7 01 
40bd0     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
40bd4     AB 01 AC 01 
40bd8     AC 01 AE 01 
40bdc     AF 01 AF 01 
40be0     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
40be4     B3 01 B3 01 
40be8     B5 01 B5 01 
40bec     B7 01 B8 01 
40bf0     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
40bf4     BB 01 BC 01 
40bf8     BC 01 BE 01 
40bfc     F7 01 C0 01 
40c00     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
40c04     C3 01 C4 01 
40c08     C5 01 C4 01 
40c0c     C7 01 C8 01 
40c10     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
40c14     CB 01 CA 01 
40c18     CD 01 10 01 
40c1c     DD 01 01 00 
40c20     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
40c24     12 01 F3 01 
40c28     03 00 F1 01 
40c2c     F4 01 F4 01 
40c30     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
40c34     22 02 12 01 
40c38     3A 02 09 00 
40c3c     65 2C 3B 02 
40c40     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
40c44     66 2C 3F 02 
40c48     40 02 41 02 
40c4c     41 02 46 02 
40c50     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
40c54     40 00 81 01 
40c58     86 01 55 02 
40c5c     89 01 8A 01 
40c60     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
40c64     5A 02 90 01 
40c68     5C 02 5D 02 
40c6c     5E 02 5F 02 
40c70     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
40c74     62 02 94 01 
40c78     64 02 65 02 
40c7c     66 02 67 02 
40c80     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
40c84     6A 02 62 2C 
40c88     6C 02 6D 02 
40c8c     6E 02 9C 01 
40c90     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
40c94     9D 01 73 02 
40c98     74 02 9F 01 
40c9c     76 02 77 02 
40ca0     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
40ca4     7A 02 7B 02 
40ca8     7C 02 64 2C 
40cac     7E 02 7F 02 
40cb0     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
40cb4     82 02 A9 01 
40cb8     84 02 85 02 
40cbc     86 02 87 02 
40cc0     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
40cc4     B1 01 B2 01 
40cc8     45 02 8D 02 
40ccc     8E 02 8F 02 
40cd0     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
40cd4     B7 01 7B 03 
40cd8     03 00 FD 03 
40cdc     FE 03 FF 03 
40ce0     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
40ce4     86 03 88 03 
40ce8     89 03 8A 03 
40cec     B1 03 11 03 
40cf0     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
40cf4     A3 03 A3 03 
40cf8     C4 03 08 03 
40cfc     CC 03 03 00 
40d00     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
40d04     8F 03 D8 03 
40d08     18 01 F2 03 
40d0c     0A 00 F9 03 
40d10     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
40d14     F5 03 F6 03 
40d18     F7 03 F7 03 
40d1c     F9 03 FA 03 
40d20     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
40d24     20 03 50 04 
40d28     10 07 60 04 
40d2c     22 01 8A 04 
40d30     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
40d34     0E 01 CF 04 
40d38     01 00 C0 04 
40d3c     D0 04 44 01 
40d40     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
40d44     00 00 7D 1D 
40d48     01 00 63 2C 
40d4c     00 1E 96 01 
40d50     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
40d54     00 1F 08 06 
40d58     10 1F 06 06 
40d5c     20 1F 08 06 
40d60     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
40d64     40 1F 06 06 
40d68     51 1F 07 00 
40d6c     59 1F 52 1F 
40d70     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
40d74     5D 1F 56 1F 
40d78     5F 1F 60 1F 
40d7c     08 06 70 1F 
40d80     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
40d84     BB 1F C8 1F 
40d88     C9 1F CA 1F 
40d8c     CB 1F DA 1F 
40d90     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
40d94     F9 1F EA 1F 
40d98     EB 1F FA 1F 
40d9c     FB 1F 80 1F 
40da0     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
40da4     08 06 A0 1F 
40da8     08 06 B0 1F 
40dac     04 00 B8 1F 
40db0     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
40db4     BC 1F CC 1F 
40db8     01 00 C3 1F 
40dbc     D0 1F 02 06 
40dc0     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
40dc4     E5 1F 01 00 
40dc8     EC 1F F3 1F 
40dcc     01 00 FC 1F 
40dd0     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
40dd4     32 21 70 21 
40dd8     10 02 84 21 
40ddc     01 00 83 21 
40de0     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
40de4     30 2C 2F 04 
40de8     60 2C 02 01 
40dec     67 2C 06 01 
40df0     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
40df4     80 2C 64 01 
40df8     00 2D 26 08 
40dfc     41 FF 1A 03 
40e00     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
40e04     05 07 09 0E 
40e08     10 12 14 16 
40e0c     18 1C 1E 43 
40e10     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
40e14     41 41 43 45 
40e18     45 45 49 49 
40e1c     49 41 41 45 
40e20     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
40e24     4F 55 55 59 
40e28     4F 55 4F 9C 
40e2c     4F 9E 9F 41 
40e30     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
40e34     A5 A6 A7 A8 
40e38     A9 AA AB AC 
40e3c     AD AE AF B0 
40e40     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
40e44     41 41 41 B8 
40e48     B9 BA BB BC 
40e4c     BD BE BF C0 
40e50     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
40e54     C5 41 41 C8 
40e58     C9 CA CB CC 
40e5c     CD CE CF D1 
40e60     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
40e64     49 49 49 49 
40e68     D9 DA DB DC 
40e6c     DD 49 DF 4F 
40e70     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
40e74     4F E6 E8 E8 
40e78     55 55 55 59 
40e7c     59 EE EF F0 
40e80     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
40e84     F5 F6 F7 F8 
40e88     F9 FA FB FC 
40e8c     FD FE FF 00 
40e90     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
40e94     00 00 00 00 | 	byte	$00, $00, $00, $00
40e98     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_close})<<20
40e9c     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_read})<<20
40ea0     00 00 E0 0A | 	long	(174 {_fatfs_cc_v_write})<<20
40ea4     00 00 F0 0A | 	long	(175 {_fatfs_cc_v_lseek})<<20
40ea8     00 00 00 0B | 	long	(176 {_fatfs_cc_v_ioctl})<<20
40eac     00 00 10 0C | 	long	(193 {_fatfs_cc_v_flush})<<20
40eb0     00 00 00 00 
40eb4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
40eb8     00 00 10 0B | 	long	(177 {_fatfs_cc_v_open})<<20
40ebc     00 00 20 0B | 	long	(178 {_fatfs_cc_v_creat})<<20
40ec0     00 00 30 0B | 	long	(179 {_fatfs_cc_v_opendir})<<20
40ec4     00 00 40 0B | 	long	(180 {_fatfs_cc_v_closedir})<<20
40ec8     00 00 50 0B | 	long	(181 {_fatfs_cc_v_readdir})<<20
40ecc     00 00 60 0B | 	long	(182 {_fatfs_cc_v_stat})<<20
40ed0     00 00 70 0B | 	long	(183 {_fatfs_cc_v_mkdir})<<20
40ed4     00 00 80 0B | 	long	(184 {_fatfs_cc_v_rmdir})<<20
40ed8     00 00 90 0B | 	long	(185 {_fatfs_cc_v_remove})<<20
40edc     00 00 A0 0B | 	long	(186 {_fatfs_cc_v_rename})<<20
40ee0     00 00 B0 0B | 	long	(187 {_fatfs_cc_v_init})<<20
40ee4     00 00 C0 0B | 	long	(188 {_fatfs_cc_v_deinit})<<20
40ee8     FF FF FF FF 
40eec     1F 00 00 00 
40ef0     1C 00 00 00 
40ef4     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
40ef8     1E 00 00 00 
40efc     1F 00 00 00 
40f00     1E 00 00 00 
40f04     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
40f08     1F 00 00 00 
40f0c     1E 00 00 00 
40f10     1F 00 00 00 
40f14     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
40f18     1F 00 00 00 
40f1c     00 00 00 00 
40f20     1F 00 00 00 
40f24     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
40f28     5A 00 00 00 
40f2c     78 00 00 00 
40f30     97 00 00 00 
40f34     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
40f38     D4 00 00 00 
40f3c     F3 00 00 00 
40f40     11 01 00 00 
40f44     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
40f48     4E 01 00 00 
40f4c     6D 01 00 00 
40f50     FF FF FF FF 
40f54     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
40f58     00 00 00 00 
      ...             
40f70     00 00 00 00 
40f74     00 00 00 00 | 	byte	$00[32]
40f78     96 0F 04 00 | 	long	@@@_fatfs_cc_dat_ + 1346
40f7c     9A 0F 04 00 | 	long	@@@_fatfs_cc_dat_ + 1350
40f80     00 00 00 00 
40f84     00 00 00 00 
40f88     00 00 00 00 
40f8c     00 00 00 00 
40f90     00 00       | 	byte	$00[18]
40f92     3F 3F 3F 00 
40f96     55 43 54 00 
40f9a     55 43 54 00 
40f9e     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
40fa2     00 00 00 00 
40fa6     00 00 00    | 	byte	$00[7]
40fa9     CA 9A 3B 00 
40fad     00 00 00 01 
40fb1     01 01 01 01 
40fb5     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
40fb9     91 11 11 11 
40fbd     11 01 01 01 
40fc1     01 01 01 01 
40fc5     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
40fc9     01 01 01 01 
40fcd     01 01 01    | 	byte	$01[7]
40fd0     90 20 20 20 
40fd4     20 20 20 20 
40fd8     20 20 20 20 
40fdc     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
40fe0     42 42 42 42 
40fe4     42 42 42 42 
40fe8     42 42       | 	byte	$42[10]
40fea     20 20 20 20 
40fee     20 20 20    | 	byte	$20[7]
40ff1     44 44 44 44 
40ff5     44 44       | 	byte	$44[6]
40ff7     04 04 04 04 
40ffb     04 04 04 04 
40fff     04 04 04 04 
41003     04 04 04 04 
41007     04 04 04 04 | 	byte	$04[20]
4100b     20 20 20 20 
4100f     20 20       | 	byte	$20[6]
41011     48 48 48 48 
41015     48 48       | 	byte	$48[6]
41017     08 08 08 08 
4101b     08 08 08 08 
4101f     08 08 08 08 
41023     08 08 08 08 
41027     08 08 08 08 | 	byte	$08[20]
4102b     20 20 20 20 
4102f     01 00 00 00 
41033     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
41034                 | __methodtable__
41034     3C 5A 01 00 | 	long	@_do_no_command
41038     60 FB 01 00 | 	long	@_do_plus
4103c     80 EB 01 00 | 	long	@_do_minus
41040     48 FA 01 00 | 	long	@_do_or
41044     00 F2 01 00 | 	long	@_do_mul
41048     44 D6 01 00 | 	long	@_do_fdiv
4104c     30 CE 01 00 | 	long	@_do_and
41050     48 CF 01 00 | 	long	@_do_div
41054     E0 EF 01 00 | 	long	@_do_mod
41058     14 02 02 00 | 	long	@_do_shl
4105c     2C 03 02 00 | 	long	@_do_shr
41060     4C 00 02 00 | 	long	@_do_power
41064     E8 C3 01 00 | 	long	@_do_getvar
41068     78 87 01 00 | 	long	@_do_push
4106c     E0 BD 01 00 | 	long	@_do_assign
41070     E4 F2 00 00 | 	long	@_do_cls
41074     08 54 01 00 | 	long	@_do_new
41078     BC 7F 01 00 | 	long	@_do_plot
4107c     E4 14 01 00 | 	long	@_do_draw
41080     24 82 01 00 | 	long	@_do_print
41084     C4 F0 00 00 | 	long	@_do_circle
41088     18 17 01 00 | 	long	@_do_fcircle
4108c     B8 DF 00 00 | 	long	@_do_box
41090     FC 1B 01 00 | 	long	@_do_frame
41094     24 F3 00 00 | 	long	@_do_color
41098     8C 19 01 00 | 	long	@_do_for
4109c     74 56 01 00 | 	long	@_do_next
410a0     40 42 01 00 | 	long	@_do_list
410a4     20 A3 01 00 | 	long	@_do_run
410a8     40 16 01 00 | 	long	@_do_error
410ac     48 28 01 00 | 	long	@_do_fast_goto
410b0     38 29 01 00 | 	long	@_do_find_goto
410b4     4C 2B 01 00 | 	long	@_do_slow_goto
410b8     5C 5A 01 00 | 	long	@_do_nothing
410bc     3C A7 01 00 | 	long	@_do_save
410c0     DC 44 01 00 | 	long	@_do_load
410c4     F8 72 01 00 | 	long	@_do_pinwrite
410c8     20 BB 01 00 | 	long	@_do_waitms
410cc     54 BC 01 00 | 	long	@_do_waitvbl
410d0     40 2E 01 00 | 	long	@_do_if
410d4     D8 15 01 00 | 	long	@_do_else
410d8     68 D1 01 00 | 	long	@_do_eq
410dc     0C D8 01 00 | 	long	@_do_ge
410e0     D8 E1 01 00 | 	long	@_do_le
410e4     F4 DC 01 00 | 	long	@_do_gt
410e8     B4 E6 01 00 | 	long	@_do_lt
410ec     6C F5 01 00 | 	long	@_do_ne
410f0     88 A0 01 00 | 	long	@_do_rnd
410f4     A0 E1 00 00 | 	long	@_do_brun
410f8     3C DB 00 00 | 	long	@_do_beep
410fc     74 0D 01 00 | 	long	@_do_dir
41100     2C 6F 01 00 | 	long	@_do_paper
41104     FC 31 01 00 | 	long	@_do_ink
41108     10 19 01 00 | 	long	@_do_font
4110c     18 4F 01 00 | 	long	@_do_mode
41110     C4 52 01 00 | 	long	@_do_mouse
41114     C8 26 01 00 | 	long	@_do_gettime
41118     80 F4 00 00 | 	long	@_do_cursor
4111c     3C F2 00 00 | 	long	@_do_click
41120     80 53 01 00 | 	long	@_do_mousex
41124     C4 53 01 00 | 	long	@_do_mousey
41128     F8 52 01 00 | 	long	@_do_mousek
4112c     3C 53 01 00 | 	long	@_do_mousew
41130     88 B0 01 00 | 	long	@_do_sin
41134     C0 B3 01 00 | 	long	@_do_stick
41138     50 B5 01 00 | 	long	@_do_strig
4113c     E0 B1 01 00 | 	long	@_do_sprite
41140     9C 08 01 00 | 	long	@_do_defsprite
41144     74 25 01 00 | 	long	@_do_getpixel
41148     FC BA 01 00 | 	long	@_do_waitclock
4114c     30 EF 01 00 | 	long	@_do_negative
41150     FC 8D 01 00 | 	long	@_do_rdpin
41154     AC A2 01 00 | 	long	@_do_rqpin
41158     24 71 01 00 | 	long	@_do_pinread
4115c     60 BC 01 00 | 	long	@_do_wrpin
41160     E0 BC 01 00 | 	long	@_do_wxpin
41164     60 BD 01 00 | 	long	@_do_wypin
41168     64 70 01 00 | 	long	@_do_pinfloat
4116c     E4 70 01 00 | 	long	@_do_pinlo
41170     A4 70 01 00 | 	long	@_do_pinhi
41174     A8 71 01 00 | 	long	@_do_pinstart
41178     B8 72 01 00 | 	long	@_do_pintoggle
4117c     9C 81 01 00 | 	long	@_do_position
41180     5C F3 00 00 | 	long	@_do_cos
41184     E0 B6 01 00 | 	long	@_do_tan
41188     24 DA 00 00 | 	long	@_do_atn
4118c     14 D9 00 00 | 	long	@_do_asin
41190     A4 D6 00 00 | 	long	@_do_acos
41194     CC B2 01 00 | 	long	@_do_sqr
41198     FC 17 01 00 | 	long	@_do_fill
4119c     B0 FF 00 00 | 	long	@_do_defsnd
411a0     B4 F4 00 00 | 	long	@_do_defenv
411a4     D4 8D 01 00 | 	long	@_do_rad
411a8     10 0C 01 00 | 	long	@_do_deg
411ac     7C 32 01 00 | 	long	@_do_int
411b0     80 73 01 00 | 	long	@_do_play
411b4     E0 AA 01 00 | 	long	@_do_setdelay
411b8     88 AB 01 00 | 	long	@_do_setenv
411bc     30 AC 01 00 | 	long	@_do_setlen
411c0     D8 AC 01 00 | 	long	@_do_setpan
411c4     28 AE 01 00 | 	long	@_do_setvol
411c8     D0 AE 01 00 | 	long	@_do_setwave
411cc     80 AD 01 00 | 	long	@_do_setsustain
411d0     80 9D 01 00 | 	long	@_do_release
411d4     60 23 01 00 | 	long	@_do_getenvsustain
411d8     8C 80 01 00 | 	long	@_do_poke
411dc     0C 14 01 00 | 	long	@_do_dpoke
411e0     B4 4B 01 00 | 	long	@_do_lpoke
411e4     B4 6F 01 00 | 	long	@_do_peek
411e8     60 13 01 00 | 	long	@_do_dpeek
411ec     08 4B 01 00 | 	long	@_do_lpeek
411f0     58 1D 01 00 | 	long	@_do_fre
411f4     70 24 01 00 | 	long	@_do_getnotevalue
411f8     A0 C9 01 00 | 	long	@_do_getaddr
411fc     24 2F 01 00 | 	long	@_do_inkey
41200     24 D6 00 00 | 	long	@_do_abs
41204     DC 2C 01 00 | 	long	@_do_hex
41208     54 DE 00 00 | 	long	@_do_bin
4120c     F0 B7 01 00 | 	long	@_do_val
41210     C4 EF 00 00 | 	long	@_do_chr
41214     B4 D7 00 00 | 	long	@_do_asc
41218     40 3F 01 00 | 	long	@_do_left
4121c     FC 9E 01 00 | 	long	@_do_right
41220     8C 4C 01 00 | 	long	@_do_mid
41224     CC 40 01 00 | 	long	@_do_len
41228     30 27 01 00 | 	long	@_do_gosub
4122c     50 9E 01 00 | 	long	@_do_return
41230     FC 15 01 00 | 	long	@_do_end
41234     64 81 01 00 | 	long	@_do_pop
41238     8C 49 01 00 | 	long	@_do_log
4123c     B8 ED 00 00 | 	long	@_do_changevol
41240     98 EE 00 00 | 	long	@_do_changewav
41244     A8 EC 00 00 | 	long	@_do_changepan
41248     8C E9 00 00 | 	long	@_do_changefreq
4124c     78 AF 01 00 | 	long	@_do_shutup
41250     58 A2 01 00 | 	long	@_do_round
41254     30 16 01 00 | 	long	@_do_enter
41258     84 5B 01 00 | 	long	@_do_open
4125c     68 F2 00 00 | 	long	@_do_close
41260     BC 1D 01 00 | 	long	@_do_get
41264     94 88 01 00 | 	long	@_do_put
41268     D8 E3 00 00 | 	long	@_do_cd
4126c     38 0C 01 00 | 	long	@_do_delete
41270     58 4E 01 00 | 	long	@_do_mkdir
41274     50 DC 00 00 | 	long	@_do_blit
41278     24 1D 01 00 | 	long	@_do_framebuf
4127c     60 5A 01 00 | 	long	@_do_on
41280     98 B1 01 00 | 	long	@_do_skip
41284     38 33 01 00 | 	long	@_do_input
41288     60 90 01 00 | 	long	@_do_read
4128c     18 9E 01 00 | 	long	@_do_restore
41290     AC 67 01 00 | 	long	@_do_padx
41294     2C 6A 01 00 | 	long	@_do_pady
41298     AC 6C 01 00 | 	long	@_do_padz
4129c     2C 60 01 00 | 	long	@_do_padrx
412a0     AC 62 01 00 | 	long	@_do_padry
412a4     2C 65 01 00 | 	long	@_do_padrz
412a8     9C 5E 01 00 | 	long	@_do_padh
412ac     68 43 02 00 | 	long	@_hg010b_spin2_putchar
412b0     50 59 03 00 | 	long	@__struct___bas_wrap_sender_tx
412b4     94 59 03 00 | 	long	@__struct___bas_wrap_sender_rx
412b8     DC 59 03 00 | 	long	@__struct___bas_wrap_sender_close
412bc     80 58 03 00 | 	long	@__struct__s_vfs_file_t_putchar
412c0     F0 58 03 00 | 	long	@__struct__s_vfs_file_t_getchar
412c4     38 58 03 00 | 	long	@___strs_cl_pfunc
412c8     CC B5 02 00 | 	long	@__system____root_opendir
412cc     68 B6 02 00 | 	long	@__system____root_closedir
412d0     E4 B5 02 00 | 	long	@__system____root_readdir
412d4     70 B6 02 00 | 	long	@__system____root_stat
412d8     BC AE 02 00 | 	long	@__system____default_putc
412dc     40 AE 02 00 | 	long	@__system____default_getc
412e0     64 AF 02 00 | 	long	@__system____default_flush
412e4     3C 43 03 00 | 	long	@_fatfs_cc_v_close
412e8     58 47 03 00 | 	long	@_fatfs_cc_v_read
412ec     6C 48 03 00 | 	long	@_fatfs_cc_v_write
412f0     4C 49 03 00 | 	long	@_fatfs_cc_v_lseek
412f4     D4 49 03 00 | 	long	@_fatfs_cc_v_ioctl
412f8     28 4A 03 00 | 	long	@_fatfs_cc_v_open
412fc     A0 42 03 00 | 	long	@_fatfs_cc_v_creat
41300     80 43 03 00 | 	long	@_fatfs_cc_v_opendir
41304     F4 43 03 00 | 	long	@_fatfs_cc_v_closedir
41308     34 44 03 00 | 	long	@_fatfs_cc_v_readdir
4130c     68 45 03 00 | 	long	@_fatfs_cc_v_stat
41310     E8 49 03 00 | 	long	@_fatfs_cc_v_mkdir
41314     08 4A 03 00 | 	long	@_fatfs_cc_v_rmdir
41318     F8 49 03 00 | 	long	@_fatfs_cc_v_remove
4131c     18 4A 03 00 | 	long	@_fatfs_cc_v_rename
41320     38 4B 03 00 | 	long	@_fatfs_cc_v_init
41324     40 4B 03 00 | 	long	@_fatfs_cc_v_deinit
41328     10 60 02 00 | 	long	@__system___tx
4132c     50 60 02 00 | 	long	@__system___rx
41330     DC C1 02 00 | 	long	@__system___rxtxioctl_0764
41334     34 C2 02 00 | 	long	@__system____dummy_flush_0765
41338     08 4B 03 00 | 	long	@_fatfs_cc_v_flush
4133c                 | __heap_base
4133c     00 00 00 00 
      ...             
58a3c     00 00 00 00 
58a40     00 00 00 00 | 	long	0[24002]
58a44                 | objmem
58a44     00 00 00 00 
      ...             
62f5c     00 00 00 00 
62f60     00 00 00 00 | 	long	0[10568]
62f64                 | stackspace
62f64     00 00 00 00 | 	long	0[1]
62f68 100             | 	org	COG_BSS_START
62f68 100             | _var01
62f68 100             | 	res	1
62f68 101             | _var02
62f68 101             | 	res	1
62f68 102             | _var03
62f68 102             | 	res	1
62f68 103             | _var04
62f68 103             | 	res	1
62f68 104             | _var05
62f68 104             | 	res	1
62f68 105             | _var06
62f68 105             | 	res	1
62f68 106             | _var07
62f68 106             | 	res	1
62f68 107             | _var08
62f68 107             | 	res	1
62f68 108             | _var09
62f68 108             | 	res	1
62f68 109             | arg01
62f68 109             | 	res	1
62f68 10a             | arg02
62f68 10a             | 	res	1
62f68 10b             | arg03
62f68 10b             | 	res	1
62f68 10c             | arg04
62f68 10c             | 	res	1
62f68 10d             | arg05
62f68 10d             | 	res	1
62f68 10e             | arg06
62f68 10e             | 	res	1
62f68 10f             | arg07
62f68 10f             | 	res	1
62f68 110             | arg08
62f68 110             | 	res	1
62f68 111             | arg09
62f68 111             | 	res	1
62f68 112             | arg10
62f68 112             | 	res	1
62f68 113             | local01
62f68 113             | 	res	1
62f68 114             | local02
62f68 114             | 	res	1
62f68 115             | local03
62f68 115             | 	res	1
62f68 116             | local04
62f68 116             | 	res	1
62f68 117             | local05
62f68 117             | 	res	1
62f68 118             | local06
62f68 118             | 	res	1
62f68 119             | local07
62f68 119             | 	res	1
62f68 11a             | local08
62f68 11a             | 	res	1
62f68 11b             | local09
62f68 11b             | 	res	1
62f68 11c             | local10
62f68 11c             | 	res	1
62f68 11d             | local11
62f68 11d             | 	res	1
62f68 11e             | local12
62f68 11e             | 	res	1
62f68 11f             | local13
62f68 11f             | 	res	1
62f68 120             | local14
62f68 120             | 	res	1
62f68 121             | local15
62f68 121             | 	res	1
62f68 122             | local16
62f68 122             | 	res	1
62f68 123             | local17
62f68 123             | 	res	1
62f68 124             | local18
62f68 124             | 	res	1
62f68 125             | local19
62f68 125             | 	res	1
62f68 126             | local20
62f68 126             | 	res	1
62f68 127             | local21
62f68 127             | 	res	1
62f68 128             | local22
62f68 128             | 	res	1
62f68 129             | local23
62f68 129             | 	res	1
62f68 12a             | local24
62f68 12a             | 	res	1
62f68 12b             | local25
62f68 12b             | 	res	1
62f68 12c             | local26
62f68 12c             | 	res	1
62f68 12d             | local27
62f68 12d             | 	res	1
62f68 12e             | local28
62f68 12e             | 	res	1
62f68 12f             | local29
62f68 12f             | 	res	1
62f68 130             | local30
62f68 130             | 	res	1
62f68 131             | local31
62f68 131             | 	res	1
62f68 132             | local32
62f68 132             | 	res	1
62f68 133             | local33
62f68 133             | 	res	1
62f68 134             | local34
62f68 134             | 	res	1
62f68 135             | local35
62f68 135             | 	res	1
62f68 136             | local36
62f68 136             | 	res	1
62f68 137             | local37
62f68 137             | 	res	1
62f68 138             | local38
62f68 138             | 	res	1
62f68 139             | local39
62f68 139             | 	res	1
62f68 13a             | local40
62f68 13a             | 	res	1
62f68 13b             | local41
62f68 13b             | 	res	1
62f68 13c             | local42
62f68 13c             | 	res	1
62f68 13d             | local43
62f68 13d             | 	res	1
62f68 13e             | local44
62f68 13e             | 	res	1
62f68 13f             | local45
62f68 13f             | 	res	1
62f68 140             | local46
62f68 140             | 	res	1
62f68 141             | local47
62f68 141             | 	res	1
62f68 142             | local48
62f68 142             | 	res	1
62f68 143             | local49
62f68 143             | 	res	1
62f68 144             | muldiva_
62f68 144             | 	res	1
62f68 145             | muldivb_
62f68 145             | 	res	1
62f68 146             | 	fit	480
62f68 146             | 
